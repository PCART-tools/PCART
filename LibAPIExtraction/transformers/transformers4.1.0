
----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/integrations.py----------------------------------------
A:transformers.integrations.logger->utils.logging.get_logger(__name__)
A:transformers.integrations.model_path->os.path.join(checkpoint_dir, subdir)
A:transformers.integrations.metrics->trainer.evaluate()
A:transformers.integrations.trainer.objective->trainer.compute_objective(metrics)
A:transformers.integrations.timeout->kwargs.pop('timeout', None)
A:transformers.integrations.n_jobs->int(kwargs.pop('n_jobs', 1))
A:transformers.integrations.study->optuna.create_study(direction=direction, **kwargs)
A:transformers.integrations._tb_writer->trainer.pop_callback(TensorBoardCallback)
A:transformers.integrations.num_gpus_per_trial->int(math.ceil(num_gpus_per_trial / n_jobs))
A:transformers.integrations.kwargs['progress_reporter']->CLIReporter(metric_columns=['objective'])
A:transformers.integrations.analysis->ray.tune.run(_objective, config=trainer.hp_space(None), num_samples=n_trials, **kwargs)
A:transformers.integrations.best_trial->ray.tune.run(_objective, config=trainer.hp_space(None), num_samples=n_trials, **kwargs).get_best_trial(metric='objective', mode=direction[:3])
A:transformers.integrations.best_run->BestRun(best_trial.trial_id, best_trial.last_result['objective'], best_trial.config)
A:transformers.integrations.eval_prefix_len->len(eval_prefix)
A:transformers.integrations.self.tb_writer->SummaryWriter(log_dir=log_dir)
A:transformers.integrations.log_dir->os.path.join(args.logging_dir, trial_name)
A:transformers.integrations.model_config_json->model.config.to_json_string()
A:transformers.integrations.logs->rewrite_logs(logs)
A:transformers.integrations.model_config->model.config.to_dict()
A:transformers.integrations.comet_mode->os.getenv('COMET_MODE', 'ONLINE').upper()
A:transformers.integrations.experiment->comet_ml.config.get_global_experiment()
A:transformers.integrations.args['offline_directory']->os.getenv('COMET_OFFLINE_DIRECTORY', './')
A:transformers.integrations.self.azureml_run->azureml.core.run.Run.get_context()
A:transformers.integrations.log_artifacts->os.getenv('HF_MLFLOW_LOG_ARTIFACTS', 'FALSE').upper()
A:transformers.integrations.combined_dict->args.to_dict()
A:transformers.integrations.combined_dict_items->list(combined_dict.items())
transformers.integrations.AzureMLCallback(self,azureml_run=None)
transformers.integrations.AzureMLCallback.__init__(self,azureml_run=None)
transformers.integrations.AzureMLCallback.on_init_end(self,args,state,control,**kwargs)
transformers.integrations.AzureMLCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.integrations.CometCallback(self)
transformers.integrations.CometCallback.__init__(self)
transformers.integrations.CometCallback.on_log(self,args,state,control,model=None,logs=None,**kwargs)
transformers.integrations.CometCallback.on_train_begin(self,args,state,control,model=None,**kwargs)
transformers.integrations.CometCallback.setup(self,args,state,model)
transformers.integrations.MLflowCallback(self)
transformers.integrations.MLflowCallback.__del__(self)
transformers.integrations.MLflowCallback.__init__(self)
transformers.integrations.MLflowCallback.on_log(self,args,state,control,logs,model=None,**kwargs)
transformers.integrations.MLflowCallback.on_train_begin(self,args,state,control,model=None,**kwargs)
transformers.integrations.MLflowCallback.on_train_end(self,args,state,control,**kwargs)
transformers.integrations.MLflowCallback.setup(self,args,state,model)
transformers.integrations.TensorBoardCallback(self,tb_writer=None)
transformers.integrations.TensorBoardCallback.__init__(self,tb_writer=None)
transformers.integrations.TensorBoardCallback._init_summary_writer(self,args,log_dir=None)
transformers.integrations.TensorBoardCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.integrations.TensorBoardCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.integrations.TensorBoardCallback.on_train_end(self,args,state,control,**kwargs)
transformers.integrations.WandbCallback(self)
transformers.integrations.WandbCallback.__init__(self)
transformers.integrations.WandbCallback.on_log(self,args,state,control,model=None,logs=None,**kwargs)
transformers.integrations.WandbCallback.on_train_begin(self,args,state,control,model=None,**kwargs)
transformers.integrations.WandbCallback.setup(self,args,state,model,reinit,**kwargs)
transformers.integrations.default_hp_search_backend()
transformers.integrations.hp_params(trial)
transformers.integrations.is_azureml_available()
transformers.integrations.is_comet_available()
transformers.integrations.is_fairscale_available()
transformers.integrations.is_mlflow_available()
transformers.integrations.is_optuna_available()
transformers.integrations.is_ray_available()
transformers.integrations.is_tensorboard_available()
transformers.integrations.is_wandb_available()
transformers.integrations.rewrite_logs(d)
transformers.integrations.run_hp_search_optuna(trainer,n_trials:int,direction:str,**kwargs)->BestRun
transformers.integrations.run_hp_search_ray(trainer,n_trials:int,direction:str,**kwargs)->BestRun
transformers.is_comet_available()
transformers.is_optuna_available()
transformers.is_ray_available()
transformers.is_tensorboard_available()
transformers.is_wandb_available()


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/tokenization_utils_base.py----------------------------------------
A:transformers.tokenization_utils_base.logger->utils.logging.get_logger(__name__)
A:transformers.tokenization_utils_base.VERY_LARGE_INTEGER->int(1e+30)
A:transformers.tokenization_utils_base.LARGE_INTEGER->int(1e+20)
A:transformers.tokenization_utils_base.span->self._encodings[batch_index].word_to_tokens(word_index, sequence_index)
A:transformers.tokenization_utils_base.tensor_type->TensorType(tensor_type)
A:transformers.tokenization_utils_base.tensor->as_tensor(value)
A:transformers.tokenization_utils_base.self._bos_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._eos_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._unk_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._sep_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._pad_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._cls_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.self._mask_token->self.convert_tokens_to_ids(value)
A:transformers.tokenization_utils_base.attr_value->getattr(self, '_' + attr)
A:transformers.tokenization_utils_base.set_attr[attr]->str(attr_value)
A:transformers.tokenization_utils_base.all_toks->list(OrderedDict.fromkeys(all_toks))
A:transformers.tokenization_utils_base.all_ids->self.convert_tokens_to_ids(all_toks)
A:transformers.tokenization_utils_base.self.init_kwargs->copy.deepcopy(kwargs)
A:transformers.tokenization_utils_base.self.name_or_path->kwargs.pop('name_or_path', '')
A:transformers.tokenization_utils_base.model_max_length->kwargs.pop('model_max_length', kwargs.pop('max_len', None))
A:transformers.tokenization_utils_base.self.padding_side->kwargs.pop('padding_side', self.padding_side)
A:transformers.tokenization_utils_base.self.model_input_names->kwargs.pop('model_input_names', self.model_input_names)
A:transformers.tokenization_utils_base.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.tokenization_utils_base.force_download->kwargs.pop('force_download', False)
A:transformers.tokenization_utils_base.resume_download->kwargs.pop('resume_download', False)
A:transformers.tokenization_utils_base.proxies->kwargs.pop('proxies', None)
A:transformers.tokenization_utils_base.local_files_only->kwargs.pop('local_files_only', False)
A:transformers.tokenization_utils_base.use_auth_token->kwargs.pop('use_auth_token', None)
A:transformers.tokenization_utils_base.revision->kwargs.pop('revision', None)
A:transformers.tokenization_utils_base.subfolder->kwargs.pop('subfolder', None)
A:transformers.tokenization_utils_base.s3_models->list(cls.max_model_input_sizes.keys())
A:transformers.tokenization_utils_base.pretrained_model_name_or_path->str(pretrained_model_name_or_path)
A:transformers.tokenization_utils_base.init_configuration->cls.pretrained_init_configuration[pretrained_model_name_or_path].copy()
A:transformers.tokenization_utils_base.full_file_name->hf_bucket_url(pretrained_model_name_or_path, filename=file_name, subfolder=subfolder, revision=revision, mirror=None)
A:transformers.tokenization_utils_base.resolved_vocab_files[file_id]->cached_path(file_path, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)
A:transformers.tokenization_utils_base.slow_tokenizer->cls.slow_tokenizer_class._from_pretrained(copy.deepcopy(resolved_vocab_files), pretrained_model_name_or_path, copy.deepcopy(init_configuration), *init_inputs, **copy.deepcopy(kwargs))
A:transformers.tokenization_utils_base.tokenizer_config_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + TOKENIZER_CONFIG_FILE)
A:transformers.tokenization_utils_base.init_kwargs->convert_added_tokens(init_kwargs)
A:transformers.tokenization_utils_base.saved_init_inputs->convert_added_tokens(init_kwargs).pop('init_inputs', ())
A:transformers.tokenization_utils_base.init_kwargs['model_max_length']->min(init_kwargs.get('model_max_length', int(1e+30)), model_max_length)
A:transformers.tokenization_utils_base.added_tokens_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + ADDED_TOKENS_FILE)
A:transformers.tokenization_utils_base.tokenizer->cls(*init_inputs, **init_kwargs)
A:transformers.tokenization_utils_base.special_tokens_map_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + SPECIAL_TOKENS_MAP_FILE)
A:transformers.tokenization_utils_base.special_tokens_map->json.load(special_tokens_map_handle)
A:transformers.tokenization_utils_base.value->AddedToken(**value)
A:transformers.tokenization_utils_base.added_tok_encoder->json.load(added_tokens_handle)
A:transformers.tokenization_utils_base.added_tok_encoder_sorted->list(sorted(added_tok_encoder.items(), key=lambda x: x[1]))
A:transformers.tokenization_utils_base.added_tokens->cls(*init_inputs, **init_kwargs).sanitize_special_tokens()
A:transformers.tokenization_utils_base.tokenizer_config->convert_added_tokens(tokenizer_config, add_type_field=True)
A:transformers.tokenization_utils_base.tokenizer_config['init_inputs']->copy.deepcopy(self.init_inputs)
A:transformers.tokenization_utils_base.out->obj.__getstate__()
A:transformers.tokenization_utils_base.write_dict->convert_added_tokens(self.special_tokens_map_extended, add_type_field=False)
A:transformers.tokenization_utils_base.save_directory->str(save_directory)
A:transformers.tokenization_utils_base.added_vocab->self.get_added_vocab()
A:transformers.tokenization_utils_base.out_str->json.dumps(added_vocab, ensure_ascii=False)
A:transformers.tokenization_utils_base.vocab_files->self.save_vocabulary(save_directory, filename_prefix=filename_prefix)
A:transformers.tokenization_utils_base.encoded_inputs->self.pad(encoded_inputs, max_length=max_length, padding=padding_strategy.value, pad_to_multiple_of=pad_to_multiple_of, return_attention_mask=return_attention_mask)
A:transformers.tokenization_utils_base.old_truncation_strategy->kwargs.pop('truncation_strategy', 'do_not_truncate')
A:transformers.tokenization_utils_base.old_pad_to_max_length->kwargs.pop('pad_to_max_length', False)
A:transformers.tokenization_utils_base.padding_strategy->PaddingStrategy(padding)
A:transformers.tokenization_utils_base.truncation_strategy->TruncationStrategy(truncation_strategy)
A:transformers.tokenization_utils_base.is_batched->bool(not is_split_into_words and isinstance(text, (list, tuple)) or (is_split_into_words and isinstance(text, (list, tuple)) and text and isinstance(text[0], (list, tuple))))
A:transformers.tokenization_utils_base.(padding_strategy, truncation_strategy, max_length, kwargs)->self._get_padding_truncation_strategies(padding=padding, truncation=truncation, max_length=max_length, pad_to_multiple_of=pad_to_multiple_of, verbose=verbose, **kwargs)
A:transformers.tokenization_utils_base.encoded_inputs[key]->to_py_obj(value)
A:transformers.tokenization_utils_base.(padding_strategy, _, max_length, _)->self._get_padding_truncation_strategies(padding=padding, max_length=max_length, verbose=verbose)
A:transformers.tokenization_utils_base.batch_size->len(encoded_inputs['input_ids'])
A:transformers.tokenization_utils_base.max_length->len(encoded_inputs['input_ids'])
A:transformers.tokenization_utils_base.inputs->dict(((k, v[i]) for (k, v) in encoded_inputs.items()))
A:transformers.tokenization_utils_base.outputs->self._pad(inputs, max_length=max_length, padding_strategy=padding_strategy, pad_to_multiple_of=pad_to_multiple_of, return_attention_mask=return_attention_mask)
A:transformers.tokenization_utils_base.pair->bool(pair_ids is not None)
A:transformers.tokenization_utils_base.len_ids->len(ids)
A:transformers.tokenization_utils_base.(ids, pair_ids, overflowing_tokens)->self.truncate_sequences(ids, pair_ids=pair_ids, num_tokens_to_remove=total_len - max_length, truncation_strategy=truncation_strategy, stride=stride)
A:transformers.tokenization_utils_base.sequence->self.build_inputs_with_special_tokens(ids, pair_ids)
A:transformers.tokenization_utils_base.token_type_ids->self.create_token_type_ids_from_sequences(ids, pair_ids)
A:transformers.tokenization_utils_base.encoded_inputs['special_tokens_mask']->self.get_special_tokens_mask(ids, pair_ids)
A:transformers.tokenization_utils_base.encoded_inputs['length']->len(encoded_inputs['input_ids'])
A:transformers.tokenization_utils_base.batch_outputs->BatchEncoding(encoded_inputs, tensor_type=return_tensors, prepend_batch_axis=prepend_batch_axis)
A:transformers.tokenization_utils_base.window_len->min(len(pair_ids), stride + num_tokens_to_remove)
A:transformers.tokenization_utils_base.token_ids->to_py_obj(token_ids)
A:transformers.tokenization_utils_base.out_string->out_string.replace(' .', '.').replace(' ?', '?').replace(' !', '!').replace(' ,', ',').replace(" ' ", "'").replace(" n't", "n't").replace(" 'm", "'m").replace(" 's", "'s").replace(" 've", "'ve").replace(" 're", "'re").replace(' .', '.').replace(' ?', '?').replace(' !', '!').replace(' ,', ',').replace(" ' ", "'").replace(" n't", "n't").replace(" 'm", "'m").replace(" 's", "'s").replace(" 've", "'ve").replace(" 're", "'re")
transformers.BatchEncoding(self,data:Optional[Dict[str,Any]]=None,encoding:Optional[Union[EncodingFast,Sequence[EncodingFast]]]=None,tensor_type:Union[None,str,TensorType]=None,prepend_batch_axis:bool=False,n_sequences:Optional[int]=None)
transformers.BatchEncoding.__getattr__(self,item:str)
transformers.BatchEncoding.__getitem__(self,item:Union[int,str])->Union[Any, EncodingFast]
transformers.BatchEncoding.__getstate__(self)
transformers.BatchEncoding.__setstate__(self,state)
transformers.BatchEncoding.char_to_token(self,batch_or_char_index:int,char_index:Optional[int]=None,sequence_index:int=0)->int
transformers.BatchEncoding.char_to_word(self,batch_or_char_index:int,char_index:Optional[int]=None,sequence_index:int=0)->int
transformers.BatchEncoding.convert_to_tensors(self,tensor_type:Optional[Union[str,TensorType]]=None,prepend_batch_axis:bool=False)
transformers.BatchEncoding.encodings(self)->Optional[List[EncodingFast]]
transformers.BatchEncoding.is_fast(self)->bool
transformers.BatchEncoding.items(self)
transformers.BatchEncoding.keys(self)
transformers.BatchEncoding.n_sequences(self)->Optional[int]
transformers.BatchEncoding.sequence_ids(self,batch_index:int=0)->List[Optional[int]]
transformers.BatchEncoding.to(self,device:Union[str,'torch.device'])->'BatchEncoding'
transformers.BatchEncoding.token_to_chars(self,batch_or_token_index:int,token_index:Optional[int]=None)->CharSpan
transformers.BatchEncoding.token_to_sequence(self,batch_or_token_index:int,token_index:Optional[int]=None)->int
transformers.BatchEncoding.token_to_word(self,batch_or_token_index:int,token_index:Optional[int]=None)->int
transformers.BatchEncoding.tokens(self,batch_index:int=0)->List[str]
transformers.BatchEncoding.values(self)
transformers.BatchEncoding.word_ids(self,batch_index:int=0)->List[Optional[int]]
transformers.BatchEncoding.word_to_chars(self,batch_or_word_index:int,word_index:Optional[int]=None,sequence_index:int=0)->CharSpan
transformers.BatchEncoding.word_to_tokens(self,batch_or_word_index:int,word_index:Optional[int]=None,sequence_index:int=0)->Optional[TokenSpan]
transformers.BatchEncoding.words(self,batch_index:int=0)->List[Optional[int]]
transformers.CharSpan(NamedTuple)
transformers.PreTrainedTokenizerBase(self,**kwargs)
transformers.PreTrainedTokenizerBase.__repr__(self)->str
transformers.PreTrainedTokenizerBase._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerBase._decode(self,token_ids:Union[int,List[int]],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.PreTrainedTokenizerBase._encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerBase._eventual_warn_about_too_long_sequence(self,ids:List[int],max_length:Optional[int],verbose:bool)
transformers.PreTrainedTokenizerBase._from_pretrained(cls,resolved_vocab_files,pretrained_model_name_or_path,init_configuration,*init_inputs,**kwargs)
transformers.PreTrainedTokenizerBase._get_padding_truncation_strategies(self,padding=False,truncation=False,max_length=None,pad_to_multiple_of=None,verbose=True,**kwargs)
transformers.PreTrainedTokenizerBase._pad(self,encoded_inputs:Union[Dict[str,EncodedInput],BatchEncoding],max_length:Optional[int]=None,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None)->dict
transformers.PreTrainedTokenizerBase._save_pretrained(self,save_directory:Union[str,os.PathLike],file_names:Tuple[str],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PreTrainedTokenizerBase.batch_decode(self,sequences:Union[List[int],List[List[int]],'np.ndarray','torch.Tensor','tf.Tensor'],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->List[str]
transformers.PreTrainedTokenizerBase.batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerBase.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.PreTrainedTokenizerBase.clean_up_tokenization(out_string:str)->str
transformers.PreTrainedTokenizerBase.convert_tokens_to_string(self,tokens:List[str])->str
transformers.PreTrainedTokenizerBase.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.PreTrainedTokenizerBase.decode(self,token_ids:Union[int,List[int],'np.ndarray','torch.Tensor','tf.Tensor'],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.PreTrainedTokenizerBase.encode(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,return_tensors:Optional[Union[str,TensorType]]=None,**kwargs)->List[int]
transformers.PreTrainedTokenizerBase.encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerBase.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],*init_inputs,**kwargs)
transformers.PreTrainedTokenizerBase.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.PreTrainedTokenizerBase.get_vocab(self)->Dict[str, int]
transformers.PreTrainedTokenizerBase.max_len_sentences_pair(self)->int
transformers.PreTrainedTokenizerBase.max_len_sentences_pair(self,value)->int
transformers.PreTrainedTokenizerBase.max_len_single_sentence(self)->int
transformers.PreTrainedTokenizerBase.max_len_single_sentence(self,value)->int
transformers.PreTrainedTokenizerBase.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.PreTrainedTokenizerBase.pad(self,encoded_inputs:Union[BatchEncoding,List[BatchEncoding],Dict[str,EncodedInput],Dict[str,List[EncodedInput]],List[Dict[str,EncodedInput]]],padding:Union[bool,str,PaddingStrategy]=True,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None,return_tensors:Optional[Union[str,TensorType]]=None,verbose:bool=True)->BatchEncoding
transformers.PreTrainedTokenizerBase.prepare_for_model(self,ids:List[int],pair_ids:Optional[List[int]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerBase.save_pretrained(self,save_directory:Union[str,os.PathLike],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PreTrainedTokenizerBase.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PreTrainedTokenizerBase.tokenize(self,text:str,pair:Optional[str]=None,add_special_tokens:bool=False,**kwargs)->List[str]
transformers.PreTrainedTokenizerBase.truncate_sequences(self,ids:List[int],pair_ids:Optional[List[int]]=None,num_tokens_to_remove:int=0,truncation_strategy:Union[str,TruncationStrategy]='longest_first',stride:int=0)->Tuple[List[int], List[int], List[int]]
transformers.SpecialTokensMixin(self,verbose=True,**kwargs)
transformers.SpecialTokensMixin._add_tokens(self,new_tokens:Union[List[str],List[AddedToken]],special_tokens:bool=False)->int
transformers.SpecialTokensMixin.add_special_tokens(self,special_tokens_dict:Dict[str,Union[str,AddedToken]])->int
transformers.SpecialTokensMixin.add_tokens(self,new_tokens:Union[str,AddedToken,List[Union[str,AddedToken]]],special_tokens:bool=False)->int
transformers.SpecialTokensMixin.additional_special_tokens(self)->List[str]
transformers.SpecialTokensMixin.additional_special_tokens(self,value)
transformers.SpecialTokensMixin.additional_special_tokens_ids(self)->List[int]
transformers.SpecialTokensMixin.additional_special_tokens_ids(self,values)
transformers.SpecialTokensMixin.all_special_ids(self)->List[int]
transformers.SpecialTokensMixin.all_special_tokens(self)->List[str]
transformers.SpecialTokensMixin.all_special_tokens_extended(self)->List[Union[str, AddedToken]]
transformers.SpecialTokensMixin.bos_token(self)->str
transformers.SpecialTokensMixin.bos_token(self,value)
transformers.SpecialTokensMixin.bos_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.bos_token_id(self,value)
transformers.SpecialTokensMixin.cls_token(self)->str
transformers.SpecialTokensMixin.cls_token(self,value)
transformers.SpecialTokensMixin.cls_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.cls_token_id(self,value)
transformers.SpecialTokensMixin.eos_token(self)->str
transformers.SpecialTokensMixin.eos_token(self,value)
transformers.SpecialTokensMixin.eos_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.eos_token_id(self,value)
transformers.SpecialTokensMixin.mask_token(self)->str
transformers.SpecialTokensMixin.mask_token(self,value)
transformers.SpecialTokensMixin.mask_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.mask_token_id(self,value)
transformers.SpecialTokensMixin.pad_token(self)->str
transformers.SpecialTokensMixin.pad_token(self,value)
transformers.SpecialTokensMixin.pad_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.pad_token_id(self,value)
transformers.SpecialTokensMixin.pad_token_type_id(self)->int
transformers.SpecialTokensMixin.sanitize_special_tokens(self)->int
transformers.SpecialTokensMixin.sep_token(self)->str
transformers.SpecialTokensMixin.sep_token(self,value)
transformers.SpecialTokensMixin.sep_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.sep_token_id(self,value)
transformers.SpecialTokensMixin.special_tokens_map(self)->Dict[str, Union[str, List[str]]]
transformers.SpecialTokensMixin.special_tokens_map_extended(self)->Dict[str, Union[str, AddedToken, List[Union[str, AddedToken]]]]
transformers.SpecialTokensMixin.unk_token(self)->str
transformers.SpecialTokensMixin.unk_token(self,value)
transformers.SpecialTokensMixin.unk_token_id(self)->Optional[int]
transformers.SpecialTokensMixin.unk_token_id(self,value)
transformers.TensorType(ExplicitEnum)
transformers.TokenSpan(NamedTuple)
transformers.tokenization_utils_base.BatchEncoding(self,data:Optional[Dict[str,Any]]=None,encoding:Optional[Union[EncodingFast,Sequence[EncodingFast]]]=None,tensor_type:Union[None,str,TensorType]=None,prepend_batch_axis:bool=False,n_sequences:Optional[int]=None)
transformers.tokenization_utils_base.BatchEncoding.__getattr__(self,item:str)
transformers.tokenization_utils_base.BatchEncoding.__getitem__(self,item:Union[int,str])->Union[Any, EncodingFast]
transformers.tokenization_utils_base.BatchEncoding.__getstate__(self)
transformers.tokenization_utils_base.BatchEncoding.__init__(self,data:Optional[Dict[str,Any]]=None,encoding:Optional[Union[EncodingFast,Sequence[EncodingFast]]]=None,tensor_type:Union[None,str,TensorType]=None,prepend_batch_axis:bool=False,n_sequences:Optional[int]=None)
transformers.tokenization_utils_base.BatchEncoding.__setstate__(self,state)
transformers.tokenization_utils_base.BatchEncoding.char_to_token(self,batch_or_char_index:int,char_index:Optional[int]=None,sequence_index:int=0)->int
transformers.tokenization_utils_base.BatchEncoding.char_to_word(self,batch_or_char_index:int,char_index:Optional[int]=None,sequence_index:int=0)->int
transformers.tokenization_utils_base.BatchEncoding.convert_to_tensors(self,tensor_type:Optional[Union[str,TensorType]]=None,prepend_batch_axis:bool=False)
transformers.tokenization_utils_base.BatchEncoding.encodings(self)->Optional[List[EncodingFast]]
transformers.tokenization_utils_base.BatchEncoding.is_fast(self)->bool
transformers.tokenization_utils_base.BatchEncoding.items(self)
transformers.tokenization_utils_base.BatchEncoding.keys(self)
transformers.tokenization_utils_base.BatchEncoding.n_sequences(self)->Optional[int]
transformers.tokenization_utils_base.BatchEncoding.sequence_ids(self,batch_index:int=0)->List[Optional[int]]
transformers.tokenization_utils_base.BatchEncoding.to(self,device:Union[str,'torch.device'])->'BatchEncoding'
transformers.tokenization_utils_base.BatchEncoding.token_to_chars(self,batch_or_token_index:int,token_index:Optional[int]=None)->CharSpan
transformers.tokenization_utils_base.BatchEncoding.token_to_sequence(self,batch_or_token_index:int,token_index:Optional[int]=None)->int
transformers.tokenization_utils_base.BatchEncoding.token_to_word(self,batch_or_token_index:int,token_index:Optional[int]=None)->int
transformers.tokenization_utils_base.BatchEncoding.tokens(self,batch_index:int=0)->List[str]
transformers.tokenization_utils_base.BatchEncoding.values(self)
transformers.tokenization_utils_base.BatchEncoding.word_ids(self,batch_index:int=0)->List[Optional[int]]
transformers.tokenization_utils_base.BatchEncoding.word_to_chars(self,batch_or_word_index:int,word_index:Optional[int]=None,sequence_index:int=0)->CharSpan
transformers.tokenization_utils_base.BatchEncoding.word_to_tokens(self,batch_or_word_index:int,word_index:Optional[int]=None,sequence_index:int=0)->Optional[TokenSpan]
transformers.tokenization_utils_base.BatchEncoding.words(self,batch_index:int=0)->List[Optional[int]]
transformers.tokenization_utils_base.CharSpan(NamedTuple)
transformers.tokenization_utils_base.ExplicitEnum(Enum)
transformers.tokenization_utils_base.ExplicitEnum._missing_(cls,value)
transformers.tokenization_utils_base.PaddingStrategy(ExplicitEnum)
transformers.tokenization_utils_base.PreTrainedTokenizerBase(self,**kwargs)
transformers.tokenization_utils_base.PreTrainedTokenizerBase.__init__(self,**kwargs)
transformers.tokenization_utils_base.PreTrainedTokenizerBase.__repr__(self)->str
transformers.tokenization_utils_base.PreTrainedTokenizerBase._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase._decode(self,token_ids:Union[int,List[int]],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.tokenization_utils_base.PreTrainedTokenizerBase._encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase._eventual_warn_about_too_long_sequence(self,ids:List[int],max_length:Optional[int],verbose:bool)
transformers.tokenization_utils_base.PreTrainedTokenizerBase._from_pretrained(cls,resolved_vocab_files,pretrained_model_name_or_path,init_configuration,*init_inputs,**kwargs)
transformers.tokenization_utils_base.PreTrainedTokenizerBase._get_padding_truncation_strategies(self,padding=False,truncation=False,max_length=None,pad_to_multiple_of=None,verbose=True,**kwargs)
transformers.tokenization_utils_base.PreTrainedTokenizerBase._pad(self,encoded_inputs:Union[Dict[str,EncodedInput],BatchEncoding],max_length:Optional[int]=None,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None)->dict
transformers.tokenization_utils_base.PreTrainedTokenizerBase._save_pretrained(self,save_directory:Union[str,os.PathLike],file_names:Tuple[str],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.batch_decode(self,sequences:Union[List[int],List[List[int]],'np.ndarray','torch.Tensor','tf.Tensor'],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->List[str]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.clean_up_tokenization(out_string:str)->str
transformers.tokenization_utils_base.PreTrainedTokenizerBase.convert_tokens_to_string(self,tokens:List[str])->str
transformers.tokenization_utils_base.PreTrainedTokenizerBase.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.decode(self,token_ids:Union[int,List[int],'np.ndarray','torch.Tensor','tf.Tensor'],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.tokenization_utils_base.PreTrainedTokenizerBase.encode(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,return_tensors:Optional[Union[str,TensorType]]=None,**kwargs)->List[int]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],*init_inputs,**kwargs)
transformers.tokenization_utils_base.PreTrainedTokenizerBase.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.get_vocab(self)->Dict[str, int]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.max_len_sentences_pair(self)->int
transformers.tokenization_utils_base.PreTrainedTokenizerBase.max_len_sentences_pair(self,value)->int
transformers.tokenization_utils_base.PreTrainedTokenizerBase.max_len_single_sentence(self)->int
transformers.tokenization_utils_base.PreTrainedTokenizerBase.max_len_single_sentence(self,value)->int
transformers.tokenization_utils_base.PreTrainedTokenizerBase.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.tokenization_utils_base.PreTrainedTokenizerBase.pad(self,encoded_inputs:Union[BatchEncoding,List[BatchEncoding],Dict[str,EncodedInput],Dict[str,List[EncodedInput]],List[Dict[str,EncodedInput]]],padding:Union[bool,str,PaddingStrategy]=True,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None,return_tensors:Optional[Union[str,TensorType]]=None,verbose:bool=True)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase.prepare_for_model(self,ids:List[int],pair_ids:Optional[List[int]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TruncationStrategy]=False,max_length:Optional[int]=None,stride:int=0,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.tokenization_utils_base.PreTrainedTokenizerBase.save_pretrained(self,save_directory:Union[str,os.PathLike],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.tokenize(self,text:str,pair:Optional[str]=None,add_special_tokens:bool=False,**kwargs)->List[str]
transformers.tokenization_utils_base.PreTrainedTokenizerBase.truncate_sequences(self,ids:List[int],pair_ids:Optional[List[int]]=None,num_tokens_to_remove:int=0,truncation_strategy:Union[str,TruncationStrategy]='longest_first',stride:int=0)->Tuple[List[int], List[int], List[int]]
transformers.tokenization_utils_base.SpecialTokensMixin(self,verbose=True,**kwargs)
transformers.tokenization_utils_base.SpecialTokensMixin.__init__(self,verbose=True,**kwargs)
transformers.tokenization_utils_base.SpecialTokensMixin._add_tokens(self,new_tokens:Union[List[str],List[AddedToken]],special_tokens:bool=False)->int
transformers.tokenization_utils_base.SpecialTokensMixin.add_special_tokens(self,special_tokens_dict:Dict[str,Union[str,AddedToken]])->int
transformers.tokenization_utils_base.SpecialTokensMixin.add_tokens(self,new_tokens:Union[str,AddedToken,List[Union[str,AddedToken]]],special_tokens:bool=False)->int
transformers.tokenization_utils_base.SpecialTokensMixin.additional_special_tokens(self)->List[str]
transformers.tokenization_utils_base.SpecialTokensMixin.additional_special_tokens(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.additional_special_tokens_ids(self)->List[int]
transformers.tokenization_utils_base.SpecialTokensMixin.additional_special_tokens_ids(self,values)
transformers.tokenization_utils_base.SpecialTokensMixin.all_special_ids(self)->List[int]
transformers.tokenization_utils_base.SpecialTokensMixin.all_special_tokens(self)->List[str]
transformers.tokenization_utils_base.SpecialTokensMixin.all_special_tokens_extended(self)->List[Union[str, AddedToken]]
transformers.tokenization_utils_base.SpecialTokensMixin.bos_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.bos_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.bos_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.bos_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.cls_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.cls_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.cls_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.cls_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.eos_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.eos_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.eos_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.eos_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.mask_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.mask_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.mask_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.mask_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.pad_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.pad_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.pad_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.pad_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.pad_token_type_id(self)->int
transformers.tokenization_utils_base.SpecialTokensMixin.sanitize_special_tokens(self)->int
transformers.tokenization_utils_base.SpecialTokensMixin.sep_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.sep_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.sep_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.sep_token_id(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.special_tokens_map(self)->Dict[str, Union[str, List[str]]]
transformers.tokenization_utils_base.SpecialTokensMixin.special_tokens_map_extended(self)->Dict[str, Union[str, AddedToken, List[Union[str, AddedToken]]]]
transformers.tokenization_utils_base.SpecialTokensMixin.unk_token(self)->str
transformers.tokenization_utils_base.SpecialTokensMixin.unk_token(self,value)
transformers.tokenization_utils_base.SpecialTokensMixin.unk_token_id(self)->Optional[int]
transformers.tokenization_utils_base.SpecialTokensMixin.unk_token_id(self,value)
transformers.tokenization_utils_base.TensorType(ExplicitEnum)
transformers.tokenization_utils_base.TokenSpan(NamedTuple)
transformers.tokenization_utils_base.TruncationStrategy(ExplicitEnum)
transformers.tokenization_utils_base._is_jax(x)
transformers.tokenization_utils_base._is_numpy(x)
transformers.tokenization_utils_base.to_py_obj(obj)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/optimization_tf.py----------------------------------------
A:transformers.optimization_tf.global_step_float->tensorflow.cast(step, tf.float32)
A:transformers.optimization_tf.warmup_steps_float->tensorflow.cast(self.warmup_steps, tf.float32)
A:transformers.optimization_tf.lr_schedule->WarmUp(initial_learning_rate=init_lr, decay_schedule_fn=lr_schedule, warmup_steps=num_warmup_steps)
A:transformers.optimization_tf.optimizer->tensorflow.keras.optimizers.Adam(learning_rate=lr_schedule, beta_1=adam_beta1, beta_2=adam_beta2, epsilon=adam_epsilon)
A:transformers.optimization_tf.apply_state[var_device, var_dtype]['weight_decay_rate']->tensorflow.constant(self.weight_decay_rate, name='adam_weight_decay_rate')
A:transformers.optimization_tf.do_decay->self._do_use_weight_decay(var.name)
A:transformers.optimization_tf.(grads, tvars)->list(zip(*grads_and_vars))
A:transformers.optimization_tf.coefficients->self._fallback_apply_state(var_device, var_dtype)
A:transformers.optimization_tf.(lr_t, kwargs)->self._get_lr(var.device, var.dtype.base_dtype, apply_state)
A:transformers.optimization_tf.decay->self._decay_weights_op(var, lr_t, apply_state)
A:transformers.optimization_tf.config->super().get_config()
A:transformers.optimization_tf.self._accum_steps->tensorflow.Variable(tf.constant(0, dtype=tf.int64), trainable=False, synchronization=tf.VariableSynchronization.ON_READ, aggregation=tf.VariableAggregation.ONLY_FIRST_REPLICA)
transformers.AdamWeightDecay(self,learning_rate:Union[float,tf.keras.optimizers.schedules.LearningRateSchedule]=0.001,beta_1:float=0.9,beta_2:float=0.999,epsilon:float=1e-07,amsgrad:bool=False,weight_decay_rate:float=0.0,include_in_weight_decay:Optional[List[str]]=None,exclude_from_weight_decay:Optional[List[str]]=None,name:str='AdamWeightDecay',**kwargs)
transformers.AdamWeightDecay._decay_weights_op(self,var,learning_rate,apply_state)
transformers.AdamWeightDecay._do_use_weight_decay(self,param_name)
transformers.AdamWeightDecay._get_lr(self,var_device,var_dtype,apply_state)
transformers.AdamWeightDecay._prepare_local(self,var_device,var_dtype,apply_state)
transformers.AdamWeightDecay._resource_apply_dense(self,grad,var,apply_state=None)
transformers.AdamWeightDecay._resource_apply_sparse(self,grad,var,indices,apply_state=None)
transformers.AdamWeightDecay.apply_gradients(self,grads_and_vars,name=None,**kwargs)
transformers.AdamWeightDecay.from_config(cls,config)
transformers.AdamWeightDecay.get_config(self)
transformers.GradientAccumulator(self)
transformers.GradientAccumulator.gradients(self)
transformers.GradientAccumulator.reset(self)
transformers.GradientAccumulator.step(self)
transformers.WarmUp(self,initial_learning_rate:float,decay_schedule_fn:Callable,warmup_steps:int,power:float=1.0,name:str=None)
transformers.WarmUp.get_config(self)
transformers.create_optimizer(init_lr:float,num_train_steps:int,num_warmup_steps:int,min_lr_ratio:float=0.0,adam_beta1:float=0.9,adam_beta2:float=0.999,adam_epsilon:float=1e-08,weight_decay_rate:float=0.0,power:float=1.0,include_in_weight_decay:Optional[List[str]]=None)
transformers.optimization_tf.AdamWeightDecay(self,learning_rate:Union[float,tf.keras.optimizers.schedules.LearningRateSchedule]=0.001,beta_1:float=0.9,beta_2:float=0.999,epsilon:float=1e-07,amsgrad:bool=False,weight_decay_rate:float=0.0,include_in_weight_decay:Optional[List[str]]=None,exclude_from_weight_decay:Optional[List[str]]=None,name:str='AdamWeightDecay',**kwargs)
transformers.optimization_tf.AdamWeightDecay.__init__(self,learning_rate:Union[float,tf.keras.optimizers.schedules.LearningRateSchedule]=0.001,beta_1:float=0.9,beta_2:float=0.999,epsilon:float=1e-07,amsgrad:bool=False,weight_decay_rate:float=0.0,include_in_weight_decay:Optional[List[str]]=None,exclude_from_weight_decay:Optional[List[str]]=None,name:str='AdamWeightDecay',**kwargs)
transformers.optimization_tf.AdamWeightDecay._decay_weights_op(self,var,learning_rate,apply_state)
transformers.optimization_tf.AdamWeightDecay._do_use_weight_decay(self,param_name)
transformers.optimization_tf.AdamWeightDecay._get_lr(self,var_device,var_dtype,apply_state)
transformers.optimization_tf.AdamWeightDecay._prepare_local(self,var_device,var_dtype,apply_state)
transformers.optimization_tf.AdamWeightDecay._resource_apply_dense(self,grad,var,apply_state=None)
transformers.optimization_tf.AdamWeightDecay._resource_apply_sparse(self,grad,var,indices,apply_state=None)
transformers.optimization_tf.AdamWeightDecay.apply_gradients(self,grads_and_vars,name=None,**kwargs)
transformers.optimization_tf.AdamWeightDecay.from_config(cls,config)
transformers.optimization_tf.AdamWeightDecay.get_config(self)
transformers.optimization_tf.GradientAccumulator(self)
transformers.optimization_tf.GradientAccumulator.__init__(self)
transformers.optimization_tf.GradientAccumulator.gradients(self)
transformers.optimization_tf.GradientAccumulator.reset(self)
transformers.optimization_tf.GradientAccumulator.step(self)
transformers.optimization_tf.WarmUp(self,initial_learning_rate:float,decay_schedule_fn:Callable,warmup_steps:int,power:float=1.0,name:str=None)
transformers.optimization_tf.WarmUp.__init__(self,initial_learning_rate:float,decay_schedule_fn:Callable,warmup_steps:int,power:float=1.0,name:str=None)
transformers.optimization_tf.WarmUp.get_config(self)
transformers.optimization_tf.create_optimizer(init_lr:float,num_train_steps:int,num_warmup_steps:int,min_lr_ratio:float=0.0,adam_beta1:float=0.9,adam_beta2:float=0.999,adam_epsilon:float=1e-08,weight_decay_rate:float=0.0,power:float=1.0,include_in_weight_decay:Optional[List[str]]=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/tokenization_utils.py----------------------------------------
A:transformers.tokenization_utils.logger->utils.logging.get_logger(__name__)
A:transformers.tokenization_utils.cat->unicodedata.category(char)
A:transformers.tokenization_utils.cp->ord(char)
A:transformers.tokenization_utils.token->token.lower().lower()
A:transformers.tokenization_utils.added_tok_encoder->dict(((tok, len(self) + i) for (i, tok) in enumerate(tokens_to_add)))
A:transformers.tokenization_utils.self.unique_no_split_tokens->sorted(set(self.unique_no_split_tokens).union(set(tokens_to_add)))
A:transformers.tokenization_utils.all_special_tokens_extended->dict(((str(t), t) for t in self.all_special_tokens_extended if isinstance(t, AddedToken)))
A:transformers.tokenization_utils.(text, kwargs)->self.prepare_for_tokenization(text, **kwargs)
A:transformers.tokenization_utils.text->''.join(sub_texts)
A:transformers.tokenization_utils.tok_extended->dict(((str(t), t) for t in self.all_special_tokens_extended if isinstance(t, AddedToken))).get(tok, None)
A:transformers.tokenization_utils.split_text->''.join(sub_texts).split(tok)
A:transformers.tokenization_utils.sub_text->sub_text.lstrip().lstrip()
A:transformers.tokenization_utils.tokenized_text->split_on_tokens(no_split_token, text)
A:transformers.tokenization_utils.tokens->list(itertools.chain(*(self.tokenize(t, is_split_into_words=True, **kwargs) for t in text)))
A:transformers.tokenization_utils.first_ids->get_input_ids(ids)
A:transformers.tokenization_utils.batch_outputs->BatchEncoding(batch_outputs, tensor_type=return_tensors)
A:transformers.tokenization_utils.outputs->self.prepare_for_model(first_ids, second_ids, add_special_tokens=add_special_tokens, padding=PaddingStrategy.DO_NOT_PAD.value, truncation=truncation_strategy.value, max_length=max_length, stride=stride, pad_to_multiple_of=None, return_attention_mask=False, return_token_type_ids=return_token_type_ids, return_overflowing_tokens=return_overflowing_tokens, return_special_tokens_mask=return_special_tokens_mask, return_length=return_length, return_tensors=None, prepend_batch_axis=False, verbose=verbose)
A:transformers.tokenization_utils.index->int(index)
A:transformers.tokenization_utils.filtered_tokens->self.convert_ids_to_tokens(token_ids, skip_special_tokens=skip_special_tokens)
A:transformers.tokenization_utils.clean_text->self.clean_up_tokenization(text)
transformers.PreTrainedTokenizer(self,**kwargs)
transformers.PreTrainedTokenizer.__len__(self)
transformers.PreTrainedTokenizer._add_tokens(self,new_tokens:Union[List[str],List[AddedToken]],special_tokens:bool=False)->int
transformers.PreTrainedTokenizer._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizer._batch_prepare_for_model(self,batch_ids_pairs:List[Union[PreTokenizedInputPair,Tuple[List[int],None]]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[str]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_length:bool=False,verbose:bool=True)->BatchEncoding
transformers.PreTrainedTokenizer._convert_id_to_token(self,index:int)->str
transformers.PreTrainedTokenizer._convert_token_to_id(self,token)
transformers.PreTrainedTokenizer._convert_token_to_id_with_added_voc(self,token)
transformers.PreTrainedTokenizer._decode(self,token_ids:List[int],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,spaces_between_special_tokens:bool=True)->str
transformers.PreTrainedTokenizer._encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizer._tokenize(self,text,**kwargs)
transformers.PreTrainedTokenizer.convert_ids_to_tokens(self,ids:Union[int,List[int]],skip_special_tokens:bool=False)->Union[str, List[str]]
transformers.PreTrainedTokenizer.convert_tokens_to_ids(self,tokens:Union[str,List[str]])->Union[int, List[int]]
transformers.PreTrainedTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.PreTrainedTokenizer.get_added_vocab(self)->Dict[str, int]
transformers.PreTrainedTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.PreTrainedTokenizer.is_fast(self)->bool
transformers.PreTrainedTokenizer.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.PreTrainedTokenizer.prepare_for_tokenization(self,text:str,is_split_into_words:bool=False,**kwargs)->Tuple[str, Dict[str, Any]]
transformers.PreTrainedTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizer.tokenize(self,text:TextInput,**kwargs)->List[str]
transformers.PreTrainedTokenizer.vocab_size(self)->int
transformers.tokenization_utils.PreTrainedTokenizer(self,**kwargs)
transformers.tokenization_utils.PreTrainedTokenizer.__init__(self,**kwargs)
transformers.tokenization_utils.PreTrainedTokenizer.__len__(self)
transformers.tokenization_utils.PreTrainedTokenizer._add_tokens(self,new_tokens:Union[List[str],List[AddedToken]],special_tokens:bool=False)->int
transformers.tokenization_utils.PreTrainedTokenizer._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair],List[EncodedInput],List[EncodedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils.PreTrainedTokenizer._batch_prepare_for_model(self,batch_ids_pairs:List[Union[PreTokenizedInputPair,Tuple[List[int],None]]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[str]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_length:bool=False,verbose:bool=True)->BatchEncoding
transformers.tokenization_utils.PreTrainedTokenizer._convert_id_to_token(self,index:int)->str
transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id(self,token)
transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc(self,token)
transformers.tokenization_utils.PreTrainedTokenizer._decode(self,token_ids:List[int],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,spaces_between_special_tokens:bool=True)->str
transformers.tokenization_utils.PreTrainedTokenizer._encode_plus(self,text:Union[TextInput,PreTokenizedInput,EncodedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils.PreTrainedTokenizer._tokenize(self,text,**kwargs)
transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens(self,ids:Union[int,List[int]],skip_special_tokens:bool=False)->Union[str, List[str]]
transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids(self,tokens:Union[str,List[str]])->Union[int, List[int]]
transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.tokenization_utils.PreTrainedTokenizer.get_added_vocab(self)->Dict[str, int]
transformers.tokenization_utils.PreTrainedTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.tokenization_utils.PreTrainedTokenizer.is_fast(self)->bool
transformers.tokenization_utils.PreTrainedTokenizer.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.tokenization_utils.PreTrainedTokenizer.prepare_for_tokenization(self,text:str,is_split_into_words:bool=False,**kwargs)->Tuple[str, Dict[str, Any]]
transformers.tokenization_utils.PreTrainedTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.tokenization_utils.PreTrainedTokenizer.tokenize(self,text:TextInput,**kwargs)->List[str]
transformers.tokenization_utils.PreTrainedTokenizer.vocab_size(self)->int
transformers.tokenization_utils._is_control(char)
transformers.tokenization_utils._is_end_of_word(text)
transformers.tokenization_utils._is_punctuation(char)
transformers.tokenization_utils._is_start_of_word(text)
transformers.tokenization_utils._is_whitespace(char)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/activations_tf.py----------------------------------------
A:transformers.activations_tf.x->tensorflow.convert_to_tensor(x)
A:transformers.activations_tf.pi->tensorflow.cast(math.pi, x.dtype)
A:transformers.activations_tf.coeff->tensorflow.cast(0.044715, x.dtype)
A:transformers.activations_tf.coeff1->tensorflow.cast(7978845608, x.dtype)
A:transformers.activations_tf.coeff2->tensorflow.cast(0.044715, x.dtype)
transformers.activations_tf.gelu(x)
transformers.activations_tf.gelu_fast(x)
transformers.activations_tf.gelu_new(x)
transformers.activations_tf.get_tf_activation(activation_string)
transformers.activations_tf.mish(x)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/file_utils.py----------------------------------------
A:transformers.file_utils.logger->utils.logging.get_logger(__name__)
A:transformers.file_utils.ENV_VARS_TRUE_AND_AUTO_VALUES->ENV_VARS_TRUE_VALUES.union({'AUTO'})
A:transformers.file_utils.USE_TF->os.environ.get('USE_TF', 'AUTO').upper()
A:transformers.file_utils.USE_TORCH->os.environ.get('USE_TORCH', 'AUTO').upper()
A:transformers.file_utils.USE_JAX->os.environ.get('USE_FLAX', 'AUTO').upper()
A:transformers.file_utils.torch_cache_home->os.path.expanduser(os.getenv('TORCH_HOME', os.path.join(os.getenv('XDG_CACHE_HOME', '~/.cache'), 'torch')))
A:transformers.file_utils.old_default_cache_path->os.path.join(torch_cache_home, 'transformers')
A:transformers.file_utils.hf_cache_home->os.path.expanduser(os.getenv('HF_HOME', os.path.join(os.getenv('XDG_CACHE_HOME', '~/.cache'), 'huggingface')))
A:transformers.file_utils.default_cache_path->os.path.join(hf_cache_home, 'transformers')
A:transformers.file_utils.PYTORCH_PRETRAINED_BERT_CACHE->os.getenv('PYTORCH_PRETRAINED_BERT_CACHE', default_cache_path)
A:transformers.file_utils.PYTORCH_TRANSFORMERS_CACHE->os.getenv('PYTORCH_TRANSFORMERS_CACHE', PYTORCH_PRETRAINED_BERT_CACHE)
A:transformers.file_utils.TRANSFORMERS_CACHE->os.getenv('TRANSFORMERS_CACHE', PYTORCH_TRANSFORMERS_CACHE)
A:transformers.file_utils.class_name->':class:`~transformers.{}`'.format(fn.__qualname__.split('.')[0])
A:transformers.file_utils.intro->intro.format(full_output_type=full_output_type, config_class=config_class).format(full_output_type=full_output_type, config_class=config_class)
A:transformers.file_utils.search->re.search('^(\\s*)\\S', t)
A:transformers.file_utils.indent->_get_indent(output_args_doc)
A:transformers.file_utils.blocks[i]->re.sub(':\\s*\\n\\s*(\\S)', ' -- \\1', blocks[i])
A:transformers.file_utils.lines->'\n'.join(lines).split('\n')
A:transformers.file_utils.docstrings->'\n'.join(lines)
A:transformers.file_utils.doc_kwargs->dict(model_class=model_class, tokenizer_class=tokenizer_class, checkpoint=checkpoint)
A:transformers.file_utils.built_doc->code_sample.format(**doc_kwargs)
A:transformers.file_utils.lines[i]->_prepare_output_docstrings(output_type, config_class)
A:transformers.file_utils.parsed->urlparse(url_or_filename)
A:transformers.file_utils.endpoint->PRESET_MIRROR_DICT.get(mirror, mirror)
A:transformers.file_utils.url_bytes->url.encode('utf-8')
A:transformers.file_utils.filename->url_to_filename(url, etag)
A:transformers.file_utils.etag_bytes->etag.encode('utf-8')
A:transformers.file_utils.cache_dir->str(cache_dir)
A:transformers.file_utils.cache_path->os.path.join(cache_dir, filename)
A:transformers.file_utils.metadata->json.load(meta_file)
A:transformers.file_utils.url_or_filename->str(url_or_filename)
A:transformers.file_utils.output_path->get_from_cache(url_or_filename, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, user_agent=user_agent, use_auth_token=use_auth_token, local_files_only=local_files_only)
A:transformers.file_utils.(output_dir, output_file)->os.path.split(output_path)
A:transformers.file_utils.output_path_extracted->os.path.join(output_dir, output_extract_dir_name)
A:transformers.file_utils.tar_file->tarfile.open(output_path)
A:transformers.file_utils.ua->'transformers/{}; python/{}'.format(__version__, sys.version.split()[0])
A:transformers.file_utils.headers->copy.deepcopy(headers)
A:transformers.file_utils.r->requests.head(url, headers=headers, allow_redirects=False, proxies=proxies, timeout=etag_timeout)
A:transformers.file_utils.content_length->requests.head(url, headers=headers, allow_redirects=False, proxies=proxies, timeout=etag_timeout).headers.get('Content-Length')
A:transformers.file_utils.progress->tqdm(unit='B', unit_scale=True, total=total, initial=resume_size, desc='Downloading', disable=bool(logging.get_verbosity() == logging.NOTSET))
A:transformers.file_utils.headers['authorization']->'Bearer {}'.format(token)
A:transformers.file_utils.token->hf_api.HfFolder.get_token()
A:transformers.file_utils.temp_file_manager->partial(tempfile.NamedTemporaryFile, mode='wb', dir=cache_dir, delete=False)
A:transformers.file_utils.cached->self.fget(obj)
A:transformers.file_utils.class_fields->fields(self)
A:transformers.file_utils.first_field->getattr(self, class_fields[0].name)
A:transformers.file_utils.other_fields_are_none->all((getattr(self, field.name) is None for field in class_fields[1:]))
A:transformers.file_utils.iterator->iter(first_field)
A:transformers.file_utils.v->getattr(self, field.name)
transformers.add_end_docstrings(*docstr)
transformers.add_start_docstrings(*docstr)
transformers.add_start_docstrings_to_model_forward(*docstr)
transformers.cached_path(url_or_filename,cache_dir=None,force_download=False,proxies=None,resume_download=False,user_agent:Union[Dict,str,None]=None,extract_compressed_file=False,force_extract=False,use_auth_token:Union[bool,str,None]=None,local_files_only=False)->Optional[str]
transformers.file_utils.ModelOutput(OrderedDict)
transformers.file_utils.ModelOutput.__delitem__(self,*args,**kwargs)
transformers.file_utils.ModelOutput.__getitem__(self,k)
transformers.file_utils.ModelOutput.__post_init__(self)
transformers.file_utils.ModelOutput.__setattr__(self,name,value)
transformers.file_utils.ModelOutput.__setitem__(self,key,value)
transformers.file_utils.ModelOutput.pop(self,*args,**kwargs)
transformers.file_utils.ModelOutput.setdefault(self,*args,**kwargs)
transformers.file_utils.ModelOutput.to_tuple(self)->Tuple[Any]
transformers.file_utils.ModelOutput.update(self,*args,**kwargs)
transformers.file_utils._convert_output_args_doc(output_args_doc)
transformers.file_utils._get_indent(t)
transformers.file_utils._prepare_output_docstrings(output_type,config_class)
transformers.file_utils.add_code_sample_docstrings(*docstr,tokenizer_class=None,checkpoint=None,output_type=None,config_class=None,mask=None)
transformers.file_utils.add_end_docstrings(*docstr)
transformers.file_utils.add_start_docstrings(*docstr)
transformers.file_utils.add_start_docstrings_to_model_forward(*docstr)
transformers.file_utils.cached_path(url_or_filename,cache_dir=None,force_download=False,proxies=None,resume_download=False,user_agent:Union[Dict,str,None]=None,extract_compressed_file=False,force_extract=False,use_auth_token:Union[bool,str,None]=None,local_files_only=False)->Optional[str]
transformers.file_utils.cached_property(property)
transformers.file_utils.cached_property.__get__(self,obj,objtype=None)
transformers.file_utils.filename_to_url(filename,cache_dir=None)
transformers.file_utils.get_from_cache(url:str,cache_dir=None,force_download=False,proxies=None,etag_timeout=10,resume_download=False,user_agent:Union[Dict,str,None]=None,use_auth_token:Union[bool,str,None]=None,local_files_only=False)->Optional[str]
transformers.file_utils.hf_bucket_url(model_id:str,filename:str,subfolder:Optional[str]=None,revision:Optional[str]=None,mirror=None)->str
transformers.file_utils.http_get(url:str,temp_file:BinaryIO,proxies=None,resume_size=0,headers:Optional[Dict[str,str]]=None)
transformers.file_utils.http_user_agent(user_agent:Union[Dict,str,None]=None)->str
transformers.file_utils.is_apex_available()
transformers.file_utils.is_datasets_available()
transformers.file_utils.is_faiss_available()
transformers.file_utils.is_flax_available()
transformers.file_utils.is_in_notebook()
transformers.file_utils.is_pandas_available()
transformers.file_utils.is_protobuf_available()
transformers.file_utils.is_psutil_available()
transformers.file_utils.is_py3nvml_available()
transformers.file_utils.is_remote_url(url_or_filename)
transformers.file_utils.is_scatter_available()
transformers.file_utils.is_sentencepiece_available()
transformers.file_utils.is_sklearn_available()
transformers.file_utils.is_tensor(x)
transformers.file_utils.is_tf_available()
transformers.file_utils.is_tokenizers_available()
transformers.file_utils.is_torch_available()
transformers.file_utils.is_torch_tpu_available()
transformers.file_utils.replace_return_docstrings(output_type=None,config_class=None)
transformers.file_utils.requires_datasets(obj)
transformers.file_utils.requires_faiss(obj)
transformers.file_utils.requires_flax(obj)
transformers.file_utils.requires_pandas(obj)
transformers.file_utils.requires_protobuf(obj)
transformers.file_utils.requires_pytorch(obj)
transformers.file_utils.requires_scatter(obj)
transformers.file_utils.requires_sentencepiece(obj)
transformers.file_utils.requires_sklearn(obj)
transformers.file_utils.requires_tf(obj)
transformers.file_utils.requires_tokenizers(obj)
transformers.file_utils.tf_required(func)
transformers.file_utils.torch_only_method(fn)
transformers.file_utils.torch_required(func)
transformers.file_utils.url_to_filename(url:str,etag:Optional[str]=None)->str
transformers.is_apex_available()
transformers.is_datasets_available()
transformers.is_faiss_available()
transformers.is_flax_available()
transformers.is_psutil_available()
transformers.is_py3nvml_available()
transformers.is_sentencepiece_available()
transformers.is_sklearn_available()
transformers.is_tf_available()
transformers.is_tokenizers_available()
transformers.is_torch_available()
transformers.is_torch_tpu_available()


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/generation_tf_utils.py----------------------------------------
A:transformers.generation_tf_utils.logger->utils.logging.get_logger(__name__)
A:transformers.generation_tf_utils.use_cache->getattr(self.config, 'use_cache', False)
A:transformers.generation_tf_utils.input_ids->tensorflow.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)
A:transformers.generation_tf_utils.attention_mask->tensorflow.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)
A:transformers.generation_tf_utils.encoder->self.get_encoder()
A:transformers.generation_tf_utils.encoder_outputs->encoder(input_ids, attention_mask=attention_mask)
A:transformers.generation_tf_utils.expanded_batch_idxs->tensorflow.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))
A:transformers.generation_tf_utils.output->self._generate_no_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, pad_token_id=pad_token_id, eos_token_id=eos_token_id, batch_size=effective_batch_size, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)
A:transformers.generation_tf_utils.unfinished_sents->tensorflow.ones_like(input_ids[:, 0])
A:transformers.generation_tf_utils.model_inputs->self.prepare_inputs_for_generation(input_ids, past=past, attention_mask=attention_mask, use_cache=use_cache)
A:transformers.generation_tf_utils.outputs->self(**model_inputs)
A:transformers.generation_tf_utils.next_token_logits_penalties->_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)
A:transformers.generation_tf_utils.next_token_logits->self.adjust_logits_during_generation(next_token_logits, cur_len=cur_len, max_length=max_length)
A:transformers.generation_tf_utils.banned_tokens->calc_banned_bad_words_ids(input_ids, bad_words_ids)
A:transformers.generation_tf_utils.is_token_logit_eos_token->tensorflow.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)
A:transformers.generation_tf_utils.eos_token_indices_mask->tensorflow.broadcast_to(is_token_logit_eos_token, [num_batch_hypotheses, vocab_size])
A:transformers.generation_tf_utils.next_token->tensorflow.math.argmax(next_token_logits, axis=-1, output_type=tf.int32)
A:transformers.generation_tf_utils.is_sents_unfinished_and_token_to_add_is_eos->tensorflow.math.multiply(unfinished_sents, tf.cast(eos_in_sents, tf.int32))
A:transformers.generation_tf_utils.min_sent_length->tensorflow.math.reduce_min(sent_lengths)
A:transformers.generation_tf_utils.max_sent_length->tensorflow.math.reduce_max(sent_lengths)
A:transformers.generation_tf_utils.broad_casted_sent_lengths->tensorflow.broadcast_to(tf.expand_dims(sent_lengths, -1), [batch_size, max_sent_length])
A:transformers.generation_tf_utils.broad_casted_range->tensorflow.transpose(tf.broadcast_to(tf.expand_dims(tf.range(max_sent_length), -1), [max_sent_length, batch_size]))
A:transformers.generation_tf_utils.decoded->tensorflow.stack(best)
A:transformers.generation_tf_utils.beam_scores_begin->tensorflow.zeros((batch_size, 1), dtype=tf.float32)
A:transformers.generation_tf_utils.beam_scores->tensorflow.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)
A:transformers.generation_tf_utils.scores->set_tensor_by_indices_to_value(scores, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))
A:transformers.generation_tf_utils._scores->tensorflow.reshape(_scores, (batch_size, num_beams * vocab_size))
A:transformers.generation_tf_utils.next_tokens->tensorflow.gather(next_tokens, next_scores_indices, batch_dims=1)
A:transformers.generation_tf_utils.next_scores->tensorflow.reshape(next_scores, (batch_size, num_beams * vocab_size))
A:transformers.generation_tf_utils.next_scores_indices->tensorflow.argsort(next_scores, direction='DESCENDING', axis=1)
A:transformers.generation_tf_utils.(next_scores, next_tokens)->tensorflow.math.top_k(next_scores, k=2 * num_beams, sorted=True)
A:transformers.generation_tf_utils.beam_tokens->tensorflow.convert_to_tensor([x[1] for x in next_batch_beam], dtype=tf.int32)
A:transformers.generation_tf_utils.beam_idx->tensorflow.convert_to_tensor([x[2] for x in next_batch_beam], dtype=tf.int32)
A:transformers.generation_tf_utils.past->self._reorder_cache(past, beam_idx)
A:transformers.generation_tf_utils.final_score->beam_scores[effective_beam_id].numpy().item()
A:transformers.generation_tf_utils.sorted_hyps->sorted(hypotheses.beams, key=lambda x: x[0])
A:transformers.generation_tf_utils.sent_lengths->tensorflow.convert_to_tensor(sent_lengths_list, dtype=tf.int32)
A:transformers.generation_tf_utils.sent_max_len->min(tf.reduce_max(sent_lengths).numpy() + 1, max_length)
A:transformers.generation_tf_utils.decoded_slice->tensorflow.where(tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i], eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32), decoded_slice)
A:transformers.generation_tf_utils.token_penalties->numpy.ones(shape_list(logits))
A:transformers.generation_tf_utils.logit_penalties->numpy.zeros(logit_penalized.shape)
A:transformers.generation_tf_utils.gen_tokens->prev_input_ids[idx].numpy().tolist()
A:transformers.generation_tf_utils.prev_ngram_tuple->tuple(ngram[:-1])
A:transformers.generation_tf_utils.ngram_idx->tuple(prev_input_ids[hypo_idx, start_idx:cur_len].numpy().tolist())
A:transformers.generation_tf_utils.logits_shape->shape_list(logits)
A:transformers.generation_tf_utils.top_k->min(max(top_k, min_tokens_to_keep), logits_shape[-1])
A:transformers.generation_tf_utils.logits->set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)
A:transformers.generation_tf_utils.sorted_indices->tensorflow.argsort(logits, direction='DESCENDING')
A:transformers.generation_tf_utils.sorted_logits->tensorflow.gather(logits, sorted_indices, axis=-1, batch_dims=1)
A:transformers.generation_tf_utils.cumulative_probs->tensorflow.math.cumsum(tf.nn.softmax(sorted_logits, axis=-1), axis=-1)
A:transformers.generation_tf_utils.sorted_indices_to_remove->tensorflow.concat([tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]], -1)
A:transformers.generation_tf_utils.indices_to_remove->scatter_values_on_batch_indices(sorted_indices_to_remove, sorted_indices)
A:transformers.generation_tf_utils.shape->shape_list(batch_indices)
A:transformers.generation_tf_utils.broad_casted_batch_dims->tensorflow.reshape(tf.broadcast_to(tf.expand_dims(tf.range(shape[0]), axis=-1), shape), [1, -1])
A:transformers.generation_tf_utils.pair_indices->tensorflow.transpose(tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0))
A:transformers.generation_tf_utils.(_, indices)->tensorflow.nn.top_k(logits + z, num_samples)
A:transformers.generation_tf_utils.static->x.shape.as_list()
A:transformers.generation_tf_utils.dynamic->tensorflow.shape(x)
A:transformers.generation_tf_utils.sorted_scores->sorted([(s, idx) for (idx, (s, _)) in enumerate(self.beams)])
A:transformers.generation_tf_utils.self.worst_score->min(score, self.worst_score)
transformers.generation_tf_utils.BeamHypotheses(self,num_beams,max_length,length_penalty,early_stopping)
transformers.generation_tf_utils.BeamHypotheses.__init__(self,num_beams,max_length,length_penalty,early_stopping)
transformers.generation_tf_utils.BeamHypotheses.__len__(self)
transformers.generation_tf_utils.BeamHypotheses.add(self,hyp,sum_logprobs)
transformers.generation_tf_utils.BeamHypotheses.is_done(self,best_sum_logprobs,cur_len)
transformers.generation_tf_utils.TFGenerationMixin
transformers.generation_tf_utils.TFGenerationMixin._generate_beam_search(self,input_ids,cur_len,max_length,min_length,do_sample,early_stopping,temperature,top_k,top_p,repetition_penalty,no_repeat_ngram_size,bad_words_ids,pad_token_id,eos_token_id,batch_size,num_return_sequences,length_penalty,num_beams,vocab_size,encoder_outputs,attention_mask,use_cache)
transformers.generation_tf_utils.TFGenerationMixin._generate_no_beam_search(self,input_ids,cur_len,max_length,min_length,do_sample,temperature,top_k,top_p,repetition_penalty,no_repeat_ngram_size,bad_words_ids,pad_token_id,eos_token_id,batch_size,vocab_size,encoder_outputs,attention_mask,use_cache)
transformers.generation_tf_utils.TFGenerationMixin._reorder_cache(past,beam_idx)
transformers.generation_tf_utils.TFGenerationMixin._use_cache(self,outputs,use_cache)
transformers.generation_tf_utils.TFGenerationMixin.adjust_logits_during_generation(self,logits,**kwargs)
transformers.generation_tf_utils.TFGenerationMixin.generate(self,input_ids=None,max_length=None,min_length=None,do_sample=None,early_stopping=None,num_beams=None,temperature=None,top_k=None,top_p=None,repetition_penalty=None,bad_words_ids=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,length_penalty=None,no_repeat_ngram_size=None,num_return_sequences=None,attention_mask=None,decoder_start_token_id=None,use_cache=None)
transformers.generation_tf_utils.TFGenerationMixin.prepare_inputs_for_generation(self,inputs,**kwargs)
transformers.generation_tf_utils._create_next_token_logits_penalties(input_ids,logits,repetition_penalty)
transformers.generation_tf_utils.calc_banned_bad_words_ids(prev_input_ids,bad_words_ids)
transformers.generation_tf_utils.calc_banned_ngram_tokens(prev_input_ids,num_hypos,no_repeat_ngram_size,cur_len)
transformers.generation_tf_utils.sample_without_replacement(logits,num_samples)
transformers.generation_tf_utils.scatter_values_on_batch_indices(values,batch_indices)
transformers.generation_tf_utils.set_tensor_by_indices_to_value(tensor,indices,value)
transformers.generation_tf_utils.shape_list(x)
transformers.generation_tf_utils.tf_top_k_top_p_filtering(logits,top_k=0,top_p=1.0,filter_value=-float('Inf'),min_tokens_to_keep=1)
transformers.tf_top_k_top_p_filtering(logits,top_k=0,top_p=1.0,filter_value=-float('Inf'),min_tokens_to_keep=1)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modelcard.py----------------------------------------
A:transformers.modelcard.logger->utils.logging.get_logger(__name__)
A:transformers.modelcard.self.model_details->kwargs.pop('model_details', {})
A:transformers.modelcard.self.intended_use->kwargs.pop('intended_use', {})
A:transformers.modelcard.self.factors->kwargs.pop('factors', {})
A:transformers.modelcard.self.metrics->kwargs.pop('metrics', {})
A:transformers.modelcard.self.evaluation_data->kwargs.pop('evaluation_data', {})
A:transformers.modelcard.self.training_data->kwargs.pop('training_data', {})
A:transformers.modelcard.self.quantitative_analyses->kwargs.pop('quantitative_analyses', {})
A:transformers.modelcard.self.ethical_considerations->kwargs.pop('ethical_considerations', {})
A:transformers.modelcard.self.caveats_and_recommendations->kwargs.pop('caveats_and_recommendations', {})
A:transformers.modelcard.output_model_card_file->os.path.join(save_directory_or_file, MODEL_CARD_NAME)
A:transformers.modelcard.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.modelcard.proxies->kwargs.pop('proxies', None)
A:transformers.modelcard.find_from_standard_name->kwargs.pop('find_from_standard_name', True)
A:transformers.modelcard.return_unused_kwargs->kwargs.pop('return_unused_kwargs', False)
A:transformers.modelcard.model_card_file->model_card_file.replace(TF2_WEIGHTS_NAME, MODEL_CARD_NAME).replace(TF2_WEIGHTS_NAME, MODEL_CARD_NAME)
A:transformers.modelcard.resolved_model_card_file->cached_path(model_card_file, cache_dir=cache_dir, proxies=proxies)
A:transformers.modelcard.modelcard->cls()
A:transformers.modelcard.text->reader.read()
A:transformers.modelcard.dict_obj->json.loads(text)
A:transformers.modelcard.output->copy.deepcopy(self.__dict__)
transformers.ModelCard(self,**kwargs)
transformers.ModelCard.__eq__(self,other)
transformers.ModelCard.__repr__(self)
transformers.ModelCard.from_dict(cls,json_object)
transformers.ModelCard.from_json_file(cls,json_file)
transformers.ModelCard.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.ModelCard.save_pretrained(self,save_directory_or_file)
transformers.ModelCard.to_dict(self)
transformers.ModelCard.to_json_file(self,json_file_path)
transformers.ModelCard.to_json_string(self)
transformers.modelcard.ModelCard(self,**kwargs)
transformers.modelcard.ModelCard.__eq__(self,other)
transformers.modelcard.ModelCard.__init__(self,**kwargs)
transformers.modelcard.ModelCard.__repr__(self)
transformers.modelcard.ModelCard.from_dict(cls,json_object)
transformers.modelcard.ModelCard.from_json_file(cls,json_file)
transformers.modelcard.ModelCard.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.modelcard.ModelCard.save_pretrained(self,save_directory_or_file)
transformers.modelcard.ModelCard.to_dict(self)
transformers.modelcard.ModelCard.to_json_file(self,json_file_path)
transformers.modelcard.ModelCard.to_json_string(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/dependency_versions_check.py----------------------------------------
A:transformers.dependency_versions_check.pkgs_to_check_at_runtime->'python tqdm regex sacremoses requests packaging filelock numpy tokenizers'.split()


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/training_args.py----------------------------------------
A:transformers.training_args.logger->utils.logging.get_logger(__name__)
A:transformers.training_args.current_time->datetime.datetime.now().strftime('%b%d_%H-%M-%S')
A:transformers.training_args.self.evaluation_strategy->EvaluationStrategy(self.evaluation_strategy)
A:transformers.training_args.device->torch.device('cuda', self.local_rank)
A:transformers.training_args.n_gpu->torch.cuda.device_count()
A:transformers.training_args.d->self.to_dict()
transformers.TrainingArguments
transformers.TrainingArguments.__post_init__(self)
transformers.TrainingArguments._setup_devices(self)->Tuple['torch.device', int]
transformers.TrainingArguments.device(self)->'torch.device'
transformers.TrainingArguments.eval_batch_size(self)->int
transformers.TrainingArguments.n_gpu(self)
transformers.TrainingArguments.parallel_mode(self)
transformers.TrainingArguments.to_dict(self)
transformers.TrainingArguments.to_json_string(self)
transformers.TrainingArguments.to_sanitized_dict(self)->Dict[str, Any]
transformers.TrainingArguments.train_batch_size(self)->int
transformers.training_args.ParallelMode(Enum)
transformers.training_args.TrainingArguments
transformers.training_args.TrainingArguments.__post_init__(self)
transformers.training_args.TrainingArguments._setup_devices(self)->Tuple['torch.device', int]
transformers.training_args.TrainingArguments.device(self)->'torch.device'
transformers.training_args.TrainingArguments.eval_batch_size(self)->int
transformers.training_args.TrainingArguments.n_gpu(self)
transformers.training_args.TrainingArguments.parallel_mode(self)
transformers.training_args.TrainingArguments.to_dict(self)
transformers.training_args.TrainingArguments.to_json_string(self)
transformers.training_args.TrainingArguments.to_sanitized_dict(self)->Dict[str, Any]
transformers.training_args.TrainingArguments.train_batch_size(self)->int
transformers.training_args.default_logdir()->str


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/activations.py----------------------------------------
A:transformers.activations.logger->utils.logging.get_logger(__name__)
transformers.activations._gelu_python(x)
transformers.activations._silu_python(x)
transformers.activations.gelu_fast(x)
transformers.activations.gelu_new(x)
transformers.activations.get_activation(activation_string)
transformers.activations.linear_act(x)
transformers.activations.mish(x)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_utils.py----------------------------------------
A:transformers.modeling_utils.logger->utils.logging.get_logger(__name__)
A:transformers.modeling_utils.mask->mask.view(-1).contiguous().eq(1).view(-1).contiguous().eq(1)
A:transformers.modeling_utils.process->psutil.Process(os.getpid())
A:transformers.modeling_utils.mem->psutil.Process(os.getpid()).memory_info()
A:transformers.modeling_utils.gen->getattr(self, self.base_model_prefix)._named_members(get_members_fn=find_tensor_attributes)
A:transformers.modeling_utils.first_tuple->next(gen)
A:transformers.modeling_utils.encoder_extended_attention_mask->encoder_extended_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.modeling_utils.seq_ids->torch.arange(seq_length, device=device)
A:transformers.modeling_utils.causal_mask->torch.cat([torch.ones((batch_size, seq_length, prefix_seq_len), device=device, dtype=causal_mask.dtype), causal_mask], axis=-1)
A:transformers.modeling_utils.extended_attention_mask->extended_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.modeling_utils.head_mask->head_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.modeling_utils.base_model->getattr(self, self.base_model_prefix, self)
A:transformers.modeling_utils.output_embeddings->getattr(self, self.base_model_prefix).get_output_embeddings()
A:transformers.modeling_utils.self->getattr(self, self.base_model_prefix)
A:transformers.modeling_utils.all_encoder_weights->set([module_name + '/' + sub_name for sub_name in encoder_modules.keys()])
A:transformers.modeling_utils.encoder_name->str(int(name) + encoder_layer_pos)
A:transformers.modeling_utils.output_embeddings.weight->torch.nn.Parameter(input_embeddings.weight.clone())
A:transformers.modeling_utils.output_embeddings.bias.data->torch.nn.functional.pad(output_embeddings.bias.data, (0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0]), 'constant', 0)
A:transformers.modeling_utils.model_embeds->getattr(self, self.base_model_prefix)._resize_token_embeddings(new_num_tokens)
A:transformers.modeling_utils.old_embeddings->getattr(self, self.base_model_prefix).get_input_embeddings()
A:transformers.modeling_utils.new_embeddings->torch.nn.Embedding(new_num_tokens, old_embedding_dim).to(self.device)
A:transformers.modeling_utils.old_lm_head->getattr(self, self.base_model_prefix).get_output_embeddings()
A:transformers.modeling_utils.new_lm_head->torch.nn.Linear(*new_lm_head_shape, bias=has_new_lm_head_bias).to(self.device)
A:transformers.modeling_utils.(old_num_tokens, old_embedding_dim)->getattr(self, self.base_model_prefix).get_input_embeddings().weight.size()
A:transformers.modeling_utils.num_tokens_to_copy->min(old_num_tokens, new_num_tokens)
A:transformers.modeling_utils.self.config.pruned_heads[layer]->list(union_heads)
A:transformers.modeling_utils.state_dict->state_dict.copy().copy()
A:transformers.modeling_utils.output_model_file->os.path.join(save_directory, WEIGHTS_NAME)
A:transformers.modeling_utils.config->kwargs.pop('config', None)
A:transformers.modeling_utils.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.modeling_utils.from_tf->kwargs.pop('from_tf', False)
A:transformers.modeling_utils.force_download->kwargs.pop('force_download', False)
A:transformers.modeling_utils.resume_download->kwargs.pop('resume_download', False)
A:transformers.modeling_utils.proxies->kwargs.pop('proxies', None)
A:transformers.modeling_utils.output_loading_info->kwargs.pop('output_loading_info', False)
A:transformers.modeling_utils.local_files_only->kwargs.pop('local_files_only', False)
A:transformers.modeling_utils.use_auth_token->kwargs.pop('use_auth_token', None)
A:transformers.modeling_utils.revision->kwargs.pop('revision', None)
A:transformers.modeling_utils.mirror->kwargs.pop('mirror', None)
A:transformers.modeling_utils.(config, model_kwargs)->cls.config_class.from_pretrained(config_path, *model_args, cache_dir=cache_dir, return_unused_kwargs=True, force_download=force_download, resume_download=resume_download, proxies=proxies, local_files_only=local_files_only, use_auth_token=use_auth_token, revision=revision, **kwargs)
A:transformers.modeling_utils.pretrained_model_name_or_path->str(pretrained_model_name_or_path)
A:transformers.modeling_utils.archive_file->hf_bucket_url(pretrained_model_name_or_path, filename=TF2_WEIGHTS_NAME if from_tf else WEIGHTS_NAME, revision=revision, mirror=mirror)
A:transformers.modeling_utils.resolved_archive_file->cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)
A:transformers.modeling_utils.model->torch_xla.core.xla_model.send_cpu_data_to_device(model, xm.xla_device())
A:transformers.modeling_utils.new_key->key.replace('beta', 'bias')
A:transformers.modeling_utils.state_dict[new_key]->state_dict.copy().copy().pop(old_key)
A:transformers.modeling_utils.metadata->getattr(state_dict, '_metadata', None)
A:transformers.modeling_utils.has_prefix_module->any((s.startswith(cls.base_model_prefix) for s in state_dict.keys()))
A:transformers.modeling_utils.model_to_load->getattr(model, cls.base_model_prefix)
A:transformers.modeling_utils.base_model_state_dict->getattr(model, cls.base_model_prefix).state_dict().keys()
A:transformers.modeling_utils.w->torch.empty(nx, nf)
A:transformers.modeling_utils.self.weight->torch.nn.Parameter(w)
A:transformers.modeling_utils.self.bias->torch.nn.Parameter(torch.zeros(nf))
A:transformers.modeling_utils.x->getattr(self, self.base_model_prefix).dense_1(x).squeeze(-1)
A:transformers.modeling_utils.self.dense->torch.nn.Linear(config.hidden_size, 1)
A:transformers.modeling_utils.self.dense_0->torch.nn.Linear(config.hidden_size * 2, config.hidden_size)
A:transformers.modeling_utils.self.activation->torch.nn.Tanh()
A:transformers.modeling_utils.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.modeling_utils.self.dense_1->torch.nn.Linear(config.hidden_size, 1, bias=False)
A:transformers.modeling_utils.start_positions->start_positions[:, None, None].expand(-1, -1, hsz)
A:transformers.modeling_utils.start_states->torch.einsum('blh,bl->bh', hidden_states, start_log_probs)
A:transformers.modeling_utils.cls_index->cls_index.expand((-1,) * (cls_index.dim() - 1) + (hidden_states.size(-1),)).expand((-1,) * (cls_index.dim() - 1) + (hidden_states.size(-1),))
A:transformers.modeling_utils.cls_token_state->hidden_states.gather(-2, cls_index).squeeze(-2)
A:transformers.modeling_utils.self.start_logits->PoolerStartLogits(config)
A:transformers.modeling_utils.self.end_logits->PoolerEndLogits(config)
A:transformers.modeling_utils.self.answer_class->PoolerAnswerClass(config)
A:transformers.modeling_utils.start_logits->getattr(self, self.base_model_prefix).start_logits(hidden_states, p_mask=p_mask)
A:transformers.modeling_utils.end_logits->getattr(self, self.base_model_prefix).end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)
A:transformers.modeling_utils.loss_fct->CrossEntropyLoss()
A:transformers.modeling_utils.start_loss->loss_fct(start_logits, start_positions)
A:transformers.modeling_utils.end_loss->loss_fct(end_logits, end_positions)
A:transformers.modeling_utils.cls_logits->getattr(self, self.base_model_prefix).answer_class(hidden_states, start_states=start_states, cls_index=cls_index)
A:transformers.modeling_utils.loss_fct_cls->torch.nn.BCEWithLogitsLoss()
A:transformers.modeling_utils.cls_loss->loss_fct_cls(cls_logits, is_impossible)
A:transformers.modeling_utils.(bsz, slen, hsz)->hidden_states.size()
A:transformers.modeling_utils.start_log_probs->torch.nn.functional.softmax(start_logits, dim=-1)
A:transformers.modeling_utils.(start_top_log_probs, start_top_index)->torch.topk(start_log_probs, self.start_n_top, dim=-1)
A:transformers.modeling_utils.start_top_index_exp->start_top_index.unsqueeze(-1).expand(-1, -1, hsz)
A:transformers.modeling_utils.hidden_states_expanded->hidden_states.unsqueeze(2).expand_as(start_states)
A:transformers.modeling_utils.end_log_probs->torch.nn.functional.softmax(end_logits, dim=1)
A:transformers.modeling_utils.(end_top_log_probs, end_top_index)->torch.topk(end_log_probs, self.end_n_top, dim=1)
A:transformers.modeling_utils.end_top_log_probs->end_top_log_probs.view(-1, self.start_n_top * self.end_n_top).view(-1, self.start_n_top * self.end_n_top)
A:transformers.modeling_utils.end_top_index->end_top_index.view(-1, self.start_n_top * self.end_n_top).view(-1, self.start_n_top * self.end_n_top)
A:transformers.modeling_utils.self.summary_type->getattr(config, 'summary_type', 'last')
A:transformers.modeling_utils.self.summary->torch.nn.Linear(config.hidden_size, num_classes)
A:transformers.modeling_utils.activation_string->getattr(config, 'summary_activation', None)
A:transformers.modeling_utils.self.first_dropout->torch.nn.Dropout(config.summary_first_dropout)
A:transformers.modeling_utils.self.last_dropout->torch.nn.Dropout(config.summary_last_dropout)
A:transformers.modeling_utils.output->getattr(self, self.base_model_prefix).last_dropout(output)
A:transformers.modeling_utils.index->index.to(layer.weight.device).to(layer.weight.device)
A:transformers.modeling_utils.W->layer.weight.index_select(dim, index).clone().detach()
A:transformers.modeling_utils.b->layer.bias[index].clone().detach()
A:transformers.modeling_utils.new_size->list(layer.weight.size())
A:transformers.modeling_utils.new_size[dim]->len(index)
A:transformers.modeling_utils.new_layer->Conv1D(new_size[1], new_size[0]).to(layer.weight.device)
A:transformers.modeling_utils.num_args_in_forward_chunk_fn->len(inspect.signature(forward_fn).parameters)
A:transformers.modeling_utils.input_tensors_chunks->tuple((input_tensor.chunk(num_chunks, dim=chunk_dim) for input_tensor in input_tensors))
A:transformers.modeling_utils.output_chunks->tuple((forward_fn(*input_tensors_chunk) for input_tensors_chunk in zip(*input_tensors_chunks)))
transformers.Conv1D(self,nf,nx)
transformers.Conv1D.forward(self,x)
transformers.PreTrainedModel(self,config:PretrainedConfig,*inputs,**kwargs)
transformers.PreTrainedModel._get_resized_embeddings(self,old_embeddings:torch.nn.Embedding,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.PreTrainedModel._get_resized_lm_head(self,old_lm_head:torch.nn.Linear,new_num_tokens:Optional[int]=None,transposed:Optional[bool]=False)->torch.nn.Linear
transformers.PreTrainedModel._resize_token_embeddings(self,new_num_tokens)
transformers.PreTrainedModel._tie_encoder_decoder_weights(encoder:nn.Module,decoder:nn.Module,base_model_prefix:str)
transformers.PreTrainedModel._tie_or_clone_weights(self,output_embeddings,input_embeddings)
transformers.PreTrainedModel.base_model(self)->nn.Module
transformers.PreTrainedModel.dummy_inputs(self)->Dict[str, torch.Tensor]
transformers.PreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path:Optional[Union[str,os.PathLike]],*model_args,**kwargs)
transformers.PreTrainedModel.get_input_embeddings(self)->nn.Module
transformers.PreTrainedModel.get_output_embeddings(self)->nn.Module
transformers.PreTrainedModel.init_weights(self)
transformers.PreTrainedModel.prune_heads(self,heads_to_prune:Dict[int,List[int]])
transformers.PreTrainedModel.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.PreTrainedModel.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.PreTrainedModel.set_input_embeddings(self,value:nn.Module)
transformers.PreTrainedModel.tie_weights(self)
transformers.apply_chunking_to_forward(forward_fn:Callable[...,torch.Tensor],chunk_size:int,chunk_dim:int,*input_tensors)->torch.Tensor
transformers.modeling_utils.Conv1D(self,nf,nx)
transformers.modeling_utils.Conv1D.__init__(self,nf,nx)
transformers.modeling_utils.Conv1D.forward(self,x)
transformers.modeling_utils.ModuleUtilsMixin
transformers.modeling_utils.ModuleUtilsMixin._convert_head_mask_to_5d(self,head_mask,num_hidden_layers)
transformers.modeling_utils.ModuleUtilsMixin._hook_rss_memory_post_forward(module,*args,**kwargs)
transformers.modeling_utils.ModuleUtilsMixin._hook_rss_memory_pre_forward(module,*args,**kwargs)
transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks(self)
transformers.modeling_utils.ModuleUtilsMixin.device(self)->device
transformers.modeling_utils.ModuleUtilsMixin.dtype(self)->dtype
transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens(self,input_dict:Dict[str,Union[torch.Tensor,Any]])->int
transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops(self,input_dict:Dict[str,Union[torch.Tensor,Any]],exclude_embeddings:bool=True)->int
transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask(self,attention_mask:Tensor,input_shape:Tuple[int],device:device)->Tensor
transformers.modeling_utils.ModuleUtilsMixin.get_head_mask(self,head_mask:Optional[Tensor],num_hidden_layers:int,is_attention_chunked:bool=False)->Tensor
transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask(self,encoder_attention_mask:Tensor)->Tensor
transformers.modeling_utils.ModuleUtilsMixin.num_parameters(self,only_trainable:bool=False,exclude_embeddings:bool=False)->int
transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state(self)
transformers.modeling_utils.PoolerAnswerClass(self,config)
transformers.modeling_utils.PoolerAnswerClass.__init__(self,config)
transformers.modeling_utils.PoolerAnswerClass.forward(self,hidden_states:torch.FloatTensor,start_states:Optional[torch.FloatTensor]=None,start_positions:Optional[torch.LongTensor]=None,cls_index:Optional[torch.LongTensor]=None)->torch.FloatTensor
transformers.modeling_utils.PoolerEndLogits(self,config:PretrainedConfig)
transformers.modeling_utils.PoolerEndLogits.__init__(self,config:PretrainedConfig)
transformers.modeling_utils.PoolerEndLogits.forward(self,hidden_states:torch.FloatTensor,start_states:Optional[torch.FloatTensor]=None,start_positions:Optional[torch.LongTensor]=None,p_mask:Optional[torch.FloatTensor]=None)->torch.FloatTensor
transformers.modeling_utils.PoolerStartLogits(self,config:PretrainedConfig)
transformers.modeling_utils.PoolerStartLogits.__init__(self,config:PretrainedConfig)
transformers.modeling_utils.PoolerStartLogits.forward(self,hidden_states:torch.FloatTensor,p_mask:Optional[torch.FloatTensor]=None)->torch.FloatTensor
transformers.modeling_utils.PreTrainedModel(self,config:PretrainedConfig,*inputs,**kwargs)
transformers.modeling_utils.PreTrainedModel.__init__(self,config:PretrainedConfig,*inputs,**kwargs)
transformers.modeling_utils.PreTrainedModel._get_resized_embeddings(self,old_embeddings:torch.nn.Embedding,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.modeling_utils.PreTrainedModel._get_resized_lm_head(self,old_lm_head:torch.nn.Linear,new_num_tokens:Optional[int]=None,transposed:Optional[bool]=False)->torch.nn.Linear
transformers.modeling_utils.PreTrainedModel._resize_token_embeddings(self,new_num_tokens)
transformers.modeling_utils.PreTrainedModel._tie_encoder_decoder_weights(encoder:nn.Module,decoder:nn.Module,base_model_prefix:str)
transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights(self,output_embeddings,input_embeddings)
transformers.modeling_utils.PreTrainedModel.base_model(self)->nn.Module
transformers.modeling_utils.PreTrainedModel.dummy_inputs(self)->Dict[str, torch.Tensor]
transformers.modeling_utils.PreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path:Optional[Union[str,os.PathLike]],*model_args,**kwargs)
transformers.modeling_utils.PreTrainedModel.get_input_embeddings(self)->nn.Module
transformers.modeling_utils.PreTrainedModel.get_output_embeddings(self)->nn.Module
transformers.modeling_utils.PreTrainedModel.init_weights(self)
transformers.modeling_utils.PreTrainedModel.prune_heads(self,heads_to_prune:Dict[int,List[int]])
transformers.modeling_utils.PreTrainedModel.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.modeling_utils.PreTrainedModel.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.modeling_utils.PreTrainedModel.set_input_embeddings(self,value:nn.Module)
transformers.modeling_utils.PreTrainedModel.tie_weights(self)
transformers.modeling_utils.SQuADHead(self,config)
transformers.modeling_utils.SQuADHead.__init__(self,config)
transformers.modeling_utils.SQuADHead.forward(self,hidden_states:torch.FloatTensor,start_positions:Optional[torch.LongTensor]=None,end_positions:Optional[torch.LongTensor]=None,cls_index:Optional[torch.LongTensor]=None,is_impossible:Optional[torch.LongTensor]=None,p_mask:Optional[torch.FloatTensor]=None,return_dict:bool=False)->Union[SquadHeadOutput, Tuple[torch.FloatTensor]]
transformers.modeling_utils.SequenceSummary(self,config:PretrainedConfig)
transformers.modeling_utils.SequenceSummary.__init__(self,config:PretrainedConfig)
transformers.modeling_utils.SequenceSummary.forward(self,hidden_states:torch.FloatTensor,cls_index:Optional[torch.LongTensor]=None)->torch.FloatTensor
transformers.modeling_utils.SquadHeadOutput(ModelOutput)
transformers.modeling_utils.apply_chunking_to_forward(forward_fn:Callable[...,torch.Tensor],chunk_size:int,chunk_dim:int,*input_tensors)->torch.Tensor
transformers.modeling_utils.find_pruneable_heads_and_indices(heads:List[int],n_heads:int,head_size:int,already_pruned_heads:Set[int])->Tuple[Set[int], torch.LongTensor]
transformers.modeling_utils.prune_conv1d_layer(layer:Conv1D,index:torch.LongTensor,dim:int=1)->Conv1D
transformers.modeling_utils.prune_layer(layer:Union[torch.nn.Linear,Conv1D],index:torch.LongTensor,dim:Optional[int]=None)->Union[torch.nn.Linear, Conv1D]
transformers.modeling_utils.prune_linear_layer(layer:torch.nn.Linear,index:torch.LongTensor,dim:int=0)->torch.nn.Linear
transformers.prune_layer(layer:Union[torch.nn.Linear,Conv1D],index:torch.LongTensor,dim:Optional[int]=None)->Union[torch.nn.Linear, Conv1D]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/trainer_callback.py----------------------------------------
A:transformers.trainer_callback.logger->utils.logging.get_logger(__name__)
A:transformers.trainer_callback.text->f.read()
A:transformers.trainer_callback.result->getattr(callback, event)(args, state, control, model=self.model, optimizer=self.optimizer, lr_scheduler=self.lr_scheduler, train_dataloader=self.train_dataloader, eval_dataloader=self.eval_dataloader, **kwargs)
A:transformers.trainer_callback.self.training_bar->tqdm(total=state.max_steps)
A:transformers.trainer_callback.self.prediction_bar->tqdm(total=len(eval_dataloader), leave=self.training_bar is None)
A:transformers.trainer_callback._->logs.pop('total_flos', None)
A:transformers.trainer_callback.metric_value->metrics.get(metric_to_check)
transformers.DefaultFlowCallback(TrainerCallback)
transformers.DefaultFlowCallback.on_epoch_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.DefaultFlowCallback.on_step_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.EarlyStoppingCallback(self,early_stopping_patience:int=1,early_stopping_threshold:Optional[float]=0.0)
transformers.EarlyStoppingCallback.check_metric_value(self,args,state,control,metric_value)
transformers.EarlyStoppingCallback.on_evaluate(self,args,state,control,metrics,**kwargs)
transformers.EarlyStoppingCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.PrinterCallback(TrainerCallback)
transformers.PrinterCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.ProgressCallback(self)
transformers.ProgressCallback.on_evaluate(self,args,state,control,**kwargs)
transformers.ProgressCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.ProgressCallback.on_prediction_step(self,args,state,control,eval_dataloader=None,**kwargs)
transformers.ProgressCallback.on_step_end(self,args,state,control,**kwargs)
transformers.ProgressCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.ProgressCallback.on_train_end(self,args,state,control,**kwargs)
transformers.TrainerCallback
transformers.TrainerCallback.on_epoch_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_epoch_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_evaluate(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_init_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_log(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_prediction_step(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_save(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_step_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_step_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_train_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerCallback.on_train_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.TrainerControl
transformers.TrainerControl._new_epoch(self)
transformers.TrainerControl._new_step(self)
transformers.TrainerControl._new_training(self)
transformers.TrainerState
transformers.TrainerState.__post_init__(self)
transformers.TrainerState.load_from_json(cls,json_path:str)
transformers.TrainerState.save_to_json(self,json_path:str)
transformers.trainer_callback.CallbackHandler(self,callbacks,model,optimizer,lr_scheduler)
transformers.trainer_callback.CallbackHandler.__init__(self,callbacks,model,optimizer,lr_scheduler)
transformers.trainer_callback.CallbackHandler.add_callback(self,callback)
transformers.trainer_callback.CallbackHandler.call_event(self,event,args,state,control,**kwargs)
transformers.trainer_callback.CallbackHandler.callback_list(self)
transformers.trainer_callback.CallbackHandler.on_epoch_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_epoch_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_evaluate(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,metrics)
transformers.trainer_callback.CallbackHandler.on_init_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_log(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,logs)
transformers.trainer_callback.CallbackHandler.on_prediction_step(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_save(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_step_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_step_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_train_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.on_train_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl)
transformers.trainer_callback.CallbackHandler.pop_callback(self,callback)
transformers.trainer_callback.CallbackHandler.remove_callback(self,callback)
transformers.trainer_callback.DefaultFlowCallback(TrainerCallback)
transformers.trainer_callback.DefaultFlowCallback.on_epoch_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.DefaultFlowCallback.on_step_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.EarlyStoppingCallback(self,early_stopping_patience:int=1,early_stopping_threshold:Optional[float]=0.0)
transformers.trainer_callback.EarlyStoppingCallback.__init__(self,early_stopping_patience:int=1,early_stopping_threshold:Optional[float]=0.0)
transformers.trainer_callback.EarlyStoppingCallback.check_metric_value(self,args,state,control,metric_value)
transformers.trainer_callback.EarlyStoppingCallback.on_evaluate(self,args,state,control,metrics,**kwargs)
transformers.trainer_callback.EarlyStoppingCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.trainer_callback.PrinterCallback(TrainerCallback)
transformers.trainer_callback.PrinterCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.trainer_callback.ProgressCallback(self)
transformers.trainer_callback.ProgressCallback.__init__(self)
transformers.trainer_callback.ProgressCallback.on_evaluate(self,args,state,control,**kwargs)
transformers.trainer_callback.ProgressCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.trainer_callback.ProgressCallback.on_prediction_step(self,args,state,control,eval_dataloader=None,**kwargs)
transformers.trainer_callback.ProgressCallback.on_step_end(self,args,state,control,**kwargs)
transformers.trainer_callback.ProgressCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.trainer_callback.ProgressCallback.on_train_end(self,args,state,control,**kwargs)
transformers.trainer_callback.TrainerCallback
transformers.trainer_callback.TrainerCallback.on_epoch_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_epoch_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_evaluate(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_init_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_log(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_prediction_step(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_save(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_step_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_step_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_train_begin(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerCallback.on_train_end(self,args:TrainingArguments,state:TrainerState,control:TrainerControl,**kwargs)
transformers.trainer_callback.TrainerControl
transformers.trainer_callback.TrainerControl._new_epoch(self)
transformers.trainer_callback.TrainerControl._new_step(self)
transformers.trainer_callback.TrainerControl._new_training(self)
transformers.trainer_callback.TrainerState
transformers.trainer_callback.TrainerState.__post_init__(self)
transformers.trainer_callback.TrainerState.load_from_json(cls,json_path:str)
transformers.trainer_callback.TrainerState.save_to_json(self,json_path:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/trainer.py----------------------------------------
A:transformers.trainer.logger->utils.logging.get_logger(__name__)
A:transformers.trainer.args->TrainingArguments('tmp_trainer')
A:transformers.trainer.model->self._actual_model(self.model)
A:transformers.trainer.self.callback_handler->CallbackHandler(callbacks, self.model, self.optimizer, self.lr_scheduler)
A:transformers.trainer.self.state->trainer_callback.TrainerState.load_from_json(os.path.join(model_path, 'trainer_state.json'))
A:transformers.trainer.self.control->self.callback_handler.on_prediction_step(self.args, self.state, self.control)
A:transformers.trainer.signature->inspect.signature(self.model.forward)
A:transformers.trainer.signature_columns->list(signature.parameters.keys())
A:transformers.trainer.ignored_columns->list(set(dataset.column_names) - set(signature_columns))
A:transformers.trainer.train_sampler->self._get_train_sampler()
A:transformers.trainer.eval_sampler->self._get_eval_sampler(eval_dataset)
A:transformers.trainer.test_sampler->self._get_eval_sampler(test_dataset)
A:transformers.trainer.self.optimizer->AdamW(optimizer_grouped_parameters, lr=self.args.learning_rate, betas=(self.args.adam_beta1, self.args.adam_beta2), eps=self.args.adam_epsilon)
A:transformers.trainer.self.lr_scheduler->get_linear_schedule_with_warmup(self.optimizer, num_warmup_steps=self.args.warmup_steps, num_training_steps=num_training_steps)
A:transformers.trainer.old_attr->getattr(self.args, key, None)
A:transformers.trainer.value->type(old_attr)(value)
A:transformers.trainer.self.objective->self.compute_objective(metrics.copy())
A:transformers.trainer.output_dir->os.path.join(self.args.output_dir, checkpoint_folder)
A:transformers.trainer.model_init_argcount->len(inspect.signature(self.model_init).parameters)
A:transformers.trainer.self.model->self.model.to(self.args.device)
A:transformers.trainer.train_dataset_is_sized->isinstance(self.train_dataset, collections.abc.Sized)
A:transformers.trainer.train_dataloader->self.get_train_dataloader()
A:transformers.trainer.num_update_steps_per_epoch->max(num_update_steps_per_epoch, 1)
A:transformers.trainer.max_steps->math.ceil(self.args.num_train_epochs * num_update_steps_per_epoch)
A:transformers.trainer.num_train_epochs->math.ceil(self.args.num_train_epochs)
A:transformers.trainer.(model, self.optimizer)->apex.amp.initialize(model, self.optimizer, opt_level=self.args.fp16_opt_level)
A:transformers.trainer.self.state.is_local_process_zero->self.is_local_process_zero()
A:transformers.trainer.self.state.is_world_process_zero->self.is_world_process_zero()
A:transformers.trainer.tr_loss->torch.tensor(0.0).to(self.args.device)
A:transformers.trainer.parallel_loader->torch_xla.distributed.parallel_loader.ParallelLoader(train_dataloader, [self.args.device]).per_device_loader(self.args.device)
A:transformers.trainer.state_dict->self.model.state_dict()
A:transformers.trainer.tr_loss_scalar->torch.tensor(0.0).to(self.args.device).item()
A:transformers.trainer.metrics->self.compute_metrics(EvalPrediction(predictions=preds, label_ids=label_ids))
A:transformers.trainer.optimizer_state->torch.load(os.path.join(model_path, 'optimizer.pt'), map_location='cpu')
A:transformers.trainer.lr_scheduler_state->torch.load(os.path.join(model_path, 'scheduler.pt'), map_location='cpu')
A:transformers.trainer.backend->HPSearchBackend(backend)
A:transformers.trainer.best_run->run_hp_search(self, n_trials, direction, **kwargs)
A:transformers.trainer.inputs[k]->v.to(self.args.device)
A:transformers.trainer.inputs->self._prepare_inputs(inputs)
A:transformers.trainer.loss->outputs[0].mean().detach()
A:transformers.trainer.outputs->model(**inputs)
A:transformers.trainer.self.state.total_flos->distributed_broadcast_scalars([self._total_flos]).sum().item()
A:transformers.trainer.regex_match->re.match(f'.*{checkpoint_prefix}-([0-9]+)', path)
A:transformers.trainer.checkpoints_sorted->self._sorted_checkpoints(use_mtime=use_mtime)
A:transformers.trainer.best_model_index->self._sorted_checkpoints(use_mtime=use_mtime).index(str(Path(self.state.best_model_checkpoint)))
A:transformers.trainer.number_of_checkpoints_to_delete->max(0, len(checkpoints_sorted) - self.args.save_total_limit)
A:transformers.trainer.eval_dataloader->self.get_eval_dataloader(eval_dataset)
A:transformers.trainer.output->self.prediction_loop(eval_dataloader, description='Evaluation', prediction_loss_only=True if self.compute_metrics is None else None, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)
A:transformers.trainer.test_dataloader->self.get_test_dataloader(test_dataset)
A:transformers.trainer.num_examples->self.num_examples(dataloader)
A:transformers.trainer.world_size->max(1, world_size)
A:transformers.trainer.eval_losses_gatherer->DistributedTensorGatherer(world_size, num_examples, make_multiple_of=batch_size)
A:transformers.trainer.preds_gatherer->DistributedTensorGatherer(world_size, num_examples)
A:transformers.trainer.labels_gatherer->DistributedTensorGatherer(world_size, num_examples)
A:transformers.trainer.dataloader->torch_xla.distributed.parallel_loader.ParallelLoader(dataloader, [self.args.device]).per_device_loader(self.args.device)
A:transformers.trainer.(loss, logits, labels)->self.prediction_step(model, inputs, prediction_loss_only, ignore_keys=ignore_keys)
A:transformers.trainer.losses->outputs[0].mean().detach().repeat(batch_size)
A:transformers.trainer.eval_loss->DistributedTensorGatherer(world_size, num_examples, make_multiple_of=batch_size).finalize()
A:transformers.trainer.metrics[f'{metric_key_prefix}_loss']->DistributedTensorGatherer(world_size, num_examples, make_multiple_of=batch_size).finalize().mean().item()
A:transformers.trainer.metrics[f'{metric_key_prefix}_{key}']->self.compute_metrics(EvalPrediction(predictions=preds, label_ids=label_ids)).pop(key)
A:transformers.trainer.tensors->distributed_concat(tensors)
A:transformers.trainer.has_labels->all((inputs.get(k) is not None for k in self.label_names))
A:transformers.trainer.ignore_keys->getattr(self.model.config, 'keys_to_ignore_at_inference', [])
A:transformers.trainer.logits->nested_detach(logits)
A:transformers.trainer.labels->nested_detach(tuple((inputs.get(name) for name in self.label_names)))
transformers.Trainer(self,model:Union[PreTrainedModel,torch.nn.Module]=None,args:TrainingArguments=None,data_collator:Optional[DataCollator]=None,train_dataset:Optional[Dataset]=None,eval_dataset:Optional[Dataset]=None,tokenizer:Optional['PreTrainedTokenizerBase']=None,model_init:Callable[[],PreTrainedModel]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,callbacks:Optional[List[TrainerCallback]]=None,optimizers:Tuple[torch.optim.Optimizer,torch.optim.lr_scheduler.LambdaLR]=(None,None))
transformers.Trainer._actual_model(model:Union[torch.nn.DataParallel,torch.nn.parallel.DistributedDataParallel,torch.nn.modules.Module])->torch.nn.modules.Module
transformers.Trainer._gather_and_numpify(self,tensors,name)
transformers.Trainer._get_eval_sampler(self,eval_dataset:Dataset)->Optional[torch.utils.data.sampler.Sampler]
transformers.Trainer._get_train_sampler(self)->Optional[torch.utils.data.sampler.Sampler]
transformers.Trainer._hp_search_setup(self,trial:Union['optuna.Trial',Dict[str,Any]])
transformers.Trainer._load_optimizer_and_scheduler(self,model_path)
transformers.Trainer._maybe_log_save_evaluate(self,tr_loss,model,trial,epoch)
transformers.Trainer._prepare_inputs(self,inputs:Dict[str,Union[torch.Tensor,Any]])->Dict[str, Union[torch.Tensor, Any]]
transformers.Trainer._remove_unused_columns(self,dataset:'datasets.Dataset',description:Optional[str]=None)
transformers.Trainer._report_to_hp_search(self,trial:Union['optuna.Trial',Dict[str,Any]],epoch:int,metrics:Dict[str,float])
transformers.Trainer._rotate_checkpoints(self,use_mtime=False)->None
transformers.Trainer._save(self,output_dir:Optional[str]=None)
transformers.Trainer._save_checkpoint(self,model,trial,metrics=None)
transformers.Trainer._save_tpu(self,output_dir:Optional[str]=None)
transformers.Trainer._sorted_checkpoints(self,checkpoint_prefix=PREFIX_CHECKPOINT_DIR,use_mtime=False)->List[str]
transformers.Trainer._tune_save_checkpoint(self)
transformers.Trainer.add_callback(self,callback)
transformers.Trainer.call_model_init(self,trial=None)
transformers.Trainer.compute_loss(self,model,inputs)
transformers.Trainer.create_optimizer_and_scheduler(self,num_training_steps:int)
transformers.Trainer.evaluate(self,eval_dataset:Optional[Dataset]=None,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->Dict[str, float]
transformers.Trainer.floating_point_ops(self,inputs:Dict[str,Union[torch.Tensor,Any]])
transformers.Trainer.get_eval_dataloader(self,eval_dataset:Optional[Dataset]=None)->DataLoader
transformers.Trainer.get_test_dataloader(self,test_dataset:Dataset)->DataLoader
transformers.Trainer.get_train_dataloader(self)->DataLoader
transformers.Trainer.hyperparameter_search(self,hp_space:Optional[Callable[['optuna.Trial'],Dict[str,float]]]=None,compute_objective:Optional[Callable[[Dict[str,float]],float]]=None,n_trials:int=20,direction:str='minimize',backend:Optional[Union['str',HPSearchBackend]]=None,hp_name:Optional[Callable[['optuna.Trial'],str]]=None,**kwargs)->BestRun
transformers.Trainer.is_local_process_zero(self)->bool
transformers.Trainer.is_world_process_zero(self)->bool
transformers.Trainer.log(self,logs:Dict[str,float])->None
transformers.Trainer.num_examples(self,dataloader:DataLoader)->int
transformers.Trainer.pop_callback(self,callback)
transformers.Trainer.predict(self,test_dataset:Dataset,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->PredictionOutput
transformers.Trainer.prediction_loop(self,dataloader:DataLoader,description:str,prediction_loss_only:Optional[bool]=None,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->PredictionOutput
transformers.Trainer.prediction_step(self,model:nn.Module,inputs:Dict[str,Union[torch.Tensor,Any]],prediction_loss_only:bool,ignore_keys:Optional[List[str]]=None)->Tuple[Optional[float], Optional[torch.Tensor], Optional[torch.Tensor]]
transformers.Trainer.remove_callback(self,callback)
transformers.Trainer.save_model(self,output_dir:Optional[str]=None)
transformers.Trainer.store_flos(self)
transformers.Trainer.train(self,model_path:Optional[str]=None,trial:Union['optuna.Trial',Dict[str,Any]]=None)
transformers.Trainer.training_step(self,model:nn.Module,inputs:Dict[str,Union[torch.Tensor,Any]])->torch.Tensor
transformers.trainer.Trainer(self,model:Union[PreTrainedModel,torch.nn.Module]=None,args:TrainingArguments=None,data_collator:Optional[DataCollator]=None,train_dataset:Optional[Dataset]=None,eval_dataset:Optional[Dataset]=None,tokenizer:Optional['PreTrainedTokenizerBase']=None,model_init:Callable[[],PreTrainedModel]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,callbacks:Optional[List[TrainerCallback]]=None,optimizers:Tuple[torch.optim.Optimizer,torch.optim.lr_scheduler.LambdaLR]=(None,None))
transformers.trainer.Trainer.__init__(self,model:Union[PreTrainedModel,torch.nn.Module]=None,args:TrainingArguments=None,data_collator:Optional[DataCollator]=None,train_dataset:Optional[Dataset]=None,eval_dataset:Optional[Dataset]=None,tokenizer:Optional['PreTrainedTokenizerBase']=None,model_init:Callable[[],PreTrainedModel]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,callbacks:Optional[List[TrainerCallback]]=None,optimizers:Tuple[torch.optim.Optimizer,torch.optim.lr_scheduler.LambdaLR]=(None,None))
transformers.trainer.Trainer._actual_model(model:Union[torch.nn.DataParallel,torch.nn.parallel.DistributedDataParallel,torch.nn.modules.Module])->torch.nn.modules.Module
transformers.trainer.Trainer._gather_and_numpify(self,tensors,name)
transformers.trainer.Trainer._get_eval_sampler(self,eval_dataset:Dataset)->Optional[torch.utils.data.sampler.Sampler]
transformers.trainer.Trainer._get_train_sampler(self)->Optional[torch.utils.data.sampler.Sampler]
transformers.trainer.Trainer._hp_search_setup(self,trial:Union['optuna.Trial',Dict[str,Any]])
transformers.trainer.Trainer._load_optimizer_and_scheduler(self,model_path)
transformers.trainer.Trainer._maybe_log_save_evaluate(self,tr_loss,model,trial,epoch)
transformers.trainer.Trainer._prepare_inputs(self,inputs:Dict[str,Union[torch.Tensor,Any]])->Dict[str, Union[torch.Tensor, Any]]
transformers.trainer.Trainer._remove_unused_columns(self,dataset:'datasets.Dataset',description:Optional[str]=None)
transformers.trainer.Trainer._report_to_hp_search(self,trial:Union['optuna.Trial',Dict[str,Any]],epoch:int,metrics:Dict[str,float])
transformers.trainer.Trainer._rotate_checkpoints(self,use_mtime=False)->None
transformers.trainer.Trainer._save(self,output_dir:Optional[str]=None)
transformers.trainer.Trainer._save_checkpoint(self,model,trial,metrics=None)
transformers.trainer.Trainer._save_tpu(self,output_dir:Optional[str]=None)
transformers.trainer.Trainer._sorted_checkpoints(self,checkpoint_prefix=PREFIX_CHECKPOINT_DIR,use_mtime=False)->List[str]
transformers.trainer.Trainer._tune_save_checkpoint(self)
transformers.trainer.Trainer.add_callback(self,callback)
transformers.trainer.Trainer.call_model_init(self,trial=None)
transformers.trainer.Trainer.compute_loss(self,model,inputs)
transformers.trainer.Trainer.create_optimizer_and_scheduler(self,num_training_steps:int)
transformers.trainer.Trainer.evaluate(self,eval_dataset:Optional[Dataset]=None,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->Dict[str, float]
transformers.trainer.Trainer.floating_point_ops(self,inputs:Dict[str,Union[torch.Tensor,Any]])
transformers.trainer.Trainer.get_eval_dataloader(self,eval_dataset:Optional[Dataset]=None)->DataLoader
transformers.trainer.Trainer.get_test_dataloader(self,test_dataset:Dataset)->DataLoader
transformers.trainer.Trainer.get_train_dataloader(self)->DataLoader
transformers.trainer.Trainer.hyperparameter_search(self,hp_space:Optional[Callable[['optuna.Trial'],Dict[str,float]]]=None,compute_objective:Optional[Callable[[Dict[str,float]],float]]=None,n_trials:int=20,direction:str='minimize',backend:Optional[Union['str',HPSearchBackend]]=None,hp_name:Optional[Callable[['optuna.Trial'],str]]=None,**kwargs)->BestRun
transformers.trainer.Trainer.is_local_process_zero(self)->bool
transformers.trainer.Trainer.is_world_process_zero(self)->bool
transformers.trainer.Trainer.log(self,logs:Dict[str,float])->None
transformers.trainer.Trainer.num_examples(self,dataloader:DataLoader)->int
transformers.trainer.Trainer.pop_callback(self,callback)
transformers.trainer.Trainer.predict(self,test_dataset:Dataset,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->PredictionOutput
transformers.trainer.Trainer.prediction_loop(self,dataloader:DataLoader,description:str,prediction_loss_only:Optional[bool]=None,ignore_keys:Optional[List[str]]=None,metric_key_prefix:str='eval')->PredictionOutput
transformers.trainer.Trainer.prediction_step(self,model:nn.Module,inputs:Dict[str,Union[torch.Tensor,Any]],prediction_loss_only:bool,ignore_keys:Optional[List[str]]=None)->Tuple[Optional[float], Optional[torch.Tensor], Optional[torch.Tensor]]
transformers.trainer.Trainer.remove_callback(self,callback)
transformers.trainer.Trainer.save_model(self,output_dir:Optional[str]=None)
transformers.trainer.Trainer.store_flos(self)
transformers.trainer.Trainer.train(self,model_path:Optional[str]=None,trial:Union['optuna.Trial',Dict[str,Any]]=None)
transformers.trainer.Trainer.training_step(self,model:nn.Module,inputs:Dict[str,Union[torch.Tensor,Any]])->torch.Tensor


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_tf_pytorch_utils.py----------------------------------------
A:transformers.modeling_tf_pytorch_utils.logger->utils.logging.get_logger(__name__)
A:transformers.modeling_tf_pytorch_utils.tf_name->tf_name.replace(start_prefix_to_remove, '', 1).replace(start_prefix_to_remove, '', 1)
A:transformers.modeling_tf_pytorch_utils.transpose->bool(tf_name[-1] == 'kernel' or 'emb_projs' in tf_name or 'out_projs' in tf_name)
A:transformers.modeling_tf_pytorch_utils.pt_path->os.path.abspath(pytorch_checkpoint_path)
A:transformers.modeling_tf_pytorch_utils.pt_state_dict->pt_model.state_dict()
A:transformers.modeling_tf_pytorch_utils.new_key->key.replace('beta', 'bias')
A:transformers.modeling_tf_pytorch_utils.pt_state_dict[new_key]->pt_model.state_dict().pop(old_key)
A:transformers.modeling_tf_pytorch_utils.all_pytorch_weights->set(list(pt_state_dict.keys()))
A:transformers.modeling_tf_pytorch_utils.(name, transpose)->convert_tf_weight_name_to_pt_weight_name(sw_name, start_prefix_to_remove=start_prefix_to_remove)
A:transformers.modeling_tf_pytorch_utils.array->numpy.reshape(array, pt_weight.shape)
A:transformers.modeling_tf_pytorch_utils.unexpected_keys->list(all_pytorch_weights)
A:transformers.modeling_tf_pytorch_utils.tf_model_class->getattr(transformers, tf_model_class_name)
A:transformers.modeling_tf_pytorch_utils.tf_model->tf_model_class(pt_model.config)
A:transformers.modeling_tf_pytorch_utils.current_pt_params_dict->dict(pt_model.named_parameters())
A:transformers.modeling_tf_pytorch_utils.(pt_name, transpose)->convert_tf_weight_name_to_pt_weight_name(tf_weight.name, start_prefix_to_remove=start_prefix_to_remove)
A:transformers.modeling_tf_pytorch_utils.all_tf_weights->set(list(tf_weights_map.keys()))
A:transformers.modeling_tf_pytorch_utils.new_pt_params_dict[pt_weight_name]->torch.from_numpy(array)
A:transformers.modeling_tf_pytorch_utils.loaded_pt_weights_data_ptr[pt_weight.data_ptr()]->torch.from_numpy(array)
A:transformers.modeling_tf_pytorch_utils.(missing_keys, unexpected_keys)->pt_model.load_state_dict(new_pt_params_dict, strict=False)
transformers.convert_tf_weight_name_to_pt_weight_name(tf_name,start_prefix_to_remove='')
transformers.load_pytorch_checkpoint_in_tf2_model(tf_model,pytorch_checkpoint_path,tf_inputs=None,allow_missing_keys=False)
transformers.load_pytorch_model_in_tf2_model(tf_model,pt_model,tf_inputs=None,allow_missing_keys=False)
transformers.load_pytorch_weights_in_tf2_model(tf_model,pt_state_dict,tf_inputs=None,allow_missing_keys=False)
transformers.load_tf2_checkpoint_in_pytorch_model(pt_model,tf_checkpoint_path,tf_inputs=None,allow_missing_keys=False)
transformers.load_tf2_model_in_pytorch_model(pt_model,tf_model,allow_missing_keys=False)
transformers.load_tf2_weights_in_pytorch_model(pt_model,tf_weights,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name(tf_name,start_prefix_to_remove='')
transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model(tf_model,pytorch_checkpoint_path,tf_inputs=None,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.load_pytorch_model_in_tf2_model(tf_model,pt_model,tf_inputs=None,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model(tf_model,pt_state_dict,tf_inputs=None,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model(pt_model,tf_checkpoint_path,tf_inputs=None,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model(pt_model,tf_model,allow_missing_keys=False)
transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model(pt_model,tf_weights,allow_missing_keys=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/hf_argparser.py----------------------------------------
A:transformers.hf_argparser.DataClass->NewType('DataClass', Any)
A:transformers.hf_argparser.DataClassType->NewType('DataClassType', Any)
A:transformers.hf_argparser.kwargs->field.metadata.copy()
A:transformers.hf_argparser.typestring->str(field.type)
A:transformers.hf_argparser.kwargs['choices']->list(field.type)
A:transformers.hf_argparser.kwargs['default']->field.default_factory()
A:transformers.hf_argparser.args_file->Path(sys.argv[0]).with_suffix('.args')
A:transformers.hf_argparser.fargs->Path(sys.argv[0]).with_suffix('.args').read_text().split()
A:transformers.hf_argparser.(namespace, remaining_args)->self.parse_known_args(args=args)
A:transformers.hf_argparser.obj->dtype(**inputs)
A:transformers.hf_argparser.data->json.loads(Path(json_file).read_text())
transformers.HfArgumentParser(self,dataclass_types:Union[DataClassType,Iterable[DataClassType]],**kwargs)
transformers.HfArgumentParser._add_dataclass_arguments(self,dtype:DataClassType)
transformers.HfArgumentParser.parse_args_into_dataclasses(self,args=None,return_remaining_strings=False,look_for_args_file=True,args_filename=None)->Tuple[DataClass, ...]
transformers.HfArgumentParser.parse_dict(self,args:dict)->Tuple[DataClass, ...]
transformers.HfArgumentParser.parse_json_file(self,json_file:str)->Tuple[DataClass, ...]
transformers.hf_argparser.HfArgumentParser(self,dataclass_types:Union[DataClassType,Iterable[DataClassType]],**kwargs)
transformers.hf_argparser.HfArgumentParser.__init__(self,dataclass_types:Union[DataClassType,Iterable[DataClassType]],**kwargs)
transformers.hf_argparser.HfArgumentParser._add_dataclass_arguments(self,dtype:DataClassType)
transformers.hf_argparser.HfArgumentParser.parse_args_into_dataclasses(self,args=None,return_remaining_strings=False,look_for_args_file=True,args_filename=None)->Tuple[DataClass, ...]
transformers.hf_argparser.HfArgumentParser.parse_dict(self,args:dict)->Tuple[DataClass, ...]
transformers.hf_argparser.HfArgumentParser.parse_json_file(self,json_file:str)->Tuple[DataClass, ...]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/trainer_utils.py----------------------------------------
A:transformers.trainer_utils.metrics->copy.deepcopy(metrics)
A:transformers.trainer_utils.loss->copy.deepcopy(metrics).pop('eval_loss', None)
A:transformers.trainer_utils._->copy.deepcopy(metrics).pop('epoch', None)
transformers.EvalPrediction(NamedTuple)
transformers.EvaluationStrategy(ExplicitEnum)
transformers.set_seed(seed:int)
transformers.trainer_utils.BestRun(NamedTuple)
transformers.trainer_utils.EvalPrediction(NamedTuple)
transformers.trainer_utils.EvaluationStrategy(ExplicitEnum)
transformers.trainer_utils.HPSearchBackend(ExplicitEnum)
transformers.trainer_utils.PredictionOutput(NamedTuple)
transformers.trainer_utils.TrainOutput(NamedTuple)
transformers.trainer_utils.default_compute_objective(metrics:Dict[str,float])->float
transformers.trainer_utils.default_hp_space_optuna(trial)->Dict[str, float]
transformers.trainer_utils.default_hp_space_ray(trial)->Dict[str, float]
transformers.trainer_utils.is_main_process(local_rank)
transformers.trainer_utils.set_seed(seed:int)
transformers.trainer_utils.total_processes_number(local_rank)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/testing_utils.py----------------------------------------
A:transformers.testing_utils._value->int(value)
A:transformers.testing_utils._run_slow_tests->parse_flag_from_env('RUN_SLOW', default=False)
A:transformers.testing_utils._run_pt_tf_cross_tests->parse_flag_from_env('RUN_PT_TF_CROSS_TESTS', default=False)
A:transformers.testing_utils._run_custom_tokenizers->parse_flag_from_env('RUN_CUSTOM_TOKENIZERS', default=False)
A:transformers.testing_utils._run_pipeline_tests->parse_flag_from_env('RUN_PIPELINE_TESTS', default=False)
A:transformers.testing_utils._run_git_lfs_tests->parse_flag_from_env('RUN_GIT_LFS_TESTS', default=False)
A:transformers.testing_utils._tf_gpu_memory_limit->parse_int_from_env('TF_GPU_MEMORY_LIMIT', default=None)
A:transformers.testing_utils.test_case->unittest.skip('test requires JAX & Flax')(test_case)
A:transformers.testing_utils.tests_dir->os.path.abspath(os.path.dirname(caller__file__))
A:transformers.testing_utils.out_pr->apply_print_resets(out).lower()
A:transformers.testing_utils.match_str->apply_print_resets(out).lower().find(what.lower())
A:transformers.testing_utils.self.out_buf->StringIO()
A:transformers.testing_utils.self.err_buf->StringIO()
A:transformers.testing_utils.self.out->self.io.getvalue()
A:transformers.testing_utils.self.err->self.err_buf.getvalue()
A:transformers.testing_utils.self.io->StringIO()
A:transformers.testing_utils.self.sh->logging.StreamHandler(self.io)
A:transformers.testing_utils.self._test_file_path->inspect.getfile(self.__class__)
A:transformers.testing_utils.path->Path(tmp_dir).resolve()
A:transformers.testing_utils.env->os.environ.copy()
A:transformers.testing_utils.env['PYTHONPATH']->':'.join(paths)
A:transformers.testing_utils.tmp_dir->tempfile.mkdtemp()
A:transformers.testing_utils.orig_writer->config.get_terminal_writer()
A:transformers.testing_utils.reports->tr.getreports('failed')
A:transformers.testing_utils.msg->tr._getfailureheadline(rep)
A:transformers.testing_utils.longrepr->re.sub('.*_ _ _ (_ ){10,}_ _ ', '', rep.longreprtext, 0, re.M | re.S)
A:transformers.testing_utils.tr._tw->create_terminal_writer(config, f)
A:transformers.testing_utils.line->line.decode('utf-8').rstrip().decode('utf-8').rstrip()
A:transformers.testing_utils.loop->asyncio.get_event_loop()
A:transformers.testing_utils.result->asyncio.get_event_loop().run_until_complete(_stream_subprocess(cmd, env=env, stdin=stdin, timeout=timeout, quiet=quiet, echo=echo))
A:transformers.testing_utils.cmd_str->' '.join(cmd)
A:transformers.testing_utils.stderr->'\n'.join(result.stderr)
transformers.testing_utils.CaptureLogger(self,logger)
transformers.testing_utils.CaptureLogger.__enter__(self)
transformers.testing_utils.CaptureLogger.__exit__(self,*exc)
transformers.testing_utils.CaptureLogger.__init__(self,logger)
transformers.testing_utils.CaptureLogger.__repr__(self)
transformers.testing_utils.CaptureStd(self,out=True,err=True)
transformers.testing_utils.CaptureStd.__enter__(self)
transformers.testing_utils.CaptureStd.__exit__(self,*exc)
transformers.testing_utils.CaptureStd.__init__(self,out=True,err=True)
transformers.testing_utils.CaptureStd.__repr__(self)
transformers.testing_utils.CaptureStderr(self)
transformers.testing_utils.CaptureStderr.__init__(self)
transformers.testing_utils.CaptureStdout(self)
transformers.testing_utils.CaptureStdout.__init__(self)
transformers.testing_utils.TestCasePlus(unittest.TestCase)
transformers.testing_utils.TestCasePlus.examples_dir(self)
transformers.testing_utils.TestCasePlus.examples_dir_str(self)
transformers.testing_utils.TestCasePlus.get_auto_remove_tmp_dir(self,tmp_dir=None,before=None,after=None)
transformers.testing_utils.TestCasePlus.get_env(self)
transformers.testing_utils.TestCasePlus.repo_root_dir(self)
transformers.testing_utils.TestCasePlus.repo_root_dir_str(self)
transformers.testing_utils.TestCasePlus.setUp(self)
transformers.testing_utils.TestCasePlus.src_dir(self)
transformers.testing_utils.TestCasePlus.src_dir_str(self)
transformers.testing_utils.TestCasePlus.tearDown(self)
transformers.testing_utils.TestCasePlus.test_file_dir(self)
transformers.testing_utils.TestCasePlus.test_file_dir_str(self)
transformers.testing_utils.TestCasePlus.test_file_path(self)
transformers.testing_utils.TestCasePlus.test_file_path_str(self)
transformers.testing_utils.TestCasePlus.tests_dir(self)
transformers.testing_utils.TestCasePlus.tests_dir_str(self)
transformers.testing_utils._RunOutput(self,returncode,stdout,stderr)
transformers.testing_utils._RunOutput.__init__(self,returncode,stdout,stderr)
transformers.testing_utils.apply_print_resets(buf)
transformers.testing_utils.assert_screenout(out,what)
transformers.testing_utils.custom_tokenizers(test_case)
transformers.testing_utils.execute_subprocess_async(cmd,env=None,stdin=None,timeout=180,quiet=False,echo=True)->_RunOutput
transformers.testing_utils.get_gpu_count()
transformers.testing_utils.get_tests_dir(append_path=None)
transformers.testing_utils.is_pipeline_test(test_case)
transformers.testing_utils.is_pt_tf_cross_test(test_case)
transformers.testing_utils.mockenv(**kwargs)
transformers.testing_utils.parse_flag_from_env(key,default=False)
transformers.testing_utils.parse_int_from_env(key,default=None)
transformers.testing_utils.pytest_addoption_shared(parser)
transformers.testing_utils.pytest_terminal_summary_main(tr,id)
transformers.testing_utils.require_datasets(test_case)
transformers.testing_utils.require_faiss(test_case)
transformers.testing_utils.require_flax(test_case)
transformers.testing_utils.require_git_lfs(test_case)
transformers.testing_utils.require_optuna(test_case)
transformers.testing_utils.require_pandas(test_case)
transformers.testing_utils.require_ray(test_case)
transformers.testing_utils.require_scatter(test_case)
transformers.testing_utils.require_sentencepiece(test_case)
transformers.testing_utils.require_tf(test_case)
transformers.testing_utils.require_tokenizers(test_case)
transformers.testing_utils.require_torch(test_case)
transformers.testing_utils.require_torch_gpu(test_case)
transformers.testing_utils.require_torch_multi_gpu(test_case)
transformers.testing_utils.require_torch_non_multi_gpu(test_case)
transformers.testing_utils.require_torch_scatter(test_case)
transformers.testing_utils.require_torch_tpu(test_case)
transformers.testing_utils.slow(test_case)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/convert_tf_hub_seq_to_seq_bert_to_pytorch.py----------------------------------------
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.bert_config->transformers.BertConfig.from_pretrained('bert-large-cased', vocab_size=vocab_size, max_position_embeddings=512, is_decoder=True, add_cross_attention=True)
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.bert_config_dict->transformers.BertConfig.from_pretrained('bert-large-cased', vocab_size=vocab_size, max_position_embeddings=512, is_decoder=True, add_cross_attention=True).to_dict()
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.config->BertGenerationConfig(**bert_config_dict)
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.model->BertGenerationDecoder(config)
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_hub_path,pytorch_dump_path,is_encoder_named_decoder,vocab_size,is_encoder)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/configuration_utils.py----------------------------------------
A:transformers.configuration_utils.logger->utils.logging.get_logger(__name__)
A:transformers.configuration_utils.self.return_dict->kwargs.pop('return_dict', True)
A:transformers.configuration_utils.self.output_hidden_states->kwargs.pop('output_hidden_states', False)
A:transformers.configuration_utils.self.output_attentions->kwargs.pop('output_attentions', False)
A:transformers.configuration_utils.self.torchscript->kwargs.pop('torchscript', False)
A:transformers.configuration_utils.self.use_bfloat16->kwargs.pop('use_bfloat16', False)
A:transformers.configuration_utils.self.pruned_heads->kwargs.pop('pruned_heads', {})
A:transformers.configuration_utils.self.tie_word_embeddings->kwargs.pop('tie_word_embeddings', True)
A:transformers.configuration_utils.self.is_encoder_decoder->kwargs.pop('is_encoder_decoder', False)
A:transformers.configuration_utils.self.is_decoder->kwargs.pop('is_decoder', False)
A:transformers.configuration_utils.self.add_cross_attention->kwargs.pop('add_cross_attention', False)
A:transformers.configuration_utils.self.tie_encoder_decoder->kwargs.pop('tie_encoder_decoder', False)
A:transformers.configuration_utils.self.max_length->kwargs.pop('max_length', 20)
A:transformers.configuration_utils.self.min_length->kwargs.pop('min_length', 0)
A:transformers.configuration_utils.self.do_sample->kwargs.pop('do_sample', False)
A:transformers.configuration_utils.self.early_stopping->kwargs.pop('early_stopping', False)
A:transformers.configuration_utils.self.num_beams->kwargs.pop('num_beams', 1)
A:transformers.configuration_utils.self.num_beam_groups->kwargs.pop('num_beam_groups', 1)
A:transformers.configuration_utils.self.diversity_penalty->kwargs.pop('diversity_penalty', 0.0)
A:transformers.configuration_utils.self.temperature->kwargs.pop('temperature', 1.0)
A:transformers.configuration_utils.self.top_k->kwargs.pop('top_k', 50)
A:transformers.configuration_utils.self.top_p->kwargs.pop('top_p', 1.0)
A:transformers.configuration_utils.self.repetition_penalty->kwargs.pop('repetition_penalty', 1.0)
A:transformers.configuration_utils.self.length_penalty->kwargs.pop('length_penalty', 1.0)
A:transformers.configuration_utils.self.no_repeat_ngram_size->kwargs.pop('no_repeat_ngram_size', 0)
A:transformers.configuration_utils.self.bad_words_ids->kwargs.pop('bad_words_ids', None)
A:transformers.configuration_utils.self.num_return_sequences->kwargs.pop('num_return_sequences', 1)
A:transformers.configuration_utils.self.chunk_size_feed_forward->kwargs.pop('chunk_size_feed_forward', 0)
A:transformers.configuration_utils.self.architectures->kwargs.pop('architectures', None)
A:transformers.configuration_utils.self.finetuning_task->kwargs.pop('finetuning_task', None)
A:transformers.configuration_utils.self.id2label->dict(((int(key), value) for (key, value) in self.id2label.items()))
A:transformers.configuration_utils.self.label2id->dict(zip(self.id2label.values(), self.id2label.keys()))
A:transformers.configuration_utils.self.num_labels->kwargs.pop('num_labels', 2)
A:transformers.configuration_utils.self.tokenizer_class->kwargs.pop('tokenizer_class', None)
A:transformers.configuration_utils.self.prefix->kwargs.pop('prefix', None)
A:transformers.configuration_utils.self.bos_token_id->kwargs.pop('bos_token_id', None)
A:transformers.configuration_utils.self.pad_token_id->kwargs.pop('pad_token_id', None)
A:transformers.configuration_utils.self.eos_token_id->kwargs.pop('eos_token_id', None)
A:transformers.configuration_utils.self.sep_token_id->kwargs.pop('sep_token_id', None)
A:transformers.configuration_utils.self.decoder_start_token_id->kwargs.pop('decoder_start_token_id', None)
A:transformers.configuration_utils.self.task_specific_params->kwargs.pop('task_specific_params', None)
A:transformers.configuration_utils.self.xla_device->kwargs.pop('xla_device', None)
A:transformers.configuration_utils.self._name_or_path->str(value)
A:transformers.configuration_utils.output_config_file->os.path.join(save_directory, CONFIG_NAME)
A:transformers.configuration_utils.(config_dict, kwargs)->cls.get_config_dict(pretrained_model_name_or_path, **kwargs)
A:transformers.configuration_utils.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.configuration_utils.force_download->kwargs.pop('force_download', False)
A:transformers.configuration_utils.resume_download->kwargs.pop('resume_download', False)
A:transformers.configuration_utils.proxies->kwargs.pop('proxies', None)
A:transformers.configuration_utils.use_auth_token->kwargs.pop('use_auth_token', None)
A:transformers.configuration_utils.local_files_only->kwargs.pop('local_files_only', False)
A:transformers.configuration_utils.revision->kwargs.pop('revision', None)
A:transformers.configuration_utils.pretrained_model_name_or_path->str(pretrained_model_name_or_path)
A:transformers.configuration_utils.config_file->hf_bucket_url(pretrained_model_name_or_path, filename=CONFIG_NAME, revision=revision, mirror=None)
A:transformers.configuration_utils.resolved_config_file->cached_path(config_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)
A:transformers.configuration_utils.config_dict->self.to_dict()
A:transformers.configuration_utils.msg->"Couldn't reach server at '{}' to download configuration file or configuration file is not a valid JSON file. Please check network or file content here: {}.".format(config_file, resolved_config_file)
A:transformers.configuration_utils.return_unused_kwargs->kwargs.pop('return_unused_kwargs', False)
A:transformers.configuration_utils.config->cls(**config_dict)
A:transformers.configuration_utils.config.pruned_heads->dict(((int(key), value) for (key, value) in config.pruned_heads.items()))
A:transformers.configuration_utils.text->reader.read()
A:transformers.configuration_utils.default_config_dict->PretrainedConfig().to_dict()
A:transformers.configuration_utils.output->copy.deepcopy(self.__dict__)
transformers.PretrainedConfig(self,**kwargs)
transformers.PretrainedConfig.__eq__(self,other)
transformers.PretrainedConfig.__repr__(self)
transformers.PretrainedConfig._dict_from_json_file(cls,json_file:Union[str,os.PathLike])
transformers.PretrainedConfig.from_dict(cls,config_dict:Dict[str,Any],**kwargs)->'PretrainedConfig'
transformers.PretrainedConfig.from_json_file(cls,json_file:Union[str,os.PathLike])->'PretrainedConfig'
transformers.PretrainedConfig.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],**kwargs)->'PretrainedConfig'
transformers.PretrainedConfig.get_config_dict(cls,pretrained_model_name_or_path:Union[str,os.PathLike],**kwargs)->Tuple[Dict[str, Any], Dict[str, Any]]
transformers.PretrainedConfig.name_or_path(self)->str
transformers.PretrainedConfig.name_or_path(self,value)
transformers.PretrainedConfig.num_labels(self)->int
transformers.PretrainedConfig.num_labels(self,num_labels:int)
transformers.PretrainedConfig.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.PretrainedConfig.to_dict(self)->Dict[str, Any]
transformers.PretrainedConfig.to_diff_dict(self)->Dict[str, Any]
transformers.PretrainedConfig.to_json_file(self,json_file_path:Union[str,os.PathLike],use_diff:bool=True)
transformers.PretrainedConfig.to_json_string(self,use_diff:bool=True)->str
transformers.PretrainedConfig.update(self,config_dict:Dict[str,Any])
transformers.PretrainedConfig.use_return_dict(self)->bool
transformers.configuration_utils.PretrainedConfig(self,**kwargs)
transformers.configuration_utils.PretrainedConfig.__eq__(self,other)
transformers.configuration_utils.PretrainedConfig.__init__(self,**kwargs)
transformers.configuration_utils.PretrainedConfig.__repr__(self)
transformers.configuration_utils.PretrainedConfig._dict_from_json_file(cls,json_file:Union[str,os.PathLike])
transformers.configuration_utils.PretrainedConfig.from_dict(cls,config_dict:Dict[str,Any],**kwargs)->'PretrainedConfig'
transformers.configuration_utils.PretrainedConfig.from_json_file(cls,json_file:Union[str,os.PathLike])->'PretrainedConfig'
transformers.configuration_utils.PretrainedConfig.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],**kwargs)->'PretrainedConfig'
transformers.configuration_utils.PretrainedConfig.get_config_dict(cls,pretrained_model_name_or_path:Union[str,os.PathLike],**kwargs)->Tuple[Dict[str, Any], Dict[str, Any]]
transformers.configuration_utils.PretrainedConfig.name_or_path(self)->str
transformers.configuration_utils.PretrainedConfig.name_or_path(self,value)
transformers.configuration_utils.PretrainedConfig.num_labels(self)->int
transformers.configuration_utils.PretrainedConfig.num_labels(self,num_labels:int)
transformers.configuration_utils.PretrainedConfig.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.configuration_utils.PretrainedConfig.to_dict(self)->Dict[str, Any]
transformers.configuration_utils.PretrainedConfig.to_diff_dict(self)->Dict[str, Any]
transformers.configuration_utils.PretrainedConfig.to_json_file(self,json_file_path:Union[str,os.PathLike],use_diff:bool=True)
transformers.configuration_utils.PretrainedConfig.to_json_string(self,use_diff:bool=True)->str
transformers.configuration_utils.PretrainedConfig.update(self,config_dict:Dict[str,Any])
transformers.configuration_utils.PretrainedConfig.use_return_dict(self)->bool


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/pipelines.py----------------------------------------
A:transformers.pipelines.logger->utils.logging.get_logger(__name__)
A:transformers.pipelines.model->model_class.from_pretrained(model, config=config, revision=revision, **model_kwargs)
A:transformers.pipelines.(path, _)->os.path.splitext(self.output_path)
A:transformers.pipelines.binary_path->os.path.extsep.join((path, 'pickle'))
A:transformers.pipelines.reader->csv.DictReader(f)
A:transformers.pipelines.writer->csv.DictWriter(f, list(data[0].keys()))
A:transformers.pipelines.self._entries->json.load(f)
A:transformers.pipelines.line->line.split('\t').split('\t')
A:transformers.pipelines.framework->get_framework(model)
A:transformers.pipelines.self.model->self.model.to(self.device)
A:transformers.pipelines.inputs->self.tokenizer(inputs, add_special_tokens=False, padding=False).get('input_ids', [])
A:transformers.pipelines.predictions->self.tokenizer.convert_logits_to_predictions(inputs, logits.detach())
A:transformers.pipelines.prefix_inputs->self._parse_and_tokenize(prefix, padding=False, add_special_tokens=False)
A:transformers.pipelines.output_sequences->self.model.generate(input_ids=input_ids, **generate_kwargs)
A:transformers.pipelines.generated_sequence->generated_sequence.numpy().tolist().numpy().tolist()
A:transformers.pipelines.text->self.tokenizer.decode(generated_sequence, skip_special_tokens=True, clean_up_tokenization_spaces=clean_up_tokenization_spaces)
A:transformers.pipelines.prompt_length->len(self.tokenizer.decode(input_ids[0], skip_special_tokens=True, clean_up_tokenization_spaces=clean_up_tokenization_spaces))
A:transformers.pipelines.outputs->self.model(input_ids=input_ids_example.unsqueeze(0), attention_mask=attention_mask_example.unsqueeze(0), token_type_ids=token_type_ids_example.unsqueeze(0))
A:transformers.pipelines.labels->self._parse_labels(labels)
A:transformers.pipelines.sequence_pairs->self._args_parser(sequences, candidate_labels, hypothesis_template)
A:transformers.pipelines.num_sequences->len(sequences)
A:transformers.pipelines.candidate_labels->self._args_parser._parse_labels(candidate_labels)
A:transformers.pipelines.reshaped_outputs->self.model(input_ids=input_ids_example.unsqueeze(0), attention_mask=attention_mask_example.unsqueeze(0), token_type_ids=token_type_ids_example.unsqueeze(0)).reshape((num_sequences, len(candidate_labels), -1))
A:transformers.pipelines.top_inds->list(reversed(scores[iseq].argsort()))
A:transformers.pipelines.numel->numpy.prod(masked_index.shape)
A:transformers.pipelines.target_enc->self.tokenizer.tokenize(target)
A:transformers.pipelines.target_inds->numpy.array(self.tokenizer.convert_tokens_to_ids(targets_proc))
A:transformers.pipelines.masked_index->torch.nonzero(input_ids == self.tokenizer.mask_token_id, as_tuple=False)
A:transformers.pipelines.probs->logits.softmax(dim=0)
A:transformers.pipelines.topk->tensorflow.math.top_k(probs, k=top_k if top_k is not None else self.top_k)
A:transformers.pipelines.values->tensorflow.gather_nd(values, tf.reshape(sort_inds, (-1, 1))).numpy()
A:transformers.pipelines.sort_inds->list(reversed(values.argsort(dim=-1)))
A:transformers.pipelines.(values, predictions)->logits.softmax(dim=0).topk(top_k if top_k is not None else self.top_k)
A:transformers.pipelines.tokens->task.split('_')
A:transformers.pipelines.batch_size->len(inputs)
A:transformers.pipelines.offset_mapping->kwargs.get('offset_mapping')
A:transformers.pipelines.self._basic_tokenizer->BasicTokenizer(do_lower_case=False)
A:transformers.pipelines.(inputs, offset_mappings)->self._args_parser(inputs, **kwargs)
A:transformers.pipelines.entities->self.model(**tokens)[0][0].cpu().numpy()
A:transformers.pipelines.labels_idx->score.argmax(axis=-1)
A:transformers.pipelines.word->self.tokenizer.convert_ids_to_tokens(int(input_ids[idx]))
A:transformers.pipelines.scores->numpy.nanmean([entity['score'] for entity in entities])
A:transformers.pipelines.inputs[i]->self.normalize(item)
A:transformers.pipelines.self._args_parser->QuestionAnsweringArgumentHandler()
A:transformers.pipelines.examples->self._args_parser(*args, **kwargs)
A:transformers.pipelines.question_first->bool(self.tokenizer.padding_side == 'right')
A:transformers.pipelines.encoded_inputs->self.tokenizer(text=example.question_text if question_first else example.context_text, text_pair=example.context_text if question_first else example.question_text, padding=kwargs['padding'], truncation='only_second' if question_first else 'only_first', max_length=kwargs['max_seq_len'], stride=kwargs['doc_stride'], return_tensors='np', return_token_type_ids=True, return_overflowing_tokens=True, return_offsets_mapping=True, return_special_tokens_mask=True)
A:transformers.pipelines.num_spans->len(encoded_inputs['input_ids'])
A:transformers.pipelines.p_mask->numpy.asarray([[tok != 1 if question_first else 0 for tok in encoded_inputs.sequence_ids(span_id)] for span_id in range(num_spans)])
A:transformers.pipelines.cls_index->numpy.nonzero(encoded_inputs['input_ids'] == self.tokenizer.cls_token_id)
A:transformers.pipelines.start_->numpy.exp(start_ - np.log(np.sum(np.exp(start_), axis=-1, keepdims=True)))
A:transformers.pipelines.end_->numpy.exp(end_ - np.log(np.sum(np.exp(end_), axis=-1, keepdims=True)))
A:transformers.pipelines.min_null_score->min(min_null_score, (start_[0] * end_[0]).item())
A:transformers.pipelines.(starts, ends, scores)->self.decode(start_, end_, kwargs['topk'], kwargs['max_answer_len'])
A:transformers.pipelines.char_to_word->numpy.array(example.char_to_word_offset)
A:transformers.pipelines.outer->numpy.matmul(np.expand_dims(start, -1), np.expand_dims(end, 1))
A:transformers.pipelines.candidates->numpy.tril(np.triu(outer), max_answer_len - 1)
A:transformers.pipelines.scores_flat->numpy.tril(np.triu(outer), max_answer_len - 1).flatten()
A:transformers.pipelines.idx_sort->numpy.argsort(-scores_flat)
A:transformers.pipelines.token->self.tokenizer.tokenize(word)
A:transformers.pipelines.tqa_pipeline_input['table']->pandas.DataFrame(tqa_pipeline_input['table'])
A:transformers.pipelines.input_ids->inputs['input_ids'].to(self.device)
A:transformers.pipelines.attention_mask->inputs['attention_mask'].to(self.device)
A:transformers.pipelines.token_type_ids->inputs['token_type_ids'].to(self.device)
A:transformers.pipelines.model_labels->numpy.zeros_like(prev_labels_example.cpu().numpy())
A:transformers.pipelines.model_labels[i]->int(prev_answers[col_id, row_id])
A:transformers.pipelines.token_type_ids_example[:, 3]->torch.from_numpy(model_labels).type(torch.long).to(self.device)
A:transformers.pipelines.dist_per_token->torch.distributions.Bernoulli(logits=logits)
A:transformers.pipelines.coords_to_probs->collections.defaultdict(list)
A:transformers.pipelines.logits_batch->torch.cat(tuple(all_logits), 0)
A:transformers.pipelines.(pipeline_inputs, sequential, padding, truncation)->self._args_parser(*args, **kwargs)
A:transformers.pipelines.aggregator->aggregators.get(index, '')
A:transformers.pipelines.aggregator_prefix->aggregators_prefix.get(index, '')
A:transformers.pipelines.input_length->tensorflow.shape(inputs['input_ids'])[-1].numpy()
A:transformers.pipelines.min_length->generate_kwargs.get('min_length', self.model.config.min_length)
A:transformers.pipelines.max_length->generate_kwargs.get('max_length', self.model.config.max_length)
A:transformers.pipelines.summaries->self.model.generate(inputs['input_ids'], attention_mask=inputs['attention_mask'], **generate_kwargs)
A:transformers.pipelines.record['summary_text']->self.tokenizer.decode(summary, skip_special_tokens=True, clean_up_tokenization_spaces=clean_up_tokenization_spaces)
A:transformers.pipelines.translations->self.model.generate(inputs['input_ids'], attention_mask=inputs['attention_mask'], **generate_kwargs)
A:transformers.pipelines.record['translation_text']->self.tokenizer.decode(translation, skip_special_tokens=True, clean_up_tokenization_spaces=clean_up_tokenization_spaces)
A:transformers.pipelines.generations->self.model.generate(inputs['input_ids'], attention_mask=inputs['attention_mask'], **generate_kwargs)
A:transformers.pipelines.record['generated_text']->self.tokenizer.decode(generation, skip_special_tokens=True, clean_up_tokenization_spaces=clean_up_tokenization_spaces)
A:transformers.pipelines.conversation_id->uuid.uuid4()
A:transformers.pipelines.output->'Conversation id: {} \n'.format(self.uuid)
A:transformers.pipelines.generated_responses->self.model.generate(inputs['input_ids'], attention_mask=inputs['attention_mask'], **generate_kwargs)
A:transformers.pipelines.history->self._clean_padding_history(history)
A:transformers.pipelines.cutoff_eos_index->new_input[cutoff_eos_index:].index(self.tokenizer.eos_token_id)
A:transformers.pipelines.padded_outputs->self.tokenizer.pad({'input_ids': outputs}, padding='longest', return_attention_mask=True, return_tensors=self.framework)
A:transformers.pipelines.(targeted_task, task_options)->check_task(task)
A:transformers.pipelines.use_fast->tokenizer[1].pop('use_fast', use_fast)
A:transformers.pipelines.tokenizer->models.auto.tokenization_auto.AutoTokenizer.from_pretrained(tokenizer, revision=revision, use_fast=use_fast)
A:transformers.pipelines.config->models.auto.configuration_auto.AutoConfig.from_pretrained(config, revision=revision)
A:transformers.pipelines.modelcard->modelcard.ModelCard.from_pretrained(modelcard, revision=revision)
transformers.Conversation(self,text:str=None,conversation_id:UUID=None)
transformers.Conversation.__repr__(self)
transformers.Conversation.add_user_input(self,text:str,overwrite:bool=False)
transformers.Conversation.append_response(self,response:str)
transformers.Conversation.mark_processed(self)
transformers.Conversation.set_history(self,history:List[int])
transformers.ConversationalPipeline(self,min_length_for_response=32,*args,**kwargs)
transformers.ConversationalPipeline._clean_padding_history(self,generated_tensor)->List[List[int]]
transformers.ConversationalPipeline._concat_inputs_history(self,inputs:List[List[int]],histories:List[Optional[List[int]]],max_length:int)
transformers.ConversationalPipeline._parse_and_tokenize(self,inputs,**kwargs)
transformers.CsvPipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.CsvPipelineDataFormat.__iter__(self)
transformers.CsvPipelineDataFormat.save(self,data:List[dict])
transformers.FeatureExtractionPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,task:str='')
transformers.FillMaskPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,top_k=5,task:str='')
transformers.FillMaskPipeline.ensure_exactly_one_mask_token(self,masked_index:np.ndarray)
transformers.JsonPipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.JsonPipelineDataFormat.__iter__(self)
transformers.JsonPipelineDataFormat.save(self,data:dict)
transformers.PipedPipelineDataFormat(PipelineDataFormat)
transformers.PipedPipelineDataFormat.__iter__(self)
transformers.PipedPipelineDataFormat.save(self,data:dict)
transformers.PipedPipelineDataFormat.save_binary(self,data:Union[dict,List[dict]])->str
transformers.Pipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,task:str='',args_parser:ArgumentHandler=None,device:int=-1,binary_output:bool=False)
transformers.Pipeline._forward(self,inputs,return_tensors=False)
transformers.Pipeline._parse_and_tokenize(self,inputs,padding=True,add_special_tokens=True,**kwargs)
transformers.Pipeline.check_model_type(self,supported_models:Union[List[str],dict])
transformers.Pipeline.device_placement(self)
transformers.Pipeline.ensure_tensor_on_device(self,**inputs)
transformers.Pipeline.predict(self,X)
transformers.Pipeline.save_pretrained(self,save_directory:str)
transformers.Pipeline.transform(self,X)
transformers.PipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite:bool=False)
transformers.PipelineDataFormat.__iter__(self)
transformers.PipelineDataFormat.from_str(format:str,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)->'PipelineDataFormat'
transformers.PipelineDataFormat.save(self,data:Union[dict,List[dict]])
transformers.PipelineDataFormat.save_binary(self,data:Union[dict,List[dict]])->str
transformers.PipelineException(self,task:str,model:str,reason:str)
transformers.QuestionAnsweringPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,device:int=-1,task:str='',**kwargs)
transformers.QuestionAnsweringPipeline.create_sample(question:Union[str,List[str]],context:Union[str,List[str]])->Union[SquadExample, List[SquadExample]]
transformers.QuestionAnsweringPipeline.decode(self,start:np.ndarray,end:np.ndarray,topk:int,max_answer_len:int)->Tuple
transformers.QuestionAnsweringPipeline.span_to_answer(self,text:str,start:int,end:int)->Dict[str, Union[str, int]]
transformers.SummarizationPipeline(self,*args,**kwargs)
transformers.TableQuestionAnsweringPipeline(self,args_parser=TableQuestionAnsweringArgumentHandler(),*args,**kwargs)
transformers.TableQuestionAnsweringPipeline.batch_inference(self,**inputs)
transformers.TableQuestionAnsweringPipeline.sequential_inference(self,**inputs)
transformers.Text2TextGenerationPipeline(self,*args,**kwargs)
transformers.TextClassificationPipeline(self,return_all_scores:bool=False,**kwargs)
transformers.TextGenerationPipeline(self,*args,**kwargs)
transformers.TextGenerationPipeline._parse_and_tokenize(self,inputs,padding=True,add_special_tokens=True,**kwargs)
transformers.TokenClassificationPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=TokenClassificationArgumentHandler(),device:int=-1,binary_output:bool=False,ignore_labels=['O'],task:str='',grouped_entities:bool=False,ignore_subwords:bool=False)
transformers.TokenClassificationPipeline.group_entities(self,entities:List[dict])->List[dict]
transformers.TokenClassificationPipeline.group_sub_entities(self,entities:List[dict])->dict
transformers.TranslationPipeline(self,*args,**kwargs)
transformers.ZeroShotClassificationPipeline(self,args_parser=ZeroShotClassificationArgumentHandler(),*args,**kwargs)
transformers.ZeroShotClassificationPipeline._parse_and_tokenize(self,sequences,candidate_labels,hypothesis_template,padding=True,add_special_tokens=True,**kwargs)
transformers.ZeroShotClassificationPipeline.entailment_id(self)
transformers.pipeline(task:str,model:Optional=None,config:Optional[Union[str,PretrainedConfig]]=None,tokenizer:Optional[Union[str,PreTrainedTokenizer]]=None,framework:Optional[str]=None,revision:Optional[str]=None,use_fast:bool=True,**kwargs)->Pipeline
transformers.pipelines.ArgumentHandler(self,*args,**kwargs)
transformers.pipelines.ArgumentHandler.__call__(self,*args,**kwargs)
transformers.pipelines.Conversation(self,text:str=None,conversation_id:UUID=None)
transformers.pipelines.Conversation.__init__(self,text:str=None,conversation_id:UUID=None)
transformers.pipelines.Conversation.__repr__(self)
transformers.pipelines.Conversation.add_user_input(self,text:str,overwrite:bool=False)
transformers.pipelines.Conversation.append_response(self,response:str)
transformers.pipelines.Conversation.mark_processed(self)
transformers.pipelines.Conversation.set_history(self,history:List[int])
transformers.pipelines.ConversationalPipeline(self,min_length_for_response=32,*args,**kwargs)
transformers.pipelines.ConversationalPipeline.__init__(self,min_length_for_response=32,*args,**kwargs)
transformers.pipelines.ConversationalPipeline._clean_padding_history(self,generated_tensor)->List[List[int]]
transformers.pipelines.ConversationalPipeline._concat_inputs_history(self,inputs:List[List[int]],histories:List[Optional[List[int]]],max_length:int)
transformers.pipelines.ConversationalPipeline._parse_and_tokenize(self,inputs,**kwargs)
transformers.pipelines.CsvPipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.pipelines.CsvPipelineDataFormat.__init__(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.pipelines.CsvPipelineDataFormat.__iter__(self)
transformers.pipelines.CsvPipelineDataFormat.save(self,data:List[dict])
transformers.pipelines.FeatureExtractionPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,task:str='')
transformers.pipelines.FeatureExtractionPipeline.__init__(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,task:str='')
transformers.pipelines.FillMaskPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,top_k=5,task:str='')
transformers.pipelines.FillMaskPipeline.__init__(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=None,device:int=-1,top_k=5,task:str='')
transformers.pipelines.FillMaskPipeline.ensure_exactly_one_mask_token(self,masked_index:np.ndarray)
transformers.pipelines.JsonPipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.pipelines.JsonPipelineDataFormat.__init__(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)
transformers.pipelines.JsonPipelineDataFormat.__iter__(self)
transformers.pipelines.JsonPipelineDataFormat.save(self,data:dict)
transformers.pipelines.PipedPipelineDataFormat(PipelineDataFormat)
transformers.pipelines.PipedPipelineDataFormat.__iter__(self)
transformers.pipelines.PipedPipelineDataFormat.save(self,data:dict)
transformers.pipelines.PipedPipelineDataFormat.save_binary(self,data:Union[dict,List[dict]])->str
transformers.pipelines.Pipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,task:str='',args_parser:ArgumentHandler=None,device:int=-1,binary_output:bool=False)
transformers.pipelines.Pipeline.__init__(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,task:str='',args_parser:ArgumentHandler=None,device:int=-1,binary_output:bool=False)
transformers.pipelines.Pipeline._forward(self,inputs,return_tensors=False)
transformers.pipelines.Pipeline._parse_and_tokenize(self,inputs,padding=True,add_special_tokens=True,**kwargs)
transformers.pipelines.Pipeline.check_model_type(self,supported_models:Union[List[str],dict])
transformers.pipelines.Pipeline.device_placement(self)
transformers.pipelines.Pipeline.ensure_tensor_on_device(self,**inputs)
transformers.pipelines.Pipeline.predict(self,X)
transformers.pipelines.Pipeline.save_pretrained(self,save_directory:str)
transformers.pipelines.Pipeline.transform(self,X)
transformers.pipelines.PipelineDataFormat(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite:bool=False)
transformers.pipelines.PipelineDataFormat.__init__(self,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite:bool=False)
transformers.pipelines.PipelineDataFormat.__iter__(self)
transformers.pipelines.PipelineDataFormat.from_str(format:str,output_path:Optional[str],input_path:Optional[str],column:Optional[str],overwrite=False)->'PipelineDataFormat'
transformers.pipelines.PipelineDataFormat.save(self,data:Union[dict,List[dict]])
transformers.pipelines.PipelineDataFormat.save_binary(self,data:Union[dict,List[dict]])->str
transformers.pipelines.PipelineException(self,task:str,model:str,reason:str)
transformers.pipelines.PipelineException.__init__(self,task:str,model:str,reason:str)
transformers.pipelines.QuestionAnsweringArgumentHandler(self,*args,**kwargs)
transformers.pipelines.QuestionAnsweringArgumentHandler.__call__(self,*args,**kwargs)
transformers.pipelines.QuestionAnsweringArgumentHandler.normalize(self,item)
transformers.pipelines.QuestionAnsweringPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,device:int=-1,task:str='',**kwargs)
transformers.pipelines.QuestionAnsweringPipeline.__init__(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,device:int=-1,task:str='',**kwargs)
transformers.pipelines.QuestionAnsweringPipeline.create_sample(question:Union[str,List[str]],context:Union[str,List[str]])->Union[SquadExample, List[SquadExample]]
transformers.pipelines.QuestionAnsweringPipeline.decode(self,start:np.ndarray,end:np.ndarray,topk:int,max_answer_len:int)->Tuple
transformers.pipelines.QuestionAnsweringPipeline.span_to_answer(self,text:str,start:int,end:int)->Dict[str, Union[str, int]]
transformers.pipelines.SummarizationPipeline(self,*args,**kwargs)
transformers.pipelines.SummarizationPipeline.__init__(self,*args,**kwargs)
transformers.pipelines.TableQuestionAnsweringArgumentHandler(self,table=None,query=None,sequential=False,padding=True,truncation=True)
transformers.pipelines.TableQuestionAnsweringArgumentHandler.__call__(self,table=None,query=None,sequential=False,padding=True,truncation=True)
transformers.pipelines.TableQuestionAnsweringPipeline(self,args_parser=TableQuestionAnsweringArgumentHandler(),*args,**kwargs)
transformers.pipelines.TableQuestionAnsweringPipeline.__init__(self,args_parser=TableQuestionAnsweringArgumentHandler(),*args,**kwargs)
transformers.pipelines.TableQuestionAnsweringPipeline.batch_inference(self,**inputs)
transformers.pipelines.TableQuestionAnsweringPipeline.sequential_inference(self,**inputs)
transformers.pipelines.Text2TextGenerationPipeline(self,*args,**kwargs)
transformers.pipelines.Text2TextGenerationPipeline.__init__(self,*args,**kwargs)
transformers.pipelines.TextClassificationPipeline(self,return_all_scores:bool=False,**kwargs)
transformers.pipelines.TextClassificationPipeline.__init__(self,return_all_scores:bool=False,**kwargs)
transformers.pipelines.TextGenerationPipeline(self,*args,**kwargs)
transformers.pipelines.TextGenerationPipeline.__init__(self,*args,**kwargs)
transformers.pipelines.TextGenerationPipeline._parse_and_tokenize(self,inputs,padding=True,add_special_tokens=True,**kwargs)
transformers.pipelines.TokenClassificationArgumentHandler(self,*args,**kwargs)
transformers.pipelines.TokenClassificationArgumentHandler.__call__(self,*args,**kwargs)
transformers.pipelines.TokenClassificationPipeline(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=TokenClassificationArgumentHandler(),device:int=-1,binary_output:bool=False,ignore_labels=['O'],task:str='',grouped_entities:bool=False,ignore_subwords:bool=False)
transformers.pipelines.TokenClassificationPipeline.__init__(self,model:Union['PreTrainedModel','TFPreTrainedModel'],tokenizer:PreTrainedTokenizer,modelcard:Optional[ModelCard]=None,framework:Optional[str]=None,args_parser:ArgumentHandler=TokenClassificationArgumentHandler(),device:int=-1,binary_output:bool=False,ignore_labels=['O'],task:str='',grouped_entities:bool=False,ignore_subwords:bool=False)
transformers.pipelines.TokenClassificationPipeline.group_entities(self,entities:List[dict])->List[dict]
transformers.pipelines.TokenClassificationPipeline.group_sub_entities(self,entities:List[dict])->dict
transformers.pipelines.TranslationPipeline(self,*args,**kwargs)
transformers.pipelines.TranslationPipeline.__init__(self,*args,**kwargs)
transformers.pipelines.ZeroShotClassificationArgumentHandler(self,sequences,labels,hypothesis_template)
transformers.pipelines.ZeroShotClassificationArgumentHandler.__call__(self,sequences,labels,hypothesis_template)
transformers.pipelines.ZeroShotClassificationArgumentHandler._parse_labels(self,labels)
transformers.pipelines.ZeroShotClassificationPipeline(self,args_parser=ZeroShotClassificationArgumentHandler(),*args,**kwargs)
transformers.pipelines.ZeroShotClassificationPipeline.__init__(self,args_parser=ZeroShotClassificationArgumentHandler(),*args,**kwargs)
transformers.pipelines.ZeroShotClassificationPipeline._parse_and_tokenize(self,sequences,candidate_labels,hypothesis_template,padding=True,add_special_tokens=True,**kwargs)
transformers.pipelines.ZeroShotClassificationPipeline.entailment_id(self)
transformers.pipelines._ScikitCompat(ABC)
transformers.pipelines._ScikitCompat.predict(self,X)
transformers.pipelines._ScikitCompat.transform(self,X)
transformers.pipelines.check_task(task:str)->Tuple[Dict, Any]
transformers.pipelines.get_default_model(targeted_task:Dict,framework:Optional[str],task_options:Optional[Any])->str
transformers.pipelines.get_framework(model,revision:Optional[str]=None)
transformers.pipelines.pipeline(task:str,model:Optional=None,config:Optional[Union[str,PretrainedConfig]]=None,tokenizer:Optional[Union[str,PreTrainedTokenizer]]=None,framework:Optional[str]=None,revision:Optional[str]=None,use_fast:bool=True,**kwargs)->Pipeline


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/hf_api.py----------------------------------------
A:transformers.hf_api.path->'{}/api/repos/delete'.format(self.endpoint)
A:transformers.hf_api.r->requests.delete(path, headers={'authorization': 'Bearer {}'.format(token)}, json={'name': name, 'organization': organization})
A:transformers.hf_api.d->requests.delete(path, headers={'authorization': 'Bearer {}'.format(token)}, json={'name': name, 'organization': organization}).json()
A:transformers.hf_api.urls->self.presign(token, filetype=filetype, filename=filename, organization=organization)
A:transformers.hf_api.pf->TqdmProgressFileReader(f)
A:transformers.hf_api.self.pbar->tqdm(total=self.total_size, leave=False)
A:transformers.hf_api.path_token->expanduser('~/.huggingface/token')
transformers.hf_api.HfApi(self,endpoint=None)
transformers.hf_api.HfApi.__init__(self,endpoint=None)
transformers.hf_api.HfApi.create_repo(self,token:str,name:str,organization:Optional[str]=None,private:Optional[bool]=None,exist_ok=False,lfsmultipartthresh:Optional[int]=None)->str
transformers.hf_api.HfApi.delete_obj(self,token:str,filetype:str,filename:str,organization:Optional[str]=None)
transformers.hf_api.HfApi.delete_repo(self,token:str,name:str,organization:Optional[str]=None)
transformers.hf_api.HfApi.list_objs(self,token:str,filetype:str,organization:Optional[str]=None)->List[S3Obj]
transformers.hf_api.HfApi.list_repos_objs(self,token:str,organization:Optional[str]=None)->List[S3Obj]
transformers.hf_api.HfApi.login(self,username:str,password:str)->str
transformers.hf_api.HfApi.logout(self,token:str)->None
transformers.hf_api.HfApi.model_list(self)->List[ModelInfo]
transformers.hf_api.HfApi.presign(self,token:str,filetype:str,filename:str,organization:Optional[str]=None)->PresignedUrl
transformers.hf_api.HfApi.presign_and_upload(self,token:str,filetype:str,filename:str,filepath:str,organization:Optional[str]=None)->str
transformers.hf_api.HfApi.whoami(self,token:str)->Tuple[str, List[str]]
transformers.hf_api.HfFolder
transformers.hf_api.HfFolder.delete_token(cls)
transformers.hf_api.HfFolder.get_token(cls)
transformers.hf_api.HfFolder.save_token(cls,token)
transformers.hf_api.ModelInfo(self,modelId:Optional[str]=None,author:Optional[str]=None,downloads:Optional[int]=None,tags:List[str]=[],pipeline_tag:Optional[str]=None,siblings:Optional[List[Dict]]=None,**kwargs)
transformers.hf_api.ModelInfo.__init__(self,modelId:Optional[str]=None,author:Optional[str]=None,downloads:Optional[int]=None,tags:List[str]=[],pipeline_tag:Optional[str]=None,siblings:Optional[List[Dict]]=None,**kwargs)
transformers.hf_api.ModelSibling(self,rfilename:str,**kwargs)
transformers.hf_api.ModelSibling.__init__(self,rfilename:str,**kwargs)
transformers.hf_api.PresignedUrl(self,write:str,access:str,type:str,**kwargs)
transformers.hf_api.PresignedUrl.__init__(self,write:str,access:str,type:str,**kwargs)
transformers.hf_api.RepoObj(self,filename:str,lastModified:str,commit:str,size:int,**kwargs)
transformers.hf_api.RepoObj.__init__(self,filename:str,lastModified:str,commit:str,size:int,**kwargs)
transformers.hf_api.S3Obj(self,filename:str,LastModified:str,ETag:str,Size:int,**kwargs)
transformers.hf_api.S3Obj.__init__(self,filename:str,LastModified:str,ETag:str,Size:int,**kwargs)
transformers.hf_api.TqdmProgressFileReader(self,f:io.BufferedReader)
transformers.hf_api.TqdmProgressFileReader.__init__(self,f:io.BufferedReader)
transformers.hf_api.TqdmProgressFileReader._read(self,n=-1)
transformers.hf_api.TqdmProgressFileReader.close(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_tf_outputs.py----------------------------------------
transformers.modeling_tf_outputs.TFBaseModelOutput(ModelOutput)
transformers.modeling_tf_outputs.TFBaseModelOutputWithPast(ModelOutput)
transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling(ModelOutput)
transformers.modeling_tf_outputs.TFCausalLMOutput(ModelOutput)
transformers.modeling_tf_outputs.TFCausalLMOutputWithPast(ModelOutput)
transformers.modeling_tf_outputs.TFMaskedLMOutput(ModelOutput)
transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput(ModelOutput)
transformers.modeling_tf_outputs.TFNextSentencePredictorOutput(ModelOutput)
transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSeq2SeqLMOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSeq2SeqModelOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSequenceClassifierOutput(ModelOutput)
transformers.modeling_tf_outputs.TFSequenceClassifierOutputWithPast(ModelOutput)
transformers.modeling_tf_outputs.TFTokenClassifierOutput(ModelOutput)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/optimization.py----------------------------------------
A:transformers.optimization.logger->utils.logging.get_logger(__name__)
A:transformers.optimization.defaults->dict(lr=lr, eps=eps, clip_threshold=clip_threshold, decay_rate=decay_rate, beta1=beta1, weight_decay=weight_decay, scale_parameter=scale_parameter, relative_step=relative_step, warmup_init=warmup_init)
A:transformers.optimization.loss->closure()
A:transformers.optimization.state['exp_avg']->state['exp_avg'].to(grad).to(grad)
A:transformers.optimization.state['exp_avg_sq']->state['exp_avg_sq'].to(grad).to(grad)
A:transformers.optimization.denom->exp_avg_sq.sqrt().add_(group['eps'])
A:transformers.optimization.rel_step_sz->min(min_step, 1.0 / math.sqrt(param_state['step']))
A:transformers.optimization.param_scale->max(param_group['eps'][1], param_state['RMS'])
A:transformers.optimization.r_factor->(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1, keepdim=True)).rsqrt_()
A:transformers.optimization.c_factor->exp_avg_sq_col.rsqrt()
A:transformers.optimization.grad->grad.float().float()
A:transformers.optimization.(factored, use_first_moment)->self._get_options(group, grad_shape)
A:transformers.optimization.state['exp_avg_sq_row']->state['exp_avg_sq_row'].to(grad).to(grad)
A:transformers.optimization.state['exp_avg_sq_col']->state['exp_avg_sq_col'].to(grad).to(grad)
A:transformers.optimization.p_data_fp32->p_data_fp32.float().float()
A:transformers.optimization.state['RMS']->self._rms(p_data_fp32)
A:transformers.optimization.group['lr']->self._get_lr(group, state)
A:transformers.optimization.update->exp_avg_sq.rsqrt().mul_(grad)
transformers.Adafactor(self,params,lr=None,eps=(1e-30,0.001),clip_threshold=1.0,decay_rate=-0.8,beta1=None,weight_decay=0.0,scale_parameter=True,relative_step=True,warmup_init=False)
transformers.Adafactor._approx_sq_grad(exp_avg_sq_row,exp_avg_sq_col)
transformers.Adafactor._get_lr(param_group,param_state)
transformers.Adafactor._get_options(param_group,param_shape)
transformers.Adafactor._rms(tensor)
transformers.Adafactor.step(self,closure=None)
transformers.AdamW(self,params:Iterable[torch.nn.parameter.Parameter],lr:float=0.001,betas:Tuple[float,float]=(0.9,0.999),eps:float=1e-06,weight_decay:float=0.0,correct_bias:bool=True)
transformers.AdamW.step(self,closure:Callable=None)
transformers.get_constant_schedule(optimizer:Optimizer,last_epoch:int=-1)
transformers.get_constant_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,last_epoch:int=-1)
transformers.get_cosine_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,num_training_steps:int,num_cycles:float=0.5,last_epoch:int=-1)
transformers.get_cosine_with_hard_restarts_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,num_training_steps:int,num_cycles:int=1,last_epoch:int=-1)
transformers.get_linear_schedule_with_warmup(optimizer,num_warmup_steps,num_training_steps,last_epoch=-1)
transformers.get_polynomial_decay_schedule_with_warmup(optimizer,num_warmup_steps,num_training_steps,lr_end=1e-07,power=1.0,last_epoch=-1)
transformers.optimization.Adafactor(self,params,lr=None,eps=(1e-30,0.001),clip_threshold=1.0,decay_rate=-0.8,beta1=None,weight_decay=0.0,scale_parameter=True,relative_step=True,warmup_init=False)
transformers.optimization.Adafactor.__init__(self,params,lr=None,eps=(1e-30,0.001),clip_threshold=1.0,decay_rate=-0.8,beta1=None,weight_decay=0.0,scale_parameter=True,relative_step=True,warmup_init=False)
transformers.optimization.Adafactor._approx_sq_grad(exp_avg_sq_row,exp_avg_sq_col)
transformers.optimization.Adafactor._get_lr(param_group,param_state)
transformers.optimization.Adafactor._get_options(param_group,param_shape)
transformers.optimization.Adafactor._rms(tensor)
transformers.optimization.Adafactor.step(self,closure=None)
transformers.optimization.AdamW(self,params:Iterable[torch.nn.parameter.Parameter],lr:float=0.001,betas:Tuple[float,float]=(0.9,0.999),eps:float=1e-06,weight_decay:float=0.0,correct_bias:bool=True)
transformers.optimization.AdamW.__init__(self,params:Iterable[torch.nn.parameter.Parameter],lr:float=0.001,betas:Tuple[float,float]=(0.9,0.999),eps:float=1e-06,weight_decay:float=0.0,correct_bias:bool=True)
transformers.optimization.AdamW.step(self,closure:Callable=None)
transformers.optimization.get_constant_schedule(optimizer:Optimizer,last_epoch:int=-1)
transformers.optimization.get_constant_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,last_epoch:int=-1)
transformers.optimization.get_cosine_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,num_training_steps:int,num_cycles:float=0.5,last_epoch:int=-1)
transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup(optimizer:Optimizer,num_warmup_steps:int,num_training_steps:int,num_cycles:int=1,last_epoch:int=-1)
transformers.optimization.get_linear_schedule_with_warmup(optimizer,num_warmup_steps,num_training_steps,last_epoch=-1)
transformers.optimization.get_polynomial_decay_schedule_with_warmup(optimizer,num_warmup_steps,num_training_steps,lr_end=1e-07,power=1.0,last_epoch=-1)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/convert_slow_tokenizers_checkpoints_to_fast.py----------------------------------------
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.logger->transformers.utils.logging.get_logger(__name__)
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.checkpoint_names->list(tokenizer_class.max_model_input_sizes.keys())
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.tokenizer->tokenizer_class.from_pretrained(checkpoint, force_download=force_download)
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.(checkpoint_directory, checkpoint_prefix_name)->checkpoint.split('/')
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.dump_path_full->os.path.join(dump_path_full, checkpoint_prefix_name)
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.file_names->tokenizer_class.from_pretrained(checkpoint, force_download=force_download).save_pretrained(dump_path_full, legacy_format=False, filename_prefix=checkpoint_prefix_name)
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.parser->argparse.ArgumentParser()
A:transformers.convert_slow_tokenizers_checkpoints_to_fast.args->argparse.ArgumentParser().parse_args()
transformers.convert_slow_tokenizers_checkpoints_to_fast.convert_slow_checkpoint_to_fast(tokenizer_name,checkpoint_name,dump_path,force_download)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/generation_logits_process.py----------------------------------------
A:transformers.generation_logits_process.scores->scores.masked_fill(banned_mask, -float('inf')).masked_fill(banned_mask, -float('inf'))
A:transformers.generation_logits_process.ranges->torch.arange(scores.shape[0])
A:transformers.generation_logits_process.score->torch.where(score < 0, score * self.penalty, score / self.penalty)
A:transformers.generation_logits_process.(sorted_logits, sorted_indices)->torch.sort(scores, descending=True)
A:transformers.generation_logits_process.cumulative_probs->torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)
A:transformers.generation_logits_process.sorted_indices_to_remove[..., 1:]->sorted_indices_to_remove[..., :-1].clone()
A:transformers.generation_logits_process.indices_to_remove->sorted_indices_to_remove.scatter(1, sorted_indices, sorted_indices_to_remove)
A:transformers.generation_logits_process.top_k->min(max(self.top_k, self.min_tokens_to_keep), scores.size(-1))
A:transformers.generation_logits_process.banned_batch_tokens->self._calc_banned_ngram_tokens(input_ids, num_batch_hypotheses, cur_len)
A:transformers.generation_logits_process.gen_tokens->prev_input_ids[idx].tolist()
A:transformers.generation_logits_process.prev_ngram_tuple->tuple(ngram[:-1])
A:transformers.generation_logits_process.ngram_idx->tuple(prev_input_ids[hypo_idx, start_idx:cur_len].tolist())
A:transformers.generation_logits_process.self.bad_words_ids->list(filter(lambda bad_token_seq: bad_token_seq != [eos_token_id], bad_words_ids))
A:transformers.generation_logits_process.banned_tokens->self._calc_banned_bad_words_ids(input_ids)
A:transformers.generation_logits_process.banned_mask->torch.sparse.LongTensor(banned_mask.t(), indices, scores.size()).to(scores.device).to_dense().bool()
A:transformers.generation_logits_process.indices->torch.ones(len(banned_mask))
A:transformers.generation_logits_process.mask->torch.full_like(scores, -math.inf)
A:transformers.generation_logits_process.group_end_idx->min(group_start_idx + self._num_sub_beams, self._num_beams)
A:transformers.generation_logits_process.token_frequency->torch.bincount(previous_group_tokens, minlength=vocab_size).to(scores.device)
transformers.HammingDiversityLogitsProcessor(self,diversity_penalty:float,num_beams:int,num_beam_groups:int)
transformers.LogitsProcessor(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.LogitsProcessorList(self,input_ids:torch.LongTensor,scores:torch.FloatTensor,**kwargs)
transformers.LogitsWarper(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.MinLengthLogitsProcessor(self,min_length:int,eos_token_id:int)
transformers.NoBadWordsLogitsProcessor(self,bad_words_ids:Iterable[Iterable[int]],eos_token_id:int)
transformers.NoBadWordsLogitsProcessor._calc_banned_bad_words_ids(self,prev_input_ids:Iterable[int])->Iterable[int]
transformers.NoBadWordsLogitsProcessor._set_scores_to_inf_for_banned_tokens(self,scores:torch.Tensor,banned_tokens:List[List[int]])->None
transformers.NoBadWordsLogitsProcessor._tokens_match(self,prev_tokens:torch.LongTensor,tokens:List[int])->bool
transformers.NoRepeatNGramLogitsProcessor(self,ngram_size:int)
transformers.NoRepeatNGramLogitsProcessor._calc_banned_ngram_tokens(self,prev_input_ids:torch.Tensor,num_hypos:int,cur_len:int)->List[Iterable[int]]
transformers.PrefixConstrainedLogitsProcessor(self,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]],num_beams:int)
transformers.RepetitionPenaltyLogitsProcessor(self,penalty:float)
transformers.TemperatureLogitsWarper(self,temperature:float)
transformers.TopKLogitsWarper(self,top_k:int,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)
transformers.TopPLogitsWarper(self,top_p:float,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)
transformers.generation_logits_process.HammingDiversityLogitsProcessor(self,diversity_penalty:float,num_beams:int,num_beam_groups:int)
transformers.generation_logits_process.HammingDiversityLogitsProcessor.__init__(self,diversity_penalty:float,num_beams:int,num_beam_groups:int)
transformers.generation_logits_process.LogitsProcessor(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.generation_logits_process.LogitsProcessor.__call__(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.generation_logits_process.LogitsProcessorList(self,input_ids:torch.LongTensor,scores:torch.FloatTensor,**kwargs)
transformers.generation_logits_process.LogitsProcessorList.__call__(self,input_ids:torch.LongTensor,scores:torch.FloatTensor,**kwargs)
transformers.generation_logits_process.LogitsWarper(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.generation_logits_process.LogitsWarper.__call__(self,input_ids:torch.LongTensor,scores:torch.FloatTensor)
transformers.generation_logits_process.MinLengthLogitsProcessor(self,min_length:int,eos_token_id:int)
transformers.generation_logits_process.MinLengthLogitsProcessor.__init__(self,min_length:int,eos_token_id:int)
transformers.generation_logits_process.NoBadWordsLogitsProcessor(self,bad_words_ids:Iterable[Iterable[int]],eos_token_id:int)
transformers.generation_logits_process.NoBadWordsLogitsProcessor.__init__(self,bad_words_ids:Iterable[Iterable[int]],eos_token_id:int)
transformers.generation_logits_process.NoBadWordsLogitsProcessor._calc_banned_bad_words_ids(self,prev_input_ids:Iterable[int])->Iterable[int]
transformers.generation_logits_process.NoBadWordsLogitsProcessor._set_scores_to_inf_for_banned_tokens(self,scores:torch.Tensor,banned_tokens:List[List[int]])->None
transformers.generation_logits_process.NoBadWordsLogitsProcessor._tokens_match(self,prev_tokens:torch.LongTensor,tokens:List[int])->bool
transformers.generation_logits_process.NoRepeatNGramLogitsProcessor(self,ngram_size:int)
transformers.generation_logits_process.NoRepeatNGramLogitsProcessor.__init__(self,ngram_size:int)
transformers.generation_logits_process.NoRepeatNGramLogitsProcessor._calc_banned_ngram_tokens(self,prev_input_ids:torch.Tensor,num_hypos:int,cur_len:int)->List[Iterable[int]]
transformers.generation_logits_process.PrefixConstrainedLogitsProcessor(self,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]],num_beams:int)
transformers.generation_logits_process.PrefixConstrainedLogitsProcessor.__init__(self,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]],num_beams:int)
transformers.generation_logits_process.RepetitionPenaltyLogitsProcessor(self,penalty:float)
transformers.generation_logits_process.RepetitionPenaltyLogitsProcessor.__init__(self,penalty:float)
transformers.generation_logits_process.TemperatureLogitsWarper(self,temperature:float)
transformers.generation_logits_process.TemperatureLogitsWarper.__init__(self,temperature:float)
transformers.generation_logits_process.TopKLogitsWarper(self,top_k:int,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)
transformers.generation_logits_process.TopKLogitsWarper.__init__(self,top_k:int,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)
transformers.generation_logits_process.TopPLogitsWarper(self,top_p:float,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)
transformers.generation_logits_process.TopPLogitsWarper.__init__(self,top_p:float,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/convert_graph_to_onnx.py----------------------------------------
A:transformers.convert_graph_to_onnx.ORT_QUANTIZE_MINIMUM_VERSION->parse('1.4.0')
A:transformers.convert_graph_to_onnx.ort_version->parse(onnxruntime.__version__)
A:transformers.convert_graph_to_onnx.tokens->load_graph_from_args(pipeline_name, framework, model, tokenizer).tokenizer('This is a sample output', return_tensors=framework)
A:transformers.convert_graph_to_onnx.outputs->outputs.to_tuple().to_tuple()
A:transformers.convert_graph_to_onnx.input_vars->list(tokens.keys())
A:transformers.convert_graph_to_onnx.dynamic_axes->dict(input_dynamic_axes, **output_dynamic_axes)
A:transformers.convert_graph_to_onnx.(input_names, output_names, dynamic_axes, tokens)->infer_shapes(nlp, 'tf')
A:transformers.convert_graph_to_onnx.(ordered_input_names, model_args)->ensure_valid_input(nlp.model, tokens, input_names)
A:transformers.convert_graph_to_onnx.onnx_model->onnx.load(onnx_model_path.as_posix())
A:transformers.convert_graph_to_onnx.nlp->load_graph_from_args(pipeline_name, framework, model, tokenizer)
A:transformers.convert_graph_to_onnx.opt_model_path->generate_identified_filename(onnx_model_path, '-optimized')
A:transformers.convert_graph_to_onnx.sess_option->SessionOptions()
A:transformers.convert_graph_to_onnx.sess_option.optimized_model_filepath->generate_identified_filename(onnx_model_path, '-optimized').as_posix()
A:transformers.convert_graph_to_onnx._->InferenceSession(path.as_posix(), onnx_options, providers=['CPUExecutionProvider'])
A:transformers.convert_graph_to_onnx.quantized_model->quantize(model=onnx_model, quantization_mode=QuantizationMode.IntegerOps, force_fusions=True, symmetric_weight=True)
A:transformers.convert_graph_to_onnx.quantized_model_path->generate_identified_filename(onnx_model_path, '-quantized')
A:transformers.convert_graph_to_onnx.onnx_options->SessionOptions()
A:transformers.convert_graph_to_onnx.parser->OnnxConverterArgumentParser()
A:transformers.convert_graph_to_onnx.args->OnnxConverterArgumentParser().parse_args()
A:transformers.convert_graph_to_onnx.args.output->Path(args.output).absolute()
A:transformers.convert_graph_to_onnx.args.optimized_output->optimize(args.output)
A:transformers.convert_graph_to_onnx.args.quantized_output->quantize(args.optimized_output)
transformers.convert_graph_to_onnx.OnnxConverterArgumentParser(self)
transformers.convert_graph_to_onnx.OnnxConverterArgumentParser.__init__(self)
transformers.convert_graph_to_onnx.check_onnxruntime_requirements(minimum_version:Version)
transformers.convert_graph_to_onnx.convert(framework:str,model:str,output:Path,opset:int,tokenizer:Optional[str]=None,use_external_format:bool=False,pipeline_name:str='feature-extraction')
transformers.convert_graph_to_onnx.convert_pytorch(nlp:Pipeline,opset:int,output:Path,use_external_format:bool)
transformers.convert_graph_to_onnx.convert_tensorflow(nlp:Pipeline,opset:int,output:Path)
transformers.convert_graph_to_onnx.ensure_valid_input(model,tokens,input_names)
transformers.convert_graph_to_onnx.generate_identified_filename(filename:Path,identifier:str)->Path
transformers.convert_graph_to_onnx.infer_shapes(nlp:Pipeline,framework:str)->Tuple[List[str], List[str], Dict, BatchEncoding]
transformers.convert_graph_to_onnx.load_graph_from_args(pipeline_name:str,framework:str,model:str,tokenizer:Optional[str]=None)->Pipeline
transformers.convert_graph_to_onnx.optimize(onnx_model_path:Path)->Path
transformers.convert_graph_to_onnx.quantize(onnx_model_path:Path)->Path
transformers.convert_graph_to_onnx.verify(path:Path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_outputs.py----------------------------------------
transformers.modeling_outputs.BaseModelOutput(ModelOutput)
transformers.modeling_outputs.BaseModelOutputWithCrossAttentions(ModelOutput)
transformers.modeling_outputs.BaseModelOutputWithPast(ModelOutput)
transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions(ModelOutput)
transformers.modeling_outputs.BaseModelOutputWithPooling(ModelOutput)
transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions(ModelOutput)
transformers.modeling_outputs.CausalLMOutput(ModelOutput)
transformers.modeling_outputs.CausalLMOutputWithCrossAttentions(ModelOutput)
transformers.modeling_outputs.CausalLMOutputWithPast(ModelOutput)
transformers.modeling_outputs.CausalLMOutputWithPastAndCrossAttentions(ModelOutput)
transformers.modeling_outputs.MaskedLMOutput(ModelOutput)
transformers.modeling_outputs.MultipleChoiceModelOutput(ModelOutput)
transformers.modeling_outputs.NextSentencePredictorOutput(ModelOutput)
transformers.modeling_outputs.QuestionAnsweringModelOutput(ModelOutput)
transformers.modeling_outputs.Seq2SeqLMOutput(ModelOutput)
transformers.modeling_outputs.Seq2SeqModelOutput(ModelOutput)
transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput(ModelOutput)
transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput(ModelOutput)
transformers.modeling_outputs.SequenceClassifierOutput(ModelOutput)
transformers.modeling_outputs.SequenceClassifierOutputWithPast(ModelOutput)
transformers.modeling_outputs.TokenClassifierOutput(ModelOutput)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/generation_beam_search.py----------------------------------------
A:transformers.generation_beam_search.self._done->torch.tensor([False for _ in range(batch_size)], dtype=torch.bool, device=self.device)
A:transformers.generation_beam_search.batch_size->len(self._beam_hyps)
A:transformers.generation_beam_search.next_beam_scores->torch.zeros((batch_size, self.group_size), dtype=next_scores.dtype, device=device)
A:transformers.generation_beam_search.next_beam_tokens->torch.zeros((batch_size, self.group_size), dtype=next_tokens.dtype, device=device)
A:transformers.generation_beam_search.next_beam_indices->torch.zeros((batch_size, self.group_size), dtype=next_indices.dtype, device=device)
A:transformers.generation_beam_search.final_score->final_beam_scores[batch_beam_idx].item()
A:transformers.generation_beam_search.sent_lengths->input_ids.new(batch_size * self.num_beam_hyps_to_keep)
A:transformers.generation_beam_search.sorted_hyps->sorted(beam_hyp.beams, key=lambda x: x[0])
A:transformers.generation_beam_search.sent_lengths[self.num_beam_hyps_to_keep * i + j]->len(best_hyp)
A:transformers.generation_beam_search.sent_max_len->min(sent_lengths.max().item() + 1, self.max_length)
A:transformers.generation_beam_search.sorted_next_scores->sorted([(s, idx) for (idx, (s, _)) in enumerate(self.beams)])
A:transformers.generation_beam_search.self.worst_score->min(score, self.worst_score)
transformers.BeamScorer(ABC)
transformers.BeamScorer.finalize(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,**kwargs)->torch.LongTensor
transformers.BeamScorer.process(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,**kwargs)->Tuple[torch.Tensor]
transformers.BeamSearchScorer(self,batch_size:int,max_length:int,num_beams:int,device:torch.device,length_penalty:Optional[float]=1.0,do_early_stopping:Optional[bool]=False,num_beam_hyps_to_keep:Optional[int]=1,num_beam_groups:Optional[int]=1)
transformers.BeamSearchScorer.finalize(self,input_ids:torch.LongTensor,final_beam_scores:torch.FloatTensor,final_beam_tokens:torch.LongTensor,final_beam_indices:torch.LongTensor,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None)->torch.LongTensor
transformers.BeamSearchScorer.is_done(self)->bool
transformers.BeamSearchScorer.process(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None)->Tuple[torch.Tensor]
transformers.generation_beam_search.BeamHypotheses(self,num_beams:int,max_length:int,length_penalty:float,early_stopping:bool)
transformers.generation_beam_search.BeamHypotheses.__init__(self,num_beams:int,max_length:int,length_penalty:float,early_stopping:bool)
transformers.generation_beam_search.BeamHypotheses.__len__(self)
transformers.generation_beam_search.BeamHypotheses.add(self,hyp:torch.LongTensor,sum_logprobs:float)
transformers.generation_beam_search.BeamHypotheses.is_done(self,best_sum_logprobs:float,cur_len:int)->bool
transformers.generation_beam_search.BeamScorer(ABC)
transformers.generation_beam_search.BeamScorer.finalize(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,**kwargs)->torch.LongTensor
transformers.generation_beam_search.BeamScorer.process(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,**kwargs)->Tuple[torch.Tensor]
transformers.generation_beam_search.BeamSearchScorer(self,batch_size:int,max_length:int,num_beams:int,device:torch.device,length_penalty:Optional[float]=1.0,do_early_stopping:Optional[bool]=False,num_beam_hyps_to_keep:Optional[int]=1,num_beam_groups:Optional[int]=1)
transformers.generation_beam_search.BeamSearchScorer.__init__(self,batch_size:int,max_length:int,num_beams:int,device:torch.device,length_penalty:Optional[float]=1.0,do_early_stopping:Optional[bool]=False,num_beam_hyps_to_keep:Optional[int]=1,num_beam_groups:Optional[int]=1)
transformers.generation_beam_search.BeamSearchScorer.finalize(self,input_ids:torch.LongTensor,final_beam_scores:torch.FloatTensor,final_beam_tokens:torch.LongTensor,final_beam_indices:torch.LongTensor,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None)->torch.LongTensor
transformers.generation_beam_search.BeamSearchScorer.is_done(self)->bool
transformers.generation_beam_search.BeamSearchScorer.process(self,input_ids:torch.LongTensor,next_scores:torch.FloatTensor,next_tokens:torch.LongTensor,next_indices:torch.LongTensor,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None)->Tuple[torch.Tensor]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/generation_utils.py----------------------------------------
A:transformers.generation_utils.logger->utils.logging.get_logger(__name__)
A:transformers.generation_utils.encoder->self.get_encoder()
A:transformers.generation_utils.decoder_start_token_id->self._get_decoder_start_token_id(decoder_start_token_id, bos_token_id)
A:transformers.generation_utils.expanded_return_idx->torch.arange(input_ids.shape[0]).view(-1, 1).repeat(1, expand_size).view(-1).to(input_ids.device)
A:transformers.generation_utils.input_ids->torch.cat([input_ids, current_tokens.unsqueeze(-1)], dim=-1)
A:transformers.generation_utils.model_kwargs['token_type_ids']->torch.cat([token_type_ids, token_type_ids[:, -1].unsqueeze(-1)], dim=-1)
A:transformers.generation_utils.model_kwargs['attention_mask']->self._prepare_attention_mask_for_generation(input_ids, pad_token_id, eos_token_id)
A:transformers.generation_utils.encoder_outputs['last_hidden_state']->encoder_outputs.last_hidden_state.index_select(0, expanded_return_idx)
A:transformers.generation_utils.unfinished_sequences->unfinished_sequences.mul((~is_eos_in_next_token).long()).mul((~is_eos_in_next_token).long())
A:transformers.generation_utils.sequence_lengths->sequence_lengths.masked_fill(is_sent_unfinished, cur_len).masked_fill(is_sent_unfinished, cur_len)
A:transformers.generation_utils.is_sent_unfinished->unfinished_sequences.mul((~is_eos_in_next_token).long()).mul((~is_eos_in_next_token).long()).mul(is_eos_in_next_token.long()).bool()
A:transformers.generation_utils.warpers->LogitsProcessorList()
A:transformers.generation_utils.processors->LogitsProcessorList()
A:transformers.generation_utils.model_kwargs->self._update_model_kwargs_for_generation(outputs, model_kwargs, is_encoder_decoder=self.config.is_encoder_decoder)
A:transformers.generation_utils.logits_processor->self._get_logits_processor(repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, min_length=min_length, eos_token_id=eos_token_id, prefix_allowed_tokens_fn=prefix_allowed_tokens_fn, num_beams=num_beams, num_beam_groups=num_beam_groups, diversity_penalty=diversity_penalty)
A:transformers.generation_utils.logits_warper->self._get_logits_warper(top_k=top_k, top_p=top_p, temperature=temperature, num_beams=num_beams)
A:transformers.generation_utils.(input_ids, model_kwargs)->self._expand_inputs_for_generation(input_ids, expand_size=num_beams, is_encoder_decoder=self.config.is_encoder_decoder, **model_kwargs)
A:transformers.generation_utils.beam_scorer->BeamSearchScorer(batch_size=batch_size, max_length=max_length, num_beams=num_beams, device=self.device, length_penalty=length_penalty, do_early_stopping=early_stopping)
A:transformers.generation_utils.diverse_beam_scorer->BeamSearchScorer(batch_size=batch_size, max_length=max_length, num_beams=num_beams, device=self.device, length_penalty=length_penalty, do_early_stopping=early_stopping, num_beam_hyps_to_keep=num_return_sequences, num_beam_groups=num_beam_groups)
A:transformers.generation_utils.(sequence_lengths, unfinished_sequences, cur_len)->self._init_sequence_length_for_generation(input_ids, max_length)
A:transformers.generation_utils.model_inputs->self.prepare_inputs_for_generation(input_ids, **model_kwargs)
A:transformers.generation_utils.outputs->self(**model_inputs, return_dict=True)
A:transformers.generation_utils.scores->logits_warper(input_ids, scores)
A:transformers.generation_utils.next_tokens->torch.gather(next_tokens, -1, _indices)
A:transformers.generation_utils.(sequence_lengths, unfinished_sequences)->self._update_seq_length_for_generation(sequence_lengths, unfinished_sequences, cur_len, next_tokens == eos_token_id)
A:transformers.generation_utils.probs->torch.nn.functional.softmax(next_token_scores, dim=-1)
A:transformers.generation_utils.batch_size->len(beam_scorer._beam_hyps)
A:transformers.generation_utils.beam_scores->beam_scores.view((batch_size * num_beams,)).view((batch_size * num_beams,))
A:transformers.generation_utils.next_token_logits->self.adjust_logits_during_generation(next_token_logits, cur_len=cur_len, max_length=max_length)
A:transformers.generation_utils.next_token_scores->next_token_scores.view(batch_size, group_size * vocab_size).view(batch_size, group_size * vocab_size)
A:transformers.generation_utils.(next_token_scores, next_tokens)->torch.topk(next_token_scores, 2 * group_size, dim=1, largest=True, sorted=True)
A:transformers.generation_utils.beam_outputs->BeamSearchScorer(batch_size=batch_size, max_length=max_length, num_beams=num_beams, device=self.device, length_penalty=length_penalty, do_early_stopping=early_stopping).process(group_input_ids, next_token_scores, next_tokens, next_indices, pad_token_id=pad_token_id, eos_token_id=eos_token_id)
A:transformers.generation_utils.model_kwargs['past']->self._reorder_cache(model_kwargs['past'], reordering_indices)
A:transformers.generation_utils.decoded->BeamSearchScorer(batch_size=batch_size, max_length=max_length, num_beams=num_beams, device=self.device, length_penalty=length_penalty, do_early_stopping=early_stopping).finalize(input_ids, beam_scores, next_tokens, next_indices, pad_token_id=pad_token_id, eos_token_id=eos_token_id)
A:transformers.generation_utils.(next_token_scores, _indices)->torch.sort(next_token_scores, descending=True, dim=1)
A:transformers.generation_utils.current_tokens->torch.zeros(batch_size * num_beams, dtype=input_ids.dtype, device=device)
A:transformers.generation_utils.reordering_indices->torch.zeros(batch_size * num_beams, dtype=torch.long, device=device)
A:transformers.generation_utils.group_end_idx->min(group_start_idx + num_sub_beams, num_beams)
A:transformers.generation_utils.group_input_ids->torch.cat([group_input_ids[beam_idx, :], beam_next_tokens.unsqueeze(-1)], dim=-1)
A:transformers.generation_utils.logits->TopPLogitsWarper(top_p=top_p, min_tokens_to_keep=min_tokens_to_keep)(None, logits)
transformers.generation_utils.GenerationMixin
transformers.generation_utils.GenerationMixin._expand_inputs_for_generation(input_ids:torch.LongTensor,expand_size:int=1,is_encoder_decoder:bool=False,attention_mask:torch.LongTensor=None,encoder_outputs:ModelOutput=None,**model_kwargs)->Tuple[torch.LongTensor, Dict[str, Any]]
transformers.generation_utils.GenerationMixin._get_decoder_start_token_id(self,decoder_start_token_id:int=None,bos_token_id:int=None)->int
transformers.generation_utils.GenerationMixin._get_logits_processor(self,repetition_penalty:float,no_repeat_ngram_size:int,bad_words_ids:List[List[int]],min_length:int,eos_token_id:int,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]],num_beams:int,num_beam_groups:int,diversity_penalty:float)->LogitsProcessorList
transformers.generation_utils.GenerationMixin._get_logits_warper(self,top_k:int=None,top_p:float=None,temperature:float=None,num_beams:int=None)->LogitsProcessorList
transformers.generation_utils.GenerationMixin._get_pad_token_id(self,pad_token_id:int=None,eos_token_id:int=None)->int
transformers.generation_utils.GenerationMixin._init_sequence_length_for_generation(input_ids:torch.LongTensor,max_length:int)->Tuple[torch.Tensor, torch.Tensor, int]
transformers.generation_utils.GenerationMixin._prepare_attention_mask_for_generation(self,input_ids:torch.Tensor,pad_token_id:int,eos_token_id:int)->torch.LongTensor
transformers.generation_utils.GenerationMixin._prepare_decoder_input_ids_for_generation(self,input_ids:torch.LongTensor,decoder_start_token_id:int=None,bos_token_id:int=None,**model_kwargs)->torch.LongTensor
transformers.generation_utils.GenerationMixin._prepare_encoder_decoder_kwargs_for_generation(self,input_ids:torch.LongTensor,model_kwargs)->Dict[str, Any]
transformers.generation_utils.GenerationMixin._prepare_input_ids_for_generation(self,bos_token_id:int)->torch.LongTensor
transformers.generation_utils.GenerationMixin._reorder_cache(past:Tuple[torch.Tensor],beam_idx:torch.Tensor)->Tuple[torch.Tensor]
transformers.generation_utils.GenerationMixin._update_model_kwargs_for_generation(outputs:ModelOutput,model_kwargs:Dict[str,Any],is_encoder_decoder:bool=False)->Dict[str, Any]
transformers.generation_utils.GenerationMixin._update_seq_length_for_generation(sequence_lengths:torch.LongTensor,unfinished_sequences:torch.LongTensor,cur_len:int,is_eos_in_next_token:torch.BoolTensor)->Tuple[torch.LongTensor, torch.LongTensor]
transformers.generation_utils.GenerationMixin.adjust_logits_during_generation(self,logits:torch.FloatTensor,**kwargs)->torch.FloatTensor
transformers.generation_utils.GenerationMixin.beam_sample(self,input_ids:torch.LongTensor,beam_scorer:BeamScorer,logits_processor:Optional[LogitsProcessorList]=None,logits_warper:Optional[LogitsProcessorList]=None,max_length:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,**model_kwargs)
transformers.generation_utils.GenerationMixin.beam_search(self,input_ids:torch.LongTensor,beam_scorer:BeamScorer,logits_processor:Optional[LogitsProcessorList]=None,max_length:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,**model_kwargs)
transformers.generation_utils.GenerationMixin.generate(self,input_ids:Optional[torch.LongTensor]=None,max_length:Optional[int]=None,min_length:Optional[int]=None,do_sample:Optional[bool]=None,early_stopping:Optional[bool]=None,num_beams:Optional[int]=None,temperature:Optional[float]=None,top_k:Optional[int]=None,top_p:Optional[float]=None,repetition_penalty:Optional[float]=None,bad_words_ids:Optional[Iterable[int]]=None,bos_token_id:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,length_penalty:Optional[float]=None,no_repeat_ngram_size:Optional[int]=None,num_return_sequences:Optional[int]=None,decoder_start_token_id:Optional[int]=None,use_cache:Optional[bool]=None,num_beam_groups:Optional[int]=None,diversity_penalty:Optional[float]=None,prefix_allowed_tokens_fn:Optional[Callable[[int,torch.Tensor],List[int]]]=None,**model_kwargs)->torch.LongTensor
transformers.generation_utils.GenerationMixin.greedy_search(self,input_ids:torch.LongTensor,logits_processor:Optional[LogitsProcessorList]=None,max_length:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,**model_kwargs)
transformers.generation_utils.GenerationMixin.group_beam_search(self,input_ids:torch.LongTensor,beam_scorer:BeamScorer,logits_processor:Optional[LogitsProcessorList]=None,max_length:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,**model_kwargs)
transformers.generation_utils.GenerationMixin.prepare_inputs_for_generation(self,input_ids:torch.LongTensor,**kwargs)->Dict[str, Any]
transformers.generation_utils.GenerationMixin.sample(self,input_ids:torch.LongTensor,logits_processor:Optional[LogitsProcessorList]=None,logits_warper:Optional[LogitsProcessorList]=None,max_length:Optional[int]=None,pad_token_id:Optional[int]=None,eos_token_id:Optional[int]=None,**model_kwargs)
transformers.generation_utils.top_k_top_p_filtering(logits:torch.FloatTensor,top_k:int=0,top_p:float=1.0,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)->torch.FloatTensor
transformers.top_k_top_p_filtering(logits:torch.FloatTensor,top_k:int=0,top_p:float=1.0,filter_value:float=-float('Inf'),min_tokens_to_keep:int=1)->torch.FloatTensor


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/tokenization_utils_fast.py----------------------------------------
A:transformers.tokenization_utils_fast.logger->utils.logging.get_logger(__name__)
A:transformers.tokenization_utils_fast.slow_tokenizer->self.slow_tokenizer_class(*args, **kwargs)
A:transformers.tokenization_utils_fast.fast_tokenizer_file->kwargs.pop('tokenizer_file', None)
A:transformers.tokenization_utils_fast.fast_tokenizer->convert_slow_tokenizer(slow_tokenizer)
A:transformers.tokenization_utils_fast.base_vocab->self._tokenizer.get_vocab(with_added_tokens=False)
A:transformers.tokenization_utils_fast.full_vocab->self._tokenizer.get_vocab(with_added_tokens=True)
A:transformers.tokenization_utils_fast.added_vocab->self.get_added_vocab()
A:transformers.tokenization_utils_fast.encoding_dict->defaultdict(list)
A:transformers.tokenization_utils_fast.index->int(index)
A:transformers.tokenization_utils_fast.encodings->self._tokenizer.encode_batch(batch_text_or_text_pairs, add_special_tokens=add_special_tokens, is_pretokenized=is_split_into_words)
A:transformers.tokenization_utils_fast.batched_output->BatchEncoding({key: value[0] if len(value) > 0 and isinstance(value[0], list) else value for (key, value) in batched_output.items()}, batched_output.encodings)
A:transformers.tokenization_utils_fast.text->self._tokenizer.decode(token_ids, skip_special_tokens=skip_special_tokens)
A:transformers.tokenization_utils_fast.clean_text->self.clean_up_tokenization(text)
A:transformers.tokenization_utils_fast.save_directory->str(save_directory)
A:transformers.tokenization_utils_fast.added_tokens_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + ADDED_TOKENS_FILE)
A:transformers.tokenization_utils_fast.out_str->json.dumps(added_vocab, ensure_ascii=False)
A:transformers.tokenization_utils_fast.vocab_files->self.save_vocabulary(save_directory, filename_prefix=filename_prefix)
A:transformers.tokenization_utils_fast.tokenizer_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + TOKENIZER_FILE)
transformers.PreTrainedTokenizerFast(self,*args,**kwargs)
transformers.PreTrainedTokenizerFast.__len__(self)->int
transformers.PreTrainedTokenizerFast._add_tokens(self,new_tokens:List[Union[str,AddedToken]],special_tokens=False)->int
transformers.PreTrainedTokenizerFast._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[str]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True)->BatchEncoding
transformers.PreTrainedTokenizerFast._convert_encoding(self,encoding:EncodingFast,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True)->Tuple[Dict[str, Any], List[EncodingFast]]
transformers.PreTrainedTokenizerFast._convert_id_to_token(self,index:int)->Optional[str]
transformers.PreTrainedTokenizerFast._convert_token_to_id_with_added_voc(self,token:str)->int
transformers.PreTrainedTokenizerFast._decode(self,token_ids:Union[int,List[int]],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.PreTrainedTokenizerFast._encode_plus(self,text:Union[TextInput,PreTokenizedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[bool]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.PreTrainedTokenizerFast._save_pretrained(self,save_directory:Union[str,os.PathLike],file_names:Tuple[str],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PreTrainedTokenizerFast.backend_tokenizer(self)->TokenizerFast
transformers.PreTrainedTokenizerFast.convert_ids_to_tokens(self,ids:Union[int,List[int]],skip_special_tokens:bool=False)->Union[str, List[str]]
transformers.PreTrainedTokenizerFast.convert_tokens_to_ids(self,tokens:Union[str,List[str]])->Union[int, List[int]]
transformers.PreTrainedTokenizerFast.convert_tokens_to_string(self,tokens:List[str])->str
transformers.PreTrainedTokenizerFast.decoder(self)->DecoderFast
transformers.PreTrainedTokenizerFast.get_added_vocab(self)->Dict[str, int]
transformers.PreTrainedTokenizerFast.get_vocab(self)->Dict[str, int]
transformers.PreTrainedTokenizerFast.is_fast(self)->bool
transformers.PreTrainedTokenizerFast.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.PreTrainedTokenizerFast.set_truncation_and_padding(self,padding_strategy:PaddingStrategy,truncation_strategy:TruncationStrategy,max_length:int,stride:int,pad_to_multiple_of:Optional[int])
transformers.PreTrainedTokenizerFast.tokenize(self,text:str,pair:Optional[str]=None,add_special_tokens:bool=False,**kwargs)->List[str]
transformers.PreTrainedTokenizerFast.vocab(self)->Dict[str, int]
transformers.PreTrainedTokenizerFast.vocab_size(self)->int
transformers.tokenization_utils_fast.PreTrainedTokenizerFast(self,*args,**kwargs)
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.__init__(self,*args,**kwargs)
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.__len__(self)->int
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._add_tokens(self,new_tokens:List[Union[str,AddedToken]],special_tokens=False)->int
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._batch_encode_plus(self,batch_text_or_text_pairs:Union[List[TextInput],List[TextInputPair],List[PreTokenizedInput],List[PreTokenizedInputPair]],add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[str]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True)->BatchEncoding
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._convert_encoding(self,encoding:EncodingFast,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True)->Tuple[Dict[str, Any], List[EncodingFast]]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._convert_id_to_token(self,index:int)->Optional[str]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._convert_token_to_id_with_added_voc(self,token:str)->int
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._decode(self,token_ids:Union[int,List[int]],skip_special_tokens:bool=False,clean_up_tokenization_spaces:bool=True,**kwargs)->str
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._encode_plus(self,text:Union[TextInput,PreTokenizedInput],text_pair:Optional[Union[TextInput,PreTokenizedInput]]=None,add_special_tokens:bool=True,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,truncation_strategy:TruncationStrategy=TruncationStrategy.DO_NOT_TRUNCATE,max_length:Optional[int]=None,stride:int=0,is_split_into_words:bool=False,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[bool]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.tokenization_utils_fast.PreTrainedTokenizerFast._save_pretrained(self,save_directory:Union[str,os.PathLike],file_names:Tuple[str],legacy_format:bool=True,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.backend_tokenizer(self)->TokenizerFast
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.convert_ids_to_tokens(self,ids:Union[int,List[int]],skip_special_tokens:bool=False)->Union[str, List[str]]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.convert_tokens_to_ids(self,tokens:Union[str,List[str]])->Union[int, List[int]]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.convert_tokens_to_string(self,tokens:List[str])->str
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.decoder(self)->DecoderFast
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.get_added_vocab(self)->Dict[str, int]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.get_vocab(self)->Dict[str, int]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.is_fast(self)->bool
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.num_special_tokens_to_add(self,pair:bool=False)->int
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.set_truncation_and_padding(self,padding_strategy:PaddingStrategy,truncation_strategy:TruncationStrategy,max_length:int,stride:int,pad_to_multiple_of:Optional[int])
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.tokenize(self,text:str,pair:Optional[str]=None,add_special_tokens:bool=False,**kwargs)->List[str]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.vocab(self)->Dict[str, int]
transformers.tokenization_utils_fast.PreTrainedTokenizerFast.vocab_size(self)->int


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/convert_slow_tokenizer.py----------------------------------------
A:transformers.convert_slow_tokenizer.self.sp->SentencePieceProcessor()
A:transformers.convert_slow_tokenizer.piece_id->self.vocab(proto).get(merge, None)
A:transformers.convert_slow_tokenizer.merges->list(ot.bpe_ranks.keys())
A:transformers.convert_slow_tokenizer.tokenizer->self.tokenizer(self.proto)
A:transformers.convert_slow_tokenizer.tokenizer.normalizer->self.normalizer(self.proto)
A:transformers.convert_slow_tokenizer.tokenizer.pre_tokenizer->tokenizers.pre_tokenizers.Sequence([pre_tokenizers.WhitespaceSplit(), pre_tokenizers.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)])
A:transformers.convert_slow_tokenizer.cls->str(self.original_tokenizer.cls_token)
A:transformers.convert_slow_tokenizer.sep->str(self.original_tokenizer.sep_token)
A:transformers.convert_slow_tokenizer.tokenizer.post_processor->tokenizers.processors.RobertaProcessing(sep=(ot.sep_token, ot.sep_token_id), cls=(ot.cls_token, ot.cls_token_id), add_prefix_space=ot.add_prefix_space, trim_offsets=True)
A:transformers.convert_slow_tokenizer.tokenizer.decoder->tokenizers.decoders.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)
A:transformers.convert_slow_tokenizer.m->utils.sentencepiece_model_pb2.ModelProto()
A:transformers.convert_slow_tokenizer.vocab->self.vocab(proto)
A:transformers.convert_slow_tokenizer.unk_id->self.unk_id(proto)
A:transformers.convert_slow_tokenizer.(vocab, merges)->SentencePieceExtractor(self.original_tokenizer.vocab_file).extract()
A:transformers.convert_slow_tokenizer.post_processor->self.post_processor()
transformers.convert_slow_tokenizer(transformer_tokenizer)->Tokenizer
transformers.convert_slow_tokenizer.AlbertConverter(SpmConverter)
transformers.convert_slow_tokenizer.AlbertConverter.normalizer(self,proto)
transformers.convert_slow_tokenizer.AlbertConverter.post_processor(self)
transformers.convert_slow_tokenizer.AlbertConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.BarthezConverter(SpmConverter)
transformers.convert_slow_tokenizer.BarthezConverter.post_processor(self)
transformers.convert_slow_tokenizer.BarthezConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.BertConverter(Converter)
transformers.convert_slow_tokenizer.BertConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.BertGenerationConverter(SpmConverter)
transformers.convert_slow_tokenizer.CamembertConverter(SpmConverter)
transformers.convert_slow_tokenizer.CamembertConverter.post_processor(self)
transformers.convert_slow_tokenizer.CamembertConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.CamembertConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.Converter(self,original_tokenizer)
transformers.convert_slow_tokenizer.Converter.__init__(self,original_tokenizer)
transformers.convert_slow_tokenizer.Converter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.FunnelConverter(Converter)
transformers.convert_slow_tokenizer.FunnelConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.GPT2Converter(Converter)
transformers.convert_slow_tokenizer.GPT2Converter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.HerbertConverter(Converter)
transformers.convert_slow_tokenizer.HerbertConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.MBartConverter(SpmConverter)
transformers.convert_slow_tokenizer.MBartConverter.post_processor(self)
transformers.convert_slow_tokenizer.MBartConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.MBartConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.OpenAIGPTConverter(Converter)
transformers.convert_slow_tokenizer.OpenAIGPTConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.PegasusConverter(SpmConverter)
transformers.convert_slow_tokenizer.PegasusConverter.post_processor(self)
transformers.convert_slow_tokenizer.PegasusConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.PegasusConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.ReformerConverter(SpmConverter)
transformers.convert_slow_tokenizer.RobertaConverter(Converter)
transformers.convert_slow_tokenizer.RobertaConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.SentencePieceExtractor(self,model:str)
transformers.convert_slow_tokenizer.SentencePieceExtractor.__init__(self,model:str)
transformers.convert_slow_tokenizer.SentencePieceExtractor.extract(self)->Tuple[Dict[str, int], List[Tuple]]
transformers.convert_slow_tokenizer.SpmConverter(self,*args)
transformers.convert_slow_tokenizer.SpmConverter.__init__(self,*args)
transformers.convert_slow_tokenizer.SpmConverter.converted(self)->Tokenizer
transformers.convert_slow_tokenizer.SpmConverter.normalizer(self,proto)
transformers.convert_slow_tokenizer.SpmConverter.post_processor(self)
transformers.convert_slow_tokenizer.SpmConverter.tokenizer(self,proto)
transformers.convert_slow_tokenizer.SpmConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.SpmConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.T5Converter(SpmConverter)
transformers.convert_slow_tokenizer.T5Converter.post_processor(self)
transformers.convert_slow_tokenizer.T5Converter.vocab(self,proto)
transformers.convert_slow_tokenizer.XLMRobertaConverter(SpmConverter)
transformers.convert_slow_tokenizer.XLMRobertaConverter.post_processor(self)
transformers.convert_slow_tokenizer.XLMRobertaConverter.unk_id(self,proto)
transformers.convert_slow_tokenizer.XLMRobertaConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.XLNetConverter(SpmConverter)
transformers.convert_slow_tokenizer.XLNetConverter.normalizer(self,proto)
transformers.convert_slow_tokenizer.XLNetConverter.post_processor(self)
transformers.convert_slow_tokenizer.XLNetConverter.vocab(self,proto)
transformers.convert_slow_tokenizer.check_number_comma(piece:str)->bool
transformers.convert_slow_tokenizer.convert_slow_tokenizer(transformer_tokenizer)->Tokenizer


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/__init__.py----------------------------------------
A:transformers.__init__.logger->utils.logging.get_logger(__name__)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/convert_pytorch_checkpoint_to_tf2.py----------------------------------------
A:transformers.convert_pytorch_checkpoint_to_tf2.config_file->cached_path(config_shortcut_name, force_download=not use_cached_models)
A:transformers.convert_pytorch_checkpoint_to_tf2.config->config_class.from_json_file(config_file)
A:transformers.convert_pytorch_checkpoint_to_tf2.tf_model->load_pytorch_checkpoint_in_tf2_model(tf_model, pytorch_checkpoint_path)
A:transformers.convert_pytorch_checkpoint_to_tf2.pytorch_checkpoint_url->hf_bucket_url(pytorch_checkpoint_path, filename=WEIGHTS_NAME)
A:transformers.convert_pytorch_checkpoint_to_tf2.pytorch_checkpoint_path->cached_path(pytorch_checkpoint_url, force_download=not use_cached_models)
A:transformers.convert_pytorch_checkpoint_to_tf2.tfo->tf_model(tf_model.dummy_inputs, training=False)
A:transformers.convert_pytorch_checkpoint_to_tf2.state_dict->torch.load(pytorch_checkpoint_path, map_location='cpu')
A:transformers.convert_pytorch_checkpoint_to_tf2.pt_model->pt_model_class.from_pretrained(pretrained_model_name_or_path=None, config=config, state_dict=state_dict)
A:transformers.convert_pytorch_checkpoint_to_tf2.pto->pt_model(**pt_model.dummy_inputs)
A:transformers.convert_pytorch_checkpoint_to_tf2.np_pt->pto[0].numpy()
A:transformers.convert_pytorch_checkpoint_to_tf2.np_tf->tfo[0].numpy()
A:transformers.convert_pytorch_checkpoint_to_tf2.diff->numpy.amax(np.abs(np_pt - np_tf))
A:transformers.convert_pytorch_checkpoint_to_tf2.model_types->list(MODEL_CLASSES.keys())
A:transformers.convert_pytorch_checkpoint_to_tf2.model_shortcut_names_or_path->list(aws_model_maps.keys())
A:transformers.convert_pytorch_checkpoint_to_tf2.model_file->cached_path(model_shortcut_name, force_download=not use_cached_models)
A:transformers.convert_pytorch_checkpoint_to_tf2.parser->argparse.ArgumentParser()
A:transformers.convert_pytorch_checkpoint_to_tf2.args->argparse.ArgumentParser().parse_args()
transformers.convert_pytorch_checkpoint_to_tf2.convert_all_pt_checkpoints_to_tf(args_model_type,tf_dump_path,model_shortcut_names_or_path=None,config_shortcut_names_or_path=None,compare_with_pt_model=False,use_cached_models=False,remove_cached_files=False,only_convert_finetuned_models=False)
transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf(model_type,pytorch_checkpoint_path,config_file,tf_dump_path,compare_with_pt_model=False,use_cached_models=True)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/training_args_tf.py----------------------------------------
A:transformers.training_args_tf.logger->utils.logging.get_logger(__name__)
A:transformers.training_args_tf.gpus->tensorflow.config.list_physical_devices('GPU')
A:transformers.training_args_tf.policy->tensorflow.keras.mixed_precision.experimental.Policy('mixed_bfloat16')
A:transformers.training_args_tf.strategy->tensorflow.distribute.MirroredStrategy()
A:transformers.training_args_tf.tpu->tensorflow.distribute.cluster_resolver.TPUClusterResolver()
transformers.TFTrainingArguments(TrainingArguments)
transformers.TFTrainingArguments._setup_strategy(self)->Tuple['tf.distribute.Strategy', int]
transformers.TFTrainingArguments.eval_batch_size(self)->int
transformers.TFTrainingArguments.n_gpu(self)->int
transformers.TFTrainingArguments.n_replicas(self)->int
transformers.TFTrainingArguments.strategy(self)->'tf.distribute.Strategy'
transformers.TFTrainingArguments.train_batch_size(self)->int
transformers.training_args_tf.TFTrainingArguments(TrainingArguments)
transformers.training_args_tf.TFTrainingArguments._setup_strategy(self)->Tuple['tf.distribute.Strategy', int]
transformers.training_args_tf.TFTrainingArguments.eval_batch_size(self)->int
transformers.training_args_tf.TFTrainingArguments.n_gpu(self)->int
transformers.training_args_tf.TFTrainingArguments.n_replicas(self)->int
transformers.training_args_tf.TFTrainingArguments.strategy(self)->'tf.distribute.Strategy'
transformers.training_args_tf.TFTrainingArguments.train_batch_size(self)->int


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/trainer_tf.py----------------------------------------
A:transformers.trainer_tf.logger->utils.logging.get_logger(__name__)
A:transformers.trainer_tf.self.gradient_accumulator->GradientAccumulator()
A:transformers.trainer_tf.self.tb_writer->tensorflow.summary.create_file_writer(self.args.logging_dir)
A:transformers.trainer_tf.self.num_train_examples->tensorflow.data.experimental.cardinality(self.train_dataset).numpy()
A:transformers.trainer_tf.ds->test_dataset.repeat().batch(self.args.eval_batch_size, drop_remainder=self.args.dataloader_drop_last).prefetch(tf.data.experimental.AUTOTUNE)
A:transformers.trainer_tf.num_examples->tensorflow.data.experimental.cardinality(test_dataset).numpy()
A:transformers.trainer_tf.steps->approx(num_examples / self.args.eval_batch_size)
A:transformers.trainer_tf.(self.optimizer, self.lr_scheduler)->create_optimizer(self.args.learning_rate, num_training_steps, self.args.warmup_steps, adam_beta1=self.args.adam_beta1, adam_beta2=self.args.adam_beta2, adam_epsilon=self.args.adam_epsilon, weight_decay_rate=self.args.weight_decay, power=self.args.poly_power)
A:transformers.trainer_tf.comet_mode->os.getenv('COMET_MODE', 'ONLINE').upper()
A:transformers.trainer_tf.experiment->comet_ml.config.get_global_experiment()
A:transformers.trainer_tf.args['offline_directory']->os.getenv('COMET_OFFLINE_DIRECTORY', './')
A:transformers.trainer_tf.self.eval_loss->tensorflow.keras.metrics.Sum()
A:transformers.trainer_tf.logits->self.args.strategy.run(self.prediction_step, inputs)
A:transformers.trainer_tf.preds->numpy.append(preds, logits.numpy(), axis=0)
A:transformers.trainer_tf.label_ids->numpy.append(label_ids, labels.numpy(), axis=0)
A:transformers.trainer_tf.metrics->self.compute_metrics(EvalPrediction(predictions=preds, label_ids=label_ids))
A:transformers.trainer_tf.metrics[f'eval_{key}']->self.compute_metrics(EvalPrediction(predictions=preds, label_ids=label_ids)).pop(key)
A:transformers.trainer_tf.(eval_ds, steps, num_examples)->self.get_eval_tfdataset(eval_dataset)
A:transformers.trainer_tf.output->self.prediction_loop(eval_ds, steps, num_examples, description='Evaluation')
A:transformers.trainer_tf.(per_example_loss, logits)->self.run_model(features, labels, False)
A:transformers.trainer_tf.nb_instances_in_batch->self._compute_nb_instances(batch)
A:transformers.trainer_tf.inputs->self._get_step_inputs(batch, nb_instances_in_batch)
A:transformers.trainer_tf.train_ds->self.get_train_tfdataset()
A:transformers.trainer_tf.num_update_steps_per_epoch->max(num_update_steps_per_epoch, 1)
A:transformers.trainer_tf.epochs->float(epochs)
A:transformers.trainer_tf.folder->os.path.join(self.args.output_dir, PREFIX_CHECKPOINT_DIR)
A:transformers.trainer_tf.ckpt->tensorflow.train.Checkpoint(optimizer=self.optimizer, model=self.model)
A:transformers.trainer_tf.self.model.ckpt_manager->tensorflow.train.CheckpointManager(ckpt, folder, max_to_keep=self.args.save_total_limit)
A:transformers.trainer_tf.self.global_step->iterations.numpy()
A:transformers.trainer_tf.self.train_loss->tensorflow.keras.metrics.Sum()
A:transformers.trainer_tf.start_time->datetime.datetime.now()
A:transformers.trainer_tf.logs['loss']->training_loss.numpy()
A:transformers.trainer_tf.logs['learning_rate']->self.lr_scheduler(self.global_step).numpy()
A:transformers.trainer_tf.ckpt_save_path->self.model.ckpt_manager.save()
A:transformers.trainer_tf.end_time->datetime.datetime.now()
A:transformers.trainer_tf.(per_example_loss, _)->self.run_model(features, labels, True)
A:transformers.trainer_tf.gradients->self.training_step(features, labels, nb_instances_in_global_batch)
A:transformers.trainer_tf.labels->tensorflow.concat(labels.values, axis=0)
A:transformers.trainer_tf.nb_instances->PerReplica([nb_instances] * len(labels.values))
A:transformers.trainer_tf.(test_ds, steps, num_examples)->self.get_test_tfdataset(test_dataset)
transformers.TFTrainer(self,model:TFPreTrainedModel,args:TFTrainingArguments,train_dataset:Optional[tf.data.Dataset]=None,eval_dataset:Optional[tf.data.Dataset]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,tb_writer:Optional[tf.summary.SummaryWriter]=None,optimizers:Tuple[tf.keras.optimizers.Optimizer,tf.keras.optimizers.schedules.LearningRateSchedule]=(None,None))
transformers.TFTrainer._compute_nb_instances(batch)
transformers.TFTrainer._get_step_inputs(batch,nb_instances)
transformers.TFTrainer.apply_gradients(self,features,labels,nb_instances_in_global_batch)
transformers.TFTrainer.create_optimizer_and_scheduler(self,num_training_steps:int)
transformers.TFTrainer.distributed_prediction_steps(self,batch)
transformers.TFTrainer.distributed_training_steps(self,batch)
transformers.TFTrainer.evaluate(self,eval_dataset:Optional[tf.data.Dataset]=None)->Dict[str, float]
transformers.TFTrainer.get_eval_tfdataset(self,eval_dataset:Optional[tf.data.Dataset]=None)->tf.data.Dataset
transformers.TFTrainer.get_test_tfdataset(self,test_dataset:tf.data.Dataset)->tf.data.Dataset
transformers.TFTrainer.get_train_tfdataset(self)->tf.data.Dataset
transformers.TFTrainer.log(self,logs:Dict[str,float])->None
transformers.TFTrainer.predict(self,test_dataset:tf.data.Dataset)->PredictionOutput
transformers.TFTrainer.prediction_loop(self,dataset:tf.data.Dataset,steps:int,num_examples:int,description:str,prediction_loss_only:Optional[bool]=None)->PredictionOutput
transformers.TFTrainer.prediction_step(self,features:tf.Tensor,labels:tf.Tensor,nb_instances_in_global_batch:tf.Tensor)->tf.Tensor
transformers.TFTrainer.run_model(self,features,labels,training)
transformers.TFTrainer.save_model(self,output_dir:Optional[str]=None)
transformers.TFTrainer.setup_comet(self)
transformers.TFTrainer.setup_wandb(self)
transformers.TFTrainer.train(self)->None
transformers.TFTrainer.training_step(self,features,labels,nb_instances_in_global_batch)
transformers.trainer_tf.TFTrainer(self,model:TFPreTrainedModel,args:TFTrainingArguments,train_dataset:Optional[tf.data.Dataset]=None,eval_dataset:Optional[tf.data.Dataset]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,tb_writer:Optional[tf.summary.SummaryWriter]=None,optimizers:Tuple[tf.keras.optimizers.Optimizer,tf.keras.optimizers.schedules.LearningRateSchedule]=(None,None))
transformers.trainer_tf.TFTrainer.__init__(self,model:TFPreTrainedModel,args:TFTrainingArguments,train_dataset:Optional[tf.data.Dataset]=None,eval_dataset:Optional[tf.data.Dataset]=None,compute_metrics:Optional[Callable[[EvalPrediction],Dict]]=None,tb_writer:Optional[tf.summary.SummaryWriter]=None,optimizers:Tuple[tf.keras.optimizers.Optimizer,tf.keras.optimizers.schedules.LearningRateSchedule]=(None,None))
transformers.trainer_tf.TFTrainer._compute_nb_instances(batch)
transformers.trainer_tf.TFTrainer._get_step_inputs(batch,nb_instances)
transformers.trainer_tf.TFTrainer.apply_gradients(self,features,labels,nb_instances_in_global_batch)
transformers.trainer_tf.TFTrainer.create_optimizer_and_scheduler(self,num_training_steps:int)
transformers.trainer_tf.TFTrainer.distributed_prediction_steps(self,batch)
transformers.trainer_tf.TFTrainer.distributed_training_steps(self,batch)
transformers.trainer_tf.TFTrainer.evaluate(self,eval_dataset:Optional[tf.data.Dataset]=None)->Dict[str, float]
transformers.trainer_tf.TFTrainer.get_eval_tfdataset(self,eval_dataset:Optional[tf.data.Dataset]=None)->tf.data.Dataset
transformers.trainer_tf.TFTrainer.get_test_tfdataset(self,test_dataset:tf.data.Dataset)->tf.data.Dataset
transformers.trainer_tf.TFTrainer.get_train_tfdataset(self)->tf.data.Dataset
transformers.trainer_tf.TFTrainer.log(self,logs:Dict[str,float])->None
transformers.trainer_tf.TFTrainer.predict(self,test_dataset:tf.data.Dataset)->PredictionOutput
transformers.trainer_tf.TFTrainer.prediction_loop(self,dataset:tf.data.Dataset,steps:int,num_examples:int,description:str,prediction_loss_only:Optional[bool]=None)->PredictionOutput
transformers.trainer_tf.TFTrainer.prediction_step(self,features:tf.Tensor,labels:tf.Tensor,nb_instances_in_global_batch:tf.Tensor)->tf.Tensor
transformers.trainer_tf.TFTrainer.run_model(self,features,labels,training)
transformers.trainer_tf.TFTrainer.save_model(self,output_dir:Optional[str]=None)
transformers.trainer_tf.TFTrainer.setup_comet(self)
transformers.trainer_tf.TFTrainer.setup_wandb(self)
transformers.trainer_tf.TFTrainer.train(self)->None
transformers.trainer_tf.TFTrainer.training_step(self,features,labels,nb_instances_in_global_batch)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/dependency_versions_table.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/trainer_pt_utils.py----------------------------------------
A:transformers.trainer_pt_utils.logger->utils.logging.get_logger(__name__)
A:transformers.trainer_pt_utils.result->numpy.full_like(arrays, padding_index, shape=(arrays.shape[0], new_seq_length) + arrays.shape[2:])
A:transformers.trainer_pt_utils.concat->torch.cat(output_tensors, dim=0)
A:transformers.trainer_pt_utils.tensorized_scalar->torch.tensor(scalars).cuda()
A:transformers.trainer_pt_utils.num_replicas->torch.distributed.get_world_size()
A:transformers.trainer_pt_utils.rank->torch.distributed.get_rank()
A:transformers.trainer_pt_utils.self.num_samples->int(math.ceil(len(self.dataset) * 1.0 / self.num_replicas))
A:transformers.trainer_pt_utils.indices->list(range(len(self.dataset)))
A:transformers.trainer_pt_utils.self._storage->nested_expand_like(self._storage, arrays_shape[1], padding_index=self.padding_index)
A:transformers.trainer_pt_utils.self._offsets->list(range(0, self.total_samples, self.process_length))
A:transformers.trainer_pt_utils.storage_shape->_get_first_shape(self._storage)
A:transformers.trainer_pt_utils.arrays_shape->_get_first_shape(arrays)
A:transformers.trainer_pt_utils.slice_len->self._nested_set_tensors(x, y)
transformers.torch_distributed_zero_first(local_rank:int)
transformers.trainer_pt_utils.DistributedTensorGatherer(self,world_size,num_samples,make_multiple_of=None,padding_index=-100)
transformers.trainer_pt_utils.DistributedTensorGatherer.__init__(self,world_size,num_samples,make_multiple_of=None,padding_index=-100)
transformers.trainer_pt_utils.DistributedTensorGatherer._nested_set_tensors(self,storage,arrays)
transformers.trainer_pt_utils.DistributedTensorGatherer.add_arrays(self,arrays)
transformers.trainer_pt_utils.DistributedTensorGatherer.finalize(self)
transformers.trainer_pt_utils.SequentialDistributedSampler(self,dataset,num_replicas=None,rank=None)
transformers.trainer_pt_utils.SequentialDistributedSampler.__init__(self,dataset,num_replicas=None,rank=None)
transformers.trainer_pt_utils.SequentialDistributedSampler.__iter__(self)
transformers.trainer_pt_utils.SequentialDistributedSampler.__len__(self)
transformers.trainer_pt_utils._get_first_shape(arrays)
transformers.trainer_pt_utils.distributed_broadcast_scalars(scalars:List[Union[int,float]],num_total_examples:Optional[int]=None)->torch.Tensor
transformers.trainer_pt_utils.distributed_concat(tensor:'torch.Tensor',num_total_examples:Optional[int]=None)->torch.Tensor
transformers.trainer_pt_utils.get_tpu_sampler(dataset:torch.utils.data.dataset.Dataset)
transformers.trainer_pt_utils.nested_concat(tensors,new_tensors,padding_index=-100)
transformers.trainer_pt_utils.nested_detach(tensors)
transformers.trainer_pt_utils.nested_expand_like(arrays,new_seq_length,padding_index=-100)
transformers.trainer_pt_utils.nested_new_like(arrays,num_samples,padding_index=-100)
transformers.trainer_pt_utils.nested_numpify(tensors)
transformers.trainer_pt_utils.nested_truncate(tensors,limit)
transformers.trainer_pt_utils.nested_xla_mesh_reduce(tensors,name)
transformers.trainer_pt_utils.numpy_pad_and_concatenate(array1,array2,padding_index=-100)
transformers.trainer_pt_utils.reissue_pt_warnings(caught_warnings)
transformers.trainer_pt_utils.torch_distributed_zero_first(local_rank:int)
transformers.trainer_pt_utils.torch_pad_and_concatenate(tensor1,tensor2,padding_index=-100)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_flax_utils.py----------------------------------------
A:transformers.modeling_flax_utils.logger->utils.logging.get_logger(__name__)
A:transformers.modeling_flax_utils.self.key->PRNGKey(seed)
A:transformers.modeling_flax_utils.random_params->self.init(self.key, input_shape)
A:transformers.modeling_flax_utils.self._required_params->set(flatten_dict(unfreeze(random_params)).keys())
A:transformers.modeling_flax_utils.params->unfreeze(params)
A:transformers.modeling_flax_utils.param_keys->set(flatten_dict(params).keys())
A:transformers.modeling_flax_utils.self._params->freeze(params)
A:transformers.modeling_flax_utils.config->kwargs.pop('config', None)
A:transformers.modeling_flax_utils.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.modeling_flax_utils.from_pt->kwargs.pop('from_pt', False)
A:transformers.modeling_flax_utils.force_download->kwargs.pop('force_download', False)
A:transformers.modeling_flax_utils.resume_download->kwargs.pop('resume_download', False)
A:transformers.modeling_flax_utils.proxies->kwargs.pop('proxies', None)
A:transformers.modeling_flax_utils.local_files_only->kwargs.pop('local_files_only', False)
A:transformers.modeling_flax_utils.use_auth_token->kwargs.pop('use_auth_token', None)
A:transformers.modeling_flax_utils.revision->kwargs.pop('revision', None)
A:transformers.modeling_flax_utils.(config, model_kwargs)->cls.config_class.from_pretrained(config_path, *model_args, cache_dir=cache_dir, return_unused_kwargs=True, force_download=force_download, resume_download=resume_download, proxies=proxies, local_files_only=local_files_only, use_auth_token=use_auth_token, revision=revision, **kwargs)
A:transformers.modeling_flax_utils.archive_file->hf_bucket_url(pretrained_model_name_or_path, filename=WEIGHTS_NAME if from_pt else FLAX_WEIGHTS_NAME, revision=revision)
A:transformers.modeling_flax_utils.resolved_archive_file->cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)
A:transformers.modeling_flax_utils.state->unflatten_dict({tuple(k.split('.')): v for (k, v) in state.items()})
A:transformers.modeling_flax_utils.model->cls(config, *model_args, **model_kwargs)
A:transformers.modeling_flax_utils.random_state->flatten_dict(unfreeze(model.params))
A:transformers.modeling_flax_utils.model.params->unflatten_dict(state)
A:transformers.modeling_flax_utils.save_directory->os.path.abspath(save_directory)
A:transformers.modeling_flax_utils.model_bytes->to_bytes(self.params)
transformers.FlaxPreTrainedModel(self,config:PretrainedConfig,module:nn.Module,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32)
transformers.FlaxPreTrainedModel.config(self)->PretrainedConfig
transformers.FlaxPreTrainedModel.convert_from_pytorch(pt_state:Dict,config:PretrainedConfig)->Dict
transformers.FlaxPreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],dtype:jnp.dtype=jnp.float32,*model_args,**kwargs)
transformers.FlaxPreTrainedModel.init(self,rng:jax.random.PRNGKey,input_shape:Tuple)->Dict
transformers.FlaxPreTrainedModel.module(self)->nn.Module
transformers.FlaxPreTrainedModel.params(self)->Union[Dict, FrozenDict]
transformers.FlaxPreTrainedModel.params(self,params:Union[Dict,FrozenDict])
transformers.FlaxPreTrainedModel.required_params(self)->Set
transformers.FlaxPreTrainedModel.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.modeling_flax_utils.FlaxPreTrainedModel(self,config:PretrainedConfig,module:nn.Module,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32)
transformers.modeling_flax_utils.FlaxPreTrainedModel.__init__(self,config:PretrainedConfig,module:nn.Module,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32)
transformers.modeling_flax_utils.FlaxPreTrainedModel.config(self)->PretrainedConfig
transformers.modeling_flax_utils.FlaxPreTrainedModel.convert_from_pytorch(pt_state:Dict,config:PretrainedConfig)->Dict
transformers.modeling_flax_utils.FlaxPreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path:Union[str,os.PathLike],dtype:jnp.dtype=jnp.float32,*model_args,**kwargs)
transformers.modeling_flax_utils.FlaxPreTrainedModel.init(self,rng:jax.random.PRNGKey,input_shape:Tuple)->Dict
transformers.modeling_flax_utils.FlaxPreTrainedModel.module(self)->nn.Module
transformers.modeling_flax_utils.FlaxPreTrainedModel.params(self)->Union[Dict, FrozenDict]
transformers.modeling_flax_utils.FlaxPreTrainedModel.params(self,params:Union[Dict,FrozenDict])
transformers.modeling_flax_utils.FlaxPreTrainedModel.required_params(self)->Set
transformers.modeling_flax_utils.FlaxPreTrainedModel.save_pretrained(self,save_directory:Union[str,os.PathLike])
transformers.modeling_flax_utils.convert_state_dict_from_pt(model_class:ABC,state:Dict,config:PretrainedConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/modeling_tf_utils.py----------------------------------------
A:transformers.modeling_tf_utils.logger->utils.logging.get_logger(__name__)
A:transformers.modeling_tf_utils.config_class->getattr(cls, 'config_class', None)
A:transformers.modeling_tf_utils.config->kwargs.pop('config', None)
A:transformers.modeling_tf_utils.cfg->super(cls, self).get_config()
A:transformers.modeling_tf_utils.cfg['config']->self._config.to_dict()
A:transformers.modeling_tf_utils.cls->tensorflow.keras.utils.register_keras_serializable()(cls)
A:transformers.modeling_tf_utils.loss_fn->tensorflow.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)
A:transformers.modeling_tf_utils.active_loss->tensorflow.not_equal(tf.reshape(labels, (-1,)), -100)
A:transformers.modeling_tf_utils.reduced_logits->tensorflow.boolean_mask(tf.reshape(logits, (-1, shape_list(logits)[2])), active_loss)
A:transformers.modeling_tf_utils.labels->tensorflow.boolean_mask(tf.reshape(labels, (-1,)), active_loss)
A:transformers.modeling_tf_utils.start_loss->loss_fn(labels['start_position'], logits[0])
A:transformers.modeling_tf_utils.end_loss->loss_fn(labels['end_position'], logits[1])
A:transformers.modeling_tf_utils.next_sentence_active_loss->tensorflow.not_equal(tf.reshape(labels, (-1,)), -100)
A:transformers.modeling_tf_utils.next_sentence_reduced_logits->tensorflow.boolean_mask(tf.reshape(logits, (-1, 2)), next_sentence_active_loss)
A:transformers.modeling_tf_utils.next_sentence_label->tensorflow.boolean_mask(tf.reshape(labels, (-1,)), next_sentence_active_loss)
A:transformers.modeling_tf_utils.signature->dict(inspect.signature(func).parameters)
A:transformers.modeling_tf_utils.parameter_names->list(signature.keys())
A:transformers.modeling_tf_utils.output['input_ids']->input_ids.pop('inputs')
A:transformers.modeling_tf_utils.output['past_key_values']->input_ids.pop('decoder_cached_states')
A:transformers.modeling_tf_utils.output[name]->kwargs.pop(name, signature[name].default)
A:transformers.modeling_tf_utils.saved_h5_model_layers_name->set(hdf5_format.load_attributes_from_hdf5_group(f, 'layer_names'))
A:transformers.modeling_tf_utils.missing_layers->list(set([layer.name for layer in model.layers]) - saved_h5_model_layers_name)
A:transformers.modeling_tf_utils.unexpected_layers->list(saved_h5_model_layers_name - set([layer.name for layer in model.layers]))
A:transformers.modeling_tf_utils.saved_weight_names_set->set()
A:transformers.modeling_tf_utils.symbolic_weights_names->set()
A:transformers.modeling_tf_utils.name->'/'.join(weight_name.split('/')[1:])
A:transformers.modeling_tf_utils.saved_weights[name]->numpy.asarray(h5_layer_object[weight_name])
A:transformers.modeling_tf_utils.symbolic_weight_name->'/'.join(symbolic_weight.name.split('/')[1:])
A:transformers.modeling_tf_utils.saved_weight_value->saved_weights.get(symbolic_weight_name, None)
A:transformers.modeling_tf_utils.array->numpy.reshape(saved_weight_value, K.int_shape(symbolic_weight))
A:transformers.modeling_tf_utils.base_model->getattr(self, self.base_model_prefix, self)
A:transformers.modeling_tf_utils.model_embeds->self._resize_token_embeddings(new_num_tokens)
A:transformers.modeling_tf_utils.old_embeddings->getattr(self, self.base_model_prefix, self).get_input_embeddings()
A:transformers.modeling_tf_utils.new_embeddings->self.add_weight(name=name, shape=[new_num_tokens, old_embedding_dim], initializer=get_initializer(init_range), dtype=tf.float32)
A:transformers.modeling_tf_utils.word_embeddings->self._get_word_embeddings(old_embeddings)
A:transformers.modeling_tf_utils.bias_layer->self.get_output_layer_with_bias()
A:transformers.modeling_tf_utils.init_range->getattr(self.config, 'initializer_range', 0.02)
A:transformers.modeling_tf_utils.init_weights->numpy.zeros((new_num_tokens, old_embedding_dim))
A:transformers.modeling_tf_utils.num_tokens_to_copy->min(old_num_tokens, new_num_tokens)
A:transformers.modeling_tf_utils.init_bias->numpy.zeros((new_num_tokens,))
A:transformers.modeling_tf_utils.bias_layer.bias->self.add_weight(shape=(new_num_tokens,), initializer='zeros', trainable=True, name=self.get_prefix_bias_name() + '/bias')
A:transformers.modeling_tf_utils.output_embeddings->self.get_output_embeddings()
A:transformers.modeling_tf_utils.output_embeddings.decoder->self.add_weight(shape=(new_num_tokens, old_embedding_dim), initializer='zeros', trainable=True, name=self.get_prefix_bias_name() + '/decoder/weight')
A:transformers.modeling_tf_utils.output_model_file->os.path.join(save_directory, TF2_WEIGHTS_NAME)
A:transformers.modeling_tf_utils.cache_dir->kwargs.pop('cache_dir', None)
A:transformers.modeling_tf_utils.from_pt->kwargs.pop('from_pt', False)
A:transformers.modeling_tf_utils.force_download->kwargs.pop('force_download', False)
A:transformers.modeling_tf_utils.resume_download->kwargs.pop('resume_download', False)
A:transformers.modeling_tf_utils.proxies->kwargs.pop('proxies', None)
A:transformers.modeling_tf_utils.output_loading_info->kwargs.pop('output_loading_info', False)
A:transformers.modeling_tf_utils.local_files_only->kwargs.pop('local_files_only', False)
A:transformers.modeling_tf_utils.use_auth_token->kwargs.pop('use_auth_token', None)
A:transformers.modeling_tf_utils.revision->kwargs.pop('revision', None)
A:transformers.modeling_tf_utils.mirror->kwargs.pop('mirror', None)
A:transformers.modeling_tf_utils.(config, model_kwargs)->tensorflow.keras.utils.register_keras_serializable()(cls).config_class.from_pretrained(config_path, *model_args, cache_dir=cache_dir, return_unused_kwargs=True, force_download=force_download, resume_download=resume_download, proxies=proxies, local_files_only=local_files_only, use_auth_token=use_auth_token, revision=revision, **kwargs)
A:transformers.modeling_tf_utils.archive_file->hf_bucket_url(pretrained_model_name_or_path, filename=WEIGHTS_NAME if from_pt else TF2_WEIGHTS_NAME, revision=revision, mirror=mirror)
A:transformers.modeling_tf_utils.resolved_archive_file->cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)
A:transformers.modeling_tf_utils.model->cls(config, *model_args, **model_kwargs)
A:transformers.modeling_tf_utils.(missing_keys, unexpected_keys)->load_tf_weights(model, resolved_archive_file)
A:transformers.modeling_tf_utils.self.weight->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.modeling_tf_utils.self.bias->self.add_weight('bias', shape=[1, self.nf], initializer=tf.zeros_initializer())
A:transformers.modeling_tf_utils.x->tensorflow.reshape(inputs, [-1, self.hidden_size])
A:transformers.modeling_tf_utils.base_config->super().get_config()
A:transformers.modeling_tf_utils.logits->tensorflow.matmul(x, self.weight, transpose_b=True)
A:transformers.modeling_tf_utils.self.summary->tensorflow.keras.layers.Dense(num_classes, kernel_initializer=get_initializer(initializer_range), name='summary')
A:transformers.modeling_tf_utils.self.first_dropout->tensorflow.keras.layers.Dropout(config.summary_first_dropout)
A:transformers.modeling_tf_utils.self.last_dropout->tensorflow.keras.layers.Dropout(config.summary_last_dropout)
A:transformers.modeling_tf_utils.hidden_states->inputs.get('hidden_states')
A:transformers.modeling_tf_utils.cls_index->tensorflow.fill(hidden_shape[:-2], hidden_shape[-2] - 1)
A:transformers.modeling_tf_utils.output->self.last_dropout(output, training=training)
A:transformers.modeling_tf_utils.hidden_shape->shape_list(hidden_states)
A:transformers.modeling_tf_utils.cls_shape->shape_list(cls_index)
A:transformers.modeling_tf_utils.dynamic->tensorflow.shape(tensor)
A:transformers.modeling_tf_utils.static->tensor.shape.as_list()
transformers.TFPreTrainedModel(self,config,*inputs,**kwargs)
transformers.TFPreTrainedModel._get_resized_embeddings(self,old_embeddings,new_num_tokens=None)->tf.Variable
transformers.TFPreTrainedModel._get_word_embeddings(self,embeddings)
transformers.TFPreTrainedModel._resize_token_embeddings(self,new_num_tokens)
transformers.TFPreTrainedModel.dummy_inputs(self)->Dict[str, tf.Tensor]
transformers.TFPreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFPreTrainedModel.get_input_embeddings(self)->tf.keras.layers.Layer
transformers.TFPreTrainedModel.get_output_embeddings(self)->tf.keras.layers.Layer
transformers.TFPreTrainedModel.get_output_layer_with_bias(self)->Union[None, tf.keras.layers.Layer]
transformers.TFPreTrainedModel.get_prefix_bias_name(self)->Union[None, str]
transformers.TFPreTrainedModel.prune_heads(self,heads_to_prune)
transformers.TFPreTrainedModel.resize_token_embeddings(self,new_num_tokens=None)->tf.Variable
transformers.TFPreTrainedModel.save_pretrained(self,save_directory)
transformers.TFPreTrainedModel.set_input_embeddings(self,value)
transformers.TFSequenceSummary(self,config:PretrainedConfig,initializer_range:float=0.02,**kwargs)
transformers.TFSequenceSummary.call(self,inputs,cls_index=None,training=False)
transformers.TFSharedEmbeddings(self,vocab_size:int,hidden_size:int,initializer_range:Optional[float]=None,**kwargs)
transformers.TFSharedEmbeddings._embedding(self,input_ids)
transformers.TFSharedEmbeddings._linear(self,inputs)
transformers.TFSharedEmbeddings.build(self,input_shape)
transformers.TFSharedEmbeddings.call(self,inputs:tf.Tensor,mode:str='embedding')->tf.Tensor
transformers.TFSharedEmbeddings.get_config(self)
transformers.modeling_tf_utils.TFCausalLanguageModelingLoss
transformers.modeling_tf_utils.TFCausalLanguageModelingLoss.compute_loss(self,labels,logits)
transformers.modeling_tf_utils.TFConv1D(self,nf,nx,initializer_range=0.02,**kwargs)
transformers.modeling_tf_utils.TFConv1D.__init__(self,nf,nx,initializer_range=0.02,**kwargs)
transformers.modeling_tf_utils.TFConv1D.build(self,input_shape)
transformers.modeling_tf_utils.TFConv1D.call(self,x)
transformers.modeling_tf_utils.TFMaskedLanguageModelingLoss(TFCausalLanguageModelingLoss)
transformers.modeling_tf_utils.TFModelUtilsMixin
transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters(self,only_trainable:bool=False)->int
transformers.modeling_tf_utils.TFMultipleChoiceLoss(TFSequenceClassificationLoss)
transformers.modeling_tf_utils.TFNextSentencePredictionLoss
transformers.modeling_tf_utils.TFNextSentencePredictionLoss.compute_loss(self,labels,logits)
transformers.modeling_tf_utils.TFPreTrainedModel(self,config,*inputs,**kwargs)
transformers.modeling_tf_utils.TFPreTrainedModel.__init__(self,config,*inputs,**kwargs)
transformers.modeling_tf_utils.TFPreTrainedModel._get_resized_embeddings(self,old_embeddings,new_num_tokens=None)->tf.Variable
transformers.modeling_tf_utils.TFPreTrainedModel._get_word_embeddings(self,embeddings)
transformers.modeling_tf_utils.TFPreTrainedModel._resize_token_embeddings(self,new_num_tokens)
transformers.modeling_tf_utils.TFPreTrainedModel.dummy_inputs(self)->Dict[str, tf.Tensor]
transformers.modeling_tf_utils.TFPreTrainedModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.modeling_tf_utils.TFPreTrainedModel.get_input_embeddings(self)->tf.keras.layers.Layer
transformers.modeling_tf_utils.TFPreTrainedModel.get_output_embeddings(self)->tf.keras.layers.Layer
transformers.modeling_tf_utils.TFPreTrainedModel.get_output_layer_with_bias(self)->Union[None, tf.keras.layers.Layer]
transformers.modeling_tf_utils.TFPreTrainedModel.get_prefix_bias_name(self)->Union[None, str]
transformers.modeling_tf_utils.TFPreTrainedModel.prune_heads(self,heads_to_prune)
transformers.modeling_tf_utils.TFPreTrainedModel.resize_token_embeddings(self,new_num_tokens=None)->tf.Variable
transformers.modeling_tf_utils.TFPreTrainedModel.save_pretrained(self,save_directory)
transformers.modeling_tf_utils.TFPreTrainedModel.set_input_embeddings(self,value)
transformers.modeling_tf_utils.TFQuestionAnsweringLoss
transformers.modeling_tf_utils.TFQuestionAnsweringLoss.compute_loss(self,labels,logits)
transformers.modeling_tf_utils.TFSequenceClassificationLoss
transformers.modeling_tf_utils.TFSequenceClassificationLoss.compute_loss(self,labels,logits)
transformers.modeling_tf_utils.TFSequenceSummary(self,config:PretrainedConfig,initializer_range:float=0.02,**kwargs)
transformers.modeling_tf_utils.TFSequenceSummary.__init__(self,config:PretrainedConfig,initializer_range:float=0.02,**kwargs)
transformers.modeling_tf_utils.TFSequenceSummary.call(self,inputs,cls_index=None,training=False)
transformers.modeling_tf_utils.TFSharedEmbeddings(self,vocab_size:int,hidden_size:int,initializer_range:Optional[float]=None,**kwargs)
transformers.modeling_tf_utils.TFSharedEmbeddings.__init__(self,vocab_size:int,hidden_size:int,initializer_range:Optional[float]=None,**kwargs)
transformers.modeling_tf_utils.TFSharedEmbeddings._embedding(self,input_ids)
transformers.modeling_tf_utils.TFSharedEmbeddings._linear(self,inputs)
transformers.modeling_tf_utils.TFSharedEmbeddings.build(self,input_shape)
transformers.modeling_tf_utils.TFSharedEmbeddings.call(self,inputs:tf.Tensor,mode:str='embedding')->tf.Tensor
transformers.modeling_tf_utils.TFSharedEmbeddings.get_config(self)
transformers.modeling_tf_utils.TFTokenClassificationLoss
transformers.modeling_tf_utils.TFTokenClassificationLoss.compute_loss(self,labels,logits)
transformers.modeling_tf_utils.TFWrappedEmbeddings(self,layer,abs_scope_name=None)
transformers.modeling_tf_utils.TFWrappedEmbeddings.__init__(self,layer,abs_scope_name=None)
transformers.modeling_tf_utils.TFWrappedEmbeddings.call(self,inputs,mode='embedding')
transformers.modeling_tf_utils.booleans_processing(config,**kwargs)
transformers.modeling_tf_utils.get_initializer(initializer_range:float=0.02)->tf.initializers.TruncatedNormal
transformers.modeling_tf_utils.input_processing(func,config,input_ids,**kwargs)
transformers.modeling_tf_utils.keras_serializable(cls)
transformers.modeling_tf_utils.load_tf_weights(model,resolved_archive_file)
transformers.modeling_tf_utils.shape_list(tensor:tf.Tensor)->List[int]
transformers.shape_list(tensor:tf.Tensor)->List[int]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/dummy_sentencepiece_objects.py----------------------------------------
transformers.AlbertTokenizer(self,*args,**kwargs)
transformers.AlbertTokenizer.from_pretrained(self,*args,**kwargs)
transformers.BarthezTokenizer(self,*args,**kwargs)
transformers.BarthezTokenizer.from_pretrained(self,*args,**kwargs)
transformers.BertGenerationTokenizer(self,*args,**kwargs)
transformers.BertGenerationTokenizer.from_pretrained(self,*args,**kwargs)
transformers.CamembertTokenizer(self,*args,**kwargs)
transformers.CamembertTokenizer.from_pretrained(self,*args,**kwargs)
transformers.MBartTokenizer(self,*args,**kwargs)
transformers.MBartTokenizer.from_pretrained(self,*args,**kwargs)
transformers.MT5Tokenizer(self,*args,**kwargs)
transformers.MT5Tokenizer.from_pretrained(self,*args,**kwargs)
transformers.MarianTokenizer(self,*args,**kwargs)
transformers.MarianTokenizer.from_pretrained(self,*args,**kwargs)
transformers.PegasusTokenizer(self,*args,**kwargs)
transformers.PegasusTokenizer.from_pretrained(self,*args,**kwargs)
transformers.ReformerTokenizer(self,*args,**kwargs)
transformers.ReformerTokenizer.from_pretrained(self,*args,**kwargs)
transformers.T5Tokenizer(self,*args,**kwargs)
transformers.T5Tokenizer.from_pretrained(self,*args,**kwargs)
transformers.XLMProphetNetTokenizer(self,*args,**kwargs)
transformers.XLMProphetNetTokenizer.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaTokenizer(self,*args,**kwargs)
transformers.XLMRobertaTokenizer.from_pretrained(self,*args,**kwargs)
transformers.XLNetTokenizer(self,*args,**kwargs)
transformers.XLNetTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.AlbertTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.AlbertTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.AlbertTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BarthezTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BarthezTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BarthezTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BertGenerationTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BertGenerationTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.BertGenerationTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.CamembertTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.CamembertTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.CamembertTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MBartTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MBartTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MBartTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MT5Tokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MT5Tokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MT5Tokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MarianTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MarianTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.MarianTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.PegasusTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.PegasusTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.PegasusTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.ReformerTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.ReformerTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.ReformerTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.T5Tokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.T5Tokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.T5Tokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMProphetNetTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMProphetNetTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMProphetNetTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMRobertaTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMRobertaTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLMRobertaTokenizer.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLNetTokenizer(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLNetTokenizer.__init__(self,*args,**kwargs)
transformers.utils.dummy_sentencepiece_objects.XLNetTokenizer.from_pretrained(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/notebook.py----------------------------------------
A:transformers.utils.notebook.t->int(t)
A:transformers.utils.notebook.self.start_timeself.last_time->time.time()
A:transformers.utils.notebook.current_time->time.time()
A:transformers.utils.notebook.self.wait_for->max(int(self.update_every / self.average_time_per_item), 1)
A:transformers.utils.notebook.self.html_code->html_progress_bar(self.value, self.total, self.prefix, self.label, self.width)
A:transformers.utils.notebook.self.output->IPython.display.display(disp.HTML(self.html_code), display_id=True)
A:transformers.utils.notebook.self.child_bar->NotebookProgressBar(total, prefix=prefix, parent=self, width=width)
A:transformers.utils.notebook.self.training_tracker->NotebookTrainingTracker(state.max_steps, column_names)
A:transformers.utils.notebook.self.prediction_bar->NotebookProgressBar(len(eval_dataloader))
A:transformers.utils.notebook.values['Epoch']->int(state.epoch)
A:transformers.utils.notebook._->metrics.pop('epoch', None)
A:transformers.utils.notebook.splits->k.split('_')
A:transformers.utils.notebook.name->' '.join([part.capitalize() for part in splits[1:]])
transformers.utils.notebook.NotebookProgressBar(self,total:int,prefix:Optional[str]=None,leave:bool=True,parent:Optional['NotebookTrainingTracker']=None,width:int=300)
transformers.utils.notebook.NotebookProgressBar.__init__(self,total:int,prefix:Optional[str]=None,leave:bool=True,parent:Optional['NotebookTrainingTracker']=None,width:int=300)
transformers.utils.notebook.NotebookProgressBar.close(self)
transformers.utils.notebook.NotebookProgressBar.display(self)
transformers.utils.notebook.NotebookProgressBar.update(self,value:int,force_update:bool=False,comment:str=None)
transformers.utils.notebook.NotebookProgressBar.update_bar(self,value,comment=None)
transformers.utils.notebook.NotebookProgressCallback(self)
transformers.utils.notebook.NotebookProgressCallback.__init__(self)
transformers.utils.notebook.NotebookProgressCallback.on_evaluate(self,args,state,control,metrics=None,**kwargs)
transformers.utils.notebook.NotebookProgressCallback.on_log(self,args,state,control,logs=None,**kwargs)
transformers.utils.notebook.NotebookProgressCallback.on_prediction_step(self,args,state,control,eval_dataloader=None,**kwargs)
transformers.utils.notebook.NotebookProgressCallback.on_step_end(self,args,state,control,**kwargs)
transformers.utils.notebook.NotebookProgressCallback.on_train_begin(self,args,state,control,**kwargs)
transformers.utils.notebook.NotebookProgressCallback.on_train_end(self,args,state,control,**kwargs)
transformers.utils.notebook.NotebookTrainingTracker(self,num_steps,column_names=None)
transformers.utils.notebook.NotebookTrainingTracker.__init__(self,num_steps,column_names=None)
transformers.utils.notebook.NotebookTrainingTracker.add_child(self,total,prefix=None,width=300)
transformers.utils.notebook.NotebookTrainingTracker.display(self)
transformers.utils.notebook.NotebookTrainingTracker.remove_child(self)
transformers.utils.notebook.NotebookTrainingTracker.write_line(self,values)
transformers.utils.notebook.format_time(t)
transformers.utils.notebook.html_progress_bar(value,total,prefix,label,width=300)
transformers.utils.notebook.text_to_html_table(items)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/logging.py----------------------------------------
A:transformers.utils.logging._lock->threading.Lock()
A:transformers.utils.logging.env_level_str->os.getenv('TRANSFORMERS_VERBOSITY', None)
A:transformers.utils.logging._default_handler->logging.StreamHandler()
A:transformers.utils.logging.library_root_logger->_get_library_root_logger()
A:transformers.utils.logging.name->_get_library_name()
A:transformers.utils.logging.formatter->logging.Formatter('[%(levelname)s|%(filename)s:%(lineno)s] %(asctime)s >> %(message)s')
transformers.logging._configure_library_root_logger()->None
transformers.logging._get_default_logging_level()
transformers.logging._get_library_name()->str
transformers.logging._get_library_root_logger()->logging.Logger
transformers.logging._reset_library_root_logger()->None
transformers.logging.disable_default_handler()->None
transformers.logging.disable_propagation()->None
transformers.logging.enable_default_handler()->None
transformers.logging.enable_explicit_format()->None
transformers.logging.enable_propagation()->None
transformers.logging.get_logger(name:Optional[str]=None)->logging.Logger
transformers.logging.get_verbosity()->int
transformers.logging.reset_format()->None
transformers.logging.set_verbosity(verbosity:int)->None
transformers.logging.set_verbosity_debug()
transformers.logging.set_verbosity_error()
transformers.logging.set_verbosity_info()
transformers.logging.set_verbosity_warning()
transformers.utils.logging._configure_library_root_logger()->None
transformers.utils.logging._get_default_logging_level()
transformers.utils.logging._get_library_name()->str
transformers.utils.logging._get_library_root_logger()->logging.Logger
transformers.utils.logging._reset_library_root_logger()->None
transformers.utils.logging.disable_default_handler()->None
transformers.utils.logging.disable_propagation()->None
transformers.utils.logging.enable_default_handler()->None
transformers.utils.logging.enable_explicit_format()->None
transformers.utils.logging.enable_propagation()->None
transformers.utils.logging.get_logger(name:Optional[str]=None)->logging.Logger
transformers.utils.logging.get_verbosity()->int
transformers.utils.logging.reset_format()->None
transformers.utils.logging.set_verbosity(verbosity:int)->None
transformers.utils.logging.set_verbosity_debug()
transformers.utils.logging.set_verbosity_error()
transformers.utils.logging.set_verbosity_info()
transformers.utils.logging.set_verbosity_warning()


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/model_parallel_utils.py----------------------------------------
A:transformers.utils.model_parallel_utils.blocks->list(range(0, num_blocks))
A:transformers.utils.model_parallel_utils.layers->list(range(n_layers))
A:transformers.utils.model_parallel_utils.n_blocks->int(ceil(n_layers / len(devices)))
A:transformers.utils.model_parallel_utils.layers_list->list((layers[i:i + n_blocks] for i in range(0, n_layers, n_blocks)))
transformers.utils.model_parallel_utils.assert_device_map(device_map,num_blocks)
transformers.utils.model_parallel_utils.get_device_map(n_layers,devices)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/dummy_flax_objects.py----------------------------------------
transformers.FlaxAutoModel(self,*args,**kwargs)
transformers.FlaxAutoModel.from_pretrained(self,*args,**kwargs)
transformers.FlaxBertForMaskedLM(self,*args,**kwargs)
transformers.FlaxBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.FlaxBertModel(self,*args,**kwargs)
transformers.FlaxBertModel.from_pretrained(self,*args,**kwargs)
transformers.FlaxPreTrainedModel(self,*args,**kwargs)
transformers.FlaxPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.FlaxRobertaModel(self,*args,**kwargs)
transformers.FlaxRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxAutoModel(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxAutoModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxAutoModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertModel(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxRobertaModel(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxRobertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_flax_objects.FlaxRobertaModel.from_pretrained(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/hp_naming.py----------------------------------------
A:transformers.utils.hp_naming.words->param_name.split('_')
A:transformers.utils.hp_naming.shortname->separator.join(shortname_parts)
A:transformers.utils.hp_naming.short_name->TrialShortNamer.shortname_for_key(info, param_name)
A:transformers.utils.hp_naming.info->dict(short_word={}, reverse_short_word={}, short_param={}, reverse_short_param={})
A:transformers.utils.hp_naming.field_keys->list(cls.DEFAULTS.keys())
A:transformers.utils.hp_naming.values->repr.split('_')
A:transformers.utils.hp_naming.(p_k, p_v)->value.split('-')
A:transformers.utils.hp_naming.p_k->re.sub('[0-9.]', '', value)
A:transformers.utils.hp_naming.p_v->float(re.sub('[^0-9.]', '', value))
transformers.utils.hp_naming.TrialShortNamer
transformers.utils.hp_naming.TrialShortNamer.add_new_param_name(info,param_name)
transformers.utils.hp_naming.TrialShortNamer.build_naming_info(cls)
transformers.utils.hp_naming.TrialShortNamer.parse_repr(cls,repr)
transformers.utils.hp_naming.TrialShortNamer.set_defaults(cls,prefix,defaults)
transformers.utils.hp_naming.TrialShortNamer.shortname(cls,params)
transformers.utils.hp_naming.TrialShortNamer.shortname_for_key(info,param_name)
transformers.utils.hp_naming.TrialShortNamer.shortname_for_word(info,word)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/sentencepiece_model_pb2.py----------------------------------------
A:transformers.utils.sentencepiece_model_pb2._sym_db->google.protobuf.symbol_database.Default()
A:transformers.utils.sentencepiece_model_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='sentencepiece_model.proto', package='sentencepiece', syntax='proto2', serialized_pb=_b('\n\x19sentencepiece_model.proto\x12\rsentencepiece"ô\x08\n\x0bTrainerSpec\x12\r\n\x05input\x18\x01 \x03(\t\x12\x14\n\x0cinput_format\x18\x07 \x01(\t\x12\x14\n\x0cmodel_prefix\x18\x02 \x01(\t\x12A\n\nmodel_type\x18\x03 \x01(\x0e2$.sentencepiece.TrainerSpec.ModelType:\x07UNIGRAM\x12\x18\n\nvocab_size\x18\x04 \x01(\x05:\x048000\x12\x17\n\x0faccept_language\x18\x05 \x03(\t\x12 \n\x15self_test_sample_size\x18\x06 \x01(\x05:\x010\x12"\n\x12character_coverage\x18\n \x01(\x02:\x060.9995\x12\x1e\n\x13input_sentence_size\x18\x0b \x01(\x05:\x010\x12$\n\x16shuffle_input_sentence\x18\x13 \x01(\x08:\x04true\x12 \n\x14mining_sentence_size\x18\x0c \x01(\x05B\x02\x18\x01\x12"\n\x16training_sentence_size\x18\r \x01(\x05B\x02\x18\x01\x12(\n\x17seed_sentencepiece_size\x18\x0e \x01(\x05:\x071000000\x12\x1e\n\x10shrinking_factor\x18\x0f \x01(\x02:\x040.75\x12!\n\x13max_sentence_length\x18\x12 \x01(\x05:\x044192\x12\x17\n\x0bnum_threads\x18\x10 \x01(\x05:\x0216\x12\x1d\n\x12num_sub_iterations\x18\x11 \x01(\x05:\x012\x12$\n\x18max_sentencepiece_length\x18\x14 \x01(\x05:\x0216\x12%\n\x17split_by_unicode_script\x18\x15 \x01(\x08:\x04true\x12\x1d\n\x0fsplit_by_number\x18\x17 \x01(\x08:\x04true\x12!\n\x13split_by_whitespace\x18\x16 \x01(\x08:\x04true\x12)\n\x1atreat_whitespace_as_suffix\x18\x18 \x01(\x08:\x05false\x12\x17\n\x0fcontrol_symbols\x18\x1e \x03(\t\x12\x1c\n\x14user_defined_symbols\x18\x1f \x03(\t\x12\x1e\n\x10hard_vocab_limit\x18! \x01(\x08:\x04true\x12\x1c\n\ruse_all_vocab\x18" \x01(\x08:\x05false\x12\x11\n\x06unk_id\x18( \x01(\x05:\x010\x12\x11\n\x06bos_id\x18) \x01(\x05:\x011\x12\x11\n\x06eos_id\x18* \x01(\x05:\x012\x12\x12\n\x06pad_id\x18+ \x01(\x05:\x02-1\x12\x18\n\tunk_piece\x18- \x01(\t:\x05<unk>\x12\x16\n\tbos_piece\x18. \x01(\t:\x03<s>\x12\x17\n\teos_piece\x18/ \x01(\t:\x04</s>\x12\x18\n\tpad_piece\x180 \x01(\t:\x05<pad>\x12\x1a\n\x0bunk_surface\x18, \x01(\t:\x05 â\x81\x87 "5\n\tModelType\x12\x0b\n\x07UNIGRAM\x10\x01\x12\x07\n\x03BPE\x10\x02\x12\x08\n\x04WORD\x10\x03\x12\x08\n\x04CHAR\x10\x04*\t\x08È\x01\x10\x80\x80\x80\x80\x02"Ñ\x01\n\x0eNormalizerSpec\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x1c\n\x14precompiled_charsmap\x18\x02 \x01(\x0c\x12\x1e\n\x10add_dummy_prefix\x18\x03 \x01(\x08:\x04true\x12&\n\x18remove_extra_whitespaces\x18\x04 \x01(\x08:\x04true\x12 \n\x12escape_whitespaces\x18\x05 \x01(\x08:\x04true\x12\x1e\n\x16normalization_rule_tsv\x18\x06 \x01(\t*\t\x08È\x01\x10\x80\x80\x80\x80\x02"y\n\x0cSelfTestData\x123\n\x07samples\x18\x01 \x03(\x0b2".sentencepiece.SelfTestData.Sample\x1a)\n\x06Sample\x12\r\n\x05input\x18\x01 \x01(\t\x12\x10\n\x08expected\x18\x02 \x01(\t*\t\x08È\x01\x10\x80\x80\x80\x80\x02"º\x03\n\nModelProto\x127\n\x06pieces\x18\x01 \x03(\x0b2\'.sentencepiece.ModelProto.SentencePiece\x120\n\x0ctrainer_spec\x18\x02 \x01(\x0b2\x1a.sentencepiece.TrainerSpec\x126\n\x0fnormalizer_spec\x18\x03 \x01(\x0b2\x1d.sentencepiece.NormalizerSpec\x123\n\x0eself_test_data\x18\x04 \x01(\x0b2\x1b.sentencepiece.SelfTestData\x1aÈ\x01\n\rSentencePiece\x12\r\n\x05piece\x18\x01 \x01(\t\x12\r\n\x05score\x18\x02 \x01(\x02\x12B\n\x04type\x18\x03 \x01(\x0e2,.sentencepiece.ModelProto.SentencePiece.Type:\x06NORMAL"J\n\x04Type\x12\n\n\x06NORMAL\x10\x01\x12\x0b\n\x07UNKNOWN\x10\x02\x12\x0b\n\x07CONTROL\x10\x03\x12\x10\n\x0cUSER_DEFINED\x10\x04\x12\n\n\x06UNUSED\x10\x05*\t\x08È\x01\x10\x80\x80\x80\x80\x02*\t\x08È\x01\x10\x80\x80\x80\x80\x02B\x02H\x03'))
A:transformers.utils.sentencepiece_model_pb2._TRAINERSPEC_MODELTYPE->google.protobuf.descriptor.EnumDescriptor(name='ModelType', full_name='sentencepiece.TrainerSpec.ModelType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='UNIGRAM', index=0, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='BPE', index=1, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='WORD', index=2, number=3, options=None, type=None), _descriptor.EnumValueDescriptor(name='CHAR', index=3, number=4, options=None, type=None)], containing_type=None, options=None, serialized_start=1121, serialized_end=1174)
A:transformers.utils.sentencepiece_model_pb2._MODELPROTO_SENTENCEPIECE_TYPE->google.protobuf.descriptor.EnumDescriptor(name='Type', full_name='sentencepiece.ModelProto.SentencePiece.Type', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='NORMAL', index=0, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNKNOWN', index=1, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='CONTROL', index=2, number=3, options=None, type=None), _descriptor.EnumValueDescriptor(name='USER_DEFINED', index=3, number=4, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNUSED', index=4, number=5, options=None, type=None)], containing_type=None, options=None, serialized_start=1869, serialized_end=1943)
A:transformers.utils.sentencepiece_model_pb2._TRAINERSPEC->google.protobuf.descriptor.Descriptor(name='TrainerSpec', full_name='sentencepiece.TrainerSpec', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input', full_name='sentencepiece.TrainerSpec.input', index=0, number=1, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_format', full_name='sentencepiece.TrainerSpec.input_format', index=1, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='model_prefix', full_name='sentencepiece.TrainerSpec.model_prefix', index=2, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='model_type', full_name='sentencepiece.TrainerSpec.model_type', index=3, number=3, type=14, cpp_type=8, label=1, has_default_value=True, default_value=1, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='vocab_size', full_name='sentencepiece.TrainerSpec.vocab_size', index=4, number=4, type=5, cpp_type=1, label=1, has_default_value=True, default_value=8000, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='accept_language', full_name='sentencepiece.TrainerSpec.accept_language', index=5, number=5, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='self_test_sample_size', full_name='sentencepiece.TrainerSpec.self_test_sample_size', index=6, number=6, type=5, cpp_type=1, label=1, has_default_value=True, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='character_coverage', full_name='sentencepiece.TrainerSpec.character_coverage', index=7, number=10, type=2, cpp_type=6, label=1, has_default_value=True, default_value=float(0.9995), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_sentence_size', full_name='sentencepiece.TrainerSpec.input_sentence_size', index=8, number=11, type=5, cpp_type=1, label=1, has_default_value=True, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shuffle_input_sentence', full_name='sentencepiece.TrainerSpec.shuffle_input_sentence', index=9, number=19, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='mining_sentence_size', full_name='sentencepiece.TrainerSpec.mining_sentence_size', index=10, number=12, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))), _descriptor.FieldDescriptor(name='training_sentence_size', full_name='sentencepiece.TrainerSpec.training_sentence_size', index=11, number=13, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))), _descriptor.FieldDescriptor(name='seed_sentencepiece_size', full_name='sentencepiece.TrainerSpec.seed_sentencepiece_size', index=12, number=14, type=5, cpp_type=1, label=1, has_default_value=True, default_value=1000000, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shrinking_factor', full_name='sentencepiece.TrainerSpec.shrinking_factor', index=13, number=15, type=2, cpp_type=6, label=1, has_default_value=True, default_value=float(0.75), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='max_sentence_length', full_name='sentencepiece.TrainerSpec.max_sentence_length', index=14, number=18, type=5, cpp_type=1, label=1, has_default_value=True, default_value=4192, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_threads', full_name='sentencepiece.TrainerSpec.num_threads', index=15, number=16, type=5, cpp_type=1, label=1, has_default_value=True, default_value=16, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_sub_iterations', full_name='sentencepiece.TrainerSpec.num_sub_iterations', index=16, number=17, type=5, cpp_type=1, label=1, has_default_value=True, default_value=2, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='max_sentencepiece_length', full_name='sentencepiece.TrainerSpec.max_sentencepiece_length', index=17, number=20, type=5, cpp_type=1, label=1, has_default_value=True, default_value=16, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='split_by_unicode_script', full_name='sentencepiece.TrainerSpec.split_by_unicode_script', index=18, number=21, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='split_by_number', full_name='sentencepiece.TrainerSpec.split_by_number', index=19, number=23, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='split_by_whitespace', full_name='sentencepiece.TrainerSpec.split_by_whitespace', index=20, number=22, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='treat_whitespace_as_suffix', full_name='sentencepiece.TrainerSpec.treat_whitespace_as_suffix', index=21, number=24, type=8, cpp_type=7, label=1, has_default_value=True, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='control_symbols', full_name='sentencepiece.TrainerSpec.control_symbols', index=22, number=30, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='user_defined_symbols', full_name='sentencepiece.TrainerSpec.user_defined_symbols', index=23, number=31, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='hard_vocab_limit', full_name='sentencepiece.TrainerSpec.hard_vocab_limit', index=24, number=33, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='use_all_vocab', full_name='sentencepiece.TrainerSpec.use_all_vocab', index=25, number=34, type=8, cpp_type=7, label=1, has_default_value=True, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='unk_id', full_name='sentencepiece.TrainerSpec.unk_id', index=26, number=40, type=5, cpp_type=1, label=1, has_default_value=True, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bos_id', full_name='sentencepiece.TrainerSpec.bos_id', index=27, number=41, type=5, cpp_type=1, label=1, has_default_value=True, default_value=1, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='eos_id', full_name='sentencepiece.TrainerSpec.eos_id', index=28, number=42, type=5, cpp_type=1, label=1, has_default_value=True, default_value=2, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pad_id', full_name='sentencepiece.TrainerSpec.pad_id', index=29, number=43, type=5, cpp_type=1, label=1, has_default_value=True, default_value=-1, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='unk_piece', full_name='sentencepiece.TrainerSpec.unk_piece', index=30, number=45, type=9, cpp_type=9, label=1, has_default_value=True, default_value=_b('<unk>').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bos_piece', full_name='sentencepiece.TrainerSpec.bos_piece', index=31, number=46, type=9, cpp_type=9, label=1, has_default_value=True, default_value=_b('<s>').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='eos_piece', full_name='sentencepiece.TrainerSpec.eos_piece', index=32, number=47, type=9, cpp_type=9, label=1, has_default_value=True, default_value=_b('</s>').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pad_piece', full_name='sentencepiece.TrainerSpec.pad_piece', index=33, number=48, type=9, cpp_type=9, label=1, has_default_value=True, default_value=_b('<pad>').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='unk_surface', full_name='sentencepiece.TrainerSpec.unk_surface', index=34, number=44, type=9, cpp_type=9, label=1, has_default_value=True, default_value=_b(' â\x81\x87 ').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_TRAINERSPEC_MODELTYPE], options=None, is_extendable=True, syntax='proto2', extension_ranges=[(200, 536870912)], oneofs=[], serialized_start=45, serialized_end=1185)
A:transformers.utils.sentencepiece_model_pb2._NORMALIZERSPEC->google.protobuf.descriptor.Descriptor(name='NormalizerSpec', full_name='sentencepiece.NormalizerSpec', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='sentencepiece.NormalizerSpec.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='precompiled_charsmap', full_name='sentencepiece.NormalizerSpec.precompiled_charsmap', index=1, number=2, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='add_dummy_prefix', full_name='sentencepiece.NormalizerSpec.add_dummy_prefix', index=2, number=3, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='remove_extra_whitespaces', full_name='sentencepiece.NormalizerSpec.remove_extra_whitespaces', index=3, number=4, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='escape_whitespaces', full_name='sentencepiece.NormalizerSpec.escape_whitespaces', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=True, default_value=True, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='normalization_rule_tsv', full_name='sentencepiece.NormalizerSpec.normalization_rule_tsv', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=True, syntax='proto2', extension_ranges=[(200, 536870912)], oneofs=[], serialized_start=1188, serialized_end=1397)
A:transformers.utils.sentencepiece_model_pb2._SELFTESTDATA_SAMPLE->google.protobuf.descriptor.Descriptor(name='Sample', full_name='sentencepiece.SelfTestData.Sample', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input', full_name='sentencepiece.SelfTestData.Sample.input', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='expected', full_name='sentencepiece.SelfTestData.Sample.expected', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=1468, serialized_end=1509)
A:transformers.utils.sentencepiece_model_pb2._SELFTESTDATA->google.protobuf.descriptor.Descriptor(name='SelfTestData', full_name='sentencepiece.SelfTestData', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='samples', full_name='sentencepiece.SelfTestData.samples', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_SELFTESTDATA_SAMPLE], enum_types=[], options=None, is_extendable=True, syntax='proto2', extension_ranges=[(200, 536870912)], oneofs=[], serialized_start=1399, serialized_end=1520)
A:transformers.utils.sentencepiece_model_pb2._MODELPROTO_SENTENCEPIECE->google.protobuf.descriptor.Descriptor(name='SentencePiece', full_name='sentencepiece.ModelProto.SentencePiece', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='piece', full_name='sentencepiece.ModelProto.SentencePiece.piece', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='score', full_name='sentencepiece.ModelProto.SentencePiece.score', index=1, number=2, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='sentencepiece.ModelProto.SentencePiece.type', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=True, default_value=1, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_MODELPROTO_SENTENCEPIECE_TYPE], options=None, is_extendable=True, syntax='proto2', extension_ranges=[(200, 536870912)], oneofs=[], serialized_start=1754, serialized_end=1954)
A:transformers.utils.sentencepiece_model_pb2._MODELPROTO->google.protobuf.descriptor.Descriptor(name='ModelProto', full_name='sentencepiece.ModelProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='pieces', full_name='sentencepiece.ModelProto.pieces', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='trainer_spec', full_name='sentencepiece.ModelProto.trainer_spec', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='normalizer_spec', full_name='sentencepiece.ModelProto.normalizer_spec', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='self_test_data', full_name='sentencepiece.ModelProto.self_test_data', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_MODELPROTO_SENTENCEPIECE], enum_types=[], options=None, is_extendable=True, syntax='proto2', extension_ranges=[(200, 536870912)], oneofs=[], serialized_start=1523, serialized_end=1965)
A:transformers.utils.sentencepiece_model_pb2.TrainerSpec->google.protobuf.reflection.GeneratedProtocolMessageType('TrainerSpec', (_message.Message,), dict(DESCRIPTOR=_TRAINERSPEC, __module__='sentencepiece_model_pb2'))
A:transformers.utils.sentencepiece_model_pb2.NormalizerSpec->google.protobuf.reflection.GeneratedProtocolMessageType('NormalizerSpec', (_message.Message,), dict(DESCRIPTOR=_NORMALIZERSPEC, __module__='sentencepiece_model_pb2'))
A:transformers.utils.sentencepiece_model_pb2.SelfTestData->google.protobuf.reflection.GeneratedProtocolMessageType('SelfTestData', (_message.Message,), dict(Sample=_reflection.GeneratedProtocolMessageType('Sample', (_message.Message,), dict(DESCRIPTOR=_SELFTESTDATA_SAMPLE, __module__='sentencepiece_model_pb2')), DESCRIPTOR=_SELFTESTDATA, __module__='sentencepiece_model_pb2'))
A:transformers.utils.sentencepiece_model_pb2.ModelProto->google.protobuf.reflection.GeneratedProtocolMessageType('ModelProto', (_message.Message,), dict(SentencePiece=_reflection.GeneratedProtocolMessageType('SentencePiece', (_message.Message,), dict(DESCRIPTOR=_MODELPROTO_SENTENCEPIECE, __module__='sentencepiece_model_pb2')), DESCRIPTOR=_MODELPROTO, __module__='sentencepiece_model_pb2'))
A:transformers.utils.sentencepiece_model_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('H\x03'))
A:transformers.utils.sentencepiece_model_pb2._TRAINERSPEC.fields_by_name['mining_sentence_size']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))
A:transformers.utils.sentencepiece_model_pb2._TRAINERSPEC.fields_by_name['training_sentence_size']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/dummy_pt_objects.py----------------------------------------
transformers.Adafactor(self,*args,**kwargs)
transformers.AdamW(self,*args,**kwargs)
transformers.AdaptiveEmbedding(self,*args,**kwargs)
transformers.AlbertForMaskedLM(self,*args,**kwargs)
transformers.AlbertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.AlbertForMultipleChoice(self,*args,**kwargs)
transformers.AlbertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.AlbertForPreTraining(self,*args,**kwargs)
transformers.AlbertForQuestionAnswering(self,*args,**kwargs)
transformers.AlbertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.AlbertForSequenceClassification(self,*args,**kwargs)
transformers.AlbertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.AlbertForTokenClassification(self,*args,**kwargs)
transformers.AlbertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.AlbertModel(self,*args,**kwargs)
transformers.AlbertModel.from_pretrained(self,*args,**kwargs)
transformers.AlbertPreTrainedModel(self,*args,**kwargs)
transformers.AlbertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.AutoModel(self,*args,**kwargs)
transformers.AutoModel.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForCausalLM(self,*args,**kwargs)
transformers.AutoModelForCausalLM.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForMaskedLM(self,*args,**kwargs)
transformers.AutoModelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForMultipleChoice(self,*args,**kwargs)
transformers.AutoModelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForNextSentencePrediction(self,*args,**kwargs)
transformers.AutoModelForNextSentencePrediction.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForPreTraining(self,*args,**kwargs)
transformers.AutoModelForPreTraining.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForQuestionAnswering(self,*args,**kwargs)
transformers.AutoModelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForSeq2SeqLM(self,*args,**kwargs)
transformers.AutoModelForSeq2SeqLM.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForSequenceClassification(self,*args,**kwargs)
transformers.AutoModelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForTableQuestionAnswering(self,*args,**kwargs)
transformers.AutoModelForTableQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.AutoModelForTokenClassification(self,*args,**kwargs)
transformers.AutoModelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.AutoModelWithLMHead(self,*args,**kwargs)
transformers.AutoModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.BartForConditionalGeneration(self,*args,**kwargs)
transformers.BartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.BartForQuestionAnswering(self,*args,**kwargs)
transformers.BartForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.BartForSequenceClassification(self,*args,**kwargs)
transformers.BartForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.BartModel(self,*args,**kwargs)
transformers.BartModel.from_pretrained(self,*args,**kwargs)
transformers.BartPretrainedModel(self,*args,**kwargs)
transformers.BartPretrainedModel.from_pretrained(self,*args,**kwargs)
transformers.BeamScorer(self,*args,**kwargs)
transformers.BeamSearchScorer(self,*args,**kwargs)
transformers.BertForMaskedLM(self,*args,**kwargs)
transformers.BertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.BertForMultipleChoice(self,*args,**kwargs)
transformers.BertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.BertForNextSentencePrediction(self,*args,**kwargs)
transformers.BertForPreTraining(self,*args,**kwargs)
transformers.BertForQuestionAnswering(self,*args,**kwargs)
transformers.BertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.BertForSequenceClassification(self,*args,**kwargs)
transformers.BertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.BertForTokenClassification(self,*args,**kwargs)
transformers.BertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.BertGenerationDecoder(self,*args,**kwargs)
transformers.BertGenerationEncoder(self,*args,**kwargs)
transformers.BertLMHeadModel(self,*args,**kwargs)
transformers.BertLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.BertLayer(self,*args,**kwargs)
transformers.BertModel(self,*args,**kwargs)
transformers.BertModel.from_pretrained(self,*args,**kwargs)
transformers.BertPreTrainedModel(self,*args,**kwargs)
transformers.BertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.BlenderbotForConditionalGeneration(self,*args,**kwargs)
transformers.BlenderbotForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.CTRLForSequenceClassification(self,*args,**kwargs)
transformers.CTRLForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.CTRLLMHeadModel(self,*args,**kwargs)
transformers.CTRLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.CTRLModel(self,*args,**kwargs)
transformers.CTRLModel.from_pretrained(self,*args,**kwargs)
transformers.CTRLPreTrainedModel(self,*args,**kwargs)
transformers.CTRLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.CamembertForCausalLM(self,*args,**kwargs)
transformers.CamembertForMaskedLM(self,*args,**kwargs)
transformers.CamembertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.CamembertForMultipleChoice(self,*args,**kwargs)
transformers.CamembertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.CamembertForQuestionAnswering(self,*args,**kwargs)
transformers.CamembertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.CamembertForSequenceClassification(self,*args,**kwargs)
transformers.CamembertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.CamembertForTokenClassification(self,*args,**kwargs)
transformers.CamembertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.CamembertModel(self,*args,**kwargs)
transformers.CamembertModel.from_pretrained(self,*args,**kwargs)
transformers.Conv1D(self,*args,**kwargs)
transformers.DPRContextEncoder(self,*args,**kwargs)
transformers.DPRPretrainedContextEncoder(self,*args,**kwargs)
transformers.DPRPretrainedQuestionEncoder(self,*args,**kwargs)
transformers.DPRPretrainedReader(self,*args,**kwargs)
transformers.DPRQuestionEncoder(self,*args,**kwargs)
transformers.DPRReader(self,*args,**kwargs)
transformers.DataCollator(self,*args,**kwargs)
transformers.DataCollatorForLanguageModeling(self,*args,**kwargs)
transformers.DataCollatorForLanguageModeling.from_pretrained(self,*args,**kwargs)
transformers.DataCollatorForPermutationLanguageModeling(self,*args,**kwargs)
transformers.DataCollatorForPermutationLanguageModeling.from_pretrained(self,*args,**kwargs)
transformers.DataCollatorForSOP(self,*args,**kwargs)
transformers.DataCollatorForTokenClassification(self,*args,**kwargs)
transformers.DataCollatorForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.DataCollatorForWholeWordMask(self,*args,**kwargs)
transformers.DataCollatorWithPadding(self,*args,**kwargs)
transformers.DebertaForSequenceClassification(self,*args,**kwargs)
transformers.DebertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.DebertaModel(self,*args,**kwargs)
transformers.DebertaModel.from_pretrained(self,*args,**kwargs)
transformers.DebertaPreTrainedModel(self,*args,**kwargs)
transformers.DebertaPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.DistilBertForMaskedLM(self,*args,**kwargs)
transformers.DistilBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.DistilBertForMultipleChoice(self,*args,**kwargs)
transformers.DistilBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.DistilBertForQuestionAnswering(self,*args,**kwargs)
transformers.DistilBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.DistilBertForSequenceClassification(self,*args,**kwargs)
transformers.DistilBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.DistilBertForTokenClassification(self,*args,**kwargs)
transformers.DistilBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.DistilBertModel(self,*args,**kwargs)
transformers.DistilBertModel.from_pretrained(self,*args,**kwargs)
transformers.DistilBertPreTrainedModel(self,*args,**kwargs)
transformers.DistilBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.ElectraForMaskedLM(self,*args,**kwargs)
transformers.ElectraForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.ElectraForMultipleChoice(self,*args,**kwargs)
transformers.ElectraForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.ElectraForPreTraining(self,*args,**kwargs)
transformers.ElectraForQuestionAnswering(self,*args,**kwargs)
transformers.ElectraForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.ElectraForSequenceClassification(self,*args,**kwargs)
transformers.ElectraForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.ElectraForTokenClassification(self,*args,**kwargs)
transformers.ElectraForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.ElectraModel(self,*args,**kwargs)
transformers.ElectraModel.from_pretrained(self,*args,**kwargs)
transformers.ElectraPreTrainedModel(self,*args,**kwargs)
transformers.ElectraPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.EncoderDecoderModel(self,*args,**kwargs)
transformers.EncoderDecoderModel.from_pretrained(self,*args,**kwargs)
transformers.FSMTForConditionalGeneration(self,*args,**kwargs)
transformers.FSMTForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.FSMTModel(self,*args,**kwargs)
transformers.FSMTModel.from_pretrained(self,*args,**kwargs)
transformers.FlaubertForMultipleChoice(self,*args,**kwargs)
transformers.FlaubertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.FlaubertForQuestionAnswering(self,*args,**kwargs)
transformers.FlaubertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.FlaubertForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.FlaubertForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.FlaubertForSequenceClassification(self,*args,**kwargs)
transformers.FlaubertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.FlaubertForTokenClassification(self,*args,**kwargs)
transformers.FlaubertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.FlaubertModel(self,*args,**kwargs)
transformers.FlaubertModel.from_pretrained(self,*args,**kwargs)
transformers.FlaubertWithLMHeadModel(self,*args,**kwargs)
transformers.FlaubertWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.FunnelBaseModel(self,*args,**kwargs)
transformers.FunnelBaseModel.from_pretrained(self,*args,**kwargs)
transformers.FunnelForMaskedLM(self,*args,**kwargs)
transformers.FunnelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.FunnelForMultipleChoice(self,*args,**kwargs)
transformers.FunnelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.FunnelForPreTraining(self,*args,**kwargs)
transformers.FunnelForQuestionAnswering(self,*args,**kwargs)
transformers.FunnelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.FunnelForSequenceClassification(self,*args,**kwargs)
transformers.FunnelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.FunnelForTokenClassification(self,*args,**kwargs)
transformers.FunnelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.FunnelModel(self,*args,**kwargs)
transformers.FunnelModel.from_pretrained(self,*args,**kwargs)
transformers.GPT2DoubleHeadsModel(self,*args,**kwargs)
transformers.GPT2DoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.GPT2ForSequenceClassification(self,*args,**kwargs)
transformers.GPT2ForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.GPT2LMHeadModel(self,*args,**kwargs)
transformers.GPT2LMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.GPT2Model(self,*args,**kwargs)
transformers.GPT2Model.from_pretrained(self,*args,**kwargs)
transformers.GPT2PreTrainedModel(self,*args,**kwargs)
transformers.GPT2PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.GlueDataTrainingArguments(self,*args,**kwargs)
transformers.GlueDataset(self,*args,**kwargs)
transformers.HammingDiversityLogitsProcessor(self,*args,**kwargs)
transformers.LayoutLMForMaskedLM(self,*args,**kwargs)
transformers.LayoutLMForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.LayoutLMForTokenClassification(self,*args,**kwargs)
transformers.LayoutLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.LayoutLMModel(self,*args,**kwargs)
transformers.LayoutLMModel.from_pretrained(self,*args,**kwargs)
transformers.LineByLineTextDataset(self,*args,**kwargs)
transformers.LineByLineWithRefDataset(self,*args,**kwargs)
transformers.LineByLineWithSOPTextDataset(self,*args,**kwargs)
transformers.LogitsProcessor(self,*args,**kwargs)
transformers.LogitsProcessorList(self,*args,**kwargs)
transformers.LogitsWarper(self,*args,**kwargs)
transformers.LongformerForMaskedLM(self,*args,**kwargs)
transformers.LongformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.LongformerForMultipleChoice(self,*args,**kwargs)
transformers.LongformerForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.LongformerForQuestionAnswering(self,*args,**kwargs)
transformers.LongformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.LongformerForSequenceClassification(self,*args,**kwargs)
transformers.LongformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.LongformerForTokenClassification(self,*args,**kwargs)
transformers.LongformerForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.LongformerModel(self,*args,**kwargs)
transformers.LongformerModel.from_pretrained(self,*args,**kwargs)
transformers.LongformerSelfAttention(self,*args,**kwargs)
transformers.LxmertEncoder(self,*args,**kwargs)
transformers.LxmertForPreTraining(self,*args,**kwargs)
transformers.LxmertForQuestionAnswering(self,*args,**kwargs)
transformers.LxmertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.LxmertModel(self,*args,**kwargs)
transformers.LxmertModel.from_pretrained(self,*args,**kwargs)
transformers.LxmertPreTrainedModel(self,*args,**kwargs)
transformers.LxmertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.LxmertVisualFeatureEncoder(self,*args,**kwargs)
transformers.LxmertXLayer(self,*args,**kwargs)
transformers.MBartForConditionalGeneration(self,*args,**kwargs)
transformers.MBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.MMBTForClassification(self,*args,**kwargs)
transformers.MMBTModel(self,*args,**kwargs)
transformers.MMBTModel.from_pretrained(self,*args,**kwargs)
transformers.MPNetForMaskedLM(self,*args,**kwargs)
transformers.MPNetForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.MPNetForMultipleChoice(self,*args,**kwargs)
transformers.MPNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.MPNetForQuestionAnswering(self,*args,**kwargs)
transformers.MPNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.MPNetForSequenceClassification(self,*args,**kwargs)
transformers.MPNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.MPNetForTokenClassification(self,*args,**kwargs)
transformers.MPNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.MPNetLayer(self,*args,**kwargs)
transformers.MPNetModel(self,*args,**kwargs)
transformers.MPNetModel.from_pretrained(self,*args,**kwargs)
transformers.MPNetPreTrainedModel(self,*args,**kwargs)
transformers.MPNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.MT5EncoderModel(self,*args,**kwargs)
transformers.MT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.MT5ForConditionalGeneration(self,*args,**kwargs)
transformers.MT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.MT5Model(self,*args,**kwargs)
transformers.MT5Model.from_pretrained(self,*args,**kwargs)
transformers.MarianMTModel(self,*args,**kwargs)
transformers.MarianMTModel.from_pretrained(self,*args,**kwargs)
transformers.MinLengthLogitsProcessor(self,*args,**kwargs)
transformers.MobileBertForMaskedLM(self,*args,**kwargs)
transformers.MobileBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.MobileBertForMultipleChoice(self,*args,**kwargs)
transformers.MobileBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.MobileBertForNextSentencePrediction(self,*args,**kwargs)
transformers.MobileBertForPreTraining(self,*args,**kwargs)
transformers.MobileBertForQuestionAnswering(self,*args,**kwargs)
transformers.MobileBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.MobileBertForSequenceClassification(self,*args,**kwargs)
transformers.MobileBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.MobileBertForTokenClassification(self,*args,**kwargs)
transformers.MobileBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.MobileBertLayer(self,*args,**kwargs)
transformers.MobileBertModel(self,*args,**kwargs)
transformers.MobileBertModel.from_pretrained(self,*args,**kwargs)
transformers.MobileBertPreTrainedModel(self,*args,**kwargs)
transformers.MobileBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.ModalEmbeddings(self,*args,**kwargs)
transformers.NoBadWordsLogitsProcessor(self,*args,**kwargs)
transformers.NoRepeatNGramLogitsProcessor(self,*args,**kwargs)
transformers.OpenAIGPTDoubleHeadsModel(self,*args,**kwargs)
transformers.OpenAIGPTDoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.OpenAIGPTForSequenceClassification(self,*args,**kwargs)
transformers.OpenAIGPTForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.OpenAIGPTLMHeadModel(self,*args,**kwargs)
transformers.OpenAIGPTLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.OpenAIGPTModel(self,*args,**kwargs)
transformers.OpenAIGPTModel.from_pretrained(self,*args,**kwargs)
transformers.OpenAIGPTPreTrainedModel(self,*args,**kwargs)
transformers.OpenAIGPTPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.PegasusForConditionalGeneration(self,*args,**kwargs)
transformers.PegasusForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.PreTrainedModel(self,*args,**kwargs)
transformers.PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.PrefixConstrainedLogitsProcessor(self,*args,**kwargs)
transformers.PretrainedBartModel(self,*args,**kwargs)
transformers.PretrainedBartModel.from_pretrained(self,*args,**kwargs)
transformers.PretrainedFSMTModel(self,*args,**kwargs)
transformers.PretrainedFSMTModel.from_pretrained(self,*args,**kwargs)
transformers.ProphetNetDecoder(self,*args,**kwargs)
transformers.ProphetNetEncoder(self,*args,**kwargs)
transformers.ProphetNetForCausalLM(self,*args,**kwargs)
transformers.ProphetNetForConditionalGeneration(self,*args,**kwargs)
transformers.ProphetNetForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.ProphetNetModel(self,*args,**kwargs)
transformers.ProphetNetModel.from_pretrained(self,*args,**kwargs)
transformers.ProphetNetPreTrainedModel(self,*args,**kwargs)
transformers.ProphetNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.PyTorchBenchmark(self,*args,**kwargs)
transformers.PyTorchBenchmarkArguments(self,*args,**kwargs)
transformers.RagModel(self,*args,**kwargs)
transformers.RagModel.from_pretrained(self,*args,**kwargs)
transformers.RagSequenceForGeneration(self,*args,**kwargs)
transformers.RagTokenForGeneration(self,*args,**kwargs)
transformers.ReformerAttention(self,*args,**kwargs)
transformers.ReformerForMaskedLM(self,*args,**kwargs)
transformers.ReformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.ReformerForQuestionAnswering(self,*args,**kwargs)
transformers.ReformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.ReformerForSequenceClassification(self,*args,**kwargs)
transformers.ReformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.ReformerLayer(self,*args,**kwargs)
transformers.ReformerModel(self,*args,**kwargs)
transformers.ReformerModel.from_pretrained(self,*args,**kwargs)
transformers.ReformerModelWithLMHead(self,*args,**kwargs)
transformers.ReformerModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.RepetitionPenaltyLogitsProcessor(self,*args,**kwargs)
transformers.RetriBertModel(self,*args,**kwargs)
transformers.RetriBertModel.from_pretrained(self,*args,**kwargs)
transformers.RetriBertPreTrainedModel(self,*args,**kwargs)
transformers.RetriBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.RobertaForCausalLM(self,*args,**kwargs)
transformers.RobertaForMaskedLM(self,*args,**kwargs)
transformers.RobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.RobertaForMultipleChoice(self,*args,**kwargs)
transformers.RobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.RobertaForQuestionAnswering(self,*args,**kwargs)
transformers.RobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.RobertaForSequenceClassification(self,*args,**kwargs)
transformers.RobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.RobertaForTokenClassification(self,*args,**kwargs)
transformers.RobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.RobertaModel(self,*args,**kwargs)
transformers.RobertaModel.from_pretrained(self,*args,**kwargs)
transformers.SquadDataTrainingArguments(self,*args,**kwargs)
transformers.SquadDataset(self,*args,**kwargs)
transformers.SqueezeBertForMaskedLM(self,*args,**kwargs)
transformers.SqueezeBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertForMultipleChoice(self,*args,**kwargs)
transformers.SqueezeBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertForQuestionAnswering(self,*args,**kwargs)
transformers.SqueezeBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertForSequenceClassification(self,*args,**kwargs)
transformers.SqueezeBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertForTokenClassification(self,*args,**kwargs)
transformers.SqueezeBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertModel(self,*args,**kwargs)
transformers.SqueezeBertModel.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertModule(self,*args,**kwargs)
transformers.SqueezeBertPreTrainedModel(self,*args,**kwargs)
transformers.SqueezeBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.T5EncoderModel(self,*args,**kwargs)
transformers.T5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.T5ForConditionalGeneration(self,*args,**kwargs)
transformers.T5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.T5Model(self,*args,**kwargs)
transformers.T5Model.from_pretrained(self,*args,**kwargs)
transformers.T5PreTrainedModel(self,*args,**kwargs)
transformers.T5PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TapasForMaskedLM(self,*args,**kwargs)
transformers.TapasForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TapasForQuestionAnswering(self,*args,**kwargs)
transformers.TapasForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TapasForSequenceClassification(self,*args,**kwargs)
transformers.TapasForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TapasModel(self,*args,**kwargs)
transformers.TapasModel.from_pretrained(self,*args,**kwargs)
transformers.TemperatureLogitsWarper(self,*args,**kwargs)
transformers.TextDataset(self,*args,**kwargs)
transformers.TextDatasetForNextSentencePrediction(self,*args,**kwargs)
transformers.TopKLogitsWarper(self,*args,**kwargs)
transformers.TopPLogitsWarper(self,*args,**kwargs)
transformers.Trainer(self,*args,**kwargs)
transformers.TransfoXLForSequenceClassification(self,*args,**kwargs)
transformers.TransfoXLForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TransfoXLLMHeadModel(self,*args,**kwargs)
transformers.TransfoXLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TransfoXLModel(self,*args,**kwargs)
transformers.TransfoXLModel.from_pretrained(self,*args,**kwargs)
transformers.TransfoXLPreTrainedModel(self,*args,**kwargs)
transformers.TransfoXLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.XLMForMultipleChoice(self,*args,**kwargs)
transformers.XLMForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.XLMForQuestionAnswering(self,*args,**kwargs)
transformers.XLMForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.XLMForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.XLMForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.XLMForSequenceClassification(self,*args,**kwargs)
transformers.XLMForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.XLMForTokenClassification(self,*args,**kwargs)
transformers.XLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.XLMModel(self,*args,**kwargs)
transformers.XLMModel.from_pretrained(self,*args,**kwargs)
transformers.XLMPreTrainedModel(self,*args,**kwargs)
transformers.XLMPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.XLMProphetNetDecoder(self,*args,**kwargs)
transformers.XLMProphetNetEncoder(self,*args,**kwargs)
transformers.XLMProphetNetForCausalLM(self,*args,**kwargs)
transformers.XLMProphetNetForConditionalGeneration(self,*args,**kwargs)
transformers.XLMProphetNetForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.XLMProphetNetModel(self,*args,**kwargs)
transformers.XLMProphetNetModel.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaForCausalLM(self,*args,**kwargs)
transformers.XLMRobertaForMaskedLM(self,*args,**kwargs)
transformers.XLMRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaForMultipleChoice(self,*args,**kwargs)
transformers.XLMRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.XLMRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaForSequenceClassification(self,*args,**kwargs)
transformers.XLMRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaForTokenClassification(self,*args,**kwargs)
transformers.XLMRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaModel(self,*args,**kwargs)
transformers.XLMRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.XLMWithLMHeadModel(self,*args,**kwargs)
transformers.XLMWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.XLNetForMultipleChoice(self,*args,**kwargs)
transformers.XLNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.XLNetForQuestionAnswering(self,*args,**kwargs)
transformers.XLNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.XLNetForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.XLNetForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.XLNetForSequenceClassification(self,*args,**kwargs)
transformers.XLNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.XLNetForTokenClassification(self,*args,**kwargs)
transformers.XLNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.XLNetLMHeadModel(self,*args,**kwargs)
transformers.XLNetLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.XLNetModel(self,*args,**kwargs)
transformers.XLNetModel.from_pretrained(self,*args,**kwargs)
transformers.XLNetPreTrainedModel(self,*args,**kwargs)
transformers.XLNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.apply_chunking_to_forward(*args,**kwargs)
transformers.default_data_collator(*args,**kwargs)
transformers.get_constant_schedule(*args,**kwargs)
transformers.get_constant_schedule_with_warmup(*args,**kwargs)
transformers.get_cosine_schedule_with_warmup(*args,**kwargs)
transformers.get_cosine_with_hard_restarts_schedule_with_warmup(*args,**kwargs)
transformers.get_linear_schedule_with_warmup(*args,**kwargs)
transformers.get_polynomial_decay_schedule_with_warmup(*args,**kwargs)
transformers.load_tf_weights_in_albert(*args,**kwargs)
transformers.load_tf_weights_in_bert(*args,**kwargs)
transformers.load_tf_weights_in_bert_generation(*args,**kwargs)
transformers.load_tf_weights_in_electra(*args,**kwargs)
transformers.load_tf_weights_in_funnel(*args,**kwargs)
transformers.load_tf_weights_in_gpt2(*args,**kwargs)
transformers.load_tf_weights_in_mobilebert(*args,**kwargs)
transformers.load_tf_weights_in_openai_gpt(*args,**kwargs)
transformers.load_tf_weights_in_t5(*args,**kwargs)
transformers.load_tf_weights_in_transfo_xl(*args,**kwargs)
transformers.load_tf_weights_in_xlnet(*args,**kwargs)
transformers.prune_layer(*args,**kwargs)
transformers.top_k_top_p_filtering(*args,**kwargs)
transformers.torch_distributed_zero_first(*args,**kwargs)
transformers.utils.dummy_pt_objects.Adafactor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.Adafactor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AdamW(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AdamW.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AdaptiveEmbedding(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AdaptiveEmbedding.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AlbertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForCausalLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForNextSentencePrediction.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForPreTraining.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSeq2SeqLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSeq2SeqLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSeq2SeqLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTableQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTableQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTableQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelWithLMHead(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelWithLMHead.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.AutoModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartPretrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartPretrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BartPretrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BeamScorer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BeamScorer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BeamSearchScorer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BeamSearchScorer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertGenerationDecoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertGenerationDecoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertGenerationEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertGenerationEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertLayer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BlenderbotForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BlenderbotForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.BlenderbotForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CTRLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.CamembertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.Conv1D(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.Conv1D.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRContextEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRContextEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedContextEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedContextEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedQuestionEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedQuestionEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedReader(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRPretrainedReader.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRQuestionEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRQuestionEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRReader(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DPRReader.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollator(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollator.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForLanguageModeling(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForLanguageModeling.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForLanguageModeling.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForPermutationLanguageModeling(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForPermutationLanguageModeling.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForPermutationLanguageModeling.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForSOP(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForSOP.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForWholeWordMask(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorForWholeWordMask.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorWithPadding(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DataCollatorWithPadding.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DebertaPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.DistilBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ElectraPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.EncoderDecoderModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.EncoderDecoderModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.EncoderDecoderModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FSMTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertWithLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertWithLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FlaubertWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelBaseModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelBaseModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelBaseModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.FunnelModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2DoubleHeadsModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2DoubleHeadsModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2DoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2ForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2ForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2ForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2LMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2LMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2LMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2Model(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2PreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2PreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GPT2PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GlueDataTrainingArguments(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GlueDataTrainingArguments.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GlueDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.GlueDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.HammingDiversityLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.HammingDiversityLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LayoutLMModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineTextDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineTextDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineWithRefDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineWithRefDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineWithSOPTextDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LineByLineWithSOPTextDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsProcessorList(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsProcessorList.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsWarper(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LogitsWarper.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerSelfAttention(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LongformerSelfAttention.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertVisualFeatureEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertVisualFeatureEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertXLayer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.LxmertXLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MBartForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MBartForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MMBTForClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MMBTForClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MMBTModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MMBTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MMBTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetLayer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MPNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5EncoderModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5EncoderModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5ForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5ForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5Model(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MT5Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MarianMTModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MarianMTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MarianMTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MinLengthLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MinLengthLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertLayer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.MobileBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ModalEmbeddings(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ModalEmbeddings.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.NoBadWordsLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.NoBadWordsLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.NoRepeatNGramLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.NoRepeatNGramLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTDoubleHeadsModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTDoubleHeadsModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTDoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.OpenAIGPTPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PegasusForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PegasusForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PegasusForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PrefixConstrainedLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PrefixConstrainedLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedBartModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedBartModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedBartModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedFSMTModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedFSMTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PretrainedFSMTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetDecoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetDecoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ProphetNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PyTorchBenchmark(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PyTorchBenchmark.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PyTorchBenchmarkArguments(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.PyTorchBenchmarkArguments.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagSequenceForGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagSequenceForGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagTokenForGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RagTokenForGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerAttention(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerAttention.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerLayer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModelWithLMHead(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModelWithLMHead.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.ReformerModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RepetitionPenaltyLogitsProcessor(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RepetitionPenaltyLogitsProcessor.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RetriBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.RobertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SquadDataTrainingArguments(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SquadDataTrainingArguments.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SquadDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SquadDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertModule(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertModule.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.SqueezeBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5EncoderModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5EncoderModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5ForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5ForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5Model(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5PreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5PreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.T5PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TapasModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TemperatureLogitsWarper(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TemperatureLogitsWarper.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TextDataset(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TextDataset.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TextDatasetForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TextDatasetForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TopKLogitsWarper(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TopKLogitsWarper.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TopPLogitsWarper(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TopPLogitsWarper.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.Trainer(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.Trainer.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.TransfoXLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetDecoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetDecoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetEncoder(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMProphetNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMWithLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMWithLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLMWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.XLNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_pt_objects.apply_chunking_to_forward(*args,**kwargs)
transformers.utils.dummy_pt_objects.default_data_collator(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_constant_schedule(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_constant_schedule_with_warmup(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_cosine_schedule_with_warmup(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_cosine_with_hard_restarts_schedule_with_warmup(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_linear_schedule_with_warmup(*args,**kwargs)
transformers.utils.dummy_pt_objects.get_polynomial_decay_schedule_with_warmup(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_albert(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_bert(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_bert_generation(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_electra(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_funnel(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_gpt2(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_mobilebert(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_openai_gpt(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_t5(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_transfo_xl(*args,**kwargs)
transformers.utils.dummy_pt_objects.load_tf_weights_in_xlnet(*args,**kwargs)
transformers.utils.dummy_pt_objects.prune_layer(*args,**kwargs)
transformers.utils.dummy_pt_objects.top_k_top_p_filtering(*args,**kwargs)
transformers.utils.dummy_pt_objects.torch_distributed_zero_first(*args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/versions.py----------------------------------------
A:transformers.utils.versions.match->re.findall('^([^!=<>\\s]+)([\\s!=<>]{1,2})(.+)', requirement)
A:transformers.utils.versions.got_ver->'.'.join([str(x) for x in sys.version_info[:3]])
transformers.utils.versions.require_version(requirement:str,hint:Optional[str]=None)->None
transformers.utils.versions.require_version_core(requirement)
transformers.utils.versions.require_version_examples(requirement)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/dummy_tf_objects.py----------------------------------------
transformers.AdamWeightDecay(self,*args,**kwargs)
transformers.GradientAccumulator(self,*args,**kwargs)
transformers.TFAdaptiveEmbedding(self,*args,**kwargs)
transformers.TFAlbertForMaskedLM(self,*args,**kwargs)
transformers.TFAlbertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertForMultipleChoice(self,*args,**kwargs)
transformers.TFAlbertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertForPreTraining(self,*args,**kwargs)
transformers.TFAlbertForQuestionAnswering(self,*args,**kwargs)
transformers.TFAlbertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertForSequenceClassification(self,*args,**kwargs)
transformers.TFAlbertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertForTokenClassification(self,*args,**kwargs)
transformers.TFAlbertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertMainLayer(self,*args,**kwargs)
transformers.TFAlbertModel(self,*args,**kwargs)
transformers.TFAlbertModel.from_pretrained(self,*args,**kwargs)
transformers.TFAlbertPreTrainedModel(self,*args,**kwargs)
transformers.TFAlbertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModel(self,*args,**kwargs)
transformers.TFAutoModel.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForCausalLM(self,*args,**kwargs)
transformers.TFAutoModelForCausalLM.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForMaskedLM(self,*args,**kwargs)
transformers.TFAutoModelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForMultipleChoice(self,*args,**kwargs)
transformers.TFAutoModelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForPreTraining(self,*args,**kwargs)
transformers.TFAutoModelForPreTraining.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForQuestionAnswering(self,*args,**kwargs)
transformers.TFAutoModelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForSeq2SeqLM(self,*args,**kwargs)
transformers.TFAutoModelForSeq2SeqLM.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForSequenceClassification(self,*args,**kwargs)
transformers.TFAutoModelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelForTokenClassification(self,*args,**kwargs)
transformers.TFAutoModelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFAutoModelWithLMHead(self,*args,**kwargs)
transformers.TFAutoModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.TFBartForConditionalGeneration(self,*args,**kwargs)
transformers.TFBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFBartModel(self,*args,**kwargs)
transformers.TFBartModel.from_pretrained(self,*args,**kwargs)
transformers.TFBartPretrainedModel(self,*args,**kwargs)
transformers.TFBartPretrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFBertEmbeddings(self,*args,**kwargs)
transformers.TFBertForMaskedLM(self,*args,**kwargs)
transformers.TFBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFBertForMultipleChoice(self,*args,**kwargs)
transformers.TFBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFBertForNextSentencePrediction(self,*args,**kwargs)
transformers.TFBertForPreTraining(self,*args,**kwargs)
transformers.TFBertForQuestionAnswering(self,*args,**kwargs)
transformers.TFBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFBertForSequenceClassification(self,*args,**kwargs)
transformers.TFBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFBertForTokenClassification(self,*args,**kwargs)
transformers.TFBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFBertLMHeadModel(self,*args,**kwargs)
transformers.TFBertLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFBertMainLayer(self,*args,**kwargs)
transformers.TFBertModel(self,*args,**kwargs)
transformers.TFBertModel.from_pretrained(self,*args,**kwargs)
transformers.TFBertPreTrainedModel(self,*args,**kwargs)
transformers.TFBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFBlenderbotForConditionalGeneration(self,*args,**kwargs)
transformers.TFBlenderbotForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFCTRLLMHeadModel(self,*args,**kwargs)
transformers.TFCTRLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFCTRLModel(self,*args,**kwargs)
transformers.TFCTRLModel.from_pretrained(self,*args,**kwargs)
transformers.TFCTRLPreTrainedModel(self,*args,**kwargs)
transformers.TFCTRLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertForMaskedLM(self,*args,**kwargs)
transformers.TFCamembertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertForMultipleChoice(self,*args,**kwargs)
transformers.TFCamembertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertForQuestionAnswering(self,*args,**kwargs)
transformers.TFCamembertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertForSequenceClassification(self,*args,**kwargs)
transformers.TFCamembertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertForTokenClassification(self,*args,**kwargs)
transformers.TFCamembertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFCamembertModel(self,*args,**kwargs)
transformers.TFCamembertModel.from_pretrained(self,*args,**kwargs)
transformers.TFDPRContextEncoder(self,*args,**kwargs)
transformers.TFDPRPretrainedContextEncoder(self,*args,**kwargs)
transformers.TFDPRPretrainedQuestionEncoder(self,*args,**kwargs)
transformers.TFDPRPretrainedReader(self,*args,**kwargs)
transformers.TFDPRQuestionEncoder(self,*args,**kwargs)
transformers.TFDPRReader(self,*args,**kwargs)
transformers.TFDistilBertForMaskedLM(self,*args,**kwargs)
transformers.TFDistilBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertForMultipleChoice(self,*args,**kwargs)
transformers.TFDistilBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertForQuestionAnswering(self,*args,**kwargs)
transformers.TFDistilBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertForSequenceClassification(self,*args,**kwargs)
transformers.TFDistilBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertForTokenClassification(self,*args,**kwargs)
transformers.TFDistilBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertMainLayer(self,*args,**kwargs)
transformers.TFDistilBertModel(self,*args,**kwargs)
transformers.TFDistilBertModel.from_pretrained(self,*args,**kwargs)
transformers.TFDistilBertPreTrainedModel(self,*args,**kwargs)
transformers.TFDistilBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFElectraForMaskedLM(self,*args,**kwargs)
transformers.TFElectraForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFElectraForMultipleChoice(self,*args,**kwargs)
transformers.TFElectraForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFElectraForPreTraining(self,*args,**kwargs)
transformers.TFElectraForQuestionAnswering(self,*args,**kwargs)
transformers.TFElectraForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFElectraForSequenceClassification(self,*args,**kwargs)
transformers.TFElectraForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFElectraForTokenClassification(self,*args,**kwargs)
transformers.TFElectraForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFElectraModel(self,*args,**kwargs)
transformers.TFElectraModel.from_pretrained(self,*args,**kwargs)
transformers.TFElectraPreTrainedModel(self,*args,**kwargs)
transformers.TFElectraPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertForMultipleChoice(self,*args,**kwargs)
transformers.TFFlaubertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.TFFlaubertForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertForSequenceClassification(self,*args,**kwargs)
transformers.TFFlaubertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertForTokenClassification(self,*args,**kwargs)
transformers.TFFlaubertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertModel(self,*args,**kwargs)
transformers.TFFlaubertModel.from_pretrained(self,*args,**kwargs)
transformers.TFFlaubertWithLMHeadModel(self,*args,**kwargs)
transformers.TFFlaubertWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelBaseModel(self,*args,**kwargs)
transformers.TFFunnelBaseModel.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelForMaskedLM(self,*args,**kwargs)
transformers.TFFunnelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelForMultipleChoice(self,*args,**kwargs)
transformers.TFFunnelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelForPreTraining(self,*args,**kwargs)
transformers.TFFunnelForQuestionAnswering(self,*args,**kwargs)
transformers.TFFunnelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelForSequenceClassification(self,*args,**kwargs)
transformers.TFFunnelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelForTokenClassification(self,*args,**kwargs)
transformers.TFFunnelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFFunnelModel(self,*args,**kwargs)
transformers.TFFunnelModel.from_pretrained(self,*args,**kwargs)
transformers.TFGPT2DoubleHeadsModel(self,*args,**kwargs)
transformers.TFGPT2DoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.TFGPT2ForSequenceClassification(self,*args,**kwargs)
transformers.TFGPT2ForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFGPT2LMHeadModel(self,*args,**kwargs)
transformers.TFGPT2LMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFGPT2MainLayer(self,*args,**kwargs)
transformers.TFGPT2Model(self,*args,**kwargs)
transformers.TFGPT2Model.from_pretrained(self,*args,**kwargs)
transformers.TFGPT2PreTrainedModel(self,*args,**kwargs)
transformers.TFGPT2PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerForMaskedLM(self,*args,**kwargs)
transformers.TFLongformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerForMultipleChoice(self,*args,**kwargs)
transformers.TFLongformerForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerForQuestionAnswering(self,*args,**kwargs)
transformers.TFLongformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerForSequenceClassification(self,*args,**kwargs)
transformers.TFLongformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerForTokenClassification(self,*args,**kwargs)
transformers.TFLongformerForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerModel(self,*args,**kwargs)
transformers.TFLongformerModel.from_pretrained(self,*args,**kwargs)
transformers.TFLongformerSelfAttention(self,*args,**kwargs)
transformers.TFLxmertForPreTraining(self,*args,**kwargs)
transformers.TFLxmertMainLayer(self,*args,**kwargs)
transformers.TFLxmertModel(self,*args,**kwargs)
transformers.TFLxmertModel.from_pretrained(self,*args,**kwargs)
transformers.TFLxmertPreTrainedModel(self,*args,**kwargs)
transformers.TFLxmertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFLxmertVisualFeatureEncoder(self,*args,**kwargs)
transformers.TFMBartForConditionalGeneration(self,*args,**kwargs)
transformers.TFMBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetForMaskedLM(self,*args,**kwargs)
transformers.TFMPNetForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetForMultipleChoice(self,*args,**kwargs)
transformers.TFMPNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetForQuestionAnswering(self,*args,**kwargs)
transformers.TFMPNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetForSequenceClassification(self,*args,**kwargs)
transformers.TFMPNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetForTokenClassification(self,*args,**kwargs)
transformers.TFMPNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetMainLayer(self,*args,**kwargs)
transformers.TFMPNetModel(self,*args,**kwargs)
transformers.TFMPNetModel.from_pretrained(self,*args,**kwargs)
transformers.TFMPNetPreTrainedModel(self,*args,**kwargs)
transformers.TFMPNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFMT5EncoderModel(self,*args,**kwargs)
transformers.TFMT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.TFMT5ForConditionalGeneration(self,*args,**kwargs)
transformers.TFMT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFMT5Model(self,*args,**kwargs)
transformers.TFMT5Model.from_pretrained(self,*args,**kwargs)
transformers.TFMarianMTModel(self,*args,**kwargs)
transformers.TFMarianMTModel.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertForMaskedLM(self,*args,**kwargs)
transformers.TFMobileBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertForMultipleChoice(self,*args,**kwargs)
transformers.TFMobileBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertForNextSentencePrediction(self,*args,**kwargs)
transformers.TFMobileBertForPreTraining(self,*args,**kwargs)
transformers.TFMobileBertForQuestionAnswering(self,*args,**kwargs)
transformers.TFMobileBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertForSequenceClassification(self,*args,**kwargs)
transformers.TFMobileBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertForTokenClassification(self,*args,**kwargs)
transformers.TFMobileBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertMainLayer(self,*args,**kwargs)
transformers.TFMobileBertModel(self,*args,**kwargs)
transformers.TFMobileBertModel.from_pretrained(self,*args,**kwargs)
transformers.TFMobileBertPreTrainedModel(self,*args,**kwargs)
transformers.TFMobileBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFOpenAIGPTDoubleHeadsModel(self,*args,**kwargs)
transformers.TFOpenAIGPTDoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.TFOpenAIGPTForSequenceClassification(self,*args,**kwargs)
transformers.TFOpenAIGPTForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFOpenAIGPTLMHeadModel(self,*args,**kwargs)
transformers.TFOpenAIGPTLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFOpenAIGPTMainLayer(self,*args,**kwargs)
transformers.TFOpenAIGPTModel(self,*args,**kwargs)
transformers.TFOpenAIGPTModel.from_pretrained(self,*args,**kwargs)
transformers.TFOpenAIGPTPreTrainedModel(self,*args,**kwargs)
transformers.TFOpenAIGPTPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFPegasusForConditionalGeneration(self,*args,**kwargs)
transformers.TFPegasusForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFPreTrainedModel(self,*args,**kwargs)
transformers.TFPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaForMaskedLM(self,*args,**kwargs)
transformers.TFRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaForMultipleChoice(self,*args,**kwargs)
transformers.TFRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.TFRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaForSequenceClassification(self,*args,**kwargs)
transformers.TFRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaForTokenClassification(self,*args,**kwargs)
transformers.TFRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaMainLayer(self,*args,**kwargs)
transformers.TFRobertaModel(self,*args,**kwargs)
transformers.TFRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.TFRobertaPreTrainedModel(self,*args,**kwargs)
transformers.TFRobertaPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFSequenceSummary(self,*args,**kwargs)
transformers.TFSharedEmbeddings(self,*args,**kwargs)
transformers.TFT5EncoderModel(self,*args,**kwargs)
transformers.TFT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.TFT5ForConditionalGeneration(self,*args,**kwargs)
transformers.TFT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.TFT5Model(self,*args,**kwargs)
transformers.TFT5Model.from_pretrained(self,*args,**kwargs)
transformers.TFT5PreTrainedModel(self,*args,**kwargs)
transformers.TFT5PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFTrainer(self,*args,**kwargs)
transformers.TFTransfoXLLMHeadModel(self,*args,**kwargs)
transformers.TFTransfoXLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFTransfoXLMainLayer(self,*args,**kwargs)
transformers.TFTransfoXLModel(self,*args,**kwargs)
transformers.TFTransfoXLModel.from_pretrained(self,*args,**kwargs)
transformers.TFTransfoXLPreTrainedModel(self,*args,**kwargs)
transformers.TFTransfoXLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLMForMultipleChoice(self,*args,**kwargs)
transformers.TFXLMForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFXLMForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.TFXLMForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.TFXLMForSequenceClassification(self,*args,**kwargs)
transformers.TFXLMForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLMForTokenClassification(self,*args,**kwargs)
transformers.TFXLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLMMainLayer(self,*args,**kwargs)
transformers.TFXLMModel(self,*args,**kwargs)
transformers.TFXLMModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLMPreTrainedModel(self,*args,**kwargs)
transformers.TFXLMPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaForMaskedLM(self,*args,**kwargs)
transformers.TFXLMRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaForMultipleChoice(self,*args,**kwargs)
transformers.TFXLMRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.TFXLMRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaForSequenceClassification(self,*args,**kwargs)
transformers.TFXLMRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaForTokenClassification(self,*args,**kwargs)
transformers.TFXLMRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLMRobertaModel(self,*args,**kwargs)
transformers.TFXLMRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLMWithLMHeadModel(self,*args,**kwargs)
transformers.TFXLMWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetForMultipleChoice(self,*args,**kwargs)
transformers.TFXLNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.TFXLNetForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetForSequenceClassification(self,*args,**kwargs)
transformers.TFXLNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetForTokenClassification(self,*args,**kwargs)
transformers.TFXLNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetLMHeadModel(self,*args,**kwargs)
transformers.TFXLNetLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetMainLayer(self,*args,**kwargs)
transformers.TFXLNetModel(self,*args,**kwargs)
transformers.TFXLNetModel.from_pretrained(self,*args,**kwargs)
transformers.TFXLNetPreTrainedModel(self,*args,**kwargs)
transformers.TFXLNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.TensorFlowBenchmark(self,*args,**kwargs)
transformers.TensorFlowBenchmarkArguments(self,*args,**kwargs)
transformers.WarmUp(self,*args,**kwargs)
transformers.create_optimizer(*args,**kwargs)
transformers.shape_list(*args,**kwargs)
transformers.tf_top_k_top_p_filtering(*args,**kwargs)
transformers.utils.dummy_tf_objects.AdamWeightDecay(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.AdamWeightDecay.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.GradientAccumulator(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.GradientAccumulator.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAdaptiveEmbedding(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAdaptiveEmbedding.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAlbertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForCausalLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForCausalLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForCausalLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForPreTraining.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSeq2SeqLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSeq2SeqLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSeq2SeqLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelWithLMHead(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelWithLMHead.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFAutoModelWithLMHead.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartPretrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartPretrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBartPretrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertEmbeddings(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertEmbeddings.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBlenderbotForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBlenderbotForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFBlenderbotForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCTRLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFCamembertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRContextEncoder(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRContextEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedContextEncoder(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedContextEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedQuestionEncoder(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedQuestionEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedReader(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRPretrainedReader.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRQuestionEncoder(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRQuestionEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRReader(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDPRReader.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFDistilBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFElectraPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertWithLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertWithLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFlaubertWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelBaseModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelBaseModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelBaseModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFFunnelModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2DoubleHeadsModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2DoubleHeadsModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2DoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2ForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2ForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2ForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2LMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2LMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2LMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2MainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2MainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2Model(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2PreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2PreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFGPT2PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerSelfAttention(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLongformerSelfAttention.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertVisualFeatureEncoder(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFLxmertVisualFeatureEncoder.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMBartForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMBartForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMBartForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMPNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5EncoderModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5EncoderModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5ForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5ForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5Model(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMT5Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMarianMTModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMarianMTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMarianMTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForNextSentencePrediction(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForNextSentencePrediction.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForPreTraining(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForPreTraining.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFMobileBertPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTDoubleHeadsModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTDoubleHeadsModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTDoubleHeadsModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFOpenAIGPTPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPegasusForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPegasusForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPegasusForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFRobertaPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFSequenceSummary(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFSequenceSummary.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFSharedEmbeddings(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFSharedEmbeddings.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5EncoderModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5EncoderModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5EncoderModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5ForConditionalGeneration(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5ForConditionalGeneration.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5ForConditionalGeneration.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5Model(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5Model.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5Model.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5PreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5PreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFT5PreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTrainer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTrainer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFTransfoXLPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMaskedLM(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMaskedLM.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMaskedLM.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForQuestionAnswering(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForQuestionAnswering.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForQuestionAnswering.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMRobertaModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMWithLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMWithLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLMWithLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForMultipleChoice(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForMultipleChoice.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForMultipleChoice.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForQuestionAnsweringSimple(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForQuestionAnsweringSimple.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForQuestionAnsweringSimple.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForSequenceClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForSequenceClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForSequenceClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForTokenClassification(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForTokenClassification.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetForTokenClassification.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetLMHeadModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetLMHeadModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetLMHeadModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetMainLayer(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetMainLayer.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetPreTrainedModel(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetPreTrainedModel.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TFXLNetPreTrainedModel.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TensorFlowBenchmark(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TensorFlowBenchmark.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TensorFlowBenchmarkArguments(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.TensorFlowBenchmarkArguments.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.WarmUp(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.WarmUp.__init__(self,*args,**kwargs)
transformers.utils.dummy_tf_objects.create_optimizer(*args,**kwargs)
transformers.utils.dummy_tf_objects.shape_list(*args,**kwargs)
transformers.utils.dummy_tf_objects.tf_top_k_top_p_filtering(*args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/utils/dummy_tokenizers_objects.py----------------------------------------
transformers.AlbertTokenizerFast(self,*args,**kwargs)
transformers.AlbertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.BartTokenizerFast(self,*args,**kwargs)
transformers.BartTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.BarthezTokenizerFast(self,*args,**kwargs)
transformers.BarthezTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.BertTokenizerFast(self,*args,**kwargs)
transformers.BertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.CamembertTokenizerFast(self,*args,**kwargs)
transformers.CamembertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.DPRContextEncoderTokenizerFast(self,*args,**kwargs)
transformers.DPRContextEncoderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.DPRQuestionEncoderTokenizerFast(self,*args,**kwargs)
transformers.DPRQuestionEncoderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.DPRReaderTokenizerFast(self,*args,**kwargs)
transformers.DPRReaderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.DistilBertTokenizerFast(self,*args,**kwargs)
transformers.DistilBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.ElectraTokenizerFast(self,*args,**kwargs)
transformers.ElectraTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.FunnelTokenizerFast(self,*args,**kwargs)
transformers.FunnelTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.GPT2TokenizerFast(self,*args,**kwargs)
transformers.GPT2TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.HerbertTokenizerFast(self,*args,**kwargs)
transformers.HerbertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.LayoutLMTokenizerFast(self,*args,**kwargs)
transformers.LayoutLMTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.LongformerTokenizerFast(self,*args,**kwargs)
transformers.LongformerTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.LxmertTokenizerFast(self,*args,**kwargs)
transformers.LxmertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.MBartTokenizerFast(self,*args,**kwargs)
transformers.MBartTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.MPNetTokenizerFast(self,*args,**kwargs)
transformers.MPNetTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.MT5TokenizerFast(self,*args,**kwargs)
transformers.MT5TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.MobileBertTokenizerFast(self,*args,**kwargs)
transformers.MobileBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.OpenAIGPTTokenizerFast(self,*args,**kwargs)
transformers.OpenAIGPTTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.PegasusTokenizerFast(self,*args,**kwargs)
transformers.PegasusTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.PreTrainedTokenizerFast(self,*args,**kwargs)
transformers.PreTrainedTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.ReformerTokenizerFast(self,*args,**kwargs)
transformers.ReformerTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.RetriBertTokenizerFast(self,*args,**kwargs)
transformers.RetriBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.RobertaTokenizerFast(self,*args,**kwargs)
transformers.RobertaTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.SqueezeBertTokenizerFast(self,*args,**kwargs)
transformers.SqueezeBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.T5TokenizerFast(self,*args,**kwargs)
transformers.T5TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.XLMRobertaTokenizerFast(self,*args,**kwargs)
transformers.XLMRobertaTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.XLNetTokenizerFast(self,*args,**kwargs)
transformers.XLNetTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.convert_slow_tokenizer(*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.AlbertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.AlbertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.AlbertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BartTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BartTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BartTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BarthezTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BarthezTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BarthezTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.BertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.CamembertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.CamembertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.CamembertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRContextEncoderTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRContextEncoderTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRContextEncoderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRQuestionEncoderTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRQuestionEncoderTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRQuestionEncoderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRReaderTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRReaderTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DPRReaderTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DistilBertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DistilBertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.DistilBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ElectraTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ElectraTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ElectraTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.FunnelTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.FunnelTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.FunnelTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.GPT2TokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.GPT2TokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.GPT2TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.HerbertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.HerbertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.HerbertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LayoutLMTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LayoutLMTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LayoutLMTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LongformerTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LongformerTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LongformerTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LxmertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LxmertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.LxmertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MBartTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MBartTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MBartTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MPNetTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MPNetTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MPNetTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MT5TokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MT5TokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MT5TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MobileBertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MobileBertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.MobileBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.OpenAIGPTTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.OpenAIGPTTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.OpenAIGPTTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PegasusTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PegasusTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PegasusTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PreTrainedTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PreTrainedTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.PreTrainedTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ReformerTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ReformerTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.ReformerTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RetriBertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RetriBertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RetriBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RobertaTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RobertaTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.RobertaTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.SqueezeBertTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.SqueezeBertTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.SqueezeBertTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.T5TokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.T5TokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.T5TokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLMRobertaTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLMRobertaTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLMRobertaTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLNetTokenizerFast(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLNetTokenizerFast.__init__(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.XLNetTokenizerFast.from_pretrained(self,*args,**kwargs)
transformers.utils.dummy_tokenizers_objects.convert_slow_tokenizer(*args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/add_new_model.py----------------------------------------
A:transformers.commands.add_new_model.logger->utils.logging.get_logger(__name__)
A:transformers.commands.add_new_model.add_new_model_parser->parser.add_parser('add-new-model')
A:transformers.commands.add_new_model.testing_configuration->json.load(configuration_file)
A:transformers.commands.add_new_model.configuration->json.load(configuration_file)
A:transformers.commands.add_new_model.lines->f.readlines()
A:transformers.commands.add_new_model.(fh, abs_path)->mkstemp()
A:transformers.commands.add_new_model.skip_file->skip_units(line)
A:transformers.commands.add_new_model.skip_snippet->skip_units(line)
transformers.commands.add_new_model.AddNewModelCommand(self,testing:bool,testing_file:str,path=None,*args)
transformers.commands.add_new_model.AddNewModelCommand.__init__(self,testing:bool,testing_file:str,path=None,*args)
transformers.commands.add_new_model.AddNewModelCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.add_new_model.AddNewModelCommand.run(self)
transformers.commands.add_new_model.add_new_model_command_factory(args:Namespace)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/serving.py----------------------------------------
A:transformers.commands.serving.logger->utils.logging.get_logger('transformers-cli/serving')
A:transformers.commands.serving.nlp->pipeline(task=args.task, model=args.model if args.model else None, config=args.config, tokenizer=args.tokenizer, device=args.device)
A:transformers.commands.serving.serve_parser->parser.add_parser('serve', help='CLI tool to run inference requests through REST and GraphQL endpoints.')
A:transformers.commands.serving.self._app->FastAPI(routes=[APIRoute('/', self.model_info, response_model=ServeModelInfoResult, response_class=JSONResponse, methods=['GET']), APIRoute('/tokenize', self.tokenize, response_model=ServeTokenizeResult, response_class=JSONResponse, methods=['POST']), APIRoute('/detokenize', self.detokenize, response_model=ServeDeTokenizeResult, response_class=JSONResponse, methods=['POST']), APIRoute('/forward', self.forward, response_model=ServeForwardResult, response_class=JSONResponse, methods=['POST'])], timeout=600)
A:transformers.commands.serving.tokens_txt->self._pipeline.tokenizer.tokenize(text_input)
A:transformers.commands.serving.tokens_ids->self._pipeline.tokenizer.convert_tokens_to_ids(tokens_txt)
A:transformers.commands.serving.decoded_str->self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)
A:transformers.commands.serving.output->self._pipeline(inputs)
transformers.commands.serving.ServeCommand(self,pipeline:Pipeline,host:str,port:int,workers:int)
transformers.commands.serving.ServeCommand.__init__(self,pipeline:Pipeline,host:str,port:int,workers:int)
transformers.commands.serving.ServeCommand.detokenize(self,tokens_ids:List[int]=Body(None,embed=True),skip_special_tokens:bool=Body(False,embed=True),cleanup_tokenization_spaces:bool=Body(True,embed=True))
transformers.commands.serving.ServeCommand.model_info(self)
transformers.commands.serving.ServeCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.serving.ServeCommand.run(self)
transformers.commands.serving.ServeCommand.tokenize(self,text_input:str=Body(None,embed=True),return_ids:bool=Body(False,embed=True))
transformers.commands.serving.ServeDeTokenizeResult(BaseModel)
transformers.commands.serving.ServeForwardResult(BaseModel)
transformers.commands.serving.ServeModelInfoResult(BaseModel)
transformers.commands.serving.ServeTokenizeResult(BaseModel)
transformers.commands.serving.serve_command_factory(args:Namespace)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/run.py----------------------------------------
A:transformers.commands.run.logger->utils.logging.get_logger(__name__)
A:transformers.commands.run.nlp->pipeline(task=args.task, model=args.model if args.model else None, config=args.config, tokenizer=args.tokenizer, device=args.device)
A:transformers.commands.run.reader->transformers.pipelines.PipelineDataFormat.from_str(format=format, output_path=args.output, input_path=args.input, column=args.column if args.column else nlp.default_input_names, overwrite=args.overwrite)
A:transformers.commands.run.run_parser->parser.add_parser('run', help='Run a pipeline through the CLI')
A:transformers.commands.run.binary_path->self._reader.save_binary(outputs)
transformers.commands.run.RunCommand(self,nlp:Pipeline,reader:PipelineDataFormat)
transformers.commands.run.RunCommand.__init__(self,nlp:Pipeline,reader:PipelineDataFormat)
transformers.commands.run.RunCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.run.RunCommand.run(self)
transformers.commands.run.run_command_factory(args)
transformers.commands.run.try_infer_format_from_ext(path:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/user.py----------------------------------------
A:transformers.commands.user.login_parser->parser.add_parser('login', help='Log in using the same credentials as on huggingface.co')
A:transformers.commands.user.whoami_parser->parser.add_parser('whoami', help='Find out which huggingface.co account you are logged in as.')
A:transformers.commands.user.logout_parser->parser.add_parser('logout', help='Log out')
A:transformers.commands.user.s3_parser->parser.add_parser('s3_datasets', help='{ls, rm} Commands to interact with the files you upload on S3.')
A:transformers.commands.user.s3_subparsers->parser.add_parser('s3_datasets', help='{ls, rm} Commands to interact with the files you upload on S3.').add_subparsers(help='s3 related commands')
A:transformers.commands.user.ls_parser->repo_parser.add_subparsers(help='huggingface.co repos related commands').add_parser('ls-files', help='List all your files on huggingface.co')
A:transformers.commands.user.rm_parser->parser.add_parser('s3_datasets', help='{ls, rm} Commands to interact with the files you upload on S3.').add_subparsers(help='s3 related commands').add_parser('rm')
A:transformers.commands.user.upload_parser->parser.add_parser('upload', help='Deprecated: used to be the way to upload a model to S3. We now use a git-based system for storing models and other artifacts. Use the `repo create` command instead.')
A:transformers.commands.user.repo_parser->parser.add_parser('repo', help='{create, ls-files} Commands to interact with your huggingface.co repos.')
A:transformers.commands.user.repo_subparsers->parser.add_parser('repo', help='{create, ls-files} Commands to interact with your huggingface.co repos.').add_subparsers(help='huggingface.co repos related commands')
A:transformers.commands.user.repo_create_parser->parser.add_parser('repo', help='{create, ls-files} Commands to interact with your huggingface.co repos.').add_subparsers(help='huggingface.co repos related commands').add_parser('create', help='Create a new repo on huggingface.co')
A:transformers.commands.user.row_format->('{{:{}}} ' * len(headers)).format(*col_widths)
A:transformers.commands.user.self._api->HfApi()
A:transformers.commands.user.username->input('Username: ')
A:transformers.commands.user.password->getpass()
A:transformers.commands.user.token->transformers.hf_api.HfFolder.get_token()
A:transformers.commands.user.(user, orgs)->self._api.whoami(token)
A:transformers.commands.user.objs->self._api.list_repos_objs(token, organization=self.args.organization)
A:transformers.commands.user.stdout->subprocess.check_output(['git-lfs', '--version']).decode('utf-8')
A:transformers.commands.user.(user, _)->self._api.whoami(token)
A:transformers.commands.user.choice->input('Proceed? [Y/n] ').lower()
A:transformers.commands.user.url->self._api.create_repo(token, name=self.args.name, organization=self.args.organization)
A:transformers.commands.user.local_path->os.path.abspath(self.args.path)
A:transformers.commands.user.rel_path->os.path.basename(local_path)
A:transformers.commands.user.files->self.walk_dir(rel_path)
A:transformers.commands.user.access_url->self._api.presign_and_upload(token=token, filename=filename, filepath=filepath, organization=self.args.organization)
transformers.commands.user.ANSI
transformers.commands.user.ANSI.bold(cls,s)
transformers.commands.user.ANSI.gray(cls,s)
transformers.commands.user.ANSI.red(cls,s)
transformers.commands.user.BaseUserCommand(self,args)
transformers.commands.user.BaseUserCommand.__init__(self,args)
transformers.commands.user.DeleteObjCommand(BaseUserCommand)
transformers.commands.user.DeleteObjCommand.run(self)
transformers.commands.user.DeprecatedUploadCommand(BaseUserCommand)
transformers.commands.user.DeprecatedUploadCommand.run(self)
transformers.commands.user.ListObjsCommand(BaseUserCommand)
transformers.commands.user.ListObjsCommand.run(self)
transformers.commands.user.ListReposObjsCommand(BaseUserCommand)
transformers.commands.user.ListReposObjsCommand.run(self)
transformers.commands.user.LoginCommand(BaseUserCommand)
transformers.commands.user.LoginCommand.run(self)
transformers.commands.user.LogoutCommand(BaseUserCommand)
transformers.commands.user.LogoutCommand.run(self)
transformers.commands.user.RepoCreateCommand(BaseUserCommand)
transformers.commands.user.RepoCreateCommand.run(self)
transformers.commands.user.UploadCommand(BaseUserCommand)
transformers.commands.user.UploadCommand.run(self)
transformers.commands.user.UploadCommand.walk_dir(self,rel_path)
transformers.commands.user.UserCommands(BaseTransformersCLICommand)
transformers.commands.user.UserCommands.register_subcommand(parser:ArgumentParser)
transformers.commands.user.WhoamiCommand(BaseUserCommand)
transformers.commands.user.WhoamiCommand.run(self)
transformers.commands.user.tabulate(rows:List[List[Union[str,int]]],headers:List[str])->str


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/env.py----------------------------------------
A:transformers.commands.env.download_parser->parser.add_parser('env')
A:transformers.commands.env.pt_cuda_available->torch.cuda.is_available()
A:transformers.commands.env.tf_cuda_available->bool(tf.config.list_physical_devices('GPU'))
transformers.commands.env.EnvironmentCommand(BaseTransformersCLICommand)
transformers.commands.env.EnvironmentCommand.format_dict(d)
transformers.commands.env.EnvironmentCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.env.EnvironmentCommand.run(self)
transformers.commands.env.info_command_factory(_)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/train.py----------------------------------------
A:transformers.commands.train.train_parser->parser.add_parser('train', help='CLI tool to train a model on a task.')
A:transformers.commands.train.self.logger->utils.logging.get_logger('transformers-cli/training')
A:transformers.commands.train.self.pipeline->transformers.TextClassificationPipeline.from_pretrained(args.model)
A:transformers.commands.train.self.train_dataset->transformers.SingleSentenceClassificationProcessor.create_from_csv(args.train_data, column_label=args.column_label, column_text=args.column_text, column_id=args.column_id, skip_first_row=args.skip_first_row)
A:transformers.commands.train.self.valid_dataset->transformers.SingleSentenceClassificationProcessor.create_from_csv(args.validation_data, column_label=args.column_label, column_text=args.column_text, column_id=args.column_id, skip_first_row=args.skip_first_row)
transformers.commands.train.TrainCommand(self,args:Namespace)
transformers.commands.train.TrainCommand.__init__(self,args:Namespace)
transformers.commands.train.TrainCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.train.TrainCommand.run(self)
transformers.commands.train.TrainCommand.run_tf(self)
transformers.commands.train.TrainCommand.run_torch(self)
transformers.commands.train.train_command_factory(args:Namespace)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/download.py----------------------------------------
A:transformers.commands.download.download_parser->parser.add_parser('download')
transformers.commands.download.DownloadCommand(self,model:str,cache:str,force:bool)
transformers.commands.download.DownloadCommand.__init__(self,model:str,cache:str,force:bool)
transformers.commands.download.DownloadCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.download.DownloadCommand.run(self)
transformers.commands.download.download_command_factory(args)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/__init__.py----------------------------------------
transformers.commands.__init__.BaseTransformersCLICommand(ABC)
transformers.commands.__init__.BaseTransformersCLICommand.register_subcommand(parser:ArgumentParser)
transformers.commands.__init__.BaseTransformersCLICommand.run(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/lfs.py----------------------------------------
A:transformers.commands.lfs.logger->utils.logging.get_logger(__name__)
A:transformers.commands.lfs.enable_parser->parser.add_parser('lfs-enable-largefiles', help='Configure your repository to enable upload of files > 5GB.')
A:transformers.commands.lfs.upload_parser->parser.add_parser(LFS_MULTIPART_UPLOAD_COMMAND, help='Command will get called by git-lfs, do not call it directly.')
A:transformers.commands.lfs.local_path->os.path.abspath(self.args.path)
A:transformers.commands.lfs.msg->read_msg()
A:transformers.commands.lfs.self.f->open(self.filepath, 'rb')
A:transformers.commands.lfs.data->self.f.read(remaining_amount if n < 0 else min(n, remaining_amount))
A:transformers.commands.lfs.init_msg->json.loads(sys.stdin.readline().strip())
A:transformers.commands.lfs.chunk_size->int(header.pop('chunk_size'))
A:transformers.commands.lfs.r->requests.post(completion_url, json={'oid': oid, 'parts': parts})
transformers.commands.lfs.FileSlice(self,filepath:str,seek_from:int,read_limit:int)
transformers.commands.lfs.FileSlice.__enter__(self)
transformers.commands.lfs.FileSlice.__exit__(self,*args)
transformers.commands.lfs.FileSlice.__init__(self,filepath:str,seek_from:int,read_limit:int)
transformers.commands.lfs.FileSlice.__iter__(self)
transformers.commands.lfs.FileSlice.__len__(self)
transformers.commands.lfs.FileSlice.read(self,n=-1)
transformers.commands.lfs.LfsCommands(BaseTransformersCLICommand)
transformers.commands.lfs.LfsCommands.register_subcommand(parser:ArgumentParser)
transformers.commands.lfs.LfsEnableCommand(self,args)
transformers.commands.lfs.LfsEnableCommand.__init__(self,args)
transformers.commands.lfs.LfsEnableCommand.run(self)
transformers.commands.lfs.LfsUploadCommand(self,args)
transformers.commands.lfs.LfsUploadCommand.__init__(self,args)
transformers.commands.lfs.LfsUploadCommand.run(self)
transformers.commands.lfs.read_msg()->Optional[Dict]
transformers.commands.lfs.write_msg(msg:Dict)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/convert.py----------------------------------------
A:transformers.commands.convert.train_parser->parser.add_parser('convert', help='CLI tool to run convert model from original author checkpoints to Transformers PyTorch checkpoints.')
A:transformers.commands.convert.self._logger->utils.logging.get_logger('transformers-cli/converting')
transformers.commands.convert.ConvertCommand(self,model_type:str,tf_checkpoint:str,pytorch_dump_output:str,config:str,finetuning_task_name:str,*args)
transformers.commands.convert.ConvertCommand.__init__(self,model_type:str,tf_checkpoint:str,pytorch_dump_output:str,config:str,finetuning_task_name:str,*args)
transformers.commands.convert.ConvertCommand.register_subcommand(parser:ArgumentParser)
transformers.commands.convert.ConvertCommand.run(self)
transformers.commands.convert.convert_command_factory(args:Namespace)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/commands/transformers_cli.py----------------------------------------
A:transformers.commands.transformers_cli.parser->ArgumentParser('Transformers CLI tool', usage='transformers-cli <command> [<args>]')
A:transformers.commands.transformers_cli.commands_parser->ArgumentParser('Transformers CLI tool', usage='transformers-cli <command> [<args>]').add_subparsers(help='transformers-cli command helpers')
A:transformers.commands.transformers_cli.args->ArgumentParser('Transformers CLI tool', usage='transformers-cli <command> [<args>]').parse_args()
A:transformers.commands.transformers_cli.service->ArgumentParser('Transformers CLI tool', usage='transformers-cli <command> [<args>]').parse_args().func(args)
transformers.commands.transformers_cli.main()


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark_tf.py----------------------------------------
A:transformers.benchmark.benchmark_tf.logger->utils.logging.get_logger(__name__)
A:transformers.benchmark.benchmark_tf.rng->random.Random()
A:transformers.benchmark.benchmark_tf._inference->self._prepare_inference_func(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark_tf._train->self._prepare_train_func(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark_tf.transformers_module->__import__('transformers', fromlist=[model_class])
A:transformers.benchmark.benchmark_tf.model_cls->getattr(transformers_module, model_class)
A:transformers.benchmark.benchmark_tf.model->TF_MODEL_WITH_LM_HEAD_MAPPING[config.__class__](config)
A:transformers.benchmark.benchmark_tf.input_ids->random_input_ids(batch_size, sequence_length, vocab_size)
A:transformers.benchmark.benchmark_tf.gradients->tensorflow.gradients(loss, model.trainable_variables)
A:transformers.benchmark.benchmark_tf.runtimes->timeit.repeat(func, repeat=self.args.repeat, number=10)
A:transformers.benchmark.benchmark_tf.trace->start_memory_tracing('transformers')
A:transformers.benchmark.benchmark_tf.handle->py3nvml.py3nvml.nvmlDeviceGetHandleByIndex(self.args.device_idx)
A:transformers.benchmark.benchmark_tf.meminfo->py3nvml.py3nvml.nvmlDeviceGetMemoryInfo(handle)
A:transformers.benchmark.benchmark_tf.memory->Memory(max_bytes_in_use)
A:transformers.benchmark.benchmark_tf.memory_bytes->measure_peak_memory_cpu(func)
A:transformers.benchmark.benchmark_tf.summary->stop_memory_tracing(trace)
transformers.TensorFlowBenchmark(Benchmark)
transformers.TensorFlowBenchmark._inference_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.TensorFlowBenchmark._inference_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.TensorFlowBenchmark._measure_memory(self,func:Callable[[],None])->[Memory, MemorySummary]
transformers.TensorFlowBenchmark._measure_speed(self,func)->float
transformers.TensorFlowBenchmark._prepare_inference_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.TensorFlowBenchmark._prepare_train_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.TensorFlowBenchmark._train_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.TensorFlowBenchmark._train_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.TensorFlowBenchmark.framework_version(self)
transformers.benchmark.benchmark_tf.TensorFlowBenchmark(Benchmark)
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._inference_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._inference_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._measure_memory(self,func:Callable[[],None])->[Memory, MemorySummary]
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._measure_speed(self,func)->float
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._prepare_inference_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._prepare_train_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._train_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_tf.TensorFlowBenchmark._train_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark_tf.TensorFlowBenchmark.framework_version(self)
transformers.benchmark.benchmark_tf.random_input_ids(batch_size:int,sequence_length:int,vocab_size:int)->['tf.Tensor']
transformers.benchmark.benchmark_tf.run_with_tf_optimizations(do_eager_mode:bool,use_xla:bool)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark.py----------------------------------------
A:transformers.benchmark.benchmark.logger->utils.logging.get_logger(__name__)
A:transformers.benchmark.benchmark._inference->self._prepare_inference_func(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark._train->self._prepare_train_func(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark.transformers_module->__import__('transformers', fromlist=[model_class])
A:transformers.benchmark.benchmark.model_cls->getattr(transformers_module, model_class)
A:transformers.benchmark.benchmark.model->MODEL_WITH_LM_HEAD_MAPPING[config.__class__](config)
A:transformers.benchmark.benchmark.input_ids->torch.randint(vocab_size, (batch_size, sequence_length), dtype=torch.long, device=self.args.device)
A:transformers.benchmark.benchmark.inference_model->torch.jit.trace(model, input_ids)
A:transformers.benchmark.benchmark.outputs->inference_model(input_ids)
A:transformers.benchmark.benchmark.runtimes->timeit.repeat(func, repeat=self.args.repeat, number=10)
A:transformers.benchmark.benchmark.trace->start_memory_tracing('transformers')
A:transformers.benchmark.benchmark.handle->py3nvml.py3nvml.nvmlDeviceGetHandleByIndex(self.args.device_idx)
A:transformers.benchmark.benchmark.meminfo->py3nvml.py3nvml.nvmlDeviceGetMemoryInfo(handle)
A:transformers.benchmark.benchmark.memory->Memory(max_bytes_in_use)
A:transformers.benchmark.benchmark.memory_bytes->measure_peak_memory_cpu(func)
A:transformers.benchmark.benchmark.summary->stop_memory_tracing(trace)
transformers.PyTorchBenchmark(Benchmark)
transformers.PyTorchBenchmark._inference_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.PyTorchBenchmark._inference_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.PyTorchBenchmark._measure_memory(self,func:Callable[[],None])->[Memory, MemorySummary]
transformers.PyTorchBenchmark._measure_speed(self,func)->float
transformers.PyTorchBenchmark._prepare_inference_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.PyTorchBenchmark._prepare_train_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.PyTorchBenchmark._train_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.PyTorchBenchmark._train_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.PyTorchBenchmark.framework_version(self)
transformers.benchmark.benchmark.PyTorchBenchmark(Benchmark)
transformers.benchmark.benchmark.PyTorchBenchmark._inference_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark.PyTorchBenchmark._inference_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark.PyTorchBenchmark._measure_memory(self,func:Callable[[],None])->[Memory, MemorySummary]
transformers.benchmark.benchmark.PyTorchBenchmark._measure_speed(self,func)->float
transformers.benchmark.benchmark.PyTorchBenchmark._prepare_inference_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.benchmark.benchmark.PyTorchBenchmark._prepare_train_func(self,model_name:str,batch_size:int,sequence_length:int)->Callable[[], None]
transformers.benchmark.benchmark.PyTorchBenchmark._train_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark.PyTorchBenchmark._train_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark.PyTorchBenchmark.framework_version(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark_args.py----------------------------------------
A:transformers.benchmark.benchmark_args.logger->utils.logging.get_logger(__name__)
A:transformers.benchmark.benchmark_args.self.torchscript->kwargs.pop('torchscript', self.torchscript)
A:transformers.benchmark.benchmark_args.self.torch_xla_tpu_print_metrics->kwargs.pop('torch_xla_tpu_print_metrics', self.torch_xla_tpu_print_metrics)
A:transformers.benchmark.benchmark_args.self.fp16_opt_level->kwargs.pop('fp16_opt_level', self.fp16_opt_level)
A:transformers.benchmark.benchmark_args.device->torch.device('cuda' if torch.cuda.is_available() else 'cpu')
A:transformers.benchmark.benchmark_args.n_gpu->torch.cuda.device_count()
transformers.PyTorchBenchmarkArguments(self,**kwargs)
transformers.PyTorchBenchmarkArguments._setup_devices(self)->Tuple['torch.device', int]
transformers.PyTorchBenchmarkArguments.device(self)->'torch.device'
transformers.PyTorchBenchmarkArguments.device_idx(self)->int
transformers.PyTorchBenchmarkArguments.is_gpu(self)
transformers.PyTorchBenchmarkArguments.is_tpu(self)
transformers.PyTorchBenchmarkArguments.n_gpu(self)
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments(self,**kwargs)
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.__init__(self,**kwargs)
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments._setup_devices(self)->Tuple['torch.device', int]
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.device(self)->'torch.device'
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.device_idx(self)->int
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.is_gpu(self)
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.is_tpu(self)
transformers.benchmark.benchmark_args.PyTorchBenchmarkArguments.n_gpu(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark_utils.py----------------------------------------
A:transformers.benchmark.benchmark_utils.logger->utils.logging.get_logger(__name__)
A:transformers.benchmark.benchmark_utils.BenchmarkOutput->namedtuple('BenchmarkOutput', ['time_inference_result', 'memory_inference_result', 'time_train_result', 'memory_train_result', 'inference_summary', 'train_summary'])
A:transformers.benchmark.benchmark_utils.result->str(result)
A:transformers.benchmark.benchmark_utils.queue->Queue()
A:transformers.benchmark.benchmark_utils.p->Process(target=wrapper_func, args=[queue] + list(args))
A:transformers.benchmark.benchmark_utils.process->psutil.Process(os.getpid())
A:transformers.benchmark.benchmark_utils.self.mem_usage->max(self.mem_usage, get_cpu_memory(self.process_id))
A:transformers.benchmark.benchmark_utils.stop->self.connection.poll(self.interval)
A:transformers.benchmark.benchmark_utils.(child_connection, parent_connection)->Pipe()
A:transformers.benchmark.benchmark_utils.mem_process->MemoryMeasureProcess(os.getpid(), child_connection, interval)
A:transformers.benchmark.benchmark_utils.max_memory->parent_connection.recv()
A:transformers.benchmark.benchmark_utils.num_measurements->parent_connection.recv()
A:transformers.benchmark.benchmark_utils.parent->psutil.Process(os.getpid())
A:transformers.benchmark.benchmark_utils.line->linecache.getline(filename, lineno).rstrip()
A:transformers.benchmark.benchmark_utils.traced_state->Frame(filename, name, lineno, event, line)
A:transformers.benchmark.benchmark_utils.mem->psutil.Process(os.getpid()).memory_info()
A:transformers.benchmark.benchmark_utils.handle->py3nvml.py3nvml.nvmlDeviceGetHandleByIndex(self.args.device_idx)
A:transformers.benchmark.benchmark_utils.meminfo->py3nvml.py3nvml.nvmlDeviceGetMemoryInfo(handle)
A:transformers.benchmark.benchmark_utils.mem_state->UsedMemoryState(traced_state, cpu_mem, gpu_mem)
A:transformers.benchmark.benchmark_utils.cumulative_memory_dict->defaultdict(lambda : [0, 0, 0])
A:transformers.benchmark.benchmark_utils.cumulative_memory->list((MemoryState(frame=frame, cpu=Memory(cpu_mem_inc), gpu=Memory(gpu_mem_inc), cpu_gpu=Memory(cpu_gpu_mem_inc)) for (frame, (cpu_mem_inc, gpu_mem_inc, cpu_gpu_mem_inc)) in cumulative_memory))
A:transformers.benchmark.benchmark_utils.memory_curr_trace->sorted(memory_curr_trace, key=lambda x: x.cpu_gpu.bytes, reverse=True)
A:transformers.benchmark.benchmark_utils.total_memory->Memory(total_memory)
A:transformers.benchmark.benchmark_utils.inference_result_time->copy.deepcopy(result_dict)
A:transformers.benchmark.benchmark_utils.inference_result_memory->copy.deepcopy(result_dict)
A:transformers.benchmark.benchmark_utils.train_result_time->copy.deepcopy(result_dict)
A:transformers.benchmark.benchmark_utils.train_result_memory->copy.deepcopy(result_dict)
A:transformers.benchmark.benchmark_utils.inference_result_time[model_name]->copy.deepcopy(model_dict)
A:transformers.benchmark.benchmark_utils.inference_result_memory[model_name]->copy.deepcopy(model_dict)
A:transformers.benchmark.benchmark_utils.train_result_time[model_name]->copy.deepcopy(model_dict)
A:transformers.benchmark.benchmark_utils.train_result_memory[model_name]->copy.deepcopy(model_dict)
A:transformers.benchmark.benchmark_utils.(memory, inference_summary)->self.inference_memory(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark_utils.time->self.train_speed(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark_utils.(memory, train_summary)->self.train_memory(model_name, batch_size, sequence_length)
A:transformers.benchmark.benchmark_utils.writer->csv.DictWriter(csv_file, fieldnames=fieldnames + ['result'])
A:transformers.benchmark.benchmark_utils.info['python_version']->platform.python_version()
A:transformers.benchmark.benchmark_utils.info['system']->platform.system()
A:transformers.benchmark.benchmark_utils.info['cpu']->platform.processor()
A:transformers.benchmark.benchmark_utils.info['date']->datetime.datetime.date(datetime.now())
A:transformers.benchmark.benchmark_utils.info['time']->datetime.datetime.time(datetime.now())
A:transformers.benchmark.benchmark_utils.info['cpu_ram_mb']->bytes_to_mega_bytes(psutil.virtual_memory().total)
A:transformers.benchmark.benchmark_utils.info['gpu']->py3nvml.py3nvml.nvmlDeviceGetName(handle)
A:transformers.benchmark.benchmark_utils.info['gpu_ram_mb']->bytes_to_mega_bytes(nvml.nvmlDeviceGetMemoryInfo(handle).total)
A:transformers.benchmark.benchmark_utils.info['gpu_performance_state']->py3nvml.py3nvml.nvmlDeviceGetPerformanceState(handle)
transformers.benchmark.benchmark_utils.Benchmark(self,args:BenchmarkArguments=None,configs:PretrainedConfig=None)
transformers.benchmark.benchmark_utils.Benchmark.__init__(self,args:BenchmarkArguments=None,configs:PretrainedConfig=None)
transformers.benchmark.benchmark_utils.Benchmark._inference_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_utils.Benchmark._inference_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark_utils.Benchmark._train_memory(self,model_name:str,batch_size:int,sequence_length:int)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_utils.Benchmark._train_speed(self,model_name:str,batch_size:int,sequence_length:int)->float
transformers.benchmark.benchmark_utils.Benchmark.environment_info(self)
transformers.benchmark.benchmark_utils.Benchmark.framework_version(self)
transformers.benchmark.benchmark_utils.Benchmark.inference_memory(self,*args,**kwargs)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_utils.Benchmark.inference_speed(self,*args,**kwargs)->float
transformers.benchmark.benchmark_utils.Benchmark.print_fn(self)
transformers.benchmark.benchmark_utils.Benchmark.print_memory_trace_statistics(self,summary:MemorySummary)
transformers.benchmark.benchmark_utils.Benchmark.print_results(self,result_dict,type_label)
transformers.benchmark.benchmark_utils.Benchmark.run(self)
transformers.benchmark.benchmark_utils.Benchmark.save_to_csv(self,result_dict,filename)
transformers.benchmark.benchmark_utils.Benchmark.train_memory(self,*args,**kwargs)->[Memory, Optional[MemorySummary]]
transformers.benchmark.benchmark_utils.Benchmark.train_speed(self,*args,**kwargs)->float
transformers.benchmark.benchmark_utils.Frame(NamedTuple)
transformers.benchmark.benchmark_utils.Memory(NamedTuple)
transformers.benchmark.benchmark_utils.Memory.__repr__(self)->str
transformers.benchmark.benchmark_utils.MemoryState(NamedTuple)
transformers.benchmark.benchmark_utils.MemorySummary(NamedTuple)
transformers.benchmark.benchmark_utils.UsedMemoryState(NamedTuple)
transformers.benchmark.benchmark_utils.bytes_to_mega_bytes(memory_amount:int)->int
transformers.benchmark.benchmark_utils.is_memory_tracing_enabled()
transformers.benchmark.benchmark_utils.measure_peak_memory_cpu(function:Callable[[],None],interval=0.5,device_idx=None)->int
transformers.benchmark.benchmark_utils.separate_process_wrapper_fn(func:Callable[[],None],do_multi_processing:bool)->Callable[[], None]
transformers.benchmark.benchmark_utils.start_memory_tracing(modules_to_trace:Optional[Union[str,Iterable[str]]]=None,modules_not_to_trace:Optional[Union[str,Iterable[str]]]=None,events_to_trace:str='line',gpus_to_trace:Optional[List[int]]=None)->MemoryTrace
transformers.benchmark.benchmark_utils.stop_memory_tracing(memory_trace:Optional[MemoryTrace]=None,ignore_released_memory:bool=True)->Optional[MemorySummary]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark_args_tf.py----------------------------------------
A:transformers.benchmark.benchmark_args_tf.logger->utils.logging.get_logger(__name__)
A:transformers.benchmark.benchmark_args_tf.self.tpu_name->kwargs.pop('tpu_name', self.tpu_name)
A:transformers.benchmark.benchmark_args_tf.self.device_idx->kwargs.pop('device_idx', self.device_idx)
A:transformers.benchmark.benchmark_args_tf.self.eager_mode->kwargs.pop('eager_mode', self.eager_mode)
A:transformers.benchmark.benchmark_args_tf.self.use_xla->kwargs.pop('use_xla', self.use_xla)
A:transformers.benchmark.benchmark_args_tf.tpu->tensorflow.distribute.cluster_resolver.TPUClusterResolver()
A:transformers.benchmark.benchmark_args_tf.strategy->tensorflow.distribute.OneDeviceStrategy(device=f'/cpu:{self.device_idx}')
transformers.TensorFlowBenchmarkArguments(self,**kwargs)
transformers.TensorFlowBenchmarkArguments._setup_strategy(self)->Tuple['tf.distribute.Strategy', 'tf.distribute.cluster_resolver.TPUClusterResolver']
transformers.TensorFlowBenchmarkArguments._setup_tpu(self)->Tuple['tf.distribute.cluster_resolver.TPUClusterResolver']
transformers.TensorFlowBenchmarkArguments.gpu_list(self)
transformers.TensorFlowBenchmarkArguments.is_gpu(self)->bool
transformers.TensorFlowBenchmarkArguments.is_tpu(self)->bool
transformers.TensorFlowBenchmarkArguments.n_gpu(self)->int
transformers.TensorFlowBenchmarkArguments.strategy(self)->'tf.distribute.Strategy'
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments(self,**kwargs)
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.__init__(self,**kwargs)
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments._setup_strategy(self)->Tuple['tf.distribute.Strategy', 'tf.distribute.cluster_resolver.TPUClusterResolver']
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments._setup_tpu(self)->Tuple['tf.distribute.cluster_resolver.TPUClusterResolver']
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.gpu_list(self)
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.is_gpu(self)->bool
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.is_tpu(self)->bool
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.n_gpu(self)->int
transformers.benchmark.benchmark_args_tf.TensorFlowBenchmarkArguments.strategy(self)->'tf.distribute.Strategy'


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/benchmark_args_utils.py----------------------------------------
A:transformers.benchmark.benchmark_args_utils.logger->utils.logging.get_logger(__name__)
transformers.benchmark.benchmark_args_utils.BenchmarkArguments
transformers.benchmark.benchmark_args_utils.BenchmarkArguments.do_multi_processing(self)
transformers.benchmark.benchmark_args_utils.BenchmarkArguments.model_names(self)
transformers.benchmark.benchmark_args_utils.BenchmarkArguments.to_json_string(self)
transformers.benchmark.benchmark_args_utils.list_field(default=None,metadata=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/benchmark/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/tokenization_distilbert_fast.py----------------------------------------
A:transformers.models.distilbert.tokenization_distilbert_fast.logger->utils.logging.get_logger(__name__)
transformers.DistilBertTokenizerFast(BertTokenizerFast)
transformers.models.distilbert.tokenization_distilbert_fast.DistilBertTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/modeling_distilbert.py----------------------------------------
A:transformers.models.distilbert.modeling_distilbert.logger->utils.logging.get_logger(__name__)
A:transformers.models.distilbert.modeling_distilbert.position_enc->numpy.array([[pos / np.power(10000, 2 * (j // 2) / dim) for j in range(dim)] for pos in range(n_pos)])
A:transformers.models.distilbert.modeling_distilbert.out[:, 0::2]->torch.FloatTensor(np.sin(position_enc[:, 0::2]))
A:transformers.models.distilbert.modeling_distilbert.out[:, 1::2]->torch.FloatTensor(np.cos(position_enc[:, 1::2]))
A:transformers.models.distilbert.modeling_distilbert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.dim, padding_idx=config.pad_token_id)
A:transformers.models.distilbert.modeling_distilbert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.dim)
A:transformers.models.distilbert.modeling_distilbert.self.LayerNorm->torch.nn.LayerNorm(config.dim, eps=1e-12)
A:transformers.models.distilbert.modeling_distilbert.self.dropout->torch.nn.Dropout(config.seq_classif_dropout)
A:transformers.models.distilbert.modeling_distilbert.seq_length->input_ids.size(1)
A:transformers.models.distilbert.modeling_distilbert.position_ids->position_ids.unsqueeze(0).expand_as(input_ids).unsqueeze(0).expand_as(input_ids)
A:transformers.models.distilbert.modeling_distilbert.word_embeddings->self.word_embeddings(input_ids)
A:transformers.models.distilbert.modeling_distilbert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.distilbert.modeling_distilbert.embeddings->self.dropout(embeddings)
A:transformers.models.distilbert.modeling_distilbert.self.q_lin->prune_linear_layer(self.q_lin, index)
A:transformers.models.distilbert.modeling_distilbert.self.k_lin->prune_linear_layer(self.k_lin, index)
A:transformers.models.distilbert.modeling_distilbert.self.v_lin->prune_linear_layer(self.v_lin, index)
A:transformers.models.distilbert.modeling_distilbert.self.out_lin->prune_linear_layer(self.out_lin, index, dim=1)
A:transformers.models.distilbert.modeling_distilbert.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.distilbert.modeling_distilbert.(heads, index)->find_pruneable_heads_and_indices(heads, self.n_heads, attention_head_size, self.pruned_heads)
A:transformers.models.distilbert.modeling_distilbert.(bs, q_length, dim)->query.size()
A:transformers.models.distilbert.modeling_distilbert.k_length->key.size(1)
A:transformers.models.distilbert.modeling_distilbert.q->shape(self.q_lin(query))
A:transformers.models.distilbert.modeling_distilbert.k->shape(self.k_lin(key))
A:transformers.models.distilbert.modeling_distilbert.v->shape(self.v_lin(value))
A:transformers.models.distilbert.modeling_distilbert.scores->torch.matmul(q, k.transpose(2, 3))
A:transformers.models.distilbert.modeling_distilbert.mask->(mask == 0).view(mask_reshp).expand_as(scores)
A:transformers.models.distilbert.modeling_distilbert.weights->self.dropout(weights)
A:transformers.models.distilbert.modeling_distilbert.context->self.out_lin(context)
A:transformers.models.distilbert.modeling_distilbert.self.lin1->torch.nn.Linear(in_features=config.dim, out_features=config.hidden_dim)
A:transformers.models.distilbert.modeling_distilbert.self.lin2->torch.nn.Linear(in_features=config.hidden_dim, out_features=config.dim)
A:transformers.models.distilbert.modeling_distilbert.x->self.dropout(x)
A:transformers.models.distilbert.modeling_distilbert.self.attention->MultiHeadSelfAttention(config)
A:transformers.models.distilbert.modeling_distilbert.self.sa_layer_norm->torch.nn.LayerNorm(normalized_shape=config.dim, eps=1e-12)
A:transformers.models.distilbert.modeling_distilbert.self.ffn->FFN(config)
A:transformers.models.distilbert.modeling_distilbert.self.output_layer_norm->torch.nn.LayerNorm(normalized_shape=config.dim, eps=1e-12)
A:transformers.models.distilbert.modeling_distilbert.sa_output->self.sa_layer_norm(sa_output + x)
A:transformers.models.distilbert.modeling_distilbert.ffn_output->self.output_layer_norm(ffn_output + sa_output)
A:transformers.models.distilbert.modeling_distilbert.layer->TransformerBlock(config)
A:transformers.models.distilbert.modeling_distilbert.self.layer->torch.nn.ModuleList([copy.deepcopy(layer) for _ in range(config.n_layers)])
A:transformers.models.distilbert.modeling_distilbert.layer_outputs->layer_module(x=hidden_state, attn_mask=attn_mask, head_mask=head_mask[i], output_attentions=output_attentions)
A:transformers.models.distilbert.modeling_distilbert.self.embeddings->Embeddings(config)
A:transformers.models.distilbert.modeling_distilbert.self.transformer->Transformer(config)
A:transformers.models.distilbert.modeling_distilbert.input_shape->input_ids.size()
A:transformers.models.distilbert.modeling_distilbert.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.distilbert.modeling_distilbert.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.distilbert.modeling_distilbert.inputs_embeds->self.embeddings(input_ids)
A:transformers.models.distilbert.modeling_distilbert.self.distilbert->DistilBertModel(config)
A:transformers.models.distilbert.modeling_distilbert.self.vocab_transform->torch.nn.Linear(config.dim, config.dim)
A:transformers.models.distilbert.modeling_distilbert.self.vocab_layer_norm->torch.nn.LayerNorm(config.dim, eps=1e-12)
A:transformers.models.distilbert.modeling_distilbert.self.vocab_projector->torch.nn.Linear(config.dim, config.vocab_size)
A:transformers.models.distilbert.modeling_distilbert.self.mlm_loss_fct->torch.nn.CrossEntropyLoss()
A:transformers.models.distilbert.modeling_distilbert.dlbrt_output->self.distilbert(input_ids=input_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.distilbert.modeling_distilbert.prediction_logits->self.vocab_projector(prediction_logits)
A:transformers.models.distilbert.modeling_distilbert.mlm_loss->self.mlm_loss_fct(prediction_logits.view(-1, prediction_logits.size(-1)), labels.view(-1))
A:transformers.models.distilbert.modeling_distilbert.self.pre_classifier->torch.nn.Linear(config.dim, config.dim)
A:transformers.models.distilbert.modeling_distilbert.self.classifier->torch.nn.Linear(config.dim, 1)
A:transformers.models.distilbert.modeling_distilbert.distilbert_output->self.distilbert(input_ids=input_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.distilbert.modeling_distilbert.pooled_output->self.dropout(pooled_output)
A:transformers.models.distilbert.modeling_distilbert.logits->self.classifier(pooled_output)
A:transformers.models.distilbert.modeling_distilbert.loss_fct->CrossEntropyLoss()
A:transformers.models.distilbert.modeling_distilbert.loss->loss_fct(reshaped_logits, labels)
A:transformers.models.distilbert.modeling_distilbert.self.qa_outputs->torch.nn.Linear(config.dim, config.num_labels)
A:transformers.models.distilbert.modeling_distilbert.hidden_states->self.dropout(hidden_states)
A:transformers.models.distilbert.modeling_distilbert.(start_logits, end_logits)->self.classifier(pooled_output).split(1, dim=-1)
A:transformers.models.distilbert.modeling_distilbert.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.distilbert.modeling_distilbert.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.distilbert.modeling_distilbert.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.distilbert.modeling_distilbert.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.distilbert.modeling_distilbert.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.distilbert.modeling_distilbert.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.distilbert.modeling_distilbert.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.distilbert.modeling_distilbert.outputs->self.distilbert(input_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.distilbert.modeling_distilbert.sequence_output->self.dropout(sequence_output)
A:transformers.models.distilbert.modeling_distilbert.active_logits->self.classifier(pooled_output).view(-1, self.num_labels)
A:transformers.models.distilbert.modeling_distilbert.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.distilbert.modeling_distilbert.reshaped_logits->self.classifier(pooled_output).view(-1, num_choices)
transformers.DistilBertForMaskedLM(self,config)
transformers.DistilBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertForMaskedLM.get_output_embeddings(self)
transformers.DistilBertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.DistilBertForMultipleChoice(self,config)
transformers.DistilBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertForQuestionAnswering(self,config)
transformers.DistilBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertForSequenceClassification(self,config)
transformers.DistilBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertForTokenClassification(self,config)
transformers.DistilBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertModel(self,config)
transformers.DistilBertModel._prune_heads(self,heads_to_prune)
transformers.DistilBertModel.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DistilBertModel.get_input_embeddings(self)
transformers.DistilBertModel.set_input_embeddings(self,new_embeddings)
transformers.DistilBertPreTrainedModel(PreTrainedModel)
transformers.DistilBertPreTrainedModel._init_weights(self,module)
transformers.models.distilbert.modeling_distilbert.DistilBertForMaskedLM(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForMaskedLM.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertForMaskedLM.get_output_embeddings(self)
transformers.models.distilbert.modeling_distilbert.DistilBertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.distilbert.modeling_distilbert.DistilBertForMultipleChoice(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForMultipleChoice.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertForQuestionAnswering(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForQuestionAnswering.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertForSequenceClassification(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForSequenceClassification.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertForTokenClassification(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForTokenClassification.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertModel(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertModel.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.DistilBertModel._prune_heads(self,heads_to_prune)
transformers.models.distilbert.modeling_distilbert.DistilBertModel.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.distilbert.modeling_distilbert.DistilBertModel.get_input_embeddings(self)
transformers.models.distilbert.modeling_distilbert.DistilBertModel.set_input_embeddings(self,new_embeddings)
transformers.models.distilbert.modeling_distilbert.DistilBertPreTrainedModel(PreTrainedModel)
transformers.models.distilbert.modeling_distilbert.DistilBertPreTrainedModel._init_weights(self,module)
transformers.models.distilbert.modeling_distilbert.Embeddings(self,config)
transformers.models.distilbert.modeling_distilbert.Embeddings.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.Embeddings.forward(self,input_ids)
transformers.models.distilbert.modeling_distilbert.FFN(self,config)
transformers.models.distilbert.modeling_distilbert.FFN.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.FFN.ff_chunk(self,input)
transformers.models.distilbert.modeling_distilbert.FFN.forward(self,input)
transformers.models.distilbert.modeling_distilbert.MultiHeadSelfAttention(self,config)
transformers.models.distilbert.modeling_distilbert.MultiHeadSelfAttention.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.MultiHeadSelfAttention.forward(self,query,key,value,mask,head_mask=None,output_attentions=False)
transformers.models.distilbert.modeling_distilbert.MultiHeadSelfAttention.prune_heads(self,heads)
transformers.models.distilbert.modeling_distilbert.Transformer(self,config)
transformers.models.distilbert.modeling_distilbert.Transformer.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.Transformer.forward(self,x,attn_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False,return_dict=None)
transformers.models.distilbert.modeling_distilbert.TransformerBlock(self,config)
transformers.models.distilbert.modeling_distilbert.TransformerBlock.__init__(self,config)
transformers.models.distilbert.modeling_distilbert.TransformerBlock.forward(self,x,attn_mask=None,head_mask=None,output_attentions=False)
transformers.models.distilbert.modeling_distilbert.create_sinusoidal_embeddings(n_pos,dim,out)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/configuration_distilbert.py----------------------------------------
A:transformers.models.distilbert.configuration_distilbert.logger->utils.logging.get_logger(__name__)
transformers.DistilBertConfig(self,vocab_size=30522,max_position_embeddings=512,sinusoidal_pos_embds=False,n_layers=6,n_heads=12,dim=768,hidden_dim=4*768,dropout=0.1,attention_dropout=0.1,activation='gelu',initializer_range=0.02,qa_dropout=0.1,seq_classif_dropout=0.2,pad_token_id=0,**kwargs)
transformers.DistilBertConfig.hidden_size(self)
transformers.DistilBertConfig.num_attention_heads(self)
transformers.DistilBertConfig.num_hidden_layers(self)
transformers.models.distilbert.configuration_distilbert.DistilBertConfig(self,vocab_size=30522,max_position_embeddings=512,sinusoidal_pos_embds=False,n_layers=6,n_heads=12,dim=768,hidden_dim=4*768,dropout=0.1,attention_dropout=0.1,activation='gelu',initializer_range=0.02,qa_dropout=0.1,seq_classif_dropout=0.2,pad_token_id=0,**kwargs)
transformers.models.distilbert.configuration_distilbert.DistilBertConfig.__init__(self,vocab_size=30522,max_position_embeddings=512,sinusoidal_pos_embds=False,n_layers=6,n_heads=12,dim=768,hidden_dim=4*768,dropout=0.1,attention_dropout=0.1,activation='gelu',initializer_range=0.02,qa_dropout=0.1,seq_classif_dropout=0.2,pad_token_id=0,**kwargs)
transformers.models.distilbert.configuration_distilbert.DistilBertConfig.hidden_size(self)
transformers.models.distilbert.configuration_distilbert.DistilBertConfig.num_attention_heads(self)
transformers.models.distilbert.configuration_distilbert.DistilBertConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/tokenization_distilbert.py----------------------------------------
A:transformers.models.distilbert.tokenization_distilbert.logger->utils.logging.get_logger(__name__)
transformers.DistilBertTokenizer(BertTokenizer)
transformers.models.distilbert.tokenization_distilbert.DistilBertTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/distilbert/modeling_tf_distilbert.py----------------------------------------
A:transformers.models.distilbert.modeling_tf_distilbert.logger->utils.logging.get_logger(__name__)
A:transformers.models.distilbert.modeling_tf_distilbert.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.dim], initializer=get_initializer(self.initializer_range))
A:transformers.models.distilbert.modeling_tf_distilbert.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.dim, embeddings_initializer=get_initializer(config.initializer_range), name='position_embeddings')
A:transformers.models.distilbert.modeling_tf_distilbert.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-12, name='LayerNorm')
A:transformers.models.distilbert.modeling_tf_distilbert.self.dropout->tensorflow.keras.layers.Dropout(config.qa_dropout)
A:transformers.models.distilbert.modeling_tf_distilbert.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.distilbert.modeling_tf_distilbert.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.distilbert.modeling_tf_distilbert.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.distilbert.modeling_tf_distilbert.x->self.dropout(x, training=training)
A:transformers.models.distilbert.modeling_tf_distilbert.logits->self.qa_outputs(hidden_states)
A:transformers.models.distilbert.modeling_tf_distilbert.self.q_lin->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='q_lin')
A:transformers.models.distilbert.modeling_tf_distilbert.self.k_lin->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='k_lin')
A:transformers.models.distilbert.modeling_tf_distilbert.self.v_lin->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='v_lin')
A:transformers.models.distilbert.modeling_tf_distilbert.self.out_lin->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='out_lin')
A:transformers.models.distilbert.modeling_tf_distilbert.self.pruned_heads->set()
A:transformers.models.distilbert.modeling_tf_distilbert.(bs, q_length, dim)->shape_list(query)
A:transformers.models.distilbert.modeling_tf_distilbert.dim_per_head->tensorflow.cast(dim_per_head, dtype=tf.int32)
A:transformers.models.distilbert.modeling_tf_distilbert.q->tensorflow.multiply(q, tf.math.rsqrt(tf.cast(dim_per_head, dtype=tf.float32)))
A:transformers.models.distilbert.modeling_tf_distilbert.k->tensorflow.cast(k, dtype=q.dtype)
A:transformers.models.distilbert.modeling_tf_distilbert.v->shape(self.v_lin(value))
A:transformers.models.distilbert.modeling_tf_distilbert.scores->tensorflow.matmul(q, k, transpose_b=True)
A:transformers.models.distilbert.modeling_tf_distilbert.mask->tensorflow.cast(mask, dtype=scores.dtype)
A:transformers.models.distilbert.modeling_tf_distilbert.weights->self.dropout(weights, training=training)
A:transformers.models.distilbert.modeling_tf_distilbert.context->self.out_lin(context)
A:transformers.models.distilbert.modeling_tf_distilbert.self.lin1->tensorflow.keras.layers.Dense(config.hidden_dim, kernel_initializer=get_initializer(config.initializer_range), name='lin1')
A:transformers.models.distilbert.modeling_tf_distilbert.self.lin2->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='lin2')
A:transformers.models.distilbert.modeling_tf_distilbert.self.activation->get_tf_activation(config.activation)
A:transformers.models.distilbert.modeling_tf_distilbert.self.attention->TFMultiHeadSelfAttention(config, name='attention')
A:transformers.models.distilbert.modeling_tf_distilbert.self.sa_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-12, name='sa_layer_norm')
A:transformers.models.distilbert.modeling_tf_distilbert.self.ffn->TFFFN(config, name='ffn')
A:transformers.models.distilbert.modeling_tf_distilbert.self.output_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-12, name='output_layer_norm')
A:transformers.models.distilbert.modeling_tf_distilbert.sa_output->self.sa_layer_norm(sa_output + x)
A:transformers.models.distilbert.modeling_tf_distilbert.ffn_output->self.output_layer_norm(ffn_output + sa_output)
A:transformers.models.distilbert.modeling_tf_distilbert.layer_outputs->layer_module(hidden_state, attn_mask, head_mask[i], output_attentions, training=training)
A:transformers.models.distilbert.modeling_tf_distilbert.self.embeddings->TFEmbeddings(config, name='embeddings')
A:transformers.models.distilbert.modeling_tf_distilbert.self.transformer->TFTransformer(config, name='transformer')
A:transformers.models.distilbert.modeling_tf_distilbert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.distilbert.modeling_tf_distilbert.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.distilbert.modeling_tf_distilbert.inputs['attention_mask']->tensorflow.cast(inputs['attention_mask'], dtype=tf.float32)
A:transformers.models.distilbert.modeling_tf_distilbert.embedding_output->self.embeddings(inputs['input_ids'], inputs_embeds=inputs['inputs_embeds'])
A:transformers.models.distilbert.modeling_tf_distilbert.tfmr_output->self.transformer(embedding_output, inputs['attention_mask'], inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.self.distilbert->TFDistilBertMainLayer(config, name='distilbert')
A:transformers.models.distilbert.modeling_tf_distilbert.outputs->self.distilbert(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.distilbert.modeling_tf_distilbert.hidden_states->self.dropout(hidden_states, training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.self.vocab_transform->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), name='vocab_transform')
A:transformers.models.distilbert.modeling_tf_distilbert.self.act->get_tf_activation('gelu')
A:transformers.models.distilbert.modeling_tf_distilbert.self.vocab_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-12, name='vocab_layer_norm')
A:transformers.models.distilbert.modeling_tf_distilbert.self.vocab_projector->TFDistilBertLMHead(config, self.distilbert.embeddings, name='vocab_projector')
A:transformers.models.distilbert.modeling_tf_distilbert.distilbert_output->self.distilbert(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.prediction_logits->self.vocab_projector(prediction_logits)
A:transformers.models.distilbert.modeling_tf_distilbert.self.pre_classifier->tensorflow.keras.layers.Dense(config.dim, kernel_initializer=get_initializer(config.initializer_range), activation='relu', name='pre_classifier')
A:transformers.models.distilbert.modeling_tf_distilbert.self.classifier->tensorflow.keras.layers.Dense(1, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.distilbert.modeling_tf_distilbert.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.distilbert.modeling_tf_distilbert.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.distilbert.modeling_tf_distilbert.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.distilbert.modeling_tf_distilbert.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.distilbert.modeling_tf_distilbert.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.distilbert.modeling_tf_distilbert.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.distilbert.modeling_tf_distilbert.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFDistilBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFDistilBertForMaskedLM.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFDistilBertForMaskedLM.get_output_embeddings(self)
transformers.TFDistilBertForMaskedLM.get_output_layer_with_bias(self)
transformers.TFDistilBertForMaskedLM.get_prefix_bias_name(self)
transformers.TFDistilBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFDistilBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFDistilBertForMultipleChoice.dummy_inputs(self)
transformers.TFDistilBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFDistilBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFDistilBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFDistilBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFDistilBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFDistilBertForTokenClassification.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFDistilBertMainLayer(self,config,**kwargs)
transformers.TFDistilBertMainLayer._prune_heads(self,heads_to_prune)
transformers.TFDistilBertMainLayer.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFDistilBertMainLayer.get_input_embeddings(self)
transformers.TFDistilBertMainLayer.set_input_embeddings(self,value)
transformers.TFDistilBertModel(self,config,*inputs,**kwargs)
transformers.TFDistilBertModel.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFDistilBertPreTrainedModel(TFPreTrainedModel)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM.get_output_embeddings(self)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM.get_output_layer_with_bias(self)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM.get_prefix_bias_name(self)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice.dummy_inputs(self)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertForTokenClassification.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertLMHead(self,config,input_embeddings,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertLMHead.build(self,input_shape)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertLMHead.call(self,hidden_states)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer._prune_heads(self,heads_to_prune)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer.get_input_embeddings(self)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer.set_input_embeddings(self,value)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertModel(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertModel.call(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertPreTrainedModel(TFPreTrainedModel)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings._embedding(self,input_ids,position_ids,inputs_embeds,training=False)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings._linear(self,inputs)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings.build(self,input_shape)
transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings.call(self,input_ids=None,position_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.distilbert.modeling_tf_distilbert.TFFFN(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFFFN.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFFFN.call(self,input,training=False)
transformers.models.distilbert.modeling_tf_distilbert.TFMultiHeadSelfAttention(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFMultiHeadSelfAttention.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFMultiHeadSelfAttention.call(self,query,key,value,mask,head_mask,output_attentions,training=False)
transformers.models.distilbert.modeling_tf_distilbert.TFMultiHeadSelfAttention.prune_heads(self,heads)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformer(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformer.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformer.call(self,x,attn_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformerBlock(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformerBlock.__init__(self,config,**kwargs)
transformers.models.distilbert.modeling_tf_distilbert.TFTransformerBlock.call(self,x,attn_mask,head_mask,output_attentions,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/modeling_openai.py----------------------------------------
A:transformers.models.openai.modeling_openai.logger->utils.logging.get_logger(__name__)
A:transformers.models.openai.modeling_openai.openai_checkpoint_folder_path->os.path.dirname(openai_checkpoint_folder_path)
A:transformers.models.openai.modeling_openai.names->json.load(names_handle)
A:transformers.models.openai.modeling_openai.shapes->json.load(shapes_handle)
A:transformers.models.openai.modeling_openai.offsets->numpy.cumsum([np.prod(shape) for shape in shapes])
A:transformers.models.openai.modeling_openai.model.tokens_embed.weight.data->torch.from_numpy(init_params[1])
A:transformers.models.openai.modeling_openai.model.positions_embed.weight.data->torch.from_numpy(init_params[0])
A:transformers.models.openai.modeling_openai.name->name.split('/').split('/')
A:transformers.models.openai.modeling_openai.scope_names->re.split('(\\d+)', m_name)
A:transformers.models.openai.modeling_openai.pointer->getattr(pointer, scope_names[0])
A:transformers.models.openai.modeling_openai.num->int(scope_names[1])
A:transformers.models.openai.modeling_openai.pointer.data->torch.from_numpy(array)
A:transformers.models.openai.modeling_openai.self.c_attn->prune_conv1d_layer(self.c_attn, index_attn, dim=1)
A:transformers.models.openai.modeling_openai.self.c_proj->Conv1D(nx, n_state)
A:transformers.models.openai.modeling_openai.self.attn_dropout->torch.nn.Dropout(config.attn_pdrop)
A:transformers.models.openai.modeling_openai.self.resid_dropout->torch.nn.Dropout(config.resid_pdrop)
A:transformers.models.openai.modeling_openai.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.openai.modeling_openai.(heads, index)->find_pruneable_heads_and_indices(heads, self.n_head, self.split_size // self.n_head, self.pruned_heads)
A:transformers.models.openai.modeling_openai.index_attn->torch.cat([index, index + self.split_size, index + 2 * self.split_size])
A:transformers.models.openai.modeling_openai.w->self.attn_dropout(w)
A:transformers.models.openai.modeling_openai.x->self.c_attn(x)
A:transformers.models.openai.modeling_openai.(query, key, value)->self.c_attn(x).split(self.split_size, dim=2)
A:transformers.models.openai.modeling_openai.query->self.split_heads(query)
A:transformers.models.openai.modeling_openai.key->self.split_heads(key, k=True)
A:transformers.models.openai.modeling_openai.value->self.split_heads(value)
A:transformers.models.openai.modeling_openai.attn_outputs->self.attn(x, attention_mask=attention_mask, head_mask=head_mask, output_attentions=output_attentions)
A:transformers.models.openai.modeling_openai.a->self.resid_dropout(a)
A:transformers.models.openai.modeling_openai.self.c_fc->Conv1D(n_state, nx)
A:transformers.models.openai.modeling_openai.self.dropout->torch.nn.Dropout(config.resid_pdrop)
A:transformers.models.openai.modeling_openai.h->self.ln_2(n + m)
A:transformers.models.openai.modeling_openai.h2->self.c_proj(h)
A:transformers.models.openai.modeling_openai.self.attn->Attention(nx, n_ctx, config, scale)
A:transformers.models.openai.modeling_openai.self.ln_1->torch.nn.LayerNorm(nx, eps=config.layer_norm_epsilon)
A:transformers.models.openai.modeling_openai.self.mlp->MLP(4 * nx, config)
A:transformers.models.openai.modeling_openai.self.ln_2->torch.nn.LayerNorm(nx, eps=config.layer_norm_epsilon)
A:transformers.models.openai.modeling_openai.n->self.ln_1(x + a)
A:transformers.models.openai.modeling_openai.m->self.mlp(n)
A:transformers.models.openai.modeling_openai.self.tokens_embed->torch.nn.Embedding(config.vocab_size, config.n_embd)
A:transformers.models.openai.modeling_openai.self.positions_embed->torch.nn.Embedding(config.n_positions, config.n_embd)
A:transformers.models.openai.modeling_openai.self.drop->torch.nn.Dropout(config.embd_pdrop)
A:transformers.models.openai.modeling_openai.self.h->torch.nn.ModuleList([Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)])
A:transformers.models.openai.modeling_openai.input_shape->input_ids.view(-1, input_shape[-1]).size()
A:transformers.models.openai.modeling_openai.input_ids->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1])
A:transformers.models.openai.modeling_openai.attention_mask->attention_mask.to(dtype=next(self.parameters()).dtype).to(dtype=next(self.parameters()).dtype)
A:transformers.models.openai.modeling_openai.head_mask->self.get_head_mask(head_mask, self.config.n_layer)
A:transformers.models.openai.modeling_openai.inputs_embeds->self.tokens_embed(input_ids)
A:transformers.models.openai.modeling_openai.position_embeds->self.positions_embed(position_ids)
A:transformers.models.openai.modeling_openai.token_type_ids->token_type_ids.view(-1, token_type_ids.size(-1)).view(-1, token_type_ids.size(-1))
A:transformers.models.openai.modeling_openai.token_type_embeds->self.tokens_embed(token_type_ids)
A:transformers.models.openai.modeling_openai.hidden_states->hidden_states.view(*output_shape).view(*output_shape)
A:transformers.models.openai.modeling_openai.outputs->block(hidden_states, attention_mask, head_mask[i], output_attentions=output_attentions)
A:transformers.models.openai.modeling_openai.self.transformer->OpenAIGPTModel(config)
A:transformers.models.openai.modeling_openai.self.lm_head->torch.nn.Linear(config.n_embd, config.vocab_size, bias=False)
A:transformers.models.openai.modeling_openai.transformer_outputs->self.transformer(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.openai.modeling_openai.lm_logits->self.lm_head(hidden_states)
A:transformers.models.openai.modeling_openai.shift_logits->lm_logits[..., :-1, :].contiguous()
A:transformers.models.openai.modeling_openai.shift_labels->labels[..., 1:].contiguous()
A:transformers.models.openai.modeling_openai.loss_fct->CrossEntropyLoss()
A:transformers.models.openai.modeling_openai.loss->loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.openai.modeling_openai.self.multiple_choice_head->SequenceSummary(config)
A:transformers.models.openai.modeling_openai.mc_logits->self.multiple_choice_head(hidden_states, mc_token_ids).squeeze(-1)
A:transformers.models.openai.modeling_openai.mc_loss->loss_fct(mc_logits.view(-1, mc_logits.size(-1)), mc_labels.view(-1))
A:transformers.models.openai.modeling_openai.lm_loss->loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))
A:transformers.models.openai.modeling_openai.self.score->torch.nn.Linear(config.n_embd, self.num_labels, bias=False)
A:transformers.models.openai.modeling_openai.logits->self.score(hidden_states)
transformers.OpenAIGPTDoubleHeadsModel(self,config)
transformers.OpenAIGPTDoubleHeadsModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,labels=None,mc_labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.OpenAIGPTDoubleHeadsModel.get_output_embeddings(self)
transformers.OpenAIGPTDoubleHeadsModel.set_output_embeddings(self,new_embeddings)
transformers.OpenAIGPTDoubleHeadsModelOutput(ModelOutput)
transformers.OpenAIGPTForSequenceClassification(self,config)
transformers.OpenAIGPTForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.OpenAIGPTLMHeadModel(self,config)
transformers.OpenAIGPTLMHeadModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.OpenAIGPTLMHeadModel.get_output_embeddings(self)
transformers.OpenAIGPTLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.OpenAIGPTModel(self,config)
transformers.OpenAIGPTModel._prune_heads(self,heads_to_prune)
transformers.OpenAIGPTModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.OpenAIGPTModel.get_input_embeddings(self)
transformers.OpenAIGPTModel.set_input_embeddings(self,new_embeddings)
transformers.OpenAIGPTPreTrainedModel(PreTrainedModel)
transformers.OpenAIGPTPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_openai_gpt(model,config,openai_checkpoint_folder_path)
transformers.models.openai.modeling_openai.Attention(self,nx,n_ctx,config,scale=False)
transformers.models.openai.modeling_openai.Attention.__init__(self,nx,n_ctx,config,scale=False)
transformers.models.openai.modeling_openai.Attention._attn(self,q,k,v,attention_mask=None,head_mask=None,output_attentions=False)
transformers.models.openai.modeling_openai.Attention.forward(self,x,attention_mask=None,head_mask=None,output_attentions=False)
transformers.models.openai.modeling_openai.Attention.merge_heads(self,x)
transformers.models.openai.modeling_openai.Attention.prune_heads(self,heads)
transformers.models.openai.modeling_openai.Attention.split_heads(self,x,k=False)
transformers.models.openai.modeling_openai.Block(self,n_ctx,config,scale=False)
transformers.models.openai.modeling_openai.Block.__init__(self,n_ctx,config,scale=False)
transformers.models.openai.modeling_openai.Block.forward(self,x,attention_mask=None,head_mask=None,output_attentions=False)
transformers.models.openai.modeling_openai.MLP(self,n_state,config)
transformers.models.openai.modeling_openai.MLP.__init__(self,n_state,config)
transformers.models.openai.modeling_openai.MLP.forward(self,x)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModel(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModel.__init__(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,labels=None,mc_labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModel.get_output_embeddings(self)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModel.set_output_embeddings(self,new_embeddings)
transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModelOutput(ModelOutput)
transformers.models.openai.modeling_openai.OpenAIGPTForSequenceClassification(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTForSequenceClassification.__init__(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.openai.modeling_openai.OpenAIGPTLMHeadModel(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTLMHeadModel.__init__(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTLMHeadModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.openai.modeling_openai.OpenAIGPTLMHeadModel.get_output_embeddings(self)
transformers.models.openai.modeling_openai.OpenAIGPTLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.openai.modeling_openai.OpenAIGPTModel(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTModel.__init__(self,config)
transformers.models.openai.modeling_openai.OpenAIGPTModel._prune_heads(self,heads_to_prune)
transformers.models.openai.modeling_openai.OpenAIGPTModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.openai.modeling_openai.OpenAIGPTModel.get_input_embeddings(self)
transformers.models.openai.modeling_openai.OpenAIGPTModel.set_input_embeddings(self,new_embeddings)
transformers.models.openai.modeling_openai.OpenAIGPTPreTrainedModel(PreTrainedModel)
transformers.models.openai.modeling_openai.OpenAIGPTPreTrainedModel._init_weights(self,module)
transformers.models.openai.modeling_openai.load_tf_weights_in_openai_gpt(model,config,openai_checkpoint_folder_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/tokenization_openai_fast.py----------------------------------------
A:transformers.models.openai.tokenization_openai_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.openai.tokenization_openai_fast.files->self._tokenizer.model.save(save_directory, name=filename_prefix)
transformers.OpenAIGPTTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<unk>',**kwargs)
transformers.OpenAIGPTTokenizerFast.do_lower_case(self)
transformers.OpenAIGPTTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.openai.tokenization_openai_fast.OpenAIGPTTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<unk>',**kwargs)
transformers.models.openai.tokenization_openai_fast.OpenAIGPTTokenizerFast.__init__(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<unk>',**kwargs)
transformers.models.openai.tokenization_openai_fast.OpenAIGPTTokenizerFast.do_lower_case(self)
transformers.models.openai.tokenization_openai_fast.OpenAIGPTTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/tokenization_openai.py----------------------------------------
A:transformers.models.openai.tokenization_openai.logger->utils.logging.get_logger(__name__)
A:transformers.models.openai.tokenization_openai.pairs->get_pairs(word)
A:transformers.models.openai.tokenization_openai.text->self.nlp(text_standardize(self.fix_text(text)))
A:transformers.models.openai.tokenization_openai._nlp->English()
A:transformers.models.openai.tokenization_openai.self.nlp->BasicTokenizer(do_lower_case=True)
A:transformers.models.openai.tokenization_openai.self.encoder->json.load(vocab_handle)
A:transformers.models.openai.tokenization_openai.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.openai.tokenization_openai.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.openai.tokenization_openai.j->' '.join(word).index(first, i)
A:transformers.models.openai.tokenization_openai.new_word->tuple(new_word)
A:transformers.models.openai.tokenization_openai.word->' '.join(word)
A:transformers.models.openai.tokenization_openai.out_string->''.join(tokens).replace('</w>', ' ').strip()
A:transformers.models.openai.tokenization_openai.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.openai.tokenization_openai.merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
transformers.OpenAIGPTTokenizer(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.OpenAIGPTTokenizer._convert_id_to_token(self,index)
transformers.OpenAIGPTTokenizer._convert_token_to_id(self,token)
transformers.OpenAIGPTTokenizer._tokenize(self,text)
transformers.OpenAIGPTTokenizer.bpe(self,token)
transformers.OpenAIGPTTokenizer.convert_tokens_to_string(self,tokens)
transformers.OpenAIGPTTokenizer.do_lower_case(self)
transformers.OpenAIGPTTokenizer.get_vocab(self)
transformers.OpenAIGPTTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.OpenAIGPTTokenizer.vocab_size(self)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.__init__(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token(self,index)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id(self,token)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer._tokenize(self,text)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.bpe(self,token)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.do_lower_case(self)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.get_vocab(self)
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.openai.tokenization_openai.OpenAIGPTTokenizer.vocab_size(self)
transformers.models.openai.tokenization_openai.get_pairs(word)
transformers.models.openai.tokenization_openai.text_standardize(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/configuration_openai.py----------------------------------------
A:transformers.models.openai.configuration_openai.logger->utils.logging.get_logger(__name__)
transformers.OpenAIGPTConfig(self,vocab_size=40478,n_positions=512,n_ctx=512,n_embd=768,n_layer=12,n_head=12,afn='gelu',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,predict_special_tokens=True,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.OpenAIGPTConfig.hidden_size(self)
transformers.OpenAIGPTConfig.max_position_embeddings(self)
transformers.OpenAIGPTConfig.num_attention_heads(self)
transformers.OpenAIGPTConfig.num_hidden_layers(self)
transformers.models.openai.configuration_openai.OpenAIGPTConfig(self,vocab_size=40478,n_positions=512,n_ctx=512,n_embd=768,n_layer=12,n_head=12,afn='gelu',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,predict_special_tokens=True,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.models.openai.configuration_openai.OpenAIGPTConfig.__init__(self,vocab_size=40478,n_positions=512,n_ctx=512,n_embd=768,n_layer=12,n_head=12,afn='gelu',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,predict_special_tokens=True,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.models.openai.configuration_openai.OpenAIGPTConfig.hidden_size(self)
transformers.models.openai.configuration_openai.OpenAIGPTConfig.max_position_embeddings(self)
transformers.models.openai.configuration_openai.OpenAIGPTConfig.num_attention_heads(self)
transformers.models.openai.configuration_openai.OpenAIGPTConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/convert_openai_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.config->transformers.OpenAIGPTConfig.from_json_file(openai_config_file)
A:transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.model->OpenAIGPTModel(config)
A:transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch(openai_checkpoint_folder_path,openai_config_file,pytorch_dump_folder_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/modeling_tf_openai.py----------------------------------------
A:transformers.models.openai.modeling_tf_openai.logger->utils.logging.get_logger(__name__)
A:transformers.models.openai.modeling_tf_openai.self.c_attn->TFConv1D(n_state * 3, nx, initializer_range=config.initializer_range, name='c_attn')
A:transformers.models.openai.modeling_tf_openai.self.c_proj->TFConv1D(nx, n_state, initializer_range=config.initializer_range, name='c_proj')
A:transformers.models.openai.modeling_tf_openai.self.attn_dropout->tensorflow.keras.layers.Dropout(config.attn_pdrop)
A:transformers.models.openai.modeling_tf_openai.self.resid_dropout->tensorflow.keras.layers.Dropout(config.resid_pdrop)
A:transformers.models.openai.modeling_tf_openai.self.pruned_heads->set()
A:transformers.models.openai.modeling_tf_openai.j->tensorflow.range(ns)
A:transformers.models.openai.modeling_tf_openai.w->self.attn_dropout(w, training=training)
A:transformers.models.openai.modeling_tf_openai.dk->tensorflow.cast(shape_list(k)[-1], tf.float32)
A:transformers.models.openai.modeling_tf_openai.(_, _, nd, ns)->shape_list(w)
A:transformers.models.openai.modeling_tf_openai.b->tensorflow.reshape(b, [1, 1, nd, ns])
A:transformers.models.openai.modeling_tf_openai.x->self.c_attn(x)
A:transformers.models.openai.modeling_tf_openai.x_shape->shape_list(x)
A:transformers.models.openai.modeling_tf_openai.(query, key, value)->tensorflow.split(x, 3, axis=2)
A:transformers.models.openai.modeling_tf_openai.query->self.split_heads(query)
A:transformers.models.openai.modeling_tf_openai.key->self.split_heads(key)
A:transformers.models.openai.modeling_tf_openai.value->self.split_heads(value)
A:transformers.models.openai.modeling_tf_openai.attn_outputs->self._attn(query, key, value, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.openai.modeling_tf_openai.a->self.resid_dropout(a, training=training)
A:transformers.models.openai.modeling_tf_openai.self.c_fc->TFConv1D(n_state, nx, initializer_range=config.initializer_range, name='c_fc')
A:transformers.models.openai.modeling_tf_openai.self.act->get_tf_activation('gelu')
A:transformers.models.openai.modeling_tf_openai.self.dropout->tensorflow.keras.layers.Dropout(config.resid_pdrop)
A:transformers.models.openai.modeling_tf_openai.h->self.ln_2(n + m)
A:transformers.models.openai.modeling_tf_openai.h2->self.dropout(h2, training=training)
A:transformers.models.openai.modeling_tf_openai.self.attn->TFAttention(nx, n_ctx, config, scale, name='attn')
A:transformers.models.openai.modeling_tf_openai.self.ln_1->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='ln_1')
A:transformers.models.openai.modeling_tf_openai.self.mlp->TFMLP(4 * nx, config, name='mlp')
A:transformers.models.openai.modeling_tf_openai.self.ln_2->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='ln_2')
A:transformers.models.openai.modeling_tf_openai.output_attn->self.attn(x, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.openai.modeling_tf_openai.n->self.ln_1(x + a)
A:transformers.models.openai.modeling_tf_openai.m->self.mlp(n, training=training)
A:transformers.models.openai.modeling_tf_openai.self.tokens_embed->TFSharedEmbeddings(config.vocab_size, config.n_embd, initializer_range=config.initializer_range, name='tokens_embed')
A:transformers.models.openai.modeling_tf_openai.self.positions_embed->tensorflow.keras.layers.Embedding(config.n_positions, config.n_embd, embeddings_initializer=get_initializer(config.initializer_range), name='positions_embed')
A:transformers.models.openai.modeling_tf_openai.self.drop->tensorflow.keras.layers.Dropout(config.embd_pdrop)
A:transformers.models.openai.modeling_tf_openai.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.openai.modeling_tf_openai.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.openai.modeling_tf_openai.inputs['input_ids']->tensorflow.reshape(inputs['input_ids'], [-1, input_shape[-1]])
A:transformers.models.openai.modeling_tf_openai.inputs['attention_mask']->tensorflow.cast(inputs['attention_mask'], tf.float32)
A:transformers.models.openai.modeling_tf_openai.inputs['position_ids']->tensorflow.reshape(inputs['position_ids'], [-1, shape_list(inputs['position_ids'])[-1]])
A:transformers.models.openai.modeling_tf_openai.inputs['inputs_embeds']->self.tokens_embed(inputs['input_ids'], mode='embedding')
A:transformers.models.openai.modeling_tf_openai.position_embeds->self.positions_embed(inputs['position_ids'])
A:transformers.models.openai.modeling_tf_openai.inputs['token_type_ids']->tensorflow.reshape(inputs['token_type_ids'], [-1, shape_list(inputs['token_type_ids'])[-1]])
A:transformers.models.openai.modeling_tf_openai.token_type_embeds->self.tokens_embed(inputs['token_type_ids'], mode='embedding')
A:transformers.models.openai.modeling_tf_openai.hidden_states->tensorflow.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])
A:transformers.models.openai.modeling_tf_openai.outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.openai.modeling_tf_openai.all_attentions->tuple((tf.reshape(t, attention_output_shape) for t in all_attentions))
A:transformers.models.openai.modeling_tf_openai.self.transformer->TFOpenAIGPTMainLayer(config, name='transformer')
A:transformers.models.openai.modeling_tf_openai.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.openai.modeling_tf_openai.logits->self.score(hidden_states)
A:transformers.models.openai.modeling_tf_openai.loss->self.compute_loss(tf.reshape(inputs['labels'], [-1, 1]), tf.reshape(in_logits, [-1, self.num_labels]))
A:transformers.models.openai.modeling_tf_openai.self.multiple_choice_head->TFSequenceSummary(config, initializer_range=config.initializer_range, name='multiple_choice_head')
A:transformers.models.openai.modeling_tf_openai.input_shapes->shape_list(inputs['input_ids'])
A:transformers.models.openai.modeling_tf_openai.lm_logits->self.transformer.tokens_embed(hidden_states, mode='linear')
A:transformers.models.openai.modeling_tf_openai.mc_logits->tensorflow.squeeze(mc_logits, axis=-1)
A:transformers.models.openai.modeling_tf_openai.self.score->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='score', use_bias=False)
A:transformers.models.openai.modeling_tf_openai.logits_shape->shape_list(logits)
A:transformers.models.openai.modeling_tf_openai.result->tensorflow.map_fn(fn=lambda t: get_seq_element(t[0], t[1]), elems=[sequence_lengths, logits], dtype='float')
A:transformers.models.openai.modeling_tf_openai.in_logits->tensorflow.reshape(result, [logits_shape[0], logits_shape[-1]])
transformers.TFOpenAIGPTDoubleHeadsModel(self,config,*inputs,**kwargs)
transformers.TFOpenAIGPTDoubleHeadsModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFOpenAIGPTDoubleHeadsModel.get_output_embeddings(self)
transformers.TFOpenAIGPTDoubleHeadsModelOutput(ModelOutput)
transformers.TFOpenAIGPTForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFOpenAIGPTForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFOpenAIGPTForSequenceClassification.get_output_embeddings(self)
transformers.TFOpenAIGPTLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFOpenAIGPTLMHeadModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFOpenAIGPTLMHeadModel.get_output_embeddings(self)
transformers.TFOpenAIGPTMainLayer(self,config,*inputs,**kwargs)
transformers.TFOpenAIGPTMainLayer._prune_heads(self,heads_to_prune)
transformers.TFOpenAIGPTMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFOpenAIGPTMainLayer.get_input_embeddings(self)
transformers.TFOpenAIGPTMainLayer.set_input_embeddings(self,value)
transformers.TFOpenAIGPTModel(self,config,*inputs,**kwargs)
transformers.TFOpenAIGPTModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFOpenAIGPTPreTrainedModel(TFPreTrainedModel)
transformers.models.openai.modeling_tf_openai.TFAttention(self,nx,n_ctx,config,scale=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFAttention.__init__(self,nx,n_ctx,config,scale=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFAttention._attn(self,q,k,v,attention_mask,head_mask,output_attentions,training=False)
transformers.models.openai.modeling_tf_openai.TFAttention.call(self,x,attention_mask,head_mask,output_attentions,training=False)
transformers.models.openai.modeling_tf_openai.TFAttention.causal_attention_mask(nd,ns,dtype)
transformers.models.openai.modeling_tf_openai.TFAttention.merge_heads(self,x)
transformers.models.openai.modeling_tf_openai.TFAttention.prune_heads(self,heads)
transformers.models.openai.modeling_tf_openai.TFAttention.split_heads(self,x)
transformers.models.openai.modeling_tf_openai.TFBlock(self,n_ctx,config,scale=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFBlock.__init__(self,n_ctx,config,scale=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFBlock.call(self,x,attention_mask,head_mask,output_attentions,training=False)
transformers.models.openai.modeling_tf_openai.TFMLP(self,n_state,config,**kwargs)
transformers.models.openai.modeling_tf_openai.TFMLP.__init__(self,n_state,config,**kwargs)
transformers.models.openai.modeling_tf_openai.TFMLP.call(self,x,training=False)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.__init__(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.get_output_embeddings(self)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModelOutput(ModelOutput)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification.get_output_embeddings(self)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel.get_output_embeddings(self)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer.__init__(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer._prune_heads(self,heads_to_prune)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer.get_input_embeddings(self)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer.set_input_embeddings(self,value)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTModel(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTModel.__init__(self,config,*inputs,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.openai.modeling_tf_openai.TFOpenAIGPTPreTrainedModel(TFPreTrainedModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/openai/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bertweet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bertweet/tokenization_bertweet.py----------------------------------------
A:transformers.models.bertweet.tokenization_bertweet.logger->utils.logging.get_logger(__name__)
A:transformers.models.bertweet.tokenization_bertweet.pairs->get_pairs(word)
A:transformers.models.bertweet.tokenization_bertweet.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.bertweet.tokenization_bertweet.self.tweetPreprocessor->TweetTokenizer()
A:transformers.models.bertweet.tokenization_bertweet.word->'@@ '.join(word)
A:transformers.models.bertweet.tokenization_bertweet.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.bertweet.tokenization_bertweet.j->'@@ '.join(word).index(first, i)
A:transformers.models.bertweet.tokenization_bertweet.new_word->tuple(new_word)
A:transformers.models.bertweet.tokenization_bertweet.text->reduce_lengthening(text)
A:transformers.models.bertweet.tokenization_bertweet.words->list(map(lambda x: x if EMOTICON_RE.search(x) else x.lower(), words))
A:transformers.models.bertweet.tokenization_bertweet.tweet->tweet.replace(punct, self.special_puncts[punct]).replace(punct, self.special_puncts[punct])
A:transformers.models.bertweet.tokenization_bertweet.tokens->self.tweetPreprocessor.tokenize(tweet)
A:transformers.models.bertweet.tokenization_bertweet.normTweet->normTweet.replace(' p . m .', '  p.m.').replace(' p . m ', ' p.m ').replace(' a . m .', ' a.m.').replace(' a . m ', ' a.m ').replace(' p . m .', '  p.m.').replace(' p . m ', ' p.m ').replace(' a . m .', ' a.m.').replace(' a . m ', ' a.m ')
A:transformers.models.bertweet.tokenization_bertweet.lowercased_token->token.lower()
A:transformers.models.bertweet.tokenization_bertweet.out_string->' '.join(tokens).replace('@@ ', '').strip()
A:transformers.models.bertweet.tokenization_bertweet.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.bertweet.tokenization_bertweet.out_merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
A:transformers.models.bertweet.tokenization_bertweet.lines->f.readlines()
A:transformers.models.bertweet.tokenization_bertweet.line->lineTmp.strip()
A:transformers.models.bertweet.tokenization_bertweet.idx->lineTmp.strip().rfind(' ')
A:transformers.models.bertweet.tokenization_bertweet.self.encoder[word]->len(self.encoder)
A:transformers.models.bertweet.tokenization_bertweet.WORD_RE->regex.compile('(%s)' % '|'.join(REGEXPS), regex.VERBOSE | regex.I | regex.UNICODE)
A:transformers.models.bertweet.tokenization_bertweet.HANG_RE->regex.compile('([^a-zA-Z0-9])\\1{3,}')
A:transformers.models.bertweet.tokenization_bertweet.EMOTICON_RE->regex.compile(EMOTICONS, regex.VERBOSE | regex.I | regex.UNICODE)
A:transformers.models.bertweet.tokenization_bertweet.ENT_RE->regex.compile('&(#?(x?))([^&;\\s]+);')
A:transformers.models.bertweet.tokenization_bertweet.entity_body->match.group(3)
A:transformers.models.bertweet.tokenization_bertweet.number->html.entities.name2codepoint.get(entity_body)
A:transformers.models.bertweet.tokenization_bertweet.safe_text->regex.compile('([^a-zA-Z0-9])\\1{3,}').sub('\\1\\1\\1', text)
A:transformers.models.bertweet.tokenization_bertweet.pattern->regex.compile('(?<![A-Za-z0-9_!@#\\$%&*])@(([A-Za-z0-9_]){20}(?!@))|(?<![A-Za-z0-9_!@#\\$%&*])@(([A-Za-z0-9_]){1,19})(?![A-Za-z0-9_]*@)')
transformers.BertweetTokenizer(self,vocab_file,merges_file,normalization=False,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.BertweetTokenizer._convert_id_to_token(self,index)
transformers.BertweetTokenizer._convert_token_to_id(self,token)
transformers.BertweetTokenizer._tokenize(self,text)
transformers.BertweetTokenizer.add_from_file(self,f)
transformers.BertweetTokenizer.bpe(self,token)
transformers.BertweetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BertweetTokenizer.convert_tokens_to_string(self,tokens)
transformers.BertweetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BertweetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.BertweetTokenizer.get_vocab(self)
transformers.BertweetTokenizer.normalizeToken(self,token)
transformers.BertweetTokenizer.normalizeTweet(self,tweet)
transformers.BertweetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.BertweetTokenizer.vocab_size(self)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer(self,vocab_file,merges_file,normalization=False,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.__init__(self,vocab_file,merges_file,normalization=False,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer._convert_id_to_token(self,index)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer._convert_token_to_id(self,token)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer._tokenize(self,text)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.add_from_file(self,f)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.bpe(self,token)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.get_vocab(self)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.normalizeToken(self,token)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.normalizeTweet(self,tweet)
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.bertweet.tokenization_bertweet.BertweetTokenizer.vocab_size(self)
transformers.models.bertweet.tokenization_bertweet.TweetTokenizer(self,preserve_case=True,reduce_len=False,strip_handles=False)
transformers.models.bertweet.tokenization_bertweet.TweetTokenizer.__init__(self,preserve_case=True,reduce_len=False,strip_handles=False)
transformers.models.bertweet.tokenization_bertweet.TweetTokenizer.tokenize(self,text)
transformers.models.bertweet.tokenization_bertweet._replace_html_entities(text,keep=(),remove_illegal=True,encoding='utf-8')
transformers.models.bertweet.tokenization_bertweet._str_to_unicode(text,encoding=None,errors='strict')
transformers.models.bertweet.tokenization_bertweet.casual_tokenize(text,preserve_case=True,reduce_len=False,strip_handles=False)
transformers.models.bertweet.tokenization_bertweet.get_pairs(word)
transformers.models.bertweet.tokenization_bertweet.reduce_lengthening(text)
transformers.models.bertweet.tokenization_bertweet.remove_handles(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/convert_blenderbot_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.logger->transformers.utils.logging.get_logger(__name__)
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.k->k.replace('norm3', 'final_layer_norm').replace('norm3', 'final_layer_norm')
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.v->sd.pop(k)
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.new_k->rename_state_dict_key(k)
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.model->torch.load(checkpoint_path, map_location='cpu')
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.cfg->transformers.BartConfig.from_json_file(config_json_path)
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.m->BartForConditionalGeneration(cfg)
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.valid_keys->BartForConditionalGeneration(cfg).model.state_dict().keys()
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.convert_parlai_checkpoint(checkpoint_path,pytorch_dump_folder_path,config_json_path)
transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.rename_layernorm_keys(sd)
transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.rename_state_dict_key(k)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/tokenization_blenderbot.py----------------------------------------
A:transformers.models.blenderbot.tokenization_blenderbot.logger->utils.logging.get_logger(__name__)
A:transformers.models.blenderbot.tokenization_blenderbot.pairs->get_pairs(word)
A:transformers.models.blenderbot.tokenization_blenderbot.self.encoder->json.load(vocab_handle)
A:transformers.models.blenderbot.tokenization_blenderbot.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.blenderbot.tokenization_blenderbot.token->token.lower().lower()
A:transformers.models.blenderbot.tokenization_blenderbot.tokens->token.lower().lower().split(' ')
A:transformers.models.blenderbot.tokenization_blenderbot.word->'@@ '.join(word)
A:transformers.models.blenderbot.tokenization_blenderbot.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.blenderbot.tokenization_blenderbot.j->'@@ '.join(word).index(first, i)
A:transformers.models.blenderbot.tokenization_blenderbot.new_word->tuple(new_word)
A:transformers.models.blenderbot.tokenization_blenderbot.words->regex.findall('\\S+\\n?', text)
A:transformers.models.blenderbot.tokenization_blenderbot.out_string->' '.join(tokens).replace('@@ ', '').strip()
A:transformers.models.blenderbot.tokenization_blenderbot.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.blenderbot.tokenization_blenderbot.merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
transformers.BlenderbotSmallTokenizer(self,vocab_file,merges_file,bos_token='__start__',eos_token='__end__',unk_token='__unk__',pad_token='__null__',**kwargs)
transformers.BlenderbotSmallTokenizer._convert_id_to_token(self,index:int)->str
transformers.BlenderbotSmallTokenizer._convert_token_to_id(self,token:str)->int
transformers.BlenderbotSmallTokenizer._tokenize(self,text:str)->List[str]
transformers.BlenderbotSmallTokenizer.bpe(self,token:str)->str
transformers.BlenderbotSmallTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.BlenderbotSmallTokenizer.get_vocab(self)->Dict
transformers.BlenderbotSmallTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.BlenderbotSmallTokenizer.vocab_size(self)->int
transformers.BlenderbotTokenizer(RobertaTokenizer)
transformers.BlenderbotTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:List[int]=None)
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer(self,vocab_file,merges_file,bos_token='__start__',eos_token='__end__',unk_token='__unk__',pad_token='__null__',**kwargs)
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.__init__(self,vocab_file,merges_file,bos_token='__start__',eos_token='__end__',unk_token='__unk__',pad_token='__null__',**kwargs)
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer._convert_id_to_token(self,index:int)->str
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer._convert_token_to_id(self,token:str)->int
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer._tokenize(self,text:str)->List[str]
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.bpe(self,token:str)->str
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.get_vocab(self)->Dict
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotSmallTokenizer.vocab_size(self)->int
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotTokenizer(RobertaTokenizer)
transformers.models.blenderbot.tokenization_blenderbot.BlenderbotTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:List[int]=None)
transformers.models.blenderbot.tokenization_blenderbot.get_pairs(word)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/configuration_blenderbot.py----------------------------------------
transformers.BlenderbotConfig(self,activation_dropout=0.0,extra_pos_embeddings=0,activation_function='gelu',vocab_size=54944,d_model=512,encoder_ffn_dim=2048,encoder_layers=8,encoder_attention_heads=16,decoder_ffn_dim=2048,decoder_layers=8,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=512,classifier_dropout=0.0,is_encoder_decoder=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=True,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,**common_kwargs)
transformers.models.blenderbot.configuration_blenderbot.BlenderbotConfig(self,activation_dropout=0.0,extra_pos_embeddings=0,activation_function='gelu',vocab_size=54944,d_model=512,encoder_ffn_dim=2048,encoder_layers=8,encoder_attention_heads=16,decoder_ffn_dim=2048,decoder_layers=8,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=512,classifier_dropout=0.0,is_encoder_decoder=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=True,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,**common_kwargs)
transformers.models.blenderbot.configuration_blenderbot.BlenderbotConfig.__init__(self,activation_dropout=0.0,extra_pos_embeddings=0,activation_function='gelu',vocab_size=54944,d_model=512,encoder_ffn_dim=2048,encoder_layers=8,encoder_attention_heads=16,decoder_ffn_dim=2048,decoder_layers=8,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=512,classifier_dropout=0.0,is_encoder_decoder=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=True,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,**common_kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/modeling_tf_blenderbot.py----------------------------------------
A:transformers.models.blenderbot.modeling_tf_blenderbot.START_DOCSTRING->bart.modeling_tf_bart.BART_START_DOCSTRING.replace('inherits from :class:`~transformers.TFPreTrainedModel`', 'inherits from :class:`~transformers.TFBartForConditionalGeneration`').replace('BartConfig', _CONFIG_FOR_DOC)
A:transformers.models.blenderbot.modeling_tf_blenderbot.logger->utils.logging.get_logger(__name__)
A:transformers.models.blenderbot.modeling_tf_blenderbot.vocab_range->tensorflow.constant(range(self.config.vocab_size))
A:transformers.models.blenderbot.modeling_tf_blenderbot.logits->tensorflow.where(vocab_range != self.config.eos_token_id, LARGE_NEGATIVE, logits)
transformers.TFBlenderbotForConditionalGeneration(TFBartForConditionalGeneration)
transformers.TFBlenderbotForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotForConditionalGeneration(TFBartForConditionalGeneration)
transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/modeling_blenderbot.py----------------------------------------
transformers.BlenderbotForConditionalGeneration(BartForConditionalGeneration)
transformers.BlenderbotForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.blenderbot.modeling_blenderbot.BlenderbotForConditionalGeneration(BartForConditionalGeneration)
transformers.models.blenderbot.modeling_blenderbot.BlenderbotForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/blenderbot/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/modeling_t5.py----------------------------------------
A:transformers.models.t5.modeling_t5.logger->utils.logging.get_logger(__name__)
A:transformers.models.t5.modeling_t5.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.t5.modeling_t5.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.t5.modeling_t5.array->numpy.transpose(array)
A:transformers.models.t5.modeling_t5.name->txt_name.split('/')
A:transformers.models.t5.modeling_t5.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.t5.modeling_t5.pointer->getattr(pointer, 'weight')
A:transformers.models.t5.modeling_t5.num->int(scope_names[1])
A:transformers.models.t5.modeling_t5.pointer.data->torch.from_numpy(array.astype(np.float32))
A:transformers.models.t5.modeling_t5.self.weight->torch.nn.Parameter(torch.ones(hidden_size))
A:transformers.models.t5.modeling_t5.variance->hidden_states.to(self.decoder.first_device).to(torch.float32).pow(2).mean(-1, keepdim=True)
A:transformers.models.t5.modeling_t5.hidden_states->hidden_states.to(self.decoder.first_device).to(self.decoder.first_device)
A:transformers.models.t5.modeling_t5.self.wi->torch.nn.Linear(config.d_model, config.d_ff, bias=False)
A:transformers.models.t5.modeling_t5.self.wo->torch.nn.Linear(config.d_ff, config.d_model, bias=False)
A:transformers.models.t5.modeling_t5.self.dropout->torch.nn.Dropout(config.dropout_rate)
A:transformers.models.t5.modeling_t5.self.wi_0->torch.nn.Linear(config.d_model, config.d_ff, bias=False)
A:transformers.models.t5.modeling_t5.self.wi_1->torch.nn.Linear(config.d_model, config.d_ff, bias=False)
A:transformers.models.t5.modeling_t5.hidden_gelu->self.gelu_act(self.wi_0(hidden_states))
A:transformers.models.t5.modeling_t5.hidden_linear->self.wi_1(hidden_states)
A:transformers.models.t5.modeling_t5.self.DenseReluDense->T5DenseGatedGeluDense(config)
A:transformers.models.t5.modeling_t5.self.layer_norm->T5LayerNorm(config.d_model, eps=config.layer_norm_epsilon)
A:transformers.models.t5.modeling_t5.forwarded_states->self.DenseReluDense(forwarded_states)
A:transformers.models.t5.modeling_t5.self.q->prune_linear_layer(self.q, index)
A:transformers.models.t5.modeling_t5.self.k->prune_linear_layer(self.k, index)
A:transformers.models.t5.modeling_t5.self.v->prune_linear_layer(self.v, index)
A:transformers.models.t5.modeling_t5.self.o->prune_linear_layer(self.o, index, dim=1)
A:transformers.models.t5.modeling_t5.self.relative_attention_bias->torch.nn.Embedding(self.relative_attention_num_buckets, self.n_heads)
A:transformers.models.t5.modeling_t5.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.t5.modeling_t5.(heads, index)->find_pruneable_heads_and_indices(heads, self.n_heads, self.key_value_proj_dim, self.pruned_heads)
A:transformers.models.t5.modeling_t5.relative_position->torch.abs(relative_position)
A:transformers.models.t5.modeling_t5.relative_postion_if_large->torch.min(relative_postion_if_large, torch.full_like(relative_postion_if_large, num_buckets - 1))
A:transformers.models.t5.modeling_t5.relative_position_bucket->relative_position_bucket.to(self.relative_attention_bias.weight.device).to(self.relative_attention_bias.weight.device)
A:transformers.models.t5.modeling_t5.values->values.permute([2, 0, 1]).unsqueeze(0).permute([2, 0, 1]).unsqueeze(0)
A:transformers.models.t5.modeling_t5.query_states->shape(self.q(hidden_states))
A:transformers.models.t5.modeling_t5.key_states->project(hidden_states, self.k, key_value_states, past_key_value[0] if past_key_value is not None else None)
A:transformers.models.t5.modeling_t5.value_states->project(hidden_states, self.v, key_value_states, past_key_value[1] if past_key_value is not None else None)
A:transformers.models.t5.modeling_t5.scores->torch.matmul(query_states, key_states.transpose(3, 2))
A:transformers.models.t5.modeling_t5.position_bias->position_bias.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.t5.modeling_t5.attn_weights->torch.nn.functional.dropout(attn_weights, p=self.dropout, training=self.training)
A:transformers.models.t5.modeling_t5.attn_output->self.o(attn_output)
A:transformers.models.t5.modeling_t5.self.SelfAttention->T5Attention(config, has_relative_attention_bias=has_relative_attention_bias)
A:transformers.models.t5.modeling_t5.normed_hidden_states->self.layer_norm(hidden_states)
A:transformers.models.t5.modeling_t5.attention_output->self.EncDecAttention(normed_hidden_states, mask=attention_mask, key_value_states=key_value_states, position_bias=position_bias, head_mask=head_mask, past_key_value=past_key_value, use_cache=use_cache, query_length=query_length, output_attentions=output_attentions)
A:transformers.models.t5.modeling_t5.self.EncDecAttention->T5Attention(config, has_relative_attention_bias=False)
A:transformers.models.t5.modeling_t5.self.layer->torch.nn.ModuleList()
A:transformers.models.t5.modeling_t5.error_message->'There should be {} past states. 2 (past / key) for self attention.{} Got {} past key / value states'.format(expected_num_past_key_values, '2 (past / key) for cross attention' if expected_num_past_key_values == 4 else '', len(past_key_value))
A:transformers.models.t5.modeling_t5.self_attention_outputs->self.layer[0](hidden_states, attention_mask=attention_mask, position_bias=position_bias, head_mask=head_mask, past_key_value=self_attn_past_key_value, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.t5.modeling_t5.cross_attention_outputs->self.layer[1](hidden_states, key_value_states=encoder_hidden_states, attention_mask=encoder_attention_mask, position_bias=encoder_decoder_position_bias, head_mask=head_mask, past_key_value=cross_attn_past_key_value, query_length=query_length, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.t5.modeling_t5.input_ids->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1])
A:transformers.models.t5.modeling_t5.input_mask->torch.tensor(DUMMY_MASK)
A:transformers.models.t5.modeling_t5.shifted_input_ids->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1]).new_zeros(input_ids.shape)
A:transformers.models.t5.modeling_t5.shifted_input_ids[..., 1:]->input_ids[..., :-1].clone()
A:transformers.models.t5.modeling_t5.self.block->torch.nn.ModuleList([T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)])
A:transformers.models.t5.modeling_t5.self.final_layer_norm->self.final_layer_norm.to('cpu')
A:transformers.models.t5.modeling_t5.self.block[layer]->self.block[layer].to(cuda_device)
A:transformers.models.t5.modeling_t5.self.embed_tokens->self.embed_tokens.to(self.first_device)
A:transformers.models.t5.modeling_t5.self.block[i]->self.block[i].to('cpu')
A:transformers.models.t5.modeling_t5.input_shape->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1]).size()
A:transformers.models.t5.modeling_t5.inputs_embeds->self.embed_tokens(input_ids)
A:transformers.models.t5.modeling_t5.attention_mask->attention_mask.to(self.decoder.first_device).to(self.decoder.first_device)
A:transformers.models.t5.modeling_t5.encoder_attention_mask->torch.ones(batch_size, encoder_seq_length, device=inputs_embeds.device, dtype=torch.long)
A:transformers.models.t5.modeling_t5.extended_attention_mask->self.get_extended_attention_mask(attention_mask, input_shape, inputs_embeds.device)
A:transformers.models.t5.modeling_t5.encoder_extended_attention_mask->encoder_extended_attention_mask.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.t5.modeling_t5.head_mask->self.get_head_mask(head_mask, self.config.num_layers)
A:transformers.models.t5.modeling_t5.encoder_hidden_states->encoder_hidden_states.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.t5.modeling_t5.encoder_decoder_position_bias->encoder_decoder_position_bias.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.t5.modeling_t5.layer_outputs->layer_module(hidden_states, attention_mask=extended_attention_mask, position_bias=position_bias, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, encoder_decoder_position_bias=encoder_decoder_position_bias, head_mask=head_mask[i], past_key_value=past_key_value, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.t5.modeling_t5.self.shared->torch.nn.Embedding(config.vocab_size, config.d_model)
A:transformers.models.t5.modeling_t5.encoder_config->copy.deepcopy(config)
A:transformers.models.t5.modeling_t5.self.encoder->self.encoder.to('cpu')
A:transformers.models.t5.modeling_t5.decoder_config->copy.deepcopy(config)
A:transformers.models.t5.modeling_t5.self.decoder->self.decoder.to('cpu')
A:transformers.models.t5.modeling_t5.encoder_outputs->self.encoder(input_ids=input_ids, attention_mask=attention_mask, inputs_embeds=inputs_embeds, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.t5.modeling_t5.decoder_input_ids->decoder_input_ids.to(self.decoder.first_device).to(self.decoder.first_device)
A:transformers.models.t5.modeling_t5.decoder_attention_mask->decoder_attention_mask.to(self.decoder.first_device).to(self.decoder.first_device)
A:transformers.models.t5.modeling_t5.decoder_outputs->self.decoder(input_ids=decoder_input_ids, attention_mask=decoder_attention_mask, inputs_embeds=decoder_inputs_embeds, past_key_values=past_key_values, encoder_hidden_states=hidden_states, encoder_attention_mask=attention_mask, head_mask=head_mask, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.t5.modeling_t5.self.lm_head->self.lm_head.to(self.encoder.first_device)
A:transformers.models.t5.modeling_t5.sequence_output->sequence_output.to(self.lm_head.weight.device).to(self.lm_head.weight.device)
A:transformers.models.t5.modeling_t5.lm_logits->self.lm_head(sequence_output)
A:transformers.models.t5.modeling_t5.loss_fct->CrossEntropyLoss(ignore_index=-100)
A:transformers.models.t5.modeling_t5.loss->loss_fct(lm_logits.view(-1, lm_logits.size(-1)), labels.view(-1))
transformers.T5EncoderModel(self,config:T5Config)
transformers.T5EncoderModel._prune_heads(self,heads_to_prune)
transformers.T5EncoderModel.deparallelize(self)
transformers.T5EncoderModel.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.T5EncoderModel.get_encoder(self)
transformers.T5EncoderModel.get_input_embeddings(self)
transformers.T5EncoderModel.parallelize(self,device_map=None)
transformers.T5EncoderModel.set_input_embeddings(self,new_embeddings)
transformers.T5ForConditionalGeneration(self,config)
transformers.T5ForConditionalGeneration._reorder_cache(self,past,beam_idx)
transformers.T5ForConditionalGeneration.deparallelize(self)
transformers.T5ForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.T5ForConditionalGeneration.get_decoder(self)
transformers.T5ForConditionalGeneration.get_encoder(self)
transformers.T5ForConditionalGeneration.get_input_embeddings(self)
transformers.T5ForConditionalGeneration.get_output_embeddings(self)
transformers.T5ForConditionalGeneration.parallelize(self,device_map=None)
transformers.T5ForConditionalGeneration.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.T5ForConditionalGeneration.set_input_embeddings(self,new_embeddings)
transformers.T5ForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.T5Model(self,config:T5Config)
transformers.T5Model._prune_heads(self,heads_to_prune)
transformers.T5Model.deparallelize(self)
transformers.T5Model.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.T5Model.get_decoder(self)
transformers.T5Model.get_encoder(self)
transformers.T5Model.get_input_embeddings(self)
transformers.T5Model.parallelize(self,device_map=None)
transformers.T5Model.set_input_embeddings(self,new_embeddings)
transformers.T5PreTrainedModel(PreTrainedModel)
transformers.T5PreTrainedModel._init_weights(self,module)
transformers.T5PreTrainedModel._shift_right(self,input_ids)
transformers.T5PreTrainedModel.dummy_inputs(self)
transformers.load_tf_weights_in_t5(model,config,tf_checkpoint_path)
transformers.models.t5.modeling_t5.T5Attention(self,config:T5Config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5Attention.__init__(self,config:T5Config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5Attention._relative_position_bucket(relative_position,bidirectional=True,num_buckets=32,max_distance=128)
transformers.models.t5.modeling_t5.T5Attention.compute_bias(self,query_length,key_length)
transformers.models.t5.modeling_t5.T5Attention.forward(self,hidden_states,mask=None,key_value_states=None,position_bias=None,past_key_value=None,head_mask=None,query_length=None,use_cache=False,output_attentions=False)
transformers.models.t5.modeling_t5.T5Attention.prune_heads(self,heads)
transformers.models.t5.modeling_t5.T5Block(self,config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5Block.__init__(self,config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5Block.forward(self,hidden_states,attention_mask=None,position_bias=None,encoder_hidden_states=None,encoder_attention_mask=None,encoder_decoder_position_bias=None,head_mask=None,past_key_value=None,use_cache=False,output_attentions=False,return_dict=True)
transformers.models.t5.modeling_t5.T5DenseGatedGeluDense(self,config)
transformers.models.t5.modeling_t5.T5DenseGatedGeluDense.__init__(self,config)
transformers.models.t5.modeling_t5.T5DenseGatedGeluDense.forward(self,hidden_states)
transformers.models.t5.modeling_t5.T5DenseReluDense(self,config)
transformers.models.t5.modeling_t5.T5DenseReluDense.__init__(self,config)
transformers.models.t5.modeling_t5.T5DenseReluDense.forward(self,hidden_states)
transformers.models.t5.modeling_t5.T5EncoderModel(self,config:T5Config)
transformers.models.t5.modeling_t5.T5EncoderModel.__init__(self,config:T5Config)
transformers.models.t5.modeling_t5.T5EncoderModel._prune_heads(self,heads_to_prune)
transformers.models.t5.modeling_t5.T5EncoderModel.deparallelize(self)
transformers.models.t5.modeling_t5.T5EncoderModel.forward(self,input_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.t5.modeling_t5.T5EncoderModel.get_encoder(self)
transformers.models.t5.modeling_t5.T5EncoderModel.get_input_embeddings(self)
transformers.models.t5.modeling_t5.T5EncoderModel.parallelize(self,device_map=None)
transformers.models.t5.modeling_t5.T5EncoderModel.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration(self,config)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.__init__(self,config)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration._reorder_cache(self,past,beam_idx)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.deparallelize(self)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.get_decoder(self)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.get_encoder(self)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.get_input_embeddings(self)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.get_output_embeddings(self)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.parallelize(self,device_map=None)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_t5.T5ForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.models.t5.modeling_t5.T5LayerCrossAttention(self,config)
transformers.models.t5.modeling_t5.T5LayerCrossAttention.__init__(self,config)
transformers.models.t5.modeling_t5.T5LayerCrossAttention.forward(self,hidden_states,key_value_states,attention_mask=None,position_bias=None,head_mask=None,past_key_value=None,use_cache=False,query_length=None,output_attentions=False)
transformers.models.t5.modeling_t5.T5LayerFF(self,config)
transformers.models.t5.modeling_t5.T5LayerFF.__init__(self,config)
transformers.models.t5.modeling_t5.T5LayerFF.forward(self,hidden_states)
transformers.models.t5.modeling_t5.T5LayerNorm(self,hidden_size,eps=1e-06)
transformers.models.t5.modeling_t5.T5LayerNorm.__init__(self,hidden_size,eps=1e-06)
transformers.models.t5.modeling_t5.T5LayerNorm.forward(self,hidden_states)
transformers.models.t5.modeling_t5.T5LayerSelfAttention(self,config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5LayerSelfAttention.__init__(self,config,has_relative_attention_bias=False)
transformers.models.t5.modeling_t5.T5LayerSelfAttention.forward(self,hidden_states,attention_mask=None,position_bias=None,head_mask=None,past_key_value=None,use_cache=False,output_attentions=False)
transformers.models.t5.modeling_t5.T5Model(self,config:T5Config)
transformers.models.t5.modeling_t5.T5Model.__init__(self,config:T5Config)
transformers.models.t5.modeling_t5.T5Model._prune_heads(self,heads_to_prune)
transformers.models.t5.modeling_t5.T5Model.deparallelize(self)
transformers.models.t5.modeling_t5.T5Model.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.t5.modeling_t5.T5Model.get_decoder(self)
transformers.models.t5.modeling_t5.T5Model.get_encoder(self)
transformers.models.t5.modeling_t5.T5Model.get_input_embeddings(self)
transformers.models.t5.modeling_t5.T5Model.parallelize(self,device_map=None)
transformers.models.t5.modeling_t5.T5Model.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_t5.T5PreTrainedModel(PreTrainedModel)
transformers.models.t5.modeling_t5.T5PreTrainedModel._init_weights(self,module)
transformers.models.t5.modeling_t5.T5PreTrainedModel._shift_right(self,input_ids)
transformers.models.t5.modeling_t5.T5PreTrainedModel.dummy_inputs(self)
transformers.models.t5.modeling_t5.T5Stack(self,config,embed_tokens=None)
transformers.models.t5.modeling_t5.T5Stack.__init__(self,config,embed_tokens=None)
transformers.models.t5.modeling_t5.T5Stack.deparallelize(self)
transformers.models.t5.modeling_t5.T5Stack.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,inputs_embeds=None,head_mask=None,past_key_values=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.t5.modeling_t5.T5Stack.get_input_embeddings(self)
transformers.models.t5.modeling_t5.T5Stack.parallelize(self,device_map=None)
transformers.models.t5.modeling_t5.T5Stack.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_t5.load_tf_weights_in_t5(model,config,tf_checkpoint_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/configuration_t5.py----------------------------------------
A:transformers.models.t5.configuration_t5.logger->utils.logging.get_logger(__name__)
transformers.T5Config(self,vocab_size=32128,d_model=512,d_kv=64,d_ff=2048,num_layers=6,num_decoder_layers=None,num_heads=8,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='relu',is_encoder_decoder=True,use_cache=True,pad_token_id=0,eos_token_id=1,**kwargs)
transformers.T5Config.hidden_size(self)
transformers.T5Config.num_attention_heads(self)
transformers.T5Config.num_hidden_layers(self)
transformers.models.t5.configuration_t5.T5Config(self,vocab_size=32128,d_model=512,d_kv=64,d_ff=2048,num_layers=6,num_decoder_layers=None,num_heads=8,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='relu',is_encoder_decoder=True,use_cache=True,pad_token_id=0,eos_token_id=1,**kwargs)
transformers.models.t5.configuration_t5.T5Config.__init__(self,vocab_size=32128,d_model=512,d_kv=64,d_ff=2048,num_layers=6,num_decoder_layers=None,num_heads=8,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='relu',is_encoder_decoder=True,use_cache=True,pad_token_id=0,eos_token_id=1,**kwargs)
transformers.models.t5.configuration_t5.T5Config.hidden_size(self)
transformers.models.t5.configuration_t5.T5Config.num_attention_heads(self)
transformers.models.t5.configuration_t5.T5Config.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/tokenization_t5.py----------------------------------------
A:transformers.models.t5.tokenization_t5.logger->utils.logging.get_logger(__name__)
A:transformers.models.t5.tokenization_t5.extra_tokens->len(set(filter(lambda x: bool('extra_id' in x), additional_special_tokens)))
A:transformers.models.t5.tokenization_t5.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.t5.tokenization_t5.token_ids_0->self._add_eos_if_not_present(token_ids_0)
A:transformers.models.t5.tokenization_t5.token_ids_1->self._add_eos_if_not_present(token_ids_1)
A:transformers.models.t5.tokenization_t5.state->self.__dict__.copy()
A:transformers.models.t5.tokenization_t5.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.t5.tokenization_t5.match->re.match('<extra_id_(\\d+)>', token)
A:transformers.models.t5.tokenization_t5.num->int(match.group(1))
A:transformers.models.t5.tokenization_t5.token->'<extra_id_{}>'.format(self.vocab_size - 1 - index)
A:transformers.models.t5.tokenization_t5.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.t5.tokenization_t5.model_inputs->self(src_texts, add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, padding=padding, truncation=truncation, **kwargs)
A:transformers.models.t5.tokenization_t5.labels_and_decoder_mask->self(tgt_texts, add_special_tokens=True, return_tensors=return_tensors, padding=padding, max_length=max_target_length, truncation=truncation, **kwargs)
transformers.T5Tokenizer(self,vocab_file,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.T5Tokenizer.__getstate__(self)
transformers.T5Tokenizer.__setstate__(self,d)
transformers.T5Tokenizer._add_eos_if_not_present(self,token_ids:List[int])->List[int]
transformers.T5Tokenizer._convert_id_to_token(self,index)
transformers.T5Tokenizer._convert_token_to_id(self,token)
transformers.T5Tokenizer._tokenize(self,text,sample=False)
transformers.T5Tokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.T5Tokenizer.convert_tokens_to_string(self,tokens)
transformers.T5Tokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.T5Tokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.T5Tokenizer.get_vocab(self)
transformers.T5Tokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.T5Tokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.T5Tokenizer.vocab_size(self)
transformers.models.t5.tokenization_t5.T5Tokenizer(self,vocab_file,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.models.t5.tokenization_t5.T5Tokenizer.__getstate__(self)
transformers.models.t5.tokenization_t5.T5Tokenizer.__init__(self,vocab_file,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.models.t5.tokenization_t5.T5Tokenizer.__setstate__(self,d)
transformers.models.t5.tokenization_t5.T5Tokenizer._add_eos_if_not_present(self,token_ids:List[int])->List[int]
transformers.models.t5.tokenization_t5.T5Tokenizer._convert_id_to_token(self,index)
transformers.models.t5.tokenization_t5.T5Tokenizer._convert_token_to_id(self,token)
transformers.models.t5.tokenization_t5.T5Tokenizer._tokenize(self,text,sample=False)
transformers.models.t5.tokenization_t5.T5Tokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.t5.tokenization_t5.T5Tokenizer.convert_tokens_to_string(self,tokens)
transformers.models.t5.tokenization_t5.T5Tokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.t5.tokenization_t5.T5Tokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.t5.tokenization_t5.T5Tokenizer.get_vocab(self)
transformers.models.t5.tokenization_t5.T5Tokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.models.t5.tokenization_t5.T5Tokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.t5.tokenization_t5.T5Tokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/tokenization_t5_fast.py----------------------------------------
A:transformers.models.t5.tokenization_t5_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.t5.tokenization_t5_fast.extra_tokens->len(set(filter(lambda x: bool('extra_id_' in x), additional_special_tokens)))
A:transformers.models.t5.tokenization_t5_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.t5.tokenization_t5_fast.model_inputs->self(src_texts, add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, padding=padding, truncation=truncation, **kwargs)
A:transformers.models.t5.tokenization_t5_fast.labels_and_decoder_mask->self(tgt_texts, add_special_tokens=True, return_tensors=return_tensors, padding=padding, max_length=max_target_length, truncation=truncation, **kwargs)
transformers.T5TokenizerFast(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.T5TokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.T5TokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.T5TokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.T5TokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast.__init__(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',pad_token='<pad>',extra_ids=100,additional_special_tokens=None,**kwargs)
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.models.t5.tokenization_t5_fast.T5TokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/convert_t5_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.config->transformers.T5Config.from_json_file(config_file)
A:transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.model->T5ForConditionalGeneration(config)
A:transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/modeling_tf_t5.py----------------------------------------
A:transformers.models.t5.modeling_tf_t5.logger->utils.logging.get_logger(__name__)
A:transformers.models.t5.modeling_tf_t5.self.weight->self.add_weight('weight', shape=(input_shape[-1],), initializer='ones')
A:transformers.models.t5.modeling_tf_t5.variance->tensorflow.math.reduce_mean(tf.math.square(hidden_states), axis=-1, keepdims=True)
A:transformers.models.t5.modeling_tf_t5.self.wi->tensorflow.keras.layers.Dense(config.d_ff, use_bias=False, name='wi')
A:transformers.models.t5.modeling_tf_t5.self.wo->tensorflow.keras.layers.Dense(config.d_model, use_bias=False, name='wo')
A:transformers.models.t5.modeling_tf_t5.self.dropout->tensorflow.keras.layers.Dropout(config.dropout_rate)
A:transformers.models.t5.modeling_tf_t5.hidden_states->self.dropout(hidden_states, training=inputs['training'])
A:transformers.models.t5.modeling_tf_t5.self.wi_0->tensorflow.keras.layers.Dense(config.d_ff, use_bias=False, name='wi_0')
A:transformers.models.t5.modeling_tf_t5.self.wi_1->tensorflow.keras.layers.Dense(config.d_ff, use_bias=False, name='wi_1')
A:transformers.models.t5.modeling_tf_t5.self.act->get_tf_activation('gelu_new')
A:transformers.models.t5.modeling_tf_t5.hidden_gelu->self.act(self.wi_0(hidden_states))
A:transformers.models.t5.modeling_tf_t5.hidden_linear->self.wi_1(hidden_states)
A:transformers.models.t5.modeling_tf_t5.self.DenseReluDense->TFT5GatedGeluDense(config, name='DenseReluDense')
A:transformers.models.t5.modeling_tf_t5.self.layer_norm->TFT5LayerNorm(epsilon=config.layer_norm_epsilon, name='layer_norm')
A:transformers.models.t5.modeling_tf_t5.normed_hidden_states->self.layer_norm(hidden_states)
A:transformers.models.t5.modeling_tf_t5.dense_output->self.DenseReluDense(normed_hidden_states, training=training)
A:transformers.models.t5.modeling_tf_t5.NEW_ID->itertools.count()
A:transformers.models.t5.modeling_tf_t5.self.layer_id->next(TFT5Attention.NEW_ID)
A:transformers.models.t5.modeling_tf_t5.self.q->tensorflow.keras.layers.Dense(self.inner_dim, use_bias=False, name='q')
A:transformers.models.t5.modeling_tf_t5.self.k->tensorflow.keras.layers.Dense(self.inner_dim, use_bias=False, name='k')
A:transformers.models.t5.modeling_tf_t5.self.v->tensorflow.keras.layers.Dense(self.inner_dim, use_bias=False, name='v')
A:transformers.models.t5.modeling_tf_t5.self.o->tensorflow.keras.layers.Dense(self.d_model, use_bias=False, name='o')
A:transformers.models.t5.modeling_tf_t5.self.relative_attention_bias->tensorflow.keras.layers.Embedding(self.relative_attention_num_buckets, self.n_heads, name='relative_attention_bias')
A:transformers.models.t5.modeling_tf_t5.self.pruned_heads->set()
A:transformers.models.t5.modeling_tf_t5.relative_position->tensorflow.math.abs(relative_position)
A:transformers.models.t5.modeling_tf_t5.is_small->tensorflow.math.less(relative_position, max_exact)
A:transformers.models.t5.modeling_tf_t5.relative_position_if_large->tensorflow.math.minimum(relative_position_if_large, num_buckets - 1)
A:transformers.models.t5.modeling_tf_t5.relative_position_bucket->self._relative_position_bucket(relative_position, bidirectional=not self.is_decoder, num_buckets=self.relative_attention_num_buckets)
A:transformers.models.t5.modeling_tf_t5.values->tensorflow.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)
A:transformers.models.t5.modeling_tf_t5.query_states->shape(self.q(hidden_states))
A:transformers.models.t5.modeling_tf_t5.key_states->project(hidden_states, self.k, key_value_states, past_key_value[0] if past_key_value is not None else None)
A:transformers.models.t5.modeling_tf_t5.value_states->project(hidden_states, self.v, key_value_states, past_key_value[1] if past_key_value is not None else None)
A:transformers.models.t5.modeling_tf_t5.scores->tensorflow.einsum('bnqd,bnkd->bnqk', query_states, key_states)
A:transformers.models.t5.modeling_tf_t5.position_bias->self.compute_bias(real_seq_length, key_length)
A:transformers.models.t5.modeling_tf_t5.weights->self.dropout(weights, training=training)
A:transformers.models.t5.modeling_tf_t5.attn_output->self.o(unshape(attn_output))
A:transformers.models.t5.modeling_tf_t5.self.SelfAttention->TFT5Attention(config, has_relative_attention_bias=has_relative_attention_bias, name='SelfAttention')
A:transformers.models.t5.modeling_tf_t5.attention_output->self.EncDecAttention(normed_hidden_states, mask=attention_mask, key_value_states=key_value_states, position_bias=position_bias, head_mask=head_mask, past_key_value=past_key_value, query_length=query_length, use_cache=use_cache, output_attentions=output_attentions, training=training)
A:transformers.models.t5.modeling_tf_t5.self.EncDecAttention->TFT5Attention(config, has_relative_attention_bias=False, name='EncDecAttention')
A:transformers.models.t5.modeling_tf_t5.error_message->'There should be {} past states. 2 (past / key) for self attention.{} Got {} past key / value states'.format(expected_num_past_key_values, '2 (past / key) for cross attention' if expected_num_past_key_values == 4 else '', len(past_key_value))
A:transformers.models.t5.modeling_tf_t5.self_attention_outputs->self.layer[0](hidden_states, attention_mask=attention_mask, position_bias=position_bias, head_mask=head_mask, past_key_value=self_attn_past_key_value, use_cache=use_cache, output_attentions=output_attentions, training=training)
A:transformers.models.t5.modeling_tf_t5.cross_attention_outputs->self.layer[1](hidden_states, key_value_states=encoder_hidden_states, attention_mask=encoder_attention_mask, position_bias=encoder_decoder_position_bias, head_mask=head_mask, past_key_value=cross_attn_past_key_value, query_length=query_length, use_cache=use_cache, output_attentions=output_attentions, training=training)
A:transformers.models.t5.modeling_tf_t5.self.final_layer_norm->TFT5LayerNorm(epsilon=config.layer_norm_epsilon, name='final_layer_norm')
A:transformers.models.t5.modeling_tf_t5.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, training=training, kwargs_call=kwargs)
A:transformers.models.t5.modeling_tf_t5.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.t5.modeling_tf_t5.inputs['input_ids']->tensorflow.reshape(inputs['input_ids'], (-1, input_shape[-1]))
A:transformers.models.t5.modeling_tf_t5.inputs['inputs_embeds']->self.embed_tokens(inputs['input_ids'])
A:transformers.models.t5.modeling_tf_t5.inputs['attention_mask']->tensorflow.cast(inputs['attention_mask'], dtype=tf.float32)
A:transformers.models.t5.modeling_tf_t5.inputs['encoder_attention_mask']->tensorflow.cast(inputs['encoder_attention_mask'], dtype=tf.float32)
A:transformers.models.t5.modeling_tf_t5.num_dims_attention_mask->len(shape_list(inputs['attention_mask']))
A:transformers.models.t5.modeling_tf_t5.seq_ids->tensorflow.range(mask_seq_length)
A:transformers.models.t5.modeling_tf_t5.causal_mask->tensorflow.cast(causal_mask, dtype=tf.float32)
A:transformers.models.t5.modeling_tf_t5.num_dims_encoder_attention_mask->len(shape_list(inputs['encoder_attention_mask']))
A:transformers.models.t5.modeling_tf_t5.layer_outputs->layer_module(hidden_states, attention_mask=extended_attention_mask, position_bias=position_bias, encoder_hidden_states=inputs['encoder_hidden_states'], encoder_attention_mask=encoder_extended_attention_mask, encoder_decoder_position_bias=encoder_decoder_position_bias, head_mask=inputs['head_mask'][i], past_key_value=past_key_value, use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], training=inputs['training'])
A:transformers.models.t5.modeling_tf_t5.input_mask->tensorflow.constant(DUMMY_MASK)
A:transformers.models.t5.modeling_tf_t5.shifted_input_ids->tensorflow.identity(shifted_input_ids)
A:transformers.models.t5.modeling_tf_t5.start_tokens->tensorflow.fill((shape_list(shifted_input_ids)[0], 1), decoder_start_token_id)
A:transformers.models.t5.modeling_tf_t5.assert_gte0->tensorflow.debugging.assert_greater_equal(shifted_input_ids, tf.cast(0, tf.int32))
A:transformers.models.t5.modeling_tf_t5.self.shared->TFSharedEmbeddings(config.vocab_size, config.d_model, name='shared')
A:transformers.models.t5.modeling_tf_t5.embed_tokens->TFWrappedEmbeddings(self.shared, abs_scope_name=shared_abs_scope_name)
A:transformers.models.t5.modeling_tf_t5.encoder_config->copy.deepcopy(config)
A:transformers.models.t5.modeling_tf_t5.self.encoder->TFT5MainLayer(encoder_config, embed_tokens, name='encoder')
A:transformers.models.t5.modeling_tf_t5.decoder_config->copy.deepcopy(config)
A:transformers.models.t5.modeling_tf_t5.self.decoder->TFT5MainLayer(decoder_config, embed_tokens, name='decoder')
A:transformers.models.t5.modeling_tf_t5.inputs['encoder_outputs']->TFBaseModelOutput(last_hidden_state=last_hidden_state, hidden_states=hidden_states, attentions=attentions)
A:transformers.models.t5.modeling_tf_t5.decoder_outputs->self.decoder(inputs['decoder_input_ids'], attention_mask=inputs['decoder_attention_mask'], encoder_hidden_states=hidden_states, encoder_attention_mask=inputs['attention_mask'], inputs_embeds=inputs['decoder_inputs_embeds'], head_mask=inputs['head_mask'], past_key_values=inputs['past_key_values'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.t5.modeling_tf_t5.self.lm_head->tensorflow.keras.layers.Dense(config.vocab_size, use_bias=False, name='lm_head')
A:transformers.models.t5.modeling_tf_t5.inputs['decoder_input_ids']->self._shift_right(inputs['labels'])
A:transformers.models.t5.modeling_tf_t5.logits->self.get_output_embeddings()(sequence_output)
A:transformers.models.t5.modeling_tf_t5.encoder_outputs->self.encoder(input_ids, attention_mask=inputs['attention_mask'], encoder_hidden_states=None, encoder_attention_mask=None, inputs_embeds=inputs['inputs_embeds'], head_mask=head_mask, past_key_values=None, use_cache=False, output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
transformers.TFT5EncoderModel(self,config,*inputs,**kwargs)
transformers.TFT5EncoderModel.call(self,input_ids,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFT5EncoderModel.get_encoder(self)
transformers.TFT5EncoderModel.get_input_embeddings(self)
transformers.TFT5EncoderModel.set_input_embeddings(self,new_embeddings)
transformers.TFT5ForConditionalGeneration(self,config,*inputs,**kwargs)
transformers.TFT5ForConditionalGeneration._reorder_cache(self,past,beam_idx)->Tuple
transformers.TFT5ForConditionalGeneration.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFT5ForConditionalGeneration.get_decoder(self)
transformers.TFT5ForConditionalGeneration.get_encoder(self)
transformers.TFT5ForConditionalGeneration.get_input_embeddings(self)
transformers.TFT5ForConditionalGeneration.get_output_embeddings(self)
transformers.TFT5ForConditionalGeneration.prepare_inputs_for_generation(self,inputs,past,attention_mask,use_cache,**kwargs)
transformers.TFT5ForConditionalGeneration.set_input_embeddings(self,new_embeddings)
transformers.TFT5Model(self,config,*inputs,**kwargs)
transformers.TFT5Model.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFT5Model.get_decoder(self)
transformers.TFT5Model.get_encoder(self)
transformers.TFT5Model.get_input_embeddings(self)
transformers.TFT5Model.set_input_embeddings(self,new_embeddings)
transformers.TFT5PreTrainedModel(TFPreTrainedModel)
transformers.TFT5PreTrainedModel._shift_right(self,input_ids)
transformers.TFT5PreTrainedModel.dummy_inputs(self)
transformers.models.t5.modeling_tf_t5.TFT5Attention(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Attention.__init__(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Attention._relative_position_bucket(relative_position,bidirectional=True,num_buckets=32,max_distance=128)
transformers.models.t5.modeling_tf_t5.TFT5Attention.call(self,hidden_states,mask=None,key_value_states=None,position_bias=None,past_key_value=None,head_mask=None,query_length=None,use_cache=False,training=False,output_attentions=False)
transformers.models.t5.modeling_tf_t5.TFT5Attention.compute_bias(self,query_length,key_length)
transformers.models.t5.modeling_tf_t5.TFT5Attention.prune_heads(self,heads)
transformers.models.t5.modeling_tf_t5.TFT5Block(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Block.__init__(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Block.call(self,hidden_states,attention_mask=None,position_bias=None,encoder_hidden_states=None,encoder_attention_mask=None,encoder_decoder_position_bias=None,head_mask=None,past_key_value=None,use_cache=False,output_attentions=False,training=False)
transformers.models.t5.modeling_tf_t5.TFT5DenseReluDense(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5DenseReluDense.__init__(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5DenseReluDense.call(self,hidden_states,training=False)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel.__init__(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel.call(self,input_ids,attention_mask=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel.get_encoder(self)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel.get_input_embeddings(self)
transformers.models.t5.modeling_tf_t5.TFT5EncoderModel.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.__init__(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration._reorder_cache(self,past,beam_idx)->Tuple
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.get_decoder(self)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.get_encoder(self)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.get_input_embeddings(self)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.get_output_embeddings(self)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.prepare_inputs_for_generation(self,inputs,past,attention_mask,use_cache,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5ForConditionalGeneration.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_tf_t5.TFT5GatedGeluDense(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5GatedGeluDense.__init__(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5GatedGeluDense.call(self,hidden_states,training=False)
transformers.models.t5.modeling_tf_t5.TFT5LayerCrossAttention(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerCrossAttention.__init__(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerCrossAttention.call(self,hidden_states,key_value_states,attention_mask=None,position_bias=None,head_mask=None,past_key_value=None,query_length=None,use_cache=False,output_attentions=False,training=False)
transformers.models.t5.modeling_tf_t5.TFT5LayerFF(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerFF.__init__(self,config,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerFF.call(self,hidden_states,training=False)
transformers.models.t5.modeling_tf_t5.TFT5LayerNorm(self,epsilon=1e-06,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerNorm.__init__(self,epsilon=1e-06,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerNorm.build(self,input_shape)
transformers.models.t5.modeling_tf_t5.TFT5LayerNorm.call(self,hidden_states)
transformers.models.t5.modeling_tf_t5.TFT5LayerSelfAttention(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerSelfAttention.__init__(self,config,has_relative_attention_bias=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5LayerSelfAttention.call(self,hidden_states,attention_mask=None,position_bias=None,head_mask=None,past_key_value=None,use_cache=False,output_attentions=False,training=False)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer(self,config,embed_tokens=None,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer.__init__(self,config,embed_tokens=None,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer._prune_heads(self,heads_to_prune)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer.call(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,inputs_embeds=None,head_mask=None,past_key_values=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)->Tuple
transformers.models.t5.modeling_tf_t5.TFT5MainLayer.get_input_embeddings(self)
transformers.models.t5.modeling_tf_t5.TFT5MainLayer.set_embed_tokens(self,embed_tokens)
transformers.models.t5.modeling_tf_t5.TFT5Model(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Model.__init__(self,config,*inputs,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Model.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,head_mask=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.t5.modeling_tf_t5.TFT5Model.get_decoder(self)
transformers.models.t5.modeling_tf_t5.TFT5Model.get_encoder(self)
transformers.models.t5.modeling_tf_t5.TFT5Model.get_input_embeddings(self)
transformers.models.t5.modeling_tf_t5.TFT5Model.set_input_embeddings(self,new_embeddings)
transformers.models.t5.modeling_tf_t5.TFT5PreTrainedModel(TFPreTrainedModel)
transformers.models.t5.modeling_tf_t5.TFT5PreTrainedModel._shift_right(self,input_ids)
transformers.models.t5.modeling_tf_t5.TFT5PreTrainedModel.dummy_inputs(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/t5/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/configuration_albert.py----------------------------------------
transformers.AlbertConfig(self,vocab_size=30000,embedding_size=128,hidden_size=4096,num_hidden_layers=12,num_hidden_groups=1,num_attention_heads=64,intermediate_size=16384,inner_group_num=1,hidden_act='gelu_new',hidden_dropout_prob=0,attention_probs_dropout_prob=0,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,classifier_dropout_prob=0.1,position_embedding_type='absolute',pad_token_id=0,bos_token_id=2,eos_token_id=3,**kwargs)
transformers.models.albert.configuration_albert.AlbertConfig(self,vocab_size=30000,embedding_size=128,hidden_size=4096,num_hidden_layers=12,num_hidden_groups=1,num_attention_heads=64,intermediate_size=16384,inner_group_num=1,hidden_act='gelu_new',hidden_dropout_prob=0,attention_probs_dropout_prob=0,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,classifier_dropout_prob=0.1,position_embedding_type='absolute',pad_token_id=0,bos_token_id=2,eos_token_id=3,**kwargs)
transformers.models.albert.configuration_albert.AlbertConfig.__init__(self,vocab_size=30000,embedding_size=128,hidden_size=4096,num_hidden_layers=12,num_hidden_groups=1,num_attention_heads=64,intermediate_size=16384,inner_group_num=1,hidden_act='gelu_new',hidden_dropout_prob=0,attention_probs_dropout_prob=0,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,classifier_dropout_prob=0.1,position_embedding_type='absolute',pad_token_id=0,bos_token_id=2,eos_token_id=3,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/modeling_tf_albert.py----------------------------------------
A:transformers.models.albert.modeling_tf_albert.logger->utils.logging.get_logger(__name__)
A:transformers.models.albert.modeling_tf_albert.self.position_embeddings->tensorflow.keras.layers.Embedding(self.max_position_embeddings, self.embedding_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.albert.modeling_tf_albert.self.token_type_embeddings->tensorflow.keras.layers.Embedding(self.type_vocab_size, self.embedding_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.albert.modeling_tf_albert.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.albert.modeling_tf_albert.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.albert.modeling_tf_albert.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.embedding_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.albert.modeling_tf_albert.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.albert.modeling_tf_albert.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.albert.modeling_tf_albert.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.albert.modeling_tf_albert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.albert.modeling_tf_albert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.albert.modeling_tf_albert.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.albert.modeling_tf_albert.x->tensorflow.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))
A:transformers.models.albert.modeling_tf_albert.logits->self.classifier(pooled_output)
A:transformers.models.albert.modeling_tf_albert.self.dense->tensorflow.keras.layers.Dense(config.embedding_size, kernel_initializer=get_initializer(config.initializer_range), name='dense')
A:transformers.models.albert.modeling_tf_albert.hidden_states->self.LayerNorm(hidden_states)
A:transformers.models.albert.modeling_tf_albert.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.albert.modeling_tf_albert.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.albert.modeling_tf_albert.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.albert.modeling_tf_albert.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.albert.modeling_tf_albert.self.pruned_heads->set()
A:transformers.models.albert.modeling_tf_albert.self.attention_dropout->tensorflow.keras.layers.Dropout(config.attention_probs_dropout_prob)
A:transformers.models.albert.modeling_tf_albert.self.output_dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.albert.modeling_tf_albert.mixed_query_layer->self.query(input_tensor)
A:transformers.models.albert.modeling_tf_albert.mixed_key_layer->self.key(input_tensor)
A:transformers.models.albert.modeling_tf_albert.mixed_value_layer->self.value(input_tensor)
A:transformers.models.albert.modeling_tf_albert.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.albert.modeling_tf_albert.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.albert.modeling_tf_albert.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.albert.modeling_tf_albert.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.albert.modeling_tf_albert.dk->tensorflow.cast(shape_list(key_layer)[-1], tf.float32)
A:transformers.models.albert.modeling_tf_albert.attention_probs->self.attention_dropout(attention_probs, training=training)
A:transformers.models.albert.modeling_tf_albert.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.albert.modeling_tf_albert.attention_output->self.LayerNorm(hidden_states + input_tensor)
A:transformers.models.albert.modeling_tf_albert.self.attention->TFAlbertAttention(config, name='attention')
A:transformers.models.albert.modeling_tf_albert.self.ffn->tensorflow.keras.layers.Dense(config.intermediate_size, kernel_initializer=get_initializer(config.initializer_range), name='ffn')
A:transformers.models.albert.modeling_tf_albert.self.activation->get_tf_activation(config.hidden_act)
A:transformers.models.albert.modeling_tf_albert.self.ffn_output->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='ffn_output')
A:transformers.models.albert.modeling_tf_albert.self.full_layer_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='full_layer_layer_norm')
A:transformers.models.albert.modeling_tf_albert.attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.albert.modeling_tf_albert.ffn_output->self.dropout(ffn_output, training=training)
A:transformers.models.albert.modeling_tf_albert.layer_output->albert_layer(hidden_states, attention_mask, head_mask[layer_index], output_attentions, training=training)
A:transformers.models.albert.modeling_tf_albert.self.embedding_hidden_mapping_in->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='embedding_hidden_mapping_in')
A:transformers.models.albert.modeling_tf_albert.layers_per_group->int(self.num_hidden_layers / self.num_hidden_groups)
A:transformers.models.albert.modeling_tf_albert.group_idx->int(i / (self.num_hidden_layers / self.num_hidden_groups))
A:transformers.models.albert.modeling_tf_albert.layer_group_output->self.albert_layer_groups[group_idx](hidden_states, attention_mask, head_mask[group_idx * layers_per_group:(group_idx + 1) * layers_per_group], output_attentions, output_hidden_states, training=training)
A:transformers.models.albert.modeling_tf_albert.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.albert.modeling_tf_albert.self.decoder_bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='decoder/bias')
A:transformers.models.albert.modeling_tf_albert.self.embeddings->TFAlbertEmbeddings(config, name='embeddings')
A:transformers.models.albert.modeling_tf_albert.self.encoder->TFAlbertTransformer(config, name='encoder')
A:transformers.models.albert.modeling_tf_albert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.albert.modeling_tf_albert.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.albert.modeling_tf_albert.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.albert.modeling_tf_albert.extended_attention_mask->tensorflow.cast(extended_attention_mask, tf.float32)
A:transformers.models.albert.modeling_tf_albert.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.self.albert->TFAlbertMainLayer(config, name='albert')
A:transformers.models.albert.modeling_tf_albert.outputs->self.albert(flat_input_ids, flat_attention_mask, flat_token_type_ids, flat_position_ids, inputs['head_mask'], flat_inputs_embeds, inputs['output_attentions'], inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.self.predictions->TFAlbertMLMHead(config, self.albert.embeddings, name='predictions')
A:transformers.models.albert.modeling_tf_albert.self.sop_classifier->TFAlbertSOPHead(config, name='sop_classifier')
A:transformers.models.albert.modeling_tf_albert.num_tokens_to_copy->min(self.predictions.bias.shape[0], new_num_tokens)
A:transformers.models.albert.modeling_tf_albert.init_bias->tensorflow.zeros((new_num_tokens,))
A:transformers.models.albert.modeling_tf_albert.self.predictions.bias->self.add_weight(shape=(new_num_tokens,), initializer='zeros', trainable=True, name=name)
A:transformers.models.albert.modeling_tf_albert.init_decoder_bias->tensorflow.zeros((new_num_tokens,))
A:transformers.models.albert.modeling_tf_albert.self.predictions.decoder_bias->self.add_weight(shape=(new_num_tokens,), initializer='zeros', trainable=True, name=name)
A:transformers.models.albert.modeling_tf_albert.prediction_scores->self.predictions(sequence_output, training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.sop_scores->self.sop_classifier(pooled_output, training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.self.classifier->tensorflow.keras.layers.Dense(1, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.albert.modeling_tf_albert.dropout_pooled_output->self.dropout(pooled_output, training=training)
A:transformers.models.albert.modeling_tf_albert.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.albert.modeling_tf_albert.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.albert.modeling_tf_albert.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.albert.modeling_tf_albert.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.albert.modeling_tf_albert.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.albert.modeling_tf_albert.loss->self.compute_loss(labels, (start_logits, end_logits))
A:transformers.models.albert.modeling_tf_albert.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
transformers.TFAlbertForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFAlbertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFAlbertForMaskedLM.get_output_embeddings(self)
transformers.TFAlbertForMaskedLM.resize_token_embeddings(self,new_num_tokens)
transformers.TFAlbertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFAlbertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFAlbertForMultipleChoice.dummy_inputs(self)
transformers.TFAlbertForPreTraining(self,config,*inputs,**kwargs)
transformers.TFAlbertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFAlbertForPreTraining.get_output_embeddings(self)
transformers.TFAlbertForPreTraining.resize_token_embeddings(self,new_num_tokens)
transformers.TFAlbertForPreTrainingOutput(ModelOutput)
transformers.TFAlbertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFAlbertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFAlbertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFAlbertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFAlbertForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFAlbertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFAlbertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.TFAlbertMainLayer._prune_heads(self,heads_to_prune)
transformers.TFAlbertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFAlbertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFAlbertMainLayer.get_input_embeddings(self)
transformers.TFAlbertMainLayer.set_input_embeddings(self,value)
transformers.TFAlbertModel(self,config,*inputs,**kwargs)
transformers.TFAlbertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFAlbertPreTrainedModel(TFPreTrainedModel)
transformers.models.albert.modeling_tf_albert.TFAlbertAttention(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertAttention.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertAttention.call(self,input_tensor,attention_mask,head_mask,output_attentions,training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertAttention.prune_heads(self,heads)
transformers.models.albert.modeling_tf_albert.TFAlbertAttention.transpose_for_scores(self,x,batch_size)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings._linear(self,inputs)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings.build(self,input_shape)
transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMaskedLM.get_output_embeddings(self)
transformers.models.albert.modeling_tf_albert.TFAlbertForMaskedLM.resize_token_embeddings(self,new_num_tokens)
transformers.models.albert.modeling_tf_albert.TFAlbertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForMultipleChoice.dummy_inputs(self)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTraining(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTraining.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTraining.get_output_embeddings(self)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTraining.resize_token_embeddings(self,new_num_tokens)
transformers.models.albert.modeling_tf_albert.TFAlbertForPreTrainingOutput(ModelOutput)
transformers.models.albert.modeling_tf_albert.TFAlbertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertLayer(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertLayer.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertLayerGroup(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertLayerGroup.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertLayerGroup.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertMLMHead(self,config,input_embeddings,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertMLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertMLMHead.build(self,input_shape)
transformers.models.albert.modeling_tf_albert.TFAlbertMLMHead.call(self,hidden_states)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer.__init__(self,config,add_pooling_layer=True,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer._prune_heads(self,heads_to_prune)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer.get_input_embeddings(self)
transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer.set_input_embeddings(self,value)
transformers.models.albert.modeling_tf_albert.TFAlbertModel(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertPreTrainedModel(TFPreTrainedModel)
transformers.models.albert.modeling_tf_albert.TFAlbertSOPHead(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertSOPHead.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertSOPHead.call(self,pooled_output,training:bool)
transformers.models.albert.modeling_tf_albert.TFAlbertSelfOutput(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertSelfOutput.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertSelfOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.albert.modeling_tf_albert.TFAlbertTransformer(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertTransformer.__init__(self,config,**kwargs)
transformers.models.albert.modeling_tf_albert.TFAlbertTransformer.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/modeling_albert.py----------------------------------------
A:transformers.models.albert.modeling_albert.logger->utils.logging.get_logger(__name__)
A:transformers.models.albert.modeling_albert.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.albert.modeling_albert.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.albert.modeling_albert.array->numpy.transpose(array)
A:transformers.models.albert.modeling_albert.name->name.split('/').split('/')
A:transformers.models.albert.modeling_albert.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.albert.modeling_albert.pointer->getattr(pointer, 'weight')
A:transformers.models.albert.modeling_albert.num->int(scope_names[1])
A:transformers.models.albert.modeling_albert.pointer.data->torch.from_numpy(array)
A:transformers.models.albert.modeling_albert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.embedding_size, padding_idx=config.pad_token_id)
A:transformers.models.albert.modeling_albert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.embedding_size)
A:transformers.models.albert.modeling_albert.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.embedding_size)
A:transformers.models.albert.modeling_albert.self.LayerNorm->torch.nn.LayerNorm(config.embedding_size)
A:transformers.models.albert.modeling_albert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.albert.modeling_albert.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.albert.modeling_albert.input_shape->input_ids.size()
A:transformers.models.albert.modeling_albert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.albert.modeling_albert.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.albert.modeling_albert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.albert.modeling_albert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.albert.modeling_albert.embeddings->self.dropout(embeddings)
A:transformers.models.albert.modeling_albert.self.query->prune_linear_layer(self.query, index)
A:transformers.models.albert.modeling_albert.self.key->prune_linear_layer(self.key, index)
A:transformers.models.albert.modeling_albert.self.value->prune_linear_layer(self.value, index)
A:transformers.models.albert.modeling_albert.self.attention_dropout->torch.nn.Dropout(config.attention_probs_dropout_prob)
A:transformers.models.albert.modeling_albert.self.output_dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.albert.modeling_albert.self.dense->torch.nn.Linear(config.hidden_size, config.embedding_size)
A:transformers.models.albert.modeling_albert.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.albert.modeling_albert.self.distance_embedding->torch.nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)
A:transformers.models.albert.modeling_albert.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.albert.modeling_albert.(heads, index)->find_pruneable_heads_and_indices(heads, self.num_attention_heads, self.attention_head_size, self.pruned_heads)
A:transformers.models.albert.modeling_albert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.albert.modeling_albert.mixed_key_layer->self.key(hidden_states)
A:transformers.models.albert.modeling_albert.mixed_value_layer->self.value(hidden_states)
A:transformers.models.albert.modeling_albert.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.albert.modeling_albert.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.albert.modeling_albert.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.albert.modeling_albert.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.albert.modeling_albert.position_ids_l->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)
A:transformers.models.albert.modeling_albert.position_ids_r->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)
A:transformers.models.albert.modeling_albert.positional_embedding->positional_embedding.to(dtype=query_layer.dtype).to(dtype=query_layer.dtype)
A:transformers.models.albert.modeling_albert.relative_position_scores->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.albert.modeling_albert.relative_position_scores_query->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.albert.modeling_albert.relative_position_scores_key->torch.einsum('bhrd,lrd->bhlr', key_layer, positional_embedding)
A:transformers.models.albert.modeling_albert.attention_probs->self.attention_dropout(attention_probs)
A:transformers.models.albert.modeling_albert.context_layer->context_layer.permute(0, 2, 1, 3).contiguous().permute(0, 2, 1, 3).contiguous()
A:transformers.models.albert.modeling_albert.w->self.dense.weight.t().view(self.num_attention_heads, self.attention_head_size, self.hidden_size).to(context_layer.dtype)
A:transformers.models.albert.modeling_albert.b->self.dense.bias.to(context_layer.dtype)
A:transformers.models.albert.modeling_albert.projected_context_layer_dropout->self.output_dropout(projected_context_layer)
A:transformers.models.albert.modeling_albert.layernormed_context_layer->self.LayerNorm(hidden_states + projected_context_layer_dropout)
A:transformers.models.albert.modeling_albert.self.full_layer_layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.albert.modeling_albert.self.attention->AlbertAttention(config)
A:transformers.models.albert.modeling_albert.self.ffn->torch.nn.Linear(config.hidden_size, config.intermediate_size)
A:transformers.models.albert.modeling_albert.self.ffn_output->torch.nn.Linear(config.intermediate_size, config.hidden_size)
A:transformers.models.albert.modeling_albert.attention_output->self.attention(hidden_states, attention_mask, head_mask, output_attentions)
A:transformers.models.albert.modeling_albert.ffn_output->self.ffn_output(ffn_output)
A:transformers.models.albert.modeling_albert.hidden_states->self.decoder(hidden_states)
A:transformers.models.albert.modeling_albert.self.albert_layers->torch.nn.ModuleList([AlbertLayer(config) for _ in range(config.inner_group_num)])
A:transformers.models.albert.modeling_albert.layer_output->albert_layer(hidden_states, attention_mask, head_mask[layer_index], output_attentions)
A:transformers.models.albert.modeling_albert.self.embedding_hidden_mapping_in->torch.nn.Linear(config.embedding_size, config.hidden_size)
A:transformers.models.albert.modeling_albert.self.albert_layer_groups->torch.nn.ModuleList([AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)])
A:transformers.models.albert.modeling_albert.layers_per_group->int(self.config.num_hidden_layers / self.config.num_hidden_groups)
A:transformers.models.albert.modeling_albert.group_idx->int(layer / self.config.inner_group_num)
A:transformers.models.albert.modeling_albert.layer_group_output->self.albert_layer_groups[group_idx](hidden_states, attention_mask, head_mask[group_idx * layers_per_group:(group_idx + 1) * layers_per_group], output_attentions, output_hidden_states)
A:transformers.models.albert.modeling_albert.self.embeddings->AlbertEmbeddings(config)
A:transformers.models.albert.modeling_albert.self.encoder->AlbertTransformer(config)
A:transformers.models.albert.modeling_albert.self.pooler->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.albert.modeling_albert.self.pooler_activation->torch.nn.Tanh()
A:transformers.models.albert.modeling_albert.inner_group_idx->int(layer - group_idx * self.config.inner_group_num)
A:transformers.models.albert.modeling_albert.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.albert.modeling_albert.extended_attention_mask->extended_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.models.albert.modeling_albert.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.albert.modeling_albert.embedding_output->self.embeddings(input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.albert.modeling_albert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.albert.modeling_albert.self.albert->AlbertModel(config)
A:transformers.models.albert.modeling_albert.self.predictions->AlbertMLMHead(config)
A:transformers.models.albert.modeling_albert.self.sop_classifier->AlbertSOPHead(config)
A:transformers.models.albert.modeling_albert.outputs->self.albert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.albert.modeling_albert.prediction_scores->self.predictions(sequence_outputs)
A:transformers.models.albert.modeling_albert.sop_scores->self.sop_classifier(pooled_output)
A:transformers.models.albert.modeling_albert.loss_fct->CrossEntropyLoss()
A:transformers.models.albert.modeling_albert.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.albert.modeling_albert.sentence_order_loss->loss_fct(sop_scores.view(-1, 2), sentence_order_label.view(-1))
A:transformers.models.albert.modeling_albert.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.albert.modeling_albert.self.decoder->torch.nn.Linear(config.embedding_size, config.vocab_size)
A:transformers.models.albert.modeling_albert.self.classifier->torch.nn.Linear(config.hidden_size, 1)
A:transformers.models.albert.modeling_albert.dropout_pooled_output->self.dropout(pooled_output)
A:transformers.models.albert.modeling_albert.logits->self.classifier(pooled_output)
A:transformers.models.albert.modeling_albert.pooled_output->self.dropout(pooled_output)
A:transformers.models.albert.modeling_albert.loss->loss_fct(reshaped_logits, labels)
A:transformers.models.albert.modeling_albert.sequence_output->self.dropout(sequence_output)
A:transformers.models.albert.modeling_albert.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.albert.modeling_albert.(start_logits, end_logits)->self.classifier(pooled_output).split(1, dim=-1)
A:transformers.models.albert.modeling_albert.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.albert.modeling_albert.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.albert.modeling_albert.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.albert.modeling_albert.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.albert.modeling_albert.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.albert.modeling_albert.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.albert.modeling_albert.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.albert.modeling_albert.reshaped_logits->self.classifier(pooled_output).view(-1, num_choices)
transformers.AlbertForMaskedLM(self,config)
transformers.AlbertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertForMaskedLM.get_input_embeddings(self)
transformers.AlbertForMaskedLM.get_output_embeddings(self)
transformers.AlbertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.AlbertForMultipleChoice(self,config)
transformers.AlbertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertForPreTraining(self,config)
transformers.AlbertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,sentence_order_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertForPreTraining.get_input_embeddings(self)
transformers.AlbertForPreTraining.get_output_embeddings(self)
transformers.AlbertForPreTraining.set_output_embeddings(self,new_embeddings)
transformers.AlbertForPreTrainingOutput(ModelOutput)
transformers.AlbertForQuestionAnswering(self,config)
transformers.AlbertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertForSequenceClassification(self,config)
transformers.AlbertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertForTokenClassification(self,config)
transformers.AlbertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertModel(self,config,add_pooling_layer=True)
transformers.AlbertModel._prune_heads(self,heads_to_prune)
transformers.AlbertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.AlbertModel.get_input_embeddings(self)
transformers.AlbertModel.set_input_embeddings(self,value)
transformers.AlbertPreTrainedModel(PreTrainedModel)
transformers.AlbertPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_albert(model,config,tf_checkpoint_path)
transformers.models.albert.modeling_albert.AlbertAttention(self,config)
transformers.models.albert.modeling_albert.AlbertAttention.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False)
transformers.models.albert.modeling_albert.AlbertAttention.prune_heads(self,heads)
transformers.models.albert.modeling_albert.AlbertAttention.transpose_for_scores(self,x)
transformers.models.albert.modeling_albert.AlbertEmbeddings(self,config)
transformers.models.albert.modeling_albert.AlbertEmbeddings.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.albert.modeling_albert.AlbertForMaskedLM(self,config)
transformers.models.albert.modeling_albert.AlbertForMaskedLM.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertForMaskedLM.get_input_embeddings(self)
transformers.models.albert.modeling_albert.AlbertForMaskedLM.get_output_embeddings(self)
transformers.models.albert.modeling_albert.AlbertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.albert.modeling_albert.AlbertForMultipleChoice(self,config)
transformers.models.albert.modeling_albert.AlbertForMultipleChoice.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertForPreTraining(self,config)
transformers.models.albert.modeling_albert.AlbertForPreTraining.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,sentence_order_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertForPreTraining.get_input_embeddings(self)
transformers.models.albert.modeling_albert.AlbertForPreTraining.get_output_embeddings(self)
transformers.models.albert.modeling_albert.AlbertForPreTraining.set_output_embeddings(self,new_embeddings)
transformers.models.albert.modeling_albert.AlbertForPreTrainingOutput(ModelOutput)
transformers.models.albert.modeling_albert.AlbertForQuestionAnswering(self,config)
transformers.models.albert.modeling_albert.AlbertForQuestionAnswering.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertForSequenceClassification(self,config)
transformers.models.albert.modeling_albert.AlbertForSequenceClassification.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertForTokenClassification(self,config)
transformers.models.albert.modeling_albert.AlbertForTokenClassification.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertLayer(self,config)
transformers.models.albert.modeling_albert.AlbertLayer.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertLayer.ff_chunk(self,attention_output)
transformers.models.albert.modeling_albert.AlbertLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False)
transformers.models.albert.modeling_albert.AlbertLayerGroup(self,config)
transformers.models.albert.modeling_albert.AlbertLayerGroup.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertLayerGroup.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False)
transformers.models.albert.modeling_albert.AlbertMLMHead(self,config)
transformers.models.albert.modeling_albert.AlbertMLMHead.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertMLMHead.forward(self,hidden_states)
transformers.models.albert.modeling_albert.AlbertModel(self,config,add_pooling_layer=True)
transformers.models.albert.modeling_albert.AlbertModel.__init__(self,config,add_pooling_layer=True)
transformers.models.albert.modeling_albert.AlbertModel._prune_heads(self,heads_to_prune)
transformers.models.albert.modeling_albert.AlbertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.albert.modeling_albert.AlbertModel.get_input_embeddings(self)
transformers.models.albert.modeling_albert.AlbertModel.set_input_embeddings(self,value)
transformers.models.albert.modeling_albert.AlbertPreTrainedModel(PreTrainedModel)
transformers.models.albert.modeling_albert.AlbertPreTrainedModel._init_weights(self,module)
transformers.models.albert.modeling_albert.AlbertSOPHead(self,config)
transformers.models.albert.modeling_albert.AlbertSOPHead.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertSOPHead.forward(self,pooled_output)
transformers.models.albert.modeling_albert.AlbertTransformer(self,config)
transformers.models.albert.modeling_albert.AlbertTransformer.__init__(self,config)
transformers.models.albert.modeling_albert.AlbertTransformer.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.albert.modeling_albert.load_tf_weights_in_albert(model,config,tf_checkpoint_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/tokenization_albert.py----------------------------------------
A:transformers.models.albert.tokenization_albert.logger->utils.logging.get_logger(__name__)
A:transformers.models.albert.tokenization_albert.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.albert.tokenization_albert.state->self.__dict__.copy()
A:transformers.models.albert.tokenization_albert.outputs->outputs.lower().lower()
A:transformers.models.albert.tokenization_albert.text->self.preprocess_text(text)
A:transformers.models.albert.tokenization_albert.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.albert.tokenization_albert.cur_pieces->self.sp_model.EncodeAsPieces(piece[:-1].replace(SPIECE_UNDERLINE, ''))
A:transformers.models.albert.tokenization_albert.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.albert.tokenization_albert.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.AlbertTokenizer(self,vocab_file,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.AlbertTokenizer.__getstate__(self)
transformers.AlbertTokenizer.__setstate__(self,d)
transformers.AlbertTokenizer._convert_id_to_token(self,index)
transformers.AlbertTokenizer._convert_token_to_id(self,token)
transformers.AlbertTokenizer._tokenize(self,text,sample=False)
transformers.AlbertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.AlbertTokenizer.convert_tokens_to_string(self,tokens)
transformers.AlbertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.AlbertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.AlbertTokenizer.get_vocab(self)
transformers.AlbertTokenizer.preprocess_text(self,inputs)
transformers.AlbertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.AlbertTokenizer.vocab_size(self)
transformers.models.albert.tokenization_albert.AlbertTokenizer(self,vocab_file,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.albert.tokenization_albert.AlbertTokenizer.__getstate__(self)
transformers.models.albert.tokenization_albert.AlbertTokenizer.__init__(self,vocab_file,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.albert.tokenization_albert.AlbertTokenizer.__setstate__(self,d)
transformers.models.albert.tokenization_albert.AlbertTokenizer._convert_id_to_token(self,index)
transformers.models.albert.tokenization_albert.AlbertTokenizer._convert_token_to_id(self,token)
transformers.models.albert.tokenization_albert.AlbertTokenizer._tokenize(self,text,sample=False)
transformers.models.albert.tokenization_albert.AlbertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.albert.tokenization_albert.AlbertTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.albert.tokenization_albert.AlbertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.albert.tokenization_albert.AlbertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.albert.tokenization_albert.AlbertTokenizer.get_vocab(self)
transformers.models.albert.tokenization_albert.AlbertTokenizer.preprocess_text(self,inputs)
transformers.models.albert.tokenization_albert.AlbertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.albert.tokenization_albert.AlbertTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/convert_albert_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.config->transformers.AlbertConfig.from_json_file(albert_config_file)
A:transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.model->AlbertForPreTraining(config)
A:transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,albert_config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/tokenization_albert_fast.py----------------------------------------
A:transformers.models.albert.tokenization_albert_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.albert.tokenization_albert_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.AlbertTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.AlbertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.AlbertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.AlbertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.AlbertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,do_lower_case=True,remove_space=True,keep_accents=False,bos_token='[CLS]',eos_token='[SEP]',unk_token='<unk>',sep_token='[SEP]',pad_token='<pad>',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.albert.tokenization_albert_fast.AlbertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/albert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/squeezebert/configuration_squeezebert.py----------------------------------------
A:transformers.models.squeezebert.configuration_squeezebert.logger->utils.logging.get_logger(__name__)
transformers.SqueezeBertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=768,q_groups=4,k_groups=4,v_groups=4,post_attention_groups=1,intermediate_groups=4,output_groups=4,**kwargs)
transformers.models.squeezebert.configuration_squeezebert.SqueezeBertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=768,q_groups=4,k_groups=4,v_groups=4,post_attention_groups=1,intermediate_groups=4,output_groups=4,**kwargs)
transformers.models.squeezebert.configuration_squeezebert.SqueezeBertConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=768,q_groups=4,k_groups=4,v_groups=4,post_attention_groups=1,intermediate_groups=4,output_groups=4,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/squeezebert/modeling_squeezebert.py----------------------------------------
A:transformers.models.squeezebert.modeling_squeezebert.logger->utils.logging.get_logger(__name__)
A:transformers.models.squeezebert.modeling_squeezebert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.embedding_size, padding_idx=config.pad_token_id)
A:transformers.models.squeezebert.modeling_squeezebert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.embedding_size)
A:transformers.models.squeezebert.modeling_squeezebert.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.embedding_size)
A:transformers.models.squeezebert.modeling_squeezebert.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.squeezebert.modeling_squeezebert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.squeezebert.modeling_squeezebert.input_shape->input_ids.size()
A:transformers.models.squeezebert.modeling_squeezebert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.squeezebert.modeling_squeezebert.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.squeezebert.modeling_squeezebert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.squeezebert.modeling_squeezebert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.squeezebert.modeling_squeezebert.embeddings->self.dropout(embeddings)
A:transformers.models.squeezebert.modeling_squeezebert.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.squeezebert.modeling_squeezebert.self.conv1d->torch.nn.Conv1d(in_channels=cin, out_channels=cout, kernel_size=1, groups=groups)
A:transformers.models.squeezebert.modeling_squeezebert.self.layernorm->SqueezeBertLayerNorm(cout)
A:transformers.models.squeezebert.modeling_squeezebert.output->self.conv1d(x)
A:transformers.models.squeezebert.modeling_squeezebert.self.attention_head_size->int(cin / config.num_attention_heads)
A:transformers.models.squeezebert.modeling_squeezebert.self.query->torch.nn.Conv1d(in_channels=cin, out_channels=cin, kernel_size=1, groups=q_groups)
A:transformers.models.squeezebert.modeling_squeezebert.self.key->torch.nn.Conv1d(in_channels=cin, out_channels=cin, kernel_size=1, groups=k_groups)
A:transformers.models.squeezebert.modeling_squeezebert.self.value->torch.nn.Conv1d(in_channels=cin, out_channels=cin, kernel_size=1, groups=v_groups)
A:transformers.models.squeezebert.modeling_squeezebert.self.softmax->torch.nn.Softmax(dim=-1)
A:transformers.models.squeezebert.modeling_squeezebert.self.matmul_qk->MatMulWrapper()
A:transformers.models.squeezebert.modeling_squeezebert.self.matmul_qkv->MatMulWrapper()
A:transformers.models.squeezebert.modeling_squeezebert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.squeezebert.modeling_squeezebert.mixed_key_layer->self.key(hidden_states)
A:transformers.models.squeezebert.modeling_squeezebert.mixed_value_layer->self.value(hidden_states)
A:transformers.models.squeezebert.modeling_squeezebert.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.squeezebert.modeling_squeezebert.key_layer->self.transpose_key_for_scores(mixed_key_layer)
A:transformers.models.squeezebert.modeling_squeezebert.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.squeezebert.modeling_squeezebert.attention_score->self.matmul_qk(query_layer, key_layer)
A:transformers.models.squeezebert.modeling_squeezebert.attention_probs->self.dropout(attention_probs)
A:transformers.models.squeezebert.modeling_squeezebert.context_layer->self.transpose_output(context_layer)
A:transformers.models.squeezebert.modeling_squeezebert.self.attention->SqueezeBertSelfAttention(config=config, cin=c0, q_groups=config.q_groups, k_groups=config.k_groups, v_groups=config.v_groups)
A:transformers.models.squeezebert.modeling_squeezebert.self.post_attention->ConvDropoutLayerNorm(cin=c0, cout=c1, groups=config.post_attention_groups, dropout_prob=config.hidden_dropout_prob)
A:transformers.models.squeezebert.modeling_squeezebert.self.intermediate->ConvActivation(cin=c1, cout=c2, groups=config.intermediate_groups, act=config.hidden_act)
A:transformers.models.squeezebert.modeling_squeezebert.self.output->ConvDropoutLayerNorm(cin=c2, cout=c3, groups=config.output_groups, dropout_prob=config.hidden_dropout_prob)
A:transformers.models.squeezebert.modeling_squeezebert.att->self.attention(hidden_states, attention_mask, output_attentions)
A:transformers.models.squeezebert.modeling_squeezebert.post_attention_output->self.post_attention(attention_output, hidden_states)
A:transformers.models.squeezebert.modeling_squeezebert.intermediate_output->self.intermediate(post_attention_output)
A:transformers.models.squeezebert.modeling_squeezebert.layer_output->layer.forward(hidden_states, attention_mask, output_attentions)
A:transformers.models.squeezebert.modeling_squeezebert.self.layers->torch.nn.ModuleList((SqueezeBertModule(config) for _ in range(config.num_hidden_layers)))
A:transformers.models.squeezebert.modeling_squeezebert.hidden_states->self.decoder(hidden_states)
A:transformers.models.squeezebert.modeling_squeezebert.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.squeezebert.modeling_squeezebert.self.activation->torch.nn.Tanh()
A:transformers.models.squeezebert.modeling_squeezebert.pooled_output->self.dropout(pooled_output)
A:transformers.models.squeezebert.modeling_squeezebert.self.transform->SqueezeBertPredictionHeadTransform(config)
A:transformers.models.squeezebert.modeling_squeezebert.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.squeezebert.modeling_squeezebert.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.squeezebert.modeling_squeezebert.self.predictions->SqueezeBertLMPredictionHead(config)
A:transformers.models.squeezebert.modeling_squeezebert.prediction_scores->self.cls(sequence_output)
A:transformers.models.squeezebert.modeling_squeezebert.self.embeddings->SqueezeBertEmbeddings(config)
A:transformers.models.squeezebert.modeling_squeezebert.self.encoder->SqueezeBertEncoder(config)
A:transformers.models.squeezebert.modeling_squeezebert.self.pooler->SqueezeBertPooler(config)
A:transformers.models.squeezebert.modeling_squeezebert.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.squeezebert.modeling_squeezebert.extended_attention_mask->self.get_extended_attention_mask(attention_mask, input_shape, device)
A:transformers.models.squeezebert.modeling_squeezebert.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.squeezebert.modeling_squeezebert.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.squeezebert.modeling_squeezebert.encoder_outputs->self.encoder(hidden_states=embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.squeezebert.modeling_squeezebert.self.transformer->SqueezeBertModel(config)
A:transformers.models.squeezebert.modeling_squeezebert.self.cls->SqueezeBertOnlyMLMHead(config)
A:transformers.models.squeezebert.modeling_squeezebert.outputs->self.transformer(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.squeezebert.modeling_squeezebert.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.squeezebert.modeling_squeezebert.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.squeezebert.modeling_squeezebert.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.squeezebert.modeling_squeezebert.logits->self.qa_outputs(sequence_output)
A:transformers.models.squeezebert.modeling_squeezebert.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.squeezebert.modeling_squeezebert.reshaped_logits->self.qa_outputs(sequence_output).view(-1, num_choices)
A:transformers.models.squeezebert.modeling_squeezebert.sequence_output->self.dropout(sequence_output)
A:transformers.models.squeezebert.modeling_squeezebert.active_logits->self.qa_outputs(sequence_output).view(-1, self.num_labels)
A:transformers.models.squeezebert.modeling_squeezebert.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.squeezebert.modeling_squeezebert.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.squeezebert.modeling_squeezebert.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.squeezebert.modeling_squeezebert.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.squeezebert.modeling_squeezebert.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.squeezebert.modeling_squeezebert.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.squeezebert.modeling_squeezebert.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.squeezebert.modeling_squeezebert.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.squeezebert.modeling_squeezebert.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.squeezebert.modeling_squeezebert.end_loss->loss_fct(end_logits, end_positions)
transformers.SqueezeBertForMaskedLM(self,config)
transformers.SqueezeBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertForMaskedLM.get_output_embeddings(self)
transformers.SqueezeBertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.SqueezeBertForMultipleChoice(self,config)
transformers.SqueezeBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertForQuestionAnswering(self,config)
transformers.SqueezeBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertForSequenceClassification(self,config)
transformers.SqueezeBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertForTokenClassification(self,config)
transformers.SqueezeBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertModel(self,config)
transformers.SqueezeBertModel._prune_heads(self,heads_to_prune)
transformers.SqueezeBertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.SqueezeBertModel.get_input_embeddings(self)
transformers.SqueezeBertModel.set_input_embeddings(self,new_embeddings)
transformers.SqueezeBertModule(self,config)
transformers.SqueezeBertModule.forward(self,hidden_states,attention_mask,output_attentions)
transformers.SqueezeBertPreTrainedModel(PreTrainedModel)
transformers.SqueezeBertPreTrainedModel._init_weights(self,module)
transformers.models.squeezebert.modeling_squeezebert.ConvActivation(self,cin,cout,groups,act)
transformers.models.squeezebert.modeling_squeezebert.ConvActivation.__init__(self,cin,cout,groups,act)
transformers.models.squeezebert.modeling_squeezebert.ConvActivation.forward(self,x)
transformers.models.squeezebert.modeling_squeezebert.ConvDropoutLayerNorm(self,cin,cout,groups,dropout_prob)
transformers.models.squeezebert.modeling_squeezebert.ConvDropoutLayerNorm.__init__(self,cin,cout,groups,dropout_prob)
transformers.models.squeezebert.modeling_squeezebert.ConvDropoutLayerNorm.forward(self,hidden_states,input_tensor)
transformers.models.squeezebert.modeling_squeezebert.MatMulWrapper(self)
transformers.models.squeezebert.modeling_squeezebert.MatMulWrapper.__init__(self)
transformers.models.squeezebert.modeling_squeezebert.MatMulWrapper.forward(self,mat1,mat2)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEmbeddings(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEmbeddings.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEncoder(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEncoder.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM.get_output_embeddings(self)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMultipleChoice(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMultipleChoice.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForQuestionAnswering(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForQuestionAnswering.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForSequenceClassification(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForSequenceClassification.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForTokenClassification(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForTokenClassification.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLMPredictionHead(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLMPredictionHead.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLMPredictionHead.forward(self,hidden_states)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLayerNorm(self,hidden_size,eps=1e-12)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLayerNorm.__init__(self,hidden_size,eps=1e-12)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLayerNorm.forward(self,x)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel._prune_heads(self,heads_to_prune)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel.get_input_embeddings(self)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel.set_input_embeddings(self,new_embeddings)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModule(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModule.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModule.forward(self,hidden_states,attention_mask,output_attentions)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertOnlyMLMHead(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertOnlyMLMHead.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertOnlyMLMHead.forward(self,sequence_output)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPooler(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPooler.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPooler.forward(self,hidden_states)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPreTrainedModel(PreTrainedModel)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPreTrainedModel._init_weights(self,module)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPredictionHeadTransform(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPredictionHeadTransform.__init__(self,config)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPredictionHeadTransform.forward(self,hidden_states)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention(self,config,cin,q_groups=1,k_groups=1,v_groups=1)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention.__init__(self,config,cin,q_groups=1,k_groups=1,v_groups=1)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention.forward(self,hidden_states,attention_mask,output_attentions)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention.transpose_for_scores(self,x)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention.transpose_key_for_scores(self,x)
transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention.transpose_output(self,x)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/squeezebert/tokenization_squeezebert.py----------------------------------------
A:transformers.models.squeezebert.tokenization_squeezebert.logger->utils.logging.get_logger(__name__)
transformers.SqueezeBertTokenizer(BertTokenizer)
transformers.models.squeezebert.tokenization_squeezebert.SqueezeBertTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/squeezebert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/squeezebert/tokenization_squeezebert_fast.py----------------------------------------
A:transformers.models.squeezebert.tokenization_squeezebert_fast.logger->utils.logging.get_logger(__name__)
transformers.SqueezeBertTokenizerFast(BertTokenizerFast)
transformers.models.squeezebert.tokenization_squeezebert_fast.SqueezeBertTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/convert_mbart_original_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.mbart_config->transformers.MBartConfig.from_pretrained(hf_config_path, vocab_size=vocab_size)
A:transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.model->convert_fairseq_mbart_checkpoint_from_disk(args.fairseq_path, hf_config_path=args.hf_config)
A:transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.convert_fairseq_mbart_checkpoint_from_disk(checkpoint_path,hf_config_path='facebook/mbart-large-en-ro')


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/modeling_mbart.py----------------------------------------
transformers.MBartForConditionalGeneration(BartForConditionalGeneration)
transformers.models.mbart.modeling_mbart.MBartForConditionalGeneration(BartForConditionalGeneration)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/configuration_mbart.py----------------------------------------
A:transformers.models.mbart.configuration_mbart.logger->utils.logging.get_logger(__name__)
transformers.MBartConfig(BartConfig)
transformers.models.mbart.configuration_mbart.MBartConfig(BartConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/tokenization_mbart_fast.py----------------------------------------
A:transformers.models.mbart.tokenization_mbart_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.mbart.tokenization_mbart_fast.self.cur_lang_code->self.convert_tokens_to_ids(lang)
A:transformers.models.mbart.tokenization_mbart_fast.prefix_tokens_str->self.convert_ids_to_tokens(self.prefix_tokens)
A:transformers.models.mbart.tokenization_mbart_fast.suffix_tokens_str->self.convert_ids_to_tokens(self.suffix_tokens)
A:transformers.models.mbart.tokenization_mbart_fast.self._tokenizer.post_processor->tokenizers.processors.TemplateProcessing(single=prefix_tokens_str + ['$A'] + suffix_tokens_str, pair=prefix_tokens_str + ['$A', '$B'] + suffix_tokens_str, special_tokens=list(zip(prefix_tokens_str + suffix_tokens_str, self.prefix_tokens + self.suffix_tokens)))
transformers.MBartTokenizerFast(self,*args,tokenizer_file=None,**kwargs)
transformers.MBartTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.MBartTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.MBartTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],src_lang:str='en_XX',tgt_texts:Optional[List[str]]=None,tgt_lang:str='ro_RO',max_length:Optional[int]=None,max_target_length:Optional[int]=None,truncation:bool=True,padding:str='longest',return_tensors:str=None,**kwargs)->BatchEncoding
transformers.MBartTokenizerFast.set_src_lang_special_tokens(self,src_lang)->None
transformers.MBartTokenizerFast.set_tgt_lang_special_tokens(self,lang:str)->None
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast(self,*args,tokenizer_file=None,**kwargs)
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.__init__(self,*args,tokenizer_file=None,**kwargs)
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],src_lang:str='en_XX',tgt_texts:Optional[List[str]]=None,tgt_lang:str='ro_RO',max_length:Optional[int]=None,max_target_length:Optional[int]=None,truncation:bool=True,padding:str='longest',return_tensors:str=None,**kwargs)->BatchEncoding
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.set_src_lang_special_tokens(self,src_lang)->None
transformers.models.mbart.tokenization_mbart_fast.MBartTokenizerFast.set_tgt_lang_special_tokens(self,lang:str)->None


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/tokenization_mbart.py----------------------------------------
A:transformers.models.mbart.tokenization_mbart.logger->utils.logging.get_logger(__name__)
A:transformers.models.mbart.tokenization_mbart.self.sp_model_size->len(self.sp_model)
A:transformers.models.mbart.tokenization_mbart.self._additional_special_tokens->list(self.lang_code_to_id.keys())
transformers.MBartTokenizer(self,*args,tokenizer_file=None,**kwargs)
transformers.MBartTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.MBartTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.MBartTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],src_lang:str='en_XX',tgt_texts:Optional[List[str]]=None,tgt_lang:str='ro_RO',max_length:Optional[int]=None,max_target_length:Optional[int]=None,truncation:bool=True,padding:str='longest',return_tensors:Optional[str]=None,add_prefix_space:bool=False,**kwargs)->BatchEncoding
transformers.MBartTokenizer.set_src_lang_special_tokens(self,src_lang)->None
transformers.MBartTokenizer.set_tgt_lang_special_tokens(self,lang:str)->None
transformers.MBartTokenizer.vocab_size(self)
transformers.models.mbart.tokenization_mbart.MBartTokenizer(self,*args,tokenizer_file=None,**kwargs)
transformers.models.mbart.tokenization_mbart.MBartTokenizer.__init__(self,*args,tokenizer_file=None,**kwargs)
transformers.models.mbart.tokenization_mbart.MBartTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.mbart.tokenization_mbart.MBartTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.mbart.tokenization_mbart.MBartTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],src_lang:str='en_XX',tgt_texts:Optional[List[str]]=None,tgt_lang:str='ro_RO',max_length:Optional[int]=None,max_target_length:Optional[int]=None,truncation:bool=True,padding:str='longest',return_tensors:Optional[str]=None,add_prefix_space:bool=False,**kwargs)->BatchEncoding
transformers.models.mbart.tokenization_mbart.MBartTokenizer.set_src_lang_special_tokens(self,src_lang)->None
transformers.models.mbart.tokenization_mbart.MBartTokenizer.set_tgt_lang_special_tokens(self,lang:str)->None
transformers.models.mbart.tokenization_mbart.MBartTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/modeling_tf_mbart.py----------------------------------------
A:transformers.models.mbart.modeling_tf_mbart.START_DOCSTRING->bart.modeling_tf_bart.BART_START_DOCSTRING.replace('inherits from :class:`~transformers.TFPreTrainedModel`', 'inherits from :class:`~transformers.TFBartForConditionalGeneration`').replace('BartConfig', _CONFIG_FOR_DOC)
A:transformers.models.mbart.modeling_tf_mbart.logger->utils.logging.get_logger(__name__)
transformers.TFMBartForConditionalGeneration(TFBartForConditionalGeneration)
transformers.models.mbart.modeling_tf_mbart.TFMBartForConditionalGeneration(TFBartForConditionalGeneration)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mbart/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/configuration_xlm.py----------------------------------------
A:transformers.models.xlm.configuration_xlm.logger->utils.logging.get_logger(__name__)
transformers.XLMConfig(self,vocab_size=30145,emb_dim=2048,n_layers=12,n_heads=16,dropout=0.1,attention_dropout=0.1,gelu_activation=True,sinusoidal_embeddings=False,causal=False,asm=False,n_langs=1,use_lang_emb=True,max_position_embeddings=512,embed_init_std=2048**(-0.5),layer_norm_eps=1e-12,init_std=0.02,bos_index=0,eos_index=1,pad_index=2,unk_index=3,mask_index=5,is_encoder=True,summary_type='first',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,start_n_top=5,end_n_top=5,mask_token_id=0,lang_id=0,pad_token_id=2,bos_token_id=0,**kwargs)
transformers.XLMConfig.hidden_size(self)
transformers.XLMConfig.n_words(self)
transformers.XLMConfig.n_words(self,value)
transformers.XLMConfig.num_attention_heads(self)
transformers.XLMConfig.num_hidden_layers(self)
transformers.models.xlm.configuration_xlm.XLMConfig(self,vocab_size=30145,emb_dim=2048,n_layers=12,n_heads=16,dropout=0.1,attention_dropout=0.1,gelu_activation=True,sinusoidal_embeddings=False,causal=False,asm=False,n_langs=1,use_lang_emb=True,max_position_embeddings=512,embed_init_std=2048**(-0.5),layer_norm_eps=1e-12,init_std=0.02,bos_index=0,eos_index=1,pad_index=2,unk_index=3,mask_index=5,is_encoder=True,summary_type='first',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,start_n_top=5,end_n_top=5,mask_token_id=0,lang_id=0,pad_token_id=2,bos_token_id=0,**kwargs)
transformers.models.xlm.configuration_xlm.XLMConfig.__init__(self,vocab_size=30145,emb_dim=2048,n_layers=12,n_heads=16,dropout=0.1,attention_dropout=0.1,gelu_activation=True,sinusoidal_embeddings=False,causal=False,asm=False,n_langs=1,use_lang_emb=True,max_position_embeddings=512,embed_init_std=2048**(-0.5),layer_norm_eps=1e-12,init_std=0.02,bos_index=0,eos_index=1,pad_index=2,unk_index=3,mask_index=5,is_encoder=True,summary_type='first',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,start_n_top=5,end_n_top=5,mask_token_id=0,lang_id=0,pad_token_id=2,bos_token_id=0,**kwargs)
transformers.models.xlm.configuration_xlm.XLMConfig.hidden_size(self)
transformers.models.xlm.configuration_xlm.XLMConfig.n_words(self)
transformers.models.xlm.configuration_xlm.XLMConfig.n_words(self,value)
transformers.models.xlm.configuration_xlm.XLMConfig.num_attention_heads(self)
transformers.models.xlm.configuration_xlm.XLMConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/modeling_tf_xlm.py----------------------------------------
A:transformers.models.xlm.modeling_tf_xlm.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm.modeling_tf_xlm.position_enc->numpy.array([[pos / np.power(10000, 2 * (j // 2) / dim) for j in range(dim)] for pos in range(n_pos)])
A:transformers.models.xlm.modeling_tf_xlm.out[:, 0::2]->tensorflow.constant(np.sin(position_enc[:, 0::2]))
A:transformers.models.xlm.modeling_tf_xlm.out[:, 1::2]->tensorflow.constant(np.cos(position_enc[:, 1::2]))
A:transformers.models.xlm.modeling_tf_xlm.alen->tensorflow.range(slen)
A:transformers.models.xlm.modeling_tf_xlm.mask->tensorflow.cast(mask, dtype=scores.dtype)
A:transformers.models.xlm.modeling_tf_xlm.attn_mask->tensorflow.cast(attn_mask, dtype=dtype)
A:transformers.models.xlm.modeling_tf_xlm.NEW_ID->itertools.count()
A:transformers.models.xlm.modeling_tf_xlm.self.layer_id->next(TFXLMMultiHeadAttention.NEW_ID)
A:transformers.models.xlm.modeling_tf_xlm.self.q_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='q_lin')
A:transformers.models.xlm.modeling_tf_xlm.self.k_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='k_lin')
A:transformers.models.xlm.modeling_tf_xlm.self.v_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='v_lin')
A:transformers.models.xlm.modeling_tf_xlm.self.out_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='out_lin')
A:transformers.models.xlm.modeling_tf_xlm.self.dropout->tensorflow.keras.layers.Dropout(config.dropout)
A:transformers.models.xlm.modeling_tf_xlm.self.pruned_heads->set()
A:transformers.models.xlm.modeling_tf_xlm.(bs, qlen, dim)->shape_list(input)
A:transformers.models.xlm.modeling_tf_xlm.dim_per_head->tensorflow.cast(dim_per_head, dtype=tf.int32)
A:transformers.models.xlm.modeling_tf_xlm.q->tensorflow.multiply(q, tf.math.rsqrt(tf.cast(dim_per_head, dtype=tf.float32)))
A:transformers.models.xlm.modeling_tf_xlm.k->tensorflow.cast(k, dtype=q.dtype)
A:transformers.models.xlm.modeling_tf_xlm.v->tensorflow.concat([v_, v], axis=2)
A:transformers.models.xlm.modeling_tf_xlm.scores->tensorflow.matmul(q, k, transpose_b=True)
A:transformers.models.xlm.modeling_tf_xlm.weights->self.dropout(weights, training=training)
A:transformers.models.xlm.modeling_tf_xlm.context->unshape(context)
A:transformers.models.xlm.modeling_tf_xlm.self.lin1->tensorflow.keras.layers.Dense(dim_hidden, kernel_initializer=get_initializer(config.init_std), name='lin1')
A:transformers.models.xlm.modeling_tf_xlm.self.lin2->tensorflow.keras.layers.Dense(out_dim, kernel_initializer=get_initializer(config.init_std), name='lin2')
A:transformers.models.xlm.modeling_tf_xlm.x->self.dropout(x, training=training)
A:transformers.models.xlm.modeling_tf_xlm.self.attention_dropout->tensorflow.keras.layers.Dropout(config.attention_dropout)
A:transformers.models.xlm.modeling_tf_xlm.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, self.dim, embeddings_initializer=get_initializer(config.embed_init_std), name='position_embeddings')
A:transformers.models.xlm.modeling_tf_xlm.self.lang_embeddings->tensorflow.keras.layers.Embedding(self.n_langs, self.dim, embeddings_initializer=get_initializer(config.embed_init_std), name='lang_embeddings')
A:transformers.models.xlm.modeling_tf_xlm.self.embeddings->TFSharedEmbeddings(self.n_words, self.dim, initializer_range=config.embed_init_std, name='embeddings')
A:transformers.models.xlm.modeling_tf_xlm.self.layer_norm_emb->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm_emb')
A:transformers.models.xlm.modeling_tf_xlm.pruned_heads->config.pruned_heads.copy().items()
A:transformers.models.xlm.modeling_tf_xlm.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, langs=langs, token_type_ids=token_type_ids, position_ids=position_ids, lengths=lengths, cache=cache, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.xlm.modeling_tf_xlm.(bs, slen)->shape_list(inputs['input_ids'])
A:transformers.models.xlm.modeling_tf_xlm.inputs['lengths']->tensorflow.convert_to_tensor([slen] * bs, tf.int32)
A:transformers.models.xlm.modeling_tf_xlm.(mask, attn_mask)->get_masks(slen, inputs['lengths'], self.causal, padding_mask=inputs['attention_mask'])
A:transformers.models.xlm.modeling_tf_xlm.inputs['position_ids']->tensorflow.expand_dims(tf.range(slen), axis=0)
A:transformers.models.xlm.modeling_tf_xlm.inputs['inputs_embeds']->self.embeddings(inputs['input_ids'])
A:transformers.models.xlm.modeling_tf_xlm.tensor->self.layer_norm2[i](tensor)
A:transformers.models.xlm.modeling_tf_xlm.attn_outputs->self.attentions[i](tensor, attn_mask, None, inputs['cache'], inputs['head_mask'][i], inputs['output_attentions'], training=inputs['training'])
A:transformers.models.xlm.modeling_tf_xlm.attn->self.dropout(attn, training=inputs['training'])
A:transformers.models.xlm.modeling_tf_xlm.inputs_list->tensorflow.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])
A:transformers.models.xlm.modeling_tf_xlm.attns_list->tensorflow.constant([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.xlm.modeling_tf_xlm.langs_list->tensorflow.constant([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.xlm.modeling_tf_xlm.self.transformer->TFXLMMainLayer(config, name='transformer')
A:transformers.models.xlm.modeling_tf_xlm.outputs->self.pred_layer(output)
A:transformers.models.xlm.modeling_tf_xlm.self.bias->self.add_weight(shape=(self.n_words,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.xlm.modeling_tf_xlm.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.xlm.modeling_tf_xlm.self.pred_layer->TFXLMPredLayer(config, self.transformer.embeddings, name='pred_layer_._proj')
A:transformers.models.xlm.modeling_tf_xlm.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], langs=inputs['langs'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], lengths=inputs['lengths'], cache=inputs['cache'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.xlm.modeling_tf_xlm.self.sequence_summary->TFSequenceSummary(config, initializer_range=config.init_std, name='sequence_summary')
A:transformers.models.xlm.modeling_tf_xlm.logits->self.qa_outputs(sequence_output)
A:transformers.models.xlm.modeling_tf_xlm.self.logits_proj->tensorflow.keras.layers.Dense(1, kernel_initializer=get_initializer(config.initializer_range), name='logits_proj')
A:transformers.models.xlm.modeling_tf_xlm.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.xlm.modeling_tf_xlm.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.init_std), name='classifier')
A:transformers.models.xlm.modeling_tf_xlm.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.xlm.modeling_tf_xlm.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.init_std), name='qa_outputs')
A:transformers.models.xlm.modeling_tf_xlm.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.xlm.modeling_tf_xlm.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.xlm.modeling_tf_xlm.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.xlm.modeling_tf_xlm.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFXLMForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFXLMForMultipleChoice.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLMForMultipleChoice.dummy_inputs(self)
transformers.TFXLMForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.TFXLMForQuestionAnsweringSimple.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFXLMForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFXLMForSequenceClassification.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLMForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFXLMForTokenClassification.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLMMainLayer(self,config,**kwargs)
transformers.TFXLMMainLayer._prune_heads(self,heads_to_prune)
transformers.TFXLMMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFXLMMainLayer.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFXLMMainLayer.get_input_embeddings(self)
transformers.TFXLMMainLayer.set_input_embeddings(self,value)
transformers.TFXLMModel(self,config,*inputs,**kwargs)
transformers.TFXLMModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFXLMPreTrainedModel(TFPreTrainedModel)
transformers.TFXLMPreTrainedModel.dummy_inputs(self)
transformers.TFXLMWithLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFXLMWithLMHeadModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFXLMWithLMHeadModel.get_output_embeddings(self)
transformers.TFXLMWithLMHeadModel.get_output_layer_with_bias(self)
transformers.TFXLMWithLMHeadModel.get_prefix_bias_name(self)
transformers.TFXLMWithLMHeadModel.prepare_inputs_for_generation(self,inputs,**kwargs)
transformers.TFXLMWithLMHeadModelOutput(ModelOutput)
transformers.models.xlm.modeling_tf_xlm.TFXLMForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForMultipleChoice.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForMultipleChoice.dummy_inputs(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForSequenceClassification.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMForTokenClassification.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer(self,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer.__init__(self,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer._prune_heads(self,heads_to_prune)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer.get_input_embeddings(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer.set_input_embeddings(self,value)
transformers.models.xlm.modeling_tf_xlm.TFXLMModel(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMModel.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention(self,n_heads,dim,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention.__init__(self,n_heads,dim,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention.call(self,input,mask,kv,cache,head_mask,output_attentions,training=False)
transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention.prune_heads(self,heads)
transformers.models.xlm.modeling_tf_xlm.TFXLMPreTrainedModel(TFPreTrainedModel)
transformers.models.xlm.modeling_tf_xlm.TFXLMPreTrainedModel.dummy_inputs(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer(self,config,input_embeddings,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer.__init__(self,config,input_embeddings,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer.build(self,input_shape)
transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer.call(self,hidden_states)
transformers.models.xlm.modeling_tf_xlm.TFXLMTransformerFFN(self,in_dim,dim_hidden,out_dim,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMTransformerFFN.__init__(self,in_dim,dim_hidden,out_dim,config,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMTransformerFFN.call(self,input,training=False)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.get_output_embeddings(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.get_output_layer_with_bias(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.get_prefix_bias_name(self)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModel.prepare_inputs_for_generation(self,inputs,**kwargs)
transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModelOutput(ModelOutput)
transformers.models.xlm.modeling_tf_xlm.create_sinusoidal_embeddings(n_pos,dim,out)
transformers.models.xlm.modeling_tf_xlm.get_masks(slen,lengths,causal,padding_mask=None,dtype=tf.float32)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/tokenization_xlm.py----------------------------------------
A:transformers.models.xlm.tokenization_xlm.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm.tokenization_xlm.pairs->get_pairs(word)
A:transformers.models.xlm.tokenization_xlm.text->lowercase_and_remove_accent(text)
A:transformers.models.xlm.tokenization_xlm.cat->unicodedata.category(char)
A:transformers.models.xlm.tokenization_xlm.self.cache_moses_punct_normalizer->dict()
A:transformers.models.xlm.tokenization_xlm.self.cache_moses_tokenizer->dict()
A:transformers.models.xlm.tokenization_xlm.self.lang_with_custom_tokenizer->set(['zh', 'th', 'ja'])
A:transformers.models.xlm.tokenization_xlm.self.encoder->json.load(vocab_handle)
A:transformers.models.xlm.tokenization_xlm.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.xlm.tokenization_xlm.punct_normalizer->sacremoses.MosesPunctNormalizer(lang=lang)
A:transformers.models.xlm.tokenization_xlm.moses_tokenizer->sacremoses.MosesTokenizer(lang=lang)
A:transformers.models.xlm.tokenization_xlm.self.ja_word_tokenizer->Mykytea.Mykytea('-model %s/local/share/kytea/model.bin' % os.path.expanduser('~'))
A:transformers.models.xlm.tokenization_xlm.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.xlm.tokenization_xlm.j->' '.join(word).index(first, i)
A:transformers.models.xlm.tokenization_xlm.new_word->tuple(new_word)
A:transformers.models.xlm.tokenization_xlm.word->' '.join(word)
A:transformers.models.xlm.tokenization_xlm.out_string->''.join(tokens).replace('</w>', ' ').strip()
A:transformers.models.xlm.tokenization_xlm.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.xlm.tokenization_xlm.merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
transformers.XLMTokenizer(self,vocab_file,merges_file,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',cls_token='</s>',mask_token='<special1>',additional_special_tokens=['<special0>','<special1>','<special2>','<special3>','<special4>','<special5>','<special6>','<special7>','<special8>','<special9>'],lang2id=None,id2lang=None,do_lowercase_and_remove_accent=True,**kwargs)
transformers.XLMTokenizer._convert_id_to_token(self,index)
transformers.XLMTokenizer._convert_token_to_id(self,token)
transformers.XLMTokenizer._tokenize(self,text,lang='en',bypass_tokenizer=False)
transformers.XLMTokenizer.bpe(self,token)
transformers.XLMTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMTokenizer.convert_tokens_to_string(self,tokens)
transformers.XLMTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMTokenizer.do_lower_case(self)
transformers.XLMTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLMTokenizer.get_vocab(self)
transformers.XLMTokenizer.ja_tokenize(self,text)
transformers.XLMTokenizer.moses_pipeline(self,text,lang)
transformers.XLMTokenizer.moses_punct_norm(self,text,lang)
transformers.XLMTokenizer.moses_tokenize(self,text,lang)
transformers.XLMTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.XLMTokenizer.vocab_size(self)
transformers.models.xlm.tokenization_xlm.XLMTokenizer(self,vocab_file,merges_file,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',cls_token='</s>',mask_token='<special1>',additional_special_tokens=['<special0>','<special1>','<special2>','<special3>','<special4>','<special5>','<special6>','<special7>','<special8>','<special9>'],lang2id=None,id2lang=None,do_lowercase_and_remove_accent=True,**kwargs)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.__init__(self,vocab_file,merges_file,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',cls_token='</s>',mask_token='<special1>',additional_special_tokens=['<special0>','<special1>','<special2>','<special3>','<special4>','<special5>','<special6>','<special7>','<special8>','<special9>'],lang2id=None,id2lang=None,do_lowercase_and_remove_accent=True,**kwargs)
transformers.models.xlm.tokenization_xlm.XLMTokenizer._convert_id_to_token(self,index)
transformers.models.xlm.tokenization_xlm.XLMTokenizer._convert_token_to_id(self,token)
transformers.models.xlm.tokenization_xlm.XLMTokenizer._tokenize(self,text,lang='en',bypass_tokenizer=False)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.bpe(self,token)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm.tokenization_xlm.XLMTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm.tokenization_xlm.XLMTokenizer.do_lower_case(self)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlm.tokenization_xlm.XLMTokenizer.get_vocab(self)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.ja_tokenize(self,text)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.moses_pipeline(self,text,lang)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.moses_punct_norm(self,text,lang)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.moses_tokenize(self,text,lang)
transformers.models.xlm.tokenization_xlm.XLMTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlm.tokenization_xlm.XLMTokenizer.vocab_size(self)
transformers.models.xlm.tokenization_xlm.get_pairs(word)
transformers.models.xlm.tokenization_xlm.lowercase_and_remove_accent(text)
transformers.models.xlm.tokenization_xlm.remove_non_printing_char(text)
transformers.models.xlm.tokenization_xlm.replace_unicode_punct(text)
transformers.models.xlm.tokenization_xlm.romanian_preprocessing(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/convert_xlm_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.chkpt->torch.load(xlm_checkpoint_path, map_location='cpu')
A:transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.config->dict(((n, v) for (n, v) in config.items() if not isinstance(v, (torch.FloatTensor, numpy.ndarray))))
A:transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.vocab->dict(((s + '</w>' if s.find('@@') == -1 and i > 13 else s.replace('@@', ''), i) for (s, i) in vocab.items()))
A:transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch(xlm_checkpoint_path,pytorch_dump_folder_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/modeling_xlm.py----------------------------------------
A:transformers.models.xlm.modeling_xlm.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm.modeling_xlm.position_enc->numpy.array([[pos / np.power(10000, 2 * (j // 2) / dim) for j in range(dim)] for pos in range(n_pos)])
A:transformers.models.xlm.modeling_xlm.out[:, 0::2]->torch.FloatTensor(np.sin(position_enc[:, 0::2]))
A:transformers.models.xlm.modeling_xlm.out[:, 1::2]->torch.FloatTensor(np.cos(position_enc[:, 1::2]))
A:transformers.models.xlm.modeling_xlm.alen->torch.arange(slen, dtype=torch.long, device=lengths.device)
A:transformers.models.xlm.modeling_xlm.bs->torch.tensor([slen] * bs, device=device).size(0)
A:transformers.models.xlm.modeling_xlm.NEW_ID->itertools.count()
A:transformers.models.xlm.modeling_xlm.self.layer_id->next(MultiHeadAttention.NEW_ID)
A:transformers.models.xlm.modeling_xlm.self.q_lin->prune_linear_layer(self.q_lin, index)
A:transformers.models.xlm.modeling_xlm.self.k_lin->prune_linear_layer(self.k_lin, index)
A:transformers.models.xlm.modeling_xlm.self.v_lin->prune_linear_layer(self.v_lin, index)
A:transformers.models.xlm.modeling_xlm.self.out_lin->prune_linear_layer(self.out_lin, index, dim=1)
A:transformers.models.xlm.modeling_xlm.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.xlm.modeling_xlm.(heads, index)->find_pruneable_heads_and_indices(heads, self.n_heads, attention_head_size, self.pruned_heads)
A:transformers.models.xlm.modeling_xlm.(bs, qlen, dim)->input.size()
A:transformers.models.xlm.modeling_xlm.klen->kv.size(1)
A:transformers.models.xlm.modeling_xlm.q->shape(self.q_lin(input))
A:transformers.models.xlm.modeling_xlm.k->torch.cat([k_, k], dim=2)
A:transformers.models.xlm.modeling_xlm.v->torch.cat([v_, v], dim=2)
A:transformers.models.xlm.modeling_xlm.scores->self.proj.log_prob(x)
A:transformers.models.xlm.modeling_xlm.mask->(mask == 0).view(mask_reshape).expand_as(scores)
A:transformers.models.xlm.modeling_xlm.weights->torch.nn.functional.dropout(weights, p=self.dropout, training=self.training)
A:transformers.models.xlm.modeling_xlm.context->unshape(context)
A:transformers.models.xlm.modeling_xlm.self.lin1->torch.nn.Linear(in_dim, dim_hidden)
A:transformers.models.xlm.modeling_xlm.self.lin2->torch.nn.Linear(dim_hidden, out_dim)
A:transformers.models.xlm.modeling_xlm.x->torch.nn.functional.dropout(x, p=self.dropout, training=self.training)
A:transformers.models.xlm.modeling_xlm.inputs_list->torch.tensor([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])
A:transformers.models.xlm.modeling_xlm.attns_list->torch.tensor([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.xlm.modeling_xlm.langs_list->torch.tensor([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.xlm.modeling_xlm.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, self.dim)
A:transformers.models.xlm.modeling_xlm.self.lang_embeddings->torch.nn.Embedding(self.n_langs, self.dim)
A:transformers.models.xlm.modeling_xlm.self.embeddings->torch.nn.Embedding(self.n_words, self.dim, padding_idx=self.pad_index)
A:transformers.models.xlm.modeling_xlm.self.layer_norm_emb->torch.nn.LayerNorm(self.dim, eps=config.layer_norm_eps)
A:transformers.models.xlm.modeling_xlm.self.attentions->torch.nn.ModuleList()
A:transformers.models.xlm.modeling_xlm.self.layer_norm1->torch.nn.ModuleList()
A:transformers.models.xlm.modeling_xlm.self.ffns->torch.nn.ModuleList()
A:transformers.models.xlm.modeling_xlm.self.layer_norm2->torch.nn.ModuleList()
A:transformers.models.xlm.modeling_xlm.pruned_heads->config.pruned_heads.copy().items()
A:transformers.models.xlm.modeling_xlm.(bs, slen)->torch.cat([input_ids, mask_token], dim=1).size()
A:transformers.models.xlm.modeling_xlm.lengths->torch.tensor([slen] * bs, device=device)
A:transformers.models.xlm.modeling_xlm.(mask, attn_mask)->get_masks(slen, lengths, self.causal, padding_mask=attention_mask)
A:transformers.models.xlm.modeling_xlm.head_mask->self.get_head_mask(head_mask, self.config.n_layers)
A:transformers.models.xlm.modeling_xlm.inputs_embeds->self.embeddings(input_ids)
A:transformers.models.xlm.modeling_xlm.tensor->self.layer_norm2[i](tensor)
A:transformers.models.xlm.modeling_xlm.attn_outputs->self.attentions[i](tensor, attn_mask, cache=cache, head_mask=head_mask[i], output_attentions=output_attentions)
A:transformers.models.xlm.modeling_xlm.attn->torch.nn.functional.dropout(attn, p=self.dropout, training=self.training)
A:transformers.models.xlm.modeling_xlm.self.proj->torch.nn.AdaptiveLogSoftmaxWithLoss(in_features=dim, n_classes=config.n_words, cutoffs=config.asm_cutoffs, div_value=config.asm_div_value, head_bias=True)
A:transformers.models.xlm.modeling_xlm.loss->loss_fct(reshaped_logits, labels)
A:transformers.models.xlm.modeling_xlm.(_, loss)->self.proj(x, y)
A:transformers.models.xlm.modeling_xlm.self.transformer->XLMModel(config)
A:transformers.models.xlm.modeling_xlm.self.pred_layer->XLMPredLayer(config)
A:transformers.models.xlm.modeling_xlm.mask_token->torch.full((effective_batch_size, 1), mask_token_id, dtype=torch.long, device=input_ids.device)
A:transformers.models.xlm.modeling_xlm.input_ids->torch.cat([input_ids, mask_token], dim=1)
A:transformers.models.xlm.modeling_xlm.langs->torch.full_like(input_ids, lang_id)
A:transformers.models.xlm.modeling_xlm.transformer_outputs->self.transformer(input_ids=input_ids, attention_mask=attention_mask, langs=langs, token_type_ids=token_type_ids, position_ids=position_ids, lengths=lengths, cache=cache, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.xlm.modeling_xlm.outputs->self.transformer(input_ids, attention_mask=attention_mask, langs=langs, token_type_ids=token_type_ids, position_ids=position_ids, lengths=lengths, cache=cache, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.xlm.modeling_xlm.self.sequence_summary->SequenceSummary(config)
A:transformers.models.xlm.modeling_xlm.logits->self.logits_proj(logits)
A:transformers.models.xlm.modeling_xlm.loss_fct->CrossEntropyLoss()
A:transformers.models.xlm.modeling_xlm.self.qa_outputs->SQuADHead(config)
A:transformers.models.xlm.modeling_xlm.(start_logits, end_logits)->self.logits_proj(logits).split(1, dim=-1)
A:transformers.models.xlm.modeling_xlm.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.xlm.modeling_xlm.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.xlm.modeling_xlm.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.xlm.modeling_xlm.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.xlm.modeling_xlm.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.xlm.modeling_xlm.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.xlm.modeling_xlm.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.xlm.modeling_xlm.self.dropout->torch.nn.Dropout(config.dropout)
A:transformers.models.xlm.modeling_xlm.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.xlm.modeling_xlm.sequence_output->self.dropout(sequence_output)
A:transformers.models.xlm.modeling_xlm.active_logits->self.logits_proj(logits).view(-1, self.num_labels)
A:transformers.models.xlm.modeling_xlm.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.xlm.modeling_xlm.self.logits_proj->torch.nn.Linear(config.num_labels, 1)
A:transformers.models.xlm.modeling_xlm.reshaped_logits->self.logits_proj(logits).view(-1, num_choices)
transformers.XLMForMultipleChoice(self,config,*inputs,**kwargs)
transformers.XLMForMultipleChoice.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMForQuestionAnswering(self,config)
transformers.XLMForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,is_impossible=None,cls_index=None,p_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMForQuestionAnsweringOutput(ModelOutput)
transformers.XLMForQuestionAnsweringSimple(self,config)
transformers.XLMForQuestionAnsweringSimple.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMForSequenceClassification(self,config)
transformers.XLMForSequenceClassification.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMForTokenClassification(self,config)
transformers.XLMForTokenClassification.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMModel(self,config)
transformers.XLMModel._prune_heads(self,heads_to_prune)
transformers.XLMModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMModel.get_input_embeddings(self)
transformers.XLMModel.set_input_embeddings(self,new_embeddings)
transformers.XLMPreTrainedModel(self,*inputs,**kwargs)
transformers.XLMPreTrainedModel._init_weights(self,module)
transformers.XLMPreTrainedModel.dummy_inputs(self)
transformers.XLMWithLMHeadModel(self,config)
transformers.XLMWithLMHeadModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.XLMWithLMHeadModel.get_output_embeddings(self)
transformers.XLMWithLMHeadModel.prepare_inputs_for_generation(self,input_ids,**kwargs)
transformers.XLMWithLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.xlm.modeling_xlm.MultiHeadAttention(self,n_heads,dim,config)
transformers.models.xlm.modeling_xlm.MultiHeadAttention.__init__(self,n_heads,dim,config)
transformers.models.xlm.modeling_xlm.MultiHeadAttention.forward(self,input,mask,kv=None,cache=None,head_mask=None,output_attentions=False)
transformers.models.xlm.modeling_xlm.MultiHeadAttention.prune_heads(self,heads)
transformers.models.xlm.modeling_xlm.TransformerFFN(self,in_dim,dim_hidden,out_dim,config)
transformers.models.xlm.modeling_xlm.TransformerFFN.__init__(self,in_dim,dim_hidden,out_dim,config)
transformers.models.xlm.modeling_xlm.TransformerFFN.ff_chunk(self,input)
transformers.models.xlm.modeling_xlm.TransformerFFN.forward(self,input)
transformers.models.xlm.modeling_xlm.XLMForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_xlm.XLMForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.xlm.modeling_xlm.XLMForMultipleChoice.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnswering(self,config)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnswering.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,is_impossible=None,cls_index=None,p_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringOutput(ModelOutput)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringSimple(self,config)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringSimple.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringSimple.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMForSequenceClassification(self,config)
transformers.models.xlm.modeling_xlm.XLMForSequenceClassification.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMForSequenceClassification.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMForTokenClassification(self,config)
transformers.models.xlm.modeling_xlm.XLMForTokenClassification.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMForTokenClassification.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMModel(self,config)
transformers.models.xlm.modeling_xlm.XLMModel.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMModel._prune_heads(self,heads_to_prune)
transformers.models.xlm.modeling_xlm.XLMModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMModel.get_input_embeddings(self)
transformers.models.xlm.modeling_xlm.XLMModel.set_input_embeddings(self,new_embeddings)
transformers.models.xlm.modeling_xlm.XLMPreTrainedModel(self,*inputs,**kwargs)
transformers.models.xlm.modeling_xlm.XLMPreTrainedModel.__init__(self,*inputs,**kwargs)
transformers.models.xlm.modeling_xlm.XLMPreTrainedModel._init_weights(self,module)
transformers.models.xlm.modeling_xlm.XLMPreTrainedModel.dummy_inputs(self)
transformers.models.xlm.modeling_xlm.XLMPredLayer(self,config)
transformers.models.xlm.modeling_xlm.XLMPredLayer.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMPredLayer.forward(self,x,y=None)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel(self,config)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel.__init__(self,config)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel.get_output_embeddings(self)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel.prepare_inputs_for_generation(self,input_ids,**kwargs)
transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.xlm.modeling_xlm.create_sinusoidal_embeddings(n_pos,dim,out)
transformers.models.xlm.modeling_xlm.get_masks(slen,lengths,causal,padding_mask=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/retribert/modeling_retribert.py----------------------------------------
A:transformers.models.retribert.modeling_retribert.logger->utils.logging.get_logger(__name__)
A:transformers.models.retribert.modeling_retribert.self.bert_query->BertModel(config)
A:transformers.models.retribert.modeling_retribert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.retribert.modeling_retribert.self.project_query->torch.nn.Linear(config.hidden_size, config.projection_dim, bias=False)
A:transformers.models.retribert.modeling_retribert.self.project_doc->torch.nn.Linear(config.hidden_size, config.projection_dim, bias=False)
A:transformers.models.retribert.modeling_retribert.self.ce_loss->torch.nn.CrossEntropyLoss(reduction='mean')
A:transformers.models.retribert.modeling_retribert.input_shape->input_ids.size()
A:transformers.models.retribert.modeling_retribert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.retribert.modeling_retribert.encoder_outputs->sent_encoder.encoder(inputs[0], attention_mask=inputs[1], head_mask=head_mask)
A:transformers.models.retribert.modeling_retribert.pooled_output->torch.utils.checkpoint.checkpoint(partial_encode, b_embedding_output, b_attention_mask)
A:transformers.models.retribert.modeling_retribert.embedding_output->sent_encoder.embeddings(input_ids=input_ids, position_ids=None, token_type_ids=token_type_ids, inputs_embeds=None)
A:transformers.models.retribert.modeling_retribert.q_reps->self.embed_questions(input_ids_query, attention_mask_query, checkpoint_batch_size)
A:transformers.models.retribert.modeling_retribert.a_reps->self.embed_answers(input_ids_doc, attention_mask_doc, checkpoint_batch_size)
A:transformers.models.retribert.modeling_retribert.compare_scores->torch.mm(q_reps, a_reps.t())
A:transformers.models.retribert.modeling_retribert.loss_qa->self.ce_loss(compare_scores, torch.arange(compare_scores.shape[1]).to(device))
A:transformers.models.retribert.modeling_retribert.loss_aq->self.ce_loss(compare_scores.t(), torch.arange(compare_scores.shape[0]).to(device))
transformers.RetriBertModel(self,config)
transformers.RetriBertModel.embed_answers(self,input_ids,attention_mask=None,checkpoint_batch_size=-1)
transformers.RetriBertModel.embed_questions(self,input_ids,attention_mask=None,checkpoint_batch_size=-1)
transformers.RetriBertModel.embed_sentences_checkpointed(self,input_ids,attention_mask,sent_encoder,checkpoint_batch_size=-1)
transformers.RetriBertModel.forward(self,input_ids_query,attention_mask_query,input_ids_doc,attention_mask_doc,checkpoint_batch_size=-1)
transformers.RetriBertPreTrainedModel(PreTrainedModel)
transformers.RetriBertPreTrainedModel._init_weights(self,module)
transformers.models.retribert.modeling_retribert.RetriBertModel(self,config)
transformers.models.retribert.modeling_retribert.RetriBertModel.__init__(self,config)
transformers.models.retribert.modeling_retribert.RetriBertModel.embed_answers(self,input_ids,attention_mask=None,checkpoint_batch_size=-1)
transformers.models.retribert.modeling_retribert.RetriBertModel.embed_questions(self,input_ids,attention_mask=None,checkpoint_batch_size=-1)
transformers.models.retribert.modeling_retribert.RetriBertModel.embed_sentences_checkpointed(self,input_ids,attention_mask,sent_encoder,checkpoint_batch_size=-1)
transformers.models.retribert.modeling_retribert.RetriBertModel.forward(self,input_ids_query,attention_mask_query,input_ids_doc,attention_mask_doc,checkpoint_batch_size=-1)
transformers.models.retribert.modeling_retribert.RetriBertPreTrainedModel(PreTrainedModel)
transformers.models.retribert.modeling_retribert.RetriBertPreTrainedModel._init_weights(self,module)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/retribert/tokenization_retribert.py----------------------------------------
A:transformers.models.retribert.tokenization_retribert.logger->utils.logging.get_logger(__name__)
transformers.RetriBertTokenizer(BertTokenizer)
transformers.models.retribert.tokenization_retribert.RetriBertTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/retribert/configuration_retribert.py----------------------------------------
A:transformers.models.retribert.configuration_retribert.logger->utils.logging.get_logger(__name__)
transformers.RetriBertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=8,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,share_encoders=True,projection_dim=128,pad_token_id=0,**kwargs)
transformers.models.retribert.configuration_retribert.RetriBertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=8,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,share_encoders=True,projection_dim=128,pad_token_id=0,**kwargs)
transformers.models.retribert.configuration_retribert.RetriBertConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=8,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,share_encoders=True,projection_dim=128,pad_token_id=0,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/retribert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/retribert/tokenization_retribert_fast.py----------------------------------------
A:transformers.models.retribert.tokenization_retribert_fast.logger->utils.logging.get_logger(__name__)
transformers.RetriBertTokenizerFast(BertTokenizerFast)
transformers.models.retribert.tokenization_retribert_fast.RetriBertTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/tokenization_dpr.py----------------------------------------
A:transformers.models.dpr.tokenization_dpr.logger->utils.logging.get_logger(__name__)
A:transformers.models.dpr.tokenization_dpr.DPRSpanPrediction->collections.namedtuple('DPRSpanPrediction', ['span_score', 'relevance_score', 'doc_id', 'start_index', 'end_index', 'text'])
A:transformers.models.dpr.tokenization_dpr.DPRReaderOutput->collections.namedtuple('DPRReaderOutput', ['start_logits', 'end_logits', 'relevance_logits'])
A:transformers.models.dpr.tokenization_dpr.n_passages->len(relevance_logits)
A:transformers.models.dpr.tokenization_dpr.sorted_docs->sorted(range(n_passages), reverse=True, key=relevance_logits.__getitem__)
A:transformers.models.dpr.tokenization_dpr.sequence_ids->list(input_ids[doc_id])
A:transformers.models.dpr.tokenization_dpr.sequence_len->len(sequence_ids)
A:transformers.models.dpr.tokenization_dpr.best_spans->self._get_best_spans(start_logits=start_logits[doc_id][passage_offset:sequence_len], end_logits=end_logits[doc_id][passage_offset:sequence_len], max_answer_length=max_answer_length, top_spans=num_spans_per_passage)
A:transformers.models.dpr.tokenization_dpr.scores->sorted(scores, key=lambda x: x[1], reverse=True)
transformers.DPRContextEncoderTokenizer(BertTokenizer)
transformers.DPRQuestionEncoderTokenizer(BertTokenizer)
transformers.DPRReaderTokenizer(CustomDPRReaderTokenizerMixin,BertTokenizer)
transformers.models.dpr.tokenization_dpr.CustomDPRReaderTokenizerMixin(self,questions,titles:Optional[str]=None,texts:Optional[str]=None,padding:Union[bool,str]=False,truncation:Union[bool,str]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_attention_mask:Optional[bool]=None,**kwargs)
transformers.models.dpr.tokenization_dpr.CustomDPRReaderTokenizerMixin.__call__(self,questions,titles:Optional[str]=None,texts:Optional[str]=None,padding:Union[bool,str]=False,truncation:Union[bool,str]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_attention_mask:Optional[bool]=None,**kwargs)
transformers.models.dpr.tokenization_dpr.CustomDPRReaderTokenizerMixin._get_best_spans(self,start_logits:List[int],end_logits:List[int],max_answer_length:int,top_spans:int)->List[DPRSpanPrediction]
transformers.models.dpr.tokenization_dpr.CustomDPRReaderTokenizerMixin.decode_best_spans(self,reader_input:BatchEncoding,reader_output:DPRReaderOutput,num_spans:int=16,max_answer_length:int=64,num_spans_per_passage:int=4)->List[DPRSpanPrediction]
transformers.models.dpr.tokenization_dpr.DPRContextEncoderTokenizer(BertTokenizer)
transformers.models.dpr.tokenization_dpr.DPRQuestionEncoderTokenizer(BertTokenizer)
transformers.models.dpr.tokenization_dpr.DPRReaderTokenizer(CustomDPRReaderTokenizerMixin,BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/modeling_dpr.py----------------------------------------
A:transformers.models.dpr.modeling_dpr.logger->utils.logging.get_logger(__name__)
A:transformers.models.dpr.modeling_dpr.self.bert_model->BertModel(config)
A:transformers.models.dpr.modeling_dpr.self.encode_proj->torch.nn.Linear(self.bert_model.config.hidden_size, config.projection_dim)
A:transformers.models.dpr.modeling_dpr.outputs->self.question_encoder(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.dpr.modeling_dpr.pooled_output->self.encode_proj(pooled_output)
A:transformers.models.dpr.modeling_dpr.self.encoder->DPREncoder(config)
A:transformers.models.dpr.modeling_dpr.self.qa_outputs->torch.nn.Linear(self.encoder.embeddings_size, 2)
A:transformers.models.dpr.modeling_dpr.self.qa_classifier->torch.nn.Linear(self.encoder.embeddings_size, 1)
A:transformers.models.dpr.modeling_dpr.logits->self.qa_outputs(sequence_output)
A:transformers.models.dpr.modeling_dpr.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.dpr.modeling_dpr.start_logits->start_logits.view(n_passages, sequence_length).view(n_passages, sequence_length)
A:transformers.models.dpr.modeling_dpr.end_logits->end_logits.view(n_passages, sequence_length).view(n_passages, sequence_length)
A:transformers.models.dpr.modeling_dpr.relevance_logits->relevance_logits.view(n_passages).view(n_passages)
A:transformers.models.dpr.modeling_dpr.self.ctx_encoder->DPREncoder(config)
A:transformers.models.dpr.modeling_dpr.input_shape->input_ids.size()
A:transformers.models.dpr.modeling_dpr.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.dpr.modeling_dpr.self.question_encoder->DPREncoder(config)
A:transformers.models.dpr.modeling_dpr.self.span_predictor->DPRSpanPredictor(config)
A:transformers.models.dpr.modeling_dpr.attention_mask->torch.ones(input_shape, device=device)
transformers.DPRContextEncoder(self,config:DPRConfig)
transformers.DPRContextEncoder.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,token_type_ids:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None)->Union[DPRContextEncoderOutput, Tuple[Tensor, ...]]
transformers.DPRContextEncoderOutput(ModelOutput)
transformers.DPRPretrainedContextEncoder(PreTrainedModel)
transformers.DPRPretrainedContextEncoder.init_weights(self)
transformers.DPRPretrainedQuestionEncoder(PreTrainedModel)
transformers.DPRPretrainedQuestionEncoder.init_weights(self)
transformers.DPRPretrainedReader(PreTrainedModel)
transformers.DPRPretrainedReader.init_weights(self)
transformers.DPRQuestionEncoder(self,config:DPRConfig)
transformers.DPRQuestionEncoder.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,token_type_ids:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None)->Union[DPRQuestionEncoderOutput, Tuple[Tensor, ...]]
transformers.DPRQuestionEncoderOutput(ModelOutput)
transformers.DPRReader(self,config:DPRConfig)
transformers.DPRReader.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions:bool=None,output_hidden_states:bool=None,return_dict=None)->Union[DPRReaderOutput, Tuple[Tensor, ...]]
transformers.DPRReaderOutput(ModelOutput)
transformers.models.dpr.modeling_dpr.DPRContextEncoder(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRContextEncoder.__init__(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRContextEncoder.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,token_type_ids:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None)->Union[DPRContextEncoderOutput, Tuple[Tensor, ...]]
transformers.models.dpr.modeling_dpr.DPRContextEncoderOutput(ModelOutput)
transformers.models.dpr.modeling_dpr.DPREncoder(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPREncoder.__init__(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPREncoder.embeddings_size(self)->int
transformers.models.dpr.modeling_dpr.DPREncoder.forward(self,input_ids:Tensor,attention_mask:Optional[Tensor]=None,token_type_ids:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions:bool=False,output_hidden_states:bool=False,return_dict:bool=False)->Union[BaseModelOutputWithPooling, Tuple[Tensor, ...]]
transformers.models.dpr.modeling_dpr.DPREncoder.init_weights(self)
transformers.models.dpr.modeling_dpr.DPRPretrainedContextEncoder(PreTrainedModel)
transformers.models.dpr.modeling_dpr.DPRPretrainedContextEncoder.init_weights(self)
transformers.models.dpr.modeling_dpr.DPRPretrainedQuestionEncoder(PreTrainedModel)
transformers.models.dpr.modeling_dpr.DPRPretrainedQuestionEncoder.init_weights(self)
transformers.models.dpr.modeling_dpr.DPRPretrainedReader(PreTrainedModel)
transformers.models.dpr.modeling_dpr.DPRPretrainedReader.init_weights(self)
transformers.models.dpr.modeling_dpr.DPRQuestionEncoder(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRQuestionEncoder.__init__(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRQuestionEncoder.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,token_type_ids:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None)->Union[DPRQuestionEncoderOutput, Tuple[Tensor, ...]]
transformers.models.dpr.modeling_dpr.DPRQuestionEncoderOutput(ModelOutput)
transformers.models.dpr.modeling_dpr.DPRReader(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRReader.__init__(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRReader.forward(self,input_ids:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,inputs_embeds:Optional[Tensor]=None,output_attentions:bool=None,output_hidden_states:bool=None,return_dict=None)->Union[DPRReaderOutput, Tuple[Tensor, ...]]
transformers.models.dpr.modeling_dpr.DPRReaderOutput(ModelOutput)
transformers.models.dpr.modeling_dpr.DPRSpanPredictor(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRSpanPredictor.__init__(self,config:DPRConfig)
transformers.models.dpr.modeling_dpr.DPRSpanPredictor.forward(self,input_ids:Tensor,attention_mask:Tensor,inputs_embeds:Optional[Tensor]=None,output_attentions:bool=False,output_hidden_states:bool=False,return_dict:bool=False)->Union[DPRReaderOutput, Tuple[Tensor, ...]]
transformers.models.dpr.modeling_dpr.DPRSpanPredictor.init_weights(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/convert_dpr_original_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.CheckpointState->collections.namedtuple('CheckpointState', ['model_dict', 'optimizer_dict', 'scheduler_dict', 'offset', 'epoch', 'encoder_params'])
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.state_dict->torch.load(model_file, map_location=lambda s, l: default_restore_location(s, 'cpu'))
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.model->DPRState.from_type(comp_type, src_file=src_file).load_dpr_model()
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.saved_state->load_states_from_checkpoint(self.src_file)
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.dest_dir->Path(dest_dir)
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.dpr_state->DPRState.from_type(comp_type, src_file=src_file)
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.src_file->Path(args.src)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRContextEncoderState(DPRState)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRContextEncoderState.load_dpr_model(self)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRQuestionEncoderState(DPRState)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRQuestionEncoderState.load_dpr_model(self)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRReaderState(DPRState)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRReaderState.load_dpr_model(self)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRState(self,src_file:Path)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRState.__init__(self,src_file:Path)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRState.from_type(comp_type:str,*args,**kwargs)->'DPRState'
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRState.load_dpr_model(self)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.convert(comp_type:str,src_file:Path,dest_dir:Path)
transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.load_states_from_checkpoint(model_file:str)->CheckpointState


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/configuration_dpr.py----------------------------------------
A:transformers.models.dpr.configuration_dpr.logger->utils.logging.get_logger(__name__)
transformers.DPRConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',projection_dim:int=0,**kwargs)
transformers.models.dpr.configuration_dpr.DPRConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',projection_dim:int=0,**kwargs)
transformers.models.dpr.configuration_dpr.DPRConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',projection_dim:int=0,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/tokenization_dpr_fast.py----------------------------------------
A:transformers.models.dpr.tokenization_dpr_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.dpr.tokenization_dpr_fast.DPRSpanPrediction->collections.namedtuple('DPRSpanPrediction', ['span_score', 'relevance_score', 'doc_id', 'start_index', 'end_index', 'text'])
A:transformers.models.dpr.tokenization_dpr_fast.DPRReaderOutput->collections.namedtuple('DPRReaderOutput', ['start_logits', 'end_logits', 'relevance_logits'])
A:transformers.models.dpr.tokenization_dpr_fast.n_passages->len(relevance_logits)
A:transformers.models.dpr.tokenization_dpr_fast.sorted_docs->sorted(range(n_passages), reverse=True, key=relevance_logits.__getitem__)
A:transformers.models.dpr.tokenization_dpr_fast.sequence_ids->list(input_ids[doc_id])
A:transformers.models.dpr.tokenization_dpr_fast.sequence_len->len(sequence_ids)
A:transformers.models.dpr.tokenization_dpr_fast.best_spans->self._get_best_spans(start_logits=start_logits[doc_id][passage_offset:sequence_len], end_logits=end_logits[doc_id][passage_offset:sequence_len], max_answer_length=max_answer_length, top_spans=num_spans_per_passage)
A:transformers.models.dpr.tokenization_dpr_fast.scores->sorted(scores, key=lambda x: x[1], reverse=True)
transformers.DPRContextEncoderTokenizerFast(BertTokenizerFast)
transformers.DPRQuestionEncoderTokenizerFast(BertTokenizerFast)
transformers.DPRReaderTokenizerFast(CustomDPRReaderTokenizerMixin,BertTokenizerFast)
transformers.models.dpr.tokenization_dpr_fast.CustomDPRReaderTokenizerMixin(self,questions,titles:Optional[str]=None,texts:Optional[str]=None,padding:Union[bool,str]=False,truncation:Union[bool,str]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_attention_mask:Optional[bool]=None,**kwargs)
transformers.models.dpr.tokenization_dpr_fast.CustomDPRReaderTokenizerMixin.__call__(self,questions,titles:Optional[str]=None,texts:Optional[str]=None,padding:Union[bool,str]=False,truncation:Union[bool,str]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_attention_mask:Optional[bool]=None,**kwargs)
transformers.models.dpr.tokenization_dpr_fast.CustomDPRReaderTokenizerMixin._get_best_spans(self,start_logits:List[int],end_logits:List[int],max_answer_length:int,top_spans:int)->List[DPRSpanPrediction]
transformers.models.dpr.tokenization_dpr_fast.CustomDPRReaderTokenizerMixin.decode_best_spans(self,reader_input:BatchEncoding,reader_output:DPRReaderOutput,num_spans:int=16,max_answer_length:int=64,num_spans_per_passage:int=4)->List[DPRSpanPrediction]
transformers.models.dpr.tokenization_dpr_fast.DPRContextEncoderTokenizerFast(BertTokenizerFast)
transformers.models.dpr.tokenization_dpr_fast.DPRQuestionEncoderTokenizerFast(BertTokenizerFast)
transformers.models.dpr.tokenization_dpr_fast.DPRReaderTokenizerFast(CustomDPRReaderTokenizerMixin,BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dpr/modeling_tf_dpr.py----------------------------------------
A:transformers.models.dpr.modeling_tf_dpr.logger->utils.logging.get_logger(__name__)
A:transformers.models.dpr.modeling_tf_dpr.self.bert_model->TFBertMainLayer(config, name='bert_model')
A:transformers.models.dpr.modeling_tf_dpr.self.encode_proj->tensorflow.keras.layers.Dense(config.projection_dim, kernel_initializer=get_initializer(config.initializer_range), name='encode_proj')
A:transformers.models.dpr.modeling_tf_dpr.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, training=training, kwargs_call=kwargs)
A:transformers.models.dpr.modeling_tf_dpr.outputs->self.question_encoder(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.dpr.modeling_tf_dpr.pooled_output->self.encode_proj(pooled_output)
A:transformers.models.dpr.modeling_tf_dpr.self.encoder->TFDPREncoder(config, name='encoder')
A:transformers.models.dpr.modeling_tf_dpr.self.qa_outputs->tensorflow.keras.layers.Dense(2, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.dpr.modeling_tf_dpr.self.qa_classifier->tensorflow.keras.layers.Dense(1, kernel_initializer=get_initializer(config.initializer_range), name='qa_classifier')
A:transformers.models.dpr.modeling_tf_dpr.logits->self.qa_outputs(sequence_output)
A:transformers.models.dpr.modeling_tf_dpr.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.dpr.modeling_tf_dpr.start_logits->tensorflow.reshape(start_logits, [n_passages, sequence_length])
A:transformers.models.dpr.modeling_tf_dpr.end_logits->tensorflow.reshape(end_logits, [n_passages, sequence_length])
A:transformers.models.dpr.modeling_tf_dpr.relevance_logits->tensorflow.reshape(relevance_logits, [n_passages])
A:transformers.models.dpr.modeling_tf_dpr.self.ctx_encoder->TFDPREncoder(config, name='ctx_encoder')
A:transformers.models.dpr.modeling_tf_dpr.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.dpr.modeling_tf_dpr.inputs['token_type_ids']->tensorflow.zeros(input_shape, dtype=tf.dtypes.int32)
A:transformers.models.dpr.modeling_tf_dpr.self.question_encoder->TFDPREncoder(config, name='question_encoder')
A:transformers.models.dpr.modeling_tf_dpr.self.span_predictor->TFDPRSpanPredictor(config, name='span_predictor')
A:transformers.models.dpr.modeling_tf_dpr.inputs['attention_mask']->tensorflow.ones(input_shape, dtype=tf.dtypes.int32)
transformers.TFDPRContextEncoder(self,config:DPRConfig,*args,**kwargs)
transformers.TFDPRContextEncoder.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRContextEncoderOutput, Tuple[tf.Tensor, ...]]
transformers.TFDPRContextEncoder.get_input_embeddings(self)
transformers.TFDPRContextEncoderOutput(ModelOutput)
transformers.TFDPRPretrainedContextEncoder(TFPreTrainedModel)
transformers.TFDPRPretrainedQuestionEncoder(TFPreTrainedModel)
transformers.TFDPRPretrainedReader(TFPreTrainedModel)
transformers.TFDPRQuestionEncoder(self,config:DPRConfig,*args,**kwargs)
transformers.TFDPRQuestionEncoder.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRQuestionEncoderOutput, Tuple[tf.Tensor, ...]]
transformers.TFDPRQuestionEncoder.get_input_embeddings(self)
transformers.TFDPRQuestionEncoderOutput(ModelOutput)
transformers.TFDPRReader(self,config:DPRConfig,*args,**kwargs)
transformers.TFDPRReader.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions:bool=None,output_hidden_states:bool=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRReaderOutput, Tuple[tf.Tensor, ...]]
transformers.TFDPRReader.get_input_embeddings(self)
transformers.TFDPRReaderOutput(ModelOutput)
transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoder(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoder.__init__(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoder.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRContextEncoderOutput, Tuple[tf.Tensor, ...]]
transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoder.get_input_embeddings(self)
transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoderOutput(ModelOutput)
transformers.models.dpr.modeling_tf_dpr.TFDPREncoder(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPREncoder.__init__(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPREncoder.call(self,input_ids:tf.Tensor=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions:bool=None,output_hidden_states:bool=None,return_dict:bool=None,training:bool=False,**kwargs)->Union[TFBaseModelOutputWithPooling, Tuple[tf.Tensor, ...]]
transformers.models.dpr.modeling_tf_dpr.TFDPREncoder.embeddings_size(self)->int
transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedContextEncoder(TFPreTrainedModel)
transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedQuestionEncoder(TFPreTrainedModel)
transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedReader(TFPreTrainedModel)
transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoder(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoder.__init__(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoder.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions=None,output_hidden_states=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRQuestionEncoderOutput, Tuple[tf.Tensor, ...]]
transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoder.get_input_embeddings(self)
transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoderOutput(ModelOutput)
transformers.models.dpr.modeling_tf_dpr.TFDPRReader(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRReader.__init__(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRReader.call(self,input_ids=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions:bool=None,output_hidden_states:bool=None,return_dict=None,training:bool=False,**kwargs)->Union[TFDPRReaderOutput, Tuple[tf.Tensor, ...]]
transformers.models.dpr.modeling_tf_dpr.TFDPRReader.get_input_embeddings(self)
transformers.models.dpr.modeling_tf_dpr.TFDPRReaderOutput(ModelOutput)
transformers.models.dpr.modeling_tf_dpr.TFDPRSpanPredictor(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRSpanPredictor.__init__(self,config:DPRConfig,*args,**kwargs)
transformers.models.dpr.modeling_tf_dpr.TFDPRSpanPredictor.call(self,input_ids:tf.Tensor=None,attention_mask:Optional[tf.Tensor]=None,token_type_ids:Optional[tf.Tensor]=None,inputs_embeds:Optional[tf.Tensor]=None,output_attentions:bool=False,output_hidden_states:bool=False,return_dict:bool=False,training:bool=False,**kwargs)->Union[TFDPRReaderOutput, Tuple[tf.Tensor, ...]]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/tokenization_reformer_fast.py----------------------------------------
A:transformers.models.reformer.tokenization_reformer_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.reformer.tokenization_reformer_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.ReformerTokenizerFast(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.ReformerTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.reformer.tokenization_reformer_fast.ReformerTokenizerFast(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.models.reformer.tokenization_reformer_fast.ReformerTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.models.reformer.tokenization_reformer_fast.ReformerTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/tokenization_reformer.py----------------------------------------
A:transformers.models.reformer.tokenization_reformer.logger->utils.logging.get_logger(__name__)
A:transformers.models.reformer.tokenization_reformer.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.reformer.tokenization_reformer.state->self.__dict__.copy()
A:transformers.models.reformer.tokenization_reformer.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.reformer.tokenization_reformer.token->self.sp_model.IdToPiece(index)
A:transformers.models.reformer.tokenization_reformer.out_string->self.sp_model.decode_pieces(tokens)
A:transformers.models.reformer.tokenization_reformer.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.ReformerTokenizer(self,vocab_file,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.ReformerTokenizer.__getstate__(self)
transformers.ReformerTokenizer.__setstate__(self,d)
transformers.ReformerTokenizer._convert_id_to_token(self,index)
transformers.ReformerTokenizer._convert_token_to_id(self,token)
transformers.ReformerTokenizer._tokenize(self,text,sample=False)
transformers.ReformerTokenizer.convert_tokens_to_string(self,tokens)
transformers.ReformerTokenizer.get_vocab(self)->Dict[str, int]
transformers.ReformerTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.ReformerTokenizer.vocab_size(self)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer(self,vocab_file,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.__getstate__(self)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.__init__(self,vocab_file,eos_token='</s>',unk_token='<unk>',additional_special_tokens=[],**kwargs)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.__setstate__(self,d)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer._convert_id_to_token(self,index)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer._convert_token_to_id(self,token)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer._tokenize(self,text,sample=False)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.get_vocab(self)->Dict[str, int]
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.reformer.tokenization_reformer.ReformerTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/convert_reformer_trax_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.torch_layer.weight->torch.nn.Parameter(weight)
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.torch_layer.bias->torch.nn.Parameter(bias)
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.np_query_key->numpy.asarray(weights[0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.np_value->numpy.asarray(weights[2])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.np_dense->numpy.asarray(weights[3])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.np_query->numpy.asarray(weights[0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.np_key->numpy.asarray(weights[1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_1_weight->numpy.asarray(layer_norm_1[0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_1_bias->numpy.asarray(layer_norm_1[1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_2_weight->numpy.asarray(intermediate_weights[0][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_2_bias->numpy.asarray(intermediate_weights[0][1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.inter_dense_weight->numpy.asarray(intermediate_weights[1][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.inter_dense_bias->numpy.asarray(intermediate_weights[1][1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.out_dense_weight->numpy.asarray(intermediate_weights[4][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.out_dense_bias->numpy.asarray(intermediate_weights[4][1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.word_embeddings->numpy.asarray(weights[1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.emb_weights->numpy.asarray(weights[3][emb_idx][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.position_embeddings.weights[emb_idx]->torch.nn.Parameter(torch.tensor(emb_weights))
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_out_weight->numpy.asarray(weights[7][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.layer_norm_out_bias->numpy.asarray(weights[7][1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.output_embed_weights->numpy.asarray(weights[9][0])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.output_embed_bias->numpy.asarray(weights[9][1])
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.config->transformers.ReformerConfig.from_json_file(config_file)
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.model->ReformerModelWithLMHead(config)
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.convert_trax_checkpoint_to_pytorch(trax_model_pkl_path,config_file,pytorch_dump_path)
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_block_weights_in_torch(weights,torch_block,hidden_size)
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_layer_weights_in_torch_local(weights,torch_layer,hidden_size)
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_layer_weights_in_torch_lsh(weights,torch_layer,hidden_size)
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_model_weights_in_torch(weights,torch_model,hidden_size)
transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_param(torch_layer,weight,bias=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/configuration_reformer.py----------------------------------------
A:transformers.models.reformer.configuration_reformer.logger->utils.logging.get_logger(__name__)
A:transformers.models.reformer.configuration_reformer.self.num_hidden_layers->len(attn_layers)
A:transformers.models.reformer.configuration_reformer.self.axial_pos_shape->tuple(axial_pos_shape)
A:transformers.models.reformer.configuration_reformer.self.axial_pos_embds_dim->tuple(axial_pos_embds_dim)
transformers.ReformerConfig(self,attention_head_size=64,attn_layers=['local','lsh','local','lsh','local','lsh'],axial_norm_std=1.0,axial_pos_embds=True,axial_pos_shape=[64,64],axial_pos_embds_dim=[64,192],chunk_size_lm_head=0,eos_token_id=2,feed_forward_size=512,hash_seed=None,hidden_act='relu',hidden_dropout_prob=0.05,hidden_size=256,initializer_range=0.02,is_decoder=False,layer_norm_eps=1e-12,local_num_chunks_before=1,local_num_chunks_after=0,local_attention_probs_dropout_prob=0.05,local_attn_chunk_length=64,lsh_attn_chunk_length=64,lsh_attention_probs_dropout_prob=0.0,lsh_num_chunks_before=1,lsh_num_chunks_after=0,max_position_embeddings=4096,num_attention_heads=12,num_buckets=None,num_hashes=1,pad_token_id=0,vocab_size=320,tie_word_embeddings=False,use_cache=True,**kwargs)
transformers.models.reformer.configuration_reformer.ReformerConfig(self,attention_head_size=64,attn_layers=['local','lsh','local','lsh','local','lsh'],axial_norm_std=1.0,axial_pos_embds=True,axial_pos_shape=[64,64],axial_pos_embds_dim=[64,192],chunk_size_lm_head=0,eos_token_id=2,feed_forward_size=512,hash_seed=None,hidden_act='relu',hidden_dropout_prob=0.05,hidden_size=256,initializer_range=0.02,is_decoder=False,layer_norm_eps=1e-12,local_num_chunks_before=1,local_num_chunks_after=0,local_attention_probs_dropout_prob=0.05,local_attn_chunk_length=64,lsh_attn_chunk_length=64,lsh_attention_probs_dropout_prob=0.0,lsh_num_chunks_before=1,lsh_num_chunks_after=0,max_position_embeddings=4096,num_attention_heads=12,num_buckets=None,num_hashes=1,pad_token_id=0,vocab_size=320,tie_word_embeddings=False,use_cache=True,**kwargs)
transformers.models.reformer.configuration_reformer.ReformerConfig.__init__(self,attention_head_size=64,attn_layers=['local','lsh','local','lsh','local','lsh'],axial_norm_std=1.0,axial_pos_embds=True,axial_pos_shape=[64,64],axial_pos_embds_dim=[64,192],chunk_size_lm_head=0,eos_token_id=2,feed_forward_size=512,hash_seed=None,hidden_act='relu',hidden_dropout_prob=0.05,hidden_size=256,initializer_range=0.02,is_decoder=False,layer_norm_eps=1e-12,local_num_chunks_before=1,local_num_chunks_after=0,local_attention_probs_dropout_prob=0.05,local_attn_chunk_length=64,lsh_attn_chunk_length=64,lsh_attention_probs_dropout_prob=0.0,lsh_num_chunks_before=1,lsh_num_chunks_after=0,max_position_embeddings=4096,num_attention_heads=12,num_buckets=None,num_hashes=1,pad_token_id=0,vocab_size=320,tie_word_embeddings=False,use_cache=True,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/reformer/modeling_reformer.py----------------------------------------
A:transformers.models.reformer.modeling_reformer.logger->utils.logging.get_logger(__name__)
A:transformers.models.reformer.modeling_reformer.LSHSelfAttentionOutput->namedtuple('LSHSelfAttentionOutput', ['hidden_states', 'attention_probs', 'buckets'])
A:transformers.models.reformer.modeling_reformer.LocalSelfAttentionOutput->namedtuple('LocalSelfAttentionOutput', ['hidden_states', 'attention_probs'])
A:transformers.models.reformer.modeling_reformer.AttentionOutput->namedtuple('AttentionOutput', ['hidden_states', 'attention_probs', 'buckets'])
A:transformers.models.reformer.modeling_reformer.ReformerOutput->namedtuple('ReformerOutput', ['hidden_states', 'attn_output', 'attention_probs', 'buckets'])
A:transformers.models.reformer.modeling_reformer.ReformerBackwardOutput->namedtuple('ReformerBackwardOutput', ['attn_output', 'hidden_states', 'grad_attn_output', 'grad_hidden_states'])
A:transformers.models.reformer.modeling_reformer.ReformerEncoderOutput->namedtuple('ReformerEncoderOutput', ['hidden_states', 'all_hidden_states', 'all_attentions', 'past_buckets_states'])
A:transformers.models.reformer.modeling_reformer.scale_offset->scale_offset.expand(vector.shape).expand(vector.shape)
A:transformers.models.reformer.modeling_reformer.attn_types_set->set(attn_types)
A:transformers.models.reformer.modeling_reformer.self.least_common_mult_chunk_length->_get_least_common_mult_chunk_len(config)
A:transformers.models.reformer.modeling_reformer.self.weights->torch.nn.ParameterList()
A:transformers.models.reformer.modeling_reformer.weights->torch.cat(broadcasted_weights, dim=-1)
A:transformers.models.reformer.modeling_reformer.transposed_weights->torch.cat(broadcasted_weights, dim=-1).transpose(2, 1)
A:transformers.models.reformer.modeling_reformer.dropped_transposed_weights->torch.nn.functional.dropout2d(transposed_weights, p=self.dropout, training=self.training)
A:transformers.models.reformer.modeling_reformer.dropped_weights->torch.nn.functional.dropout2d(transposed_weights, p=self.dropout, training=self.training).transpose(2, 1)
A:transformers.models.reformer.modeling_reformer.position_encodings->torch.cat([torch.index_select(position_encodings[i], 0, position_ids[i]).unsqueeze(0) for i in range(batch_size)], dim=0)
A:transformers.models.reformer.modeling_reformer.max_position_id->torch.cat([position_ids, padded_position_ids], dim=-1).max().item()
A:transformers.models.reformer.modeling_reformer.self.embedding->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.reformer.modeling_reformer.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.reformer.modeling_reformer.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size)
A:transformers.models.reformer.modeling_reformer.input_shape->torch.cat([inputs_embeds, padded_inputs_embeds], dim=-2).size()
A:transformers.models.reformer.modeling_reformer.position_ids->torch.cat([position_ids, padded_position_ids], dim=-1)
A:transformers.models.reformer.modeling_reformer.inputs_embeds->torch.cat([inputs_embeds, padded_inputs_embeds], dim=-2)
A:transformers.models.reformer.modeling_reformer.embeddings->torch.nn.functional.dropout(inputs_embeds, p=self.dropout, training=self.training)
A:transformers.models.reformer.modeling_reformer.x->x.permute(0, 2, 1, 3).permute(0, 2, 1, 3)
A:transformers.models.reformer.modeling_reformer.self.query_key->torch.nn.Linear(self.hidden_size, self.all_head_size, bias=False)
A:transformers.models.reformer.modeling_reformer.self.value->torch.nn.Linear(self.hidden_size, self.all_head_size, bias=False)
A:transformers.models.reformer.modeling_reformer.query_vectors->self._split_seq_length_dim_to(query_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)
A:transformers.models.reformer.modeling_reformer.(key_value_hidden_states, sorted_bucket_idx, buckets)->self._get_relevant_hid_states_and_buckets(query_vectors=query_vectors, attention_mask=attention_mask, num_hashes=num_hashes, hidden_states=hidden_states, past_states=past_states, past_buckets=past_buckets)
A:transformers.models.reformer.modeling_reformer.query_key_vectors->torch.einsum('balh,ahr->balr', hidden_states, per_head_query_key)
A:transformers.models.reformer.modeling_reformer.value_vectors->self._look_adjacent(value_vectors, self.num_chunks_before, self.num_chunks_after)
A:transformers.models.reformer.modeling_reformer.key_value_hidden_states->torch.cat([key_value_hidden_states, hidden_states], dim=1)
A:transformers.models.reformer.modeling_reformer.buckets->torch.where(buckets_mask, buckets, torch.tensor(num_buckets - 1, dtype=torch.long, device=buckets.device))
A:transformers.models.reformer.modeling_reformer.(sorted_bucket_idx, undo_sorted_bucket_idx)->self._get_sorted_bucket_idx_and_undo_sorted_bucket_idx(sequence_length, buckets, num_hashes)
A:transformers.models.reformer.modeling_reformer.sorted_bucket_idx_per_hash->torch.arange(sequence_length, device=query_key_vectors.device).repeat(batch_size, self.num_attention_heads, 1)
A:transformers.models.reformer.modeling_reformer.key_vectors->self._look_adjacent(key_vectors, self.num_chunks_before, self.num_chunks_after)
A:transformers.models.reformer.modeling_reformer.(out_vectors, logits, attention_probs)->self._attend(query_vectors=query_vectors, key_vectors=key_vectors, value_vectors=value_vectors, sorted_bucket_idx_per_hash=sorted_bucket_idx_per_hash, attention_mask=attention_mask, head_mask=head_mask, do_standard_self_attention=do_standard_self_attention, do_cached_attention=do_cached_attention)
A:transformers.models.reformer.modeling_reformer.(out_vectors, logits)->ReverseSort.apply(out_vectors, logits, sorted_bucket_idx, undo_sorted_bucket_idx)
A:transformers.models.reformer.modeling_reformer.out_vectors->self._merge_hidden_size_dims(out_vectors, self.num_attention_heads, self.attention_head_size)
A:transformers.models.reformer.modeling_reformer.logits->self.qa_outputs(sequence_output)
A:transformers.models.reformer.modeling_reformer.probs_vectors->torch.exp(logits - torch.logsumexp(logits, dim=2, keepdim=True))
A:transformers.models.reformer.modeling_reformer.per_head_query_key->self.query_key.weight.reshape(self.num_attention_heads, self.attention_head_size, self.hidden_size).transpose(-2, -1)
A:transformers.models.reformer.modeling_reformer.per_head_value->self.value.weight.reshape(self.num_attention_heads, self.attention_head_size, self.hidden_size).transpose(-2, -1)
A:transformers.models.reformer.modeling_reformer.vectors->vectors.repeat(1, 1, num_hashes, 1).repeat(1, 1, num_hashes, 1)
A:transformers.models.reformer.modeling_reformer.random_rotations->torch.randn(rotations_shape, device=vectors.device, dtype=vectors.dtype)
A:transformers.models.reformer.modeling_reformer.rotated_vectors->torch.cat([rotated_vectors, -rotated_vectors], dim=-1)
A:transformers.models.reformer.modeling_reformer.rotated_vectors_factor->torch.cat([rotated_vectors_factor, -rotated_vectors_factor], dim=-1)
A:transformers.models.reformer.modeling_reformer.buckets_mask->torch.cat([torch.ones(input_shape, device=device, dtype=torch.uint8), torch.zeros((input_shape[0], padding_length), device=device, dtype=torch.uint8)], dim=-1).to(torch.uint8)[:, None, None, :].expand(buckets.shape)
A:transformers.models.reformer.modeling_reformer.offsets->offsets.expand((batch_size, self.num_attention_heads) + offsets.shape[-2:]).expand((batch_size, self.num_attention_heads) + offsets.shape[-2:])
A:transformers.models.reformer.modeling_reformer.offset_buckets->(buckets + offsets).flatten(start_dim=2, end_dim=3)
A:transformers.models.reformer.modeling_reformer.sorted_bucket_idx->_stable_argsort(buckets, dim=-1)
A:transformers.models.reformer.modeling_reformer.indices->torch.arange(sequence_length, device=query_vectors.device).repeat(batch_size, self.num_attention_heads, 1)
A:transformers.models.reformer.modeling_reformer.undo_sorted_bucket_idx->_stable_argsort(buckets, dim=-1).new(*sorted_bucket_idx.size())
A:transformers.models.reformer.modeling_reformer.query_key_dots->torch.where(mask, query_key_dots, mask_value)
A:transformers.models.reformer.modeling_reformer.query_bucket_idx->self._split_seq_length_dim_to(sorted_bucket_idx_per_hash, -1, self.chunk_length, self.num_attention_heads)
A:transformers.models.reformer.modeling_reformer.key_value_bucket_idx->torch.arange(query_key_dots.shape[-1], dtype=torch.long, device=query_key_dots.device)[None, None, :].expand(query_bucket_idx.shape[:2] + (-1,))
A:transformers.models.reformer.modeling_reformer.self_mask_value->self.self_mask_value_float16.half()
A:transformers.models.reformer.modeling_reformer.mask_value->self.mask_value_float16.half()
A:transformers.models.reformer.modeling_reformer.mask->self._compute_attn_mask(query_indices, key_indices, attention_mask, query_key_dots.shape, do_standard_self_attention)
A:transformers.models.reformer.modeling_reformer.self_mask->torch.ne(query_bucket_idx.unsqueeze(-1), key_value_bucket_idx.unsqueeze(-2)).to(query_bucket_idx.device)
A:transformers.models.reformer.modeling_reformer.attention_probs->torch.nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)
A:transformers.models.reformer.modeling_reformer.attention_mask->torch.cat([torch.ones(input_shape, device=device, dtype=torch.uint8), torch.zeros((input_shape[0], padding_length), device=device, dtype=torch.uint8)], dim=-1)
A:transformers.models.reformer.modeling_reformer.causal_mask->torch.ge(query_indices.unsqueeze(-1), key_indices.unsqueeze(-2)).to(query_indices.device)
A:transformers.models.reformer.modeling_reformer.hidden_states->self.out_proj(hidden_states)
A:transformers.models.reformer.modeling_reformer.query_buckets->self._hash_vectors(query_vectors, num_hashes, attention_mask, increase_num_buckets=increase_num_buckets)
A:transformers.models.reformer.modeling_reformer.concat_buckets->torch.cat([past_buckets, query_buckets.unsqueeze(-1)], dim=-1)
A:transformers.models.reformer.modeling_reformer.bucket_idx->_stable_argsort(concat_buckets, dim=-1)
A:transformers.models.reformer.modeling_reformer.relevant_bucket_idx->(bucket_idx == bucket_idx.shape[-1] - 1).nonzero()
A:transformers.models.reformer.modeling_reformer.relevant_bucket_idx_chunk->relevant_bucket_idx_chunk.reshape(batch_size, self.num_attention_heads, num_hashes, -1).reshape(batch_size, self.num_attention_heads, num_hashes, -1)
A:transformers.models.reformer.modeling_reformer.relevant_hidden_states->relevant_hidden_states.reshape(batch_size, self.num_attention_heads, -1, self.hidden_size).reshape(batch_size, self.num_attention_heads, -1, self.hidden_size)
A:transformers.models.reformer.modeling_reformer.expanded_start_indices->start_indices_chunk.unsqueeze(-1).expand(indices.shape[0], total_chunk_size)
A:transformers.models.reformer.modeling_reformer.variance->torch.mean(x ** 2, -1, keepdim=True)
A:transformers.models.reformer.modeling_reformer.expanded_idxs->idxs.unsqueeze(-1).expand(-1, -1, -1, self.attention_head_size)
A:transformers.models.reformer.modeling_reformer.expanded_undo_sort_indices->_stable_argsort(buckets, dim=-1).new(*sorted_bucket_idx.size()).unsqueeze(-1).expand(out_vectors.shape)
A:transformers.models.reformer.modeling_reformer.expanded_sort_indices->_stable_argsort(buckets, dim=-1).unsqueeze(-1).expand(grad_out_vectors.shape)
A:transformers.models.reformer.modeling_reformer.grad_out_vectors->torch.gather(grad_out_vectors, 2, expanded_sort_indices)
A:transformers.models.reformer.modeling_reformer.grad_logits->torch.gather(grad_logits, 2, sorted_bucket_idx)
A:transformers.models.reformer.modeling_reformer.self.query->torch.nn.Linear(self.hidden_size, self.all_head_size, bias=False)
A:transformers.models.reformer.modeling_reformer.self.key->torch.nn.Linear(self.hidden_size, self.all_head_size, bias=False)
A:transformers.models.reformer.modeling_reformer.query_indices->self._split_seq_length_dim_to(indices, -1, self.chunk_length, self.num_attention_heads)
A:transformers.models.reformer.modeling_reformer.key_indices->self._look_adjacent(key_indices, self.num_chunks_before, self.num_chunks_after)
A:transformers.models.reformer.modeling_reformer.self.dense->torch.nn.Linear(2 * config.hidden_size, config.hidden_size)
A:transformers.models.reformer.modeling_reformer.self.layer_norm->torch.nn.LayerNorm(2 * config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.reformer.modeling_reformer.self.self_attention->LocalSelfAttention(config)
A:transformers.models.reformer.modeling_reformer.self.output->ReformerFeedForwardOutput(config)
A:transformers.models.reformer.modeling_reformer.self_attention_outputs->self.self_attention(hidden_states=hidden_states, head_mask=head_mask, attention_mask=attention_mask, num_hashes=num_hashes, past_buckets_states=past_buckets_states_layer, use_cache=use_cache, output_attentions=output_attentions, buckets=buckets)
A:transformers.models.reformer.modeling_reformer.past_buckets->torch.cat([past_buckets_states[self.layer_id][0], buckets], dim=-1)
A:transformers.models.reformer.modeling_reformer.past_states->torch.cat([past_buckets_states[self.layer_id][1], hidden_states], dim=1)
A:transformers.models.reformer.modeling_reformer.attention_output->self.output(self_attention_outputs.hidden_states)
A:transformers.models.reformer.modeling_reformer.self.attention->ReformerAttention(config, layer_id)
A:transformers.models.reformer.modeling_reformer.self.feed_forward->ChunkReformerFeedForward(config)
A:transformers.models.reformer.modeling_reformer.device_idx->torch.cuda.current_device()
A:transformers.models.reformer.modeling_reformer.self.attention_seed->int(torch.seed() % sys.maxsize)
A:transformers.models.reformer.modeling_reformer.self.feed_forward_seed->int(torch.seed() % sys.maxsize)
A:transformers.models.reformer.modeling_reformer.attn_outputs->self.attention(hidden_states=hidden_states, head_mask=head_mask, attention_mask=attention_mask, num_hashes=num_hashes, past_buckets_states=past_buckets_states, use_cache=use_cache, orig_sequence_length=orig_sequence_length, output_attentions=output_attentions)
A:transformers.models.reformer.modeling_reformer.res_hidden_states->self.feed_forward(next_attn_output)
A:transformers.models.reformer.modeling_reformer.(hidden_states, attn_output)->torch.chunk(hidden_states, 2, dim=-1)
A:transformers.models.reformer.modeling_reformer.layer_outputs->layer(prev_attn_output=attn_output, hidden_states=hidden_states, attention_mask=attention_mask, head_mask=layer_head_mask, num_hashes=num_hashes, past_buckets_states=past_buckets_states, use_cache=use_cache, orig_sequence_length=orig_sequence_length, output_attentions=output_attentions)
A:transformers.models.reformer.modeling_reformer.(grad_attn_output, grad_hidden_states)->torch.chunk(grad_hidden_states, 2, dim=-1)
A:transformers.models.reformer.modeling_reformer.output->layer.backward_pass(next_attn_output=output.attn_output, hidden_states=output.hidden_states, grad_attn_output=output.grad_attn_output, grad_hidden_states=output.grad_hidden_states, head_mask=head_mask[len(layers) - idx - 1], attention_mask=attention_mask, buckets=buckets)
A:transformers.models.reformer.modeling_reformer.grad_hidden_states->torch.cat([output.grad_attn_output, output.grad_hidden_states], dim=-1)
A:transformers.models.reformer.modeling_reformer.self.layers->torch.nn.ModuleList([ReformerLayer(config, i) for i in range(config.num_hidden_layers)])
A:transformers.models.reformer.modeling_reformer.self.decoder->torch.nn.Linear(2 * config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.reformer.modeling_reformer.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.reformer.modeling_reformer.input_ids->torch.cat([input_ids, padded_input_ids], dim=-1)
A:transformers.models.reformer.modeling_reformer.input_mask->torch.tensor(DUMMY_MASK)
A:transformers.models.reformer.modeling_reformer.self.embeddings->ReformerEmbeddings(config)
A:transformers.models.reformer.modeling_reformer.self.encoder->ReformerEncoder(config)
A:transformers.models.reformer.modeling_reformer.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers, is_attention_chunked=True)
A:transformers.models.reformer.modeling_reformer.least_common_mult_chunk_length->_get_least_common_mult_chunk_len(self.config)
A:transformers.models.reformer.modeling_reformer.min_chunk_length->_get_min_chunk_len(self.config)
A:transformers.models.reformer.modeling_reformer.(input_ids, inputs_embeds, attention_mask, position_ids, input_shape)->self._pad_to_mult_of_chunk_length(input_ids, inputs_embeds=inputs_embeds, attention_mask=attention_mask, position_ids=position_ids, input_shape=input_shape, padding_length=padding_length, padded_seq_length=least_common_mult_chunk_length, device=device)
A:transformers.models.reformer.modeling_reformer.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, inputs_embeds=inputs_embeds, start_idx_pos_encodings=start_idx_pos_encodings)
A:transformers.models.reformer.modeling_reformer.encoder_outputs->self.encoder(hidden_states=embedding_output, head_mask=head_mask, attention_mask=attention_mask, num_hashes=num_hashes, past_buckets_states=past_buckets_states, use_cache=use_cache, orig_sequence_length=orig_sequence_length, output_hidden_states=output_hidden_states, output_attentions=output_attentions)
A:transformers.models.reformer.modeling_reformer.padded_input_ids->torch.full((input_shape[0], padding_length), self.config.pad_token_id, device=device, dtype=torch.long)
A:transformers.models.reformer.modeling_reformer.pad_attention_mask->torch.zeros(input_shape[0], padding_length, device=device, dtype=attention_mask.dtype)
A:transformers.models.reformer.modeling_reformer.padded_position_ids->torch.cat([position_ids, padded_position_ids], dim=-1).unsqueeze(0).expand(input_shape[0], padding_length)
A:transformers.models.reformer.modeling_reformer.padded_inputs_embeds->self.embeddings(padded_input_ids, position_ids)
A:transformers.models.reformer.modeling_reformer.self.reformer->ReformerModel(config)
A:transformers.models.reformer.modeling_reformer.self.lm_head->ReformerOnlyLMHead(config)
A:transformers.models.reformer.modeling_reformer.reformer_outputs->self.reformer(input_ids, position_ids=position_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, num_hashes=num_hashes, use_cache=False, output_hidden_states=output_hidden_states, output_attentions=output_attentions, return_dict=return_dict)
A:transformers.models.reformer.modeling_reformer.shift_logits->logits[..., :-1, :].contiguous()
A:transformers.models.reformer.modeling_reformer.shift_labels->labels[..., 1:].contiguous()
A:transformers.models.reformer.modeling_reformer.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.reformer.modeling_reformer.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.reformer.modeling_reformer.reord_buckets->layer_past[0].index_select(0, beam_idx)
A:transformers.models.reformer.modeling_reformer.reord_hidden_states->layer_past[1].index_select(0, beam_idx)
A:transformers.models.reformer.modeling_reformer.masked_lm_loss->loss_fct(logits.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.reformer.modeling_reformer.self.classifier->ReformerClassificationHead(config)
A:transformers.models.reformer.modeling_reformer.outputs->self.reformer(input_ids, position_ids=position_ids, attention_mask=attention_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, num_hashes=num_hashes, output_hidden_states=output_hidden_states, output_attentions=output_attentions, return_dict=return_dict)
A:transformers.models.reformer.modeling_reformer.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.reformer.modeling_reformer.self.out_proj->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.reformer.modeling_reformer.self.qa_outputs->torch.nn.Linear(2 * config.hidden_size, config.num_labels)
A:transformers.models.reformer.modeling_reformer.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.reformer.modeling_reformer.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.reformer.modeling_reformer.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.reformer.modeling_reformer.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.reformer.modeling_reformer.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.reformer.modeling_reformer.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.reformer.modeling_reformer.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.reformer.modeling_reformer.end_loss->loss_fct(end_logits, end_positions)
transformers.ReformerAttention(self,config,layer_id=0)
transformers.ReformerAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,past_buckets_states=None,use_cache=False,orig_sequence_length=None,output_attentions=False,buckets=None)
transformers.ReformerForMaskedLM(self,config)
transformers.ReformerForMaskedLM.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,labels=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.ReformerForMaskedLM.get_output_embeddings(self)
transformers.ReformerForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.ReformerForQuestionAnswering(self,config)
transformers.ReformerForQuestionAnswering.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,start_positions=None,end_positions=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.ReformerForSequenceClassification(self,config)
transformers.ReformerForSequenceClassification.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,labels=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.ReformerLayer(self,config,layer_id=0)
transformers.ReformerLayer._init_attention_seed(self)
transformers.ReformerLayer._init_feed_forward_seed(self)
transformers.ReformerLayer.backward_pass(self,next_attn_output,hidden_states,grad_attn_output,grad_hidden_states,attention_mask=None,head_mask=None,buckets=None)
transformers.ReformerLayer.forward(self,prev_attn_output,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,past_buckets_states=None,use_cache=False,orig_sequence_length=None,output_attentions=False)
transformers.ReformerModel(self,config)
transformers.ReformerModel._pad_to_mult_of_chunk_length(self,input_ids,inputs_embeds=None,attention_mask=None,position_ids=None,input_shape=None,padding_length=None,padded_seq_length=None,device=None)
transformers.ReformerModel._prune_heads(self,heads_to_prune)
transformers.ReformerModel.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,num_hashes=None,past_buckets_states=None,use_cache=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.ReformerModel.get_input_embeddings(self)
transformers.ReformerModel.set_input_embeddings(self,value)
transformers.ReformerModelOutput(ModelOutput)
transformers.ReformerModelWithLMHead(self,config)
transformers.ReformerModelWithLMHead._reorder_cache(self,past,beam_idx)
transformers.ReformerModelWithLMHead.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,past_buckets_states=None,use_cache=None,output_hidden_states=None,output_attentions=None,return_dict=None,labels=None)
transformers.ReformerModelWithLMHead.get_output_embeddings(self)
transformers.ReformerModelWithLMHead.prepare_inputs_for_generation(self,input_ids,past=None,use_cache=None,num_hashes=None,**kwargs)
transformers.ReformerModelWithLMHead.set_output_embeddings(self,new_embeddings)
transformers.ReformerModelWithLMHeadOutput(ModelOutput)
transformers.models.reformer.modeling_reformer.AxialPositionEmbeddings(self,config)
transformers.models.reformer.modeling_reformer.AxialPositionEmbeddings.__init__(self,config)
transformers.models.reformer.modeling_reformer.AxialPositionEmbeddings.forward(self,position_ids)
transformers.models.reformer.modeling_reformer.ChunkReformerFeedForward(self,config)
transformers.models.reformer.modeling_reformer.ChunkReformerFeedForward.__init__(self,config)
transformers.models.reformer.modeling_reformer.ChunkReformerFeedForward.forward(self,attention_output)
transformers.models.reformer.modeling_reformer.ChunkReformerFeedForward.forward_chunk(self,hidden_states)
transformers.models.reformer.modeling_reformer.EfficientAttentionMixin
transformers.models.reformer.modeling_reformer.EfficientAttentionMixin._look_adjacent(self,vectors,num_chunks_before,num_chunks_after)
transformers.models.reformer.modeling_reformer.EfficientAttentionMixin._merge_hidden_size_dims(self,x,num_attn_heads,attn_head_size)
transformers.models.reformer.modeling_reformer.EfficientAttentionMixin._split_hidden_size_dim(self,x,num_attn_heads,attn_head_size)
transformers.models.reformer.modeling_reformer.EfficientAttentionMixin._split_seq_length_dim_to(self,vectors,dim_factor_1,dim_factor_2,num_attn_heads,attn_head_size=None)
transformers.models.reformer.modeling_reformer.LSHSelfAttention(self,config)
transformers.models.reformer.modeling_reformer.LSHSelfAttention.__init__(self,config)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._attend(self,query_vectors,key_vectors,value_vectors,sorted_bucket_idx_per_hash,attention_mask,head_mask,do_standard_self_attention,do_cached_attention)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._compute_attn_mask(self,query_indices,key_indices,attention_mask,query_key_dot_shape,do_standard_self_attention)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._expand_to_indices_in_relevant_chunk(self,indices,sequence_length)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._gather_by_expansion(self,vectors,idxs,num_hashes)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._get_relevant_hid_states_and_buckets(self,query_vectors,attention_mask,num_hashes,hidden_states,past_states,past_buckets)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._get_sorted_bucket_idx_and_undo_sorted_bucket_idx(self,sequence_length,buckets,num_hashes)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._hash_vectors(self,vectors,num_hashes,attention_mask,increase_num_buckets=False)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._len_and_dim_norm(self,vectors)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._len_norm(self,x,epsilon=1e-06)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._query_per_attn_head(self,hidden_states)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._set_num_buckets(self,sequence_length)
transformers.models.reformer.modeling_reformer.LSHSelfAttention._value_per_attn_head(self,hidden_states)
transformers.models.reformer.modeling_reformer.LSHSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,buckets=None,past_buckets_states=None,use_cache=False,output_attentions=False,**kwargs)
transformers.models.reformer.modeling_reformer.LocalSelfAttention(self,config)
transformers.models.reformer.modeling_reformer.LocalSelfAttention.__init__(self,config)
transformers.models.reformer.modeling_reformer.LocalSelfAttention._compute_attn_mask(self,query_indices,key_indices,attention_mask,query_key_dots_shape,do_standard_self_attention)
transformers.models.reformer.modeling_reformer.LocalSelfAttention._retrieve_relevant_hidden_states(previous_hidden_states,chunk_length,num_chunks_before)
transformers.models.reformer.modeling_reformer.LocalSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,past_buckets_states=None,use_cache=False,output_attentions=False,**kwargs)
transformers.models.reformer.modeling_reformer.PositionEmbeddings(self,config)
transformers.models.reformer.modeling_reformer.PositionEmbeddings.__init__(self,config)
transformers.models.reformer.modeling_reformer.PositionEmbeddings.forward(self,position_ids)
transformers.models.reformer.modeling_reformer.ReformerAttention(self,config,layer_id=0)
transformers.models.reformer.modeling_reformer.ReformerAttention.__init__(self,config,layer_id=0)
transformers.models.reformer.modeling_reformer.ReformerAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,past_buckets_states=None,use_cache=False,orig_sequence_length=None,output_attentions=False,buckets=None)
transformers.models.reformer.modeling_reformer.ReformerClassificationHead(self,config)
transformers.models.reformer.modeling_reformer.ReformerClassificationHead.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerClassificationHead.forward(self,hidden_states,**kwargs)
transformers.models.reformer.modeling_reformer.ReformerEmbeddings(self,config)
transformers.models.reformer.modeling_reformer.ReformerEmbeddings.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerEmbeddings.forward(self,input_ids=None,position_ids=None,inputs_embeds=None,start_idx_pos_encodings=0)
transformers.models.reformer.modeling_reformer.ReformerEncoder(self,config)
transformers.models.reformer.modeling_reformer.ReformerEncoder.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,past_buckets_states=None,use_cache=False,orig_sequence_length=None,output_hidden_states=False,output_attentions=False)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardDense(self,config)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardDense.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardDense.forward(self,hidden_states)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardOutput(self,config)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardOutput.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerFeedForwardOutput.forward(self,hidden_states)
transformers.models.reformer.modeling_reformer.ReformerForMaskedLM(self,config)
transformers.models.reformer.modeling_reformer.ReformerForMaskedLM.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerForMaskedLM.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,labels=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.models.reformer.modeling_reformer.ReformerForMaskedLM.get_output_embeddings(self)
transformers.models.reformer.modeling_reformer.ReformerForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.reformer.modeling_reformer.ReformerForQuestionAnswering(self,config)
transformers.models.reformer.modeling_reformer.ReformerForQuestionAnswering.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerForQuestionAnswering.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,start_positions=None,end_positions=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.models.reformer.modeling_reformer.ReformerForSequenceClassification(self,config)
transformers.models.reformer.modeling_reformer.ReformerForSequenceClassification.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerForSequenceClassification.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,labels=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.models.reformer.modeling_reformer.ReformerLayer(self,config,layer_id=0)
transformers.models.reformer.modeling_reformer.ReformerLayer.__init__(self,config,layer_id=0)
transformers.models.reformer.modeling_reformer.ReformerLayer._init_attention_seed(self)
transformers.models.reformer.modeling_reformer.ReformerLayer._init_feed_forward_seed(self)
transformers.models.reformer.modeling_reformer.ReformerLayer.backward_pass(self,next_attn_output,hidden_states,grad_attn_output,grad_hidden_states,attention_mask=None,head_mask=None,buckets=None)
transformers.models.reformer.modeling_reformer.ReformerLayer.forward(self,prev_attn_output,hidden_states,attention_mask=None,head_mask=None,num_hashes=None,past_buckets_states=None,use_cache=False,orig_sequence_length=None,output_attentions=False)
transformers.models.reformer.modeling_reformer.ReformerModel(self,config)
transformers.models.reformer.modeling_reformer.ReformerModel.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerModel._pad_to_mult_of_chunk_length(self,input_ids,inputs_embeds=None,attention_mask=None,position_ids=None,input_shape=None,padding_length=None,padded_seq_length=None,device=None)
transformers.models.reformer.modeling_reformer.ReformerModel._prune_heads(self,heads_to_prune)
transformers.models.reformer.modeling_reformer.ReformerModel.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,num_hashes=None,past_buckets_states=None,use_cache=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.models.reformer.modeling_reformer.ReformerModel.get_input_embeddings(self)
transformers.models.reformer.modeling_reformer.ReformerModel.set_input_embeddings(self,value)
transformers.models.reformer.modeling_reformer.ReformerModelOutput(ModelOutput)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead(self,config)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead._reorder_cache(self,past,beam_idx)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead.forward(self,input_ids=None,position_ids=None,attention_mask=None,head_mask=None,inputs_embeds=None,num_hashes=None,past_buckets_states=None,use_cache=None,output_hidden_states=None,output_attentions=None,return_dict=None,labels=None)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead.get_output_embeddings(self)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead.prepare_inputs_for_generation(self,input_ids,past=None,use_cache=None,num_hashes=None,**kwargs)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHead.set_output_embeddings(self,new_embeddings)
transformers.models.reformer.modeling_reformer.ReformerModelWithLMHeadOutput(ModelOutput)
transformers.models.reformer.modeling_reformer.ReformerOnlyLMHead(self,config)
transformers.models.reformer.modeling_reformer.ReformerOnlyLMHead.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerOnlyLMHead.forward(self,hidden_states)
transformers.models.reformer.modeling_reformer.ReformerOnlyLMHead.forward_chunk(self,hidden_states)
transformers.models.reformer.modeling_reformer.ReformerPreTrainedModel(PreTrainedModel)
transformers.models.reformer.modeling_reformer.ReformerPreTrainedModel._init_weights(self,module)
transformers.models.reformer.modeling_reformer.ReformerPreTrainedModel.dummy_inputs(self)
transformers.models.reformer.modeling_reformer.ReformerSelfOutput(self,config)
transformers.models.reformer.modeling_reformer.ReformerSelfOutput.__init__(self,config)
transformers.models.reformer.modeling_reformer.ReformerSelfOutput.forward(self,hidden_states)
transformers.models.reformer.modeling_reformer.ReverseSort(Function)
transformers.models.reformer.modeling_reformer.ReverseSort.backward(ctx,grad_out_vectors,grad_logits)
transformers.models.reformer.modeling_reformer.ReverseSort.forward(ctx,out_vectors,logits,sorted_bucket_idx,undo_sorted_bucket_idx)
transformers.models.reformer.modeling_reformer._ReversibleFunction(Function)
transformers.models.reformer.modeling_reformer._ReversibleFunction.backward(ctx,grad_hidden_states)
transformers.models.reformer.modeling_reformer._ReversibleFunction.forward(ctx,hidden_states,layers,attention_mask,head_mask,num_hashes,all_hidden_states,all_attentions,past_buckets_states,use_cache,orig_sequence_length,output_hidden_states,output_attentions)
transformers.models.reformer.modeling_reformer._get_least_common_mult_chunk_len(config)
transformers.models.reformer.modeling_reformer._get_min_chunk_len(config)
transformers.models.reformer.modeling_reformer._stable_argsort(vector,dim)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mt5/modeling_mt5.py----------------------------------------
A:transformers.models.mt5.modeling_mt5.logger->utils.logging.get_logger(__name__)
transformers.MT5EncoderModel(T5EncoderModel)
transformers.MT5ForConditionalGeneration(T5ForConditionalGeneration)
transformers.MT5Model(T5Model)
transformers.models.mt5.modeling_mt5.MT5EncoderModel(T5EncoderModel)
transformers.models.mt5.modeling_mt5.MT5ForConditionalGeneration(T5ForConditionalGeneration)
transformers.models.mt5.modeling_mt5.MT5Model(T5Model)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mt5/configuration_mt5.py----------------------------------------
A:transformers.models.mt5.configuration_mt5.logger->utils.logging.get_logger(__name__)
transformers.MT5Config(self,vocab_size=250112,d_model=512,d_kv=64,d_ff=1024,num_layers=8,num_decoder_layers=None,num_heads=6,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='gated-gelu',is_encoder_decoder=True,use_cache=True,tokenizer_class='T5Tokenizer',tie_word_embeddings=False,pad_token_id=0,eos_token_id=1,decoder_start_token_id=0,**kwargs)
transformers.MT5Config.hidden_size(self)
transformers.MT5Config.num_attention_heads(self)
transformers.MT5Config.num_hidden_layers(self)
transformers.models.mt5.configuration_mt5.MT5Config(self,vocab_size=250112,d_model=512,d_kv=64,d_ff=1024,num_layers=8,num_decoder_layers=None,num_heads=6,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='gated-gelu',is_encoder_decoder=True,use_cache=True,tokenizer_class='T5Tokenizer',tie_word_embeddings=False,pad_token_id=0,eos_token_id=1,decoder_start_token_id=0,**kwargs)
transformers.models.mt5.configuration_mt5.MT5Config.__init__(self,vocab_size=250112,d_model=512,d_kv=64,d_ff=1024,num_layers=8,num_decoder_layers=None,num_heads=6,relative_attention_num_buckets=32,dropout_rate=0.1,layer_norm_epsilon=1e-06,initializer_factor=1.0,feed_forward_proj='gated-gelu',is_encoder_decoder=True,use_cache=True,tokenizer_class='T5Tokenizer',tie_word_embeddings=False,pad_token_id=0,eos_token_id=1,decoder_start_token_id=0,**kwargs)
transformers.models.mt5.configuration_mt5.MT5Config.hidden_size(self)
transformers.models.mt5.configuration_mt5.MT5Config.num_attention_heads(self)
transformers.models.mt5.configuration_mt5.MT5Config.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mt5/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mt5/modeling_tf_mt5.py----------------------------------------
A:transformers.models.mt5.modeling_tf_mt5.logger->utils.logging.get_logger(__name__)
transformers.TFMT5EncoderModel(TFT5EncoderModel)
transformers.TFMT5ForConditionalGeneration(TFT5ForConditionalGeneration)
transformers.TFMT5Model(TFT5Model)
transformers.models.mt5.modeling_tf_mt5.TFMT5EncoderModel(TFT5EncoderModel)
transformers.models.mt5.modeling_tf_mt5.TFMT5ForConditionalGeneration(TFT5ForConditionalGeneration)
transformers.models.mt5.modeling_tf_mt5.TFMT5Model(TFT5Model)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/modeling_flax_auto.py----------------------------------------
A:transformers.models.auto.modeling_flax_auto.logger->utils.logging.get_logger(__name__)
A:transformers.models.auto.modeling_flax_auto.FLAX_MODEL_MAPPING->OrderedDict([(RobertaConfig, FlaxRobertaModel), (BertConfig, FlaxBertModel)])
A:transformers.models.auto.modeling_flax_auto.config->configuration_auto.AutoConfig.from_pretrained(pretrained_model_name_or_path, **kwargs)
transformers.FlaxAutoModel(self)
transformers.FlaxAutoModel.from_config(cls,config)
transformers.FlaxAutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_flax_auto.FlaxAutoModel(self)
transformers.models.auto.modeling_flax_auto.FlaxAutoModel.__init__(self)
transformers.models.auto.modeling_flax_auto.FlaxAutoModel.from_config(cls,config)
transformers.models.auto.modeling_flax_auto.FlaxAutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/modeling_auto.py----------------------------------------
A:transformers.models.auto.modeling_auto.logger->utils.logging.get_logger(__name__)
A:transformers.models.auto.modeling_auto.MODEL_MAPPING->OrderedDict([(RetriBertConfig, RetriBertModel), (MT5Config, MT5Model), (T5Config, T5Model), (DistilBertConfig, DistilBertModel), (AlbertConfig, AlbertModel), (CamembertConfig, CamembertModel), (XLMRobertaConfig, XLMRobertaModel), (BartConfig, BartModel), (LongformerConfig, LongformerModel), (RobertaConfig, RobertaModel), (LayoutLMConfig, LayoutLMModel), (SqueezeBertConfig, SqueezeBertModel), (BertConfig, BertModel), (OpenAIGPTConfig, OpenAIGPTModel), (GPT2Config, GPT2Model), (MobileBertConfig, MobileBertModel), (TransfoXLConfig, TransfoXLModel), (XLNetConfig, XLNetModel), (FlaubertConfig, FlaubertModel), (FSMTConfig, FSMTModel), (XLMConfig, XLMModel), (CTRLConfig, CTRLModel), (ElectraConfig, ElectraModel), (ReformerConfig, ReformerModel), (FunnelConfig, FunnelModel), (LxmertConfig, LxmertModel), (BertGenerationConfig, BertGenerationEncoder), (DebertaConfig, DebertaModel), (DPRConfig, DPRQuestionEncoder), (XLMProphetNetConfig, XLMProphetNetModel), (ProphetNetConfig, ProphetNetModel), (MPNetConfig, MPNetModel), (TapasConfig, TapasModel)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_PRETRAINING_MAPPING->OrderedDict([(LayoutLMConfig, LayoutLMForMaskedLM), (RetriBertConfig, RetriBertModel), (T5Config, T5ForConditionalGeneration), (DistilBertConfig, DistilBertForMaskedLM), (AlbertConfig, AlbertForPreTraining), (CamembertConfig, CamembertForMaskedLM), (XLMRobertaConfig, XLMRobertaForMaskedLM), (BartConfig, BartForConditionalGeneration), (FSMTConfig, FSMTForConditionalGeneration), (LongformerConfig, LongformerForMaskedLM), (RobertaConfig, RobertaForMaskedLM), (SqueezeBertConfig, SqueezeBertForMaskedLM), (BertConfig, BertForPreTraining), (OpenAIGPTConfig, OpenAIGPTLMHeadModel), (GPT2Config, GPT2LMHeadModel), (MobileBertConfig, MobileBertForPreTraining), (TransfoXLConfig, TransfoXLLMHeadModel), (XLNetConfig, XLNetLMHeadModel), (FlaubertConfig, FlaubertWithLMHeadModel), (XLMConfig, XLMWithLMHeadModel), (CTRLConfig, CTRLLMHeadModel), (ElectraConfig, ElectraForPreTraining), (LxmertConfig, LxmertForPreTraining), (FunnelConfig, FunnelForPreTraining), (MPNetConfig, MPNetForMaskedLM), (TapasConfig, TapasForMaskedLM)])
A:transformers.models.auto.modeling_auto.MODEL_WITH_LM_HEAD_MAPPING->OrderedDict([(LayoutLMConfig, LayoutLMForMaskedLM), (T5Config, T5ForConditionalGeneration), (DistilBertConfig, DistilBertForMaskedLM), (AlbertConfig, AlbertForMaskedLM), (CamembertConfig, CamembertForMaskedLM), (XLMRobertaConfig, XLMRobertaForMaskedLM), (MarianConfig, MarianMTModel), (FSMTConfig, FSMTForConditionalGeneration), (BartConfig, BartForConditionalGeneration), (LongformerConfig, LongformerForMaskedLM), (RobertaConfig, RobertaForMaskedLM), (SqueezeBertConfig, SqueezeBertForMaskedLM), (BertConfig, BertForMaskedLM), (OpenAIGPTConfig, OpenAIGPTLMHeadModel), (GPT2Config, GPT2LMHeadModel), (MobileBertConfig, MobileBertForMaskedLM), (TransfoXLConfig, TransfoXLLMHeadModel), (XLNetConfig, XLNetLMHeadModel), (FlaubertConfig, FlaubertWithLMHeadModel), (XLMConfig, XLMWithLMHeadModel), (CTRLConfig, CTRLLMHeadModel), (ElectraConfig, ElectraForMaskedLM), (EncoderDecoderConfig, EncoderDecoderModel), (ReformerConfig, ReformerModelWithLMHead), (FunnelConfig, FunnelForMaskedLM), (MPNetConfig, MPNetForMaskedLM), (TapasConfig, TapasForMaskedLM)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_CAUSAL_LM_MAPPING->OrderedDict([(CamembertConfig, CamembertForCausalLM), (XLMRobertaConfig, XLMRobertaForCausalLM), (RobertaConfig, RobertaForCausalLM), (BertConfig, BertLMHeadModel), (OpenAIGPTConfig, OpenAIGPTLMHeadModel), (GPT2Config, GPT2LMHeadModel), (TransfoXLConfig, TransfoXLLMHeadModel), (XLNetConfig, XLNetLMHeadModel), (XLMConfig, XLMWithLMHeadModel), (CTRLConfig, CTRLLMHeadModel), (ReformerConfig, ReformerModelWithLMHead), (BertGenerationConfig, BertGenerationDecoder), (XLMProphetNetConfig, XLMProphetNetForCausalLM), (ProphetNetConfig, ProphetNetForCausalLM)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_MASKED_LM_MAPPING->OrderedDict([(LayoutLMConfig, LayoutLMForMaskedLM), (DistilBertConfig, DistilBertForMaskedLM), (AlbertConfig, AlbertForMaskedLM), (BartConfig, BartForConditionalGeneration), (CamembertConfig, CamembertForMaskedLM), (XLMRobertaConfig, XLMRobertaForMaskedLM), (LongformerConfig, LongformerForMaskedLM), (RobertaConfig, RobertaForMaskedLM), (SqueezeBertConfig, SqueezeBertForMaskedLM), (BertConfig, BertForMaskedLM), (MobileBertConfig, MobileBertForMaskedLM), (FlaubertConfig, FlaubertWithLMHeadModel), (XLMConfig, XLMWithLMHeadModel), (ElectraConfig, ElectraForMaskedLM), (ReformerConfig, ReformerForMaskedLM), (FunnelConfig, FunnelForMaskedLM), (MPNetConfig, MPNetForMaskedLM), (TapasConfig, TapasForMaskedLM)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING->OrderedDict([(MT5Config, MT5ForConditionalGeneration), (T5Config, T5ForConditionalGeneration), (PegasusConfig, PegasusForConditionalGeneration), (MarianConfig, MarianMTModel), (MBartConfig, MBartForConditionalGeneration), (BlenderbotConfig, BlenderbotForConditionalGeneration), (BartConfig, BartForConditionalGeneration), (FSMTConfig, FSMTForConditionalGeneration), (EncoderDecoderConfig, EncoderDecoderModel), (XLMProphetNetConfig, XLMProphetNetForConditionalGeneration), (ProphetNetConfig, ProphetNetForConditionalGeneration)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING->OrderedDict([(DistilBertConfig, DistilBertForSequenceClassification), (AlbertConfig, AlbertForSequenceClassification), (CamembertConfig, CamembertForSequenceClassification), (XLMRobertaConfig, XLMRobertaForSequenceClassification), (BartConfig, BartForSequenceClassification), (LongformerConfig, LongformerForSequenceClassification), (RobertaConfig, RobertaForSequenceClassification), (SqueezeBertConfig, SqueezeBertForSequenceClassification), (BertConfig, BertForSequenceClassification), (XLNetConfig, XLNetForSequenceClassification), (MobileBertConfig, MobileBertForSequenceClassification), (FlaubertConfig, FlaubertForSequenceClassification), (XLMConfig, XLMForSequenceClassification), (ElectraConfig, ElectraForSequenceClassification), (FunnelConfig, FunnelForSequenceClassification), (DebertaConfig, DebertaForSequenceClassification), (GPT2Config, GPT2ForSequenceClassification), (OpenAIGPTConfig, OpenAIGPTForSequenceClassification), (ReformerConfig, ReformerForSequenceClassification), (CTRLConfig, CTRLForSequenceClassification), (TransfoXLConfig, TransfoXLForSequenceClassification), (MPNetConfig, MPNetForSequenceClassification), (TapasConfig, TapasForSequenceClassification)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING->OrderedDict([(DistilBertConfig, DistilBertForQuestionAnswering), (AlbertConfig, AlbertForQuestionAnswering), (CamembertConfig, CamembertForQuestionAnswering), (BartConfig, BartForQuestionAnswering), (LongformerConfig, LongformerForQuestionAnswering), (XLMRobertaConfig, XLMRobertaForQuestionAnswering), (RobertaConfig, RobertaForQuestionAnswering), (SqueezeBertConfig, SqueezeBertForQuestionAnswering), (BertConfig, BertForQuestionAnswering), (XLNetConfig, XLNetForQuestionAnsweringSimple), (FlaubertConfig, FlaubertForQuestionAnsweringSimple), (MobileBertConfig, MobileBertForQuestionAnswering), (XLMConfig, XLMForQuestionAnsweringSimple), (ElectraConfig, ElectraForQuestionAnswering), (ReformerConfig, ReformerForQuestionAnswering), (FunnelConfig, FunnelForQuestionAnswering), (LxmertConfig, LxmertForQuestionAnswering), (MPNetConfig, MPNetForQuestionAnswering)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_TABLE_QUESTION_ANSWERING_MAPPING->OrderedDict([(TapasConfig, TapasForQuestionAnswering)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING->OrderedDict([(LayoutLMConfig, LayoutLMForTokenClassification), (DistilBertConfig, DistilBertForTokenClassification), (CamembertConfig, CamembertForTokenClassification), (FlaubertConfig, FlaubertForTokenClassification), (XLMConfig, XLMForTokenClassification), (XLMRobertaConfig, XLMRobertaForTokenClassification), (LongformerConfig, LongformerForTokenClassification), (RobertaConfig, RobertaForTokenClassification), (SqueezeBertConfig, SqueezeBertForTokenClassification), (BertConfig, BertForTokenClassification), (MobileBertConfig, MobileBertForTokenClassification), (XLNetConfig, XLNetForTokenClassification), (AlbertConfig, AlbertForTokenClassification), (ElectraConfig, ElectraForTokenClassification), (FlaubertConfig, FlaubertForTokenClassification), (FunnelConfig, FunnelForTokenClassification), (MPNetConfig, MPNetForTokenClassification)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_MULTIPLE_CHOICE_MAPPING->OrderedDict([(CamembertConfig, CamembertForMultipleChoice), (ElectraConfig, ElectraForMultipleChoice), (XLMRobertaConfig, XLMRobertaForMultipleChoice), (LongformerConfig, LongformerForMultipleChoice), (RobertaConfig, RobertaForMultipleChoice), (SqueezeBertConfig, SqueezeBertForMultipleChoice), (BertConfig, BertForMultipleChoice), (DistilBertConfig, DistilBertForMultipleChoice), (MobileBertConfig, MobileBertForMultipleChoice), (XLNetConfig, XLNetForMultipleChoice), (AlbertConfig, AlbertForMultipleChoice), (XLMConfig, XLMForMultipleChoice), (FlaubertConfig, FlaubertForMultipleChoice), (FunnelConfig, FunnelForMultipleChoice), (MPNetConfig, MPNetForMultipleChoice)])
A:transformers.models.auto.modeling_auto.MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING->OrderedDict([(BertConfig, BertForNextSentencePrediction), (MobileBertConfig, MobileBertForNextSentencePrediction)])
A:transformers.models.auto.modeling_auto.config->kwargs.pop('config', None)
A:transformers.models.auto.modeling_auto.(config, kwargs)->configuration_auto.AutoConfig.from_pretrained(pretrained_model_name_or_path, return_unused_kwargs=True, **kwargs)
transformers.AutoModel(self)
transformers.AutoModel.from_config(cls,config)
transformers.AutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForCausalLM(self)
transformers.AutoModelForCausalLM.from_config(cls,config)
transformers.AutoModelForCausalLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForMaskedLM(self)
transformers.AutoModelForMaskedLM.from_config(cls,config)
transformers.AutoModelForMaskedLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForMultipleChoice(self)
transformers.AutoModelForMultipleChoice.from_config(cls,config)
transformers.AutoModelForMultipleChoice.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForNextSentencePrediction(self)
transformers.AutoModelForNextSentencePrediction.from_config(cls,config)
transformers.AutoModelForNextSentencePrediction.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForPreTraining(self)
transformers.AutoModelForPreTraining.from_config(cls,config)
transformers.AutoModelForPreTraining.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForQuestionAnswering(self)
transformers.AutoModelForQuestionAnswering.from_config(cls,config)
transformers.AutoModelForQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForSeq2SeqLM(self)
transformers.AutoModelForSeq2SeqLM.from_config(cls,config)
transformers.AutoModelForSeq2SeqLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForSequenceClassification(self)
transformers.AutoModelForSequenceClassification.from_config(cls,config)
transformers.AutoModelForSequenceClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForTableQuestionAnswering(self)
transformers.AutoModelForTableQuestionAnswering.from_config(cls,config)
transformers.AutoModelForTableQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelForTokenClassification(self)
transformers.AutoModelForTokenClassification.from_config(cls,config)
transformers.AutoModelForTokenClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.AutoModelWithLMHead(self)
transformers.AutoModelWithLMHead.from_config(cls,config)
transformers.AutoModelWithLMHead.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModel(self)
transformers.models.auto.modeling_auto.AutoModel.__init__(self)
transformers.models.auto.modeling_auto.AutoModel.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForCausalLM(self)
transformers.models.auto.modeling_auto.AutoModelForCausalLM.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForCausalLM.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForCausalLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForMaskedLM(self)
transformers.models.auto.modeling_auto.AutoModelForMaskedLM.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForMaskedLM.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForMaskedLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForMultipleChoice(self)
transformers.models.auto.modeling_auto.AutoModelForMultipleChoice.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForMultipleChoice.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForMultipleChoice.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForNextSentencePrediction(self)
transformers.models.auto.modeling_auto.AutoModelForNextSentencePrediction.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForNextSentencePrediction.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForNextSentencePrediction.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForPreTraining(self)
transformers.models.auto.modeling_auto.AutoModelForPreTraining.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForPreTraining.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForPreTraining.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForQuestionAnswering(self)
transformers.models.auto.modeling_auto.AutoModelForQuestionAnswering.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForQuestionAnswering.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForSeq2SeqLM(self)
transformers.models.auto.modeling_auto.AutoModelForSeq2SeqLM.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForSeq2SeqLM.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForSeq2SeqLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForSequenceClassification(self)
transformers.models.auto.modeling_auto.AutoModelForSequenceClassification.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForSequenceClassification.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForSequenceClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForTableQuestionAnswering(self)
transformers.models.auto.modeling_auto.AutoModelForTableQuestionAnswering.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForTableQuestionAnswering.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForTableQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelForTokenClassification(self)
transformers.models.auto.modeling_auto.AutoModelForTokenClassification.__init__(self)
transformers.models.auto.modeling_auto.AutoModelForTokenClassification.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelForTokenClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_auto.AutoModelWithLMHead(self)
transformers.models.auto.modeling_auto.AutoModelWithLMHead.__init__(self)
transformers.models.auto.modeling_auto.AutoModelWithLMHead.from_config(cls,config)
transformers.models.auto.modeling_auto.AutoModelWithLMHead.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/configuration_auto.py----------------------------------------
A:transformers.models.auto.configuration_auto.ALL_PRETRAINED_CONFIG_ARCHIVE_MAP->dict(((key, value) for pretrained_map in [BERT_PRETRAINED_CONFIG_ARCHIVE_MAP, BART_PRETRAINED_CONFIG_ARCHIVE_MAP, BLENDERBOT_PRETRAINED_CONFIG_ARCHIVE_MAP, MBART_PRETRAINED_CONFIG_ARCHIVE_MAP, OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP, TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP, GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP, CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP, XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP, XLM_PRETRAINED_CONFIG_ARCHIVE_MAP, ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP, DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, T5_PRETRAINED_CONFIG_ARCHIVE_MAP, XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP, FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, FSMT_PRETRAINED_CONFIG_ARCHIVE_MAP, ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP, LONGFORMER_PRETRAINED_CONFIG_ARCHIVE_MAP, RETRIBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, FUNNEL_PRETRAINED_CONFIG_ARCHIVE_MAP, LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP, LAYOUTLM_PRETRAINED_CONFIG_ARCHIVE_MAP, DPR_PRETRAINED_CONFIG_ARCHIVE_MAP, DEBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP, SQUEEZEBERT_PRETRAINED_CONFIG_ARCHIVE_MAP, XLM_PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP, PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP, MPNET_PRETRAINED_CONFIG_ARCHIVE_MAP, TAPAS_PRETRAINED_CONFIG_ARCHIVE_MAP] for (key, value) in pretrained_map.items()))
A:transformers.models.auto.configuration_auto.CONFIG_MAPPING->OrderedDict([('retribert', RetriBertConfig), ('mt5', MT5Config), ('t5', T5Config), ('mobilebert', MobileBertConfig), ('distilbert', DistilBertConfig), ('albert', AlbertConfig), ('bert-generation', BertGenerationConfig), ('camembert', CamembertConfig), ('xlm-roberta', XLMRobertaConfig), ('pegasus', PegasusConfig), ('marian', MarianConfig), ('mbart', MBartConfig), ('mpnet', MPNetConfig), ('bart', BartConfig), ('blenderbot', BlenderbotConfig), ('reformer', ReformerConfig), ('longformer', LongformerConfig), ('roberta', RobertaConfig), ('deberta', DebertaConfig), ('flaubert', FlaubertConfig), ('fsmt', FSMTConfig), ('squeezebert', SqueezeBertConfig), ('bert', BertConfig), ('openai-gpt', OpenAIGPTConfig), ('gpt2', GPT2Config), ('transfo-xl', TransfoXLConfig), ('xlnet', XLNetConfig), ('xlm-prophetnet', XLMProphetNetConfig), ('prophetnet', ProphetNetConfig), ('xlm', XLMConfig), ('ctrl', CTRLConfig), ('electra', ElectraConfig), ('encoder-decoder', EncoderDecoderConfig), ('funnel', FunnelConfig), ('lxmert', LxmertConfig), ('dpr', DPRConfig), ('layoutlm', LayoutLMConfig), ('rag', RagConfig), ('tapas', TapasConfig)])
A:transformers.models.auto.configuration_auto.MODEL_NAMES_MAPPING->OrderedDict([('retribert', 'RetriBERT'), ('t5', 'T5'), ('mobilebert', 'MobileBERT'), ('distilbert', 'DistilBERT'), ('albert', 'ALBERT'), ('bert-generation', 'Bert Generation'), ('camembert', 'CamemBERT'), ('xlm-roberta', 'XLM-RoBERTa'), ('pegasus', 'Pegasus'), ('blenderbot', 'Blenderbot'), ('marian', 'Marian'), ('mbart', 'mBART'), ('bart', 'BART'), ('reformer', 'Reformer'), ('longformer', 'Longformer'), ('roberta', 'RoBERTa'), ('flaubert', 'FlauBERT'), ('fsmt', 'FairSeq Machine-Translation'), ('squeezebert', 'SqueezeBERT'), ('bert', 'BERT'), ('openai-gpt', 'OpenAI GPT'), ('gpt2', 'OpenAI GPT-2'), ('transfo-xl', 'Transformer-XL'), ('xlnet', 'XLNet'), ('xlm', 'XLM'), ('ctrl', 'CTRL'), ('electra', 'ELECTRA'), ('encoder-decoder', 'Encoder decoder'), ('funnel', 'Funnel Transformer'), ('lxmert', 'LXMERT'), ('deberta', 'DeBERTa'), ('layoutlm', 'LayoutLM'), ('dpr', 'DPR'), ('rag', 'RAG'), ('xlm-prophetnet', 'XLMProphetNet'), ('prophetnet', 'ProphetNet'), ('mt5', 'mT5'), ('mpnet', 'MPNet'), ('tapas', 'TAPAS')])
A:transformers.models.auto.configuration_auto.lines->'\n'.join(lines).split('\n')
A:transformers.models.auto.configuration_auto.lines[i]->_list_model_options(indent, config_to_class=config_to_class, use_model_types=use_model_types)
A:transformers.models.auto.configuration_auto.docstrings->'\n'.join(lines)
A:transformers.models.auto.configuration_auto.(config_dict, _)->configuration_utils.PretrainedConfig.get_config_dict(pretrained_model_name_or_path, **kwargs)
transformers.AutoConfig(self)
transformers.AutoConfig.for_model(cls,model_type:str,*args,**kwargs)
transformers.AutoConfig.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.models.auto.configuration_auto.AutoConfig(self)
transformers.models.auto.configuration_auto.AutoConfig.__init__(self)
transformers.models.auto.configuration_auto.AutoConfig.for_model(cls,model_type:str,*args,**kwargs)
transformers.models.auto.configuration_auto.AutoConfig.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.models.auto.configuration_auto._list_model_options(indent,config_to_class=None,use_model_types=True)
transformers.models.auto.configuration_auto.replace_list_option_in_docstrings(config_to_class=None,use_model_types=True)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/modeling_tf_auto.py----------------------------------------
A:transformers.models.auto.modeling_tf_auto.logger->utils.logging.get_logger(__name__)
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_MAPPING->OrderedDict([(LxmertConfig, TFLxmertModel), (MT5Config, TFMT5Model), (T5Config, TFT5Model), (DistilBertConfig, TFDistilBertModel), (AlbertConfig, TFAlbertModel), (BartConfig, TFBartModel), (CamembertConfig, TFCamembertModel), (XLMRobertaConfig, TFXLMRobertaModel), (LongformerConfig, TFLongformerModel), (RobertaConfig, TFRobertaModel), (BertConfig, TFBertModel), (OpenAIGPTConfig, TFOpenAIGPTModel), (GPT2Config, TFGPT2Model), (MobileBertConfig, TFMobileBertModel), (TransfoXLConfig, TFTransfoXLModel), (XLNetConfig, TFXLNetModel), (FlaubertConfig, TFFlaubertModel), (XLMConfig, TFXLMModel), (CTRLConfig, TFCTRLModel), (ElectraConfig, TFElectraModel), (FunnelConfig, TFFunnelModel), (DPRConfig, TFDPRQuestionEncoder), (MPNetConfig, TFMPNetModel)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_PRETRAINING_MAPPING->OrderedDict([(LxmertConfig, TFLxmertForPreTraining), (T5Config, TFT5ForConditionalGeneration), (DistilBertConfig, TFDistilBertForMaskedLM), (AlbertConfig, TFAlbertForPreTraining), (BartConfig, TFBartForConditionalGeneration), (CamembertConfig, TFCamembertForMaskedLM), (XLMRobertaConfig, TFXLMRobertaForMaskedLM), (RobertaConfig, TFRobertaForMaskedLM), (BertConfig, TFBertForPreTraining), (OpenAIGPTConfig, TFOpenAIGPTLMHeadModel), (GPT2Config, TFGPT2LMHeadModel), (MobileBertConfig, TFMobileBertForPreTraining), (TransfoXLConfig, TFTransfoXLLMHeadModel), (XLNetConfig, TFXLNetLMHeadModel), (FlaubertConfig, TFFlaubertWithLMHeadModel), (XLMConfig, TFXLMWithLMHeadModel), (CTRLConfig, TFCTRLLMHeadModel), (ElectraConfig, TFElectraForPreTraining), (FunnelConfig, TFFunnelForPreTraining), (MPNetConfig, TFMPNetForMaskedLM)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_WITH_LM_HEAD_MAPPING->OrderedDict([(T5Config, TFT5ForConditionalGeneration), (DistilBertConfig, TFDistilBertForMaskedLM), (AlbertConfig, TFAlbertForMaskedLM), (MarianConfig, TFMarianMTModel), (BartConfig, TFBartForConditionalGeneration), (CamembertConfig, TFCamembertForMaskedLM), (XLMRobertaConfig, TFXLMRobertaForMaskedLM), (LongformerConfig, TFLongformerForMaskedLM), (RobertaConfig, TFRobertaForMaskedLM), (BertConfig, TFBertForMaskedLM), (OpenAIGPTConfig, TFOpenAIGPTLMHeadModel), (GPT2Config, TFGPT2LMHeadModel), (MobileBertConfig, TFMobileBertForMaskedLM), (TransfoXLConfig, TFTransfoXLLMHeadModel), (XLNetConfig, TFXLNetLMHeadModel), (FlaubertConfig, TFFlaubertWithLMHeadModel), (XLMConfig, TFXLMWithLMHeadModel), (CTRLConfig, TFCTRLLMHeadModel), (ElectraConfig, TFElectraForMaskedLM), (FunnelConfig, TFFunnelForMaskedLM), (MPNetConfig, TFMPNetForMaskedLM)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_CAUSAL_LM_MAPPING->OrderedDict([(BertConfig, TFBertLMHeadModel), (OpenAIGPTConfig, TFOpenAIGPTLMHeadModel), (GPT2Config, TFGPT2LMHeadModel), (TransfoXLConfig, TFTransfoXLLMHeadModel), (XLNetConfig, TFXLNetLMHeadModel), (XLMConfig, TFXLMWithLMHeadModel), (CTRLConfig, TFCTRLLMHeadModel)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_MASKED_LM_MAPPING->OrderedDict([(DistilBertConfig, TFDistilBertForMaskedLM), (AlbertConfig, TFAlbertForMaskedLM), (CamembertConfig, TFCamembertForMaskedLM), (XLMRobertaConfig, TFXLMRobertaForMaskedLM), (LongformerConfig, TFLongformerForMaskedLM), (RobertaConfig, TFRobertaForMaskedLM), (BertConfig, TFBertForMaskedLM), (MobileBertConfig, TFMobileBertForMaskedLM), (FlaubertConfig, TFFlaubertWithLMHeadModel), (XLMConfig, TFXLMWithLMHeadModel), (ElectraConfig, TFElectraForMaskedLM), (FunnelConfig, TFFunnelForMaskedLM), (MPNetConfig, TFMPNetForMaskedLM)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING->OrderedDict([(MT5Config, TFMT5ForConditionalGeneration), (T5Config, TFT5ForConditionalGeneration), (MarianConfig, TFMarianMTModel), (MBartConfig, TFMBartForConditionalGeneration), (PegasusConfig, TFPegasusForConditionalGeneration), (BlenderbotConfig, TFBlenderbotForConditionalGeneration), (BartConfig, TFBartForConditionalGeneration)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING->OrderedDict([(DistilBertConfig, TFDistilBertForSequenceClassification), (AlbertConfig, TFAlbertForSequenceClassification), (CamembertConfig, TFCamembertForSequenceClassification), (XLMRobertaConfig, TFXLMRobertaForSequenceClassification), (LongformerConfig, TFLongformerForSequenceClassification), (RobertaConfig, TFRobertaForSequenceClassification), (BertConfig, TFBertForSequenceClassification), (XLNetConfig, TFXLNetForSequenceClassification), (MobileBertConfig, TFMobileBertForSequenceClassification), (FlaubertConfig, TFFlaubertForSequenceClassification), (XLMConfig, TFXLMForSequenceClassification), (ElectraConfig, TFElectraForSequenceClassification), (FunnelConfig, TFFunnelForSequenceClassification), (GPT2Config, TFGPT2ForSequenceClassification), (MPNetConfig, TFMPNetForSequenceClassification), (OpenAIGPTConfig, TFOpenAIGPTForSequenceClassification)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_QUESTION_ANSWERING_MAPPING->OrderedDict([(DistilBertConfig, TFDistilBertForQuestionAnswering), (AlbertConfig, TFAlbertForQuestionAnswering), (CamembertConfig, TFCamembertForQuestionAnswering), (XLMRobertaConfig, TFXLMRobertaForQuestionAnswering), (LongformerConfig, TFLongformerForQuestionAnswering), (RobertaConfig, TFRobertaForQuestionAnswering), (BertConfig, TFBertForQuestionAnswering), (XLNetConfig, TFXLNetForQuestionAnsweringSimple), (MobileBertConfig, TFMobileBertForQuestionAnswering), (FlaubertConfig, TFFlaubertForQuestionAnsweringSimple), (XLMConfig, TFXLMForQuestionAnsweringSimple), (ElectraConfig, TFElectraForQuestionAnswering), (FunnelConfig, TFFunnelForQuestionAnswering), (MPNetConfig, TFMPNetForQuestionAnswering)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING->OrderedDict([(DistilBertConfig, TFDistilBertForTokenClassification), (AlbertConfig, TFAlbertForTokenClassification), (CamembertConfig, TFCamembertForTokenClassification), (FlaubertConfig, TFFlaubertForTokenClassification), (XLMConfig, TFXLMForTokenClassification), (XLMRobertaConfig, TFXLMRobertaForTokenClassification), (LongformerConfig, TFLongformerForTokenClassification), (RobertaConfig, TFRobertaForTokenClassification), (BertConfig, TFBertForTokenClassification), (MobileBertConfig, TFMobileBertForTokenClassification), (XLNetConfig, TFXLNetForTokenClassification), (ElectraConfig, TFElectraForTokenClassification), (FunnelConfig, TFFunnelForTokenClassification), (MPNetConfig, TFMPNetForTokenClassification)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_MULTIPLE_CHOICE_MAPPING->OrderedDict([(CamembertConfig, TFCamembertForMultipleChoice), (XLMConfig, TFXLMForMultipleChoice), (XLMRobertaConfig, TFXLMRobertaForMultipleChoice), (LongformerConfig, TFLongformerForMultipleChoice), (RobertaConfig, TFRobertaForMultipleChoice), (BertConfig, TFBertForMultipleChoice), (DistilBertConfig, TFDistilBertForMultipleChoice), (MobileBertConfig, TFMobileBertForMultipleChoice), (XLNetConfig, TFXLNetForMultipleChoice), (FlaubertConfig, TFFlaubertForMultipleChoice), (AlbertConfig, TFAlbertForMultipleChoice), (ElectraConfig, TFElectraForMultipleChoice), (FunnelConfig, TFFunnelForMultipleChoice), (MPNetConfig, TFMPNetForMultipleChoice)])
A:transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING->OrderedDict([(BertConfig, TFBertForNextSentencePrediction), (MobileBertConfig, TFMobileBertForNextSentencePrediction)])
A:transformers.models.auto.modeling_tf_auto.config->kwargs.pop('config', None)
A:transformers.models.auto.modeling_tf_auto.(config, kwargs)->configuration_auto.AutoConfig.from_pretrained(pretrained_model_name_or_path, return_unused_kwargs=True, **kwargs)
transformers.TFAutoModel(self)
transformers.TFAutoModel.from_config(cls,config)
transformers.TFAutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForCausalLM(self)
transformers.TFAutoModelForCausalLM.from_config(cls,config)
transformers.TFAutoModelForCausalLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForMaskedLM(self)
transformers.TFAutoModelForMaskedLM.from_config(cls,config)
transformers.TFAutoModelForMaskedLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForMultipleChoice(self)
transformers.TFAutoModelForMultipleChoice.from_config(cls,config)
transformers.TFAutoModelForMultipleChoice.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForNextSentencePrediction(self)
transformers.TFAutoModelForNextSentencePrediction.from_config(cls,config)
transformers.TFAutoModelForNextSentencePrediction.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForPreTraining(self)
transformers.TFAutoModelForPreTraining.from_config(cls,config)
transformers.TFAutoModelForPreTraining.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForQuestionAnswering(self)
transformers.TFAutoModelForQuestionAnswering.from_config(cls,config)
transformers.TFAutoModelForQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForSeq2SeqLM(self)
transformers.TFAutoModelForSeq2SeqLM.from_config(cls,config)
transformers.TFAutoModelForSeq2SeqLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForSequenceClassification(self)
transformers.TFAutoModelForSequenceClassification.from_config(cls,config)
transformers.TFAutoModelForSequenceClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelForTokenClassification(self)
transformers.TFAutoModelForTokenClassification.from_config(cls,config)
transformers.TFAutoModelForTokenClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.TFAutoModelWithLMHead(self)
transformers.TFAutoModelWithLMHead.from_config(cls,config)
transformers.TFAutoModelWithLMHead.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModel(self)
transformers.models.auto.modeling_tf_auto.TFAutoModel.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModel.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModel.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForCausalLM(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForCausalLM.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForCausalLM.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForCausalLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMaskedLM(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMaskedLM.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMaskedLM.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMaskedLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMultipleChoice(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMultipleChoice.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMultipleChoice.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForMultipleChoice.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForNextSentencePrediction(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForNextSentencePrediction.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForNextSentencePrediction.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForNextSentencePrediction.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForPreTraining(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForPreTraining.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForPreTraining.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForPreTraining.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelForTokenClassification(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForTokenClassification.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelForTokenClassification.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelForTokenClassification.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)
transformers.models.auto.modeling_tf_auto.TFAutoModelWithLMHead(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelWithLMHead.__init__(self)
transformers.models.auto.modeling_tf_auto.TFAutoModelWithLMHead.from_config(cls,config)
transformers.models.auto.modeling_tf_auto.TFAutoModelWithLMHead.from_pretrained(cls,pretrained_model_name_or_path,*model_args,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/auto/tokenization_auto.py----------------------------------------
A:transformers.models.auto.tokenization_auto.logger->utils.logging.get_logger(__name__)
A:transformers.models.auto.tokenization_auto.TOKENIZER_MAPPING->OrderedDict([(RetriBertConfig, (RetriBertTokenizer, RetriBertTokenizerFast)), (T5Config, (T5Tokenizer, T5TokenizerFast)), (MT5Config, (MT5Tokenizer, MT5TokenizerFast)), (MobileBertConfig, (MobileBertTokenizer, MobileBertTokenizerFast)), (DistilBertConfig, (DistilBertTokenizer, DistilBertTokenizerFast)), (AlbertConfig, (AlbertTokenizer, AlbertTokenizerFast)), (CamembertConfig, (CamembertTokenizer, CamembertTokenizerFast)), (PegasusConfig, (PegasusTokenizer, PegasusTokenizerFast)), (MBartConfig, (MBartTokenizer, MBartTokenizerFast)), (XLMRobertaConfig, (XLMRobertaTokenizer, XLMRobertaTokenizerFast)), (MarianConfig, (MarianTokenizer, None)), (BlenderbotConfig, (BlenderbotSmallTokenizer, None)), (LongformerConfig, (LongformerTokenizer, LongformerTokenizerFast)), (BartConfig, (BarthezTokenizer, BarthezTokenizerFast)), (BartConfig, (BartTokenizer, BartTokenizerFast)), (LongformerConfig, (LongformerTokenizer, LongformerTokenizerFast)), (RobertaConfig, (RobertaTokenizer, RobertaTokenizerFast)), (ReformerConfig, (ReformerTokenizer, ReformerTokenizerFast)), (ElectraConfig, (ElectraTokenizer, ElectraTokenizerFast)), (FunnelConfig, (FunnelTokenizer, FunnelTokenizerFast)), (LxmertConfig, (LxmertTokenizer, LxmertTokenizerFast)), (LayoutLMConfig, (LayoutLMTokenizer, LayoutLMTokenizerFast)), (DPRConfig, (DPRQuestionEncoderTokenizer, DPRQuestionEncoderTokenizerFast)), (SqueezeBertConfig, (SqueezeBertTokenizer, SqueezeBertTokenizerFast)), (BertConfig, (BertTokenizer, BertTokenizerFast)), (OpenAIGPTConfig, (OpenAIGPTTokenizer, OpenAIGPTTokenizerFast)), (GPT2Config, (GPT2Tokenizer, GPT2TokenizerFast)), (TransfoXLConfig, (TransfoXLTokenizer, None)), (XLNetConfig, (XLNetTokenizer, XLNetTokenizerFast)), (FlaubertConfig, (FlaubertTokenizer, None)), (XLMConfig, (XLMTokenizer, None)), (CTRLConfig, (CTRLTokenizer, None)), (FSMTConfig, (FSMTTokenizer, None)), (BertGenerationConfig, (BertGenerationTokenizer, None)), (DebertaConfig, (DebertaTokenizer, None)), (RagConfig, (RagTokenizer, None)), (XLMProphetNetConfig, (XLMProphetNetTokenizer, None)), (ProphetNetConfig, (ProphetNetTokenizer, None)), (MPNetConfig, (MPNetTokenizer, MPNetTokenizerFast)), (TapasConfig, (TapasTokenizer, None))])
A:transformers.models.auto.tokenization_auto.config->configuration_auto.AutoConfig.from_pretrained(pretrained_model_name_or_path, **kwargs)
A:transformers.models.auto.tokenization_auto.use_fast->kwargs.pop('use_fast', True)
A:transformers.models.auto.tokenization_auto.tokenizer_class->tokenizer_class_from_name(tokenizer_class_candidate)
transformers.AutoTokenizer(self)
transformers.AutoTokenizer.from_pretrained(cls,pretrained_model_name_or_path,*inputs,**kwargs)
transformers.models.auto.tokenization_auto.AutoTokenizer(self)
transformers.models.auto.tokenization_auto.AutoTokenizer.__init__(self)
transformers.models.auto.tokenization_auto.AutoTokenizer.from_pretrained(cls,pretrained_model_name_or_path,*inputs,**kwargs)
transformers.models.auto.tokenization_auto.tokenizer_class_from_name(class_name:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/convert_electra_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.config->transformers.ElectraConfig.from_json_file(config_file)
A:transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.model->ElectraForMaskedLM(config)
A:transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,config_file,pytorch_dump_path,discriminator_or_generator)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/configuration_electra.py----------------------------------------
A:transformers.models.electra.configuration_electra.logger->utils.logging.get_logger(__name__)
transformers.ElectraConfig(self,vocab_size=30522,embedding_size=128,hidden_size=256,num_hidden_layers=12,num_attention_heads=4,intermediate_size=1024,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,summary_type='first',summary_use_proj=True,summary_activation='gelu',summary_last_dropout=0.1,pad_token_id=0,position_embedding_type='absolute',**kwargs)
transformers.models.electra.configuration_electra.ElectraConfig(self,vocab_size=30522,embedding_size=128,hidden_size=256,num_hidden_layers=12,num_attention_heads=4,intermediate_size=1024,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,summary_type='first',summary_use_proj=True,summary_activation='gelu',summary_last_dropout=0.1,pad_token_id=0,position_embedding_type='absolute',**kwargs)
transformers.models.electra.configuration_electra.ElectraConfig.__init__(self,vocab_size=30522,embedding_size=128,hidden_size=256,num_hidden_layers=12,num_attention_heads=4,intermediate_size=1024,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,summary_type='first',summary_use_proj=True,summary_activation='gelu',summary_last_dropout=0.1,pad_token_id=0,position_embedding_type='absolute',**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/modeling_tf_electra.py----------------------------------------
A:transformers.models.electra.modeling_tf_electra.logger->utils.logging.get_logger(__name__)
A:transformers.models.electra.modeling_tf_electra.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.electra.modeling_tf_electra.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.electra.modeling_tf_electra.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.electra.modeling_tf_electra.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.electra.modeling_tf_electra.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.electra.modeling_tf_electra.x->self.out_proj(x)
A:transformers.models.electra.modeling_tf_electra.mixed_query_layer->self.query(hidden_states)
A:transformers.models.electra.modeling_tf_electra.mixed_key_layer->self.key(hidden_states)
A:transformers.models.electra.modeling_tf_electra.mixed_value_layer->self.value(hidden_states)
A:transformers.models.electra.modeling_tf_electra.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.electra.modeling_tf_electra.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.electra.modeling_tf_electra.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.electra.modeling_tf_electra.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.electra.modeling_tf_electra.dk->tensorflow.cast(shape_list(key_layer)[-1], attention_scores.dtype)
A:transformers.models.electra.modeling_tf_electra.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.electra.modeling_tf_electra.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.electra.modeling_tf_electra.self.dense->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='dense')
A:transformers.models.electra.modeling_tf_electra.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.electra.modeling_tf_electra.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.electra.modeling_tf_electra.self.self_attention->TFElectraSelfAttention(config, name='self')
A:transformers.models.electra.modeling_tf_electra.self.dense_output->TFElectraSelfOutput(config, name='output')
A:transformers.models.electra.modeling_tf_electra.self_outputs->self.self_attention(input_tensor, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.electra.modeling_tf_electra.attention_output->self.dense_output(self_outputs[0], input_tensor, training=training)
A:transformers.models.electra.modeling_tf_electra.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.electra.modeling_tf_electra.self.attention->TFElectraAttention(config, name='attention')
A:transformers.models.electra.modeling_tf_electra.self.intermediate->TFElectraIntermediate(config, name='intermediate')
A:transformers.models.electra.modeling_tf_electra.self.bert_output->TFElectraOutput(config, name='output')
A:transformers.models.electra.modeling_tf_electra.attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.electra.modeling_tf_electra.intermediate_output->self.intermediate(attention_output)
A:transformers.models.electra.modeling_tf_electra.layer_output->self.bert_output(intermediate_output, attention_output, training=training)
A:transformers.models.electra.modeling_tf_electra.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions, training=training)
A:transformers.models.electra.modeling_tf_electra.pooled_output->self.dense(first_token_tensor)
A:transformers.models.electra.modeling_tf_electra.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.embedding_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.electra.modeling_tf_electra.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.embedding_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.electra.modeling_tf_electra.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.embedding_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.electra.modeling_tf_electra.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.electra.modeling_tf_electra.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.electra.modeling_tf_electra.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.electra.modeling_tf_electra.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.electra.modeling_tf_electra.token_type_embeddings->tensorflow.cast(self.token_type_embeddings(token_type_ids), inputs_embeds.dtype)
A:transformers.models.electra.modeling_tf_electra.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.electra.modeling_tf_electra.logits->self.qa_outputs(discriminator_sequence_output)
A:transformers.models.electra.modeling_tf_electra.self.dense_prediction->tensorflow.keras.layers.Dense(1, name='dense_prediction')
A:transformers.models.electra.modeling_tf_electra.self.embeddings->TFElectraEmbeddings(config, name='embeddings')
A:transformers.models.electra.modeling_tf_electra.self.embeddings_project->tensorflow.keras.layers.Dense(config.hidden_size, name='embeddings_project')
A:transformers.models.electra.modeling_tf_electra.self.encoder->TFElectraEncoder(config, name='encoder')
A:transformers.models.electra.modeling_tf_electra.attention_mask->tensorflow.fill(input_shape, 1)
A:transformers.models.electra.modeling_tf_electra.extended_attention_mask->self.get_extended_attention_mask(inputs['attention_mask'], input_shape, hidden_states.dtype)
A:transformers.models.electra.modeling_tf_electra.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.electra.modeling_tf_electra.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.electra.modeling_tf_electra.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.electra.modeling_tf_electra.inputs['head_mask']->self.get_head_mask(inputs['head_mask'])
A:transformers.models.electra.modeling_tf_electra.self.electra->TFElectraMainLayer(config, name='electra')
A:transformers.models.electra.modeling_tf_electra.outputs->self.electra(flat_input_ids, flat_attention_mask, flat_token_type_ids, flat_position_ids, inputs['head_mask'], flat_inputs_embeds, inputs['output_attentions'], inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.electra.modeling_tf_electra.self.discriminator_predictions->TFElectraDiscriminatorPredictions(config, name='discriminator_predictions')
A:transformers.models.electra.modeling_tf_electra.discriminator_hidden_states->self.electra(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.electra.modeling_tf_electra.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.electra.modeling_tf_electra.self.generator_predictions->TFElectraGeneratorPredictions(config, name='generator_predictions')
A:transformers.models.electra.modeling_tf_electra.self.activation->get_tf_activation(config.hidden_act)
A:transformers.models.electra.modeling_tf_electra.self.generator_lm_head->TFElectraMaskedLMHead(config, self.electra.embeddings, name='generator_lm_head')
A:transformers.models.electra.modeling_tf_electra.generator_hidden_states->self.electra(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.electra.modeling_tf_electra.prediction_scores->self.generator_lm_head(prediction_scores, training=inputs['training'])
A:transformers.models.electra.modeling_tf_electra.self.out_proj->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='out_proj')
A:transformers.models.electra.modeling_tf_electra.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.electra.modeling_tf_electra.self.sequence_summary->TFSequenceSummary(config, initializer_range=config.initializer_range, name='sequence_summary')
A:transformers.models.electra.modeling_tf_electra.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.electra.modeling_tf_electra.discriminator_sequence_output->self.dropout(discriminator_sequence_output)
A:transformers.models.electra.modeling_tf_electra.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.electra.modeling_tf_electra.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.electra.modeling_tf_electra.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.electra.modeling_tf_electra.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.electra.modeling_tf_electra.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFElectraForMaskedLM(self,config,**kwargs)
transformers.TFElectraForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFElectraForMaskedLM.get_output_embeddings(self)
transformers.TFElectraForMaskedLM.get_output_layer_with_bias(self)
transformers.TFElectraForMaskedLM.get_prefix_bias_name(self)
transformers.TFElectraForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFElectraForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFElectraForMultipleChoice.dummy_inputs(self)
transformers.TFElectraForPreTraining(self,config,**kwargs)
transformers.TFElectraForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFElectraForPreTrainingOutput(ModelOutput)
transformers.TFElectraForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFElectraForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFElectraForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFElectraForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFElectraForTokenClassification(self,config,**kwargs)
transformers.TFElectraForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFElectraModel(self,config,*inputs,**kwargs)
transformers.TFElectraModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFElectraPreTrainedModel(TFPreTrainedModel)
transformers.models.electra.modeling_tf_electra.TFElectraAttention(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraAttention.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraAttention.call(self,input_tensor,attention_mask,head_mask,output_attentions,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraAttention.prune_heads(self,heads)
transformers.models.electra.modeling_tf_electra.TFElectraClassificationHead(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraClassificationHead.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraClassificationHead.call(self,inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraDiscriminatorPredictions(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraDiscriminatorPredictions.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraDiscriminatorPredictions.call(self,discriminator_hidden_states,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings._linear(self,inputs)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings.build(self,input_shape)
transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.electra.modeling_tf_electra.TFElectraEncoder(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraEncoder.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraEncoder.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM.get_output_embeddings(self)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM.get_output_layer_with_bias(self)
transformers.models.electra.modeling_tf_electra.TFElectraForMaskedLM.get_prefix_bias_name(self)
transformers.models.electra.modeling_tf_electra.TFElectraForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForMultipleChoice.dummy_inputs(self)
transformers.models.electra.modeling_tf_electra.TFElectraForPreTraining(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForPreTraining.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForPreTrainingOutput(ModelOutput)
transformers.models.electra.modeling_tf_electra.TFElectraForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForTokenClassification(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForTokenClassification.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraGeneratorPredictions(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraGeneratorPredictions.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraGeneratorPredictions.call(self,generator_hidden_states,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraIntermediate(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraIntermediate.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraIntermediate.call(self,hidden_states)
transformers.models.electra.modeling_tf_electra.TFElectraLayer(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraLayer.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer._prune_heads(self,heads_to_prune)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.get_extended_attention_mask(self,attention_mask,input_shape,dtype)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.get_head_mask(self,head_mask)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.get_input_embeddings(self)
transformers.models.electra.modeling_tf_electra.TFElectraMainLayer.set_input_embeddings(self,value)
transformers.models.electra.modeling_tf_electra.TFElectraMaskedLMHead(self,config,input_embeddings,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraMaskedLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraMaskedLMHead.build(self,input_shape)
transformers.models.electra.modeling_tf_electra.TFElectraMaskedLMHead.call(self,hidden_states,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraModel(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraModel.__init__(self,config,*inputs,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraOutput(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraOutput.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraPooler(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraPooler.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraPooler.call(self,hidden_states)
transformers.models.electra.modeling_tf_electra.TFElectraPreTrainedModel(TFPreTrainedModel)
transformers.models.electra.modeling_tf_electra.TFElectraSelfAttention(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraSelfAttention.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraSelfAttention.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.electra.modeling_tf_electra.TFElectraSelfAttention.transpose_for_scores(self,x,batch_size)
transformers.models.electra.modeling_tf_electra.TFElectraSelfOutput(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraSelfOutput.__init__(self,config,**kwargs)
transformers.models.electra.modeling_tf_electra.TFElectraSelfOutput.call(self,hidden_states,input_tensor,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/modeling_electra.py----------------------------------------
A:transformers.models.electra.modeling_electra.logger->utils.logging.get_logger(__name__)
A:transformers.models.electra.modeling_electra.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.electra.modeling_electra.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.electra.modeling_electra.array->numpy.transpose(array)
A:transformers.models.electra.modeling_electra.name->name.split('/').split('/')
A:transformers.models.electra.modeling_electra.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.electra.modeling_electra.pointer->getattr(pointer, 'weight')
A:transformers.models.electra.modeling_electra.num->int(scope_names[1])
A:transformers.models.electra.modeling_electra.pointer.data->torch.from_numpy(array)
A:transformers.models.electra.modeling_electra.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.embedding_size, padding_idx=config.pad_token_id)
A:transformers.models.electra.modeling_electra.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.embedding_size)
A:transformers.models.electra.modeling_electra.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.embedding_size)
A:transformers.models.electra.modeling_electra.self.LayerNorm->torch.nn.LayerNorm(config.embedding_size)
A:transformers.models.electra.modeling_electra.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.electra.modeling_electra.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.electra.modeling_electra.input_shape->input_ids.size()
A:transformers.models.electra.modeling_electra.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.electra.modeling_electra.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.electra.modeling_electra.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.electra.modeling_electra.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.electra.modeling_electra.embeddings->self.dropout(embeddings)
A:transformers.models.electra.modeling_electra.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.electra.modeling_electra.self.query->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.electra.modeling_electra.self.key->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.electra.modeling_electra.self.value->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.electra.modeling_electra.self.distance_embedding->torch.nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)
A:transformers.models.electra.modeling_electra.x->self.out_proj(x)
A:transformers.models.electra.modeling_electra.mixed_query_layer->self.query(hidden_states)
A:transformers.models.electra.modeling_electra.mixed_key_layer->self.key(hidden_states)
A:transformers.models.electra.modeling_electra.mixed_value_layer->self.value(hidden_states)
A:transformers.models.electra.modeling_electra.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.electra.modeling_electra.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.electra.modeling_electra.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.electra.modeling_electra.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.electra.modeling_electra.position_ids_l->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)
A:transformers.models.electra.modeling_electra.position_ids_r->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)
A:transformers.models.electra.modeling_electra.positional_embedding->positional_embedding.to(dtype=query_layer.dtype).to(dtype=query_layer.dtype)
A:transformers.models.electra.modeling_electra.relative_position_scores->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.electra.modeling_electra.relative_position_scores_query->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.electra.modeling_electra.relative_position_scores_key->torch.einsum('bhrd,lrd->bhlr', key_layer, positional_embedding)
A:transformers.models.electra.modeling_electra.attention_probs->self.dropout(attention_probs)
A:transformers.models.electra.modeling_electra.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.electra.modeling_electra.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.electra.modeling_electra.hidden_states->self.encoder(hidden_states, attention_mask=extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.electra.modeling_electra.self.self->ElectraSelfAttention(config)
A:transformers.models.electra.modeling_electra.self.output->ElectraOutput(config)
A:transformers.models.electra.modeling_electra.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.electra.modeling_electra.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.electra.modeling_electra.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.electra.modeling_electra.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.electra.modeling_electra.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.electra.modeling_electra.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.electra.modeling_electra.self_outputs->self.self(hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.electra.modeling_electra.attention_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.electra.modeling_electra.self.attention->ElectraAttention(config)
A:transformers.models.electra.modeling_electra.self.crossattention->ElectraAttention(config)
A:transformers.models.electra.modeling_electra.self.intermediate->ElectraIntermediate(config)
A:transformers.models.electra.modeling_electra.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.electra.modeling_electra.cross_attention_outputs->self.crossattention(attention_output, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.electra.modeling_electra.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.electra.modeling_electra.intermediate_output->self.intermediate(attention_output)
A:transformers.models.electra.modeling_electra.self.layer->torch.nn.ModuleList([ElectraLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.electra.modeling_electra.layer_outputs->layer_module(hidden_states, attention_mask, layer_head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.electra.modeling_electra.self.dense_prediction->torch.nn.Linear(config.hidden_size, 1)
A:transformers.models.electra.modeling_electra.logits->self.classifier(pooled_output)
A:transformers.models.electra.modeling_electra.self.embeddings->ElectraEmbeddings(config)
A:transformers.models.electra.modeling_electra.self.embeddings_project->torch.nn.Linear(config.embedding_size, config.hidden_size)
A:transformers.models.electra.modeling_electra.self.encoder->ElectraEncoder(config)
A:transformers.models.electra.modeling_electra.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.electra.modeling_electra.extended_attention_mask->self.get_extended_attention_mask(attention_mask, input_shape, device)
A:transformers.models.electra.modeling_electra.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.electra.modeling_electra.self.out_proj->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.electra.modeling_electra.self.electra->ElectraModel(config)
A:transformers.models.electra.modeling_electra.self.classifier->torch.nn.Linear(config.hidden_size, 1)
A:transformers.models.electra.modeling_electra.discriminator_hidden_states->self.electra(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.electra.modeling_electra.loss_fct->CrossEntropyLoss()
A:transformers.models.electra.modeling_electra.loss->loss_fct(reshaped_logits, labels)
A:transformers.models.electra.modeling_electra.self.discriminator_predictions->ElectraDiscriminatorPredictions(config)
A:transformers.models.electra.modeling_electra.self.generator_predictions->ElectraGeneratorPredictions(config)
A:transformers.models.electra.modeling_electra.self.generator_lm_head->torch.nn.Linear(config.embedding_size, config.vocab_size)
A:transformers.models.electra.modeling_electra.generator_hidden_states->self.electra(input_ids, attention_mask, token_type_ids, position_ids, head_mask, inputs_embeds, output_attentions, output_hidden_states, return_dict)
A:transformers.models.electra.modeling_electra.prediction_scores->self.generator_lm_head(prediction_scores)
A:transformers.models.electra.modeling_electra.discriminator_sequence_output->self.dropout(discriminator_sequence_output)
A:transformers.models.electra.modeling_electra.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.electra.modeling_electra.(start_logits, end_logits)->self.classifier(pooled_output).split(1, dim=-1)
A:transformers.models.electra.modeling_electra.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.electra.modeling_electra.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.electra.modeling_electra.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.electra.modeling_electra.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.electra.modeling_electra.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.electra.modeling_electra.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.electra.modeling_electra.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.electra.modeling_electra.self.sequence_summary->SequenceSummary(config)
A:transformers.models.electra.modeling_electra.pooled_output->self.sequence_summary(sequence_output)
A:transformers.models.electra.modeling_electra.reshaped_logits->self.classifier(pooled_output).view(-1, num_choices)
transformers.ElectraForMaskedLM(self,config)
transformers.ElectraForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraForMaskedLM.get_output_embeddings(self)
transformers.ElectraForMaskedLM.set_output_embeddings(self,word_embeddings)
transformers.ElectraForMultipleChoice(self,config)
transformers.ElectraForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraForPreTraining(self,config)
transformers.ElectraForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraForPreTrainingOutput(ModelOutput)
transformers.ElectraForQuestionAnswering(self,config)
transformers.ElectraForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraForSequenceClassification(self,config)
transformers.ElectraForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraForTokenClassification(self,config)
transformers.ElectraForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraModel(self,config)
transformers.ElectraModel._prune_heads(self,heads_to_prune)
transformers.ElectraModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ElectraModel.get_input_embeddings(self)
transformers.ElectraModel.set_input_embeddings(self,value)
transformers.ElectraPreTrainedModel(PreTrainedModel)
transformers.ElectraPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_electra(model,config,tf_checkpoint_path,discriminator_or_generator='discriminator')
transformers.models.electra.modeling_electra.ElectraAttention(self,config)
transformers.models.electra.modeling_electra.ElectraAttention.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.electra.modeling_electra.ElectraAttention.prune_heads(self,heads)
transformers.models.electra.modeling_electra.ElectraClassificationHead(self,config)
transformers.models.electra.modeling_electra.ElectraClassificationHead.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraClassificationHead.forward(self,features,**kwargs)
transformers.models.electra.modeling_electra.ElectraDiscriminatorPredictions(self,config)
transformers.models.electra.modeling_electra.ElectraDiscriminatorPredictions.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraDiscriminatorPredictions.forward(self,discriminator_hidden_states)
transformers.models.electra.modeling_electra.ElectraEmbeddings(self,config)
transformers.models.electra.modeling_electra.ElectraEmbeddings.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.electra.modeling_electra.ElectraEncoder(self,config)
transformers.models.electra.modeling_electra.ElectraEncoder.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.electra.modeling_electra.ElectraForMaskedLM(self,config)
transformers.models.electra.modeling_electra.ElectraForMaskedLM.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraForMaskedLM.get_output_embeddings(self)
transformers.models.electra.modeling_electra.ElectraForMaskedLM.set_output_embeddings(self,word_embeddings)
transformers.models.electra.modeling_electra.ElectraForMultipleChoice(self,config)
transformers.models.electra.modeling_electra.ElectraForMultipleChoice.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraForPreTraining(self,config)
transformers.models.electra.modeling_electra.ElectraForPreTraining.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraForPreTrainingOutput(ModelOutput)
transformers.models.electra.modeling_electra.ElectraForQuestionAnswering(self,config)
transformers.models.electra.modeling_electra.ElectraForQuestionAnswering.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraForSequenceClassification(self,config)
transformers.models.electra.modeling_electra.ElectraForSequenceClassification.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraForTokenClassification(self,config)
transformers.models.electra.modeling_electra.ElectraForTokenClassification.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraGeneratorPredictions(self,config)
transformers.models.electra.modeling_electra.ElectraGeneratorPredictions.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraGeneratorPredictions.forward(self,generator_hidden_states)
transformers.models.electra.modeling_electra.ElectraIntermediate(self,config)
transformers.models.electra.modeling_electra.ElectraIntermediate.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraIntermediate.forward(self,hidden_states)
transformers.models.electra.modeling_electra.ElectraLayer(self,config)
transformers.models.electra.modeling_electra.ElectraLayer.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraLayer.feed_forward_chunk(self,attention_output)
transformers.models.electra.modeling_electra.ElectraLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.electra.modeling_electra.ElectraModel(self,config)
transformers.models.electra.modeling_electra.ElectraModel.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraModel._prune_heads(self,heads_to_prune)
transformers.models.electra.modeling_electra.ElectraModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.electra.modeling_electra.ElectraModel.get_input_embeddings(self)
transformers.models.electra.modeling_electra.ElectraModel.set_input_embeddings(self,value)
transformers.models.electra.modeling_electra.ElectraOutput(self,config)
transformers.models.electra.modeling_electra.ElectraOutput.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraOutput.forward(self,hidden_states,input_tensor)
transformers.models.electra.modeling_electra.ElectraPreTrainedModel(PreTrainedModel)
transformers.models.electra.modeling_electra.ElectraPreTrainedModel._init_weights(self,module)
transformers.models.electra.modeling_electra.ElectraSelfAttention(self,config)
transformers.models.electra.modeling_electra.ElectraSelfAttention.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.electra.modeling_electra.ElectraSelfAttention.transpose_for_scores(self,x)
transformers.models.electra.modeling_electra.ElectraSelfOutput(self,config)
transformers.models.electra.modeling_electra.ElectraSelfOutput.__init__(self,config)
transformers.models.electra.modeling_electra.ElectraSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.electra.modeling_electra.load_tf_weights_in_electra(model,config,tf_checkpoint_path,discriminator_or_generator='discriminator')


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/tokenization_electra.py----------------------------------------
transformers.ElectraTokenizer(BertTokenizer)
transformers.models.electra.tokenization_electra.ElectraTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/electra/tokenization_electra_fast.py----------------------------------------
transformers.ElectraTokenizerFast(BertTokenizerFast)
transformers.models.electra.tokenization_electra_fast.ElectraTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/herbert/tokenization_herbert_fast.py----------------------------------------
A:transformers.models.herbert.tokenization_herbert_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.herbert.tokenization_herbert_fast.files->self._tokenizer.model.save(save_directory, name=filename_prefix)
transformers.HerbertTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,**kwargs)
transformers.HerbertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.HerbertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.HerbertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.HerbertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,**kwargs)
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast.__init__(self,vocab_file,merges_file,tokenizer_file=None,**kwargs)
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.herbert.tokenization_herbert_fast.HerbertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/herbert/tokenization_herbert.py----------------------------------------
A:transformers.models.herbert.tokenization_herbert.logger->utils.logging.get_logger(__name__)
A:transformers.models.herbert.tokenization_herbert.self.bert_pre_tokenizer->BasicTokenizer(do_lower_case=False, never_split=self.all_special_tokens, tokenize_chinese_chars=False, strip_accents=False)
A:transformers.models.herbert.tokenization_herbert.pre_tokens->self.bert_pre_tokenizer.tokenize(text)
transformers.HerbertTokenizer(self,**kwargs)
transformers.HerbertTokenizer._tokenize(self,text)
transformers.models.herbert.tokenization_herbert.HerbertTokenizer(self,**kwargs)
transformers.models.herbert.tokenization_herbert.HerbertTokenizer.__init__(self,**kwargs)
transformers.models.herbert.tokenization_herbert.HerbertTokenizer._tokenize(self,text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/herbert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/modeling_transfo_xl_utilities.py----------------------------------------
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.self.cluster_weight->torch.nn.Parameter(torch.zeros(self.n_clusters, self.d_embed))
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.self.cluster_bias->torch.nn.Parameter(torch.zeros(self.n_clusters))
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.self.out_layers->torch.nn.ModuleList()
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.self.out_projs->torch.nn.ParameterList()
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.logit->self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.proj_hid->torch.nn.functional.linear(hidden, proj.t().contiguous())
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.hidden->hidden.view(-1, hidden.size(-1)).view(-1, hidden.size(-1))
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.labels->labels.view(-1).view(-1)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.out->hidden.view(-1, hidden.size(-1)).view(-1, hidden.size(-1)).new_empty((head_logit.size(0), self.n_token))
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.weight_i->torch.cat([weight_i, self.cluster_weight], dim=0)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.bias_i->torch.cat([bias_i, self.cluster_bias], dim=0)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.head_logit->self._compute_logit(hidden, head_weight, head_bias, head_proj)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.head_logprob->torch.nn.functional.log_softmax(head_logit, dim=1)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.indices_i->mask_i.nonzero().squeeze()
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.head_logprob_i->torch.nn.functional.log_softmax(head_logit, dim=1).index_select(0, indices_i)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.hidden_i->hidden.view(-1, hidden.size(-1)).view(-1, hidden.size(-1)).index_select(0, indices_i)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.logprob_i->torch.nn.functional.log_softmax(head_logit, dim=1).index_select(0, indices_i).gather(1, target_i[:, None]).squeeze(1)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.tail_logit_i->self._compute_logit(hidden, weight_i, bias_i, proj_i)
A:transformers.models.transfo_xl.modeling_transfo_xl_utilities.tail_logprob_i->torch.nn.functional.log_softmax(tail_logit_i, dim=1)
transformers.models.transfo_xl.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax(self,n_token,d_embed,d_proj,cutoffs,div_val=1,keep_order=False)
transformers.models.transfo_xl.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.__init__(self,n_token,d_embed,d_proj,cutoffs,div_val=1,keep_order=False)
transformers.models.transfo_xl.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit(self,hidden,weight,bias,proj)
transformers.models.transfo_xl.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.forward(self,hidden,labels=None,keep_order=False)
transformers.models.transfo_xl.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob(self,hidden)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.corpus->pickle.load(fp, encoding='latin1')
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.config_path->os.path.abspath(transfo_xl_config_file)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.config->transformers.TransfoXLConfig.from_json_file(transfo_xl_config_file)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.model->load_tf_weights_in_transfo_xl(model, config, tf_path)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.pytorch_weights_dump_path->os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.pytorch_config_dump_path->os.path.join(pytorch_dump_folder_path, CONFIG_NAME)
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch(tf_checkpoint_path,transfo_xl_config_file,pytorch_dump_folder_path,transfo_xl_dataset_file)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/configuration_transfo_xl.py----------------------------------------
A:transformers.models.transfo_xl.configuration_transfo_xl.logger->utils.logging.get_logger(__name__)
transformers.TransfoXLConfig(self,vocab_size=267735,cutoffs=[20000,40000,200000],d_model=1024,d_embed=1024,n_head=16,d_head=64,d_inner=4096,div_val=4,pre_lnorm=False,n_layer=18,mem_len=1600,clamp_len=1000,same_length=True,proj_share_all_but_first=True,attn_type=0,sample_softmax=-1,adaptive=True,dropout=0.1,dropatt=0.0,untie_r=True,init='normal',init_range=0.01,proj_init_std=0.01,init_std=0.02,layer_norm_epsilon=1e-05,eos_token_id=0,**kwargs)
transformers.TransfoXLConfig.hidden_size(self)
transformers.TransfoXLConfig.max_position_embeddings(self)
transformers.TransfoXLConfig.n_token(self)
transformers.TransfoXLConfig.n_token(self,value)
transformers.TransfoXLConfig.num_attention_heads(self)
transformers.TransfoXLConfig.num_hidden_layers(self)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig(self,vocab_size=267735,cutoffs=[20000,40000,200000],d_model=1024,d_embed=1024,n_head=16,d_head=64,d_inner=4096,div_val=4,pre_lnorm=False,n_layer=18,mem_len=1600,clamp_len=1000,same_length=True,proj_share_all_but_first=True,attn_type=0,sample_softmax=-1,adaptive=True,dropout=0.1,dropatt=0.0,untie_r=True,init='normal',init_range=0.01,proj_init_std=0.01,init_std=0.02,layer_norm_epsilon=1e-05,eos_token_id=0,**kwargs)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.__init__(self,vocab_size=267735,cutoffs=[20000,40000,200000],d_model=1024,d_embed=1024,n_head=16,d_head=64,d_inner=4096,div_val=4,pre_lnorm=False,n_layer=18,mem_len=1600,clamp_len=1000,same_length=True,proj_share_all_but_first=True,attn_type=0,sample_softmax=-1,adaptive=True,dropout=0.1,dropatt=0.0,untie_r=True,init='normal',init_range=0.01,proj_init_std=0.01,init_std=0.02,layer_norm_epsilon=1e-05,eos_token_id=0,**kwargs)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.hidden_size(self)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.max_position_embeddings(self)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.n_token(self)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.n_token(self,value)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.num_attention_heads(self)
transformers.models.transfo_xl.configuration_transfo_xl.TransfoXLConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/modeling_tf_transfo_xl.py----------------------------------------
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.logger->utils.logging.get_logger(__name__)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.sinusoid_inp->tensorflow.einsum('i,j->ij', pos_seq, self.inv_freq)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.pos_emb->self.drop(pos_emb, training=inputs['training'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.layer_1->tensorflow.keras.layers.Dense(d_inner, kernel_initializer=get_initializer(init_std), activation=tf.nn.relu, name='CoreNet_._0')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.drop_1->tensorflow.keras.layers.Dropout(dropout)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.layer_2->tensorflow.keras.layers.Dense(d_model, kernel_initializer=get_initializer(init_std), name='CoreNet_._3')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.drop_2->tensorflow.keras.layers.Dropout(dropout)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=layer_norm_epsilon, name='layer_norm')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.core_out->tensorflow.transpose(core_out, perm=(1, 0, 2))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.output->self.layer_norm(inp + core_out)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.qkv_net->tensorflow.keras.layers.Dense(3 * n_head * d_head, kernel_initializer=get_initializer(init_std), use_bias=False, name='qkv_net')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.drop->tensorflow.keras.layers.Dropout(config.dropout)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.dropatt->tensorflow.keras.layers.Dropout(dropatt)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.o_net->tensorflow.keras.layers.Dense(d_model, kernel_initializer=get_initializer(init_std), use_bias=False, name='o_net')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.r_net->tensorflow.keras.layers.Dense(self.n_head * self.d_head, kernel_initializer=get_initializer(init_std), use_bias=False, name='r_net')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.r_r_bias->self.add_weight(shape=(self.n_head, self.d_head), initializer='zeros', trainable=True, name='r_r_bias')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.r_w_bias->self.add_weight(shape=(self.n_head, self.d_head), initializer='zeros', trainable=True, name='r_w_bias')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.x_size->shape_list(x)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.x->tensorflow.reshape(x, x_size)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.cat->tensorflow.concat([mems[i], hids[i]], axis=0)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.w_heads->self.qkv_net(w)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.r_head_k->tensorflow.reshape(r_head_k, (rlen, self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.(w_head_q, w_head_k, w_head_v)->tensorflow.split(w_heads, 3, axis=-1)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.w_head_q->tensorflow.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.w_head_k->tensorflow.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.w_head_v->tensorflow.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.AC->tensorflow.einsum('ibnd,jbnd->ijbn', rw_head_q, w_head_k)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.BD->self._rel_shift(BD)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_prob->self.dropatt(attn_prob, training=training)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_vec->tensorflow.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_vec_sizes->shape_list(attn_vec)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_out->self.drop(attn_out, training=training)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.dec_attn->TFRelPartialLearnableMultiHeadAttn(n_head, d_model, d_head, dropout, dropatt=dropatt, pre_lnorm=pre_lnorm, r_w_bias=r_w_bias, r_r_bias=r_r_bias, init_std=init_std, layer_norm_epsilon=layer_norm_epsilon, output_attentions=output_attentions, name='dec_attn')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.pos_ff->TFPositionwiseFF(d_model, d_inner, dropout, pre_lnorm=pre_lnorm, init_std=init_std, layer_norm_epsilon=layer_norm_epsilon, name='pos_ff')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_outputs->self.dec_attn(dec_inp, r, dec_attn_mask, mems, head_mask, output_attentions, training=training)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.ff_output->self.pos_ff(attn_outputs[0], training=training)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.inp_flat->tensorflow.reshape(inp, (-1,))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.emb_flat->tensorflow.zeros([shape_list(inp_flat)[0], self.d_proj])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.emb_i->tensorflow.einsum('id,de->ie', emb_i, self.emb_projs[i])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.mask_idx->tensorflow.cast(tf.where(mask_i), dtype=tf.int64)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.embed->tensorflow.reshape(emb_flat, embed_shape)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.word_emb->TFAdaptiveEmbedding(config.vocab_size, config.d_embed, config.d_model, config.cutoffs, div_val=config.div_val, init_std=config.init_std, name='word_emb')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.pos_emb->TFPositionalEmbedding(self.d_model, name='pos_emb')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.empty->tensorflow.zeros([self.mem_len, bsz, self.d_model])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.beg_idx->max(0, end_idx - self.mem_len)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, mems=mems, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, training=training, kwargs_call=kwargs)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.inputs['input_ids']->tensorflow.transpose(inputs['input_ids'], perm=(1, 0))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.(qlen, bsz)->shape_list(inputs['input_ids'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.inputs['inputs_embeds']->tensorflow.transpose(inputs['inputs_embeds'], perm=(1, 0, 2))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.inputs['mems']->self.init_mems(bsz)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.word_emb->self.word_emb(inputs['input_ids'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_mask->tensorflow.ones([qlen, qlen])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.mask_u->tensorflow.linalg.band_part(attn_mask, 0, -1)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.mask_dia->tensorflow.linalg.band_part(attn_mask, 0, 0)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attn_mask_pad->tensorflow.zeros([qlen, mlen])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.dec_attn_mask->tensorflow.concat([dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]], 1)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.mask_l->tensorflow.linalg.band_part(attn_mask, -1, 0)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.pos_seq->tensorflow.minimum(pos_seq, self.clamp_len)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.layer_outputs->layer(core_out, pos_emb, dec_attn_mask, mems_i, inputs['head_mask'][i], inputs['output_attentions'], training=inputs['training'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.new_mems->self._update_mems(hids, inputs['mems'], mlen, qlen)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.hids->tuple((tf.transpose(t, perm=(1, 0, 2)) for t in hids))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.attentions->tuple((tf.transpose(t, perm=(2, 3, 0, 1)) for t in attentions))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.transformer->TFTransfoXLMainLayer(config, name='transformer')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.outputs->self.transformer(input_ids=inputs['input_ids'], mems=inputs['mems'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.self.crit->TFAdaptiveSoftmaxMask(config.vocab_size, config.d_embed, config.d_model, config.cutoffs, div_val=config.div_val, name='crit')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.transformer_outputs->self.transformer(inputs['input_ids'], inputs['mems'], inputs['head_mask'], inputs['inputs_embeds'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl.softmax_output->self.crit(pred_hid, labels, training=inputs['training'])
transformers.TFAdaptiveEmbedding(self,n_token,d_embed,d_proj,cutoffs,div_val=1,init_std=0.02,sample_softmax=False,**kwargs)
transformers.TFAdaptiveEmbedding.build(self,input_shape)
transformers.TFAdaptiveEmbedding.call(self,inp)
transformers.TFTransfoXLLMHeadModel(self,config)
transformers.TFTransfoXLLMHeadModel.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFTransfoXLLMHeadModel.get_output_embeddings(self)
transformers.TFTransfoXLLMHeadModel.init_mems(self,bsz)
transformers.TFTransfoXLLMHeadModel.prepare_inputs_for_generation(self,inputs,past,**model_kwargs)
transformers.TFTransfoXLLMHeadModel.reset_memory_length(self,mem_len)
transformers.TFTransfoXLLMHeadModelOutput(ModelOutput)
transformers.TFTransfoXLMainLayer(self,config,**kwargs)
transformers.TFTransfoXLMainLayer._prune_heads(self,heads)
transformers.TFTransfoXLMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFTransfoXLMainLayer._update_mems(self,hids,mems,mlen,qlen)
transformers.TFTransfoXLMainLayer.backward_compatible(self)
transformers.TFTransfoXLMainLayer.build(self,input_shape)
transformers.TFTransfoXLMainLayer.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFTransfoXLMainLayer.get_input_embeddings(self)
transformers.TFTransfoXLMainLayer.init_mems(self,bsz)
transformers.TFTransfoXLMainLayer.reset_memory_length(self,mem_len)
transformers.TFTransfoXLMainLayer.set_input_embeddings(self,value)
transformers.TFTransfoXLModel(self,config,*inputs,**kwargs)
transformers.TFTransfoXLModel.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFTransfoXLModelOutput(ModelOutput)
transformers.TFTransfoXLPreTrainedModel(TFPreTrainedModel)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFAdaptiveEmbedding(self,n_token,d_embed,d_proj,cutoffs,div_val=1,init_std=0.02,sample_softmax=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFAdaptiveEmbedding.__init__(self,n_token,d_embed,d_proj,cutoffs,div_val=1,init_std=0.02,sample_softmax=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFAdaptiveEmbedding.build(self,input_shape)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFAdaptiveEmbedding.call(self,inp)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionalEmbedding(self,demb,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionalEmbedding.__init__(self,demb,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionalEmbedding.call(self,pos_seq,bsz=None)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionwiseFF(self,d_model,d_inner,dropout,pre_lnorm=False,layer_norm_epsilon=1e-05,init_std=0.02,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionwiseFF.__init__(self,d_model,d_inner,dropout,pre_lnorm=False,layer_norm_epsilon=1e-05,init_std=0.02,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionwiseFF.call(self,inp,training=False)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer(self,n_head,d_model,d_head,d_inner,dropout,dropatt=0.0,pre_lnorm=False,r_w_bias=None,r_r_bias=None,layer_norm_epsilon=1e-05,init_std=0.02,output_attentions=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.__init__(self,n_head,d_model,d_head,d_inner,dropout,dropatt=0.0,pre_lnorm=False,r_w_bias=None,r_r_bias=None,layer_norm_epsilon=1e-05,init_std=0.02,output_attentions=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.call(self,dec_inp,r,dec_attn_mask,mems,head_mask,output_attentions,training=False)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn(self,n_head,d_model,d_head,dropout,dropatt=0.0,pre_lnorm=False,r_r_bias=None,r_w_bias=None,layer_norm_epsilon=1e-05,init_std=0.02,output_attentions=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.__init__(self,n_head,d_model,d_head,dropout,dropatt=0.0,pre_lnorm=False,r_r_bias=None,r_w_bias=None,layer_norm_epsilon=1e-05,init_std=0.02,output_attentions=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn._rel_shift(self,x)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.build(self,input_shape)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.call(self,w,r,attn_mask,mems,head_mask,output_attentions,training=False)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel(self,config)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.__init__(self,config)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.get_output_embeddings(self)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.init_mems(self,bsz)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.prepare_inputs_for_generation(self,inputs,past,**model_kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.reset_memory_length(self,mem_len)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModelOutput(ModelOutput)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMHead(self,config,input_embeddings,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMHead.build(self,input_shape)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMHead.call(self,hidden_states)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer(self,config,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.__init__(self,config,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer._prune_heads(self,heads)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer._update_mems(self,hids,mems,mlen,qlen)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.backward_compatible(self)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.build(self,input_shape)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.get_input_embeddings(self)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.init_mems(self,bsz)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.reset_memory_length(self,mem_len)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer.set_input_embeddings(self,value)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModel(self,config,*inputs,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModel.__init__(self,config,*inputs,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModel.call(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModelOutput(ModelOutput)
transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLPreTrainedModel(TFPreTrainedModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/modeling_tf_transfo_xl_utilities.py----------------------------------------
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.self.cluster_weight->self.add_weight(shape=(self.n_clusters, self.d_embed), initializer='zeros', trainable=True, name='cluster_weight')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.self.cluster_bias->self.add_weight(shape=(self.n_clusters,), initializer='zeros', trainable=True, name='cluster_bias')
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.weight->self.add_weight(shape=(r_idx - l_idx, d_emb_i), initializer='zeros', trainable=True, name='out_layers_._{}_._weight'.format(i))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.bias->self.add_weight(shape=(r_idx - l_idx,), initializer='zeros', trainable=True, name='out_layers_._{}_._bias'.format(i))
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.y->tensorflow.einsum('ibd,ed->ibe', y, proj)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.lp_size->shape_list(logprob)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.r->tensorflow.range(lp_size[0])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.idx->tensorflow.stack([r, target], 1)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.output->self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.loss->tensorflow.reduce_mean(loss)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.out->tensorflow.concat(out, axis=-1)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.hidden_sizes->shape_list(hidden)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.mask_idx->tensorflow.where(mask)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.cur_W->tensorflow.concat([cur_W, self.cluster_weight], 0)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.cur_b->tensorflow.concat([cur_b, self.cluster_bias], 0)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.head_logit->self._logit(hidden, cur_W, cur_b, self.out_projs[0])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.head_logprob->tensorflow.nn.log_softmax(head_logit)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.cur_head_logprob->tensorflow.boolean_mask(head_logprob, mask)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.cur_logprob->self._gather_logprob(cur_tail_logprob, cur_target)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.tail_logit->self._logit(hidden, cur_W, cur_b, self.out_projs[i])
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.tail_logprob->tensorflow.nn.log_softmax(tail_logit)
A:transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.cur_tail_logprob->tensorflow.boolean_mask(tail_logprob, mask)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask(self,vocab_size,d_embed,d_proj,cutoffs,div_val=1,keep_order=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.__init__(self,vocab_size,d_embed,d_proj,cutoffs,div_val=1,keep_order=False,**kwargs)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob(logprob,target)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit(x,W,b,proj=None)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build(self,input_shape)
transformers.models.transfo_xl.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.call(self,hidden,target,return_mean=True,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/modeling_transfo_xl.py----------------------------------------
A:transformers.models.transfo_xl.modeling_transfo_xl.logger->utils.logging.get_logger(__name__)
A:transformers.models.transfo_xl.modeling_transfo_xl.tf_to_pt_map->build_tf_to_pytorch_map(model, config)
A:transformers.models.transfo_xl.modeling_transfo_xl.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.transfo_xl.modeling_transfo_xl.array->numpy.transpose(array)
A:transformers.models.transfo_xl.modeling_transfo_xl.p_i.data->torch.from_numpy(arr_i)
A:transformers.models.transfo_xl.modeling_transfo_xl.pointer.data->torch.from_numpy(array)
A:transformers.models.transfo_xl.modeling_transfo_xl.sinusoid_inp->torch.ger(pos_seq, self.inv_freq)
A:transformers.models.transfo_xl.modeling_transfo_xl.pos_emb->self.drop(pos_emb)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.CoreNet->torch.nn.Sequential(nn.Linear(d_model, d_inner), nn.ReLU(inplace=True), nn.Dropout(dropout), nn.Linear(d_inner, d_model), nn.Dropout(dropout))
A:transformers.models.transfo_xl.modeling_transfo_xl.self.layer_norm->torch.nn.LayerNorm(d_model, eps=layer_norm_epsilon)
A:transformers.models.transfo_xl.modeling_transfo_xl.core_out->core_out.transpose(0, 1).contiguous().transpose(0, 1).contiguous()
A:transformers.models.transfo_xl.modeling_transfo_xl.output->self.layer_norm(inp + core_out)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.qkv_net->torch.nn.Linear(d_model, 3 * n_head * d_head, bias=False)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.drop->torch.nn.Dropout(config.dropout)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.dropatt->torch.nn.Dropout(dropatt)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.o_net->torch.nn.Linear(n_head * d_head, d_model, bias=False)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.r_r_bias->torch.nn.Parameter(torch.FloatTensor(self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_transfo_xl.self.r_w_bias->torch.nn.Parameter(torch.FloatTensor(self.n_head, self.d_head))
A:transformers.models.transfo_xl.modeling_transfo_xl.self.r_net->torch.nn.Linear(self.d_model, self.n_head * self.d_head, bias=False)
A:transformers.models.transfo_xl.modeling_transfo_xl.zero_pad->torch.zeros(zero_pad_shape, device=x.device, dtype=x.dtype)
A:transformers.models.transfo_xl.modeling_transfo_xl.x_padded->x_padded.view(*x_padded_shape).view(*x_padded_shape)
A:transformers.models.transfo_xl.modeling_transfo_xl.x->x_padded[1:].view_as(x)
A:transformers.models.transfo_xl.modeling_transfo_xl.cat->torch.cat([mems[i], hids[i]], dim=0)
A:transformers.models.transfo_xl.modeling_transfo_xl.w_heads->self.qkv_net(w)
A:transformers.models.transfo_xl.modeling_transfo_xl.r_head_k->r_head_k.view(rlen, self.n_head, self.d_head).view(rlen, self.n_head, self.d_head)
A:transformers.models.transfo_xl.modeling_transfo_xl.(w_head_q, w_head_k, w_head_v)->torch.chunk(w_heads, 3, dim=-1)
A:transformers.models.transfo_xl.modeling_transfo_xl.klen->w_head_k.view(klen, bsz, self.n_head, self.d_head).size(0)
A:transformers.models.transfo_xl.modeling_transfo_xl.w_head_q->w_head_q.view(qlen, bsz, self.n_head, self.d_head).view(qlen, bsz, self.n_head, self.d_head)
A:transformers.models.transfo_xl.modeling_transfo_xl.w_head_k->w_head_k.view(klen, bsz, self.n_head, self.d_head).view(klen, bsz, self.n_head, self.d_head)
A:transformers.models.transfo_xl.modeling_transfo_xl.w_head_v->w_head_v.view(klen, bsz, self.n_head, self.d_head).view(klen, bsz, self.n_head, self.d_head)
A:transformers.models.transfo_xl.modeling_transfo_xl.AC->torch.einsum('ibnd,jbnd->ijbn', (rw_head_q, w_head_k))
A:transformers.models.transfo_xl.modeling_transfo_xl.BD->self._rel_shift(BD)
A:transformers.models.transfo_xl.modeling_transfo_xl.attn_score->attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score).float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)
A:transformers.models.transfo_xl.modeling_transfo_xl.attn_prob->self.dropatt(attn_prob)
A:transformers.models.transfo_xl.modeling_transfo_xl.attn_vec->attn_vec.contiguous().view(attn_vec.size(0), attn_vec.size(1), self.n_head * self.d_head).contiguous().view(attn_vec.size(0), attn_vec.size(1), self.n_head * self.d_head)
A:transformers.models.transfo_xl.modeling_transfo_xl.attn_out->self.drop(attn_out)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.dec_attn->RelPartialLearnableMultiHeadAttn(n_head, d_model, d_head, dropout, layer_norm_epsilon=layer_norm_epsilon, **kwargs)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.pos_ff->PositionwiseFF(d_model, d_inner, dropout, pre_lnorm=kwargs.get('pre_lnorm'), layer_norm_epsilon=layer_norm_epsilon)
A:transformers.models.transfo_xl.modeling_transfo_xl.attn_outputs->self.dec_attn(dec_inp, r, attn_mask=dec_attn_mask, mems=mems, head_mask=head_mask, output_attentions=output_attentions)
A:transformers.models.transfo_xl.modeling_transfo_xl.ff_output->self.pos_ff(attn_outputs[0])
A:transformers.models.transfo_xl.modeling_transfo_xl.self.emb_layers->torch.nn.ModuleList()
A:transformers.models.transfo_xl.modeling_transfo_xl.self.emb_projs->torch.nn.ParameterList()
A:transformers.models.transfo_xl.modeling_transfo_xl.embed->torch.zeros([inp_flat.size(0), self.d_proj], dtype=param.dtype, device=param.device).view(embed_shape)
A:transformers.models.transfo_xl.modeling_transfo_xl.param->next(self.parameters())
A:transformers.models.transfo_xl.modeling_transfo_xl.inp_flat->inp.view(-1)
A:transformers.models.transfo_xl.modeling_transfo_xl.emb_flat->torch.zeros([inp_flat.size(0), self.d_proj], dtype=param.dtype, device=param.device)
A:transformers.models.transfo_xl.modeling_transfo_xl.indices_i->mask_i.nonzero().squeeze()
A:transformers.models.transfo_xl.modeling_transfo_xl.emb_i->torch.nn.functional.linear(emb_i, self.emb_projs[i])
A:transformers.models.transfo_xl.modeling_transfo_xl.base_model->getattr(self, self.base_model_prefix, self)
A:transformers.models.transfo_xl.modeling_transfo_xl.(new_num_tokens_layer, layer)->self._get_new_num_tokens_layer(new_num_tokens, layer)
A:transformers.models.transfo_xl.modeling_transfo_xl.model_embeds->getattr(self, self.base_model_prefix, self)._resize_token_embeddings(new_num_tokens_layer, layer)
A:transformers.models.transfo_xl.modeling_transfo_xl.new_embedding_shapes->self._get_embedding_shapes()
A:transformers.models.transfo_xl.modeling_transfo_xl.embeddings->self.get_input_embeddings()
A:transformers.models.transfo_xl.modeling_transfo_xl.new_embeddings_layer->self._get_resized_embeddings(embeddings.emb_layers[layer], new_num_tokens)
A:transformers.models.transfo_xl.modeling_transfo_xl.embeddings.cutoffs[i]->sum(new_embedding_shapes[:i + 1])
A:transformers.models.transfo_xl.modeling_transfo_xl.self.word_emb->AdaptiveEmbedding(config.vocab_size, config.d_embed, config.d_model, config.cutoffs, div_val=config.div_val)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.layers->torch.nn.ModuleList()
A:transformers.models.transfo_xl.modeling_transfo_xl.self.pos_emb->PositionalEmbedding(self.d_model)
A:transformers.models.transfo_xl.modeling_transfo_xl.empty->torch.zeros(self.mem_len, bsz, self.config.d_model, dtype=param.dtype, device=param.device)
A:transformers.models.transfo_xl.modeling_transfo_xl.beg_idx->max(0, end_idx - self.mem_len)
A:transformers.models.transfo_xl.modeling_transfo_xl.input_ids->input_ids.transpose(0, 1).contiguous().transpose(0, 1).contiguous()
A:transformers.models.transfo_xl.modeling_transfo_xl.(qlen, bsz)->input_ids.transpose(0, 1).contiguous().transpose(0, 1).contiguous().size()
A:transformers.models.transfo_xl.modeling_transfo_xl.inputs_embeds->inputs_embeds.transpose(0, 1).contiguous().transpose(0, 1).contiguous()
A:transformers.models.transfo_xl.modeling_transfo_xl.mems->self.init_mems(bsz)
A:transformers.models.transfo_xl.modeling_transfo_xl.head_mask->head_mask.to(dtype=next(self.parameters()).dtype).to(dtype=next(self.parameters()).dtype)
A:transformers.models.transfo_xl.modeling_transfo_xl.word_emb->self.word_emb(input_ids)
A:transformers.models.transfo_xl.modeling_transfo_xl.all_ones->self.word_emb(input_ids).new_ones((qlen, klen), dtype=torch.uint8)
A:transformers.models.transfo_xl.modeling_transfo_xl.pos_seq->torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)
A:transformers.models.transfo_xl.modeling_transfo_xl.layer_outputs->layer(core_out, pos_emb, dec_attn_mask=dec_attn_mask, mems=mems_i, head_mask=head_mask[i], output_attentions=output_attentions)
A:transformers.models.transfo_xl.modeling_transfo_xl.new_mems->self._update_mems(hids, mems, mlen, qlen)
A:transformers.models.transfo_xl.modeling_transfo_xl.hids->tuple((t.transpose(0, 1).contiguous() for t in hids))
A:transformers.models.transfo_xl.modeling_transfo_xl.attentions->tuple((t.permute(2, 3, 0, 1).contiguous() for t in attentions))
A:transformers.models.transfo_xl.modeling_transfo_xl.self.transformer->TransfoXLModel(config)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.crit->ProjectedAdaptiveLogSoftmax(config.vocab_size, config.d_embed, config.d_model, config.cutoffs, div_val=config.div_val)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.crit.out_projs[i]->torch.nn.Parameter(self.transformer.word_emb.emb_projs[i].clone())
A:transformers.models.transfo_xl.modeling_transfo_xl.transformer_outputs->self.transformer(input_ids, mems=mems, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.transfo_xl.modeling_transfo_xl.softmax_output->self.crit(pred_hid, labels)
A:transformers.models.transfo_xl.modeling_transfo_xl.inputs['input_ids']->input_ids[:, -1].unsqueeze(-1)
A:transformers.models.transfo_xl.modeling_transfo_xl.new_cutoffs->super()._resize_cutoffs(new_num_tokens, new_emb_size, new_embedding_shapes, layer)
A:transformers.models.transfo_xl.modeling_transfo_xl.self.score->torch.nn.Linear(config.d_embed, self.num_labels, bias=False)
A:transformers.models.transfo_xl.modeling_transfo_xl.logits->self.score(hidden_states)
A:transformers.models.transfo_xl.modeling_transfo_xl.loss_fct->CrossEntropyLoss()
A:transformers.models.transfo_xl.modeling_transfo_xl.loss->loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))
transformers.AdaptiveEmbedding(self,n_token,d_embed,d_proj,cutoffs,div_val=1,sample_softmax=False)
transformers.AdaptiveEmbedding.forward(self,inp)
transformers.TransfoXLForSequenceClassification(self,config)
transformers.TransfoXLForSequenceClassification.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TransfoXLLMHeadModel(self,config)
transformers.TransfoXLLMHeadModel._resize_cutoffs(self,new_num_tokens,new_emb_size,new_embedding_shapes,layer)
transformers.TransfoXLLMHeadModel.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TransfoXLLMHeadModel.get_output_embeddings(self)
transformers.TransfoXLLMHeadModel.init_mems(self,bsz)
transformers.TransfoXLLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,**model_kwargs)
transformers.TransfoXLLMHeadModel.reset_memory_length(self,mem_len)
transformers.TransfoXLLMHeadModel.tie_weights(self)
transformers.TransfoXLLMHeadModelOutput(ModelOutput)
transformers.TransfoXLLMHeadModelOutput.logits(self)
transformers.TransfoXLModel(self,config)
transformers.TransfoXLModel._prune_heads(self,heads)
transformers.TransfoXLModel._update_mems(self,hids,mems,mlen,qlen)
transformers.TransfoXLModel.backward_compatible(self)
transformers.TransfoXLModel.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TransfoXLModel.get_input_embeddings(self)
transformers.TransfoXLModel.init_mems(self,bsz)
transformers.TransfoXLModel.reset_memory_length(self,mem_len)
transformers.TransfoXLModel.set_input_embeddings(self,new_embeddings)
transformers.TransfoXLModelOutput(ModelOutput)
transformers.TransfoXLPreTrainedModel(PreTrainedModel)
transformers.TransfoXLPreTrainedModel._get_embedding_shapes(self)
transformers.TransfoXLPreTrainedModel._get_new_num_tokens_layer(self,new_num_tokens,layer)
transformers.TransfoXLPreTrainedModel._init_bias(self,bias)
transformers.TransfoXLPreTrainedModel._init_weight(self,weight)
transformers.TransfoXLPreTrainedModel._init_weights(self,m)
transformers.TransfoXLPreTrainedModel._resize_cutoffs(self,new_num_tokens,new_emb_size,new_embedding_shapes,layer)
transformers.TransfoXLPreTrainedModel._resize_token_embeddings(self,new_num_tokens,layer=-1)
transformers.TransfoXLPreTrainedModel.resize_token_embeddings(self,new_num_tokens:Optional[int]=None,layer:Optional[int]=-1)
transformers.load_tf_weights_in_transfo_xl(model,config,tf_path)
transformers.models.transfo_xl.modeling_transfo_xl.AdaptiveEmbedding(self,n_token,d_embed,d_proj,cutoffs,div_val=1,sample_softmax=False)
transformers.models.transfo_xl.modeling_transfo_xl.AdaptiveEmbedding.__init__(self,n_token,d_embed,d_proj,cutoffs,div_val=1,sample_softmax=False)
transformers.models.transfo_xl.modeling_transfo_xl.AdaptiveEmbedding.forward(self,inp)
transformers.models.transfo_xl.modeling_transfo_xl.PositionalEmbedding(self,demb)
transformers.models.transfo_xl.modeling_transfo_xl.PositionalEmbedding.__init__(self,demb)
transformers.models.transfo_xl.modeling_transfo_xl.PositionalEmbedding.forward(self,pos_seq,bsz=None)
transformers.models.transfo_xl.modeling_transfo_xl.PositionwiseFF(self,d_model,d_inner,dropout,pre_lnorm=False,layer_norm_epsilon=1e-05)
transformers.models.transfo_xl.modeling_transfo_xl.PositionwiseFF.__init__(self,d_model,d_inner,dropout,pre_lnorm=False,layer_norm_epsilon=1e-05)
transformers.models.transfo_xl.modeling_transfo_xl.PositionwiseFF.forward(self,inp)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableDecoderLayer(self,n_head,d_model,d_head,d_inner,dropout,layer_norm_epsilon=1e-05,**kwargs)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableDecoderLayer.__init__(self,n_head,d_model,d_head,d_inner,dropout,layer_norm_epsilon=1e-05,**kwargs)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableDecoderLayer.forward(self,dec_inp,r,dec_attn_mask=None,mems=None,head_mask=None,output_attentions=False)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn(self,n_head,d_model,d_head,dropout,dropatt=0,pre_lnorm=False,r_r_bias=None,r_w_bias=None,layer_norm_epsilon=1e-05)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.__init__(self,n_head,d_model,d_head,dropout,dropatt=0,pre_lnorm=False,r_r_bias=None,r_w_bias=None,layer_norm_epsilon=1e-05)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift(self,x)
transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.forward(self,w,r,attn_mask=None,mems=None,head_mask=None,output_attentions=False)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLForSequenceClassification(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLForSequenceClassification.__init__(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLForSequenceClassification.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.__init__(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel._resize_cutoffs(self,new_num_tokens,new_emb_size,new_embedding_shapes,layer)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.get_output_embeddings(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems(self,bsz)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,**model_kwargs)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.reset_memory_length(self,mem_len)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel.tie_weights(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModelOutput(ModelOutput)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModelOutput.logits(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.__init__(self,config)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel._prune_heads(self,heads)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel._update_mems(self,hids,mems,mlen,qlen)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.backward_compatible(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.forward(self,input_ids=None,mems=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.get_input_embeddings(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.init_mems(self,bsz)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.reset_memory_length(self,mem_len)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel.set_input_embeddings(self,new_embeddings)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModelOutput(ModelOutput)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel(PreTrainedModel)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._get_embedding_shapes(self)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._get_new_num_tokens_layer(self,new_num_tokens,layer)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias(self,bias)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight(self,weight)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weights(self,m)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._resize_cutoffs(self,new_num_tokens,new_emb_size,new_embedding_shapes,layer)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel._resize_token_embeddings(self,new_num_tokens,layer=-1)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel.resize_token_embeddings(self,new_num_tokens:Optional[int]=None,layer:Optional[int]=-1)
transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLSequenceClassifierOutputWithPast(ModelOutput)
transformers.models.transfo_xl.modeling_transfo_xl.build_tf_to_pytorch_map(model,config)
transformers.models.transfo_xl.modeling_transfo_xl.load_tf_weights_in_transfo_xl(model,config,tf_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/transfo_xl/tokenization_transfo_xl.py----------------------------------------
A:transformers.models.transfo_xl.tokenization_transfo_xl.logger->utils.logging.get_logger(__name__)
A:transformers.models.transfo_xl.tokenization_transfo_xl.replaced->re.sub(reg, sub, text_array[i]).split()
A:transformers.models.transfo_xl.tokenization_transfo_xl.text->tokenize_numbers(text)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.counter->Counter()
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.punction_without_space_before_pattern->re.compile('[^\\s][{}]'.format(self.punctuation_symbols))
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.punctuation_with_space_around_pattern->self._compile_space_around_punctuation_pattern()
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.moses_punct_normalizer->sacremoses.MosesPunctNormalizer(language)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.moses_tokenizer->sacremoses.MosesTokenizer(language)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.moses_detokenizer->sacremoses.MosesDetokenizer(language)
A:transformers.models.transfo_xl.tokenization_transfo_xl.vocab_dict->torch.load(pretrained_vocab_file)
A:transformers.models.transfo_xl.tokenization_transfo_xl.look_ahead_for_special_token->'(?=[{}])'.format(self.punctuation_symbols)
A:transformers.models.transfo_xl.tokenization_transfo_xl.symbols->self.moses_pipeline(line)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.sym2idx->OrderedDict()
A:transformers.models.transfo_xl.tokenization_transfo_xl.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['pretrained_vocab_file'])
A:transformers.models.transfo_xl.tokenization_transfo_xl.encoded->torch.cat(encoded)
A:transformers.models.transfo_xl.tokenization_transfo_xl.out_string->self.moses_detokenizer.detokenize(tokens)
A:transformers.models.transfo_xl.tokenization_transfo_xl.line->line.lower().lower()
A:transformers.models.transfo_xl.tokenization_transfo_xl.data->torch.LongTensor(self.bptt, self.bsz)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.data->torch.LongTensor(self.bptt, self.bsz).view(bsz, -1).t().contiguous().to(device)
A:transformers.models.transfo_xl.tokenization_transfo_xl.seq_len->min(bptt, self.data.size(0) - 1 - i)
A:transformers.models.transfo_xl.tokenization_transfo_xl.beg_idx->max(0, i - self.ext_len)
A:transformers.models.transfo_xl.tokenization_transfo_xl.data_out->torch.LongTensor(self.bptt, self.bsz).transpose(0, 1).contiguous().to(self.device)
A:transformers.models.transfo_xl.tokenization_transfo_xl.target_out->torch.LongTensor(self.bptt, self.bsz).transpose(0, 1).contiguous().to(self.device)
A:transformers.models.transfo_xl.tokenization_transfo_xl.bptt->min(max_len, max(min_len, int(np.random.normal(bptt, std))))
A:transformers.models.transfo_xl.tokenization_transfo_xl.(data, target, seq_len)->self.get_batch(i, bptt)
A:transformers.models.transfo_xl.tokenization_transfo_xl.target->torch.LongTensor(self.bptt, self.bsz)
A:transformers.models.transfo_xl.tokenization_transfo_xl.streams[i]->next(sent_stream)
A:transformers.models.transfo_xl.tokenization_transfo_xl.n_new->min(len(streams[i]) - 1, self.bptt - n_filled)
A:transformers.models.transfo_xl.tokenization_transfo_xl.n_retain->min(data.size(0), self.ext_len)
A:transformers.models.transfo_xl.tokenization_transfo_xl.sent_stream->self.get_sent_stream(path)
A:transformers.models.transfo_xl.tokenization_transfo_xl.sents->self.vocab.encode_file(path, add_double_eos=True)
A:transformers.models.transfo_xl.tokenization_transfo_xl.vocab->TransfoXLTokenizer.from_pretrained(pretrained_model_name_or_path, *inputs, **kwargs)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus_file->os.path.join(pretrained_model_name_or_path, CORPUS_NAME)
A:transformers.models.transfo_xl.tokenization_transfo_xl.resolved_corpus_file->cached_path(corpus_file, cache_dir=cache_dir)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus->TransfoXLCorpus(datadir, dataset, **kwargs)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus_dict->torch.load(resolved_corpus_file)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus.train->torch.tensor(corpus.train, dtype=torch.long)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus.valid->torch.tensor(corpus.valid, dtype=torch.long)
A:transformers.models.transfo_xl.tokenization_transfo_xl.corpus.test->torch.tensor(corpus.test, dtype=torch.long)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.vocab->TransfoXLTokenizer(*args, **kwargs)
A:transformers.models.transfo_xl.tokenization_transfo_xl.train_path_pattern->os.path.join(path, '1-billion-word-language-modeling-benchmark-r13output', 'training-monolingual.tokenized.shuffled', 'news.en-*')
A:transformers.models.transfo_xl.tokenization_transfo_xl.train_paths->glob.glob(train_path_pattern)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.train->self.vocab.encode_file(os.path.join(path, 'train.txt'), ordered=True, add_eos=False)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.valid->self.vocab.encode_file(os.path.join(path, 'valid.txt'), ordered=False, add_double_eos=True)
A:transformers.models.transfo_xl.tokenization_transfo_xl.self.test->self.vocab.encode_file(os.path.join(path, 'test.txt'), ordered=False, add_double_eos=True)
A:transformers.models.transfo_xl.tokenization_transfo_xl.data_iter->LMShuffledIterator(data, *args, **kwargs)
A:transformers.models.transfo_xl.tokenization_transfo_xl.fn->os.path.join(datadir, 'cache.pt')
A:transformers.models.transfo_xl.tokenization_transfo_xl.fn_pickle->os.path.join(datadir, 'cache.pkl')
A:transformers.models.transfo_xl.tokenization_transfo_xl.kwargs['vocab_file']->os.path.join(datadir, '1b_word_vocab.txt')
transformers.TransfoXLCorpus(self,*args,**kwargs)
transformers.TransfoXLCorpus.build_corpus(self,path,dataset)
transformers.TransfoXLCorpus.from_pretrained(cls,pretrained_model_name_or_path,cache_dir=None,*inputs,**kwargs)
transformers.TransfoXLCorpus.get_iterator(self,split,*args,**kwargs)
transformers.TransfoXLTokenizer(self,special=None,min_freq=0,max_size=None,lower_case=False,delimiter=None,vocab_file=None,pretrained_vocab_file:str=None,never_split=None,unk_token='<unk>',eos_token='<eos>',additional_special_tokens=['<formula>'],language='en',**kwargs)
transformers.TransfoXLTokenizer._build_from_file(self,vocab_file)
transformers.TransfoXLTokenizer._compile_space_around_punctuation_pattern(self)
transformers.TransfoXLTokenizer._convert_id_to_token(self,idx)
transformers.TransfoXLTokenizer._convert_token_to_id(self,sym)
transformers.TransfoXLTokenizer._tokenize(self,line,add_eos=False,add_double_eos=False)
transformers.TransfoXLTokenizer.add_special(self,sym)
transformers.TransfoXLTokenizer.add_symbol(self,sym)
transformers.TransfoXLTokenizer.build_vocab(self)
transformers.TransfoXLTokenizer.convert_to_tensor(self,symbols)
transformers.TransfoXLTokenizer.convert_tokens_to_string(self,tokens)
transformers.TransfoXLTokenizer.count_file(self,path,verbose=False,add_eos=False)
transformers.TransfoXLTokenizer.count_sents(self,sents,verbose=False)
transformers.TransfoXLTokenizer.do_lower_case(self)
transformers.TransfoXLTokenizer.encode_file(self,path,ordered=False,verbose=False,add_eos=True,add_double_eos=False)
transformers.TransfoXLTokenizer.encode_sents(self,sents,ordered=False,verbose=False)
transformers.TransfoXLTokenizer.get_vocab(self)
transformers.TransfoXLTokenizer.moses_pipeline(self,text:str)->List[str]
transformers.TransfoXLTokenizer.moses_punct_norm(self,text)
transformers.TransfoXLTokenizer.moses_tokenize(self,text)
transformers.TransfoXLTokenizer.move_added_token(self,token:str,target_idx:int)
transformers.TransfoXLTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.TransfoXLTokenizer.vocab_size(self)
transformers.models.transfo_xl.tokenization_transfo_xl.LMMultiFileIterator(self,paths,vocab,bsz,bptt,device='cpu',ext_len=None,shuffle=False)
transformers.models.transfo_xl.tokenization_transfo_xl.LMMultiFileIterator.__init__(self,paths,vocab,bsz,bptt,device='cpu',ext_len=None,shuffle=False)
transformers.models.transfo_xl.tokenization_transfo_xl.LMMultiFileIterator.__iter__(self)
transformers.models.transfo_xl.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream(self,path)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator(self,data,bsz,bptt,device='cpu',ext_len=None)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator.__init__(self,data,bsz,bptt,device='cpu',ext_len=None)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator.__iter__(self)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator.get_batch(self,i,bptt=None)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter(self,start=0)
transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator.get_varlen_iter(self,start=0,std=5,min_len=5,max_deviation=3)
transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator(self,data,bsz,bptt,device='cpu',ext_len=None,shuffle=False)
transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator.__init__(self,data,bsz,bptt,device='cpu',ext_len=None,shuffle=False)
transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator.__iter__(self)
transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator.get_sent_stream(self)
transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator.stream_iterator(self,sent_stream)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus(self,*args,**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus.__init__(self,*args,**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus.build_corpus(self,path,dataset)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus.from_pretrained(cls,pretrained_model_name_or_path,cache_dir=None,*inputs,**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus.get_iterator(self,split,*args,**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer(self,special=None,min_freq=0,max_size=None,lower_case=False,delimiter=None,vocab_file=None,pretrained_vocab_file:str=None,never_split=None,unk_token='<unk>',eos_token='<eos>',additional_special_tokens=['<formula>'],language='en',**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.__init__(self,special=None,min_freq=0,max_size=None,lower_case=False,delimiter=None,vocab_file=None,pretrained_vocab_file:str=None,never_split=None,unk_token='<unk>',eos_token='<eos>',additional_special_tokens=['<formula>'],language='en',**kwargs)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file(self,vocab_file)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer._compile_space_around_punctuation_pattern(self)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer._convert_id_to_token(self,idx)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer._convert_token_to_id(self,sym)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer._tokenize(self,line,add_eos=False,add_double_eos=False)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.add_special(self,sym)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol(self,sym)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab(self)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor(self,symbols)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.count_file(self,path,verbose=False,add_eos=False)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.count_sents(self,sents,verbose=False)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.do_lower_case(self)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.encode_file(self,path,ordered=False,verbose=False,add_eos=True,add_double_eos=False)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.encode_sents(self,sents,ordered=False,verbose=False)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.get_vocab(self)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.moses_pipeline(self,text:str)->List[str]
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.moses_punct_norm(self,text)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.moses_tokenize(self,text)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.move_added_token(self,token:str,target_idx:int)
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer.vocab_size(self)
transformers.models.transfo_xl.tokenization_transfo_xl.detokenize_numbers(text:str)->str
transformers.models.transfo_xl.tokenization_transfo_xl.get_lm_corpus(datadir,dataset)
transformers.models.transfo_xl.tokenization_transfo_xl.tokenize_numbers(text_array:List[str])->List[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/ctrl/configuration_ctrl.py----------------------------------------
A:transformers.models.ctrl.configuration_ctrl.logger->utils.logging.get_logger(__name__)
transformers.CTRLConfig(self,vocab_size=246534,n_positions=256,n_ctx=256,n_embd=1280,dff=8192,n_layer=48,n_head=16,resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-06,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.CTRLConfig.hidden_size(self)
transformers.CTRLConfig.max_position_embeddings(self)
transformers.CTRLConfig.num_attention_heads(self)
transformers.CTRLConfig.num_hidden_layers(self)
transformers.models.ctrl.configuration_ctrl.CTRLConfig(self,vocab_size=246534,n_positions=256,n_ctx=256,n_embd=1280,dff=8192,n_layer=48,n_head=16,resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-06,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.models.ctrl.configuration_ctrl.CTRLConfig.__init__(self,vocab_size=246534,n_positions=256,n_ctx=256,n_embd=1280,dff=8192,n_layer=48,n_head=16,resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-06,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,use_cache=True,**kwargs)
transformers.models.ctrl.configuration_ctrl.CTRLConfig.hidden_size(self)
transformers.models.ctrl.configuration_ctrl.CTRLConfig.max_position_embeddings(self)
transformers.models.ctrl.configuration_ctrl.CTRLConfig.num_attention_heads(self)
transformers.models.ctrl.configuration_ctrl.CTRLConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/ctrl/modeling_ctrl.py----------------------------------------
A:transformers.models.ctrl.modeling_ctrl.logger->utils.logging.get_logger(__name__)
A:transformers.models.ctrl.modeling_ctrl.angle_rads->angle_defn(torch.arange(position, dtype=dtype).unsqueeze(1), torch.arange(d_model_size, dtype=dtype).unsqueeze(0), d_model_size)
A:transformers.models.ctrl.modeling_ctrl.sines->torch.sin(angle_rads[:, 0::2])
A:transformers.models.ctrl.modeling_ctrl.cosines->torch.cos(angle_rads[:, 1::2])
A:transformers.models.ctrl.modeling_ctrl.pos_encoding->torch.cat([sines, cosines], dim=-1)
A:transformers.models.ctrl.modeling_ctrl.matmul_qk->torch.matmul(q, k.permute(0, 1, 3, 2))
A:transformers.models.ctrl.modeling_ctrl.attention_weights->torch.softmax(scaled_attention_logits, dim=-1)
A:transformers.models.ctrl.modeling_ctrl.output->self.dense(original_size_attention)
A:transformers.models.ctrl.modeling_ctrl.self.depth->int(d_model_size / self.num_heads)
A:transformers.models.ctrl.modeling_ctrl.self.Wq->prune_linear_layer(self.Wq, index)
A:transformers.models.ctrl.modeling_ctrl.self.Wk->prune_linear_layer(self.Wk, index)
A:transformers.models.ctrl.modeling_ctrl.self.Wv->prune_linear_layer(self.Wv, index)
A:transformers.models.ctrl.modeling_ctrl.self.dense->prune_linear_layer(self.dense, index, dim=1)
A:transformers.models.ctrl.modeling_ctrl.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.ctrl.modeling_ctrl.(heads, index)->find_pruneable_heads_and_indices(heads, self.num_heads, attention_head_size, self.pruned_heads)
A:transformers.models.ctrl.modeling_ctrl.x->x.reshape(batch_size, -1, self.num_heads, self.depth).reshape(batch_size, -1, self.num_heads, self.depth)
A:transformers.models.ctrl.modeling_ctrl.q->self.split_into_heads(q, batch_size)
A:transformers.models.ctrl.modeling_ctrl.k->torch.cat((past_key, k), dim=-2)
A:transformers.models.ctrl.modeling_ctrl.v->torch.cat((past_value, v), dim=-2)
A:transformers.models.ctrl.modeling_ctrl.present->torch.stack((k, v))
A:transformers.models.ctrl.modeling_ctrl.scaled_attention->output[0].permute([0, 2, 1, 3])
A:transformers.models.ctrl.modeling_ctrl.original_size_attention->output[0].permute([0, 2, 1, 3]).reshape(batch_size, -1, self.d_model_size)
A:transformers.models.ctrl.modeling_ctrl.self.multi_head_attention->MultiHeadAttention(d_model_size, num_heads)
A:transformers.models.ctrl.modeling_ctrl.self.ffn->point_wise_feed_forward_network(d_model_size, dff)
A:transformers.models.ctrl.modeling_ctrl.self.layernorm1->torch.nn.LayerNorm(d_model_size, eps=1e-06)
A:transformers.models.ctrl.modeling_ctrl.self.layernorm2->torch.nn.LayerNorm(d_model_size, eps=1e-06)
A:transformers.models.ctrl.modeling_ctrl.self.dropout1->torch.nn.Dropout(rate)
A:transformers.models.ctrl.modeling_ctrl.self.dropout2->torch.nn.Dropout(rate)
A:transformers.models.ctrl.modeling_ctrl.normed->self.layernorm1(x)
A:transformers.models.ctrl.modeling_ctrl.attn_outputs->self.multi_head_attention(normed, normed, normed, mask, layer_past=layer_past, attention_mask=attention_mask, head_mask=head_mask, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.ctrl.modeling_ctrl.attn_output->self.dropout1(attn_output)
A:transformers.models.ctrl.modeling_ctrl.out2->self.layernorm2(out1)
A:transformers.models.ctrl.modeling_ctrl.ffn_output->self.dropout2(ffn_output)
A:transformers.models.ctrl.modeling_ctrl.self.pos_encoding->positional_encoding(config.n_positions, self.d_model_size, torch.float)
A:transformers.models.ctrl.modeling_ctrl.self.w->torch.nn.Embedding(config.vocab_size, config.n_embd)
A:transformers.models.ctrl.modeling_ctrl.self.dropout->torch.nn.Dropout(config.embd_pdrop)
A:transformers.models.ctrl.modeling_ctrl.self.h->torch.nn.ModuleList([EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop) for _ in range(config.n_layer)])
A:transformers.models.ctrl.modeling_ctrl.self.layernorm->torch.nn.LayerNorm(config.n_embd, eps=config.layer_norm_epsilon)
A:transformers.models.ctrl.modeling_ctrl.input_shape->input_ids[:, -1].unsqueeze(-1).size()
A:transformers.models.ctrl.modeling_ctrl.input_ids->input_ids[:, -1].unsqueeze(-1)
A:transformers.models.ctrl.modeling_ctrl.past_length->past_key_values[0][0].size(-2)
A:transformers.models.ctrl.modeling_ctrl.position_ids->position_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1])
A:transformers.models.ctrl.modeling_ctrl.attention_mask->attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.models.ctrl.modeling_ctrl.head_mask->self.get_head_mask(head_mask, self.config.n_layer)
A:transformers.models.ctrl.modeling_ctrl.token_type_ids->token_type_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1])
A:transformers.models.ctrl.modeling_ctrl.token_type_embeds->self.w(token_type_ids)
A:transformers.models.ctrl.modeling_ctrl.inputs_embeds->self.w(input_ids)
A:transformers.models.ctrl.modeling_ctrl.mask->torch.triu(torch.ones(seq_len + past_length, seq_len + past_length), 1).to(inputs_embeds.device)
A:transformers.models.ctrl.modeling_ctrl.pos_embeds->self.pos_encoding[position_ids, :].to(inputs_embeds.device)
A:transformers.models.ctrl.modeling_ctrl.hidden_states->self.layernorm(hidden_states)
A:transformers.models.ctrl.modeling_ctrl.outputs->h(hidden_states, mask, layer_past=layer_past, attention_mask=attention_mask, head_mask=head_mask[i], use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.ctrl.modeling_ctrl.self.transformer->CTRLModel(config)
A:transformers.models.ctrl.modeling_ctrl.self.lm_head->torch.nn.Linear(config.n_embd, config.vocab_size, bias=True)
A:transformers.models.ctrl.modeling_ctrl.transformer_outputs->self.transformer(input_ids, past_key_values=past_key_values, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.ctrl.modeling_ctrl.lm_logits->self.lm_head(hidden_states)
A:transformers.models.ctrl.modeling_ctrl.shift_logits->lm_logits[..., :-1, :].contiguous()
A:transformers.models.ctrl.modeling_ctrl.shift_labels->labels[..., 1:].contiguous()
A:transformers.models.ctrl.modeling_ctrl.loss_fct->CrossEntropyLoss()
A:transformers.models.ctrl.modeling_ctrl.loss->loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.ctrl.modeling_ctrl.self.classifier->torch.nn.Linear(config.n_embd, self.num_labels, bias=False)
A:transformers.models.ctrl.modeling_ctrl.logits->self.classifier(hidden_states)
transformers.CTRLForSequenceClassification(self,config)
transformers.CTRLForSequenceClassification.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.CTRLLMHeadModel(self,config)
transformers.CTRLLMHeadModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.CTRLLMHeadModel.get_output_embeddings(self)
transformers.CTRLLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,use_cache=None,**kwargs)
transformers.CTRLLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.CTRLModel(self,config)
transformers.CTRLModel._prune_heads(self,heads_to_prune)
transformers.CTRLModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.CTRLModel.get_input_embeddings(self)
transformers.CTRLModel.set_input_embeddings(self,new_embeddings)
transformers.CTRLPreTrainedModel(PreTrainedModel)
transformers.CTRLPreTrainedModel._init_weights(self,module)
transformers.models.ctrl.modeling_ctrl.CTRLForSequenceClassification(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLForSequenceClassification.__init__(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLForSequenceClassification.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel.__init__(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel.get_output_embeddings(self)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,use_cache=None,**kwargs)
transformers.models.ctrl.modeling_ctrl.CTRLLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.ctrl.modeling_ctrl.CTRLModel(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLModel.__init__(self,config)
transformers.models.ctrl.modeling_ctrl.CTRLModel._prune_heads(self,heads_to_prune)
transformers.models.ctrl.modeling_ctrl.CTRLModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.ctrl.modeling_ctrl.CTRLModel.get_input_embeddings(self)
transformers.models.ctrl.modeling_ctrl.CTRLModel.set_input_embeddings(self,new_embeddings)
transformers.models.ctrl.modeling_ctrl.CTRLPreTrainedModel(PreTrainedModel)
transformers.models.ctrl.modeling_ctrl.CTRLPreTrainedModel._init_weights(self,module)
transformers.models.ctrl.modeling_ctrl.EncoderLayer(self,d_model_size,num_heads,dff,rate=0.1)
transformers.models.ctrl.modeling_ctrl.EncoderLayer.__init__(self,d_model_size,num_heads,dff,rate=0.1)
transformers.models.ctrl.modeling_ctrl.EncoderLayer.forward(self,x,mask,layer_past=None,attention_mask=None,head_mask=None,use_cache=False,output_attentions=False)
transformers.models.ctrl.modeling_ctrl.MultiHeadAttention(self,d_model_size,num_heads)
transformers.models.ctrl.modeling_ctrl.MultiHeadAttention.__init__(self,d_model_size,num_heads)
transformers.models.ctrl.modeling_ctrl.MultiHeadAttention.forward(self,v,k,q,mask,layer_past=None,attention_mask=None,head_mask=None,use_cache=False,output_attentions=False)
transformers.models.ctrl.modeling_ctrl.MultiHeadAttention.prune_heads(self,heads)
transformers.models.ctrl.modeling_ctrl.MultiHeadAttention.split_into_heads(self,x,batch_size)
transformers.models.ctrl.modeling_ctrl.angle_defn(pos,i,d_model_size)
transformers.models.ctrl.modeling_ctrl.point_wise_feed_forward_network(d_model_size,dff)
transformers.models.ctrl.modeling_ctrl.positional_encoding(position,d_model_size,dtype)
transformers.models.ctrl.modeling_ctrl.scaled_dot_product_attention(q,k,v,mask,attention_mask=None,head_mask=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/ctrl/tokenization_ctrl.py----------------------------------------
A:transformers.models.ctrl.tokenization_ctrl.logger->utils.logging.get_logger(__name__)
A:transformers.models.ctrl.tokenization_ctrl.pairs->get_pairs(word)
A:transformers.models.ctrl.tokenization_ctrl.self.encoder->json.load(vocab_handle)
A:transformers.models.ctrl.tokenization_ctrl.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.ctrl.tokenization_ctrl.word->'@@ '.join(word)
A:transformers.models.ctrl.tokenization_ctrl.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.ctrl.tokenization_ctrl.j->'@@ '.join(word).index(first, i)
A:transformers.models.ctrl.tokenization_ctrl.new_word->tuple(new_word)
A:transformers.models.ctrl.tokenization_ctrl.words->regex.findall('\\S+\\n?', text)
A:transformers.models.ctrl.tokenization_ctrl.out_string->' '.join(tokens).replace('@@ ', '').strip()
A:transformers.models.ctrl.tokenization_ctrl.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.ctrl.tokenization_ctrl.merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
transformers.CTRLTokenizer(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.CTRLTokenizer._convert_id_to_token(self,index)
transformers.CTRLTokenizer._convert_token_to_id(self,token)
transformers.CTRLTokenizer._tokenize(self,text)
transformers.CTRLTokenizer.bpe(self,token)
transformers.CTRLTokenizer.convert_tokens_to_string(self,tokens)
transformers.CTRLTokenizer.get_vocab(self)
transformers.CTRLTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.CTRLTokenizer.vocab_size(self)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.__init__(self,vocab_file,merges_file,unk_token='<unk>',**kwargs)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer._convert_id_to_token(self,index)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer._convert_token_to_id(self,token)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer._tokenize(self,text)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.bpe(self,token)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.get_vocab(self)
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.ctrl.tokenization_ctrl.CTRLTokenizer.vocab_size(self)
transformers.models.ctrl.tokenization_ctrl.get_pairs(word)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/ctrl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/ctrl/modeling_tf_ctrl.py----------------------------------------
A:transformers.models.ctrl.modeling_tf_ctrl.logger->utils.logging.get_logger(__name__)
A:transformers.models.ctrl.modeling_tf_ctrl.angle_rads->angle_defn(np.arange(position)[:, np.newaxis], np.arange(d_model_size)[np.newaxis, :], d_model_size)
A:transformers.models.ctrl.modeling_tf_ctrl.sines->numpy.sin(angle_rads[:, 0::2])
A:transformers.models.ctrl.modeling_tf_ctrl.cosines->numpy.cos(angle_rads[:, 1::2])
A:transformers.models.ctrl.modeling_tf_ctrl.pos_encoding->tensorflow.cast(np.concatenate([sines, cosines], axis=-1), dtype=tf.float32)
A:transformers.models.ctrl.modeling_tf_ctrl.matmul_qk->tensorflow.matmul(q, k, transpose_b=True)
A:transformers.models.ctrl.modeling_tf_ctrl.dk->tensorflow.cast(shape_list(k)[-1], tf.float32)
A:transformers.models.ctrl.modeling_tf_ctrl.attention_weights->tensorflow.nn.softmax(scaled_attention_logits, axis=-1)
A:transformers.models.ctrl.modeling_tf_ctrl.output->self.dense(original_size_attention)
A:transformers.models.ctrl.modeling_tf_ctrl.self.depth->int(d_model_size / self.num_heads)
A:transformers.models.ctrl.modeling_tf_ctrl.self.Wq->tensorflow.keras.layers.Dense(d_model_size, name='Wq')
A:transformers.models.ctrl.modeling_tf_ctrl.self.Wk->tensorflow.keras.layers.Dense(d_model_size, name='Wk')
A:transformers.models.ctrl.modeling_tf_ctrl.self.Wv->tensorflow.keras.layers.Dense(d_model_size, name='Wv')
A:transformers.models.ctrl.modeling_tf_ctrl.self.dense->tensorflow.keras.layers.Dense(d_model_size, name='dense')
A:transformers.models.ctrl.modeling_tf_ctrl.x->tensorflow.reshape(x, (batch_size, -1, self.num_heads, self.depth))
A:transformers.models.ctrl.modeling_tf_ctrl.q->self.split_into_heads(q, batch_size)
A:transformers.models.ctrl.modeling_tf_ctrl.k->tensorflow.concat((past_key, k), axis=-2)
A:transformers.models.ctrl.modeling_tf_ctrl.v->tensorflow.concat((past_value, v), axis=-2)
A:transformers.models.ctrl.modeling_tf_ctrl.(past_key, past_value)->tensorflow.unstack(layer_past, axis=0)
A:transformers.models.ctrl.modeling_tf_ctrl.present->tensorflow.stack((k, v), axis=0)
A:transformers.models.ctrl.modeling_tf_ctrl.scaled_attention->tensorflow.transpose(output[0], perm=[0, 2, 1, 3])
A:transformers.models.ctrl.modeling_tf_ctrl.original_size_attention->tensorflow.reshape(scaled_attention, (batch_size, -1, self.d_model_size))
A:transformers.models.ctrl.modeling_tf_ctrl.self.dense_0->tensorflow.keras.layers.Dense(dff, activation='relu', name='0')
A:transformers.models.ctrl.modeling_tf_ctrl.self.dense_2->tensorflow.keras.layers.Dense(d_model_size, name='2')
A:transformers.models.ctrl.modeling_tf_ctrl.dense_0_output->self.dense_0(inputs)
A:transformers.models.ctrl.modeling_tf_ctrl.dense_2_output->self.dense_2(dense_0_output)
A:transformers.models.ctrl.modeling_tf_ctrl.self.multi_head_attention->TFMultiHeadAttention(d_model_size, num_heads, output_attentions=self.output_attentions, name='multi_head_attention')
A:transformers.models.ctrl.modeling_tf_ctrl.self.ffn->TFPointWiseFeedForwardLayer(d_model_size, dff, name='ffn')
A:transformers.models.ctrl.modeling_tf_ctrl.self.layernorm1->tensorflow.keras.layers.LayerNormalization(epsilon=layer_norm_epsilon, name='layernorm1')
A:transformers.models.ctrl.modeling_tf_ctrl.self.layernorm2->tensorflow.keras.layers.LayerNormalization(epsilon=layer_norm_epsilon, name='layernorm2')
A:transformers.models.ctrl.modeling_tf_ctrl.self.dropout1->tensorflow.keras.layers.Dropout(rate)
A:transformers.models.ctrl.modeling_tf_ctrl.self.dropout2->tensorflow.keras.layers.Dropout(rate)
A:transformers.models.ctrl.modeling_tf_ctrl.normed->self.layernorm1(x)
A:transformers.models.ctrl.modeling_tf_ctrl.attn_outputs->self.multi_head_attention(normed, normed, normed, mask, layer_past, attention_mask, head_mask, use_cache, output_attentions, training=training)
A:transformers.models.ctrl.modeling_tf_ctrl.attn_output->self.dropout1(attn_output, training=training)
A:transformers.models.ctrl.modeling_tf_ctrl.out2->self.layernorm2(out1)
A:transformers.models.ctrl.modeling_tf_ctrl.ffn_output->self.dropout2(ffn_output, training=training)
A:transformers.models.ctrl.modeling_tf_ctrl.self.pos_encoding->positional_encoding(config.n_positions, self.d_model_size)
A:transformers.models.ctrl.modeling_tf_ctrl.self.w->TFSharedEmbeddings(config.vocab_size, config.n_embd, initializer_range=config.initializer_range, name='w')
A:transformers.models.ctrl.modeling_tf_ctrl.self.dropout->tensorflow.keras.layers.Dropout(config.embd_pdrop)
A:transformers.models.ctrl.modeling_tf_ctrl.self.layernorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='layernorm')
A:transformers.models.ctrl.modeling_tf_ctrl.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, past=past, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.ctrl.modeling_tf_ctrl.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.ctrl.modeling_tf_ctrl.inputs['input_ids']->tensorflow.reshape(inputs['input_ids'], [-1, input_shape[-1]])
A:transformers.models.ctrl.modeling_tf_ctrl.inputs['position_ids']->tensorflow.reshape(inputs['position_ids'], [-1, shape_list(inputs['position_ids'])[-1]])
A:transformers.models.ctrl.modeling_tf_ctrl.inputs['attention_mask']->tensorflow.cast(inputs['attention_mask'], tf.float32)
A:transformers.models.ctrl.modeling_tf_ctrl.inputs['token_type_ids']->tensorflow.reshape(inputs['token_type_ids'], [-1, shape_list(inputs['token_type_ids'])[-1]])
A:transformers.models.ctrl.modeling_tf_ctrl.token_type_embeds->self.w(inputs['token_type_ids'], mode='embedding')
A:transformers.models.ctrl.modeling_tf_ctrl.inputs['inputs_embeds']->self.w(inputs['input_ids'], mode='embedding')
A:transformers.models.ctrl.modeling_tf_ctrl.pos_embeds->tensorflow.gather(self.pos_encoding, inputs['position_ids'])
A:transformers.models.ctrl.modeling_tf_ctrl.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.ctrl.modeling_tf_ctrl.outputs->self.transformer(input_ids=inputs['input_ids'], past=inputs['past'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.ctrl.modeling_tf_ctrl.all_attentions->tuple((tf.reshape(t, attention_output_shape) for t in all_attentions))
A:transformers.models.ctrl.modeling_tf_ctrl.self.transformer->TFCTRLMainLayer(config, name='transformer')
A:transformers.models.ctrl.modeling_tf_ctrl.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.ctrl.modeling_tf_ctrl.self.lm_head->TFCTRLLMHead(config, self.transformer.w, name='lm_head')
A:transformers.models.ctrl.modeling_tf_ctrl.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], past=inputs['past'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.ctrl.modeling_tf_ctrl.logits->self.lm_head(hidden_states)
A:transformers.models.ctrl.modeling_tf_ctrl.loss->self.compute_loss(labels, logits)
transformers.TFCTRLLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFCTRLLMHeadModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFCTRLLMHeadModel.get_output_embeddings(self)
transformers.TFCTRLLMHeadModel.get_output_layer_with_bias(self)
transformers.TFCTRLLMHeadModel.get_prefix_bias_name(self)
transformers.TFCTRLLMHeadModel.prepare_inputs_for_generation(self,inputs,past,**kwargs)
transformers.TFCTRLModel(self,config,*inputs,**kwargs)
transformers.TFCTRLModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFCTRLPreTrainedModel(TFPreTrainedModel)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHead(self,config,input_embeddings,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHead.build(self,input_shape)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHead.call(self,hidden_states)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.get_output_embeddings(self)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.get_output_layer_with_bias(self)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.get_prefix_bias_name(self)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel.prepare_inputs_for_generation(self,inputs,past,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer(self,config,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer.__init__(self,config,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer._prune_heads(self,heads_to_prune)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer.get_input_embeddings(self)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer.set_input_embeddings(self,value)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLModel(self,config,*inputs,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLModel.__init__(self,config,*inputs,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFCTRLPreTrainedModel(TFPreTrainedModel)
transformers.models.ctrl.modeling_tf_ctrl.TFEncoderLayer(self,d_model_size,num_heads,dff,rate=0.1,layer_norm_epsilon=1e-06,output_attentions=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFEncoderLayer.__init__(self,d_model_size,num_heads,dff,rate=0.1,layer_norm_epsilon=1e-06,output_attentions=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFEncoderLayer.call(self,x,mask,layer_past,attention_mask,head_mask,use_cache,output_attentions,training=False)
transformers.models.ctrl.modeling_tf_ctrl.TFMultiHeadAttention(self,d_model_size,num_heads,output_attentions=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFMultiHeadAttention.__init__(self,d_model_size,num_heads,output_attentions=False,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFMultiHeadAttention.call(self,v,k,q,mask,layer_past,attention_mask,head_mask,use_cache,output_attentions,training=False)
transformers.models.ctrl.modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads(self,x,batch_size)
transformers.models.ctrl.modeling_tf_ctrl.TFPointWiseFeedForwardLayer(self,d_model_size,dff,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFPointWiseFeedForwardLayer.__init__(self,d_model_size,dff,**kwargs)
transformers.models.ctrl.modeling_tf_ctrl.TFPointWiseFeedForwardLayer.call(self,inputs,trainable=False)
transformers.models.ctrl.modeling_tf_ctrl.angle_defn(pos,i,d_model_size)
transformers.models.ctrl.modeling_tf_ctrl.positional_encoding(position,d_model_size)
transformers.models.ctrl.modeling_tf_ctrl.scaled_dot_product_attention(q,k,v,mask,attention_mask=None,head_mask=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/tokenization_xlm_roberta.py----------------------------------------
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.state->self.__dict__.copy()
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.spm_id->self.sp_model.PieceToId(token)
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.xlm_roberta.tokenization_xlm_roberta.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.XLMRobertaTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.XLMRobertaTokenizer.__getstate__(self)
transformers.XLMRobertaTokenizer.__setstate__(self,d)
transformers.XLMRobertaTokenizer._convert_id_to_token(self,index)
transformers.XLMRobertaTokenizer._convert_token_to_id(self,token)
transformers.XLMRobertaTokenizer._tokenize(self,text)
transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMRobertaTokenizer.convert_tokens_to_string(self,tokens)
transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMRobertaTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLMRobertaTokenizer.get_vocab(self)
transformers.XLMRobertaTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.XLMRobertaTokenizer.vocab_size(self)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.__getstate__(self)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.__init__(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.__setstate__(self,d)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer._convert_id_to_token(self,index)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer._convert_token_to_id(self,token)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer._tokenize(self,text)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.get_vocab(self)
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/modeling_tf_xlm_roberta.py----------------------------------------
A:transformers.models.xlm_roberta.modeling_tf_xlm_roberta.logger->utils.logging.get_logger(__name__)
transformers.TFXLMRobertaForMaskedLM(TFRobertaForMaskedLM)
transformers.TFXLMRobertaForMultipleChoice(TFRobertaForMultipleChoice)
transformers.TFXLMRobertaForQuestionAnswering(TFRobertaForQuestionAnswering)
transformers.TFXLMRobertaForSequenceClassification(TFRobertaForSequenceClassification)
transformers.TFXLMRobertaForTokenClassification(TFRobertaForTokenClassification)
transformers.TFXLMRobertaModel(TFRobertaModel)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMaskedLM(TFRobertaForMaskedLM)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMultipleChoice(TFRobertaForMultipleChoice)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForQuestionAnswering(TFRobertaForQuestionAnswering)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForSequenceClassification(TFRobertaForSequenceClassification)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForTokenClassification(TFRobertaForTokenClassification)
transformers.models.xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaModel(TFRobertaModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/modeling_xlm_roberta.py----------------------------------------
A:transformers.models.xlm_roberta.modeling_xlm_roberta.logger->utils.logging.get_logger(__name__)
transformers.XLMRobertaForCausalLM(RobertaForCausalLM)
transformers.XLMRobertaForMaskedLM(RobertaForMaskedLM)
transformers.XLMRobertaForMultipleChoice(RobertaForMultipleChoice)
transformers.XLMRobertaForQuestionAnswering(RobertaForQuestionAnswering)
transformers.XLMRobertaForSequenceClassification(RobertaForSequenceClassification)
transformers.XLMRobertaForTokenClassification(RobertaForTokenClassification)
transformers.XLMRobertaModel(RobertaModel)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForCausalLM(RobertaForCausalLM)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForMaskedLM(RobertaForMaskedLM)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForMultipleChoice(RobertaForMultipleChoice)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForQuestionAnswering(RobertaForQuestionAnswering)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForSequenceClassification(RobertaForSequenceClassification)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaForTokenClassification(RobertaForTokenClassification)
transformers.models.xlm_roberta.modeling_xlm_roberta.XLMRobertaModel(RobertaModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/configuration_xlm_roberta.py----------------------------------------
A:transformers.models.xlm_roberta.configuration_xlm_roberta.logger->utils.logging.get_logger(__name__)
transformers.XLMRobertaConfig(RobertaConfig)
transformers.models.xlm_roberta.configuration_xlm_roberta.XLMRobertaConfig(RobertaConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/tokenization_xlm_roberta_fast.py----------------------------------------
A:transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.XLMRobertaTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMRobertaTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLMRobertaTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_roberta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/convert_gpt2_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.config->transformers.GPT2Config.from_json_file(gpt2_config_file)
A:transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.model->GPT2Model(config)
A:transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch(gpt2_checkpoint_path,gpt2_config_file,pytorch_dump_folder_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/configuration_gpt2.py----------------------------------------
A:transformers.models.gpt2.configuration_gpt2.logger->utils.logging.get_logger(__name__)
transformers.GPT2Config(self,vocab_size=50257,n_positions=1024,n_ctx=1024,n_embd=768,n_layer=12,n_head=12,n_inner=None,activation_function='gelu_new',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,gradient_checkpointing=False,use_cache=True,bos_token_id=50256,eos_token_id=50256,**kwargs)
transformers.GPT2Config.hidden_size(self)
transformers.GPT2Config.max_position_embeddings(self)
transformers.GPT2Config.num_attention_heads(self)
transformers.GPT2Config.num_hidden_layers(self)
transformers.models.gpt2.configuration_gpt2.GPT2Config(self,vocab_size=50257,n_positions=1024,n_ctx=1024,n_embd=768,n_layer=12,n_head=12,n_inner=None,activation_function='gelu_new',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,gradient_checkpointing=False,use_cache=True,bos_token_id=50256,eos_token_id=50256,**kwargs)
transformers.models.gpt2.configuration_gpt2.GPT2Config.__init__(self,vocab_size=50257,n_positions=1024,n_ctx=1024,n_embd=768,n_layer=12,n_head=12,n_inner=None,activation_function='gelu_new',resid_pdrop=0.1,embd_pdrop=0.1,attn_pdrop=0.1,layer_norm_epsilon=1e-05,initializer_range=0.02,summary_type='cls_index',summary_use_proj=True,summary_activation=None,summary_proj_to_labels=True,summary_first_dropout=0.1,gradient_checkpointing=False,use_cache=True,bos_token_id=50256,eos_token_id=50256,**kwargs)
transformers.models.gpt2.configuration_gpt2.GPT2Config.hidden_size(self)
transformers.models.gpt2.configuration_gpt2.GPT2Config.max_position_embeddings(self)
transformers.models.gpt2.configuration_gpt2.GPT2Config.num_attention_heads(self)
transformers.models.gpt2.configuration_gpt2.GPT2Config.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/tokenization_gpt2.py----------------------------------------
A:transformers.models.gpt2.tokenization_gpt2.logger->utils.logging.get_logger(__name__)
A:transformers.models.gpt2.tokenization_gpt2.pairs->get_pairs(word)
A:transformers.models.gpt2.tokenization_gpt2.self.encoder->json.load(vocab_handle)
A:transformers.models.gpt2.tokenization_gpt2.self.byte_encoder->bytes_to_unicode()
A:transformers.models.gpt2.tokenization_gpt2.self.bpe_ranks->dict(zip(bpe_merges, range(len(bpe_merges))))
A:transformers.models.gpt2.tokenization_gpt2.self.pat->regex.compile("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+")
A:transformers.models.gpt2.tokenization_gpt2.word->' '.join(word)
A:transformers.models.gpt2.tokenization_gpt2.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.gpt2.tokenization_gpt2.j->' '.join(word).index(first, i)
A:transformers.models.gpt2.tokenization_gpt2.new_word->tuple(new_word)
A:transformers.models.gpt2.tokenization_gpt2.token->''.join((self.byte_encoder[b] for b in token.encode('utf-8')))
A:transformers.models.gpt2.tokenization_gpt2.text->bytearray([self.byte_decoder[c] for c in text]).decode('utf-8', errors=self.errors)
A:transformers.models.gpt2.tokenization_gpt2.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.gpt2.tokenization_gpt2.merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
A:transformers.models.gpt2.tokenization_gpt2.add_prefix_space->kwargs.pop('add_prefix_space', self.add_prefix_space)
transformers.GPT2Tokenizer(self,vocab_file,merges_file,errors='replace',unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.GPT2Tokenizer._convert_id_to_token(self,index)
transformers.GPT2Tokenizer._convert_token_to_id(self,token)
transformers.GPT2Tokenizer._tokenize(self,text)
transformers.GPT2Tokenizer.bpe(self,token)
transformers.GPT2Tokenizer.convert_tokens_to_string(self,tokens)
transformers.GPT2Tokenizer.get_vocab(self)
transformers.GPT2Tokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)
transformers.GPT2Tokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.GPT2Tokenizer.vocab_size(self)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer(self,vocab_file,merges_file,errors='replace',unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.__init__(self,vocab_file,merges_file,errors='replace',unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer._convert_id_to_token(self,index)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer._convert_token_to_id(self,token)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer._tokenize(self,text)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.bpe(self,token)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_string(self,tokens)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.get_vocab(self)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.gpt2.tokenization_gpt2.GPT2Tokenizer.vocab_size(self)
transformers.models.gpt2.tokenization_gpt2.bytes_to_unicode()
transformers.models.gpt2.tokenization_gpt2.get_pairs(word)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/tokenization_gpt2_fast.py----------------------------------------
A:transformers.models.gpt2.tokenization_gpt2_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.gpt2.tokenization_gpt2_fast.pre_tok_state->json.loads(self.backend_tokenizer.pre_tokenizer.__getstate__())
A:transformers.models.gpt2.tokenization_gpt2_fast.pre_tok_class->getattr(pre_tokenizers, pre_tok_state.pop('type'))
A:transformers.models.gpt2.tokenization_gpt2_fast.self.backend_tokenizer.pre_tokenizer->pre_tok_class(**pre_tok_state)
A:transformers.models.gpt2.tokenization_gpt2_fast.is_split_into_words->kwargs.get('is_split_into_words', False)
A:transformers.models.gpt2.tokenization_gpt2_fast.files->self._tokenizer.model.save(save_directory, name=filename_prefix)
transformers.GPT2TokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.GPT2TokenizerFast._batch_encode_plus(self,*args,**kwargs)->BatchEncoding
transformers.GPT2TokenizerFast._encode_plus(self,*args,**kwargs)->BatchEncoding
transformers.GPT2TokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.gpt2.tokenization_gpt2_fast.GPT2TokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.models.gpt2.tokenization_gpt2_fast.GPT2TokenizerFast.__init__(self,vocab_file,merges_file,tokenizer_file=None,unk_token='<|endoftext|>',bos_token='<|endoftext|>',eos_token='<|endoftext|>',add_prefix_space=False,**kwargs)
transformers.models.gpt2.tokenization_gpt2_fast.GPT2TokenizerFast._batch_encode_plus(self,*args,**kwargs)->BatchEncoding
transformers.models.gpt2.tokenization_gpt2_fast.GPT2TokenizerFast._encode_plus(self,*args,**kwargs)->BatchEncoding
transformers.models.gpt2.tokenization_gpt2_fast.GPT2TokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/modeling_tf_gpt2.py----------------------------------------
A:transformers.models.gpt2.modeling_tf_gpt2.logger->utils.logging.get_logger(__name__)
A:transformers.models.gpt2.modeling_tf_gpt2.self.c_attn->TFConv1D(n_state * 3, nx, initializer_range=config.initializer_range, name='c_attn')
A:transformers.models.gpt2.modeling_tf_gpt2.self.c_proj->TFConv1D(nx, n_state, initializer_range=config.initializer_range, name='c_proj')
A:transformers.models.gpt2.modeling_tf_gpt2.self.attn_dropout->tensorflow.keras.layers.Dropout(config.attn_pdrop)
A:transformers.models.gpt2.modeling_tf_gpt2.self.resid_dropout->tensorflow.keras.layers.Dropout(config.resid_pdrop)
A:transformers.models.gpt2.modeling_tf_gpt2.self.pruned_heads->set()
A:transformers.models.gpt2.modeling_tf_gpt2.j->tensorflow.range(ns)
A:transformers.models.gpt2.modeling_tf_gpt2.w->self.attn_dropout(w, training=training)
A:transformers.models.gpt2.modeling_tf_gpt2.dk->tensorflow.cast(shape_list(k)[-1], dtype=w.dtype)
A:transformers.models.gpt2.modeling_tf_gpt2.(_, _, nd, ns)->shape_list(w)
A:transformers.models.gpt2.modeling_tf_gpt2.b->tensorflow.reshape(b, [1, 1, nd, ns])
A:transformers.models.gpt2.modeling_tf_gpt2.x->self.c_attn(x)
A:transformers.models.gpt2.modeling_tf_gpt2.x_shape->shape_list(x)
A:transformers.models.gpt2.modeling_tf_gpt2.(query, key, value)->tensorflow.split(x, 3, axis=2)
A:transformers.models.gpt2.modeling_tf_gpt2.query->self.split_heads(query)
A:transformers.models.gpt2.modeling_tf_gpt2.key->tensorflow.concat([past_key, key], axis=-2)
A:transformers.models.gpt2.modeling_tf_gpt2.value->tensorflow.concat([past_value, value], axis=-2)
A:transformers.models.gpt2.modeling_tf_gpt2.(past_key, past_value)->tensorflow.unstack(layer_past, axis=0)
A:transformers.models.gpt2.modeling_tf_gpt2.present->tensorflow.stack([key, value], axis=0)
A:transformers.models.gpt2.modeling_tf_gpt2.attn_outputs->self._attn(query, key, value, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.gpt2.modeling_tf_gpt2.a->self.ln_1(x)
A:transformers.models.gpt2.modeling_tf_gpt2.self.c_fc->TFConv1D(n_state, nx, initializer_range=config.initializer_range, name='c_fc')
A:transformers.models.gpt2.modeling_tf_gpt2.self.act->get_tf_activation('gelu')
A:transformers.models.gpt2.modeling_tf_gpt2.self.dropout->tensorflow.keras.layers.Dropout(config.resid_pdrop)
A:transformers.models.gpt2.modeling_tf_gpt2.h->self.act(self.c_fc(x))
A:transformers.models.gpt2.modeling_tf_gpt2.h2->self.dropout(h2, training=training)
A:transformers.models.gpt2.modeling_tf_gpt2.self.ln_1->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='ln_1')
A:transformers.models.gpt2.modeling_tf_gpt2.self.attn->TFAttention(nx, n_ctx, config, scale, name='attn')
A:transformers.models.gpt2.modeling_tf_gpt2.self.ln_2->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='ln_2')
A:transformers.models.gpt2.modeling_tf_gpt2.self.mlp->TFMLP(inner_dim, config, name='mlp')
A:transformers.models.gpt2.modeling_tf_gpt2.output_attn->self.attn(a, layer_past, attention_mask, head_mask, use_cache, output_attentions, training=training)
A:transformers.models.gpt2.modeling_tf_gpt2.m->self.mlp(m, training=training)
A:transformers.models.gpt2.modeling_tf_gpt2.self.wte->TFSharedEmbeddings(config.vocab_size, config.hidden_size, initializer_range=config.initializer_range, name='wte')
A:transformers.models.gpt2.modeling_tf_gpt2.self.wpe->tensorflow.keras.layers.Embedding(config.n_positions, config.n_embd, embeddings_initializer=get_initializer(config.initializer_range), name='wpe')
A:transformers.models.gpt2.modeling_tf_gpt2.self.drop->tensorflow.keras.layers.Dropout(config.embd_pdrop)
A:transformers.models.gpt2.modeling_tf_gpt2.self.ln_f->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_epsilon, name='ln_f')
A:transformers.models.gpt2.modeling_tf_gpt2.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, past=past, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.gpt2.modeling_tf_gpt2.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.gpt2.modeling_tf_gpt2.inputs['input_ids']->tensorflow.reshape(inputs['input_ids'], [-1, input_shape[-1]])
A:transformers.models.gpt2.modeling_tf_gpt2.inputs['attention_mask']->tensorflow.cast(inputs['attention_mask'], tf.float32)
A:transformers.models.gpt2.modeling_tf_gpt2.inputs['position_ids']->tensorflow.reshape(inputs['position_ids'], [-1, shape_list(inputs['position_ids'])[-1]])
A:transformers.models.gpt2.modeling_tf_gpt2.inputs['inputs_embeds']->self.wte(inputs['input_ids'], mode='embedding')
A:transformers.models.gpt2.modeling_tf_gpt2.position_embeds->tensorflow.cast(position_embeds, dtype=inputs['inputs_embeds'].dtype)
A:transformers.models.gpt2.modeling_tf_gpt2.inputs['token_type_ids']->tensorflow.reshape(inputs['token_type_ids'], [-1, shape_list(inputs['token_type_ids'])[-1]])
A:transformers.models.gpt2.modeling_tf_gpt2.token_type_embeds->tensorflow.cast(token_type_embeds, dtype=inputs['inputs_embeds'].dtype)
A:transformers.models.gpt2.modeling_tf_gpt2.hidden_states->tensorflow.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])
A:transformers.models.gpt2.modeling_tf_gpt2.outputs->self.transformer(input_ids=inputs['input_ids'], past=inputs['past'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.gpt2.modeling_tf_gpt2.all_attentions->tuple((tf.reshape(t, attention_output_shape) for t in all_attentions))
A:transformers.models.gpt2.modeling_tf_gpt2.self.transformer->TFGPT2MainLayer(config, name='transformer')
A:transformers.models.gpt2.modeling_tf_gpt2.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], past=inputs['past'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.gpt2.modeling_tf_gpt2.logits->self.score(hidden_states)
A:transformers.models.gpt2.modeling_tf_gpt2.loss->self.compute_loss(tf.reshape(inputs['labels'], [-1]), tf.reshape(in_logits, [-1, self.num_labels]))
A:transformers.models.gpt2.modeling_tf_gpt2.self.multiple_choice_head->TFSequenceSummary(config, initializer_range=config.initializer_range, name='multiple_choice_head')
A:transformers.models.gpt2.modeling_tf_gpt2.input_shapes->shape_list(inputs['input_ids'])
A:transformers.models.gpt2.modeling_tf_gpt2.lm_logits->self.transformer.wte(hidden_states, mode='linear')
A:transformers.models.gpt2.modeling_tf_gpt2.mc_logits->tensorflow.squeeze(mc_logits, axis=-1)
A:transformers.models.gpt2.modeling_tf_gpt2.self.score->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='score', use_bias=False)
A:transformers.models.gpt2.modeling_tf_gpt2.logits_shape->shape_list(logits)
A:transformers.models.gpt2.modeling_tf_gpt2.result->tensorflow.map_fn(fn=lambda t: get_seq_element(t[0], t[1]), elems=[sequence_lengths, logits], dtype='float')
A:transformers.models.gpt2.modeling_tf_gpt2.in_logits->tensorflow.reshape(result, [logits_shape[0], logits_shape[-1]])
transformers.TFGPT2DoubleHeadsModel(self,config,*inputs,**kwargs)
transformers.TFGPT2DoubleHeadsModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFGPT2DoubleHeadsModel.get_output_embeddings(self)
transformers.TFGPT2DoubleHeadsModelOutput(ModelOutput)
transformers.TFGPT2ForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFGPT2ForSequenceClassification.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFGPT2ForSequenceClassification.get_output_embeddings(self)
transformers.TFGPT2LMHeadModel(self,config,*inputs,**kwargs)
transformers.TFGPT2LMHeadModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFGPT2LMHeadModel.get_output_embeddings(self)
transformers.TFGPT2LMHeadModel.prepare_inputs_for_generation(self,inputs,past,**kwargs)
transformers.TFGPT2MainLayer(self,config,*inputs,**kwargs)
transformers.TFGPT2MainLayer._prune_heads(self,heads_to_prune)
transformers.TFGPT2MainLayer.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFGPT2MainLayer.get_input_embeddings(self)
transformers.TFGPT2MainLayer.set_input_embeddings(self,value)
transformers.TFGPT2Model(self,config,*inputs,**kwargs)
transformers.TFGPT2Model.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFGPT2PreTrainedModel(TFPreTrainedModel)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention(self,nx,n_ctx,config,scale=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.__init__(self,nx,n_ctx,config,scale=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention._attn(self,q,k,v,attention_mask,head_mask,output_attentions,training=False)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.call(self,x,layer_past,attention_mask,head_mask,use_cache,output_attentions,training=False)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.causal_attention_mask(nd,ns,dtype)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.merge_heads(self,x)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.prune_heads(self,heads)
transformers.models.gpt2.modeling_tf_gpt2.TFAttention.split_heads(self,x)
transformers.models.gpt2.modeling_tf_gpt2.TFBlock(self,n_ctx,config,scale=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFBlock.__init__(self,n_ctx,config,scale=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFBlock.call(self,x,layer_past,attention_mask,head_mask,use_cache,output_attentions,training=False)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModel(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.__init__(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.get_output_embeddings(self)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModelOutput(ModelOutput)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification.get_output_embeddings(self)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel.get_output_embeddings(self)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel.prepare_inputs_for_generation(self,inputs,past,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer.__init__(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer._prune_heads(self,heads_to_prune)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer.get_input_embeddings(self)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer.set_input_embeddings(self,value)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2Model(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2Model.__init__(self,config,*inputs,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2Model.call(self,input_ids=None,past=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFGPT2PreTrainedModel(TFPreTrainedModel)
transformers.models.gpt2.modeling_tf_gpt2.TFMLP(self,n_state,config,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFMLP.__init__(self,n_state,config,**kwargs)
transformers.models.gpt2.modeling_tf_gpt2.TFMLP.call(self,x,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/gpt2/modeling_gpt2.py----------------------------------------
A:transformers.models.gpt2.modeling_gpt2.logger->utils.logging.get_logger(__name__)
A:transformers.models.gpt2.modeling_gpt2.tf_path->os.path.abspath(gpt2_checkpoint_path)
A:transformers.models.gpt2.modeling_gpt2.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.gpt2.modeling_gpt2.array->tensorflow.train.load_variable(tf_path, name)
A:transformers.models.gpt2.modeling_gpt2.name->name.split('/').split('/')
A:transformers.models.gpt2.modeling_gpt2.scope_names->re.split('(\\d+)', m_name)
A:transformers.models.gpt2.modeling_gpt2.pointer->getattr(pointer, scope_names[0])
A:transformers.models.gpt2.modeling_gpt2.num->int(scope_names[1])
A:transformers.models.gpt2.modeling_gpt2.pointer.data->torch.from_numpy(array)
A:transformers.models.gpt2.modeling_gpt2.self.c_attn->prune_conv1d_layer(self.c_attn, index_attn, dim=1)
A:transformers.models.gpt2.modeling_gpt2.self.q_attn->Conv1D(n_state, nx)
A:transformers.models.gpt2.modeling_gpt2.self.c_proj->Conv1D(nx, n_state)
A:transformers.models.gpt2.modeling_gpt2.self.attn_dropout->torch.nn.Dropout(config.attn_pdrop)
A:transformers.models.gpt2.modeling_gpt2.self.resid_dropout->torch.nn.Dropout(config.resid_pdrop)
A:transformers.models.gpt2.modeling_gpt2.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.gpt2.modeling_gpt2.(heads, index)->find_pruneable_heads_and_indices(heads, self.n_head, self.split_size // self.n_head, self.pruned_heads)
A:transformers.models.gpt2.modeling_gpt2.index_attn->torch.cat([index, index + self.split_size, index + 2 * self.split_size])
A:transformers.models.gpt2.modeling_gpt2.w->self.attn_dropout(w)
A:transformers.models.gpt2.modeling_gpt2.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.gpt2.modeling_gpt2.query->self.split_heads(query)
A:transformers.models.gpt2.modeling_gpt2.(key, value)->self.c_attn(encoder_hidden_states).split(self.split_size, dim=2)
A:transformers.models.gpt2.modeling_gpt2.(query, key, value)->self.c_attn(hidden_states).split(self.split_size, dim=2)
A:transformers.models.gpt2.modeling_gpt2.key->torch.cat((past_key, key), dim=-1)
A:transformers.models.gpt2.modeling_gpt2.value->torch.cat((past_value, value), dim=-2)
A:transformers.models.gpt2.modeling_gpt2.present->torch.stack((key.transpose(-2, -1), value))
A:transformers.models.gpt2.modeling_gpt2.attn_outputs->self.attn(self.ln_1(hidden_states), layer_past=layer_past, attention_mask=attention_mask, head_mask=head_mask, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.gpt2.modeling_gpt2.a->self.resid_dropout(a)
A:transformers.models.gpt2.modeling_gpt2.self.c_fc->Conv1D(n_state, nx)
A:transformers.models.gpt2.modeling_gpt2.self.dropout->torch.nn.Dropout(config.resid_pdrop)
A:transformers.models.gpt2.modeling_gpt2.h->self.act(self.c_fc(x))
A:transformers.models.gpt2.modeling_gpt2.h2->self.c_proj(h)
A:transformers.models.gpt2.modeling_gpt2.self.ln_1->torch.nn.LayerNorm(hidden_size, eps=config.layer_norm_epsilon)
A:transformers.models.gpt2.modeling_gpt2.self.attn->Attention(hidden_size, n_ctx, config, scale)
A:transformers.models.gpt2.modeling_gpt2.self.ln_2->torch.nn.LayerNorm(hidden_size, eps=config.layer_norm_epsilon)
A:transformers.models.gpt2.modeling_gpt2.self.crossattention->Attention(hidden_size, n_ctx, config, scale, is_cross_attention=True)
A:transformers.models.gpt2.modeling_gpt2.self.ln_cross_attn->torch.nn.LayerNorm(hidden_size, eps=config.layer_norm_epsilon)
A:transformers.models.gpt2.modeling_gpt2.self.mlp->MLP(inner_dim, config)
A:transformers.models.gpt2.modeling_gpt2.cross_attn_outputs->self.crossattention(self.ln_cross_attn(hidden_states), attention_mask=attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, output_attentions=output_attentions)
A:transformers.models.gpt2.modeling_gpt2.feed_forward_hidden_states->self.mlp(self.ln_2(hidden_states))
A:transformers.models.gpt2.modeling_gpt2.self.wte->self.wte.to('cpu')
A:transformers.models.gpt2.modeling_gpt2.self.wpe->self.wpe.to('cpu')
A:transformers.models.gpt2.modeling_gpt2.self.drop->torch.nn.Dropout(config.embd_pdrop)
A:transformers.models.gpt2.modeling_gpt2.self.h->torch.nn.ModuleList([Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)])
A:transformers.models.gpt2.modeling_gpt2.self.ln_f->self.ln_f.to('cpu')
A:transformers.models.gpt2.modeling_gpt2.self.h[block]->self.h[block].to(cuda_device)
A:transformers.models.gpt2.modeling_gpt2.self.h[index]->self.h[index].to('cpu')
A:transformers.models.gpt2.modeling_gpt2.input_shape->input_ids[:, -1].unsqueeze(-1).size()
A:transformers.models.gpt2.modeling_gpt2.input_ids->input_ids[:, -1].unsqueeze(-1)
A:transformers.models.gpt2.modeling_gpt2.token_type_ids->token_type_ids[:, -1].unsqueeze(-1)
A:transformers.models.gpt2.modeling_gpt2.position_ids->position_ids[:, -1].unsqueeze(-1)
A:transformers.models.gpt2.modeling_gpt2.past_length->past_key_values[0][0].size(-2)
A:transformers.models.gpt2.modeling_gpt2.attention_mask->kwargs.get('attention_mask', None)
A:transformers.models.gpt2.modeling_gpt2.(encoder_batch_size, encoder_sequence_length, _)->encoder_hidden_states.size()
A:transformers.models.gpt2.modeling_gpt2.encoder_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.gpt2.modeling_gpt2.head_mask->head_mask.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.gpt2.modeling_gpt2.inputs_embeds->self.wte(input_ids)
A:transformers.models.gpt2.modeling_gpt2.position_embeds->self.wpe(position_ids)
A:transformers.models.gpt2.modeling_gpt2.token_type_embeds->self.wte(token_type_ids)
A:transformers.models.gpt2.modeling_gpt2.hidden_states->hidden_states.to(self.lm_head.weight.device).to(self.lm_head.weight.device)
A:transformers.models.gpt2.modeling_gpt2.layer_past->layer_past.to(hidden_states.device).to(hidden_states.device)
A:transformers.models.gpt2.modeling_gpt2.outputs->block(hidden_states, layer_past=layer_past, attention_mask=attention_mask, head_mask=head_mask[i], encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, use_cache=use_cache, output_attentions=output_attentions)
A:transformers.models.gpt2.modeling_gpt2.self.transformer->GPT2Model(config)
A:transformers.models.gpt2.modeling_gpt2.self.lm_head->torch.nn.Linear(config.n_embd, config.vocab_size, bias=False)
A:transformers.models.gpt2.modeling_gpt2.transformer_outputs->self.transformer(input_ids, past_key_values=past_key_values, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.gpt2.modeling_gpt2.lm_logits->self.lm_head(hidden_states)
A:transformers.models.gpt2.modeling_gpt2.shift_logits->lm_logits[..., :-1, :].contiguous()
A:transformers.models.gpt2.modeling_gpt2.shift_labels->labels[..., 1:].contiguous()
A:transformers.models.gpt2.modeling_gpt2.loss_fct->CrossEntropyLoss()
A:transformers.models.gpt2.modeling_gpt2.loss->loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.gpt2.modeling_gpt2.self.multiple_choice_head->SequenceSummary(config)
A:transformers.models.gpt2.modeling_gpt2.mc_logits->self.multiple_choice_head(hidden_states, mc_token_ids).squeeze(-1)
A:transformers.models.gpt2.modeling_gpt2.mc_loss->loss_fct(mc_logits.view(-1, mc_logits.size(-1)), mc_labels.view(-1))
A:transformers.models.gpt2.modeling_gpt2.lm_loss->loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))
A:transformers.models.gpt2.modeling_gpt2.self.score->torch.nn.Linear(config.n_embd, self.num_labels, bias=False)
A:transformers.models.gpt2.modeling_gpt2.logits->self.score(hidden_states)
transformers.GPT2DoubleHeadsModel(self,config)
transformers.GPT2DoubleHeadsModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,labels=None,mc_labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.GPT2DoubleHeadsModel.get_output_embeddings(self)
transformers.GPT2DoubleHeadsModel.prepare_inputs_for_generation(self,input_ids,past=None,**kwargs)
transformers.GPT2DoubleHeadsModel.set_output_embeddings(self,new_embeddings)
transformers.GPT2DoubleHeadsModelOutput(ModelOutput)
transformers.GPT2ForSequenceClassification(self,config)
transformers.GPT2ForSequenceClassification.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.GPT2LMHeadModel(self,config)
transformers.GPT2LMHeadModel.deparallelize(self)
transformers.GPT2LMHeadModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.GPT2LMHeadModel.get_output_embeddings(self)
transformers.GPT2LMHeadModel.parallelize(self,device_map=None)
transformers.GPT2LMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,**kwargs)
transformers.GPT2LMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.GPT2Model(self,config)
transformers.GPT2Model._prune_heads(self,heads_to_prune)
transformers.GPT2Model.deparallelize(self)
transformers.GPT2Model.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.GPT2Model.get_input_embeddings(self)
transformers.GPT2Model.parallelize(self,device_map=None)
transformers.GPT2Model.set_input_embeddings(self,new_embeddings)
transformers.GPT2PreTrainedModel(self,*inputs,**kwargs)
transformers.GPT2PreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_gpt2(model,config,gpt2_checkpoint_path)
transformers.models.gpt2.modeling_gpt2.Attention(self,nx,n_ctx,config,scale=False,is_cross_attention=False)
transformers.models.gpt2.modeling_gpt2.Attention.__init__(self,nx,n_ctx,config,scale=False,is_cross_attention=False)
transformers.models.gpt2.modeling_gpt2.Attention._attn(self,q,k,v,attention_mask=None,head_mask=None,output_attentions=False)
transformers.models.gpt2.modeling_gpt2.Attention.forward(self,hidden_states,layer_past=None,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,use_cache=False,output_attentions=False)
transformers.models.gpt2.modeling_gpt2.Attention.merge_heads(self,x)
transformers.models.gpt2.modeling_gpt2.Attention.prune_heads(self,heads)
transformers.models.gpt2.modeling_gpt2.Attention.split_heads(self,x,k=False)
transformers.models.gpt2.modeling_gpt2.Block(self,n_ctx,config,scale=False)
transformers.models.gpt2.modeling_gpt2.Block.__init__(self,n_ctx,config,scale=False)
transformers.models.gpt2.modeling_gpt2.Block.forward(self,hidden_states,layer_past=None,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,use_cache=False,output_attentions=False)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel.__init__(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,mc_token_ids=None,labels=None,mc_labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel.get_output_embeddings(self)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel.prepare_inputs_for_generation(self,input_ids,past=None,**kwargs)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModel.set_output_embeddings(self,new_embeddings)
transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModelOutput(ModelOutput)
transformers.models.gpt2.modeling_gpt2.GPT2ForSequenceClassification(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2ForSequenceClassification.__init__(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2ForSequenceClassification.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.__init__(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.deparallelize(self)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.get_output_embeddings(self)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.parallelize(self,device_map=None)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,**kwargs)
transformers.models.gpt2.modeling_gpt2.GPT2LMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.gpt2.modeling_gpt2.GPT2Model(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2Model.__init__(self,config)
transformers.models.gpt2.modeling_gpt2.GPT2Model._prune_heads(self,heads_to_prune)
transformers.models.gpt2.modeling_gpt2.GPT2Model.deparallelize(self)
transformers.models.gpt2.modeling_gpt2.GPT2Model.forward(self,input_ids=None,past_key_values=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.gpt2.modeling_gpt2.GPT2Model.get_input_embeddings(self)
transformers.models.gpt2.modeling_gpt2.GPT2Model.parallelize(self,device_map=None)
transformers.models.gpt2.modeling_gpt2.GPT2Model.set_input_embeddings(self,new_embeddings)
transformers.models.gpt2.modeling_gpt2.GPT2PreTrainedModel(self,*inputs,**kwargs)
transformers.models.gpt2.modeling_gpt2.GPT2PreTrainedModel.__init__(self,*inputs,**kwargs)
transformers.models.gpt2.modeling_gpt2.GPT2PreTrainedModel._init_weights(self,module)
transformers.models.gpt2.modeling_gpt2.MLP(self,n_state,config)
transformers.models.gpt2.modeling_gpt2.MLP.__init__(self,n_state,config)
transformers.models.gpt2.modeling_gpt2.MLP.forward(self,x)
transformers.models.gpt2.modeling_gpt2.load_tf_weights_in_gpt2(model,config,gpt2_checkpoint_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mmbt/configuration_mmbt.py----------------------------------------
A:transformers.models.mmbt.configuration_mmbt.logger->utils.logging.get_logger(__name__)
transformers.MMBTConfig(self,config,num_labels=None,modal_hidden_size=2048)
transformers.models.mmbt.configuration_mmbt.MMBTConfig(self,config,num_labels=None,modal_hidden_size=2048)
transformers.models.mmbt.configuration_mmbt.MMBTConfig.__init__(self,config,num_labels=None,modal_hidden_size=2048)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mmbt/modeling_mmbt.py----------------------------------------
A:transformers.models.mmbt.modeling_mmbt.logger->utils.logging.get_logger(__name__)
A:transformers.models.mmbt.modeling_mmbt.self.proj_embeddings->torch.nn.Linear(config.modal_hidden_size, config.hidden_size)
A:transformers.models.mmbt.modeling_mmbt.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.mmbt.modeling_mmbt.token_embeddings->torch.cat([token_embeddings, end_token_embeds.unsqueeze(1)], dim=1)
A:transformers.models.mmbt.modeling_mmbt.seq_length->torch.cat([token_embeddings, end_token_embeds.unsqueeze(1)], dim=1).size(1)
A:transformers.models.mmbt.modeling_mmbt.start_token_embeds->self.word_embeddings(start_token)
A:transformers.models.mmbt.modeling_mmbt.end_token_embeds->self.word_embeddings(end_token)
A:transformers.models.mmbt.modeling_mmbt.position_ids->position_ids.unsqueeze(0).expand(input_modal.size(0), seq_length).unsqueeze(0).expand(input_modal.size(0), seq_length)
A:transformers.models.mmbt.modeling_mmbt.token_type_ids->torch.ones(input_txt_shape, dtype=torch.long, device=device)
A:transformers.models.mmbt.modeling_mmbt.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.mmbt.modeling_mmbt.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.mmbt.modeling_mmbt.embeddings->self.dropout(embeddings)
A:transformers.models.mmbt.modeling_mmbt.self.modal_encoder->ModalEmbeddings(config, encoder, transformer.embeddings)
A:transformers.models.mmbt.modeling_mmbt.input_txt_shape->input_ids.size()
A:transformers.models.mmbt.modeling_mmbt.modal_embeddings->self.modal_encoder(input_modal, start_token=modal_start_tokens, end_token=modal_end_tokens, position_ids=modal_position_ids, token_type_ids=modal_token_type_ids)
A:transformers.models.mmbt.modeling_mmbt.txt_embeddings->self.transformer.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.mmbt.modeling_mmbt.embedding_output->torch.cat([modal_embeddings, txt_embeddings], 1)
A:transformers.models.mmbt.modeling_mmbt.attention_mask->torch.cat([torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask], dim=1)
A:transformers.models.mmbt.modeling_mmbt.encoder_attention_mask->torch.cat([torch.ones(input_modal_shape, device=device), encoder_attention_mask], dim=1)
A:transformers.models.mmbt.modeling_mmbt.extended_attention_mask->self.get_extended_attention_mask(attention_mask, input_shape, self.device)
A:transformers.models.mmbt.modeling_mmbt.encoder_extended_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.mmbt.modeling_mmbt.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.mmbt.modeling_mmbt.encoder_outputs->self.transformer.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.mmbt.modeling_mmbt.pooled_output->self.dropout(pooled_output)
A:transformers.models.mmbt.modeling_mmbt.self.mmbt->MMBTModel(config, transformer, encoder)
A:transformers.models.mmbt.modeling_mmbt.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mmbt.modeling_mmbt.outputs->self.mmbt(input_modal=input_modal, input_ids=input_ids, modal_start_tokens=modal_start_tokens, modal_end_tokens=modal_end_tokens, attention_mask=attention_mask, token_type_ids=token_type_ids, modal_token_type_ids=modal_token_type_ids, position_ids=position_ids, modal_position_ids=modal_position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, return_dict=return_dict)
A:transformers.models.mmbt.modeling_mmbt.logits->self.classifier(pooled_output)
A:transformers.models.mmbt.modeling_mmbt.loss_fct->CrossEntropyLoss()
A:transformers.models.mmbt.modeling_mmbt.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
transformers.MMBTForClassification(self,config,transformer,encoder)
transformers.MMBTForClassification.forward(self,input_modal,input_ids=None,modal_start_tokens=None,modal_end_tokens=None,attention_mask=None,token_type_ids=None,modal_token_type_ids=None,position_ids=None,modal_position_ids=None,head_mask=None,inputs_embeds=None,labels=None,return_dict=None)
transformers.MMBTModel(self,config,transformer,encoder)
transformers.MMBTModel.forward(self,input_modal,input_ids=None,modal_start_tokens=None,modal_end_tokens=None,attention_mask=None,token_type_ids=None,modal_token_type_ids=None,position_ids=None,modal_position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MMBTModel.get_input_embeddings(self)
transformers.MMBTModel.set_input_embeddings(self,value)
transformers.ModalEmbeddings(self,config,encoder,embeddings)
transformers.ModalEmbeddings.forward(self,input_modal,start_token=None,end_token=None,position_ids=None,token_type_ids=None)
transformers.models.mmbt.modeling_mmbt.MMBTForClassification(self,config,transformer,encoder)
transformers.models.mmbt.modeling_mmbt.MMBTForClassification.__init__(self,config,transformer,encoder)
transformers.models.mmbt.modeling_mmbt.MMBTForClassification.forward(self,input_modal,input_ids=None,modal_start_tokens=None,modal_end_tokens=None,attention_mask=None,token_type_ids=None,modal_token_type_ids=None,position_ids=None,modal_position_ids=None,head_mask=None,inputs_embeds=None,labels=None,return_dict=None)
transformers.models.mmbt.modeling_mmbt.MMBTModel(self,config,transformer,encoder)
transformers.models.mmbt.modeling_mmbt.MMBTModel.__init__(self,config,transformer,encoder)
transformers.models.mmbt.modeling_mmbt.MMBTModel.forward(self,input_modal,input_ids=None,modal_start_tokens=None,modal_end_tokens=None,attention_mask=None,token_type_ids=None,modal_token_type_ids=None,position_ids=None,modal_position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mmbt.modeling_mmbt.MMBTModel.get_input_embeddings(self)
transformers.models.mmbt.modeling_mmbt.MMBTModel.set_input_embeddings(self,value)
transformers.models.mmbt.modeling_mmbt.ModalEmbeddings(self,config,encoder,embeddings)
transformers.models.mmbt.modeling_mmbt.ModalEmbeddings.__init__(self,config,encoder,embeddings)
transformers.models.mmbt.modeling_mmbt.ModalEmbeddings.forward(self,input_modal,start_token=None,end_token=None,position_ids=None,token_type_ids=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mmbt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/modeling_tf_funnel.py----------------------------------------
A:transformers.models.funnel.modeling_tf_funnel.logger->utils.logging.get_logger(__name__)
A:transformers.models.funnel.modeling_tf_funnel.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm')
A:transformers.models.funnel.modeling_tf_funnel.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_tf_funnel.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.funnel.modeling_tf_funnel.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.funnel.modeling_tf_funnel.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.funnel.modeling_tf_funnel.x->tensorflow.reshape(inputs, [-1, self.hidden_size])
A:transformers.models.funnel.modeling_tf_funnel.logits->self.qa_outputs(sequence_output)
A:transformers.models.funnel.modeling_tf_funnel.self.sin_dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_tf_funnel.self.cos_dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_tf_funnel.position_embeds->self.stride_pool(position_embeds, 0)
A:transformers.models.funnel.modeling_tf_funnel.token_type_mat->tensorflow.broadcast_to(token_type_mat[:, None], new_shape)
A:transformers.models.funnel.modeling_tf_funnel.cls_ids->tensorflow.equal(token_type_ids, tf.constant([self.cls_token_type_id], dtype=token_type_ids.dtype))
A:transformers.models.funnel.modeling_tf_funnel.cls_mat->tensorflow.logical_or(tf.expand_dims(cls_ids, -1), tf.expand_dims(cls_ids, -2))
A:transformers.models.funnel.modeling_tf_funnel.pos_seq->tensorflow.range(0, seq_len, 1.0, dtype=dtype)
A:transformers.models.funnel.modeling_tf_funnel.freq_seq->tensorflow.range(0, self.d_model // 2, 1.0, dtype=dtype)
A:transformers.models.funnel.modeling_tf_funnel.sinusoid->tensorflow.einsum('i,d->id', rel_pos_id, inv_freq)
A:transformers.models.funnel.modeling_tf_funnel.sin_embed->self.sin_dropout(tf.sin(sinusoid), training=training)
A:transformers.models.funnel.modeling_tf_funnel.sin_embed_d->self.sin_dropout(sin_embed, training=training)
A:transformers.models.funnel.modeling_tf_funnel.cos_embed->self.cos_dropout(tf.cos(sinusoid), training=training)
A:transformers.models.funnel.modeling_tf_funnel.cos_embed_d->self.cos_dropout(cos_embed, training=training)
A:transformers.models.funnel.modeling_tf_funnel.phi->tensorflow.concat([sin_embed_d, sin_embed_d], axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.psi->tensorflow.concat([cos_embed, sin_embed], axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.pi->tensorflow.concat([cos_embed_d, cos_embed_d], axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.omega->tensorflow.concat([-sin_embed, cos_embed], axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.rel_pos_id->tensorflow.range(-seq_len * 2, seq_len * 2, 1.0, dtype=dtype)
A:transformers.models.funnel.modeling_tf_funnel.pos_embed->tensorflow.concat([sin_embed, cos_embed], axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.pos->tensorflow.range(0, seq_len, dtype=dtype)
A:transformers.models.funnel.modeling_tf_funnel.pooled_pos->self.stride_pool_pos(pos, block_index)
A:transformers.models.funnel.modeling_tf_funnel.rel_pos->self.relative_pos(pos, stride)
A:transformers.models.funnel.modeling_tf_funnel.position_embeds_pooling->tensorflow.gather(pos_embed, rel_pos, axis=0)
A:transformers.models.funnel.modeling_tf_funnel.position_embeds_no_pooling->tensorflow.gather(pos_embed, rel_pos, axis=0)
A:transformers.models.funnel.modeling_tf_funnel.cls_pos->tensorflow.constant([-2 ** block_index + 1], dtype=pos_id.dtype)
A:transformers.models.funnel.modeling_tf_funnel.tensor->tensorflow.nn.max_pool1d(tensor, stride, strides=stride, data_format='NWC', padding='SAME')
A:transformers.models.funnel.modeling_tf_funnel.cls_mask->self.stride_pool(cls_mask, 1)
A:transformers.models.funnel.modeling_tf_funnel.output->tensorflow.concat([cls, output], axis=1)
A:transformers.models.funnel.modeling_tf_funnel.attention_mask->self.pool_tensor(attention_mask, mode='min')
A:transformers.models.funnel.modeling_tf_funnel.(batch_size, n_head, seq_len, max_rel_len)->shape_list(positional_attn)
A:transformers.models.funnel.modeling_tf_funnel.positional_attn->self.relative_positional_attention(position_embeds, q_head, context_len, cls_mask)
A:transformers.models.funnel.modeling_tf_funnel.self.hidden_dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_tf_funnel.self.attention_dropout->tensorflow.keras.layers.Dropout(config.attention_dropout)
A:transformers.models.funnel.modeling_tf_funnel.initializer->get_initializer(config.initializer_range)
A:transformers.models.funnel.modeling_tf_funnel.self.q_head->tensorflow.keras.layers.Dense(n_head * d_head, use_bias=False, kernel_initializer=initializer, name='q_head')
A:transformers.models.funnel.modeling_tf_funnel.self.k_head->tensorflow.keras.layers.Dense(n_head * d_head, kernel_initializer=initializer, name='k_head')
A:transformers.models.funnel.modeling_tf_funnel.self.v_head->tensorflow.keras.layers.Dense(n_head * d_head, kernel_initializer=initializer, name='v_head')
A:transformers.models.funnel.modeling_tf_funnel.self.post_proj->tensorflow.keras.layers.Dense(d_model, kernel_initializer=initializer, name='post_proj')
A:transformers.models.funnel.modeling_tf_funnel.self.r_w_bias->self.add_weight(shape=(n_head, d_head), initializer=initializer, trainable=True, name='r_w_bias')
A:transformers.models.funnel.modeling_tf_funnel.self.r_r_bias->self.add_weight(shape=(n_head, d_head), initializer=initializer, trainable=True, name='r_r_bias')
A:transformers.models.funnel.modeling_tf_funnel.self.r_kernel->self.add_weight(shape=(d_model, n_head, d_head), initializer=initializer, trainable=True, name='r_kernel')
A:transformers.models.funnel.modeling_tf_funnel.self.r_s_bias->self.add_weight(shape=(n_head, d_head), initializer=initializer, trainable=True, name='r_s_bias')
A:transformers.models.funnel.modeling_tf_funnel.self.seg_embed->self.add_weight(shape=(2, n_head, d_head), initializer=initializer, trainable=True, name='seg_embed')
A:transformers.models.funnel.modeling_tf_funnel.q_r_attention->tensorflow.einsum('binh,dnh->bind', q_head + u, w_r)
A:transformers.models.funnel.modeling_tf_funnel.r_head->tensorflow.einsum('td,dnh->tnh', r, w_r)
A:transformers.models.funnel.modeling_tf_funnel.(batch_size, seq_len, context_len)->shape_list(token_type_mat)
A:transformers.models.funnel.modeling_tf_funnel.token_type_bias->tensorflow.einsum('bind,snd->bnis', q_head + r_s_bias, self.seg_embed)
A:transformers.models.funnel.modeling_tf_funnel.(diff_token_type, same_token_type)->tensorflow.split(token_type_bias, 2, axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.token_type_attn->self.relative_token_type_attention(token_type_mat, q_head, cls_mask)
A:transformers.models.funnel.modeling_tf_funnel.(batch_size, seq_len, _)->shape_list(query)
A:transformers.models.funnel.modeling_tf_funnel.q_head->tensorflow.reshape(self.q_head(query), [batch_size, seq_len, n_head, d_head])
A:transformers.models.funnel.modeling_tf_funnel.k_head->tensorflow.reshape(self.k_head(key), [batch_size, context_len, n_head, d_head])
A:transformers.models.funnel.modeling_tf_funnel.v_head->tensorflow.reshape(self.v_head(value), [batch_size, context_len, n_head, d_head])
A:transformers.models.funnel.modeling_tf_funnel.content_score->tensorflow.einsum('bind,bjnd->bnij', q_head + r_w_bias, k_head)
A:transformers.models.funnel.modeling_tf_funnel.attn_score->tensorflow.cast(attn_score, tf.float32)
A:transformers.models.funnel.modeling_tf_funnel.attn_prob->self.attention_dropout(attn_prob, training=training)
A:transformers.models.funnel.modeling_tf_funnel.attn_vec->tensorflow.einsum('bnij,bjnd->bind', attn_prob, v_head)
A:transformers.models.funnel.modeling_tf_funnel.attn_out->self.hidden_dropout(attn_out, training=training)
A:transformers.models.funnel.modeling_tf_funnel.self.linear_1->tensorflow.keras.layers.Dense(config.d_inner, kernel_initializer=initializer, name='linear_1')
A:transformers.models.funnel.modeling_tf_funnel.self.activation_function->get_tf_activation(config.hidden_act)
A:transformers.models.funnel.modeling_tf_funnel.self.activation_dropout->tensorflow.keras.layers.Dropout(config.activation_dropout)
A:transformers.models.funnel.modeling_tf_funnel.self.linear_2->tensorflow.keras.layers.Dense(config.d_model, kernel_initializer=initializer, name='linear_2')
A:transformers.models.funnel.modeling_tf_funnel.h->self.dropout(h, training=training)
A:transformers.models.funnel.modeling_tf_funnel.self.attention->TFFunnelRelMultiheadAttention(config, block_index, name='attention')
A:transformers.models.funnel.modeling_tf_funnel.self.ffn->TFFunnelPositionwiseFFN(config, name='ffn')
A:transformers.models.funnel.modeling_tf_funnel.attn->self.attention(query, key, value, attention_inputs, output_attentions=output_attentions, training=training)
A:transformers.models.funnel.modeling_tf_funnel.self.attention_structure->TFFunnelAttentionStructure(config)
A:transformers.models.funnel.modeling_tf_funnel.attention_inputs->self.attention_structure.init_attention_inputs(hidden, attention_mask=attention_mask, token_type_ids=token_type_ids, training=training)
A:transformers.models.funnel.modeling_tf_funnel.(pooled_hidden, attention_inputs)->self.attention_structure.pre_attention_pooling(hidden, attention_inputs)
A:transformers.models.funnel.modeling_tf_funnel.layer_output->layer(hidden, hidden, hidden, attention_inputs, output_attentions=output_attentions, training=training)
A:transformers.models.funnel.modeling_tf_funnel.upsampled_hidden->upsample(final_hidden, stride=self.stride, target_len=first_block_hidden.shape[1], separate_cls=self.separate_cls, truncate_seq=self.truncate_seq)
A:transformers.models.funnel.modeling_tf_funnel.self.embeddings->TFFunnelEmbeddings(config, name='embeddings')
A:transformers.models.funnel.modeling_tf_funnel.self.encoder->TFFunnelEncoder(config, name='encoder')
A:transformers.models.funnel.modeling_tf_funnel.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.funnel.modeling_tf_funnel.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.funnel.modeling_tf_funnel.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.funnel.modeling_tf_funnel.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.funnel.modeling_tf_funnel.inputs['inputs_embeds']->self.embeddings(inputs['input_ids'], training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.encoder_outputs->self.encoder(inputs['inputs_embeds'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], output_attentions=inputs['output_attentions'], output_hidden_states=True, return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.self.decoder->TFFunnelDecoder(config, name='decoder')
A:transformers.models.funnel.modeling_tf_funnel.decoder_outputs->self.decoder(final_hidden=encoder_outputs[0], first_block_hidden=encoder_outputs[1][self.block_sizes[0]], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.self.dense->tensorflow.keras.layers.Dense(config.d_model, kernel_initializer=initializer, name='dense')
A:transformers.models.funnel.modeling_tf_funnel.self.dense_prediction->tensorflow.keras.layers.Dense(1, kernel_initializer=initializer, name='dense_prediction')
A:transformers.models.funnel.modeling_tf_funnel.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.funnel.modeling_tf_funnel.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.funnel.modeling_tf_funnel.self.linear_hidden->tensorflow.keras.layers.Dense(config.d_model, kernel_initializer=initializer, name='linear_hidden')
A:transformers.models.funnel.modeling_tf_funnel.self.linear_out->tensorflow.keras.layers.Dense(n_labels, kernel_initializer=initializer, name='linear_out')
A:transformers.models.funnel.modeling_tf_funnel.hidden->self.dropout(hidden, training=training)
A:transformers.models.funnel.modeling_tf_funnel.self.funnel->TFFunnelMainLayer(config, name='funnel')
A:transformers.models.funnel.modeling_tf_funnel.self.discriminator_predictions->TFFunnelDiscriminatorPredictions(config, name='discriminator_predictions')
A:transformers.models.funnel.modeling_tf_funnel.discriminator_hidden_states->self.funnel(inputs['input_ids'], inputs['attention_mask'], inputs['token_type_ids'], inputs['inputs_embeds'], inputs['output_attentions'], inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.self.lm_head->TFFunnelMaskedLMHead(config, self.funnel.embeddings, name='lm_head')
A:transformers.models.funnel.modeling_tf_funnel.outputs->self.funnel(inputs['input_ids'], inputs['attention_mask'], inputs['token_type_ids'], inputs['inputs_embeds'], inputs['output_attentions'], inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.prediction_scores->self.lm_head(sequence_output, training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.funnel.modeling_tf_funnel.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.funnel.modeling_tf_funnel.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.funnel.modeling_tf_funnel.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.funnel.modeling_tf_funnel.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.funnel.modeling_tf_funnel.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFFunnelBaseModel(self,config,*inputs,**kwargs)
transformers.TFFunnelBaseModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFFunnelForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFFunnelForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFFunnelForMaskedLM.get_output_embeddings(self)
transformers.TFFunnelForMaskedLM.get_output_layer_with_bias(self)
transformers.TFFunnelForMaskedLM.get_prefix_bias_name(self)
transformers.TFFunnelForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFFunnelForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFFunnelForMultipleChoice.dummy_inputs(self)
transformers.TFFunnelForPreTraining(self,config,**kwargs)
transformers.TFFunnelForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFFunnelForPreTrainingOutput(ModelOutput)
transformers.TFFunnelForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFFunnelForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFFunnelForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFFunnelForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFFunnelForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFFunnelForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFFunnelModel(self,config,*inputs,**kwargs)
transformers.TFFunnelModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure(self,config)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.__init__(self,config)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.get_position_embeds(self,seq_len,dtype=tf.float32,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.init_attention_inputs(self,inputs_embeds,attention_mask=None,token_type_ids=None,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.pool_tensor(self,tensor,mode='mean',stride=2)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.post_attention_pooling(self,attention_inputs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.pre_attention_pooling(self,output,attention_inputs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.relative_pos(self,pos,stride,pooled_pos=None,shift=1)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.stride_pool(self,tensor,axis)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.stride_pool_pos(self,pos_id,block_index)
transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure.token_type_ids_to_mat(self,token_type_ids)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer._prune_heads(self,heads_to_prune)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer.get_input_embeddings(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer.set_input_embeddings(self,value)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseModel(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseModel.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelClassificationHead(self,config,n_labels,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelClassificationHead.__init__(self,config,n_labels,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelClassificationHead.call(self,hidden,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDecoder(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDecoder.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDecoder.call(self,final_hidden,first_block_hidden,attention_mask=None,token_type_ids=None,output_attentions=False,output_hidden_states=False,return_dict=True,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDiscriminatorPredictions(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDiscriminatorPredictions.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelDiscriminatorPredictions.call(self,discriminator_hidden_states)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings._embedding(self,input_ids,inputs_embeds,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings._linear(self,inputs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings.build(self,input_shape)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings.call(self,input_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEncoder(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEncoder.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelEncoder.call(self,inputs_embeds,attention_mask=None,token_type_ids=None,output_attentions=False,output_hidden_states=False,return_dict=True,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM.get_output_embeddings(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM.get_output_layer_with_bias(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMaskedLM.get_prefix_bias_name(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForMultipleChoice.dummy_inputs(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForPreTraining(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForPreTraining.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForPreTrainingOutput(ModelOutput)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelLayer(self,config,block_index,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelLayer.__init__(self,config,block_index,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelLayer.call(self,query,key,value,attention_inputs,output_attentions=False,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer._prune_heads(self,heads_to_prune)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer.get_input_embeddings(self)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer.set_input_embeddings(self,value)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMaskedLMHead(self,config,input_embeddings,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMaskedLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMaskedLMHead.build(self,input_shape)
transformers.models.funnel.modeling_tf_funnel.TFFunnelMaskedLMHead.call(self,hidden_states,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelModel(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelModel.__init__(self,config,*inputs,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelPositionwiseFFN(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelPositionwiseFFN.__init__(self,config,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelPositionwiseFFN.call(self,hidden,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelPreTrainedModel(TFPreTrainedModel)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention(self,config,block_index,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention.__init__(self,config,block_index,**kwargs)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention.build(self,input_shape)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention.call(self,query,key,value,attention_inputs,output_attentions=False,training=False)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention.relative_positional_attention(self,position_embeds,q_head,context_len,cls_mask=None)
transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention.relative_token_type_attention(self,token_type_mat,q_head,cls_mask=None)
transformers.models.funnel.modeling_tf_funnel._relative_shift_gather(positional_attn,context_len,shift)
transformers.models.funnel.modeling_tf_funnel.upsample(x,stride,target_len,separate_cls=True,truncate_seq=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/tokenization_funnel_fast.py----------------------------------------
A:transformers.models.funnel.tokenization_funnel_fast.logger->utils.logging.get_logger(__name__)
transformers.FunnelTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',clean_text=True,tokenize_chinese_chars=True,strip_accents=None,wordpieces_prefix='##',**kwargs)
transformers.FunnelTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.funnel.tokenization_funnel_fast.FunnelTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',clean_text=True,tokenize_chinese_chars=True,strip_accents=None,wordpieces_prefix='##',**kwargs)
transformers.models.funnel.tokenization_funnel_fast.FunnelTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',clean_text=True,tokenize_chinese_chars=True,strip_accents=None,wordpieces_prefix='##',**kwargs)
transformers.models.funnel.tokenization_funnel_fast.FunnelTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/configuration_funnel.py----------------------------------------
A:transformers.models.funnel.configuration_funnel.logger->utils.logging.get_logger(__name__)
transformers.FunnelConfig(self,vocab_size=30522,block_sizes=[4,4,4],block_repeats=None,num_decoder_layers=2,d_model=768,n_head=12,d_head=64,d_inner=3072,hidden_act='gelu_new',hidden_dropout=0.1,attention_dropout=0.1,activation_dropout=0.0,max_position_embeddings=512,type_vocab_size=3,initializer_range=0.1,initializer_std=None,layer_norm_eps=1e-09,pooling_type='mean',attention_type='relative_shift',separate_cls=True,truncate_seq=True,pool_q_only=True,**kwargs)
transformers.FunnelConfig.hidden_size(self)
transformers.FunnelConfig.num_attention_heads(self)
transformers.FunnelConfig.num_blocks(self)
transformers.FunnelConfig.num_hidden_layers(self)
transformers.models.funnel.configuration_funnel.FunnelConfig(self,vocab_size=30522,block_sizes=[4,4,4],block_repeats=None,num_decoder_layers=2,d_model=768,n_head=12,d_head=64,d_inner=3072,hidden_act='gelu_new',hidden_dropout=0.1,attention_dropout=0.1,activation_dropout=0.0,max_position_embeddings=512,type_vocab_size=3,initializer_range=0.1,initializer_std=None,layer_norm_eps=1e-09,pooling_type='mean',attention_type='relative_shift',separate_cls=True,truncate_seq=True,pool_q_only=True,**kwargs)
transformers.models.funnel.configuration_funnel.FunnelConfig.__init__(self,vocab_size=30522,block_sizes=[4,4,4],block_repeats=None,num_decoder_layers=2,d_model=768,n_head=12,d_head=64,d_inner=3072,hidden_act='gelu_new',hidden_dropout=0.1,attention_dropout=0.1,activation_dropout=0.0,max_position_embeddings=512,type_vocab_size=3,initializer_range=0.1,initializer_std=None,layer_norm_eps=1e-09,pooling_type='mean',attention_type='relative_shift',separate_cls=True,truncate_seq=True,pool_q_only=True,**kwargs)
transformers.models.funnel.configuration_funnel.FunnelConfig.hidden_size(self)
transformers.models.funnel.configuration_funnel.FunnelConfig.num_attention_heads(self)
transformers.models.funnel.configuration_funnel.FunnelConfig.num_blocks(self)
transformers.models.funnel.configuration_funnel.FunnelConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/convert_funnel_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.config->transformers.FunnelConfig.from_json_file(config_file)
A:transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.model->FunnelForPreTraining(config)
A:transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/modeling_funnel.py----------------------------------------
A:transformers.models.funnel.modeling_funnel.logger->utils.logging.get_logger(__name__)
A:transformers.models.funnel.modeling_funnel.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.funnel.modeling_funnel.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.funnel.modeling_funnel.array->numpy.transpose(array)
A:transformers.models.funnel.modeling_funnel.name->name.split('/').split('/')
A:transformers.models.funnel.modeling_funnel.layer_index->int(re.search('layer_(\\d+)', m_name).groups()[0])
A:transformers.models.funnel.modeling_funnel.pointer->getattr(pointer, m_name)
A:transformers.models.funnel.modeling_funnel.pointer.data->torch.from_numpy(array)
A:transformers.models.funnel.modeling_funnel.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.funnel.modeling_funnel.self.layer_norm->torch.nn.LayerNorm(config.d_model, config.layer_norm_eps)
A:transformers.models.funnel.modeling_funnel.self.dropout->torch.nn.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_funnel.inputs_embeds->self.embeddings(input_ids)
A:transformers.models.funnel.modeling_funnel.embeddings->self.dropout(embeddings)
A:transformers.models.funnel.modeling_funnel.self.sin_dropout->torch.nn.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_funnel.self.cos_dropout->torch.nn.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_funnel.self.seq_lenseq_len->self.embeddings(input_ids).size(1)
A:transformers.models.funnel.modeling_funnel.position_embeds->self.stride_pool(position_embeds, 0)
A:transformers.models.funnel.modeling_funnel.pos_seq->torch.arange(0, seq_len, 1.0, dtype=dtype, device=device)
A:transformers.models.funnel.modeling_funnel.freq_seq->torch.arange(0, d_model // 2, 1.0, dtype=dtype, device=device)
A:transformers.models.funnel.modeling_funnel.sin_embed->self.sin_dropout(torch.sin(sinusoid))
A:transformers.models.funnel.modeling_funnel.sin_embed_d->self.sin_dropout(sin_embed)
A:transformers.models.funnel.modeling_funnel.cos_embed->self.cos_dropout(torch.cos(sinusoid))
A:transformers.models.funnel.modeling_funnel.cos_embed_d->self.cos_dropout(cos_embed)
A:transformers.models.funnel.modeling_funnel.phi->torch.cat([sin_embed_d, sin_embed_d], dim=-1)
A:transformers.models.funnel.modeling_funnel.psi->torch.cat([cos_embed, sin_embed], dim=-1)
A:transformers.models.funnel.modeling_funnel.pi->torch.cat([cos_embed_d, cos_embed_d], dim=-1)
A:transformers.models.funnel.modeling_funnel.omega->torch.cat([-sin_embed, cos_embed], dim=-1)
A:transformers.models.funnel.modeling_funnel.rel_pos_id->torch.arange(-seq_len * 2, seq_len * 2, 1.0, dtype=dtype, device=device)
A:transformers.models.funnel.modeling_funnel.pos_embed->torch.cat([sin_embed, cos_embed], dim=-1)
A:transformers.models.funnel.modeling_funnel.pos->torch.arange(0, seq_len, dtype=dtype, device=device)
A:transformers.models.funnel.modeling_funnel.pooled_pos->self.stride_pool_pos(pos, block_index)
A:transformers.models.funnel.modeling_funnel.rel_pos->rel_pos.expand(rel_pos.size(0), d_model).expand(rel_pos.size(0), d_model)
A:transformers.models.funnel.modeling_funnel.position_embeds_pooling->torch.gather(pos_embed, 0, rel_pos)
A:transformers.models.funnel.modeling_funnel.position_embeds_no_pooling->torch.gather(pos_embed, 0, rel_pos)
A:transformers.models.funnel.modeling_funnel.cls_pos->pos_id.new_tensor([-2 ** block_index + 1])
A:transformers.models.funnel.modeling_funnel.tensor->torch.nn.functional.max_pool2d(tensor, stride, stride=stride, ceil_mode=True)
A:transformers.models.funnel.modeling_funnel.token_type_mat->token_type_mat[:, None].expand([batch_size, q_head.shape[2], seq_len, context_len])
A:transformers.models.funnel.modeling_funnel.cls_mask->self.stride_pool(cls_mask, 1)
A:transformers.models.funnel.modeling_funnel.output->torch.cat([cls, output], dim=1)
A:transformers.models.funnel.modeling_funnel.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.funnel.modeling_funnel.positional_attn->self.relative_positional_attention(position_embeds, q_head, context_len, cls_mask)
A:transformers.models.funnel.modeling_funnel.self.hidden_dropout->torch.nn.Dropout(config.hidden_dropout)
A:transformers.models.funnel.modeling_funnel.self.attention_dropout->torch.nn.Dropout(config.attention_dropout)
A:transformers.models.funnel.modeling_funnel.self.q_head->torch.nn.Linear(d_model, n_head * d_head, bias=False)
A:transformers.models.funnel.modeling_funnel.self.k_head->torch.nn.Linear(d_model, n_head * d_head)
A:transformers.models.funnel.modeling_funnel.self.v_head->torch.nn.Linear(d_model, n_head * d_head)
A:transformers.models.funnel.modeling_funnel.self.r_w_bias->torch.nn.Parameter(torch.zeros([n_head, d_head]))
A:transformers.models.funnel.modeling_funnel.self.r_r_bias->torch.nn.Parameter(torch.zeros([n_head, d_head]))
A:transformers.models.funnel.modeling_funnel.self.r_kernel->torch.nn.Parameter(torch.zeros([d_model, n_head, d_head]))
A:transformers.models.funnel.modeling_funnel.self.r_s_bias->torch.nn.Parameter(torch.zeros([n_head, d_head]))
A:transformers.models.funnel.modeling_funnel.self.seg_embed->torch.nn.Parameter(torch.zeros([2, n_head, d_head]))
A:transformers.models.funnel.modeling_funnel.self.post_proj->torch.nn.Linear(n_head * d_head, d_model)
A:transformers.models.funnel.modeling_funnel.q_r_attention->torch.einsum('binh,dnh->bind', q_head + u, w_r)
A:transformers.models.funnel.modeling_funnel.r_head->torch.einsum('td,dnh->tnh', r, w_r)
A:transformers.models.funnel.modeling_funnel.token_type_bias->torch.einsum('bind,snd->bnis', q_head + r_s_bias, self.seg_embed)
A:transformers.models.funnel.modeling_funnel.(diff_token_type, same_token_type)->torch.split(token_type_bias, 1, dim=-1)
A:transformers.models.funnel.modeling_funnel.token_type_attn->self.relative_token_type_attention(token_type_mat, q_head, cls_mask)
A:transformers.models.funnel.modeling_funnel.q_head->self.q_head(query).view(batch_size, seq_len, n_head, d_head)
A:transformers.models.funnel.modeling_funnel.k_head->self.k_head(key).view(batch_size, context_len, n_head, d_head)
A:transformers.models.funnel.modeling_funnel.v_head->self.v_head(value).view(batch_size, context_len, n_head, d_head)
A:transformers.models.funnel.modeling_funnel.content_score->torch.einsum('bind,bjnd->bnij', q_head + r_w_bias, k_head)
A:transformers.models.funnel.modeling_funnel.attn_score->attn_score.float().float()
A:transformers.models.funnel.modeling_funnel.attn_prob->self.attention_dropout(attn_prob)
A:transformers.models.funnel.modeling_funnel.attn_vec->torch.einsum('bnij,bjnd->bind', attn_prob, v_head)
A:transformers.models.funnel.modeling_funnel.attn_out->self.hidden_dropout(attn_out)
A:transformers.models.funnel.modeling_funnel.self.linear_1->torch.nn.Linear(config.d_model, config.d_inner)
A:transformers.models.funnel.modeling_funnel.self.activation_dropout->torch.nn.Dropout(config.activation_dropout)
A:transformers.models.funnel.modeling_funnel.self.linear_2->torch.nn.Linear(config.d_inner, config.d_model)
A:transformers.models.funnel.modeling_funnel.h->self.dropout(h)
A:transformers.models.funnel.modeling_funnel.self.attention->FunnelRelMultiheadAttention(config, block_index)
A:transformers.models.funnel.modeling_funnel.self.ffn->FunnelPositionwiseFFN(config)
A:transformers.models.funnel.modeling_funnel.attn->self.attention(query, key, value, attention_inputs, output_attentions=output_attentions)
A:transformers.models.funnel.modeling_funnel.self.attention_structure->FunnelAttentionStructure(config)
A:transformers.models.funnel.modeling_funnel.self.blocks->torch.nn.ModuleList([nn.ModuleList([FunnelLayer(config, block_index) for _ in range(block_size)]) for (block_index, block_size) in enumerate(config.block_sizes)])
A:transformers.models.funnel.modeling_funnel.attention_inputs->self.attention_structure.init_attention_inputs(hidden, attention_mask=attention_mask, token_type_ids=token_type_ids)
A:transformers.models.funnel.modeling_funnel.(pooled_hidden, attention_inputs)->self.attention_structure.pre_attention_pooling(hidden, attention_inputs)
A:transformers.models.funnel.modeling_funnel.layer_output->layer(hidden, hidden, hidden, attention_inputs, output_attentions=output_attentions)
A:transformers.models.funnel.modeling_funnel.self.layers->torch.nn.ModuleList([FunnelLayer(config, 0) for _ in range(config.num_decoder_layers)])
A:transformers.models.funnel.modeling_funnel.upsampled_hidden->upsample(final_hidden, stride=2 ** (len(self.config.block_sizes) - 1), target_len=first_block_hidden.shape[1], separate_cls=self.config.separate_cls, truncate_seq=self.config.truncate_seq)
A:transformers.models.funnel.modeling_funnel.self.dense->torch.nn.Linear(config.d_model, config.d_model)
A:transformers.models.funnel.modeling_funnel.self.dense_prediction->torch.nn.Linear(config.d_model, 1)
A:transformers.models.funnel.modeling_funnel.hidden_states->ACT2FN[self.config.hidden_act](hidden_states)
A:transformers.models.funnel.modeling_funnel.logits->self.qa_outputs(last_hidden_state)
A:transformers.models.funnel.modeling_funnel.std->numpy.sqrt(1.0 / float(fan_in + fan_out))
A:transformers.models.funnel.modeling_funnel.self.linear_hidden->torch.nn.Linear(config.d_model, config.d_model)
A:transformers.models.funnel.modeling_funnel.self.linear_out->torch.nn.Linear(config.d_model, n_labels)
A:transformers.models.funnel.modeling_funnel.hidden->self.dropout(hidden)
A:transformers.models.funnel.modeling_funnel.self.embeddings->FunnelEmbeddings(config)
A:transformers.models.funnel.modeling_funnel.self.encoder->FunnelEncoder(config)
A:transformers.models.funnel.modeling_funnel.input_shape->input_ids.size()
A:transformers.models.funnel.modeling_funnel.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.funnel.modeling_funnel.encoder_outputs->self.encoder(inputs_embeds, attention_mask=attention_mask, token_type_ids=token_type_ids, output_attentions=output_attentions, output_hidden_states=True, return_dict=return_dict)
A:transformers.models.funnel.modeling_funnel.self.decoder->FunnelDecoder(config)
A:transformers.models.funnel.modeling_funnel.decoder_outputs->self.decoder(final_hidden=encoder_outputs[0], first_block_hidden=encoder_outputs[1][self.config.block_sizes[0]], attention_mask=attention_mask, token_type_ids=token_type_ids, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.funnel.modeling_funnel.self.funnel->FunnelModel(config)
A:transformers.models.funnel.modeling_funnel.self.discriminator_predictions->FunnelDiscriminatorPredictions(config)
A:transformers.models.funnel.modeling_funnel.discriminator_hidden_states->self.funnel(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.funnel.modeling_funnel.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.funnel.modeling_funnel.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.funnel.modeling_funnel.self.lm_head->torch.nn.Linear(config.d_model, config.vocab_size)
A:transformers.models.funnel.modeling_funnel.outputs->self.funnel(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.funnel.modeling_funnel.prediction_logits->self.lm_head(last_hidden_state)
A:transformers.models.funnel.modeling_funnel.masked_lm_loss->loss_fct(prediction_logits.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.funnel.modeling_funnel.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.funnel.modeling_funnel.reshaped_logits->self.qa_outputs(last_hidden_state).view(-1, num_choices)
A:transformers.models.funnel.modeling_funnel.last_hidden_state->self.dropout(last_hidden_state)
A:transformers.models.funnel.modeling_funnel.active_logits->self.qa_outputs(last_hidden_state).view(-1, self.num_labels)
A:transformers.models.funnel.modeling_funnel.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.funnel.modeling_funnel.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.funnel.modeling_funnel.(start_logits, end_logits)->self.qa_outputs(last_hidden_state).split(1, dim=-1)
A:transformers.models.funnel.modeling_funnel.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.funnel.modeling_funnel.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.funnel.modeling_funnel.start_positions->start_positions.squeze(-1).squeze(-1)
A:transformers.models.funnel.modeling_funnel.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.funnel.modeling_funnel.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.funnel.modeling_funnel.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.funnel.modeling_funnel.end_loss->loss_fct(end_logits, end_positions)
transformers.FunnelBaseModel(self,config)
transformers.FunnelBaseModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelBaseModel.get_input_embeddings(self)
transformers.FunnelBaseModel.set_input_embeddings(self,new_embeddings)
transformers.FunnelForMaskedLM(self,config)
transformers.FunnelForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelForMaskedLM.get_output_embeddings(self)
transformers.FunnelForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.FunnelForMultipleChoice(self,config)
transformers.FunnelForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelForPreTraining(self,config)
transformers.FunnelForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelForPreTrainingOutput(ModelOutput)
transformers.FunnelForQuestionAnswering(self,config)
transformers.FunnelForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelForSequenceClassification(self,config)
transformers.FunnelForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelForTokenClassification(self,config)
transformers.FunnelForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelModel(self,config)
transformers.FunnelModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FunnelModel.get_input_embeddings(self)
transformers.FunnelModel.set_input_embeddings(self,new_embeddings)
transformers.load_tf_weights_in_funnel(model,config,tf_checkpoint_path)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure(self,config)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.get_position_embeds(self,seq_len,dtype,device)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.init_attention_inputs(self,inputs_embeds,attention_mask=None,token_type_ids=None)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.pool_tensor(self,tensor,mode='mean',stride=2)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.post_attention_pooling(self,attention_inputs)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.pre_attention_pooling(self,output,attention_inputs)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.relative_pos(self,pos,stride,pooled_pos=None,shift=1)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.stride_pool(self,tensor,axis)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.stride_pool_pos(self,pos_id,block_index)
transformers.models.funnel.modeling_funnel.FunnelAttentionStructure.token_type_ids_to_mat(self,token_type_ids)
transformers.models.funnel.modeling_funnel.FunnelBaseModel(self,config)
transformers.models.funnel.modeling_funnel.FunnelBaseModel.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelBaseModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelBaseModel.get_input_embeddings(self)
transformers.models.funnel.modeling_funnel.FunnelBaseModel.set_input_embeddings(self,new_embeddings)
transformers.models.funnel.modeling_funnel.FunnelClassificationHead(self,config,n_labels)
transformers.models.funnel.modeling_funnel.FunnelClassificationHead.__init__(self,config,n_labels)
transformers.models.funnel.modeling_funnel.FunnelClassificationHead.forward(self,hidden)
transformers.models.funnel.modeling_funnel.FunnelDecoder(self,config)
transformers.models.funnel.modeling_funnel.FunnelDecoder.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelDecoder.forward(self,final_hidden,first_block_hidden,attention_mask=None,token_type_ids=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.funnel.modeling_funnel.FunnelDiscriminatorPredictions(self,config)
transformers.models.funnel.modeling_funnel.FunnelDiscriminatorPredictions.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelDiscriminatorPredictions.forward(self,discriminator_hidden_states)
transformers.models.funnel.modeling_funnel.FunnelEmbeddings(self,config)
transformers.models.funnel.modeling_funnel.FunnelEmbeddings.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelEmbeddings.forward(self,input_ids=None,inputs_embeds=None)
transformers.models.funnel.modeling_funnel.FunnelEncoder(self,config)
transformers.models.funnel.modeling_funnel.FunnelEncoder.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelEncoder.forward(self,inputs_embeds,attention_mask=None,token_type_ids=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.funnel.modeling_funnel.FunnelForMaskedLM(self,config)
transformers.models.funnel.modeling_funnel.FunnelForMaskedLM.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelForMaskedLM.get_output_embeddings(self)
transformers.models.funnel.modeling_funnel.FunnelForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.funnel.modeling_funnel.FunnelForMultipleChoice(self,config)
transformers.models.funnel.modeling_funnel.FunnelForMultipleChoice.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelForPreTraining(self,config)
transformers.models.funnel.modeling_funnel.FunnelForPreTraining.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelForPreTrainingOutput(ModelOutput)
transformers.models.funnel.modeling_funnel.FunnelForQuestionAnswering(self,config)
transformers.models.funnel.modeling_funnel.FunnelForQuestionAnswering.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelForSequenceClassification(self,config)
transformers.models.funnel.modeling_funnel.FunnelForSequenceClassification.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelForTokenClassification(self,config)
transformers.models.funnel.modeling_funnel.FunnelForTokenClassification.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelLayer(self,config,block_index)
transformers.models.funnel.modeling_funnel.FunnelLayer.__init__(self,config,block_index)
transformers.models.funnel.modeling_funnel.FunnelLayer.forward(self,query,key,value,attention_inputs,output_attentions=False)
transformers.models.funnel.modeling_funnel.FunnelModel(self,config)
transformers.models.funnel.modeling_funnel.FunnelModel.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.funnel.modeling_funnel.FunnelModel.get_input_embeddings(self)
transformers.models.funnel.modeling_funnel.FunnelModel.set_input_embeddings(self,new_embeddings)
transformers.models.funnel.modeling_funnel.FunnelPositionwiseFFN(self,config)
transformers.models.funnel.modeling_funnel.FunnelPositionwiseFFN.__init__(self,config)
transformers.models.funnel.modeling_funnel.FunnelPositionwiseFFN.forward(self,hidden)
transformers.models.funnel.modeling_funnel.FunnelPreTrainedModel(PreTrainedModel)
transformers.models.funnel.modeling_funnel.FunnelPreTrainedModel._init_weights(self,module)
transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention(self,config,block_index)
transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention.__init__(self,config,block_index)
transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention.forward(self,query,key,value,attention_inputs,output_attentions=False)
transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention.relative_positional_attention(self,position_embeds,q_head,context_len,cls_mask=None)
transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention.relative_token_type_attention(self,token_type_mat,q_head,cls_mask=None)
transformers.models.funnel.modeling_funnel._relative_shift_gather(positional_attn,context_len,shift)
transformers.models.funnel.modeling_funnel.load_tf_weights_in_funnel(model,config,tf_checkpoint_path)
transformers.models.funnel.modeling_funnel.upsample(x,stride,target_len,separate_cls=True,truncate_seq=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/funnel/tokenization_funnel.py----------------------------------------
A:transformers.models.funnel.tokenization_funnel.logger->utils.logging.get_logger(__name__)
transformers.FunnelTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.FunnelTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.funnel.tokenization_funnel.FunnelTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.funnel.tokenization_funnel.FunnelTokenizer.__init__(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',bos_token='<s>',eos_token='</s>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.funnel.tokenization_funnel.FunnelTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/deberta/configuration_deberta.py----------------------------------------
A:transformers.models.deberta.configuration_deberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.deberta.configuration_deberta.self.pooler_hidden_size->kwargs.get('pooler_hidden_size', hidden_size)
transformers.DebertaConfig(self,vocab_size=50265,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=0,initializer_range=0.02,layer_norm_eps=1e-07,relative_attention=False,max_relative_positions=-1,pad_token_id=0,position_biased_input=True,pos_att_type=None,pooler_dropout=0,pooler_hidden_act='gelu',**kwargs)
transformers.models.deberta.configuration_deberta.DebertaConfig(self,vocab_size=50265,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=0,initializer_range=0.02,layer_norm_eps=1e-07,relative_attention=False,max_relative_positions=-1,pad_token_id=0,position_biased_input=True,pos_att_type=None,pooler_dropout=0,pooler_hidden_act='gelu',**kwargs)
transformers.models.deberta.configuration_deberta.DebertaConfig.__init__(self,vocab_size=50265,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=0,initializer_range=0.02,layer_norm_eps=1e-07,relative_attention=False,max_relative_positions=-1,pad_token_id=0,position_biased_input=True,pos_att_type=None,pooler_dropout=0,pooler_hidden_act='gelu',**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/deberta/tokenization_deberta.py----------------------------------------
A:transformers.models.deberta.tokenization_deberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.deberta.tokenization_deberta.pairs->get_pairs(word)
A:transformers.models.deberta.tokenization_deberta.self.byte_encoder->bytes_to_unicode()
A:transformers.models.deberta.tokenization_deberta.self.bpe_ranks->dict(zip([tuple(k) for k in bpe_merges], range(len(bpe_merges))))
A:transformers.models.deberta.tokenization_deberta.self.random->random.Random(0)
A:transformers.models.deberta.tokenization_deberta.self.pat->regex.compile("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+")
A:transformers.models.deberta.tokenization_deberta.word->' '.join(word)
A:transformers.models.deberta.tokenization_deberta.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.deberta.tokenization_deberta.j->' '.join(word).index(first, i)
A:transformers.models.deberta.tokenization_deberta.new_word->tuple(new_word)
A:transformers.models.deberta.tokenization_deberta.token->''.join((self.byte_encoder[b] for b in token.encode('utf-8')))
A:transformers.models.deberta.tokenization_deberta.text->text.lower().lower()
A:transformers.models.deberta.tokenization_deberta.cat->unicodedata.category(char)
A:transformers.models.deberta.tokenization_deberta.cp->ord(char)
A:transformers.models.deberta.tokenization_deberta.cache_dir->os.path.join(pathlib.Path.home(), f'.~DeBERTa/assets/{_tag}/')
A:transformers.models.deberta.tokenization_deberta.output->os.path.join(cache_dir, name)
A:transformers.models.deberta.tokenization_deberta.releases->requests.get(repo).json()
A:transformers.models.deberta.tokenization_deberta.resp->requests.get(url, stream=True, headers=headers)
A:transformers.models.deberta.tokenization_deberta.progress->tqdm(total=int(resp.headers['Content-Length']) if 'Content-Length' in resp.headers else -1, ncols=80, desc=f'Downloading {name}')
A:transformers.models.deberta.tokenization_deberta.out_dir->os.path.join(cache_dir, name)
A:transformers.models.deberta.tokenization_deberta.model_path->os.path.join(out_dir, 'bpe_encoder.bin')
A:transformers.models.deberta.tokenization_deberta.asset->download_asset(name + '.zip', tag=tag, no_cache=no_cache, cache_dir=cache_dir)
A:transformers.models.deberta.tokenization_deberta.zip_info.filename->os.path.basename(zip_info.filename)
A:transformers.models.deberta.tokenization_deberta.encoder_state->torch.load(model_path)
A:transformers.models.deberta.tokenization_deberta.self.pad_token_id->self.add_symbol(self.pad_token)
A:transformers.models.deberta.tokenization_deberta.self.cls_token_id->self.add_symbol(self.cls_token)
A:transformers.models.deberta.tokenization_deberta.self.sep_token_id->self.add_symbol(self.sep_token)
A:transformers.models.deberta.tokenization_deberta.self.unk_token_id->self.add_symbol(self.unk_token)
A:transformers.models.deberta.tokenization_deberta.self.gpt2_encoder->load_vocab(vocab_file)
A:transformers.models.deberta.tokenization_deberta.self.bpe->get_encoder(self.gpt2_encoder['encoder'], self.gpt2_encoder['vocab'])
A:transformers.models.deberta.tokenization_deberta.self.mask_id->self.add_symbol(self.mask_token)
A:transformers.models.deberta.tokenization_deberta.bpe->self._encode(text)
A:transformers.models.deberta.tokenization_deberta.s->self._decode(token)
A:transformers.models.deberta.tokenization_deberta.idx->len(self.symbols)
A:transformers.models.deberta.tokenization_deberta.full_path->os.path.join(path, filename)
A:transformers.models.deberta.tokenization_deberta.self.gpt2_tokenizer->GPT2Tokenizer(vocab_file)
A:transformers.models.deberta.tokenization_deberta.vocab->self.vocab.copy()
A:transformers.models.deberta.tokenization_deberta.add_prefix_space->kwargs.pop('add_prefix_space', False)
transformers.DebertaTokenizer(self,vocab_file,do_lower_case=False,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.DebertaTokenizer._convert_id_to_token(self,index)
transformers.DebertaTokenizer._convert_token_to_id(self,token)
transformers.DebertaTokenizer._tokenize(self,text)
transformers.DebertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.DebertaTokenizer.convert_tokens_to_string(self,tokens)
transformers.DebertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0,token_ids_1=None)
transformers.DebertaTokenizer.get_special_tokens_mask(self,token_ids_0,token_ids_1=None,already_has_special_tokens=False)
transformers.DebertaTokenizer.get_vocab(self)
transformers.DebertaTokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)
transformers.DebertaTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.DebertaTokenizer.vocab(self)
transformers.DebertaTokenizer.vocab_size(self)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer(self,vocab_file,do_lower_case=False,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.__init__(self,vocab_file,do_lower_case=False,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer._convert_id_to_token(self,index)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer._convert_token_to_id(self,token)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer._tokenize(self,text)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0,token_ids_1=None)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.get_special_tokens_mask(self,token_ids_0,token_ids_1=None,already_has_special_tokens=False)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.get_vocab(self)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.vocab(self)
transformers.models.deberta.tokenization_deberta.DebertaTokenizer.vocab_size(self)
transformers.models.deberta.tokenization_deberta.Encoder(self,encoder,bpe_merges,errors='replace')
transformers.models.deberta.tokenization_deberta.Encoder.__init__(self,encoder,bpe_merges,errors='replace')
transformers.models.deberta.tokenization_deberta.Encoder.bpe(self,token)
transformers.models.deberta.tokenization_deberta.Encoder.decode(self,tokens)
transformers.models.deberta.tokenization_deberta.Encoder.encode(self,text)
transformers.models.deberta.tokenization_deberta.Encoder.split_to_words(self,text)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer(self,vocab_file=None,special_tokens=None)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.__init__(self,vocab_file=None,special_tokens=None)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer._decode(self,x:str)->str
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer._encode(self,x:str)->str
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.add_special_token(self,token)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.add_symbol(self,word,n=1)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.convert_ids_to_tokens(self,ids)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.convert_tokens_to_ids(self,tokens)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.decode(self,tokens)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.id(self,sym)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.part_of_whole_word(self,token,is_bos=False)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.save_pretrained(self,path:str,filename_prefix:str=None)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.split_to_words(self,text)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.sym(self,id)
transformers.models.deberta.tokenization_deberta.GPT2Tokenizer.tokenize(self,text)
transformers.models.deberta.tokenization_deberta._is_control(char)
transformers.models.deberta.tokenization_deberta._is_punctuation(char)
transformers.models.deberta.tokenization_deberta._is_whitespace(char)
transformers.models.deberta.tokenization_deberta.bytes_to_unicode()
transformers.models.deberta.tokenization_deberta.download_asset(name,tag=None,no_cache=False,cache_dir=None)
transformers.models.deberta.tokenization_deberta.get_encoder(encoder,vocab)
transformers.models.deberta.tokenization_deberta.get_pairs(word)
transformers.models.deberta.tokenization_deberta.load_vocab(name=None,tag=None,no_cache=False,cache_dir=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/deberta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/deberta/modeling_deberta.py----------------------------------------
A:transformers.models.deberta.modeling_deberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.deberta.modeling_deberta.self.dense->torch.nn.Linear(config.intermediate_size, config.hidden_size)
A:transformers.models.deberta.modeling_deberta.self.dropout->StableDropout(drop_out)
A:transformers.models.deberta.modeling_deberta.context_token->self.dropout(context_token)
A:transformers.models.deberta.modeling_deberta.pooled_output->self.dropout(pooled_output)
A:transformers.models.deberta.modeling_deberta.rmask->(1 - mask).byte()
A:transformers.models.deberta.modeling_deberta.output->torch.softmax(output, self.dim)
A:transformers.models.deberta.modeling_deberta.inputGrad->_softmax_backward_data(grad_output, output, self.dim, output)
A:transformers.models.deberta.modeling_deberta.mask->mask.to(embeddings.dtype).to(embeddings.dtype)
A:transformers.models.deberta.modeling_deberta.(mask, dropout)->get_mask(input, local_ctx)
A:transformers.models.deberta.modeling_deberta.self.weight->torch.nn.Parameter(torch.ones(size))
A:transformers.models.deberta.modeling_deberta.self.bias->torch.nn.Parameter(torch.zeros(size))
A:transformers.models.deberta.modeling_deberta.hidden_states->layer_module(next_kv, attention_mask, output_attentions, query_states=query_states, relative_pos=relative_pos, rel_embeddings=rel_embeddings)
A:transformers.models.deberta.modeling_deberta.mean->layer_module(next_kv, attention_mask, output_attentions, query_states=query_states, relative_pos=relative_pos, rel_embeddings=rel_embeddings).mean(-1, keepdim=True)
A:transformers.models.deberta.modeling_deberta.variance->(hidden_states - mean).pow(2).mean(-1, keepdim=True)
A:transformers.models.deberta.modeling_deberta.self.LayerNorm->DebertaLayerNorm(config.hidden_size, config.layer_norm_eps)
A:transformers.models.deberta.modeling_deberta.self.self->DisentangledSelfAttention(config)
A:transformers.models.deberta.modeling_deberta.self.output->DebertaOutput(config)
A:transformers.models.deberta.modeling_deberta.self_output->self.self(hidden_states, attention_mask, return_att, query_states=query_states, relative_pos=relative_pos, rel_embeddings=rel_embeddings)
A:transformers.models.deberta.modeling_deberta.attention_output->self.attention(hidden_states, attention_mask, return_att=return_att, query_states=query_states, relative_pos=relative_pos, rel_embeddings=rel_embeddings)
A:transformers.models.deberta.modeling_deberta.self.attention->DebertaAttention(config)
A:transformers.models.deberta.modeling_deberta.self.intermediate->DebertaIntermediate(config)
A:transformers.models.deberta.modeling_deberta.intermediate_output->self.intermediate(attention_output)
A:transformers.models.deberta.modeling_deberta.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.deberta.modeling_deberta.self.layer->torch.nn.ModuleList([DebertaLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.deberta.modeling_deberta.self.relative_attention->getattr(config, 'relative_attention', False)
A:transformers.models.deberta.modeling_deberta.self.max_relative_positions->getattr(config, 'max_relative_positions', -1)
A:transformers.models.deberta.modeling_deberta.self.rel_embeddings->torch.nn.Embedding(self.max_relative_positions * 2, config.hidden_size)
A:transformers.models.deberta.modeling_deberta.extended_attention_mask->self.encoder.get_attention_mask(attention_mask).unsqueeze(1).unsqueeze(2)
A:transformers.models.deberta.modeling_deberta.attention_mask->self.encoder.get_attention_mask(attention_mask)
A:transformers.models.deberta.modeling_deberta.relative_pos->relative_pos.long().to(query_layer.device).long().to(query_layer.device)
A:transformers.models.deberta.modeling_deberta.rel_embeddings->self.encoder.get_rel_embedding()
A:transformers.models.deberta.modeling_deberta.q_ids->torch.arange(query_size, dtype=torch.long, device=device)
A:transformers.models.deberta.modeling_deberta.k_ids->torch.arange(key_size, dtype=torch.long, device=device)
A:transformers.models.deberta.modeling_deberta.rel_pos_ids->rel_pos_ids.unsqueeze(0).unsqueeze(0)
A:transformers.models.deberta.modeling_deberta.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.deberta.modeling_deberta.self.in_proj->torch.nn.Linear(config.hidden_size, self.all_head_size * 3, bias=False)
A:transformers.models.deberta.modeling_deberta.self.q_bias->torch.nn.Parameter(torch.zeros(self.all_head_size, dtype=torch.float))
A:transformers.models.deberta.modeling_deberta.self.v_bias->torch.nn.Parameter(torch.zeros(self.all_head_size, dtype=torch.float))
A:transformers.models.deberta.modeling_deberta.self.talking_head->getattr(config, 'talking_head', False)
A:transformers.models.deberta.modeling_deberta.self.head_logits_proj->torch.nn.Linear(config.num_attention_heads, config.num_attention_heads, bias=False)
A:transformers.models.deberta.modeling_deberta.self.head_weights_proj->torch.nn.Linear(config.num_attention_heads, config.num_attention_heads, bias=False)
A:transformers.models.deberta.modeling_deberta.self.pos_dropout->StableDropout(config.hidden_dropout_prob)
A:transformers.models.deberta.modeling_deberta.self.pos_proj->torch.nn.Linear(config.hidden_size, self.all_head_size, bias=False)
A:transformers.models.deberta.modeling_deberta.self.pos_q_proj->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.deberta.modeling_deberta.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.deberta.modeling_deberta.qp->self.in_proj(hidden_states)
A:transformers.models.deberta.modeling_deberta.(query_layer, key_layer, value_layer)->self.transpose_for_scores(qp).chunk(3, dim=-1)
A:transformers.models.deberta.modeling_deberta.ws->self.in_proj.weight.chunk(self.num_attention_heads * 3, dim=0)
A:transformers.models.deberta.modeling_deberta.q->query_layer.size(-2)
A:transformers.models.deberta.modeling_deberta.scale->math.sqrt(query_layer.size(-1) * scale_factor)
A:transformers.models.deberta.modeling_deberta.attention_scores->self.head_logits_proj(attention_scores.permute(0, 2, 3, 1)).permute(0, 3, 1, 2)
A:transformers.models.deberta.modeling_deberta.rel_att->self.disentangled_att_bias(query_layer, key_layer, relative_pos, rel_embeddings, scale_factor)
A:transformers.models.deberta.modeling_deberta.attention_probs->self.head_weights_proj(attention_probs.permute(0, 2, 3, 1)).permute(0, 3, 1, 2)
A:transformers.models.deberta.modeling_deberta.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.deberta.modeling_deberta.att_span->min(max(query_layer.size(-2), key_layer.size(-2)), self.max_relative_positions)
A:transformers.models.deberta.modeling_deberta.pos_key_layer->self.transpose_for_scores(pos_key_layer)
A:transformers.models.deberta.modeling_deberta.pos_query_layer->self.transpose_for_scores(pos_query_layer)
A:transformers.models.deberta.modeling_deberta.c2p_att->torch.gather(c2p_att, dim=-1, index=c2p_dynamic_expand(c2p_pos, query_layer, relative_pos))
A:transformers.models.deberta.modeling_deberta.c2p_pos->torch.clamp(relative_pos + att_span, 0, att_span * 2 - 1)
A:transformers.models.deberta.modeling_deberta.r_pos->build_relative_position(key_layer.size(-2), key_layer.size(-2), query_layer.device)
A:transformers.models.deberta.modeling_deberta.p2c_pos->torch.clamp(-r_pos + att_span, 0, att_span * 2 - 1)
A:transformers.models.deberta.modeling_deberta.pos_index->relative_pos[:, :, :, 0].unsqueeze(-1)
A:transformers.models.deberta.modeling_deberta.p2c_att->torch.gather(p2c_att, dim=-2, index=pos_dynamic_expand(pos_index, p2c_att, key_layer))
A:transformers.models.deberta.modeling_deberta.pad_token_id->getattr(config, 'pad_token_id', 0)
A:transformers.models.deberta.modeling_deberta.self.embedding_size->getattr(config, 'embedding_size', config.hidden_size)
A:transformers.models.deberta.modeling_deberta.self.word_embeddings->torch.nn.Embedding(config.vocab_size, self.embedding_size, padding_idx=pad_token_id)
A:transformers.models.deberta.modeling_deberta.self.position_biased_input->getattr(config, 'position_biased_input', True)
A:transformers.models.deberta.modeling_deberta.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, self.embedding_size)
A:transformers.models.deberta.modeling_deberta.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, self.embedding_size)
A:transformers.models.deberta.modeling_deberta.self.embed_proj->torch.nn.Linear(self.embedding_size, config.hidden_size, bias=False)
A:transformers.models.deberta.modeling_deberta.input_shape->input_ids.size()
A:transformers.models.deberta.modeling_deberta.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.deberta.modeling_deberta.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.deberta.modeling_deberta.position_embeddings->torch.zeros_like(inputs_embeds)
A:transformers.models.deberta.modeling_deberta.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.deberta.modeling_deberta.embeddings->self.dropout(embeddings)
A:transformers.models.deberta.modeling_deberta.self.embeddings->DebertaEmbeddings(config)
A:transformers.models.deberta.modeling_deberta.self.encoder->DebertaEncoder(config)
A:transformers.models.deberta.modeling_deberta.embedding_output->self.embeddings(input_ids=input_ids, token_type_ids=token_type_ids, position_ids=position_ids, mask=attention_mask, inputs_embeds=inputs_embeds)
A:transformers.models.deberta.modeling_deberta.encoder_outputs->self.encoder(embedding_output, attention_mask, output_hidden_states=True, output_attentions=output_attentions, return_dict=return_dict)
A:transformers.models.deberta.modeling_deberta.rel_pos->self.encoder.get_rel_pos(embedding_output)
A:transformers.models.deberta.modeling_deberta.query_states->layer(hidden_states, attention_mask, return_att=False, query_states=query_states, relative_pos=rel_pos, rel_embeddings=rel_embeddings)
A:transformers.models.deberta.modeling_deberta.num_labels->getattr(config, 'num_labels', 2)
A:transformers.models.deberta.modeling_deberta.self.deberta->DebertaModel(config)
A:transformers.models.deberta.modeling_deberta.self.pooler->ContextPooler(config)
A:transformers.models.deberta.modeling_deberta.self.classifier->torch.nn.Linear(output_dim, num_labels)
A:transformers.models.deberta.modeling_deberta.drop_out->getattr(config, 'cls_dropout', None)
A:transformers.models.deberta.modeling_deberta.outputs->self.deberta(input_ids, token_type_ids=token_type_ids, attention_mask=attention_mask, position_ids=position_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.deberta.modeling_deberta.logits->logits.view(-1).to(labels.dtype).view(-1).to(labels.dtype)
A:transformers.models.deberta.modeling_deberta.loss_fn->torch.nn.MSELoss()
A:transformers.models.deberta.modeling_deberta.loss->torch.tensor(0).to(logits)
A:transformers.models.deberta.modeling_deberta.label_index->(labels >= 0).nonzero()
A:transformers.models.deberta.modeling_deberta.labels->torch.gather(labels, 0, label_index.view(-1))
A:transformers.models.deberta.modeling_deberta.labeled_logits->torch.gather(logits, 0, label_index.expand(label_index.size(0), logits.size(1)))
A:transformers.models.deberta.modeling_deberta.loss_fct->CrossEntropyLoss()
A:transformers.models.deberta.modeling_deberta.log_softmax->torch.nn.LogSoftmax(-1)
transformers.DebertaForSequenceClassification(self,config)
transformers.DebertaForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DebertaForSequenceClassification.get_input_embeddings(self)
transformers.DebertaForSequenceClassification.set_input_embeddings(self,new_embeddings)
transformers.DebertaModel(self,config)
transformers.DebertaModel._prune_heads(self,heads_to_prune)
transformers.DebertaModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.DebertaModel.get_input_embeddings(self)
transformers.DebertaModel.set_input_embeddings(self,new_embeddings)
transformers.DebertaPreTrainedModel(PreTrainedModel)
transformers.DebertaPreTrainedModel._init_weights(self,module)
transformers.models.deberta.modeling_deberta.ContextPooler(self,config)
transformers.models.deberta.modeling_deberta.ContextPooler.__init__(self,config)
transformers.models.deberta.modeling_deberta.ContextPooler.forward(self,hidden_states,mask=None)
transformers.models.deberta.modeling_deberta.ContextPooler.output_dim(self)
transformers.models.deberta.modeling_deberta.DebertaAttention(self,config)
transformers.models.deberta.modeling_deberta.DebertaAttention.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaAttention.forward(self,hidden_states,attention_mask,return_att=False,query_states=None,relative_pos=None,rel_embeddings=None)
transformers.models.deberta.modeling_deberta.DebertaEmbeddings(self,config)
transformers.models.deberta.modeling_deberta.DebertaEmbeddings.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,mask=None,inputs_embeds=None)
transformers.models.deberta.modeling_deberta.DebertaEncoder(self,config)
transformers.models.deberta.modeling_deberta.DebertaEncoder.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaEncoder.forward(self,hidden_states,attention_mask,output_hidden_states=True,output_attentions=False,query_states=None,relative_pos=None,return_dict=True)
transformers.models.deberta.modeling_deberta.DebertaEncoder.get_attention_mask(self,attention_mask)
transformers.models.deberta.modeling_deberta.DebertaEncoder.get_rel_embedding(self)
transformers.models.deberta.modeling_deberta.DebertaEncoder.get_rel_pos(self,hidden_states,query_states=None,relative_pos=None)
transformers.models.deberta.modeling_deberta.DebertaForSequenceClassification(self,config)
transformers.models.deberta.modeling_deberta.DebertaForSequenceClassification.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.deberta.modeling_deberta.DebertaForSequenceClassification.get_input_embeddings(self)
transformers.models.deberta.modeling_deberta.DebertaForSequenceClassification.set_input_embeddings(self,new_embeddings)
transformers.models.deberta.modeling_deberta.DebertaIntermediate(self,config)
transformers.models.deberta.modeling_deberta.DebertaIntermediate.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaIntermediate.forward(self,hidden_states)
transformers.models.deberta.modeling_deberta.DebertaLayer(self,config)
transformers.models.deberta.modeling_deberta.DebertaLayer.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaLayer.forward(self,hidden_states,attention_mask,return_att=False,query_states=None,relative_pos=None,rel_embeddings=None)
transformers.models.deberta.modeling_deberta.DebertaLayerNorm(self,size,eps=1e-12)
transformers.models.deberta.modeling_deberta.DebertaLayerNorm.__init__(self,size,eps=1e-12)
transformers.models.deberta.modeling_deberta.DebertaLayerNorm.forward(self,hidden_states)
transformers.models.deberta.modeling_deberta.DebertaModel(self,config)
transformers.models.deberta.modeling_deberta.DebertaModel.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaModel._prune_heads(self,heads_to_prune)
transformers.models.deberta.modeling_deberta.DebertaModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.deberta.modeling_deberta.DebertaModel.get_input_embeddings(self)
transformers.models.deberta.modeling_deberta.DebertaModel.set_input_embeddings(self,new_embeddings)
transformers.models.deberta.modeling_deberta.DebertaOutput(self,config)
transformers.models.deberta.modeling_deberta.DebertaOutput.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaOutput.forward(self,hidden_states,input_tensor)
transformers.models.deberta.modeling_deberta.DebertaPreTrainedModel(PreTrainedModel)
transformers.models.deberta.modeling_deberta.DebertaPreTrainedModel._init_weights(self,module)
transformers.models.deberta.modeling_deberta.DebertaSelfOutput(self,config)
transformers.models.deberta.modeling_deberta.DebertaSelfOutput.__init__(self,config)
transformers.models.deberta.modeling_deberta.DebertaSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.deberta.modeling_deberta.DisentangledSelfAttention(self,config)
transformers.models.deberta.modeling_deberta.DisentangledSelfAttention.__init__(self,config)
transformers.models.deberta.modeling_deberta.DisentangledSelfAttention.disentangled_att_bias(self,query_layer,key_layer,relative_pos,rel_embeddings,scale_factor)
transformers.models.deberta.modeling_deberta.DisentangledSelfAttention.forward(self,hidden_states,attention_mask,return_att=False,query_states=None,relative_pos=None,rel_embeddings=None)
transformers.models.deberta.modeling_deberta.DisentangledSelfAttention.transpose_for_scores(self,x)
transformers.models.deberta.modeling_deberta.DropoutContext(self)
transformers.models.deberta.modeling_deberta.DropoutContext.__init__(self)
transformers.models.deberta.modeling_deberta.StableDropout(self,drop_prob)
transformers.models.deberta.modeling_deberta.StableDropout.__init__(self,drop_prob)
transformers.models.deberta.modeling_deberta.StableDropout.clear_context(self)
transformers.models.deberta.modeling_deberta.StableDropout.forward(self,x)
transformers.models.deberta.modeling_deberta.StableDropout.get_context(self)
transformers.models.deberta.modeling_deberta.StableDropout.init_context(self,reuse_mask=True,scale=1)
transformers.models.deberta.modeling_deberta.XDropout(torch.autograd.Function)
transformers.models.deberta.modeling_deberta.XDropout.backward(ctx,grad_output)
transformers.models.deberta.modeling_deberta.XDropout.forward(ctx,input,local_ctx)
transformers.models.deberta.modeling_deberta.XSoftmax(torch.autograd.Function)
transformers.models.deberta.modeling_deberta.XSoftmax.backward(self,grad_output)
transformers.models.deberta.modeling_deberta.XSoftmax.forward(self,input,mask,dim)
transformers.models.deberta.modeling_deberta.build_relative_position(query_size,key_size,device)
transformers.models.deberta.modeling_deberta.c2p_dynamic_expand(c2p_pos,query_layer,relative_pos)
transformers.models.deberta.modeling_deberta.get_mask(input,local_context)
transformers.models.deberta.modeling_deberta.p2c_dynamic_expand(c2p_pos,query_layer,key_layer)
transformers.models.deberta.modeling_deberta.pos_dynamic_expand(pos_index,p2c_att,key_layer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/prophetnet/configuration_prophetnet.py----------------------------------------
A:transformers.models.prophetnet.configuration_prophetnet.logger->utils.logging.get_logger(__name__)
transformers.ProphetNetConfig(self,activation_dropout=0.1,activation_function='gelu',vocab_size=30522,hidden_size=1024,encoder_ffn_dim=4096,num_encoder_layers=12,num_encoder_attention_heads=16,decoder_ffn_dim=4096,num_decoder_layers=12,num_decoder_attention_heads=16,attention_dropout=0.1,dropout=0.1,max_position_embeddings=512,init_std=0.02,is_encoder_decoder=True,add_cross_attention=True,decoder_start_token_id=0,ngram=2,num_buckets=32,relative_max_distance=128,disable_ngram_loss=False,eps=0.0,use_cache=True,pad_token_id=0,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.ProphetNetConfig.num_attention_heads(self)->int
transformers.ProphetNetConfig.num_hidden_layers(self)->int
transformers.models.prophetnet.configuration_prophetnet.ProphetNetConfig(self,activation_dropout=0.1,activation_function='gelu',vocab_size=30522,hidden_size=1024,encoder_ffn_dim=4096,num_encoder_layers=12,num_encoder_attention_heads=16,decoder_ffn_dim=4096,num_decoder_layers=12,num_decoder_attention_heads=16,attention_dropout=0.1,dropout=0.1,max_position_embeddings=512,init_std=0.02,is_encoder_decoder=True,add_cross_attention=True,decoder_start_token_id=0,ngram=2,num_buckets=32,relative_max_distance=128,disable_ngram_loss=False,eps=0.0,use_cache=True,pad_token_id=0,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.models.prophetnet.configuration_prophetnet.ProphetNetConfig.__init__(self,activation_dropout=0.1,activation_function='gelu',vocab_size=30522,hidden_size=1024,encoder_ffn_dim=4096,num_encoder_layers=12,num_encoder_attention_heads=16,decoder_ffn_dim=4096,num_decoder_layers=12,num_decoder_attention_heads=16,attention_dropout=0.1,dropout=0.1,max_position_embeddings=512,init_std=0.02,is_encoder_decoder=True,add_cross_attention=True,decoder_start_token_id=0,ngram=2,num_buckets=32,relative_max_distance=128,disable_ngram_loss=False,eps=0.0,use_cache=True,pad_token_id=0,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.models.prophetnet.configuration_prophetnet.ProphetNetConfig.num_attention_heads(self)->int
transformers.models.prophetnet.configuration_prophetnet.ProphetNetConfig.num_hidden_layers(self)->int


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/prophetnet/modeling_prophetnet.py----------------------------------------
A:transformers.models.prophetnet.modeling_prophetnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.prophetnet.modeling_prophetnet.inv_relative_positions->torch.max(inv_relative_positions, torch.zeros_like(inv_relative_positions))
A:transformers.models.prophetnet.modeling_prophetnet.is_small->torch.lt(inv_relative_positions, max_exact)
A:transformers.models.prophetnet.modeling_prophetnet.val_if_large->torch.min(val_if_large, torch.ones_like(val_if_large) * (num_buckets - 1)).int()
A:transformers.models.prophetnet.modeling_prophetnet.main_stream_relative_positions->torch.arange(1, self.max_target_positions).to(position_ids.device).repeat(1, 1).unsqueeze(1).repeat(1, position_ids.size(-1), 1)
A:transformers.models.prophetnet.modeling_prophetnet.predicting_stream_relative_positions->predicting_stream_relative_positions.repeat(1, position_ids.size(-1), 1).repeat(1, position_ids.size(-1), 1)
A:transformers.models.prophetnet.modeling_prophetnet.main_relative_position_buckets->main_relative_position_buckets.repeat(1, self.num_attn_heads, 1).view(-1, main_relative_position_buckets.shape[-1]).long().repeat(1, self.num_attn_heads, 1).view(-1, main_relative_position_buckets.shape[-1]).long()
A:transformers.models.prophetnet.modeling_prophetnet.predict_relative_position_buckets->predict_relative_position_buckets.view(-1, predict_relative_position_buckets.size(-1)).long().view(-1, predict_relative_position_buckets.size(-1)).long()
A:transformers.models.prophetnet.modeling_prophetnet.shifted_input_ids->input_ids.new_zeros(input_ids.shape)
A:transformers.models.prophetnet.modeling_prophetnet.shifted_input_ids[..., 1:]->input_ids[..., :-1].clone()
A:transformers.models.prophetnet.modeling_prophetnet.attention_mask->input_ids.new_ones(input_ids.shape)
A:transformers.models.prophetnet.modeling_prophetnet.self.key_proj->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.self.value_proj->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.self.query_proj->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.self.out_proj->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.(sequence_length, batch_size, hidden_size)->torch.nn.functional.dropout(hidden_states, p=self.dropout, training=self.training).size()
A:transformers.models.prophetnet.modeling_prophetnet.saved_state->layer_state.get('self', None)
A:transformers.models.prophetnet.modeling_prophetnet.query_states->self._reshape(query_states, sequence_length, batch_size)
A:transformers.models.prophetnet.modeling_prophetnet.key_states->self._reshape(key_states, -1, batch_size)
A:transformers.models.prophetnet.modeling_prophetnet.value_states->self._reshape(value_states, -1, batch_size)
A:transformers.models.prophetnet.modeling_prophetnet.key_sequence_length->self._reshape(key_states, -1, batch_size).size(1)
A:transformers.models.prophetnet.modeling_prophetnet.attn_weights->torch.nn.functional.softmax(attn_weights, dim=-1)
A:transformers.models.prophetnet.modeling_prophetnet.attn_weights_reshaped->torch.nn.functional.softmax(attn_weights, dim=-1).view(batch_size, self.num_attn_heads, sequence_length, key_sequence_length)
A:transformers.models.prophetnet.modeling_prophetnet.attn_probs->torch.nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)
A:transformers.models.prophetnet.modeling_prophetnet.attn_output->torch.nn.functional.dropout(attn_output, p=self.dropout, training=self.training)
A:transformers.models.prophetnet.modeling_prophetnet.self.intermediate->torch.nn.Linear(config.hidden_size, ffn_dim)
A:transformers.models.prophetnet.modeling_prophetnet.self.output->torch.nn.Linear(ffn_dim, config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.hidden_states->torch.nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)
A:transformers.models.prophetnet.modeling_prophetnet.self.relative_pos_embeddings->torch.nn.Linear(config.hidden_size, self.num_buckets * self.num_attn_heads)
A:transformers.models.prophetnet.modeling_prophetnet.hidden_states_list->torch.nn.functional.dropout(hidden_states, p=self.dropout, training=self.training).chunk(1 + self.ngram, dim=0)
A:transformers.models.prophetnet.modeling_prophetnet.query_states_list->self._reshape(query_states, sequence_length, batch_size).chunk(1 + self.ngram, dim=1)
A:transformers.models.prophetnet.modeling_prophetnet.key_states_list->self._reshape(key_states, -1, batch_size).chunk(1 + self.ngram, dim=1)
A:transformers.models.prophetnet.modeling_prophetnet.value_states_list->self._reshape(value_states, -1, batch_size).chunk(1 + self.ngram, dim=1)
A:transformers.models.prophetnet.modeling_prophetnet.prev_main_key_states->saved_state['prev_key_states'].view(batch_size * self.num_attn_heads, -1, self.head_dim)
A:transformers.models.prophetnet.modeling_prophetnet.main_key_states->torch.cat((prev_main_key_states, main_key_states), dim=1)
A:transformers.models.prophetnet.modeling_prophetnet.prev_main_value_states->saved_state['prev_value_states'].view(batch_size * self.num_attn_heads, -1, self.head_dim)
A:transformers.models.prophetnet.modeling_prophetnet.main_value_states->torch.cat((prev_main_value_states, main_value_states), dim=1)
A:transformers.models.prophetnet.modeling_prophetnet.main_attn_weights->torch.bmm(main_query_states, main_key_states.transpose(1, 2))
A:transformers.models.prophetnet.modeling_prophetnet.main_relative_pos_embeddings->torch.gather(rel_pos_embeddings, dim=1, index=main_relative_position_buckets).view(attn_weights.shape[:2] + (-1,))
A:transformers.models.prophetnet.modeling_prophetnet.main_attn_probs->main_attn_probs.view(batch_size, self.num_attn_heads, main_sequence_length, -1).view(batch_size, self.num_attn_heads, main_sequence_length, -1)
A:transformers.models.prophetnet.modeling_prophetnet.main_attn_output->self.out_proj(main_attn_output)
A:transformers.models.prophetnet.modeling_prophetnet.predict_query_states->torch.cat(predict_query_states_list, 0).view(self.ngram, -1, main_sequence_length, self.head_dim)
A:transformers.models.prophetnet.modeling_prophetnet.predict_key_states->torch.cat([torch.cat([main_key_states, key], 1).unsqueeze(0) for key in predict_key_states_list], 0)
A:transformers.models.prophetnet.modeling_prophetnet.predict_hidden_states->torch.cat(hidden_states_predict_list, 0).view(self.ngram, main_sequence_length, batch_size, hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.predict_value_states->torch.cat([torch.cat([main_value_states, v_p], 1).unsqueeze(0) for v_p in predict_value_states_list], 0)
A:transformers.models.prophetnet.modeling_prophetnet.predict_attn_weights->torch.einsum('nbtc,nbsc->nbts', (predict_query_states, predict_key_states))
A:transformers.models.prophetnet.modeling_prophetnet.predict_relative_pos_embeddings->torch.gather(rel_pos_embeddings, dim=1, index=predict_relative_position_buckets).view(self.ngram, batch_size * self.num_attn_heads, sequence_length, -1)
A:transformers.models.prophetnet.modeling_prophetnet.predict_attn_probs->predict_attn_probs.view(self.ngram, batch_size, self.num_attn_heads, main_sequence_length, -1).transpose(0, 1).view(self.ngram, batch_size, self.num_attn_heads, main_sequence_length, -1).transpose(0, 1)
A:transformers.models.prophetnet.modeling_prophetnet.predict_attn_output->self.out_proj(predict_attn_output)
A:transformers.models.prophetnet.modeling_prophetnet.relative_positions->torch.arange(0, key_sequence_length).unsqueeze(0).unsqueeze(0).repeat(batch_size, sequence_length, 1).to(position_ids.device)
A:transformers.models.prophetnet.modeling_prophetnet.rel_pos_embeddings->rel_pos_embeddings.reshape(-1, rel_pos_embeddings.size(-1)).reshape(-1, rel_pos_embeddings.size(-1))
A:transformers.models.prophetnet.modeling_prophetnet.self.self_attn->ProphetNetNgramProphetNetSelfAttention(config)
A:transformers.models.prophetnet.modeling_prophetnet.self.self_attn_layer_norm->ProphetNetLayerNorm(config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.self.feed_forward->ProhpetNetFeedForward(config, config.decoder_ffn_dim)
A:transformers.models.prophetnet.modeling_prophetnet.self.feed_forward_layer_norm->ProphetNetLayerNorm(config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.(attention_output, attn_weights)->self.self_attn(hidden_states=hidden_states, attention_mask=attention_mask)
A:transformers.models.prophetnet.modeling_prophetnet.feed_forward_output->self.feed_forward(hidden_states)
A:transformers.models.prophetnet.modeling_prophetnet.self.cross_attn->ProphetNetSelfAttention(config, config.num_decoder_attention_heads)
A:transformers.models.prophetnet.modeling_prophetnet.self.cross_attn_layer_norm->ProphetNetLayerNorm(config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.(ngram_attention_output, self_attn_weights, self_attn_weights_ngram)->self.self_attn(hidden_states=hidden_states, layer_state=layer_state, attention_mask=attention_mask, extended_predict_attention_mask=extended_predict_attention_mask, main_relative_position_buckets=main_relative_position_buckets, predict_relative_position_buckets=predict_relative_position_buckets, position_ids=position_ids)
A:transformers.models.prophetnet.modeling_prophetnet.(attention_output, cross_attn_weights)->self.cross_attn(hidden_states=hidden_states, key_value_states=encoder_hidden_states, attention_mask=encoder_attn_mask, layer_state=layer_state)
A:transformers.models.prophetnet.modeling_prophetnet.self.position_embeddings->ProhpetNetPositionalEmbeddings(config)
A:transformers.models.prophetnet.modeling_prophetnet.self.embeddings_layer_norm->ProphetNetLayerNorm(config.hidden_size)
A:transformers.models.prophetnet.modeling_prophetnet.self.layers->torch.nn.ModuleList([ProphetNetDecoderLayer(config) for _ in range(config.num_decoder_layers)])
A:transformers.models.prophetnet.modeling_prophetnet.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.prophetnet.modeling_prophetnet.extended_attention_mask->torch.cat([extended_attention_mask, torch.zeros_like(extended_attention_mask)], dim=-1)
A:transformers.models.prophetnet.modeling_prophetnet.(position_embeddings, position_ids)->self.position_embeddings(inputs_embeds.shape[:2], inputs_embeds.device)
A:transformers.models.prophetnet.modeling_prophetnet.(hidden_states, attn_probs)->encoder_layer(hidden_states, attention_mask=extended_attention_mask)
A:transformers.models.prophetnet.modeling_prophetnet.self.ngram_embeddings->torch.nn.Embedding(self.ngram, config.hidden_size, None)
A:transformers.models.prophetnet.modeling_prophetnet.(main_stream_pos_embed, position_ids)->self.position_embeddings((batch_size, sequence_length), device=inputs_embeds.device, past_key_values=past_key_values)
A:transformers.models.prophetnet.modeling_prophetnet.(main_relative_position_buckets, predict_relative_position_buckets)->self.compute_buffered_relative_buckets(position_ids)
A:transformers.models.prophetnet.modeling_prophetnet.predicting_stream_pos_embed->self.position_embeddings._forward(position_ids + 1)
A:transformers.models.prophetnet.modeling_prophetnet.extended_predict_attention_mask->self.prepare_predict_attention_mask(hidden_states, attention_mask)
A:transformers.models.prophetnet.modeling_prophetnet.extended_encoder_attention_mask->extended_encoder_attention_mask.to(inputs_embeds.dtype).to(inputs_embeds.dtype)
A:transformers.models.prophetnet.modeling_prophetnet.encoder_hidden_states->encoder_hidden_states.transpose(0, 1).transpose(0, 1)
A:transformers.models.prophetnet.modeling_prophetnet.(hidden_states, layer_self_attn, layer_self_predict_attn_output, layer_cross_attn, layer_past)->decoder_layer(hidden_states, encoder_hidden_states=encoder_hidden_states, encoder_attn_mask=extended_encoder_attention_mask, layer_state=layer_state, attention_mask=extended_attention_mask, extended_predict_attention_mask=extended_predict_attention_mask, main_relative_position_buckets=main_relative_position_buckets, predict_relative_position_buckets=predict_relative_position_buckets, position_ids=position_ids)
A:transformers.models.prophetnet.modeling_prophetnet.last_hidden_state->hidden_states[:sequence_length].transpose(0, 1)
A:transformers.models.prophetnet.modeling_prophetnet.position_ids->torch.arange(1, self.max_target_positions).to(position_ids.device).repeat(1, 1)
A:transformers.models.prophetnet.modeling_prophetnet.(main_relative_buckets, predict_relative_buckets)->compute_all_stream_relative_buckets(self.num_buckets, self.relative_max_distance, position_ids)
A:transformers.models.prophetnet.modeling_prophetnet.main_relative_buckets->main_relative_buckets[:, :sequence_length, :sequence_length].repeat(batch_size, 1, 1)
A:transformers.models.prophetnet.modeling_prophetnet.predict_relative_buckets->torch.cat([predict_relative_buckets[:, :sequence_length, :sequence_length], predict_relative_buckets[:, :sequence_length, self.max_target_positions:self.max_target_positions + sequence_length]], 2).repeat(batch_size, 1, 1)
A:transformers.models.prophetnet.modeling_prophetnet.causal_mask->torch.triu(causal_mask, 1)
A:transformers.models.prophetnet.modeling_prophetnet.extended_causal_mask->causal_mask[:seq_length, :seq_length][None, :, :].expand((batch_size,) + causal_mask.shape)
A:transformers.models.prophetnet.modeling_prophetnet.predict_causal_mask->torch.cat([predict_causal_mask[:, :seq_length, :seq_length], predict_causal_mask[:, :seq_length, self.max_target_positions:self.max_target_positions + seq_length]], dim=-1)
A:transformers.models.prophetnet.modeling_prophetnet.extended_predict_causal_mask->predict_causal_mask[:, None, :, :].expand(predict_causal_mask.shape[:1] + (batch_size,) + predict_causal_mask.shape[1:])
A:transformers.models.prophetnet.modeling_prophetnet.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.prophetnet.modeling_prophetnet.encoder_config->copy.deepcopy(config)
A:transformers.models.prophetnet.modeling_prophetnet.self.encoder->ProphetNetEncoder(encoder_config, self.word_embeddings)
A:transformers.models.prophetnet.modeling_prophetnet.decoder_config->copy.deepcopy(config)
A:transformers.models.prophetnet.modeling_prophetnet.self.decoder->ProphetNetDecoder(config)
A:transformers.models.prophetnet.modeling_prophetnet.encoder_outputs->self.encoder(input_ids=input_ids, attention_mask=attention_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.prophetnet.modeling_prophetnet.decoder_outputs->self.decoder(input_ids=decoder_input_ids, attention_mask=decoder_attention_mask, encoder_hidden_states=encoder_outputs[0], encoder_attention_mask=attention_mask, past_key_values=past_key_values, inputs_embeds=decoder_inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, use_cache=use_cache, return_dict=return_dict)
A:transformers.models.prophetnet.modeling_prophetnet.self.prophetnet->ProphetNetDecoderWrapper(config)
A:transformers.models.prophetnet.modeling_prophetnet.self.lm_head->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.prophetnet.modeling_prophetnet.decoder_input_ids->self._shift_right(labels)
A:transformers.models.prophetnet.modeling_prophetnet.outputs->self.prophetnet.decoder(input_ids=input_ids, attention_mask=attention_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, past_key_values=past_key_values, inputs_embeds=inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.prophetnet.modeling_prophetnet.predicting_streams->outputs[1].view(batch_size, self.config.ngram, sequence_length, -1)
A:transformers.models.prophetnet.modeling_prophetnet.predict_logits->self.lm_head(predicting_streams)
A:transformers.models.prophetnet.modeling_prophetnet.logits->logits.contiguous().contiguous()
A:transformers.models.prophetnet.modeling_prophetnet.loss->torch.nn.functional.nll_loss(lprobs, expend_targets.view(-1), reduction='mean')
A:transformers.models.prophetnet.modeling_prophetnet.all_logits->tuple((v for v in [logits, logits_ngram] if v is not None))
A:transformers.models.prophetnet.modeling_prophetnet.expend_targets->labels.new_zeros(self.config.ngram, labels.size(0), labels.size(1)).fill_(ignore_index)
A:transformers.models.prophetnet.modeling_prophetnet.lprobs->torch.nn.functional.log_softmax(logits.view(-1, logits.size(-1)), dim=-1, dtype=torch.float32)
A:transformers.models.prophetnet.modeling_prophetnet.non_masked_tokens->labels.new_zeros(self.config.ngram, labels.size(0), labels.size(1)).fill_(ignore_index).ne(ignore_index).view(-1)
A:transformers.models.prophetnet.modeling_prophetnet.smooth_loss->smooth_loss.mean().mean()
A:transformers.models.prophetnet.modeling_prophetnet.cache_dict[k]->key_value_states.index_select(0, beam_idx)
A:transformers.models.prophetnet.modeling_prophetnet.config->copy.deepcopy(config)
transformers.ProphetNetDecoder(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.ProphetNetDecoder.compute_buffered_relative_buckets(self,position_ids)
transformers.ProphetNetDecoder.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ProphetNetDecoder.get_input_embeddings(self)
transformers.ProphetNetDecoder.prepare_attention_mask(self,hidden_states,attention_mask)
transformers.ProphetNetDecoder.prepare_predict_attention_mask(self,hidden_states,attention_mask)
transformers.ProphetNetDecoder.set_input_embeddings(self,value)
transformers.ProphetNetDecoderLMOutput(ModelOutput)
transformers.ProphetNetDecoderLayer(self,config:ProphetNetConfig)
transformers.ProphetNetDecoderLayer.forward(self,hidden_states,encoder_hidden_states=None,encoder_attn_mask=None,layer_state=None,attention_mask=None,extended_predict_attention_mask=None,main_relative_position_buckets=None,predict_relative_position_buckets=None,position_ids=None)
transformers.ProphetNetDecoderModelOutput(ModelOutput)
transformers.ProphetNetDecoderWrapper(self,config)
transformers.ProphetNetDecoderWrapper.forward(self,*args,**kwargs)
transformers.ProphetNetEncoder(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.ProphetNetEncoder.forward(self,input_ids=None,attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ProphetNetEncoder.get_input_embeddings(self)
transformers.ProphetNetEncoder.set_input_embeddings(self,value)
transformers.ProphetNetEncoderLayer(self,config:ProphetNetConfig)
transformers.ProphetNetEncoderLayer.forward(self,hidden_states,attention_mask)
transformers.ProphetNetForCausalLM(self,config)
transformers.ProphetNetForCausalLM._compute_loss(self,logits,labels,ignore_index=-100)
transformers.ProphetNetForCausalLM._reorder_cache(past,beam_idx)
transformers.ProphetNetForCausalLM.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ProphetNetForCausalLM.get_decoder(self)
transformers.ProphetNetForCausalLM.get_input_embeddings(self)
transformers.ProphetNetForCausalLM.get_output_embeddings(self)
transformers.ProphetNetForCausalLM.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,use_cache=None,**kwargs)
transformers.ProphetNetForCausalLM.set_decoder(self,decoder)
transformers.ProphetNetForCausalLM.set_input_embeddings(self,value)
transformers.ProphetNetForCausalLM.set_output_embeddings(self,new_embeddings)
transformers.ProphetNetForConditionalGeneration(self,config:ProphetNetConfig)
transformers.ProphetNetForConditionalGeneration._compute_loss(self,logits,labels,ignore_index=-100)
transformers.ProphetNetForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.ProphetNetForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ProphetNetForConditionalGeneration.get_decoder(self)
transformers.ProphetNetForConditionalGeneration.get_encoder(self)
transformers.ProphetNetForConditionalGeneration.get_input_embeddings(self)
transformers.ProphetNetForConditionalGeneration.get_output_embeddings(self)
transformers.ProphetNetForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.ProphetNetForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.ProphetNetModel(self,config)
transformers.ProphetNetModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Tuple]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.ProphetNetModel.get_decoder(self)
transformers.ProphetNetModel.get_encoder(self)
transformers.ProphetNetModel.get_input_embeddings(self)
transformers.ProphetNetModel.set_input_embeddings(self,value)
transformers.ProphetNetPreTrainedModel(PreTrainedModel)
transformers.ProphetNetPreTrainedModel._init_weights(self,module)
transformers.ProphetNetPreTrainedModel._shift_right(self,input_ids)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetFeedForward(self,config:ProphetNetConfig,ffn_dim:int)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetFeedForward.__init__(self,config:ProphetNetConfig,ffn_dim:int)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetFeedForward.forward(self,hidden_states)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetPositionalEmbeddings(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetPositionalEmbeddings.__init__(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetPositionalEmbeddings._forward(self,position_ids)
transformers.models.prophetnet.modeling_prophetnet.ProhpetNetPositionalEmbeddings.forward(self,inputs_shape,device,attention_mask=None,past_key_values=None,position_ids=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.__init__(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.compute_buffered_relative_buckets(self,position_ids)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.get_input_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.prepare_attention_mask(self,hidden_states,attention_mask)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.prepare_predict_attention_mask(self,hidden_states,attention_mask)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder.set_input_embeddings(self,value)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLMOutput(ModelOutput)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLayer(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLayer.__init__(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLayer.forward(self,hidden_states,encoder_hidden_states=None,encoder_attn_mask=None,layer_state=None,attention_mask=None,extended_predict_attention_mask=None,main_relative_position_buckets=None,predict_relative_position_buckets=None,position_ids=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderModelOutput(ModelOutput)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderWrapper(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderWrapper.__init__(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderWrapper.forward(self,*args,**kwargs)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder.__init__(self,config:ProphetNetConfig,word_embeddings:nn.Embedding=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder.forward(self,input_ids=None,attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder.get_input_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder.set_input_embeddings(self,value)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoderLayer(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoderLayer.__init__(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoderLayer.forward(self,hidden_states,attention_mask)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.__init__(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM._compute_loss(self,logits,labels,ignore_index=-100)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM._reorder_cache(past,beam_idx)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.get_decoder(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.get_input_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.get_output_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,use_cache=None,**kwargs)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.set_decoder(self,decoder)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.set_input_embeddings(self,value)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForCausalLM.set_output_embeddings(self,new_embeddings)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.__init__(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration._compute_loss(self,logits,labels,ignore_index=-100)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.get_decoder(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.get_encoder(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.get_input_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.get_output_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetLayerNorm(normalized_shape,eps=1e-05,elementwise_affine=True)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.__init__(self,config)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Tuple]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.get_decoder(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.get_encoder(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.get_input_embeddings(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel.set_input_embeddings(self,value)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention.__init__(self,config:ProphetNetConfig)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention._reshape(self,tensor,first_dim,batch_size)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention.forward(self,hidden_states,layer_state=None,attention_mask=None,extended_predict_attention_mask=None,main_relative_position_buckets=None,predict_relative_position_buckets=None,position_ids=None)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention.get_main_relative_pos_embeddings(self,hidden_states,attn_weights,position_ids,main_relative_position_buckets)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention.get_predict_relative_pos_embeddings(self,hidden_states,attn_weights,position_ids,predict_relative_position_buckets)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramProphetNetSelfAttention.prepare_for_onnx_export_(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetPreTrainedModel(PreTrainedModel)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetPreTrainedModel._init_weights(self,module)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetPreTrainedModel._shift_right(self,input_ids)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSelfAttention(self,config:ProphetNetConfig,num_attn_heads:int)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSelfAttention.__init__(self,config:ProphetNetConfig,num_attn_heads:int)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSelfAttention._reshape(self,tensor,first_dim,batch_size)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSelfAttention.forward(self,hidden_states,key_value_states:Optional[Tensor]=None,attention_mask:Optional[Tensor]=None,layer_state:Optional[Dict[str,Optional[Tensor]]]=None)->Tuple[Tensor, Optional[Tensor]]
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqLMOutput(ModelOutput)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqLMOutput.decoder_cross_attentions(self)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqModelOutput(ModelOutput)
transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqModelOutput.decoder_cross_attentions(self)
transformers.models.prophetnet.modeling_prophetnet.compute_all_stream_relative_buckets(num_buckets,max_distance,position_ids)
transformers.models.prophetnet.modeling_prophetnet.compute_relative_buckets(num_buckets,max_distance,relative_positions,is_bidirectional=False)
transformers.models.prophetnet.modeling_prophetnet.ngram_attention_bias(sequence_length,ngram,device,dtype)
transformers.models.prophetnet.modeling_prophetnet.softmax(hidden_state,dim,onnx_trace=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/prophetnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/prophetnet/tokenization_prophetnet.py----------------------------------------
A:transformers.models.prophetnet.tokenization_prophetnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.prophetnet.tokenization_prophetnet.vocab->collections.OrderedDict()
A:transformers.models.prophetnet.tokenization_prophetnet.tokens->reader.readlines()
A:transformers.models.prophetnet.tokenization_prophetnet.token->token.rstrip('\n').rstrip('\n')
A:transformers.models.prophetnet.tokenization_prophetnet.self.vocab->load_vocab(vocab_file)
A:transformers.models.prophetnet.tokenization_prophetnet.self.ids_to_tokens->collections.OrderedDict([(ids, tok) for (tok, ids) in self.vocab.items()])
A:transformers.models.prophetnet.tokenization_prophetnet.self.basic_tokenizer->BasicTokenizer(do_lower_case=do_lower_case, never_split=never_split, tokenize_chinese_chars=tokenize_chinese_chars, strip_accents=strip_accents)
A:transformers.models.prophetnet.tokenization_prophetnet.self.wordpiece_tokenizer->WordpieceTokenizer(vocab=self.vocab, unk_token=self.unk_token)
A:transformers.models.prophetnet.tokenization_prophetnet.split_tokens->self.wordpiece_tokenizer.tokenize(text)
A:transformers.models.prophetnet.tokenization_prophetnet.out_string->' '.join(tokens).replace(' ##', '').strip()
A:transformers.models.prophetnet.tokenization_prophetnet.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.prophetnet.tokenization_prophetnet.model_inputs->self(src_texts, add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, padding=padding, truncation=truncation, **kwargs)
A:transformers.models.prophetnet.tokenization_prophetnet.labels_and_decoder_mask->self(tgt_texts, add_special_tokens=True, return_tensors=return_tensors, padding=padding, max_length=max_target_length, truncation=truncation, **kwargs)
transformers.ProphetNetTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',x_sep_token='[X_SEP]',pad_token='[PAD]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.ProphetNetTokenizer._convert_id_to_token(self,index)
transformers.ProphetNetTokenizer._convert_token_to_id(self,token)
transformers.ProphetNetTokenizer._tokenize(self,text)
transformers.ProphetNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.ProphetNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.ProphetNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.ProphetNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.ProphetNetTokenizer.get_vocab(self)
transformers.ProphetNetTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.ProphetNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.ProphetNetTokenizer.vocab_size(self)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',x_sep_token='[X_SEP]',pad_token='[PAD]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.__init__(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',x_sep_token='[X_SEP]',pad_token='[PAD]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer._convert_id_to_token(self,index)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer._convert_token_to_id(self,token)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer._tokenize(self,text)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.get_vocab(self)
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation:bool=True,**kwargs)->BatchEncoding
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.prophetnet.tokenization_prophetnet.ProphetNetTokenizer.vocab_size(self)
transformers.models.prophetnet.tokenization_prophetnet.load_vocab(vocab_file)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/prophetnet/convert_prophetnet_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.logger->transformers.logging.get_logger(__name__)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.prophet_old->transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.(prophet, loading_info)->transformers.ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.attributes->key.split('.')
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.param->getattr(model, attribute)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.query_proj.weight->torch.nn.Parameter(old_model.in_proj_weight[:embed_dim, :])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.query_proj.bias->torch.nn.Parameter(old_model.in_proj_bias[:embed_dim])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.key_proj.weight->torch.nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.key_proj.bias->torch.nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.value_proj.weight->torch.nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.value_proj.bias->torch.nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model.position_embeddings.weight->torch.nn.Parameter(old_model.embed_positions.weight[:512, :])
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.model->getattr(model, attribute)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.old_model->getattr(old_model, old_attribute)
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path:str,pytorch_dump_folder_path:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/modeling_tf_mobilebert.py----------------------------------------
A:transformers.models.mobilebert.modeling_tf_mobilebert.logger->utils.logging.get_logger(__name__)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.dense->self.add_weight(shape=(self.config.hidden_size - self.config.embedding_size, self.vocab_size), initializer='zeros', trainable=True, name='dense/weight')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.mobilebert.modeling_tf_mobilebert.hidden_states->tensorflow.matmul(hidden_states, tf.concat([tf.transpose(self.decoder), self.dense], axis=0))
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.weight->self.add_weight('weight', shape=[self.feat_size], initializer='ones')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.embedding_transformation->tensorflow.keras.layers.Dense(config.hidden_size, name='embedding_transformation')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.LayerNorm->NORM2FN['layer_norm'](config.hidden_size, epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.embedding_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.mobilebert.modeling_tf_mobilebert.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.mobilebert.modeling_tf_mobilebert.inputs_embeds->self.embedding_transformation(inputs_embeds)
A:transformers.models.mobilebert.modeling_tf_mobilebert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.mobilebert.modeling_tf_mobilebert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.mobilebert.modeling_tf_mobilebert.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.x->tensorflow.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))
A:transformers.models.mobilebert.modeling_tf_mobilebert.logits->self.classifier(sequence_output)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.attention_head_size->int(config.true_hidden_size / config.num_attention_heads)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.mobilebert.modeling_tf_mobilebert.mixed_query_layer->self.query(query_tensor)
A:transformers.models.mobilebert.modeling_tf_mobilebert.mixed_key_layer->self.key(key_tensor)
A:transformers.models.mobilebert.modeling_tf_mobilebert.mixed_value_layer->self.value(value_tensor)
A:transformers.models.mobilebert.modeling_tf_mobilebert.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.mobilebert.modeling_tf_mobilebert.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.mobilebert.modeling_tf_mobilebert.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.mobilebert.modeling_tf_mobilebert.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.mobilebert.modeling_tf_mobilebert.dk->tensorflow.cast(shape_list(key_layer)[-1], tf.float32)
A:transformers.models.mobilebert.modeling_tf_mobilebert.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.self->TFMobileBertSelfAttention(config, name='self')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.mobilebert_output->TFMobileBertOutput(config, name='output')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self_outputs->self.self(query_tensor, key_tensor, value_tensor, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.attention_output->ffn_module(attention_output)
A:transformers.models.mobilebert.modeling_tf_mobilebert.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.bottleneck->TFBottleneck(config, name='bottleneck')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.bottleneck_input->TFBottleneckLayer(config, name='input')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.attention->TFMobileBertAttention(config, name='attention')
A:transformers.models.mobilebert.modeling_tf_mobilebert.bottlenecked_hidden_states->self.bottleneck_input(hidden_states)
A:transformers.models.mobilebert.modeling_tf_mobilebert.shared_attention_input->self.attention(hidden_states)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.intermediate->TFMobileBertIntermediate(config, name='intermediate')
A:transformers.models.mobilebert.modeling_tf_mobilebert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.mobilebert.modeling_tf_mobilebert.(query_tensor, key_tensor, value_tensor, layer_input)->self.bottleneck(hidden_states)
A:transformers.models.mobilebert.modeling_tf_mobilebert.attention_outputs->self.attention(query_tensor, key_tensor, value_tensor, layer_input, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.layer_output->self.mobilebert_output(intermediate_output, attention_output, hidden_states, training=training)
A:transformers.models.mobilebert.modeling_tf_mobilebert.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.transform_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.transform->TFMobileBertPredictionHeadTransform(config, name='transform')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.decoder->self.add_weight(shape=(self.config.vocab_size, self.config.embedding_size), initializer='zeros', trainable=True, name='decoder/weight')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.predictions->TFMobileBertMLMHead(config, name='predictions___cls')
A:transformers.models.mobilebert.modeling_tf_mobilebert.prediction_scores->self.mlm(sequence_output, training=inputs['training'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.embeddings->TFMobileBertEmbeddings(config, name='embeddings')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.encoder->TFMobileBertEncoder(config, name='encoder')
A:transformers.models.mobilebert.modeling_tf_mobilebert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.mobilebert.modeling_tf_mobilebert.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.mobilebert.modeling_tf_mobilebert.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.mobilebert.modeling_tf_mobilebert.extended_attention_mask->tensorflow.cast(extended_attention_mask, tf.float32)
A:transformers.models.mobilebert.modeling_tf_mobilebert.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.mobilebert->TFMobileBertMainLayer(config, add_pooling_layer=False, name='mobilebert')
A:transformers.models.mobilebert.modeling_tf_mobilebert.outputs->self.mobilebert(inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=return_dict, training=inputs['training'])
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.seq_relationship->tensorflow.keras.layers.Dense(2, name='seq_relationship')
A:transformers.models.mobilebert.modeling_tf_mobilebert.seq_relationship_score->self.seq_relationship(pooled_output)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.mlm->TFMobileBertMLMHead(config, name='mlm___cls')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.cls->TFMobileBertOnlyNSPHead(config, name='seq_relationship___cls')
A:transformers.models.mobilebert.modeling_tf_mobilebert.seq_relationship_scores->self.cls(pooled_output)
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.mobilebert.modeling_tf_mobilebert.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.mobilebert.modeling_tf_mobilebert.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.mobilebert.modeling_tf_mobilebert.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.mobilebert.modeling_tf_mobilebert.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.mobilebert.modeling_tf_mobilebert.loss->self.compute_loss(labels, (start_logits, end_logits))
A:transformers.models.mobilebert.modeling_tf_mobilebert.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.mobilebert.modeling_tf_mobilebert.sequence_output->self.dropout(sequence_output, training=inputs['training'])
transformers.TFMobileBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFMobileBertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMobileBertForMaskedLM.get_output_embeddings(self)
transformers.TFMobileBertForMaskedLM.get_output_layer_with_bias(self)
transformers.TFMobileBertForMaskedLM.get_prefix_bias_name(self)
transformers.TFMobileBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFMobileBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMobileBertForMultipleChoice.dummy_inputs(self)
transformers.TFMobileBertForNextSentencePrediction(self,config,*inputs,**kwargs)
transformers.TFMobileBertForNextSentencePrediction.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,next_sentence_label=None,training=False,**kwargs)
transformers.TFMobileBertForPreTraining(self,config,*inputs,**kwargs)
transformers.TFMobileBertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFMobileBertForPreTraining.get_output_embeddings(self)
transformers.TFMobileBertForPreTraining.get_output_layer_with_bias(self)
transformers.TFMobileBertForPreTraining.get_prefix_bias_name(self)
transformers.TFMobileBertForPreTrainingOutput(ModelOutput)
transformers.TFMobileBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFMobileBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFMobileBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFMobileBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMobileBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFMobileBertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMobileBertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.TFMobileBertMainLayer._prune_heads(self,heads_to_prune)
transformers.TFMobileBertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFMobileBertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFMobileBertMainLayer.get_input_embeddings(self)
transformers.TFMobileBertMainLayer.set_input_embeddings(self,value)
transformers.TFMobileBertModel(self,config,*inputs,**kwargs)
transformers.TFMobileBertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFMobileBertPreTrainedModel(TFPreTrainedModel)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneck(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneck.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneck.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneckLayer(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneckLayer.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneckLayer.call(self,inputs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNLayer(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNLayer.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNLayer.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNOutput(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNOutput.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNOutput.call(self,hidden_states,residual_tensor)
transformers.models.mobilebert.modeling_tf_mobilebert.TFLayerNorm(self,feat_size,*args,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFLayerNorm.__init__(self,feat_size,*args,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertAttention(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertAttention.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertAttention.call(self,query_tensor,key_tensor,value_tensor,layer_input,attention_mask,head_mask,output_attentions,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertAttention.prune_heads(self,heads)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings._linear(self,inputs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings.build(self,input_shape)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEncoder(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEncoder.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEncoder.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM.get_output_embeddings(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM.get_output_layer_with_bias(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM.get_prefix_bias_name(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice.dummy_inputs(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForNextSentencePrediction(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForNextSentencePrediction.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForNextSentencePrediction.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,next_sentence_label=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining.get_output_embeddings(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining.get_output_layer_with_bias(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining.get_prefix_bias_name(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTrainingOutput(ModelOutput)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertIntermediate(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertIntermediate.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertIntermediate.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLMPredictionHead(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLMPredictionHead.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLMPredictionHead.build(self,input_shape)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLMPredictionHead.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLayer(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLayer.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMLMHead(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMLMHead.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMLMHead.call(self,sequence_output)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer.__init__(self,config,add_pooling_layer=True,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer._prune_heads(self,heads_to_prune)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer.get_input_embeddings(self)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer.set_input_embeddings(self,value)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertModel(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOnlyNSPHead(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOnlyNSPHead.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOnlyNSPHead.call(self,pooled_output)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOutput(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOutput.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOutput.call(self,hidden_states,residual_tensor_1,residual_tensor_2,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPooler(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPooler.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPooler.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPreTrainedModel(TFPreTrainedModel)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPredictionHeadTransform(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPredictionHeadTransform.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPredictionHeadTransform.call(self,hidden_states)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfAttention(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfAttention.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfAttention.call(self,query_tensor,key_tensor,value_tensor,attention_mask,head_mask,output_attentions,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfAttention.transpose_for_scores(self,x,batch_size)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfOutput(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfOutput.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfOutput.call(self,hidden_states,residual_tensor,training=False)
transformers.models.mobilebert.modeling_tf_mobilebert.TFNoNorm(self,feat_size,epsilon=None,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFNoNorm.__init__(self,feat_size,epsilon=None,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFNoNorm.build(self,input_shape)
transformers.models.mobilebert.modeling_tf_mobilebert.TFNoNorm.call(self,inputs:tf.Tensor)
transformers.models.mobilebert.modeling_tf_mobilebert.TFOutputBottleneck(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFOutputBottleneck.__init__(self,config,**kwargs)
transformers.models.mobilebert.modeling_tf_mobilebert.TFOutputBottleneck.call(self,hidden_states,residual_tensor,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/convert_mobilebert_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.config->transformers.MobileBertConfig.from_json_file(mobilebert_config_file)
A:transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.model->load_tf_weights_in_mobilebert(model, config, tf_checkpoint_path)
A:transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,mobilebert_config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/tokenization_mobilebert_fast.py----------------------------------------
A:transformers.models.mobilebert.tokenization_mobilebert_fast.logger->utils.logging.get_logger(__name__)
transformers.MobileBertTokenizerFast(BertTokenizerFast)
transformers.models.mobilebert.tokenization_mobilebert_fast.MobileBertTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/modeling_mobilebert.py----------------------------------------
A:transformers.models.mobilebert.modeling_mobilebert.logger->utils.logging.get_logger(__name__)
A:transformers.models.mobilebert.modeling_mobilebert.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.mobilebert.modeling_mobilebert.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.mobilebert.modeling_mobilebert.array->numpy.transpose(array)
A:transformers.models.mobilebert.modeling_mobilebert.name->name.split('/').split('/')
A:transformers.models.mobilebert.modeling_mobilebert.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.mobilebert.modeling_mobilebert.pointer->getattr(pointer, 'weight')
A:transformers.models.mobilebert.modeling_mobilebert.num->int(scope_names[1])
A:transformers.models.mobilebert.modeling_mobilebert.pointer.data->torch.from_numpy(array)
A:transformers.models.mobilebert.modeling_mobilebert.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.mobilebert.modeling_mobilebert.self.weight->torch.nn.Parameter(torch.ones(feat_size))
A:transformers.models.mobilebert.modeling_mobilebert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.embedding_size, padding_idx=config.pad_token_id)
A:transformers.models.mobilebert.modeling_mobilebert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.mobilebert.modeling_mobilebert.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size)
A:transformers.models.mobilebert.modeling_mobilebert.self.embedding_transformation->torch.nn.Linear(embedded_input_size, config.hidden_size)
A:transformers.models.mobilebert.modeling_mobilebert.self.LayerNorm->NORM2FN['layer_norm'](config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.mobilebert.modeling_mobilebert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.mobilebert.modeling_mobilebert.input_shape->input_ids.size()
A:transformers.models.mobilebert.modeling_mobilebert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.mobilebert.modeling_mobilebert.inputs_embeds->self.embedding_transformation(inputs_embeds)
A:transformers.models.mobilebert.modeling_mobilebert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.mobilebert.modeling_mobilebert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.mobilebert.modeling_mobilebert.embeddings->self.dropout(embeddings)
A:transformers.models.mobilebert.modeling_mobilebert.self.attention_head_size->int(config.true_hidden_size / config.num_attention_heads)
A:transformers.models.mobilebert.modeling_mobilebert.self.query->torch.nn.Linear(config.true_hidden_size, self.all_head_size)
A:transformers.models.mobilebert.modeling_mobilebert.self.key->torch.nn.Linear(config.true_hidden_size, self.all_head_size)
A:transformers.models.mobilebert.modeling_mobilebert.self.value->torch.nn.Linear(config.true_hidden_size if config.use_bottleneck_attention else config.hidden_size, self.all_head_size)
A:transformers.models.mobilebert.modeling_mobilebert.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.mobilebert.modeling_mobilebert.mixed_query_layer->self.query(query_tensor)
A:transformers.models.mobilebert.modeling_mobilebert.mixed_key_layer->self.key(key_tensor)
A:transformers.models.mobilebert.modeling_mobilebert.mixed_value_layer->self.value(value_tensor)
A:transformers.models.mobilebert.modeling_mobilebert.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.mobilebert.modeling_mobilebert.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.mobilebert.modeling_mobilebert.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.mobilebert.modeling_mobilebert.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.mobilebert.modeling_mobilebert.attention_probs->self.dropout(attention_probs)
A:transformers.models.mobilebert.modeling_mobilebert.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.mobilebert.modeling_mobilebert.self.dense->torch.nn.Linear(config.vocab_size, config.hidden_size - config.embedding_size, bias=False)
A:transformers.models.mobilebert.modeling_mobilebert.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions)
A:transformers.models.mobilebert.modeling_mobilebert.self.self->MobileBertSelfAttention(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.output->MobileBertOutput(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.mobilebert.modeling_mobilebert.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.mobilebert.modeling_mobilebert.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.mobilebert.modeling_mobilebert.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.mobilebert.modeling_mobilebert.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.mobilebert.modeling_mobilebert.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.mobilebert.modeling_mobilebert.self_outputs->self.self(query_tensor, key_tensor, value_tensor, attention_mask, head_mask, output_attentions)
A:transformers.models.mobilebert.modeling_mobilebert.attention_output->ffn_module(attention_output)
A:transformers.models.mobilebert.modeling_mobilebert.hidden_states->hidden_states.matmul(torch.cat([self.decoder.weight.t(), self.dense.weight], dim=0)).matmul(torch.cat([self.decoder.weight.t(), self.dense.weight], dim=0))
A:transformers.models.mobilebert.modeling_mobilebert.self.bottleneck->Bottleneck(config)
A:transformers.models.mobilebert.modeling_mobilebert.layer_output->self.output(intermediate_output, attention_output, hidden_states)
A:transformers.models.mobilebert.modeling_mobilebert.layer_input->self.LayerNorm(layer_input)
A:transformers.models.mobilebert.modeling_mobilebert.self.input->BottleneckLayer(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.attention->MobileBertAttention(config)
A:transformers.models.mobilebert.modeling_mobilebert.bottlenecked_hidden_states->self.input(hidden_states)
A:transformers.models.mobilebert.modeling_mobilebert.shared_attention_input->self.attention(hidden_states)
A:transformers.models.mobilebert.modeling_mobilebert.self.intermediate->MobileBertIntermediate(config)
A:transformers.models.mobilebert.modeling_mobilebert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.mobilebert.modeling_mobilebert.self.ffn->torch.nn.ModuleList([FFNLayer(config) for _ in range(config.num_feedforward_networks - 1)])
A:transformers.models.mobilebert.modeling_mobilebert.(query_tensor, key_tensor, value_tensor, layer_input)->self.bottleneck(hidden_states)
A:transformers.models.mobilebert.modeling_mobilebert.self_attention_outputs->self.attention(query_tensor, key_tensor, value_tensor, layer_input, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.mobilebert.modeling_mobilebert.self.layer->torch.nn.ModuleList([MobileBertLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.mobilebert.modeling_mobilebert.pooled_output->self.dropout(pooled_output)
A:transformers.models.mobilebert.modeling_mobilebert.self.transform->MobileBertPredictionHeadTransform(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.decoder->torch.nn.Linear(config.embedding_size, config.vocab_size, bias=False)
A:transformers.models.mobilebert.modeling_mobilebert.self.predictions->MobileBertLMPredictionHead(config)
A:transformers.models.mobilebert.modeling_mobilebert.prediction_scores->self.cls(sequence_output)
A:transformers.models.mobilebert.modeling_mobilebert.self.seq_relationship->torch.nn.Linear(config.hidden_size, 2)
A:transformers.models.mobilebert.modeling_mobilebert.seq_relationship_score->self.cls(pooled_output)
A:transformers.models.mobilebert.modeling_mobilebert.self.embeddings->MobileBertEmbeddings(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.encoder->MobileBertEncoder(config)
A:transformers.models.mobilebert.modeling_mobilebert.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.mobilebert.modeling_mobilebert.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.mobilebert.modeling_mobilebert.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.mobilebert.modeling_mobilebert.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.mobilebert.modeling_mobilebert.self.mobilebert->MobileBertModel(config, add_pooling_layer=False)
A:transformers.models.mobilebert.modeling_mobilebert.self.cls->MobileBertOnlyNSPHead(config)
A:transformers.models.mobilebert.modeling_mobilebert.self.cls.predictions.dense->self._get_resized_lm_head(self.cls.predictions.dense, new_num_tokens=new_num_tokens, transposed=True)
A:transformers.models.mobilebert.modeling_mobilebert.outputs->self.mobilebert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.mobilebert.modeling_mobilebert.(prediction_scores, seq_relationship_score)->self.cls(sequence_output, pooled_output)
A:transformers.models.mobilebert.modeling_mobilebert.loss_fct->CrossEntropyLoss()
A:transformers.models.mobilebert.modeling_mobilebert.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.mobilebert.modeling_mobilebert.next_sentence_loss->loss_fct(seq_relationship_score.view(-1, 2), labels.view(-1))
A:transformers.models.mobilebert.modeling_mobilebert.labels->kwargs.pop('next_sentence_label')
A:transformers.models.mobilebert.modeling_mobilebert.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mobilebert.modeling_mobilebert.logits->self.classifier(sequence_output)
A:transformers.models.mobilebert.modeling_mobilebert.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.mobilebert.modeling_mobilebert.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mobilebert.modeling_mobilebert.(start_logits, end_logits)->self.classifier(sequence_output).split(1, dim=-1)
A:transformers.models.mobilebert.modeling_mobilebert.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.mobilebert.modeling_mobilebert.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.mobilebert.modeling_mobilebert.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.mobilebert.modeling_mobilebert.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.mobilebert.modeling_mobilebert.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.mobilebert.modeling_mobilebert.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.mobilebert.modeling_mobilebert.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.mobilebert.modeling_mobilebert.reshaped_logits->self.classifier(sequence_output).view(-1, num_choices)
A:transformers.models.mobilebert.modeling_mobilebert.sequence_output->self.dropout(sequence_output)
A:transformers.models.mobilebert.modeling_mobilebert.active_logits->self.classifier(sequence_output).view(-1, self.num_labels)
A:transformers.models.mobilebert.modeling_mobilebert.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
transformers.MobileBertForMaskedLM(self,config)
transformers.MobileBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertForMaskedLM.get_output_embeddings(self)
transformers.MobileBertForMaskedLM.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.MobileBertForMaskedLM.set_output_embeddings(self,new_embeddigs)
transformers.MobileBertForMultipleChoice(self,config)
transformers.MobileBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertForNextSentencePrediction(self,config)
transformers.MobileBertForNextSentencePrediction.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.MobileBertForPreTraining(self,config)
transformers.MobileBertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,next_sentence_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertForPreTraining.get_output_embeddings(self)
transformers.MobileBertForPreTraining.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.MobileBertForPreTraining.set_output_embeddings(self,new_embeddigs)
transformers.MobileBertForPreTrainingOutput(ModelOutput)
transformers.MobileBertForQuestionAnswering(self,config)
transformers.MobileBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertForSequenceClassification(self,config)
transformers.MobileBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertForTokenClassification(self,config)
transformers.MobileBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MobileBertLayer(self,config)
transformers.MobileBertLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=None)
transformers.MobileBertModel(self,config,add_pooling_layer=True)
transformers.MobileBertModel._prune_heads(self,heads_to_prune)
transformers.MobileBertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.MobileBertModel.get_input_embeddings(self)
transformers.MobileBertModel.set_input_embeddings(self,value)
transformers.MobileBertPreTrainedModel(PreTrainedModel)
transformers.MobileBertPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_mobilebert(model,config,tf_checkpoint_path)
transformers.models.mobilebert.modeling_mobilebert.Bottleneck(self,config)
transformers.models.mobilebert.modeling_mobilebert.Bottleneck.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.Bottleneck.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.BottleneckLayer(self,config)
transformers.models.mobilebert.modeling_mobilebert.BottleneckLayer.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.BottleneckLayer.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.FFNLayer(self,config)
transformers.models.mobilebert.modeling_mobilebert.FFNLayer.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.FFNLayer.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.FFNOutput(self,config)
transformers.models.mobilebert.modeling_mobilebert.FFNOutput.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.FFNOutput.forward(self,hidden_states,residual_tensor)
transformers.models.mobilebert.modeling_mobilebert.MobileBertAttention(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertAttention.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertAttention.forward(self,query_tensor,key_tensor,value_tensor,layer_input,attention_mask=None,head_mask=None,output_attentions=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertAttention.prune_heads(self,heads)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEmbeddings(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEmbeddings.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEncoder(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEncoder.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM.get_output_embeddings(self)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMaskedLM.set_output_embeddings(self,new_embeddigs)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMultipleChoice(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMultipleChoice.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForNextSentencePrediction(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForNextSentencePrediction.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForNextSentencePrediction.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,next_sentence_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining.get_output_embeddings(self)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining.resize_token_embeddings(self,new_num_tokens:Optional[int]=None)->torch.nn.Embedding
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTraining.set_output_embeddings(self,new_embeddigs)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTrainingOutput(ModelOutput)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForQuestionAnswering(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForQuestionAnswering.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForSequenceClassification(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForSequenceClassification.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForTokenClassification(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForTokenClassification.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertIntermediate(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertIntermediate.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertIntermediate.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLMPredictionHead(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLMPredictionHead.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLMPredictionHead.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLayer(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLayer.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel(self,config,add_pooling_layer=True)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel.__init__(self,config,add_pooling_layer=True)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel._prune_heads(self,heads_to_prune)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_hidden_states=None,output_attentions=None,return_dict=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel.get_input_embeddings(self)
transformers.models.mobilebert.modeling_mobilebert.MobileBertModel.set_input_embeddings(self,value)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyMLMHead(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyMLMHead.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyMLMHead.forward(self,sequence_output)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyNSPHead(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyNSPHead.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyNSPHead.forward(self,pooled_output)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOutput(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOutput.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertOutput.forward(self,intermediate_states,residual_tensor_1,residual_tensor_2)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPooler(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPooler.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPooler.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainedModel(PreTrainedModel)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainedModel._init_weights(self,module)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainingHeads(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainingHeads.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainingHeads.forward(self,sequence_output,pooled_output)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPredictionHeadTransform(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPredictionHeadTransform.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertPredictionHeadTransform.forward(self,hidden_states)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfAttention(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfAttention.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfAttention.forward(self,query_tensor,key_tensor,value_tensor,attention_mask=None,head_mask=None,output_attentions=None)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfAttention.transpose_for_scores(self,x)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfOutput(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfOutput.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfOutput.forward(self,hidden_states,residual_tensor)
transformers.models.mobilebert.modeling_mobilebert.NoNorm(self,feat_size,eps=None)
transformers.models.mobilebert.modeling_mobilebert.NoNorm.__init__(self,feat_size,eps=None)
transformers.models.mobilebert.modeling_mobilebert.NoNorm.forward(self,input_tensor)
transformers.models.mobilebert.modeling_mobilebert.OutputBottleneck(self,config)
transformers.models.mobilebert.modeling_mobilebert.OutputBottleneck.__init__(self,config)
transformers.models.mobilebert.modeling_mobilebert.OutputBottleneck.forward(self,hidden_states,residual_tensor)
transformers.models.mobilebert.modeling_mobilebert.load_tf_weights_in_mobilebert(model,config,tf_checkpoint_path)
transformers.models.mobilebert.modeling_mobilebert.mish(x)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/configuration_mobilebert.py----------------------------------------
A:transformers.models.mobilebert.configuration_mobilebert.logger->utils.logging.get_logger(__name__)
transformers.MobileBertConfig(self,vocab_size=30522,hidden_size=512,num_hidden_layers=24,num_attention_heads=4,intermediate_size=512,hidden_act='relu',hidden_dropout_prob=0.0,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=128,trigram_input=True,use_bottleneck=True,intra_bottleneck_size=128,use_bottleneck_attention=False,key_query_shared_bottleneck=True,num_feedforward_networks=4,normalization_type='no_norm',classifier_activation=True,**kwargs)
transformers.models.mobilebert.configuration_mobilebert.MobileBertConfig(self,vocab_size=30522,hidden_size=512,num_hidden_layers=24,num_attention_heads=4,intermediate_size=512,hidden_act='relu',hidden_dropout_prob=0.0,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=128,trigram_input=True,use_bottleneck=True,intra_bottleneck_size=128,use_bottleneck_attention=False,key_query_shared_bottleneck=True,num_feedforward_networks=4,normalization_type='no_norm',classifier_activation=True,**kwargs)
transformers.models.mobilebert.configuration_mobilebert.MobileBertConfig.__init__(self,vocab_size=30522,hidden_size=512,num_hidden_layers=24,num_attention_heads=4,intermediate_size=512,hidden_act='relu',hidden_dropout_prob=0.0,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,embedding_size=128,trigram_input=True,use_bottleneck=True,intra_bottleneck_size=128,use_bottleneck_attention=False,key_query_shared_bottleneck=True,num_feedforward_networks=4,normalization_type='no_norm',classifier_activation=True,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mobilebert/tokenization_mobilebert.py----------------------------------------
A:transformers.models.mobilebert.tokenization_mobilebert.logger->utils.logging.get_logger(__name__)
transformers.MobileBertTokenizer(BertTokenizer)
transformers.models.mobilebert.tokenization_mobilebert.MobileBertTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/configuration_mpnet.py----------------------------------------
A:transformers.models.mpnet.configuration_mpnet.logger->utils.logging.get_logger(__name__)
transformers.MPNetConfig(self,vocab_size=30527,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,relative_attention_num_buckets=32,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)
transformers.models.mpnet.configuration_mpnet.MPNetConfig(self,vocab_size=30527,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,relative_attention_num_buckets=32,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)
transformers.models.mpnet.configuration_mpnet.MPNetConfig.__init__(self,vocab_size=30527,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,relative_attention_num_buckets=32,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/modeling_mpnet.py----------------------------------------
A:transformers.models.mpnet.modeling_mpnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.mpnet.modeling_mpnet.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=self.padding_idx)
A:transformers.models.mpnet.modeling_mpnet.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size, padding_idx=self.padding_idx)
A:transformers.models.mpnet.modeling_mpnet.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.mpnet.modeling_mpnet.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.mpnet.modeling_mpnet.position_ids->torch.arange(self.padding_idx + 1, sequence_length + self.padding_idx + 1, dtype=torch.long, device=inputs_embeds.device)
A:transformers.models.mpnet.modeling_mpnet.input_shape->input_ids.size()
A:transformers.models.mpnet.modeling_mpnet.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.mpnet.modeling_mpnet.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.mpnet.modeling_mpnet.embeddings->self.dropout(embeddings)
A:transformers.models.mpnet.modeling_mpnet.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.mpnet.modeling_mpnet.self.q->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.mpnet.modeling_mpnet.self.k->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.mpnet.modeling_mpnet.self.v->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.mpnet.modeling_mpnet.self.o->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.mpnet.modeling_mpnet.x->self.out_proj(x)
A:transformers.models.mpnet.modeling_mpnet.q->self.transpose_for_scores(q)
A:transformers.models.mpnet.modeling_mpnet.k->self.transpose_for_scores(k)
A:transformers.models.mpnet.modeling_mpnet.v->self.transpose_for_scores(v)
A:transformers.models.mpnet.modeling_mpnet.attention_scores->torch.matmul(q, k.transpose(-1, -2))
A:transformers.models.mpnet.modeling_mpnet.attention_probs->self.dropout(attention_probs)
A:transformers.models.mpnet.modeling_mpnet.c->c.view(*new_c_shape).view(*new_c_shape)
A:transformers.models.mpnet.modeling_mpnet.o->self.o(c)
A:transformers.models.mpnet.modeling_mpnet.self.attn->MPNetSelfAttention(config)
A:transformers.models.mpnet.modeling_mpnet.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.mpnet.modeling_mpnet.(heads, index)->find_pruneable_heads_and_indices(heads, self.attn.num_attention_heads, self.attn.attention_head_size, self.pruned_heads)
A:transformers.models.mpnet.modeling_mpnet.self.attn.q->prune_linear_layer(self.attn.q, index)
A:transformers.models.mpnet.modeling_mpnet.self.attn.k->prune_linear_layer(self.attn.k, index)
A:transformers.models.mpnet.modeling_mpnet.self.attn.v->prune_linear_layer(self.attn.v, index)
A:transformers.models.mpnet.modeling_mpnet.self.attn.o->prune_linear_layer(self.attn.o, index, dim=1)
A:transformers.models.mpnet.modeling_mpnet.self_outputs->self.attn(hidden_states, attention_mask, head_mask, position_bias, output_attentions=output_attentions)
A:transformers.models.mpnet.modeling_mpnet.attention_output->self.LayerNorm(self.dropout(self_outputs[0]) + hidden_states)
A:transformers.models.mpnet.modeling_mpnet.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.mpnet.modeling_mpnet.hidden_states->self.LayerNorm(hidden_states + input_tensor)
A:transformers.models.mpnet.modeling_mpnet.self.attention->MPNetAttention(config)
A:transformers.models.mpnet.modeling_mpnet.self.intermediate->MPNetIntermediate(config)
A:transformers.models.mpnet.modeling_mpnet.self.output->MPNetOutput(config)
A:transformers.models.mpnet.modeling_mpnet.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, position_bias=position_bias, output_attentions=output_attentions)
A:transformers.models.mpnet.modeling_mpnet.intermediate_output->self.intermediate(attention_output)
A:transformers.models.mpnet.modeling_mpnet.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.mpnet.modeling_mpnet.self.layer->torch.nn.ModuleList([MPNetLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.mpnet.modeling_mpnet.self.relative_attention_bias->torch.nn.Embedding(config.relative_attention_num_buckets, self.n_heads)
A:transformers.models.mpnet.modeling_mpnet.position_bias->self.compute_position_bias(hidden_states)
A:transformers.models.mpnet.modeling_mpnet.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], position_bias, output_attentions=output_attentions, **kwargs)
A:transformers.models.mpnet.modeling_mpnet.rp_bucket->rp_bucket.to(x.device).to(x.device)
A:transformers.models.mpnet.modeling_mpnet.values->values.expand((bsz, -1, qlen, klen)).contiguous().expand((bsz, -1, qlen, klen)).contiguous()
A:transformers.models.mpnet.modeling_mpnet.n->torch.abs(n)
A:transformers.models.mpnet.modeling_mpnet.val_if_large->torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))
A:transformers.models.mpnet.modeling_mpnet.self.activation->torch.nn.Tanh()
A:transformers.models.mpnet.modeling_mpnet.pooled_output->self.dropout(pooled_output)
A:transformers.models.mpnet.modeling_mpnet.self.embeddings->MPNetEmbeddings(config)
A:transformers.models.mpnet.modeling_mpnet.self.encoder->MPNetEncoder(config)
A:transformers.models.mpnet.modeling_mpnet.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.mpnet.modeling_mpnet.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.mpnet.modeling_mpnet.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, inputs_embeds=inputs_embeds)
A:transformers.models.mpnet.modeling_mpnet.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.mpnet.modeling_mpnet.self.mpnet->MPNetModel(config, add_pooling_layer=False)
A:transformers.models.mpnet.modeling_mpnet.self.lm_head->MPNetLMHead(config)
A:transformers.models.mpnet.modeling_mpnet.outputs->self.mpnet(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.mpnet.modeling_mpnet.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.mpnet.modeling_mpnet.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.mpnet.modeling_mpnet.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.mpnet.modeling_mpnet.self.layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.mpnet.modeling_mpnet.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.mpnet.modeling_mpnet.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.mpnet.modeling_mpnet.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mpnet.modeling_mpnet.logits->self.qa_outputs(sequence_output)
A:transformers.models.mpnet.modeling_mpnet.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.mpnet.modeling_mpnet.reshaped_logits->self.qa_outputs(sequence_output).view(-1, num_choices)
A:transformers.models.mpnet.modeling_mpnet.sequence_output->self.dropout(sequence_output)
A:transformers.models.mpnet.modeling_mpnet.active_logits->self.qa_outputs(sequence_output).view(-1, self.num_labels)
A:transformers.models.mpnet.modeling_mpnet.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.mpnet.modeling_mpnet.self.out_proj->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mpnet.modeling_mpnet.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.mpnet.modeling_mpnet.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.mpnet.modeling_mpnet.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.mpnet.modeling_mpnet.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.mpnet.modeling_mpnet.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.mpnet.modeling_mpnet.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.mpnet.modeling_mpnet.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.mpnet.modeling_mpnet.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.mpnet.modeling_mpnet.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.mpnet.modeling_mpnet.mask->input_ids.ne(padding_idx).int()
transformers.MPNetForMaskedLM(self,config)
transformers.MPNetForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MPNetForMaskedLM.get_output_embeddings(self)
transformers.MPNetForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.MPNetForMultipleChoice(self,config)
transformers.MPNetForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MPNetForQuestionAnswering(self,config)
transformers.MPNetForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MPNetForSequenceClassification(self,config)
transformers.MPNetForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MPNetForTokenClassification(self,config)
transformers.MPNetForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.MPNetLayer(self,config)
transformers.MPNetLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,position_bias=None,output_attentions=False,**kwargs)
transformers.MPNetModel(self,config,add_pooling_layer=True)
transformers.MPNetModel._prune_heads(self,heads_to_prune)
transformers.MPNetModel.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.MPNetModel.get_input_embeddings(self)
transformers.MPNetModel.set_input_embeddings(self,value)
transformers.MPNetPreTrainedModel(PreTrainedModel)
transformers.MPNetPreTrainedModel._init_weights(self,module)
transformers.models.mpnet.modeling_mpnet.MPNetAttention(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetAttention.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,position_bias=None,output_attentions=False,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetAttention.prune_heads(self,heads)
transformers.models.mpnet.modeling_mpnet.MPNetClassificationHead(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetClassificationHead.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetClassificationHead.forward(self,features,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetEmbeddings(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetEmbeddings.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.mpnet.modeling_mpnet.MPNetEmbeddings.forward(self,input_ids=None,position_ids=None,inputs_embeds=None,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetEncoder(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetEncoder.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetEncoder.compute_position_bias(self,x,position_ids=None,num_buckets=32)
transformers.models.mpnet.modeling_mpnet.MPNetEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,output_attentions=False,output_hidden_states=False,return_dict=False,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetEncoder.relative_position_bucket(relative_position,num_buckets=32,max_distance=128)
transformers.models.mpnet.modeling_mpnet.MPNetForMaskedLM(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForMaskedLM.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mpnet.modeling_mpnet.MPNetForMaskedLM.get_output_embeddings(self)
transformers.models.mpnet.modeling_mpnet.MPNetForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.mpnet.modeling_mpnet.MPNetForMultipleChoice(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForMultipleChoice.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mpnet.modeling_mpnet.MPNetForQuestionAnswering(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForQuestionAnswering.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mpnet.modeling_mpnet.MPNetForSequenceClassification(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForSequenceClassification.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mpnet.modeling_mpnet.MPNetForTokenClassification(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForTokenClassification.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.mpnet.modeling_mpnet.MPNetIntermediate(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetIntermediate.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetIntermediate.forward(self,hidden_states)
transformers.models.mpnet.modeling_mpnet.MPNetLMHead(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetLMHead.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetLMHead.forward(self,features,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetLayer(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetLayer.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,position_bias=None,output_attentions=False,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetModel(self,config,add_pooling_layer=True)
transformers.models.mpnet.modeling_mpnet.MPNetModel.__init__(self,config,add_pooling_layer=True)
transformers.models.mpnet.modeling_mpnet.MPNetModel._prune_heads(self,heads_to_prune)
transformers.models.mpnet.modeling_mpnet.MPNetModel.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetModel.get_input_embeddings(self)
transformers.models.mpnet.modeling_mpnet.MPNetModel.set_input_embeddings(self,value)
transformers.models.mpnet.modeling_mpnet.MPNetOutput(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetOutput.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetOutput.forward(self,hidden_states,input_tensor)
transformers.models.mpnet.modeling_mpnet.MPNetPooler(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetPooler.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetPooler.forward(self,hidden_states)
transformers.models.mpnet.modeling_mpnet.MPNetPreTrainedModel(PreTrainedModel)
transformers.models.mpnet.modeling_mpnet.MPNetPreTrainedModel._init_weights(self,module)
transformers.models.mpnet.modeling_mpnet.MPNetSelfAttention(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetSelfAttention.__init__(self,config)
transformers.models.mpnet.modeling_mpnet.MPNetSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,position_bias=None,output_attentions=False,**kwargs)
transformers.models.mpnet.modeling_mpnet.MPNetSelfAttention.transpose_for_scores(self,x)
transformers.models.mpnet.modeling_mpnet.create_position_ids_from_input_ids(input_ids,padding_idx)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/tokenization_mpnet_fast.py----------------------------------------
A:transformers.models.mpnet.tokenization_mpnet_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.mpnet.tokenization_mpnet_fast.pre_tok_state->json.loads(self.backend_tokenizer.normalizer.__getstate__())
A:transformers.models.mpnet.tokenization_mpnet_fast.pre_tok_class->getattr(normalizers, pre_tok_state.pop('type'))
A:transformers.models.mpnet.tokenization_mpnet_fast.self.backend_tokenizer.normalizer->pre_tok_class(**pre_tok_state)
A:transformers.models.mpnet.tokenization_mpnet_fast.files->self._tokenizer.model.save(save_directory, name=filename_prefix)
transformers.MPNetTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.MPNetTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.MPNetTokenizerFast.mask_token(self)->str
transformers.MPNetTokenizerFast.mask_token(self,value)
transformers.MPNetTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,do_lower_case=True,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.mask_token(self)->str
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.mask_token(self,value)
transformers.models.mpnet.tokenization_mpnet_fast.MPNetTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/modeling_tf_mpnet.py----------------------------------------
A:transformers.models.mpnet.modeling_tf_mpnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.mpnet.modeling_tf_mpnet.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.mpnet.modeling_tf_mpnet.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.mpnet.modeling_tf_mpnet.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.mpnet.modeling_tf_mpnet.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.mpnet.modeling_tf_mpnet.mask->tensorflow.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)
A:transformers.models.mpnet.modeling_tf_mpnet.position_ids->self.create_position_ids_from_inputs_embeds(inputs_embeds)
A:transformers.models.mpnet.modeling_tf_mpnet.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.mpnet.modeling_tf_mpnet.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.mpnet.modeling_tf_mpnet.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.mpnet.modeling_tf_mpnet.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.x->self.out_proj(x)
A:transformers.models.mpnet.modeling_tf_mpnet.logits->self.qa_outputs(sequence_output)
A:transformers.models.mpnet.modeling_tf_mpnet.self.dense->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), activation='tanh', name='dense')
A:transformers.models.mpnet.modeling_tf_mpnet.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.mpnet.modeling_tf_mpnet.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.mpnet.modeling_tf_mpnet.self.q->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='q')
A:transformers.models.mpnet.modeling_tf_mpnet.self.k->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='k')
A:transformers.models.mpnet.modeling_tf_mpnet.self.v->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='v')
A:transformers.models.mpnet.modeling_tf_mpnet.self.o->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='o')
A:transformers.models.mpnet.modeling_tf_mpnet.q->self.transpose_for_scores(q, batch_size)
A:transformers.models.mpnet.modeling_tf_mpnet.k->self.transpose_for_scores(k, batch_size)
A:transformers.models.mpnet.modeling_tf_mpnet.v->self.transpose_for_scores(v, batch_size)
A:transformers.models.mpnet.modeling_tf_mpnet.attention_scores->tensorflow.matmul(q, k, transpose_b=True)
A:transformers.models.mpnet.modeling_tf_mpnet.dk->tensorflow.cast(shape_list(k)[-1], attention_scores.dtype)
A:transformers.models.mpnet.modeling_tf_mpnet.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.c->tensorflow.reshape(c, (batch_size, -1, self.all_head_size))
A:transformers.models.mpnet.modeling_tf_mpnet.o->self.o(c)
A:transformers.models.mpnet.modeling_tf_mpnet.self.attn->TFMPNetSelfAttention(config, name='attn')
A:transformers.models.mpnet.modeling_tf_mpnet.self_outputs->self.attn(input_tensor, attention_mask, head_mask, output_attentions, position_bias=position_bias, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.attention_output->self.LayerNorm(self.dropout(self_outputs[0]) + input_tensor)
A:transformers.models.mpnet.modeling_tf_mpnet.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.mpnet.modeling_tf_mpnet.hidden_states->self.LayerNorm(hidden_states + input_tensor)
A:transformers.models.mpnet.modeling_tf_mpnet.self.attention->TFMPNetAttention(config, name='attention')
A:transformers.models.mpnet.modeling_tf_mpnet.self.intermediate->TFMPNetIntermediate(config, name='intermediate')
A:transformers.models.mpnet.modeling_tf_mpnet.self.out->TFMPNetOutput(config, name='output')
A:transformers.models.mpnet.modeling_tf_mpnet.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions, position_bias=position_bias, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.intermediate_output->self.intermediate(attention_output)
A:transformers.models.mpnet.modeling_tf_mpnet.layer_output->self.out(intermediate_output, attention_output, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.self.relative_attention_bias->tensorflow.keras.layers.Embedding(config.relative_attention_num_buckets, self.n_heads, name='relative_attention_bias')
A:transformers.models.mpnet.modeling_tf_mpnet.position_bias->self.compute_position_bias(hidden_states)
A:transformers.models.mpnet.modeling_tf_mpnet.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions, position_bias=position_bias, training=training)
A:transformers.models.mpnet.modeling_tf_mpnet.n->tensorflow.math.abs(n)
A:transformers.models.mpnet.modeling_tf_mpnet.is_small->tensorflow.math.less(n, max_exact)
A:transformers.models.mpnet.modeling_tf_mpnet.val_if_large->tensorflow.math.minimum(val_if_large, num_buckets - 1)
A:transformers.models.mpnet.modeling_tf_mpnet.rp_bucket->self._relative_position_bucket(relative_position, num_buckets=self.relative_attention_num_buckets)
A:transformers.models.mpnet.modeling_tf_mpnet.values->tensorflow.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)
A:transformers.models.mpnet.modeling_tf_mpnet.self.encoder->TFMPNetEncoder(config, name='encoder')
A:transformers.models.mpnet.modeling_tf_mpnet.self.pooler->TFMPNetPooler(config, name='pooler')
A:transformers.models.mpnet.modeling_tf_mpnet.self.embeddings->TFMPNetEmbeddings(config, name='embeddings')
A:transformers.models.mpnet.modeling_tf_mpnet.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.mpnet.modeling_tf_mpnet.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.mpnet.modeling_tf_mpnet.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.mpnet.modeling_tf_mpnet.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.mpnet.modeling_tf_mpnet.extended_attention_mask->tensorflow.cast(extended_attention_mask, embedding_output.dtype)
A:transformers.models.mpnet.modeling_tf_mpnet.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.mpnet.modeling_tf_mpnet.self.mpnet->TFMPNetMainLayer(config, name='mpnet')
A:transformers.models.mpnet.modeling_tf_mpnet.outputs->self.mpnet(inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.mpnet.modeling_tf_mpnet.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm')
A:transformers.models.mpnet.modeling_tf_mpnet.self.act->get_tf_activation('gelu')
A:transformers.models.mpnet.modeling_tf_mpnet.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.mpnet.modeling_tf_mpnet.self.lm_head->TFMPNetLMHead(config, self.mpnet.embeddings, name='lm_head')
A:transformers.models.mpnet.modeling_tf_mpnet.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.mpnet.modeling_tf_mpnet.self.out_proj->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='out_proj')
A:transformers.models.mpnet.modeling_tf_mpnet.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.mpnet.modeling_tf_mpnet.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.mpnet.modeling_tf_mpnet.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.mpnet.modeling_tf_mpnet.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.mpnet.modeling_tf_mpnet.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.mpnet.modeling_tf_mpnet.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.mpnet.modeling_tf_mpnet.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.mpnet.modeling_tf_mpnet.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFMPNetForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFMPNetForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMPNetForMaskedLM.get_output_embeddings(self)
transformers.TFMPNetForMaskedLM.get_output_layer_with_bias(self)
transformers.TFMPNetForMaskedLM.get_prefix_bias_name(self)
transformers.TFMPNetForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFMPNetForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMPNetForMultipleChoice.dummy_inputs(self)
transformers.TFMPNetForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFMPNetForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFMPNetForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFMPNetForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMPNetForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFMPNetForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFMPNetMainLayer(self,config,**kwargs)
transformers.TFMPNetMainLayer._prune_heads(self,heads_to_prune)
transformers.TFMPNetMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFMPNetMainLayer.get_input_embeddings(self)
transformers.TFMPNetMainLayer.set_input_embeddings(self,value)
transformers.TFMPNetModel(self,config,*inputs,**kwargs)
transformers.TFMPNetModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFMPNetPreTrainedModel(TFPreTrainedModel)
transformers.models.mpnet.TFMPNetEmbeddings(self,config,**kwargs)
transformers.models.mpnet.TFMPNetEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.mpnet.TFMPNetEmbeddings._linear(self,inputs)
transformers.models.mpnet.TFMPNetEmbeddings.build(self,input_shape)
transformers.models.mpnet.TFMPNetEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.mpnet.TFMPNetEmbeddings.create_position_ids_from_input_ids(self,x)
transformers.models.mpnet.TFMPNetEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetAttention(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetAttention.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetAttention.call(self,input_tensor,attention_mask,head_mask,output_attentions,position_bias=None,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetAttention.prune_heads(self,heads)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetClassificationHead(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetClassificationHead.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetClassificationHead.call(self,features,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings._linear(self,inputs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings.build(self,input_shape)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings.create_position_ids_from_input_ids(self,x)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder._relative_position_bucket(relative_position,num_buckets=32,max_distance=128)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder.compute_position_bias(self,x,position_ids=None)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM.get_output_embeddings(self)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM.get_output_layer_with_bias(self)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM.get_prefix_bias_name(self)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice.dummy_inputs(self)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetIntermediate(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetIntermediate.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetIntermediate.call(self,hidden_states)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLMHead(self,config,input_embeddings,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLMHead.build(self,input_shape)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLMHead.call(self,features)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLayer(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLayer.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,position_bias=None,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer._prune_heads(self,heads_to_prune)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer.get_input_embeddings(self)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer.set_input_embeddings(self,value)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetModel(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetModel.__init__(self,config,*inputs,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetOutput(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetOutput.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPooler(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPooler.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPooler.call(self,hidden_states)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPreTrainedModel(TFPreTrainedModel)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetSelfAttention(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetSelfAttention.__init__(self,config,**kwargs)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetSelfAttention.call(self,hidden_states,attention_mask,head_mask,output_attentions,position_bias=None,training=False)
transformers.models.mpnet.modeling_tf_mpnet.TFMPNetSelfAttention.transpose_for_scores(self,x,batch_size)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/tokenization_mpnet.py----------------------------------------
A:transformers.models.mpnet.tokenization_mpnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.mpnet.tokenization_mpnet.vocab->collections.OrderedDict()
A:transformers.models.mpnet.tokenization_mpnet.tokens->unicodedata.normalize('NFD', text).split()
A:transformers.models.mpnet.tokenization_mpnet.token->self._run_strip_accents(token)
A:transformers.models.mpnet.tokenization_mpnet.text->unicodedata.normalize('NFD', text)
A:transformers.models.mpnet.tokenization_mpnet.self.vocab->load_vocab(vocab_file)
A:transformers.models.mpnet.tokenization_mpnet.self.ids_to_tokens->collections.OrderedDict([(ids, tok) for (tok, ids) in self.vocab.items()])
A:transformers.models.mpnet.tokenization_mpnet.self.basic_tokenizer->BasicTokenizer(do_lower_case=do_lower_case, never_split=never_split, tokenize_chinese_chars=tokenize_chinese_chars, strip_accents=strip_accents)
A:transformers.models.mpnet.tokenization_mpnet.self.wordpiece_tokenizer->WordpieceTokenizer(vocab=self.vocab, unk_token=self.unk_token)
A:transformers.models.mpnet.tokenization_mpnet.split_tokens->self.wordpiece_tokenizer.tokenize(text)
A:transformers.models.mpnet.tokenization_mpnet.out_string->' '.join(tokens).replace(' ##', '').strip()
A:transformers.models.mpnet.tokenization_mpnet.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.mpnet.tokenization_mpnet.self.never_split->set(never_split)
A:transformers.models.mpnet.tokenization_mpnet.orig_tokens->whitespace_tokenize(text)
A:transformers.models.mpnet.tokenization_mpnet.output_tokens->whitespace_tokenize(' '.join(split_tokens))
A:transformers.models.mpnet.tokenization_mpnet.cat->unicodedata.category(char)
A:transformers.models.mpnet.tokenization_mpnet.chars->list(token)
A:transformers.models.mpnet.tokenization_mpnet.cp->ord(char)
A:transformers.models.mpnet.tokenization_mpnet.end->len(chars)
A:transformers.models.mpnet.tokenization_mpnet.substr->''.join(chars[start:end])
transformers.MPNetTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.MPNetTokenizer._convert_id_to_token(self,index)
transformers.MPNetTokenizer._convert_token_to_id(self,token)
transformers.MPNetTokenizer._tokenize(self,text)
transformers.MPNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.MPNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.MPNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.MPNetTokenizer.do_lower_case(self)
transformers.MPNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.MPNetTokenizer.get_vocab(self)
transformers.MPNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.MPNetTokenizer.vocab_size(self)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer.__init__(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer._clean_text(self,text)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer._is_chinese_char(self,cp)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer._run_split_on_punc(self,text,never_split=None)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer._run_strip_accents(self,text)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer._tokenize_chinese_chars(self,text)
transformers.models.mpnet.tokenization_mpnet.BasicTokenizer.tokenize(self,text,never_split=None)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.__init__(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='[UNK]',pad_token='<pad>',mask_token='<mask>',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer._convert_id_to_token(self,index)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer._convert_token_to_id(self,token)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer._tokenize(self,text)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.do_lower_case(self)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.get_vocab(self)
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.mpnet.tokenization_mpnet.MPNetTokenizer.vocab_size(self)
transformers.models.mpnet.tokenization_mpnet.WordpieceTokenizer(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.mpnet.tokenization_mpnet.WordpieceTokenizer.__init__(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.mpnet.tokenization_mpnet.WordpieceTokenizer.tokenize(self,text)
transformers.models.mpnet.tokenization_mpnet.load_vocab(vocab_file)
transformers.models.mpnet.tokenization_mpnet.whitespace_tokenize(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/mpnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/modeling_tf_camembert.py----------------------------------------
A:transformers.models.camembert.modeling_tf_camembert.logger->utils.logging.get_logger(__name__)
transformers.TFCamembertForMaskedLM(TFRobertaForMaskedLM)
transformers.TFCamembertForMultipleChoice(TFRobertaForMultipleChoice)
transformers.TFCamembertForQuestionAnswering(TFRobertaForQuestionAnswering)
transformers.TFCamembertForSequenceClassification(TFRobertaForSequenceClassification)
transformers.TFCamembertForTokenClassification(TFRobertaForTokenClassification)
transformers.TFCamembertModel(TFRobertaModel)
transformers.models.camembert.modeling_tf_camembert.TFCamembertForMaskedLM(TFRobertaForMaskedLM)
transformers.models.camembert.modeling_tf_camembert.TFCamembertForMultipleChoice(TFRobertaForMultipleChoice)
transformers.models.camembert.modeling_tf_camembert.TFCamembertForQuestionAnswering(TFRobertaForQuestionAnswering)
transformers.models.camembert.modeling_tf_camembert.TFCamembertForSequenceClassification(TFRobertaForSequenceClassification)
transformers.models.camembert.modeling_tf_camembert.TFCamembertForTokenClassification(TFRobertaForTokenClassification)
transformers.models.camembert.modeling_tf_camembert.TFCamembertModel(TFRobertaModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/modeling_camembert.py----------------------------------------
A:transformers.models.camembert.modeling_camembert.logger->utils.logging.get_logger(__name__)
transformers.CamembertForCausalLM(RobertaForCausalLM)
transformers.CamembertForMaskedLM(RobertaForMaskedLM)
transformers.CamembertForMultipleChoice(RobertaForMultipleChoice)
transformers.CamembertForQuestionAnswering(RobertaForQuestionAnswering)
transformers.CamembertForSequenceClassification(RobertaForSequenceClassification)
transformers.CamembertForTokenClassification(RobertaForTokenClassification)
transformers.CamembertModel(RobertaModel)
transformers.models.camembert.modeling_camembert.CamembertForCausalLM(RobertaForCausalLM)
transformers.models.camembert.modeling_camembert.CamembertForMaskedLM(RobertaForMaskedLM)
transformers.models.camembert.modeling_camembert.CamembertForMultipleChoice(RobertaForMultipleChoice)
transformers.models.camembert.modeling_camembert.CamembertForQuestionAnswering(RobertaForQuestionAnswering)
transformers.models.camembert.modeling_camembert.CamembertForSequenceClassification(RobertaForSequenceClassification)
transformers.models.camembert.modeling_camembert.CamembertForTokenClassification(RobertaForTokenClassification)
transformers.models.camembert.modeling_camembert.CamembertModel(RobertaModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/configuration_camembert.py----------------------------------------
A:transformers.models.camembert.configuration_camembert.logger->utils.logging.get_logger(__name__)
transformers.CamembertConfig(RobertaConfig)
transformers.models.camembert.configuration_camembert.CamembertConfig(RobertaConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/tokenization_camembert_fast.py----------------------------------------
A:transformers.models.camembert.tokenization_camembert_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.camembert.tokenization_camembert_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.CamembertTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.CamembertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.CamembertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.CamembertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.camembert.tokenization_camembert_fast.CamembertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/tokenization_camembert.py----------------------------------------
A:transformers.models.camembert.tokenization_camembert.logger->utils.logging.get_logger(__name__)
A:transformers.models.camembert.tokenization_camembert.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.camembert.tokenization_camembert.self.fairseq_offset->len(self.fairseq_tokens_to_ids)
A:transformers.models.camembert.tokenization_camembert.state->self.__dict__.copy()
A:transformers.models.camembert.tokenization_camembert.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.camembert.tokenization_camembert.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.CamembertTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.CamembertTokenizer.__getstate__(self)
transformers.CamembertTokenizer.__setstate__(self,d)
transformers.CamembertTokenizer._convert_id_to_token(self,index)
transformers.CamembertTokenizer._convert_token_to_id(self,token)
transformers.CamembertTokenizer._tokenize(self,text)
transformers.CamembertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.CamembertTokenizer.convert_tokens_to_string(self,tokens)
transformers.CamembertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.CamembertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.CamembertTokenizer.get_vocab(self)
transformers.CamembertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.CamembertTokenizer.vocab_size(self)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.__getstate__(self)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.__init__(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',additional_special_tokens=['<s>NOTUSED','</s>NOTUSED'],**kwargs)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.__setstate__(self,d)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer._convert_id_to_token(self,index)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer._convert_token_to_id(self,token)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer._tokenize(self,text)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.get_vocab(self)
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.camembert.tokenization_camembert.CamembertTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/camembert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/tapas/configuration_tapas.py----------------------------------------
transformers.TapasConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=1024,type_vocab_sizes=[3,256,256,2,256,256,10],initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,positive_label_weight=10.0,num_aggregation_labels=0,aggregation_loss_weight=1.0,use_answer_as_supervision=None,answer_loss_importance=1.0,use_normalized_answer_loss=False,huber_loss_delta=None,temperature=1.0,aggregation_temperature=1.0,use_gumbel_for_cells=False,use_gumbel_for_aggregation=False,average_approximation_function='ratio',cell_selection_preference=None,answer_loss_cutoff=None,max_num_rows=64,max_num_columns=32,average_logits_per_cell=False,select_one_column=True,allow_empty_column_selection=False,init_cell_selection_weights_to_zero=False,reset_position_index_per_cell=True,disable_per_token_loss=False,aggregation_labels=None,no_aggregation_label_index=None,**kwargs)
transformers.models.tapas.configuration_tapas.TapasConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=1024,type_vocab_sizes=[3,256,256,2,256,256,10],initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,positive_label_weight=10.0,num_aggregation_labels=0,aggregation_loss_weight=1.0,use_answer_as_supervision=None,answer_loss_importance=1.0,use_normalized_answer_loss=False,huber_loss_delta=None,temperature=1.0,aggregation_temperature=1.0,use_gumbel_for_cells=False,use_gumbel_for_aggregation=False,average_approximation_function='ratio',cell_selection_preference=None,answer_loss_cutoff=None,max_num_rows=64,max_num_columns=32,average_logits_per_cell=False,select_one_column=True,allow_empty_column_selection=False,init_cell_selection_weights_to_zero=False,reset_position_index_per_cell=True,disable_per_token_loss=False,aggregation_labels=None,no_aggregation_label_index=None,**kwargs)
transformers.models.tapas.configuration_tapas.TapasConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=1024,type_vocab_sizes=[3,256,256,2,256,256,10],initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,positive_label_weight=10.0,num_aggregation_labels=0,aggregation_loss_weight=1.0,use_answer_as_supervision=None,answer_loss_importance=1.0,use_normalized_answer_loss=False,huber_loss_delta=None,temperature=1.0,aggregation_temperature=1.0,use_gumbel_for_cells=False,use_gumbel_for_aggregation=False,average_approximation_function='ratio',cell_selection_preference=None,answer_loss_cutoff=None,max_num_rows=64,max_num_columns=32,average_logits_per_cell=False,select_one_column=True,allow_empty_column_selection=False,init_cell_selection_weights_to_zero=False,reset_position_index_per_cell=True,disable_per_token_loss=False,aggregation_labels=None,no_aggregation_label_index=None,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/tapas/tokenization_tapas.py----------------------------------------
A:transformers.models.tapas.tokenization_tapas.logger->utils.logging.get_logger(__name__)
A:transformers.models.tapas.tokenization_tapas.TableValue->collections.namedtuple('TokenValue', ['token', 'column_id', 'row_id'])
A:transformers.models.tapas.tokenization_tapas.vocab->collections.OrderedDict()
A:transformers.models.tapas.tokenization_tapas.tokens->normalize_for_match(row[col_index].text).split()
A:transformers.models.tapas.tokenization_tapas.token->self._run_strip_accents(token)
A:transformers.models.tapas.tokenization_tapas.text->normalize_for_match(row[col_index].text)
A:transformers.models.tapas.tokenization_tapas.self.vocab->load_vocab(vocab_file)
A:transformers.models.tapas.tokenization_tapas.self.ids_to_tokens->collections.OrderedDict([(ids, tok) for (tok, ids) in self.vocab.items()])
A:transformers.models.tapas.tokenization_tapas.self.basic_tokenizer->BasicTokenizer(do_lower_case=do_lower_case, never_split=never_split, tokenize_chinese_chars=tokenize_chinese_chars, strip_accents=strip_accents)
A:transformers.models.tapas.tokenization_tapas.self.wordpiece_tokenizer->WordpieceTokenizer(vocab=self.vocab, unk_token=self.unk_token)
A:transformers.models.tapas.tokenization_tapas.split_tokens->self.wordpiece_tokenizer.tokenize(text)
A:transformers.models.tapas.tokenization_tapas.out_string->' '.join(tokens).replace(' ##', '').strip()
A:transformers.models.tapas.tokenization_tapas.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.tapas.tokenization_tapas.is_batched->isinstance(queries, (list, tuple))
A:transformers.models.tapas.tokenization_tapas.table_tokens->self._tokenize_table(table)
A:transformers.models.tapas.tokenization_tapas.query_tokens->self.tokenize(query)
A:transformers.models.tapas.tokenization_tapas.batch_outputs->BatchEncoding(encoded_inputs, tensor_type=return_tensors, prepend_batch_axis=prepend_batch_axis)
A:transformers.models.tapas.tokenization_tapas.outputs->self.prepare_for_model(raw_table, raw_query, tokenized_table=tokenized_table, query_tokens=query_tokens, answer_coordinates=answer_coords, answer_text=answer_txt, add_special_tokens=add_special_tokens, padding=PaddingStrategy.DO_NOT_PAD.value, truncation=truncation, max_length=max_length, pad_to_multiple_of=None, return_attention_mask=False, return_token_type_ids=return_token_type_ids, return_special_tokens_mask=return_special_tokens_mask, return_length=return_length, return_tensors=None, prepend_batch_axis=False, verbose=verbose, prev_answer_coordinates=answer_coordinates[index - 1] if index != 0 else None, prev_answer_text=answer_text[index - 1] if index != 0 else None)
A:transformers.models.tapas.tokenization_tapas.encoded_inputs->self.pad(encoded_inputs, max_length=max_length, padding=padding.value, pad_to_multiple_of=pad_to_multiple_of, return_attention_mask=return_attention_mask)
A:transformers.models.tapas.tokenization_tapas.padding->PaddingStrategy(padding)
A:transformers.models.tapas.tokenization_tapas.truncation->TapasTruncationStrategy(truncation)
A:transformers.models.tapas.tokenization_tapas.num_rows->self._get_num_rows(raw_table, self.drop_rows_to_fit)
A:transformers.models.tapas.tokenization_tapas.num_columns->self._get_num_columns(raw_table)
A:transformers.models.tapas.tokenization_tapas.(_, _, num_tokens)->self._get_table_boundaries(tokenized_table)
A:transformers.models.tapas.tokenization_tapas.(num_rows, num_tokens)->self._get_truncated_table_rows(query_tokens, tokenized_table, num_rows, num_columns, max_length, truncation_strategy=truncation)
A:transformers.models.tapas.tokenization_tapas.table_data->list(self._get_table_values(tokenized_table, num_columns, num_rows, num_tokens))
A:transformers.models.tapas.tokenization_tapas.query_ids->self.convert_tokens_to_ids(query_tokens)
A:transformers.models.tapas.tokenization_tapas.table_ids->self.convert_tokens_to_ids(list(table_ids))
A:transformers.models.tapas.tokenization_tapas.input_ids->self.build_inputs_with_special_tokens(query_ids, table_ids)
A:transformers.models.tapas.tokenization_tapas.segment_ids->self.create_segment_token_type_ids_from_sequences(query_ids, table_data)
A:transformers.models.tapas.tokenization_tapas.column_ids->self.create_column_token_type_ids_from_sequences(query_ids, table_data)
A:transformers.models.tapas.tokenization_tapas.row_ids->self.create_row_token_type_ids_from_sequences(query_ids, table_data)
A:transformers.models.tapas.tokenization_tapas.prev_labels->self.get_answer_ids(column_ids, row_ids, table_data, prev_answer_text, prev_answer_coordinates)
A:transformers.models.tapas.tokenization_tapas.raw_table->add_numeric_table_values(raw_table)
A:transformers.models.tapas.tokenization_tapas.raw_query->add_numeric_values_to_question(raw_query)
A:transformers.models.tapas.tokenization_tapas.(column_ranks, inv_column_ranks)->self._get_numeric_column_ranks(column_ids, row_ids, raw_table)
A:transformers.models.tapas.tokenization_tapas.numeric_relations->self._get_numeric_relations(raw_query, column_ids, row_ids, raw_table)
A:transformers.models.tapas.tokenization_tapas.attention_mask->self.create_attention_mask_from_sequences(query_ids, table_data)
A:transformers.models.tapas.tokenization_tapas.labels->self.get_answer_ids(column_ids, row_ids, table_data, answer_text, answer_coordinates)
A:transformers.models.tapas.tokenization_tapas.numeric_values->self._get_numeric_values(raw_table, column_ids, row_ids)
A:transformers.models.tapas.tokenization_tapas.numeric_values_scale->self._get_numeric_values_scale(raw_table, column_ids, row_ids)
A:transformers.models.tapas.tokenization_tapas.encoded_inputs['special_tokens_mask']->self.get_special_tokens_mask(query_ids, table_ids)
A:transformers.models.tapas.tokenization_tapas.encoded_inputs['length']->len(encoded_inputs['input_ids'])
A:transformers.models.tapas.tokenization_tapas.truncation_strategy->TapasTruncationStrategy(truncation_strategy)
A:transformers.models.tapas.tokenization_tapas.num_tokens->self._get_max_num_tokens(query_tokens, tokenized_table, num_rows=num_rows, num_columns=num_columns, max_length=max_length)
A:transformers.models.tapas.tokenization_tapas.max_num_columns->min(self.max_column_id, max_num_columns)
A:transformers.models.tapas.tokenization_tapas.max_num_rows->min(self.max_row_id, max_num_rows)
A:transformers.models.tapas.tokenization_tapas.max_num_tokens->max(max_num_tokens, tc.token_index + 1)
A:transformers.models.tapas.tokenization_tapas.token_budget->self._get_token_budget(question_tokens, max_length)
A:transformers.models.tapas.tokenization_tapas.(_, _, max_num_tokens)->self._get_table_boundaries(tokenized_table)
A:transformers.models.tapas.tokenization_tapas.cost->self._get_table_cost(tokenized_table, num_columns, num_rows, num_tokens + 1)
A:transformers.models.tapas.tokenization_tapas.(tokens, segment_ids, column_ids, row_ids)->self._serialize_text(question_tokens)
A:transformers.models.tapas.tokenization_tapas.table_numeric_values->self._get_column_values(table, column_index)
A:transformers.models.tapas.tokenization_tapas.key_fn->get_numeric_sort_key_fn(table_numeric_values.values())
A:transformers.models.tapas.tokenization_tapas.table_numeric_values_inv->collections.defaultdict(list)
A:transformers.models.tapas.tokenization_tapas.unique_values->sorted(table_numeric_values_inv.keys())
A:transformers.models.tapas.tokenization_tapas.all_values->list(table_numeric_values.values())
A:transformers.models.tapas.tokenization_tapas.cell_indices_to_relations->collections.defaultdict(set)
A:transformers.models.tapas.tokenization_tapas.sort_key_fn->self._get_numeric_sort_key_fn(table_numeric_values, value)
A:transformers.models.tapas.tokenization_tapas.relation->get_numeric_relation(value, cell_value, sort_key_fn)
A:transformers.models.tapas.tokenization_tapas.num_indices->len(indices)
A:transformers.models.tapas.tokenization_tapas.numeric_values_scale[index]->float(num_indices)
A:transformers.models.tapas.tokenization_tapas.found_answers->set()
A:transformers.models.tapas.tokenization_tapas.all_answers->set()
A:transformers.models.tapas.tokenization_tapas.token_index->self._find_tokens(cell, answer_text)
A:transformers.models.tapas.tokenization_tapas.indexes->list(self._get_cell_token_indexes(column_ids, row_ids, column_id=coordinates.column_index, row_id=coordinates.row_index - 1))
A:transformers.models.tapas.tokenization_tapas.(answer_ids, missing_count)->self._get_all_answer_ids(column_ids, row_ids, answer_coordinates)
A:transformers.models.tapas.tokenization_tapas.max_length->len(encoded_inputs['input_ids'])
A:transformers.models.tapas.tokenization_tapas.coords_to_probs->collections.defaultdict(list)
A:transformers.models.tapas.tokenization_tapas.probabilities_example->probabilities[i].tolist()
A:transformers.models.tapas.tokenization_tapas.max_width->column_ids_example.max()
A:transformers.models.tapas.tokenization_tapas.max_height->row_ids_example.max()
A:transformers.models.tapas.tokenization_tapas.cell_coords_to_prob->self._get_mean_cell_probs(probabilities_example, segment_ids_example.tolist(), row_ids_example.tolist(), column_ids_example.tolist())
A:transformers.models.tapas.tokenization_tapas.cell_prob->self._get_mean_cell_probs(probabilities_example, segment_ids_example.tolist(), row_ids_example.tolist(), column_ids_example.tolist()).get((col, row), None)
A:transformers.models.tapas.tokenization_tapas.answer_coordinates->sorted(answer_coordinates)
A:transformers.models.tapas.tokenization_tapas.predicted_aggregation_indices->logits_agg.argmax(dim=-1)
A:transformers.models.tapas.tokenization_tapas.self.never_split->set(never_split)
A:transformers.models.tapas.tokenization_tapas.orig_tokens->whitespace_tokenize(text)
A:transformers.models.tapas.tokenization_tapas.output_tokens->whitespace_tokenize(' '.join(split_tokens))
A:transformers.models.tapas.tokenization_tapas.cat->unicodedata.category(char)
A:transformers.models.tapas.tokenization_tapas.chars->list(token)
A:transformers.models.tapas.tokenization_tapas.cp->ord(char)
A:transformers.models.tapas.tokenization_tapas.end->len(chars)
A:transformers.models.tapas.tokenization_tapas.substr->''.join(chars[start:end])
A:transformers.models.tapas.tokenization_tapas._DateMask->collections.namedtuple('_DateMask', ['year', 'month', 'day'])
A:transformers.models.tapas.tokenization_tapas._YEAR->_DateMask(True, False, False)
A:transformers.models.tapas.tokenization_tapas._YEAR_MONTH->_DateMask(True, True, False)
A:transformers.models.tapas.tokenization_tapas._YEAR_MONTH_DAY->_DateMask(True, True, True)
A:transformers.models.tapas.tokenization_tapas._MONTH->_DateMask(False, True, False)
A:transformers.models.tapas.tokenization_tapas._MONTH_DAY->_DateMask(False, True, True)
A:transformers.models.tapas.tokenization_tapas.regex->regex.replace(field, field_regex).replace(field, field_regex)
A:transformers.models.tapas.tokenization_tapas._PROCESSED_DATE_PATTERNS->_process_date_patterns()
A:transformers.models.tapas.tokenization_tapas._NUMBER_PATTERN->re.compile('((^|\\s)[+-])?((\\.\\d+)|(\\d+(,\\d\\d\\d)*(\\.\\d*)?))')
A:transformers.models.tapas.tokenization_tapas._INF->float('INF')
A:transformers.models.tapas.tokenization_tapas.new_date->Date()
A:transformers.models.tapas.tokenization_tapas.date->_parse_date(span_text)
A:transformers.models.tapas.tokenization_tapas.value->sort_key_fn(value)
A:transformers.models.tapas.tokenization_tapas.span_dict->collections.defaultdict(list)
A:transformers.models.tapas.tokenization_tapas.number->_parse_number(span_text)
A:transformers.models.tapas.tokenization_tapas.spans->sorted(span_dict.items(), key=lambda span_value: _get_span_length_key(span_value[0]), reverse=True)
A:transformers.models.tapas.tokenization_tapas.value_tuple[0]->float(date.year)
A:transformers.models.tapas.tokenization_tapas.value_tuple[1]->float(date.month)
A:transformers.models.tapas.tokenization_tapas.value_tuple[2]->float(date.day)
A:transformers.models.tapas.tokenization_tapas.value_types->_get_all_types(numeric_values)
A:transformers.models.tapas.tokenization_tapas.value_type->next(iter(value_types))
A:transformers.models.tapas.tokenization_tapas.valid_indexes->set(range(_DATE_TUPLE_SIZE))
A:transformers.models.tapas.tokenization_tapas.type_counts->collections.Counter()
A:transformers.models.tapas.tokenization_tapas.max_count->max(type_counts.values())
A:transformers.models.tapas.tokenization_tapas.valid_types->set()
A:transformers.models.tapas.tokenization_tapas.max_type->next(iter(valid_types))
A:transformers.models.tapas.tokenization_tapas.numeric_spans->parse_text(question)
A:transformers.models.tapas.tokenization_tapas.index_to_values[row_index]->list(_get_numeric_values(text))
A:transformers.models.tapas.tokenization_tapas.other_value->sort_key_fn(other_value)
A:transformers.models.tapas.tokenization_tapas.question->normalize_for_match(question)
A:transformers.models.tapas.tokenization_tapas.(cell, is_invalid)->filter_invalid_unicode(cell)
A:transformers.models.tapas.tokenization_tapas.(column, is_invalid)->filter_invalid_unicode(column)
A:transformers.models.tapas.tokenization_tapas.table->table.copy().copy()
A:transformers.models.tapas.tokenization_tapas.table.iloc[row_index, col_index]->Cell(text=cell)
A:transformers.models.tapas.tokenization_tapas.column_values->_consolidate_numeric_values(_get_column_values(table, col_index), min_consolidation_fraction=min_consolidation_fraction, debug_info=(debug_info, column))
transformers.TapasTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',empty_token='[EMPTY]',tokenize_chinese_chars=True,strip_accents=None,cell_trim_length:int=-1,max_column_id:int=None,max_row_id:int=None,strip_column_names:bool=False,update_answer_coordinates:bool=False,drop_rows_to_fit:bool=False,model_max_length:int=512,additional_special_tokens:Optional[List[str]]=None,**kwargs)
transformers.TapasTokenizer._batch_encode_plus(self,table,queries:Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]],answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.TapasTokenizer._batch_prepare_for_model(self,raw_table:'pd.DataFrame',raw_queries:Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]],tokenized_table:Optional[TokenizedTable]=None,queries_tokens:Optional[List[List[str]]]=None,answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.TapasTokenizer._convert_id_to_token(self,index)
transformers.TapasTokenizer._convert_token_to_id(self,token)
transformers.TapasTokenizer._encode_plus(self,table:'pd.DataFrame',query:Union[TextInput,PreTokenizedInput,EncodedInput],answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)
transformers.TapasTokenizer._find_answer_coordinates_from_answer_text(self,tokenized_table,answer_text)
transformers.TapasTokenizer._find_answer_ids_from_answer_texts(self,column_ids,row_ids,tokenized_table,answer_texts)
transformers.TapasTokenizer._find_tokens(self,text,segment)
transformers.TapasTokenizer._get_all_answer_ids(self,column_ids,row_ids,answer_coordinates)
transformers.TapasTokenizer._get_all_answer_ids_from_coordinates(self,column_ids,row_ids,answers_list)
transformers.TapasTokenizer._get_answer_ids(self,column_ids,row_ids,answer_coordinates)
transformers.TapasTokenizer._get_cell_token_indexes(self,column_ids,row_ids,column_id,row_id)
transformers.TapasTokenizer._get_cell_token_probs(self,probabilities,segment_ids,row_ids,column_ids)
transformers.TapasTokenizer._get_column_values(self,table,col_index)
transformers.TapasTokenizer._get_max_num_tokens(self,question_tokens,tokenized_table,num_columns,num_rows,max_length)
transformers.TapasTokenizer._get_mean_cell_probs(self,probabilities,segment_ids,row_ids,column_ids)
transformers.TapasTokenizer._get_num_columns(self,table)
transformers.TapasTokenizer._get_num_rows(self,table,drop_rows_to_fit)
transformers.TapasTokenizer._get_numeric_column_ranks(self,column_ids,row_ids,table)
transformers.TapasTokenizer._get_numeric_relations(self,question,column_ids,row_ids,table)
transformers.TapasTokenizer._get_numeric_sort_key_fn(self,table_numeric_values,value)
transformers.TapasTokenizer._get_numeric_values(self,table,column_ids,row_ids)
transformers.TapasTokenizer._get_numeric_values_scale(self,table,column_ids,row_ids)
transformers.TapasTokenizer._get_table_boundaries(self,table)
transformers.TapasTokenizer._get_table_cost(self,table,num_columns,num_rows,num_tokens)
transformers.TapasTokenizer._get_table_values(self,table,num_columns,num_rows,num_tokens)->Generator[TableValue, None, None]
transformers.TapasTokenizer._get_token_budget(self,question_tokens,max_length=None)
transformers.TapasTokenizer._get_truncated_table_rows(self,query_tokens:List[str],tokenized_table:TokenizedTable,num_rows:int,num_columns:int,max_length:int,truncation_strategy:Union[str,TapasTruncationStrategy])->Tuple[int, int]
transformers.TapasTokenizer._pad(self,encoded_inputs:Union[Dict[str,EncodedInput],BatchEncoding],max_length:Optional[int]=None,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None)->dict
transformers.TapasTokenizer._pad_to_seq_length(self,inputs)
transformers.TapasTokenizer._question_encoding_cost(self,question_tokens)
transformers.TapasTokenizer._serialize(self,question_tokens,table,num_columns,num_rows,num_tokens)
transformers.TapasTokenizer._serialize_text(self,question_tokens)
transformers.TapasTokenizer._tokenize(self,text)
transformers.TapasTokenizer._tokenize_table(self,table=None)
transformers.TapasTokenizer.batch_encode_plus(self,table:'pd.DataFrame',queries:Optional[Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]]]=None,answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.TapasTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.TapasTokenizer.convert_logits_to_predictions(self,data,logits,logits_agg=None,cell_classification_threshold=0.5)
transformers.TapasTokenizer.convert_tokens_to_string(self,tokens)
transformers.TapasTokenizer.create_attention_mask_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.TapasTokenizer.create_column_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.TapasTokenizer.create_row_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.TapasTokenizer.create_segment_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.TapasTokenizer.do_lower_case(self)
transformers.TapasTokenizer.encode(self,table:'pd.DataFrame',query:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,**kwargs)->List[int]
transformers.TapasTokenizer.encode_plus(self,table:'pd.DataFrame',query:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.TapasTokenizer.get_answer_ids(self,column_ids,row_ids,tokenized_table,answer_texts_question,answer_coordinates_question)
transformers.TapasTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.TapasTokenizer.get_vocab(self)
transformers.TapasTokenizer.prepare_for_model(self,raw_table:'pd.DataFrame',raw_query:Union[TextInput,PreTokenizedInput,EncodedInput],tokenized_table:Optional[TokenizedTable]=None,query_tokens:Optional[TokenizedTable]=None,answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.TapasTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.TapasTokenizer.vocab_size(self)
transformers.models.tapas.tokenization_tapas.BasicTokenizer(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.tapas.tokenization_tapas.BasicTokenizer.__init__(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.tapas.tokenization_tapas.BasicTokenizer._clean_text(self,text)
transformers.models.tapas.tokenization_tapas.BasicTokenizer._is_chinese_char(self,cp)
transformers.models.tapas.tokenization_tapas.BasicTokenizer._run_split_on_punc(self,text,never_split=None)
transformers.models.tapas.tokenization_tapas.BasicTokenizer._run_strip_accents(self,text)
transformers.models.tapas.tokenization_tapas.BasicTokenizer._tokenize_chinese_chars(self,text)
transformers.models.tapas.tokenization_tapas.BasicTokenizer.tokenize(self,text,never_split=None)
transformers.models.tapas.tokenization_tapas.Cell
transformers.models.tapas.tokenization_tapas.Date
transformers.models.tapas.tokenization_tapas.NumericValue
transformers.models.tapas.tokenization_tapas.NumericValueSpan
transformers.models.tapas.tokenization_tapas.Question
transformers.models.tapas.tokenization_tapas.Relation(enum.Enum)
transformers.models.tapas.tokenization_tapas.SerializedExample
transformers.models.tapas.tokenization_tapas.TapasTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',empty_token='[EMPTY]',tokenize_chinese_chars=True,strip_accents=None,cell_trim_length:int=-1,max_column_id:int=None,max_row_id:int=None,strip_column_names:bool=False,update_answer_coordinates:bool=False,drop_rows_to_fit:bool=False,model_max_length:int=512,additional_special_tokens:Optional[List[str]]=None,**kwargs)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.__init__(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',empty_token='[EMPTY]',tokenize_chinese_chars=True,strip_accents=None,cell_trim_length:int=-1,max_column_id:int=None,max_row_id:int=None,strip_column_names:bool=False,update_answer_coordinates:bool=False,drop_rows_to_fit:bool=False,model_max_length:int=512,additional_special_tokens:Optional[List[str]]=None,**kwargs)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._batch_encode_plus(self,table,queries:Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]],answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.models.tapas.tokenization_tapas.TapasTokenizer._batch_prepare_for_model(self,raw_table:'pd.DataFrame',raw_queries:Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]],tokenized_table:Optional[TokenizedTable]=None,queries_tokens:Optional[List[List[str]]]=None,answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.models.tapas.tokenization_tapas.TapasTokenizer._convert_id_to_token(self,index)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._convert_token_to_id(self,token)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._encode_plus(self,table:'pd.DataFrame',query:Union[TextInput,PreTokenizedInput,EncodedInput],answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._find_answer_coordinates_from_answer_text(self,tokenized_table,answer_text)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._find_answer_ids_from_answer_texts(self,column_ids,row_ids,tokenized_table,answer_texts)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._find_tokens(self,text,segment)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_all_answer_ids(self,column_ids,row_ids,answer_coordinates)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_all_answer_ids_from_coordinates(self,column_ids,row_ids,answers_list)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_answer_ids(self,column_ids,row_ids,answer_coordinates)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_cell_token_indexes(self,column_ids,row_ids,column_id,row_id)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_cell_token_probs(self,probabilities,segment_ids,row_ids,column_ids)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_column_values(self,table,col_index)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_max_num_tokens(self,question_tokens,tokenized_table,num_columns,num_rows,max_length)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_mean_cell_probs(self,probabilities,segment_ids,row_ids,column_ids)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_num_columns(self,table)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_num_rows(self,table,drop_rows_to_fit)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_numeric_column_ranks(self,column_ids,row_ids,table)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_numeric_relations(self,question,column_ids,row_ids,table)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_numeric_sort_key_fn(self,table_numeric_values,value)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_numeric_values(self,table,column_ids,row_ids)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_numeric_values_scale(self,table,column_ids,row_ids)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_table_boundaries(self,table)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_table_cost(self,table,num_columns,num_rows,num_tokens)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_table_values(self,table,num_columns,num_rows,num_tokens)->Generator[TableValue, None, None]
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_token_budget(self,question_tokens,max_length=None)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._get_truncated_table_rows(self,query_tokens:List[str],tokenized_table:TokenizedTable,num_rows:int,num_columns:int,max_length:int,truncation_strategy:Union[str,TapasTruncationStrategy])->Tuple[int, int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer._pad(self,encoded_inputs:Union[Dict[str,EncodedInput],BatchEncoding],max_length:Optional[int]=None,padding_strategy:PaddingStrategy=PaddingStrategy.DO_NOT_PAD,pad_to_multiple_of:Optional[int]=None,return_attention_mask:Optional[bool]=None)->dict
transformers.models.tapas.tokenization_tapas.TapasTokenizer._pad_to_seq_length(self,inputs)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._question_encoding_cost(self,question_tokens)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._serialize(self,question_tokens,table,num_columns,num_rows,num_tokens)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._serialize_text(self,question_tokens)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._tokenize(self,text)
transformers.models.tapas.tokenization_tapas.TapasTokenizer._tokenize_table(self,table=None)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.batch_encode_plus(self,table:'pd.DataFrame',queries:Optional[Union[List[TextInput],List[PreTokenizedInput],List[EncodedInput]]]=None,answer_coordinates:Optional[List[List[Tuple]]]=None,answer_text:Optional[List[List[TextInput]]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_overflowing_tokens:bool=False,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.models.tapas.tokenization_tapas.TapasTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.convert_logits_to_predictions(self,data,logits,logits_agg=None,cell_classification_threshold=0.5)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.create_attention_mask_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.create_column_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.create_row_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.create_segment_token_type_ids_from_sequences(self,query_ids:List[int],table_values:List[TableValue])->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.do_lower_case(self)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.encode(self,table:'pd.DataFrame',query:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,**kwargs)->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.encode_plus(self,table:'pd.DataFrame',query:Optional[Union[TextInput,PreTokenizedInput,EncodedInput]]=None,answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=None,return_attention_mask:Optional[bool]=None,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,**kwargs)->BatchEncoding
transformers.models.tapas.tokenization_tapas.TapasTokenizer.get_answer_ids(self,column_ids,row_ids,tokenized_table,answer_texts_question,answer_coordinates_question)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.get_vocab(self)
transformers.models.tapas.tokenization_tapas.TapasTokenizer.prepare_for_model(self,raw_table:'pd.DataFrame',raw_query:Union[TextInput,PreTokenizedInput,EncodedInput],tokenized_table:Optional[TokenizedTable]=None,query_tokens:Optional[TokenizedTable]=None,answer_coordinates:Optional[List[Tuple]]=None,answer_text:Optional[List[TextInput]]=None,add_special_tokens:bool=True,padding:Union[bool,str,PaddingStrategy]=False,truncation:Union[bool,str,TapasTruncationStrategy]=False,max_length:Optional[int]=None,pad_to_multiple_of:Optional[int]=None,return_tensors:Optional[Union[str,TensorType]]=None,return_token_type_ids:Optional[bool]=True,return_attention_mask:Optional[bool]=True,return_special_tokens_mask:bool=False,return_offsets_mapping:bool=False,return_length:bool=False,verbose:bool=True,prepend_batch_axis:bool=False,**kwargs)->BatchEncoding
transformers.models.tapas.tokenization_tapas.TapasTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.tapas.tokenization_tapas.TapasTokenizer.vocab_size(self)
transformers.models.tapas.tokenization_tapas.TapasTruncationStrategy(ExplicitEnum)
transformers.models.tapas.tokenization_tapas.TokenCoordinates
transformers.models.tapas.tokenization_tapas.TokenizedTable
transformers.models.tapas.tokenization_tapas.WordpieceTokenizer(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.tapas.tokenization_tapas.WordpieceTokenizer.__init__(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.tapas.tokenization_tapas.WordpieceTokenizer.tokenize(self,text)
transformers.models.tapas.tokenization_tapas._consolidate_numeric_values(row_index_to_values,min_consolidation_fraction,debug_info)
transformers.models.tapas.tokenization_tapas._get_all_types(numeric_values)
transformers.models.tapas.tokenization_tapas._get_column_values(table,col_index)
transformers.models.tapas.tokenization_tapas._get_numeric_value_from_date(date,mask)
transformers.models.tapas.tokenization_tapas._get_numeric_value_from_float(value)
transformers.models.tapas.tokenization_tapas._get_numeric_values(text)
transformers.models.tapas.tokenization_tapas._get_span_length_key(span)
transformers.models.tapas.tokenization_tapas._get_value_as_primitive_value(numeric_value)
transformers.models.tapas.tokenization_tapas._get_value_type(numeric_value)
transformers.models.tapas.tokenization_tapas._is_inner_wordpiece(token:Text)
transformers.models.tapas.tokenization_tapas._parse_date(text)
transformers.models.tapas.tokenization_tapas._parse_number(text)
transformers.models.tapas.tokenization_tapas._process_date_pattern(dp)
transformers.models.tapas.tokenization_tapas._process_date_patterns()
transformers.models.tapas.tokenization_tapas.add_numeric_table_values(table,min_consolidation_fraction=0.7,debug_info=None)
transformers.models.tapas.tokenization_tapas.add_numeric_values_to_question(question)
transformers.models.tapas.tokenization_tapas.filter_invalid_unicode(text)
transformers.models.tapas.tokenization_tapas.filter_invalid_unicode_from_table(table)
transformers.models.tapas.tokenization_tapas.format_text(text)
transformers.models.tapas.tokenization_tapas.get_all_spans(text,max_ngram_length)
transformers.models.tapas.tokenization_tapas.get_numeric_relation(value,other_value,sort_key_fn)
transformers.models.tapas.tokenization_tapas.get_numeric_sort_key_fn(numeric_values)
transformers.models.tapas.tokenization_tapas.load_vocab(vocab_file)
transformers.models.tapas.tokenization_tapas.normalize_for_match(text)
transformers.models.tapas.tokenization_tapas.parse_text(text)
transformers.models.tapas.tokenization_tapas.whitespace_tokenize(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/tapas/modeling_tapas.py----------------------------------------
A:transformers.models.tapas.modeling_tapas.logger->utils.logging.get_logger(__name__)
A:transformers.models.tapas.modeling_tapas.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.tapas.modeling_tapas.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.tapas.modeling_tapas.array->numpy.array(array)
A:transformers.models.tapas.modeling_tapas.name->name.split('/').split('/')
A:transformers.models.tapas.modeling_tapas.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.tapas.modeling_tapas.pointer->getattr(pointer, 'weight')
A:transformers.models.tapas.modeling_tapas.num->int(scope_names[1])
A:transformers.models.tapas.modeling_tapas.pointer.data->torch.from_numpy(array)
A:transformers.models.tapas.modeling_tapas.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.tapas.modeling_tapas.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.tapas.modeling_tapas.self.number_of_token_type_embeddings->len(config.type_vocab_sizes)
A:transformers.models.tapas.modeling_tapas.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.tapas.modeling_tapas.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.tapas.modeling_tapas.input_shape->input_ids.size()
A:transformers.models.tapas.modeling_tapas.position_ids->torch.min(torch.as_tensor(self.config.max_position_embeddings - 1, device=device), position - first_position)
A:transformers.models.tapas.modeling_tapas.col_index->IndexMap(indices=torch.min(column_ids, torch.as_tensor(self.config.max_num_columns - 1, device=column_ids.device)), num_segments=self.config.max_num_columns, batch_dims=1)
A:transformers.models.tapas.modeling_tapas.row_index->IndexMap(indices=torch.min(row_ids, torch.as_tensor(self.config.max_num_rows - 1, device=row_ids.device)), num_segments=self.config.max_num_rows, batch_dims=1)
A:transformers.models.tapas.modeling_tapas.full_index->ProductIndexMap(col_index, row_index)
A:transformers.models.tapas.modeling_tapas.first_position->gather(first_position_per_segment, full_index)
A:transformers.models.tapas.modeling_tapas.position->torch.arange(seq_length, dtype=torch.long, device=device).unsqueeze(0)
A:transformers.models.tapas.modeling_tapas.token_type_ids->torch.zeros((*input_shape, len(self.config.type_vocab_sizes)), dtype=torch.long, device=device)
A:transformers.models.tapas.modeling_tapas.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.tapas.modeling_tapas.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.tapas.modeling_tapas.embeddings->self.dropout(embeddings)
A:transformers.models.tapas.modeling_tapas.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.tapas.modeling_tapas.self.query->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.tapas.modeling_tapas.self.key->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.tapas.modeling_tapas.self.value->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.tapas.modeling_tapas.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.tapas.modeling_tapas.mixed_query_layer->self.query(hidden_states)
A:transformers.models.tapas.modeling_tapas.mixed_key_layer->self.key(hidden_states)
A:transformers.models.tapas.modeling_tapas.mixed_value_layer->self.value(hidden_states)
A:transformers.models.tapas.modeling_tapas.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.tapas.modeling_tapas.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.tapas.modeling_tapas.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.tapas.modeling_tapas.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.tapas.modeling_tapas.attention_probs->self.dropout(attention_probs)
A:transformers.models.tapas.modeling_tapas.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.tapas.modeling_tapas.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.tapas.modeling_tapas.hidden_states->self.LayerNorm(hidden_states + input_tensor)
A:transformers.models.tapas.modeling_tapas.self.self->TapasSelfAttention(config)
A:transformers.models.tapas.modeling_tapas.self.output->TapasOutput(config)
A:transformers.models.tapas.modeling_tapas.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.tapas.modeling_tapas.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.tapas.modeling_tapas.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.tapas.modeling_tapas.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.tapas.modeling_tapas.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.tapas.modeling_tapas.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.tapas.modeling_tapas.self_outputs->self.self(hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.tapas.modeling_tapas.attention_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.tapas.modeling_tapas.self.attention->TapasAttention(config)
A:transformers.models.tapas.modeling_tapas.self.crossattention->TapasAttention(config)
A:transformers.models.tapas.modeling_tapas.self.intermediate->TapasIntermediate(config)
A:transformers.models.tapas.modeling_tapas.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.tapas.modeling_tapas.cross_attention_outputs->self.crossattention(attention_output, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.tapas.modeling_tapas.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.tapas.modeling_tapas.intermediate_output->self.intermediate(attention_output)
A:transformers.models.tapas.modeling_tapas.self.layer->torch.nn.ModuleList([TapasLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.tapas.modeling_tapas.layer_outputs->layer_module(hidden_states, attention_mask, layer_head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.tapas.modeling_tapas.self.activation->torch.nn.Tanh()
A:transformers.models.tapas.modeling_tapas.pooled_output->self.dropout(pooled_output)
A:transformers.models.tapas.modeling_tapas.self.embeddings->TapasEmbeddings(config)
A:transformers.models.tapas.modeling_tapas.self.encoder->TapasEncoder(config)
A:transformers.models.tapas.modeling_tapas.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.tapas.modeling_tapas.(encoder_batch_size, encoder_sequence_length, _)->encoder_hidden_states.size()
A:transformers.models.tapas.modeling_tapas.encoder_attention_mask->torch.ones(encoder_hidden_shape, device=device)
A:transformers.models.tapas.modeling_tapas.encoder_extended_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.tapas.modeling_tapas.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.tapas.modeling_tapas.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.tapas.modeling_tapas.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.tapas.modeling_tapas.self.tapas->TapasModel(config)
A:transformers.models.tapas.modeling_tapas.self.lm_head->torch.nn.Linear(config.hidden_size, config.vocab_size)
A:transformers.models.tapas.modeling_tapas.outputs->self.tapas(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.tapas.modeling_tapas.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.tapas.modeling_tapas.loss_fct->CrossEntropyLoss()
A:transformers.models.tapas.modeling_tapas.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.tapas.modeling_tapas.self.output_weights->torch.nn.Parameter(torch.empty(config.hidden_size))
A:transformers.models.tapas.modeling_tapas.self.column_output_weights->torch.nn.Parameter(torch.empty(config.hidden_size))
A:transformers.models.tapas.modeling_tapas.self.output_bias->torch.nn.Parameter(torch.zeros([]))
A:transformers.models.tapas.modeling_tapas.self.column_output_bias->torch.nn.Parameter(torch.zeros([]))
A:transformers.models.tapas.modeling_tapas.self.aggregation_classifier->torch.nn.Linear(config.hidden_size, config.num_aggregation_labels)
A:transformers.models.tapas.modeling_tapas.sequence_output->self.dropout(sequence_output)
A:transformers.models.tapas.modeling_tapas.cell_index->ProductIndexMap(row_index, col_index)
A:transformers.models.tapas.modeling_tapas.table_mask->torch.where(row_ids > 0, torch.ones_like(row_ids), torch.zeros_like(row_ids))
A:transformers.models.tapas.modeling_tapas.input_mask_float->torch.ones(input_shape, device=device).float().to(device)
A:transformers.models.tapas.modeling_tapas.table_mask_float->torch.where(row_ids > 0, torch.ones_like(row_ids), torch.zeros_like(row_ids)).float().to(device)
A:transformers.models.tapas.modeling_tapas.(cell_mask, _)->reduce_mean(input_mask_float, cell_index)
A:transformers.models.tapas.modeling_tapas.logits->gather(new_logits_per_cell, cell_index)
A:transformers.models.tapas.modeling_tapas.column_logits->compute_column_logits(sequence_output, self.column_output_weights, self.column_output_bias, cell_index, cell_mask, self.config.allow_empty_column_selection)
A:transformers.models.tapas.modeling_tapas.logits_aggregation->aggregation_classifier(pooled_output)
A:transformers.models.tapas.modeling_tapas.aggregate_mask->aggregate_mask.detach().detach()
A:transformers.models.tapas.modeling_tapas.(logits_per_cell, _)->reduce_mean(token_logits, cell_index)
A:transformers.models.tapas.modeling_tapas.dist_per_token->torch.distributions.Bernoulli(logits=logits)
A:transformers.models.tapas.modeling_tapas.weight->torch.where(labels == 0, torch.ones_like(labels, dtype=torch.float32), self.config.positive_label_weight * torch.ones_like(labels, dtype=torch.float32))
A:transformers.models.tapas.modeling_tapas.(selection_loss_per_example, logits)->_single_column_cell_selection_loss(logits, column_logits, labels, cell_index, col_index, cell_mask)
A:transformers.models.tapas.modeling_tapas.per_example_additional_loss->_calculate_aggregation_loss(logits_aggregation, aggregate_mask, aggregation_labels, self.config.use_answer_as_supervision, self.config.num_aggregation_labels, self.config.aggregation_loss_weight)
A:transformers.models.tapas.modeling_tapas.aggregation_labels->torch.zeros(labels.shape[0], dtype=torch.long, device=labels.device)
A:transformers.models.tapas.modeling_tapas.(answer_loss, large_answer_loss_mask)->_calculate_regression_loss(float_answer, aggregate_mask, dist_per_token, numeric_values, numeric_values_scale, table_mask_float, logits_aggregation, self.config)
A:transformers.models.tapas.modeling_tapas.labels->torch.zeros_like(logits)
A:transformers.models.tapas.modeling_tapas.(_, logits)->_single_column_cell_selection_loss(logits, column_logits, labels, cell_index, col_index, cell_mask)
A:transformers.models.tapas.modeling_tapas.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.tapas.modeling_tapas.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.tapas.modeling_tapas.self.indices->torch.as_tensor(indices)
A:transformers.models.tapas.modeling_tapas.self.num_segments->torch.as_tensor(num_segments, device=indices.device)
A:transformers.models.tapas.modeling_tapas.indices->indices.repeat(multiples.tolist()).repeat(multiples.tolist())
A:transformers.models.tapas.modeling_tapas.batch_size->torch.prod(torch.tensor(list(index.batch_shape())))
A:transformers.models.tapas.modeling_tapas.offset->offset.unsqueeze(-1).unsqueeze(-1)
A:transformers.models.tapas.modeling_tapas.batch_shape->torch.as_tensor(batch_shape, dtype=torch.long)
A:transformers.models.tapas.modeling_tapas.num_segments->torch.as_tensor(num_segments)
A:transformers.models.tapas.modeling_tapas.new_tensor->torch.cat([torch.ones_like(batch_shape, dtype=torch.long, device=num_segments.device), num_segments.unsqueeze(dim=0)], dim=0)
A:transformers.models.tapas.modeling_tapas.multiples->torch.cat([batch_shape, torch.as_tensor([1])], dim=0)
A:transformers.models.tapas.modeling_tapas.flat_index->flatten(index)
A:transformers.models.tapas.modeling_tapas.flattened_shape->torch.cat([torch.as_tensor([-1], dtype=torch.long), torch.as_tensor(vector_shape, dtype=torch.long)], dim=0)
A:transformers.models.tapas.modeling_tapas.flat_values->values.reshape(flattened_shape.tolist())
A:transformers.models.tapas.modeling_tapas.segment_means->scatter(src=flat_values, index=flat_index.indices.type(torch.long), dim=0, dim_size=flat_index.num_segments, reduce=segment_reduce_fn)
A:transformers.models.tapas.modeling_tapas.new_shape->torch.cat([torch.as_tensor(index.batch_shape(), dtype=torch.long), torch.as_tensor([index.num_segments], dtype=torch.long), torch.as_tensor(vector_shape, dtype=torch.long)], dim=0)
A:transformers.models.tapas.modeling_tapas.output_values->scatter(src=flat_values, index=flat_index.indices.type(torch.long), dim=0, dim_size=flat_index.num_segments, reduce=segment_reduce_fn).view(new_shape.tolist())
A:transformers.models.tapas.modeling_tapas.output_index->range_index_map(index.batch_shape(), index.num_segments)
A:transformers.models.tapas.modeling_tapas.(cell_logits, cell_logits_index)->reduce_mean(token_logits, cell_index)
A:transformers.models.tapas.modeling_tapas.column_index->ProductIndexMap(row_index, col_index).project_inner(cell_logits_index)
A:transformers.models.tapas.modeling_tapas.(column_logits, out_index)->reduce_sum(cell_logits * cell_mask, column_index)
A:transformers.models.tapas.modeling_tapas.(cell_count, _)->reduce_sum(cell_mask, column_index)
A:transformers.models.tapas.modeling_tapas.is_padding->torch.logical_and(cell_count < 0.5, ~torch.eq(out_index.indices, 0))
A:transformers.models.tapas.modeling_tapas.(labels_per_column, _)->reduce_sum(torch.as_tensor(labels, dtype=torch.float32, device=labels.device), col_index)
A:transformers.models.tapas.modeling_tapas.column_label->torch.where(no_cell_selected.view(column_label.size()), torch.zeros_like(column_label), column_label)
A:transformers.models.tapas.modeling_tapas.no_cell_selected->torch.eq(torch.max(labels_per_column, dim=-1)[0], 0)
A:transformers.models.tapas.modeling_tapas.column_dist->torch.distributions.Categorical(logits=column_logits)
A:transformers.models.tapas.modeling_tapas.(labels_per_cell, labels_index)->reduce_max(torch.as_tensor(labels, dtype=torch.long, device=labels.device), cell_index)
A:transformers.models.tapas.modeling_tapas.column_mask->torch.as_tensor(torch.eq(column_id_for_cells, torch.unsqueeze(column_label, dim=-1)), dtype=torch.float32, device=cell_mask.device)
A:transformers.models.tapas.modeling_tapas.cell_dist->torch.distributions.Bernoulli(logits=logits_per_cell)
A:transformers.models.tapas.modeling_tapas.cell_log_prob->torch.distributions.Bernoulli(logits=logits_per_cell).log_prob(labels_per_cell.type(torch.float32))
A:transformers.models.tapas.modeling_tapas.selected_column_id->torch.as_tensor(torch.argmax(column_logits, dim=-1), dtype=torch.long, device=column_logits.device)
A:transformers.models.tapas.modeling_tapas.selected_column_mask->torch.where(torch.eq(column_id_for_cells, 0).view(selected_column_mask.size()), torch.zeros_like(selected_column_mask), selected_column_mask)
A:transformers.models.tapas.modeling_tapas.aggregate_mask_init->torch.logical_not(torch.isnan(answer)).type(torch.FloatTensor).to(answer.device)
A:transformers.models.tapas.modeling_tapas.dist_aggregation->torch.distributions.categorical.Categorical(logits=logits_aggregation)
A:transformers.models.tapas.modeling_tapas.aggregation_ops_total_mass->torch.sum(dist_aggregation.probs[:, 1:], dim=1)
A:transformers.models.tapas.modeling_tapas.target_aggregation->torch.zeros_like(aggregate_mask, dtype=torch.long)
A:transformers.models.tapas.modeling_tapas.one_hot_labels->torch.nn.functional.one_hot(target_aggregation, num_classes=num_aggregation_labels).type(torch.float32)
A:transformers.models.tapas.modeling_tapas.log_probs->torch.nn.functional.log_softmax(logits_aggregation, dim=-1)
A:transformers.models.tapas.modeling_tapas.per_example_aggregation_loss->_calculate_aggregation_loss_known(logits_aggregation, aggregate_mask, aggregation_labels, use_answer_as_supervision, num_aggregation_labels)
A:transformers.models.tapas.modeling_tapas.gumbel_dist->torch.distributions.RelaxedOneHotCategorical(config.aggregation_temperature, logits=logits_aggregation[:, 1:])
A:transformers.models.tapas.modeling_tapas.scaled_probability_per_cell->torch.distributions.RelaxedOneHotCategorical(config.aggregation_temperature, logits=logits_aggregation[:, 1:]).sample()
A:transformers.models.tapas.modeling_tapas.count_result->torch.sum(scaled_probability_per_cell, dim=1)
A:transformers.models.tapas.modeling_tapas.numeric_values_masked->torch.where(torch.isnan(numeric_values), torch.zeros_like(numeric_values), numeric_values)
A:transformers.models.tapas.modeling_tapas.sum_result->torch.sum(scaled_probability_per_cell * numeric_values_masked, dim=1)
A:transformers.models.tapas.modeling_tapas.average_result->torch.sum(numeric_values_masked * scaled_probability_per_cell * multiplier, dim=1)
A:transformers.models.tapas.modeling_tapas.aggregation_op_only_probs->torch.nn.functional.softmax(logits_aggregation[:, 1:] / config.aggregation_temperature, dim=-1)
A:transformers.models.tapas.modeling_tapas.all_results->torch.cat([torch.unsqueeze(sum_result, dim=1), torch.unsqueeze(average_result, dim=1), torch.unsqueeze(count_result, dim=1)], dim=1)
A:transformers.models.tapas.modeling_tapas.expected_result->_calculate_expected_result(dist_per_cell, numeric_values, numeric_values_scale, input_mask_float, logits_aggregation, config)
A:transformers.models.tapas.modeling_tapas.errors->torch.abs(input - target)
A:transformers.models.tapas.modeling_tapas.answer_masked->torch.where(torch.isnan(answer), torch.zeros_like(answer), answer)
A:transformers.models.tapas.modeling_tapas.normalizer->(torch.max(torch.abs(expected_result), torch.abs(answer_masked)) + EPSILON_ZERO_DIVISION).detach()
A:transformers.models.tapas.modeling_tapas.per_example_answer_loss->huber_loss(expected_result * aggregate_mask, answer_masked * aggregate_mask, delta=config.huber_loss_delta)
A:transformers.models.tapas.modeling_tapas.large_answer_loss_mask->torch.where(per_example_answer_loss > config.answer_loss_cutoff, torch.zeros_like(per_example_answer_loss, dtype=torch.float32), torch.ones_like(per_example_answer_loss, dtype=torch.float32))
transformers.TapasForMaskedLM(self,config)
transformers.TapasForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.TapasForMaskedLM.get_output_embeddings(self)
transformers.TapasForMaskedLM.set_output_embeddings(self,word_embeddings)
transformers.TapasForQuestionAnswering(self,config:TapasConfig)
transformers.TapasForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,table_mask=None,labels=None,aggregation_labels=None,float_answer=None,numeric_values=None,numeric_values_scale=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TapasForSequenceClassification(self,config)
transformers.TapasForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TapasModel(self,config,add_pooling_layer=True)
transformers.TapasModel._prune_heads(self,heads_to_prune)
transformers.TapasModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.TapasModel.get_input_embeddings(self)
transformers.TapasModel.set_input_embeddings(self,value)
transformers.models.tapas.modeling_tapas.AverageApproximationFunction(str,enum.Enum)
transformers.models.tapas.modeling_tapas.IndexMap(self,indices,num_segments,batch_dims=0)
transformers.models.tapas.modeling_tapas.IndexMap.__init__(self,indices,num_segments,batch_dims=0)
transformers.models.tapas.modeling_tapas.IndexMap.batch_shape(self)
transformers.models.tapas.modeling_tapas.ProductIndexMap(self,outer_index,inner_index)
transformers.models.tapas.modeling_tapas.ProductIndexMap.__init__(self,outer_index,inner_index)
transformers.models.tapas.modeling_tapas.ProductIndexMap.project_inner(self,index)
transformers.models.tapas.modeling_tapas.ProductIndexMap.project_outer(self,index)
transformers.models.tapas.modeling_tapas.TableQuestionAnsweringOutput(ModelOutput)
transformers.models.tapas.modeling_tapas.TapasAttention(self,config)
transformers.models.tapas.modeling_tapas.TapasAttention.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.tapas.modeling_tapas.TapasAttention.prune_heads(self,heads)
transformers.models.tapas.modeling_tapas.TapasEmbeddings(self,config)
transformers.models.tapas.modeling_tapas.TapasEmbeddings.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.tapas.modeling_tapas.TapasEncoder(self,config)
transformers.models.tapas.modeling_tapas.TapasEncoder.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.tapas.modeling_tapas.TapasForMaskedLM(self,config)
transformers.models.tapas.modeling_tapas.TapasForMaskedLM.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.tapas.modeling_tapas.TapasForMaskedLM.get_output_embeddings(self)
transformers.models.tapas.modeling_tapas.TapasForMaskedLM.set_output_embeddings(self,word_embeddings)
transformers.models.tapas.modeling_tapas.TapasForQuestionAnswering(self,config:TapasConfig)
transformers.models.tapas.modeling_tapas.TapasForQuestionAnswering.__init__(self,config:TapasConfig)
transformers.models.tapas.modeling_tapas.TapasForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,table_mask=None,labels=None,aggregation_labels=None,float_answer=None,numeric_values=None,numeric_values_scale=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.tapas.modeling_tapas.TapasForSequenceClassification(self,config)
transformers.models.tapas.modeling_tapas.TapasForSequenceClassification.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.tapas.modeling_tapas.TapasIntermediate(self,config)
transformers.models.tapas.modeling_tapas.TapasIntermediate.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasIntermediate.forward(self,hidden_states)
transformers.models.tapas.modeling_tapas.TapasLayer(self,config)
transformers.models.tapas.modeling_tapas.TapasLayer.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasLayer.feed_forward_chunk(self,attention_output)
transformers.models.tapas.modeling_tapas.TapasLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.tapas.modeling_tapas.TapasModel(self,config,add_pooling_layer=True)
transformers.models.tapas.modeling_tapas.TapasModel.__init__(self,config,add_pooling_layer=True)
transformers.models.tapas.modeling_tapas.TapasModel._prune_heads(self,heads_to_prune)
transformers.models.tapas.modeling_tapas.TapasModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.tapas.modeling_tapas.TapasModel.get_input_embeddings(self)
transformers.models.tapas.modeling_tapas.TapasModel.set_input_embeddings(self,value)
transformers.models.tapas.modeling_tapas.TapasOutput(self,config)
transformers.models.tapas.modeling_tapas.TapasOutput.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasOutput.forward(self,hidden_states,input_tensor)
transformers.models.tapas.modeling_tapas.TapasPooler(self,config)
transformers.models.tapas.modeling_tapas.TapasPooler.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasPooler.forward(self,hidden_states)
transformers.models.tapas.modeling_tapas.TapasPreTrainedModel(PreTrainedModel)
transformers.models.tapas.modeling_tapas.TapasPreTrainedModel._init_weights(self,module)
transformers.models.tapas.modeling_tapas.TapasSelfAttention(self,config)
transformers.models.tapas.modeling_tapas.TapasSelfAttention.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.tapas.modeling_tapas.TapasSelfAttention.transpose_for_scores(self,x)
transformers.models.tapas.modeling_tapas.TapasSelfOutput(self,config)
transformers.models.tapas.modeling_tapas.TapasSelfOutput.__init__(self,config)
transformers.models.tapas.modeling_tapas.TapasSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.tapas.modeling_tapas._calculate_aggregate_mask(answer,pooled_output,cell_selection_preference,labels,aggregation_classifier)
transformers.models.tapas.modeling_tapas._calculate_aggregation_loss(logits_aggregation,aggregate_mask,aggregation_labels,use_answer_as_supervision,num_aggregation_labels,aggregation_loss_weight)
transformers.models.tapas.modeling_tapas._calculate_aggregation_loss_known(logits_aggregation,aggregate_mask,aggregation_labels,use_answer_as_supervision,num_aggregation_labels)
transformers.models.tapas.modeling_tapas._calculate_aggregation_loss_unknown(logits_aggregation,aggregate_mask)
transformers.models.tapas.modeling_tapas._calculate_expected_result(dist_per_cell,numeric_values,numeric_values_scale,input_mask_float,logits_aggregation,config)
transformers.models.tapas.modeling_tapas._calculate_regression_loss(answer,aggregate_mask,dist_per_cell,numeric_values,numeric_values_scale,input_mask_float,logits_aggregation,config)
transformers.models.tapas.modeling_tapas._segment_reduce(values,index,segment_reduce_fn,name)
transformers.models.tapas.modeling_tapas._single_column_cell_selection_loss(token_logits,column_logits,labels,cell_index,col_index,cell_mask)
transformers.models.tapas.modeling_tapas.compute_column_logits(sequence_output,column_output_weights,column_output_bias,cell_index,cell_mask,allow_empty_column_selection)
transformers.models.tapas.modeling_tapas.compute_token_logits(sequence_output,temperature,output_weights,output_bias)
transformers.models.tapas.modeling_tapas.flatten(index,name='segmented_flatten')
transformers.models.tapas.modeling_tapas.gather(values,index,name='segmented_gather')
transformers.models.tapas.modeling_tapas.huber_loss(input,target,delta:float=1.0)
transformers.models.tapas.modeling_tapas.load_tf_weights_in_tapas(model,config,tf_checkpoint_path)
transformers.models.tapas.modeling_tapas.range_index_map(batch_shape,num_segments,name='range_index_map')
transformers.models.tapas.modeling_tapas.reduce_max(values,index,name='segmented_reduce_max')
transformers.models.tapas.modeling_tapas.reduce_mean(values,index,name='segmented_reduce_mean')
transformers.models.tapas.modeling_tapas.reduce_min(values,index,name='segmented_reduce_min')
transformers.models.tapas.modeling_tapas.reduce_sum(values,index,name='segmented_reduce_sum')


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/tapas/convert_tapas_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.config->transformers.models.tapas.modeling_tapas.TapasConfig.from_json_file(tapas_config_file)
A:transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.model->TapasModel(config=config)
A:transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.tokenizer->TapasTokenizer(vocab_file=dir_name + '\\vocab.txt', model_max_length=512)
A:transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(task,reset_position_index_per_cell,tf_checkpoint_path,tapas_config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/tapas/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/rag/tokenization_rag.py----------------------------------------
A:transformers.models.rag.tokenization_rag.logger->utils.logging.get_logger(__name__)
A:transformers.models.rag.tokenization_rag.question_encoder_path->os.path.join(save_directory, 'question_encoder_tokenizer')
A:transformers.models.rag.tokenization_rag.generator_path->os.path.join(save_directory, 'generator_tokenizer')
A:transformers.models.rag.tokenization_rag.config->configuration_rag.RagConfig.from_pretrained(pretrained_model_name_or_path)
A:transformers.models.rag.tokenization_rag.question_encoder->auto.tokenization_auto.AutoTokenizer.from_pretrained(pretrained_model_name_or_path, config=config.question_encoder, subfolder='question_encoder_tokenizer')
A:transformers.models.rag.tokenization_rag.generator->auto.tokenization_auto.AutoTokenizer.from_pretrained(pretrained_model_name_or_path, config=config.generator, subfolder='generator_tokenizer')
transformers.RagTokenizer(self,question_encoder,generator)
transformers.RagTokenizer.batch_decode(self,*args,**kwargs)
transformers.RagTokenizer.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.RagTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation=True,**kwargs)->BatchEncoding
transformers.RagTokenizer.save_pretrained(self,save_directory)
transformers.models.rag.tokenization_rag.RagTokenizer(self,question_encoder,generator)
transformers.models.rag.tokenization_rag.RagTokenizer.__init__(self,question_encoder,generator)
transformers.models.rag.tokenization_rag.RagTokenizer.batch_decode(self,*args,**kwargs)
transformers.models.rag.tokenization_rag.RagTokenizer.from_pretrained(cls,pretrained_model_name_or_path,**kwargs)
transformers.models.rag.tokenization_rag.RagTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation=True,**kwargs)->BatchEncoding
transformers.models.rag.tokenization_rag.RagTokenizer.save_pretrained(self,save_directory)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/rag/retrieval_rag.py----------------------------------------
A:transformers.models.rag.retrieval_rag.logger->utils.logging.get_logger(__name__)
A:transformers.models.rag.retrieval_rag.self.passages->self._load_passages()
A:transformers.models.rag.retrieval_rag.archive_file->os.path.join(index_path, filename)
A:transformers.models.rag.retrieval_rag.resolved_archive_file->cached_path(archive_file)
A:transformers.models.rag.retrieval_rag.passages_path->os.path.join(save_directory, 'hf_dataset')
A:transformers.models.rag.retrieval_rag.passages->pickle.load(passages_file)
A:transformers.models.rag.retrieval_rag.resolved_index_path->self._resolve_path(self.index_path, self.INDEX_FILENAME + '.index.dpr')
A:transformers.models.rag.retrieval_rag.self.index->faiss.read_index(resolved_index_path)
A:transformers.models.rag.retrieval_rag.resolved_meta_path->self._resolve_path(self.index_path, self.INDEX_FILENAME + '.index_meta.dpr')
A:transformers.models.rag.retrieval_rag.self.index_id_to_db_id->pickle.load(metadata_file)
A:transformers.models.rag.retrieval_rag.index->cls._build_index(config)
A:transformers.models.rag.retrieval_rag.aux_dim->numpy.zeros(len(question_hidden_states), dtype='float32').reshape(-1, 1)
A:transformers.models.rag.retrieval_rag.query_nhsw_vectors->numpy.hstack((question_hidden_states, aux_dim))
A:transformers.models.rag.retrieval_rag.(_, docs_ids)->self.index.search(query_nhsw_vectors, n_docs)
A:transformers.models.rag.retrieval_rag.(_, ids)->self.dataset.search_batch('embeddings', question_hidden_states, n_docs)
A:transformers.models.rag.retrieval_rag.vectors[i]->numpy.vstack([vectors[i], np.zeros((n_docs - len(vectors[i]), self.vector_size))])
A:transformers.models.rag.retrieval_rag.dataset->load_from_disk(dataset_path)
A:transformers.models.rag.retrieval_rag.self.dataset->load_dataset(self.dataset_name, with_embeddings=True, with_index=True, split=self.dataset_split, index_name=self.index_name, dummy=self.use_dummy_dataset)
A:transformers.models.rag.retrieval_rag.rag_tokenizer->RagTokenizer(question_encoder=self.question_encoder_tokenizer, generator=self.generator_tokenizer)
A:transformers.models.rag.retrieval_rag.index_path->os.path.join(save_directory, 'hf_dataset_index.faiss')
A:transformers.models.rag.retrieval_rag.faiss_index->self.index.dataset._indexes.pop('embeddings')
A:transformers.models.rag.retrieval_rag.out->(prefix + doc_title + self.config.title_sep + doc_text + self.config.doc_sep + input_string).replace('  ', ' ')
A:transformers.models.rag.retrieval_rag.contextualized_inputs->self.generator_tokenizer.batch_encode_plus(rag_input_strings, max_length=self.config.max_combined_length, return_tensors=return_tensors, padding='max_length', truncation=True)
A:transformers.models.rag.retrieval_rag.question_hidden_states_batched->self._chunk_tensor(question_hidden_states, self.batch_size)
A:transformers.models.rag.retrieval_rag.start_time->time.time()
A:transformers.models.rag.retrieval_rag.(ids, vectors)->self.index.get_top_docs(question_hidden_states, n_docs)
A:transformers.models.rag.retrieval_rag.(doc_ids, retrieved_doc_embeds)->self._main_retrieve(question_hidden_states, n_docs)
A:transformers.models.rag.retrieval_rag.(retrieved_doc_embeds, doc_ids, docs)->self.retrieve(question_hidden_states, n_docs)
A:transformers.models.rag.retrieval_rag.input_strings->self.question_encoder_tokenizer.batch_decode(question_input_ids, skip_special_tokens=True)
A:transformers.models.rag.retrieval_rag.(context_input_ids, context_attention_mask)->self.postprocess_docs(docs, input_strings, prefix, n_docs, return_tensors=return_tensors)
transformers.RagRetriever(self,config,question_encoder_tokenizer,generator_tokenizer,index=None)
transformers.RagRetriever._build_index(config)
transformers.RagRetriever._chunk_tensor(self,t:Iterable,chunk_size:int)->List[Iterable]
transformers.RagRetriever._main_retrieve(self,question_hidden_states:np.ndarray,n_docs:int)->Tuple[np.ndarray, np.ndarray]
transformers.RagRetriever.from_pretrained(cls,retriever_name_or_path,indexed_dataset=None,**kwargs)
transformers.RagRetriever.init_retrieval(self)
transformers.RagRetriever.postprocess_docs(self,docs,input_strings,prefix,n_docs,return_tensors=None)
transformers.RagRetriever.retrieve(self,question_hidden_states:np.ndarray,n_docs:int)->Tuple[np.ndarray, List[dict]]
transformers.RagRetriever.save_pretrained(self,save_directory)
transformers.models.rag.retrieval_rag.CanonicalHFIndex(self,vector_size:int,dataset_name:str='wiki_dpr',dataset_split:str='train',index_name:Optional[str]=None,index_path:Optional[str]=None,use_dummy_dataset=False)
transformers.models.rag.retrieval_rag.CanonicalHFIndex.__init__(self,vector_size:int,dataset_name:str='wiki_dpr',dataset_split:str='train',index_name:Optional[str]=None,index_path:Optional[str]=None,use_dummy_dataset=False)
transformers.models.rag.retrieval_rag.CanonicalHFIndex.init_index(self)
transformers.models.rag.retrieval_rag.CustomHFIndex(self,vector_size:int,dataset,index_path=None)
transformers.models.rag.retrieval_rag.CustomHFIndex.__init__(self,vector_size:int,dataset,index_path=None)
transformers.models.rag.retrieval_rag.CustomHFIndex.init_index(self)
transformers.models.rag.retrieval_rag.CustomHFIndex.load_from_disk(cls,vector_size,dataset_path,index_path)
transformers.models.rag.retrieval_rag.HFIndexBase(self,vector_size,dataset,index_initialized=False)
transformers.models.rag.retrieval_rag.HFIndexBase.__init__(self,vector_size,dataset,index_initialized=False)
transformers.models.rag.retrieval_rag.HFIndexBase._check_dataset_format(self,with_index:bool)
transformers.models.rag.retrieval_rag.HFIndexBase.get_doc_dicts(self,doc_ids:np.ndarray)->List[dict]
transformers.models.rag.retrieval_rag.HFIndexBase.get_top_docs(self,question_hidden_states:np.ndarray,n_docs=5)->Tuple[np.ndarray, np.ndarray]
transformers.models.rag.retrieval_rag.HFIndexBase.init_index(self)
transformers.models.rag.retrieval_rag.HFIndexBase.is_initialized(self)
transformers.models.rag.retrieval_rag.Index
transformers.models.rag.retrieval_rag.Index.get_doc_dicts(self,doc_ids:np.ndarray)->List[dict]
transformers.models.rag.retrieval_rag.Index.get_top_docs(self,question_hidden_states:np.ndarray,n_docs=5)->Tuple[np.ndarray, np.ndarray]
transformers.models.rag.retrieval_rag.Index.init_index(self)
transformers.models.rag.retrieval_rag.Index.is_initialized(self)
transformers.models.rag.retrieval_rag.LegacyIndex(self,vector_size,index_path)
transformers.models.rag.retrieval_rag.LegacyIndex.__init__(self,vector_size,index_path)
transformers.models.rag.retrieval_rag.LegacyIndex._deserialize_index(self)
transformers.models.rag.retrieval_rag.LegacyIndex._load_passages(self)
transformers.models.rag.retrieval_rag.LegacyIndex._resolve_path(self,index_path,filename)
transformers.models.rag.retrieval_rag.LegacyIndex.get_doc_dicts(self,doc_ids:np.array)
transformers.models.rag.retrieval_rag.LegacyIndex.get_top_docs(self,question_hidden_states:np.ndarray,n_docs=5)->Tuple[np.ndarray, np.ndarray]
transformers.models.rag.retrieval_rag.LegacyIndex.init_index(self)
transformers.models.rag.retrieval_rag.LegacyIndex.is_initialized(self)
transformers.models.rag.retrieval_rag.RagRetriever(self,config,question_encoder_tokenizer,generator_tokenizer,index=None)
transformers.models.rag.retrieval_rag.RagRetriever.__init__(self,config,question_encoder_tokenizer,generator_tokenizer,index=None)
transformers.models.rag.retrieval_rag.RagRetriever._build_index(config)
transformers.models.rag.retrieval_rag.RagRetriever._chunk_tensor(self,t:Iterable,chunk_size:int)->List[Iterable]
transformers.models.rag.retrieval_rag.RagRetriever._main_retrieve(self,question_hidden_states:np.ndarray,n_docs:int)->Tuple[np.ndarray, np.ndarray]
transformers.models.rag.retrieval_rag.RagRetriever.from_pretrained(cls,retriever_name_or_path,indexed_dataset=None,**kwargs)
transformers.models.rag.retrieval_rag.RagRetriever.init_retrieval(self)
transformers.models.rag.retrieval_rag.RagRetriever.postprocess_docs(self,docs,input_strings,prefix,n_docs,return_tensors=None)
transformers.models.rag.retrieval_rag.RagRetriever.retrieve(self,question_hidden_states:np.ndarray,n_docs:int)->Tuple[np.ndarray, List[dict]]
transformers.models.rag.retrieval_rag.RagRetriever.save_pretrained(self,save_directory)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/rag/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/rag/configuration_rag.py----------------------------------------
A:transformers.models.rag.configuration_rag.question_encoder_config->kwargs.pop('question_encoder')
A:transformers.models.rag.configuration_rag.question_encoder_model_type->kwargs.pop('question_encoder').pop('model_type')
A:transformers.models.rag.configuration_rag.decoder_config->kwargs.pop('generator')
A:transformers.models.rag.configuration_rag.decoder_model_type->kwargs.pop('generator').pop('model_type')
A:transformers.models.rag.configuration_rag.self.question_encoder->auto.configuration_auto.AutoConfig.for_model(question_encoder_model_type, **question_encoder_config)
A:transformers.models.rag.configuration_rag.self.generator->auto.configuration_auto.AutoConfig.for_model(decoder_model_type, **decoder_config)
A:transformers.models.rag.configuration_rag.output->copy.deepcopy(self.__dict__)
A:transformers.models.rag.configuration_rag.output['question_encoder']->self.question_encoder.to_dict()
A:transformers.models.rag.configuration_rag.output['generator']->self.generator.to_dict()
transformers.RagConfig(self,vocab_size=None,is_encoder_decoder=True,prefix=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,decoder_start_token_id=None,title_sep='/',doc_sep='//',n_docs=5,max_combined_length=300,retrieval_vector_size=768,retrieval_batch_size=8,dataset='wiki_dpr',dataset_split='train',index_name='compressed',index_path=None,passages_path=None,use_dummy_dataset=False,reduce_loss=False,label_smoothing=0.0,do_deduplication=True,exclude_bos_score=False,do_marginalize=False,output_retrieved=False,use_cache=True,**kwargs)
transformers.RagConfig.from_question_encoder_generator_configs(cls,question_encoder_config:PretrainedConfig,generator_config:PretrainedConfig,**kwargs)->PretrainedConfig
transformers.RagConfig.to_dict(self)
transformers.models.rag.configuration_rag.RagConfig(self,vocab_size=None,is_encoder_decoder=True,prefix=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,decoder_start_token_id=None,title_sep='/',doc_sep='//',n_docs=5,max_combined_length=300,retrieval_vector_size=768,retrieval_batch_size=8,dataset='wiki_dpr',dataset_split='train',index_name='compressed',index_path=None,passages_path=None,use_dummy_dataset=False,reduce_loss=False,label_smoothing=0.0,do_deduplication=True,exclude_bos_score=False,do_marginalize=False,output_retrieved=False,use_cache=True,**kwargs)
transformers.models.rag.configuration_rag.RagConfig.__init__(self,vocab_size=None,is_encoder_decoder=True,prefix=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,decoder_start_token_id=None,title_sep='/',doc_sep='//',n_docs=5,max_combined_length=300,retrieval_vector_size=768,retrieval_batch_size=8,dataset='wiki_dpr',dataset_split='train',index_name='compressed',index_path=None,passages_path=None,use_dummy_dataset=False,reduce_loss=False,label_smoothing=0.0,do_deduplication=True,exclude_bos_score=False,do_marginalize=False,output_retrieved=False,use_cache=True,**kwargs)
transformers.models.rag.configuration_rag.RagConfig.from_question_encoder_generator_configs(cls,question_encoder_config:PretrainedConfig,generator_config:PretrainedConfig,**kwargs)->PretrainedConfig
transformers.models.rag.configuration_rag.RagConfig.to_dict(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/rag/modeling_rag.py----------------------------------------
A:transformers.models.rag.modeling_rag.logger->utils.logging.get_logger(__name__)
A:transformers.models.rag.modeling_rag.question_encoder->auto.modeling_auto.AutoModel.from_config(config.question_encoder)
A:transformers.models.rag.modeling_rag.question_encoder_config->auto.configuration_auto.AutoConfig.from_pretrained(question_encoder_pretrained_model_name_or_path)
A:transformers.models.rag.modeling_rag.generator->auto.modeling_auto.AutoModelForSeq2SeqLM.from_config(config.generator)
A:transformers.models.rag.modeling_rag.generator_config->auto.configuration_auto.AutoConfig.from_pretrained(generator_pretrained_model_name_or_path)
A:transformers.models.rag.modeling_rag.config->configuration_rag.RagConfig.from_question_encoder_generator_configs(question_encoder.config, generator.config, **kwargs)
A:transformers.models.rag.modeling_rag.question_enc_outputs->self.question_encoder(input_ids, attention_mask=attention_mask, return_dict=True)
A:transformers.models.rag.modeling_rag.retriever_outputs->self.retriever(input_ids, question_encoder_last_hidden_state.cpu().detach().to(torch.float32).numpy(), prefix=self.generator.config.prefix, n_docs=n_docs, return_tensors='pt')
A:transformers.models.rag.modeling_rag.retrieved_doc_embeds->retrieved_doc_embeds.to(question_hidden_states).to(question_hidden_states)
A:transformers.models.rag.modeling_rag.context_input_ids->context_input_ids.to(input_ids).to(input_ids)
A:transformers.models.rag.modeling_rag.context_attention_mask->extend_enc_output(context_attention_mask, num_beams=num_beams)
A:transformers.models.rag.modeling_rag.doc_scores->doc_scores.repeat_interleave(num_beams, dim=0).repeat_interleave(num_beams, dim=0)
A:transformers.models.rag.modeling_rag.decoder_input_ids->decoder_input_ids.repeat_interleave(n_docs, dim=0).repeat_interleave(n_docs, dim=0)
A:transformers.models.rag.modeling_rag.decoder_attention_mask->decoder_attention_mask.repeat_interleave(n_docs, dim=0).repeat_interleave(n_docs, dim=0)
A:transformers.models.rag.modeling_rag.gen_outputs->self.generator(input_ids=context_input_ids, attention_mask=context_attention_mask, encoder_outputs=encoder_outputs, decoder_input_ids=decoder_input_ids, decoder_attention_mask=decoder_attention_mask, past_key_values=past_key_values, use_cache=use_cache, return_dict=True)
A:transformers.models.rag.modeling_rag.self.rag->RagModel(config=config, question_encoder=question_encoder, generator=generator, retriever=retriever)
A:transformers.models.rag.modeling_rag.outputs->self.rag(input_ids=input_ids, attention_mask=attention_mask, encoder_outputs=encoder_outputs, decoder_input_ids=decoder_input_ids, decoder_attention_mask=decoder_attention_mask, context_input_ids=context_input_ids, context_attention_mask=context_attention_mask, doc_scores=doc_scores, past_key_values=past_key_values, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, output_retrieved=output_retrieved, n_docs=n_docs)
A:transformers.models.rag.modeling_rag.loss->self.get_nll(outputs.logits, outputs.doc_scores, labels, reduce_loss=reduce_loss, epsilon=self.config.label_smoothing, n_docs=n_docs)
A:transformers.models.rag.modeling_rag.output_sequences->torch.stack(list({str(k.tolist()): k for k in output_sequences}.values()))
A:transformers.models.rag.modeling_rag.new_input_ids->input_ids[index:index + 1].repeat(len(output_sequences), 1)
A:transformers.models.rag.modeling_rag.target->target.unsqueeze(-1).unsqueeze(-1)
A:transformers.models.rag.modeling_rag.pad_mask->target.unsqueeze(-1).unsqueeze(-1).eq(self.config.generator.pad_token_id)
A:transformers.models.rag.modeling_rag.seq_logprobs->torch.nn.functional.log_softmax(seq_logits, dim=-1).view(seq_logits.shape[0] // n_docs, n_docs, -1, seq_logits.size(-1))
A:transformers.models.rag.modeling_rag.doc_logprobs->torch.log_softmax(doc_scores, dim=1)
A:transformers.models.rag.modeling_rag.rag_logprobs->self.marginalize(seq_logits, doc_scores, n_docs)
A:transformers.models.rag.modeling_rag.ll->ll.sum(1).sum(1)
A:transformers.models.rag.modeling_rag.smooth_obj->smooth_obj.sum(1).sum(1)
A:transformers.models.rag.modeling_rag.(ll, smooth_obj)->_mask_pads(ll, smooth_obj)
A:transformers.models.rag.modeling_rag.nll_loss->nll_loss.sum().sum()
A:transformers.models.rag.modeling_rag.smooth_loss->smooth_loss.sum().sum()
A:transformers.models.rag.modeling_rag.output->tensors[0].new(sum([t.shape[0] for t in tensors]), max([t.shape[1] for t in tensors])).fill_(pad_token_id)
A:transformers.models.rag.modeling_rag.hidden_states->hidden_states.index_select(0, new_order).index_select(0, new_order)
A:transformers.models.rag.modeling_rag.result->hidden_states.index_select(0, new_order).index_select(0, new_order).view(-1, *hidden_states.shape[2:])
A:transformers.models.rag.modeling_rag.logits->self.marginalize(logits, outputs.doc_scores, n_docs)
A:transformers.models.rag.modeling_rag.out->self.retriever(input_ids, question_hidden_states.cpu().detach().to(torch.float32).numpy(), prefix=self.generator.config.prefix, n_docs=n_docs, return_tensors='pt')
A:transformers.models.rag.modeling_rag.encoder->self.rag.generator.get_encoder()
A:transformers.models.rag.modeling_rag.encoder_outputs->encoder(input_ids=context_input_ids, attention_mask=context_attention_mask)
A:transformers.models.rag.modeling_rag.input_ids->torch.full((batch_size * num_beams, 1), decoder_start_token_id, dtype=torch.long, device=next(self.parameters()).device)
A:transformers.models.rag.modeling_rag.tensor->tensor.expand((batch_size, num_beams, n_docs) + tensor.shape[3:]).expand((batch_size, num_beams, n_docs) + tensor.shape[3:])
A:transformers.models.rag.modeling_rag.encoder_outputs['last_hidden_state']->extend_enc_output(last_hidden_state, num_beams=num_beams)
A:transformers.models.rag.modeling_rag.pre_processor->self._get_logits_processor(repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, min_length=min_length, eos_token_id=eos_token_id, prefix_allowed_tokens_fn=prefix_allowed_tokens_fn, num_beams=num_beams, num_beam_groups=num_beam_groups, diversity_penalty=diversity_penalty)
A:transformers.models.rag.modeling_rag.beam_scorer->BeamSearchScorer(batch_size=batch_size, max_length=max_length, num_beams=num_beams, device=self.device, length_penalty=length_penalty, do_early_stopping=early_stopping, num_beam_hyps_to_keep=num_return_sequences)
A:transformers.models.rag.modeling_rag.shifted_input_ids->torch.full((batch_size * num_beams, 1), decoder_start_token_id, dtype=torch.long, device=next(self.parameters()).device).new_zeros(input_ids.shape)
A:transformers.models.rag.modeling_rag.shifted_input_ids[:, 1:]->input_ids[:, :-1].clone()
transformers.RagModel(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.RagModel.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,doc_scores=None,context_input_ids=None,context_attention_mask=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,n_docs=None)
transformers.RagSequenceForGeneration(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.RagSequenceForGeneration._cat_and_pad(tensors,pad_token_id)
transformers.RagSequenceForGeneration.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,exclude_bos_score=None,reduce_loss=None,labels=None,n_docs=None,**kwargs)
transformers.RagSequenceForGeneration.generate(self,input_ids:Optional[torch.LongTensor]=None,attention_mask:Optional[torch.LongTensor]=None,context_input_ids=None,do_deduplication=None,num_return_sequences=None,num_beams=None,n_docs=None,**model_kwargs)
transformers.RagSequenceForGeneration.generator(self)
transformers.RagSequenceForGeneration.get_nll(self,seq_logits,doc_scores,target,reduce_loss=False,epsilon=0.0,exclude_bos_score=False,n_docs=None)
transformers.RagSequenceForGeneration.question_encoder(self)
transformers.RagSequenceForGeneration.retriever(self)
transformers.RagSequenceForGeneration.set_retriever(self,retriever:RagRetriever)
transformers.RagTokenForGeneration(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.RagTokenForGeneration._reorder_cache(past,beam_idx)
transformers.RagTokenForGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.RagTokenForGeneration.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,do_marginalize=None,reduce_loss=None,labels=None,n_docs=None,**kwargs)
transformers.RagTokenForGeneration.generate(self,input_ids:Optional[torch.LongTensor]=None,attention_mask:Optional[torch.LongTensor]=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,max_length=None,min_length=None,early_stopping=None,use_cache=None,num_beams=None,num_beam_groups=None,diversity_penalty=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,length_penalty=None,no_repeat_ngram_size=None,repetition_penalty=None,bad_words_ids=None,num_return_sequences=None,decoder_start_token_id=None,n_docs=None,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]]=None,**model_kwargs)
transformers.RagTokenForGeneration.generator(self)
transformers.RagTokenForGeneration.get_input_embeddings(self)
transformers.RagTokenForGeneration.get_nll(self,seq_logits,doc_scores,target,reduce_loss=False,epsilon=0.0,n_docs=None)
transformers.RagTokenForGeneration.get_output_embeddings(self)
transformers.RagTokenForGeneration.marginalize(self,seq_logits,doc_scores,n_docs=None)
transformers.RagTokenForGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,doc_scores=None,n_docs=None,**kwargs)
transformers.RagTokenForGeneration.question_encoder(self)
transformers.RagTokenForGeneration.retriever(self)
transformers.RagTokenForGeneration.set_output_embeddings(self,new_embeddings)
transformers.RagTokenForGeneration.set_retriever(self,retriever:RagRetriever)
transformers.RagTokenForGeneration.shift_tokens_right(self,input_ids,start_token_id=None)
transformers.models.rag.modeling_rag.RagModel(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagModel.__init__(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagModel.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,doc_scores=None,context_input_ids=None,context_attention_mask=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,n_docs=None)
transformers.models.rag.modeling_rag.RagPreTrainedModel(PreTrainedModel)
transformers.models.rag.modeling_rag.RagPreTrainedModel.from_pretrained_question_encoder_generator(cls,question_encoder_pretrained_model_name_or_path:str=None,generator_pretrained_model_name_or_path:str=None,retriever:RagRetriever=None,*model_args,**kwargs)->PreTrainedModel
transformers.models.rag.modeling_rag.RagSequenceForGeneration(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.__init__(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagSequenceForGeneration._cat_and_pad(tensors,pad_token_id)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,exclude_bos_score=None,reduce_loss=None,labels=None,n_docs=None,**kwargs)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.generate(self,input_ids:Optional[torch.LongTensor]=None,attention_mask:Optional[torch.LongTensor]=None,context_input_ids=None,do_deduplication=None,num_return_sequences=None,num_beams=None,n_docs=None,**model_kwargs)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.generator(self)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.get_nll(self,seq_logits,doc_scores,target,reduce_loss=False,epsilon=0.0,exclude_bos_score=False,n_docs=None)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.question_encoder(self)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.retriever(self)
transformers.models.rag.modeling_rag.RagSequenceForGeneration.set_retriever(self,retriever:RagRetriever)
transformers.models.rag.modeling_rag.RagTokenForGeneration(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagTokenForGeneration.__init__(self,config:Optional[PretrainedConfig]=None,question_encoder:Optional[PreTrainedModel]=None,generator:Optional[PreTrainedModel]=None,retriever:Optional=None,**kwargs)
transformers.models.rag.modeling_rag.RagTokenForGeneration._reorder_cache(past,beam_idx)
transformers.models.rag.modeling_rag.RagTokenForGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.rag.modeling_rag.RagTokenForGeneration.forward(self,input_ids=None,attention_mask=None,encoder_outputs=None,decoder_input_ids=None,decoder_attention_mask=None,past_key_values=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,use_cache=None,output_attentions=None,output_hidden_states=None,output_retrieved=None,do_marginalize=None,reduce_loss=None,labels=None,n_docs=None,**kwargs)
transformers.models.rag.modeling_rag.RagTokenForGeneration.generate(self,input_ids:Optional[torch.LongTensor]=None,attention_mask:Optional[torch.LongTensor]=None,context_input_ids=None,context_attention_mask=None,doc_scores=None,max_length=None,min_length=None,early_stopping=None,use_cache=None,num_beams=None,num_beam_groups=None,diversity_penalty=None,bos_token_id=None,pad_token_id=None,eos_token_id=None,length_penalty=None,no_repeat_ngram_size=None,repetition_penalty=None,bad_words_ids=None,num_return_sequences=None,decoder_start_token_id=None,n_docs=None,prefix_allowed_tokens_fn:Callable[[int,torch.Tensor],List[int]]=None,**model_kwargs)
transformers.models.rag.modeling_rag.RagTokenForGeneration.generator(self)
transformers.models.rag.modeling_rag.RagTokenForGeneration.get_input_embeddings(self)
transformers.models.rag.modeling_rag.RagTokenForGeneration.get_nll(self,seq_logits,doc_scores,target,reduce_loss=False,epsilon=0.0,n_docs=None)
transformers.models.rag.modeling_rag.RagTokenForGeneration.get_output_embeddings(self)
transformers.models.rag.modeling_rag.RagTokenForGeneration.marginalize(self,seq_logits,doc_scores,n_docs=None)
transformers.models.rag.modeling_rag.RagTokenForGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,doc_scores=None,n_docs=None,**kwargs)
transformers.models.rag.modeling_rag.RagTokenForGeneration.question_encoder(self)
transformers.models.rag.modeling_rag.RagTokenForGeneration.retriever(self)
transformers.models.rag.modeling_rag.RagTokenForGeneration.set_output_embeddings(self,new_embeddings)
transformers.models.rag.modeling_rag.RagTokenForGeneration.set_retriever(self,retriever:RagRetriever)
transformers.models.rag.modeling_rag.RagTokenForGeneration.shift_tokens_right(self,input_ids,start_token_id=None)
transformers.models.rag.modeling_rag.RetrievAugLMMarginOutput(ModelOutput)
transformers.models.rag.modeling_rag.RetrievAugLMOutput(ModelOutput)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/encoder_decoder/configuration_encoder_decoder.py----------------------------------------
A:transformers.models.encoder_decoder.configuration_encoder_decoder.logger->utils.logging.get_logger(__name__)
A:transformers.models.encoder_decoder.configuration_encoder_decoder.encoder_config->kwargs.pop('encoder')
A:transformers.models.encoder_decoder.configuration_encoder_decoder.encoder_model_type->kwargs.pop('encoder').pop('model_type')
A:transformers.models.encoder_decoder.configuration_encoder_decoder.decoder_config->kwargs.pop('decoder')
A:transformers.models.encoder_decoder.configuration_encoder_decoder.decoder_model_type->kwargs.pop('decoder').pop('model_type')
A:transformers.models.encoder_decoder.configuration_encoder_decoder.self.encoder->auto.configuration_auto.AutoConfig.for_model(encoder_model_type, **encoder_config)
A:transformers.models.encoder_decoder.configuration_encoder_decoder.self.decoder->auto.configuration_auto.AutoConfig.for_model(decoder_model_type, **decoder_config)
A:transformers.models.encoder_decoder.configuration_encoder_decoder.output->copy.deepcopy(self.__dict__)
A:transformers.models.encoder_decoder.configuration_encoder_decoder.output['encoder']->self.encoder.to_dict()
A:transformers.models.encoder_decoder.configuration_encoder_decoder.output['decoder']->self.decoder.to_dict()
transformers.EncoderDecoderConfig(self,**kwargs)
transformers.EncoderDecoderConfig.from_encoder_decoder_configs(cls,encoder_config:PretrainedConfig,decoder_config:PretrainedConfig,**kwargs)->PretrainedConfig
transformers.EncoderDecoderConfig.to_dict(self)
transformers.models.encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig(self,**kwargs)
transformers.models.encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig.__init__(self,**kwargs)
transformers.models.encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig.from_encoder_decoder_configs(cls,encoder_config:PretrainedConfig,decoder_config:PretrainedConfig,**kwargs)->PretrainedConfig
transformers.models.encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig.to_dict(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/encoder_decoder/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/encoder_decoder/modeling_encoder_decoder.py----------------------------------------
A:transformers.models.encoder_decoder.modeling_encoder_decoder.logger->utils.logging.get_logger(__name__)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.config->configuration_encoder_decoder.EncoderDecoderConfig.from_encoder_decoder_configs(encoder.config, decoder.config, **kwargs)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.encoder->auto.modeling_auto.AutoModel.from_pretrained(encoder_pretrained_model_name_or_path, *model_args, **kwargs_encoder)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.decoder->auto.modeling_auto.AutoModelForCausalLM.from_pretrained(decoder_pretrained_model_name_or_path, **kwargs_decoder)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.encoder_config->auto.configuration_auto.AutoConfig.from_pretrained(encoder_pretrained_model_name_or_path)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.decoder_config->auto.configuration_auto.AutoConfig.from_pretrained(decoder_pretrained_model_name_or_path)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.encoder_outputs->self.encoder(input_ids=input_ids, attention_mask=attention_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, **kwargs_encoder)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.decoder_outputs->self.decoder(input_ids=decoder_input_ids, attention_mask=decoder_attention_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=attention_mask, inputs_embeds=decoder_inputs_embeds, labels=labels, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, **kwargs_decoder)
A:transformers.models.encoder_decoder.modeling_encoder_decoder.decoder_inputs->self.decoder.prepare_inputs_for_generation(input_ids)
transformers.EncoderDecoderModel(self,config:Optional[PretrainedConfig]=None,encoder:Optional[PreTrainedModel]=None,decoder:Optional[PreTrainedModel]=None)
transformers.EncoderDecoderModel._reorder_cache(self,past,beam_idx)
transformers.EncoderDecoderModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.EncoderDecoderModel.from_encoder_decoder_pretrained(cls,encoder_pretrained_model_name_or_path:str=None,decoder_pretrained_model_name_or_path:str=None,*model_args,**kwargs)->PreTrainedModel
transformers.EncoderDecoderModel.get_decoder(self)
transformers.EncoderDecoderModel.get_encoder(self)
transformers.EncoderDecoderModel.get_input_embeddings(self)
transformers.EncoderDecoderModel.get_output_embeddings(self)
transformers.EncoderDecoderModel.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,encoder_outputs=None,**kwargs)
transformers.EncoderDecoderModel.set_output_embeddings(self,new_embeddings)
transformers.EncoderDecoderModel.tie_weights(self)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel(self,config:Optional[PretrainedConfig]=None,encoder:Optional[PreTrainedModel]=None,decoder:Optional[PreTrainedModel]=None)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.__init__(self,config:Optional[PretrainedConfig]=None,encoder:Optional[PreTrainedModel]=None,decoder:Optional[PreTrainedModel]=None)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel._reorder_cache(self,past,beam_idx)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.from_encoder_decoder_pretrained(cls,encoder_pretrained_model_name_or_path:str=None,decoder_pretrained_model_name_or_path:str=None,*model_args,**kwargs)->PreTrainedModel
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.get_decoder(self)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.get_encoder(self)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.get_input_embeddings(self)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.get_output_embeddings(self)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.prepare_inputs_for_generation(self,input_ids,past=None,attention_mask=None,encoder_outputs=None,**kwargs)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.set_output_embeddings(self,new_embeddings)
transformers.models.encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel.tie_weights(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_generation/tokenization_bert_generation.py----------------------------------------
A:transformers.models.bert_generation.tokenization_bert_generation.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert_generation.tokenization_bert_generation.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.bert_generation.tokenization_bert_generation.state->self.__dict__.copy()
A:transformers.models.bert_generation.tokenization_bert_generation.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.bert_generation.tokenization_bert_generation.token->self.sp_model.IdToPiece(index)
A:transformers.models.bert_generation.tokenization_bert_generation.out_string->self.sp_model.decode_pieces(tokens)
A:transformers.models.bert_generation.tokenization_bert_generation.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.BertGenerationTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',unk_token='<unk>',pad_token='<pad>',sep_token='<::::>',**kwargs)
transformers.BertGenerationTokenizer.__getstate__(self)
transformers.BertGenerationTokenizer.__setstate__(self,d)
transformers.BertGenerationTokenizer._convert_id_to_token(self,index)
transformers.BertGenerationTokenizer._convert_token_to_id(self,token)
transformers.BertGenerationTokenizer._tokenize(self,text,sample=False)
transformers.BertGenerationTokenizer.convert_tokens_to_string(self,tokens)
transformers.BertGenerationTokenizer.get_vocab(self)
transformers.BertGenerationTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.BertGenerationTokenizer.vocab_size(self)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',unk_token='<unk>',pad_token='<pad>',sep_token='<::::>',**kwargs)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.__getstate__(self)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.__init__(self,vocab_file,bos_token='<s>',eos_token='</s>',unk_token='<unk>',pad_token='<pad>',sep_token='<::::>',**kwargs)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.__setstate__(self,d)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer._convert_id_to_token(self,index)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer._convert_token_to_id(self,token)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer._tokenize(self,text,sample=False)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.get_vocab(self)
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.bert_generation.tokenization_bert_generation.BertGenerationTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_generation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_generation/modeling_bert_generation.py----------------------------------------
A:transformers.models.bert_generation.modeling_bert_generation.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert_generation.modeling_bert_generation.tf_model->tensorflow_hub.Module(tf_hub_path)
A:transformers.models.bert_generation.modeling_bert_generation.init->tensorflow.compat.v1.global_variables_initializer()
A:transformers.models.bert_generation.modeling_bert_generation.keep_track_variables->all_variables.copy()
A:transformers.models.bert_generation.modeling_bert_generation.model_pointer->getattr(model_pointer, sub_layer)
A:transformers.models.bert_generation.modeling_bert_generation.array->numpy.transpose(array)
A:transformers.models.bert_generation.modeling_bert_generation.model_pointer.data->torch.from_numpy(array.astype(np.float32))
A:transformers.models.bert_generation.modeling_bert_generation.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.bert_generation.modeling_bert_generation.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.bert_generation.modeling_bert_generation.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.bert_generation.modeling_bert_generation.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.bert_generation.modeling_bert_generation.input_shape->input_ids.size()
A:transformers.models.bert_generation.modeling_bert_generation.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.bert_generation.modeling_bert_generation.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.bert_generation.modeling_bert_generation.embeddings->self.dropout(embeddings)
A:transformers.models.bert_generation.modeling_bert_generation.self.embeddings->BertGenerationEmbeddings(config)
A:transformers.models.bert_generation.modeling_bert_generation.self.encoder->BertEncoder(config)
A:transformers.models.bert_generation.modeling_bert_generation.attention_mask->input_ids.new_ones(input_shape)
A:transformers.models.bert_generation.modeling_bert_generation.(encoder_batch_size, encoder_sequence_length, _)->encoder_hidden_states.size()
A:transformers.models.bert_generation.modeling_bert_generation.encoder_attention_mask->torch.ones(encoder_hidden_shape, device=device)
A:transformers.models.bert_generation.modeling_bert_generation.encoder_extended_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.bert_generation.modeling_bert_generation.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.bert_generation.modeling_bert_generation.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, inputs_embeds=inputs_embeds)
A:transformers.models.bert_generation.modeling_bert_generation.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bert_generation.modeling_bert_generation.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.bert_generation.modeling_bert_generation.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.bert_generation.modeling_bert_generation.logits->self.decoder(hidden_states)
A:transformers.models.bert_generation.modeling_bert_generation.self.bert->BertGenerationEncoder(config)
A:transformers.models.bert_generation.modeling_bert_generation.self.lm_head->BertGenerationOnlyLMHead(config)
A:transformers.models.bert_generation.modeling_bert_generation.outputs->self.bert(input_ids, attention_mask=attention_mask, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bert_generation.modeling_bert_generation.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.bert_generation.modeling_bert_generation.shifted_prediction_scores->prediction_scores[:, :-1, :].contiguous()
A:transformers.models.bert_generation.modeling_bert_generation.labels->labels[:, 1:].contiguous()
A:transformers.models.bert_generation.modeling_bert_generation.loss_fct->CrossEntropyLoss()
A:transformers.models.bert_generation.modeling_bert_generation.lm_loss->loss_fct(shifted_prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
transformers.BertGenerationDecoder(self,config)
transformers.BertGenerationDecoder.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertGenerationDecoder.get_output_embeddings(self)
transformers.BertGenerationDecoder.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.BertGenerationDecoder.set_output_embeddings(self,new_embeddings)
transformers.BertGenerationEncoder(self,config)
transformers.BertGenerationEncoder._prune_heads(self,heads_to_prune)
transformers.BertGenerationEncoder.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertGenerationEncoder.get_input_embeddings(self)
transformers.BertGenerationEncoder.set_input_embeddings(self,value)
transformers.load_tf_weights_in_bert_generation(model,tf_hub_path,model_class,is_encoder_named_decoder=False,is_encoder=False)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder.__init__(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder.get_output_embeddings(self)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationDecoder.set_output_embeddings(self,new_embeddings)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEmbeddings(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEmbeddings.__init__(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEmbeddings.forward(self,input_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder.__init__(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder._prune_heads(self,heads_to_prune)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder.forward(self,input_ids=None,attention_mask=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder.get_input_embeddings(self)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder.set_input_embeddings(self,value)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationOnlyLMHead(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationOnlyLMHead.__init__(self,config)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationOnlyLMHead.forward(self,hidden_states)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationPreTrainedModel(PreTrainedModel)
transformers.models.bert_generation.modeling_bert_generation.BertGenerationPreTrainedModel._init_weights(self,module)
transformers.models.bert_generation.modeling_bert_generation.load_tf_weights_in_bert_generation(model,tf_hub_path,model_class,is_encoder_named_decoder=False,is_encoder=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_generation/configuration_bert_generation.py----------------------------------------
transformers.BertGenerationConfig(self,vocab_size=50358,hidden_size=1024,num_hidden_layers=24,num_attention_heads=16,intermediate_size=4096,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,bos_token_id=2,eos_token_id=1,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)
transformers.models.bert_generation.configuration_bert_generation.BertGenerationConfig(self,vocab_size=50358,hidden_size=1024,num_hidden_layers=24,num_attention_heads=16,intermediate_size=4096,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,bos_token_id=2,eos_token_id=1,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)
transformers.models.bert_generation.configuration_bert_generation.BertGenerationConfig.__init__(self,vocab_size=50358,hidden_size=1024,num_hidden_layers=24,num_attention_heads=16,intermediate_size=4096,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,bos_token_id=2,eos_token_id=1,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/tokenization_bert_fast.py----------------------------------------
A:transformers.models.bert.tokenization_bert_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert.tokenization_bert_fast.pre_tok_state->json.loads(self.backend_tokenizer.normalizer.__getstate__())
A:transformers.models.bert.tokenization_bert_fast.pre_tok_class->getattr(normalizers, pre_tok_state.pop('type'))
A:transformers.models.bert.tokenization_bert_fast.self.backend_tokenizer.normalizer->pre_tok_class(**pre_tok_state)
A:transformers.models.bert.tokenization_bert_fast.files->self._tokenizer.model.save(save_directory, name=filename_prefix)
transformers.BertTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.BertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.BertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.bert.tokenization_bert_fast.BertTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.bert.tokenization_bert_fast.BertTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,do_lower_case=True,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.bert.tokenization_bert_fast.BertTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.models.bert.tokenization_bert_fast.BertTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.bert.tokenization_bert_fast.BertTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/tokenization_bert.py----------------------------------------
A:transformers.models.bert.tokenization_bert.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert.tokenization_bert.vocab->collections.OrderedDict()
A:transformers.models.bert.tokenization_bert.tokens->unicodedata.normalize('NFD', text).split()
A:transformers.models.bert.tokenization_bert.token->self._run_strip_accents(token)
A:transformers.models.bert.tokenization_bert.text->unicodedata.normalize('NFD', text)
A:transformers.models.bert.tokenization_bert.self.vocab->load_vocab(vocab_file)
A:transformers.models.bert.tokenization_bert.self.ids_to_tokens->collections.OrderedDict([(ids, tok) for (tok, ids) in self.vocab.items()])
A:transformers.models.bert.tokenization_bert.self.basic_tokenizer->BasicTokenizer(do_lower_case=do_lower_case, never_split=never_split, tokenize_chinese_chars=tokenize_chinese_chars, strip_accents=strip_accents)
A:transformers.models.bert.tokenization_bert.self.wordpiece_tokenizer->WordpieceTokenizer(vocab=self.vocab, unk_token=self.unk_token)
A:transformers.models.bert.tokenization_bert.split_tokens->self.wordpiece_tokenizer.tokenize(text)
A:transformers.models.bert.tokenization_bert.out_string->' '.join(tokens).replace(' ##', '').strip()
A:transformers.models.bert.tokenization_bert.vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.bert.tokenization_bert.self.never_split->set(never_split)
A:transformers.models.bert.tokenization_bert.orig_tokens->whitespace_tokenize(text)
A:transformers.models.bert.tokenization_bert.output_tokens->whitespace_tokenize(' '.join(split_tokens))
A:transformers.models.bert.tokenization_bert.cat->unicodedata.category(char)
A:transformers.models.bert.tokenization_bert.chars->list(token)
A:transformers.models.bert.tokenization_bert.cp->ord(char)
A:transformers.models.bert.tokenization_bert.end->len(chars)
A:transformers.models.bert.tokenization_bert.substr->''.join(chars[start:end])
transformers.BasicTokenizer(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.BasicTokenizer._clean_text(self,text)
transformers.BasicTokenizer._is_chinese_char(self,cp)
transformers.BasicTokenizer._run_split_on_punc(self,text,never_split=None)
transformers.BasicTokenizer._run_strip_accents(self,text)
transformers.BasicTokenizer._tokenize_chinese_chars(self,text)
transformers.BasicTokenizer.tokenize(self,text,never_split=None)
transformers.BertTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.BertTokenizer._convert_id_to_token(self,index)
transformers.BertTokenizer._convert_token_to_id(self,token)
transformers.BertTokenizer._tokenize(self,text)
transformers.BertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BertTokenizer.convert_tokens_to_string(self,tokens)
transformers.BertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BertTokenizer.do_lower_case(self)
transformers.BertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.BertTokenizer.get_vocab(self)
transformers.BertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.BertTokenizer.vocab_size(self)
transformers.WordpieceTokenizer(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.WordpieceTokenizer.tokenize(self,text)
transformers.models.bert.tokenization_bert.BasicTokenizer(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.bert.tokenization_bert.BasicTokenizer.__init__(self,do_lower_case=True,never_split=None,tokenize_chinese_chars=True,strip_accents=None)
transformers.models.bert.tokenization_bert.BasicTokenizer._clean_text(self,text)
transformers.models.bert.tokenization_bert.BasicTokenizer._is_chinese_char(self,cp)
transformers.models.bert.tokenization_bert.BasicTokenizer._run_split_on_punc(self,text,never_split=None)
transformers.models.bert.tokenization_bert.BasicTokenizer._run_strip_accents(self,text)
transformers.models.bert.tokenization_bert.BasicTokenizer._tokenize_chinese_chars(self,text)
transformers.models.bert.tokenization_bert.BasicTokenizer.tokenize(self,text,never_split=None)
transformers.models.bert.tokenization_bert.BertTokenizer(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.bert.tokenization_bert.BertTokenizer.__init__(self,vocab_file,do_lower_case=True,do_basic_tokenize=True,never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',tokenize_chinese_chars=True,strip_accents=None,**kwargs)
transformers.models.bert.tokenization_bert.BertTokenizer._convert_id_to_token(self,index)
transformers.models.bert.tokenization_bert.BertTokenizer._convert_token_to_id(self,token)
transformers.models.bert.tokenization_bert.BertTokenizer._tokenize(self,text)
transformers.models.bert.tokenization_bert.BertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.bert.tokenization_bert.BertTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.bert.tokenization_bert.BertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.bert.tokenization_bert.BertTokenizer.do_lower_case(self)
transformers.models.bert.tokenization_bert.BertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.bert.tokenization_bert.BertTokenizer.get_vocab(self)
transformers.models.bert.tokenization_bert.BertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.bert.tokenization_bert.BertTokenizer.vocab_size(self)
transformers.models.bert.tokenization_bert.WordpieceTokenizer(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.bert.tokenization_bert.WordpieceTokenizer.__init__(self,vocab,unk_token,max_input_chars_per_word=100)
transformers.models.bert.tokenization_bert.WordpieceTokenizer.tokenize(self,text)
transformers.models.bert.tokenization_bert.load_vocab(vocab_file)
transformers.models.bert.tokenization_bert.whitespace_tokenize(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/configuration_bert.py----------------------------------------
A:transformers.models.bert.configuration_bert.logger->utils.logging.get_logger(__name__)
transformers.BertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)
transformers.models.bert.configuration_bert.BertConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)
transformers.models.bert.configuration_bert.BertConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,position_embedding_type='absolute',**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/modeling_flax_bert.py----------------------------------------
A:transformers.models.bert.modeling_flax_bert.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert.modeling_flax_bert.mean->jax.numpy.mean(x, axis=-1, keepdims=True)
A:transformers.models.bert.modeling_flax_bert.mean2->jax.numpy.mean(jax.lax.square(x), axis=-1, keepdims=True)
A:transformers.models.bert.modeling_flax_bert.mul->jax.lax.rsqrt(var + self.epsilon)
A:transformers.models.bert.modeling_flax_bert.embedding->self.param('weight', self.emb_init, (self.vocab_size, self.hidden_size))
A:transformers.models.bert.modeling_flax_bert.w_emb->FlaxBertEmbedding(self.vocab_size, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='word_embeddings', dtype=self.dtype)(jnp.atleast_2d(input_ids.astype('i4')))
A:transformers.models.bert.modeling_flax_bert.p_emb->FlaxBertEmbedding(self.max_length, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='position_embeddings', dtype=self.dtype)(jnp.atleast_2d(position_ids.astype('i4')))
A:transformers.models.bert.modeling_flax_bert.t_emb->FlaxBertEmbedding(self.type_vocab_size, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='token_type_embeddings', dtype=self.dtype)(jnp.atleast_2d(token_type_ids.astype('i4')))
A:transformers.models.bert.modeling_flax_bert.layer_norm->FlaxBertLayerNorm(name='layer_norm', dtype=self.dtype)(self_att + hidden_states)
A:transformers.models.bert.modeling_flax_bert.embeddings->FlaxBertEmbeddings(self.vocab_size, self.hidden_size, self.type_vocab_size, self.max_length, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='embeddings', dtype=self.dtype)(input_ids, token_type_ids, position_ids, attention_mask, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.attention_mask->jax.numpy.ones_like(input_ids)
A:transformers.models.bert.modeling_flax_bert.self_att->flax.linen.attention.SelfAttention(num_heads=self.num_heads, qkv_features=self.head_size, dropout_rate=self.dropout_rate, deterministic=deterministic, kernel_init=jax.nn.initializers.normal(self.kernel_init_scale, self.dtype), bias_init=jax.nn.initializers.zeros, name='self', dtype=self.dtype)(hidden_states, attention_mask)
A:transformers.models.bert.modeling_flax_bert.hidden_states->FlaxBertLMPredictionHead(vocab_size=self.vocab_size, hidden_act=self.hidden_act, name='predictions', dtype=self.dtype)(hidden_states)
A:transformers.models.bert.modeling_flax_bert.attention->FlaxBertAttention(self.num_heads, self.head_size, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='attention', dtype=self.dtype)(hidden_states, attention_mask, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.intermediate->FlaxBertIntermediate(self.intermediate_size, kernel_init_scale=self.kernel_init_scale, hidden_act=self.hidden_act, name='intermediate', dtype=self.dtype)(attention)
A:transformers.models.bert.modeling_flax_bert.output->FlaxBertOutput(kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='output', dtype=self.dtype)(intermediate, attention, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.layer->FlaxBertLayerCollection(self.num_layers, self.num_heads, self.head_size, self.intermediate_size, hidden_act=self.hidden_act, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='layer', dtype=self.dtype)(hidden_states, attention_mask, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.input_i->layer(input_i, attention_mask, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.out->flax.linen.Dense(hidden_states.shape[-1], kernel_init=jax.nn.initializers.normal(self.kernel_init_scale, self.dtype), name='dense', dtype=self.dtype)(cls_token)
A:transformers.models.bert.modeling_flax_bert.token_type_ids->jax.numpy.ones_like(input_ids)
A:transformers.models.bert.modeling_flax_bert.position_ids->jax.numpy.arange(jnp.atleast_2d(input_ids).shape[-1])
A:transformers.models.bert.modeling_flax_bert.(input_ids, attention_mask, token_type_ids, position_ids)->self._check_inputs(input_ids, attention_mask, token_type_ids, position_ids)
A:transformers.models.bert.modeling_flax_bert.(params_rng, dropout_rng)->jax.random.split(rng)
A:transformers.models.bert.modeling_flax_bert.jax_state->dict(pt_state)
A:transformers.models.bert.modeling_flax_bert.key_parts->set(key.split('.'))
A:transformers.models.bert.modeling_flax_bert.key->key.replace('attention.output.LayerNorm', 'attention.LayerNorm').replace('attention.output.LayerNorm', 'attention.LayerNorm')
A:transformers.models.bert.modeling_flax_bert.jax_state[key]->tensor.reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1)).reshape((config.hidden_size, config.num_attention_heads, -1)).transpose(1, 2, 0)
A:transformers.models.bert.modeling_flax_bert.tensor->tensor.reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1)).reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1))
A:transformers.models.bert.modeling_flax_bert.new_key->new_key.replace('bias', 'beta').replace('bias', 'beta')
A:transformers.models.bert.modeling_flax_bert.module->FlaxBertForMaskedLMModule(vocab_size=config.vocab_size, type_vocab_size=config.type_vocab_size, hidden_size=config.hidden_size, intermediate_size=config.intermediate_size, head_size=config.hidden_size, num_heads=config.num_attention_heads, num_encoder_layers=config.num_hidden_layers, max_length=config.max_position_embeddings, hidden_act=config.hidden_act, **kwargs)
A:transformers.models.bert.modeling_flax_bert.encoder->flax.linen.Dropout(rate=self.dropout_rate)(encoder, deterministic=deterministic)
A:transformers.models.bert.modeling_flax_bert.pooled->FlaxBertPooler(kernel_init_scale=self.kernel_init_scale, name='pooler', dtype=self.dtype)(encoder)
A:transformers.models.bert.modeling_flax_bert.logits->FlaxBertOnlyMLMHead(vocab_size=self.vocab_size, hidden_act=self.hidden_act, name='cls', dtype=self.dtype)(encoder)
transformers.FlaxBertForMaskedLM(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.FlaxBertForMaskedLMModule(self,input_ids,attention_mask=None,token_type_ids=None,position_ids=None,deterministic:bool=True)
transformers.FlaxBertModel(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.bert.modeling_flax_bert.FlaxBertAttention(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertAttention.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertEmbedding(self,inputs)
transformers.models.bert.modeling_flax_bert.FlaxBertEmbedding.__call__(self,inputs)
transformers.models.bert.modeling_flax_bert.FlaxBertEmbeddings(self,input_ids,token_type_ids,position_ids,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertEmbeddings.__call__(self,input_ids,token_type_ids,position_ids,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertEncoder(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertEncoder.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertForMaskedLM(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.bert.modeling_flax_bert.FlaxBertForMaskedLM.__init__(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.bert.modeling_flax_bert.FlaxBertForMaskedLMModule(self,input_ids,attention_mask=None,token_type_ids=None,position_ids=None,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertForMaskedLMModule.__call__(self,input_ids,attention_mask=None,token_type_ids=None,position_ids=None,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertIntermediate(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertIntermediate.__call__(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertLMPredictionHead(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertLMPredictionHead.__call__(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertLayer(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertLayer.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertLayerCollection(self,inputs,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertLayerCollection.__call__(self,inputs,attention_mask,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertLayerNorm(self,x)
transformers.models.bert.modeling_flax_bert.FlaxBertLayerNorm.__call__(self,x)
transformers.models.bert.modeling_flax_bert.FlaxBertModel(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.bert.modeling_flax_bert.FlaxBertModel.__init__(self,config:BertConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.bert.modeling_flax_bert.FlaxBertModule(self,input_ids,attention_mask,token_type_ids,position_ids,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertModule.__call__(self,input_ids,attention_mask,token_type_ids,position_ids,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertOnlyMLMHead(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertOnlyMLMHead.__call__(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertOutput(self,intermediate_output,attention_output,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertOutput.__call__(self,intermediate_output,attention_output,deterministic:bool=True)
transformers.models.bert.modeling_flax_bert.FlaxBertPooler(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertPooler.__call__(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel(FlaxPreTrainedModel)
transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel._check_inputs(self,input_ids,attention_mask,token_type_ids,position_ids)
transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel.convert_from_pytorch(pt_state:Dict,config:BertConfig)->Dict
transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel.init(self,rng:jax.random.PRNGKey,input_shape:Tuple)->FrozenDict
transformers.models.bert.modeling_flax_bert.FlaxBertPredictionHeadTransform(self,hidden_states)
transformers.models.bert.modeling_flax_bert.FlaxBertPredictionHeadTransform.__call__(self,hidden_states)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/convert_bert_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.config->transformers.BertConfig.from_json_file(bert_config_file)
A:transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.model->BertForPreTraining(config)
A:transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,bert_config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/convert_bert_pytorch_checkpoint_to_original_tf.py----------------------------------------
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.state_dict->transformers.BertModel.from_pretrained(pretrained_model_name_or_path=args.model_name, state_dict=torch.load(args.pytorch_model_path), cache_dir=args.cache_dir).state_dict()
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.name->name.replace(patt, repl).replace(patt, repl)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.tf_dtype->tensorflow.dtypes.as_dtype(tensor.dtype)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.tf_var->create_tf_var(tensor=torch_tensor, name=tf_name, session=session)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.tf_name->to_tf_var_name(var_name)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.torch_tensor->state_dict[var_name].numpy()
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.tf_weight->session.run(tf_var)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.saver->tensorflow.train.Saver(tf.trainable_variables())
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.parser->argparse.ArgumentParser()
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.args->argparse.ArgumentParser().parse_args(raw_args)
A:transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.model->transformers.BertModel.from_pretrained(pretrained_model_name_or_path=args.model_name, state_dict=torch.load(args.pytorch_model_path), cache_dir=args.cache_dir)
transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf(model:BertModel,ckpt_dir:str,model_name:str)
transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.main(raw_args=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/modeling_bert.py----------------------------------------
A:transformers.models.bert.modeling_bert.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert.modeling_bert.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.bert.modeling_bert.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.bert.modeling_bert.array->numpy.transpose(array)
A:transformers.models.bert.modeling_bert.name->name.split('/').split('/')
A:transformers.models.bert.modeling_bert.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.bert.modeling_bert.pointer->getattr(pointer, 'weight')
A:transformers.models.bert.modeling_bert.num->int(scope_names[1])
A:transformers.models.bert.modeling_bert.pointer.data->torch.from_numpy(array)
A:transformers.models.bert.modeling_bert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.bert.modeling_bert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.bert.modeling_bert.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size)
A:transformers.models.bert.modeling_bert.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.bert.modeling_bert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.bert.modeling_bert.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.bert.modeling_bert.input_shape->torch.cat([input_ids, dummy_token], dim=1).size()
A:transformers.models.bert.modeling_bert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.bert.modeling_bert.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.bert.modeling_bert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.bert.modeling_bert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.bert.modeling_bert.embeddings->self.dropout(embeddings)
A:transformers.models.bert.modeling_bert.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.bert.modeling_bert.self.query->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.bert.modeling_bert.self.key->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.bert.modeling_bert.self.value->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.bert.modeling_bert.self.distance_embedding->torch.nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)
A:transformers.models.bert.modeling_bert.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.bert.modeling_bert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.bert.modeling_bert.mixed_key_layer->self.key(hidden_states)
A:transformers.models.bert.modeling_bert.mixed_value_layer->self.value(hidden_states)
A:transformers.models.bert.modeling_bert.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.bert.modeling_bert.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.bert.modeling_bert.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.bert.modeling_bert.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.bert.modeling_bert.position_ids_l->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)
A:transformers.models.bert.modeling_bert.position_ids_r->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)
A:transformers.models.bert.modeling_bert.positional_embedding->positional_embedding.to(dtype=query_layer.dtype).to(dtype=query_layer.dtype)
A:transformers.models.bert.modeling_bert.relative_position_scores->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.bert.modeling_bert.relative_position_scores_query->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.bert.modeling_bert.relative_position_scores_key->torch.einsum('bhrd,lrd->bhlr', key_layer, positional_embedding)
A:transformers.models.bert.modeling_bert.attention_probs->self.dropout(attention_probs)
A:transformers.models.bert.modeling_bert.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.bert.modeling_bert.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.bert.modeling_bert.hidden_states->self.decoder(hidden_states)
A:transformers.models.bert.modeling_bert.self.self->BertSelfAttention(config)
A:transformers.models.bert.modeling_bert.self.output->BertOutput(config)
A:transformers.models.bert.modeling_bert.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.bert.modeling_bert.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.bert.modeling_bert.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.bert.modeling_bert.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.bert.modeling_bert.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.bert.modeling_bert.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.bert.modeling_bert.self_outputs->self.self(hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.bert.modeling_bert.attention_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.bert.modeling_bert.self.attention->BertAttention(config)
A:transformers.models.bert.modeling_bert.self.crossattention->BertAttention(config)
A:transformers.models.bert.modeling_bert.self.intermediate->BertIntermediate(config)
A:transformers.models.bert.modeling_bert.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.bert.modeling_bert.cross_attention_outputs->self.crossattention(attention_output, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.bert.modeling_bert.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.bert.modeling_bert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.bert.modeling_bert.self.layer->torch.nn.ModuleList([BertLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.bert.modeling_bert.layer_outputs->layer_module(hidden_states, attention_mask, layer_head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.bert.modeling_bert.self.activation->torch.nn.Tanh()
A:transformers.models.bert.modeling_bert.pooled_output->self.dropout(pooled_output)
A:transformers.models.bert.modeling_bert.self.transform->BertPredictionHeadTransform(config)
A:transformers.models.bert.modeling_bert.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.bert.modeling_bert.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.bert.modeling_bert.self.predictions->BertLMPredictionHead(config)
A:transformers.models.bert.modeling_bert.prediction_scores->self.cls(sequence_output)
A:transformers.models.bert.modeling_bert.self.seq_relationship->torch.nn.Linear(config.hidden_size, 2)
A:transformers.models.bert.modeling_bert.seq_relationship_score->self.seq_relationship(pooled_output)
A:transformers.models.bert.modeling_bert.self.embeddings->BertEmbeddings(config)
A:transformers.models.bert.modeling_bert.self.encoder->BertEncoder(config)
A:transformers.models.bert.modeling_bert.attention_mask->torch.cat([attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))], dim=-1)
A:transformers.models.bert.modeling_bert.(encoder_batch_size, encoder_sequence_length, _)->encoder_hidden_states.size()
A:transformers.models.bert.modeling_bert.encoder_attention_mask->torch.ones(encoder_hidden_shape, device=device)
A:transformers.models.bert.modeling_bert.encoder_extended_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.bert.modeling_bert.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.bert.modeling_bert.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.bert.modeling_bert.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bert.modeling_bert.self.bert->BertModel(config, add_pooling_layer=False)
A:transformers.models.bert.modeling_bert.self.cls->BertOnlyNSPHead(config)
A:transformers.models.bert.modeling_bert.outputs->self.bert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bert.modeling_bert.(prediction_scores, seq_relationship_score)->self.cls(sequence_output, pooled_output)
A:transformers.models.bert.modeling_bert.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.bert.modeling_bert.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.bert.modeling_bert.next_sentence_loss->loss_fct(seq_relationship_scores.view(-1, 2), labels.view(-1))
A:transformers.models.bert.modeling_bert.shifted_prediction_scores->prediction_scores[:, :-1, :].contiguous()
A:transformers.models.bert.modeling_bert.labels->kwargs.pop('next_sentence_label')
A:transformers.models.bert.modeling_bert.lm_loss->loss_fct(shifted_prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.bert.modeling_bert.dummy_token->torch.full((effective_batch_size, 1), self.config.pad_token_id, dtype=torch.long, device=input_ids.device)
A:transformers.models.bert.modeling_bert.input_ids->torch.cat([input_ids, dummy_token], dim=1)
A:transformers.models.bert.modeling_bert.seq_relationship_scores->self.cls(pooled_output)
A:transformers.models.bert.modeling_bert.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.bert.modeling_bert.logits->self.qa_outputs(sequence_output)
A:transformers.models.bert.modeling_bert.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.bert.modeling_bert.reshaped_logits->self.qa_outputs(sequence_output).view(-1, num_choices)
A:transformers.models.bert.modeling_bert.sequence_output->self.dropout(sequence_output)
A:transformers.models.bert.modeling_bert.active_logits->self.qa_outputs(sequence_output).view(-1, self.num_labels)
A:transformers.models.bert.modeling_bert.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.bert.modeling_bert.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.bert.modeling_bert.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.bert.modeling_bert.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.bert.modeling_bert.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.bert.modeling_bert.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.bert.modeling_bert.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.bert.modeling_bert.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.bert.modeling_bert.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.bert.modeling_bert.end_loss->loss_fct(end_logits, end_positions)
transformers.BertForMaskedLM(self,config)
transformers.BertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertForMaskedLM.get_output_embeddings(self)
transformers.BertForMaskedLM.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.BertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.BertForMultipleChoice(self,config)
transformers.BertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertForNextSentencePrediction(self,config)
transformers.BertForNextSentencePrediction.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.BertForPreTraining(self,config)
transformers.BertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,next_sentence_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertForPreTraining.get_output_embeddings(self)
transformers.BertForPreTraining.set_output_embeddings(self,new_embeddings)
transformers.BertForPreTrainingOutput(ModelOutput)
transformers.BertForQuestionAnswering(self,config)
transformers.BertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertForSequenceClassification(self,config)
transformers.BertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertForTokenClassification(self,config)
transformers.BertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertLMHeadModel(self,config)
transformers.BertLMHeadModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertLMHeadModel.get_output_embeddings(self)
transformers.BertLMHeadModel.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.BertLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.BertLayer(self,config)
transformers.BertLayer.feed_forward_chunk(self,attention_output)
transformers.BertLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.BertModel(self,config,add_pooling_layer=True)
transformers.BertModel._prune_heads(self,heads_to_prune)
transformers.BertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BertModel.get_input_embeddings(self)
transformers.BertModel.set_input_embeddings(self,value)
transformers.BertPreTrainedModel(PreTrainedModel)
transformers.BertPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_bert(model,config,tf_checkpoint_path)
transformers.models.bert.modeling_bert.BertAttention(self,config)
transformers.models.bert.modeling_bert.BertAttention.__init__(self,config)
transformers.models.bert.modeling_bert.BertAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.bert.modeling_bert.BertAttention.prune_heads(self,heads)
transformers.models.bert.modeling_bert.BertEmbeddings(self,config)
transformers.models.bert.modeling_bert.BertEmbeddings.__init__(self,config)
transformers.models.bert.modeling_bert.BertEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.bert.modeling_bert.BertEncoder(self,config)
transformers.models.bert.modeling_bert.BertEncoder.__init__(self,config)
transformers.models.bert.modeling_bert.BertEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.bert.modeling_bert.BertForMaskedLM(self,config)
transformers.models.bert.modeling_bert.BertForMaskedLM.__init__(self,config)
transformers.models.bert.modeling_bert.BertForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertForMaskedLM.get_output_embeddings(self)
transformers.models.bert.modeling_bert.BertForMaskedLM.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.models.bert.modeling_bert.BertForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.bert.modeling_bert.BertForMultipleChoice(self,config)
transformers.models.bert.modeling_bert.BertForMultipleChoice.__init__(self,config)
transformers.models.bert.modeling_bert.BertForMultipleChoice.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertForNextSentencePrediction(self,config)
transformers.models.bert.modeling_bert.BertForNextSentencePrediction.__init__(self,config)
transformers.models.bert.modeling_bert.BertForNextSentencePrediction.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.bert.modeling_bert.BertForPreTraining(self,config)
transformers.models.bert.modeling_bert.BertForPreTraining.__init__(self,config)
transformers.models.bert.modeling_bert.BertForPreTraining.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,next_sentence_label=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertForPreTraining.get_output_embeddings(self)
transformers.models.bert.modeling_bert.BertForPreTraining.set_output_embeddings(self,new_embeddings)
transformers.models.bert.modeling_bert.BertForPreTrainingOutput(ModelOutput)
transformers.models.bert.modeling_bert.BertForQuestionAnswering(self,config)
transformers.models.bert.modeling_bert.BertForQuestionAnswering.__init__(self,config)
transformers.models.bert.modeling_bert.BertForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertForSequenceClassification(self,config)
transformers.models.bert.modeling_bert.BertForSequenceClassification.__init__(self,config)
transformers.models.bert.modeling_bert.BertForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertForTokenClassification(self,config)
transformers.models.bert.modeling_bert.BertForTokenClassification.__init__(self,config)
transformers.models.bert.modeling_bert.BertForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertIntermediate(self,config)
transformers.models.bert.modeling_bert.BertIntermediate.__init__(self,config)
transformers.models.bert.modeling_bert.BertIntermediate.forward(self,hidden_states)
transformers.models.bert.modeling_bert.BertLMHeadModel(self,config)
transformers.models.bert.modeling_bert.BertLMHeadModel.__init__(self,config)
transformers.models.bert.modeling_bert.BertLMHeadModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertLMHeadModel.get_output_embeddings(self)
transformers.models.bert.modeling_bert.BertLMHeadModel.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.models.bert.modeling_bert.BertLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.bert.modeling_bert.BertLMPredictionHead(self,config)
transformers.models.bert.modeling_bert.BertLMPredictionHead.__init__(self,config)
transformers.models.bert.modeling_bert.BertLMPredictionHead.forward(self,hidden_states)
transformers.models.bert.modeling_bert.BertLayer(self,config)
transformers.models.bert.modeling_bert.BertLayer.__init__(self,config)
transformers.models.bert.modeling_bert.BertLayer.feed_forward_chunk(self,attention_output)
transformers.models.bert.modeling_bert.BertLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.bert.modeling_bert.BertModel(self,config,add_pooling_layer=True)
transformers.models.bert.modeling_bert.BertModel.__init__(self,config,add_pooling_layer=True)
transformers.models.bert.modeling_bert.BertModel._prune_heads(self,heads_to_prune)
transformers.models.bert.modeling_bert.BertModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bert.modeling_bert.BertModel.get_input_embeddings(self)
transformers.models.bert.modeling_bert.BertModel.set_input_embeddings(self,value)
transformers.models.bert.modeling_bert.BertOnlyMLMHead(self,config)
transformers.models.bert.modeling_bert.BertOnlyMLMHead.__init__(self,config)
transformers.models.bert.modeling_bert.BertOnlyMLMHead.forward(self,sequence_output)
transformers.models.bert.modeling_bert.BertOnlyNSPHead(self,config)
transformers.models.bert.modeling_bert.BertOnlyNSPHead.__init__(self,config)
transformers.models.bert.modeling_bert.BertOnlyNSPHead.forward(self,pooled_output)
transformers.models.bert.modeling_bert.BertOutput(self,config)
transformers.models.bert.modeling_bert.BertOutput.__init__(self,config)
transformers.models.bert.modeling_bert.BertOutput.forward(self,hidden_states,input_tensor)
transformers.models.bert.modeling_bert.BertPooler(self,config)
transformers.models.bert.modeling_bert.BertPooler.__init__(self,config)
transformers.models.bert.modeling_bert.BertPooler.forward(self,hidden_states)
transformers.models.bert.modeling_bert.BertPreTrainedModel(PreTrainedModel)
transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights(self,module)
transformers.models.bert.modeling_bert.BertPreTrainingHeads(self,config)
transformers.models.bert.modeling_bert.BertPreTrainingHeads.__init__(self,config)
transformers.models.bert.modeling_bert.BertPreTrainingHeads.forward(self,sequence_output,pooled_output)
transformers.models.bert.modeling_bert.BertPredictionHeadTransform(self,config)
transformers.models.bert.modeling_bert.BertPredictionHeadTransform.__init__(self,config)
transformers.models.bert.modeling_bert.BertPredictionHeadTransform.forward(self,hidden_states)
transformers.models.bert.modeling_bert.BertSelfAttention(self,config)
transformers.models.bert.modeling_bert.BertSelfAttention.__init__(self,config)
transformers.models.bert.modeling_bert.BertSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.bert.modeling_bert.BertSelfAttention.transpose_for_scores(self,x)
transformers.models.bert.modeling_bert.BertSelfOutput(self,config)
transformers.models.bert.modeling_bert.BertSelfOutput.__init__(self,config)
transformers.models.bert.modeling_bert.BertSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.bert.modeling_bert.load_tf_weights_in_bert(model,config,tf_checkpoint_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/modeling_tf_bert.py----------------------------------------
A:transformers.models.bert.modeling_tf_bert.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert.modeling_tf_bert.loss_fn->tensorflow.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)
A:transformers.models.bert.modeling_tf_bert.masked_lm_active_loss->tensorflow.not_equal(tf.reshape(labels['labels'], (-1,)), -100)
A:transformers.models.bert.modeling_tf_bert.masked_lm_reduced_logits->tensorflow.boolean_mask(tf.reshape(logits[0], (-1, shape_list(logits[0])[2])), masked_lm_active_loss)
A:transformers.models.bert.modeling_tf_bert.masked_lm_labels->tensorflow.boolean_mask(tf.reshape(labels['labels'], (-1,)), masked_lm_active_loss)
A:transformers.models.bert.modeling_tf_bert.next_sentence_active_loss->tensorflow.not_equal(tf.reshape(labels['next_sentence_label'], (-1,)), -100)
A:transformers.models.bert.modeling_tf_bert.next_sentence_reduced_logits->tensorflow.boolean_mask(tf.reshape(logits[1], (-1, 2)), next_sentence_active_loss)
A:transformers.models.bert.modeling_tf_bert.next_sentence_label->tensorflow.boolean_mask(tf.reshape(labels['next_sentence_label'], (-1,)), mask=next_sentence_active_loss)
A:transformers.models.bert.modeling_tf_bert.masked_lm_loss->tensorflow.reduce_mean(masked_lm_loss, 0)
A:transformers.models.bert.modeling_tf_bert.next_sentence_loss->loss_fn(next_sentence_label, next_sentence_reduced_logits)
A:transformers.models.bert.modeling_tf_bert.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.bert.modeling_tf_bert.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.bert.modeling_tf_bert.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.bert.modeling_tf_bert.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.bert.modeling_tf_bert.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.bert.modeling_tf_bert.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.bert.modeling_tf_bert.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.bert.modeling_tf_bert.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.bert.modeling_tf_bert.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.bert.modeling_tf_bert.token_type_embeddings->tensorflow.cast(self.token_type_embeddings(token_type_ids), inputs_embeds.dtype)
A:transformers.models.bert.modeling_tf_bert.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.bert.modeling_tf_bert.x->tensorflow.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))
A:transformers.models.bert.modeling_tf_bert.logits->self.qa_outputs(sequence_output)
A:transformers.models.bert.modeling_tf_bert.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.bert.modeling_tf_bert.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.bert.modeling_tf_bert.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.bert.modeling_tf_bert.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.bert.modeling_tf_bert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.bert.modeling_tf_bert.mixed_key_layer->self.key(hidden_states)
A:transformers.models.bert.modeling_tf_bert.mixed_value_layer->self.value(hidden_states)
A:transformers.models.bert.modeling_tf_bert.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.bert.modeling_tf_bert.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.bert.modeling_tf_bert.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.bert.modeling_tf_bert.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.bert.modeling_tf_bert.dk->tensorflow.cast(shape_list(key_layer)[-1], attention_scores.dtype)
A:transformers.models.bert.modeling_tf_bert.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.bert.modeling_tf_bert.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.bert.modeling_tf_bert.self.dense->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='dense')
A:transformers.models.bert.modeling_tf_bert.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.bert.modeling_tf_bert.self.self_attention->TFBertSelfAttention(config, name='self')
A:transformers.models.bert.modeling_tf_bert.self.dense_output->TFBertSelfOutput(config, name='output')
A:transformers.models.bert.modeling_tf_bert.self_outputs->self.self_attention(input_tensor, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.bert.modeling_tf_bert.attention_output->self.dense_output(self_outputs[0], input_tensor, training=training)
A:transformers.models.bert.modeling_tf_bert.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.bert.modeling_tf_bert.self.attention->TFBertAttention(config, name='attention')
A:transformers.models.bert.modeling_tf_bert.self.intermediate->TFBertIntermediate(config, name='intermediate')
A:transformers.models.bert.modeling_tf_bert.self.bert_output->TFBertOutput(config, name='output')
A:transformers.models.bert.modeling_tf_bert.attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.bert.modeling_tf_bert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.bert.modeling_tf_bert.layer_output->self.bert_output(intermediate_output, attention_output, training=training)
A:transformers.models.bert.modeling_tf_bert.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions, training=training)
A:transformers.models.bert.modeling_tf_bert.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.self.transform_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.bert.modeling_tf_bert.self.transform->TFBertPredictionHeadTransform(config, name='transform')
A:transformers.models.bert.modeling_tf_bert.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.bert.modeling_tf_bert.self.predictions->TFBertLMPredictionHead(config, input_embeddings, name='predictions')
A:transformers.models.bert.modeling_tf_bert.prediction_scores->self.mlm(sequence_output, training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.self.seq_relationship->tensorflow.keras.layers.Dense(2, kernel_initializer=get_initializer(config.initializer_range), name='seq_relationship')
A:transformers.models.bert.modeling_tf_bert.seq_relationship_score->self.nsp(pooled_output)
A:transformers.models.bert.modeling_tf_bert.self.embeddings->TFBertEmbeddings(config, name='embeddings')
A:transformers.models.bert.modeling_tf_bert.self.encoder->TFBertEncoder(config, name='encoder')
A:transformers.models.bert.modeling_tf_bert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.bert.modeling_tf_bert.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.bert.modeling_tf_bert.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.bert.modeling_tf_bert.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.extended_attention_mask->tensorflow.cast(extended_attention_mask, embedding_output.dtype)
A:transformers.models.bert.modeling_tf_bert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.self.bert->TFBertMainLayer(config, add_pooling_layer=False, name='bert')
A:transformers.models.bert.modeling_tf_bert.outputs->self.bert(inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.self.nsp->TFBertNSPHead(config, name='nsp___cls')
A:transformers.models.bert.modeling_tf_bert.self.mlm->TFBertMLMHead(config, self.bert.embeddings, name='mlm___cls')
A:transformers.models.bert.modeling_tf_bert.total_loss->self.compute_loss(labels=d_labels, logits=(prediction_scores, seq_relationship_score))
A:transformers.models.bert.modeling_tf_bert.loss->self.compute_loss(labels, (start_logits, end_logits))
A:transformers.models.bert.modeling_tf_bert.seq_relationship_scores->self.nsp(pooled_output)
A:transformers.models.bert.modeling_tf_bert.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.bert.modeling_tf_bert.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.bert.modeling_tf_bert.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.bert.modeling_tf_bert.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.bert.modeling_tf_bert.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.bert.modeling_tf_bert.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.bert.modeling_tf_bert.end_logits->tensorflow.squeeze(end_logits, axis=-1)
transformers.TFBertEmbeddings(self,config,**kwargs)
transformers.TFBertEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.TFBertEmbeddings._linear(self,inputs)
transformers.TFBertEmbeddings.build(self,input_shape)
transformers.TFBertEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.TFBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFBertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBertForMaskedLM.get_output_embeddings(self)
transformers.TFBertForMaskedLM.get_output_layer_with_bias(self)
transformers.TFBertForMaskedLM.get_prefix_bias_name(self)
transformers.TFBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBertForMultipleChoice.dummy_inputs(self)
transformers.TFBertForNextSentencePrediction(self,config,*inputs,**kwargs)
transformers.TFBertForNextSentencePrediction.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,next_sentence_label=None,training=False,**kwargs)
transformers.TFBertForPreTraining(self,config,*inputs,**kwargs)
transformers.TFBertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,next_sentence_label=None,training=False,**kwargs)
transformers.TFBertForPreTraining.get_output_embeddings(self)
transformers.TFBertForPreTraining.get_output_layer_with_bias(self)
transformers.TFBertForPreTraining.get_prefix_bias_name(self)
transformers.TFBertForPreTrainingOutput(ModelOutput)
transformers.TFBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFBertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBertLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFBertLMHeadModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBertLMHeadModel.get_output_embeddings(self)
transformers.TFBertLMHeadModel.get_output_layer_with_bias(self)
transformers.TFBertLMHeadModel.get_prefix_bias_name(self)
transformers.TFBertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.TFBertMainLayer._prune_heads(self,heads_to_prune)
transformers.TFBertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFBertMainLayer.get_input_embeddings(self)
transformers.TFBertMainLayer.set_input_embeddings(self,value)
transformers.TFBertModel(self,config,*inputs,**kwargs)
transformers.TFBertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFBertPreTrainedModel(TFPreTrainedModel)
transformers.models.bert.modeling_tf_bert.TFBertAttention(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertAttention.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertAttention.call(self,input_tensor,attention_mask,head_mask,output_attentions,training=False)
transformers.models.bert.modeling_tf_bert.TFBertAttention.prune_heads(self,heads)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings._linear(self,inputs)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings.build(self,input_shape)
transformers.models.bert.modeling_tf_bert.TFBertEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.bert.modeling_tf_bert.TFBertEncoder(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertEncoder.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertEncoder.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM.get_output_embeddings(self)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM.get_output_layer_with_bias(self)
transformers.models.bert.modeling_tf_bert.TFBertForMaskedLM.get_prefix_bias_name(self)
transformers.models.bert.modeling_tf_bert.TFBertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForMultipleChoice.dummy_inputs(self)
transformers.models.bert.modeling_tf_bert.TFBertForNextSentencePrediction(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForNextSentencePrediction.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForNextSentencePrediction.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,next_sentence_label=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,next_sentence_label=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining.get_output_embeddings(self)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining.get_output_layer_with_bias(self)
transformers.models.bert.modeling_tf_bert.TFBertForPreTraining.get_prefix_bias_name(self)
transformers.models.bert.modeling_tf_bert.TFBertForPreTrainingOutput(ModelOutput)
transformers.models.bert.modeling_tf_bert.TFBertForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertIntermediate(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertIntermediate.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertIntermediate.call(self,hidden_states)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.get_output_embeddings(self)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.get_output_layer_with_bias(self)
transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.get_prefix_bias_name(self)
transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead(self,config,input_embeddings,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead.build(self,input_shape)
transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead.call(self,hidden_states)
transformers.models.bert.modeling_tf_bert.TFBertLayer(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLayer.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.bert.modeling_tf_bert.TFBertMLMHead(self,config,input_embeddings,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertMLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertMLMHead.call(self,sequence_output)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer.__init__(self,config,add_pooling_layer=True,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer._prune_heads(self,heads_to_prune)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer.get_input_embeddings(self)
transformers.models.bert.modeling_tf_bert.TFBertMainLayer.set_input_embeddings(self,value)
transformers.models.bert.modeling_tf_bert.TFBertModel(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertNSPHead(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertNSPHead.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertNSPHead.call(self,pooled_output)
transformers.models.bert.modeling_tf_bert.TFBertOutput(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertOutput.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.bert.modeling_tf_bert.TFBertPooler(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertPooler.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertPooler.call(self,hidden_states)
transformers.models.bert.modeling_tf_bert.TFBertPreTrainedModel(TFPreTrainedModel)
transformers.models.bert.modeling_tf_bert.TFBertPreTrainingLoss
transformers.models.bert.modeling_tf_bert.TFBertPreTrainingLoss.compute_loss(self,labels,logits)
transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform.call(self,hidden_states)
transformers.models.bert.modeling_tf_bert.TFBertSelfAttention(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertSelfAttention.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertSelfAttention.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.bert.modeling_tf_bert.TFBertSelfAttention.transpose_for_scores(self,x,batch_size)
transformers.models.bert.modeling_tf_bert.TFBertSelfOutput(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertSelfOutput.__init__(self,config,**kwargs)
transformers.models.bert.modeling_tf_bert.TFBertSelfOutput.call(self,hidden_states,input_tensor,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert/convert_bert_original_tf2_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.logger->transformers.utils.logging.get_logger(__name__)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.name->full_name.split('/')
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.array->array.transpose().transpose()
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.layer_num->int(m_name.split('-')[-1])
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.pointer->getattr(pointer, 'weight')
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.trace->'.'.join(trace)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.pointer.data->torch.from_numpy(array)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.config->transformers.BertConfig.from_json_file(config_path)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.model->BertModel(config)
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.convert_tf2_checkpoint_to_pytorch(tf_checkpoint_path,config_path,pytorch_dump_path)
transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.load_tf2_weights_in_bert(model,tf_checkpoint_path,config)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/modeling_flax_roberta.py----------------------------------------
A:transformers.models.roberta.modeling_flax_roberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.roberta.modeling_flax_roberta.mask->(input_ids != padding_idx).astype('i4')
A:transformers.models.roberta.modeling_flax_roberta.mean->jax.numpy.mean(x, axis=-1, keepdims=True)
A:transformers.models.roberta.modeling_flax_roberta.mean2->jax.numpy.mean(jax.lax.square(x), axis=-1, keepdims=True)
A:transformers.models.roberta.modeling_flax_roberta.mul->jax.lax.rsqrt(var + self.epsilon)
A:transformers.models.roberta.modeling_flax_roberta.embedding->self.param('weight', self.emb_init, (self.vocab_size, self.hidden_size))
A:transformers.models.roberta.modeling_flax_roberta.w_emb->FlaxRobertaEmbedding(self.vocab_size, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='word_embeddings', dtype=self.dtype)(jnp.atleast_2d(input_ids.astype('i4')))
A:transformers.models.roberta.modeling_flax_roberta.p_emb->FlaxRobertaEmbedding(self.max_length, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='position_embeddings', dtype=self.dtype)(jnp.atleast_2d(position_ids.astype('i4')))
A:transformers.models.roberta.modeling_flax_roberta.t_emb->FlaxRobertaEmbedding(self.type_vocab_size, self.hidden_size, kernel_init_scale=self.kernel_init_scale, name='token_type_embeddings', dtype=self.dtype)(jnp.atleast_2d(token_type_ids.astype('i4')))
A:transformers.models.roberta.modeling_flax_roberta.layer_norm->FlaxRobertaLayerNorm(name='layer_norm', dtype=self.dtype)(self_att + hidden_states)
A:transformers.models.roberta.modeling_flax_roberta.embeddings->FlaxRobertaEmbeddings(self.vocab_size, self.hidden_size, self.type_vocab_size, self.max_length, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='embeddings', dtype=self.dtype)(input_ids, token_type_ids, position_ids, attention_mask, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.attention_mask->jax.numpy.ones_like(input_ids)
A:transformers.models.roberta.modeling_flax_roberta.self_att->flax.linen.attention.SelfAttention(num_heads=self.num_heads, qkv_features=self.head_size, dropout_rate=self.dropout_rate, deterministic=deterministic, kernel_init=jax.nn.initializers.normal(self.kernel_init_scale, self.dtype), bias_init=jax.nn.initializers.zeros, name='self', dtype=self.dtype)(hidden_states, attention_mask)
A:transformers.models.roberta.modeling_flax_roberta.hidden_states->FlaxRobertaLayerNorm(name='layer_norm', dtype=self.dtype)(hidden_states + attention_output)
A:transformers.models.roberta.modeling_flax_roberta.attention->FlaxRobertaAttention(self.num_heads, self.head_size, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='attention', dtype=self.dtype)(hidden_states, attention_mask, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.intermediate->FlaxRobertaIntermediate(self.intermediate_size, kernel_init_scale=self.kernel_init_scale, hidden_act=self.hidden_act, name='intermediate', dtype=self.dtype)(attention)
A:transformers.models.roberta.modeling_flax_roberta.output->FlaxRobertaOutput(kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='output', dtype=self.dtype)(intermediate, attention, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.layer->FlaxRobertaLayerCollection(self.num_layers, self.num_heads, self.head_size, self.intermediate_size, hidden_act=self.hidden_act, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, name='layer', dtype=self.dtype)(hidden_states, attention_mask, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.input_i->layer(input_i, attention_mask, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.out->flax.linen.Dense(hidden_states.shape[-1], kernel_init=jax.nn.initializers.normal(self.kernel_init_scale, self.dtype), name='dense', dtype=self.dtype)(cls_token)
A:transformers.models.roberta.modeling_flax_roberta.jax_state->dict(pt_state)
A:transformers.models.roberta.modeling_flax_roberta.key_parts->set(key.split('.'))
A:transformers.models.roberta.modeling_flax_roberta.key->key.replace('attention.output.LayerNorm', 'attention.LayerNorm').replace('attention.output.LayerNorm', 'attention.LayerNorm')
A:transformers.models.roberta.modeling_flax_roberta.jax_state[key]->tensor.reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1)).reshape((config.hidden_size, config.num_attention_heads, -1)).transpose(1, 2, 0)
A:transformers.models.roberta.modeling_flax_roberta.tensor->tensor.reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1)).reshape((config.num_attention_heads, -1, config.hidden_size)).transpose((2, 0, 1))
A:transformers.models.roberta.modeling_flax_roberta.new_key->new_key.replace('bias', 'beta').replace('bias', 'beta')
A:transformers.models.roberta.modeling_flax_roberta.(input_ids, attention_mask, token_type_ids, position_ids)->self._check_inputs(input_ids, attention_mask, token_type_ids, position_ids)
A:transformers.models.roberta.modeling_flax_roberta.(params_rng, dropout_rng)->jax.random.split(rng)
A:transformers.models.roberta.modeling_flax_roberta.token_type_ids->jax.numpy.ones_like(input_ids)
A:transformers.models.roberta.modeling_flax_roberta.position_ids->create_position_ids_from_input_ids(input_ids, self.config.pad_token_id)
A:transformers.models.roberta.modeling_flax_roberta.module->FlaxRobertaModule(vocab_size=config.vocab_size, hidden_size=config.hidden_size, type_vocab_size=config.type_vocab_size, max_length=config.max_position_embeddings, num_encoder_layers=config.num_hidden_layers, num_heads=config.num_attention_heads, head_size=config.hidden_size, hidden_act=config.hidden_act, intermediate_size=config.intermediate_size, dropout_rate=config.hidden_dropout_prob, dtype=dtype, **kwargs)
A:transformers.models.roberta.modeling_flax_roberta.encoder->FlaxRobertaEncoder(self.num_encoder_layers, self.num_heads, self.head_size, self.intermediate_size, kernel_init_scale=self.kernel_init_scale, dropout_rate=self.dropout_rate, hidden_act=self.hidden_act, name='encoder', dtype=self.dtype)(embeddings, attention_mask, deterministic=deterministic)
A:transformers.models.roberta.modeling_flax_roberta.pooled->FlaxRobertaPooler(kernel_init_scale=self.kernel_init_scale, name='pooler', dtype=self.dtype)(encoder)
transformers.FlaxRobertaModel(self,config:RobertaConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaAttention(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaAttention.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbedding(self,inputs)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbedding.__call__(self,inputs)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbeddings(self,input_ids,token_type_ids,position_ids,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbeddings.__call__(self,input_ids,token_type_ids,position_ids,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEncoder(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEncoder.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaIntermediate(self,hidden_states)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaIntermediate.__call__(self,hidden_states)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayer(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayer.__call__(self,hidden_states,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerCollection(self,inputs,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerCollection.__call__(self,inputs,attention_mask,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerNorm(self,x)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerNorm.__call__(self,x)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaModel(self,config:RobertaConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaModel.__init__(self,config:RobertaConfig,input_shape:Tuple=(1,1),seed:int=0,dtype:jnp.dtype=jnp.float32,**kwargs)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaModule(self,input_ids,attention_mask,token_type_ids,position_ids,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaModule.__call__(self,input_ids,attention_mask,token_type_ids,position_ids,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaOutput(self,intermediate_output,attention_output,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaOutput.__call__(self,intermediate_output,attention_output,deterministic:bool=True)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPooler(self,hidden_states)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPooler.__call__(self,hidden_states)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPreTrainedModel(FlaxPreTrainedModel)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPreTrainedModel._check_inputs(self,input_ids,attention_mask,token_type_ids,position_ids)
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPreTrainedModel.convert_from_pytorch(pt_state:Dict,config:RobertaConfig)->Dict
transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPreTrainedModel.init(self,rng:jax.random.PRNGKey,input_shape:Tuple)->FrozenDict
transformers.models.roberta.modeling_flax_roberta.create_position_ids_from_input_ids(input_ids,padding_idx)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/modeling_roberta.py----------------------------------------
A:transformers.models.roberta.modeling_roberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.roberta.modeling_roberta.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.roberta.modeling_roberta.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size, padding_idx=self.padding_idx)
A:transformers.models.roberta.modeling_roberta.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size)
A:transformers.models.roberta.modeling_roberta.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.roberta.modeling_roberta.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.roberta.modeling_roberta.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.roberta.modeling_roberta.position_ids->torch.arange(self.padding_idx + 1, sequence_length + self.padding_idx + 1, dtype=torch.long, device=inputs_embeds.device)
A:transformers.models.roberta.modeling_roberta.input_shape->input_ids.size()
A:transformers.models.roberta.modeling_roberta.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.roberta.modeling_roberta.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.roberta.modeling_roberta.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.roberta.modeling_roberta.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.roberta.modeling_roberta.embeddings->self.dropout(embeddings)
A:transformers.models.roberta.modeling_roberta.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.roberta.modeling_roberta.self.query->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.roberta.modeling_roberta.self.key->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.roberta.modeling_roberta.self.value->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.roberta.modeling_roberta.self.distance_embedding->torch.nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)
A:transformers.models.roberta.modeling_roberta.x->self.out_proj(x)
A:transformers.models.roberta.modeling_roberta.mixed_query_layer->self.query(hidden_states)
A:transformers.models.roberta.modeling_roberta.mixed_key_layer->self.key(hidden_states)
A:transformers.models.roberta.modeling_roberta.mixed_value_layer->self.value(hidden_states)
A:transformers.models.roberta.modeling_roberta.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.roberta.modeling_roberta.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.roberta.modeling_roberta.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.roberta.modeling_roberta.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.roberta.modeling_roberta.position_ids_l->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)
A:transformers.models.roberta.modeling_roberta.position_ids_r->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)
A:transformers.models.roberta.modeling_roberta.positional_embedding->positional_embedding.to(dtype=query_layer.dtype).to(dtype=query_layer.dtype)
A:transformers.models.roberta.modeling_roberta.relative_position_scores->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.roberta.modeling_roberta.relative_position_scores_query->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.roberta.modeling_roberta.relative_position_scores_key->torch.einsum('bhrd,lrd->bhlr', key_layer, positional_embedding)
A:transformers.models.roberta.modeling_roberta.attention_probs->self.dropout(attention_probs)
A:transformers.models.roberta.modeling_roberta.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.roberta.modeling_roberta.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.roberta.modeling_roberta.hidden_states->self.LayerNorm(hidden_states + input_tensor)
A:transformers.models.roberta.modeling_roberta.self.self->RobertaSelfAttention(config)
A:transformers.models.roberta.modeling_roberta.self.output->RobertaOutput(config)
A:transformers.models.roberta.modeling_roberta.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.roberta.modeling_roberta.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.roberta.modeling_roberta.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.roberta.modeling_roberta.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.roberta.modeling_roberta.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.roberta.modeling_roberta.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.roberta.modeling_roberta.self_outputs->self.self(hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.roberta.modeling_roberta.attention_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.roberta.modeling_roberta.self.attention->RobertaAttention(config)
A:transformers.models.roberta.modeling_roberta.self.crossattention->RobertaAttention(config)
A:transformers.models.roberta.modeling_roberta.self.intermediate->RobertaIntermediate(config)
A:transformers.models.roberta.modeling_roberta.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.roberta.modeling_roberta.cross_attention_outputs->self.crossattention(attention_output, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.roberta.modeling_roberta.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.roberta.modeling_roberta.intermediate_output->self.intermediate(attention_output)
A:transformers.models.roberta.modeling_roberta.self.layer->torch.nn.ModuleList([RobertaLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.roberta.modeling_roberta.layer_outputs->layer_module(hidden_states, attention_mask, layer_head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.roberta.modeling_roberta.self.activation->torch.nn.Tanh()
A:transformers.models.roberta.modeling_roberta.pooled_output->self.dropout(pooled_output)
A:transformers.models.roberta.modeling_roberta.self.embeddings->RobertaEmbeddings(config)
A:transformers.models.roberta.modeling_roberta.self.encoder->RobertaEncoder(config)
A:transformers.models.roberta.modeling_roberta.attention_mask->input_ids.new_ones(input_shape)
A:transformers.models.roberta.modeling_roberta.(encoder_batch_size, encoder_sequence_length, _)->encoder_hidden_states.size()
A:transformers.models.roberta.modeling_roberta.encoder_attention_mask->torch.ones(encoder_hidden_shape, device=device)
A:transformers.models.roberta.modeling_roberta.encoder_extended_attention_mask->self.invert_attention_mask(encoder_attention_mask)
A:transformers.models.roberta.modeling_roberta.head_mask->self.get_head_mask(head_mask, self.config.num_hidden_layers)
A:transformers.models.roberta.modeling_roberta.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.roberta.modeling_roberta.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, head_mask=head_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.roberta.modeling_roberta.self.roberta->RobertaModel(config, add_pooling_layer=False)
A:transformers.models.roberta.modeling_roberta.self.lm_head->RobertaLMHead(config)
A:transformers.models.roberta.modeling_roberta.outputs->self.roberta(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.roberta.modeling_roberta.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.roberta.modeling_roberta.shifted_prediction_scores->prediction_scores[:, :-1, :].contiguous()
A:transformers.models.roberta.modeling_roberta.labels->labels[:, 1:].contiguous()
A:transformers.models.roberta.modeling_roberta.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.roberta.modeling_roberta.lm_loss->loss_fct(shifted_prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.roberta.modeling_roberta.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.roberta.modeling_roberta.self.layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.roberta.modeling_roberta.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.roberta.modeling_roberta.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.roberta.modeling_roberta.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.roberta.modeling_roberta.logits->self.qa_outputs(sequence_output)
A:transformers.models.roberta.modeling_roberta.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
A:transformers.models.roberta.modeling_roberta.reshaped_logits->self.qa_outputs(sequence_output).view(-1, num_choices)
A:transformers.models.roberta.modeling_roberta.sequence_output->self.dropout(sequence_output)
A:transformers.models.roberta.modeling_roberta.active_logits->self.qa_outputs(sequence_output).view(-1, self.num_labels)
A:transformers.models.roberta.modeling_roberta.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.roberta.modeling_roberta.self.out_proj->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.roberta.modeling_roberta.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.roberta.modeling_roberta.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.roberta.modeling_roberta.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.roberta.modeling_roberta.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.roberta.modeling_roberta.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.roberta.modeling_roberta.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.roberta.modeling_roberta.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.roberta.modeling_roberta.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.roberta.modeling_roberta.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.roberta.modeling_roberta.mask->input_ids.ne(padding_idx).int()
transformers.RobertaForCausalLM(self,config)
transformers.RobertaForCausalLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaForCausalLM.get_output_embeddings(self)
transformers.RobertaForCausalLM.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.RobertaForCausalLM.set_output_embeddings(self,new_embeddings)
transformers.RobertaForMaskedLM(self,config)
transformers.RobertaForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaForMaskedLM.get_output_embeddings(self)
transformers.RobertaForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.RobertaForMultipleChoice(self,config)
transformers.RobertaForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,labels=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaForQuestionAnswering(self,config)
transformers.RobertaForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaForSequenceClassification(self,config)
transformers.RobertaForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaForTokenClassification(self,config)
transformers.RobertaForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaModel(self,config,add_pooling_layer=True)
transformers.RobertaModel._prune_heads(self,heads_to_prune)
transformers.RobertaModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.RobertaModel.get_input_embeddings(self)
transformers.RobertaModel.set_input_embeddings(self,value)
transformers.models.roberta.modeling_roberta.RobertaAttention(self,config)
transformers.models.roberta.modeling_roberta.RobertaAttention.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.roberta.modeling_roberta.RobertaAttention.prune_heads(self,heads)
transformers.models.roberta.modeling_roberta.RobertaClassificationHead(self,config)
transformers.models.roberta.modeling_roberta.RobertaClassificationHead.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaClassificationHead.forward(self,features,**kwargs)
transformers.models.roberta.modeling_roberta.RobertaEmbeddings(self,config)
transformers.models.roberta.modeling_roberta.RobertaEmbeddings.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.roberta.modeling_roberta.RobertaEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.roberta.modeling_roberta.RobertaEncoder(self,config)
transformers.models.roberta.modeling_roberta.RobertaEncoder.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM(self,config)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM.get_output_embeddings(self)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM.prepare_inputs_for_generation(self,input_ids,attention_mask=None,**model_kwargs)
transformers.models.roberta.modeling_roberta.RobertaForCausalLM.set_output_embeddings(self,new_embeddings)
transformers.models.roberta.modeling_roberta.RobertaForMaskedLM(self,config)
transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.get_output_embeddings(self)
transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.roberta.modeling_roberta.RobertaForMultipleChoice(self,config)
transformers.models.roberta.modeling_roberta.RobertaForMultipleChoice.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,labels=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering(self,config)
transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification(self,config)
transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaForTokenClassification(self,config)
transformers.models.roberta.modeling_roberta.RobertaForTokenClassification.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaForTokenClassification.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaIntermediate(self,config)
transformers.models.roberta.modeling_roberta.RobertaIntermediate.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaIntermediate.forward(self,hidden_states)
transformers.models.roberta.modeling_roberta.RobertaLMHead(self,config)
transformers.models.roberta.modeling_roberta.RobertaLMHead.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaLMHead.forward(self,features,**kwargs)
transformers.models.roberta.modeling_roberta.RobertaLayer(self,config)
transformers.models.roberta.modeling_roberta.RobertaLayer.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaLayer.feed_forward_chunk(self,attention_output)
transformers.models.roberta.modeling_roberta.RobertaLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.roberta.modeling_roberta.RobertaModel(self,config,add_pooling_layer=True)
transformers.models.roberta.modeling_roberta.RobertaModel.__init__(self,config,add_pooling_layer=True)
transformers.models.roberta.modeling_roberta.RobertaModel._prune_heads(self,heads_to_prune)
transformers.models.roberta.modeling_roberta.RobertaModel.forward(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.roberta.modeling_roberta.RobertaModel.get_input_embeddings(self)
transformers.models.roberta.modeling_roberta.RobertaModel.set_input_embeddings(self,value)
transformers.models.roberta.modeling_roberta.RobertaOutput(self,config)
transformers.models.roberta.modeling_roberta.RobertaOutput.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaOutput.forward(self,hidden_states,input_tensor)
transformers.models.roberta.modeling_roberta.RobertaPooler(self,config)
transformers.models.roberta.modeling_roberta.RobertaPooler.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaPooler.forward(self,hidden_states)
transformers.models.roberta.modeling_roberta.RobertaPreTrainedModel(PreTrainedModel)
transformers.models.roberta.modeling_roberta.RobertaPreTrainedModel._init_weights(self,module)
transformers.models.roberta.modeling_roberta.RobertaSelfAttention(self,config)
transformers.models.roberta.modeling_roberta.RobertaSelfAttention.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.roberta.modeling_roberta.RobertaSelfAttention.transpose_for_scores(self,x)
transformers.models.roberta.modeling_roberta.RobertaSelfOutput(self,config)
transformers.models.roberta.modeling_roberta.RobertaSelfOutput.__init__(self,config)
transformers.models.roberta.modeling_roberta.RobertaSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids(input_ids,padding_idx)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/tokenization_roberta_fast.py----------------------------------------
A:transformers.models.roberta.tokenization_roberta_fast.logger->utils.logging.get_logger(__name__)
transformers.RobertaTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.RobertaTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.RobertaTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.RobertaTokenizerFast.mask_token(self)->str
transformers.RobertaTokenizerFast.mask_token(self,value)
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast(self,vocab_file,merges_file,tokenizer_file=None,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast.__init__(self,vocab_file,merges_file,tokenizer_file=None,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast.mask_token(self)->str
transformers.models.roberta.tokenization_roberta_fast.RobertaTokenizerFast.mask_token(self,value)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/modeling_tf_roberta.py----------------------------------------
A:transformers.models.roberta.modeling_tf_roberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.roberta.modeling_tf_roberta.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.roberta.modeling_tf_roberta.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.roberta.modeling_tf_roberta.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.roberta.modeling_tf_roberta.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.roberta.modeling_tf_roberta.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.roberta.modeling_tf_roberta.mask->tensorflow.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)
A:transformers.models.roberta.modeling_tf_roberta.position_ids->self.create_position_ids_from_inputs_embeds(inputs_embeds)
A:transformers.models.roberta.modeling_tf_roberta.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.roberta.modeling_tf_roberta.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.roberta.modeling_tf_roberta.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.roberta.modeling_tf_roberta.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.roberta.modeling_tf_roberta.token_type_embeddings->tensorflow.cast(self.token_type_embeddings(token_type_ids), inputs_embeds.dtype)
A:transformers.models.roberta.modeling_tf_roberta.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.roberta.modeling_tf_roberta.x->self.out_proj(x)
A:transformers.models.roberta.modeling_tf_roberta.logits->self.qa_outputs(sequence_output)
A:transformers.models.roberta.modeling_tf_roberta.self.dense->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), activation='tanh', name='dense')
A:transformers.models.roberta.modeling_tf_roberta.pooled_output->self.dropout(pooled_output, training=inputs['training'])
A:transformers.models.roberta.modeling_tf_roberta.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.roberta.modeling_tf_roberta.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.roberta.modeling_tf_roberta.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.roberta.modeling_tf_roberta.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.roberta.modeling_tf_roberta.mixed_query_layer->self.query(hidden_states)
A:transformers.models.roberta.modeling_tf_roberta.mixed_key_layer->self.key(hidden_states)
A:transformers.models.roberta.modeling_tf_roberta.mixed_value_layer->self.value(hidden_states)
A:transformers.models.roberta.modeling_tf_roberta.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.roberta.modeling_tf_roberta.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.roberta.modeling_tf_roberta.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.roberta.modeling_tf_roberta.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.roberta.modeling_tf_roberta.dk->tensorflow.cast(shape_list(key_layer)[-1], attention_scores.dtype)
A:transformers.models.roberta.modeling_tf_roberta.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.roberta.modeling_tf_roberta.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.roberta.modeling_tf_roberta.hidden_states->self.layer_norm(hidden_states)
A:transformers.models.roberta.modeling_tf_roberta.self.self_attention->TFRobertaSelfAttention(config, name='self')
A:transformers.models.roberta.modeling_tf_roberta.self.dense_output->TFRobertaSelfOutput(config, name='output')
A:transformers.models.roberta.modeling_tf_roberta.self_outputs->self.self_attention(input_tensor, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.roberta.modeling_tf_roberta.attention_output->self.dense_output(self_outputs[0], input_tensor, training=training)
A:transformers.models.roberta.modeling_tf_roberta.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.roberta.modeling_tf_roberta.self.attention->TFRobertaAttention(config, name='attention')
A:transformers.models.roberta.modeling_tf_roberta.self.intermediate->TFRobertaIntermediate(config, name='intermediate')
A:transformers.models.roberta.modeling_tf_roberta.self.bert_output->TFRobertaOutput(config, name='output')
A:transformers.models.roberta.modeling_tf_roberta.attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions, training=training)
A:transformers.models.roberta.modeling_tf_roberta.intermediate_output->self.intermediate(attention_output)
A:transformers.models.roberta.modeling_tf_roberta.layer_output->self.bert_output(intermediate_output, attention_output, training=training)
A:transformers.models.roberta.modeling_tf_roberta.layer_outputs->layer_module(hidden_states, attention_mask, head_mask[i], output_attentions, training=training)
A:transformers.models.roberta.modeling_tf_roberta.self.encoder->TFRobertaEncoder(config, name='encoder')
A:transformers.models.roberta.modeling_tf_roberta.self.embeddings->TFRobertaEmbeddings(config, name='embeddings')
A:transformers.models.roberta.modeling_tf_roberta.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.roberta.modeling_tf_roberta.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.roberta.modeling_tf_roberta.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.roberta.modeling_tf_roberta.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.roberta.modeling_tf_roberta.extended_attention_mask->tensorflow.cast(extended_attention_mask, embedding_output.dtype)
A:transformers.models.roberta.modeling_tf_roberta.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['head_mask'], inputs['output_attentions'], inputs['output_hidden_states'], inputs['return_dict'], training=inputs['training'])
A:transformers.models.roberta.modeling_tf_roberta.self.roberta->TFRobertaMainLayer(config, add_pooling_layer=False, name='roberta')
A:transformers.models.roberta.modeling_tf_roberta.outputs->self.roberta(inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.roberta.modeling_tf_roberta.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm')
A:transformers.models.roberta.modeling_tf_roberta.self.act->get_tf_activation('gelu')
A:transformers.models.roberta.modeling_tf_roberta.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.roberta.modeling_tf_roberta.self.lm_head->TFRobertaLMHead(config, self.roberta.embeddings, name='lm_head')
A:transformers.models.roberta.modeling_tf_roberta.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.roberta.modeling_tf_roberta.self.out_proj->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='out_proj')
A:transformers.models.roberta.modeling_tf_roberta.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.roberta.modeling_tf_roberta.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.roberta.modeling_tf_roberta.sequence_output->self.dropout(sequence_output, training=inputs['training'])
A:transformers.models.roberta.modeling_tf_roberta.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.roberta.modeling_tf_roberta.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.roberta.modeling_tf_roberta.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.roberta.modeling_tf_roberta.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.roberta.modeling_tf_roberta.loss->self.compute_loss(labels, (start_logits, end_logits))
transformers.TFRobertaForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFRobertaForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFRobertaForMaskedLM.get_output_embeddings(self)
transformers.TFRobertaForMaskedLM.get_output_layer_with_bias(self)
transformers.TFRobertaForMaskedLM.get_prefix_bias_name(self)
transformers.TFRobertaForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFRobertaForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFRobertaForMultipleChoice.dummy_inputs(self)
transformers.TFRobertaForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFRobertaForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFRobertaForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFRobertaForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFRobertaForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFRobertaForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFRobertaMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.TFRobertaMainLayer._prune_heads(self,heads_to_prune)
transformers.TFRobertaMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFRobertaMainLayer.get_input_embeddings(self)
transformers.TFRobertaMainLayer.set_input_embeddings(self,value)
transformers.TFRobertaModel(self,config,*inputs,**kwargs)
transformers.TFRobertaModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFRobertaPreTrainedModel(TFPreTrainedModel)
transformers.models.roberta.modeling_tf_roberta.TFRobertaAttention(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaAttention.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaAttention.call(self,input_tensor,attention_mask,head_mask,output_attentions,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaAttention.prune_heads(self,heads)
transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead.call(self,features,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings._linear(self,inputs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings.build(self,input_shape)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings.create_position_ids_from_input_ids(self,x)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEncoder(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEncoder.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaEncoder.call(self,hidden_states,attention_mask,head_mask,output_attentions,output_hidden_states,return_dict,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.get_output_embeddings(self)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.get_output_layer_with_bias(self)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.get_prefix_bias_name(self)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice.dummy_inputs(self)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaIntermediate(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaIntermediate.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaIntermediate.call(self,hidden_states)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead(self,config,input_embeddings,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead.build(self,input_shape)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead.call(self,hidden_states)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLayer(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLayer.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaLayer.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer.__init__(self,config,add_pooling_layer=True,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer._prune_heads(self,heads_to_prune)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer.get_input_embeddings(self)
transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer.set_input_embeddings(self,value)
transformers.models.roberta.modeling_tf_roberta.TFRobertaModel(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaModel.__init__(self,config,*inputs,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaModel.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaOutput(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaOutput.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaPooler(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaPooler.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaPooler.call(self,hidden_states)
transformers.models.roberta.modeling_tf_roberta.TFRobertaPreTrainedModel(TFPreTrainedModel)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfAttention(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfAttention.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfAttention.call(self,hidden_states,attention_mask,head_mask,output_attentions,training=False)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfAttention.transpose_for_scores(self,x,batch_size)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfOutput(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfOutput.__init__(self,config,**kwargs)
transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfOutput.call(self,hidden_states,input_tensor,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/tokenization_roberta.py----------------------------------------
A:transformers.models.roberta.tokenization_roberta.logger->utils.logging.get_logger(__name__)
A:transformers.models.roberta.tokenization_roberta.add_prefix_space->kwargs.pop('add_prefix_space', self.add_prefix_space)
transformers.RobertaTokenizer(self,vocab_file,merges_file,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.RobertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.RobertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.RobertaTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.RobertaTokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)
transformers.models.roberta.tokenization_roberta.RobertaTokenizer(self,vocab_file,merges_file,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.models.roberta.tokenization_roberta.RobertaTokenizer.__init__(self,vocab_file,merges_file,errors='replace',bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',add_prefix_space=False,**kwargs)
transformers.models.roberta.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.roberta.tokenization_roberta.RobertaTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.roberta.tokenization_roberta.RobertaTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.roberta.tokenization_roberta.RobertaTokenizer.prepare_for_tokenization(self,text,is_split_into_words=False,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/configuration_roberta.py----------------------------------------
A:transformers.models.roberta.configuration_roberta.logger->utils.logging.get_logger(__name__)
transformers.RobertaConfig(self,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)
transformers.models.roberta.configuration_roberta.RobertaConfig(self,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)
transformers.models.roberta.configuration_roberta.RobertaConfig.__init__(self,pad_token_id=1,bos_token_id=0,eos_token_id=2,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/roberta/convert_roberta_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.logger->transformers.utils.logging.get_logger(__name__)
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.roberta->fairseq.models.roberta.RobertaModel.from_pretrained(roberta_checkpoint_path)
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.config->RobertaConfig(vocab_size=roberta_sent_encoder.embed_tokens.num_embeddings, hidden_size=roberta.args.encoder_embed_dim, num_hidden_layers=roberta.args.encoder_layers, num_attention_heads=roberta.args.encoder_attention_heads, intermediate_size=roberta.args.encoder_ffn_embed_dim, max_position_embeddings=514, type_vocab_size=1, layer_norm_eps=1e-05)
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.model.roberta.embeddings.token_type_embeddings.weight.data->torch.zeros_like(model.roberta.embeddings.token_type_embeddings.weight)
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.their_output->fairseq.models.roberta.RobertaModel.from_pretrained(roberta_checkpoint_path).model.classification_heads['mnli'](roberta.extract_features(input_ids))
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.max_absolute_diff->torch.max(torch.abs(our_output - their_output)).item()
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.success->torch.allclose(our_output, their_output, atol=0.001)
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch(roberta_checkpoint_path:str,pytorch_dump_folder_path:str,classification_head:bool)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/convert_marian_to_pytorch.py----------------------------------------
A:transformers.models.marian.convert_marian_to_pytorch.stripped->remove_prefix(k, layer_prefix)
A:transformers.models.marian.convert_marian_to_pytorch.sd[converter[stripped]]->torch.tensor(v).squeeze()
A:transformers.models.marian.convert_marian_to_pytorch.sd->convert_encoder_layer(opus_state, layer_tag, converter)
A:transformers.models.marian.convert_marian_to_pytorch.api->HfApi()
A:transformers.models.marian.convert_marian_to_pytorch.model_list->HfApi().model_list()
A:transformers.models.marian.convert_marian_to_pytorch.embs_to_add->numpy.zeros((n_special_tokens, d_model))
A:transformers.models.marian.convert_marian_to_pytorch.new_embs->numpy.concatenate([wemb, embs_to_add])
A:transformers.models.marian.convert_marian_to_pytorch.bias_to_add->numpy.zeros((n_special_tokens, 1))
A:transformers.models.marian.convert_marian_to_pytorch.new_bias->numpy.concatenate((final_bias, bias_to_add), axis=1)
A:transformers.models.marian.convert_marian_to_pytorch.cfg_str->''.join([chr(x) for x in opus_dict[CONFIG_KEY]])
A:transformers.models.marian.convert_marian_to_pytorch.yaml_cfg->yaml.load(cfg_str[:-1], Loader=yaml.BaseLoader)
A:transformers.models.marian.convert_marian_to_pytorch.model_files->list(Path(dest_dir).glob('*.npz'))
A:transformers.models.marian.convert_marian_to_pytorch.x->x.replace(substr, grp_name).replace(substr, grp_name)
A:transformers.models.marian.convert_marian_to_pytorch.hf_model_name->remove_prefix(hf_model_name, ORG_NAME)
A:transformers.models.marian.convert_marian_to_pytorch.opus_w_prefix->remove_prefix(hf_model_name, ORG_NAME).replace('_', '+')
A:transformers.models.marian.convert_marian_to_pytorch.DEFAULT_MODEL_DIR->os.path.join(DEFAULT_REPO, 'models')
A:transformers.models.marian.convert_marian_to_pytorch.opus_readme_path->Path(repo_root).joinpath('models', opus_name, 'README.md')
A:transformers.models.marian.convert_marian_to_pytorch.content->'*'.join(splat)
A:transformers.models.marian.convert_marian_to_pytorch.items->'\n\n'.join([f'- {k}: {v}' for (k, v) in metadata.items()])
A:transformers.models.marian.convert_marian_to_pytorch.n_dash->p.name.count('-')
A:transformers.models.marian.convert_marian_to_pytorch.lns->Path(fname).open().readlines()
A:transformers.models.marian.convert_marian_to_pytorch.results[p.name]->_parse_readme(lns)
A:transformers.models.marian.convert_marian_to_pytorch.save_dir->Path('marian_ckpt')
A:transformers.models.marian.convert_marian_to_pytorch.dest_dir->Path(dest_dir)
A:transformers.models.marian.convert_marian_to_pytorch.pair_name->convert_opus_name_to_hf_name(k)
A:transformers.models.marian.convert_marian_to_pytorch.fname->wget.download(test_set_url, 'opus_test.txt')
A:transformers.models.marian.convert_marian_to_pytorch.src->lmap(str.strip, lns[::4])
A:transformers.models.marian.convert_marian_to_pytorch.gold->lmap(str.strip, lns[1::4])
A:transformers.models.marian.convert_marian_to_pytorch.mar_model->lmap(str.strip, lns[2::4])
A:transformers.models.marian.convert_marian_to_pytorch.ln->ln[1:].strip()
A:transformers.models.marian.convert_marian_to_pytorch.splat->ln[1:].strip().split(':')
A:transformers.models.marian.convert_marian_to_pytorch.dname->Path(dest_dir).name.split('-')
A:transformers.models.marian.convert_marian_to_pytorch.dct->dict(target_lang=dname[-1], source_lang='-'.join(dname[:-1]))
A:transformers.models.marian.convert_marian_to_pytorch.vocab->load_yaml(find_vocab_file(model_dir))
A:transformers.models.marian.convert_marian_to_pytorch.num_added->add_to_vocab_(vocab, ['<pad>'])
A:transformers.models.marian.convert_marian_to_pytorch.npz_path->find_model_file(source_dir)
A:transformers.models.marian.convert_marian_to_pytorch.self.state_dict->dict(self.state_dict)
A:transformers.models.marian.convert_marian_to_pytorch.cfg->load_config_from_state_dict(self.state_dict)
A:transformers.models.marian.convert_marian_to_pytorch.(self.wemb, self.final_bias)->add_emb_entries(self.state_dict['Wemb'], self.state_dict[BIAS_KEY], 1)
A:transformers.models.marian.convert_marian_to_pytorch.self.state_keys->list(self.state_dict.keys())
A:transformers.models.marian.convert_marian_to_pytorch.decoder_yml->cast_marian_config(load_yaml(source_dir / 'decoder.yml'))
A:transformers.models.marian.convert_marian_to_pytorch.self.hf_config->MarianConfig(vocab_size=cfg['vocab_size'], decoder_layers=cfg['dec-depth'], encoder_layers=cfg['enc-depth'], decoder_attention_heads=cfg['transformer-heads'], encoder_attention_heads=cfg['transformer-heads'], decoder_ffn_dim=cfg['transformer-dim-ffn'], encoder_ffn_dim=cfg['transformer-dim-ffn'], d_model=cfg['dim-emb'], activation_function=cfg['transformer-aan-activation'], pad_token_id=self.pad_token_id, eos_token_id=0, bos_token_id=0, max_position_embeddings=cfg['dim-emb'], scale_embedding=True, normalize_embedding='n' in cfg['transformer-preprocess'], static_position_embeddings=not cfg['transformer-train-position-embeddings'], dropout=0.1, num_beams=decoder_yml['beam-size'], decoder_start_token_id=self.pad_token_id, bad_words_ids=[[self.pad_token_id]], max_length=512)
A:transformers.models.marian.convert_marian_to_pytorch.self.encoder_l1->self.sub_keys('encoder_l1')
A:transformers.models.marian.convert_marian_to_pytorch.self.decoder_l1->self.sub_keys('decoder_l1')
A:transformers.models.marian.convert_marian_to_pytorch.self.decoder_l2->self.sub_keys('decoder_l2')
A:transformers.models.marian.convert_marian_to_pytorch.model->model.half().half()
A:transformers.models.marian.convert_marian_to_pytorch.wemb_tensor->torch.nn.Parameter(torch.FloatTensor(self.wemb))
A:transformers.models.marian.convert_marian_to_pytorch.bias_tensor->torch.nn.Parameter(torch.FloatTensor(self.final_bias))
A:transformers.models.marian.convert_marian_to_pytorch.wpos_tensor->torch.tensor(state_dict['Wpos'])
A:transformers.models.marian.convert_marian_to_pytorch.filename->wget.download(url)
A:transformers.models.marian.convert_marian_to_pytorch.tokenizer->transformers.MarianTokenizer.from_pretrained(str(source_dir))
A:transformers.models.marian.convert_marian_to_pytorch.opus_state->OpusState(source_dir)
A:transformers.models.marian.convert_marian_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.marian.convert_marian_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.marian.convert_marian_to_pytorch.source_dir->Path(args.src)
transformers.models.marian.convert_marian_to_pytorch.OpusState(self,source_dir)
transformers.models.marian.convert_marian_to_pytorch.OpusState.__init__(self,source_dir)
transformers.models.marian.convert_marian_to_pytorch.OpusState._check_layer_entries(self)
transformers.models.marian.convert_marian_to_pytorch.OpusState.extra_keys(self)
transformers.models.marian.convert_marian_to_pytorch.OpusState.load_marian_model(self)->MarianMTModel
transformers.models.marian.convert_marian_to_pytorch.OpusState.sub_keys(self,layer_prefix)
transformers.models.marian.convert_marian_to_pytorch._cast_yaml_str(v)
transformers.models.marian.convert_marian_to_pytorch._parse_readme(lns)
transformers.models.marian.convert_marian_to_pytorch.add_emb_entries(wemb,final_bias,n_special_tokens=1)
transformers.models.marian.convert_marian_to_pytorch.add_special_tokens_to_vocab(model_dir:Path)->None
transformers.models.marian.convert_marian_to_pytorch.add_to_vocab_(vocab:Dict[str,int],special_tokens:List[str])
transformers.models.marian.convert_marian_to_pytorch.cast_marian_config(raw_cfg:Dict[str,str])->Dict
transformers.models.marian.convert_marian_to_pytorch.check_equal(marian_cfg,k1,k2)
transformers.models.marian.convert_marian_to_pytorch.check_marian_cfg_assumptions(marian_cfg)
transformers.models.marian.convert_marian_to_pytorch.convert(source_dir:Path,dest_dir)
transformers.models.marian.convert_marian_to_pytorch.convert_all_sentencepiece_models(model_list=None,repo_path=None,dest_dir=Path('marian_converted'))
transformers.models.marian.convert_marian_to_pytorch.convert_encoder_layer(opus_dict,layer_prefix:str,converter:dict)
transformers.models.marian.convert_marian_to_pytorch.convert_hf_name_to_opus_name(hf_model_name)
transformers.models.marian.convert_marian_to_pytorch.convert_opus_name_to_hf_name(x)
transformers.models.marian.convert_marian_to_pytorch.convert_whole_dir(path=Path('marian_ckpt/'))
transformers.models.marian.convert_marian_to_pytorch.download_and_unzip(url,dest_dir)
transformers.models.marian.convert_marian_to_pytorch.fetch_test_set(test_set_url)
transformers.models.marian.convert_marian_to_pytorch.find_model_file(dest_dir)
transformers.models.marian.convert_marian_to_pytorch.find_pretrained_model(src_lang:str,tgt_lang:str)->List[str]
transformers.models.marian.convert_marian_to_pytorch.find_vocab_file(model_dir)
transformers.models.marian.convert_marian_to_pytorch.get_system_metadata(repo_root)
transformers.models.marian.convert_marian_to_pytorch.lmap(f,x)->List
transformers.models.marian.convert_marian_to_pytorch.load_config_from_state_dict(opus_dict)
transformers.models.marian.convert_marian_to_pytorch.load_layers_(layer_lst:torch.nn.ModuleList,opus_state:dict,converter,is_decoder=False)
transformers.models.marian.convert_marian_to_pytorch.load_yaml(path)
transformers.models.marian.convert_marian_to_pytorch.make_registry(repo_path='Opus-MT-train/models')
transformers.models.marian.convert_marian_to_pytorch.remove_prefix(text:str,prefix:str)
transformers.models.marian.convert_marian_to_pytorch.remove_suffix(text:str,suffix:str)
transformers.models.marian.convert_marian_to_pytorch.save_json(content:Union[Dict,List],path:str)->None
transformers.models.marian.convert_marian_to_pytorch.save_tokenizer_config(dest_dir:Path)
transformers.models.marian.convert_marian_to_pytorch.unzip(zip_path:str,dest_dir:str)->None
transformers.models.marian.convert_marian_to_pytorch.write_model_card(hf_model_name:str,repo_root=DEFAULT_REPO,save_dir=Path('marian_converted'),dry_run=False,extra_metadata={})->str


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/modeling_tf_marian.py----------------------------------------
A:transformers.models.marian.modeling_tf_marian.START_DOCSTRING->bart.modeling_tf_bart.BART_START_DOCSTRING.replace('inherits from :class:`~transformers.TFPreTrainedModel`', 'inherits from :class:`~transformers.TFBartForConditionalGeneration`').replace('BartConfig', _CONFIG_FOR_DOC)
A:transformers.models.marian.modeling_tf_marian.logger->utils.logging.get_logger(__name__)
A:transformers.models.marian.modeling_tf_marian.vocab_range->tensorflow.constant(range(self.config.vocab_size))
A:transformers.models.marian.modeling_tf_marian.logits->tensorflow.where(vocab_range != self.config.eos_token_id, LARGE_NEGATIVE, logits)
transformers.TFMarianMTModel(TFBartForConditionalGeneration)
transformers.TFMarianMTModel.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.marian.modeling_tf_marian.TFMarianMTModel(TFBartForConditionalGeneration)
transformers.models.marian.modeling_tf_marian.TFMarianMTModel.adjust_logits_during_generation(self,logits,cur_len,max_length)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/tokenization_marian.py----------------------------------------
A:transformers.models.marian.tokenization_marian.language_code_re->re.compile('>>.+<<')
A:transformers.models.marian.tokenization_marian.self.encoder->load_json(vocab)
A:transformers.models.marian.tokenization_marian.self.spm_source->load_spm(source_spm)
A:transformers.models.marian.tokenization_marian.self.spm_target->load_spm(target_spm)
A:transformers.models.marian.tokenization_marian.match->self.language_code_re.match(text)
A:transformers.models.marian.tokenization_marian.(code, text)->self.remove_language_code(text)
A:transformers.models.marian.tokenization_marian.pieces->self.current_spm.EncodeAsPieces(text)
A:transformers.models.marian.tokenization_marian.tokenizer_kwargs->dict(add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, truncation=truncation, padding=padding)
A:transformers.models.marian.tokenization_marian.save_dir->Path(save_directory)
A:transformers.models.marian.tokenization_marian.vocab->self.encoder.copy()
A:transformers.models.marian.tokenization_marian.state->self.__dict__.copy()
A:transformers.models.marian.tokenization_marian.all_special_ids->set(self.all_special_ids)
A:transformers.models.marian.tokenization_marian.spm->sentencepiece.SentencePieceProcessor()
transformers.MarianTokenizer(self,vocab,source_spm,target_spm,source_lang=None,target_lang=None,unk_token='<unk>',eos_token='</s>',pad_token='<pad>',model_max_length=512,**kwargs)
transformers.MarianTokenizer.__getstate__(self)->Dict
transformers.MarianTokenizer.__setstate__(self,d:Dict)->None
transformers.MarianTokenizer._convert_id_to_token(self,index:int)->str
transformers.MarianTokenizer._convert_token_to_id(self,token)
transformers.MarianTokenizer._setup_normalizer(self)
transformers.MarianTokenizer._special_token_mask(self,seq)
transformers.MarianTokenizer._tokenize(self,text:str)->List[str]
transformers.MarianTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.MarianTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.MarianTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.MarianTokenizer.get_vocab(self)->Dict
transformers.MarianTokenizer.normalize(self,x:str)->str
transformers.MarianTokenizer.num_special_tokens_to_add(self,**unused)
transformers.MarianTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:Optional[str]=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.MarianTokenizer.remove_language_code(self,text:str)
transformers.MarianTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.MarianTokenizer.vocab_size(self)->int
transformers.models.marian.tokenization_marian.MarianTokenizer(self,vocab,source_spm,target_spm,source_lang=None,target_lang=None,unk_token='<unk>',eos_token='</s>',pad_token='<pad>',model_max_length=512,**kwargs)
transformers.models.marian.tokenization_marian.MarianTokenizer.__getstate__(self)->Dict
transformers.models.marian.tokenization_marian.MarianTokenizer.__init__(self,vocab,source_spm,target_spm,source_lang=None,target_lang=None,unk_token='<unk>',eos_token='</s>',pad_token='<pad>',model_max_length=512,**kwargs)
transformers.models.marian.tokenization_marian.MarianTokenizer.__setstate__(self,d:Dict)->None
transformers.models.marian.tokenization_marian.MarianTokenizer._convert_id_to_token(self,index:int)->str
transformers.models.marian.tokenization_marian.MarianTokenizer._convert_token_to_id(self,token)
transformers.models.marian.tokenization_marian.MarianTokenizer._setup_normalizer(self)
transformers.models.marian.tokenization_marian.MarianTokenizer._special_token_mask(self,seq)
transformers.models.marian.tokenization_marian.MarianTokenizer._tokenize(self,text:str)->List[str]
transformers.models.marian.tokenization_marian.MarianTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.models.marian.tokenization_marian.MarianTokenizer.convert_tokens_to_string(self,tokens:List[str])->str
transformers.models.marian.tokenization_marian.MarianTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.marian.tokenization_marian.MarianTokenizer.get_vocab(self)->Dict
transformers.models.marian.tokenization_marian.MarianTokenizer.normalize(self,x:str)->str
transformers.models.marian.tokenization_marian.MarianTokenizer.num_special_tokens_to_add(self,**unused)
transformers.models.marian.tokenization_marian.MarianTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:Optional[str]=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.models.marian.tokenization_marian.MarianTokenizer.remove_language_code(self,text:str)
transformers.models.marian.tokenization_marian.MarianTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.marian.tokenization_marian.MarianTokenizer.vocab_size(self)->int
transformers.models.marian.tokenization_marian.load_json(path:str)->Union[Dict, List]
transformers.models.marian.tokenization_marian.load_spm(path:str)->sentencepiece.SentencePieceProcessor
transformers.models.marian.tokenization_marian.save_json(data,path:str)->None


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/modeling_marian.py----------------------------------------
A:transformers.models.marian.modeling_marian.logits[:, self.config.pad_token_id]->float('-inf')
transformers.MarianMTModel(BartForConditionalGeneration)
transformers.MarianMTModel.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.marian.modeling_marian.MarianMTModel(BartForConditionalGeneration)
transformers.models.marian.modeling_marian.MarianMTModel.adjust_logits_during_generation(self,logits,cur_len,max_length)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/convert_marian_tatoeba_to_pytorch.py----------------------------------------
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.DEFAULT_MODEL_DIR->os.path.join(DEFAULT_REPO, 'models')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.reg->self.make_tatoeba_registry()
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.reg_df->reg_df.set_index('id').set_index('id')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.released['fname']->released['url_base'].apply(lambda x: remove_suffix(remove_prefix(x, 'https://object.pouta.csc.fi/Tatoeba-Challenge/opus'), '.zip'))
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.released['2m']->released.fname.str.startswith('2m')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.released['date']->pandas.to_datetime(released['fname'].apply(lambda x: remove_prefix(remove_prefix(x, '2m-'), '-')))
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.released['base_ext']->released.url_base.apply(lambda x: Path(x).name)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.reg_df['base_ext']->reg_df.set_index('id').set_index('id').url_model.apply(lambda x: Path(x).name)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.metadata_new->metadata_new.drop(DROP_COLS_BOTH, 1).drop(DROP_COLS_BOTH, 1)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.metadata_new['src_alpha2']->metadata_new.drop(DROP_COLS_BOTH, 1).drop(DROP_COLS_BOTH, 1).short_pair.apply(lambda x: x.split('-')[0])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.metadata_new['tgt_alpha2']->metadata_new.drop(DROP_COLS_BOTH, 1).drop(DROP_COLS_BOTH, 1).short_pair.apply(lambda x: x.split('-')[1])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.metadata_new['prefer_old']->metadata_new.drop(DROP_COLS_BOTH, 1).drop(DROP_COLS_BOTH, 1).long_pair.isin([])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.self.metadata->self.metadata.set_index('short_pair')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.mapper->pandas.read_csv(LANG_CODE_PATH)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.self.iso_table->pandas.read_csv(ISO_PATH, sep='\t').rename(columns=lambda x: x.lower())
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.more_3_to_2->self.iso_table.set_index('id').part1.dropna().to_dict()
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.self.model_card_dir->Path(save_dir)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.converted_paths->convert_all_sentencepiece_models(entries_to_convert, dest_dir=self.model_card_dir)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.long_pair->remove_prefix(path.name, 'opus-mt-').split('-')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.new_p_src->self.get_two_letter_code(long_pair[0])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.new_p_tgt->self.get_two_letter_code(long_pair[1])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.new_path->path.parent.joinpath(hf_model_id)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.group->self.expand_group_to_two_letter_codes(code)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.(src, tgt)->remove_prefix(hf_model_id, 'opus-mt-').split('-')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.(src_tags, src_multilingual)->self.get_tags(src, r.src_name)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.(tgt_tags, tgt_multilingual)->self.get_tags(tgt, r.tgt_name)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.short_pair->remove_prefix(hf_model_id, 'opus-mt-')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.extra_metadata->self.metadata.loc[short_pair].drop('2m')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.(lang_tags, src_multilingual, tgt_multilingual)->self.resolve_lang_code(extra_metadata)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.opus_readme_path->Path(repo_root).joinpath('models', opus_name, 'README.md')
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.lang_tags->l2front_matter(lang_tags)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.content->'*'.join(splat)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.items->'\n\n'.join([f'- {k}: {v}' for (k, v) in metadata.items()])
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.lns->list(open(p / 'README.md').readlines())
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.results[p.name]->_parse_readme(lns)
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.marian.convert_marian_tatoeba_to_pytorch.resolver->TatoebaConverter(save_dir=args.save_dir)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter(self,save_dir='marian_converted')
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.__init__(self,save_dir='marian_converted')
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.convert_models(self,tatoeba_ids,dry_run=False)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.download_metadata(self)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.expand_group_to_two_letter_codes(self,grp_name)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.get_tags(self,code,ref_name)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.get_two_letter_code(self,three_letter_code)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.make_tatoeba_registry(repo_path=DEFAULT_MODEL_DIR)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.resolve_lang_code(self,r)->Tuple[List[str], str, str]
transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter.write_model_card(self,hf_model_id:str,repo_root=DEFAULT_REPO,dry_run=False)->str
transformers.models.marian.convert_marian_tatoeba_to_pytorch.dedup(lst)
transformers.models.marian.convert_marian_tatoeba_to_pytorch.l2front_matter(langs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/configuration_marian.py----------------------------------------
transformers.MarianConfig(BartConfig)
transformers.models.marian.configuration_marian.MarianConfig(BartConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/marian/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/convert_pegasus_tf_to_pytorch.py----------------------------------------
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.k->k.replace(pegasus_name, hf_name).replace(pegasus_name, hf_name)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.cfg_kwargs->transformers.models.pegasus.configuration_pegasus.DEFAULTS.copy()
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.cfg->PegasusConfig(**cfg_kwargs)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.torch_model->convert_pegasus(tf_weights, cfg_updates)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.sd->convert_pegasus(tf_weights, cfg_updates).state_dict()
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.new_k->rename_state_dict_key(k)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.mapping[new_k]->torch.tensor(v, dtype=sd[new_k].dtype)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.mapping['shared.weight'][cfg.pad_token_id]->torch.zeros_like(mapping['shared.weight'][cfg.pad_token_id + 1])
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.(missing, extra)->convert_pegasus(tf_weights, cfg_updates).model.load_state_dict(mapping, strict=False)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.init_vars->tensorflow.train.list_variables(path)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.skip_key->any([pat in name for pat in ignore_name])
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.array->tensorflow.train.load_variable(path, name)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.tok->transformers.PegasusTokenizer.from_pretrained('sshleifer/pegasus', model_max_length=desired_max_model_length)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.tf_weights->get_tf_weights_as_numpy(ckpt_path)
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.pegasus.convert_pegasus_tf_to_pytorch.args.save_dir->os.path.join('pegasus', dataset)
transformers.models.pegasus.convert_pegasus_tf_to_pytorch.convert_pegasus(tf_weights:dict,cfg_updates:dict)->PegasusForConditionalGeneration
transformers.models.pegasus.convert_pegasus_tf_to_pytorch.convert_pegasus_ckpt_to_pytorch(ckpt_path:str,save_dir:str)
transformers.models.pegasus.convert_pegasus_tf_to_pytorch.get_tf_weights_as_numpy(path='./ckpt/aeslc/model.ckpt-32000')->Dict
transformers.models.pegasus.convert_pegasus_tf_to_pytorch.rename_state_dict_key(k)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/configuration_pegasus.py----------------------------------------
A:transformers.models.pegasus.configuration_pegasus.logger->utils.logging.get_logger(__name__)
A:transformers.models.pegasus.configuration_pegasus.DEFAULTS->dict(vocab_size=96103, max_position_embeddings=512, d_model=1024, encoder_ffn_dim=4096, decoder_ffn_dim=4096, encoder_attention_heads=16, decoder_attention_heads=16, encoder_layers=16, decoder_layers=16, dropout=0.1, attention_dropout=0.1, activation_dropout=0.1, pad_token_id=0, eos_token_id=1, is_encoder_decoder=True, normalize_before=True, scale_embedding=True, normalize_embedding=False, add_final_layer_norm=True, static_position_embeddings=True, num_beams=8, activation_function='relu')
transformers.PegasusConfig(BartConfig)
transformers.models.pegasus.configuration_pegasus.PegasusConfig(BartConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/modeling_pegasus.py----------------------------------------
transformers.PegasusForConditionalGeneration(BartForConditionalGeneration)
transformers.models.pegasus.modeling_pegasus.PegasusForConditionalGeneration(BartForConditionalGeneration)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/tokenization_pegasus_fast.py----------------------------------------
A:transformers.models.pegasus.tokenization_pegasus_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.pegasus.tokenization_pegasus_fast.all_special_ids->set(self.all_special_ids)
A:transformers.models.pegasus.tokenization_pegasus_fast.tokenizer_kwargs->dict(add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, truncation=truncation, padding=padding)
A:transformers.models.pegasus.tokenization_pegasus_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.PegasusTokenizerFast(self,vocab_file,tokenizer_file=None,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.PegasusTokenizerFast._special_token_mask(self,seq)
transformers.PegasusTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.PegasusTokenizerFast.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.PegasusTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:str=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.PegasusTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast(self,vocab_file,tokenizer_file=None,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast._special_token_mask(self,seq)
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:str=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.models.pegasus.tokenization_pegasus_fast.PegasusTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/modeling_tf_pegasus.py----------------------------------------
A:transformers.models.pegasus.modeling_tf_pegasus.START_DOCSTRING->bart.modeling_tf_bart.BART_START_DOCSTRING.replace('inherits from :class:`~transformers.TFPreTrainedModel`', 'inherits from :class:`~transformers.TFBartForConditionalGeneration`').replace('BartConfig', _CONFIG_FOR_DOC)
A:transformers.models.pegasus.modeling_tf_pegasus.logger->utils.logging.get_logger(__name__)
transformers.TFPegasusForConditionalGeneration(TFBartForConditionalGeneration)
transformers.models.pegasus.modeling_tf_pegasus.TFPegasusForConditionalGeneration(TFBartForConditionalGeneration)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/pegasus/tokenization_pegasus.py----------------------------------------
A:transformers.models.pegasus.tokenization_pegasus.logger->utils.logging.get_logger(__name__)
A:transformers.models.pegasus.tokenization_pegasus.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.pegasus.tokenization_pegasus.state->self.__dict__.copy()
A:transformers.models.pegasus.tokenization_pegasus.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.pegasus.tokenization_pegasus.sp_id->self.sp_model.piece_to_id(token)
A:transformers.models.pegasus.tokenization_pegasus.token->self.sp_model.IdToPiece(index - self.offset)
A:transformers.models.pegasus.tokenization_pegasus.out_string->self.sp_model.decode_pieces(tokens)
A:transformers.models.pegasus.tokenization_pegasus.all_special_ids->set(self.all_special_ids)
A:transformers.models.pegasus.tokenization_pegasus.tokenizer_kwargs->dict(add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, truncation=truncation, padding=padding)
A:transformers.models.pegasus.tokenization_pegasus.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.PegasusTokenizer(self,vocab_file,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.PegasusTokenizer.__getstate__(self)
transformers.PegasusTokenizer.__setstate__(self,d)
transformers.PegasusTokenizer._convert_id_to_token(self,index:int)->str
transformers.PegasusTokenizer._convert_token_to_id(self,token:str)->int
transformers.PegasusTokenizer._special_token_mask(self,seq)
transformers.PegasusTokenizer._tokenize(self,text,sample=False)
transformers.PegasusTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.PegasusTokenizer.convert_tokens_to_string(self,tokens)
transformers.PegasusTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.PegasusTokenizer.get_vocab(self)->Dict[str, int]
transformers.PegasusTokenizer.num_special_tokens_to_add(self,pair=False)
transformers.PegasusTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:str=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.PegasusTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PegasusTokenizer.vocab_size(self)->int
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer(self,vocab_file,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.__getstate__(self)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.__init__(self,vocab_file,pad_token='<pad>',eos_token='</s>',unk_token='<unk>',mask_token='<mask_2>',mask_token_sent='<mask_1>',additional_special_tokens=None,**kwargs)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.__setstate__(self,d)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer._convert_id_to_token(self,index:int)->str
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer._convert_token_to_id(self,token:str)->int
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer._special_token_mask(self,seq)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer._tokenize(self,text,sample=False)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.build_inputs_with_special_tokens(self,token_ids_0,token_ids_1=None)->List[int]
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.get_special_tokens_mask(self,token_ids_0:List,token_ids_1:Optional[List]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.get_vocab(self)->Dict[str, int]
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.num_special_tokens_to_add(self,pair=False)
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:str=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.pegasus.tokenization_pegasus.PegasusTokenizer.vocab_size(self)->int


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/barthez/tokenization_barthez.py----------------------------------------
A:transformers.models.barthez.tokenization_barthez.logger->utils.logging.get_logger(__name__)
A:transformers.models.barthez.tokenization_barthez.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.barthez.tokenization_barthez.spm_id->self.sp_model.PieceToId(token)
A:transformers.models.barthez.tokenization_barthez.state->self.__dict__.copy()
A:transformers.models.barthez.tokenization_barthez.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.barthez.tokenization_barthez.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.BarthezTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.BarthezTokenizer.__getstate__(self)
transformers.BarthezTokenizer.__setstate__(self,d)
transformers.BarthezTokenizer._convert_id_to_token(self,index)
transformers.BarthezTokenizer._convert_token_to_id(self,token)
transformers.BarthezTokenizer._tokenize(self,text)
transformers.BarthezTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BarthezTokenizer.convert_tokens_to_string(self,tokens)
transformers.BarthezTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BarthezTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.BarthezTokenizer.get_vocab(self)
transformers.BarthezTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.BarthezTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.BarthezTokenizer.vocab_size(self)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.__getstate__(self)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.__init__(self,vocab_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.__setstate__(self,d)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer._convert_id_to_token(self,index)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer._convert_token_to_id(self,token)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer._tokenize(self,text)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.get_vocab(self)
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.barthez.tokenization_barthez.BarthezTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/barthez/tokenization_barthez_fast.py----------------------------------------
A:transformers.models.barthez.tokenization_barthez_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.barthez.tokenization_barthez_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.BarthezTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.BarthezTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BarthezTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.BarthezTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.BarthezTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.BarthezTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str='None',truncation=True,**kwargs)->BatchEncoding
transformers.models.barthez.tokenization_barthez_fast.BarthezTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/barthez/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dialogpt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/dialogpt/convert_dialogpt_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.d->torch.load(checkpoint_path)
A:transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.d[NEW_KEY]->torch.load(checkpoint_path).pop(OLD_KEY)
A:transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.checkpoint_path->os.path.join(args.dialogpt_path, f'{MODEL}_ft.pkl')
transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.convert_dialogpt_checkpoint(checkpoint_path:str,pytorch_dump_folder_path:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_japanese/tokenization_bert_japanese.py----------------------------------------
A:transformers.models.bert_japanese.tokenization_bert_japanese.logger->utils.logging.get_logger(__name__)
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.vocab->load_vocab(vocab_file)
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.ids_to_tokens->collections.OrderedDict([(ids, tok) for (tok, ids) in self.vocab.items()])
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.mecab_kwargs->copy.deepcopy(mecab_kwargs)
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.word_tokenizer->MecabTokenizer(do_lower_case=self.do_lower_case, never_split=self.never_split, **self.mecab_kwargs or {})
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.subword_tokenizer->CharacterTokenizer(vocab=self.vocab, unk_token=self.unk_token)
A:transformers.models.bert_japanese.tokenization_bert_japanese.state->dict(self.__dict__)
A:transformers.models.bert_japanese.tokenization_bert_japanese.tokens->self.word_tokenizer.tokenize(text, never_split=self.all_special_tokens)
A:transformers.models.bert_japanese.tokenization_bert_japanese.mecabrc->os.path.join(dic_dir, 'mecabrc')
A:transformers.models.bert_japanese.tokenization_bert_japanese.self.mecab->fugashi.GenericTagger(mecab_option)
A:transformers.models.bert_japanese.tokenization_bert_japanese.text->unicodedata.normalize('NFKC', text)
A:transformers.models.bert_japanese.tokenization_bert_japanese.token->token.lower().lower()
transformers.BertJapaneseTokenizer(self,vocab_file,do_lower_case=False,do_word_tokenize=True,do_subword_tokenize=True,word_tokenizer_type='basic',subword_tokenizer_type='wordpiece',never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',mecab_kwargs=None,**kwargs)
transformers.BertJapaneseTokenizer.__getstate__(self)
transformers.BertJapaneseTokenizer.__setstate__(self,state)
transformers.BertJapaneseTokenizer._tokenize(self,text)
transformers.BertJapaneseTokenizer.do_lower_case(self)
transformers.CharacterTokenizer(self,vocab,unk_token,normalize_text=True)
transformers.CharacterTokenizer.tokenize(self,text)
transformers.MecabTokenizer(self,do_lower_case=False,never_split=None,normalize_text=True,mecab_dic:Optional[str]='ipadic',mecab_option:Optional[str]=None)
transformers.MecabTokenizer.tokenize(self,text,never_split=None,**kwargs)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer(self,vocab_file,do_lower_case=False,do_word_tokenize=True,do_subword_tokenize=True,word_tokenizer_type='basic',subword_tokenizer_type='wordpiece',never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',mecab_kwargs=None,**kwargs)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer.__getstate__(self)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer.__init__(self,vocab_file,do_lower_case=False,do_word_tokenize=True,do_subword_tokenize=True,word_tokenizer_type='basic',subword_tokenizer_type='wordpiece',never_split=None,unk_token='[UNK]',sep_token='[SEP]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',mecab_kwargs=None,**kwargs)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer.__setstate__(self,state)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer._tokenize(self,text)
transformers.models.bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer.do_lower_case(self)
transformers.models.bert_japanese.tokenization_bert_japanese.CharacterTokenizer(self,vocab,unk_token,normalize_text=True)
transformers.models.bert_japanese.tokenization_bert_japanese.CharacterTokenizer.__init__(self,vocab,unk_token,normalize_text=True)
transformers.models.bert_japanese.tokenization_bert_japanese.CharacterTokenizer.tokenize(self,text)
transformers.models.bert_japanese.tokenization_bert_japanese.MecabTokenizer(self,do_lower_case=False,never_split=None,normalize_text=True,mecab_dic:Optional[str]='ipadic',mecab_option:Optional[str]=None)
transformers.models.bert_japanese.tokenization_bert_japanese.MecabTokenizer.__init__(self,do_lower_case=False,never_split=None,normalize_text=True,mecab_dic:Optional[str]='ipadic',mecab_option:Optional[str]=None)
transformers.models.bert_japanese.tokenization_bert_japanese.MecabTokenizer.tokenize(self,text,never_split=None,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bert_japanese/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/tokenization_lxmert.py----------------------------------------
transformers.LxmertTokenizer(BertTokenizer)
transformers.models.lxmert.tokenization_lxmert.LxmertTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/modeling_tf_lxmert.py----------------------------------------
A:transformers.models.lxmert.modeling_tf_lxmert.logger->utils.logging.get_logger(__name__)
A:transformers.models.lxmert.modeling_tf_lxmert.self.visn_fc->TFLxmertVisualFeatureEncoder(config, name='visn_fc')
A:transformers.models.lxmert.modeling_tf_lxmert.self.visn_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='visn_layer_norm')
A:transformers.models.lxmert.modeling_tf_lxmert.self.box_fc->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), name='box_fc')
A:transformers.models.lxmert.modeling_tf_lxmert.self.box_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='box_layer_norm')
A:transformers.models.lxmert.modeling_tf_lxmert.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.lxmert.modeling_tf_lxmert.x->tensorflow.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))
A:transformers.models.lxmert.modeling_tf_lxmert.y->self.box_layer_norm(y)
A:transformers.models.lxmert.modeling_tf_lxmert.output->self.att(input_tensor, ctx_tensor, ctx_att_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.lxmert.modeling_tf_lxmert.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.lxmert.modeling_tf_lxmert.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.lxmert.modeling_tf_lxmert.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.lxmert.modeling_tf_lxmert.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.lxmert.modeling_tf_lxmert.token_type_ids->tensorflow.fill(input_shape, 0)
A:transformers.models.lxmert.modeling_tf_lxmert.inputs_embeds->tensorflow.gather(self.word_embeddings, input_ids)
A:transformers.models.lxmert.modeling_tf_lxmert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.lxmert.modeling_tf_lxmert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.lxmert.modeling_tf_lxmert.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.logits->tensorflow.matmul(x, self.word_embeddings, transpose_b=True)
A:transformers.models.lxmert.modeling_tf_lxmert.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.lxmert.modeling_tf_lxmert.self.query->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.lxmert.modeling_tf_lxmert.self.key->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.lxmert.modeling_tf_lxmert.self.value->tensorflow.keras.layers.Dense(self.all_head_size, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.lxmert.modeling_tf_lxmert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.lxmert.modeling_tf_lxmert.mixed_key_layer->self.key(context)
A:transformers.models.lxmert.modeling_tf_lxmert.mixed_value_layer->self.value(context)
A:transformers.models.lxmert.modeling_tf_lxmert.query_layer->self.transpose_for_scores(mixed_query_layer, batch_size)
A:transformers.models.lxmert.modeling_tf_lxmert.key_layer->self.transpose_for_scores(mixed_key_layer, batch_size)
A:transformers.models.lxmert.modeling_tf_lxmert.value_layer->self.transpose_for_scores(mixed_value_layer, batch_size)
A:transformers.models.lxmert.modeling_tf_lxmert.attention_scores->tensorflow.matmul(query_layer, key_layer, transpose_b=True)
A:transformers.models.lxmert.modeling_tf_lxmert.dk->tensorflow.cast(shape_list(key_layer)[-1], tf.float32)
A:transformers.models.lxmert.modeling_tf_lxmert.attention_probs->self.dropout(attention_probs, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.context_layer->tensorflow.reshape(context_layer, (batch_size, -1, self.all_head_size))
A:transformers.models.lxmert.modeling_tf_lxmert.self.dense->tensorflow.keras.layers.Dense(hid_dim * 2, kernel_initializer=get_initializer(config.initializer_range), name='logit_fc_._0')
A:transformers.models.lxmert.modeling_tf_lxmert.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.lxmert.modeling_tf_lxmert.hidden_states->self.transform(hidden_states)
A:transformers.models.lxmert.modeling_tf_lxmert.self.self->TFLxmertAttention(config, name='self')
A:transformers.models.lxmert.modeling_tf_lxmert.self.attention_output->TFLxmertAttentionOutput(config, name='output')
A:transformers.models.lxmert.modeling_tf_lxmert.self_output->self.self(input_tensor, input_tensor, attention_mask, output_attentions)
A:transformers.models.lxmert.modeling_tf_lxmert.attention_output->self.attention_output(output[0], input_tensor, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.self.att->TFLxmertAttention(config, name='att')
A:transformers.models.lxmert.modeling_tf_lxmert.self.attention->TFLxmertSelfAttentionLayer(config, name='attention')
A:transformers.models.lxmert.modeling_tf_lxmert.self.intermediate->TFLxmertIntermediate(config, name='intermediate')
A:transformers.models.lxmert.modeling_tf_lxmert.self.transformer_output->TFLxmertOutput(config, name='output')
A:transformers.models.lxmert.modeling_tf_lxmert.attention_outputs->self.attention(hidden_states, attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.lxmert.modeling_tf_lxmert.layer_output->self.transformer_output(intermediate_output, attention_output, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.self.visual_attention->TFLxmertCrossAttentionLayer(config, name='visual_attention')
A:transformers.models.lxmert.modeling_tf_lxmert.self.lang_self_att->TFLxmertSelfAttentionLayer(config, name='lang_self_att')
A:transformers.models.lxmert.modeling_tf_lxmert.self.visn_self_att->TFLxmertSelfAttentionLayer(config, name='visn_self_att')
A:transformers.models.lxmert.modeling_tf_lxmert.self.lang_inter->TFLxmertIntermediate(config, name='lang_inter')
A:transformers.models.lxmert.modeling_tf_lxmert.self.lang_output->TFLxmertOutput(config, name='lang_output')
A:transformers.models.lxmert.modeling_tf_lxmert.self.visn_inter->TFLxmertIntermediate(config, name='visn_inter')
A:transformers.models.lxmert.modeling_tf_lxmert.self.visn_output->TFLxmertOutput(config, name='visn_output')
A:transformers.models.lxmert.modeling_tf_lxmert.lang_attention_lang_input->tensorflow.identity(lang_input)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_attention_lang_input->tensorflow.identity(lang_input)
A:transformers.models.lxmert.modeling_tf_lxmert.lang_attention_visn_input->tensorflow.identity(visn_input)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_attention_visn_input->tensorflow.identity(visn_input)
A:transformers.models.lxmert.modeling_tf_lxmert.lang_att_output->self.lang_self_att(lang_input, lang_attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_att_output->self.visn_self_att(visn_input, visn_attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.lang_inter_output->self.lang_inter(lang_input)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_inter_output->self.visn_inter(visn_input)
A:transformers.models.lxmert.modeling_tf_lxmert.lang_output->self.lang_output(lang_inter_output, lang_input, training)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_output->self.visn_output(visn_inter_output, visn_input, training)
A:transformers.models.lxmert.modeling_tf_lxmert.(lang_att_output, visn_att_output)->self.self_att(lang_att_output[0], lang_attention_mask, visn_att_output[0], visn_attention_mask, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.(lang_output, visn_output)->self.output_fc(lang_att_output, visn_att_output, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.visual_feats->tensorflow.random.uniform((batch_size, num_visual_features, self.config.visual_feat_dim))
A:transformers.models.lxmert.modeling_tf_lxmert.l_outputs->layer_module(lang_feats, lang_attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.v_outputs->layer_module(visual_feats, visual_attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.x_outputs->layer_module(lang_feats, lang_attention_mask, visual_feats, visual_attention_mask, output_attentions, training=training)
A:transformers.models.lxmert.modeling_tf_lxmert.input_ids->tensorflow.constant([[3, 5, 6], [2, 3, 4]])
A:transformers.models.lxmert.modeling_tf_lxmert.visual_pos->tensorflow.random.uniform((batch_size, num_visual_features, 4))
A:transformers.models.lxmert.modeling_tf_lxmert.self.embeddings->TFLxmertEmbeddings(config, name='embeddings')
A:transformers.models.lxmert.modeling_tf_lxmert.self.encoder->TFLxmertEncoder(config, name='encoder')
A:transformers.models.lxmert.modeling_tf_lxmert.self.pooler->TFLxmertPooler(config, name='pooler')
A:transformers.models.lxmert.modeling_tf_lxmert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, visual_feats=visual_feats, visual_pos=visual_pos, attention_mask=attention_mask, visual_attention_mask=visual_attention_mask, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds, masked_lm_labels=masked_lm_labels, obj_labels=obj_labels, matched_label=matched_label, ans=ans, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, training=training, kwargs_call=kwargs)
A:transformers.models.lxmert.modeling_tf_lxmert.inputs['attention_mask']->tensorflow.fill(input_shape, 1)
A:transformers.models.lxmert.modeling_tf_lxmert.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.lxmert.modeling_tf_lxmert.extended_attention_mask->tensorflow.cast(extended_attention_mask, tf.float32)
A:transformers.models.lxmert.modeling_tf_lxmert.extended_visual_attention_mask->tensorflow.cast(extended_visual_attention_mask, tf.float32)
A:transformers.models.lxmert.modeling_tf_lxmert.embedding_output->self.embeddings([inputs['input_ids'], inputs['token_type_ids'], inputs['inputs_embeds']], training=inputs['training'])
A:transformers.models.lxmert.modeling_tf_lxmert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, inputs['visual_feats'], inputs['visual_pos'], extended_visual_attention_mask, output_attentions=inputs['output_attentions'], training=inputs['training'])
A:transformers.models.lxmert.modeling_tf_lxmert.pooled_output->self.dense(first_token_tensor)
A:transformers.models.lxmert.modeling_tf_lxmert.self.lxmert->TFLxmertMainLayer(config, name='lxmert')
A:transformers.models.lxmert.modeling_tf_lxmert.outputs->self.lxmert(input_ids=inputs['input_ids'], visual_feats=inputs['visual_feats'], visual_pos=inputs['visual_pos'], attention_mask=inputs['attention_mask'], visual_attention_mask=inputs['visual_attention_mask'], token_type_ids=inputs['token_type_ids'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.lxmert.modeling_tf_lxmert.self.transform_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.lxmert.modeling_tf_lxmert.self.transform->TFLxmertPredictionHeadTransform(config, name='transform')
A:transformers.models.lxmert.modeling_tf_lxmert.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.lxmert.modeling_tf_lxmert.self.predictions->TFLxmertLMPredictionHead(config, input_embeddings, name='predictions')
A:transformers.models.lxmert.modeling_tf_lxmert.prediction_scores->self.predictions(sequence_output)
A:transformers.models.lxmert.modeling_tf_lxmert.self.seq_relationship->tensorflow.keras.layers.Dense(2, kernel_initializer=get_initializer(config.initializer_range), name='seq_relationship')
A:transformers.models.lxmert.modeling_tf_lxmert.seq_relationship_score->self.seq_relationship(pooled_output)
A:transformers.models.lxmert.modeling_tf_lxmert.self.activation->get_tf_activation('gelu')
A:transformers.models.lxmert.modeling_tf_lxmert.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='logit_fc_._2')
A:transformers.models.lxmert.modeling_tf_lxmert.self.dense_1->tensorflow.keras.layers.Dense(num_labels, kernel_initializer=get_initializer(config.initializer_range), name='logit_fc_._3')
A:transformers.models.lxmert.modeling_tf_lxmert.output[key]->self.decoder_dict[key](hidden_states)
A:transformers.models.lxmert.modeling_tf_lxmert.self.cls->TFLxmertPreTrainingHeads(config, self.lxmert.embeddings, name='cls')
A:transformers.models.lxmert.modeling_tf_lxmert.self.obj_predict_head->TFLxmertVisualObjHead(config, name='obj_predict_head')
A:transformers.models.lxmert.modeling_tf_lxmert.self.answer_head->TFLxmertVisualAnswerHead(config, self.num_qa_labels, name='answer_head')
A:transformers.models.lxmert.modeling_tf_lxmert.lxmert_output->self.lxmert(input_ids=inputs['input_ids'], visual_feats=inputs['visual_feats'], visual_pos=inputs['visual_pos'], attention_mask=inputs['attention_mask'], visual_attention_mask=inputs['visual_attention_mask'], token_type_ids=inputs['token_type_ids'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.lxmert.modeling_tf_lxmert.(lang_prediction_scores, cross_relationship_score)->self.cls(lang_output, pooled_output)
A:transformers.models.lxmert.modeling_tf_lxmert.answer_score->self.answer_head(pooled_output)
A:transformers.models.lxmert.modeling_tf_lxmert.masked_lm_loss->self.loss_fcts['ce'](tf.reshape(inputs['masked_lm_labels'], [-1]), tf.reshape(lang_prediction_scores, [-1, self.config.vocab_size]))
A:transformers.models.lxmert.modeling_tf_lxmert.matched_loss->self.loss_fcts['ce'](tf.reshape(inputs['matched_label'], [-1]), tf.reshape(cross_relationship_score, [-1, 2]))
A:transformers.models.lxmert.modeling_tf_lxmert.visn_prediction_scores_dict->self.obj_predict_head(visual_output)
A:transformers.models.lxmert.modeling_tf_lxmert.visn_loss->tensorflow.reduce_mean(visn_loss)
A:transformers.models.lxmert.modeling_tf_lxmert.answer_loss->self.loss_fcts['ce'](tf.reshape(ans, [-1]), tf.reshape(answer_score, [-1, self.num_qa_labels]))
transformers.TFLxmertForPreTraining(self,config,*inputs,**kwargs)
transformers.TFLxmertForPreTraining.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,masked_lm_labels=None,obj_labels=None,matched_label=None,ans=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFLxmertForPreTraining.dummy_inputs(self)
transformers.TFLxmertForPreTraining.get_output_embeddings(self)
transformers.TFLxmertForPreTraining.get_output_layer_with_bias(self)
transformers.TFLxmertForPreTraining.get_prefix_bias_name(self)
transformers.TFLxmertForPreTrainingOutput(ModelOutput)
transformers.TFLxmertMainLayer(self,config,**kwargs)
transformers.TFLxmertMainLayer._prune_heads(self,heads_to_prune)
transformers.TFLxmertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFLxmertMainLayer.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFLxmertMainLayer.dummy_inputs(self)
transformers.TFLxmertMainLayer.get_input_embeddings(self)
transformers.TFLxmertMainLayer.set_input_embeddings(self,value)
transformers.TFLxmertModel(self,config,*inputs,**kwargs)
transformers.TFLxmertModel.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFLxmertModelOutput(ModelOutput)
transformers.TFLxmertPreTrainedModel(TFPreTrainedModel)
transformers.TFLxmertPreTrainedModel.dummy_inputs(self)->Dict[str, tf.Tensor]
transformers.TFLxmertVisualFeatureEncoder(self,config,**kwargs)
transformers.TFLxmertVisualFeatureEncoder.call(self,visn_input,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttention(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttention.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttention.call(self,hidden_states,context,attention_mask,output_attentions,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttention.transpose_for_scores(self,x,batch_size)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttentionOutput(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttentionOutput.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttentionOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertCrossAttentionLayer(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertCrossAttentionLayer.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertCrossAttentionLayer.call(self,input_tensor,ctx_tensor,ctx_att_mask,output_attentions=False,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings._embedding(self,inputs,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings._linear(self,inputs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings.build(self,input_shape)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings.call(self,inputs,mode='embedding',training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEncoder(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEncoder.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEncoder.call(self,lang_feats=None,lang_attention_mask=None,visual_feats=None,visual_pos=None,visual_attention_mask=None,output_attentions=None,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining(self,config,*inputs,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.__init__(self,config,*inputs,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,masked_lm_labels=None,obj_labels=None,matched_label=None,ans=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.dummy_inputs(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.get_output_embeddings(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.get_output_layer_with_bias(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTraining.get_prefix_bias_name(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput(ModelOutput)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertIntermediate(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertIntermediate.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertIntermediate.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLMPredictionHead(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLMPredictionHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLMPredictionHead.build(self,input_shape)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLMPredictionHead.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLayer(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLayer.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLayer.call(self,hidden_states,attention_mask,output_attentions,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMLMHead(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMLMHead.call(self,sequence_output)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer._prune_heads(self,heads_to_prune)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer.dummy_inputs(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer.get_input_embeddings(self)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer.set_input_embeddings(self,value)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModel(self,config,*inputs,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModel.call(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput(ModelOutput)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertOutput(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertOutput.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPooler(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPooler.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPooler.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainedModel(TFPreTrainedModel)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainedModel.dummy_inputs(self)->Dict[str, tf.Tensor]
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainingHeads(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainingHeads.__init__(self,config,input_embeddings,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainingHeads.call(self,sequence_output,pooled_output)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPredictionHeadTransform(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPredictionHeadTransform.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPredictionHeadTransform.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertSelfAttentionLayer(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertSelfAttentionLayer.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertSelfAttentionLayer.call(self,input_tensor,attention_mask,output_attentions,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualAnswerHead(self,config,num_labels,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualAnswerHead.__init__(self,config,num_labels,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualAnswerHead.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualFeatureEncoder(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualFeatureEncoder.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualFeatureEncoder.call(self,visn_input,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualObjHead(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualObjHead.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualObjHead.call(self,hidden_states)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer.__init__(self,config,**kwargs)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer.call(self,lang_feats,lang_attention_mask,visn_feats,visn_attention_mask,output_attentions,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer.cross_att(self,lang_input,lang_attention_mask,visn_input,visn_attention_mask,output_attentions,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer.output_fc(self,lang_input,visn_input,training=False)
transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer.self_att(self,lang_input,lang_attention_mask,visn_input,visn_attention_mask,training=False)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/convert_lxmert_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.config->transformers.LxmertConfig.from_json_file(config_file)
A:transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.model->LxmertForPreTraining(config)
A:transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch(tf_checkpoint_path,config_file,pytorch_dump_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/tokenization_lxmert_fast.py----------------------------------------
transformers.LxmertTokenizerFast(BertTokenizerFast)
transformers.models.lxmert.tokenization_lxmert_fast.LxmertTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/modeling_lxmert.py----------------------------------------
A:transformers.models.lxmert.modeling_lxmert.logger->utils.logging.get_logger(__name__)
A:transformers.models.lxmert.modeling_lxmert.tf_path->os.path.abspath(tf_checkpoint_path)
A:transformers.models.lxmert.modeling_lxmert.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.lxmert.modeling_lxmert.array->numpy.transpose(array)
A:transformers.models.lxmert.modeling_lxmert.name->name.split('/').split('/')
A:transformers.models.lxmert.modeling_lxmert.scope_names->re.split('_(\\d+)', m_name)
A:transformers.models.lxmert.modeling_lxmert.pointer->getattr(pointer, 'weight')
A:transformers.models.lxmert.modeling_lxmert.num->int(scope_names[1])
A:transformers.models.lxmert.modeling_lxmert.pointer.data->torch.from_numpy(array)
A:transformers.models.lxmert.modeling_lxmert.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=0)
A:transformers.models.lxmert.modeling_lxmert.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size, padding_idx=0)
A:transformers.models.lxmert.modeling_lxmert.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size, padding_idx=0)
A:transformers.models.lxmert.modeling_lxmert.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=1e-12)
A:transformers.models.lxmert.modeling_lxmert.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.lxmert.modeling_lxmert.input_shape->input_ids.size()
A:transformers.models.lxmert.modeling_lxmert.position_ids->position_ids.unsqueeze(0).expand(input_shape).unsqueeze(0).expand(input_shape)
A:transformers.models.lxmert.modeling_lxmert.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.lxmert.modeling_lxmert.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.lxmert.modeling_lxmert.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.lxmert.modeling_lxmert.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.lxmert.modeling_lxmert.embeddings->self.dropout(embeddings)
A:transformers.models.lxmert.modeling_lxmert.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.lxmert.modeling_lxmert.self.query->torch.nn.Linear(config.hidden_size, self.head_size)
A:transformers.models.lxmert.modeling_lxmert.self.key->torch.nn.Linear(ctx_dim, self.head_size)
A:transformers.models.lxmert.modeling_lxmert.self.value->torch.nn.Linear(ctx_dim, self.head_size)
A:transformers.models.lxmert.modeling_lxmert.x->self.visn_layer_norm(x)
A:transformers.models.lxmert.modeling_lxmert.mixed_query_layer->self.query(hidden_states)
A:transformers.models.lxmert.modeling_lxmert.mixed_key_layer->self.key(context)
A:transformers.models.lxmert.modeling_lxmert.mixed_value_layer->self.value(context)
A:transformers.models.lxmert.modeling_lxmert.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.lxmert.modeling_lxmert.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.lxmert.modeling_lxmert.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.lxmert.modeling_lxmert.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.lxmert.modeling_lxmert.attention_probs->self.dropout(attention_probs)
A:transformers.models.lxmert.modeling_lxmert.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.lxmert.modeling_lxmert.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.lxmert.modeling_lxmert.hidden_states->self.transform(hidden_states)
A:transformers.models.lxmert.modeling_lxmert.self.att->LxmertAttention(config)
A:transformers.models.lxmert.modeling_lxmert.self.output->LxmertOutput(config)
A:transformers.models.lxmert.modeling_lxmert.output->self.dropout(output)
A:transformers.models.lxmert.modeling_lxmert.attention_output->self.output(output[0], input_tensor)
A:transformers.models.lxmert.modeling_lxmert.self.self->LxmertAttention(config)
A:transformers.models.lxmert.modeling_lxmert.self.attention->LxmertSelfAttentionLayer(config)
A:transformers.models.lxmert.modeling_lxmert.self.intermediate->LxmertIntermediate(config)
A:transformers.models.lxmert.modeling_lxmert.outputs->self.attention(hidden_states, attention_mask, output_attentions=output_attentions)
A:transformers.models.lxmert.modeling_lxmert.intermediate_output->self.intermediate(attention_output)
A:transformers.models.lxmert.modeling_lxmert.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.lxmert.modeling_lxmert.self.visual_attention->LxmertCrossAttentionLayer(config)
A:transformers.models.lxmert.modeling_lxmert.self.lang_self_att->LxmertSelfAttentionLayer(config)
A:transformers.models.lxmert.modeling_lxmert.self.visn_self_att->LxmertSelfAttentionLayer(config)
A:transformers.models.lxmert.modeling_lxmert.self.lang_inter->LxmertIntermediate(config)
A:transformers.models.lxmert.modeling_lxmert.self.lang_output->LxmertOutput(config)
A:transformers.models.lxmert.modeling_lxmert.self.visn_inter->LxmertIntermediate(config)
A:transformers.models.lxmert.modeling_lxmert.self.visn_output->LxmertOutput(config)
A:transformers.models.lxmert.modeling_lxmert.lang_att_output->self.lang_self_att(lang_input, lang_attention_mask, output_attentions=False)
A:transformers.models.lxmert.modeling_lxmert.visual_att_output->self.visn_self_att(visual_input, visual_attention_mask, output_attentions=False)
A:transformers.models.lxmert.modeling_lxmert.lang_inter_output->self.lang_inter(lang_input)
A:transformers.models.lxmert.modeling_lxmert.visual_inter_output->self.visn_inter(visual_input)
A:transformers.models.lxmert.modeling_lxmert.lang_output->self.lang_output(lang_inter_output, lang_input)
A:transformers.models.lxmert.modeling_lxmert.visual_output->self.visn_output(visual_inter_output, visual_input)
A:transformers.models.lxmert.modeling_lxmert.(lang_att_output, visual_att_output)->self.self_att(lang_att_output[0], lang_attention_mask, visual_att_output[0], visual_attention_mask)
A:transformers.models.lxmert.modeling_lxmert.(lang_output, visual_output)->self.output_fc(lang_att_output, visual_att_output)
A:transformers.models.lxmert.modeling_lxmert.self.visn_fc->LxmertVisualFeatureEncoder(config)
A:transformers.models.lxmert.modeling_lxmert.self.visn_layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=1e-12)
A:transformers.models.lxmert.modeling_lxmert.self.box_fc->torch.nn.Linear(pos_dim, config.hidden_size)
A:transformers.models.lxmert.modeling_lxmert.self.box_layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=1e-12)
A:transformers.models.lxmert.modeling_lxmert.y->self.box_layer_norm(y)
A:transformers.models.lxmert.modeling_lxmert.self.layer->torch.nn.ModuleList([LxmertLayer(config) for _ in range(self.num_l_layers)])
A:transformers.models.lxmert.modeling_lxmert.self.x_layers->torch.nn.ModuleList([LxmertXLayer(config) for _ in range(self.num_x_layers)])
A:transformers.models.lxmert.modeling_lxmert.self.r_layers->torch.nn.ModuleList([LxmertLayer(config) for _ in range(self.num_r_layers)])
A:transformers.models.lxmert.modeling_lxmert.visual_feats->self.visn_fc(visual_feats, visual_pos)
A:transformers.models.lxmert.modeling_lxmert.l_outputs->layer_module(lang_feats, lang_attention_mask, output_attentions=output_attentions)
A:transformers.models.lxmert.modeling_lxmert.v_outputs->layer_module(visual_feats, visual_attention_mask, output_attentions=output_attentions)
A:transformers.models.lxmert.modeling_lxmert.x_outputs->layer_module(lang_feats, lang_attention_mask, visual_feats, visual_attention_mask, output_attentions=output_attentions)
A:transformers.models.lxmert.modeling_lxmert.self.activation->torch.nn.Tanh()
A:transformers.models.lxmert.modeling_lxmert.pooled_output->self.pooler(lang_output)
A:transformers.models.lxmert.modeling_lxmert.self.transform->LxmertPredictionHeadTransform(config)
A:transformers.models.lxmert.modeling_lxmert.self.decoder->torch.nn.Linear(lxmert_model_embedding_weights.size(1), lxmert_model_embedding_weights.size(0), bias=False)
A:transformers.models.lxmert.modeling_lxmert.self.bias->torch.nn.Parameter(torch.zeros(lxmert_model_embedding_weights.size(0)))
A:transformers.models.lxmert.modeling_lxmert.self.logit_fc->torch.nn.Sequential(nn.Linear(hid_dim, hid_dim * 2), GeLU(), nn.LayerNorm(hid_dim * 2, eps=1e-12), nn.Linear(hid_dim * 2, num_labels))
A:transformers.models.lxmert.modeling_lxmert.self.decoder_dict->torch.nn.ModuleDict({key: nn.Linear(config.hidden_size, self.visual_losses[key]['num']) for key in self.visual_losses})
A:transformers.models.lxmert.modeling_lxmert.output[key]->self.decoder_dict[key](hidden_states)
A:transformers.models.lxmert.modeling_lxmert.self.predictions->LxmertLMPredictionHead(config, lxmert_model_embedding_weights)
A:transformers.models.lxmert.modeling_lxmert.self.seq_relationship->torch.nn.Linear(config.hidden_size, 2)
A:transformers.models.lxmert.modeling_lxmert.prediction_scores->self.predictions(sequence_output)
A:transformers.models.lxmert.modeling_lxmert.seq_relationship_score->self.seq_relationship(pooled_output)
A:transformers.models.lxmert.modeling_lxmert.self.embeddings->LxmertEmbeddings(config)
A:transformers.models.lxmert.modeling_lxmert.self.encoder->LxmertEncoder(config)
A:transformers.models.lxmert.modeling_lxmert.self.pooler->LxmertPooler(config)
A:transformers.models.lxmert.modeling_lxmert.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.lxmert.modeling_lxmert.extended_attention_mask->extended_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.models.lxmert.modeling_lxmert.extended_visual_attention_mask->extended_visual_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.models.lxmert.modeling_lxmert.embedding_output->self.embeddings(input_ids, token_type_ids, inputs_embeds)
A:transformers.models.lxmert.modeling_lxmert.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, visual_feats=visual_feats, visual_pos=visual_pos, visual_attention_mask=extended_visual_attention_mask, output_attentions=output_attentions)
A:transformers.models.lxmert.modeling_lxmert.self.lxmert->LxmertModel(config)
A:transformers.models.lxmert.modeling_lxmert.self.cls->LxmertPreTrainingHeads(config, self.lxmert.embeddings.word_embeddings.weight)
A:transformers.models.lxmert.modeling_lxmert.self.obj_predict_head->LxmertVisualObjHead(config)
A:transformers.models.lxmert.modeling_lxmert.self.answer_head->LxmertVisualAnswerHead(config, self.num_qa_labels)
A:transformers.models.lxmert.modeling_lxmert.cur_qa_logit_layer->self.get_qa_logit_layer()
A:transformers.models.lxmert.modeling_lxmert.new_qa_logit_layer->torch.nn.Linear(hidden_dim, num_labels, bias=False)
A:transformers.models.lxmert.modeling_lxmert.(cur_qa_labels, hidden_dim)->self.get_qa_logit_layer().weight.size()
A:transformers.models.lxmert.modeling_lxmert.num_labels_to_copy->min(cur_qa_labels, num_labels)
A:transformers.models.lxmert.modeling_lxmert.labels->kwargs.pop('masked_lm_labels')
A:transformers.models.lxmert.modeling_lxmert.lxmert_output->self.lxmert(input_ids=input_ids, visual_feats=visual_feats, visual_pos=visual_pos, token_type_ids=token_type_ids, attention_mask=attention_mask, visual_attention_mask=visual_attention_mask, inputs_embeds=inputs_embeds, output_hidden_states=output_hidden_states, output_attentions=output_attentions, return_dict=return_dict)
A:transformers.models.lxmert.modeling_lxmert.(lang_prediction_scores, cross_relationship_score)->self.cls(lang_output, pooled_output)
A:transformers.models.lxmert.modeling_lxmert.answer_score->self.answer_head(pooled_output)
A:transformers.models.lxmert.modeling_lxmert.masked_lm_loss->self.loss_fcts['ce'](lang_prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.lxmert.modeling_lxmert.matched_loss->self.loss_fcts['ce'](cross_relationship_score.view(-1, 2), matched_label.view(-1))
A:transformers.models.lxmert.modeling_lxmert.total_visual_loss->torch.tensor(0.0, device=input_ids.device)
A:transformers.models.lxmert.modeling_lxmert.visual_prediction_scores_dict->self.obj_predict_head(visual_output)
A:transformers.models.lxmert.modeling_lxmert.visual_loss->visual_loss.mean(1).mean(1)
A:transformers.models.lxmert.modeling_lxmert.answer_loss->self.loss_fcts['ce'](answer_score.view(-1, self.num_qa_labels), ans.view(-1))
A:transformers.models.lxmert.modeling_lxmert.self.loss->CrossEntropyLoss()
A:transformers.models.lxmert.modeling_lxmert.loss->self.loss(answer_score.view(-1, self.num_qa_labels), labels.view(-1))
transformers.LxmertEncoder(self,config)
transformers.LxmertEncoder.forward(self,lang_feats,lang_attention_mask,visual_feats,visual_pos,visual_attention_mask=None,output_attentions=None)
transformers.LxmertForPreTraining(self,config)
transformers.LxmertForPreTraining._get_resized_qa_labels(self,cur_qa_logit_layer,num_labels)
transformers.LxmertForPreTraining._resize_qa_labels(self,num_labels)
transformers.LxmertForPreTraining._set_qa_logit_layer(self,qa_logit_layer)
transformers.LxmertForPreTraining.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,obj_labels=None,matched_label=None,ans=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.LxmertForPreTraining.get_qa_logit_layer(self)->nn.Module
transformers.LxmertForPreTraining.resize_num_qa_labels(self,num_labels)
transformers.LxmertForPreTrainingOutput(ModelOutput)
transformers.LxmertForQuestionAnswering(self,config)
transformers.LxmertForQuestionAnswering._get_resized_qa_labels(self,cur_qa_logit_layer,num_labels)
transformers.LxmertForQuestionAnswering._resize_qa_labels(self,num_labels)
transformers.LxmertForQuestionAnswering._set_qa_logit_layer(self,qa_logit_layer)
transformers.LxmertForQuestionAnswering.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LxmertForQuestionAnswering.get_qa_logit_layer(self)->nn.Module
transformers.LxmertForQuestionAnswering.resize_num_qa_labels(self,num_labels)
transformers.LxmertForQuestionAnsweringOutput(ModelOutput)
transformers.LxmertModel(self,config)
transformers.LxmertModel.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LxmertModel.get_input_embeddings(self)
transformers.LxmertModel.set_input_embeddings(self,new_embeddings)
transformers.LxmertModelOutput(ModelOutput)
transformers.LxmertPreTrainedModel(PreTrainedModel)
transformers.LxmertPreTrainedModel._init_weights(self,module)
transformers.LxmertVisualFeatureEncoder(self,config)
transformers.LxmertVisualFeatureEncoder.forward(self,visual_feats,visual_pos)
transformers.LxmertXLayer(self,config)
transformers.LxmertXLayer.cross_att(self,lang_input,lang_attention_mask,visual_input,visual_attention_mask,output_x_attentions=False)
transformers.LxmertXLayer.forward(self,lang_feats,lang_attention_mask,visual_feats,visual_attention_mask,output_attentions=False)
transformers.LxmertXLayer.output_fc(self,lang_input,visual_input)
transformers.LxmertXLayer.self_att(self,lang_input,lang_attention_mask,visual_input,visual_attention_mask)
transformers.models.lxmert.modeling_lxmert.GeLU(self)
transformers.models.lxmert.modeling_lxmert.GeLU.__init__(self)
transformers.models.lxmert.modeling_lxmert.GeLU.forward(self,x)
transformers.models.lxmert.modeling_lxmert.LxmertAttention(self,config,ctx_dim=None)
transformers.models.lxmert.modeling_lxmert.LxmertAttention.__init__(self,config,ctx_dim=None)
transformers.models.lxmert.modeling_lxmert.LxmertAttention.forward(self,hidden_states,context,attention_mask=None,output_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertAttention.transpose_for_scores(self,x)
transformers.models.lxmert.modeling_lxmert.LxmertAttentionOutput(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertAttentionOutput.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertAttentionOutput.forward(self,hidden_states,input_tensor)
transformers.models.lxmert.modeling_lxmert.LxmertCrossAttentionLayer(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertCrossAttentionLayer.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertCrossAttentionLayer.forward(self,input_tensor,ctx_tensor,ctx_att_mask=None,output_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertEmbeddings(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertEmbeddings.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertEmbeddings.forward(self,input_ids,token_type_ids=None,inputs_embeds=None)
transformers.models.lxmert.modeling_lxmert.LxmertEncoder(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertEncoder.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertEncoder.forward(self,lang_feats,lang_attention_mask,visual_feats,visual_pos,visual_attention_mask=None,output_attentions=None)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining._get_resized_qa_labels(self,cur_qa_logit_layer,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining._resize_qa_labels(self,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining._set_qa_logit_layer(self,qa_logit_layer)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,obj_labels=None,matched_label=None,ans=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining.get_qa_logit_layer(self)->nn.Module
transformers.models.lxmert.modeling_lxmert.LxmertForPreTraining.resize_num_qa_labels(self,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput(ModelOutput)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering._get_resized_qa_labels(self,cur_qa_logit_layer,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering._resize_qa_labels(self,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering._set_qa_logit_layer(self,qa_logit_layer)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering.get_qa_logit_layer(self)->nn.Module
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnswering.resize_num_qa_labels(self,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput(ModelOutput)
transformers.models.lxmert.modeling_lxmert.LxmertIntermediate(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertIntermediate.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertIntermediate.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertLMPredictionHead(self,config,lxmert_model_embedding_weights)
transformers.models.lxmert.modeling_lxmert.LxmertLMPredictionHead.__init__(self,config,lxmert_model_embedding_weights)
transformers.models.lxmert.modeling_lxmert.LxmertLMPredictionHead.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertLayer(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertLayer.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertLayer.forward(self,hidden_states,attention_mask=None,output_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertModel(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertModel.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertModel.forward(self,input_ids=None,visual_feats=None,visual_pos=None,attention_mask=None,visual_attention_mask=None,token_type_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.lxmert.modeling_lxmert.LxmertModel.get_input_embeddings(self)
transformers.models.lxmert.modeling_lxmert.LxmertModel.set_input_embeddings(self,new_embeddings)
transformers.models.lxmert.modeling_lxmert.LxmertModelOutput(ModelOutput)
transformers.models.lxmert.modeling_lxmert.LxmertOutput(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertOutput.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertOutput.forward(self,hidden_states,input_tensor)
transformers.models.lxmert.modeling_lxmert.LxmertPooler(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertPooler.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertPooler.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertPreTrainedModel(PreTrainedModel)
transformers.models.lxmert.modeling_lxmert.LxmertPreTrainedModel._init_weights(self,module)
transformers.models.lxmert.modeling_lxmert.LxmertPreTrainingHeads(self,config,lxmert_model_embedding_weights)
transformers.models.lxmert.modeling_lxmert.LxmertPreTrainingHeads.__init__(self,config,lxmert_model_embedding_weights)
transformers.models.lxmert.modeling_lxmert.LxmertPreTrainingHeads.forward(self,sequence_output,pooled_output)
transformers.models.lxmert.modeling_lxmert.LxmertPredictionHeadTransform(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertPredictionHeadTransform.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertPredictionHeadTransform.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertSelfAttentionLayer(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertSelfAttentionLayer.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertSelfAttentionLayer.forward(self,input_tensor,attention_mask,output_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertVisualAnswerHead(self,config,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertVisualAnswerHead.__init__(self,config,num_labels)
transformers.models.lxmert.modeling_lxmert.LxmertVisualAnswerHead.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertVisualFeatureEncoder(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertVisualFeatureEncoder.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertVisualFeatureEncoder.forward(self,visual_feats,visual_pos)
transformers.models.lxmert.modeling_lxmert.LxmertVisualObjHead(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertVisualObjHead.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertVisualObjHead.forward(self,hidden_states)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer.__init__(self,config)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer.cross_att(self,lang_input,lang_attention_mask,visual_input,visual_attention_mask,output_x_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer.forward(self,lang_feats,lang_attention_mask,visual_feats,visual_attention_mask,output_attentions=False)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer.output_fc(self,lang_input,visual_input)
transformers.models.lxmert.modeling_lxmert.LxmertXLayer.self_att(self,lang_input,lang_attention_mask,visual_input,visual_attention_mask)
transformers.models.lxmert.modeling_lxmert.load_tf_weights_in_lxmert(model,config,tf_checkpoint_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/lxmert/configuration_lxmert.py----------------------------------------
A:transformers.models.lxmert.configuration_lxmert.logger->utils.logging.get_logger(__name__)
transformers.LxmertConfig(self,vocab_size=30522,hidden_size=768,num_attention_heads=12,num_labels=2,num_qa_labels=9500,num_object_labels=1600,num_attr_labels=400,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,l_layers=9,x_layers=5,r_layers=5,visual_feat_dim=2048,visual_pos_dim=4,visual_loss_normalizer=6.67,task_matched=True,task_mask_lm=True,task_obj_predict=True,task_qa=True,visual_obj_loss=True,visual_attr_loss=True,visual_feat_loss=True,output_attentions=False,output_hidden_states=False,**kwargs)
transformers.models.lxmert.configuration_lxmert.LxmertConfig(self,vocab_size=30522,hidden_size=768,num_attention_heads=12,num_labels=2,num_qa_labels=9500,num_object_labels=1600,num_attr_labels=400,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,l_layers=9,x_layers=5,r_layers=5,visual_feat_dim=2048,visual_pos_dim=4,visual_loss_normalizer=6.67,task_matched=True,task_mask_lm=True,task_obj_predict=True,task_qa=True,visual_obj_loss=True,visual_attr_loss=True,visual_feat_loss=True,output_attentions=False,output_hidden_states=False,**kwargs)
transformers.models.lxmert.configuration_lxmert.LxmertConfig.__init__(self,vocab_size=30522,hidden_size=768,num_attention_heads=12,num_labels=2,num_qa_labels=9500,num_object_labels=1600,num_attr_labels=400,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,l_layers=9,x_layers=5,r_layers=5,visual_feat_dim=2048,visual_pos_dim=4,visual_loss_normalizer=6.67,task_matched=True,task_mask_lm=True,task_obj_predict=True,task_qa=True,visual_obj_loss=True,visual_attr_loss=True,visual_feat_loss=True,output_attentions=False,output_hidden_states=False,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/flaubert/modeling_tf_flaubert.py----------------------------------------
A:transformers.models.flaubert.modeling_tf_flaubert.logger->utils.logging.get_logger(__name__)
A:transformers.models.flaubert.modeling_tf_flaubert.alen->tensorflow.range(slen)
A:transformers.models.flaubert.modeling_tf_flaubert.mask->tensorflow.cast(mask, dtype=scores.dtype)
A:transformers.models.flaubert.modeling_tf_flaubert.attn_mask->tensorflow.cast(attn_mask, dtype=dtype)
A:transformers.models.flaubert.modeling_tf_flaubert.inputs_list->tensorflow.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])
A:transformers.models.flaubert.modeling_tf_flaubert.attns_list->tensorflow.constant([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.flaubert.modeling_tf_flaubert.langs_list->tensorflow.constant([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.flaubert.modeling_tf_flaubert.self.transformer->TFFlaubertMainLayer(config, name='transformer')
A:transformers.models.flaubert.modeling_tf_flaubert.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, langs=langs, token_type_ids=token_type_ids, position_ids=position_ids, lengths=lengths, cache=cache, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, training=training, kwargs_call=kwargs)
A:transformers.models.flaubert.modeling_tf_flaubert.outputs->self.pred_layer(output)
A:transformers.models.flaubert.modeling_tf_flaubert.NEW_ID->itertools.count()
A:transformers.models.flaubert.modeling_tf_flaubert.self.layer_id->next(TFFlaubertMultiHeadAttention.NEW_ID)
A:transformers.models.flaubert.modeling_tf_flaubert.self.q_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='q_lin')
A:transformers.models.flaubert.modeling_tf_flaubert.self.k_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='k_lin')
A:transformers.models.flaubert.modeling_tf_flaubert.self.v_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='v_lin')
A:transformers.models.flaubert.modeling_tf_flaubert.self.out_lin->tensorflow.keras.layers.Dense(dim, kernel_initializer=get_initializer(config.init_std), name='out_lin')
A:transformers.models.flaubert.modeling_tf_flaubert.self.dropout->tensorflow.keras.layers.Dropout(config.dropout)
A:transformers.models.flaubert.modeling_tf_flaubert.self.pruned_heads->set()
A:transformers.models.flaubert.modeling_tf_flaubert.(bs, qlen, dim)->shape_list(input)
A:transformers.models.flaubert.modeling_tf_flaubert.dim_per_head->tensorflow.cast(dim_per_head, dtype=tf.int32)
A:transformers.models.flaubert.modeling_tf_flaubert.q->tensorflow.multiply(q, tf.math.rsqrt(tf.cast(dim_per_head, dtype=tf.float32)))
A:transformers.models.flaubert.modeling_tf_flaubert.k->tensorflow.cast(k, dtype=q.dtype)
A:transformers.models.flaubert.modeling_tf_flaubert.v->tensorflow.concat([v_, v], axis=2)
A:transformers.models.flaubert.modeling_tf_flaubert.scores->tensorflow.matmul(q, k, transpose_b=True)
A:transformers.models.flaubert.modeling_tf_flaubert.weights->self.dropout(weights, training=training)
A:transformers.models.flaubert.modeling_tf_flaubert.context->unshape(context)
A:transformers.models.flaubert.modeling_tf_flaubert.self.lin1->tensorflow.keras.layers.Dense(dim_hidden, kernel_initializer=get_initializer(config.init_std), name='lin1')
A:transformers.models.flaubert.modeling_tf_flaubert.self.lin2->tensorflow.keras.layers.Dense(out_dim, kernel_initializer=get_initializer(config.init_std), name='lin2')
A:transformers.models.flaubert.modeling_tf_flaubert.x->self.dropout(x, training=training)
A:transformers.models.flaubert.modeling_tf_flaubert.self.layerdrop->getattr(config, 'layerdrop', 0.0)
A:transformers.models.flaubert.modeling_tf_flaubert.self.pre_norm->getattr(config, 'pre_norm', False)
A:transformers.models.flaubert.modeling_tf_flaubert.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, self.dim, embeddings_initializer=get_initializer(config.embed_init_std), name='position_embeddings')
A:transformers.models.flaubert.modeling_tf_flaubert.self.lang_embeddings->tensorflow.keras.layers.Embedding(self.n_langs, self.dim, embeddings_initializer=get_initializer(config.embed_init_std), name='lang_embeddings')
A:transformers.models.flaubert.modeling_tf_flaubert.self.embeddings->TFSharedEmbeddings(self.n_words, self.dim, initializer_range=config.embed_init_std, name='embeddings')
A:transformers.models.flaubert.modeling_tf_flaubert.self.layer_norm_emb->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm_emb')
A:transformers.models.flaubert.modeling_tf_flaubert.(bs, slen)->shape_list(inputs['input_ids'])
A:transformers.models.flaubert.modeling_tf_flaubert.inputs['lengths']->tensorflow.convert_to_tensor([slen] * bs, tf.int32)
A:transformers.models.flaubert.modeling_tf_flaubert.(mask, attn_mask)->get_masks(slen, inputs['lengths'], self.causal, padding_mask=inputs['attention_mask'])
A:transformers.models.flaubert.modeling_tf_flaubert.inputs['position_ids']->tensorflow.expand_dims(tf.range(slen), axis=0)
A:transformers.models.flaubert.modeling_tf_flaubert.inputs['inputs_embeds']->self.embeddings(inputs['input_ids'])
A:transformers.models.flaubert.modeling_tf_flaubert.tensor->self.layer_norm2[i](tensor)
A:transformers.models.flaubert.modeling_tf_flaubert.dropout_probability->tensorflow.random.uniform([1], 0, 1)
A:transformers.models.flaubert.modeling_tf_flaubert.attn_outputs->self.attentions[i](tensor_normalized, attn_mask, None, inputs['cache'], inputs['head_mask'][i], inputs['output_attentions'], training=inputs['training'])
A:transformers.models.flaubert.modeling_tf_flaubert.attn->self.dropout(attn, training=inputs['training'])
A:transformers.models.flaubert.modeling_tf_flaubert.tensor_normalized->self.layer_norm2[i](tensor)
A:transformers.models.flaubert.modeling_tf_flaubert.self.bias->self.add_weight(shape=(self.n_words,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.flaubert.modeling_tf_flaubert.hidden_states->self.input_embeddings(hidden_states, mode='linear')
A:transformers.models.flaubert.modeling_tf_flaubert.self.pred_layer->TFFlaubertPredLayer(config, self.transformer.embeddings, name='pred_layer_._proj')
A:transformers.models.flaubert.modeling_tf_flaubert.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], langs=inputs['langs'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], lengths=inputs['lengths'], cache=inputs['cache'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
transformers.TFFlaubertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFFlaubertForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.TFFlaubertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFFlaubertForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFFlaubertModel(self,config,*inputs,**kwargs)
transformers.TFFlaubertModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFFlaubertWithLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFFlaubertWithLMHeadModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFFlaubertWithLMHeadModel.get_output_embeddings(self)
transformers.TFFlaubertWithLMHeadModel.get_output_layer_with_bias(self)
transformers.TFFlaubertWithLMHeadModel.get_prefix_bias_name(self)
transformers.TFFlaubertWithLMHeadModel.prepare_inputs_for_generation(self,inputs,**kwargs)
transformers.TFFlaubertWithLMHeadModelOutput(ModelOutput)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForQuestionAnsweringSimple.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMainLayer(self,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMainLayer.__init__(self,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMainLayer.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMainLayer.get_input_embeddings(self)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertModel(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertModel.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMultiHeadAttention(self,n_heads,dim,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMultiHeadAttention.__init__(self,n_heads,dim,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMultiHeadAttention.call(self,input,mask,kv,cache,head_mask,output_attentions,training=False)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMultiHeadAttention.prune_heads(self,heads)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPreTrainedModel(TFPreTrainedModel)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPreTrainedModel.dummy_inputs(self)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPredLayer(self,config,input_embeddings,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPredLayer.__init__(self,config,input_embeddings,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPredLayer.build(self,input_shape)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPredLayer.call(self,hidden_states)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertTransformerFFN(self,in_dim,dim_hidden,out_dim,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertTransformerFFN.__init__(self,in_dim,dim_hidden,out_dim,config,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertTransformerFFN.call(self,input,training=False)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.call(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.get_output_embeddings(self)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.get_output_layer_with_bias(self)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.get_prefix_bias_name(self)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel.prepare_inputs_for_generation(self,inputs,**kwargs)
transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModelOutput(ModelOutput)
transformers.models.flaubert.modeling_tf_flaubert.get_masks(slen,lengths,causal,padding_mask=None,dtype=tf.float32)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/flaubert/modeling_flaubert.py----------------------------------------
A:transformers.models.flaubert.modeling_flaubert.logger->utils.logging.get_logger(__name__)
A:transformers.models.flaubert.modeling_flaubert.self.layerdrop->getattr(config, 'layerdrop', 0.0)
A:transformers.models.flaubert.modeling_flaubert.self.pre_norm->getattr(config, 'pre_norm', False)
A:transformers.models.flaubert.modeling_flaubert.(bs, slen)->input_ids.size()
A:transformers.models.flaubert.modeling_flaubert.lengths->torch.tensor([slen] * bs, device=device)
A:transformers.models.flaubert.modeling_flaubert.(mask, attn_mask)->get_masks(slen, lengths, self.causal, padding_mask=attention_mask)
A:transformers.models.flaubert.modeling_flaubert.position_ids->position_ids.unsqueeze(0).expand((bs, slen)).unsqueeze(0).expand((bs, slen))
A:transformers.models.flaubert.modeling_flaubert.head_mask->self.get_head_mask(head_mask, self.config.n_layers)
A:transformers.models.flaubert.modeling_flaubert.inputs_embeds->self.embeddings(input_ids)
A:transformers.models.flaubert.modeling_flaubert.tensor->self.layer_norm2[i](tensor)
A:transformers.models.flaubert.modeling_flaubert.dropout_probability->random.uniform(0, 1)
A:transformers.models.flaubert.modeling_flaubert.attn_outputs->self.attentions[i](tensor_normalized, attn_mask, cache=cache, head_mask=head_mask[i])
A:transformers.models.flaubert.modeling_flaubert.attn->torch.nn.functional.dropout(attn, p=self.dropout, training=self.training)
A:transformers.models.flaubert.modeling_flaubert.tensor_normalized->self.layer_norm2[i](tensor)
A:transformers.models.flaubert.modeling_flaubert.self.transformer->FlaubertModel(config)
transformers.FlaubertForMultipleChoice(self,config)
transformers.FlaubertForQuestionAnswering(self,config)
transformers.FlaubertForQuestionAnsweringSimple(self,config)
transformers.FlaubertForSequenceClassification(self,config)
transformers.FlaubertForTokenClassification(self,config)
transformers.FlaubertModel(self,config)
transformers.FlaubertModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FlaubertWithLMHeadModel(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForMultipleChoice(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForMultipleChoice.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForQuestionAnswering(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForQuestionAnswering.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForQuestionAnsweringSimple(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForQuestionAnsweringSimple.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForSequenceClassification(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForSequenceClassification.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForTokenClassification(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertForTokenClassification.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertModel(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertModel.__init__(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertModel.forward(self,input_ids=None,attention_mask=None,langs=None,token_type_ids=None,position_ids=None,lengths=None,cache=None,head_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.flaubert.modeling_flaubert.FlaubertWithLMHeadModel(self,config)
transformers.models.flaubert.modeling_flaubert.FlaubertWithLMHeadModel.__init__(self,config)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/flaubert/configuration_flaubert.py----------------------------------------
A:transformers.models.flaubert.configuration_flaubert.logger->utils.logging.get_logger(__name__)
transformers.FlaubertConfig(self,layerdrop=0.0,pre_norm=False,pad_token_id=2,bos_token_id=0,**kwargs)
transformers.models.flaubert.configuration_flaubert.FlaubertConfig(self,layerdrop=0.0,pre_norm=False,pad_token_id=2,bos_token_id=0,**kwargs)
transformers.models.flaubert.configuration_flaubert.FlaubertConfig.__init__(self,layerdrop=0.0,pre_norm=False,pad_token_id=2,bos_token_id=0,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/flaubert/tokenization_flaubert.py----------------------------------------
A:transformers.models.flaubert.tokenization_flaubert.logger->utils.logging.get_logger(__name__)
A:transformers.models.flaubert.tokenization_flaubert.text->self.moses_tokenize(text, lang=lang)
transformers.FlaubertTokenizer(self,do_lowercase=False,**kwargs)
transformers.FlaubertTokenizer._tokenize(self,text,bypass_tokenizer=False)
transformers.FlaubertTokenizer.preprocess_text(self,text)
transformers.models.flaubert.tokenization_flaubert.FlaubertTokenizer(self,do_lowercase=False,**kwargs)
transformers.models.flaubert.tokenization_flaubert.FlaubertTokenizer.__init__(self,do_lowercase=False,**kwargs)
transformers.models.flaubert.tokenization_flaubert.FlaubertTokenizer._tokenize(self,text,bypass_tokenizer=False)
transformers.models.flaubert.tokenization_flaubert.FlaubertTokenizer.preprocess_text(self,text)
transformers.models.flaubert.tokenization_flaubert.convert_to_unicode(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/flaubert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_prophetnet/tokenization_xlm_prophetnet.py----------------------------------------
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.vocab->collections.OrderedDict()
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.tokens->reader.readlines()
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.token->token.rstrip('\n').rstrip('\n')
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.tok->'[unused{}]'.format(i)
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.state->self.__dict__.copy()
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.spm_id->self.sp_model.PieceToId(token)
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.XLMProphetNetTokenizer(self,vocab_file,bos_token='[SEP]',eos_token='[SEP]',sep_token='[SEP]',unk_token='[UNK]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.XLMProphetNetTokenizer.__getstate__(self)
transformers.XLMProphetNetTokenizer.__setstate__(self,d)
transformers.XLMProphetNetTokenizer._convert_id_to_token(self,index)
transformers.XLMProphetNetTokenizer._convert_token_to_id(self,token)
transformers.XLMProphetNetTokenizer._tokenize(self,text)
transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMProphetNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLMProphetNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLMProphetNetTokenizer.get_vocab(self)
transformers.XLMProphetNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.XLMProphetNetTokenizer.vocab_size(self)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer(self,vocab_file,bos_token='[SEP]',eos_token='[SEP]',sep_token='[SEP]',unk_token='[UNK]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.__getstate__(self)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.__init__(self,vocab_file,bos_token='[SEP]',eos_token='[SEP]',sep_token='[SEP]',unk_token='[UNK]',pad_token='[PAD]',cls_token='[CLS]',mask_token='[MASK]',**kwargs)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.__setstate__(self,d)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer._convert_id_to_token(self,index)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer._convert_token_to_id(self,token)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer._tokenize(self,text)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.get_vocab(self)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer.vocab_size(self)
transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.load_vocab(vocab_file)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_prophetnet/modeling_xlm_prophetnet.py----------------------------------------
A:transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.logger->utils.logging.get_logger(__name__)
transformers.XLMProphetNetDecoder(ProphetNetDecoder)
transformers.XLMProphetNetEncoder(ProphetNetEncoder)
transformers.XLMProphetNetForCausalLM(ProphetNetForCausalLM)
transformers.XLMProphetNetForConditionalGeneration(ProphetNetForConditionalGeneration)
transformers.XLMProphetNetModel(ProphetNetModel)
transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetDecoder(ProphetNetDecoder)
transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetEncoder(ProphetNetEncoder)
transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForCausalLM(ProphetNetForCausalLM)
transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration(ProphetNetForConditionalGeneration)
transformers.models.xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetModel(ProphetNetModel)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_prophetnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlm_prophetnet/configuration_xlm_prophetnet.py----------------------------------------
A:transformers.models.xlm_prophetnet.configuration_xlm_prophetnet.logger->utils.logging.get_logger(__name__)
transformers.XLMProphetNetConfig(ProphetNetConfig)
transformers.models.xlm_prophetnet.configuration_xlm_prophetnet.XLMProphetNetConfig(ProphetNetConfig)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/modeling_tf_xlnet.py----------------------------------------
A:transformers.models.xlnet.modeling_tf_xlnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlnet.modeling_tf_xlnet.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm')
A:transformers.models.xlnet.modeling_tf_xlnet.self.dropout->tensorflow.keras.layers.Dropout(config.dropout)
A:transformers.models.xlnet.modeling_tf_xlnet.initializer->get_initializer(self.initializer_range)
A:transformers.models.xlnet.modeling_tf_xlnet.self.q->self.add_weight(shape=(self.d_model, self.n_head, self.d_head), initializer=initializer, trainable=True, name='q')
A:transformers.models.xlnet.modeling_tf_xlnet.self.k->self.add_weight(shape=(self.d_model, self.n_head, self.d_head), initializer=initializer, trainable=True, name='k')
A:transformers.models.xlnet.modeling_tf_xlnet.self.v->self.add_weight(shape=(self.d_model, self.n_head, self.d_head), initializer=initializer, trainable=True, name='v')
A:transformers.models.xlnet.modeling_tf_xlnet.self.o->self.add_weight(shape=(self.d_model, self.n_head, self.d_head), initializer=initializer, trainable=True, name='o')
A:transformers.models.xlnet.modeling_tf_xlnet.self.r->self.add_weight(shape=(self.d_model, self.n_head, self.d_head), initializer=initializer, trainable=True, name='r')
A:transformers.models.xlnet.modeling_tf_xlnet.self.r_r_bias->self.add_weight(shape=(self.n_head, self.d_head), initializer='zeros', trainable=True, name='r_r_bias')
A:transformers.models.xlnet.modeling_tf_xlnet.self.r_s_bias->self.add_weight(shape=(self.n_head, self.d_head), initializer='zeros', trainable=True, name='r_s_bias')
A:transformers.models.xlnet.modeling_tf_xlnet.self.r_w_bias->self.add_weight(shape=(self.n_head, self.d_head), initializer='zeros', trainable=True, name='r_w_bias')
A:transformers.models.xlnet.modeling_tf_xlnet.self.seg_embed->self.add_weight(shape=(2, self.n_head, self.d_head), initializer=initializer, trainable=True, name='seg_embed')
A:transformers.models.xlnet.modeling_tf_xlnet.x_size->shape_list(x)
A:transformers.models.xlnet.modeling_tf_xlnet.x->tensorflow.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))
A:transformers.models.xlnet.modeling_tf_xlnet.ac->tensorflow.einsum('ibnd,jbnd->ijbn', q_head + self.r_w_bias, k_head_h)
A:transformers.models.xlnet.modeling_tf_xlnet.bd->self.rel_shift(bd, klen=shape_list(ac)[1])
A:transformers.models.xlnet.modeling_tf_xlnet.ef->tensorflow.einsum('ijbs,ibns->ijbn', seg_mat, ef)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_prob->self.dropout(attn_prob, training=training)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_vec->self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask, output_attentions, training=training)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_out->self.dropout(attn_out, training=training)
A:transformers.models.xlnet.modeling_tf_xlnet.output->self.sequence_summary(output)
A:transformers.models.xlnet.modeling_tf_xlnet.cat->tensorflow.concat([mems, h], axis=0)
A:transformers.models.xlnet.modeling_tf_xlnet.k_head_h->tensorflow.einsum('ibh,hnd->ibnd', cat, self.k)
A:transformers.models.xlnet.modeling_tf_xlnet.v_head_h->tensorflow.einsum('ibh,hnd->ibnd', cat, self.v)
A:transformers.models.xlnet.modeling_tf_xlnet.k_head_r->tensorflow.einsum('ibh,hnd->ibnd', r, self.r)
A:transformers.models.xlnet.modeling_tf_xlnet.q_head_h->tensorflow.einsum('ibh,hnd->ibnd', h, self.q)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_vec_h->self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask, output_attentions, training=training)
A:transformers.models.xlnet.modeling_tf_xlnet.output_h->self.dropout(word_emb_k, training=inputs['training'])
A:transformers.models.xlnet.modeling_tf_xlnet.q_head_g->tensorflow.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_vec_g->self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask, output_attentions, training=training)
A:transformers.models.xlnet.modeling_tf_xlnet.output_g->self.dropout(word_emb_q, training=inputs['training'])
A:transformers.models.xlnet.modeling_tf_xlnet.self.layer_1->tensorflow.keras.layers.Dense(config.d_inner, kernel_initializer=get_initializer(config.initializer_range), name='layer_1')
A:transformers.models.xlnet.modeling_tf_xlnet.self.layer_2->tensorflow.keras.layers.Dense(config.d_model, kernel_initializer=get_initializer(config.initializer_range), name='layer_2')
A:transformers.models.xlnet.modeling_tf_xlnet.self.activation_function->get_tf_activation(config.ff_activation)
A:transformers.models.xlnet.modeling_tf_xlnet.self.rel_attn->TFXLNetRelativeAttention(config, name='rel_attn')
A:transformers.models.xlnet.modeling_tf_xlnet.self.ff->TFXLNetFeedForward(config, name='ff')
A:transformers.models.xlnet.modeling_tf_xlnet.outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], mems=inputs['mems'], perm_mask=inputs['perm_mask'], target_mapping=inputs['target_mapping'], token_type_ids=inputs['token_type_ids'], input_mask=inputs['input_mask'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_mems=inputs['use_mems'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.xlnet.modeling_tf_xlnet.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.xlnet.modeling_tf_xlnet.hidden_states->tuple((tf.transpose(hs, perm=(1, 0, 2)) for hs in hidden_states))
A:transformers.models.xlnet.modeling_tf_xlnet.self.word_embedding->TFSharedEmbeddings(config.vocab_size, config.d_model, initializer_range=config.initializer_range, name='word_embedding')
A:transformers.models.xlnet.modeling_tf_xlnet.self.mask_emb->self.add_weight(shape=(1, 1, self.d_model), initializer=initializer, trainable=True, name='mask_emb')
A:transformers.models.xlnet.modeling_tf_xlnet.attn_mask->tensorflow.cast(attn_mask > 0, dtype=dtype_float)
A:transformers.models.xlnet.modeling_tf_xlnet.mask_u->tensorflow.matrix_band_part(attn_mask, 0, -1)
A:transformers.models.xlnet.modeling_tf_xlnet.mask_dia->tensorflow.matrix_band_part(attn_mask, 0, 0)
A:transformers.models.xlnet.modeling_tf_xlnet.attn_mask_pad->tensorflow.zeros([qlen, mlen], dtype=dtype)
A:transformers.models.xlnet.modeling_tf_xlnet.ret->tensorflow.concat([ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]], 1)
A:transformers.models.xlnet.modeling_tf_xlnet.mask_l->tensorflow.matrix_band_part(attn_mask, -1, 0)
A:transformers.models.xlnet.modeling_tf_xlnet.sinusoid_inp->tensorflow.einsum('i,d->id', pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_tf_xlnet.pos_emb->self.dropout(pos_emb, training=inputs['training'])
A:transformers.models.xlnet.modeling_tf_xlnet.freq_seq->tensorflow.cast(freq_seq, dtype=dtype)
A:transformers.models.xlnet.modeling_tf_xlnet.fwd_pos_seq->tensorflow.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)
A:transformers.models.xlnet.modeling_tf_xlnet.bwd_pos_seq->tensorflow.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)
A:transformers.models.xlnet.modeling_tf_xlnet.fwd_pos_emb->self.positional_embedding(fwd_pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_tf_xlnet.bwd_pos_emb->self.positional_embedding(bwd_pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_tf_xlnet.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, mems=mems, perm_mask=perm_mask, target_mapping=target_mapping, token_type_ids=token_type_ids, input_mask=input_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, use_mems=use_mems, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, start_positions=start_positions, end_positions=end_positions, training=training, kwargs_call=kwargs)
A:transformers.models.xlnet.modeling_tf_xlnet.inputs['input_ids']->tensorflow.transpose(inputs['input_ids'], perm=(1, 0))
A:transformers.models.xlnet.modeling_tf_xlnet.inputs['inputs_embeds']->tensorflow.transpose(inputs['inputs_embeds'], perm=(1, 0, 2))
A:transformers.models.xlnet.modeling_tf_xlnet.mems_mask->tensorflow.zeros([shape_list(data_mask)[0], mlen, bsz], dtype=dtype_float)
A:transformers.models.xlnet.modeling_tf_xlnet.data_mask->tensorflow.concat([mems_mask, data_mask], axis=1)
A:transformers.models.xlnet.modeling_tf_xlnet.non_tgt_mask->tensorflow.cast(attn_mask + non_tgt_mask[:, :, None, None] > 0, dtype=dtype_float)
A:transformers.models.xlnet.modeling_tf_xlnet.word_emb_k->self.word_embedding(inputs['input_ids'])
A:transformers.models.xlnet.modeling_tf_xlnet.word_emb_q->tensorflow.tile(self.mask_emb, [shape_list(inputs['target_mapping'])[0], bsz, 1])
A:transformers.models.xlnet.modeling_tf_xlnet.mem_pad->tensorflow.zeros([mlen, bsz], dtype=tf.int32)
A:transformers.models.xlnet.modeling_tf_xlnet.cat_ids->tensorflow.concat([mem_pad, inputs['token_type_ids']], 0)
A:transformers.models.xlnet.modeling_tf_xlnet.seg_mat->tensorflow.one_hot(seg_mat, 2, dtype=dtype_float)
A:transformers.models.xlnet.modeling_tf_xlnet.attentions->tuple((tf.transpose(t, perm=(2, 3, 0, 1)) for t in attentions))
A:transformers.models.xlnet.modeling_tf_xlnet.self.transformer->TFXLNetMainLayer(config, name='transformer')
A:transformers.models.xlnet.modeling_tf_xlnet.self.lm_loss->TFXLNetLMHead(config, self.transformer.word_embedding, name='lm_loss')
A:transformers.models.xlnet.modeling_tf_xlnet.dummy_token->tensorflow.zeros((effective_batch_size, 1), dtype=tf.int32)
A:transformers.models.xlnet.modeling_tf_xlnet.perm_mask->tensorflow.concat([perm_mask, perm_mask_seq_end], axis=-1)
A:transformers.models.xlnet.modeling_tf_xlnet.perm_mask_seq_end->tensorflow.ones((effective_batch_size, sequence_length, 1), dtype=tf.float32)
A:transformers.models.xlnet.modeling_tf_xlnet.target_mapping->tensorflow.concat([target_mapping, target_mapping_seq_end], axis=-1)
A:transformers.models.xlnet.modeling_tf_xlnet.target_mapping_seq_end->tensorflow.ones((effective_batch_size, 1, 1), dtype=tf.float32)
A:transformers.models.xlnet.modeling_tf_xlnet.inputs['mems']->tuple((layer_past[:-offset, :, :] for layer_past in past))
A:transformers.models.xlnet.modeling_tf_xlnet.transformer_outputs->self.transformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], mems=inputs['mems'], perm_mask=inputs['perm_mask'], target_mapping=inputs['target_mapping'], token_type_ids=inputs['token_type_ids'], input_mask=inputs['input_mask'], head_mask=inputs['head_mask'], inputs_embeds=inputs['inputs_embeds'], use_mems=inputs['use_mems'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.xlnet.modeling_tf_xlnet.logits->self.qa_outputs(sequence_output)
A:transformers.models.xlnet.modeling_tf_xlnet.loss->self.compute_loss(labels, (start_logits, end_logits))
A:transformers.models.xlnet.modeling_tf_xlnet.self.sequence_summary->TFSequenceSummary(config, initializer_range=config.initializer_range, name='sequence_summary')
A:transformers.models.xlnet.modeling_tf_xlnet.self.logits_proj->tensorflow.keras.layers.Dense(1, kernel_initializer=get_initializer(config.initializer_range), name='logits_proj')
A:transformers.models.xlnet.modeling_tf_xlnet.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.xlnet.modeling_tf_xlnet.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.xlnet.modeling_tf_xlnet.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.xlnet.modeling_tf_xlnet.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.xlnet.modeling_tf_xlnet.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.xlnet.modeling_tf_xlnet.end_logits->tensorflow.squeeze(end_logits, axis=-1)
transformers.TFXLNetForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFXLNetForMultipleChoice.call(self,input_ids=None,token_type_ids=None,input_mask=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLNetForMultipleChoice.dummy_inputs(self)
transformers.TFXLNetForMultipleChoiceOutput(ModelOutput)
transformers.TFXLNetForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.TFXLNetForQuestionAnsweringSimple.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFXLNetForQuestionAnsweringSimpleOutput(ModelOutput)
transformers.TFXLNetForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFXLNetForSequenceClassification.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLNetForSequenceClassificationOutput(ModelOutput)
transformers.TFXLNetForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFXLNetForTokenClassification.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLNetForTokenClassificationOutput(ModelOutput)
transformers.TFXLNetLMHeadModel(self,config,*inputs,**kwargs)
transformers.TFXLNetLMHeadModel.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFXLNetLMHeadModel.get_output_embeddings(self)
transformers.TFXLNetLMHeadModel.get_output_layer_with_bias(self)
transformers.TFXLNetLMHeadModel.get_prefix_bias_name(self)
transformers.TFXLNetLMHeadModel.prepare_inputs_for_generation(self,inputs,past,use_mems=None,**kwargs)
transformers.TFXLNetLMHeadModelOutput(ModelOutput)
transformers.TFXLNetMainLayer(self,config,**kwargs)
transformers.TFXLNetMainLayer._prune_heads(self,heads_to_prune)
transformers.TFXLNetMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.TFXLNetMainLayer.build(self,input_shape)
transformers.TFXLNetMainLayer.cache_mem(self,curr_out,prev_mem)
transformers.TFXLNetMainLayer.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFXLNetMainLayer.create_mask(self,qlen,mlen,dtype=tf.float32)
transformers.TFXLNetMainLayer.get_input_embeddings(self)
transformers.TFXLNetMainLayer.positional_embedding(pos_seq,inv_freq,bsz=None)
transformers.TFXLNetMainLayer.relative_positional_encoding(self,qlen,klen,bsz=None,dtype=None)
transformers.TFXLNetMainLayer.set_input_embeddings(self,value)
transformers.TFXLNetModel(self,config,*inputs,**kwargs)
transformers.TFXLNetModel.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFXLNetModelOutput(ModelOutput)
transformers.TFXLNetPreTrainedModel(TFPreTrainedModel)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetFeedForward(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetFeedForward.__init__(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetFeedForward.call(self,inp,training=False)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice.call(self,input_ids=None,token_type_ids=None,input_mask=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice.dummy_inputs(self)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoiceOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimpleOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassification.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassificationOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForTokenClassification.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForTokenClassificationOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHead(self,config,input_embeddings,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHead.build(self,input_shape)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHead.call(self,hidden_states)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.get_output_embeddings(self)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.get_output_layer_with_bias(self)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.get_prefix_bias_name(self)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel.prepare_inputs_for_generation(self,inputs,past,use_mems=None,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModelOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLayer(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLayer.__init__(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLayer.call(self,output_h,output_g,non_tgt_mask,attn_mask,pos_emb,seg_mat,mems,target_mapping,head_mask,output_attentions,training=False)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.__init__(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer._prune_heads(self,heads_to_prune)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer._resize_token_embeddings(self,new_num_tokens)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.build(self,input_shape)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem(self,curr_out,prev_mem)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.create_mask(self,qlen,mlen,dtype=tf.float32)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.get_input_embeddings(self)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding(pos_seq,inv_freq,bsz=None)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding(self,qlen,klen,bsz=None,dtype=None)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer.set_input_embeddings(self,value)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetModel(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetModel.__init__(self,config,*inputs,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetModel.call(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetModelOutput(ModelOutput)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetPreTrainedModel(TFPreTrainedModel)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.__init__(self,config,**kwargs)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.build(self,input_shape)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.call(self,h,g,attn_mask_h,attn_mask_g,r,seg_mat,mems,target_mapping,head_mask,output_attentions,training=False)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention(self,h,attn_vec,residual=True,training=False)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.prune_heads(self,heads)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core(self,q_head,k_head_h,v_head_h,k_head_r,seg_mat,attn_mask,head_mask,output_attentions,training=False)
transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift(self,x,klen=-1)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/tokenization_xlnet_fast.py----------------------------------------
A:transformers.models.xlnet.tokenization_xlnet_fast.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlnet.tokenization_xlnet_fast.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.XLNetTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.XLNetTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLNetTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLNetTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLNetTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast(self,vocab_file,tokenizer_file=None,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast.__init__(self,vocab_file,tokenizer_file=None,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlnet.tokenization_xlnet_fast.XLNetTokenizerFast.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/configuration_xlnet.py----------------------------------------
A:transformers.models.xlnet.configuration_xlnet.logger->utils.logging.get_logger(__name__)
transformers.XLNetConfig(self,vocab_size=32000,d_model=1024,n_layer=24,n_head=16,d_inner=4096,ff_activation='gelu',untie_r=True,attn_type='bi',initializer_range=0.02,layer_norm_eps=1e-12,dropout=0.1,mem_len=512,reuse_len=None,use_mems_eval=True,use_mems_train=False,bi_data=False,clamp_len=-1,same_length=False,summary_type='last',summary_use_proj=True,summary_activation='tanh',summary_last_dropout=0.1,start_n_top=5,end_n_top=5,pad_token_id=5,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.XLNetConfig.hidden_size(self)
transformers.XLNetConfig.max_position_embeddings(self)
transformers.XLNetConfig.n_token(self)
transformers.XLNetConfig.n_token(self,value)
transformers.XLNetConfig.num_attention_heads(self)
transformers.XLNetConfig.num_hidden_layers(self)
transformers.models.xlnet.configuration_xlnet.XLNetConfig(self,vocab_size=32000,d_model=1024,n_layer=24,n_head=16,d_inner=4096,ff_activation='gelu',untie_r=True,attn_type='bi',initializer_range=0.02,layer_norm_eps=1e-12,dropout=0.1,mem_len=512,reuse_len=None,use_mems_eval=True,use_mems_train=False,bi_data=False,clamp_len=-1,same_length=False,summary_type='last',summary_use_proj=True,summary_activation='tanh',summary_last_dropout=0.1,start_n_top=5,end_n_top=5,pad_token_id=5,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.__init__(self,vocab_size=32000,d_model=1024,n_layer=24,n_head=16,d_inner=4096,ff_activation='gelu',untie_r=True,attn_type='bi',initializer_range=0.02,layer_norm_eps=1e-12,dropout=0.1,mem_len=512,reuse_len=None,use_mems_eval=True,use_mems_train=False,bi_data=False,clamp_len=-1,same_length=False,summary_type='last',summary_use_proj=True,summary_activation='tanh',summary_last_dropout=0.1,start_n_top=5,end_n_top=5,pad_token_id=5,bos_token_id=1,eos_token_id=2,**kwargs)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.hidden_size(self)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.max_position_embeddings(self)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.n_token(self)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.n_token(self,value)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.num_attention_heads(self)
transformers.models.xlnet.configuration_xlnet.XLNetConfig.num_hidden_layers(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/tokenization_xlnet.py----------------------------------------
A:transformers.models.xlnet.tokenization_xlnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlnet.tokenization_xlnet.self.sp_model->sentencepiece.SentencePieceProcessor()
A:transformers.models.xlnet.tokenization_xlnet.state->self.__dict__.copy()
A:transformers.models.xlnet.tokenization_xlnet.outputs->outputs.lower().lower()
A:transformers.models.xlnet.tokenization_xlnet.text->self.preprocess_text(text)
A:transformers.models.xlnet.tokenization_xlnet.pieces->self.sp_model.SampleEncodeAsPieces(text, 64, 0.1)
A:transformers.models.xlnet.tokenization_xlnet.cur_pieces->self.sp_model.EncodeAsPieces(piece[:-1].replace(SPIECE_UNDERLINE, ''))
A:transformers.models.xlnet.tokenization_xlnet.out_string->''.join(tokens).replace(SPIECE_UNDERLINE, ' ').strip()
A:transformers.models.xlnet.tokenization_xlnet.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
transformers.XLNetTokenizer(self,vocab_file,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.XLNetTokenizer.__getstate__(self)
transformers.XLNetTokenizer.__setstate__(self,d)
transformers.XLNetTokenizer._convert_id_to_token(self,index)
transformers.XLNetTokenizer._convert_token_to_id(self,token)
transformers.XLNetTokenizer._tokenize(self,text,sample=False)
transformers.XLNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.XLNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.XLNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.XLNetTokenizer.get_vocab(self)
transformers.XLNetTokenizer.preprocess_text(self,inputs)
transformers.XLNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.XLNetTokenizer.vocab_size(self)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer(self,vocab_file,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.__getstate__(self)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.__init__(self,vocab_file,do_lower_case=False,remove_space=True,keep_accents=False,bos_token='<s>',eos_token='</s>',unk_token='<unk>',sep_token='<sep>',pad_token='<pad>',cls_token='<cls>',mask_token='<mask>',additional_special_tokens=['<eop>','<eod>'],**kwargs)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.__setstate__(self,d)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer._convert_id_to_token(self,index)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer._convert_token_to_id(self,token)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer._tokenize(self,text,sample=False)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.get_vocab(self)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.preprocess_text(self,inputs)
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.xlnet.tokenization_xlnet.XLNetTokenizer.vocab_size(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/convert_xlnet_original_tf_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.config->transformers.XLNetConfig.from_json_file(bert_config_file)
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.model->XLNetLMHeadModel(config)
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.pytorch_weights_dump_path->os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.pytorch_config_dump_path->os.path.join(pytorch_dump_folder_path, CONFIG_NAME)
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch(tf_checkpoint_path,bert_config_file,pytorch_dump_folder_path,finetuning_task=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/xlnet/modeling_xlnet.py----------------------------------------
A:transformers.models.xlnet.modeling_xlnet.logger->utils.logging.get_logger(__name__)
A:transformers.models.xlnet.modeling_xlnet.init_vars->tensorflow.train.list_variables(tf_path)
A:transformers.models.xlnet.modeling_xlnet.array->numpy.transpose(array)
A:transformers.models.xlnet.modeling_xlnet.tf_to_pt_map->build_tf_xlnet_to_pytorch_map(model, config, tf_weights)
A:transformers.models.xlnet.modeling_xlnet.p_i.data->torch.from_numpy(arr_i)
A:transformers.models.xlnet.modeling_xlnet.pointer.data->torch.from_numpy(array)
A:transformers.models.xlnet.modeling_xlnet.self.q->torch.nn.Parameter(torch.FloatTensor(config.d_model, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.k->torch.nn.Parameter(torch.FloatTensor(config.d_model, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.v->torch.nn.Parameter(torch.FloatTensor(config.d_model, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.o->torch.nn.Parameter(torch.FloatTensor(config.d_model, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.r->torch.nn.Parameter(torch.FloatTensor(config.d_model, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.r_r_bias->torch.nn.Parameter(torch.FloatTensor(self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.r_s_bias->torch.nn.Parameter(torch.FloatTensor(self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.r_w_bias->torch.nn.Parameter(torch.FloatTensor(self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.seg_embed->torch.nn.Parameter(torch.FloatTensor(2, self.n_head, self.d_head))
A:transformers.models.xlnet.modeling_xlnet.self.layer_norm->torch.nn.LayerNorm(config.d_model, eps=config.layer_norm_eps)
A:transformers.models.xlnet.modeling_xlnet.self.dropout->torch.nn.Dropout(config.dropout)
A:transformers.models.xlnet.modeling_xlnet.x->torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))
A:transformers.models.xlnet.modeling_xlnet.ac->torch.einsum('ibnd,jbnd->bnij', q_head + self.r_w_bias, k_head_h)
A:transformers.models.xlnet.modeling_xlnet.bd->self.rel_shift_bnij(bd, klen=ac.shape[3])
A:transformers.models.xlnet.modeling_xlnet.ef->torch.einsum('ijbs,ibns->bnij', seg_mat, ef)
A:transformers.models.xlnet.modeling_xlnet.attn_prob->self.dropout(attn_prob)
A:transformers.models.xlnet.modeling_xlnet.attn_vec->self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask, output_attentions=output_attentions)
A:transformers.models.xlnet.modeling_xlnet.attn_out->self.dropout(attn_out)
A:transformers.models.xlnet.modeling_xlnet.output->self.sequence_summary(output)
A:transformers.models.xlnet.modeling_xlnet.cat->torch.cat([mems, h], dim=0)
A:transformers.models.xlnet.modeling_xlnet.k_head_h->torch.einsum('ibh,hnd->ibnd', cat, self.k)
A:transformers.models.xlnet.modeling_xlnet.v_head_h->torch.einsum('ibh,hnd->ibnd', cat, self.v)
A:transformers.models.xlnet.modeling_xlnet.k_head_r->torch.einsum('ibh,hnd->ibnd', r.type(self.r.dtype), self.r)
A:transformers.models.xlnet.modeling_xlnet.q_head_h->torch.einsum('ibh,hnd->ibnd', h, self.q)
A:transformers.models.xlnet.modeling_xlnet.attn_vec_h->self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask, output_attentions=output_attentions)
A:transformers.models.xlnet.modeling_xlnet.output_h->self.dropout(word_emb_k)
A:transformers.models.xlnet.modeling_xlnet.q_head_g->torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)
A:transformers.models.xlnet.modeling_xlnet.attn_vec_g->self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask, output_attentions=output_attentions)
A:transformers.models.xlnet.modeling_xlnet.output_g->self.dropout(word_emb_q)
A:transformers.models.xlnet.modeling_xlnet.self.layer_1->torch.nn.Linear(config.d_model, config.d_inner)
A:transformers.models.xlnet.modeling_xlnet.self.layer_2->torch.nn.Linear(config.d_inner, config.d_model)
A:transformers.models.xlnet.modeling_xlnet.self.rel_attn->XLNetRelativeAttention(config)
A:transformers.models.xlnet.modeling_xlnet.self.ff->XLNetFeedForward(config)
A:transformers.models.xlnet.modeling_xlnet.outputs->self.transformer(input_ids, attention_mask=attention_mask, mems=mems, perm_mask=perm_mask, target_mapping=target_mapping, token_type_ids=token_type_ids, input_mask=input_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, use_mems=use_mems, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, **kwargs)
A:transformers.models.xlnet.modeling_xlnet.output_x->self.ff(output_x)
A:transformers.models.xlnet.modeling_xlnet.self.word_embedding->torch.nn.Embedding(config.vocab_size, config.d_model)
A:transformers.models.xlnet.modeling_xlnet.self.mask_emb->torch.nn.Parameter(torch.FloatTensor(1, 1, config.d_model))
A:transformers.models.xlnet.modeling_xlnet.self.layer->torch.nn.ModuleList([XLNetLayer(config) for _ in range(config.n_layer)])
A:transformers.models.xlnet.modeling_xlnet.attn_mask->(attn_mask > 0).to(dtype_float)
A:transformers.models.xlnet.modeling_xlnet.mask_up->torch.triu(attn_mask, diagonal=1)
A:transformers.models.xlnet.modeling_xlnet.attn_mask_pad->torch.zeros([qlen, mlen])
A:transformers.models.xlnet.modeling_xlnet.ret->ret.to(self.device).to(self.device)
A:transformers.models.xlnet.modeling_xlnet.mask_lo->torch.tril(attn_mask, diagonal=-1)
A:transformers.models.xlnet.modeling_xlnet.sinusoid_inp->torch.einsum('i,d->id', pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_xlnet.pos_emb->self.dropout(pos_emb)
A:transformers.models.xlnet.modeling_xlnet.freq_seq->torch.arange(0, self.d_model, 2.0, dtype=torch.float)
A:transformers.models.xlnet.modeling_xlnet.fwd_pos_seq->fwd_pos_seq.clamp(-self.clamp_len, self.clamp_len).clamp(-self.clamp_len, self.clamp_len)
A:transformers.models.xlnet.modeling_xlnet.bwd_pos_seq->bwd_pos_seq.clamp(-self.clamp_len, self.clamp_len).clamp(-self.clamp_len, self.clamp_len)
A:transformers.models.xlnet.modeling_xlnet.fwd_pos_emb->self.positional_embedding(fwd_pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_xlnet.bwd_pos_emb->self.positional_embedding(bwd_pos_seq, inv_freq)
A:transformers.models.xlnet.modeling_xlnet.input_ids->torch.cat([input_ids, dummy_token], dim=1)
A:transformers.models.xlnet.modeling_xlnet.inputs_embeds->inputs_embeds.transpose(0, 1).contiguous().transpose(0, 1).contiguous()
A:transformers.models.xlnet.modeling_xlnet.mems_mask->torch.zeros([data_mask.shape[0], mlen, bsz]).to(data_mask)
A:transformers.models.xlnet.modeling_xlnet.data_mask->torch.cat([mems_mask, data_mask], dim=1)
A:transformers.models.xlnet.modeling_xlnet.non_tgt_mask->(attn_mask + non_tgt_mask[:, :, None, None] > 0).to(attn_mask)
A:transformers.models.xlnet.modeling_xlnet.word_emb_k->self.word_embedding(input_ids)
A:transformers.models.xlnet.modeling_xlnet.word_emb_q->self.mask_emb.expand(target_mapping.shape[0], bsz, -1)
A:transformers.models.xlnet.modeling_xlnet.mem_pad->torch.zeros([mlen, bsz], dtype=torch.long, device=device)
A:transformers.models.xlnet.modeling_xlnet.cat_ids->torch.cat([mem_pad, token_type_ids], dim=0)
A:transformers.models.xlnet.modeling_xlnet.seg_mat->torch.nn.functional.one_hot(seg_mat, num_classes=2).to(dtype_float)
A:transformers.models.xlnet.modeling_xlnet.head_mask->head_mask.to(dtype=next(self.parameters()).dtype).to(dtype=next(self.parameters()).dtype)
A:transformers.models.xlnet.modeling_xlnet.hidden_states->tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))
A:transformers.models.xlnet.modeling_xlnet.attentions->tuple((t.permute(2, 3, 0, 1).contiguous() for t in attentions))
A:transformers.models.xlnet.modeling_xlnet.self.transformer->XLNetModel(config)
A:transformers.models.xlnet.modeling_xlnet.self.lm_loss->torch.nn.Linear(config.d_model, config.vocab_size, bias=True)
A:transformers.models.xlnet.modeling_xlnet.dummy_token->torch.zeros((effective_batch_size, 1), dtype=torch.long, device=input_ids.device)
A:transformers.models.xlnet.modeling_xlnet.perm_mask->torch.zeros((effective_batch_size, sequence_length, sequence_length), dtype=torch.float, device=input_ids.device)
A:transformers.models.xlnet.modeling_xlnet.target_mapping->torch.zeros((effective_batch_size, 1, sequence_length), dtype=torch.float, device=input_ids.device)
A:transformers.models.xlnet.modeling_xlnet.inputs['mems']->tuple((layer_past[:-offset, :, :] for layer_past in past))
A:transformers.models.xlnet.modeling_xlnet.transformer_outputs->self.transformer(input_ids, attention_mask=attention_mask, mems=mems, perm_mask=perm_mask, target_mapping=target_mapping, token_type_ids=token_type_ids, input_mask=input_mask, head_mask=head_mask, inputs_embeds=inputs_embeds, use_mems=use_mems, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, **kwargs)
A:transformers.models.xlnet.modeling_xlnet.logits->self.qa_outputs(sequence_output)
A:transformers.models.xlnet.modeling_xlnet.loss_fct->CrossEntropyLoss()
A:transformers.models.xlnet.modeling_xlnet.loss->loss_fct(reshaped_logits, labels.view(-1))
A:transformers.models.xlnet.modeling_xlnet.self.sequence_summary->SequenceSummary(config)
A:transformers.models.xlnet.modeling_xlnet.self.logits_proj->torch.nn.Linear(config.d_model, 1)
A:transformers.models.xlnet.modeling_xlnet.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.xlnet.modeling_xlnet.active_logits->self.qa_outputs(sequence_output).view(-1, self.num_labels)
A:transformers.models.xlnet.modeling_xlnet.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.xlnet.modeling_xlnet.reshaped_logits->self.qa_outputs(sequence_output).view(-1, num_choices)
A:transformers.models.xlnet.modeling_xlnet.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.xlnet.modeling_xlnet.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.xlnet.modeling_xlnet.start_logits->self.start_logits(hidden_states, p_mask=p_mask)
A:transformers.models.xlnet.modeling_xlnet.end_logits->self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)
A:transformers.models.xlnet.modeling_xlnet.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.xlnet.modeling_xlnet.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.xlnet.modeling_xlnet.ignored_index->self.start_logits(hidden_states, p_mask=p_mask).size(1)
A:transformers.models.xlnet.modeling_xlnet.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.xlnet.modeling_xlnet.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.xlnet.modeling_xlnet.self.start_logits->PoolerStartLogits(config)
A:transformers.models.xlnet.modeling_xlnet.self.end_logits->PoolerEndLogits(config)
A:transformers.models.xlnet.modeling_xlnet.self.answer_class->PoolerAnswerClass(config)
A:transformers.models.xlnet.modeling_xlnet.cls_logits->self.answer_class(hidden_states, start_states=start_states, cls_index=cls_index)
A:transformers.models.xlnet.modeling_xlnet.loss_fct_cls->torch.nn.BCEWithLogitsLoss()
A:transformers.models.xlnet.modeling_xlnet.cls_loss->loss_fct_cls(cls_logits, is_impossible)
A:transformers.models.xlnet.modeling_xlnet.(bsz, slen, hsz)->tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states)).size()
A:transformers.models.xlnet.modeling_xlnet.start_log_probs->torch.nn.functional.softmax(start_logits, dim=-1)
A:transformers.models.xlnet.modeling_xlnet.(start_top_log_probs, start_top_index)->torch.topk(start_log_probs, self.start_n_top, dim=-1)
A:transformers.models.xlnet.modeling_xlnet.start_top_index_exp->start_top_index.unsqueeze(-1).expand(-1, -1, hsz)
A:transformers.models.xlnet.modeling_xlnet.start_states->torch.einsum('blh,bl->bh', hidden_states, start_log_probs)
A:transformers.models.xlnet.modeling_xlnet.hidden_states_expanded->tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states)).unsqueeze(2).expand_as(start_states)
A:transformers.models.xlnet.modeling_xlnet.end_log_probs->torch.nn.functional.softmax(end_logits, dim=1)
A:transformers.models.xlnet.modeling_xlnet.(end_top_log_probs, end_top_index)->torch.topk(end_log_probs, self.end_n_top, dim=1)
A:transformers.models.xlnet.modeling_xlnet.end_top_log_probs->end_top_log_probs.view(-1, self.start_n_top * self.end_n_top).view(-1, self.start_n_top * self.end_n_top)
A:transformers.models.xlnet.modeling_xlnet.end_top_index->end_top_index.view(-1, self.start_n_top * self.end_n_top).view(-1, self.start_n_top * self.end_n_top)
transformers.XLNetForMultipleChoice(self,config)
transformers.XLNetForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,input_mask=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetForMultipleChoiceOutput(ModelOutput)
transformers.XLNetForQuestionAnswering(self,config)
transformers.XLNetForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,is_impossible=None,cls_index=None,p_mask=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetForQuestionAnsweringOutput(ModelOutput)
transformers.XLNetForQuestionAnsweringSimple(self,config)
transformers.XLNetForQuestionAnsweringSimple.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetForQuestionAnsweringSimpleOutput(ModelOutput)
transformers.XLNetForSequenceClassification(self,config)
transformers.XLNetForSequenceClassification.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetForSequenceClassificationOutput(ModelOutput)
transformers.XLNetForTokenClassification(self,config)
transformers.XLNetForTokenClassification.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetForTokenClassificationOutput(ModelOutput)
transformers.XLNetLMHeadModel(self,config)
transformers.XLNetLMHeadModel.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetLMHeadModel.get_output_embeddings(self)
transformers.XLNetLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,use_mems=None,**kwargs)
transformers.XLNetLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.XLNetLMHeadModelOutput(ModelOutput)
transformers.XLNetModel(self,config)
transformers.XLNetModel._prune_heads(self,heads_to_prune)
transformers.XLNetModel.cache_mem(self,curr_out,prev_mem)
transformers.XLNetModel.create_mask(self,qlen,mlen)
transformers.XLNetModel.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.XLNetModel.get_input_embeddings(self)
transformers.XLNetModel.positional_embedding(pos_seq,inv_freq,bsz=None)
transformers.XLNetModel.relative_positional_encoding(self,qlen,klen,bsz=None)
transformers.XLNetModel.set_input_embeddings(self,new_embeddings)
transformers.XLNetModelOutput(ModelOutput)
transformers.XLNetPreTrainedModel(PreTrainedModel)
transformers.XLNetPreTrainedModel._init_weights(self,module)
transformers.load_tf_weights_in_xlnet(model,config,tf_path)
transformers.models.xlnet.modeling_xlnet.XLNetFeedForward(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetFeedForward.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetFeedForward.forward(self,inp)
transformers.models.xlnet.modeling_xlnet.XLNetForMultipleChoice(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForMultipleChoice.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,input_mask=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetForMultipleChoiceOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnswering(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnswering.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,is_impossible=None,cls_index=None,p_mask=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimple(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimple.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimple.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,start_positions=None,end_positions=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimpleOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetForSequenceClassification(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForSequenceClassification.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForSequenceClassification.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetForSequenceClassificationOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetForTokenClassification(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForTokenClassification.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetForTokenClassification.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetForTokenClassificationOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,labels=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel.get_output_embeddings(self)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel.prepare_inputs_for_generation(self,input_ids,past=None,use_mems=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModel.set_output_embeddings(self,new_embeddings)
transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModelOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetLayer(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetLayer.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetLayer.ff_chunk(self,output_x)
transformers.models.xlnet.modeling_xlnet.XLNetLayer.forward(self,output_h,output_g,attn_mask_h,attn_mask_g,r,seg_mat,mems=None,target_mapping=None,head_mask=None,output_attentions=False)
transformers.models.xlnet.modeling_xlnet.XLNetModel(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetModel.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetModel._prune_heads(self,heads_to_prune)
transformers.models.xlnet.modeling_xlnet.XLNetModel.cache_mem(self,curr_out,prev_mem)
transformers.models.xlnet.modeling_xlnet.XLNetModel.create_mask(self,qlen,mlen)
transformers.models.xlnet.modeling_xlnet.XLNetModel.forward(self,input_ids=None,attention_mask=None,mems=None,perm_mask=None,target_mapping=None,token_type_ids=None,input_mask=None,head_mask=None,inputs_embeds=None,use_mems=None,output_attentions=None,output_hidden_states=None,return_dict=None,**kwargs)
transformers.models.xlnet.modeling_xlnet.XLNetModel.get_input_embeddings(self)
transformers.models.xlnet.modeling_xlnet.XLNetModel.positional_embedding(pos_seq,inv_freq,bsz=None)
transformers.models.xlnet.modeling_xlnet.XLNetModel.relative_positional_encoding(self,qlen,klen,bsz=None)
transformers.models.xlnet.modeling_xlnet.XLNetModel.set_input_embeddings(self,new_embeddings)
transformers.models.xlnet.modeling_xlnet.XLNetModelOutput(ModelOutput)
transformers.models.xlnet.modeling_xlnet.XLNetPreTrainedModel(PreTrainedModel)
transformers.models.xlnet.modeling_xlnet.XLNetPreTrainedModel._init_weights(self,module)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.__init__(self,config)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.forward(self,h,g,attn_mask_h,attn_mask_g,r,seg_mat,mems=None,target_mapping=None,head_mask=None,output_attentions=False)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.post_attention(self,h,attn_vec,residual=True)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.prune_heads(self,heads)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.rel_attn_core(self,q_head,k_head_h,v_head_h,k_head_r,seg_mat=None,attn_mask=None,head_mask=None,output_attentions=False)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.rel_shift(x,klen=-1)
transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij(x,klen=-1)
transformers.models.xlnet.modeling_xlnet.build_tf_xlnet_to_pytorch_map(model,config,tf_weights=None)
transformers.models.xlnet.modeling_xlnet.load_tf_weights_in_xlnet(model,config,tf_path)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/fsmt/modeling_fsmt.py----------------------------------------
A:transformers.models.fsmt.modeling_fsmt.logger->utils.logging.get_logger(__name__)
A:transformers.models.fsmt.modeling_fsmt.decoder_input_ids->shift_tokens_right(input_ids, pad_token_id)
A:transformers.models.fsmt.modeling_fsmt.(bsz, tgt_len)->shift_tokens_right(input_ids, pad_token_id).size()
A:transformers.models.fsmt.modeling_fsmt.decoder_padding_mask->invert_mask(decoder_padding_mask)
A:transformers.models.fsmt.modeling_fsmt.causal_mask->torch.triu(fill_with_neg_inf(torch.zeros(tgt_len, tgt_len)), 1).to(dtype=causal_mask_dtype, device=decoder_input_ids.device)
A:transformers.models.fsmt.modeling_fsmt.input_ids->torch.tensor([[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]], device=self.device)
A:transformers.models.fsmt.modeling_fsmt.lin_layer->torch.nn.Linear(vocab_size, emb_size, bias=False)
A:transformers.models.fsmt.modeling_fsmt.prev_output_tokens->torch.tensor([[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]], device=self.device).clone()
A:transformers.models.fsmt.modeling_fsmt.index_of_eos->(input_ids.ne(pad_token_id).sum(dim=1) - 1).unsqueeze(-1)
A:transformers.models.fsmt.modeling_fsmt.prev_output_tokens[:, 0]->torch.tensor([[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]], device=self.device).gather(1, index_of_eos).squeeze()
A:transformers.models.fsmt.modeling_fsmt.padding_mask->torch.tensor([[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]], device=self.device).eq(padding_idx)
A:transformers.models.fsmt.modeling_fsmt.self.self_attn->Attention(embed_dim=self.embed_dim, num_heads=config.decoder_attention_heads, dropout=config.attention_dropout)
A:transformers.models.fsmt.modeling_fsmt.self.self_attn_layer_norm->LayerNorm(self.embed_dim)
A:transformers.models.fsmt.modeling_fsmt.self.fc1->torch.nn.Linear(self.embed_dim, config.decoder_ffn_dim)
A:transformers.models.fsmt.modeling_fsmt.self.fc2->torch.nn.Linear(config.decoder_ffn_dim, self.embed_dim)
A:transformers.models.fsmt.modeling_fsmt.self.final_layer_norm->LayerNorm(self.embed_dim)
A:transformers.models.fsmt.modeling_fsmt.(x, attn_weights)->self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, output_attentions=output_attentions)
A:transformers.models.fsmt.modeling_fsmt.x->self.output_projection(x)
A:transformers.models.fsmt.modeling_fsmt.self.embed_positions->SinusoidalPositionalEmbedding(config.max_position_embeddings + self.padding_idx + 1, embed_dim, self.padding_idx)
A:transformers.models.fsmt.modeling_fsmt.self.layers->torch.nn.ModuleList([DecoderLayer(config) for _ in range(config.decoder_layers)])
A:transformers.models.fsmt.modeling_fsmt.attention_mask->invert_mask(attention_mask)
A:transformers.models.fsmt.modeling_fsmt.embed_pos->self.embed_positions(input_ids)
A:transformers.models.fsmt.modeling_fsmt.dropout_probability->random.uniform(0, 1)
A:transformers.models.fsmt.modeling_fsmt.(x, attn)->encoder_layer(x, attention_mask, output_attentions=output_attentions)
A:transformers.models.fsmt.modeling_fsmt.self.encoder_attn->Attention(self.embed_dim, config.decoder_attention_heads, dropout=config.attention_dropout, encoder_decoder_attention=True)
A:transformers.models.fsmt.modeling_fsmt.self.encoder_attn_layer_norm->LayerNorm(self.embed_dim)
A:transformers.models.fsmt.modeling_fsmt.(x, self_attn_weights)->self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, output_attentions=output_attentions)
A:transformers.models.fsmt.modeling_fsmt.(x, cross_attn_weights)->self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state, output_attentions=output_attentions)
A:transformers.models.fsmt.modeling_fsmt.self.output_projection->torch.nn.Linear(self.embed_tokens.weight.shape[1], self.embed_tokens.weight.shape[0], bias=False)
A:transformers.models.fsmt.modeling_fsmt.encoder_padding_mask->invert_mask(encoder_padding_mask)
A:transformers.models.fsmt.modeling_fsmt.positions->self.make_positions(input, self.padding_idx)
A:transformers.models.fsmt.modeling_fsmt.encoder_hidden_states->encoder_hidden_states.transpose(0, 1).transpose(0, 1)
A:transformers.models.fsmt.modeling_fsmt.(x, layer_self_attn, layer_past, layer_cross_attn)->decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask, output_attentions=output_attentions)
A:transformers.models.fsmt.modeling_fsmt.attn_cache[k]->input_buffer_k.index_select(0, new_order)
A:transformers.models.fsmt.modeling_fsmt.self.k_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.fsmt.modeling_fsmt.self.v_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.fsmt.modeling_fsmt.self.q_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.fsmt.modeling_fsmt.self.out_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.fsmt.modeling_fsmt.(tgt_len, bsz, embed_dim)->query.size()
A:transformers.models.fsmt.modeling_fsmt.saved_state->layer_state.get(self.cache_key, {})
A:transformers.models.fsmt.modeling_fsmt.k->torch.cat([prev_key, k], dim=1)
A:transformers.models.fsmt.modeling_fsmt.v->torch.cat([prev_value, v], dim=1)
A:transformers.models.fsmt.modeling_fsmt.q->self._shape(q, tgt_len, bsz)
A:transformers.models.fsmt.modeling_fsmt.(k, v, key_padding_mask)->self._use_saved_state(k, v, saved_state, key_padding_mask, static_kv, bsz)
A:transformers.models.fsmt.modeling_fsmt.src_len->torch.cat([prev_key, k], dim=1).size(1)
A:transformers.models.fsmt.modeling_fsmt.attn_weights->attn_weights.view(bsz, self.num_heads, tgt_len, src_len).view(bsz * self.num_heads, tgt_len, src_len)
A:transformers.models.fsmt.modeling_fsmt.reshaped->key_padding_mask.unsqueeze(1).unsqueeze(2)
A:transformers.models.fsmt.modeling_fsmt.attn_weights_reshaped->attn_weights.view(bsz, self.num_heads, tgt_len, src_len).view(bsz * self.num_heads, tgt_len, src_len).view(bsz, self.num_heads, tgt_len, src_len)
A:transformers.models.fsmt.modeling_fsmt.attn_probs->torch.nn.functional.dropout(attn_weights, p=self.dropout, training=self.training)
A:transformers.models.fsmt.modeling_fsmt.attn_output->self.out_proj(attn_output)
A:transformers.models.fsmt.modeling_fsmt.prev_key->_prev_key.view(bsz * self.num_heads, -1, self.head_dim)
A:transformers.models.fsmt.modeling_fsmt.prev_value->_prev_value.view(bsz * self.num_heads, -1, self.head_dim)
A:transformers.models.fsmt.modeling_fsmt.new_key_padding_mask->torch.cat([prev_key_padding_mask, key_padding_mask], dim=1)
A:transformers.models.fsmt.modeling_fsmt.encoder_embed_tokens->torch.nn.Embedding(config.src_vocab_size, config.d_model, padding_idx)
A:transformers.models.fsmt.modeling_fsmt.decoder_embed_tokens->torch.nn.Embedding(config.tgt_vocab_size, config.d_model, padding_idx)
A:transformers.models.fsmt.modeling_fsmt.self.encoder->FSMTEncoder(config, encoder_embed_tokens)
A:transformers.models.fsmt.modeling_fsmt.self.decoder->FSMTDecoder(config, decoder_embed_tokens)
A:transformers.models.fsmt.modeling_fsmt.(decoder_input_ids, decoder_padding_mask, causal_mask)->_prepare_fsmt_decoder_inputs(self.config, input_ids, decoder_input_ids=decoder_input_ids, decoder_padding_mask=decoder_attention_mask, causal_mask_dtype=self.decoder.embed_tokens.weight.dtype)
A:transformers.models.fsmt.modeling_fsmt.encoder_outputs->BaseModelOutput(last_hidden_state=encoder_outputs[0], hidden_states=encoder_outputs[1] if len(encoder_outputs) > 1 else None, attentions=encoder_outputs[2] if len(encoder_outputs) > 2 else None)
A:transformers.models.fsmt.modeling_fsmt.decoder_outputs->self.decoder(decoder_input_ids, encoder_outputs[0], attention_mask, decoder_padding_mask, decoder_causal_mask=causal_mask, past_key_values=past_key_values, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.fsmt.modeling_fsmt.base_model->FSMTModel(config)
A:transformers.models.fsmt.modeling_fsmt.new_embeddings->super().resize_token_embeddings(new_num_tokens)
A:transformers.models.fsmt.modeling_fsmt.outputs->self.model(input_ids, attention_mask=attention_mask, decoder_input_ids=decoder_input_ids, encoder_outputs=encoder_outputs, decoder_attention_mask=decoder_attention_mask, past_key_values=past_key_values, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.fsmt.modeling_fsmt.loss_fct->CrossEntropyLoss()
A:transformers.models.fsmt.modeling_fsmt.masked_lm_loss->loss_fct(lm_logits.view(-1, self.config.tgt_vocab_size), labels.view(-1))
A:transformers.models.fsmt.modeling_fsmt.all_but_token_ids_mask->torch.tensor([x for x in range(self.config.tgt_vocab_size) if x not in token_ids], dtype=torch.long, device=next(self.parameters()).device)
A:transformers.models.fsmt.modeling_fsmt.weight->weight.to(self.weight.device).to(self.weight.device)
A:transformers.models.fsmt.modeling_fsmt.self.weight->torch.nn.Parameter(weight)
A:transformers.models.fsmt.modeling_fsmt.emb->torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)
A:transformers.models.fsmt.modeling_fsmt.mask->tensor.ne(padding_idx).int()
transformers.FSMTForConditionalGeneration(self,config:FSMTConfig)
transformers.FSMTForConditionalGeneration._force_token_ids_generation(self,scores,token_ids)->None
transformers.FSMTForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.FSMTForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.FSMTForConditionalGeneration.forward(self,input_ids,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FSMTForConditionalGeneration.get_encoder(self)
transformers.FSMTForConditionalGeneration.get_output_embeddings(self)
transformers.FSMTForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.FSMTForConditionalGeneration.resize_token_embeddings(self,new_num_tokens:int)->nn.Embedding
transformers.FSMTModel(self,config:FSMTConfig)
transformers.FSMTModel.forward(self,input_ids,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Tuple]=None,past_key_values=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.FSMTModel.get_input_embeddings(self)
transformers.FSMTModel.get_output_embeddings(self)
transformers.FSMTModel.set_input_embeddings(self,value)
transformers.FSMTModel.set_output_embeddings(self,value)
transformers.PretrainedFSMTModel(PreTrainedModel)
transformers.PretrainedFSMTModel._init_weights(self,module)
transformers.PretrainedFSMTModel.dummy_inputs(self)
transformers.models.fsmt.modeling_fsmt.Attention(self,embed_dim,num_heads,dropout=0.0,bias=True,encoder_decoder_attention=False)
transformers.models.fsmt.modeling_fsmt.Attention.__init__(self,embed_dim,num_heads,dropout=0.0,bias=True,encoder_decoder_attention=False)
transformers.models.fsmt.modeling_fsmt.Attention._shape(self,tensor,seq_len,bsz)
transformers.models.fsmt.modeling_fsmt.Attention._use_saved_state(self,k,v,saved_state,key_padding_mask,static_kv,bsz)
transformers.models.fsmt.modeling_fsmt.Attention.forward(self,query,key:Optional[Tensor],key_padding_mask:Optional[Tensor]=None,layer_state:Optional[Dict[str,Optional[Tensor]]]=None,attn_mask:Optional[Tensor]=None,output_attentions=False)->Tuple[Tensor, Optional[Tensor]]
transformers.models.fsmt.modeling_fsmt.DecoderLayer(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.DecoderLayer.__init__(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.DecoderLayer.forward(self,x,encoder_hidden_states,encoder_attn_mask=None,layer_state=None,causal_mask=None,decoder_padding_mask=None,output_attentions=False)
transformers.models.fsmt.modeling_fsmt.EncoderLayer(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.EncoderLayer.__init__(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.EncoderLayer.forward(self,x,encoder_padding_mask,output_attentions=False)
transformers.models.fsmt.modeling_fsmt.FSMTDecoder(self,config:FSMTConfig,embed_tokens:nn.Embedding)
transformers.models.fsmt.modeling_fsmt.FSMTDecoder.__init__(self,config:FSMTConfig,embed_tokens:nn.Embedding)
transformers.models.fsmt.modeling_fsmt.FSMTDecoder.forward(self,input_ids,encoder_hidden_states,encoder_padding_mask,decoder_padding_mask,decoder_causal_mask,past_key_values=None,use_cache=False,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.fsmt.modeling_fsmt.FSMTEncoder(self,config:FSMTConfig,embed_tokens)
transformers.models.fsmt.modeling_fsmt.FSMTEncoder.__init__(self,config:FSMTConfig,embed_tokens)
transformers.models.fsmt.modeling_fsmt.FSMTEncoder.forward(self,input_ids,attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.__init__(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration._force_token_ids_generation(self,scores,token_ids)->None
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.forward(self,input_ids,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.get_encoder(self)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.get_output_embeddings(self)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.models.fsmt.modeling_fsmt.FSMTForConditionalGeneration.resize_token_embeddings(self,new_num_tokens:int)->nn.Embedding
transformers.models.fsmt.modeling_fsmt.FSMTModel(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.FSMTModel.__init__(self,config:FSMTConfig)
transformers.models.fsmt.modeling_fsmt.FSMTModel.forward(self,input_ids,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Tuple]=None,past_key_values=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.fsmt.modeling_fsmt.FSMTModel.get_input_embeddings(self)
transformers.models.fsmt.modeling_fsmt.FSMTModel.get_output_embeddings(self)
transformers.models.fsmt.modeling_fsmt.FSMTModel.set_input_embeddings(self,value)
transformers.models.fsmt.modeling_fsmt.FSMTModel.set_output_embeddings(self,value)
transformers.models.fsmt.modeling_fsmt.PretrainedFSMTModel(PreTrainedModel)
transformers.models.fsmt.modeling_fsmt.PretrainedFSMTModel._init_weights(self,module)
transformers.models.fsmt.modeling_fsmt.PretrainedFSMTModel.dummy_inputs(self)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding(self,num_positions,embedding_dim,padding_idx)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding.__init__(self,num_positions,embedding_dim,padding_idx)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding.forward(self,input,incremental_state:Optional[Any]=None,timestep:Optional[Tensor]=None)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding.get_embedding(num_embeddings,embedding_dim,padding_idx)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding.make_positions(tensor,padding_idx:int)
transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding.make_weight(self,num_positions,embedding_dim,padding_idx)
transformers.models.fsmt.modeling_fsmt._check_shapes(shape_1,shape2)
transformers.models.fsmt.modeling_fsmt._get_shape(t)
transformers.models.fsmt.modeling_fsmt._make_linear_from_emb(emb)
transformers.models.fsmt.modeling_fsmt._prepare_fsmt_decoder_inputs(config,input_ids,decoder_input_ids=None,decoder_padding_mask=None,causal_mask_dtype=torch.float32)
transformers.models.fsmt.modeling_fsmt._reorder_buffer(attn_cache,new_order)
transformers.models.fsmt.modeling_fsmt.fill_with_neg_inf(t)
transformers.models.fsmt.modeling_fsmt.invert_mask(attention_mask)
transformers.models.fsmt.modeling_fsmt.make_padding_mask(input_ids,padding_idx=1)
transformers.models.fsmt.modeling_fsmt.shift_tokens_right(input_ids,pad_token_id)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/fsmt/convert_fsmt_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.d2->dict(((re.sub('@@$', '', k), v) if k.endswith('@@') else (re.sub('$', '</w>', k), v) for (k, v) in d.items()))
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.keep_keys->'<s> <pad> </s> <unk>'.split()
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.checkpoint_file->basename(fsmt_checkpoint_path)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.fsmt_folder_path->dirname(fsmt_checkpoint_path)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.models->cls.hub_models()
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.chkpt->fairseq.hub_utils.from_pretrained(fsmt_folder_path, checkpoint_file, data_name_or_path, archive_map=models, **kwargs)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.data_root->dirname(pytorch_dump_folder_path)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.model_dir->basename(pytorch_dump_folder_path)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.src_dict_file->os.path.join(fsmt_folder_path, f'dict.{src_lang}.txt')
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.tgt_dict_file->os.path.join(fsmt_folder_path, f'dict.{tgt_lang}.txt')
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.src_dict->fairseq.data.dictionary.Dictionary.load(src_dict_file)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.src_vocab->rewrite_dict_keys(src_dict.indices)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.src_vocab_size->len(src_vocab)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.src_vocab_file->os.path.join(pytorch_dump_folder_path, 'vocab-src.json')
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.tgt_dict->fairseq.data.dictionary.Dictionary.load(tgt_dict_file)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.tgt_vocab->rewrite_dict_keys(tgt_dict.indices)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.tgt_vocab_size->len(tgt_vocab)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.tgt_vocab_file->os.path.join(pytorch_dump_folder_path, 'vocab-tgt.json')
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.merges_file->os.path.join(pytorch_dump_folder_path, VOCAB_FILES_NAMES['merges_file'])
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.fsmt_merges_file->os.path.join(fsmt_folder_path, fn)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.merges->re.sub(' \\d+$', '', merges, 0, re.M)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.fsmt_model_config_file->os.path.join(pytorch_dump_folder_path, 'config.json')
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.fsmt_tokenizer_config_file->os.path.join(pytorch_dump_folder_path, TOKENIZER_CONFIG_FILE)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.model_state_dict->OrderedDict((('model.' + k, v) for (k, v) in model_state_dict.items()))
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.config->transformers.models.fsmt.FSMTConfig.from_pretrained(pytorch_dump_folder_path)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.model_new->FSMTForConditionalGeneration(config)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.pytorch_weights_dump_path->os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)
A:transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.convert_fsmt_checkpoint_to_pytorch(fsmt_checkpoint_path,pytorch_dump_folder_path)
transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.rewrite_dict_keys(d)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/fsmt/configuration_fsmt.py----------------------------------------
A:transformers.models.fsmt.configuration_fsmt.logger->utils.logging.get_logger(__name__)
A:transformers.models.fsmt.configuration_fsmt.self.decoder->DecoderConfig(vocab_size=tgt_vocab_size, bos_token_id=eos_token_id)
A:transformers.models.fsmt.configuration_fsmt.output->copy.deepcopy(self.__dict__)
A:transformers.models.fsmt.configuration_fsmt.output['decoder']->self.decoder.to_dict()
transformers.FSMTConfig(self,langs=['en','de'],src_vocab_size=42024,tgt_vocab_size=42024,activation_function='relu',d_model=1024,max_length=200,max_position_embeddings=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,encoder_layerdrop=0.0,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,activation_dropout=0.0,init_std=0.02,decoder_start_token_id=2,is_encoder_decoder=True,scale_embedding=True,tie_word_embeddings=False,num_beams=5,length_penalty=1.0,early_stopping=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.FSMTConfig.hidden_size(self)->int
transformers.FSMTConfig.num_attention_heads(self)->int
transformers.FSMTConfig.to_dict(self)
transformers.models.fsmt.configuration_fsmt.DecoderConfig(self,vocab_size=0,bos_token_id=0)
transformers.models.fsmt.configuration_fsmt.DecoderConfig.__init__(self,vocab_size=0,bos_token_id=0)
transformers.models.fsmt.configuration_fsmt.FSMTConfig(self,langs=['en','de'],src_vocab_size=42024,tgt_vocab_size=42024,activation_function='relu',d_model=1024,max_length=200,max_position_embeddings=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,encoder_layerdrop=0.0,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,activation_dropout=0.0,init_std=0.02,decoder_start_token_id=2,is_encoder_decoder=True,scale_embedding=True,tie_word_embeddings=False,num_beams=5,length_penalty=1.0,early_stopping=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.models.fsmt.configuration_fsmt.FSMTConfig.__init__(self,langs=['en','de'],src_vocab_size=42024,tgt_vocab_size=42024,activation_function='relu',d_model=1024,max_length=200,max_position_embeddings=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,encoder_layerdrop=0.0,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,activation_dropout=0.0,init_std=0.02,decoder_start_token_id=2,is_encoder_decoder=True,scale_embedding=True,tie_word_embeddings=False,num_beams=5,length_penalty=1.0,early_stopping=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.models.fsmt.configuration_fsmt.FSMTConfig.hidden_size(self)->int
transformers.models.fsmt.configuration_fsmt.FSMTConfig.num_attention_heads(self)->int
transformers.models.fsmt.configuration_fsmt.FSMTConfig.to_dict(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/fsmt/tokenization_fsmt.py----------------------------------------
A:transformers.models.fsmt.tokenization_fsmt.logger->utils.logging.get_logger(__name__)
A:transformers.models.fsmt.tokenization_fsmt.pairs->get_pairs(word)
A:transformers.models.fsmt.tokenization_fsmt.text->self.moses_detokenize(tokens, self.tgt_lang)
A:transformers.models.fsmt.tokenization_fsmt.cat->unicodedata.category(char)
A:transformers.models.fsmt.tokenization_fsmt.self.cache_moses_punct_normalizer->dict()
A:transformers.models.fsmt.tokenization_fsmt.self.cache_moses_tokenizer->dict()
A:transformers.models.fsmt.tokenization_fsmt.self.cache_moses_detokenizer->dict()
A:transformers.models.fsmt.tokenization_fsmt.self.encoder->json.load(src_vocab_handle)
A:transformers.models.fsmt.tokenization_fsmt.tgt_vocab->json.load(tgt_vocab_handle)
A:transformers.models.fsmt.tokenization_fsmt.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.fsmt.tokenization_fsmt.punct_normalizer->sacremoses.MosesPunctNormalizer(lang=lang)
A:transformers.models.fsmt.tokenization_fsmt.moses_tokenizer->sacremoses.MosesTokenizer(lang=lang)
A:transformers.models.fsmt.tokenization_fsmt.moses_detokenizer->sacremoses.MosesDetokenizer(lang=self.tgt_lang)
A:transformers.models.fsmt.tokenization_fsmt.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.fsmt.tokenization_fsmt.j->' '.join(word).index(first, i)
A:transformers.models.fsmt.tokenization_fsmt.new_word->tuple(new_word)
A:transformers.models.fsmt.tokenization_fsmt.word->' '.join(word)
A:transformers.models.fsmt.tokenization_fsmt.tokens->''.join(tokens).split()
A:transformers.models.fsmt.tokenization_fsmt.tokenizer_kwargs->dict(add_special_tokens=True, return_tensors=return_tensors, max_length=max_length, truncation=truncation, padding=padding)
A:transformers.models.fsmt.tokenization_fsmt.src_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['src_vocab_file'])
A:transformers.models.fsmt.tokenization_fsmt.tgt_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['tgt_vocab_file'])
A:transformers.models.fsmt.tokenization_fsmt.merges_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
transformers.FSMTTokenizer(self,langs=None,src_vocab_file=None,tgt_vocab_file=None,merges_file=None,do_lower_case=False,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',**kwargs)
transformers.FSMTTokenizer._convert_id_to_token(self,index)
transformers.FSMTTokenizer._convert_token_to_id(self,token)
transformers.FSMTTokenizer._tokenize(self,text,lang='en',bypass_tokenizer=False)
transformers.FSMTTokenizer.bpe(self,token)
transformers.FSMTTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.FSMTTokenizer.convert_tokens_to_string(self,tokens)
transformers.FSMTTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.FSMTTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.FSMTTokenizer.get_src_vocab(self)
transformers.FSMTTokenizer.get_tgt_vocab(self)
transformers.FSMTTokenizer.get_vocab(self)->Dict[str, int]
transformers.FSMTTokenizer.moses_detokenize(self,tokens,lang)
transformers.FSMTTokenizer.moses_pipeline(self,text,lang)
transformers.FSMTTokenizer.moses_punct_norm(self,text,lang)
transformers.FSMTTokenizer.moses_tokenize(self,text,lang)
transformers.FSMTTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:Optional[str]=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.FSMTTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.FSMTTokenizer.src_vocab_size(self)
transformers.FSMTTokenizer.tgt_vocab_size(self)
transformers.FSMTTokenizer.vocab_size(self)->int
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer(self,langs=None,src_vocab_file=None,tgt_vocab_file=None,merges_file=None,do_lower_case=False,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',**kwargs)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.__init__(self,langs=None,src_vocab_file=None,tgt_vocab_file=None,merges_file=None,do_lower_case=False,unk_token='<unk>',bos_token='<s>',sep_token='</s>',pad_token='<pad>',**kwargs)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer._convert_id_to_token(self,index)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer._convert_token_to_id(self,token)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer._tokenize(self,text,lang='en',bypass_tokenizer=False)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.bpe(self,token)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.get_src_vocab(self)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.get_tgt_vocab(self)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.get_vocab(self)->Dict[str, int]
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.moses_detokenize(self,tokens,lang)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.moses_pipeline(self,text,lang)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.moses_punct_norm(self,text,lang)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.moses_tokenize(self,text,lang)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,return_tensors:Optional[str]=None,truncation=True,padding='longest',**unused)->BatchEncoding
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.src_vocab_size(self)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.tgt_vocab_size(self)
transformers.models.fsmt.tokenization_fsmt.FSMTTokenizer.vocab_size(self)->int
transformers.models.fsmt.tokenization_fsmt.get_pairs(word)
transformers.models.fsmt.tokenization_fsmt.remove_non_printing_char(text)
transformers.models.fsmt.tokenization_fsmt.replace_unicode_punct(text)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/fsmt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/tokenization_longformer_fast.py----------------------------------------
A:transformers.models.longformer.tokenization_longformer_fast.logger->utils.logging.get_logger(__name__)
transformers.LongformerTokenizerFast(RobertaTokenizerFast)
transformers.models.longformer.tokenization_longformer_fast.LongformerTokenizerFast(RobertaTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/convert_longformer_original_pytorch_lightning_to_pytorch.py----------------------------------------
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.self.qa_outputs->torch.nn.Linear(self.model.config.hidden_size, self.num_labels)
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.longformer->transformers.LongformerModel.from_pretrained(longformer_model)
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.lightning_model->LightningModel(longformer)
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.ckpt->torch.load(longformer_question_answering_ckpt_path, map_location=torch.device('cpu'))
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.longformer_for_qa->transformers.LongformerForQuestionAnswering.from_pretrained(longformer_model)
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.LightningModel(self,model)
transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.LightningModel.__init__(self,model)
transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.LightningModel.forward(self)
transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.convert_longformer_qa_checkpoint_to_pytorch(longformer_model:str,longformer_question_answering_ckpt_path:str,pytorch_dump_folder_path:str)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/modeling_tf_longformer.py----------------------------------------
A:transformers.models.longformer.modeling_tf_longformer.logger->utils.logging.get_logger(__name__)
A:transformers.models.longformer.modeling_tf_longformer.question_end_index->tensorflow.cast(question_end_index[:, None], tf.dtypes.int32)
A:transformers.models.longformer.modeling_tf_longformer.attention_mask->tensorflow.constant([[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]])
A:transformers.models.longformer.modeling_tf_longformer.self.dense->tensorflow.keras.layers.Dense(config.hidden_size, kernel_initializer=get_initializer(config.initializer_range), activation='tanh', name='dense')
A:transformers.models.longformer.modeling_tf_longformer.self.layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='layer_norm')
A:transformers.models.longformer.modeling_tf_longformer.self.act->get_tf_activation('gelu')
A:transformers.models.longformer.modeling_tf_longformer.self.bias->self.add_weight(shape=(self.vocab_size,), initializer='zeros', trainable=True, name='bias')
A:transformers.models.longformer.modeling_tf_longformer.hidden_states->self.dropout(hidden_states, training=training)
A:transformers.models.longformer.modeling_tf_longformer.self.position_embeddings->tensorflow.keras.layers.Embedding(config.max_position_embeddings, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='position_embeddings')
A:transformers.models.longformer.modeling_tf_longformer.self.token_type_embeddings->tensorflow.keras.layers.Embedding(config.type_vocab_size, config.hidden_size, embeddings_initializer=get_initializer(self.initializer_range), name='token_type_embeddings')
A:transformers.models.longformer.modeling_tf_longformer.self.LayerNorm->tensorflow.keras.layers.LayerNormalization(epsilon=config.layer_norm_eps, name='LayerNorm')
A:transformers.models.longformer.modeling_tf_longformer.self.dropout->tensorflow.keras.layers.Dropout(config.hidden_dropout_prob)
A:transformers.models.longformer.modeling_tf_longformer.self.word_embeddings->self.add_weight('weight', shape=[self.vocab_size, self.hidden_size], initializer=get_initializer(self.initializer_range))
A:transformers.models.longformer.modeling_tf_longformer.input_ids_shape->shape_list(input_ids)
A:transformers.models.longformer.modeling_tf_longformer.input_ids->tensorflow.constant(MULTIPLE_CHOICE_DUMMY_INPUTS)
A:transformers.models.longformer.modeling_tf_longformer.mask->tensorflow.cast(tf.math.not_equal(input_ids, self.padding_idx), dtype=tf.int32)
A:transformers.models.longformer.modeling_tf_longformer.position_ids->tensorflow.pad(position_ids, paddings, constant_values=pad_token_id)
A:transformers.models.longformer.modeling_tf_longformer.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.longformer.modeling_tf_longformer.token_type_ids->tensorflow.pad(token_type_ids, paddings, constant_values=0)
A:transformers.models.longformer.modeling_tf_longformer.inputs_embeds->tensorflow.concat([inputs_embeds, inputs_embeds_padding], axis=-2)
A:transformers.models.longformer.modeling_tf_longformer.position_embeddings->tensorflow.cast(self.position_embeddings(position_ids), inputs_embeds.dtype)
A:transformers.models.longformer.modeling_tf_longformer.token_type_embeddings->tensorflow.cast(self.token_type_embeddings(token_type_ids), inputs_embeds.dtype)
A:transformers.models.longformer.modeling_tf_longformer.embeddings->self.dropout(embeddings, training=training)
A:transformers.models.longformer.modeling_tf_longformer.x->tensorflow.reshape(inputs, [-1, self.hidden_size])
A:transformers.models.longformer.modeling_tf_longformer.logits->self.classifier(sequence_output)
A:transformers.models.longformer.modeling_tf_longformer.self.intermediate_act_fn->get_tf_activation(config.hidden_act)
A:transformers.models.longformer.modeling_tf_longformer.pooled_output->self.dropout(pooled_output)
A:transformers.models.longformer.modeling_tf_longformer.self.head_dim->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.longformer.modeling_tf_longformer.self.query->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='query')
A:transformers.models.longformer.modeling_tf_longformer.self.key->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='key')
A:transformers.models.longformer.modeling_tf_longformer.self.value->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='value')
A:transformers.models.longformer.modeling_tf_longformer.self.query_global->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='query_global')
A:transformers.models.longformer.modeling_tf_longformer.self.key_global->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='key_global')
A:transformers.models.longformer.modeling_tf_longformer.self.value_global->tensorflow.keras.layers.Dense(self.embed_dim, kernel_initializer=get_initializer(config.initializer_range), name='value_global')
A:transformers.models.longformer.modeling_tf_longformer.self.global_dropout->tensorflow.keras.layers.Dropout(config.attention_probs_dropout_prob)
A:transformers.models.longformer.modeling_tf_longformer.query_vectors->tensorflow.reshape(query_vectors, (batch_size, seq_len, self.num_heads, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.key_vectors->tensorflow.reshape(key_vectors, (batch_size, seq_len, self.num_heads, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.value_vectors->tensorflow.reshape(value_vectors, (batch_size, seq_len, self.num_heads, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.(batch_size, seq_len, embed_dim)->shape_list(hidden_states)
A:transformers.models.longformer.modeling_tf_longformer.attn_scores->tensorflow.concat((attn_probs_from_global_key, attn_scores), axis=-1)
A:transformers.models.longformer.modeling_tf_longformer.diagonal_mask->self._sliding_chunks_query_key_matmul(tf.ones(shape_list(attention_mask), dtype=tf.float32), attention_mask, self.one_sided_attn_window_size)
A:transformers.models.longformer.modeling_tf_longformer.(max_num_global_attn_indices, is_index_global_attn_nonzero, is_local_index_global_attn_nonzero, is_local_index_no_global_attn_nonzero)->self._get_global_attn_indices(is_index_global_attn)
A:transformers.models.longformer.modeling_tf_longformer.attn_probs->tensorflow.where(tf.broadcast_to(is_index_global_attn[:, :, None, None], shape_list(attn_probs)), tf.zeros(shape_list(attn_probs), dtype=tf.dtypes.float32), attn_probs)
A:transformers.models.longformer.modeling_tf_longformer.attn_output->tensorflow.tensor_scatter_nd_update(attn_output, is_index_global_attn_nonzero, nonzero_global_attn_output)
A:transformers.models.longformer.modeling_tf_longformer.(attn_output, global_attn_probs)->tensorflow.cond(is_global_attn, lambda : self._compute_global_attn_output_from_hidden(attn_output=attn_output, hidden_states=hidden_states, max_num_global_attn_indices=max_num_global_attn_indices, is_local_index_global_attn_nonzero=is_local_index_global_attn_nonzero, is_index_global_attn_nonzero=is_index_global_attn_nonzero, is_local_index_no_global_attn_nonzero=is_local_index_no_global_attn_nonzero, is_index_masked=is_index_masked, training=training), lambda : (attn_output, tf.zeros((batch_size, self.num_heads, max_num_global_attn_indices, seq_len))))
A:transformers.models.longformer.modeling_tf_longformer.(batch_size, seq_len, num_heads, head_dim)->shape_list(value)
A:transformers.models.longformer.modeling_tf_longformer.query->tensorflow.reshape(tf.transpose(query, (0, 2, 1, 3)), (batch_size * num_heads, seq_len, head_dim))
A:transformers.models.longformer.modeling_tf_longformer.key->tensorflow.reshape(tf.transpose(key, (0, 2, 1, 3)), (batch_size * num_heads, seq_len, head_dim))
A:transformers.models.longformer.modeling_tf_longformer.chunked_query->self._chunk(query, window_overlap)
A:transformers.models.longformer.modeling_tf_longformer.chunked_key->self._chunk(key, window_overlap)
A:transformers.models.longformer.modeling_tf_longformer.chunked_attention_scores->tensorflow.einsum('bcxd,bcyd->bcxy', chunked_query, chunked_key)
A:transformers.models.longformer.modeling_tf_longformer.paddings->tensorflow.constant([[0, 0], [0, padding_len]])
A:transformers.models.longformer.modeling_tf_longformer.diagonal_chunked_attention_scores->self._pad_and_transpose_last_two_dims(chunked_attention_scores, paddings)
A:transformers.models.longformer.modeling_tf_longformer.diagonal_attn_scores_up_triang->tensorflow.concat([diagonal_chunked_attention_scores[:, :, :window_overlap, :window_overlap + 1], diagonal_chunked_attention_scores[:, -1:, window_overlap:, :window_overlap + 1]], axis=1)
A:transformers.models.longformer.modeling_tf_longformer.diagonal_attn_scores_low_triang->tensorflow.where(first_chunk_mask, diagonal_attn_scores_first_chunk, diagonal_attn_scores_low_triang)
A:transformers.models.longformer.modeling_tf_longformer.diagonal_attn_scores_first_chunk->tensorflow.concat([tf.roll(diagonal_chunked_attention_scores, shift=[1, window_overlap], axis=[2, 3])[:, :, :window_overlap, :window_overlap], tf.zeros((batch_size * num_heads, 1, window_overlap, window_overlap))], axis=1)
A:transformers.models.longformer.modeling_tf_longformer.diagonal_attention_scores->self._mask_invalid_locations(diagonal_attention_scores, window_overlap)
A:transformers.models.longformer.modeling_tf_longformer.mask_2d_upper->tensorflow.reverse(tf.linalg.band_part(tf.ones(shape=(window_overlap, window_overlap + 1)), -1, 0), axis=[0])
A:transformers.models.longformer.modeling_tf_longformer.padding->tensorflow.constant([[0, shape_list(input_tensor)[1] - window_overlap], [0, shape_list(input_tensor)[3] - window_overlap - 1]])
A:transformers.models.longformer.modeling_tf_longformer.mask_2d->tensorflow.pad(mask_2d_upper, padding)
A:transformers.models.longformer.modeling_tf_longformer.mask_4d->tensorflow.broadcast_to(mask_2d[None, :, None, :], shape_list(input_tensor))
A:transformers.models.longformer.modeling_tf_longformer.input_tensor->tensorflow.where(tf.math.greater(mask_4d, 0), inf_tensor, input_tensor)
A:transformers.models.longformer.modeling_tf_longformer.chunked_attn_probs->self._pad_and_diagonalize(chunked_attn_probs)
A:transformers.models.longformer.modeling_tf_longformer.value->tensorflow.reshape(tf.transpose(value, (0, 2, 1, 3)), (batch_size * num_heads, seq_len, head_dim))
A:transformers.models.longformer.modeling_tf_longformer.padded_value->tensorflow.pad(value, paddings, constant_values=-1)
A:transformers.models.longformer.modeling_tf_longformer.chunked_value->tensorflow.reshape(chunked_value, (batch_size * num_heads, chunks_count + 1, 3 * window_overlap, head_dim))
A:transformers.models.longformer.modeling_tf_longformer.context->tensorflow.transpose(tf.reshape(context, (batch_size, num_heads, seq_len, head_dim)), (0, 2, 1, 3))
A:transformers.models.longformer.modeling_tf_longformer.hidden_states_padded->tensorflow.reshape(hidden_states_padded, (batch_size, chunk_size, hidden_dim, seq_length))
A:transformers.models.longformer.modeling_tf_longformer.(batch_size, chunk_size, seq_length, hidden_dim)->shape_list(hidden_states_padded)
A:transformers.models.longformer.modeling_tf_longformer.(total_num_heads, num_chunks, window_overlap, hidden_dim)->shape_list(chunked_hidden_states)
A:transformers.models.longformer.modeling_tf_longformer.chunked_hidden_states->tensorflow.reshape(chunked_hidden_states, (batch_size, num_output_chunks, 2 * window_overlap, hidden_dim))
A:transformers.models.longformer.modeling_tf_longformer.(batch_size, seq_length, hidden_dim)->shape_list(hidden_states)
A:transformers.models.longformer.modeling_tf_longformer.num_global_attn_indices->tensorflow.reduce_sum(tf.cast(is_index_global_attn, dtype=tf.dtypes.int32), axis=1)
A:transformers.models.longformer.modeling_tf_longformer.max_num_global_attn_indices->tensorflow.reduce_max(num_global_attn_indices)
A:transformers.models.longformer.modeling_tf_longformer.is_index_global_attn_nonzero->tensorflow.where(is_index_global_attn)
A:transformers.models.longformer.modeling_tf_longformer.is_local_index_global_attn_nonzero->tensorflow.where(is_local_index_global_attn)
A:transformers.models.longformer.modeling_tf_longformer.is_local_index_no_global_attn_nonzero->tensorflow.where(tf.math.logical_not(is_local_index_global_attn))
A:transformers.models.longformer.modeling_tf_longformer.global_key_vectors->self.reshape_and_transpose(global_key_vectors, batch_size)
A:transformers.models.longformer.modeling_tf_longformer.key_vectors_only_global->tensorflow.scatter_nd(is_local_index_global_attn_nonzero, global_key_vectors, shape=(batch_size, max_num_global_attn_indices, self.num_heads, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.attn_probs_from_global_key->tensorflow.transpose(attn_probs_from_global_key_trans, (0, 2, 3, 1))
A:transformers.models.longformer.modeling_tf_longformer.attn_probs_from_global_key_trans->tensorflow.tensor_scatter_nd_update(attn_probs_from_global_key_trans, is_local_index_no_global_attn_nonzero, mask)
A:transformers.models.longformer.modeling_tf_longformer.global_value_vectors->self.reshape_and_transpose(global_value_vectors, batch_size)
A:transformers.models.longformer.modeling_tf_longformer.value_vectors_only_global->tensorflow.scatter_nd(is_local_index_global_attn_nonzero, global_value_vectors, shape=(batch_size, max_num_global_attn_indices, self.num_heads, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.attn_output_only_global->tensorflow.einsum('blhs,bshd->blhd', attn_probs_only_global, value_vectors_only_global)
A:transformers.models.longformer.modeling_tf_longformer.attn_output_without_global->self._sliding_chunks_matmul_attn_probs_value(attn_probs_without_global, value_vectors, self.one_sided_attn_window_size)
A:transformers.models.longformer.modeling_tf_longformer.global_attn_hidden_states->tensorflow.scatter_nd(is_local_index_global_attn_nonzero, global_attn_hidden_states, shape=(batch_size, max_num_global_attn_indices, self.embed_dim))
A:transformers.models.longformer.modeling_tf_longformer.global_query_vectors_only_global->self.reshape_and_transpose(global_query_vectors_only_global, batch_size)
A:transformers.models.longformer.modeling_tf_longformer.global_attn_scores->tensorflow.reshape(global_attn_scores, (batch_size * self.num_heads, max_num_global_attn_indices, seq_len))
A:transformers.models.longformer.modeling_tf_longformer.global_attn_scores_trans->tensorflow.tensor_scatter_nd_update(global_attn_scores_trans, is_local_index_no_global_attn_nonzero, global_attn_mask)
A:transformers.models.longformer.modeling_tf_longformer.attn_mask->tensorflow.broadcast_to(is_index_masked[:, None, None, :], shape_list(global_attn_scores))
A:transformers.models.longformer.modeling_tf_longformer.global_attn_probs_float->tensorflow.nn.softmax(global_attn_scores, axis=-1)
A:transformers.models.longformer.modeling_tf_longformer.global_attn_probs->tensorflow.reshape(global_attn_probs, (batch_size, self.num_heads, max_num_global_attn_indices, seq_len))
A:transformers.models.longformer.modeling_tf_longformer.global_attn_output->tensorflow.reshape(global_attn_output, (batch_size, self.num_heads, max_num_global_attn_indices, self.head_dim))
A:transformers.models.longformer.modeling_tf_longformer.nonzero_global_attn_output->tensorflow.reshape(nonzero_global_attn_output, (shape_list(is_local_index_global_attn_nonzero)[0], -1))
A:transformers.models.longformer.modeling_tf_longformer.self.self_attention->TFLongformerSelfAttention(config, layer_id, name='self')
A:transformers.models.longformer.modeling_tf_longformer.self.dense_output->TFLongformerSelfOutput(config, name='output')
A:transformers.models.longformer.modeling_tf_longformer.self_outputs->self.self_attention([hidden_states, attention_mask, is_index_masked, is_index_global_attn, is_global_attn], training=training)
A:transformers.models.longformer.modeling_tf_longformer.attention_output->self.dense_output(self_outputs[0], hidden_states, training=training)
A:transformers.models.longformer.modeling_tf_longformer.self.attention->TFLongformerAttention(config, layer_id, name='attention')
A:transformers.models.longformer.modeling_tf_longformer.self.intermediate->TFLongformerIntermediate(config, name='intermediate')
A:transformers.models.longformer.modeling_tf_longformer.self.longformer_output->TFLongformerOutput(config, name='output')
A:transformers.models.longformer.modeling_tf_longformer.attention_outputs->self.attention([hidden_states, attention_mask, is_index_masked, is_index_global_attn, is_global_attn], training=training)
A:transformers.models.longformer.modeling_tf_longformer.intermediate_output->self.intermediate(attention_output)
A:transformers.models.longformer.modeling_tf_longformer.layer_output->self.longformer_output(intermediate_output, attention_output, training=training)
A:transformers.models.longformer.modeling_tf_longformer.layer_outputs->layer_module([hidden_states, attention_mask, is_index_masked, is_index_global_attn, is_global_attn], training=training)
A:transformers.models.longformer.modeling_tf_longformer.self.embeddings->TFLongformerEmbeddings(config, name='embeddings')
A:transformers.models.longformer.modeling_tf_longformer.self.encoder->TFLongformerEncoder(config, name='encoder')
A:transformers.models.longformer.modeling_tf_longformer.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, global_attention_mask=global_attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.longformer.modeling_tf_longformer.inputs['attention_mask']->self._merge_to_attention_mask(inputs['attention_mask'], inputs['global_attention_mask'])
A:transformers.models.longformer.modeling_tf_longformer.inputs['token_type_ids']->tensorflow.fill(input_shape, 0)
A:transformers.models.longformer.modeling_tf_longformer.(padding_len, inputs['input_ids'], inputs['attention_mask'], inputs['token_type_ids'], inputs['position_ids'], inputs['inputs_embeds'])->self._pad_to_window_size(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], inputs_embeds=inputs['inputs_embeds'], pad_token_id=self.pad_token_id)
A:transformers.models.longformer.modeling_tf_longformer.is_index_masked->tensorflow.math.less(inputs['attention_mask'], 1)
A:transformers.models.longformer.modeling_tf_longformer.is_index_global_attn->tensorflow.math.greater(inputs['attention_mask'], 1)
A:transformers.models.longformer.modeling_tf_longformer.is_global_attn->tensorflow.math.reduce_any(is_index_global_attn)
A:transformers.models.longformer.modeling_tf_longformer.embedding_output->self.embeddings(inputs['input_ids'], inputs['position_ids'], inputs['token_type_ids'], inputs['inputs_embeds'], training=inputs['training'])
A:transformers.models.longformer.modeling_tf_longformer.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, padding_len=padding_len, is_index_masked=is_index_masked, is_index_global_attn=is_index_global_attn, is_global_attn=is_global_attn, output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.longformer.modeling_tf_longformer.input_ids_padding->tensorflow.fill((batch_size, padding_len), self.pad_token_id)
A:transformers.models.longformer.modeling_tf_longformer.inputs_embeds_padding->self.embeddings(input_ids_padding)
A:transformers.models.longformer.modeling_tf_longformer.global_attention_mask->tensorflow.constant([[[0, 0, 0, 1], [0, 0, 0, 1]]] * 2)
A:transformers.models.longformer.modeling_tf_longformer.self.longformer->TFLongformerMainLayer(config=config, add_pooling_layer=False, name='longformer')
A:transformers.models.longformer.modeling_tf_longformer.outputs->self.longformer(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'], global_attention_mask=inputs['global_attention_mask'], token_type_ids=inputs['token_type_ids'], position_ids=inputs['position_ids'], inputs_embeds=inputs['inputs_embeds'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.longformer.modeling_tf_longformer.self.lm_head->TFLongformerLMHead(config, self.longformer.embeddings, name='lm_head')
A:transformers.models.longformer.modeling_tf_longformer.prediction_scores->self.lm_head(sequence_output, training=inputs['training'])
A:transformers.models.longformer.modeling_tf_longformer.self.qa_outputs->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='qa_outputs')
A:transformers.models.longformer.modeling_tf_longformer.sep_token_indices->tensorflow.where(inputs['input_ids'] == self.config.sep_token_id)
A:transformers.models.longformer.modeling_tf_longformer.inputs['global_attention_mask']->tensorflow.tensor_scatter_nd_update(inputs['global_attention_mask'], [[i, 0] for i in range(inputs['input_ids'].shape[0])], [1 for _ in range(inputs['input_ids'].shape[0])])
A:transformers.models.longformer.modeling_tf_longformer.(start_logits, end_logits)->tensorflow.split(logits, 2, axis=-1)
A:transformers.models.longformer.modeling_tf_longformer.start_logits->tensorflow.squeeze(start_logits, axis=-1)
A:transformers.models.longformer.modeling_tf_longformer.end_logits->tensorflow.squeeze(end_logits, axis=-1)
A:transformers.models.longformer.modeling_tf_longformer.loss->self.compute_loss(labels, (start_logits, end_logits))
A:transformers.models.longformer.modeling_tf_longformer.self.out_proj->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='out_proj')
A:transformers.models.longformer.modeling_tf_longformer.output->self.out_proj(hidden_states)
A:transformers.models.longformer.modeling_tf_longformer.self.classifier->tensorflow.keras.layers.Dense(config.num_labels, kernel_initializer=get_initializer(config.initializer_range), name='classifier')
A:transformers.models.longformer.modeling_tf_longformer.reshaped_logits->tensorflow.reshape(logits, (-1, num_choices))
A:transformers.models.longformer.modeling_tf_longformer.sequence_output->self.dropout(sequence_output)
transformers.TFLongformerForMaskedLM(self,config,*inputs,**kwargs)
transformers.TFLongformerForMaskedLM.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFLongformerForMaskedLM.get_output_embeddings(self)
transformers.TFLongformerForMaskedLM.get_output_layer_with_bias(self)
transformers.TFLongformerForMaskedLM.get_prefix_bias_name(self)
transformers.TFLongformerForMultipleChoice(self,config,*inputs,**kwargs)
transformers.TFLongformerForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFLongformerForMultipleChoice.dummy_inputs(self)
transformers.TFLongformerForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.TFLongformerForQuestionAnswering.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.TFLongformerForSequenceClassification(self,config,*inputs,**kwargs)
transformers.TFLongformerForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFLongformerForTokenClassification(self,config,*inputs,**kwargs)
transformers.TFLongformerForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFLongformerModel(self,config,*inputs,**kwargs)
transformers.TFLongformerModel.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFLongformerSelfAttention(self,config,layer_id,**kwargs)
transformers.TFLongformerSelfAttention._chunk(hidden_states,window_overlap)
transformers.TFLongformerSelfAttention._compute_attn_output_with_global_indices(self,value_vectors,attn_probs,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero)
transformers.TFLongformerSelfAttention._compute_global_attn_output_from_hidden(self,attn_output,hidden_states,max_num_global_attn_indices,is_local_index_global_attn_nonzero,is_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero,is_index_masked,training)
transformers.TFLongformerSelfAttention._concat_with_global_key_attn_probs(self,attn_scores,key_vectors,query_vectors,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero)
transformers.TFLongformerSelfAttention._get_global_attn_indices(is_index_global_attn)
transformers.TFLongformerSelfAttention._mask_invalid_locations(input_tensor,window_overlap)
transformers.TFLongformerSelfAttention._pad_and_diagonalize(chunked_hidden_states)
transformers.TFLongformerSelfAttention._pad_and_transpose_last_two_dims(hidden_states_padded,paddings)
transformers.TFLongformerSelfAttention._sliding_chunks_matmul_attn_probs_value(self,attn_probs,value,window_overlap)
transformers.TFLongformerSelfAttention._sliding_chunks_query_key_matmul(self,query,key,window_overlap)
transformers.TFLongformerSelfAttention.call(self,inputs,training=False)
transformers.TFLongformerSelfAttention.reshape_and_transpose(self,vector,batch_size)
transformers.models.longformer.modeling_tf_longformer.TFLongformerAttention(self,config,layer_id=0,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerAttention.__init__(self,config,layer_id=0,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerAttention.call(self,inputs,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerAttention.prune_heads(self,heads)
transformers.models.longformer.modeling_tf_longformer.TFLongformerBaseModelOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerBaseModelOutputWithPooling(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerClassificationHead(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerClassificationHead.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerClassificationHead.call(self,hidden_states,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings._embedding(self,input_ids,position_ids,token_type_ids,inputs_embeds,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings._linear(self,inputs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings.build(self,input_shape)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings.call(self,input_ids=None,position_ids=None,token_type_ids=None,inputs_embeds=None,mode='embedding',training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings.create_position_ids_from_input_ids(self,input_ids)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEncoder(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEncoder.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerEncoder.call(self,hidden_states,attention_mask=None,head_mask=None,padding_len=0,is_index_masked=None,is_index_global_attn=None,is_global_attn=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM.get_output_embeddings(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM.get_output_layer_with_bias(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMaskedLM.get_prefix_bias_name(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMultipleChoice(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMultipleChoice.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMultipleChoice.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForMultipleChoice.dummy_inputs(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForQuestionAnswering(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForQuestionAnswering.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForQuestionAnswering.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,start_positions=None,end_positions=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForSequenceClassification(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForSequenceClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForSequenceClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForTokenClassification(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForTokenClassification.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerForTokenClassification.call(self,input_ids=None,attention_mask=None,token_type_ids=None,position_ids=None,global_attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerIntermediate(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerIntermediate.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerIntermediate.call(self,hidden_states)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLMHead(self,config,input_embeddings,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLMHead.__init__(self,config,input_embeddings,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLMHead.build(self,input_shape)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLMHead.call(self,hidden_states)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLayer(self,config,layer_id=0,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLayer.__init__(self,config,layer_id=0,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerLayer.call(self,inputs,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer(self,config,add_pooling_layer=True,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer.__init__(self,config,add_pooling_layer=True,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer._merge_to_attention_mask(attention_mask:tf.Tensor,global_attention_mask:tf.Tensor)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer._pad_to_window_size(self,input_ids,attention_mask,token_type_ids,position_ids,inputs_embeds,pad_token_id)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer._prune_heads(self,heads_to_prune)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer.get_input_embeddings(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer.set_input_embeddings(self,value)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMaskedLMOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerModel(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerModel.__init__(self,config,*inputs,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerModel.call(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerMultipleChoiceModelOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerOutput(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerOutput.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerPooler(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerPooler.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerPooler.call(self,hidden_states)
transformers.models.longformer.modeling_tf_longformer.TFLongformerPreTrainedModel(TFPreTrainedModel)
transformers.models.longformer.modeling_tf_longformer.TFLongformerPreTrainedModel.dummy_inputs(self)
transformers.models.longformer.modeling_tf_longformer.TFLongformerQuestionAnsweringModelOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention(self,config,layer_id,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention.__init__(self,config,layer_id,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._chunk(hidden_states,window_overlap)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._compute_attn_output_with_global_indices(self,value_vectors,attn_probs,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._compute_global_attn_output_from_hidden(self,attn_output,hidden_states,max_num_global_attn_indices,is_local_index_global_attn_nonzero,is_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero,is_index_masked,training)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._concat_with_global_key_attn_probs(self,attn_scores,key_vectors,query_vectors,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._get_global_attn_indices(is_index_global_attn)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._mask_invalid_locations(input_tensor,window_overlap)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._pad_and_diagonalize(chunked_hidden_states)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._pad_and_transpose_last_two_dims(hidden_states_padded,paddings)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._sliding_chunks_matmul_attn_probs_value(self,attn_probs,value,window_overlap)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention._sliding_chunks_query_key_matmul(self,query,key,window_overlap)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention.call(self,inputs,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention.reshape_and_transpose(self,vector,batch_size)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfOutput(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfOutput.__init__(self,config,**kwargs)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfOutput.call(self,hidden_states,input_tensor,training=False)
transformers.models.longformer.modeling_tf_longformer.TFLongformerSequenceClassifierOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer.TFLongformerTokenClassifierOutput(ModelOutput)
transformers.models.longformer.modeling_tf_longformer._compute_global_attention_mask(input_ids_shape,sep_token_indices,before_sep_token=True)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/configuration_longformer.py----------------------------------------
A:transformers.models.longformer.configuration_longformer.logger->utils.logging.get_logger(__name__)
transformers.LongformerConfig(self,attention_window:Union[List[int],int]=512,sep_token_id:int=2,**kwargs)
transformers.models.longformer.configuration_longformer.LongformerConfig(self,attention_window:Union[List[int],int]=512,sep_token_id:int=2,**kwargs)
transformers.models.longformer.configuration_longformer.LongformerConfig.__init__(self,attention_window:Union[List[int],int]=512,sep_token_id:int=2,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/modeling_longformer.py----------------------------------------
A:transformers.models.longformer.modeling_longformer.logger->utils.logging.get_logger(__name__)
A:transformers.models.longformer.modeling_longformer.sep_token_indices->(input_ids == sep_token_id).nonzero()
A:transformers.models.longformer.modeling_longformer.question_end_index->question_end_index.unsqueeze(dim=1).unsqueeze(dim=1)
A:transformers.models.longformer.modeling_longformer.attention_mask->self._merge_to_attention_mask(attention_mask, global_attention_mask)
A:transformers.models.longformer.modeling_longformer.mask->torch.nn.functional.pad(input_ids, (0, padding_len), value=pad_token_id).ne(padding_idx).int()
A:transformers.models.longformer.modeling_longformer.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.longformer.modeling_longformer.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size, padding_idx=self.padding_idx)
A:transformers.models.longformer.modeling_longformer.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size)
A:transformers.models.longformer.modeling_longformer.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.longformer.modeling_longformer.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.longformer.modeling_longformer.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.longformer.modeling_longformer.position_ids->torch.nn.functional.pad(position_ids, (0, padding_len), value=pad_token_id)
A:transformers.models.longformer.modeling_longformer.input_shape->torch.nn.functional.pad(input_ids, (0, padding_len), value=pad_token_id).size()
A:transformers.models.longformer.modeling_longformer.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.longformer.modeling_longformer.inputs_embeds->torch.cat([inputs_embeds, inputs_embeds_padding], dim=-2)
A:transformers.models.longformer.modeling_longformer.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.longformer.modeling_longformer.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.longformer.modeling_longformer.embeddings->self.dropout(embeddings)
A:transformers.models.longformer.modeling_longformer.self.head_dim->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.longformer.modeling_longformer.self.query->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.self.key->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.self.value->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.self.query_global->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.self.key_global->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.self.value_global->torch.nn.Linear(config.hidden_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.hidden_states->self.dropout(hidden_states)
A:transformers.models.longformer.modeling_longformer.query_vectors->query_vectors.view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.key_vectors->key_vectors.view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.value_vectors->value_vectors.view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.(seq_len, batch_size, embed_dim)->self.dropout(hidden_states).size()
A:transformers.models.longformer.modeling_longformer.attn_scores->torch.cat((global_key_attn_scores, attn_scores), dim=-1)
A:transformers.models.longformer.modeling_longformer.float_mask->remove_from_windowed_attention_mask.type_as(query_vectors).masked_fill(remove_from_windowed_attention_mask, -10000.0)
A:transformers.models.longformer.modeling_longformer.diagonal_mask->self._sliding_chunks_query_key_matmul(float_mask.new_ones(size=float_mask.size()), float_mask, self.one_sided_attn_window_size)
A:transformers.models.longformer.modeling_longformer.(max_num_global_attn_indices, is_index_global_attn_nonzero, is_local_index_global_attn_nonzero, is_local_index_no_global_attn_nonzero)->self._get_global_attn_indices(is_index_global_attn)
A:transformers.models.longformer.modeling_longformer.global_key_attn_scores->self._concat_with_global_key_attn_probs(query_vectors=query_vectors, key_vectors=key_vectors, max_num_global_attn_indices=max_num_global_attn_indices, is_index_global_attn_nonzero=is_index_global_attn_nonzero, is_local_index_global_attn_nonzero=is_local_index_global_attn_nonzero, is_local_index_no_global_attn_nonzero=is_local_index_no_global_attn_nonzero)
A:transformers.models.longformer.modeling_longformer.local_attn_probs_fp32->torch.nn.functional.softmax(attn_scores, dim=-1, dtype=torch.float32)
A:transformers.models.longformer.modeling_longformer.local_attn_probs->torch.nn.functional.dropout(local_attn_probs, p=self.dropout, training=self.training)
A:transformers.models.longformer.modeling_longformer.attn_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.longformer.modeling_longformer.(global_attn_output, global_attn_probs)->self._compute_global_attn_output_from_hidden(hidden_states=hidden_states, max_num_global_attn_indices=max_num_global_attn_indices, is_local_index_global_attn_nonzero=is_local_index_global_attn_nonzero, is_index_global_attn_nonzero=is_index_global_attn_nonzero, is_local_index_no_global_attn_nonzero=is_local_index_no_global_attn_nonzero, is_index_masked=is_index_masked)
A:transformers.models.longformer.modeling_longformer.attn_output[is_index_global_attn_nonzero[::-1]]->nonzero_global_attn_output.view(len(is_local_index_global_attn_nonzero[0]), -1)
A:transformers.models.longformer.modeling_longformer.hidden_states_padded->hidden_states_padded.view(*hidden_states_padded.size()[:-2], hidden_states_padded.size(-1), hidden_states_padded.size(-2)).view(*hidden_states_padded.size()[:-2], hidden_states_padded.size(-1), hidden_states_padded.size(-2))
A:transformers.models.longformer.modeling_longformer.(total_num_heads, num_chunks, window_overlap, hidden_dim)->chunked_hidden_states.view(total_num_heads, num_chunks, window_overlap, window_overlap + hidden_dim).size()
A:transformers.models.longformer.modeling_longformer.chunked_hidden_states->chunked_hidden_states.view(total_num_heads, num_chunks, window_overlap, window_overlap + hidden_dim).view(total_num_heads, num_chunks, window_overlap, window_overlap + hidden_dim)
A:transformers.models.longformer.modeling_longformer.chunk_size->list(hidden_states.size())
A:transformers.models.longformer.modeling_longformer.chunk_stride->list(hidden_states.stride())
A:transformers.models.longformer.modeling_longformer.beginning_mask_2d->input_tensor.new_ones(affected_seq_len, affected_seq_len + 1).tril().flip(dims=[0])
A:transformers.models.longformer.modeling_longformer.ending_mask->ending_mask.expand(ending_input.size()).expand(ending_input.size())
A:transformers.models.longformer.modeling_longformer.beginning_mask->beginning_mask.expand(beginning_input.size()).expand(beginning_input.size())
A:transformers.models.longformer.modeling_longformer.(batch_size, seq_len, num_heads, head_dim)->value.transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim).size()
A:transformers.models.longformer.modeling_longformer.query->query.transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim).transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim)
A:transformers.models.longformer.modeling_longformer.key->key.transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim).transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim)
A:transformers.models.longformer.modeling_longformer.chunked_query->self._chunk(query, window_overlap)
A:transformers.models.longformer.modeling_longformer.chunked_key->self._chunk(key, window_overlap)
A:transformers.models.longformer.modeling_longformer.chunked_attention_scores->torch.einsum('bcxd,bcyd->bcxy', (chunked_query, chunked_key))
A:transformers.models.longformer.modeling_longformer.diagonal_chunked_attention_scores->self._pad_and_transpose_last_two_dims(chunked_attention_scores, padding=(0, 0, 0, 1))
A:transformers.models.longformer.modeling_longformer.diagonal_attention_scores->diagonal_attention_scores.view(batch_size, num_heads, seq_len, 2 * window_overlap + 1).transpose(2, 1).view(batch_size, num_heads, seq_len, 2 * window_overlap + 1).transpose(2, 1)
A:transformers.models.longformer.modeling_longformer.chunked_attn_probs->self._pad_and_diagonalize(chunked_attn_probs)
A:transformers.models.longformer.modeling_longformer.value->value.transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim).transpose(1, 2).reshape(batch_size * num_heads, seq_len, head_dim)
A:transformers.models.longformer.modeling_longformer.padded_value->torch.nn.functional.pad(value, (0, 0, window_overlap, window_overlap), value=-1)
A:transformers.models.longformer.modeling_longformer.chunked_value_stride->torch.nn.functional.pad(value, (0, 0, window_overlap, window_overlap), value=-1).stride()
A:transformers.models.longformer.modeling_longformer.chunked_value->torch.nn.functional.pad(value, (0, 0, window_overlap, window_overlap), value=-1).as_strided(size=chunked_value_size, stride=chunked_value_stride)
A:transformers.models.longformer.modeling_longformer.context->torch.einsum('bcwd,bcdh->bcwh', (chunked_attn_probs, chunked_value))
A:transformers.models.longformer.modeling_longformer.num_global_attn_indices->is_index_global_attn.long().sum(dim=1)
A:transformers.models.longformer.modeling_longformer.max_num_global_attn_indices->is_index_global_attn.long().sum(dim=1).max()
A:transformers.models.longformer.modeling_longformer.is_index_global_attn_nonzero->is_index_global_attn.nonzero(as_tuple=True)
A:transformers.models.longformer.modeling_longformer.is_local_index_global_attn_nonzero->is_local_index_global_attn.nonzero(as_tuple=True)
A:transformers.models.longformer.modeling_longformer.is_local_index_no_global_attn_nonzero->(is_local_index_global_attn == 0).nonzero(as_tuple=True)
A:transformers.models.longformer.modeling_longformer.key_vectors_only_global->key_vectors.view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).new_zeros(batch_size, max_num_global_attn_indices, self.num_heads, self.head_dim)
A:transformers.models.longformer.modeling_longformer.attn_probs_from_global_key->torch.einsum('blhd,bshd->blhs', (query_vectors, key_vectors_only_global))
A:transformers.models.longformer.modeling_longformer.attn_probs_only_global->attn_probs.narrow(-1, 0, max_num_global_attn_indices)
A:transformers.models.longformer.modeling_longformer.value_vectors_only_global->value_vectors.view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).view(seq_len, batch_size, self.num_heads, self.head_dim).transpose(0, 1).new_zeros(batch_size, max_num_global_attn_indices, self.num_heads, self.head_dim)
A:transformers.models.longformer.modeling_longformer.attn_output_only_global->torch.matmul(attn_probs_only_global.transpose(1, 2), value_vectors_only_global.transpose(1, 2)).transpose(1, 2)
A:transformers.models.longformer.modeling_longformer.attn_probs_without_global->attn_probs.narrow(-1, max_num_global_attn_indices, attn_probs.size(-1) - max_num_global_attn_indices).contiguous()
A:transformers.models.longformer.modeling_longformer.attn_output_without_global->self._sliding_chunks_matmul_attn_probs_value(attn_probs_without_global, value_vectors, self.one_sided_attn_window_size)
A:transformers.models.longformer.modeling_longformer.global_attn_hidden_states->self.dropout(hidden_states).new_zeros(max_num_global_attn_indices, batch_size, self.embed_dim)
A:transformers.models.longformer.modeling_longformer.global_query_vectors_only_global->global_query_vectors_only_global.contiguous().view(max_num_global_attn_indices, batch_size * self.num_heads, self.head_dim).transpose(0, 1).contiguous().view(max_num_global_attn_indices, batch_size * self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.global_key_vectors->global_key_vectors.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1).contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.global_value_vectors->global_value_vectors.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1).contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1)
A:transformers.models.longformer.modeling_longformer.global_attn_scores->global_attn_scores.view(batch_size * self.num_heads, max_num_global_attn_indices, seq_len).view(batch_size * self.num_heads, max_num_global_attn_indices, seq_len)
A:transformers.models.longformer.modeling_longformer.global_attn_probs_float->torch.nn.functional.softmax(global_attn_scores, dim=-1, dtype=torch.float32)
A:transformers.models.longformer.modeling_longformer.global_attn_probs->global_attn_probs.view(batch_size, self.num_heads, max_num_global_attn_indices, seq_len).view(batch_size, self.num_heads, max_num_global_attn_indices, seq_len)
A:transformers.models.longformer.modeling_longformer.global_attn_output->global_attn_output.view(batch_size, self.num_heads, max_num_global_attn_indices, self.head_dim).view(batch_size, self.num_heads, max_num_global_attn_indices, self.head_dim)
A:transformers.models.longformer.modeling_longformer.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.longformer.modeling_longformer.self.self->LongformerSelfAttention(config, layer_id)
A:transformers.models.longformer.modeling_longformer.self.output->LongformerOutput(config)
A:transformers.models.longformer.modeling_longformer.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.longformer.modeling_longformer.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.longformer.modeling_longformer.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.longformer.modeling_longformer.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.longformer.modeling_longformer.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.longformer.modeling_longformer.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.longformer.modeling_longformer.self_outputs->self.self(hidden_states, attention_mask=attention_mask, is_index_masked=is_index_masked, is_index_global_attn=is_index_global_attn, is_global_attn=is_global_attn)
A:transformers.models.longformer.modeling_longformer.self.attention->LongformerAttention(config, layer_id)
A:transformers.models.longformer.modeling_longformer.self.intermediate->LongformerIntermediate(config)
A:transformers.models.longformer.modeling_longformer.self_attn_outputs->self.attention(hidden_states, attention_mask=attention_mask, is_index_masked=is_index_masked, is_index_global_attn=is_index_global_attn, is_global_attn=is_global_attn)
A:transformers.models.longformer.modeling_longformer.layer_output->self.output(intermediate_output, attn_output)
A:transformers.models.longformer.modeling_longformer.intermediate_output->self.intermediate(attn_output)
A:transformers.models.longformer.modeling_longformer.self.layer->torch.nn.ModuleList([LongformerLayer(config, layer_id=i) for i in range(config.num_hidden_layers)])
A:transformers.models.longformer.modeling_longformer.is_global_attn->is_index_global_attn.flatten().any().item()
A:transformers.models.longformer.modeling_longformer.layer_outputs->layer_module(hidden_states, attention_mask=attention_mask, is_index_masked=is_index_masked, is_index_global_attn=is_index_global_attn, is_global_attn=is_global_attn)
A:transformers.models.longformer.modeling_longformer.self.activation->torch.nn.Tanh()
A:transformers.models.longformer.modeling_longformer.pooled_output->self.dropout(pooled_output)
A:transformers.models.longformer.modeling_longformer.self.layer_norm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.longformer.modeling_longformer.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.longformer.modeling_longformer.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.longformer.modeling_longformer.x->self.decoder(x)
A:transformers.models.longformer.modeling_longformer.self.embeddings->LongformerEmbeddings(config)
A:transformers.models.longformer.modeling_longformer.self.encoder->LongformerEncoder(config)
A:transformers.models.longformer.modeling_longformer.input_ids->torch.nn.functional.pad(input_ids, (0, padding_len), value=pad_token_id)
A:transformers.models.longformer.modeling_longformer.input_ids_padding->torch.cat([inputs_embeds, inputs_embeds_padding], dim=-2).new_full((batch_size, padding_len), self.config.pad_token_id, dtype=torch.long)
A:transformers.models.longformer.modeling_longformer.inputs_embeds_padding->self.embeddings(input_ids_padding)
A:transformers.models.longformer.modeling_longformer.(padding_len, input_ids, attention_mask, token_type_ids, position_ids, inputs_embeds)->self._pad_to_window_size(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, inputs_embeds=inputs_embeds, pad_token_id=self.config.pad_token_id)
A:transformers.models.longformer.modeling_longformer.embedding_output->self.embeddings(input_ids=input_ids, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.longformer.modeling_longformer.encoder_outputs->self.encoder(embedding_output, attention_mask=extended_attention_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.longformer.modeling_longformer.self.longformer->LongformerModel(config)
A:transformers.models.longformer.modeling_longformer.self.lm_head->LongformerLMHead(config)
A:transformers.models.longformer.modeling_longformer.outputs->self.longformer(flat_input_ids, position_ids=flat_position_ids, token_type_ids=flat_token_type_ids, attention_mask=flat_attention_mask, global_attention_mask=flat_global_attention_mask, inputs_embeds=flat_inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.longformer.modeling_longformer.prediction_scores->self.lm_head(sequence_output)
A:transformers.models.longformer.modeling_longformer.loss_fct->CrossEntropyLoss()
A:transformers.models.longformer.modeling_longformer.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.longformer.modeling_longformer.self.classifier->torch.nn.Linear(config.hidden_size, 1)
A:transformers.models.longformer.modeling_longformer.global_attention_mask->torch.stack([_compute_global_attention_mask(input_ids[:, i], self.config.sep_token_id, before_sep_token=False) for i in range(num_choices)], dim=1)
A:transformers.models.longformer.modeling_longformer.logits->self.classifier(pooled_output)
A:transformers.models.longformer.modeling_longformer.loss->loss_fct(reshaped_logits, labels)
A:transformers.models.longformer.modeling_longformer.self.out_proj->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.longformer.modeling_longformer.output->self.out_proj(hidden_states)
A:transformers.models.longformer.modeling_longformer.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.longformer.modeling_longformer.(start_logits, end_logits)->self.classifier(pooled_output).split(1, dim=-1)
A:transformers.models.longformer.modeling_longformer.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.longformer.modeling_longformer.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.longformer.modeling_longformer.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.longformer.modeling_longformer.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.longformer.modeling_longformer.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.longformer.modeling_longformer.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.longformer.modeling_longformer.end_loss->loss_fct(end_logits, end_positions)
A:transformers.models.longformer.modeling_longformer.sequence_output->self.dropout(sequence_output)
A:transformers.models.longformer.modeling_longformer.active_logits->self.classifier(pooled_output).view(-1, self.num_labels)
A:transformers.models.longformer.modeling_longformer.active_labels->torch.where(active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels))
A:transformers.models.longformer.modeling_longformer.reshaped_logits->self.classifier(pooled_output).view(-1, num_choices)
transformers.LongformerForMaskedLM(self,config)
transformers.LongformerForMaskedLM.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerForMaskedLM.get_output_embeddings(self)
transformers.LongformerForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.LongformerForMultipleChoice(self,config)
transformers.LongformerForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,global_attention_mask=None,labels=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerForQuestionAnswering(self,config)
transformers.LongformerForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerForSequenceClassification(self,config)
transformers.LongformerForSequenceClassification.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerForTokenClassification(self,config)
transformers.LongformerForTokenClassification.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerModel(self,config,add_pooling_layer=True)
transformers.LongformerModel._merge_to_attention_mask(self,attention_mask:torch.Tensor,global_attention_mask:torch.Tensor)
transformers.LongformerModel._pad_to_window_size(self,input_ids:torch.Tensor,attention_mask:torch.Tensor,token_type_ids:torch.Tensor,position_ids:torch.Tensor,inputs_embeds:torch.Tensor,pad_token_id:int)
transformers.LongformerModel._prune_heads(self,heads_to_prune)
transformers.LongformerModel.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LongformerModel.get_input_embeddings(self)
transformers.LongformerModel.set_input_embeddings(self,value)
transformers.LongformerSelfAttention(self,config,layer_id)
transformers.LongformerSelfAttention._chunk(hidden_states,window_overlap)
transformers.LongformerSelfAttention._compute_attn_output_with_global_indices(self,value_vectors,attn_probs,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero)
transformers.LongformerSelfAttention._compute_global_attn_output_from_hidden(self,hidden_states,max_num_global_attn_indices,is_local_index_global_attn_nonzero,is_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero,is_index_masked)
transformers.LongformerSelfAttention._concat_with_global_key_attn_probs(self,key_vectors,query_vectors,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero)
transformers.LongformerSelfAttention._get_global_attn_indices(is_index_global_attn)
transformers.LongformerSelfAttention._mask_invalid_locations(input_tensor,affected_seq_len)->torch.Tensor
transformers.LongformerSelfAttention._pad_and_diagonalize(chunked_hidden_states)
transformers.LongformerSelfAttention._pad_and_transpose_last_two_dims(hidden_states_padded,padding)
transformers.LongformerSelfAttention._sliding_chunks_matmul_attn_probs_value(self,attn_probs:torch.Tensor,value:torch.Tensor,window_overlap:int)
transformers.LongformerSelfAttention._sliding_chunks_query_key_matmul(self,query:torch.Tensor,key:torch.Tensor,window_overlap:int)
transformers.LongformerSelfAttention.forward(self,hidden_states,attention_mask=None,is_index_masked=None,is_index_global_attn=None,is_global_attn=None)
transformers.models.longformer.modeling_longformer.LongformerAttention(self,config,layer_id=0)
transformers.models.longformer.modeling_longformer.LongformerAttention.__init__(self,config,layer_id=0)
transformers.models.longformer.modeling_longformer.LongformerAttention.forward(self,hidden_states,attention_mask=None,is_index_masked=None,is_index_global_attn=None,is_global_attn=None)
transformers.models.longformer.modeling_longformer.LongformerAttention.prune_heads(self,heads)
transformers.models.longformer.modeling_longformer.LongformerBaseModelOutput(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerBaseModelOutputWithPooling(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerClassificationHead(self,config)
transformers.models.longformer.modeling_longformer.LongformerClassificationHead.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerClassificationHead.forward(self,hidden_states,**kwargs)
transformers.models.longformer.modeling_longformer.LongformerEmbeddings(self,config)
transformers.models.longformer.modeling_longformer.LongformerEmbeddings.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerEmbeddings.create_position_ids_from_inputs_embeds(self,inputs_embeds)
transformers.models.longformer.modeling_longformer.LongformerEmbeddings.forward(self,input_ids=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.longformer.modeling_longformer.LongformerEncoder(self,config)
transformers.models.longformer.modeling_longformer.LongformerEncoder.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerEncoder.forward(self,hidden_states,attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.longformer.modeling_longformer.LongformerForMaskedLM(self,config)
transformers.models.longformer.modeling_longformer.LongformerForMaskedLM.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerForMaskedLM.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerForMaskedLM.get_output_embeddings(self)
transformers.models.longformer.modeling_longformer.LongformerForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.longformer.modeling_longformer.LongformerForMultipleChoice(self,config)
transformers.models.longformer.modeling_longformer.LongformerForMultipleChoice.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerForMultipleChoice.forward(self,input_ids=None,token_type_ids=None,attention_mask=None,global_attention_mask=None,labels=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerForQuestionAnswering(self,config)
transformers.models.longformer.modeling_longformer.LongformerForQuestionAnswering.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,start_positions=None,end_positions=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerForSequenceClassification(self,config)
transformers.models.longformer.modeling_longformer.LongformerForSequenceClassification.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerForSequenceClassification.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerForTokenClassification(self,config)
transformers.models.longformer.modeling_longformer.LongformerForTokenClassification.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerForTokenClassification.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerIntermediate(self,config)
transformers.models.longformer.modeling_longformer.LongformerIntermediate.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerIntermediate.forward(self,hidden_states)
transformers.models.longformer.modeling_longformer.LongformerLMHead(self,config)
transformers.models.longformer.modeling_longformer.LongformerLMHead.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerLMHead.forward(self,features,**kwargs)
transformers.models.longformer.modeling_longformer.LongformerLayer(self,config,layer_id=0)
transformers.models.longformer.modeling_longformer.LongformerLayer.__init__(self,config,layer_id=0)
transformers.models.longformer.modeling_longformer.LongformerLayer.ff_chunk(self,attn_output)
transformers.models.longformer.modeling_longformer.LongformerLayer.forward(self,hidden_states,attention_mask=None,is_index_masked=None,is_index_global_attn=None,is_global_attn=None)
transformers.models.longformer.modeling_longformer.LongformerMaskedLMOutput(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerModel(self,config,add_pooling_layer=True)
transformers.models.longformer.modeling_longformer.LongformerModel.__init__(self,config,add_pooling_layer=True)
transformers.models.longformer.modeling_longformer.LongformerModel._merge_to_attention_mask(self,attention_mask:torch.Tensor,global_attention_mask:torch.Tensor)
transformers.models.longformer.modeling_longformer.LongformerModel._pad_to_window_size(self,input_ids:torch.Tensor,attention_mask:torch.Tensor,token_type_ids:torch.Tensor,position_ids:torch.Tensor,inputs_embeds:torch.Tensor,pad_token_id:int)
transformers.models.longformer.modeling_longformer.LongformerModel._prune_heads(self,heads_to_prune)
transformers.models.longformer.modeling_longformer.LongformerModel.forward(self,input_ids=None,attention_mask=None,global_attention_mask=None,token_type_ids=None,position_ids=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.longformer.modeling_longformer.LongformerModel.get_input_embeddings(self)
transformers.models.longformer.modeling_longformer.LongformerModel.set_input_embeddings(self,value)
transformers.models.longformer.modeling_longformer.LongformerMultipleChoiceModelOutput(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerOutput(self,config)
transformers.models.longformer.modeling_longformer.LongformerOutput.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerOutput.forward(self,hidden_states,input_tensor)
transformers.models.longformer.modeling_longformer.LongformerPooler(self,config)
transformers.models.longformer.modeling_longformer.LongformerPooler.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerPooler.forward(self,hidden_states)
transformers.models.longformer.modeling_longformer.LongformerPreTrainedModel(PreTrainedModel)
transformers.models.longformer.modeling_longformer.LongformerPreTrainedModel._init_weights(self,module)
transformers.models.longformer.modeling_longformer.LongformerQuestionAnsweringModelOutput(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention(self,config,layer_id)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention.__init__(self,config,layer_id)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._chunk(hidden_states,window_overlap)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._compute_attn_output_with_global_indices(self,value_vectors,attn_probs,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._compute_global_attn_output_from_hidden(self,hidden_states,max_num_global_attn_indices,is_local_index_global_attn_nonzero,is_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero,is_index_masked)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._concat_with_global_key_attn_probs(self,key_vectors,query_vectors,max_num_global_attn_indices,is_index_global_attn_nonzero,is_local_index_global_attn_nonzero,is_local_index_no_global_attn_nonzero)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._get_global_attn_indices(is_index_global_attn)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._mask_invalid_locations(input_tensor,affected_seq_len)->torch.Tensor
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._pad_and_diagonalize(chunked_hidden_states)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._pad_and_transpose_last_two_dims(hidden_states_padded,padding)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._sliding_chunks_matmul_attn_probs_value(self,attn_probs:torch.Tensor,value:torch.Tensor,window_overlap:int)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention._sliding_chunks_query_key_matmul(self,query:torch.Tensor,key:torch.Tensor,window_overlap:int)
transformers.models.longformer.modeling_longformer.LongformerSelfAttention.forward(self,hidden_states,attention_mask=None,is_index_masked=None,is_index_global_attn=None,is_global_attn=None)
transformers.models.longformer.modeling_longformer.LongformerSelfOutput(self,config)
transformers.models.longformer.modeling_longformer.LongformerSelfOutput.__init__(self,config)
transformers.models.longformer.modeling_longformer.LongformerSelfOutput.forward(self,hidden_states,input_tensor)
transformers.models.longformer.modeling_longformer.LongformerSequenceClassifierOutput(ModelOutput)
transformers.models.longformer.modeling_longformer.LongformerTokenClassifierOutput(ModelOutput)
transformers.models.longformer.modeling_longformer._compute_global_attention_mask(input_ids,sep_token_id,before_sep_token=True)
transformers.models.longformer.modeling_longformer._get_question_end_index(input_ids,sep_token_id)
transformers.models.longformer.modeling_longformer.create_position_ids_from_input_ids(input_ids,padding_idx)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/longformer/tokenization_longformer.py----------------------------------------
A:transformers.models.longformer.tokenization_longformer.logger->utils.logging.get_logger(__name__)
transformers.LongformerTokenizer(RobertaTokenizer)
transformers.models.longformer.tokenization_longformer.LongformerTokenizer(RobertaTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/layoutlm/configuration_layoutlm.py----------------------------------------
A:transformers.models.layoutlm.configuration_layoutlm.logger->utils.logging.get_logger(__name__)
transformers.LayoutLMConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,max_2d_position_embeddings=1024,**kwargs)
transformers.models.layoutlm.configuration_layoutlm.LayoutLMConfig(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,max_2d_position_embeddings=1024,**kwargs)
transformers.models.layoutlm.configuration_layoutlm.LayoutLMConfig.__init__(self,vocab_size=30522,hidden_size=768,num_hidden_layers=12,num_attention_heads=12,intermediate_size=3072,hidden_act='gelu',hidden_dropout_prob=0.1,attention_probs_dropout_prob=0.1,max_position_embeddings=512,type_vocab_size=2,initializer_range=0.02,layer_norm_eps=1e-12,pad_token_id=0,gradient_checkpointing=False,max_2d_position_embeddings=1024,**kwargs)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/layoutlm/modeling_layoutlm.py----------------------------------------
A:transformers.models.layoutlm.modeling_layoutlm.logger->utils.logging.get_logger(__name__)
A:transformers.models.layoutlm.modeling_layoutlm.self.word_embeddings->torch.nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)
A:transformers.models.layoutlm.modeling_layoutlm.self.position_embeddings->torch.nn.Embedding(config.max_position_embeddings, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.x_position_embeddings->torch.nn.Embedding(config.max_2d_position_embeddings, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.y_position_embeddings->torch.nn.Embedding(config.max_2d_position_embeddings, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.h_position_embeddings->torch.nn.Embedding(config.max_2d_position_embeddings, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.w_position_embeddings->torch.nn.Embedding(config.max_2d_position_embeddings, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.token_type_embeddings->torch.nn.Embedding(config.type_vocab_size, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.LayerNorm->torch.nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)
A:transformers.models.layoutlm.modeling_layoutlm.self.dropout->torch.nn.Dropout(config.hidden_dropout_prob)
A:transformers.models.layoutlm.modeling_layoutlm.input_shape->input_ids.size()
A:transformers.models.layoutlm.modeling_layoutlm.token_type_ids->torch.zeros(input_shape, dtype=torch.long, device=device)
A:transformers.models.layoutlm.modeling_layoutlm.inputs_embeds->self.word_embeddings(input_ids)
A:transformers.models.layoutlm.modeling_layoutlm.position_embeddings->self.position_embeddings(position_ids)
A:transformers.models.layoutlm.modeling_layoutlm.left_position_embeddings->self.x_position_embeddings(bbox[:, :, 0])
A:transformers.models.layoutlm.modeling_layoutlm.upper_position_embeddings->self.y_position_embeddings(bbox[:, :, 1])
A:transformers.models.layoutlm.modeling_layoutlm.right_position_embeddings->self.x_position_embeddings(bbox[:, :, 2])
A:transformers.models.layoutlm.modeling_layoutlm.lower_position_embeddings->self.y_position_embeddings(bbox[:, :, 3])
A:transformers.models.layoutlm.modeling_layoutlm.h_position_embeddings->self.h_position_embeddings(bbox[:, :, 3] - bbox[:, :, 1])
A:transformers.models.layoutlm.modeling_layoutlm.w_position_embeddings->self.w_position_embeddings(bbox[:, :, 2] - bbox[:, :, 0])
A:transformers.models.layoutlm.modeling_layoutlm.token_type_embeddings->self.token_type_embeddings(token_type_ids)
A:transformers.models.layoutlm.modeling_layoutlm.embeddings->self.dropout(embeddings)
A:transformers.models.layoutlm.modeling_layoutlm.self.attention_head_size->int(config.hidden_size / config.num_attention_heads)
A:transformers.models.layoutlm.modeling_layoutlm.self.query->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.key->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.value->torch.nn.Linear(config.hidden_size, self.all_head_size)
A:transformers.models.layoutlm.modeling_layoutlm.self.position_embedding_type->getattr(config, 'position_embedding_type', 'absolute')
A:transformers.models.layoutlm.modeling_layoutlm.self.distance_embedding->torch.nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)
A:transformers.models.layoutlm.modeling_layoutlm.x->x.view(*new_x_shape).view(*new_x_shape)
A:transformers.models.layoutlm.modeling_layoutlm.mixed_query_layer->self.query(hidden_states)
A:transformers.models.layoutlm.modeling_layoutlm.mixed_key_layer->self.key(hidden_states)
A:transformers.models.layoutlm.modeling_layoutlm.mixed_value_layer->self.value(hidden_states)
A:transformers.models.layoutlm.modeling_layoutlm.query_layer->self.transpose_for_scores(mixed_query_layer)
A:transformers.models.layoutlm.modeling_layoutlm.key_layer->self.transpose_for_scores(mixed_key_layer)
A:transformers.models.layoutlm.modeling_layoutlm.value_layer->self.transpose_for_scores(mixed_value_layer)
A:transformers.models.layoutlm.modeling_layoutlm.attention_scores->torch.matmul(query_layer, key_layer.transpose(-1, -2))
A:transformers.models.layoutlm.modeling_layoutlm.position_ids_l->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)
A:transformers.models.layoutlm.modeling_layoutlm.position_ids_r->torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)
A:transformers.models.layoutlm.modeling_layoutlm.positional_embedding->positional_embedding.to(dtype=query_layer.dtype).to(dtype=query_layer.dtype)
A:transformers.models.layoutlm.modeling_layoutlm.relative_position_scores->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.layoutlm.modeling_layoutlm.relative_position_scores_query->torch.einsum('bhld,lrd->bhlr', query_layer, positional_embedding)
A:transformers.models.layoutlm.modeling_layoutlm.relative_position_scores_key->torch.einsum('bhrd,lrd->bhlr', key_layer, positional_embedding)
A:transformers.models.layoutlm.modeling_layoutlm.attention_probs->self.dropout(attention_probs)
A:transformers.models.layoutlm.modeling_layoutlm.context_layer->context_layer.view(*new_context_layer_shape).view(*new_context_layer_shape)
A:transformers.models.layoutlm.modeling_layoutlm.self.dense->torch.nn.Linear(config.hidden_size, config.hidden_size)
A:transformers.models.layoutlm.modeling_layoutlm.hidden_states->self.decoder(hidden_states)
A:transformers.models.layoutlm.modeling_layoutlm.self.self->LayoutLMSelfAttention(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.output->LayoutLMOutput(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.pruned_heads->self.pruned_heads.union(heads)
A:transformers.models.layoutlm.modeling_layoutlm.(heads, index)->find_pruneable_heads_and_indices(heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads)
A:transformers.models.layoutlm.modeling_layoutlm.self.self.query->prune_linear_layer(self.self.query, index)
A:transformers.models.layoutlm.modeling_layoutlm.self.self.key->prune_linear_layer(self.self.key, index)
A:transformers.models.layoutlm.modeling_layoutlm.self.self.value->prune_linear_layer(self.self.value, index)
A:transformers.models.layoutlm.modeling_layoutlm.self.output.dense->prune_linear_layer(self.output.dense, index, dim=1)
A:transformers.models.layoutlm.modeling_layoutlm.self_outputs->self.self(hidden_states, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.layoutlm.modeling_layoutlm.attention_output->self.output(self_outputs[0], hidden_states)
A:transformers.models.layoutlm.modeling_layoutlm.self.attention->LayoutLMAttention(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.crossattention->LayoutLMAttention(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.intermediate->LayoutLMIntermediate(config)
A:transformers.models.layoutlm.modeling_layoutlm.self_attention_outputs->self.attention(hidden_states, attention_mask, head_mask, output_attentions=output_attentions)
A:transformers.models.layoutlm.modeling_layoutlm.cross_attention_outputs->self.crossattention(attention_output, attention_mask, head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.layoutlm.modeling_layoutlm.layer_output->self.output(intermediate_output, attention_output)
A:transformers.models.layoutlm.modeling_layoutlm.intermediate_output->self.intermediate(attention_output)
A:transformers.models.layoutlm.modeling_layoutlm.self.layer->torch.nn.ModuleList([LayoutLMLayer(config) for _ in range(config.num_hidden_layers)])
A:transformers.models.layoutlm.modeling_layoutlm.layer_outputs->layer_module(hidden_states, attention_mask, layer_head_mask, encoder_hidden_states, encoder_attention_mask, output_attentions)
A:transformers.models.layoutlm.modeling_layoutlm.self.activation->torch.nn.Tanh()
A:transformers.models.layoutlm.modeling_layoutlm.pooled_output->self.pooler(sequence_output)
A:transformers.models.layoutlm.modeling_layoutlm.self.transform->LayoutLMPredictionHeadTransform(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.decoder->torch.nn.Linear(config.hidden_size, config.vocab_size, bias=False)
A:transformers.models.layoutlm.modeling_layoutlm.self.bias->torch.nn.Parameter(torch.zeros(config.vocab_size))
A:transformers.models.layoutlm.modeling_layoutlm.self.predictions->LayoutLMLMPredictionHead(config)
A:transformers.models.layoutlm.modeling_layoutlm.prediction_scores->self.cls(sequence_output)
A:transformers.models.layoutlm.modeling_layoutlm.self.embeddings->LayoutLMEmbeddings(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.encoder->LayoutLMEncoder(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.pooler->LayoutLMPooler(config)
A:transformers.models.layoutlm.modeling_layoutlm.attention_mask->torch.ones(input_shape, device=device)
A:transformers.models.layoutlm.modeling_layoutlm.bbox->torch.zeros(tuple(list(input_shape) + [4]), dtype=torch.long, device=device)
A:transformers.models.layoutlm.modeling_layoutlm.extended_attention_mask->extended_attention_mask.to(dtype=self.dtype).to(dtype=self.dtype)
A:transformers.models.layoutlm.modeling_layoutlm.head_mask->head_mask.to(dtype=next(self.parameters()).dtype).to(dtype=next(self.parameters()).dtype)
A:transformers.models.layoutlm.modeling_layoutlm.embedding_output->self.embeddings(input_ids=input_ids, bbox=bbox, position_ids=position_ids, token_type_ids=token_type_ids, inputs_embeds=inputs_embeds)
A:transformers.models.layoutlm.modeling_layoutlm.encoder_outputs->self.encoder(embedding_output, extended_attention_mask, head_mask=head_mask, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.layoutlm.modeling_layoutlm.self.layoutlm->LayoutLMModel(config)
A:transformers.models.layoutlm.modeling_layoutlm.self.cls->LayoutLMOnlyMLMHead(config)
A:transformers.models.layoutlm.modeling_layoutlm.outputs->self.layoutlm(input_ids=input_ids, bbox=bbox, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, head_mask=head_mask, inputs_embeds=inputs_embeds, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.layoutlm.modeling_layoutlm.loss_fct->CrossEntropyLoss()
A:transformers.models.layoutlm.modeling_layoutlm.masked_lm_loss->loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.layoutlm.modeling_layoutlm.self.classifier->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.layoutlm.modeling_layoutlm.sequence_output->self.dropout(sequence_output)
A:transformers.models.layoutlm.modeling_layoutlm.logits->self.classifier(sequence_output)
A:transformers.models.layoutlm.modeling_layoutlm.loss->loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
transformers.LayoutLMForMaskedLM(self,config)
transformers.LayoutLMForMaskedLM.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LayoutLMForMaskedLM.get_input_embeddings(self)
transformers.LayoutLMForMaskedLM.get_output_embeddings(self)
transformers.LayoutLMForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.LayoutLMForTokenClassification(self,config)
transformers.LayoutLMForTokenClassification.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LayoutLMForTokenClassification.get_input_embeddings(self)
transformers.LayoutLMModel(self,config)
transformers.LayoutLMModel._prune_heads(self,heads_to_prune)
transformers.LayoutLMModel.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.LayoutLMModel.get_input_embeddings(self)
transformers.LayoutLMModel.set_input_embeddings(self,value)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMAttention(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMAttention.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMAttention.prune_heads(self,heads)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEmbeddings(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEmbeddings.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEmbeddings.forward(self,input_ids=None,bbox=None,token_type_ids=None,position_ids=None,inputs_embeds=None)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEncoder(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEncoder.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMEncoder.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False,output_hidden_states=False,return_dict=True)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM.get_input_embeddings(self)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM.get_output_embeddings(self)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForMaskedLM.set_output_embeddings(self,new_embeddings)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForTokenClassification(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForTokenClassification.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForTokenClassification.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,labels=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMForTokenClassification.get_input_embeddings(self)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMIntermediate(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMIntermediate.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMIntermediate.forward(self,hidden_states)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLMPredictionHead(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLMPredictionHead.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLMPredictionHead.forward(self,hidden_states)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayer(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayer.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayer.feed_forward_chunk(self,attention_output)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayer.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel._prune_heads(self,heads_to_prune)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel.forward(self,input_ids=None,bbox=None,attention_mask=None,token_type_ids=None,position_ids=None,head_mask=None,inputs_embeds=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel.get_input_embeddings(self)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel.set_input_embeddings(self,value)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOnlyMLMHead(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOnlyMLMHead.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOnlyMLMHead.forward(self,sequence_output)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOutput(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOutput.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMOutput.forward(self,hidden_states,input_tensor)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPooler(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPooler.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPooler.forward(self,hidden_states)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPreTrainedModel(PreTrainedModel)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPreTrainedModel._init_weights(self,module)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPredictionHeadTransform(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPredictionHeadTransform.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMPredictionHeadTransform.forward(self,hidden_states)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfAttention(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfAttention.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfAttention.forward(self,hidden_states,attention_mask=None,head_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,output_attentions=False)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfAttention.transpose_for_scores(self,x)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfOutput(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfOutput.__init__(self,config)
transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfOutput.forward(self,hidden_states,input_tensor)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/layoutlm/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/layoutlm/tokenization_layoutlm.py----------------------------------------
A:transformers.models.layoutlm.tokenization_layoutlm.logger->utils.logging.get_logger(__name__)
transformers.LayoutLMTokenizer(BertTokenizer)
transformers.models.layoutlm.tokenization_layoutlm.LayoutLMTokenizer(BertTokenizer)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/layoutlm/tokenization_layoutlm_fast.py----------------------------------------
A:transformers.models.layoutlm.tokenization_layoutlm_fast.logger->utils.logging.get_logger(__name__)
transformers.LayoutLMTokenizerFast(BertTokenizerFast)
transformers.models.layoutlm.tokenization_layoutlm_fast.LayoutLMTokenizerFast(BertTokenizerFast)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/phobert/tokenization_phobert.py----------------------------------------
A:transformers.models.phobert.tokenization_phobert.logger->utils.logging.get_logger(__name__)
A:transformers.models.phobert.tokenization_phobert.pairs->get_pairs(word)
A:transformers.models.phobert.tokenization_phobert.self.bpe_ranks->dict(zip(merges, range(len(merges))))
A:transformers.models.phobert.tokenization_phobert.word->'@@ '.join(word)
A:transformers.models.phobert.tokenization_phobert.bigram->min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float('inf')))
A:transformers.models.phobert.tokenization_phobert.j->'@@ '.join(word).index(first, i)
A:transformers.models.phobert.tokenization_phobert.new_word->tuple(new_word)
A:transformers.models.phobert.tokenization_phobert.words->re.findall('\\S+\\n?', text)
A:transformers.models.phobert.tokenization_phobert.out_string->' '.join(tokens).replace('@@ ', '').strip()
A:transformers.models.phobert.tokenization_phobert.out_vocab_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab_file'])
A:transformers.models.phobert.tokenization_phobert.out_merge_file->os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['merges_file'])
A:transformers.models.phobert.tokenization_phobert.lines->f.readlines()
A:transformers.models.phobert.tokenization_phobert.line->lineTmp.strip()
A:transformers.models.phobert.tokenization_phobert.idx->lineTmp.strip().rfind(' ')
A:transformers.models.phobert.tokenization_phobert.self.encoder[word]->len(self.encoder)
transformers.PhobertTokenizer(self,vocab_file,merges_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.PhobertTokenizer._convert_id_to_token(self,index)
transformers.PhobertTokenizer._convert_token_to_id(self,token)
transformers.PhobertTokenizer._tokenize(self,text)
transformers.PhobertTokenizer.add_from_file(self,f)
transformers.PhobertTokenizer.bpe(self,token)
transformers.PhobertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.PhobertTokenizer.convert_tokens_to_string(self,tokens)
transformers.PhobertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.PhobertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.PhobertTokenizer.get_vocab(self)
transformers.PhobertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.PhobertTokenizer.vocab_size(self)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer(self,vocab_file,merges_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.__init__(self,vocab_file,merges_file,bos_token='<s>',eos_token='</s>',sep_token='</s>',cls_token='<s>',unk_token='<unk>',pad_token='<pad>',mask_token='<mask>',**kwargs)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer._convert_id_to_token(self,index)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer._convert_token_to_id(self,token)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer._tokenize(self,text)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.add_from_file(self,f)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.bpe(self,token)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.build_inputs_with_special_tokens(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.convert_tokens_to_string(self,tokens)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.create_token_type_ids_from_sequences(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None)->List[int]
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.get_special_tokens_mask(self,token_ids_0:List[int],token_ids_1:Optional[List[int]]=None,already_has_special_tokens:bool=False)->List[int]
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.get_vocab(self)
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.save_vocabulary(self,save_directory:str,filename_prefix:Optional[str]=None)->Tuple[str]
transformers.models.phobert.tokenization_phobert.PhobertTokenizer.vocab_size(self)
transformers.models.phobert.tokenization_phobert.get_pairs(word)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/phobert/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/modeling_tf_bart.py----------------------------------------
A:transformers.models.bart.modeling_tf_bart.logger->utils.logging.get_logger(__name__)
A:transformers.models.bart.modeling_tf_bart.shifted_input_ids->tensorflow.identity(shifted_input_ids)
A:transformers.models.bart.modeling_tf_bart.start_tokens->tensorflow.fill((shape_list(shifted_input_ids)[0], 1), eos_token_id)
A:transformers.models.bart.modeling_tf_bart.assert_gte0->tensorflow.debugging.assert_greater_equal(shifted_input_ids, tf.cast(0, tf.int32))
A:transformers.models.bart.modeling_tf_bart.mask_cond->tensorflow.range(shape_list(mask)[-1])
A:transformers.models.bart.modeling_tf_bart.mask->tensorflow.concat([tf.zeros((tgt_len, past_key_values_length), dtype=tf.float32), mask], axis=-1)
A:transformers.models.bart.modeling_tf_bart.(bsz, src_len)->shape_list(mask)
A:transformers.models.bart.modeling_tf_bart.expanded_mask->tensorflow.concat([tf.ones((bsz, 1, tgt_len, past_key_values_length), dtype=tf.float32), expanded_mask], axis=-1)
A:transformers.models.bart.modeling_tf_bart.positions->self.embed_positions(input_shape, past_key_values_length)
A:transformers.models.bart.modeling_tf_bart.position_enc->numpy.array([[pos / np.power(10000, 2 * (j // 2) / dim) for j in range(dim)] for pos in range(n_pos)])
A:transformers.models.bart.modeling_tf_bart.position_enc[:, 0:dim // 2]->numpy.sin(position_enc[:, 0::2])
A:transformers.models.bart.modeling_tf_bart.position_enc[:, dim // 2:]->numpy.cos(position_enc[:, 1::2])
A:transformers.models.bart.modeling_tf_bart.table->tensorflow.convert_to_tensor(position_enc, dtype=tf.float32)
A:transformers.models.bart.modeling_tf_bart.self.dropout->tensorflow.keras.layers.Dropout(config.dropout)
A:transformers.models.bart.modeling_tf_bart.self.k_proj->tensorflow.keras.layers.Dense(embed_dim, use_bias=bias, name='k_proj')
A:transformers.models.bart.modeling_tf_bart.self.q_proj->tensorflow.keras.layers.Dense(embed_dim, use_bias=bias, name='q_proj')
A:transformers.models.bart.modeling_tf_bart.self.v_proj->tensorflow.keras.layers.Dense(embed_dim, use_bias=bias, name='v_proj')
A:transformers.models.bart.modeling_tf_bart.self.out_proj->tensorflow.keras.layers.Dense(embed_dim, use_bias=bias, name='out_proj')
A:transformers.models.bart.modeling_tf_bart.(bsz, tgt_len, embed_dim)->shape_list(hidden_states)
A:transformers.models.bart.modeling_tf_bart.key_states->tensorflow.reshape(key_states, proj_shape)
A:transformers.models.bart.modeling_tf_bart.value_states->tensorflow.reshape(value_states, proj_shape)
A:transformers.models.bart.modeling_tf_bart.query_states->tensorflow.reshape(self._shape(query_states, tgt_len, bsz), proj_shape)
A:transformers.models.bart.modeling_tf_bart.attn_weights->tensorflow.nn.softmax(attn_weights, axis=-1)
A:transformers.models.bart.modeling_tf_bart.attn_probs->self.dropout(attn_weights, training=training)
A:transformers.models.bart.modeling_tf_bart.attn_output->self.out_proj(attn_output)
A:transformers.models.bart.modeling_tf_bart.self.self_attn->TFBartAttention(embed_dim=self.embed_dim, num_heads=config.decoder_attention_heads, dropout=config.attention_dropout, name='self_attn', is_decoder=True)
A:transformers.models.bart.modeling_tf_bart.self.self_attn_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-05, name='self_attn_layer_norm')
A:transformers.models.bart.modeling_tf_bart.self.activation_dropout->tensorflow.keras.layers.Dropout(config.activation_dropout)
A:transformers.models.bart.modeling_tf_bart.self.fc1->tensorflow.keras.layers.Dense(config.decoder_ffn_dim, name='fc1')
A:transformers.models.bart.modeling_tf_bart.self.fc2->tensorflow.keras.layers.Dense(self.embed_dim, name='fc2')
A:transformers.models.bart.modeling_tf_bart.self.final_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-05, name='final_layer_norm')
A:transformers.models.bart.modeling_tf_bart.hidden_states->self.layer_norm(hidden_states)
A:transformers.models.bart.modeling_tf_bart.(hidden_states, self_attn_weights, _)->self.self_attn(hidden_states=hidden_states, attention_mask=attention_mask)
A:transformers.models.bart.modeling_tf_bart.self.encoder_attn->TFBartAttention(self.embed_dim, config.decoder_attention_heads, dropout=config.attention_dropout, name='encoder_attn', is_decoder=True)
A:transformers.models.bart.modeling_tf_bart.self.encoder_attn_layer_norm->tensorflow.keras.layers.LayerNormalization(epsilon=1e-05, name='encoder_attn_layer_norm')
A:transformers.models.bart.modeling_tf_bart.(hidden_states, self_attn_weights, present_key_value)->self.self_attn(hidden_states=hidden_states, past_key_value=self_attn_past_key_value, attention_mask=attention_mask)
A:transformers.models.bart.modeling_tf_bart.(hidden_states, _, cross_attn_present_key_value)->self.encoder_attn(hidden_states=hidden_states, key_value_states=encoder_hidden_states, attention_mask=encoder_attention_mask, past_key_value=cross_attn_past_key_value)
A:transformers.models.bart.modeling_tf_bart.input_ids->tensorflow.cast(tf.constant(DUMMY_INPUTS), tf.int32)
A:transformers.models.bart.modeling_tf_bart.decoder_input_ids->tensorflow.cast(tf.constant(DUMMY_INPUTS), tf.int32)
A:transformers.models.bart.modeling_tf_bart.self.embed_positions->TFBartLearnedPositionalEmbedding(config.max_position_embeddings, config.d_model, self.padding_idx, config.extra_pos_embeddings, name='embed_positions')
A:transformers.models.bart.modeling_tf_bart.inputs->input_processing(func=self.call, config=self.config, input_ids=input_ids, attention_mask=attention_mask, decoder_input_ids=decoder_input_ids, decoder_attention_mask=decoder_attention_mask, encoder_outputs=encoder_outputs, past_key_values=past_key_values, inputs_embeds=inputs_embeds, decoder_inputs_embeds=decoder_inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict, labels=labels, training=training, kwargs_call=kwargs)
A:transformers.models.bart.modeling_tf_bart.input_shape->shape_list(inputs['input_ids'])
A:transformers.models.bart.modeling_tf_bart.inputs_embeds->self.embed_tokens(inputs['input_ids'])
A:transformers.models.bart.modeling_tf_bart.embed_pos->self.embed_positions(input_shape)
A:transformers.models.bart.modeling_tf_bart.attention_mask->tensorflow.ones(input_shape, dtype=tf.int32)
A:transformers.models.bart.modeling_tf_bart.dropout_probability->random.uniform(0, 1)
A:transformers.models.bart.modeling_tf_bart.(hidden_states, attn)->encoder_layer(hidden_states, attention_mask)
A:transformers.models.bart.modeling_tf_bart.combined_attention_mask->_make_causal_mask(input_shape, past_key_values_length=past_key_values_length)
A:transformers.models.bart.modeling_tf_bart.encoder_attention_mask->_expand_mask(inputs['encoder_attention_mask'], tgt_len=input_shape[-1])
A:transformers.models.bart.modeling_tf_bart.(hidden_states, layer_self_attn, present_key_value)->decoder_layer(hidden_states, attention_mask=combined_attention_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, past_key_value=past_key_value)
A:transformers.models.bart.modeling_tf_bart.self.shared->TFSharedEmbeddings(config.vocab_size, config.d_model, config.pad_token_id, name='model.shared')
A:transformers.models.bart.modeling_tf_bart.embed_tokens->TFWrappedEmbeddings(self.shared, abs_scope_name=shared_abs_scope_name)
A:transformers.models.bart.modeling_tf_bart.self.encoder->TFBartEncoder(config, embed_tokens, name='encoder')
A:transformers.models.bart.modeling_tf_bart.self.decoder->TFBartDecoder(config, embed_tokens, name='decoder')
A:transformers.models.bart.modeling_tf_bart.inputs['decoder_input_ids']->shift_tokens_right(inputs['labels'], self.config.pad_token_id, self.config.eos_token_id)
A:transformers.models.bart.modeling_tf_bart.inputs['encoder_outputs']->inputs['encoder_outputs'].to_tuple().to_tuple()
A:transformers.models.bart.modeling_tf_bart.decoder_outputs->self.decoder(inputs['decoder_input_ids'], attention_mask=decoder_attention_mask, encoder_hidden_states=inputs['encoder_outputs'][0], encoder_attention_mask=inputs['attention_mask'], past_key_values=inputs['past_key_values'], inputs_embeds=inputs['decoder_inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'], training=inputs['training'])
A:transformers.models.bart.modeling_tf_bart.self.model->TFBartModel(config, name='model')
A:transformers.models.bart.modeling_tf_bart.self.final_logits_bias->self.add_weight(shape=(1, new_num_tokens), initializer='zeros', trainable=False, name='final_logits_bias')
A:transformers.models.bart.modeling_tf_bart.num_tokens_to_copy->min(self.final_logits_bias.shape[0], new_num_tokens)
A:transformers.models.bart.modeling_tf_bart.init_bias->tensorflow.zeros((new_num_tokens,))
A:transformers.models.bart.modeling_tf_bart.outputs->self.model(inputs['input_ids'], attention_mask=inputs['attention_mask'], decoder_input_ids=inputs['decoder_input_ids'], encoder_outputs=inputs['encoder_outputs'], decoder_attention_mask=inputs['decoder_attention_mask'], past_key_values=inputs['past_key_values'], inputs_embeds=inputs['inputs_embeds'], decoder_inputs_embeds=inputs['decoder_inputs_embeds'], use_cache=inputs['use_cache'], output_attentions=inputs['output_attentions'], output_hidden_states=inputs['output_hidden_states'], return_dict=inputs['return_dict'])
A:transformers.models.bart.modeling_tf_bart.lm_logits->self.model.shared(outputs[0], mode='linear')
A:transformers.models.bart.modeling_tf_bart.encoder_outputs->TFBaseModelOutput(last_hidden_state=encoder_outputs)
A:transformers.models.bart.modeling_tf_bart.vocab_range->tensorflow.constant(range(self.config.vocab_size))
A:transformers.models.bart.modeling_tf_bart.loss_fn->tensorflow.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)
A:transformers.models.bart.modeling_tf_bart.melted_labels->tensorflow.reshape(labels, (-1,))
A:transformers.models.bart.modeling_tf_bart.active_loss->tensorflow.not_equal(melted_labels, self.config.pad_token_id)
A:transformers.models.bart.modeling_tf_bart.reduced_logits->tensorflow.boolean_mask(tf.reshape(logits, (-1, shape_list(logits)[2])), active_loss)
A:transformers.models.bart.modeling_tf_bart.labels->tensorflow.boolean_mask(melted_labels, active_loss)
transformers.TFBartForConditionalGeneration(self,config,*inputs,**kwargs)
transformers.TFBartForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.TFBartForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.TFBartForConditionalGeneration.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[TFBaseModelOutput]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.TFBartForConditionalGeneration.compute_loss(self,labels,logits)
transformers.TFBartForConditionalGeneration.get_decoder(self)
transformers.TFBartForConditionalGeneration.get_encoder(self)
transformers.TFBartForConditionalGeneration.get_output_embeddings(self)
transformers.TFBartForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past,attention_mask,use_cache,**kwargs)->Dict
transformers.TFBartForConditionalGeneration.resize_token_embeddings(self,new_num_tokens)
transformers.TFBartModel(self,config:BartConfig,*inputs,**kwargs)
transformers.TFBartModel.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Union[Tuple,TFBaseModelOutput]]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.TFBartModel.get_decoder(self)
transformers.TFBartModel.get_input_embeddings(self)
transformers.TFBartModel.get_output_embeddings(self)
transformers.TFBartModel.set_input_embeddings(self,value)
transformers.TFBartPretrainedModel(TFPreTrainedModel)
transformers.TFBartPretrainedModel.dummy_inputs(self)
transformers.models.bart.modeling_tf_bart.TFBartAttention(self,embed_dim:int,num_heads:int,dropout:float=0.0,is_decoder:bool=False,bias:bool=True,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartAttention.__init__(self,embed_dim:int,num_heads:int,dropout:float=0.0,is_decoder:bool=False,bias:bool=True,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartAttention._shape(self,tensor:tf.Tensor,seq_len:int,bsz:int)
transformers.models.bart.modeling_tf_bart.TFBartAttention.call(self,hidden_states:tf.Tensor,key_value_states:Optional[tf.Tensor]=None,past_key_value:Optional[Tuple[Tuple[tf.Tensor]]]=None,attention_mask:Optional[tf.Tensor]=None,training=False)->Tuple[tf.Tensor, Optional[tf.Tensor]]
transformers.models.bart.modeling_tf_bart.TFBartDecoder(self,config:BartConfig,embed_tokens:Optional[TFSharedEmbeddings]=None,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartDecoder.__init__(self,config:BartConfig,embed_tokens:Optional[TFSharedEmbeddings]=None,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartDecoder.call(self,input_ids=None,inputs_embeds=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartDecoderLayer(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartDecoderLayer.__init__(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartDecoderLayer.call(self,hidden_states,attention_mask:Optional[tf.Tensor]=None,encoder_hidden_states:Optional[tf.Tensor]=None,encoder_attention_mask:Optional[tf.Tensor]=None,past_key_value:Optional[Tuple[tf.Tensor]]=None,training=False)->Tuple[tf.Tensor, tf.Tensor, Tuple[Tuple[tf.Tensor]]]
transformers.models.bart.modeling_tf_bart.TFBartEncoder(self,config:BartConfig,embed_tokens:Optional[TFSharedEmbeddings]=None,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartEncoder.__init__(self,config:BartConfig,embed_tokens:Optional[TFSharedEmbeddings]=None,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartEncoder.call(self,input_ids=None,inputs_embeds=None,attention_mask=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartEncoderLayer(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartEncoderLayer.__init__(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartEncoderLayer.call(self,hidden_states:tf.Tensor,attention_mask:tf.Tensor,training=False)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration(self,config,*inputs,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.__init__(self,config,*inputs,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[TFBaseModelOutput]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,labels=None,training=False,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.compute_loss(self,labels,logits)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.get_decoder(self)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.get_encoder(self)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.get_output_embeddings(self)
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past,attention_mask,use_cache,**kwargs)->Dict
transformers.models.bart.modeling_tf_bart.TFBartForConditionalGeneration.resize_token_embeddings(self,new_num_tokens)
transformers.models.bart.modeling_tf_bart.TFBartLearnedPositionalEmbedding(self,num_embeddings:int,embedding_dim:int,padding_idx:int,offset,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartLearnedPositionalEmbedding.__init__(self,num_embeddings:int,embedding_dim:int,padding_idx:int,offset,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartLearnedPositionalEmbedding.call(self,input_shape:tf.TensorShape,past_key_values_length:int=0)
transformers.models.bart.modeling_tf_bart.TFBartModel(self,config:BartConfig,*inputs,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartModel.__init__(self,config:BartConfig,*inputs,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartModel.call(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs:Optional[Union[Tuple,TFBaseModelOutput]]=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None,training=False,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartModel.get_decoder(self)
transformers.models.bart.modeling_tf_bart.TFBartModel.get_input_embeddings(self)
transformers.models.bart.modeling_tf_bart.TFBartModel.get_output_embeddings(self)
transformers.models.bart.modeling_tf_bart.TFBartModel.set_input_embeddings(self,value)
transformers.models.bart.modeling_tf_bart.TFBartPretrainedModel(TFPreTrainedModel)
transformers.models.bart.modeling_tf_bart.TFBartPretrainedModel.dummy_inputs(self)
transformers.models.bart.modeling_tf_bart.TFBartSinusoidalPositionalEmbedding(self,num_positions:int,embedding_dim:int,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartSinusoidalPositionalEmbedding.__init__(self,num_positions:int,embedding_dim:int,**kwargs)
transformers.models.bart.modeling_tf_bart.TFBartSinusoidalPositionalEmbedding._init_weight(n_pos:int,dim:int)
transformers.models.bart.modeling_tf_bart.TFBartSinusoidalPositionalEmbedding.build(self,input_shape:tf.TensorShape)
transformers.models.bart.modeling_tf_bart.TFBartSinusoidalPositionalEmbedding.call(self,input_shape:tf.TensorShape,past_key_values_length:int=0)
transformers.models.bart.modeling_tf_bart.TFPretrainedBartModel(TFBartPretrainedModel)
transformers.models.bart.modeling_tf_bart.TFPretrainedBartModel.__init_subclass__(self)
transformers.models.bart.modeling_tf_bart._expand_mask(mask:tf.Tensor,tgt_len:Optional[int]=None,past_key_values_length:int=0)
transformers.models.bart.modeling_tf_bart._make_causal_mask(input_ids_shape:tf.TensorShape,past_key_values_length:int=0)
transformers.models.bart.modeling_tf_bart.shift_tokens_right(input_ids:tf.Tensor,pad_token_id:int,eos_token_id:int)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/configuration_bart.py----------------------------------------
A:transformers.models.bart.configuration_bart.logger->utils.logging.get_logger(__name__)
transformers.BartConfig(self,activation_dropout=0.0,extra_pos_embeddings=2,activation_function='gelu',vocab_size=50265,d_model=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=1024,init_std=0.02,classifier_dropout=0.0,num_labels=3,is_encoder_decoder=True,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=False,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.BartConfig.hidden_size(self)->int
transformers.BartConfig.is_valid_mbart(self)->bool
transformers.BartConfig.num_attention_heads(self)->int
transformers.models.bart.configuration_bart.BartConfig(self,activation_dropout=0.0,extra_pos_embeddings=2,activation_function='gelu',vocab_size=50265,d_model=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=1024,init_std=0.02,classifier_dropout=0.0,num_labels=3,is_encoder_decoder=True,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=False,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.models.bart.configuration_bart.BartConfig.__init__(self,activation_dropout=0.0,extra_pos_embeddings=2,activation_function='gelu',vocab_size=50265,d_model=1024,encoder_ffn_dim=4096,encoder_layers=12,encoder_attention_heads=16,decoder_ffn_dim=4096,decoder_layers=12,decoder_attention_heads=16,encoder_layerdrop=0.0,decoder_layerdrop=0.0,attention_dropout=0.0,dropout=0.1,max_position_embeddings=1024,init_std=0.02,classifier_dropout=0.0,num_labels=3,is_encoder_decoder=True,normalize_before=False,add_final_layer_norm=False,do_blenderbot_90_layernorm=False,scale_embedding=False,normalize_embedding=True,static_position_embeddings=False,add_bias_logits=False,force_bos_token_to_be_generated=False,use_cache=True,pad_token_id=1,bos_token_id=0,eos_token_id=2,**common_kwargs)
transformers.models.bart.configuration_bart.BartConfig.hidden_size(self)->int
transformers.models.bart.configuration_bart.BartConfig.is_valid_mbart(self)->bool
transformers.models.bart.configuration_bart.BartConfig.num_attention_heads(self)->int


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/convert_bart_original_pytorch_checkpoint_to_pytorch.py----------------------------------------
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.logger->transformers.utils.logging.get_logger(__name__)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.val->dct.pop(old)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.sd->torch.load(checkpoint_path, map_location='cpu')
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.hub_interface->torch.hub.load('pytorch/fairseq', 'bart.large.cnn').eval()
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.bart->load_xsum_checkpoint(checkpoint_path)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.hf_checkpoint_name->checkpoint_path.replace('.', '-')
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.config->transformers.BartConfig.from_pretrained(hf_checkpoint_name)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.tokens->load_xsum_checkpoint(checkpoint_path).encode(SAMPLE_TEXT).unsqueeze(0)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.tokens2->transformers.BartTokenizer.from_pretrained(hf_checkpoint_name).encode(SAMPLE_TEXT, return_tensors='pt').unsqueeze(0)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.state_dict->load_xsum_checkpoint(checkpoint_path).model.state_dict()
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.model->BartForConditionalGeneration(config).eval()
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.fairseq_output->load_xsum_checkpoint(checkpoint_path).extract_features(tokens)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.model.lm_head->_make_linear_from_emb(model.model.shared)
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.parser->argparse.ArgumentParser()
A:transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.args->argparse.ArgumentParser().parse_args()
transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.convert_bart_checkpoint(checkpoint_path,pytorch_dump_folder_path,hf_checkpoint_name=None)
transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.load_xsum_checkpoint(checkpoint_path)
transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.remove_ignore_keys_(state_dict)
transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.rename_key(dct,old,new)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/tokenization_bart.py----------------------------------------
A:transformers.models.bart.tokenization_bart.logger->utils.logging.get_logger(__name__)
transformers.BartTokenizer(RobertaTokenizer)
transformers.BartTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation=True,**kwargs)->BatchEncoding
transformers.models.bart.tokenization_bart.BartTokenizer(RobertaTokenizer)
transformers.models.bart.tokenization_bart.BartTokenizer.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:str=None,truncation=True,**kwargs)->BatchEncoding


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/tokenization_bart_fast.py----------------------------------------
A:transformers.models.bart.tokenization_bart_fast.logger->utils.logging.get_logger(__name__)
transformers.BartTokenizerFast(RobertaTokenizerFast)
transformers.BartTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:Optional[str]=None,truncation=True,**kwargs)->BatchEncoding
transformers.models.bart.tokenization_bart_fast.BartTokenizerFast(RobertaTokenizerFast)
transformers.models.bart.tokenization_bart_fast.BartTokenizerFast.prepare_seq2seq_batch(self,src_texts:List[str],tgt_texts:Optional[List[str]]=None,max_length:Optional[int]=None,max_target_length:Optional[int]=None,padding:str='longest',return_tensors:Optional[str]=None,truncation=True,**kwargs)->BatchEncoding


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/modeling_bart.py----------------------------------------
A:transformers.models.bart.modeling_bart.logger->utils.logging.get_logger(__name__)
A:transformers.models.bart.modeling_bart.prev_output_tokens->input_ids.view(-1, input_shape[-1]).clone()
A:transformers.models.bart.modeling_bart.index_of_eos->(prev_output_tokens.ne(pad_token_id).sum(dim=1) - 1).unsqueeze(-1)
A:transformers.models.bart.modeling_bart.decoder_start_tokens->input_ids.view(-1, input_shape[-1]).clone().gather(1, index_of_eos).squeeze()
A:transformers.models.bart.modeling_bart.prev_output_tokens[:, 1:]->prev_output_tokens[:, :-1].clone()
A:transformers.models.bart.modeling_bart.mask->torch.cat([torch.zeros(tgt_len, past_key_values_length, dtype=dtype), mask], dim=-1)
A:transformers.models.bart.modeling_bart.mask_cond->torch.arange(mask.size(-1))
A:transformers.models.bart.modeling_bart.(bsz, src_len)->torch.cat([torch.zeros(tgt_len, past_key_values_length, dtype=dtype), mask], dim=-1).size()
A:transformers.models.bart.modeling_bart.expanded_mask->torch.cat([torch.ones(bsz, 1, tgt_len, past_key_values_length, device=expanded_mask.device, dtype=dtype), expanded_mask], dim=-1)
A:transformers.models.bart.modeling_bart.positions->self.embed_positions(input_shape, past_key_values_length)
A:transformers.models.bart.modeling_bart.self.weight->self._init_weight(self.weight)
A:transformers.models.bart.modeling_bart.position_enc->numpy.array([[pos / np.power(10000, 2 * (j // 2) / dim) for j in range(dim)] for pos in range(n_pos)])
A:transformers.models.bart.modeling_bart.out[:, 0:sentinel]->torch.FloatTensor(np.sin(position_enc[:, 0::2]))
A:transformers.models.bart.modeling_bart.out[:, sentinel:]->torch.FloatTensor(np.cos(position_enc[:, 1::2]))
A:transformers.models.bart.modeling_bart.self.k_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.bart.modeling_bart.self.v_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.bart.modeling_bart.self.q_proj->torch.nn.Linear(embed_dim, embed_dim, bias=bias)
A:transformers.models.bart.modeling_bart.self.out_proj->torch.nn.Linear(inner_dim, num_classes)
A:transformers.models.bart.modeling_bart.(bsz, tgt_len, embed_dim)->self.layer_norm(hidden_states).size()
A:transformers.models.bart.modeling_bart.key_states->key_states.view(*proj_shape).view(*proj_shape)
A:transformers.models.bart.modeling_bart.value_states->value_states.view(*proj_shape).view(*proj_shape)
A:transformers.models.bart.modeling_bart.query_states->self._shape(query_states, tgt_len, bsz).view(*proj_shape)
A:transformers.models.bart.modeling_bart.src_len->key_states.view(*proj_shape).view(*proj_shape).size(1)
A:transformers.models.bart.modeling_bart.attn_weights->attn_weights.view(bsz, self.num_heads, tgt_len, src_len).view(bsz * self.num_heads, tgt_len, src_len)
A:transformers.models.bart.modeling_bart.attn_weights_reshaped->attn_weights.view(bsz, self.num_heads, tgt_len, src_len).view(bsz * self.num_heads, tgt_len, src_len).view(bsz, self.num_heads, tgt_len, src_len)
A:transformers.models.bart.modeling_bart.attn_probs->torch.nn.functional.dropout(attn_weights, p=self.dropout, training=self.training)
A:transformers.models.bart.modeling_bart.attn_output->self.out_proj(attn_output)
A:transformers.models.bart.modeling_bart.self.self_attn->BartAttention(embed_dim=self.embed_dim, num_heads=config.decoder_attention_heads, dropout=config.attention_dropout, is_decoder=True)
A:transformers.models.bart.modeling_bart.self.self_attn_layer_norm->BartLayerNorm(self.embed_dim)
A:transformers.models.bart.modeling_bart.self.fc1->torch.nn.Linear(self.embed_dim, config.decoder_ffn_dim)
A:transformers.models.bart.modeling_bart.self.fc2->torch.nn.Linear(config.decoder_ffn_dim, self.embed_dim)
A:transformers.models.bart.modeling_bart.self.final_layer_norm->BartLayerNorm(self.embed_dim)
A:transformers.models.bart.modeling_bart.hidden_states->self.layer_norm(hidden_states)
A:transformers.models.bart.modeling_bart.(hidden_states, attn_weights, _)->self.self_attn(hidden_states=hidden_states, attention_mask=attention_mask, output_attentions=output_attentions)
A:transformers.models.bart.modeling_bart.self.encoder_attn->BartAttention(self.embed_dim, config.decoder_attention_heads, dropout=config.attention_dropout, is_decoder=True)
A:transformers.models.bart.modeling_bart.self.encoder_attn_layer_norm->BartLayerNorm(self.embed_dim)
A:transformers.models.bart.modeling_bart.(hidden_states, self_attn_weights, present_key_value)->self.self_attn(hidden_states=hidden_states, past_key_value=self_attn_past_key_value, attention_mask=attention_mask, output_attentions=output_attentions)
A:transformers.models.bart.modeling_bart.(hidden_states, cross_attn_weights, cross_attn_present_key_value)->self.encoder_attn(hidden_states=hidden_states, key_value_states=encoder_hidden_states, attention_mask=encoder_attention_mask, past_key_value=cross_attn_past_key_value, output_attentions=output_attentions)
A:transformers.models.bart.modeling_bart.self.dense->torch.nn.Linear(input_dim, inner_dim)
A:transformers.models.bart.modeling_bart.self.dropout->torch.nn.Dropout(p=pooler_dropout)
A:transformers.models.bart.modeling_bart.input_ids->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1])
A:transformers.models.bart.modeling_bart.self.embed_tokens->torch.nn.Embedding(config.vocab_size, config.d_model, self.padding_idx)
A:transformers.models.bart.modeling_bart.self.embed_positions->BartLearnedPositionalEmbedding(config.max_position_embeddings, config.d_model, self.padding_idx, config.extra_pos_embeddings)
A:transformers.models.bart.modeling_bart.self.layers->torch.nn.ModuleList([BartDecoderLayer(config) for _ in range(config.decoder_layers)])
A:transformers.models.bart.modeling_bart.input_shape->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1]).size()
A:transformers.models.bart.modeling_bart.embed_pos->self.embed_positions(input_shape)
A:transformers.models.bart.modeling_bart.attention_mask->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1]).ne(self.config.pad_token_id).to(torch.long)
A:transformers.models.bart.modeling_bart.dropout_probability->random.uniform(0, 1)
A:transformers.models.bart.modeling_bart.(hidden_states, attn)->encoder_layer(hidden_states, attention_mask, output_attentions=output_attentions)
A:transformers.models.bart.modeling_bart.combined_attention_mask->_make_causal_mask(input_shape, inputs_embeds.dtype, past_key_values_length=past_key_values_length).to(self.device)
A:transformers.models.bart.modeling_bart.encoder_attention_mask->_expand_mask(encoder_attention_mask, inputs_embeds.dtype, tgt_len=input_shape[-1])
A:transformers.models.bart.modeling_bart.(hidden_states, layer_self_attn, present_key_value, layer_cross_attn)->decoder_layer(hidden_states, attention_mask=combined_attention_mask, encoder_hidden_states=encoder_hidden_states, encoder_attention_mask=encoder_attention_mask, past_key_value=past_key_value, output_attentions=output_attentions)
A:transformers.models.bart.modeling_bart.self.shared->torch.nn.Embedding(vocab_size, config.d_model, padding_idx)
A:transformers.models.bart.modeling_bart.self.encoder->BartEncoder(config, self.shared)
A:transformers.models.bart.modeling_bart.self.decoder->BartDecoder(config, self.shared)
A:transformers.models.bart.modeling_bart.decoder_input_ids->shift_tokens_right(labels, self.config.pad_token_id)
A:transformers.models.bart.modeling_bart.encoder_outputs->BaseModelOutput(last_hidden_state=encoder_outputs[0], hidden_states=encoder_outputs[1] if len(encoder_outputs) > 1 else None, attentions=encoder_outputs[2] if len(encoder_outputs) > 2 else None)
A:transformers.models.bart.modeling_bart.decoder_outputs->self.decoder(input_ids=decoder_input_ids, attention_mask=decoder_attention_mask, encoder_hidden_states=encoder_outputs[0], encoder_attention_mask=attention_mask, past_key_values=past_key_values, inputs_embeds=decoder_inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bart.modeling_bart.self.model->BartModel(config)
A:transformers.models.bart.modeling_bart.self.lm_head->torch.nn.Linear(config.d_model, self.model.shared.num_embeddings, bias=False)
A:transformers.models.bart.modeling_bart.new_embeddings->super().resize_token_embeddings(new_num_tokens)
A:transformers.models.bart.modeling_bart.extra_bias->torch.zeros((1, new_num_tokens - old_num_tokens), device=self.final_logits_bias.device)
A:transformers.models.bart.modeling_bart.new_bias->torch.cat([self.final_logits_bias, extra_bias], dim=1)
A:transformers.models.bart.modeling_bart.outputs->self.model(input_ids, attention_mask=attention_mask, decoder_input_ids=decoder_input_ids, decoder_attention_mask=decoder_attention_mask, encoder_outputs=encoder_outputs, inputs_embeds=inputs_embeds, decoder_inputs_embeds=decoder_inputs_embeds, use_cache=use_cache, output_attentions=output_attentions, output_hidden_states=output_hidden_states, return_dict=return_dict)
A:transformers.models.bart.modeling_bart.loss_fct->CrossEntropyLoss(ignore_index=ignored_index)
A:transformers.models.bart.modeling_bart.masked_lm_loss->loss_fct(lm_logits.view(-1, self.config.vocab_size), labels.view(-1))
A:transformers.models.bart.modeling_bart.self.classification_head->BartClassificationHead(config.d_model, config.d_model, config.num_labels, config.classifier_dropout)
A:transformers.models.bart.modeling_bart.eos_mask->input_ids.view(-1, input_shape[-1]).view(-1, input_shape[-1]).eq(self.config.eos_token_id)
A:transformers.models.bart.modeling_bart.logits->self.qa_outputs(sequence_output)
A:transformers.models.bart.modeling_bart.loss->loss_fct(logits.view(-1, self.config.num_labels), labels.view(-1))
A:transformers.models.bart.modeling_bart.self.qa_outputs->torch.nn.Linear(config.hidden_size, config.num_labels)
A:transformers.models.bart.modeling_bart.(start_logits, end_logits)->self.qa_outputs(sequence_output).split(1, dim=-1)
A:transformers.models.bart.modeling_bart.start_logits->start_logits.squeeze(-1).squeeze(-1)
A:transformers.models.bart.modeling_bart.end_logits->end_logits.squeeze(-1).squeeze(-1)
A:transformers.models.bart.modeling_bart.start_positions->start_positions.squeeze(-1).squeeze(-1)
A:transformers.models.bart.modeling_bart.end_positions->end_positions.squeeze(-1).squeeze(-1)
A:transformers.models.bart.modeling_bart.ignored_index->start_logits.squeeze(-1).squeeze(-1).size(1)
A:transformers.models.bart.modeling_bart.start_loss->loss_fct(start_logits, start_positions)
A:transformers.models.bart.modeling_bart.end_loss->loss_fct(end_logits, end_positions)
transformers.BartForConditionalGeneration(self,config:BartConfig)
transformers.BartForConditionalGeneration._force_token_id_to_be_generated(scores,token_id)->None
transformers.BartForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.BartForConditionalGeneration._resize_final_logits_bias(self,new_num_tokens:int)->None
transformers.BartForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.BartForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BartForConditionalGeneration.get_decoder(self)
transformers.BartForConditionalGeneration.get_encoder(self)
transformers.BartForConditionalGeneration.get_output_embeddings(self)
transformers.BartForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.BartForConditionalGeneration.resize_token_embeddings(self,new_num_tokens:int)->nn.Embedding
transformers.BartForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.BartForQuestionAnswering(self,config)
transformers.BartForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,start_positions=None,end_positions=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BartForSequenceClassification(self,config:BartConfig,**kwargs)
transformers.BartForSequenceClassification.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BartModel(self,config:BartConfig)
transformers.BartModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.BartModel.get_decoder(self)
transformers.BartModel.get_encoder(self)
transformers.BartModel.get_input_embeddings(self)
transformers.BartModel.set_input_embeddings(self,value)
transformers.BartPretrainedModel(PreTrainedModel)
transformers.BartPretrainedModel._init_weights(self,module)
transformers.BartPretrainedModel.dummy_inputs(self)
transformers.PretrainedBartModel(BartPretrainedModel)
transformers.PretrainedBartModel.__init_subclass__(self)
transformers.models.bart.modeling_bart.BartAttention(self,embed_dim:int,num_heads:int,dropout:float=0.0,is_decoder:bool=False,bias:bool=True)
transformers.models.bart.modeling_bart.BartAttention.__init__(self,embed_dim:int,num_heads:int,dropout:float=0.0,is_decoder:bool=False,bias:bool=True)
transformers.models.bart.modeling_bart.BartAttention._shape(self,tensor:torch.Tensor,seq_len:int,bsz:int)
transformers.models.bart.modeling_bart.BartAttention.forward(self,hidden_states:torch.Tensor,key_value_states:Optional[torch.Tensor]=None,past_key_value:Optional[Tuple[torch.Tensor]]=None,attention_mask:Optional[torch.Tensor]=None,output_attentions:bool=False)->Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]
transformers.models.bart.modeling_bart.BartClassificationHead(self,input_dim:int,inner_dim:int,num_classes:int,pooler_dropout:float)
transformers.models.bart.modeling_bart.BartClassificationHead.__init__(self,input_dim:int,inner_dim:int,num_classes:int,pooler_dropout:float)
transformers.models.bart.modeling_bart.BartClassificationHead.forward(self,hidden_states:torch.Tensor)
transformers.models.bart.modeling_bart.BartDecoder(self,config:BartConfig,embed_tokens:Optional[nn.Embedding]=None)
transformers.models.bart.modeling_bart.BartDecoder.__init__(self,config:BartConfig,embed_tokens:Optional[nn.Embedding]=None)
transformers.models.bart.modeling_bart.BartDecoder.forward(self,input_ids=None,attention_mask=None,encoder_hidden_states=None,encoder_attention_mask=None,past_key_values=None,inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartDecoderLayer(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartDecoderLayer.__init__(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartDecoderLayer.forward(self,hidden_states:torch.Tensor,attention_mask:Optional[torch.Tensor]=None,encoder_hidden_states:Optional[torch.Tensor]=None,encoder_attention_mask:Optional[torch.Tensor]=None,past_key_value:Optional[Tuple[torch.Tensor]]=None,output_attentions:Optional[torch.Tensor]=False)
transformers.models.bart.modeling_bart.BartEncoder(self,config:BartConfig,embed_tokens:Optional[nn.Embedding]=None)
transformers.models.bart.modeling_bart.BartEncoder.__init__(self,config:BartConfig,embed_tokens:Optional[nn.Embedding]=None)
transformers.models.bart.modeling_bart.BartEncoder.forward(self,input_ids=None,attention_mask=None,inputs_embeds=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartEncoderLayer(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartEncoderLayer.__init__(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartEncoderLayer.forward(self,hidden_states:torch.Tensor,attention_mask:torch.Tensor,output_attentions:bool=False)
transformers.models.bart.modeling_bart.BartForConditionalGeneration(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.__init__(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartForConditionalGeneration._force_token_id_to_be_generated(scores,token_id)->None
transformers.models.bart.modeling_bart.BartForConditionalGeneration._reorder_cache(past,beam_idx)
transformers.models.bart.modeling_bart.BartForConditionalGeneration._resize_final_logits_bias(self,new_num_tokens:int)->None
transformers.models.bart.modeling_bart.BartForConditionalGeneration.adjust_logits_during_generation(self,logits,cur_len,max_length)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.get_decoder(self)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.get_encoder(self)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.get_output_embeddings(self)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.prepare_inputs_for_generation(self,decoder_input_ids,past=None,attention_mask=None,use_cache=None,encoder_outputs=None,**kwargs)
transformers.models.bart.modeling_bart.BartForConditionalGeneration.resize_token_embeddings(self,new_num_tokens:int)->nn.Embedding
transformers.models.bart.modeling_bart.BartForConditionalGeneration.set_output_embeddings(self,new_embeddings)
transformers.models.bart.modeling_bart.BartForQuestionAnswering(self,config)
transformers.models.bart.modeling_bart.BartForQuestionAnswering.__init__(self,config)
transformers.models.bart.modeling_bart.BartForQuestionAnswering.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,start_positions=None,end_positions=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartForSequenceClassification(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_bart.BartForSequenceClassification.__init__(self,config:BartConfig,**kwargs)
transformers.models.bart.modeling_bart.BartForSequenceClassification.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,inputs_embeds=None,decoder_inputs_embeds=None,labels=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartLayerNorm(normalized_shape:torch.Size,eps:float=1e-05,elementwise_affine:bool=True)
transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding(self,num_embeddings:int,embedding_dim:int,padding_idx:int,offset:int)
transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding.__init__(self,num_embeddings:int,embedding_dim:int,padding_idx:int,offset:int)
transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding.forward(self,input_ids_shape:torch.Size,past_key_values_length:int=0)
transformers.models.bart.modeling_bart.BartModel(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartModel.__init__(self,config:BartConfig)
transformers.models.bart.modeling_bart.BartModel.forward(self,input_ids=None,attention_mask=None,decoder_input_ids=None,decoder_attention_mask=None,encoder_outputs=None,past_key_values=None,inputs_embeds=None,decoder_inputs_embeds=None,use_cache=None,output_attentions=None,output_hidden_states=None,return_dict=None)
transformers.models.bart.modeling_bart.BartModel.get_decoder(self)
transformers.models.bart.modeling_bart.BartModel.get_encoder(self)
transformers.models.bart.modeling_bart.BartModel.get_input_embeddings(self)
transformers.models.bart.modeling_bart.BartModel.set_input_embeddings(self,value)
transformers.models.bart.modeling_bart.BartPretrainedModel(PreTrainedModel)
transformers.models.bart.modeling_bart.BartPretrainedModel._init_weights(self,module)
transformers.models.bart.modeling_bart.BartPretrainedModel.dummy_inputs(self)
transformers.models.bart.modeling_bart.BartSinusoidalPositionalEmbedding(self,num_positions:int,embedding_dim:int,padding_idx:Optional[int]=None)
transformers.models.bart.modeling_bart.BartSinusoidalPositionalEmbedding.__init__(self,num_positions:int,embedding_dim:int,padding_idx:Optional[int]=None)
transformers.models.bart.modeling_bart.BartSinusoidalPositionalEmbedding._init_weight(out:nn.Parameter)
transformers.models.bart.modeling_bart.BartSinusoidalPositionalEmbedding.forward(self,input_ids_shape:torch.Size,past_key_values_length:int=0)
transformers.models.bart.modeling_bart.PretrainedBartModel(BartPretrainedModel)
transformers.models.bart.modeling_bart.PretrainedBartModel.__init_subclass__(self)
transformers.models.bart.modeling_bart._expand_mask(mask:torch.Tensor,dtype:torch.dtype,tgt_len:Optional[int]=None,past_key_values_length:int=0)
transformers.models.bart.modeling_bart._make_causal_mask(input_ids_shape:torch.Size,dtype:torch.dtype,past_key_values_length:int=0)
transformers.models.bart.modeling_bart.shift_tokens_right(input_ids:torch.Tensor,pad_token_id:int)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/models/bart/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/data_collator.py----------------------------------------
A:transformers.data.data_collator.InputDataClass->NewType('InputDataClass', Any)
A:transformers.data.data_collator.DataCollator->NewType('DataCollator', Callable[[List[InputDataClass]], Dict[str, torch.Tensor]])
A:transformers.data.data_collator.batch['labels']->torch.tensor([f['label_ids'] for f in features], dtype=dtype)
A:transformers.data.data_collator.batch[k]->torch.tensor([f[k] for f in features])
A:transformers.data.data_collator.batch->_collate_batch(examples, self.tokenizer)
A:transformers.data.data_collator.length_of_first->examples[0].size(0)
A:transformers.data.data_collator.are_tensors_same_length->all((x.size(0) == length_of_first for x in examples))
A:transformers.data.data_collator.max_length->max((x.size(0) for x in examples))
A:transformers.data.data_collator.result->examples[0].new_full([len(examples), max_length], tokenizer.pad_token_id)
A:transformers.data.data_collator.special_tokens_mask->torch.tensor([self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()], dtype=torch.bool)
A:transformers.data.data_collator.(batch['input_ids'], batch['labels'])->self.mask_tokens(batch['input_ids'], special_tokens_mask=special_tokens_mask)
A:transformers.data.data_collator.labels->inputs.clone()
A:transformers.data.data_collator.probability_matrix->torch.full(labels.shape, self.mlm_probability)
A:transformers.data.data_collator.masked_indices->torch.full(labels.shape, 0, dtype=torch.bool)
A:transformers.data.data_collator.inputs[indices_replaced]->self.tokenizer.convert_tokens_to_ids(self.tokenizer.mask_token)
A:transformers.data.data_collator.random_words->torch.randint(len(self.tokenizer), labels.shape, dtype=torch.long)
A:transformers.data.data_collator.batch_input->_collate_batch(input_ids, self.tokenizer)
A:transformers.data.data_collator.token->self.tokenizer._convert_id_to_token(id)
A:transformers.data.data_collator.ref_pos->tolist(e['chinese_ref'])
A:transformers.data.data_collator.len_seq->e['input_ids'].size(0)
A:transformers.data.data_collator.batch_mask->_collate_batch(mask_labels, self.tokenizer)
A:transformers.data.data_collator.(inputs, labels)->self.mask_tokens(batch_input, batch_mask)
A:transformers.data.data_collator.num_to_predict->min(max_predictions, max(1, int(round(len(input_tokens) * self.mlm_probability))))
A:transformers.data.data_collator.covered_indexes->set()
A:transformers.data.data_collator.padding_mask->inputs.clone().eq(self.tokenizer.pad_token_id)
A:transformers.data.data_collator.input_ids->_collate_batch(input_ids, self.tokenizer)
A:transformers.data.data_collator.(input_ids, labels, attention_mask)->self.mask_tokens(input_ids)
A:transformers.data.data_collator.token_type_ids->pad_sequence(token_type_ids, batch_first=True, padding_value=self.tokenizer.pad_token_id)
A:transformers.data.data_collator.sentence_order_label->torch.stack(sop_label_list)
A:transformers.data.data_collator.attention_mask->(~masked_indices).float()
A:transformers.data.data_collator.attention_padding_mask->inputs.clone().eq(self.tokenizer.pad_token_id)
A:transformers.data.data_collator.(inputs, perm_mask, target_mapping, labels)->self.mask_tokens(batch)
A:transformers.data.data_collator.target_mapping->torch.zeros((labels.size(0), labels.size(1), labels.size(1)), dtype=torch.float32)
A:transformers.data.data_collator.max_len->inputs.clone().size(1)
A:transformers.data.data_collator.span_length->torch.randint(1, self.max_span_length + 1, (1,)).item()
A:transformers.data.data_collator.context_length->int(span_length / self.plm_probability)
A:transformers.data.data_collator.target_mapping[i]->torch.eye(labels.size(1))
A:transformers.data.data_collator.perm_mask->torch.zeros((labels.size(0), labels.size(1), labels.size(1)), dtype=torch.float32)
A:transformers.data.data_collator.perm_index->torch.flatten(perm_index.transpose(0, 1))
transformers.DataCollatorForLanguageModeling(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.DataCollatorForLanguageModeling.__post_init__(self)
transformers.DataCollatorForLanguageModeling.mask_tokens(self,inputs:torch.Tensor,special_tokens_mask:Optional[torch.Tensor]=None)->Tuple[torch.Tensor, torch.Tensor]
transformers.DataCollatorForPermutationLanguageModeling(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.DataCollatorForPermutationLanguageModeling.mask_tokens(self,inputs:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]
transformers.DataCollatorForSOP(self,*args,**kwargs)
transformers.DataCollatorForSOP.mask_tokens(self,inputs:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor, torch.Tensor]
transformers.DataCollatorForTokenClassification(self,features)
transformers.DataCollatorForWholeWordMask(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.DataCollatorForWholeWordMask._whole_word_mask(self,input_tokens:List[str],max_predictions=512)
transformers.DataCollatorForWholeWordMask.mask_tokens(self,inputs:torch.Tensor,mask_labels:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor]
transformers.DataCollatorWithPadding(self,features:List[Dict[str,Union[List[int],torch.Tensor]]])
transformers.data.data_collator.DataCollatorForLanguageModeling(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForLanguageModeling.__call__(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForLanguageModeling.__post_init__(self)
transformers.data.data_collator.DataCollatorForLanguageModeling.mask_tokens(self,inputs:torch.Tensor,special_tokens_mask:Optional[torch.Tensor]=None)->Tuple[torch.Tensor, torch.Tensor]
transformers.data.data_collator.DataCollatorForPermutationLanguageModeling(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForPermutationLanguageModeling.__call__(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForPermutationLanguageModeling.mask_tokens(self,inputs:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]
transformers.data.data_collator.DataCollatorForSOP(self,*args,**kwargs)
transformers.data.data_collator.DataCollatorForSOP.__init__(self,*args,**kwargs)
transformers.data.data_collator.DataCollatorForSOP.mask_tokens(self,inputs:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor, torch.Tensor]
transformers.data.data_collator.DataCollatorForTokenClassification(self,features)
transformers.data.data_collator.DataCollatorForTokenClassification.__call__(self,features)
transformers.data.data_collator.DataCollatorForWholeWordMask(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForWholeWordMask.__call__(self,examples:List[Union[List[int],torch.Tensor,Dict[str,torch.Tensor]]])
transformers.data.data_collator.DataCollatorForWholeWordMask._whole_word_mask(self,input_tokens:List[str],max_predictions=512)
transformers.data.data_collator.DataCollatorForWholeWordMask.mask_tokens(self,inputs:torch.Tensor,mask_labels:torch.Tensor)->Tuple[torch.Tensor, torch.Tensor]
transformers.data.data_collator.DataCollatorWithPadding(self,features:List[Dict[str,Union[List[int],torch.Tensor]]])
transformers.data.data_collator.DataCollatorWithPadding.__call__(self,features:List[Dict[str,Union[List[int],torch.Tensor]]])
transformers.data.data_collator._collate_batch(examples,tokenizer)
transformers.data.data_collator.default_data_collator(features:List[InputDataClass])->Dict[str, torch.Tensor]
transformers.data.data_collator.tolist(x:Union[List[Any],torch.Tensor])
transformers.default_data_collator(features:List[InputDataClass])->Dict[str, torch.Tensor]


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/test_generation_utils.py----------------------------------------
A:transformers.data.test_generation_utils.config->transformers.MarianConfig.from_pretrained('sshleifer/tiny-marian-en-de')
A:transformers.data.test_generation_utils.input_ids->torch.arange(0, 96, 1).view((8, 12))
A:transformers.data.test_generation_utils.scores->torch.rand((8, 300))
A:transformers.data.test_generation_utils.output->model.postprocess_next_token_scores(scores, input_ids, 0, bad_words_ids, 13, 15, config.max_length, config.eos_token_id, config.repetition_penalty, 32, 5)
A:transformers.data.test_generation_utils.length_bad_word->random.randint(1, 4)
A:transformers.data.test_generation_utils._->model.postprocess_next_token_scores(scores, input_ids, 0, bad_words_ids, 13, 15, config.max_length, config.eos_token_id, config.repetition_penalty, 32, 5)
transformers.data.test_generation_utils.GenerationUtilsTest(unittest.TestCase)
transformers.data.test_generation_utils.GenerationUtilsTest.config(self)
transformers.data.test_generation_utils.GenerationUtilsTest.model(self)
transformers.data.test_generation_utils.GenerationUtilsTest.test_postprocess_next_token_scores(self)
transformers.data.test_generation_utils.GenerationUtilsTest.test_postprocess_next_token_scores_large_bad_words_list(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/processors/glue.py----------------------------------------
A:transformers.data.processors.glue.logger->utils.logging.get_logger(__name__)
A:transformers.data.processors.glue.processor->glue_processors[task]()
A:transformers.data.processors.glue.features->glue_convert_examples_to_features(examples, tokenizer, max_length=max_length, task=task)
A:transformers.data.processors.glue.label->d.pop('label')
A:transformers.data.processors.glue.label_list->glue_processors[task]().get_labels()
A:transformers.data.processors.glue.batch_encoding->tokenizer([(example.text_a, example.text_b) for example in examples], max_length=max_length, padding='max_length', truncation=True)
A:transformers.data.processors.glue.feature->InputFeatures(**inputs, label=labels[i])
transformers.data.processors.glue.ColaProcessor(self,*args,**kwargs)
transformers.data.processors.glue.ColaProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.ColaProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.ColaProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.ColaProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.ColaProcessor.get_labels(self)
transformers.data.processors.glue.ColaProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.ColaProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.MnliMismatchedProcessor(self,*args,**kwargs)
transformers.data.processors.glue.MnliMismatchedProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.MnliMismatchedProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.MnliMismatchedProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.MnliProcessor(self,*args,**kwargs)
transformers.data.processors.glue.MnliProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.MnliProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.MnliProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.MnliProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.MnliProcessor.get_labels(self)
transformers.data.processors.glue.MnliProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.MnliProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.MrpcProcessor(self,*args,**kwargs)
transformers.data.processors.glue.MrpcProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.MrpcProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.MrpcProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.MrpcProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.MrpcProcessor.get_labels(self)
transformers.data.processors.glue.MrpcProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.MrpcProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.OutputMode(Enum)
transformers.data.processors.glue.QnliProcessor(self,*args,**kwargs)
transformers.data.processors.glue.QnliProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.QnliProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.QnliProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.QnliProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.QnliProcessor.get_labels(self)
transformers.data.processors.glue.QnliProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.QnliProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.QqpProcessor(self,*args,**kwargs)
transformers.data.processors.glue.QqpProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.QqpProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.QqpProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.QqpProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.QqpProcessor.get_labels(self)
transformers.data.processors.glue.QqpProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.QqpProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.RteProcessor(self,*args,**kwargs)
transformers.data.processors.glue.RteProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.RteProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.RteProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.RteProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.RteProcessor.get_labels(self)
transformers.data.processors.glue.RteProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.RteProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.Sst2Processor(self,*args,**kwargs)
transformers.data.processors.glue.Sst2Processor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.Sst2Processor._create_examples(self,lines,set_type)
transformers.data.processors.glue.Sst2Processor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.Sst2Processor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.Sst2Processor.get_labels(self)
transformers.data.processors.glue.Sst2Processor.get_test_examples(self,data_dir)
transformers.data.processors.glue.Sst2Processor.get_train_examples(self,data_dir)
transformers.data.processors.glue.StsbProcessor(self,*args,**kwargs)
transformers.data.processors.glue.StsbProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.StsbProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.StsbProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.StsbProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.StsbProcessor.get_labels(self)
transformers.data.processors.glue.StsbProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.StsbProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue.WnliProcessor(self,*args,**kwargs)
transformers.data.processors.glue.WnliProcessor.__init__(self,*args,**kwargs)
transformers.data.processors.glue.WnliProcessor._create_examples(self,lines,set_type)
transformers.data.processors.glue.WnliProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.glue.WnliProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.glue.WnliProcessor.get_labels(self)
transformers.data.processors.glue.WnliProcessor.get_test_examples(self,data_dir)
transformers.data.processors.glue.WnliProcessor.get_train_examples(self,data_dir)
transformers.data.processors.glue._glue_convert_examples_to_features(examples:List[InputExample],tokenizer:PreTrainedTokenizer,max_length:Optional[int]=None,task=None,label_list=None,output_mode=None)
transformers.data.processors.glue.glue_convert_examples_to_features(examples:Union[List[InputExample],'tf.data.Dataset'],tokenizer:PreTrainedTokenizer,max_length:Optional[int]=None,task=None,label_list=None,output_mode=None)
transformers.glue_convert_examples_to_features(examples:Union[List[InputExample],'tf.data.Dataset'],tokenizer:PreTrainedTokenizer,max_length:Optional[int]=None,task=None,label_list=None,output_mode=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/processors/utils.py----------------------------------------
A:transformers.data.processors.utils.logger->utils.logging.get_logger(__name__)
A:transformers.data.processors.utils.processor->cls(**kwargs)
A:transformers.data.processors.utils.lines->self._read_tsv(file_name)
A:transformers.data.processors.utils.added_labels->set()
A:transformers.data.processors.utils.self.labels->list(set(self.labels).union(added_labels))
A:transformers.data.processors.utils.input_ids->tokenizer.encode(example.text_a, add_special_tokens=True, max_length=min(max_length, tokenizer.max_len))
A:transformers.data.processors.utils.batch_length->max((len(input_ids) for input_ids in all_input_ids))
A:transformers.data.processors.utils.label->float(example.label)
A:transformers.data.processors.utils.dataset->TensorDataset(all_input_ids, all_attention_mask, all_labels)
A:transformers.data.processors.utils.all_input_ids->torch.tensor([f.input_ids for f in features], dtype=torch.long)
A:transformers.data.processors.utils.all_attention_mask->torch.tensor([f.attention_mask for f in features], dtype=torch.long)
A:transformers.data.processors.utils.all_labels->torch.tensor([f.label for f in features], dtype=torch.float)
transformers.DataProcessor
transformers.DataProcessor._read_tsv(cls,input_file,quotechar=None)
transformers.DataProcessor.get_dev_examples(self,data_dir)
transformers.DataProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.DataProcessor.get_labels(self)
transformers.DataProcessor.get_test_examples(self,data_dir)
transformers.DataProcessor.get_train_examples(self,data_dir)
transformers.DataProcessor.tfds_map(self,example)
transformers.InputExample
transformers.InputExample.to_json_string(self)
transformers.InputFeatures
transformers.InputFeatures.to_json_string(self)
transformers.SingleSentenceClassificationProcessor(self,labels=None,examples=None,mode='classification',verbose=False)
transformers.SingleSentenceClassificationProcessor.__getitem__(self,idx)
transformers.SingleSentenceClassificationProcessor.__len__(self)
transformers.SingleSentenceClassificationProcessor.add_examples(self,texts_or_text_and_labels,labels=None,ids=None,overwrite_labels=False,overwrite_examples=False)
transformers.SingleSentenceClassificationProcessor.add_examples_from_csv(self,file_name,split_name='',column_label=0,column_text=1,column_id=None,skip_first_row=False,overwrite_labels=False,overwrite_examples=False)
transformers.SingleSentenceClassificationProcessor.create_from_csv(cls,file_name,split_name='',column_label=0,column_text=1,column_id=None,skip_first_row=False,**kwargs)
transformers.SingleSentenceClassificationProcessor.create_from_examples(cls,texts_or_text_and_labels,labels=None,**kwargs)
transformers.SingleSentenceClassificationProcessor.get_features(self,tokenizer,max_length=None,pad_on_left=False,pad_token=0,mask_padding_with_zero=True,return_tensors=None)
transformers.data.processors.utils.DataProcessor
transformers.data.processors.utils.DataProcessor._read_tsv(cls,input_file,quotechar=None)
transformers.data.processors.utils.DataProcessor.get_dev_examples(self,data_dir)
transformers.data.processors.utils.DataProcessor.get_example_from_tensor_dict(self,tensor_dict)
transformers.data.processors.utils.DataProcessor.get_labels(self)
transformers.data.processors.utils.DataProcessor.get_test_examples(self,data_dir)
transformers.data.processors.utils.DataProcessor.get_train_examples(self,data_dir)
transformers.data.processors.utils.DataProcessor.tfds_map(self,example)
transformers.data.processors.utils.InputExample
transformers.data.processors.utils.InputExample.to_json_string(self)
transformers.data.processors.utils.InputFeatures
transformers.data.processors.utils.InputFeatures.to_json_string(self)
transformers.data.processors.utils.SingleSentenceClassificationProcessor(self,labels=None,examples=None,mode='classification',verbose=False)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.__getitem__(self,idx)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.__init__(self,labels=None,examples=None,mode='classification',verbose=False)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.__len__(self)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.add_examples(self,texts_or_text_and_labels,labels=None,ids=None,overwrite_labels=False,overwrite_examples=False)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.add_examples_from_csv(self,file_name,split_name='',column_label=0,column_text=1,column_id=None,skip_first_row=False,overwrite_labels=False,overwrite_examples=False)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.create_from_csv(cls,file_name,split_name='',column_label=0,column_text=1,column_id=None,skip_first_row=False,**kwargs)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.create_from_examples(cls,texts_or_text_and_labels,labels=None,**kwargs)
transformers.data.processors.utils.SingleSentenceClassificationProcessor.get_features(self,tokenizer,max_length=None,pad_on_left=False,pad_token=0,mask_padding_with_zero=True,return_tensors=None)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/processors/squad.py----------------------------------------
A:transformers.data.processors.squad.logger->utils.logging.get_logger(__name__)
A:transformers.data.processors.squad.tok_answer_text->' '.join(tokenizer.tokenize(orig_answer_text))
A:transformers.data.processors.squad.text_span->' '.join(doc_tokens[new_start:new_end + 1])
A:transformers.data.processors.squad.actual_text->' '.join(example.doc_tokens[start_position:end_position + 1])
A:transformers.data.processors.squad.cleaned_answer_text->' '.join(whitespace_tokenize(example.answer_text))
A:transformers.data.processors.squad.sub_tokens->tokenizer.tokenize(token)
A:transformers.data.processors.squad.(tok_start_position, tok_end_position)->_improve_answer_span(all_doc_tokens, tok_start_position, tok_end_position, tokenizer, example.answer_text)
A:transformers.data.processors.squad.truncated_query->tokenizer.encode(example.question_text, add_special_tokens=False, truncation=True, max_length=max_query_length)
A:transformers.data.processors.squad.tokenizer_type->type(tokenizer).__name__.replace('Tokenizer', '').lower()
A:transformers.data.processors.squad.encoded_dict->tokenizer.encode_plus(texts, pairs, truncation=truncation, padding=padding_strategy, max_length=max_seq_length, return_overflowing_tokens=True, stride=max_seq_length - doc_stride - len(truncated_query) - sequence_pair_added_tokens, return_token_type_ids=True)
A:transformers.data.processors.squad.paragraph_len->min(len(all_doc_tokens) - len(spans) * doc_stride, max_seq_length - len(truncated_query) - sequence_pair_added_tokens)
A:transformers.data.processors.squad.tokens->tokenizer.convert_ids_to_tokens(non_padded_ids)
A:transformers.data.processors.squad.is_max_context->_new_check_is_max_context(spans, doc_span_index, doc_span_index * doc_stride + j)
A:transformers.data.processors.squad.cls_index->span['input_ids'].index(tokenizer.cls_token_id)
A:transformers.data.processors.squad.p_mask->numpy.ones_like(span['token_type_ids'])
A:transformers.data.processors.squad.pad_token_indices->numpy.where(span['input_ids'] == tokenizer.pad_token_id)
A:transformers.data.processors.squad.special_token_indices->numpy.asarray(tokenizer.get_special_tokens_mask(span['input_ids'], already_has_special_tokens=True)).nonzero()
A:transformers.data.processors.squad.threads->min(threads, cpu_count())
A:transformers.data.processors.squad.annotate_->partial(squad_convert_example_to_features, max_seq_length=max_seq_length, doc_stride=doc_stride, max_query_length=max_query_length, padding_strategy=padding_strategy, is_training=is_training)
A:transformers.data.processors.squad.features->list(tqdm(p.imap(annotate_, examples, chunksize=32), total=len(examples), desc='convert squad examples to features', disable=not tqdm_enabled))
A:transformers.data.processors.squad.all_input_ids->torch.tensor([f.input_ids for f in features], dtype=torch.long)
A:transformers.data.processors.squad.all_attention_masks->torch.tensor([f.attention_mask for f in features], dtype=torch.long)
A:transformers.data.processors.squad.all_token_type_ids->torch.tensor([f.token_type_ids for f in features], dtype=torch.long)
A:transformers.data.processors.squad.all_cls_index->torch.tensor([f.cls_index for f in features], dtype=torch.long)
A:transformers.data.processors.squad.all_p_mask->torch.tensor([f.p_mask for f in features], dtype=torch.float)
A:transformers.data.processors.squad.all_is_impossible->torch.tensor([f.is_impossible for f in features], dtype=torch.float)
A:transformers.data.processors.squad.all_feature_index->torch.arange(all_input_ids.size(0), dtype=torch.long)
A:transformers.data.processors.squad.dataset->TensorDataset(all_input_ids, all_attention_masks, all_token_type_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask, all_is_impossible)
A:transformers.data.processors.squad.all_start_positions->torch.tensor([f.start_position for f in features], dtype=torch.long)
A:transformers.data.processors.squad.all_end_positions->torch.tensor([f.end_position for f in features], dtype=torch.long)
A:transformers.data.processors.squad.answer->tensor_dict['answers']['text'][0].numpy().decode('utf-8')
A:transformers.data.processors.squad.answer_start->tensor_dict['answers']['answer_start'][0].numpy()
A:transformers.data.processors.squad.is_impossible->qa.get('is_impossible', False)
A:transformers.data.processors.squad.example->SquadExample(qas_id=qas_id, question_text=question_text, context_text=context_text, answer_text=answer_text, start_position_character=start_position_character, title=title, is_impossible=is_impossible, answers=answers)
transformers.SquadExample(self,qas_id,question_text,context_text,answer_text,start_position_character,title,answers=[],is_impossible=False)
transformers.SquadFeatures(self,input_ids,attention_mask,token_type_ids,cls_index,p_mask,example_index,unique_id,paragraph_len,token_is_max_context,tokens,token_to_orig_map,start_position,end_position,is_impossible,qas_id:str=None,encoding:BatchEncoding=None)
transformers.SquadV1Processor(SquadProcessor)
transformers.SquadV2Processor(SquadProcessor)
transformers.data.processors.squad.SquadExample(self,qas_id,question_text,context_text,answer_text,start_position_character,title,answers=[],is_impossible=False)
transformers.data.processors.squad.SquadExample.__init__(self,qas_id,question_text,context_text,answer_text,start_position_character,title,answers=[],is_impossible=False)
transformers.data.processors.squad.SquadFeatures(self,input_ids,attention_mask,token_type_ids,cls_index,p_mask,example_index,unique_id,paragraph_len,token_is_max_context,tokens,token_to_orig_map,start_position,end_position,is_impossible,qas_id:str=None,encoding:BatchEncoding=None)
transformers.data.processors.squad.SquadFeatures.__init__(self,input_ids,attention_mask,token_type_ids,cls_index,p_mask,example_index,unique_id,paragraph_len,token_is_max_context,tokens,token_to_orig_map,start_position,end_position,is_impossible,qas_id:str=None,encoding:BatchEncoding=None)
transformers.data.processors.squad.SquadProcessor(DataProcessor)
transformers.data.processors.squad.SquadProcessor._create_examples(self,input_data,set_type)
transformers.data.processors.squad.SquadProcessor._get_example_from_tensor_dict(self,tensor_dict,evaluate=False)
transformers.data.processors.squad.SquadProcessor.get_dev_examples(self,data_dir,filename=None)
transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset(self,dataset,evaluate=False)
transformers.data.processors.squad.SquadProcessor.get_train_examples(self,data_dir,filename=None)
transformers.data.processors.squad.SquadResult(self,unique_id,start_logits,end_logits,start_top_index=None,end_top_index=None,cls_logits=None)
transformers.data.processors.squad.SquadResult.__init__(self,unique_id,start_logits,end_logits,start_top_index=None,end_top_index=None,cls_logits=None)
transformers.data.processors.squad.SquadV1Processor(SquadProcessor)
transformers.data.processors.squad.SquadV2Processor(SquadProcessor)
transformers.data.processors.squad._check_is_max_context(doc_spans,cur_span_index,position)
transformers.data.processors.squad._improve_answer_span(doc_tokens,input_start,input_end,tokenizer,orig_answer_text)
transformers.data.processors.squad._is_whitespace(c)
transformers.data.processors.squad._new_check_is_max_context(doc_spans,cur_span_index,position)
transformers.data.processors.squad.squad_convert_example_to_features(example,max_seq_length,doc_stride,max_query_length,padding_strategy,is_training)
transformers.data.processors.squad.squad_convert_example_to_features_init(tokenizer_for_convert:PreTrainedTokenizerBase)
transformers.data.processors.squad.squad_convert_examples_to_features(examples,tokenizer,max_seq_length,doc_stride,max_query_length,is_training,padding_strategy='max_length',return_dataset=False,threads=1,tqdm_enabled=True)
transformers.squad_convert_examples_to_features(examples,tokenizer,max_seq_length,doc_stride,max_query_length,is_training,padding_strategy='max_length',return_dataset=False,threads=1,tqdm_enabled=True)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/processors/xnli.py----------------------------------------
A:transformers.data.processors.xnli.logger->utils.logging.get_logger(__name__)
A:transformers.data.processors.xnli.lines->self._read_tsv(os.path.join(data_dir, 'XNLI-1.0/xnli.test.tsv'))
transformers.data.processors.xnli.XnliProcessor(self,language,train_language=None)
transformers.data.processors.xnli.XnliProcessor.__init__(self,language,train_language=None)
transformers.data.processors.xnli.XnliProcessor.get_labels(self)
transformers.data.processors.xnli.XnliProcessor.get_test_examples(self,data_dir)
transformers.data.processors.xnli.XnliProcessor.get_train_examples(self,data_dir)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/processors/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/metrics/__init__.py----------------------------------------
A:transformers.data.metrics.__init__.acc->simple_accuracy(preds, labels)
A:transformers.data.metrics.__init__.f1->f1_score(y_true=labels, y_pred=preds)
transformers.data.metrics.__init__.acc_and_f1(preds,labels)
transformers.data.metrics.__init__.glue_compute_metrics(task_name,preds,labels)
transformers.data.metrics.__init__.pearson_and_spearman(preds,labels)
transformers.data.metrics.__init__.simple_accuracy(preds,labels)
transformers.data.metrics.__init__.xnli_compute_metrics(task_name,preds,labels)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/metrics/squad_metrics.py----------------------------------------
A:transformers.data.metrics.squad_metrics.logger->utils.logging.get_logger(__name__)
A:transformers.data.metrics.squad_metrics.regex->re.compile('\\b(a|an|the)\\b', re.UNICODE)
A:transformers.data.metrics.squad_metrics.exclude->set(string.punctuation)
A:transformers.data.metrics.squad_metrics.gold_toks->get_tokens(a_gold)
A:transformers.data.metrics.squad_metrics.pred_toks->get_tokens(a_pred)
A:transformers.data.metrics.squad_metrics.num_same->sum(common.values())
A:transformers.data.metrics.squad_metrics.exact_scores[qas_id]->max((compute_exact(a, prediction) for a in gold_answers))
A:transformers.data.metrics.squad_metrics.f1_scores[qas_id]->max((compute_f1(a, prediction) for a in gold_answers))
A:transformers.data.metrics.squad_metrics.new_scores[qid]->float(not qid_to_has_ans[qid])
A:transformers.data.metrics.squad_metrics.total->len(qid_list)
A:transformers.data.metrics.squad_metrics.num_no_ans->sum((1 for k in qid_to_has_ans if not qid_to_has_ans[k]))
A:transformers.data.metrics.squad_metrics.qid_list->sorted(na_probs, key=lambda k: na_probs[k])
A:transformers.data.metrics.squad_metrics.(best_exact, exact_thresh, has_ans_exact)->find_best_thresh_v2(preds, exact_raw, na_probs, qid_to_has_ans)
A:transformers.data.metrics.squad_metrics.(best_f1, f1_thresh, has_ans_f1)->find_best_thresh_v2(preds, f1_raw, na_probs, qid_to_has_ans)
A:transformers.data.metrics.squad_metrics.(best_exact, exact_thresh)->find_best_thresh(preds, exact_raw, na_probs, qid_to_has_ans)
A:transformers.data.metrics.squad_metrics.(best_f1, f1_thresh)->find_best_thresh(preds, f1_raw, na_probs, qid_to_has_ans)
A:transformers.data.metrics.squad_metrics.(exact, f1)->get_raw_scores(examples, preds)
A:transformers.data.metrics.squad_metrics.exact_threshold->apply_no_ans_threshold(exact, no_answer_probs, qas_id_to_has_answer, no_answer_probability_threshold)
A:transformers.data.metrics.squad_metrics.f1_threshold->apply_no_ans_threshold(f1, no_answer_probs, qas_id_to_has_answer, no_answer_probability_threshold)
A:transformers.data.metrics.squad_metrics.evaluation->make_eval_dict(exact_threshold, f1_threshold)
A:transformers.data.metrics.squad_metrics.has_ans_eval->make_eval_dict(exact_threshold, f1_threshold, qid_list=has_answer_qids)
A:transformers.data.metrics.squad_metrics.no_ans_eval->make_eval_dict(exact_threshold, f1_threshold, qid_list=no_answer_qids)
A:transformers.data.metrics.squad_metrics.ns_to_s_map->collections.OrderedDict()
A:transformers.data.metrics.squad_metrics.ns_text->''.join(ns_chars)
A:transformers.data.metrics.squad_metrics.tokenizer->BasicTokenizer(do_lower_case=do_lower_case)
A:transformers.data.metrics.squad_metrics.tok_text->' '.join(tok_text.split())
A:transformers.data.metrics.squad_metrics.start_position->' '.join(tok_text.split()).find(pred_text)
A:transformers.data.metrics.squad_metrics.(orig_ns_text, orig_ns_to_s_map)->_strip_spaces(orig_text)
A:transformers.data.metrics.squad_metrics.(tok_ns_text, tok_ns_to_s_map)->_strip_spaces(tok_text)
A:transformers.data.metrics.squad_metrics.index_and_score->sorted(enumerate(logits), key=lambda x: x[1], reverse=True)
A:transformers.data.metrics.squad_metrics.x->math.exp(score - max_score)
A:transformers.data.metrics.squad_metrics.example_index_to_features->collections.defaultdict(list)
A:transformers.data.metrics.squad_metrics._PrelimPrediction->collections.namedtuple('PrelimPrediction', ['feature_index', 'start_index', 'end_index', 'start_log_prob', 'end_log_prob'])
A:transformers.data.metrics.squad_metrics.all_predictions->collections.OrderedDict()
A:transformers.data.metrics.squad_metrics.all_nbest_json->collections.OrderedDict()
A:transformers.data.metrics.squad_metrics.scores_diff_json->collections.OrderedDict()
A:transformers.data.metrics.squad_metrics.start_indexes->_get_best_indexes(result.start_logits, n_best_size)
A:transformers.data.metrics.squad_metrics.end_indexes->_get_best_indexes(result.end_logits, n_best_size)
A:transformers.data.metrics.squad_metrics.prelim_predictions->sorted(prelim_predictions, key=lambda x: x.start_log_prob + x.end_log_prob, reverse=True)
A:transformers.data.metrics.squad_metrics._NbestPrediction->collections.namedtuple('NbestPrediction', ['text', 'start_log_prob', 'end_log_prob'])
A:transformers.data.metrics.squad_metrics.orig_text->' '.join(orig_tokens)
A:transformers.data.metrics.squad_metrics.final_text->get_final_text(tok_text, orig_text, do_lower_case, verbose_logging)
A:transformers.data.metrics.squad_metrics.probs->_compute_softmax(total_scores)
A:transformers.data.metrics.squad_metrics.output->collections.OrderedDict()
A:transformers.data.metrics.squad_metrics.score_null->min(score_null, cur_null_score)
transformers.data.metrics.squad_metrics._compute_softmax(scores)
transformers.data.metrics.squad_metrics._get_best_indexes(logits,n_best_size)
transformers.data.metrics.squad_metrics.apply_no_ans_threshold(scores,na_probs,qid_to_has_ans,na_prob_thresh)
transformers.data.metrics.squad_metrics.compute_exact(a_gold,a_pred)
transformers.data.metrics.squad_metrics.compute_f1(a_gold,a_pred)
transformers.data.metrics.squad_metrics.compute_predictions_log_probs(all_examples,all_features,all_results,n_best_size,max_answer_length,output_prediction_file,output_nbest_file,output_null_log_odds_file,start_n_top,end_n_top,version_2_with_negative,tokenizer,verbose_logging)
transformers.data.metrics.squad_metrics.compute_predictions_logits(all_examples,all_features,all_results,n_best_size,max_answer_length,do_lower_case,output_prediction_file,output_nbest_file,output_null_log_odds_file,verbose_logging,version_2_with_negative,null_score_diff_threshold,tokenizer)
transformers.data.metrics.squad_metrics.find_all_best_thresh(main_eval,preds,exact_raw,f1_raw,na_probs,qid_to_has_ans)
transformers.data.metrics.squad_metrics.find_all_best_thresh_v2(main_eval,preds,exact_raw,f1_raw,na_probs,qid_to_has_ans)
transformers.data.metrics.squad_metrics.find_best_thresh(preds,scores,na_probs,qid_to_has_ans)
transformers.data.metrics.squad_metrics.find_best_thresh_v2(preds,scores,na_probs,qid_to_has_ans)
transformers.data.metrics.squad_metrics.get_final_text(pred_text,orig_text,do_lower_case,verbose_logging=False)
transformers.data.metrics.squad_metrics.get_raw_scores(examples,preds)
transformers.data.metrics.squad_metrics.get_tokens(s)
transformers.data.metrics.squad_metrics.make_eval_dict(exact_scores,f1_scores,qid_list=None)
transformers.data.metrics.squad_metrics.merge_eval(main_eval,new_eval,prefix)
transformers.data.metrics.squad_metrics.normalize_answer(s)
transformers.data.metrics.squad_metrics.squad_evaluate(examples,preds,no_answer_probs=None,no_answer_probability_threshold=1.0)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/datasets/glue.py----------------------------------------
A:transformers.data.datasets.glue.logger->utils.logging.get_logger(__name__)
A:transformers.data.datasets.glue.self.task_name->self.task_name.lower()
A:transformers.data.datasets.glue.self.processor->glue_processors[args.task_name]()
A:transformers.data.datasets.glue.cached_features_file->os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))
A:transformers.data.datasets.glue.label_list->self.processor.get_labels()
A:transformers.data.datasets.glue.start->time.time()
A:transformers.data.datasets.glue.self.features->glue_convert_examples_to_features(examples, tokenizer, max_length=args.max_seq_length, label_list=label_list, output_mode=self.output_mode)
A:transformers.data.datasets.glue.examples->self.processor.get_train_examples(args.data_dir)
transformers.GlueDataTrainingArguments
transformers.GlueDataTrainingArguments.__post_init__(self)
transformers.GlueDataset(self,args:GlueDataTrainingArguments,tokenizer:PreTrainedTokenizerBase,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,cache_dir:Optional[str]=None)
transformers.GlueDataset.__getitem__(self,i)->InputFeatures
transformers.GlueDataset.__len__(self)
transformers.GlueDataset.get_labels(self)
transformers.data.datasets.glue.GlueDataTrainingArguments
transformers.data.datasets.glue.GlueDataTrainingArguments.__post_init__(self)
transformers.data.datasets.glue.GlueDataset(self,args:GlueDataTrainingArguments,tokenizer:PreTrainedTokenizerBase,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,cache_dir:Optional[str]=None)
transformers.data.datasets.glue.GlueDataset.__getitem__(self,i)->InputFeatures
transformers.data.datasets.glue.GlueDataset.__init__(self,args:GlueDataTrainingArguments,tokenizer:PreTrainedTokenizerBase,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,cache_dir:Optional[str]=None)
transformers.data.datasets.glue.GlueDataset.__len__(self)
transformers.data.datasets.glue.GlueDataset.get_labels(self)
transformers.data.datasets.glue.Split(Enum)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/datasets/language_modeling.py----------------------------------------
A:transformers.data.datasets.language_modeling.logger->utils.logging.get_logger(__name__)
A:transformers.data.datasets.language_modeling.(directory, filename)->os.path.split(file_path)
A:transformers.data.datasets.language_modeling.cached_features_file->os.path.join(directory, 'cached_nsp_{}_{}_{}'.format(tokenizer.__class__.__name__, str(block_size), filename))
A:transformers.data.datasets.language_modeling.start->time.time()
A:transformers.data.datasets.language_modeling.self.examples->pickle.load(handle)
A:transformers.data.datasets.language_modeling.text->f.read()
A:transformers.data.datasets.language_modeling.tokenized_text->tokenizer.convert_tokens_to_ids(tokenizer.tokenize(text))
A:transformers.data.datasets.language_modeling.batch_encoding->tokenizer(data, add_special_tokens=True, truncation=True, max_length=block_size)
A:transformers.data.datasets.language_modeling.data->f.readlines()
A:transformers.data.datasets.language_modeling.n->len(self.examples)
A:transformers.data.datasets.language_modeling.self.examples[i]['chinese_ref']->torch.tensor(ref[i], dtype=torch.long)
A:transformers.data.datasets.language_modeling.file_path->os.path.join(file_dir, file_name)
A:transformers.data.datasets.language_modeling.original_lines->f.readlines()
A:transformers.data.datasets.language_modeling.examples->self.create_examples_from_document(document, block_size, tokenizer)
A:transformers.data.datasets.language_modeling.target_seq_length->random.randint(2, max_num_tokens)
A:transformers.data.datasets.language_modeling.a_end->random.randint(1, len(current_chunk) - 1)
A:transformers.data.datasets.language_modeling.input_ids->self.tokenizer.build_inputs_with_special_tokens(tokens_a, tokens_b)
A:transformers.data.datasets.language_modeling.token_type_ids->self.tokenizer.create_token_type_ids_from_sequences(tokens_a, tokens_b)
A:transformers.data.datasets.language_modeling.line->line.strip().strip()
A:transformers.data.datasets.language_modeling.tokens->tokenizer.convert_tokens_to_ids(tokens)
A:transformers.data.datasets.language_modeling.random_document_index->random.randint(0, len(self.documents) - 1)
A:transformers.data.datasets.language_modeling.random_start->random.randint(0, len(random_document) - 1)
transformers.LineByLineTextDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int)
transformers.LineByLineTextDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.LineByLineTextDataset.__len__(self)
transformers.LineByLineWithRefDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,ref_path:str)
transformers.LineByLineWithRefDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.LineByLineWithRefDataset.__len__(self)
transformers.LineByLineWithSOPTextDataset(self,tokenizer:PreTrainedTokenizer,file_dir:str,block_size:int)
transformers.LineByLineWithSOPTextDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.LineByLineWithSOPTextDataset.__len__(self)
transformers.LineByLineWithSOPTextDataset.create_examples_from_document(self,document,block_size,tokenizer,short_seq_prob=0.1)
transformers.TextDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,cache_dir:Optional[str]=None)
transformers.TextDataset.__getitem__(self,i)->torch.Tensor
transformers.TextDataset.__len__(self)
transformers.TextDatasetForNextSentencePrediction(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,short_seq_probability=0.1,nsp_probability=0.5)
transformers.TextDatasetForNextSentencePrediction.__getitem__(self,i)
transformers.TextDatasetForNextSentencePrediction.__len__(self)
transformers.TextDatasetForNextSentencePrediction.create_examples_from_document(self,document:List[List[int]],doc_index:int)
transformers.data.datasets.language_modeling.LineByLineTextDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int)
transformers.data.datasets.language_modeling.LineByLineTextDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.data.datasets.language_modeling.LineByLineTextDataset.__init__(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int)
transformers.data.datasets.language_modeling.LineByLineTextDataset.__len__(self)
transformers.data.datasets.language_modeling.LineByLineWithRefDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,ref_path:str)
transformers.data.datasets.language_modeling.LineByLineWithRefDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.data.datasets.language_modeling.LineByLineWithRefDataset.__init__(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,ref_path:str)
transformers.data.datasets.language_modeling.LineByLineWithRefDataset.__len__(self)
transformers.data.datasets.language_modeling.LineByLineWithSOPTextDataset(self,tokenizer:PreTrainedTokenizer,file_dir:str,block_size:int)
transformers.data.datasets.language_modeling.LineByLineWithSOPTextDataset.__getitem__(self,i)->Dict[str, torch.tensor]
transformers.data.datasets.language_modeling.LineByLineWithSOPTextDataset.__init__(self,tokenizer:PreTrainedTokenizer,file_dir:str,block_size:int)
transformers.data.datasets.language_modeling.LineByLineWithSOPTextDataset.__len__(self)
transformers.data.datasets.language_modeling.LineByLineWithSOPTextDataset.create_examples_from_document(self,document,block_size,tokenizer,short_seq_prob=0.1)
transformers.data.datasets.language_modeling.TextDataset(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,cache_dir:Optional[str]=None)
transformers.data.datasets.language_modeling.TextDataset.__getitem__(self,i)->torch.Tensor
transformers.data.datasets.language_modeling.TextDataset.__init__(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,cache_dir:Optional[str]=None)
transformers.data.datasets.language_modeling.TextDataset.__len__(self)
transformers.data.datasets.language_modeling.TextDatasetForNextSentencePrediction(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,short_seq_probability=0.1,nsp_probability=0.5)
transformers.data.datasets.language_modeling.TextDatasetForNextSentencePrediction.__getitem__(self,i)
transformers.data.datasets.language_modeling.TextDatasetForNextSentencePrediction.__init__(self,tokenizer:PreTrainedTokenizer,file_path:str,block_size:int,overwrite_cache=False,short_seq_probability=0.1,nsp_probability=0.5)
transformers.data.datasets.language_modeling.TextDatasetForNextSentencePrediction.__len__(self)
transformers.data.datasets.language_modeling.TextDatasetForNextSentencePrediction.create_examples_from_document(self,document:List[List[int]],doc_index:int)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/datasets/squad.py----------------------------------------
A:transformers.data.datasets.squad.logger->utils.logging.get_logger(__name__)
A:transformers.data.datasets.squad.MODEL_CONFIG_CLASSES->list(MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys())
A:transformers.data.datasets.squad.MODEL_TYPES->tuple((conf.model_type for conf in MODEL_CONFIG_CLASSES))
A:transformers.data.datasets.squad.cached_features_file->os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), version_tag))
A:transformers.data.datasets.squad.start->time.time()
A:transformers.data.datasets.squad.self.old_features->torch.load(cached_features_file)
A:transformers.data.datasets.squad.self.dataset->self.old_features.get('dataset', None)
A:transformers.data.datasets.squad.self.examples->self.processor.get_train_examples(args.data_dir)
A:transformers.data.datasets.squad.(self.features, self.dataset)->squad_convert_examples_to_features(examples=self.examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=mode == Split.train, threads=args.threads, return_dataset=dataset_format)
A:transformers.data.datasets.squad.input_ids->torch.tensor(feature.input_ids, dtype=torch.long)
A:transformers.data.datasets.squad.attention_mask->torch.tensor(feature.attention_mask, dtype=torch.long)
A:transformers.data.datasets.squad.token_type_ids->torch.tensor(feature.token_type_ids, dtype=torch.long)
A:transformers.data.datasets.squad.cls_index->torch.tensor(feature.cls_index, dtype=torch.long)
A:transformers.data.datasets.squad.p_mask->torch.tensor(feature.p_mask, dtype=torch.float)
A:transformers.data.datasets.squad.is_impossible->torch.tensor(feature.is_impossible, dtype=torch.float)
A:transformers.data.datasets.squad.start_positions->torch.tensor(feature.start_position, dtype=torch.long)
A:transformers.data.datasets.squad.end_positions->torch.tensor(feature.end_position, dtype=torch.long)
transformers.SquadDataTrainingArguments
transformers.SquadDataset(self,args:SquadDataTrainingArguments,tokenizer:PreTrainedTokenizer,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,is_language_sensitive:Optional[bool]=False,cache_dir:Optional[str]=None,dataset_format:Optional[str]='pt')
transformers.SquadDataset.__getitem__(self,i)->Dict[str, torch.Tensor]
transformers.SquadDataset.__len__(self)
transformers.data.datasets.squad.Split(Enum)
transformers.data.datasets.squad.SquadDataTrainingArguments
transformers.data.datasets.squad.SquadDataset(self,args:SquadDataTrainingArguments,tokenizer:PreTrainedTokenizer,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,is_language_sensitive:Optional[bool]=False,cache_dir:Optional[str]=None,dataset_format:Optional[str]='pt')
transformers.data.datasets.squad.SquadDataset.__getitem__(self,i)->Dict[str, torch.Tensor]
transformers.data.datasets.squad.SquadDataset.__init__(self,args:SquadDataTrainingArguments,tokenizer:PreTrainedTokenizer,limit_length:Optional[int]=None,mode:Union[str,Split]=Split.train,is_language_sensitive:Optional[bool]=False,cache_dir:Optional[str]=None,dataset_format:Optional[str]='pt')
transformers.data.datasets.squad.SquadDataset.__len__(self)


----------------------------------------/home/zhang/Packages/transformers/transformers4.1.0/data/datasets/__init__.py----------------------------------------

