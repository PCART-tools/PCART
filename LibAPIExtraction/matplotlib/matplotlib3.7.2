
----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backend_managers.py----------------------------------------
A:matplotlib.backend_managers.self._callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.backend_managers.self.keypresslock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_managers.self.messagelock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_managers.self._key_press_handler_id->self.canvas.mpl_connect('key_press_event', self._key_press)
A:matplotlib.backend_managers.event->ToolTriggerEvent(s, sender, tool, canvasevent, data)
A:matplotlib.backend_managers.tool->self.get_tool(name)
A:matplotlib.backend_managers.destroy->matplotlib._api.deprecate_method_override(backend_tools.ToolBase.destroy, tool, since='3.6', alternative='tool_removed_event')
A:matplotlib.backend_managers.tool_cls->matplotlib.backend_tools._find_tool_class(type(self.canvas), tool)
A:matplotlib.backend_managers.tool_obj->tool_cls(self, name, *args, **kwargs)
A:matplotlib.backend_managers.name->self._keys.get(event.key, None)
matplotlib.backend_managers.ToolEvent(self,name,sender,tool,data=None)
matplotlib.backend_managers.ToolEvent.__init__(self,name,sender,tool,data=None)
matplotlib.backend_managers.ToolManager(self,figure=None)
matplotlib.backend_managers.ToolManager.__init__(self,figure=None)
matplotlib.backend_managers.ToolManager._handle_toggle(self,tool,canvasevent,data)
matplotlib.backend_managers.ToolManager._key_press(self,event)
matplotlib.backend_managers.ToolManager._remove_keys(self,name)
matplotlib.backend_managers.ToolManager.active_toggle(self)
matplotlib.backend_managers.ToolManager.add_tool(self,name,tool,*args,**kwargs)
matplotlib.backend_managers.ToolManager.canvas(self)
matplotlib.backend_managers.ToolManager.figure(self)
matplotlib.backend_managers.ToolManager.figure(self,figure)
matplotlib.backend_managers.ToolManager.get_tool(self,name,warn=True)
matplotlib.backend_managers.ToolManager.get_tool_keymap(self,name)
matplotlib.backend_managers.ToolManager.message_event(self,message,sender=None)
matplotlib.backend_managers.ToolManager.remove_tool(self,name)
matplotlib.backend_managers.ToolManager.set_figure(self,figure,update_tools=True)
matplotlib.backend_managers.ToolManager.toolmanager_connect(self,s,func)
matplotlib.backend_managers.ToolManager.toolmanager_disconnect(self,cid)
matplotlib.backend_managers.ToolManager.tools(self)
matplotlib.backend_managers.ToolManager.trigger_tool(self,name,sender=None,canvasevent=None,data=None)
matplotlib.backend_managers.ToolManager.update_keymap(self,name,key)
matplotlib.backend_managers.ToolManagerMessageEvent(self,name,sender,message)
matplotlib.backend_managers.ToolManagerMessageEvent.__init__(self,name,sender,message)
matplotlib.backend_managers.ToolTriggerEvent(self,name,sender,tool,canvasevent=None,data=None)
matplotlib.backend_managers.ToolTriggerEvent.__init__(self,name,sender,tool,canvasevent=None,data=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/container.py----------------------------------------
A:matplotlib.container.self._callbacks->matplotlib.cbook.CallbackRegistry(signals=['pchanged'])
matplotlib.container.BarContainer(self,patches,errorbar=None,*,datavalues=None,orientation=None,**kwargs)
matplotlib.container.BarContainer.__init__(self,patches,errorbar=None,*,datavalues=None,orientation=None,**kwargs)
matplotlib.container.Container(self,kl,label=None)
matplotlib.container.Container.__init__(self,kl,label=None)
matplotlib.container.Container.__repr__(self)
matplotlib.container.Container.get_children(self)
matplotlib.container.Container.remove(self)
matplotlib.container.ErrorbarContainer(self,lines,has_xerr=False,has_yerr=False,**kwargs)
matplotlib.container.ErrorbarContainer.__init__(self,lines,has_xerr=False,has_yerr=False,**kwargs)
matplotlib.container.StemContainer(self,markerline_stemlines_baseline,**kwargs)
matplotlib.container.StemContainer.__init__(self,markerline_stemlines_baseline,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/sankey.py----------------------------------------
A:matplotlib.sankey._log->logging.getLogger(__name__)
A:matplotlib.sankey.fig->matplotlib.pyplot.figure()
A:matplotlib.sankey.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1, xticks=[], yticks=[])
A:matplotlib.sankey.self.pitch->numpy.tan(np.pi * (1 - head_angle / 180.0) / 2.0)
A:matplotlib.sankey.self.extent->numpy.array((np.inf, -np.inf, np.inf, -np.inf))
A:matplotlib.sankey.ARC_VERTICES->numpy.array([[1.0, 0.0], [1.0, 0.265114773], [0.894571235, 0.519642327], [0.707106781, 0.707106781], [0.519642327, 0.894571235], [0.265114773, 1.0], [0.0, 1.0]])
A:matplotlib.sankey.vertices->translate(rotate(vertices))
A:matplotlib.sankey.orientations->numpy.broadcast_to(orientations, n)
A:matplotlib.sankey.labels->numpy.broadcast_to(labels, n)
A:matplotlib.sankey.gain->sum((max(flow, 0) for flow in scaled_flows))
A:matplotlib.sankey.loss->sum((min(flow, 0) for flow in scaled_flows))
A:matplotlib.sankey.d->dict(RIGHT=pathlengths)
A:matplotlib.sankey.tips->translate(tips)
A:matplotlib.sankey.label_locations->translate(rotate(label_locations))
A:matplotlib.sankey.(tips[i, :], label_locations[i, :])->self._add_output(urpath, angle, *spec)
A:matplotlib.sankey.(tip, label_location)->self._add_input(llpath, angle, *spec)
A:matplotlib.sankey.(codes, vertices)->zip(*path)
A:matplotlib.sankey.text->self.ax.text(*offset, **kwds)
A:matplotlib.sankey.kwds->dict(s=patchlabel, ha='center', va='center')
A:matplotlib.sankey.fc->kwargs.pop('fc', kwargs.pop('facecolor', None))
A:matplotlib.sankey.lw->kwargs.pop('lw', kwargs.pop('linewidth', None))
A:matplotlib.sankey.patch->PathPatch(Path(vertices, codes), fc=fc, lw=lw, **kwargs)
A:matplotlib.sankey.quantity->self.format(number)
matplotlib.sankey.Sankey(self,ax=None,scale=1.0,unit='',format='%G',gap=0.25,radius=0.1,shoulder=0.03,offset=0.15,head_angle=100,margin=0.4,tolerance=1e-06,**kwargs)
matplotlib.sankey.Sankey.__init__(self,ax=None,scale=1.0,unit='',format='%G',gap=0.25,radius=0.1,shoulder=0.03,offset=0.15,head_angle=100,margin=0.4,tolerance=1e-06,**kwargs)
matplotlib.sankey.Sankey._add_input(self,path,angle,flow,length)
matplotlib.sankey.Sankey._add_output(self,path,angle,flow,length)
matplotlib.sankey.Sankey._arc(self,quadrant=0,cw=True,radius=1,center=(0,0))
matplotlib.sankey.Sankey._revert(self,path,first_action=Path.LINETO)
matplotlib.sankey.Sankey.add(self,patchlabel='',flows=None,orientations=None,labels='',trunklength=1.0,pathlengths=0.25,prior=None,connect=(0,0),rotation=0,**kwargs)
matplotlib.sankey.Sankey.finish(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_color_data.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tight_layout.py----------------------------------------
matplotlib.tight_layout.get_renderer(fig)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/category.py----------------------------------------
A:matplotlib.category._log->logging.getLogger(__name__)
A:matplotlib.category.values->numpy.atleast_1d(np.array(value, dtype=object))
A:matplotlib.category.majloc->StrCategoryLocator(unit._mapping)
A:matplotlib.category.majfmt->StrCategoryFormatter(unit._mapping)
A:matplotlib.category.value->str(value)
A:matplotlib.category.self._mapping->OrderedDict()
A:matplotlib.category.self._counter->itertools.count()
A:matplotlib.category.data->numpy.atleast_1d(np.array(data, dtype=object))
A:matplotlib.category.convertible->self._str_is_convertible(val)
A:matplotlib.category.self._mapping[val]->next(self._counter)
A:matplotlib.category.units.registry[str]->StrCategoryConverter()
A:matplotlib.category.units.registry[np.str_]->StrCategoryConverter()
A:matplotlib.category.units.registry[bytes]->StrCategoryConverter()
A:matplotlib.category.units.registry[np.bytes_]->StrCategoryConverter()
matplotlib.category.StrCategoryConverter(units.ConversionInterface)
matplotlib.category.StrCategoryConverter._validate_unit(unit)
matplotlib.category.StrCategoryConverter.axisinfo(unit,axis)
matplotlib.category.StrCategoryConverter.convert(value,unit,axis)
matplotlib.category.StrCategoryConverter.default_units(data,axis)
matplotlib.category.StrCategoryFormatter(self,units_mapping)
matplotlib.category.StrCategoryFormatter.__init__(self,units_mapping)
matplotlib.category.StrCategoryFormatter._text(value)
matplotlib.category.StrCategoryFormatter.format_ticks(self,values)
matplotlib.category.StrCategoryLocator(self,units_mapping)
matplotlib.category.StrCategoryLocator.__init__(self,units_mapping)
matplotlib.category.StrCategoryLocator.tick_values(self,vmin,vmax)
matplotlib.category.UnitData(self,data=None)
matplotlib.category.UnitData.__init__(self,data=None)
matplotlib.category.UnitData._str_is_convertible(val)
matplotlib.category.UnitData.update(self,data)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tight_bbox.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/scale.py----------------------------------------
A:matplotlib.scale.transform->FuncTransform(forward, inverse)
A:matplotlib.scale.self._clip->matplotlib._api.check_getitem({'clip': True, 'mask': False}, nonpositive=nonpositive)
A:matplotlib.scale.log->{np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)
A:matplotlib.scale.out->numpy.log10(a / (1 - a))
A:matplotlib.scale.self._transform->LogitTransform(nonpositive)
A:matplotlib.scale.base->property(lambda self: self._transform.base)
A:matplotlib.scale.self._log_base->numpy.log(base)
A:matplotlib.scale.abs_a->numpy.abs(a)
A:matplotlib.scale.symlog->SymmetricalLogTransform(base, linthresh, linscale)
A:matplotlib.scale.self.invlinthresh->SymmetricalLogTransform(base, linthresh, linscale).transform(linthresh)
A:matplotlib.scale.linthresh->property(lambda self: self._transform.linthresh)
A:matplotlib.scale.linscale->property(lambda self: self._transform.linscale)
A:matplotlib.scale.self._base->int(base)
A:matplotlib.scale.self._subs->self.auto_tick_multipliers.get(self._base)
A:matplotlib.scale.linear_width->property(lambda self: self._transform.linear_width)
A:matplotlib.scale.scale_cls->matplotlib._api.check_getitem(_scale_mapping, scale=scale)
matplotlib.scale.AsinhScale(self,axis,*,linear_width=1.0,base=10,subs='auto',**kwargs)
matplotlib.scale.AsinhScale.__init__(self,axis,*,linear_width=1.0,base=10,subs='auto',**kwargs)
matplotlib.scale.AsinhScale.get_transform(self)
matplotlib.scale.AsinhScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.AsinhTransform(self,linear_width)
matplotlib.scale.AsinhTransform.__init__(self,linear_width)
matplotlib.scale.AsinhTransform.inverted(self)
matplotlib.scale.AsinhTransform.transform_non_affine(self,a)
matplotlib.scale.FuncScale(self,axis,functions)
matplotlib.scale.FuncScale.__init__(self,axis,functions)
matplotlib.scale.FuncScale.get_transform(self)
matplotlib.scale.FuncScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.FuncScaleLog(self,axis,functions,base=10)
matplotlib.scale.FuncScaleLog.__init__(self,axis,functions,base=10)
matplotlib.scale.FuncScaleLog.base(self)
matplotlib.scale.FuncScaleLog.get_transform(self)
matplotlib.scale.FuncTransform(self,forward,inverse)
matplotlib.scale.FuncTransform.__init__(self,forward,inverse)
matplotlib.scale.FuncTransform.inverted(self)
matplotlib.scale.FuncTransform.transform_non_affine(self,values)
matplotlib.scale.InvertedAsinhTransform(self,linear_width)
matplotlib.scale.InvertedAsinhTransform.__init__(self,linear_width)
matplotlib.scale.InvertedAsinhTransform.inverted(self)
matplotlib.scale.InvertedAsinhTransform.transform_non_affine(self,a)
matplotlib.scale.InvertedLogTransform(self,base)
matplotlib.scale.InvertedLogTransform.__init__(self,base)
matplotlib.scale.InvertedLogTransform.__str__(self)
matplotlib.scale.InvertedLogTransform.inverted(self)
matplotlib.scale.InvertedLogTransform.transform_non_affine(self,a)
matplotlib.scale.InvertedSymmetricalLogTransform(self,base,linthresh,linscale)
matplotlib.scale.InvertedSymmetricalLogTransform.__init__(self,base,linthresh,linscale)
matplotlib.scale.InvertedSymmetricalLogTransform.inverted(self)
matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine(self,a)
matplotlib.scale.LinearScale(self,axis)
matplotlib.scale.LinearScale.__init__(self,axis)
matplotlib.scale.LinearScale.get_transform(self)
matplotlib.scale.LinearScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.LogScale(self,axis,*,base=10,subs=None,nonpositive='clip')
matplotlib.scale.LogScale.__init__(self,axis,*,base=10,subs=None,nonpositive='clip')
matplotlib.scale.LogScale.get_transform(self)
matplotlib.scale.LogScale.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.LogScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.LogTransform(self,base,nonpositive='clip')
matplotlib.scale.LogTransform.__init__(self,base,nonpositive='clip')
matplotlib.scale.LogTransform.__str__(self)
matplotlib.scale.LogTransform.inverted(self)
matplotlib.scale.LogTransform.transform_non_affine(self,a)
matplotlib.scale.LogisticTransform(self,nonpositive='mask')
matplotlib.scale.LogisticTransform.__init__(self,nonpositive='mask')
matplotlib.scale.LogisticTransform.__str__(self)
matplotlib.scale.LogisticTransform.inverted(self)
matplotlib.scale.LogisticTransform.transform_non_affine(self,a)
matplotlib.scale.LogitScale(self,axis,nonpositive='mask',*,one_half='\\frac{1}{2}',use_overline=False)
matplotlib.scale.LogitScale.__init__(self,axis,nonpositive='mask',*,one_half='\\frac{1}{2}',use_overline=False)
matplotlib.scale.LogitScale.get_transform(self)
matplotlib.scale.LogitScale.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.LogitScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.LogitTransform(self,nonpositive='mask')
matplotlib.scale.LogitTransform.__init__(self,nonpositive='mask')
matplotlib.scale.LogitTransform.__str__(self)
matplotlib.scale.LogitTransform.inverted(self)
matplotlib.scale.LogitTransform.transform_non_affine(self,a)
matplotlib.scale.ScaleBase(self,axis)
matplotlib.scale.ScaleBase.__init__(self,axis)
matplotlib.scale.ScaleBase.get_transform(self)
matplotlib.scale.ScaleBase.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.ScaleBase.set_default_locators_and_formatters(self,axis)
matplotlib.scale.SymmetricalLogScale(self,axis,*,base=10,linthresh=2,subs=None,linscale=1)
matplotlib.scale.SymmetricalLogScale.__init__(self,axis,*,base=10,linthresh=2,subs=None,linscale=1)
matplotlib.scale.SymmetricalLogScale.get_transform(self)
matplotlib.scale.SymmetricalLogScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.SymmetricalLogTransform(self,base,linthresh,linscale)
matplotlib.scale.SymmetricalLogTransform.__init__(self,base,linthresh,linscale)
matplotlib.scale.SymmetricalLogTransform.inverted(self)
matplotlib.scale.SymmetricalLogTransform.transform_non_affine(self,a)
matplotlib.scale._get_scale_docs()
matplotlib.scale.get_scale_names()
matplotlib.scale.register_scale(scale_class)
matplotlib.scale.scale_factory(scale,axis,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/hatch.py----------------------------------------
A:matplotlib.hatch.self.num_lines->int((hatch.count('\\') + hatch.count('x') + hatch.count('X')) * density)
A:matplotlib.hatch.(steps, stepsize)->numpy.linspace(0.0, 1.0, self.num_lines, False, retstep=True)
A:matplotlib.hatch.steps->numpy.linspace(-0.5, 0.5, self.num_lines + 1)
A:matplotlib.hatch.shape_vertices->numpy.concatenate([shape_vertices, shape_vertices[::-1] * 0.9])
A:matplotlib.hatch.shape_codes->numpy.concatenate([shape_codes, shape_codes])
A:matplotlib.hatch.cols->numpy.linspace(offset / 2, 1 - offset / 2, self.num_rows)
A:matplotlib.hatch.path->matplotlib.path.Path.unit_regular_star(5)
A:matplotlib.hatch.self.shape_codes->numpy.full(len(self.shape_vertices), Path.LINETO, dtype=Path.code_type)
A:matplotlib.hatch.valid_hatch_patterns->set('-+|/\\xXoO.*')
A:matplotlib.hatch.invalids->''.join(sorted(invalids))
A:matplotlib.hatch.valid->''.join(sorted(valid_hatch_patterns))
A:matplotlib.hatch.density->int(density)
A:matplotlib.hatch.num_vertices->sum([pattern.num_vertices for pattern in patterns])
A:matplotlib.hatch.vertices->numpy.empty((num_vertices, 2))
A:matplotlib.hatch.codes->numpy.empty(num_vertices, Path.code_type)
matplotlib.hatch.Circles(self,hatch,density)
matplotlib.hatch.Circles.__init__(self,hatch,density)
matplotlib.hatch.HatchPatternBase
matplotlib.hatch.HorizontalHatch(self,hatch,density)
matplotlib.hatch.HorizontalHatch.__init__(self,hatch,density)
matplotlib.hatch.HorizontalHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.LargeCircles(self,hatch,density)
matplotlib.hatch.LargeCircles.__init__(self,hatch,density)
matplotlib.hatch.NorthEastHatch(self,hatch,density)
matplotlib.hatch.NorthEastHatch.__init__(self,hatch,density)
matplotlib.hatch.NorthEastHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.Shapes(self,hatch,density)
matplotlib.hatch.Shapes.__init__(self,hatch,density)
matplotlib.hatch.Shapes.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.SmallCircles(self,hatch,density)
matplotlib.hatch.SmallCircles.__init__(self,hatch,density)
matplotlib.hatch.SmallFilledCircles(self,hatch,density)
matplotlib.hatch.SmallFilledCircles.__init__(self,hatch,density)
matplotlib.hatch.SouthEastHatch(self,hatch,density)
matplotlib.hatch.SouthEastHatch.__init__(self,hatch,density)
matplotlib.hatch.SouthEastHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.Stars(self,hatch,density)
matplotlib.hatch.Stars.__init__(self,hatch,density)
matplotlib.hatch.VerticalHatch(self,hatch,density)
matplotlib.hatch.VerticalHatch.__init__(self,hatch,density)
matplotlib.hatch.VerticalHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch._validate_hatch_pattern(hatch)
matplotlib.hatch.get_path(hatchpattern,density=6)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/pylab.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/ticker.py----------------------------------------
A:matplotlib.ticker._log->logging.getLogger(__name__)
A:matplotlib.ticker.dataLim->matplotlib._api.deprecate_privatize_attribute('3.6', alternative='get_data_interval() and set_data_interval()')
A:matplotlib.ticker.viewLim->matplotlib._api.deprecate_privatize_attribute('3.6', alternative='get_view_interval() and set_view_interval()')
A:matplotlib.ticker.self._dataLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.ticker.self._viewLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.ticker.self.axis->_DummyAxis(**kwargs)
A:matplotlib.ticker.useOffset->property(fget=get_useOffset, fset=set_useOffset)
A:matplotlib.ticker.useLocale->property(fget=get_useLocale, fset=set_useLocale)
A:matplotlib.ticker.ufont->matplotlib.font_manager.findfont(font_manager.FontProperties(mpl.rcParams['font.family']), fallback_to_default=False)
A:matplotlib.ticker.useMathText->property(fget=get_useMathText, fset=set_useMathText)
A:matplotlib.ticker.self._scientific->bool(b)
A:matplotlib.ticker.axis_trf->self.axis.axes.get_yaxis_transform()
A:matplotlib.ticker.axis_inv_trf->self.axis.axes.get_yaxis_transform().inverted()
A:matplotlib.ticker.screen_xy->self.axis.axes.get_yaxis_transform().transform((0, value))
A:matplotlib.ticker.delta->abs(neighbor_values - value).max()
A:matplotlib.ticker.(a, b)->self.axis.get_view_interval()
A:matplotlib.ticker.fmt->'%-#.{}g'.format(cbook._g_sig_digits(value, delta))
A:matplotlib.ticker.e->math.floor(math.log10(abs(value)))
A:matplotlib.ticker.s->'{x:0.{decimals}f}'.format(x=x, decimals=int(decimals))
A:matplotlib.ticker.exponent->round(math.log10(1 - x))
A:matplotlib.ticker.significand->self._format_maybe_minus_and_locale('%d' if s % 1 == 0 else '%1.10g', s)
A:matplotlib.ticker.offsetStr->self.format_data(self.offset)
A:matplotlib.ticker.sciNotStr->self.format_data(10 ** self.orderOfMagnitude)
A:matplotlib.ticker.(vmin, vmax)->self.axis.get_view_interval()
A:matplotlib.ticker.locs->self._raw_ticks(vmin, vmax)
A:matplotlib.ticker.(abs_min, abs_max)->sorted([abs(float(lmin)), abs(float(lmax))])
A:matplotlib.ticker.sign->math.copysign(1, lmin)
A:matplotlib.ticker.oom_max->numpy.ceil(math.log10(abs_max))
A:matplotlib.ticker.oom->math.floor(math.log10(val))
A:matplotlib.ticker.val->self._raw_ticks(vmin, vmax).max()
A:matplotlib.ticker.loc_range->numpy.max(np.abs(locs))
A:matplotlib.ticker.loc_range_oom->int(math.floor(math.log10(loc_range)))
A:matplotlib.ticker.sigfigs->max(0, 3 - loc_range_oom)
A:matplotlib.ticker.self._base->float(base)
A:matplotlib.ticker.rhs->min(vmax, -linthresh)
A:matplotlib.ticker.lhs->max(vmin, linthresh)
A:matplotlib.ticker.numdec->abs(vmax - vmin)
A:matplotlib.ticker.c->numpy.geomspace(1, b, int(b) // 2 + 1)
A:matplotlib.ticker.self._sublabels->set(np.arange(1, b + 1))
A:matplotlib.ticker.x->self.convert_to_pct(x)
A:matplotlib.ticker.is_x_decade->_is_close_to_int(fx)
A:matplotlib.ticker.coeff->round(coeff)
A:matplotlib.ticker.tup->'{x:0.{decimals}f}'.format(x=x, decimals=int(decimals)).split('e')
A:matplotlib.ticker.mantissa->tup[0].rstrip('0').rstrip('.')
A:matplotlib.ticker.fx->round(fx)
A:matplotlib.ticker.b->float(base)
A:matplotlib.ticker.self._labelled->set()
A:matplotlib.ticker.self.locs->numpy.asarray(locs)
A:matplotlib.ticker.diff->numpy.diff(-np.log(1 / self.locs - 1))
A:matplotlib.ticker.space_pessimistic->numpy.minimum(np.concatenate(((np.inf,), diff)), np.concatenate((diff, (np.inf,))))
A:matplotlib.ticker.usetex->property(fget=get_usetex, fset=set_usetex)
A:matplotlib.ticker.pow10->numpy.clip(pow10, min(self.ENG_PREFIXES), max(self.ENG_PREFIXES))
A:matplotlib.ticker.formatted->'{mant:{fmt}}{sep}{prefix}'.format(mant=mant, sep=self.sep, prefix=prefix, fmt=fmt)
A:matplotlib.ticker.(ax_min, ax_max)->self.axis.get_view_interval()
A:matplotlib.ticker.display_range->abs(ax_max - ax_min)
A:matplotlib.ticker.scaled_range->self.convert_to_pct(display_range)
A:matplotlib.ticker.decimals->math.ceil(2.0 - math.log10(2.0 * scaled_range))
A:matplotlib.ticker.symbol->symbol.replace(spec, '\\' + spec).replace(spec, '\\' + spec)
A:matplotlib.ticker.(dmin, dmax)->matplotlib.transforms.nonsingular(dmin, dmax, expander=1e-12, tiny=1e-13)
A:matplotlib.ticker.step->max(1, step)
A:matplotlib.ticker.ticklocs->numpy.array([])
A:matplotlib.ticker.(exponent, remainder)->divmod(math.log10(vmax - vmin), math.log10(max(self.numticks - 1, 1)))
A:matplotlib.ticker.self._edge->_Edge_integer(base, 0)
A:matplotlib.ticker.dv->abs(vmax - vmin)
A:matplotlib.ticker.offset->math.copysign(10 ** (math.log10(abs(meanv)) // 1), meanv)
A:matplotlib.ticker.self._offset->abs(offset)
A:matplotlib.ticker.digits->numpy.log10(self._offset / self.step)
A:matplotlib.ticker.tol->min(0.4999, tol)
A:matplotlib.ticker.(d, m)->divmod(x, self.step)
A:matplotlib.ticker.default_params->dict(nbins=10, steps=None, integer=False, symmetric=False, prune=None, min_n_ticks=2)
A:matplotlib.ticker.steps->kwargs.pop('steps')
A:matplotlib.ticker.self._nbins->int(self._nbins)
A:matplotlib.ticker.self._symmetric->kwargs.pop('symmetric')
A:matplotlib.ticker.prune->kwargs.pop('prune')
A:matplotlib.ticker.self._min_n_ticks->max(1, kwargs.pop('min_n_ticks'))
A:matplotlib.ticker.self._steps->self._validate_steps(steps)
A:matplotlib.ticker.self._extended_steps->self._staircase(self._steps)
A:matplotlib.ticker.self._integer->kwargs.pop('integer')
A:matplotlib.ticker.nbins->self.axis.get_tick_space()
A:matplotlib.ticker.(scale, offset)->scale_range(vmin, vmax, nbins)
A:matplotlib.ticker.edge->_Edge_integer(step, offset)
A:matplotlib.ticker.low->_Edge_integer(step, offset).le(_vmin - best_vmin)
A:matplotlib.ticker.high->_Edge_integer(step, offset).ge(_vmax - best_vmin)
A:matplotlib.ticker.nticks->((ticks <= _vmax) & (ticks >= _vmin)).sum()
A:matplotlib.ticker.vmax->_decade_greater(vmax, b)
A:matplotlib.ticker.dmax->max(abs(dmin), abs(dmax))
A:matplotlib.ticker.less->_decade_less_equal(x, base)
A:matplotlib.ticker.greater->_decade_greater_equal(x, base)
A:matplotlib.ticker.self._subs->numpy.asarray(subs, dtype=float)
A:matplotlib.ticker.numticks->numpy.clip(self.axis.get_tick_space(), 2, 9)
A:matplotlib.ticker.vmin->_decade_less(vmin, b)
A:matplotlib.ticker.subs->numpy.asarray(self._subs)
A:matplotlib.ticker.stride->max(total_ticks // (self.numticks - 1), 1)
A:matplotlib.ticker.decades->numpy.arange(math.floor(log_vmin) - stride, math.ceil(log_vmax) + 2 * stride, stride)
A:matplotlib.ticker.minpos->self.axis.get_minpos()
A:matplotlib.ticker.lo->numpy.floor(np.log(lo) / np.log(base))
A:matplotlib.ticker.hi->numpy.ceil(np.log(hi) / np.log(base))
A:matplotlib.ticker.a_upper_lim->min(-linthresh, vmax)
A:matplotlib.ticker.(a_lo, a_hi)->get_log_range(abs(a_upper_lim), abs(vmin) + 1)
A:matplotlib.ticker.c_lower_lim->max(linthresh, vmin)
A:matplotlib.ticker.(c_lo, c_hi)->get_log_range(c_lower_lim, vmax + 1)
A:matplotlib.ticker.result->matplotlib.transforms.nonsingular(vmin, vmax)
A:matplotlib.ticker.bound->max(abs(vmin), abs(vmax))
A:matplotlib.ticker.ys->numpy.hstack([ys[zero_dev > 0.5 / self.numticks], 0.0])
A:matplotlib.ticker.zero_dev->numpy.abs(ys / (ymax - ymin))
A:matplotlib.ticker.log_base->math.log(self.base)
A:matplotlib.ticker.qs->numpy.outer(powers, self.subs).flatten()
A:matplotlib.ticker.ticks->numpy.array(sorted(set(qs)))
A:matplotlib.ticker.binf->int(np.floor(np.log10(vmin)) if vmin < 0.5 else 0 if vmin < 0.9 else -np.ceil(np.log10(1 - vmin)))
A:matplotlib.ticker.bsup->int(np.ceil(np.log10(vmax)) if vmax <= 0.5 else 1 if vmax <= 0.9 else -np.floor(np.log10(1 - vmax)))
A:matplotlib.ticker.subsampling_factor->math.ceil(numideal / nbins)
A:matplotlib.ticker.majorlocs->self.axis.get_majorticklocs()
matplotlib.ticker.AsinhLocator(self,linear_width,numticks=11,symthresh=0.2,base=10,subs=None)
matplotlib.ticker.AsinhLocator.__init__(self,linear_width,numticks=11,symthresh=0.2,base=10,subs=None)
matplotlib.ticker.AsinhLocator.set_params(self,numticks=None,symthresh=None,base=None,subs=None)
matplotlib.ticker.AsinhLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.AutoLocator(self)
matplotlib.ticker.AutoLocator.__init__(self)
matplotlib.ticker.AutoMinorLocator(self,n=None)
matplotlib.ticker.AutoMinorLocator.__init__(self,n=None)
matplotlib.ticker.AutoMinorLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.EngFormatter(self,unit='',places=None,sep='',*,usetex=None,useMathText=None)
matplotlib.ticker.EngFormatter.__init__(self,unit='',places=None,sep='',*,usetex=None,useMathText=None)
matplotlib.ticker.EngFormatter.format_eng(self,num)
matplotlib.ticker.EngFormatter.get_useMathText(self)
matplotlib.ticker.EngFormatter.get_usetex(self)
matplotlib.ticker.EngFormatter.set_useMathText(self,val)
matplotlib.ticker.EngFormatter.set_usetex(self,val)
matplotlib.ticker.FixedFormatter(self,seq)
matplotlib.ticker.FixedFormatter.__init__(self,seq)
matplotlib.ticker.FixedFormatter.get_offset(self)
matplotlib.ticker.FixedFormatter.set_offset_string(self,ofs)
matplotlib.ticker.FixedLocator(self,locs,nbins=None)
matplotlib.ticker.FixedLocator.__init__(self,locs,nbins=None)
matplotlib.ticker.FixedLocator.set_params(self,nbins=None)
matplotlib.ticker.FixedLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.FormatStrFormatter(self,fmt)
matplotlib.ticker.FormatStrFormatter.__init__(self,fmt)
matplotlib.ticker.Formatter(self,x,pos=None)
matplotlib.ticker.Formatter.__call__(self,x,pos=None)
matplotlib.ticker.Formatter._set_locator(self,locator)
matplotlib.ticker.Formatter.fix_minus(s)
matplotlib.ticker.Formatter.format_data(self,value)
matplotlib.ticker.Formatter.format_data_short(self,value)
matplotlib.ticker.Formatter.format_ticks(self,values)
matplotlib.ticker.Formatter.get_offset(self)
matplotlib.ticker.Formatter.set_locs(self,locs)
matplotlib.ticker.FuncFormatter(self,func)
matplotlib.ticker.FuncFormatter.__init__(self,func)
matplotlib.ticker.FuncFormatter.get_offset(self)
matplotlib.ticker.FuncFormatter.set_offset_string(self,ofs)
matplotlib.ticker.IndexLocator(self,base,offset)
matplotlib.ticker.IndexLocator.__init__(self,base,offset)
matplotlib.ticker.IndexLocator.set_params(self,base=None,offset=None)
matplotlib.ticker.IndexLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LinearLocator(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator.__init__(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator.numticks(self)
matplotlib.ticker.LinearLocator.numticks(self,numticks)
matplotlib.ticker.LinearLocator.set_params(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LinearLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.Locator(self)
matplotlib.ticker.Locator.__call__(self)
matplotlib.ticker.Locator.nonsingular(self,v0,v1)
matplotlib.ticker.Locator.raise_if_exceeds(self,locs)
matplotlib.ticker.Locator.set_params(self,**kwargs)
matplotlib.ticker.Locator.tick_values(self,vmin,vmax)
matplotlib.ticker.Locator.view_limits(self,vmin,vmax)
matplotlib.ticker.LogFormatter(self,base=10.0,labelOnlyBase=False,minor_thresholds=None,linthresh=None)
matplotlib.ticker.LogFormatter.__init__(self,base=10.0,labelOnlyBase=False,minor_thresholds=None,linthresh=None)
matplotlib.ticker.LogFormatter._num_to_string(self,x,vmin,vmax)
matplotlib.ticker.LogFormatter._pprint_val(self,x,d)
matplotlib.ticker.LogFormatter.base(self,base)
matplotlib.ticker.LogFormatter.format_data(self,value)
matplotlib.ticker.LogFormatter.format_data_short(self,value)
matplotlib.ticker.LogFormatter.label_minor(self,labelOnlyBase)
matplotlib.ticker.LogFormatter.set_base(self,base)
matplotlib.ticker.LogFormatter.set_label_minor(self,labelOnlyBase)
matplotlib.ticker.LogFormatter.set_locs(self,locs=None)
matplotlib.ticker.LogFormatterExponent(LogFormatter)
matplotlib.ticker.LogFormatterExponent._num_to_string(self,x,vmin,vmax)
matplotlib.ticker.LogFormatterMathtext(self,x,pos=None)
matplotlib.ticker.LogFormatterMathtext.__call__(self,x,pos=None)
matplotlib.ticker.LogFormatterMathtext._non_decade_format(self,sign_string,base,fx,usetex)
matplotlib.ticker.LogFormatterSciNotation(LogFormatterMathtext)
matplotlib.ticker.LogFormatterSciNotation._non_decade_format(self,sign_string,base,fx,usetex)
matplotlib.ticker.LogLocator(self,base=10.0,subs=(1.0,),numdecs=4,numticks=None)
matplotlib.ticker.LogLocator.__init__(self,base=10.0,subs=(1.0,),numdecs=4,numticks=None)
matplotlib.ticker.LogLocator._set_subs(self,subs)
matplotlib.ticker.LogLocator.base(self,base)
matplotlib.ticker.LogLocator.nonsingular(self,vmin,vmax)
matplotlib.ticker.LogLocator.set_params(self,base=None,subs=None,numdecs=None,numticks=None)
matplotlib.ticker.LogLocator.subs(self,subs)
matplotlib.ticker.LogLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LogLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.LogitFormatter(self,*,use_overline=False,one_half='\\frac{1}{2}',minor=False,minor_threshold=25,minor_number=6)
matplotlib.ticker.LogitFormatter.__init__(self,*,use_overline=False,one_half='\\frac{1}{2}',minor=False,minor_threshold=25,minor_number=6)
matplotlib.ticker.LogitFormatter._format_value(self,x,locs,sci_notation=True)
matplotlib.ticker.LogitFormatter._one_minus(self,s)
matplotlib.ticker.LogitFormatter.format_data_short(self,value)
matplotlib.ticker.LogitFormatter.set_locs(self,locs)
matplotlib.ticker.LogitFormatter.set_minor_number(self,minor_number)
matplotlib.ticker.LogitFormatter.set_minor_threshold(self,minor_threshold)
matplotlib.ticker.LogitFormatter.set_one_half(self,one_half)
matplotlib.ticker.LogitFormatter.use_overline(self,use_overline)
matplotlib.ticker.LogitLocator(self,minor=False,*,nbins='auto')
matplotlib.ticker.LogitLocator.__init__(self,minor=False,*,nbins='auto')
matplotlib.ticker.LogitLocator.minor(self)
matplotlib.ticker.LogitLocator.minor(self,value)
matplotlib.ticker.LogitLocator.nonsingular(self,vmin,vmax)
matplotlib.ticker.LogitLocator.set_params(self,minor=None,**kwargs)
matplotlib.ticker.LogitLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MaxNLocator(self,nbins=None,**kwargs)
matplotlib.ticker.MaxNLocator.__init__(self,nbins=None,**kwargs)
matplotlib.ticker.MaxNLocator._raw_ticks(self,vmin,vmax)
matplotlib.ticker.MaxNLocator._staircase(steps)
matplotlib.ticker.MaxNLocator._validate_steps(steps)
matplotlib.ticker.MaxNLocator.set_params(self,**kwargs)
matplotlib.ticker.MaxNLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MaxNLocator.view_limits(self,dmin,dmax)
matplotlib.ticker.MultipleLocator(self,base=1.0)
matplotlib.ticker.MultipleLocator.__init__(self,base=1.0)
matplotlib.ticker.MultipleLocator.set_params(self,base)
matplotlib.ticker.MultipleLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MultipleLocator.view_limits(self,dmin,dmax)
matplotlib.ticker.NullFormatter(self,x,pos=None)
matplotlib.ticker.NullFormatter.__call__(self,x,pos=None)
matplotlib.ticker.NullLocator(self)
matplotlib.ticker.NullLocator.__call__(self)
matplotlib.ticker.NullLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.PercentFormatter(self,xmax=100,decimals=None,symbol='%',is_latex=False)
matplotlib.ticker.PercentFormatter.__init__(self,xmax=100,decimals=None,symbol='%',is_latex=False)
matplotlib.ticker.PercentFormatter.convert_to_pct(self,x)
matplotlib.ticker.PercentFormatter.format_pct(self,x,display_range)
matplotlib.ticker.PercentFormatter.symbol(self)
matplotlib.ticker.PercentFormatter.symbol(self,symbol)
matplotlib.ticker.ScalarFormatter(self,useOffset=None,useMathText=None,useLocale=None)
matplotlib.ticker.ScalarFormatter.__init__(self,useOffset=None,useMathText=None,useLocale=None)
matplotlib.ticker.ScalarFormatter._compute_offset(self)
matplotlib.ticker.ScalarFormatter._format_maybe_minus_and_locale(self,fmt,arg)
matplotlib.ticker.ScalarFormatter._set_format(self)
matplotlib.ticker.ScalarFormatter._set_order_of_magnitude(self)
matplotlib.ticker.ScalarFormatter.format_data(self,value)
matplotlib.ticker.ScalarFormatter.format_data_short(self,value)
matplotlib.ticker.ScalarFormatter.get_offset(self)
matplotlib.ticker.ScalarFormatter.get_useLocale(self)
matplotlib.ticker.ScalarFormatter.get_useMathText(self)
matplotlib.ticker.ScalarFormatter.get_useOffset(self)
matplotlib.ticker.ScalarFormatter.set_locs(self,locs)
matplotlib.ticker.ScalarFormatter.set_powerlimits(self,lims)
matplotlib.ticker.ScalarFormatter.set_scientific(self,b)
matplotlib.ticker.ScalarFormatter.set_useLocale(self,val)
matplotlib.ticker.ScalarFormatter.set_useMathText(self,val)
matplotlib.ticker.ScalarFormatter.set_useOffset(self,val)
matplotlib.ticker.StrMethodFormatter(self,fmt)
matplotlib.ticker.StrMethodFormatter.__init__(self,fmt)
matplotlib.ticker.SymmetricalLogLocator(self,transform=None,subs=None,linthresh=None,base=None)
matplotlib.ticker.SymmetricalLogLocator.__init__(self,transform=None,subs=None,linthresh=None,base=None)
matplotlib.ticker.SymmetricalLogLocator.set_params(self,subs=None,numticks=None)
matplotlib.ticker.SymmetricalLogLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.SymmetricalLogLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.TickHelper
matplotlib.ticker.TickHelper.create_dummy_axis(self,**kwargs)
matplotlib.ticker.TickHelper.set_axis(self,axis)
matplotlib.ticker._DummyAxis(self,minpos=0)
matplotlib.ticker._DummyAxis.__init__(self,minpos=0)
matplotlib.ticker._DummyAxis.get_data_interval(self)
matplotlib.ticker._DummyAxis.get_minpos(self)
matplotlib.ticker._DummyAxis.get_tick_space(self)
matplotlib.ticker._DummyAxis.get_view_interval(self)
matplotlib.ticker._DummyAxis.set_data_interval(self,vmin,vmax)
matplotlib.ticker._DummyAxis.set_view_interval(self,vmin,vmax)
matplotlib.ticker._Edge_integer(self,step,offset)
matplotlib.ticker._Edge_integer.__init__(self,step,offset)
matplotlib.ticker._Edge_integer.closeto(self,ms,edge)
matplotlib.ticker._Edge_integer.ge(self,x)
matplotlib.ticker._Edge_integer.le(self,x)
matplotlib.ticker._decade_greater(x,base)
matplotlib.ticker._decade_greater_equal(x,base)
matplotlib.ticker._decade_less(x,base)
matplotlib.ticker._decade_less_equal(x,base)
matplotlib.ticker._is_close_to_int(x)
matplotlib.ticker._is_decade(x,*,base=10,rtol=None)
matplotlib.ticker.is_close_to_int(x,*,atol=1e-10)
matplotlib.ticker.is_decade(x,base=10,*,rtol=1e-10)
matplotlib.ticker.scale_range(vmin,vmax,n=1,threshold=100)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_tight_bbox.py----------------------------------------
A:matplotlib._tight_bbox.sentinel->object()
A:matplotlib._tight_bbox.locator->ax.get_axes_locator()
A:matplotlib._tight_bbox.current_pos->ax.get_position(original=False).frozen()
A:matplotlib._tight_bbox.tr->Affine2D().scale(fixed_dpi)
A:matplotlib._tight_bbox.fig.bbox_inches->matplotlib.transforms.Bbox.from_bounds(0, 0, *bbox_inches.size)
A:matplotlib._tight_bbox.(x0, y0)->Affine2D().scale(fixed_dpi).transform(bbox_inches.p0)
A:matplotlib._tight_bbox.fig.transFigure._boxout->matplotlib.transforms.Bbox.from_bounds(-x0, -y0, w1, h1)
A:matplotlib._tight_bbox.fig.bbox->TransformedBbox(fig.bbox_inches, tr)
A:matplotlib._tight_bbox.r->adjust_bbox(fig, bbox_inches, fixed_dpi)
matplotlib._tight_bbox.adjust_bbox(fig,bbox_inches,fixed_dpi=None)
matplotlib._tight_bbox.process_figure_for_rasterizing(fig,bbox_inches_restore,fixed_dpi=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/stackplot.py----------------------------------------
A:matplotlib.stackplot.y->numpy.row_stack(args)
A:matplotlib.stackplot.labels->iter(labels)
A:matplotlib.stackplot.colors->itertools.cycle(colors)
A:matplotlib.stackplot.stack->numpy.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))
A:matplotlib.stackplot.first_line->(y * (m - 0.5 - np.arange(m)[:, None])).sum(0)
A:matplotlib.stackplot.total->numpy.sum(y, 0)
A:matplotlib.stackplot.inv_total->numpy.zeros_like(total)
A:matplotlib.stackplot.increase->numpy.hstack((y[:, 0:1], np.diff(y)))
A:matplotlib.stackplot.center->numpy.cumsum(center.sum(0))
A:matplotlib.stackplot.coll->axes.fill_between(x, first_line, stack[0, :], facecolor=next(colors), label=next(labels, None), **kwargs)
matplotlib.stackplot.stackplot(axes,x,*args,labels=(),colors=None,baseline='zero',**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/text.py----------------------------------------
A:matplotlib.text._log->logging.getLogger(__name__)
A:matplotlib.text.theta->numpy.deg2rad(text.get_rotation())
A:matplotlib.text.tr->Affine2D().scale(w, h)
A:matplotlib.text.(_, parts, d)->text._get_layout(renderer)
A:matplotlib.text.(xt1, yt1)->Affine2D().scale(w, h).transform((x, y))
A:matplotlib.text.(x_box, y_box)->Affine2D().rotate(theta).transform((xt_box, yt_box))
A:matplotlib.text._charsize_cache->dict()
A:matplotlib.text.kwargs->cbook.normalize_kwargs(kwargs, Text)
A:matplotlib.text.sentinel->object()
A:matplotlib.text.fontproperties->str(self._fontproperties)
A:matplotlib.text.bbox->Text.get_window_extent(self, renderer)
A:matplotlib.text.d->max(d, lp_d)
A:matplotlib.text.(inside, info)->self._default_contains(event)
A:matplotlib.text.(patch_inside, patch_cattr)->self._bbox_patch.contains(mouseevent)
A:matplotlib.text.(x, y)->self._artist.transform(self._ref_coord)
A:matplotlib.text.Text._charsize_cache[fontproperties]->dict()
A:matplotlib.text.bb->self.get_window_extent()
A:matplotlib.text.size_accum->numpy.cumsum([0] + [charsize_cache[x] for x in text])
A:matplotlib.text.self._fontproperties->font_manager.FontProperties._from_any(fp).copy()
A:matplotlib.text.lines->self._get_wrapped_text().split('\n')
A:matplotlib.text.(_, lp_h, lp_d)->_get_text_metrics_with_cache(renderer, 'lp', self._fontproperties, ismath='TeX' if self.get_usetex() else False, dpi=self.figure.dpi)
A:matplotlib.text.(clean_line, ismath)->self._preprocess_math(line)
A:matplotlib.text.(w, h, d)->self._renderer.get_text_width_height_descent(text, self.get_fontproperties(), False)
A:matplotlib.text.h->max(h, lp_h)
A:matplotlib.text.width->arrowprops.copy().get('width', 4)
A:matplotlib.text.M->Affine2D().rotate_deg(self.get_rotation())
A:matplotlib.text.malign->self._get_multialignment()
A:matplotlib.text.corners_horiz->numpy.array([(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)])
A:matplotlib.text.corners_rotated->Affine2D().rotate_deg(self.get_rotation()).transform(corners_horiz)
A:matplotlib.text.xmin->corners_rotated[:, 0].min()
A:matplotlib.text.xmax->corners_rotated[:, 0].max()
A:matplotlib.text.ymin->corners_rotated[:, 1].min()
A:matplotlib.text.ymax->corners_rotated[:, 1].max()
A:matplotlib.text.rotation_mode->self.get_rotation_mode()
A:matplotlib.text.(offsetx, offsety)->Affine2D().rotate_deg(self.get_rotation()).transform((offsetx, offsety))
A:matplotlib.text.props->rectprops.copy()
A:matplotlib.text.boxstyle->rectprops.copy().pop('boxstyle', None)
A:matplotlib.text.pad->self.figure._get_renderer().points_to_pixels(4)
A:matplotlib.text.self._bbox_patch->FancyBboxPatch((0, 0), 1, 1, boxstyle=boxstyle, transform=IdentityTransform(), **props)
A:matplotlib.text.posx->float(self.convert_xunits(self._x))
A:matplotlib.text.posy->float(self.convert_yunits(self._y))
A:matplotlib.text.(posx, posy)->self.get_transform().transform((posx, posy))
A:matplotlib.text.(x_box, y_box, w_box, h_box)->_get_textbox(self, renderer)
A:matplotlib.text.fontsize_in_pixel->self.figure._get_renderer().points_to_pixels(self.get_size())
A:matplotlib.text.clipprops->dict(clip_box=self.clipbox, clip_path=self._clippath, clip_on=self._clipon)
A:matplotlib.text.(x0, y0)->self.get_transform().transform(self.get_position())
A:matplotlib.text.figure_box->self.get_figure().get_window_extent()
A:matplotlib.text.alignment->self.get_horizontalalignment()
A:matplotlib.text.rotation->self.get_rotation()
A:matplotlib.text.left->self._get_dist_to_box(rotation, x0, y0, figure_box)
A:matplotlib.text.right->self._get_dist_to_box((180 + rotation) % 360, x0, y0, figure_box)
A:matplotlib.text.line_width->self._get_wrap_line_width()
A:matplotlib.text.unwrapped_lines->self.get_text().split('\n')
A:matplotlib.text.sub_words->unwrapped_line.split(' ')
A:matplotlib.text.line->' '.join(sub_words[:i])
A:matplotlib.text.current_width->self._get_rendered_text_width(line)
A:matplotlib.text.(bbox, info, descent)->self._get_layout(self._renderer)
A:matplotlib.text.trans->self.get_transform()
A:matplotlib.text.(canvasw, canvash)->self.figure._get_renderer().get_canvas_width_height()
A:matplotlib.text.gc->self.figure._get_renderer().new_gc()
A:matplotlib.text.angle->self.get_rotation()
A:matplotlib.text.textrenderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.text.x->float(self.convert_xunits(x))
A:matplotlib.text.y->float(self.convert_yunits(y))
A:matplotlib.text.(tx, ty)->self._get_xy_display()
A:matplotlib.text.self._renderer->self.figure._get_renderer()
A:matplotlib.text.self._text->str(s)
A:matplotlib.text.self._usetex->bool(usetex)
A:matplotlib.text.self._parse_math->bool(parse_math)
A:matplotlib.text.unit->self.get_unit()
A:matplotlib.text.sc->self._get_scale(renderer)
A:matplotlib.text.tr1->self._get_xy_transform(renderer, s1)
A:matplotlib.text.tr2->self._get_xy_transform(renderer, s2)
A:matplotlib.text.s_->s.split()
A:matplotlib.text.xy0->self._get_ref_xy(renderer)
A:matplotlib.text.fontsize->self.get_size()
A:matplotlib.text.renderer->self.figure._get_renderer()
A:matplotlib.text.b->self.get_annotation_clip()
A:matplotlib.text.xy_pixel->self._get_position_xy(renderer)
A:matplotlib.text.self._draggable->DraggableAnnotation(self, use_blit)
A:matplotlib.text.arrowprops->arrowprops.copy().copy()
A:matplotlib.text.self._arrow_relpos->arrowprops.copy().copy().pop('relpos', (0.5, 0.5))
A:matplotlib.text.self.arrow_patch->FancyArrowPatch((0, 0), (1, 1), **arrowprops)
A:matplotlib.text.(contains, tinfo)->Text.contains(self, event)
A:matplotlib.text.(in_patch, _)->self.arrow_patch.contains(event)
A:matplotlib.text.anncoords->property(get_anncoords, set_anncoords, doc='\n        The coordinate system to use for `.Annotation.xyann`.')
A:matplotlib.text.arrow_end(x1, y1)->self._get_position_xy(renderer)
A:matplotlib.text.ms->arrowprops.copy().copy().get('mutation_scale', self.get_size())
A:matplotlib.text.shrink->arrowprops.copy().copy().get('shrink', 0.0)
A:matplotlib.text.headwidth->arrowprops.copy().copy().get('headwidth', 12)
A:matplotlib.text.headlength->arrowprops.copy().copy().get('headlength', 12)
A:matplotlib.text.stylekw->dict(head_length=headlength / ms, head_width=headwidth / ms, tail_width=width / ms)
A:matplotlib.text.(x, relposx)->min(xpos, key=lambda v: abs(v[0] - x1))
A:matplotlib.text.(y, relposy)->min(ypos, key=lambda v: abs(v[0] - y1))
A:matplotlib.text.r->numpy.hypot(y - y1, x - x1)
A:matplotlib.text.patchA->Rectangle(xy=(bbox.x0 - pad / 2, bbox.y0 - pad / 2), width=bbox.width + pad, height=bbox.height + pad, transform=IdentityTransform(), clip_on=False)
A:matplotlib.text.text_bbox->Text.get_window_extent(self)
matplotlib.text.Annotation(self,text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.text.Annotation.__init__(self,text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.text.Annotation.__str__(self)
matplotlib.text.Annotation.contains(self,event)
matplotlib.text.Annotation.draw(self,renderer)
matplotlib.text.Annotation.get_anncoords(self)
matplotlib.text.Annotation.get_tightbbox(self,renderer=None)
matplotlib.text.Annotation.get_window_extent(self,renderer=None)
matplotlib.text.Annotation.set_anncoords(self,coords)
matplotlib.text.Annotation.set_figure(self,fig)
matplotlib.text.Annotation.update_positions(self,renderer)
matplotlib.text.Annotation.xyann(self)
matplotlib.text.Annotation.xyann(self,xytext)
matplotlib.text.Annotation.xycoords(self)
matplotlib.text.Annotation.xycoords(self,xycoords)
matplotlib.text.OffsetFrom(self,artist,ref_coord,unit='points')
matplotlib.text.OffsetFrom.__init__(self,artist,ref_coord,unit='points')
matplotlib.text.OffsetFrom._get_scale(self,renderer)
matplotlib.text.OffsetFrom.get_unit(self)
matplotlib.text.OffsetFrom.set_unit(self,unit)
matplotlib.text.Text(self,x=0,y=0,text='',color=None,verticalalignment='baseline',horizontalalignment='left',multialignment=None,fontproperties=None,rotation=None,linespacing=None,rotation_mode=None,usetex=None,wrap=False,transform_rotates_text=False,*,parse_math=None,**kwargs)
matplotlib.text.Text.__getstate__(self)
matplotlib.text.Text.__init__(self,x=0,y=0,text='',color=None,verticalalignment='baseline',horizontalalignment='left',multialignment=None,fontproperties=None,rotation=None,linespacing=None,rotation_mode=None,usetex=None,wrap=False,transform_rotates_text=False,*,parse_math=None,**kwargs)
matplotlib.text.Text.__repr__(self)
matplotlib.text.Text._char_index_at(self,x)
matplotlib.text.Text._get_dist_to_box(self,rotation,x0,y0,figure_box)
matplotlib.text.Text._get_layout(self,renderer)
matplotlib.text.Text._get_multialignment(self)
matplotlib.text.Text._get_rendered_text_width(self,text)
matplotlib.text.Text._get_wrap_line_width(self)
matplotlib.text.Text._get_wrapped_text(self)
matplotlib.text.Text._get_xy_display(self)
matplotlib.text.Text._preprocess_math(self,s)
matplotlib.text.Text._reset_visual_defaults(self,text='',color=None,fontproperties=None,usetex=None,parse_math=None,wrap=False,verticalalignment='baseline',horizontalalignment='left',multialignment=None,rotation=None,transform_rotates_text=False,linespacing=None,rotation_mode=None)
matplotlib.text.Text._update_clip_properties(self)
matplotlib.text.Text.contains(self,mouseevent)
matplotlib.text.Text.draw(self,renderer)
matplotlib.text.Text.get_bbox_patch(self)
matplotlib.text.Text.get_color(self)
matplotlib.text.Text.get_fontfamily(self)
matplotlib.text.Text.get_fontname(self)
matplotlib.text.Text.get_fontproperties(self)
matplotlib.text.Text.get_fontsize(self)
matplotlib.text.Text.get_fontstyle(self)
matplotlib.text.Text.get_fontvariant(self)
matplotlib.text.Text.get_fontweight(self)
matplotlib.text.Text.get_horizontalalignment(self)
matplotlib.text.Text.get_math_fontfamily(self)
matplotlib.text.Text.get_parse_math(self)
matplotlib.text.Text.get_position(self)
matplotlib.text.Text.get_rotation(self)
matplotlib.text.Text.get_rotation_mode(self)
matplotlib.text.Text.get_stretch(self)
matplotlib.text.Text.get_text(self)
matplotlib.text.Text.get_transform_rotates_text(self)
matplotlib.text.Text.get_unitless_position(self)
matplotlib.text.Text.get_usetex(self)
matplotlib.text.Text.get_verticalalignment(self)
matplotlib.text.Text.get_window_extent(self,renderer=None,dpi=None)
matplotlib.text.Text.get_wrap(self)
matplotlib.text.Text.set_backgroundcolor(self,color)
matplotlib.text.Text.set_bbox(self,rectprops)
matplotlib.text.Text.set_clip_box(self,clipbox)
matplotlib.text.Text.set_clip_on(self,b)
matplotlib.text.Text.set_clip_path(self,path,transform=None)
matplotlib.text.Text.set_color(self,color)
matplotlib.text.Text.set_fontfamily(self,fontname)
matplotlib.text.Text.set_fontname(self,fontname)
matplotlib.text.Text.set_fontproperties(self,fp)
matplotlib.text.Text.set_fontsize(self,fontsize)
matplotlib.text.Text.set_fontstretch(self,stretch)
matplotlib.text.Text.set_fontstyle(self,fontstyle)
matplotlib.text.Text.set_fontvariant(self,variant)
matplotlib.text.Text.set_fontweight(self,weight)
matplotlib.text.Text.set_horizontalalignment(self,align)
matplotlib.text.Text.set_linespacing(self,spacing)
matplotlib.text.Text.set_math_fontfamily(self,fontfamily)
matplotlib.text.Text.set_multialignment(self,align)
matplotlib.text.Text.set_parse_math(self,parse_math)
matplotlib.text.Text.set_position(self,xy)
matplotlib.text.Text.set_rotation(self,s)
matplotlib.text.Text.set_rotation_mode(self,m)
matplotlib.text.Text.set_text(self,s)
matplotlib.text.Text.set_transform_rotates_text(self,t)
matplotlib.text.Text.set_usetex(self,usetex)
matplotlib.text.Text.set_verticalalignment(self,align)
matplotlib.text.Text.set_wrap(self,wrap)
matplotlib.text.Text.set_x(self,x)
matplotlib.text.Text.set_y(self,y)
matplotlib.text.Text.update(self,kwargs)
matplotlib.text.Text.update_bbox_position_size(self,renderer)
matplotlib.text.Text.update_from(self,other)
matplotlib.text._AnnotationBase(self,xy,xycoords='data',annotation_clip=None)
matplotlib.text._AnnotationBase.__init__(self,xy,xycoords='data',annotation_clip=None)
matplotlib.text._AnnotationBase._check_xy(self,renderer=None)
matplotlib.text._AnnotationBase._get_position_xy(self,renderer)
matplotlib.text._AnnotationBase._get_ref_xy(self,renderer)
matplotlib.text._AnnotationBase._get_xy(self,renderer,x,y,s)
matplotlib.text._AnnotationBase._get_xy_transform(self,renderer,s)
matplotlib.text._AnnotationBase.draggable(self,state=None,use_blit=False)
matplotlib.text._AnnotationBase.get_annotation_clip(self)
matplotlib.text._AnnotationBase.set_annotation_clip(self,b)
matplotlib.text._get_text_metrics_with_cache(renderer,text,fontprop,ismath,dpi)
matplotlib.text._get_text_metrics_with_cache_impl(renderer_ref,text,fontprop,ismath,dpi)
matplotlib.text._get_textbox(text,renderer)
matplotlib.text.get_rotation(rotation)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/afm.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/textpath.py----------------------------------------
A:matplotlib.textpath._log->logging.getLogger(__name__)
A:matplotlib.textpath.self.mathtext_parser->MathTextParser('path')
A:matplotlib.textpath.filenames->matplotlib.font_manager.fontManager._find_fonts_by_props(prop)
A:matplotlib.textpath.font->get_font(text.font_path)
A:matplotlib.textpath.fontsize->matplotlib.font_manager.FontProperties._from_any(prop).get_size_in_points()
A:matplotlib.textpath.prop->matplotlib.font_manager.FontProperties._from_any(prop)
A:matplotlib.textpath.(width, height, descent, *_)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.textpath.(w, h)->get_font(text.font_path).get_width_height()
A:matplotlib.textpath.d->get_font(text.font_path).get_descent()
A:matplotlib.textpath.(glyph_info, glyph_map, rects)->self.get_glyphs_mathtext(prop, s)
A:matplotlib.textpath.verts->numpy.empty((0, 2))
A:matplotlib.textpath.glyph_map->OrderedDict()
A:matplotlib.textpath.glyph_map_new->OrderedDict()
A:matplotlib.textpath.char_id->self._get_char_id(font, text.glyph)
A:matplotlib.textpath.glyph_map_new[char_id]->get_font(text.font_path).get_path()
A:matplotlib.textpath.(width, height, descent, glyphs, rects)->self.mathtext_parser.parse(s, self.DPI, prop)
A:matplotlib.textpath.self._texmanager->TexManager()
A:matplotlib.textpath.dvifile->TexManager().make_dvi(s, self.FONT_SCALE)
A:matplotlib.textpath.index->get_font(text.font_path).get_name_index(glyph_name_or_index)
A:matplotlib.textpath.text_to_path->TextToPath()
A:matplotlib.textpath.size->matplotlib.font_manager.FontProperties._from_any(prop).get_size_in_points()
A:matplotlib.textpath.(s, ismath)->Text(usetex=usetex)._preprocess_math(s)
A:matplotlib.textpath.tr->Affine2D().scale(self._size / text_to_path.FONT_SCALE).translate(*self._xy)
A:matplotlib.textpath.self._cached_vertices->Affine2D().scale(self._size / text_to_path.FONT_SCALE).translate(*self._xy).transform(self._vertices)
matplotlib.textpath.TextPath(self,xy,s,size=None,prop=None,_interpolation_steps=1,usetex=False)
matplotlib.textpath.TextPath.__init__(self,xy,s,size=None,prop=None,_interpolation_steps=1,usetex=False)
matplotlib.textpath.TextPath._revalidate_path(self)
matplotlib.textpath.TextPath.codes(self)
matplotlib.textpath.TextPath.get_size(self)
matplotlib.textpath.TextPath.set_size(self,size)
matplotlib.textpath.TextPath.vertices(self)
matplotlib.textpath.TextToPath(self)
matplotlib.textpath.TextToPath.__init__(self)
matplotlib.textpath.TextToPath._get_char_id(self,font,ccode)
matplotlib.textpath.TextToPath._get_font(self,prop)
matplotlib.textpath.TextToPath._get_hinting_flag(self)
matplotlib.textpath.TextToPath._select_native_charmap(font)
matplotlib.textpath.TextToPath.get_glyphs_mathtext(self,prop,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_glyphs_tex(self,prop,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_glyphs_with_font(self,font,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_texmanager(self)
matplotlib.textpath.TextToPath.get_text_path(self,prop,s,ismath=False)
matplotlib.textpath.TextToPath.get_text_width_height_descent(self,s,prop,ismath)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/collections.py----------------------------------------
A:matplotlib.collections._transforms->numpy.empty((0, 3, 3))
A:matplotlib.collections.self._hatch_color->tuple(self._edgecolors[0])
A:matplotlib.collections.offsets->offset_trf.get_affine().transform_non_affine(offsets)
A:matplotlib.collections.self._offset_transform->self._offset_transform._as_mpl_transform(self.axes)
A:matplotlib.collections.transform->transforms.IdentityTransform()
A:matplotlib.collections.offset_trf->offset_trf.get_affine().get_affine()
A:matplotlib.collections.paths->self.get_paths()
A:matplotlib.collections.bbox->transforms.Bbox.null()
A:matplotlib.collections.xs->self.convert_xunits(offsets[:, 0])
A:matplotlib.collections.ys->self.convert_yunits(offsets[:, 1])
A:matplotlib.collections.(transform, offset_trf, offsets, paths)->self._prepare_points()
A:matplotlib.collections.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.collections.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.collections.trans->self.get_transforms()
A:matplotlib.collections.facecolors->self.get_facecolor()
A:matplotlib.collections.edgecolors->self.get_edgecolor()
A:matplotlib.collections.extents->paths[0].get_extents(combined_transform)
A:matplotlib.collections.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.collections.ind->_path.point_in_path_collection(mouseevent.x, mouseevent.y, pickradius, transform.frozen(), paths, self.get_transforms(), offsets, offset_trf, pickradius <= 0)
A:matplotlib.collections.self._offsets->cstack((np.asanyarray(self.convert_xunits(offsets[:, 0]), float), np.asanyarray(self.convert_yunits(offsets[:, 1]), float)))
A:matplotlib.collections.lw->self._get_default_linewidth()
A:matplotlib.collections.self._us_lw->numpy.atleast_1d(lw)
A:matplotlib.collections.(self._linewidths, self._linestyles)->self._bcast_lwls(self._us_lw, self._us_linestyles)
A:matplotlib.collections.self._capstyle->CapStyle(cs)
A:matplotlib.collections.self._joinstyle->JoinStyle(js)
A:matplotlib.collections.l_dashes->len(dashes)
A:matplotlib.collections.l_lw->len(linewidths)
A:matplotlib.collections.gcd->math.gcd(l_dashes, l_lw)
A:matplotlib.collections.aa->self._get_default_antialiased()
A:matplotlib.collections.self._antialiaseds->numpy.atleast_1d(np.asarray(aa, bool))
A:matplotlib.collections.c->self.get_facecolor().reshape((*coordinates.shape[:2], 4))
A:matplotlib.collections.self._facecolors->mcolors.to_rgba_array(c, self._alpha)
A:matplotlib.collections.self._edgecolors->mcolors.to_rgba_array(c, self._alpha)
A:matplotlib.collections.self._alpha->self._alpha.reshape(self._A.shape)
A:matplotlib.collections.self._mapped_colors->self.to_rgba(self._A, self._alpha)
A:matplotlib.collections.self._sizes->numpy.asarray(sizes)
A:matplotlib.collections.self._transforms->numpy.zeros((len(self._widths), 3, 3))
A:matplotlib.collections.fmt->matplotlib.ticker.StrMethodFormatter(fmt)
A:matplotlib.collections.u->numpy.unique(self.get_sizes())
A:matplotlib.collections.size->numpy.sqrt(val)
A:matplotlib.collections.color->self.cmap(self.norm(val))
A:matplotlib.collections.fu->func(u)
A:matplotlib.collections.label_values->matplotlib.ticker.MaxNLocator(nbins=num, min_n_ticks=num - 1, steps=[1, 2, 2.5, 3, 5, 6, 8, 10]).tick_values(func(arr).min(), func(arr).max())
A:matplotlib.collections.arr->self.get_sizes()
A:matplotlib.collections.loc->matplotlib.ticker.MaxNLocator(nbins=num, min_n_ticks=num - 1, steps=[1, 2, 2.5, 3, 5, 6, 8, 10])
A:matplotlib.collections.num->int(num)
A:matplotlib.collections.yarr->numpy.linspace(arr.min(), arr.max(), 256)
A:matplotlib.collections.xarr->func(yarr)
A:matplotlib.collections.ix->numpy.argsort(xarr)
A:matplotlib.collections.values->numpy.interp(label_values, xarr[ix], yarr[ix])
A:matplotlib.collections.h->mlines.Line2D([0], [0], ls='', color=color, ms=size, marker=self.get_paths()[0], **kw)
A:matplotlib.collections.l->fmt(lab)
A:matplotlib.collections.verts->numpy.stack((tri.x[triangles], tri.y[triangles]), axis=-1)
A:matplotlib.collections.verts_pad->numpy.concatenate((verts, verts[:, :1]), axis=1)
A:matplotlib.collections.codes->numpy.empty(verts_pad.shape[1], dtype=mpath.Path.code_type)
A:matplotlib.collections.vertices->numpy.asarray(vertices)
A:matplotlib.collections.lineoffset->self.get_lineoffset()
A:matplotlib.collections.linelength->self.get_linelength()
A:matplotlib.collections.segments->self.get_segments()
A:matplotlib.collections.positions->numpy.hstack([positions, np.asanyarray(position)])
A:matplotlib.collections.segments[i]->numpy.fliplr(segment)
A:matplotlib.collections.is_horizontal->_api.check_getitem({'horizontal': True, 'vertical': False}, orientation=orientation)
A:matplotlib.collections.self._angles->numpy.deg2rad(angles).ravel()
A:matplotlib.collections.sin_angle->numpy.sin(self._angles)
A:matplotlib.collections.cos_angle->numpy.cos(self._angles)
A:matplotlib.collections.m->ax.transData.get_affine().get_matrix().copy()
A:matplotlib.collections.self._bbox->transforms.Bbox.unit()
A:matplotlib.collections.xy->numpy.hstack((triangulation.x.reshape(-1, 1), triangulation.y.reshape(-1, 1)))
A:matplotlib.collections.self._paths->self._convert_mesh_to_paths(self._coordinates)
A:matplotlib.collections.triangles->numpy.concatenate([p_a, p_b, p_center, p_b, p_c, p_center, p_c, p_d, p_center, p_d, p_a, p_center], axis=2).reshape((-1, 3, 2))
A:matplotlib.collections.shape->numpy.shape(A)
A:matplotlib.collections.points->numpy.concatenate([c[:-1, :-1], c[:-1, 1:], c[1:, 1:], c[1:, :-1], c[:-1, :-1]], axis=2).reshape((-1, 5, 2))
A:matplotlib.collections.colors->numpy.concatenate([c_a, c_b, c_center, c_b, c_c, c_center, c_c, c_d, c_center, c_d, c_a, c_center], axis=2).reshape((-1, 3, 4))
A:matplotlib.collections.coordinates->coordinates.reshape(self._coordinates.shape).reshape(self._coordinates.shape)
A:matplotlib.collections.(triangles, colors)->self._convert_mesh_to_triangles(coordinates)
A:matplotlib.collections.(contained, info)->self.contains(event)
matplotlib.collections.AsteriskPolygonCollection(RegularPolyCollection)
matplotlib.collections.BrokenBarHCollection(self,xranges,yrange,**kwargs)
matplotlib.collections.BrokenBarHCollection.__init__(self,xranges,yrange,**kwargs)
matplotlib.collections.CircleCollection(self,sizes,**kwargs)
matplotlib.collections.CircleCollection.__init__(self,sizes,**kwargs)
matplotlib.collections.Collection(self,edgecolors=None,facecolors=None,linewidths=None,linestyles='solid',capstyle=None,joinstyle=None,antialiaseds=None,offsets=None,offset_transform=None,norm=None,cmap=None,pickradius=5.0,hatch=None,urls=None,*,zorder=1,**kwargs)
matplotlib.collections.Collection.__init__(self,edgecolors=None,facecolors=None,linewidths=None,linestyles='solid',capstyle=None,joinstyle=None,antialiaseds=None,offsets=None,offset_transform=None,norm=None,cmap=None,pickradius=5.0,hatch=None,urls=None,*,zorder=1,**kwargs)
matplotlib.collections.Collection._bcast_lwls(linewidths,dashes)
matplotlib.collections.Collection._get_default_antialiased(self)
matplotlib.collections.Collection._get_default_edgecolor(self)
matplotlib.collections.Collection._get_default_facecolor(self)
matplotlib.collections.Collection._get_default_linewidth(self)
matplotlib.collections.Collection._prepare_points(self)
matplotlib.collections.Collection._set_edgecolor(self,c)
matplotlib.collections.Collection._set_facecolor(self,c)
matplotlib.collections.Collection._set_mappable_flags(self)
matplotlib.collections.Collection.contains(self,mouseevent)
matplotlib.collections.Collection.draw(self,renderer)
matplotlib.collections.Collection.get_capstyle(self)
matplotlib.collections.Collection.get_datalim(self,transData)
matplotlib.collections.Collection.get_edgecolor(self)
matplotlib.collections.Collection.get_facecolor(self)
matplotlib.collections.Collection.get_fill(self)
matplotlib.collections.Collection.get_hatch(self)
matplotlib.collections.Collection.get_joinstyle(self)
matplotlib.collections.Collection.get_linestyle(self)
matplotlib.collections.Collection.get_linewidth(self)
matplotlib.collections.Collection.get_offset_transform(self)
matplotlib.collections.Collection.get_offsets(self)
matplotlib.collections.Collection.get_paths(self)
matplotlib.collections.Collection.get_pickradius(self)
matplotlib.collections.Collection.get_transforms(self)
matplotlib.collections.Collection.get_urls(self)
matplotlib.collections.Collection.get_window_extent(self,renderer=None)
matplotlib.collections.Collection.set_alpha(self,alpha)
matplotlib.collections.Collection.set_antialiased(self,aa)
matplotlib.collections.Collection.set_capstyle(self,cs)
matplotlib.collections.Collection.set_color(self,c)
matplotlib.collections.Collection.set_edgecolor(self,c)
matplotlib.collections.Collection.set_facecolor(self,c)
matplotlib.collections.Collection.set_hatch(self,hatch)
matplotlib.collections.Collection.set_joinstyle(self,js)
matplotlib.collections.Collection.set_linestyle(self,ls)
matplotlib.collections.Collection.set_linewidth(self,lw)
matplotlib.collections.Collection.set_offset_transform(self,offset_transform)
matplotlib.collections.Collection.set_offsets(self,offsets)
matplotlib.collections.Collection.set_paths(self,paths)
matplotlib.collections.Collection.set_pickradius(self,pickradius)
matplotlib.collections.Collection.set_urls(self,urls)
matplotlib.collections.Collection.update_from(self,other)
matplotlib.collections.Collection.update_scalarmappable(self)
matplotlib.collections.EllipseCollection(self,widths,heights,angles,units='points',**kwargs)
matplotlib.collections.EllipseCollection.__init__(self,widths,heights,angles,units='points',**kwargs)
matplotlib.collections.EllipseCollection._set_transforms(self)
matplotlib.collections.EllipseCollection.draw(self,renderer)
matplotlib.collections.EventCollection(self,positions,orientation='horizontal',lineoffset=0,linelength=1,linewidth=None,color=None,linestyle='solid',antialiased=None,**kwargs)
matplotlib.collections.EventCollection.__init__(self,positions,orientation='horizontal',lineoffset=0,linelength=1,linewidth=None,color=None,linestyle='solid',antialiased=None,**kwargs)
matplotlib.collections.EventCollection.add_positions(self,position)
matplotlib.collections.EventCollection.get_color(self)
matplotlib.collections.EventCollection.get_linelength(self)
matplotlib.collections.EventCollection.get_lineoffset(self)
matplotlib.collections.EventCollection.get_linewidth(self)
matplotlib.collections.EventCollection.get_linewidths(self)
matplotlib.collections.EventCollection.get_orientation(self)
matplotlib.collections.EventCollection.get_positions(self)
matplotlib.collections.EventCollection.is_horizontal(self)
matplotlib.collections.EventCollection.set_linelength(self,linelength)
matplotlib.collections.EventCollection.set_lineoffset(self,lineoffset)
matplotlib.collections.EventCollection.set_orientation(self,orientation)
matplotlib.collections.EventCollection.set_positions(self,positions)
matplotlib.collections.EventCollection.switch_orientation(self)
matplotlib.collections.LineCollection(self,segments,*,zorder=2,**kwargs)
matplotlib.collections.LineCollection.__init__(self,segments,*,zorder=2,**kwargs)
matplotlib.collections.LineCollection._get_default_antialiased(self)
matplotlib.collections.LineCollection._get_default_edgecolor(self)
matplotlib.collections.LineCollection._get_default_facecolor(self)
matplotlib.collections.LineCollection._get_default_linewidth(self)
matplotlib.collections.LineCollection.get_color(self)
matplotlib.collections.LineCollection.get_segments(self)
matplotlib.collections.LineCollection.set_color(self,c)
matplotlib.collections.LineCollection.set_segments(self,segments)
matplotlib.collections.PatchCollection(self,patches,match_original=False,**kwargs)
matplotlib.collections.PatchCollection.__init__(self,patches,match_original=False,**kwargs)
matplotlib.collections.PatchCollection.set_paths(self,patches)
matplotlib.collections.PathCollection(self,paths,sizes=None,**kwargs)
matplotlib.collections.PathCollection.__init__(self,paths,sizes=None,**kwargs)
matplotlib.collections.PathCollection.get_paths(self)
matplotlib.collections.PathCollection.legend_elements(self,prop='colors',num='auto',fmt=None,func=lambdax:x,**kwargs)
matplotlib.collections.PathCollection.set_paths(self,paths)
matplotlib.collections.PolyCollection(self,verts,sizes=None,closed=True,**kwargs)
matplotlib.collections.PolyCollection.__init__(self,verts,sizes=None,closed=True,**kwargs)
matplotlib.collections.PolyCollection.set_verts(self,verts,closed=True)
matplotlib.collections.PolyCollection.set_verts_and_codes(self,verts,codes)
matplotlib.collections.PolyCollection.span_where(cls,x,ymin,ymax,where,**kwargs)
matplotlib.collections.QuadMesh(self,coordinates,*,antialiased=True,shading='flat',**kwargs)
matplotlib.collections.QuadMesh.__init__(self,coordinates,*,antialiased=True,shading='flat',**kwargs)
matplotlib.collections.QuadMesh._convert_mesh_to_paths(coordinates)
matplotlib.collections.QuadMesh._convert_mesh_to_triangles(self,coordinates)
matplotlib.collections.QuadMesh.draw(self,renderer)
matplotlib.collections.QuadMesh.get_coordinates(self)
matplotlib.collections.QuadMesh.get_cursor_data(self,event)
matplotlib.collections.QuadMesh.get_datalim(self,transData)
matplotlib.collections.QuadMesh.get_paths(self)
matplotlib.collections.QuadMesh.set_array(self,A)
matplotlib.collections.QuadMesh.set_paths(self)
matplotlib.collections.RegularPolyCollection(self,numsides,rotation=0,sizes=(1,),**kwargs)
matplotlib.collections.RegularPolyCollection.__init__(self,numsides,rotation=0,sizes=(1,),**kwargs)
matplotlib.collections.RegularPolyCollection.draw(self,renderer)
matplotlib.collections.RegularPolyCollection.get_numsides(self)
matplotlib.collections.RegularPolyCollection.get_rotation(self)
matplotlib.collections.StarPolygonCollection(RegularPolyCollection)
matplotlib.collections.TriMesh(self,triangulation,**kwargs)
matplotlib.collections.TriMesh.__init__(self,triangulation,**kwargs)
matplotlib.collections.TriMesh.convert_mesh_to_paths(tri)
matplotlib.collections.TriMesh.draw(self,renderer)
matplotlib.collections.TriMesh.get_paths(self)
matplotlib.collections.TriMesh.set_paths(self)
matplotlib.collections._CollectionWithSizes(Collection)
matplotlib.collections._CollectionWithSizes.draw(self,renderer)
matplotlib.collections._CollectionWithSizes.get_sizes(self)
matplotlib.collections._CollectionWithSizes.set_sizes(self,sizes,dpi=72.0)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/layout_engine.py----------------------------------------
A:matplotlib.layout_engine.renderer->fig._get_renderer()
A:matplotlib.layout_engine.kwargs->get_tight_layout_figure(fig, fig.axes, get_subplotspec_list(fig.axes), renderer, pad=info['pad'], h_pad=info['h_pad'], w_pad=info['w_pad'], rect=info['rect'])
A:matplotlib.layout_engine.(width, height)->fig.get_size_inches()
matplotlib.layout_engine.ConstrainedLayoutEngine(self,*,h_pad=None,w_pad=None,hspace=None,wspace=None,rect=(0,0,1,1),compress=False,**kwargs)
matplotlib.layout_engine.ConstrainedLayoutEngine.__init__(self,*,h_pad=None,w_pad=None,hspace=None,wspace=None,rect=(0,0,1,1),compress=False,**kwargs)
matplotlib.layout_engine.ConstrainedLayoutEngine.execute(self,fig)
matplotlib.layout_engine.ConstrainedLayoutEngine.set(self,*,h_pad=None,w_pad=None,hspace=None,wspace=None,rect=None)
matplotlib.layout_engine.LayoutEngine(self,**kwargs)
matplotlib.layout_engine.LayoutEngine.__init__(self,**kwargs)
matplotlib.layout_engine.LayoutEngine.adjust_compatible(self)
matplotlib.layout_engine.LayoutEngine.colorbar_gridspec(self)
matplotlib.layout_engine.LayoutEngine.execute(self,fig)
matplotlib.layout_engine.LayoutEngine.get(self)
matplotlib.layout_engine.LayoutEngine.set(self,**kwargs)
matplotlib.layout_engine.PlaceHolderLayoutEngine(self,adjust_compatible,colorbar_gridspec,**kwargs)
matplotlib.layout_engine.PlaceHolderLayoutEngine.__init__(self,adjust_compatible,colorbar_gridspec,**kwargs)
matplotlib.layout_engine.PlaceHolderLayoutEngine.execute(self,fig)
matplotlib.layout_engine.TightLayoutEngine(self,*,pad=1.08,h_pad=None,w_pad=None,rect=(0,0,1,1),**kwargs)
matplotlib.layout_engine.TightLayoutEngine.__init__(self,*,pad=1.08,h_pad=None,w_pad=None,rect=(0,0,1,1),**kwargs)
matplotlib.layout_engine.TightLayoutEngine.execute(self,fig)
matplotlib.layout_engine.TightLayoutEngine.set(self,*,pad=None,w_pad=None,h_pad=None,rect=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/mathtext.py----------------------------------------
A:matplotlib.mathtext._log->logging.getLogger(__name__)
A:matplotlib.mathtext.self.image->FT2Image(np.ceil(w), np.ceil(h + max(d, 0)))
A:matplotlib.mathtext.height->max(int(y2 - y1) - 1, 0)
A:matplotlib.mathtext.y->int(y1)
A:matplotlib.mathtext._Result->namedtuple('_Result', 'width height depth glyphs rects')
A:matplotlib.mathtext.self._output_type->matplotlib._api.check_getitem({'path': 'vector', 'agg': 'raster', 'macosx': 'raster'}, output=output.lower())
A:matplotlib.mathtext.prop->FontProperties()
A:matplotlib.mathtext.fontset_class->matplotlib._api.check_getitem(self._font_type_mapping, fontset=prop.get_math_fontfamily())
A:matplotlib.mathtext.fontset->fontset_class(prop, load_glyph_flags)
A:matplotlib.mathtext.fontsize->FontProperties().get_size_in_points()
A:matplotlib.mathtext.self.__class__._parser->matplotlib._mathtext.Parser()
A:matplotlib.mathtext.box->self._parser.parse(s, fontset, fontsize, dpi)
A:matplotlib.mathtext.output->matplotlib._mathtext.ship(box)
A:matplotlib.mathtext.parser->MathTextParser('path')
A:matplotlib.mathtext.(width, height, depth, _, _)->MathTextParser('path').parse(s, dpi=72, prop=prop)
A:matplotlib.mathtext.fig->matplotlib.figure.Figure(figsize=(width / 72.0, height / 72.0))
matplotlib.mathtext.MathTextParser(self,output)
matplotlib.mathtext.MathTextParser.__init__(self,output)
matplotlib.mathtext.MathTextParser._parse_cached(self,s,dpi,prop)
matplotlib.mathtext.MathTextParser.parse(self,s,dpi=72,prop=None)
matplotlib.mathtext.MathTextWarning(Warning)
matplotlib.mathtext.MathtextBackend(self)
matplotlib.mathtext.MathtextBackend.__init__(self)
matplotlib.mathtext.MathtextBackend.get_hinting_type(self)
matplotlib.mathtext.MathtextBackend.get_results(self,box)
matplotlib.mathtext.MathtextBackend.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackend.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackend.set_canvas_size(self,w,h,d)
matplotlib.mathtext.MathtextBackendAgg(self)
matplotlib.mathtext.MathtextBackendAgg.__init__(self)
matplotlib.mathtext.MathtextBackendAgg._update_bbox(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendAgg.get_hinting_type(self)
matplotlib.mathtext.MathtextBackendAgg.get_results(self,box)
matplotlib.mathtext.MathtextBackendAgg.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendAgg.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendAgg.set_canvas_size(self,w,h,d)
matplotlib.mathtext.MathtextBackendPath(self)
matplotlib.mathtext.MathtextBackendPath.__init__(self)
matplotlib.mathtext.MathtextBackendPath.get_results(self,box)
matplotlib.mathtext.MathtextBackendPath.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendPath.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.math_to_image(s,filename_or_obj,prop=None,dpi=None,format=None,*,color=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/axis.py----------------------------------------
A:matplotlib.axis._log->logging.getLogger(__name__)
A:matplotlib.axis._line_inspector->matplotlib.artist.ArtistInspector(mlines.Line2D)
A:matplotlib.axis._line_param_names->matplotlib.artist.ArtistInspector(mlines.Line2D).get_setters()
A:matplotlib.axis.self.tick1line->matplotlib.lines.Line2D([], [], color=color, linestyle='none', zorder=zorder, visible=tick1On, markeredgecolor=color, markersize=size, markeredgewidth=width)
A:matplotlib.axis.self.tick2line->matplotlib.lines.Line2D([], [], color=color, linestyle='none', zorder=zorder, visible=tick2On, markeredgecolor=color, markersize=size, markeredgewidth=width)
A:matplotlib.axis.self.gridline->matplotlib.lines.Line2D([], [], color=grid_color, alpha=grid_alpha, visible=gridOn, linestyle=grid_linestyle, linewidth=grid_linewidth, marker='', **grid_kw)
A:matplotlib.axis.self.label1->matplotlib.text.Text(np.nan, np.nan, fontsize=labelsize, color=labelcolor, visible=label1On, rotation=self._labelrotation[1])
A:matplotlib.axis.self.label2->matplotlib.text.Text(np.nan, np.nan, fontsize=labelsize, color=labelcolor, visible=label2On, rotation=self._labelrotation[1])
A:matplotlib.axis.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.axis.self._size->kwargs.pop('size', self._size)
A:matplotlib.axis.self._width->kwargs.pop('width', self._width)
A:matplotlib.axis.self._base_pad->kwargs.pop('pad', self._base_pad)
A:matplotlib.axis.(trans, va, ha)->self._get_text2_transform()
A:matplotlib.axis.tick->self._get_tick(major=False)
A:matplotlib.axis.self.major->Ticker()
A:matplotlib.axis.self.minor->Ticker()
A:matplotlib.axis.self.callbacks->matplotlib.cbook.CallbackRegistry(signals=['units'])
A:matplotlib.axis.self.label->matplotlib.text.Text(np.nan, np.nan, fontsize=mpl.rcParams['axes.labelsize'], fontweight=mpl.rcParams['axes.labelweight'], color=mpl.rcParams['axes.labelcolor'])
A:matplotlib.axis.self.offsetText->matplotlib.text.Text(np.nan, np.nan)
A:matplotlib.axis.self._major_tick_kw->dict()
A:matplotlib.axis.self._minor_tick_kw->dict()
A:matplotlib.axis.majorTicks->_LazyTickList(major=True)
A:matplotlib.axis.minorTicks->_LazyTickList(major=False)
A:matplotlib.axis.self._remove_overlapping_locs->bool(val)
A:matplotlib.axis.remove_overlapping_locs->property(get_remove_overlapping_locs, set_remove_overlapping_locs, doc='If minor ticker locations that overlap with major ticker locations should be trimmed.')
A:matplotlib.axis.self._scale->matplotlib.scale.scale_factory(value, self, **kwargs)
A:matplotlib.axis.old_default_lims->self.get_major_locator().nonsingular(-np.inf, np.inf)
A:matplotlib.axis.new_default_lims->self.get_major_locator().nonsingular(-np.inf, np.inf)
A:matplotlib.axis.kwtrans->self._translate_tick_params(kwargs)
A:matplotlib.axis.c->kw_.pop('colors')
A:matplotlib.axis.(low, high)->self.get_view_interval()
A:matplotlib.axis.(a, b)->self.get_view_interval()
A:matplotlib.axis.v0->self.axes._validate_converted_limits(v0, self.convert_units)
A:matplotlib.axis.v1->self.axes._validate_converted_limits(v1, self.convert_units)
A:matplotlib.axis.(old0, old1)->self.get_view_interval()
A:matplotlib.axis.reverse->bool(v0 > v1)
A:matplotlib.axis.(v0, v1)->sorted([v0, v1], reverse=bool(reverse))
A:matplotlib.axis.ticks_to_draw->getattr(ax, f'{axis_name}axis')._update_ticks()
A:matplotlib.axis.(tlb1, tlb2)->self._get_ticklabel_bboxes(ticks_to_draw, renderer)
A:matplotlib.axis.bbox1->matplotlib.transforms.Bbox.from_extents(0, 0, 0, 0)
A:matplotlib.axis.bbox2->matplotlib.transforms.Bbox.from_extents(0, 0, 0, 0)
A:matplotlib.axis.major_locs->self.major.locator()
A:matplotlib.axis.major_labels->self.major.formatter.format_ticks(major_locs)
A:matplotlib.axis.major_ticks->self.get_major_ticks(len(major_locs))
A:matplotlib.axis.minor_locs->numpy.asarray(self.minor.locator())
A:matplotlib.axis.minor_labels->self.minor.formatter.format_ticks(minor_locs)
A:matplotlib.axis.minor_ticks->self.get_minor_ticks(len(minor_locs))
A:matplotlib.axis.(view_low, view_high)->self.get_view_interval()
A:matplotlib.axis.interval_t->self.get_transform().transform([view_low, view_high])
A:matplotlib.axis.loc_t->self.get_transform().transform(tick.get_loc())
A:matplotlib.axis.renderer->self.figure._get_renderer()
A:matplotlib.axis.bb->self.label.get_window_extent(renderer)
A:matplotlib.axis.ticks->self.convert_units(ticks)
A:matplotlib.axis.transform->self._scale.get_transform()
A:matplotlib.axis.tr_minor_locs->self._scale.get_transform().transform(minor_locs)
A:matplotlib.axis.tr_major_locs->self._scale.get_transform().transform(major_locs)
A:matplotlib.axis.(lo, hi)->sorted(transform.transform(self.get_view_interval()))
A:matplotlib.axis.mask->numpy.isclose(tr_minor_locs[:, None], tr_major_locs[None, :], atol=tol, rtol=0).any(axis=1)
A:matplotlib.axis.size->tick_kw.get('labelsize', mpl.rcParams[f'{axis_name}tick.labelsize'])
A:matplotlib.axis.numticks->len(self.get_minorticklocs())
A:matplotlib.axis.which->which.lower().lower()
A:matplotlib.axis.converter->matplotlib.units.registry.get_converter(data)
A:matplotlib.axis.default->self.converter.default_units(data, self)
A:matplotlib.axis.info->self.converter.axisinfo(self.units, self)
A:matplotlib.axis.self.converter->matplotlib.units.registry.get_converter(x)
A:matplotlib.axis.ret->self.converter.convert(x, self.units, self)
A:matplotlib.axis.formatter->matplotlib.ticker.FixedFormatter(labels)
A:matplotlib.axis.pickradius->property(get_pickradius, set_pickradius, doc='The acceptance radius for containment tests. See also `.Axis.contains`.')
A:matplotlib.axis.func->functools.partial(self._format_with_dict, tickd)
A:matplotlib.axis.locs->self.get_majorticklocs()
A:matplotlib.axis.tick_label->formatter(loc, pos)
A:matplotlib.axis.locator->matplotlib.ticker.FixedLocator(ticks)
A:matplotlib.axis.result->self._set_tick_locations(ticks, minor=minor)
A:matplotlib.axis.axis->getattr(ax, f'{axis_name}axis')
A:matplotlib.axis.(tlb, tlb2)->getattr(ax, f'{axis_name}axis')._get_ticklabel_bboxes(ticks_to_draw, renderer)
A:matplotlib.axis.tz->dateutil.tz.gettz(tz)
A:matplotlib.axis.(oldmin, oldmax)->getter(self)
A:matplotlib.axis.trans->self.axes.transAxes.inverted()
A:matplotlib.axis.(xaxes, yaxes)->self.axes.transAxes.inverted().transform((x, y))
A:matplotlib.axis.((l, b), (r, t))->self.axes.transAxes.transform([(0, 0), (1, 1)])
A:matplotlib.axis.(bboxes, bboxes2)->self._get_tick_boxes_siblings(renderer=renderer)
A:matplotlib.axis.(x, y)->self.offsetText.get_position()
A:matplotlib.axis.spinebbox->spine.get_window_extent()
A:matplotlib.axis.bbox->self.axes.spines['outline'].get_window_extent()
A:matplotlib.axis.(bbox, bbox2)->self.get_ticklabel_extents(renderer)
A:matplotlib.axis.pad_pixels->self.majorTicks[0].get_pad_pixels()
A:matplotlib.axis.(get_view_interval, set_view_interval)->_make_getset_interval('view', 'viewLim', 'intervaly')
A:matplotlib.axis.(get_data_interval, set_data_interval)->_make_getset_interval('data', 'dataLim', 'intervaly')
A:matplotlib.axis.(xmin, xmax)->self.convert_units(info.default_limits)
A:matplotlib.axis.ends->matplotlib.transforms.Bbox.unit().transformed(self.axes.transAxes - self.figure.dpi_scale_trans)
A:matplotlib.axis.(x, _)->self.offsetText.get_position()
A:matplotlib.axis.x->matplotlib._api.check_getitem({'left': 0, 'right': 1}, position=position)
A:matplotlib.axis.(ymin, ymax)->self.convert_units(info.default_limits)
matplotlib.axis.Axis(self,axes,pickradius=15)
matplotlib.axis.Axis.__init__(self,axes,pickradius=15)
matplotlib.axis.Axis.__str__(self)
matplotlib.axis.Axis._copy_tick_props(self,src,dest)
matplotlib.axis.Axis._format_with_dict(tickd,x,pos)
matplotlib.axis.Axis._get_autoscale_on(self)
matplotlib.axis.Axis._get_tick(self,major)
matplotlib.axis.Axis._get_tick_boxes_siblings(self,renderer)
matplotlib.axis.Axis._get_tick_label_size(self,axis_name)
matplotlib.axis.Axis._get_ticklabel_bboxes(self,ticks,renderer=None)
matplotlib.axis.Axis._get_ticks_position(self)
matplotlib.axis.Axis._reset_major_tick_kw(self)
matplotlib.axis.Axis._reset_minor_tick_kw(self)
matplotlib.axis.Axis._set_artist_props(self,a)
matplotlib.axis.Axis._set_autoscale_on(self,b)
matplotlib.axis.Axis._set_axes_scale(self,value,**kwargs)
matplotlib.axis.Axis._set_formatter(self,formatter,level)
matplotlib.axis.Axis._set_lim(self,v0,v1,*,emit=True,auto)
matplotlib.axis.Axis._set_scale(self,value,**kwargs)
matplotlib.axis.Axis._set_tick_locations(self,ticks,*,minor=False)
matplotlib.axis.Axis._translate_tick_params(kw,reverse=False)
matplotlib.axis.Axis._update_axisinfo(self)
matplotlib.axis.Axis._update_label_position(self,renderer)
matplotlib.axis.Axis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.Axis._update_ticks(self)
matplotlib.axis.Axis.axis_date(self,tz=None)
matplotlib.axis.Axis.clear(self)
matplotlib.axis.Axis.convert_units(self,x)
matplotlib.axis.Axis.draw(self,renderer,*args,**kwargs)
matplotlib.axis.Axis.get_children(self)
matplotlib.axis.Axis.get_data_interval(self)
matplotlib.axis.Axis.get_gridlines(self)
matplotlib.axis.Axis.get_inverted(self)
matplotlib.axis.Axis.get_label(self)
matplotlib.axis.Axis.get_label_position(self)
matplotlib.axis.Axis.get_label_text(self)
matplotlib.axis.Axis.get_major_formatter(self)
matplotlib.axis.Axis.get_major_locator(self)
matplotlib.axis.Axis.get_major_ticks(self,numticks=None)
matplotlib.axis.Axis.get_majorticklabels(self)
matplotlib.axis.Axis.get_majorticklines(self)
matplotlib.axis.Axis.get_majorticklocs(self)
matplotlib.axis.Axis.get_minor_formatter(self)
matplotlib.axis.Axis.get_minor_locator(self)
matplotlib.axis.Axis.get_minor_ticks(self,numticks=None)
matplotlib.axis.Axis.get_minorticklabels(self)
matplotlib.axis.Axis.get_minorticklines(self)
matplotlib.axis.Axis.get_minorticklocs(self)
matplotlib.axis.Axis.get_minpos(self)
matplotlib.axis.Axis.get_offset_text(self)
matplotlib.axis.Axis.get_pickradius(self)
matplotlib.axis.Axis.get_remove_overlapping_locs(self)
matplotlib.axis.Axis.get_scale(self)
matplotlib.axis.Axis.get_tick_padding(self)
matplotlib.axis.Axis.get_tick_params(self,which='major')
matplotlib.axis.Axis.get_tick_space(self)
matplotlib.axis.Axis.get_ticklabel_extents(self,renderer)
matplotlib.axis.Axis.get_ticklabels(self,minor=False,which=None)
matplotlib.axis.Axis.get_ticklines(self,minor=False)
matplotlib.axis.Axis.get_ticklocs(self,*,minor=False)
matplotlib.axis.Axis.get_ticks_direction(self,minor=False)
matplotlib.axis.Axis.get_tightbbox(self,renderer=None,*,for_layout_only=False)
matplotlib.axis.Axis.get_transform(self)
matplotlib.axis.Axis.get_units(self)
matplotlib.axis.Axis.get_view_interval(self)
matplotlib.axis.Axis.grid(self,visible=None,which='major',**kwargs)
matplotlib.axis.Axis.have_units(self)
matplotlib.axis.Axis.isDefault_majfmt(self)
matplotlib.axis.Axis.isDefault_majfmt(self,value)
matplotlib.axis.Axis.isDefault_majloc(self)
matplotlib.axis.Axis.isDefault_majloc(self,value)
matplotlib.axis.Axis.isDefault_minfmt(self)
matplotlib.axis.Axis.isDefault_minfmt(self,value)
matplotlib.axis.Axis.isDefault_minloc(self)
matplotlib.axis.Axis.isDefault_minloc(self,value)
matplotlib.axis.Axis.limit_range_for_scale(self,vmin,vmax)
matplotlib.axis.Axis.reset_ticks(self)
matplotlib.axis.Axis.set_clip_path(self,clippath,transform=None)
matplotlib.axis.Axis.set_data_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.Axis.set_default_intervals(self)
matplotlib.axis.Axis.set_inverted(self,inverted)
matplotlib.axis.Axis.set_label_coords(self,x,y,transform=None)
matplotlib.axis.Axis.set_label_position(self,position)
matplotlib.axis.Axis.set_label_text(self,label,fontdict=None,**kwargs)
matplotlib.axis.Axis.set_major_formatter(self,formatter)
matplotlib.axis.Axis.set_major_locator(self,locator)
matplotlib.axis.Axis.set_minor_formatter(self,formatter)
matplotlib.axis.Axis.set_minor_locator(self,locator)
matplotlib.axis.Axis.set_pickradius(self,pickradius)
matplotlib.axis.Axis.set_remove_overlapping_locs(self,val)
matplotlib.axis.Axis.set_tick_params(self,which='major',reset=False,**kwargs)
matplotlib.axis.Axis.set_ticklabels(self,labels,*,minor=False,fontdict=None,**kwargs)
matplotlib.axis.Axis.set_ticks(self,ticks,labels=None,*,minor=False,**kwargs)
matplotlib.axis.Axis.set_units(self,u)
matplotlib.axis.Axis.set_view_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.Axis.update_units(self,data)
matplotlib.axis.Tick(self,axes,loc,*,size=None,width=None,color=None,tickdir=None,pad=None,labelsize=None,labelcolor=None,zorder=None,gridOn=None,tick1On=True,tick2On=True,label1On=True,label2On=False,major=True,labelrotation=0,grid_color=None,grid_linestyle=None,grid_linewidth=None,grid_alpha=None,**kwargs)
matplotlib.axis.Tick.__init__(self,axes,loc,*,size=None,width=None,color=None,tickdir=None,pad=None,labelsize=None,labelcolor=None,zorder=None,gridOn=None,tick1On=True,tick2On=True,label1On=True,label2On=False,major=True,labelrotation=0,grid_color=None,grid_linestyle=None,grid_linewidth=None,grid_alpha=None,**kwargs)
matplotlib.axis.Tick._apply_params(self,**kwargs)
matplotlib.axis.Tick._apply_tickdir(self,tickdir)
matplotlib.axis.Tick._get_gridline(self)
matplotlib.axis.Tick._get_text1(self)
matplotlib.axis.Tick._get_text1_transform(self)
matplotlib.axis.Tick._get_text2(self)
matplotlib.axis.Tick._get_text2_transform(self)
matplotlib.axis.Tick._get_tick1line(self)
matplotlib.axis.Tick._get_tick2line(self)
matplotlib.axis.Tick._set_artist_props(self,a)
matplotlib.axis.Tick._set_labelrotation(self,labelrotation)
matplotlib.axis.Tick.contains(self,mouseevent)
matplotlib.axis.Tick.draw(self,renderer)
matplotlib.axis.Tick.get_children(self)
matplotlib.axis.Tick.get_loc(self)
matplotlib.axis.Tick.get_pad(self)
matplotlib.axis.Tick.get_pad_pixels(self)
matplotlib.axis.Tick.get_tick_padding(self)
matplotlib.axis.Tick.get_tickdir(self)
matplotlib.axis.Tick.get_view_interval(self)
matplotlib.axis.Tick.label(self)
matplotlib.axis.Tick.set_clip_path(self,clippath,transform=None)
matplotlib.axis.Tick.set_label1(self,s)
matplotlib.axis.Tick.set_label2(self,s)
matplotlib.axis.Tick.set_pad(self,val)
matplotlib.axis.Tick.set_url(self,url)
matplotlib.axis.Tick.update_position(self,loc)
matplotlib.axis.Ticker(self)
matplotlib.axis.Ticker.__init__(self)
matplotlib.axis.Ticker.formatter(self)
matplotlib.axis.Ticker.formatter(self,formatter)
matplotlib.axis.Ticker.locator(self)
matplotlib.axis.Ticker.locator(self,locator)
matplotlib.axis.XAxis(self,*args,**kwargs)
matplotlib.axis.XAxis.__init__(self,*args,**kwargs)
matplotlib.axis.XAxis._init(self)
matplotlib.axis.XAxis._update_label_position(self,renderer)
matplotlib.axis.XAxis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.XAxis.contains(self,mouseevent)
matplotlib.axis.XAxis.get_minpos(self)
matplotlib.axis.XAxis.get_text_heights(self,renderer)
matplotlib.axis.XAxis.get_tick_space(self)
matplotlib.axis.XAxis.get_ticks_position(self)
matplotlib.axis.XAxis.set_default_intervals(self)
matplotlib.axis.XAxis.set_label_position(self,position)
matplotlib.axis.XAxis.set_ticks_position(self,position)
matplotlib.axis.XAxis.tick_bottom(self)
matplotlib.axis.XAxis.tick_top(self)
matplotlib.axis.XTick(self,*args,**kwargs)
matplotlib.axis.XTick.__init__(self,*args,**kwargs)
matplotlib.axis.XTick._apply_tickdir(self,tickdir)
matplotlib.axis.XTick._get_text1_transform(self)
matplotlib.axis.XTick._get_text2_transform(self)
matplotlib.axis.XTick.get_view_interval(self)
matplotlib.axis.XTick.update_position(self,loc)
matplotlib.axis.YAxis(self,*args,**kwargs)
matplotlib.axis.YAxis.__init__(self,*args,**kwargs)
matplotlib.axis.YAxis._init(self)
matplotlib.axis.YAxis._update_label_position(self,renderer)
matplotlib.axis.YAxis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.YAxis.contains(self,mouseevent)
matplotlib.axis.YAxis.get_minpos(self)
matplotlib.axis.YAxis.get_text_widths(self,renderer)
matplotlib.axis.YAxis.get_tick_space(self)
matplotlib.axis.YAxis.get_ticks_position(self)
matplotlib.axis.YAxis.set_default_intervals(self)
matplotlib.axis.YAxis.set_label_position(self,position)
matplotlib.axis.YAxis.set_offset_position(self,position)
matplotlib.axis.YAxis.set_ticks_position(self,position)
matplotlib.axis.YAxis.tick_left(self)
matplotlib.axis.YAxis.tick_right(self)
matplotlib.axis.YTick(self,*args,**kwargs)
matplotlib.axis.YTick.__init__(self,*args,**kwargs)
matplotlib.axis.YTick._apply_tickdir(self,tickdir)
matplotlib.axis.YTick._get_text1_transform(self)
matplotlib.axis.YTick._get_text2_transform(self)
matplotlib.axis.YTick.get_view_interval(self)
matplotlib.axis.YTick.update_position(self,loc)
matplotlib.axis._LazyTickList(self,major)
matplotlib.axis._LazyTickList.__get__(self,instance,cls)
matplotlib.axis._LazyTickList.__init__(self,major)
matplotlib.axis._make_getset_interval(method_name,lim_name,attr_name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/units.py----------------------------------------
A:matplotlib.units.x->numpy.ma.getdata(x).ravel()
A:matplotlib.units.first->matplotlib.cbook._safe_first_finite(x)
A:matplotlib.units.registry->Registry()
A:matplotlib.units.registry[Decimal]->DecimalConverter()
matplotlib.units.AxisInfo(self,majloc=None,minloc=None,majfmt=None,minfmt=None,label=None,default_limits=None)
matplotlib.units.AxisInfo.__init__(self,majloc=None,minloc=None,majfmt=None,minfmt=None,label=None,default_limits=None)
matplotlib.units.ConversionError(TypeError)
matplotlib.units.ConversionInterface
matplotlib.units.ConversionInterface.axisinfo(unit,axis)
matplotlib.units.ConversionInterface.convert(obj,unit,axis)
matplotlib.units.ConversionInterface.default_units(x,axis)
matplotlib.units.DecimalConverter(ConversionInterface)
matplotlib.units.DecimalConverter.convert(value,unit,axis)
matplotlib.units.Registry(dict)
matplotlib.units.Registry.get_converter(self,x)
matplotlib.units._is_natively_supported(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/colors.py----------------------------------------
A:matplotlib.colors._colors_full_map->_ColorMapping(_colors_full_map)
A:matplotlib.colors.color_list->list(color_list)
A:matplotlib.colors._color_sequences->ColorSequenceRegistry()
A:matplotlib.colors.ret->int(ret[0])
A:matplotlib.colors.c1->to_rgba_array(c1)
A:matplotlib.colors.c2->to_rgba_array(c2)
A:matplotlib.colors.n1->max(c1.shape[0], 1)
A:matplotlib.colors.n2->max(c2.shape[0], 1)
A:matplotlib.colors.colors->self(np.linspace(0, 1, lutsize))
A:matplotlib.colors.rgba->tuple(rgba)
A:matplotlib.colors.match->re.match('\\A#[a-fA-F0-9]{4}\\Z', c)
A:matplotlib.colors.c->to_rgba(c)
A:matplotlib.colors.alpha->numpy.clip(alpha, 0, 1)
A:matplotlib.colors.result->numpy.ma.array(resdat, mask=result.mask, copy=False)
A:matplotlib.colors.hexColorPattern->re.compile('\\A#[a-fA-F0-9]{6}\\Z')
A:matplotlib.colors.to_rgb->staticmethod(to_rgb)
A:matplotlib.colors.to_rgba->staticmethod(to_rgba)
A:matplotlib.colors.to_rgba_array->staticmethod(to_rgba_array)
A:matplotlib.colors.colorConverter->ColorConverter()
A:matplotlib.colors.lut->(lut * 255).astype(np.uint8)
A:matplotlib.colors.adata->numpy.array(data)
A:matplotlib.colors.self.N->len(self.boundaries)
A:matplotlib.colors.xa->xa.astype(int).astype(int)
A:matplotlib.colors.mask_bad->numpy.isnan(xa)
A:matplotlib.colors.cmapobject->type(self).__new__(cls)
A:matplotlib.colors.cmapobject._lut->numpy.copy(self._lut)
A:matplotlib.colors.self._rgba_bad->to_rgba(color, alpha)
A:matplotlib.colors.self._rgba_under->to_rgba(color, alpha)
A:matplotlib.colors.self._rgba_over->to_rgba(color, alpha)
A:matplotlib.colors.new_cm->self.copy()
A:matplotlib.colors.X->numpy.tile(np.linspace(0, 1, _REPR_PNG_SIZE[0]), (_REPR_PNG_SIZE[1], 1))
A:matplotlib.colors.pixels->self(X, bytes=True)
A:matplotlib.colors.png_bytes->self._repr_png_()
A:matplotlib.colors.pnginfo->PngInfo()
A:matplotlib.colors.png_base64->base64.b64encode(png_bytes).decode('ascii')
A:matplotlib.colors.hex_color->to_hex(color, keep_alpha=True)
A:matplotlib.colors.self._lut->numpy.zeros((self.N + 3, 4), float)
A:matplotlib.colors.self._lut[:-3, 0]->_create_lookup_table(self.N, self._segmentdata['red'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 1]->_create_lookup_table(self.N, self._segmentdata['green'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 2]->_create_lookup_table(self.N, self._segmentdata['blue'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 3]->_create_lookup_table(self.N, self._segmentdata['alpha'], 1)
A:matplotlib.colors.(vals, colors)->zip(*colors)
A:matplotlib.colors.vals->numpy.linspace(0, 1, len(colors))
A:matplotlib.colors.new_cmap->ListedColormap(colors_r, name=name, N=self.N)
A:matplotlib.colors.N->len(colors)
A:matplotlib.colors.self.colors->list(itertools.islice(itertools.cycle(colors), N))
A:matplotlib.colors.gray->float(colors)
A:matplotlib.colors.self._lut[:-3]->to_rgba_array(self.colors)
A:matplotlib.colors.colors_r->list(reversed(self.colors))
A:matplotlib.colors.self._vmin->_sanitize_extrema(vmin)
A:matplotlib.colors.self._vmax->_sanitize_extrema(vmax)
A:matplotlib.colors.self.callbacks->matplotlib.cbook.CallbackRegistry(signals=['changed'])
A:matplotlib.colors.value->self._trf.inverted().transform(rescaled).reshape(np.shape(value))
A:matplotlib.colors.dtype->numpy.promote_types(dtype, np.float32)
A:matplotlib.colors.mask->numpy.ma.getmaskarray(xx)
A:matplotlib.colors.data->numpy.asarray(value)
A:matplotlib.colors.(result, is_scalar)->self.process_value(value)
A:matplotlib.colors.((vmin,), _)->self.process_value(self.vmin)
A:matplotlib.colors.((vmax,), _)->self.process_value(self.vmax)
A:matplotlib.colors.val->numpy.ma.asarray(value)
A:matplotlib.colors.A->numpy.asanyarray(A)
A:matplotlib.colors.self.vmin->numpy.asanyarray(A).min()
A:matplotlib.colors.self.vmax->numpy.asanyarray(A).max()
A:matplotlib.colors.((vcenter,), _)->self.process_value(self.vcenter)
A:matplotlib.colors.self.halfrange->max(self._vcenter - A.min(), A.max() - self._vcenter)
A:matplotlib.colors.scale_kwargs_items->tuple(scale_cls.keywords.items())
A:matplotlib.colors.cls->type(self)
A:matplotlib.colors.ba->bound_init_signature.bind(*args, **kwargs)
A:matplotlib.colors.self._scale->functools.partial(scale_cls, *scale_args, **dict(scale_kwargs_items))(axis=None, **ba.arguments)
A:matplotlib.colors.self._trf->self._scale.get_transform()
A:matplotlib.colors.__init__.__signature__->bound_init_signature.replace(parameters=[inspect.Parameter('self', inspect.Parameter.POSITIONAL_OR_KEYWORD), *bound_init_signature.parameters.values()])
A:matplotlib.colors.(value, is_scalar)->self.process_value(value)
A:matplotlib.colors.t_value->numpy.ma.masked_invalid(t_value, copy=False)
A:matplotlib.colors.(t_vmin, t_vmax)->self._trf.transform([self.vmin, self.vmax])
A:matplotlib.colors.in_trf_domain->numpy.extract(np.isfinite(self._trf.transform(A)), A)
A:matplotlib.colors.LogNorm->make_norm_from_scale(functools.partial(scale.LogScale, nonpositive='mask'))(Normalize)
A:matplotlib.colors.self.boundaries->numpy.asarray(boundaries)
A:matplotlib.colors.(xx, is_scalar)->self.process_value(value)
A:matplotlib.colors.xx->numpy.atleast_1d(xx.filled(self.vmax + 1))
A:matplotlib.colors.iret->iret.astype(np.int16).astype(np.int16)
A:matplotlib.colors.arr->numpy.array(arr, copy=False, dtype=np.promote_types(arr.dtype, np.float32), ndmin=2)
A:matplotlib.colors.out->numpy.zeros_like(arr)
A:matplotlib.colors.arr_max->numpy.array(arr, copy=False, dtype=np.promote_types(arr.dtype, np.float32), ndmin=2).max(-1)
A:matplotlib.colors.delta->numpy.array(arr, copy=False, dtype=np.promote_types(arr.dtype, np.float32), ndmin=2).ptp(-1)
A:matplotlib.colors.s->numpy.zeros_like(delta)
A:matplotlib.colors.hsv->rgb_to_hsv(rgb[:, :, 0:3])
A:matplotlib.colors.r->numpy.empty_like(h)
A:matplotlib.colors.g->numpy.empty_like(h)
A:matplotlib.colors.b->numpy.empty_like(h)
A:matplotlib.colors.i->(h * 6.0).astype(int)
A:matplotlib.colors.rgb->numpy.stack([r, g, b], axis=-1)
A:matplotlib.colors.az->numpy.radians(90 - self.azdeg)
A:matplotlib.colors.alt->numpy.radians(self.altdeg)
A:matplotlib.colors.(e_dy, e_dx)->numpy.gradient(vert_exag * elevation, dy, dx)
A:matplotlib.colors.normal->numpy.empty(elevation.shape + (3,)).view(type(elevation))
A:matplotlib.colors.intensity->self.hillshade(elevation, vert_exag, dx, dy, fraction)
A:matplotlib.colors.vmin->numpy.asarray(value).min()
A:matplotlib.colors.vmax->numpy.asarray(value).max()
A:matplotlib.colors.norm->BoundaryNorm(levels, ncolors=n_data_colors)
A:matplotlib.colors.rgb0->cmap(norm(data))
A:matplotlib.colors.rgb1->self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode, vert_exag=vert_exag, dx=dx, dy=dy, fraction=fraction, **kwargs)
A:matplotlib.colors.blend->blend_mode(rgb, intensity, **kwargs)
A:matplotlib.colors.(hue, sat, val)->numpy.moveaxis(hsv, -1, 0)
A:matplotlib.colors.cmap->ListedColormap(colors[color_slice], N=n_data_colors)
matplotlib.colors.AsinhNorm(Normalize)
matplotlib.colors.AsinhNorm.linear_width(self)
matplotlib.colors.AsinhNorm.linear_width(self,value)
matplotlib.colors.BoundaryNorm(self,boundaries,ncolors,clip=False,*,extend='neither')
matplotlib.colors.BoundaryNorm.__init__(self,boundaries,ncolors,clip=False,*,extend='neither')
matplotlib.colors.BoundaryNorm.inverse(self,value)
matplotlib.colors.CenteredNorm(self,vcenter=0,halfrange=None,clip=False)
matplotlib.colors.CenteredNorm.__init__(self,vcenter=0,halfrange=None,clip=False)
matplotlib.colors.CenteredNorm.autoscale(self,A)
matplotlib.colors.CenteredNorm.autoscale_None(self,A)
matplotlib.colors.CenteredNorm.halfrange(self)
matplotlib.colors.CenteredNorm.halfrange(self,halfrange)
matplotlib.colors.CenteredNorm.vcenter(self)
matplotlib.colors.CenteredNorm.vcenter(self,vcenter)
matplotlib.colors.CenteredNorm.vmax(self)
matplotlib.colors.CenteredNorm.vmax(self,value)
matplotlib.colors.CenteredNorm.vmin(self)
matplotlib.colors.CenteredNorm.vmin(self,value)
matplotlib.colors.ColorConverter
matplotlib.colors.ColorSequenceRegistry(self)
matplotlib.colors.ColorSequenceRegistry.__getitem__(self,item)
matplotlib.colors.ColorSequenceRegistry.__init__(self)
matplotlib.colors.ColorSequenceRegistry.__iter__(self)
matplotlib.colors.ColorSequenceRegistry.__len__(self)
matplotlib.colors.ColorSequenceRegistry.__str__(self)
matplotlib.colors.ColorSequenceRegistry.register(self,name,color_list)
matplotlib.colors.ColorSequenceRegistry.unregister(self,name)
matplotlib.colors.Colormap(self,name,N=256)
matplotlib.colors.Colormap.__copy__(self)
matplotlib.colors.Colormap.__eq__(self,other)
matplotlib.colors.Colormap.__init__(self,name,N=256)
matplotlib.colors.Colormap._init(self)
matplotlib.colors.Colormap._repr_html_(self)
matplotlib.colors.Colormap._repr_png_(self)
matplotlib.colors.Colormap._set_extremes(self)
matplotlib.colors.Colormap.copy(self)
matplotlib.colors.Colormap.get_bad(self)
matplotlib.colors.Colormap.get_over(self)
matplotlib.colors.Colormap.get_under(self)
matplotlib.colors.Colormap.is_gray(self)
matplotlib.colors.Colormap.resampled(self,lutsize)
matplotlib.colors.Colormap.reversed(self,name=None)
matplotlib.colors.Colormap.set_bad(self,color='k',alpha=None)
matplotlib.colors.Colormap.set_extremes(self,*,bad=None,under=None,over=None)
matplotlib.colors.Colormap.set_over(self,color='k',alpha=None)
matplotlib.colors.Colormap.set_under(self,color='k',alpha=None)
matplotlib.colors.Colormap.with_extremes(self,*,bad=None,under=None,over=None)
matplotlib.colors.FuncNorm(Normalize)
matplotlib.colors.LightSource(self,azdeg=315,altdeg=45,hsv_min_val=0,hsv_max_val=1,hsv_min_sat=1,hsv_max_sat=0)
matplotlib.colors.LightSource.__init__(self,azdeg=315,altdeg=45,hsv_min_val=0,hsv_max_val=1,hsv_min_sat=1,hsv_max_sat=0)
matplotlib.colors.LightSource.blend_hsv(self,rgb,intensity,hsv_max_sat=None,hsv_max_val=None,hsv_min_val=None,hsv_min_sat=None)
matplotlib.colors.LightSource.blend_overlay(self,rgb,intensity)
matplotlib.colors.LightSource.blend_soft_light(self,rgb,intensity)
matplotlib.colors.LightSource.direction(self)
matplotlib.colors.LightSource.hillshade(self,elevation,vert_exag=1,dx=1,dy=1,fraction=1.0)
matplotlib.colors.LightSource.shade(self,data,cmap,norm=None,blend_mode='overlay',vmin=None,vmax=None,vert_exag=1,dx=1,dy=1,fraction=1,**kwargs)
matplotlib.colors.LightSource.shade_normals(self,normals,fraction=1.0)
matplotlib.colors.LightSource.shade_rgb(self,rgb,elevation,fraction=1.0,blend_mode='hsv',vert_exag=1,dx=1,dy=1,**kwargs)
matplotlib.colors.LinearSegmentedColormap(self,name,segmentdata,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap.__init__(self,name,segmentdata,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap._init(self)
matplotlib.colors.LinearSegmentedColormap._reverser(func,x)
matplotlib.colors.LinearSegmentedColormap.from_list(name,colors,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap.resampled(self,lutsize)
matplotlib.colors.LinearSegmentedColormap.reversed(self,name=None)
matplotlib.colors.LinearSegmentedColormap.set_gamma(self,gamma)
matplotlib.colors.ListedColormap(self,colors,name='from_list',N=None)
matplotlib.colors.ListedColormap.__init__(self,colors,name='from_list',N=None)
matplotlib.colors.ListedColormap._init(self)
matplotlib.colors.ListedColormap.resampled(self,lutsize)
matplotlib.colors.ListedColormap.reversed(self,name=None)
matplotlib.colors.NoNorm(self,value,clip=None)
matplotlib.colors.NoNorm.__call__(self,value,clip=None)
matplotlib.colors.NoNorm.inverse(self,value)
matplotlib.colors.Normalize(self,vmin=None,vmax=None,clip=False)
matplotlib.colors.Normalize.__init__(self,vmin=None,vmax=None,clip=False)
matplotlib.colors.Normalize._changed(self)
matplotlib.colors.Normalize.autoscale(self,A)
matplotlib.colors.Normalize.autoscale_None(self,A)
matplotlib.colors.Normalize.clip(self)
matplotlib.colors.Normalize.clip(self,value)
matplotlib.colors.Normalize.inverse(self,value)
matplotlib.colors.Normalize.process_value(value)
matplotlib.colors.Normalize.scaled(self)
matplotlib.colors.Normalize.vmax(self)
matplotlib.colors.Normalize.vmax(self,value)
matplotlib.colors.Normalize.vmin(self)
matplotlib.colors.Normalize.vmin(self,value)
matplotlib.colors.PowerNorm(self,gamma,vmin=None,vmax=None,clip=False)
matplotlib.colors.PowerNorm.__init__(self,gamma,vmin=None,vmax=None,clip=False)
matplotlib.colors.PowerNorm.inverse(self,value)
matplotlib.colors.SymLogNorm(Normalize)
matplotlib.colors.SymLogNorm.linthresh(self)
matplotlib.colors.SymLogNorm.linthresh(self,value)
matplotlib.colors.TwoSlopeNorm(self,vcenter,vmin=None,vmax=None)
matplotlib.colors.TwoSlopeNorm.__init__(self,vcenter,vmin=None,vmax=None)
matplotlib.colors.TwoSlopeNorm.autoscale_None(self,A)
matplotlib.colors.TwoSlopeNorm.inverse(self,value)
matplotlib.colors.TwoSlopeNorm.vcenter(self)
matplotlib.colors.TwoSlopeNorm.vcenter(self,value)
matplotlib.colors._ColorMapping(self,mapping)
matplotlib.colors._ColorMapping.__delitem__(self,key)
matplotlib.colors._ColorMapping.__init__(self,mapping)
matplotlib.colors._ColorMapping.__setitem__(self,key,value)
matplotlib.colors._check_color_like(**kwargs)
matplotlib.colors._create_empty_object_of_class(cls)
matplotlib.colors._create_lookup_table(N,data,gamma=1.0)
matplotlib.colors._has_alpha_channel(c)
matplotlib.colors._is_nth_color(c)
matplotlib.colors._make_norm_from_scale(scale_cls,scale_args,scale_kwargs_items,base_norm_cls,bound_init_signature)
matplotlib.colors._picklable_norm_constructor(*args)
matplotlib.colors._sanitize_extrema(ex)
matplotlib.colors._to_rgba_no_colorcycle(c,alpha=None)
matplotlib.colors._vector_magnitude(arr)
matplotlib.colors.from_levels_and_colors(levels,colors,extend='neither')
matplotlib.colors.get_named_colors_mapping()
matplotlib.colors.hsv_to_rgb(hsv)
matplotlib.colors.is_color_like(c)
matplotlib.colors.make_norm_from_scale(scale_cls,base_norm_cls=None,*,init=None)
matplotlib.colors.rgb_to_hsv(arr)
matplotlib.colors.same_color(c1,c2)
matplotlib.colors.to_hex(c,keep_alpha=False)
matplotlib.colors.to_rgb(c)
matplotlib.colors.to_rgba(c,alpha=None)
matplotlib.colors.to_rgba_array(c,alpha=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_mathtext.py----------------------------------------
A:matplotlib._mathtext._log->logging.getLogger('matplotlib.mathtext')
A:matplotlib._mathtext.VectorParse->namedtuple('VectorParse', 'width height depth glyphs rects', module='matplotlib.mathtext')
A:matplotlib._mathtext.RasterParse->namedtuple('RasterParse', 'ox oy width height depth image', module='matplotlib.mathtext')
A:matplotlib._mathtext.(w, h, d)->map(np.ceil, [self.box.width, self.box.height, self.box.depth])
A:matplotlib._mathtext.image->FT2Image(np.ceil(w), np.ceil(h + max(d, 0)))
A:matplotlib._mathtext.shifted->ship(self.box, (-xmin, -ymin))
A:matplotlib._mathtext.height->max((x.height for x in middle))
A:matplotlib._mathtext.y->Hlist([Kern(subkern), sub])
A:matplotlib._mathtext.info->self._get_info(font, font_class, sym, fontsize, dpi)
A:matplotlib._mathtext.self._get_info->functools.lru_cache(None)(self._get_info)
A:matplotlib._mathtext.filename->findfont(self.default_font_prop)
A:matplotlib._mathtext.default_font->get_font(filename)
A:matplotlib._mathtext.cached_font->get_font(basename)
A:matplotlib._mathtext.(font, num, slanted)->self._get_glyph(fontname, font_class, sym)
A:matplotlib._mathtext.glyph->self._get_font('ex').load_char(num, flags=self.load_glyph_flags)
A:matplotlib._mathtext.offset->self._get_offset(font, glyph, fontsize, dpi)
A:matplotlib._mathtext.metrics->self.get_state().fontset.get_metrics(state.font, mpl.rcParams['mathtext.default'], '=', state.fontsize, state.dpi)
A:matplotlib._mathtext.font->self._get_font('ex')
A:matplotlib._mathtext.pclt->self._get_font('ex').get_sfnt_table('pclt')
A:matplotlib._mathtext.info1->self._get_info(font1, fontclass1, sym1, fontsize1, dpi)
A:matplotlib._mathtext.info2->self._get_info(font2, fontclass2, sym2, fontsize2, dpi)
A:matplotlib._mathtext.self._stix_fallback->StixFonts(*args, **kwargs)
A:matplotlib._mathtext.fullpath->findfont(name)
A:matplotlib._mathtext._slanted_symbols->set('\\int \\oint'.split())
A:matplotlib._mathtext.num->ord(sym)
A:matplotlib._mathtext.font_cls->{'stix': StixFonts, 'stixsans': StixSansFonts, 'cm': BakomaFonts}.get(fallback_rc)
A:matplotlib._mathtext.prop->FontProperties('cmex10')
A:matplotlib._mathtext.uniindex->get_unicode_index(sym)
A:matplotlib._mathtext.(fontname, uniindex)->self._map_virtual_font(fontname, font_class, uniindex)
A:matplotlib._mathtext.char->Char(c, self.get_state())
A:matplotlib._mathtext.glyphindex->self._get_font('ex').get_char_index(uniindex)
A:matplotlib._mathtext.g->self._fallback_font._get_glyph(fontname, font_class, sym)
A:matplotlib._mathtext.self._fallback_font->StixSansFonts(*args, **kwargs)
A:matplotlib._mathtext.self.bakoma->BakomaFonts(*args, **kwargs)
A:matplotlib._mathtext.mapping->_mathtext_data.stix_virtual_fonts.get(fontname)
A:matplotlib._mathtext.hi->len(mapping)
A:matplotlib._mathtext.sym->fixes.get(sym, sym)
A:matplotlib._mathtext.constants->_get_font_constant_set(state)
A:matplotlib._mathtext.metricsself._metrics->self.fontset.get_metrics(self.font, self.font_class, self.c, self.fontsize, self.dpi)
A:matplotlib._mathtext.kern->Kern(kerning_distance)
A:matplotlib._mathtext.self.glue_ordero->next((i for i in range(len(totals))[::-1] if totals[i] != 0), 0)
A:matplotlib._mathtext.num_children->len(self.children)
A:matplotlib._mathtext.kerning_distance->elem.get_kerning(next)
A:matplotlib._mathtext.h->max(h, p.height - s)
A:matplotlib._mathtext.d->max(d, p.depth + s)
A:matplotlib._mathtext.s->toks[0].replace('\\$', '$')
A:matplotlib._mathtext.w->max(w, p.width + s)
A:matplotlib._mathtext.thickness->self.get_state().get_current_underline_thickness()
A:matplotlib._mathtext._GlueSpec->namedtuple('_GlueSpec', 'width stretch stretch_order shrink shrink_order')
A:matplotlib._mathtext.self.glue_spec->self._fallback_font._get_glyph(fontname, font_class, sym)._replace(width=g.width * SHRINK_FACTOR)
A:matplotlib._mathtext.alternatives->self.get_state().fontset.get_sized_alternatives_for_symbol(state.font, c)
A:matplotlib._mathtext.xHeight->self.get_state().fontset.get_xheight(state.font, state.fontsize, state.dpi)
A:matplotlib._mathtext.state->self.get_state()
A:matplotlib._mathtext.output->Output(box)
A:matplotlib._mathtext.cur_g->round(clamp(box.glue_set * cur_glue))
A:matplotlib._mathtext._binary_operators->set('+ * - −\n      \\pm             \\sqcap                   \\rhd\n      \\mp             \\sqcup                   \\unlhd\n      \\times          \\vee                     \\unrhd\n      \\div            \\wedge                   \\oplus\n      \\ast            \\setminus                \\ominus\n      \\star           \\wr                      \\otimes\n      \\circ           \\diamond                 \\oslash\n      \\bullet         \\bigtriangleup           \\odot\n      \\cdot           \\bigtriangledown         \\bigcirc\n      \\cap            \\triangleleft            \\dagger\n      \\cup            \\triangleright           \\ddagger\n      \\uplus          \\lhd                     \\amalg\n      \\dotplus        \\dotminus'.split())
A:matplotlib._mathtext._relation_symbols->set('\n      = < > :\n      \\leq        \\geq        \\equiv   \\models\n      \\prec       \\succ       \\sim     \\perp\n      \\preceq     \\succeq     \\simeq   \\mid\n      \\ll         \\gg         \\asymp   \\parallel\n      \\subset     \\supset     \\approx  \\bowtie\n      \\subseteq   \\supseteq   \\cong    \\Join\n      \\sqsubset   \\sqsupset   \\neq     \\smile\n      \\sqsubseteq \\sqsupseteq \\doteq   \\frown\n      \\in         \\ni         \\propto  \\vdash\n      \\dashv      \\dots       \\doteqdot'.split())
A:matplotlib._mathtext._arrow_symbols->set('\n      \\leftarrow              \\longleftarrow           \\uparrow\n      \\Leftarrow              \\Longleftarrow           \\Uparrow\n      \\rightarrow             \\longrightarrow          \\downarrow\n      \\Rightarrow             \\Longrightarrow          \\Downarrow\n      \\leftrightarrow         \\longleftrightarrow      \\updownarrow\n      \\Leftrightarrow         \\Longleftrightarrow      \\Updownarrow\n      \\mapsto                 \\longmapsto              \\nearrow\n      \\hookleftarrow          \\hookrightarrow          \\searrow\n      \\leftharpoonup          \\rightharpoonup          \\swarrow\n      \\leftharpoondown        \\rightharpoondown        \\nwarrow\n      \\rightleftharpoons      \\leadsto'.split())
A:matplotlib._mathtext._punctuation_symbols->set(', ; . ! \\ldotp \\cdotp'.split())
A:matplotlib._mathtext._overunder_symbols->set('\n       \\sum \\prod \\coprod \\bigcap \\bigcup \\bigsqcup \\bigvee\n       \\bigwedge \\bigodot \\bigotimes \\bigoplus \\biguplus\n       '.split())
A:matplotlib._mathtext._overunder_functions->set('lim liminf limsup sup max min'.split())
A:matplotlib._mathtext._dropsub_symbols->set('\\int \\oint'.split())
A:matplotlib._mathtext._fontnames->set('rm cal it tt sf bf default bb frak scr regular'.split())
A:matplotlib._mathtext._function_names->set('\n      arccos csc ker min arcsin deg lg Pr arctan det lim sec arg dim\n      liminf sin cos exp limsup sinh cosh gcd ln sup cot hom log tan\n      coth inf max tanh'.split())
A:matplotlib._mathtext._ambi_delims->set('\n      | \\| / \\backslash \\uparrow \\downarrow \\updownarrow \\Uparrow\n      \\Downarrow \\Updownarrow . \\vert \\Vert'.split())
A:matplotlib._mathtext._left_delims->set('( [ \\{ < \\lfloor \\langle \\lceil'.split())
A:matplotlib._mathtext._right_delims->set(') ] \\} > \\rfloor \\rangle \\rceil'.split())
A:matplotlib._mathtext.p->types.SimpleNamespace()
A:matplotlib._mathtext.p.float_literal->Regex('[-+]?([0-9]+\\.?[0-9]*|\\.[0-9]+)')
A:matplotlib._mathtext.p.space->oneOf(self._space_widths)('space')
A:matplotlib._mathtext.p.style_literal->oneOf([str(e.value) for e in self._MathStyle])('style_literal')
A:matplotlib._mathtext.p.symbol->Regex("[a-zA-Z0-9 +\\-*/<>=:,.;!\\?&'@()\\[\\]|\\U00000080-\\U0001ffff]|\\\\[%${}\\[\\]_|]" + '|\\\\(?:{})(?![A-Za-z])'.format('|'.join(map(re.escape, tex2uni))))('sym').leaveWhitespace()
A:matplotlib._mathtext.p.unknown_symbol->Regex('\\\\[A-Za-z]*')('name')
A:matplotlib._mathtext.p.font->csnames('font', self._fontnames)
A:matplotlib._mathtext.p.end_group->Literal('}')
A:matplotlib._mathtext.p.delim->oneOf(self._delims)
A:matplotlib._mathtext.p.accent->Forward()
A:matplotlib._mathtext.p.auto_delim->Forward()
A:matplotlib._mathtext.p.binom->Forward()
A:matplotlib._mathtext.p.customspace->Forward()
A:matplotlib._mathtext.p.frac->Forward()
A:matplotlib._mathtext.p.dfrac->Forward()
A:matplotlib._mathtext.p.function->Forward()
A:matplotlib._mathtext.p.genfrac->Forward()
A:matplotlib._mathtext.p.group->Forward()
A:matplotlib._mathtext.p.operatorname->Forward()
A:matplotlib._mathtext.p.overline->Forward()
A:matplotlib._mathtext.p.overset->Forward()
A:matplotlib._mathtext.p.placeable->Forward()
A:matplotlib._mathtext.p.required_group->Forward()
A:matplotlib._mathtext.p.simple->Forward()
A:matplotlib._mathtext.p.optional_group->Forward()
A:matplotlib._mathtext.p.sqrt->Forward()
A:matplotlib._mathtext.p.subsuper->Forward()
A:matplotlib._mathtext.p.token->Forward()
A:matplotlib._mathtext.p.underset->Forward()
A:matplotlib._mathtext.p.math->OneOrMore(p.token)
A:matplotlib._mathtext.p.math_string->QuotedString('$', '\\', unquoteResults=False)
A:matplotlib._mathtext.p.non_math->Regex('(?:(?:\\\\[$])|[^$])*').leaveWhitespace()
A:matplotlib._mathtext.result->Hlist(spaced_nucleus)
A:matplotlib._mathtext.hlist->Hlist(parts)
A:matplotlib._mathtext.float_literal->staticmethod(pyparsing_common.convertToFloat)
A:matplotlib._mathtext.width->max(cannotation.width, cbody.width)
A:matplotlib._mathtext.box->self._make_space(num)
A:matplotlib._mathtext.prev_char->next((c for c in s[:loc][::-1] if c != ' '), '')
A:matplotlib._mathtext.next_char->next((c for c in s[next_char_loc:] if c != ' '), '')
A:matplotlib._mathtext._wide_accents->set('widehat widetilde widebar'.split())
A:matplotlib._mathtext.accent_box->Accent(self._accent_map[accent], state)
A:matplotlib._mathtext.centered->HCentered([Hbox(sym.width / 4.0), accent_box])
A:matplotlib._mathtext.self.get_state().font->toks.get('font')
A:matplotlib._mathtext.grp->Hlist(toks.get('group', []))
A:matplotlib._mathtext.nucleus->Hlist([nucleus])
A:matplotlib._mathtext.subsuper->toks.get('subsuper', [])
A:matplotlib._mathtext.napostrophes->len(toks.get('apostrophes', []))
A:matplotlib._mathtext.rule_thickness->self.get_state().fontset.get_underline_thickness(state.font, state.fontsize, state.dpi)
A:matplotlib._mathtext.super->Hlist([])
A:matplotlib._mathtext.vlist->Vlist([cannotation, Vbox(0, vgap), cbody])
A:matplotlib._mathtext.x->Vlist([x, Kern(shift_up - x.depth - (y.height - shift_down)), y])
A:matplotlib._mathtext.cnum->HCentered([num])
A:matplotlib._mathtext.cden->HCentered([den])
A:matplotlib._mathtext.cannotation->HCentered([annotation])
A:matplotlib._mathtext.cbody->HCentered([body])
A:matplotlib._mathtext.root->Hlist(root)
A:matplotlib._mathtext.check->AutoHeightChar('\\__sqrt__', height, depth, state, always=True)
A:matplotlib._mathtext.padded_body->Hlist([Hbox(2 * thickness), body, Hbox(2 * thickness)])
A:matplotlib._mathtext.rightside->Vlist([Hrule(state), Glue('fill'), Hlist([body])])
A:matplotlib._mathtext.root_vlist->Vlist([Hlist([root])])
A:matplotlib._mathtext.depth->max((x.depth for x in middle))
matplotlib._mathtext.Accent(Char)
matplotlib._mathtext.Accent._update_metrics(self)
matplotlib._mathtext.Accent.render(self,output,x,y)
matplotlib._mathtext.Accent.shrink(self)
matplotlib._mathtext.AutoHeightChar(self,c,height,depth,state,always=False,factor=None)
matplotlib._mathtext.AutoHeightChar.__init__(self,c,height,depth,state,always=False,factor=None)
matplotlib._mathtext.AutoWidthChar(self,c,width,state,always=False,char_class=Char)
matplotlib._mathtext.AutoWidthChar.__init__(self,c,width,state,always=False,char_class=Char)
matplotlib._mathtext.BakomaFonts(self,*args,**kwargs)
matplotlib._mathtext.BakomaFonts.__init__(self,*args,**kwargs)
matplotlib._mathtext.BakomaFonts._get_glyph(self,fontname,font_class,sym)
matplotlib._mathtext.BakomaFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib._mathtext.Box(self,width,height,depth)
matplotlib._mathtext.Box.__init__(self,width,height,depth)
matplotlib._mathtext.Box.render(self,output,x1,y1,x2,y2)
matplotlib._mathtext.Box.shrink(self)
matplotlib._mathtext.Char(self,c,state)
matplotlib._mathtext.Char.__init__(self,c,state)
matplotlib._mathtext.Char.__repr__(self)
matplotlib._mathtext.Char._update_metrics(self)
matplotlib._mathtext.Char.get_kerning(self,next)
matplotlib._mathtext.Char.is_slanted(self)
matplotlib._mathtext.Char.render(self,output,x,y)
matplotlib._mathtext.Char.shrink(self)
matplotlib._mathtext.ComputerModernFontConstants(FontConstantsBase)
matplotlib._mathtext.DejaVuFonts(self,*args,**kwargs)
matplotlib._mathtext.DejaVuFonts.__init__(self,*args,**kwargs)
matplotlib._mathtext.DejaVuFonts._get_glyph(self,fontname,font_class,sym)
matplotlib._mathtext.DejaVuSansFontConstants(FontConstantsBase)
matplotlib._mathtext.DejaVuSansFonts(DejaVuFonts)
matplotlib._mathtext.DejaVuSerifFontConstants(FontConstantsBase)
matplotlib._mathtext.DejaVuSerifFonts(DejaVuFonts)
matplotlib._mathtext.Error(msg)
matplotlib._mathtext.FontConstantsBase
matplotlib._mathtext.Fonts(self,default_font_prop,load_glyph_flags)
matplotlib._mathtext.Fonts.__init__(self,default_font_prop,load_glyph_flags)
matplotlib._mathtext.Fonts.get_kern(self,font1,fontclass1,sym1,fontsize1,font2,fontclass2,sym2,fontsize2,dpi)
matplotlib._mathtext.Fonts.get_metrics(self,font,font_class,sym,fontsize,dpi)
matplotlib._mathtext.Fonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib._mathtext.Fonts.get_underline_thickness(self,font,fontsize,dpi)
matplotlib._mathtext.Fonts.get_used_characters(self)
matplotlib._mathtext.Fonts.get_xheight(self,font,fontsize,dpi)
matplotlib._mathtext.Fonts.render_glyph(self,output,ox,oy,font,font_class,sym,fontsize,dpi)
matplotlib._mathtext.Fonts.render_rect_filled(self,output,x1,y1,x2,y2)
matplotlib._mathtext.Glue(self,glue_type)
matplotlib._mathtext.Glue.__init__(self,glue_type)
matplotlib._mathtext.Glue.shrink(self)
matplotlib._mathtext.HCentered(self,elements)
matplotlib._mathtext.HCentered.__init__(self,elements)
matplotlib._mathtext.Hbox(self,width)
matplotlib._mathtext.Hbox.__init__(self,width)
matplotlib._mathtext.Hlist(self,elements,w=0.0,m='additional',do_kern=True)
matplotlib._mathtext.Hlist.__init__(self,elements,w=0.0,m='additional',do_kern=True)
matplotlib._mathtext.Hlist.hpack(self,w=0.0,m='additional')
matplotlib._mathtext.Hlist.kern(self)
matplotlib._mathtext.Hrule(self,state,thickness=None)
matplotlib._mathtext.Hrule.__init__(self,state,thickness=None)
matplotlib._mathtext.Kern(self,width)
matplotlib._mathtext.Kern.__init__(self,width)
matplotlib._mathtext.Kern.__repr__(self)
matplotlib._mathtext.Kern.shrink(self)
matplotlib._mathtext.List(self,elements)
matplotlib._mathtext.List.__init__(self,elements)
matplotlib._mathtext.List.__repr__(self)
matplotlib._mathtext.List._set_glue(self,x,sign,totals,error_type)
matplotlib._mathtext.List.shrink(self)
matplotlib._mathtext.Node(self)
matplotlib._mathtext.Node.__init__(self)
matplotlib._mathtext.Node.__repr__(self)
matplotlib._mathtext.Node.get_kerning(self,next)
matplotlib._mathtext.Node.render(self,output,x,y)
matplotlib._mathtext.Node.shrink(self)
matplotlib._mathtext.Output(self,box)
matplotlib._mathtext.Output.__init__(self,box)
matplotlib._mathtext.Output.to_raster(self)
matplotlib._mathtext.Output.to_vector(self)
matplotlib._mathtext.Parser(self)
matplotlib._mathtext.Parser._MathStyle(enum.Enum)
matplotlib._mathtext.Parser.__init__(self)
matplotlib._mathtext.Parser._auto_sized_delimiter(self,front,middle,back)
matplotlib._mathtext.Parser._genfrac(self,ldelim,rdelim,rule,style,num,den)
matplotlib._mathtext.Parser._genset(self,s,loc,toks)
matplotlib._mathtext.Parser._make_space(self,percentage)
matplotlib._mathtext.Parser.accent(self,s,loc,toks)
matplotlib._mathtext.Parser.auto_delim(self,s,loc,toks)
matplotlib._mathtext.Parser.binom(self,s,loc,toks)
matplotlib._mathtext.Parser.customspace(self,s,loc,toks)
matplotlib._mathtext.Parser.dfrac(self,s,loc,toks)
matplotlib._mathtext.Parser.end_group(self,s,loc,toks)
matplotlib._mathtext.Parser.font(self,s,loc,toks)
matplotlib._mathtext.Parser.frac(self,s,loc,toks)
matplotlib._mathtext.Parser.function(self,s,loc,toks)
matplotlib._mathtext.Parser.genfrac(self,s,loc,toks)
matplotlib._mathtext.Parser.get_state(self)
matplotlib._mathtext.Parser.group(self,s,loc,toks)
matplotlib._mathtext.Parser.is_between_brackets(self,s,loc)
matplotlib._mathtext.Parser.is_dropsub(self,nucleus)
matplotlib._mathtext.Parser.is_overunder(self,nucleus)
matplotlib._mathtext.Parser.is_slanted(self,nucleus)
matplotlib._mathtext.Parser.main(self,s,loc,toks)
matplotlib._mathtext.Parser.math(self,s,loc,toks)
matplotlib._mathtext.Parser.math_string(self,s,loc,toks)
matplotlib._mathtext.Parser.non_math(self,s,loc,toks)
matplotlib._mathtext.Parser.operatorname(self,s,loc,toks)
matplotlib._mathtext.Parser.overline(self,s,loc,toks)
matplotlib._mathtext.Parser.parse(self,s,fonts_object,fontsize,dpi)
matplotlib._mathtext.Parser.pop_state(self)
matplotlib._mathtext.Parser.push_state(self)
matplotlib._mathtext.Parser.required_group(self,s,loc,toks)
matplotlib._mathtext.Parser.space(self,s,loc,toks)
matplotlib._mathtext.Parser.sqrt(self,s,loc,toks)
matplotlib._mathtext.Parser.start_group(self,s,loc,toks)
matplotlib._mathtext.Parser.style_literal(self,s,loc,toks)
matplotlib._mathtext.Parser.subsuper(self,s,loc,toks)
matplotlib._mathtext.Parser.symbol(self,s,loc,toks)
matplotlib._mathtext.Parser.unknown_symbol(self,s,loc,toks)
matplotlib._mathtext.ParserState(self,fontset,font,font_class,fontsize,dpi)
matplotlib._mathtext.ParserState.__init__(self,fontset,font,font_class,fontsize,dpi)
matplotlib._mathtext.ParserState.copy(self)
matplotlib._mathtext.ParserState.font(self)
matplotlib._mathtext.ParserState.font(self,name)
matplotlib._mathtext.ParserState.get_current_underline_thickness(self)
matplotlib._mathtext.Rule(self,width,height,depth,state)
matplotlib._mathtext.Rule.__init__(self,width,height,depth,state)
matplotlib._mathtext.Rule.render(self,output,x,y,w,h)
matplotlib._mathtext.STIXFontConstants(FontConstantsBase)
matplotlib._mathtext.STIXSansFontConstants(FontConstantsBase)
matplotlib._mathtext.StixFonts(self,*args,**kwargs)
matplotlib._mathtext.StixFonts.__init__(self,*args,**kwargs)
matplotlib._mathtext.StixFonts._map_virtual_font(self,fontname,font_class,uniindex)
matplotlib._mathtext.StixFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib._mathtext.StixSansFonts(StixFonts)
matplotlib._mathtext.TruetypeFonts(self,*args,**kwargs)
matplotlib._mathtext.TruetypeFonts.__init__(self,*args,**kwargs)
matplotlib._mathtext.TruetypeFonts._get_font(self,font)
matplotlib._mathtext.TruetypeFonts._get_info(self,fontname,font_class,sym,fontsize,dpi)
matplotlib._mathtext.TruetypeFonts._get_offset(self,font,glyph,fontsize,dpi)
matplotlib._mathtext.TruetypeFonts.get_kern(self,font1,fontclass1,sym1,fontsize1,font2,fontclass2,sym2,fontsize2,dpi)
matplotlib._mathtext.TruetypeFonts.get_underline_thickness(self,font,fontsize,dpi)
matplotlib._mathtext.TruetypeFonts.get_xheight(self,fontname,fontsize,dpi)
matplotlib._mathtext.UnicodeFonts(self,*args,**kwargs)
matplotlib._mathtext.UnicodeFonts.__init__(self,*args,**kwargs)
matplotlib._mathtext.UnicodeFonts._get_glyph(self,fontname,font_class,sym)
matplotlib._mathtext.UnicodeFonts._map_virtual_font(self,fontname,font_class,uniindex)
matplotlib._mathtext.UnicodeFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib._mathtext.VCentered(self,elements)
matplotlib._mathtext.VCentered.__init__(self,elements)
matplotlib._mathtext.Vbox(self,height,depth)
matplotlib._mathtext.Vbox.__init__(self,height,depth)
matplotlib._mathtext.Vlist(self,elements,h=0.0,m='additional')
matplotlib._mathtext.Vlist.__init__(self,elements,h=0.0,m='additional')
matplotlib._mathtext.Vlist.vpack(self,h=0.0,m='additional',l=np.inf)
matplotlib._mathtext.Vrule(self,state)
matplotlib._mathtext.Vrule.__init__(self,state)
matplotlib._mathtext._get_font_constant_set(state)
matplotlib._mathtext.cmd(expr,args)
matplotlib._mathtext.get_unicode_index(symbol,math=False)
matplotlib._mathtext.ship(box,xy=(0,0))


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/mlab.py----------------------------------------
A:matplotlib.mlab.x->numpy.resize(x, NFFT)
A:matplotlib.mlab.y->numpy.resize(y, NFFT)
A:matplotlib.mlab.C->numpy.cov(x, y, bias=1)
A:matplotlib.mlab.noverlap->int(noverlap)
A:matplotlib.mlab.n->len(y)
A:matplotlib.mlab.window->window(np.ones(NFFT, x.dtype))
A:matplotlib.mlab.result->numpy.zeros(num_m)
A:matplotlib.mlab.resultY->detrend(resultY, detrend_func, axis=0)
A:matplotlib.mlab.slc->slice(1, None, None)
A:matplotlib.mlab.freqs->numpy.roll(freqs, -freqcenter, axis=0)
A:matplotlib.mlab.pad_to->len(x)
A:matplotlib.mlab.(spec, freqs, _)->_spectral_helper(x=x, y=None, NFFT=len(x), Fs=Fs, detrend_func=detrend_none, window=window, noverlap=0, pad_to=pad_to, sides=sides, scale_by_freq=False, mode=mode)
A:matplotlib.mlab.(Pxx, freqs)->csd(x=x, y=None, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.mlab.(Pxy, freqs, _)->_spectral_helper(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend_func=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode='psd')
A:matplotlib.mlab.Pxy->Pxy.mean(axis=1).mean(axis=1)
A:matplotlib.mlab.complex_spectrum->functools.partial(_single_spectrum_helper, 'complex')
A:matplotlib.mlab.complex_spectrum.__doc__->_single_spectrum_docs.format(quantity='complex-valued frequency spectrum', **_docstring.interpd.params)
A:matplotlib.mlab.magnitude_spectrum->functools.partial(_single_spectrum_helper, 'magnitude')
A:matplotlib.mlab.magnitude_spectrum.__doc__->_single_spectrum_docs.format(quantity='magnitude (absolute value) of the frequency spectrum', **_docstring.interpd.params)
A:matplotlib.mlab.angle_spectrum->functools.partial(_single_spectrum_helper, 'angle')
A:matplotlib.mlab.angle_spectrum.__doc__->_single_spectrum_docs.format(quantity='angle of the frequency spectrum (wrapped phase spectrum)', **_docstring.interpd.params)
A:matplotlib.mlab.phase_spectrum->functools.partial(_single_spectrum_helper, 'phase')
A:matplotlib.mlab.phase_spectrum.__doc__->_single_spectrum_docs.format(quantity='phase of the frequency spectrum (unwrapped phase spectrum)', **_docstring.interpd.params)
A:matplotlib.mlab.(spec, freqs, t)->_spectral_helper(x=x, y=None, NFFT=NFFT, Fs=Fs, detrend_func=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode=mode)
A:matplotlib.mlab.(Pxx, f)->psd(x, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.(Pyy, f)->psd(y, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.(Pxy, f)->csd(x, y, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.self.dataset->numpy.atleast_2d(dataset)
A:matplotlib.mlab.self.factor->self.covariance_factor()
A:matplotlib.mlab.self.data_covariance->numpy.atleast_2d(np.cov(self.dataset, rowvar=1, bias=False))
A:matplotlib.mlab.self.data_inv_cov->numpy.linalg.inv(self.data_covariance)
A:matplotlib.mlab.points->numpy.atleast_2d(points)
A:matplotlib.mlab.tdiff->numpy.dot(self.inv_cov, diff)
A:matplotlib.mlab.result[i]->numpy.sum(np.exp(-energy), axis=0)
matplotlib.mlab.GaussianKDE(self,dataset,bw_method=None)
matplotlib.mlab.GaussianKDE.__init__(self,dataset,bw_method=None)
matplotlib.mlab.GaussianKDE.evaluate(self,points)
matplotlib.mlab.GaussianKDE.scotts_factor(self)
matplotlib.mlab.GaussianKDE.silverman_factor(self)
matplotlib.mlab._single_spectrum_helper(mode,x,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab._spectral_helper(x,y=None,NFFT=None,Fs=None,detrend_func=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,mode=None)
matplotlib.mlab._stride_windows(x,n,noverlap=0,axis=0)
matplotlib.mlab.cohere(x,y,NFFT=256,Fs=2,detrend=detrend_none,window=window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None)
matplotlib.mlab.csd(x,y,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None)
matplotlib.mlab.detrend(x,key=None,axis=None)
matplotlib.mlab.detrend_linear(y)
matplotlib.mlab.detrend_mean(x,axis=None)
matplotlib.mlab.detrend_none(x,axis=None)
matplotlib.mlab.psd(x,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None)
matplotlib.mlab.specgram(x,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,mode=None)
matplotlib.mlab.stride_windows(x,n,noverlap=None,axis=0)
matplotlib.mlab.window_hanning(x)
matplotlib.mlab.window_none(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_afm.py----------------------------------------
A:matplotlib._afm._log->logging.getLogger(__name__)
A:matplotlib._afm.x->x.decode('latin-1').decode('latin-1')
A:matplotlib._afm.s->_to_str(s)
A:matplotlib._afm.line->line.rstrip().rstrip()
A:matplotlib._afm.lst->line.rstrip().rstrip().split(b' ', 1)
A:matplotlib._afm.d[key]->optional[key](fh)
A:matplotlib._afm.CharMetrics->namedtuple('CharMetrics', 'width, name, bbox')
A:matplotlib._afm.vals->line.rstrip().rstrip().split(b';')
A:matplotlib._afm.num->ord('−')
A:matplotlib._afm.wx->_to_float(vals['WX'])
A:matplotlib._afm.bbox->list(map(int, bbox))
A:matplotlib._afm.metrics->CharMetrics(wx, name, bbox)
A:matplotlib._afm.CompositePart->namedtuple('CompositePart', 'name, dx, dy')
A:matplotlib._afm.cc->vals[0].split()
A:matplotlib._afm.pcc->_to_str(s).split()
A:matplotlib._afm.part->CompositePart(pcc[1], _to_float(pcc[2]), _to_float(pcc[3]))
A:matplotlib._afm.self._header->_parse_header(fh)
A:matplotlib._afm.(self._metrics, self._metrics_by_name)->_parse_char_metrics(fh)
A:matplotlib._afm.(self._kern, self._composite)->_parse_optional(fh)
A:matplotlib._afm.c->ord(c)
A:matplotlib._afm.miny->min(miny, b)
A:matplotlib._afm.maxy->max(maxy, b + h)
A:matplotlib._afm.name->self.get_fullname()
A:matplotlib._afm.left->min(left, l)
matplotlib._afm.AFM(self,fh)
matplotlib._afm.AFM.__init__(self,fh)
matplotlib._afm.AFM.family_name(self)
matplotlib._afm.AFM.get_angle(self)
matplotlib._afm.AFM.get_bbox_char(self,c,isord=False)
matplotlib._afm.AFM.get_capheight(self)
matplotlib._afm.AFM.get_familyname(self)
matplotlib._afm.AFM.get_fontname(self)
matplotlib._afm.AFM.get_fullname(self)
matplotlib._afm.AFM.get_height_char(self,c,isord=False)
matplotlib._afm.AFM.get_horizontal_stem_width(self)
matplotlib._afm.AFM.get_kern_dist(self,c1,c2)
matplotlib._afm.AFM.get_kern_dist_from_name(self,name1,name2)
matplotlib._afm.AFM.get_name_char(self,c,isord=False)
matplotlib._afm.AFM.get_str_bbox(self,s)
matplotlib._afm.AFM.get_str_bbox_and_descent(self,s)
matplotlib._afm.AFM.get_underline_thickness(self)
matplotlib._afm.AFM.get_vertical_stem_width(self)
matplotlib._afm.AFM.get_weight(self)
matplotlib._afm.AFM.get_width_char(self,c,isord=False)
matplotlib._afm.AFM.get_width_from_char_name(self,name)
matplotlib._afm.AFM.get_xheight(self)
matplotlib._afm.AFM.postscript_name(self)
matplotlib._afm.AFM.string_width_height(self,s)
matplotlib._afm._parse_char_metrics(fh)
matplotlib._afm._parse_composites(fh)
matplotlib._afm._parse_header(fh)
matplotlib._afm._parse_kern_pairs(fh)
matplotlib._afm._parse_optional(fh)
matplotlib._afm._to_bool(s)
matplotlib._afm._to_float(x)
matplotlib._afm._to_int(x)
matplotlib._afm._to_list_of_floats(s)
matplotlib._afm._to_list_of_ints(s)
matplotlib._afm._to_str(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/pyplot.py----------------------------------------
A:matplotlib.pyplot._log->logging.getLogger(__name__)
A:matplotlib.pyplot.decorator->matplotlib._api.deprecation.DECORATORS.get(method)
A:matplotlib.pyplot.func->decorator(func)
A:matplotlib.pyplot._ReplDisplayHook->Enum('_ReplDisplayHook', ['NONE', 'PLAIN', 'IPYTHON'])
A:matplotlib.pyplot.mod_ipython->sys.modules.get('IPython')
A:matplotlib.pyplot.ip->get_ipython()
A:matplotlib.pyplot.ipython_gui_name->IPython.core.pylabtools.backend2gui.get(get_backend())
A:matplotlib.pyplot.o->gcf()
A:matplotlib.pyplot.current_framework->matplotlib.cbook._get_running_interactive_framework()
A:matplotlib.pyplot.best_guess->mapping.get(current_framework, None)
A:matplotlib.pyplot.old_backend->dict.__getitem__(rcParams, 'backend')
A:matplotlib.pyplot.backend_mod->importlib.import_module(cbook._backend_module_name(newbackend))
A:matplotlib.pyplot.required_framework->_get_required_interactive_framework(backend_mod)
A:matplotlib.pyplot.new_figure_manager->getattr(backend_mod, 'new_figure_manager', None)
A:matplotlib.pyplot.show->getattr(backend_mod, 'show', None)
A:matplotlib.pyplot.fig->figure(fignum, figsize=figaspect(A))
A:matplotlib.pyplot.manager->matplotlib._pylab_helpers.Gcf.get_active()
A:matplotlib.pyplot.manager_class->getattr(getattr(backend_mod, 'FigureCanvas', None), 'manager_class', None)
A:matplotlib.pyplot.manager_pyplot_show->inspect.getattr_static(manager_class, 'pyplot_show', None)
A:matplotlib.pyplot.base_pyplot_show->inspect.getattr_static(FigureManagerBase, 'pyplot_show', None)
A:matplotlib.pyplot.globals()[func_name].__signature__->inspect.signature(getattr(backend_mod, func_name))
A:matplotlib.pyplot.stack->ExitStack()
A:matplotlib.pyplot.allnums->get_fignums()
A:matplotlib.pyplot.all_labels->get_figlabels()
A:matplotlib.pyplot.inum->get_figlabels().index(fig_label)
A:matplotlib.pyplot.num->int(num)
A:matplotlib.pyplot.(module_name, dotted_name)->hookspecs.split(':')
A:matplotlib.pyplot.obj->getattr(obj, part)
A:matplotlib.pyplot.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.pyplot.res->figure(fignum, figsize=figaspect(A)).savefig(*args, **kwargs)
A:matplotlib.pyplot.figlegend.__doc__->matplotlib.figure.Figure.legend.__doc__.replace(' legend(', ' figlegend(').replace('fig.legend(', 'plt.figlegend(').replace('ax.plot(', 'plt.plot(')
A:matplotlib.pyplot.pos->kwargs.pop('position', None)
A:matplotlib.pyplot.ax->axes(projection='polar')
A:matplotlib.pyplot.unset->object()
A:matplotlib.pyplot.projection->kwargs.get('projection', unset)
A:matplotlib.pyplot.polar->kwargs.pop('polar', unset)
A:matplotlib.pyplot.key->matplotlib.gridspec.SubplotSpec._from_subplot_args(fig, args)
A:matplotlib.pyplot.axs->figure(fignum, figsize=figaspect(A)).subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw, height_ratios=height_ratios, width_ratios=width_ratios)
A:matplotlib.pyplot.ax_dict->figure(fignum, figsize=figaspect(A)).subplot_mosaic(mosaic, sharex=sharex, sharey=sharey, height_ratios=height_ratios, width_ratios=width_ratios, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw, empty_sentinel=empty_sentinel, per_subplot_kw=per_subplot_kw)
A:matplotlib.pyplot.gs->matplotlib.gridspec.GridSpec._check_gridspec_exists(fig, rows, cols)
A:matplotlib.pyplot.subplotspec->matplotlib.gridspec.GridSpec._check_gridspec_exists(fig, rows, cols).new_subplotspec(loc, rowspan=rowspan, colspan=colspan)
A:matplotlib.pyplot.ax1->axes(projection='polar').twiny()
A:matplotlib.pyplot.targetfig->gcf()
A:matplotlib.pyplot.ret->gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)
A:matplotlib.pyplot.locs->axes(projection='polar').set_yticks(ticks, minor=minor)
A:matplotlib.pyplot.labels->axes(projection='polar').xaxis.get_ticklabels()
A:matplotlib.pyplot.lines->axes(projection='polar').xaxis.get_ticklines()
A:matplotlib.pyplot.(lines, labels)->axes(projection='polar').set_thetagrids(angles, labels=labels, fmt=fmt, **kwargs)
A:matplotlib.pyplot.this_module->inspect.getmodule(get_plot_commands)
A:matplotlib.pyplot.mappable->gci()
A:matplotlib.pyplot.im->axes(projection='polar').matshow(A, **kwargs)
A:matplotlib.pyplot.cmap->get_cmap(cmap)
A:matplotlib.pyplot.A->numpy.asanyarray(A)
A:matplotlib.pyplot.__ret->gca().tripcolor(*args, alpha=alpha, norm=norm, cmap=cmap, vmin=vmin, vmax=vmax, shading=shading, facecolors=facecolors, **kwargs)
matplotlib.plt._auto_draw_if_interactive(fig,val)
matplotlib.plt._copy_docstring_and_deprecators(method,func=None)
matplotlib.plt._draw_all_if_interactive()
matplotlib.plt._get_backend_mod()
matplotlib.plt._get_plt_commands()
matplotlib.plt._get_required_interactive_framework(backend_mod)
matplotlib.plt._warn_if_gui_out_of_main_thread()
matplotlib.plt.acorr(x,*,data=None,**kwargs)
matplotlib.plt.angle_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,*,data=None,**kwargs)
matplotlib.plt.annotate(text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.plt.arrow(x,y,dx,dy,**kwargs)
matplotlib.plt.autoscale(enable=True,axis='both',tight=None)
matplotlib.plt.autumn()
matplotlib.plt.axes(arg=None,**kwargs)
matplotlib.plt.axhline(y=0,xmin=0,xmax=1,**kwargs)
matplotlib.plt.axhspan(ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.plt.axis(arg=None,/,*,emit=True,**kwargs)
matplotlib.plt.axline(xy1,xy2=None,*,slope=None,**kwargs)
matplotlib.plt.axvline(x=0,ymin=0,ymax=1,**kwargs)
matplotlib.plt.axvspan(xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.plt.bar(x,height,width=0.8,bottom=None,*,align='center',data=None,**kwargs)
matplotlib.plt.bar_label(container,labels=None,*,fmt='%g',label_type='edge',padding=0,**kwargs)
matplotlib.plt.barbs(*args,data=None,**kwargs)
matplotlib.plt.barh(y,width,height=0.8,left=None,*,align='center',data=None,**kwargs)
matplotlib.plt.bone()
matplotlib.plt.box(on=None)
matplotlib.plt.boxplot(x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_ticks=True,autorange=False,zorder=None,capwidths=None,*,data=None)
matplotlib.plt.broken_barh(xranges,yrange,*,data=None,**kwargs)
matplotlib.plt.cla()
matplotlib.plt.clabel(CS,levels=None,**kwargs)
matplotlib.plt.clf()
matplotlib.plt.clim(vmin=None,vmax=None)
matplotlib.plt.close(fig=None)
matplotlib.plt.cohere(x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,*,data=None,**kwargs)
matplotlib.plt.colorbar(mappable=None,cax=None,ax=None,**kwargs)
matplotlib.plt.connect(s,func)
matplotlib.plt.contour(*args,data=None,**kwargs)
matplotlib.plt.contourf(*args,data=None,**kwargs)
matplotlib.plt.cool()
matplotlib.plt.copper()
matplotlib.plt.csd(x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,*,data=None,**kwargs)
matplotlib.plt.delaxes(ax=None)
matplotlib.plt.disconnect(cid)
matplotlib.plt.draw()
matplotlib.plt.draw_if_interactive(*args,**kwargs)
matplotlib.plt.errorbar(x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,*,data=None,**kwargs)
matplotlib.plt.eventplot(positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,alpha=None,linestyles='solid',*,data=None,**kwargs)
matplotlib.plt.figimage(X,xo=0,yo=0,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,origin=None,resize=False,**kwargs)
matplotlib.plt.figlegend(*args,**kwargs)
matplotlib.plt.fignum_exists(num)
matplotlib.plt.figtext(x,y,s,fontdict=None,**kwargs)
matplotlib.plt.figure(num=None,figsize=None,dpi=None,facecolor=None,edgecolor=None,frameon=True,FigureClass=Figure,clear=False,**kwargs)
matplotlib.plt.fill(*args,data=None,**kwargs)
matplotlib.plt.fill_between(x,y1,y2=0,where=None,interpolate=False,step=None,*,data=None,**kwargs)
matplotlib.plt.fill_betweenx(y,x1,x2=0,where=None,step=None,interpolate=False,*,data=None,**kwargs)
matplotlib.plt.findobj(o=None,match=None,include_self=True)
matplotlib.plt.flag()
matplotlib.plt.gca()
matplotlib.plt.gcf()
matplotlib.plt.gci()
matplotlib.plt.get(obj,*args,**kwargs)
matplotlib.plt.get_cmap(name=None,lut=None)
matplotlib.plt.get_current_fig_manager()
matplotlib.plt.get_figlabels()
matplotlib.plt.get_fignums()
matplotlib.plt.get_plot_commands()
matplotlib.plt.getp(obj,*args,**kwargs)
matplotlib.plt.ginput(n=1,timeout=30,show_clicks=True,mouse_add=MouseButton.LEFT,mouse_pop=MouseButton.RIGHT,mouse_stop=MouseButton.MIDDLE)
matplotlib.plt.gray()
matplotlib.plt.grid(visible=None,which='major',axis='both',**kwargs)
matplotlib.plt.hexbin(x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,*,data=None,**kwargs)
matplotlib.plt.hist(x,bins=None,range=None,density=False,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,*,data=None,**kwargs)
matplotlib.plt.hist2d(x,y,bins=10,range=None,density=False,weights=None,cmin=None,cmax=None,*,data=None,**kwargs)
matplotlib.plt.hlines(y,xmin,xmax,colors=None,linestyles='solid',label='',*,data=None,**kwargs)
matplotlib.plt.hot()
matplotlib.plt.hsv()
matplotlib.plt.imread(fname,format=None)
matplotlib.plt.imsave(fname,arr,**kwargs)
matplotlib.plt.imshow(X,cmap=None,norm=None,*,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,interpolation_stage=None,filternorm=True,filterrad=4.0,resample=None,url=None,data=None,**kwargs)
matplotlib.plt.inferno()
matplotlib.plt.install_repl_displayhook()
matplotlib.plt.ioff()
matplotlib.plt.ion()
matplotlib.plt.isinteractive()
matplotlib.plt.jet()
matplotlib.plt.legend(*args,**kwargs)
matplotlib.plt.locator_params(axis='both',tight=None,**kwargs)
matplotlib.plt.loglog(*args,**kwargs)
matplotlib.plt.magma()
matplotlib.plt.magnitude_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,*,data=None,**kwargs)
matplotlib.plt.margins(*margins,x=None,y=None,tight=True)
matplotlib.plt.matshow(A,fignum=None,**kwargs)
matplotlib.plt.minorticks_off()
matplotlib.plt.minorticks_on()
matplotlib.plt.new_figure_manager(*args,**kwargs)
matplotlib.plt.nipy_spectral()
matplotlib.plt.pause(interval)
matplotlib.plt.pcolor(*args,shading=None,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,data=None,**kwargs)
matplotlib.plt.pcolormesh(*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,shading=None,antialiased=False,data=None,**kwargs)
matplotlib.plt.phase_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,*,data=None,**kwargs)
matplotlib.plt.pie(x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=0,radius=1,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False,*,normalize=True,hatch=None,data=None)
matplotlib.plt.pink()
matplotlib.plt.plasma()
matplotlib.plt.plot(*args,scalex=True,scaley=True,data=None,**kwargs)
matplotlib.plt.plot_date(x,y,fmt='o',tz=None,xdate=True,ydate=False,*,data=None,**kwargs)
matplotlib.plt.polar(*args,**kwargs)
matplotlib.plt.prism()
matplotlib.plt.psd(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,*,data=None,**kwargs)
matplotlib.plt.quiver(*args,data=None,**kwargs)
matplotlib.plt.quiverkey(Q,X,Y,U,label,**kwargs)
matplotlib.plt.rc(group,**kwargs)
matplotlib.plt.rc_context(rc=None,fname=None)
matplotlib.plt.rcdefaults()
matplotlib.plt.rgrids(radii=None,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.plt.savefig(*args,**kwargs)
matplotlib.plt.sca(ax)
matplotlib.plt.scatter(x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,*,edgecolors=None,plotnonfinite=False,data=None,**kwargs)
matplotlib.plt.sci(im)
matplotlib.plt.semilogx(*args,**kwargs)
matplotlib.plt.semilogy(*args,**kwargs)
matplotlib.plt.set_cmap(cmap)
matplotlib.plt.set_loglevel(*args,**kwargs)
matplotlib.plt.setp(obj,*args,**kwargs)
matplotlib.plt.show(*args,**kwargs)
matplotlib.plt.specgram(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,*,data=None,**kwargs)
matplotlib.plt.spring()
matplotlib.plt.spy(Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.plt.stackplot(x,*args,labels=(),colors=None,baseline='zero',data=None,**kwargs)
matplotlib.plt.stairs(values,edges=None,*,orientation='vertical',baseline=0,fill=False,data=None,**kwargs)
matplotlib.plt.stem(*args,linefmt=None,markerfmt=None,basefmt=None,bottom=0,label=None,use_line_collection=_api.deprecation._deprecated_parameter,orientation='vertical',data=None)
matplotlib.plt.step(x,y,*args,where='pre',data=None,**kwargs)
matplotlib.plt.streamplot(x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both',broken_streamlines=True,*,data=None)
matplotlib.plt.subplot(*args,**kwargs)
matplotlib.plt.subplot2grid(shape,loc,rowspan=1,colspan=1,fig=None,**kwargs)
matplotlib.plt.subplot_mosaic(mosaic,*,sharex=False,sharey=False,width_ratios=None,height_ratios=None,empty_sentinel='.',subplot_kw=None,gridspec_kw=None,per_subplot_kw=None,**fig_kw)
matplotlib.plt.subplot_tool(targetfig=None)
matplotlib.plt.subplots(nrows=1,ncols=1,*,sharex=False,sharey=False,squeeze=True,width_ratios=None,height_ratios=None,subplot_kw=None,gridspec_kw=None,**fig_kw)
matplotlib.plt.subplots_adjust(left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.plt.summer()
matplotlib.plt.suptitle(t,**kwargs)
matplotlib.plt.switch_backend(newbackend)
matplotlib.plt.table(cellText=None,cellColours=None,cellLoc='right',colWidths=None,rowLabels=None,rowColours=None,rowLoc='left',colLabels=None,colColours=None,colLoc='center',loc='bottom',bbox=None,edges='closed',**kwargs)
matplotlib.plt.text(x,y,s,fontdict=None,**kwargs)
matplotlib.plt.thetagrids(angles=None,labels=None,fmt=None,**kwargs)
matplotlib.plt.tick_params(axis='both',**kwargs)
matplotlib.plt.ticklabel_format(*,axis='both',style='',scilimits=None,useOffset=None,useLocale=None,useMathText=None)
matplotlib.plt.tight_layout(*,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.plt.title(label,fontdict=None,loc=None,pad=None,*,y=None,**kwargs)
matplotlib.plt.tricontour(*args,**kwargs)
matplotlib.plt.tricontourf(*args,**kwargs)
matplotlib.plt.tripcolor(*args,alpha=1.0,norm=None,cmap=None,vmin=None,vmax=None,shading='flat',facecolors=None,**kwargs)
matplotlib.plt.triplot(*args,**kwargs)
matplotlib.plt.twinx(ax=None)
matplotlib.plt.twiny(ax=None)
matplotlib.plt.uninstall_repl_displayhook()
matplotlib.plt.violinplot(dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,quantiles=None,points=100,bw_method=None,*,data=None)
matplotlib.plt.viridis()
matplotlib.plt.vlines(x,ymin,ymax,colors=None,linestyles='solid',label='',*,data=None,**kwargs)
matplotlib.plt.waitforbuttonpress(timeout=-1)
matplotlib.plt.winter()
matplotlib.plt.xcorr(x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,*,data=None,**kwargs)
matplotlib.plt.xkcd(scale=1,length=100,randomness=2)
matplotlib.plt.xlabel(xlabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.plt.xlim(*args,**kwargs)
matplotlib.plt.xscale(value,**kwargs)
matplotlib.plt.xticks(ticks=None,labels=None,*,minor=False,**kwargs)
matplotlib.plt.ylabel(ylabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.plt.ylim(*args,**kwargs)
matplotlib.plt.yscale(value,**kwargs)
matplotlib.plt.yticks(ticks=None,labels=None,*,minor=False,**kwargs)
matplotlib.pyplot._auto_draw_if_interactive(fig,val)
matplotlib.pyplot._copy_docstring_and_deprecators(method,func=None)
matplotlib.pyplot._draw_all_if_interactive()
matplotlib.pyplot._get_backend_mod()
matplotlib.pyplot._get_pyplot_commands()
matplotlib.pyplot._get_required_interactive_framework(backend_mod)
matplotlib.pyplot._warn_if_gui_out_of_main_thread()
matplotlib.pyplot.acorr(x,*,data=None,**kwargs)
matplotlib.pyplot.angle_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,*,data=None,**kwargs)
matplotlib.pyplot.annotate(text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.pyplot.arrow(x,y,dx,dy,**kwargs)
matplotlib.pyplot.autoscale(enable=True,axis='both',tight=None)
matplotlib.pyplot.autumn()
matplotlib.pyplot.axes(arg=None,**kwargs)
matplotlib.pyplot.axhline(y=0,xmin=0,xmax=1,**kwargs)
matplotlib.pyplot.axhspan(ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.pyplot.axis(arg=None,/,*,emit=True,**kwargs)
matplotlib.pyplot.axline(xy1,xy2=None,*,slope=None,**kwargs)
matplotlib.pyplot.axvline(x=0,ymin=0,ymax=1,**kwargs)
matplotlib.pyplot.axvspan(xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.pyplot.bar(x,height,width=0.8,bottom=None,*,align='center',data=None,**kwargs)
matplotlib.pyplot.bar_label(container,labels=None,*,fmt='%g',label_type='edge',padding=0,**kwargs)
matplotlib.pyplot.barbs(*args,data=None,**kwargs)
matplotlib.pyplot.barh(y,width,height=0.8,left=None,*,align='center',data=None,**kwargs)
matplotlib.pyplot.bone()
matplotlib.pyplot.box(on=None)
matplotlib.pyplot.boxplot(x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_ticks=True,autorange=False,zorder=None,capwidths=None,*,data=None)
matplotlib.pyplot.broken_barh(xranges,yrange,*,data=None,**kwargs)
matplotlib.pyplot.cla()
matplotlib.pyplot.clabel(CS,levels=None,**kwargs)
matplotlib.pyplot.clf()
matplotlib.pyplot.clim(vmin=None,vmax=None)
matplotlib.pyplot.close(fig=None)
matplotlib.pyplot.cohere(x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,*,data=None,**kwargs)
matplotlib.pyplot.colorbar(mappable=None,cax=None,ax=None,**kwargs)
matplotlib.pyplot.connect(s,func)
matplotlib.pyplot.contour(*args,data=None,**kwargs)
matplotlib.pyplot.contourf(*args,data=None,**kwargs)
matplotlib.pyplot.cool()
matplotlib.pyplot.copper()
matplotlib.pyplot.csd(x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,*,data=None,**kwargs)
matplotlib.pyplot.delaxes(ax=None)
matplotlib.pyplot.disconnect(cid)
matplotlib.pyplot.draw()
matplotlib.pyplot.draw_if_interactive(*args,**kwargs)
matplotlib.pyplot.errorbar(x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,*,data=None,**kwargs)
matplotlib.pyplot.eventplot(positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,alpha=None,linestyles='solid',*,data=None,**kwargs)
matplotlib.pyplot.figimage(X,xo=0,yo=0,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,origin=None,resize=False,**kwargs)
matplotlib.pyplot.figlegend(*args,**kwargs)
matplotlib.pyplot.fignum_exists(num)
matplotlib.pyplot.figtext(x,y,s,fontdict=None,**kwargs)
matplotlib.pyplot.figure(num=None,figsize=None,dpi=None,facecolor=None,edgecolor=None,frameon=True,FigureClass=Figure,clear=False,**kwargs)
matplotlib.pyplot.fill(*args,data=None,**kwargs)
matplotlib.pyplot.fill_between(x,y1,y2=0,where=None,interpolate=False,step=None,*,data=None,**kwargs)
matplotlib.pyplot.fill_betweenx(y,x1,x2=0,where=None,step=None,interpolate=False,*,data=None,**kwargs)
matplotlib.pyplot.findobj(o=None,match=None,include_self=True)
matplotlib.pyplot.flag()
matplotlib.pyplot.gca()
matplotlib.pyplot.gcf()
matplotlib.pyplot.gci()
matplotlib.pyplot.get(obj,*args,**kwargs)
matplotlib.pyplot.get_cmap(name=None,lut=None)
matplotlib.pyplot.get_current_fig_manager()
matplotlib.pyplot.get_figlabels()
matplotlib.pyplot.get_fignums()
matplotlib.pyplot.get_plot_commands()
matplotlib.pyplot.getp(obj,*args,**kwargs)
matplotlib.pyplot.ginput(n=1,timeout=30,show_clicks=True,mouse_add=MouseButton.LEFT,mouse_pop=MouseButton.RIGHT,mouse_stop=MouseButton.MIDDLE)
matplotlib.pyplot.gray()
matplotlib.pyplot.grid(visible=None,which='major',axis='both',**kwargs)
matplotlib.pyplot.hexbin(x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,*,data=None,**kwargs)
matplotlib.pyplot.hist(x,bins=None,range=None,density=False,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,*,data=None,**kwargs)
matplotlib.pyplot.hist2d(x,y,bins=10,range=None,density=False,weights=None,cmin=None,cmax=None,*,data=None,**kwargs)
matplotlib.pyplot.hlines(y,xmin,xmax,colors=None,linestyles='solid',label='',*,data=None,**kwargs)
matplotlib.pyplot.hot()
matplotlib.pyplot.hsv()
matplotlib.pyplot.imread(fname,format=None)
matplotlib.pyplot.imsave(fname,arr,**kwargs)
matplotlib.pyplot.imshow(X,cmap=None,norm=None,*,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,interpolation_stage=None,filternorm=True,filterrad=4.0,resample=None,url=None,data=None,**kwargs)
matplotlib.pyplot.inferno()
matplotlib.pyplot.install_repl_displayhook()
matplotlib.pyplot.ioff()
matplotlib.pyplot.ion()
matplotlib.pyplot.isinteractive()
matplotlib.pyplot.jet()
matplotlib.pyplot.legend(*args,**kwargs)
matplotlib.pyplot.locator_params(axis='both',tight=None,**kwargs)
matplotlib.pyplot.loglog(*args,**kwargs)
matplotlib.pyplot.magma()
matplotlib.pyplot.magnitude_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,*,data=None,**kwargs)
matplotlib.pyplot.margins(*margins,x=None,y=None,tight=True)
matplotlib.pyplot.matshow(A,fignum=None,**kwargs)
matplotlib.pyplot.minorticks_off()
matplotlib.pyplot.minorticks_on()
matplotlib.pyplot.new_figure_manager(*args,**kwargs)
matplotlib.pyplot.nipy_spectral()
matplotlib.pyplot.pause(interval)
matplotlib.pyplot.pcolor(*args,shading=None,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,data=None,**kwargs)
matplotlib.pyplot.pcolormesh(*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,shading=None,antialiased=False,data=None,**kwargs)
matplotlib.pyplot.phase_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,*,data=None,**kwargs)
matplotlib.pyplot.pie(x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=0,radius=1,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False,*,normalize=True,hatch=None,data=None)
matplotlib.pyplot.pink()
matplotlib.pyplot.plasma()
matplotlib.pyplot.plot(*args,scalex=True,scaley=True,data=None,**kwargs)
matplotlib.pyplot.plot_date(x,y,fmt='o',tz=None,xdate=True,ydate=False,*,data=None,**kwargs)
matplotlib.pyplot.polar(*args,**kwargs)
matplotlib.pyplot.prism()
matplotlib.pyplot.psd(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,*,data=None,**kwargs)
matplotlib.pyplot.quiver(*args,data=None,**kwargs)
matplotlib.pyplot.quiverkey(Q,X,Y,U,label,**kwargs)
matplotlib.pyplot.rc(group,**kwargs)
matplotlib.pyplot.rc_context(rc=None,fname=None)
matplotlib.pyplot.rcdefaults()
matplotlib.pyplot.rgrids(radii=None,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.pyplot.savefig(*args,**kwargs)
matplotlib.pyplot.sca(ax)
matplotlib.pyplot.scatter(x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,*,edgecolors=None,plotnonfinite=False,data=None,**kwargs)
matplotlib.pyplot.sci(im)
matplotlib.pyplot.semilogx(*args,**kwargs)
matplotlib.pyplot.semilogy(*args,**kwargs)
matplotlib.pyplot.set_cmap(cmap)
matplotlib.pyplot.set_loglevel(*args,**kwargs)
matplotlib.pyplot.setp(obj,*args,**kwargs)
matplotlib.pyplot.show(*args,**kwargs)
matplotlib.pyplot.specgram(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,*,data=None,**kwargs)
matplotlib.pyplot.spring()
matplotlib.pyplot.spy(Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.pyplot.stackplot(x,*args,labels=(),colors=None,baseline='zero',data=None,**kwargs)
matplotlib.pyplot.stairs(values,edges=None,*,orientation='vertical',baseline=0,fill=False,data=None,**kwargs)
matplotlib.pyplot.stem(*args,linefmt=None,markerfmt=None,basefmt=None,bottom=0,label=None,use_line_collection=_api.deprecation._deprecated_parameter,orientation='vertical',data=None)
matplotlib.pyplot.step(x,y,*args,where='pre',data=None,**kwargs)
matplotlib.pyplot.streamplot(x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both',broken_streamlines=True,*,data=None)
matplotlib.pyplot.subplot(*args,**kwargs)
matplotlib.pyplot.subplot2grid(shape,loc,rowspan=1,colspan=1,fig=None,**kwargs)
matplotlib.pyplot.subplot_mosaic(mosaic,*,sharex=False,sharey=False,width_ratios=None,height_ratios=None,empty_sentinel='.',subplot_kw=None,gridspec_kw=None,per_subplot_kw=None,**fig_kw)
matplotlib.pyplot.subplot_tool(targetfig=None)
matplotlib.pyplot.subplots(nrows=1,ncols=1,*,sharex=False,sharey=False,squeeze=True,width_ratios=None,height_ratios=None,subplot_kw=None,gridspec_kw=None,**fig_kw)
matplotlib.pyplot.subplots_adjust(left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.pyplot.summer()
matplotlib.pyplot.suptitle(t,**kwargs)
matplotlib.pyplot.switch_backend(newbackend)
matplotlib.pyplot.table(cellText=None,cellColours=None,cellLoc='right',colWidths=None,rowLabels=None,rowColours=None,rowLoc='left',colLabels=None,colColours=None,colLoc='center',loc='bottom',bbox=None,edges='closed',**kwargs)
matplotlib.pyplot.text(x,y,s,fontdict=None,**kwargs)
matplotlib.pyplot.thetagrids(angles=None,labels=None,fmt=None,**kwargs)
matplotlib.pyplot.tick_params(axis='both',**kwargs)
matplotlib.pyplot.ticklabel_format(*,axis='both',style='',scilimits=None,useOffset=None,useLocale=None,useMathText=None)
matplotlib.pyplot.tight_layout(*,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.pyplot.title(label,fontdict=None,loc=None,pad=None,*,y=None,**kwargs)
matplotlib.pyplot.tricontour(*args,**kwargs)
matplotlib.pyplot.tricontourf(*args,**kwargs)
matplotlib.pyplot.tripcolor(*args,alpha=1.0,norm=None,cmap=None,vmin=None,vmax=None,shading='flat',facecolors=None,**kwargs)
matplotlib.pyplot.triplot(*args,**kwargs)
matplotlib.pyplot.twinx(ax=None)
matplotlib.pyplot.twiny(ax=None)
matplotlib.pyplot.uninstall_repl_displayhook()
matplotlib.pyplot.violinplot(dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,quantiles=None,points=100,bw_method=None,*,data=None)
matplotlib.pyplot.viridis()
matplotlib.pyplot.vlines(x,ymin,ymax,colors=None,linestyles='solid',label='',*,data=None,**kwargs)
matplotlib.pyplot.waitforbuttonpress(timeout=-1)
matplotlib.pyplot.winter()
matplotlib.pyplot.xcorr(x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,*,data=None,**kwargs)
matplotlib.pyplot.xkcd(scale=1,length=100,randomness=2)
matplotlib.pyplot.xlabel(xlabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.pyplot.xlim(*args,**kwargs)
matplotlib.pyplot.xscale(value,**kwargs)
matplotlib.pyplot.xticks(ticks=None,labels=None,*,minor=False,**kwargs)
matplotlib.pyplot.ylabel(ylabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.pyplot.ylim(*args,**kwargs)
matplotlib.pyplot.yscale(value,**kwargs)
matplotlib.pyplot.yticks(ticks=None,labels=None,*,minor=False,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/offsetbox.py----------------------------------------
A:matplotlib.offsetbox.params->matplotlib._api.select_matching_signature(sigs, self, *args, **kwargs)
A:matplotlib.offsetbox.offsets_->numpy.cumsum([0] + [w + sep for w in widths])
A:matplotlib.offsetbox.maxh->max(widths)
A:matplotlib.offsetbox.height->max((y1 - y0 for (y0, y1) in yspans))
A:matplotlib.offsetbox.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.offsetbox.(a, b)->c.contains(mouseevent)
A:matplotlib.offsetbox.(bbox, offsets)->self._get_bbox_and_child_offsets(renderer)
A:matplotlib.offsetbox.bbox->offsetbox.get_bbox(renderer)
A:matplotlib.offsetbox.renderer->offsetbox.figure._get_renderer()
A:matplotlib.offsetbox.(px, py)->self.get_offset(self.get_bbox(renderer), renderer)
A:matplotlib.offsetbox.dpicor->offsetbox.figure._get_renderer().points_to_pixels(1.0)
A:matplotlib.offsetbox.((x0, x1), xoffsets)->_get_aligned_offsets([bbox.intervalx for bbox in bboxes], self.width, self.align)
A:matplotlib.offsetbox.(height, yoffsets)->_get_packed_offsets([bbox.height for bbox in bboxes], self.height, sep, self.mode)
A:matplotlib.offsetbox.((y0, y1), yoffsets)->_get_aligned_offsets([bbox.intervaly for bbox in bboxes], self.height, self.align)
A:matplotlib.offsetbox.(width, xoffsets)->_get_packed_offsets([bbox.width for bbox in bboxes], self.width, sep, self.mode)
A:matplotlib.offsetbox.self.patch->FancyBboxPatch(xy=(0.0, 0.0), width=1.0, height=1.0, facecolor='w', edgecolor='k', mutation_scale=self.prop.get_size_in_points(), snap=True, visible=frameon)
A:matplotlib.offsetbox.self.offset_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.self.dpi_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.self._clip_children->bool(val)
A:matplotlib.offsetbox.dpi_cor->offsetbox.figure._get_renderer().points_to_pixels(1.0)
A:matplotlib.offsetbox.tpath->matplotlib.transforms.TransformedPath(mpath.Path([[0, 0], [0, self.height], [self.width, self.height], [self.width, 0]]), self.get_transform())
A:matplotlib.offsetbox.self._text->matplotlib.text.Text(0, 0, s, **textprops)
A:matplotlib.offsetbox.self._baseline_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.(_, h_, d_)->offsetbox.figure._get_renderer().get_text_width_height_descent('lp', self._text._fontproperties, ismath='TeX' if self._text.get_usetex() else False)
A:matplotlib.offsetbox.(bbox, info, yd)->self._text._get_layout(renderer)
A:matplotlib.offsetbox.h_d->max(h_ - d_, h - yd)
A:matplotlib.offsetbox.ha->self._text.get_horizontalalignment()
A:matplotlib.offsetbox.self.ref_offset_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox._off->self.offset_transform.get_matrix()
A:matplotlib.offsetbox.ub->matplotlib.transforms.Bbox.union(bboxes)
A:matplotlib.offsetbox.loc->matplotlib._api.check_getitem(self.codes, loc=loc)
A:matplotlib.offsetbox.self.prop->FontProperties(size=s)
A:matplotlib.offsetbox.fontsize->offsetbox.figure._get_renderer().points_to_pixels(self.prop.get_size_in_points())
A:matplotlib.offsetbox.l->len(bbox)
A:matplotlib.offsetbox.self._bbox_to_anchor->matplotlib.transforms.Bbox.from_bounds(*bbox)
A:matplotlib.offsetbox.bbox_to_anchor->self.get_bbox_to_anchor()
A:matplotlib.offsetbox.(x0, y0)->_get_anchored_bbox(self.loc, Bbox.from_bounds(0, 0, bbox.width, bbox.height), bbox_to_anchor, pad)
A:matplotlib.offsetbox.container->parentbbox.padded(-borderpad)
A:matplotlib.offsetbox.self.txt->TextArea(s, textprops=prop)
A:matplotlib.offsetbox.fp->self.txt._text.get_fontproperties()
A:matplotlib.offsetbox.self.image->BboxImage(bbox=self.get_window_extent, cmap=cmap, norm=norm, interpolation=interpolation, origin=origin, filternorm=filternorm, filterrad=filterrad, resample=resample, **kwargs)
A:matplotlib.offsetbox.self._data->numpy.asarray(arr)
A:matplotlib.offsetbox.zoom->self.get_zoom()
A:matplotlib.offsetbox.data->self.get_data()
A:matplotlib.offsetbox.self._arrow_relpos->self.arrowprops.pop('relpos', (0.5, 0.5))
A:matplotlib.offsetbox.self.arrow_patch->FancyArrowPatch((0, 0), (1, 1), **self.arrowprops)
A:matplotlib.offsetbox.(x1, y1)->self._get_xy(renderer, x, y, xcoord)
A:matplotlib.offsetbox.(x2, y2)->self._get_xy(renderer, x, y, ycoord)
A:matplotlib.offsetbox.(ox0, oy0)->self._get_xy(renderer, x, y, self.boxcoords)
A:matplotlib.offsetbox.mutation_scale->offsetbox.figure._get_renderer().points_to_pixels(self.arrowprops['mutation_scale'])
A:matplotlib.offsetbox.arrow_end->self._get_position_xy(renderer)
A:matplotlib.offsetbox.patchA->self.arrowprops.get('patchA', self.patch)
A:matplotlib.offsetbox.canvas->property(lambda self: self.ref_artist.figure.canvas)
A:matplotlib.offsetbox.cids->property(lambda self: [disconnect.args[0] for disconnect in self._disconnectors[:2]])
A:matplotlib.offsetbox.self.background->self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
A:matplotlib.offsetbox.offset->offsetbox.get_offset(offsetbox.get_bbox(renderer), renderer)
A:matplotlib.offsetbox.(self.ox, self.oy)->ann.get_transform().transform(ann.xyann)
A:matplotlib.offsetbox.ann.xyann->ann.get_transform().inverted().transform((self.ox + dx, self.oy + dy))
matplotlib.offsetbox.AnchoredOffsetbox(self,loc,pad=0.4,borderpad=0.5,child=None,prop=None,frameon=True,bbox_to_anchor=None,bbox_transform=None,**kwargs)
matplotlib.offsetbox.AnchoredOffsetbox.__init__(self,loc,pad=0.4,borderpad=0.5,child=None,prop=None,frameon=True,bbox_to_anchor=None,bbox_transform=None,**kwargs)
matplotlib.offsetbox.AnchoredOffsetbox.draw(self,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.get_bbox(self,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.get_bbox_to_anchor(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_child(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_children(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_offset(self,bbox,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.set_bbox_to_anchor(self,bbox,transform=None)
matplotlib.offsetbox.AnchoredOffsetbox.set_child(self,child)
matplotlib.offsetbox.AnchoredOffsetbox.update_frame(self,bbox,fontsize=None)
matplotlib.offsetbox.AnchoredText(self,s,loc,pad=0.4,borderpad=0.5,prop=None,**kwargs)
matplotlib.offsetbox.AnchoredText.__init__(self,s,loc,pad=0.4,borderpad=0.5,prop=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox(self,offsetbox,xy,xybox=None,xycoords='data',boxcoords=None,frameon=True,pad=0.4,annotation_clip=None,box_alignment=(0.5,0.5),bboxprops=None,arrowprops=None,fontsize=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox.__init__(self,offsetbox,xy,xybox=None,xycoords='data',boxcoords=None,frameon=True,pad=0.4,annotation_clip=None,box_alignment=(0.5,0.5),bboxprops=None,arrowprops=None,fontsize=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox.__str__(self)
matplotlib.offsetbox.AnnotationBbox.anncoords(self)
matplotlib.offsetbox.AnnotationBbox.anncoords(self,coords)
matplotlib.offsetbox.AnnotationBbox.contains(self,mouseevent)
matplotlib.offsetbox.AnnotationBbox.draw(self,renderer)
matplotlib.offsetbox.AnnotationBbox.get_children(self)
matplotlib.offsetbox.AnnotationBbox.get_fontsize(self)
matplotlib.offsetbox.AnnotationBbox.get_tightbbox(self,renderer=None)
matplotlib.offsetbox.AnnotationBbox.get_window_extent(self,renderer=None)
matplotlib.offsetbox.AnnotationBbox.set_figure(self,fig)
matplotlib.offsetbox.AnnotationBbox.set_fontsize(self,s=None)
matplotlib.offsetbox.AnnotationBbox.update_positions(self,renderer)
matplotlib.offsetbox.AnnotationBbox.xyann(self)
matplotlib.offsetbox.AnnotationBbox.xyann(self,xyann)
matplotlib.offsetbox.AuxTransformBox(self,aux_transform)
matplotlib.offsetbox.AuxTransformBox.__init__(self,aux_transform)
matplotlib.offsetbox.AuxTransformBox.add_artist(self,a)
matplotlib.offsetbox.AuxTransformBox.draw(self,renderer)
matplotlib.offsetbox.AuxTransformBox.get_bbox(self,renderer)
matplotlib.offsetbox.AuxTransformBox.get_offset(self)
matplotlib.offsetbox.AuxTransformBox.get_transform(self)
matplotlib.offsetbox.AuxTransformBox.set_offset(self,xy)
matplotlib.offsetbox.AuxTransformBox.set_transform(self,t)
matplotlib.offsetbox.DraggableAnnotation(self,annotation,use_blit=False)
matplotlib.offsetbox.DraggableAnnotation.__init__(self,annotation,use_blit=False)
matplotlib.offsetbox.DraggableAnnotation.save_offset(self)
matplotlib.offsetbox.DraggableAnnotation.update_offset(self,dx,dy)
matplotlib.offsetbox.DraggableBase(self,ref_artist,use_blit=False)
matplotlib.offsetbox.DraggableBase.__init__(self,ref_artist,use_blit=False)
matplotlib.offsetbox.DraggableBase._check_still_parented(self)
matplotlib.offsetbox.DraggableBase.disconnect(self)
matplotlib.offsetbox.DraggableBase.finalize_offset(self)
matplotlib.offsetbox.DraggableBase.on_motion(self,evt)
matplotlib.offsetbox.DraggableBase.on_pick(self,evt)
matplotlib.offsetbox.DraggableBase.on_release(self,event)
matplotlib.offsetbox.DraggableBase.save_offset(self)
matplotlib.offsetbox.DraggableBase.update_offset(self,dx,dy)
matplotlib.offsetbox.DraggableOffsetBox(self,ref_artist,offsetbox,use_blit=False)
matplotlib.offsetbox.DraggableOffsetBox.__init__(self,ref_artist,offsetbox,use_blit=False)
matplotlib.offsetbox.DraggableOffsetBox.get_loc_in_canvas(self)
matplotlib.offsetbox.DraggableOffsetBox.save_offset(self)
matplotlib.offsetbox.DraggableOffsetBox.update_offset(self,dx,dy)
matplotlib.offsetbox.DrawingArea(self,width,height,xdescent=0.0,ydescent=0.0,clip=False)
matplotlib.offsetbox.DrawingArea.__init__(self,width,height,xdescent=0.0,ydescent=0.0,clip=False)
matplotlib.offsetbox.DrawingArea.add_artist(self,a)
matplotlib.offsetbox.DrawingArea.clip_children(self)
matplotlib.offsetbox.DrawingArea.clip_children(self,val)
matplotlib.offsetbox.DrawingArea.draw(self,renderer)
matplotlib.offsetbox.DrawingArea.get_bbox(self,renderer)
matplotlib.offsetbox.DrawingArea.get_offset(self)
matplotlib.offsetbox.DrawingArea.get_transform(self)
matplotlib.offsetbox.DrawingArea.set_offset(self,xy)
matplotlib.offsetbox.DrawingArea.set_transform(self,t)
matplotlib.offsetbox.HPacker(PackerBase)
matplotlib.offsetbox.HPacker._get_bbox_and_child_offsets(self,renderer)
matplotlib.offsetbox.OffsetBox(self,*args,**kwargs)
matplotlib.offsetbox.OffsetBox.__init__(self,*args,**kwargs)
matplotlib.offsetbox.OffsetBox._get_bbox_and_child_offsets(self,renderer)
matplotlib.offsetbox.OffsetBox.axes(self,ax)
matplotlib.offsetbox.OffsetBox.contains(self,mouseevent)
matplotlib.offsetbox.OffsetBox.draw(self,renderer)
matplotlib.offsetbox.OffsetBox.get_bbox(self,renderer)
matplotlib.offsetbox.OffsetBox.get_children(self)
matplotlib.offsetbox.OffsetBox.get_extent(self,renderer)
matplotlib.offsetbox.OffsetBox.get_extent_offsets(self,renderer)
matplotlib.offsetbox.OffsetBox.get_offset(self,bbox,renderer)
matplotlib.offsetbox.OffsetBox.get_visible_children(self)
matplotlib.offsetbox.OffsetBox.get_window_extent(self,renderer=None)
matplotlib.offsetbox.OffsetBox.set_figure(self,fig)
matplotlib.offsetbox.OffsetBox.set_height(self,height)
matplotlib.offsetbox.OffsetBox.set_offset(self,xy)
matplotlib.offsetbox.OffsetBox.set_width(self,width)
matplotlib.offsetbox.OffsetImage(self,arr,zoom=1,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,dpi_cor=True,**kwargs)
matplotlib.offsetbox.OffsetImage.__init__(self,arr,zoom=1,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,dpi_cor=True,**kwargs)
matplotlib.offsetbox.OffsetImage.draw(self,renderer)
matplotlib.offsetbox.OffsetImage.get_bbox(self,renderer)
matplotlib.offsetbox.OffsetImage.get_children(self)
matplotlib.offsetbox.OffsetImage.get_data(self)
matplotlib.offsetbox.OffsetImage.get_offset(self)
matplotlib.offsetbox.OffsetImage.get_zoom(self)
matplotlib.offsetbox.OffsetImage.set_data(self,arr)
matplotlib.offsetbox.OffsetImage.set_zoom(self,zoom)
matplotlib.offsetbox.PackerBase(self,pad=0.0,sep=0.0,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.PackerBase.__init__(self,pad=0.0,sep=0.0,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.PaddedBox(self,child,pad=0.0,draw_frame=False,patch_attrs=None)
matplotlib.offsetbox.PaddedBox.__init__(self,child,pad=0.0,draw_frame=False,patch_attrs=None)
matplotlib.offsetbox.PaddedBox._get_bbox_and_child_offsets(self,renderer)
matplotlib.offsetbox.PaddedBox.draw(self,renderer)
matplotlib.offsetbox.PaddedBox.draw_frame(self,renderer)
matplotlib.offsetbox.PaddedBox.update_frame(self,bbox,fontsize=None)
matplotlib.offsetbox.TextArea(self,s,textprops=None,multilinebaseline=False)
matplotlib.offsetbox.TextArea.__init__(self,s,textprops=None,multilinebaseline=False)
matplotlib.offsetbox.TextArea.draw(self,renderer)
matplotlib.offsetbox.TextArea.get_bbox(self,renderer)
matplotlib.offsetbox.TextArea.get_multilinebaseline(self)
matplotlib.offsetbox.TextArea.get_offset(self)
matplotlib.offsetbox.TextArea.get_text(self)
matplotlib.offsetbox.TextArea.set_multilinebaseline(self,t)
matplotlib.offsetbox.TextArea.set_offset(self,xy)
matplotlib.offsetbox.TextArea.set_text(self,s)
matplotlib.offsetbox.TextArea.set_transform(self,t)
matplotlib.offsetbox.VPacker(PackerBase)
matplotlib.offsetbox.VPacker._get_bbox_and_child_offsets(self,renderer)
matplotlib.offsetbox._bbox_artist(*args,**kwargs)
matplotlib.offsetbox._compat_get_offset(meth)
matplotlib.offsetbox._get_aligned_offsets(yspans,height,align='baseline')
matplotlib.offsetbox._get_anchored_bbox(loc,bbox,parentbbox,borderpad)
matplotlib.offsetbox._get_packed_offsets(widths,total,sep,mode='fixed')
matplotlib.offsetbox.bbox_artist(*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/figure.py----------------------------------------
A:matplotlib.figure._log->logging.getLogger(__name__)
A:matplotlib.figure.self._counter->itertools.count(next_counter)
A:matplotlib.figure.self._axes[a]->next(self._counter)
A:matplotlib.figure.next_counter->super().__getstate__().pop('_counter')
A:matplotlib.figure.artists->self._get_draw_artists(renderer)
A:matplotlib.figure.childa->sfig.get_children()
A:matplotlib.figure.locator->child.get_axes_locator()
A:matplotlib.figure.allsubplots->all((ax.get_subplotspec() for ax in self.axes))
A:matplotlib.figure.(inside, info)->self._default_contains(mouseevent, figure=self)
A:matplotlib.figure.inside->self.bbox.contains(mouseevent.x, mouseevent.y)
A:matplotlib.figure.suplab->getattr(self, info['name'])
A:matplotlib.figure.x->kwargs.pop('x', None)
A:matplotlib.figure.y->kwargs.pop('y', None)
A:matplotlib.figure.sup->self.text(x, y, t, **kwargs)
A:matplotlib.figure.frameon->property(get_frameon, set_frameon)
A:matplotlib.figure.(projection_class, pkw)->self._process_projection_requirements(*args, **kwargs)
A:matplotlib.figure.a->projection_class(self, rect, **pkw)
A:matplotlib.figure.args->tuple(map(int, str(args[0])))
A:matplotlib.figure.ax->self.add_subplot(gs[slc], **{'label': str(name), **subplot_kw, **per_subplot_kw.get(name, {})})
A:matplotlib.figure.gridspec_kw->dict(gridspec_kw or {})
A:matplotlib.figure.gs->self._subplotspec.get_gridspec()
A:matplotlib.figure.axs->self._subplotspec.get_gridspec().subplots(sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw)
A:matplotlib.figure.siblings->grouper.get_siblings(ax)
A:matplotlib.figure.last_ax->_break_share_link(ax, ax._shared_axes[name])
A:matplotlib.figure.self._axobservers->matplotlib.cbook.CallbackRegistry()
A:matplotlib.figure.(handles, labels, extra_args, kwargs)->matplotlib.legend._parse_legend_args(self.axes, *args, **kwargs)
A:matplotlib.figure.transform->kwargs.pop('bbox_transform', self.transSubfigure)
A:matplotlib.figure.l->matplotlib.legend.Legend(self, handles, labels, *extra_args, bbox_transform=transform, **kwargs)
A:matplotlib.figure.text->Text(x=x, y=y, text=s, **effective_kwargs)
A:matplotlib.figure.current_ax->self.gca()
A:matplotlib.figure.(cax, kwargs)->matplotlib.colorbar.make_axes(ax, **kwargs)
A:matplotlib.figure.cb->matplotlib.colorbar.Colorbar(cax, mappable, **cb_kw)
A:matplotlib.figure.pos->self.add_subplot(gs[slc], **{'label': str(name), **subplot_kw, **per_subplot_kw.get(name, {})}).yaxis.get_label_position()
A:matplotlib.figure._->kwargs.pop('figure', None)
A:matplotlib.figure.sfarr->numpy.empty((nrows, ncols), dtype=object)
A:matplotlib.figure.sfarr[j, i]->self.add_subfigure(gs[j, i], **kwargs)
A:matplotlib.figure.(bottoms, tops, lefts, rights)->self._subplotspec.get_gridspec().get_grid_positions(self)
A:matplotlib.figure.bbox->self.add_subplot(gs[slc], **{'label': str(name), **subplot_kw, **per_subplot_kw.get(name, {})}).get_tightbbox(renderer)
A:matplotlib.figure.sf->SubFigure(self, subplotspec, **kwargs)
A:matplotlib.figure.im->matplotlib.image.FigureImage(self, cmap=cmap, norm=norm, offsetx=xo, offsety=yo, origin=origin, **kwargs)
A:matplotlib.figure.projection_class->matplotlib.projections.get_projection_class(projection)
A:matplotlib.figure.(projection_class, extra_kwargs)->projection._as_mpl_axes()
A:matplotlib.figure.renderer->_get_renderer(self)
A:matplotlib.figure.isfigure->hasattr(self, 'bbox_inches')
A:matplotlib.figure._bbox->TransformedBbox(_bbox, self.dpi_scale_trans.inverted())
A:matplotlib.figure.layout->inspect.cleandoc(layout)
A:matplotlib.figure.mosaic->_make_array(mosaic)
A:matplotlib.figure.per_subplot_kw->self._norm_per_subplot_kw(per_subplot_kw)
A:matplotlib.figure.out->numpy.zeros((len(inp), len(r0)), dtype=object)
A:matplotlib.figure.unique_ids->matplotlib.cbook._OrderedSet()
A:matplotlib.figure.nested[j, k]->_make_array(v)
A:matplotlib.figure.output->dict()
A:matplotlib.figure.this_level->dict()
A:matplotlib.figure.indx->numpy.argwhere(mosaic == name)
A:matplotlib.figure.(start_row, start_col)->numpy.min(indx, axis=0)
A:matplotlib.figure.nested_output->_do_layout(gs[j, k].subgridspec(rows, cols), nested_mosaic, *_identify_keys_and_nested(nested_mosaic))
A:matplotlib.figure.ret->_do_layout(gs, mosaic, *_identify_keys_and_nested(mosaic))
A:matplotlib.figure.ax0->next(iter(ret.values()))
A:matplotlib.figure.callbacks->matplotlib._api.deprecated('3.6', alternative="the 'resize_event' signal in Figure.canvas.callbacks")(property(lambda self: self._fig_callbacks))
A:matplotlib.figure.self.bbox->TransformedBbox(self.bbox_inches, self.dpi_scale_trans)
A:matplotlib.figure.self.transSubfigure->BboxTransformTo(self.bbox)
A:matplotlib.figure.self.patch->Rectangle(xy=(0, 0), width=1, height=1, visible=frameon, facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth, in_layout=False)
A:matplotlib.figure.wr->numpy.asarray(gs.get_width_ratios())
A:matplotlib.figure.hr->numpy.asarray(gs.get_height_ratios())
A:matplotlib.figure.self.bbox_relative->matplotlib.transforms.Bbox.from_bounds(x0, y0, dx, dy)
A:matplotlib.figure.self._fig_callbacks->matplotlib.cbook.CallbackRegistry(signals=['dpi_changed'])
A:matplotlib.figure.self._canvas_callbacks->matplotlib.cbook.CallbackRegistry(signals=FigureCanvasBase.events)
A:matplotlib.figure.self._button_pick_id->connect('button_press_event', self.pick)
A:matplotlib.figure.self._scroll_pick_id->connect('scroll_event', self.pick)
A:matplotlib.figure.self.bbox_inches->matplotlib.transforms.Bbox.from_bounds(0, 0, *figsize)
A:matplotlib.figure.self.dpi_scale_trans->Affine2D().scale(dpi)
A:matplotlib.figure.self.transFigure->BboxTransformTo(self.bbox)
A:matplotlib.figure.subplotpars->SubplotParams()
A:matplotlib.figure.self._axstack->_AxesStack()
A:matplotlib.figure.new_layout_engine->PlaceHolderLayoutEngine(self._layout_engine.adjust_compatible, self._layout_engine.colorbar_gridspec)
A:matplotlib.figure.(w, h)->self.get_size_inches()
A:matplotlib.figure.dpi->self.get_dpi()
A:matplotlib.figure.info->self.get_layout_engine().get()
A:matplotlib.figure.size->numpy.array([w, h])
A:matplotlib.figure.state->super().__getstate__()
A:matplotlib.figure.state['_dpi']->super().__getstate__().get('_original_dpi', state['_dpi'])
A:matplotlib.figure.version->super().__getstate__().pop('__mpl_version__')
A:matplotlib.figure.restore_to_pylab->super().__getstate__().pop('_restore_to_pylab', False)
A:matplotlib.figure.allnums->matplotlib.pyplot.get_fignums()
A:matplotlib.figure.backend->matplotlib.pyplot._get_backend_mod()
A:matplotlib.figure.mgr->matplotlib.pyplot._get_backend_mod().new_figure_manager_given_figure(num, self)
A:matplotlib.figure.line->matplotlib.lines.Line2D([event.xdata], [event.ydata], marker='+', color='r')
A:matplotlib.figure.engine->TightLayoutEngine(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
A:matplotlib.figure.previous_engine->self.get_layout_engine()
A:matplotlib.figure.figsize_min->numpy.array((4.0, 2.0))
A:matplotlib.figure.figsize_max->numpy.array((16.0, 16.0))
A:matplotlib.figure.newsize->numpy.clip(newsize, figsize_min, figsize_max)
matplotlib.figure.Figure(self,figsize=None,dpi=None,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,subplotpars=None,tight_layout=None,constrained_layout=None,*,layout=None,**kwargs)
matplotlib.figure.Figure.__getstate__(self)
matplotlib.figure.Figure.__init__(self,figsize=None,dpi=None,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,subplotpars=None,tight_layout=None,constrained_layout=None,*,layout=None,**kwargs)
matplotlib.figure.Figure.__repr__(self)
matplotlib.figure.Figure.__setstate__(self,state)
matplotlib.figure.Figure.__str__(self)
matplotlib.figure.Figure._check_layout_engines_compat(self,old,new)
matplotlib.figure.Figure._get_dpi(self)
matplotlib.figure.Figure._get_renderer(self)
matplotlib.figure.Figure._repr_html_(self)
matplotlib.figure.Figure._set_dpi(self,dpi,forward=True)
matplotlib.figure.Figure.add_axobserver(self,func)
matplotlib.figure.Figure.axes(self)
matplotlib.figure.Figure.clear(self,keep_observers=False)
matplotlib.figure.Figure.draw(self,renderer)
matplotlib.figure.Figure.draw_artist(self,a)
matplotlib.figure.Figure.draw_without_rendering(self)
matplotlib.figure.Figure.execute_constrained_layout(self,renderer=None)
matplotlib.figure.Figure.figimage(self,X,xo=0,yo=0,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,origin=None,resize=False,**kwargs)
matplotlib.figure.Figure.get_constrained_layout(self)
matplotlib.figure.Figure.get_constrained_layout_pads(self,relative=False)
matplotlib.figure.Figure.get_dpi(self)
matplotlib.figure.Figure.get_figheight(self)
matplotlib.figure.Figure.get_figwidth(self)
matplotlib.figure.Figure.get_layout_engine(self)
matplotlib.figure.Figure.get_size_inches(self)
matplotlib.figure.Figure.get_tight_layout(self)
matplotlib.figure.Figure.ginput(self,n=1,timeout=30,show_clicks=True,mouse_add=MouseButton.LEFT,mouse_pop=MouseButton.RIGHT,mouse_stop=MouseButton.MIDDLE)
matplotlib.figure.Figure.pick(self,mouseevent)
matplotlib.figure.Figure.savefig(self,fname,*,transparent=None,**kwargs)
matplotlib.figure.Figure.set_canvas(self,canvas)
matplotlib.figure.Figure.set_constrained_layout(self,constrained)
matplotlib.figure.Figure.set_constrained_layout_pads(self,**kwargs)
matplotlib.figure.Figure.set_dpi(self,val)
matplotlib.figure.Figure.set_figheight(self,val,forward=True)
matplotlib.figure.Figure.set_figwidth(self,val,forward=True)
matplotlib.figure.Figure.set_layout_engine(self,layout=None,**kwargs)
matplotlib.figure.Figure.set_size_inches(self,w,h=None,forward=True)
matplotlib.figure.Figure.set_tight_layout(self,tight)
matplotlib.figure.Figure.show(self,warn=True)
matplotlib.figure.Figure.tight_layout(self,*,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.figure.Figure.waitforbuttonpress(self,timeout=-1)
matplotlib.figure.FigureBase(self,**kwargs)
matplotlib.figure.FigureBase.__init__(self,**kwargs)
matplotlib.figure.FigureBase._add_axes_internal(self,ax,key)
matplotlib.figure.FigureBase._gci(self)
matplotlib.figure.FigureBase._get_draw_artists(self,renderer)
matplotlib.figure.FigureBase._norm_per_subplot_kw(per_subplot_kw)
matplotlib.figure.FigureBase._normalize_grid_string(layout)
matplotlib.figure.FigureBase._process_projection_requirements(self,*args,axes_class=None,polar=False,projection=None,**kwargs)
matplotlib.figure.FigureBase._set_artist_props(self,a)
matplotlib.figure.FigureBase._suplabels(self,t,info,**kwargs)
matplotlib.figure.FigureBase.add_artist(self,artist,clip=False)
matplotlib.figure.FigureBase.add_axes(self,*args,**kwargs)
matplotlib.figure.FigureBase.add_gridspec(self,nrows=1,ncols=1,**kwargs)
matplotlib.figure.FigureBase.add_subfigure(self,subplotspec,**kwargs)
matplotlib.figure.FigureBase.add_subplot(self,*args,**kwargs)
matplotlib.figure.FigureBase.align_labels(self,axs=None)
matplotlib.figure.FigureBase.align_xlabels(self,axs=None)
matplotlib.figure.FigureBase.align_ylabels(self,axs=None)
matplotlib.figure.FigureBase.autofmt_xdate(self,bottom=0.2,rotation=30,ha='right',which='major')
matplotlib.figure.FigureBase.clear(self,keep_observers=False)
matplotlib.figure.FigureBase.clf(self,keep_observers=False)
matplotlib.figure.FigureBase.colorbar(self,mappable,cax=None,ax=None,use_gridspec=True,**kwargs)
matplotlib.figure.FigureBase.contains(self,mouseevent)
matplotlib.figure.FigureBase.delaxes(self,ax)
matplotlib.figure.FigureBase.gca(self)
matplotlib.figure.FigureBase.get_children(self)
matplotlib.figure.FigureBase.get_default_bbox_extra_artists(self)
matplotlib.figure.FigureBase.get_edgecolor(self)
matplotlib.figure.FigureBase.get_facecolor(self)
matplotlib.figure.FigureBase.get_frameon(self)
matplotlib.figure.FigureBase.get_linewidth(self)
matplotlib.figure.FigureBase.get_tightbbox(self,renderer=None,bbox_extra_artists=None)
matplotlib.figure.FigureBase.get_window_extent(self,renderer=None,*args,**kwargs)
matplotlib.figure.FigureBase.legend(self,*args,**kwargs)
matplotlib.figure.FigureBase.sca(self,a)
matplotlib.figure.FigureBase.set_edgecolor(self,color)
matplotlib.figure.FigureBase.set_facecolor(self,color)
matplotlib.figure.FigureBase.set_frameon(self,b)
matplotlib.figure.FigureBase.set_linewidth(self,linewidth)
matplotlib.figure.FigureBase.subfigures(self,nrows=1,ncols=1,squeeze=True,wspace=None,hspace=None,width_ratios=None,height_ratios=None,**kwargs)
matplotlib.figure.FigureBase.subplot_mosaic(self,mosaic,*,sharex=False,sharey=False,width_ratios=None,height_ratios=None,empty_sentinel='.',subplot_kw=None,per_subplot_kw=None,gridspec_kw=None)
matplotlib.figure.FigureBase.subplots(self,nrows=1,ncols=1,*,sharex=False,sharey=False,squeeze=True,width_ratios=None,height_ratios=None,subplot_kw=None,gridspec_kw=None)
matplotlib.figure.FigureBase.subplots_adjust(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure.FigureBase.suptitle(self,t,**kwargs)
matplotlib.figure.FigureBase.supxlabel(self,t,**kwargs)
matplotlib.figure.FigureBase.supylabel(self,t,**kwargs)
matplotlib.figure.FigureBase.text(self,x,y,s,fontdict=None,**kwargs)
matplotlib.figure.SubFigure(self,parent,subplotspec,*,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,**kwargs)
matplotlib.figure.SubFigure.__init__(self,parent,subplotspec,*,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,**kwargs)
matplotlib.figure.SubFigure._get_renderer(self)
matplotlib.figure.SubFigure._redo_transform_rel_fig(self,bbox=None)
matplotlib.figure.SubFigure.axes(self)
matplotlib.figure.SubFigure.dpi(self)
matplotlib.figure.SubFigure.dpi(self,value)
matplotlib.figure.SubFigure.draw(self,renderer)
matplotlib.figure.SubFigure.get_constrained_layout(self)
matplotlib.figure.SubFigure.get_constrained_layout_pads(self,relative=False)
matplotlib.figure.SubFigure.get_dpi(self)
matplotlib.figure.SubFigure.get_layout_engine(self)
matplotlib.figure.SubFigure.set_dpi(self,val)
matplotlib.figure.SubplotParams(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure.SubplotParams.__init__(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure.SubplotParams.update(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure._AxesStack(self)
matplotlib.figure._AxesStack.__getstate__(self)
matplotlib.figure._AxesStack.__init__(self)
matplotlib.figure._AxesStack.__setstate__(self,state)
matplotlib.figure._AxesStack.add(self,a)
matplotlib.figure._AxesStack.as_list(self)
matplotlib.figure._AxesStack.bubble(self,a)
matplotlib.figure._AxesStack.current(self)
matplotlib.figure._AxesStack.remove(self,a)
matplotlib.figure._stale_figure_callback(self,val)
matplotlib.figure.figaspect(arg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/quiver.py----------------------------------------
A:matplotlib.quiver.self.text->matplotlib.text.Text(text=label, horizontalalignment=self.halign[self.labelpos], verticalalignment=self.valign[self.labelpos], fontproperties=self.fontproperties)
A:matplotlib.quiver.self.verts->self.Q._make_verts(np.array([u]), np.array([v]), angle)
A:matplotlib.quiver.self.vector->matplotlib.collections.PolyCollection(self.verts, offsets=[(self.X, self.Y)], offset_transform=self.get_transform(), **kwargs)
A:matplotlib.quiver.pos->self.get_transform().transform((self.X, self.Y))
A:matplotlib.quiver.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.quiver.nargs->len(args)
A:matplotlib.quiver.(U, V)->numpy.atleast_1d(*args)
A:matplotlib.quiver.(U, V, C)->numpy.atleast_1d(*args)
A:matplotlib.quiver.(X, Y, U, V)->numpy.atleast_1d(*args)
A:matplotlib.quiver.(X, Y, U, V, C)->_parse_args(*args, caller_name='quiver')
A:matplotlib.quiver.X->X.ravel().ravel()
A:matplotlib.quiver.Y->Y.ravel().ravel()
A:matplotlib.quiver.indexgrid->numpy.meshgrid(np.arange(nc), np.arange(nr))
A:matplotlib.quiver.self.XY->numpy.column_stack((X, Y))
A:matplotlib.quiver.self.N->len(X)
A:matplotlib.quiver.self.headlength->float(headlength)
A:matplotlib.quiver.self.pivot->pivot.lower()
A:matplotlib.quiver.self.transform->kwargs.pop('transform', ax.transData)
A:matplotlib.quiver.trans->matplotlib.transforms.Affine2D().scale(dx)
A:matplotlib.quiver.sn->max(10, math.sqrt(self.N))
A:matplotlib.quiver.offset_trf->self.get_offset_transform()
A:matplotlib.quiver.XY->numpy.ma.array(XY)
A:matplotlib.quiver.bbox->matplotlib.transforms.Bbox.null()
A:matplotlib.quiver.verts->self._make_verts(self.U, self.V, self.angles)
A:matplotlib.quiver.U->numpy.ma.masked_invalid(U, copy=True).ravel()
A:matplotlib.quiver.V->numpy.ma.masked_invalid(V, copy=True).ravel()
A:matplotlib.quiver.C->numpy.ma.array(C, mask=mask, copy=False)
A:matplotlib.quiver.mask->numpy.ma.mask_or(mask, C.mask, copy=False, shrink=True)
A:matplotlib.quiver.self.U->numpy.ma.masked_invalid(U, copy=True).ravel().filled(1)
A:matplotlib.quiver.self.V->numpy.ma.masked_invalid(V, copy=True).ravel().filled(1)
A:matplotlib.quiver.dx->self._dots_per_unit(self.scale_units)
A:matplotlib.quiver.xy->numpy.column_stack((x, y))
A:matplotlib.quiver.uv->numpy.column_stack((U, V))
A:matplotlib.quiver.xyp->self.axes.transData.transform(self.XY + eps * uv)
A:matplotlib.quiver.angles->numpy.arctan2(dxy[:, 1], dxy[:, 0])
A:matplotlib.quiver.(angles, lengths)->self._angles_lengths(U, V, eps=eps)
A:matplotlib.quiver.a->numpy.abs(uv)
A:matplotlib.quiver.amean->numpy.abs(uv).mean()
A:matplotlib.quiver.(X, Y)->self._h_arrows(length)
A:matplotlib.quiver.theta->theta.reshape((-1, 1)).reshape((-1, 1))
A:matplotlib.quiver.N->len(length)
A:matplotlib.quiver.length->length.reshape(N, 1).reshape(N, 1)
A:matplotlib.quiver.x->numpy.array([0, -self.headaxislength, -self.headlength, 0], np.float64)
A:matplotlib.quiver.y->numpy.repeat(y[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.x0->numpy.array([0, minsh - self.headaxislength, minsh - self.headlength, minsh], np.float64)
A:matplotlib.quiver.short->numpy.repeat(length < minsh, 8, axis=1)
A:matplotlib.quiver.X1->numpy.repeat(x1[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.Y1->numpy.repeat(y1[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.tooshort->numpy.repeat(tooshort, 8, 1)
A:matplotlib.quiver.quiver_doc->matplotlib._api.deprecated('3.7')(property(lambda self: _quiver_doc))
A:matplotlib.quiver.self.flip->numpy.atleast_1d(flip_barb)
A:matplotlib.quiver.transform->kwargs.pop('transform', ax.transData)
A:matplotlib.quiver.(x, y, u, v, c)->_parse_args(*args, caller_name='barbs')
A:matplotlib.quiver.(n_flags, mag)->divmod(mag, flag)
A:matplotlib.quiver.(n_barb, mag)->divmod(mag, full)
A:matplotlib.quiver.pivot_points->dict(tip=0.0, middle=-length / 2.0)
A:matplotlib.quiver.endy->float(pivot)
A:matplotlib.quiver.circ->CirclePolygon((0, 0), radius=empty_rad).get_verts()
A:matplotlib.quiver.empty_barb->numpy.concatenate((circ, circ[::-1]))
A:matplotlib.quiver.poly_verts->matplotlib.transforms.Affine2D().rotate(-angle).transform(poly_verts)
A:matplotlib.quiver.self.u->numpy.ma.masked_invalid(U, copy=True).ravel()
A:matplotlib.quiver.self.v->numpy.ma.masked_invalid(V, copy=True).ravel()
A:matplotlib.quiver.flip->numpy.broadcast_to(self.flip, self.u.shape)
A:matplotlib.quiver.c->numpy.ma.masked_invalid(C, copy=True).ravel()
A:matplotlib.quiver.(x, y, u, v, c, flip)->matplotlib.cbook.delete_masked_points(self.x.ravel(), self.y.ravel(), self.u, self.v, c, flip.ravel())
A:matplotlib.quiver.(x, y, u, v, flip)->matplotlib.cbook.delete_masked_points(self.x.ravel(), self.y.ravel(), self.u, self.v, flip.ravel())
A:matplotlib.quiver.magnitude->numpy.hypot(u, v)
A:matplotlib.quiver.(flags, barbs, halves, empty)->self._find_tails(magnitude, self.rounding, **self.barb_increments)
A:matplotlib.quiver.plot_barbs->self._make_barbs(u, v, flags, barbs, halves, empty, self._length, self._pivot, self.sizes, self.fill_empty, flip)
A:matplotlib.quiver.(x, y, u, v)->matplotlib.cbook.delete_masked_points(self.x.ravel(), self.y.ravel(), self.u, self.v)
A:matplotlib.quiver.barbs_doc->matplotlib._api.deprecated('3.7')(property(lambda self: _barbs_doc))
matplotlib.quiver.Barbs(self,ax,*args,pivot='tip',length=7,barbcolor=None,flagcolor=None,sizes=None,fill_empty=False,barb_increments=None,rounding=True,flip_barb=False,**kwargs)
matplotlib.quiver.Barbs.__init__(self,ax,*args,pivot='tip',length=7,barbcolor=None,flagcolor=None,sizes=None,fill_empty=False,barb_increments=None,rounding=True,flip_barb=False,**kwargs)
matplotlib.quiver.Barbs._find_tails(self,mag,rounding=True,half=5,full=10,flag=50)
matplotlib.quiver.Barbs._make_barbs(self,u,v,nflags,nbarbs,half_barb,empty_flag,length,pivot,sizes,fill_empty,flip)
matplotlib.quiver.Barbs.set_UVC(self,U,V,C=None)
matplotlib.quiver.Barbs.set_offsets(self,xy)
matplotlib.quiver.Quiver(self,ax,*args,scale=None,headwidth=3,headlength=5,headaxislength=4.5,minshaft=1,minlength=1,units='width',scale_units=None,angles='uv',width=None,color='k',pivot='tail',**kwargs)
matplotlib.quiver.Quiver.__init__(self,ax,*args,scale=None,headwidth=3,headlength=5,headaxislength=4.5,minshaft=1,minlength=1,units='width',scale_units=None,angles='uv',width=None,color='k',pivot='tail',**kwargs)
matplotlib.quiver.Quiver._angles_lengths(self,U,V,eps=1)
matplotlib.quiver.Quiver._dots_per_unit(self,units)
matplotlib.quiver.Quiver._h_arrows(self,length)
matplotlib.quiver.Quiver._init(self)
matplotlib.quiver.Quiver._make_verts(self,U,V,angles)
matplotlib.quiver.Quiver._set_transform(self)
matplotlib.quiver.Quiver.draw(self,renderer)
matplotlib.quiver.Quiver.get_datalim(self,transData)
matplotlib.quiver.Quiver.set_UVC(self,U,V,C=None)
matplotlib.quiver.QuiverKey(self,Q,X,Y,U,label,*,angle=0,coordinates='axes',color=None,labelsep=0.1,labelpos='N',labelcolor=None,fontproperties=None,**kwargs)
matplotlib.quiver.QuiverKey.__init__(self,Q,X,Y,U,label,*,angle=0,coordinates='axes',color=None,labelsep=0.1,labelpos='N',labelcolor=None,fontproperties=None,**kwargs)
matplotlib.quiver.QuiverKey._init(self)
matplotlib.quiver.QuiverKey._set_transform(self)
matplotlib.quiver.QuiverKey._text_shift(self)
matplotlib.quiver.QuiverKey.contains(self,mouseevent)
matplotlib.quiver.QuiverKey.draw(self,renderer)
matplotlib.quiver.QuiverKey.labelsep(self)
matplotlib.quiver.QuiverKey.set_figure(self,fig)
matplotlib.quiver._check_consistent_shapes(*arrays)
matplotlib.quiver._parse_args(*args,caller_name='function')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/bezier.py----------------------------------------
A:matplotlib.bezier.k->min(k, n - k)
A:matplotlib.bezier.i->numpy.arange(1, k + 1)
A:matplotlib.bezier.beta->_de_casteljau1(beta, t)
A:matplotlib.bezier.start->bezier_point_at_t(t0)
A:matplotlib.bezier.end->bezier_point_at_t(t1)
A:matplotlib.bezier.start_inside->inside_closedpath(start)
A:matplotlib.bezier.end_inside->inside_closedpath(end)
A:matplotlib.bezier.middle->bezier_point_at_t(middle_t)
A:matplotlib.bezier.middle_inside->inside_closedpath(middle)
A:matplotlib.bezier.self._cpoints->numpy.asarray(control_points)
A:matplotlib.bezier.self._orders->numpy.arange(self._N)
A:matplotlib.bezier.t->numpy.asarray(t)
A:matplotlib.bezier.r->numpy.roots(pi[::-1])
A:matplotlib.bezier.roots->numpy.concatenate(roots)
A:matplotlib.bezier.dims->numpy.concatenate(dims)
A:matplotlib.bezier.bz->BezierSegment(bezier)
A:matplotlib.bezier.(t0, t1)->find_bezier_t_intersecting_with_closedpath(bezier_point_at_t, inside_closedpath, tolerance=tolerance)
A:matplotlib.bezier.(_left, _right)->split_de_casteljau(bezier, (t0 + t1) / 2.0)
A:matplotlib.bezier.path_iter->path.iter_segments()
A:matplotlib.bezier.(ctl_points, command)->next(path_iter)
A:matplotlib.bezier.begin_inside->inside(ctl_points[-2:])
A:matplotlib.bezier.bezier_path->numpy.concatenate([ctl_points_old[-2:], ctl_points])
A:matplotlib.bezier.bp->numpy.concatenate([ctl_points_old[-2:], ctl_points]).reshape((-1, 2))
A:matplotlib.bezier.(left, right)->split_bezier_intersecting_with_closedpath(bp, inside, tolerance)
A:matplotlib.bezier.path_in->Path(np.concatenate([path.vertices[:iold], verts_left]), np.concatenate([path.codes[:iold], codes_left]))
A:matplotlib.bezier.path_out->Path(np.concatenate([verts_right, path.vertices[i:]]), np.concatenate([codes_right, path.codes[i:]]))
A:matplotlib.bezier.theta1->numpy.arctan2(dx1, dy1)
A:matplotlib.bezier.theta2->numpy.arctan2(dx2, dy2)
A:matplotlib.bezier.dtheta->abs(theta1 - theta2)
A:matplotlib.bezier.parallel_test->check_if_parallel(c1x - cmx, c1y - cmy, cmx - c2x, cmy - c2y)
A:matplotlib.bezier.(cos_t1, sin_t1)->get_cos_sin(c1x, c1y, cmx, cmy)
A:matplotlib.bezier.(cos_t2, sin_t2)->get_cos_sin(cmx, cmy, c3x, c3y)
A:matplotlib.bezier.(c1x_left, c1y_left, c1x_right, c1y_right)->get_normal_points(c1x, c1y, cos_t1, sin_t1, width * w1)
A:matplotlib.bezier.(c2x_left, c2y_left, c2x_right, c2y_right)->get_normal_points(c2x, c2y, cos_t2, sin_t2, width)
A:matplotlib.bezier.(cmx_left, cmy_left)->get_intersection(c1x_left, c1y_left, cos_t1, sin_t1, c2x_left, c2y_left, cos_t2, sin_t2)
A:matplotlib.bezier.(cmx_right, cmy_right)->get_intersection(c1x_right, c1y_right, cos_t1, sin_t1, c2x_right, c2y_right, cos_t2, sin_t2)
A:matplotlib.bezier.(c3x_left, c3y_left, c3x_right, c3y_right)->get_normal_points(c3x, c3y, cos_t2, sin_t2, width * w2)
A:matplotlib.bezier.(cos_t123, sin_t123)->get_cos_sin(c12x, c12y, c23x, c23y)
A:matplotlib.bezier.(c123x_left, c123y_left, c123x_right, c123y_right)->get_normal_points(c123x, c123y, cos_t123, sin_t123, width * wm)
A:matplotlib.bezier.path_left->find_control_points(c1x_left, c1y_left, c123x_left, c123y_left, c3x_left, c3y_left)
A:matplotlib.bezier.path_right->find_control_points(c1x_right, c1y_right, c123x_right, c123y_right, c3x_right, c3y_right)
matplotlib.bezier.BezierSegment(self,control_points)
matplotlib.bezier.BezierSegment.__init__(self,control_points)
matplotlib.bezier.BezierSegment.axis_aligned_extrema(self)
matplotlib.bezier.BezierSegment.control_points(self)
matplotlib.bezier.BezierSegment.degree(self)
matplotlib.bezier.BezierSegment.dimension(self)
matplotlib.bezier.BezierSegment.point_at_t(self,t)
matplotlib.bezier.BezierSegment.polynomial_coefficients(self)
matplotlib.bezier.NonIntersectingPathException(ValueError)
matplotlib.bezier._comb(n,k)
matplotlib.bezier._de_casteljau1(beta,t)
matplotlib.bezier.check_if_parallel(dx1,dy1,dx2,dy2,tolerance=1e-05)
matplotlib.bezier.find_bezier_t_intersecting_with_closedpath(bezier_point_at_t,inside_closedpath,t0=0.0,t1=1.0,tolerance=0.01)
matplotlib.bezier.find_control_points(c1x,c1y,mmx,mmy,c2x,c2y)
matplotlib.bezier.get_cos_sin(x0,y0,x1,y1)
matplotlib.bezier.get_intersection(cx1,cy1,cos_t1,sin_t1,cx2,cy2,cos_t2,sin_t2)
matplotlib.bezier.get_normal_points(cx,cy,cos_t,sin_t,length)
matplotlib.bezier.get_parallels(bezier2,width)
matplotlib.bezier.inside_circle(cx,cy,r)
matplotlib.bezier.make_wedged_bezier2(bezier2,width,w1=1.0,wm=0.5,w2=0.0)
matplotlib.bezier.split_bezier_intersecting_with_closedpath(bezier,inside_closedpath,tolerance=0.01)
matplotlib.bezier.split_de_casteljau(beta,t)
matplotlib.bezier.split_path_inout(path,inside,tolerance=0.01,reorder_inout=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_internal_utils.py----------------------------------------
A:matplotlib._internal_utils.seen->set()
A:matplotlib._internal_utils.props->' '.join(map('{0[0]}={0[1]}'.format, props.items()))
A:matplotlib._internal_utils.buf->StringIO()
matplotlib._internal_utils.graphviz_dump_transform(transform,dest,*,highlight=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_fontconfig_pattern.py----------------------------------------
A:matplotlib._fontconfig_pattern._family_unescape->partial(re.compile('\\\\(?=[%s])' % _family_punc).sub, '')
A:matplotlib._fontconfig_pattern._family_escape->partial(re.compile('(?=[%s])' % _family_punc).sub, '\\\\')
A:matplotlib._fontconfig_pattern._value_unescape->partial(re.compile('\\\\(?=[%s])' % _value_punc).sub, '')
A:matplotlib._fontconfig_pattern._value_escape->partial(re.compile('(?=[%s])' % _value_punc).sub, '\\\\')
A:matplotlib._fontconfig_pattern.family->Regex('([^%s]|(\\\\[%s]))*' % (_family_punc, _family_punc))
A:matplotlib._fontconfig_pattern.size->Regex('([0-9]+\\.?[0-9]*|\\.[0-9]+)')
A:matplotlib._fontconfig_pattern.name->Regex('[a-z]+')
A:matplotlib._fontconfig_pattern.value->Regex('([^%s]|(\\\\[%s]))*' % (_value_punc, _value_punc))
A:matplotlib._fontconfig_pattern.prop->Group(name + Suppress('=') + comma_separated(value) | name)
A:matplotlib._fontconfig_pattern.parser->_make_fontconfig_parser()
A:matplotlib._fontconfig_pattern.parse->_make_fontconfig_parser().parseString(pattern)
matplotlib._fontconfig_pattern._make_fontconfig_parser()
matplotlib._fontconfig_pattern.generate_fontconfig_pattern(d)
matplotlib._fontconfig_pattern.parse_fontconfig_pattern(pattern)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_constrained_layout.py----------------------------------------
A:matplotlib._constrained_layout._log->logging.getLogger(__name__)
A:matplotlib._constrained_layout.renderer->fig._get_renderer()
A:matplotlib._constrained_layout.layoutgrids->make_layoutgrids_gs(layoutgrids, parentgs)
A:matplotlib._constrained_layout.layoutgrids[fig]->matplotlib._layoutgrid.LayoutGrid(parent=parentlb, name='panellb', parent_inner=True, nrows=1, ncols=1, parent_pos=(fig._subplotspec.rowspan, fig._subplotspec.colspan))
A:matplotlib._constrained_layout.gs->parents[0].get_gridspec()
A:matplotlib._constrained_layout.layoutgrids[gs]->matplotlib._layoutgrid.LayoutGrid(parent=layoutgrids[rep], name='gridspec', nrows=gs._nrows, ncols=gs._ncols, width_ratios=gs.get_width_ratios(), height_ratios=gs.get_height_ratios())
A:matplotlib._constrained_layout.parentgs->subplot_spec.get_gridspec()
A:matplotlib._constrained_layout.layoutgrids[rep]->matplotlib._layoutgrid.LayoutGrid(parent=subspeclb, name='top', nrows=1, ncols=1, parent_pos=(subplot_spec.rowspan, subplot_spec.colspan))
A:matplotlib._constrained_layout.ok->check_no_collapsed_axes(layoutgrids, sfig)
A:matplotlib._constrained_layout.bb->lg.get_inner_bbox(i, j)
A:matplotlib._constrained_layout.sub->ax.get_subplotspec()
A:matplotlib._constrained_layout._gs->ax.get_subplotspec().get_gridspec()
A:matplotlib._constrained_layout.extraw->numpy.zeros(gs.ncols)
A:matplotlib._constrained_layout.extrah->numpy.zeros(gs.nrows)
A:matplotlib._constrained_layout.orig->ax.get_position(original=True)
A:matplotlib._constrained_layout.actual->ax.get_position(original=False)
A:matplotlib._constrained_layout.extraw[sub.colspan]->numpy.maximum(extraw[sub.colspan], dw)
A:matplotlib._constrained_layout.extrah[sub.rowspan]->numpy.maximum(extrah[sub.rowspan], dh)
A:matplotlib._constrained_layout.(nrows, ncols)->parents[0].get_gridspec().get_geometry()
A:matplotlib._constrained_layout.margins->get_margin_from_padding(sfig, w_pad=0, h_pad=0, hspace=hspace, wspace=wspace)
A:matplotlib._constrained_layout.ss->ax.get_subplotspec()
A:matplotlib._constrained_layout.margin->get_margin_from_padding(ax, w_pad=w_pad, h_pad=h_pad, hspace=hspace, wspace=wspace)
A:matplotlib._constrained_layout.(pos, bbox)->get_pos_and_bbox(ax, renderer)
A:matplotlib._constrained_layout.pad->colorbar_get_pad(layoutgrids, cbax)
A:matplotlib._constrained_layout.(cbp_rspan, cbp_cspan)->get_cb_parent_spans(cbax)
A:matplotlib._constrained_layout.(cbpos, cbbbox)->get_pos_and_bbox(cbax, renderer)
A:matplotlib._constrained_layout.bbox->matplotlib._layoutgrid.LayoutGrid(parent=layoutgrids[rep], name='gridspec', nrows=gs._nrows, ncols=gs._ncols, width_ratios=gs.get_width_ratios(), height_ratios=gs.get_height_ratios()).get_inner_bbox(rows=ss.rowspan, cols=ss.colspan)
A:matplotlib._constrained_layout.padbox->(fig.transFigure - fig.transSubfigure).transform_bbox(padbox)
A:matplotlib._constrained_layout.p->fig._supylabel.get_position()
A:matplotlib._constrained_layout.ss1->ax1.get_subplotspec()
A:matplotlib._constrained_layout.maxsubl->numpy.max(lg1.margin_vals['left'][ss1.colspan[1:]] + lg1.margin_vals['leftcb'][ss1.colspan[1:]])
A:matplotlib._constrained_layout.maxsubr->numpy.max(lg1.margin_vals['right'][ss1.colspan[:-1]] + lg1.margin_vals['rightcb'][ss1.colspan[:-1]])
A:matplotlib._constrained_layout.ss2->ax2.get_subplotspec()
A:matplotlib._constrained_layout.maxsubl2->numpy.max(lg2.margin_vals['left'][ss2.colspan[1:]] + lg2.margin_vals['leftcb'][ss2.colspan[1:]])
A:matplotlib._constrained_layout.maxsubr2->numpy.max(lg2.margin_vals['right'][ss2.colspan[:-1]] + lg2.margin_vals['rightcb'][ss2.colspan[:-1]])
A:matplotlib._constrained_layout.maxsubt->numpy.max([np.max(lg2.margin_vals['top'][ss2.rowspan[1:]] + lg2.margin_vals['topcb'][ss2.rowspan[1:]]), maxsubt])
A:matplotlib._constrained_layout.maxsubb->numpy.max([np.max(lg2.margin_vals['bottom'][ss2.rowspan[:-1]] + lg2.margin_vals['bottomcb'][ss2.rowspan[:-1]]), maxsubb])
A:matplotlib._constrained_layout.rowstart->min(ss.rowspan.start, rowstart)
A:matplotlib._constrained_layout.rowstop->max(ss.rowspan.stop, rowstop)
A:matplotlib._constrained_layout.colstart->min(ss.colspan.start, colstart)
A:matplotlib._constrained_layout.colstop->max(ss.colspan.stop, colstop)
A:matplotlib._constrained_layout.rowspan->range(rowstart, rowstop)
A:matplotlib._constrained_layout.colspan->range(colstart, colstop)
A:matplotlib._constrained_layout.pos->pos.transformed(fig.transSubfigure - fig.transFigure).transformed(fig.transSubfigure - fig.transFigure)
A:matplotlib._constrained_layout.tightbbox->matplotlib.artist._get_tightbbox_for_layout_only(ax, renderer)
A:matplotlib._constrained_layout.newbbox->trans_fig_to_subfig.transform_bbox(bbox)
A:matplotlib._constrained_layout.(cb_rspans, cb_cspans)->get_cb_parent_spans(cax)
A:matplotlib._constrained_layout.bboxparent->matplotlib._layoutgrid.LayoutGrid(parent=layoutgrids[rep], name='gridspec', nrows=gs._nrows, ncols=gs._ncols, width_ratios=gs.get_width_ratios(), height_ratios=gs.get_height_ratios()).get_bbox_for_cb(rows=cb_rspans, cols=cb_cspans)
A:matplotlib._constrained_layout.pb->matplotlib._layoutgrid.LayoutGrid(parent=layoutgrids[rep], name='gridspec', nrows=gs._nrows, ncols=gs._ncols, width_ratios=gs.get_width_ratios(), height_ratios=gs.get_height_ratios()).get_inner_bbox(rows=cb_rspans, cols=cb_cspans)
A:matplotlib._constrained_layout.cbpad->colorbar_get_pad(layoutgrids, cbax)
A:matplotlib._constrained_layout.pbcb->trans_fig_to_subfig.transform_bbox(pbcb)
A:matplotlib._constrained_layout.bboxouter->matplotlib._layoutgrid.LayoutGrid(parent=layoutgrids[rep], name='gridspec', nrows=gs._nrows, ncols=gs._ncols, width_ratios=gs.get_width_ratios(), height_ratios=gs.get_height_ratios()).get_inner_bbox(rows=cb_rspans, cols=cb_cspans)
matplotlib._constrained_layout.check_no_collapsed_axes(layoutgrids,fig)
matplotlib._constrained_layout.colorbar_get_pad(layoutgrids,cax)
matplotlib._constrained_layout.compress_fixed_aspect(layoutgrids,fig)
matplotlib._constrained_layout.do_constrained_layout(fig,h_pad,w_pad,hspace=None,wspace=None,rect=(0,0,1,1),compress=False)
matplotlib._constrained_layout.get_cb_parent_spans(cbax)
matplotlib._constrained_layout.get_margin_from_padding(obj,*,w_pad=0,h_pad=0,hspace=0,wspace=0)
matplotlib._constrained_layout.get_pos_and_bbox(ax,renderer)
matplotlib._constrained_layout.make_layout_margins(layoutgrids,fig,renderer,*,w_pad=0,h_pad=0,hspace=0,wspace=0)
matplotlib._constrained_layout.make_layoutgrids(fig,layoutgrids,rect=(0,0,1,1))
matplotlib._constrained_layout.make_layoutgrids_gs(layoutgrids,gs)
matplotlib._constrained_layout.make_margin_suptitles(layoutgrids,fig,renderer,*,w_pad=0,h_pad=0)
matplotlib._constrained_layout.match_submerged_margins(layoutgrids,fig)
matplotlib._constrained_layout.reposition_axes(layoutgrids,fig,renderer,*,w_pad=0,h_pad=0,hspace=0,wspace=0)
matplotlib._constrained_layout.reposition_colorbar(layoutgrids,cbax,renderer,*,offset=None)
matplotlib._constrained_layout.reset_margins(layoutgrids,fig)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/legend_handler.py----------------------------------------
A:matplotlib.legend_handler.first_child->next(iter(src.get_children()), None)
A:matplotlib.legend_handler.(xdescent, ydescent, width, height)->self.adjust_drawing_area(legend, orig_handle, handlebox.xdescent, handlebox.ydescent, handlebox.width, handlebox.height, fontsize)
A:matplotlib.legend_handler.artists->self.create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, handlebox.get_transform())
A:matplotlib.legend_handler.numpoints->self.get_numpoints(legend)
A:matplotlib.legend_handler.xdata->numpy.linspace(xdata[0], xdata[-1], 3)
A:matplotlib.legend_handler.(xdata, xdata_marker)->self.get_xdata(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.ydata->self.get_ydata(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.legline->Line2D(xdata, ydata)
A:matplotlib.legend_handler.legline_marker->Line2D(xdata_marker, ydata_marker)
A:matplotlib.legend_handler.p->Rectangle(xy=(-xdescent, -ydescent), width=width, height=height)
A:matplotlib.legend_handler.handle_sizes->orig_handle.get_sizes()
A:matplotlib.legend_handler.sizes->self.get_sizes(legend, orig_handle, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.xdata_marker->numpy.asarray(xdata_marker)
A:matplotlib.legend_handler.ydata_marker->numpy.asarray(ydata[:len(xdata_marker)])
A:matplotlib.legend_handler.(xerr_size, yerr_size)->self.get_err_size(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.coll->matplotlib.collections.LineCollection(verts)
A:matplotlib.legend_handler.capline_left->Line2D(xdata_marker, ydata_marker - yerr_size)
A:matplotlib.legend_handler.capline_right->Line2D(xdata_marker, ydata_marker + yerr_size)
A:matplotlib.legend_handler.using_linecoll->isinstance(stemlines, mcoll.LineCollection)
A:matplotlib.legend_handler.leg_markerline->Line2D(xdata_marker, ydata[:len(xdata_marker)])
A:matplotlib.legend_handler.leg_baseline->Line2D([np.min(xdata), np.max(xdata)], [bottom, bottom])
A:matplotlib.legend_handler.handler_map->legend.get_legend_handler_map()
A:matplotlib.legend_handler.ndivide->len(orig_handle)
A:matplotlib.legend_handler.xds_cycle->cycle(xdescent - (width + pad) * np.arange(ndivide))
A:matplotlib.legend_handler.handler->legend.get_legend_handler(handler_map, handle1)
A:matplotlib.legend_handler._a_list->legend.get_legend_handler(handler_map, handle1).create_artists(legend, handle1, next(xds_cycle), ydescent, width, height, fontsize, trans)
A:matplotlib.legend_handler.legend_handle._facecolor->first_color(orig_handle.get_facecolor())
A:matplotlib.legend_handler.legend_handle._edgecolor->first_color(orig_handle.get_edgecolor())
A:matplotlib.legend_handler.legend_handle._fill->orig_handle.get_fill()
A:matplotlib.legend_handler.legend_handle._hatch->orig_handle.get_hatch()
matplotlib.legend_handler.HandlerBase(self,xpad=0.0,ypad=0.0,update_func=None)
matplotlib.legend_handler.HandlerBase.__init__(self,xpad=0.0,ypad=0.0,update_func=None)
matplotlib.legend_handler.HandlerBase._default_update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerBase._update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerBase.adjust_drawing_area(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerBase.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerBase.legend_artist(self,legend,orig_handle,fontsize,handlebox)
matplotlib.legend_handler.HandlerBase.update_prop(self,legend_handle,orig_handle,legend)
matplotlib.legend_handler.HandlerCircleCollection(HandlerRegularPolyCollection)
matplotlib.legend_handler.HandlerCircleCollection.create_collection(self,orig_handle,sizes,offsets,offset_transform)
matplotlib.legend_handler.HandlerErrorbar(self,xerr_size=0.5,yerr_size=None,marker_pad=0.3,numpoints=None,**kwargs)
matplotlib.legend_handler.HandlerErrorbar.__init__(self,xerr_size=0.5,yerr_size=None,marker_pad=0.3,numpoints=None,**kwargs)
matplotlib.legend_handler.HandlerErrorbar.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerErrorbar.get_err_size(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerLine2D(HandlerNpoints)
matplotlib.legend_handler.HandlerLine2D.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerLine2DCompound(HandlerNpoints)
matplotlib.legend_handler.HandlerLine2DCompound.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerLineCollection(HandlerLine2D)
matplotlib.legend_handler.HandlerLineCollection._default_update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerLineCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerLineCollection.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerNpoints(self,marker_pad=0.3,numpoints=None,**kwargs)
matplotlib.legend_handler.HandlerNpoints.__init__(self,marker_pad=0.3,numpoints=None,**kwargs)
matplotlib.legend_handler.HandlerNpoints.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerNpoints.get_xdata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerNpointsYoffsets(self,numpoints=None,yoffsets=None,**kwargs)
matplotlib.legend_handler.HandlerNpointsYoffsets.__init__(self,numpoints=None,yoffsets=None,**kwargs)
matplotlib.legend_handler.HandlerNpointsYoffsets.get_ydata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerPatch(self,patch_func=None,**kwargs)
matplotlib.legend_handler.HandlerPatch.__init__(self,patch_func=None,**kwargs)
matplotlib.legend_handler.HandlerPatch._create_patch(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerPatch.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerPathCollection(HandlerRegularPolyCollection)
matplotlib.legend_handler.HandlerPathCollection.create_collection(self,orig_handle,sizes,offsets,offset_transform)
matplotlib.legend_handler.HandlerPolyCollection(HandlerBase)
matplotlib.legend_handler.HandlerPolyCollection._update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerPolyCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerRegularPolyCollection(self,yoffsets=None,sizes=None,**kwargs)
matplotlib.legend_handler.HandlerRegularPolyCollection.__init__(self,yoffsets=None,sizes=None,**kwargs)
matplotlib.legend_handler.HandlerRegularPolyCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerRegularPolyCollection.create_collection(self,orig_handle,sizes,offsets,offset_transform)
matplotlib.legend_handler.HandlerRegularPolyCollection.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerRegularPolyCollection.get_sizes(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerRegularPolyCollection.update_prop(self,legend_handle,orig_handle,legend)
matplotlib.legend_handler.HandlerStem(self,marker_pad=0.3,numpoints=None,bottom=None,yoffsets=None,**kwargs)
matplotlib.legend_handler.HandlerStem.__init__(self,marker_pad=0.3,numpoints=None,bottom=None,yoffsets=None,**kwargs)
matplotlib.legend_handler.HandlerStem._copy_collection_props(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerStem.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerStem.get_ydata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerStepPatch(HandlerBase)
matplotlib.legend_handler.HandlerStepPatch._create_line(orig_handle,width,height)
matplotlib.legend_handler.HandlerStepPatch._create_patch(orig_handle,xdescent,ydescent,width,height)
matplotlib.legend_handler.HandlerStepPatch.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerTuple(self,ndivide=1,pad=None,**kwargs)
matplotlib.legend_handler.HandlerTuple.__init__(self,ndivide=1,pad=None,**kwargs)
matplotlib.legend_handler.HandlerTuple.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.update_from_first_child(tgt,src)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/artist.py----------------------------------------
A:matplotlib.artist._log->logging.getLogger(__name__)
A:matplotlib.artist.result->draw(artist, renderer, *args, **kwargs)
A:matplotlib.artist._XYPair->namedtuple('_XYPair', 'x y')
A:matplotlib.artist._UNSET->_Unset()
A:matplotlib.artist.cls.draw->_prevent_rasterization(cls.draw)
A:matplotlib.artist.cls.set.__signature__->Signature([Parameter('self', Parameter.POSITIONAL_OR_KEYWORD), *[Parameter(prop, Parameter.KEYWORD_ONLY, default=_UNSET) for prop in ArtistInspector(cls).get_setters() if prop not in Artist._PROPERTIES_EXCLUDED_FROM_SET]])
A:matplotlib.artist.self._callbacks->cbook.CallbackRegistry(signals=['pchanged'])
A:matplotlib.artist.self._sticky_edges->_XYPair([], [])
A:matplotlib.artist.d->self.__dict__.copy()
A:matplotlib.artist.ax->getattr(a, 'axes', None)
A:matplotlib.artist.bbox->transforms.Bbox.intersection(bbox, clip_path.get_extents())
A:matplotlib.artist.clip_box->self.get_clip_box()
A:matplotlib.artist.clip_path->self.get_clip_path()
A:matplotlib.artist.self._transform->self._transform._as_mpl_transform(self.axes)
A:matplotlib.artist.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.artist.picker->self.get_picker()
A:matplotlib.artist.(inside, prop)->self.contains(mouseevent)
A:matplotlib.artist.self.clipbox->TransformedBbox(Bbox.unit(), path.get_transform())
A:matplotlib.artist.self._clippath->TransformedPath(path, transform)
A:matplotlib.artist.supports_rasterization->getattr(self.draw, '_supports_rasterization', False)
A:matplotlib.artist.alpha->numpy.asarray(alpha)
A:matplotlib.artist.self._label->str(s)
A:matplotlib.artist.self.sticky_edges.x[:]->other.sticky_edges.x.copy()
A:matplotlib.artist.self.sticky_edges.y[:]->other.sticky_edges.y.copy()
A:matplotlib.artist.func->getattr(o, name)
A:matplotlib.artist.artists->sum([c.findobj(matchfunc) for c in self.get_children()], [])
A:matplotlib.artist.normed->self.norm(data)
A:matplotlib.artist.cur_idx->numpy.argmin(np.abs(self.norm.boundaries - data))
A:matplotlib.artist.neigh_idx->max(0, cur_idx - 1)
A:matplotlib.artist.delta->abs(neighbors - data).max()
A:matplotlib.artist.neighbors->self.norm.inverse((int(normed * n) + np.array([0, 1])) / n)
A:matplotlib.artist.g_sig_digits->cbook._g_sig_digits(data, delta)
A:matplotlib.artist.data_str->', '.join(('{:0.3g}'.format(item) for item in data if isinstance(item, Number)))
A:matplotlib.artist.self._mouseover->bool(mouseover)
A:matplotlib.artist.mouseover->property(get_mouseover, set_mouseover)
A:matplotlib.artist.o->type(o)
A:matplotlib.artist.self.aliasd->self.get_aliases()
A:matplotlib.artist.propname->re.search('`({}.*)`'.format(name[:4]), inspect.getdoc(func)).group(1)
A:matplotlib.artist._get_valid_values_regex->re.compile('\\n\\s*(?:\\.\\.\\s+)?ACCEPTS:\\s*((?:.|\\n)*?)(?:$|(?:\\n\\n))')
A:matplotlib.artist.docstring->inspect.getdoc(func)
A:matplotlib.artist.match->re.search('(?m)^ *\\*?{} : (.+)'.format(param_name), docstring)
A:matplotlib.artist.source_class->source_class.replace(key, value).replace(key, value)
A:matplotlib.artist.ds->inspect.getdoc(method)
A:matplotlib.artist.aliases->''.join((' or %s' % x for x in sorted(self.aliasd.get(s, []))))
A:matplotlib.artist.accepts->self.get_valid_values(prop)
A:matplotlib.artist.name->self.aliased_name(name)
A:matplotlib.artist.method->getattr(self.o, f'set_{prop}')
A:matplotlib.artist.col0_len->max((len(n) for n in names))
A:matplotlib.artist.col1_len->max((len(a) for a in accepts))
A:matplotlib.artist.val->func()
A:matplotlib.artist.s->s.replace('\n', ' ').replace('\n', ' ')
A:matplotlib.artist.insp->ArtistInspector(objs[0])
A:matplotlib.artist.ret->ArtistInspector(objs[0]).pprint_getters()
A:matplotlib.artist.objs->list(cbook.flatten(obj))
A:matplotlib.artist.funcvals->dict(zip(args[::2], args[1::2]))
A:matplotlib.artist.ai->ArtistInspector(artist)
matplotlib.artist.Artist(self)
matplotlib.artist.Artist.__getstate__(self)
matplotlib.artist.Artist.__init__(self)
matplotlib.artist.Artist.__init_subclass__(cls)
matplotlib.artist.Artist._cm_set(self,**kwargs)
matplotlib.artist.Artist._default_contains(self,mouseevent,figure=None)
matplotlib.artist.Artist._fully_clipped_to_axes(self)
matplotlib.artist.Artist._internal_update(self,kwargs)
matplotlib.artist.Artist._set_alpha_for_array(self,alpha)
matplotlib.artist.Artist._set_gc_clip(self,gc)
matplotlib.artist.Artist._update_props(self,props,errfmt)
matplotlib.artist.Artist._update_set_signature_and_docstring(cls)
matplotlib.artist.Artist.add_callback(self,func)
matplotlib.artist.Artist.axes(self)
matplotlib.artist.Artist.axes(self,new_axes)
matplotlib.artist.Artist.contains(self,mouseevent)
matplotlib.artist.Artist.convert_xunits(self,x)
matplotlib.artist.Artist.convert_yunits(self,y)
matplotlib.artist.Artist.draw(self,renderer)
matplotlib.artist.Artist.findobj(self,match=None,include_self=True)
matplotlib.artist.Artist.format_cursor_data(self,data)
matplotlib.artist.Artist.get_agg_filter(self)
matplotlib.artist.Artist.get_alpha(self)
matplotlib.artist.Artist.get_animated(self)
matplotlib.artist.Artist.get_children(self)
matplotlib.artist.Artist.get_clip_box(self)
matplotlib.artist.Artist.get_clip_on(self)
matplotlib.artist.Artist.get_clip_path(self)
matplotlib.artist.Artist.get_cursor_data(self,event)
matplotlib.artist.Artist.get_figure(self)
matplotlib.artist.Artist.get_gid(self)
matplotlib.artist.Artist.get_in_layout(self)
matplotlib.artist.Artist.get_label(self)
matplotlib.artist.Artist.get_mouseover(self)
matplotlib.artist.Artist.get_path_effects(self)
matplotlib.artist.Artist.get_picker(self)
matplotlib.artist.Artist.get_rasterized(self)
matplotlib.artist.Artist.get_sketch_params(self)
matplotlib.artist.Artist.get_snap(self)
matplotlib.artist.Artist.get_tightbbox(self,renderer=None)
matplotlib.artist.Artist.get_transform(self)
matplotlib.artist.Artist.get_transformed_clip_path_and_affine(self)
matplotlib.artist.Artist.get_url(self)
matplotlib.artist.Artist.get_visible(self)
matplotlib.artist.Artist.get_window_extent(self,renderer=None)
matplotlib.artist.Artist.get_zorder(self)
matplotlib.artist.Artist.have_units(self)
matplotlib.artist.Artist.is_transform_set(self)
matplotlib.artist.Artist.pchanged(self)
matplotlib.artist.Artist.pick(self,mouseevent)
matplotlib.artist.Artist.pickable(self)
matplotlib.artist.Artist.properties(self)
matplotlib.artist.Artist.remove(self)
matplotlib.artist.Artist.remove_callback(self,oid)
matplotlib.artist.Artist.set(self,**kwargs)
matplotlib.artist.Artist.set_agg_filter(self,filter_func)
matplotlib.artist.Artist.set_alpha(self,alpha)
matplotlib.artist.Artist.set_animated(self,b)
matplotlib.artist.Artist.set_clip_box(self,clipbox)
matplotlib.artist.Artist.set_clip_on(self,b)
matplotlib.artist.Artist.set_clip_path(self,path,transform=None)
matplotlib.artist.Artist.set_figure(self,fig)
matplotlib.artist.Artist.set_gid(self,gid)
matplotlib.artist.Artist.set_in_layout(self,in_layout)
matplotlib.artist.Artist.set_label(self,s)
matplotlib.artist.Artist.set_mouseover(self,mouseover)
matplotlib.artist.Artist.set_path_effects(self,path_effects)
matplotlib.artist.Artist.set_picker(self,picker)
matplotlib.artist.Artist.set_rasterized(self,rasterized)
matplotlib.artist.Artist.set_sketch_params(self,scale=None,length=None,randomness=None)
matplotlib.artist.Artist.set_snap(self,snap)
matplotlib.artist.Artist.set_transform(self,t)
matplotlib.artist.Artist.set_url(self,url)
matplotlib.artist.Artist.set_visible(self,b)
matplotlib.artist.Artist.set_zorder(self,level)
matplotlib.artist.Artist.stale(self)
matplotlib.artist.Artist.stale(self,val)
matplotlib.artist.Artist.sticky_edges(self)
matplotlib.artist.Artist.update(self,props)
matplotlib.artist.Artist.update_from(self,other)
matplotlib.artist.ArtistInspector(self,o)
matplotlib.artist.ArtistInspector.__init__(self,o)
matplotlib.artist.ArtistInspector._replace_path(self,source_class)
matplotlib.artist.ArtistInspector.aliased_name(self,s)
matplotlib.artist.ArtistInspector.aliased_name_rest(self,s,target)
matplotlib.artist.ArtistInspector.get_aliases(self)
matplotlib.artist.ArtistInspector.get_setters(self)
matplotlib.artist.ArtistInspector.get_valid_values(self,attr)
matplotlib.artist.ArtistInspector.is_alias(method)
matplotlib.artist.ArtistInspector.number_of_parameters(func)
matplotlib.artist.ArtistInspector.pprint_getters(self)
matplotlib.artist.ArtistInspector.pprint_setters(self,prop=None,leadingspace=2)
matplotlib.artist.ArtistInspector.pprint_setters_rest(self,prop=None,leadingspace=4)
matplotlib.artist.ArtistInspector.properties(self)
matplotlib.artist._Unset
matplotlib.artist._Unset.__repr__(self)
matplotlib.artist._finalize_rasterization(draw)
matplotlib.artist._get_tightbbox_for_layout_only(obj,*args,**kwargs)
matplotlib.artist._prevent_rasterization(draw)
matplotlib.artist._stale_axes_callback(self,val)
matplotlib.artist.allow_rasterization(draw)
matplotlib.artist.getp(obj,property=None)
matplotlib.artist.kwdoc(artist)
matplotlib.artist.setp(obj,*args,file=None,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_tight_layout.py----------------------------------------
A:matplotlib._tight_layout.vspaces->numpy.zeros((rows + 1, cols))
A:matplotlib._tight_layout.hspaces->numpy.zeros((rows, cols + 1))
A:matplotlib._tight_layout.tight_bbox_raw->matplotlib.transforms.Bbox.union(bb)
A:matplotlib._tight_layout.tight_bbox->fig.transFigure.inverted().transform_bbox(tight_bbox_raw)
A:matplotlib._tight_layout.(fig_width_inch, fig_height_inch)->fig.get_size_inches()
A:matplotlib._tight_layout.kwargs->_auto_adjust_subplotpars(fig, renderer, shape=(max_nrows, max_ncols), span_pairs=span_pairs, subplot_list=subplot_list, ax_bbox_list=ax_bbox_list, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=(left, bottom, right, top))
A:matplotlib._tight_layout.axes_or_locator->ax.get_axes_locator()
A:matplotlib._tight_layout.subplotspec->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec()
A:matplotlib._tight_layout.gs->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec().get_gridspec()
A:matplotlib._tight_layout.subplot_list->list(ss_to_subplots.values())
A:matplotlib._tight_layout.max_nrows->max((ss.get_gridspec().nrows for ss in ss_to_subplots))
A:matplotlib._tight_layout.max_ncols->max((ss.get_gridspec().ncols for ss in ss_to_subplots))
A:matplotlib._tight_layout.(rows, cols)->ss.get_gridspec().get_geometry()
A:matplotlib._tight_layout.(div_row, mod_row)->divmod(max_nrows, rows)
A:matplotlib._tight_layout.(div_col, mod_col)->divmod(max_ncols, cols)
matplotlib._tight_layout._auto_adjust_subplotpars(fig,renderer,shape,span_pairs,subplot_list,ax_bbox_list=None,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib._tight_layout.get_subplotspec_list(axes_list,grid_spec=None)
matplotlib._tight_layout.get_tight_layout_figure(fig,axes_list,subplotspec_list,renderer,pad=1.08,h_pad=None,w_pad=None,rect=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_version.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/patches.py----------------------------------------
A:matplotlib.patches.self._hatch_color->colors.to_rgba(mpl.rcParams['hatch.color'])
A:matplotlib.patches.trans->transforms.Affine2D().rotate_deg_around(x0, y0, angle)
A:matplotlib.patches.path->self.get_connectionstyle()(posA, posB, patchA=self.patchA, patchB=self.patchB, shrinkA=self.shrinkA * dpi_cor, shrinkB=self.shrinkB * dpi_cor)
A:matplotlib.patches.polygons->self.get_connectionstyle()(posA, posB, patchA=self.patchA, patchB=self.patchB, shrinkA=self.shrinkA * dpi_cor, shrinkB=self.shrinkB * dpi_cor).to_polygons(trans)
A:matplotlib.patches._radius->self.get_linewidth()
A:matplotlib.patches.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.patches.radius->property(get_radius, set_radius)
A:matplotlib.patches.(idxs,)->numpy.where(codes == Path.MOVETO)
A:matplotlib.patches.subpaths->map(Path, np.split(vertices, idxs), np.split(codes, idxs))
A:matplotlib.patches.inside->path.Path.unit_rectangle().transformed(box_path_transform).contains_point((np.cos(theta1_rad), np.sin(theta1_rad)))
A:matplotlib.patches.self._transformSet->other.is_transform_set()
A:matplotlib.patches.self._edgecolor->colors.to_rgba(color, self._alpha)
A:matplotlib.patches.self._facecolor->colors.to_rgba(color, alpha)
A:matplotlib.patches.self._linewidth->float(w)
A:matplotlib.patches.self._dash_pattern->mlines._scale_dashes(*self._unscaled_dash_pattern, self._linewidth)
A:matplotlib.patches.self._unscaled_dash_pattern->mlines._get_dash_pattern(ls)
A:matplotlib.patches.self._fill->bool(b)
A:matplotlib.patches.fill->kwargs.setdefault('fill', False)
A:matplotlib.patches.cs->CapStyle(s)
A:matplotlib.patches.js->JoinStyle(s)
A:matplotlib.patches.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.patches.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.patches.transform->self.get_transform()
A:matplotlib.patches.tpath->self.get_transform().transform_path_non_affine(path)
A:matplotlib.patches.affine->transforms.IdentityTransform()
A:matplotlib.patches.x->float(self.convert_xunits(x))
A:matplotlib.patches.y->float(self.convert_yunits(y))
A:matplotlib.patches.self._shadow_transform->transforms.Affine2D()
A:matplotlib.patches.ox->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(self._ox)
A:matplotlib.patches.oy->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(self._oy)
A:matplotlib.patches.self.angle->float(angle)
A:matplotlib.patches.x0->self.convert_xunits(self._x0)
A:matplotlib.patches.y0->self.convert_yunits(self._y0)
A:matplotlib.patches.x1->self.convert_xunits(self._x0 + self._width)
A:matplotlib.patches.y1->self.convert_yunits(self._y0 + self._height)
A:matplotlib.patches.bbox->artist.get_window_extent(renderer)
A:matplotlib.patches.(x0, y0, x1, y1)->self._convert_units()
A:matplotlib.patches.xy->numpy.array(xy)
A:matplotlib.patches.self._path->path.Path.arc(self._theta1, self._theta2)
A:matplotlib.patches.self._patch_transform->transforms.Affine2D().scale(width * 0.5, height * 0.5 * self._aspect_ratio_correction).rotate_deg(self.angle).scale(1, 1 / self._aspect_ratio_correction).translate(*center)
A:matplotlib.patches.self._edges->numpy.asarray(edges)
A:matplotlib.patches.self._values->numpy.asarray(values)
A:matplotlib.patches._nan_mask->numpy.isnan(self._values)
A:matplotlib.patches.StairData->namedtuple('StairData', 'values edges baseline')
A:matplotlib.patches.self._baseline->numpy.asarray(baseline)
A:matplotlib.patches.self._closed->bool(closed)
A:matplotlib.patches.arc->path.Path.arc(0, 360)
A:matplotlib.patches.v->numpy.vstack([v1, v2, v1[0, :], (0, 0)])
A:matplotlib.patches._path->self.get_transform().transform_path(self._path_original)
A:matplotlib.patches.distance->numpy.hypot(self._dx, self._dy)
A:matplotlib.patches.self.verts->numpy.empty([0, 2])
A:matplotlib.patches.left_half_arrow->numpy.array([[0.0, 0.0], [-hl, -hw / 2], [-hl * (1 - hs), -lw / 2], [-length, -lw / 2], [-length, 0]])
A:matplotlib.patches.coords->numpy.concatenate([left_half_arrow[:-1], right_half_arrow[-2::-1]])
A:matplotlib.patches.width->self.convert_xunits(self.width)
A:matplotlib.patches.height->self.convert_yunits(self.height)
A:matplotlib.patches.center->property(get_center, set_center)
A:matplotlib.patches.angle->property(get_angle, set_angle)
A:matplotlib.patches.self.a->float(a)
A:matplotlib.patches.self.b->float(b)
A:matplotlib.patches.self.aself.b->float(r)
A:matplotlib.patches.radii->property(get_radii, set_radii)
A:matplotlib.patches.v1->self._transform_verts(arc.vertices, a, b)
A:matplotlib.patches.v2->self._transform_verts(arc.vertices[::-1], a - w, b - w)
A:matplotlib.patches.c->numpy.hstack([arc.codes, Path.MOVETO, arc.codes[1:], Path.MOVETO, Path.CLOSEPOLY])
A:matplotlib.patches.(self._theta1, self._theta2, self._stretched_width, self._stretched_height)->self._theta_stretch()
A:matplotlib.patches.data_to_screen_trans->self.get_data_transform()
A:matplotlib.patches.sign_dy->numpy.copysign(1, dy)
A:matplotlib.patches.sqrt_discrim->numpy.sqrt(discrim)
A:matplotlib.patches.xys->line_circle_intersect(x0, y0, x1, y1)
A:matplotlib.patches.box_path->path.Path.unit_rectangle().transformed(box_path_transform)
A:matplotlib.patches.thetas->set()
A:matplotlib.patches.theta1_rad->numpy.deg2rad(self._theta1)
A:matplotlib.patches.stretched->self._theta_stretch()
A:matplotlib.patches.theta->numpy.deg2rad(theta)
A:matplotlib.patches.stheta->numpy.rad2deg(np.arctan2(scale * y, x))
A:matplotlib.patches.theta1->math.atan2(y2 - y1, x2 - x1)
A:matplotlib.patches.theta2->theta_stretch(self.theta2, width / height)
A:matplotlib.patches.props->props.copy().copy()
A:matplotlib.patches.pad->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(pad)
A:matplotlib.patches.r->Rectangle(xy=bbox.p0, width=bbox.width, height=bbox.height, edgecolor=color, fill=False, clip_on=False)
A:matplotlib.patches._list->stylename.replace(' ', '').split(',')
A:matplotlib.patches._name->_list[0].lower()
A:matplotlib.patches.table_formatstr->'  '.join(('=' * cl for cl in col_len))
A:matplotlib.patches.rst_table->'\n'.join(['', table_formatstr, '  '.join((cell.ljust(cl) for (cell, cl) in zip(table[0], col_len))), table_formatstr, *['  '.join((cell.ljust(cl) for (cell, cl) in zip(row, col_len))) for row in table[1:]], table_formatstr])
A:matplotlib.patches.p->BoxStyle.LArrow.__call__(self, x0, y0, width, height, mutation_size)
A:matplotlib.patches.saw_vertices->numpy.concatenate([saw_vertices, [saw_vertices[0]]])
A:matplotlib.patches.(_, path)->split_path_inout(path, in_start)
A:matplotlib.patches.(path, _)->split_path_inout(path, in_stop)
A:matplotlib.patches.cosA->math.cos(math.radians(self.angleA))
A:matplotlib.patches.sinA->math.sin(math.radians(self.angleA))
A:matplotlib.patches.cosB->math.cos(math.radians(self.angleB))
A:matplotlib.patches.sinB->math.sin(math.radians(self.angleB))
A:matplotlib.patches.(cx, cy)->get_intersection(x1, y1, cosA, sinA, x2, y2, cosB, sinB)
A:matplotlib.patches.d1->numpy.hypot(dx1, dy1)
A:matplotlib.patches.d2->numpy.hypot(dx2, dy2)
A:matplotlib.patches.theta0->numpy.deg2rad(self.angle)
A:matplotlib.patches.arm->max(armA, armB)
A:matplotlib.patches.segments->list(path.iter_segments())
A:matplotlib.patches.path_shrunk->Path(vertices, path.codes)
A:matplotlib.patches.(path_mutated, fillable)->self.transmute(path_shrunk, mutation_size, linewidth)
A:matplotlib.patches.(beginarrow, endarrow)->self.arrow.split('-', 1)
A:matplotlib.patches.cp_distance->numpy.hypot(dx, dy)
A:matplotlib.patches.(cos_t, sin_t)->get_cos_sin(x1, y1, x0, y0)
A:matplotlib.patches.(x1, y1, x2, y2)->get_normal_points(x0, y0, cos_t, sin_t, width)
A:matplotlib.patches.vertices_arrow->transforms.Affine2D().rotate_deg_around(x0, y0, angle).transform(vertices_arrow)
A:matplotlib.patches.head_dist->numpy.hypot(head_length, head_width)
A:matplotlib.patches.(verticesA, codesA)->self._get_bracket(x0, y0, x1, y1, self.widthA * scaleA, self.lengthA * scaleA, self.angleA)
A:matplotlib.patches.(verticesB, codesB)->self._get_bracket(x0, y0, x1, y1, self.widthB * scaleB, self.lengthB * scaleB, self.angleB)
A:matplotlib.patches.(x0, y0, x1, y1, x2, y2)->self.ensure_quadratic_bezier(path)
A:matplotlib.patches.in_f->inside_circle(x0, y0, tail_width * 0.3)
A:matplotlib.patches.(arrow_out, arrow_in)->split_bezier_intersecting_with_closedpath(arrow_path, in_f)
A:matplotlib.patches.(x0, y0)->_point_along_a_line(x2, y2, x1, y1, head_length)
A:matplotlib.patches.(head_left, head_right)->make_wedged_bezier2(arrow_in, head_width / 2.0, wm=0.5)
A:matplotlib.patches.(tail_left, tail_right)->make_wedged_bezier2(path_tail, tail_width * 0.5, w1=1.0, wm=0.6, w2=0.3)
A:matplotlib.patches.(path_out, path_in)->split_bezier_intersecting_with_closedpath(arrow_path, in_f)
A:matplotlib.patches.(head_l, head_r)->make_wedged_bezier2(path_head, head_width / 2.0, wm=0.6)
A:matplotlib.patches.(path_in, path_out)->split_bezier_intersecting_with_closedpath(arrow_path, in_f)
A:matplotlib.patches.(b_plus, b_minus)->make_wedged_bezier2(arrow_path, self.tail_width * mutation_size / 2.0, wm=self.shrink_factor)
A:matplotlib.patches.boxstyle->self.get_boxstyle()
A:matplotlib.patches.m_aspect->self.get_mutation_aspect()
A:matplotlib.patches.(_path, fillable)->self.get_arrowstyle()(_path, self.get_mutation_scale() * dpi_cor, self.get_linewidth() * dpi_cor, self.get_mutation_aspect())
A:matplotlib.patches.posA->self._get_xy(self.xy1, self.coords1, self.axesA)
A:matplotlib.patches.posB->self._get_xy(self.xy2, self.coords2, self.axesB)
A:matplotlib.patches.(posA, posB)->self.get_transform().transform((posA, posB))
A:matplotlib.patches.self._dpi_cor->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(1.0)
A:matplotlib.patches.(path, fillable)->self.get_arrowstyle()(path, self.get_mutation_scale() * dpi_cor, self.get_linewidth() * dpi_cor, self.get_mutation_aspect())
A:matplotlib.patches.s->s.replace('points', 'pixels').replace('points', 'pixels')
A:matplotlib.patches.b->self.get_annotation_clip()
A:matplotlib.patches.xy_pixel->self._get_xy(self.xy2, self.coords2, self.axesB)
matplotlib.patches.Annulus(self,xy,r,width,angle=0.0,**kwargs)
matplotlib.patches.Annulus.__init__(self,xy,r,width,angle=0.0,**kwargs)
matplotlib.patches.Annulus.__str__(self)
matplotlib.patches.Annulus._recompute_path(self)
matplotlib.patches.Annulus._transform_verts(self,verts,a,b)
matplotlib.patches.Annulus.get_angle(self)
matplotlib.patches.Annulus.get_center(self)
matplotlib.patches.Annulus.get_path(self)
matplotlib.patches.Annulus.get_radii(self)
matplotlib.patches.Annulus.get_width(self)
matplotlib.patches.Annulus.set_angle(self,angle)
matplotlib.patches.Annulus.set_center(self,xy)
matplotlib.patches.Annulus.set_radii(self,r)
matplotlib.patches.Annulus.set_semimajor(self,a)
matplotlib.patches.Annulus.set_semiminor(self,b)
matplotlib.patches.Annulus.set_width(self,width)
matplotlib.patches.Arc(self,xy,width,height,angle=0.0,theta1=0.0,theta2=360.0,**kwargs)
matplotlib.patches.Arc.__init__(self,xy,width,height,angle=0.0,theta1=0.0,theta2=360.0,**kwargs)
matplotlib.patches.Arc.__str__(self)
matplotlib.patches.Arc._theta_stretch(self)
matplotlib.patches.Arc._update_path(self)
matplotlib.patches.Arc.draw(self,renderer)
matplotlib.patches.Arrow(self,x,y,dx,dy,width=1.0,**kwargs)
matplotlib.patches.Arrow.__init__(self,x,y,dx,dy,width=1.0,**kwargs)
matplotlib.patches.Arrow.__str__(self)
matplotlib.patches.Arrow.get_patch_transform(self)
matplotlib.patches.Arrow.get_path(self)
matplotlib.patches.ArrowStyle(_Style)
matplotlib.patches.ArrowStyle.BarAB(self,widthA=1.0,angleA=0,widthB=1.0,angleB=0)
matplotlib.patches.ArrowStyle.BarAB.__init__(self,widthA=1.0,angleA=0,widthB=1.0,angleB=0)
matplotlib.patches.ArrowStyle.BracketA(self,widthA=1.0,lengthA=0.2,angleA=0)
matplotlib.patches.ArrowStyle.BracketA.__init__(self,widthA=1.0,lengthA=0.2,angleA=0)
matplotlib.patches.ArrowStyle.BracketAB(self,widthA=1.0,lengthA=0.2,angleA=0,widthB=1.0,lengthB=0.2,angleB=0)
matplotlib.patches.ArrowStyle.BracketAB.__init__(self,widthA=1.0,lengthA=0.2,angleA=0,widthB=1.0,lengthB=0.2,angleB=0)
matplotlib.patches.ArrowStyle.BracketB(self,widthB=1.0,lengthB=0.2,angleB=0)
matplotlib.patches.ArrowStyle.BracketB.__init__(self,widthB=1.0,lengthB=0.2,angleB=0)
matplotlib.patches.ArrowStyle.BracketCurve(self,widthA=1.0,lengthA=0.2,angleA=None)
matplotlib.patches.ArrowStyle.BracketCurve.__init__(self,widthA=1.0,lengthA=0.2,angleA=None)
matplotlib.patches.ArrowStyle.Curve(self)
matplotlib.patches.ArrowStyle.Curve.__init__(self)
matplotlib.patches.ArrowStyle.CurveA(_Curve)
matplotlib.patches.ArrowStyle.CurveAB(_Curve)
matplotlib.patches.ArrowStyle.CurveB(_Curve)
matplotlib.patches.ArrowStyle.CurveBracket(self,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.CurveBracket.__init__(self,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.CurveFilledA(_Curve)
matplotlib.patches.ArrowStyle.CurveFilledAB(_Curve)
matplotlib.patches.ArrowStyle.CurveFilledB(_Curve)
matplotlib.patches.ArrowStyle.Fancy(self,head_length=0.4,head_width=0.4,tail_width=0.4)
matplotlib.patches.ArrowStyle.Fancy.__init__(self,head_length=0.4,head_width=0.4,tail_width=0.4)
matplotlib.patches.ArrowStyle.Fancy.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle.Simple(self,head_length=0.5,head_width=0.5,tail_width=0.2)
matplotlib.patches.ArrowStyle.Simple.__init__(self,head_length=0.5,head_width=0.5,tail_width=0.2)
matplotlib.patches.ArrowStyle.Simple.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle.Wedge(self,tail_width=0.3,shrink_factor=0.5)
matplotlib.patches.ArrowStyle.Wedge.__init__(self,tail_width=0.3,shrink_factor=0.5)
matplotlib.patches.ArrowStyle.Wedge.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle._Base(self,path,mutation_size,linewidth,aspect_ratio=1.0)
matplotlib.patches.ArrowStyle._Base.__call__(self,path,mutation_size,linewidth,aspect_ratio=1.0)
matplotlib.patches.ArrowStyle._Base.ensure_quadratic_bezier(path)
matplotlib.patches.ArrowStyle._Base.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle._Curve(self,head_length=0.4,head_width=0.2,widthA=1.0,widthB=1.0,lengthA=0.2,lengthB=0.2,angleA=0,angleB=0,scaleA=None,scaleB=None)
matplotlib.patches.ArrowStyle._Curve.__init__(self,head_length=0.4,head_width=0.2,widthA=1.0,widthB=1.0,lengthA=0.2,lengthB=0.2,angleA=0,angleB=0,scaleA=None,scaleB=None)
matplotlib.patches.ArrowStyle._Curve._get_arrow_wedge(self,x0,y0,x1,y1,head_dist,cos_t,sin_t,linewidth)
matplotlib.patches.ArrowStyle._Curve._get_bracket(self,x0,y0,x1,y1,width,length,angle)
matplotlib.patches.ArrowStyle._Curve.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.BoxStyle(_Style)
matplotlib.patches.BoxStyle.Circle(self,pad=0.3)
matplotlib.patches.BoxStyle.Circle.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.DArrow(self,pad=0.3)
matplotlib.patches.BoxStyle.DArrow.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.Ellipse(self,pad=0.3)
matplotlib.patches.BoxStyle.Ellipse.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.LArrow(self,pad=0.3)
matplotlib.patches.BoxStyle.LArrow.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.RArrow(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.RArrow.__call__(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Round(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round.__init__(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round4(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round4.__init__(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Roundtooth(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Roundtooth.__call__(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Sawtooth(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Sawtooth.__init__(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Sawtooth._get_sawtooth_vertices(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Square(self,pad=0.3)
matplotlib.patches.BoxStyle.Square.__init__(self,pad=0.3)
matplotlib.patches.Circle(self,xy,radius=5,**kwargs)
matplotlib.patches.Circle.__init__(self,xy,radius=5,**kwargs)
matplotlib.patches.Circle.__str__(self)
matplotlib.patches.Circle.get_radius(self)
matplotlib.patches.Circle.set_radius(self,radius)
matplotlib.patches.CirclePolygon(self,xy,radius=5,resolution=20,**kwargs)
matplotlib.patches.CirclePolygon.__init__(self,xy,radius=5,resolution=20,**kwargs)
matplotlib.patches.CirclePolygon.__str__(self)
matplotlib.patches.ConnectionPatch(self,xyA,xyB,coordsA,coordsB=None,axesA=None,axesB=None,arrowstyle='-',connectionstyle='arc3',patchA=None,patchB=None,shrinkA=0.0,shrinkB=0.0,mutation_scale=10.0,mutation_aspect=None,clip_on=False,**kwargs)
matplotlib.patches.ConnectionPatch.__init__(self,xyA,xyB,coordsA,coordsB=None,axesA=None,axesB=None,arrowstyle='-',connectionstyle='arc3',patchA=None,patchB=None,shrinkA=0.0,shrinkB=0.0,mutation_scale=10.0,mutation_aspect=None,clip_on=False,**kwargs)
matplotlib.patches.ConnectionPatch.__str__(self)
matplotlib.patches.ConnectionPatch._check_xy(self,renderer)
matplotlib.patches.ConnectionPatch._get_path_in_displaycoord(self)
matplotlib.patches.ConnectionPatch._get_xy(self,xy,s,axes=None)
matplotlib.patches.ConnectionPatch.draw(self,renderer)
matplotlib.patches.ConnectionPatch.get_annotation_clip(self)
matplotlib.patches.ConnectionPatch.set_annotation_clip(self,b)
matplotlib.patches.ConnectionStyle(_Style)
matplotlib.patches.ConnectionStyle.Angle(self,angleA=90,angleB=0,rad=0.0)
matplotlib.patches.ConnectionStyle.Angle.__init__(self,angleA=90,angleB=0,rad=0.0)
matplotlib.patches.ConnectionStyle.Angle.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Angle3(self,angleA=90,angleB=0)
matplotlib.patches.ConnectionStyle.Angle3.__init__(self,angleA=90,angleB=0)
matplotlib.patches.ConnectionStyle.Angle3.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Arc(self,angleA=0,angleB=0,armA=None,armB=None,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc.__init__(self,angleA=0,angleB=0,armA=None,armB=None,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Arc3(self,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc3.__init__(self,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc3.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Bar(self,armA=0.0,armB=0.0,fraction=0.3,angle=None)
matplotlib.patches.ConnectionStyle.Bar.__init__(self,armA=0.0,armB=0.0,fraction=0.3,angle=None)
matplotlib.patches.ConnectionStyle.Bar.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle._Base(self,posA,posB,shrinkA=2.0,shrinkB=2.0,patchA=None,patchB=None)
matplotlib.patches.ConnectionStyle._Base.SimpleEvent(self,xy)
matplotlib.patches.ConnectionStyle._Base.SimpleEvent.__init__(self,xy)
matplotlib.patches.ConnectionStyle._Base.__call__(self,posA,posB,shrinkA=2.0,shrinkB=2.0,patchA=None,patchB=None)
matplotlib.patches.ConnectionStyle._Base._clip(self,path,in_start,in_stop)
matplotlib.patches.ConnectionStyle._Base._in_patch(self,patch)
matplotlib.patches.Ellipse(self,xy,width,height,angle=0,**kwargs)
matplotlib.patches.Ellipse.__init__(self,xy,width,height,angle=0,**kwargs)
matplotlib.patches.Ellipse.__str__(self)
matplotlib.patches.Ellipse._recompute_transform(self)
matplotlib.patches.Ellipse.get_angle(self)
matplotlib.patches.Ellipse.get_center(self)
matplotlib.patches.Ellipse.get_corners(self)
matplotlib.patches.Ellipse.get_height(self)
matplotlib.patches.Ellipse.get_patch_transform(self)
matplotlib.patches.Ellipse.get_path(self)
matplotlib.patches.Ellipse.get_width(self)
matplotlib.patches.Ellipse.set_angle(self,angle)
matplotlib.patches.Ellipse.set_center(self,xy)
matplotlib.patches.Ellipse.set_height(self,height)
matplotlib.patches.Ellipse.set_width(self,width)
matplotlib.patches.FancyArrow(self,x,y,dx,dy,width=0.001,length_includes_head=False,head_width=None,head_length=None,shape='full',overhang=0,head_starts_at_zero=False,**kwargs)
matplotlib.patches.FancyArrow.__init__(self,x,y,dx,dy,width=0.001,length_includes_head=False,head_width=None,head_length=None,shape='full',overhang=0,head_starts_at_zero=False,**kwargs)
matplotlib.patches.FancyArrow.__str__(self)
matplotlib.patches.FancyArrow._make_verts(self)
matplotlib.patches.FancyArrow.set_data(self,*,x=None,y=None,dx=None,dy=None,width=None,head_width=None,head_length=None)
matplotlib.patches.FancyArrowPatch(self,posA=None,posB=None,path=None,arrowstyle='simple',connectionstyle='arc3',patchA=None,patchB=None,shrinkA=2,shrinkB=2,mutation_scale=1,mutation_aspect=1,**kwargs)
matplotlib.patches.FancyArrowPatch.__init__(self,posA=None,posB=None,path=None,arrowstyle='simple',connectionstyle='arc3',patchA=None,patchB=None,shrinkA=2,shrinkB=2,mutation_scale=1,mutation_aspect=1,**kwargs)
matplotlib.patches.FancyArrowPatch.__str__(self)
matplotlib.patches.FancyArrowPatch._get_path_in_displaycoord(self)
matplotlib.patches.FancyArrowPatch.draw(self,renderer)
matplotlib.patches.FancyArrowPatch.get_arrowstyle(self)
matplotlib.patches.FancyArrowPatch.get_connectionstyle(self)
matplotlib.patches.FancyArrowPatch.get_mutation_aspect(self)
matplotlib.patches.FancyArrowPatch.get_mutation_scale(self)
matplotlib.patches.FancyArrowPatch.get_path(self)
matplotlib.patches.FancyArrowPatch.set_arrowstyle(self,arrowstyle=None,**kwargs)
matplotlib.patches.FancyArrowPatch.set_connectionstyle(self,connectionstyle=None,**kwargs)
matplotlib.patches.FancyArrowPatch.set_mutation_aspect(self,aspect)
matplotlib.patches.FancyArrowPatch.set_mutation_scale(self,scale)
matplotlib.patches.FancyArrowPatch.set_patchA(self,patchA)
matplotlib.patches.FancyArrowPatch.set_patchB(self,patchB)
matplotlib.patches.FancyArrowPatch.set_positions(self,posA,posB)
matplotlib.patches.FancyBboxPatch(self,xy,width,height,boxstyle='round',*,mutation_scale=1,mutation_aspect=1,**kwargs)
matplotlib.patches.FancyBboxPatch.__init__(self,xy,width,height,boxstyle='round',*,mutation_scale=1,mutation_aspect=1,**kwargs)
matplotlib.patches.FancyBboxPatch.__str__(self)
matplotlib.patches.FancyBboxPatch.get_bbox(self)
matplotlib.patches.FancyBboxPatch.get_boxstyle(self)
matplotlib.patches.FancyBboxPatch.get_height(self)
matplotlib.patches.FancyBboxPatch.get_mutation_aspect(self)
matplotlib.patches.FancyBboxPatch.get_mutation_scale(self)
matplotlib.patches.FancyBboxPatch.get_path(self)
matplotlib.patches.FancyBboxPatch.get_width(self)
matplotlib.patches.FancyBboxPatch.get_x(self)
matplotlib.patches.FancyBboxPatch.get_y(self)
matplotlib.patches.FancyBboxPatch.set_bounds(self,*args)
matplotlib.patches.FancyBboxPatch.set_boxstyle(self,boxstyle=None,**kwargs)
matplotlib.patches.FancyBboxPatch.set_height(self,h)
matplotlib.patches.FancyBboxPatch.set_mutation_aspect(self,aspect)
matplotlib.patches.FancyBboxPatch.set_mutation_scale(self,scale)
matplotlib.patches.FancyBboxPatch.set_width(self,w)
matplotlib.patches.FancyBboxPatch.set_x(self,x)
matplotlib.patches.FancyBboxPatch.set_y(self,y)
matplotlib.patches.Patch(self,edgecolor=None,facecolor=None,color=None,linewidth=None,linestyle=None,antialiased=None,hatch=None,fill=True,capstyle=None,joinstyle=None,**kwargs)
matplotlib.patches.Patch.__init__(self,edgecolor=None,facecolor=None,color=None,linewidth=None,linestyle=None,antialiased=None,hatch=None,fill=True,capstyle=None,joinstyle=None,**kwargs)
matplotlib.patches.Patch._convert_xy_units(self,xy)
matplotlib.patches.Patch._draw_paths_with_artist_properties(self,renderer,draw_path_args_list)
matplotlib.patches.Patch._process_radius(self,radius)
matplotlib.patches.Patch._set_edgecolor(self,color)
matplotlib.patches.Patch._set_facecolor(self,color)
matplotlib.patches.Patch.contains(self,mouseevent,radius=None)
matplotlib.patches.Patch.contains_point(self,point,radius=None)
matplotlib.patches.Patch.contains_points(self,points,radius=None)
matplotlib.patches.Patch.draw(self,renderer)
matplotlib.patches.Patch.get_antialiased(self)
matplotlib.patches.Patch.get_capstyle(self)
matplotlib.patches.Patch.get_data_transform(self)
matplotlib.patches.Patch.get_edgecolor(self)
matplotlib.patches.Patch.get_extents(self)
matplotlib.patches.Patch.get_facecolor(self)
matplotlib.patches.Patch.get_fill(self)
matplotlib.patches.Patch.get_hatch(self)
matplotlib.patches.Patch.get_joinstyle(self)
matplotlib.patches.Patch.get_linestyle(self)
matplotlib.patches.Patch.get_linewidth(self)
matplotlib.patches.Patch.get_patch_transform(self)
matplotlib.patches.Patch.get_path(self)
matplotlib.patches.Patch.get_transform(self)
matplotlib.patches.Patch.get_verts(self)
matplotlib.patches.Patch.get_window_extent(self,renderer=None)
matplotlib.patches.Patch.set_alpha(self,alpha)
matplotlib.patches.Patch.set_antialiased(self,aa)
matplotlib.patches.Patch.set_capstyle(self,s)
matplotlib.patches.Patch.set_color(self,c)
matplotlib.patches.Patch.set_edgecolor(self,color)
matplotlib.patches.Patch.set_facecolor(self,color)
matplotlib.patches.Patch.set_fill(self,b)
matplotlib.patches.Patch.set_hatch(self,hatch)
matplotlib.patches.Patch.set_joinstyle(self,s)
matplotlib.patches.Patch.set_linestyle(self,ls)
matplotlib.patches.Patch.set_linewidth(self,w)
matplotlib.patches.Patch.update_from(self,other)
matplotlib.patches.PathPatch(self,path,**kwargs)
matplotlib.patches.PathPatch.__init__(self,path,**kwargs)
matplotlib.patches.PathPatch.__str__(self)
matplotlib.patches.PathPatch.get_path(self)
matplotlib.patches.PathPatch.set_path(self,path)
matplotlib.patches.Polygon(self,xy,closed=True,**kwargs)
matplotlib.patches.Polygon.__init__(self,xy,closed=True,**kwargs)
matplotlib.patches.Polygon.__str__(self)
matplotlib.patches.Polygon.get_closed(self)
matplotlib.patches.Polygon.get_path(self)
matplotlib.patches.Polygon.get_xy(self)
matplotlib.patches.Polygon.set_closed(self,closed)
matplotlib.patches.Polygon.set_xy(self,xy)
matplotlib.patches.Rectangle(self,xy,width,height,angle=0.0,*,rotation_point='xy',**kwargs)
matplotlib.patches.Rectangle.__init__(self,xy,width,height,angle=0.0,*,rotation_point='xy',**kwargs)
matplotlib.patches.Rectangle.__str__(self)
matplotlib.patches.Rectangle._convert_units(self)
matplotlib.patches.Rectangle.get_angle(self)
matplotlib.patches.Rectangle.get_bbox(self)
matplotlib.patches.Rectangle.get_center(self)
matplotlib.patches.Rectangle.get_corners(self)
matplotlib.patches.Rectangle.get_height(self)
matplotlib.patches.Rectangle.get_patch_transform(self)
matplotlib.patches.Rectangle.get_path(self)
matplotlib.patches.Rectangle.get_width(self)
matplotlib.patches.Rectangle.get_x(self)
matplotlib.patches.Rectangle.get_xy(self)
matplotlib.patches.Rectangle.get_y(self)
matplotlib.patches.Rectangle.rotation_point(self)
matplotlib.patches.Rectangle.rotation_point(self,value)
matplotlib.patches.Rectangle.set_angle(self,angle)
matplotlib.patches.Rectangle.set_bounds(self,*args)
matplotlib.patches.Rectangle.set_height(self,h)
matplotlib.patches.Rectangle.set_width(self,w)
matplotlib.patches.Rectangle.set_x(self,x)
matplotlib.patches.Rectangle.set_xy(self,xy)
matplotlib.patches.Rectangle.set_y(self,y)
matplotlib.patches.RegularPolygon(self,xy,numVertices,radius=5,orientation=0,**kwargs)
matplotlib.patches.RegularPolygon.__init__(self,xy,numVertices,radius=5,orientation=0,**kwargs)
matplotlib.patches.RegularPolygon.__str__(self)
matplotlib.patches.RegularPolygon.get_patch_transform(self)
matplotlib.patches.RegularPolygon.get_path(self)
matplotlib.patches.Shadow(self,patch,ox,oy,**kwargs)
matplotlib.patches.Shadow.__init__(self,patch,ox,oy,**kwargs)
matplotlib.patches.Shadow.__str__(self)
matplotlib.patches.Shadow._update_transform(self,renderer)
matplotlib.patches.Shadow.draw(self,renderer)
matplotlib.patches.Shadow.get_patch_transform(self)
matplotlib.patches.Shadow.get_path(self)
matplotlib.patches.StepPatch(self,values,edges,*,orientation='vertical',baseline=0,**kwargs)
matplotlib.patches.StepPatch.__init__(self,values,edges,*,orientation='vertical',baseline=0,**kwargs)
matplotlib.patches.StepPatch._update_path(self)
matplotlib.patches.StepPatch.get_data(self)
matplotlib.patches.StepPatch.set_data(self,values=None,edges=None,baseline=None)
matplotlib.patches.Wedge(self,center,r,theta1,theta2,width=None,**kwargs)
matplotlib.patches.Wedge.__init__(self,center,r,theta1,theta2,width=None,**kwargs)
matplotlib.patches.Wedge.__str__(self)
matplotlib.patches.Wedge._recompute_path(self)
matplotlib.patches.Wedge.get_path(self)
matplotlib.patches.Wedge.set_center(self,center)
matplotlib.patches.Wedge.set_radius(self,radius)
matplotlib.patches.Wedge.set_theta1(self,theta1)
matplotlib.patches.Wedge.set_theta2(self,theta2)
matplotlib.patches.Wedge.set_width(self,width)
matplotlib.patches._Style(cls,stylename,**kwargs)
matplotlib.patches._Style.__init_subclass__(cls)
matplotlib.patches._Style.__new__(cls,stylename,**kwargs)
matplotlib.patches._Style.get_styles(cls)
matplotlib.patches._Style.pprint_styles(cls)
matplotlib.patches._Style.register(cls,name,style)
matplotlib.patches._point_along_a_line(x0,y0,x1,y1,d)
matplotlib.patches._register_style(style_list,cls=None,*,name=None)
matplotlib.patches.bbox_artist(artist,renderer,props=None,fill=True)
matplotlib.patches.draw_bbox(bbox,renderer,color='k',trans=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_mathtext_data.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/font_manager.py----------------------------------------
A:matplotlib.font_manager._log->logging.getLogger(__name__)
A:matplotlib.font_manager._ExceptionProxy->namedtuple('_ExceptionProxy', ['klass', 'message'])
A:matplotlib.font_manager._HOME->Path(os.devnull)
A:matplotlib.font_manager.items->set()
A:matplotlib.font_manager.(key, value, tp)->winreg.EnumValue(local, j)
A:matplotlib.font_manager.path->os.fsdecode(path)
A:matplotlib.font_manager.out->subprocess.check_output(['fc-list', '--format=%{file}\\n'])
A:matplotlib.font_manager.fontfiles->set()
A:matplotlib.font_manager.fontexts->get_fontext_synonyms(fontext)
A:matplotlib.font_manager.installed_fonts->_get_fontconfig_fonts()
A:matplotlib.font_manager.fig->Figure()
A:matplotlib.font_manager.png_stream->_fontentry_helper_repr_png(fontent)
A:matplotlib.font_manager.png_b64->b64encode(png_stream).decode()
A:matplotlib.font_manager.FontEntry->dataclasses.make_dataclass('FontEntry', [('fname', str, dataclasses.field(default='')), ('name', str, dataclasses.field(default='')), ('style', str, dataclasses.field(default='normal')), ('variant', str, dataclasses.field(default='normal')), ('weight', str, dataclasses.field(default='normal')), ('stretch', str, dataclasses.field(default='normal')), ('size', str, dataclasses.field(default='medium'))], namespace={'__doc__': '\n    A class for storing Font properties.\n\n    It is used when populating the font lookup dictionary.\n    ', '_repr_html_': lambda self: _fontentry_helper_repr_html(self), '_repr_png_': lambda self: _fontentry_helper_repr_png(self)})
A:matplotlib.font_manager.sfnt->matplotlib.ft2font.FT2Font(path).get_sfnt()
A:matplotlib.font_manager.os2->matplotlib.ft2font.FT2Font(path).get_sfnt_table('OS/2')
A:matplotlib.font_manager.style->style.replace(' ', '').replace(' ', '')
A:matplotlib.font_manager.weight->int(weight)
A:matplotlib.font_manager.name->matplotlib.ft2font.FT2Font(path).get_familyname()
A:matplotlib.font_manager.fontname->matplotlib.ft2font.FT2Font(path).get_fontname().lower()
A:matplotlib.font_manager.stretch->int(stretch)
A:matplotlib.font_manager.size->float(size)
A:matplotlib.font_manager.valid_fonts->_validators['mathtext.fontset'].valid.values()
A:matplotlib.font_manager.d->dict(o.__dict__, __class__='FontEntry')
A:matplotlib.font_manager.d['fname']->str(Path(d['fname']).relative_to(mpl.get_data_path()))
A:matplotlib.font_manager.cls->o.pop('__class__', None)
A:matplotlib.font_manager.r->dataclasses.make_dataclass('FontEntry', [('fname', str, dataclasses.field(default='')), ('name', str, dataclasses.field(default='')), ('style', str, dataclasses.field(default='normal')), ('variant', str, dataclasses.field(default='normal')), ('weight', str, dataclasses.field(default='normal')), ('stretch', str, dataclasses.field(default='normal')), ('size', str, dataclasses.field(default='medium'))], namespace={'__doc__': '\n    A class for storing Font properties.\n\n    It is used when populating the font lookup dictionary.\n    ', '_repr_html_': lambda self: _fontentry_helper_repr_html(self), '_repr_png_': lambda self: _fontentry_helper_repr_png(self)}).__new__(FontEntry)
A:matplotlib.font_manager.r.fname->os.path.join(mpl.get_data_path(), r.fname)
A:matplotlib.font_manager.timer->threading.Timer(5, lambda : _log.warning('Matplotlib is building the font cache; this may take a moment.'))
A:matplotlib.font_manager.font->matplotlib.ft2font.FT2Font(path)
A:matplotlib.font_manager.prop->FontProperties._from_any(prop)
A:matplotlib.font_manager.family2->family2.lower().lower()
A:matplotlib.font_manager.family1->family1.lower().lower()
A:matplotlib.font_manager.idx->options.index(family2)
A:matplotlib.font_manager.stretchval1->stretch_dict.get(stretch1, 500)
A:matplotlib.font_manager.stretchval2->stretch_dict.get(stretch2, 500)
A:matplotlib.font_manager.sizeval1->float(size1)
A:matplotlib.font_manager.sizeval2->float(size2)
A:matplotlib.font_manager.rc_params->tuple((tuple(mpl.rcParams[key]) for key in ['font.serif', 'font.sans-serif', 'font.cursive', 'font.fantasy', 'font.monospace']))
A:matplotlib.font_manager.ret->self._findfont_cached(prop, fontext, directory, fallback_to_default, rebuild_if_missing, rc_params)
A:matplotlib.font_manager.cprop->FontProperties._from_any(prop).copy()
A:matplotlib.font_manager.fname->FontProperties._from_any(prop).get_file()
A:matplotlib.font_manager.default_prop->FontProperties._from_any(prop).copy()
A:matplotlib.font_manager.new_fm->_load_fontmanager(try_read_cache=False)
A:matplotlib.font_manager.paths->tuple((_cached_realpath(fname) for fname in font_filepaths))
A:matplotlib.font_manager.fm_path->Path(mpl.get_cachedir(), f'fontlist-v{FontManager.__version__}.json')
A:matplotlib.font_manager.fm->FontManager()
A:matplotlib.font_manager.fontManager->_load_fontmanager()
matplotlib.font_manager.FontManager(self,size=None,weight='normal')
matplotlib.font_manager.FontManager.__init__(self,size=None,weight='normal')
matplotlib.font_manager.FontManager._expand_aliases(family)
matplotlib.font_manager.FontManager._find_fonts_by_props(self,prop,fontext='ttf',directory=None,fallback_to_default=True,rebuild_if_missing=True)
matplotlib.font_manager.FontManager._findfont_cached(self,prop,fontext,directory,fallback_to_default,rebuild_if_missing,rc_params)
matplotlib.font_manager.FontManager.addfont(self,path)
matplotlib.font_manager.FontManager.defaultFont(self)
matplotlib.font_manager.FontManager.findfont(self,prop,fontext='ttf',directory=None,fallback_to_default=True,rebuild_if_missing=True)
matplotlib.font_manager.FontManager.get_default_size()
matplotlib.font_manager.FontManager.get_default_weight(self)
matplotlib.font_manager.FontManager.get_font_names(self)
matplotlib.font_manager.FontManager.score_family(self,families,family2)
matplotlib.font_manager.FontManager.score_size(self,size1,size2)
matplotlib.font_manager.FontManager.score_stretch(self,stretch1,stretch2)
matplotlib.font_manager.FontManager.score_style(self,style1,style2)
matplotlib.font_manager.FontManager.score_variant(self,variant1,variant2)
matplotlib.font_manager.FontManager.score_weight(self,weight1,weight2)
matplotlib.font_manager.FontManager.set_default_weight(self,weight)
matplotlib.font_manager.FontProperties(self,family=None,style=None,variant=None,weight=None,stretch=None,size=None,fname=None,math_fontfamily=None)
matplotlib.font_manager.FontProperties.__eq__(self,other)
matplotlib.font_manager.FontProperties.__hash__(self)
matplotlib.font_manager.FontProperties.__init__(self,family=None,style=None,variant=None,weight=None,stretch=None,size=None,fname=None,math_fontfamily=None)
matplotlib.font_manager.FontProperties.__str__(self)
matplotlib.font_manager.FontProperties._from_any(cls,arg)
matplotlib.font_manager.FontProperties.copy(self)
matplotlib.font_manager.FontProperties.get_family(self)
matplotlib.font_manager.FontProperties.get_file(self)
matplotlib.font_manager.FontProperties.get_fontconfig_pattern(self)
matplotlib.font_manager.FontProperties.get_math_fontfamily(self)
matplotlib.font_manager.FontProperties.get_name(self)
matplotlib.font_manager.FontProperties.get_size(self)
matplotlib.font_manager.FontProperties.get_stretch(self)
matplotlib.font_manager.FontProperties.get_style(self)
matplotlib.font_manager.FontProperties.get_variant(self)
matplotlib.font_manager.FontProperties.get_weight(self)
matplotlib.font_manager.FontProperties.set_family(self,family)
matplotlib.font_manager.FontProperties.set_file(self,file)
matplotlib.font_manager.FontProperties.set_fontconfig_pattern(self,pattern)
matplotlib.font_manager.FontProperties.set_math_fontfamily(self,fontfamily)
matplotlib.font_manager.FontProperties.set_size(self,size)
matplotlib.font_manager.FontProperties.set_stretch(self,stretch)
matplotlib.font_manager.FontProperties.set_style(self,style)
matplotlib.font_manager.FontProperties.set_variant(self,variant)
matplotlib.font_manager.FontProperties.set_weight(self,weight)
matplotlib.font_manager._JSONEncoder(json.JSONEncoder)
matplotlib.font_manager._JSONEncoder.default(self,o)
matplotlib.font_manager._cached_realpath(path)
matplotlib.font_manager._fontentry_helper_repr_html(fontent)
matplotlib.font_manager._fontentry_helper_repr_png(fontent)
matplotlib.font_manager._get_font(font_filepaths,hinting_factor,*,_kerning_factor,thread_id)
matplotlib.font_manager._get_fontconfig_fonts()
matplotlib.font_manager._get_win32_installed_fonts()
matplotlib.font_manager._json_decode(o)
matplotlib.font_manager._load_fontmanager(*,try_read_cache=True)
matplotlib.font_manager.afmFontProperty(fontpath,font)
matplotlib.font_manager.findSystemFonts(fontpaths=None,fontext='ttf')
matplotlib.font_manager.get_font(font_filepaths,hinting_factor=None)
matplotlib.font_manager.get_fontext_synonyms(fontext)
matplotlib.font_manager.is_opentype_cff_font(filename)
matplotlib.font_manager.json_dump(data,filename)
matplotlib.font_manager.json_load(filename)
matplotlib.font_manager.list_fonts(directory,extensions)
matplotlib.font_manager.ttfFontProperty(font)
matplotlib.font_manager.win32FontDirectory()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_layoutgrid.py----------------------------------------
A:matplotlib._layoutgrid._log->logging.getLogger(__name__)
A:matplotlib._layoutgrid.self.height_ratios->numpy.ones(nrows)
A:matplotlib._layoutgrid.self.width_ratios->numpy.ones(ncols)
A:matplotlib._layoutgrid.self.solver->kiwisolver.Solver()
A:matplotlib._layoutgrid.self.artists->numpy.empty((nrows, ncols), dtype=object)
A:matplotlib._layoutgrid.self.children->numpy.empty((nrows, ncols), dtype=object)
A:matplotlib._layoutgrid.self.margin_vals[todo]->numpy.zeros(nrows)
A:matplotlib._layoutgrid.self.margins[todo]->numpy.empty(nrows, dtype=object)
A:matplotlib._layoutgrid.rows->numpy.atleast_1d(rows)
A:matplotlib._layoutgrid.cols->numpy.atleast_1d(cols)
A:matplotlib._layoutgrid.bbox->matplotlib.transforms.Bbox.from_extents(self.lefts[cols[0]].value(), self.tops[rows[0]].value() - self.margins['topcb'][rows[0]].value(), self.rights[cols[-1]].value(), self.tops[rows[0]].value() - self.margins['topcb'][rows[0]].value() - self.margins['top'][rows[0]].value())
A:matplotlib._layoutgrid._layoutboxobjnum->itertools.count()
A:matplotlib._layoutgrid._layoutgrids->fig.get_layout_engine().execute(fig)
A:matplotlib._layoutgrid.bb->lg.get_outer_bbox(rows=i, cols=j)
A:matplotlib._layoutgrid.bbi->lg.get_top_margin_bbox(rows=i, cols=j)
matplotlib._layoutgrid.LayoutGrid(self,parent=None,parent_pos=(0,0),parent_inner=False,name='',ncols=1,nrows=1,h_pad=None,w_pad=None,width_ratios=None,height_ratios=None)
matplotlib._layoutgrid.LayoutGrid.__init__(self,parent=None,parent_pos=(0,0),parent_inner=False,name='',ncols=1,nrows=1,h_pad=None,w_pad=None,width_ratios=None,height_ratios=None)
matplotlib._layoutgrid.LayoutGrid.__repr__(self)
matplotlib._layoutgrid.LayoutGrid.add_child(self,child,i=0,j=0)
matplotlib._layoutgrid.LayoutGrid.add_constraints(self,parent)
matplotlib._layoutgrid.LayoutGrid.edit_all_margins_min(self,todo,size)
matplotlib._layoutgrid.LayoutGrid.edit_margin(self,todo,size,cell)
matplotlib._layoutgrid.LayoutGrid.edit_margin_min(self,todo,size,cell=0)
matplotlib._layoutgrid.LayoutGrid.edit_margins(self,todo,size)
matplotlib._layoutgrid.LayoutGrid.edit_outer_margin_mins(self,margin,ss)
matplotlib._layoutgrid.LayoutGrid.get_bbox_for_cb(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_bottom_margin_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_inner_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_left_margin_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_margins(self,todo,col)
matplotlib._layoutgrid.LayoutGrid.get_outer_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_right_margin_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.get_top_margin_bbox(self,rows=0,cols=0)
matplotlib._layoutgrid.LayoutGrid.grid_constraints(self)
matplotlib._layoutgrid.LayoutGrid.hard_constraints(self)
matplotlib._layoutgrid.LayoutGrid.parent_constraints(self,parent)
matplotlib._layoutgrid.LayoutGrid.reset_margins(self)
matplotlib._layoutgrid.LayoutGrid.update_variables(self)
matplotlib._layoutgrid.plot_children(fig,lg=None,level=0)
matplotlib._layoutgrid.seq_id()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_animation_data.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/markers.py----------------------------------------
A:matplotlib.markers.(TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN, CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN, CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE)->range(12)
A:matplotlib.markers._empty_path->Path(np.empty((0, 2)))
A:matplotlib.markers._unset->object()
A:matplotlib.markers.__init__.__signature__->inspect.signature(lambda self, marker, fillstyle=None: None)
A:matplotlib.markers.self._transform->Affine2D()
A:matplotlib.markers.self._marker_function->getattr(self, '_set_' + self.markers[marker])
A:matplotlib.markers.self.__dict__->copy.deepcopy(marker.__dict__)
A:matplotlib.markers.new_marker->MarkerStyle(self)
A:matplotlib.markers.new_marker._user_transform->_transform.scale(sx, sy)
A:matplotlib.markers.rescale->numpy.max(np.abs(path.vertices))
A:matplotlib.markers.self._path->Path([[0, 0], [1, 0], [1, 1], [0, 0]])
A:matplotlib.markers.text->TextPath(xy=(0, 0), s=self.get_marker(), usetex=mpl.rcParams['text.usetex'])
A:matplotlib.markers.(xmin, ymin)->TextPath(xy=(0, 0), s=self.get_marker(), usetex=mpl.rcParams['text.usetex']).vertices.min(axis=0)
A:matplotlib.markers.(xmax, ymax)->TextPath(xy=(0, 0), s=self.get_marker(), usetex=mpl.rcParams['text.usetex']).vertices.max(axis=0)
A:matplotlib.markers.max_dim->max(width, height)
A:matplotlib.markers.self._pathself._alt_path->Path([[0, -1], [0, 1], [-x, 1], [-1, x], [-1, -x], [-x, -1], [0, -1]])
A:matplotlib.markers.fs->self.get_fillstyle()
A:matplotlib.markers.self._alt_transform->self._transform.frozen().rotate_deg(180)
A:matplotlib.markers._triangle_path->path.Path._create_closed([[0, 1], [-1, -1], [1, -1]])
A:matplotlib.markers._triangle_path_u->path.Path._create_closed([[0, 1], [-3 / 5, -1 / 5], [3 / 5, -1 / 5]])
A:matplotlib.markers._triangle_path_d->path.Path._create_closed([[-3 / 5, -1 / 5], [3 / 5, -1 / 5], [1, -1], [-1, -1]])
A:matplotlib.markers._triangle_path_l->path.Path._create_closed([[0, 1], [0, -1], [-1, -1]])
A:matplotlib.markers._triangle_path_r->path.Path._create_closed([[0, 1], [0, -1], [1, -1]])
A:matplotlib.markers.self._alt_path->Path([[0, 0], [0, 1], [1, 1], [0, 0]])
A:matplotlib.markers.polypath->path.Path.unit_regular_polygon(8)
A:matplotlib.markers.top->Path(verts[[1, 0, 5, 4, 1]])
A:matplotlib.markers.bottom->Path(verts[1:5])
A:matplotlib.markers.left->Path(np.concatenate([[(x, y)], verts[:3], [(-x, -y), (x, y)]]))
A:matplotlib.markers.right->Path(np.concatenate([[(x, y)], verts[5:2:-1], [(-x, -y)]]))
A:matplotlib.markers.x->numpy.abs(np.cos(5 * np.pi / 6.0))
A:matplotlib.markers._line_marker_path->Path([[0.0, -1.0], [0.0, 1.0]])
A:matplotlib.markers._tickhoriz_path->Path([[0.0, 0.0], [1.0, 0.0]])
A:matplotlib.markers._tickvert_path->Path([[-0.0, 0.0], [-0.0, 1.0]])
A:matplotlib.markers._tri_path->Path([[0.0, 0.0], [0.0, -1.0], [0.0, 0.0], [0.8, 0.5], [0.0, 0.0], [-0.8, 0.5]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._caret_path->Path([[-1.0, 1.5], [0.0, 0.0], [1.0, 1.5]])
A:matplotlib.markers._caret_path_base->Path([[-1.0, 0.0], [0.0, -1.5], [1.0, 0]])
A:matplotlib.markers._plus_path->Path([[-1.0, 0.0], [1.0, 0.0], [0.0, -1.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._x_path->Path([[-1.0, -1.0], [1.0, 1.0], [-1.0, 1.0], [1.0, -1.0]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._plus_filled_path->path.Path._create_closed(np.array([(-1, -3), (+1, -3), (+1, -1), (+3, -1), (+3, +1), (+1, +1), (+1, +3), (-1, +3), (-1, +1), (-3, +1), (-3, -1), (-1, -1)]) / 6)
A:matplotlib.markers._plus_filled_path_t->path.Path._create_closed(np.array([(+3, 0), (+3, +1), (+1, +1), (+1, +3), (-1, +3), (-1, +1), (-3, +1), (-3, 0)]) / 6)
A:matplotlib.markers._x_filled_path->path.Path._create_closed(np.array([(-1, -2), (0, -1), (+1, -2), (+2, -1), (+1, 0), (+2, +1), (+1, +2), (0, +1), (-1, +2), (-2, +1), (-1, 0), (-2, -1)]) / 4)
A:matplotlib.markers._x_filled_path_t->path.Path._create_closed(np.array([(+1, 0), (+2, +1), (+1, +2), (0, +1), (-1, +2), (-2, +1), (-1, 0)]) / 4)
matplotlib.markers.MarkerStyle(self,marker=_unset,fillstyle=None,transform=None,capstyle=None,joinstyle=None)
matplotlib.markers.MarkerStyle.__bool__(self)
matplotlib.markers.MarkerStyle.__init__(self,marker=_unset,fillstyle=None,transform=None,capstyle=None,joinstyle=None)
matplotlib.markers.MarkerStyle._half_fill(self)
matplotlib.markers.MarkerStyle._recache(self)
matplotlib.markers.MarkerStyle._set_caretdown(self)
matplotlib.markers.MarkerStyle._set_caretdownbase(self)
matplotlib.markers.MarkerStyle._set_caretleft(self)
matplotlib.markers.MarkerStyle._set_caretleftbase(self)
matplotlib.markers.MarkerStyle._set_caretright(self)
matplotlib.markers.MarkerStyle._set_caretrightbase(self)
matplotlib.markers.MarkerStyle._set_caretup(self)
matplotlib.markers.MarkerStyle._set_caretupbase(self)
matplotlib.markers.MarkerStyle._set_circle(self,size=1.0)
matplotlib.markers.MarkerStyle._set_custom_marker(self,path)
matplotlib.markers.MarkerStyle._set_diamond(self)
matplotlib.markers.MarkerStyle._set_fillstyle(self,fillstyle)
matplotlib.markers.MarkerStyle._set_hexagon1(self)
matplotlib.markers.MarkerStyle._set_hexagon2(self)
matplotlib.markers.MarkerStyle._set_hline(self)
matplotlib.markers.MarkerStyle._set_marker(self,marker)
matplotlib.markers.MarkerStyle._set_mathtext_path(self)
matplotlib.markers.MarkerStyle._set_nothing(self)
matplotlib.markers.MarkerStyle._set_octagon(self)
matplotlib.markers.MarkerStyle._set_path_marker(self)
matplotlib.markers.MarkerStyle._set_pentagon(self)
matplotlib.markers.MarkerStyle._set_pixel(self)
matplotlib.markers.MarkerStyle._set_plus(self)
matplotlib.markers.MarkerStyle._set_plus_filled(self)
matplotlib.markers.MarkerStyle._set_point(self)
matplotlib.markers.MarkerStyle._set_square(self)
matplotlib.markers.MarkerStyle._set_star(self)
matplotlib.markers.MarkerStyle._set_thin_diamond(self)
matplotlib.markers.MarkerStyle._set_tickdown(self)
matplotlib.markers.MarkerStyle._set_tickleft(self)
matplotlib.markers.MarkerStyle._set_tickright(self)
matplotlib.markers.MarkerStyle._set_tickup(self)
matplotlib.markers.MarkerStyle._set_tri_down(self)
matplotlib.markers.MarkerStyle._set_tri_left(self)
matplotlib.markers.MarkerStyle._set_tri_right(self)
matplotlib.markers.MarkerStyle._set_tri_up(self)
matplotlib.markers.MarkerStyle._set_triangle(self,rot,skip)
matplotlib.markers.MarkerStyle._set_triangle_down(self)
matplotlib.markers.MarkerStyle._set_triangle_left(self)
matplotlib.markers.MarkerStyle._set_triangle_right(self)
matplotlib.markers.MarkerStyle._set_triangle_up(self)
matplotlib.markers.MarkerStyle._set_tuple_marker(self)
matplotlib.markers.MarkerStyle._set_vertices(self)
matplotlib.markers.MarkerStyle._set_vline(self)
matplotlib.markers.MarkerStyle._set_x(self)
matplotlib.markers.MarkerStyle._set_x_filled(self)
matplotlib.markers.MarkerStyle.get_alt_path(self)
matplotlib.markers.MarkerStyle.get_alt_transform(self)
matplotlib.markers.MarkerStyle.get_capstyle(self)
matplotlib.markers.MarkerStyle.get_fillstyle(self)
matplotlib.markers.MarkerStyle.get_joinstyle(self)
matplotlib.markers.MarkerStyle.get_marker(self)
matplotlib.markers.MarkerStyle.get_path(self)
matplotlib.markers.MarkerStyle.get_snap_threshold(self)
matplotlib.markers.MarkerStyle.get_transform(self)
matplotlib.markers.MarkerStyle.get_user_transform(self)
matplotlib.markers.MarkerStyle.is_filled(self)
matplotlib.markers.MarkerStyle.rotated(self,*,deg=None,rad=None)
matplotlib.markers.MarkerStyle.scaled(self,sx,sy=None)
matplotlib.markers.MarkerStyle.transformed(self,transform:Affine2D)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/widgets.py----------------------------------------
A:matplotlib.widgets.active->property(get_active, set_active, doc='Is the widget active?')
A:matplotlib.widgets.cid->self.canvas.mpl_connect(event, callback)
A:matplotlib.widgets.self.label->ax.text(-label_pad, 0.5, label, transform=ax.transAxes, verticalalignment='center', horizontalalignment='right')
A:matplotlib.widgets.self._observers->cbook.CallbackRegistry(signals=['clicked'])
A:matplotlib.widgets.self._fmt->ticker.ScalarFormatter()
A:matplotlib.widgets.valstep->numpy.asanyarray(self.valstep)
A:matplotlib.widgets.valinit->self._value_in_bounds(valinit)
A:matplotlib.widgets.self.track->Rectangle((0, 0.25), 1, 0.5, transform=ax.transAxes, facecolor=track_color)
A:matplotlib.widgets.self.poly->Polygon(np.zeros([5, 2]), **kwargs)
A:matplotlib.widgets.self.hline->ax.axhline(valinit, 0, 1, color=initcolor, lw=1, clip_path=TransformedPatchPath(self.track))
A:matplotlib.widgets.self.vline->ax.axvline(valinit, 0, 1, color=initcolor, lw=1, clip_path=TransformedPatchPath(self.track))
A:matplotlib.widgets.(self._handle,)->ax.plot(*handleXY, 'o', **marker_props, clip_on=False)
A:matplotlib.widgets.self.valtext->ax.text(1.02, 0.5, self._format(valinit), transform=ax.transAxes, verticalalignment='center', horizontalalignment='left')
A:matplotlib.widgets.val->numpy.sort(val)
A:matplotlib.widgets.(_, s, _)->self._fmt.format_ticks([self.valmin, val, self.valmax])
A:matplotlib.widgets.poly_transform->self.ax.get_xaxis_transform(which='grid')
A:matplotlib.widgets.idx->numpy.argmin(np.abs(self.val - pos))
A:matplotlib.widgets.handle_index->numpy.argmin(np.abs([h.get_xdata()[0] - event.xdata for h in self._handles]))
A:matplotlib.widgets.(_, s1, s2, _)->self._fmt.format_ticks([self.valmin, *val, self.valmax])
A:matplotlib.widgets.(vmin, vmax)->self._value_in_bounds(val)
A:matplotlib.widgets.props->dict(color='k', linestyle='-', linewidth=2, alpha=0.5)
A:matplotlib.widgets.label_props->_expand_text_props(label_props)
A:matplotlib.widgets.self._frames->ax.scatter([0.15] * len(ys), ys, **frame_props)
A:matplotlib.widgets.self._checks->ax.scatter([0.15] * len(ys), ys, **check_props)
A:matplotlib.widgets.self._background->self.canvas.copy_from_bbox(self.ax.bbox)
A:matplotlib.widgets.pclicked->self.ax.transAxes.inverted().transform((event.x, event.y))
A:matplotlib.widgets.(x0, y0)->self._selection_artist.get_transform().transform(self._xys[0])
A:matplotlib.widgets.distances[i]->numpy.linalg.norm(pclicked - coords[i])
A:matplotlib.widgets.(_, frame_inds)->self._frames.contains(event)
A:matplotlib.widgets.coords->self._buttons.get_offset_transform().transform(self._buttons.get_offsets())
A:matplotlib.widgets.closest->min(distances, key=distances.get)
A:matplotlib.widgets.props['sizes']->numpy.broadcast_to(props.pop('s'), len(self.labels))
A:matplotlib.widgets.actives->self.get_status()
A:matplotlib.widgets.invisible->colors.to_rgba('none')
A:matplotlib.widgets.facecolors->self._checks.get_facecolor()
A:matplotlib.widgets.self._active_check_colors->numpy.repeat(self._active_check_colors, len(actives), axis=0)
A:matplotlib.widgets.current_status->self.get_status()
A:matplotlib.widgets.l1->Line2D([x, x + w], [y + h, y], **lineparams)
A:matplotlib.widgets.l2->Line2D([x, x + w], [y, y + h], **lineparams)
A:matplotlib.widgets.self._text_position->_api.check_getitem({'left': 0.05, 'center': 0.5, 'right': 0.95}, textalignment=textalignment)
A:matplotlib.widgets.self.text_disp->self.ax.text(self._text_position, 0.5, initial, transform=self.ax.transAxes, verticalalignment='center', horizontalalignment=textalignment, parse_math=False)
A:matplotlib.widgets.self.cursor->ax.vlines(0, 0, 0, visible=False, color='k', lw=1, transform=mpl.transforms.IdentityTransform())
A:matplotlib.widgets.text->self.text_disp.get_text()
A:matplotlib.widgets.bb_text->self.text_disp.get_window_extent()
A:matplotlib.widgets.bb_widthtext->self.text_disp.get_window_extent()
A:matplotlib.widgets.self.cursor_index->self.text_disp._char_index_at(event.x)
A:matplotlib.widgets.newval->str(val)
A:matplotlib.widgets.stack->ExitStack()
A:matplotlib.widgets.toolmanager->getattr(self.ax.figure.canvas.manager, 'toolmanager', None)
A:matplotlib.widgets.radio_props->cbook.normalize_kwargs(radio_props, collections.PathCollection)
A:matplotlib.widgets.self._buttons->ax.scatter([0.15] * len(ys), ys, **radio_props)
A:matplotlib.widgets.self._active_colors->numpy.repeat(self._active_colors, len(self.labels), axis=0)
A:matplotlib.widgets.(_, inds)->self._buttons.contains(event)
A:matplotlib.widgets.self.value_selected->self.labels[index].get_text()
A:matplotlib.widgets.button_facecolors->self._buttons.get_facecolor()
A:matplotlib.widgets.button_facecolors[:]->colors.to_rgba('none')
A:matplotlib.widgets.button_facecolors[index]->colors.to_rgba(self._active_colors[index])
A:matplotlib.widgets.radius->min(0.5 / (len(self.labels) + 1) - 0.01, 0.05)
A:matplotlib.widgets.slider->Slider(ax, name, 0, 1, valinit=getattr(targetfig.subplotpars, name))
A:matplotlib.widgets.bax->toolfig.add_axes([0.8, 0.05, 0.15, 0.075])
A:matplotlib.widgets.self.buttonreset->Button(bax, 'Reset')
A:matplotlib.widgets.self.lineh->ax.axhline(ax.get_ybound()[0], visible=False, **lineprops)
A:matplotlib.widgets.self.linev->ax.axvline(ax.get_xbound()[0], visible=False, **lineprops)
A:matplotlib.widgets.self.background->self.canvas.copy_from_bbox(self.ax.bbox)
A:matplotlib.widgets.(xmin, xmax)->sorted([x0, x1])
A:matplotlib.widgets.(ymin, ymax)->sorted([y0, y1])
A:matplotlib.widgets.canvas->_api.deprecate_privatize_attribute('3.6')
A:matplotlib.widgets.background->_api.deprecated('3.6')(lambda self: self._backgrounds[self.axes[0].figure.canvas] if self.axes else None)
A:matplotlib.widgets.needclear->_api.deprecated('3.7')(lambda self: False)
A:matplotlib.widgets.info['background']->_api.deprecate_privatize_attribute('3.6').copy_from_bbox(canvas.figure.bbox)
A:matplotlib.widgets.self._state_modifier_keys->dict(move=' ', clear='escape', square='shift', center='control', rotate='r')
A:matplotlib.widgets.self._state->set()
A:matplotlib.widgets.state_modifier_keys->dict(clear='escape', move_vertex='control', move_all='shift', move='not-applicable', square='not-applicable', center='not-applicable', rotate='not-applicable')
A:matplotlib.widgets.artists->sorted(self.artists + self._get_animated_artists(), key=lambda a: a.get_zorder())
A:matplotlib.widgets.needs_redraw->any((artist.get_visible() for artist in artists))
A:matplotlib.widgets.xdata->numpy.clip(event.xdata, *self.ax.get_xbound())
A:matplotlib.widgets.ydata->numpy.clip(event.ydata, *self.ax.get_ybound())
A:matplotlib.widgets.event->self._clean_event(event)
A:matplotlib.widgets.(event.xdata, event.ydata)->self._get_rotation_transform().inverted().transform([event.xdata, event.ydata])
A:matplotlib.widgets.key->key.replace('ctrl', 'control').replace('ctrl', 'control')
A:matplotlib.widgets.handles_artists->getattr(self, '_handles_artists', ())
A:matplotlib.widgets.handle_props->dict(markeredgecolor='k', markerfacecolor=self._props.get('color', 'k'))
A:matplotlib.widgets.trans->ax.get_yaxis_transform()
A:matplotlib.widgets.rect_artist->Rectangle((0, 0), w, h, transform=trans, visible=False, **self._props)
A:matplotlib.widgets.positions->self.ax.get_ybound()
A:matplotlib.widgets.self._edge_handles->ToolHandles(self.ax, xe, ye, marker='s', marker_props=self._handle_props, useblit=self.useblit)
A:matplotlib.widgets.self._prev->self._get_data(event)
A:matplotlib.widgets.(_, e_dist)->self._edge_handles.closest(event.x, event.y)
A:matplotlib.widgets.(e_idx, e_dist)->self._edge_handles.closest(event.x, event.y)
A:matplotlib.widgets.vmin->self._selection_artist.get_y()
A:matplotlib.widgets.extents->tuple(self._snap(extents, self.snap_values))
A:matplotlib.widgets.p_pts->numpy.array([self.ax.transData.transform((0, p))[1] for p in self.positions])
A:matplotlib.widgets.dist->numpy.hypot(*diff.T)
A:matplotlib.widgets.index->numpy.argmin(dist)
A:matplotlib.widgets.self._markers->Line2D(x, y, animated=useblit, **props)
A:matplotlib.widgets.pts->self.ax.transData.transform(pts)
A:matplotlib.widgets.min_index->numpy.argmin(dist)
A:matplotlib.widgets.self._visible->self._props.pop('visible', self._visible)
A:matplotlib.widgets.to_draw->self._init_shape(**self._props)
A:matplotlib.widgets.self._corner_handles->ToolHandles(self.ax, xc, yc, marker_props=self._handle_props, useblit=self.useblit)
A:matplotlib.widgets.self._center_handle->ToolHandles(self.ax, [xc], [yc], marker='s', marker_props=self._handle_props, useblit=self.useblit)
A:matplotlib.widgets.xy0->self.ax.transData.transform([x0, y0])
A:matplotlib.widgets.xy1->self.ax.transData.transform([x1, y1])
A:matplotlib.widgets.spanx->abs(self._eventpress.x - self._eventrelease.x)
A:matplotlib.widgets.spany->abs(self._eventpress.y - self._eventrelease.y)
A:matplotlib.widgets.inv_tr->self._get_rotation_transform().inverted()
A:matplotlib.widgets.(eventpress.xdata, eventpress.ydata)->self._get_rotation_transform().inverted().transform([eventpress.xdata, eventpress.ydata])
A:matplotlib.widgets.a->numpy.array([eventpress.xdata, eventpress.ydata])
A:matplotlib.widgets.b->numpy.array(self.center)
A:matplotlib.widgets.c->numpy.array([event.xdata, event.ydata])
A:matplotlib.widgets.self.rotation->numpy.rad2deg(self._rotation_on_press + angle)
A:matplotlib.widgets.refmax->max(refx, refy, key=abs)
A:matplotlib.widgets.hw->abs(event.xdata - center[0])
A:matplotlib.widgets.hh->abs(event.ydata - center[1])
A:matplotlib.widgets.sign->numpy.sign(event.xdata - x0)
A:matplotlib.widgets.aspect_ratio->self.ax._get_aspect_ratio()
A:matplotlib.widgets.transform->self._get_rotation_transform()
A:matplotlib.widgets.self._rotation->numpy.deg2rad(value)
A:matplotlib.widgets.xlim->sorted(self.ax.get_xlim())
A:matplotlib.widgets.ylim->sorted(self.ax.get_ylim())
A:matplotlib.widgets.xmin->max(xlim[0], xmin)
A:matplotlib.widgets.ymin->max(ylim[0], ymin)
A:matplotlib.widgets.xmax->min(xmax, xlim[1])
A:matplotlib.widgets.ymax->min(ymax, ylim[1])
A:matplotlib.widgets.(c_idx, c_dist)->self._corner_handles.closest(event.x, event.y)
A:matplotlib.widgets.(m_idx, m_dist)->self._center_handle.closest(event.x, event.y)
A:matplotlib.widgets.xfm->self.ax.transData.inverted()
A:matplotlib.widgets.line->Line2D([], [], **props)
A:matplotlib.widgets.self._selection_artistline->Line2D([], [], **self._props)
A:matplotlib.widgets.self._polygon_handles->ToolHandles(self.ax, [], [], useblit=self.useblit, marker_props=self._handle_props)
A:matplotlib.widgets.self._box_handle_props->self._handle_props.update(box_handle_props)
A:matplotlib.widgets.self._box->RectangleSelector(self.ax, onselect=lambda *args, **kwargs: None, useblit=self.useblit, grab_range=self.grab_range, handle_props=self._box_handle_props, props=self._box_props, interactive=True)
A:matplotlib.widgets.bbox->self._get_bbox()
A:matplotlib.widgets.old_bbox->self._get_bbox()
A:matplotlib.widgets.t->transforms.Affine2D().translate(-old_bbox.x0, -old_bbox.y0).scale(1 / old_bbox.width, 1 / old_bbox.height).scale(w1, h1).translate(x1, y1)
A:matplotlib.widgets.(h_idx, h_dist)->self._polygon_handles.closest(event.x, event.y)
A:matplotlib.widgets.self._xys_at_press->self._xys.copy()
A:matplotlib.widgets.v0_dist->numpy.hypot(x0 - event.x, y0 - event.y)
A:matplotlib.widgets.self.line->Line2D([x], [y], linestyle='-', color='black', lw=2)
matplotlib.widgets.AxesWidget(self,ax)
matplotlib.widgets.AxesWidget.__init__(self,ax)
matplotlib.widgets.AxesWidget.connect_event(self,event,callback)
matplotlib.widgets.AxesWidget.disconnect_events(self)
matplotlib.widgets.Button(self,ax,label,image=None,color='0.85',hovercolor='0.95',*,useblit=True)
matplotlib.widgets.Button.__init__(self,ax,label,image=None,color='0.85',hovercolor='0.95',*,useblit=True)
matplotlib.widgets.Button._click(self,event)
matplotlib.widgets.Button._motion(self,event)
matplotlib.widgets.Button._release(self,event)
matplotlib.widgets.Button.disconnect(self,cid)
matplotlib.widgets.Button.on_clicked(self,func)
matplotlib.widgets.CheckButtons(self,ax,labels,actives=None,*,useblit=True,label_props=None,frame_props=None,check_props=None)
matplotlib.widgets.CheckButtons.__init__(self,ax,labels,actives=None,*,useblit=True,label_props=None,frame_props=None,check_props=None)
matplotlib.widgets.CheckButtons._clear(self,event)
matplotlib.widgets.CheckButtons._clicked(self,event)
matplotlib.widgets.CheckButtons._init_status(self,actives)
matplotlib.widgets.CheckButtons.disconnect(self,cid)
matplotlib.widgets.CheckButtons.get_status(self)
matplotlib.widgets.CheckButtons.lines(self)
matplotlib.widgets.CheckButtons.on_clicked(self,func)
matplotlib.widgets.CheckButtons.rectangles(self)
matplotlib.widgets.CheckButtons.set_active(self,index)
matplotlib.widgets.CheckButtons.set_check_props(self,props)
matplotlib.widgets.CheckButtons.set_frame_props(self,props)
matplotlib.widgets.CheckButtons.set_label_props(self,props)
matplotlib.widgets.Cursor(self,ax,horizOn=True,vertOn=True,useblit=False,**lineprops)
matplotlib.widgets.Cursor.__init__(self,ax,horizOn=True,vertOn=True,useblit=False,**lineprops)
matplotlib.widgets.Cursor._update(self)
matplotlib.widgets.Cursor.clear(self,event)
matplotlib.widgets.Cursor.onmove(self,event)
matplotlib.widgets.EllipseSelector(RectangleSelector)
matplotlib.widgets.EllipseSelector._draw_shape(self,extents)
matplotlib.widgets.EllipseSelector._init_shape(self,**props)
matplotlib.widgets.EllipseSelector._rect_bbox(self)
matplotlib.widgets.Lasso(self,ax,xy,callback,useblit=True)
matplotlib.widgets.Lasso.__init__(self,ax,xy,callback,useblit=True)
matplotlib.widgets.Lasso.onmove(self,event)
matplotlib.widgets.Lasso.onrelease(self,event)
matplotlib.widgets.LassoSelector(self,ax,onselect,useblit=True,props=None,button=None)
matplotlib.widgets.LassoSelector.__init__(self,ax,onselect,useblit=True,props=None,button=None)
matplotlib.widgets.LassoSelector._onmove(self,event)
matplotlib.widgets.LassoSelector._press(self,event)
matplotlib.widgets.LassoSelector._release(self,event)
matplotlib.widgets.LockDraw(self)
matplotlib.widgets.LockDraw.__init__(self)
matplotlib.widgets.LockDraw.available(self,o)
matplotlib.widgets.LockDraw.isowner(self,o)
matplotlib.widgets.LockDraw.locked(self)
matplotlib.widgets.LockDraw.release(self,o)
matplotlib.widgets.MultiCursor(self,canvas,axes,useblit=True,horizOn=False,vertOn=True,**lineprops)
matplotlib.widgets.MultiCursor.__init__(self,canvas,axes,useblit=True,horizOn=False,vertOn=True,**lineprops)
matplotlib.widgets.MultiCursor._update(self)
matplotlib.widgets.MultiCursor.clear(self,event)
matplotlib.widgets.MultiCursor.connect(self)
matplotlib.widgets.MultiCursor.disconnect(self)
matplotlib.widgets.MultiCursor.onmove(self,event)
matplotlib.widgets.PolygonSelector(self,ax,onselect,useblit=False,props=None,handle_props=None,grab_range=10,*,draw_bounding_box=False,box_handle_props=None,box_props=None)
matplotlib.widgets.PolygonSelector.__init__(self,ax,onselect,useblit=False,props=None,handle_props=None,grab_range=10,*,draw_bounding_box=False,box_handle_props=None,box_props=None)
matplotlib.widgets.PolygonSelector._add_box(self)
matplotlib.widgets.PolygonSelector._draw_polygon(self)
matplotlib.widgets.PolygonSelector._get_bbox(self)
matplotlib.widgets.PolygonSelector._handles_artists(self)
matplotlib.widgets.PolygonSelector._on_key_press(self,event)
matplotlib.widgets.PolygonSelector._on_key_release(self,event)
matplotlib.widgets.PolygonSelector._onmove(self,event)
matplotlib.widgets.PolygonSelector._press(self,event)
matplotlib.widgets.PolygonSelector._release(self,event)
matplotlib.widgets.PolygonSelector._remove_box(self)
matplotlib.widgets.PolygonSelector._remove_vertex(self,i)
matplotlib.widgets.PolygonSelector._scale_polygon(self,event)
matplotlib.widgets.PolygonSelector._update_box(self)
matplotlib.widgets.PolygonSelector.onmove(self,event)
matplotlib.widgets.PolygonSelector.verts(self)
matplotlib.widgets.PolygonSelector.verts(self,xys)
matplotlib.widgets.RadioButtons(self,ax,labels,active=0,activecolor=None,*,useblit=True,label_props=None,radio_props=None)
matplotlib.widgets.RadioButtons.__init__(self,ax,labels,active=0,activecolor=None,*,useblit=True,label_props=None,radio_props=None)
matplotlib.widgets.RadioButtons._clear(self,event)
matplotlib.widgets.RadioButtons._clicked(self,event)
matplotlib.widgets.RadioButtons.activecolor(self)
matplotlib.widgets.RadioButtons.activecolor(self,activecolor)
matplotlib.widgets.RadioButtons.circles(self)
matplotlib.widgets.RadioButtons.disconnect(self,cid)
matplotlib.widgets.RadioButtons.on_clicked(self,func)
matplotlib.widgets.RadioButtons.set_active(self,index)
matplotlib.widgets.RadioButtons.set_label_props(self,props)
matplotlib.widgets.RadioButtons.set_radio_props(self,props)
matplotlib.widgets.RangeSlider(self,ax,label,valmin,valmax,valinit=None,valfmt=None,closedmin=True,closedmax=True,dragging=True,valstep=None,orientation='horizontal',track_color='lightgrey',handle_style=None,**kwargs)
matplotlib.widgets.RangeSlider.__init__(self,ax,label,valmin,valmax,valinit=None,valfmt=None,closedmin=True,closedmax=True,dragging=True,valstep=None,orientation='horizontal',track_color='lightgrey',handle_style=None,**kwargs)
matplotlib.widgets.RangeSlider._format(self,val)
matplotlib.widgets.RangeSlider._max_in_bounds(self,max)
matplotlib.widgets.RangeSlider._min_in_bounds(self,min)
matplotlib.widgets.RangeSlider._update(self,event)
matplotlib.widgets.RangeSlider._update_selection_poly(self,vmin,vmax)
matplotlib.widgets.RangeSlider._update_val_from_pos(self,pos)
matplotlib.widgets.RangeSlider._value_in_bounds(self,vals)
matplotlib.widgets.RangeSlider.on_changed(self,func)
matplotlib.widgets.RangeSlider.set_max(self,max)
matplotlib.widgets.RangeSlider.set_min(self,min)
matplotlib.widgets.RangeSlider.set_val(self,val)
matplotlib.widgets.RectangleSelector(self,ax,onselect,*,minspanx=0,minspany=0,useblit=False,props=None,spancoords='data',button=None,grab_range=10,handle_props=None,interactive=False,state_modifier_keys=None,drag_from_anywhere=False,ignore_event_outside=False,use_data_coordinates=False)
matplotlib.widgets.RectangleSelector.__init__(self,ax,onselect,*,minspanx=0,minspany=0,useblit=False,props=None,spancoords='data',button=None,grab_range=10,handle_props=None,interactive=False,state_modifier_keys=None,drag_from_anywhere=False,ignore_event_outside=False,use_data_coordinates=False)
matplotlib.widgets.RectangleSelector._contains(self,event)
matplotlib.widgets.RectangleSelector._draw_shape(self,extents)
matplotlib.widgets.RectangleSelector._get_rotation_transform(self)
matplotlib.widgets.RectangleSelector._handles_artists(self)
matplotlib.widgets.RectangleSelector._init_shape(self,**props)
matplotlib.widgets.RectangleSelector._onmove(self,event)
matplotlib.widgets.RectangleSelector._press(self,event)
matplotlib.widgets.RectangleSelector._rect_bbox(self)
matplotlib.widgets.RectangleSelector._release(self,event)
matplotlib.widgets.RectangleSelector._set_active_handle(self,event)
matplotlib.widgets.RectangleSelector._set_aspect_ratio_correction(self)
matplotlib.widgets.RectangleSelector.center(self)
matplotlib.widgets.RectangleSelector.corners(self)
matplotlib.widgets.RectangleSelector.edge_centers(self)
matplotlib.widgets.RectangleSelector.extents(self)
matplotlib.widgets.RectangleSelector.extents(self,extents)
matplotlib.widgets.RectangleSelector.geometry(self)
matplotlib.widgets.RectangleSelector.rotation(self)
matplotlib.widgets.RectangleSelector.rotation(self,value)
matplotlib.widgets.Slider(self,ax,label,valmin,valmax,valinit=0.5,valfmt=None,closedmin=True,closedmax=True,slidermin=None,slidermax=None,dragging=True,valstep=None,orientation='horizontal',*,initcolor='r',track_color='lightgrey',handle_style=None,**kwargs)
matplotlib.widgets.Slider.__init__(self,ax,label,valmin,valmax,valinit=0.5,valfmt=None,closedmin=True,closedmax=True,slidermin=None,slidermax=None,dragging=True,valstep=None,orientation='horizontal',*,initcolor='r',track_color='lightgrey',handle_style=None,**kwargs)
matplotlib.widgets.Slider._format(self,val)
matplotlib.widgets.Slider._update(self,event)
matplotlib.widgets.Slider._value_in_bounds(self,val)
matplotlib.widgets.Slider.on_changed(self,func)
matplotlib.widgets.Slider.set_val(self,val)
matplotlib.widgets.SliderBase(self,ax,orientation,closedmin,closedmax,valmin,valmax,valfmt,dragging,valstep)
matplotlib.widgets.SliderBase.__init__(self,ax,orientation,closedmin,closedmax,valmin,valmax,valfmt,dragging,valstep)
matplotlib.widgets.SliderBase._stepped_value(self,val)
matplotlib.widgets.SliderBase.disconnect(self,cid)
matplotlib.widgets.SliderBase.reset(self)
matplotlib.widgets.SpanSelector(self,ax,onselect,direction,minspan=0,useblit=False,props=None,onmove_callback=None,interactive=False,button=None,handle_props=None,grab_range=10,state_modifier_keys=None,drag_from_anywhere=False,ignore_event_outside=False,snap_values=None)
matplotlib.widgets.SpanSelector.__init__(self,ax,onselect,direction,minspan=0,useblit=False,props=None,onmove_callback=None,interactive=False,button=None,handle_props=None,grab_range=10,state_modifier_keys=None,drag_from_anywhere=False,ignore_event_outside=False,snap_values=None)
matplotlib.widgets.SpanSelector._contains(self,event)
matplotlib.widgets.SpanSelector._draw_shape(self,vmin,vmax)
matplotlib.widgets.SpanSelector._handles_artists(self)
matplotlib.widgets.SpanSelector._hover(self,event)
matplotlib.widgets.SpanSelector._onmove(self,event)
matplotlib.widgets.SpanSelector._press(self,event)
matplotlib.widgets.SpanSelector._release(self,event)
matplotlib.widgets.SpanSelector._set_active_handle(self,event)
matplotlib.widgets.SpanSelector._set_cursor(self,enabled)
matplotlib.widgets.SpanSelector._setup_edge_handles(self,props)
matplotlib.widgets.SpanSelector._snap(values,snap_values)
matplotlib.widgets.SpanSelector.connect_default_events(self)
matplotlib.widgets.SpanSelector.direction(self)
matplotlib.widgets.SpanSelector.direction(self,direction)
matplotlib.widgets.SpanSelector.extents(self)
matplotlib.widgets.SpanSelector.extents(self,extents)
matplotlib.widgets.SpanSelector.new_axes(self,ax)
matplotlib.widgets.SubplotTool(self,targetfig,toolfig)
matplotlib.widgets.SubplotTool.__init__(self,targetfig,toolfig)
matplotlib.widgets.SubplotTool._on_reset(self,event)
matplotlib.widgets.SubplotTool._on_slider_changed(self,_)
matplotlib.widgets.TextBox(self,ax,label,initial='',color='.95',hovercolor='1',label_pad=0.01,textalignment='left')
matplotlib.widgets.TextBox.__init__(self,ax,label,initial='',color='.95',hovercolor='1',label_pad=0.01,textalignment='left')
matplotlib.widgets.TextBox._click(self,event)
matplotlib.widgets.TextBox._keypress(self,event)
matplotlib.widgets.TextBox._motion(self,event)
matplotlib.widgets.TextBox._release(self,event)
matplotlib.widgets.TextBox._rendercursor(self)
matplotlib.widgets.TextBox._resize(self,event)
matplotlib.widgets.TextBox.begin_typing(self,x=None)
matplotlib.widgets.TextBox.disconnect(self,cid)
matplotlib.widgets.TextBox.on_submit(self,func)
matplotlib.widgets.TextBox.on_text_change(self,func)
matplotlib.widgets.TextBox.set_val(self,val)
matplotlib.widgets.TextBox.stop_typing(self)
matplotlib.widgets.TextBox.text(self)
matplotlib.widgets.ToolHandles(self,ax,x,y,marker='o',marker_props=None,useblit=True)
matplotlib.widgets.ToolHandles.__init__(self,ax,x,y,marker='o',marker_props=None,useblit=True)
matplotlib.widgets.ToolHandles.artists(self)
matplotlib.widgets.ToolHandles.closest(self,x,y)
matplotlib.widgets.ToolHandles.set_animated(self,val)
matplotlib.widgets.ToolHandles.set_data(self,pts,y=None)
matplotlib.widgets.ToolHandles.set_visible(self,val)
matplotlib.widgets.ToolHandles.x(self)
matplotlib.widgets.ToolHandles.y(self)
matplotlib.widgets.ToolLineHandles(self,ax,positions,direction,line_props=None,useblit=True)
matplotlib.widgets.ToolLineHandles.__init__(self,ax,positions,direction,line_props=None,useblit=True)
matplotlib.widgets.ToolLineHandles.artists(self)
matplotlib.widgets.ToolLineHandles.closest(self,x,y)
matplotlib.widgets.ToolLineHandles.direction(self)
matplotlib.widgets.ToolLineHandles.positions(self)
matplotlib.widgets.ToolLineHandles.remove(self)
matplotlib.widgets.ToolLineHandles.set_animated(self,value)
matplotlib.widgets.ToolLineHandles.set_data(self,positions)
matplotlib.widgets.ToolLineHandles.set_visible(self,value)
matplotlib.widgets.Widget
matplotlib.widgets.Widget._changed_canvas(self)
matplotlib.widgets.Widget.get_active(self)
matplotlib.widgets.Widget.ignore(self,event)
matplotlib.widgets.Widget.set_active(self,active)
matplotlib.widgets._SelectorWidget(self,ax,onselect,useblit=False,button=None,state_modifier_keys=None,use_data_coordinates=False)
matplotlib.widgets._SelectorWidget.__init__(self,ax,onselect,useblit=False,button=None,state_modifier_keys=None,use_data_coordinates=False)
matplotlib.widgets._SelectorWidget._clean_event(self,event)
matplotlib.widgets._SelectorWidget._clear_without_update(self)
matplotlib.widgets._SelectorWidget._get_animated_artists(self)
matplotlib.widgets._SelectorWidget._get_data(self,event)
matplotlib.widgets._SelectorWidget._on_key_press(self,event)
matplotlib.widgets._SelectorWidget._on_key_release(self,event)
matplotlib.widgets._SelectorWidget._on_scroll(self,event)
matplotlib.widgets._SelectorWidget._onmove(self,event)
matplotlib.widgets._SelectorWidget._press(self,event)
matplotlib.widgets._SelectorWidget._release(self,event)
matplotlib.widgets._SelectorWidget._validate_state(self,state)
matplotlib.widgets._SelectorWidget.add_state(self,state)
matplotlib.widgets._SelectorWidget.artists(self)
matplotlib.widgets._SelectorWidget.clear(self)
matplotlib.widgets._SelectorWidget.connect_default_events(self)
matplotlib.widgets._SelectorWidget.get_visible(self)
matplotlib.widgets._SelectorWidget.ignore(self,event)
matplotlib.widgets._SelectorWidget.on_key_press(self,event)
matplotlib.widgets._SelectorWidget.on_key_release(self,event)
matplotlib.widgets._SelectorWidget.on_scroll(self,event)
matplotlib.widgets._SelectorWidget.onmove(self,event)
matplotlib.widgets._SelectorWidget.press(self,event)
matplotlib.widgets._SelectorWidget.release(self,event)
matplotlib.widgets._SelectorWidget.remove_state(self,state)
matplotlib.widgets._SelectorWidget.set_active(self,active)
matplotlib.widgets._SelectorWidget.set_handle_props(self,**handle_props)
matplotlib.widgets._SelectorWidget.set_props(self,**props)
matplotlib.widgets._SelectorWidget.set_visible(self,visible)
matplotlib.widgets._SelectorWidget.update(self)
matplotlib.widgets._SelectorWidget.update_background(self,event)
matplotlib.widgets._SelectorWidget.visible(self)
matplotlib.widgets._SelectorWidget.visible(self,visible)
matplotlib.widgets._expand_text_props(props)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/dviread.py----------------------------------------
A:matplotlib.dviread._log->logging.getLogger(__name__)
A:matplotlib.dviread._dvistate->enum.Enum('DviState', 'pre outer inpage post_post finale')
A:matplotlib.dviread.Page->namedtuple('Page', 'text boxes height width descent')
A:matplotlib.dviread.Box->namedtuple('Box', 'x y height width')
A:matplotlib.dviread.psfont->object.__new__(cls)._get_pdftexmap_entry()
A:matplotlib.dviread.entry->object.__new__(cls)._get_pdftexmap_entry()
A:matplotlib.dviread._arg_mapping->dict(raw=_arg_raw, u1=partial(_arg, 1, False), u4=partial(_arg, 4, False), s4=partial(_arg, 4, True), slen=_arg_slen, olen1=_arg_olen1, slen1=_arg_slen1, ulen1=_arg_ulen1)
A:matplotlib.dviread._dispatch->partial(_dispatch, _dtable)
A:matplotlib.dviread.self.file->open(filename, 'rb')
A:matplotlib.dviread.(h, e)->font._height_depth_of(g)
A:matplotlib.dviread.minx->min(minx, x)
A:matplotlib.dviread.miny->min(miny, y - h)
A:matplotlib.dviread.maxx->max(maxx, x + w)
A:matplotlib.dviread.maxy->max(maxy, y + e)
A:matplotlib.dviread.maxy_pure->max(maxy_pure, y)
A:matplotlib.dviread.buf->object.__new__(cls).file.read(nbytes)
A:matplotlib.dviread.newf->DviFont(scale=_mul2012(scale, f._scale), tfm=f._tfm, texname=f.texname, vf=f._vf)
A:matplotlib.dviread.(self.h, self.v, self.w, self.x, self.y, self.z)->object.__new__(cls).stack.pop()
A:matplotlib.dviread.special->object.__new__(cls).file.read(datalen)
A:matplotlib.dviread.n->object.__new__(cls).file.read(a + l)
A:matplotlib.dviread.fontname->n[-l:].decode('ascii')
A:matplotlib.dviread.tfm->_tfmfile(fontname)
A:matplotlib.dviread.vf->_vffile(fontname)
A:matplotlib.dviread.self.fonts[k]->DviFont(scale=s, tfm=tfm, texname=n, vf=vf)
A:matplotlib.dviread.width->object.__new__(cls)._tfm.width.get(char, None)
A:matplotlib.dviread.value->metric.get(char, None)
A:matplotlib.dviread.packet_ends->object.__new__(cls)._init_packet(byte)
A:matplotlib.dviread.k->object.__new__(cls)._arg(byte - 242, byte == 246)
A:matplotlib.dviread.x->object.__new__(cls).file.read(k)
A:matplotlib.dviread.self._chars[packet_char]->Page(text=self.text, boxes=self.boxes, width=packet_width, height=None, descent=None)
A:matplotlib.dviread.header1->file.read(24)
A:matplotlib.dviread.(lh, bc, ec, nw, nh, nd)->struct.unpack('!6H', header1[2:14])
A:matplotlib.dviread.header2->file.read(4 * lh)
A:matplotlib.dviread.(self.checksum, self.design_size)->struct.unpack('!2I', header2[:8])
A:matplotlib.dviread.char_info->file.read(4 * (ec - bc + 1))
A:matplotlib.dviread.widths->struct.unpack(f'!{nw}i', file.read(4 * nw))
A:matplotlib.dviread.heights->struct.unpack(f'!{nh}i', file.read(4 * nh))
A:matplotlib.dviread.depths->struct.unpack(f'!{nd}i', file.read(4 * nd))
A:matplotlib.dviread.PsFont->namedtuple('PsFont', 'texname psname effects encoding filename')
A:matplotlib.dviread.self->object.__new__(cls)
A:matplotlib.dviread.self._filename->os.fsdecode(filename)
A:matplotlib.dviread.matches->re.finditer(b'"([^"]*)(?:"|$)|(\\S+)', line)
A:matplotlib.dviread.(quoted, unquoted)->match.groups()
A:matplotlib.dviread.words->reversed(special.split())
A:matplotlib.dviread.effects['slant']->float(next(words))
A:matplotlib.dviread.effects['extend']->float(next(words))
A:matplotlib.dviread.encodingfile->_find_tex_file(encodingfile)
A:matplotlib.dviread.fontfile->_find_tex_file(fontfile)
A:matplotlib.dviread.self._parsed[tfmname]->PsFont(texname=tfmname, psname=basename, effects=effects, encoding=encodingfile, filename=fontfile)
A:matplotlib.dviread.no_comments->re.sub('%.*', '', Path(path).read_text(encoding='ascii'))
A:matplotlib.dviread.array->re.search('(?s)\\[(.*)\\]', no_comments).group(1)
A:matplotlib.dviread.self._proc->object.__new__(cls)._new_proc()
A:matplotlib.dviread.out->object.__new__(cls)._proc.stdout.readline().rstrip()
A:matplotlib.dviread.filename->filename.decode('utf-8', errors='replace').decode('utf-8', errors='replace')
A:matplotlib.dviread.lk->_LuatexKpsewhich()
A:matplotlib.dviread.path->matplotlib.cbook._check_and_log_subprocess(['kpsewhich', filename], _log, **kwargs).rstrip('\n')
A:matplotlib.dviread._tfmfile->partial(_fontfile, Tfm, '.tfm')
A:matplotlib.dviread._vffile->partial(_fontfile, Vf, '.vf')
A:matplotlib.dviread.parser->ArgumentParser()
A:matplotlib.dviread.args->ArgumentParser().parse_args()
A:matplotlib.dviread.fontmap->PsfontsMap(_find_tex_file('pdftex.map'))
matplotlib.dviread.Dvi(self,filename,dpi)
matplotlib.dviread.Dvi.__enter__(self)
matplotlib.dviread.Dvi.__exit__(self,etype,evalue,etrace)
matplotlib.dviread.Dvi.__init__(self,filename,dpi)
matplotlib.dviread.Dvi.__iter__(self)
matplotlib.dviread.Dvi._arg(self,nbytes,signed=False)
matplotlib.dviread.Dvi._bop(self,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,p)
matplotlib.dviread.Dvi._down(self,a)
matplotlib.dviread.Dvi._down_y(self,new_y)
matplotlib.dviread.Dvi._down_z(self,new_z)
matplotlib.dviread.Dvi._eop(self,_)
matplotlib.dviread.Dvi._fnt_def(self,k,c,s,d,a,l)
matplotlib.dviread.Dvi._fnt_def_real(self,k,c,s,d,a,l)
matplotlib.dviread.Dvi._fnt_num(self,new_f)
matplotlib.dviread.Dvi._fnt_num_immediate(self,k)
matplotlib.dviread.Dvi._malformed(self,offset)
matplotlib.dviread.Dvi._nop(self,_)
matplotlib.dviread.Dvi._output(self)
matplotlib.dviread.Dvi._pop(self,_)
matplotlib.dviread.Dvi._post(self,_)
matplotlib.dviread.Dvi._post_post(self,_)
matplotlib.dviread.Dvi._pre(self,i,num,den,mag,k)
matplotlib.dviread.Dvi._push(self,_)
matplotlib.dviread.Dvi._put_char(self,char)
matplotlib.dviread.Dvi._put_char_real(self,char)
matplotlib.dviread.Dvi._put_rule(self,a,b)
matplotlib.dviread.Dvi._put_rule_real(self,a,b)
matplotlib.dviread.Dvi._read(self)
matplotlib.dviread.Dvi._right(self,b)
matplotlib.dviread.Dvi._right_w(self,new_w)
matplotlib.dviread.Dvi._right_x(self,new_x)
matplotlib.dviread.Dvi._set_char(self,char)
matplotlib.dviread.Dvi._set_char_immediate(self,char)
matplotlib.dviread.Dvi._set_rule(self,a,b)
matplotlib.dviread.Dvi._xxx(self,datalen)
matplotlib.dviread.Dvi.close(self)
matplotlib.dviread.DviFont(self,scale,tfm,texname,vf)
matplotlib.dviread.DviFont.__eq__(self,other)
matplotlib.dviread.DviFont.__init__(self,scale,tfm,texname,vf)
matplotlib.dviread.DviFont.__ne__(self,other)
matplotlib.dviread.DviFont.__repr__(self)
matplotlib.dviread.DviFont._height_depth_of(self,char)
matplotlib.dviread.DviFont._width_of(self,char)
matplotlib.dviread.PsfontsMap(cls,filename)
matplotlib.dviread.PsfontsMap.__getitem__(self,texname)
matplotlib.dviread.PsfontsMap.__new__(cls,filename)
matplotlib.dviread.PsfontsMap._parse_and_cache_line(self,line)
matplotlib.dviread.Text(namedtuple('Text','xyfontglyphwidth'))
matplotlib.dviread.Text._get_pdftexmap_entry(self)
matplotlib.dviread.Text.font_effects(self)
matplotlib.dviread.Text.font_path(self)
matplotlib.dviread.Text.font_size(self)
matplotlib.dviread.Text.glyph_name_or_index(self)
matplotlib.dviread.Tfm(self,filename)
matplotlib.dviread.Tfm.__init__(self,filename)
matplotlib.dviread.Vf(self,filename)
matplotlib.dviread.Vf.__getitem__(self,code)
matplotlib.dviread.Vf.__init__(self,filename)
matplotlib.dviread.Vf._finalize_packet(self,packet_char,packet_width)
matplotlib.dviread.Vf._init_packet(self,pl)
matplotlib.dviread.Vf._pre(self,i,x,cs,ds)
matplotlib.dviread.Vf._read(self)
matplotlib.dviread._LuatexKpsewhich(cls)
matplotlib.dviread._LuatexKpsewhich.__new__(cls)
matplotlib.dviread._LuatexKpsewhich._new_proc(self)
matplotlib.dviread._LuatexKpsewhich.search(self,filename)
matplotlib.dviread._arg(nbytes,signed,dvi,_)
matplotlib.dviread._arg_olen1(dvi,delta)
matplotlib.dviread._arg_raw(dvi,delta)
matplotlib.dviread._arg_slen(dvi,delta)
matplotlib.dviread._arg_slen1(dvi,delta)
matplotlib.dviread._arg_ulen1(dvi,delta)
matplotlib.dviread._dispatch(table,min,max=None,state=None,args=('raw',))
matplotlib.dviread._find_tex_file(filename)
matplotlib.dviread._fontfile(cls,suffix,texname)
matplotlib.dviread._mul2012(num1,num2)
matplotlib.dviread._parse_enc(path)
matplotlib.dviread.find_tex_file(filename)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_docstring.py----------------------------------------
A:matplotlib._docstring.self.params->_ArtistKwdocLoader()
A:matplotlib._docstring.dedent_interpdinterpd->_ArtistPropertiesSubstitution()
matplotlib._docstring.Substitution(self,*args,**kwargs)
matplotlib._docstring.Substitution.__init__(self,*args,**kwargs)
matplotlib._docstring.Substitution.update(self,*args,**kwargs)
matplotlib._docstring._ArtistKwdocLoader(dict)
matplotlib._docstring._ArtistKwdocLoader.__missing__(self,key)
matplotlib._docstring._ArtistPropertiesSubstitution(self)
matplotlib._docstring._ArtistPropertiesSubstitution.__init__(self)
matplotlib._docstring.copy(source)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/animation.py----------------------------------------
A:matplotlib.animation._log->logging.getLogger(__name__)
A:matplotlib.animation.x->numpy.nextafter(x, -np.inf)
A:matplotlib.animation.self._registered->dict()
A:matplotlib.animation.writers->MovieWriterRegistry()
A:matplotlib.animation.(w, h)->self.fig.get_size_inches()
A:matplotlib.animation.(wo, ho)->self.fig.get_size_inches()
A:matplotlib.animation.(self._w, self._h)->self._adjust_frame_size()
A:matplotlib.animation.command->self._args()
A:matplotlib.animation.self._proc->subprocess.Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE, creationflags=subprocess_creation_flags)
A:matplotlib.animation.(out, err)->self._proc.communicate()
A:matplotlib.animation.out->TextIOWrapper(BytesIO(out)).read()
A:matplotlib.animation.err->RuntimeError('The animation function must return a sequence of Artist objects.')
A:matplotlib.animation.self._tmpdir->TemporaryDirectory()
A:matplotlib.animation.self.temp_prefix->str(Path(self._tmpdir.name, 'tmp'))
A:matplotlib.animation.self._temp_paths->list()
A:matplotlib.animation.path->Path(tmpdir, 'temp.html')
A:matplotlib.animation.buf->BytesIO()
A:matplotlib.animation.binpath->super().bin_path()
A:matplotlib.animation.input_names->property(lambda self: f'{self.temp_prefix}*.{self.frame_format}')
A:matplotlib.animation.self.default_mode->default_mode.lower()
A:matplotlib.animation.outfile->Path(outfile)
A:matplotlib.animation.frame_dir->Path(outfile).with_name(outfile.stem + '_frames')
A:matplotlib.animation.f->BytesIO()
A:matplotlib.animation.imgdata64->base64.encodebytes(f.getvalue()).decode('ascii')
A:matplotlib.animation.fill_frames->_included_frames(frame_count, self.frame_format, self._temp_paths[0].parent.relative_to(self.outfile.parent))
A:matplotlib.animation.frame_count->len(self._temp_paths)
A:matplotlib.animation.mode_dict->dict(once_checked='', loop_checked='', reflect_checked='')
A:matplotlib.animation.self.frame_seq->self.new_frame_seq()
A:matplotlib.animation.self._first_draw_id->fig.canvas.mpl_connect('draw_event', self._start)
A:matplotlib.animation.self._close_id->self._fig.canvas.mpl_connect('close_event', self._stop)
A:matplotlib.animation.savefig_kwargs->dict(savefig_kwargs)
A:matplotlib.animation.writer->HTMLWriter(fps=fps, embed_frames=embed_frames, default_mode=default_mode)
A:matplotlib.animation.facecolor->self._fig.get_facecolor()
A:matplotlib.animation.(r, g, b, a)->matplotlib.colors.to_rgba(color)
A:matplotlib.animation.savefig_kwargs['facecolor']->_pre_composite_to_white(facecolor)
A:matplotlib.animation.total_frames->sum(save_count_list)
A:matplotlib.animation.framedata->next(self.frame_seq)
A:matplotlib.animation.cur_view->ax._get_view()
A:matplotlib.animation.(view, bg)->self._blit_cache.get(ax, (object(), None))
A:matplotlib.animation.self._blit_cache->dict()
A:matplotlib.animation.self._resize_id->self._fig.canvas.mpl_connect('resize_event', self._on_resize)
A:matplotlib.animation.vid64->base64.encodebytes(path.read_bytes())
A:matplotlib.animation.vid_len->len(vid64)
A:matplotlib.animation.self._base64_video->base64.encodebytes(path.read_bytes()).decode('ascii')
A:matplotlib.animation.self._video_size->'width="{}" height="{}"'.format(*writer.frame_size)
A:matplotlib.animation.self._html_representation->Path(tmpdir, 'temp.html').read_text()
A:matplotlib.animation.event_source->fig.canvas.new_timer(interval=self._interval)
A:matplotlib.animation.still_going->super()._step(*args)
A:matplotlib.animation.repeat->matplotlib._api.deprecate_privatize_attribute('3.7')
A:matplotlib.animation.figs->set()
A:matplotlib.animation.(this, self._tee_from)->itertools.tee(self._tee_from, 2)
A:matplotlib.animation.self._save_count->len(frames)
A:matplotlib.animation.self._old_saved_seq->list(self._save_seq)
A:matplotlib.animation.frame_seq->self.new_frame_seq()
A:matplotlib.animation.frame_data->next(self.new_frame_seq())
A:matplotlib.animation.self._drawn_artists->sorted(self._drawn_artists, key=lambda x: x.get_zorder())
A:matplotlib.animation.save_count->matplotlib._api.deprecate_privatize_attribute('3.7')
matplotlib.animation.AbstractMovieWriter(self,fps=5,metadata=None,codec=None,bitrate=None)
matplotlib.animation.AbstractMovieWriter.__init__(self,fps=5,metadata=None,codec=None,bitrate=None)
matplotlib.animation.AbstractMovieWriter.finish(self)
matplotlib.animation.AbstractMovieWriter.frame_size(self)
matplotlib.animation.AbstractMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.AbstractMovieWriter.saving(self,fig,outfile,dpi,*args,**kwargs)
matplotlib.animation.AbstractMovieWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.Animation(self,fig,event_source=None,blit=False)
matplotlib.animation.Animation.__del__(self)
matplotlib.animation.Animation.__init__(self,fig,event_source=None,blit=False)
matplotlib.animation.Animation._blit_clear(self,artists)
matplotlib.animation.Animation._blit_draw(self,artists)
matplotlib.animation.Animation._draw_frame(self,framedata)
matplotlib.animation.Animation._draw_next_frame(self,framedata,blit)
matplotlib.animation.Animation._end_redraw(self,event)
matplotlib.animation.Animation._init_draw(self)
matplotlib.animation.Animation._on_resize(self,event)
matplotlib.animation.Animation._post_draw(self,framedata,blit)
matplotlib.animation.Animation._pre_draw(self,framedata,blit)
matplotlib.animation.Animation._repr_html_(self)
matplotlib.animation.Animation._setup_blit(self)
matplotlib.animation.Animation._start(self,*args)
matplotlib.animation.Animation._step(self,*args)
matplotlib.animation.Animation._stop(self,*args)
matplotlib.animation.Animation.new_frame_seq(self)
matplotlib.animation.Animation.new_saved_frame_seq(self)
matplotlib.animation.Animation.pause(self)
matplotlib.animation.Animation.resume(self)
matplotlib.animation.Animation.save(self,filename,writer=None,fps=None,dpi=None,codec=None,bitrate=None,extra_args=None,metadata=None,extra_anim=None,savefig_kwargs=None,*,progress_callback=None)
matplotlib.animation.Animation.to_html5_video(self,embed_limit=None)
matplotlib.animation.Animation.to_jshtml(self,fps=None,embed_frames=True,default_mode=None)
matplotlib.animation.ArtistAnimation(self,fig,artists,*args,**kwargs)
matplotlib.animation.ArtistAnimation.__init__(self,fig,artists,*args,**kwargs)
matplotlib.animation.ArtistAnimation._draw_frame(self,artists)
matplotlib.animation.ArtistAnimation._init_draw(self)
matplotlib.animation.ArtistAnimation._pre_draw(self,framedata,blit)
matplotlib.animation.FFMpegBase
matplotlib.animation.FFMpegBase.output_args(self)
matplotlib.animation.FFMpegFileWriter(FFMpegBase,FileMovieWriter)
matplotlib.animation.FFMpegFileWriter._args(self)
matplotlib.animation.FFMpegWriter(FFMpegBase,MovieWriter)
matplotlib.animation.FFMpegWriter._args(self)
matplotlib.animation.FileMovieWriter(self,*args,**kwargs)
matplotlib.animation.FileMovieWriter.__del__(self)
matplotlib.animation.FileMovieWriter.__init__(self,*args,**kwargs)
matplotlib.animation.FileMovieWriter._base_temp_name(self)
matplotlib.animation.FileMovieWriter.finish(self)
matplotlib.animation.FileMovieWriter.frame_format(self)
matplotlib.animation.FileMovieWriter.frame_format(self,frame_format)
matplotlib.animation.FileMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.FileMovieWriter.setup(self,fig,outfile,dpi=None,frame_prefix=None)
matplotlib.animation.FuncAnimation(self,fig,func,frames=None,init_func=None,fargs=None,save_count=None,*,cache_frame_data=True,**kwargs)
matplotlib.animation.FuncAnimation.__init__(self,fig,func,frames=None,init_func=None,fargs=None,save_count=None,*,cache_frame_data=True,**kwargs)
matplotlib.animation.FuncAnimation._draw_frame(self,framedata)
matplotlib.animation.FuncAnimation._init_draw(self)
matplotlib.animation.FuncAnimation.new_frame_seq(self)
matplotlib.animation.FuncAnimation.new_saved_frame_seq(self)
matplotlib.animation.HTMLWriter(self,fps=30,codec=None,bitrate=None,extra_args=None,metadata=None,embed_frames=False,default_mode='loop',embed_limit=None)
matplotlib.animation.HTMLWriter.__init__(self,fps=30,codec=None,bitrate=None,extra_args=None,metadata=None,embed_frames=False,default_mode='loop',embed_limit=None)
matplotlib.animation.HTMLWriter.finish(self)
matplotlib.animation.HTMLWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.HTMLWriter.isAvailable(cls)
matplotlib.animation.HTMLWriter.setup(self,fig,outfile,dpi=None,frame_dir=None)
matplotlib.animation.ImageMagickBase
matplotlib.animation.ImageMagickBase._args(self)
matplotlib.animation.ImageMagickBase.bin_path(cls)
matplotlib.animation.ImageMagickBase.delay(self)
matplotlib.animation.ImageMagickBase.isAvailable(cls)
matplotlib.animation.ImageMagickBase.output_args(self)
matplotlib.animation.ImageMagickFileWriter(ImageMagickBase,FileMovieWriter)
matplotlib.animation.ImageMagickWriter(ImageMagickBase,MovieWriter)
matplotlib.animation.MovieWriter(self,fps=5,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.animation.MovieWriter.__init__(self,fps=5,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.animation.MovieWriter._adjust_frame_size(self)
matplotlib.animation.MovieWriter._args(self)
matplotlib.animation.MovieWriter._run(self)
matplotlib.animation.MovieWriter.bin_path(cls)
matplotlib.animation.MovieWriter.finish(self)
matplotlib.animation.MovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.MovieWriter.isAvailable(cls)
matplotlib.animation.MovieWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.MovieWriterRegistry(self)
matplotlib.animation.MovieWriterRegistry.__getitem__(self,name)
matplotlib.animation.MovieWriterRegistry.__init__(self)
matplotlib.animation.MovieWriterRegistry.__iter__(self)
matplotlib.animation.MovieWriterRegistry.is_available(self,name)
matplotlib.animation.MovieWriterRegistry.list(self)
matplotlib.animation.MovieWriterRegistry.register(self,name)
matplotlib.animation.PillowWriter(AbstractMovieWriter)
matplotlib.animation.PillowWriter.finish(self)
matplotlib.animation.PillowWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.PillowWriter.isAvailable(cls)
matplotlib.animation.PillowWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.TimedAnimation(self,fig,interval=200,repeat_delay=0,repeat=True,event_source=None,*args,**kwargs)
matplotlib.animation.TimedAnimation.__init__(self,fig,interval=200,repeat_delay=0,repeat=True,event_source=None,*args,**kwargs)
matplotlib.animation.TimedAnimation._step(self,*args)
matplotlib.animation._embedded_frames(frame_list,frame_format)
matplotlib.animation._included_frames(frame_count,frame_format,frame_dir)
matplotlib.animation.adjusted_figsize(w,h,dpi,n)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/colorbar.py----------------------------------------
A:matplotlib.colorbar._log->logging.getLogger(__name__)
A:matplotlib.colorbar.self._path->matplotlib.path.Path(xy, closed=True)
A:matplotlib.colorbar.ret->matplotlib.patches.Patch.draw(self, renderer)
A:matplotlib.colorbar.pos->ax.get_position(original=True)
A:matplotlib.colorbar.(y, extendlen)->self._cbar._proportional_y()
A:matplotlib.colorbar.mappable->getattr(self, 'mappable', None)
A:matplotlib.colorbar.alpha->getattr(self, 'mappable', None).get_alpha()
A:matplotlib.colorbar.ticks->matplotlib.ticker.FixedLocator(cs.levels, nbins=10)
A:matplotlib.colorbar.mappable.colorbar_cid->getattr(self, 'mappable', None).callbacks.connect('changed', self.update_normal)
A:matplotlib.colorbar.location_orientation->_get_orientation_from_location(location)
A:matplotlib.colorbar.self.ax._axes_locator->_ColorbarAxesLocator(self)
A:matplotlib.colorbar.self._inside->matplotlib._api.check_getitem({'neither': slice(0, None), 'both': slice(1, -1), 'min': slice(1, None), 'max': slice(0, -1)}, extend=extend)
A:matplotlib.colorbar.self.outlineself.ax.spines['outline']->_ColorbarSpine(self.ax)
A:matplotlib.colorbar.self.dividers->matplotlib.collections.LineCollection([], colors=[mpl.rcParams['axes.edgecolor']], linewidths=[0.5 * mpl.rcParams['axes.linewidth']], clip_on=False)
A:matplotlib.colorbar.self._locator->self._long_axis().get_major_locator()
A:matplotlib.colorbar.self._formatter->matplotlib.ticker.StrMethodFormatter(format)
A:matplotlib.colorbar._->self._formatter(0)
A:matplotlib.colorbar.self._extend_cid1->self.ax.callbacks.connect('xlim_changed', self._do_extends)
A:matplotlib.colorbar.self._extend_cid2->self.ax.callbacks.connect('ylim_changed', self._do_extends)
A:matplotlib.colorbar.filled->matplotlib._api.deprecate_privatize_attribute('3.6')
A:matplotlib.colorbar.(X, Y)->numpy.meshgrid([0.0, 1.0], y)
A:matplotlib.colorbar.ind->numpy.arange(len(self._values))
A:matplotlib.colorbar.self.solids->self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='none', shading='flat')
A:matplotlib.colorbar.lims->self.ax.get_xlim()
A:matplotlib.colorbar.y->numpy.ma.filled(norm(y), np.nan)
A:matplotlib.colorbar.segments->numpy.dstack([Y, X])
A:matplotlib.colorbar.xy->self.ax.transAxes.inverted().transform(inches.transform(xy))
A:matplotlib.colorbar.patch->matplotlib.patches.PathPatch(mpath.Path(xy), facecolor=color, alpha=self.alpha, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[hatch_idx], clip_on=False, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))
A:matplotlib.colorbar.(_, extendlen)->self._proportional_y()
A:matplotlib.colorbar.xyout->numpy.array([[0, 0], [0, bot], [1, bot], [1, 0], [1, 1], [1, top], [0, top], [0, 1], [0, 0]])
A:matplotlib.colorbar.color->self.cmap(self.norm(self._values[val]))
A:matplotlib.colorbar.params->matplotlib._api.select_matching_signature([lambda self, CS, erase=True: locals(), lambda self, levels, colors, linewidths, erase=True: locals()], self, *args, **kwargs)
A:matplotlib.colorbar.(self, CS, erase)->matplotlib._api.select_matching_signature([lambda self, CS, erase=True: locals(), lambda self, levels, colors, linewidths, erase=True: locals()], self, *args, **kwargs).values()
A:matplotlib.colorbar.(self, levels, colors, linewidths, erase)->matplotlib._api.select_matching_signature([lambda self, CS, erase=True: locals(), lambda self, levels, colors, linewidths, erase=True: locals()], self, *args, **kwargs).values()
A:matplotlib.colorbar.col->matplotlib.collections.LineCollection(xy, linewidths=linewidths, colors=colors)
A:matplotlib.colorbar.locator->self._long_axis().get_major_locator()
A:matplotlib.colorbar.minorlocator->matplotlib.ticker.NullLocator()
A:matplotlib.colorbar.nv->len(self._values)
A:matplotlib.colorbar.formatter->self._long_axis().get_major_formatter()
A:matplotlib.colorbar.self._minorlocator->matplotlib.ticker.NullLocator()
A:matplotlib.colorbar.gs->parent.get_subplotspec().subgridspec(2, 1, hspace=wh_space, height_ratios=[fraction, 1 - fraction - pad])
A:matplotlib.colorbar.subplotspec->parent.get_subplotspec().subgridspec(2, 1, hspace=wh_space, height_ratios=[fraction, 1 - fraction - pad]).get_topmost_subplotspec()
A:matplotlib.colorbar.self._values->(self._values + 1e-05).astype(np.int16)
A:matplotlib.colorbar.b->self.norm(self._boundaries, clip=False).filled()
A:matplotlib.colorbar.self._boundaries->numpy.asarray(b, dtype=float)
A:matplotlib.colorbar.(b, _)->self._uniform_y(N)
A:matplotlib.colorbar.(self.norm.vmin, self.norm.vmax)->matplotlib.transforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)
A:matplotlib.colorbar.(y, _)->self._proportional_y()
A:matplotlib.colorbar.xn->self.norm(x, clip=False).filled()
A:matplotlib.colorbar.z->numpy.interp(xn, bunique, yunique)
A:matplotlib.colorbar.extendlength->numpy.array([default, default])
A:matplotlib.colorbar.yscaled->numpy.ma.filled(norm(yscaled), np.nan)
A:matplotlib.colorbar.norm->matplotlib.colors.Normalize(yscaled[0], yscaled[-1])
A:matplotlib.colorbar.(new_xbound, new_ybound)->self.ax._prepare_view_from_bbox(bbox, direction=direction, mode=mode, twinx=twinx, twiny=twiny)
A:matplotlib.colorbar.points->self.ax._get_pan_points(button, key, x, y)
A:matplotlib.colorbar.location->_get_ticklocation_from_orientation(orientation)
A:matplotlib.colorbar.loc_settings->_normalize_location_orientation(location, orientation)
A:matplotlib.colorbar.loc_settings['orientation']->_get_orientation_from_location(location)
A:matplotlib.colorbar.anchor->kwargs.pop('anchor', loc_settings['anchor'])
A:matplotlib.colorbar.panchor->kwargs.pop('panchor', loc_settings['panchor'])
A:matplotlib.colorbar.parents->list(parents)
A:matplotlib.colorbar.fig->parent.get_figure()
A:matplotlib.colorbar.pad->kwargs.pop('pad', loc_settings['pad'])
A:matplotlib.colorbar.parents_bbox->matplotlib.transforms.Bbox.union([ax.get_position(original=True).frozen() for ax in parents])
A:matplotlib.colorbar.(pbcb, _, pb1)->pb.splity(fraction, fraction + pad)
A:matplotlib.colorbar.(pb1, _, pbcb)->pb.splity(1 - fraction - pad, 1 - fraction)
A:matplotlib.colorbar.pbcb->pbcb.shrunk(shrink, 1.0).anchored(anchor, pbcb).shrunk(shrink, 1.0).anchored(anchor, pbcb)
A:matplotlib.colorbar.shrinking_trans->matplotlib.transforms.BboxTransform(parents_bbox, pb1)
A:matplotlib.colorbar.new_posn->matplotlib.transforms.Bbox(new_posn)
A:matplotlib.colorbar.cax->parent.get_figure().add_subplot(ss_cb, label='<colorbar>')
A:matplotlib.colorbar.cax._colorbar_info->dict(location=location, parents=[parent], shrink=shrink, anchor=anchor, panchor=panchor, fraction=fraction, aspect=aspect0, pad=pad)
matplotlib.colorbar.Colorbar(self,ax,mappable=None,*,cmap=None,norm=None,alpha=None,values=None,boundaries=None,orientation=None,ticklocation='auto',extend=None,spacing='uniform',ticks=None,format=None,drawedges=False,filled=True,extendfrac=None,extendrect=False,label='',location=None)
matplotlib.colorbar.Colorbar.__init__(self,ax,mappable=None,*,cmap=None,norm=None,alpha=None,values=None,boundaries=None,orientation=None,ticklocation='auto',extend=None,spacing='uniform',ticks=None,format=None,drawedges=False,filled=True,extendfrac=None,extendrect=False,label='',location=None)
matplotlib.colorbar.Colorbar._add_solids(self,X,Y,C)
matplotlib.colorbar.Colorbar._add_solids_patches(self,X,Y,C,mappable)
matplotlib.colorbar.Colorbar._cbar_cla(self)
matplotlib.colorbar.Colorbar._do_extends(self,ax=None)
matplotlib.colorbar.Colorbar._draw_all(self)
matplotlib.colorbar.Colorbar._extend_lower(self)
matplotlib.colorbar.Colorbar._extend_upper(self)
matplotlib.colorbar.Colorbar._forward_boundaries(self,x)
matplotlib.colorbar.Colorbar._get_extension_lengths(self,frac,automin,automax,default=0.05)
matplotlib.colorbar.Colorbar._get_ticker_locator_formatter(self)
matplotlib.colorbar.Colorbar._get_view(self)
matplotlib.colorbar.Colorbar._inverse_boundaries(self,x)
matplotlib.colorbar.Colorbar._locate(self,x)
matplotlib.colorbar.Colorbar._long_axis(self)
matplotlib.colorbar.Colorbar._mesh(self)
matplotlib.colorbar.Colorbar._process_values(self)
matplotlib.colorbar.Colorbar._proportional_y(self)
matplotlib.colorbar.Colorbar._reset_locator_formatter_scale(self)
matplotlib.colorbar.Colorbar._set_scale(self,scale,**kwargs)
matplotlib.colorbar.Colorbar._set_view(self,view)
matplotlib.colorbar.Colorbar._set_view_from_bbox(self,bbox,direction='in',mode=None,twinx=False,twiny=False)
matplotlib.colorbar.Colorbar._short_axis(self)
matplotlib.colorbar.Colorbar._uniform_y(self,N)
matplotlib.colorbar.Colorbar._update_dividers(self)
matplotlib.colorbar.Colorbar.add_lines(self,*args,**kwargs)
matplotlib.colorbar.Colorbar.drag_pan(self,button,key,x,y)
matplotlib.colorbar.Colorbar.draw_all(self)
matplotlib.colorbar.Colorbar.formatter(self)
matplotlib.colorbar.Colorbar.formatter(self,fmt)
matplotlib.colorbar.Colorbar.get_ticks(self,minor=False)
matplotlib.colorbar.Colorbar.locator(self)
matplotlib.colorbar.Colorbar.locator(self,loc)
matplotlib.colorbar.Colorbar.minorformatter(self)
matplotlib.colorbar.Colorbar.minorformatter(self,fmt)
matplotlib.colorbar.Colorbar.minorlocator(self)
matplotlib.colorbar.Colorbar.minorlocator(self,loc)
matplotlib.colorbar.Colorbar.minorticks_off(self)
matplotlib.colorbar.Colorbar.minorticks_on(self)
matplotlib.colorbar.Colorbar.remove(self)
matplotlib.colorbar.Colorbar.set_alpha(self,alpha)
matplotlib.colorbar.Colorbar.set_label(self,label,*,loc=None,**kwargs)
matplotlib.colorbar.Colorbar.set_ticklabels(self,ticklabels,*,minor=False,**kwargs)
matplotlib.colorbar.Colorbar.set_ticks(self,ticks,*,labels=None,minor=False,**kwargs)
matplotlib.colorbar.Colorbar.update_normal(self,mappable)
matplotlib.colorbar.Colorbar.update_ticks(self)
matplotlib.colorbar._ColorbarAxesLocator(self,cbar)
matplotlib.colorbar._ColorbarAxesLocator.__init__(self,cbar)
matplotlib.colorbar._ColorbarAxesLocator.get_subplotspec(self)
matplotlib.colorbar._ColorbarSpine(self,axes)
matplotlib.colorbar._ColorbarSpine.__init__(self,axes)
matplotlib.colorbar._ColorbarSpine.draw(self,renderer)
matplotlib.colorbar._ColorbarSpine.get_window_extent(self,renderer=None)
matplotlib.colorbar._ColorbarSpine.set_xy(self,xy)
matplotlib.colorbar._get_orientation_from_location(location)
matplotlib.colorbar._get_ticklocation_from_orientation(orientation)
matplotlib.colorbar._normalize_location_orientation(location,orientation)
matplotlib.colorbar._set_ticks_on_axis_warn(*args,**kwargs)
matplotlib.colorbar.make_axes(parents,location=None,orientation=None,fraction=0.15,shrink=1.0,aspect=20,**kwargs)
matplotlib.colorbar.make_axes_gridspec(parent,*,location=None,orientation=None,fraction=0.15,shrink=1.0,aspect=20,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/transforms.py----------------------------------------
A:matplotlib.transforms.indent->functools.partial(textwrap.indent, prefix=' ' * 4)
A:matplotlib.transforms.other->copy.copy(super())
A:matplotlib.transforms.parent->parent()
A:matplotlib.transforms.ref->weakref.ref(self, lambda _, pop=child._parents.pop, k=id(self): pop(k))
A:matplotlib.transforms.points->self._get_points()
A:matplotlib.transforms.((x0, y0), (x1, y1))->self.get_points()
A:matplotlib.transforms.pts->numpy.asarray(pts)
A:matplotlib.transforms.(ll, ul, lr)->transform.transform(np.array([pts[0], [pts[0, 0], pts[1, 1]], [pts[1, 0], pts[0, 1]]]))
A:matplotlib.transforms.vertices->numpy.asarray(vertices)
A:matplotlib.transforms.a->math.cos(theta)
A:matplotlib.transforms.corners->self.corners()
A:matplotlib.transforms.corners_rotated->Affine2D().rotate(radians).transform(corners)
A:matplotlib.transforms.bbox->Bbox(np.reshape(args, (2, 2)))
A:matplotlib.transforms.x0->numpy.maximum(bbox1.xmin, bbox2.xmin)
A:matplotlib.transforms.x1->numpy.minimum(bbox1.xmax, bbox2.xmax)
A:matplotlib.transforms.y0->numpy.maximum(bbox1.ymin, bbox2.ymin)
A:matplotlib.transforms.y1->numpy.minimum(bbox1.ymax, bbox2.ymax)
A:matplotlib.transforms.self._minpos->numpy.array([np.inf, np.inf])
A:matplotlib.transforms.self._points_orig->self._points.copy()
A:matplotlib.transforms.frozen_bbox->super().frozen()
A:matplotlib.transforms.frozen_bbox._minpos->self.minpos.copy()
A:matplotlib.transforms.(points, minpos, changed)->update_path_extents(path, None, self._points, self._minpos, ignore)
A:matplotlib.transforms.x->self.transform_non_affine(path.vertices)
A:matplotlib.transforms.y->numpy.ravel(y)
A:matplotlib.transforms.path->Path(xy)
A:matplotlib.transforms.self._points->numpy.where(self._locked_points.mask, points, self._locked_points)
A:matplotlib.transforms.__str__->_make_str_method('_base_transform')
A:matplotlib.transforms.p->self._bbox.get_points()
A:matplotlib.transforms.self._locked_points->numpy.ma.array(fp, float, mask=mask).reshape((2, 2))
A:matplotlib.transforms.values->values.reshape((-1, self.input_dims)).reshape((-1, self.input_dims))
A:matplotlib.transforms.res->self.transform_affine(self.transform_non_affine(values))
A:matplotlib.transforms.angles->numpy.deg2rad(angles)
A:matplotlib.transforms.tpts->self.transform(pts)
A:matplotlib.transforms.tpts2->self.transform(pts2)
A:matplotlib.transforms.input_dims->property(lambda self: self._child.input_dims)
A:matplotlib.transforms.output_dims->property(lambda self: self._child.output_dims)
A:matplotlib.transforms.is_affine->property(lambda self: self._a.is_affine and self._b.is_affine)
A:matplotlib.transforms.is_separable->property(lambda self: self._a.is_separable and self._b.is_separable)
A:matplotlib.transforms.has_inverse->property(lambda self: self._a.has_inverse and self._b.has_inverse)
A:matplotlib.transforms.mtx->numpy.array([x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]])
A:matplotlib.transforms.tpoints->affine_transform(points.data, mtx)
A:matplotlib.transforms.self._inverted->Affine2D(inv(mtx), shorthand_name=shorthand_name)
A:matplotlib.transforms.self._mtx->self._base_transform.get_matrix().copy()
A:matplotlib.transforms._base_str->_make_str_method('_mtx')
A:matplotlib.transforms.b->math.sin(theta)
A:matplotlib.transforms.((xx, xy, x0), (yx, yy, y0), _)->numpy.array([x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]]).tolist()
A:matplotlib.transforms.rx->math.tan(xShear)
A:matplotlib.transforms.ry->math.tan(yShear)
A:matplotlib.transforms._mtx->numpy.identity(3)
A:matplotlib.transforms.x_points->x_points.reshape((len(x_points), 1)).reshape((len(x_points), 1))
A:matplotlib.transforms.y_points->y_points.reshape((len(y_points), 1)).reshape((len(y_points), 1))
A:matplotlib.transforms.self._affine->Affine2D(mtx)
A:matplotlib.transforms.x_mtx->self._x.get_matrix()
A:matplotlib.transforms.y_mtx->self._y.get_matrix()
A:matplotlib.transforms.frozen->composite_transform_factory(self._a.frozen(), self._b.frozen())
A:matplotlib.transforms.depth->property(lambda self: self._a.depth + self._b.depth)
A:matplotlib.transforms.self._mtx[:2, 2]->self._scale_trans.transform(self._t)
A:matplotlib.transforms.self._transformed_path->self._transform.transform_path_non_affine(self._path)
A:matplotlib.transforms.self._transformed_points->path.Path._fast_from_codes_and_verts(self._transform.transform_non_affine(self._path.vertices), None, self._path)
A:matplotlib.transforms.patch_path->self._patch.get_path()
A:matplotlib.transforms.(vmin, vmax)->map(float, [vmin, vmax])
A:matplotlib.transforms.maxabsvalue->max(abs(vmin), abs(vmax))
matplotlib.transforms.Affine2D(self,matrix=None,**kwargs)
matplotlib.transforms.Affine2D.__init__(self,matrix=None,**kwargs)
matplotlib.transforms.Affine2D.__str__(self)
matplotlib.transforms.Affine2D.clear(self)
matplotlib.transforms.Affine2D.from_values(a,b,c,d,e,f)
matplotlib.transforms.Affine2D.get_matrix(self)
matplotlib.transforms.Affine2D.identity()
matplotlib.transforms.Affine2D.rotate(self,theta)
matplotlib.transforms.Affine2D.rotate_around(self,x,y,theta)
matplotlib.transforms.Affine2D.rotate_deg(self,degrees)
matplotlib.transforms.Affine2D.rotate_deg_around(self,x,y,degrees)
matplotlib.transforms.Affine2D.scale(self,sx,sy=None)
matplotlib.transforms.Affine2D.set(self,other)
matplotlib.transforms.Affine2D.set_matrix(self,mtx)
matplotlib.transforms.Affine2D.skew(self,xShear,yShear)
matplotlib.transforms.Affine2D.skew_deg(self,xShear,yShear)
matplotlib.transforms.Affine2D.translate(self,tx,ty)
matplotlib.transforms.Affine2DBase(AffineBase)
matplotlib.transforms.Affine2DBase.frozen(self)
matplotlib.transforms.Affine2DBase.inverted(self)
matplotlib.transforms.Affine2DBase.is_separable(self)
matplotlib.transforms.Affine2DBase.to_values(self)
matplotlib.transforms.Affine2DBase.transform_affine(self,points)
matplotlib.transforms.AffineBase(self,*args,**kwargs)
matplotlib.transforms.AffineBase.__array__(self,*args,**kwargs)
matplotlib.transforms.AffineBase.__eq__(self,other)
matplotlib.transforms.AffineBase.__init__(self,*args,**kwargs)
matplotlib.transforms.AffineBase.get_affine(self)
matplotlib.transforms.AffineBase.transform(self,values)
matplotlib.transforms.AffineBase.transform_affine(self,values)
matplotlib.transforms.AffineBase.transform_non_affine(self,points)
matplotlib.transforms.AffineBase.transform_path(self,path)
matplotlib.transforms.AffineBase.transform_path_affine(self,path)
matplotlib.transforms.AffineBase.transform_path_non_affine(self,path)
matplotlib.transforms.AffineDeltaTransform(self,transform,**kwargs)
matplotlib.transforms.AffineDeltaTransform.__init__(self,transform,**kwargs)
matplotlib.transforms.AffineDeltaTransform.get_matrix(self)
matplotlib.transforms.Bbox(self,points,**kwargs)
matplotlib.transforms.Bbox.__format__(self,fmt)
matplotlib.transforms.Bbox.__init__(self,points,**kwargs)
matplotlib.transforms.Bbox.__repr__(self)
matplotlib.transforms.Bbox.__str__(self)
matplotlib.transforms.Bbox.bounds(self,bounds)
matplotlib.transforms.Bbox.from_bounds(x0,y0,width,height)
matplotlib.transforms.Bbox.from_extents(*args,minpos=None)
matplotlib.transforms.Bbox.frozen(self)
matplotlib.transforms.Bbox.get_points(self)
matplotlib.transforms.Bbox.ignore(self,value)
matplotlib.transforms.Bbox.intervalx(self,interval)
matplotlib.transforms.Bbox.intervaly(self,interval)
matplotlib.transforms.Bbox.minpos(self)
matplotlib.transforms.Bbox.minposx(self)
matplotlib.transforms.Bbox.minposy(self)
matplotlib.transforms.Bbox.mutated(self)
matplotlib.transforms.Bbox.mutatedx(self)
matplotlib.transforms.Bbox.mutatedy(self)
matplotlib.transforms.Bbox.null()
matplotlib.transforms.Bbox.p0(self,val)
matplotlib.transforms.Bbox.p1(self,val)
matplotlib.transforms.Bbox.set(self,other)
matplotlib.transforms.Bbox.set_points(self,points)
matplotlib.transforms.Bbox.unit()
matplotlib.transforms.Bbox.update_from_data_x(self,x,ignore=None)
matplotlib.transforms.Bbox.update_from_data_xy(self,xy,ignore=None,updatex=True,updatey=True)
matplotlib.transforms.Bbox.update_from_data_y(self,y,ignore=None)
matplotlib.transforms.Bbox.update_from_path(self,path,ignore=None,updatex=True,updatey=True)
matplotlib.transforms.Bbox.x0(self,val)
matplotlib.transforms.Bbox.x1(self,val)
matplotlib.transforms.Bbox.y0(self,val)
matplotlib.transforms.Bbox.y1(self,val)
matplotlib.transforms.BboxBase(TransformNode)
matplotlib.transforms.BboxBase.__array__(self,*args,**kwargs)
matplotlib.transforms.BboxBase.anchored(self,c,container=None)
matplotlib.transforms.BboxBase.bounds(self)
matplotlib.transforms.BboxBase.contains(self,x,y)
matplotlib.transforms.BboxBase.containsx(self,x)
matplotlib.transforms.BboxBase.containsy(self,y)
matplotlib.transforms.BboxBase.corners(self)
matplotlib.transforms.BboxBase.count_contains(self,vertices)
matplotlib.transforms.BboxBase.count_overlaps(self,bboxes)
matplotlib.transforms.BboxBase.expanded(self,sw,sh)
matplotlib.transforms.BboxBase.extents(self)
matplotlib.transforms.BboxBase.frozen(self)
matplotlib.transforms.BboxBase.fully_contains(self,x,y)
matplotlib.transforms.BboxBase.fully_containsx(self,x)
matplotlib.transforms.BboxBase.fully_containsy(self,y)
matplotlib.transforms.BboxBase.fully_overlaps(self,other)
matplotlib.transforms.BboxBase.get_points(self)
matplotlib.transforms.BboxBase.height(self)
matplotlib.transforms.BboxBase.intersection(bbox1,bbox2)
matplotlib.transforms.BboxBase.intervalx(self)
matplotlib.transforms.BboxBase.intervaly(self)
matplotlib.transforms.BboxBase.max(self)
matplotlib.transforms.BboxBase.min(self)
matplotlib.transforms.BboxBase.overlaps(self,other)
matplotlib.transforms.BboxBase.p0(self)
matplotlib.transforms.BboxBase.p1(self)
matplotlib.transforms.BboxBase.padded(self,p)
matplotlib.transforms.BboxBase.rotated(self,radians)
matplotlib.transforms.BboxBase.shrunk(self,mx,my)
matplotlib.transforms.BboxBase.shrunk_to_aspect(self,box_aspect,container=None,fig_aspect=1.0)
matplotlib.transforms.BboxBase.size(self)
matplotlib.transforms.BboxBase.splitx(self,*args)
matplotlib.transforms.BboxBase.splity(self,*args)
matplotlib.transforms.BboxBase.transformed(self,transform)
matplotlib.transforms.BboxBase.translated(self,tx,ty)
matplotlib.transforms.BboxBase.union(bboxes)
matplotlib.transforms.BboxBase.width(self)
matplotlib.transforms.BboxBase.x0(self)
matplotlib.transforms.BboxBase.x1(self)
matplotlib.transforms.BboxBase.xmax(self)
matplotlib.transforms.BboxBase.xmin(self)
matplotlib.transforms.BboxBase.y0(self)
matplotlib.transforms.BboxBase.y1(self)
matplotlib.transforms.BboxBase.ymax(self)
matplotlib.transforms.BboxBase.ymin(self)
matplotlib.transforms.BboxTransform(self,boxin,boxout,**kwargs)
matplotlib.transforms.BboxTransform.__init__(self,boxin,boxout,**kwargs)
matplotlib.transforms.BboxTransform.get_matrix(self)
matplotlib.transforms.BboxTransformFrom(self,boxin,**kwargs)
matplotlib.transforms.BboxTransformFrom.__init__(self,boxin,**kwargs)
matplotlib.transforms.BboxTransformFrom.get_matrix(self)
matplotlib.transforms.BboxTransformTo(self,boxout,**kwargs)
matplotlib.transforms.BboxTransformTo.__init__(self,boxout,**kwargs)
matplotlib.transforms.BboxTransformTo.get_matrix(self)
matplotlib.transforms.BboxTransformToMaxOnly(BboxTransformTo)
matplotlib.transforms.BboxTransformToMaxOnly.get_matrix(self)
matplotlib.transforms.BlendedAffine2D(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedAffine2D.__init__(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedAffine2D.get_matrix(self)
matplotlib.transforms.BlendedGenericTransform(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedGenericTransform.__init__(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedGenericTransform.contains_branch(self,other)
matplotlib.transforms.BlendedGenericTransform.depth(self)
matplotlib.transforms.BlendedGenericTransform.frozen(self)
matplotlib.transforms.BlendedGenericTransform.get_affine(self)
matplotlib.transforms.BlendedGenericTransform.inverted(self)
matplotlib.transforms.BlendedGenericTransform.transform_non_affine(self,points)
matplotlib.transforms.CompositeAffine2D(self,a,b,**kwargs)
matplotlib.transforms.CompositeAffine2D.__init__(self,a,b,**kwargs)
matplotlib.transforms.CompositeAffine2D._iter_break_from_left_to_right(self)
matplotlib.transforms.CompositeAffine2D.depth(self)
matplotlib.transforms.CompositeAffine2D.get_matrix(self)
matplotlib.transforms.CompositeGenericTransform(self,a,b,**kwargs)
matplotlib.transforms.CompositeGenericTransform.__eq__(self,other)
matplotlib.transforms.CompositeGenericTransform.__init__(self,a,b,**kwargs)
matplotlib.transforms.CompositeGenericTransform._invalidate_internal(self,value,invalidating_node)
matplotlib.transforms.CompositeGenericTransform._iter_break_from_left_to_right(self)
matplotlib.transforms.CompositeGenericTransform.frozen(self)
matplotlib.transforms.CompositeGenericTransform.get_affine(self)
matplotlib.transforms.CompositeGenericTransform.inverted(self)
matplotlib.transforms.CompositeGenericTransform.transform_affine(self,points)
matplotlib.transforms.CompositeGenericTransform.transform_non_affine(self,points)
matplotlib.transforms.CompositeGenericTransform.transform_path_non_affine(self,path)
matplotlib.transforms.IdentityTransform(Affine2DBase)
matplotlib.transforms.IdentityTransform.frozen(self)
matplotlib.transforms.IdentityTransform.get_affine(self)
matplotlib.transforms.IdentityTransform.get_matrix(self)
matplotlib.transforms.IdentityTransform.inverted(self)
matplotlib.transforms.IdentityTransform.transform(self,points)
matplotlib.transforms.IdentityTransform.transform_affine(self,points)
matplotlib.transforms.IdentityTransform.transform_non_affine(self,points)
matplotlib.transforms.IdentityTransform.transform_path(self,path)
matplotlib.transforms.IdentityTransform.transform_path_affine(self,path)
matplotlib.transforms.IdentityTransform.transform_path_non_affine(self,path)
matplotlib.transforms.LockableBbox(self,bbox,x0=None,y0=None,x1=None,y1=None,**kwargs)
matplotlib.transforms.LockableBbox.__init__(self,bbox,x0=None,y0=None,x1=None,y1=None,**kwargs)
matplotlib.transforms.LockableBbox.get_points(self)
matplotlib.transforms.LockableBbox.locked_x0(self)
matplotlib.transforms.LockableBbox.locked_x0(self,x0)
matplotlib.transforms.LockableBbox.locked_x1(self)
matplotlib.transforms.LockableBbox.locked_x1(self,x1)
matplotlib.transforms.LockableBbox.locked_y0(self)
matplotlib.transforms.LockableBbox.locked_y0(self,y0)
matplotlib.transforms.LockableBbox.locked_y1(self)
matplotlib.transforms.LockableBbox.locked_y1(self,y1)
matplotlib.transforms.ScaledTranslation(self,xt,yt,scale_trans,**kwargs)
matplotlib.transforms.ScaledTranslation.__init__(self,xt,yt,scale_trans,**kwargs)
matplotlib.transforms.ScaledTranslation.get_matrix(self)
matplotlib.transforms.Transform(TransformNode)
matplotlib.transforms.Transform.__add__(self,other)
matplotlib.transforms.Transform.__array__(self,*args,**kwargs)
matplotlib.transforms.Transform.__init_subclass__(cls)
matplotlib.transforms.Transform.__sub__(self,other)
matplotlib.transforms.Transform._iter_break_from_left_to_right(self)
matplotlib.transforms.Transform.contains_branch(self,other)
matplotlib.transforms.Transform.contains_branch_seperately(self,other_transform)
matplotlib.transforms.Transform.depth(self)
matplotlib.transforms.Transform.get_affine(self)
matplotlib.transforms.Transform.get_matrix(self)
matplotlib.transforms.Transform.inverted(self)
matplotlib.transforms.Transform.transform(self,values)
matplotlib.transforms.Transform.transform_affine(self,values)
matplotlib.transforms.Transform.transform_angles(self,angles,pts,radians=False,pushoff=1e-05)
matplotlib.transforms.Transform.transform_bbox(self,bbox)
matplotlib.transforms.Transform.transform_non_affine(self,values)
matplotlib.transforms.Transform.transform_path(self,path)
matplotlib.transforms.Transform.transform_path_affine(self,path)
matplotlib.transforms.Transform.transform_path_non_affine(self,path)
matplotlib.transforms.Transform.transform_point(self,point)
matplotlib.transforms.TransformNode(self,shorthand_name=None)
matplotlib.transforms.TransformNode.__copy__(self)
matplotlib.transforms.TransformNode.__getstate__(self)
matplotlib.transforms.TransformNode.__init__(self,shorthand_name=None)
matplotlib.transforms.TransformNode.__setstate__(self,data_dict)
matplotlib.transforms.TransformNode._invalidate_internal(self,value,invalidating_node)
matplotlib.transforms.TransformNode.frozen(self)
matplotlib.transforms.TransformNode.invalidate(self)
matplotlib.transforms.TransformNode.set_children(self,*children)
matplotlib.transforms.TransformWrapper(self,child)
matplotlib.transforms.TransformWrapper.__eq__(self,other)
matplotlib.transforms.TransformWrapper.__init__(self,child)
matplotlib.transforms.TransformWrapper.frozen(self)
matplotlib.transforms.TransformWrapper.set(self,child)
matplotlib.transforms.TransformedBbox(self,bbox,transform,**kwargs)
matplotlib.transforms.TransformedBbox.__init__(self,bbox,transform,**kwargs)
matplotlib.transforms.TransformedBbox.contains(self,x,y)
matplotlib.transforms.TransformedBbox.fully_contains(self,x,y)
matplotlib.transforms.TransformedBbox.get_points(self)
matplotlib.transforms.TransformedPatchPath(self,patch)
matplotlib.transforms.TransformedPatchPath.__init__(self,patch)
matplotlib.transforms.TransformedPatchPath._revalidate(self)
matplotlib.transforms.TransformedPath(self,path,transform)
matplotlib.transforms.TransformedPath.__init__(self,path,transform)
matplotlib.transforms.TransformedPath._revalidate(self)
matplotlib.transforms.TransformedPath.get_affine(self)
matplotlib.transforms.TransformedPath.get_fully_transformed_path(self)
matplotlib.transforms.TransformedPath.get_transformed_path_and_affine(self)
matplotlib.transforms.TransformedPath.get_transformed_points_and_affine(self)
matplotlib.transforms._BlendedMixin
matplotlib.transforms._BlendedMixin.__eq__(self,other)
matplotlib.transforms._BlendedMixin.contains_branch_seperately(self,transform)
matplotlib.transforms._interval_contains_close(interval,val,rtol=1e-10)
matplotlib.transforms._make_str_method(*args,**kwargs)
matplotlib.transforms.blended_transform_factory(x_transform,y_transform)
matplotlib.transforms.composite_transform_factory(a,b)
matplotlib.transforms.interval_contains(interval,val)
matplotlib.transforms.interval_contains_open(interval,val)
matplotlib.transforms.nonsingular(vmin,vmax,expander=0.001,tiny=1e-15,increasing=True)
matplotlib.transforms.offset_copy(trans,fig=None,x=0.0,y=0.0,units='inches')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/fontconfig_pattern.py----------------------------------------
matplotlib.fontconfig_pattern.FontconfigPatternParser
matplotlib.fontconfig_pattern.FontconfigPatternParser.parse(self,pattern)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_text_helpers.py----------------------------------------
A:matplotlib._text_helpers.LayoutItem->dataclasses.make_dataclass('LayoutItem', ['ft_object', 'char', 'glyph_idx', 'x', 'prev_kern'])
A:matplotlib._text_helpers.char_to_font->char_to_font.get(char, base_font)._get_fontmap(string)
A:matplotlib._text_helpers.font->char_to_font.get(char, base_font)._get_fontmap(string).get(char, base_font)
A:matplotlib._text_helpers.glyph_idx->char_to_font.get(char, base_font)._get_fontmap(string).get(char, base_font).get_char_index(ord(char))
A:matplotlib._text_helpers.glyph->char_to_font.get(char, base_font)._get_fontmap(string).get(char, base_font).load_glyph(glyph_idx, flags=LOAD_NO_HINTING)
matplotlib._text_helpers.layout(string,font,*,kern_mode=KERNING_DEFAULT)
matplotlib._text_helpers.warn_on_missing_glyph(codepoint)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_type1font.py----------------------------------------
A:matplotlib._type1font._log->logging.getLogger(__name__)
A:matplotlib._type1font._escapes_re->re.compile('\\\\([\\\\()nrtbf]|[0-7]{1,3})')
A:matplotlib._type1font._ws_re->re.compile('[\x00\t\r\x0c\n ]')
A:matplotlib._type1font.group->delim_stack.pop().group(1)
A:matplotlib._type1font.data->bytes(data)
A:matplotlib._type1font.text->bytes(data).decode('ascii', 'replace')
A:matplotlib._type1font.whitespace_or_comment_re->re.compile('[\\0\\t\\r\\f\\n ]+|%[^\\r\\n]*')
A:matplotlib._type1font.token_re->re.compile('/{0,2}[^]\\0\\t\\r\\f\\n ()<>{}/%[]+')
A:matplotlib._type1font.instring_re->re.compile('[()\\\\]')
A:matplotlib._type1font.hex_re->re.compile('^<[0-9a-fA-F\\0\\t\\r\\f\\n ]*>$')
A:matplotlib._type1font.oct_re->re.compile('[0-7]{1,3}')
A:matplotlib._type1font.match->delim_stack.pop()
A:matplotlib._type1font.pos->delim_stack.pop().end()
A:matplotlib._type1font.octal->re.compile('[0-7]{1,3}').match(text, pos)
A:matplotlib._type1font.raw->delim_stack.pop().group()
A:matplotlib._type1font.token->next(tokens)
A:matplotlib._type1font.self.parts->self._split(data)
A:matplotlib._type1font.self.decrypted->self._decrypt(self.parts[1], 'eexec')
A:matplotlib._type1font.rawdata->file.read()
A:matplotlib._type1font.(length,)->struct.unpack('<i', rawdata[2:6])
A:matplotlib._type1font.idx->bytes(data).index(b'eexec')
A:matplotlib._type1font.binary->binascii.unhexlify(data[len1:idx1])
A:matplotlib._type1font.key->next(tokens).value()
A:matplotlib._type1font.source->_tokenize(data, True)
A:matplotlib._type1font.(prop[key], endpos)->{'Subrs': self._parse_subrs, 'CharStrings': self._parse_charstrings, 'Encoding': self._parse_encoding, 'OtherSubrs': self._parse_othersubrs}[key](source, data)
A:matplotlib._type1font.value->next(tokens).value()
A:matplotlib._type1font.kw->next((kw for kw in source if not kw.is_keyword('readonly', 'noaccess', 'executeonly')))
A:matplotlib._type1font.prop['FamilyName']->re.sub(extras, '', prop['FullName'])
A:matplotlib._type1font.ndiscard->prop.get('lenIV', 4)
A:matplotlib._type1font.cs[key]->self._decrypt(value, 'charstring', ndiscard)
A:matplotlib._type1font.count_token->next(tokens)
A:matplotlib._type1font.count->next(tokens).value()
A:matplotlib._type1font.index_token->next(tokens)
A:matplotlib._type1font.nbytes_token->next(tokens)
A:matplotlib._type1font.binary_token->tokens.send(1 + nbytes_token.value())
A:matplotlib._type1font.array[index_token.value()]->tokens.send(1 + nbytes_token.value()).value()
A:matplotlib._type1font.glyphname->next(tokens).value()
A:matplotlib._type1font.charstrings[glyphname]->tokens.send(1 + nbytes_token.value()).value()
A:matplotlib._type1font.name_token->next(tokens)
A:matplotlib._type1font.encoding[index_token.value()]->next(tokens).value()
A:matplotlib._type1font.oldmatrix->numpy.eye(3, 3)
A:matplotlib._type1font.modifier->numpy.eye(3, 3)
A:matplotlib._type1font.italicangle->round(float(italicangle) - np.arctan(slant) / np.pi * 180, 5)
A:matplotlib._type1font.newmatrix->numpy.dot(modifier, oldmatrix)
A:matplotlib._type1font.len0->len(self.parts[0])
A:matplotlib._type1font.data[pos0:pos1]->next(tokens).value().encode('ascii', 'replace')
matplotlib._type1font.Type1Font(self,input)
matplotlib._type1font.Type1Font.__init__(self,input)
matplotlib._type1font.Type1Font._decrypt(ciphertext,key,ndiscard=4)
matplotlib._type1font.Type1Font._encrypt(plaintext,key,ndiscard=4)
matplotlib._type1font.Type1Font._parse(self)
matplotlib._type1font.Type1Font._parse_charstrings(tokens,_data)
matplotlib._type1font.Type1Font._parse_encoding(tokens,_data)
matplotlib._type1font.Type1Font._parse_othersubrs(tokens,data)
matplotlib._type1font.Type1Font._parse_subrs(self,tokens,_data)
matplotlib._type1font.Type1Font._read(self,file)
matplotlib._type1font.Type1Font._split(self,data)
matplotlib._type1font.Type1Font.transform(self,effects)
matplotlib._type1font._BalancedExpression(_Token)
matplotlib._type1font._BinaryToken(_Token)
matplotlib._type1font._BinaryToken.value(self)
matplotlib._type1font._BooleanToken(_Token)
matplotlib._type1font._BooleanToken.value(self)
matplotlib._type1font._DelimiterToken(_Token)
matplotlib._type1font._DelimiterToken.is_delim(self)
matplotlib._type1font._DelimiterToken.opposite(self)
matplotlib._type1font._KeywordToken(_Token)
matplotlib._type1font._KeywordToken.is_keyword(self,*names)
matplotlib._type1font._NameToken(_Token)
matplotlib._type1font._NameToken.is_slash_name(self)
matplotlib._type1font._NameToken.value(self)
matplotlib._type1font._NumberToken(_Token)
matplotlib._type1font._NumberToken.is_number(self)
matplotlib._type1font._NumberToken.value(self)
matplotlib._type1font._StringToken(_Token)
matplotlib._type1font._StringToken._escape(cls,match)
matplotlib._type1font._StringToken.value(self)
matplotlib._type1font._Token(self,pos,raw)
matplotlib._type1font._Token.__init__(self,pos,raw)
matplotlib._type1font._Token.__str__(self)
matplotlib._type1font._Token.endpos(self)
matplotlib._type1font._Token.is_delim(self)
matplotlib._type1font._Token.is_keyword(self,*names)
matplotlib._type1font._Token.is_number(self)
matplotlib._type1font._Token.is_slash_name(self)
matplotlib._type1font._Token.value(self)
matplotlib._type1font._WhitespaceToken(_Token)
matplotlib._type1font._expression(initial,tokens,data)
matplotlib._type1font._tokenize(data:bytes,skip_ws:bool)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/table.py----------------------------------------
A:matplotlib.table.self._text->Text(x=xy[0], y=xy[1], clip_on=False, text=text, fontproperties=fontproperties, horizontalalignment=loc, verticalalignment='center')
A:matplotlib.table.fontsize->min(fontsize, size)
A:matplotlib.table.required->self.get_required_width(renderer)
A:matplotlib.table.bbox->self._get_grid_bbox(renderer)
A:matplotlib.table.loc->self._text.get_horizontalalignment()
A:matplotlib.table.(l, b, w, h)->self.get_text_bounds(renderer)
A:matplotlib.table.cell->Cell(xy, *args, visible_edges=self.edges, **kwargs)
A:matplotlib.table.renderer->self.figure._get_renderer()
A:matplotlib.table.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.table.height->Table(ax, loc, bbox, **kwargs)._approx_text_height()
A:matplotlib.table.heights[row]->max(height, cell.get_height())
A:matplotlib.table.width->widths.setdefault(col, 0.0)
A:matplotlib.table.widths[col]->max(width, cell.get_width())
A:matplotlib.table.max_width->max((cell.get_required_width(renderer) for cell in cells), default=0)
A:matplotlib.table.size->Cell(xy, *args, visible_edges=self.edges, **kwargs).auto_set_font_size(renderer)
A:matplotlib.table.(BEST, UR, UL, LL, LR, CL, CR, LC, UC, C, TR, TL, BL, BR, R, L, T, B)->range(len(self.codes))
A:matplotlib.table.rows->len(cellText)
A:matplotlib.table.cols->len(cellText[0])
A:matplotlib.table.table->Table(ax, loc, bbox, **kwargs)
matplotlib.table.Cell(self,xy,width,height,edgecolor='k',facecolor='w',fill=True,text='',loc=None,fontproperties=None,*,visible_edges='closed')
matplotlib.table.Cell.__init__(self,xy,width,height,edgecolor='k',facecolor='w',fill=True,text='',loc=None,fontproperties=None,*,visible_edges='closed')
matplotlib.table.Cell._set_text_position(self,renderer)
matplotlib.table.Cell.auto_set_font_size(self,renderer)
matplotlib.table.Cell.draw(self,renderer)
matplotlib.table.Cell.get_fontsize(self)
matplotlib.table.Cell.get_path(self)
matplotlib.table.Cell.get_required_width(self,renderer)
matplotlib.table.Cell.get_text(self)
matplotlib.table.Cell.get_text_bounds(self,renderer)
matplotlib.table.Cell.set_figure(self,fig)
matplotlib.table.Cell.set_fontsize(self,size)
matplotlib.table.Cell.set_text_props(self,**kwargs)
matplotlib.table.Cell.set_transform(self,trans)
matplotlib.table.Cell.visible_edges(self)
matplotlib.table.Cell.visible_edges(self,value)
matplotlib.table.Table(self,ax,loc=None,bbox=None,**kwargs)
matplotlib.table.Table.__getitem__(self,position)
matplotlib.table.Table.__init__(self,ax,loc=None,bbox=None,**kwargs)
matplotlib.table.Table.__setitem__(self,position,cell)
matplotlib.table.Table._approx_text_height(self)
matplotlib.table.Table._auto_set_column_width(self,col,renderer)
matplotlib.table.Table._auto_set_font_size(self,renderer)
matplotlib.table.Table._do_cell_alignment(self)
matplotlib.table.Table._get_grid_bbox(self,renderer)
matplotlib.table.Table._offset(self,ox,oy)
matplotlib.table.Table._update_positions(self,renderer)
matplotlib.table.Table.add_cell(self,row,col,*args,**kwargs)
matplotlib.table.Table.auto_set_column_width(self,col)
matplotlib.table.Table.auto_set_font_size(self,value=True)
matplotlib.table.Table.contains(self,mouseevent)
matplotlib.table.Table.draw(self,renderer)
matplotlib.table.Table.edges(self)
matplotlib.table.Table.edges(self,value)
matplotlib.table.Table.get_celld(self)
matplotlib.table.Table.get_children(self)
matplotlib.table.Table.get_window_extent(self,renderer=None)
matplotlib.table.Table.scale(self,xscale,yscale)
matplotlib.table.Table.set_fontsize(self,size)
matplotlib.table.table(ax,cellText=None,cellColours=None,cellLoc='right',colWidths=None,rowLabels=None,rowColours=None,rowLoc='left',colLabels=None,colColours=None,colLoc='center',loc='bottom',bbox=None,edges='closed',**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/contour.py----------------------------------------
A:matplotlib.contour.(new_angle,)->self.get_transform().transform_angles([super().get_rotation()], [self.get_position()])
A:matplotlib.contour.fmt->matplotlib.ticker.ScalarFormatter(useOffset=False)
A:matplotlib.contour.indices->range(len(self.collections))
A:matplotlib.contour.levlabs->list(levels)
A:matplotlib.contour.self._label_font_props->matplotlib.font_manager.FontProperties(size=fontsize)
A:matplotlib.contour.self.labelCValueList->list(range(len(self.labelLevelList)))
A:matplotlib.contour.cmap->matplotlib.colors.ListedColormap(self.colors[i0:None], N=ncolors)
A:matplotlib.contour.self.labelMappable->matplotlib.cm.ScalarMappable(cmap=cmap, norm=mcolors.NoNorm())
A:matplotlib.contour.renderer->fig._get_renderer()
A:matplotlib.contour.ctr_size->len(linecontour)
A:matplotlib.contour.xx->numpy.resize(linecontour[:, 0], (n_blocks, block_size))
A:matplotlib.contour.yy->numpy.resize(linecontour[:, 1], (n_blocks, block_size))
A:matplotlib.contour.l->numpy.hypot(xlast - xfirst, ylast - yfirst)
A:matplotlib.contour.distances->(abs(s) / l).sum(axis=-1)
A:matplotlib.contour.adist->numpy.argsort(distances)
A:matplotlib.contour.closed->_is_closed_polygon(slc)
A:matplotlib.contour.slc->con.get_transform().transform(lc)
A:matplotlib.contour.lc->con.get_transform().transform(lc)
A:matplotlib.contour.pl->numpy.zeros(slc.shape[0], dtype=float)
A:matplotlib.contour.dx->numpy.diff(slc, axis=0)
A:matplotlib.contour.pl[1:]->numpy.cumsum(np.hypot(dx[:, 0], dx[:, 1]))
A:matplotlib.contour.xi->numpy.array([-hlw, hlw])
A:matplotlib.contour.dp->numpy.zeros_like(xi)
A:matplotlib.contour.rotation->numpy.rad2deg(np.arctan2(dy, dx))
A:matplotlib.contour.I->numpy.interp(xi, pl, np.arange(len(pl)), left=-1, right=-1)
A:matplotlib.contour.(data_x, data_y)->self.axes.transData.inverted().transform((x, y))
A:matplotlib.contour.t->self.get_transform()
A:matplotlib.contour.(data_rotation,)->self.axes.transData.inverted().transform_angles([rotation], [[x, y]])
A:matplotlib.contour.(x, y)->numpy.meshgrid(x, y)
A:matplotlib.contour.paths->con.get_paths()
A:matplotlib.contour.xcmin->self.axes.transData.inverted().transform([xmin, ymin])
A:matplotlib.contour.paths[segmin]->matplotlib.path.Path(lc)
A:matplotlib.contour.lmin->self.labelIndiceList.index(conmin)
A:matplotlib.contour.lw->self._get_nth_label_width(idx)
A:matplotlib.contour.(rotation, nlc)->self.calc_label_rot_and_inline(self.axes.transData.transform(lc), imin, lw, lc if inline else None, inline_spacing)
A:matplotlib.contour.trans->con.get_transform()
A:matplotlib.contour.(x, y, ind)->self.locate_label(slc, lw)
A:matplotlib.contour.(rotation, new)->self.calc_label_rot_and_inline(slc, ind, lw, lc if inline else None, inline_spacing)
A:matplotlib.contour.norms->(dxys ** 2).sum(axis=1)
A:matplotlib.contour.d2s->((projs - p) ** 2).sum(axis=1)
A:matplotlib.contour.imin->numpy.argmin(d2s)
A:matplotlib.contour.norm->matplotlib.colors.LogNorm()
A:matplotlib.contour.kwargs->self._process_args(*args, **kwargs)
A:matplotlib.contour.ncolors->len(self.levels)
A:matplotlib.contour.self.collections->matplotlib.cbook.silent_list(None)
A:matplotlib.contour.(self.allsegs, self.allkinds)->self._get_allsegs_and_allkinds()
A:matplotlib.contour.(lowers, uppers)->self._get_lowers_and_uppers()
A:matplotlib.contour.self._contour_zorder->self._process_args(*args, **kwargs).pop('zorder', 2)
A:matplotlib.contour.self.tlinewidthstlinewidths->self._process_linewidths()
A:matplotlib.contour.tlinestyles->list(linestyles)
A:matplotlib.contour.self._transform->self._transform._as_mpl_transform(self.axes)
A:matplotlib.contour.state->self.__dict__.copy()
A:matplotlib.contour.n_levels->len(self.collections)
A:matplotlib.contour.patch->matplotlib.collections.LineCollection(None)
A:matplotlib.contour.lower->str_format(lower)
A:matplotlib.contour.upper->str_format(upper)
A:matplotlib.contour.level->str_format(level)
A:matplotlib.contour.self.zmax->float(z.max())
A:matplotlib.contour.self.zmin->float(z.min())
A:matplotlib.contour.points->numpy.concatenate(flatseglist, axis=0)
A:matplotlib.contour.self._mins->numpy.concatenate(flatseglist, axis=0).min(axis=0)
A:matplotlib.contour.self._maxs->numpy.concatenate(flatseglist, axis=0).max(axis=0)
A:matplotlib.contour.(vertices, kinds)->self._contour_generator.create_contour(level)
A:matplotlib.contour.lowers->lowers.copy().copy()
A:matplotlib.contour.self.locator->matplotlib.ticker.MaxNLocator(N + 1, min_n_ticks=1)
A:matplotlib.contour.lev->self.locator.tick_values(self.zmin, self.zmax)
A:matplotlib.contour.self.levels->numpy.asarray(levels_arg, np.float64)
A:matplotlib.contour.self._levels->numpy.asarray(self._levels)
A:matplotlib.contour.self.cvalues->list(range(i0, i1))
A:matplotlib.contour.Nlev->len(self.levels)
A:matplotlib.contour.linewidths->list(linewidths)
A:matplotlib.contour.nreps->int(np.ceil(Nlev / len(linestyles)))
A:matplotlib.contour.point->numpy.array([x, y])
A:matplotlib.contour.(d2, xc, leg)->_find_closest_point_on_path(lc, point)
A:matplotlib.contour.(x, y, z)->self._check_xyz(x, y, z_orig, kwargs)
A:matplotlib.contour.contour_generator->contourpy.contour_generator(x, y, z, name=self._algorithm, corner_mask=self._corner_mask, line_type=contourpy.LineType.SeparateCode, fill_type=contourpy.FillType.OuterCode, chunk_size=self.nchunk)
A:matplotlib.contour.transformed_pts->trans_to_data.transform(pts)
A:matplotlib.contour.nargs->len(args)
A:matplotlib.contour.z->numpy.ma.asarray(z)
A:matplotlib.contour.x->numpy.linspace(x0, x1, Nx)
A:matplotlib.contour.y->numpy.linspace(y0, y1, Ny)
matplotlib.contour.ClabelText(Text)
matplotlib.contour.ClabelText.get_rotation(self)
matplotlib.contour.ContourLabeler
matplotlib.contour.ContourLabeler._get_nth_label_width(self,nth)
matplotlib.contour.ContourLabeler.add_label(self,x,y,rotation,lev,cvalue)
matplotlib.contour.ContourLabeler.add_label_clabeltext(self,x,y,rotation,lev,cvalue)
matplotlib.contour.ContourLabeler.add_label_near(self,x,y,inline=True,inline_spacing=5,transform=None)
matplotlib.contour.ContourLabeler.calc_label_rot_and_inline(self,slc,ind,lw,lc=None,spacing=5)
matplotlib.contour.ContourLabeler.clabel(self,levels=None,*,fontsize=None,inline=True,inline_spacing=5,fmt=None,colors=None,use_clabeltext=False,manual=False,rightside_up=True,zorder=None)
matplotlib.contour.ContourLabeler.get_text(self,lev,fmt)
matplotlib.contour.ContourLabeler.labelFontProps(self)
matplotlib.contour.ContourLabeler.labelFontSizeList(self)
matplotlib.contour.ContourLabeler.labelTextsList(self)
matplotlib.contour.ContourLabeler.labels(self,inline,inline_spacing)
matplotlib.contour.ContourLabeler.locate_label(self,linecontour,labelwidth)
matplotlib.contour.ContourLabeler.pop_label(self,index=-1)
matplotlib.contour.ContourLabeler.print_label(self,linecontour,labelwidth)
matplotlib.contour.ContourLabeler.remove(self)
matplotlib.contour.ContourLabeler.set_label_props(self,label,text,color)
matplotlib.contour.ContourLabeler.too_close(self,x,y,lw)
matplotlib.contour.ContourSet(self,ax,*args,levels=None,filled=False,linewidths=None,linestyles=None,hatches=(None,),alpha=None,origin=None,extent=None,cmap=None,colors=None,norm=None,vmin=None,vmax=None,extend='neither',antialiased=None,nchunk=0,locator=None,transform=None,negative_linestyles=None,**kwargs)
matplotlib.contour.ContourSet.__getstate__(self)
matplotlib.contour.ContourSet.__init__(self,ax,*args,levels=None,filled=False,linewidths=None,linestyles=None,hatches=(None,),alpha=None,origin=None,extent=None,cmap=None,colors=None,norm=None,vmin=None,vmax=None,extend='neither',antialiased=None,nchunk=0,locator=None,transform=None,negative_linestyles=None,**kwargs)
matplotlib.contour.ContourSet._autolev(self,N)
matplotlib.contour.ContourSet._get_allsegs_and_allkinds(self)
matplotlib.contour.ContourSet._get_lowers_and_uppers(self)
matplotlib.contour.ContourSet._make_paths(self,segs,kinds)
matplotlib.contour.ContourSet._process_args(self,*args,**kwargs)
matplotlib.contour.ContourSet._process_colors(self)
matplotlib.contour.ContourSet._process_contour_level_args(self,args,z_dtype)
matplotlib.contour.ContourSet._process_levels(self)
matplotlib.contour.ContourSet._process_linestyles(self)
matplotlib.contour.ContourSet._process_linewidths(self)
matplotlib.contour.ContourSet.changed(self)
matplotlib.contour.ContourSet.find_nearest_contour(self,x,y,indices=None,pixel=True)
matplotlib.contour.ContourSet.get_alpha(self)
matplotlib.contour.ContourSet.get_transform(self)
matplotlib.contour.ContourSet.legend_elements(self,variable_name='x',str_format=str)
matplotlib.contour.ContourSet.remove(self)
matplotlib.contour.ContourSet.set_alpha(self,alpha)
matplotlib.contour.QuadContourSet(ContourSet)
matplotlib.contour.QuadContourSet._check_xyz(self,x,y,z,kwargs)
matplotlib.contour.QuadContourSet._contour_args(self,args,kwargs)
matplotlib.contour.QuadContourSet._initialize_x_y(self,z)
matplotlib.contour.QuadContourSet._process_args(self,*args,corner_mask=None,algorithm=None,**kwargs)
matplotlib.contour._contour_labeler_event_handler(cs,inline,inline_spacing,event)
matplotlib.contour._find_closest_point_on_path(xys,p)
matplotlib.contour._is_closed_polygon(X)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/patheffects.py----------------------------------------
A:matplotlib.patheffects.new_gc_dict->new_gc_dict.copy().copy()
A:matplotlib.patheffects.dashes->new_gc_dict.copy().copy().pop('dashes', None)
A:matplotlib.patheffects.set_method->getattr(gc, 'set_' + k, None)
A:matplotlib.patheffects.renderer->self.copy_with_path_effect([path_effect])
A:matplotlib.patheffects.(path, transform)->self._get_text_path_transform(x, y, s, prop, angle, ismath)
A:matplotlib.patheffects.color->gc.get_rgb()
A:matplotlib.patheffects.gc0->self._update_gc(gc0, self._gc)
A:matplotlib.patheffects.withStroke->_subclass_with_normal(effect_class=Stroke)
A:matplotlib.patheffects.self._shadow_rgbFace->matplotlib.colors.to_rgba(shadow_rgbFace)
A:matplotlib.patheffects.withSimplePatchShadow->_subclass_with_normal(effect_class=SimplePatchShadow)
A:matplotlib.patheffects.self._shadow_color->matplotlib.colors.to_rgba(shadow_color)
A:matplotlib.patheffects.self.patch->matplotlib.patches.PathPatch([], **kwargs)
A:matplotlib.patheffects.clip_path->gc.get_clip_path()
A:matplotlib.patheffects.trans_matrix->numpy.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])
A:matplotlib.patheffects.spacing_px->self.copy_with_path_effect([path_effect]).points_to_pixels(self._spacing)
A:matplotlib.patheffects.transpath->affine.transform_path(tpath)
A:matplotlib.patheffects.polys->affine.transform_path(tpath).to_polygons(closed_only=False)
A:matplotlib.patheffects.ds->numpy.hypot(x[1:] - x[:-1], y[1:] - y[:-1])
A:matplotlib.patheffects.s->numpy.concatenate(([0.0], np.cumsum(ds)))
A:matplotlib.patheffects.s_tick->numpy.linspace(spacing_px / 2, s_total - spacing_px / 2, num)
A:matplotlib.patheffects.x_tick->numpy.interp(s_tick, s, x)
A:matplotlib.patheffects.y_tick->numpy.interp(s_tick, s, y)
A:matplotlib.patheffects.n->numpy.hypot(u, v)
A:matplotlib.patheffects.xyt->numpy.empty((2 * num, 2), dtype=x_tick.dtype)
A:matplotlib.patheffects.codes->numpy.tile([Path.MOVETO, Path.LINETO], num)
A:matplotlib.patheffects.h->Path(xyt, codes)
A:matplotlib.patheffects.withTickedStroke->_subclass_with_normal(effect_class=TickedStroke)
matplotlib.patheffects.AbstractPathEffect(self,offset=(0.0,0.0))
matplotlib.patheffects.AbstractPathEffect.__init__(self,offset=(0.0,0.0))
matplotlib.patheffects.AbstractPathEffect._offset_transform(self,renderer)
matplotlib.patheffects.AbstractPathEffect._update_gc(self,gc,new_gc_dict)
matplotlib.patheffects.AbstractPathEffect.draw_path(self,renderer,gc,tpath,affine,rgbFace=None)
matplotlib.patheffects.Normal(AbstractPathEffect)
matplotlib.patheffects.PathEffectRenderer(self,path_effects,renderer)
matplotlib.patheffects.PathEffectRenderer.__getattribute__(self,name)
matplotlib.patheffects.PathEffectRenderer.__init__(self,path_effects,renderer)
matplotlib.patheffects.PathEffectRenderer._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath)
matplotlib.patheffects.PathEffectRenderer.copy_with_path_effect(self,path_effects)
matplotlib.patheffects.PathEffectRenderer.draw_markers(self,gc,marker_path,marker_trans,path,*args,**kwargs)
matplotlib.patheffects.PathEffectRenderer.draw_path(self,gc,tpath,affine,rgbFace=None)
matplotlib.patheffects.PathEffectRenderer.draw_path_collection(self,gc,master_transform,paths,*args,**kwargs)
matplotlib.patheffects.PathPatchEffect(self,offset=(0,0),**kwargs)
matplotlib.patheffects.PathPatchEffect.__init__(self,offset=(0,0),**kwargs)
matplotlib.patheffects.PathPatchEffect.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.SimpleLineShadow(self,offset=(2,-2),shadow_color='k',alpha=0.3,rho=0.3,**kwargs)
matplotlib.patheffects.SimpleLineShadow.__init__(self,offset=(2,-2),shadow_color='k',alpha=0.3,rho=0.3,**kwargs)
matplotlib.patheffects.SimpleLineShadow.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.SimplePatchShadow(self,offset=(2,-2),shadow_rgbFace=None,alpha=None,rho=0.3,**kwargs)
matplotlib.patheffects.SimplePatchShadow.__init__(self,offset=(2,-2),shadow_rgbFace=None,alpha=None,rho=0.3,**kwargs)
matplotlib.patheffects.SimplePatchShadow.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.Stroke(self,offset=(0,0),**kwargs)
matplotlib.patheffects.Stroke.__init__(self,offset=(0,0),**kwargs)
matplotlib.patheffects.Stroke.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.TickedStroke(self,offset=(0,0),spacing=10.0,angle=45.0,length=np.sqrt(2),**kwargs)
matplotlib.patheffects.TickedStroke.__init__(self,offset=(0,0),spacing=10.0,angle=45.0,length=np.sqrt(2),**kwargs)
matplotlib.patheffects.TickedStroke.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects._subclass_with_normal(effect_class)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/docstring.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/streamplot.py----------------------------------------
A:matplotlib.streamplot.grid->Grid(x, y)
A:matplotlib.streamplot.mask->StreamMask(density)
A:matplotlib.streamplot.dmap->DomainMap(grid, mask)
A:matplotlib.streamplot.color->numpy.ma.masked_invalid(color)
A:matplotlib.streamplot.arrow_kw->dict(arrowstyle=arrowstyle, mutation_scale=10 * arrowsize)
A:matplotlib.streamplot.use_multicolor_lines->isinstance(color, np.ndarray)
A:matplotlib.streamplot.u->numpy.ma.masked_invalid(u)
A:matplotlib.streamplot.v->numpy.ma.masked_invalid(v)
A:matplotlib.streamplot.integrate->_get_integrator(u, v, dmap, minlength, maxlength, integration_direction)
A:matplotlib.streamplot.(xg, yg)->DomainMap(grid, mask).data2grid(xs, ys)
A:matplotlib.streamplot.t->integrate(xg, yg, broken_streamlines)
A:matplotlib.streamplot.sp2->numpy.asanyarray(start_points, dtype=float).copy()
A:matplotlib.streamplot.xg->numpy.clip(xg, 0, grid.nx - 1)
A:matplotlib.streamplot.yg->numpy.clip(yg, 0, grid.ny - 1)
A:matplotlib.streamplot.norm->matplotlib.colors.Normalize(color.min(), color.max())
A:matplotlib.streamplot.cmap->matplotlib.cm._ensure_cmap(cmap)
A:matplotlib.streamplot.(tx, ty)->DomainMap(grid, mask).grid2data(tgx, tgy)
A:matplotlib.streamplot.points->numpy.transpose([tx, ty]).reshape(-1, 1, 2)
A:matplotlib.streamplot.s->numpy.cumsum(np.hypot(np.diff(tx), np.diff(ty)))
A:matplotlib.streamplot.n->numpy.searchsorted(s, s[-1] / 2.0)
A:matplotlib.streamplot.arrow_kw['color']->cmap(norm(color_values[n]))
A:matplotlib.streamplot.p->matplotlib.patches.FancyArrowPatch(arrow_tail, arrow_head, transform=transform, **arrow_kw)
A:matplotlib.streamplot.lc->matplotlib.collections.LineCollection(streamlines, transform=transform, **line_kw)
A:matplotlib.streamplot.ac->matplotlib.collections.PatchCollection(arrows)
A:matplotlib.streamplot.stream_container->StreamplotSet(lc, ac)
A:matplotlib.streamplot.(xm, ym)->self.grid2mask(xg, yg)
A:matplotlib.streamplot.yt->numpy.transpose(y)
A:matplotlib.streamplot.self.nx->len(x)
A:matplotlib.streamplot.self.ny->len(y)
A:matplotlib.streamplot.(self.nx, self.ny)->(30 * np.broadcast_to(density, 2)).astype(int)
A:matplotlib.streamplot.self._mask->numpy.zeros((self.ny, self.nx))
A:matplotlib.streamplot.(u, v)->DomainMap(grid, mask).data2grid(u, v)
A:matplotlib.streamplot.speed->numpy.ma.sqrt(u_ax ** 2 + v_ax ** 2)
A:matplotlib.streamplot.ds_dt->interpgrid(speed, xi, yi)
A:matplotlib.streamplot.ui->interpgrid(u, xi, yi)
A:matplotlib.streamplot.vi->interpgrid(v, xi, yi)
A:matplotlib.streamplot.(dxi, dyi)->forward_time(xi, yi)
A:matplotlib.streamplot.(s, xyt)->_integrate_rk12(x0, y0, dmap, forward_time, maxlength, broken_streamlines)
A:matplotlib.streamplot.maxds->min(1.0 / dmap.mask.nx, 1.0 / dmap.mask.ny, 0.1)
A:matplotlib.streamplot.(k1x, k1y)->f(xi, yi)
A:matplotlib.streamplot.(k2x, k2y)->f(xi + ds * k1x, yi + ds * k1y)
A:matplotlib.streamplot.(ds, xyf_traj)->_euler_step(xyf_traj, dmap, f)
A:matplotlib.streamplot.error->numpy.hypot((dx2 - dx1) / (nx - 1), (dy2 - dy1) / (ny - 1))
A:matplotlib.streamplot.ds->min(dsx, dsy)
A:matplotlib.streamplot.(cx, cy)->f(xi, yi)
A:matplotlib.streamplot.(Ny, Nx)->numpy.shape(a)
A:matplotlib.streamplot.x->int(xi)
A:matplotlib.streamplot.y->int(yi)
A:matplotlib.streamplot.xn->numpy.clip(x + 1, 0, Nx - 1)
A:matplotlib.streamplot.yn->numpy.clip(y + 1, 0, Ny - 1)
matplotlib.streamplot.DomainMap(self,grid,mask)
matplotlib.streamplot.DomainMap.__init__(self,grid,mask)
matplotlib.streamplot.DomainMap.data2grid(self,xd,yd)
matplotlib.streamplot.DomainMap.grid2data(self,xg,yg)
matplotlib.streamplot.DomainMap.grid2mask(self,xi,yi)
matplotlib.streamplot.DomainMap.mask2grid(self,xm,ym)
matplotlib.streamplot.DomainMap.reset_start_point(self,xg,yg)
matplotlib.streamplot.DomainMap.start_trajectory(self,xg,yg,broken_streamlines=True)
matplotlib.streamplot.DomainMap.undo_trajectory(self)
matplotlib.streamplot.DomainMap.update_trajectory(self,xg,yg,broken_streamlines=True)
matplotlib.streamplot.Grid(self,x,y)
matplotlib.streamplot.Grid.__init__(self,x,y)
matplotlib.streamplot.Grid.shape(self)
matplotlib.streamplot.Grid.within_grid(self,xi,yi)
matplotlib.streamplot.InvalidIndexError(Exception)
matplotlib.streamplot.OutOfBounds(IndexError)
matplotlib.streamplot.StreamMask(self,density)
matplotlib.streamplot.StreamMask.__getitem__(self,args)
matplotlib.streamplot.StreamMask.__init__(self,density)
matplotlib.streamplot.StreamMask._start_trajectory(self,xm,ym,broken_streamlines=True)
matplotlib.streamplot.StreamMask._undo_trajectory(self)
matplotlib.streamplot.StreamMask._update_trajectory(self,xm,ym,broken_streamlines=True)
matplotlib.streamplot.StreamplotSet(self,lines,arrows)
matplotlib.streamplot.StreamplotSet.__init__(self,lines,arrows)
matplotlib.streamplot.TerminateTrajectory(Exception)
matplotlib.streamplot._euler_step(xyf_traj,dmap,f)
matplotlib.streamplot._gen_starting_points(shape)
matplotlib.streamplot._get_integrator(u,v,dmap,minlength,maxlength,integration_direction)
matplotlib.streamplot._integrate_rk12(x0,y0,dmap,f,maxlength,broken_streamlines=True)
matplotlib.streamplot.interpgrid(a,xi,yi)
matplotlib.streamplot.streamplot(axes,x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both',broken_streamlines=True)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/rcsetup.py----------------------------------------
A:matplotlib.rcsetup.s->eval(s, {'cycler': cycler, '__builtins__': {}})
A:matplotlib.rcsetup.f.__name__->'{}List'.format(type(scalar_validator).__name__)
A:matplotlib.rcsetup.validate_anylist->_listify_validator(validate_any)
A:matplotlib.rcsetup.b->b.lower().lower()
A:matplotlib.rcsetup.validate_string->_make_type_validator(str)
A:matplotlib.rcsetup.validate_string_or_None->_make_type_validator(str, allow_none=True)
A:matplotlib.rcsetup.validate_stringlist->_listify_validator(validate_string, doc='return a list of strings')
A:matplotlib.rcsetup.validate_int->_make_type_validator(int)
A:matplotlib.rcsetup.validate_int_or_None->_make_type_validator(int, allow_none=True)
A:matplotlib.rcsetup.validate_float->_make_type_validator(float)
A:matplotlib.rcsetup.validate_float_or_None->_make_type_validator(float, allow_none=True)
A:matplotlib.rcsetup.validate_floatlist->_listify_validator(validate_float, doc='return a list of floats')
A:matplotlib.rcsetup.fonttype->validate_int(s)
A:matplotlib.rcsetup._validate_standard_backends->ValidateInStrings('backend', all_backends, ignorecase=True)
A:matplotlib.rcsetup._auto_backend_sentinel->object()
A:matplotlib.rcsetup.color->ast.literal_eval(s)
A:matplotlib.rcsetup.validate_colorlist->_listify_validator(validate_color, allow_stringlist=True, doc='return a list of colorspecs')
A:matplotlib.rcsetup.validate_fontsizelist->_listify_validator(validate_fontsize)
A:matplotlib.rcsetup._validate_named_linestyle->ValidateInStrings('linestyle', [*ls_mapper.keys(), *ls_mapper.values(), 'None', 'none', ' ', ''], ignorecase=True)
A:matplotlib.rcsetup.ls->ast.literal_eval(ls)
A:matplotlib.rcsetup.validate_fillstyle->ValidateInStrings('markers.fillstyle', ['full', 'left', 'right', 'bottom', 'top', 'none'])
A:matplotlib.rcsetup.validate_fillstylelist->_listify_validator(validate_fillstyle)
A:matplotlib.rcsetup.validate_markeverylist->_listify_validator(validate_markevery)
A:matplotlib.rcsetup.validate_hatchlist->_listify_validator(validate_hatch)
A:matplotlib.rcsetup.validate_dashlist->_listify_validator(validate_floatlist)
A:matplotlib.rcsetup.pairs->kwargs.items()
A:matplotlib.rcsetup.norm_prop->_prop_aliases.get(prop, prop)
A:matplotlib.rcsetup.validator->_prop_validators.get(norm_prop, None)
A:matplotlib.rcsetup.vals->validator(vals)
A:matplotlib.rcsetup.checker->set()
A:matplotlib.rcsetup.ignorecase->isinstance(conv, _ignorecase)
matplotlib.cycler(*args,**kwargs)
matplotlib.rcsetup.ValidateInStrings(self,key,valid,ignorecase=False,*,_deprecated_since=None)
matplotlib.rcsetup.ValidateInStrings.__init__(self,key,valid,ignorecase=False,*,_deprecated_since=None)
matplotlib.rcsetup._DunderChecker(ast.NodeVisitor)
matplotlib.rcsetup._DunderChecker.visit_Attribute(self,node)
matplotlib.rcsetup._convert_validator_spec(key,conv)
matplotlib.rcsetup._ignorecase(list)
matplotlib.rcsetup._listify_validator(scalar_validator,allow_stringlist=False,*,n=None,doc=None)
matplotlib.rcsetup._make_type_validator(cls,*,allow_none=False)
matplotlib.rcsetup._validate_cmap(s)
matplotlib.rcsetup._validate_color_or_linecolor(s)
matplotlib.rcsetup._validate_date(s)
matplotlib.rcsetup._validate_greaterequal0_lessequal1(s)
matplotlib.rcsetup._validate_greaterequal0_lessthan1(s)
matplotlib.rcsetup._validate_linestyle(ls)
matplotlib.rcsetup._validate_mathtext_fallback(s)
matplotlib.rcsetup._validate_pathlike(s)
matplotlib.rcsetup._validate_toolbar(s)
matplotlib.rcsetup.cycler(*args,**kwargs)
matplotlib.rcsetup.validate_any(s)
matplotlib.rcsetup.validate_aspect(s)
matplotlib.rcsetup.validate_axisbelow(s)
matplotlib.rcsetup.validate_backend(s)
matplotlib.rcsetup.validate_bbox(s)
matplotlib.rcsetup.validate_bool(b)
matplotlib.rcsetup.validate_color(s)
matplotlib.rcsetup.validate_color_for_prop_cycle(s)
matplotlib.rcsetup.validate_color_or_auto(s)
matplotlib.rcsetup.validate_color_or_inherit(s)
matplotlib.rcsetup.validate_cycler(s)
matplotlib.rcsetup.validate_dpi(s)
matplotlib.rcsetup.validate_font_properties(s)
matplotlib.rcsetup.validate_fontsize(s)
matplotlib.rcsetup.validate_fontsize_None(s)
matplotlib.rcsetup.validate_fontstretch(s)
matplotlib.rcsetup.validate_fonttype(s)
matplotlib.rcsetup.validate_fontweight(s)
matplotlib.rcsetup.validate_hatch(s)
matplotlib.rcsetup.validate_hist_bins(s)
matplotlib.rcsetup.validate_markevery(s)
matplotlib.rcsetup.validate_ps_distiller(s)
matplotlib.rcsetup.validate_sketch(s)
matplotlib.rcsetup.validate_whiskers(s)
matplotlib.validate_backend(s)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/legend.py----------------------------------------
A:matplotlib.legend.bbox->matplotlib.transforms.Bbox.from_bounds(0, 0, width, height)
A:matplotlib.legend._bbox_transform->BboxTransformFrom(bbox)
A:matplotlib.legend.self.legend._loc->tuple(_bbox_transform.transform(loc_in_canvas))
A:matplotlib.legend.loc_in_bbox->self.legend.axes.transAxes.transform(loc_in_canvas)
A:matplotlib.legend.self.prop->matplotlib.font_manager.FontProperties._from_any(prop)
A:matplotlib.legend.self._fontsize->self.prop.get_size_in_points()
A:matplotlib.legend.self.numpoints->val_or_rc(numpoints, 'legend.numpoints')
A:matplotlib.legend.self.markerscale->val_or_rc(markerscale, 'legend.markerscale')
A:matplotlib.legend.self.scatterpoints->val_or_rc(scatterpoints, 'legend.scatterpoints')
A:matplotlib.legend.self.borderpad->val_or_rc(borderpad, 'legend.borderpad')
A:matplotlib.legend.self.labelspacing->val_or_rc(labelspacing, 'legend.labelspacing')
A:matplotlib.legend.self.handlelength->val_or_rc(handlelength, 'legend.handlelength')
A:matplotlib.legend.self.handleheight->val_or_rc(handleheight, 'legend.handleheight')
A:matplotlib.legend.self.handletextpad->val_or_rc(handletextpad, 'legend.handletextpad')
A:matplotlib.legend.self.borderaxespad->val_or_rc(borderaxespad, 'legend.borderaxespad')
A:matplotlib.legend.self.columnspacing->val_or_rc(columnspacing, 'legend.columnspacing')
A:matplotlib.legend.self.shadow->val_or_rc(shadow, 'legend.shadow')
A:matplotlib.legend.self._scatteryoffsets->numpy.asarray(scatteryoffsets)
A:matplotlib.legend.self._outside_loc->matplotlib._api.check_getitem(self.codes, loc=loc).replace('center ', '')
A:matplotlib.legend.locs->matplotlib._api.check_getitem(self.codes, loc=loc).split()
A:matplotlib.legend.loc->matplotlib._api.check_getitem(self.codes, loc=loc)
A:matplotlib.legend.self.legendPatch->FancyBboxPatch(xy=(0, 0), width=1, height=1, facecolor=facecolor, edgecolor=edgecolor, alpha=framealpha if framealpha is not None else 1 if shadow else mpl.rcParams['legend.framealpha'], boxstyle='round,pad=0,rounding_size=0.2' if fancybox else 'square,pad=0', mutation_scale=self._fontsize, snap=True, visible=frameon if frameon is not None else mpl.rcParams['legend.frameon'])
A:matplotlib.legend.title_prop_fp->matplotlib.font_manager.FontProperties._from_any(title_fontproperties)
A:matplotlib.legend.color->getattr(handle, getter_name)()
A:matplotlib.legend.legendHandles->matplotlib._api.deprecated('3.7', alternative='legend_handles')(property(lambda self: self.legend_handles))
A:matplotlib.legend._loc->property(_get_loc, _set_loc)
A:matplotlib.legend.(x, y)->self._get_anchored_bbox(self._loc, bbox, self.get_bbox_to_anchor(), renderer)
A:matplotlib.legend.fontsize->self.figure._get_renderer().points_to_pixels(self._fontsize)
A:matplotlib.legend.default_handler_map->self.get_default_handler_map()
A:matplotlib.legend.legend_handler_map->self.get_legend_handler_map()
A:matplotlib.legend.handler->self.get_legend_handler(legend_handler_map, orig_handle)
A:matplotlib.legend.textbox->TextArea(label, multilinebaseline=True, textprops=dict(verticalalignment='baseline', horizontalalignment='left', fontproperties=self.prop))
A:matplotlib.legend.handlebox->DrawingArea(width=self.handlelength * fontsize, height=height, xdescent=0.0, ydescent=descent)
A:matplotlib.legend.self._legend_handle_box->HPacker(pad=0, sep=sep, align='baseline', mode=mode, children=columnbox)
A:matplotlib.legend.self._legend_title_box->TextArea('')
A:matplotlib.legend.self._legend_box->VPacker(pad=self.borderpad * fontsize, sep=self.labelspacing * fontsize, align=self._alignment, children=[self._legend_title_box, self._legend_handle_box])
A:matplotlib.legend.(transform, transOffset, hoffsets, _)->artist._prepare_points()
A:matplotlib.legend.renderer->self.figure._get_renderer()
A:matplotlib.legend.l->len(bbox)
A:matplotlib.legend.self._bbox_to_anchor->TransformedBbox(self._bbox_to_anchor, transform)
A:matplotlib.legend.transform->BboxTransformTo(self.parent.bbox)
A:matplotlib.legend.start_time->time.perf_counter()
A:matplotlib.legend.(bboxes, lines, offsets)->self._auto_legend_data()
A:matplotlib.legend.legendBox->matplotlib.transforms.Bbox.from_bounds(l, b, width, height)
A:matplotlib.legend.(_, _, (l, b))->min(candidates)
A:matplotlib.legend.(inside, info)->self._default_contains(event)
A:matplotlib.legend.self._draggable->DraggableLegend(self, use_blit, update=update)
A:matplotlib.legend.label->handle.get_label()
A:matplotlib.legend.log->logging.getLogger(__name__)
A:matplotlib.legend.handlers->kwargs.get('handler_map')
A:matplotlib.legend.(handles, labels)->_get_legend_handles_labels(axs, handlers)
matplotlib.legend.DraggableLegend(self,legend,use_blit=False,update='loc')
matplotlib.legend.DraggableLegend.__init__(self,legend,use_blit=False,update='loc')
matplotlib.legend.DraggableLegend._update_bbox_to_anchor(self,loc_in_canvas)
matplotlib.legend.DraggableLegend._update_loc(self,loc_in_canvas)
matplotlib.legend.DraggableLegend.finalize_offset(self)
matplotlib.legend.Legend(self,parent,handles,labels,loc=None,numpoints=None,markerscale=None,markerfirst=True,reverse=False,scatterpoints=None,scatteryoffsets=None,prop=None,fontsize=None,labelcolor=None,borderpad=None,labelspacing=None,handlelength=None,handleheight=None,handletextpad=None,borderaxespad=None,columnspacing=None,ncols=1,mode=None,fancybox=None,shadow=None,title=None,title_fontsize=None,framealpha=None,edgecolor=None,facecolor=None,bbox_to_anchor=None,bbox_transform=None,frameon=None,handler_map=None,title_fontproperties=None,alignment='center',*,ncol=1,draggable=False)
matplotlib.legend.Legend.__init__(self,parent,handles,labels,loc=None,numpoints=None,markerscale=None,markerfirst=True,reverse=False,scatterpoints=None,scatteryoffsets=None,prop=None,fontsize=None,labelcolor=None,borderpad=None,labelspacing=None,handlelength=None,handleheight=None,handletextpad=None,borderaxespad=None,columnspacing=None,ncols=1,mode=None,fancybox=None,shadow=None,title=None,title_fontsize=None,framealpha=None,edgecolor=None,facecolor=None,bbox_to_anchor=None,bbox_transform=None,frameon=None,handler_map=None,title_fontproperties=None,alignment='center',*,ncol=1,draggable=False)
matplotlib.legend.Legend.__str__(self)
matplotlib.legend.Legend._auto_legend_data(self)
matplotlib.legend.Legend._find_best_position(self,width,height,renderer,consider=None)
matplotlib.legend.Legend._findoffset(self,width,height,xdescent,ydescent,renderer)
matplotlib.legend.Legend._get_anchored_bbox(self,loc,bbox,parentbbox,renderer)
matplotlib.legend.Legend._get_loc(self)
matplotlib.legend.Legend._init_legend_box(self,handles,labels,markerfirst=True)
matplotlib.legend.Legend._set_artist_props(self,a)
matplotlib.legend.Legend._set_loc(self,loc)
matplotlib.legend.Legend.contains(self,event)
matplotlib.legend.Legend.draw(self,renderer)
matplotlib.legend.Legend.get_alignment(self)
matplotlib.legend.Legend.get_bbox_to_anchor(self)
matplotlib.legend.Legend.get_children(self)
matplotlib.legend.Legend.get_default_handler_map(cls)
matplotlib.legend.Legend.get_draggable(self)
matplotlib.legend.Legend.get_frame(self)
matplotlib.legend.Legend.get_frame_on(self)
matplotlib.legend.Legend.get_legend_handler(legend_handler_map,orig_handle)
matplotlib.legend.Legend.get_legend_handler_map(self)
matplotlib.legend.Legend.get_lines(self)
matplotlib.legend.Legend.get_patches(self)
matplotlib.legend.Legend.get_texts(self)
matplotlib.legend.Legend.get_tightbbox(self,renderer=None)
matplotlib.legend.Legend.get_title(self)
matplotlib.legend.Legend.get_window_extent(self,renderer=None)
matplotlib.legend.Legend.set_alignment(self,alignment)
matplotlib.legend.Legend.set_bbox_to_anchor(self,bbox,transform=None)
matplotlib.legend.Legend.set_default_handler_map(cls,handler_map)
matplotlib.legend.Legend.set_draggable(self,state,use_blit=False,update='loc')
matplotlib.legend.Legend.set_frame_on(self,b)
matplotlib.legend.Legend.set_ncols(self,ncols)
matplotlib.legend.Legend.set_title(self,title,prop=None)
matplotlib.legend.Legend.update_default_handler_map(cls,handler_map)
matplotlib.legend._get_legend_handles(axs,legend_handler_map=None)
matplotlib.legend._get_legend_handles_labels(axs,legend_handler_map=None)
matplotlib.legend._parse_legend_args(axs,*args,handles=None,labels=None,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_pylab_helpers.py----------------------------------------
A:matplotlib._pylab_helpers.figs->OrderedDict()
A:matplotlib._pylab_helpers.manager->cls.figs.pop(num)
A:matplotlib._pylab_helpers.num->next((manager.num for manager in cls.figs.values() if manager.canvas.figure == fig), None)
A:matplotlib._pylab_helpers.manager._cidgcf->cls.figs.pop(num).canvas.mpl_connect('button_press_event', lambda event: cls.set_active(manager))
A:matplotlib._pylab_helpers.label->fig.get_label()
matplotlib._pylab_helpers.Gcf
matplotlib._pylab_helpers.Gcf._set_new_active_manager(cls,manager)
matplotlib._pylab_helpers.Gcf.destroy(cls,num)
matplotlib._pylab_helpers.Gcf.destroy_all(cls)
matplotlib._pylab_helpers.Gcf.destroy_fig(cls,fig)
matplotlib._pylab_helpers.Gcf.draw_all(cls,force=False)
matplotlib._pylab_helpers.Gcf.get_active(cls)
matplotlib._pylab_helpers.Gcf.get_all_fig_managers(cls)
matplotlib._pylab_helpers.Gcf.get_fig_manager(cls,num)
matplotlib._pylab_helpers.Gcf.get_num_fig_managers(cls)
matplotlib._pylab_helpers.Gcf.has_fignum(cls,num)
matplotlib._pylab_helpers.Gcf.set_active(cls,manager)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_blocking_input.py----------------------------------------
matplotlib._blocking_input.blocking_input_loop(figure,event_names,timeout,handler)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/spines.py----------------------------------------
A:matplotlib.spines.self._patch_transform->matplotlib.transforms.Affine2D().scale(width * 0.5, height * 0.5).translate(*center)
A:matplotlib.spines.self._path->matplotlib.path.Path.arc(np.rad2deg(low), np.rad2deg(high))
A:matplotlib.spines.width->self.convert_xunits(self._width)
A:matplotlib.spines.height->self.convert_yunits(self._height)
A:matplotlib.spines.bb->super().get_window_extent(renderer=renderer)
A:matplotlib.spines.drawn_ticks->self.axis._update_ticks()
A:matplotlib.spines.major_tick->next(iter({*drawn_ticks} & {*self.axis.majorTicks}), None)
A:matplotlib.spines.minor_tick->next(iter({*drawn_ticks} & {*self.axis.minorTicks}), None)
A:matplotlib.spines.bb0->super().get_window_extent(renderer=renderer).frozen()
A:matplotlib.spines.direction->self.axes.get_theta_direction()
A:matplotlib.spines.offset->self.axes.get_theta_offset()
A:matplotlib.spines.rorigin->self.axes.get_rorigin()
A:matplotlib.spines.ret->super().draw(renderer)
A:matplotlib.spines.base_transform->self.axes.get_xaxis_transform(which='grid')
A:matplotlib.spines.path->matplotlib.path.Path.unit_circle()
A:matplotlib.spines.result->cls(axes, spine_type, path, **kwargs)
A:matplotlib.spines.x->functools.partial(x, broadcast_targets, name)
matplotlib.spines.Spine(self,axes,spine_type,path,**kwargs)
matplotlib.spines.Spine.__init__(self,axes,spine_type,path,**kwargs)
matplotlib.spines.Spine.__str__(self)
matplotlib.spines.Spine._adjust_location(self)
matplotlib.spines.Spine._ensure_position_is_set(self)
matplotlib.spines.Spine._recompute_transform(self)
matplotlib.spines.Spine.arc_spine(cls,axes,spine_type,center,radius,theta1,theta2,**kwargs)
matplotlib.spines.Spine.circular_spine(cls,axes,center,radius,**kwargs)
matplotlib.spines.Spine.clear(self)
matplotlib.spines.Spine.draw(self,renderer)
matplotlib.spines.Spine.get_bounds(self)
matplotlib.spines.Spine.get_patch_transform(self)
matplotlib.spines.Spine.get_path(self)
matplotlib.spines.Spine.get_position(self)
matplotlib.spines.Spine.get_spine_transform(self)
matplotlib.spines.Spine.get_window_extent(self,renderer=None)
matplotlib.spines.Spine.linear_spine(cls,axes,spine_type,**kwargs)
matplotlib.spines.Spine.register_axis(self,axis)
matplotlib.spines.Spine.set_bounds(self,low=None,high=None)
matplotlib.spines.Spine.set_color(self,c)
matplotlib.spines.Spine.set_patch_arc(self,center,radius,theta1,theta2)
matplotlib.spines.Spine.set_patch_circle(self,center,radius)
matplotlib.spines.Spine.set_patch_line(self)
matplotlib.spines.Spine.set_position(self,position)
matplotlib.spines.Spines(self,**kwargs)
matplotlib.spines.Spines.__delitem__(self,key)
matplotlib.spines.Spines.__getattr__(self,name)
matplotlib.spines.Spines.__getitem__(self,key)
matplotlib.spines.Spines.__getstate__(self)
matplotlib.spines.Spines.__init__(self,**kwargs)
matplotlib.spines.Spines.__iter__(self)
matplotlib.spines.Spines.__len__(self)
matplotlib.spines.Spines.__setitem__(self,key,value)
matplotlib.spines.Spines.__setstate__(self,state)
matplotlib.spines.Spines.from_dict(cls,d)
matplotlib.spines.SpinesProxy(self,spine_dict)
matplotlib.spines.SpinesProxy.__dir__(self)
matplotlib.spines.SpinesProxy.__getattr__(self,name)
matplotlib.spines.SpinesProxy.__init__(self,spine_dict)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backend_bases.py----------------------------------------
A:matplotlib.backend_bases._log->logging.getLogger(__name__)
A:matplotlib.backend_bases.current_framework->matplotlib.cbook._get_running_interactive_framework()
A:matplotlib.backend_bases.self._text2path->matplotlib.text.TextToPath()
A:matplotlib.backend_bases.path_ids->self._iter_collection_raw_paths(master_transform, paths, all_transforms)
A:matplotlib.backend_bases.transform->Affine2D().scale(fontsize / text2path.FONT_SCALE).rotate(angle).translate(x, y)
A:matplotlib.backend_bases.paths->matplotlib.collections.QuadMesh._convert_mesh_to_paths(coordinates)
A:matplotlib.backend_bases.linewidths->numpy.array([gc.get_linewidth()], float)
A:matplotlib.backend_bases.Npaths->len(path_ids)
A:matplotlib.backend_bases.Ntransforms->len(all_transforms)
A:matplotlib.backend_bases.N->max(Npaths, Noffsets)
A:matplotlib.backend_bases.Npath_ids->max(Npaths, len(all_transforms))
A:matplotlib.backend_bases.Noffsets->len(offsets)
A:matplotlib.backend_bases.Nfacecolors->len(facecolors)
A:matplotlib.backend_bases.Nedgecolors->len(edgecolors)
A:matplotlib.backend_bases.Nlinewidths->len(linewidths)
A:matplotlib.backend_bases.Nlinestyles->len(linestyles)
A:matplotlib.backend_bases.Nurls->len(urls)
A:matplotlib.backend_bases.gc0->self.new_gc()
A:matplotlib.backend_bases.pathids->cycle_or_default(path_ids)
A:matplotlib.backend_bases.toffsets->cycle_or_default(offset_trans.transform(offsets), (0, 0))
A:matplotlib.backend_bases.fcs->cycle_or_default(facecolors)
A:matplotlib.backend_bases.ecs->cycle_or_default(edgecolors)
A:matplotlib.backend_bases.lws->cycle_or_default(linewidths)
A:matplotlib.backend_bases.lss->cycle_or_default(linestyles)
A:matplotlib.backend_bases.aas->cycle_or_default(antialiaseds)
A:matplotlib.backend_bases.urls->cycle_or_default(urls)
A:matplotlib.backend_bases.fontsize->prop.get_size_in_points()
A:matplotlib.backend_bases.(verts, codes)->text2path.get_text_path(prop, s, ismath=ismath)
A:matplotlib.backend_bases.path->Path(verts, codes)
A:matplotlib.backend_bases.angle->numpy.deg2rad(angle)
A:matplotlib.backend_bases.(width, height)->self.get_canvas_width_height()
A:matplotlib.backend_bases.(path, transform)->self._get_text_path_transform(x, y, s, prop, angle, ismath)
A:matplotlib.backend_bases.color->gc.get_rgb()
A:matplotlib.backend_bases.dpi->getattr(self.figure, '_original_dpi', self.figure.dpi)
A:matplotlib.backend_bases.dims->self._text2path.mathtext_parser.parse(s, dpi, prop)
A:matplotlib.backend_bases.flags->self._text2path._get_hinting_flag()
A:matplotlib.backend_bases.font->self._text2path._get_font(prop)
A:matplotlib.backend_bases.(w, h)->self._text2path._get_font(prop).get_width_height()
A:matplotlib.backend_bases.d->self._text2path._get_font(prop).get_descent()
A:matplotlib.backend_bases.self._texmanager->TexManager()
A:matplotlib.backend_bases.self._capstyle->CapStyle(cs)
A:matplotlib.backend_bases.self._joinstyle->JoinStyle(js)
A:matplotlib.backend_bases.self._hatch_color->matplotlib.colors.to_rgba(rcParams['hatch.color'])
A:matplotlib.backend_bases.(tpath, tr)->self._clippath.get_transformed_path_and_affine()
A:matplotlib.backend_bases.self._antialiased->int(bool(b))
A:matplotlib.backend_bases.dl->numpy.asarray(dash_list)
A:matplotlib.backend_bases.self._rgb->matplotlib.colors.to_rgba(fg)
A:matplotlib.backend_bases.self._linewidth->float(w)
A:matplotlib.backend_bases.hatch->self.get_hatch()
A:matplotlib.backend_bases.interval->int(interval)
A:matplotlib.backend_bases.ret->func(*args, **kwargs)
A:matplotlib.backend_bases.(self.width, self.height)->self.switch_backends(canvas_class).get_width_height()
A:matplotlib.backend_bases.self.modifiers->frozenset(modifiers if modifiers is not None else [])
A:matplotlib.backend_bases.self.inaxes->self.canvas.inaxes((x, y))
A:matplotlib.backend_bases.trans->self.inaxes.transData.inverted()
A:matplotlib.backend_bases.(xdata, ydata)->self.inaxes.transData.inverted().transform((x, y))
A:matplotlib.backend_bases.button->MouseButton(button)
A:matplotlib.backend_bases.fmt->Figure().canvas.get_default_filetype()
A:matplotlib.backend_bases.print_method->functools.wraps(meth)(lambda *args, **kwargs: meth(*args, **{k: v for (k, v) in kwargs.items() if k not in skip}))
A:matplotlib.backend_bases.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerBase)
A:matplotlib.backend_bases.figure->Figure()
A:matplotlib.backend_bases.self.widgetlock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_bases.callbacks->property(lambda self: self.figure._canvas_callbacks)
A:matplotlib.backend_bases.button_pick_id->property(lambda self: self.figure._button_pick_id)
A:matplotlib.backend_bases.scroll_pick_id->property(lambda self: self.figure._scroll_pick_id)
A:matplotlib.backend_bases.ip->IPython.get_ipython()
A:matplotlib.backend_bases.backend2gui_rif->{'qt': 'qt', 'gtk3': 'gtk3', 'gtk4': 'gtk4', 'wx': 'wx', 'macosx': 'osx'}.get(cls.required_interactive_framework)
A:matplotlib.backend_bases.event->LocationEvent('figure_enter_event', self, x, y, guiEvent)
A:matplotlib.backend_bases.mouseevent->MouseEvent(s, self, x, y, button, self._key, dblclick=dblclick, guiEvent=guiEvent)
A:matplotlib.backend_bases.axes->matplotlib.cbook._topmost_artist(axes_list)
A:matplotlib.backend_bases.canvas_class->get_registered_canvas_class(fmt)
A:matplotlib.backend_bases.canvas->self.switch_backends(canvas_class)
A:matplotlib.backend_bases.meth->getattr(canvas, f'print_{fmt}')
A:matplotlib.backend_bases.filename->os.fspath(filename)
A:matplotlib.backend_bases.format->format.lower().lower()
A:matplotlib.backend_bases.renderer->_get_renderer(self.figure, functools.partial(print_method, orientation=orientation))
A:matplotlib.backend_bases.bbox_inches->bbox_inches.padded(pad_inches).padded(pad_inches)
A:matplotlib.backend_bases.restore_bbox->matplotlib._tight_bbox.adjust_bbox(self.figure, bbox_inches, self.figure.canvas.fixed_dpi)
A:matplotlib.backend_bases.result->print_method(filename, facecolor=facecolor, edgecolor=edgecolor, orientation=orientation, bbox_inches_restore=_bbox_inches_restore, **kwargs)
A:matplotlib.backend_bases.basename->(basename or 'image').replace(' ', '_')
A:matplotlib.backend_bases.filetype->self.get_default_filetype()
A:matplotlib.backend_bases.newCanvas->FigureCanvasClass(self.figure)
A:matplotlib.backend_bases.x_state->_get_uniform_gridstate(ax.xaxis.minorTicks)
A:matplotlib.backend_bases.y_state->_get_uniform_gridstate(ax.yaxis.minorTicks)
A:matplotlib.backend_bases.scale->ax.get_yscale()
A:matplotlib.backend_bases.scalex->ax.get_xscale()
A:matplotlib.backend_bases.button_name->str(MouseButton(event.button))
A:matplotlib.backend_bases.self.key_press_handler_id->self.canvas.mpl_connect('key_press_event', key_press_handler)
A:matplotlib.backend_bases.self.button_press_handler_id->self.canvas.mpl_connect('button_press_event', button_press_handler)
A:matplotlib.backend_bases.self.toolbar->self._toolmanager_toolbar_class(self.toolmanager)
A:matplotlib.backend_bases.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.backend_bases.pyplot_show->getattr(sys.modules.get('matplotlib.pyplot'), 'show', None)
A:matplotlib.backend_bases.ipython_pylab->hasattr(pyplot_show, '_needmain')
A:matplotlib.backend_bases.self._nav_stack->matplotlib.cbook.Stack()
A:matplotlib.backend_bases.self._id_press->self.canvas.mpl_connect('button_press_event', self._zoom_pan_handler)
A:matplotlib.backend_bases.self._id_release->self.canvas.mpl_connect('button_release_event', self._zoom_pan_handler)
A:matplotlib.backend_bases.self._id_drag->self.canvas.mpl_connect('motion_notify_event', self.mouse_move)
A:matplotlib.backend_bases.s->s.rstrip().rstrip()
A:matplotlib.backend_bases.a->matplotlib.cbook._topmost_artist(artists)
A:matplotlib.backend_bases.data->matplotlib.cbook._topmost_artist(artists).get_cursor_data(event)
A:matplotlib.backend_bases.data_str->matplotlib.cbook._topmost_artist(artists).format_cursor_data(data).rstrip()
A:matplotlib.backend_bases._PanInfo->namedtuple('_PanInfo', 'button axes cid')
A:matplotlib.backend_bases.id_drag->self.canvas.mpl_connect('motion_notify_event', self.drag_pan)
A:matplotlib.backend_bases.self._pan_info->self._PanInfo(button=event.button, axes=axes, cid=id_drag)
A:matplotlib.backend_bases._ZoomInfo->namedtuple('_ZoomInfo', 'direction start_xy axes cid cbar')
A:matplotlib.backend_bases.id_zoom->self.canvas.mpl_connect('motion_notify_event', self.drag_zoom)
A:matplotlib.backend_bases.self._zoom_info->self._ZoomInfo(direction='in' if event.button == 1 else 'out', start_xy=(event.x, event.y), axes=axes, cid=id_zoom, cbar=cbar)
A:matplotlib.backend_bases.((x1, y1), (x2, y2))->numpy.clip([start_xy, [event.x, event.y]], ax.bbox.min, ax.bbox.max)
A:matplotlib.backend_bases.twinx->any((ax.get_shared_x_axes().joined(ax, prev) for prev in self._zoom_info.axes[:i]))
A:matplotlib.backend_bases.twiny->any((ax.get_shared_y_axes().joined(ax, prev) for prev in self._zoom_info.axes[:i]))
A:matplotlib.backend_bases.nav_info->self._nav_stack()
A:matplotlib.backend_bases.items->list(nav_info.items())
A:matplotlib.backend_bases.manager->matplotlib._pylab_helpers.Gcf.get_active()
A:matplotlib.backend_bases.self.subplot_tool->matplotlib.widgets.SubplotTool(self.canvas.figure, tool_fig)
A:matplotlib.backend_bases.cid->self.canvas.mpl_connect('close_event', lambda e: manager.destroy())
A:matplotlib.backend_bases.tool->self.toolmanager.get_tool(tool)
A:matplotlib.backend_bases.image->self._get_image_filename(tool.image)
A:matplotlib.backend_bases.basedir->matplotlib.cbook._get_data_path('images')
A:matplotlib.backend_bases.fig_cls->kwargs.pop('FigureClass', Figure)
A:matplotlib.backend_bases.fig->fig_cls(*args, **kwargs)
matplotlib.backend_bases.CloseEvent(Event)
matplotlib.backend_bases.DrawEvent(self,name,canvas,renderer)
matplotlib.backend_bases.DrawEvent.__init__(self,name,canvas,renderer)
matplotlib.backend_bases.Event(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.Event.__init__(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.Event._process(self)
matplotlib.backend_bases.FigureCanvasBase(self,figure=None)
matplotlib.backend_bases.FigureCanvasBase.__init__(self,figure=None)
matplotlib.backend_bases.FigureCanvasBase._fix_ipython_backend2gui(cls)
matplotlib.backend_bases.FigureCanvasBase._idle_draw_cntx(self)
matplotlib.backend_bases.FigureCanvasBase._set_device_pixel_ratio(self,ratio)
matplotlib.backend_bases.FigureCanvasBase._switch_canvas_and_return_print_method(self,fmt,backend=None)
matplotlib.backend_bases.FigureCanvasBase.blit(self,bbox=None)
matplotlib.backend_bases.FigureCanvasBase.button_press_event(self,x,y,button,dblclick=False,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.button_release_event(self,x,y,button,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.close_event(self,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.device_pixel_ratio(self)
matplotlib.backend_bases.FigureCanvasBase.draw(self,*args,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.draw_event(self,renderer)
matplotlib.backend_bases.FigureCanvasBase.draw_idle(self,*args,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.enter_notify_event(self,guiEvent=None,*,xy)
matplotlib.backend_bases.FigureCanvasBase.flush_events(self)
matplotlib.backend_bases.FigureCanvasBase.get_default_filename(self)
matplotlib.backend_bases.FigureCanvasBase.get_default_filetype(cls)
matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes(cls)
matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes_grouped(cls)
matplotlib.backend_bases.FigureCanvasBase.get_width_height(self,*,physical=False)
matplotlib.backend_bases.FigureCanvasBase.grab_mouse(self,ax)
matplotlib.backend_bases.FigureCanvasBase.inaxes(self,xy)
matplotlib.backend_bases.FigureCanvasBase.is_saving(self)
matplotlib.backend_bases.FigureCanvasBase.key_press_event(self,key,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.key_release_event(self,key,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.leave_notify_event(self,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.motion_notify_event(self,x,y,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.mpl_connect(self,s,func)
matplotlib.backend_bases.FigureCanvasBase.mpl_disconnect(self,cid)
matplotlib.backend_bases.FigureCanvasBase.new_manager(cls,figure,num)
matplotlib.backend_bases.FigureCanvasBase.new_timer(self,interval=None,callbacks=None)
matplotlib.backend_bases.FigureCanvasBase.pick(self,mouseevent)
matplotlib.backend_bases.FigureCanvasBase.pick_event(self,mouseevent,artist,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.print_figure(self,filename,dpi=None,facecolor=None,edgecolor=None,orientation='portrait',format=None,*,bbox_inches=None,pad_inches=None,bbox_extra_artists=None,backend=None,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.release_mouse(self,ax)
matplotlib.backend_bases.FigureCanvasBase.resize(self,w,h)
matplotlib.backend_bases.FigureCanvasBase.resize_event(self)
matplotlib.backend_bases.FigureCanvasBase.scroll_event(self,x,y,step,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.set_cursor(self,cursor)
matplotlib.backend_bases.FigureCanvasBase.start_event_loop(self,timeout=0)
matplotlib.backend_bases.FigureCanvasBase.stop_event_loop(self)
matplotlib.backend_bases.FigureCanvasBase.supports_blit(cls)
matplotlib.backend_bases.FigureCanvasBase.switch_backends(self,FigureCanvasClass)
matplotlib.backend_bases.FigureManagerBase(self,canvas,num)
matplotlib.backend_bases.FigureManagerBase.__init__(self,canvas,num)
matplotlib.backend_bases.FigureManagerBase.create_with_canvas(cls,canvas_class,figure,num)
matplotlib.backend_bases.FigureManagerBase.destroy(self)
matplotlib.backend_bases.FigureManagerBase.full_screen_toggle(self)
matplotlib.backend_bases.FigureManagerBase.get_window_title(self)
matplotlib.backend_bases.FigureManagerBase.plt_show(cls,*,block=None)
matplotlib.backend_bases.FigureManagerBase.pyplot_show(cls,*,block=None)
matplotlib.backend_bases.FigureManagerBase.resize(self,w,h)
matplotlib.backend_bases.FigureManagerBase.set_window_title(self,title)
matplotlib.backend_bases.FigureManagerBase.show(self)
matplotlib.backend_bases.FigureManagerBase.start_main_loop(cls)
matplotlib.backend_bases.GraphicsContextBase(self)
matplotlib.backend_bases.GraphicsContextBase.__init__(self)
matplotlib.backend_bases.GraphicsContextBase.copy_properties(self,gc)
matplotlib.backend_bases.GraphicsContextBase.get_alpha(self)
matplotlib.backend_bases.GraphicsContextBase.get_antialiased(self)
matplotlib.backend_bases.GraphicsContextBase.get_capstyle(self)
matplotlib.backend_bases.GraphicsContextBase.get_clip_path(self)
matplotlib.backend_bases.GraphicsContextBase.get_clip_rectangle(self)
matplotlib.backend_bases.GraphicsContextBase.get_dashes(self)
matplotlib.backend_bases.GraphicsContextBase.get_forced_alpha(self)
matplotlib.backend_bases.GraphicsContextBase.get_gid(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_color(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_linewidth(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_path(self,density=6.0)
matplotlib.backend_bases.GraphicsContextBase.get_joinstyle(self)
matplotlib.backend_bases.GraphicsContextBase.get_linewidth(self)
matplotlib.backend_bases.GraphicsContextBase.get_rgb(self)
matplotlib.backend_bases.GraphicsContextBase.get_sketch_params(self)
matplotlib.backend_bases.GraphicsContextBase.get_snap(self)
matplotlib.backend_bases.GraphicsContextBase.get_url(self)
matplotlib.backend_bases.GraphicsContextBase.restore(self)
matplotlib.backend_bases.GraphicsContextBase.set_alpha(self,alpha)
matplotlib.backend_bases.GraphicsContextBase.set_antialiased(self,b)
matplotlib.backend_bases.GraphicsContextBase.set_capstyle(self,cs)
matplotlib.backend_bases.GraphicsContextBase.set_clip_path(self,path)
matplotlib.backend_bases.GraphicsContextBase.set_clip_rectangle(self,rectangle)
matplotlib.backend_bases.GraphicsContextBase.set_dashes(self,dash_offset,dash_list)
matplotlib.backend_bases.GraphicsContextBase.set_foreground(self,fg,isRGBA=False)
matplotlib.backend_bases.GraphicsContextBase.set_gid(self,id)
matplotlib.backend_bases.GraphicsContextBase.set_hatch(self,hatch)
matplotlib.backend_bases.GraphicsContextBase.set_hatch_color(self,hatch_color)
matplotlib.backend_bases.GraphicsContextBase.set_joinstyle(self,js)
matplotlib.backend_bases.GraphicsContextBase.set_linewidth(self,w)
matplotlib.backend_bases.GraphicsContextBase.set_sketch_params(self,scale=None,length=None,randomness=None)
matplotlib.backend_bases.GraphicsContextBase.set_snap(self,snap)
matplotlib.backend_bases.GraphicsContextBase.set_url(self,url)
matplotlib.backend_bases.KeyEvent(self,name,canvas,key,x=0,y=0,guiEvent=None)
matplotlib.backend_bases.KeyEvent.__init__(self,name,canvas,key,x=0,y=0,guiEvent=None)
matplotlib.backend_bases.LocationEvent(self,name,canvas,x,y,guiEvent=None,*,modifiers=None)
matplotlib.backend_bases.LocationEvent.__init__(self,name,canvas,x,y,guiEvent=None,*,modifiers=None)
matplotlib.backend_bases.MouseButton(IntEnum)
matplotlib.backend_bases.MouseEvent(self,name,canvas,x,y,button=None,key=None,step=0,dblclick=False,guiEvent=None,*,modifiers=None)
matplotlib.backend_bases.MouseEvent.__init__(self,name,canvas,x,y,button=None,key=None,step=0,dblclick=False,guiEvent=None,*,modifiers=None)
matplotlib.backend_bases.MouseEvent.__str__(self)
matplotlib.backend_bases.NavigationToolbar2(self,canvas)
matplotlib.backend_bases.NavigationToolbar2.__init__(self,canvas)
matplotlib.backend_bases.NavigationToolbar2._mouse_event_to_message(event)
matplotlib.backend_bases.NavigationToolbar2._update_cursor(self,event)
matplotlib.backend_bases.NavigationToolbar2._update_view(self)
matplotlib.backend_bases.NavigationToolbar2._wait_cursor_for_draw_cm(self)
matplotlib.backend_bases.NavigationToolbar2._zoom_pan_handler(self,event)
matplotlib.backend_bases.NavigationToolbar2.back(self,*args)
matplotlib.backend_bases.NavigationToolbar2.configure_subplots(self,*args)
matplotlib.backend_bases.NavigationToolbar2.drag_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.drag_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backend_bases.NavigationToolbar2.forward(self,*args)
matplotlib.backend_bases.NavigationToolbar2.home(self,*args)
matplotlib.backend_bases.NavigationToolbar2.mouse_move(self,event)
matplotlib.backend_bases.NavigationToolbar2.pan(self,*args)
matplotlib.backend_bases.NavigationToolbar2.press_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.press_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.push_current(self)
matplotlib.backend_bases.NavigationToolbar2.release_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.release_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.remove_rubberband(self)
matplotlib.backend_bases.NavigationToolbar2.save_figure(self,*args)
matplotlib.backend_bases.NavigationToolbar2.set_history_buttons(self)
matplotlib.backend_bases.NavigationToolbar2.set_message(self,s)
matplotlib.backend_bases.NavigationToolbar2.update(self)
matplotlib.backend_bases.NavigationToolbar2.zoom(self,*args)
matplotlib.backend_bases.NonGuiException(Exception)
matplotlib.backend_bases.PickEvent(self,name,canvas,mouseevent,artist,guiEvent=None,**kwargs)
matplotlib.backend_bases.PickEvent.__init__(self,name,canvas,mouseevent,artist,guiEvent=None,**kwargs)
matplotlib.backend_bases.RendererBase(self)
matplotlib.backend_bases.RendererBase.__init__(self)
matplotlib.backend_bases.RendererBase._draw_disabled(self)
matplotlib.backend_bases.RendererBase._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath)
matplotlib.backend_bases.RendererBase._get_text_path_transform(self,x,y,s,prop,angle,ismath)
matplotlib.backend_bases.RendererBase._iter_collection(self,gc,path_ids,offsets,offset_trans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backend_bases.RendererBase._iter_collection_raw_paths(self,master_transform,paths,all_transforms)
matplotlib.backend_bases.RendererBase._iter_collection_uses_per_path(self,paths,all_transforms,offsets,facecolors,edgecolors)
matplotlib.backend_bases.RendererBase.close_group(self,s)
matplotlib.backend_bases.RendererBase.draw_gouraud_triangle(self,gc,points,colors,transform)
matplotlib.backend_bases.RendererBase.draw_gouraud_triangles(self,gc,triangles_array,colors_array,transform)
matplotlib.backend_bases.RendererBase.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backend_bases.RendererBase.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backend_bases.RendererBase.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backend_bases.RendererBase.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offset_trans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backend_bases.RendererBase.draw_quad_mesh(self,gc,master_transform,meshWidth,meshHeight,coordinates,offsets,offsetTrans,facecolors,antialiased,edgecolors)
matplotlib.backend_bases.RendererBase.draw_tex(self,gc,x,y,s,prop,angle,*,mtext=None)
matplotlib.backend_bases.RendererBase.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backend_bases.RendererBase.flipy(self)
matplotlib.backend_bases.RendererBase.get_canvas_width_height(self)
matplotlib.backend_bases.RendererBase.get_image_magnification(self)
matplotlib.backend_bases.RendererBase.get_texmanager(self)
matplotlib.backend_bases.RendererBase.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backend_bases.RendererBase.new_gc(self)
matplotlib.backend_bases.RendererBase.open_group(self,s,gid=None)
matplotlib.backend_bases.RendererBase.option_image_nocomposite(self)
matplotlib.backend_bases.RendererBase.option_scale_image(self)
matplotlib.backend_bases.RendererBase.points_to_pixels(self,points)
matplotlib.backend_bases.RendererBase.start_filter(self)
matplotlib.backend_bases.RendererBase.start_rasterizing(self)
matplotlib.backend_bases.RendererBase.stop_filter(self,filter_func)
matplotlib.backend_bases.RendererBase.stop_rasterizing(self)
matplotlib.backend_bases.ResizeEvent(self,name,canvas)
matplotlib.backend_bases.ResizeEvent.__init__(self,name,canvas)
matplotlib.backend_bases.ShowBase(self,block=None)
matplotlib.backend_bases.ShowBase.__call__(self,block=None)
matplotlib.backend_bases.TimerBase(self,interval=None,callbacks=None)
matplotlib.backend_bases.TimerBase.__del__(self)
matplotlib.backend_bases.TimerBase.__init__(self,interval=None,callbacks=None)
matplotlib.backend_bases.TimerBase._on_timer(self)
matplotlib.backend_bases.TimerBase._timer_set_interval(self)
matplotlib.backend_bases.TimerBase._timer_set_single_shot(self)
matplotlib.backend_bases.TimerBase._timer_start(self)
matplotlib.backend_bases.TimerBase._timer_stop(self)
matplotlib.backend_bases.TimerBase.add_callback(self,func,*args,**kwargs)
matplotlib.backend_bases.TimerBase.interval(self)
matplotlib.backend_bases.TimerBase.interval(self,interval)
matplotlib.backend_bases.TimerBase.remove_callback(self,func,*args,**kwargs)
matplotlib.backend_bases.TimerBase.single_shot(self)
matplotlib.backend_bases.TimerBase.single_shot(self,ss)
matplotlib.backend_bases.TimerBase.start(self,interval=None)
matplotlib.backend_bases.TimerBase.stop(self)
matplotlib.backend_bases.ToolContainerBase(self,toolmanager)
matplotlib.backend_bases.ToolContainerBase.__init__(self,toolmanager)
matplotlib.backend_bases.ToolContainerBase._get_image_filename(self,image)
matplotlib.backend_bases.ToolContainerBase._tool_toggled_cbk(self,event)
matplotlib.backend_bases.ToolContainerBase.add_tool(self,tool,group,position=-1)
matplotlib.backend_bases.ToolContainerBase.add_toolitem(self,name,group,position,image,description,toggle)
matplotlib.backend_bases.ToolContainerBase.remove_toolitem(self,name)
matplotlib.backend_bases.ToolContainerBase.set_message(self,s)
matplotlib.backend_bases.ToolContainerBase.toggle_toolitem(self,name,toggled)
matplotlib.backend_bases.ToolContainerBase.trigger_tool(self,name)
matplotlib.backend_bases._Backend
matplotlib.backend_bases._Backend.draw_if_interactive(cls)
matplotlib.backend_bases._Backend.export(cls)
matplotlib.backend_bases._Backend.new_figure_manager(cls,num,*args,**kwargs)
matplotlib.backend_bases._Backend.new_figure_manager_given_figure(cls,num,figure)
matplotlib.backend_bases._Backend.show(cls,*,block=None)
matplotlib.backend_bases._Mode(str,Enum)
matplotlib.backend_bases._Mode.__str__(self)
matplotlib.backend_bases._Mode._navigate_mode(self)
matplotlib.backend_bases._get_renderer(figure,print_method=None)
matplotlib.backend_bases._is_non_interactive_terminal_ipython(ip)
matplotlib.backend_bases._key_handler(event)
matplotlib.backend_bases._mouse_handler(event)
matplotlib.backend_bases._no_output_draw(figure)
matplotlib.backend_bases._safe_plt_import()
matplotlib.backend_bases._safe_pyplot_import()
matplotlib.backend_bases.button_press_handler(event,canvas=None,toolbar=None)
matplotlib.backend_bases.get_registered_canvas_class(format)
matplotlib.backend_bases.key_press_handler(event,canvas=None,toolbar=None)
matplotlib.backend_bases.register_backend(format,backend,description=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/__init__.py----------------------------------------
A:matplotlib.__init__._log->logging.getLogger(__name__)
A:matplotlib.__init__._VersionInfo->namedtuple('_VersionInfo', 'major, minor, micro, releaselevel, serial')
A:matplotlib.__init__.v->parse_version(version_str)
A:matplotlib.__init__.releaselevel->{'a': 'alpha', 'b': 'beta', 'rc': 'candidate'}.get(v.pre[0], 'alpha')
A:matplotlib.__init__.__version__->property(lambda self: _get_version())
A:matplotlib.__init__.__version_info__->property(lambda self: _parse_to_version_info(self.__version__))
A:matplotlib.__init__.module->importlib.import_module(modname)
A:matplotlib.__init__.handler->logging.StreamHandler()
A:matplotlib.__init__.ret->func(**kwargs)
A:matplotlib.__init__._ExecInfo->namedtuple('_ExecInfo', 'executable raw_version version')
A:matplotlib.__init__.output->subprocess.check_output(args, stderr=subprocess.STDOUT, universal_newlines=True, errors='replace')
A:matplotlib.__init__.match->re.search(regex, output)
A:matplotlib.__init__.raw_version->re.search(regex, output).group(1)
A:matplotlib.__init__.version->parse_version(raw_version)
A:matplotlib.__init__.candidate->Path(binpath, name)
A:matplotlib.__init__.path->str(candidate)
A:matplotlib.__init__.info->impl(['pdftops', '-v'], '^pdftops version (.*)', ignore_exit_code=True)
A:matplotlib.__init__.configdir->Path(xdg_base_getter(), 'matplotlib')
A:matplotlib.__init__.tmpdir->tempfile.mkdtemp(prefix='matplotlib-')
A:matplotlib.__init__.val->val.strip().strip()
A:matplotlib.__init__.cval->self.validate[key](val)
A:matplotlib.__init__.backend->self._get('backend')
A:matplotlib.__init__.repr_split->pprint.pformat(dict(self), indent=1, width=80 - indent).split('\n')
A:matplotlib.__init__.repr_indented->('\n' + ' ' * indent).join(repr_split)
A:matplotlib.__init__.pattern_re->re.compile(pattern)
A:matplotlib.__init__.rccopy->RcParams()
A:matplotlib.__init__.ssl_ctx->_get_ssl_context()
A:matplotlib.__init__.fname->os.path.expanduser(fname)
A:matplotlib.__init__.line->transform(line)
A:matplotlib.__init__.strippedline->cbook._strip_comment(line)
A:matplotlib.__init__.tup->cbook._strip_comment(line).split(':', 1)
A:matplotlib.__init__.key->key.strip().strip()
A:matplotlib.__init__.config->RcParams({**rcParamsDefault, **config_from_file})
A:matplotlib.__init__.config_from_file->_rc_params_in_file(fname, fail_on_error=fail_on_error)
A:matplotlib.__init__.rcParamsDefault->_rc_params_in_file(cbook._get_data_path('matplotlibrc'), transform=lambda line: line[1:] if line.startswith('#') else line, fail_on_error=True)
A:matplotlib.__init__.rcParams->RcParams()
A:matplotlib.__init__.rcParamsOrig->RcParams().copy()
A:matplotlib.__init__.rc_from_file->rc_params_from_file(fname, use_default_template=use_default_template)
A:matplotlib.__init__.orig->dict(rcParams.copy())
A:matplotlib.__init__.name->validate_backend(backend)
A:matplotlib.__init__.plt->sys.modules.get('matplotlib.pyplot')
A:matplotlib.__init__.rcParams['backend']->os.environ.get('MPLBACKEND')
A:matplotlib.__init__.docstring->inspect.cleandoc(docstring)
A:matplotlib.__init__.sig->inspect.signature(func)
A:matplotlib.__init__.params->list(sig.parameters.values())
A:matplotlib.__init__.data_param->Parameter('data', Parameter.KEYWORD_ONLY, default=None)
A:matplotlib.__init__.new_sig->inspect.signature(func).replace(parameters=params)
A:matplotlib.__init__.bound->inspect.signature(func).replace(parameters=params).bind(ax, *args, **kwargs)
A:matplotlib.__init__.v[k1]->_replacer(data, v1)
A:matplotlib.__init__.bound.arguments[k]->_replacer(data, v)
A:matplotlib.__init__.new_kwargs['label']->_label_from_arg(args_and_kwargs.get(label_namer), auto_label)
A:matplotlib.__init__.inner.__doc__->_add_data_doc(inner.__doc__, replace_names)
matplotlib.__init__.ExecutableNotFoundError(FileNotFoundError)
matplotlib.__init__.RcParams(self,*args,**kwargs)
matplotlib.__init__.RcParams.__getitem__(self,key)
matplotlib.__init__.RcParams.__init__(self,*args,**kwargs)
matplotlib.__init__.RcParams.__iter__(self)
matplotlib.__init__.RcParams.__len__(self)
matplotlib.__init__.RcParams.__repr__(self)
matplotlib.__init__.RcParams.__setitem__(self,key,val)
matplotlib.__init__.RcParams.__str__(self)
matplotlib.__init__.RcParams._get(self,key)
matplotlib.__init__.RcParams._get_backend_or_none(self)
matplotlib.__init__.RcParams._set(self,key,val)
matplotlib.__init__.RcParams.copy(self)
matplotlib.__init__.RcParams.find_all(self,pattern)
matplotlib.__init__.__getattr__
matplotlib.__init__._add_data_doc(docstring,replace_names)
matplotlib.__init__._check_versions()
matplotlib.__init__._ensure_handler()
matplotlib.__init__._get_config_or_cache_dir(xdg_base_getter)
matplotlib.__init__._get_executable_info(name)
matplotlib.__init__._get_ssl_context()
matplotlib.__init__._get_version()
matplotlib.__init__._get_xdg_cache_dir()
matplotlib.__init__._get_xdg_config_dir()
matplotlib.__init__._init_tests()
matplotlib.__init__._label_from_arg(y,default_name)
matplotlib.__init__._logged_cached(fmt,func=None)
matplotlib.__init__._open_file_or_url(fname)
matplotlib.__init__._parse_to_version_info(version_str)
matplotlib.__init__._preprocess_data(func=None,*,replace_names=None,label_namer=None)
matplotlib.__init__._rc_params_in_file(fname,transform=lambdax:x,fail_on_error=False)
matplotlib.__init__._replacer(data,value)
matplotlib.__init__.checkdep_usetex(s)
matplotlib.__init__.get_backend()
matplotlib.__init__.get_cachedir()
matplotlib.__init__.get_configdir()
matplotlib.__init__.get_data_path()
matplotlib.__init__.interactive(b)
matplotlib.__init__.is_interactive()
matplotlib.__init__.matplotlib_fname()
matplotlib.__init__.rc(group,**kwargs)
matplotlib.__init__.rc_context(rc=None,fname=None)
matplotlib.__init__.rc_file(fname,*,use_default_template=True)
matplotlib.__init__.rc_file_defaults()
matplotlib.__init__.rc_params(fail_on_error=False)
matplotlib.__init__.rc_params_from_file(fname,fail_on_error=False,use_default_template=True)
matplotlib.__init__.rcdefaults()
matplotlib.__init__.set_loglevel(level)
matplotlib.__init__.use(backend,*,force=True)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/lines.py----------------------------------------
A:matplotlib.lines._log->logging.getLogger(__name__)
A:matplotlib.lines.style->cbook.ls_mapper.get(style, style)
A:matplotlib.lines.dashes->tuple(mpl.rcParams['lines.{}_pattern'.format(style)])
A:matplotlib.lines.dsum->sum(dashes)
A:matplotlib.lines.(res,)->numpy.nonzero((cx - x) ** 2 + (cy - y) ** 2 <= radius ** 2)
A:matplotlib.lines.(points,)->point_hits.ravel().nonzero()
A:matplotlib.lines.(lines,)->line_hits.ravel().nonzero()
A:matplotlib.lines.fin->numpy.isfinite(verts).all(axis=1)
A:matplotlib.lines.disp_coords->affine.transform(fverts)
A:matplotlib.lines.delta->numpy.hypot(*delta.T).cumsum()
A:matplotlib.lines.((x0, y0), (x1, y1))->ax.transAxes.transform([[0, 0], [1, 1]])
A:matplotlib.lines.scale->numpy.hypot(x1 - x0, y1 - y0)
A:matplotlib.lines.marker_delta->numpy.arange(start * scale, delta[-1], step * scale)
A:matplotlib.lines.inds->numpy.unique(inds)
A:matplotlib.lines.self._marker->MarkerStyle(marker=other._marker)
A:matplotlib.lines.self._xorig->copy.copy(x)
A:matplotlib.lines.self._yorig->copy.copy(y)
A:matplotlib.lines.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.lines.transformed_path->self._get_transformed_path()
A:matplotlib.lines.(path, affine)->self._get_transformed_path().get_transformed_path_and_affine()
A:matplotlib.lines.path->affine.transform_path(path)
A:matplotlib.lines.(ind,)->numpy.nonzero((xt - mouseevent.x) ** 2 + (yt - mouseevent.y) ** 2 <= pixels ** 2)
A:matplotlib.lines.ind->sorted(self.ind)
A:matplotlib.lines.pickradius->property(get_pickradius, set_pickradius)
A:matplotlib.lines.bbox->bbox.padded(ms).padded(ms)
A:matplotlib.lines.xconv->self.convert_xunits(self._xorig)
A:matplotlib.lines.x->_to_unmasked_float_array(xconv).ravel()
A:matplotlib.lines.yconv->self.convert_yunits(self._yorig)
A:matplotlib.lines.y->_to_unmasked_float_array(yconv).ravel()
A:matplotlib.lines.self._xy->numpy.column_stack(np.broadcast_arrays(x, y)).astype(float)
A:matplotlib.lines.nanmask->numpy.isnan(x)
A:matplotlib.lines.self._x_filled->self._x.copy()
A:matplotlib.lines.indices->numpy.arange(len(x))
A:matplotlib.lines.self._x_filled[nanmask]->numpy.interp(indices[nanmask], indices[~nanmask], self._x[~nanmask])
A:matplotlib.lines.xy->STEP_LOOKUP_MAP[self._drawstyle](*self._xy[subslice, :].T)
A:matplotlib.lines.self._path->Path(np.asarray(xy).T, _interpolation_steps=interpolation_steps)
A:matplotlib.lines._path->Path(np.asarray(xy).T, _interpolation_steps=self._path._interpolation_steps)
A:matplotlib.lines.self._transformed_path->TransformedPath(_path, self.get_transform())
A:matplotlib.lines.(x0, x1)->self.axes.get_xbound()
A:matplotlib.lines.i0->self._x_filled.searchsorted(x0, 'left')
A:matplotlib.lines.i1->self._x_filled.searchsorted(x1, 'right')
A:matplotlib.lines.subslice->slice(max(i0 - 1, 0), i1 + 1)
A:matplotlib.lines.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.lines.(tpath, affine)->self._get_transformed_path().get_transformed_points_and_affine()
A:matplotlib.lines.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.lines.lc_rgba->mcolors.to_rgba(self._color, self._alpha)
A:matplotlib.lines.ec_rgba->mcolors.to_rgba(self.get_markeredgecolor(), self._alpha)
A:matplotlib.lines.fc_rgba->mcolors.to_rgba(self._get_markerfacecolor(), self._alpha)
A:matplotlib.lines.fcalt_rgba->mcolors.to_rgba(self._get_markerfacecolor(alt=True), self._alpha)
A:matplotlib.lines.(scale, length, randomness)->self.get_sketch_params()
A:matplotlib.lines.markevery->self.get_markevery()
A:matplotlib.lines.subsampled->_mark_every_path(markevery, tpath, affine, self.axes)
A:matplotlib.lines.snap->marker.get_snap_threshold()
A:matplotlib.lines.marker_path->marker.get_path()
A:matplotlib.lines.marker_trans->marker_trans.scale(w).scale(w)
A:matplotlib.lines.w->float(w)
A:matplotlib.lines.alt_marker_path->marker.get_alt_path()
A:matplotlib.lines.alt_marker_trans->alt_marker_trans.scale(w).scale(w)
A:matplotlib.lines.self._dash_pattern->_scale_dashes(*self._unscaled_dash_pattern, self._linewidth)
A:matplotlib.lines.self._unscaled_dash_pattern->_get_dash_pattern(ls)
A:matplotlib.lines.current->getattr(self, attr)
A:matplotlib.lines.sz->float(sz)
A:matplotlib.lines.js->JoinStyle(s)
A:matplotlib.lines.cs->CapStyle(s)
A:matplotlib.lines.((x1, y1), (x2, y2))->points_transform.transform([self._xy1, self._xy2])
A:matplotlib.lines.(x1, y1)->points_transform.transform(self._xy1)
A:matplotlib.lines.((vxlo, vylo), (vxhi, vyhi))->ax.transScale.transform(ax.viewLim)
A:matplotlib.lines.(_, start, stop, _)->sorted([(vxlo, y1 + (vxlo - x1) * slope), (vxhi, y1 + (vxhi - x1) * slope), (x1 + (vylo - y1) / slope, vylo), (x1 + (vyhi - y1) / slope, vyhi)])
A:matplotlib.lines.self.cid->self.canvas.callbacks._connect_picklable('pick_event', self.onpick)
A:matplotlib.lines.self.ind->set()
A:matplotlib.lines.canvas->property(lambda self: self.axes.figure.canvas)
A:matplotlib.lines.(xdata, ydata)->self.line.get_data()
matplotlib.lines.Line2D(self,xdata,ydata,linewidth=None,linestyle=None,color=None,gapcolor=None,marker=None,markersize=None,markeredgewidth=None,markeredgecolor=None,markerfacecolor=None,markerfacecoloralt='none',fillstyle=None,antialiased=None,dash_capstyle=None,solid_capstyle=None,dash_joinstyle=None,solid_joinstyle=None,pickradius=5,drawstyle=None,markevery=None,**kwargs)
matplotlib.lines.Line2D.__init__(self,xdata,ydata,linewidth=None,linestyle=None,color=None,gapcolor=None,marker=None,markersize=None,markeredgewidth=None,markeredgecolor=None,markerfacecolor=None,markerfacecoloralt='none',fillstyle=None,antialiased=None,dash_capstyle=None,solid_capstyle=None,dash_joinstyle=None,solid_joinstyle=None,pickradius=5,drawstyle=None,markevery=None,**kwargs)
matplotlib.lines.Line2D.__str__(self)
matplotlib.lines.Line2D._get_markerfacecolor(self,alt=False)
matplotlib.lines.Line2D._get_transformed_path(self)
matplotlib.lines.Line2D._set_markercolor(self,name,has_rcdefault,val)
matplotlib.lines.Line2D._transform_path(self,subslice=None)
matplotlib.lines.Line2D.contains(self,mouseevent)
matplotlib.lines.Line2D.draw(self,renderer)
matplotlib.lines.Line2D.get_antialiased(self)
matplotlib.lines.Line2D.get_bbox(self)
matplotlib.lines.Line2D.get_color(self)
matplotlib.lines.Line2D.get_dash_capstyle(self)
matplotlib.lines.Line2D.get_dash_joinstyle(self)
matplotlib.lines.Line2D.get_data(self,orig=True)
matplotlib.lines.Line2D.get_drawstyle(self)
matplotlib.lines.Line2D.get_fillstyle(self)
matplotlib.lines.Line2D.get_gapcolor(self)
matplotlib.lines.Line2D.get_linestyle(self)
matplotlib.lines.Line2D.get_linewidth(self)
matplotlib.lines.Line2D.get_marker(self)
matplotlib.lines.Line2D.get_markeredgecolor(self)
matplotlib.lines.Line2D.get_markeredgewidth(self)
matplotlib.lines.Line2D.get_markerfacecolor(self)
matplotlib.lines.Line2D.get_markerfacecoloralt(self)
matplotlib.lines.Line2D.get_markersize(self)
matplotlib.lines.Line2D.get_markevery(self)
matplotlib.lines.Line2D.get_path(self)
matplotlib.lines.Line2D.get_pickradius(self)
matplotlib.lines.Line2D.get_solid_capstyle(self)
matplotlib.lines.Line2D.get_solid_joinstyle(self)
matplotlib.lines.Line2D.get_window_extent(self,renderer=None)
matplotlib.lines.Line2D.get_xdata(self,orig=True)
matplotlib.lines.Line2D.get_xydata(self)
matplotlib.lines.Line2D.get_ydata(self,orig=True)
matplotlib.lines.Line2D.is_dashed(self)
matplotlib.lines.Line2D.recache(self,always=False)
matplotlib.lines.Line2D.recache_always(self)
matplotlib.lines.Line2D.set_antialiased(self,b)
matplotlib.lines.Line2D.set_color(self,color)
matplotlib.lines.Line2D.set_dash_capstyle(self,s)
matplotlib.lines.Line2D.set_dash_joinstyle(self,s)
matplotlib.lines.Line2D.set_dashes(self,seq)
matplotlib.lines.Line2D.set_data(self,*args)
matplotlib.lines.Line2D.set_drawstyle(self,drawstyle)
matplotlib.lines.Line2D.set_fillstyle(self,fs)
matplotlib.lines.Line2D.set_gapcolor(self,gapcolor)
matplotlib.lines.Line2D.set_linestyle(self,ls)
matplotlib.lines.Line2D.set_linewidth(self,w)
matplotlib.lines.Line2D.set_marker(self,marker)
matplotlib.lines.Line2D.set_markeredgecolor(self,ec)
matplotlib.lines.Line2D.set_markeredgewidth(self,ew)
matplotlib.lines.Line2D.set_markerfacecolor(self,fc)
matplotlib.lines.Line2D.set_markerfacecoloralt(self,fc)
matplotlib.lines.Line2D.set_markersize(self,sz)
matplotlib.lines.Line2D.set_markevery(self,every)
matplotlib.lines.Line2D.set_picker(self,p)
matplotlib.lines.Line2D.set_pickradius(self,pickradius)
matplotlib.lines.Line2D.set_solid_capstyle(self,s)
matplotlib.lines.Line2D.set_solid_joinstyle(self,s)
matplotlib.lines.Line2D.set_transform(self,t)
matplotlib.lines.Line2D.set_xdata(self,x)
matplotlib.lines.Line2D.set_ydata(self,y)
matplotlib.lines.Line2D.update_from(self,other)
matplotlib.lines.VertexSelector(self,line)
matplotlib.lines.VertexSelector.__init__(self,line)
matplotlib.lines.VertexSelector.onpick(self,event)
matplotlib.lines.VertexSelector.process_selected(self,ind,xs,ys)
matplotlib.lines._AxLine(self,xy1,xy2,slope,**kwargs)
matplotlib.lines._AxLine.__init__(self,xy1,xy2,slope,**kwargs)
matplotlib.lines._AxLine.draw(self,renderer)
matplotlib.lines._AxLine.get_transform(self)
matplotlib.lines._get_dash_pattern(style)
matplotlib.lines._mark_every_path(markevery,tpath,affine,ax)
matplotlib.lines._scale_dashes(offset,dashes,lw)
matplotlib.lines.segment_hits(cx,cy,x,y,radius)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/image.py----------------------------------------
A:matplotlib.image._log->logging.getLogger(__name__)
A:matplotlib.image.interpolations_names->set(_interpd_)
A:matplotlib.image.(data, x, y, trans)->PIL.Image.frombuffer('RGBA', pil_shape, rgba, 'raw', 'RGBA', 0, 1).make_image(renderer, magnification)
A:matplotlib.image.bbox->Bbox([[self.ox / fac, self.oy / fac], [self.ox / fac + self._A.shape[1], self.oy / fac + self._A.shape[0]]])
A:matplotlib.image.output->self.to_rgba(output, bytes=True, norm=False)
A:matplotlib.image.trans->self.get_transform().inverted()
A:matplotlib.image.has_images->any((isinstance(x, _ImageBase) for x in artists))
A:matplotlib.image.mag->self.get_figure()._get_renderer().get_image_magnification()
A:matplotlib.image.(data, l, b)->composite_images(image_group, renderer, mag)
A:matplotlib.image.gc->self.get_figure()._get_renderer().new_gc()
A:matplotlib.image.step->int(np.ceil(data.shape[0] / 2 ** 24))
A:matplotlib.image.interpolation->image_obj.get_interpolation()
A:matplotlib.image.pos->numpy.array([[0, 0], [data.shape[1], data.shape[0]]])
A:matplotlib.image.disp->transform.transform(pos)
A:matplotlib.image.dispx->numpy.abs(np.diff(disp[:, 0]))
A:matplotlib.image.dispy->numpy.abs(np.diff(disp[:, 1]))
A:matplotlib.image.out->numpy.zeros(out_shape + data.shape[2:], data.dtype)
A:matplotlib.image.resample->image_obj.get_resample()
A:matplotlib.image.rgba->matplotlib.cm.ScalarMappable(cmap=cmap).to_rgba(arr, bytes=True)
A:matplotlib.image.size->self.get_size()
A:matplotlib.image.clipped_bbox->matplotlib.transforms.Bbox.intersection(out_bbox, clip_bbox)
A:matplotlib.image.t0->IdentityTransform()
A:matplotlib.image.out_width->int(out_width_base)
A:matplotlib.image.out_height->int(out_height_base)
A:matplotlib.image.a_min->a_min.astype(scaled_dtype).item().astype(scaled_dtype).item()
A:matplotlib.image.a_max->a_max.astype(scaled_dtype).item().astype(scaled_dtype).item()
A:matplotlib.image.scaled_dtype->numpy.dtype(np.float64 if A.dtype.itemsize > 4 else np.float32)
A:matplotlib.image.A_scaled->numpy.array(A, dtype=scaled_dtype)
A:matplotlib.image.vrange->numpy.array([vmin, vmax], dtype=scaled_dtype)
A:matplotlib.image.A_resampled->A_resampled.astype(A.dtype).astype(A.dtype)
A:matplotlib.image.out_alpha->_resample(self, mask, out_shape, t, resample=True)
A:matplotlib.image.out_mask->numpy.isnan(out_alpha)
A:matplotlib.image.alpha->self._get_scalar_alpha()
A:matplotlib.image.resampled_masked->numpy.ma.masked_array(A_resampled, out_mask)
A:matplotlib.image.A->A.squeeze(axis=-1).squeeze(axis=-1)
A:matplotlib.image.output_alpha->_resample(self, A[..., 3], out_shape, t, alpha=alpha)
A:matplotlib.image.self._imcache->numpy.pad(A, [(1, 1), (1, 1), (0, 0)], 'constant')
A:matplotlib.image.subset->TransformedBbox(clip_bbox, t0.inverted()).frozen()
A:matplotlib.image.(im, l, b, trans)->self.make_image(renderer, renderer.get_image_magnification())
A:matplotlib.image.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.image.(x, y)->self.get_transform().inverted().transform([mouseevent.x, mouseevent.y])
A:matplotlib.image.(xmin, xmax, ymin, ymax)->self.get_extent()
A:matplotlib.image.im->imread(infile)
A:matplotlib.image.self._A->self._A.astype(np.uint8)
A:matplotlib.image.s->s.lower().lower()
A:matplotlib.image.self._filternorm->bool(filternorm)
A:matplotlib.image.r->float(filterrad)
A:matplotlib.image.(x1, x2, y1, y2)->self.get_extent()
A:matplotlib.image.transformed_bbox->TransformedBbox(bbox, trans)
A:matplotlib.image.((xmin, xmax), (ymin, ymax))->self.axes._process_unit_info([('x', [extent[0], extent[1]]), ('y', [extent[2], extent[3]])], kwargs)
A:matplotlib.image.xmin->self.axes._validate_converted_limits(xmin, self.convert_xunits)
A:matplotlib.image.xmax->self.axes._validate_converted_limits(xmax, self.convert_xunits)
A:matplotlib.image.ymin->self.axes._validate_converted_limits(ymin, self.convert_yunits)
A:matplotlib.image.ymax->self.axes._validate_converted_limits(ymax, self.convert_yunits)
A:matplotlib.image.sz->self.get_size()
A:matplotlib.image.arr->self.get_array()
A:matplotlib.image.data_extent->Bbox([[xmin, ymin], [xmax, ymax]])
A:matplotlib.image.array_extent->Bbox([[0, 0], [arr.shape[1], arr.shape[0]]])
A:matplotlib.image.point->self.get_transform().inverted().transform([event.x, event.y])
A:matplotlib.image.(j, i)->self.get_transform().inverted().transform([event.x, event.y]).astype(int)
A:matplotlib.image.B->numpy.zeros(tuple([*A.shape[0:2], 4]), np.uint8)
A:matplotlib.image.width->round(width * magnification)
A:matplotlib.image.height->round(height * magnification)
A:matplotlib.image.x_pix->numpy.linspace(vl.x0, vl.x1, width)
A:matplotlib.image.y_pix->numpy.linspace(vl.y0, vl.y1, height)
A:matplotlib.image.x_int->self._Ax.searchsorted(x_pix)
A:matplotlib.image.y_int->self._Ay.searchsorted(y_pix)
A:matplotlib.image.idx_int->numpy.add.outer(y_int * A.shape[1], x_int)
A:matplotlib.image.x_frac->numpy.clip(np.divide(x_pix - self._Ax[x_int], np.diff(self._Ax)[x_int], dtype=np.float32), 0, 1)
A:matplotlib.image.y_frac->numpy.clip(np.divide(y_pix - self._Ay[y_int], np.diff(self._Ay)[y_int], dtype=np.float32), 0, 1)
A:matplotlib.image.f00->numpy.outer(1 - y_frac, 1 - x_frac)
A:matplotlib.image.f10->numpy.outer(y_frac, 1 - x_frac)
A:matplotlib.image.f01->numpy.outer(1 - y_frac, x_frac)
A:matplotlib.image.f11->numpy.outer(y_frac, x_frac)
A:matplotlib.image.ac->A[:, :, chan].reshape(-1)
A:matplotlib.image.x->numpy.frombuffer(raw, '<u2')
A:matplotlib.image.y->numpy.array(y, np.float64).ravel()
A:matplotlib.image.bg->(np.array(bg) * 255).astype(np.uint8)
A:matplotlib.image.(numrows, numcols)->self.get_size()
A:matplotlib.image.(width, height)->self.get_figure()._get_renderer().get_canvas_width_height()
A:matplotlib.image.clip->Bbox([[0, 0], [width, height]])
A:matplotlib.image.renderer->self.get_figure()._get_renderer()
A:matplotlib.image.inside->self.get_window_extent().contains(x, y)
A:matplotlib.image.bbox_in->self.get_window_extent(renderer).frozen()
A:matplotlib.image.bbox_out->self.get_window_extent(renderer)
A:matplotlib.image.self._transform->BboxTransformTo(clip)
A:matplotlib.image.parsed->urllib.parse.urlparse(fname)
A:matplotlib.image.fname->os.fspath(fname)
A:matplotlib.image.format->(Path(fname).suffix[1:] if isinstance(fname, str) else mpl.rcParams['savefig.format']).lower()
A:matplotlib.image.fig->Figure(figsize=(width, height), dpi=dpi)
A:matplotlib.image.sm->matplotlib.cm.ScalarMappable(cmap=cmap)
A:matplotlib.image.pil_kwargs->pil_kwargs.copy().copy()
A:matplotlib.image.image->PIL.Image.frombuffer('RGBA', pil_shape, rgba, 'raw', 'RGBA', 0, 1)
A:matplotlib.image.pil_kwargs['pnginfo']pnginfo->PIL.PngImagePlugin.PngInfo()
A:matplotlib.image.color->tuple((int(x * 255) for x in mcolors.to_rgb(facecolor)))
A:matplotlib.image.background->PIL.Image.new('RGB', pil_shape, color)
A:matplotlib.image.raw->pilImage.convert('RGBA').tobytes('raw', pilImage.mode)
A:matplotlib.image.pilImage->pilImage.convert('RGBA').convert('RGBA')
A:matplotlib.image.ax->Figure(figsize=(width, height), dpi=dpi).add_axes([0, 0, 1, 1], aspect='auto', frameon=False, xticks=[], yticks=[])
matplotlib.image.AxesImage(self,ax,cmap=None,norm=None,interpolation=None,origin=None,extent=None,filternorm=True,filterrad=4.0,resample=False,*,interpolation_stage=None,**kwargs)
matplotlib.image.AxesImage.__init__(self,ax,cmap=None,norm=None,interpolation=None,origin=None,extent=None,filternorm=True,filterrad=4.0,resample=False,*,interpolation_stage=None,**kwargs)
matplotlib.image.AxesImage._check_unsampled_image(self)
matplotlib.image.AxesImage.get_cursor_data(self,event)
matplotlib.image.AxesImage.get_extent(self)
matplotlib.image.AxesImage.get_window_extent(self,renderer=None)
matplotlib.image.AxesImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.AxesImage.set_extent(self,extent,**kwargs)
matplotlib.image.BboxImage(self,bbox,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,**kwargs)
matplotlib.image.BboxImage.__init__(self,bbox,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,**kwargs)
matplotlib.image.BboxImage.contains(self,mouseevent)
matplotlib.image.BboxImage.get_window_extent(self,renderer=None)
matplotlib.image.BboxImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.FigureImage(self,fig,cmap=None,norm=None,offsetx=0,offsety=0,origin=None,**kwargs)
matplotlib.image.FigureImage.__init__(self,fig,cmap=None,norm=None,offsetx=0,offsety=0,origin=None,**kwargs)
matplotlib.image.FigureImage.get_extent(self)
matplotlib.image.FigureImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.FigureImage.set_data(self,A)
matplotlib.image.NonUniformImage(self,ax,*,interpolation='nearest',**kwargs)
matplotlib.image.NonUniformImage.__init__(self,ax,*,interpolation='nearest',**kwargs)
matplotlib.image.NonUniformImage._check_unsampled_image(self)
matplotlib.image.NonUniformImage.get_extent(self)
matplotlib.image.NonUniformImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.NonUniformImage.set_array(self,*args)
matplotlib.image.NonUniformImage.set_cmap(self,cmap)
matplotlib.image.NonUniformImage.set_data(self,x,y,A)
matplotlib.image.NonUniformImage.set_filternorm(self,s)
matplotlib.image.NonUniformImage.set_filterrad(self,s)
matplotlib.image.NonUniformImage.set_interpolation(self,s)
matplotlib.image.NonUniformImage.set_norm(self,norm)
matplotlib.image.PcolorImage(self,ax,x=None,y=None,A=None,cmap=None,norm=None,**kwargs)
matplotlib.image.PcolorImage.__init__(self,ax,x=None,y=None,A=None,cmap=None,norm=None,**kwargs)
matplotlib.image.PcolorImage._check_unsampled_image(self)
matplotlib.image.PcolorImage.get_cursor_data(self,event)
matplotlib.image.PcolorImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.PcolorImage.set_array(self,*args)
matplotlib.image.PcolorImage.set_data(self,x,y,A)
matplotlib.image._ImageBase(self,ax,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,*,interpolation_stage=None,**kwargs)
matplotlib.image._ImageBase.__getstate__(self)
matplotlib.image._ImageBase.__init__(self,ax,cmap=None,norm=None,interpolation=None,origin=None,filternorm=True,filterrad=4.0,resample=False,*,interpolation_stage=None,**kwargs)
matplotlib.image._ImageBase.__str__(self)
matplotlib.image._ImageBase._check_unsampled_image(self)
matplotlib.image._ImageBase._get_scalar_alpha(self)
matplotlib.image._ImageBase._make_image(self,A,in_bbox,out_bbox,clip_bbox,magnification=1.0,unsampled=False,round_to_pixel_border=True)
matplotlib.image._ImageBase.can_composite(self)
matplotlib.image._ImageBase.changed(self)
matplotlib.image._ImageBase.contains(self,mouseevent)
matplotlib.image._ImageBase.draw(self,renderer,*args,**kwargs)
matplotlib.image._ImageBase.get_filternorm(self)
matplotlib.image._ImageBase.get_filterrad(self)
matplotlib.image._ImageBase.get_interpolation(self)
matplotlib.image._ImageBase.get_resample(self)
matplotlib.image._ImageBase.get_size(self)
matplotlib.image._ImageBase.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image._ImageBase.set_alpha(self,alpha)
matplotlib.image._ImageBase.set_array(self,A)
matplotlib.image._ImageBase.set_data(self,A)
matplotlib.image._ImageBase.set_filternorm(self,filternorm)
matplotlib.image._ImageBase.set_filterrad(self,filterrad)
matplotlib.image._ImageBase.set_interpolation(self,s)
matplotlib.image._ImageBase.set_interpolation_stage(self,s)
matplotlib.image._ImageBase.set_resample(self,v)
matplotlib.image._ImageBase.write_png(self,fname)
matplotlib.image._draw_list_compositing_images(renderer,parent,artists,suppress_composite=None)
matplotlib.image._pil_png_to_float_array(pil_png)
matplotlib.image._resample(image_obj,data,out_shape,transform,*,resample=None,alpha=1)
matplotlib.image._rgb_to_rgba(A)
matplotlib.image.composite_images(images,renderer,magnification=1.0)
matplotlib.image.imread(fname,format=None)
matplotlib.image.imsave(fname,arr,vmin=None,vmax=None,cmap=None,format=None,origin=None,dpi=100,*,metadata=None,pil_kwargs=None)
matplotlib.image.pil_to_array(pilImage)
matplotlib.image.thumbnail(infile,thumbfile,scale=0.1,interpolation='bilinear',preview=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_enums.py----------------------------------------
A:matplotlib._enums.miter->auto()
A:matplotlib._enums.round->auto()
A:matplotlib._enums.bevel->auto()
A:matplotlib._enums.phi->numpy.radians(angle)
A:matplotlib._enums.(fig, ax)->matplotlib.pyplot.subplots(figsize=(5, 4), constrained_layout=True)
A:matplotlib._enums.butt->auto()
A:matplotlib._enums.projecting->auto()
A:matplotlib._enums.fig->matplotlib.pyplot.figure(figsize=(4, 1.2))
A:matplotlib._enums.ax->matplotlib.pyplot.figure(figsize=(4, 1.2)).add_axes([0, 0, 1, 0.8])
matplotlib._enums.CapStyle(str,_AutoStringNameEnum)
matplotlib._enums.CapStyle.demo()
matplotlib._enums.JoinStyle(str,_AutoStringNameEnum)
matplotlib._enums.JoinStyle.demo()
matplotlib._enums._AutoStringNameEnum(Enum)
matplotlib._enums._AutoStringNameEnum.__hash__(self)
matplotlib._enums._AutoStringNameEnum._generate_next_value_(name,start,count,last_values)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/cm.py----------------------------------------
A:matplotlib.cm.rmap->_colormaps.get(name, None).reversed()
A:matplotlib.cm.self._builtin_cmaps->tuple(cmaps)
A:matplotlib.cm.self._cmaps[name]->_colormaps.get(name, None).copy()
A:matplotlib.cm._colormaps->ColormapRegistry(_gen_cmap_registry())
A:matplotlib.cm.get_cmap->matplotlib._api.deprecated('3.7', name='get_cmap', alternative='``matplotlib.colormaps[name]`` ' + 'or ``matplotlib.colormaps.get_cmap(obj)``')(_get_cmap)
A:matplotlib.cm.cmap->ColormapRegistry(_gen_cmap_registry()).get(name, None)
A:matplotlib.cm.norm->_auto_norm_from_scale(scale_cls)()
A:matplotlib.cm.self.callbacks->matplotlib.cbook.CallbackRegistry(signals=['changed'])
A:matplotlib.cm.alpha->numpy.uint8(alpha * 255)
A:matplotlib.cm.xx->(xx * 255).astype(np.uint8)
A:matplotlib.cm.x->self.norm(x)
A:matplotlib.cm.rgba->self.cmap(x, alpha=alpha, bytes=bytes)
A:matplotlib.cm.A->matplotlib.cbook.safe_masked_invalid(A, copy=True)
A:matplotlib.cm.self.norm.vmin->matplotlib.colors._sanitize_extrema(vmin)
A:matplotlib.cm.self.norm.vmax->matplotlib.colors._sanitize_extrema(vmax)
A:matplotlib.cm.self.cmap->_ensure_cmap(cmap)
A:matplotlib.cm.self._id_norm->self.norm.callbacks.connect('changed', self.changed)
matplotlib.cm.ColormapRegistry(self,cmaps)
matplotlib.cm.ColormapRegistry.__getitem__(self,item)
matplotlib.cm.ColormapRegistry.__init__(self,cmaps)
matplotlib.cm.ColormapRegistry.__iter__(self)
matplotlib.cm.ColormapRegistry.__len__(self)
matplotlib.cm.ColormapRegistry.__str__(self)
matplotlib.cm.ColormapRegistry.get_cmap(self,cmap)
matplotlib.cm.ColormapRegistry.register(self,cmap,*,name=None,force=False)
matplotlib.cm.ColormapRegistry.unregister(self,name)
matplotlib.cm.ScalarMappable(self,norm=None,cmap=None)
matplotlib.cm.ScalarMappable.__init__(self,norm=None,cmap=None)
matplotlib.cm.ScalarMappable._scale_norm(self,norm,vmin,vmax)
matplotlib.cm.ScalarMappable.autoscale(self)
matplotlib.cm.ScalarMappable.autoscale_None(self)
matplotlib.cm.ScalarMappable.changed(self)
matplotlib.cm.ScalarMappable.get_alpha(self)
matplotlib.cm.ScalarMappable.get_array(self)
matplotlib.cm.ScalarMappable.get_clim(self)
matplotlib.cm.ScalarMappable.get_cmap(self)
matplotlib.cm.ScalarMappable.norm(self)
matplotlib.cm.ScalarMappable.norm(self,norm)
matplotlib.cm.ScalarMappable.set_array(self,A)
matplotlib.cm.ScalarMappable.set_clim(self,vmin=None,vmax=None)
matplotlib.cm.ScalarMappable.set_cmap(self,cmap)
matplotlib.cm.ScalarMappable.set_norm(self,norm)
matplotlib.cm.ScalarMappable.to_rgba(self,x,alpha=None,bytes=False,norm=True)
matplotlib.cm._auto_norm_from_scale(scale_cls)
matplotlib.cm._ensure_cmap(cmap)
matplotlib.cm._gen_cmap_registry()
matplotlib.cm._get_cmap(name=None,lut=None)
matplotlib.cm.register_cmap(name=None,cmap=None,*,override_builtin=False)
matplotlib.cm.unregister_cmap(name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/type1font.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_cm.py----------------------------------------
A:matplotlib._cm._cubehelix_data->cubehelix()
A:matplotlib._cm.ret->numpy.zeros(len(x))
matplotlib._cm._ch_helper(gamma,s,r,h,p0,p1,x)
matplotlib._cm._flag_blue(x)
matplotlib._cm._flag_green(x)
matplotlib._cm._flag_red(x)
matplotlib._cm._g0(x)
matplotlib._cm._g1(x)
matplotlib._cm._g10(x)
matplotlib._cm._g11(x)
matplotlib._cm._g12(x)
matplotlib._cm._g13(x)
matplotlib._cm._g14(x)
matplotlib._cm._g15(x)
matplotlib._cm._g16(x)
matplotlib._cm._g17(x)
matplotlib._cm._g18(x)
matplotlib._cm._g19(x)
matplotlib._cm._g2(x)
matplotlib._cm._g20(x)
matplotlib._cm._g21(x)
matplotlib._cm._g22(x)
matplotlib._cm._g23(x)
matplotlib._cm._g24(x)
matplotlib._cm._g25(x)
matplotlib._cm._g26(x)
matplotlib._cm._g27(x)
matplotlib._cm._g28(x)
matplotlib._cm._g29(x)
matplotlib._cm._g3(x)
matplotlib._cm._g30(x)
matplotlib._cm._g31(x)
matplotlib._cm._g32(x)
matplotlib._cm._g33(x)
matplotlib._cm._g34(x)
matplotlib._cm._g35(x)
matplotlib._cm._g36(x)
matplotlib._cm._g4(x)
matplotlib._cm._g5(x)
matplotlib._cm._g6(x)
matplotlib._cm._g7(x)
matplotlib._cm._g8(x)
matplotlib._cm._g9(x)
matplotlib._cm._gist_heat_blue(x)
matplotlib._cm._gist_heat_green(x)
matplotlib._cm._gist_heat_red(x)
matplotlib._cm._gist_yarg(x)
matplotlib._cm._prism_blue(x)
matplotlib._cm._prism_green(x)
matplotlib._cm._prism_red(x)
matplotlib._cm.cubehelix(gamma=1.0,s=0.5,r=-1.5,h=1.0)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_cm_listed.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backend_tools.py----------------------------------------
A:matplotlib.backend_tools.POINTER->enum.auto()
A:matplotlib.backend_tools.HAND->enum.auto()
A:matplotlib.backend_tools.SELECT_REGION->enum.auto()
A:matplotlib.backend_tools.MOVE->enum.auto()
A:matplotlib.backend_tools.WAIT->enum.auto()
A:matplotlib.backend_tools.RESIZE_HORIZONTAL->enum.auto()
A:matplotlib.backend_tools.RESIZE_VERTICAL->enum.auto()
A:matplotlib.backend_tools._tool_registry->set()
A:matplotlib.backend_tools.name->property(lambda self: self._name, doc='The tool id (str, must be unique among tools of a tool manager).')
A:matplotlib.backend_tools.toolmanager->property(lambda self: self._toolmanager, doc='The `.ToolManager` that controls this tool.')
A:matplotlib.backend_tools.canvas->property(lambda self: self._figure.canvas if self._figure is not None else None, doc='The canvas of the figure affected by this tool, or None.')
A:matplotlib.backend_tools.self._toggled->kwargs.pop('toggled', self.default_toggled)
A:matplotlib.backend_tools.self._id_drag->self.figure.canvas.mpl_connect('motion_notify_event', self._mouse_move)
A:matplotlib.backend_tools.message->matplotlib.backend_bases.NavigationToolbar2._mouse_event_to_message(event)
A:matplotlib.backend_tools.default_keymap->property(lambda self: mpl.rcParams['keymap.copy'])
A:matplotlib.backend_tools.sentinel->str(uuid.uuid4())
A:matplotlib.backend_tools.self.views->WeakKeyDictionary()
A:matplotlib.backend_tools.self.positions->WeakKeyDictionary()
A:matplotlib.backend_tools.self.home_views->WeakKeyDictionary()
A:matplotlib.backend_tools.self.views[figure]->matplotlib.cbook.Stack()
A:matplotlib.backend_tools.self.positions[figure]->matplotlib.cbook.Stack()
A:matplotlib.backend_tools.self.home_views[figure]->WeakKeyDictionary()
A:matplotlib.backend_tools.views->WeakKeyDictionary()
A:matplotlib.backend_tools.pos->WeakKeyDictionary()
A:matplotlib.backend_tools.all_axes->self.figure.get_axes()
A:matplotlib.backend_tools.views[a]->a._get_view()
A:matplotlib.backend_tools.pos[a]->self._axes_pos(a)
A:matplotlib.backend_tools.self.home_views[figure][a]->a._get_view()
A:matplotlib.backend_tools.self._idPress->self.figure.canvas.mpl_connect('button_press_event', self._press)
A:matplotlib.backend_tools.self._idRelease->self.figure.canvas.mpl_connect('button_release_event', self._release)
A:matplotlib.backend_tools.self._idScroll->self.figure.canvas.mpl_connect('scroll_event', self.scroll_zoom)
A:matplotlib.backend_tools.self.lastscroll->time.time()
A:matplotlib.backend_tools.id1->self.figure.canvas.mpl_connect('motion_notify_event', self._mouse_move)
A:matplotlib.backend_tools.id2->self.figure.canvas.mpl_connect('key_press_event', self._switch_on_zoom_mode)
A:matplotlib.backend_tools.id3->self.figure.canvas.mpl_connect('key_release_event', self._switch_off_zoom_mode)
A:matplotlib.backend_tools.((x1, y1), (x2, y2))->numpy.clip([[lastx, lasty], [x, y]], a.bbox.min, a.bbox.max)
A:matplotlib.backend_tools.twinx->any((a.get_shared_x_axes().joined(a, a1) for a1 in done_ax))
A:matplotlib.backend_tools.twiny->any((a.get_shared_y_axes().joined(a, a1) for a1 in done_ax))
A:matplotlib.backend_tools.keymaps->self.toolmanager.get_tool_keymap(name)
A:matplotlib.backend_tools.entries->self._get_help_entries()
matplotlib.backend_tools.AxisScaleBase(ToolToggleBase)
matplotlib.backend_tools.AxisScaleBase.disable(self,event=None)
matplotlib.backend_tools.AxisScaleBase.enable(self,event=None)
matplotlib.backend_tools.AxisScaleBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ConfigureSubplotsBase(ToolBase)
matplotlib.backend_tools.Cursors(enum.IntEnum)
matplotlib.backend_tools.RubberbandBase(ToolBase)
matplotlib.backend_tools.RubberbandBase.draw_rubberband(self,*data)
matplotlib.backend_tools.RubberbandBase.remove_rubberband(self)
matplotlib.backend_tools.RubberbandBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.SaveFigureBase(ToolBase)
matplotlib.backend_tools.ToolBack(ViewsPositionsBase)
matplotlib.backend_tools.ToolBase(self,toolmanager,name)
matplotlib.backend_tools.ToolBase.__init__(self,toolmanager,name)
matplotlib.backend_tools.ToolBase._make_classic_style_pseudo_toolbar(self)
matplotlib.backend_tools.ToolBase.destroy(self)
matplotlib.backend_tools.ToolBase.figure(self)
matplotlib.backend_tools.ToolBase.figure(self,figure)
matplotlib.backend_tools.ToolBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolCopyToClipboardBase(ToolBase)
matplotlib.backend_tools.ToolCopyToClipboardBase.trigger(self,*args,**kwargs)
matplotlib.backend_tools.ToolCursorPosition(self,*args,**kwargs)
matplotlib.backend_tools.ToolCursorPosition.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolCursorPosition.send_message(self,event)
matplotlib.backend_tools.ToolCursorPosition.set_figure(self,figure)
matplotlib.backend_tools.ToolForward(ViewsPositionsBase)
matplotlib.backend_tools.ToolFullScreen(ToolBase)
matplotlib.backend_tools.ToolFullScreen.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolGrid(ToolBase)
matplotlib.backend_tools.ToolGrid.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolHelpBase(ToolBase)
matplotlib.backend_tools.ToolHelpBase._format_tool_keymap(self,name)
matplotlib.backend_tools.ToolHelpBase._get_help_entries(self)
matplotlib.backend_tools.ToolHelpBase._get_help_html(self)
matplotlib.backend_tools.ToolHelpBase._get_help_text(self)
matplotlib.backend_tools.ToolHelpBase.format_shortcut(key_sequence)
matplotlib.backend_tools.ToolHome(ViewsPositionsBase)
matplotlib.backend_tools.ToolMinorGrid(ToolBase)
matplotlib.backend_tools.ToolMinorGrid.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolPan(self,*args)
matplotlib.backend_tools.ToolPan.__init__(self,*args)
matplotlib.backend_tools.ToolPan._cancel_action(self)
matplotlib.backend_tools.ToolPan._mouse_move(self,event)
matplotlib.backend_tools.ToolPan._press(self,event)
matplotlib.backend_tools.ToolPan._release(self,event)
matplotlib.backend_tools.ToolQuit(ToolBase)
matplotlib.backend_tools.ToolQuit.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolQuitAll(ToolBase)
matplotlib.backend_tools.ToolQuitAll.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolSetCursor(self,*args,**kwargs)
matplotlib.backend_tools.ToolSetCursor.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolSetCursor._add_tool(self,tool)
matplotlib.backend_tools.ToolSetCursor._add_tool_cbk(self,event)
matplotlib.backend_tools.ToolSetCursor._set_cursor_cbk(self,event)
matplotlib.backend_tools.ToolSetCursor._tool_trigger_cbk(self,event)
matplotlib.backend_tools.ToolSetCursor.set_figure(self,figure)
matplotlib.backend_tools.ToolToggleBase(self,*args,**kwargs)
matplotlib.backend_tools.ToolToggleBase.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolToggleBase.disable(self,event=None)
matplotlib.backend_tools.ToolToggleBase.enable(self,event=None)
matplotlib.backend_tools.ToolToggleBase.set_figure(self,figure)
matplotlib.backend_tools.ToolToggleBase.toggled(self)
matplotlib.backend_tools.ToolToggleBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolViewsPositions(self,*args,**kwargs)
matplotlib.backend_tools.ToolViewsPositions.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolViewsPositions._axes_pos(self,ax)
matplotlib.backend_tools.ToolViewsPositions.add_figure(self,figure)
matplotlib.backend_tools.ToolViewsPositions.back(self)
matplotlib.backend_tools.ToolViewsPositions.clear(self,figure)
matplotlib.backend_tools.ToolViewsPositions.forward(self)
matplotlib.backend_tools.ToolViewsPositions.home(self)
matplotlib.backend_tools.ToolViewsPositions.push_current(self,figure=None)
matplotlib.backend_tools.ToolViewsPositions.update_home_views(self,figure=None)
matplotlib.backend_tools.ToolViewsPositions.update_view(self)
matplotlib.backend_tools.ToolXScale(AxisScaleBase)
matplotlib.backend_tools.ToolXScale.set_scale(self,ax,scale)
matplotlib.backend_tools.ToolYScale(AxisScaleBase)
matplotlib.backend_tools.ToolYScale.set_scale(self,ax,scale)
matplotlib.backend_tools.ToolZoom(self,*args)
matplotlib.backend_tools.ToolZoom.__init__(self,*args)
matplotlib.backend_tools.ToolZoom._cancel_action(self)
matplotlib.backend_tools.ToolZoom._mouse_move(self,event)
matplotlib.backend_tools.ToolZoom._press(self,event)
matplotlib.backend_tools.ToolZoom._release(self,event)
matplotlib.backend_tools.ToolZoom._switch_off_zoom_mode(self,event)
matplotlib.backend_tools.ToolZoom._switch_on_zoom_mode(self,event)
matplotlib.backend_tools.ViewsPositionsBase(ToolBase)
matplotlib.backend_tools.ViewsPositionsBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ZoomPanBase(self,*args)
matplotlib.backend_tools.ZoomPanBase.__init__(self,*args)
matplotlib.backend_tools.ZoomPanBase.disable(self,event=None)
matplotlib.backend_tools.ZoomPanBase.enable(self,event=None)
matplotlib.backend_tools.ZoomPanBase.scroll_zoom(self,event)
matplotlib.backend_tools.ZoomPanBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools._find_tool_class(canvas_cls,tool_cls)
matplotlib.backend_tools._register_tool_class(canvas_cls,tool_cls=None)
matplotlib.backend_tools.add_tools_to_container(container,tools=default_toolbar_tools)
matplotlib.backend_tools.add_tools_to_manager(toolmanager,tools=default_tools)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/gridspec.py----------------------------------------
A:matplotlib.gridspec._log->logging.getLogger(__name__)
A:matplotlib.gridspec.nrows->property(lambda self: self._nrows, doc='The number of rows in the grid.')
A:matplotlib.gridspec.ncols->property(lambda self: self._ncols, doc='The number of columns in the grid.')
A:matplotlib.gridspec.(nrows, ncols)->self.get_gridspec().get_geometry()
A:matplotlib.gridspec.subplot_params->self.get_subplot_params(fig)
A:matplotlib.gridspec.cell_hs->numpy.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
A:matplotlib.gridspec.cell_ws->numpy.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
A:matplotlib.gridspec.gs->GridSpec(rows, cols, figure=figure)
A:matplotlib.gridspec.(start, stop, _)->key.indices(size)
A:matplotlib.gridspec.(num1, num2)->_normalize(key, nrows * ncols, None)
A:matplotlib.gridspec.subplot_kw->subplot_kw.copy().copy()
A:matplotlib.gridspec.axarr->numpy.empty((self._nrows, self._ncols), dtype=object)
A:matplotlib.gridspec.axarr[row, col]->figure.add_subplot(self[row, col], **subplot_kw)
A:matplotlib.gridspec.ss->ax.get_subplotspec().get_topmost_subplotspec()
A:matplotlib.gridspec.subplotpars->copy.copy(figure.subplotpars)
A:matplotlib.gridspec.renderer->figure._get_renderer()
A:matplotlib.gridspec.kwargs->matplotlib._tight_layout.get_tight_layout_figure(figure, figure.axes, _tight_layout.get_subplotspec_list(figure.axes, grid_spec=self), renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
A:matplotlib.gridspec.figbox->self._subplot_spec.get_position(figure)
A:matplotlib.gridspec.(rows, cols, num)->map(int, str(arg))
A:matplotlib.gridspec.(rows, cols)->numpy.unravel_index([self.num1, self.num2], (nrows, ncols))
A:matplotlib.gridspec.(c1, c2)->sorted([self.num1 % ncols, self.num2 % ncols])
A:matplotlib.gridspec.gridspec->self.get_gridspec()
A:matplotlib.gridspec.(fig_bottoms, fig_tops, fig_lefts, fig_rights)->self.get_gridspec().get_grid_positions(figure)
A:matplotlib.gridspec.fig_bottom->fig_bottoms[rows].min()
A:matplotlib.gridspec.fig_top->fig_tops[rows].max()
A:matplotlib.gridspec.fig_left->fig_lefts[cols].min()
A:matplotlib.gridspec.fig_right->fig_rights[cols].max()
matplotlib.gridspec.GridSpec(self,nrows,ncols,figure=None,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None,width_ratios=None,height_ratios=None)
matplotlib.gridspec.GridSpec.__init__(self,nrows,ncols,figure=None,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None,width_ratios=None,height_ratios=None)
matplotlib.gridspec.GridSpec.get_subplot_params(self,figure=None)
matplotlib.gridspec.GridSpec.locally_modified_subplot_params(self)
matplotlib.gridspec.GridSpec.tight_layout(self,figure,renderer=None,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.gridspec.GridSpec.update(self,**kwargs)
matplotlib.gridspec.GridSpecBase(self,nrows,ncols,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecBase.__getitem__(self,key)
matplotlib.gridspec.GridSpecBase.__init__(self,nrows,ncols,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecBase.__repr__(self)
matplotlib.gridspec.GridSpecBase._check_gridspec_exists(figure,nrows,ncols)
matplotlib.gridspec.GridSpecBase.get_geometry(self)
matplotlib.gridspec.GridSpecBase.get_grid_positions(self,fig,raw=False)
matplotlib.gridspec.GridSpecBase.get_height_ratios(self)
matplotlib.gridspec.GridSpecBase.get_subplot_params(self,figure=None)
matplotlib.gridspec.GridSpecBase.get_width_ratios(self)
matplotlib.gridspec.GridSpecBase.new_subplotspec(self,loc,rowspan=1,colspan=1)
matplotlib.gridspec.GridSpecBase.set_height_ratios(self,height_ratios)
matplotlib.gridspec.GridSpecBase.set_width_ratios(self,width_ratios)
matplotlib.gridspec.GridSpecBase.subplots(self,*,sharex=False,sharey=False,squeeze=True,subplot_kw=None)
matplotlib.gridspec.GridSpecFromSubplotSpec(self,nrows,ncols,subplot_spec,wspace=None,hspace=None,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.__init__(self,nrows,ncols,subplot_spec,wspace=None,hspace=None,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.get_subplot_params(self,figure=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.get_topmost_subplotspec(self)
matplotlib.gridspec.SubplotSpec(self,gridspec,num1,num2=None)
matplotlib.gridspec.SubplotSpec.__eq__(self,other)
matplotlib.gridspec.SubplotSpec.__hash__(self)
matplotlib.gridspec.SubplotSpec.__init__(self,gridspec,num1,num2=None)
matplotlib.gridspec.SubplotSpec.__repr__(self)
matplotlib.gridspec.SubplotSpec._from_subplot_args(figure,args)
matplotlib.gridspec.SubplotSpec.colspan(self)
matplotlib.gridspec.SubplotSpec.get_geometry(self)
matplotlib.gridspec.SubplotSpec.get_gridspec(self)
matplotlib.gridspec.SubplotSpec.get_position(self,figure)
matplotlib.gridspec.SubplotSpec.get_topmost_subplotspec(self)
matplotlib.gridspec.SubplotSpec.is_first_col(self)
matplotlib.gridspec.SubplotSpec.is_first_row(self)
matplotlib.gridspec.SubplotSpec.is_last_col(self)
matplotlib.gridspec.SubplotSpec.is_last_row(self)
matplotlib.gridspec.SubplotSpec.num2(self)
matplotlib.gridspec.SubplotSpec.num2(self,value)
matplotlib.gridspec.SubplotSpec.rowspan(self)
matplotlib.gridspec.SubplotSpec.subgridspec(self,nrows,ncols,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/dates.py----------------------------------------
A:matplotlib.dates._log->logging.getLogger(__name__)
A:matplotlib.dates.JULIAN_OFFSET->matplotlib._api.deprecated('3.7')(property(lambda self: 1721424.5))
A:matplotlib.dates.tzinfo->dateutil.tz.gettz(tz)
A:matplotlib.dates.EPOCH_OFFSET->float(datetime.datetime(1970, 1, 1).toordinal())
A:matplotlib.dates.dseconds->_dt64_to_ordinalf(d).astype('datetime64[s]')
A:matplotlib.dates.extra->(d - dseconds).astype('timedelta64[ns]')
A:matplotlib.dates.t0->numpy.floor(nmin)
A:matplotlib.dates.dt->f(*args, **kwargs)
A:matplotlib.dates.NaT_int->numpy.datetime64('NaT').astype(np.int64)
A:matplotlib.dates.d_int->_dt64_to_ordinalf(d).astype(np.int64)
A:matplotlib.dates.tz->_get_tzinfo(tz)
A:matplotlib.dates._from_ordinalf_np_vectorized->numpy.vectorize(_from_ordinalf, otypes='O')
A:matplotlib.dates._dateutil_parser_parse_np_vectorized->numpy.vectorize(dateutil.parser.parse)
A:matplotlib.dates.d->_dt64_to_ordinalf(d)
A:matplotlib.dates.iterable->numpy.iterable(d)
A:matplotlib.dates.masked->numpy.ma.is_masked(d)
A:matplotlib.dates.mask->numpy.ma.getmask(d)
A:matplotlib.dates.tzi->getattr(d[0], 'tzinfo', None)
A:matplotlib.dates._ordinalf_to_timedelta_np_vectorized->numpy.vectorize(lambda x: datetime.timedelta(days=x), otypes='O')
A:matplotlib.dates.f1->date2num(dstart)
A:matplotlib.dates.f2->date2num(dinterval_end)
A:matplotlib.dates.num->int(np.ceil((f2 - f1) / step))
A:matplotlib.dates.ret_text->ret_text.replace('$\\mathdefault{}$', '').replace('$\\mathdefault{}$', '')
A:matplotlib.dates.self.tz->_get_tzinfo(tz)
A:matplotlib.dates.result->fmt(x, pos)
A:matplotlib.dates.formatter->DateFormatter(fmt, tz=tz)
A:matplotlib.dates.tickdate->numpy.array([tdt.timetuple()[:6] for tdt in tickdatetime])
A:matplotlib.dates.unique->numpy.unique(tickdate[:, level])
A:matplotlib.dates.labels[nn]->labels[nn][:-trailing_zeros].rstrip('.')
A:matplotlib.dates.trailing_zeros->min((len(s) - len(s.rstrip('0')) for s in labels if '.' in s), default=None)
A:matplotlib.dates.self.offset_string->_wrap_in_tex(self.offset_string)
A:matplotlib.dates.self._formatter->DateFormatter(fmt, self._tz, usetex=self._usetex)
A:matplotlib.dates.locator_unit_scale->float(self._locator._get_unit())
A:matplotlib.dates.fmt->next((fmt for (scale, fmt) in sorted(self.scaled.items()) if scale >= locator_unit_scale), self.defaultfmt)
A:matplotlib.dates.dtstart->dtstart.astimezone(tzinfo).astimezone(tzinfo)
A:matplotlib.dates.kwargs['dtstart']->dtstart.astimezone(tzinfo).astimezone(tzinfo).replace(tzinfo=None)
A:matplotlib.dates.until->until.astimezone(tzinfo).astimezone(tzinfo)
A:matplotlib.dates.kwargs['until']->until.astimezone(tzinfo).astimezone(tzinfo).replace(tzinfo=None)
A:matplotlib.dates.self._construct->kwargs.copy()
A:matplotlib.dates.self._rrule->rrule(**self._construct)
A:matplotlib.dates.arg->arg.astimezone(self._tzinfo).astimezone(self._tzinfo)
A:matplotlib.dates.args->tuple((normalize_arg(arg) for arg in args))
A:matplotlib.dates.(args, kwargs)->normalize_args(args, kwargs)
A:matplotlib.dates.dts->f(*args, **kwargs)
A:matplotlib.dates.f->getattr(self._rrule, name)
A:matplotlib.dates.(dmin, dmax)->self.viewlim_to_dt()
A:matplotlib.dates.(vmin, vmax)->self.axis.get_view_interval()
A:matplotlib.dates.unit->self._get_unit()
A:matplotlib.dates.interval->self._get_interval()
A:matplotlib.dates.(start, stop)->self._create_rrule(vmin, vmax)
A:matplotlib.dates.dates->self.rule.between(start, stop, True)
A:matplotlib.dates.delta->relativedelta(dmax, dmin)
A:matplotlib.dates.start->vmin.replace(**replace)
A:matplotlib.dates.stop->vmin.replace(**replace).replace(year=ymax)
A:matplotlib.dates.self.maxticks->dict.fromkeys(self._freqs, maxticks)
A:matplotlib.dates.locator->MinuteLocator(tz=tz)
A:matplotlib.dates.numYears->float(delta.years)
A:matplotlib.dates.numSeconds->numpy.floor(tdelta.total_seconds())
A:matplotlib.dates.numMicroseconds->numpy.floor(tdelta.total_seconds() * 1000000.0)
A:matplotlib.dates.rrule->rrulewrapper(self._freq, interval=interval, dtstart=dmin, until=dmax, bymonth=bymonth, bymonthday=bymonthday, byhour=byhour, byminute=byminute, bysecond=bysecond)
A:matplotlib.dates.rule->rrulewrapper(SECONDLY, bysecond=bysecond, interval=interval)
A:matplotlib.dates.self.base->matplotlib.ticker._Edge_integer(base, 0)
A:matplotlib.dates.ymin->max(self.base.le(vmin.year) * self.base.step, 1)
A:matplotlib.dates.ymax->min(self.base.ge(vmax.year) * self.base.step, 9999)
A:matplotlib.dates.bymonth->range(1, 13)
A:matplotlib.dates.bymonthday->range(1, 32)
A:matplotlib.dates.byhour->range(24)
A:matplotlib.dates.byminute->range(60)
A:matplotlib.dates.bysecond->range(60)
A:matplotlib.dates.self._wrapped_locator->matplotlib.ticker.MultipleLocator(interval)
A:matplotlib.dates.(nmin, nmax)->date2num((vmin, vmax))
A:matplotlib.dates.ticks->self._wrapped_locator.tick_values(nmin, nmax)
A:matplotlib.dates.majloc->AutoDateLocator(tz=tz, interval_multiples=self._interval_multiples)
A:matplotlib.dates.majfmt->ConciseDateFormatter(majloc, tz=tz, formats=self._formats, zero_formats=self._zero_formats, offset_formats=self._offset_formats, show_offset=self._show_offset)
A:matplotlib.dates.datemin->datetime.date(1970, 1, 1)
A:matplotlib.dates.datemax->datetime.date(1970, 1, 2)
A:matplotlib.dates.x->matplotlib.cbook._safe_first_finite(x)
A:matplotlib.dates.units.registry[np.datetime64]units.registry[datetime.date]units.registry[datetime.datetime]->_SwitchableDateConverter()
matplotlib.dates.AutoDateFormatter(self,locator,tz=None,defaultfmt='%Y-%m-%d',*,usetex=None)
matplotlib.dates.AutoDateFormatter.__init__(self,locator,tz=None,defaultfmt='%Y-%m-%d',*,usetex=None)
matplotlib.dates.AutoDateFormatter._set_locator(self,locator)
matplotlib.dates.AutoDateLocator(self,tz=None,minticks=5,maxticks=None,interval_multiples=True)
matplotlib.dates.AutoDateLocator.__init__(self,tz=None,minticks=5,maxticks=None,interval_multiples=True)
matplotlib.dates.AutoDateLocator._get_unit(self)
matplotlib.dates.AutoDateLocator.get_locator(self,dmin,dmax)
matplotlib.dates.AutoDateLocator.nonsingular(self,vmin,vmax)
matplotlib.dates.AutoDateLocator.tick_values(self,vmin,vmax)
matplotlib.dates.ConciseDateConverter(self,formats=None,zero_formats=None,offset_formats=None,show_offset=True,*,interval_multiples=True)
matplotlib.dates.ConciseDateConverter.__init__(self,formats=None,zero_formats=None,offset_formats=None,show_offset=True,*,interval_multiples=True)
matplotlib.dates.ConciseDateConverter.axisinfo(self,unit,axis)
matplotlib.dates.ConciseDateFormatter(self,locator,tz=None,formats=None,offset_formats=None,zero_formats=None,show_offset=True,*,usetex=None)
matplotlib.dates.ConciseDateFormatter.__init__(self,locator,tz=None,formats=None,offset_formats=None,zero_formats=None,show_offset=True,*,usetex=None)
matplotlib.dates.ConciseDateFormatter.format_data_short(self,value)
matplotlib.dates.ConciseDateFormatter.format_ticks(self,values)
matplotlib.dates.ConciseDateFormatter.get_offset(self)
matplotlib.dates.DateConverter(self,*,interval_multiples=True)
matplotlib.dates.DateConverter.__init__(self,*,interval_multiples=True)
matplotlib.dates.DateConverter.axisinfo(self,unit,axis)
matplotlib.dates.DateConverter.convert(value,unit,axis)
matplotlib.dates.DateConverter.default_units(x,axis)
matplotlib.dates.DateFormatter(self,fmt,tz=None,*,usetex=None)
matplotlib.dates.DateFormatter.__init__(self,fmt,tz=None,*,usetex=None)
matplotlib.dates.DateFormatter.set_tzinfo(self,tz)
matplotlib.dates.DateLocator(self,tz=None)
matplotlib.dates.DateLocator.__init__(self,tz=None)
matplotlib.dates.DateLocator._get_interval(self)
matplotlib.dates.DateLocator._get_unit(self)
matplotlib.dates.DateLocator.datalim_to_dt(self)
matplotlib.dates.DateLocator.nonsingular(self,vmin,vmax)
matplotlib.dates.DateLocator.set_tzinfo(self,tz)
matplotlib.dates.DateLocator.viewlim_to_dt(self)
matplotlib.dates.DayLocator(self,bymonthday=None,interval=1,tz=None)
matplotlib.dates.DayLocator.__init__(self,bymonthday=None,interval=1,tz=None)
matplotlib.dates.HourLocator(self,byhour=None,interval=1,tz=None)
matplotlib.dates.HourLocator.__init__(self,byhour=None,interval=1,tz=None)
matplotlib.dates.MicrosecondLocator(self,interval=1,tz=None)
matplotlib.dates.MicrosecondLocator.__init__(self,interval=1,tz=None)
matplotlib.dates.MicrosecondLocator._get_interval(self)
matplotlib.dates.MicrosecondLocator._get_unit(self)
matplotlib.dates.MicrosecondLocator.set_axis(self,axis)
matplotlib.dates.MicrosecondLocator.tick_values(self,vmin,vmax)
matplotlib.dates.MinuteLocator(self,byminute=None,interval=1,tz=None)
matplotlib.dates.MinuteLocator.__init__(self,byminute=None,interval=1,tz=None)
matplotlib.dates.MonthLocator(self,bymonth=None,bymonthday=1,interval=1,tz=None)
matplotlib.dates.MonthLocator.__init__(self,bymonth=None,bymonthday=1,interval=1,tz=None)
matplotlib.dates.RRuleLocator(self,o,tz=None)
matplotlib.dates.RRuleLocator.__init__(self,o,tz=None)
matplotlib.dates.RRuleLocator._create_rrule(self,vmin,vmax)
matplotlib.dates.RRuleLocator._get_interval(self)
matplotlib.dates.RRuleLocator._get_unit(self)
matplotlib.dates.RRuleLocator.get_unit_generic(freq)
matplotlib.dates.RRuleLocator.tick_values(self,vmin,vmax)
matplotlib.dates.SecondLocator(self,bysecond=None,interval=1,tz=None)
matplotlib.dates.SecondLocator.__init__(self,bysecond=None,interval=1,tz=None)
matplotlib.dates.WeekdayLocator(self,byweekday=1,interval=1,tz=None)
matplotlib.dates.WeekdayLocator.__init__(self,byweekday=1,interval=1,tz=None)
matplotlib.dates.YearLocator(self,base=1,month=1,day=1,tz=None)
matplotlib.dates.YearLocator.__init__(self,base=1,month=1,day=1,tz=None)
matplotlib.dates.YearLocator._create_rrule(self,vmin,vmax)
matplotlib.dates._SwitchableDateConverter
matplotlib.dates._SwitchableDateConverter._get_converter()
matplotlib.dates._SwitchableDateConverter.axisinfo(self,*args,**kwargs)
matplotlib.dates._SwitchableDateConverter.convert(self,*args,**kwargs)
matplotlib.dates._SwitchableDateConverter.default_units(self,*args,**kwargs)
matplotlib.dates.__getattr__
matplotlib.dates._dt64_to_ordinalf(d)
matplotlib.dates._from_ordinalf(x,tz=None)
matplotlib.dates._get_tzinfo(tz=None)
matplotlib.dates._reset_epoch_test_example()
matplotlib.dates._wrap_in_tex(text)
matplotlib.dates.date2num(d)
matplotlib.dates.date_ticker_factory(span,tz=None,numticks=5)
matplotlib.dates.datestr2num(d,default=None)
matplotlib.dates.drange(dstart,dend,delta)
matplotlib.dates.get_epoch()
matplotlib.dates.julian2num(j)
matplotlib.dates.num2date(x,tz=None)
matplotlib.dates.num2julian(n)
matplotlib.dates.num2timedelta(x)
matplotlib.dates.rrulewrapper(self,freq,tzinfo=None,**kwargs)
matplotlib.dates.rrulewrapper.__getattr__(self,name)
matplotlib.dates.rrulewrapper.__init__(self,freq,tzinfo=None,**kwargs)
matplotlib.dates.rrulewrapper.__setstate__(self,state)
matplotlib.dates.rrulewrapper._attach_tzinfo(self,dt,tzinfo)
matplotlib.dates.rrulewrapper._aware_return_wrapper(self,f,returns_list=False)
matplotlib.dates.rrulewrapper._update_rrule(self,**kwargs)
matplotlib.dates.rrulewrapper.set(self,**kwargs)
matplotlib.dates.set_epoch(epoch)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/texmanager.py----------------------------------------
A:matplotlib.texmanager._log->logging.getLogger(__name__)
A:matplotlib.texmanager.texcache->os.path.join(mpl.get_cachedir(), 'tex.cache')
A:matplotlib.texmanager.(preamble, font_cmd)->self._get_font_preamble_and_command()
A:matplotlib.texmanager.(requested_family, is_reduced_font)->cls._get_font_family_and_reduced()
A:matplotlib.texmanager.preamble->'\n'.join(sorted(cmd))
A:matplotlib.texmanager.filehash->hashlib.md5(src.encode('utf-8')).hexdigest()
A:matplotlib.texmanager.filepath->Path(cls.texcache)
A:matplotlib.texmanager.(font_preamble, command)->cls._get_font_preamble_and_command()
A:matplotlib.texmanager.(font_preamble, fontcmd)->cls._get_font_preamble_and_command()
A:matplotlib.texmanager.report->subprocess.check_output(command, cwd=cwd if cwd is not None else cls.texcache, stderr=subprocess.STDOUT)
A:matplotlib.texmanager.basefile->cls.get_basefile(tex, fontsize, dpi)
A:matplotlib.texmanager.texfile->Path(cls.make_tex(tex, fontsize))
A:matplotlib.texmanager.tmppath->Path(tmpdir)
A:matplotlib.texmanager.dvifile->cls.make_dvi(tex, fontsize)
A:matplotlib.texmanager.alpha->cls.get_grey(tex, fontsize, dpi)
A:matplotlib.texmanager.pngfile->cls.make_png(tex, fontsize, dpi)
A:matplotlib.texmanager.rgba->numpy.empty((*alpha.shape, 4))
A:matplotlib.texmanager.rgba[..., :3]->matplotlib.colors.to_rgb(rgb)
matplotlib.texmanager.TexManager(cls)
matplotlib.texmanager.TexManager.__new__(cls)
matplotlib.texmanager.TexManager._get_font_family_and_reduced(cls)
matplotlib.texmanager.TexManager._get_font_preamble_and_command(cls)
matplotlib.texmanager.TexManager._get_tex_source(cls,tex,fontsize)
matplotlib.texmanager.TexManager._run_checked_subprocess(cls,command,tex,*,cwd=None)
matplotlib.texmanager.TexManager.get_basefile(cls,tex,fontsize,dpi=None)
matplotlib.texmanager.TexManager.get_custom_preamble(cls)
matplotlib.texmanager.TexManager.get_font_config(self)
matplotlib.texmanager.TexManager.get_font_preamble(cls)
matplotlib.texmanager.TexManager.get_grey(cls,tex,fontsize=None,dpi=None)
matplotlib.texmanager.TexManager.get_rgba(cls,tex,fontsize=None,dpi=None,rgb=(0,0,0))
matplotlib.texmanager.TexManager.get_text_width_height_descent(cls,tex,fontsize,renderer=None)
matplotlib.texmanager.TexManager.make_dvi(cls,tex,fontsize)
matplotlib.texmanager.TexManager.make_png(cls,tex,fontsize,dpi)
matplotlib.texmanager.TexManager.make_tex(cls,tex,fontsize)
matplotlib.texmanager._usepackage_if_not_loaded(package,*,option=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/path.py----------------------------------------
A:matplotlib.path.STOP->code_type(0)
A:matplotlib.path.MOVETO->code_type(1)
A:matplotlib.path.LINETO->code_type(2)
A:matplotlib.path.CURVE3->code_type(3)
A:matplotlib.path.CURVE4->code_type(4)
A:matplotlib.path.CLOSEPOLY->code_type(79)
A:matplotlib.path.vertices->numpy.empty((length, 2), float)
A:matplotlib.path.codes->numpy.full(length, cls.CURVE4, dtype=cls.code_type)
A:matplotlib.path.pth->Path._fast_from_codes_and_verts(vertices, codes, self)
A:matplotlib.path.pth._vertices->_to_unmasked_float_array(verts)
A:matplotlib.path.v->_to_unmasked_float_array(vertices)
A:matplotlib.path.p->copy.deepcopy(super(), memo)
A:matplotlib.path.verts->_path.clip_path_to_rect(self, bbox, inside)
A:matplotlib.path.cleaned->transform.transform_path(self).cleaned(transform=transform, remove_nans=remove_nans, clip=clip, snap=snap, stroke_width=stroke_width, simplify=simplify, curves=curves, sketch=sketch)
A:matplotlib.path.curr_vertices->numpy.append(curr_vertices, next(vertices))
A:matplotlib.path.(vertices, codes)->_path.cleanup_path(self, transform, remove_nans, clip, snap, stroke_width, simplify, curves, sketch)
A:matplotlib.path.transform->transform.frozen().frozen()
A:matplotlib.path.self->transform.frozen().frozen().transform_path(self)
A:matplotlib.path.result->_path.points_in_path(points, radius, self, transform)
A:matplotlib.path.(_, dzeros)->curve.axis_aligned_extrema()
A:matplotlib.path.xys->numpy.concatenate(xys)
A:matplotlib.path.new_codes->numpy.full((len(codes) - 1) * steps + 1, Path.LINETO, dtype=self.code_type)
A:matplotlib.path.cls._unit_rectangle->cls([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], closed=True, readonly=True)
A:matplotlib.path._unit_regular_polygons->WeakValueDictionary()
A:matplotlib.path.path->cls(verts, closed=True, readonly=True)
A:matplotlib.path._unit_regular_stars->WeakValueDictionary()
A:matplotlib.path.r->numpy.ones(ns2 + 1)
A:matplotlib.path.cls._unit_circle->cls.circle(center=(0, 0), radius=1, readonly=True)
A:matplotlib.path.SQRTHALF->numpy.sqrt(0.5)
A:matplotlib.path.cls._unit_circle_righthalf->cls(vertices, codes, readonly=True)
A:matplotlib.path.(eta1, eta2)->numpy.deg2rad([eta1, eta2])
A:matplotlib.path.n->int(2 ** np.ceil((eta2 - eta1) / halfpi))
A:matplotlib.path.t->numpy.tan(0.5 * deta)
A:matplotlib.path.steps->numpy.linspace(eta1, eta2, n + 1, True)
A:matplotlib.path.cos_eta->numpy.cos(steps)
A:matplotlib.path.sin_eta->numpy.sin(steps)
A:matplotlib.path.(extents, minpos)->_path.get_path_collection_extents(master_transform, paths, np.atleast_3d(transforms), offsets, offset_transform)
matplotlib.path.Path(self,vertices,codes=None,_interpolation_steps=1,closed=False,readonly=False)
matplotlib.path.Path.__deepcopy__(self,memo=None)
matplotlib.path.Path.__init__(self,vertices,codes=None,_interpolation_steps=1,closed=False,readonly=False)
matplotlib.path.Path.__len__(self)
matplotlib.path.Path.__repr__(self)
matplotlib.path.Path._create_closed(cls,vertices)
matplotlib.path.Path._fast_from_codes_and_verts(cls,verts,codes,internals_from=None)
matplotlib.path.Path._update_values(self)
matplotlib.path.Path.arc(cls,theta1,theta2,n=None,is_wedge=False)
matplotlib.path.Path.circle(cls,center=(0.0,0.0),radius=1.0,readonly=False)
matplotlib.path.Path.cleaned(self,transform=None,remove_nans=False,clip=None,*,simplify=False,curves=False,stroke_width=1.0,snap=False,sketch=None)
matplotlib.path.Path.clip_to_bbox(self,bbox,inside=True)
matplotlib.path.Path.codes(self)
matplotlib.path.Path.codes(self,codes)
matplotlib.path.Path.contains_path(self,path,transform=None)
matplotlib.path.Path.contains_point(self,point,transform=None,radius=0.0)
matplotlib.path.Path.contains_points(self,points,transform=None,radius=0.0)
matplotlib.path.Path.copy(self)
matplotlib.path.Path.get_extents(self,transform=None,**kwargs)
matplotlib.path.Path.hatch(hatchpattern,density=6)
matplotlib.path.Path.interpolated(self,steps)
matplotlib.path.Path.intersects_bbox(self,bbox,filled=True)
matplotlib.path.Path.intersects_path(self,other,filled=True)
matplotlib.path.Path.iter_bezier(self,**kwargs)
matplotlib.path.Path.iter_segments(self,transform=None,remove_nans=True,clip=None,snap=False,stroke_width=1.0,simplify=None,curves=True,sketch=None)
matplotlib.path.Path.make_compound_path(cls,*args)
matplotlib.path.Path.make_compound_path_from_polys(cls,XY)
matplotlib.path.Path.readonly(self)
matplotlib.path.Path.should_simplify(self)
matplotlib.path.Path.should_simplify(self,should_simplify)
matplotlib.path.Path.simplify_threshold(self)
matplotlib.path.Path.simplify_threshold(self,threshold)
matplotlib.path.Path.to_polygons(self,transform=None,width=0,height=0,closed_only=True)
matplotlib.path.Path.transformed(self,transform)
matplotlib.path.Path.unit_circle(cls)
matplotlib.path.Path.unit_circle_righthalf(cls)
matplotlib.path.Path.unit_rectangle(cls)
matplotlib.path.Path.unit_regular_asterisk(cls,numVertices)
matplotlib.path.Path.unit_regular_polygon(cls,numVertices)
matplotlib.path.Path.unit_regular_star(cls,numVertices,innerCircle=0.5)
matplotlib.path.Path.vertices(self)
matplotlib.path.Path.vertices(self,vertices)
matplotlib.path.Path.wedge(cls,theta1,theta2,n=None)
matplotlib.path.get_path_collection_extents(master_transform,paths,transforms,offsets,offset_transform)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_api/deprecation.py----------------------------------------
A:matplotlib._api.deprecation.warning->_generate_deprecation_warning(since, message, name, alternative, pending, obj_type, addendum, removal=removal)
A:matplotlib._api.deprecation.obj.__init__->functools.wraps(obj.__init__)(wrapper)
A:matplotlib._api.deprecation.wrapper->functools.wraps(func)(wrapper)
A:matplotlib._api.deprecation.old_doc->inspect.cleandoc(old_doc or '').strip('\n')
A:matplotlib._api.deprecation.second_arg->' '.join([t.strip() for t in (message, f'Use {alternative} instead.' if alternative else '', addendum) if t])
A:matplotlib._api.deprecation.self.deprecator->deprecated(*args, **kwargs)
A:matplotlib._api.deprecation.decorator->functools.partial(make_keyword_only, since, name)
A:matplotlib._api.deprecation.signature->inspect.signature(func)
A:matplotlib._api.deprecation.kwargs[new]->kwargs.pop(old)
A:matplotlib._api.deprecation._deprecated_parameter->_deprecated_parameter_class()
A:matplotlib._api.deprecation.kwargs_name->next((param.name for param in signature.parameters.values() if param.kind == inspect.Parameter.VAR_KEYWORD), None)
A:matplotlib._api.deprecation.func.__signature__signature->inspect.signature(func).replace(parameters=[param.replace(default=_deprecated_parameter) if param.name == name else param for param in signature.parameters.values()])
A:matplotlib._api.deprecation.addendum->kwargs.pop('addendum', None)
A:matplotlib._api.deprecation.name_idx->names.index(name)
A:matplotlib._api.deprecation.wrapper.__signature__->inspect.signature(func).replace(parameters=[param.replace(kind=KWO) if param.name in kwonly else param for param in signature.parameters.values()])
A:matplotlib._api.deprecation.bound_child->getattr(obj, name)
matplotlib.MatplotlibDeprecationWarning(DeprecationWarning)
matplotlib._api.delete_parameter(since,name,func=None,**kwargs)
matplotlib._api.deprecate_method_override(method,obj,*,allow_empty=False,**kwargs)
matplotlib._api.deprecate_privatize_attribute(self,*args,**kwargs)
matplotlib._api.deprecate_privatize_attribute.__set_name__(self,owner,name)
matplotlib._api.deprecated(since,*,message='',name='',alternative='',pending=False,obj_type=None,addendum='',removal='')
matplotlib._api.deprecation.MatplotlibDeprecationWarning(DeprecationWarning)
matplotlib._api.deprecation._deprecated_parameter_class
matplotlib._api.deprecation._deprecated_parameter_class.__repr__(self)
matplotlib._api.deprecation._generate_deprecation_warning(since,message='',name='',alternative='',pending=False,obj_type='',addendum='',*,removal='')
matplotlib._api.deprecation.delete_parameter(since,name,func=None,**kwargs)
matplotlib._api.deprecation.deprecate_method_override(method,obj,*,allow_empty=False,**kwargs)
matplotlib._api.deprecation.deprecate_privatize_attribute(self,*args,**kwargs)
matplotlib._api.deprecation.deprecate_privatize_attribute.__init__(self,*args,**kwargs)
matplotlib._api.deprecation.deprecate_privatize_attribute.__set_name__(self,owner,name)
matplotlib._api.deprecation.deprecated(since,*,message='',name='',alternative='',pending=False,obj_type=None,addendum='',removal='')
matplotlib._api.deprecation.make_keyword_only(since,name,func=None)
matplotlib._api.deprecation.rename_parameter(since,old,new,func=None)
matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning()
matplotlib._api.deprecation.warn_deprecated(since,*,message='',name='',alternative='',pending=False,obj_type='',addendum='',removal='')
matplotlib._api.make_keyword_only(since,name,func=None)
matplotlib._api.rename_parameter(since,old,new,func=None)
matplotlib._api.suppress_matplotlib_deprecation_warning()
matplotlib._api.warn_deprecated(since,*,message='',name='',alternative='',pending=False,obj_type='',addendum='',removal='')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/_api/__init__.py----------------------------------------
A:matplotlib._api.__init__.none_type->type(None)
A:matplotlib._api.__init__.dim_labels->iter(itertools.chain('MNLIJKLH', (f'D{i}' for i in itertools.count())))
A:matplotlib._api.__init__.text_shape->', '.join((str(n) if n is not None else next(dim_labels) for n in target_shape))
A:matplotlib._api.__init__.((k, v),)->kwargs.items()
A:matplotlib._api.__init__.instance->cls()
A:matplotlib._api.__init__.method->make_alias(prefix + prop)
A:matplotlib._api.__init__.method.__doc__->'Alias for `{}`.'.format(prefix + prop)
A:matplotlib._api.__init__.preexisting_aliases->getattr(cls, '_alias_map', {})
A:matplotlib._api.__init__.kw->next(iter(kw))
A:matplotlib._api.__init__.frame->sys._getframe()
matplotlib._api.__init__.caching_module_getattr(cls)
matplotlib._api.__init__.check_getitem(_mapping,**kwargs)
matplotlib._api.__init__.check_in_list(_values,*,_print_supported_values=True,**kwargs)
matplotlib._api.__init__.check_isinstance(_types,**kwargs)
matplotlib._api.__init__.check_shape(_shape,**kwargs)
matplotlib._api.__init__.classproperty(self,fget,fset=None,fdel=None,doc=None)
matplotlib._api.__init__.classproperty.__get__(self,instance,owner)
matplotlib._api.__init__.classproperty.__init__(self,fget,fset=None,fdel=None,doc=None)
matplotlib._api.__init__.classproperty.fget(self)
matplotlib._api.__init__.define_aliases(alias_d,cls=None)
matplotlib._api.__init__.kwarg_error(name,kw)
matplotlib._api.__init__.nargs_error(name,takes,given)
matplotlib._api.__init__.recursive_subclasses(cls)
matplotlib._api.__init__.select_matching_signature(funcs,*args,**kwargs)
matplotlib._api.__init__.warn_external(message,category=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_webagg.py----------------------------------------
A:matplotlib.backends.backend_webagg.webagg_server_thread->threading.Thread(target=lambda : tornado.ioloop.IOLoop.instance().start())
A:matplotlib.backends.backend_webagg.url->'http://{address}:{port}{prefix}'.format(address=WebAggApplication.address, port=WebAggApplication.port, prefix=WebAggApplication.url_prefix)
A:matplotlib.backends.backend_webagg.fignum->int(fignum)
A:matplotlib.backends.backend_webagg.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(self.fignum)
A:matplotlib.backends.backend_webagg.ws_uri->'ws://{req.host}{prefix}/'.format(req=self.request, prefix=self.url_prefix)
A:matplotlib.backends.backend_webagg.js_content->core.FigureManagerWebAgg.get_javascript()
A:matplotlib.backends.backend_webagg.buff->BytesIO()
A:matplotlib.backends.backend_webagg.self.fignum->int(fignum)
A:matplotlib.backends.backend_webagg.self.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(self.fignum)
A:matplotlib.backends.backend_webagg.message->json.loads(message)
A:matplotlib.backends.backend_webagg.data_uri->'data:image/png;base64,{0}'.format(blob.encode('base64').replace('\n', ''))
A:matplotlib.backends.backend_webagg.app->cls(url_prefix=url_prefix)
A:matplotlib.backends.backend_webagg.ioloop->tornado.ioloop.IOLoop.instance()
A:matplotlib.backends.backend_webagg.old_handler->signal.signal(signal.SIGINT, lambda sig, frame: ioloop.add_callback_from_signal(shutdown))
A:matplotlib.backends.backend_webagg.tpl->Path(core.FigureManagerWebAgg.get_static_file_path(), 'ipython_inline_figure.html').read_text()
A:matplotlib.backends.backend_webagg.t->tornado.template.Template(tpl)
matplotlib.backends.backend_webagg.FigureCanvasWebAgg(core.FigureCanvasWebAggCore)
matplotlib.backends.backend_webagg.FigureManagerWebAgg(core.FigureManagerWebAgg)
matplotlib.backends.backend_webagg.FigureManagerWebAgg.plt_show(cls,*,block=None)
matplotlib.backends.backend_webagg.FigureManagerWebAgg.pyplot_show(cls,*,block=None)
matplotlib.backends.backend_webagg.ServerThread(threading.Thread)
matplotlib.backends.backend_webagg.ServerThread.run(self)
matplotlib.backends.backend_webagg.WebAggApplication(self,url_prefix='')
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage(self,application,request,*,url_prefix='',**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage.__init__(self,application,request,*,url_prefix='',**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.Download(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.Download.get(self,fignum,fmt)
matplotlib.backends.backend_webagg.WebAggApplication.FavIcon(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.FavIcon.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.MplJs(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.MplJs.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage(self,application,request,*,url_prefix='',**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage.__init__(self,application,request,*,url_prefix='',**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage.get(self,fignum)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket(tornado.websocket.WebSocketHandler)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.on_close(self)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.on_message(self,message)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.open(self,fignum)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.send_binary(self,blob)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.send_json(self,content)
matplotlib.backends.backend_webagg.WebAggApplication.__init__(self,url_prefix='')
matplotlib.backends.backend_webagg.WebAggApplication.initialize(cls,url_prefix='',port=None,address=None)
matplotlib.backends.backend_webagg.WebAggApplication.start(cls)
matplotlib.backends.backend_webagg._BackendWebAgg(_Backend)
matplotlib.backends.backend_webagg.ipython_inline_display(figure)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_pgf.py----------------------------------------
A:matplotlib.backends.backend_pgf._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_pgf.NO_ESCAPE->matplotlib._api.deprecated('3.6', obj_type='')(property(lambda self: _NO_ESCAPE))
A:matplotlib.backends.backend_pgf.re_mathsep->matplotlib._api.deprecated('3.6', obj_type='')(property(lambda self: _split_math.__self__))
A:matplotlib.backends.backend_pgf.path->pathlib.Path(self.fh.name)
A:matplotlib.backends.backend_pgf._replace_escapetext->functools.partial(re.compile(_NO_ESCAPE + '(?=[%^])').sub, '\\\\')
A:matplotlib.backends.backend_pgf._replace_mathdefault->functools.partial(re.compile(_NO_ESCAPE + '(\\\\mathdefault)').sub, '')
A:matplotlib.backends.backend_pgf.text->text.replace('−', '\\ensuremath{-}').replace('−', '\\ensuremath{-}')
A:matplotlib.backends.backend_pgf.parts->_split_math(text)
A:matplotlib.backends.backend_pgf.s->_escape_and_apply_props(s, prop)
A:matplotlib.backends.backend_pgf.size->prop.get_size_in_points()
A:matplotlib.backends.backend_pgf.value->str(value)
A:matplotlib.backends.backend_pgf.gs_info->matplotlib._get_executable_info('gs')
A:matplotlib.backends.backend_pgf.c->self.latex.stdout.read(1)
A:matplotlib.backends.backend_pgf.self._tmpdir->TemporaryDirectory()
A:matplotlib.backends.backend_pgf.self._finalize_tmpdir->weakref.finalize(self, self._tmpdir.cleanup)
A:matplotlib.backends.backend_pgf.(stdout, stderr)->self.latex.communicate('\n\\makeatletter\\@@end\n')
A:matplotlib.backends.backend_pgf.self._get_box_metrics->functools.lru_cache()(self._get_box_metrics)
A:matplotlib.backends.backend_pgf.texcommand->matplotlib._api.deprecated('3.6')(property(lambda self: mpl.rcParams['pgf.texsystem']))
A:matplotlib.backends.backend_pgf.latex_header->'\n'.join(['\\documentclass[12pt]{article}', '\\usepackage[pdfinfo={%s}]{hyperref}' % pdfinfo, '\\usepackage[papersize={%fin,%fin}, margin=0in]{geometry}' % (width_inches, height_inches), '\\usepackage{pgf}', _get_preamble(), '\\setlength{\\parindent}{0pt}', '\\begin{document}%'])
A:matplotlib.backends.backend_pgf.self.latex->subprocess.Popen([mpl.rcParams['pgf.texsystem'], '-halt-on-error'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, encoding='utf-8', cwd=self.tmpdir)
A:matplotlib.backends.backend_pgf.self._finalize_latex->weakref.finalize(self, finalize_latex, self.latex)
A:matplotlib.backends.backend_pgf.answer->self._expect_prompt()
A:matplotlib.backends.backend_pgf.(width, height, offset)->self._expect_prompt().splitlines()[-3].split(',')
A:matplotlib.backends.backend_pgf.man->LatexManager._get_cached_or_new()
A:matplotlib.backends.backend_pgf.(bl, tr)->marker_path.get_extents(marker_trans).get_points()
A:matplotlib.backends.backend_pgf.scale->matplotlib.transforms.Affine2D().scale(self.dpi)
A:matplotlib.backends.backend_pgf.((xmin, ymin), (xmax, ymax))->pathlib.Path(self.fh.name).get_extents(transform).get_points()
A:matplotlib.backends.backend_pgf.bbox->gc.get_clip_rectangle()
A:matplotlib.backends.backend_pgf.(p1, p2)->gc.get_clip_rectangle().get_points()
A:matplotlib.backends.backend_pgf.(clippath, clippath_trans)->gc.get_clip_path()
A:matplotlib.backends.backend_pgf.fillopacitystrokeopacity->gc.get_alpha()
A:matplotlib.backends.backend_pgf.stroke_rgba->gc.get_rgb()
A:matplotlib.backends.backend_pgf.(dash_offset, dash_list)->gc.get_dashes()
A:matplotlib.backends.backend_pgf.(x, y)->mtext.get_transform().transform(pos)
A:matplotlib.backends.backend_pgf.(cx, cy, px, py)->tuple(points)
A:matplotlib.backends.backend_pgf.(c1x, c1y, c2x, c2y, px, py)->tuple(points)
A:matplotlib.backends.backend_pgf.(tr1, tr2, tr3, tr4, tr5, tr6)->transform.frozen().to_values()
A:matplotlib.backends.backend_pgf.interp->str(transform is None).lower()
A:matplotlib.backends.backend_pgf.alpha->gc.get_alpha()
A:matplotlib.backends.backend_pgf.pos->mtext.get_unitless_position()
A:matplotlib.backends.backend_pgf.(w, h, d)->LatexManager._get_cached_or_new().get_width_height_descent(s, prop)
A:matplotlib.backends.backend_pgf.header_info_preamble->'\n'.join(header_info_preamble)
A:matplotlib.backends.backend_pgf.renderer->MixedModeRenderer(self.figure, w, h, dpi, RendererPgf(self.figure, fh), bbox_inches_restore=bbox_inches_restore)
A:matplotlib.backends.backend_pgf.file->codecs.getwriter('utf-8')(file)
A:matplotlib.backends.backend_pgf.(w, h)->self.figure.get_size_inches()
A:matplotlib.backends.backend_pgf.info_dict->_create_pdf_info_dict('pgf', metadata or {})
A:matplotlib.backends.backend_pgf.pdfinfo->','.join((_metadata_to_str(k, v) for (k, v) in self._info_dict.items()))
A:matplotlib.backends.backend_pgf.tmppath->pathlib.Path(tmpdir)
A:matplotlib.backends.backend_pgf.converter->make_pdf_to_png_converter()
A:matplotlib.backends.backend_pgf.self._metadata->(metadata or {}).copy()
A:matplotlib.backends.backend_pgf.self._info_dict->_create_pdf_info_dict('pgf', self._metadata)
A:matplotlib.backends.backend_pgf.self._file->BytesIO()
A:matplotlib.backends.backend_pgf.tex_source->pathlib.Path(tmpdir, 'pdf_pages.tex')
A:matplotlib.backends.backend_pgf.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(figure)
A:matplotlib.backends.backend_pgf.figure.canvas->FigureCanvasPgf(figure)
A:matplotlib.backends.backend_pgf.(width, height)->figure.get_size_inches()
matplotlib.backends.backend_pgf.FigureCanvasPgf(FigureCanvasBase)
matplotlib.backends.backend_pgf.FigureCanvasPgf._print_pgf_to_fh(self,fh,*,bbox_inches_restore=None)
matplotlib.backends.backend_pgf.FigureCanvasPgf.draw(self)
matplotlib.backends.backend_pgf.FigureCanvasPgf.get_default_filetype(self)
matplotlib.backends.backend_pgf.FigureCanvasPgf.get_renderer(self)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_pdf(self,fname_or_fh,*,metadata=None,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_pgf(self,fname_or_fh,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_png(self,fname_or_fh,**kwargs)
matplotlib.backends.backend_pgf.LatexError(self,message,latex_output='')
matplotlib.backends.backend_pgf.LatexError.__init__(self,message,latex_output='')
matplotlib.backends.backend_pgf.LatexError.__str__(self)
matplotlib.backends.backend_pgf.LatexManager(self)
matplotlib.backends.backend_pgf.LatexManager.__init__(self)
matplotlib.backends.backend_pgf.LatexManager._build_latex_header()
matplotlib.backends.backend_pgf.LatexManager._expect(self,s)
matplotlib.backends.backend_pgf.LatexManager._expect_prompt(self)
matplotlib.backends.backend_pgf.LatexManager._get_box_metrics(self,tex)
matplotlib.backends.backend_pgf.LatexManager._get_cached_or_new(cls)
matplotlib.backends.backend_pgf.LatexManager._get_cached_or_new_impl(cls,header)
matplotlib.backends.backend_pgf.LatexManager._setup_latex_process(self,*,expect_reply=True)
matplotlib.backends.backend_pgf.LatexManager._stdin_writeln(self,s)
matplotlib.backends.backend_pgf.LatexManager.get_width_height_descent(self,text,prop)
matplotlib.backends.backend_pgf.PdfPages(self,filename,*,keep_empty=True,metadata=None)
matplotlib.backends.backend_pgf.PdfPages.__enter__(self)
matplotlib.backends.backend_pgf.PdfPages.__exit__(self,exc_type,exc_val,exc_tb)
matplotlib.backends.backend_pgf.PdfPages.__init__(self,filename,*,keep_empty=True,metadata=None)
matplotlib.backends.backend_pgf.PdfPages._run_latex(self)
matplotlib.backends.backend_pgf.PdfPages._write_header(self,width_inches,height_inches)
matplotlib.backends.backend_pgf.PdfPages.close(self)
matplotlib.backends.backend_pgf.PdfPages.get_pagecount(self)
matplotlib.backends.backend_pgf.PdfPages.savefig(self,figure=None,**kwargs)
matplotlib.backends.backend_pgf.RendererPgf(self,figure,fh)
matplotlib.backends.backend_pgf.RendererPgf.__init__(self,figure,fh)
matplotlib.backends.backend_pgf.RendererPgf._pgf_path_draw(self,stroke=True,fill=False)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_clip(self,gc)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_path_styles(self,gc,rgbFace)
matplotlib.backends.backend_pgf.RendererPgf.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_tex(self,gc,x,y,s,prop,angle,*,mtext=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_pgf.RendererPgf.flipy(self)
matplotlib.backends.backend_pgf.RendererPgf.get_canvas_width_height(self)
matplotlib.backends.backend_pgf.RendererPgf.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_pgf.RendererPgf.option_image_nocomposite(self)
matplotlib.backends.backend_pgf.RendererPgf.option_scale_image(self)
matplotlib.backends.backend_pgf.RendererPgf.points_to_pixels(self,points)
matplotlib.backends.backend_pgf._BackendPgf(_Backend)
matplotlib.backends.backend_pgf.__getattr__
matplotlib.backends.backend_pgf._escape_and_apply_props(s,prop)
matplotlib.backends.backend_pgf._get_image_inclusion_command()
matplotlib.backends.backend_pgf._get_preamble()
matplotlib.backends.backend_pgf._metadata_to_str(key,value)
matplotlib.backends.backend_pgf._tex_escape(text)
matplotlib.backends.backend_pgf._writeln(fh,line)
matplotlib.backends.backend_pgf.common_texification(text)
matplotlib.backends.backend_pgf.get_fontspec()
matplotlib.backends.backend_pgf.get_preamble()
matplotlib.backends.backend_pgf.make_pdf_to_png_converter()
matplotlib.backends.backend_pgf.writeln(fh,line)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qtcairo.py----------------------------------------
A:matplotlib.backends.backend_qtcairo.width->int(self.device_pixel_ratio * self.width())
A:matplotlib.backends.backend_qtcairo.height->int(self.device_pixel_ratio * self.height())
A:matplotlib.backends.backend_qtcairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_qtcairo.buf->self._renderer.gc.ctx.get_target().get_data()
A:matplotlib.backends.backend_qtcairo.ptr->int(sip.voidptr(buf))
A:matplotlib.backends.backend_qtcairo.qimage->backend_qt.QtGui.QImage(ptr, width, height, _enum('QtGui.QImage.Format').Format_ARGB32_Premultiplied)
A:matplotlib.backends.backend_qtcairo.painter->backend_qt.QtGui.QPainter(self)
matplotlib.backends.backend_qtcairo.FigureCanvasQTCairo(FigureCanvasCairo,FigureCanvasQT)
matplotlib.backends.backend_qtcairo.FigureCanvasQTCairo.draw(self)
matplotlib.backends.backend_qtcairo.FigureCanvasQTCairo.paintEvent(self,event)
matplotlib.backends.backend_qtcairo._BackendQTCairo(_BackendQT)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_mixed.py----------------------------------------
A:matplotlib.backends.backend_mixed.r->process_figure_for_rasterizing(self.figure, self._bbox_inches_restore, self._figdpi)
A:matplotlib.backends.backend_mixed.self._raster_renderer->self._raster_renderer_class(self._width * self.dpi, self._height * self.dpi, self.dpi)
A:matplotlib.backends.backend_mixed.img->numpy.asarray(self._raster_renderer.buffer_rgba())
A:matplotlib.backends.backend_mixed.(slice_y, slice_x)->matplotlib.cbook._get_nonzero_slices(img[..., 3])
A:matplotlib.backends.backend_mixed.gc->self._renderer.new_gc()
matplotlib.backends.backend_mixed.MixedModeRenderer(self,figure,width,height,dpi,vector_renderer,raster_renderer_class=None,bbox_inches_restore=None)
matplotlib.backends.backend_mixed.MixedModeRenderer.__getattr__(self,attr)
matplotlib.backends.backend_mixed.MixedModeRenderer.__init__(self,figure,width,height,dpi,vector_renderer,raster_renderer_class=None,bbox_inches_restore=None)
matplotlib.backends.backend_mixed.MixedModeRenderer.start_rasterizing(self)
matplotlib.backends.backend_mixed.MixedModeRenderer.stop_rasterizing(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_tkcairo.py----------------------------------------
A:matplotlib.backends.backend_tkcairo.width->int(self.figure.bbox.width)
A:matplotlib.backends.backend_tkcairo.height->int(self.figure.bbox.height)
A:matplotlib.backends.backend_tkcairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_tkcairo.buf->numpy.reshape(surface.get_data(), (height, width, 4))
matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo(FigureCanvasCairo,FigureCanvasTk)
matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo.draw(self)
matplotlib.backends.backend_tkcairo._BackendTkCairo(_BackendTk)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk4.py----------------------------------------
A:matplotlib.backends.backend_gtk4.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerGTK4)
A:matplotlib.backends.backend_gtk4.click->gi.repository.Gtk.GestureClick()
A:matplotlib.backends.backend_gtk4.key->key.capitalize().capitalize()
A:matplotlib.backends.backend_gtk4.motion->gi.repository.Gtk.EventControllerMotion()
A:matplotlib.backends.backend_gtk4.scroll->gi.repository.Gtk.EventControllerScroll.new(Gtk.EventControllerScrollFlags.VERTICAL)
A:matplotlib.backends.backend_gtk4.css->gi.repository.Gtk.CssProvider()
A:matplotlib.backends.backend_gtk4.style_ctx->self.get_style_context()
A:matplotlib.backends.backend_gtk4.surface->self.get_native().get_surface()
A:matplotlib.backends.backend_gtk4.(is_over, x, y, mask)->self.get_native().get_surface().get_device_position(self.get_display().get_default_seat().get_pointer())
A:matplotlib.backends.backend_gtk4.(is_over, x, y, event_state)->self.get_native().get_surface().get_device_position(self.get_display().get_default_seat().get_pointer())
A:matplotlib.backends.backend_gtk4.event_state->controller.get_current_event_state()
A:matplotlib.backends.backend_gtk4.unikey->chr(Gdk.keyval_to_unicode(keyval))
A:matplotlib.backends.backend_gtk4.self._idle_draw_id->gi.repository.GLib.idle_add(idle_draw)
A:matplotlib.backends.backend_gtk4.context->gi.repository.GLib.MainContext.default()
A:matplotlib.backends.backend_gtk4.image->gi.repository.Gtk.Image.new_from_gicon(Gio.Icon.new_for_string(image_file))
A:matplotlib.backends.backend_gtk4.button._signal_handler->gi.repository.Gtk.Button().connect('clicked', getattr(self, callback))
A:matplotlib.backends.backend_gtk4.label->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk4.self.message->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk4.win->matplotlib._api.deprecated('3.6')(property(lambda self: self._win))
A:matplotlib.backends.backend_gtk4.dialog->gi.repository.Gtk.FileChooserNative(title='Save the figure', transient_for=self.canvas.get_root(), action=Gtk.FileChooserAction.SAVE, modal=True)
A:matplotlib.backends.backend_gtk4.ff->gi.repository.Gtk.FileFilter()
A:matplotlib.backends.backend_gtk4.file->gi.repository.Gtk.FileChooserNative(title='Save the figure', transient_for=self.canvas.get_root(), action=Gtk.FileChooserAction.SAVE, modal=True).get_file()
A:matplotlib.backends.backend_gtk4.fmt->gi.repository.Gtk.FileChooserNative(title='Save the figure', transient_for=self.canvas.get_root(), action=Gtk.FileChooserAction.SAVE, modal=True).get_choice('format')
A:matplotlib.backends.backend_gtk4.parent->gi.repository.Gtk.FileChooserNative(title='Save the figure', transient_for=self.canvas.get_root(), action=Gtk.FileChooserAction.SAVE, modal=True).get_file().get_parent()
A:matplotlib.backends.backend_gtk4.mpl.rcParams['savefig.directory']->gi.repository.Gtk.FileChooserNative(title='Save the figure', transient_for=self.canvas.get_root(), action=Gtk.FileChooserAction.SAVE, modal=True).get_file().get_parent().get_path()
A:matplotlib.backends.backend_gtk4.msg->gi.repository.Gtk.MessageDialog(transient_for=self.canvas.get_root(), message_type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, modal=True, text=str(e))
A:matplotlib.backends.backend_gtk4.self._tool_box->gi.repository.Gtk.Box()
A:matplotlib.backends.backend_gtk4.self._message->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk4.button->gi.repository.Gtk.Button()
A:matplotlib.backends.backend_gtk4.signal->gi.repository.Gtk.Button().connect('clicked', self._call_tool, name)
A:matplotlib.backends.backend_gtk4.child->child.get_next_sibling().get_next_sibling()
A:matplotlib.backends.backend_gtk4.group_box->gi.repository.Gtk.Box()
A:matplotlib.backends.backend_gtk4.sep->gi.repository.Gtk.Separator()
A:matplotlib.backends.backend_gtk4.parts->key.capitalize().capitalize().split('+')
A:matplotlib.backends.backend_gtk4.section->gi.repository.Gtk.ShortcutsSection()
A:matplotlib.backends.backend_gtk4.group->gi.repository.Gtk.ShortcutsGroup()
A:matplotlib.backends.backend_gtk4.shortcut->gi.repository.Gtk.ShortcutsShortcut(accelerator=' '.join((self._normalize_shortcut(key) for key in self.toolmanager.get_tool_keymap(name) if self._is_valid_shortcut(key))), title=tool.name, subtitle=tool.description)
A:matplotlib.backends.backend_gtk4.window->gi.repository.Gtk.ShortcutsWindow(title='Help', modal=True, transient_for=self._figure.canvas.get_root())
A:matplotlib.backends.backend_gtk4.(w, h)->self.canvas.get_width_height()
A:matplotlib.backends.backend_gtk4.pb->gi.repository.GdkPixbuf.Pixbuf.new_from_data(f.getbuffer(), GdkPixbuf.Colorspace.RGB, True, 8, w, h, w * 4)
A:matplotlib.backends.backend_gtk4.clipboard->self.canvas.get_clipboard()
matplotlib.backends.backend_gtk4.FigureCanvasGTK4(self,figure=None)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.__init__(self,figure=None)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._draw_func(self,drawing_area,ctx,width,height)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._draw_rubberband(self,rect)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._get_key(self,keyval,keycode,state)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._mpl_coords(self,xy=None)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._mpl_modifiers(self,controller=None)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._post_draw(self,widget,ctx)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4._update_device_pixel_ratio(self,*args,**kwargs)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.button_press_event(self,controller,n_press,x,y)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.button_release_event(self,controller,n_press,x,y)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.destroy(self)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.draw(self)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.draw_idle(self)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.enter_notify_event(self,controller,x,y)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.flush_events(self)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.key_press_event(self,controller,keyval,keycode,state)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.key_release_event(self,controller,keyval,keycode,state)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.leave_notify_event(self,controller)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.motion_notify_event(self,controller,x,y)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.resize_event(self,area,width,height)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.scroll_event(self,controller,dx,dy)
matplotlib.backends.backend_gtk4.FigureCanvasGTK4.set_cursor(self,cursor)
matplotlib.backends.backend_gtk4.FigureManagerGTK4(_FigureManagerGTK)
matplotlib.backends.backend_gtk4.HelpGTK4(backend_tools.ToolHelpBase)
matplotlib.backends.backend_gtk4.HelpGTK4._is_valid_shortcut(self,key)
matplotlib.backends.backend_gtk4.HelpGTK4._normalize_shortcut(self,key)
matplotlib.backends.backend_gtk4.HelpGTK4.trigger(self,*args)
matplotlib.backends.backend_gtk4.NavigationToolbar2GTK4(self,canvas,window=None)
matplotlib.backends.backend_gtk4.NavigationToolbar2GTK4.__init__(self,canvas,window=None)
matplotlib.backends.backend_gtk4.NavigationToolbar2GTK4.save_figure(self,*args)
matplotlib.backends.backend_gtk4.SaveFigureGTK4(backend_tools.SaveFigureBase)
matplotlib.backends.backend_gtk4.SaveFigureGTK4.trigger(self,*args,**kwargs)
matplotlib.backends.backend_gtk4.ToolCopyToClipboardGTK4(backend_tools.ToolCopyToClipboardBase)
matplotlib.backends.backend_gtk4.ToolCopyToClipboardGTK4.trigger(self,*args,**kwargs)
matplotlib.backends.backend_gtk4.ToolbarGTK4(self,toolmanager)
matplotlib.backends.backend_gtk4.ToolbarGTK4.__init__(self,toolmanager)
matplotlib.backends.backend_gtk4.ToolbarGTK4._add_button(self,button,group,position)
matplotlib.backends.backend_gtk4.ToolbarGTK4._add_separator(self)
matplotlib.backends.backend_gtk4.ToolbarGTK4._call_tool(self,btn,name)
matplotlib.backends.backend_gtk4.ToolbarGTK4._find_child_at_position(self,group,position)
matplotlib.backends.backend_gtk4.ToolbarGTK4.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_gtk4.ToolbarGTK4.remove_toolitem(self,name)
matplotlib.backends.backend_gtk4.ToolbarGTK4.set_message(self,s)
matplotlib.backends.backend_gtk4.ToolbarGTK4.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_gtk4._BackendGTK4(_BackendGTK)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_macosx.py----------------------------------------
A:matplotlib.backends.backend_macosx.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerMac)
A:matplotlib.backends.backend_macosx.timer->self.new_timer(interval=0)
A:matplotlib.backends.backend_macosx.data_path->matplotlib.cbook._get_data_path('images')
A:matplotlib.backends.backend_macosx.(_, tooltips, image_names, _)->zip(*NavigationToolbar2.toolitems)
A:matplotlib.backends.backend_macosx.directory->os.path.expanduser(mpl.rcParams['savefig.directory'])
A:matplotlib.backends.backend_macosx.filename->_macosx.choose_save_file('Save the figure', directory, self.canvas.get_default_filename())
A:matplotlib.backends.backend_macosx.mpl.rcParams['savefig.directory']->os.path.dirname(filename)
A:matplotlib.backends.backend_macosx.toolfig->Figure(figsize=(6, 3))
A:matplotlib.backends.backend_macosx.canvas->FigureCanvasMac(toolfig)
A:matplotlib.backends.backend_macosx._tool->SubplotTool(self.canvas.figure, toolfig)
A:matplotlib.backends.backend_macosx.icon_path->str(cbook._get_data_path('images/matplotlib.pdf'))
matplotlib.backends.backend_macosx.FigureCanvasMac(self,figure)
matplotlib.backends.backend_macosx.FigureCanvasMac.__init__(self,figure)
matplotlib.backends.backend_macosx.FigureCanvasMac._draw_idle(self)
matplotlib.backends.backend_macosx.FigureCanvasMac._single_shot_timer(self,callback)
matplotlib.backends.backend_macosx.FigureCanvasMac.blit(self,bbox=None)
matplotlib.backends.backend_macosx.FigureCanvasMac.draw(self)
matplotlib.backends.backend_macosx.FigureCanvasMac.draw_idle(self)
matplotlib.backends.backend_macosx.FigureCanvasMac.resize(self,width,height)
matplotlib.backends.backend_macosx.FigureManagerMac(self,canvas,num)
matplotlib.backends.backend_macosx.FigureManagerMac.__init__(self,canvas,num)
matplotlib.backends.backend_macosx.FigureManagerMac._close_button_pressed(self)
matplotlib.backends.backend_macosx.FigureManagerMac.close(self)
matplotlib.backends.backend_macosx.FigureManagerMac.show(self)
matplotlib.backends.backend_macosx.FigureManagerMac.start_main_loop(cls)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac(self,canvas)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.__init__(self,canvas)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.prepare_configure_subplots(self)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.remove_rubberband(self)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.save_figure(self,*args)
matplotlib.backends.backend_macosx.TimerMac(_macosx.Timer,TimerBase)
matplotlib.backends.backend_macosx._BackendMac(_Backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk4cairo.py----------------------------------------
A:matplotlib.backends.backend_gtk4cairo.allocation->self.get_allocation()
matplotlib.backends.backend_gtk4cairo.FigureCanvasGTK4Cairo(FigureCanvasCairo,FigureCanvasGTK4)
matplotlib.backends.backend_gtk4cairo.FigureCanvasGTK4Cairo.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk4cairo._BackendGTK4Cairo(_BackendGTK4)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/_backend_pdf_ps.py----------------------------------------
A:matplotlib.backends._backend_pdf_ps.options->fontTools.subset.Options(glyph_names=True, recommended_glyphs=True)
A:matplotlib.backends._backend_pdf_ps.subsetter->fontTools.subset.Subsetter(options=options)
A:matplotlib.backends._backend_pdf_ps.fh->BytesIO()
A:matplotlib.backends._backend_pdf_ps.char_to_font->font_manager.get_font(fnames)._get_fontmap(s)
A:matplotlib.backends._backend_pdf_ps.parse->self._text2path.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends._backend_pdf_ps.font->font_manager.get_font(fnames)
A:matplotlib.backends._backend_pdf_ps.(l, b, w, h, d)->font_manager.get_font(fnames).get_str_bbox_and_descent(s)
A:matplotlib.backends._backend_pdf_ps.(w, h)->font_manager.get_font(fnames).get_width_height()
A:matplotlib.backends._backend_pdf_ps.d->font_manager.get_font(fnames).get_descent()
A:matplotlib.backends._backend_pdf_ps.fname->font_manager.findfont(prop, fontext='afm', directory=self._afm_font_dir)
A:matplotlib.backends._backend_pdf_ps.fnames->font_manager.fontManager._find_fonts_by_props(prop)
matplotlib.backends._backend_pdf_ps.CharacterTracker(self)
matplotlib.backends._backend_pdf_ps.CharacterTracker.__init__(self)
matplotlib.backends._backend_pdf_ps.CharacterTracker.track(self,font,s)
matplotlib.backends._backend_pdf_ps.CharacterTracker.track_glyph(self,font,glyph)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase(self,width,height)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.__init__(self,width,height)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase._get_font_afm(self,prop)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase._get_font_ttf(self,prop)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.flipy(self)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.get_canvas_width_height(self)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.option_image_nocomposite(self)
matplotlib.backends._backend_pdf_ps.RendererPDFPSBase.option_scale_image(self)
matplotlib.backends._backend_pdf_ps._cached_get_afm_from_fname(fname)
matplotlib.backends._backend_pdf_ps.get_glyphs_subset(fontfile,characters)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_wxagg.py----------------------------------------
A:matplotlib.backends.backend_wxagg.self.bitmap->_rgba_to_wx_bitmap(self.get_renderer().buffer_rgba())
A:matplotlib.backends.backend_wxagg.bitmap->_rgba_to_wx_bitmap(self.get_renderer().buffer_rgba())
A:matplotlib.backends.backend_wxagg.srcDC->wx.MemoryDC(bitmap)
A:matplotlib.backends.backend_wxagg.destDC->wx.MemoryDC(self.bitmap)
A:matplotlib.backends.backend_wxagg.x->int(bbox.x0)
A:matplotlib.backends.backend_wxagg.y->int(self.bitmap.GetHeight() - bbox.y1)
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg(FigureCanvasAgg,_FigureCanvasWxBase)
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.blit(self,bbox=None)
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.draw(self,drawDC=None)
matplotlib.backends.backend_wxagg.FigureFrameWxAgg(FigureFrameWx)
matplotlib.backends.backend_wxagg.FigureFrameWxAgg.get_canvas(self,fig)
matplotlib.backends.backend_wxagg._BackendWxAgg(_BackendWx)
matplotlib.backends.backend_wxagg._rgba_to_wx_bitmap(rgba)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_pdf.py----------------------------------------
A:matplotlib.backends.backend_pdf._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_pdf.length->len(s)
A:matplotlib.backends.backend_pdf.source_date_epoch->os.getenv('SOURCE_DATE_EPOCH')
A:matplotlib.backends.backend_pdf.source_date->datetime.datetime.today()
A:matplotlib.backends.backend_pdf.info['Trapped']->Name(info['Trapped'])
A:matplotlib.backends.backend_pdf.r->dict(self.__dict__).strftime('D:%Y%m%d%H%M%S')
A:matplotlib.backends.backend_pdf.z->dict(self.__dict__).utcoffset()
A:matplotlib.backends.backend_pdf.angle->math.radians(angle)
A:matplotlib.backends.backend_pdf.sin_angle->math.sin(angle)
A:matplotlib.backends.backend_pdf.cos_angle->math.cos(angle)
A:matplotlib.backends.backend_pdf.vertices->_calculate_quad_point_coordinates(x, y, width, height, angle)
A:matplotlib.backends.backend_pdf.(quadpoints, rect)->_get_coordinates_of_block(x, y, width, height, angle)
A:matplotlib.backends.backend_pdf._str_escapes->str.maketrans({'\\': '\\\\', '(': '\\(', ')': '\\)', '\n': '\\n', '\r': '\\r'})
A:matplotlib.backends.backend_pdf.name->self.file.hatchPattern(hatch_style)
A:matplotlib.backends.backend_pdf.self.name->self.file.hatchPattern(hatch_style).translate(self._hexify).encode('ascii')
A:matplotlib.backends.backend_pdf.op->matplotlib._api.deprecated('3.6')(property(lambda self: self.value))
A:matplotlib.backends.backend_pdf.self.extra->extra.copy()
A:matplotlib.backends.backend_pdf.self.compressobj->zlib.compressobj(mpl.rcParams['pdf.compression'])
A:matplotlib.backends.backend_pdf.self.file->BytesIO()
A:matplotlib.backends.backend_pdf.self.pos->self.file.tell()
A:matplotlib.backends.backend_pdf.dict['Filter']->Name('FlateDecode')
A:matplotlib.backends.backend_pdf.contents->self.file.getvalue()
A:matplotlib.backends.backend_pdf.self.len->len(contents)
A:matplotlib.backends.backend_pdf.compressed->self.compressobj.flush()
A:matplotlib.backends.backend_pdf.font->self._get_font_ttf(prop)
A:matplotlib.backends.backend_pdf.g->self._get_font_ttf(prop).load_glyph(glyph_id, LOAD_NO_SCALE)
A:matplotlib.backends.backend_pdf.d1->(np.array([g.horiAdvance, 0, *g.bbox]) * conv + 0.5).astype(int)
A:matplotlib.backends.backend_pdf.(v, c)->self._get_font_ttf(prop).get_path()
A:matplotlib.backends.backend_pdf.v->(v * conv + 0.5).astype(int)
A:matplotlib.backends.backend_pdf.(quads,)->numpy.nonzero(c == 3)
A:matplotlib.backends.backend_pdf.quads_mid_on->numpy.array(sorted({*quads_on} & {*quads - 1} & {*quads + 1}), int)
A:matplotlib.backends.backend_pdf.v[implicit]->((v[implicit - 1] + v[implicit + 1]) / 2).astype(int)
A:matplotlib.backends.backend_pdf.self._object_seq->itertools.count(1)
A:matplotlib.backends.backend_pdf.(fh, opened)->matplotlib.cbook.to_filehandle(filename, 'wb', return_opened=True)
A:matplotlib.backends.backend_pdf.self.tell_base->filename.tell()
A:matplotlib.backends.backend_pdf.fh->BytesIO()
A:matplotlib.backends.backend_pdf.self.rootObject->self.reserveObject('root')
A:matplotlib.backends.backend_pdf.self.pagesObject->self.reserveObject('pages')
A:matplotlib.backends.backend_pdf.self.fontObject->self.reserveObject('fonts')
A:matplotlib.backends.backend_pdf.self._extGStateObject->self.reserveObject('extended graphics states')
A:matplotlib.backends.backend_pdf.self.hatchObject->self.reserveObject('tiling patterns')
A:matplotlib.backends.backend_pdf.self.gouraudObject->self.reserveObject('Gouraud triangles')
A:matplotlib.backends.backend_pdf.self.XObjectObject->self.reserveObject('external objects')
A:matplotlib.backends.backend_pdf.self.resourceObject->self.reserveObject('resources')
A:matplotlib.backends.backend_pdf.self.infoDict->_create_pdf_info_dict('pdf', metadata or {})
A:matplotlib.backends.backend_pdf.self._character_tracker->_backend_pdf_ps.CharacterTracker()
A:matplotlib.backends.backend_pdf.contentObject->self.reserveObject('page contents')
A:matplotlib.backends.backend_pdf.annotsObject->self.reserveObject('annotations')
A:matplotlib.backends.backend_pdf.pageObject->self.reserveObject('page')
A:matplotlib.backends.backend_pdf.prefix->toStr(hashed, 26)
A:matplotlib.backends.backend_pdf.self.currentstream->Stream(id, len, self, extra, png)
A:matplotlib.backends.backend_pdf.filenames->matplotlib.font_manager.fontManager._find_fonts_by_props(fontprop)
A:matplotlib.backends.backend_pdf.Fx->self.fontName(filename)
A:matplotlib.backends.backend_pdf.dvi_info->self.dviFontInfo.get(dvifont.texname)
A:matplotlib.backends.backend_pdf.tex_font_map->matplotlib.dviread.PsfontsMap(dviread._find_tex_file('pdftex.map'))
A:matplotlib.backends.backend_pdf.pdfname->self.file.dviFontName(dvifont)
A:matplotlib.backends.backend_pdf.self.dviFontInfo[dvifont.texname]->types.SimpleNamespace(dvifont=dvifont, pdfname=pdfname, fontfile=psfont.filename, basefont=psfont.psname, encodingfile=psfont.encoding, effects=psfont.effects)
A:matplotlib.backends.backend_pdf.fonts[Fx]->self.embedTTF(filename, chars)
A:matplotlib.backends.backend_pdf.chars->self._character_tracker.used.get(filename)
A:matplotlib.backends.backend_pdf.fontname->self._get_font_ttf(prop).get_fontname()
A:matplotlib.backends.backend_pdf.fontdictObject->self.reserveObject('font dictionary')
A:matplotlib.backends.backend_pdf.widthsObject->self.reserveObject('font widths')
A:matplotlib.backends.backend_pdf.fontdict['BaseFont']->Name(t1font.prop['FontName'])
A:matplotlib.backends.backend_pdf.t1font->t1font.transform(fontinfo.effects).transform(fontinfo.effects)
A:matplotlib.backends.backend_pdf.fontdesc->self.createType1Descriptor(t1font, fontinfo.fontfile)
A:matplotlib.backends.backend_pdf.fontdescObject->self.reserveObject('font descriptor')
A:matplotlib.backends.backend_pdf.fontfileObject->self.reserveObject('font file stream')
A:matplotlib.backends.backend_pdf.ft2font->get_font(fontfile)
A:matplotlib.backends.backend_pdf.charprocsObject->self.reserveObject('character procs')
A:matplotlib.backends.backend_pdf.s->ord(cp1252.decoding_table[charcode])
A:matplotlib.backends.backend_pdf.descriptor['MaxWidth']->max(widths)
A:matplotlib.backends.backend_pdf.multi_byte_chars->set()
A:matplotlib.backends.backend_pdf.gind->full_font.get_char_index(ccode)
A:matplotlib.backends.backend_pdf.glyph_name->self._get_font_ttf(prop).get_glyph_name(glyph_idx)
A:matplotlib.backends.backend_pdf.rawcharprocs->_get_pdf_charprocs(filename, glyph_ids)
A:matplotlib.backends.backend_pdf.charprocObject->self.reserveObject('charProc')
A:matplotlib.backends.backend_pdf.cidFontDictObject->self.reserveObject('CID font dictionary')
A:matplotlib.backends.backend_pdf.type0FontDictObject->self.reserveObject('Type 0 font dictionary')
A:matplotlib.backends.backend_pdf.cidToGidMapObject->self.reserveObject('CIDToGIDMap stream')
A:matplotlib.backends.backend_pdf.wObject->self.reserveObject('Type 0 widths')
A:matplotlib.backends.backend_pdf.toUnicodeMapObject->self.reserveObject('ToUnicode map')
A:matplotlib.backends.backend_pdf.subset_str->''.join((chr(c) for c in characters))
A:matplotlib.backends.backend_pdf.fontdata->_backend_pdf_ps.get_glyphs_subset(filename, subset_str)
A:matplotlib.backends.backend_pdf.glyph->self._get_font_ttf(prop).load_char(ccode, flags=LOAD_NO_SCALE | LOAD_NO_HINTING)
A:matplotlib.backends.backend_pdf.cid_to_gid_map[ccode]->chr(gind)
A:matplotlib.backends.backend_pdf.max_ccode->max(ccode, max_ccode)
A:matplotlib.backends.backend_pdf.max_width->max(max_width, width)
A:matplotlib.backends.backend_pdf.end->min(65535, end)
A:matplotlib.backends.backend_pdf.cid_to_gid_map->''.join(cid_to_gid_map).encode('utf-16be')
A:matplotlib.backends.backend_pdf.ps_name->Name(ps_name)
A:matplotlib.backends.backend_pdf.state->self._soft_mask_states.get(smask, None)
A:matplotlib.backends.backend_pdf.groupOb->self.reserveObject('transparency group for soft mask')
A:matplotlib.backends.backend_pdf.edge->tuple(edge)
A:matplotlib.backends.backend_pdf.face->tuple(face)
A:matplotlib.backends.backend_pdf.pattern->self.hatchPatterns.get(hatch_style, None)
A:matplotlib.backends.backend_pdf.hatchDict->dict()
A:matplotlib.backends.backend_pdf.ob->self.reserveObject('path %d' % len(self.paths))
A:matplotlib.backends.backend_pdf.gouraudDict->dict()
A:matplotlib.backends.backend_pdf.flat_points->points.reshape((shape[0] * shape[1], 2)).reshape((shape[0] * shape[1], 2))
A:matplotlib.backends.backend_pdf.flat_colors->colors.reshape((shape[0] * shape[1], colordim))
A:matplotlib.backends.backend_pdf.streamarr->numpy.empty((shape[0] * shape[1],), dtype=[('flags', 'u1'), ('points', '>u4', (2,)), ('colors', 'u1', (colordim,))])
A:matplotlib.backends.backend_pdf.entry->self._images.get(id(image), None)
A:matplotlib.backends.backend_pdf.rgb->numpy.array(rgb, order='C')
A:matplotlib.backends.backend_pdf.alpha->numpy.array(alpha, order='C')
A:matplotlib.backends.backend_pdf.buffer->BytesIO()
A:matplotlib.backends.backend_pdf.(length, type)->struct.unpack(b'!L4s', buffer.read(8))
A:matplotlib.backends.backend_pdf.data->data.squeeze(axis=-1).squeeze(axis=-1)
A:matplotlib.backends.backend_pdf.bit_depth->int(data[8])
A:matplotlib.backends.backend_pdf.img->PIL.Image.fromarray(rgb8, mode='P')
A:matplotlib.backends.backend_pdf.img_colors->PIL.Image.fromarray(rgb8, mode='P').getcolors(maxcolors=256)
A:matplotlib.backends.backend_pdf.num_colors->len(img_colors)
A:matplotlib.backends.backend_pdf.palette->numpy.array([comp for (_, color) in img_colors for comp in color], dtype=np.uint8)
A:matplotlib.backends.backend_pdf.indices->numpy.argsort(palette24).astype(np.uint8)
A:matplotlib.backends.backend_pdf.(png_data, bit_depth, palette)->self._writePng(img)
A:matplotlib.backends.backend_pdf.(png_data, _, _)->self._writePng(img)
A:matplotlib.backends.backend_pdf.(data, adata)->self._unpack(img)
A:matplotlib.backends.backend_pdf.smaskObject->self.reserveObject('smask')
A:matplotlib.backends.backend_pdf.pathops->self.pathOperations(path, trans, simplify=False)
A:matplotlib.backends.backend_pdf.result->self.markers.get(key)
A:matplotlib.backends.backend_pdf.bbox->bbox.padded(padding).padded(padding)
A:matplotlib.backends.backend_pdf.extents->list(bbox.extents)
A:matplotlib.backends.backend_pdf.cmds->self.pathOperations(path, transform, clip, simplify=simplify, sketch=sketch)
A:matplotlib.backends.backend_pdf.id->next(self._object_seq)
A:matplotlib.backends.backend_pdf.self.infoObject->self.reserveObject('info')
A:matplotlib.backends.backend_pdf._afm_font_dir->matplotlib.cbook._get_data_path('fonts/pdfcorefonts')
A:matplotlib.backends.backend_pdf.self.gc->self.new_gc()
A:matplotlib.backends.backend_pdf.orig_fill->getattr(gc, '_fillcolor', (0.0, 0.0, 0.0))
A:matplotlib.backends.backend_pdf.orig_alphas->getattr(gc, '_effective_alphas', (1.0, 1.0))
A:matplotlib.backends.backend_pdf.delta->self.gc.delta(gc)
A:matplotlib.backends.backend_pdf.imob->self.file.imageObject(im)
A:matplotlib.backends.backend_pdf.(tr1, tr2, tr3, tr4, tr5, tr6)->transform.frozen().to_values()
A:matplotlib.backends.backend_pdf.facecolors->numpy.asarray(facecolors)
A:matplotlib.backends.backend_pdf.edgecolors->numpy.asarray(edgecolors)
A:matplotlib.backends.backend_pdf.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_pdf.padding->numpy.max(linewidths)
A:matplotlib.backends.backend_pdf.len_marker_path->len(marker_path)
A:matplotlib.backends.backend_pdf.uses->len(path)
A:matplotlib.backends.backend_pdf.fill->gc.fill(rgbFace)
A:matplotlib.backends.backend_pdf.stroke->gc.stroke()
A:matplotlib.backends.backend_pdf.marker->self.file.markerObject(marker_path, marker_trans, fill, stroke, self.gc._linewidth, gc.get_joinstyle(), gc.get_capstyle())
A:matplotlib.backends.backend_pdf.points->points.reshape((shape[0] * shape[1], 2)).reshape((shape[0] * shape[1], 2))
A:matplotlib.backends.backend_pdf.tpoints->tpoints.reshape(shape).reshape(shape)
A:matplotlib.backends.backend_pdf.(name, _)->self.file.addGouraudTriangles(tpoints, colors)
A:matplotlib.backends.backend_pdf.(_, smask_ob)->self.file.addGouraudTriangles(tpoints, alpha)
A:matplotlib.backends.backend_pdf.gstate->self.file._soft_mask_state(smask_ob)
A:matplotlib.backends.backend_pdf.(width, height, descent, glyphs, rects)->self._text2path.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_pdf.a->math.radians(angle)
A:matplotlib.backends.backend_pdf.texmanager->self.get_texmanager()
A:matplotlib.backends.backend_pdf.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_pdf.dvifile->self.get_texmanager().make_dvi(s, fontsize)
A:matplotlib.backends.backend_pdf.mytrans->Affine2D().rotate_deg(angle).translate(x, y)
A:matplotlib.backends.backend_pdf.(curx, cury)->Affine2D().rotate_deg(angle).translate(x, y).transform((elt[1], elt[2]))
A:matplotlib.backends.backend_pdf.boxgc->self.new_gc()
A:matplotlib.backends.backend_pdf.path->Path([[x1, y1], [x1 + w, y1], [x1 + w, y1 + h], [x1, y1 + h], [0, 0]], pathops)
A:matplotlib.backends.backend_pdf.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_pdf.ft_name->self.file.fontName(ft_object.fname)
A:matplotlib.backends.backend_pdf.d->dict(self.__dict__)
A:matplotlib.backends.backend_pdf.parent->GraphicsContextPdf(self.file)
A:matplotlib.backends.backend_pdf.(path, affine)->clippath.get_transformed_path_and_affine()
A:matplotlib.backends.backend_pdf.ours->numpy.asarray(ours)
A:matplotlib.backends.backend_pdf.theirs->numpy.asarray(theirs)
A:matplotlib.backends.backend_pdf.different->bool(ours != theirs)
A:matplotlib.backends.backend_pdf.fillcolor->getattr(other, '_fillcolor', self._fillcolor)
A:matplotlib.backends.backend_pdf.effective_alphas->getattr(other, '_effective_alphas', self._effective_alphas)
A:matplotlib.backends.backend_pdf.self._file->PdfFile(filename, metadata=metadata)
A:matplotlib.backends.backend_pdf.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(figure)
A:matplotlib.backends.backend_pdf.figure.canvas->FigureCanvasPdf(figure)
A:matplotlib.backends.backend_pdf.file->PdfFile(filename, metadata=metadata)
A:matplotlib.backends.backend_pdf.renderer->MixedModeRenderer(self.figure, width, height, dpi, RendererPdf(file, dpi, height, width), bbox_inches_restore=bbox_inches_restore)
matplotlib.backends.backend_pdf.FigureCanvasPdf(FigureCanvasBase)
matplotlib.backends.backend_pdf.FigureCanvasPdf.draw(self)
matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype(self)
matplotlib.backends.backend_pdf.FigureCanvasPdf.print_pdf(self,filename,*,bbox_inches_restore=None,metadata=None)
matplotlib.backends.backend_pdf.GraphicsContextPdf(self,file)
matplotlib.backends.backend_pdf.GraphicsContextPdf.__init__(self,file)
matplotlib.backends.backend_pdf.GraphicsContextPdf.__repr__(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.alpha_cmd(self,alpha,forced,effective_alphas)
matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyle_cmd(self,style)
matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd(self,cliprect,clippath)
matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties(self,other)
matplotlib.backends.backend_pdf.GraphicsContextPdf.dash_cmd(self,dashes)
matplotlib.backends.backend_pdf.GraphicsContextPdf.delta(self,other)
matplotlib.backends.backend_pdf.GraphicsContextPdf.fill(self,*args)
matplotlib.backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd(self,rgb)
matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.hatch_cmd(self,hatch,hatch_color)
matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd(self,style)
matplotlib.backends.backend_pdf.GraphicsContextPdf.linewidth_cmd(self,width)
matplotlib.backends.backend_pdf.GraphicsContextPdf.paint(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.pop(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.push(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.rgb_cmd(self,rgb)
matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke(self)
matplotlib.backends.backend_pdf.Name(self,name)
matplotlib.backends.backend_pdf.Name.__eq__(self,other)
matplotlib.backends.backend_pdf.Name.__hash__(self)
matplotlib.backends.backend_pdf.Name.__init__(self,name)
matplotlib.backends.backend_pdf.Name.__lt__(self,other)
matplotlib.backends.backend_pdf.Name.__repr__(self)
matplotlib.backends.backend_pdf.Name.__str__(self)
matplotlib.backends.backend_pdf.Name.hexify(match)
matplotlib.backends.backend_pdf.Name.pdfRepr(self)
matplotlib.backends.backend_pdf.Op(Enum)
matplotlib.backends.backend_pdf.Op.paint_path(cls,fill,stroke)
matplotlib.backends.backend_pdf.Op.pdfRepr(self)
matplotlib.backends.backend_pdf.Operator(self,op)
matplotlib.backends.backend_pdf.Operator.__init__(self,op)
matplotlib.backends.backend_pdf.Operator.__repr__(self)
matplotlib.backends.backend_pdf.Operator.pdfRepr(self)
matplotlib.backends.backend_pdf.PdfFile(self,filename,metadata=None)
matplotlib.backends.backend_pdf.PdfFile.__init__(self,filename,metadata=None)
matplotlib.backends.backend_pdf.PdfFile._embedTeXFont(self,fontinfo)
matplotlib.backends.backend_pdf.PdfFile._get_subsetted_psname(self,ps_name,charmap)
matplotlib.backends.backend_pdf.PdfFile._get_xobject_glyph_name(self,filename,glyph_name)
matplotlib.backends.backend_pdf.PdfFile._soft_mask_state(self,smask)
matplotlib.backends.backend_pdf.PdfFile._unpack(self,im)
matplotlib.backends.backend_pdf.PdfFile._writeImg(self,data,id,smask=None)
matplotlib.backends.backend_pdf.PdfFile._writePng(self,img)
matplotlib.backends.backend_pdf.PdfFile._write_afm_font(self,filename)
matplotlib.backends.backend_pdf.PdfFile._write_annotations(self)
matplotlib.backends.backend_pdf.PdfFile._write_soft_mask_groups(self)
matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles(self,points,colors)
matplotlib.backends.backend_pdf.PdfFile.alphaState(self,alpha)
matplotlib.backends.backend_pdf.PdfFile.beginStream(self,id,len,extra=None,png=None)
matplotlib.backends.backend_pdf.PdfFile.close(self)
matplotlib.backends.backend_pdf.PdfFile.createType1Descriptor(self,t1font,fontfile)
matplotlib.backends.backend_pdf.PdfFile.dviFontName(self,dvifont)
matplotlib.backends.backend_pdf.PdfFile.embedTTF(self,filename,characters)
matplotlib.backends.backend_pdf.PdfFile.endStream(self)
matplotlib.backends.backend_pdf.PdfFile.finalize(self)
matplotlib.backends.backend_pdf.PdfFile.fontName(self,fontprop)
matplotlib.backends.backend_pdf.PdfFile.hatchPattern(self,hatch_style)
matplotlib.backends.backend_pdf.PdfFile.imageObject(self,image)
matplotlib.backends.backend_pdf.PdfFile.markerObject(self,path,trans,fill,stroke,lw,joinstyle,capstyle)
matplotlib.backends.backend_pdf.PdfFile.newPage(self,width,height)
matplotlib.backends.backend_pdf.PdfFile.newTextnote(self,text,positionRect=[-100,-100,0,0])
matplotlib.backends.backend_pdf.PdfFile.output(self,*data)
matplotlib.backends.backend_pdf.PdfFile.outputStream(self,ref,data,*,extra=None)
matplotlib.backends.backend_pdf.PdfFile.pathCollectionObject(self,gc,path,trans,padding,filled,stroked)
matplotlib.backends.backend_pdf.PdfFile.pathOperations(path,transform,clip=None,simplify=None,sketch=None)
matplotlib.backends.backend_pdf.PdfFile.recordXref(self,id)
matplotlib.backends.backend_pdf.PdfFile.reserveObject(self,name='')
matplotlib.backends.backend_pdf.PdfFile.write(self,data)
matplotlib.backends.backend_pdf.PdfFile.writeExtGSTates(self)
matplotlib.backends.backend_pdf.PdfFile.writeFonts(self)
matplotlib.backends.backend_pdf.PdfFile.writeGouraudTriangles(self)
matplotlib.backends.backend_pdf.PdfFile.writeHatches(self)
matplotlib.backends.backend_pdf.PdfFile.writeImages(self)
matplotlib.backends.backend_pdf.PdfFile.writeInfoDict(self)
matplotlib.backends.backend_pdf.PdfFile.writeMarkers(self)
matplotlib.backends.backend_pdf.PdfFile.writeObject(self,object,contents)
matplotlib.backends.backend_pdf.PdfFile.writePath(self,path,transform,clip=False,sketch=None)
matplotlib.backends.backend_pdf.PdfFile.writePathCollectionTemplates(self)
matplotlib.backends.backend_pdf.PdfFile.writeTrailer(self)
matplotlib.backends.backend_pdf.PdfFile.writeXref(self)
matplotlib.backends.backend_pdf.PdfPages(self,filename,keep_empty=True,metadata=None)
matplotlib.backends.backend_pdf.PdfPages.__enter__(self)
matplotlib.backends.backend_pdf.PdfPages.__exit__(self,exc_type,exc_val,exc_tb)
matplotlib.backends.backend_pdf.PdfPages.__init__(self,filename,keep_empty=True,metadata=None)
matplotlib.backends.backend_pdf.PdfPages.attach_note(self,text,positionRect=[-100,-100,0,0])
matplotlib.backends.backend_pdf.PdfPages.close(self)
matplotlib.backends.backend_pdf.PdfPages.get_pagecount(self)
matplotlib.backends.backend_pdf.PdfPages.infodict(self)
matplotlib.backends.backend_pdf.PdfPages.savefig(self,figure=None,**kwargs)
matplotlib.backends.backend_pdf.Reference(self,id)
matplotlib.backends.backend_pdf.Reference.__init__(self,id)
matplotlib.backends.backend_pdf.Reference.__repr__(self)
matplotlib.backends.backend_pdf.Reference.pdfRepr(self)
matplotlib.backends.backend_pdf.Reference.write(self,contents,file)
matplotlib.backends.backend_pdf.RendererPdf(self,file,image_dpi,height,width)
matplotlib.backends.backend_pdf.RendererPdf.__init__(self,file,image_dpi,height,width)
matplotlib.backends.backend_pdf.RendererPdf._draw_xobject_glyph(self,font,fontsize,glyph_idx,x,y)
matplotlib.backends.backend_pdf.RendererPdf._setup_textpos(self,x,y,angle,oldx=0,oldy=0,oldangle=0)
matplotlib.backends.backend_pdf.RendererPdf.check_gc(self,gc,fillcolor=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles(self,gc,points,colors,trans)
matplotlib.backends.backend_pdf.RendererPdf.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_pdf.RendererPdf.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offset_trans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_pdf.RendererPdf.draw_tex(self,gc,x,y,s,prop,angle,*,mtext=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_pdf.RendererPdf.encode_string(self,s,fonttype)
matplotlib.backends.backend_pdf.RendererPdf.finalize(self)
matplotlib.backends.backend_pdf.RendererPdf.get_image_magnification(self)
matplotlib.backends.backend_pdf.RendererPdf.new_gc(self)
matplotlib.backends.backend_pdf.Stream(self,id,len,file,extra=None,png=None)
matplotlib.backends.backend_pdf.Stream.__init__(self,id,len,file,extra=None,png=None)
matplotlib.backends.backend_pdf.Stream._flush(self)
matplotlib.backends.backend_pdf.Stream._writeHeader(self)
matplotlib.backends.backend_pdf.Stream.end(self)
matplotlib.backends.backend_pdf.Stream.write(self,data)
matplotlib.backends.backend_pdf.Verbatim(self,x)
matplotlib.backends.backend_pdf.Verbatim.__init__(self,x)
matplotlib.backends.backend_pdf.Verbatim.pdfRepr(self)
matplotlib.backends.backend_pdf._BackendPdf(_Backend)
matplotlib.backends.backend_pdf._calculate_quad_point_coordinates(x,y,width,height,angle=0)
matplotlib.backends.backend_pdf._create_pdf_info_dict(backend,metadata)
matplotlib.backends.backend_pdf._datetime_to_pdf(d)
matplotlib.backends.backend_pdf._fill(strings,linelen=75)
matplotlib.backends.backend_pdf._font_supports_glyph(fonttype,glyph)
matplotlib.backends.backend_pdf._get_coordinates_of_block(x,y,width,height,angle=0)
matplotlib.backends.backend_pdf._get_link_annotation(gc,x,y,width,height,angle=0)
matplotlib.backends.backend_pdf._get_pdf_charprocs(font_path,glyph_ids)
matplotlib.backends.backend_pdf.fill(strings,linelen=75)
matplotlib.backends.backend_pdf.pdfRepr(obj)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_cairo.py----------------------------------------
A:matplotlib.backends.backend_cairo.cur->numpy.asarray(ctx.get_current_point())
A:matplotlib.backends.backend_cairo.name->attr('name')
A:matplotlib.backends.backend_cairo.slant->getattr(cairo, f"FONT_SLANT_{attr('style').upper()}")
A:matplotlib.backends.backend_cairo.weight->attr('weight')
A:matplotlib.backends.backend_cairo.self.gc->GraphicsContextCairo(renderer=self)
A:matplotlib.backends.backend_cairo.self.text_ctx->cairocffi.Context(cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1))
A:matplotlib.backends.backend_cairo.surface->cairocffi.SVGSurface(fobj, width_in_points, height_in_points)
A:matplotlib.backends.backend_cairo.ext->cairocffi.SVGSurface(fobj, width_in_points, height_in_points).get_extents()
A:matplotlib.backends.backend_cairo.(rect, *rest)->cairocffi.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True).copy_clip_rectangle_list()
A:matplotlib.backends.backend_cairo.self.gc.ctx->cairocffi.Context(surface)
A:matplotlib.backends.backend_cairo.marker_path->cairocffi.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True).copy_path_flat()
A:matplotlib.backends.backend_cairo.(x1, y1, x2, y2)->cairocffi.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True).fill_extents()
A:matplotlib.backends.backend_cairo.im->cbook._unmultiplied_rgba8888_to_premultiplied_argb32(im[::-1])
A:matplotlib.backends.backend_cairo.opts->cairocffi.FontOptions()
A:matplotlib.backends.backend_cairo.(width, height, descent, glyphs, rects)->self._text2path.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_cairo.(width, height, descent, *_)->self._text2path.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_cairo._alpha->self.get_alpha()
A:matplotlib.backends.backend_cairo.(x, y, w, h)->numpy.round(rectangle.bounds)
A:matplotlib.backends.backend_cairo.(tpath, affine)->path.get_transformed_path_and_affine()
A:matplotlib.backends.backend_cairo.self._linewidth->float(w)
A:matplotlib.backends.backend_cairo.self._cached_renderer->RendererCairo(self.figure.dpi)
A:matplotlib.backends.backend_cairo.sw->cairocffi.SVGSurface(fobj, width_in_points, height_in_points).get_width()
A:matplotlib.backends.backend_cairo.sh->cairocffi.SVGSurface(fobj, width_in_points, height_in_points).get_height()
A:matplotlib.backends.backend_cairo.x0->math.ceil(bbox.x0)
A:matplotlib.backends.backend_cairo.x1->math.floor(bbox.x1)
A:matplotlib.backends.backend_cairo.y0->math.ceil(sh - bbox.y1)
A:matplotlib.backends.backend_cairo.y1->math.floor(sh - bbox.y0)
A:matplotlib.backends.backend_cairo.data->numpy.frombuffer(surface.get_data(), np.uint32).reshape((sh, sw))[sls].copy()
A:matplotlib.backends.backend_cairo.(width, height)->self.get_width_height()
A:matplotlib.backends.backend_cairo.buf->self._get_printed_image_surface().get_data()
A:matplotlib.backends.backend_cairo.(w_in, h_in)->self.figure.get_size_inches()
A:matplotlib.backends.backend_cairo.fobj->gzip.GzipFile(None, 'wb', fileobj=fobj)
A:matplotlib.backends.backend_cairo.print_pdf->functools.partialmethod(_save, 'pdf')
A:matplotlib.backends.backend_cairo.print_ps->functools.partialmethod(_save, 'ps')
A:matplotlib.backends.backend_cairo.print_svg->functools.partialmethod(_save, 'svg')
A:matplotlib.backends.backend_cairo.print_svgz->functools.partialmethod(_save, 'svgz')
A:matplotlib.backends.backend_cairo.ctx->cairocffi.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True)
matplotlib.backends.backend_cairo.FigureCanvasCairo(FigureCanvasBase)
matplotlib.backends.backend_cairo.FigureCanvasCairo._get_printed_image_surface(self)
matplotlib.backends.backend_cairo.FigureCanvasCairo._renderer(self)
matplotlib.backends.backend_cairo.FigureCanvasCairo._save(self,fmt,fobj,*,orientation='portrait')
matplotlib.backends.backend_cairo.FigureCanvasCairo.copy_from_bbox(self,bbox)
matplotlib.backends.backend_cairo.FigureCanvasCairo.get_renderer(self)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_png(self,fobj)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_rgba(self,fobj)
matplotlib.backends.backend_cairo.FigureCanvasCairo.restore_region(self,region)
matplotlib.backends.backend_cairo.GraphicsContextCairo(self,renderer)
matplotlib.backends.backend_cairo.GraphicsContextCairo.__init__(self,renderer)
matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb(self)
matplotlib.backends.backend_cairo.GraphicsContextCairo.restore(self)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha(self,alpha)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_antialiased(self,b)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle(self,cs)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path(self,path)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle(self,rectangle)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes(self,offset,dashes)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground(self,fg,isRGBA=None)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle(self,js)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth(self,w)
matplotlib.backends.backend_cairo.RendererCairo(self,dpi)
matplotlib.backends.backend_cairo.RendererCairo.__init__(self,dpi)
matplotlib.backends.backend_cairo.RendererCairo._draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_cairo.RendererCairo._fill_and_stroke(self,ctx,fill_c,alpha,alpha_overrides)
matplotlib.backends.backend_cairo.RendererCairo.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_cairo.RendererCairo.draw_markers(self,gc,marker_path,marker_trans,path,transform,rgbFace=None)
matplotlib.backends.backend_cairo.RendererCairo.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_cairo.RendererCairo.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height(self)
matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_cairo.RendererCairo.new_gc(self)
matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels(self,points)
matplotlib.backends.backend_cairo.RendererCairo.set_context(self,ctx)
matplotlib.backends.backend_cairo.RendererCairo.set_ctx_from_surface(self,surface)
matplotlib.backends.backend_cairo.RendererCairo.set_width_height(self,width,height)
matplotlib.backends.backend_cairo._BackendCairo(_Backend)
matplotlib.backends.backend_cairo._CairoRegion(self,slices,data)
matplotlib.backends.backend_cairo._CairoRegion.__init__(self,slices,data)
matplotlib.backends.backend_cairo._RendererGTKCairo(RendererCairo)
matplotlib.backends.backend_cairo._RendererGTKCairo.set_context(self,ctx)
matplotlib.backends.backend_cairo._append_path(ctx,path,transform,clip=None)
matplotlib.backends.backend_cairo._cairo_font_args_from_font_prop(prop)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qt5agg.py----------------------------------------
matplotlib.backends.backend_qt5agg._BackendQT5Agg(_BackendQTAgg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qt5cairo.py----------------------------------------
matplotlib.backends.backend_qt5cairo._BackendQT5Cairo(_BackendQTCairo)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_svg.py----------------------------------------
A:matplotlib.backends.backend_svg._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_svg.s->s.replace('>', '&gt;').replace('>', '&gt;')
A:matplotlib.backends.backend_svg._escape_xml_comment->re.compile('-(?=-)')
A:matplotlib.backends.backend_svg.data->''.join(self.__data)
A:matplotlib.backends.backend_svg.tag->self.__tags.pop()
A:matplotlib.backends.backend_svg.k->_escape_cdata(k)
A:matplotlib.backends.backend_svg.v->_quote_escape_attrib(v)
A:matplotlib.backends.backend_svg.value->value.to_values().to_values()
A:matplotlib.backends.backend_svg.self.writer->XMLWriter(svgwriter)
A:matplotlib.backends.backend_svg.basename->getattr(svgwriter, 'name', '')
A:matplotlib.backends.backend_svg.self._image_counter->itertools.count()
A:matplotlib.backends.backend_svg.self._glyph_map->dict()
A:matplotlib.backends.backend_svg.str_height->_short_float_fmt(height)
A:matplotlib.backends.backend_svg.str_width->_short_float_fmt(width)
A:matplotlib.backends.backend_svg.self._start_id->self.writer.start('svg', width='%spt' % str_width, height='%spt' % str_height, viewBox='0 0 %s %s' % (str_width, str_height), xmlns='http://www.w3.org/2000/svg', version='1.1', attrib={'xmlns:xlink': 'http://www.w3.org/1999/xlink'})
A:matplotlib.backends.backend_svg.date->datetime.datetime.fromtimestamp(int(date), datetime.timezone.utc)
A:matplotlib.backends.backend_svg.metadata['Date']->datetime.datetime.today().isoformat()
A:matplotlib.backends.backend_svg.mid->ensure_metadata(mid)
A:matplotlib.backends.backend_svg.uri->metadata.pop('Type', None)
A:matplotlib.backends.backend_svg.info->metadata.pop(key, None)
A:matplotlib.backends.backend_svg.agents->metadata.pop(key, None)
A:matplotlib.backends.backend_svg.keywords->metadata.pop('Keywords', None)
A:matplotlib.backends.backend_svg.default_style->_generate_css({'stroke-linejoin': 'round', 'stroke-linecap': 'butt'})
A:matplotlib.backends.backend_svg.salt->str(uuid.uuid4())
A:matplotlib.backends.backend_svg.m->hashlib.sha256()
A:matplotlib.backends.backend_svg.rgbFace->tuple(rgbFace)
A:matplotlib.backends.backend_svg.edge->tuple(edge)
A:matplotlib.backends.backend_svg.oid->gc.get_gid()
A:matplotlib.backends.backend_svg.path_data->self._convert_path(path, simplify=False)
A:matplotlib.backends.backend_svg.fill->rgb2hex(face)
A:matplotlib.backends.backend_svg.hatch_style['stroke-opacity']->str(stroke[3])
A:matplotlib.backends.backend_svg.forced_alpha->gc.get_forced_alpha()
A:matplotlib.backends.backend_svg.attrib['fill-opacity']->_short_float_fmt(rgbFace[3])
A:matplotlib.backends.backend_svg.attrib['fill']->rgb2hex(rgbFace)
A:matplotlib.backends.backend_svg.attrib['opacity']->_short_float_fmt(alpha)
A:matplotlib.backends.backend_svg.(offset, seq)->gc.get_dashes()
A:matplotlib.backends.backend_svg.attrib['stroke-dasharray']->','.join((_short_float_fmt(val) for val in seq))
A:matplotlib.backends.backend_svg.attrib['stroke-dashoffset']->_short_float_fmt(float(offset))
A:matplotlib.backends.backend_svg.linewidth->gc.get_linewidth()
A:matplotlib.backends.backend_svg.rgb->gc.get_rgb()
A:matplotlib.backends.backend_svg.attrib['stroke']->rgb2hex(rgb)
A:matplotlib.backends.backend_svg.attrib['stroke-opacity']->_short_float_fmt(rgb[3])
A:matplotlib.backends.backend_svg.attrib['stroke-width']->_short_float_fmt(linewidth)
A:matplotlib.backends.backend_svg.attrib['stroke-linejoin']->gc.get_joinstyle()
A:matplotlib.backends.backend_svg.cliprect->gc.get_clip_rectangle()
A:matplotlib.backends.backend_svg.(clippath, clippath_trans)->gc.get_clip_path()
A:matplotlib.backends.backend_svg.clippath_trans->self._make_flip_transform(clippath_trans)
A:matplotlib.backends.backend_svg.clip->self._clipd.get(dictkey)
A:matplotlib.backends.backend_svg.trans_and_flip->self._make_flip_transform(trans)
A:matplotlib.backends.backend_svg.style->_generate_css(style)
A:matplotlib.backends.backend_svg.attrib['x']->_short_float_fmt(ax)
A:matplotlib.backends.backend_svg.attrib['y']->_short_float_fmt(ay)
A:matplotlib.backends.backend_svg.attrib['style']->_generate_css(style)
A:matplotlib.backends.backend_svg.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_svg.transform->mtext.get_transform()
A:matplotlib.backends.backend_svg.d->self._convert_path(path, transform, simplify=False)
A:matplotlib.backends.backend_svg.url->gc.get_url()
A:matplotlib.backends.backend_svg.clip_attrs->self._get_clip_attrs(gc)
A:matplotlib.backends.backend_svg.avg_color->numpy.average(colors, axis=0)
A:matplotlib.backends.backend_svg.tpoints->self._make_flip_transform(trans).transform(points)
A:matplotlib.backends.backend_svg.buf->BytesIO()
A:matplotlib.backends.backend_svg.filename->'{}.image{}.png'.format(self.basename, next(self._image_counter))
A:matplotlib.backends.backend_svg.alpha->gc.get_alpha()
A:matplotlib.backends.backend_svg.attrib['transform']->_generate_transform([('translate', (x, y)), ('rotate', (-angle,))])
A:matplotlib.backends.backend_svg.char_id->self._adjust_char_id(char_id)
A:matplotlib.backends.backend_svg.color->rgb2hex(gc.get_rgb())
A:matplotlib.backends.backend_svg.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_svg.style['opacity']->_short_float_fmt(alpha)
A:matplotlib.backends.backend_svg.font->text2path._get_font(prop)
A:matplotlib.backends.backend_svg._glyphs->text2path.get_glyphs_mathtext(prop, s, glyph_map=glyph_map, return_new_glyphs_only=True)
A:matplotlib.backends.backend_svg.path->Path(verts, codes)
A:matplotlib.backends.backend_svg.fn->_normalize_sans(fn)
A:matplotlib.backends.backend_svg.style['font']->' '.join(font_parts)
A:matplotlib.backends.backend_svg.style['font-stretch']->prop.get_stretch()
A:matplotlib.backends.backend_svg.(ax, ay)->mtext.get_transform().transform(mtext.get_unitless_position())
A:matplotlib.backends.backend_svg.angle_rad->numpy.deg2rad(angle)
A:matplotlib.backends.backend_svg.dir_vert->numpy.array([np.sin(angle_rad), np.cos(angle_rad)])
A:matplotlib.backends.backend_svg.v_offset->numpy.dot(dir_vert, [x - ax, y - ay])
A:matplotlib.backends.backend_svg.(width, height, descent, glyphs, rects)->self._text2path.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_svg.entry->matplotlib.font_manager.ttfFontProperty(font)
A:matplotlib.backends.backend_svg.ys->' '.join((str(c[1]) for c in chars))
A:matplotlib.backends.backend_svg.fh->codecs.getwriter('utf-8')(fh)
A:matplotlib.backends.backend_svg.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_svg.renderer->MixedModeRenderer(self.figure, width, height, dpi, RendererSVG(w, h, fh, image_dpi=dpi, metadata=metadata), bbox_inches_restore=bbox_inches_restore)
matplotlib.backends.backend_svg.FigureCanvasSVG(FigureCanvasBase)
matplotlib.backends.backend_svg.FigureCanvasSVG.draw(self)
matplotlib.backends.backend_svg.FigureCanvasSVG.get_default_filetype(self)
matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg(self,filename,*,bbox_inches_restore=None,metadata=None)
matplotlib.backends.backend_svg.FigureCanvasSVG.print_svgz(self,filename,**kwargs)
matplotlib.backends.backend_svg.RendererSVG(self,width,height,svgwriter,basename=None,image_dpi=72,*,metadata=None)
matplotlib.backends.backend_svg.RendererSVG.__init__(self,width,height,svgwriter,basename=None,image_dpi=72,*,metadata=None)
matplotlib.backends.backend_svg.RendererSVG._adjust_char_id(self,char_id)
matplotlib.backends.backend_svg.RendererSVG._convert_path(self,path,transform=None,clip=None,simplify=None,sketch=None)
matplotlib.backends.backend_svg.RendererSVG._draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_svg.RendererSVG._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath,mtext=None)
matplotlib.backends.backend_svg.RendererSVG._draw_text_as_text(self,gc,x,y,s,prop,angle,ismath,mtext=None)
matplotlib.backends.backend_svg.RendererSVG._get_clip_attrs(self,gc)
matplotlib.backends.backend_svg.RendererSVG._get_hatch(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._get_style(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._get_style_dict(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._make_flip_transform(self,transform)
matplotlib.backends.backend_svg.RendererSVG._make_id(self,type,content)
matplotlib.backends.backend_svg.RendererSVG._update_glyph_map_defs(self,glyph_map_new)
matplotlib.backends.backend_svg.RendererSVG._write_clips(self)
matplotlib.backends.backend_svg.RendererSVG._write_default_style(self)
matplotlib.backends.backend_svg.RendererSVG._write_hatches(self)
matplotlib.backends.backend_svg.RendererSVG._write_metadata(self,metadata)
matplotlib.backends.backend_svg.RendererSVG.close_group(self,s)
matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles(self,gc,triangles_array,colors_array,transform)
matplotlib.backends.backend_svg.RendererSVG.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_svg.RendererSVG.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_svg.RendererSVG.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_svg.RendererSVG.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offset_trans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_svg.RendererSVG.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_svg.RendererSVG.finalize(self)
matplotlib.backends.backend_svg.RendererSVG.flipy(self)
matplotlib.backends.backend_svg.RendererSVG.get_canvas_width_height(self)
matplotlib.backends.backend_svg.RendererSVG.get_image_magnification(self)
matplotlib.backends.backend_svg.RendererSVG.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_svg.RendererSVG.open_group(self,s,gid=None)
matplotlib.backends.backend_svg.RendererSVG.option_image_nocomposite(self)
matplotlib.backends.backend_svg.RendererSVG.option_scale_image(self)
matplotlib.backends.backend_svg.XMLWriter(self,file)
matplotlib.backends.backend_svg.XMLWriter.__flush(self,indent=True)
matplotlib.backends.backend_svg.XMLWriter.__init__(self,file)
matplotlib.backends.backend_svg.XMLWriter.close(self,id)
matplotlib.backends.backend_svg.XMLWriter.comment(self,comment)
matplotlib.backends.backend_svg.XMLWriter.data(self,text)
matplotlib.backends.backend_svg.XMLWriter.element(self,tag,text=None,attrib={},**extra)
matplotlib.backends.backend_svg.XMLWriter.end(self,tag=None,indent=True)
matplotlib.backends.backend_svg.XMLWriter.flush(self)
matplotlib.backends.backend_svg.XMLWriter.start(self,tag,attrib={},**extra)
matplotlib.backends.backend_svg._BackendSVG(_Backend)
matplotlib.backends.backend_svg._check_is_iterable_of_str(infos,key)
matplotlib.backends.backend_svg._check_is_str(info,key)
matplotlib.backends.backend_svg._escape_attrib(s)
matplotlib.backends.backend_svg._escape_cdata(s)
matplotlib.backends.backend_svg._escape_comment(s)
matplotlib.backends.backend_svg._generate_css(attrib)
matplotlib.backends.backend_svg._generate_transform(transform_list)
matplotlib.backends.backend_svg._quote_escape_attrib(s)
matplotlib.backends.backend_svg._short_float_fmt(x)
matplotlib.backends.backend_svg.escape_attrib(s)
matplotlib.backends.backend_svg.escape_cdata(s)
matplotlib.backends.backend_svg.escape_comment(s)
matplotlib.backends.backend_svg.generate_css(attrib=None)
matplotlib.backends.backend_svg.generate_transform(transform_list=None)
matplotlib.backends.backend_svg.short_float_fmt(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qt5.py----------------------------------------
matplotlib.backends.backend_qt5._BackendQT5(_BackendQT)
matplotlib.backends.backend_qt5.__getattr__(name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_wx.py----------------------------------------
A:matplotlib.backends.backend_wx._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_wx.dialog->wx.MessageDialog(parent=self.canvas.GetParent(), message=str(e), caption='Matplotlib error')
A:matplotlib.backends.backend_wx.wxapp->wx.GetApp()
A:matplotlib.backends.backend_wx.self._timer->wx.Timer()
A:matplotlib.backends.backend_wx.self.width->wx.Bitmap(math.ceil(self.figure.bbox.width), math.ceil(self.figure.bbox.height)).GetWidth()
A:matplotlib.backends.backend_wx.self.height->wx.Bitmap(math.ceil(self.figure.bbox.width), math.ceil(self.figure.bbox.height)).GetHeight()
A:matplotlib.backends.backend_wx.s->matplotlib.cbook.strip_math(s)
A:matplotlib.backends.backend_wx.gc->self.new_gc()
A:matplotlib.backends.backend_wx.font->self.fontd.get(key)
A:matplotlib.backends.backend_wx.(w, h, descent, leading)->wx.GraphicsContext.Create(dc).GetFullTextExtent(s)
A:matplotlib.backends.backend_wx.new_bounds->self.new_gc().get_clip_rectangle()
A:matplotlib.backends.backend_wx.wxpath->self.convert_path(gfx_ctx, path, transform)
A:matplotlib.backends.backend_wx.bbox->self.new_gc().get_clip_rectangle()
A:matplotlib.backends.backend_wx.bitmap->wx.Bitmap(math.ceil(self.figure.bbox.width), math.ceil(self.figure.bbox.height))
A:matplotlib.backends.backend_wx.color->self.new_gc().get_wxcolour(gc.get_rgb())
A:matplotlib.backends.backend_wx.(w, h, d)->self.get_text_width_height_descent(s, prop, ismath)
A:matplotlib.backends.backend_wx.x->int(x)
A:matplotlib.backends.backend_wx.y->int(y - h)
A:matplotlib.backends.backend_wx.rads->math.radians(angle)
A:matplotlib.backends.backend_wx.self.gc->GraphicsContextWx(self.bitmap, self)
A:matplotlib.backends.backend_wx.key->key.lower().lower()
A:matplotlib.backends.backend_wx.size->self.GetClientSize()
A:matplotlib.backends.backend_wx.self.fontd[key]font->wx.Font(pointSize=round(size), family=self.fontnames.get(prop.get_name(), wx.ROMAN), style=self.fontangles[prop.get_style()], weight=self.fontweights[prop.get_weight()])
A:matplotlib.backends.backend_wx._cache->weakref.WeakKeyDictionary()
A:matplotlib.backends.backend_wx.(dc, gfx_ctx)->self._cache.get(bitmap, (None, None))
A:matplotlib.backends.backend_wx.dc->wx.MemoryDC(bitmap)
A:matplotlib.backends.backend_wx.gfx_ctx->wx.GraphicsContext.Create(dc)
A:matplotlib.backends.backend_wx.self._pen->wx.Pen('BLACK', 1, wx.SOLID)
A:matplotlib.backends.backend_wx.w->float(w)
A:matplotlib.backends.backend_wx.lw->int(self.renderer.points_to_pixels(self._linewidth))
A:matplotlib.backends.backend_wx.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerWx)
A:matplotlib.backends.backend_wx.(w, h)->map(math.ceil, fig.bbox.size)
A:matplotlib.backends.backend_wx.self.bitmap->wx.Bitmap(self._width, self._height)
A:matplotlib.backends.backend_wx.self._rubberband_pen_black->wx.Pen('BLACK', 1, wx.PENSTYLE_SHORT_DASH)
A:matplotlib.backends.backend_wx.self._rubberband_pen_white->wx.Pen('WHITE', 1, wx.PENSTYLE_SOLID)
A:matplotlib.backends.backend_wx.bmp_obj->wx.BitmapDataObject()
A:matplotlib.backends.backend_wx.open_success->wx.TheClipboard.Open()
A:matplotlib.backends.backend_wx.timer->wx.Timer(self, id=wx.ID_ANY)
A:matplotlib.backends.backend_wx.self._event_loop->wx.GUIEventLoop()
A:matplotlib.backends.backend_wx.default_filetype->self.get_default_filetype()
A:matplotlib.backends.backend_wx.filetypes->self.get_supported_filetypes_grouped()
A:matplotlib.backends.backend_wx.sorted_filetypes->sorted(filetypes.items())
A:matplotlib.backends.backend_wx.ext_list->';'.join(['*.%s' % ext for ext in exts])
A:matplotlib.backends.backend_wx.wildcards->'|'.join(wildcards)
A:matplotlib.backends.backend_wx.drawDC->wx.PaintDC(self)
A:matplotlib.backends.backend_wx.(x0, y0, x1, y1)->map(round, self._rubberband_rect)
A:matplotlib.backends.backend_wx.sz->self.GetParent().GetSizer()
A:matplotlib.backends.backend_wx.si->self.GetParent().GetSizer().GetItem(self)
A:matplotlib.backends.backend_wx.modifiers->self._mpl_modifiers(event)
A:matplotlib.backends.backend_wx.mods->self._mpl_modifiers(event, exclude=keyval)
A:matplotlib.backends.backend_wx.pos->wx.Point(20, 20)
A:matplotlib.backends.backend_wx.(x, y)->self._mpl_coords(event)
A:matplotlib.backends.backend_wx.cursor->wx.Cursor(_api.check_getitem({cursors.MOVE: wx.CURSOR_HAND, cursors.HAND: wx.CURSOR_HAND, cursors.POINTER: wx.CURSOR_ARROW, cursors.SELECT_REGION: wx.CURSOR_CROSS, cursors.WAIT: wx.CURSOR_WAIT, cursors.RESIZE_HORIZONTAL: wx.CURSOR_SIZEWE, cursors.RESIZE_VERTICAL: wx.CURSOR_SIZENS}, cursor=cursor))
A:matplotlib.backends.backend_wx.button->button_map.get(button, button)
A:matplotlib.backends.backend_wx.self.renderer->RendererWx(self.bitmap, self.figure.dpi)
A:matplotlib.backends.backend_wx.print_bmp->functools.partialmethod(_print_image, wx.BITMAP_TYPE_BMP)
A:matplotlib.backends.backend_wx.print_jpegprint_jpg->functools.partialmethod(_print_image, wx.BITMAP_TYPE_JPEG)
A:matplotlib.backends.backend_wx.print_pcx->functools.partialmethod(_print_image, wx.BITMAP_TYPE_PCX)
A:matplotlib.backends.backend_wx.print_png->functools.partialmethod(_print_image, wx.BITMAP_TYPE_PNG)
A:matplotlib.backends.backend_wx.print_tiffprint_tif->functools.partialmethod(_print_image, wx.BITMAP_TYPE_TIF)
A:matplotlib.backends.backend_wx.print_xpm->functools.partialmethod(_print_image, wx.BITMAP_TYPE_XPM)
A:matplotlib.backends.backend_wx.self.canvas->self.get_canvas(fig)
A:matplotlib.backends.backend_wx.manager->FigureManagerWx(self.canvas, num, self)
A:matplotlib.backends.backend_wx.sizer->wx.BoxSizer(wx.VERTICAL)
A:matplotlib.backends.backend_wx.figmgr->matplotlib._api.deprecated('3.6', alternative='frame.canvas.manager')(property(lambda self: self.canvas.manager))
A:matplotlib.backends.backend_wx.num->matplotlib._api.deprecated('3.6', alternative='frame.canvas.manager.num')(property(lambda self: self.canvas.manager.num))
A:matplotlib.backends.backend_wx.toolbar->matplotlib._api.deprecated('3.6', alternative='frame.GetToolBar()')(property(lambda self: self.GetToolBar()))
A:matplotlib.backends.backend_wx.toolmanager->matplotlib._api.deprecated('3.6', alternative='frame.canvas.manager.toolmanager')(property(lambda self: self.canvas.manager.toolmanager))
A:matplotlib.backends.backend_wx.frame->FigureFrameWx(num, figure, canvas_class=canvas_class)
A:matplotlib.backends.backend_wx.bundle->wx.IconBundle()
A:matplotlib.backends.backend_wx.icon->wx.Icon(_load_bitmap(image))
A:matplotlib.backends.backend_wx.self._label_text->wx.StaticText(self, style=wx.ALIGN_RIGHT)
A:matplotlib.backends.backend_wx.pilimg->PIL.Image.open(cbook._get_data_path('images', name))
A:matplotlib.backends.backend_wx.image->numpy.array(pilimg.convert('RGBA'))
A:matplotlib.backends.backend_wx.dark->wx.SystemSettings.GetAppearance().IsDark()
A:matplotlib.backends.backend_wx.bg->wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW)
A:matplotlib.backends.backend_wx.fg->wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWTEXT)
A:matplotlib.backends.backend_wx.black_mask->(image[..., :3] == 0).all(axis=-1)
A:matplotlib.backends.backend_wx.(filetypes, exts, filter_index)->self.canvas._get_imagesave_wildcards()
A:matplotlib.backends.backend_wx.default_file->self.canvas.get_default_filename()
A:matplotlib.backends.backend_wx.path->pathlib.Path(dialog.GetPath())
A:matplotlib.backends.backend_wx.mpl.rcParams['savefig.directory']->str(path.parent)
A:matplotlib.backends.backend_wx.parent->matplotlib._api.deprecated('3.6', alternative='frame.canvas.manager.toolmanager')(property(lambda self: self.canvas.manager.toolmanager)).canvas.GetParent()
A:matplotlib.backends.backend_wx.self._space->self.AddStretchableSpace()
A:matplotlib.backends.backend_wx.self._groups[group]->self.InsertSeparator(self._get_tool_pos(self._space))
A:matplotlib.backends.backend_wx.bmp->NavigationToolbar2Wx._icon(image_file)
A:matplotlib.backends.backend_wx.tool->self.InsertControl(idx, control, label=name)
A:matplotlib.backends.backend_wx.control->wx.Button(self, -1, name, size=size)
A:matplotlib.backends.backend_wx.grid_sizer->wx.FlexGridSizer(0, 3, 8, 6)
A:matplotlib.backends.backend_wx.bold->self.GetFont().MakeBold()
A:matplotlib.backends.backend_wx.label->wx.StaticText(self, label=col)
A:matplotlib.backends.backend_wx.ok->wx.Button(self, wx.ID_OK)
A:matplotlib.backends.backend_wx.cls._instance->cls(parent, help_entries)
matplotlib.backends.backend_wx.ConfigureSubplotsWx(backend_tools.ConfigureSubplotsBase)
matplotlib.backends.backend_wx.ConfigureSubplotsWx.trigger(self,*args)
matplotlib.backends.backend_wx.FigureCanvasWx(_FigureCanvasWxBase)
matplotlib.backends.backend_wx.FigureCanvasWx._print_image(self,filetype,filename)
matplotlib.backends.backend_wx.FigureCanvasWx.draw(self,drawDC=None)
matplotlib.backends.backend_wx.FigureFrameWx(self,num,fig,*,canvas_class=None)
matplotlib.backends.backend_wx.FigureFrameWx.__init__(self,num,fig,*,canvas_class=None)
matplotlib.backends.backend_wx.FigureFrameWx._on_close(self,event)
matplotlib.backends.backend_wx.FigureFrameWx.get_canvas(self,fig)
matplotlib.backends.backend_wx.FigureFrameWx.get_figure_manager(self)
matplotlib.backends.backend_wx.FigureManagerWx(self,canvas,num,frame)
matplotlib.backends.backend_wx.FigureManagerWx.__init__(self,canvas,num,frame)
matplotlib.backends.backend_wx.FigureManagerWx.create_with_canvas(cls,canvas_class,figure,num)
matplotlib.backends.backend_wx.FigureManagerWx.destroy(self,*args)
matplotlib.backends.backend_wx.FigureManagerWx.full_screen_toggle(self)
matplotlib.backends.backend_wx.FigureManagerWx.get_window_title(self)
matplotlib.backends.backend_wx.FigureManagerWx.resize(self,width,height)
matplotlib.backends.backend_wx.FigureManagerWx.set_window_title(self,title)
matplotlib.backends.backend_wx.FigureManagerWx.show(self)
matplotlib.backends.backend_wx.FigureManagerWx.start_main_loop(cls)
matplotlib.backends.backend_wx.GraphicsContextWx(self,bitmap,renderer)
matplotlib.backends.backend_wx.GraphicsContextWx.__init__(self,bitmap,renderer)
matplotlib.backends.backend_wx.GraphicsContextWx.get_wxcolour(self,color)
matplotlib.backends.backend_wx.GraphicsContextWx.select(self)
matplotlib.backends.backend_wx.GraphicsContextWx.set_capstyle(self,cs)
matplotlib.backends.backend_wx.GraphicsContextWx.set_foreground(self,fg,isRGBA=None)
matplotlib.backends.backend_wx.GraphicsContextWx.set_joinstyle(self,js)
matplotlib.backends.backend_wx.GraphicsContextWx.set_linewidth(self,w)
matplotlib.backends.backend_wx.GraphicsContextWx.unselect(self)
matplotlib.backends.backend_wx.HelpWx(backend_tools.ToolHelpBase)
matplotlib.backends.backend_wx.HelpWx.trigger(self,*args)
matplotlib.backends.backend_wx.NavigationToolbar2Wx(self,canvas,coordinates=True,*,style=wx.TB_BOTTOM)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.__init__(self,canvas,coordinates=True,*,style=wx.TB_BOTTOM)
matplotlib.backends.backend_wx.NavigationToolbar2Wx._icon(name)
matplotlib.backends.backend_wx.NavigationToolbar2Wx._update_buttons_checked(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.pan(self,*args)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.remove_rubberband(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.save_figure(self,*args)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_history_buttons(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_message(self,s)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.zoom(self,*args)
matplotlib.backends.backend_wx.RendererWx(self,bitmap,dpi)
matplotlib.backends.backend_wx.RendererWx.__init__(self,bitmap,dpi)
matplotlib.backends.backend_wx.RendererWx.convert_path(gfx_ctx,path,transform)
matplotlib.backends.backend_wx.RendererWx.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_wx.RendererWx.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_wx.RendererWx.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_wx.RendererWx.flipy(self)
matplotlib.backends.backend_wx.RendererWx.get_canvas_width_height(self)
matplotlib.backends.backend_wx.RendererWx.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_wx.RendererWx.get_wx_font(self,s,prop)
matplotlib.backends.backend_wx.RendererWx.handle_clip_rectangle(self,gc)
matplotlib.backends.backend_wx.RendererWx.new_gc(self)
matplotlib.backends.backend_wx.RendererWx.offset_text_height(self)
matplotlib.backends.backend_wx.RendererWx.points_to_pixels(self,points)
matplotlib.backends.backend_wx.RubberbandWx(backend_tools.RubberbandBase)
matplotlib.backends.backend_wx.RubberbandWx.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends.backend_wx.RubberbandWx.remove_rubberband(self)
matplotlib.backends.backend_wx.SaveFigureWx(backend_tools.SaveFigureBase)
matplotlib.backends.backend_wx.SaveFigureWx.trigger(self,*args)
matplotlib.backends.backend_wx.TimerWx(self,*args,**kwargs)
matplotlib.backends.backend_wx.TimerWx.__init__(self,*args,**kwargs)
matplotlib.backends.backend_wx.TimerWx._timer_set_interval(self)
matplotlib.backends.backend_wx.TimerWx._timer_start(self)
matplotlib.backends.backend_wx.TimerWx._timer_stop(self)
matplotlib.backends.backend_wx.ToolCopyToClipboardWx(backend_tools.ToolCopyToClipboardBase)
matplotlib.backends.backend_wx.ToolCopyToClipboardWx.trigger(self,*args,**kwargs)
matplotlib.backends.backend_wx.ToolbarWx(self,toolmanager,parent=None,style=wx.TB_BOTTOM)
matplotlib.backends.backend_wx.ToolbarWx.__init__(self,toolmanager,parent=None,style=wx.TB_BOTTOM)
matplotlib.backends.backend_wx.ToolbarWx._get_tool_pos(self,tool)
matplotlib.backends.backend_wx.ToolbarWx.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_wx.ToolbarWx.remove_toolitem(self,name)
matplotlib.backends.backend_wx.ToolbarWx.set_message(self,s)
matplotlib.backends.backend_wx.ToolbarWx.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_wx._BackendWx(_Backend)
matplotlib.backends.backend_wx._FigureCanvasWxBase(self,parent,id,figure=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase.Copy_to_Clipboard(self,event=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase.__init__(self,parent,id,figure=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase._get_imagesave_wildcards(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase._get_key(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._mpl_coords(self,pos=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase._mpl_modifiers(event=None,*,exclude=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_capture_lost(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_enter(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_key_down(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_key_up(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_leave(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_motion(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_mouse_button(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_mouse_wheel(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_paint(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._on_size(self,event)
matplotlib.backends.backend_wx._FigureCanvasWxBase._set_capture(self,capture=True)
matplotlib.backends.backend_wx._FigureCanvasWxBase.draw_idle(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase.flush_events(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase.gui_repaint(self,drawDC=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase.print_figure(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx._FigureCanvasWxBase.set_cursor(self,cursor)
matplotlib.backends.backend_wx._FigureCanvasWxBase.start_event_loop(self,timeout=0)
matplotlib.backends.backend_wx._FigureCanvasWxBase.stop_event_loop(self,event=None)
matplotlib.backends.backend_wx._HelpDialog(self,parent,help_entries)
matplotlib.backends.backend_wx._HelpDialog.__init__(self,parent,help_entries)
matplotlib.backends.backend_wx._HelpDialog._on_close(self,event)
matplotlib.backends.backend_wx._HelpDialog.show(cls,parent,help_entries)
matplotlib.backends.backend_wx._create_wxapp()
matplotlib.backends.backend_wx._load_bitmap(filename)
matplotlib.backends.backend_wx._set_frame_icon(frame)
matplotlib.backends.backend_wx.error_msg_wx(msg,parent=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qt.py----------------------------------------
A:matplotlib.backends.backend_qt.qApp->matplotlib._api.deprecated('3.6', alternative='QtWidgets.QApplication.instance()')(property(lambda self: QtWidgets.QApplication.instance()))
A:matplotlib.backends.backend_qt.app->qt_compat.QtWidgets.QApplication(['matplotlib'])
A:matplotlib.backends.backend_qt.mod->sys.modules.get(f'{binding}.QtWidgets')
A:matplotlib.backends.backend_qt.other_core->sys.modules.get(f'{binding}.QtCore')
A:matplotlib.backends.backend_qt.image->str(cbook._get_data_path('images/matplotlib.svg'))
A:matplotlib.backends.backend_qt.icon->qt_compat.QtGui.QIcon(image)
A:matplotlib.backends.backend_qt.self._timer->qt_compat.QtCore.QTimer()
A:matplotlib.backends.backend_qt.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerQT)
A:matplotlib.backends.backend_qt.palette->qt_compat.QtGui.QPalette(QtGui.QColor('white'))
A:matplotlib.backends.backend_qt.event->qt_compat.QtGui.QResizeEvent(self.size(), self.size())
A:matplotlib.backends.backend_qt.window->self.window().windowHandle()
A:matplotlib.backends.backend_qt.pos->pos.pos().pos()
A:matplotlib.backends.backend_qt.x->pos.pos().pos().x()
A:matplotlib.backends.backend_qt.mods->self._mpl_modifiers(exclude=event_key)
A:matplotlib.backends.backend_qt.button->qt_compat.QtWidgets.QToolButton(self)
A:matplotlib.backends.backend_qt.steps->qt_compat.QtGui.QResizeEvent(self.size(), self.size()).pixelDelta().y()
A:matplotlib.backends.backend_qt.key->key.lower().lower()
A:matplotlib.backends.backend_qt.(w, h)->self.get_width_height()
A:matplotlib.backends.backend_qt.modifiers->_to_int(modifiers)
A:matplotlib.backends.backend_qt.event_key->qt_compat.QtGui.QResizeEvent(self.size(), self.size()).key()
A:matplotlib.backends.backend_qt.self._event_loopevent_loop->qt_compat.QtCore.QEventLoop()
A:matplotlib.backends.backend_qt._->qt_compat.QtCore.QTimer.singleShot(int(timeout * 1000), event_loop.quit)
A:matplotlib.backends.backend_qt.pen->qt_compat.QtGui.QPen(QtGui.QColor('black'), 1 / self.device_pixel_ratio)
A:matplotlib.backends.backend_qt.closing->qt_compat.QtCore.Signal()
A:matplotlib.backends.backend_qt.self.window->MainWindow()
A:matplotlib.backends.backend_qt.tbs_height->self.toolbar.sizeHint().height()
A:matplotlib.backends.backend_qt.cs->canvas.sizeHint()
A:matplotlib.backends.backend_qt.cs_height->canvas.sizeHint().height()
A:matplotlib.backends.backend_qt.width->int(width / self.canvas.device_pixel_ratio)
A:matplotlib.backends.backend_qt.height->int(height / self.canvas.device_pixel_ratio)
A:matplotlib.backends.backend_qt.qapp->qt_compat.QtWidgets.QApplication.instance()
A:matplotlib.backends.backend_qt.message->qt_compat.QtCore.Signal(str)
A:matplotlib.backends.backend_qt.a->self.addAction(self._icon(image_file + '.png'), text, getattr(self, callback))
A:matplotlib.backends.backend_qt.self.locLabel->qt_compat.QtWidgets.QLabel('', self)
A:matplotlib.backends.backend_qt.labelAction->self.addWidget(self.locLabel)
A:matplotlib.backends.backend_qt.path_regular->matplotlib.cbook._get_data_path('images', name)
A:matplotlib.backends.backend_qt.path_large->matplotlib.cbook._get_data_path('images', name).with_name(path_regular.name.replace('.png', '_large.png'))
A:matplotlib.backends.backend_qt.filename->str(path_large if path_large.exists() else path_regular)
A:matplotlib.backends.backend_qt.pm->qt_compat.QtGui.QPixmap(filename)
A:matplotlib.backends.backend_qt.icon_color->self.palette().color(self.foregroundRole())
A:matplotlib.backends.backend_qt.mask->qt_compat.QtGui.QPixmap(filename).createMaskFromColor(QtGui.QColor('black'), _enum('QtCore.Qt.MaskMode').MaskOutColor)
A:matplotlib.backends.backend_qt.axes->self.canvas.figure.get_axes()
A:matplotlib.backends.backend_qt.(item, ok)->qt_compat.QtWidgets.QInputDialog.getItem(self.canvas.parent(), 'Customize', 'Select axes:', titles, 0, False)
A:matplotlib.backends.backend_qt.self._subplot_dialog->SubplotToolQt(self.canvas.figure, self.canvas.parent())
A:matplotlib.backends.backend_qt.filetypes->self.canvas.get_supported_filetypes_grouped()
A:matplotlib.backends.backend_qt.sorted_filetypes->sorted(filetypes.items())
A:matplotlib.backends.backend_qt.default_filetype->self.canvas.get_default_filetype()
A:matplotlib.backends.backend_qt.startpath->os.path.expanduser(mpl.rcParams['savefig.directory'])
A:matplotlib.backends.backend_qt.start->os.path.join(startpath, self.canvas.get_default_filename())
A:matplotlib.backends.backend_qt.exts_list->' '.join(['*.%s' % ext for ext in exts])
A:matplotlib.backends.backend_qt.filters->';;'.join(filters)
A:matplotlib.backends.backend_qt.(fname, filter)->qt_compat._getSaveFileName(self.canvas.parent(), 'Choose a filename to save to', start, filters, selectedFilter)
A:matplotlib.backends.backend_qt.mpl.rcParams['savefig.directory']->os.path.dirname(fname)
A:matplotlib.backends.backend_qt.main_layout->qt_compat.QtWidgets.QHBoxLayout()
A:matplotlib.backends.backend_qt.layout->qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.backend_qt.box->qt_compat.QtWidgets.QGroupBox(group)
A:matplotlib.backends.backend_qt.inner->qt_compat.QtWidgets.QFormLayout(box)
A:matplotlib.backends.backend_qt.self._spinboxes[name]spinbox->qt_compat.QtWidgets.QDoubleSpinBox()
A:matplotlib.backends.backend_qt.self._export_values_dialog->qt_compat.QtWidgets.QDialog()
A:matplotlib.backends.backend_qt.text->qt_compat.QtWidgets.QPlainTextEdit()
A:matplotlib.backends.backend_qt.size->qt_compat.QtWidgets.QPlainTextEdit().maximumSize()
A:matplotlib.backends.backend_qt.message_label->qt_compat.QtWidgets.QLabel('')
A:matplotlib.backends.backend_qt.self._message_action->self.addWidget(message_label)
A:matplotlib.backends.backend_qt.gr->self._groups.get(group, [])
A:matplotlib.backends.backend_qt.sep->self.insertSeparator(self._message_action)
A:matplotlib.backends.backend_qt.widget->self.insertWidget(before, button)
A:matplotlib.backends.backend_qt.pixmap->self.canvas.grab()
matplotlib.backends.backend_qt.ConfigureSubplotsQt(self,*args,**kwargs)
matplotlib.backends.backend_qt.ConfigureSubplotsQt.__init__(self,*args,**kwargs)
matplotlib.backends.backend_qt.ConfigureSubplotsQt.trigger(self,*args)
matplotlib.backends.backend_qt.FigureCanvasQT(self,figure=None)
matplotlib.backends.backend_qt.FigureCanvasQT.__init__(self,figure=None)
matplotlib.backends.backend_qt.FigureCanvasQT._draw_idle(self)
matplotlib.backends.backend_qt.FigureCanvasQT._get_key(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT._mpl_modifiers(modifiers=None,*,exclude=None)
matplotlib.backends.backend_qt.FigureCanvasQT._update_pixel_ratio(self)
matplotlib.backends.backend_qt.FigureCanvasQT._update_screen(self,screen)
matplotlib.backends.backend_qt.FigureCanvasQT.blit(self,bbox=None)
matplotlib.backends.backend_qt.FigureCanvasQT.draw(self)
matplotlib.backends.backend_qt.FigureCanvasQT.drawRectangle(self,rect)
matplotlib.backends.backend_qt.FigureCanvasQT.draw_idle(self)
matplotlib.backends.backend_qt.FigureCanvasQT.enterEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.flush_events(self)
matplotlib.backends.backend_qt.FigureCanvasQT.keyPressEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.keyReleaseEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.leaveEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.minumumSizeHint(self)
matplotlib.backends.backend_qt.FigureCanvasQT.mouseDoubleClickEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.mouseEventCoords(self,pos=None)
matplotlib.backends.backend_qt.FigureCanvasQT.mouseMoveEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.mousePressEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.mouseReleaseEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.resizeEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.set_cursor(self,cursor)
matplotlib.backends.backend_qt.FigureCanvasQT.showEvent(self,event)
matplotlib.backends.backend_qt.FigureCanvasQT.sizeHint(self)
matplotlib.backends.backend_qt.FigureCanvasQT.start_event_loop(self,timeout=0)
matplotlib.backends.backend_qt.FigureCanvasQT.stop_event_loop(self,event=None)
matplotlib.backends.backend_qt.FigureCanvasQT.wheelEvent(self,event)
matplotlib.backends.backend_qt.FigureManagerQT(self,canvas,num)
matplotlib.backends.backend_qt.FigureManagerQT.__init__(self,canvas,num)
matplotlib.backends.backend_qt.FigureManagerQT._widgetclosed(self)
matplotlib.backends.backend_qt.FigureManagerQT.destroy(self,*args)
matplotlib.backends.backend_qt.FigureManagerQT.full_screen_toggle(self)
matplotlib.backends.backend_qt.FigureManagerQT.get_window_title(self)
matplotlib.backends.backend_qt.FigureManagerQT.resize(self,width,height)
matplotlib.backends.backend_qt.FigureManagerQT.set_window_title(self,title)
matplotlib.backends.backend_qt.FigureManagerQT.show(self)
matplotlib.backends.backend_qt.FigureManagerQT.start_main_loop(cls)
matplotlib.backends.backend_qt.HelpQt(backend_tools.ToolHelpBase)
matplotlib.backends.backend_qt.HelpQt.trigger(self,*args)
matplotlib.backends.backend_qt.MainWindow(QtWidgets.QMainWindow)
matplotlib.backends.backend_qt.MainWindow.closeEvent(self,event)
matplotlib.backends.backend_qt.NavigationToolbar2QT(self,canvas,parent=None,coordinates=True)
matplotlib.backends.backend_qt.NavigationToolbar2QT.__init__(self,canvas,parent=None,coordinates=True)
matplotlib.backends.backend_qt.NavigationToolbar2QT._icon(self,name)
matplotlib.backends.backend_qt.NavigationToolbar2QT._update_buttons_checked(self)
matplotlib.backends.backend_qt.NavigationToolbar2QT.configure_subplots(self)
matplotlib.backends.backend_qt.NavigationToolbar2QT.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_qt.NavigationToolbar2QT.edit_parameters(self)
matplotlib.backends.backend_qt.NavigationToolbar2QT.pan(self,*args)
matplotlib.backends.backend_qt.NavigationToolbar2QT.remove_rubberband(self)
matplotlib.backends.backend_qt.NavigationToolbar2QT.save_figure(self,*args)
matplotlib.backends.backend_qt.NavigationToolbar2QT.set_history_buttons(self)
matplotlib.backends.backend_qt.NavigationToolbar2QT.set_message(self,s)
matplotlib.backends.backend_qt.NavigationToolbar2QT.zoom(self,*args)
matplotlib.backends.backend_qt.RubberbandQt(backend_tools.RubberbandBase)
matplotlib.backends.backend_qt.RubberbandQt.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends.backend_qt.RubberbandQt.remove_rubberband(self)
matplotlib.backends.backend_qt.SaveFigureQt(backend_tools.SaveFigureBase)
matplotlib.backends.backend_qt.SaveFigureQt.trigger(self,*args)
matplotlib.backends.backend_qt.SubplotToolQt(self,targetfig,parent)
matplotlib.backends.backend_qt.SubplotToolQt.__init__(self,targetfig,parent)
matplotlib.backends.backend_qt.SubplotToolQt._export_values(self)
matplotlib.backends.backend_qt.SubplotToolQt._on_value_changed(self)
matplotlib.backends.backend_qt.SubplotToolQt._reset(self)
matplotlib.backends.backend_qt.SubplotToolQt._tight_layout(self)
matplotlib.backends.backend_qt.SubplotToolQt.update_from_current_subplotpars(self)
matplotlib.backends.backend_qt.TimerQT(self,*args,**kwargs)
matplotlib.backends.backend_qt.TimerQT.__del__(self)
matplotlib.backends.backend_qt.TimerQT.__init__(self,*args,**kwargs)
matplotlib.backends.backend_qt.TimerQT._timer_set_interval(self)
matplotlib.backends.backend_qt.TimerQT._timer_set_single_shot(self)
matplotlib.backends.backend_qt.TimerQT._timer_start(self)
matplotlib.backends.backend_qt.TimerQT._timer_stop(self)
matplotlib.backends.backend_qt.ToolCopyToClipboardQT(backend_tools.ToolCopyToClipboardBase)
matplotlib.backends.backend_qt.ToolCopyToClipboardQT.trigger(self,*args,**kwargs)
matplotlib.backends.backend_qt.ToolbarQt(self,toolmanager,parent=None)
matplotlib.backends.backend_qt.ToolbarQt.__init__(self,toolmanager,parent=None)
matplotlib.backends.backend_qt.ToolbarQt._add_to_group(self,group,name,button,position)
matplotlib.backends.backend_qt.ToolbarQt.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_qt.ToolbarQt.remove_toolitem(self,name)
matplotlib.backends.backend_qt.ToolbarQt.set_message(self,s)
matplotlib.backends.backend_qt.ToolbarQt.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_qt._BackendQT(_Backend)
matplotlib.backends.backend_qt.__getattr__
matplotlib.backends.backend_qt._create_qApp()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_tkagg.py----------------------------------------
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(FigureCanvasAgg,FigureCanvasTk)
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.blit(self,bbox=None)
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.draw(self)
matplotlib.backends.backend_tkagg._BackendTkAgg(_BackendTk)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_nbagg.py----------------------------------------
A:matplotlib.backends.backend_nbagg.canvas->canvas_class(figure)
A:matplotlib.backends.backend_nbagg.manager->cls(canvas, num)
A:matplotlib.backends.backend_nbagg.cid->canvas_class(figure).mpl_connect('close_event', destroy)
A:matplotlib.backends.backend_nbagg.output->io.StringIO()
A:matplotlib.backends.backend_nbagg.comm->CommSocket(self)
A:matplotlib.backends.backend_nbagg.self.uuid->str(uuid.uuid4())
A:matplotlib.backends.backend_nbagg.self.comm->Comm('matplotlib', data={'id': self.uuid})
A:matplotlib.backends.backend_nbagg.data->b64encode(blob).decode('ascii')
A:matplotlib.backends.backend_nbagg.data_uri->'data:image/png;base64,{0}'.format(data)
A:matplotlib.backends.backend_nbagg.message->json.loads(message['content']['data'])
matplotlib.backends.backend_nbagg.CommSocket(self,manager)
matplotlib.backends.backend_nbagg.CommSocket.__init__(self,manager)
matplotlib.backends.backend_nbagg.CommSocket.is_open(self)
matplotlib.backends.backend_nbagg.CommSocket.on_close(self)
matplotlib.backends.backend_nbagg.CommSocket.on_message(self,message)
matplotlib.backends.backend_nbagg.CommSocket.send_binary(self,blob)
matplotlib.backends.backend_nbagg.CommSocket.send_json(self,content)
matplotlib.backends.backend_nbagg.FigureCanvasNbAgg(FigureCanvasWebAggCore)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg(self,canvas,num)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.__init__(self,canvas,num)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg._create_comm(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.clearup_closed(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.connected(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.create_with_canvas(cls,canvas_class,figure,num)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.destroy(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.display_js(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.get_javascript(cls,stream=None)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.remove_comm(self,comm_id)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.reshow(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.show(self)
matplotlib.backends.backend_nbagg.NavigationIPy(NavigationToolbar2WebAgg)
matplotlib.backends.backend_nbagg._BackendNbAgg(_Backend)
matplotlib.backends.backend_nbagg.connection_info()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/qt_compat.py----------------------------------------
A:matplotlib.backends.qt_compat.QT_API_ENV->QT_API_ENV.lower().lower()
A:matplotlib.backends.qt_compat._to_int->operator.attrgetter('value')
A:matplotlib.backends.qt_compat._version_info->tuple(QtCore.QLibraryInfo.version().segments())
A:matplotlib.backends.qt_compat.old_sigint_handler->signal.getsignal(signal.SIGINT)
A:matplotlib.backends.qt_compat.(wsock, rsock)->socket.socketpair()
A:matplotlib.backends.qt_compat.old_wakeup_fd->signal.set_wakeup_fd(wsock.fileno())
A:matplotlib.backends.qt_compat.sn->PySide2.QtCore.QSocketNotifier(rsock.fileno(), _enum('QtCore.QSocketNotifier.Type').Read)
matplotlib.backends.qt_compat._enum(name)
matplotlib.backends.qt_compat._exec(obj)
matplotlib.backends.qt_compat._maybe_allow_interrupt(qapp)
matplotlib.backends.qt_compat._setup_pyqt5plus()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/_backend_gtk.py----------------------------------------
A:matplotlib.backends._backend_gtk._log->logging.getLogger(__name__)
A:matplotlib.backends._backend_gtk.app->_create_application()
A:matplotlib.backends._backend_gtk._application->gi.repository.Gtk.Application.new('org.matplotlib.Matplotlib3', Gio.ApplicationFlags.NON_UNIQUE)
A:matplotlib.backends._backend_gtk.self._timer->gi.repository.GLib.timeout_add(self._interval, self._on_timer)
A:matplotlib.backends._backend_gtk.self._gtk_vergtk_ver->gi.repository.Gtk.get_major_version()
A:matplotlib.backends._backend_gtk.self.window->gi.repository.Gtk.Window()
A:matplotlib.backends._backend_gtk.self.vbox->gi.repository.Gtk.Box()
A:matplotlib.backends._backend_gtk.(w, h)->self.canvas.get_width_height()
A:matplotlib.backends._backend_gtk.sw->gi.repository.Gtk.ScrolledWindow(vscrollbar_policy=Gtk.PolicyType.NEVER)
A:matplotlib.backends._backend_gtk.(min_size, nat_size)->self.toolbar.get_preferred_size()
A:matplotlib.backends._backend_gtk.context->gi.repository.GLib.MainContext.default()
A:matplotlib.backends._backend_gtk.width->int(width / self.canvas.device_pixel_ratio)
A:matplotlib.backends._backend_gtk.height->int(height / self.canvas.device_pixel_ratio)
A:matplotlib.backends._backend_gtk.canvas_size->self.canvas.get_allocation()
A:matplotlib.backends._backend_gtk.escaped->gi.repository.GLib.markup_escape_text(s)
A:matplotlib.backends._backend_gtk.button->self._gtk_ids.get(name)
matplotlib.backends._backend_gtk.ConfigureSubplotsGTK(backend_tools.ConfigureSubplotsBase)
matplotlib.backends._backend_gtk.ConfigureSubplotsGTK.trigger(self,*args)
matplotlib.backends._backend_gtk.RubberbandGTK(backend_tools.RubberbandBase)
matplotlib.backends._backend_gtk.RubberbandGTK.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends._backend_gtk.RubberbandGTK.remove_rubberband(self)
matplotlib.backends._backend_gtk.TimerGTK(self,*args,**kwargs)
matplotlib.backends._backend_gtk.TimerGTK.__init__(self,*args,**kwargs)
matplotlib.backends._backend_gtk.TimerGTK._on_timer(self)
matplotlib.backends._backend_gtk.TimerGTK._timer_set_interval(self)
matplotlib.backends._backend_gtk.TimerGTK._timer_start(self)
matplotlib.backends._backend_gtk.TimerGTK._timer_stop(self)
matplotlib.backends._backend_gtk._BackendGTK(_Backend)
matplotlib.backends._backend_gtk._FigureCanvasGTK(FigureCanvasBase)
matplotlib.backends._backend_gtk._FigureManagerGTK(self,canvas,num)
matplotlib.backends._backend_gtk._FigureManagerGTK.__init__(self,canvas,num)
matplotlib.backends._backend_gtk._FigureManagerGTK.destroy(self,*args)
matplotlib.backends._backend_gtk._FigureManagerGTK.full_screen_toggle(self)
matplotlib.backends._backend_gtk._FigureManagerGTK.get_window_title(self)
matplotlib.backends._backend_gtk._FigureManagerGTK.resize(self,width,height)
matplotlib.backends._backend_gtk._FigureManagerGTK.set_window_title(self,title)
matplotlib.backends._backend_gtk._FigureManagerGTK.show(self)
matplotlib.backends._backend_gtk._FigureManagerGTK.start_main_loop(cls)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK(NavigationToolbar2)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK._update_buttons_checked(self)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.pan(self,*args)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.remove_rubberband(self)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.set_history_buttons(self)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.set_message(self,s)
matplotlib.backends._backend_gtk._NavigationToolbar2GTK.zoom(self,*args)
matplotlib.backends._backend_gtk._create_application()
matplotlib.backends._backend_gtk._shutdown_application(app)
matplotlib.backends._backend_gtk.mpl_to_gtk_cursor_name(mpl_cursor)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk4agg.py----------------------------------------
A:matplotlib.backends.backend_gtk4agg.allocation->self.get_allocation()
A:matplotlib.backends.backend_gtk4agg.buf->cbook._unmultiplied_rgba8888_to_premultiplied_argb32(np.asarray(self.get_renderer().buffer_rgba()))
A:matplotlib.backends.backend_gtk4agg.image->cairo.ImageSurface.create_for_data(buf.ravel().data, cairo.FORMAT_ARGB32, width, height)
matplotlib.backends.backend_gtk4agg.FigureCanvasGTK4Agg(backend_agg.FigureCanvasAgg,backend_gtk4.FigureCanvasGTK4)
matplotlib.backends.backend_gtk4agg.FigureCanvasGTK4Agg.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk4agg.FigureManagerGTK4Agg(backend_gtk4.FigureManagerGTK4)
matplotlib.backends.backend_gtk4agg._BackendGTK4Agg(_BackendGTK4)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_qtagg.py----------------------------------------
A:matplotlib.backends.backend_qtagg.painter->backend_qt.QtGui.QPainter(self)
A:matplotlib.backends.backend_qtagg.rect->event.rect()
A:matplotlib.backends.backend_qtagg.(left, top)->self.mouseEventCoords(rect.topLeft())
A:matplotlib.backends.backend_qtagg.bbox->Bbox([[left, bottom], [right, top]])
A:matplotlib.backends.backend_qtagg.buf->memoryview(self.copy_from_bbox(bbox))
A:matplotlib.backends.backend_qtagg.ptr->int(sip.voidptr(buf))
A:matplotlib.backends.backend_qtagg.qimage->backend_qt.QtGui.QImage(ptr, buf.shape[1], buf.shape[0], _enum('QtGui.QImage.Format').Format_RGBA8888)
A:matplotlib.backends.backend_qtagg.origin->backend_qt.QtCore.QPoint(rect.left(), rect.top())
matplotlib.backends.backend_qtagg.FigureCanvasQTAgg(FigureCanvasAgg,FigureCanvasQT)
matplotlib.backends.backend_qtagg.FigureCanvasQTAgg.paintEvent(self,event)
matplotlib.backends.backend_qtagg.FigureCanvasQTAgg.print_figure(self,*args,**kwargs)
matplotlib.backends.backend_qtagg._BackendQTAgg(_BackendQT)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_webagg_core.py----------------------------------------
A:matplotlib.backends.backend_webagg_core._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_webagg_core.key->key.replace('shift+', '').replace('shift+', '')
A:matplotlib.backends.backend_webagg_core.ioloop->tornado.ioloop.IOLoop.instance()
A:matplotlib.backends.backend_webagg_core.self._timer->tornado.ioloop.PeriodicCallback(self._on_timer, max(self.interval, 1e-06))
A:matplotlib.backends.backend_webagg_core.self._task->asyncio.ensure_future(self._timer_task(max(self.interval / 1000.0, 1e-06)))
A:matplotlib.backends.backend_webagg_core.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerWebAgg)
A:matplotlib.backends.backend_webagg_core.self._last_buff->pixels.view(np.uint32).squeeze(2).copy()
A:matplotlib.backends.backend_webagg_core.cursor->matplotlib._api.check_getitem({backend_tools.Cursors.HAND: 'pointer', backend_tools.Cursors.POINTER: 'default', backend_tools.Cursors.SELECT_REGION: 'crosshair', backend_tools.Cursors.MOVE: 'move', backend_tools.Cursors.WAIT: 'wait', backend_tools.Cursors.RESIZE_HORIZONTAL: 'ew-resize', backend_tools.Cursors.RESIZE_VERTICAL: 'ns-resize'}, cursor=cursor)
A:matplotlib.backends.backend_webagg_core.renderer->self.get_renderer()
A:matplotlib.backends.backend_webagg_core.pixels->numpy.asarray(renderer.buffer_rgba())
A:matplotlib.backends.backend_webagg_core.buff->numpy.asarray(renderer.buffer_rgba()).view(np.uint32).squeeze(2)
A:matplotlib.backends.backend_webagg_core.output->StringIO()
A:matplotlib.backends.backend_webagg_core.data->StringIO().view(dtype=np.uint8).reshape((*output.shape, 4))
A:matplotlib.backends.backend_webagg_core.handler->getattr(self, 'handle_{0}'.format(e_type), self.handle_unknown_event)
A:matplotlib.backends.backend_webagg_core.guiEvent->event.get('guiEvent')
A:matplotlib.backends.backend_webagg_core.figure_label->'Figure {0}'.format(self.manager.num)
A:matplotlib.backends.backend_webagg_core.self.web_sockets->set()
A:matplotlib.backends.backend_webagg_core.diff->self.canvas.get_diff_image()
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.__init__(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore._handle_key(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore._handle_mouse(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore._handle_set_device_pixel_ratio(self,device_pixel_ratio)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.blit(self,bbox=None)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.draw(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.draw_idle(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.get_diff_image(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_ack(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_draw(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_event(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_refresh(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_resize(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_send_image_mode(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_set_device_pixel_ratio(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_set_dpi_ratio(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_toolbar_button(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_unknown_event(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.send_event(self,event_type,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.set_cursor(self,cursor)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.set_image_mode(self,mode)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.show(self)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg(self,canvas,num)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.__init__(self,canvas,num)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg._send_event(self,event_type,**kwargs)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.add_web_socket(self,web_socket)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.get_javascript(cls,stream=None)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.get_static_file_path(cls)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.handle_json(self,content)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.refresh_all(self)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.remove_web_socket(self,web_socket)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.resize(self,w,h,forward=True)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.set_window_title(self,title)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.show(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg(self,canvas)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.__init__(self,canvas)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.pan(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.remove_rubberband(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.save_figure(self,*args)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.set_history_buttons(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.set_message(self,message)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.zoom(self)
matplotlib.backends.backend_webagg_core.TimerAsyncio(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.TimerAsyncio.__init__(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.TimerAsyncio._timer_set_interval(self)
matplotlib.backends.backend_webagg_core.TimerAsyncio._timer_start(self)
matplotlib.backends.backend_webagg_core.TimerAsyncio._timer_stop(self)
matplotlib.backends.backend_webagg_core.TimerTornado(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.TimerTornado.__init__(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_set_interval(self)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_start(self)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_stop(self)
matplotlib.backends.backend_webagg_core._BackendWebAggCoreAgg(_Backend)
matplotlib.backends.backend_webagg_core._handle_key(key)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_wxcairo.py----------------------------------------
A:matplotlib.backends.backend_wxcairo.size->self.figure.bbox.size.astype(int)
A:matplotlib.backends.backend_wxcairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, *size)
A:matplotlib.backends.backend_wxcairo.self.bitmap->wx.lib.wxcairo.BitmapFromImageSurface(surface)
matplotlib.backends.backend_wxcairo.FigureCanvasWxCairo(FigureCanvasCairo,_FigureCanvasWxBase)
matplotlib.backends.backend_wxcairo.FigureCanvasWxCairo.draw(self,drawDC=None)
matplotlib.backends.backend_wxcairo.FigureFrameWxCairo(FigureFrameWx)
matplotlib.backends.backend_wxcairo.FigureFrameWxCairo.get_canvas(self,fig)
matplotlib.backends.backend_wxcairo._BackendWxCairo(_BackendWx)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_template.py----------------------------------------
A:matplotlib.backends.backend_template.renderer->RendererTemplate(self.figure.dpi)
matplotlib.backends.backend_template.FigureCanvasTemplate(FigureCanvasBase)
matplotlib.backends.backend_template.FigureCanvasTemplate.draw(self)
matplotlib.backends.backend_template.FigureCanvasTemplate.get_default_filetype(self)
matplotlib.backends.backend_template.FigureCanvasTemplate.print_foo(self,filename,**kwargs)
matplotlib.backends.backend_template.FigureManagerTemplate(FigureManagerBase)
matplotlib.backends.backend_template.GraphicsContextTemplate(GraphicsContextBase)
matplotlib.backends.backend_template.RendererTemplate(self,dpi)
matplotlib.backends.backend_template.RendererTemplate.__init__(self,dpi)
matplotlib.backends.backend_template.RendererTemplate.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_template.RendererTemplate.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_template.RendererTemplate.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_template.RendererTemplate.flipy(self)
matplotlib.backends.backend_template.RendererTemplate.get_canvas_width_height(self)
matplotlib.backends.backend_template.RendererTemplate.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_template.RendererTemplate.new_gc(self)
matplotlib.backends.backend_template.RendererTemplate.points_to_pixels(self,points)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk3agg.py----------------------------------------
A:matplotlib.backends.backend_gtk3agg.allocation->self.get_allocation()
A:matplotlib.backends.backend_gtk3agg.x->int(bbox.x0 / scale)
A:matplotlib.backends.backend_gtk3agg.buf->cbook._unmultiplied_rgba8888_to_premultiplied_argb32(np.asarray(self.copy_from_bbox(bbox)))
A:matplotlib.backends.backend_gtk3agg.image->cairo.ImageSurface.create_for_data(buf.ravel().data, cairo.FORMAT_ARGB32, width, height)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg(self,figure)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.__init__(self,figure)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.blit(self,bbox=None)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3agg.FigureManagerGTK3Agg(backend_gtk3.FigureManagerGTK3)
matplotlib.backends.backend_gtk3agg._BackendGTK3Cairo(_BackendGTK3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk3.py----------------------------------------
A:matplotlib.backends.backend_gtk3._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_gtk3.icon_filename->matplotlib._api.deprecated('3.6', obj_type='')(property(lambda self: 'matplotlib.png' if sys.platform == 'win32' else 'matplotlib.svg'))
A:matplotlib.backends.backend_gtk3.window_icon->matplotlib._api.deprecated('3.6', obj_type='')(property(lambda self: str(cbook._get_data_path('images', __getattr__('icon_filename')))))
A:matplotlib.backends.backend_gtk3.manager_class->matplotlib._api.classproperty(lambda cls: FigureManagerGTK3)
A:matplotlib.backends.backend_gtk3.css->gi.repository.Gtk.CssProvider()
A:matplotlib.backends.backend_gtk3.style_ctx->self.get_style_context()
A:matplotlib.backends.backend_gtk3.window->self.canvas.get_window()
A:matplotlib.backends.backend_gtk3.context->gi.repository.GLib.MainContext.default()
A:matplotlib.backends.backend_gtk3.(t, x, y, state)->self.canvas.get_window().get_device_position(window.get_display().get_device_manager().get_client_pointer())
A:matplotlib.backends.backend_gtk3.gtk_mods->gi.repository.Gdk.Keymap.get_for_display(self.get_display()).get_modifier_state()
A:matplotlib.backends.backend_gtk3.unikey->chr(Gdk.keyval_to_unicode(event.keyval))
A:matplotlib.backends.backend_gtk3.key->key.capitalize().capitalize()
A:matplotlib.backends.backend_gtk3.mods->self._mpl_modifiers(event.state, exclude=key)
A:matplotlib.backends.backend_gtk3.self._idle_draw_id->gi.repository.GLib.idle_add(idle_draw)
A:matplotlib.backends.backend_gtk3.image->gi.repository.Gtk.Image.new_from_gicon(Gio.Icon.new_for_string(image_file), Gtk.IconSize.LARGE_TOOLBAR)
A:matplotlib.backends.backend_gtk3.button._signal_handler->gi.repository.Gtk.ToolButton().connect('clicked', getattr(self, callback))
A:matplotlib.backends.backend_gtk3.toolitem->gi.repository.Gtk.ToolItem()
A:matplotlib.backends.backend_gtk3.label->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk3.self.message->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk3.win->matplotlib._api.deprecated('3.6')(property(lambda self: self._win))
A:matplotlib.backends.backend_gtk3.dialog->gi.repository.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg)
A:matplotlib.backends.backend_gtk3.ff->gi.repository.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg).get_filter()
A:matplotlib.backends.backend_gtk3.name->gi.repository.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg).get_filter().get_name()
A:matplotlib.backends.backend_gtk3.response->gi.repository.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg).run()
A:matplotlib.backends.backend_gtk3.fname->gi.repository.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg).get_filename()
A:matplotlib.backends.backend_gtk3.mpl.rcParams['savefig.directory']->os.path.dirname(fname)
A:matplotlib.backends.backend_gtk3.self._message->gi.repository.Gtk.Label()
A:matplotlib.backends.backend_gtk3.button->gi.repository.Gtk.ToolButton()
A:matplotlib.backends.backend_gtk3.signal->gi.repository.Gtk.ToolButton().connect('clicked', self._call_tool, name)
A:matplotlib.backends.backend_gtk3.toolbar->gi.repository.Gtk.Toolbar()
A:matplotlib.backends.backend_gtk3.sep->gi.repository.Gtk.Separator()
A:matplotlib.backends.backend_gtk3.parts->key.capitalize().capitalize().split('+')
A:matplotlib.backends.backend_gtk3.section->gi.repository.Gtk.ShortcutsSection()
A:matplotlib.backends.backend_gtk3.group->gi.repository.Gtk.ShortcutsGroup()
A:matplotlib.backends.backend_gtk3.shortcut->gi.repository.Gtk.ShortcutsShortcut(accelerator=' '.join((self._normalize_shortcut(key) for key in self.toolmanager.get_tool_keymap(name) if self._is_valid_shortcut(key))), title=tool.name, subtitle=tool.description)
A:matplotlib.backends.backend_gtk3.clipboard->gi.repository.Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
A:matplotlib.backends.backend_gtk3.(x, y, width, height)->self.canvas.get_window().get_geometry()
A:matplotlib.backends.backend_gtk3.pb->gi.repository.Gdk.pixbuf_get_from_window(window, x, y, width, height)
A:matplotlib.backends.backend_gtk3.parent->parent.get_toplevel().get_toplevel()
A:matplotlib.backends.backend_gtk3.msg->','.join(map(str, msg))
matplotlib.backends.backend_gtk3.FigureCanvasGTK3(self,figure=None)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.__init__(self,figure=None)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._draw_rubberband(self,rect)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._get_key(self,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._mpl_coords(self,event=None)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._mpl_modifiers(event_state,*,exclude=None)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._post_draw(self,widget,ctx)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._update_device_pixel_ratio(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.button_press_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.button_release_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.configure_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.destroy(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.draw(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.draw_idle(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.enter_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.flush_events(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.key_press_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.key_release_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.leave_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.motion_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.scroll_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.set_cursor(self,cursor)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.size_allocate(self,widget,allocation)
matplotlib.backends.backend_gtk3.FigureManagerGTK3(_FigureManagerGTK)
matplotlib.backends.backend_gtk3.HelpGTK3(backend_tools.ToolHelpBase)
matplotlib.backends.backend_gtk3.HelpGTK3._is_valid_shortcut(self,key)
matplotlib.backends.backend_gtk3.HelpGTK3._normalize_shortcut(self,key)
matplotlib.backends.backend_gtk3.HelpGTK3._show_shortcuts_dialog(self)
matplotlib.backends.backend_gtk3.HelpGTK3._show_shortcuts_window(self)
matplotlib.backends.backend_gtk3.HelpGTK3.trigger(self,*args)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3(self,canvas,window=None)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.__init__(self,canvas,window=None)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.save_figure(self,*args)
matplotlib.backends.backend_gtk3.SaveFigureGTK3(backend_tools.SaveFigureBase)
matplotlib.backends.backend_gtk3.SaveFigureGTK3.trigger(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.ToolCopyToClipboardGTK3(backend_tools.ToolCopyToClipboardBase)
matplotlib.backends.backend_gtk3.ToolCopyToClipboardGTK3.trigger(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.ToolbarGTK3(self,toolmanager)
matplotlib.backends.backend_gtk3.ToolbarGTK3.__init__(self,toolmanager)
matplotlib.backends.backend_gtk3.ToolbarGTK3._add_button(self,button,group,position)
matplotlib.backends.backend_gtk3.ToolbarGTK3._add_separator(self)
matplotlib.backends.backend_gtk3.ToolbarGTK3._call_tool(self,btn,name)
matplotlib.backends.backend_gtk3.ToolbarGTK3.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_gtk3.ToolbarGTK3.remove_toolitem(self,name)
matplotlib.backends.backend_gtk3.ToolbarGTK3.set_message(self,s)
matplotlib.backends.backend_gtk3.ToolbarGTK3.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_gtk3._BackendGTK3(_BackendGTK)
matplotlib.backends.backend_gtk3.__getattr__
matplotlib.backends.backend_gtk3._mpl_to_gtk_cursor(mpl_cursor)
matplotlib.backends.backend_gtk3.error_msg_gtk(msg,parent=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_ps.py----------------------------------------
A:matplotlib.backends.backend_ps._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_ps.ps_backend_helper->matplotlib._api.deprecated('3.7', obj_type='')(property(lambda self: PsBackendHelper()))
A:matplotlib.backends.backend_ps.s->re.sub(b'[^ -~\\n]', lambda x: b'\\%03o' % ord(x.group()), s)
A:matplotlib.backends.backend_ps.font->self._get_font_ttf(prop)
A:matplotlib.backends.backend_ps.preamble->'%!PS-Adobe-3.0 Resource-Font\n%%Creator: Converted from TrueType to Type 3 by Matplotlib.\n10 dict begin\n/FontName /{font_name} def\n/PaintType 0 def\n/FontMatrix [{inv_units_per_em} 0 0 {inv_units_per_em} 0 0] def\n/FontBBox [{bbox}] def\n/FontType 3 def\n/Encoding [{encoding}] def\n/CharStrings {num_glyphs} dict dup begin\n/.notdef 0 def\n'.format(font_name=font.postscript_name, inv_units_per_em=1 / font.units_per_EM, bbox=' '.join(map(str, font.bbox)), encoding=' '.join(('/{}'.format(font.get_glyph_name(glyph_id)) for glyph_id in glyph_ids)), num_glyphs=len(glyph_ids) + 1)
A:matplotlib.backends.backend_ps.g->self._get_font_ttf(prop).load_glyph(glyph_id, LOAD_NO_SCALE)
A:matplotlib.backends.backend_ps.(v, c)->self._get_font_ttf(prop).get_path()
A:matplotlib.backends.backend_ps.subset_str->''.join((chr(c) for c in chars))
A:matplotlib.backends.backend_ps.fontdata->_backend_pdf_ps.get_glyphs_subset(font_path, subset_str)
A:matplotlib.backends.backend_ps.tmpfile->os.path.join(tmpdir, 'tmp.ps')
A:matplotlib.backends.backend_ps._afm_font_dir->matplotlib.cbook._get_data_path('fonts/afm')
A:matplotlib.backends.backend_ps.self._character_tracker->_backend_pdf_ps.CharacterTracker()
A:matplotlib.backends.backend_ps.self._logwarn_once->functools.lru_cache(None)(_log.warning)
A:matplotlib.backends.backend_ps.linewidth->float(linewidth)
A:matplotlib.backends.backend_ps.rect->gc.get_clip_rectangle()
A:matplotlib.backends.backend_ps.(path, trf)->gc.get_clip_path()
A:matplotlib.backends.backend_ps.custom_clip_cmd->self._clip_paths.get(key)
A:matplotlib.backends.backend_ps.hexdata->numpy.empty(shape[0] * shape[1], dtype=[('flags', 'u1'), ('points', '2>u4'), ('colors', '3u1')]).tobytes().hex('\n', -64)
A:matplotlib.backends.backend_ps.matrix->' '.join(map(str, transform.frozen().to_values()))
A:matplotlib.backends.backend_ps.ps->'\n'.join(ps_cmd)
A:matplotlib.backends.backend_ps.lw->gc.get_linewidth()
A:matplotlib.backends.backend_ps.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_ps.path_bytes->self._convert_path(path, transform, simplify=False)
A:matplotlib.backends.backend_ps.(w, h, bl)->self.get_text_width_height_descent(s, prop, ismath='TeX')
A:matplotlib.backends.backend_ps.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_ps.fontcmd->{'sans-serif': '{\\sffamily %s}', 'monospace': '{\\ttfamily %s}'}.get(mpl.rcParams['font.family'][0], '{\\rmfamily %s}')
A:matplotlib.backends.backend_ps.pos->_nums_to_str(x, y - bl)
A:matplotlib.backends.backend_ps.ps_name->item.ft_object.postscript_name.encode('ascii', 'replace').decode('ascii')
A:matplotlib.backends.backend_ps.name->matplotlib._mathtext_data.uni2type1.get(ord(c), f'uni{ord(c):04X}')
A:matplotlib.backends.backend_ps.width->self._get_font_ttf(prop).get_width_char('?')
A:matplotlib.backends.backend_ps.kern->self._get_font_ttf(prop).get_kern_dist_from_name(last_name, name)
A:matplotlib.backends.backend_ps.glyph_name->item.ft_object.get_glyph_name(item.glyph_idx)
A:matplotlib.backends.backend_ps.thetext->'\n'.join((f'{x:g} 0 m /{name:s} glyphshow' for (_, x, name) in group))
A:matplotlib.backends.backend_ps.(width, height, descent, glyphs, rects)->self._text2path.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_ps.flat_points->trans.transform(flat_points)
A:matplotlib.backends.backend_ps.flat_colors->colors.reshape((shape[0] * shape[1], 4))
A:matplotlib.backends.backend_ps.factor->numpy.ceil((2 ** 32 - 1) / (points_max - points_min))
A:matplotlib.backends.backend_ps.data->numpy.empty(shape[0] * shape[1], dtype=[('flags', 'u1'), ('points', '2>u4'), ('colors', '3u1')])
A:matplotlib.backends.backend_ps.hatch->gc.get_hatch()
A:matplotlib.backends.backend_ps.hatch_name->self.create_hatch(hatch)
A:matplotlib.backends.backend_ps.(portrait, landscape)->range(2)
A:matplotlib.backends.backend_ps.dsc_comments['Title']->filename.encode('ascii', 'replace').decode('ascii')
A:matplotlib.backends.backend_ps.dsc_comments['Creator']->(metadata or {}).get('Creator', f'Matplotlib v{mpl.__version__}, https://matplotlib.org/')
A:matplotlib.backends.backend_ps.source_date_epoch->os.getenv('SOURCE_DATE_EPOCH')
A:matplotlib.backends.backend_ps.dsc_comments->'\n'.join((f'%%{k}: {v}' for (k, v) in dsc_comments.items()))
A:matplotlib.backends.backend_ps.papertype->_get_papertype(width, height)
A:matplotlib.backends.backend_ps.orientation->matplotlib._api.check_getitem(_Orientation, orientation=orientation.lower())
A:matplotlib.backends.backend_ps.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_ps.(paper_width, paper_height)->matplotlib._api.check_getitem(_Orientation, orientation=orientation.lower()).swap_if_landscape(self.figure.get_size_inches())
A:matplotlib.backends.backend_ps.self._pswriter->StringIO()
A:matplotlib.backends.backend_ps.ps_renderer->RendererPS(width, height, self._pswriter, imagedpi=dpi)
A:matplotlib.backends.backend_ps.renderer->MixedModeRenderer(self.figure, width, height, dpi, ps_renderer, bbox_inches_restore=bbox_inches_restore)
A:matplotlib.backends.backend_ps.Ndict->len(psDefs)
A:matplotlib.backends.backend_ps.file->codecs.getwriter('latin-1')(file)
A:matplotlib.backends.backend_ps.tmppath->pathlib.Path(tmpdir, 'tmp.ps')
A:matplotlib.backends.backend_ps.psfrag_rotated->_convert_psfrags(tmppath, ps_renderer.psfrag, paper_width, paper_height, orientation.name)
A:matplotlib.backends.backend_ps.print_ps->functools.partialmethod(_print_ps, 'ps')
A:matplotlib.backends.backend_ps.print_eps->functools.partialmethod(_print_ps, 'eps')
A:matplotlib.backends.backend_ps.dvifile->TexManager().make_dvi('\n\\begin{figure}\n  \\centering\\leavevmode\n  %(psfrags)s\n  \\includegraphics*[angle=%(angle)s]{%(epsfile)s}\n\\end{figure}' % {'psfrags': '\n'.join(psfrags), 'angle': 90 if orientation == 'landscape' else 0, 'epsfile': tmppath.resolve().as_posix()}, fontsize=10)
A:matplotlib.backends.backend_ps.psfile->os.path.join(tmpdir, 'tmp.ps')
A:matplotlib.backends.backend_ps.tmppdf->pathlib.Path(tmpdir, 'tmp.pdf')
A:matplotlib.backends.backend_ps.tmpps->pathlib.Path(tmpdir, 'tmp.ps')
A:matplotlib.backends.backend_ps.(bbox_info, rotate)->get_bbox_header(bbox, rotated=rotated)
matplotlib.backends.backend_ps.FigureCanvasPS(FigureCanvasBase)
matplotlib.backends.backend_ps.FigureCanvasPS._print_figure(self,fmt,outfile,*,dpi,dsc_comments,orientation,papertype,bbox_inches_restore=None)
matplotlib.backends.backend_ps.FigureCanvasPS._print_figure_tex(self,fmt,outfile,*,dpi,dsc_comments,orientation,papertype,bbox_inches_restore=None)
matplotlib.backends.backend_ps.FigureCanvasPS._print_ps(self,fmt,outfile,*,metadata=None,papertype=None,orientation='portrait',bbox_inches_restore=None,**kwargs)
matplotlib.backends.backend_ps.FigureCanvasPS.draw(self)
matplotlib.backends.backend_ps.FigureCanvasPS.get_default_filetype(self)
matplotlib.backends.backend_ps.PsBackendHelper(self)
matplotlib.backends.backend_ps.PsBackendHelper.__init__(self)
matplotlib.backends.backend_ps.RendererPS(self,width,height,pswriter,imagedpi=72)
matplotlib.backends.backend_ps.RendererPS.__init__(self,width,height,pswriter,imagedpi=72)
matplotlib.backends.backend_ps.RendererPS._convert_path(self,path,transform,clip=False,simplify=None)
matplotlib.backends.backend_ps.RendererPS._draw_ps(self,ps,gc,rgbFace,*,fill=True,stroke=True)
matplotlib.backends.backend_ps.RendererPS._get_clip_cmd(self,gc)
matplotlib.backends.backend_ps.RendererPS._is_transparent(self,rgb_or_rgba)
matplotlib.backends.backend_ps.RendererPS._linecap_cmd(linecap)
matplotlib.backends.backend_ps.RendererPS._linejoin_cmd(linejoin)
matplotlib.backends.backend_ps.RendererPS.create_hatch(self,hatch)
matplotlib.backends.backend_ps.RendererPS.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_ps.RendererPS.draw_gouraud_triangles(self,gc,points,colors,trans)
matplotlib.backends.backend_ps.RendererPS.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_ps.RendererPS.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_ps.RendererPS.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_ps.RendererPS.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_ps.RendererPS.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offset_trans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_ps.RendererPS.draw_tex(self,gc,x,y,s,prop,angle,*,mtext=None)
matplotlib.backends.backend_ps.RendererPS.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_ps.RendererPS.get_image_magnification(self)
matplotlib.backends.backend_ps.RendererPS.set_color(self,r,g,b,store=True)
matplotlib.backends.backend_ps.RendererPS.set_font(self,fontname,fontsize,store=True)
matplotlib.backends.backend_ps.RendererPS.set_linecap(self,linecap,store=True)
matplotlib.backends.backend_ps.RendererPS.set_linedash(self,offset,seq,store=True)
matplotlib.backends.backend_ps.RendererPS.set_linejoin(self,linejoin,store=True)
matplotlib.backends.backend_ps.RendererPS.set_linewidth(self,linewidth,store=True)
matplotlib.backends.backend_ps._BackendPS(_Backend)
matplotlib.backends.backend_ps._Orientation(Enum)
matplotlib.backends.backend_ps._Orientation.swap_if_landscape(self,shape)
matplotlib.backends.backend_ps.__getattr__
matplotlib.backends.backend_ps._convert_psfrags(tmppath,psfrags,paper_width,paper_height,orientation)
matplotlib.backends.backend_ps._font_to_ps_type3(font_path,chars)
matplotlib.backends.backend_ps._font_to_ps_type42(font_path,chars,fh)
matplotlib.backends.backend_ps._get_papertype(w,h)
matplotlib.backends.backend_ps._log_if_debug_on(meth)
matplotlib.backends.backend_ps._move_path_to_path_or_stream(src,dst)
matplotlib.backends.backend_ps._nums_to_str(*args)
matplotlib.backends.backend_ps._try_distill(func,tmppath,*args,**kwargs)
matplotlib.backends.backend_ps.convert_psfrags(tmpfile,psfrags,font_preamble,custom_preamble,paper_width,paper_height,orientation)
matplotlib.backends.backend_ps.get_bbox_header(lbrt,rotated=False)
matplotlib.backends.backend_ps.gs_distill(tmpfile,eps=False,ptype='letter',bbox=None,rotated=False)
matplotlib.backends.backend_ps.pstoeps(tmpfile,bbox=None,rotated=False)
matplotlib.backends.backend_ps.quote_ps_string(s)
matplotlib.backends.backend_ps.xpdf_distill(tmpfile,eps=False,ptype='letter',bbox=None,rotated=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_gtk3cairo.py----------------------------------------
A:matplotlib.backends.backend_gtk3cairo.allocation->self.get_allocation()
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo(FigureCanvasCairo,FigureCanvasGTK3)
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3cairo._BackendGTK3Cairo(_BackendGTK3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/_backend_tk.py----------------------------------------
A:matplotlib.backends._backend_tk._log->logging.getLogger(__name__)
A:matplotlib.backends._backend_tk.foreground->matplotlib._c_internal_utils.Win32_GetForegroundWindow()
A:matplotlib.backends._backend_tk.(photoimage, dataptr, offsets, bboxptr, comp_rule)->_blit_args.pop(argsid)
A:matplotlib.backends._backend_tk.data->numpy.asarray(aggimage)
A:matplotlib.backends._backend_tk.((x1, y1), (x2, y2))->bbox.__array__()
A:matplotlib.backends._backend_tk.x1->max(math.floor(x1), 0)
A:matplotlib.backends._backend_tk.x2->min(math.ceil(x2), width)
A:matplotlib.backends._backend_tk.y1->max(math.floor(y1), 0)
A:matplotlib.backends._backend_tk.y2->min(math.ceil(y2), height)
A:matplotlib.backends._backend_tk.argsid->str(id(args))
A:matplotlib.backends._backend_tk.self._timer->weakself().parent.after_idle(lambda : self.parent.after(self._interval, self._on_timer))
A:matplotlib.backends._backend_tk.manager_class->type(first_manager)
A:matplotlib.backends._backend_tk.(w, h)->weakself().get_width_height(physical=True)
A:matplotlib.backends._backend_tk.self._tkcanvas->tkinter.Canvas(master=master, background='white', width=w, height=h, borderwidth=0, highlightthickness=0)
A:matplotlib.backends._backend_tk.self._tkphoto->tkinter.PhotoImage(master=self._tkcanvas, width=int(width), height=int(height))
A:matplotlib.backends._backend_tk.root->weakroot()
A:matplotlib.backends._backend_tk.weakself->weakref.ref(self)
A:matplotlib.backends._backend_tk.weakroot->weakref.ref(root)
A:matplotlib.backends._backend_tk.self->weakself()
A:matplotlib.backends._backend_tk.scroll_event_windows_id->weakroot().bind('<MouseWheel>', scroll_event_windows, '+')
A:matplotlib.backends._backend_tk.filter_destroy_id->weakroot().bind('<Destroy>', filter_destroy, '+')
A:matplotlib.backends._backend_tk.ratio->round(self._tkcanvas.tk.call('tk', 'scaling') / (96 / 72), 2)
A:matplotlib.backends._backend_tk.self._idle_draw_id->weakself()._tkcanvas.after_idle(idle_draw)
A:matplotlib.backends._backend_tk.num->getattr(event, 'num', None)
A:matplotlib.backends._backend_tk.w->event.widget.winfo_containing(event.x_root, event.y_root)
A:matplotlib.backends._backend_tk.x->weakself()._tkcanvas.canvasx(event.x_root - w.winfo_rootx())
A:matplotlib.backends._backend_tk.key->matplotlib.cbook._unikey_or_keysym_to_mplkey(unikey, event.keysym)
A:matplotlib.backends._backend_tk.mods->weakself()._mpl_modifiers(event, exclude=key)
A:matplotlib.backends._backend_tk.milliseconds->int(1000 * timeout)
A:matplotlib.backends._backend_tk.self._event_loop_id->weakself()._tkcanvas.after_idle(self.stop_event_loop)
A:matplotlib.backends._backend_tk.window_frame->int(window.wm_frame(), 16)
A:matplotlib.backends._backend_tk.self._window_dpi->tkinter.IntVar(master=window, value=96, name=f'window_dpi{window_frame}')
A:matplotlib.backends._backend_tk.self._window_dpi_cbname->weakself()._window_dpi.trace_add('write', self._update_window_dpi)
A:matplotlib.backends._backend_tk.window->matplotlib._api.deprecated('3.6', alternative='self.master')(property(lambda self: self.master))
A:matplotlib.backends._backend_tk.icon_fname->str(cbook._get_data_path('images/matplotlib.png'))
A:matplotlib.backends._backend_tk.icon_img->PIL.ImageTk.PhotoImage(file=icon_fname, master=window)
A:matplotlib.backends._backend_tk.icon_fname_large->str(cbook._get_data_path('images/matplotlib_large.png'))
A:matplotlib.backends._backend_tk.icon_img_large->PIL.ImageTk.PhotoImage(file=icon_fname_large, master=window)
A:matplotlib.backends._backend_tk.canvas->canvas_class(figure, master=window)
A:matplotlib.backends._backend_tk.manager->cls(canvas, num, window)
A:matplotlib.backends._backend_tk.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.backends._backend_tk.newdpi->weakself()._window_dpi.get()
A:matplotlib.backends._backend_tk.is_fullscreen->bool(self.window.attributes('-fullscreen'))
A:matplotlib.backends._backend_tk.self._buttons[text]button->weakself()._Button(text, str(cbook._get_data_path(f'images/{image_file}.png')), toggle=callback in ['zoom', 'pan'], command=getattr(self, callback))
A:matplotlib.backends._backend_tk.self._label_font->tkinter.font.Font(size=10)
A:matplotlib.backends._backend_tk.label->tkinter.Label(tw, text=self.text, justify=tk.LEFT, relief=tk.SOLID, borderwidth=1)
A:matplotlib.backends._backend_tk.self.message->tkinter.StringVar(master=self)
A:matplotlib.backends._backend_tk.self._message_label->tkinter.Label(master=self, font=self._label_font, textvariable=self._message)
A:matplotlib.backends._backend_tk.self.canvas._rubberband_rect_black->weakself().canvas._tkcanvas.create_rectangle(x0, y0, x1, y1)
A:matplotlib.backends._backend_tk.self.canvas._rubberband_rect_white->weakself().canvas._tkcanvas.create_rectangle(x0, y0, x1, y1, outline='white', dash=(3, 3))
A:matplotlib.backends._backend_tk.lastrect->matplotlib._api.deprecated('3.6')(property(lambda self: self.figure.canvas._rubberband_rect_black))
A:matplotlib.backends._backend_tk.path_regular->matplotlib.cbook._get_data_path('images', button._image_file)
A:matplotlib.backends._backend_tk.path_large->matplotlib.cbook._get_data_path('images', button._image_file).with_name(path_regular.name.replace('.png', '_large.png'))
A:matplotlib.backends._backend_tk.size->NavigationToolbar2Tk._Button(frame, name, image_file, toggle, lambda : self._button_click(name)).winfo_pixels('18p')
A:matplotlib.backends._backend_tk.color->_get_color(color)
A:matplotlib.backends._backend_tk.image_data->numpy.asarray(image).copy()
A:matplotlib.backends._backend_tk.black_mask->(image_data[..., :3] == 0).all(axis=-1)
A:matplotlib.backends._backend_tk.im->im.convert('RGBA').convert('RGBA')
A:matplotlib.backends._backend_tk.image->PIL.ImageTk.PhotoImage(im.resize((size, size)), master=self)
A:matplotlib.backends._backend_tk.im_alt->_recolor_icon(im, foreground)
A:matplotlib.backends._backend_tk.image_alt->PIL.ImageTk.PhotoImage(im_alt.resize((size, size)), master=self)
A:matplotlib.backends._backend_tk.(r1, g1, b1)->_get_color('selectcolor')
A:matplotlib.backends._backend_tk.(r2, g2, b2)->_get_color('activebackground')
A:matplotlib.backends._backend_tk.b->tkinter.Checkbutton(master=self, text=text, command=command, indicatoron=False, variable=var, offrelief='flat', overrelief='groove', borderwidth=1)
A:matplotlib.backends._backend_tk.var->tkinter.IntVar(master=self)
A:matplotlib.backends._backend_tk.s->tkinter.Frame(master=self, height='18p', relief=tk.RIDGE, bg='DarkGray')
A:matplotlib.backends._backend_tk.filetypes->weakself().canvas.get_supported_filetypes().copy()
A:matplotlib.backends._backend_tk.default_filetype->weakself().canvas.get_default_filetype()
A:matplotlib.backends._backend_tk.default_filetype_name->weakself().canvas.get_supported_filetypes().copy().pop(default_filetype)
A:matplotlib.backends._backend_tk.initialdir->os.path.expanduser(mpl.rcParams['savefig.directory'])
A:matplotlib.backends._backend_tk.initialfile->weakself().canvas.get_default_filename()
A:matplotlib.backends._backend_tk.fname->tkinter.filedialog.asksaveasfilename(master=self.canvas.get_tk_widget().master, title='Save the figure', filetypes=tk_filetypes, defaultextension=defaultextension, initialdir=initialdir, initialfile=initialfile)
A:matplotlib.backends._backend_tk.mpl.rcParams['savefig.directory']->os.path.dirname(str(fname))
A:matplotlib.backends._backend_tk.toolTip->ToolTip(widget)
A:matplotlib.backends._backend_tk.(x, y, _, _)->weakself().widget.bbox('insert')
A:matplotlib.backends._backend_tk.self.tipwindowtw->tkinter.Toplevel(self.widget)
A:matplotlib.backends._backend_tk.self._message->tkinter.StringVar(master=self)
A:matplotlib.backends._backend_tk.frame->tkinter.Frame(master=self, borderwidth=0)
A:matplotlib.backends._backend_tk.buttons->tkinter.Frame(master=self, borderwidth=0).pack_slaves()
A:matplotlib.backends._backend_tk.button->NavigationToolbar2Tk._Button(frame, name, image_file, toggle, lambda : self._button_click(name))
A:matplotlib.backends._backend_tk.dialog->SimpleDialog(self.figure.canvas._tkcanvas, self._get_help_text(), ['OK'])
matplotlib.backends._backend_tk.ConfigureSubplotsTk(backend_tools.ConfigureSubplotsBase)
matplotlib.backends._backend_tk.ConfigureSubplotsTk.trigger(self,*args)
matplotlib.backends._backend_tk.FigureCanvasTk(self,figure=None,master=None)
matplotlib.backends._backend_tk.FigureCanvasTk.__init__(self,figure=None,master=None)
matplotlib.backends._backend_tk.FigureCanvasTk._event_mpl_coords(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk._get_key(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk._mpl_modifiers(event,*,exclude=None)
matplotlib.backends._backend_tk.FigureCanvasTk._update_device_pixel_ratio(self,event=None)
matplotlib.backends._backend_tk.FigureCanvasTk.button_dblclick_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.button_press_event(self,event,dblclick=False)
matplotlib.backends._backend_tk.FigureCanvasTk.button_release_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.draw_idle(self)
matplotlib.backends._backend_tk.FigureCanvasTk.enter_notify_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.flush_events(self)
matplotlib.backends._backend_tk.FigureCanvasTk.get_tk_widget(self)
matplotlib.backends._backend_tk.FigureCanvasTk.key_press(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.key_release(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.leave_notify_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.motion_notify_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.new_timer(self,*args,**kwargs)
matplotlib.backends._backend_tk.FigureCanvasTk.resize(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.scroll_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.scroll_event_windows(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.set_cursor(self,cursor)
matplotlib.backends._backend_tk.FigureCanvasTk.start_event_loop(self,timeout=0)
matplotlib.backends._backend_tk.FigureCanvasTk.stop_event_loop(self)
matplotlib.backends._backend_tk.FigureManagerTk(self,canvas,num,window)
matplotlib.backends._backend_tk.FigureManagerTk.__init__(self,canvas,num,window)
matplotlib.backends._backend_tk.FigureManagerTk._update_window_dpi(self,*args)
matplotlib.backends._backend_tk.FigureManagerTk.create_with_canvas(cls,canvas_class,figure,num)
matplotlib.backends._backend_tk.FigureManagerTk.destroy(self,*args)
matplotlib.backends._backend_tk.FigureManagerTk.full_screen_toggle(self)
matplotlib.backends._backend_tk.FigureManagerTk.get_window_title(self)
matplotlib.backends._backend_tk.FigureManagerTk.resize(self,width,height)
matplotlib.backends._backend_tk.FigureManagerTk.set_window_title(self,title)
matplotlib.backends._backend_tk.FigureManagerTk.show(self)
matplotlib.backends._backend_tk.FigureManagerTk.start_main_loop(cls)
matplotlib.backends._backend_tk.HelpTk(backend_tools.ToolHelpBase)
matplotlib.backends._backend_tk.HelpTk.trigger(self,*args)
matplotlib.backends._backend_tk.NavigationToolbar2Tk(self,canvas,window=None,*,pack_toolbar=True)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._Button(self,text,image_file,toggle,command)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._Spacer(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.__init__(self,canvas,window=None,*,pack_toolbar=True)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._rescale(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._set_image_for_button(self,button)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._update_buttons_checked(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.pan(self,*args)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.remove_rubberband(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.save_figure(self,*args)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.set_history_buttons(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.set_message(self,s)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.zoom(self,*args)
matplotlib.backends._backend_tk.RubberbandTk(backend_tools.RubberbandBase)
matplotlib.backends._backend_tk.RubberbandTk.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends._backend_tk.RubberbandTk.remove_rubberband(self)
matplotlib.backends._backend_tk.SaveFigureTk(backend_tools.SaveFigureBase)
matplotlib.backends._backend_tk.SaveFigureTk.trigger(self,*args)
matplotlib.backends._backend_tk.TimerTk(self,parent,*args,**kwargs)
matplotlib.backends._backend_tk.TimerTk.__init__(self,parent,*args,**kwargs)
matplotlib.backends._backend_tk.TimerTk._on_timer(self)
matplotlib.backends._backend_tk.TimerTk._timer_start(self)
matplotlib.backends._backend_tk.TimerTk._timer_stop(self)
matplotlib.backends._backend_tk.ToolTip(self,widget)
matplotlib.backends._backend_tk.ToolTip.__init__(self,widget)
matplotlib.backends._backend_tk.ToolTip.createToolTip(widget,text)
matplotlib.backends._backend_tk.ToolTip.hidetip(self)
matplotlib.backends._backend_tk.ToolTip.showtip(self,text)
matplotlib.backends._backend_tk.ToolbarTk(self,toolmanager,window=None)
matplotlib.backends._backend_tk.ToolbarTk.__init__(self,toolmanager,window=None)
matplotlib.backends._backend_tk.ToolbarTk._add_separator(self)
matplotlib.backends._backend_tk.ToolbarTk._button_click(self,name)
matplotlib.backends._backend_tk.ToolbarTk._get_groupframe(self,group)
matplotlib.backends._backend_tk.ToolbarTk._rescale(self)
matplotlib.backends._backend_tk.ToolbarTk.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends._backend_tk.ToolbarTk.remove_toolitem(self,name)
matplotlib.backends._backend_tk.ToolbarTk.set_message(self,s)
matplotlib.backends._backend_tk.ToolbarTk.toggle_toolitem(self,name,toggled)
matplotlib.backends._backend_tk._BackendTk(_Backend)
matplotlib.backends._backend_tk._blit(argsid)
matplotlib.backends._backend_tk._restore_foreground_window_at_end()
matplotlib.backends._backend_tk.blit(photoimage,aggimage,offsets,bbox=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/backend_agg.py----------------------------------------
A:matplotlib.backends.backend_agg.lock->threading.RLock()
A:matplotlib.backends.backend_agg.self._renderer->self._filter_renderers.pop()
A:matplotlib.backends.backend_agg.self.mathtext_parser->MathTextParser('Agg')
A:matplotlib.backends.backend_agg.self.bbox->matplotlib.transforms.Bbox.from_bounds(0, 0, self.width, self.height)
A:matplotlib.backends.backend_agg.nch->numpy.ceil(npts / nmax)
A:matplotlib.backends.backend_agg.chsize->int(np.ceil(npts / nch))
A:matplotlib.backends.backend_agg.i0->numpy.arange(0, npts, chsize)
A:matplotlib.backends.backend_agg.i1->numpy.zeros_like(i0)
A:matplotlib.backends.backend_agg.p->Path(v, c)
A:matplotlib.backends.backend_agg.(ox, oy, width, height, descent, font_image)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_agg.x->round(x + xd)
A:matplotlib.backends.backend_agg.y->round(y + yd)
A:matplotlib.backends.backend_agg.font->get_font(_fontManager._find_fonts_by_props(font_prop))
A:matplotlib.backends.backend_agg.(xo, yo)->get_font(_fontManager._find_fonts_by_props(font_prop)).get_bitmap_offset()
A:matplotlib.backends.backend_agg.(w, h)->get_font(_fontManager._find_fonts_by_props(font_prop)).get_width_height()
A:matplotlib.backends.backend_agg.d->get_font(_fontManager._find_fonts_by_props(font_prop)).get_descent()
A:matplotlib.backends.backend_agg.size->font_prop.get_size_in_points()
A:matplotlib.backends.backend_agg.texmanager->self.get_texmanager()
A:matplotlib.backends.backend_agg.Z->numpy.array(Z * 255.0, np.uint8)
A:matplotlib.backends.backend_agg.(w, h, d)->self.get_text_width_height_descent(s, prop, ismath='TeX')
A:matplotlib.backends.backend_agg.(x1, y1, x2, y2)->region.get_extents()
A:matplotlib.backends.backend_agg.orig_img->numpy.asarray(self.buffer_rgba())
A:matplotlib.backends.backend_agg.(slice_y, slice_x)->matplotlib.cbook._get_nonzero_slices(orig_img[..., 3])
A:matplotlib.backends.backend_agg.(img, ox, oy)->post_processing(cropped_img / 255, self.dpi)
A:matplotlib.backends.backend_agg.gc->self.new_gc()
A:matplotlib.backends.backend_agg.img->numpy.asarray(img * 255.0, np.uint8)
A:matplotlib.backends.backend_agg.renderer->self.get_renderer()
A:matplotlib.backends.backend_agg.self.renderer->RendererAgg(w, h, self.figure.dpi)
A:matplotlib.backends.backend_agg.(print_jpg.__doc__, print_tif.__doc__, print_webp.__doc__)->map('\n        Write the figure to a {} file.\n\n        Parameters\n        ----------\n        filename_or_obj : str or path-like or file-like\n            The file to write to.\n        pil_kwargs : dict, optional\n            Additional keyword arguments that are passed to\n            `PIL.Image.Image.save` when saving the figure.\n        '.format, ['JPEG', 'TIFF', 'WebP'])
matplotlib.backends.backend_agg.FigureCanvasAgg(FigureCanvasBase)
matplotlib.backends.backend_agg.FigureCanvasAgg._print_pil(self,filename_or_obj,fmt,pil_kwargs,metadata=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.copy_from_bbox(self,bbox)
matplotlib.backends.backend_agg.FigureCanvasAgg.draw(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.get_renderer(self,cleared=False)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg(self,filename_or_obj,*,pil_kwargs=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_png(self,filename_or_obj,*,metadata=None,pil_kwargs=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_raw(self,filename_or_obj)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_tif(self,filename_or_obj,*,pil_kwargs=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_webp(self,filename_or_obj,*,pil_kwargs=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.restore_region(self,region,bbox=None,xy=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb(self)
matplotlib.backends.backend_agg.RendererAgg(self,width,height,dpi)
matplotlib.backends.backend_agg.RendererAgg.__getstate__(self)
matplotlib.backends.backend_agg.RendererAgg.__init__(self,width,height,dpi)
matplotlib.backends.backend_agg.RendererAgg.__setstate__(self,state)
matplotlib.backends.backend_agg.RendererAgg._prepare_font(self,font_prop)
matplotlib.backends.backend_agg.RendererAgg._update_methods(self)
matplotlib.backends.backend_agg.RendererAgg.buffer_rgba(self)
matplotlib.backends.backend_agg.RendererAgg.clear(self)
matplotlib.backends.backend_agg.RendererAgg.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_agg.RendererAgg.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_agg.RendererAgg.draw_tex(self,gc,x,y,s,prop,angle,*,mtext=None)
matplotlib.backends.backend_agg.RendererAgg.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height(self)
matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite(self)
matplotlib.backends.backend_agg.RendererAgg.option_scale_image(self)
matplotlib.backends.backend_agg.RendererAgg.points_to_pixels(self,points)
matplotlib.backends.backend_agg.RendererAgg.restore_region(self,region,bbox=None,xy=None)
matplotlib.backends.backend_agg.RendererAgg.start_filter(self)
matplotlib.backends.backend_agg.RendererAgg.stop_filter(self,post_processing)
matplotlib.backends.backend_agg.RendererAgg.tostring_argb(self)
matplotlib.backends.backend_agg.RendererAgg.tostring_rgb(self)
matplotlib.backends.backend_agg._BackendAgg(_Backend)
matplotlib.backends.backend_agg.get_hinting_flag()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/qt_editor/_formlayout.py----------------------------------------
A:matplotlib.backends.qt_editor._formlayout._log->logging.getLogger(__name__)
A:matplotlib.backends.qt_editor._formlayout.colorChanged->matplotlib.backends.qt_compat.QtCore.Signal(QtGui.QColor)
A:matplotlib.backends.qt_editor._formlayout.self._color->matplotlib.backends.qt_compat.QtGui.QColor()
A:matplotlib.backends.qt_editor._formlayout.color->self.text()
A:matplotlib.backends.qt_editor._formlayout.pixmap->matplotlib.backends.qt_compat.QtGui.QPixmap(self.iconSize())
A:matplotlib.backends.qt_editor._formlayout.qcolor->to_qcolor(color)
A:matplotlib.backends.qt_editor._formlayout.rgba->matplotlib.colors.to_rgba(color)
A:matplotlib.backends.qt_editor._formlayout.self.lineedit->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(mcolors.to_hex(color.getRgbF(), keep_alpha=True), parent)
A:matplotlib.backends.qt_editor._formlayout.self.colorbtn->ColorButton(parent)
A:matplotlib.backends.qt_editor._formlayout.font->self.family.currentFont()
A:matplotlib.backends.qt_editor._formlayout.self.family->matplotlib.backends.qt_compat.QtWidgets.QFontComboBox(parent)
A:matplotlib.backends.qt_editor._formlayout.self.size->matplotlib.backends.qt_compat.QtWidgets.QComboBox(parent)
A:matplotlib.backends.qt_editor._formlayout.size->self.family.currentFont().pointSize()
A:matplotlib.backends.qt_editor._formlayout.self.italic->matplotlib.backends.qt_compat.QtWidgets.QCheckBox(self.tr('Italic'), parent)
A:matplotlib.backends.qt_editor._formlayout.self.bold->matplotlib.backends.qt_compat.QtWidgets.QCheckBox(self.tr('Bold'), parent)
A:matplotlib.backends.qt_editor._formlayout.text->edit.text()
A:matplotlib.backends.qt_editor._formlayout.update_buttons->matplotlib.backends.qt_compat.QtCore.Signal()
A:matplotlib.backends.qt_editor._formlayout.self.data->self.formwidget.get()
A:matplotlib.backends.qt_editor._formlayout.self.formlayout->matplotlib.backends.qt_compat.QtWidgets.QFormLayout(self)
A:matplotlib.backends.qt_editor._formlayout.dialog->FormDialog(data, title, comment, icon, parent, apply)
A:matplotlib.backends.qt_editor._formlayout.field->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(repr(value), self)
A:matplotlib.backends.qt_editor._formlayout.value->eval(str(field.text()))
A:matplotlib.backends.qt_editor._formlayout.selindex->keys.index(selindex)
A:matplotlib.backends.qt_editor._formlayout.index->self.tabwidget.addTab(widget, title)
A:matplotlib.backends.qt_editor._formlayout.datetime_->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(repr(value), self).dateTime()
A:matplotlib.backends.qt_editor._formlayout.date_->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(repr(value), self).date()
A:matplotlib.backends.qt_editor._formlayout.layout->matplotlib.backends.qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.qt_editor._formlayout.self.combobox->matplotlib.backends.qt_compat.QtWidgets.QComboBox()
A:matplotlib.backends.qt_editor._formlayout.self.stackwidget->matplotlib.backends.qt_compat.QtWidgets.QStackedWidget(self)
A:matplotlib.backends.qt_editor._formlayout.widget->FormWidget(data, with_margin=True, comment=comment, parent=self)
A:matplotlib.backends.qt_editor._formlayout.self.tabwidget->matplotlib.backends.qt_compat.QtWidgets.QTabWidget()
A:matplotlib.backends.qt_editor._formlayout.self.formwidget->FormWidget(data, comment=comment, parent=self)
A:matplotlib.backends.qt_editor._formlayout.self.bboxbbox->matplotlib.backends.qt_compat.QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.StandardButton(_to_int(_enum('QtWidgets.QDialogButtonBox.StandardButton').Ok) | _to_int(_enum('QtWidgets.QDialogButtonBox.StandardButton').Cancel)))
A:matplotlib.backends.qt_editor._formlayout.apply_btn->bbox.addButton(_enum('QtWidgets.QDialogButtonBox.StandardButton').Apply)
A:matplotlib.backends.qt_editor._formlayout.icon->matplotlib.backends.qt_compat.QtWidgets.QWidget().style().standardIcon(QtWidgets.QStyle.SP_MessageBoxQuestion)
A:matplotlib.backends.qt_editor._formlayout.btn->self.bbox.button(getattr(_enum('QtWidgets.QDialogButtonBox.StandardButton'), btn_type))
A:matplotlib.backends.qt_editor._formlayout._app->matplotlib.backends.qt_compat.QtWidgets.QApplication([])
A:matplotlib.backends.qt_editor._formlayout.datalist->create_datalist_example()
A:matplotlib.backends.qt_editor._formlayout.datagroup->create_datagroup_example()
matplotlib.backends.qt_editor._formlayout.ColorButton(self,parent=None)
matplotlib.backends.qt_editor._formlayout.ColorButton.__init__(self,parent=None)
matplotlib.backends.qt_editor._formlayout.ColorButton.choose_color(self)
matplotlib.backends.qt_editor._formlayout.ColorButton.get_color(self)
matplotlib.backends.qt_editor._formlayout.ColorButton.set_color(self,color)
matplotlib.backends.qt_editor._formlayout.ColorLayout(self,color,parent=None)
matplotlib.backends.qt_editor._formlayout.ColorLayout.__init__(self,color,parent=None)
matplotlib.backends.qt_editor._formlayout.ColorLayout.text(self)
matplotlib.backends.qt_editor._formlayout.ColorLayout.update_color(self)
matplotlib.backends.qt_editor._formlayout.ColorLayout.update_text(self,color)
matplotlib.backends.qt_editor._formlayout.FontLayout(self,value,parent=None)
matplotlib.backends.qt_editor._formlayout.FontLayout.__init__(self,value,parent=None)
matplotlib.backends.qt_editor._formlayout.FontLayout.get_font(self)
matplotlib.backends.qt_editor._formlayout.FormComboWidget(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor._formlayout.FormComboWidget.__init__(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor._formlayout.FormComboWidget.get(self)
matplotlib.backends.qt_editor._formlayout.FormComboWidget.setup(self)
matplotlib.backends.qt_editor._formlayout.FormDialog(self,data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor._formlayout.FormDialog.__init__(self,data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor._formlayout.FormDialog.accept(self)
matplotlib.backends.qt_editor._formlayout.FormDialog.apply(self)
matplotlib.backends.qt_editor._formlayout.FormDialog.get(self)
matplotlib.backends.qt_editor._formlayout.FormDialog.register_float_field(self,field)
matplotlib.backends.qt_editor._formlayout.FormDialog.reject(self)
matplotlib.backends.qt_editor._formlayout.FormDialog.update_buttons(self)
matplotlib.backends.qt_editor._formlayout.FormTabWidget(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor._formlayout.FormTabWidget.__init__(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor._formlayout.FormTabWidget.get(self)
matplotlib.backends.qt_editor._formlayout.FormTabWidget.setup(self)
matplotlib.backends.qt_editor._formlayout.FormWidget(self,data,comment='',with_margin=False,parent=None)
matplotlib.backends.qt_editor._formlayout.FormWidget.__init__(self,data,comment='',with_margin=False,parent=None)
matplotlib.backends.qt_editor._formlayout.FormWidget.get(self)
matplotlib.backends.qt_editor._formlayout.FormWidget.get_dialog(self)
matplotlib.backends.qt_editor._formlayout.FormWidget.setup(self)
matplotlib.backends.qt_editor._formlayout.fedit(data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor._formlayout.font_is_installed(font)
matplotlib.backends.qt_editor._formlayout.is_edit_valid(edit)
matplotlib.backends.qt_editor._formlayout.qfont_to_tuple(font)
matplotlib.backends.qt_editor._formlayout.to_qcolor(color)
matplotlib.backends.qt_editor._formlayout.tuple_to_qfont(tup)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/qt_editor/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/backends/qt_editor/figureoptions.py----------------------------------------
A:matplotlib.backends.qt_editor.figureoptions.label->mappable.get_label()
A:matplotlib.backends.qt_editor.figureoptions.color->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_color(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.ec->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_markeredgecolor(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.fc->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_markerfacecolor(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.has_curve->bool(curves)
A:matplotlib.backends.qt_editor.figureoptions.cmap->mappable.get_cmap()
A:matplotlib.backends.qt_editor.figureoptions.(low, high)->mappable.get_clim()
A:matplotlib.backends.qt_editor.figureoptions.has_sm->bool(mappables)
A:matplotlib.backends.qt_editor.figureoptions.general->data.pop(0)
A:matplotlib.backends.qt_editor.figureoptions.title->data.pop(0).pop(0)
A:matplotlib.backends.qt_editor.figureoptions.generate_legend->data.pop(0).pop()
A:matplotlib.backends.qt_editor.figureoptions.rgba->matplotlib.colors.to_rgba(color)
A:matplotlib.backends.qt_editor.figureoptions.old_legend->axes.get_legend()
A:matplotlib.backends.qt_editor.figureoptions.new_legend->axes.legend(ncols=ncols)
A:matplotlib.backends.qt_editor.figureoptions.figure->axes.get_figure()
matplotlib.backends.qt_editor.figureoptions.figure_edit(axes,parent=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_quiver.py----------------------------------------
A:matplotlib.tests.test_quiver.(X, Y)->numpy.meshgrid(np.arange(2), np.arange(2))
A:matplotlib.tests.test_quiver.U->numpy.cos(X)
A:matplotlib.tests.test_quiver.V->numpy.sin(Y)
A:matplotlib.tests.test_quiver.Q->draw_quiver(ax)
A:matplotlib.tests.test_quiver.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_quiver.qk->ax.quiverkey(q, 1, 1, 2, 'Label')
A:matplotlib.tests.test_quiver.UV->numpy.ones_like(X)
A:matplotlib.tests.test_quiver.uv->numpy.exp(1j * angles)
A:matplotlib.tests.test_quiver.q0->ax.quiver([1], [1], uv['u'], uv['v'])
A:matplotlib.tests.test_quiver.q->ax.quiver(X, Y, U, V)
A:matplotlib.tests.test_quiver.X->numpy.arange(8)
A:matplotlib.tests.test_quiver.Y->numpy.zeros(8)
A:matplotlib.tests.test_quiver.(fig, axs)->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_quiver.x->numpy.arange(3)
A:matplotlib.tests.test_quiver.u->numpy.ma.array(15.0 * np.ones((4,)))
A:matplotlib.tests.test_quiver.v->numpy.ma.array(15.0 * np.ones_like(u))
A:matplotlib.tests.test_quiver.b0->ax.barbs([1], [1], u, v)
A:matplotlib.tests.test_quiver.y->numpy.arange(3)
A:matplotlib.tests.test_quiver.UVangles->numpy.ones_like(X)
matplotlib.tests.test_quiver.draw_quiver(ax,**kwargs)
matplotlib.tests.test_quiver.test_angles_and_scale()
matplotlib.tests.test_quiver.test_bad_masked_sizes()
matplotlib.tests.test_quiver.test_barb_copy()
matplotlib.tests.test_quiver.test_barbs()
matplotlib.tests.test_quiver.test_barbs_flip()
matplotlib.tests.test_quiver.test_barbs_pivot()
matplotlib.tests.test_quiver.test_no_warnings()
matplotlib.tests.test_quiver.test_quiver_animate()
matplotlib.tests.test_quiver.test_quiver_arg_sizes()
matplotlib.tests.test_quiver.test_quiver_copy()
matplotlib.tests.test_quiver.test_quiver_key_memory_leak()
matplotlib.tests.test_quiver.test_quiver_key_pivot()
matplotlib.tests.test_quiver.test_quiver_key_xy()
matplotlib.tests.test_quiver.test_quiver_memory_leak()
matplotlib.tests.test_quiver.test_quiver_number_of_args()
matplotlib.tests.test_quiver.test_quiver_setuvc_numbers()
matplotlib.tests.test_quiver.test_quiver_single()
matplotlib.tests.test_quiver.test_quiver_with_key()
matplotlib.tests.test_quiver.test_quiver_xy()
matplotlib.tests.test_quiver.test_quiverkey_angles()
matplotlib.tests.test_quiver.test_zero_headlength()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_bases.py----------------------------------------
A:matplotlib.tests.test_backend_bases.id->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_backend_bases.offsets->numpy.arange(20).reshape((10, 2))
A:matplotlib.tests.test_backend_bases.rb->RendererBase()
A:matplotlib.tests.test_backend_bases.raw_paths->list(rb._iter_collection_raw_paths(master_transform, paths, all_transforms))
A:matplotlib.tests.test_backend_bases.gc->RendererBase().new_gc()
A:matplotlib.tests.test_backend_bases.uses->RendererBase()._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.tests.test_backend_bases.seen->numpy.bincount(ids, minlength=len(raw_paths))
A:matplotlib.tests.test_backend_bases.fig->matplotlib.pyplot.gcf()
A:matplotlib.tests.test_backend_bases.canvas->FigureCanvasBase(fig)
A:matplotlib.tests.test_backend_bases.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_bases.event->LocationEvent('test_event', canvas, x, y)
A:matplotlib.tests.test_backend_bases.tb->NavigationToolbar2(fig.canvas)
A:matplotlib.tests.test_backend_bases.xlim0->matplotlib.pyplot.gca().get_xlim()
A:matplotlib.tests.test_backend_bases.ylim0->matplotlib.pyplot.gca().get_ylim()
A:matplotlib.tests.test_backend_bases.s0->fig.colorbar(coll, ax=ax, orientation=orientation).ax.transData.transform(d0).astype(int)
A:matplotlib.tests.test_backend_bases.s1->fig.colorbar(coll, ax=ax, orientation=orientation).ax.transData.transform(d1).astype(int)
A:matplotlib.tests.test_backend_bases.start_event->MouseEvent('button_press_event', fig.canvas, *sstart, button=MouseButton.LEFT, key=key)
A:matplotlib.tests.test_backend_bases.stop_event->MouseEvent('button_release_event', fig.canvas, *send, button=MouseButton.LEFT, key=key)
A:matplotlib.tests.test_backend_bases.data->numpy.arange(12).reshape((4, 3))
A:matplotlib.tests.test_backend_bases.coll->getattr(ax, plot_func)(data, vmin=vmin0, vmax=vmax0)
A:matplotlib.tests.test_backend_bases.cb->matplotlib.pyplot.gcf().colorbar(coll, ax=ax, orientation=orientation)
A:matplotlib.tests.test_backend_bases.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_backend_bases.test_backend->pytest.importorskip(f'matplotlib.backends.backend_{backend}')
A:matplotlib.tests.test_backend_bases.fig_test->Figure(constrained_layout=True)
A:matplotlib.tests.test_backend_bases.axes_test->Figure(constrained_layout=True).subplots(2, 2)
A:matplotlib.tests.test_backend_bases.fig_agg->Figure(constrained_layout=True)
A:matplotlib.tests.test_backend_bases.axes_agg->Figure(constrained_layout=True).subplots(2, 2)
A:matplotlib.tests.test_backend_bases.sstart->matplotlib.pyplot.gca().transData.transform(mousestart).astype(int)
A:matplotlib.tests.test_backend_bases.send->matplotlib.pyplot.gca().transData.transform(mouseend).astype(int)
A:matplotlib.tests.test_backend_bases.initial_len->len(fig.canvas.manager.toolmanager.tools)
A:matplotlib.tests.test_backend_bases.rubberband->matplotlib.pyplot.gcf().canvas.manager.toolmanager.get_tool('rubberband')
matplotlib.tests.test_backend_bases.test_canvas_change()
matplotlib.tests.test_backend_bases.test_canvas_ctor()
matplotlib.tests.test_backend_bases.test_draw(backend)
matplotlib.tests.test_backend_bases.test_get_default_filename()
matplotlib.tests.test_backend_bases.test_grab_clear()
matplotlib.tests.test_backend_bases.test_interactive_colorbar(plot_func,orientation,tool,button,expected)
matplotlib.tests.test_backend_bases.test_interactive_pan(key,mouseend,expectedxlim,expectedylim)
matplotlib.tests.test_backend_bases.test_interactive_zoom()
matplotlib.tests.test_backend_bases.test_location_event_position(x,y)
matplotlib.tests.test_backend_bases.test_non_gui_warning(monkeypatch)
matplotlib.tests.test_backend_bases.test_pick()
matplotlib.tests.test_backend_bases.test_toolbar_zoompan()
matplotlib.tests.test_backend_bases.test_toolmanager_get_tool()
matplotlib.tests.test_backend_bases.test_toolmanager_remove()
matplotlib.tests.test_backend_bases.test_toolmanager_update_keymap()
matplotlib.tests.test_backend_bases.test_uses_per_path()
matplotlib.tests.test_backend_bases.test_widgetlock_zoompan()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_textpath.py----------------------------------------
A:matplotlib.tests.test_textpath.tp->TextPath((0, 0), '.')
matplotlib.tests.test_textpath.test_copy()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_qt.py----------------------------------------
A:matplotlib.tests.test_backend_qt.pytestmark->pytest.mark.skip('No usable Qt bindings')
A:matplotlib.tests.test_backend_qt.qt_compat->pytest.importorskip('matplotlib.backends.qt_compat')
A:matplotlib.tests.test_backend_qt.init_figs->copy.copy(Gcf.figs)
A:matplotlib.tests.test_backend_qt.fig->matplotlib.pyplot.figure(figsize=(5, 2), dpi=120)
A:matplotlib.tests.test_backend_qt.c->self.stdout.read(1)
A:matplotlib.tests.test_backend_qt.target->getattr(plt, target_name)
A:matplotlib.tests.test_backend_qt.timer->matplotlib.pyplot.figure(figsize=(5, 2), dpi=120).canvas.new_timer(interval=1)
A:matplotlib.tests.test_backend_qt.backend->matplotlib.pyplot.get_backend()
A:matplotlib.tests.test_backend_qt.proc->subprocess.run([sys.executable, '-c', inspect.getsource(_test_enums_impl) + '\n_test_enums_impl()'], env={**os.environ, 'SOURCE_DATE_EPOCH': '0', **env}, timeout=_test_timeout, check=True, stdout=subprocess.PIPE, universal_newlines=True)
A:matplotlib.tests.test_backend_qt.(stdout, _)->subprocess.run([sys.executable, '-c', inspect.getsource(_test_enums_impl) + '\n_test_enums_impl()'], env={**os.environ, 'SOURCE_DATE_EPOCH': '0', **env}, timeout=_test_timeout, check=True, stdout=subprocess.PIPE, universal_newlines=True).communicate()
A:matplotlib.tests.test_backend_qt.event_loop_handler->signal.getsignal(signal.SIGINT)
A:matplotlib.tests.test_backend_qt.original_handler->signal.getsignal(signal.SIGINT)
A:matplotlib.tests.test_backend_qt.answer->answer.replace('meta', 'ctrl').replace('meta', 'ctrl')
A:matplotlib.tests.test_backend_qt.size->qt_canvas.size()
A:matplotlib.tests.test_backend_qt.screen->qt_canvas.window().windowHandle().screen()
A:matplotlib.tests.test_backend_qt.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_qt.old_width->window.width()
A:matplotlib.tests.test_backend_qt.old_height->window.height()
A:matplotlib.tests.test_backend_qt.canvas->FigureCanvasQTAgg(fig)
A:matplotlib.tests.test_backend_qt.widget->matplotlib.backends.qt_editor._formlayout.FormWidget(form)
A:matplotlib.tests.test_backend_qt.values->matplotlib.backends.qt_editor._formlayout.FormWidget(form).get()
A:matplotlib.tests.test_backend_qt.reason->'{} cannot be imported'.format(', '.join(missing))
matplotlib.tests.test_backend_qt.WaitForStringPopen(self,*args,**kwargs)
matplotlib.tests.test_backend_qt.WaitForStringPopen.__init__(self,*args,**kwargs)
matplotlib.tests.test_backend_qt.WaitForStringPopen.wait_for(self,terminator)
matplotlib.tests.test_backend_qt._get_testable_qt_backends()
matplotlib.tests.test_backend_qt._test_enums_impl()
matplotlib.tests.test_backend_qt._test_other_signal_before_sigint_impl(backend,target_name,kwargs)
matplotlib.tests.test_backend_qt._test_sigint_impl(backend,target_name,kwargs)
matplotlib.tests.test_backend_qt.qt_core(request)
matplotlib.tests.test_backend_qt.test_canvas_reinit()
matplotlib.tests.test_backend_qt.test_correct_key(backend,qt_core,qt_key,qt_mods,answer,monkeypatch)
matplotlib.tests.test_backend_qt.test_device_pixel_ratio_change()
matplotlib.tests.test_backend_qt.test_double_resize()
matplotlib.tests.test_backend_qt.test_enums_available(env)
matplotlib.tests.test_backend_qt.test_fig_close()
matplotlib.tests.test_backend_qt.test_fig_sigint_override(qt_core)
matplotlib.tests.test_backend_qt.test_figureoptions()
matplotlib.tests.test_backend_qt.test_figureoptions_with_datetime_axes()
matplotlib.tests.test_backend_qt.test_form_widget_get_with_datetime_and_date_fields()
matplotlib.tests.test_backend_qt.test_other_signal_before_sigint(target,kwargs)
matplotlib.tests.test_backend_qt.test_sigint(target,kwargs)
matplotlib.tests.test_backend_qt.test_subplottool()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_ttconv.py----------------------------------------
A:matplotlib.tests.test_ttconv.(fig, ax)->matplotlib.pyplot.subplots()
matplotlib.tests.test_ttconv.test_truetype_conversion(recwarn)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_font_manager.py----------------------------------------
A:matplotlib.tests.test_font_manager.font->matplotlib.font_manager.ft2font.FT2Font(path)
A:matplotlib.tests.test_font_manager.cmap->matplotlib.font_manager.ft2font.FT2Font(path).get_charmap()
A:matplotlib.tests.test_font_manager.path->Path(tmpdir, 'fontlist.json')
A:matplotlib.tests.test_font_manager.copy->json_load(path)
A:matplotlib.tests.test_font_manager.fp->FontProperties(family=['Noto Sans CJK SC', 'Noto Sans CJK JP'])
A:matplotlib.tests.test_font_manager.font1->get_font(font, hinting_factor=1)
A:matplotlib.tests.test_font_manager.expected->get_font(font, hinting_factor=1).get_width_height()
A:matplotlib.tests.test_font_manager.hinted_font->get_font(font, hinting_factor=factor)
A:matplotlib.tests.test_font_manager.entry->next((entry for entry in fontManager.ttflist if Path(entry.fname).name == 'seguisbi.ttf'))
A:matplotlib.tests.test_font_manager.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_font_manager.tmp_path->Path(tmpdir)
A:matplotlib.tests.test_font_manager.fonts->findSystemFonts()
A:matplotlib.tests.test_font_manager.user_fonts_dir->tmpdir.join('fonts')
A:matplotlib.tests.test_font_manager.ctx->multiprocessing.get_context('fork')
A:matplotlib.tests.test_font_manager.b->threading.Barrier(N)
A:matplotlib.tests.test_font_manager.proc->subprocess.run([sys.executable, '-c', inspect.getsource(_test_threading) + '\n_test_threading()'])
A:matplotlib.tests.test_font_manager.fontent->FontEntry(fname='/random', name='font-name')
A:matplotlib.tests.test_font_manager.png->FontEntry(fname='/random', name='font-name')._repr_png_()
A:matplotlib.tests.test_font_manager.img->PIL.Image.open(BytesIO(png))
A:matplotlib.tests.test_font_manager.html->FontEntry(fname='/random', name='font-name')._repr_html_()
A:matplotlib.tests.test_font_manager.fonts_mpl->findSystemFonts(paths_mpl, fontext='ttf')
A:matplotlib.tests.test_font_manager.fonts_system->findSystemFonts(fontext='ttf')
A:matplotlib.tests.test_font_manager.prop->ttfFontProperty(font)
A:matplotlib.tests.test_font_manager.available_fonts->sorted(list(set(ttf_fonts)))
A:matplotlib.tests.test_font_manager.mpl_font_names->sorted(fontManager.get_font_names())
A:matplotlib.tests.test_font_manager.x->SomeObject()
A:matplotlib.tests.test_font_manager.fig->matplotlib.figure.Figure()
A:matplotlib.tests.test_font_manager.ax->matplotlib.figure.Figure().subplots()
matplotlib.tests.test_font_manager._model_handler(_)
matplotlib.tests.test_font_manager._test_threading()
matplotlib.tests.test_font_manager.test_addfont_as_path()
matplotlib.tests.test_font_manager.test_donot_cache_tracebacks()
matplotlib.tests.test_font_manager.test_find_invalid(tmpdir)
matplotlib.tests.test_font_manager.test_find_noto()
matplotlib.tests.test_font_manager.test_find_ttc()
matplotlib.tests.test_font_manager.test_font_priority()
matplotlib.tests.test_font_manager.test_fontcache_thread_safe()
matplotlib.tests.test_font_manager.test_fontentry_dataclass()
matplotlib.tests.test_font_manager.test_fontentry_dataclass_invalid_path()
matplotlib.tests.test_font_manager.test_fork()
matplotlib.tests.test_font_manager.test_get_font_names()
matplotlib.tests.test_font_manager.test_get_fontconfig_fonts()
matplotlib.tests.test_font_manager.test_hinting_factor(factor)
matplotlib.tests.test_font_manager.test_json_serialization(tmpdir)
matplotlib.tests.test_font_manager.test_missing_family(caplog)
matplotlib.tests.test_font_manager.test_otf()
matplotlib.tests.test_font_manager.test_score_weight()
matplotlib.tests.test_font_manager.test_user_fonts_linux(tmpdir,monkeypatch)
matplotlib.tests.test_font_manager.test_user_fonts_win32()
matplotlib.tests.test_font_manager.test_utf16m_sfnt()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_macosx.py----------------------------------------
A:matplotlib.tests.test_backend_macosx.fig->matplotlib.pyplot.figure()
matplotlib.tests.test_backend_macosx.test_cached_renderer()
matplotlib.tests.test_backend_macosx.test_savefig_rcparam(monkeypatch,tmp_path)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_agg_filter.py----------------------------------------
A:matplotlib.tests.test_agg_filter.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_agg_filter.mesh->matplotlib.pyplot.axes().pcolormesh(data, cmap='Reds', zorder=5)
matplotlib.tests.test_agg_filter.test_agg_filter_alpha()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_afm.py----------------------------------------
A:matplotlib.tests.test_afm.byte_str->inp_str.encode('utf8')
A:matplotlib.tests.test_afm.ret->matplotlib._afm._to_str(byte_str)
A:matplotlib.tests.test_afm.fh->BytesIO(afm_data)
A:matplotlib.tests.test_afm.header->matplotlib._afm._parse_header(fh)
A:matplotlib.tests.test_afm.metrics->matplotlib._afm._parse_char_metrics(fh)
A:matplotlib.tests.test_afm.font->matplotlib._afm.AFM(BytesIO(AFM_TEST_DATA.replace(b'Weight Bold\n', b'Weight Custom\n')))
matplotlib.tests.test_afm.test_bad_afm(afm_data)
matplotlib.tests.test_afm.test_font_manager_weight_normalization()
matplotlib.tests.test_afm.test_get_familyname_guessed()
matplotlib.tests.test_afm.test_malformed_header(afm_data,caplog)
matplotlib.tests.test_afm.test_nonascii_str()
matplotlib.tests.test_afm.test_parse_char_metrics()
matplotlib.tests.test_afm.test_parse_header()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_getattr.py----------------------------------------
A:matplotlib.tests.test_getattr.module->import_module(module_name)
matplotlib.tests.test_getattr.test_getattr(module_name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_polar.py----------------------------------------
A:matplotlib.tests.test_polar.r->numpy.arange(0, 3.0, 0.01)
A:matplotlib.tests.test_polar.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_polar.ax->matplotlib.pyplot.figure().add_subplot(polar=True)
A:matplotlib.tests.test_polar.(line,)->matplotlib.pyplot.figure().add_subplot(polar=True).plot((0, 0), (0, 1), color='#0000ff', lw=1)
A:matplotlib.tests.test_polar.el->matplotlib.patches.Ellipse((0, 0), 10, 20, facecolor='r', alpha=0.5)
A:matplotlib.tests.test_polar.angles->numpy.arange(0, 360, 90)
A:matplotlib.tests.test_polar.horizontal->matplotlib.pyplot.figure().add_axes(rect, polar=True, label='horizontal')
A:matplotlib.tests.test_polar.vertical->matplotlib.pyplot.figure().add_axes(rect, polar=True, label='vertical')
A:matplotlib.tests.test_polar.theta_mins->numpy.arange(15.0, 361.0, 90.0)
A:matplotlib.tests.test_polar.theta_maxs->numpy.arange(50.0, 361.0, 90.0)
A:matplotlib.tests.test_polar.(fig, axs)->matplotlib.pyplot.subplot_mosaic('ab\ncd', subplot_kw={'projection': 'polar'}, sharex=True, sharey=True)
A:matplotlib.tests.test_polar.(fig, ax)->matplotlib.pyplot.subplots(subplot_kw={'projection': 'polar'})
A:matplotlib.tests.test_polar.bb->matplotlib.pyplot.figure().add_subplot(polar=True).get_tightbbox(fig.canvas.get_renderer())
A:matplotlib.tests.test_polar.p1->fig_test.add_subplot(121, projection='polar').bar([0], [1], 3 * np.pi, edgecolor='none', antialiased=False)
A:matplotlib.tests.test_polar.p2->fig_test.add_subplot(122, projection='polar').bar([0], [1], -3 * np.pi, edgecolor='none', antialiased=False)
A:matplotlib.tests.test_polar.p3->fig_ref.add_subplot(121, projection='polar').bar([0], [1], 2 * np.pi, edgecolor='none', antialiased=False)
A:matplotlib.tests.test_polar.p4->fig_ref.add_subplot(122, projection='polar').bar([0], [1], -2 * np.pi, edgecolor='none', antialiased=False)
A:matplotlib.tests.test_polar.(l,)->fig_test.add_subplot(projection='polar').plot([0, np.pi / 2], [1, 2])
A:matplotlib.tests.test_polar.ticklocs->numpy.degrees(ax.xaxis.get_majorticklocs()).tolist()
A:matplotlib.tests.test_polar.span->matplotlib.pyplot.figure().add_subplot(polar=True).axvspan(0, np.pi / 4)
A:matplotlib.tests.test_polar.axs->fig_test.subplots(2, 2, sharey=True, subplot_kw={'projection': 'polar'})
matplotlib.tests.test_polar.test_axvline_axvspan_do_not_modify_rlims()
matplotlib.tests.test_polar.test_axvspan()
matplotlib.tests.test_polar.test_cursor_precision()
matplotlib.tests.test_polar.test_default_thetalocator()
matplotlib.tests.test_polar.test_get_tightbbox_polar()
matplotlib.tests.test_polar.test_polar_alignment()
matplotlib.tests.test_polar.test_polar_annotations()
matplotlib.tests.test_polar.test_polar_coord_annotations()
matplotlib.tests.test_polar.test_polar_default_log_lims()
matplotlib.tests.test_polar.test_polar_gridlines()
matplotlib.tests.test_polar.test_polar_interpolation_steps_constant_r(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_interpolation_steps_variable_r(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_invertedylim()
matplotlib.tests.test_polar.test_polar_invertedylim_rorigin()
matplotlib.tests.test_polar.test_polar_log()
matplotlib.tests.test_polar.test_polar_negative_rmin()
matplotlib.tests.test_polar.test_polar_no_data()
matplotlib.tests.test_polar.test_polar_not_datalim_adjustable()
matplotlib.tests.test_polar.test_polar_rlabel_position()
matplotlib.tests.test_polar.test_polar_rlim(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_rlim_bottom(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_rlim_zero()
matplotlib.tests.test_polar.test_polar_rmin()
matplotlib.tests.test_polar.test_polar_rorigin()
matplotlib.tests.test_polar.test_polar_theta_limits()
matplotlib.tests.test_polar.test_polar_theta_position()
matplotlib.tests.test_polar.test_polar_twice()
matplotlib.tests.test_polar.test_polar_units_1(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_units_2(fig_test,fig_ref)
matplotlib.tests.test_polar.test_polar_wrap(fig_test,fig_ref)
matplotlib.tests.test_polar.test_remove_shared_polar(fig_ref,fig_test)
matplotlib.tests.test_polar.test_shared_polar_keeps_ticklabels()
matplotlib.tests.test_polar.test_thetalim_args()
matplotlib.tests.test_polar.test_thetalim_valid_invalid()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_colors.py----------------------------------------
A:matplotlib.tests.test_colors.colorlist->numpy.empty((n, 4), float)
A:matplotlib.tests.test_colors.colorlist[:, 0]->numpy.linspace(0, 1, n)
A:matplotlib.tests.test_colors.colorlist[:, 2]->numpy.linspace(1, 0, n)
A:matplotlib.tests.test_colors.lsc->matplotlib.colors.LinearSegmentedColormap.from_list('lsc', colorlist)
A:matplotlib.tests.test_colors.lc->matplotlib.colors.ListedColormap(colorlist)
A:matplotlib.tests.test_colors.lsc3->matplotlib.colors.LinearSegmentedColormap.from_list('lsc', colorlist).resampled(3)
A:matplotlib.tests.test_colors.lc3->matplotlib.colors.ListedColormap(colorlist).resampled(3)
A:matplotlib.tests.test_colors.expected->numpy.array([0.0, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
A:matplotlib.tests.test_colors.copied_cmap->copy.copy(mpl.colormaps['viridis']).copy()
A:matplotlib.tests.test_colors.ret1->copied_cmap([-1, 0, 0.5, 1, np.nan, np.inf])
A:matplotlib.tests.test_colors.cmap2->copy.copy(copied_cmap)
A:matplotlib.tests.test_colors.ret2->copied_cmap([-1, 0, 0.5, 1, np.nan, np.inf])
A:matplotlib.tests.test_colors.cm_copy->copy.copy(mpl.colormaps['viridis']).copy()
A:matplotlib.tests.test_colors.anative->numpy.ma.masked_invalid(np.array(a, dtype=dt))
A:matplotlib.tests.test_colors.aforeign->numpy.ma.masked_invalid(np.array(a, dtype=dt)).byteswap().newbyteorder()
A:matplotlib.tests.test_colors.x->numpy.random.normal(size=10)
A:matplotlib.tests.test_colors.x2d->numpy.zeros((2, 2))
A:matplotlib.tests.test_colors.bn->matplotlib.colors.BoundaryNorm(boundaries, len(boundaries))
A:matplotlib.tests.test_colors.ncolors->len(boundaries)
A:matplotlib.tests.test_colors.ret->bn(v)
A:matplotlib.tests.test_colors.vals->numpy.arange(-3.5, 3.5, 10)
A:matplotlib.tests.test_colors.mynorm->matplotlib.colors.BoundaryNorm(bounds, cmshould.N, extend='max')
A:matplotlib.tests.test_colors.refnorm->matplotlib.colors.BoundaryNorm(bounds, cmref.N)
A:matplotlib.tests.test_colors.ref->refnorm(x)
A:matplotlib.tests.test_colors.cmref->matplotlib.colors.ListedColormap(['blue', 'red'])
A:matplotlib.tests.test_colors.cmshould->matplotlib.colors.ListedColormap(['blue', 'red', 'black'])
A:matplotlib.tests.test_colors.x_maxabs->numpy.max(np.abs(x))
A:matplotlib.tests.test_colors.norm_ref->matplotlib.colors.Normalize(vmin=-x_maxabs, vmax=x_maxabs)
A:matplotlib.tests.test_colors.norm->matplotlib.colors.Normalize(0, 1)
A:matplotlib.tests.test_colors.vcenter->int(np.random.normal(scale=50))
A:matplotlib.tests.test_colors.ln->matplotlib.colors.LogNorm(clip=True, vmax=5)
A:matplotlib.tests.test_colors.a->numpy.array([0, 1 / 2, 1], dtype=float)
A:matplotlib.tests.test_colors.pnorm->matplotlib.colors.PowerNorm(vmin=-2, vmax=-1, gamma=3)
A:matplotlib.tests.test_colors.input->numpy.array([0, 5, 10])
A:matplotlib.tests.test_colors.lognorm->matplotlib.colors.LogNorm(vmin=0.1, vmax=10)
A:matplotlib.tests.test_colors.normed_vals->norm(vals)
A:matplotlib.tests.test_colors.nn->norm([-10 ** 3, -10 ** 2, -10 ** 1, -1, 0, 1, 10 ** 1, 10 ** 2, 10 ** 3])
A:matplotlib.tests.test_colors.xx->numpy.array([0.0, 0.121622, 0.243243, 0.364865, 0.5, 0.635135, 0.756757, 0.878378, 1.0])
A:matplotlib.tests.test_colors.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_colors.cbar->matplotlib.colorbar.ColorbarBase(fig.add_subplot(), norm=norm)
A:matplotlib.tests.test_colors.ticks->matplotlib.colorbar.ColorbarBase(fig.add_subplot(), norm=norm).get_ticks()
A:matplotlib.tests.test_colors.norm0->matplotlib.colors.AsinhNorm()
A:matplotlib.tests.test_colors.norm5->matplotlib.colors.AsinhNorm(linear_width=5)
A:matplotlib.tests.test_colors.asinh2->numpy.arcsinh(2)
A:matplotlib.tests.test_colors.masked_array->numpy.ma.array(vals)
A:matplotlib.tests.test_colors.data->numpy.arange(-10, 10, 1, dtype=float).reshape((10, 2))
A:matplotlib.tests.test_colors.(cmap, norm)->matplotlib.colors.from_levels_and_colors(levels, colors[0:i1], extend=extend)
A:matplotlib.tests.test_colors.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_colors.m->matplotlib.pyplot.pcolormesh(data, cmap=cmap, norm=norm)
A:matplotlib.tests.test_colors.ax1->matplotlib.pyplot.figure().add_axes([0.05, 0.8, 0.9, 0.15])
A:matplotlib.tests.test_colors.ax2->matplotlib.pyplot.figure().add_axes([0.05, 0.475, 0.9, 0.15])
A:matplotlib.tests.test_colors.ax3->matplotlib.pyplot.figure().add_axes([0.05, 0.15, 0.9, 0.15])
A:matplotlib.tests.test_colors.cb1->matplotlib.colorbar.ColorbarBase(ax1, cmap=cmap, norm=norm, extend='both', orientation='horizontal', spacing='uniform')
A:matplotlib.tests.test_colors.cb2->matplotlib.colorbar.ColorbarBase(ax2, cmap=cmap, norm=norm, orientation='horizontal')
A:matplotlib.tests.test_colors.cb3->matplotlib.colorbar.ColorbarBase(ax3, cmap=cmap, norm=norm, extend='neither', orientation='horizontal')
A:matplotlib.tests.test_colors.clr->matplotlib.colors.to_rgba_array(colors)
A:matplotlib.tests.test_colors.d_val->numpy.ma.array([1], mask=True)
A:matplotlib.tests.test_colors.tt->numpy.random.random(a_shape)
A:matplotlib.tests.test_colors.dem->matplotlib.cbook.get_sample_data('jacksboro_fault_dem.npz', np_load=True)
A:matplotlib.tests.test_colors.ls->matplotlib.colors.LightSource(az, elev)
A:matplotlib.tests.test_colors.(fig, axs)->matplotlib.pyplot.subplots(nrows=3, ncols=3)
A:matplotlib.tests.test_colors.rgb->matplotlib.colors.LightSource(az, elev).shade(z, cmap)
A:matplotlib.tests.test_colors.z1->numpy.ma.array(z0)
A:matplotlib.tests.test_colors.rgb0->matplotlib.colors.LightSource(az, elev).shade(z0, cmap)
A:matplotlib.tests.test_colors.rgb1->matplotlib.colors.LightSource(az, elev).shade(z1, cmap)
A:matplotlib.tests.test_colors.z->numpy.arange(100).reshape((10, 10))
A:matplotlib.tests.test_colors.illum->numpy.array(illum)
A:matplotlib.tests.test_colors.(dy, dx)->numpy.gradient(-z)
A:matplotlib.tests.test_colors.dz->numpy.ones_like(dy)
A:matplotlib.tests.test_colors.normals->numpy.dstack([dx, dy, dz])
A:matplotlib.tests.test_colors.intensity->numpy.tensordot(normals, illum, axes=(2, 0))
A:matplotlib.tests.test_colors.h1->matplotlib.colors.LightSource(az, elev).hillshade(z)
A:matplotlib.tests.test_colors.h2->alternative_hillshade(az, elev, z)
A:matplotlib.tests.test_colors.(theta, phi)->_azimuth2math(azimuth, elevation)
A:matplotlib.tests.test_colors.(a, b, c)->_sph2cart(theta, phi)
A:matplotlib.tests.test_colors.h->matplotlib.colors.LightSource(az, elev).hillshade(z)
A:matplotlib.tests.test_colors.theta->numpy.radians((90 - azimuth) % 360)
A:matplotlib.tests.test_colors.phi->numpy.radians(90 - elevation)
A:matplotlib.tests.test_colors.s->pd.Series(lst)
A:matplotlib.tests.test_colors.cm1->matplotlib.colors.ListedColormap(lst, N=5)
A:matplotlib.tests.test_colors.cm2->matplotlib.colors.ListedColormap(s, N=5)
A:matplotlib.tests.test_colors.cmap_r->copy.copy(mpl.colormaps['viridis']).reversed()
A:matplotlib.tests.test_colors.matplotlib.rcParams['axes.prop_cycle']->cycler('color', ['8e4585', 'r'])
A:matplotlib.tests.test_colors.x1->numpy.ma.array(['k', 'b'], mask=[True, False])
A:matplotlib.tests.test_colors.x2->numpy.ma.array([[0, 0, 0, 1], [0, 0, 1, 1]])
A:matplotlib.tests.test_colors.array->matplotlib.colors.to_rgba_array('rgb')
A:matplotlib.tests.test_colors.c->cmap([[np.nan, 0.5], [0, 0]], alpha=np.full((2, 2), 0.5))
A:matplotlib.tests.test_colors.mydata->numpy.arange(-10, 10, 1, dtype=float).reshape((10, 2)).view(MyArray)
A:matplotlib.tests.test_colors.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_colors.png->copy.copy(mpl.colormaps['viridis'])._repr_png_()
A:matplotlib.tests.test_colors.img->PIL.Image.open(BytesIO(png))
A:matplotlib.tests.test_colors.html->copy.copy(mpl.colormaps['viridis'])._repr_html_()
A:matplotlib.tests.test_colors.cmap->copy.copy(mpl.colormaps['viridis'])
A:matplotlib.tests.test_colors.init_value->getattr(cmap, f'get_{kind}')()
A:matplotlib.tests.test_colors.black_value->getattr(cmap, f'get_{kind}')()
A:matplotlib.tests.test_colors.alpha->numpy.array([0.1, 0.2, 0.3])
A:matplotlib.tests.test_colors.color->numpy.array([0.1, 0.2, 0.3])
A:matplotlib.tests.test_colors.rgba_1d->matplotlib.colors.to_rgba(color.reshape(-1))
A:matplotlib.tests.test_colors.rgba_2d->matplotlib.colors.to_rgba(color.reshape((1, -1)))
A:matplotlib.tests.test_colors.colors->set([(0, 0.5, 1), (1, 0.2, 0.5), (0.4, 1, 0.2)])
A:matplotlib.tests.test_colors.res->matplotlib.colors.to_rgba_array(palette.values())
A:matplotlib.tests.test_colors.exp->numpy.eye(3)
A:matplotlib.tests.test_colors.norm2->copy.deepcopy(norm)
A:matplotlib.tests.test_colors.increment->unittest.mock.Mock(return_value=None)
A:matplotlib.tests.test_colors.sm->matplotlib.cm.ScalarMappable()
A:matplotlib.tests.test_colors.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_colors.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_colors.logitnorm->matplotlib.colors.make_norm_from_scale(mscale.LogitScale, mcolors.Normalize)
matplotlib.tests.test_colors.TestAsinhNorm
matplotlib.tests.test_colors.TestAsinhNorm.test_init(self)
matplotlib.tests.test_colors.TestAsinhNorm.test_norm(self)
matplotlib.tests.test_colors._azimuth2math(azimuth,elevation)
matplotlib.tests.test_colors._inverse_tester(norm_instance,vals)
matplotlib.tests.test_colors._mask_tester(norm_instance,vals)
matplotlib.tests.test_colors._scalar_tester(norm_instance,vals)
matplotlib.tests.test_colors._sph2cart(theta,phi)
matplotlib.tests.test_colors.test_2d_to_rgba()
matplotlib.tests.test_colors.test_BoundaryNorm()
matplotlib.tests.test_colors.test_CenteredNorm()
matplotlib.tests.test_colors.test_FuncNorm()
matplotlib.tests.test_colors.test_LogNorm()
matplotlib.tests.test_colors.test_LogNorm_inverse()
matplotlib.tests.test_colors.test_Normalize()
matplotlib.tests.test_colors.test_PowerNorm()
matplotlib.tests.test_colors.test_PowerNorm_translation_invariance()
matplotlib.tests.test_colors.test_SymLogNorm()
matplotlib.tests.test_colors.test_SymLogNorm_colorbar()
matplotlib.tests.test_colors.test_SymLogNorm_single_zero()
matplotlib.tests.test_colors.test_TwoSlopeNorm_Even()
matplotlib.tests.test_colors.test_TwoSlopeNorm_Odd()
matplotlib.tests.test_colors.test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax()
matplotlib.tests.test_colors.test_TwoSlopeNorm_VcenterGTVmax()
matplotlib.tests.test_colors.test_TwoSlopeNorm_VmaxEqualsVcenter()
matplotlib.tests.test_colors.test_TwoSlopeNorm_VminEqualsVcenter()
matplotlib.tests.test_colors.test_TwoSlopeNorm_VminGTVcenter()
matplotlib.tests.test_colors.test_TwoSlopeNorm_autoscale()
matplotlib.tests.test_colors.test_TwoSlopeNorm_autoscale_None_vmax()
matplotlib.tests.test_colors.test_TwoSlopeNorm_autoscale_None_vmin()
matplotlib.tests.test_colors.test_TwoSlopeNorm_premature_scaling()
matplotlib.tests.test_colors.test_TwoSlopeNorm_scale()
matplotlib.tests.test_colors.test_TwoSlopeNorm_scaleout_center()
matplotlib.tests.test_colors.test_TwoSlopeNorm_scaleout_center_max()
matplotlib.tests.test_colors.test_autoscale_masked()
matplotlib.tests.test_colors.test_boundarynorm_and_colorbarbase()
matplotlib.tests.test_colors.test_cm_set_cmap_error()
matplotlib.tests.test_colors.test_cmap_and_norm_from_levels_and_colors()
matplotlib.tests.test_colors.test_cmap_and_norm_from_levels_and_colors2()
matplotlib.tests.test_colors.test_cn()
matplotlib.tests.test_colors.test_color_names()
matplotlib.tests.test_colors.test_color_sequences()
matplotlib.tests.test_colors.test_colormap_alpha_array()
matplotlib.tests.test_colors.test_colormap_bad_data_with_alpha()
matplotlib.tests.test_colors.test_colormap_copy()
matplotlib.tests.test_colors.test_colormap_endian()
matplotlib.tests.test_colors.test_colormap_equals()
matplotlib.tests.test_colors.test_colormap_invalid()
matplotlib.tests.test_colors.test_colormap_return_types()
matplotlib.tests.test_colors.test_colormap_reversing(name)
matplotlib.tests.test_colors.test_colormaps_get_cmap()
matplotlib.tests.test_colors.test_conversions()
matplotlib.tests.test_colors.test_conversions_masked()
matplotlib.tests.test_colors.test_create_lookup_table(N,result)
matplotlib.tests.test_colors.test_double_register_builtin_cmap()
matplotlib.tests.test_colors.test_failed_conversions()
matplotlib.tests.test_colors.test_get_under_over_bad()
matplotlib.tests.test_colors.test_grey_gray()
matplotlib.tests.test_colors.test_has_alpha_channel()
matplotlib.tests.test_colors.test_hex_shorthand_notation()
matplotlib.tests.test_colors.test_index_dtype(dtype)
matplotlib.tests.test_colors.test_light_source_hillshading()
matplotlib.tests.test_colors.test_light_source_masked_shading()
matplotlib.tests.test_colors.test_light_source_planar_hillshading()
matplotlib.tests.test_colors.test_light_source_shading_default()
matplotlib.tests.test_colors.test_light_source_shading_empty_mask()
matplotlib.tests.test_colors.test_light_source_topo_surface()
matplotlib.tests.test_colors.test_lognorm_invalid(vmin,vmax)
matplotlib.tests.test_colors.test_make_norm_from_scale_name()
matplotlib.tests.test_colors.test_ndarray_subclass_norm()
matplotlib.tests.test_colors.test_non_mutable_get_values(kind)
matplotlib.tests.test_colors.test_norm_callback()
matplotlib.tests.test_colors.test_norm_deepcopy()
matplotlib.tests.test_colors.test_norm_update_figs(fig_test,fig_ref)
matplotlib.tests.test_colors.test_pandas_iterable(pd)
matplotlib.tests.test_colors.test_register_cmap()
matplotlib.tests.test_colors.test_repr_html()
matplotlib.tests.test_colors.test_repr_png()
matplotlib.tests.test_colors.test_resampled()
matplotlib.tests.test_colors.test_rgb_hsv_round_trip()
matplotlib.tests.test_colors.test_same_color()
matplotlib.tests.test_colors.test_scalarmappable_norm_update()
matplotlib.tests.test_colors.test_set_dict_to_rgba()
matplotlib.tests.test_colors.test_tableau_order()
matplotlib.tests.test_colors.test_to_rgba_array_alpha_array()
matplotlib.tests.test_colors.test_to_rgba_array_single_str()
matplotlib.tests.test_colors.test_unregister_builtin_cmap()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_widgets.py----------------------------------------
A:matplotlib.tests.test_widgets.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_widgets.default_rb->RadioButtons(ax[0, 0], ['Apples', 'Oranges'])
A:matplotlib.tests.test_widgets.styled_rb->RadioButtons(ax[0, 1], ['Apples', 'Oranges'], label_props={'color': ['red', 'orange'], 'fontsize': [16, 20]}, radio_props={'edgecolor': ['red', 'orange'], 'facecolor': ['mistyrose', 'peachpuff']})
A:matplotlib.tests.test_widgets.default_cb->CheckButtons(ax[1, 0], ['Apples', 'Oranges'], actives=[True, True])
A:matplotlib.tests.test_widgets.styled_cb->CheckButtons(ax[1, 1], ['Apples', 'Oranges'], actives=[True, True], label_props={'color': ['red', 'orange'], 'fontsize': [16, 20]}, frame_props={'edgecolor': ['red', 'orange'], 'facecolor': ['mistyrose', 'peachpuff']}, check_props={'color': ['darkred', 'darkorange']})
A:matplotlib.tests.test_widgets.onselect->unittest.mock.Mock(spec=noop, return_value=None)
A:matplotlib.tests.test_widgets.tool->matplotlib.widgets.PolygonSelector(ax, onselect=noop, draw_bounding_box=True)
A:matplotlib.tests.test_widgets.onmove->unittest.mock.Mock(spec=noop, return_value=None)
A:matplotlib.tests.test_widgets.kwargs->dict(ax=ax, onselect=noop, interactive=True)
A:matplotlib.tests.test_widgets.tool_line_handle->matplotlib.widgets.ToolLineHandles(ax, positions, 'horizontal', useblit=False)
A:matplotlib.tests.test_widgets.x_bound->get_ax().get_xbound()
A:matplotlib.tests.test_widgets.y_bound->get_ax().get_ybound()
A:matplotlib.tests.test_widgets.x->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_widgets.values->snap_function(values, snap_values)
A:matplotlib.tests.test_widgets.(ln,)->get_ax().plot(x, values, animated=True)
A:matplotlib.tests.test_widgets.(ln2,)->get_ax().plot([], animated=True)
A:matplotlib.tests.test_widgets.(indmin, indmax)->numpy.searchsorted(x, (vmin, vmax))
A:matplotlib.tests.test_widgets.v->values[indmin:indmax].mean()
A:matplotlib.tests.test_widgets.span->matplotlib.widgets.SpanSelector(ax, mean, direction='horizontal', onmove_callback=mean, interactive=True, drag_from_anywhere=True, useblit=True)
A:matplotlib.tests.test_widgets.snap_values->numpy.linspace(0, 5, 11)
A:matplotlib.tests.test_widgets.expect->numpy.array([0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 5.0, 5.0, 5.0])
A:matplotlib.tests.test_widgets.check->matplotlib.widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True))
A:matplotlib.tests.test_widgets.cid->matplotlib.widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True)).on_clicked(lambda : None)
A:matplotlib.tests.test_widgets.submit_event->unittest.mock.Mock(spec=noop, return_value=None)
A:matplotlib.tests.test_widgets.text_change_event->unittest.mock.Mock(spec=noop, return_value=None)
A:matplotlib.tests.test_widgets.ax->get_ax()
A:matplotlib.tests.test_widgets.rax1->fig.add_axes([0.05, 0.7, 0.2, 0.15])
A:matplotlib.tests.test_widgets.rb1->matplotlib.widgets.RadioButtons(rax1, ('Radio 1', 'Radio 2', 'Radio 3'))
A:matplotlib.tests.test_widgets.rax2->fig.add_axes([0.05, 0.5, 0.2, 0.15])
A:matplotlib.tests.test_widgets.cb1->matplotlib.widgets.CheckButtons(rax2, ('Check 1', 'Check 2', 'Check 3'), (False, True, True))
A:matplotlib.tests.test_widgets.rax3->fig.add_axes([0.05, 0.3, 0.2, 0.15])
A:matplotlib.tests.test_widgets.rb3->matplotlib.widgets.RadioButtons(rax3, ('Radio 1', 'Radio 2', 'Radio 3'), label_props={'fontsize': [8, 12, 16], 'color': ['red', 'green', 'blue']}, radio_props={'edgecolor': ['red', 'green', 'blue'], 'facecolor': ['mistyrose', 'palegreen', 'lightblue']})
A:matplotlib.tests.test_widgets.rax4->fig.add_axes([0.05, 0.1, 0.2, 0.15])
A:matplotlib.tests.test_widgets.cb4->matplotlib.widgets.CheckButtons(rax4, ('Check 1', 'Check 2', 'Check 3'), (False, True, True), label_props={'fontsize': [8, 12, 16], 'color': ['red', 'green', 'blue']}, frame_props={'edgecolor': ['red', 'green', 'blue'], 'facecolor': ['mistyrose', 'palegreen', 'lightblue']}, check_props={'color': ['red', 'green', 'blue']})
A:matplotlib.tests.test_widgets.cb->matplotlib.widgets.CheckButtons(fig_test.subplots(), ['', ''], [True, True])
A:matplotlib.tests.test_widgets.rb->matplotlib.widgets.RadioButtons(ax, ['tea', 'coffee'], activecolor='red', radio_props={'facecolor': 'green'})
A:matplotlib.tests.test_widgets.check_props['edgecolor']->check_props.pop('facecolor')
A:matplotlib.tests.test_widgets.l1->Line2D([x, x + w], [y + h, y], **lineparams)
A:matplotlib.tests.test_widgets.l2->Line2D([x, x + w], [y, y + h], **lineparams)
A:matplotlib.tests.test_widgets.slider_->matplotlib.widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0, valinit=5.0)
A:matplotlib.tests.test_widgets.slider->matplotlib.widgets.RangeSlider(ax=ax, label='', valmin=0.0, valmax=1.0, orientation=orientation, valinit=[0, 0])
A:matplotlib.tests.test_widgets.box->matplotlib.widgets.RangeSlider(ax=ax, label='', valmin=0.0, valmax=1.0, orientation=orientation, valinit=[0, 0]).poly.get_extents().transformed(ax.transAxes.inverted())
A:matplotlib.tests.test_widgets.check_selector->functools.partial(check_polygon_selector, draw_bounding_box=draw_bounding_box)
A:matplotlib.tests.test_widgets.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_widgets._->fig_ref.subplots()
A:matplotlib.tests.test_widgets.event_sequence->sum(event_sequence, [])
A:matplotlib.tests.test_widgets.tool_test->matplotlib.widgets.PolygonSelector(ax_test, onselect=noop, draw_bounding_box=draw_bounding_box)
A:matplotlib.tests.test_widgets.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_widgets.tool_ref->matplotlib.widgets.PolygonSelector(ax_ref, onselect=noop, draw_bounding_box=draw_bounding_box)
A:matplotlib.tests.test_widgets.(ax1, ax3)->matplotlib.pyplot.figure().subplots(2, sharex=True)
A:matplotlib.tests.test_widgets.ax2->matplotlib.pyplot.figure().subplots()
A:matplotlib.tests.test_widgets.multi->matplotlib.widgets.MultiCursor(None, (ax1, ax2), useblit=False, horizOn=horizOn, vertOn=vertOn)
A:matplotlib.tests.test_widgets.event->mock_event(ax3, xdata=0.75, ydata=0.75)
matplotlib.tests.test_widgets.ax()
matplotlib.tests.test_widgets.check_polygon_selector(event_sequence,expected_result,selections_count,**kwargs)
matplotlib.tests.test_widgets.polygon_place_vertex(xdata,ydata)
matplotlib.tests.test_widgets.polygon_remove_vertex(xdata,ydata)
matplotlib.tests.test_widgets.test_CheckButtons(ax)
matplotlib.tests.test_widgets.test_MultiCursor(horizOn,vertOn)
matplotlib.tests.test_widgets.test_TextBox(ax,toolbar)
matplotlib.tests.test_widgets.test_check_button_props(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_check_buttons(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_check_buttons_lines(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_check_buttons_rectangles(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_check_radio_buttons_image()
matplotlib.tests.test_widgets.test_deprecation_selector_visible_attribute(ax)
matplotlib.tests.test_widgets.test_ellipse(ax)
matplotlib.tests.test_widgets.test_lasso_selector(ax,kwargs)
matplotlib.tests.test_widgets.test_polygon_selector(draw_bounding_box)
matplotlib.tests.test_widgets.test_polygon_selector_box(ax)
matplotlib.tests.test_widgets.test_polygon_selector_redraw(ax,draw_bounding_box)
matplotlib.tests.test_widgets.test_polygon_selector_remove(idx,draw_bounding_box)
matplotlib.tests.test_widgets.test_polygon_selector_remove_first_point(draw_bounding_box)
matplotlib.tests.test_widgets.test_polygon_selector_set_props_handle_props(ax,draw_bounding_box)
matplotlib.tests.test_widgets.test_polygon_selector_verts_setter(fig_test,fig_ref,draw_bounding_box)
matplotlib.tests.test_widgets.test_radio_button_active_conflict(ax)
matplotlib.tests.test_widgets.test_radio_buttons(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_radio_buttons_activecolor_change(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_radio_buttons_props(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_range_slider(orientation)
matplotlib.tests.test_widgets.test_range_slider_same_init_values(orientation)
matplotlib.tests.test_widgets.test_rect_visibility(fig_test,fig_ref)
matplotlib.tests.test_widgets.test_rectangle_add_remove_set(ax)
matplotlib.tests.test_widgets.test_rectangle_add_state(ax)
matplotlib.tests.test_widgets.test_rectangle_drag(ax,drag_from_anywhere,new_center)
matplotlib.tests.test_widgets.test_rectangle_handles(ax)
matplotlib.tests.test_widgets.test_rectangle_minspan(ax,spancoords,minspanx,x1,minspany,y1)
matplotlib.tests.test_widgets.test_rectangle_resize(ax)
matplotlib.tests.test_widgets.test_rectangle_resize_center(ax,add_state)
matplotlib.tests.test_widgets.test_rectangle_resize_square(ax,add_state)
matplotlib.tests.test_widgets.test_rectangle_resize_square_center(ax)
matplotlib.tests.test_widgets.test_rectangle_resize_square_center_aspect(ax,use_data_coordinates)
matplotlib.tests.test_widgets.test_rectangle_rotate(ax,selector_class)
matplotlib.tests.test_widgets.test_rectangle_selector(ax,kwargs)
matplotlib.tests.test_widgets.test_rectangle_selector_ignore_outside(ax,ignore_event_outside)
matplotlib.tests.test_widgets.test_rectangle_selector_onselect(ax,interactive)
matplotlib.tests.test_widgets.test_rectangle_selector_set_props_handle_props(ax)
matplotlib.tests.test_widgets.test_save_blitted_widget_as_pdf()
matplotlib.tests.test_widgets.test_selector_clear(ax,selector)
matplotlib.tests.test_widgets.test_selector_clear_method(ax,selector)
matplotlib.tests.test_widgets.test_slider_horizontal_vertical()
matplotlib.tests.test_widgets.test_slider_reset()
matplotlib.tests.test_widgets.test_slider_slidermin_slidermax()
matplotlib.tests.test_widgets.test_slider_slidermin_slidermax_invalid()
matplotlib.tests.test_widgets.test_slider_valmin_valmax()
matplotlib.tests.test_widgets.test_slider_valstep_snapping()
matplotlib.tests.test_widgets.test_snapping_values_span_selector(ax)
matplotlib.tests.test_widgets.test_span_selector(ax,orientation,onmove_callback,kwargs)
matplotlib.tests.test_widgets.test_span_selector_add_state(ax)
matplotlib.tests.test_widgets.test_span_selector_animated_artists_callback()
matplotlib.tests.test_widgets.test_span_selector_bound(direction)
matplotlib.tests.test_widgets.test_span_selector_direction(ax)
matplotlib.tests.test_widgets.test_span_selector_drag(ax,drag_from_anywhere)
matplotlib.tests.test_widgets.test_span_selector_ignore_outside(ax,ignore_event_outside)
matplotlib.tests.test_widgets.test_span_selector_onselect(ax,interactive)
matplotlib.tests.test_widgets.test_span_selector_set_props_handle_props(ax)
matplotlib.tests.test_widgets.test_span_selector_snap(ax)
matplotlib.tests.test_widgets.test_tool_line_handle(ax)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_svg.py----------------------------------------
A:matplotlib.tests.test_backend_svg.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_svg.x->numpy.cos(t)
A:matplotlib.tests.test_backend_svg.y->numpy.sin(t)
A:matplotlib.tests.test_backend_svg.yerr->numpy.ones_like(y)
A:matplotlib.tests.test_backend_svg.(a, b, c)->fig.add_subplot().errorbar(x, y, yerr=yerr, fmt='ko')
A:matplotlib.tests.test_backend_svg.buf->fd.getvalue().decode('utf-8')
A:matplotlib.tests.test_backend_svg.parser->xml.parsers.expat.ParserCreate()
A:matplotlib.tests.test_backend_svg.(X, Y)->numpy.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))
A:matplotlib.tests.test_backend_svg.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_backend_svg.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.expected->'<a xlink:href="{0}">'.format(test_url)
A:matplotlib.tests.test_backend_svg.ax_ref->fig_ref.subplots()
A:matplotlib.tests.test_backend_svg.ax_test->fig_test.subplots()
A:matplotlib.tests.test_backend_svg.b->b.getvalue().getvalue()
A:matplotlib.tests.test_backend_svg.abox->matplotlib.offsetbox.AnnotationBbox(b, loc, zorder=2.1)
A:matplotlib.tests.test_backend_svg.fig1->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.ax1->matplotlib.pyplot.figure().add_subplot(131)
A:matplotlib.tests.test_backend_svg.fig2->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.ax2->matplotlib.pyplot.figure().add_subplot(132, projection='polar')
A:matplotlib.tests.test_backend_svg.fig3->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.ax3->matplotlib.pyplot.figure().add_subplot(133, projection='3d')
A:matplotlib.tests.test_backend_svg.fig4->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.ax4->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_backend_svg.fig5->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_svg.ax5->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_backend_svg.tree->xml.etree.ElementTree.fromstring(buf)
A:matplotlib.tests.test_backend_svg.ax1a->matplotlib.pyplot.figure().add_subplot(131).twinx()
A:matplotlib.tests.test_backend_svg.(xdata, ydata)->obj.get_data()
A:matplotlib.tests.test_backend_svg.loc->obj.get_loc()
A:matplotlib.tests.test_backend_svg.vi->obj.get_view_interval()
A:matplotlib.tests.test_backend_svg.s->fig.add_subplot().scatter([1, 2, 3], [4, 5, 6])
A:matplotlib.tests.test_backend_svg.(p,)->matplotlib.pyplot.plot([1, 3], [6, 5])
A:matplotlib.tests.test_backend_svg.(fig1, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_svg.(fig2, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_svg.b1->b1.getvalue().getvalue()
A:matplotlib.tests.test_backend_svg.b2->b2.getvalue().getvalue()
A:matplotlib.tests.test_backend_svg.root->xml.etree.ElementTree.fromstring(buf)
A:matplotlib.tests.test_backend_svg.(work,)->xml.etree.ElementTree.fromstring(buf).findall(f'./{SVGNS}metadata/{RDFNS}RDF/{CCNS}Work')
A:matplotlib.tests.test_backend_svg.data->work.findall(f'./{DCNS}{key}')
A:matplotlib.tests.test_backend_svg.xmlstr->xml.etree.ElementTree.tostring(data, encoding='unicode')
A:matplotlib.tests.test_backend_svg.(rdf,)->xml.etree.ElementTree.fromstring(buf).findall(f'./{SVGNS}metadata/{RDFNS}RDF')
A:matplotlib.tests.test_backend_svg.fp->matplotlib.font_manager.FontProperties(family=['WenQuanYi Zen Hei'])
A:matplotlib.tests.test_backend_svg.(explicit, *rest, generic)->map(lambda x: x.strip("'"), font_str.split(', '))
A:matplotlib.tests.test_backend_svg.size->len(generic)
A:matplotlib.tests.test_backend_svg.ax->matplotlib.pyplot.figure().add_subplot()
A:matplotlib.tests.test_backend_svg.arr_img->numpy.ones((32, 32))
A:matplotlib.tests.test_backend_svg.imagebox->OffsetImage(arr_img, zoom=0.1)
A:matplotlib.tests.test_backend_svg.ab->AnnotationBbox(imagebox, xy, xybox=(120.0, -80.0), xycoords='data', boxcoords='offset points', pad=0.5, arrowprops=dict(arrowstyle='->', connectionstyle='angle,angleA=0,angleB=90,rad=3'))
matplotlib.tests.test_backend_svg.test_annotationbbox_gid()
matplotlib.tests.test_backend_svg.test_bold_font_output()
matplotlib.tests.test_backend_svg.test_bold_font_output_with_none_fonttype()
matplotlib.tests.test_backend_svg.test_count_bitmaps()
matplotlib.tests.test_backend_svg.test_fill_black_with_alpha()
matplotlib.tests.test_backend_svg.test_gid()
matplotlib.tests.test_backend_svg.test_multi_font_type3()
matplotlib.tests.test_backend_svg.test_multi_font_type42()
matplotlib.tests.test_backend_svg.test_noscale()
matplotlib.tests.test_backend_svg.test_prevent_rasterization(fig_test,fig_ref)
matplotlib.tests.test_backend_svg.test_rasterized(fig_test,fig_ref)
matplotlib.tests.test_backend_svg.test_rasterized_ordering(fig_test,fig_ref)
matplotlib.tests.test_backend_svg.test_savefig_tight()
matplotlib.tests.test_backend_svg.test_svg_clear_all_metadata()
matplotlib.tests.test_backend_svg.test_svg_clear_default_metadata(monkeypatch)
matplotlib.tests.test_backend_svg.test_svg_default_metadata(monkeypatch)
matplotlib.tests.test_backend_svg.test_svg_escape()
matplotlib.tests.test_backend_svg.test_svg_font_string(font_str,include_generic)
matplotlib.tests.test_backend_svg.test_svg_incorrect_metadata(metadata,error,message)
matplotlib.tests.test_backend_svg.test_svg_metadata()
matplotlib.tests.test_backend_svg.test_svgnone_with_data_coordinates()
matplotlib.tests.test_backend_svg.test_text_urls()
matplotlib.tests.test_backend_svg.test_unicode_won()
matplotlib.tests.test_backend_svg.test_url()
matplotlib.tests.test_backend_svg.test_url_tick(monkeypatch)
matplotlib.tests.test_backend_svg.test_visibility()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_preprocess_data.py----------------------------------------
A:matplotlib.tests.test_preprocess_data.data->pd.DataFrame({'a': np.array([1, 2], dtype=np.int32), 'b': np.array([8, 9], dtype=np.int32), 'w': ['NOT', 'NOT']})
A:matplotlib.tests.test_preprocess_data.completed_proc->subprocess.run(cmd, text=True, capture_output=True)
A:matplotlib.tests.test_preprocess_data.ddict->dict(zip(x, y))
matplotlib.tests.test_preprocess_data.TestPlotTypes
matplotlib.tests.test_preprocess_data.TestPlotTypes.test_data_kwarg(self,plotter,fig_test,fig_ref)
matplotlib.tests.test_preprocess_data.TestPlotTypes.test_dict_unpack(self,plotter,fig_test,fig_ref)
matplotlib.tests.test_preprocess_data.plot_func(ax,x,y,ls='x',label=None,w='xyz')
matplotlib.tests.test_preprocess_data.test_compiletime_checks()
matplotlib.tests.test_preprocess_data.test_data_parameter_replacement()
matplotlib.tests.test_preprocess_data.test_docstring_addition()
matplotlib.tests.test_preprocess_data.test_function_call_replace_all()
matplotlib.tests.test_preprocess_data.test_function_call_with_dict_data(func)
matplotlib.tests.test_preprocess_data.test_function_call_with_dict_data_not_in_data(func)
matplotlib.tests.test_preprocess_data.test_function_call_with_dict_input(func)
matplotlib.tests.test_preprocess_data.test_function_call_with_pandas_data(func,pd)
matplotlib.tests.test_preprocess_data.test_function_call_without_data(func)
matplotlib.tests.test_preprocess_data.test_more_args_than_pos_parameter()
matplotlib.tests.test_preprocess_data.test_no_label_replacements()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_compare_images.py----------------------------------------
A:matplotlib.tests.test_compare_images.(baseline_dir, result_dir)->map(Path, _image_directories(lambda : 'dummy'))
A:matplotlib.tests.test_compare_images.results->compare_images(baseline_dir / im1, result_im2, tol=tol, in_decorator=True)
matplotlib.tests.test_compare_images.test_image_comparison_expect_rms(im1,im2,tol,expect_rms,tmp_path,monkeypatch)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_matplotlib.py----------------------------------------
A:matplotlib.tests.test_matplotlib.proc->subprocess.run([sys.executable, '-c', 'import matplotlib'], env={**os.environ, 'MPLCONFIGDIR': str(tmpdir)}, stderr=subprocess.PIPE, universal_newlines=True, check=True)
matplotlib.tests.test_matplotlib.test_importable_with__OO()
matplotlib.tests.test_matplotlib.test_importable_with_no_home(tmpdir)
matplotlib.tests.test_matplotlib.test_parse_to_version_info(version_str,version_tuple)
matplotlib.tests.test_matplotlib.test_tmpconfigdir_warning(tmpdir)
matplotlib.tests.test_matplotlib.test_use_doc_standard_backends()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_contour.py----------------------------------------
A:matplotlib.tests.test_contour.x->numpy.arange(-3.0, 3.0, delta)
A:matplotlib.tests.test_contour.y->numpy.arange(-2.0, 2.0, delta)
A:matplotlib.tests.test_contour.z->z.ravel().ravel()
A:matplotlib.tests.test_contour.(fig, ax)->matplotlib.pyplot.subplots(figsize=(6, 5))
A:matplotlib.tests.test_contour.(xg, yg)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_contour.cs->matplotlib.pyplot.figure().add_subplot().contour(np.arange(16).reshape((4, 4)))
A:matplotlib.tests.test_contour.cs1->matplotlib.pyplot.figure().add_subplot().contour(z, 5)
A:matplotlib.tests.test_contour.cs2->matplotlib.pyplot.figure().add_subplot().contour(z, levels=5)
A:matplotlib.tests.test_contour.(x, y)->numpy.random.rand(2, 9)
A:matplotlib.tests.test_contour.pts->numpy.array([(2.0, 3.0), (2.0, 4.4), (2.0, 6.0)])
A:matplotlib.tests.test_contour.(_, axs)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_contour.data->numpy.power(10, data_exp).reshape(30, 40)
A:matplotlib.tests.test_contour.c->matplotlib.pyplot.figure().add_subplot().contourf(data, locator=ticker.LogLocator())
A:matplotlib.tests.test_contour.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_contour.Z1->numpy.exp(-X ** 2 - Y ** 2)
A:matplotlib.tests.test_contour.Z2->numpy.exp(-(X - 1) ** 2 - (Y - 1) ** 2)
A:matplotlib.tests.test_contour.cb->matplotlib.pyplot.figure().colorbar(pcm)
A:matplotlib.tests.test_contour.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_contour.base->datetime.datetime(2013, 1, 1)
A:matplotlib.tests.test_contour.(z1, z2)->numpy.meshgrid(np.arange(20), np.arange(20))
A:matplotlib.tests.test_contour.CS->matplotlib.pyplot.figure().add_subplot().contour(X, Y, Z)
A:matplotlib.tests.test_contour.locator->matplotlib.pyplot.MaxNLocator(nbins=4, symmetric=True)
A:matplotlib.tests.test_contour.r->numpy.hypot(x, y)
A:matplotlib.tests.test_contour.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(ncols=2)
A:matplotlib.tests.test_contour.cs_filled->ax2.contourf(x, y, z, zorder=contour_zorder)
A:matplotlib.tests.test_contour.clabels1->matplotlib.pyplot.figure().add_subplot().contour(np.arange(16).reshape((4, 4))).clabel(zorder=clabel_zorder, use_clabeltext=use_clabeltext)
A:matplotlib.tests.test_contour.clabels2->ax2.contourf(x, y, z, zorder=contour_zorder).clabel(zorder=clabel_zorder, use_clabeltext=use_clabeltext)
A:matplotlib.tests.test_contour.(fig, (ax1, ax2, ax3))->matplotlib.pyplot.subplots(1, 3, figsize=(10, 5))
A:matplotlib.tests.test_contour.data_exp->numpy.linspace(-7.5, 9.5, 1200)
A:matplotlib.tests.test_contour.levels_exp->numpy.arange(-4.0, 7.0)
A:matplotlib.tests.test_contour.levels->numpy.power(10.0, levels_exp)
A:matplotlib.tests.test_contour.c1->ax1.contourf(data, norm=LogNorm(vmin=data.min(), vmax=data.max()))
A:matplotlib.tests.test_contour.c2->ax2.contourf(data, levels=levels, norm=LogNorm(vmin=levels.min(), vmax=levels.max()), extend='neither')
A:matplotlib.tests.test_contour.c3->ax3.contourf(data, levels=levels, norm=LogNorm(vmin=levels.min(), vmax=levels.max()), extend='both')
A:matplotlib.tests.test_contour.pcm->matplotlib.pyplot.figure().add_subplot().pcolormesh(X)
A:matplotlib.tests.test_contour.cont->matplotlib.pyplot.figure().add_subplot().contour(X + 1000)
A:matplotlib.tests.test_contour.(fig, axs)->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_contour.X->numpy.arange(4 * 3).reshape(4, 3)
A:matplotlib.tests.test_contour.qcs1->matplotlib.pyplot.figure().add_subplot().contourf(x, y, z)
A:matplotlib.tests.test_contour.qcs2->matplotlib.pyplot.figure().add_subplot().contour(x, y, z)
A:matplotlib.tests.test_contour.qcs3->matplotlib.pyplot.figure().add_subplot().contour(qcs1, z)
A:matplotlib.tests.test_contour.mask->numpy.zeros_like(z, dtype=bool)
A:matplotlib.tests.test_contour.filled->matplotlib.pyplot.figure().add_subplot().contourf(x, y, z, corner_mask=True)
A:matplotlib.tests.test_contour.cbar->matplotlib.pyplot.figure().colorbar(filled)
A:matplotlib.tests.test_contour.lines->matplotlib.pyplot.figure().add_subplot().contour(x, y, z, corner_mask=True, colors='k')
A:matplotlib.tests.test_contour.xy->numpy.indices((15, 15))
A:matplotlib.tests.test_contour.img->numpy.exp(-np.pi * (np.sum((xy - 5) ** 2, 0) / 5.0 ** 2))
A:matplotlib.tests.test_contour.nearest_contour->matplotlib.pyplot.figure().add_subplot().contour(np.arange(16).reshape((4, 4))).find_nearest_contour(2, 5, indices=(5, 7), pixel=False)
A:matplotlib.tests.test_contour.ax->matplotlib.pyplot.figure().add_subplot()
A:matplotlib.tests.test_contour.(artists, labels)->matplotlib.pyplot.figure().add_subplot().contour(np.arange(16).reshape((4, 4))).legend_elements()
A:matplotlib.tests.test_contour.rng->numpy.random.default_rng(2981)
A:matplotlib.tests.test_contour.figs->matplotlib.pyplot.figure().subfigures(nrows=1, ncols=2)
A:matplotlib.tests.test_contour.(fig1, ax1)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_contour.CS1->ax1.contour(X, Y, Z, 6, colors='k')
A:matplotlib.tests.test_contour.(fig2, ax2)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_contour.CS2->ax2.contour(X, Y, Z, 6, colors='k')
A:matplotlib.tests.test_contour.(fig3, ax3)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_contour.CS3->ax3.contour(X, Y, Z, 6, colors='k', negative_linestyles=style)
A:matplotlib.tests.test_contour.(fig4, ax4)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_contour.CS4->ax4.contour(X, Y, Z, 6, colors='k', linestyles='dashdot', negative_linestyles=style)
A:matplotlib.tests.test_contour.orig_children->matplotlib.pyplot.figure().add_subplot().get_children()
matplotlib.tests.test_contour.test_algorithm_name(algorithm,klass)
matplotlib.tests.test_contour.test_algorithm_supports_corner_mask(algorithm)
matplotlib.tests.test_contour.test_all_algorithms()
matplotlib.tests.test_contour.test_bool_autolevel()
matplotlib.tests.test_contour.test_circular_contour_warning()
matplotlib.tests.test_contour.test_clabel_zorder(use_clabeltext,contour_zorder,clabel_zorder)
matplotlib.tests.test_contour.test_contour_Nlevels()
matplotlib.tests.test_contour.test_contour_addlines()
matplotlib.tests.test_contour.test_contour_autolabel_beyond_powerlimits()
matplotlib.tests.test_contour.test_contour_closed_line_loop()
matplotlib.tests.test_contour.test_contour_datetime_axis()
matplotlib.tests.test_contour.test_contour_legend_elements()
matplotlib.tests.test_contour.test_contour_line_start_on_corner_edge()
matplotlib.tests.test_contour.test_contour_linewidth(rc_lines_linewidth,rc_contour_linewidth,call_linewidths,expected)
matplotlib.tests.test_contour.test_contour_manual()
matplotlib.tests.test_contour.test_contour_manual_labels()
matplotlib.tests.test_contour.test_contour_no_valid_levels()
matplotlib.tests.test_contour.test_contour_remove()
matplotlib.tests.test_contour.test_contour_shape_1d_valid()
matplotlib.tests.test_contour.test_contour_shape_2d_valid()
matplotlib.tests.test_contour.test_contour_shape_error(args,message)
matplotlib.tests.test_contour.test_contour_uneven()
matplotlib.tests.test_contour.test_contourf_decreasing_levels()
matplotlib.tests.test_contour.test_contourf_legend_elements()
matplotlib.tests.test_contour.test_contourf_log_extension()
matplotlib.tests.test_contour.test_contourf_symmetric_locator()
matplotlib.tests.test_contour.test_corner_mask()
matplotlib.tests.test_contour.test_find_nearest_contour()
matplotlib.tests.test_contour.test_find_nearest_contour_no_filled()
matplotlib.tests.test_contour.test_given_colors_levels_and_extends()
matplotlib.tests.test_contour.test_label_nonagg()
matplotlib.tests.test_contour.test_labels()
matplotlib.tests.test_contour.test_linestyles(style)
matplotlib.tests.test_contour.test_log_locator_levels()
matplotlib.tests.test_contour.test_negative_linestyles(style)
matplotlib.tests.test_contour.test_quadcontourset_reuse()
matplotlib.tests.test_contour.test_subfigure_clabel()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_pickle.py----------------------------------------
A:matplotlib.tests.test_pickle.fig->matplotlib.figure.Figure()
A:matplotlib.tests.test_pickle.ax->mpl_toolkits.axes_grid1.parasite_axes.host_axes([0, 0, 1, 1])
A:matplotlib.tests.test_pickle.datauv->numpy.linspace(0, 10, 80).reshape(10, 8)
A:matplotlib.tests.test_pickle.v->numpy.sin(v * -0.6)
A:matplotlib.tests.test_pickle.pkl->pickle.dumps(fig_ref, pickle.HIGHEST_PROTOCOL)
A:matplotlib.tests.test_pickle.loaded->pickle.loads(pkl)
A:matplotlib.tests.test_pickle.proc->subprocess_run_helper(_pickle_load_subprocess, timeout=60, extra_env={'PICKLE_FILE_PATH': str(fp)})
A:matplotlib.tests.test_pickle.loaded_fig->pickle.loads(ast.literal_eval(proc.stdout))
A:matplotlib.tests.test_pickle.buf->BytesIO()
A:matplotlib.tests.test_pickle._->FigureCanvasPdf(fig)
A:matplotlib.tests.test_pickle.renderer->RendererAgg(10, 20, 30)
A:matplotlib.tests.test_pickle.manager->new_figure_manager(1000)
A:matplotlib.tests.test_pickle.pf->pickle.dumps(obj)
A:matplotlib.tests.test_pickle.self.identity->matplotlib.transforms.IdentityTransform()
A:matplotlib.tests.test_pickle.self.identity2->matplotlib.transforms.IdentityTransform()
A:matplotlib.tests.test_pickle.self.composite->matplotlib.transforms.CompositeGenericTransform(self.identity, self.identity2)
A:matplotlib.tests.test_pickle.self.wrapper->matplotlib.transforms.TransformWrapper(self.composite)
A:matplotlib.tests.test_pickle.self.composite2->matplotlib.transforms.CompositeGenericTransform(self.wrapper, self.identity)
A:matplotlib.tests.test_pickle.obj->pickle.loads(pf)
A:matplotlib.tests.test_pickle.r->rrulewrapper(2)
A:matplotlib.tests.test_pickle.(fig, axs)->matplotlib.pyplot.subplots(2, sharex=True)
A:matplotlib.tests.test_pickle.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_pickle.out->BytesIO()
A:matplotlib.tests.test_pickle.fig2->pickle.load(out)
A:matplotlib.tests.test_pickle.logit_norm_instance->matplotlib.colors.make_norm_from_scale(mpl.scale.LogitScale, mpl.colors.Normalize)()
A:matplotlib.tests.test_pickle.(line,)->matplotlib.pyplot.plot([0, 1], picker=True)
matplotlib.tests.test_pickle.TransformBlob(self)
matplotlib.tests.test_pickle.TransformBlob.__init__(self)
matplotlib.tests.test_pickle._generate_complete_test_figure(fig_ref)
matplotlib.tests.test_pickle._pickle_load_subprocess()
matplotlib.tests.test_pickle.test_cmap(cmap)
matplotlib.tests.test_pickle.test_complete(fig_test,fig_ref)
matplotlib.tests.test_pickle.test_dynamic_norm()
matplotlib.tests.test_pickle.test_gcf()
matplotlib.tests.test_pickle.test_image()
matplotlib.tests.test_pickle.test_inset_and_secondary()
matplotlib.tests.test_pickle.test_mpl_toolkits()
matplotlib.tests.test_pickle.test_no_plt()
matplotlib.tests.test_pickle.test_no_pyplot()
matplotlib.tests.test_pickle.test_pickle_load_from_subprocess(fig_test,fig_ref,tmp_path)
matplotlib.tests.test_pickle.test_polar()
matplotlib.tests.test_pickle.test_renderer()
matplotlib.tests.test_pickle.test_rrulewrapper()
matplotlib.tests.test_pickle.test_shared()
matplotlib.tests.test_pickle.test_simple()
matplotlib.tests.test_pickle.test_standard_norm()
matplotlib.tests.test_pickle.test_transform()
matplotlib.tests.test_pickle.test_unpickle_canvas()
matplotlib.tests.test_pickle.test_vertexselector()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_scale.py----------------------------------------
A:matplotlib.tests.test_scale.ax_test->fig_test.add_subplot(122, yscale='log', xscale='symlog')
A:matplotlib.tests.test_scale.xlim->fig_test.add_subplot(122, yscale='log', xscale='symlog').get_xlim()
A:matplotlib.tests.test_scale.ylim->fig_test.add_subplot(122, yscale='log', xscale='symlog').get_ylim()
A:matplotlib.tests.test_scale.ax_ref->fig_ref.add_subplot(122, yscale='log', xscale='symlog')
A:matplotlib.tests.test_scale.slt->SymmetricalLogTransform(10, 2, 1)
A:matplotlib.tests.test_scale.slti->SymmetricalLogTransform(10, 2, 1).inverted()
A:matplotlib.tests.test_scale.x->numpy.arange(1, 1000)
A:matplotlib.tests.test_scale.out->SymmetricalLogTransform(10, 2, 1).inverted().transform_non_affine(slt.transform_non_affine(x))
A:matplotlib.tests.test_scale.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_scale.bbox->ax.get_tightbbox(fig.canvas.get_renderer())
A:matplotlib.tests.test_scale.buf->io.BytesIO()
A:matplotlib.tests.test_scale.xs->numpy.random.normal(size=int(1000.0))
A:matplotlib.tests.test_scale.tform->(ax.transAxes + ax.transData.inverted()).inverted()
A:matplotlib.tests.test_scale.inverted_transform->LogTransform(base=2).inverted()
A:matplotlib.tests.test_scale.(fig, ((ax1, ax2), (ax3, ax4)))->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_scale.xdata->numpy.arange(0, 10, 0.01)
A:matplotlib.tests.test_scale.ydata->numpy.exp(-xdata)
A:matplotlib.tests.test_scale.original_xlim->ax.get_xlim()
A:matplotlib.tests.test_scale.original_ylim->ax.get_ylim()
A:matplotlib.tests.test_scale.scale->matplotlib.scale.LogScale(axis=None)
A:matplotlib.tests.test_scale.sc->matplotlib.scale.LogScale(axis='x', base=10)
A:matplotlib.tests.test_scale.sc2->copy.deepcopy(sc)
A:matplotlib.tests.test_scale.a->numpy.linspace(-50, 50, 100)
A:matplotlib.tests.test_scale.forward->AsinhTransform(a0)
A:matplotlib.tests.test_scale.inverse->AsinhTransform(a0).inverted()
A:matplotlib.tests.test_scale.invinv->AsinhTransform(a0).inverted().inverted()
A:matplotlib.tests.test_scale.a_forward->AsinhTransform(a0).transform_non_affine(a)
A:matplotlib.tests.test_scale.a_inverted->AsinhTransform(a0).inverted().transform_non_affine(a_forward)
A:matplotlib.tests.test_scale.a_invinv->AsinhTransform(a0).inverted().inverted().transform_non_affine(a)
A:matplotlib.tests.test_scale.s->AsinhScale(axis=None, linear_width=23.0)
A:matplotlib.tests.test_scale.tx->AsinhScale(axis=None, linear_width=23.0).get_transform()
A:matplotlib.tests.test_scale.s3->AsinhScale(axis=None, base=3)
A:matplotlib.tests.test_scale.s7->AsinhScale(axis=ax5, base=5)
A:matplotlib.tests.test_scale.ax0->DummyAxis()
A:matplotlib.tests.test_scale.s0->AsinhScale(axis=None)
A:matplotlib.tests.test_scale.ax5->DummyAxis()
A:matplotlib.tests.test_scale.s1->AsinhScale(axis=None, linear_width=3.0)
matplotlib.tests.test_scale.TestAsinhScale
matplotlib.tests.test_scale.TestAsinhScale.test_bad_scale(self)
matplotlib.tests.test_scale.TestAsinhScale.test_base_init(self)
matplotlib.tests.test_scale.TestAsinhScale.test_fmtloc(self)
matplotlib.tests.test_scale.TestAsinhScale.test_init(self)
matplotlib.tests.test_scale.TestAsinhScale.test_transforms(self)
matplotlib.tests.test_scale.test_extra_kwargs_raise()
matplotlib.tests.test_scale.test_function_scale()
matplotlib.tests.test_scale.test_invalid_log_lims()
matplotlib.tests.test_scale.test_log_scales(fig_test,fig_ref)
matplotlib.tests.test_scale.test_log_scatter()
matplotlib.tests.test_scale.test_logit_scales()
matplotlib.tests.test_scale.test_logscale_invert_transform()
matplotlib.tests.test_scale.test_logscale_mask()
matplotlib.tests.test_scale.test_logscale_nonpos_values()
matplotlib.tests.test_scale.test_logscale_subs()
matplotlib.tests.test_scale.test_logscale_transform_repr()
matplotlib.tests.test_scale.test_pass_scale()
matplotlib.tests.test_scale.test_scale_deepcopy()
matplotlib.tests.test_scale.test_symlog_mask_nan()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_lines.py----------------------------------------
A:matplotlib.tests.test_lines.x->numpy.linspace(-1, 1)
A:matplotlib.tests.test_lines.y->numpy.random.rand(len(x))
A:matplotlib.tests.test_lines.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_lines.ax->fig_test.add_subplot()
A:matplotlib.tests.test_lines.l->matplotlib.lines.Line2D(x, y)
A:matplotlib.tests.test_lines.t_no_line->min(timeit.repeat(fig.canvas.draw, number=1, repeat=3))
A:matplotlib.tests.test_lines.t_invisible_line->min(timeit.repeat(fig.canvas.draw, number=1, repeat=3))
A:matplotlib.tests.test_lines.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_lines.line->matplotlib.lines.Line2D([], [])
A:matplotlib.tests.test_lines.(fig, axs)->matplotlib.pyplot.subplots(6)
A:matplotlib.tests.test_lines.t->numpy.arange(0, 6, 2)
A:matplotlib.tests.test_lines.(line,)->fig_test.add_subplot().plot([2, 4, 3], marker=MarkerStyle('D'))
A:matplotlib.tests.test_lines.colors->cmap(np.linspace(0.2, 0.8, len(cases)))
A:matplotlib.tests.test_lines.color->next(colors)
A:matplotlib.tests.test_lines.(l,)->fig_test.add_subplot().plot(t, t, '.-')
A:matplotlib.tests.test_lines.th->numpy.linspace(0, 32)
A:matplotlib.tests.test_lines.cy->cycler(matplotlib.rcParams['axes.prop_cycle'])
A:matplotlib.tests.test_lines.axs_test->iter(fig_test.subplots(3, 3).flat)
A:matplotlib.tests.test_lines.axs_ref->iter(fig_ref.subplots(3, 3).flat)
A:matplotlib.tests.test_lines.me->numpy.array(list(case)).astype(int).astype(bool)
A:matplotlib.tests.test_lines.triangle1->matplotlib.path.Path._create_closed([[-1, -1], [1, -1], [0, 2]])
A:matplotlib.tests.test_lines.(line2,)->fig_test.add_subplot().plot([1, 3, 2], marker=MarkerStyle(triangle1), ms=22)
A:matplotlib.tests.test_lines.(line3,)->fig_test.add_subplot().plot([0, 2, 1], marker=triangle1, ms=22)
A:matplotlib.tests.test_lines.rng->numpy.random.default_rng(19680801)
A:matplotlib.tests.test_lines.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_lines.mouse_event->SimpleNamespace(x=fig.bbox.width // 2, y=fig.bbox.height // 2 + 15)
A:matplotlib.tests.test_lines.(l0,)->fig_test.add_subplot().plot([0, 1], [0, 1], picker=True)
A:matplotlib.tests.test_lines.(found, indices)->l2.contains(mouse_event)
A:matplotlib.tests.test_lines.(l1,)->fig_test.add_subplot().plot([0, 1], [0, 1], picker=True, pickradius=20)
A:matplotlib.tests.test_lines.(l2,)->fig_test.add_subplot().plot([0, 1], [0, 1], picker=True)
A:matplotlib.tests.test_lines.t[:]->range(3)
A:matplotlib.tests.test_lines.axs->fig_ref.add_subplot()
A:matplotlib.tests.test_lines.matplotlib.rcParams['axes.prop_cycle']->cycler(markevery=cases, color=colors)
matplotlib.tests.test_lines.test_drawstyle_variants()
matplotlib.tests.test_lines.test_input_copy(fig_test,fig_ref)
matplotlib.tests.test_lines.test_invalid_line_data()
matplotlib.tests.test_lines.test_invisible_Line_rendering()
matplotlib.tests.test_lines.test_is_sorted_and_has_non_nan()
matplotlib.tests.test_lines.test_line_colors()
matplotlib.tests.test_lines.test_line_dashes()
matplotlib.tests.test_lines.test_linestyle_variants()
matplotlib.tests.test_lines.test_lw_scaling()
matplotlib.tests.test_lines.test_marker_as_markerstyle()
matplotlib.tests.test_lines.test_marker_fill_styles()
matplotlib.tests.test_lines.test_markerfacecolor_fillstyle()
matplotlib.tests.test_lines.test_markevery(fig_test,fig_ref,parent)
matplotlib.tests.test_lines.test_markevery_figure_line_unsupported_relsize()
matplotlib.tests.test_lines.test_markevery_prop_cycle(fig_test,fig_ref)
matplotlib.tests.test_lines.test_no_subslice_with_transform(fig_ref,fig_test)
matplotlib.tests.test_lines.test_odd_dashes(fig_test,fig_ref)
matplotlib.tests.test_lines.test_picking()
matplotlib.tests.test_lines.test_segment_hits()
matplotlib.tests.test_lines.test_set_drawstyle()
matplotlib.tests.test_lines.test_set_line_coll_dash()
matplotlib.tests.test_lines.test_set_line_coll_dash_image()
matplotlib.tests.test_lines.test_step_markers(fig_test,fig_ref)
matplotlib.tests.test_lines.test_striped_lines()
matplotlib.tests.test_lines.test_valid_colors()
matplotlib.tests.test_lines.test_valid_drawstyles()
matplotlib.tests.test_lines.test_valid_linestyles()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_constrainedlayout.py----------------------------------------
A:matplotlib.tests.test_constrainedlayout.pcm->example_pcolor(ax)
A:matplotlib.tests.test_constrainedlayout.fig->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10))
A:matplotlib.tests.test_constrainedlayout.ax->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_constrainedlayout.(fig, axs)->matplotlib.pyplot.subplots(2, 3, layout='compressed', sharex=True, sharey=True, figsize=(5, 4))
A:matplotlib.tests.test_constrainedlayout.gs->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_gridspec(3, 3)
A:matplotlib.tests.test_constrainedlayout.gsl->matplotlib.gridspec.GridSpecFromSubplotSpec(1, 2, gs0[0])
A:matplotlib.tests.test_constrainedlayout.gsr->matplotlib.gridspec.GridSpecFromSubplotSpec(1, 2, gs[1])
A:matplotlib.tests.test_constrainedlayout.GS->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_gridspec(2, 1)
A:matplotlib.tests.test_constrainedlayout.GSA->GS[0].subgridspec(1, 3)
A:matplotlib.tests.test_constrainedlayout.GSB->GS[1].subgridspec(1, 3)
A:matplotlib.tests.test_constrainedlayout.gs0->matplotlib.gridspec.GridSpec(6, 2, figure=fig)
A:matplotlib.tests.test_constrainedlayout.gsl0->matplotlib.gridspec.GridSpecFromSubplotSpec(2, 2, gsl[1], height_ratios=[2, 1])
A:matplotlib.tests.test_constrainedlayout.ax1->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_subplot(gs[0, 0])
A:matplotlib.tests.test_constrainedlayout.ax2->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).twiny()
A:matplotlib.tests.test_constrainedlayout.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_constrainedlayout.ax3->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_subplot(gs[1:, 0:2])
A:matplotlib.tests.test_constrainedlayout.ax4->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_subplot(gs[1:, -1])
A:matplotlib.tests.test_constrainedlayout.gx->numpy.linspace(-5, 5, 4)
A:matplotlib.tests.test_constrainedlayout.img->numpy.hypot(gx, gx[:, None])
A:matplotlib.tests.test_constrainedlayout.mesh->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).pcolormesh(gx, gx, img[:-1, :-1])
A:matplotlib.tests.test_constrainedlayout.extents0->numpy.copy(ax.get_position().extents)
A:matplotlib.tests.test_constrainedlayout.extents1->numpy.copy(axs[0, 0].get_position().extents)
A:matplotlib.tests.test_constrainedlayout.sub->gs[0].subgridspec(2, 2)
A:matplotlib.tests.test_constrainedlayout.pc->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).imshow(np.random.randn(20, 20))
A:matplotlib.tests.test_constrainedlayout.cb->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).colorbar(pc, ax=ax, location=location, shrink=0.6, pad=0.04)
A:matplotlib.tests.test_constrainedlayout.axs->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).subplots(1, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_constrainedlayout.im->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).imshow([[1, 2], [3, 4]])
A:matplotlib.tests.test_constrainedlayout.pp->axs[0].get_position()
A:matplotlib.tests.test_constrainedlayout.(fig, (ax3, ax1, ax2))->matplotlib.pyplot.subplots(3, 1, layout='constrained', figsize=(6.4, 8), gridspec_kw={'height_ratios': (1, 1, 0.7)})
A:matplotlib.tests.test_constrainedlayout.pos0->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).get_tightbbox(fig.canvas.get_renderer())
A:matplotlib.tests.test_constrainedlayout.pos->axs[1, 2].get_position()
A:matplotlib.tests.test_constrainedlayout.sp->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_subplot(gs[0:, 1:])
A:matplotlib.tests.test_constrainedlayout.ppos->matplotlib.pyplot.figure(constrained_layout=True, figsize=(10, 10)).add_axes([0, 0, 1, 1]).get_position()
matplotlib.tests.test_constrainedlayout.example_pcolor(ax,fontsize=12)
matplotlib.tests.test_constrainedlayout.example_plot(ax,fontsize=12,nodec=False)
matplotlib.tests.test_constrainedlayout.test_align_labels()
matplotlib.tests.test_constrainedlayout.test_bbox()
matplotlib.tests.test_constrainedlayout.test_bboxtight()
matplotlib.tests.test_constrainedlayout.test_colorbar_align()
matplotlib.tests.test_constrainedlayout.test_colorbar_location()
matplotlib.tests.test_constrainedlayout.test_colorbars_no_overlapH()
matplotlib.tests.test_constrainedlayout.test_colorbars_no_overlapV()
matplotlib.tests.test_constrainedlayout.test_compressed1()
matplotlib.tests.test_constrainedlayout.test_constrained_layout1()
matplotlib.tests.test_constrainedlayout.test_constrained_layout10()
matplotlib.tests.test_constrainedlayout.test_constrained_layout11()
matplotlib.tests.test_constrainedlayout.test_constrained_layout11rat()
matplotlib.tests.test_constrainedlayout.test_constrained_layout12()
matplotlib.tests.test_constrainedlayout.test_constrained_layout13()
matplotlib.tests.test_constrainedlayout.test_constrained_layout14()
matplotlib.tests.test_constrainedlayout.test_constrained_layout15()
matplotlib.tests.test_constrainedlayout.test_constrained_layout16()
matplotlib.tests.test_constrainedlayout.test_constrained_layout17()
matplotlib.tests.test_constrainedlayout.test_constrained_layout18()
matplotlib.tests.test_constrainedlayout.test_constrained_layout19()
matplotlib.tests.test_constrainedlayout.test_constrained_layout2()
matplotlib.tests.test_constrainedlayout.test_constrained_layout20()
matplotlib.tests.test_constrainedlayout.test_constrained_layout21()
matplotlib.tests.test_constrainedlayout.test_constrained_layout22()
matplotlib.tests.test_constrainedlayout.test_constrained_layout23()
matplotlib.tests.test_constrainedlayout.test_constrained_layout3()
matplotlib.tests.test_constrainedlayout.test_constrained_layout4()
matplotlib.tests.test_constrainedlayout.test_constrained_layout5()
matplotlib.tests.test_constrainedlayout.test_constrained_layout6()
matplotlib.tests.test_constrainedlayout.test_constrained_layout7()
matplotlib.tests.test_constrainedlayout.test_constrained_layout8()
matplotlib.tests.test_constrainedlayout.test_constrained_layout9()
matplotlib.tests.test_constrainedlayout.test_constrained_toggle()
matplotlib.tests.test_constrainedlayout.test_discouraged_api()
matplotlib.tests.test_constrainedlayout.test_gridspec_addressing()
matplotlib.tests.test_constrainedlayout.test_hidden_axes()
matplotlib.tests.test_constrainedlayout.test_identical_subgridspec()
matplotlib.tests.test_constrainedlayout.test_kwargs()
matplotlib.tests.test_constrainedlayout.test_layout_leak()
matplotlib.tests.test_constrainedlayout.test_manually_set_position()
matplotlib.tests.test_constrainedlayout.test_rect()
matplotlib.tests.test_constrainedlayout.test_set_constrained_layout(arg,state)
matplotlib.tests.test_constrainedlayout.test_suplabels()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_pgf.py----------------------------------------
A:matplotlib.tests.test_backend_pgf.(baseline_dir, result_dir)->_image_directories(lambda : 'dummy func')
A:matplotlib.tests.test_backend_pgf.actual->os.path.join(result_dir, fname)
A:matplotlib.tests.test_backend_pgf.expected->os.path.join(result_dir, 'expected_%s' % fname)
A:matplotlib.tests.test_backend_pgf.err->compare_images(expected, actual, tol=tol)
A:matplotlib.tests.test_backend_pgf.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_pgf.x->numpy.linspace(0, 1, 15)
A:matplotlib.tests.test_backend_pgf.(fig, axs)->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_backend_pgf.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_backend_pgf.bbox->ax1.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
A:matplotlib.tests.test_backend_pgf.(fig1, ax1)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_pgf.(fig2, ax2)->matplotlib.pyplot.subplots(figsize=(3, 2))
A:matplotlib.tests.test_backend_pgf.path->os.path.join(result_dir, f'pdfpages_meta_check_{system}.pdf')
A:matplotlib.tests.test_backend_pgf.pikepdf->pytest.importorskip('pikepdf')
A:matplotlib.tests.test_backend_pgf.(fig, ax)->matplotlib.pyplot.subplots(figsize=(3, 3))
A:matplotlib.tests.test_backend_pgf.producer->info.pop('/Producer')
A:matplotlib.tests.test_backend_pgf.buf->fd.getvalue().decode()
A:matplotlib.tests.test_backend_pgf.t->matplotlib.pyplot.imread(buf)
A:matplotlib.tests.test_backend_pgf.(handle,)->ax.plot([0, 1])
matplotlib.tests.test_backend_pgf.compare_figure(fname,savefig_kwargs={},tol=0)
matplotlib.tests.test_backend_pgf.create_figure()
matplotlib.tests.test_backend_pgf.test_bbox_inches()
matplotlib.tests.test_backend_pgf.test_bbox_inches_tight()
matplotlib.tests.test_backend_pgf.test_minus_signs_with_tex(fig_test,fig_ref,texsystem)
matplotlib.tests.test_backend_pgf.test_mixedmode()
matplotlib.tests.test_backend_pgf.test_pathclip()
matplotlib.tests.test_backend_pgf.test_pdf_pages(system)
matplotlib.tests.test_backend_pgf.test_pdf_pages_metadata_check(monkeypatch,system)
matplotlib.tests.test_backend_pgf.test_pdflatex()
matplotlib.tests.test_backend_pgf.test_png_transparency()
matplotlib.tests.test_backend_pgf.test_rcupdate()
matplotlib.tests.test_backend_pgf.test_sketch_params()
matplotlib.tests.test_backend_pgf.test_tex_escape(plain_text,escaped_text)
matplotlib.tests.test_backend_pgf.test_tex_restart_after_error()
matplotlib.tests.test_backend_pgf.test_tex_special_chars(tmp_path)
matplotlib.tests.test_backend_pgf.test_unknown_font(caplog)
matplotlib.tests.test_backend_pgf.test_xelatex()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_rcparams.py----------------------------------------
A:matplotlib.tests.test_rcparams.rc->matplotlib.rc_params_from_file(rcpath, True, False)
A:matplotlib.tests.test_rcparams.expected_repr->"\nRcParams({'font.cursive': ['Apple Chancery',\n                           'Textile',\n                           'Zapf Chancery',\n                           'cursive'],\n          'font.family': ['sans-serif'],\n          'font.size': 12.0,\n          'font.weight': 'normal'})".lstrip()
A:matplotlib.tests.test_rcparams.expected_str->"\nfont.cursive: ['Apple Chancery', 'Textile', 'Zapf Chancery', 'cursive']\nfont.family: ['sans-serif']\nfont.size: 12.0\nfont.weight: normal".lstrip()
A:matplotlib.tests.test_rcparams._copy->matplotlib.rcParams.copy()
A:matplotlib.tests.test_rcparams.param_dict[f'legend.{color_type}color']->param_dict.pop('color')
A:matplotlib.tests.test_rcparams.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_rcparams.leg->ax.legend()
A:matplotlib.tests.test_rcparams.ln->matplotlib.lines.Line2D([1, 2], [1, 2])
A:matplotlib.tests.test_rcparams.title->ax.set_title('Title')
A:matplotlib.tests.test_rcparams.res->validator(arg)
A:matplotlib.tests.test_rcparams.backend->subprocess.check_output([sys.executable, '-c', "import matplotlib as mpl; sentinel = mpl.rcsetup._auto_backend_sentinel; assert mpl.RcParams({'backend': sentinel})['backend'] == sentinel; assert mpl.rcParams._get('backend') == sentinel; import matplotlib.pyplot; print(matplotlib.get_backend())"], env=env, universal_newlines=True)
matplotlib.tests.test_rcparams.generate_validator_testcases(valid)
matplotlib.tests.test_rcparams.test_Bug_2543()
matplotlib.tests.test_rcparams.test_Issue_1713(tmpdir)
matplotlib.tests.test_rcparams.test_RcParams_class()
matplotlib.tests.test_rcparams.test_animation_frame_formats()
matplotlib.tests.test_rcparams.test_axes_titlecolor_rcparams()
matplotlib.tests.test_rcparams.test_backend_fallback_headful(tmpdir)
matplotlib.tests.test_rcparams.test_backend_fallback_headless(tmpdir)
matplotlib.tests.test_rcparams.test_deprecation(monkeypatch)
matplotlib.tests.test_rcparams.test_keymaps()
matplotlib.tests.test_rcparams.test_legend_colors(color_type,param_dict,target)
matplotlib.tests.test_rcparams.test_mec_rcparams()
matplotlib.tests.test_rcparams.test_mfc_rcparams()
matplotlib.tests.test_rcparams.test_no_backend_reset_rccontext()
matplotlib.tests.test_rcparams.test_rcparams(tmpdir)
matplotlib.tests.test_rcparams.test_rcparams_init()
matplotlib.tests.test_rcparams.test_rcparams_legend_loc()
matplotlib.tests.test_rcparams.test_rcparams_reset_after_fail()
matplotlib.tests.test_rcparams.test_rcparams_update()
matplotlib.tests.test_rcparams.test_validate_fontstretch(stretch,parsed_stretch)
matplotlib.tests.test_rcparams.test_validate_fontweight(weight,parsed_weight)
matplotlib.tests.test_rcparams.test_validator_invalid(validator,arg,exception_type)
matplotlib.tests.test_rcparams.test_validator_valid(validator,arg,target)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_webagg.py----------------------------------------
A:matplotlib.tests.test_backend_webagg.env->dict(os.environ)
A:matplotlib.tests.test_backend_webagg.ret->subprocess.call([sys.executable, '-c', test_code], env=env)
matplotlib.tests.test_backend_webagg.test_webagg_core_no_toolbar()
matplotlib.tests.test_backend_webagg.test_webagg_fallback(backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_dates.py----------------------------------------
A:matplotlib.tests.test_dates.base->datetime.datetime(2022, 12, 15, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.timenp->numpy.array(time, dtype='datetime64[ns]')
A:matplotlib.tests.test_dates.data->numpy.array([0.0, 2.0, 1.0])
A:matplotlib.tests.test_dates.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_dates.ax->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_dates.(h,)->matplotlib.pyplot.subplot().plot(data, time)
A:matplotlib.tests.test_dates.(hnp,)->matplotlib.pyplot.subplot().plot(data, timenp)
A:matplotlib.tests.test_dates.time->matplotlib.dates.date2num(datetime.datetime(2011, 1, 1, 0, 0, tzinfo=mdates.UTC))
A:matplotlib.tests.test_dates.tnp->numpy.array([t0, 'NaT'], dtype=dtype)
A:matplotlib.tests.test_dates.nptime->matplotlib.dates.date2num(tnp)
A:matplotlib.tests.test_dates.t0->datetime.datetime(2009, 1, 20)
A:matplotlib.tests.test_dates.tmpl->matplotlib.dates.date2num(np.datetime64('NaT', units))
A:matplotlib.tests.test_dates.dates->numpy.arange('2020-01-10', '2020-05-01', dtype='datetime64[D]')
A:matplotlib.tests.test_dates.npdates->matplotlib.dates.date2num(dates)
A:matplotlib.tests.test_dates.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_dates.tf->datetime.datetime(2009, 1, 31)
A:matplotlib.tests.test_dates.v->matplotlib.pyplot.subplot().xaxis.get_major_locator()()
A:matplotlib.tests.test_dates.rrule->matplotlib.dates.rrulewrapper(dateutil.rrule.SECONDLY, interval=5)
A:matplotlib.tests.test_dates.locator->matplotlib.dates.AutoDateLocator()
A:matplotlib.tests.test_dates.loc->matplotlib.dates.RRuleLocator(rrule)
A:matplotlib.tests.test_dates.x1->datetime.datetime(year=1, month=1, day=1, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.y1->datetime.datetime(year=1, month=1, day=16, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.d1->datetime.datetime(1990, 1, 1)
A:matplotlib.tests.test_dates.d2->datetime.datetime(year=2020, month=1, day=1, microsecond=1)
A:matplotlib.tests.test_dates.decoy_loc->matplotlib.dates.MinuteLocator((12, 27))
A:matplotlib.tests.test_dates.formatter->matplotlib.dates.DateFormatter('%Y-%b-%d %H:%M')
A:matplotlib.tests.test_dates.start->datetime.datetime(2011, 1, 1, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.end->datetime.datetime(2011, 1, 2, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.delta->datetime.timedelta(hours=4)
A:matplotlib.tests.test_dates.daterange->matplotlib.dates.drange(start, end, delta)
A:matplotlib.tests.test_dates.strings->_create_auto_date_locator(d1, d2)
A:matplotlib.tests.test_dates.ax.xaxis.converterconv->matplotlib.dates.ConciseDateConverter()
A:matplotlib.tests.test_dates.new_tz->datetime.timezone(datetime.timedelta(hours=3))
A:matplotlib.tests.test_dates.(strings, offset)->_create_auto_date_locator(d1, d2, new_tz)
A:matplotlib.tests.test_dates.tz->pytest.importorskip('pytz').timezone('America/New_York')
A:matplotlib.tests.test_dates.st->list(map(str, mdates.num2date(locator(), tz=tz)))
A:matplotlib.tests.test_dates.BRUSSELS->dateutil.tz.gettz('Europe/Brussels')
A:matplotlib.tests.test_dates.dtstart->datetime.datetime(2017, 4, 1, 0)
A:matplotlib.tests.test_dates.interval->datetime.timedelta(minutes=33, seconds=45)
A:matplotlib.tests.test_dates.dt_utc->date_range(start=dtstart, freq=interval, periods=N)
A:matplotlib.tests.test_dates.dt_bxl->tz_convert(dt_utc, BRUSSELS)
A:matplotlib.tests.test_dates.actual_ordinalf->list(mdates.date2num(dt_bxl))
A:matplotlib.tests.test_dates.r->self.mk_tzaware(r)
A:matplotlib.tests.test_dates.tzinfo->getattr(r, 'tzinfo', None)
A:matplotlib.tests.test_dates.localizer->getattr(tzinfo, 'normalize', None)
A:matplotlib.tests.test_dates.dt->datetime.date(year=2022, month=1, day=10)
A:matplotlib.tests.test_dates.val->getattr(datetime_obj, attr, None)
A:matplotlib.tests.test_dates.SYD->dateutil.tz.gettz('Australia/Sydney')
A:matplotlib.tests.test_dates.dtend->datetime.datetime(2017, 4, 4, 0)
A:matplotlib.tests.test_dates.rule->matplotlib.dates.rrulewrapper(freq=dateutil.rrule.DAILY, dtstart=dtstart, tzinfo=SYD, until=dtend)
A:matplotlib.tests.test_dates.act->matplotlib.dates.rrulewrapper(freq=dateutil.rrule.DAILY, dtstart=dtstart, tzinfo=SYD, until=dtend).between(dtstart, dtend)
A:matplotlib.tests.test_dates.pytz->pytest.importorskip('pytz')
A:matplotlib.tests.test_dates.t->numpy.array([733408.208333, 733773.208333, 734138.208333, 734503.208333, 734869.208333, 735234.208333, 735599.208333])
A:matplotlib.tests.test_dates.dn->matplotlib.dates.date2num(dt)
A:matplotlib.tests.test_dates.date->numpy.datetime64('2000-01-01')
A:matplotlib.tests.test_dates.locs->locator()
A:matplotlib.tests.test_dates.iceland_tz->dateutil.tz.gettz(tz_str)
A:matplotlib.tests.test_dates.(locator, _)->matplotlib.dates.date_ticker_factory(span)
A:matplotlib.tests.test_dates.x->numpy.array([datetime.datetime(2017, 1, n) for n in range(1, 6)])
A:matplotlib.tests.test_dates.y->numpy.array([1, 2, 3, 4, 5])
A:matplotlib.tests.test_dates.m->numpy.ma.masked_greater(y, 0)
matplotlib.tests.test_dates._new_epoch_decorator(thefunc)
matplotlib.tests.test_dates._test_date2num_dst(date_range,tz_convert)
matplotlib.tests.test_dates._test_rrulewrapper(attach_tz,get_tz)
matplotlib.tests.test_dates.test_DateFormatter()
matplotlib.tests.test_dates.test_DateFormatter_settz()
matplotlib.tests.test_dates.test_DateLocator()
matplotlib.tests.test_dates.test_DayLocator()
matplotlib.tests.test_dates.test_RRuleLocator()
matplotlib.tests.test_dates.test_RRuleLocator_close_minmax()
matplotlib.tests.test_dates.test_RRuleLocator_dayrange()
matplotlib.tests.test_dates.test_YearLocator()
matplotlib.tests.test_dates.test_auto_date_locator()
matplotlib.tests.test_dates.test_auto_date_locator_intmult()
matplotlib.tests.test_dates.test_auto_date_locator_intmult_tz()
matplotlib.tests.test_dates.test_axhline()
matplotlib.tests.test_dates.test_change_converter()
matplotlib.tests.test_dates.test_change_epoch()
matplotlib.tests.test_dates.test_change_interval_multiples()
matplotlib.tests.test_dates.test_concise_converter_stays()
matplotlib.tests.test_dates.test_concise_formatter()
matplotlib.tests.test_dates.test_concise_formatter_call()
matplotlib.tests.test_dates.test_concise_formatter_exceptions(kwarg)
matplotlib.tests.test_dates.test_concise_formatter_formats()
matplotlib.tests.test_dates.test_concise_formatter_show_offset(t_delta,expected)
matplotlib.tests.test_dates.test_concise_formatter_subsecond()
matplotlib.tests.test_dates.test_concise_formatter_tz()
matplotlib.tests.test_dates.test_concise_formatter_usetex(t_delta,expected)
matplotlib.tests.test_dates.test_concise_formatter_zformats()
matplotlib.tests.test_dates.test_date2num_NaT(dtype)
matplotlib.tests.test_dates.test_date2num_NaT_scalar(units)
matplotlib.tests.test_dates.test_date2num_dst()
matplotlib.tests.test_dates.test_date2num_dst_pandas(pd)
matplotlib.tests.test_dates.test_date2num_masked()
matplotlib.tests.test_dates.test_date_axhline()
matplotlib.tests.test_dates.test_date_axhspan()
matplotlib.tests.test_dates.test_date_axvline()
matplotlib.tests.test_dates.test_date_axvspan()
matplotlib.tests.test_dates.test_date_date2num_numpy(t0,dtype)
matplotlib.tests.test_dates.test_date_empty()
matplotlib.tests.test_dates.test_date_formatter_callable()
matplotlib.tests.test_dates.test_date_formatter_usetex(delta,expected)
matplotlib.tests.test_dates.test_date_inverted_limit()
matplotlib.tests.test_dates.test_date_not_empty()
matplotlib.tests.test_dates.test_date_numpyx()
matplotlib.tests.test_dates.test_date_ticker_factory(span,expected_locator)
matplotlib.tests.test_dates.test_datestr2num()
matplotlib.tests.test_dates.test_datetime64_in_list()
matplotlib.tests.test_dates.test_datetime_masked()
matplotlib.tests.test_dates.test_drange()
matplotlib.tests.test_dates.test_julian2num()
matplotlib.tests.test_dates.test_locator_set_formatter()
matplotlib.tests.test_dates.test_num2date_error(val)
matplotlib.tests.test_dates.test_num2date_roundoff()
matplotlib.tests.test_dates.test_num2timedelta(x,tdelta)
matplotlib.tests.test_dates.test_offset_changes()
matplotlib.tests.test_dates.test_rrulewrapper()
matplotlib.tests.test_dates.test_rrulewrapper_pytz()
matplotlib.tests.test_dates.test_too_many_date_ticks(caplog)
matplotlib.tests.test_dates.test_tz_utc()
matplotlib.tests.test_dates.test_warn_notintervals()
matplotlib.tests.test_dates.test_yearlocator_pytz()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_skew.py----------------------------------------
A:matplotlib.tests.test_skew.needs_lower->matplotlib.transforms.interval_contains(self.axes.lower_xlim, self.get_loc())
A:matplotlib.tests.test_skew.needs_upper->matplotlib.transforms.interval_contains(self.axes.upper_xlim, self.get_loc())
A:matplotlib.tests.test_skew.self.xaxis->SkewXAxis(self)
A:matplotlib.tests.test_skew.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.tests.test_skew.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_skew.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1, projection='skewx')
A:matplotlib.tests.test_skew.(fix, axes)->matplotlib.pyplot.subplots(5, 5, sharex=True, sharey=True, figsize=(8, 8))
A:matplotlib.tests.test_skew.rotations->list(itertools.product([-3, -1, 0, 1, 3], repeat=2))
A:matplotlib.tests.test_skew.t->matplotlib.transforms.Affine2D().skew_deg(xdeg, ydeg)
matplotlib.tests.test_skew.SkewSpine(mspines.Spine)
matplotlib.tests.test_skew.SkewSpine._adjust_location(self)
matplotlib.tests.test_skew.SkewXAxes(Axes)
matplotlib.tests.test_skew.SkewXAxes._gen_axes_spines(self)
matplotlib.tests.test_skew.SkewXAxes._init_axis(self)
matplotlib.tests.test_skew.SkewXAxes._set_lim_and_transforms(self)
matplotlib.tests.test_skew.SkewXAxes.lower_xlim(self)
matplotlib.tests.test_skew.SkewXAxes.upper_xlim(self)
matplotlib.tests.test_skew.SkewXAxis(maxis.XAxis)
matplotlib.tests.test_skew.SkewXAxis._get_tick(self,major)
matplotlib.tests.test_skew.SkewXAxis.get_view_interval(self)
matplotlib.tests.test_skew.SkewXTick(maxis.XTick)
matplotlib.tests.test_skew.SkewXTick.draw(self,renderer)
matplotlib.tests.test_skew.SkewXTick.get_view_interval(self)
matplotlib.tests.test_skew.test_set_line_coll_dash_image()
matplotlib.tests.test_skew.test_skew_rectangle()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_mathtext.py----------------------------------------
A:matplotlib.tests.test_mathtext.wrapper->''.join([' '.join(fonts), ' $', *('\\%s{' % font for font in fonts), '%s', *('}' for font in fonts), '$'])
A:matplotlib.tests.test_mathtext.fig->matplotlib.pyplot.figure(figsize=(10, 3))
A:matplotlib.tests.test_mathtext.fontpath->matplotlib.font_manager.findfont('DejaVu Sans')
A:matplotlib.tests.test_mathtext.font->matplotlib.ft2font.FT2Font(fontpath)
A:matplotlib.tests.test_mathtext.table->matplotlib.ft2font.FT2Font(fontpath).get_sfnt_table('head')
A:matplotlib.tests.test_mathtext.parser->matplotlib.mathtext.MathTextParser('agg')
A:matplotlib.tests.test_mathtext.t->numpy.asarray(fig.canvas.renderer.buffer_rgba())
A:matplotlib.tests.test_mathtext.thickness->matplotlib._mathtext.TruetypeFonts.get_underline_thickness(None, None, fontsize=mpl.rcParams['font.size'], dpi=mpl.rcParams['savefig.dpi'])
A:matplotlib.tests.test_mathtext.buff->io.BytesIO()
A:matplotlib.tests.test_mathtext.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_mathtext.tspans->xml.etree.ElementTree.fromstring(buff.getvalue()).findall('.//{http://www.w3.org/2000/svg}tspan[@style]')
A:matplotlib.tests.test_mathtext.text1->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.1, 0.1, test_str, math_fontfamily='dejavusans', font='Arial')
A:matplotlib.tests.test_mathtext.prop1->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.1, 0.1, test_str, math_fontfamily='dejavusans', font='Arial').get_fontproperties()
A:matplotlib.tests.test_mathtext.text2->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.2, 0.2, test_str, math_fontfamily='dejavusans', fontproperties='Arial')
A:matplotlib.tests.test_mathtext.prop2->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.2, 0.2, test_str, math_fontfamily='dejavusans', fontproperties='Arial').get_fontproperties()
A:matplotlib.tests.test_mathtext.text3->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.3, 0.3, test_str, font='Arial', math_fontfamily='dejavusans')
A:matplotlib.tests.test_mathtext.prop3->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.3, 0.3, test_str, font='Arial', math_fontfamily='dejavusans').get_fontproperties()
A:matplotlib.tests.test_mathtext.text4->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.4, 0.4, test_str, fontproperties='Arial', math_fontfamily='dejavusans')
A:matplotlib.tests.test_mathtext.prop4->matplotlib.pyplot.figure(figsize=(10, 3)).text(0.4, 0.4, test_str, fontproperties='Arial', math_fontfamily='dejavusans').get_fontproperties()
matplotlib.tests.test_mathtext.baseline_images(request,fontset,index,text)
matplotlib.tests.test_mathtext.test_argument_order()
matplotlib.tests.test_mathtext.test_default_math_fontfamily()
matplotlib.tests.test_mathtext.test_fontinfo()
matplotlib.tests.test_mathtext.test_genfrac_displaystyle(fig_test,fig_ref)
matplotlib.tests.test_mathtext.test_get_unicode_index_exception()
matplotlib.tests.test_mathtext.test_inverted_delimiters(fig_test,fig_ref)
matplotlib.tests.test_mathtext.test_math_fontfamily()
matplotlib.tests.test_mathtext.test_math_to_image(tmpdir)
matplotlib.tests.test_mathtext.test_mathfont_rendering(baseline_images,fontset,index,text)
matplotlib.tests.test_mathtext.test_mathtext_cmr10_minus_sign()
matplotlib.tests.test_mathtext.test_mathtext_exceptions(math,msg)
matplotlib.tests.test_mathtext.test_mathtext_fallback(fallback,fontlist)
matplotlib.tests.test_mathtext.test_mathtext_fallback_invalid()
matplotlib.tests.test_mathtext.test_mathtext_fallback_valid()
matplotlib.tests.test_mathtext.test_mathtext_rendering(baseline_images,fontset,index,text)
matplotlib.tests.test_mathtext.test_mathtext_rendering_lightweight(baseline_images,fontset,index,text)
matplotlib.tests.test_mathtext.test_mathtext_rendering_svgastext(baseline_images,fontset,index,text)
matplotlib.tests.test_mathtext.test_operator_space(fig_test,fig_ref)
matplotlib.tests.test_mathtext.test_short_long_accents(fig_test,fig_ref)
matplotlib.tests.test_mathtext.test_single_minus_sign()
matplotlib.tests.test_mathtext.test_spaces(fig_test,fig_ref)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_legend.py----------------------------------------
A:matplotlib.tests.test_legend.X->numpy.random.randn(10)
A:matplotlib.tests.test_legend.Y->numpy.random.randn(10)
A:matplotlib.tests.test_legend.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_legend.(handles, labels)->subfig.subplots().get_legend_handles_labels()
A:matplotlib.tests.test_legend.legend->subfig.subplots().legend(lines, labels)
A:matplotlib.tests.test_legend.x->numpy.linspace(0, 30, 1000)
A:matplotlib.tests.test_legend.b1->subfig.subplots().bar(x, x, align='edge', color='m')
A:matplotlib.tests.test_legend.b2->subfig.subplots().bar(x, x[::-1], align='edge', color='g')
A:matplotlib.tests.test_legend.(fig, axs)->matplotlib.pyplot.subplots(constrained_layout=True, dpi=100)
A:matplotlib.tests.test_legend.leg->matplotlib.pyplot.figure().subfigures().legend()
A:matplotlib.tests.test_legend.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_legend.ax->matplotlib.pyplot.figure().subfigures().subplots()
A:matplotlib.tests.test_legend.(line,)->matplotlib.pyplot.figure().subfigures().subplots().plot([0, 1], label='_foo')
A:matplotlib.tests.test_legend.(p1,)->host_subplot(111).plot([0, 1, 2], [0, 1, 2], label='Density')
A:matplotlib.tests.test_legend.(p2,)->host.twinx().plot([0, 1, 2], [0, 3, 2], label='Temperature')
A:matplotlib.tests.test_legend.(p3,)->matplotlib.pyplot.figure().subfigures().subplots().plot([3, 4, 5], '-d')
A:matplotlib.tests.test_legend.l1->matplotlib.pyplot.figure().subfigures().subplots().legend(loc='upper left', mode=mode)
A:matplotlib.tests.test_legend.l2->matplotlib.pyplot.figure().subfigures().subplots().legend(loc='right', mode=mode)
A:matplotlib.tests.test_legend.patch->matplotlib.pyplot.Rectangle((0.33, 0.4), 0.3, 0.3, hatch='||', fill=False, edgecolor='C1', label='Patch\nexplicit color\nunfilled')
A:matplotlib.tests.test_legend.lines->axs[0].plot(range(10))
A:matplotlib.tests.test_legend.(ln1,)->matplotlib.pyplot.figure().subfigures().subplots().plot(x, x)
A:matplotlib.tests.test_legend.(ln2,)->matplotlib.pyplot.figure().subfigures().subplots().plot(x, 2 * x)
A:matplotlib.tests.test_legend.(ln3,)->matplotlib.pyplot.figure().subfigures().subplots().plot(x, 3 * x, label='3x')
A:matplotlib.tests.test_legend.th->numpy.linspace(0, 2 * np.pi, 1024)
A:matplotlib.tests.test_legend.(lns,)->matplotlib.pyplot.figure().subfigures().subplots().plot(th, np.sin(th), label='sin')
A:matplotlib.tests.test_legend.(lnc,)->matplotlib.pyplot.figure().subfigures().subplots().plot(th, np.cos(th), label='cos')
A:matplotlib.tests.test_legend.host->host_subplot(111)
A:matplotlib.tests.test_legend.par->host_subplot(111).twinx()
A:matplotlib.tests.test_legend.lines2->axs[1].plot(np.arange(10) * 2.0)
A:matplotlib.tests.test_legend.(fig2, ax2)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_legend.brs->matplotlib.pyplot.figure().subfigures().subplots().bar(range(3), range(3))
A:matplotlib.tests.test_legend.h->matplotlib.pyplot.figure().subfigures().subplots().scatter([np.nan], [np.nan], marker='o', facecolor='r', edgecolor='r', s=3)
A:matplotlib.tests.test_legend.(x, y)->numpy.random.rand(2, n)
A:matplotlib.tests.test_legend.(hand, lab)->matplotlib.legend._get_legend_handles_labels([ax])
A:matplotlib.tests.test_legend.offset->matplotlib.transforms.Affine2D().translate(-20, 20)
A:matplotlib.tests.test_legend.lc1->matplotlib.collections.LineCollection(lines1, linestyles='--', lw=3)
A:matplotlib.tests.test_legend.lc2->matplotlib.collections.LineCollection(lines2, linestyles='-.')
A:matplotlib.tests.test_legend.lc3->matplotlib.collections.LineCollection(lines3, linestyles=':', lw=0.5)
A:matplotlib.tests.test_legend.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_legend.leg2->axes[2].legend(title='Aardvark', title_fontproperties={'family': 'serif'})
A:matplotlib.tests.test_legend.(fig, axes)->matplotlib.pyplot.subplots(2, 3, figsize=(10, 6))
A:matplotlib.tests.test_legend.leg0->axes[0].legend(title='Aardvark', title_fontsize=22)
A:matplotlib.tests.test_legend.leg1->axes[1].legend(title='Aardvark', title_fontproperties={'family': 'serif', 'size': 22})
A:matplotlib.tests.test_legend.leg3->axes[3].legend(title='Aardvark')
A:matplotlib.tests.test_legend.leg4->axes[4].legend(title='Aardvark', title_fontproperties={'family': 'serif'})
A:matplotlib.tests.test_legend.leg5->axes[5].legend(title='Aardvark')
A:matplotlib.tests.test_legend.colors->numpy.random.default_rng().choice(['r', 'g', 'b'], 10)
A:matplotlib.tests.test_legend.(text,)->matplotlib.pyplot.figure().subfigures().legend().get_texts()
A:matplotlib.tests.test_legend.edgecolors->matplotlib.cm.viridis(np.random.rand(10))
A:matplotlib.tests.test_legend.facecolors->matplotlib.cm.viridis(np.random.rand(10))
A:matplotlib.tests.test_legend.(x, n, hh)->matplotlib.pyplot.hist([1, 2, 3], alpha=0.25, label='data', color='red')
A:matplotlib.tests.test_legend.subfig->matplotlib.pyplot.figure().subfigures()
A:matplotlib.tests.test_legend.pc->matplotlib.pyplot.fill_between([0, 1], [2, 3], color='#123456', label='label')
matplotlib.tests.test_legend.TestLegendFigureFunction
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_handle_label(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_kw_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_arg(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_three_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_three_args_pluskw(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_no_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_warn_args_kwargs(self)
matplotlib.tests.test_legend.TestLegendFunction
matplotlib.tests.test_legend.TestLegendFunction.test_legend_handler_map(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_kwargs_handles_labels(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_kwargs_handles_only(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_kwargs_labels_only(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_no_args(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_positional_handles_labels(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_positional_handles_only(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_positional_labels_only(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_three_args(self)
matplotlib.tests.test_legend.TestLegendFunction.test_parasite(self)
matplotlib.tests.test_legend.TestLegendFunction.test_warn_mixed_args_and_kwargs(self)
matplotlib.tests.test_legend.test_alpha_handles()
matplotlib.tests.test_legend.test_alpha_rcparam()
matplotlib.tests.test_legend.test_alpha_rgba()
matplotlib.tests.test_legend.test_cross_figure_patch_legend()
matplotlib.tests.test_legend.test_empty_bar_chart_with_legend()
matplotlib.tests.test_legend.test_fancy()
matplotlib.tests.test_legend.test_figure_legend_outside()
matplotlib.tests.test_legend.test_framealpha()
matplotlib.tests.test_legend.test_get_set_draggable()
matplotlib.tests.test_legend.test_handler_numpoints()
matplotlib.tests.test_legend.test_handlerline2d()
matplotlib.tests.test_legend.test_hatching()
matplotlib.tests.test_legend.test_labels_first()
matplotlib.tests.test_legend.test_legend_alignment(alignment)
matplotlib.tests.test_legend.test_legend_auto1()
matplotlib.tests.test_legend.test_legend_auto2()
matplotlib.tests.test_legend.test_legend_auto3()
matplotlib.tests.test_legend.test_legend_auto4()
matplotlib.tests.test_legend.test_legend_auto5()
matplotlib.tests.test_legend.test_legend_draggable(draggable)
matplotlib.tests.test_legend.test_legend_expand()
matplotlib.tests.test_legend.test_legend_face_edgecolor()
matplotlib.tests.test_legend.test_legend_label_with_leading_underscore()
matplotlib.tests.test_legend.test_legend_labelcolor_linecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_list()
matplotlib.tests.test_legend.test_legend_labelcolor_markeredgecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_markerfacecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_linecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_markeredgecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_markeredgecolor_short()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_markerfacecolor()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_markerfacecolor_short()
matplotlib.tests.test_legend.test_legend_labelcolor_rcparam_single(color)
matplotlib.tests.test_legend.test_legend_labelcolor_single(color)
matplotlib.tests.test_legend.test_legend_markers_from_line2d()
matplotlib.tests.test_legend.test_legend_ordereddict()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_linecolor()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_linecolor_cmap()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_linecolor_iterable()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markeredgecolor()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markeredgecolor_cmap()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markeredgecolor_iterable()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markerfacecolor()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markerfacecolor_iterable()
matplotlib.tests.test_legend.test_legend_pathcollection_labelcolor_markfacecolor_cmap()
matplotlib.tests.test_legend.test_legend_proper_window_extent()
matplotlib.tests.test_legend.test_legend_remove()
matplotlib.tests.test_legend.test_legend_repeatcheckok()
matplotlib.tests.test_legend.test_legend_set_alignment(alignment)
matplotlib.tests.test_legend.test_legend_stackplot()
matplotlib.tests.test_legend.test_legend_text_axes()
matplotlib.tests.test_legend.test_legend_title_empty()
matplotlib.tests.test_legend.test_legend_title_fontprop_fontsize()
matplotlib.tests.test_legend.test_linecollection_scaled_dashes()
matplotlib.tests.test_legend.test_multiple_keys()
matplotlib.tests.test_legend.test_nanscatter()
matplotlib.tests.test_legend.test_ncol_ncols(fig_test,fig_ref)
matplotlib.tests.test_legend.test_no_warn_big_data_when_loc_specified()
matplotlib.tests.test_legend.test_not_covering_scatter()
matplotlib.tests.test_legend.test_not_covering_scatter_transform()
matplotlib.tests.test_legend.test_plot_multiple_input_multiple_label(label_array)
matplotlib.tests.test_legend.test_plot_multiple_input_single_label(label)
matplotlib.tests.test_legend.test_plot_multiple_label_incorrect_length_exception()
matplotlib.tests.test_legend.test_plot_single_input_multiple_label(label_array)
matplotlib.tests.test_legend.test_rc()
matplotlib.tests.test_legend.test_reverse_legend_display(fig_test,fig_ref)
matplotlib.tests.test_legend.test_reverse_legend_handles_and_labels()
matplotlib.tests.test_legend.test_setting_alpha_keeps_polycollection_color()
matplotlib.tests.test_legend.test_shadow_framealpha()
matplotlib.tests.test_legend.test_subfigure_legend()
matplotlib.tests.test_legend.test_text_nohandler_warning()
matplotlib.tests.test_legend.test_usetex_no_warn(caplog)
matplotlib.tests.test_legend.test_various_labels()
matplotlib.tests.test_legend.test_warn_big_data_best_loc()
matplotlib.tests.test_legend.test_window_extent_cached_renderer()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_agg.py----------------------------------------
A:matplotlib.tests.test_agg.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_agg.buf->io.BytesIO()
A:matplotlib.tests.test_agg.buff->io.BytesIO()
A:matplotlib.tests.test_agg.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_agg.collection->matplotlib.collections.PathCollection([Path([[-10, 5], [10, 5], [10, -5], [-10, -5], [-10, 5]])])
A:matplotlib.tests.test_agg.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_agg.data->numpy.arange(steps)
A:matplotlib.tests.test_agg.ax->matplotlib.pyplot.figure().subplots()
A:matplotlib.tests.test_agg.points->numpy.ones(100000)
A:matplotlib.tests.test_agg.w->numpy.hanning(window_len)
A:matplotlib.tests.test_agg.y->numpy.convolve(w / w.sum(), s, mode='same')
A:matplotlib.tests.test_agg.A->numpy.apply_along_axis(smooth1d, 1, A, window_len)
A:matplotlib.tests.test_agg.pad->self.get_pad(dpi)
A:matplotlib.tests.test_agg.padded_src->numpy.pad(im, [(pad, pad), (pad, pad), (0, 0)], 'constant')
A:matplotlib.tests.test_agg.tgt_image->numpy.empty_like(padded_src)
A:matplotlib.tests.test_agg.a1->numpy.roll(padded_src, int(ox / 72 * dpi), axis=1)
A:matplotlib.tests.test_agg.a2->numpy.roll(a1, -int(oy / 72 * dpi), axis=0)
A:matplotlib.tests.test_agg.tgt_image[:, :, 3]->smooth2d(padded_src[:, :, 3] * self.alpha, self.sigma / 72 * dpi)
A:matplotlib.tests.test_agg.self.gauss_filter->GaussianFilter(sigma, alpha, color)
A:matplotlib.tests.test_agg.self.offset_filter->OffsetFilter(offsets)
A:matplotlib.tests.test_agg.t1->self.gauss_filter.process_image(padded_src, dpi)
A:matplotlib.tests.test_agg.t2->self.offset_filter.process_image(t1, dpi)
A:matplotlib.tests.test_agg.(line1,)->matplotlib.pyplot.figure().subplots().plot([0.1, 0.5, 0.9], [0.1, 0.9, 0.5], 'bo-', mec='b', mfc='w', lw=5, mew=3, ms=10, label='Line 1')
A:matplotlib.tests.test_agg.(line2,)->matplotlib.pyplot.figure().subplots().plot([0.1, 0.5, 0.9], [0.5, 0.2, 0.7], 'ro-', mec='r', mfc='w', lw=5, mew=3, ms=10, label='Line 1')
A:matplotlib.tests.test_agg.gauss->DropShadowFilter(4)
A:matplotlib.tests.test_agg.xx->line.get_xdata()
A:matplotlib.tests.test_agg.yy->line.get_ydata()
A:matplotlib.tests.test_agg.(shadow,)->matplotlib.pyplot.figure().subplots().plot(xx, yy)
A:matplotlib.tests.test_agg.transform->matplotlib.transforms.offset_copy(line.get_transform(), ax.figure, x=4.0, y=-6.0, units='points')
A:matplotlib.tests.test_agg.x->numpy.linspace(0, w, N)
A:matplotlib.tests.test_agg.im->PIL.Image.open(buf)
A:matplotlib.tests.test_agg.pnginfo->PngInfo()
A:matplotlib.tests.test_agg.buf_small->io.BytesIO()
A:matplotlib.tests.test_agg.buf_large->io.BytesIO()
A:matplotlib.tests.test_agg.path->Path(np.vstack((x, y)).T)
A:matplotlib.tests.test_agg.ra->RendererAgg(w, h, dpi)
A:matplotlib.tests.test_agg.gc->RendererAgg(w, h, dpi).new_gc()
matplotlib.tests.test_agg.test_agg_filter()
matplotlib.tests.test_agg.test_chunksize()
matplotlib.tests.test_agg.test_chunksize_fails()
matplotlib.tests.test_agg.test_draw_path_collection_error_handling()
matplotlib.tests.test_agg.test_jpeg_dpi()
matplotlib.tests.test_agg.test_large_single_path_collection()
matplotlib.tests.test_agg.test_long_path()
matplotlib.tests.test_agg.test_marker_with_nan()
matplotlib.tests.test_agg.test_non_tuple_rgbaface()
matplotlib.tests.test_agg.test_pil_kwargs_png()
matplotlib.tests.test_agg.test_pil_kwargs_tiff()
matplotlib.tests.test_agg.test_pil_kwargs_webp()
matplotlib.tests.test_agg.test_repeated_save_with_alpha()
matplotlib.tests.test_agg.test_too_large_image()
matplotlib.tests.test_agg.test_webp_alpha()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_patches.py----------------------------------------
A:matplotlib.tests.test_patches.p->matplotlib.patches.Rectangle((5 * U.km, 6 * U.km), 1 * U.km, 2 * U.km)
A:matplotlib.tests.test_patches.rect->matplotlib.patches.Rectangle(xy=xy, width=0.5, height=0.5)
A:matplotlib.tests.test_patches.t->matplotlib.transforms.Affine2D().rotate_around(*loc, np.deg2rad(theta))
A:matplotlib.tests.test_patches.corners_rot->matplotlib.transforms.Affine2D().rotate_around(*loc, np.deg2rad(theta)).transform(corners)
A:matplotlib.tests.test_patches.ellipse->Ellipse(loc, width, height)
A:matplotlib.tests.test_patches.loc->numpy.asarray([1.0, 2.0])
A:matplotlib.tests.test_patches.rect1->Rectangle(loc, width, height, angle=angle)
A:matplotlib.tests.test_patches.rect2->Rectangle(loc, width, height)
A:matplotlib.tests.test_patches.rotation_matrix->numpy.array([[np.cos(angle_rad), -np.sin(angle_rad)], [np.sin(angle_rad), np.cos(angle_rad)]])
A:matplotlib.tests.test_patches.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_patches.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_patches.rect_ref->Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))
A:matplotlib.tests.test_patches.rect_test->Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))
A:matplotlib.tests.test_patches.rect_ref2->Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(0, [0, 6, 6, 0]))
A:matplotlib.tests.test_patches.rect_test2->Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))
A:matplotlib.tests.test_patches.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_patches.path->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx').get_path()
A:matplotlib.tests.test_patches.path2->matplotlib.path.Path.unit_circle().deepcopy()
A:matplotlib.tests.test_patches.combined->matplotlib.path.Path.make_compound_path(path, path2)
A:matplotlib.tests.test_patches.patch->Patch()
A:matplotlib.tests.test_patches.bbox->matplotlib.transforms.Bbox([[-12, -77.5], [50, -110]])
A:matplotlib.tests.test_patches.result_path->matplotlib.path.Path.make_compound_path(path, path2).clip_to_bbox(bbox)
A:matplotlib.tests.test_patches.result_patch->matplotlib.patches.PathPatch(result_path, alpha=0.5, facecolor='green', lw=4, edgecolor='black')
A:matplotlib.tests.test_patches.star->matplotlib.path.Path(verts + i, codes)
A:matplotlib.tests.test_patches.circle->matplotlib.path.Path.unit_circle()
A:matplotlib.tests.test_patches.verts->numpy.concatenate([circle.vertices, star.vertices[::-1]])
A:matplotlib.tests.test_patches.codes->numpy.concatenate([circle.codes, star.codes])
A:matplotlib.tests.test_patches.cut_star1->matplotlib.path.Path(verts, codes)
A:matplotlib.tests.test_patches.cut_star2->matplotlib.path.Path(verts + 1, codes)
A:matplotlib.tests.test_patches.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_patches.col->matplotlib.collections.PatchCollection(patches=[arc2], facecolors='none', edgecolors='k')
A:matplotlib.tests.test_patches.c->matplotlib.pyplot.Circle((0, 0), 1, facecolor='none', alpha=1)
A:matplotlib.tests.test_patches.w->matplotlib.patches.Wedge(**init_args)
A:matplotlib.tests.test_patches.wedge->matplotlib.patches.Wedge((x * 3, y * 3), 1, theta1, theta2, facecolor='none', edgecolor='k', lw=3)
A:matplotlib.tests.test_patches.s->matplotlib.patches.Shadow(p, 1, 1)
A:matplotlib.tests.test_patches.rects->matplotlib.pyplot.axes().bar(range(5), range(1, 6))
A:matplotlib.tests.test_patches.r->Rectangle((i - 0.8 / 2, 5), 0.8, 1, hatch='//', fc='none')
A:matplotlib.tests.test_patches.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_patches.con->matplotlib.patches.ConnectionPatch(xyA=(0.3, 0.2), coordsA='data', axesA=ax1, xyB=(bb.width - 30, bb.height - 20), coordsB='figure pixels', arrowstyle='->', shrinkB=5)
A:matplotlib.tests.test_patches.coordsB->ax2.get_yaxis_transform()
A:matplotlib.tests.test_patches.(ax1, ax2)->fig_ref.subplots(1, 2)
A:matplotlib.tests.test_patches.start->datetime(2017, 1, 1, 0, 0, 0)
A:matplotlib.tests.test_patches.delta->timedelta(seconds=16)
A:matplotlib.tests.test_patches.dt_delta->datetime(1970, 1, 5)
A:matplotlib.tests.test_patches.ell->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx')
A:matplotlib.tests.test_patches.transform->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx').get_transform()
A:matplotlib.tests.test_patches.radius->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx')._process_radius(None)
A:matplotlib.tests.test_patches.expected->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx').get_path().contains_points(points, transform, radius)
A:matplotlib.tests.test_patches.result->Annulus((0.0, 0.0), (1, 2), 0.1, 0, fc='m', ec='b', alpha=0.5, hatch='xxx').contains_points(points)
A:matplotlib.tests.test_patches.xy->numpy.array([0.2, 0.3])
A:matplotlib.tests.test_patches.dxy->numpy.array([0.1, 0.2])
A:matplotlib.tests.test_patches.a1->fig_test.subplots()
A:matplotlib.tests.test_patches.shadow->matplotlib.patches.Rectangle(xy=xy + fig_ref.dpi / 72 * dxy, width=0.5, height=0.5, fc=np.asarray(mcolors.to_rgb(rect.get_facecolor())) * 0.3, ec=np.asarray(mcolors.to_rgb(rect.get_facecolor())) * 0.3, alpha=0.5)
A:matplotlib.tests.test_patches.a2->fig_ref.subplots()
A:matplotlib.tests.test_patches.dtime->datetime(2000, 1, 1)
A:matplotlib.tests.test_patches.arrow->matplotlib.pyplot.axes().arrow(0, 0, 10, 10, head_length=5, head_width=1, width=0.5)
A:matplotlib.tests.test_patches.expected1->numpy.array([[13.54, 13.54], [10.35, 9.65], [10.18, 9.82], [0.18, -0.18], [-0.18, 0.18], [9.82, 10.18], [9.65, 10.35], [13.54, 13.54]])
A:matplotlib.tests.test_patches.expected2->numpy.array([[16.71, 16.71], [16.71, 15.29], [16.71, 15.29], [1.71, 0.29], [0.29, 1.71], [15.29, 16.71], [15.29, 16.71], [16.71, 16.71]])
A:matplotlib.tests.test_patches.a->Arc((x_sign * scale * prescale, y_sign * scale * prescale), scale * sx, scale * sy, lw=4, color=f'C{j}', zorder=1 + j, angle=np.rad2deg(np.arctan2(y_sign, x_sign)) % 360, label=f'big {j}', gid=f'big {j}')
A:matplotlib.tests.test_patches.(fig, ax_arr)->matplotlib.pyplot.subplots(2, 2, squeeze=False, figsize=(10, 10))
A:matplotlib.tests.test_patches.cir->Annulus((0.0, 0.0), 0.2, 0.01, fc='g')
A:matplotlib.tests.test_patches.poly->Polygon(np.zeros((0, 2)))
A:matplotlib.tests.test_patches.(fig, axs)->matplotlib.pyplot.subplots(1, 3, figsize=(4, 1))
A:matplotlib.tests.test_patches.arc1->Arc([0.5, 0.5], 0.5, 1, theta1=0, theta2=60, angle=20)
A:matplotlib.tests.test_patches.arc2->Arc([0.5, 0.5], 1.5, 1, theta1=0, theta2=60, angle=10)
matplotlib.tests.test_patches.test_Polygon_close()
matplotlib.tests.test_patches.test_annulus()
matplotlib.tests.test_patches.test_annulus_setters()
matplotlib.tests.test_patches.test_annulus_setters2()
matplotlib.tests.test_patches.test_arc_in_collection(fig_test,fig_ref)
matplotlib.tests.test_patches.test_autoscale_arc()
matplotlib.tests.test_patches.test_boxstyle_errors(fmt,match)
matplotlib.tests.test_patches.test_clip_to_bbox()
matplotlib.tests.test_patches.test_color_override_warning(kwarg)
matplotlib.tests.test_patches.test_connection_patch()
matplotlib.tests.test_patches.test_connection_patch_fig(fig_test,fig_ref)
matplotlib.tests.test_patches.test_contains_point()
matplotlib.tests.test_patches.test_contains_points()
matplotlib.tests.test_patches.test_corner_center()
matplotlib.tests.test_patches.test_dash_offset_patch_draw(fig_test,fig_ref)
matplotlib.tests.test_patches.test_datetime_datetime_fails()
matplotlib.tests.test_patches.test_datetime_rectangle()
matplotlib.tests.test_patches.test_default_antialiased()
matplotlib.tests.test_patches.test_default_capstyle()
matplotlib.tests.test_patches.test_default_joinstyle()
matplotlib.tests.test_patches.test_default_linestyle()
matplotlib.tests.test_patches.test_degenerate_polygon()
matplotlib.tests.test_patches.test_empty_verts()
matplotlib.tests.test_patches.test_fancyarrow_setdata()
matplotlib.tests.test_patches.test_fancyarrow_shape_error()
matplotlib.tests.test_patches.test_fancyarrow_units()
matplotlib.tests.test_patches.test_large_arc()
matplotlib.tests.test_patches.test_modifying_arc(fig_test,fig_ref)
matplotlib.tests.test_patches.test_multi_color_hatch()
matplotlib.tests.test_patches.test_negative_rect()
matplotlib.tests.test_patches.test_patch_alpha_coloring()
matplotlib.tests.test_patches.test_patch_alpha_override()
matplotlib.tests.test_patches.test_patch_color_none()
matplotlib.tests.test_patches.test_patch_custom_linestyle()
matplotlib.tests.test_patches.test_patch_linestyle_accents()
matplotlib.tests.test_patches.test_patch_linestyle_none(fig_test,fig_ref)
matplotlib.tests.test_patches.test_patch_str()
matplotlib.tests.test_patches.test_rotate_rect()
matplotlib.tests.test_patches.test_rotate_rect_draw(fig_test,fig_ref)
matplotlib.tests.test_patches.test_rotated_arcs()
matplotlib.tests.test_patches.test_shadow(fig_test,fig_ref)
matplotlib.tests.test_patches.test_units_rectangle()
matplotlib.tests.test_patches.test_wedge_movement()
matplotlib.tests.test_patches.test_wedge_range()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_tools.py----------------------------------------
matplotlib.tests.test_backend_tools.test_format_shortcut(rc_shortcut,expected)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_template.py----------------------------------------
A:matplotlib.tests.test_backend_template.mpl_test_backend->SimpleNamespace(**vars(backend_template))
A:matplotlib.tests.test_backend_template.mock_show->MagicMock()
matplotlib.tests.test_backend_template.test_load_old_api(monkeypatch)
matplotlib.tests.test_backend_template.test_load_template()
matplotlib.tests.test_backend_template.test_show(monkeypatch)
matplotlib.tests.test_backend_template.test_show_old_global_api(monkeypatch)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_figure.py----------------------------------------
A:matplotlib.tests.test_figure.fig->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params))
A:matplotlib.tests.test_figure.gs->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_gridspec(1, 2)
A:matplotlib.tests.test_figure.ax->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1], projection='polar')
A:matplotlib.tests.test_figure.(fig, axs)->matplotlib.pyplot.subplots(2, sharex=True)
A:matplotlib.tests.test_figure.xn->numpy.zeros(4)
A:matplotlib.tests.test_figure.yn->numpy.zeros(4)
A:matplotlib.tests.test_figure.pc->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1], projection='polar').pcolormesh(np.random.randn(30, 30), vmin=-2.5, vmax=2.5)
A:matplotlib.tests.test_figure.fig_today->matplotlib.pyplot.figure('today')
A:matplotlib.tests.test_figure.fig0->matplotlib.pyplot.figure(num=1)
A:matplotlib.tests.test_figure.fig1->matplotlib.pyplot.figure(num=1, clear=False)
A:matplotlib.tests.test_figure.(fig2, ax2)->matplotlib.pyplot.subplots(2, 1, num=1, clear=True)
A:matplotlib.tests.test_figure.ax0->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subplot(gs[1])
A:matplotlib.tests.test_figure.ax1->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_figure.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.(fig, _)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.fps->matplotlib.font_manager.FontProperties(size='large', weight='bold')
A:matplotlib.tests.test_figure.txt->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).suptitle('fontprops title', fontproperties=fps)
A:matplotlib.tests.test_figure.(w, h)->matplotlib.pyplot.figaspect(np.zeros((2, 2)))
A:matplotlib.tests.test_figure.x->matplotlib.dates.datestr2num(date)
A:matplotlib.tests.test_figure.y->matplotlib.dates.datestr2num(time)
A:matplotlib.tests.test_figure.ratio1->PIL.Image.open(buf)
A:matplotlib.tests.test_figure.ratio2->PIL.Image.open(buf)
A:matplotlib.tests.test_figure.cbar->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).colorbar(pc, aspect=40)
A:matplotlib.tests.test_figure.axes->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).subplots(ncols=2)
A:matplotlib.tests.test_figure.l1->matplotlib.pyplot.Line2D([0.2, 0.7], [0.7, 0.7], transform=fig_ref.transFigure, gid='l1', zorder=21)
A:matplotlib.tests.test_figure.l2->matplotlib.pyplot.Line2D([0.2, 0.7], [0.8, 0.8], gid='l2')
A:matplotlib.tests.test_figure.r1->matplotlib.pyplot.Circle((20, 20), 100, transform=None, clip_on=False, zorder=20, gid='C1')
A:matplotlib.tests.test_figure.r2->matplotlib.pyplot.Circle((0.7, 0.5), 0.05, transform=fig_ref.transFigure, gid='C2', zorder=20)
A:matplotlib.tests.test_figure.r3->matplotlib.pyplot.Circle((4.5, 0.8), 0.55, transform=fig_ref.dpi_scale_trans, facecolor='crimson', clip_on=False, zorder=20, gid='C3')
A:matplotlib.tests.test_figure.ax2->subfig_bl.add_subplot(gs[0, 1:3], sharey=ax1)
A:matplotlib.tests.test_figure.out->Path(tmpdir, 'test.{}'.format(fmt))
A:matplotlib.tests.test_figure.t->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1], projection='polar').text(1.0, 0.5, 'This dangles over end')
A:matplotlib.tests.test_figure.renderer->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).canvas.get_renderer()
A:matplotlib.tests.test_figure.subfig->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subfigure(gs[0])
A:matplotlib.tests.test_figure.subaxes->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subfigure(gs[0]).add_subplot(111)
A:matplotlib.tests.test_figure.mainaxes->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subplot(gs[1])
A:matplotlib.tests.test_figure.mouse_event->SimpleNamespace(x=ax.bbox.x0 + ax.bbox.width / 2, y=ax.bbox.y0 + ax.bbox.height / 2, inaxes=ax, guiEvent=None)
A:matplotlib.tests.test_figure.ax3->subfig_bl.add_subplot(gs[0, 3:14], sharey=ax1)
A:matplotlib.tests.test_figure.ax4->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subplot(3, 2, (4, 5))
A:matplotlib.tests.test_figure.ax_ref->fig_ref.subplots()
A:matplotlib.tests.test_figure.ax_test->fig_test.subplots()
A:matplotlib.tests.test_figure.grid_axes->fig_ref.subplot_mosaic([list(ln) for ln in str_pattern.strip().split('\n')])
A:matplotlib.tests.test_figure.labels->sorted({name for row in x for name in row} - {empty_sentinel, '.'})
A:matplotlib.tests.test_figure.axA->fig_ref.add_subplot(gs[0, 0], **subplot_kw)
A:matplotlib.tests.test_figure.axB->fig_ref.add_subplot(gs[0, 1], **subplot_kw)
A:matplotlib.tests.test_figure.axC->fig_ref.add_subplot(gs_n[1, 0])
A:matplotlib.tests.test_figure.axD->fig_ref.add_subplot(gs_n[1, 1])
A:matplotlib.tests.test_figure.gs_left->gs[0, 0].subgridspec(2, 2)
A:matplotlib.tests.test_figure.gs_right->gs[0, 1].subgridspec(2, 2)
A:matplotlib.tests.test_figure.gs_n->gs[1, 0].subgridspec(2, 2)
A:matplotlib.tests.test_figure.axF->fig_ref.add_subplot(gs[0, 0])
A:matplotlib.tests.test_figure.(fig, axd)->matplotlib.pyplot.subplot_mosaic(x, height_ratios=height_ratios)
A:matplotlib.tests.test_figure.ax_dict->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).subplot_mosaic(layout, sharex=True, sharey=True)
A:matplotlib.tests.test_figure.gs1->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1]).get_subplotspec().get_gridspec()
A:matplotlib.tests.test_figure.gs2->subfig_bl.add_subplot(gs[0, 1:3], sharey=ax1).get_subplotspec().get_gridspec()
A:matplotlib.tests.test_figure.gs3->subfig_bl.add_subplot(gs[0, 3:14], sharey=ax1).get_subplotspec().get_gridspec()
A:matplotlib.tests.test_figure.sub->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subfigure(gs[0], facecolor='pink')
A:matplotlib.tests.test_figure.axs->fig.add_subfigure(gs[0]).subplots(1, 2)
A:matplotlib.tests.test_figure.sub_fig->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).subfigures(1, 1, label='sub figure')
A:matplotlib.tests.test_figure.subfigs->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).subfigures(1, 2, wspace=0.07)
A:matplotlib.tests.test_figure.subfigsnest->subfigs[0].subfigures(2, 1, height_ratios=[1, 1.4])
A:matplotlib.tests.test_figure.axsnest0->subfigsnest[0].subplots(1, 2, sharey=True)
A:matplotlib.tests.test_figure.axsnest1->subfigsnest[1].subplots(3, 1, sharex=True)
A:matplotlib.tests.test_figure.axsRight->subfigs[1].subplots(2, 2)
A:matplotlib.tests.test_figure.(subfig_bl, subfig_br)->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).subfigures(1, 2, wspace=0.01, width_ratios=[7, 2])
A:matplotlib.tests.test_figure.ticks120->subfig_bl.add_subplot(gs[0, 1:3], sharey=ax1).get_xticks()
A:matplotlib.tests.test_figure.ticks300->subfig_bl.add_subplot(gs[0, 1:3], sharey=ax1).get_xticks()
A:matplotlib.tests.test_figure.sfig->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_subfigure(gs[0])
A:matplotlib.tests.test_figure.b->matplotlib.pyplot.figure(layout=mpl.layout_engine.ConstrainedLayoutEngine(**params)).add_axes([0, 0, 1, 1], projection='polar').bar(1, 1)
A:matplotlib.tests.test_figure.buffer->io.BytesIO()
A:matplotlib.tests.test_figure.sub_figs->matplotlib.pyplot.figure().subfigures(2, 3, hspace=0.5, wspace=1 / 6.0)
A:matplotlib.tests.test_figure.(fig1, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.fig2->pickle.loads(pickle.dumps(fig))
A:matplotlib.tests.test_figure.gs_orig->dict(gs)
A:matplotlib.tests.test_figure.expected->tuple([*params.values()])
matplotlib.tests.test_figure.TestSubplotMosaic
matplotlib.tests.test_figure.TestSubplotMosaic.test_all_nested(self,fig_test,fig_ref)
matplotlib.tests.test_figure.TestSubplotMosaic.test_basic(self,fig_test,fig_ref,x)
matplotlib.tests.test_figure.TestSubplotMosaic.test_empty(self,fig_test,fig_ref,x,empty_sentinel)
matplotlib.tests.test_figure.TestSubplotMosaic.test_extra_per_subplot_kw(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_fail(self,x,match)
matplotlib.tests.test_figure.TestSubplotMosaic.test_fail_list_of_str(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_hashable_keys(self,fig_test,fig_ref)
matplotlib.tests.test_figure.TestSubplotMosaic.test_nested(self,fig_test,fig_ref)
matplotlib.tests.test_figure.TestSubplotMosaic.test_nested_height_ratios(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_nested_tuple(self,fig_test,fig_ref)
matplotlib.tests.test_figure.TestSubplotMosaic.test_nested_user_order(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_nested_width_ratios(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_per_subplot_kw(self,fig_test,fig_ref,multi_value)
matplotlib.tests.test_figure.TestSubplotMosaic.test_per_subplot_kw_expander(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_share_all(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_single_str_input(self,fig_test,fig_ref,str_pattern)
matplotlib.tests.test_figure.TestSubplotMosaic.test_string_parser(self)
matplotlib.tests.test_figure.TestSubplotMosaic.test_subplot_kw(self,fig_test,fig_ref,subplot_kw)
matplotlib.tests.test_figure.TestSubplotMosaic.test_user_order(self,str_pattern)
matplotlib.tests.test_figure.test_add_artist(fig_test,fig_ref)
matplotlib.tests.test_figure.test_add_axes_kwargs()
matplotlib.tests.test_figure.test_add_subplot_invalid()
matplotlib.tests.test_figure.test_add_subplot_kwargs()
matplotlib.tests.test_figure.test_add_subplot_subclass()
matplotlib.tests.test_figure.test_add_subplot_twotuple()
matplotlib.tests.test_figure.test_align_labels()
matplotlib.tests.test_figure.test_align_labels_stray_axes()
matplotlib.tests.test_figure.test_alpha()
matplotlib.tests.test_figure.test_animated_with_canvas_change(fig_test,fig_ref)
matplotlib.tests.test_figure.test_autofmt_xdate(which)
matplotlib.tests.test_figure.test_axes_removal()
matplotlib.tests.test_figure.test_axes_remove()
matplotlib.tests.test_figure.test_change_dpi()
matplotlib.tests.test_figure.test_clf_keyword()
matplotlib.tests.test_figure.test_clf_not_redefined()
matplotlib.tests.test_figure.test_deepcopy()
matplotlib.tests.test_figure.test_figaspect()
matplotlib.tests.test_figure.test_fignum_exists()
matplotlib.tests.test_figure.test_figure()
matplotlib.tests.test_figure.test_figure_clear(clear_meth)
matplotlib.tests.test_figure.test_figure_label()
matplotlib.tests.test_figure.test_figure_legend()
matplotlib.tests.test_figure.test_figure_repr()
matplotlib.tests.test_figure.test_fspath(fmt,tmpdir)
matplotlib.tests.test_figure.test_gca()
matplotlib.tests.test_figure.test_get_constrained_layout_pads()
matplotlib.tests.test_figure.test_ginput(recwarn)
matplotlib.tests.test_figure.test_gridspec_no_mutate_input()
matplotlib.tests.test_figure.test_invalid_figure_add_axes()
matplotlib.tests.test_figure.test_invalid_figure_size(width,height)
matplotlib.tests.test_figure.test_invalid_layouts()
matplotlib.tests.test_figure.test_iterability_axes_argument()
matplotlib.tests.test_figure.test_kwargs_pass()
matplotlib.tests.test_figure.test_layout_change_warning(layout)
matplotlib.tests.test_figure.test_picking_does_not_stale()
matplotlib.tests.test_figure.test_rcparams(fig_test,fig_ref)
matplotlib.tests.test_figure.test_removed_axis()
matplotlib.tests.test_figure.test_reused_gridspec()
matplotlib.tests.test_figure.test_savefig()
matplotlib.tests.test_figure.test_savefig_backend()
matplotlib.tests.test_figure.test_savefig_locate_colorbar()
matplotlib.tests.test_figure.test_savefig_pixel_ratio(backend)
matplotlib.tests.test_figure.test_savefig_preserve_layout_engine()
matplotlib.tests.test_figure.test_savefig_warns()
matplotlib.tests.test_figure.test_set_fig_size()
matplotlib.tests.test_figure.test_subfigure()
matplotlib.tests.test_figure.test_subfigure_double()
matplotlib.tests.test_figure.test_subfigure_dpi()
matplotlib.tests.test_figure.test_subfigure_pdf()
matplotlib.tests.test_figure.test_subfigure_scatter_size()
matplotlib.tests.test_figure.test_subfigure_spanning()
matplotlib.tests.test_figure.test_subfigure_ss()
matplotlib.tests.test_figure.test_subfigure_ticks()
matplotlib.tests.test_figure.test_subfigure_tightbbox()
matplotlib.tests.test_figure.test_subfigures_wspace_hspace()
matplotlib.tests.test_figure.test_subplots_shareax_loglabels()
matplotlib.tests.test_figure.test_suptitle()
matplotlib.tests.test_figure.test_suptitle_fontproperties()
matplotlib.tests.test_figure.test_tightbbox()
matplotlib.tests.test_figure.test_tightbbox_box_aspect()
matplotlib.tests.test_figure.test_tightlayout_autolayout_deconflict(fig_test,fig_ref)
matplotlib.tests.test_figure.test_too_many_figures()
matplotlib.tests.test_figure.test_unpickle_with_device_pixel_ratio()
matplotlib.tests.test_figure.test_valid_layouts()
matplotlib.tests.test_figure.test_waitforbuttonpress(recwarn)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_triangulation.py----------------------------------------
A:matplotlib.tests.test_triangulation.(x_, y_, triangles_, mask_, args_, kwargs_)->matplotlib.tri.Triangulation._extract_triangulation_params(args, {})
A:matplotlib.tests.test_triangulation.triang->matplotlib.tri.Triangulation(x, y)
A:matplotlib.tests.test_triangulation.(x, y)->map(np.ravel, np.meshgrid(xi, xi))
A:matplotlib.tests.test_triangulation.x->numpy.asarray([0, 1, 0, 1, 0.5])
A:matplotlib.tests.test_triangulation.y->numpy.asarray([0, 0, 1, 1, 0.5])
A:matplotlib.tests.test_triangulation.tri_points->numpy.array([[0.8660254037844384, -0.5000000000000004], [0.7577722283113836, -0.5000000000000004], [0.6495190528383288, -0.5000000000000003], [0.5412658773652739, -0.5000000000000003], [0.811898816047911, -0.40625000000000044], [0.7036456405748561, -0.4062500000000004], [0.5953924651018013, -0.40625000000000033]])
A:matplotlib.tests.test_triangulation.test_points->numpy.asarray([[0.58, -0.46], [0.65, -0.46], [0.65, -0.42], [0.7, -0.48], [0.7, -0.44], [0.75, -0.44], [0.8, -0.48]])
A:matplotlib.tests.test_triangulation.triangles->numpy.array([[0, 1, 2], [0, 1, 3], [1, 2, 4]], dtype=np.int32)
A:matplotlib.tests.test_triangulation.xmid->x[triang.triangles].mean(axis=1)
A:matplotlib.tests.test_triangulation.ymid->y[triang.triangles].mean(axis=1)
A:matplotlib.tests.test_triangulation.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_triangulation.ax->matplotlib.pyplot.figure().add_subplot()
A:matplotlib.tests.test_triangulation.points->numpy.array([(0, 0), (0, 1.1), (1, 0), (1, 1)])
A:matplotlib.tests.test_triangulation.old_triangles->numpy.array([[0, 1, 2], [0, 1, 3], [1, 2, 4]], dtype=np.int32).copy()
A:matplotlib.tests.test_triangulation.mask->numpy.array([False, False, True], dtype=bool)
A:matplotlib.tests.test_triangulation.trifinder->matplotlib._tri.TrapezoidMapTriFinder(triang)
A:matplotlib.tests.test_triangulation.(xs, ys)->numpy.meshgrid(xs, ys)
A:matplotlib.tests.test_triangulation.xs->numpy.linspace(triang.x[pt1], triang.x[pt2], 10)
A:matplotlib.tests.test_triangulation.ys->numpy.linspace(triang.y[pt1], triang.y[pt2], 10)
A:matplotlib.tests.test_triangulation.tris->trifinder(xs, ys)
A:matplotlib.tests.test_triangulation.linear_interp->matplotlib.tri.LinearTriInterpolator(triang, z0)
A:matplotlib.tests.test_triangulation.cubic_min_E->matplotlib.tri.CubicTriInterpolator(triang, z0)
A:matplotlib.tests.test_triangulation.cubic_geom->matplotlib.tri.CubicTriInterpolator(triang, z0, kind='geom')
A:matplotlib.tests.test_triangulation.zs->interp(xs, ys)
A:matplotlib.tests.test_triangulation.z->numpy.zeros_like(x)
A:matplotlib.tests.test_triangulation.dz->gradient_quad(x, y)
A:matplotlib.tests.test_triangulation.cubic_user->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=dz)
A:matplotlib.tests.test_triangulation.interp_zs->cubic_user(xs, ys)
A:matplotlib.tests.test_triangulation.(interp_dzsdx, interp_dzsdy)->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=dz).gradient(x, y)
A:matplotlib.tests.test_triangulation.(dzsdx, dzsdy)->gradient_quad(x, y)
A:matplotlib.tests.test_triangulation.diff_lin->numpy.abs(linear_interp(xs, ys) - zs)
A:matplotlib.tests.test_triangulation.diff_cubic->numpy.abs(interp(xs, ys) - zs)
A:matplotlib.tests.test_triangulation.(dzx, dzy)->interpolator.gradient([loc_x], [loc_y])
A:matplotlib.tests.test_triangulation.(tab_dzx, tab_dzy)->interpolator.gradient(star_x, star_y)
A:matplotlib.tests.test_triangulation.dzx->numpy.zeros(7, dtype=np.float64)
A:matplotlib.tests.test_triangulation.dzy->numpy.zeros(7, dtype=np.float64)
A:matplotlib.tests.test_triangulation.values->numpy.zeros([3, 3], dtype=np.float64)
A:matplotlib.tests.test_triangulation.interp->interpolator(tri, z)
A:matplotlib.tests.test_triangulation.rows->numpy.array([0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1], dtype=np.int32)
A:matplotlib.tests.test_triangulation.cols->numpy.array([0, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=np.int32)
A:matplotlib.tests.test_triangulation.vals->numpy.ones(17, dtype=np.float64)
A:matplotlib.tests.test_triangulation.mat->matplotlib.tri._triinterpolate._Sparse_Matrix_coo(vals, rows, cols, dim)
A:matplotlib.tests.test_triangulation.mat_dense->matplotlib.tri._triinterpolate._Sparse_Matrix_coo(vals, rows, cols, dim).to_dense()
A:matplotlib.tests.test_triangulation.b->numpy.zeros(n * m + 2, dtype=np.float64)
A:matplotlib.tests.test_triangulation.(x, _)->matplotlib.tri._triinterpolate._cg(A=mat, b=b, x0=np.ones(n * m + 2), tol=1e-10)
A:matplotlib.tests.test_triangulation.(vals, rows, cols, _)->poisson_sparse_matrix(n, m)
A:matplotlib.tests.test_triangulation.sum_w->numpy.zeros([4, 2])
A:matplotlib.tests.test_triangulation.dof_estimator->matplotlib.tri._triinterpolate._DOF_estimator_geom(cubic_geom)
A:matplotlib.tests.test_triangulation.weights->matplotlib.tri._triinterpolate._DOF_estimator_geom(cubic_geom).compute_geom_weights()
A:matplotlib.tests.test_triangulation.x0->(radii * np.cos(angles)).flatten()
A:matplotlib.tests.test_triangulation.y0->(radii * np.sin(angles)).flatten()
A:matplotlib.tests.test_triangulation.zs_target->numpy.ma.array(1.23 * xs - 4.79 * ys, mask=mask_out)
A:matplotlib.tests.test_triangulation.(zs,)->interpolator(tri, z)._interpolate_multikeys(xs, ys, tri_index=itri * np.ones(10, dtype=np.int32))
A:matplotlib.tests.test_triangulation.r1->numpy.hypot(0.5 - x, 0.5 - y)
A:matplotlib.tests.test_triangulation.theta1->numpy.arctan2(0.5 - x, 0.5 - y)
A:matplotlib.tests.test_triangulation.r2->numpy.hypot(-x - 0.2, -y - 0.2)
A:matplotlib.tests.test_triangulation.theta2->numpy.arctan2(-x - 0.2, -y - 0.2)
A:matplotlib.tests.test_triangulation.radii->numpy.linspace(min_radius, 0.95, n_radii)
A:matplotlib.tests.test_triangulation.angles->numpy.repeat(angles[..., np.newaxis], n_radii, axis=1)
A:matplotlib.tests.test_triangulation.triang0->matplotlib.tri.Triangulation(x0, y0)
A:matplotlib.tests.test_triangulation.z0->z(x0, y0)
A:matplotlib.tests.test_triangulation.xs0->xs0.ravel().ravel()
A:matplotlib.tests.test_triangulation.ys0->ys0.ravel().ravel()
A:matplotlib.tests.test_triangulation.(xs0, ys0)->numpy.meshgrid(xs0, ys0)
A:matplotlib.tests.test_triangulation.interp_z0[interp_key]->interp(xs0, ys0)
A:matplotlib.tests.test_triangulation.interpz->dic_interp[interp_key](xs, ys)
A:matplotlib.tests.test_triangulation.refiner->matplotlib.tri.UniformTriRefiner(tri)
A:matplotlib.tests.test_triangulation.(tri_refi, z_test_refi)->matplotlib.tri.UniformTriRefiner(tri).refine_field(V, subdiv=3)
A:matplotlib.tests.test_triangulation.levels->numpy.arange(0.0, 1.0, 0.01)
A:matplotlib.tests.test_triangulation.theta->numpy.radians(25)
A:matplotlib.tests.test_triangulation.V->dipole_potential(x, y)
A:matplotlib.tests.test_triangulation.tci->matplotlib.tri.CubicTriInterpolator(triang, -V)
A:matplotlib.tests.test_triangulation.(Ex, Ey)->matplotlib.tri.CubicTriInterpolator(triang, -V).gradient(triang.x, triang.y)
A:matplotlib.tests.test_triangulation.E_norm->numpy.hypot(Ex, Ey)
A:matplotlib.tests.test_triangulation.analyser->matplotlib.tri.TriAnalyzer(triang)
A:matplotlib.tests.test_triangulation.mask_flat->matplotlib.tri.TriAnalyzer(triang).get_flat_tri_mask(0.2)
A:matplotlib.tests.test_triangulation.verif_mask->numpy.zeros(162, dtype=bool)
A:matplotlib.tests.test_triangulation.refi_triang->matplotlib.tri.UniformTriRefiner(tri).refine_triangulation(subdiv=subdiv)
A:matplotlib.tests.test_triangulation.x_verif->x_verif.ravel().ravel()
A:matplotlib.tests.test_triangulation.(x_verif, y_verif)->numpy.meshgrid(x_verif, x_verif)
A:matplotlib.tests.test_triangulation.y_verif->y_verif.ravel().ravel()
A:matplotlib.tests.test_triangulation.ind1d->numpy.in1d(np.around(x_verif * (2.5 + y_verif), 8), np.around(x_refi * (2.5 + y_refi), 8))
A:matplotlib.tests.test_triangulation.tri_finder->matplotlib.tri.Triangulation(x, y).get_trifinder()
A:matplotlib.tests.test_triangulation.refi_tri_indices->tri_finder(refi_tri_barycenter_x, refi_tri_barycenter_y)
A:matplotlib.tests.test_triangulation.(refined_triang, refined_z)->matplotlib.tri.UniformTriRefiner(tri).refine_field(z, subdiv=1)
A:matplotlib.tests.test_triangulation.tri->matplotlib.tri.Triangulation(x, y)
A:matplotlib.tests.test_triangulation.triangles1->numpy.array([[2, 0, 3], [2, 1, 0]])
A:matplotlib.tests.test_triangulation.triangles2->numpy.array(triangles1, copy=True, order='F')
A:matplotlib.tests.test_triangulation.triang1->matplotlib.tri.Triangulation(x, y, triangles1)
A:matplotlib.tests.test_triangulation.triang2->matplotlib.tri.Triangulation(x, y, triangles2)
A:matplotlib.tests.test_triangulation.refiner1->matplotlib.tri.UniformTriRefiner(triang1)
A:matplotlib.tests.test_triangulation.refiner2->matplotlib.tri.UniformTriRefiner(triang2)
A:matplotlib.tests.test_triangulation.fine_triang1->matplotlib.tri.UniformTriRefiner(triang1).refine_triangulation(subdiv=1)
A:matplotlib.tests.test_triangulation.fine_triang2->matplotlib.tri.UniformTriRefiner(triang2).refine_triangulation(subdiv=1)
A:matplotlib.tests.test_triangulation.xi->numpy.linspace(-2, 2, 100)
A:matplotlib.tests.test_triangulation.tcg->matplotlib._tri.TriContourGenerator(triang, z)
A:matplotlib.tests.test_triangulation.triang_offset->matplotlib.tri.Triangulation(x + offset, y + offset)
A:matplotlib.tests.test_triangulation.tcs1->matplotlib.pyplot.figure().add_subplot().tricontourf(x, y, z)
A:matplotlib.tests.test_triangulation.tcs2->matplotlib.pyplot.figure().add_subplot().tricontour(x, y, z)
A:matplotlib.tests.test_triangulation.tcs3->matplotlib.pyplot.figure().add_subplot().tricontour(tcs1, z)
A:matplotlib.tests.test_triangulation.(lines, markers)->matplotlib.pyplot.figure().add_subplot().triplot(x, y, data, label='label')
A:matplotlib.tests.test_triangulation.(handles, labels)->matplotlib.pyplot.figure().add_subplot().get_legend_handles_labels()
matplotlib.tests.test_triangulation.TestTriangulationParams
matplotlib.tests.test_triangulation.TestTriangulationParams.test_extract_triangulation_params(self,args,kwargs,expected)
matplotlib.tests.test_triangulation.meshgrid_triangles(n)
matplotlib.tests.test_triangulation.test_delaunay()
matplotlib.tests.test_triangulation.test_delaunay_duplicate_points()
matplotlib.tests.test_triangulation.test_delaunay_insufficient_points(x,y)
matplotlib.tests.test_triangulation.test_delaunay_points_in_line()
matplotlib.tests.test_triangulation.test_delaunay_robust()
matplotlib.tests.test_triangulation.test_extract_triangulation_positional_mask()
matplotlib.tests.test_triangulation.test_internal_cpp_api()
matplotlib.tests.test_triangulation.test_no_modify()
matplotlib.tests.test_triangulation.test_qhull_large_offset()
matplotlib.tests.test_triangulation.test_qhull_triangle_orientation()
matplotlib.tests.test_triangulation.test_tri_smooth_contouring()
matplotlib.tests.test_triangulation.test_tri_smooth_gradient()
matplotlib.tests.test_triangulation.test_trianalyzer_mismatched_indices()
matplotlib.tests.test_triangulation.test_triangulation_init()
matplotlib.tests.test_triangulation.test_triangulation_set_mask()
matplotlib.tests.test_triangulation.test_tricontour_non_finite_z()
matplotlib.tests.test_triangulation.test_tricontourf_decreasing_levels()
matplotlib.tests.test_triangulation.test_tricontourset_reuse()
matplotlib.tests.test_triangulation.test_trifinder()
matplotlib.tests.test_triangulation.test_triinterp()
matplotlib.tests.test_triangulation.test_triinterp_colinear()
matplotlib.tests.test_triangulation.test_triinterp_transformations()
matplotlib.tests.test_triangulation.test_triinterpcubic_C1_continuity()
matplotlib.tests.test_triangulation.test_triinterpcubic_cg_solver()
matplotlib.tests.test_triangulation.test_triinterpcubic_geom_weights()
matplotlib.tests.test_triangulation.test_tripcolor()
matplotlib.tests.test_triangulation.test_tripcolor_clim()
matplotlib.tests.test_triangulation.test_tripcolor_color()
matplotlib.tests.test_triangulation.test_tripcolor_warnings()
matplotlib.tests.test_triangulation.test_triplot_label()
matplotlib.tests.test_triangulation.test_triplot_return()
matplotlib.tests.test_triangulation.test_triplot_with_ls(fig_test,fig_ref)
matplotlib.tests.test_triangulation.test_trirefine()
matplotlib.tests.test_triangulation.test_trirefine_masked(interpolator)
matplotlib.tests.test_triangulation.test_trirefiner_fortran_contiguous_triangles()
matplotlib.tests.test_triangulation.test_tritools()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_determinism.py----------------------------------------
A:matplotlib.tests.test_determinism.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_determinism.ax1->matplotlib.pyplot.figure().add_subplot(1, 6, 1)
A:matplotlib.tests.test_determinism.x->range(5)
A:matplotlib.tests.test_determinism.ax2->matplotlib.pyplot.figure().add_subplot(1, 6, 2)
A:matplotlib.tests.test_determinism.ax->matplotlib.pyplot.figure().add_subplot(1, 6, 6)
A:matplotlib.tests.test_determinism.stdout->getattr(sys.stdout, 'buffer', sys.stdout)
A:matplotlib.tests.test_determinism.buf->subprocess.check_output([sys.executable, '-R', '-c', f"from matplotlib.tests.test_determinism import _save_figure; _save_figure('', {fmt!r})"], env={**os.environ, 'SOURCE_DATE_EPOCH': '946684800', 'MPLBACKEND': 'Agg'})
matplotlib.tests.test_determinism._save_figure(objects='mhi',fmt='pdf',usetex=False)
matplotlib.tests.test_determinism.test_determinism_check(objects,fmt,usetex)
matplotlib.tests.test_determinism.test_determinism_source_date_epoch(fmt,string)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_collections.py----------------------------------------
A:matplotlib.tests.test_collections.positions->numpy.array([0.0, 1.0, 2.0, 3.0, 5.0, 8.0, 13.0, 21.0])
A:matplotlib.tests.test_collections.extra_positions->numpy.array([34.0, 55.0, 89.0])
A:matplotlib.tests.test_collections.coll->fig.add_axes(Axes3D(fig)).pcolormesh([[1]], cmap=cmap, norm=norm)
A:matplotlib.tests.test_collections.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_collections.(_, coll, props)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.(splt, coll, props)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.new_positions->fig.add_axes(Axes3D(fig)).pcolormesh([[1]], cmap=cmap, norm=norm).get_positions()
A:matplotlib.tests.test_collections.(splt, coll, _)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.new_color->numpy.array([0, 1, 1, 1])
A:matplotlib.tests.test_collections.segments->fig.add_axes(Axes3D(fig)).pcolormesh([[1]], cmap=cmap, norm=norm).get_segments()
A:matplotlib.tests.test_collections.col->matplotlib.collections.PathCollection([], joinstyle='round')
A:matplotlib.tests.test_collections.col_data_lim->matplotlib.collections.PathCollection([], joinstyle='round').get_datalim(mtransforms.IdentityTransform())
A:matplotlib.tests.test_collections.ax->matplotlib.pyplot.figure().add_axes(Axes3D(fig))
A:matplotlib.tests.test_collections.coll_data_lim->fig.add_axes(Axes3D(fig)).pcolormesh([[1]], cmap=cmap, norm=norm).get_datalim(mtransforms.IdentityTransform())
A:matplotlib.tests.test_collections.(x, y)->numpy.random.rand(2, 10)
A:matplotlib.tests.test_collections.x->numpy.ma.array([1, 2, 3, 4, 5], mask=[0, 0, 1, 1, 0])
A:matplotlib.tests.test_collections.y->numpy.arange(1, 6)
A:matplotlib.tests.test_collections.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_collections.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_collections.uv->numpy.linspace(0, 10, 80).reshape(10, 8)
A:matplotlib.tests.test_collections.q->matplotlib.pyplot.quiver(x, y, u, v)
A:matplotlib.tests.test_collections.(y, x)->numpy.meshgrid(y, x)
A:matplotlib.tests.test_collections.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_collections.ec->matplotlib.collections.EllipseCollection(ww, hh, aa, units='x', offsets=XY, offset_transform=ax.transData, facecolors='none')
A:matplotlib.tests.test_collections.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_collections.zpos->list(range(5))
A:matplotlib.tests.test_collections.poly->matplotlib.collections.PolyCollection(vertsQuad * len(zpos), linewidth=0.25)
A:matplotlib.tests.test_collections.xy_points->numpy.transpose([xx.flatten(), yy.flatten()])
A:matplotlib.tests.test_collections.rotations->numpy.linspace(0, 2 * np.pi, len(xy_points))
A:matplotlib.tests.test_collections.squares->SquareCollection(sizes=circle_areas, offsets=xy, offset_transform=ax.transData)
A:matplotlib.tests.test_collections.mouse_event->SimpleNamespace(xdata=xdata, ydata=ydata, x=x, y=y)
A:matplotlib.tests.test_collections.(found, indices)->ax.pcolormesh(x, x, np.ones((3, 3))).contains(mouse_event)
A:matplotlib.tests.test_collections.mesh->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).pcolormesh(x, x, np.ones((3, 3)))
A:matplotlib.tests.test_collections.e->matplotlib.collections.EllipseCollection(widths, heights, angles, units='xy', offsets=coords, offset_transform=ax.transData)
A:matplotlib.tests.test_collections.ecfc->pd.Series(['red', 'blue', 'green'], index=index)
A:matplotlib.tests.test_collections.lw->pd.Series([1, 2, 3], index=index)
A:matplotlib.tests.test_collections.ls->pd.Series(['solid', 'dashed', 'dashdot'], index=index)
A:matplotlib.tests.test_collections.aa->pd.Series([True, False, True], index=index)
A:matplotlib.tests.test_collections.c->Collection()
A:matplotlib.tests.test_collections.segs->numpy.zeros((3, 3, 2))
A:matplotlib.tests.test_collections.line_segments->LineCollection(segs, linewidth=[10, 15, 20])
A:matplotlib.tests.test_collections.sc->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d)
A:matplotlib.tests.test_collections.(fig, (ax0, ax1))->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_collections.sc0->ax0.scatter(x, x, color=['r', 'g', 'b', 'c', 'm'])
A:matplotlib.tests.test_collections.sc1->ax1.scatter(x, x, color='r')
A:matplotlib.tests.test_collections.s->numpy.random.randint(10, 300, size=10)
A:matplotlib.tests.test_collections.(h, l)->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).legend_elements(prop='sizes', num=4, fmt='{x:.2f}', func=lambda x: 2 * x)
A:matplotlib.tests.test_collections.colors->numpy.array([line.get_color() for line in h])
A:matplotlib.tests.test_collections.colors2->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).cmap(np.arange(5) / 4)
A:matplotlib.tests.test_collections.l1->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).legend(h, l, loc=1)
A:matplotlib.tests.test_collections.(h2, lab2)->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).legend_elements(num=9)
A:matplotlib.tests.test_collections.l2->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).legend(h2, lab2, loc=2)
A:matplotlib.tests.test_collections.l3->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).legend(h, l, loc=4)
A:matplotlib.tests.test_collections.labeledsizes->numpy.sqrt(np.array(l, float) / 2)
A:matplotlib.tests.test_collections.l4->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).legend(h, l, loc=3)
A:matplotlib.tests.test_collections.loc->matplotlib.ticker.MaxNLocator(nbins=9, min_n_ticks=9 - 1, steps=[1, 2, 2.5, 3, 5, 6, 8, 10])
A:matplotlib.tests.test_collections.(h5, lab5)->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).legend_elements(num=loc)
A:matplotlib.tests.test_collections.(h6, lab6)->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).legend_elements(num=levels, prop='sizes', fmt='{x:g}')
A:matplotlib.tests.test_collections.arr->numpy.array([3, 2, 1, 10])
A:matplotlib.tests.test_collections.verts->numpy.arange(80, dtype=np.double).reshape(10, 4, 2)
A:matplotlib.tests.test_collections.col_arr->PolyCollection(verts)
A:matplotlib.tests.test_collections.col_list->PolyCollection(list(verts))
A:matplotlib.tests.test_collections.verts_tuple->numpy.empty(10, dtype=object)
A:matplotlib.tests.test_collections.col_arr_tuple->PolyCollection(verts_tuple)
A:matplotlib.tests.test_collections.xy_pairs->numpy.column_stack([np.repeat(a, 2), np.tile([0, height], len(a))])
A:matplotlib.tests.test_collections.line_segs->numpy.column_stack([np.repeat(a, 2), np.tile([0, height], len(a))]).reshape([len(a), 2, 2])
A:matplotlib.tests.test_collections.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_collections.trans->matplotlib.transforms.blended_transform_factory(ax.transData, ax.transAxes)
A:matplotlib.tests.test_collections.z->numpy.arange(36).reshape(3, 4, 3)
A:matplotlib.tests.test_collections.(xx, yy)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_collections.norm->matplotlib.colors.Normalize(vmin=0, vmax=1)
A:matplotlib.tests.test_collections.alpha_flat->alpha.ravel()
A:matplotlib.tests.test_collections.coll1->ax0.pcolormesh(x, y, z, alpha=alpha_flat)
A:matplotlib.tests.test_collections.coll2->ax1.pcolormesh(x, y, z)
A:matplotlib.tests.test_collections.pc->matplotlib.pyplot.pcolormesh(z)
A:matplotlib.tests.test_collections.X->numpy.random.random(50)
A:matplotlib.tests.test_collections.Y->numpy.random.random(50)
A:matplotlib.tests.test_collections.(handles, labels)->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).legend_elements(prop='sizes', num=legend_sizes, func=lambda s: 5 / s)
A:matplotlib.tests.test_collections.face_default->matplotlib.colors.to_rgba_array(pc._get_default_facecolor())
A:matplotlib.tests.test_collections.mapped->matplotlib.pyplot.pcolormesh(z).get_cmap()(pc.norm(z.ravel()))
A:matplotlib.tests.test_collections.lc->LineCollection([segments])
A:matplotlib.tests.test_collections.(readback,)->LineCollection([segments]).get_segments()
A:matplotlib.tests.test_collections.identity->matplotlib.transforms.IdentityTransform()
A:matplotlib.tests.test_collections.null->matplotlib.collections.CircleCollection(sizes=sizes)
A:matplotlib.tests.test_collections.init->matplotlib.collections.Collection(offset_transform=skew)
A:matplotlib.tests.test_collections.late->matplotlib.collections.Collection()
A:matplotlib.tests.test_collections.skew->matplotlib.transforms.Affine2D().skew(2, 2)
A:matplotlib.tests.test_collections.off0->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(y, d).get_offsets()
A:matplotlib.tests.test_collections.masked_y->numpy.ma.array([1, 2, 3, 4, 5], mask=[0, 1, 1, 0, 0])
A:matplotlib.tests.test_collections.scat->matplotlib.pyplot.figure().add_axes(Axes3D(fig)).scatter(x, y)
A:matplotlib.tests.test_collections.masked_offsets->numpy.ma.column_stack([x, y])
A:matplotlib.tests.test_collections.unmasked_offsets->numpy.column_stack([x, y])
matplotlib.tests.test_collections.check_segments(coll,positions,linelength,lineoffset,orientation)
matplotlib.tests.test_collections.generate_EventCollection_plot()
matplotlib.tests.test_collections.test_EllipseCollection()
matplotlib.tests.test_collections.test_EventCollection_nosort()
matplotlib.tests.test_collections.test_LineCollection_args()
matplotlib.tests.test_collections.test__EventCollection__add_positions()
matplotlib.tests.test_collections.test__EventCollection__append_positions()
matplotlib.tests.test_collections.test__EventCollection__extend_positions()
matplotlib.tests.test_collections.test__EventCollection__get_props()
matplotlib.tests.test_collections.test__EventCollection__set_color()
matplotlib.tests.test_collections.test__EventCollection__set_linelength()
matplotlib.tests.test_collections.test__EventCollection__set_lineoffset()
matplotlib.tests.test_collections.test__EventCollection__set_orientation()
matplotlib.tests.test_collections.test__EventCollection__set_positions()
matplotlib.tests.test_collections.test__EventCollection__set_prop()
matplotlib.tests.test_collections.test__EventCollection__switch_orientation()
matplotlib.tests.test_collections.test__EventCollection__switch_orientation_2x()
matplotlib.tests.test_collections.test_add_collection()
matplotlib.tests.test_collections.test_alpha_validation()
matplotlib.tests.test_collections.test_array_wrong_dimensions()
matplotlib.tests.test_collections.test_autolim_with_zeros(transform,expected)
matplotlib.tests.test_collections.test_barb_limits()
matplotlib.tests.test_collections.test_blended_collection_autolim()
matplotlib.tests.test_collections.test_cap_and_joinstyle_image()
matplotlib.tests.test_collections.test_capstyle()
matplotlib.tests.test_collections.test_check_masked_offsets()
matplotlib.tests.test_collections.test_check_offsets_dtype()
matplotlib.tests.test_collections.test_collection_log_datalim(fig_test,fig_ref)
matplotlib.tests.test_collections.test_collection_set_array()
matplotlib.tests.test_collections.test_collection_set_verts_array()
matplotlib.tests.test_collections.test_color_logic(pcfunc)
matplotlib.tests.test_collections.test_get_segments()
matplotlib.tests.test_collections.test_joinstyle()
matplotlib.tests.test_collections.test_legend_inverse_size_label_relationship()
matplotlib.tests.test_collections.test_linestyle_single_dashes()
matplotlib.tests.test_collections.test_lslw_bcast()
matplotlib.tests.test_collections.test_masked_set_offsets(fig_ref,fig_test)
matplotlib.tests.test_collections.test_no_offsets_datalim()
matplotlib.tests.test_collections.test_null_collection_datalim()
matplotlib.tests.test_collections.test_pandas_indexing(pd)
matplotlib.tests.test_collections.test_pathcollection_legend_elements()
matplotlib.tests.test_collections.test_picking()
matplotlib.tests.test_collections.test_polycollection_close()
matplotlib.tests.test_collections.test_quadmesh_alpha_array()
matplotlib.tests.test_collections.test_quadmesh_contains()
matplotlib.tests.test_collections.test_quadmesh_contains_concave()
matplotlib.tests.test_collections.test_quadmesh_cursor_data()
matplotlib.tests.test_collections.test_quadmesh_cursor_data_multiple_points()
matplotlib.tests.test_collections.test_quadmesh_get_coordinates()
matplotlib.tests.test_collections.test_quadmesh_set_array()
matplotlib.tests.test_collections.test_quadmesh_set_array_validation()
matplotlib.tests.test_collections.test_quadmesh_vmin_vmax()
matplotlib.tests.test_collections.test_quiver_limits()
matplotlib.tests.test_collections.test_regularpolycollection_rotate()
matplotlib.tests.test_collections.test_regularpolycollection_scale()
matplotlib.tests.test_collections.test_scatter_alpha_array()
matplotlib.tests.test_collections.test_scatter_post_alpha()
matplotlib.tests.test_collections.test_set_offset_transform()
matplotlib.tests.test_collections.test_set_offset_units()
matplotlib.tests.test_collections.test_set_offsets_late()
matplotlib.tests.test_collections.test_set_wrong_linestyle()
matplotlib.tests.test_collections.test_singleton_autolim()
matplotlib.tests.test_collections.test_size_in_xy()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_animation.py----------------------------------------
A:matplotlib.tests.test_animation.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_animation.(line,)->fig_ref.add_subplot().plot([], [])
A:matplotlib.tests.test_animation.x->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_animation.y->numpy.random.rand(100)
A:matplotlib.tests.test_animation.kwargs->dict(getattr(request, 'param', {}))
A:matplotlib.tests.test_animation.klass->dict(getattr(request, 'param', {})).pop('klass', animation.FuncAnimation)
A:matplotlib.tests.test_animation.savefig_kwargs->dict(foo=0)
A:matplotlib.tests.test_animation.writer->NullMovieWriter()
A:matplotlib.tests.test_animation.anim->matplotlib.animation.FuncAnimation(**{**anim, 'cache_frame_data': cache_frame_data, 'frames': frames})
A:matplotlib.tests.test_animation.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_animation.mark->pytest.mark.skip(f"writer '{writer}' not available on this system")
A:matplotlib.tests.test_animation.html->matplotlib.animation.FuncAnimation(**{**anim, 'cache_frame_data': cache_frame_data, 'frames': frames})._repr_html_()
A:matplotlib.tests.test_animation.exe_path->Path(str(tmpdir), 'ffmpeg')
A:matplotlib.tests.test_animation.frame->Frame(x=x, y=y)
A:matplotlib.tests.test_animation.ax->fig_ref.add_subplot()
A:matplotlib.tests.test_animation.frames->iter(range(5))
A:matplotlib.tests.test_animation.match_str->re.escape("[Errno 2] No such file or directory: '/foo")
matplotlib.tests.test_animation.NullMovieWriter(animation.AbstractMovieWriter)
matplotlib.tests.test_animation.NullMovieWriter.finish(self)
matplotlib.tests.test_animation.NullMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.tests.test_animation.NullMovieWriter.setup(self,fig,outfile,dpi,*args)
matplotlib.tests.test_animation.RegisteredNullMovieWriter(self,fps=None,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.tests.test_animation.RegisteredNullMovieWriter.__init__(self,fps=None,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.tests.test_animation.RegisteredNullMovieWriter.isAvailable(cls)
matplotlib.tests.test_animation.anim(request)
matplotlib.tests.test_animation.gen_writers()
matplotlib.tests.test_animation.test_animation_delete(anim)
matplotlib.tests.test_animation.test_animation_frame(tmpdir,fig_test,fig_ref)
matplotlib.tests.test_animation.test_animation_repr_html(writer,html,want,anim)
matplotlib.tests.test_animation.test_cleanup_temporaries(method_name,tmpdir,anim)
matplotlib.tests.test_animation.test_disable_cache_warning(anim)
matplotlib.tests.test_animation.test_draw_frame(return_value)
matplotlib.tests.test_animation.test_embed_limit(method_name,caplog,tmpdir,anim)
matplotlib.tests.test_animation.test_exhausted_animation(tmpdir)
matplotlib.tests.test_animation.test_failing_ffmpeg(tmpdir,monkeypatch,anim)
matplotlib.tests.test_animation.test_funcanimation_cache_frame_data(cache_frame_data)
matplotlib.tests.test_animation.test_movie_writer_dpi_default()
matplotlib.tests.test_animation.test_movie_writer_invalid_path(anim)
matplotlib.tests.test_animation.test_movie_writer_registry()
matplotlib.tests.test_animation.test_no_frame_warning(tmpdir)
matplotlib.tests.test_animation.test_no_length_frames(anim)
matplotlib.tests.test_animation.test_null_movie_writer(anim)
matplotlib.tests.test_animation.test_save_animation_smoketest(tmpdir,writer,frame_format,output,anim)
matplotlib.tests.test_animation.test_save_count_override_warnings_has_length(anim)
matplotlib.tests.test_animation.test_save_count_override_warnings_scaler(anim)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_pdf.py----------------------------------------
A:matplotlib.tests.test_backend_pdf.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_pdf.pdfio->io.BytesIO()
A:matplotlib.tests.test_backend_pdf.s->io.BytesIO().getvalue()
A:matplotlib.tests.test_backend_pdf.(X, Y)->numpy.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))
A:matplotlib.tests.test_backend_pdf.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_backend_pdf.pikepdf->pytest.importorskip('pikepdf')
A:matplotlib.tests.test_backend_pdf.data->numpy.zeros((256, 1, 3), dtype=np.uint8)
A:matplotlib.tests.test_backend_pdf.data[:, 0, 0]->numpy.arange(256)
A:matplotlib.tests.test_backend_pdf.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_pdf.buf->io.BytesIO()
A:matplotlib.tests.test_backend_pdf.(image,)->page.images.values()
A:matplotlib.tests.test_backend_pdf.pdf_image->pytest.importorskip('pikepdf').PdfImage(image)
A:matplotlib.tests.test_backend_pdf.pil_image->pytest.importorskip('pikepdf').PdfImage(image).as_pil_image()
A:matplotlib.tests.test_backend_pdf.rgb->numpy.asarray(pil_image.convert('RGB'))
A:matplotlib.tests.test_backend_pdf.annot->next((a for a in annots if a.A.URI == f'{test_url}tex'), None)
A:matplotlib.tests.test_backend_pdf.a->Rectangle([0, 0], 0, 0, facecolor='green', hatch='XXXX')
A:matplotlib.tests.test_backend_pdf.b->Rectangle([0, 0], 0, 0, facecolor='blue', hatch='XXXX')
A:matplotlib.tests.test_backend_pdf.dd->numpy.exp(-(x ** 2 + y ** 2))
A:matplotlib.tests.test_backend_pdf.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_backend_pdf.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_backend_pdf.fpath->str(_get_data_path('fonts/ttf/DejaVuSerif.ttf'))
A:matplotlib.tests.test_backend_pdf.nosubfont->FT2Font(fpath)
A:matplotlib.tests.test_backend_pdf.subfont->FT2Font(get_glyphs_subset(fpath, chars))
A:matplotlib.tests.test_backend_pdf.nosubcmap->FT2Font(fpath).get_charmap()
A:matplotlib.tests.test_backend_pdf.subcmap->FT2Font(get_glyphs_subset(fpath, chars)).get_charmap()
A:matplotlib.tests.test_backend_pdf.fp->matplotlib.font_manager.FontProperties(family=['WenQuanYi Zen Hei'])
matplotlib.tests.test_backend_pdf.test_composite_image()
matplotlib.tests.test_backend_pdf.test_embed_fonts(fontname,fontfile,fonttype)
matplotlib.tests.test_backend_pdf.test_empty_rasterized()
matplotlib.tests.test_backend_pdf.test_failing_latex()
matplotlib.tests.test_backend_pdf.test_glyphs_subset()
matplotlib.tests.test_backend_pdf.test_grayscale_alpha()
matplotlib.tests.test_backend_pdf.test_hatching_legend()
matplotlib.tests.test_backend_pdf.test_indexed_image()
matplotlib.tests.test_backend_pdf.test_invalid_metadata()
matplotlib.tests.test_backend_pdf.test_kerning()
matplotlib.tests.test_backend_pdf.test_multi_font_type3()
matplotlib.tests.test_backend_pdf.test_multi_font_type42()
matplotlib.tests.test_backend_pdf.test_multipage_keep_empty()
matplotlib.tests.test_backend_pdf.test_multipage_metadata(monkeypatch)
matplotlib.tests.test_backend_pdf.test_multipage_pagecount()
matplotlib.tests.test_backend_pdf.test_multipage_properfinalize()
matplotlib.tests.test_backend_pdf.test_pdf_eps_savefig_when_color_is_none(fig_test,fig_ref)
matplotlib.tests.test_backend_pdf.test_pdfpages_fspath()
matplotlib.tests.test_backend_pdf.test_savefig_metadata(monkeypatch)
matplotlib.tests.test_backend_pdf.test_text_rotated_urls()
matplotlib.tests.test_backend_pdf.test_text_urls()
matplotlib.tests.test_backend_pdf.test_text_urls_tex()
matplotlib.tests.test_backend_pdf.test_use14corefonts()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_ticker.py----------------------------------------
A:matplotlib.tests.test_ticker.loc->matplotlib.ticker.LogitLocator()
A:matplotlib.tests.test_ticker.test_value->numpy.array([0.5, 1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0, 128.0, 256.0])
A:matplotlib.tests.test_ticker.mult->matplotlib.ticker.MultipleLocator(base=0.7)
A:matplotlib.tests.test_ticker.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_ticker.additional_data->list(zip(limits, reference))
A:matplotlib.tests.test_ticker.ax->matplotlib.pyplot.figure().add_subplot(2, 2, i)
A:matplotlib.tests.test_ticker.ay->numpy.array(y)
A:matplotlib.tests.test_ticker.expected_ticks->sorted([*expected_low_ticks, 0.5, *1 - expected_low_ticks])
A:matplotlib.tests.test_ticker.maxn_loc->matplotlib.ticker.MaxNLocator(nbins=100, steps=[1, 2, 5, 10])
A:matplotlib.tests.test_ticker.ticks->matplotlib.ticker.LogLocator().tick_values(0.5, top)
A:matplotlib.tests.test_ticker.maxn_ticks->matplotlib.ticker.MaxNLocator(nbins=100, steps=[1, 2, 5, 10]).tick_values(*lims)
A:matplotlib.tests.test_ticker.basic_needed->len(expected_ticks)
A:matplotlib.tests.test_ticker.minor_loc->matplotlib.ticker.LogitLocator(nbins=100, minor=True)
A:matplotlib.tests.test_ticker.major_ticks->matplotlib.ticker.LogitLocator().tick_values(*lims)
A:matplotlib.tests.test_ticker.minor_ticks->matplotlib.ticker.LogitLocator(nbins=100, minor=True).tick_values(*lims)
A:matplotlib.tests.test_ticker.lims2->matplotlib.ticker.LogitLocator().nonsingular(*lims)
A:matplotlib.tests.test_ticker.(vmin2, vmax2)->matplotlib.ticker.LogitLocator().nonsingular(vmin, vmax)
A:matplotlib.tests.test_ticker.fixed->matplotlib.ticker.FixedLocator(range(0, 24), nbins=5)
A:matplotlib.tests.test_ticker.index->matplotlib.ticker.IndexLocator(base=3, offset=4)
A:matplotlib.tests.test_ticker.sym->matplotlib.ticker.SymmetricalLogLocator(base=10, linthresh=1)
A:matplotlib.tests.test_ticker.lctr->matplotlib.ticker.AsinhLocator(linear_width=1, numticks=3, symthresh=0.25, base=0)
A:matplotlib.tests.test_ticker.lctr10->matplotlib.ticker.AsinhLocator(linear_width=1, numticks=8, base=10, subs=(1, 3, 5))
A:matplotlib.tests.test_ticker.lctr5->matplotlib.ticker.AsinhLocator(linear_width=1, numticks=20, base=5)
A:matplotlib.tests.test_ticker.formatter->matplotlib.ticker.NullFormatter()
A:matplotlib.tests.test_ticker.tmp_form->matplotlib.ticker.FormatStrFormatter('%05d')
A:matplotlib.tests.test_ticker.conv->locale.localeconv()
A:matplotlib.tests.test_ticker.sf->matplotlib.ticker.ScalarFormatter()
A:matplotlib.tests.test_ticker.formatter.axis->FakeAxis()
A:matplotlib.tests.test_ticker.fmt->matplotlib.ticker.PercentFormatter(symbol='\\{t}%', is_latex=is_latex)
A:matplotlib.tests.test_ticker.label->matplotlib.ticker.PercentFormatter(symbol='\\{t}%', is_latex=is_latex)._pprint_val(value, domain)
A:matplotlib.tests.test_ticker.minor_tlocs->axis.get_minorticklocs()
A:matplotlib.tests.test_ticker.temp_lf->matplotlib.ticker.LogFormatter()
A:matplotlib.tests.test_ticker.temp_lf.axis->FakeAxis()
A:matplotlib.tests.test_ticker.match->re.match('[^\\d]*\\\\frac\\{(?P<num>\\d+)\\}\\{(?P<deno>\\d+)\\}[^\\d]*$', string)
A:matplotlib.tests.test_ticker.y->TestLogitFormatter.logit_deformatter(fx)
A:matplotlib.tests.test_ticker.decade_test->sorted([10 ** (-i) for i in range(1, 10)] + [1 - 10 ** (-i) for i in range(1, 10)] + [1 / 2])
A:matplotlib.tests.test_ticker.s->formatter(x)
A:matplotlib.tests.test_ticker.x2->float(fx)
A:matplotlib.tests.test_ticker.sx->formatter(x)
A:matplotlib.tests.test_ticker.sx1->formatter(x + 1 / N)
A:matplotlib.tests.test_ticker.min_loc->matplotlib.ticker.LogitLocator(minor=True)
A:matplotlib.tests.test_ticker.min_form->matplotlib.ticker.LogitFormatter(minor=True)
A:matplotlib.tests.test_ticker.formatted->matplotlib.ticker.LogitFormatter(minor=True).format_ticks(ticks)
A:matplotlib.tests.test_ticker.form->matplotlib.ticker.LogitFormatter()
A:matplotlib.tests.test_ticker.fx->matplotlib.ticker.LogitFormatter().format_data_short(x)
A:matplotlib.tests.test_ticker.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_ticker.t->numpy.arange('2018-11-03', '2018-11-06', dtype='datetime64')
A:matplotlib.tests.test_ticker.x->numpy.ones(len(t))
A:matplotlib.tests.test_ticker.ll->matplotlib.ticker.LogLocator()
matplotlib.tests.test_ticker.FakeAxis(self,vmin=1,vmax=10)
matplotlib.tests.test_ticker.FakeAxis.__init__(self,vmin=1,vmax=10)
matplotlib.tests.test_ticker.FakeAxis.get_view_interval(self)
matplotlib.tests.test_ticker.TestAsinhLocator
matplotlib.tests.test_ticker.TestAsinhLocator.test_base_rounding(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_fallback(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_init(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_linear_values(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_near_zero(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_symmetrizing(self)
matplotlib.tests.test_ticker.TestAsinhLocator.test_wide_values(self)
matplotlib.tests.test_ticker.TestAutoMinorLocator
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_additional(self,lim,ref)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_basic(self)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_low_number_of_majorticks(self,nb_majorticks,expected_nb_minorticks)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_number_of_minor_ticks(self,major_step,expected_nb_minordivisions)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_using_all_default_major_steps(self)
matplotlib.tests.test_ticker.TestEngFormatter
matplotlib.tests.test_ticker.TestEngFormatter.test_params(self,unicode_minus,input,expected)
matplotlib.tests.test_ticker.TestFixedLocator
matplotlib.tests.test_ticker.TestFixedLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestFormatStrFormatter
matplotlib.tests.test_ticker.TestFormatStrFormatter.test_basic(self)
matplotlib.tests.test_ticker.TestIndexLocator
matplotlib.tests.test_ticker.TestIndexLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLinearLocator
matplotlib.tests.test_ticker.TestLinearLocator.test_basic(self)
matplotlib.tests.test_ticker.TestLinearLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLogFormatter
matplotlib.tests.test_ticker.TestLogFormatter._sub_labels(self,axis,subs=())
matplotlib.tests.test_ticker.TestLogFormatter.test_LogFormatter_call(self,val)
matplotlib.tests.test_ticker.TestLogFormatter.test_LogFormatter_call_tiny(self,val)
matplotlib.tests.test_ticker.TestLogFormatter.test_pprint(self,value,domain,expected)
matplotlib.tests.test_ticker.TestLogFormatter.test_sublabel(self)
matplotlib.tests.test_ticker.TestLogFormatterExponent
matplotlib.tests.test_ticker.TestLogFormatterExponent.test_basic(self,labelOnlyBase,base,exponent,locs,positions,expected)
matplotlib.tests.test_ticker.TestLogFormatterExponent.test_blank(self)
matplotlib.tests.test_ticker.TestLogFormatterMathtext
matplotlib.tests.test_ticker.TestLogFormatterMathtext.test_min_exponent(self,min_exponent,value,expected)
matplotlib.tests.test_ticker.TestLogFormatterSciNotation
matplotlib.tests.test_ticker.TestLogFormatterSciNotation.test_basic(self,base,value,expected)
matplotlib.tests.test_ticker.TestLogLocator
matplotlib.tests.test_ticker.TestLogLocator.test_basic(self)
matplotlib.tests.test_ticker.TestLogLocator.test_polar_axes(self)
matplotlib.tests.test_ticker.TestLogLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLogLocator.test_switch_to_autolocator(self)
matplotlib.tests.test_ticker.TestLogitFormatter
matplotlib.tests.test_ticker.TestLogitFormatter.logit_deformatter(string)
matplotlib.tests.test_ticker.TestLogitFormatter.test_basic(self,x)
matplotlib.tests.test_ticker.TestLogitFormatter.test_format_data_short(self,N)
matplotlib.tests.test_ticker.TestLogitFormatter.test_invalid(self,x)
matplotlib.tests.test_ticker.TestLogitFormatter.test_logit_deformater(self,fx,x)
matplotlib.tests.test_ticker.TestLogitFormatter.test_minor_number(self)
matplotlib.tests.test_ticker.TestLogitFormatter.test_minor_vs_major(self,method,lims,cases)
matplotlib.tests.test_ticker.TestLogitFormatter.test_one_half(self)
matplotlib.tests.test_ticker.TestLogitFormatter.test_use_overline(self)
matplotlib.tests.test_ticker.TestLogitFormatter.test_variablelength(self,x)
matplotlib.tests.test_ticker.TestLogitLocator
matplotlib.tests.test_ticker.TestLogitLocator.test_basic_major(self,lims,expected_low_ticks)
matplotlib.tests.test_ticker.TestLogitLocator.test_maxn_major(self,lims)
matplotlib.tests.test_ticker.TestLogitLocator.test_minor(self,lims,expected_low_ticks)
matplotlib.tests.test_ticker.TestLogitLocator.test_minor_attr(self)
matplotlib.tests.test_ticker.TestLogitLocator.test_nbins_major(self,lims)
matplotlib.tests.test_ticker.TestLogitLocator.test_nonsingular_nok(self,okval)
matplotlib.tests.test_ticker.TestLogitLocator.test_nonsingular_ok(self,lims)
matplotlib.tests.test_ticker.TestMaxNLocator
matplotlib.tests.test_ticker.TestMaxNLocator.test_basic(self,vmin,vmax,expected)
matplotlib.tests.test_ticker.TestMaxNLocator.test_integer(self,vmin,vmax,steps,expected)
matplotlib.tests.test_ticker.TestMultipleLocator
matplotlib.tests.test_ticker.TestMultipleLocator.test_basic(self)
matplotlib.tests.test_ticker.TestMultipleLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestMultipleLocator.test_view_limits(self)
matplotlib.tests.test_ticker.TestMultipleLocator.test_view_limits_round_numbers(self)
matplotlib.tests.test_ticker.TestNullLocator
matplotlib.tests.test_ticker.TestNullLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestPercentFormatter
matplotlib.tests.test_ticker.TestPercentFormatter.test_basic(self,xmax,decimals,symbol,x,display_range,expected)
matplotlib.tests.test_ticker.TestPercentFormatter.test_latex(self,is_latex,usetex,expected)
matplotlib.tests.test_ticker.TestScalarFormatter
matplotlib.tests.test_ticker.TestScalarFormatter.test_cmr10_substitutions(self,caplog)
matplotlib.tests.test_ticker.TestScalarFormatter.test_cursor_dummy_axis(self,data,expected)
matplotlib.tests.test_ticker.TestScalarFormatter.test_cursor_precision(self,data,expected)
matplotlib.tests.test_ticker.TestScalarFormatter.test_empty_locs(self)
matplotlib.tests.test_ticker.TestScalarFormatter.test_format_data(self,value,expected)
matplotlib.tests.test_ticker.TestScalarFormatter.test_mathtext_ticks(self)
matplotlib.tests.test_ticker.TestScalarFormatter.test_offset_value(self,left,right,offset)
matplotlib.tests.test_ticker.TestScalarFormatter.test_scilimits(self,sci_type,scilimits,lim,orderOfMag,fewticks)
matplotlib.tests.test_ticker.TestScalarFormatter.test_set_use_offset_float(self)
matplotlib.tests.test_ticker.TestScalarFormatter.test_unicode_minus(self,unicode_minus,result)
matplotlib.tests.test_ticker.TestScalarFormatter.test_useMathText(self,use_math_text)
matplotlib.tests.test_ticker.TestScalarFormatter.test_use_locale(self)
matplotlib.tests.test_ticker.TestScalarFormatter.test_use_offset(self,use_offset)
matplotlib.tests.test_ticker.TestStrMethodFormatter
matplotlib.tests.test_ticker.TestStrMethodFormatter.test_basic(self,format,input,expected)
matplotlib.tests.test_ticker.TestSymmetricalLogLocator
matplotlib.tests.test_ticker.TestSymmetricalLogLocator.test_set_params(self)
matplotlib.tests.test_ticker._LogitHelper
matplotlib.tests.test_ticker._LogitHelper.assert_almost_equal(x,y)
matplotlib.tests.test_ticker._LogitHelper.isclose(x,y)
matplotlib.tests.test_ticker.test_NullFormatter()
matplotlib.tests.test_ticker.test_bad_locator_subs(sub)
matplotlib.tests.test_ticker.test_engformatter_usetex_useMathText()
matplotlib.tests.test_ticker.test_majformatter_type()
matplotlib.tests.test_ticker.test_majlocator_type()
matplotlib.tests.test_ticker.test_minformatter_type()
matplotlib.tests.test_ticker.test_minlocator_type()
matplotlib.tests.test_ticker.test_minorticks_rc()
matplotlib.tests.test_ticker.test_remove_overlap(remove_overlapping_locs,expected_num)
matplotlib.tests.test_ticker.test_set_offset_string(formatter)
matplotlib.tests.test_ticker.test_small_range_loglocator(numticks)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_table.py----------------------------------------
A:matplotlib.tests.test_table.yoff->numpy.zeros(len(colLabels))
A:matplotlib.tests.test_table.t->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_table.c->numpy.linspace(0, 1, dim)
A:matplotlib.tests.test_table.colours->matplotlib.pyplot.cm.RdYlGn(c)
A:matplotlib.tests.test_table.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_table.ax1->matplotlib.pyplot.figure().add_subplot(4, 1, 1)
A:matplotlib.tests.test_table.ax2->matplotlib.pyplot.figure().add_subplot(4, 1, 2)
A:matplotlib.tests.test_table.ax3->matplotlib.pyplot.figure().add_subplot(4, 1, 3)
A:matplotlib.tests.test_table.ax4->matplotlib.pyplot.figure().add_subplot(4, 1, 4)
A:matplotlib.tests.test_table.(_, axs)->matplotlib.pyplot.subplots(nrows=len(cells), figsize=(4, len(cells) + 1))
A:matplotlib.tests.test_table.cell->Table(ax).add_cell(1, 2, 1, 1)
A:matplotlib.tests.test_table.code->tuple((s for (_, s) in cell.get_path().iter_segments()))
A:matplotlib.tests.test_table.tb1->matplotlib.pyplot.figure().add_subplot(4, 1, 1).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb2->matplotlib.pyplot.figure().add_subplot(4, 1, 2).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb3->matplotlib.pyplot.figure().add_subplot(4, 1, 3).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb4->matplotlib.pyplot.figure().add_subplot(4, 1, 4).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_table.table->Table(ax)
A:matplotlib.tests.test_table.cell2->CustomCell((0, 0), 1, 2, visible_edges=None)
A:matplotlib.tests.test_table.ax_list->fig_test.subplots()
A:matplotlib.tests.test_table.ax_bbox->fig_ref.subplots()
matplotlib.tests.test_table.test_auto_column()
matplotlib.tests.test_table.test_customcell()
matplotlib.tests.test_table.test_diff_cell_table()
matplotlib.tests.test_table.test_label_colours()
matplotlib.tests.test_table.test_non_square()
matplotlib.tests.test_table.test_table_bbox(fig_test,fig_ref)
matplotlib.tests.test_table.test_table_cells()
matplotlib.tests.test_table.test_zorder()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_fontconfig_pattern.py----------------------------------------
A:matplotlib.tests.test_fontconfig_pattern.f1->FontProperties(family='sans-serif', size=24, weight='bold', style='oblique', variant='small-caps', stretch='expanded')
A:matplotlib.tests.test_fontconfig_pattern.s->str(f1)
A:matplotlib.tests.test_fontconfig_pattern.f2->FontProperties(s)
A:matplotlib.tests.test_fontconfig_pattern.font->FontProperties(s)
A:matplotlib.tests.test_fontconfig_pattern.right->FontProperties(family='serif', size=24, weight='bold', style='oblique', variant='small-caps', stretch='expanded')
matplotlib.tests.test_fontconfig_pattern.test_fontconfig_pattern()
matplotlib.tests.test_fontconfig_pattern.test_fontconfig_str()
matplotlib.tests.test_fontconfig_pattern.test_fontconfig_unknown_constant()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_pyplot.py----------------------------------------
A:matplotlib.tests.test_pyplot.orig_contents->Path(plt.__file__).read_text()
A:matplotlib.tests.test_pyplot.plt_file->tmpdir.join('pyplot.py')
A:matplotlib.tests.test_pyplot.new_contents->tmpdir.join('pyplot.py').read_text('utf-8')
A:matplotlib.tests.test_pyplot.diff_msg->'\n'.join(difflib.unified_diff(orig_contents.split('\n'), new_contents.split('\n'), fromfile='found pyplot.py', tofile='expected pyplot.py', n=0, lineterm=''))
A:matplotlib.tests.test_pyplot.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_pyplot.ax1->matplotlib.pyplot.subplot(111, projection='polar')
A:matplotlib.tests.test_pyplot.ax2->matplotlib.pyplot.subplot(111, polar=True, projection='3d')
A:matplotlib.tests.test_pyplot.ax3->matplotlib.pyplot.subplot(111, polar=True, projection='polar')
A:matplotlib.tests.test_pyplot.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_pyplot.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_pyplot.ax4->matplotlib.pyplot.subplot(1, 2, 1, projection='polar')
A:matplotlib.tests.test_pyplot.created_axes->set()
A:matplotlib.tests.test_pyplot.(ln1,)->matplotlib.pyplot.polar(0.0, 1.0, 'ro')
A:matplotlib.tests.test_pyplot.(ln2,)->matplotlib.pyplot.polar(1.57, 0.5, 'bo')
A:matplotlib.tests.test_pyplot.axref->matplotlib.pyplot.axes([0.2, 0.2, 0.5, 0.5])
A:matplotlib.tests.test_pyplot.axtest->matplotlib.pyplot.axes([0.2, 0.2, 0.5, 0.5], position=[0.1, 0.1, 0.8, 0.8])
A:matplotlib.tests.test_pyplot.fig1->matplotlib.pyplot.figure()
A:matplotlib.tests.test_pyplot.subfigs->matplotlib.pyplot.figure().subfigures(2)
A:matplotlib.tests.test_pyplot.current->matplotlib.pyplot.figure(subfigs[1])
A:matplotlib.tests.test_pyplot.IPython->pytest.importorskip('IPython')
A:matplotlib.tests.test_pyplot.lines->pyplot_docs.read_text().split('\n')
A:matplotlib.tests.test_pyplot.doc_functions->set(extract_documented_functions(lines))
A:matplotlib.tests.test_pyplot.plot_commands->set(plt._get_pyplot_commands())
A:matplotlib.tests.test_pyplot.missing->set(plt._get_pyplot_commands()).difference(doc_functions)
A:matplotlib.tests.test_pyplot.extra->set(extract_documented_functions(lines)).difference(plot_commands)
A:matplotlib.tests.test_pyplot.(tick_pos, tick_labels)->matplotlib.pyplot.xticks(minor=True)
A:matplotlib.tests.test_pyplot.tick_pos->matplotlib.pyplot.gca().get_yticks(minor=True)
A:matplotlib.tests.test_pyplot.tick_labels->matplotlib.pyplot.gca().get_yticklabels(minor=True)
matplotlib.tests.test_plt.figure_hook_example(figure)
matplotlib.tests.test_plt.test_axes_kwargs()
matplotlib.tests.test_plt.test_close()
matplotlib.tests.test_plt.test_copy_docstring_and_deprecators(recwarn)
matplotlib.tests.test_plt.test_doc_plt_summary()
matplotlib.tests.test_plt.test_fallback_position()
matplotlib.tests.test_plt.test_figure_hook()
matplotlib.tests.test_plt.test_gca()
matplotlib.tests.test_plt.test_ioff()
matplotlib.tests.test_plt.test_ion()
matplotlib.tests.test_plt.test_minor_ticks()
matplotlib.tests.test_plt.test_nested_ion_ioff()
matplotlib.tests.test_plt.test_nrows_error()
matplotlib.tests.test_plt.test_plt_box()
matplotlib.tests.test_plt.test_plt_up_to_date(tmpdir)
matplotlib.tests.test_plt.test_polar_second_call()
matplotlib.tests.test_plt.test_pylab_integration()
matplotlib.tests.test_plt.test_set_current_axes_on_subfigure()
matplotlib.tests.test_plt.test_set_current_figure_via_subfigure()
matplotlib.tests.test_plt.test_stackplot_smoke()
matplotlib.tests.test_plt.test_subplot_change_projection()
matplotlib.tests.test_plt.test_subplot_kwarg_collision()
matplotlib.tests.test_plt.test_subplot_polar_normalization()
matplotlib.tests.test_plt.test_subplot_projection_reuse()
matplotlib.tests.test_plt.test_subplot_replace_projection()
matplotlib.tests.test_plt.test_subplot_reuse()
matplotlib.tests.test_plt.test_switch_backend_no_close()
matplotlib.tests.test_pyplot.figure_hook_example(figure)
matplotlib.tests.test_pyplot.test_axes_kwargs()
matplotlib.tests.test_pyplot.test_close()
matplotlib.tests.test_pyplot.test_copy_docstring_and_deprecators(recwarn)
matplotlib.tests.test_pyplot.test_doc_pyplot_summary()
matplotlib.tests.test_pyplot.test_fallback_position()
matplotlib.tests.test_pyplot.test_figure_hook()
matplotlib.tests.test_pyplot.test_gca()
matplotlib.tests.test_pyplot.test_ioff()
matplotlib.tests.test_pyplot.test_ion()
matplotlib.tests.test_pyplot.test_minor_ticks()
matplotlib.tests.test_pyplot.test_nested_ion_ioff()
matplotlib.tests.test_pyplot.test_nrows_error()
matplotlib.tests.test_pyplot.test_polar_second_call()
matplotlib.tests.test_pyplot.test_pylab_integration()
matplotlib.tests.test_pyplot.test_pyplot_box()
matplotlib.tests.test_pyplot.test_pyplot_up_to_date(tmpdir)
matplotlib.tests.test_pyplot.test_set_current_axes_on_subfigure()
matplotlib.tests.test_pyplot.test_set_current_figure_via_subfigure()
matplotlib.tests.test_pyplot.test_stackplot_smoke()
matplotlib.tests.test_pyplot.test_subplot_change_projection()
matplotlib.tests.test_pyplot.test_subplot_kwarg_collision()
matplotlib.tests.test_pyplot.test_subplot_polar_normalization()
matplotlib.tests.test_pyplot.test_subplot_projection_reuse()
matplotlib.tests.test_pyplot.test_subplot_replace_projection()
matplotlib.tests.test_pyplot.test_subplot_reuse()
matplotlib.tests.test_pyplot.test_switch_backend_no_close()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_basic.py----------------------------------------
A:matplotlib.tests.test_basic.source->textwrap.dedent("\n    import sys\n\n    import matplotlib.figure\n    import matplotlib.backend_bases\n    import matplotlib.pyplot\n\n    assert 'matplotlib._tri' not in sys.modules\n    assert 'matplotlib._qhull' not in sys.modules\n    assert 'matplotlib._contour' not in sys.modules\n    assert 'urllib.request' not in sys.modules\n    ")
matplotlib.tests.test_basic.test_lazy_imports()
matplotlib.tests.test_basic.test_override_builtins()
matplotlib.tests.test_basic.test_simple()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_transforms.py----------------------------------------
A:matplotlib.tests.test_transforms.self.underlying_transform->matplotlib.transforms.Affine2D().scale(10, 10)
A:matplotlib.tests.test_transforms.my_trans->AssertingNonAffineTransform()
A:matplotlib.tests.test_transforms.ax->fig.subplots()
A:matplotlib.tests.test_transforms.(line,)->matplotlib.pyplot.plot(np.arange(10), transform=ScaledBy(10))
A:matplotlib.tests.test_transforms.times10->matplotlib.transforms.Affine2D().scale(10)
A:matplotlib.tests.test_transforms.x->numpy.linspace(-5, 5, 10)
A:matplotlib.tests.test_transforms.y->numpy.linspace(1, 5, 20)
A:matplotlib.tests.test_transforms.(xs, ys)->numpy.meshgrid(np.linspace(15, 20, 15), np.linspace(12.4, 12.5, 20))
A:matplotlib.tests.test_transforms.expected->numpy.array([[0, 6], [0, 6], [0, 6]])
A:matplotlib.tests.test_transforms.points->numpy.array([[0, 0], [1, 1], [2, 2]])
A:matplotlib.tests.test_transforms.t->matplotlib.transforms.TransformWrapper(mtransforms.Affine2D())
A:matplotlib.tests.test_transforms.actual->matplotlib.transforms.TransformWrapper(mtransforms.Affine2D()).transform(points)
A:matplotlib.tests.test_transforms.path->Path(points, closed=True)
A:matplotlib.tests.test_transforms.trans->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_transforms.tpath->matplotlib.transforms.Affine2D().transform_path_non_affine(path)
A:matplotlib.tests.test_transforms.result->self.stack2.get_affine().get_matrix()
A:matplotlib.tests.test_transforms.(tpoints, tcodes)->zip(*result)
A:matplotlib.tests.test_transforms.self.ta1->matplotlib.transforms.Affine2D(shorthand_name='ta1').rotate(np.pi / 2)
A:matplotlib.tests.test_transforms.self.ta2->matplotlib.transforms.Affine2D(shorthand_name='ta2').translate(10, 0)
A:matplotlib.tests.test_transforms.self.ta3->matplotlib.transforms.Affine2D(shorthand_name='ta3').scale(1, 2)
A:matplotlib.tests.test_transforms.self.tn1->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn1')
A:matplotlib.tests.test_transforms.self.tn2->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn2')
A:matplotlib.tests.test_transforms.self.tn3->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn3')
A:matplotlib.tests.test_transforms.na_pts->self.stack1.transform_non_affine(points)
A:matplotlib.tests.test_transforms.all_pts->self.stack1.transform(points)
A:matplotlib.tests.test_transforms.na_expected->numpy.array([[1.0, 2.0], [-19.0, 12.0], [np.nan, np.nan], [1.0, 1.0]], dtype=np.float64)
A:matplotlib.tests.test_transforms.all_expected->numpy.array([[11.0, 4.0], [-9.0, 24.0], [np.nan, np.nan], [11.0, 2.0]], dtype=np.float64)
A:matplotlib.tests.test_transforms.expected_result->(self.ta2 + self.ta3).get_matrix()
A:matplotlib.tests.test_transforms.offset->matplotlib.transforms.Affine2D().translate(0, 10)
A:matplotlib.tests.test_transforms.na_offset->NonAffineForTest(mtransforms.Affine2D().translate(10, 10))
A:matplotlib.tests.test_transforms.pth->Path([[0, 0], [0, 10], [10, 10], [10, 0]])
A:matplotlib.tests.test_transforms.patch->matplotlib.patches.Wedge((0, 0), 1, 45, 135, transform=trans)
A:matplotlib.tests.test_transforms.bbox->matplotlib.transforms.Bbox.from_extents(0.0, 0.0, 1.0, 1.0, minpos=1.0)
A:matplotlib.tests.test_transforms.frozen->matplotlib.transforms.Bbox.from_extents(0.0, 0.0, 1.0, 1.0, minpos=1.0).frozen()
A:matplotlib.tests.test_transforms.r1->bbox_from_ext(0, 0, 1, 1)
A:matplotlib.tests.test_transforms.r2->bbox_from_ext(0.5, 0.5, 1.5, 1.5)
A:matplotlib.tests.test_transforms.r3->bbox_from_ext(0.5, 0, 0.75, 0.75)
A:matplotlib.tests.test_transforms.r4->bbox_from_ext(0.5, 1.5, 1, 2.5)
A:matplotlib.tests.test_transforms.r5->bbox_from_ext(1, 1, 2, 2)
A:matplotlib.tests.test_transforms.b->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_transforms.asdict->eval(format(b, fmt), {'Bbox': dict})
A:matplotlib.tests.test_transforms.r->matplotlib.transforms.TransformWrapper(mtransforms.Affine2D()).transform_affine((1, 1))
A:matplotlib.tests.test_transforms.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_transforms.a->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_transforms.angles->numpy.array([20, 45, 60])
A:matplotlib.tests.test_transforms.new_angles->matplotlib.transforms.TransformWrapper(mtransforms.Affine2D()).transform_angles(angles, points)
A:matplotlib.tests.test_transforms.zero_expansion->numpy.array([-0.001, 0.001])
A:matplotlib.tests.test_transforms.out->numpy.array(mtransforms.nonsingular(*args))
A:matplotlib.tests.test_transforms.trans_path->matplotlib.transforms.TransformedPath(path, trans)
A:matplotlib.tests.test_transforms.tpatch->matplotlib.transforms.TransformedPatchPath(patch)
A:matplotlib.tests.test_transforms.orig->matplotlib.transforms.Bbox.unit()
A:matplotlib.tests.test_transforms.locked->matplotlib.transforms.LockableBbox(orig, **{locked_element: 2})
A:matplotlib.tests.test_transforms.s1->copy.deepcopy(s)
A:matplotlib.tests.test_transforms.b1->copy.deepcopy(b)
A:matplotlib.tests.test_transforms.samples->numpy.random.normal(size=10)
A:matplotlib.tests.test_transforms.bb->TransformedBbox(Bbox.unit(), Affine2D().translate(0.25, 0.5))
matplotlib.tests.test_transforms.NonAffineForTest(self,real_trans,*args,**kwargs)
matplotlib.tests.test_transforms.NonAffineForTest.__init__(self,real_trans,*args,**kwargs)
matplotlib.tests.test_transforms.NonAffineForTest.transform_non_affine(self,values)
matplotlib.tests.test_transforms.NonAffineForTest.transform_path_non_affine(self,path)
matplotlib.tests.test_transforms.TestBasicTransform
matplotlib.tests.test_transforms.TestBasicTransform.setup_method(self)
matplotlib.tests.test_transforms.TestBasicTransform.test_affine_simplification(self)
matplotlib.tests.test_transforms.TestBasicTransform.test_contains_branch(self)
matplotlib.tests.test_transforms.TestBasicTransform.test_left_to_right_iteration(self)
matplotlib.tests.test_transforms.TestBasicTransform.test_transform_depth(self)
matplotlib.tests.test_transforms.TestBasicTransform.test_transform_shortcuts(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_axes_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_compound_coords1(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_compound_coords2(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_data_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_predata_transform_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_for_non_affine_transData(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_non_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_pathc_extents_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_pathc_extents_non_affine(self)
matplotlib.tests.test_transforms.assert_bbox_eq(bbox1,bbox2)
matplotlib.tests.test_transforms.test_Affine2D_from_values()
matplotlib.tests.test_transforms.test_affine_inverted_invalidated()
matplotlib.tests.test_transforms.test_bbox_as_strings()
matplotlib.tests.test_transforms.test_bbox_frozen_copies_minpos()
matplotlib.tests.test_transforms.test_bbox_intersection()
matplotlib.tests.test_transforms.test_clipping_of_log()
matplotlib.tests.test_transforms.test_contour_pre_transform_limits()
matplotlib.tests.test_transforms.test_copy()
matplotlib.tests.test_transforms.test_deepcopy()
matplotlib.tests.test_transforms.test_external_transform_api()
matplotlib.tests.test_transforms.test_invalid_arguments()
matplotlib.tests.test_transforms.test_lockable_bbox(locked_element)
matplotlib.tests.test_transforms.test_log_transform()
matplotlib.tests.test_transforms.test_nan_overlap()
matplotlib.tests.test_transforms.test_non_affine_caching()
matplotlib.tests.test_transforms.test_nonsingular()
matplotlib.tests.test_transforms.test_offset_copy_errors()
matplotlib.tests.test_transforms.test_pcolor_pre_transform_limits()
matplotlib.tests.test_transforms.test_pcolormesh_pre_transform_limits()
matplotlib.tests.test_transforms.test_pre_transform_plotting()
matplotlib.tests.test_transforms.test_scale_swapping(fig_test,fig_ref)
matplotlib.tests.test_transforms.test_str_transform()
matplotlib.tests.test_transforms.test_transform_angles()
matplotlib.tests.test_transforms.test_transform_single_point()
matplotlib.tests.test_transforms.test_transformed_patch_path()
matplotlib.tests.test_transforms.test_transformed_path()
matplotlib.tests.test_transforms.test_transformedbbox_contains()
matplotlib.tests.test_transforms.test_transformwrapper()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_ps.py----------------------------------------
A:matplotlib.tests.test_backend_ps.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_ps.s_val->re.sub(b'(?<=\n%%CreationDate: ).*', b'', s_val)
A:matplotlib.tests.test_backend_ps.b_val->re.sub(b'(?<=\n%%CreationDate: ).*', b'', b_val)
A:matplotlib.tests.test_backend_ps.base_tempdir->Path(tmpdir, 'short-1')
A:matplotlib.tests.test_backend_ps.buf->io.StringIO()
A:matplotlib.tests.test_backend_ps.bb->re.search(b'^%%BoundingBox: (.+) (.+) (.+) (.+)$', buf, re.MULTILINE)
A:matplotlib.tests.test_backend_ps.hibb->re.search(b'^%%HiResBoundingBox: (.+) (.+) (.+) (.+)$', buf, re.MULTILINE)
A:matplotlib.tests.test_backend_ps.ax->fig_test.add_subplot()
A:matplotlib.tests.test_backend_ps.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_ps.figure->Figure()
A:matplotlib.tests.test_backend_ps.axs->matplotlib.pyplot.figure().subplots(4, 4, subplot_kw=dict(projection='polar'))
A:matplotlib.tests.test_backend_ps.fp->matplotlib.font_manager.FontProperties(family=['WenQuanYi Zen Hei'])
A:matplotlib.tests.test_backend_ps.rng->numpy.random.default_rng(19680801)
A:matplotlib.tests.test_backend_ps.xvals->numpy.random.default_rng(19680801).uniform(0, 1, 10)
A:matplotlib.tests.test_backend_ps.yvals->numpy.random.default_rng(19680801).uniform(0, 1, 10)
A:matplotlib.tests.test_backend_ps.sizes->numpy.random.default_rng(19680801).uniform(30, 100, 10)
A:matplotlib.tests.test_backend_ps.offsets->numpy.random.default_rng(19680801).uniform(0, 200, 20).reshape(10, 2)
A:matplotlib.tests.test_backend_ps.pc->matplotlib.collections.PathCollection(paths, sizes, zorder=-1, facecolors='yellow', offsets=offsets)
A:matplotlib.tests.test_backend_ps.cmap->matplotlib.colors.ListedColormap(['r', 'g', 'b'])
A:matplotlib.tests.test_backend_ps.norm->matplotlib.colors.BoundaryNorm([-1, -0.5, 0.5, 1], cmap.N)
matplotlib.tests.test_backend_ps.test_bbox()
matplotlib.tests.test_backend_ps.test_colorbar_shift(tmp_path)
matplotlib.tests.test_backend_ps.test_colored_hatch_zero_linewidth()
matplotlib.tests.test_backend_ps.test_d_glyph(tmp_path)
matplotlib.tests.test_backend_ps.test_empty_line()
matplotlib.tests.test_backend_ps.test_failing_latex()
matplotlib.tests.test_backend_ps.test_fonttype(fonttype)
matplotlib.tests.test_backend_ps.test_linedash()
matplotlib.tests.test_backend_ps.test_multi_font_type3()
matplotlib.tests.test_backend_ps.test_multi_font_type42()
matplotlib.tests.test_backend_ps.test_no_duplicate_definition()
matplotlib.tests.test_backend_ps.test_partial_usetex(caplog)
matplotlib.tests.test_backend_ps.test_path_collection()
matplotlib.tests.test_backend_ps.test_patheffects()
matplotlib.tests.test_backend_ps.test_savefig_to_stringio(format,use_log,rcParams,orientation)
matplotlib.tests.test_backend_ps.test_text_clip(fig_test,fig_ref)
matplotlib.tests.test_backend_ps.test_tilde_in_tempfilename(tmpdir)
matplotlib.tests.test_backend_ps.test_transparency()
matplotlib.tests.test_backend_ps.test_transparency_tex()
matplotlib.tests.test_backend_ps.test_type3_font()
matplotlib.tests.test_backend_ps.test_type42_font_without_prep()
matplotlib.tests.test_backend_ps.test_useafm()
matplotlib.tests.test_backend_ps.test_usetex_preamble(caplog)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_axes.py----------------------------------------
A:matplotlib.tests.test_axes.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_axes.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.sc->matplotlib.pyplot.axes().scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
A:matplotlib.tests.test_axes.cbar->Figure().colorbar(cs, ax=ax)
A:matplotlib.tests.test_axes.x->numpy.ones(10)
A:matplotlib.tests.test_axes.ax_test->fig_test.subplots()
A:matplotlib.tests.test_axes.ax_ref->fig_ref.subplots()
A:matplotlib.tests.test_axes.lags->numpy.arange(-maxlags, maxlags + 1)
A:matplotlib.tests.test_axes.a->numpy.zeros((m, n))
A:matplotlib.tests.test_axes.axs_test->fig_test.subplots(2, 3)
A:matplotlib.tests.test_axes.axs_ref->fig_ref.subplots(2, 3)
A:matplotlib.tests.test_axes.targ_funcformatter->matplotlib.ticker.FuncFormatter(_formfunc)
A:matplotlib.tests.test_axes.targ_strformatter->matplotlib.ticker.StrMethodFormatter(formstr)
A:matplotlib.tests.test_axes.vals->numpy.linspace(0, 1, num=5, endpoint=True)
A:matplotlib.tests.test_axes.locs->numpy.sin(np.pi * vals / 2.0)
A:matplotlib.tests.test_axes.majl->matplotlib.pyplot.FixedLocator(locs)
A:matplotlib.tests.test_axes.minl->matplotlib.pyplot.FixedLocator([0.1, 0.2, 0.3])
A:matplotlib.tests.test_axes.fig->Figure()
A:matplotlib.tests.test_axes.ax1->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0)
A:matplotlib.tests.test_axes.ax2->matplotlib.pyplot.axes().twiny()
A:matplotlib.tests.test_axes.ax3->matplotlib.pyplot.axes().twiny().twiny()
A:matplotlib.tests.test_axes.ax_twin->getattr(ax, 'twin{}'.format(twin))()
A:matplotlib.tests.test_axes.x2->numpy.array([0, 1, 2])
A:matplotlib.tests.test_axes.ax_x_on->matplotlib.pyplot.axes().twinx()
A:matplotlib.tests.test_axes.ax_x_off->matplotlib.pyplot.axes().twinx()
A:matplotlib.tests.test_axes.ax_y_on->matplotlib.pyplot.axes().twiny()
A:matplotlib.tests.test_axes.ax_y_off->matplotlib.pyplot.axes().twiny()
A:matplotlib.tests.test_axes.img->matplotlib.pyplot.axes().imshow([[1]])
A:matplotlib.tests.test_axes.ax0->Figure().add_subplot(221)
A:matplotlib.tests.test_axes.(fig, axs)->matplotlib.pyplot.subplots(2, 2, sharex='all', sharey='all')
A:matplotlib.tests.test_axes.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_axes.Z->numpy.random.randn(3, 9)
A:matplotlib.tests.test_axes.t->numpy.random.random_sample((l.size, l.size))
A:matplotlib.tests.test_axes.s->numpy.cos(2.0 * np.pi * t)
A:matplotlib.tests.test_axes.(line,)->matplotlib.pyplot.axes().plot(x2, y2)
A:matplotlib.tests.test_axes.kwargs->product(length_includes_head, shape, head_starts_at_zero)
A:matplotlib.tests.test_axes.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.ann->matplotlib.pyplot.axes().annotate('foo', (0, 1), xytext=(2, 3), arrowprops={})
A:matplotlib.tests.test_axes.day->matplotlib.testing.jpl_units.Duration('ET', 24.0 * 60.0 * 60.0)
A:matplotlib.tests.test_axes.dt->matplotlib.testing.jpl_units.Duration('ET', units.day.convert('sec'))
A:matplotlib.tests.test_axes.dtn->matplotlib.dates.date2num(dt)
A:matplotlib.tests.test_axes.(fig, ((ax1, ax2), (ax3, ax4)))->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_axes.y->numpy.ones((10, 0))
A:matplotlib.tests.test_axes.(line, *_)->fig_ref.subplots().errorbar(x, y, xerr=np.abs(y), yerr=np.abs(y))
A:matplotlib.tests.test_axes.row->numpy.arange(10).reshape((1, -1))
A:matplotlib.tests.test_axes.col->matplotlib.pyplot.axes().scatter(np.arange(5), np.arange(5))
A:matplotlib.tests.test_axes.axs->fig_test.subplots(2, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_axes.pts->numpy.array([(1, 1), (2, 2)], dtype=[('ones', float), ('twos', float)])
A:matplotlib.tests.test_axes.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_axes.t0->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime.datetime(2009, 1, 20))
A:matplotlib.tests.test_axes.tf->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime.datetime(2009, 1, 21))
A:matplotlib.tests.test_axes.data->numpy.random.rand(19, 9)
A:matplotlib.tests.test_axes.hb->matplotlib.pyplot.axes().hexbin(x, y, extent=[0.1, 0.3, 0.6, 0.7], picker=-1)
A:matplotlib.tests.test_axes.mouse_event->SimpleNamespace(x=400, y=300)
A:matplotlib.tests.test_axes.h->matplotlib.pyplot.stairs([1, 2], [0, 1, 2])
A:matplotlib.tests.test_axes.(x, y)->numpy.meshgrid(x, x)
A:matplotlib.tests.test_axes.r->numpy.arange(0, 2, 0.01)
A:matplotlib.tests.test_axes.c->pd.Series([1, 1, 1, 1, 1, 0, 0, 0], index=ids)
A:matplotlib.tests.test_axes.clip_transform->numpy.ones(10).get_transform()
A:matplotlib.tests.test_axes.clip_path->matplotlib.transforms.TransformedPath(clip_path, clip_transform)
A:matplotlib.tests.test_axes.verts->numpy.array([[-5.45, 0.0], [-5.45, 0.0], [-5.29, 0.0], [-5.29, 0.0], [-5.13, 0.0], [-5.13, 0.0], [-4.97, 0.0], [-4.97, 0.0], [-4.81, 0.0], [-4.81, 0.0], [-4.65, 0.0], [-4.65, 0.0], [-4.49, 0.0], [-4.49, 0.0], [-4.33, 0.0], [-4.33, 0.0], [-4.17, 0.0], [-4.17, 0.0], [-4.01, 0.0], [-4.01, 0.0], [-3.85, 0.0], [-3.85, 0.0], [-3.69, 0.0], [-3.69, 0.0], [-3.53, 0.0], [-3.53, 0.0], [-3.37, 0.0], [-3.37, 0.0], [-3.21, 0.0], [-3.21, 0.01], [-3.05, 0.01], [-3.05, 0.01], [-2.89, 0.01], [-2.89, 0.01], [-2.73, 0.01], [-2.73, 0.02], [-2.57, 0.02], [-2.57, 0.04], [-2.41, 0.04], [-2.41, 0.04], [-2.25, 0.04], [-2.25, 0.06], [-2.09, 0.06], [-2.09, 0.08], [-1.93, 0.08], [-1.93, 0.1], [-1.77, 0.1], [-1.77, 0.12], [-1.61, 0.12], [-1.61, 0.14], [-1.45, 0.14], [-1.45, 0.17], [-1.3, 0.17], [-1.3, 0.19], [-1.14, 0.19], [-1.14, 0.22], [-0.98, 0.22], [-0.98, 0.25], [-0.82, 0.25], [-0.82, 0.27], [-0.66, 0.27], [-0.66, 0.29], [-0.5, 0.29], [-0.5, 0.3], [-0.34, 0.3], [-0.34, 0.32], [-0.18, 0.32], [-0.18, 0.33], [-0.02, 0.33], [-0.02, 0.32], [0.13, 0.32], [0.13, 0.33], [0.29, 0.33], [0.29, 0.31], [0.45, 0.31], [0.45, 0.3], [0.61, 0.3], [0.61, 0.28], [0.77, 0.28], [0.77, 0.25], [0.93, 0.25], [0.93, 0.22], [1.09, 0.22], [1.09, 0.19], [1.25, 0.19], [1.25, 0.17], [1.41, 0.17], [1.41, 0.15], [1.57, 0.15], [1.57, 0.12], [1.73, 0.12], [1.73, 0.1], [1.89, 0.1], [1.89, 0.08], [2.05, 0.08], [2.05, 0.07], [2.21, 0.07], [2.21, 0.05], [2.37, 0.05], [2.37, 0.04], [2.53, 0.04], [2.53, 0.02], [2.69, 0.02], [2.69, 0.02], [2.85, 0.02], [2.85, 0.01], [3.01, 0.01], [3.01, 0.01], [3.17, 0.01], [3.17, 0.0], [3.33, 0.0], [3.33, 0.0], [3.49, 0.0], [3.49, 0.0], [3.65, 0.0], [3.65, 0.0], [3.81, 0.0], [3.81, 0.0], [3.97, 0.0], [3.97, 0.0], [4.13, 0.0], [4.13, 0.0], [4.29, 0.0], [4.29, 0.0], [4.45, 0.0], [4.45, 0.0], [4.61, 0.0], [4.61, 0.0], [4.77, 0.0], [4.77, 0.0], [4.93, 0.0], [4.93, 0.0]])
A:matplotlib.tests.test_axes.y1->numpy.random.normal(10, 3, 20)
A:matplotlib.tests.test_axes.y2->numpy.random.normal(3, 1, 20)
A:matplotlib.tests.test_axes.p->matplotlib.path.Path(verts)
A:matplotlib.tests.test_axes.prof->numpy.array([7.9, 6.6, 3.8])
A:matplotlib.tests.test_axes.Zm->numpy.ma.masked_where(np.abs(Qz) < 0.5 * np.max(Qz), Z)
A:matplotlib.tests.test_axes.(fig, (ax1, ax2, ax3))->matplotlib.pyplot.subplots(1, 3)
A:matplotlib.tests.test_axes.vir->matplotlib.colormaps['viridis'].resampled(16)
A:matplotlib.tests.test_axes.colors->numpy.arange(N + 1)
A:matplotlib.tests.test_axes.cmap->matplotlib.colormaps['viridis'].resampled(16)
A:matplotlib.tests.test_axes.base->datetime.datetime(2013, 1, 1)
A:matplotlib.tests.test_axes.(z1, z2)->numpy.meshgrid(np.arange(20), np.arange(20))
A:matplotlib.tests.test_axes.xmask->numpy.broadcast_to([False, True, False], x.shape)
A:matplotlib.tests.test_axes.masked_x->numpy.ma.array(x, mask=xmask)
A:matplotlib.tests.test_axes.mask->numpy.broadcast_to([True, False] * 5, Z.shape)
A:matplotlib.tests.test_axes.masked_Z->numpy.ma.array(Z, mask=mask)
A:matplotlib.tests.test_axes.masked_X->numpy.ma.array(X, mask=mask)
A:matplotlib.tests.test_axes.masked_Y->numpy.ma.array(Y, mask=mask)
A:matplotlib.tests.test_axes.theta->numpy.linspace(0, 2 * np.pi, 21)
A:matplotlib.tests.test_axes.rtheta->numpy.deg2rad(angle)
A:matplotlib.tests.test_axes.R->numpy.array([[np.cos(rtheta), -np.sin(rtheta)], [np.sin(rtheta), np.cos(rtheta)]])
A:matplotlib.tests.test_axes.e1->matplotlib.patches.Arc((xcenter, ycenter), width, height, angle=angle, linewidth=2, fill=False, zorder=2)
A:matplotlib.tests.test_axes.e2->matplotlib.patches.Arc((xcenter, ycenter), width, height, angle=angle, linewidth=2, fill=False, zorder=2)
A:matplotlib.tests.test_axes.(fix, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.m->matplotlib.pyplot.axes().titleOffsetTrans.get_matrix()
A:matplotlib.tests.test_axes.gs->matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
A:matplotlib.tests.test_axes.rects->matplotlib.pyplot.axes().bar([1, 2], [3, -4])
A:matplotlib.tests.test_axes.y_vals->numpy.arange(5)
A:matplotlib.tests.test_axes.(time_axis, y_axis)->numpy.meshgrid(times, y_vals)
A:matplotlib.tests.test_axes.z_data->numpy.arange(shape[0] * shape[1])
A:matplotlib.tests.test_axes.im->axs[1, 1].imshow(arr, origin='lower', cmap=mpl.colormaps['plasma'])
A:matplotlib.tests.test_axes.df->pd.DataFrame({'a': range(2), 'b': range(2)})
A:matplotlib.tests.test_axes.df['date']->pd.to_datetime(df[['year', 'month', 'day']])
A:matplotlib.tests.test_axes.monthly->df[['date', 'value']].groupby(['date']).sum()
A:matplotlib.tests.test_axes.bar_container->matplotlib.pyplot.axes().barh('col', value, label=label, left=last)
A:matplotlib.tests.test_axes.values->numpy.sin(range(len(dates)))
A:matplotlib.tests.test_axes.rleft->bc[r - 1].get_corners()
A:matplotlib.tests.test_axes.rright->bc[r].get_corners()
A:matplotlib.tests.test_axes.rng->numpy.random.RandomState(57483)
A:matplotlib.tests.test_axes.(mpl_heights, _, _)->matplotlib.pyplot.hist(t, bins=bins, density=True)
A:matplotlib.tests.test_axes.(np_heights, _)->numpy.histogram(t, bins=bins, density=True)
A:matplotlib.tests.test_axes.(_, bins, _)->matplotlib.pyplot.hist(np.random.rand(10), 'auto', range=(0, 1), density=True)
A:matplotlib.tests.test_axes.(hists, _, _)->matplotlib.pyplot.hist(data)
A:matplotlib.tests.test_axes.hists->numpy.asarray(hists)
A:matplotlib.tests.test_axes.test_axes->fig_test.subplots(2, 2).flatten()
A:matplotlib.tests.test_axes.ref_axes->fig_ref.subplots(2, 2).flatten()
A:matplotlib.tests.test_axes.test_ax->fig_test.add_subplot()
A:matplotlib.tests.test_axes.ref_ax->fig_ref.add_subplot()
A:matplotlib.tests.test_axes.yn->numpy.ones((10, 0)).copy()
A:matplotlib.tests.test_axes.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.st->fig_ref.add_subplot().stairs([1, 2, 3], fill=True)
A:matplotlib.tests.test_axes.(x, y, z)->contour_dat()
A:matplotlib.tests.test_axes.cs->matplotlib.pyplot.axes().contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2), cmap=mpl.colormaps['RdBu'], vmin=-0.6, vmax=0.6, extend='both')
A:matplotlib.tests.test_axes.cs1->matplotlib.pyplot.axes().contour(x, y, z, levels=np.arange(-2.2, -0.599, 0.2), colors=['y'], linestyles='solid', linewidths=2)
A:matplotlib.tests.test_axes.cs2->matplotlib.pyplot.axes().contour(x, y, z, levels=np.arange(0.6, 2.2, 0.2), colors=['c'], linewidths=2)
A:matplotlib.tests.test_axes.(fig, (ax0, ax1, ax2))->matplotlib.pyplot.subplots(ncols=3)
A:matplotlib.tests.test_axes.x0->numpy.arange(-10, 10, 0.3)
A:matplotlib.tests.test_axes.y0->numpy.array([1.1, 2.2, 3.3, 4.4])
A:matplotlib.tests.test_axes.coll->matplotlib.pyplot.scatter([1, 2, 3, 4], [1, np.nan, np.nan, 1], edgecolor=(1, 0, 0, 1))
A:matplotlib.tests.test_axes.pc->matplotlib.pyplot.axes().scatter(x, np.full(5, 3), c='C3', marker='x', s=100, linewidths=[*range(1, 5), None])
A:matplotlib.tests.test_axes._result->namedtuple('_result', 'c, colors')
A:matplotlib.tests.test_axes.(c, colors, _edgecolors)->matplotlib.axes.Axes._parse_scatter_color_args(*params, get_next_color_func=get_next_color)
A:matplotlib.tests.test_axes.edgecolors->product(length_includes_head, shape, head_starts_at_zero).pop('edgecolors', None)
A:matplotlib.tests.test_axes.(_, _, result_edgecolors)->matplotlib.axes.Axes._parse_scatter_color_args(c, edgecolors, kwargs, xsize=2, get_next_color_func=get_next_color)
A:matplotlib.tests.test_axes.prj->Polar()
A:matplotlib.tests.test_axes.prj2->Polar()
A:matplotlib.tests.test_axes.(fig1, ax1)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.(fig2, ax2)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.d->layers(3, 100)
A:matplotlib.tests.test_axes.logstats->matplotlib.cbook.boxplot_stats(np.random.lognormal(mean=1.25, sigma=1.0, size=(37, 4)), **stats_kwargs)
A:matplotlib.tests.test_axes.(fig, [ax1, ax2])->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_axes.CIs->numpy.array([[-1.5, 3.0], [-1.0, 3.5]])
A:matplotlib.tests.test_axes.test_data->numpy.arange(100)
A:matplotlib.tests.test_axes.bxp_handle->matplotlib.pyplot.axes().boxplot(test_data, showmeans=True)
A:matplotlib.tests.test_axes.bp->matplotlib.pyplot.axes().boxplot(x, sym='o')
A:matplotlib.tests.test_axes.s1->pd.Series(np.random.normal(size=7), index=[9, 8, 7, 6, 5, 4, 3])
A:matplotlib.tests.test_axes.s2->pd.Series(np.random.normal(size=9), index=list('ABCDEFGHI'))
A:matplotlib.tests.test_axes.s3->pd.Series(np.random.normal(size=11))
A:matplotlib.tests.test_axes.old_xlim->matplotlib.pyplot.axes().get_xlim()
A:matplotlib.tests.test_axes.new_xlim->matplotlib.pyplot.axes().get_xlim()
A:matplotlib.tests.test_axes.b->matplotlib.pyplot.bar(np.array(xs, dtype=np.uint8), [2, 3, 4, 5], align='edge')
A:matplotlib.tests.test_axes.ylower->numpy.maximum(0.01, y - yerr)
A:matplotlib.tests.test_axes.(e1, _, _)->matplotlib.pyplot.axes().errorbar(x, y, c=None)
A:matplotlib.tests.test_axes.(e2, _, _)->matplotlib.pyplot.axes().errorbar(x, 2 * y, c=None)
A:matplotlib.tests.test_axes.(ln1,)->matplotlib.pyplot.axes().plot(x, 4 * y)
A:matplotlib.tests.test_axes.axt->fig_test.subplots()
A:matplotlib.tests.test_axes.axr->fig_ref.subplots()
A:matplotlib.tests.test_axes.uplims->numpy.zeros_like(x)
A:matplotlib.tests.test_axes.lolims->numpy.zeros_like(x)
A:matplotlib.tests.test_axes.yerr->list(range(10))
A:matplotlib.tests.test_axes.(plotline, _, barlines)->matplotlib.pyplot.errorbar(x, y, xerr=1, yerr=1, fmt='none')
A:matplotlib.tests.test_axes.(plotline, _, _)->matplotlib.pyplot.errorbar(x, y, xerr=1, yerr=1, ls='None', marker='s', fillstyle='full', drawstyle='steps-mid', dash_capstyle='round', dash_joinstyle='miter', solid_capstyle='butt', solid_joinstyle='bevel')
A:matplotlib.tests.test_axes._cycle->cycler(ls=['--', ':', '-.'], marker=['s', 's', 'o'], mfc=['k', 'y', 'c'], color=['b', 'g', 'r'])
A:matplotlib.tests.test_axes.xs->range(5)
A:matplotlib.tests.test_axes.ys->numpy.array([1, 2, np.nan, np.nan, 3])
A:matplotlib.tests.test_axes.es->numpy.array([4, 5, np.nan, np.nan, 6])
A:matplotlib.tests.test_axes.d1->numpy.linspace(1, 3, 20)
A:matplotlib.tests.test_axes.d2->numpy.linspace(0, 10, 50)
A:matplotlib.tests.test_axes.w1->numpy.linspace(0.01, 3.5, 50)
A:matplotlib.tests.test_axes.w2->numpy.linspace(0.05, 2.0, 20)
A:matplotlib.tests.test_axes.(_, _, (polygon,))->matplotlib.pyplot.hist(data, bins=bins, bottom=[1, 2, 1.5], histtype='step')
A:matplotlib.tests.test_axes.(_, _, patches)->matplotlib.pyplot.hist([data_1, data_2], bins=bins, stacked=True, bottom=[1, 2, 1.5], histtype='step')
A:matplotlib.tests.test_axes.(_, _, bars)->matplotlib.pyplot.axes().hist([0, 1], label='00')
A:matplotlib.tests.test_axes.kw->dict(ms=100, mew=20)
A:matplotlib.tests.test_axes.lon->numpy.linspace(-np.pi, np.pi, 360)
A:matplotlib.tests.test_axes.(lon, lat)->numpy.meshgrid(lon, lat)
A:matplotlib.tests.test_axes.xy->numpy.arange(10)
A:matplotlib.tests.test_axes.ll2->matplotlib.pyplot.axes().transProjection.inverted().transform(xy)
A:matplotlib.tests.test_axes.ll->matplotlib.pyplot.axes().transProjection.inverted().transform(xy)
A:matplotlib.tests.test_axes.xy2->matplotlib.pyplot.axes().transProjection.transform(ll)
A:matplotlib.tests.test_axes.data1->numpy.random.random([20]).tolist()
A:matplotlib.tests.test_axes.data2->numpy.random.random([10]).tolist()
A:matplotlib.tests.test_axes.num_datasets->len(data)
A:matplotlib.tests.test_axes.axobj->Figure().add_subplot()
A:matplotlib.tests.test_axes.colls->Figure().add_subplot().eventplot('pos', colors='c', lineoffsets='lo', linelengths='ll', data=data)
A:matplotlib.tests.test_axes.num_collections->len(colls)
A:matplotlib.tests.test_axes.expected->numpy.broadcast_to(mcolors.to_rgba_array(expected), (len(data), 4))
A:matplotlib.tests.test_axes.collections->matplotlib.pyplot.axes().eventplot([[0, 2, 4], [1, 3, 5, 7]], alpha=[0.5, 0.7])
A:matplotlib.tests.test_axes.markers->sorted(matplotlib.markers.MarkerStyle.markers, key=lambda x: str(type(x)) + str(x))
A:matplotlib.tests.test_axes.(fig2, (ax2, ax3, ax4))->matplotlib.pyplot.subplots(nrows=3, figsize=(4, 8))
A:matplotlib.tests.test_axes.(fig3, ax5)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.x5->numpy.ma.masked_equal([2, 4, 6, 8, 10, 12], 8)
A:matplotlib.tests.test_axes.ymin5->numpy.ma.masked_equal([0, 1, -1, 0, 2, 1], 2)
A:matplotlib.tests.test_axes.ymax5->numpy.ma.masked_equal([13, 14, 15, 16, 17, 18], 18)
A:matplotlib.tests.test_axes.lines->matplotlib.pyplot.axes().plot([], [], [], [])
A:matplotlib.tests.test_axes.y5->numpy.ma.masked_equal([2, 4, 6, 8, 10, 12], 8)
A:matplotlib.tests.test_axes.xmin5->numpy.ma.masked_equal([0, 1, -1, 0, 2, 1], 2)
A:matplotlib.tests.test_axes.xmax5->numpy.ma.masked_equal([13, 14, 15, 16, 17, 18], 18)
A:matplotlib.tests.test_axes.(fig, ax_lst)->matplotlib.pyplot.subplots(2, 2, sharex='all', sharey='all')
A:matplotlib.tests.test_axes.ax_lst->ax_lst.flatten().flatten()
A:matplotlib.tests.test_axes.p1->matplotlib.collections.PatchCollection([c], match_original=True)
A:matplotlib.tests.test_axes.p2->matplotlib.collections.PatchCollection([c], match_original=True)
A:matplotlib.tests.test_axes.NFFT_freqs->int(1000 * Fs / np.min(fstims))
A:matplotlib.tests.test_axes.y_freqs->(np.sin(2 * np.pi * np.outer(x, fstims1)) * 10 ** np.arange(3)).sum(axis=1)
A:matplotlib.tests.test_axes.NFFT_noise->int(1000 * Fs / 11)
A:matplotlib.tests.test_axes.y_noise->numpy.concatenate([np.random.standard_normal(n), np.random.rand(n)])
A:matplotlib.tests.test_axes.pad_to->int(2 ** np.ceil(np.log2(NFFT)))
A:matplotlib.tests.test_axes.(spec, freqs, t, im)->matplotlib.pyplot.specgram(np.ones(300), Fs=None, scale='linear')
A:matplotlib.tests.test_axes.(xmin, xmax, freq0, freq1)->axs[1, 1].imshow(arr, origin='lower', cmap=mpl.colormaps['plasma']).get_extent()
A:matplotlib.tests.test_axes.signal->numpy.sin(t)
A:matplotlib.tests.test_axes.ys_freqs->numpy.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1)
A:matplotlib.tests.test_axes.ret->matplotlib.pyplot.axes().csd(*ys, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, **kwargs)
A:matplotlib.tests.test_axes.NFFT->int(1000 * Fs / min(fstims1))
A:matplotlib.tests.test_axes.(spec, freqs, line)->matplotlib.pyplot.axes().phase_spectrum(y, sides=sides, **kwargs)
A:matplotlib.tests.test_axes.ax_twinx->fig_test.subplots().twinx()
A:matplotlib.tests.test_axes.ax_twiny->fig_test.subplots().twiny()
A:matplotlib.tests.test_axes.host->Figure().add_subplot()
A:matplotlib.tests.test_axes.par1->Figure().add_subplot().twinx()
A:matplotlib.tests.test_axes.par2->Figure().add_subplot().twinx()
A:matplotlib.tests.test_axes.(p1,)->Figure().add_subplot().plot([0, 1, 2], [0, 1, 2], 'b-')
A:matplotlib.tests.test_axes.(p2,)->Figure().add_subplot().twinx().plot([0, 1, 2], [0, 3, 2], 'r-')
A:matplotlib.tests.test_axes.(p3,)->Figure().add_subplot().twinx().plot([0, 1, 2], [50, 30, 15], 'g-')
A:matplotlib.tests.test_axes.tkw->dict(size=4, width=1.5)
A:matplotlib.tests.test_axes.bad_lim->matplotlib.dates.num2date(1)
A:matplotlib.tests.test_axes.(x0, x1)->axs[1].get_xlim()
A:matplotlib.tests.test_axes.(y0, y1)->axs[1].get_ylim()
A:matplotlib.tests.test_axes.(fig, axes)->matplotlib.pyplot.subplots(2, 3)
A:matplotlib.tests.test_axes.textprops->dict(horizontalalignment='center', verticalalignment='top', rotation=90, rotation_mode='anchor', size=12, color='red')
A:matplotlib.tests.test_axes.(_, texts, autopct)->matplotlib.pyplot.gca().pie(data, labels=labels, autopct='%.2f', textprops=textprops)
A:matplotlib.tests.test_axes.t1->matplotlib.pyplot.axes().pie(x=x, normalize=True)
A:matplotlib.tests.test_axes.t2->matplotlib.pyplot.axes().pie(x=x, normalize=False)
A:matplotlib.tests.test_axes.(wedges, _)->fig_ref.subplots().pie(x)
A:matplotlib.tests.test_axes.ymin->min(data)
A:matplotlib.tests.test_axes.ymax->max(data)
A:matplotlib.tests.test_axes.(fig3, ax3)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_axes.before->matplotlib.pyplot.axes().xaxis.offsetText.get_position()
A:matplotlib.tests.test_axes.after->matplotlib.pyplot.axes().xaxis.offsetText.get_position()
A:matplotlib.tests.test_axes.err_cycler->cycler('err', [1, [1, 1, 1, 1, 1], [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], np.ones(5), np.ones((2, 5)), None])
A:matplotlib.tests.test_axes.xerr_cy->cycler('xerr', err_cycler)
A:matplotlib.tests.test_axes.yerr_cy->cycler('yerr', err_cycler)
A:matplotlib.tests.test_axes.eb->matplotlib.pyplot.axes().errorbar(**kwargs)
A:matplotlib.tests.test_axes.(x, y1)->axs[0].title.get_position()
A:matplotlib.tests.test_axes.(x, y2)->axs[1].title.get_position()
A:matplotlib.tests.test_axes.orig_xlim->ax_lst[0][1].get_xlim()
A:matplotlib.tests.test_axes.l->numpy.arange(-80, 90, 40)
A:matplotlib.tests.test_axes.d0->datetime.datetime(2018, 11, 9, 0, 0, 0)
A:matplotlib.tests.test_axes.pp->matplotlib.pyplot.axes().broken_barh([(d0, datetime.timedelta(hours=1))], [1, 2])
A:matplotlib.tests.test_axes.time->pd.date_range('2000-01-01', periods=10)
A:matplotlib.tests.test_axes.depth->numpy.arange(20)
A:matplotlib.tests.test_axes.dates->numpy.arange('2005-02', '2005-03', dtype='datetime64[D]')
A:matplotlib.tests.test_axes.without_zero_index->df[np.array(df.index) % 2 == 1].copy()
A:matplotlib.tests.test_axes.ser_1->pd.Series(data=[1, 2, 2, 3, 3, 4, 4, 4, 4, 5])
A:matplotlib.tests.test_axes.translated_major_kw->axis._translate_tick_params(axis._major_tick_kw, reverse=True)
A:matplotlib.tests.test_axes.translated_minor_kw->axis._translate_tick_params(axis._minor_tick_kw, reverse=True)
A:matplotlib.tests.test_axes.new_major_style->axis._translate_tick_params(new_major_style_translated)
A:matplotlib.tests.test_axes.new_minor_style->axis._translate_tick_params(new_minor_style_translated)
A:matplotlib.tests.test_axes.axis_1->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_axes.(ln,)->matplotlib.pyplot.axes().plot(range(5), rasterized=True, zorder=1)
A:matplotlib.tests.test_axes.circ->matplotlib.patches.Circle((3, 3), color='r')
A:matplotlib.tests.test_axes.xlabel2->matplotlib.pyplot.axes().twiny().set_xlabel('Xlabel2')
A:matplotlib.tests.test_axes.title->matplotlib.pyplot.axes().set_title('Title')
A:matplotlib.tests.test_axes.renderer->Figure().canvas.get_renderer()
A:matplotlib.tests.test_axes.tt->matplotlib.pyplot.axes().set_title('Boo')
A:matplotlib.tests.test_axes.uv->numpy.linspace(0, 50, len(dates))
A:matplotlib.tests.test_axes.brs->matplotlib.pyplot.axes().bar(range(3), range(3))
A:matplotlib.tests.test_axes.(fix, (ax, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_axes.cc->matplotlib.pyplot.axes().fill_between(range(3), range(3), **{el: 'k'})
A:matplotlib.tests.test_axes.target->matplotlib.colors.to_rgba('k')
A:matplotlib.tests.test_axes.edge_target->matplotlib.colors.to_rgba('k')
A:matplotlib.tests.test_axes.face_target->matplotlib.colors.to_rgba('C{}'.format(j))
A:matplotlib.tests.test_axes.(xlim0, xlim1)->matplotlib.pyplot.axes().get_xlim()
A:matplotlib.tests.test_axes.transform->matplotlib.pyplot.axes().xaxis.get_transform()
A:matplotlib.tests.test_axes.(xlim0t, xlim1t)->matplotlib.pyplot.axes().xaxis.get_transform().transform([xlim0, xlim1])
A:matplotlib.tests.test_axes.(x0t, x1t)->matplotlib.pyplot.axes().xaxis.get_transform().transform([10, 100])
A:matplotlib.tests.test_axes.(rect1, rect2)->matplotlib.pyplot.axes().bar([0, 1], [0, 1], edgecolor=(0.1, 0.2, 0.3, 0.4))
A:matplotlib.tests.test_axes.xtwin->matplotlib.pyplot.axes().twinx()
A:matplotlib.tests.test_axes.bb->matplotlib.pyplot.axes().get_window_extent(renderer)
A:matplotlib.tests.test_axes.bb2->matplotlib.pyplot.axes().twiny().get_position()
A:matplotlib.tests.test_axes.(rec, connectors)->matplotlib.pyplot.axes().indicate_inset_zoom(axin1)
A:matplotlib.tests.test_axes.xx->numpy.array([[0.6325, 0.692308], [0.8425, 0.907692]])
A:matplotlib.tests.test_axes.axin1->matplotlib.pyplot.axes().inset_axes([0.7, 0.7, 0.35, 0.35])
A:matplotlib.tests.test_axes.axins->matplotlib.pyplot.axes().inset_axes([0.4, 0.5, 0.3, 0.3])
A:matplotlib.tests.test_axes.(rect, bounds)->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).indicate_inset([2, 2, 5, 4], ax2)
A:matplotlib.tests.test_axes.res_xlim->matplotlib.pyplot.axes().get_xlim()
A:matplotlib.tests.test_axes.res_ylim->matplotlib.pyplot.axes().get_ylim()
A:matplotlib.tests.test_axes.ids->range(10, 18)
A:matplotlib.tests.test_axes.secax->matplotlib.pyplot.axes().secondary_xaxis('top')
A:matplotlib.tests.test_axes.axisr->matplotlib.patches.Rectangle((bb.x0, bb.y0), width=bb.width, height=bb.height, linewidth=0.7, edgecolor='y', facecolor='none', transform=None, zorder=3)
A:matplotlib.tests.test_axes.spiner->matplotlib.patches.Rectangle((bb.x0, bb.y0), width=bb.width, height=bb.height, linewidth=0.7, edgecolor='green', facecolor='none', transform=None, zorder=3)
A:matplotlib.tests.test_axes.rect2->matplotlib.patches.Rectangle((bb2.x0, bb2.y0), width=bb2.width, height=bb2.height, linewidth=3, edgecolor='red', facecolor='none', transform=None, zorder=1)
A:matplotlib.tests.test_axes.(bbaxis, bbspines, bbax, bbtb)->color_boxes(fig, ax)
A:matplotlib.tests.test_axes.targetbb->matplotlib.transforms.Bbox.from_bounds(*targets[n])
A:matplotlib.tests.test_axes.extent->matplotlib.pyplot.axes().axis(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)
A:matplotlib.tests.test_axes.(bins, edges, _)->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).hist(data)
A:matplotlib.tests.test_axes.(nanbins, nanedges, _)->matplotlib.pyplot.axes().twiny().hist(nan_data)
A:matplotlib.tests.test_axes.barcont->matplotlib.pyplot.axes().bar(x=x, height=x, yerr=x, capsize=5, zorder=3)
A:matplotlib.tests.test_axes.pos->Figure().transFigure.transform_bbox(ax.get_position())
A:matplotlib.tests.test_axes.axtwin->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).twinx()
A:matplotlib.tests.test_axes.bb1->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).get_position()
A:matplotlib.tests.test_axes.bbt->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).twinx().get_position()
A:matplotlib.tests.test_axes.ticks->matplotlib.pyplot.axes().yaxis.get_major_ticks()
A:matplotlib.tests.test_axes.get_autoscale_on->getattr(ax, f'get_autoscale{axis}_on')
A:matplotlib.tests.test_axes.set_lim->getattr(ax, f'set_{axis}lim')
A:matplotlib.tests.test_axes.get_lim->getattr(ax, f'get_{axis}lim')
A:matplotlib.tests.test_axes.(l,)->fig_test.add_subplot(projection='polar').plot([0, np.pi / 2], [1, 2])
A:matplotlib.tests.test_axes.(ax1, ax2)->Figure().subplots(2, 1, sharex='all')
A:matplotlib.tests.test_axes.xlim->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).get_xlim()
A:matplotlib.tests.test_axes.init_pos->Figure().add_axes([0.6, 0.6, 0.3, 0.3], sharex=ax0).get_position()
A:matplotlib.tests.test_axes.color->numpy.array([0.1, 0.2, 0.3])
A:matplotlib.tests.test_axes.labels->matplotlib.pyplot.axes().bar_label(bars)
A:matplotlib.tests.test_axes._->matplotlib.pyplot.axes().bar_label(rects, fmt=10)
A:matplotlib.tests.test_axes.bars->matplotlib.pyplot.axes().bar(barx, barheights, bottom=barstarts)
A:matplotlib.tests.test_axes.patch->matplotlib.pyplot.axes().add_patch(mpatches.Rectangle((0, 0), 5, 5))
A:matplotlib.tests.test_axes.text->matplotlib.pyplot.axes().text(0, 0, 'foo')
A:matplotlib.tests.test_axes.line->matplotlib.pyplot.axes().plot([1, 2, 3], 'k3')
A:matplotlib.tests.test_axes.match->match.replace('not', 'neither a data key nor').replace('not', 'neither a data key nor')
A:matplotlib.tests.test_axes.leg->matplotlib.pyplot.axes().legend()
A:matplotlib.tests.test_axes.minx->numpy.min(verts[:, 0])
A:matplotlib.tests.test_axes.miny->numpy.min(verts[:, 1])
A:matplotlib.tests.test_axes.maxx->numpy.max(verts[:, 0])
A:matplotlib.tests.test_axes.maxy->numpy.max(verts[:, 1])
A:matplotlib.tests.test_axes.barx->numpy.arange(3, dtype=float)
A:matplotlib.tests.test_axes.barheights->numpy.array([0.5, 1.5, 2.0])
A:matplotlib.tests.test_axes.barstarts->numpy.array([0.77] * 3)
A:matplotlib.tests.test_axes.hbars->matplotlib.pyplot.axes().barh(barx, barheights, left=barstarts)
A:matplotlib.tests.test_axes.(_, axs)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_axes.date_first->numpy.datetime64('2020-01-01', 'D')
A:matplotlib.tests.test_axes.date_last->numpy.datetime64('2020-01-11', 'D')
matplotlib.tests.test_axes.TestScatter
matplotlib.tests.test_axes.TestScatter.test_scatter_2D(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_c(self,c_case,re_key)
matplotlib.tests.test_axes.TestScatter.test_scatter_color(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_color_warning(self,kwargs)
matplotlib.tests.test_axes.TestScatter.test_scatter_decimal(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_different_shapes(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_edgecolor_RGB(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_invalid_color(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_linewidths(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_marker(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_no_invalid_color(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_norm_vminvmax(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_plot(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_single_color_c(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_single_point(self,fig_test,fig_ref)
matplotlib.tests.test_axes.TestScatter.test_scatter_size_arg_size(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_unfillable(self)
matplotlib.tests.test_axes.TestScatter.test_scatter_unfilled(self)
matplotlib.tests.test_axes._bxp_test_helper(stats_kwargs={},transform_stats=lambdas:s,bxp_kwargs={})
matplotlib.tests.test_axes._params(c=None,xsize=2,*,edgecolors=None,**kwargs)
matplotlib.tests.test_axes._rc_test_bxp_helper(ax,rc_dict)
matplotlib.tests.test_axes.color_boxes(fig,ax)
matplotlib.tests.test_axes.contour_dat()
matplotlib.tests.test_axes.generate_errorbar_inputs()
matplotlib.tests.test_axes.shared_axes_generator(request)
matplotlib.tests.test_axes.shared_axis_remover(request)
matplotlib.tests.test_axes.test_2dcolor_plot(fig_test,fig_ref)
matplotlib.tests.test_axes.test_acorr(fig_test,fig_ref)
matplotlib.tests.test_axes.test_acorr_integers(fig_test,fig_ref)
matplotlib.tests.test_axes.test_adjust_numtick_aspect()
matplotlib.tests.test_axes.test_aitoff_proj()
matplotlib.tests.test_axes.test_alpha()
matplotlib.tests.test_axes.test_annotate_across_transforms()
matplotlib.tests.test_axes.test_annotate_default_arrow()
matplotlib.tests.test_axes.test_annotate_signature()
matplotlib.tests.test_axes.test_arc_angles()
matplotlib.tests.test_axes.test_arc_ellipse()
matplotlib.tests.test_axes.test_arrow_empty()
matplotlib.tests.test_axes.test_arrow_in_view()
matplotlib.tests.test_axes.test_arrow_simple()
matplotlib.tests.test_axes.test_artist_sublists()
matplotlib.tests.test_axes.test_as_mpl_axes_api()
matplotlib.tests.test_axes.test_aspect_nonlinear_adjustable_box()
matplotlib.tests.test_axes.test_aspect_nonlinear_adjustable_datalim()
matplotlib.tests.test_axes.test_auto_numticks()
matplotlib.tests.test_axes.test_auto_numticks_log()
matplotlib.tests.test_axes.test_automatic_legend()
matplotlib.tests.test_axes.test_autoscale_log_shared()
matplotlib.tests.test_axes.test_autoscale_tight()
matplotlib.tests.test_axes.test_autoscale_tiny_range()
matplotlib.tests.test_axes.test_autoscale_tiny_sticky()
matplotlib.tests.test_axes.test_axes_margins()
matplotlib.tests.test_axes.test_axes_tick_params_gridlines()
matplotlib.tests.test_axes.test_axes_tick_params_xlabelside()
matplotlib.tests.test_axes.test_axes_tick_params_ylabelside()
matplotlib.tests.test_axes.test_axhspan_epoch()
matplotlib.tests.test_axes.test_axis_bool_arguments(fig_test,fig_ref)
matplotlib.tests.test_axes.test_axis_errors(err,args,kwargs,match)
matplotlib.tests.test_axes.test_axis_extent_arg()
matplotlib.tests.test_axes.test_axis_extent_arg2()
matplotlib.tests.test_axes.test_axis_get_tick_params()
matplotlib.tests.test_axes.test_axis_method_errors()
matplotlib.tests.test_axes.test_axis_options()
matplotlib.tests.test_axes.test_axis_set_tick_params_labelsize_labelcolor()
matplotlib.tests.test_axes.test_axisbelow()
matplotlib.tests.test_axes.test_axline(fig_test,fig_ref)
matplotlib.tests.test_axes.test_axline_args()
matplotlib.tests.test_axes.test_axline_loglog(fig_test,fig_ref)
matplotlib.tests.test_axes.test_axline_minmax(fv,fh,args)
matplotlib.tests.test_axes.test_axline_transaxes(fig_test,fig_ref)
matplotlib.tests.test_axes.test_axline_transaxes_panzoom(fig_test,fig_ref)
matplotlib.tests.test_axes.test_axvspan_epoch()
matplotlib.tests.test_axes.test_bad_plot_args()
matplotlib.tests.test_axes.test_bar_all_nan(fig_test,fig_ref)
matplotlib.tests.test_axes.test_bar_broadcast_args()
matplotlib.tests.test_axes.test_bar_color_cycle()
matplotlib.tests.test_axes.test_bar_color_none_alpha()
matplotlib.tests.test_axes.test_bar_decimal_center(fig_test,fig_ref)
matplotlib.tests.test_axes.test_bar_decimal_width(fig_test,fig_ref)
matplotlib.tests.test_axes.test_bar_edgecolor_none_alpha()
matplotlib.tests.test_axes.test_bar_errbar_zorder()
matplotlib.tests.test_axes.test_bar_hatches(fig_test,fig_ref)
matplotlib.tests.test_axes.test_bar_label_fmt(fmt)
matplotlib.tests.test_axes.test_bar_label_fmt_error()
matplotlib.tests.test_axes.test_bar_label_labels()
matplotlib.tests.test_axes.test_bar_label_location_center()
matplotlib.tests.test_axes.test_bar_label_location_errorbars()
matplotlib.tests.test_axes.test_bar_label_location_horizontal()
matplotlib.tests.test_axes.test_bar_label_location_horizontal_xinverted()
matplotlib.tests.test_axes.test_bar_label_location_horizontal_xyinverted()
matplotlib.tests.test_axes.test_bar_label_location_horizontal_yinverted()
matplotlib.tests.test_axes.test_bar_label_location_vertical()
matplotlib.tests.test_axes.test_bar_label_location_vertical_yinverted()
matplotlib.tests.test_axes.test_bar_label_nan_ydata()
matplotlib.tests.test_axes.test_bar_label_nan_ydata_inverted()
matplotlib.tests.test_axes.test_bar_labels(x,width,label,expected_labels,container_label)
matplotlib.tests.test_axes.test_bar_labels_length()
matplotlib.tests.test_axes.test_bar_leading_nan()
matplotlib.tests.test_axes.test_bar_pandas(pd)
matplotlib.tests.test_axes.test_bar_pandas_indexed(pd)
matplotlib.tests.test_axes.test_bar_tick_label_multiple()
matplotlib.tests.test_axes.test_bar_tick_label_multiple_old_alignment()
matplotlib.tests.test_axes.test_bar_tick_label_single()
matplotlib.tests.test_axes.test_bar_ticklabel_fail()
matplotlib.tests.test_axes.test_bar_timedelta()
matplotlib.tests.test_axes.test_bar_uint8()
matplotlib.tests.test_axes.test_barb_units()
matplotlib.tests.test_axes.test_barh_decimal_center(fig_test,fig_ref)
matplotlib.tests.test_axes.test_barh_decimal_height(fig_test,fig_ref)
matplotlib.tests.test_axes.test_barh_tick_label()
matplotlib.tests.test_axes.test_basic_annotate()
matplotlib.tests.test_axes.test_bbox_aspect_axes_init()
matplotlib.tests.test_axes.test_bezier_autoscale()
matplotlib.tests.test_axes.test_box_aspect()
matplotlib.tests.test_axes.test_box_aspect_custom_position()
matplotlib.tests.test_axes.test_boxplot()
matplotlib.tests.test_axes.test_boxplot_autorange_whiskers()
matplotlib.tests.test_axes.test_boxplot_bad_ci()
matplotlib.tests.test_axes.test_boxplot_bad_medians()
matplotlib.tests.test_axes.test_boxplot_capwidths()
matplotlib.tests.test_axes.test_boxplot_custom_capwidths()
matplotlib.tests.test_axes.test_boxplot_dates_pandas(pd)
matplotlib.tests.test_axes.test_boxplot_marker_behavior()
matplotlib.tests.test_axes.test_boxplot_mod_artist_after_plotting()
matplotlib.tests.test_axes.test_boxplot_no_weird_whisker()
matplotlib.tests.test_axes.test_boxplot_not_single()
matplotlib.tests.test_axes.test_boxplot_rc_parameters()
matplotlib.tests.test_axes.test_boxplot_sym()
matplotlib.tests.test_axes.test_boxplot_sym2()
matplotlib.tests.test_axes.test_boxplot_with_CIarray()
matplotlib.tests.test_axes.test_boxplot_zorder()
matplotlib.tests.test_axes.test_broken_barh_empty()
matplotlib.tests.test_axes.test_broken_barh_timedelta()
matplotlib.tests.test_axes.test_bxp_bad_capwidths()
matplotlib.tests.test_axes.test_bxp_bad_positions()
matplotlib.tests.test_axes.test_bxp_bad_widths()
matplotlib.tests.test_axes.test_bxp_baseline()
matplotlib.tests.test_axes.test_bxp_custom_capwidth()
matplotlib.tests.test_axes.test_bxp_custom_capwidths()
matplotlib.tests.test_axes.test_bxp_custombox()
matplotlib.tests.test_axes.test_bxp_customcap()
matplotlib.tests.test_axes.test_bxp_custommedian()
matplotlib.tests.test_axes.test_bxp_customoutlier()
matplotlib.tests.test_axes.test_bxp_custompatchartist()
matplotlib.tests.test_axes.test_bxp_custompositions()
matplotlib.tests.test_axes.test_bxp_customwhisker()
matplotlib.tests.test_axes.test_bxp_customwidths()
matplotlib.tests.test_axes.test_bxp_horizontal()
matplotlib.tests.test_axes.test_bxp_no_flier_stats()
matplotlib.tests.test_axes.test_bxp_nobox()
matplotlib.tests.test_axes.test_bxp_nocaps()
matplotlib.tests.test_axes.test_bxp_patchartist()
matplotlib.tests.test_axes.test_bxp_percentilewhis()
matplotlib.tests.test_axes.test_bxp_rangewhis()
matplotlib.tests.test_axes.test_bxp_scalarwidth()
matplotlib.tests.test_axes.test_bxp_showcustommean()
matplotlib.tests.test_axes.test_bxp_showmean()
matplotlib.tests.test_axes.test_bxp_showmeanasline()
matplotlib.tests.test_axes.test_bxp_shownotches()
matplotlib.tests.test_axes.test_bxp_with_xlabels()
matplotlib.tests.test_axes.test_bxp_with_ylabels()
matplotlib.tests.test_axes.test_canonical()
matplotlib.tests.test_axes.test_centered_bar_label_label_beyond_limits()
matplotlib.tests.test_axes.test_centered_bar_label_nonlinear()
matplotlib.tests.test_axes.test_cla_clears_children_axes_and_fig()
matplotlib.tests.test_axes.test_cla_not_redefined_internally()
matplotlib.tests.test_axes.test_clim()
matplotlib.tests.test_axes.test_color_None()
matplotlib.tests.test_axes.test_color_alias()
matplotlib.tests.test_axes.test_color_length_mismatch()
matplotlib.tests.test_axes.test_contour_colorbar()
matplotlib.tests.test_axes.test_contour_hatching()
matplotlib.tests.test_axes.test_dash_offset()
matplotlib.tests.test_axes.test_date_timezone_x()
matplotlib.tests.test_axes.test_date_timezone_x_and_y()
matplotlib.tests.test_axes.test_date_timezone_y()
matplotlib.tests.test_axes.test_displaced_spine()
matplotlib.tests.test_axes.test_eb_line_zorder()
matplotlib.tests.test_axes.test_empty_errorbar_legend()
matplotlib.tests.test_axes.test_empty_eventplot()
matplotlib.tests.test_axes.test_empty_line_plots()
matplotlib.tests.test_axes.test_empty_shared_subplots()
matplotlib.tests.test_axes.test_empty_ticks_fixed_loc()
matplotlib.tests.test_axes.test_errorbar()
matplotlib.tests.test_axes.test_errorbar_colorcycle()
matplotlib.tests.test_axes.test_errorbar_cycle_ecolor(fig_test,fig_ref)
matplotlib.tests.test_axes.test_errorbar_dashes(fig_test,fig_ref)
matplotlib.tests.test_axes.test_errorbar_every(fig_test,fig_ref)
matplotlib.tests.test_axes.test_errorbar_every_invalid()
matplotlib.tests.test_axes.test_errorbar_inputs_shotgun(kwargs)
matplotlib.tests.test_axes.test_errorbar_limits()
matplotlib.tests.test_axes.test_errorbar_line_specific_kwargs()
matplotlib.tests.test_axes.test_errorbar_linewidth_type(elinewidth)
matplotlib.tests.test_axes.test_errorbar_nan(fig_test,fig_ref)
matplotlib.tests.test_axes.test_errorbar_nonefmt()
matplotlib.tests.test_axes.test_errorbar_shape()
matplotlib.tests.test_axes.test_errorbar_with_prop_cycle(fig_test,fig_ref)
matplotlib.tests.test_axes.test_eventplot()
matplotlib.tests.test_axes.test_eventplot_alpha()
matplotlib.tests.test_axes.test_eventplot_colors(colors)
matplotlib.tests.test_axes.test_eventplot_defaults()
matplotlib.tests.test_axes.test_eventplot_legend()
matplotlib.tests.test_axes.test_eventplot_orientation(data,orientation)
matplotlib.tests.test_axes.test_eventplot_problem_kwargs(recwarn)
matplotlib.tests.test_axes.test_eventplot_units_list(fig_test,fig_ref)
matplotlib.tests.test_axes.test_extent_units()
matplotlib.tests.test_axes.test_fill_between_input(x,y1,y2)
matplotlib.tests.test_axes.test_fill_between_interpolate()
matplotlib.tests.test_axes.test_fill_between_interpolate_decreasing()
matplotlib.tests.test_axes.test_fill_between_interpolate_nan()
matplotlib.tests.test_axes.test_fill_betweenx_input(y,x1,x2)
matplotlib.tests.test_axes.test_fill_units()
matplotlib.tests.test_axes.test_fillbetween_cycle()
matplotlib.tests.test_axes.test_formatter_ticker()
matplotlib.tests.test_axes.test_funcformatter_auto_formatter()
matplotlib.tests.test_axes.test_get_labels()
matplotlib.tests.test_axes.test_get_xticklabel()
matplotlib.tests.test_axes.test_gettightbbox_ignore_nan()
matplotlib.tests.test_axes.test_grid()
matplotlib.tests.test_axes.test_hexbin_empty()
matplotlib.tests.test_axes.test_hexbin_extent()
matplotlib.tests.test_axes.test_hexbin_linear()
matplotlib.tests.test_axes.test_hexbin_log()
matplotlib.tests.test_axes.test_hexbin_log_clim()
matplotlib.tests.test_axes.test_hexbin_pickable()
matplotlib.tests.test_axes.test_hist2d()
matplotlib.tests.test_axes.test_hist2d_density()
matplotlib.tests.test_axes.test_hist2d_transpose()
matplotlib.tests.test_axes.test_hist_auto_bins()
matplotlib.tests.test_axes.test_hist_bar_empty()
matplotlib.tests.test_axes.test_hist_barstacked_bottom_unchanged()
matplotlib.tests.test_axes.test_hist_datetime_datasets()
matplotlib.tests.test_axes.test_hist_datetime_datasets_bins(bins_preprocess)
matplotlib.tests.test_axes.test_hist_density()
matplotlib.tests.test_axes.test_hist_emptydata()
matplotlib.tests.test_axes.test_hist_float16()
matplotlib.tests.test_axes.test_hist_labels()
matplotlib.tests.test_axes.test_hist_log()
matplotlib.tests.test_axes.test_hist_log_2(fig_test,fig_ref)
matplotlib.tests.test_axes.test_hist_log_barstacked()
matplotlib.tests.test_axes.test_hist_nan_data()
matplotlib.tests.test_axes.test_hist_offset()
matplotlib.tests.test_axes.test_hist_range_and_density()
matplotlib.tests.test_axes.test_hist_stacked_bar()
matplotlib.tests.test_axes.test_hist_stacked_density()
matplotlib.tests.test_axes.test_hist_stacked_step()
matplotlib.tests.test_axes.test_hist_stacked_step_bottom_geometry()
matplotlib.tests.test_axes.test_hist_stacked_step_geometry()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled_alpha()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled_bottom_geometry()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled_geometry()
matplotlib.tests.test_axes.test_hist_stacked_weighted()
matplotlib.tests.test_axes.test_hist_step()
matplotlib.tests.test_axes.test_hist_step_bottom()
matplotlib.tests.test_axes.test_hist_step_bottom_geometry()
matplotlib.tests.test_axes.test_hist_step_empty()
matplotlib.tests.test_axes.test_hist_step_filled()
matplotlib.tests.test_axes.test_hist_step_geometry()
matplotlib.tests.test_axes.test_hist_step_horiz()
matplotlib.tests.test_axes.test_hist_stepfilled_bottom_geometry()
matplotlib.tests.test_axes.test_hist_stepfilled_geometry()
matplotlib.tests.test_axes.test_hist_unequal_bins_density()
matplotlib.tests.test_axes.test_hist_with_empty_input(data,expected_number_of_hists)
matplotlib.tests.test_axes.test_hist_zorder(histtype,zorder)
matplotlib.tests.test_axes.test_hlines()
matplotlib.tests.test_axes.test_hlines_default()
matplotlib.tests.test_axes.test_horiz_violinplot_baseline()
matplotlib.tests.test_axes.test_horiz_violinplot_custompoints_10()
matplotlib.tests.test_axes.test_horiz_violinplot_custompoints_200()
matplotlib.tests.test_axes.test_horiz_violinplot_showall()
matplotlib.tests.test_axes.test_horiz_violinplot_showextrema()
matplotlib.tests.test_axes.test_horiz_violinplot_showmeans()
matplotlib.tests.test_axes.test_horiz_violinplot_showmedians()
matplotlib.tests.test_axes.test_imshow()
matplotlib.tests.test_axes.test_imshow_clip()
matplotlib.tests.test_axes.test_imshow_norm_vminvmax()
matplotlib.tests.test_axes.test_indicate_inset_inverted(x_inverted,y_inverted)
matplotlib.tests.test_axes.test_inset()
matplotlib.tests.test_axes.test_inset_polar()
matplotlib.tests.test_axes.test_inset_projection()
matplotlib.tests.test_axes.test_inset_subclass()
matplotlib.tests.test_axes.test_invalid_axis_limits()
matplotlib.tests.test_axes.test_inverted_cla()
matplotlib.tests.test_axes.test_inverted_limits()
matplotlib.tests.test_axes.test_invisible_axes(fig_test,fig_ref)
matplotlib.tests.test_axes.test_invisible_axes_events()
matplotlib.tests.test_axes.test_label_loc_horizontal(fig_test,fig_ref)
matplotlib.tests.test_axes.test_label_loc_rc(fig_test,fig_ref)
matplotlib.tests.test_axes.test_label_loc_vertical(fig_test,fig_ref)
matplotlib.tests.test_axes.test_label_shift()
matplotlib.tests.test_axes.test_large_offset()
matplotlib.tests.test_axes.test_length_one_hist()
matplotlib.tests.test_axes.test_limits_after_scroll_zoom()
matplotlib.tests.test_axes.test_limits_empty_data(plot_fun,fig_test,fig_ref)
matplotlib.tests.test_axes.test_lines_with_colors(fig_test,fig_ref,data)
matplotlib.tests.test_axes.test_log_margins()
matplotlib.tests.test_axes.test_log_scales()
matplotlib.tests.test_axes.test_log_scales_invalid()
matplotlib.tests.test_axes.test_log_scales_no_data()
matplotlib.tests.test_axes.test_loglog()
matplotlib.tests.test_axes.test_loglog_nonpos()
matplotlib.tests.test_axes.test_manage_xticks()
matplotlib.tests.test_axes.test_margins()
matplotlib.tests.test_axes.test_margins_errors(err,args,kwargs,match)
matplotlib.tests.test_axes.test_marker_as_markerstyle()
matplotlib.tests.test_axes.test_marker_edges()
matplotlib.tests.test_axes.test_marker_styles()
matplotlib.tests.test_axes.test_markerfacecolor_none_alpha(fig_test,fig_ref)
matplotlib.tests.test_axes.test_markers_fillstyle_rcparams()
matplotlib.tests.test_axes.test_markevery()
matplotlib.tests.test_axes.test_markevery_line()
matplotlib.tests.test_axes.test_markevery_linear_scales()
matplotlib.tests.test_axes.test_markevery_linear_scales_nans()
matplotlib.tests.test_axes.test_markevery_linear_scales_zoomed()
matplotlib.tests.test_axes.test_markevery_log_scales()
matplotlib.tests.test_axes.test_markevery_polar()
matplotlib.tests.test_axes.test_matshow(fig_test,fig_ref)
matplotlib.tests.test_axes.test_minor_accountedfor()
matplotlib.tests.test_axes.test_minorticks_on(xscale,yscale)
matplotlib.tests.test_axes.test_minorticks_on_rcParams_both(fig_test,fig_ref)
matplotlib.tests.test_axes.test_mismatched_ticklabels()
matplotlib.tests.test_axes.test_mixed_collection()
matplotlib.tests.test_axes.test_mixed_errorbar_polar_caps()
matplotlib.tests.test_axes.test_mollweide_forward_inverse_closure()
matplotlib.tests.test_axes.test_mollweide_grid()
matplotlib.tests.test_axes.test_mollweide_inverse_forward_closure()
matplotlib.tests.test_axes.test_move_offsetlabel()
matplotlib.tests.test_axes.test_multiplot_autoscale()
matplotlib.tests.test_axes.test_nan_bar_values()
matplotlib.tests.test_axes.test_nan_barlabels()
matplotlib.tests.test_axes.test_nodecorator()
matplotlib.tests.test_axes.test_none_kwargs()
matplotlib.tests.test_axes.test_nonfinite_limits()
matplotlib.tests.test_axes.test_normal_axes()
matplotlib.tests.test_axes.test_normalize_kwarg_pie()
matplotlib.tests.test_axes.test_numerical_hist_label()
matplotlib.tests.test_axes.test_o_marker_path_snap()
matplotlib.tests.test_axes.test_offset_label_color()
matplotlib.tests.test_axes.test_offset_text_visible()
matplotlib.tests.test_axes.test_pandas_bar_align_center(pd)
matplotlib.tests.test_axes.test_pandas_errorbar_indexing(pd)
matplotlib.tests.test_axes.test_pandas_index_shape(pd)
matplotlib.tests.test_axes.test_pandas_indexing_dates(pd)
matplotlib.tests.test_axes.test_pandas_indexing_hist(pd)
matplotlib.tests.test_axes.test_pandas_minimal_plot(pd)
matplotlib.tests.test_axes.test_pandas_pcolormesh(pd)
matplotlib.tests.test_axes.test_parse_scatter_color_args(params,expected_result)
matplotlib.tests.test_axes.test_parse_scatter_color_args_edgecolors(kwargs,expected_edgecolors)
matplotlib.tests.test_axes.test_parse_scatter_color_args_error()
matplotlib.tests.test_axes.test_patch_bounds()
matplotlib.tests.test_axes.test_pathological_hexbin()
matplotlib.tests.test_axes.test_pcolor_datetime_axis()
matplotlib.tests.test_axes.test_pcolor_regression(pd)
matplotlib.tests.test_axes.test_pcolorargs()
matplotlib.tests.test_axes.test_pcolorargs_5205()
matplotlib.tests.test_axes.test_pcolorargs_with_read_only()
matplotlib.tests.test_axes.test_pcolorauto(fig_test,fig_ref,snap)
matplotlib.tests.test_axes.test_pcolorfast(xy,data,cls)
matplotlib.tests.test_axes.test_pcolorflaterror()
matplotlib.tests.test_axes.test_pcolormesh()
matplotlib.tests.test_axes.test_pcolormesh_alpha()
matplotlib.tests.test_axes.test_pcolormesh_datetime_axis()
matplotlib.tests.test_axes.test_pcolormesh_rgba(fig_test,fig_ref,dims,alpha)
matplotlib.tests.test_axes.test_pcolormesh_small()
matplotlib.tests.test_axes.test_pcolornearest(fig_test,fig_ref)
matplotlib.tests.test_axes.test_pcolornearestunits(fig_test,fig_ref)
matplotlib.tests.test_axes.test_pie_ccw_true()
matplotlib.tests.test_axes.test_pie_center_radius()
matplotlib.tests.test_axes.test_pie_default()
matplotlib.tests.test_axes.test_pie_frame_grid()
matplotlib.tests.test_axes.test_pie_get_negative_values()
matplotlib.tests.test_axes.test_pie_hatch_multi(fig_test,fig_ref)
matplotlib.tests.test_axes.test_pie_hatch_single(fig_test,fig_ref)
matplotlib.tests.test_axes.test_pie_linewidth_0()
matplotlib.tests.test_axes.test_pie_linewidth_2()
matplotlib.tests.test_axes.test_pie_nolabel_but_legend()
matplotlib.tests.test_axes.test_pie_rotatelabels_true()
matplotlib.tests.test_axes.test_pie_textprops()
matplotlib.tests.test_axes.test_plot_decimal(fig_test,fig_ref)
matplotlib.tests.test_axes.test_plot_errors()
matplotlib.tests.test_axes.test_plot_format()
matplotlib.tests.test_axes.test_plot_format_errors(fmt,match,data)
matplotlib.tests.test_axes.test_plot_format_kwarg_redundant()
matplotlib.tests.test_axes.test_plt_axes()
matplotlib.tests.test_axes.test_polar_interpolation_steps_variable_r(fig_test,fig_ref)
matplotlib.tests.test_axes.test_polycollection_joinstyle()
matplotlib.tests.test_axes.test_psd_csd()
matplotlib.tests.test_axes.test_psd_csd_edge_cases()
matplotlib.tests.test_axes.test_pyplot_axes()
matplotlib.tests.test_axes.test_quiver_units()
matplotlib.tests.test_axes.test_rc_axes_label_formatting()
matplotlib.tests.test_axes.test_rc_grid()
matplotlib.tests.test_axes.test_rc_major_minor_tick()
matplotlib.tests.test_axes.test_rc_spines()
matplotlib.tests.test_axes.test_rc_tick()
matplotlib.tests.test_axes.test_rcparam_grid_minor(grid_which,major_visible,minor_visible)
matplotlib.tests.test_axes.test_redraw_in_frame()
matplotlib.tests.test_axes.test_relative_ticklabel_sizes(size)
matplotlib.tests.test_axes.test_relim_visible_only()
matplotlib.tests.test_axes.test_remove_shared_axes(shared_axes_generator,shared_axis_remover)
matplotlib.tests.test_axes.test_remove_shared_axes_relim()
matplotlib.tests.test_axes.test_repr()
matplotlib.tests.test_axes.test_reset_grid()
matplotlib.tests.test_axes.test_reset_ticks(fig_test,fig_ref)
matplotlib.tests.test_axes.test_retain_tick_visibility()
matplotlib.tests.test_axes.test_rgba_markers()
matplotlib.tests.test_axes.test_samesizepcolorflaterror()
matplotlib.tests.test_axes.test_scatter_color_repr_error()
matplotlib.tests.test_axes.test_scatter_empty_data()
matplotlib.tests.test_axes.test_scatter_series_non_zero_index(pd)
matplotlib.tests.test_axes.test_secondary_fail()
matplotlib.tests.test_axes.test_secondary_formatter()
matplotlib.tests.test_axes.test_secondary_minorloc()
matplotlib.tests.test_axes.test_secondary_repr()
matplotlib.tests.test_axes.test_secondary_resize()
matplotlib.tests.test_axes.test_secondary_xy()
matplotlib.tests.test_axes.test_set_aspect_negative()
matplotlib.tests.test_axes.test_set_get_ticklabels()
matplotlib.tests.test_axes.test_set_margin_updates_limits()
matplotlib.tests.test_axes.test_set_position()
matplotlib.tests.test_axes.test_set_ticks_inverted()
matplotlib.tests.test_axes.test_set_ticks_kwargs_raise_error_without_labels()
matplotlib.tests.test_axes.test_set_ticks_with_labels(fig_test,fig_ref)
matplotlib.tests.test_axes.test_set_xy_bound()
matplotlib.tests.test_axes.test_shaped_data(fig_test,fig_ref)
matplotlib.tests.test_axes.test_shared_aspect_error()
matplotlib.tests.test_axes.test_shared_axes_autoscale()
matplotlib.tests.test_axes.test_shared_axes_clear(fig_test,fig_ref)
matplotlib.tests.test_axes.test_shared_axes_retick()
matplotlib.tests.test_axes.test_shared_bool()
matplotlib.tests.test_axes.test_shared_scale()
matplotlib.tests.test_axes.test_shared_with_aspect_1()
matplotlib.tests.test_axes.test_shared_with_aspect_2()
matplotlib.tests.test_axes.test_shared_with_aspect_3()
matplotlib.tests.test_axes.test_sharing_does_not_link_positions()
matplotlib.tests.test_axes.test_single_date()
matplotlib.tests.test_axes.test_single_point()
matplotlib.tests.test_axes.test_small_autoscale()
matplotlib.tests.test_axes.test_specgram()
matplotlib.tests.test_axes.test_specgram_angle()
matplotlib.tests.test_axes.test_specgram_fs_none()
matplotlib.tests.test_axes.test_specgram_magnitude()
matplotlib.tests.test_axes.test_specgram_origin_kwarg()
matplotlib.tests.test_axes.test_specgram_origin_rcparam(fig_test,fig_ref)
matplotlib.tests.test_axes.test_spectrum()
matplotlib.tests.test_axes.test_spines_properbbox_after_zoom()
matplotlib.tests.test_axes.test_spy(fig_test,fig_ref)
matplotlib.tests.test_axes.test_spy_invalid_kwargs()
matplotlib.tests.test_axes.test_square_plot()
matplotlib.tests.test_axes.test_stackplot()
matplotlib.tests.test_axes.test_stackplot_baseline()
matplotlib.tests.test_axes.test_stairs(fig_test,fig_ref)
matplotlib.tests.test_axes.test_stairs_baseline_0(fig_test,fig_ref)
matplotlib.tests.test_axes.test_stairs_datetime()
matplotlib.tests.test_axes.test_stairs_edge_handling(fig_test,fig_ref)
matplotlib.tests.test_axes.test_stairs_empty()
matplotlib.tests.test_axes.test_stairs_fill(fig_test,fig_ref)
matplotlib.tests.test_axes.test_stairs_invalid_mismatch()
matplotlib.tests.test_axes.test_stairs_invalid_nan()
matplotlib.tests.test_axes.test_stairs_invalid_update()
matplotlib.tests.test_axes.test_stairs_invalid_update2()
matplotlib.tests.test_axes.test_stairs_options()
matplotlib.tests.test_axes.test_stairs_update(fig_test,fig_ref)
matplotlib.tests.test_axes.test_stem(use_line_collection)
matplotlib.tests.test_axes.test_stem_args()
matplotlib.tests.test_axes.test_stem_dates()
matplotlib.tests.test_axes.test_stem_markerfmt()
matplotlib.tests.test_axes.test_stem_orientation(use_line_collection)
matplotlib.tests.test_axes.test_step_linestyle()
matplotlib.tests.test_axes.test_sticky_shared_axes(fig_test,fig_ref)
matplotlib.tests.test_axes.test_strmethodformatter_auto_formatter()
matplotlib.tests.test_axes.test_structured_data()
matplotlib.tests.test_axes.test_subclass_clear_cla()
matplotlib.tests.test_axes.test_subplot_key_hash()
matplotlib.tests.test_axes.test_subsampled_ticklabels()
matplotlib.tests.test_axes.test_symlog()
matplotlib.tests.test_axes.test_symlog2()
matplotlib.tests.test_axes.test_text_labelsize()
matplotlib.tests.test_axes.test_tick_label_update()
matplotlib.tests.test_axes.test_tick_padding_tightbbox()
matplotlib.tests.test_axes.test_tick_param_label_rotation()
matplotlib.tests.test_axes.test_tick_space_size_0()
matplotlib.tests.test_axes.test_tickdirs()
matplotlib.tests.test_axes.test_title_above_offset(left,center)
matplotlib.tests.test_axes.test_title_location_roundtrip()
matplotlib.tests.test_axes.test_title_location_shared(sharex)
matplotlib.tests.test_axes.test_title_no_move_off_page()
matplotlib.tests.test_axes.test_title_pad()
matplotlib.tests.test_axes.test_title_xticks_top()
matplotlib.tests.test_axes.test_title_xticks_top_both()
matplotlib.tests.test_axes.test_titlesetpos()
matplotlib.tests.test_axes.test_titletwiny()
matplotlib.tests.test_axes.test_transparent_markers()
matplotlib.tests.test_axes.test_twin_axis_locators_formatters()
matplotlib.tests.test_axes.test_twin_inherit_autoscale_setting()
matplotlib.tests.test_axes.test_twin_logscale(fig_test,fig_ref,twin)
matplotlib.tests.test_axes.test_twin_remove(fig_test,fig_ref)
matplotlib.tests.test_axes.test_twin_spines()
matplotlib.tests.test_axes.test_twin_spines_on_top()
matplotlib.tests.test_axes.test_twin_with_aspect(twin)
matplotlib.tests.test_axes.test_twinx_axis_scales()
matplotlib.tests.test_axes.test_twinx_cla()
matplotlib.tests.test_axes.test_twinx_knows_limits()
matplotlib.tests.test_axes.test_unautoscale(axis,auto)
matplotlib.tests.test_axes.test_unicode_hist_label()
matplotlib.tests.test_axes.test_use_sticky_edges()
matplotlib.tests.test_axes.test_vert_violinplot_baseline()
matplotlib.tests.test_axes.test_vert_violinplot_custompoints_10()
matplotlib.tests.test_axes.test_vert_violinplot_custompoints_200()
matplotlib.tests.test_axes.test_vert_violinplot_showall()
matplotlib.tests.test_axes.test_vert_violinplot_showextrema()
matplotlib.tests.test_axes.test_vert_violinplot_showmeans()
matplotlib.tests.test_axes.test_vert_violinplot_showmedians()
matplotlib.tests.test_axes.test_vertex_markers()
matplotlib.tests.test_axes.test_violin_point_mass()
matplotlib.tests.test_axes.test_violinplot_bad_positions()
matplotlib.tests.test_axes.test_violinplot_bad_quantiles()
matplotlib.tests.test_axes.test_violinplot_bad_widths()
matplotlib.tests.test_axes.test_violinplot_outofrange_quantiles()
matplotlib.tests.test_axes.test_violinplot_pandas_series(fig_test,fig_ref,pd)
matplotlib.tests.test_axes.test_violinplot_single_list_quantiles(fig_test,fig_ref)
matplotlib.tests.test_axes.test_vline_limit()
matplotlib.tests.test_axes.test_vlines()
matplotlib.tests.test_axes.test_vlines_default()
matplotlib.tests.test_axes.test_warn_ignored_scatter_kwargs()
matplotlib.tests.test_axes.test_xerr_yerr_not_negative()
matplotlib.tests.test_axes.test_xtickcolor_is_not_markercolor()
matplotlib.tests.test_axes.test_xtickcolor_is_not_xticklabelcolor()
matplotlib.tests.test_axes.test_xticks_bad_args()
matplotlib.tests.test_axes.test_ylabel_ha_with_position(ha)
matplotlib.tests.test_axes.test_ytickcolor_is_not_markercolor()
matplotlib.tests.test_axes.test_ytickcolor_is_not_yticklabelcolor()
matplotlib.tests.test_axes.test_zero_linewidth()
matplotlib.tests.test_axes.test_zoom_inset()
matplotlib.tests.test_axes.test_zorder_and_explicit_rasterization()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_api.py----------------------------------------
A:matplotlib.tests.test_api.data->numpy.zeros(test_shape)
A:matplotlib.tests.test_api.a->A()
A:matplotlib.tests.test_api.attr->matplotlib._api.deprecate_privatize_attribute('0.0')
A:matplotlib.tests.test_api.meth->matplotlib._api.deprecate_privatize_attribute('0.0')
A:matplotlib.tests.test_api.c->C()
matplotlib.tests.test_api.test_check_shape(target,test_shape)
matplotlib.tests.test_api.test_classproperty_deprecation()
matplotlib.tests.test_api.test_delete_parameter()
matplotlib.tests.test_api.test_deprecate_privatize_attribute()
matplotlib.tests.test_api.test_deprecation_alternative()
matplotlib.tests.test_api.test_empty_check_in_list()
matplotlib.tests.test_api.test_make_keyword_only()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_spines.py----------------------------------------
A:matplotlib.tests.test_spines.spines->Spines(**spines_dict)
A:matplotlib.tests.test_spines.fig->matplotlib.pyplot.figure(0, figsize=(4, 4))
A:matplotlib.tests.test_spines.x->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_spines.ax->matplotlib.pyplot.figure(0, figsize=(4, 4)).add_axes((0, 0, 1, 1))
A:matplotlib.tests.test_spines.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_spines.spinebbox->spine.get_transform().transform_path(spine.get_path()).get_extents()
matplotlib.tests.test_spines.test_label_without_ticks()
matplotlib.tests.test_spines.test_spine_class()
matplotlib.tests.test_spines.test_spine_nonlinear_data_positions(fig_test,fig_ref)
matplotlib.tests.test_spines.test_spines_axes_positions()
matplotlib.tests.test_spines.test_spines_black_axes()
matplotlib.tests.test_spines.test_spines_capstyle()
matplotlib.tests.test_spines.test_spines_data_positions()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_simplification.py----------------------------------------
A:matplotlib.tests.test_simplification.t->numpy.arange(65536)
A:matplotlib.tests.test_simplification.s->numpy.sin(2 * np.pi * t)
A:matplotlib.tests.test_simplification.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_simplification.x->numpy.linspace(0, 3.14 * 2, 3000)
A:matplotlib.tests.test_simplification.y->numpy.sin(x)
A:matplotlib.tests.test_simplification.path->Path(verts)
A:matplotlib.tests.test_simplification.simplified->list(p.iter_segments(clip=[0, 0, 100, 100]))
A:matplotlib.tests.test_simplification.simplified_clipped->Path(verts).cleaned(clip=(10, 10, 20, 20))
A:matplotlib.tests.test_simplification.p1->fig.add_axes((0, 0, 1.0, 1.0), ylim=(0, 5), autoscale_on=False).plot(abs(np.fft.fft(np.sin(2 * np.pi * 0.01 * t) * np.blackman(len(t)))))
A:matplotlib.tests.test_simplification.transform->p1[0].get_transform()
A:matplotlib.tests.test_simplification.x_max->x[1:].max()
A:matplotlib.tests.test_simplification.x_min->x[1:].min()
A:matplotlib.tests.test_simplification.y_max->y[1:].max()
A:matplotlib.tests.test_simplification.y_min->y[1:].min()
A:matplotlib.tests.test_simplification.p_expected->Path([[0, 0], [x_max, y_max], [x[-1], y[-1]], [0, 0]], codes=[1, 2, 2, 0])
A:matplotlib.tests.test_simplification.p->Path([[50, 40]], [1])
A:matplotlib.tests.test_simplification.p2->Path([[50, 40]], [1]).cleaned(simplify=True)
A:matplotlib.tests.test_simplification.pp1->matplotlib.patches.PathPatch(Path([(0, 0), (1, 0), (1, 1), (np.nan, 1), (0, 0), (2, 0), (2, 2), (0, 0)], [Path.MOVETO, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CLOSEPOLY]), fc='none')
A:matplotlib.tests.test_simplification.ax_test->fig_test.subplots(2, 2).flatten()
A:matplotlib.tests.test_simplification.ax_ref->fig_ref.subplots(2, 2).flatten()
A:matplotlib.tests.test_simplification.pattern->numpy.concatenate((pattern, pattern[:1, :]))
A:matplotlib.tests.test_simplification.codes->codes.copy().copy()
A:matplotlib.tests.test_simplification.vertices->numpy.concatenate(vertices)
A:matplotlib.tests.test_simplification.verts->verts.reshape((len(verts) // 2, 2)).reshape((len(verts) // 2, 2))
A:matplotlib.tests.test_simplification.segs->list(segs)
A:matplotlib.tests.test_simplification.xx->numpy.arange(2000000)
A:matplotlib.tests.test_simplification.yy->numpy.random.rand(2000000)
A:matplotlib.tests.test_simplification.fig->matplotlib.pyplot.figure(figsize=(2, 1))
A:matplotlib.tests.test_simplification.ax->matplotlib.pyplot.figure(figsize=(2, 1)).add_axes((0, 0, 1.0, 1.0), ylim=(0, 5), autoscale_on=False)
matplotlib.tests.test_simplification.test_angled_antiparallel(angle,offset)
matplotlib.tests.test_simplification.test_antiparallel_simplification()
matplotlib.tests.test_simplification.test_clipper()
matplotlib.tests.test_simplification.test_clipping()
matplotlib.tests.test_simplification.test_clipping_full()
matplotlib.tests.test_simplification.test_clipping_out_of_bounds()
matplotlib.tests.test_simplification.test_clipping_with_nans()
matplotlib.tests.test_simplification.test_closed_path_clipping(fig_test,fig_ref)
matplotlib.tests.test_simplification.test_closed_path_nan_removal(fig_test,fig_ref)
matplotlib.tests.test_simplification.test_diamond()
matplotlib.tests.test_simplification.test_fft_peaks()
matplotlib.tests.test_simplification.test_hatch()
matplotlib.tests.test_simplification.test_noise()
matplotlib.tests.test_simplification.test_overflow()
matplotlib.tests.test_simplification.test_para_equal_perp()
matplotlib.tests.test_simplification.test_simplify_curve()
matplotlib.tests.test_simplification.test_sine_plus_noise()
matplotlib.tests.test_simplification.test_start_with_moveto()
matplotlib.tests.test_simplification.test_throw_rendering_complexity_exceeded()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_type1font.py----------------------------------------
A:matplotlib.tests.test_type1font.filename->os.path.join(os.path.dirname(__file__), 'cmr10.pfb')
A:matplotlib.tests.test_type1font.font->matplotlib._type1font.Type1Font(filename)
A:matplotlib.tests.test_type1font.slanted->matplotlib._type1font.Type1Font(filename).transform({'slant': 0.167})
A:matplotlib.tests.test_type1font.condensed->matplotlib._type1font.Type1Font(filename).transform({'extend': 0.5})
A:matplotlib.tests.test_type1font.rawdata->fd.read()
A:matplotlib.tests.test_type1font.len0->len(font.parts[0])
A:matplotlib.tests.test_type1font.differ->difflib.Differ()
A:matplotlib.tests.test_type1font.diff->list(differ.compare(font.parts[0].decode('latin-1').splitlines(), condensed.parts[0].decode('latin-1').splitlines()))
A:matplotlib.tests.test_type1font.tokens->matplotlib._type1font._tokenize(data, True)
A:matplotlib.tests.test_type1font.result->bin_after(n)
A:matplotlib.tests.test_type1font.lines->matplotlib._type1font.Type1Font(filename).transform({'slant': 0.167}).parts[0].decode('ascii').splitlines()
A:matplotlib.tests.test_type1font.encrypted->matplotlib._type1font.Type1Font._encrypt(data, 'eexec')
A:matplotlib.tests.test_type1font.decrypted->matplotlib._type1font.Type1Font._decrypt(encrypted, 'eexec')
matplotlib.tests.test_type1font.test_Type1Font()
matplotlib.tests.test_type1font.test_Type1Font_2()
matplotlib.tests.test_type1font.test_encrypt_decrypt_roundtrip()
matplotlib.tests.test_type1font.test_overprecision()
matplotlib.tests.test_type1font.test_tokenize()
matplotlib.tests.test_type1font.test_tokenize_errors()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_gridspec.py----------------------------------------
A:matplotlib.tests.test_gridspec.gs->matplotlib.gridspec.GridSpec(2, 1)
A:matplotlib.tests.test_gridspec.ss->matplotlib.gridspec.GridSpec(2, 2, height_ratios=(3, 1), width_ratios=(1, 3))
matplotlib.tests.test_gridspec.test_equal()
matplotlib.tests.test_gridspec.test_height_ratios()
matplotlib.tests.test_gridspec.test_repr()
matplotlib.tests.test_gridspec.test_width_ratios()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_subplots.py----------------------------------------
A:matplotlib.tests.test_subplots.(f, ((a1, a2), (a3, a4)))->matplotlib.pyplot.subplots(2, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_subplots.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_subplots.gs->matplotlib.pyplot.figure().add_gridspec(3, 3)
A:matplotlib.tests.test_subplots.a1->matplotlib.pyplot.figure().add_subplot(gs[0, 0:2])
A:matplotlib.tests.test_subplots.a2->matplotlib.pyplot.figure().add_subplot(gs[1:3, 0])
A:matplotlib.tests.test_subplots.a3->matplotlib.pyplot.figure().add_subplot(gs[1, 2])
A:matplotlib.tests.test_subplots.a4->matplotlib.pyplot.figure().add_subplot(gs[2, 1])
A:matplotlib.tests.test_subplots.ax->matplotlib.pyplot.axes([0, 0, 1, 1])
A:matplotlib.tests.test_subplots.(f, (a1, a2))->matplotlib.pyplot.subplots(2, 1, sharex=True)
A:matplotlib.tests.test_subplots.x->numpy.arange(0, 10000000000.0, 1000000000.0)
A:matplotlib.tests.test_subplots.(fig, axs)->matplotlib.pyplot.subplots(2, 2, sharex='col', sharey='all')
A:matplotlib.tests.test_subplots.axs->matplotlib.pyplot.figure().subplots(3, 3, sharex=True, sharey=True)
A:matplotlib.tests.test_subplots.(fig, ax)->matplotlib.pyplot.subplots(1, 2, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw)
matplotlib.tests.test_subplots.check_shared(axs,x_shared,y_shared)
matplotlib.tests.test_subplots.check_visible(axs,x_visible,y_visible)
matplotlib.tests.test_subplots.test_dont_mutate_kwargs()
matplotlib.tests.test_subplots.test_exceptions()
matplotlib.tests.test_subplots.test_get_gridspec()
matplotlib.tests.test_subplots.test_label_outer_non_gridspec()
matplotlib.tests.test_subplots.test_label_outer_span()
matplotlib.tests.test_subplots.test_old_subplot_compat()
matplotlib.tests.test_subplots.test_ratio_overlapping_kws(method,args)
matplotlib.tests.test_subplots.test_shared()
matplotlib.tests.test_subplots.test_shared_and_moved()
matplotlib.tests.test_subplots.test_subplots_hide_axislabels(xlabel_position,ylabel_position)
matplotlib.tests.test_subplots.test_subplots_hide_ticklabels(top,bottom,left,right)
matplotlib.tests.test_subplots.test_subplots_offsettext()
matplotlib.tests.test_subplots.test_width_and_height_ratios(fig_test,fig_ref,height_ratios,width_ratios)
matplotlib.tests.test_subplots.test_width_and_height_ratios_mosaic(fig_test,fig_ref,height_ratios,width_ratios)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_category.py----------------------------------------
A:matplotlib.tests.test_category.(ids, data)->zip(*test_cases)
A:matplotlib.tests.test_category.unit->matplotlib.category.UnitData(ydata)
A:matplotlib.tests.test_category.(fids, fdata)->zip(*test_cases)
A:matplotlib.tests.test_category.unitdata->matplotlib.category.UnitData()
A:matplotlib.tests.test_category.(ids, values)->zip(*test_cases)
A:matplotlib.tests.test_category.(fids, fvalues)->zip(*failing_test_cases)
A:matplotlib.tests.test_category.self.cc->matplotlib.category.StrCategoryConverter()
A:matplotlib.tests.test_category.self.unit->matplotlib.category.UnitData()
A:matplotlib.tests.test_category.self.ax->FakeAxis(self.unit)
A:matplotlib.tests.test_category.axis->self.cc.axisinfo(self.unit, self.ax)
A:matplotlib.tests.test_category.ticks->list(range(len(labels)))
A:matplotlib.tests.test_category.ax->matplotlib.pyplot.figure().subplots()
A:matplotlib.tests.test_category.(ids, cases)->zip(*test_cases)
A:matplotlib.tests.test_category.labels->matplotlib.category.StrCategoryFormatter(unit._mapping)
A:matplotlib.tests.test_category.(bytes_ids, bytes_data)->zip(*bytes_cases)
A:matplotlib.tests.test_category.counts->numpy.array([4, 6, 5])
A:matplotlib.tests.test_category.(numlike_ids, numlike_data)->zip(*numlike_cases)
A:matplotlib.tests.test_category.t0->datetime(2018, 3, 1)
A:matplotlib.tests.test_category.t1->datetime(2018, 3, 2)
A:matplotlib.tests.test_category.t2->datetime(2018, 3, 3)
A:matplotlib.tests.test_category.t3->datetime(2018, 3, 4)
A:matplotlib.tests.test_category.ax_test->fig_test.subplots()
A:matplotlib.tests.test_category.ax_ref->fig_ref.subplots()
A:matplotlib.tests.test_category.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_category.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_category.(n, bins, patches)->matplotlib.pyplot.figure().subplots().hist(['a', 'b', 'a', 'c', 'ff'])
matplotlib.tests.test_category.FakeAxis(self,units)
matplotlib.tests.test_category.FakeAxis.__init__(self,units)
matplotlib.tests.test_category.TestPlotBytes
matplotlib.tests.test_category.TestPlotBytes.test_plot_bytes(self,plotter,bdata)
matplotlib.tests.test_category.TestPlotNumlike
matplotlib.tests.test_category.TestPlotNumlike.test_plot_numlike(self,plotter,ndata)
matplotlib.tests.test_category.TestPlotTypes
matplotlib.tests.test_category.TestPlotTypes.test_data(self)
matplotlib.tests.test_category.TestPlotTypes.test_mixed_type_exception(self,plotter,xdata)
matplotlib.tests.test_category.TestPlotTypes.test_mixed_type_update_exception(self,plotter,xdata)
matplotlib.tests.test_category.TestPlotTypes.test_plot_unicode(self,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_xaxis(self,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_xyaxis(self,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_yaxis(self,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_update_plot(self,plotter)
matplotlib.tests.test_category.TestStrCategoryConverter
matplotlib.tests.test_category.TestStrCategoryConverter.mock_axis(self,request)
matplotlib.tests.test_category.TestStrCategoryConverter.test_axisinfo(self)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert(self,vals)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_fail(self,fvals)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_one_string(self,value)
matplotlib.tests.test_category.TestStrCategoryConverter.test_default_units(self)
matplotlib.tests.test_category.TestStrCategoryFormatter
matplotlib.tests.test_category.TestStrCategoryFormatter.test_StrCategoryFormatter(self,ydata)
matplotlib.tests.test_category.TestStrCategoryFormatter.test_StrCategoryFormatterPlot(self,ydata,plotter)
matplotlib.tests.test_category.TestStrCategoryLocator
matplotlib.tests.test_category.TestStrCategoryLocator.test_StrCategoryLocator(self)
matplotlib.tests.test_category.TestStrCategoryLocator.test_StrCategoryLocatorPlot(self,plotter)
matplotlib.tests.test_category.TestUnitData
matplotlib.tests.test_category.TestUnitData.test_non_string_fails(self,fdata)
matplotlib.tests.test_category.TestUnitData.test_non_string_update_fails(self,fdata)
matplotlib.tests.test_category.TestUnitData.test_unit(self,data,locs)
matplotlib.tests.test_category.TestUnitData.test_update(self)
matplotlib.tests.test_category.axis_test(axis,labels)
matplotlib.tests.test_category.test_hist()
matplotlib.tests.test_category.test_no_deprecation_on_empty_data()
matplotlib.tests.test_category.test_overriding_units_in_plot(fig_test,fig_ref)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_bbox_tight.py----------------------------------------
A:matplotlib.tests.test_bbox_tight.rows->len(data)
A:matplotlib.tests.test_bbox_tight.yoff->numpy.zeros(len(col_labels))
A:matplotlib.tests.test_bbox_tight.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_bbox_tight.ax->matplotlib.pyplot.Axes(fig, [0.0, 0.0, 1.0, 1.0])
A:matplotlib.tests.test_bbox_tight.patch->matplotlib.patches.Rectangle([-50, -50], 100, 100, transform=ax.transData, facecolor='blue', alpha=0.5)
A:matplotlib.tests.test_bbox_tight.path->matplotlib.path.Path.unit_regular_star(5).deepcopy()
A:matplotlib.tests.test_bbox_tight.buf->BytesIO()
A:matplotlib.tests.test_bbox_tight.fig->matplotlib.pyplot.figure(frameon=False, dpi=dpi, figsize=(x_size / dpi, y_size / dpi))
A:matplotlib.tests.test_bbox_tight.data->numpy.arange(x_size * y_size).reshape(y_size, x_size)
A:matplotlib.tests.test_bbox_tight.out->BytesIO()
A:matplotlib.tests.test_bbox_tight.im->numpy.asarray(Image.open(out))
matplotlib.tests.test_bbox_tight.test_bbox_inches_fixed_aspect()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_clipping()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_raster()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_suptile_legend()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_suptitle_non_default()
matplotlib.tests.test_bbox_tight.test_noop_tight_bbox()
matplotlib.tests.test_bbox_tight.test_only_on_non_finite_bbox()
matplotlib.tests.test_bbox_tight.test_tight_pcolorfast()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_usetex.py----------------------------------------
A:matplotlib.tests.test_usetex.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_usetex.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_usetex.heights[vals]->(np.array(fig.canvas.buffer_rgba())[..., 0] != 255).any(axis=1).sum()
A:matplotlib.tests.test_usetex.text->matplotlib.pyplot.figure().text(0.5, 0.5, 'Some text 0123456789')
A:matplotlib.tests.test_usetex.text2->matplotlib.pyplot.figure().text(0.5, 0.5, 'Some text 0123456789')
matplotlib.tests.test_usetex.test_empty(fig_test,fig_ref)
matplotlib.tests.test_usetex.test_latex_pkg_already_loaded(preamble)
matplotlib.tests.test_usetex.test_mathdefault()
matplotlib.tests.test_usetex.test_minus_no_descent(fontsize)
matplotlib.tests.test_usetex.test_missing_psfont(fmt,monkeypatch)
matplotlib.tests.test_usetex.test_multiline_eqnarray()
matplotlib.tests.test_usetex.test_unicode_minus(fig_test,fig_ref)
matplotlib.tests.test_usetex.test_usetex()
matplotlib.tests.test_usetex.test_usetex_packages(pkg)
matplotlib.tests.test_usetex.test_usetex_with_underscore()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_text.py----------------------------------------
A:matplotlib.tests.test_text.prop->FontProperties(**kw)
A:matplotlib.tests.test_text.path->findfont(prop, directory=mpl.get_data_path())
A:matplotlib.tests.test_text.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_text.normal_font->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', size=14)
A:matplotlib.tests.test_text.a->matplotlib.pyplot.gca().annotate('Normal Font', (0.1, 0.1), xycoords='axes fraction', fontproperties=normal_font)
A:matplotlib.tests.test_text.bold_font->find_matplotlib_font(family='Foo', style='normal', variant='normal', weight='bold', stretch=500, size=14)
A:matplotlib.tests.test_text.bold_italic_font->find_matplotlib_font(family='sans serif', style='italic', variant='normal', weight=750, stretch=500, size=14)
A:matplotlib.tests.test_text.light_font->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', weight=200, stretch=500, size=14)
A:matplotlib.tests.test_text.condensed_font->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', weight=500, stretch=100, size=14)
A:matplotlib.tests.test_text.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_text.renderer->matplotlib.pyplot.figure()._get_renderer()
A:matplotlib.tests.test_text.r->matplotlib.patches.Rectangle((0, 0), 1, 1, clip_on=False, transform=ax.transAxes)
A:matplotlib.tests.test_text.tt->matplotlib.pyplot.gca().text(0.2 * nn + 0.1, 0.1, st, horizontalalignment=horal, verticalalignment='bottom', rotation=20)
A:matplotlib.tests.test_text.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_text.fn->matplotlib.font_manager.findfont('Helvetica', fontext='afm')
A:matplotlib.tests.test_text.afm->matplotlib._afm.AFM(fh)
A:matplotlib.tests.test_text.mevent->MouseEvent('button_press_event', fig.canvas, 0.5, 0.5, 1, None)
A:matplotlib.tests.test_text.xs->numpy.linspace(0.25, 0.75, 30)
A:matplotlib.tests.test_text.ys->numpy.linspace(0.25, 0.75, 30)
A:matplotlib.tests.test_text.(xs, ys)->numpy.meshgrid(xs, ys)
A:matplotlib.tests.test_text.txt->matplotlib.pyplot.text(0.5, 0.4, 'hello world', ha='center', fontsize=30, rotation=30)
A:matplotlib.tests.test_text.(mevent.x, mevent.y)->matplotlib.pyplot.gca().transAxes.transform([x, y])
A:matplotlib.tests.test_text.(contains, _)->matplotlib.pyplot.text(0.5, 0.4, 'hello world', ha='center', fontsize=30, rotation=30).contains(mevent)
A:matplotlib.tests.test_text.vl->matplotlib.pyplot.gca().viewLim.frozen()
A:matplotlib.tests.test_text.ann->matplotlib.pyplot.gca().annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels')
A:matplotlib.tests.test_text.event->MouseEvent('button_press_event', fig.canvas, *ax.transData.transform((0.5, 0.6)))
A:matplotlib.tests.test_text.init_pos->matplotlib.pyplot.gca().annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels').get_window_extent(fig.canvas.renderer)
A:matplotlib.tests.test_text.post_pos->matplotlib.pyplot.gca().annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels').get_window_extent(fig.canvas.renderer)
A:matplotlib.tests.test_text.text->matplotlib.pyplot.gca().text(0, 0, 'test', transform=transform, transform_rotates_text=True)
A:matplotlib.tests.test_text.bbox->matplotlib.pyplot.gca().text(0, 0, 'test', transform=transform, transform_rotates_text=True).get_window_extent()
A:matplotlib.tests.test_text.t1->matplotlib.pyplot.gca().text(0.5, 0.5, 'test', rotation_mode='default', **kw)
A:matplotlib.tests.test_text.bbox1->matplotlib.pyplot.gca().text(0.5, 0.5, 'test', rotation_mode='default', **kw).get_window_extent()
A:matplotlib.tests.test_text.bbox2->matplotlib.pyplot.gca().text(0.5, 0.5, 'test', rotation_mode='default', **kw).get_window_extent(dpi=dpi * 10)
A:matplotlib.tests.test_text.kw->dict(rotation=0, va=va, ha=ha)
A:matplotlib.tests.test_text.t0->matplotlib.pyplot.gca().text(0.5, 0.5, 'test', rotation_mode='anchor', **kw)
A:matplotlib.tests.test_text.t->Text()
A:matplotlib.tests.test_text.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_text.txt1->fig.add_subplot(121).text(0.5, 0.5, 'aardvark')
A:matplotlib.tests.test_text.ann1->fig.add_subplot(122).annotate('aardvark', xy=[0.5, 0.5])
A:matplotlib.tests.test_text.fp->matplotlib.font_manager.FontProperties(size='large')
A:matplotlib.tests.test_text.sz1->matplotlib.font_manager.FontProperties(size='large').get_size_in_points()
A:matplotlib.tests.test_text.text1->matplotlib.pyplot.xlabel('value', fontproperties='Times New Roman', size=40.0)
A:matplotlib.tests.test_text.text2->matplotlib.pyplot.ylabel('counts', size=40.0, fontproperties='Times New Roman')
A:matplotlib.tests.test_text.box1->matplotlib.pyplot.xlabel('value', fontproperties='Times New Roman', size=40.0).get_window_extent(renderer=renderer)
A:matplotlib.tests.test_text.box2->matplotlib.pyplot.ylabel('counts', size=40.0, fontproperties='Times New Roman').get_window_extent(renderer=renderer)
A:matplotlib.tests.test_text.ax1->matplotlib.pyplot.figure().add_subplot(121)
A:matplotlib.tests.test_text.ax2->matplotlib.pyplot.figure().add_subplot(122)
A:matplotlib.tests.test_text.an->matplotlib.pyplot.gca().annotate('annotation', xy=(0.5, 0.5))
A:matplotlib.tests.test_text.extent1->matplotlib.pyplot.gca().annotate('annotation', xy=(0.5, 0.5)).get_window_extent(fig.canvas.get_renderer())
A:matplotlib.tests.test_text.extent2->matplotlib.pyplot.gca().annotate('annotation', xy=(0.5, 0.5)).get_window_extent(fig.canvas.get_renderer())
A:matplotlib.tests.test_text.(fig, axs)->matplotlib.pyplot.subplots(1, 2, figsize=(9, 2.5), constrained_layout=True)
A:matplotlib.tests.test_text.fig1->matplotlib.pyplot.figure(figsize=(3, 3))
A:matplotlib.tests.test_text.window_extent_test->matplotlib.pyplot.figure(figsize=(3, 3))._suptitle.get_window_extent()
A:matplotlib.tests.test_text.fig2->matplotlib.pyplot.figure(figsize=(3, 3))
A:matplotlib.tests.test_text.window_extent_ref->matplotlib.pyplot.figure(figsize=(3, 3))._suptitle.get_window_extent()
A:matplotlib.tests.test_text.transform->matplotlib.transforms.Affine2D().rotate_deg(30)
A:matplotlib.tests.test_text.result->matplotlib.pyplot.gca().text(0, 0, 'test', transform=transform, transform_rotates_text=True).get_rotation()
A:matplotlib.tests.test_text.inp->dict(fontproperties=FontProperties(weight='bold'), bbox=None)
A:matplotlib.tests.test_text.cache->dict(inp)
A:matplotlib.tests.test_text.info->matplotlib.text._get_text_metrics_with_cache_impl.cache_info()
matplotlib.tests.test_text.test_afm_kerning()
matplotlib.tests.test_text.test_agg_text_clip()
matplotlib.tests.test_text.test_alignment()
matplotlib.tests.test_text.test_annotate_errors(err,xycoords,match)
matplotlib.tests.test_text.test_annotation_contains()
matplotlib.tests.test_text.test_annotation_negative_ax_coords()
matplotlib.tests.test_text.test_annotation_negative_fig_coords()
matplotlib.tests.test_text.test_annotation_units(fig_test,fig_ref)
matplotlib.tests.test_text.test_annotation_update()
matplotlib.tests.test_text.test_antialiasing()
matplotlib.tests.test_text.test_axes_titles()
matplotlib.tests.test_text.test_bbox_clipping()
matplotlib.tests.test_text.test_buffer_size(fig_test,fig_ref)
matplotlib.tests.test_text.test_char_index_at()
matplotlib.tests.test_text.test_contains()
matplotlib.tests.test_text.test_font_scaling()
matplotlib.tests.test_text.test_font_styles()
matplotlib.tests.test_text.test_fontproperties_kwarg_precedence()
matplotlib.tests.test_text.test_get_rotation_float()
matplotlib.tests.test_text.test_get_rotation_int()
matplotlib.tests.test_text.test_get_rotation_mod360()
matplotlib.tests.test_text.test_get_rotation_none()
matplotlib.tests.test_text.test_get_rotation_raises()
matplotlib.tests.test_text.test_get_rotation_string()
matplotlib.tests.test_text.test_get_window_extent_wrapped()
matplotlib.tests.test_text.test_hinting_factor_backends()
matplotlib.tests.test_text.test_invalid_color()
matplotlib.tests.test_text.test_invalid_rotation_values(rotation)
matplotlib.tests.test_text.test_large_subscript_title()
matplotlib.tests.test_text.test_long_word_wrap()
matplotlib.tests.test_text.test_metrics_cache()
matplotlib.tests.test_text.test_multiline()
matplotlib.tests.test_text.test_multiline2()
matplotlib.tests.test_text.test_non_default_dpi(text)
matplotlib.tests.test_text.test_nonfinite_pos()
matplotlib.tests.test_text.test_null_rotation_with_rotation_mode(ha,va)
matplotlib.tests.test_text.test_parse_math()
matplotlib.tests.test_text.test_parse_math_rcparams()
matplotlib.tests.test_text.test_pdf_chars_beyond_bmp()
matplotlib.tests.test_text.test_pdf_font42_kerning()
matplotlib.tests.test_text.test_pdf_kerning()
matplotlib.tests.test_text.test_set_position()
matplotlib.tests.test_text.test_single_artist_usenotex(fmt)
matplotlib.tests.test_text.test_single_artist_usetex()
matplotlib.tests.test_text.test_text_as_path_opacity()
matplotlib.tests.test_text.test_text_as_text_opacity()
matplotlib.tests.test_text.test_text_repr()
matplotlib.tests.test_text.test_text_size_binding()
matplotlib.tests.test_text.test_text_stale()
matplotlib.tests.test_text.test_titles()
matplotlib.tests.test_text.test_transform_rotates_text()
matplotlib.tests.test_text.test_two_2line_texts(spacing1,spacing2)
matplotlib.tests.test_text.test_unsupported_script(recwarn)
matplotlib.tests.test_text.test_update_mutate_input()
matplotlib.tests.test_text.test_usetex_is_copied()
matplotlib.tests.test_text.test_validate_linespacing()
matplotlib.tests.test_text.test_wrap(x,rotation,halign)
matplotlib.tests.test_text.test_wrap_no_wrap()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_arrow_patches.py----------------------------------------
A:matplotlib.tests.test_arrow_patches.(fig, axs)->matplotlib.pyplot.subplots(len(t), len(r), squeeze=False, figsize=(8, 4.5), subplot_kw=dict(aspect=1))
A:matplotlib.tests.test_arrow_patches.styles->matplotlib.patches.ConnectionStyle.get_styles()
A:matplotlib.tests.test_arrow_patches.n->len(styles)
A:matplotlib.tests.test_arrow_patches.fig->matplotlib.pyplot.figure(figsize=(4 / 1.5, figheight / 1.5))
A:matplotlib.tests.test_arrow_patches.fig2->matplotlib.pyplot.figure('fancyarrow_dpi_cor_test', figsize=(4, 3), dpi=50)
A:matplotlib.tests.test_arrow_patches.ax->matplotlib.pyplot.figure('fancyarrow_dpi_cor_test', figsize=(4, 3), dpi=50).add_subplot()
A:matplotlib.tests.test_arrow_patches.(fig, ax)->matplotlib.pyplot.subplots(figsize=(6, 10))
A:matplotlib.tests.test_arrow_patches.e->matplotlib.patches.FancyArrowPatch((0, 0), (0.5, 0.5), arrowstyle='-|>', connectionstyle='angle3,angleA=0,angleB=90', mutation_scale=10.0, linewidth=2, linestyle='dashed', color='k')
A:matplotlib.tests.test_arrow_patches.e2->matplotlib.patches.FancyArrowPatch((0, 0), (0.5, 0.5), arrowstyle='-|>', connectionstyle='angle3', mutation_scale=10.0, linewidth=2, linestyle='dotted', color='k')
A:matplotlib.tests.test_arrow_patches.patch->matplotlib.patches.FancyArrowPatch((0.1, i), (0.8, i + 0.5), arrowstyle='->', connectionstyle=stylename, mutation_scale=25)
A:matplotlib.tests.test_arrow_patches.arrowstyle->style.replace('ANGLE', str(angle))
A:matplotlib.tests.test_arrow_patches.conn_style_1->matplotlib.patches.ConnectionStyle.Angle3(angleA=20, angleB=200)
A:matplotlib.tests.test_arrow_patches.p1->matplotlib.patches.FancyArrowPatch((0.2, 0.2), (0.5, 0.5), connectionstyle=conn_style_1)
A:matplotlib.tests.test_arrow_patches.conn_style_2->matplotlib.patches.ConnectionStyle.Angle3(angleA=20, angleB=199.9)
A:matplotlib.tests.test_arrow_patches.p2->matplotlib.patches.FancyArrowPatch((0.2, 0.2), (0.5, 0.5), connectionstyle=conn_style_2)
matplotlib.tests.test_arrow_patches.__prepare_fancyarrow_dpi_cor_test()
matplotlib.tests.test_arrow_patches.draw_arrow(ax,t,r)
matplotlib.tests.test_arrow_patches.test_arrow_styles()
matplotlib.tests.test_arrow_patches.test_boxarrow()
matplotlib.tests.test_arrow_patches.test_connection_styles()
matplotlib.tests.test_arrow_patches.test_fancyarrow()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dash()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dpi_cor_100dpi()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dpi_cor_200dpi()
matplotlib.tests.test_arrow_patches.test_invalid_intersection()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_gtk3.py----------------------------------------
A:matplotlib.tests.test_backend_gtk3.fig->matplotlib.pyplot.figure()
matplotlib.tests.test_backend_gtk3.test_correct_key()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_ft2font.py----------------------------------------
A:matplotlib.tests.test_ft2font.file_name->matplotlib.font_manager.findfont('DejaVu Sans')
A:matplotlib.tests.test_ft2font.fp->matplotlib.font_manager.FontProperties(family=[family_name])
A:matplotlib.tests.test_ft2font.fig->matplotlib.pyplot.figure(figsize=(4.75, 1.85))
A:matplotlib.tests.test_ft2font.ft->matplotlib.font_manager.get_font(fm.fontManager._find_fonts_by_props(fm.FontProperties(family=['DejaVu Sans', family_name])))
A:matplotlib.tests.test_ft2font.fontmap->matplotlib.font_manager.get_font(fm.fontManager._find_fonts_by_props(fm.FontProperties(family=['DejaVu Sans', family_name])))._get_fontmap(text)
matplotlib.tests.test_ft2font.test__get_fontmap(family_name,file_name)
matplotlib.tests.test_ft2font.test_fallback_errors()
matplotlib.tests.test_ft2font.test_fallback_smoke()
matplotlib.tests.test_ft2font.test_font_fallback_chinese(fig_test,fig_ref,family_name,file_name)
matplotlib.tests.test_ft2font.test_ft2font_positive_hinting_factor()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_marker.py----------------------------------------
A:matplotlib.tests.test_marker.marker_style->matplotlib.markers.MarkerStyle(marker='o', fillstyle='none')
A:matplotlib.tests.test_marker.ms->matplotlib.markers.MarkerStyle(None)
A:matplotlib.tests.test_marker.ax_test->fig_test.add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_marker.ax_ref->fig_ref.add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_marker.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_marker.marker_count->len(markers.MarkerStyle.markers)
A:matplotlib.tests.test_marker.marker->matplotlib.markers.MarkerStyle('1', transform=Affine2D().translate(1, 1))
A:matplotlib.tests.test_marker.t->Affine2D().translate(1, 1)
A:matplotlib.tests.test_marker.t_marker->matplotlib.markers.MarkerStyle('o', transform=t)
A:matplotlib.tests.test_marker.styled_marker->matplotlib.markers.MarkerStyle('*', capstyle=capstl)
A:matplotlib.tests.test_marker.new_marker->matplotlib.markers.MarkerStyle('1', transform=Affine2D().translate(1, 1)).scaled(2)
A:matplotlib.tests.test_marker.expected->Affine2D().translate(1, 1).scale(2)
A:matplotlib.tests.test_marker.m1->matplotlib.markers.MarkerStyle('o', 'left')
A:matplotlib.tests.test_marker.m2->matplotlib.markers.MarkerStyle('o', 'left', Affine2D().rotate_deg(90))
matplotlib.tests.test_marker.UnsnappedMarkerStyle(markers.MarkerStyle)
matplotlib.tests.test_marker.UnsnappedMarkerStyle._recache(self)
matplotlib.tests.test_marker.test_alt_transform()
matplotlib.tests.test_marker.test_asterisk_marker(fig_test,fig_ref,request)
matplotlib.tests.test_marker.test_deprecated_marker()
matplotlib.tests.test_marker.test_marker_clipping(fig_ref,fig_test)
matplotlib.tests.test_marker.test_marker_fillstyle()
matplotlib.tests.test_marker.test_marker_init_captyle()
matplotlib.tests.test_marker.test_marker_init_joinstyle()
matplotlib.tests.test_marker.test_marker_init_transforms()
matplotlib.tests.test_marker.test_marker_rotated(marker,deg,rad,expected)
matplotlib.tests.test_marker.test_marker_rotated_invalid()
matplotlib.tests.test_marker.test_marker_scaled()
matplotlib.tests.test_marker.test_marker_transformed(marker,transform,expected)
matplotlib.tests.test_marker.test_markers_invalid(marker)
matplotlib.tests.test_marker.test_markers_valid(marker)
matplotlib.tests.test_marker.test_poly_marker(fig_test,fig_ref)
matplotlib.tests.test_marker.test_star_marker()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_mlab.py----------------------------------------
A:matplotlib.tests.test_mlab.ind->numpy.arange(0, len(x) - NFFT + 1, step)
A:matplotlib.tests.test_mlab.n->len(ind)
A:matplotlib.tests.test_mlab.result->numpy.zeros((NFFT, n))
A:matplotlib.tests.test_mlab.x->numpy.random.randn(N)
A:matplotlib.tests.test_mlab.y->matplotlib.mlab.GaussianKDE(x1).evaluate(x2)
A:matplotlib.tests.test_mlab.yt->self.calc_window_target(x, n, noverlap=noverlap, axis=axis)
A:matplotlib.tests.test_mlab.x1->numpy.arange(3, 10, 2)
A:matplotlib.tests.test_mlab.x2->numpy.arange(3, 8, 2)
A:matplotlib.tests.test_mlab.ones->numpy.ones(n)
A:matplotlib.tests.test_mlab.self.sig_zeros->numpy.zeros(n)
A:matplotlib.tests.test_mlab.self.sig_slope->numpy.linspace(-10.0, 90.0, n)
A:matplotlib.tests.test_mlab.input->numpy.vstack([self.sig_off, self.sig_slope, self.sig_slope + self.sig_off])
A:matplotlib.tests.test_mlab.target->numpy.vstack([self.sig_zeros, self.sig_zeros, self.sig_zeros])
A:matplotlib.tests.test_mlab.pad_to_density->int(2 ** np.ceil(np.log2(NFFT_density_real)))
A:matplotlib.tests.test_mlab.pad_to_spectrum_real->len(x)
A:matplotlib.tests.test_mlab.pad_to_spectrum_realpad_to_spectrum->len(x)
A:matplotlib.tests.test_mlab.NFFT_spectrum_realNFFT_spectrum->len(x)
A:matplotlib.tests.test_mlab.freqs_density->numpy.linspace(-Fs / 2, Fs / 2, num=pad_to_density_real, endpoint=False)
A:matplotlib.tests.test_mlab.freqs_spectrum->numpy.linspace(-Fs / 2, Fs / 2, num=pad_to_spectrum_real, endpoint=False)
A:matplotlib.tests.test_mlab.t_specgram->numpy.array([NFFT_specgram_real / (2 * Fs)])
A:matplotlib.tests.test_mlab.t_spectrum->numpy.array([NFFT_spectrum_real / (2 * Fs)])
A:matplotlib.tests.test_mlab.i->numpy.abs(resfreqs - fstim).argmin()
A:matplotlib.tests.test_mlab.fspa->numpy.abs(fsp)
A:matplotlib.tests.test_mlab.zeroind->numpy.abs(fsp).argmin()
A:matplotlib.tests.test_mlab.spect->numpy.abs(spec).copy()
A:matplotlib.tests.test_mlab.maxind->numpy.abs(spec).copy().argmax()
A:matplotlib.tests.test_mlab.freqs->getattr(self, f'freqs_{case}')
A:matplotlib.tests.test_mlab.(spec, fsp, t)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, **kwargs)
A:matplotlib.tests.test_mlab.(spec, fsp)->getattr(mlab, f'{kind}_spectrum')(x=self.y, Fs=self.Fs, sides=self.sides, pad_to=self.pad_to_spectrum)
A:matplotlib.tests.test_mlab.sargs->dict(x=self.y, y=self.y + 1, Fs=self.Fs, window=mlab.window_none, sides=self.sides)
A:matplotlib.tests.test_mlab.(spec0, _)->matplotlib.mlab.csd(NFFT=self.NFFT_density, **sargs)
A:matplotlib.tests.test_mlab.(spec1, _)->matplotlib.mlab.csd(NFFT=self.NFFT_density * 2, **sargs)
A:matplotlib.tests.test_mlab.ydata->numpy.tile(ydata, (20, 1))
A:matplotlib.tests.test_mlab.ydatab->numpy.tile(ydata, (20, 1)).T.flatten()
A:matplotlib.tests.test_mlab.ycontrol->ycontrol.flatten().flatten()
A:matplotlib.tests.test_mlab.(spec_g, fsp_g)->matplotlib.mlab.psd(x=ydataf, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, detrend=mlab.detrend_linear, window=mlab.window_hanning)
A:matplotlib.tests.test_mlab.(spec_b, fsp_b)->matplotlib.mlab.psd(x=ydatab, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, detrend=mlab.detrend_linear, window=mlab.window_hanning)
A:matplotlib.tests.test_mlab.(spec_c, fsp_c)->matplotlib.mlab.psd(x=ycontrol, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, window=mlab.window_none)
A:matplotlib.tests.test_mlab.windowVals->matplotlib.mlab.window_hanning(np.ones_like(ycontrol1))
A:matplotlib.tests.test_mlab.ycontrol2->matplotlib.mlab.window_hanning(ycontrol2)
A:matplotlib.tests.test_mlab.ydataf->numpy.tile(ydata, (20, 1)).flatten()
A:matplotlib.tests.test_mlab.fac->numpy.linspace(-np.pi, np.pi, self.NFFT_density_real)
A:matplotlib.tests.test_mlab.win->matplotlib.mlab.window_hanning(np.ones(self.NFFT_density_real))
A:matplotlib.tests.test_mlab.(spec_a, fsp_a)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, window=win)
A:matplotlib.tests.test_mlab.(spec_s, fsp_s)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=mlab.window_hanning, scale_by_freq=True)
A:matplotlib.tests.test_mlab.(spec_n, fsp_n)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=mlab.window_hanning, scale_by_freq=False)
A:matplotlib.tests.test_mlab.spec->numpy.abs(spec)
A:matplotlib.tests.test_mlab.specm->numpy.mean(spec, axis=1)
A:matplotlib.tests.test_mlab.(Pxx, freqsxx)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(Pxy, freqsxy)->matplotlib.mlab.csd(x=self.y, y=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(speca, freqspeca, ta)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides)
A:matplotlib.tests.test_mlab.(specb, freqspecb, tb)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode=mode)
A:matplotlib.tests.test_mlab.(specc, freqspecc, tc)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='complex')
A:matplotlib.tests.test_mlab.(specm, freqspecm, tm)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode=mode)
A:matplotlib.tests.test_mlab.(speca, fspa)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=win)
A:matplotlib.tests.test_mlab.(specb, fspb)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(cohsq, f)->matplotlib.mlab.cohere(x, y, NFFT=256, Fs=2, noverlap=128)
A:matplotlib.tests.test_mlab.kde->matplotlib.mlab.GaussianKDE(x1)
A:matplotlib.tests.test_mlab.xs->numpy.linspace(-7, 7, 51)
A:matplotlib.tests.test_mlab.kde2->matplotlib.mlab.GaussianKDE(x1, 'scott')
A:matplotlib.tests.test_mlab.y2->kde2(xs)
A:matplotlib.tests.test_mlab.xn->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.gkde->matplotlib.mlab.GaussianKDE(xn)
A:matplotlib.tests.test_mlab.gkde2->matplotlib.mlab.GaussianKDE(xn, 'scott')
A:matplotlib.tests.test_mlab.gkde3->matplotlib.mlab.GaussianKDE(xn, bw_method=gkde.factor)
A:matplotlib.tests.test_mlab.kdepdf->matplotlib.mlab.GaussianKDE(xn).evaluate(xs)
A:matplotlib.tests.test_mlab.kdepdf2->matplotlib.mlab.GaussianKDE(xn, 'scott').evaluate(xs)
A:matplotlib.tests.test_mlab.kdepdf3->matplotlib.mlab.GaussianKDE(xn, bw_method=gkde.factor).evaluate(xs)
A:matplotlib.tests.test_mlab.mygauss->matplotlib.mlab.GaussianKDE(x1, 'scott')
A:matplotlib.tests.test_mlab.multidim_data->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.data->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.u->numpy.array([0, 1, 2, 3, 1, 2, 1])
A:matplotlib.tests.test_mlab.(P, f)->matplotlib.mlab.psd(u, NFFT=u.size * 2, Fs=1 / dt, window=mlab.window_none, detrend=mlab.detrend_none, noverlap=0, pad_to=None, scale_by_freq=None, sides='onesided')
A:matplotlib.tests.test_mlab.Su_1side->numpy.append([Su[0]], Su[1:4] + Su[4:][::-1])
matplotlib.tests.test_mlab.TestDetrend
matplotlib.tests.test_mlab.TestDetrend.allclose(self,*args)
matplotlib.tests.test_mlab.TestDetrend.setup_method(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_2d(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1d_base_slope_off_list_andor_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2d(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_linear_1d(self)
matplotlib.tests.test_mlab.TestGaussianKDE
matplotlib.tests.test_mlab.TestGaussianKDE.test_gaussian_kde_covariance_caching(self)
matplotlib.tests.test_mlab.TestGaussianKDE.test_kde_bandwidth_method(self)
matplotlib.tests.test_mlab.TestGaussianKDE.test_kde_integer_input(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_callable_covariance_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_callable_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_no_data(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scalar_covariance_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scalar_empty_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scott_multidim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scott_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_silverman_multidim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_silverman_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_single_dataset_element(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_wrong_bw_method(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_diff_dim(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_dim_and_num(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_equal_dim_and_num_lt(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_inv_dim(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_point_dim_not_one(self)
matplotlib.tests.test_mlab.TestSpectral
matplotlib.tests.test_mlab.TestSpectral.check_freqs(self,vals,targfreqs,resfreqs,fstims)
matplotlib.tests.test_mlab.TestSpectral.check_maxfreq(self,spec,fsp,fstims)
matplotlib.tests.test_mlab.TestSpectral.stim(self,request,fstims,iscomplex,sides,len_x,NFFT_density,nover_density,pad_to_density,pad_to_spectrum)
matplotlib.tests.test_mlab.TestSpectral.test_csd(self)
matplotlib.tests.test_mlab.TestSpectral.test_csd_padding(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_csd_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_detrend(self,make_data,detrend)
matplotlib.tests.test_mlab.TestSpectral.test_psd_window_flattop(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_window_hanning(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_window_hanning_detrend_linear(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray_scale_by_freq(self)
matplotlib.tests.test_mlab.TestSpectral.test_single_spectrum_helper_unsupported_modes(self,mode)
matplotlib.tests.test_mlab.TestSpectral.test_specgram(self,kwargs)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_auto_default_psd_equal(self,mode)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_complex_equivalent(self,mode,conv)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_warn_only1seg(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_psd(self,mode,case)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectrum(self,kind)
matplotlib.tests.test_mlab.TestStride
matplotlib.tests.test_mlab.TestStride.calc_window_target(self,x,NFFT,noverlap=0,axis=0)
matplotlib.tests.test_mlab.TestStride.get_base(self,x)
matplotlib.tests.test_mlab.TestStride.stride_is_deprecated(self)
matplotlib.tests.test_mlab.TestStride.test_stride_windows(self,n,noverlap,axis)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_invalid_input_shape(self,shape)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_invalid_params(self,n,noverlap)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_n32_noverlap0_unflatten(self,axis)
matplotlib.tests.test_mlab.test_cohere()
matplotlib.tests.test_mlab.test_psd_onesided_norm()
matplotlib.tests.test_mlab.test_psd_oversampling()
matplotlib.tests.test_mlab.test_window()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_png.py----------------------------------------
A:matplotlib.tests.test_png.files->sorted((Path(__file__).parent / 'baseline_images/pngsuite').glob('basn*.png'))
A:matplotlib.tests.test_png.data->matplotlib.pyplot.imread(fname)
A:matplotlib.tests.test_png.buf->fin.read()
A:matplotlib.tests.test_png.b->BytesIO()
A:matplotlib.tests.test_png.b2->BytesIO(b.read(20))
matplotlib.tests.test_png.test_pngsuite()
matplotlib.tests.test_png.test_truncated_buffer()
matplotlib.tests.test_png.test_truncated_file(tmp_path)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_sankey.py----------------------------------------
A:matplotlib.tests.test_sankey.sankey->Sankey()
A:matplotlib.tests.test_sankey.s->Sankey(flows=[0.25, -0.25, 0, 0.5, -0.5], labels=['Foo'], orientations=[-1], unit='Bar')
A:matplotlib.tests.test_sankey.sf->Sankey(flows=[0.25, -0.25, 0, 0.5, -0.5], labels=['Foo'], orientations=[-1], unit='Bar').finish()
A:matplotlib.tests.test_sankey.ax_test->fig_test.gca()
A:matplotlib.tests.test_sankey.s_test->Sankey(ax=ax_test, flows=[0.25, -0.25, -0.25, 0.25, 0.5, -0.5], orientations=[1, -1, 1, -1, 0, 0])
A:matplotlib.tests.test_sankey.ax_ref->fig_ref.gca()
A:matplotlib.tests.test_sankey.s_ref->Sankey(ax=ax_ref)
matplotlib.tests.test_sankey.test_format_using_callable()
matplotlib.tests.test_sankey.test_label()
matplotlib.tests.test_sankey.test_sankey()
matplotlib.tests.test_sankey.test_sankey2()
matplotlib.tests.test_sankey.test_sankey3(fig_test,fig_ref)
matplotlib.tests.test_sankey.test_sankey_add_errors(kwargs,msg)
matplotlib.tests.test_sankey.test_sankey_errors(kwargs,msg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_cairo.py----------------------------------------
A:matplotlib.tests.test_backend_cairo.star->matplotlib.path.Path.unit_regular_star(6)
A:matplotlib.tests.test_backend_cairo.circle->matplotlib.path.Path.unit_circle()
A:matplotlib.tests.test_backend_cairo.verts->numpy.concatenate([circle.vertices, star.vertices[::-1]])
A:matplotlib.tests.test_backend_cairo.codes->numpy.concatenate([circle.codes, star.codes])
A:matplotlib.tests.test_backend_cairo.cut_star1->matplotlib.path.Path(verts, codes)
A:matplotlib.tests.test_backend_cairo.cut_star2->matplotlib.path.Path(verts + 1, codes)
A:matplotlib.tests.test_backend_cairo.ax->fig_test.subplots()
A:matplotlib.tests.test_backend_cairo.patch->matplotlib.patches.PathPatch(cut_star2, linewidth=5, linestyle='dashdot', facecolor=(1, 0, 0, 0.5), edgecolor=(0, 0, 1, 0.75))
A:matplotlib.tests.test_backend_cairo.col->matplotlib.collections.PathCollection([cut_star1, cut_star2], linewidth=5, linestyles='dashdot', facecolor=(1, 0, 0, 0.5), edgecolor=(0, 0, 1, 0.75))
matplotlib.tests.test_backend_cairo.test_patch_alpha_coloring(fig_test,fig_ref)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_dviread.py----------------------------------------
A:matplotlib.tests.test_dviread.filename->str(Path(__file__).parent / 'baseline_images/dviread/test.map')
A:matplotlib.tests.test_dviread.fontmap->matplotlib.dviread.PsfontsMap(filename)
A:matplotlib.tests.test_dviread.correct->json.load(f)
matplotlib.tests.test_dviread.test_PsfontsMap(monkeypatch)
matplotlib.tests.test_dviread.test_dviread()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_sphinxext.py----------------------------------------
A:matplotlib.tests.test_sphinxext.proc->Popen(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True, env={**os.environ, 'MPLBACKEND': '', 'GCOV_ERROR_FILE': os.devnull})
A:matplotlib.tests.test_sphinxext.(out, err)->Popen(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True, env={**os.environ, 'MPLBACKEND': '', 'GCOV_ERROR_FILE': os.devnull}).communicate()
A:matplotlib.tests.test_sphinxext.html_contents->(html_dir / 'some_plots.html').read_bytes()
A:matplotlib.tests.test_sphinxext.contents->contents.replace(b'plt.plot(range(6))', b'plt.plot(range(4))').replace(b'plt.plot(range(6))', b'plt.plot(range(4))')
matplotlib.tests.test_sphinxext.build_sphinx_html(source_dir,doctree_dir,html_dir,extra_args=None)
matplotlib.tests.test_sphinxext.test_plot_html_show_source_link(tmp_path)
matplotlib.tests.test_sphinxext.test_show_source_link_false(tmp_path,plot_html_show_source_link)
matplotlib.tests.test_sphinxext.test_show_source_link_true(tmp_path,plot_html_show_source_link)
matplotlib.tests.test_sphinxext.test_tinypages(tmp_path)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_testing.py----------------------------------------
A:matplotlib.tests.test_testing.fig->matplotlib.pyplot.figure()
matplotlib.tests.test_testing.test_check_figures_equal_closed_fig(fig_test,fig_ref)
matplotlib.tests.test_testing.test_check_figures_equal_extra_fig(fig_test,fig_ref)
matplotlib.tests.test_testing.test_parametrize_with_check_figure_equal(a,fig_ref,b,fig_test)
matplotlib.tests.test_testing.test_warn_to_fail()
matplotlib.tests.test_testing.test_wrap_failure()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_units.py----------------------------------------
A:matplotlib.tests.test_units.qc->matplotlib.units.ConversionInterface()
A:matplotlib.tests.test_units.qc.convert->MagicMock(side_effect=convert)
A:matplotlib.tests.test_units.qc.axisinfo->MagicMock(side_effect=lambda u, a: munits.AxisInfo(label=u, default_limits=(0, 100)))
A:matplotlib.tests.test_units.qc.default_units->MagicMock(side_effect=default_units)
A:matplotlib.tests.test_units.y->numpy.arange(len(times), dtype=float)
A:matplotlib.tests.test_units.x->Quantity(np.linspace(0, 1, 10), 'hours')
A:matplotlib.tests.test_units.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_units.data->numpy.linspace(-5, 5)
A:matplotlib.tests.test_units.data_masked->numpy.ma.array(data, mask=(data > -2) & (data < 2))
A:matplotlib.tests.test_units.data_masked_units->Quantity(data_masked, 'meters')
A:matplotlib.tests.test_units.day->matplotlib.testing.jpl_units.Duration('ET', 24.0 * 60.0 * 60.0)
A:matplotlib.tests.test_units.b->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime(2009, 4, 25))
A:matplotlib.tests.test_units.times->numpy.arange('2005-02', '2005-03', dtype='datetime64[D]')
A:matplotlib.tests.test_units.y1->Quantity(np.linspace(1, 2, 10), 'feet')
A:matplotlib.tests.test_units.y2->Quantity(np.linspace(3, 4, 10), 'feet')
A:matplotlib.tests.test_units.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_units.(fig, ax1)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_units.self._array->numpy.asanyarray(array)
A:matplotlib.tests.test_units.kernel->Kernel([1, 2, 3, 4, 5])
matplotlib.tests.test_units.Kernel(self,array)
matplotlib.tests.test_units.Kernel.__array__(self)
matplotlib.tests.test_units.Kernel.__init__(self,array)
matplotlib.tests.test_units.Kernel.shape(self)
matplotlib.tests.test_units.Quantity(self,data,units)
matplotlib.tests.test_units.Quantity.__array__(self)
matplotlib.tests.test_units.Quantity.__copy__(self)
matplotlib.tests.test_units.Quantity.__getattr__(self,attr)
matplotlib.tests.test_units.Quantity.__getitem__(self,item)
matplotlib.tests.test_units.Quantity.__init__(self,data,units)
matplotlib.tests.test_units.Quantity.to(self,new_units)
matplotlib.tests.test_units.quantity_converter()
matplotlib.tests.test_units.test_empty_arrays()
matplotlib.tests.test_units.test_empty_default_limits(quantity_converter)
matplotlib.tests.test_units.test_empty_set_limits_with_units(quantity_converter)
matplotlib.tests.test_units.test_errorbar_mixed_units()
matplotlib.tests.test_units.test_jpl_bar_units()
matplotlib.tests.test_units.test_jpl_barh_units()
matplotlib.tests.test_units.test_numpy_facade(quantity_converter)
matplotlib.tests.test_units.test_plot_kernel()
matplotlib.tests.test_units.test_plot_masked_units()
matplotlib.tests.test_units.test_scatter_element0_masked()
matplotlib.tests.test_units.test_shared_axis_categorical()
matplotlib.tests.test_units.test_shared_axis_datetime()
matplotlib.tests.test_units.test_shared_axis_quantity(quantity_converter)
matplotlib.tests.test_units.test_subclass(fig_test,fig_ref)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_texmanager.py----------------------------------------
A:matplotlib.tests.test_texmanager.src1->TexManager()._get_tex_source('', fontsize=12)
A:matplotlib.tests.test_texmanager.src2->TexManager()._get_tex_source('', fontsize=12)
A:matplotlib.tests.test_texmanager.tm->TexManager()
A:matplotlib.tests.test_texmanager.src->Path(tm.make_tex('hello, world', fontsize=12)).read_text()
A:matplotlib.tests.test_texmanager.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_texmanager.completed->subprocess.run([sys.executable, '-c', 'import matplotlib.pyplot as plt;plt.rcParams.update({"text.usetex": True});plt.title("paranoid");plt.show(block=False);'], env={**os.environ, 'openin_any': 'p'}, check=True, capture_output=True)
matplotlib.tests.test_texmanager.test_font_selection(rc,preamble,family)
matplotlib.tests.test_texmanager.test_fontconfig_preamble()
matplotlib.tests.test_texmanager.test_openin_any_paranoid()
matplotlib.tests.test_texmanager.test_unicode_characters()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_offsetbox.py----------------------------------------
A:matplotlib.tests.test_offsetbox.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_offsetbox.da->DrawingArea(20, 20, 0, 0, clip=True)
A:matplotlib.tests.test_offsetbox.bg->matplotlib.patches.Rectangle((0, 0), size, size, facecolor='#CCCCCC', edgecolor='None', linewidth=0)
A:matplotlib.tests.test_offsetbox.line->matplotlib.lines.Line2D([-size * 0.5, size * 1.5], [size / 2, size / 2], color='black', linewidth=10)
A:matplotlib.tests.test_offsetbox.anchored_box->AnchoredOffsetbox(loc=code, child=da)
A:matplotlib.tests.test_offsetbox._Params->namedtuple('_params', 'wd_list, total, sep, expected')
A:matplotlib.tests.test_offsetbox.result->_get_packed_offsets(widths, total, sep, mode='equal')
A:matplotlib.tests.test_offsetbox.picking_child->TextArea('■', textprops={'fontsize': 5})
A:matplotlib.tests.test_offsetbox.im->OffsetImage(np.random.rand(10, 10), zoom=3)
A:matplotlib.tests.test_offsetbox.ab->AnnotationBbox(da, [0.5, 0.5], xybox=(-0.2, 0.5), xycoords='data', boxcoords='axes fraction', box_alignment=(0.0, 0.5), arrowprops=arrowprops)
A:matplotlib.tests.test_offsetbox.(x, y)->ax.transAxes.transform_point((0.5, 0.5))
A:matplotlib.tests.test_offsetbox.text0->AnchoredText('test\ntest long text', loc='center left', pad=0.2, prop={'ha': 'left'})
A:matplotlib.tests.test_offsetbox.text1->AnchoredText('test\ntest long text', loc='center', pad=0.2, prop={'ha': 'center'})
A:matplotlib.tests.test_offsetbox.text2->AnchoredText('test\ntest long text', loc='center right', pad=0.2, prop={'ha': 'right'})
A:matplotlib.tests.test_offsetbox.an1->ax.annotate('Annotation', xy=(0.9, 0.9), xytext=(1.1, 1.1), arrowprops=dict(arrowstyle='->'), clip_on=False, va='baseline', ha='left')
A:matplotlib.tests.test_offsetbox.p->matplotlib.patches.Circle((-10, 30), 32)
A:matplotlib.tests.test_offsetbox.ab3->AnnotationBbox(da, [0.5, 0.5], xybox=(-0.2, 0.5), xycoords='data', boxcoords='axes fraction', box_alignment=(0.0, 0.5), arrowprops=dict(arrowstyle='->'))
A:matplotlib.tests.test_offsetbox.ab6->AnnotationBbox(im, (0.5, -0.3), xybox=(0, 75), xycoords='axes fraction', boxcoords='offset points', pad=0.3, arrowprops=dict(arrowstyle='->'))
A:matplotlib.tests.test_offsetbox.bb1->getattr(an1, f'get_{extent_kind}')()
A:matplotlib.tests.test_offsetbox.bb3->getattr(ab3, f'get_{extent_kind}')()
A:matplotlib.tests.test_offsetbox.bb6->getattr(ab6, f'get_{extent_kind}')()
A:matplotlib.tests.test_offsetbox.buf->io.BytesIO()
A:matplotlib.tests.test_offsetbox.fig->matplotlib.pyplot.figure(dpi=72)
A:matplotlib.tests.test_offsetbox.renderer->matplotlib.pyplot.figure(dpi=72).canvas.get_renderer()
A:matplotlib.tests.test_offsetbox.r1->DrawingArea(x1, y1)
A:matplotlib.tests.test_offsetbox.r2->DrawingArea(x2, y2)
A:matplotlib.tests.test_offsetbox.hpacker->HPacker(children=[r1, r2], align=align)
A:matplotlib.tests.test_offsetbox.bbox->VPacker(children=[r1, r2], align=align).get_bbox(renderer)
A:matplotlib.tests.test_offsetbox.(px, py)->VPacker(children=[r1, r2], align=align).get_offset(bbox, renderer)
A:matplotlib.tests.test_offsetbox.vpacker->VPacker(children=[r1, r2], align=align)
A:matplotlib.tests.test_offsetbox.at->AnchoredText('foo', 'upper left')
A:matplotlib.tests.test_offsetbox.pb->PaddedBox(at, patch_attrs={'facecolor': 'r'}, draw_frame=True)
A:matplotlib.tests.test_offsetbox.an->ax.annotate('foo', (0.5, 0.5))
matplotlib.tests.test_offsetbox.test_anchoredtext_horizontal_alignment()
matplotlib.tests.test_offsetbox.test_annotationbbox_extents(extent_kind)
matplotlib.tests.test_offsetbox.test_arrowprops_copied()
matplotlib.tests.test_offsetbox.test_expand_with_tight_layout()
matplotlib.tests.test_offsetbox.test_get_packed_offsets(widths,total,sep,mode)
matplotlib.tests.test_offsetbox.test_get_packed_offsets_equal(widths,total,sep,expected)
matplotlib.tests.test_offsetbox.test_get_packed_offsets_equal_total_none_sep_none()
matplotlib.tests.test_offsetbox.test_get_packed_offsets_expand(widths,total,sep,expected)
matplotlib.tests.test_offsetbox.test_get_packed_offsets_fixed(widths,total,sep,expected)
matplotlib.tests.test_offsetbox.test_offsetbox_clip_children()
matplotlib.tests.test_offsetbox.test_offsetbox_clipping()
matplotlib.tests.test_offsetbox.test_offsetbox_loc_codes()
matplotlib.tests.test_offsetbox.test_packers(align)
matplotlib.tests.test_offsetbox.test_paddedbox()
matplotlib.tests.test_offsetbox.test_picking(child_type,boxcoords)
matplotlib.tests.test_offsetbox.test_remove_draggable()
matplotlib.tests.test_offsetbox.test_zorder()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_container.py----------------------------------------
A:matplotlib.tests.test_container.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_container.st->matplotlib.pyplot.gca().stem([1, 2], [1, 2])
A:matplotlib.tests.test_container.eb->matplotlib.pyplot.gca().errorbar([1], [1], fmt='none')
matplotlib.tests.test_container.test_errorbar_remove()
matplotlib.tests.test_container.test_stem_remove()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_image.py----------------------------------------
A:matplotlib.tests.test_image.X->numpy.array([[[218, 165, 32], [122, 103, 238]], [[127, 255, 0], [255, 99, 71]]], dtype=np.uint8)
A:matplotlib.tests.test_image.(fig, (ax1, ax2, ax3))->matplotlib.pyplot.subplots(1, 3)
A:matplotlib.tests.test_image.(fig, (axl, axr))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_image.img->numpy.array([[2.0, 1.0, 1e+22], [4.0, 1.0, 3.0]])
A:matplotlib.tests.test_image.img[..., 1]->numpy.ones((5, 5))
A:matplotlib.tests.test_image.img[..., 3]->numpy.tril(np.ones((5, 5), dtype=np.uint8))
A:matplotlib.tests.test_image.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_image.fig->matplotlib.pyplot.figure(figsize=(1.9, 0.1), dpi=100)
A:matplotlib.tests.test_image.(x, y)->numpy.ix_(np.arange(100) / 100.0, np.arange(100) / 100)
A:matplotlib.tests.test_image.z->numpy.arange(12, dtype=float).reshape((4, 3))
A:matplotlib.tests.test_image.c->numpy.sin(20 * x ** 2 + 50 * y ** 2)
A:matplotlib.tests.test_image.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_image.buffer->io.BytesIO()
A:matplotlib.tests.test_image.A->numpy.ma.masked_array(np.ones((5, 5), dtype=np.uint16), A)
A:matplotlib.tests.test_image.ax->fig_ref.subplots()
A:matplotlib.tests.test_image.axs->axs.flatten().flatten()
A:matplotlib.tests.test_image.data->numpy.full((5, 5), x, dtype=np.float64)
A:matplotlib.tests.test_image.buff_dpi1->io.BytesIO()
A:matplotlib.tests.test_image.buff_dpi100->io.BytesIO()
A:matplotlib.tests.test_image.arr_dpi1->matplotlib.pyplot.imread(buff_dpi1, format=fmt)
A:matplotlib.tests.test_image.arr_dpi100->matplotlib.pyplot.imread(buff_dpi100, format=fmt)
A:matplotlib.tests.test_image.buff->io.BytesIO()
A:matplotlib.tests.test_image.arr_buf->(255 * arr_buf).astype('uint8')
A:matplotlib.tests.test_image.buf->io.BytesIO()
A:matplotlib.tests.test_image.pnginfo->PngInfo()
A:matplotlib.tests.test_image.im->fig_ref.subplots().imshow(array, vmin=0, vmax=1, aspect='auto', extent=(0, 1, 0, 1), interpolation='none', origin=origin)
A:matplotlib.tests.test_image.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_image.(xdisp, ydisp)->fig_ref.subplots().transData.transform([0, 0])
A:matplotlib.tests.test_image.event->MouseEvent('motion_notify_event', fig.canvas, xdisp, ydisp)
A:matplotlib.tests.test_image.trans->Affine2D().scale(2).rotate(0.5)
A:matplotlib.tests.test_image.patch->matplotlib.patches.Circle((0, 0), radius=1, transform=ax.transData)
A:matplotlib.tests.test_image.rect->matplotlib.patches.Rectangle(xy=(1, 1), width=2, height=2, transform=im.axes.transData)
A:matplotlib.tests.test_image.arr->QuantityND(np.ones((2, 2)), 'm')
A:matplotlib.tests.test_image.(fig, axs)->matplotlib.pyplot.subplots(2, 2, figsize=(3.5, 3.5), sharex=False, sharey=False, constrained_layout=True)
A:matplotlib.tests.test_image.(r, g, b, a)->sum(im[:, -1])
A:matplotlib.tests.test_image.arr[:, :, 3]->numpy.concatenate((np.arange(0, 1.1, 0.1), np.arange(0, 1, 0.1)[::-1]))
A:matplotlib.tests.test_image.arr2->numpy.zeros((21, 11, 4))
A:matplotlib.tests.test_image.t->numpy.arange(9).reshape((3, 3))
A:matplotlib.tests.test_image.image->PIL.Image.open(buff)
A:matplotlib.tests.test_image.bbox_im->BboxImage(TransformedBbox(Bbox([[0.1, 0.2], [0.3, 0.25]]), ax.figure.transFigure), interpolation='nearest')
A:matplotlib.tests.test_image.im_obj->fig_ref.subplots().imshow(im, extent=[0.4, 0.7, 0.2, 0.9], interpolation='nearest', transform=ax.transAxes)
A:matplotlib.tests.test_image.im_bbox->fig_ref.subplots().imshow(im, extent=[0.4, 0.7, 0.2, 0.9], interpolation='nearest', transform=ax.transAxes).get_window_extent(renderer)
A:matplotlib.tests.test_image.imd->numpy.ones((10, 10), dtype='uint8')
A:matplotlib.tests.test_image.im[..., 3]->numpy.linspace(0.0, 1.0, 300)
A:matplotlib.tests.test_image.num_colors->len(image.getcolors(256))
A:matplotlib.tests.test_image.corner_pixel->PIL.Image.open(buff).getpixel((0, 0))
A:matplotlib.tests.test_image.p1->ax[0].pcolormesh(data)
A:matplotlib.tests.test_image.p2->ax[1].pcolormesh(data)
A:matplotlib.tests.test_image.tree->xml.etree.ElementTree.parse(buff)
A:matplotlib.tests.test_image.xy->numpy.arange(-3.0, 3.0, delta)
A:matplotlib.tests.test_image.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_image.(fig, ax1)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_image.im1->ax1.imshow(Z, interpolation='none', cmap='viridis', origin='lower', extent=[-2, 4, -3, 2], clip_on=True)
A:matplotlib.tests.test_image.(x1, x2, y1, y2)->ax1.imshow(Z, interpolation='none', cmap='viridis', origin='lower', extent=[-2, 4, -3, 2], clip_on=True).get_extent()
A:matplotlib.tests.test_image.palette->matplotlib.pyplot.cm.gray.with_extremes(over='r', under='g', bad='b')
A:matplotlib.tests.test_image.Zm->numpy.ma.masked_where(Z > 1.2, Z)
A:matplotlib.tests.test_image.x->numpy.linspace(0, 1)
A:matplotlib.tests.test_image.kwargs->dict(origin='lower', interpolation='nearest', cmap='viridis')
A:matplotlib.tests.test_image.cmap->copy(plt.cm.RdBu_r)
A:matplotlib.tests.test_image.n->matplotlib.colors.Normalize(vmin=0, vmax=N * N - 1)
A:matplotlib.tests.test_image.mask->numpy.zeros_like(data).astype('bool')
A:matplotlib.tests.test_image.(fig, ax_grid)->matplotlib.pyplot.subplots(3, 6)
A:matplotlib.tests.test_image.interps->sorted(mimage._interpd_)
A:matplotlib.tests.test_image.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_image.out->fig_ref.subplots().imshow(arr).get_array()
A:matplotlib.tests.test_image.pc->fig_ref.subplots().imshow(img)
A:matplotlib.tests.test_image.buf_before->io.BytesIO()
A:matplotlib.tests.test_image.buf_after->io.BytesIO()
A:matplotlib.tests.test_image.(xx, yy)->numpy.meshgrid(x, x)
A:matplotlib.tests.test_image.zz->numpy.exp(-3 * (xx - 0.5) ** 2 + (yy - 0.7 ** 2))
A:matplotlib.tests.test_image.rgba->cmap(colors.Normalize()(zz))
A:matplotlib.tests.test_image.direct_computation->(im.cmap(im.norm((data * ([[1]] * 10)).T.ravel())) * 255).astype(int)
A:matplotlib.tests.test_image.obj->numpy.asarray(input_array).view(cls)
A:matplotlib.tests.test_image.self.units->getattr(obj, 'units', None)
A:matplotlib.tests.test_image.units->getattr(self, 'units', None)
A:matplotlib.tests.test_image.ret->QuantityND(ret, units)
A:matplotlib.tests.test_image.func->getattr(ufunc, method)
A:matplotlib.tests.test_image.unit->getattr(i0, 'units', 'dimensionless')
A:matplotlib.tests.test_image.out_arr->QuantityND(out_arr, unit)
A:matplotlib.tests.test_image.u0->getattr(i0, 'units', 'dimensionless')
A:matplotlib.tests.test_image.u1->getattr(i1, 'units', 'dimensionless')
A:matplotlib.tests.test_image.q->QuantityND([1, 2], 'm')
A:matplotlib.tests.test_image.masked_data->numpy.ma.array(data, mask=False)
A:matplotlib.tests.test_image.ax_test->fig_test.subplots()
A:matplotlib.tests.test_image.ax_ref->fig_ref.subplots()
A:matplotlib.tests.test_image.aa->numpy.ones((N, N))
A:matplotlib.tests.test_image.R->numpy.sqrt(X ** 2 + Y ** 2)
A:matplotlib.tests.test_image.a->numpy.sin(np.pi * 2 * (f0 * R + k * R ** 2 / 2))
A:matplotlib.tests.test_image.array->numpy.zeros((1, 2))
A:matplotlib.tests.test_image.axts->fig_test.subplots(1, 5)
A:matplotlib.tests.test_image.axrs->fig_ref.subplots(1, 5)
matplotlib.tests.test_image.QuantityND(cls,input_array,units)
matplotlib.tests.test_image.QuantityND.__array_finalize__(self,obj)
matplotlib.tests.test_image.QuantityND.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
matplotlib.tests.test_image.QuantityND.__getitem__(self,item)
matplotlib.tests.test_image.QuantityND.__new__(cls,input_array,units)
matplotlib.tests.test_image.QuantityND.v(self)
matplotlib.tests.test_image.test_alpha_interp()
matplotlib.tests.test_image.test_axesimage_setdata()
matplotlib.tests.test_image.test_bbox_image_inverted()
matplotlib.tests.test_image.test_clip_path_disables_compositing(fig_test,fig_ref)
matplotlib.tests.test_image.test_composite(fmt,counted,composite_image,count)
matplotlib.tests.test_image.test_cursor_data()
matplotlib.tests.test_image.test_empty_imshow(make_norm)
matplotlib.tests.test_image.test_exact_vmin()
matplotlib.tests.test_image.test_figimage(suppressComposite)
matplotlib.tests.test_image.test_figureimage_setdata()
matplotlib.tests.test_image.test_format_cursor_data(data,text)
matplotlib.tests.test_image.test_full_invalid()
matplotlib.tests.test_image.test_get_window_extent_for_AxisImage()
matplotlib.tests.test_image.test_huge_range_log(fig_test,fig_ref,x)
matplotlib.tests.test_image.test_image_alpha()
matplotlib.tests.test_image.test_image_array_alpha(fig_test,fig_ref)
matplotlib.tests.test_image.test_image_array_alpha_validation()
matplotlib.tests.test_image.test_image_clip()
matplotlib.tests.test_image.test_image_cliprect()
matplotlib.tests.test_image.test_image_composite_alpha()
matplotlib.tests.test_image.test_image_composite_background()
matplotlib.tests.test_image.test_image_cursor_formatting()
matplotlib.tests.test_image.test_image_edges()
matplotlib.tests.test_image.test_image_interps()
matplotlib.tests.test_image.test_image_placement()
matplotlib.tests.test_image.test_image_preserve_size()
matplotlib.tests.test_image.test_image_preserve_size2()
matplotlib.tests.test_image.test_image_python_io()
matplotlib.tests.test_image.test_image_shift()
matplotlib.tests.test_image.test_imread_fspath()
matplotlib.tests.test_image.test_imread_pil_uint16()
matplotlib.tests.test_image.test_imsave(fmt)
matplotlib.tests.test_image.test_imsave_color_alpha()
matplotlib.tests.test_image.test_imsave_fspath(fmt)
matplotlib.tests.test_image.test_imsave_pil_kwargs_png()
matplotlib.tests.test_image.test_imsave_pil_kwargs_tiff()
matplotlib.tests.test_image.test_imshow()
matplotlib.tests.test_image.test_imshow_10_10_1(fig_test,fig_ref)
matplotlib.tests.test_image.test_imshow_10_10_2()
matplotlib.tests.test_image.test_imshow_10_10_5()
matplotlib.tests.test_image.test_imshow_antialiased(fig_test,fig_ref,img_size,fig_size,interpolation)
matplotlib.tests.test_image.test_imshow_bignumbers()
matplotlib.tests.test_image.test_imshow_bignumbers_real()
matplotlib.tests.test_image.test_imshow_bool()
matplotlib.tests.test_image.test_imshow_clips_rgb_to_valid_range(dtype)
matplotlib.tests.test_image.test_imshow_endianess()
matplotlib.tests.test_image.test_imshow_flatfield()
matplotlib.tests.test_image.test_imshow_float128()
matplotlib.tests.test_image.test_imshow_float16()
matplotlib.tests.test_image.test_imshow_masked_interpolation()
matplotlib.tests.test_image.test_imshow_no_warn_invalid()
matplotlib.tests.test_image.test_imshow_pil(fig_test,fig_ref)
matplotlib.tests.test_image.test_imshow_quantitynd()
matplotlib.tests.test_image.test_imshow_zoom(fig_test,fig_ref)
matplotlib.tests.test_image.test_interp_nearest_vs_none()
matplotlib.tests.test_image.test_jpeg_2d()
matplotlib.tests.test_image.test_jpeg_alpha()
matplotlib.tests.test_image.test_large_image(fig_test,fig_ref,dim,size,msg,origin)
matplotlib.tests.test_image.test_load_from_url()
matplotlib.tests.test_image.test_log_scale_image()
matplotlib.tests.test_image.test_mask_image()
matplotlib.tests.test_image.test_mask_image_all()
matplotlib.tests.test_image.test_mask_image_over_under()
matplotlib.tests.test_image.test_minimized_rasterized()
matplotlib.tests.test_image.test_no_interpolation_origin()
matplotlib.tests.test_image.test_nonuniform_and_pcolor()
matplotlib.tests.test_image.test_nonuniformimage_setcmap()
matplotlib.tests.test_image.test_nonuniformimage_setnorm()
matplotlib.tests.test_image.test_norm_change(fig_test,fig_ref)
matplotlib.tests.test_image.test_quantitynd()
matplotlib.tests.test_image.test_rasterize_dpi()
matplotlib.tests.test_image.test_relim()
matplotlib.tests.test_image.test_respects_bbox()
matplotlib.tests.test_image.test_rgba_antialias()
matplotlib.tests.test_image.test_rotate_image()
matplotlib.tests.test_image.test_setdata_xya(image_cls,x,y,a)
matplotlib.tests.test_image.test_spy_box(fig_test,fig_ref)
matplotlib.tests.test_image.test_str_norms(fig_test,fig_ref)
matplotlib.tests.test_image.test_unclipped()
matplotlib.tests.test_image.test_zoom_and_clip_upper_origin()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_path.py----------------------------------------
A:matplotlib.tests.test_path.path->matplotlib.path.Path.arc(low, high)
A:matplotlib.tests.test_path.bad_verts1->numpy.arange(12).reshape(4, 3)
A:matplotlib.tests.test_path.bad_verts2->numpy.arange(12).reshape(2, 3, 2)
A:matplotlib.tests.test_path.good_verts->numpy.arange(12).reshape(6, 2)
A:matplotlib.tests.test_path.bad_codes->numpy.arange(2)
A:matplotlib.tests.test_path.msg->re.escape(f'Your vertices have shape {good_verts.shape} but your codes have shape {bad_codes.shape}')
A:matplotlib.tests.test_path.ret->matplotlib.path.Path.arc(low, high).contains_points(points)
A:matplotlib.tests.test_path.result->matplotlib.path.Path.arc(low, high).contains_points(points, radius=-0.5)
A:matplotlib.tests.test_path.box->numpy.array([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])
A:matplotlib.tests.test_path.p->Path(data)
A:matplotlib.tests.test_path.test->numpy.array([[np.nan, 0.5]])
A:matplotlib.tests.test_path.contains->Path(data).contains_points(test)
A:matplotlib.tests.test_path.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_path.polygon->fig.add_subplot(4, 2, i + 1).axvspan(1, 10)
A:matplotlib.tests.test_path.arrow->matplotlib.patches.FancyArrowPatch((0.5, 0.25), (1.5, 0.75), arrowstyle='->', mutation_scale=40)
A:matplotlib.tests.test_path.arrow1->matplotlib.patches.FancyArrowPatch((0.5, 1), (1.5, 1.25), arrowstyle=']-[', mutation_scale=40)
A:matplotlib.tests.test_path.arrow2->matplotlib.patches.FancyArrowPatch((0.5, 1.5), (1.5, 1.75), arrowstyle='fancy', fill=False, mutation_scale=40)
A:matplotlib.tests.test_path.(X, Y)->numpy.meshgrid(np.arange(0, 2, 0.1), np.arange(0, 2, 0.1))
A:matplotlib.tests.test_path.(xdisp, ydisp)->fig.add_subplot(4, 2, i + 1).transData.transform([x, y])
A:matplotlib.tests.test_path.event->MouseEvent('button_press_event', fig.canvas, xdisp, ydisp)
A:matplotlib.tests.test_path.(inside, res)->patch.contains(event)
A:matplotlib.tests.test_path.fig->matplotlib.pyplot.figure(figsize=(6.0, 6.2))
A:matplotlib.tests.test_path.ax->matplotlib.pyplot.figure(figsize=(6.0, 6.2)).add_subplot(4, 2, i + 1)
A:matplotlib.tests.test_path.x->numpy.linspace(0, 5, 8)
A:matplotlib.tests.test_path.r->matplotlib.path.Path.make_compound_path()
A:matplotlib.tests.test_path.compound_path->matplotlib.path.Path.make_compound_path(*paths)
A:matplotlib.tests.test_path.y->numpy.sin(x)
A:matplotlib.tests.test_path.hand->numpy.array([[1.64516129, 1.16145833], [1.64516129, 1.59375], [1.35080645, 1.921875], [1.375, 2.18229167], [1.68548387, 1.9375], [1.60887097, 2.55208333], [1.68548387, 2.69791667], [1.76209677, 2.56770833], [1.83064516, 1.97395833], [1.89516129, 2.75], [1.9516129, 2.84895833], [2.01209677, 2.76041667], [1.99193548, 1.99479167], [2.11290323, 2.63020833], [2.2016129, 2.734375], [2.25403226, 2.60416667], [2.14919355, 1.953125], [2.30645161, 2.36979167], [2.39112903, 2.36979167], [2.41532258, 2.1875], [2.1733871, 1.703125], [2.07782258, 1.16666667]])
A:matplotlib.tests.test_path.poly->Path(np.vstack((hand[:, 1], hand[:, 0])).T, closed=True)
A:matplotlib.tests.test_path.clip_rect->matplotlib.transforms.Bbox([[r0, c0], [r1, c1]])
A:matplotlib.tests.test_path.path1->Path(verts)
A:matplotlib.tests.test_path.path2->Path(verts, codes)
A:matplotlib.tests.test_path.path1_copy->Path(verts).copy()
A:matplotlib.tests.test_path.path2_copy->Path(verts, codes).copy()
A:matplotlib.tests.test_path.transform->matplotlib.transforms.Affine2D().rotate(np.deg2rad(phi))
A:matplotlib.tests.test_path.a->matplotlib.transforms.Affine2D().rotate(np.deg2rad(phi)).transform_path(Path([(0.0, -5.0), (1.0, -5.0)]))
A:matplotlib.tests.test_path.b->matplotlib.transforms.Affine2D().rotate(np.deg2rad(phi)).transform_path(Path([(1.0, 5.0), (0.0, 5.0)]))
A:matplotlib.tests.test_path.mins->numpy.min(path.vertices, axis=0)
A:matplotlib.tests.test_path.maxs->numpy.max(path.vertices, axis=0)
A:matplotlib.tests.test_path.this_path->Path(np.array([[0, 0], [1, 1]]))
A:matplotlib.tests.test_path.outline_path->Path(np.array([[1, 0], [0.5, 0.5], [0.5, 0.5], [0, 1]]))
A:matplotlib.tests.test_path.cleaned->Path(data).cleaned(remove_nans=True)
matplotlib.tests.test_path.test_arrow_contains_point()
matplotlib.tests.test_path.test_cleanup_closepoly()
matplotlib.tests.test_path.test_contains_points_negative_radius()
matplotlib.tests.test_path.test_disjoint_zero_length_segment()
matplotlib.tests.test_path.test_empty_closed_path()
matplotlib.tests.test_path.test_exact_extents(path,extents)
matplotlib.tests.test_path.test_extents_with_ignored_codes(ignored_code)
matplotlib.tests.test_path.test_full_arc(offset)
matplotlib.tests.test_path.test_intersect_zero_length_segment()
matplotlib.tests.test_path.test_log_transform_with_zero()
matplotlib.tests.test_path.test_make_compound_path_empty()
matplotlib.tests.test_path.test_make_compound_path_stops()
matplotlib.tests.test_path.test_marker_paths_pdf()
matplotlib.tests.test_path.test_nan_isolated_points()
matplotlib.tests.test_path.test_nonlinear_containment()
matplotlib.tests.test_path.test_path_clipping()
matplotlib.tests.test_path.test_path_deepcopy()
matplotlib.tests.test_path.test_path_exceptions()
matplotlib.tests.test_path.test_path_intersect_path(phi)
matplotlib.tests.test_path.test_path_no_doubled_point_in_to_polygon()
matplotlib.tests.test_path.test_path_shallowcopy()
matplotlib.tests.test_path.test_path_to_polygons()
matplotlib.tests.test_path.test_point_in_path()
matplotlib.tests.test_path.test_point_in_path_nan()
matplotlib.tests.test_path.test_readonly_path()
matplotlib.tests.test_path.test_xkcd()
matplotlib.tests.test_path.test_xkcd_marker()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/conftest.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_cbook.py----------------------------------------
A:matplotlib.tests.test_cbook.(result1, result2)->delete_masked_points(a1, a2)
A:matplotlib.tests.test_cbook.a_masked->numpy.ma.array([1, 2, 3, np.nan, np.nan, 6], mask=[False, False, True, True, False, False])
A:matplotlib.tests.test_cbook.actual->matplotlib.cbook._safe_first_finite(datetime_lst)
A:matplotlib.tests.test_cbook.a_rgba->matplotlib.colors.to_rgba_array(['r', 'g', 'b', 'c', 'm', 'y'])
A:matplotlib.tests.test_cbook.self.data->numpy.random.lognormal(size=(self.nrows, self.ncols), mean=1.5, sigma=1.75)
A:matplotlib.tests.test_cbook.self.known_keys->sorted(['mean', 'med', 'q1', 'q3', 'iqr', 'cilo', 'cihi', 'whislo', 'whishi', 'fliers', 'label'])
A:matplotlib.tests.test_cbook.self.std_results->matplotlib.cbook.boxplot_stats(self.data)
A:matplotlib.tests.test_cbook.results->matplotlib.cbook.boxplot_stats(self.data)
A:matplotlib.tests.test_cbook.data->numpy.random.normal(size=(34, 34, 34))
A:matplotlib.tests.test_cbook.x->numpy.arange(rows * cols).reshape(rows, cols)
A:matplotlib.tests.test_cbook.bstats_false->matplotlib.cbook.boxplot_stats(x, autorange=False)
A:matplotlib.tests.test_cbook.bstats_true->matplotlib.cbook.boxplot_stats(x, autorange=True)
A:matplotlib.tests.test_cbook.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.tests.test_cbook.count1->len(self.callbacks._func_cid_map.get(self.signal, []))
A:matplotlib.tests.test_cbook.count2->len(self.callbacks.callbacks.get(self.signal))
A:matplotlib.tests.test_cbook.cb->matplotlib.cbook.CallbackRegistry(exception_handler=raise_handler)
A:matplotlib.tests.test_cbook.cb2->pickle.loads(pickle.dumps(cb))
A:matplotlib.tests.test_cbook.cid->pickle.loads(pickle.dumps(cb)).connect('c', lambda : None)
A:matplotlib.tests.test_cbook.mini_me->Test_callback_registry()
A:matplotlib.tests.test_cbook.cid1->self.connect(self.signal, mini_me.dummy, pickle)
A:matplotlib.tests.test_cbook.cid2->self.connect(self.signal, mini_me.dummy, pickle)
A:matplotlib.tests.test_cbook.mini_me2->Test_callback_registry()
A:matplotlib.tests.test_cbook.outerr->capsys.readouterr()
A:matplotlib.tests.test_cbook.cb_old->matplotlib.cbook.CallbackRegistry(exception_handler=None)
A:matplotlib.tests.test_cbook.cb_filt->matplotlib.cbook.CallbackRegistry(exception_handler=transformer)
A:matplotlib.tests.test_cbook.cb_filt_pass->matplotlib.cbook.CallbackRegistry(exception_handler=transformer)
A:matplotlib.tests.test_cbook.cr->matplotlib.cbook.CallbackRegistry(signals=['foo'])
A:matplotlib.tests.test_cbook.mock_sys._getframe->Mock(return_value=None)
A:matplotlib.tests.test_cbook.y1->numpy.arange(4)
A:matplotlib.tests.test_cbook.(xs, y1s, y2s)->matplotlib.cbook.pts_to_midstep(x, y1, y2)
A:matplotlib.tests.test_cbook.x_target->numpy.asarray([0, 0.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3], dtype=float)
A:matplotlib.tests.test_cbook.y1_target->numpy.asarray([0, 0, 1, 1, 2, 2, 3, 3], dtype=float)
A:matplotlib.tests.test_cbook.y2_target->numpy.asarray([3, 3, 2, 2, 1, 1, 0, 0], dtype=float)
A:matplotlib.tests.test_cbook.(xs, y1s)->matplotlib.cbook.pts_to_midstep(x, y1)
A:matplotlib.tests.test_cbook.steps->matplotlib.cbook.pts_to_midstep([], [])
A:matplotlib.tests.test_cbook.g->matplotlib.cbook.Grouper()
A:matplotlib.tests.test_cbook.ret->matplotlib.cbook._safe_first_finite(arr)
A:matplotlib.tests.test_cbook.arr->numpy.full(2, np.inf)
A:matplotlib.tests.test_cbook.xnew->matplotlib.cbook._reshape_2D(x, 'x')
A:matplotlib.tests.test_cbook.v->numpy.arange(10, dtype=float)
A:matplotlib.tests.test_cbook.X->numpy.arange(30).reshape(10, 3)
A:matplotlib.tests.test_cbook.Xnew->matplotlib.cbook._reshape_2D(x, 'x')
A:matplotlib.tests.test_cbook.(Idx, Xnew)->matplotlib.cbook.index_of(x)
A:matplotlib.tests.test_cbook.IdxRef->numpy.arange(10)
A:matplotlib.tests.test_cbook.s->pd.Series(range(5), index=range(10, 15))
A:matplotlib.tests.test_cbook.polys->numpy.asarray(polys)
A:matplotlib.tests.test_cbook.cls_level->object()
A:matplotlib.tests.test_cbook.override->object()
A:matplotlib.tests.test_cbook.other->A()
A:matplotlib.tests.test_cbook.a->B()
matplotlib.tests.test_cbook.Test_boxplot_stats
matplotlib.tests.test_cbook.Test_boxplot_stats.setup_method(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_bad_dims(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_boxplot_stats_autorange_false(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_dict_keys(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_each_dict(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_main_list(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_label_error(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_baseline(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_bootstrapped(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_float(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_percentiles(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_range(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_withlabels(self)
matplotlib.tests.test_cbook.Test_callback_registry
matplotlib.tests.test_cbook.Test_callback_registry.connect(self,s,func,pickle)
matplotlib.tests.test_cbook.Test_callback_registry.count(self)
matplotlib.tests.test_cbook.Test_callback_registry.disconnect(self,cid)
matplotlib.tests.test_cbook.Test_callback_registry.dummy(self)
matplotlib.tests.test_cbook.Test_callback_registry.is_empty(self)
matplotlib.tests.test_cbook.Test_callback_registry.is_not_empty(self)
matplotlib.tests.test_cbook.Test_callback_registry.setup_method(self)
matplotlib.tests.test_cbook.Test_callback_registry.test_callback_complete(self,pickle)
matplotlib.tests.test_cbook.Test_callback_registry.test_callback_disconnect(self,pickle)
matplotlib.tests.test_cbook.Test_callback_registry.test_callback_wrong_disconnect(self,pickle)
matplotlib.tests.test_cbook.Test_callback_registry.test_cid_restore(self)
matplotlib.tests.test_cbook.Test_callback_registry.test_pickling(self)
matplotlib.tests.test_cbook.Test_callback_registry.test_registration_on_non_empty_registry(self,pickle)
matplotlib.tests.test_cbook.Test_delete_masked_points
matplotlib.tests.test_cbook.Test_delete_masked_points.test_bad_first_arg(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_datetime(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_rgba(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_string_seq(self)
matplotlib.tests.test_cbook.raising_cb_reg(func)
matplotlib.tests.test_cbook.test__safe_first_finite_all_inf()
matplotlib.tests.test_cbook.test__safe_first_finite_all_nan()
matplotlib.tests.test_cbook.test_array_patch_perimeters()
matplotlib.tests.test_cbook.test_auto_format_str(fmt,value,result)
matplotlib.tests.test_cbook.test_callbackregistry_blocking()
matplotlib.tests.test_cbook.test_callbackregistry_custom_exception_handler(monkeypatch,cb,excp)
matplotlib.tests.test_cbook.test_callbackregistry_default_exception_handler(capsys,monkeypatch)
matplotlib.tests.test_cbook.test_callbackregistry_signals()
matplotlib.tests.test_cbook.test_contiguous_regions()
matplotlib.tests.test_cbook.test_flatiter()
matplotlib.tests.test_cbook.test_format_approx()
matplotlib.tests.test_cbook.test_grouper()
matplotlib.tests.test_cbook.test_grouper_private()
matplotlib.tests.test_cbook.test_index_of_pandas(pd)
matplotlib.tests.test_cbook.test_index_of_xarray(xr)
matplotlib.tests.test_cbook.test_normalize_kwargs_fail(inp,kwargs_to_norm)
matplotlib.tests.test_cbook.test_normalize_kwargs_pass(inp,expected,kwargs_to_norm)
matplotlib.tests.test_cbook.test_reshape2d()
matplotlib.tests.test_cbook.test_reshape2d_pandas(pd)
matplotlib.tests.test_cbook.test_reshape2d_xarray(xr)
matplotlib.tests.test_cbook.test_safe_first_element_pandas_series(pd)
matplotlib.tests.test_cbook.test_safe_first_element_with_none()
matplotlib.tests.test_cbook.test_sanitize_sequence()
matplotlib.tests.test_cbook.test_setattr_cm()
matplotlib.tests.test_cbook.test_step_fails(args)
matplotlib.tests.test_cbook.test_strip_comment(line,result)
matplotlib.tests.test_cbook.test_strip_comment_invalid()
matplotlib.tests.test_cbook.test_to_midstep()
matplotlib.tests.test_cbook.test_to_midstep_empty()
matplotlib.tests.test_cbook.test_to_poststep()
matplotlib.tests.test_cbook.test_to_poststep_empty()
matplotlib.tests.test_cbook.test_to_prestep()
matplotlib.tests.test_cbook.test_to_prestep_empty()
matplotlib.tests.test_cbook.test_warn_external(recwarn)
matplotlib.tests.test_cbook.test_warn_external_frame_embedded_python()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_style.py----------------------------------------
A:matplotlib.tests.test_style.path->Path(tmpdir, temp_file)
A:matplotlib.tests.test_style.x->matplotlib.style.context({PARAM: original_value, 'badparam': None})
A:matplotlib.tests.test_style.seaborn_bright->matplotlib.rcParams.copy()
matplotlib.tests.test_style.temp_style(style_name,settings=None)
matplotlib.tests.test_style.test_alias(equiv_styles)
matplotlib.tests.test_style.test_available()
matplotlib.tests.test_style.test_context()
matplotlib.tests.test_style.test_context_with_badparam()
matplotlib.tests.test_style.test_context_with_dict()
matplotlib.tests.test_style.test_context_with_dict_after_namedstyle()
matplotlib.tests.test_style.test_context_with_dict_before_namedstyle()
matplotlib.tests.test_style.test_context_with_union_of_dict_and_namedstyle()
matplotlib.tests.test_style.test_deprecated_seaborn_styles()
matplotlib.tests.test_style.test_invalid_rc_warning_includes_filename(caplog)
matplotlib.tests.test_style.test_single_path(tmpdir)
matplotlib.tests.test_style.test_style_from_module(tmp_path,monkeypatch)
matplotlib.tests.test_style.test_up_to_date_blacklist()
matplotlib.tests.test_style.test_use()
matplotlib.tests.test_style.test_use_url(tmpdir)
matplotlib.tests.test_style.test_xkcd_cm()
matplotlib.tests.test_style.test_xkcd_no_cm()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_colorbar.py----------------------------------------
A:matplotlib.tests.test_colorbar.cmap->matplotlib.colormaps['viridis'].resampled(len(data))
A:matplotlib.tests.test_colorbar.norms->dict()
A:matplotlib.tests.test_colorbar.norms['neither']->BoundaryNorm(clevs, len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['min']->BoundaryNorm([-10] + clevs[1:], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['max']->BoundaryNorm(clevs[:-1] + [10], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['both']->BoundaryNorm([-10] + clevs[1:-1] + [10], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.(cmap, norms)->_get_cmap_norms()
A:matplotlib.tests.test_colorbar.fig->matplotlib.pyplot.figure(figsize=(10, 4))
A:matplotlib.tests.test_colorbar.cax->fig_test.add_subplot().inset_axes([1.02, 0.1, 0.03, 0.8])
A:matplotlib.tests.test_colorbar.data->numpy.arange(1200).reshape(30, 40)
A:matplotlib.tests.test_colorbar.(fig, ax)->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_colorbar.im->ax[0].imshow([[0, 1], [2, 3]])
A:matplotlib.tests.test_colorbar.cbar->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(mappable, cax=ax, orientation='horizontal')
A:matplotlib.tests.test_colorbar.data_2nd->numpy.repeat(np.repeat(data_2nd, 10, axis=1), 10, axis=0)
A:matplotlib.tests.test_colorbar.color_mappable->matplotlib.pyplot.contourf(data, levels=levels, extend='both')
A:matplotlib.tests.test_colorbar.hatch_mappable->matplotlib.pyplot.contourf(data_2nd, levels=[1, 2, 3], colors='none', hatches=['/', 'o', '+'], extend='max')
A:matplotlib.tests.test_colorbar.ax1->matplotlib.pyplot.figure(figsize=(10, 4)).add_axes([0.05, 0.85, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.ax2->matplotlib.pyplot.figure(figsize=(10, 4)).add_axes([0.1, 0.65, 0.75, 0.1])
A:matplotlib.tests.test_colorbar.ax3->matplotlib.pyplot.figure(figsize=(10, 4)).add_axes([0.05, 0.45, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.ax->fig_test.add_subplot()
A:matplotlib.tests.test_colorbar.CS->fig_test.add_subplot().contour(data, levels=levels, extend='both')
A:matplotlib.tests.test_colorbar.cs->fig_test.add_subplot().contourf(x, y, z, levels, hatches=hatches, cmap=cmap, extend=extend)
A:matplotlib.tests.test_colorbar.sc->fig_test.add_subplot().scatter([1, 2], [3, 4])
A:matplotlib.tests.test_colorbar.pre_position->fig_test.add_subplot().get_position()
A:matplotlib.tests.test_colorbar.cb->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(pc, location='right', extend='max')
A:matplotlib.tests.test_colorbar.post_position->fig_test.add_subplot().get_position()
A:matplotlib.tests.test_colorbar.pc->fig_test.add_subplot().pcolormesh(np.random.randn(10, 10))
A:matplotlib.tests.test_colorbar.ax4->matplotlib.pyplot.figure(figsize=(10, 4)).add_axes([0.05, 0.25, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.ax5->matplotlib.pyplot.figure(figsize=(10, 4)).add_axes([0.05, 0.05, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.values->numpy.linspace(0, 10, 5)
A:matplotlib.tests.test_colorbar.cbar_kw->dict(orientation='horizontal', values=values, ticks=[])
A:matplotlib.tests.test_colorbar.x->numpy.linspace(-2, 3, 50)
A:matplotlib.tests.test_colorbar.y->numpy.linspace(-2, 3, 30)
A:matplotlib.tests.test_colorbar.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_colorbar.clevs->numpy.arange(-8, 1)
A:matplotlib.tests.test_colorbar.default_minorticklocks->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(mappable, cax=ax, orientation='horizontal').ax.yaxis.get_minorticklocs()
A:matplotlib.tests.test_colorbar.pcm->fig_test.add_subplot().pcolormesh(z, cmap='RdBu_r', rasterized=True)
A:matplotlib.tests.test_colorbar.cbar2->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(im, label=None)
A:matplotlib.tests.test_colorbar.userTicks->matplotlib.pyplot.colorbar(ticks=[0, 600, 1200])
A:matplotlib.tests.test_colorbar.defTicks->matplotlib.pyplot.colorbar(orientation='horizontal')
A:matplotlib.tests.test_colorbar.ticks->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(mappable, cax=ax, orientation='horizontal').get_ticks()
A:matplotlib.tests.test_colorbar.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_colorbar.norm->NoNorm(vmin=min(data), vmax=max(data))
A:matplotlib.tests.test_colorbar.(fig, axs)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_colorbar.minorticks->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(mappable, cax=ax, orientation='horizontal').get_ticks(minor=True)
A:matplotlib.tests.test_colorbar.sm->matplotlib.cm.ScalarMappable(norm=mcolors.Normalize(), cmap='viridis')
A:matplotlib.tests.test_colorbar.cbar3->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(im, orientation='horizontal', label='horizontal cbar')
A:matplotlib.tests.test_colorbar.arr->numpy.arange(25).reshape((5, 5))
A:matplotlib.tests.test_colorbar.cb[nn][mm]->matplotlib.pyplot.figure(figsize=(10, 4)).colorbar(pc, ax=ax[mm, nn], orientation=orient, aspect=aspect, extend=extend)
A:matplotlib.tests.test_colorbar.pos->cb[1][0].ax.get_position(original=False)
A:matplotlib.tests.test_colorbar.xy->numpy.arange(-3.0, 3.01, 0.025)
A:matplotlib.tests.test_colorbar.Z1->numpy.exp(-X ** 2 - Y ** 2)
A:matplotlib.tests.test_colorbar.Z2->numpy.exp(-(X - 1) ** 2 - (Y - 1) ** 2)
A:matplotlib.tests.test_colorbar.CS3->axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm, extend=extends[i])
A:matplotlib.tests.test_colorbar.subfigs->matplotlib.pyplot.figure(figsize=(10, 4)).subfigures(1, 2)
A:matplotlib.tests.test_colorbar.axs->subfig.subplots(2, 2).ravel()
A:matplotlib.tests.test_colorbar.bounds->numpy.arange(5)
A:matplotlib.tests.test_colorbar.colors->cmap(np.linspace(100, 255, nb_colors).astype(int))
A:matplotlib.tests.test_colorbar.(cmap, norm)->matplotlib.colors.from_levels_and_colors(bounds, colors, extend=extend)
A:matplotlib.tests.test_colorbar.mappable->matplotlib.cm.ScalarMappable(norm=norm, cmap=cmap)
A:matplotlib.tests.test_colorbar.loc->FixedLocator(np.arange(0, 7, 0.1))
A:matplotlib.tests.test_colorbar.fmt->LogFormatter()
A:matplotlib.tests.test_colorbar.ax_ref->fig_ref.add_subplot()
A:matplotlib.tests.test_colorbar.ax_test->fig_test.add_subplot()
A:matplotlib.tests.test_colorbar.kwargs['cax']->fig_test.add_subplot().inset_axes([0, 1.05, 1, 0.05])
matplotlib.tests.test_colorbar._colorbar_extension_length(spacing)
matplotlib.tests.test_colorbar._colorbar_extension_shape(spacing)
matplotlib.tests.test_colorbar._get_cmap_norms()
matplotlib.tests.test_colorbar.test_anchored_cbar_position_using_specgrid()
matplotlib.tests.test_colorbar.test_aspects()
matplotlib.tests.test_colorbar.test_axes_handles_same_functions(fig_ref,fig_test)
matplotlib.tests.test_colorbar.test_boundaries()
matplotlib.tests.test_colorbar.test_cbar_minorticks_for_rc_xyminortickvisible()
matplotlib.tests.test_colorbar.test_centerednorm()
matplotlib.tests.test_colorbar.test_colorbar_autoticks()
matplotlib.tests.test_colorbar.test_colorbar_autotickslog()
matplotlib.tests.test_colorbar.test_colorbar_axes_kw()
matplotlib.tests.test_colorbar.test_colorbar_axes_parmeters()
matplotlib.tests.test_colorbar.test_colorbar_change_lim_scale()
matplotlib.tests.test_colorbar.test_colorbar_closed_patch()
matplotlib.tests.test_colorbar.test_colorbar_contourf_extend_patches()
matplotlib.tests.test_colorbar.test_colorbar_errors(kwargs,error,message)
matplotlib.tests.test_colorbar.test_colorbar_extend_alpha()
matplotlib.tests.test_colorbar.test_colorbar_extend_drawedges()
matplotlib.tests.test_colorbar.test_colorbar_extension_inverted_axis(orientation,extend,expected)
matplotlib.tests.test_colorbar.test_colorbar_extension_length()
matplotlib.tests.test_colorbar.test_colorbar_extension_shape()
matplotlib.tests.test_colorbar.test_colorbar_format(fmt)
matplotlib.tests.test_colorbar.test_colorbar_get_ticks()
matplotlib.tests.test_colorbar.test_colorbar_get_ticks_2()
matplotlib.tests.test_colorbar.test_colorbar_int(clim)
matplotlib.tests.test_colorbar.test_colorbar_inverted_ticks()
matplotlib.tests.test_colorbar.test_colorbar_label()
matplotlib.tests.test_colorbar.test_colorbar_log_minortick_labels()
matplotlib.tests.test_colorbar.test_colorbar_lognorm_extension(extend)
matplotlib.tests.test_colorbar.test_colorbar_minorticks_on_off()
matplotlib.tests.test_colorbar.test_colorbar_no_warning_rcparams_grid_true()
matplotlib.tests.test_colorbar.test_colorbar_positioning(use_gridspec)
matplotlib.tests.test_colorbar.test_colorbar_powernorm_extension()
matplotlib.tests.test_colorbar.test_colorbar_renorm()
matplotlib.tests.test_colorbar.test_colorbar_scale_reset()
matplotlib.tests.test_colorbar.test_colorbar_set_formatter_locator()
matplotlib.tests.test_colorbar.test_colorbar_single_ax_panchor_east(constrained)
matplotlib.tests.test_colorbar.test_colorbar_single_ax_panchor_false()
matplotlib.tests.test_colorbar.test_colorbar_single_scatter()
matplotlib.tests.test_colorbar.test_colorbar_ticks()
matplotlib.tests.test_colorbar.test_colorbarbase()
matplotlib.tests.test_colorbar.test_contour_colorbar()
matplotlib.tests.test_colorbar.test_gridspec_make_colorbar()
matplotlib.tests.test_colorbar.test_inset_colorbar_layout()
matplotlib.tests.test_colorbar.test_keeping_xlabel()
matplotlib.tests.test_colorbar.test_mappable_2d_alpha()
matplotlib.tests.test_colorbar.test_mappable_no_alpha()
matplotlib.tests.test_colorbar.test_negative_boundarynorm()
matplotlib.tests.test_colorbar.test_nonorm()
matplotlib.tests.test_colorbar.test_offset_text_loc()
matplotlib.tests.test_colorbar.test_parentless_mappable()
matplotlib.tests.test_colorbar.test_passing_location(fig_ref,fig_test)
matplotlib.tests.test_colorbar.test_proportional_colorbars()
matplotlib.tests.test_colorbar.test_remove_cb_whose_mappable_has_no_figure(fig_ref,fig_test)
matplotlib.tests.test_colorbar.test_remove_from_figure(use_gridspec)
matplotlib.tests.test_colorbar.test_remove_from_figure_cl()
matplotlib.tests.test_colorbar.test_title_text_loc()
matplotlib.tests.test_colorbar.test_twoslope_colorbar()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_tightlayout.py----------------------------------------
A:matplotlib.tests.test_tightlayout.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_tightlayout.(fig, ((ax1, ax2), (ax3, ax4)))->matplotlib.pyplot.subplots(nrows=2, ncols=2)
A:matplotlib.tests.test_tightlayout.ax1->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(131, projection='rectilinear')
A:matplotlib.tests.test_tightlayout.ax2->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(132, projection='mollweide')
A:matplotlib.tests.test_tightlayout.ax3->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(133, projection='polar')
A:matplotlib.tests.test_tightlayout.ax4->matplotlib.pyplot.subplot2grid((3, 3), (1, 2), rowspan=2)
A:matplotlib.tests.test_tightlayout.ax->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224)
A:matplotlib.tests.test_tightlayout.arr->numpy.arange(100).reshape((10, 10))
A:matplotlib.tests.test_tightlayout.fig->matplotlib.pyplot.figure(figsize=(6, 2))
A:matplotlib.tests.test_tightlayout.gs1->matplotlib.gridspec.GridSpec(2, 1)
A:matplotlib.tests.test_tightlayout.gs2->matplotlib.gridspec.GridSpec(3, 1)
A:matplotlib.tests.test_tightlayout.top->min(gs1.top, gs2.top)
A:matplotlib.tests.test_tightlayout.bottom->max(gs1.bottom, gs2.bottom)
A:matplotlib.tests.test_tightlayout.(f, axarr)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_tightlayout.da->DrawingArea(size, size)
A:matplotlib.tests.test_tightlayout.background->Rectangle((0, 0), width=size, height=size, facecolor=color, edgecolor='None', linewidth=0, antialiased=False)
A:matplotlib.tests.test_tightlayout.anchored_box->AnchoredOffsetbox(loc='center', child=da, pad=0.0, frameon=False, bbox_to_anchor=point, bbox_transform=ax.transAxes, borderpad=0.0)
A:matplotlib.tests.test_tightlayout.(_, axs)->matplotlib.pyplot.subplots(rows, cols)
A:matplotlib.tests.test_tightlayout.axs->_subplots()
A:matplotlib.tests.test_tightlayout.(fig, axs)->matplotlib.pyplot.subplots(2, 1, figsize=(3, 2))
A:matplotlib.tests.test_tightlayout.p1->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224).get_position()
A:matplotlib.tests.test_tightlayout.p2->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224).get_position()
A:matplotlib.tests.test_tightlayout.st->matplotlib.pyplot.figure(figsize=(6, 2)).suptitle('foo')
A:matplotlib.tests.test_tightlayout.t->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224).set_title('bar')
A:matplotlib.tests.test_tightlayout.(fig, axes)->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_tightlayout.pts->axes[1].scatter([0, 1], [0, 1], c=[1, 5])
A:matplotlib.tests.test_tightlayout.ax_rect->axes[1].get_position()
A:matplotlib.tests.test_tightlayout.cax->matplotlib.pyplot.figure(figsize=(6, 2)).add_axes([ax_rect.x1 + 0.005, ax_rect.y0, 0.015, ax_rect.height])
A:matplotlib.tests.test_tightlayout.(h,)->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224).plot(arr[:, 0])
A:matplotlib.tests.test_tightlayout.m->matplotlib.pyplot.figure(figsize=(6, 2)).add_subplot(224).pcolor(arr)
A:matplotlib.tests.test_tightlayout.rect->Rectangle((0, 0), 0.5, 0.5, transform=ax.transAxes)
matplotlib.tests.test_tightlayout.add_offsetboxes(ax,size=10,margin=0.1,color='black')
matplotlib.tests.test_tightlayout.example_plot(ax,fontsize=12)
matplotlib.tests.test_tightlayout.test_badsubplotgrid()
matplotlib.tests.test_tightlayout.test_big_decorators_horizontal()
matplotlib.tests.test_tightlayout.test_big_decorators_vertical()
matplotlib.tests.test_tightlayout.test_clipped_to_axes()
matplotlib.tests.test_tightlayout.test_collapsed()
matplotlib.tests.test_tightlayout.test_empty_layout()
matplotlib.tests.test_tightlayout.test_manual_colorbar()
matplotlib.tests.test_tightlayout.test_non_agg_renderer(monkeypatch,recwarn)
matplotlib.tests.test_tightlayout.test_outward_ticks()
matplotlib.tests.test_tightlayout.test_suptitle()
matplotlib.tests.test_tightlayout.test_tight_kwargs()
matplotlib.tests.test_tightlayout.test_tight_layout1()
matplotlib.tests.test_tightlayout.test_tight_layout2()
matplotlib.tests.test_tightlayout.test_tight_layout3()
matplotlib.tests.test_tightlayout.test_tight_layout4()
matplotlib.tests.test_tightlayout.test_tight_layout5()
matplotlib.tests.test_tightlayout.test_tight_layout6()
matplotlib.tests.test_tightlayout.test_tight_layout7()
matplotlib.tests.test_tightlayout.test_tight_layout8()
matplotlib.tests.test_tightlayout.test_tight_layout9()
matplotlib.tests.test_tightlayout.test_tight_layout_offsetboxes()
matplotlib.tests.test_tightlayout.test_tight_pads()
matplotlib.tests.test_tightlayout.test_tight_toggle()
matplotlib.tests.test_tightlayout.test_verybig_decorators(label)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_doc.py----------------------------------------
A:matplotlib.tests.test_doc.gen_rst->pytest.importorskip('sphinx_gallery.gen_rst')
matplotlib.tests.test_doc.test_sphinx_gallery_example_header()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_tk.py----------------------------------------
A:matplotlib.tests.test_backend_tk.proc->subprocess_run_helper(func, timeout=_test_timeout, extra_env=dict(MPLBACKEND='TkAgg', MPL_TEST_ESCAPE_HATCH='1'))
A:matplotlib.tests.test_backend_tk.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_tk.data->numpy.ones((4, 4, 4))
A:matplotlib.tests.test_backend_tk.root->tkinter.Tk()
A:matplotlib.tests.test_backend_tk.show_finished_event->threading.Event()
A:matplotlib.tests.test_backend_tk.thread->threading.Thread(target=target, daemon=True)
A:matplotlib.tests.test_backend_tk.fig->Figure()
A:matplotlib.tests.test_backend_tk.tkcanvas->Figure().canvas.get_tk_widget()
A:matplotlib.tests.test_backend_tk.ax->Figure().add_subplot()
A:matplotlib.tests.test_backend_tk.canvas->FigureCanvasTkAgg(fig, master=master)
A:matplotlib.tests.test_backend_tk.toolbar->NavigationToolbar2Tk(canvas, master, pack_toolbar=False)
matplotlib.tests.test_backend_tk._isolated_tk_test(success_count,func=None)
matplotlib.tests.test_backend_tk.test_blit()
matplotlib.tests.test_backend_tk.test_canvas_focus()
matplotlib.tests.test_backend_tk.test_embedding()
matplotlib.tests.test_backend_tk.test_figuremanager_cleans_own_mainloop()
matplotlib.tests.test_backend_tk.test_figuremanager_preserves_host_mainloop()
matplotlib.tests.test_backend_tk.test_missing_back_button()
matplotlib.tests.test_backend_tk.test_never_update()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_artist.py----------------------------------------
A:matplotlib.tests.test_artist.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_artist.xy_pix->matplotlib.pyplot.axes().transData.transform(xy_data)
A:matplotlib.tests.test_artist.e->matplotlib.patches.Ellipse(xy_pix, width=100, height=100)
A:matplotlib.tests.test_artist.intermediate_transform->matplotlib.patches.Ellipse(xy_pix, width=100, height=100).get_transform()
A:matplotlib.tests.test_artist.c->matplotlib.collections.PatchCollection([e], transform=mtransforms.IdentityTransform(), alpha=0.5)
A:matplotlib.tests.test_artist.exterior->matplotlib.path.Path.unit_rectangle().deepcopy()
A:matplotlib.tests.test_artist.interior->matplotlib.path.Path.unit_circle().deepcopy()
A:matplotlib.tests.test_artist.clip_path->matplotlib.path.Path.make_compound_path(exterior, interior)
A:matplotlib.tests.test_artist.star->matplotlib.path.Path.unit_regular_star(6).deepcopy()
A:matplotlib.tests.test_artist.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_artist.col->matplotlib.collections.PathCollection([star], lw=5, edgecolor='blue', facecolor='red', alpha=0.7, hatch='*')
A:matplotlib.tests.test_artist.patch->matplotlib.patches.PathPatch(star, lw=5, edgecolor='blue', facecolor='red', alpha=0.7, hatch='*')
A:matplotlib.tests.test_artist.ax_test->fig_test.add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_artist.(l,)->fig_test.add_axes([0, 0, 1, 1]).plot([-3, 3], [-3, 3])
A:matplotlib.tests.test_artist.p->matplotlib.patches.PathPatch(p, transform=ax_test.transData)
A:matplotlib.tests.test_artist.ax_ref->fig_ref.add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_artist.x->numpy.random.random(20000)
A:matplotlib.tests.test_artist.y->numpy.random.random(20000)
A:matplotlib.tests.test_artist.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_artist.pdf->io.BytesIO()
A:matplotlib.tests.test_artist.svg->io.BytesIO()
A:matplotlib.tests.test_artist.rect1->matplotlib.patches.Rectangle((0, 0), 3, 4, hatch='/')
A:matplotlib.tests.test_artist.rect2->matplotlib.collections.RegularPolyCollection(4, sizes=[16000], offsets=[(1.5, 6.5)], offset_transform=ax.transData, hatch='/')
A:matplotlib.tests.test_artist.rect3->matplotlib.patches.Rectangle((4, 0), 3, 4, hatch='/', edgecolor='C1')
A:matplotlib.tests.test_artist.rect4->matplotlib.collections.RegularPolyCollection(4, sizes=[16000], offsets=[(5.5, 6.5)], offset_transform=ax.transData, hatch='/', edgecolor='C1')
A:matplotlib.tests.test_artist.im->matplotlib.pyplot.axes().imshow(np.arange(36).reshape(6, 6))
A:matplotlib.tests.test_artist.(ln,)->matplotlib.pyplot.axes().plot(range(5), zorder=None)
A:matplotlib.tests.test_artist.(fig, [[ax1, ax2], [ax3, ax4]])->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_artist.pp1->matplotlib.patches.PathPatch(mpath.Path([(0, 0), (1, 0), (1, 1), (0, 0)], [mpath.Path.MOVETO, mpath.Path.CURVE3, mpath.Path.CURVE3, mpath.Path.CLOSEPOLY]), fc='none', transform=ax4.transData)
A:matplotlib.tests.test_artist.ln->matplotlib.lines.Line2D([], [])
A:matplotlib.tests.test_artist.lines1->matplotlib.pyplot.axes().plot(range(3))
A:matplotlib.tests.test_artist.lines2->matplotlib.pyplot.axes().plot(range(3))
A:matplotlib.tests.test_artist.sio->io.StringIO()
A:matplotlib.tests.test_artist.valid_values->matplotlib.artist.ArtistInspector(TestArtist).get_valid_values('f')
A:matplotlib.tests.test_artist.ai->matplotlib.artist.ArtistInspector(mlines.Line2D)
A:matplotlib.tests.test_artist.aliases->matplotlib.artist.ArtistInspector(mlines.Line2D).get_aliases()
A:matplotlib.tests.test_artist.art->TestKlass()
A:matplotlib.tests.test_artist.oid->TestKlass().add_callback(func)
A:matplotlib.tests.test_artist.X->numpy.empty((7, 1))
A:matplotlib.tests.test_artist.norm->matplotlib.colors.BoundaryNorm(np.linspace(0, 1, 4, endpoint=True), 256, clip=True, extend='neither')
A:matplotlib.tests.test_artist.img->matplotlib.pyplot.axes().imshow(X, cmap='RdBu_r', norm=norm)
A:matplotlib.tests.test_artist.cmap->matplotlib.colormaps['RdBu_r'].resampled(2000)
A:matplotlib.tests.test_artist.renderer->matplotlib.backend_bases.RendererBase()
matplotlib.tests.test_artist.test_None_zorder()
matplotlib.tests.test_artist.test_artist_inspector_get_aliases()
matplotlib.tests.test_artist.test_artist_inspector_get_valid_values(accept_clause,expected)
matplotlib.tests.test_artist.test_auto_no_rasterize()
matplotlib.tests.test_artist.test_callbacks()
matplotlib.tests.test_artist.test_clipping()
matplotlib.tests.test_artist.test_clipping_zoom(fig_test,fig_ref)
matplotlib.tests.test_artist.test_collection_transform_of_none()
matplotlib.tests.test_artist.test_cull_markers()
matplotlib.tests.test_artist.test_default_edges()
matplotlib.tests.test_artist.test_draw_wraper_forward_input()
matplotlib.tests.test_artist.test_format_cursor_data_BoundaryNorm()
matplotlib.tests.test_artist.test_hatching()
matplotlib.tests.test_artist.test_patch_transform_of_none()
matplotlib.tests.test_artist.test_properties()
matplotlib.tests.test_artist.test_remove()
matplotlib.tests.test_artist.test_set_alpha()
matplotlib.tests.test_artist.test_set_alpha_for_array()
matplotlib.tests.test_artist.test_set_is_overwritten()
matplotlib.tests.test_artist.test_set_signature()
matplotlib.tests.test_artist.test_setp()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backends_interactive.py----------------------------------------
A:matplotlib.tests.test_backends_interactive.reason->'{} cannot be imported'.format(', '.join(missing))
A:matplotlib.tests.test_backends_interactive.repo->gi.Repository.get_default()
A:matplotlib.tests.test_backends_interactive.img->PIL.Image.new('LA', (26, 26))
A:matplotlib.tests.test_backends_interactive.tmp_img_path->os.path.join(tempdir, 'test_la_icon.png')
A:matplotlib.tests.test_backends_interactive.backend->matplotlib.pyplot.rcParams['backend'].lower()
A:matplotlib.tests.test_backends_interactive.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backends_interactive.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backends_interactive.timer->matplotlib.pyplot.figure().canvas.new_timer(1.0)
A:matplotlib.tests.test_backends_interactive.result->_run_helper(_test_figure_leak, str(pause_time), timeout=_test_timeout, extra_env=env)
A:matplotlib.tests.test_backends_interactive.result_after->io.BytesIO()
A:matplotlib.tests.test_backends_interactive.proc->_run_helper(_test_number_of_draws_script, timeout=_test_timeout, extra_env=env)
A:matplotlib.tests.test_backends_interactive.future->ThreadPoolExecutor().submit(fig.canvas.draw)
A:matplotlib.tests.test_backends_interactive._thread_safe_backends->_get_testable_interactive_backends()
A:matplotlib.tests.test_backends_interactive.bk->matplotlib.rcParams._get('backend')
A:matplotlib.tests.test_backends_interactive.mpl_binding_qwidgets->importlib.import_module(f'{mpl_binding}.QtWidgets')
A:matplotlib.tests.test_backends_interactive.host_qwidgets->importlib.import_module(f'{host_binding}.QtWidgets')
A:matplotlib.tests.test_backends_interactive.host_app->importlib.import_module(f'{host_binding}.QtWidgets').QApplication(['mpl testing'])
A:matplotlib.tests.test_backends_interactive.url->'http://{}:{}'.format(mpl.rcParams['webagg.address'], mpl.rcParams['webagg.port'])
A:matplotlib.tests.test_backends_interactive.retcode->_run_helper(_test_number_of_draws_script, timeout=_test_timeout, extra_env=env).poll()
A:matplotlib.tests.test_backends_interactive.conn->urllib.request.urlopen(url)
A:matplotlib.tests.test_backends_interactive.deps->deps.split(',').split(',')
A:matplotlib.tests.test_backends_interactive.(ln,)->ax.plot([0, 1], [1, 2])
A:matplotlib.tests.test_backends_interactive.bg->matplotlib.pyplot.figure().canvas.copy_from_bbox(fig.bbox)
A:matplotlib.tests.test_backends_interactive._blit_backends->_get_testable_interactive_backends()
A:matplotlib.tests.test_backends_interactive.ndraws->_run_helper(_test_number_of_draws_script, timeout=_test_timeout, extra_env=env).stdout.count('DrawEvent')
A:matplotlib.tests.test_backends_interactive.t->float(sys.argv[1])
A:matplotlib.tests.test_backends_interactive.p->psutil.Process()
A:matplotlib.tests.test_backends_interactive.growth->int(result.stdout)
matplotlib.tests.test_backends_interactive._get_testable_interactive_backends()
matplotlib.tests.test_backends_interactive._impl_test_cross_Qt_imports()
matplotlib.tests.test_backends_interactive._impl_test_lazy_auto_backend_selection()
matplotlib.tests.test_backends_interactive._implcairo()
matplotlib.tests.test_backends_interactive._implcore()
matplotlib.tests.test_backends_interactive._implqt5agg()
matplotlib.tests.test_backends_interactive._lazy_headless()
matplotlib.tests.test_backends_interactive._qApp_warn_impl()
matplotlib.tests.test_backends_interactive._test_figure_leak()
matplotlib.tests.test_backends_interactive._test_interactive_impl()
matplotlib.tests.test_backends_interactive._test_number_of_draws_script()
matplotlib.tests.test_backends_interactive._test_thread_impl()
matplotlib.tests.test_backends_interactive._test_toolbar_button_la_mode_icon(fig)
matplotlib.tests.test_backends_interactive.test_blitting_events(env)
matplotlib.tests.test_backends_interactive.test_cross_Qt_imports()
matplotlib.tests.test_backends_interactive.test_figure_leak_20490(env,time_mem)
matplotlib.tests.test_backends_interactive.test_interactive_backend(env,toolbar)
matplotlib.tests.test_backends_interactive.test_interactive_thread_safety(env)
matplotlib.tests.test_backends_interactive.test_lazy_auto_backend_selection()
matplotlib.tests.test_backends_interactive.test_lazy_linux_headless(env)
matplotlib.tests.test_backends_interactive.test_qApp_warn()
matplotlib.tests.test_backends_interactive.test_qt5backends_uses_qt5()
matplotlib.tests.test_backends_interactive.test_webagg()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_streamplot.py----------------------------------------
A:matplotlib.tests.test_streamplot.x->numpy.array([0, 20, 40])
A:matplotlib.tests.test_streamplot.y->numpy.array([0, 20, 10])
A:matplotlib.tests.test_streamplot.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_streamplot.(X, Y, U, V)->velocity_field()
A:matplotlib.tests.test_streamplot.(start_x, start_y)->numpy.meshgrid(np.linspace(X.min(), X.max(), 5), np.linspace(Y.min(), Y.max(), 5))
A:matplotlib.tests.test_streamplot.start_points->numpy.column_stack([start_x.ravel(), start_y.ravel()])
A:matplotlib.tests.test_streamplot.speed->numpy.hypot(U, V)
A:matplotlib.tests.test_streamplot.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_streamplot.mask->numpy.zeros(U.shape, dtype=bool)
A:matplotlib.tests.test_streamplot.U->numpy.ma.array(U, mask=mask)
A:matplotlib.tests.test_streamplot.(x, y, U, V)->swirl_velocity_field()
A:matplotlib.tests.test_streamplot.(y, x)->numpy.meshgrid(y, x)
A:matplotlib.tests.test_streamplot.u->numpy.ones((3, 3))
A:matplotlib.tests.test_streamplot.v->numpy.zeros((3, 3))
matplotlib.tests.test_streamplot.swirl_velocity_field()
matplotlib.tests.test_streamplot.test_colormap()
matplotlib.tests.test_streamplot.test_direction()
matplotlib.tests.test_streamplot.test_linewidth()
matplotlib.tests.test_streamplot.test_masks_and_nans()
matplotlib.tests.test_streamplot.test_maxlength()
matplotlib.tests.test_streamplot.test_maxlength_no_broken()
matplotlib.tests.test_streamplot.test_startpoints()
matplotlib.tests.test_streamplot.test_streamplot_grid()
matplotlib.tests.test_streamplot.test_streamplot_inputs()
matplotlib.tests.test_streamplot.test_streamplot_limits()
matplotlib.tests.test_streamplot.velocity_field()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_patheffects.py----------------------------------------
A:matplotlib.tests.test_patheffects.ax1->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_patheffects.txt->matplotlib.pyplot.subplot().annotate('test', (1.0, 1.0), (0.0, 0), arrowprops=dict(arrowstyle='->', connectionstyle='angle3', lw=2), size=20, ha='center', path_effects=[path_effects.withStroke(linewidth=3, foreground='w')])
A:matplotlib.tests.test_patheffects.ax2->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_patheffects.arr->numpy.arange(25).reshape((5, 5))
A:matplotlib.tests.test_patheffects.cntr->matplotlib.pyplot.subplot().contour(arr, colors='k')
A:matplotlib.tests.test_patheffects.clbls->matplotlib.pyplot.subplot().clabel(cntr, fmt='%2.0f', use_clabeltext=True)
A:matplotlib.tests.test_patheffects.(p1,)->matplotlib.pyplot.plot(range(10))
A:matplotlib.tests.test_patheffects.leg->matplotlib.pyplot.legend([p1], ['Line 1$^2$'], fancybox=True, loc='upper left')
A:matplotlib.tests.test_patheffects.text->matplotlib.pyplot.subplot().text(x=0.01, y=0.9 - i * 0.13, s=chunk, fontdict={'ha': 'left', 'va': 'center', 'size': font_size, 'color': 'white'})
A:matplotlib.tests.test_patheffects.t->matplotlib.pyplot.gcf().text(0.02, 0.1, 'Hatch shadow', fontsize=75, weight=1000, va='center')
A:matplotlib.tests.test_patheffects.ax->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_patheffects.fig->matplotlib.pyplot.figure(dpi=150)
A:matplotlib.tests.test_patheffects.renderer->matplotlib.pyplot.figure(dpi=150).canvas.get_renderer()
A:matplotlib.tests.test_patheffects.pe_renderer->matplotlib.patheffects.PathEffectRenderer(p1.get_path_effects(), renderer)
A:matplotlib.tests.test_patheffects.pe->matplotlib.patheffects.SimplePatchShadow(offset=(4, 5))
A:matplotlib.tests.test_patheffects.(x, y)->numpy.meshgrid(np.linspace(0, 10, 150), np.linspace(-5, 5, 100))
A:matplotlib.tests.test_patheffects.cs->matplotlib.pyplot.contour(data)
A:matplotlib.tests.test_patheffects.(fig, (ax1, ax2, ax3))->matplotlib.pyplot.subplots(1, 3, figsize=(12, 4))
A:matplotlib.tests.test_patheffects.path->matplotlib.path.Path.unit_circle()
A:matplotlib.tests.test_patheffects.patch->matplotlib.patches.PathPatch(path, facecolor='none', lw=2, path_effects=[path_effects.withTickedStroke(angle=-90, spacing=10, length=1)])
A:matplotlib.tests.test_patheffects.x->numpy.linspace(0.0, 1.0, nx)
A:matplotlib.tests.test_patheffects.xvec->numpy.linspace(0.001, 4.0, nx)
A:matplotlib.tests.test_patheffects.yvec->numpy.linspace(0.001, 4.0, ny)
A:matplotlib.tests.test_patheffects.(x1, x2)->numpy.meshgrid(xvec, yvec)
A:matplotlib.tests.test_patheffects.cg1->ax3.contour(x1, x2, g1, [0], colors=('k',))
A:matplotlib.tests.test_patheffects.cg2->ax3.contour(x1, x2, g2, [0], colors=('r',))
A:matplotlib.tests.test_patheffects.cg3->ax3.contour(x1, x2, g3, [0], colors=('b',))
A:matplotlib.tests.test_patheffects.text1->matplotlib.pyplot.subplot().text(0.5, 0.75, s1, ha='center', va='center', size=20, bbox={'color': 'salmon'})
A:matplotlib.tests.test_patheffects.text2->matplotlib.pyplot.subplot().text(0.5, 0.25, s2, ha='center', va='center', size=20, bbox={'color': 'thistle'})
matplotlib.tests.test_patheffects.test_PathEffect_points_to_pixels()
matplotlib.tests.test_patheffects.test_SimplePatchShadow_offset()
matplotlib.tests.test_patheffects.test_collection()
matplotlib.tests.test_patheffects.test_patheffect1()
matplotlib.tests.test_patheffects.test_patheffect2()
matplotlib.tests.test_patheffects.test_patheffect3()
matplotlib.tests.test_patheffects.test_patheffects_spaces_and_newlines()
matplotlib.tests.test_patheffects.test_patheffects_stroked_text()
matplotlib.tests.test_patheffects.test_tickedstroke()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_cycles.py----------------------------------------
A:matplotlib.tests.test_cycles.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_cycles.t->range(10)
A:matplotlib.tests.test_cycles.prop->next(ax._get_lines.prop_cycler)
A:matplotlib.tests.test_cycles.got->next(ax._get_lines.prop_cycler)
matplotlib.tests.test_cycles.test_colorcycle_basic()
matplotlib.tests.test_cycles.test_cycle_reset()
matplotlib.tests.test_cycles.test_fillcycle_basic()
matplotlib.tests.test_cycles.test_fillcycle_ignore()
matplotlib.tests.test_cycles.test_invalid_input_forms()
matplotlib.tests.test_cycles.test_linestylecycle_basic()
matplotlib.tests.test_cycles.test_marker_cycle()
matplotlib.tests.test_cycles.test_marker_cycle_kwargs_arrays_iterators()
matplotlib.tests.test_cycles.test_property_collision_fill()
matplotlib.tests.test_cycles.test_property_collision_plot()
matplotlib.tests.test_cycles.test_valid_input_forms()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tests/test_backend_nbagg.py----------------------------------------
A:matplotlib.tests.test_backend_nbagg.nbformat->pytest.importorskip('nbformat')
A:matplotlib.tests.test_backend_nbagg.out_path->Path(tmpdir, 'out.ipynb')
A:matplotlib.tests.test_backend_nbagg.nb->pytest.importorskip('nbformat').read(out, nbformat.current_nbformat)
matplotlib.tests.test_backend_nbagg.test_ipynb()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/projections/polar.py----------------------------------------
A:matplotlib.projections.polar.__str__->matplotlib.transforms._make_str_method('_center', '_viewLim', '_originLim')
A:matplotlib.projections.polar.(theta, r)->numpy.transpose(tr)
A:matplotlib.projections.polar.r->numpy.hypot(x, y)
A:matplotlib.projections.polar.trs->trs.reshape((-1, 2)).reshape((-1, 2))
A:matplotlib.projections.polar.(last_td, td)->numpy.rad2deg([last_t, t])
A:matplotlib.projections.polar.arc->matplotlib.path.Path.arc(td, last_td)
A:matplotlib.projections.polar.limits_scaled->self._limits.transformed(self._scale_transform)
A:matplotlib.projections.polar.affine->matplotlib.transforms.Affine2D().scale(0.5 / yscale).translate(0.5, 0.5)
A:matplotlib.projections.polar.self._mtx->matplotlib.transforms.Affine2D().scale(0.5 / yscale).translate(0.5, 0.5).get_matrix()
A:matplotlib.projections.polar.(vmin, vmax)->self.base.view_limits(vmin, vmax)
A:matplotlib.projections.polar.d->numpy.rad2deg(abs(vmax - vmin))
A:matplotlib.projections.polar.digits->max(-int(np.log10(d) - 1.5), 0)
A:matplotlib.projections.polar.self.axisself.base.axis->_AxisWrapper(self.base.axis)
A:matplotlib.projections.polar.self.axis->_AxisWrapper(axis)
A:matplotlib.projections.polar.lim->self.axis.get_view_interval()
A:matplotlib.projections.polar.self._text1_translate->matplotlib.transforms.ScaledTranslation(0, 0, axes.figure.dpi_scale_trans)
A:matplotlib.projections.polar.self._text2_translate->matplotlib.transforms.ScaledTranslation(0, 0, axes.figure.dpi_scale_trans)
A:matplotlib.projections.polar.trans->matplotlib.transforms.Affine2D().scale(-1, 1).rotate(tick_angle)
A:matplotlib.projections.polar.marker->self.tick2line.get_marker()
A:matplotlib.projections.polar.vmin->min(0, vmin)
A:matplotlib.projections.polar.padx->numpy.cos(angle + np.pi / 2)
A:matplotlib.projections.polar.pady->numpy.sin(angle + np.pi / 2)
A:matplotlib.projections.polar.thetamin->axes.get_thetamin()
A:matplotlib.projections.polar.thetamax->axes.get_thetamax()
A:matplotlib.projections.polar.direction->axes.get_theta_direction()
A:matplotlib.projections.polar.offset_rad->axes.get_theta_offset()
A:matplotlib.projections.polar.offset->numpy.rad2deg(offset_rad)
A:matplotlib.projections.polar.full->_is_full_circle_deg(thetamin, thetamax)
A:matplotlib.projections.polar.tick_angle->numpy.deg2rad(angle + 180)
A:matplotlib.projections.polar.ha->self.label1.get_horizontalalignment()
A:matplotlib.projections.polar.va->self.label1.get_verticalalignment()
A:matplotlib.projections.polar.(ha, va)->self._determine_anchor(mode, angle, direction < 0)
A:matplotlib.projections.polar.points->self._viewLim.get_points().copy()
A:matplotlib.projections.polar.width->min(radius * (rmax - rmin) / rmax, radius)
A:matplotlib.projections.polar.wedge->matplotlib.patches.Wedge(self._center, points[1, 1], points[0, 0], points[1, 0], width=width)
A:matplotlib.projections.polar.self._default_rlabel_position->numpy.deg2rad(rlabel_position)
A:matplotlib.projections.polar.start->self.spines.get('start', None)
A:matplotlib.projections.polar.end->self.spines.get('end', None)
A:matplotlib.projections.polar.inner->self.spines.get('inner', None)
A:matplotlib.projections.polar.self.xaxis->ThetaAxis(self)
A:matplotlib.projections.polar.self.yaxis->RadialAxis(self)
A:matplotlib.projections.polar.self._originViewLim->matplotlib.transforms.LockableBbox(self.viewLim)
A:matplotlib.projections.polar.self._direction->matplotlib.transforms.Affine2D().scale(self._default_theta_direction, 1.0)
A:matplotlib.projections.polar.self._theta_offset->matplotlib.transforms.Affine2D().translate(self._default_theta_offset, 0.0)
A:matplotlib.projections.polar.self._realViewLim->matplotlib.transforms.TransformedBbox(self.viewLim, self.transShift)
A:matplotlib.projections.polar.self.transScale->matplotlib.transforms.TransformWrapper(mtransforms.IdentityTransform())
A:matplotlib.projections.polar.self.axesLim->_WedgeBbox((0.5, 0.5), self._realViewLim, self._originViewLim)
A:matplotlib.projections.polar.self.transWedge->matplotlib.transforms.BboxTransformFrom(self.axesLim)
A:matplotlib.projections.polar.self.transAxes->matplotlib.transforms.BboxTransformTo(self.bbox)
A:matplotlib.projections.polar.self.transProjection->self.PolarTransform(self, _apply_theta_transforms=False, scale_transform=self.transScale)
A:matplotlib.projections.polar.self.transProjectionAffine->self.PolarAffine(self.transScale, self._originViewLim)
A:matplotlib.projections.polar.flipr_transform->matplotlib.transforms.Affine2D().translate(0.0, -0.5).scale(1.0, -1.0).translate(0.0, 0.5)
A:matplotlib.projections.polar.self._r_label_position->matplotlib.transforms.Affine2D().translate(self._default_rlabel_position, 0.0)
A:matplotlib.projections.polar.self._yaxis_text_transform->matplotlib.transforms.TransformWrapper(self._r_label_position + self.transData)
A:matplotlib.projections.polar.pad_shift->_ThetaShift(self, pad, 'min')
A:matplotlib.projections.polar.(thetamin, thetamax)->numpy.rad2deg(self._realViewLim.intervalx)
A:matplotlib.projections.polar.center->self.transWedge.transform((0.5, 0.5))
A:matplotlib.projections.polar.(edge, _)->self.transWedge.transform((1, 0))
A:matplotlib.projections.polar.self.viewLim.x1->numpy.deg2rad(thetamax)
A:matplotlib.projections.polar.self.viewLim.x0->numpy.deg2rad(thetamin)
A:matplotlib.projections.polar.orig_lim->self.get_xlim()
A:matplotlib.projections.polar.kwargs['xmin']->numpy.deg2rad(kwargs.pop('thetamin'))
A:matplotlib.projections.polar.kwargs['xmax']->numpy.deg2rad(kwargs.pop('thetamax'))
A:matplotlib.projections.polar.(new_min, new_max)->self.set_xlim(*args, **kwargs)
A:matplotlib.projections.polar.mtx->self._direction.get_matrix()
A:matplotlib.projections.polar.bottom->kwargs.pop('rmin')
A:matplotlib.projections.polar.top->kwargs.pop('rmax')
A:matplotlib.projections.polar.angles->numpy.deg2rad(angles)
A:matplotlib.projections.polar.radii->numpy.asarray(radii)
A:matplotlib.projections.polar.angle->numpy.deg2rad(self.get_rlabel_position())
A:matplotlib.projections.polar.screen_xy->self.transData.transform((theta, r))
A:matplotlib.projections.polar.delta_t->abs((ts - theta + np.pi) % (2 * np.pi) - np.pi).max()
A:matplotlib.projections.polar.delta_r->abs(rs - r).max()
A:matplotlib.projections.polar.(t, r)->self.transData.inverted().transform((x, y))
A:matplotlib.projections.polar.self._pan_start->types.SimpleNamespace(rmax=self.get_rmax(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), r_label_angle=self.get_rlabel_position(), x=x, y=y, mode=mode)
A:matplotlib.projections.polar.((startt, startr), (t, r))->p.trans_inverse.transform([(p.x, p.y), (x, y)])
A:matplotlib.projections.polar.dt->numpy.rad2deg(startt - t)
A:matplotlib.projections.polar.(trans, vert1, horiz1)->self.get_yaxis_text1_transform(0.0)
A:matplotlib.projections.polar.(trans, vert2, horiz2)->self.get_yaxis_text2_transform(0.0)
matplotlib.projections.PolarAxes(self,*args,theta_offset=0,theta_direction=1,rlabel_position=22.5,**kwargs)
matplotlib.projections.PolarAxes._gen_axes_patch(self)
matplotlib.projections.PolarAxes._gen_axes_spines(self)
matplotlib.projections.PolarAxes._init_axis(self)
matplotlib.projections.PolarAxes._set_lim_and_transforms(self)
matplotlib.projections.PolarAxes.can_pan(self)
matplotlib.projections.PolarAxes.can_zoom(self)
matplotlib.projections.PolarAxes.clear(self)
matplotlib.projections.PolarAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.PolarAxes.draw(self,renderer)
matplotlib.projections.PolarAxes.end_pan(self)
matplotlib.projections.PolarAxes.format_coord(self,theta,r)
matplotlib.projections.PolarAxes.get_data_ratio(self)
matplotlib.projections.PolarAxes.get_rlabel_position(self)
matplotlib.projections.PolarAxes.get_rmax(self)
matplotlib.projections.PolarAxes.get_rmin(self)
matplotlib.projections.PolarAxes.get_rorigin(self)
matplotlib.projections.PolarAxes.get_rsign(self)
matplotlib.projections.PolarAxes.get_theta_direction(self)
matplotlib.projections.PolarAxes.get_theta_offset(self)
matplotlib.projections.PolarAxes.get_thetamax(self)
matplotlib.projections.PolarAxes.get_thetamin(self)
matplotlib.projections.PolarAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.PolarAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.PolarAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.PolarAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.PolarAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.PolarAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.PolarAxes.set_rgrids(self,radii,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.projections.PolarAxes.set_rlabel_position(self,value)
matplotlib.projections.PolarAxes.set_rlim(self,bottom=None,top=None,emit=True,auto=False,**kwargs)
matplotlib.projections.PolarAxes.set_rmax(self,rmax)
matplotlib.projections.PolarAxes.set_rmin(self,rmin)
matplotlib.projections.PolarAxes.set_rorigin(self,rorigin)
matplotlib.projections.PolarAxes.set_rscale(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_rticks(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_theta_direction(self,direction)
matplotlib.projections.PolarAxes.set_theta_offset(self,offset)
matplotlib.projections.PolarAxes.set_theta_zero_location(self,loc,offset=0.0)
matplotlib.projections.PolarAxes.set_thetagrids(self,angles,labels=None,fmt=None,**kwargs)
matplotlib.projections.PolarAxes.set_thetalim(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_thetamax(self,thetamax)
matplotlib.projections.PolarAxes.set_thetamin(self,thetamin)
matplotlib.projections.PolarAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.PolarAxes.start_pan(self,x,y,button)
matplotlib.projections.polar.InvertedPolarTransform(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.InvertedPolarTransform.__init__(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.InvertedPolarTransform.inverted(self)
matplotlib.projections.polar.InvertedPolarTransform.transform_non_affine(self,xy)
matplotlib.projections.polar.PolarAffine(self,scale_transform,limits)
matplotlib.projections.polar.PolarAffine.__init__(self,scale_transform,limits)
matplotlib.projections.polar.PolarAffine.get_matrix(self)
matplotlib.projections.polar.PolarAxes(self,*args,theta_offset=0,theta_direction=1,rlabel_position=22.5,**kwargs)
matplotlib.projections.polar.PolarAxes.__init__(self,*args,theta_offset=0,theta_direction=1,rlabel_position=22.5,**kwargs)
matplotlib.projections.polar.PolarAxes._gen_axes_patch(self)
matplotlib.projections.polar.PolarAxes._gen_axes_spines(self)
matplotlib.projections.polar.PolarAxes._init_axis(self)
matplotlib.projections.polar.PolarAxes._set_lim_and_transforms(self)
matplotlib.projections.polar.PolarAxes.can_pan(self)
matplotlib.projections.polar.PolarAxes.can_zoom(self)
matplotlib.projections.polar.PolarAxes.clear(self)
matplotlib.projections.polar.PolarAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.polar.PolarAxes.draw(self,renderer)
matplotlib.projections.polar.PolarAxes.end_pan(self)
matplotlib.projections.polar.PolarAxes.format_coord(self,theta,r)
matplotlib.projections.polar.PolarAxes.get_data_ratio(self)
matplotlib.projections.polar.PolarAxes.get_rlabel_position(self)
matplotlib.projections.polar.PolarAxes.get_rmax(self)
matplotlib.projections.polar.PolarAxes.get_rmin(self)
matplotlib.projections.polar.PolarAxes.get_rorigin(self)
matplotlib.projections.polar.PolarAxes.get_rsign(self)
matplotlib.projections.polar.PolarAxes.get_theta_direction(self)
matplotlib.projections.polar.PolarAxes.get_theta_offset(self)
matplotlib.projections.polar.PolarAxes.get_thetamax(self)
matplotlib.projections.polar.PolarAxes.get_thetamin(self)
matplotlib.projections.polar.PolarAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.polar.PolarAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.polar.PolarAxes.set_rgrids(self,radii,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rlabel_position(self,value)
matplotlib.projections.polar.PolarAxes.set_rlim(self,bottom=None,top=None,emit=True,auto=False,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rmax(self,rmax)
matplotlib.projections.polar.PolarAxes.set_rmin(self,rmin)
matplotlib.projections.polar.PolarAxes.set_rorigin(self,rorigin)
matplotlib.projections.polar.PolarAxes.set_rscale(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rticks(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_theta_direction(self,direction)
matplotlib.projections.polar.PolarAxes.set_theta_offset(self,offset)
matplotlib.projections.polar.PolarAxes.set_theta_zero_location(self,loc,offset=0.0)
matplotlib.projections.polar.PolarAxes.set_thetagrids(self,angles,labels=None,fmt=None,**kwargs)
matplotlib.projections.polar.PolarAxes.set_thetalim(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_thetamax(self,thetamax)
matplotlib.projections.polar.PolarAxes.set_thetamin(self,thetamin)
matplotlib.projections.polar.PolarAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.start_pan(self,x,y,button)
matplotlib.projections.polar.PolarTransform(self,axis=None,use_rmin=True,_apply_theta_transforms=True,*,scale_transform=None)
matplotlib.projections.polar.PolarTransform.__init__(self,axis=None,use_rmin=True,_apply_theta_transforms=True,*,scale_transform=None)
matplotlib.projections.polar.PolarTransform._get_rorigin(self)
matplotlib.projections.polar.PolarTransform.inverted(self)
matplotlib.projections.polar.PolarTransform.transform_non_affine(self,tr)
matplotlib.projections.polar.PolarTransform.transform_path_non_affine(self,path)
matplotlib.projections.polar.RadialAxis(self,*args,**kwargs)
matplotlib.projections.polar.RadialAxis.__init__(self,*args,**kwargs)
matplotlib.projections.polar.RadialAxis._set_scale(self,value,**kwargs)
matplotlib.projections.polar.RadialAxis._wrap_locator_formatter(self)
matplotlib.projections.polar.RadialAxis.clear(self)
matplotlib.projections.polar.RadialLocator(self,base,axes=None)
matplotlib.projections.polar.RadialLocator.__init__(self,base,axes=None)
matplotlib.projections.polar.RadialLocator._zero_in_bounds(self)
matplotlib.projections.polar.RadialLocator.nonsingular(self,vmin,vmax)
matplotlib.projections.polar.RadialLocator.set_axis(self,axis)
matplotlib.projections.polar.RadialLocator.view_limits(self,vmin,vmax)
matplotlib.projections.polar.RadialTick(self,*args,**kwargs)
matplotlib.projections.polar.RadialTick.__init__(self,*args,**kwargs)
matplotlib.projections.polar.RadialTick._determine_anchor(self,mode,angle,start)
matplotlib.projections.polar.RadialTick.update_position(self,loc)
matplotlib.projections.polar.ThetaAxis(maxis.XAxis)
matplotlib.projections.polar.ThetaAxis._copy_tick_props(self,src,dest)
matplotlib.projections.polar.ThetaAxis._set_scale(self,value,**kwargs)
matplotlib.projections.polar.ThetaAxis._wrap_locator_formatter(self)
matplotlib.projections.polar.ThetaAxis.clear(self)
matplotlib.projections.polar.ThetaFormatter(self,x,pos=None)
matplotlib.projections.polar.ThetaFormatter.__call__(self,x,pos=None)
matplotlib.projections.polar.ThetaLocator(self,base)
matplotlib.projections.polar.ThetaLocator.__init__(self,base)
matplotlib.projections.polar.ThetaLocator.set_axis(self,axis)
matplotlib.projections.polar.ThetaLocator.view_limits(self,vmin,vmax)
matplotlib.projections.polar.ThetaTick(self,axes,*args,**kwargs)
matplotlib.projections.polar.ThetaTick.__init__(self,axes,*args,**kwargs)
matplotlib.projections.polar.ThetaTick._apply_params(self,**kwargs)
matplotlib.projections.polar.ThetaTick._update_padding(self,pad,angle)
matplotlib.projections.polar.ThetaTick.update_position(self,loc)
matplotlib.projections.polar._AxisWrapper(self,axis)
matplotlib.projections.polar._AxisWrapper.__init__(self,axis)
matplotlib.projections.polar._AxisWrapper.get_data_interval(self)
matplotlib.projections.polar._AxisWrapper.get_minpos(self)
matplotlib.projections.polar._AxisWrapper.get_tick_space(self)
matplotlib.projections.polar._AxisWrapper.get_view_interval(self)
matplotlib.projections.polar._AxisWrapper.set_data_interval(self,vmin,vmax)
matplotlib.projections.polar._AxisWrapper.set_view_interval(self,vmin,vmax)
matplotlib.projections.polar._ThetaShift(self,axes,pad,mode)
matplotlib.projections.polar._ThetaShift.__init__(self,axes,pad,mode)
matplotlib.projections.polar._ThetaShift.get_matrix(self)
matplotlib.projections.polar._WedgeBbox(self,center,viewLim,originLim,**kwargs)
matplotlib.projections.polar._WedgeBbox.__init__(self,center,viewLim,originLim,**kwargs)
matplotlib.projections.polar._WedgeBbox.get_points(self)
matplotlib.projections.polar._is_full_circle_deg(thetamin,thetamax)
matplotlib.projections.polar._is_full_circle_rad(thetamin,thetamax)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/projections/geo.py----------------------------------------
A:matplotlib.projections.geo.self.xaxis->matplotlib.axis.XAxis(self)
A:matplotlib.projections.geo.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.projections.geo.self.transProjection->self._get_core_transform(self.RESOLUTION)
A:matplotlib.projections.geo.self.transAffine->self._get_affine_transform()
A:matplotlib.projections.geo.self.transAxes->BboxTransformTo(self.bbox)
A:matplotlib.projections.geo.self._xaxis_pretransform->Affine2D().scale(1, self._longitude_cap * 2).translate(0, -self._longitude_cap)
A:matplotlib.projections.geo.yaxis_stretch->Affine2D().scale(np.pi * 2, 1).translate(-np.pi, 0)
A:matplotlib.projections.geo.yaxis_space->Affine2D().scale(1, 1.1)
A:matplotlib.projections.geo.transform->self._get_core_transform(1)
A:matplotlib.projections.geo.(xscale, _)->self._get_core_transform(1).transform((np.pi, 0))
A:matplotlib.projections.geo.(_, yscale)->self._get_core_transform(1).transform((0, np.pi / 2))
A:matplotlib.projections.geo.(lon, lat)->numpy.rad2deg([lon, lat])
A:matplotlib.projections.geo.grid->numpy.arange(-90 + degrees, 90, degrees)
A:matplotlib.projections.geo.self._longitude_cap->numpy.deg2rad(degrees)
A:matplotlib.projections.geo.ipath->path.interpolated(self._resolution)
A:matplotlib.projections.geo.cos_latitude->numpy.cos(latitude)
A:matplotlib.projections.geo.alpha->numpy.sqrt(1.0 + cos_latitude * np.cos(half_long))
A:matplotlib.projections.geo.sinc_alpha->numpy.sinc(alpha / np.pi)
A:matplotlib.projections.geo.sqrt2->numpy.sqrt(2.0)
A:matplotlib.projections.geo.z->numpy.sqrt(1 - (x / 4) ** 2 - (y / 2) ** 2)
A:matplotlib.projections.geo.latitude->numpy.arcsin(cos_c * np.sin(clat) + y * sin_c * np.cos(clat) / p)
A:matplotlib.projections.geo.aux->numpy.empty(latitude.shape, dtype=float)
A:matplotlib.projections.geo.(delta, large_delta)->d(theta)
A:matplotlib.projections.geo.xy->numpy.empty(ll.shape, dtype=float)
A:matplotlib.projections.geo.theta->numpy.arcsin(y / np.sqrt(2))
A:matplotlib.projections.geo.cos_lat->numpy.cos(latitude)
A:matplotlib.projections.geo.sin_lat->numpy.sin(latitude)
A:matplotlib.projections.geo.cos_diff_long->numpy.cos(diff_long)
A:matplotlib.projections.geo.inner_k->numpy.maximum(1 + np.sin(clat) * sin_lat + np.cos(clat) * cos_lat * cos_diff_long, 1e-15)
A:matplotlib.projections.geo.k->numpy.sqrt(2 / inner_k)
A:matplotlib.projections.geo.p->numpy.maximum(np.hypot(x, y), 1e-09)
A:matplotlib.projections.geo.sin_c->numpy.sin(c)
A:matplotlib.projections.geo.cos_c->numpy.cos(c)
matplotlib.projections.AitoffAxes(self,*args,**kwargs)
matplotlib.projections.AitoffAxes.AitoffTransform(_GeoTransform)
matplotlib.projections.AitoffAxes.AitoffTransform.inverted(self)
matplotlib.projections.AitoffAxes.AitoffTransform.transform_non_affine(self,ll)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform(_GeoTransform)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform.inverted(self)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform.transform_non_affine(self,xy)
matplotlib.projections.AitoffAxes._get_core_transform(self,resolution)
matplotlib.projections.HammerAxes(self,*args,**kwargs)
matplotlib.projections.HammerAxes.HammerTransform(_GeoTransform)
matplotlib.projections.HammerAxes.HammerTransform.inverted(self)
matplotlib.projections.HammerAxes.HammerTransform.transform_non_affine(self,ll)
matplotlib.projections.HammerAxes.InvertedHammerTransform(_GeoTransform)
matplotlib.projections.HammerAxes.InvertedHammerTransform.inverted(self)
matplotlib.projections.HammerAxes.InvertedHammerTransform.transform_non_affine(self,xy)
matplotlib.projections.HammerAxes._get_core_transform(self,resolution)
matplotlib.projections.LambertAxes(self,*args,center_longitude=0,center_latitude=0,**kwargs)
matplotlib.projections.LambertAxes.InvertedLambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.LambertAxes.InvertedLambertTransform.inverted(self)
matplotlib.projections.LambertAxes.InvertedLambertTransform.transform_non_affine(self,xy)
matplotlib.projections.LambertAxes.LambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.LambertAxes.LambertTransform.inverted(self)
matplotlib.projections.LambertAxes.LambertTransform.transform_non_affine(self,ll)
matplotlib.projections.LambertAxes._get_affine_transform(self)
matplotlib.projections.LambertAxes._get_core_transform(self,resolution)
matplotlib.projections.LambertAxes.clear(self)
matplotlib.projections.MollweideAxes(self,*args,**kwargs)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform(_GeoTransform)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform.inverted(self)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform.transform_non_affine(self,xy)
matplotlib.projections.MollweideAxes.MollweideTransform(_GeoTransform)
matplotlib.projections.MollweideAxes.MollweideTransform.inverted(self)
matplotlib.projections.MollweideAxes.MollweideTransform.transform_non_affine(self,ll)
matplotlib.projections.MollweideAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.AitoffAxes(self,*args,**kwargs)
matplotlib.projections.geo.AitoffAxes.AitoffTransform(_GeoTransform)
matplotlib.projections.geo.AitoffAxes.AitoffTransform.inverted(self)
matplotlib.projections.geo.AitoffAxes.AitoffTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform(_GeoTransform)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.inverted(self)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.AitoffAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.AitoffAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.GeoAxes(Axes)
matplotlib.projections.geo.GeoAxes.ThetaFormatter(self,round_to=1.0)
matplotlib.projections.geo.GeoAxes.ThetaFormatter.__init__(self,round_to=1.0)
matplotlib.projections.geo.GeoAxes._gen_axes_patch(self)
matplotlib.projections.geo.GeoAxes._gen_axes_spines(self)
matplotlib.projections.geo.GeoAxes._get_affine_transform(self)
matplotlib.projections.geo.GeoAxes._init_axis(self)
matplotlib.projections.geo.GeoAxes._set_lim_and_transforms(self)
matplotlib.projections.geo.GeoAxes.can_pan(self)
matplotlib.projections.geo.GeoAxes.can_zoom(self)
matplotlib.projections.geo.GeoAxes.clear(self)
matplotlib.projections.geo.GeoAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.geo.GeoAxes.end_pan(self)
matplotlib.projections.geo.GeoAxes.format_coord(self,lon,lat)
matplotlib.projections.geo.GeoAxes.get_data_ratio(self)
matplotlib.projections.geo.GeoAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.geo.GeoAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.geo.GeoAxes.set_latitude_grid(self,degrees)
matplotlib.projections.geo.GeoAxes.set_longitude_grid(self,degrees)
matplotlib.projections.geo.GeoAxes.set_longitude_grid_ends(self,degrees)
matplotlib.projections.geo.GeoAxes.set_xlim(self,*args,**kwargs)
matplotlib.projections.geo.GeoAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.geo.GeoAxes.start_pan(self,x,y,button)
matplotlib.projections.geo.HammerAxes(self,*args,**kwargs)
matplotlib.projections.geo.HammerAxes.HammerTransform(_GeoTransform)
matplotlib.projections.geo.HammerAxes.HammerTransform.inverted(self)
matplotlib.projections.geo.HammerAxes.HammerTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform(_GeoTransform)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.inverted(self)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.HammerAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.HammerAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.LambertAxes(self,*args,center_longitude=0,center_latitude=0,**kwargs)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.__init__(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.inverted(self)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.LambertAxes.LambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.LambertTransform.__init__(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.LambertTransform.inverted(self)
matplotlib.projections.geo.LambertAxes.LambertTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.LambertAxes.__init__(self,*args,center_longitude=0,center_latitude=0,**kwargs)
matplotlib.projections.geo.LambertAxes._get_affine_transform(self)
matplotlib.projections.geo.LambertAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.LambertAxes.clear(self)
matplotlib.projections.geo.MollweideAxes(self,*args,**kwargs)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform(_GeoTransform)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.inverted(self)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.MollweideAxes.MollweideTransform(_GeoTransform)
matplotlib.projections.geo.MollweideAxes.MollweideTransform.inverted(self)
matplotlib.projections.geo.MollweideAxes.MollweideTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.MollweideAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.MollweideAxes._get_core_transform(self,resolution)
matplotlib.projections.geo._GeoTransform(self,resolution)
matplotlib.projections.geo._GeoTransform.__init__(self,resolution)
matplotlib.projections.geo._GeoTransform.__str__(self)
matplotlib.projections.geo._GeoTransform.transform_path_non_affine(self,path)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/projections/__init__.py----------------------------------------
A:matplotlib.projections.__init__.projection_registry->ProjectionRegistry()
matplotlib.projections.__init__.ProjectionRegistry(self)
matplotlib.projections.__init__.ProjectionRegistry.__init__(self)
matplotlib.projections.__init__.ProjectionRegistry.get_projection_class(self,name)
matplotlib.projections.__init__.ProjectionRegistry.get_projection_names(self)
matplotlib.projections.__init__.ProjectionRegistry.register(self,*projections)
matplotlib.projections.__init__.get_projection_class(projection=None)
matplotlib.projections.__init__.register_projection(cls)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/cbook/__init__.py----------------------------------------
A:matplotlib.cbook.__init__.MatplotlibDeprecationWarning->matplotlib._api.deprecated('3.6', obj_type='', alternative='matplotlib.MatplotlibDeprecationWarning')(property(lambda self: _api.deprecation.MatplotlibDeprecationWarning))
A:matplotlib.cbook.__init__.mplDeprecation->matplotlib._api.deprecated('3.6', obj_type='', alternative='matplotlib.MatplotlibDeprecationWarning')(property(lambda self: _api.deprecation.MatplotlibDeprecationWarning))
A:matplotlib.cbook.__init__.Gtk->sys.modules.get('gi.repository.Gtk')
A:matplotlib.cbook.__init__.wx->sys.modules.get('wx')
A:matplotlib.cbook.__init__.tkinter->sys.modules.get('tkinter')
A:matplotlib.cbook.__init__.macosx->sys.modules.get('matplotlib.backends._macosx')
A:matplotlib.cbook.__init__.self._cid_gen->itertools.count(cid_count)
A:matplotlib.cbook.__init__.self._pickled_cids->set()
A:matplotlib.cbook.__init__.cid_count->state.pop('_cid_gen')
A:matplotlib.cbook.__init__.proxy->cid_to_proxy.pop(cid, None)
A:matplotlib.cbook.__init__.cid->proxy_to_cid.pop(proxy, None)
A:matplotlib.cbook.__init__.func->ref()
A:matplotlib.cbook.__init__.kwarg_val->kwargs.pop(key, None)
A:matplotlib.cbook.__init__.s->str(s)
A:matplotlib.cbook.__init__.quote_pos->str(s).find('"', pos)
A:matplotlib.cbook.__init__.hash_pos->str(s).find('#', pos)
A:matplotlib.cbook.__init__.closing_quote_pos->str(s).find('"', quote_pos + 1)
A:matplotlib.cbook.__init__.fname->os.fspath(fname)
A:matplotlib.cbook.__init__.fh->open(fname, flag, encoding=encoding)
A:matplotlib.cbook.__init__.(fh, opened)->to_filehandle(path_or_file, mode, True, encoding)
A:matplotlib.cbook.__init__.path->Path(path)
A:matplotlib.cbook.__init__.suffix->Path(path).suffix.lower()
A:matplotlib.cbook.__init__.self._pos->min(self._pos + 1, len(self._elements) - 1)
A:matplotlib.cbook.__init__.old_elements->self._elements.copy()
A:matplotlib.cbook.__init__.x->numpy.asanyarray(x)
A:matplotlib.cbook.__init__.xm->numpy.ma.masked_invalid(x, copy=False)
A:matplotlib.cbook.__init__.referents->gc.get_referents(obj)
A:matplotlib.cbook.__init__.val->mapping.pop(key)
A:matplotlib.cbook.__init__.set_a->self._mapping.pop(weakref.ref(a), None)
A:matplotlib.cbook.__init__.set_b->mapping.get(weakref.ref(arg), [weakref.ref(arg)])
A:matplotlib.cbook.__init__.siblings->self._mapping.get(weakref.ref(a), [weakref.ref(a)])
A:matplotlib.cbook.__init__.wrapped->getattr(Grouper, name)
A:matplotlib.cbook.__init__.forwarder->matplotlib._api.deprecated(**self._deprecated_kw)(forwarder)
A:matplotlib.cbook.__init__.__contains__->_GrouperMethodForwarder()
A:matplotlib.cbook.__init__.__iter__->_GrouperMethodForwarder()
A:matplotlib.cbook.__init__.joined->_GrouperMethodForwarder()
A:matplotlib.cbook.__init__.get_siblings->_GrouperMethodForwarder()
A:matplotlib.cbook.__init__.clean->_GrouperMethodForwarder(deprecated_kw=dict(since='3.6'))
A:matplotlib.cbook.__init__.join->_GrouperMethodForwarder(deprecated_kw=dict(since='3.6'))
A:matplotlib.cbook.__init__.remove->_GrouperMethodForwarder(deprecated_kw=dict(since='3.6'))
A:matplotlib.cbook.__init__.fps->a.reshape((len(a), -1))
A:matplotlib.cbook.__init__.nrecs->len(args[0])
A:matplotlib.cbook.__init__.mask->numpy.asarray(mask, dtype=bool)
A:matplotlib.cbook.__init__.margs[i]->numpy.ma.array(x, mask=mask)
A:matplotlib.cbook.__init__.M->len(data)
A:matplotlib.cbook.__init__.bs_index->numpy.random.randint(M, size=(N, M))
A:matplotlib.cbook.__init__.estimate->numpy.median(bsData, axis=1, overwrite_input=True)
A:matplotlib.cbook.__init__.CI->_bootstrap_median(data, N=bootstrap)
A:matplotlib.cbook.__init__.N->len(data)
A:matplotlib.cbook.__init__.X->_reshape_2D(X, 'X')
A:matplotlib.cbook.__init__.ncols->len(X)
A:matplotlib.cbook.__init__.labels->itertools.repeat(None)
A:matplotlib.cbook.__init__.stats['fliers']->numpy.concatenate([x[x < stats['whislo']], x[x > stats['whishi']]])
A:matplotlib.cbook.__init__.stats['mean']->numpy.mean(x)
A:matplotlib.cbook.__init__.(q1, med, q3)->numpy.percentile(x, [25, 50, 75])
A:matplotlib.cbook.__init__.(stats['cilo'], stats['cihi'])->_compute_conf_interval(x, med, stats['iqr'], bootstrap)
A:matplotlib.cbook.__init__.(loval, hival)->numpy.percentile(x, whis)
A:matplotlib.cbook.__init__.stats['whishi']->numpy.max(wiskhi)
A:matplotlib.cbook.__init__.stats['whislo']->numpy.min(wisklo)
A:matplotlib.cbook.__init__.(idx,)->numpy.nonzero(mask[:-1] != mask[1:])
A:matplotlib.cbook.__init__.idx->idx.tolist().tolist()
A:matplotlib.cbook.__init__.xi->numpy.asanyarray(xi)
A:matplotlib.cbook.__init__.nd->numpy.ndim(xi)
A:matplotlib.cbook.__init__.quantiles->_reshape_2D(quantiles, 'quantiles')
A:matplotlib.cbook.__init__.min_val->numpy.min(x)
A:matplotlib.cbook.__init__.max_val->numpy.max(x)
A:matplotlib.cbook.__init__.quantile_val->numpy.percentile(x, 100 * q)
A:matplotlib.cbook.__init__.coords->numpy.linspace(min_val, max_val, points)
A:matplotlib.cbook.__init__.stats['vals']->method(x, coords)
A:matplotlib.cbook.__init__.stats['median']->numpy.median(x)
A:matplotlib.cbook.__init__.stats['quantiles']->numpy.atleast_1d(quantile_val)
A:matplotlib.cbook.__init__.steps->numpy.zeros((1 + len(args), 2 * len(x)))
A:matplotlib.cbook.__init__.y->_check_1d(y)
A:matplotlib.cbook.__init__.alias_mapping->getattr(alias_mapping, '_alias_map', {})
A:matplotlib.cbook.__init__.canonical->to_canonical.get(k, k)
A:matplotlib.cbook.__init__.lock_path->Path(path).with_name(path.name + '.matplotlib-lock')
A:matplotlib.cbook.__init__.top->_unfold(x[:-1:rstride, :-1], 1, cstride, cstride)
A:matplotlib.cbook.__init__.right->_unfold(x[:-1, cstride::cstride], 0, rstride, rstride)
A:matplotlib.cbook.__init__.sentinel->object()
A:matplotlib.cbook.__init__.orig->getattr(obj, attr, sentinel)
A:matplotlib.cbook.__init__.cls_orig->getattr(type(obj), attr)
A:matplotlib.cbook.__init__.self._od->collections.OrderedDict()
A:matplotlib.cbook.__init__.rgba->numpy.take(buf, [2, 1, 0, 3] if sys.byteorder == 'little' else [1, 2, 3, 0], axis=2)
A:matplotlib.cbook.__init__.argb32->numpy.take(rgba8888, [3, 0, 1, 2], axis=2)
A:matplotlib.cbook.__init__.(x_nz,)->buf.any(axis=0).nonzero()
A:matplotlib.cbook.__init__.(y_nz,)->buf.any(axis=1).nonzero()
A:matplotlib.cbook.__init__.proc->subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)
A:matplotlib.cbook.__init__.stdout->stdout.decode().decode()
A:matplotlib.cbook.__init__.stderr->stderr.decode().decode()
A:matplotlib.cbook.__init__.delta->abs(np.spacing(value))
A:matplotlib.cbook.__init__.key->{'return': 'enter', 'prior': 'pageup', 'next': 'pagedown'}.get(key, key)
A:matplotlib.cbook.__init__.subcls.__name__subcls.__qualname__->fmt.format(base_class.__name__)
A:matplotlib.cbook.__init__.factory->_make_class_factory(mixin_class, fmt, attr_name)
A:matplotlib.cbook.__init__.cls->factory(base_class)
matplotlib.cbook.__init__.CallbackRegistry(self,exception_handler=_exception_printer,*,signals=None)
matplotlib.cbook.__init__.CallbackRegistry.__getstate__(self)
matplotlib.cbook.__init__.CallbackRegistry.__init__(self,exception_handler=_exception_printer,*,signals=None)
matplotlib.cbook.__init__.CallbackRegistry.__setstate__(self,state)
matplotlib.cbook.__init__.CallbackRegistry._connect_picklable(self,signal,func)
matplotlib.cbook.__init__.CallbackRegistry._remove_proxy(self,proxy,*,_is_finalizing=sys.is_finalizing)
matplotlib.cbook.__init__.CallbackRegistry.blocked(self,*,signal=None)
matplotlib.cbook.__init__.CallbackRegistry.connect(self,signal,func)
matplotlib.cbook.__init__.CallbackRegistry.disconnect(self,cid)
matplotlib.cbook.__init__.CallbackRegistry.process(self,s,*args,**kwargs)
matplotlib.cbook.__init__.Grouper(self,init=())
matplotlib.cbook.__init__.Grouper.__contains__(self,item)
matplotlib.cbook.__init__.Grouper.__init__(self,init=())
matplotlib.cbook.__init__.Grouper.__iter__(self)
matplotlib.cbook.__init__.Grouper.clean(self)
matplotlib.cbook.__init__.Grouper.get_siblings(self,a)
matplotlib.cbook.__init__.Grouper.join(self,a,*args)
matplotlib.cbook.__init__.Grouper.joined(self,a,b)
matplotlib.cbook.__init__.Grouper.remove(self,a)
matplotlib.cbook.__init__.GrouperView(self,grouper)
matplotlib.cbook.__init__.GrouperView._GrouperMethodForwarder(self,deprecated_kw=None)
matplotlib.cbook.__init__.GrouperView._GrouperMethodForwarder.__init__(self,deprecated_kw=None)
matplotlib.cbook.__init__.GrouperView._GrouperMethodForwarder.__set_name__(self,owner,name)
matplotlib.cbook.__init__.GrouperView.__init__(self,grouper)
matplotlib.cbook.__init__.Stack(self,default=None)
matplotlib.cbook.__init__.Stack.__getitem__(self,ind)
matplotlib.cbook.__init__.Stack.__init__(self,default=None)
matplotlib.cbook.__init__.Stack.__len__(self)
matplotlib.cbook.__init__.Stack.back(self)
matplotlib.cbook.__init__.Stack.bubble(self,o)
matplotlib.cbook.__init__.Stack.clear(self)
matplotlib.cbook.__init__.Stack.empty(self)
matplotlib.cbook.__init__.Stack.forward(self)
matplotlib.cbook.__init__.Stack.home(self)
matplotlib.cbook.__init__.Stack.push(self,o)
matplotlib.cbook.__init__.Stack.remove(self,o)
matplotlib.cbook.__init__._OrderedSet(self)
matplotlib.cbook.__init__._OrderedSet.__contains__(self,key)
matplotlib.cbook.__init__._OrderedSet.__init__(self)
matplotlib.cbook.__init__._OrderedSet.__iter__(self)
matplotlib.cbook.__init__._OrderedSet.__len__(self)
matplotlib.cbook.__init__._OrderedSet.add(self,key)
matplotlib.cbook.__init__._OrderedSet.discard(self,key)
matplotlib.cbook.__init__._StrongRef(self,obj)
matplotlib.cbook.__init__._StrongRef.__eq__(self,other)
matplotlib.cbook.__init__._StrongRef.__hash__(self)
matplotlib.cbook.__init__._StrongRef.__init__(self,obj)
matplotlib.cbook.__init__.__getattr__
matplotlib.cbook.__init__._array_patch_perimeters(x,rstride,cstride)
matplotlib.cbook.__init__._array_perimeter(arr)
matplotlib.cbook.__init__._auto_format_str(fmt,value)
matplotlib.cbook.__init__._backend_module_name(name)
matplotlib.cbook.__init__._check_1d(x)
matplotlib.cbook.__init__._check_and_log_subprocess(command,logger,**kwargs)
matplotlib.cbook.__init__._combine_masks(*args)
matplotlib.cbook.__init__._exception_printer(exc)
matplotlib.cbook.__init__._format_approx(number,precision)
matplotlib.cbook.__init__._g_sig_digits(value,delta)
matplotlib.cbook.__init__._get_data_path(*args)
matplotlib.cbook.__init__._get_nonzero_slices(buf)
matplotlib.cbook.__init__._get_running_interactive_framework()
matplotlib.cbook.__init__._local_over_kwdict(local_var,kwargs,*keys,warning_cls=_api.MatplotlibDeprecationWarning)
matplotlib.cbook.__init__._lock_path(path)
matplotlib.cbook.__init__._make_class_factory(mixin_class,fmt,attr_name=None)
matplotlib.cbook.__init__._pformat_subprocess(command)
matplotlib.cbook.__init__._picklable_class_constructor(mixin_class,fmt,attr_name,base_class)
matplotlib.cbook.__init__._premultiplied_argb32_to_unmultiplied_rgba8888(buf)
matplotlib.cbook.__init__._reshape_2D(X,name)
matplotlib.cbook.__init__._safe_first_finite(obj,*,skip_nonfinite=True)
matplotlib.cbook.__init__._setattr_cm(obj,**kwargs)
matplotlib.cbook.__init__._setup_new_guiapp()
matplotlib.cbook.__init__._str_equal(obj,s)
matplotlib.cbook.__init__._str_lower_equal(obj,s)
matplotlib.cbook.__init__._strip_comment(s)
matplotlib.cbook.__init__._to_unmasked_float_array(x)
matplotlib.cbook.__init__._topmost_artist(artists,_cached_max=functools.partial(max,key=operator.attrgetter('zorder')))
matplotlib.cbook.__init__._unfold(arr,axis,size,step)
matplotlib.cbook.__init__._unikey_or_keysym_to_mplkey(unikey,keysym)
matplotlib.cbook.__init__._unmultiplied_rgba8888_to_premultiplied_argb32(rgba8888)
matplotlib.cbook.__init__._unpack_to_numpy(x)
matplotlib.cbook.__init__._weak_or_strong_ref(func,callback)
matplotlib.cbook.__init__.boxplot_stats(X,whis=1.5,bootstrap=None,labels=None,autorange=False)
matplotlib.cbook.__init__.contiguous_regions(mask)
matplotlib.cbook.__init__.delete_masked_points(*args)
matplotlib.cbook.__init__.file_requires_unicode(x)
matplotlib.cbook.__init__.flatten(seq,scalarp=is_scalar_or_string)
matplotlib.cbook.__init__.get_sample_data(fname,asfileobj=True,*,np_load=False)
matplotlib.cbook.__init__.index_of(y)
matplotlib.cbook.__init__.is_math_text(s)
matplotlib.cbook.__init__.is_scalar_or_string(val)
matplotlib.cbook.__init__.is_writable_file_like(obj)
matplotlib.cbook.__init__.maxdict(self,maxsize)
matplotlib.cbook.__init__.maxdict.__init__(self,maxsize)
matplotlib.cbook.__init__.maxdict.__setitem__(self,k,v)
matplotlib.cbook.__init__.normalize_kwargs(kw,alias_mapping=None)
matplotlib.cbook.__init__.open_file_cm(path_or_file,mode='r',encoding=None)
matplotlib.cbook.__init__.print_cycles(objects,outstream=sys.stdout,show_progress=False)
matplotlib.cbook.__init__.pts_to_midstep(x,*args)
matplotlib.cbook.__init__.pts_to_poststep(x,*args)
matplotlib.cbook.__init__.pts_to_prestep(x,*args)
matplotlib.cbook.__init__.safe_first_element(obj)
matplotlib.cbook.__init__.safe_masked_invalid(x,copy=False)
matplotlib.cbook.__init__.sanitize_sequence(data)
matplotlib.cbook.__init__.silent_list(self,type,seq=None)
matplotlib.cbook.__init__.silent_list.__init__(self,type,seq=None)
matplotlib.cbook.__init__.silent_list.__repr__(self)
matplotlib.cbook.__init__.simple_linear_interpolation(a,steps)
matplotlib.cbook.__init__.strip_math(s)
matplotlib.cbook.__init__.to_filehandle(fname,flag='r',return_opened=False,encoding=None)
matplotlib.cbook.__init__.violin_stats(X,method,points=100,quantiles=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/_markers.py----------------------------------------
A:matplotlib.testing._markers._log->logging.getLogger(__name__)
A:matplotlib.testing._markers.needs_ghostscript->pytest.mark.skipif('eps' not in matplotlib.testing.compare.converter, reason='This test needs a ghostscript installation')
A:matplotlib.testing._markers.needs_pgf_lualatex->pytest.mark.skipif(not matplotlib.testing._check_for_pgf('lualatex'), reason='lualatex + pgf is required')
A:matplotlib.testing._markers.needs_pgf_pdflatex->pytest.mark.skipif(not matplotlib.testing._check_for_pgf('pdflatex'), reason='pdflatex + pgf is required')
A:matplotlib.testing._markers.needs_pgf_xelatex->pytest.mark.skipif(not matplotlib.testing._check_for_pgf('xelatex'), reason='xelatex + pgf is required')
A:matplotlib.testing._markers.needs_usetex->pytest.mark.skipif(not _checkdep_usetex(), reason='This test needs a TeX installation')
matplotlib.testing._markers._checkdep_usetex()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/compare.py----------------------------------------
A:matplotlib.testing.compare._log->logging.getLogger(__name__)
A:matplotlib.testing.compare.(base, ext)->os.path.splitext(fname)
A:matplotlib.testing.compare.cache_dir->Path(mpl.get_cachedir(), 'test_cache')
A:matplotlib.testing.compare.md5->hashlib.md5()
A:matplotlib.testing.compare.data->fd.read(block_size)
A:matplotlib.testing.compare.buf->bytearray()
A:matplotlib.testing.compare.c->self._proc.stdout.read(1)
A:matplotlib.testing.compare.self._proc->subprocess.Popen(['inkscape', '--without-gui', '--shell'] if old_inkscape else ['inkscape', '--shell'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=stderr, env=env, cwd=self._tmpdir.name)
A:matplotlib.testing.compare.err->self._read_until((b'GS<', b'GS>'))
A:matplotlib.testing.compare.self._tmpdir->TemporaryDirectory()
A:matplotlib.testing.compare.stderr->TemporaryFile()
A:matplotlib.testing.compare.inkscape_orig->Path(self._tmpdir.name, os.fsdecode(b'f.svg'))
A:matplotlib.testing.compare.inkscape_dest->Path(self._tmpdir.name, os.fsdecode(b'f.png'))
A:matplotlib.testing.compare.converter['pdf']converter['eps']->_GSConverter()
A:matplotlib.testing.compare.converter['svg']->_SVGConverter()
A:matplotlib.testing.compare._svg_with_matplotlib_fonts_converter->_SVGWithMatplotlibFontsConverter()
A:matplotlib.testing.compare.path->sorted(cache_stat, key=lambda path: cache_stat[path].st_atime, reverse=True).pop()
A:matplotlib.testing.compare.hash_value->get_file_hash(path)
A:matplotlib.testing.compare.contents->sorted(cache_stat, key=lambda path: cache_stat[path].st_atime, reverse=True).pop().read_text()
A:matplotlib.testing.compare.baseline_images_size->sum((path.stat().st_size for path in Path(mpl.__file__).parent.glob('**/baseline_images/**/*')))
A:matplotlib.testing.compare.cache_size->sum((stat.st_size for stat in cache_stat.values()))
A:matplotlib.testing.compare.paths_by_atime->sorted(cache_stat, key=lambda path: cache_stat[path].st_atime, reverse=True)
A:matplotlib.testing.compare.img->img.convert('RGB').convert('RGB')
A:matplotlib.testing.compare.actual->convert(actual, cache=True)
A:matplotlib.testing.compare.expected->convert(expected, cache=True)
A:matplotlib.testing.compare.expected_image->numpy.array(expected_image, float)
A:matplotlib.testing.compare.actual_image->numpy.array(actual_image, float)
A:matplotlib.testing.compare.(actual_image, expected_image)->crop_to_same(actual, actual_image, expected, expected_image)
A:matplotlib.testing.compare.diff_image->make_test_filename(actual, 'failed-diff')
A:matplotlib.testing.compare.rms->calculate_rms(expected_image, actual_image)
A:matplotlib.testing.compare.results->'\n  '.join([line.format(**results) for line in template])
A:matplotlib.testing.compare.abs_diff->numpy.clip(abs_diff, 0, 255).astype(np.uint8)
matplotlib.testing.compare._Converter(self)
matplotlib.testing.compare._Converter.__del__(self)
matplotlib.testing.compare._Converter.__init__(self)
matplotlib.testing.compare._Converter._read_until(self,terminator)
matplotlib.testing.compare._ConverterError(Exception)
matplotlib.testing.compare._GSConverter(self,orig,dest)
matplotlib.testing.compare._GSConverter.__call__(self,orig,dest)
matplotlib.testing.compare._SVGConverter(self,orig,dest)
matplotlib.testing.compare._SVGConverter.__call__(self,orig,dest)
matplotlib.testing.compare._SVGConverter.__del__(self)
matplotlib.testing.compare._SVGWithMatplotlibFontsConverter(self,orig,dest)
matplotlib.testing.compare._SVGWithMatplotlibFontsConverter.__call__(self,orig,dest)
matplotlib.testing.compare._clean_conversion_cache()
matplotlib.testing.compare._get_cache_path()
matplotlib.testing.compare._load_image(path)
matplotlib.testing.compare._register_conversion_cache_cleaner_once()
matplotlib.testing.compare._update_converter()
matplotlib.testing.compare.calculate_rms(expected_image,actual_image)
matplotlib.testing.compare.comparable_formats()
matplotlib.testing.compare.compare_images(expected,actual,tol,in_decorator=False)
matplotlib.testing.compare.convert(filename,cache)
matplotlib.testing.compare.crop_to_same(actual_path,actual_image,expected_path,expected_image)
matplotlib.testing.compare.get_cache_dir()
matplotlib.testing.compare.get_file_hash(path,block_size=2**20)
matplotlib.testing.compare.make_test_filename(fname,purpose)
matplotlib.testing.compare.save_diff_image(expected,actual,output)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/widgets.py----------------------------------------
A:matplotlib.testing.widgets.(fig, ax)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.testing.widgets.event->mock_event(tool.ax, button, xdata, ydata, key, step)
A:matplotlib.testing.widgets.func->getattr(tool, etype)
matplotlib.testing.widgets.click_and_drag(tool,start,end,key=None)
matplotlib.testing.widgets.do_event(tool,etype,button=1,xdata=0,ydata=0,key=None,step=1)
matplotlib.testing.widgets.get_ax()
matplotlib.testing.widgets.mock_event(ax,button=1,xdata=0,ydata=0,key=None,step=1)
matplotlib.testing.widgets.noop(*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/exceptions.py----------------------------------------
matplotlib.testing.exceptions.ImageComparisonFailure(AssertionError)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/__init__.py----------------------------------------
A:matplotlib.testing.__init__._log->logging.getLogger(__name__)
A:matplotlib.testing.__init__.proc->subprocess.run([sys.executable, '-c', f'from {module} import {target}; {target}()', *args], env={**os.environ, 'SOURCE_DATE_EPOCH': '0', **(extra_env or {})}, timeout=timeout, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
A:matplotlib.testing.__init__.tex_path->Path(tmpdir, 'test.tex')
matplotlib.testing.__init__._check_for_pgf(texsystem)
matplotlib.testing.__init__._has_tex_package(package)
matplotlib.testing.__init__.set_font_settings_for_testing()
matplotlib.testing.__init__.set_reproducibility_for_testing()
matplotlib.testing.__init__.setup()
matplotlib.testing.__init__.subprocess_run_helper(func,*args,timeout,extra_env=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/conftest.py----------------------------------------
A:matplotlib.testing.conftest.backend_marker->request.node.get_closest_marker('backend')
A:matplotlib.testing.conftest.prev_backend->matplotlib.get_backend()
A:matplotlib.testing.conftest.skip_on_importerror->request.node.get_closest_marker('backend').kwargs.get('skip_on_importerror', False)
A:matplotlib.testing.conftest.pd->pytest.importorskip('pandas')
A:matplotlib.testing.conftest.xr->pytest.importorskip('xarray')
matplotlib.testing.conftest.mpl_test_settings(request)
matplotlib.testing.conftest.pd()
matplotlib.testing.conftest.pytest_configure(config)
matplotlib.testing.conftest.pytest_unconfigure(config)
matplotlib.testing.conftest.xr()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/decorators.py----------------------------------------
A:matplotlib.testing.decorators.orig_units_registry->matplotlib.units.registry.copy()
A:matplotlib.testing.decorators.cls._cm->_cleanup_cm().__enter__()
A:matplotlib.testing.decorators.result->make_cleanup(style)
A:matplotlib.testing.decorators.found->parse_version(ft2font.__freetype_version__)
A:matplotlib.testing.decorators.null_formatter->matplotlib.ticker.NullFormatter()
A:matplotlib.testing.decorators.new_managers->sorted([manager for manager in managers.values() if manager not in preexisting], key=lambda manager: manager.num)
A:matplotlib.testing.decorators.err->compare_images(expected, actual, tol, in_decorator=True)
A:matplotlib.testing.decorators.err[key]->os.path.relpath(err[key])
A:matplotlib.testing.decorators.(self.baseline_dir, self.result_dir)->_image_directories(func)
A:matplotlib.testing.decorators.orig_expected_path->orig_expected_path.with_suffix('.pdf').with_suffix('.pdf')
A:matplotlib.testing.decorators.expected_fname->make_test_filename(self.result_dir / orig_expected_path.name, 'expected')
A:matplotlib.testing.decorators.actual_path->(self.result_dir / baseline).with_suffix(f'.{extension}')
A:matplotlib.testing.decorators.kwargs->self.savefig_kwargs.copy()
A:matplotlib.testing.decorators.expected_path->self.copy_baseline(baseline, extension)
A:matplotlib.testing.decorators.old_sig->inspect.signature(func)
A:matplotlib.testing.decorators.reason->{'pdf': 'because Ghostscript is not installed', 'eps': 'because Ghostscript is not installed', 'svg': 'because Inkscape is not installed'}.get(extension, 'on this system')
A:matplotlib.testing.decorators.img->_ImageComparisonBase(func, tol=tol, remove_text=remove_text, savefig_kwargs=savefig_kwargs)
A:matplotlib.testing.decorators.needs_lock->any((marker.args[0] != 'extension' for marker in request.node.iter_markers('parametrize')))
A:matplotlib.testing.decorators.our_baseline_images->request.getfixturevalue('baseline_images')
A:matplotlib.testing.decorators.parameters->list(old_sig.parameters.values())
A:matplotlib.testing.decorators.new_sig->inspect.signature(func).replace(parameters=parameters)
A:matplotlib.testing.decorators.savefig_kwarg->dict()
A:matplotlib.testing.decorators.ALLOWED_CHARS->set(string.digits + string.ascii_letters + '_-[]()')
A:matplotlib.testing.decorators.(_, result_dir)->_image_directories(func)
A:matplotlib.testing.decorators.file_name->''.join((c for c in request.node.name if c in ALLOWED_CHARS))
A:matplotlib.testing.decorators.fig_test->matplotlib.pyplot.figure('test')
A:matplotlib.testing.decorators.fig_ref->matplotlib.pyplot.figure('reference')
A:matplotlib.testing.decorators.module_path->Path(inspect.getfile(func))
matplotlib.testing.decorators.CleanupTestCase(unittest.TestCase)
matplotlib.testing.decorators.CleanupTestCase.setUpClass(cls)
matplotlib.testing.decorators.CleanupTestCase.tearDownClass(cls)
matplotlib.testing.decorators._ImageComparisonBase(self,func,tol,remove_text,savefig_kwargs)
matplotlib.testing.decorators._ImageComparisonBase.__init__(self,func,tol,remove_text,savefig_kwargs)
matplotlib.testing.decorators._ImageComparisonBase.compare(self,fig,baseline,extension,*,_lock=False)
matplotlib.testing.decorators._ImageComparisonBase.copy_baseline(self,baseline,extension)
matplotlib.testing.decorators._check_freetype_version(ver)
matplotlib.testing.decorators._checked_on_freetype_version(required_freetype_version)
matplotlib.testing.decorators._cleanup_cm()
matplotlib.testing.decorators._collect_new_figures()
matplotlib.testing.decorators._image_directories(func)
matplotlib.testing.decorators._pytest_image_comparison(baseline_images,extensions,tol,freetype_version,remove_text,savefig_kwargs,style)
matplotlib.testing.decorators._raise_on_image_difference(expected,actual,tol)
matplotlib.testing.decorators.check_figures_equal(*,extensions=('png','pdf','svg'),tol=0)
matplotlib.testing.decorators.check_freetype_version(ver)
matplotlib.testing.decorators.cleanup(style=None)
matplotlib.testing.decorators.image_comparison(baseline_images,extensions=None,tol=0,freetype_version=None,remove_text=False,savefig_kwarg=None,style=('classic','_classic_test_patch'))
matplotlib.testing.decorators.remove_ticks_and_titles(figure)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/Epoch.py----------------------------------------
A:matplotlib.testing.jpl_units.Epoch.daynum->date2num(dt)
A:matplotlib.testing.jpl_units.Epoch.self._jd->float(jd)
A:matplotlib.testing.jpl_units.Epoch.self._seconds->float(sec)
A:matplotlib.testing.jpl_units.Epoch.deltaDays->math.floor(self._seconds / 86400)
A:matplotlib.testing.jpl_units.Epoch.t->self.convert(rhs._frame)
A:matplotlib.testing.jpl_units.Epoch.__eq__->functools.partialmethod(_cmp, operator.eq)
A:matplotlib.testing.jpl_units.Epoch.__ne__->functools.partialmethod(_cmp, operator.ne)
A:matplotlib.testing.jpl_units.Epoch.__lt__->functools.partialmethod(_cmp, operator.lt)
A:matplotlib.testing.jpl_units.Epoch.__le__->functools.partialmethod(_cmp, operator.le)
A:matplotlib.testing.jpl_units.Epoch.__gt__->functools.partialmethod(_cmp, operator.gt)
A:matplotlib.testing.jpl_units.Epoch.__ge__->functools.partialmethod(_cmp, operator.ge)
matplotlib.testing.jpl_units.Epoch(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch.__add__(self,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch.__init__(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch.__repr__(self)
matplotlib.testing.jpl_units.Epoch.Epoch.__str__(self)
matplotlib.testing.jpl_units.Epoch.Epoch.__sub__(self,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch._cmp(self,op,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch.convert(self,frame)
matplotlib.testing.jpl_units.Epoch.Epoch.frame(self)
matplotlib.testing.jpl_units.Epoch.Epoch.julianDate(self,frame)
matplotlib.testing.jpl_units.Epoch.Epoch.range(start,stop,step)
matplotlib.testing.jpl_units.Epoch.Epoch.secondsPast(self,frame,jd)
matplotlib.testing.jpl_units.Epoch.__add__(self,rhs)
matplotlib.testing.jpl_units.Epoch.__repr__(self)
matplotlib.testing.jpl_units.Epoch.__str__(self)
matplotlib.testing.jpl_units.Epoch.__sub__(self,rhs)
matplotlib.testing.jpl_units.Epoch._cmp(self,op,rhs)
matplotlib.testing.jpl_units.Epoch.convert(self,frame)
matplotlib.testing.jpl_units.Epoch.frame(self)
matplotlib.testing.jpl_units.Epoch.julianDate(self,frame)
matplotlib.testing.jpl_units.Epoch.range(start,stop,step)
matplotlib.testing.jpl_units.Epoch.secondsPast(self,frame,jd)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/StrConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.StrConverter.ticks->list(range(len(labels)))
A:matplotlib.testing.jpl_units.StrConverter.labels->axis.get_ticklabels()
A:matplotlib.testing.jpl_units.StrConverter.loc->axis.get_major_locator()
matplotlib.testing.jpl_units.StrConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.StrConverter.StrConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.StrConverter.StrConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.StrConverter.StrConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.StrConverter.StrConverter.default_units(value,axis)
matplotlib.testing.jpl_units.StrConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.StrConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.StrConverter.default_units(value,axis)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/UnitDblFormatter.py----------------------------------------
matplotlib.testing.jpl_units.UnitDblFormatter(self,x,pos=None)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter(self,x,pos=None)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.__call__(self,x,pos=None)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.format_data(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.format_data_short(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.format_data(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.format_data_short(self,value)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/EpochConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.EpochConverter.majloc->matplotlib.dates.AutoDateLocator()
A:matplotlib.testing.jpl_units.EpochConverter.majfmt->matplotlib.dates.AutoDateFormatter(majloc)
A:matplotlib.testing.jpl_units.EpochConverter.unit->EpochConverter.default_units(value, axis)
matplotlib.testing.jpl_units.EpochConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.default_units(value,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.duration2float(value)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.epoch2float(value,unit)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.float2epoch(value,unit)
matplotlib.testing.jpl_units.EpochConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.EpochConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.EpochConverter.default_units(value,axis)
matplotlib.testing.jpl_units.EpochConverter.duration2float(value)
matplotlib.testing.jpl_units.EpochConverter.epoch2float(value,unit)
matplotlib.testing.jpl_units.EpochConverter.float2epoch(value,unit)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/Duration.py----------------------------------------
A:matplotlib.testing.jpl_units.Duration.__eq__->functools.partialmethod(_cmp, operator.eq)
A:matplotlib.testing.jpl_units.Duration.__ne__->functools.partialmethod(_cmp, operator.ne)
A:matplotlib.testing.jpl_units.Duration.__lt__->functools.partialmethod(_cmp, operator.lt)
A:matplotlib.testing.jpl_units.Duration.__le__->functools.partialmethod(_cmp, operator.le)
A:matplotlib.testing.jpl_units.Duration.__gt__->functools.partialmethod(_cmp, operator.gt)
A:matplotlib.testing.jpl_units.Duration.__ge__->functools.partialmethod(_cmp, operator.ge)
matplotlib.testing.jpl_units.Duration(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration.__abs__(self)
matplotlib.testing.jpl_units.Duration.Duration.__add__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__bool__(self)
matplotlib.testing.jpl_units.Duration.Duration.__init__(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration.__mul__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__neg__(self)
matplotlib.testing.jpl_units.Duration.Duration.__repr__(self)
matplotlib.testing.jpl_units.Duration.Duration.__str__(self)
matplotlib.testing.jpl_units.Duration.Duration.__sub__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration._cmp(self,op,rhs)
matplotlib.testing.jpl_units.Duration.Duration.checkSameFrame(self,rhs,func)
matplotlib.testing.jpl_units.Duration.Duration.frame(self)
matplotlib.testing.jpl_units.Duration.Duration.seconds(self)
matplotlib.testing.jpl_units.Duration.__abs__(self)
matplotlib.testing.jpl_units.Duration.__add__(self,rhs)
matplotlib.testing.jpl_units.Duration.__bool__(self)
matplotlib.testing.jpl_units.Duration.__mul__(self,rhs)
matplotlib.testing.jpl_units.Duration.__neg__(self)
matplotlib.testing.jpl_units.Duration.__repr__(self)
matplotlib.testing.jpl_units.Duration.__str__(self)
matplotlib.testing.jpl_units.Duration.__sub__(self,rhs)
matplotlib.testing.jpl_units.Duration._cmp(self,op,rhs)
matplotlib.testing.jpl_units.Duration.checkSameFrame(self,rhs,func)
matplotlib.testing.jpl_units.Duration.frame(self)
matplotlib.testing.jpl_units.Duration.seconds(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/UnitDblConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.UnitDblConverter.n->int(x / np.pi * 2.0 + 0.25)
A:matplotlib.testing.jpl_units.UnitDblConverter.majfmt->matplotlib.testing.jpl_units.UnitDblFormatter(useOffset=False)
A:matplotlib.testing.jpl_units.UnitDblConverter.unit->UnitDblConverter.default_units(value, axis)
matplotlib.testing.jpl_units.UnitDblConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.default_units(value,axis)
matplotlib.testing.jpl_units.UnitDblConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.default_units(value,axis)
matplotlib.testing.jpl_units.UnitDblConverter.rad_fn(x,pos=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/__init__.py----------------------------------------
A:matplotlib.testing.jpl_units.__init__.mplU.registry[str]->StrConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[Epoch]->EpochConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[Duration]->EpochConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[UnitDbl]->UnitDblConverter()
A:matplotlib.testing.jpl_units.__init__.m->UnitDbl(1.0, 'm')
A:matplotlib.testing.jpl_units.__init__.km->UnitDbl(1.0, 'km')
A:matplotlib.testing.jpl_units.__init__.mile->UnitDbl(1.0, 'mile')
A:matplotlib.testing.jpl_units.__init__.deg->UnitDbl(1.0, 'deg')
A:matplotlib.testing.jpl_units.__init__.rad->UnitDbl(1.0, 'rad')
A:matplotlib.testing.jpl_units.__init__.sec->UnitDbl(1.0, 'sec')
A:matplotlib.testing.jpl_units.__init__.min->UnitDbl(1.0, 'min')
A:matplotlib.testing.jpl_units.__init__.hr->UnitDbl(1.0, 'hour')
A:matplotlib.testing.jpl_units.__init__.day->UnitDbl(24.0, 'hour')
matplotlib.testing.jpl_units.__init__.register()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/testing/jpl_units/UnitDbl.py----------------------------------------
A:matplotlib.testing.jpl_units.UnitDbl.data->matplotlib._api.check_getitem(self.allowed, units=units)
A:matplotlib.testing.jpl_units.UnitDbl.self._value->float(value * data[0])
A:matplotlib.testing.jpl_units.UnitDbl.__eq__->functools.partialmethod(_cmp, operator.eq)
A:matplotlib.testing.jpl_units.UnitDbl.__ne__->functools.partialmethod(_cmp, operator.ne)
A:matplotlib.testing.jpl_units.UnitDbl.__lt__->functools.partialmethod(_cmp, operator.lt)
A:matplotlib.testing.jpl_units.UnitDbl.__le__->functools.partialmethod(_cmp, operator.le)
A:matplotlib.testing.jpl_units.UnitDbl.__gt__->functools.partialmethod(_cmp, operator.gt)
A:matplotlib.testing.jpl_units.UnitDbl.__ge__->functools.partialmethod(_cmp, operator.ge)
A:matplotlib.testing.jpl_units.UnitDbl.__add__->functools.partialmethod(_binop_unit_unit, operator.add)
A:matplotlib.testing.jpl_units.UnitDbl.__sub__->functools.partialmethod(_binop_unit_unit, operator.sub)
A:matplotlib.testing.jpl_units.UnitDbl.__mul__->functools.partialmethod(_binop_unit_scalar, operator.mul)
A:matplotlib.testing.jpl_units.UnitDbl.__rmul__->functools.partialmethod(_binop_unit_scalar, operator.mul)
A:matplotlib.testing.jpl_units.UnitDbl.step->UnitDbl(1, start._units)
matplotlib.testing.jpl_units.UnitDbl(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__abs__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__bool__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__init__(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__neg__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__repr__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__str__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl._binop_unit_scalar(self,op,scalar)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl._binop_unit_unit(self,op,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl._cmp(self,op,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.checkSameUnits(self,rhs,func)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.convert(self,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.range(start,stop,step=None)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.type(self)
matplotlib.testing.jpl_units.UnitDbl.__abs__(self)
matplotlib.testing.jpl_units.UnitDbl.__bool__(self)
matplotlib.testing.jpl_units.UnitDbl.__neg__(self)
matplotlib.testing.jpl_units.UnitDbl.__repr__(self)
matplotlib.testing.jpl_units.UnitDbl.__str__(self)
matplotlib.testing.jpl_units.UnitDbl._binop_unit_scalar(self,op,scalar)
matplotlib.testing.jpl_units.UnitDbl._binop_unit_unit(self,op,rhs)
matplotlib.testing.jpl_units.UnitDbl._cmp(self,op,rhs)
matplotlib.testing.jpl_units.UnitDbl.checkSameUnits(self,rhs,func)
matplotlib.testing.jpl_units.UnitDbl.convert(self,units)
matplotlib.testing.jpl_units.UnitDbl.range(start,stop,step=None)
matplotlib.testing.jpl_units.UnitDbl.type(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/sphinxext/mathmpl.py----------------------------------------
A:matplotlib.sphinxext.mathmpl.i->rawtext.find('`')
A:matplotlib.sphinxext.mathmpl.node->latex_math(self.block_text)
A:matplotlib.sphinxext.mathmpl.node['fontset']->self.options.get('fontset', 'cm')
A:matplotlib.sphinxext.mathmpl.node['fontsize']->self.options.get('fontsize', setup.app.config.mathmpl_fontsize)
A:matplotlib.sphinxext.mathmpl.latex->''.join(self.content)
A:matplotlib.sphinxext.mathmpl.depth->latex2png(latex, dest, fontset, fontsize=fontsize)
A:matplotlib.sphinxext.mathmpl.inline->isinstance(node.parent, nodes.TextElement)
A:matplotlib.sphinxext.mathmpl.name->'math-{}'.format(hashlib.md5(f'{latex}{fontset}{fontsize}'.encode()).hexdigest()[-10:])
A:matplotlib.sphinxext.mathmpl.destdir->Path(setup.app.builder.outdir, '_images', 'mathmpl')
matplotlib.sphinxext.mathmpl.MathDirective(Directive)
matplotlib.sphinxext.mathmpl.MathDirective.run(self)
matplotlib.sphinxext.mathmpl._config_inited(app,config)
matplotlib.sphinxext.mathmpl.fontset_choice(arg)
matplotlib.sphinxext.mathmpl.latex2html(node,source)
matplotlib.sphinxext.mathmpl.latex2png(latex,filename,fontset='cm',fontsize=10,dpi=100)
matplotlib.sphinxext.mathmpl.latex_math(nodes.General,nodes.Element)
matplotlib.sphinxext.mathmpl.math_role(role,rawtext,text,lineno,inliner,options={},content=[])
matplotlib.sphinxext.mathmpl.setup(app)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/sphinxext/plot_directive.py----------------------------------------
A:matplotlib.sphinxext.plot_directive.sectname->c.astext()
A:matplotlib.sphinxext.plot_directive.src->matplotlib.cbook._get_data_path('plot_directive/plot_directive.css')
A:matplotlib.sphinxext.plot_directive.r->re.compile('^\\s*>>>', re.M)
A:matplotlib.sphinxext.plot_directive.m->re.compile('^\\s*>>>', re.M).search(text)
A:matplotlib.sphinxext.plot_directive.is_doctest->contains_doctest(code)
A:matplotlib.sphinxext.plot_directive.plot_context->dict()
A:matplotlib.sphinxext.plot_directive.pwd->os.getcwd()
A:matplotlib.sphinxext.plot_directive.dirname->os.path.abspath(os.path.dirname(code_path))
A:matplotlib.sphinxext.plot_directive.(suffix, dpi)->fmt.split(':')
A:matplotlib.sphinxext.plot_directive.formats->get_plot_formats(config)
A:matplotlib.sphinxext.plot_directive.(is_doctest, code_pieces)->_split_code_at_show(code, function_name)
A:matplotlib.sphinxext.plot_directive.img->ImageFile('%s_%02d_%02d' % (output_base, i, j), output_dir)
A:matplotlib.sphinxext.plot_directive.fig_managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.sphinxext.plot_directive.rst_dir->os.path.dirname(rst_file)
A:matplotlib.sphinxext.plot_directive.source_file_name->os.path.join(setup.confdir, config.plot_basedir, directives.uri(arguments[0]))
A:matplotlib.sphinxext.plot_directive.caption->options.get('caption', '')
A:matplotlib.sphinxext.plot_directive.code->textwrap.dedent('\n'.join(map(str, content)))
A:matplotlib.sphinxext.plot_directive.output_base->output_base.replace('.', '-').replace('.', '-')
A:matplotlib.sphinxext.plot_directive.(base, ext)->os.path.splitext(os.path.basename(source_file_name))
A:matplotlib.sphinxext.plot_directive.(base, source_ext)->os.path.splitext(output_base)
A:matplotlib.sphinxext.plot_directive.source_rel_name->relpath(source_file_name, setup.confdir)
A:matplotlib.sphinxext.plot_directive.source_rel_dir->os.path.dirname(source_rel_name).lstrip(os.path.sep)
A:matplotlib.sphinxext.plot_directive.build_dir->os.path.normpath(build_dir)
A:matplotlib.sphinxext.plot_directive.build_dir_link->relpath(build_dir, rst_dir).replace(os.path.sep, '/')
A:matplotlib.sphinxext.plot_directive.results->render_figures(code=code, code_path=source_file_name, output_dir=build_dir, output_base=output_base, context=keep_context, function_name=function_name, config=config, context_reset=context_opt == 'reset', close_figs=context_opt == 'close-figs', code_includes=source_file_includes)
A:matplotlib.sphinxext.plot_directive.sm->reporter.system_message(2, 'Exception occurred in plotting {}\n from {}:\n{}'.format(output_base, source_file_name, err), line=lineno)
A:matplotlib.sphinxext.plot_directive.source_code->'\n'.join(lines)
A:matplotlib.sphinxext.plot_directive.result->jinja2.Template(config.plot_template or TEMPLATE).render(default_fmt=default_fmt, build_dir=build_dir_link, src_name=src_name, multi_image=len(images) > 1, options=opts, images=images, source_code=source_code, html_show_formats=config.plot_html_show_formats and len(images), caption=caption)
matplotlib.sphinxext.plot_directive.ImageFile(self,basename,dirname)
matplotlib.sphinxext.plot_directive.ImageFile.__init__(self,basename,dirname)
matplotlib.sphinxext.plot_directive.ImageFile.filename(self,format)
matplotlib.sphinxext.plot_directive.ImageFile.filenames(self)
matplotlib.sphinxext.plot_directive.PlotDirective(Directive)
matplotlib.sphinxext.plot_directive.PlotDirective.run(self)
matplotlib.sphinxext.plot_directive.PlotError(RuntimeError)
matplotlib.sphinxext.plot_directive._copy_css_file(app,exc)
matplotlib.sphinxext.plot_directive._option_boolean(arg)
matplotlib.sphinxext.plot_directive._option_context(arg)
matplotlib.sphinxext.plot_directive._option_format(arg)
matplotlib.sphinxext.plot_directive._run_code(code,code_path,ns=None,function_name=None)
matplotlib.sphinxext.plot_directive._split_code_at_show(text,function_name)
matplotlib.sphinxext.plot_directive.clear_state(plot_rcparams,close=True)
matplotlib.sphinxext.plot_directive.contains_doctest(text)
matplotlib.sphinxext.plot_directive.get_plot_formats(config)
matplotlib.sphinxext.plot_directive.mark_plot_labels(app,document)
matplotlib.sphinxext.plot_directive.out_of_date(original,derived,includes=None)
matplotlib.sphinxext.plot_directive.render_figures(code,code_path,output_dir,output_base,context,function_name,config,context_reset=False,close_figs=False,code_includes=None)
matplotlib.sphinxext.plot_directive.run(arguments,content,options,state_machine,state,lineno)
matplotlib.sphinxext.plot_directive.setup(app)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/sphinxext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/style/core.py----------------------------------------
A:matplotlib.style.core._log->logging.getLogger(__name__)
A:matplotlib.style.core.BASE_LIBRARY_PATH->os.path.join(mpl.get_data_path(), 'stylelib')
A:matplotlib.style.core.style->_rc_params_in_file(style)
A:matplotlib.style.core.(pkg, _, name)->_rc_params_in_file(style).rpartition('.')
A:matplotlib.style.core.styles->dict()
A:matplotlib.style.core.styles[path.stem]->_rc_params_in_file(path)
A:matplotlib.style.core._base_library->read_style_directory(BASE_LIBRARY_PATH)
A:matplotlib.style.core.library->_StyleLibrary()
A:matplotlib.style.core.available[:]->sorted(library.keys())
matplotlib.style.context(style,after_reset=False)
matplotlib.style.core._StyleLibrary(dict)
matplotlib.style.core._StyleLibrary.__getitem__(self,key)
matplotlib.style.core.context(style,after_reset=False)
matplotlib.style.core.read_style_directory(style_dir)
matplotlib.style.core.reload_library()
matplotlib.style.core.update_nested_dict(main_dict,new_dict)
matplotlib.style.core.update_user_library(library)
matplotlib.style.core.use(style)
matplotlib.style.reload_library()
matplotlib.style.use(style)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/style/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/trifinder.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/triplot.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/trirefine.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_triplot.py----------------------------------------
A:matplotlib.tri._triplot.(tri, args, kwargs)->matplotlib.tri._triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri._triplot.(linestyle, marker, color)->matplotlib.axes._base._process_plot_format(fmt)
A:matplotlib.tri._triplot.kw->matplotlib.cbook.normalize_kwargs(kwargs, mlines.Line2D)
A:matplotlib.tri._triplot.tri_lines_x->numpy.insert(x[edges], 2, np.nan, axis=1)
A:matplotlib.tri._triplot.tri_lines_y->numpy.insert(y[edges], 2, np.nan, axis=1)
A:matplotlib.tri._triplot.tri_lines->ax.plot([], [], **kw_lines)
A:matplotlib.tri._triplot.tri_markers->ax.plot([], [], **kw_markers)
matplotlib.tri._triplot.triplot(ax,*args,**kwargs)
matplotlib.tri.triplot(ax,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/triinterpolate.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_tricontour.py----------------------------------------
A:matplotlib.tri._tricontour.(tri, z)->self._contour_args(args, kwargs)
A:matplotlib.tri._tricontour.C->matplotlib._tri.TriContourGenerator(tri.get_cpp_triangulation(), z)
A:matplotlib.tri._tricontour.(tri, args, kwargs)->matplotlib.tri._triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri._tricontour.z->numpy.ma.masked_invalid(z, copy=False)
A:matplotlib.tri._tricontour.self.zmax->float(z_check.max())
A:matplotlib.tri._tricontour.self.zmin->float(z_check.min())
matplotlib.tri.TriContourSet(self,ax,*args,**kwargs)
matplotlib.tri.TriContourSet._contour_args(self,args,kwargs)
matplotlib.tri.TriContourSet._process_args(self,*args,**kwargs)
matplotlib.tri._tricontour.TriContourSet(self,ax,*args,**kwargs)
matplotlib.tri._tricontour.TriContourSet.__init__(self,ax,*args,**kwargs)
matplotlib.tri._tricontour.TriContourSet._contour_args(self,args,kwargs)
matplotlib.tri._tricontour.TriContourSet._process_args(self,*args,**kwargs)
matplotlib.tri._tricontour.tricontour(ax,*args,**kwargs)
matplotlib.tri._tricontour.tricontourf(ax,*args,**kwargs)
matplotlib.tri.tricontour(ax,*args,**kwargs)
matplotlib.tri.tricontourf(ax,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_triinterpolate.py----------------------------------------
A:matplotlib.tri._triinterpolate.self._z->numpy.asarray(z)
A:matplotlib.tri._triinterpolate.x->numpy.zeros(n)
A:matplotlib.tri._triinterpolate.y->numpy.ravel(y)
A:matplotlib.tri._triinterpolate.size_ret->numpy.size(x_scaled)
A:matplotlib.tri._triinterpolate.tri_index->numpy.ravel(tri_index)
A:matplotlib.tri._triinterpolate.ret_loc->numpy.empty(size_ret, dtype=np.float64)
A:matplotlib.tri._triinterpolate.self._plane_coefficients->self._triangulation.calculate_plane_coefficients(self._z)
A:matplotlib.tri._triinterpolate.tri_analyzer->TriAnalyzer(self._triangulation)
A:matplotlib.tri._triinterpolate.(compressed_triangles, compressed_x, compressed_y, tri_renum, node_renum)->TriAnalyzer(self._triangulation)._get_compressed_triangulation()
A:matplotlib.tri._triinterpolate.self._unit_x->numpy.ptp(compressed_x)
A:matplotlib.tri._triinterpolate.self._unit_y->numpy.ptp(compressed_y)
A:matplotlib.tri._triinterpolate.self._pts->numpy.column_stack([compressed_x / self._unit_x, compressed_y / self._unit_y])
A:matplotlib.tri._triinterpolate.self._eccs->self._compute_tri_eccentricities(self._tris_pts)
A:matplotlib.tri._triinterpolate.self._dof->self._compute_dof(kind, dz=dz)
A:matplotlib.tri._triinterpolate.self._ReferenceElement->_ReducedHCT_Element()
A:matplotlib.tri._triinterpolate.alpha->numpy.expand_dims(alpha, 2)
A:matplotlib.tri._triinterpolate.dof->numpy.zeros([npt, 9], dtype=np.float64)
A:matplotlib.tri._triinterpolate.J->CubicTriInterpolator._get_jacobian(self._tris_pts)
A:matplotlib.tri._triinterpolate.dzdx->self._ReferenceElement.get_function_derivatives(alpha, J, ecc, dof)
A:matplotlib.tri._triinterpolate.TE->_DOF_estimator_min_E(self)
A:matplotlib.tri._triinterpolate.abT->numpy.stack([a, b], axis=-1)
A:matplotlib.tri._triinterpolate.ab->_transpose_vectorized(abT)
A:matplotlib.tri._triinterpolate.metric_inv->_pseudo_inv22sym_vectorized(metric)
A:matplotlib.tri._triinterpolate.a->numpy.expand_dims(tris_pts[:, 2, :] - tris_pts[:, 1, :], axis=2)
A:matplotlib.tri._triinterpolate.b->numpy.expand_dims(tris_pts[:, 0, :] - tris_pts[:, 2, :], axis=2)
A:matplotlib.tri._triinterpolate.c->numpy.expand_dims(tris_pts[:, 1, :] - tris_pts[:, 0, :], axis=2)
A:matplotlib.tri._triinterpolate.M->numpy.array([[0.0, 0.0, 0.0, 4.5, 4.5, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.5, 1.25, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 1.25, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 1.0, 0.0, -1.5, 0.0, 3.0, 3.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, -0.25, 0.25, 0.0, 1.0, 0.0, 0.0, 0.5], [0.25, 0.0, 0.0, -0.5, -0.25, 1.0, 0.0, 0.0, 0.0, 1.0], [0.5, 0.0, 1.0, 0.0, -1.5, 0.0, 0.0, 3.0, 3.0, 3.0], [0.25, 0.0, 0.0, -0.25, -0.5, 0.0, 0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, 0.25, -0.25, 0.0, 0.0, 1.0, 0.0, 0.5]])
A:matplotlib.tri._triinterpolate.M0->numpy.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, 0.0, 0.0, 1.5, 1.5, 0.0, 0.0, 0.0, 0.0, -3.0], [-0.5, 0.0, 0.0, 0.75, 0.75, 0.0, 0.0, 0.0, 0.0, -1.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, -1.5, -1.5, 0.0, 0.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.0, 0.0, -0.75, -0.75, 0.0, 0.0, 0.0, 0.0, 1.5]])
A:matplotlib.tri._triinterpolate.M1->numpy.array([[-0.5, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.0, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.25, 0.0, 0.0, -0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:matplotlib.tri._triinterpolate.M2->numpy.array([[0.5, 0.0, 0.0, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.25, 0.0, 0.0, 0.0, -0.75, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.5, 0.0, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.0, 0.75, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:matplotlib.tri._triinterpolate.rotate_dV->numpy.array([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [-1.0, -1.0], [-1.0, -1.0], [1.0, 0.0]])
A:matplotlib.tri._triinterpolate.rotate_d2V->numpy.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [1.0, 1.0, 1.0], [0.0, -2.0, -1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 0.0], [-2.0, 0.0, -1.0]])
A:matplotlib.tri._triinterpolate.gauss_pts->numpy.array([[13.0 / 18.0, 4.0 / 18.0, 1.0 / 18.0], [4.0 / 18.0, 13.0 / 18.0, 1.0 / 18.0], [7.0 / 18.0, 7.0 / 18.0, 4.0 / 18.0], [1.0 / 18.0, 13.0 / 18.0, 4.0 / 18.0], [1.0 / 18.0, 4.0 / 18.0, 13.0 / 18.0], [4.0 / 18.0, 7.0 / 18.0, 7.0 / 18.0], [4.0 / 18.0, 1.0 / 18.0, 13.0 / 18.0], [13.0 / 18.0, 1.0 / 18.0, 4.0 / 18.0], [7.0 / 18.0, 4.0 / 18.0, 7.0 / 18.0]], dtype=np.float64)
A:matplotlib.tri._triinterpolate.E->_roll_vectorized(ecc, -subtri, axis=0)
A:matplotlib.tri._triinterpolate.J0_to_J1->numpy.array([[-1.0, 1.0], [-1.0, 0.0]])
A:matplotlib.tri._triinterpolate.J0_to_J2->numpy.array([[0.0, -1.0], [1.0, -1.0]])
A:matplotlib.tri._triinterpolate.ksi->_roll_vectorized(alpha, -subtri, axis=0)
A:matplotlib.tri._triinterpolate.V->_to_matrix_vectorized([[x_sq * x], [y_sq * y], [z_sq * z], [x_sq * z], [x_sq * y], [y_sq * x], [y_sq * z], [z_sq * y], [z_sq * x], [x * y * z]])
A:matplotlib.tri._triinterpolate.s->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri._triinterpolate.dV->_to_matrix_vectorized([[-3.0 * x_sq, -3.0 * x_sq], [3.0 * y_sq, 0.0], [0.0, 3.0 * z_sq], [-2.0 * x * z, -2.0 * x * z + x_sq], [-2.0 * x * y + x_sq, -2.0 * x * y], [2.0 * x * y - y_sq, -y_sq], [2.0 * y * z, y_sq], [z_sq, 2.0 * y * z], [-z_sq, 2.0 * x * z - z_sq], [x * z - y * z, x * y - y * z]])
A:matplotlib.tri._triinterpolate.dsdksi->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri._triinterpolate.J_inv->_safe_inv22_vectorized(J)
A:matplotlib.tri._triinterpolate.d2sdksi2->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri._triinterpolate.H_rot->_to_matrix_vectorized([[Ji00 * Ji00, Ji10 * Ji10, Ji00 * Ji10], [Ji01 * Ji01, Ji11 * Ji11, Ji01 * Ji11], [2 * Ji00 * Ji01, 2 * Ji11 * Ji10, Ji00 * Ji11 + Ji10 * Ji01]])
A:matplotlib.tri._triinterpolate.d2V->_to_matrix_vectorized([[6.0 * x, 6.0 * x, 6.0 * x], [6.0 * y, 0.0, 0.0], [0.0, 6.0 * z, 0.0], [2.0 * z, 2.0 * z - 4.0 * x, 2.0 * z - 2.0 * x], [2.0 * y - 4.0 * x, 2.0 * y, 2.0 * y - 2.0 * x], [2.0 * x - 4.0 * y, 0.0, -2.0 * y], [2.0 * z, 0.0, 2.0 * y], [0.0, 2.0 * y, 2.0 * z], [0.0, 2.0 * x - 4.0 * z, -2.0 * z], [-2.0 * z, -2.0 * y, x - y - z]])
A:matplotlib.tri._triinterpolate.n->numpy.size(ecc, 0)
A:matplotlib.tri._triinterpolate.DOF_rot->numpy.zeros([n, 9, 9], dtype=np.float64)
A:matplotlib.tri._triinterpolate.(H_rot, area)->self.get_Hrot_from_J(J, return_area=True)
A:matplotlib.tri._triinterpolate.K->numpy.zeros([n, 9, 9], dtype=np.float64)
A:matplotlib.tri._triinterpolate.d2Skdksi2->self.get_d2Sidksij2(alpha, ecc)
A:matplotlib.tri._triinterpolate.ntri->numpy.size(ecc, 0)
A:matplotlib.tri._triinterpolate.vec_range->numpy.arange(ntri, dtype=np.int32)
A:matplotlib.tri._triinterpolate.c_indices->numpy.full(ntri, -1, dtype=np.int32)
A:matplotlib.tri._triinterpolate.f_dof_indices->_to_matrix_vectorized([[c_indices, triangles[:, 0] * 2, triangles[:, 0] * 2 + 1, c_indices, triangles[:, 1] * 2, triangles[:, 1] * 2 + 1, c_indices, triangles[:, 2] * 2, triangles[:, 2] * 2 + 1]])
A:matplotlib.tri._triinterpolate.expand_indices->numpy.ones([ntri, 9, 1], dtype=np.int32)
A:matplotlib.tri._triinterpolate.f_row_indices->_transpose_vectorized(expand_indices @ f_dof_indices)
A:matplotlib.tri._triinterpolate.K_elem->self.get_bending_matrices(J, ecc)
A:matplotlib.tri._triinterpolate.Kff_vals->numpy.ravel(K_elem[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri._triinterpolate.Kff_rows->numpy.ravel(f_row_indices[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri._triinterpolate.Kff_cols->numpy.ravel(f_col_indices[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri._triinterpolate.Uc_elem->numpy.expand_dims(Uc, axis=2)
A:matplotlib.tri._triinterpolate.Ff->numpy.bincount(np.ravel(Ff_indices), weights=np.ravel(Ff_elem))
A:matplotlib.tri._triinterpolate.self.dz->self.compute_dz(**kwargs)
A:matplotlib.tri._triinterpolate.tri_dof->self.get_dof_vec(tri_z, tri_dz, J)
A:matplotlib.tri._triinterpolate.dfdksi->_to_matrix_vectorized([[col0[:, 0, 0], col1[:, 0, 0], col2[:, 0, 0]], [col0[:, 1, 0], col1[:, 1, 0], col2[:, 1, 0]]])
A:matplotlib.tri._triinterpolate.el_geom_w->self.compute_geom_weights()
A:matplotlib.tri._triinterpolate.el_geom_grad->self.compute_geom_grads()
A:matplotlib.tri._triinterpolate.w_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(el_geom_w))
A:matplotlib.tri._triinterpolate.dfx_el_w->numpy.empty_like(el_geom_w)
A:matplotlib.tri._triinterpolate.dfy_el_w->numpy.empty_like(el_geom_w)
A:matplotlib.tri._triinterpolate.dfx_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(dfx_el_w))
A:matplotlib.tri._triinterpolate.dfy_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(dfy_el_w))
A:matplotlib.tri._triinterpolate.weights->numpy.zeros([np.size(self._triangles, 0), 3])
A:matplotlib.tri._triinterpolate.alpha1->numpy.arctan2(p1[:, 1] - p0[:, 1], p1[:, 0] - p0[:, 0])
A:matplotlib.tri._triinterpolate.alpha2->numpy.arctan2(p2[:, 1] - p0[:, 1], p2[:, 0] - p0[:, 0])
A:matplotlib.tri._triinterpolate.angle->numpy.abs((alpha2 - alpha1) / np.pi % 1)
A:matplotlib.tri._triinterpolate.dM->numpy.dstack([dM1, dM2])
A:matplotlib.tri._triinterpolate.dM_inv->_safe_inv22_vectorized(dM)
A:matplotlib.tri._triinterpolate.df->numpy.empty_like(dZ)
A:matplotlib.tri._triinterpolate.dz_init->super().compute_dz()
A:matplotlib.tri._triinterpolate.Uf0->numpy.ravel(dz_init)
A:matplotlib.tri._triinterpolate.reference_element->_ReducedHCT_Element()
A:matplotlib.tri._triinterpolate.(Kff_rows, Kff_cols, Kff_vals, Ff)->_ReducedHCT_Element().get_Kff_and_Ff(J, eccs, triangles, Uc)
A:matplotlib.tri._triinterpolate.Kff_coo->_Sparse_Matrix_coo(Kff_vals, Kff_rows, Kff_cols, shape=(n_dof, n_dof))
A:matplotlib.tri._triinterpolate.(Uf, err)->_cg(A=Kff_coo, b=Ff, x0=Uf0, tol=tol)
A:matplotlib.tri._triinterpolate.err0->numpy.linalg.norm(Kff_coo.dot(Uf0) - Ff)
A:matplotlib.tri._triinterpolate.dz->numpy.empty([self._pts.shape[0], 2], dtype=np.float64)
A:matplotlib.tri._triinterpolate.self.vals->numpy.bincount(indices, weights=self.vals)
A:matplotlib.tri._triinterpolate.self.rows->numpy.asarray(rows, dtype=np.int32)
A:matplotlib.tri._triinterpolate.self.cols->numpy.asarray(cols, dtype=np.int32)
A:matplotlib.tri._triinterpolate.(_, unique, indices)->numpy.unique(self.m * self.rows + self.cols, return_index=True, return_inverse=True)
A:matplotlib.tri._triinterpolate.ret->numpy.zeros([self.n, self.m], dtype=np.float64)
A:matplotlib.tri._triinterpolate.diag->numpy.zeros(min(self.n, self.n), dtype=np.float64)
A:matplotlib.tri._triinterpolate.b_norm->numpy.linalg.norm(b)
A:matplotlib.tri._triinterpolate.kvec->numpy.maximum(kvec, 1e-06)
A:matplotlib.tri._triinterpolate.p->numpy.zeros(n)
A:matplotlib.tri._triinterpolate.rho->numpy.dot(r, w)
A:matplotlib.tri._triinterpolate.z->A.dot(p)
A:matplotlib.tri._triinterpolate.err->numpy.linalg.norm(A.dot(x) - b)
A:matplotlib.tri._triinterpolate.M_inv->numpy.empty_like(M)
A:matplotlib.tri._triinterpolate.delta_inv->numpy.zeros(M.shape[0])
A:matplotlib.tri._triinterpolate.vec_indices->numpy.arange(sh[0], dtype=np.int32)
A:matplotlib.tri._triinterpolate.M_roll->numpy.empty_like(M)
A:matplotlib.tri._triinterpolate.c_vec->numpy.asarray([len(item) for item in M])
A:matplotlib.tri._triinterpolate.r->len(M)
A:matplotlib.tri._triinterpolate.M00->numpy.asarray(M[0][0])
A:matplotlib.tri._triinterpolate.M_ret->numpy.empty(sh, dtype=dt)
A:matplotlib.tri._triinterpolate.M_ret[:, irow, icol]->numpy.asarray(M[irow][icol])
A:matplotlib.tri._triinterpolate.M_res->numpy.empty(sh, dtype=dt)
matplotlib.tri.CubicTriInterpolator(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri.CubicTriInterpolator._compute_dof(self,kind,dz=None)
matplotlib.tri.CubicTriInterpolator._compute_tri_eccentricities(tris_pts)
matplotlib.tri.CubicTriInterpolator._get_alpha_vec(x,y,tris_pts)
matplotlib.tri.CubicTriInterpolator._get_jacobian(tris_pts)
matplotlib.tri.CubicTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.CubicTriInterpolator.gradient(self,x,y)
matplotlib.tri.LinearTriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.LinearTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.LinearTriInterpolator.gradient(self,x,y)
matplotlib.tri.TriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.TriInterpolator._interpolate_multikeys(self,x,y,tri_index=None,return_keys=('z',))
matplotlib.tri.TriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri._triinterpolate.CubicTriInterpolator(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri._triinterpolate.CubicTriInterpolator.__init__(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri._triinterpolate.CubicTriInterpolator._compute_dof(self,kind,dz=None)
matplotlib.tri._triinterpolate.CubicTriInterpolator._compute_tri_eccentricities(tris_pts)
matplotlib.tri._triinterpolate.CubicTriInterpolator._get_alpha_vec(x,y,tris_pts)
matplotlib.tri._triinterpolate.CubicTriInterpolator._get_jacobian(tris_pts)
matplotlib.tri._triinterpolate.CubicTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri._triinterpolate.CubicTriInterpolator.gradient(self,x,y)
matplotlib.tri._triinterpolate.LinearTriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri._triinterpolate.LinearTriInterpolator.__init__(self,triangulation,z,trifinder=None)
matplotlib.tri._triinterpolate.LinearTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri._triinterpolate.LinearTriInterpolator.gradient(self,x,y)
matplotlib.tri._triinterpolate.TriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri._triinterpolate.TriInterpolator.__init__(self,triangulation,z,trifinder=None)
matplotlib.tri._triinterpolate.TriInterpolator._interpolate_multikeys(self,x,y,tri_index=None,return_keys=('z',))
matplotlib.tri._triinterpolate.TriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri._triinterpolate._DOF_estimator(self,interpolator,**kwargs)
matplotlib.tri._triinterpolate._DOF_estimator.__init__(self,interpolator,**kwargs)
matplotlib.tri._triinterpolate._DOF_estimator.compute_dof_from_df(self)
matplotlib.tri._triinterpolate._DOF_estimator.compute_dz(self,**kwargs)
matplotlib.tri._triinterpolate._DOF_estimator.get_dof_vec(tri_z,tri_dz,J)
matplotlib.tri._triinterpolate._DOF_estimator_geom(_DOF_estimator)
matplotlib.tri._triinterpolate._DOF_estimator_geom.compute_dz(self)
matplotlib.tri._triinterpolate._DOF_estimator_geom.compute_geom_grads(self)
matplotlib.tri._triinterpolate._DOF_estimator_geom.compute_geom_weights(self)
matplotlib.tri._triinterpolate._DOF_estimator_min_E(self,Interpolator)
matplotlib.tri._triinterpolate._DOF_estimator_min_E.__init__(self,Interpolator)
matplotlib.tri._triinterpolate._DOF_estimator_min_E.compute_dz(self)
matplotlib.tri._triinterpolate._DOF_estimator_user(_DOF_estimator)
matplotlib.tri._triinterpolate._DOF_estimator_user.compute_dz(self,dz)
matplotlib.tri._triinterpolate._ReducedHCT_Element
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_Hrot_from_J(self,J,return_area=False)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_Kff_and_Ff(self,J,ecc,triangles,Uc)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_bending_matrices(self,J,ecc)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_d2Sidksij2(self,alpha,ecc)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_function_derivatives(self,alpha,J,ecc,dofs)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_function_hessians(self,alpha,J,ecc,dofs)
matplotlib.tri._triinterpolate._ReducedHCT_Element.get_function_values(self,alpha,ecc,dofs)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo(self,vals,rows,cols,shape)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.__init__(self,vals,rows,cols,shape)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.__str__(self)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.compress_csc(self)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.compress_csr(self)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.diag(self)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.dot(self,V)
matplotlib.tri._triinterpolate._Sparse_Matrix_coo.to_dense(self)
matplotlib.tri._triinterpolate._cg(A,b,x0=None,tol=1e-10,maxiter=1000)
matplotlib.tri._triinterpolate._extract_submatrices(M,block_indices,block_size,axis)
matplotlib.tri._triinterpolate._pseudo_inv22sym_vectorized(M)
matplotlib.tri._triinterpolate._roll_vectorized(M,roll_indices,axis)
matplotlib.tri._triinterpolate._safe_inv22_vectorized(M)
matplotlib.tri._triinterpolate._scalar_vectorized(scalar,M)
matplotlib.tri._triinterpolate._to_matrix_vectorized(M)
matplotlib.tri._triinterpolate._transpose_vectorized(M)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_trifinder.py----------------------------------------
A:matplotlib.tri._trifinder.self._cpp_trifinder->matplotlib._tri.TrapezoidMapTriFinder(triangulation.get_cpp_triangulation())
A:matplotlib.tri._trifinder.x->numpy.asarray(x, dtype=np.float64)
A:matplotlib.tri._trifinder.y->numpy.asarray(y, dtype=np.float64)
A:matplotlib.tri._trifinder.indices->self._cpp_trifinder.find_many(x.ravel(), y.ravel()).reshape(x.shape)
matplotlib.tri.TrapezoidMapTriFinder(self,triangulation)
matplotlib.tri.TrapezoidMapTriFinder._get_tree_stats(self)
matplotlib.tri.TrapezoidMapTriFinder._initialize(self)
matplotlib.tri.TrapezoidMapTriFinder._print_tree(self)
matplotlib.tri.TriFinder(self,triangulation)
matplotlib.tri._trifinder.TrapezoidMapTriFinder(self,triangulation)
matplotlib.tri._trifinder.TrapezoidMapTriFinder.__init__(self,triangulation)
matplotlib.tri._trifinder.TrapezoidMapTriFinder._get_tree_stats(self)
matplotlib.tri._trifinder.TrapezoidMapTriFinder._initialize(self)
matplotlib.tri._trifinder.TrapezoidMapTriFinder._print_tree(self)
matplotlib.tri._trifinder.TriFinder(self,triangulation)
matplotlib.tri._trifinder.TriFinder.__init__(self,triangulation)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/triangulation.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_triangulation.py----------------------------------------
A:matplotlib.tri._triangulation.self.x->numpy.asarray(x, dtype=np.float64)
A:matplotlib.tri._triangulation.self.y->numpy.asarray(y, dtype=np.float64)
A:matplotlib.tri._triangulation.(self.triangles, self._neighbors)->matplotlib._qhull.delaunay(x, y, sys.flags.verbose)
A:matplotlib.tri._triangulation.self.triangles->numpy.array(triangles, dtype=np.int32, order='C')
A:matplotlib.tri._triangulation.self._edges->self.get_cpp_triangulation().get_edges()
A:matplotlib.tri._triangulation.self._cpp_triangulation->matplotlib._tri.Triangulation(self.x, self.y, self.triangles, self.mask if self.mask is not None else (), self._edges if self._edges is not None else (), self._neighbors if self._neighbors is not None else (), not self.is_delaunay)
A:matplotlib.tri._triangulation.(x, y, triangles, mask, args, kwargs)->Triangulation._extract_triangulation_params(args, kwargs)
A:matplotlib.tri._triangulation.triangulation->Triangulation(x, y, triangles, mask)
A:matplotlib.tri._triangulation.triangles->numpy.asarray(triangles, dtype=np.int32)
A:matplotlib.tri._triangulation.mask->kwargs.pop('mask', None)
A:matplotlib.tri._triangulation.self._trifinder->TrapezoidMapTriFinder(self)
A:matplotlib.tri._triangulation.self._neighbors->self.get_cpp_triangulation().get_neighbors()
A:matplotlib.tri._triangulation.self.mask->numpy.asarray(mask, dtype=bool)
matplotlib.tri.Triangulation(self,x,y,triangles=None,mask=None)
matplotlib.tri.Triangulation._extract_triangulation_params(args,kwargs)
matplotlib.tri.Triangulation.calculate_plane_coefficients(self,z)
matplotlib.tri.Triangulation.edges(self)
matplotlib.tri.Triangulation.get_cpp_triangulation(self)
matplotlib.tri.Triangulation.get_from_args_and_kwargs(*args,**kwargs)
matplotlib.tri.Triangulation.get_masked_triangles(self)
matplotlib.tri.Triangulation.get_trifinder(self)
matplotlib.tri.Triangulation.neighbors(self)
matplotlib.tri.Triangulation.set_mask(self,mask)
matplotlib.tri._triangulation.Triangulation(self,x,y,triangles=None,mask=None)
matplotlib.tri._triangulation.Triangulation.__init__(self,x,y,triangles=None,mask=None)
matplotlib.tri._triangulation.Triangulation._extract_triangulation_params(args,kwargs)
matplotlib.tri._triangulation.Triangulation.calculate_plane_coefficients(self,z)
matplotlib.tri._triangulation.Triangulation.edges(self)
matplotlib.tri._triangulation.Triangulation.get_cpp_triangulation(self)
matplotlib.tri._triangulation.Triangulation.get_from_args_and_kwargs(*args,**kwargs)
matplotlib.tri._triangulation.Triangulation.get_masked_triangles(self)
matplotlib.tri._triangulation.Triangulation.get_trifinder(self)
matplotlib.tri._triangulation.Triangulation.neighbors(self)
matplotlib.tri._triangulation.Triangulation.set_mask(self,mask)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/tripcolor.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_trirefine.py----------------------------------------
A:matplotlib.tri._trirefine.ancestors->numpy.asarray(ancestors)
A:matplotlib.tri._trirefine.(refi_triangulation, ancestors)->self._refine_triangulation_once(refi_triangulation, ancestors)
A:matplotlib.tri._trirefine.found_index->numpy.full(refi_npts, -1, dtype=np.int32)
A:matplotlib.tri._trirefine.found_index[refi_triangles]->numpy.repeat(ancestors, 3).reshape(-1, 3)
A:matplotlib.tri._trirefine.found_index[refi_triangles[ancestor_mask, :]]->numpy.repeat(ancestors[ancestor_mask], 3).reshape(-1, 3)
A:matplotlib.tri._trirefine.found_index[refi_triangles[~ancestor_mask, :]]->numpy.repeat(ancestors[~ancestor_mask], 3).reshape(-1, 3)
A:matplotlib.tri._trirefine.interp->matplotlib.tri.CubicTriInterpolator(self._triangulation, z)
A:matplotlib.tri._trirefine.(refi_tri, found_index)->self.refine_triangulation(subdiv=subdiv, return_tri_index=True)
A:matplotlib.tri._trirefine.borders->numpy.sum(neighbors == -1)
A:matplotlib.tri._trirefine.refi_x->numpy.zeros(refi_npts)
A:matplotlib.tri._trirefine.refi_y->numpy.zeros(refi_npts)
A:matplotlib.tri._trirefine.edge_elems->numpy.tile(np.arange(ntri, dtype=np.int32), 3)
A:matplotlib.tri._trirefine.edge_apexes->numpy.repeat(np.arange(3, dtype=np.int32), ntri)
A:matplotlib.tri._trirefine.new_pt_midside->numpy.empty([ntri, 3], dtype=np.int32)
A:matplotlib.tri._trirefine.n_masters_loc->numpy.sum(mask_st_loc)
A:matplotlib.tri._trirefine.mask_slaves->numpy.logical_not(mask_masters)
A:matplotlib.tri._trirefine.diff_table->numpy.abs(neighbors[slaves_masters, :] - np.outer(slaves, np.ones(3, dtype=np.int32)))
A:matplotlib.tri._trirefine.slave_masters_apex->numpy.argmin(diff_table, axis=1)
A:matplotlib.tri._trirefine.child_triangles->numpy.empty([ntri * 4, 3], dtype=np.int32)
A:matplotlib.tri._trirefine.child_triangulation->Triangulation(refi_x, refi_y, child_triangles)
matplotlib.tri.TriRefiner(self,triangulation)
matplotlib.tri.UniformTriRefiner(self,triangulation)
matplotlib.tri.UniformTriRefiner._refine_triangulation_once(triangulation,ancestors=None)
matplotlib.tri.UniformTriRefiner.refine_field(self,z,triinterpolator=None,subdiv=3)
matplotlib.tri.UniformTriRefiner.refine_triangulation(self,return_tri_index=False,subdiv=3)
matplotlib.tri._trirefine.TriRefiner(self,triangulation)
matplotlib.tri._trirefine.TriRefiner.__init__(self,triangulation)
matplotlib.tri._trirefine.UniformTriRefiner(self,triangulation)
matplotlib.tri._trirefine.UniformTriRefiner.__init__(self,triangulation)
matplotlib.tri._trirefine.UniformTriRefiner._refine_triangulation_once(triangulation,ancestors=None)
matplotlib.tri._trirefine.UniformTriRefiner.refine_field(self,z,triinterpolator=None,subdiv=3)
matplotlib.tri._trirefine.UniformTriRefiner.refine_triangulation(self,return_tri_index=False,subdiv=3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/tricontour.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/tritools.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_tripcolor.py----------------------------------------
A:matplotlib.tri._tripcolor.(tri, args, kwargs)->matplotlib.tri._triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri._tripcolor.c->numpy.asarray(args[0])
A:matplotlib.tri._tripcolor.kwargs['linewidths']->kwargs.pop('linewidth')
A:matplotlib.tri._tripcolor.kwargs['edgecolors']->kwargs.pop('edgecolor')
A:matplotlib.tri._tripcolor.ec->kwargs.setdefault('edgecolors', edgecolors)
A:matplotlib.tri._tripcolor.kwargs['antialiaseds']->kwargs.pop('antialiased')
A:matplotlib.tri._tripcolor.collection->PolyCollection(verts, alpha=alpha, array=colors, cmap=cmap, norm=norm, **kwargs)
A:matplotlib.tri._tripcolor.maskedTris->tri.get_masked_triangles()
A:matplotlib.tri._tripcolor.verts->numpy.stack((tri.x[maskedTris], tri.y[maskedTris]), axis=-1)
A:matplotlib.tri._tripcolor.colors->point_colors[maskedTris].mean(axis=1)
A:matplotlib.tri._tripcolor.minx->tri.x.min()
A:matplotlib.tri._tripcolor.maxx->tri.x.max()
A:matplotlib.tri._tripcolor.miny->tri.y.min()
A:matplotlib.tri._tripcolor.maxy->tri.y.max()
matplotlib.tri._tripcolor.tripcolor(ax,*args,alpha=1.0,norm=None,cmap=None,vmin=None,vmax=None,shading='flat',facecolors=None,**kwargs)
matplotlib.tri.tripcolor(ax,*args,alpha=1.0,norm=None,cmap=None,vmin=None,vmax=None,shading='flat',facecolors=None,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/tri/_tritools.py----------------------------------------
A:matplotlib.tri._tritools.compressed_triangles->self._triangulation.get_masked_triangles()
A:matplotlib.tri._tritools.a->numpy.hypot(a[:, 0], a[:, 1])
A:matplotlib.tri._tritools.b->numpy.hypot(b[:, 0], b[:, 1])
A:matplotlib.tri._tritools.c->numpy.hypot(c[:, 0], c[:, 1])
A:matplotlib.tri._tritools.circum_radius->numpy.empty(ntri, dtype=np.float64)
A:matplotlib.tri._tritools.current_mask->numpy.zeros(ntri, dtype=bool)
A:matplotlib.tri._tritools.valid_neighbors->numpy.where(valid_neighbors == -1, -1, renum_neighbors[valid_neighbors])
A:matplotlib.tri._tritools.renum_neighbors->numpy.arange(ntri, dtype=np.int32)
A:matplotlib.tri._tritools.nadd->numpy.sum(added_mask)
A:matplotlib.tri._tritools.tri_renum->numpy.arange(ntri, dtype=np.int32)
A:matplotlib.tri._tritools.node_renum->self._total_to_compress_renum(valid_node)
A:matplotlib.tri._tritools.renum->numpy.full(np.size(valid), -1, dtype=np.int32)
A:matplotlib.tri._tritools.n_valid->numpy.sum(valid)
A:matplotlib.tri._tritools.renum[valid]->numpy.arange(n_valid, dtype=np.int32)
matplotlib.tri.TriAnalyzer(self,triangulation)
matplotlib.tri.TriAnalyzer._get_compressed_triangulation(self)
matplotlib.tri.TriAnalyzer._total_to_compress_renum(valid)
matplotlib.tri.TriAnalyzer.circle_ratios(self,rescale=True)
matplotlib.tri.TriAnalyzer.get_flat_tri_mask(self,min_circle_ratio=0.01,rescale=True)
matplotlib.tri.TriAnalyzer.scale_factors(self)
matplotlib.tri._tritools.TriAnalyzer(self,triangulation)
matplotlib.tri._tritools.TriAnalyzer.__init__(self,triangulation)
matplotlib.tri._tritools.TriAnalyzer._get_compressed_triangulation(self)
matplotlib.tri._tritools.TriAnalyzer._total_to_compress_renum(valid)
matplotlib.tri._tritools.TriAnalyzer.circle_ratios(self,rescale=True)
matplotlib.tri._tritools.TriAnalyzer.get_flat_tri_mask(self,min_circle_ratio=0.01,rescale=True)
matplotlib.tri._tritools.TriAnalyzer.scale_factors(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/axes/_axes.py----------------------------------------
A:matplotlib.axes._axes._log->logging.getLogger(__name__)
A:matplotlib.axes._axes.title->matplotlib._api.check_getitem(titles, loc=loc.lower())
A:matplotlib.axes._axes.(handles, labels)->matplotlib.legend._get_legend_handles_labels([self], legend_handler_map)
A:matplotlib.axes._axes.(handles, labels, extra_args, kwargs)->matplotlib.legend._parse_legend_args([self], *args, **kwargs)
A:matplotlib.axes._axes.self.legend_->matplotlib.legend.Legend(self, handles, labels, **kwargs)
A:matplotlib.axes._axes.inset_locator->_TransformedBoundsLocator(bounds, transform)
A:matplotlib.axes._axes.(projection_class, pkw)->self.figure._process_projection_requirements(bounds, **kwargs)
A:matplotlib.axes._axes.inset_ax->projection_class(self.figure, bounds, zorder=zorder, **pkw)
A:matplotlib.axes._axes.rectangle_patch->matplotlib.patches.Rectangle((x, y), width, height, facecolor=facecolor, edgecolor=edgecolor, alpha=alpha, zorder=zorder, transform=transform, **kwargs)
A:matplotlib.axes._axes.p->matplotlib.patches.Polygon(verts, **kwargs)
A:matplotlib.axes._axes.pos->projection_class(self.figure, bounds, zorder=zorder, **pkw).get_position()
A:matplotlib.axes._axes.bboxins->projection_class(self.figure, bounds, zorder=zorder, **pkw).get_position().transformed(self.figure.transSubfigure)
A:matplotlib.axes._axes.rectbbox->matplotlib.transforms.Bbox.from_bounds(*bounds).transformed(transform)
A:matplotlib.axes._axes.xlim->projection_class(self.figure, bounds, zorder=zorder, **pkw).get_xlim()
A:matplotlib.axes._axes.ylim->projection_class(self.figure, bounds, zorder=zorder, **pkw).get_ylim()
A:matplotlib.axes._axes.secondary_ax->SecondaryAxis(self, 'y', location, functions, **kwargs)
A:matplotlib.axes._axes.t->t._as_mpl_transform(self.axes)._as_mpl_transform(self.axes)
A:matplotlib.axes._axes.a->matplotlib.patches.FancyArrow(x, y, dx, dy, **kwargs)
A:matplotlib.axes._axes.(ymin, ymax)->matplotlib.transforms.nonsingular(ymin, ymax, expander=0.1)
A:matplotlib.axes._axes.(yy,)->self._process_unit_info([('y', y)], kwargs)
A:matplotlib.axes._axes.trans->getattr(self, f'get_{zname}axis_transform')(which='grid')
A:matplotlib.axes._axes.l->matplotlib.lines.Line2D([x, x], [ymin, ymax], transform=trans, **kwargs)
A:matplotlib.axes._axes.(xmin, xmax)->matplotlib.transforms.nonsingular(xmin, xmax, expander=0.1)
A:matplotlib.axes._axes.(xx,)->self._process_unit_info([('x', x)], kwargs)
A:matplotlib.axes._axes.line->self.plot(freqs, 10 * np.log10(np.abs(pxy)), **kwargs)
A:matplotlib.axes._axes.((ymin, ymax),)->self._process_unit_info([('y', [ymin, ymax])], kwargs)
A:matplotlib.axes._axes.((xmin, xmax),)->self._process_unit_info([('x', [xmin, xmax])], kwargs)
A:matplotlib.axes._axes.(xmin, xmax, y)->self._process_unit_info([('x', xmin), ('x', xmax), ('y', y)], kwargs)
A:matplotlib.axes._axes.(y, xmin, xmax)->matplotlib.cbook._combine_masks(y, xmin, xmax)
A:matplotlib.axes._axes.y->numpy.zeros(4 * len(bins) - 3)
A:matplotlib.axes._axes.xmin->min(xmin, np.nanmin(xi))
A:matplotlib.axes._axes.xmax->max(xmax, np.nanmax(xi))
A:matplotlib.axes._axes.masked_verts->numpy.ma.empty((len(x), 2, 2))
A:matplotlib.axes._axes.lines->self.plot(freqs, spec, **kwargs)
A:matplotlib.axes._axes.minx->numpy.min(x)
A:matplotlib.axes._axes.maxx->numpy.max(x)
A:matplotlib.axes._axes.miny->numpy.min(y)
A:matplotlib.axes._axes.maxy->numpy.max(y)
A:matplotlib.axes._axes.(x, ymin, ymax)->matplotlib.cbook._combine_masks(x, ymin, ymax)
A:matplotlib.axes._axes.x->numpy.zeros(4 * len(bins) - 3)
A:matplotlib.axes._axes.ymin->numpy.ravel(ymin)
A:matplotlib.axes._axes.ymax->numpy.ravel(ymax)
A:matplotlib.axes._axes.(lineoffsets, linelengths)->self._process_unit_info([('y', lineoffsets), ('y', linelengths)], kwargs)
A:matplotlib.axes._axes.colors->matplotlib.colors.to_rgba_array(color)
A:matplotlib.axes._axes.linewidths->numpy.tile(linewidths, len(positions))
A:matplotlib.axes._axes.linestyles->matplotlib.cbook._local_over_kwdict(linestyles, kwargs, 'linestyle')
A:matplotlib.axes._axes.lineoffsets->numpy.cumsum(lineoffsets)
A:matplotlib.axes._axes.linelengths->numpy.tile(linelengths, len(positions))
A:matplotlib.axes._axes.coll->matplotlib.collections.EventCollection(position, orientation=orientation, lineoffset=lineoffset, linelength=linelength, linewidth=linewidth, color=color, alpha=alpha_, linestyle=linestyle)
A:matplotlib.axes._axes.(mins, maxes)->zip(*min_max)
A:matplotlib.axes._axes.minpos->numpy.min(mins)
A:matplotlib.axes._axes.maxpos->numpy.max(maxes)
A:matplotlib.axes._axes.minline->(lineoffsets - linelengths).min()
A:matplotlib.axes._axes.maxline->(lineoffsets + linelengths).max()
A:matplotlib.axes._axes.kwargs->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection)
A:matplotlib.axes._axes.Nx->len(x)
A:matplotlib.axes._axes.correls->numpy.correlate(x, y, mode='full')
A:matplotlib.axes._axes.lags->numpy.arange(-maxlags, maxlags + 1)
A:matplotlib.axes._axes.b->matplotlib.quiver.Barbs(self, *args, **kwargs)
A:matplotlib.axes._axes.(a,)->self.plot(lags, correls, **kwargs)
A:matplotlib.axes._axes.x0->matplotlib.cbook._safe_first_finite(x0)
A:matplotlib.axes._axes.dx->numpy.diff(x)
A:matplotlib.axes._axes.color->itertools.chain(itertools.cycle(mcolors.to_rgba_array(color)), itertools.repeat('none'))
A:matplotlib.axes._axes.edgecolor->itertools.chain(itertools.cycle(mcolors.to_rgba_array(edgecolor)), itertools.repeat('none'))
A:matplotlib.axes._axes.linewidth->itertools.cycle(np.atleast_1d(linewidth))
A:matplotlib.axes._axes.hatch->itertools.cycle(np.atleast_1d(hatch))
A:matplotlib.axes._axes.xerr->_upcast_err(xerr)
A:matplotlib.axes._axes.yerr->_upcast_err(yerr)
A:matplotlib.axes._axes.error_kw->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('error_kw', {})
A:matplotlib.axes._axes.ezorder->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).get('zorder', None)
A:matplotlib.axes._axes.ecolor->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('ecolor', 'k')
A:matplotlib.axes._axes.capsize->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('capsize', mpl.rcParams['errorbar.capsize'])
A:matplotlib.axes._axes.orientation->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('orientation', 'vertical')
A:matplotlib.axes._axes.log->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('log', False)
A:matplotlib.axes._axes.label->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('label', None)
A:matplotlib.axes._axes.tick_labels->numpy.broadcast_to(tick_labels, len(patches))
A:matplotlib.axes._axes.width->self._convert_dx(width, x0, x, self.convert_xunits)
A:matplotlib.axes._axes.height->self._convert_dx(height, y0, y, self.convert_yunits)
A:matplotlib.axes._axes.(x, height, width, y, linewidth, hatch)->numpy.broadcast_arrays(np.atleast_1d(x), height, width, y, linewidth, hatch)
A:matplotlib.axes._axes.args->self._quiver_units(args, kwargs)
A:matplotlib.axes._axes.r->matplotlib.patches.Rectangle(xy=(l, b), width=w, height=h, facecolor=c, edgecolor=e, linewidth=lw, label=lbl, hatch=htch)
A:matplotlib.axes._axes.errorbar->self.errorbar(ex, ey, yerr=yerr, xerr=xerr, fmt='none', **error_kw)
A:matplotlib.axes._axes.bar_container->BarContainer(patches, errorbar, datavalues=datavalues, orientation=orientation, label=bar_container_label)
A:matplotlib.axes._axes.patches->self.bar(x=left, height=height, width=width, bottom=y, align=align, data=data, **kwargs)
A:matplotlib.axes._axes.(a, b)->self.yaxis.get_view_interval()
A:matplotlib.axes._axes.(c, d)->self.xaxis.get_view_interval()
A:matplotlib.axes._axes.errs->barlinecol.get_segments()
A:matplotlib.axes._axes.((x0, y0), (x1, y1))->matplotlib.collections.PolyCollection(verts, transform=trans, edgecolors='face').get_bbox().get_points()
A:matplotlib.axes._axes.length->abs(x0 - x1)
A:matplotlib.axes._axes.lbl->fmt(value)
A:matplotlib.axes._axes.annotation->self.annotate(lbl, xy, xytext, textcoords='offset points', ha=ha, va=va, **kwargs)
A:matplotlib.axes._axes.(y0, y1)->self.convert_yunits((y0, y0 + dy))
A:matplotlib.axes._axes.(x0, x1)->self.convert_xunits((x0, x0 + dx))
A:matplotlib.axes._axes.col->matplotlib.collections.PolyCollection(np.array(vertices), **kwargs)
A:matplotlib.axes._axes.locs->numpy.arange(len(heads))
A:matplotlib.axes._axes.(locs, heads)->self._process_unit_info([('x', locs), ('y', heads)])
A:matplotlib.axes._axes.(heads, locs)->self._process_unit_info([('x', heads), ('y', locs)])
A:matplotlib.axes._axes.(linestyle, linemarker, linecolor)->_process_plot_format(linefmt)
A:matplotlib.axes._axes.(markerstyle, markermarker, markercolor)->_process_plot_format(markerfmt)
A:matplotlib.axes._axes.(basestyle, basemarker, basecolor)->_process_plot_format(basefmt)
A:matplotlib.axes._axes.stemlines->xlines(locs, bottom, heads, colors=linecolor, linestyles=linestyle, label='_nolegend_')
A:matplotlib.axes._axes.(l,)->self.plot(xs, ys, color=linecolor, linestyle=linestyle, marker=linemarker, label='_nolegend_')
A:matplotlib.axes._axes.(markerline,)->self.plot(marker_x, marker_y, color=markercolor, linestyle=markerstyle, marker=markermarker, label='_nolegend_')
A:matplotlib.axes._axes.(baseline,)->self.plot(baseline_x, baseline_y, color=basecolor, linestyle=basestyle, marker=basemarker, label='_nolegend_')
A:matplotlib.axes._axes.stem_container->StemContainer((markerline, stemlines, baseline), label=label)
A:matplotlib.axes._axes.sx->numpy.zeros(4 * len(bins) - 3).sum()
A:matplotlib.axes._axes.color_cycle->itertools.cycle(colors)
A:matplotlib.axes._axes.hatch_cycle->itertools.cycle(np.atleast_1d(hatch))
A:matplotlib.axes._axes.w->matplotlib.cbook._reshape_2D(weights, 'weights')
A:matplotlib.axes._axes.shad->matplotlib.patches.Shadow(w, -0.02, -0.02, label='_nolegend_')
A:matplotlib.axes._axes.s->numpy.ma.ravel(s)
A:matplotlib.axes._axes.errorevery->slice(errorevery[0], None, errorevery[1])
A:matplotlib.axes._axes.everymask->self._errorevery_to_mask(x, errorevery)
A:matplotlib.axes._axes.atype->type(cbook._safe_first_finite(err))
A:matplotlib.axes._axes.(x, y)->self._process_unit_info([('x', x), ('y', y)], kwargs)
A:matplotlib.axes._axes.((data_line, base_style),)->self._get_lines._plot_args((x, y) if fmt == '' else (x, y, fmt), kwargs, return_kwargs=True)
A:matplotlib.axes._axes.base_style['color']->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('color')
A:matplotlib.axes._axes.lolims->numpy.broadcast_to(lolims, len(dep)).astype(bool)
A:matplotlib.axes._axes.uplims->numpy.broadcast_to(uplims, len(dep)).astype(bool)
A:matplotlib.axes._axes.res->numpy.zeros(err.shape, dtype=bool)
A:matplotlib.axes._axes.(indep_masked, lo_masked, hi_masked)->apply_mask([indep, low, high], nolims & everymask)
A:matplotlib.axes._axes.(x_masked, y_masked, hl_masked)->apply_mask([x, y, hl], lims & everymask)
A:matplotlib.axes._axes.rotation->matplotlib.transforms.Affine2D().rotate(theta)
A:matplotlib.axes._axes.ms->matplotlib.markers.MarkerStyle(marker=marker, transform=rotation)
A:matplotlib.axes._axes.errorbar_container->ErrorbarContainer((data_line, tuple(caplines), tuple(barcols)), has_xerr=xerr is not None, has_yerr=yerr is not None, label=label)
A:matplotlib.axes._axes.bxpstats->matplotlib.cbook.boxplot_stats(x, whis=whis, bootstrap=bootstrap, labels=labels, autorange=autorange)
A:matplotlib.axes._axes.boxprops['edgecolor']->boxprops.pop('color')
A:matplotlib.axes._axes.flierprops->dict(linestyle='none', marker='', color='none')
A:matplotlib.axes._axes.(_, marker, color)->_process_plot_format(sym)
A:matplotlib.axes._axes.artists->self.bxp(bxpstats, positions=positions, widths=widths, vert=vert, patch_artist=patch_artist, shownotches=notch, showmeans=showmeans, showcaps=showcaps, showbox=showbox, boxprops=boxprops, flierprops=flierprops, medianprops=medianprops, meanprops=meanprops, meanline=meanline, showfliers=showfliers, capprops=capprops, whiskerprops=whiskerprops, manage_ticks=manage_ticks, zorder=zorder, capwidths=capwidths)
A:matplotlib.axes._axes.whisker_kw->merge_kw_rc('whisker', whiskerprops, usemarker=False)
A:matplotlib.axes._axes.cap_kw->merge_kw_rc('cap', capprops, usemarker=False)
A:matplotlib.axes._axes.flier_kw->merge_kw_rc('flier', flierprops)
A:matplotlib.axes._axes.median_kw->merge_kw_rc('median', medianprops, zdelta, usemarker=False)
A:matplotlib.axes._axes.mean_kw->merge_kw_rc('mean', meanprops, zdelta)
A:matplotlib.axes._axes.path->matplotlib.markers.MarkerStyle(marker).get_path().transformed(marker_obj.get_transform())
A:matplotlib.axes._axes.patch->matplotlib.patches.StepPatch(values, edges, baseline=baseline, orientation=orientation, fill=fill, **kwargs)
A:matplotlib.axes._axes.N->len(vpstats)
A:matplotlib.axes._axes.positions->range(1, N + 1)
A:matplotlib.axes._axes.cap_lo->numpy.full(2, stats['whislo'])
A:matplotlib.axes._axes.cap_hi->numpy.full(2, stats['whishi'])
A:matplotlib.axes._axes.flier_x->numpy.full(len(stats['fliers']), pos, dtype=np.float64)
A:matplotlib.axes._axes.interval->getattr(self.dataLim, f'interval{axis_name}')
A:matplotlib.axes._axes.axis->getattr(self, f'{axis_name}axis')
A:matplotlib.axes._axes.locator->matplotlib.ticker.FixedLocator([])
A:matplotlib.axes._axes.locator.locs->numpy.array([*locator.locs, *positions])
A:matplotlib.axes._axes.formatter->matplotlib.ticker.FixedFormatter([])
A:matplotlib.axes._axes.facecolors->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('facecolor', facecolors)
A:matplotlib.axes._axes.edgecolors->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('edgecolor', edgecolors)
A:matplotlib.axes._axes.kwcolor->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('color', None)
A:matplotlib.axes._axes.c->numpy.asanyarray(Z).tocoo()
A:matplotlib.axes._axes.orig_edgecolor->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).get('edgecolor', None)
A:matplotlib.axes._axes.(c, colors, edgecolors)->self._parse_scatter_color_args(c, edgecolors, kwargs, x.size, get_next_color_func=self._get_patches_for_fill.get_next_color)
A:matplotlib.axes._axes.(x, y, s, edgecolors, linewidths)->matplotlib.cbook._combine_masks(x, y, s, edgecolors, linewidths)
A:matplotlib.axes._axes.(x, y, s, c, colors, edgecolors, linewidths)->matplotlib.cbook._combine_masks(x, y, s, c, colors, edgecolors, linewidths)
A:matplotlib.axes._axes.marker_obj->matplotlib.markers.MarkerStyle(marker)
A:matplotlib.axes._axes.offsets->numpy.zeros((n, 2), float)
A:matplotlib.axes._axes.collection->matplotlib.collections.QuadMesh(coords, array=C, alpha=alpha, cmap=cmap, norm=norm, antialiased=False, edgecolors='none')
A:matplotlib.axes._axes.keys_str->', '.join((f"'{k}'" for k in extra_keys))
A:matplotlib.axes._axes.(x, y, C)->matplotlib.cbook.delete_masked_points(x, y, C)
A:matplotlib.axes._axes.ny->int(nx / math.sqrt(3))
A:matplotlib.axes._axes.tx->numpy.log10(tx)
A:matplotlib.axes._axes.ty->numpy.log10(ty)
A:matplotlib.axes._axes.ix1->numpy.round(ix).astype(int)
A:matplotlib.axes._axes.iy1->numpy.round(iy).astype(int)
A:matplotlib.axes._axes.ix2->numpy.floor(ix).astype(int)
A:matplotlib.axes._axes.iy2->numpy.floor(iy).astype(int)
A:matplotlib.axes._axes.i1->numpy.where((0 <= ix1) & (ix1 < nx1) & (0 <= iy1) & (iy1 < ny1), ix1 * ny1 + iy1 + 1, 0)
A:matplotlib.axes._axes.i2->numpy.where((0 <= ix2) & (ix2 < nx2) & (0 <= iy2) & (iy2 < ny2), ix2 * ny2 + iy2 + 1, 0)
A:matplotlib.axes._axes.accum->numpy.array(bins, float).searchsorted(accum)
A:matplotlib.axes._axes.C->C.ravel().ravel()
A:matplotlib.axes._axes.offsets[:nx1 * ny1, 0]->numpy.repeat(np.arange(nx1), ny1)
A:matplotlib.axes._axes.offsets[:nx1 * ny1, 1]->numpy.tile(np.arange(ny1), nx1)
A:matplotlib.axes._axes.offsets[nx1 * ny1:, 0]->numpy.repeat(np.arange(nx2) + 0.5, ny2)
A:matplotlib.axes._axes.norm->matplotlib.colors.LogNorm(vmin=vmin, vmax=vmax)
A:matplotlib.axes._axes.bins->numpy.array(bins, float)
A:matplotlib.axes._axes.bin_edges->numpy.linspace(zmin, zmax, nbins + 1)
A:matplotlib.axes._axes.verts->numpy.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1).reshape((npoly, 5, 2))
A:matplotlib.axes._axes.values->numpy.empty(nbins)
A:matplotlib.axes._axes.bar->matplotlib.collections.PolyCollection(verts, transform=trans, edgecolors='face')
A:matplotlib.axes._axes.dy->numpy.diff(y)
A:matplotlib.axes._axes.qk->matplotlib.quiver.QuiverKey(Q, X, Y, U, label, **kwargs)
A:matplotlib.axes._axes.q->stats.get('quantiles')
A:matplotlib.axes._axes.kwargs['facecolor']->self._get_patches_for_fill.get_next_color()
A:matplotlib.axes._axes.(ind, dep1, dep2)->numpy.broadcast_arrays(np.atleast_1d(ind), dep1, dep2, subok=True)
A:matplotlib.axes._axes.where->numpy.asarray(where, dtype=bool)
A:matplotlib.axes._axes.(indslice, dep1slice, dep2slice)->step_func(indslice, dep1slice, dep2slice)
A:matplotlib.axes._axes.pts->numpy.vstack([x, y]).T.astype(float)
A:matplotlib.axes._axes.im1->max(idx - 1, 0)
A:matplotlib.axes._axes.diff_order->diff_values.argsort()
A:matplotlib.axes._axes.diff_root_ind->numpy.interp(0, diff_values[diff_order], ind_values[diff_order])
A:matplotlib.axes._axes.ind_order->ind_values.argsort()
A:matplotlib.axes._axes.diff_root_dep->numpy.interp(diff_root_ind, ind_values[ind_order], dep1_values[ind_order])
A:matplotlib.axes._axes.start->get_interp_point(idx0)
A:matplotlib.axes._axes.end->get_interp_point(idx1)
A:matplotlib.axes._axes.fill_between.__doc__->_fill_between_x_or_y.__doc__.format(dir='horizontal', ind='x', dep='y')
A:matplotlib.axes._axes.fill_between->_preprocess_data(_docstring.dedent_interpd(fill_between), replace_names=['x', 'y1', 'y2', 'where'])
A:matplotlib.axes._axes.fill_betweenx.__doc__->_fill_between_x_or_y.__doc__.format(dir='vertical', ind='y', dep='x')
A:matplotlib.axes._axes.fill_betweenx->_preprocess_data(_docstring.dedent_interpd(fill_betweenx), replace_names=['y', 'x1', 'x2', 'where'])
A:matplotlib.axes._axes.im->self.imshow(Z, **kw)
A:matplotlib.axes._axes.(X, Y)->self._process_unit_info([('x', X), ('y', Y)], kwargs)
A:matplotlib.axes._axes.X->matplotlib.cbook._unpack_to_numpy(X)
A:matplotlib.axes._axes.Y->numpy.ma.asarray(Y)
A:matplotlib.axes._axes.shading->shading.lower().lower()
A:matplotlib.axes._axes.(X, Y, C, shading)->self._pcolorargs('pcolormesh', *args, shading=shading, kwargs=kwargs)
A:matplotlib.axes._axes.npoly->len(X1)
A:matplotlib.axes._axes.xy->numpy.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1)
A:matplotlib.axes._axes.kwargs['linewidths']->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('linewidth')
A:matplotlib.axes._axes.kwargs['edgecolors']->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('edgecolor')
A:matplotlib.axes._axes.ec->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).setdefault('edgecolors', 'none')
A:matplotlib.axes._axes.kwargs['antialiaseds']->matplotlib.cbook.normalize_kwargs(kwargs, mcoll.Collection).pop('antialiased')
A:matplotlib.axes._axes.transformed_pts->trans_to_data.transform(pts)
A:matplotlib.axes._axes.coords->numpy.stack([x, y], axis=-1)
A:matplotlib.axes._axes.(minx, miny)->numpy.min(coords, axis=0)
A:matplotlib.axes._axes.(maxx, maxy)->numpy.max(coords, axis=0)
A:matplotlib.axes._axes.contours->matplotlib.contour.QuadContourSet(self, *args, **kwargs)
A:matplotlib.axes._axes.nx->len(x)
A:matplotlib.axes._axes.bin_range->convert_units(bin_range)
A:matplotlib.axes._axes.len_xi->len(xi)
A:matplotlib.axes._axes.hist_kwargs->dict()
A:matplotlib.axes._axes._w->numpy.concatenate(w)
A:matplotlib.axes._axes.density->bool(density)
A:matplotlib.axes._axes.(m, bins)->numpy.histogram(x[i], bins, weights=w[i], **hist_kwargs)
A:matplotlib.axes._axes.tops->tops.cumsum(axis=0).cumsum(axis=0)
A:matplotlib.axes._axes.slc->slice(None, None, -1)
A:matplotlib.axes._axes.totwidth->numpy.diff(bins)
A:matplotlib.axes._axes.dr->numpy.clip(rwidth, 0, 1)
A:matplotlib.axes._axes.bottom->numpy.zeros(len(top))
A:matplotlib.axes._axes.bars->_barfunc(bins[:-1] + boffset, height, width, align='center', log=log, color=color, **{bottom_kwarg: bottom})
A:matplotlib.axes._axes._color->self._get_lines.get_next_color()
A:matplotlib.axes._axes.edges->numpy.arange(len(values) + 1)
A:matplotlib.axes._axes.(edges, values, baseline)->self._process_unit_info([('x', edges), ('y', values), ('y', baseline)], kwargs)
A:matplotlib.axes._axes.(h, xedges, yedges)->numpy.histogram2d(x, y, bins=bins, range=range, density=density, weights=weights)
A:matplotlib.axes._axes.pc->self.pcolormesh(xedges, yedges, h.T, **kwargs)
A:matplotlib.axes._axes.(pxx, freqs)->matplotlib.mlab.psd(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.axes._axes.(vmin, vmax)->self.get_ybound()
A:matplotlib.axes._axes.step->max(10 * int(np.log10(vmax - vmin)), 1)
A:matplotlib.axes._axes.ticks->numpy.arange(math.floor(vmin), math.ceil(vmax) + 1, step)
A:matplotlib.axes._axes.(pxy, freqs)->matplotlib.mlab.csd(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.axes._axes.(spec, freqs)->matplotlib.mlab.phase_spectrum(x=x, Fs=Fs, window=window, pad_to=pad_to, sides=sides)
A:matplotlib.axes._axes.yunits->matplotlib._api.check_getitem({None: 'energy', 'default': 'energy', 'linear': 'energy', 'dB': 'dB'}, scale=scale)
A:matplotlib.axes._axes.(line,)->self.plot(freqs, Z, **kwargs)
A:matplotlib.axes._axes.(cxy, freqs)->matplotlib.mlab.cohere(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, scale_by_freq=scale_by_freq, sides=sides, pad_to=pad_to)
A:matplotlib.axes._axes.(spec, freqs, t)->matplotlib.mlab.specgram(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode=mode)
A:matplotlib.axes._axes.Z->numpy.asanyarray(Z)
A:matplotlib.axes._axes.kwargs['cmap']->matplotlib.colors.ListedColormap(['w', 'k'], name='binary')
A:matplotlib.axes._axes.kwargs['norm']->matplotlib.colors.NoNorm()
A:matplotlib.axes._axes.ret->matplotlib.lines.Line2D(x, y, linestyle='None', marker=marker, markersize=markersize, **kwargs)
A:matplotlib.axes._axes.(y, x)->numpy.nonzero(nonzero)
A:matplotlib.axes._axes.kde->matplotlib.mlab.GaussianKDE(X, bw_method)
A:matplotlib.axes._axes.vpstats->matplotlib.cbook.violin_stats(dataset, _kde_method, points=points, quantiles=quantiles)
A:matplotlib.axes._axes.fillcolorlinecolor->self._get_lines.get_next_color()
A:matplotlib.axes._axes.perp_lines->functools.partial(self.vlines, colors=linecolor)
A:matplotlib.axes._axes.par_lines->functools.partial(self.hlines, colors=linecolor)
A:matplotlib.axes._axes.vals->numpy.array(stats['vals'])
A:matplotlib.axes._axes.artists['cmeans']->perp_lines(means, *line_ends)
A:matplotlib.axes._axes.artists['cmaxes']->perp_lines(maxes, *line_ends)
A:matplotlib.axes._axes.artists['cmins']->perp_lines(mins, *line_ends)
A:matplotlib.axes._axes.artists['cbars']->par_lines(positions, mins, maxes)
A:matplotlib.axes._axes.artists['cmedians']->perp_lines(medians, *line_ends)
A:matplotlib.axes._axes.artists['cquantiles']->perp_lines(quantiles, *np.repeat(line_ends, qlens, axis=1))
A:matplotlib.axes._axes.stackplot->_preprocess_data()(mstack.stackplot)
A:matplotlib.axes._axes.streamplot->_preprocess_data(replace_names=['x', 'y', 'u', 'v', 'start_points'])(mstream.streamplot)
A:matplotlib.axes._axes.figure_size->self.get_figure().get_size_inches()
matplotlib.axes.Subplot(_AxesBase)
matplotlib.axes.Subplot._check_no_units(vals,names)
matplotlib.axes.Subplot._convert_dx(dx,x0,xconv,convert)
matplotlib.axes.Subplot._errorevery_to_mask(x,errorevery)
matplotlib.axes.Subplot._fill_between_x_or_y(self,ind_dir,ind,dep1,dep2=0,*,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes.Subplot._get_aspect_ratio(self)
matplotlib.axes.Subplot._parse_scatter_color_args(c,edgecolors,kwargs,xsize,get_next_color_func)
matplotlib.axes.Subplot._pcolorargs(self,funcname,*args,shading='auto',**kwargs)
matplotlib.axes.Subplot._quiver_units(self,args,kwargs)
matplotlib.axes.Subplot._remove_legend(self,legend)
matplotlib.axes.Subplot.acorr(self,x,**kwargs)
matplotlib.axes.Subplot.angle_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes.Subplot.annotate(self,text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.axes.Subplot.arrow(self,x,y,dx,dy,**kwargs)
matplotlib.axes.Subplot.axhline(self,y=0,xmin=0,xmax=1,**kwargs)
matplotlib.axes.Subplot.axhspan(self,ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.axes.Subplot.axline(self,xy1,xy2=None,*,slope=None,**kwargs)
matplotlib.axes.Subplot.axvline(self,x=0,ymin=0,ymax=1,**kwargs)
matplotlib.axes.Subplot.axvspan(self,xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.axes.Subplot.bar(self,x,height,width=0.8,bottom=None,*,align='center',**kwargs)
matplotlib.axes.Subplot.bar_label(self,container,labels=None,*,fmt='%g',label_type='edge',padding=0,**kwargs)
matplotlib.axes.Subplot.barbs(self,*args,**kwargs)
matplotlib.axes.Subplot.barh(self,y,width,height=0.8,left=None,*,align='center',data=None,**kwargs)
matplotlib.axes.Subplot.boxplot(self,x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_ticks=True,autorange=False,zorder=None,capwidths=None)
matplotlib.axes.Subplot.broken_barh(self,xranges,yrange,**kwargs)
matplotlib.axes.Subplot.bxp(self,bxpstats,positions=None,widths=None,vert=True,patch_artist=False,shownotches=False,showmeans=False,showcaps=True,showbox=True,showfliers=True,boxprops=None,whiskerprops=None,flierprops=None,medianprops=None,capprops=None,meanprops=None,meanline=False,manage_ticks=True,zorder=None,capwidths=None)
matplotlib.axes.Subplot.clabel(self,CS,levels=None,**kwargs)
matplotlib.axes.Subplot.cohere(self,x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,**kwargs)
matplotlib.axes.Subplot.contour(self,*args,**kwargs)
matplotlib.axes.Subplot.contourf(self,*args,**kwargs)
matplotlib.axes.Subplot.csd(self,x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes.Subplot.errorbar(self,x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,**kwargs)
matplotlib.axes.Subplot.eventplot(self,positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,alpha=None,linestyles='solid',**kwargs)
matplotlib.axes.Subplot.fill(self,*args,data=None,**kwargs)
matplotlib.axes.Subplot.fill_between(self,x,y1,y2=0,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes.Subplot.fill_betweenx(self,y,x1,x2=0,where=None,step=None,interpolate=False,**kwargs)
matplotlib.axes.Subplot.get_legend_handles_labels(self,legend_handler_map=None)
matplotlib.axes.Subplot.get_title(self,loc='center')
matplotlib.axes.Subplot.hexbin(self,x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,**kwargs)
matplotlib.axes.Subplot.hist(self,x,bins=None,range=None,density=False,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,**kwargs)
matplotlib.axes.Subplot.hist2d(self,x,y,bins=10,range=None,density=False,weights=None,cmin=None,cmax=None,**kwargs)
matplotlib.axes.Subplot.hlines(self,y,xmin,xmax,colors=None,linestyles='solid',label='',**kwargs)
matplotlib.axes.Subplot.imshow(self,X,cmap=None,norm=None,*,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,interpolation_stage=None,filternorm=True,filterrad=4.0,resample=None,url=None,**kwargs)
matplotlib.axes.Subplot.indicate_inset(self,bounds,inset_ax=None,*,transform=None,facecolor='none',edgecolor='0.5',alpha=0.5,zorder=4.99,**kwargs)
matplotlib.axes.Subplot.indicate_inset_zoom(self,inset_ax,**kwargs)
matplotlib.axes.Subplot.inset_axes(self,bounds,*,transform=None,zorder=5,**kwargs)
matplotlib.axes.Subplot.legend(self,*args,**kwargs)
matplotlib.axes.Subplot.loglog(self,*args,**kwargs)
matplotlib.axes.Subplot.magnitude_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,**kwargs)
matplotlib.axes.Subplot.matshow(self,Z,**kwargs)
matplotlib.axes.Subplot.pcolor(self,*args,shading=None,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes.Subplot.pcolorfast(self,*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes.Subplot.pcolormesh(self,*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,shading=None,antialiased=False,**kwargs)
matplotlib.axes.Subplot.phase_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes.Subplot.pie(self,x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=0,radius=1,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False,*,normalize=True,hatch=None)
matplotlib.axes.Subplot.plot(self,*args,scalex=True,scaley=True,data=None,**kwargs)
matplotlib.axes.Subplot.plot_date(self,x,y,fmt='o',tz=None,xdate=True,ydate=False,**kwargs)
matplotlib.axes.Subplot.psd(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes.Subplot.quiver(self,*args,**kwargs)
matplotlib.axes.Subplot.quiverkey(self,Q,X,Y,U,label,**kwargs)
matplotlib.axes.Subplot.scatter(self,x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,*,edgecolors=None,plotnonfinite=False,**kwargs)
matplotlib.axes.Subplot.secondary_xaxis(self,location,*,functions=None,**kwargs)
matplotlib.axes.Subplot.secondary_yaxis(self,location,*,functions=None,**kwargs)
matplotlib.axes.Subplot.semilogx(self,*args,**kwargs)
matplotlib.axes.Subplot.semilogy(self,*args,**kwargs)
matplotlib.axes.Subplot.set_title(self,label,fontdict=None,loc=None,pad=None,*,y=None,**kwargs)
matplotlib.axes.Subplot.specgram(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes.Subplot.spy(self,Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.axes.Subplot.stairs(self,values,edges=None,*,orientation='vertical',baseline=0,fill=False,**kwargs)
matplotlib.axes.Subplot.stem(self,*args,linefmt=None,markerfmt=None,basefmt=None,bottom=0,label=None,use_line_collection=True,orientation='vertical')
matplotlib.axes.Subplot.step(self,x,y,*args,where='pre',data=None,**kwargs)
matplotlib.axes.Subplot.text(self,x,y,s,fontdict=None,**kwargs)
matplotlib.axes.Subplot.violin(self,vpstats,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False)
matplotlib.axes.Subplot.violinplot(self,dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,quantiles=None,points=100,bw_method=None)
matplotlib.axes.Subplot.vlines(self,x,ymin,ymax,colors=None,linestyles='solid',label='',**kwargs)
matplotlib.axes.Subplot.xcorr(self,x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,**kwargs)
matplotlib.axes._axes.Axes(_AxesBase)
matplotlib.axes._axes.Axes._check_no_units(vals,names)
matplotlib.axes._axes.Axes._convert_dx(dx,x0,xconv,convert)
matplotlib.axes._axes.Axes._errorevery_to_mask(x,errorevery)
matplotlib.axes._axes.Axes._fill_between_x_or_y(self,ind_dir,ind,dep1,dep2=0,*,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes._axes.Axes._get_aspect_ratio(self)
matplotlib.axes._axes.Axes._parse_scatter_color_args(c,edgecolors,kwargs,xsize,get_next_color_func)
matplotlib.axes._axes.Axes._pcolorargs(self,funcname,*args,shading='auto',**kwargs)
matplotlib.axes._axes.Axes._quiver_units(self,args,kwargs)
matplotlib.axes._axes.Axes._remove_legend(self,legend)
matplotlib.axes._axes.Axes.acorr(self,x,**kwargs)
matplotlib.axes._axes.Axes.angle_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes._axes.Axes.annotate(self,text,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.axes._axes.Axes.arrow(self,x,y,dx,dy,**kwargs)
matplotlib.axes._axes.Axes.axhline(self,y=0,xmin=0,xmax=1,**kwargs)
matplotlib.axes._axes.Axes.axhspan(self,ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.axes._axes.Axes.axline(self,xy1,xy2=None,*,slope=None,**kwargs)
matplotlib.axes._axes.Axes.axvline(self,x=0,ymin=0,ymax=1,**kwargs)
matplotlib.axes._axes.Axes.axvspan(self,xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.axes._axes.Axes.bar(self,x,height,width=0.8,bottom=None,*,align='center',**kwargs)
matplotlib.axes._axes.Axes.bar_label(self,container,labels=None,*,fmt='%g',label_type='edge',padding=0,**kwargs)
matplotlib.axes._axes.Axes.barbs(self,*args,**kwargs)
matplotlib.axes._axes.Axes.barh(self,y,width,height=0.8,left=None,*,align='center',data=None,**kwargs)
matplotlib.axes._axes.Axes.boxplot(self,x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_ticks=True,autorange=False,zorder=None,capwidths=None)
matplotlib.axes._axes.Axes.broken_barh(self,xranges,yrange,**kwargs)
matplotlib.axes._axes.Axes.bxp(self,bxpstats,positions=None,widths=None,vert=True,patch_artist=False,shownotches=False,showmeans=False,showcaps=True,showbox=True,showfliers=True,boxprops=None,whiskerprops=None,flierprops=None,medianprops=None,capprops=None,meanprops=None,meanline=False,manage_ticks=True,zorder=None,capwidths=None)
matplotlib.axes._axes.Axes.clabel(self,CS,levels=None,**kwargs)
matplotlib.axes._axes.Axes.cohere(self,x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,**kwargs)
matplotlib.axes._axes.Axes.contour(self,*args,**kwargs)
matplotlib.axes._axes.Axes.contourf(self,*args,**kwargs)
matplotlib.axes._axes.Axes.csd(self,x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes._axes.Axes.errorbar(self,x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,**kwargs)
matplotlib.axes._axes.Axes.eventplot(self,positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,alpha=None,linestyles='solid',**kwargs)
matplotlib.axes._axes.Axes.fill(self,*args,data=None,**kwargs)
matplotlib.axes._axes.Axes.fill_between(self,x,y1,y2=0,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes._axes.Axes.fill_betweenx(self,y,x1,x2=0,where=None,step=None,interpolate=False,**kwargs)
matplotlib.axes._axes.Axes.get_legend_handles_labels(self,legend_handler_map=None)
matplotlib.axes._axes.Axes.get_title(self,loc='center')
matplotlib.axes._axes.Axes.hexbin(self,x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,**kwargs)
matplotlib.axes._axes.Axes.hist(self,x,bins=None,range=None,density=False,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,**kwargs)
matplotlib.axes._axes.Axes.hist2d(self,x,y,bins=10,range=None,density=False,weights=None,cmin=None,cmax=None,**kwargs)
matplotlib.axes._axes.Axes.hlines(self,y,xmin,xmax,colors=None,linestyles='solid',label='',**kwargs)
matplotlib.axes._axes.Axes.imshow(self,X,cmap=None,norm=None,*,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,interpolation_stage=None,filternorm=True,filterrad=4.0,resample=None,url=None,**kwargs)
matplotlib.axes._axes.Axes.indicate_inset(self,bounds,inset_ax=None,*,transform=None,facecolor='none',edgecolor='0.5',alpha=0.5,zorder=4.99,**kwargs)
matplotlib.axes._axes.Axes.indicate_inset_zoom(self,inset_ax,**kwargs)
matplotlib.axes._axes.Axes.inset_axes(self,bounds,*,transform=None,zorder=5,**kwargs)
matplotlib.axes._axes.Axes.legend(self,*args,**kwargs)
matplotlib.axes._axes.Axes.loglog(self,*args,**kwargs)
matplotlib.axes._axes.Axes.magnitude_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,**kwargs)
matplotlib.axes._axes.Axes.matshow(self,Z,**kwargs)
matplotlib.axes._axes.Axes.pcolor(self,*args,shading=None,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes._axes.Axes.pcolorfast(self,*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes._axes.Axes.pcolormesh(self,*args,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,shading=None,antialiased=False,**kwargs)
matplotlib.axes._axes.Axes.phase_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes._axes.Axes.pie(self,x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=0,radius=1,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False,*,normalize=True,hatch=None)
matplotlib.axes._axes.Axes.plot(self,*args,scalex=True,scaley=True,data=None,**kwargs)
matplotlib.axes._axes.Axes.plot_date(self,x,y,fmt='o',tz=None,xdate=True,ydate=False,**kwargs)
matplotlib.axes._axes.Axes.psd(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes._axes.Axes.quiver(self,*args,**kwargs)
matplotlib.axes._axes.Axes.quiverkey(self,Q,X,Y,U,label,**kwargs)
matplotlib.axes._axes.Axes.scatter(self,x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,*,edgecolors=None,plotnonfinite=False,**kwargs)
matplotlib.axes._axes.Axes.secondary_xaxis(self,location,*,functions=None,**kwargs)
matplotlib.axes._axes.Axes.secondary_yaxis(self,location,*,functions=None,**kwargs)
matplotlib.axes._axes.Axes.semilogx(self,*args,**kwargs)
matplotlib.axes._axes.Axes.semilogy(self,*args,**kwargs)
matplotlib.axes._axes.Axes.set_title(self,label,fontdict=None,loc=None,pad=None,*,y=None,**kwargs)
matplotlib.axes._axes.Axes.specgram(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes._axes.Axes.spy(self,Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.axes._axes.Axes.stairs(self,values,edges=None,*,orientation='vertical',baseline=0,fill=False,**kwargs)
matplotlib.axes._axes.Axes.stem(self,*args,linefmt=None,markerfmt=None,basefmt=None,bottom=0,label=None,use_line_collection=True,orientation='vertical')
matplotlib.axes._axes.Axes.step(self,x,y,*args,where='pre',data=None,**kwargs)
matplotlib.axes._axes.Axes.text(self,x,y,s,fontdict=None,**kwargs)
matplotlib.axes._axes.Axes.violin(self,vpstats,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False)
matplotlib.axes._axes.Axes.violinplot(self,dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,quantiles=None,points=100,bw_method=None)
matplotlib.axes._axes.Axes.vlines(self,x,ymin,ymax,colors=None,linestyles='solid',label='',**kwargs)
matplotlib.axes._axes.Axes.xcorr(self,x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/axes/_secondary_axes.py----------------------------------------
A:matplotlib.axes._secondary_axes.ret->self._axis.set_ticks(ticks, labels, minor=minor, **kwargs)
A:matplotlib.axes._secondary_axes.pscale->self._parent.yaxis.get_scale()
A:matplotlib.axes._secondary_axes.ticks->self._axis.get_ticklocs()
A:matplotlib.axes._secondary_axes.lims->self._functions[0](np.array(lims))
matplotlib.axes._secondarySecondaryAxis(self,parent,orientation,location,functions,**kwargs)
matplotlib.axes._secondarySecondaryAxis._set_lims(self)
matplotlib.axes._secondarySecondaryAxis._set_scale(self)
matplotlib.axes._secondarySecondaryAxis.apply_aspect(self,position=None)
matplotlib.axes._secondarySecondaryAxis.draw(self,renderer)
matplotlib.axes._secondarySecondaryAxis.set_alignment(self,align)
matplotlib.axes._secondarySecondaryAxis.set_aspect(self,*args,**kwargs)
matplotlib.axes._secondarySecondaryAxis.set_color(self,color)
matplotlib.axes._secondarySecondaryAxis.set_functions(self,functions)
matplotlib.axes._secondarySecondaryAxis.set_location(self,location)
matplotlib.axes._secondarySecondaryAxis.set_ticks(self,ticks,labels=None,*,minor=False,**kwargs)
matplotlib.axes._secondary_axes.SecondaryAxis(self,parent,orientation,location,functions,**kwargs)
matplotlib.axes._secondary_axes.SecondaryAxis.__init__(self,parent,orientation,location,functions,**kwargs)
matplotlib.axes._secondary_axes.SecondaryAxis._set_lims(self)
matplotlib.axes._secondary_axes.SecondaryAxis._set_scale(self)
matplotlib.axes._secondary_axes.SecondaryAxis.apply_aspect(self,position=None)
matplotlib.axes._secondary_axes.SecondaryAxis.draw(self,renderer)
matplotlib.axes._secondary_axes.SecondaryAxis.set_alignment(self,align)
matplotlib.axes._secondary_axes.SecondaryAxis.set_aspect(self,*args,**kwargs)
matplotlib.axes._secondary_axes.SecondaryAxis.set_color(self,color)
matplotlib.axes._secondary_axes.SecondaryAxis.set_functions(self,functions)
matplotlib.axes._secondary_axes.SecondaryAxis.set_location(self,location)
matplotlib.axes._secondary_axes.SecondaryAxis.set_ticks(self,ticks,labels=None,*,minor=False,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/axes/_base.py----------------------------------------
A:matplotlib.axes._base._log->logging.getLogger(__name__)
A:matplotlib.axes._base.doc->doc.replace(k, v).replace(k, v)
A:matplotlib.axes._base.get_method->attrgetter(f'{self.attr_name}.{self.method_name}')
A:matplotlib.axes._base.wrapper.__signature__->inspect.signature(getattr(maxis.Axis, self.method_name))
A:matplotlib.axes._base.color->matplotlib.colors.to_rgba('C{}'.format(color_cycle_number))
A:matplotlib.axes._base.fmtint->str(int(fmt))
A:matplotlib.axes._base.color_cycle_number->int(fmt[i + 1])
A:matplotlib.axes._base.self.__dict__->super().__getstate__().copy()
A:matplotlib.axes._base.self.prop_cycler->itertools.cycle(cycler)
A:matplotlib.axes._base.kwargs['label']->matplotlib._label_from_arg(replaced[label_namer_idx], args[label_namer_idx])
A:matplotlib.axes._base.default_dict->self._getdefaults(ignores, kw)
A:matplotlib.axes._base.seg->matplotlib.patches.Polygon(np.column_stack((x, y)), facecolor=facecolor, fill=kwargs.get('fill', True), closed=kw['closed'])
A:matplotlib.axes._base.x->_check_1d(xy[0])
A:matplotlib.axes._base.y->_check_1d(xy[1])
A:matplotlib.axes._base.kw->kw.copy().copy()
A:matplotlib.axes._base.kwargs->kwargs.copy().copy()
A:matplotlib.axes._base.facecolor->kw.copy().copy().get('color', None)
A:matplotlib.axes._base.(linestyle, marker, color)->_process_plot_format(fmt, ambiguous_fmt_datakey=ambiguous_fmt_datakey)
A:matplotlib.axes._base.(x, y)->index_of(xy[-1])
A:matplotlib.axes._base.kw['closed']->kwargs.copy().copy().get('closed', True)
A:matplotlib.axes._base.label->self.yaxis.get_label()
A:matplotlib.axes._base.n_datasets->max(ncx, ncy)
A:matplotlib.axes._base._twinned_axes->matplotlib.cbook.Grouper()
A:matplotlib.axes._base.rect->kwargs.copy().copy().pop('rect')
A:matplotlib.axes._base.self._position->matplotlib.transforms.Bbox.from_bounds(*args[0])
A:matplotlib.axes._base.self._positionself._originalPosition->matplotlib.transforms.Bbox.unit()
A:matplotlib.axes._base.subplotspec->matplotlib.gridspec.SubplotSpec._from_subplot_args(fig, args)
A:matplotlib.axes._base.self._originalPosition->self._position.frozen()
A:matplotlib.axes._base.self.spines->matplotlib.spines.Spines.from_dict(self._gen_axes_spines())
A:matplotlib.axes._base.state->super().__getstate__()
A:matplotlib.axes._base.shared_axes->super().__getstate__().pop('_shared_axes')
A:matplotlib.axes._base.twinned_siblings->super().__getstate__().pop('_twinned_axes')
A:matplotlib.axes._base.title->self.get_title(loc=k)
A:matplotlib.axes._base.self.xaxis->matplotlib.axis.XAxis(self)
A:matplotlib.axes._base.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.axes._base.self.bbox->matplotlib.transforms.TransformedBbox(self._position, fig.transSubfigure)
A:matplotlib.axes._base.self.dataLim->matplotlib.transforms.Bbox.null()
A:matplotlib.axes._base.self._viewLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.axes._base.self.transScale->matplotlib.transforms.TransformWrapper(mtransforms.IdentityTransform())
A:matplotlib.axes._base.axis_names->matplotlib._api.check_getitem({**{k: [k] for k in self._axis_names}, 'all': self._axis_names}, axis=axis)
A:matplotlib.axes._base.self.transAxes->matplotlib.transforms.BboxTransformTo(self.bbox)
A:matplotlib.axes._base.self.transLimits->matplotlib.transforms.BboxTransformFrom(mtransforms.TransformedBbox(self._viewLim, self.transScale))
A:matplotlib.axes._base.self._xaxis_transform->matplotlib.transforms.blended_transform_factory(self.transData, self.transAxes)
A:matplotlib.axes._base.self._yaxis_transform->matplotlib.transforms.blended_transform_factory(self.transAxes, self.transData)
A:matplotlib.axes._base.locator->self.get_axes_locator()
A:matplotlib.axes._base.pos->ax.get_position(original=True)
A:matplotlib.axes._base.(x0, x1)->self.get_axes_locator().view_limits(x0, x1)
A:matplotlib.axes._base.(y0, y1)->self.yaxis.get_transform().transform(dL.intervaly)
A:matplotlib.axes._base.patch_visible->self.patch.get_visible()
A:matplotlib.axes._base.xaxis_visible->self.xaxis.get_visible()
A:matplotlib.axes._base.yaxis_visible->self.yaxis.get_visible()
A:matplotlib.axes._base.self.callbacks->matplotlib.cbook.CallbackRegistry(signals=['xlim_changed', 'ylim_changed', 'zlim_changed'])
A:matplotlib.axes._base.self._get_lines->_process_plot_var_args(self)
A:matplotlib.axes._base.self._get_patches_for_fill->_process_plot_var_args(self, 'fill')
A:matplotlib.axes._base.self._mouseover_set->_OrderedSet()
A:matplotlib.axes._base.props->matplotlib.font_manager.FontProperties(size=mpl.rcParams['axes.titlesize'], weight=mpl.rcParams['axes.titleweight'])
A:matplotlib.axes._base.self.title->matplotlib.text.Text(x=0.5, y=y, text='', fontproperties=props, verticalalignment='baseline', horizontalalignment='center')
A:matplotlib.axes._base.self._left_title->matplotlib.text.Text(x=0.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='left')
A:matplotlib.axes._base.self._right_title->matplotlib.text.Text(x=1.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='right')
A:matplotlib.axes._base.self.patch->self._gen_axes_patch()
A:matplotlib.axes._base.share->getattr(self, f'_share{name}')
A:matplotlib.axes._base.self.titleOffsetTrans->matplotlib.transforms.ScaledTranslation(0.0, title_offset_points / 72, self.figure.dpi_scale_trans)
A:matplotlib.axes._base.prop_cycle->cycler(*args, **kwargs)
A:matplotlib.axes._base.aspect->self.get_aspect()
A:matplotlib.axes._base.(txmin, txmax)->self.xaxis.get_transform().transform(self.get_xbound())
A:matplotlib.axes._base.(tymin, tymax)->self.yaxis.get_transform().transform(self.get_ybound())
A:matplotlib.axes._base.xsize->max(abs(xmax - xmin), 1e-30)
A:matplotlib.axes._base.ysize->max(abs(ymax - ymin), 1e-30)
A:matplotlib.axes._base.position->pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect).anchored(self.get_anchor(), pb)
A:matplotlib.axes._base.bb->ax.yaxis.offsetText.get_tightbbox(renderer)
A:matplotlib.axes._base.pb->pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect).anchored(self.get_anchor(), pb).frozen()
A:matplotlib.axes._base.pb1->pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect).anchored(self.get_anchor(), pb).frozen().shrunk_to_aspect(self._box_aspect, pb, fig_aspect)
A:matplotlib.axes._base.x_trf->self.xaxis.get_transform()
A:matplotlib.axes._base.y_trf->self.yaxis.get_transform()
A:matplotlib.axes._base.(xmin, xmax)->numpy.clip(sorted([startx, stopx]), xmin0, xmax0)
A:matplotlib.axes._base.(ymin, ymax)->numpy.clip(sorted([starty, stopy]), ymin0, ymax0)
A:matplotlib.axes._base.arg->arg.lower().lower()
A:matplotlib.axes._base.xlim->self.get_xlim()
A:matplotlib.axes._base.ylim->self.get_ylim()
A:matplotlib.axes._base.xmin->kwargs.copy().copy().pop('xmin', None)
A:matplotlib.axes._base.xmax->kwargs.copy().copy().pop('xmax', None)
A:matplotlib.axes._base.ymin->kwargs.copy().copy().pop('ymin', None)
A:matplotlib.axes._base.ymax->max((title.get_position()[1] for title in titles))
A:matplotlib.axes._base.get_xgridlines->_axis_method_wrapper('xaxis', 'get_gridlines')
A:matplotlib.axes._base.get_xticklines->_axis_method_wrapper('xaxis', 'get_ticklines')
A:matplotlib.axes._base.get_ygridlines->_axis_method_wrapper('yaxis', 'get_gridlines')
A:matplotlib.axes._base.get_yticklines->_axis_method_wrapper('yaxis', 'get_ticklines')
A:matplotlib.axes._base.datalim->collection.get_datalim(self.transData)
A:matplotlib.axes._base.points->self._get_pan_points(button, key, x, y)
A:matplotlib.axes._base.(xmin, xmax, ymin, ymax)->image.get_extent()
A:matplotlib.axes._base.path->line.get_path()
A:matplotlib.axes._base.line_trf->line.get_transform()
A:matplotlib.axes._base.line_trans_path->line._get_transformed_path()
A:matplotlib.axes._base.(na_path, _)->line._get_transformed_path().get_transformed_path_and_affine()
A:matplotlib.axes._base.data_path->trf_to_data.transform_path(path)
A:matplotlib.axes._base.(updatex, updatey)->patch.get_transform().contains_branch_seperately(self.transData)
A:matplotlib.axes._base.p->patch.get_path()
A:matplotlib.axes._base.(_, dzeros)->curve.axis_aligned_extrema()
A:matplotlib.axes._base.vertices->numpy.row_stack(vertices)
A:matplotlib.axes._base.patch_trf->patch.get_transform()
A:matplotlib.axes._base.xys->numpy.asarray(xys)
A:matplotlib.axes._base.units->kwargs.copy().copy().pop(polar_units[axis_name], units)
A:matplotlib.axes._base.get_autoscalex_on->_axis_method_wrapper('xaxis', '_get_autoscale_on')
A:matplotlib.axes._base.get_autoscaley_on->_axis_method_wrapper('yaxis', '_get_autoscale_on')
A:matplotlib.axes._base.set_autoscalex_on->_axis_method_wrapper('xaxis', '_set_autoscale_on')
A:matplotlib.axes._base.set_autoscaley_on->_axis_method_wrapper('yaxis', '_set_autoscale_on')
A:matplotlib.axes._base.self._use_sticky_edges->bool(b)
A:matplotlib.axes._base.scalex->self.get_autoscalex_on()
A:matplotlib.axes._base.scaley->self.get_autoscaley_on()
A:matplotlib.axes._base.self._tight->bool(tight)
A:matplotlib.axes._base.x_stickiesy_stickies->numpy.array([])
A:matplotlib.axes._base.x_stickies->numpy.sort(np.concatenate([artist.sticky_edges.x for ax in self._shared_axes['x'].get_siblings(self) for artist in ax.get_children()]))
A:matplotlib.axes._base.y_stickies->numpy.sort(np.concatenate([artist.sticky_edges.y for ax in self._shared_axes['y'].get_siblings(self) for artist in ax.get_children()]))
A:matplotlib.axes._base.shared->super().__getstate__().pop('_shared_axes').get_siblings(self)
A:matplotlib.axes._base.minimum_minpos->min((getattr(ax.dataLim, f'minpos{name}') for ax in shared))
A:matplotlib.axes._base.i1->stickies.searchsorted(x1 - tol)
A:matplotlib.axes._base.transform->axis.lower().get_transform()
A:matplotlib.axes._base.inverse_trans->axis.lower().get_transform().inverted()
A:matplotlib.axes._base.(x0t, x1t)->axis.lower().get_transform().transform([x0, x1])
A:matplotlib.axes._base.x0->max(x0, x0bound)
A:matplotlib.axes._base.x1->min(x1, x1bound)
A:matplotlib.axes._base.(x, _)->self.get_title(loc=k).get_position()
A:matplotlib.axes._base.top->max(top, bb.ymax)
A:matplotlib.axes._base.(_, y)->self.transAxes.inverted().transform((0.0, 2 * top - title.get_window_extent(renderer).ymin))
A:matplotlib.axes._base.artists->self.get_children()
A:matplotlib.axes._base.split_index->numpy.searchsorted([art.zorder for art in artists], rasterization_zorder, side='right')
A:matplotlib.axes._base.self._axisbelowaxisbelow->validate_axisbelow(b)
A:matplotlib.axes._base.style->style.lower().lower()
A:matplotlib.axes._base.axis->axis.lower().lower()
A:matplotlib.axes._base.is_sci_style->matplotlib._api.check_getitem(STYLES, style=style)
A:matplotlib.axes._base.axises->matplotlib._api.check_getitem(axis_map, axis=axis)
A:matplotlib.axes._base.loc->self._axis_map[name].get_major_locator()
A:matplotlib.axes._base.xkw->dict(kwargs)
A:matplotlib.axes._base.ykw->dict(kwargs)
A:matplotlib.axes._base.xaxis_inverted->_axis_method_wrapper('xaxis', 'get_inverted')
A:matplotlib.axes._base.(left, right)->self.get_xlim()
A:matplotlib.axes._base.(old_lower, old_upper)->self.get_ybound()
A:matplotlib.axes._base.converted_limit->convert(limit)
A:matplotlib.axes._base.get_xscale->_axis_method_wrapper('xaxis', 'get_scale')
A:matplotlib.axes._base.set_xscale->_axis_method_wrapper('xaxis', '_set_axes_scale')
A:matplotlib.axes._base.get_xticks->_axis_method_wrapper('xaxis', 'get_ticklocs')
A:matplotlib.axes._base.set_xticks->_axis_method_wrapper('xaxis', 'set_ticks')
A:matplotlib.axes._base.get_xmajorticklabels->_axis_method_wrapper('xaxis', 'get_majorticklabels')
A:matplotlib.axes._base.get_xminorticklabels->_axis_method_wrapper('xaxis', 'get_minorticklabels')
A:matplotlib.axes._base.get_xticklabels->_axis_method_wrapper('xaxis', 'get_ticklabels')
A:matplotlib.axes._base.set_xticklabels->_axis_method_wrapper('xaxis', 'set_ticklabels', doc_sub={'Axis.set_ticks': 'Axes.set_xticks'})
A:matplotlib.axes._base.yaxis_inverted->_axis_method_wrapper('yaxis', 'get_inverted')
A:matplotlib.axes._base.(bottom, top)->self.get_ylim()
A:matplotlib.axes._base.get_yscale->_axis_method_wrapper('yaxis', 'get_scale')
A:matplotlib.axes._base.set_yscale->_axis_method_wrapper('yaxis', '_set_axes_scale')
A:matplotlib.axes._base.get_yticks->_axis_method_wrapper('yaxis', 'get_ticklocs')
A:matplotlib.axes._base.set_yticks->_axis_method_wrapper('yaxis', 'set_ticks')
A:matplotlib.axes._base.get_ymajorticklabels->_axis_method_wrapper('yaxis', 'get_majorticklabels')
A:matplotlib.axes._base.get_yminorticklabels->_axis_method_wrapper('yaxis', 'get_minorticklabels')
A:matplotlib.axes._base.get_yticklabels->_axis_method_wrapper('yaxis', 'get_ticklabels')
A:matplotlib.axes._base.set_yticklabels->_axis_method_wrapper('yaxis', 'set_ticklabels', doc_sub={'Axis.set_ticks': 'Axes.set_yticks'})
A:matplotlib.axes._base.xaxis_date->_axis_method_wrapper('xaxis', 'axis_date')
A:matplotlib.axes._base.yaxis_date->_axis_method_wrapper('yaxis', 'axis_date')
A:matplotlib.axes._base.scale->ax.get_scale()
A:matplotlib.axes._base.((xmin, ymin), (xmax, ymax))->self.transData.transform(np.transpose([self.get_xlim(), self.get_ylim()]))
A:matplotlib.axes._base.(xmin0, xmax0)->self.get_xbound()
A:matplotlib.axes._base.(ymin0, ymax0)->self.get_ybound()
A:matplotlib.axes._base.((startx, starty), (stopx, stopy))->self.transData.inverted().transform([(startx, starty), (stopx, stopy)])
A:matplotlib.axes._base.(sxmin0, sxmax0, sxmin, sxmax)->self.xaxis.get_transform().transform([xmin0, xmax0, xmin, xmax])
A:matplotlib.axes._base.new_xbound->self.xaxis.get_transform().inverted().transform([sxmin1, sxmax1])
A:matplotlib.axes._base.(symin0, symax0, symin, symax)->self.yaxis.get_transform().transform([ymin0, ymax0, ymin, ymax])
A:matplotlib.axes._base.new_ybound->self.yaxis.get_transform().inverted().transform([symin1, symax1])
A:matplotlib.axes._base.(new_xbound, new_ybound)->self._prepare_view_from_bbox(bbox, direction=direction, mode=mode, twinx=twinx, twiny=twiny)
A:matplotlib.axes._base.self._pan_start->types.SimpleNamespace(lim=self.viewLim.frozen(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), bbox=self.bbox.frozen(), x=x, y=y)
A:matplotlib.axes._base.(dx, dy)->format_deltas(key, dx, dy)
A:matplotlib.axes._base.result->matplotlib.transforms.Bbox(newpoints).transformed(p.trans_inverse)
A:matplotlib.axes._base.alpha->numpy.power(10.0, (dx, dy))
A:matplotlib.axes._base.start->numpy.array([p.x, p.y])
A:matplotlib.axes._base.oldpoints->patch.get_path().lim.transformed(p.trans)
A:matplotlib.axes._base.valid->numpy.isfinite(result.transformed(p.trans))
A:matplotlib.axes._base.(inside, info)->self._default_contains(mouseevent)
A:matplotlib.axes._base.renderer->self.figure._get_renderer()
A:matplotlib.axes._base.ba->matplotlib.artist._get_tightbbox_for_layout_only(axis, renderer)
A:matplotlib.axes._base.axbbox->self.get_window_extent(renderer)
A:matplotlib.axes._base.bt->self.get_title(loc=k).get_window_extent(renderer)
A:matplotlib.axes._base.bbox_artists->self.get_default_bbox_extra_artists()
A:matplotlib.axes._base.bbox->a.get_tightbbox(renderer)
A:matplotlib.axes._base.ss->self.get_subplotspec()
A:matplotlib.axes._base.twin->self.figure.add_axes(self.get_position(True), *args, **kwargs, axes_locator=_TransformedBoundsLocator([0, 0, 1, 1], self.transAxes))
A:matplotlib.axes._base.ax2->self._make_twin_axes(sharey=self)
A:matplotlib.axes._base.label_position->self.yaxis.get_label_position()
matplotlib.axes._base._AxesBase(self,fig,*args,facecolor=None,frameon=True,sharex=None,sharey=None,label='',xscale=None,yscale=None,box_aspect=None,**kwargs)
matplotlib.axes._base._AxesBase.ArtistList(self,axes,prop_name,valid_types=None,invalid_types=None)
matplotlib.axes._base._AxesBase.ArtistList.__add__(self,other)
matplotlib.axes._base._AxesBase.ArtistList.__getitem__(self,key)
matplotlib.axes._base._AxesBase.ArtistList.__init__(self,axes,prop_name,valid_types=None,invalid_types=None)
matplotlib.axes._base._AxesBase.ArtistList.__iter__(self)
matplotlib.axes._base._AxesBase.ArtistList.__len__(self)
matplotlib.axes._base._AxesBase.ArtistList.__radd__(self,other)
matplotlib.axes._base._AxesBase.ArtistList.__repr__(self)
matplotlib.axes._base._AxesBase.__clear(self)
matplotlib.axes._base._AxesBase.__getstate__(self)
matplotlib.axes._base._AxesBase.__init__(self,fig,*args,facecolor=None,frameon=True,sharex=None,sharey=None,label='',xscale=None,yscale=None,box_aspect=None,**kwargs)
matplotlib.axes._base._AxesBase.__init_subclass__(cls,**kwargs)
matplotlib.axes._base._AxesBase.__repr__(self)
matplotlib.axes._base._AxesBase.__setstate__(self,state)
matplotlib.axes._base._AxesBase.__str__(self)
matplotlib.axes._base._AxesBase._add_text(self,txt)
matplotlib.axes._base._AxesBase._axis_map(self)
matplotlib.axes._base._AxesBase._gci(self)
matplotlib.axes._base._AxesBase._gen_axes_patch(self)
matplotlib.axes._base._AxesBase._gen_axes_spines(self,locations=None,offset=0.0,units='inches')
matplotlib.axes._base._AxesBase._get_pan_points(self,button,key,x,y)
matplotlib.axes._base._AxesBase._get_view(self)
matplotlib.axes._base._AxesBase._init_axis(self)
matplotlib.axes._base._AxesBase._label_outer_xaxis(self,*,check_patch)
matplotlib.axes._base._AxesBase._label_outer_yaxis(self,*,check_patch)
matplotlib.axes._base._AxesBase._make_twin_axes(self,*args,**kwargs)
matplotlib.axes._base._AxesBase._prepare_view_from_bbox(self,bbox,direction='in',mode=None,twinx=False,twiny=False)
matplotlib.axes._base._AxesBase._process_unit_info(self,datasets=None,kwargs=None,*,convert=True)
matplotlib.axes._base._AxesBase._request_autoscale_view(self,axis='all',tight=None)
matplotlib.axes._base._AxesBase._sci(self,im)
matplotlib.axes._base._AxesBase._set_artist_props(self,a)
matplotlib.axes._base._AxesBase._set_lim_and_transforms(self)
matplotlib.axes._base._AxesBase._set_position(self,pos,which='both')
matplotlib.axes._base._AxesBase._set_title_offset_trans(self,title_offset_points)
matplotlib.axes._base._AxesBase._set_view(self,view)
matplotlib.axes._base._AxesBase._set_view_from_bbox(self,bbox,direction='in',mode=None,twinx=False,twiny=False)
matplotlib.axes._base._AxesBase._unit_change_handler(self,axis_name,event=None)
matplotlib.axes._base._AxesBase._unstale_viewLim(self)
matplotlib.axes._base._AxesBase._update_image_limits(self,image)
matplotlib.axes._base._AxesBase._update_line_limits(self,line)
matplotlib.axes._base._AxesBase._update_patch_limits(self,patch)
matplotlib.axes._base._AxesBase._update_title_position(self,renderer)
matplotlib.axes._base._AxesBase._update_transScale(self)
matplotlib.axes._base._AxesBase._validate_converted_limits(self,limit,convert)
matplotlib.axes._base._AxesBase.add_artist(self,a)
matplotlib.axes._base._AxesBase.add_child_axes(self,ax)
matplotlib.axes._base._AxesBase.add_collection(self,collection,autolim=True)
matplotlib.axes._base._AxesBase.add_container(self,container)
matplotlib.axes._base._AxesBase.add_image(self,image)
matplotlib.axes._base._AxesBase.add_line(self,line)
matplotlib.axes._base._AxesBase.add_patch(self,p)
matplotlib.axes._base._AxesBase.add_table(self,tab)
matplotlib.axes._base._AxesBase.apply_aspect(self,position=None)
matplotlib.axes._base._AxesBase.artists(self)
matplotlib.axes._base._AxesBase.autoscale(self,enable=True,axis='both',tight=None)
matplotlib.axes._base._AxesBase.autoscale_view(self,tight=None,scalex=True,scaley=True)
matplotlib.axes._base._AxesBase.axis(self,arg=None,/,*,emit=True,**kwargs)
matplotlib.axes._base._AxesBase.can_pan(self)
matplotlib.axes._base._AxesBase.can_zoom(self)
matplotlib.axes._base._AxesBase.cla(self)
matplotlib.axes._base._AxesBase.clear(self)
matplotlib.axes._base._AxesBase.collections(self)
matplotlib.axes._base._AxesBase.contains(self,mouseevent)
matplotlib.axes._base._AxesBase.contains_point(self,point)
matplotlib.axes._base._AxesBase.drag_pan(self,button,key,x,y)
matplotlib.axes._base._AxesBase.draw(self,renderer)
matplotlib.axes._base._AxesBase.draw_artist(self,a)
matplotlib.axes._base._AxesBase.end_pan(self)
matplotlib.axes._base._AxesBase.format_coord(self,x,y)
matplotlib.axes._base._AxesBase.format_xdata(self,x)
matplotlib.axes._base._AxesBase.format_ydata(self,y)
matplotlib.axes._base._AxesBase.get_adjustable(self)
matplotlib.axes._base._AxesBase.get_anchor(self)
matplotlib.axes._base._AxesBase.get_aspect(self)
matplotlib.axes._base._AxesBase.get_autoscale_on(self)
matplotlib.axes._base._AxesBase.get_axes_locator(self)
matplotlib.axes._base._AxesBase.get_axisbelow(self)
matplotlib.axes._base._AxesBase.get_box_aspect(self)
matplotlib.axes._base._AxesBase.get_children(self)
matplotlib.axes._base._AxesBase.get_data_ratio(self)
matplotlib.axes._base._AxesBase.get_default_bbox_extra_artists(self)
matplotlib.axes._base._AxesBase.get_facecolor(self)
matplotlib.axes._base._AxesBase.get_frame_on(self)
matplotlib.axes._base._AxesBase.get_gridspec(self)
matplotlib.axes._base._AxesBase.get_images(self)
matplotlib.axes._base._AxesBase.get_legend(self)
matplotlib.axes._base._AxesBase.get_lines(self)
matplotlib.axes._base._AxesBase.get_navigate(self)
matplotlib.axes._base._AxesBase.get_navigate_mode(self)
matplotlib.axes._base._AxesBase.get_position(self,original=False)
matplotlib.axes._base._AxesBase.get_rasterization_zorder(self)
matplotlib.axes._base._AxesBase.get_renderer_cache(self)
matplotlib.axes._base._AxesBase.get_shared_x_axes(self)
matplotlib.axes._base._AxesBase.get_shared_y_axes(self)
matplotlib.axes._base._AxesBase.get_subplotspec(self)
matplotlib.axes._base._AxesBase.get_tightbbox(self,renderer=None,call_axes_locator=True,bbox_extra_artists=None,*,for_layout_only=False)
matplotlib.axes._base._AxesBase.get_window_extent(self,renderer=None,*args,**kwargs)
matplotlib.axes._base._AxesBase.get_xaxis(self)
matplotlib.axes._base._AxesBase.get_xaxis_text1_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_xaxis_text2_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_xaxis_transform(self,which='grid')
matplotlib.axes._base._AxesBase.get_xbound(self)
matplotlib.axes._base._AxesBase.get_xlabel(self)
matplotlib.axes._base._AxesBase.get_xlim(self)
matplotlib.axes._base._AxesBase.get_yaxis(self)
matplotlib.axes._base._AxesBase.get_yaxis_text1_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_yaxis_text2_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_yaxis_transform(self,which='grid')
matplotlib.axes._base._AxesBase.get_ybound(self)
matplotlib.axes._base._AxesBase.get_ylabel(self)
matplotlib.axes._base._AxesBase.get_ylim(self)
matplotlib.axes._base._AxesBase.grid(self,visible=None,which='major',axis='both',**kwargs)
matplotlib.axes._base._AxesBase.has_data(self)
matplotlib.axes._base._AxesBase.images(self)
matplotlib.axes._base._AxesBase.in_axes(self,mouseevent)
matplotlib.axes._base._AxesBase.invert_xaxis(self)
matplotlib.axes._base._AxesBase.invert_yaxis(self)
matplotlib.axes._base._AxesBase.label_outer(self)
matplotlib.axes._base._AxesBase.lines(self)
matplotlib.axes._base._AxesBase.locator_params(self,axis='both',tight=None,**kwargs)
matplotlib.axes._base._AxesBase.margins(self,*margins,x=None,y=None,tight=True)
matplotlib.axes._base._AxesBase.minorticks_off(self)
matplotlib.axes._base._AxesBase.minorticks_on(self)
matplotlib.axes._base._AxesBase.patches(self)
matplotlib.axes._base._AxesBase.redraw_in_frame(self)
matplotlib.axes._base._AxesBase.relim(self,visible_only=False)
matplotlib.axes._base._AxesBase.reset_position(self)
matplotlib.axes._base._AxesBase.set_adjustable(self,adjustable,share=False)
matplotlib.axes._base._AxesBase.set_anchor(self,anchor,share=False)
matplotlib.axes._base._AxesBase.set_aspect(self,aspect,adjustable=None,anchor=None,share=False)
matplotlib.axes._base._AxesBase.set_autoscale_on(self,b)
matplotlib.axes._base._AxesBase.set_axes_locator(self,locator)
matplotlib.axes._base._AxesBase.set_axis_off(self)
matplotlib.axes._base._AxesBase.set_axis_on(self)
matplotlib.axes._base._AxesBase.set_axisbelow(self,b)
matplotlib.axes._base._AxesBase.set_box_aspect(self,aspect=None)
matplotlib.axes._base._AxesBase.set_facecolor(self,color)
matplotlib.axes._base._AxesBase.set_figure(self,fig)
matplotlib.axes._base._AxesBase.set_frame_on(self,b)
matplotlib.axes._base._AxesBase.set_navigate(self,b)
matplotlib.axes._base._AxesBase.set_navigate_mode(self,b)
matplotlib.axes._base._AxesBase.set_position(self,pos,which='both')
matplotlib.axes._base._AxesBase.set_prop_cycle(self,*args,**kwargs)
matplotlib.axes._base._AxesBase.set_rasterization_zorder(self,z)
matplotlib.axes._base._AxesBase.set_subplotspec(self,subplotspec)
matplotlib.axes._base._AxesBase.set_xbound(self,lower=None,upper=None)
matplotlib.axes._base._AxesBase.set_xlabel(self,xlabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.axes._base._AxesBase.set_xlim(self,left=None,right=None,emit=True,auto=False,*,xmin=None,xmax=None)
matplotlib.axes._base._AxesBase.set_xmargin(self,m)
matplotlib.axes._base._AxesBase.set_ybound(self,lower=None,upper=None)
matplotlib.axes._base._AxesBase.set_ylabel(self,ylabel,fontdict=None,labelpad=None,*,loc=None,**kwargs)
matplotlib.axes._base._AxesBase.set_ylim(self,bottom=None,top=None,emit=True,auto=False,*,ymin=None,ymax=None)
matplotlib.axes._base._AxesBase.set_ymargin(self,m)
matplotlib.axes._base._AxesBase.sharex(self,other)
matplotlib.axes._base._AxesBase.sharey(self,other)
matplotlib.axes._base._AxesBase.start_pan(self,x,y,button)
matplotlib.axes._base._AxesBase.tables(self)
matplotlib.axes._base._AxesBase.texts(self)
matplotlib.axes._base._AxesBase.tick_params(self,axis='both',**kwargs)
matplotlib.axes._base._AxesBase.ticklabel_format(self,*,axis='both',style='',scilimits=None,useOffset=None,useLocale=None,useMathText=None)
matplotlib.axes._base._AxesBase.twinx(self)
matplotlib.axes._base._AxesBase.twiny(self)
matplotlib.axes._base._AxesBase.update_datalim(self,xys,updatex=True,updatey=True)
matplotlib.axes._base._AxesBase.use_sticky_edges(self)
matplotlib.axes._base._AxesBase.use_sticky_edges(self,b)
matplotlib.axes._base._AxesBase.viewLim(self)
matplotlib.axes._base._TransformedBoundsLocator(self,bounds,transform)
matplotlib.axes._base._TransformedBoundsLocator.__init__(self,bounds,transform)
matplotlib.axes._base._axis_method_wrapper(self,attr_name,method_name,*,doc_sub=None)
matplotlib.axes._base._axis_method_wrapper.__init__(self,attr_name,method_name,*,doc_sub=None)
matplotlib.axes._base._axis_method_wrapper.__set_name__(self,owner,name)
matplotlib.axes._base._draw_rasterized(figure,artists,renderer)
matplotlib.axes._base._process_plot_format(fmt,*,ambiguous_fmt_datakey=False)
matplotlib.axes._base._process_plot_var_args(self,axes,command='plot')
matplotlib.axes._base._process_plot_var_args.__getstate__(self)
matplotlib.axes._base._process_plot_var_args.__init__(self,axes,command='plot')
matplotlib.axes._base._process_plot_var_args.__setstate__(self,state)
matplotlib.axes._base._process_plot_var_args._getdefaults(self,ignore,kw)
matplotlib.axes._base._process_plot_var_args._makefill(self,x,y,kw,kwargs)
matplotlib.axes._base._process_plot_var_args._makeline(self,x,y,kw,kwargs)
matplotlib.axes._base._process_plot_var_args._plot_args(self,tup,kwargs,*,return_kwargs=False,ambiguous_fmt_datakey=False)
matplotlib.axes._base._process_plot_var_args._setdefaults(self,defaults,kw)
matplotlib.axes._base._process_plot_var_args.get_next_color(self)
matplotlib.axes._base._process_plot_var_args.set_prop_cycle(self,cycler)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib3.7.2/axes/__init__.py----------------------------------------
matplotlib.axes.__init__.SubplotBase(metaclass=_SubplotBaseMeta)
matplotlib.axes.__init__._SubplotBaseMeta(type)
matplotlib.axes.__init__._SubplotBaseMeta.__instancecheck__(self,obj)
matplotlib.axes.__init__.subplot_class_factory(cls)

