
----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backend_managers.py----------------------------------------
A:matplotlib.backend_managers.self._callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.backend_managers.self.keypresslock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_managers.self.messagelock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_managers.self._key_press_handler_id->self.canvas.mpl_connect('key_press_event', self._key_press)
A:matplotlib.backend_managers.event->ToolTriggerEvent(s, sender, tool, canvasevent, data)
A:matplotlib.backend_managers.tool->self.get_tool(name)
A:matplotlib.backend_managers.tool_cls->self._get_cls_to_instantiate(tool)
A:matplotlib.backend_managers.tool_obj->tool_cls(self, name, *args, **kwargs)
A:matplotlib.backend_managers.current_module->__import__(mod, globals(), locals(), [mod], 1)
A:matplotlib.backend_managers.callback_class->getattr(current_module, callback_class, False)
A:matplotlib.backend_managers.name->self._keys.get(event.key, None)
matplotlib.backend_managers.ToolEvent(self,name,sender,tool,data=None)
matplotlib.backend_managers.ToolEvent.__init__(self,name,sender,tool,data=None)
matplotlib.backend_managers.ToolManager(self,figure=None)
matplotlib.backend_managers.ToolManager.__init__(self,figure=None)
matplotlib.backend_managers.ToolManager._get_cls_to_instantiate(self,callback_class)
matplotlib.backend_managers.ToolManager._handle_toggle(self,tool,sender,canvasevent,data)
matplotlib.backend_managers.ToolManager._key_press(self,event)
matplotlib.backend_managers.ToolManager._remove_keys(self,name)
matplotlib.backend_managers.ToolManager._tool_added_event(self,tool)
matplotlib.backend_managers.ToolManager._trigger_tool(self,name,sender=None,canvasevent=None,data=None)
matplotlib.backend_managers.ToolManager.active_toggle(self)
matplotlib.backend_managers.ToolManager.add_tool(self,name,tool,*args,**kwargs)
matplotlib.backend_managers.ToolManager.canvas(self)
matplotlib.backend_managers.ToolManager.figure(self)
matplotlib.backend_managers.ToolManager.figure(self,figure)
matplotlib.backend_managers.ToolManager.get_tool(self,name,warn=True)
matplotlib.backend_managers.ToolManager.get_tool_keymap(self,name)
matplotlib.backend_managers.ToolManager.message_event(self,message,sender=None)
matplotlib.backend_managers.ToolManager.remove_tool(self,name)
matplotlib.backend_managers.ToolManager.set_figure(self,figure,update_tools=True)
matplotlib.backend_managers.ToolManager.toolmanager_connect(self,s,func)
matplotlib.backend_managers.ToolManager.toolmanager_disconnect(self,cid)
matplotlib.backend_managers.ToolManager.tools(self)
matplotlib.backend_managers.ToolManager.trigger_tool(self,name,sender=None,canvasevent=None,data=None)
matplotlib.backend_managers.ToolManager.update_keymap(self,name,*keys)
matplotlib.backend_managers.ToolManagerMessageEvent(self,name,sender,message)
matplotlib.backend_managers.ToolManagerMessageEvent.__init__(self,name,sender,message)
matplotlib.backend_managers.ToolTriggerEvent(self,name,sender,tool,canvasevent=None,data=None)
matplotlib.backend_managers.ToolTriggerEvent.__init__(self,name,sender,tool,canvasevent=None,data=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/container.py----------------------------------------
A:matplotlib.container.d->self.__dict__.copy()
matplotlib.container.BarContainer(self,patches,errorbar=None,**kwargs)
matplotlib.container.BarContainer.__init__(self,patches,errorbar=None,**kwargs)
matplotlib.container.Container(self,kl,label=None)
matplotlib.container.Container.__getstate__(self)
matplotlib.container.Container.__init__(self,kl,label=None)
matplotlib.container.Container.__repr__(self)
matplotlib.container.Container.add_callback(self,func)
matplotlib.container.Container.get_children(self)
matplotlib.container.Container.get_label(self)
matplotlib.container.Container.pchanged(self)
matplotlib.container.Container.remove(self)
matplotlib.container.Container.remove_callback(self,oid)
matplotlib.container.Container.set_label(self,s)
matplotlib.container.Container.set_remove_method(self,f)
matplotlib.container.ErrorbarContainer(self,lines,has_xerr=False,has_yerr=False,**kwargs)
matplotlib.container.ErrorbarContainer.__init__(self,lines,has_xerr=False,has_yerr=False,**kwargs)
matplotlib.container.StemContainer(self,markerline_stemlines_baseline,**kwargs)
matplotlib.container.StemContainer.__init__(self,markerline_stemlines_baseline,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/blocking_input.py----------------------------------------
A:matplotlib.blocking_input._log->logging.getLogger(__name__)
A:matplotlib.blocking_input.key->event.key.lower()
A:matplotlib.blocking_input.line->matplotlib.lines.Line2D([event.xdata], [event.ydata], marker='+', color='r')
A:matplotlib.blocking_input.mark->self.marks.pop(index)
matplotlib.blocking_input.BlockingContourLabeler(self,cs)
matplotlib.blocking_input.BlockingContourLabeler.__init__(self,cs)
matplotlib.blocking_input.BlockingContourLabeler.add_click(self,event)
matplotlib.blocking_input.BlockingContourLabeler.button1(self,event)
matplotlib.blocking_input.BlockingContourLabeler.button3(self,event)
matplotlib.blocking_input.BlockingContourLabeler.pop_click(self,event,index=-1)
matplotlib.blocking_input.BlockingInput(self,fig,eventslist=())
matplotlib.blocking_input.BlockingInput.__init__(self,fig,eventslist=())
matplotlib.blocking_input.BlockingInput.add_event(self,event)
matplotlib.blocking_input.BlockingInput.cleanup(self)
matplotlib.blocking_input.BlockingInput.on_event(self,event)
matplotlib.blocking_input.BlockingInput.pop(self,index=-1)
matplotlib.blocking_input.BlockingInput.pop_event(self,index=-1)
matplotlib.blocking_input.BlockingInput.post_event(self)
matplotlib.blocking_input.BlockingKeyMouseInput(self,fig)
matplotlib.blocking_input.BlockingKeyMouseInput.__init__(self,fig)
matplotlib.blocking_input.BlockingKeyMouseInput.post_event(self)
matplotlib.blocking_input.BlockingMouseInput(self,fig,mouse_add=1,mouse_pop=3,mouse_stop=2)
matplotlib.blocking_input.BlockingMouseInput.__init__(self,fig,mouse_add=1,mouse_pop=3,mouse_stop=2)
matplotlib.blocking_input.BlockingMouseInput.add_click(self,event)
matplotlib.blocking_input.BlockingMouseInput.cleanup(self,event=None)
matplotlib.blocking_input.BlockingMouseInput.key_event(self)
matplotlib.blocking_input.BlockingMouseInput.mouse_event(self)
matplotlib.blocking_input.BlockingMouseInput.mouse_event_add(self,event)
matplotlib.blocking_input.BlockingMouseInput.mouse_event_pop(self,event)
matplotlib.blocking_input.BlockingMouseInput.mouse_event_stop(self,event)
matplotlib.blocking_input.BlockingMouseInput.pop(self,event,index=-1)
matplotlib.blocking_input.BlockingMouseInput.pop_click(self,event,index=-1)
matplotlib.blocking_input.BlockingMouseInput.post_event(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sankey.py----------------------------------------
A:matplotlib.sankey._log->logging.getLogger(__name__)
A:matplotlib.sankey.fig->matplotlib.pyplot.figure()
A:matplotlib.sankey.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1, xticks=[], yticks=[])
A:matplotlib.sankey.self.pitch->numpy.tan(np.pi * (1 - head_angle / 180.0) / 2.0)
A:matplotlib.sankey.self.extent->numpy.array((np.inf, -np.inf, np.inf, -np.inf))
A:matplotlib.sankey.ARC_VERTICES->numpy.array([[1.0, 0.0], [1.0, 0.265114773], [0.894571235, 0.519642327], [0.707106781, 0.707106781], [0.519642327, 0.894571235], [0.265114773, 1.0], [0.0, 1.0]])
A:matplotlib.sankey.vertices->translate(rotate(vertices))
A:matplotlib.sankey.flows->numpy.array(flows)
A:matplotlib.sankey.gain->sum((max(flow, 0) for flow in scaled_flows))
A:matplotlib.sankey.loss->sum((min(flow, 0) for flow in scaled_flows))
A:matplotlib.sankey.d->dict(RIGHT=pathlengths)
A:matplotlib.sankey.tips->translate(tips)
A:matplotlib.sankey.label_locations->translate(rotate(label_locations))
A:matplotlib.sankey.(tips[i, :], label_locations[i, :])->self._add_output(urpath, angle, *spec)
A:matplotlib.sankey.(tip, label_location)->self._add_input(llpath, angle, *spec)
A:matplotlib.sankey.(codes, vertices)->zip(*path)
A:matplotlib.sankey.text->self.ax.text(*offset, **kwds)
A:matplotlib.sankey.kwds->dict(s=patchlabel, ha='center', va='center')
A:matplotlib.sankey.fc->kwargs.pop('fc', kwargs.pop('facecolor', None))
A:matplotlib.sankey.lw->kwargs.pop('lw', kwargs.pop('linewidth', None))
A:matplotlib.sankey.patch->PathPatch(Path(vertices, codes), fc=fc, lw=lw, **kwargs)
matplotlib.sankey.Sankey(self,ax=None,scale=1.0,unit='',format='%G',gap=0.25,radius=0.1,shoulder=0.03,offset=0.15,head_angle=100,margin=0.4,tolerance=1e-06,**kwargs)
matplotlib.sankey.Sankey.__init__(self,ax=None,scale=1.0,unit='',format='%G',gap=0.25,radius=0.1,shoulder=0.03,offset=0.15,head_angle=100,margin=0.4,tolerance=1e-06,**kwargs)
matplotlib.sankey.Sankey._add_input(self,path,angle,flow,length)
matplotlib.sankey.Sankey._add_output(self,path,angle,flow,length)
matplotlib.sankey.Sankey._arc(self,quadrant=0,cw=True,radius=1,center=(0,0))
matplotlib.sankey.Sankey._revert(self,path,first_action=Path.LINETO)
matplotlib.sankey.Sankey.add(self,patchlabel='',flows=None,orientations=None,labels='',trunklength=1.0,pathlengths=0.25,prior=None,connect=(0,0),rotation=0,**kwargs)
matplotlib.sankey.Sankey.finish(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_color_data.py----------------------------------------
A:matplotlib._color_data.TABLEAU_COLORS->OrderedDict((('tab:' + name, value) for (name, value) in TABLEAU_COLORS))


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tight_layout.py----------------------------------------
A:matplotlib.tight_layout.ax_bbox->union([ax.get_position(original=True) for ax in subplots])
A:matplotlib.tight_layout.tight_bbox_raw->union([ax.get_tightbbox(renderer) for ax in subplots if ax.get_visible()])
A:matplotlib.tight_layout.tight_bbox->TransformedBbox(tight_bbox_raw, fig.transFigure.inverted())
A:matplotlib.tight_layout.(row1, col1)->divmod(num1, cols)
A:matplotlib.tight_layout.(row2, col2)->divmod(num2, cols)
A:matplotlib.tight_layout.(fig_width_inch, fig_height_inch)->fig.get_size_inches()
A:matplotlib.tight_layout.margin_left->max([sum(s) for s in hspaces[::cols + 1]] + [0])
A:matplotlib.tight_layout.margin_right->max([sum(s) for s in hspaces[cols::cols + 1]] + [0])
A:matplotlib.tight_layout.margin_top->max([sum(s) for s in vspaces[:cols]] + [0])
A:matplotlib.tight_layout.margin_bottom->max([sum(s) for s in vspaces[-cols:]] + [0])
A:matplotlib.tight_layout.kwargs->auto_adjust_subplotpars(fig, renderer, nrows_ncols=(max_nrows, max_ncols), num1num2_list=num1num2_list, subplot_list=subplot_list, ax_bbox_list=ax_bbox_list, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=(left, bottom, right, top))
A:matplotlib.tight_layout.renderer->FigureCanvasAgg(fig).get_renderer()
A:matplotlib.tight_layout.canvas->FigureCanvasAgg(fig)
A:matplotlib.tight_layout.axes_or_locator->ax.get_axes_locator()
A:matplotlib.tight_layout.subplotspec->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec()
A:matplotlib.tight_layout.gs->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec().get_gridspec()
A:matplotlib.tight_layout.subplots->subplot_dict.setdefault(subplotspec, [])
A:matplotlib.tight_layout.(myrows, mycols, _, _)->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec().get_geometry()
A:matplotlib.tight_layout.max_nrows->max(nrows_list)
A:matplotlib.tight_layout.max_ncols->max(ncols_list)
A:matplotlib.tight_layout.(rows, cols, num1, num2)->subplotspec.get_topmost_subplotspec().get_topmost_subplotspec().get_geometry()
A:matplotlib.tight_layout.(div_row, mod_row)->divmod(max_nrows, rows)
A:matplotlib.tight_layout.(div_col, mod_col)->divmod(max_ncols, cols)
A:matplotlib.tight_layout.(rowNum1, colNum1)->divmod(num1, cols)
A:matplotlib.tight_layout.(rowNum2, colNum2)->divmod(num2, cols)
matplotlib.tight_layout._get_bottom(tight_bbox,axes_bbox)
matplotlib.tight_layout._get_left(tight_bbox,axes_bbox)
matplotlib.tight_layout._get_right(tight_bbox,axes_bbox)
matplotlib.tight_layout._get_top(tight_bbox,axes_bbox)
matplotlib.tight_layout.auto_adjust_subplotpars(fig,renderer,nrows_ncols,num1num2_list,subplot_list,ax_bbox_list=None,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.tight_layout.get_renderer(fig)
matplotlib.tight_layout.get_subplotspec_list(axes_list,grid_spec=None)
matplotlib.tight_layout.get_tight_layout_figure(fig,axes_list,subplotspec_list,renderer,pad=1.08,h_pad=None,w_pad=None,rect=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/category.py----------------------------------------
A:matplotlib.category.VALID_TYPES->tuple(set(six.string_types + (bytes, six.text_type, np.str_, np.bytes_)))
A:matplotlib.category.values->numpy.atleast_1d(np.array(value, dtype=object))
A:matplotlib.category.str2idx->numpy.vectorize(unit._mapping.__getitem__, otypes=[float])
A:matplotlib.category.mapped_value->str2idx(values)
A:matplotlib.category.majloc->StrCategoryLocator(unit._mapping)
A:matplotlib.category.majfmt->StrCategoryFormatter(unit._mapping)
A:matplotlib.category.value->str(value)
A:matplotlib.category.self._mapping->OrderedDict()
A:matplotlib.category.self._counter->itertools.count(start=0)
A:matplotlib.category.data->numpy.atleast_1d(np.array(data, dtype=object))
A:matplotlib.category.self._mapping[val]->next(self._counter)
A:matplotlib.category.units.registry[str]->StrCategoryConverter()
A:matplotlib.category.units.registry[np.str_]->StrCategoryConverter()
A:matplotlib.category.units.registry[six.text_type]->StrCategoryConverter()
A:matplotlib.category.units.registry[bytes]->StrCategoryConverter()
A:matplotlib.category.units.registry[np.bytes_]->StrCategoryConverter()
matplotlib.category.StrCategoryConverter(units.ConversionInterface)
matplotlib.category.StrCategoryConverter.axisinfo(unit,axis)
matplotlib.category.StrCategoryConverter.convert(value,unit,axis)
matplotlib.category.StrCategoryConverter.default_units(data,axis)
matplotlib.category.StrCategoryFormatter(self,units_mapping)
matplotlib.category.StrCategoryFormatter.__init__(self,units_mapping)
matplotlib.category.StrCategoryFormatter._text(value)
matplotlib.category.StrCategoryLocator(self,units_mapping)
matplotlib.category.StrCategoryLocator.__init__(self,units_mapping)
matplotlib.category.StrCategoryLocator.tick_values(self,vmin,vmax)
matplotlib.category.UnitData(self,data=None)
matplotlib.category.UnitData.__init__(self,data=None)
matplotlib.category.UnitData.update(self,data)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tight_bbox.py----------------------------------------
A:matplotlib.tight_bbox.pos->ax.get_position(original=False).frozen()
A:matplotlib.tight_bbox.tr->Affine2D().scale(fig.dpi)
A:matplotlib.tight_bbox._bbox->TransformedBbox(bbox_inches, tr)
A:matplotlib.tight_bbox.fig.bbox_inches->matplotlib.transforms.Bbox.from_bounds(0, 0, bbox_inches.width, bbox_inches.height)
A:matplotlib.tight_bbox.fig.transFigure._boxout->matplotlib.transforms.Bbox.from_bounds(-x0, -y0, w1, h1)
A:matplotlib.tight_bbox.fig.bbox->TransformedBbox(fig.bbox_inches, tr)
A:matplotlib.tight_bbox.r->adjust_bbox(fig, bbox_inches, fixed_dpi)
matplotlib.tight_bbox.adjust_bbox(fig,bbox_inches,fixed_dpi=None)
matplotlib.tight_bbox.process_figure_for_rasterizing(fig,bbox_inches_restore,fixed_dpi=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/scale.py----------------------------------------
A:matplotlib.scale.out->numpy.log10(a / (1 - a))
A:matplotlib.scale.base->kwargs.pop('basey', 10.0)
A:matplotlib.scale.subs->kwargs.pop('subsy', None)
A:matplotlib.scale.nonpos->kwargs.pop('nonposy', 'clip')
A:matplotlib.scale.self._transform->LogitTransform(nonpos)
A:matplotlib.scale.self._log_base->numpy.log(base)
A:matplotlib.scale.sign->numpy.sign(a)
A:matplotlib.scale.masked->numpy.ma.masked_inside(a, -self.invlinthresh, self.invlinthresh, copy=False)
A:matplotlib.scale.symlog->SymmetricalLogTransform(base, linthresh, linscale)
A:matplotlib.scale.self.invlinthresh->SymmetricalLogTransform(base, linthresh, linscale).transform(linthresh)
A:matplotlib.scale.linthresh->kwargs.pop('linthreshy', 2.0)
A:matplotlib.scale.linscale->kwargs.pop('linscaley', 1.0)
A:matplotlib.scale.scale->scale.lower().lower()
A:matplotlib.scale.class_docs->''.join(['        %s\n' % x for x in class_docs.split('\n')])
matplotlib.scale.InvertedLog10Transform(InvertedLogTransformBase)
matplotlib.scale.InvertedLog10Transform.inverted(self)
matplotlib.scale.InvertedLog2Transform(InvertedLogTransformBase)
matplotlib.scale.InvertedLog2Transform.inverted(self)
matplotlib.scale.InvertedLogTransform(self,base)
matplotlib.scale.InvertedLogTransform.__init__(self,base)
matplotlib.scale.InvertedLogTransform.inverted(self)
matplotlib.scale.InvertedLogTransformBase(Transform)
matplotlib.scale.InvertedLogTransformBase.__str__(self)
matplotlib.scale.InvertedLogTransformBase.transform_non_affine(self,a)
matplotlib.scale.InvertedNaturalLogTransform(InvertedLogTransformBase)
matplotlib.scale.InvertedNaturalLogTransform.inverted(self)
matplotlib.scale.InvertedSymmetricalLogTransform(self,base,linthresh,linscale)
matplotlib.scale.InvertedSymmetricalLogTransform.__init__(self,base,linthresh,linscale)
matplotlib.scale.InvertedSymmetricalLogTransform.inverted(self)
matplotlib.scale.InvertedSymmetricalLogTransform.transform_non_affine(self,a)
matplotlib.scale.LinearScale(self,axis,**kwargs)
matplotlib.scale.LinearScale.__init__(self,axis,**kwargs)
matplotlib.scale.LinearScale.get_transform(self)
matplotlib.scale.LinearScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.Log10Transform(LogTransformBase)
matplotlib.scale.Log10Transform.inverted(self)
matplotlib.scale.Log2Transform(LogTransformBase)
matplotlib.scale.Log2Transform.inverted(self)
matplotlib.scale.LogScale(self,axis,**kwargs)
matplotlib.scale.LogScale.__init__(self,axis,**kwargs)
matplotlib.scale.LogScale.get_transform(self)
matplotlib.scale.LogScale.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.LogScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.LogTransform(self,base,nonpos='clip')
matplotlib.scale.LogTransform.__init__(self,base,nonpos='clip')
matplotlib.scale.LogTransform.inverted(self)
matplotlib.scale.LogTransformBase(self,nonpos='clip')
matplotlib.scale.LogTransformBase.__init__(self,nonpos='clip')
matplotlib.scale.LogTransformBase.__str__(self)
matplotlib.scale.LogTransformBase.transform_non_affine(self,a)
matplotlib.scale.LogisticTransform(self,nonpos='mask')
matplotlib.scale.LogisticTransform.__init__(self,nonpos='mask')
matplotlib.scale.LogisticTransform.__str__(self)
matplotlib.scale.LogisticTransform.inverted(self)
matplotlib.scale.LogisticTransform.transform_non_affine(self,a)
matplotlib.scale.LogitScale(self,axis,nonpos='mask')
matplotlib.scale.LogitScale.__init__(self,axis,nonpos='mask')
matplotlib.scale.LogitScale.get_transform(self)
matplotlib.scale.LogitScale.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.LogitScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.LogitTransform(self,nonpos='mask')
matplotlib.scale.LogitTransform.__init__(self,nonpos='mask')
matplotlib.scale.LogitTransform.__str__(self)
matplotlib.scale.LogitTransform.inverted(self)
matplotlib.scale.LogitTransform.transform_non_affine(self,a)
matplotlib.scale.NaturalLogTransform(LogTransformBase)
matplotlib.scale.NaturalLogTransform.inverted(self)
matplotlib.scale.ScaleBase(object)
matplotlib.scale.ScaleBase.get_transform(self)
matplotlib.scale.ScaleBase.limit_range_for_scale(self,vmin,vmax,minpos)
matplotlib.scale.ScaleBase.set_default_locators_and_formatters(self,axis)
matplotlib.scale.SymmetricalLogScale(self,axis,**kwargs)
matplotlib.scale.SymmetricalLogScale.__init__(self,axis,**kwargs)
matplotlib.scale.SymmetricalLogScale.get_transform(self)
matplotlib.scale.SymmetricalLogScale.set_default_locators_and_formatters(self,axis)
matplotlib.scale.SymmetricalLogTransform(self,base,linthresh,linscale)
matplotlib.scale.SymmetricalLogTransform.__init__(self,base,linthresh,linscale)
matplotlib.scale.SymmetricalLogTransform.inverted(self)
matplotlib.scale.SymmetricalLogTransform.transform_non_affine(self,a)
matplotlib.scale.get_scale_docs()
matplotlib.scale.get_scale_names()
matplotlib.scale.register_scale(scale_class)
matplotlib.scale.scale_factory(scale,axis,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/hatch.py----------------------------------------
A:matplotlib.hatch.self.num_lines->int((hatch.count('\\') + hatch.count('x') + hatch.count('X')) * density)
A:matplotlib.hatch.(steps, stepsize)->numpy.linspace(0.0, 1.0, self.num_lines, False, retstep=True)
A:matplotlib.hatch.steps->numpy.linspace(-0.5, 0.5, self.num_lines + 1, True)
A:matplotlib.hatch.shape_size->len(shape_vertices)
A:matplotlib.hatch.cols->numpy.linspace(offset / 2.0, 1.0 - offset / 2.0, self.num_rows, True)
A:matplotlib.hatch.path->matplotlib.path.Path.unit_regular_star(5)
A:matplotlib.hatch.density->int(density)
A:matplotlib.hatch.num_vertices->sum([pattern.num_vertices for pattern in patterns])
A:matplotlib.hatch.vertices->numpy.empty((num_vertices, 2))
A:matplotlib.hatch.codes->numpy.empty((num_vertices,), np.uint8)
matplotlib.hatch.Circles(self,hatch,density)
matplotlib.hatch.Circles.__init__(self,hatch,density)
matplotlib.hatch.HatchPatternBase(object)
matplotlib.hatch.HorizontalHatch(self,hatch,density)
matplotlib.hatch.HorizontalHatch.__init__(self,hatch,density)
matplotlib.hatch.HorizontalHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.LargeCircles(self,hatch,density)
matplotlib.hatch.LargeCircles.__init__(self,hatch,density)
matplotlib.hatch.NorthEastHatch(self,hatch,density)
matplotlib.hatch.NorthEastHatch.__init__(self,hatch,density)
matplotlib.hatch.NorthEastHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.Shapes(self,hatch,density)
matplotlib.hatch.Shapes.__init__(self,hatch,density)
matplotlib.hatch.Shapes.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.SmallCircles(self,hatch,density)
matplotlib.hatch.SmallCircles.__init__(self,hatch,density)
matplotlib.hatch.SmallFilledCircles(self,hatch,density)
matplotlib.hatch.SmallFilledCircles.__init__(self,hatch,density)
matplotlib.hatch.SouthEastHatch(self,hatch,density)
matplotlib.hatch.SouthEastHatch.__init__(self,hatch,density)
matplotlib.hatch.SouthEastHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.Stars(self,hatch,density)
matplotlib.hatch.Stars.__init__(self,hatch,density)
matplotlib.hatch.VerticalHatch(self,hatch,density)
matplotlib.hatch.VerticalHatch.__init__(self,hatch,density)
matplotlib.hatch.VerticalHatch.set_vertices_and_codes(self,vertices,codes)
matplotlib.hatch.get_path(hatchpattern,density=6)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/pylab.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/ticker.py----------------------------------------
A:matplotlib.ticker.x->int(np.round(10 ** (np.log10(majorstep) % 1)))
A:matplotlib.ticker.y->y.item().item()
A:matplotlib.ticker.self.dataLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.ticker.self.viewLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.ticker.self.axis->_DummyAxis(**kwargs)
A:matplotlib.ticker.self.n->len(labels)
A:matplotlib.ticker.i->int(x + 0.5)
A:matplotlib.ticker.(xmin, xmax)->self.axis.get_view_interval()
A:matplotlib.ticker.d->abs(d)
A:matplotlib.ticker.tup->'{x:0.{decimals}f}'.format(x=x, decimals=int(decimals)).split('e')
A:matplotlib.ticker.mantissa->tup[0].rstrip('0').rstrip('.')
A:matplotlib.ticker.sign->tup[1][0].replace(positive_sign, '')
A:matplotlib.ticker.exponent->math.floor(fx)
A:matplotlib.ticker.s->'{x:0.{decimals}f}'.format(x=x, decimals=int(decimals))
A:matplotlib.ticker.useOffset->property(fget=get_useOffset, fset=set_useOffset)
A:matplotlib.ticker.useLocale->property(fget=get_useLocale, fset=set_useLocale)
A:matplotlib.ticker.useMathText->property(fget=get_useMathText, fset=set_useMathText)
A:matplotlib.ticker.self._scientific->bool(b)
A:matplotlib.ticker.offsetStr->self.format_data(self.offset)
A:matplotlib.ticker.sciNotStr->self.format_data(10 ** self.orderOfMagnitude)
A:matplotlib.ticker.(vmin, vmax)->matplotlib.transforms.nonsingular(vmin, vmax, expander=0.05)
A:matplotlib.ticker.locs->locs.compress(cond).compress(cond)
A:matplotlib.ticker.(abs_min, abs_max)->sorted([abs(float(lmin)), abs(float(lmax))])
A:matplotlib.ticker.oom_max->numpy.ceil(math.log10(abs_max))
A:matplotlib.ticker.oom->math.floor(math.log10(val))
A:matplotlib.ticker.loc_range->numpy.max(np.abs(locs))
A:matplotlib.ticker.loc_range_oom->int(math.floor(math.log10(loc_range)))
A:matplotlib.ticker.sigfigs->max(0, 3 - loc_range_oom)
A:matplotlib.ticker.significand->tup[0].rstrip('0').rstrip(decimal_point)
A:matplotlib.ticker.self._base->float(base)
A:matplotlib.ticker.self._sublabels->set(np.arange(1, b + 1))
A:matplotlib.ticker.rhs->min(vmax, -linthresh)
A:matplotlib.ticker.lhs->max(vmin, linthresh)
A:matplotlib.ticker.numdec->abs(vmax - vmin)
A:matplotlib.ticker.c->numpy.logspace(0, 1, int(b) // 2 + 1, base=b)
A:matplotlib.ticker.is_x_decade->is_close_to_int(fx)
A:matplotlib.ticker.coeff->nearest_long(coeff)
A:matplotlib.ticker.value->matplotlib.cbook.strip_math(self.__call__(value))
A:matplotlib.ticker.fx->nearest_long(fx)
A:matplotlib.ticker.b->float(base)
A:matplotlib.ticker.dnum->float(num)
A:matplotlib.ticker.pow10->numpy.clip(pow10, min(self.ENG_PREFIXES), max(self.ENG_PREFIXES))
A:matplotlib.ticker._fmant->float('{mant:{fmt}}'.format(mant=mant, fmt=fmt))
A:matplotlib.ticker.formatted->'{mant:{fmt}}{sep}{prefix}'.format(mant=mant, sep=self.sep, prefix=prefix, fmt=fmt)
A:matplotlib.ticker.(ax_min, ax_max)->self.axis.get_view_interval()
A:matplotlib.ticker.display_range->abs(ax_max - ax_min)
A:matplotlib.ticker.scaled_range->self.convert_to_pct(display_range)
A:matplotlib.ticker.decimals->math.ceil(2.0 - math.log10(2.0 * scaled_range))
A:matplotlib.ticker.symbol->symbol.replace(spec, '\\' + spec).replace(spec, '\\' + spec)
A:matplotlib.ticker.ticks->self()
A:matplotlib.ticker.numticks->numpy.clip(self.axis.get_tick_space(), 2, 9)
A:matplotlib.ticker.interval->abs(vmax - vmin)
A:matplotlib.ticker.(dmin, dmax)->matplotlib.transforms.nonsingular(dmin, dmax, expander=1e-12, tiny=1e-13)
A:matplotlib.ticker.self.locs->numpy.asarray(locs)
A:matplotlib.ticker.self.nbins->max(self.nbins, 2)
A:matplotlib.ticker.step->max(1, step)
A:matplotlib.ticker.ticklocs->numpy.ravel(np.outer(subs, ticklocs))
A:matplotlib.ticker.(exponent, remainder)->_divmod(math.log10(vmax - vmin), math.log10(max(self.numticks - 1, 1)))
A:matplotlib.ticker.(d, m)->_divmod(x, self._base)
A:matplotlib.ticker.vmin->numpy.log10(vmin / (1 - vmin))
A:matplotlib.ticker.base->self._base.get_base()
A:matplotlib.ticker.vmax->numpy.log10(vmax / (1 - vmax))
A:matplotlib.ticker.dv->abs(vmax - vmin)
A:matplotlib.ticker.offset->math.copysign(10 ** (math.log10(abs(meanv)) // 1), meanv)
A:matplotlib.ticker.default_params->dict(nbins=10, steps=None, integer=False, symmetric=False, prune=None, min_n_ticks=2)
A:matplotlib.ticker.steps->numpy.hstack((steps, 10))
A:matplotlib.ticker.self._nbins->int(self._nbins)
A:matplotlib.ticker.self._min_n_ticks->max(1, kwargs['min_n_ticks'])
A:matplotlib.ticker.self._steps->self._validate_steps(steps)
A:matplotlib.ticker.self._extended_steps->self._staircase(self._steps)
A:matplotlib.ticker.nbins->numpy.clip(self.axis.get_tick_space(), max(1, self._min_n_ticks - 1), 9)
A:matplotlib.ticker.(scale, offset)->scale_range(vmin, vmax, nbins)
A:matplotlib.ticker.low->numpy.round(Base(step).le(_vmin - best_vmin) / step)
A:matplotlib.ticker.high->numpy.round(Base(step).ge(_vmax - best_vmin) / step)
A:matplotlib.ticker.nticks->((ticks <= vmax) & (ticks >= vmin)).sum()
A:matplotlib.ticker.dmax->max(abs(dmin), abs(dmax))
A:matplotlib.ticker.lx->numpy.ceil(np.log(x) / np.log(base))
A:matplotlib.ticker.self._subs->numpy.asarray(subs, dtype=float)
A:matplotlib.ticker.decades->numpy.arange(math.floor(vmin) - stride, math.ceil(vmax) + 2 * stride, stride)
A:matplotlib.ticker.subs->numpy.asarray(self._subs)
A:matplotlib.ticker.minpos->self.axis.get_minpos()
A:matplotlib.ticker.lo->numpy.floor(np.log(lo) / np.log(b))
A:matplotlib.ticker.hi->numpy.ceil(np.log(hi) / np.log(b))
A:matplotlib.ticker.a_range->get_log_range(-vmax, -vmin + 1)
A:matplotlib.ticker.c_range->get_log_range(vmin, vmax + 1)
A:matplotlib.ticker.stride->max(total_ticks // (self.numticks - 1), 1)
A:matplotlib.ticker.result->matplotlib.transforms.nonsingular(vmin, vmax)
A:matplotlib.ticker.decade_min->numpy.floor(vmin)
A:matplotlib.ticker.decade_max->numpy.ceil(vmax)
A:matplotlib.ticker.expo->numpy.arange(decade_min, min(-1, decade_max))
A:matplotlib.ticker.newticks->numpy.outer(np.arange(2, 10), 10 ** expo).ravel()
A:matplotlib.ticker.majorlocs->self.axis.get_majorticklocs()
A:matplotlib.ticker.self._locator->self.get_locator(d)
A:matplotlib.ticker.locator->MultipleLocator(ticksize)
A:matplotlib.ticker.ld->math.log10(d)
A:matplotlib.ticker.fld->math.floor(ld)
matplotlib.ticker.AutoLocator(self)
matplotlib.ticker.AutoLocator.__init__(self)
matplotlib.ticker.AutoMinorLocator(self,n=None)
matplotlib.ticker.AutoMinorLocator.__init__(self,n=None)
matplotlib.ticker.AutoMinorLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.Base(self,base)
matplotlib.ticker.Base.__init__(self,base)
matplotlib.ticker.Base.ge(self,x)
matplotlib.ticker.Base.get_base(self)
matplotlib.ticker.Base.gt(self,x)
matplotlib.ticker.Base.le(self,x)
matplotlib.ticker.Base.lt(self,x)
matplotlib.ticker.EngFormatter(self,unit='',places=None,sep='')
matplotlib.ticker.EngFormatter.__init__(self,unit='',places=None,sep='')
matplotlib.ticker.EngFormatter.format_eng(self,num)
matplotlib.ticker.FixedFormatter(self,seq)
matplotlib.ticker.FixedFormatter.__init__(self,seq)
matplotlib.ticker.FixedFormatter.get_offset(self)
matplotlib.ticker.FixedFormatter.set_offset_string(self,ofs)
matplotlib.ticker.FixedLocator(self,locs,nbins=None)
matplotlib.ticker.FixedLocator.__init__(self,locs,nbins=None)
matplotlib.ticker.FixedLocator.set_params(self,nbins=None)
matplotlib.ticker.FixedLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.FormatStrFormatter(self,fmt)
matplotlib.ticker.FormatStrFormatter.__init__(self,fmt)
matplotlib.ticker.Formatter(self,x,pos=None)
matplotlib.ticker.Formatter.__call__(self,x,pos=None)
matplotlib.ticker.Formatter.fix_minus(self,s)
matplotlib.ticker.Formatter.format_data(self,value)
matplotlib.ticker.Formatter.format_data_short(self,value)
matplotlib.ticker.Formatter.get_offset(self)
matplotlib.ticker.Formatter.set_locs(self,locs)
matplotlib.ticker.FuncFormatter(self,func)
matplotlib.ticker.FuncFormatter.__init__(self,func)
matplotlib.ticker.IndexFormatter(self,labels)
matplotlib.ticker.IndexFormatter.__init__(self,labels)
matplotlib.ticker.IndexLocator(self,base,offset)
matplotlib.ticker.IndexLocator.__init__(self,base,offset)
matplotlib.ticker.IndexLocator.set_params(self,base=None,offset=None)
matplotlib.ticker.IndexLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LinearLocator(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator.__init__(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator._set_numticks(self)
matplotlib.ticker.LinearLocator.set_params(self,numticks=None,presets=None)
matplotlib.ticker.LinearLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LinearLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.Locator(self)
matplotlib.ticker.Locator.__call__(self)
matplotlib.ticker.Locator.autoscale(self)
matplotlib.ticker.Locator.pan(self,numsteps)
matplotlib.ticker.Locator.raise_if_exceeds(self,locs)
matplotlib.ticker.Locator.refresh(self)
matplotlib.ticker.Locator.set_params(self,**kwargs)
matplotlib.ticker.Locator.tick_values(self,vmin,vmax)
matplotlib.ticker.Locator.view_limits(self,vmin,vmax)
matplotlib.ticker.Locator.zoom(self,direction)
matplotlib.ticker.LogFormatter(self,base=10.0,labelOnlyBase=False,minor_thresholds=None,linthresh=None)
matplotlib.ticker.LogFormatter.__init__(self,base=10.0,labelOnlyBase=False,minor_thresholds=None,linthresh=None)
matplotlib.ticker.LogFormatter._num_to_string(self,x,vmin,vmax)
matplotlib.ticker.LogFormatter.base(self,base)
matplotlib.ticker.LogFormatter.format_data(self,value)
matplotlib.ticker.LogFormatter.format_data_short(self,value)
matplotlib.ticker.LogFormatter.label_minor(self,labelOnlyBase)
matplotlib.ticker.LogFormatter.pprint_val(self,x,d)
matplotlib.ticker.LogFormatter.set_locs(self,locs=None)
matplotlib.ticker.LogFormatterExponent(LogFormatter)
matplotlib.ticker.LogFormatterExponent._num_to_string(self,x,vmin,vmax)
matplotlib.ticker.LogFormatterMathtext(self,x,pos=None)
matplotlib.ticker.LogFormatterMathtext.__call__(self,x,pos=None)
matplotlib.ticker.LogFormatterMathtext._non_decade_format(self,sign_string,base,fx,usetex)
matplotlib.ticker.LogFormatterSciNotation(LogFormatterMathtext)
matplotlib.ticker.LogFormatterSciNotation._non_decade_format(self,sign_string,base,fx,usetex)
matplotlib.ticker.LogLocator(self,base=10.0,subs=(1.0,),numdecs=4,numticks=None)
matplotlib.ticker.LogLocator.__init__(self,base=10.0,subs=(1.0,),numdecs=4,numticks=None)
matplotlib.ticker.LogLocator.base(self,base)
matplotlib.ticker.LogLocator.nonsingular(self,vmin,vmax)
matplotlib.ticker.LogLocator.set_params(self,base=None,subs=None,numdecs=None,numticks=None)
matplotlib.ticker.LogLocator.subs(self,subs)
matplotlib.ticker.LogLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.LogLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.LogitFormatter(self,x,pos=None)
matplotlib.ticker.LogitFormatter.__call__(self,x,pos=None)
matplotlib.ticker.LogitFormatter.format_data_short(self,value)
matplotlib.ticker.LogitLocator(self,minor=False)
matplotlib.ticker.LogitLocator.__init__(self,minor=False)
matplotlib.ticker.LogitLocator.nonsingular(self,vmin,vmax)
matplotlib.ticker.LogitLocator.set_params(self,minor=None)
matplotlib.ticker.LogitLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MaxNLocator(self,*args,**kwargs)
matplotlib.ticker.MaxNLocator.__init__(self,*args,**kwargs)
matplotlib.ticker.MaxNLocator._raw_ticks(self,vmin,vmax)
matplotlib.ticker.MaxNLocator._staircase(steps)
matplotlib.ticker.MaxNLocator._validate_steps(steps)
matplotlib.ticker.MaxNLocator.set_params(self,**kwargs)
matplotlib.ticker.MaxNLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MaxNLocator.view_limits(self,dmin,dmax)
matplotlib.ticker.MultipleLocator(self,base=1.0)
matplotlib.ticker.MultipleLocator.__init__(self,base=1.0)
matplotlib.ticker.MultipleLocator.set_params(self,base)
matplotlib.ticker.MultipleLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.MultipleLocator.view_limits(self,dmin,dmax)
matplotlib.ticker.NullFormatter(self,x,pos=None)
matplotlib.ticker.NullFormatter.__call__(self,x,pos=None)
matplotlib.ticker.NullLocator(self)
matplotlib.ticker.NullLocator.__call__(self)
matplotlib.ticker.NullLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.OldAutoLocator(self)
matplotlib.ticker.OldAutoLocator.__init__(self)
matplotlib.ticker.OldAutoLocator.get_locator(self,d)
matplotlib.ticker.OldAutoLocator.refresh(self)
matplotlib.ticker.OldAutoLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.OldAutoLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.OldScalarFormatter(self,x,pos=None)
matplotlib.ticker.OldScalarFormatter.__call__(self,x,pos=None)
matplotlib.ticker.OldScalarFormatter.pprint_val(self,x,d)
matplotlib.ticker.PercentFormatter(self,xmax=100,decimals=None,symbol='%',is_latex=False)
matplotlib.ticker.PercentFormatter.__init__(self,xmax=100,decimals=None,symbol='%',is_latex=False)
matplotlib.ticker.PercentFormatter.convert_to_pct(self,x)
matplotlib.ticker.PercentFormatter.format_pct(self,x,display_range)
matplotlib.ticker.PercentFormatter.symbol(self)
matplotlib.ticker.PercentFormatter.symbol(self,symbol)
matplotlib.ticker.ScalarFormatter(self,useOffset=None,useMathText=None,useLocale=None)
matplotlib.ticker.ScalarFormatter.__init__(self,useOffset=None,useMathText=None,useLocale=None)
matplotlib.ticker.ScalarFormatter._compute_offset(self)
matplotlib.ticker.ScalarFormatter._formatSciNotation(self,s)
matplotlib.ticker.ScalarFormatter._set_format(self,vmin,vmax)
matplotlib.ticker.ScalarFormatter._set_orderOfMagnitude(self,range)
matplotlib.ticker.ScalarFormatter.fix_minus(self,s)
matplotlib.ticker.ScalarFormatter.format_data(self,value)
matplotlib.ticker.ScalarFormatter.format_data_short(self,value)
matplotlib.ticker.ScalarFormatter.get_offset(self)
matplotlib.ticker.ScalarFormatter.get_useLocale(self)
matplotlib.ticker.ScalarFormatter.get_useMathText(self)
matplotlib.ticker.ScalarFormatter.get_useOffset(self)
matplotlib.ticker.ScalarFormatter.pprint_val(self,x)
matplotlib.ticker.ScalarFormatter.set_locs(self,locs)
matplotlib.ticker.ScalarFormatter.set_powerlimits(self,lims)
matplotlib.ticker.ScalarFormatter.set_scientific(self,b)
matplotlib.ticker.ScalarFormatter.set_useLocale(self,val)
matplotlib.ticker.ScalarFormatter.set_useMathText(self,val)
matplotlib.ticker.ScalarFormatter.set_useOffset(self,val)
matplotlib.ticker.StrMethodFormatter(self,fmt)
matplotlib.ticker.StrMethodFormatter.__init__(self,fmt)
matplotlib.ticker.SymmetricalLogLocator(self,transform=None,subs=None,linthresh=None,base=None)
matplotlib.ticker.SymmetricalLogLocator.__init__(self,transform=None,subs=None,linthresh=None,base=None)
matplotlib.ticker.SymmetricalLogLocator.set_params(self,subs=None,numticks=None)
matplotlib.ticker.SymmetricalLogLocator.tick_values(self,vmin,vmax)
matplotlib.ticker.SymmetricalLogLocator.view_limits(self,vmin,vmax)
matplotlib.ticker.TickHelper(object)
matplotlib.ticker.TickHelper.create_dummy_axis(self,**kwargs)
matplotlib.ticker.TickHelper.set_axis(self,axis)
matplotlib.ticker.TickHelper.set_bounds(self,vmin,vmax)
matplotlib.ticker.TickHelper.set_data_interval(self,vmin,vmax)
matplotlib.ticker.TickHelper.set_view_interval(self,vmin,vmax)
matplotlib.ticker._DummyAxis(self,minpos=0)
matplotlib.ticker._DummyAxis.__init__(self,minpos=0)
matplotlib.ticker._DummyAxis.get_data_interval(self)
matplotlib.ticker._DummyAxis.get_minpos(self)
matplotlib.ticker._DummyAxis.get_tick_space(self)
matplotlib.ticker._DummyAxis.get_view_interval(self)
matplotlib.ticker._DummyAxis.set_data_interval(self,vmin,vmax)
matplotlib.ticker._DummyAxis.set_view_interval(self,vmin,vmax)
matplotlib.ticker._divmod(x,y)
matplotlib.ticker._mathdefault(s)
matplotlib.ticker.closeto(x,y)
matplotlib.ticker.decade_down(x,base=10)
matplotlib.ticker.decade_up(x,base=10)
matplotlib.ticker.is_close_to_int(x)
matplotlib.ticker.is_decade(x,base=10)
matplotlib.ticker.nearest_long(x)
matplotlib.ticker.scale_range(vmin,vmax,n=1,threshold=100)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/stackplot.py----------------------------------------
A:matplotlib.stackplot.y->numpy.row_stack(args)
A:matplotlib.stackplot.labels->iter(kwargs.pop('labels', []))
A:matplotlib.stackplot.colors->kwargs.pop('colors', None)
A:matplotlib.stackplot.baseline->kwargs.pop('baseline', 'zero')
A:matplotlib.stackplot.stack->numpy.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))
A:matplotlib.stackplot.first_line->(y * (m - 0.5 - np.arange(m)[:, None])).sum(0)
A:matplotlib.stackplot.total->numpy.sum(y, 0)
A:matplotlib.stackplot.inv_total->numpy.zeros_like(total)
A:matplotlib.stackplot.increase->numpy.hstack((y[:, 0:1], np.diff(y)))
A:matplotlib.stackplot.center->numpy.cumsum(center.sum(0))
A:matplotlib.stackplot.color->axes._get_lines.get_next_color()
A:matplotlib.stackplot.coll->axes.fill_between(x, first_line, stack[0, :], facecolor=color, label=next(labels, None), **kwargs)
matplotlib.stackplot.stackplot(axes,x,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/text.py----------------------------------------
A:matplotlib.text._log->logging.getLogger(__name__)
A:matplotlib.text.old_text->textobj.get_text()
A:matplotlib.text.angle->get_rotation(dashrotation)
A:matplotlib.text.isString->isinstance(rotation, six.string_types)
A:matplotlib.text.theta->numpy.deg2rad(self.get_rotation())
A:matplotlib.text.tr->Affine2D().scale(w, h)
A:matplotlib.text.(_, parts, d)->text._get_layout(renderer)
A:matplotlib.text.(xt1, yt1)->Affine2D().scale(w, h).transform_point((x, y))
A:matplotlib.text.(x_box, y_box)->Affine2D().scale(w, h).transform_point((xt_box, yt_box))
A:matplotlib.text._cached->cbook.maxdict(50)
A:matplotlib.text.fontproperties->FontProperties(fontproperties)
A:matplotlib.text.sentinel->object()
A:matplotlib.text.bbox->Text.get_window_extent(self, renderer)
A:matplotlib.text.d->self.arrowprops.copy()
A:matplotlib.text.(patch_inside, patch_cattr)->self._bbox_patch.contains(mouseevent)
A:matplotlib.text.(x, y)->self._artist.transform_point(self._ref_coord)
A:matplotlib.text.self._fontproperties->FontProperties(fp).copy()
A:matplotlib.text.key->self.get_prop_tup(renderer=renderer)
A:matplotlib.text.lines->self.get_text().split('\n')
A:matplotlib.text.whs->numpy.zeros((len(lines), 2))
A:matplotlib.text.horizLayout->numpy.zeros((len(lines), 4))
A:matplotlib.text.(tmp, lp_h, lp_bl)->renderer.get_text_width_height_descent('lp', self._fontproperties, ismath=False)
A:matplotlib.text.(clean_line, ismath)->textobj.is_math_text(line, self.get_usetex())
A:matplotlib.text.(w, h, d)->self._renderer.get_text_width_height_descent(text, self.get_fontproperties(), False)
A:matplotlib.text.h->max(h, lp_h)
A:matplotlib.text.width->self.arrowprops.copy().pop('width', 4)
A:matplotlib.text.M->Affine2D().rotate_deg(self.get_rotation())
A:matplotlib.text.offsetLayout->numpy.zeros((len(lines), 2))
A:matplotlib.text.malign->self._get_multialignment()
A:matplotlib.text.cornersHoriz->numpy.array([(xmin, ymin), (xmin, ymax), (xmax, ymax), (xmax, ymin)], float)
A:matplotlib.text.cornersRotated->Affine2D().rotate_deg(self.get_rotation()).transform(cornersHoriz)
A:matplotlib.text.rotation_mode->self.get_rotation_mode()
A:matplotlib.text.(offsetx, offsety)->Affine2D().rotate_deg(self.get_rotation()).transform_point((offsetx, offsety))
A:matplotlib.text.xys->Affine2D().rotate_deg(self.get_rotation()).transform(offsetLayout)
A:matplotlib.text.props->rectprops.copy()
A:matplotlib.text.boxstyle->rectprops.copy().pop('boxstyle', None)
A:matplotlib.text.pad->renderer.points_to_pixels(4)
A:matplotlib.text.bbox_transmuter->rectprops.copy().pop('bbox_transmuter', None)
A:matplotlib.text.self._bbox_patch->FancyBboxPatch((0.0, 0.0), 1.0, 1.0, boxstyle=boxstyle, bbox_transmuter=bbox_transmuter, transform=IdentityTransform(), **props)
A:matplotlib.text.trans->textobj.get_transform()
A:matplotlib.text.posx->float(textobj.convert_xunits(textobj._x))
A:matplotlib.text.posy->float(textobj.convert_yunits(textobj._y))
A:matplotlib.text.(posx, posy)->textobj.get_transform().transform_point((posx, posy))
A:matplotlib.text.(x_box, y_box, w_box, h_box)->_get_textbox(self, renderer)
A:matplotlib.text.fontsize_in_pixel->renderer.points_to_pixels(self.get_size())
A:matplotlib.text.clipprops->dict(clip_box=self.clipbox, clip_path=self._clippath, clip_on=self._clipon)
A:matplotlib.text.(x0, y0)->self.get_transform().transform(self.get_position())
A:matplotlib.text.figure_box->self.get_figure().get_window_extent()
A:matplotlib.text.alignment->self.get_horizontalalignment()
A:matplotlib.text.rotation->self.get_rotation()
A:matplotlib.text.left->self._get_dist_to_box(rotation, x0, y0, figure_box)
A:matplotlib.text.right->self._get_dist_to_box((180 + rotation) % 360, x0, y0, figure_box)
A:matplotlib.text.line_width->self._get_wrap_line_width()
A:matplotlib.text.sub_words->word.split('\n')
A:matplotlib.text.current_width->self._get_rendered_text_width(line + ' ' + sub_words[i])
A:matplotlib.text.(bbox, info, descent)->self._get_layout(self._renderer)
A:matplotlib.text.(canvasw, canvash)->renderer.get_canvas_width_height()
A:matplotlib.text.gc->renderer.new_gc()
A:matplotlib.text.textrenderer->PathEffectRenderer(textobj.get_path_effects(), renderer)
A:matplotlib.text.x->float(self.convert_xunits(x))
A:matplotlib.text.y->float(self.convert_yunits(y))
A:matplotlib.text.(tx, ty)->self._get_xy_display()
A:matplotlib.text.color->tuple(color)
A:matplotlib.text.fp->FontProperties(fp)
A:matplotlib.text.self._usetex->bool(usetex)
A:matplotlib.text.self.dashline->Line2D(xdata=(x, x), ydata=(y, y), color='k', linestyle='-')
A:matplotlib.text.self._dashx->float(x)
A:matplotlib.text.self._dashy->float(y)
A:matplotlib.text.(dashx, dashy)->self.get_unitless_position()
A:matplotlib.text.dashlength->self.get_dashlength()
A:matplotlib.text.dashrotation->self.get_dashrotation()
A:matplotlib.text.dashdirection->self.get_dashdirection()
A:matplotlib.text.dashpad->self.get_dashpad()
A:matplotlib.text.dashpush->self.get_dashpush()
A:matplotlib.text.transform->self.get_transform()
A:matplotlib.text.cxy->self.get_transform().transform_point((dashx, dashy))
A:matplotlib.text.cd->numpy.array([cos_theta, sin_theta])
A:matplotlib.text.inverse->self.get_transform().inverted()
A:matplotlib.text.(x1, y1)->self._get_xy(renderer, x, y, s1)
A:matplotlib.text.(x2, y2)->self._get_xy(renderer, x, y, s2)
A:matplotlib.text.we->Text.get_window_extent(self, renderer=renderer)
A:matplotlib.text.(newx, newy)->self.get_transform().inverted().transform_point(tuple(cw))
A:matplotlib.text.self._twd_window_extent->Text.get_window_extent(self, renderer=renderer).frozen()
A:matplotlib.text.unit->self.get_unit()
A:matplotlib.text.sc->self._get_scale(renderer)
A:matplotlib.text.tr1->self._get_xy_transform(renderer, s1)
A:matplotlib.text.tr2->self._get_xy_transform(renderer, s2)
A:matplotlib.text.s_->s.split()
A:matplotlib.text.xy0->self._get_ref_xy(renderer)
A:matplotlib.text.fontsize->self.get_size()
A:matplotlib.text.b->self.get_annotation_clip()
A:matplotlib.text.self._draggable->DraggableAnnotation(self, use_blit)
A:matplotlib.text.arrowprops->dict()
A:matplotlib.text.self._arrow_relpos->dict().pop('relpos', (0.5, 0.5))
A:matplotlib.text.self.arrow_patch->FancyArrowPatch((0, 0), (1, 1), **arrowprops)
A:matplotlib.text.(contains, tinfo)->Text.contains(self, event)
A:matplotlib.text.(in_arrow, _)->self.arrow.contains(event)
A:matplotlib.text.(in_patch, _)->self.arrow_patch.contains(event)
A:matplotlib.text.xy_pixel->self._get_position_xy(renderer)
A:matplotlib.text.(ox0, oy0)->self._get_xy_display()
A:matplotlib.text.ms->self.arrowprops.copy().pop('mutation_scale', self.get_size())
A:matplotlib.text.shrink->self.arrowprops.copy().pop('shrink', 0.0)
A:matplotlib.text.headwidth->self.arrowprops.copy().pop('headwidth', 12)
A:matplotlib.text.frac->self.arrowprops.copy().pop('frac', None)
A:matplotlib.text.headlength->self.arrowprops.copy().pop('headlength', 12)
A:matplotlib.text.stylekw->dict(head_length=headlength / ms, head_width=headwidth / ms, tail_width=width / ms)
A:matplotlib.text.(_, (x, relposx))->min(((abs(val[0] - x0), val) for val in xpos))
A:matplotlib.text.(_, (y, relposy))->min(((abs(val[0] - y0), val) for val in ypos))
A:matplotlib.text.r->Rectangle(xy=(l, b), width=w, height=h)
A:matplotlib.text.text_bbox->Text.get_window_extent(self, renderer=renderer)
matplotlib.text.Annotation(self,s,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.text.Annotation.__init__(self,s,xy,xytext=None,xycoords='data',textcoords=None,arrowprops=None,annotation_clip=None,**kwargs)
matplotlib.text.Annotation.__str__(self)
matplotlib.text.Annotation._update_position_xytext(self,renderer,xy_pixel)
matplotlib.text.Annotation.anncoords(self)
matplotlib.text.Annotation.anncoords(self,coords)
matplotlib.text.Annotation.contains(self,event)
matplotlib.text.Annotation.draw(self,renderer)
matplotlib.text.Annotation.get_window_extent(self,renderer=None)
matplotlib.text.Annotation.set_figure(self,fig)
matplotlib.text.Annotation.update_positions(self,renderer)
matplotlib.text.Annotation.xyann(self)
matplotlib.text.Annotation.xyann(self,xytext)
matplotlib.text.OffsetFrom(self,artist,ref_coord,unit='points')
matplotlib.text.OffsetFrom.__init__(self,artist,ref_coord,unit='points')
matplotlib.text.OffsetFrom._get_scale(self,renderer)
matplotlib.text.OffsetFrom.get_unit(self)
matplotlib.text.OffsetFrom.set_unit(self,unit)
matplotlib.text.Text(self,x=0,y=0,text='',color=None,verticalalignment='baseline',horizontalalignment='left',multialignment=None,fontproperties=None,rotation=None,linespacing=None,rotation_mode=None,usetex=None,wrap=False,**kwargs)
matplotlib.text.Text.__getstate__(self)
matplotlib.text.Text.__init__(self,x=0,y=0,text='',color=None,verticalalignment='baseline',horizontalalignment='left',multialignment=None,fontproperties=None,rotation=None,linespacing=None,rotation_mode=None,usetex=None,wrap=False,**kwargs)
matplotlib.text.Text.__repr__(self)
matplotlib.text.Text._draw_bbox(self,renderer,posx,posy)
matplotlib.text.Text._get_dist_to_box(self,rotation,x0,y0,figure_box)
matplotlib.text.Text._get_layout(self,renderer)
matplotlib.text.Text._get_multialignment(self)
matplotlib.text.Text._get_rendered_text_width(self,text)
matplotlib.text.Text._get_wrap_line_width(self)
matplotlib.text.Text._get_wrapped_text(self)
matplotlib.text.Text._get_xy_display(self)
matplotlib.text.Text._update_clip_properties(self)
matplotlib.text.Text.contains(self,mouseevent)
matplotlib.text.Text.draw(self,renderer)
matplotlib.text.Text.get_bbox_patch(self)
matplotlib.text.Text.get_color(self)
matplotlib.text.Text.get_family(self)
matplotlib.text.Text.get_font_properties(self)
matplotlib.text.Text.get_fontfamily(self)
matplotlib.text.Text.get_fontname(self)
matplotlib.text.Text.get_fontproperties(self)
matplotlib.text.Text.get_fontsize(self)
matplotlib.text.Text.get_fontstretch(self)
matplotlib.text.Text.get_fontstyle(self)
matplotlib.text.Text.get_fontvariant(self)
matplotlib.text.Text.get_fontweight(self)
matplotlib.text.Text.get_ha(self)
matplotlib.text.Text.get_horizontalalignment(self)
matplotlib.text.Text.get_name(self)
matplotlib.text.Text.get_position(self)
matplotlib.text.Text.get_prop_tup(self,renderer=None)
matplotlib.text.Text.get_rotation(self)
matplotlib.text.Text.get_rotation_mode(self)
matplotlib.text.Text.get_size(self)
matplotlib.text.Text.get_stretch(self)
matplotlib.text.Text.get_style(self)
matplotlib.text.Text.get_text(self)
matplotlib.text.Text.get_unitless_position(self)
matplotlib.text.Text.get_usetex(self)
matplotlib.text.Text.get_va(self)
matplotlib.text.Text.get_variant(self)
matplotlib.text.Text.get_verticalalignment(self)
matplotlib.text.Text.get_weight(self)
matplotlib.text.Text.get_window_extent(self,renderer=None,dpi=None)
matplotlib.text.Text.get_wrap(self)
matplotlib.text.Text.is_math_text(s,usetex=None)
matplotlib.text.Text.set_backgroundcolor(self,color)
matplotlib.text.Text.set_bbox(self,rectprops)
matplotlib.text.Text.set_clip_box(self,clipbox)
matplotlib.text.Text.set_clip_on(self,b)
matplotlib.text.Text.set_clip_path(self,path,transform=None)
matplotlib.text.Text.set_color(self,color)
matplotlib.text.Text.set_family(self,fontname)
matplotlib.text.Text.set_font_properties(self,fp)
matplotlib.text.Text.set_fontname(self,fontname)
matplotlib.text.Text.set_fontproperties(self,fp)
matplotlib.text.Text.set_fontsize(self,fontsize)
matplotlib.text.Text.set_fontstretch(self,stretch)
matplotlib.text.Text.set_fontstyle(self,fontstyle)
matplotlib.text.Text.set_fontvariant(self,variant)
matplotlib.text.Text.set_fontweight(self,weight)
matplotlib.text.Text.set_ha(self,align)
matplotlib.text.Text.set_horizontalalignment(self,align)
matplotlib.text.Text.set_linespacing(self,spacing)
matplotlib.text.Text.set_ma(self,align)
matplotlib.text.Text.set_multialignment(self,align)
matplotlib.text.Text.set_name(self,fontname)
matplotlib.text.Text.set_position(self,xy)
matplotlib.text.Text.set_rotation(self,s)
matplotlib.text.Text.set_rotation_mode(self,m)
matplotlib.text.Text.set_size(self,fontsize)
matplotlib.text.Text.set_stretch(self,stretch)
matplotlib.text.Text.set_style(self,fontstyle)
matplotlib.text.Text.set_text(self,s)
matplotlib.text.Text.set_usetex(self,usetex)
matplotlib.text.Text.set_va(self,align)
matplotlib.text.Text.set_variant(self,variant)
matplotlib.text.Text.set_verticalalignment(self,align)
matplotlib.text.Text.set_weight(self,weight)
matplotlib.text.Text.set_wrap(self,wrap)
matplotlib.text.Text.set_x(self,x)
matplotlib.text.Text.set_y(self,y)
matplotlib.text.Text.update(self,kwargs)
matplotlib.text.Text.update_bbox_position_size(self,renderer)
matplotlib.text.Text.update_from(self,other)
matplotlib.text.TextWithDash(self,x=0,y=0,text='',color=None,verticalalignment='center',horizontalalignment='center',multialignment=None,fontproperties=None,rotation=None,linespacing=None,dashlength=0.0,dashdirection=0,dashrotation=None,dashpad=3,dashpush=0)
matplotlib.text.TextWithDash.__init__(self,x=0,y=0,text='',color=None,verticalalignment='center',horizontalalignment='center',multialignment=None,fontproperties=None,rotation=None,linespacing=None,dashlength=0.0,dashdirection=0,dashrotation=None,dashpad=3,dashpush=0)
matplotlib.text.TextWithDash.__str__(self)
matplotlib.text.TextWithDash.draw(self,renderer)
matplotlib.text.TextWithDash.get_dashdirection(self)
matplotlib.text.TextWithDash.get_dashlength(self)
matplotlib.text.TextWithDash.get_dashpad(self)
matplotlib.text.TextWithDash.get_dashpush(self)
matplotlib.text.TextWithDash.get_dashrotation(self)
matplotlib.text.TextWithDash.get_figure(self)
matplotlib.text.TextWithDash.get_position(self)
matplotlib.text.TextWithDash.get_prop_tup(self,renderer=None)
matplotlib.text.TextWithDash.get_unitless_position(self)
matplotlib.text.TextWithDash.get_window_extent(self,renderer=None)
matplotlib.text.TextWithDash.set_dashdirection(self,dd)
matplotlib.text.TextWithDash.set_dashlength(self,dl)
matplotlib.text.TextWithDash.set_dashpad(self,dp)
matplotlib.text.TextWithDash.set_dashpush(self,dp)
matplotlib.text.TextWithDash.set_dashrotation(self,dr)
matplotlib.text.TextWithDash.set_figure(self,fig)
matplotlib.text.TextWithDash.set_position(self,xy)
matplotlib.text.TextWithDash.set_transform(self,t)
matplotlib.text.TextWithDash.set_x(self,x)
matplotlib.text.TextWithDash.set_y(self,y)
matplotlib.text.TextWithDash.update_coords(self,renderer)
matplotlib.text._AnnotationBase(self,xy,xycoords='data',annotation_clip=None)
matplotlib.text._AnnotationBase.__init__(self,xy,xycoords='data',annotation_clip=None)
matplotlib.text._AnnotationBase._check_xy(self,renderer,xy_pixel)
matplotlib.text._AnnotationBase._get_position_xy(self,renderer)
matplotlib.text._AnnotationBase._get_ref_xy(self,renderer)
matplotlib.text._AnnotationBase._get_xy(self,renderer,x,y,s)
matplotlib.text._AnnotationBase._get_xy_transform(self,renderer,s)
matplotlib.text._AnnotationBase.draggable(self,state=None,use_blit=False)
matplotlib.text._AnnotationBase.get_annotation_clip(self)
matplotlib.text._AnnotationBase.set_annotation_clip(self,b)
matplotlib.text._get_textbox(text,renderer)
matplotlib.text._process_text_args(override,fontdict=None,**kwargs)
matplotlib.text._wrap_text(textobj)
matplotlib.text.get_rotation(rotation)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/afm.py----------------------------------------
A:matplotlib.afm.s->_to_str(s)
A:matplotlib.afm.pos->fh.tell()
A:matplotlib.afm.line->line.rstrip().rstrip()
A:matplotlib.afm.lst->line.rstrip().rstrip().split(b' ', 1)
A:matplotlib.afm.d[key]->optional[key](fh)
A:matplotlib.afm.vals->line.rstrip().rstrip().split(b';')
A:matplotlib.afm.num->_to_int(vals['C'])
A:matplotlib.afm.wx->_to_float(vals['WX'])
A:matplotlib.afm.bbox->list(map(int, bbox))
A:matplotlib.afm.cc->vals[0].split()
A:matplotlib.afm.pcc->_to_str(s).split()
A:matplotlib.afm.dhead->_parse_header(fh)
A:matplotlib.afm.(dcmetrics_ascii, dcmetrics_name)->_parse_char_metrics(fh)
A:matplotlib.afm.doptional->_parse_optional(fh)
A:matplotlib.afm.(dhead, dcmetrics_ascii, dcmetrics_name, dkernpairs, dcomposite)->parse_afm(fh)
A:matplotlib.afm.c->ord(c)
A:matplotlib.afm.name->self.get_fullname()
matplotlib.afm.AFM(self,fh)
matplotlib.afm.AFM.__init__(self,fh)
matplotlib.afm.AFM.family_name(self)
matplotlib.afm.AFM.get_angle(self)
matplotlib.afm.AFM.get_bbox_char(self,c,isord=False)
matplotlib.afm.AFM.get_capheight(self)
matplotlib.afm.AFM.get_familyname(self)
matplotlib.afm.AFM.get_fontname(self)
matplotlib.afm.AFM.get_fullname(self)
matplotlib.afm.AFM.get_height_char(self,c,isord=False)
matplotlib.afm.AFM.get_horizontal_stem_width(self)
matplotlib.afm.AFM.get_kern_dist(self,c1,c2)
matplotlib.afm.AFM.get_kern_dist_from_name(self,name1,name2)
matplotlib.afm.AFM.get_name_char(self,c,isord=False)
matplotlib.afm.AFM.get_str_bbox(self,s)
matplotlib.afm.AFM.get_str_bbox_and_descent(self,s)
matplotlib.afm.AFM.get_underline_thickness(self)
matplotlib.afm.AFM.get_vertical_stem_width(self)
matplotlib.afm.AFM.get_weight(self)
matplotlib.afm.AFM.get_width_char(self,c,isord=False)
matplotlib.afm.AFM.get_width_from_char_name(self,name)
matplotlib.afm.AFM.get_xheight(self)
matplotlib.afm.AFM.string_width_height(self,s)
matplotlib.afm._parse_char_metrics(fh)
matplotlib.afm._parse_composites(fh)
matplotlib.afm._parse_header(fh)
matplotlib.afm._parse_kern_pairs(fh)
matplotlib.afm._parse_optional(fh)
matplotlib.afm._sanity_check(fh)
matplotlib.afm._to_bool(s)
matplotlib.afm._to_int(x)
matplotlib.afm._to_list_of_floats(s)
matplotlib.afm._to_list_of_ints(s)
matplotlib.afm._to_str(x)
matplotlib.afm.parse_afm(fh)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/textpath.py----------------------------------------
A:matplotlib.textpath.self.mathtext_parser->MathTextParser('path')
A:matplotlib.textpath.self._ps_fontd->maxdict(50)
A:matplotlib.textpath.enc_name->matplotlib.dviread.find_tex_file('8a.enc')
A:matplotlib.textpath.enc->matplotlib.dviread.Encoding(enc_name)
A:matplotlib.textpath.fname->matplotlib.font_manager.findfont(prop)
A:matplotlib.textpath.font->get_font(font_bunch.filename)
A:matplotlib.textpath.sfnt->get_font(font_bunch.filename).get_sfnt()
A:matplotlib.textpath.ps_name->sfnt[3, 1, 1033, 6].decode('utf-16be')
A:matplotlib.textpath.char_id->self._get_char_id_ps(font, glyph)
A:matplotlib.textpath.(verts, codes)->TextToPath().get_text_path(prop, clean_line, ismath=ismath)
A:matplotlib.textpath.texmanager->self.get_texmanager()
A:matplotlib.textpath.fontsize->FontProperties().get_size_in_points()
A:matplotlib.textpath.(w, h, d)->self.get_texmanager().get_text_width_height_descent(s, fontsize, renderer=None)
A:matplotlib.textpath.prop->FontProperties()
A:matplotlib.textpath.(width, height, descent, trash, used_characters)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.textpath.(w, h)->get_font(font_bunch.filename).get_width_height()
A:matplotlib.textpath.d->get_font(font_bunch.filename).get_descent()
A:matplotlib.textpath.(glyph_info, glyph_map, rects)->self.get_glyphs_tex(prop, s)
A:matplotlib.textpath.glyph_map->OrderedDict()
A:matplotlib.textpath.glyph_map_new->OrderedDict()
A:matplotlib.textpath.ccode->ord('?')
A:matplotlib.textpath.gind->get_font(font_bunch.filename).get_char_index(ccode)
A:matplotlib.textpath.kern->get_font(font_bunch.filename).get_kerning(lastgind, gind, KERNING_DEFAULT)
A:matplotlib.textpath.glyph->get_font(font_bunch.filename).load_char(ccode, flags=LOAD_NO_HINTING)
A:matplotlib.textpath.glyph_map_new[char_id]->self.glyph_to_path(font)
A:matplotlib.textpath.(width, height, descent, glyphs, rects)->self.mathtext_parser.parse(s, self.DPI, prop)
A:matplotlib.textpath.self._texmanager->TexManager()
A:matplotlib.textpath.self.tex_font_map->matplotlib.dviread.PsfontsMap(dviread.find_tex_file('pdftex.map'))
A:matplotlib.textpath.self._adobe_standard_encoding->self._get_adobe_standard_encoding()
A:matplotlib.textpath.dvifilelike->self.get_texmanager().get_dvi(s, self.FONT_SCALE)
A:matplotlib.textpath.dvi->matplotlib.dviread.Dvi(dvifile, self.DPI)
A:matplotlib.textpath.dvifile->self.get_texmanager().make_dvi(s, self.FONT_SCALE)
A:matplotlib.textpath.page->next(iter(dvi))
A:matplotlib.textpath.font_and_encoding->self._ps_fontd.get(dvifont.texname)
A:matplotlib.textpath.enc0->matplotlib.dviread.Encoding(font_bunch.encoding)
A:matplotlib.textpath.charcode->matplotlib.dviread.Encoding(enc_name).get(glyph, None)
A:matplotlib.textpath.glyph0->get_font(font_bunch.filename).load_char(glyph, flags=ft2font_flag)
A:matplotlib.textpath.text_to_path->TextToPath()
A:matplotlib.textpath.size->FontProperties().get_size_in_points()
A:matplotlib.textpath.(self._vertices, self._codes)->self.text_get_vertices_codes(prop, s, usetex=usetex)
A:matplotlib.textpath.vertices->property(_get_vertices)
A:matplotlib.textpath.codes->property(_get_codes)
A:matplotlib.textpath.tr->Affine2D().scale(self._size / text_to_path.FONT_SCALE, self._size / text_to_path.FONT_SCALE).translate(*self._xy)
A:matplotlib.textpath.self._cached_vertices->Affine2D().scale(self._size / text_to_path.FONT_SCALE, self._size / text_to_path.FONT_SCALE).translate(*self._xy).transform(self._vertices)
A:matplotlib.textpath.(clean_line, ismath)->self.is_math_text(s)
matplotlib.textpath.TextPath(self,xy,s,size=None,prop=None,_interpolation_steps=1,usetex=False,*kl,**kwargs)
matplotlib.textpath.TextPath.__init__(self,xy,s,size=None,prop=None,_interpolation_steps=1,usetex=False,*kl,**kwargs)
matplotlib.textpath.TextPath._get_codes(self)
matplotlib.textpath.TextPath._get_vertices(self)
matplotlib.textpath.TextPath._revalidate_path(self)
matplotlib.textpath.TextPath.get_size(self)
matplotlib.textpath.TextPath.is_math_text(self,s)
matplotlib.textpath.TextPath.set_size(self,size)
matplotlib.textpath.TextPath.text_get_vertices_codes(self,prop,s,usetex)
matplotlib.textpath.TextToPath(self)
matplotlib.textpath.TextToPath.__init__(self)
matplotlib.textpath.TextToPath._get_adobe_standard_encoding(self)
matplotlib.textpath.TextToPath._get_char_id(self,font,ccode)
matplotlib.textpath.TextToPath._get_char_id_ps(self,font,ccode)
matplotlib.textpath.TextToPath._get_font(self,prop)
matplotlib.textpath.TextToPath._get_hinting_flag(self)
matplotlib.textpath.TextToPath.get_glyphs_mathtext(self,prop,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_glyphs_tex(self,prop,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_glyphs_with_font(self,font,s,glyph_map=None,return_new_glyphs_only=False)
matplotlib.textpath.TextToPath.get_texmanager(self)
matplotlib.textpath.TextToPath.get_text_path(self,prop,s,ismath=False,usetex=False)
matplotlib.textpath.TextToPath.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.textpath.TextToPath.glyph_to_path(self,font,currx=0.0)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/collections.py----------------------------------------
A:matplotlib.collections._offsets->numpy.zeros((0, 2))
A:matplotlib.collections._transOffset->transforms.IdentityTransform()
A:matplotlib.collections._transforms->numpy.empty((0, 3, 3))
A:matplotlib.collections.self._hatch_color->tuple(self._edgecolors[0])
A:matplotlib.collections.self._offsets->numpy.zeros((1, 2))
A:matplotlib.collections.offsets->transOffset.get_affine().transform_non_affine(offsets)
A:matplotlib.collections.t->t._as_mpl_transform(self.axes)._as_mpl_transform(self.axes)
A:matplotlib.collections.transform->transforms.IdentityTransform()
A:matplotlib.collections.transOffset->transOffset.get_affine().get_affine()
A:matplotlib.collections.paths->self.get_paths()
A:matplotlib.collections.result->transforms.Bbox.null()
A:matplotlib.collections.xs->self.convert_xunits(self._offsets[:, 0])
A:matplotlib.collections.ys->self.convert_yunits(self._offsets[:, 1])
A:matplotlib.collections.(transform, transOffset, offsets, paths)->self._prepare_points()
A:matplotlib.collections.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.collections.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.collections.trans->self.get_transforms()
A:matplotlib.collections.facecolors->self.get_facecolor()
A:matplotlib.collections.edgecolors->self.get_edgecolor()
A:matplotlib.collections.extents->paths[0].get_extents(combined_transform)
A:matplotlib.collections.(width, height)->PathEffectRenderer(self.get_path_effects(), renderer).get_canvas_width_height()
A:matplotlib.collections.ind->_path.point_in_path_collection(mouseevent.x, mouseevent.y, pickradius, transform.frozen(), paths, self.get_transforms(), offsets, transOffset, pickradius <= 0, self.get_offset_position())
A:matplotlib.collections.self._us_lw->numpy.atleast_1d(np.asarray(lw))
A:matplotlib.collections.(self._linewidths, self._linestyles)->self._bcast_lwls(self._us_lw, self._us_linestyles)
A:matplotlib.collections.ls->cbook.ls_mapper.get(ls, ls)
A:matplotlib.collections.l_dashes->len(dashes)
A:matplotlib.collections.l_lw->len(linewidths)
A:matplotlib.collections.GCD->gcd(l_dashes, l_lw)
A:matplotlib.collections.self._antialiaseds->numpy.atleast_1d(np.asarray(aa, bool))
A:matplotlib.collections.self._facecolors->self.to_rgba(self._A, self._alpha)
A:matplotlib.collections.self._edgecolors->self.to_rgba(self._A, self._alpha)
A:matplotlib.collections.self._sizes->numpy.asarray(sizes)
A:matplotlib.collections.self._transforms->numpy.zeros((len(self._widths), 3, 3))
A:matplotlib.collections.verts->numpy.concatenate((tri.x[triangles][..., np.newaxis], tri.y[triangles][..., np.newaxis]), axis=2)
A:matplotlib.collections.xy->numpy.hstack((triangulation.x.reshape(-1, 1), triangulation.y.reshape(-1, 1)))
A:matplotlib.collections.codes->numpy.empty(xy.shape[0], dtype=mpath.Path.code_type)
A:matplotlib.collections.collection->BrokenBarHCollection(xranges, [ymin, ymax - ymin], **kwargs)
A:matplotlib.collections.colors->colors.reshape((meshWidth * meshHeight * 4, 3, 4)).reshape((meshWidth * meshHeight * 4, 3, 4))
A:matplotlib.collections.seg->numpy.asarray(seg, float)
A:matplotlib.collections._segments->self._add_offsets(_segments)
A:matplotlib.collections.vertices->numpy.asarray(vertices)
A:matplotlib.collections.Nsegs->len(segs)
A:matplotlib.collections.segments->self.get_segments()
A:matplotlib.collections.lineoffset->self.get_lineoffset()
A:matplotlib.collections.linelength->self.get_linelength()
A:matplotlib.collections.positions->numpy.hstack([positions, np.asanyarray(position)])
A:matplotlib.collections.segments[i]->numpy.fliplr(segment)
A:matplotlib.collections.self._angles->numpy.deg2rad(angles).ravel()
A:matplotlib.collections.sin_angle->numpy.sin(self._angles)
A:matplotlib.collections.cos_angle->numpy.cos(self._angles)
A:matplotlib.collections.m->ax.transData.get_affine().get_matrix().copy()
A:matplotlib.collections.self._bbox->transforms.Bbox.unit()
A:matplotlib.collections.self._paths->self.convert_mesh_to_paths(self._meshWidth, self._meshHeight, self._coordinates)
A:matplotlib.collections.triangles->triangles.reshape((meshWidth * meshHeight * 4, 3, 2)).reshape((meshWidth * meshHeight * 4, 3, 2))
A:matplotlib.collections.self._coordinates->numpy.asarray(coordinates, float).reshape((meshHeight + 1, meshWidth + 1, 2))
A:matplotlib.collections.points->points.reshape((meshWidth * meshHeight, 5, 2)).reshape((meshWidth * meshHeight, 5, 2))
A:matplotlib.collections.c->self.get_facecolor().reshape((meshHeight + 1, meshWidth + 1, 4))
A:matplotlib.collections.coordinates->coordinates.reshape(self._coordinates.shape).reshape(self._coordinates.shape)
A:matplotlib.collections.(triangles, colors)->self.convert_mesh_to_triangles(self._meshWidth, self._meshHeight, coordinates)
A:matplotlib.collections.patchstr->artist.kwdoc(Collection)
matplotlib.collections.AsteriskPolygonCollection(RegularPolyCollection)
matplotlib.collections.BrokenBarHCollection(self,xranges,yrange,**kwargs)
matplotlib.collections.BrokenBarHCollection.__init__(self,xranges,yrange,**kwargs)
matplotlib.collections.BrokenBarHCollection.span_where(x,ymin,ymax,where,**kwargs)
matplotlib.collections.CircleCollection(self,sizes,**kwargs)
matplotlib.collections.CircleCollection.__init__(self,sizes,**kwargs)
matplotlib.collections.Collection(self,edgecolors=None,facecolors=None,linewidths=None,linestyles='solid',capstyle=None,joinstyle=None,antialiaseds=None,offsets=None,transOffset=None,norm=None,cmap=None,pickradius=5.0,hatch=None,urls=None,offset_position='screen',zorder=1,**kwargs)
matplotlib.collections.Collection.__init__(self,edgecolors=None,facecolors=None,linewidths=None,linestyles='solid',capstyle=None,joinstyle=None,antialiaseds=None,offsets=None,transOffset=None,norm=None,cmap=None,pickradius=5.0,hatch=None,urls=None,offset_position='screen',zorder=1,**kwargs)
matplotlib.collections.Collection._bcast_lwls(linewidths,dashes)
matplotlib.collections.Collection._prepare_points(self)
matplotlib.collections.Collection._set_edgecolor(self,c)
matplotlib.collections.Collection._set_facecolor(self,c)
matplotlib.collections.Collection.contains(self,mouseevent)
matplotlib.collections.Collection.draw(self,renderer)
matplotlib.collections.Collection.get_capstyle(self)
matplotlib.collections.Collection.get_datalim(self,transData)
matplotlib.collections.Collection.get_edgecolor(self)
matplotlib.collections.Collection.get_facecolor(self)
matplotlib.collections.Collection.get_fill(self)
matplotlib.collections.Collection.get_hatch(self)
matplotlib.collections.Collection.get_joinstyle(self)
matplotlib.collections.Collection.get_linestyles(self)
matplotlib.collections.Collection.get_linewidths(self)
matplotlib.collections.Collection.get_offset_position(self)
matplotlib.collections.Collection.get_offset_transform(self)
matplotlib.collections.Collection.get_offsets(self)
matplotlib.collections.Collection.get_paths(self)
matplotlib.collections.Collection.get_pickradius(self)
matplotlib.collections.Collection.get_transforms(self)
matplotlib.collections.Collection.get_urls(self)
matplotlib.collections.Collection.get_window_extent(self,renderer)
matplotlib.collections.Collection.set_alpha(self,alpha)
matplotlib.collections.Collection.set_antialiased(self,aa)
matplotlib.collections.Collection.set_antialiaseds(self,aa)
matplotlib.collections.Collection.set_capstyle(self,cs)
matplotlib.collections.Collection.set_color(self,c)
matplotlib.collections.Collection.set_dashes(self,ls)
matplotlib.collections.Collection.set_edgecolor(self,c)
matplotlib.collections.Collection.set_edgecolors(self,c)
matplotlib.collections.Collection.set_facecolor(self,c)
matplotlib.collections.Collection.set_facecolors(self,c)
matplotlib.collections.Collection.set_hatch(self,hatch)
matplotlib.collections.Collection.set_joinstyle(self,js)
matplotlib.collections.Collection.set_linestyle(self,ls)
matplotlib.collections.Collection.set_linestyles(self,ls)
matplotlib.collections.Collection.set_linewidth(self,lw)
matplotlib.collections.Collection.set_linewidths(self,lw)
matplotlib.collections.Collection.set_lw(self,lw)
matplotlib.collections.Collection.set_offset_position(self,offset_position)
matplotlib.collections.Collection.set_offsets(self,offsets)
matplotlib.collections.Collection.set_paths(self)
matplotlib.collections.Collection.set_pickradius(self,pr)
matplotlib.collections.Collection.set_urls(self,urls)
matplotlib.collections.Collection.update_from(self,other)
matplotlib.collections.Collection.update_scalarmappable(self)
matplotlib.collections.EllipseCollection(self,widths,heights,angles,units='points',**kwargs)
matplotlib.collections.EllipseCollection.__init__(self,widths,heights,angles,units='points',**kwargs)
matplotlib.collections.EllipseCollection._set_transforms(self)
matplotlib.collections.EllipseCollection.draw(self,renderer)
matplotlib.collections.EventCollection(self,positions,orientation=None,lineoffset=0,linelength=1,linewidth=None,color=None,linestyle='solid',antialiased=None,**kwargs)
matplotlib.collections.EventCollection.__init__(self,positions,orientation=None,lineoffset=0,linelength=1,linewidth=None,color=None,linestyle='solid',antialiased=None,**kwargs)
matplotlib.collections.EventCollection.add_positions(self,position)
matplotlib.collections.EventCollection.get_color(self)
matplotlib.collections.EventCollection.get_linelength(self)
matplotlib.collections.EventCollection.get_lineoffset(self)
matplotlib.collections.EventCollection.get_linestyle(self)
matplotlib.collections.EventCollection.get_linewidth(self)
matplotlib.collections.EventCollection.get_orientation(self)
matplotlib.collections.EventCollection.get_positions(self)
matplotlib.collections.EventCollection.is_horizontal(self)
matplotlib.collections.EventCollection.set_linelength(self,linelength)
matplotlib.collections.EventCollection.set_lineoffset(self,lineoffset)
matplotlib.collections.EventCollection.set_orientation(self,orientation=None)
matplotlib.collections.EventCollection.set_positions(self,positions)
matplotlib.collections.EventCollection.switch_orientation(self)
matplotlib.collections.LineCollection(self,segments,linewidths=None,colors=None,antialiaseds=None,linestyles='solid',offsets=None,transOffset=None,norm=None,cmap=None,pickradius=5,zorder=2,facecolors='none',**kwargs)
matplotlib.collections.LineCollection.__init__(self,segments,linewidths=None,colors=None,antialiaseds=None,linestyles='solid',offsets=None,transOffset=None,norm=None,cmap=None,pickradius=5,zorder=2,facecolors='none',**kwargs)
matplotlib.collections.LineCollection._add_offsets(self,segs)
matplotlib.collections.LineCollection.get_color(self)
matplotlib.collections.LineCollection.get_segments(self)
matplotlib.collections.LineCollection.set_color(self,c)
matplotlib.collections.LineCollection.set_segments(self,segments)
matplotlib.collections.PatchCollection(self,patches,match_original=False,**kwargs)
matplotlib.collections.PatchCollection.__init__(self,patches,match_original=False,**kwargs)
matplotlib.collections.PatchCollection.set_paths(self,patches)
matplotlib.collections.PathCollection(self,paths,sizes=None,**kwargs)
matplotlib.collections.PathCollection.__init__(self,paths,sizes=None,**kwargs)
matplotlib.collections.PathCollection.get_paths(self)
matplotlib.collections.PathCollection.set_paths(self,paths)
matplotlib.collections.PolyCollection(self,verts,sizes=None,closed=True,**kwargs)
matplotlib.collections.PolyCollection.__init__(self,verts,sizes=None,closed=True,**kwargs)
matplotlib.collections.PolyCollection.set_verts(self,verts,closed=True)
matplotlib.collections.PolyCollection.set_verts_and_codes(self,verts,codes)
matplotlib.collections.QuadMesh(self,meshWidth,meshHeight,coordinates,antialiased=True,shading='flat',**kwargs)
matplotlib.collections.QuadMesh.__init__(self,meshWidth,meshHeight,coordinates,antialiased=True,shading='flat',**kwargs)
matplotlib.collections.QuadMesh.convert_mesh_to_paths(meshWidth,meshHeight,coordinates)
matplotlib.collections.QuadMesh.convert_mesh_to_triangles(self,meshWidth,meshHeight,coordinates)
matplotlib.collections.QuadMesh.draw(self,renderer)
matplotlib.collections.QuadMesh.get_datalim(self,transData)
matplotlib.collections.QuadMesh.get_paths(self)
matplotlib.collections.QuadMesh.set_paths(self)
matplotlib.collections.RegularPolyCollection(self,numsides,rotation=0,sizes=(1,),**kwargs)
matplotlib.collections.RegularPolyCollection.__init__(self,numsides,rotation=0,sizes=(1,),**kwargs)
matplotlib.collections.RegularPolyCollection.draw(self,renderer)
matplotlib.collections.RegularPolyCollection.get_numsides(self)
matplotlib.collections.RegularPolyCollection.get_rotation(self)
matplotlib.collections.StarPolygonCollection(RegularPolyCollection)
matplotlib.collections.TriMesh(self,triangulation,**kwargs)
matplotlib.collections.TriMesh.__init__(self,triangulation,**kwargs)
matplotlib.collections.TriMesh.convert_mesh_to_paths(tri)
matplotlib.collections.TriMesh.draw(self,renderer)
matplotlib.collections.TriMesh.get_paths(self)
matplotlib.collections.TriMesh.set_paths(self)
matplotlib.collections._CollectionWithSizes(Collection)
matplotlib.collections._CollectionWithSizes.draw(self,renderer)
matplotlib.collections._CollectionWithSizes.get_sizes(self)
matplotlib.collections._CollectionWithSizes.set_sizes(self,sizes,dpi=72.0)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/mathtext.py----------------------------------------
A:matplotlib.mathtext.self.image->FT2Image(ceil(w), ceil(h + max(d, 0)))
A:matplotlib.mathtext.height->max((x.height for x in middle))
A:matplotlib.mathtext.y->Hlist([Kern(subkern), sub])
A:matplotlib.mathtext.(ox, oy, width, height, depth, image, characters)->MathtextBackendAgg.get_results(self, box, used_characters)
A:matplotlib.mathtext.self.pswriter->six.moves.cStringIO()
A:matplotlib.mathtext.svg_elements->Bunch(svg_glyphs=self.svg_glyphs, svg_rects=self.svg_rects)
A:matplotlib.mathtext.thetext->unichr_safe(info.num)
A:matplotlib.mathtext.info->self._get_info(facename, font_class, sym, fontsize, dpi)
A:matplotlib.mathtext.(realpath, stat_key)->get_realpath_and_stat(info.font.fname)
A:matplotlib.mathtext.used_characters->self.used_characters.setdefault(stat_key, (realpath, set()))
A:matplotlib.mathtext.result->fontset_class(prop, backend).get_results(box)
A:matplotlib.mathtext.filename->findfont('Helvetica', fontext='afm', directory=self.basepath)
A:matplotlib.mathtext.default_font->AFM(fd)
A:matplotlib.mathtext.cached_font->AFM(fd)
A:matplotlib.mathtext.bunch->self.glyphd.get(key)
A:matplotlib.mathtext.(font, num, symbol_name, fontsize, slanted)->self._get_glyph(fontname, font_class, sym, fontsize, math)
A:matplotlib.mathtext.glyph->chr(num)
A:matplotlib.mathtext.offset->self._get_offset(font, glyph, fontsize, dpi)
A:matplotlib.mathtext.metrics->self.get_state().font_output.get_metrics(state.font, rcParams['mathtext.default'], '=', state.fontsize, state.dpi)
A:matplotlib.mathtext.resultself.glyphd[key]->Bunch(font=font, fontsize=fontsize, postscript_name=font.postscript_name, metrics=metrics, symbol_name=symbol_name, num=num, glyph=glyph, offset=offset)
A:matplotlib.mathtext.font->property(_get_font, _set_font)
A:matplotlib.mathtext.pclt->property(_get_font, _set_font).get_sfnt_table('pclt')
A:matplotlib.mathtext.info1->self._get_info(font1, fontclass1, sym1, fontsize1, dpi)
A:matplotlib.mathtext.info2->self._get_info(font2, fontclass2, sym2, fontsize2, dpi)
A:matplotlib.mathtext.self._stix_fallback->StixFonts(*args, **kwargs)
A:matplotlib.mathtext.fullpath->findfont(name)
A:matplotlib.mathtext._slanted_symbols->set('\\int \\oint'.split())
A:matplotlib.mathtext.num->ord(glyph)
A:matplotlib.mathtext.gid->property(_get_font, _set_font).get_char_index(num)
A:matplotlib.mathtext.symbol_name->property(_get_font, _set_font).get_name_char(glyph)
A:matplotlib.mathtext.self.cm_fallback->StixSansFonts(*args, **kwargs)
A:matplotlib.mathtext.prop->FontProperties()
A:matplotlib.mathtext.uniindex->fix_ups.get(uniindex, uniindex)
A:matplotlib.mathtext.(fontname, uniindex)->self._map_virtual_font(fontname, font_class, uniindex)
A:matplotlib.mathtext.unistring->unichr(uniindex)
A:matplotlib.mathtext.glyphindex->property(_get_font, _set_font).get_char_index(uniindex)
A:matplotlib.mathtext.self.bakoma->BakomaFonts(*args, **kwargs)
A:matplotlib.mathtext.mapping->matplotlib._mathtext_data.stix_virtual_fonts.get(fontname)
A:matplotlib.mathtext.hi->len(mapping)
A:matplotlib.mathtext.sym->fixes.get(sym, sym)
A:matplotlib.mathtext.alternatives->self.get_state().font_output.get_sized_alternatives_for_symbol(state.font, c)
A:matplotlib.mathtext.basepath->os.path.join(get_data_path(), 'fonts', 'afm')
A:matplotlib.mathtext.fname->os.path.join(self.basepath, basename + '.afm')
A:matplotlib.mathtext.tup->self.glyphd.get(key)
A:matplotlib.mathtext.self.glyphd[key]->Bunch(font=font, fontsize=fontsize, postscript_name=font.get_fontname(), metrics=metrics, symbol_name=symbol_name, num=num, glyph=glyph, offset=offset)
A:matplotlib.mathtext.constants->_get_font_constant_set(state)
A:matplotlib.mathtext.metricsself._metrics->self.font_output.get_metrics(self.font, self.font_class, self.c, self.fontsize, self.dpi)
A:matplotlib.mathtext.kern->Kern(kerning_distance)
A:matplotlib.mathtext.o->self._determine_order(totals)
A:matplotlib.mathtext.num_children->len(self.children)
A:matplotlib.mathtext.kerning_distance->elem.get_kerning(next)
A:matplotlib.mathtext.h->max(h, p.height - s)
A:matplotlib.mathtext.d->max(d, p.depth + s)
A:matplotlib.mathtext.s->toks[0].replace('\\$', '$')
A:matplotlib.mathtext.w->max(w, p.width + s)
A:matplotlib.mathtext.thickness->self.get_state().font_output.get_underline_thickness(state.font, state.fontsize, state.dpi)
A:matplotlib.mathtext.glue_spec->glue_spec.copy().copy()
A:matplotlib.mathtext.self.glue_spec->self.glue_spec.copy()
A:matplotlib.mathtext.factory->classmethod(factory)
A:matplotlib.mathtext.xHeight->self.get_state().font_output.get_xheight(state.font, state.fontsize, state.dpi)
A:matplotlib.mathtext.state->self.get_state()
A:matplotlib.mathtext.char->Char(c, self.get_state())
A:matplotlib.mathtext.clamp->staticmethod(clamp)
A:matplotlib.mathtext.self.max_push->max(self.max_push, self.cur_s)
A:matplotlib.mathtext.cur_g->numpy.round(clamp(float(box.glue_set) * cur_glue))
A:matplotlib.mathtext.ship->Ship()
A:matplotlib.mathtext.empty->Empty()
A:matplotlib.mathtext._math_style_dict->dict(displaystyle=0, textstyle=1, scriptstyle=2, scriptscriptstyle=3)
A:matplotlib.mathtext._binary_operators->set('\n      + * -\n      \\pm             \\sqcap                   \\rhd\n      \\mp             \\sqcup                   \\unlhd\n      \\times          \\vee                     \\unrhd\n      \\div            \\wedge                   \\oplus\n      \\ast            \\setminus                \\ominus\n      \\star           \\wr                      \\otimes\n      \\circ           \\diamond                 \\oslash\n      \\bullet         \\bigtriangleup           \\odot\n      \\cdot           \\bigtriangledown         \\bigcirc\n      \\cap            \\triangleleft            \\dagger\n      \\cup            \\triangleright           \\ddagger\n      \\uplus          \\lhd                     \\amalg'.split())
A:matplotlib.mathtext._relation_symbols->set('\n      = < > :\n      \\leq            \\geq             \\equiv           \\models\n      \\prec           \\succ            \\sim             \\perp\n      \\preceq         \\succeq          \\simeq           \\mid\n      \\ll             \\gg              \\asymp           \\parallel\n      \\subset         \\supset          \\approx          \\bowtie\n      \\subseteq       \\supseteq        \\cong            \\Join\n      \\sqsubset       \\sqsupset        \\neq             \\smile\n      \\sqsubseteq     \\sqsupseteq      \\doteq           \\frown\n      \\in             \\ni              \\propto          \\vdash\n      \\dashv          \\dots            \\dotplus         \\doteqdot'.split())
A:matplotlib.mathtext._arrow_symbols->set('\n      \\leftarrow              \\longleftarrow           \\uparrow\n      \\Leftarrow              \\Longleftarrow           \\Uparrow\n      \\rightarrow             \\longrightarrow          \\downarrow\n      \\Rightarrow             \\Longrightarrow          \\Downarrow\n      \\leftrightarrow         \\longleftrightarrow      \\updownarrow\n      \\Leftrightarrow         \\Longleftrightarrow      \\Updownarrow\n      \\mapsto                 \\longmapsto              \\nearrow\n      \\hookleftarrow          \\hookrightarrow          \\searrow\n      \\leftharpoonup          \\rightharpoonup          \\swarrow\n      \\leftharpoondown        \\rightharpoondown        \\nwarrow\n      \\rightleftharpoons      \\leadsto'.split())
A:matplotlib.mathtext._punctuation_symbols->set(', ; . ! \\ldotp \\cdotp'.split())
A:matplotlib.mathtext._overunder_symbols->set('\n       \\sum \\prod \\coprod \\bigcap \\bigcup \\bigsqcup \\bigvee\n       \\bigwedge \\bigodot \\bigotimes \\bigoplus \\biguplus\n       '.split())
A:matplotlib.mathtext._overunder_functions->set('lim liminf limsup sup max min'.split())
A:matplotlib.mathtext._dropsub_symbols->set('\\int \\oint'.split())
A:matplotlib.mathtext._fontnames->set('rm cal it tt sf bf default bb frak circled scr regular'.split())
A:matplotlib.mathtext._function_names->set('\n      arccos csc ker min arcsin deg lg Pr arctan det lim sec arg dim\n      liminf sin cos exp limsup sinh cosh gcd ln sup cot hom log tan\n      coth inf max tanh'.split())
A:matplotlib.mathtext._ambi_delim->set('\n      | \\| / \\backslash \\uparrow \\downarrow \\updownarrow \\Uparrow\n      \\Downarrow \\Updownarrow . \\vert \\Vert \\\\|'.split())
A:matplotlib.mathtext._left_delim->set('( [ \\{ < \\lfloor \\langle \\lceil'.split())
A:matplotlib.mathtext._right_delim->set(') ] \\} > \\rfloor \\rangle \\rceil'.split())
A:matplotlib.mathtext.p->Bunch()
A:matplotlib.mathtext.p.accent->Forward()
A:matplotlib.mathtext.p.ambi_delim->Forward()
A:matplotlib.mathtext.p.apostrophe->Forward()
A:matplotlib.mathtext.p.auto_delim->Forward()
A:matplotlib.mathtext.p.binom->Forward()
A:matplotlib.mathtext.p.bslash->Forward()
A:matplotlib.mathtext.p.c_over_c->Forward()
A:matplotlib.mathtext.p.customspace->Forward()
A:matplotlib.mathtext.p.end_group->Forward()
A:matplotlib.mathtext.p.float_literal->Forward()
A:matplotlib.mathtext.p.font->Forward()
A:matplotlib.mathtext.p.frac->Forward()
A:matplotlib.mathtext.p.dfrac->Forward()
A:matplotlib.mathtext.p.function->Forward()
A:matplotlib.mathtext.p.genfrac->Forward()
A:matplotlib.mathtext.p.group->Forward()
A:matplotlib.mathtext.p.int_literal->Forward()
A:matplotlib.mathtext.p.latexfont->Forward()
A:matplotlib.mathtext.p.lbracket->Forward()
A:matplotlib.mathtext.p.left_delim->Forward()
A:matplotlib.mathtext.p.lbrace->Forward()
A:matplotlib.mathtext.p.main->Forward()
A:matplotlib.mathtext.p.math->Forward()
A:matplotlib.mathtext.p.math_string->Forward()
A:matplotlib.mathtext.p.non_math->Forward()
A:matplotlib.mathtext.p.operatorname->Forward()
A:matplotlib.mathtext.p.overline->Forward()
A:matplotlib.mathtext.p.placeable->Forward()
A:matplotlib.mathtext.p.rbrace->Forward()
A:matplotlib.mathtext.p.rbracket->Forward()
A:matplotlib.mathtext.p.required_group->Forward()
A:matplotlib.mathtext.p.right_delim->Forward()
A:matplotlib.mathtext.p.right_delim_safe->Forward()
A:matplotlib.mathtext.p.simple->Forward()
A:matplotlib.mathtext.p.simple_group->Forward()
A:matplotlib.mathtext.p.single_symbol->Forward()
A:matplotlib.mathtext.p.snowflake->Forward()
A:matplotlib.mathtext.p.space->Forward()
A:matplotlib.mathtext.p.sqrt->Forward()
A:matplotlib.mathtext.p.stackrel->Forward()
A:matplotlib.mathtext.p.start_group->Forward()
A:matplotlib.mathtext.p.subsuper->Forward()
A:matplotlib.mathtext.p.subsuperop->Forward()
A:matplotlib.mathtext.p.symbol->Forward()
A:matplotlib.mathtext.p.symbol_name->Forward()
A:matplotlib.mathtext.p.token->Forward()
A:matplotlib.mathtext.p.unknown_symbol->Forward()
A:matplotlib.mathtext.hlist->Hlist(parts)
A:matplotlib.mathtext.width->max(num.width, den.width)
A:matplotlib.mathtext.box->self._parser.parse(s, font_output, fontsize, dpi)
A:matplotlib.mathtext.(under_desc, over_desc, space)->self._char_over_chars.get(sym, (None, None, 0.0))
A:matplotlib.mathtext.over_state->self.get_state().copy()
A:matplotlib.mathtext.over->Accent(over_desc[1], over_state)
A:matplotlib.mathtext.under_state->self.get_state().copy()
A:matplotlib.mathtext.under->Char(under_desc[1], under_state)
A:matplotlib.mathtext.over_centered->HCentered([over])
A:matplotlib.mathtext.under_centered->HCentered([under])
A:matplotlib.mathtext._wide_accents->set('widehat widetilde widebar'.split())
A:matplotlib.mathtext._snowflake->(lambda am: [p for p in tex2uni if any((p.startswith(a) and a != p for a in am))])(set(_accent_map))
A:matplotlib.mathtext.accent_box->Accent(self._accent_map[accent], state)
A:matplotlib.mathtext.centered->HCentered([Hbox(sym.width / 4.0), accent_box])
A:matplotlib.mathtext.grp->Hlist(toks[0])
A:matplotlib.mathtext.nucleus->Hlist([nucleus])
A:matplotlib.mathtext.rule_thickness->self.get_state().font_output.get_underline_thickness(state.font, state.fontsize, state.dpi)
A:matplotlib.mathtext.super->Hlist([])
A:matplotlib.mathtext.vlist->Vlist([cnum, Vbox(0, thickness * 2.0), Hrule(state, rule), Vbox(0, thickness * 2.0), cden])
A:matplotlib.mathtext.x->ftimage.as_array()
A:matplotlib.mathtext.rule->float(rule)
A:matplotlib.mathtext.cnum->HCentered([num])
A:matplotlib.mathtext.cden->HCentered([den])
A:matplotlib.mathtext.check->AutoHeightChar('\\__sqrt__', height, depth, state, always=True)
A:matplotlib.mathtext.padded_body->Hlist([Hbox(thickness * 2.0), body, Hbox(thickness * 2.0)])
A:matplotlib.mathtext.rightside->Vlist([Hrule(state), Fill(), Hlist([body])])
A:matplotlib.mathtext.root->Hlist([Char(x, state) for x in root])
A:matplotlib.mathtext.root_vlist->Vlist([Hlist([root])])
A:matplotlib.mathtext.depth->max((x.depth for x in middle))
A:matplotlib.mathtext.self._output->output.lower()
A:matplotlib.mathtext.self._cache->maxdict(50)
A:matplotlib.mathtext.font_output->fontset_class(prop, backend)
A:matplotlib.mathtext.backend->self._backend_mapping[self._output]()
A:matplotlib.mathtext.fontset_class->self._font_type_mapping.get(fontset.lower())
A:matplotlib.mathtext.fontsize->FontProperties().get_size_in_points()
A:matplotlib.mathtext.self.__class__._parser->Parser()
A:matplotlib.mathtext.(ftimage, depth)->self.parse(texstr, dpi=dpi, prop=prop)
A:matplotlib.mathtext.(x, depth)->self.to_mask(texstr, dpi=dpi, fontsize=fontsize)
A:matplotlib.mathtext.(r, g, b, a)->matplotlib.colors.to_rgba(color)
A:matplotlib.mathtext.RGBA->numpy.zeros((x.shape[0], x.shape[1], 4), dtype=np.uint8)
A:matplotlib.mathtext.(rgba, depth)->self.to_rgba(texstr, color=color, dpi=dpi, fontsize=fontsize)
A:matplotlib.mathtext.parser->MathTextParser('path')
A:matplotlib.mathtext.(width, height, depth, _, _)->MathTextParser('path').parse(s, dpi=72, prop=prop)
A:matplotlib.mathtext.fig->matplotlib.figure.Figure(figsize=(width / 72.0, height / 72.0))
matplotlib.mathtext.Accent(Char)
matplotlib.mathtext.Accent._update_metrics(self)
matplotlib.mathtext.Accent.grow(self)
matplotlib.mathtext.Accent.render(self,x,y)
matplotlib.mathtext.Accent.shrink(self)
matplotlib.mathtext.AutoHeightChar(self,c,height,depth,state,always=False,factor=None)
matplotlib.mathtext.AutoHeightChar.__init__(self,c,height,depth,state,always=False,factor=None)
matplotlib.mathtext.AutoWidthChar(self,c,width,state,always=False,char_class=Char)
matplotlib.mathtext.AutoWidthChar.__init__(self,c,width,state,always=False,char_class=Char)
matplotlib.mathtext.BakomaFonts(self,*args,**kwargs)
matplotlib.mathtext.BakomaFonts.__init__(self,*args,**kwargs)
matplotlib.mathtext.BakomaFonts._get_glyph(self,fontname,font_class,sym,fontsize,math=True)
matplotlib.mathtext.BakomaFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib.mathtext.Box(self,width,height,depth)
matplotlib.mathtext.Box.__init__(self,width,height,depth)
matplotlib.mathtext.Box.grow(self)
matplotlib.mathtext.Box.render(self,x1,y1,x2,y2)
matplotlib.mathtext.Box.shrink(self)
matplotlib.mathtext.Char(self,c,state,math=True)
matplotlib.mathtext.Char.__init__(self,c,state,math=True)
matplotlib.mathtext.Char.__internal_repr__(self)
matplotlib.mathtext.Char._update_metrics(self)
matplotlib.mathtext.Char.get_kerning(self,next)
matplotlib.mathtext.Char.grow(self)
matplotlib.mathtext.Char.is_slanted(self)
matplotlib.mathtext.Char.render(self,x,y)
matplotlib.mathtext.Char.shrink(self)
matplotlib.mathtext.ComputerModernFontConstants(FontConstantsBase)
matplotlib.mathtext.DejaVuFonts(self,*args,**kwargs)
matplotlib.mathtext.DejaVuFonts.__init__(self,*args,**kwargs)
matplotlib.mathtext.DejaVuFonts._get_glyph(self,fontname,font_class,sym,fontsize,math=True)
matplotlib.mathtext.DejaVuSansFontConstants(FontConstantsBase)
matplotlib.mathtext.DejaVuSansFonts(DejaVuFonts)
matplotlib.mathtext.DejaVuSerifFontConstants(FontConstantsBase)
matplotlib.mathtext.DejaVuSerifFonts(DejaVuFonts)
matplotlib.mathtext.Error(msg)
matplotlib.mathtext.Fil(self)
matplotlib.mathtext.Fil.__init__(self)
matplotlib.mathtext.Fill(self)
matplotlib.mathtext.Fill.__init__(self)
matplotlib.mathtext.Filll(self)
matplotlib.mathtext.Filll.__init__(self)
matplotlib.mathtext.FontConstantsBase(object)
matplotlib.mathtext.Fonts(self,default_font_prop,mathtext_backend)
matplotlib.mathtext.Fonts.__init__(self,default_font_prop,mathtext_backend)
matplotlib.mathtext.Fonts.destroy(self)
matplotlib.mathtext.Fonts.get_kern(self,font1,fontclass1,sym1,fontsize1,font2,fontclass2,sym2,fontsize2,dpi)
matplotlib.mathtext.Fonts.get_metrics(self,font,font_class,sym,fontsize,dpi,math=True)
matplotlib.mathtext.Fonts.get_results(self,box)
matplotlib.mathtext.Fonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib.mathtext.Fonts.get_underline_thickness(self,font,fontsize,dpi)
matplotlib.mathtext.Fonts.get_used_characters(self)
matplotlib.mathtext.Fonts.get_xheight(self,font,fontsize,dpi)
matplotlib.mathtext.Fonts.render_glyph(self,ox,oy,facename,font_class,sym,fontsize,dpi)
matplotlib.mathtext.Fonts.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.Fonts.set_canvas_size(self,w,h,d)
matplotlib.mathtext.Glue(self,glue_type,copy=False)
matplotlib.mathtext.Glue.__init__(self,glue_type,copy=False)
matplotlib.mathtext.Glue.grow(self)
matplotlib.mathtext.Glue.shrink(self)
matplotlib.mathtext.GlueSpec(self,width=0.0,stretch=0.0,stretch_order=0,shrink=0.0,shrink_order=0)
matplotlib.mathtext.GlueSpec.__init__(self,width=0.0,stretch=0.0,stretch_order=0,shrink=0.0,shrink_order=0)
matplotlib.mathtext.GlueSpec.copy(self)
matplotlib.mathtext.GlueSpec.factory(cls,glue_type)
matplotlib.mathtext.HCentered(self,elements)
matplotlib.mathtext.HCentered.__init__(self,elements)
matplotlib.mathtext.Hbox(self,width)
matplotlib.mathtext.Hbox.__init__(self,width)
matplotlib.mathtext.Hlist(self,elements,w=0.0,m='additional',do_kern=True)
matplotlib.mathtext.Hlist.__init__(self,elements,w=0.0,m='additional',do_kern=True)
matplotlib.mathtext.Hlist.hpack(self,w=0.0,m='additional')
matplotlib.mathtext.Hlist.kern(self)
matplotlib.mathtext.Hrule(self,state,thickness=None)
matplotlib.mathtext.Hrule.__init__(self,state,thickness=None)
matplotlib.mathtext.Kern(self,width)
matplotlib.mathtext.Kern.__init__(self,width)
matplotlib.mathtext.Kern.__repr__(self)
matplotlib.mathtext.Kern.grow(self)
matplotlib.mathtext.Kern.shrink(self)
matplotlib.mathtext.List(self,elements)
matplotlib.mathtext.List.__init__(self,elements)
matplotlib.mathtext.List.__repr__(self)
matplotlib.mathtext.List._determine_order(self,totals)
matplotlib.mathtext.List._set_glue(self,x,sign,totals,error_type)
matplotlib.mathtext.List.grow(self)
matplotlib.mathtext.List.shrink(self)
matplotlib.mathtext.MathTextParser(self,output)
matplotlib.mathtext.MathTextParser.__init__(self,output)
matplotlib.mathtext.MathTextParser.get_depth(self,texstr,dpi=120,fontsize=14)
matplotlib.mathtext.MathTextParser.parse(self,s,dpi=72,prop=None)
matplotlib.mathtext.MathTextParser.to_mask(self,texstr,dpi=120,fontsize=14)
matplotlib.mathtext.MathTextParser.to_png(self,filename,texstr,color='black',dpi=120,fontsize=14)
matplotlib.mathtext.MathTextParser.to_rgba(self,texstr,color='black',dpi=120,fontsize=14)
matplotlib.mathtext.MathTextWarning(Warning)
matplotlib.mathtext.MathtextBackend(self)
matplotlib.mathtext.MathtextBackend.__init__(self)
matplotlib.mathtext.MathtextBackend.get_hinting_type(self)
matplotlib.mathtext.MathtextBackend.get_results(self,box)
matplotlib.mathtext.MathtextBackend.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackend.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackend.set_canvas_size(self,w,h,d)
matplotlib.mathtext.MathtextBackendAgg(self)
matplotlib.mathtext.MathtextBackendAgg.__init__(self)
matplotlib.mathtext.MathtextBackendAgg._update_bbox(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendAgg.get_hinting_type(self)
matplotlib.mathtext.MathtextBackendAgg.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendAgg.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendAgg.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendAgg.set_canvas_size(self,w,h,d)
matplotlib.mathtext.MathtextBackendBitmap(MathtextBackendAgg)
matplotlib.mathtext.MathtextBackendBitmap.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendCairo(self)
matplotlib.mathtext.MathtextBackendCairo.__init__(self)
matplotlib.mathtext.MathtextBackendCairo.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendCairo.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendCairo.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendPath(self)
matplotlib.mathtext.MathtextBackendPath.__init__(self)
matplotlib.mathtext.MathtextBackendPath.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendPath.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendPath.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendPdf(self)
matplotlib.mathtext.MathtextBackendPdf.__init__(self)
matplotlib.mathtext.MathtextBackendPdf.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendPdf.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendPdf.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendPs(self)
matplotlib.mathtext.MathtextBackendPs.__init__(self)
matplotlib.mathtext.MathtextBackendPs.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendPs.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendPs.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.MathtextBackendSvg(self)
matplotlib.mathtext.MathtextBackendSvg.__init__(self)
matplotlib.mathtext.MathtextBackendSvg.get_results(self,box,used_characters)
matplotlib.mathtext.MathtextBackendSvg.render_glyph(self,ox,oy,info)
matplotlib.mathtext.MathtextBackendSvg.render_rect_filled(self,x1,y1,x2,y2)
matplotlib.mathtext.NegFil(self)
matplotlib.mathtext.NegFil.__init__(self)
matplotlib.mathtext.NegFill(self)
matplotlib.mathtext.NegFill.__init__(self)
matplotlib.mathtext.NegFilll(self)
matplotlib.mathtext.NegFilll.__init__(self)
matplotlib.mathtext.Node(self)
matplotlib.mathtext.Node.__init__(self)
matplotlib.mathtext.Node.__internal_repr__(self)
matplotlib.mathtext.Node.__repr__(self)
matplotlib.mathtext.Node.get_kerning(self,next)
matplotlib.mathtext.Node.grow(self)
matplotlib.mathtext.Node.render(self,x,y)
matplotlib.mathtext.Node.shrink(self)
matplotlib.mathtext.Parser(self)
matplotlib.mathtext.Parser.State(self,font_output,font,font_class,fontsize,dpi)
matplotlib.mathtext.Parser.State.__init__(self,font_output,font,font_class,fontsize,dpi)
matplotlib.mathtext.Parser.State._get_font(self)
matplotlib.mathtext.Parser.State._set_font(self,name)
matplotlib.mathtext.Parser.State.copy(self)
matplotlib.mathtext.Parser.__init__(self)
matplotlib.mathtext.Parser._auto_sized_delimiter(self,front,middle,back)
matplotlib.mathtext.Parser._genfrac(self,ldelim,rdelim,rule,style,num,den)
matplotlib.mathtext.Parser._make_space(self,percentage)
matplotlib.mathtext.Parser.accent(self,s,loc,toks)
matplotlib.mathtext.Parser.auto_delim(self,s,loc,toks)
matplotlib.mathtext.Parser.binom(self,s,loc,toks)
matplotlib.mathtext.Parser.c_over_c(self,s,loc,toks)
matplotlib.mathtext.Parser.customspace(self,s,loc,toks)
matplotlib.mathtext.Parser.dfrac(self,s,loc,toks)
matplotlib.mathtext.Parser.end_group(self,s,loc,toks)
matplotlib.mathtext.Parser.font(self,s,loc,toks)
matplotlib.mathtext.Parser.frac(self,s,loc,toks)
matplotlib.mathtext.Parser.function(self,s,loc,toks)
matplotlib.mathtext.Parser.genfrac(self,s,loc,toks)
matplotlib.mathtext.Parser.get_state(self)
matplotlib.mathtext.Parser.group(self,s,loc,toks)
matplotlib.mathtext.Parser.is_between_brackets(self,s,loc)
matplotlib.mathtext.Parser.is_dropsub(self,nucleus)
matplotlib.mathtext.Parser.is_overunder(self,nucleus)
matplotlib.mathtext.Parser.is_slanted(self,nucleus)
matplotlib.mathtext.Parser.main(self,s,loc,toks)
matplotlib.mathtext.Parser.math(self,s,loc,toks)
matplotlib.mathtext.Parser.math_string(self,s,loc,toks)
matplotlib.mathtext.Parser.non_math(self,s,loc,toks)
matplotlib.mathtext.Parser.operatorname(self,s,loc,toks)
matplotlib.mathtext.Parser.overline(self,s,loc,toks)
matplotlib.mathtext.Parser.parse(self,s,fonts_object,fontsize,dpi)
matplotlib.mathtext.Parser.pop_state(self)
matplotlib.mathtext.Parser.push_state(self)
matplotlib.mathtext.Parser.space(self,s,loc,toks)
matplotlib.mathtext.Parser.sqrt(self,s,loc,toks)
matplotlib.mathtext.Parser.stackrel(self,s,loc,toks)
matplotlib.mathtext.Parser.start_group(self,s,loc,toks)
matplotlib.mathtext.Parser.subsuper(self,s,loc,toks)
matplotlib.mathtext.Parser.symbol(self,s,loc,toks)
matplotlib.mathtext.Parser.unknown_symbol(self,s,loc,toks)
matplotlib.mathtext.Rule(self,width,height,depth,state)
matplotlib.mathtext.Rule.__init__(self,width,height,depth,state)
matplotlib.mathtext.Rule.render(self,x,y,w,h)
matplotlib.mathtext.STIXFontConstants(FontConstantsBase)
matplotlib.mathtext.STIXSansFontConstants(FontConstantsBase)
matplotlib.mathtext.Ship(self,ox,oy,box)
matplotlib.mathtext.Ship.__call__(self,ox,oy,box)
matplotlib.mathtext.Ship.clamp(value)
matplotlib.mathtext.Ship.hlist_out(self,box)
matplotlib.mathtext.Ship.vlist_out(self,box)
matplotlib.mathtext.SsGlue(self)
matplotlib.mathtext.SsGlue.__init__(self)
matplotlib.mathtext.StandardPsFonts(self,default_font_prop)
matplotlib.mathtext.StandardPsFonts.__init__(self,default_font_prop)
matplotlib.mathtext.StandardPsFonts._get_font(self,font)
matplotlib.mathtext.StandardPsFonts._get_info(self,fontname,font_class,sym,fontsize,dpi,math=True)
matplotlib.mathtext.StandardPsFonts.get_kern(self,font1,fontclass1,sym1,fontsize1,font2,fontclass2,sym2,fontsize2,dpi)
matplotlib.mathtext.StandardPsFonts.get_underline_thickness(self,font,fontsize,dpi)
matplotlib.mathtext.StandardPsFonts.get_xheight(self,font,fontsize,dpi)
matplotlib.mathtext.StixFonts(self,*args,**kwargs)
matplotlib.mathtext.StixFonts.__init__(self,*args,**kwargs)
matplotlib.mathtext.StixFonts._map_virtual_font(self,fontname,font_class,uniindex)
matplotlib.mathtext.StixFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib.mathtext.StixSansFonts(StixFonts)
matplotlib.mathtext.SubSuperCluster(self)
matplotlib.mathtext.SubSuperCluster.__init__(self)
matplotlib.mathtext.TruetypeFonts(self,default_font_prop,mathtext_backend)
matplotlib.mathtext.TruetypeFonts.__init__(self,default_font_prop,mathtext_backend)
matplotlib.mathtext.TruetypeFonts._get_font(self,font)
matplotlib.mathtext.TruetypeFonts._get_info(self,fontname,font_class,sym,fontsize,dpi,math=True)
matplotlib.mathtext.TruetypeFonts._get_offset(self,font,glyph,fontsize,dpi)
matplotlib.mathtext.TruetypeFonts.destroy(self)
matplotlib.mathtext.TruetypeFonts.get_kern(self,font1,fontclass1,sym1,fontsize1,font2,fontclass2,sym2,fontsize2,dpi)
matplotlib.mathtext.TruetypeFonts.get_underline_thickness(self,font,fontsize,dpi)
matplotlib.mathtext.TruetypeFonts.get_xheight(self,fontname,fontsize,dpi)
matplotlib.mathtext.UnicodeFonts(self,*args,**kwargs)
matplotlib.mathtext.UnicodeFonts.__init__(self,*args,**kwargs)
matplotlib.mathtext.UnicodeFonts._get_glyph(self,fontname,font_class,sym,fontsize,math=True)
matplotlib.mathtext.UnicodeFonts._map_virtual_font(self,fontname,font_class,uniindex)
matplotlib.mathtext.UnicodeFonts.get_sized_alternatives_for_symbol(self,fontname,sym)
matplotlib.mathtext.VCentered(self,elements)
matplotlib.mathtext.VCentered.__init__(self,elements)
matplotlib.mathtext.Vbox(self,height,depth)
matplotlib.mathtext.Vbox.__init__(self,height,depth)
matplotlib.mathtext.Vlist(self,elements,h=0.0,m='additional')
matplotlib.mathtext.Vlist.__init__(self,elements,h=0.0,m='additional')
matplotlib.mathtext.Vlist.vpack(self,h=0.0,m='additional',l=np.inf)
matplotlib.mathtext.Vrule(self,state)
matplotlib.mathtext.Vrule.__init__(self,state)
matplotlib.mathtext._get_font_constant_set(state)
matplotlib.mathtext.get_unicode_index(symbol,math=True)
matplotlib.mathtext.math_to_image(s,filename_or_obj,prop=None,dpi=None,format=None)
matplotlib.mathtext.unichr_safe(index)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/axis.py----------------------------------------
A:matplotlib.axis._log->logging.getLogger(__name__)
A:matplotlib.axis._line_AI->matplotlib.artist.ArtistInspector(mlines.Line2D)
A:matplotlib.axis._line_param_names->matplotlib.artist.ArtistInspector(mlines.Line2D).get_setters()
A:matplotlib.axis.name->self.__name__.lower()
A:matplotlib.axis.self.tick1line->self._get_tick1line()
A:matplotlib.axis.self.tick2line->self._get_tick2line()
A:matplotlib.axis.self.gridline->self._get_gridline()
A:matplotlib.axis.self.label1->self._get_text1()
A:matplotlib.axis.self.label2->self._get_text2()
A:matplotlib.axis.self._size->kw.pop('size', self._size)
A:matplotlib.axis.self._width->kw.pop('width', self._width)
A:matplotlib.axis.self._base_pad->kw.pop('pad', self._base_pad)
A:matplotlib.axis.v->getattr(self.label1, 'get_' + k)()
A:matplotlib.axis.(trans, vert, horiz)->self._get_text2_transform()
A:matplotlib.axis.t->matplotlib.text.Text(x=1, y=0, fontproperties=font_manager.FontProperties(size=self._labelsize), color=self._labelcolor, verticalalignment=vert, horizontalalignment=horiz)
A:matplotlib.axis.l->matplotlib.lines.Line2D(xdata=(0, 1), ydata=(0, 0), color=self._grid_color, linestyle=self._grid_linestyle, linewidth=self._grid_linewidth, alpha=self._grid_alpha, markersize=0, **self._grid_kw)
A:matplotlib.axis.tick->self._get_tick(True)
A:matplotlib.axis.self.major->Ticker()
A:matplotlib.axis.self.minor->Ticker()
A:matplotlib.axis.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.axis.self.label->self._get_label()
A:matplotlib.axis.self.offsetText->self._get_offset_text()
A:matplotlib.axis.self._major_tick_kw->dict()
A:matplotlib.axis.self._minor_tick_kw->dict()
A:matplotlib.axis.majorTicks->self.get_major_ticks(len(majorLocs))
A:matplotlib.axis.minorTicks->self.get_minor_ticks(len(minorLocs))
A:matplotlib.axis.self._scale->matplotlib.scale.scale_factory(value, self, **kwargs)
A:matplotlib.axis.majorticks->self.get_major_ticks()
A:matplotlib.axis.minorticks->self.get_minor_ticks()
A:matplotlib.axis.kwtrans->dict()
A:matplotlib.axis.kwtrans['size']->kw.pop('length')
A:matplotlib.axis.kwtrans['tickdir']->kw.pop('direction')
A:matplotlib.axis.kwtrans['labelrotation']->kw.pop('rotation')
A:matplotlib.axis.kwtrans['tick1On']->_string_to_bool(kw.pop('bottom'))
A:matplotlib.axis.kwtrans['tick2On']->_string_to_bool(kw.pop('top'))
A:matplotlib.axis.kwtrans['label1On']->_string_to_bool(kw.pop('labelbottom'))
A:matplotlib.axis.kwtrans['label2On']->_string_to_bool(kw.pop('labeltop'))
A:matplotlib.axis.c->kw.pop('colors')
A:matplotlib.axis.majorLocs->self.major.locator()
A:matplotlib.axis.minorLocs->self.minor.locator()
A:matplotlib.axis.ticks_to_draw->axx.yaxis._update_ticks(renderer)
A:matplotlib.axis.(ticklabelBoxes, ticklabelBoxes2)->self._get_tick_bboxes(ticks_to_draw, renderer)
A:matplotlib.axis.bbox->matplotlib.transforms.Bbox.union(bboxes2 + [spinebbox])
A:matplotlib.axis.bbox2->matplotlib.transforms.Bbox.from_extents(0, 0, 0, 0)
A:matplotlib.axis.interval->self.get_view_interval()
A:matplotlib.axis.tick_tups->list(self.iter_ticks())
A:matplotlib.axis.(view_low, view_high)->sorted(interval)
A:matplotlib.axis.(data_low, data_high)->sorted(self.get_data_interval())
A:matplotlib.axis.locs->numpy.sort([ti[1] for ti in tick_tups])
A:matplotlib.axis.ds1->self._get_pixel_distance_along_axis(interval_expanded[0], -0.5)
A:matplotlib.axis.ds2->self._get_pixel_distance_along_axis(interval_expanded[1], +0.5)
A:matplotlib.axis.extent->self._get_tick(True).label2.get_window_extent(renderer)
A:matplotlib.axis._bbox->matplotlib.transforms.Bbox.union(bb)
A:matplotlib.axis.ticks->self.convert_units(ticks)
A:matplotlib.axis.numticks->len(self.get_minor_locator()())
A:matplotlib.axis.which->which.lower().lower()
A:matplotlib.axis.converter->matplotlib.units.registry.get_converter(data)
A:matplotlib.axis.default->self.converter.default_units(data, self)
A:matplotlib.axis.info->self.converter.axisinfo(self.units, self)
A:matplotlib.axis.self.converter->matplotlib.units.registry.get_converter(x)
A:matplotlib.axis.ret->self.converter.convert(x, self.units, self)
A:matplotlib.axis.minor->kwargs.pop('minor', False)
A:matplotlib.axis.(xleft, xright)->self.get_view_interval()
A:matplotlib.axis.tz->pytz.timezone(tz)
A:matplotlib.axis.trans->self.axes.transAxes.inverted()
A:matplotlib.axis.(xaxes, yaxes)->self.axes.transAxes.inverted().transform_point((x, y))
A:matplotlib.axis.(l, b)->self.axes.transAxes.transform_point((0, 0))
A:matplotlib.axis.(r, t)->self.axes.transAxes.transform_point((1, 1))
A:matplotlib.axis.label->matplotlib.text.Text(x=0, y=0.5, fontproperties=font_manager.FontProperties(size=rcParams['axes.labelsize'], weight=rcParams['axes.labelweight']), color=rcParams['axes.labelcolor'], verticalalignment='bottom', horizontalalignment='center', rotation='vertical', rotation_mode='anchor')
A:matplotlib.axis.offsetText->matplotlib.text.Text(x=0, y=0.5, fontproperties=font_manager.FontProperties(size=rcParams['ytick.labelsize']), color=rcParams['ytick.color'], verticalalignment='baseline', horizontalalignment='left')
A:matplotlib.axis.transinv->self.axes.transAxes.inverted().inverted()
A:matplotlib.axis.pix->self.axes.transAxes.inverted().transform_point((1e-10, where))
A:matplotlib.axis.ptp->self.axes.transAxes.inverted().inverted().transform_point((pix[0], pix[1] + perturb))
A:matplotlib.axis.dx->abs(ptp[0] - where)
A:matplotlib.axis.(tlb, tlb2)->axx.yaxis._get_tick_bboxes(ticks_to_draw, renderer)
A:matplotlib.axis.(bboxes, bboxes2)->self._get_tick_boxes_siblings(renderer=renderer)
A:matplotlib.axis.(x, y)->self.offsetText.get_position()
A:matplotlib.axis.spinebbox->spine.get_transform().transform_path(spine.get_path()).get_extents()
A:matplotlib.axis.(bbox, bbox2)->self.get_ticklabel_extents(renderer)
A:matplotlib.axis.padPixels->self.majorTicks[0].get_pad_pixels()
A:matplotlib.axis.(Vmin, Vmax)->self.get_data_interval()
A:matplotlib.axis.dataMutated->self.axes.dataLim.mutatedy()
A:matplotlib.axis.viewMutated->self.axes.viewLim.mutatedy()
A:matplotlib.axis.xmin->self.converter.convert(valmin, self.units, self)
A:matplotlib.axis.xmax->self.converter.convert(valmax, self.units, self)
A:matplotlib.axis.ends->self.axes.transAxes.transform([[0, 0], [0, 1]])
A:matplotlib.axis.dy->abs(ptp[1] - where)
A:matplotlib.axis.ymin->self.converter.convert(valmin, self.units, self)
A:matplotlib.axis.ymax->self.converter.convert(valmax, self.units, self)
matplotlib.axis.Axis(self,axes,pickradius=15)
matplotlib.axis.Axis.__init__(self,axes,pickradius=15)
matplotlib.axis.Axis.__str__(self)
matplotlib.axis.Axis._copy_tick_props(self,src,dest)
matplotlib.axis.Axis._get_label(self)
matplotlib.axis.Axis._get_offset_text(self)
matplotlib.axis.Axis._get_tick(self,major)
matplotlib.axis.Axis._get_tick_bboxes(self,ticks,renderer)
matplotlib.axis.Axis._get_tick_boxes_siblings(self,xdir,renderer)
matplotlib.axis.Axis._set_artist_props(self,a)
matplotlib.axis.Axis._set_scale(self,value,**kwargs)
matplotlib.axis.Axis._translate_tick_kw(kw,to_init_kw=True)
matplotlib.axis.Axis._update_axisinfo(self)
matplotlib.axis.Axis._update_label_position(self,renderer)
matplotlib.axis.Axis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.Axis._update_ticks(self,renderer)
matplotlib.axis.Axis.axis_date(self,tz=None)
matplotlib.axis.Axis.cla(self)
matplotlib.axis.Axis.convert_units(self,x)
matplotlib.axis.Axis.draw(self,renderer,*args,**kwargs)
matplotlib.axis.Axis.get_children(self)
matplotlib.axis.Axis.get_data_interval(self)
matplotlib.axis.Axis.get_gridlines(self)
matplotlib.axis.Axis.get_label(self)
matplotlib.axis.Axis.get_label_position(self)
matplotlib.axis.Axis.get_label_text(self)
matplotlib.axis.Axis.get_major_formatter(self)
matplotlib.axis.Axis.get_major_locator(self)
matplotlib.axis.Axis.get_major_ticks(self,numticks=None)
matplotlib.axis.Axis.get_majorticklabels(self)
matplotlib.axis.Axis.get_majorticklines(self)
matplotlib.axis.Axis.get_majorticklocs(self)
matplotlib.axis.Axis.get_minor_formatter(self)
matplotlib.axis.Axis.get_minor_locator(self)
matplotlib.axis.Axis.get_minor_ticks(self,numticks=None)
matplotlib.axis.Axis.get_minorticklabels(self)
matplotlib.axis.Axis.get_minorticklines(self)
matplotlib.axis.Axis.get_minorticklocs(self)
matplotlib.axis.Axis.get_minpos(self)
matplotlib.axis.Axis.get_offset_text(self)
matplotlib.axis.Axis.get_pickradius(self)
matplotlib.axis.Axis.get_scale(self)
matplotlib.axis.Axis.get_smart_bounds(self)
matplotlib.axis.Axis.get_tick_padding(self)
matplotlib.axis.Axis.get_tick_space(self)
matplotlib.axis.Axis.get_ticklabel_extents(self,renderer)
matplotlib.axis.Axis.get_ticklabels(self,minor=False,which=None)
matplotlib.axis.Axis.get_ticklines(self,minor=False)
matplotlib.axis.Axis.get_ticklocs(self,minor=False)
matplotlib.axis.Axis.get_ticks_direction(self,minor=False)
matplotlib.axis.Axis.get_tightbbox(self,renderer)
matplotlib.axis.Axis.get_transform(self)
matplotlib.axis.Axis.get_units(self)
matplotlib.axis.Axis.get_view_interval(self)
matplotlib.axis.Axis.grid(self,b=None,which='major',**kwargs)
matplotlib.axis.Axis.have_units(self)
matplotlib.axis.Axis.iter_ticks(self)
matplotlib.axis.Axis.limit_range_for_scale(self,vmin,vmax)
matplotlib.axis.Axis.pan(self,numsteps)
matplotlib.axis.Axis.reset_ticks(self)
matplotlib.axis.Axis.set_clip_path(self,clippath,transform=None)
matplotlib.axis.Axis.set_data_interval(self)
matplotlib.axis.Axis.set_default_intervals(self)
matplotlib.axis.Axis.set_label_coords(self,x,y,transform=None)
matplotlib.axis.Axis.set_label_position(self,position)
matplotlib.axis.Axis.set_label_text(self,label,fontdict=None,**kwargs)
matplotlib.axis.Axis.set_major_formatter(self,formatter)
matplotlib.axis.Axis.set_major_locator(self,locator)
matplotlib.axis.Axis.set_minor_formatter(self,formatter)
matplotlib.axis.Axis.set_minor_locator(self,locator)
matplotlib.axis.Axis.set_pickradius(self,pickradius)
matplotlib.axis.Axis.set_smart_bounds(self,value)
matplotlib.axis.Axis.set_tick_params(self,which='major',reset=False,**kw)
matplotlib.axis.Axis.set_ticklabels(self,ticklabels,*args,**kwargs)
matplotlib.axis.Axis.set_ticks(self,ticks,minor=False)
matplotlib.axis.Axis.set_units(self,u)
matplotlib.axis.Axis.set_view_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.Axis.unit_data(self)
matplotlib.axis.Axis.unit_data(self,unit_data)
matplotlib.axis.Axis.update_units(self,data)
matplotlib.axis.Axis.zoom(self,direction)
matplotlib.axis.Tick(self,axes,loc,label,size=None,width=None,color=None,tickdir=None,pad=None,labelsize=None,labelcolor=None,zorder=None,gridOn=None,tick1On=True,tick2On=True,label1On=True,label2On=False,major=True,labelrotation=0,grid_color=None,grid_linestyle=None,grid_linewidth=None,grid_alpha=None,**kw)
matplotlib.axis.Tick.__init__(self,axes,loc,label,size=None,width=None,color=None,tickdir=None,pad=None,labelsize=None,labelcolor=None,zorder=None,gridOn=None,tick1On=True,tick2On=True,label1On=True,label2On=False,major=True,labelrotation=0,grid_color=None,grid_linestyle=None,grid_linewidth=None,grid_alpha=None,**kw)
matplotlib.axis.Tick._apply_params(self,**kw)
matplotlib.axis.Tick._get_gridline(self)
matplotlib.axis.Tick._get_text1(self)
matplotlib.axis.Tick._get_text1_transform(self)
matplotlib.axis.Tick._get_text2(self)
matplotlib.axis.Tick._get_text2_transform(self)
matplotlib.axis.Tick._get_tick1line(self)
matplotlib.axis.Tick._get_tick2line(self)
matplotlib.axis.Tick._set_artist_props(self,a)
matplotlib.axis.Tick._set_labelrotation(self,labelrotation)
matplotlib.axis.Tick.apply_tickdir(self,tickdir)
matplotlib.axis.Tick.contains(self,mouseevent)
matplotlib.axis.Tick.draw(self,renderer)
matplotlib.axis.Tick.get_children(self)
matplotlib.axis.Tick.get_loc(self)
matplotlib.axis.Tick.get_pad(self)
matplotlib.axis.Tick.get_pad_pixels(self)
matplotlib.axis.Tick.get_tick_padding(self)
matplotlib.axis.Tick.get_tickdir(self)
matplotlib.axis.Tick.get_view_interval(self)
matplotlib.axis.Tick.set_clip_path(self,clippath,transform=None)
matplotlib.axis.Tick.set_label1(self,s)
matplotlib.axis.Tick.set_label2(self,s)
matplotlib.axis.Tick.set_pad(self,val)
matplotlib.axis.Tick.update_position(self,loc)
matplotlib.axis.Ticker(object)
matplotlib.axis.XAxis(Axis)
matplotlib.axis.XAxis._get_label(self)
matplotlib.axis.XAxis._get_offset_text(self)
matplotlib.axis.XAxis._get_pixel_distance_along_axis(self,where,perturb)
matplotlib.axis.XAxis._get_tick(self,major)
matplotlib.axis.XAxis._get_tick_boxes_siblings(self,renderer)
matplotlib.axis.XAxis._update_label_position(self,renderer)
matplotlib.axis.XAxis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.XAxis.contains(self,mouseevent)
matplotlib.axis.XAxis.get_data_interval(self)
matplotlib.axis.XAxis.get_minpos(self)
matplotlib.axis.XAxis.get_text_heights(self,renderer)
matplotlib.axis.XAxis.get_tick_space(self)
matplotlib.axis.XAxis.get_ticks_position(self)
matplotlib.axis.XAxis.get_view_interval(self)
matplotlib.axis.XAxis.set_data_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.XAxis.set_default_intervals(self)
matplotlib.axis.XAxis.set_label_position(self,position)
matplotlib.axis.XAxis.set_ticks_position(self,position)
matplotlib.axis.XAxis.set_view_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.XAxis.tick_bottom(self)
matplotlib.axis.XAxis.tick_top(self)
matplotlib.axis.XTick(Tick)
matplotlib.axis.XTick._get_gridline(self)
matplotlib.axis.XTick._get_text1(self)
matplotlib.axis.XTick._get_text1_transform(self)
matplotlib.axis.XTick._get_text2(self)
matplotlib.axis.XTick._get_text2_transform(self)
matplotlib.axis.XTick._get_tick1line(self)
matplotlib.axis.XTick._get_tick2line(self)
matplotlib.axis.XTick.apply_tickdir(self,tickdir)
matplotlib.axis.XTick.get_view_interval(self)
matplotlib.axis.XTick.update_position(self,loc)
matplotlib.axis.YAxis(Axis)
matplotlib.axis.YAxis._get_label(self)
matplotlib.axis.YAxis._get_offset_text(self)
matplotlib.axis.YAxis._get_pixel_distance_along_axis(self,where,perturb)
matplotlib.axis.YAxis._get_tick(self,major)
matplotlib.axis.YAxis._get_tick_boxes_siblings(self,renderer)
matplotlib.axis.YAxis._update_label_position(self,renderer)
matplotlib.axis.YAxis._update_offset_text_position(self,bboxes,bboxes2)
matplotlib.axis.YAxis.contains(self,mouseevent)
matplotlib.axis.YAxis.get_data_interval(self)
matplotlib.axis.YAxis.get_minpos(self)
matplotlib.axis.YAxis.get_text_widths(self,renderer)
matplotlib.axis.YAxis.get_tick_space(self)
matplotlib.axis.YAxis.get_ticks_position(self)
matplotlib.axis.YAxis.get_view_interval(self)
matplotlib.axis.YAxis.set_data_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.YAxis.set_default_intervals(self)
matplotlib.axis.YAxis.set_label_position(self,position)
matplotlib.axis.YAxis.set_offset_position(self,position)
matplotlib.axis.YAxis.set_ticks_position(self,position)
matplotlib.axis.YAxis.set_view_interval(self,vmin,vmax,ignore=False)
matplotlib.axis.YAxis.tick_left(self)
matplotlib.axis.YAxis.tick_right(self)
matplotlib.axis.YTick(Tick)
matplotlib.axis.YTick._get_gridline(self)
matplotlib.axis.YTick._get_text1(self)
matplotlib.axis.YTick._get_text1_transform(self)
matplotlib.axis.YTick._get_text2(self)
matplotlib.axis.YTick._get_text2_transform(self)
matplotlib.axis.YTick._get_tick1line(self)
matplotlib.axis.YTick._get_tick2line(self)
matplotlib.axis.YTick.apply_tickdir(self,tickdir)
matplotlib.axis.YTick.get_view_interval(self)
matplotlib.axis.YTick.update_position(self,loc)
matplotlib.axis._LazyTickList(self,major)
matplotlib.axis._LazyTickList.__get__(self,instance,cls)
matplotlib.axis._LazyTickList.__init__(self,major)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/units.py----------------------------------------
A:matplotlib.units.classx->getattr(x, '__class__', None)
A:matplotlib.units.converter->self.get_converter(thisx)
A:matplotlib.units.xravel->x.ravel()
A:matplotlib.units.thisx->safe_first_element(x)
A:matplotlib.units.registry->Registry()
matplotlib.units.AxisInfo(self,majloc=None,minloc=None,majfmt=None,minfmt=None,label=None,default_limits=None)
matplotlib.units.AxisInfo.__init__(self,majloc=None,minloc=None,majfmt=None,minfmt=None,label=None,default_limits=None)
matplotlib.units.ConversionInterface(object)
matplotlib.units.ConversionInterface.axisinfo(unit,axis)
matplotlib.units.ConversionInterface.convert(obj,unit,axis)
matplotlib.units.ConversionInterface.default_units(x,axis)
matplotlib.units.ConversionInterface.is_numlike(x)
matplotlib.units.Registry(self)
matplotlib.units.Registry.__init__(self)
matplotlib.units.Registry.get_converter(self,x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/colors.py----------------------------------------
A:matplotlib.colors._colors_full_map->_ColorMapping(_colors_full_map)
A:matplotlib.colors.ret->int(ret[0])
A:matplotlib.colors.colors->self(np.linspace(0, 1, lutsize))
A:matplotlib.colors.rgba->ColorConverter().to_rgba_array(self.colors)
A:matplotlib.colors.match->re.match('\\A#[a-fA-F0-9]{8}\\Z', c)
A:matplotlib.colors.c->to_rgba(c)
A:matplotlib.colors.result->numpy.ma.array(resdat, mask=result.mask, copy=False)
A:matplotlib.colors.result[i]->to_rgba(cc, alpha)
A:matplotlib.colors.hexColorPattern->re.compile('\\A#[a-fA-F0-9]{6}\\Z')
A:matplotlib.colors.colorConverter->ColorConverter()
A:matplotlib.colors.lut->self._lut.copy()
A:matplotlib.colors.adata->numpy.array(data)
A:matplotlib.colors.self.N->len(self.boundaries)
A:matplotlib.colors.xa->xa.astype(int).astype(int)
A:matplotlib.colors.xma->numpy.ma.array(X, copy=True)
A:matplotlib.colors.alpha->int(alpha * 255)
A:matplotlib.colors.cmapobject->cls.__new__(cls)
A:matplotlib.colors.cmapobject._lut->numpy.copy(self._lut)
A:matplotlib.colors.self._rgba_bad->ColorConverter().to_rgba(color, alpha)
A:matplotlib.colors.self._rgba_under->ColorConverter().to_rgba(color, alpha)
A:matplotlib.colors.self._rgba_over->ColorConverter().to_rgba(color, alpha)
A:matplotlib.colors.self._lut->numpy.zeros((self.N + 3, 4), float)
A:matplotlib.colors.self._lut[:-3, 0]->makeMappingArray(self.N, self._segmentdata['red'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 1]->makeMappingArray(self.N, self._segmentdata['green'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 2]->makeMappingArray(self.N, self._segmentdata['blue'], self._gamma)
A:matplotlib.colors.self._lut[:-3, 3]->makeMappingArray(self.N, self._segmentdata['alpha'], 1)
A:matplotlib.colors.(vals, colors)->zip(*colors)
A:matplotlib.colors.vals->numpy.linspace(0, 1, len(colors))
A:matplotlib.colors.cdict->dict(red=[], green=[], blue=[], alpha=[])
A:matplotlib.colors.(r, g, b, a)->ColorConverter().to_rgba(color)
A:matplotlib.colors.data_r->dict()
A:matplotlib.colors.data_r[key]->factory(data)
A:matplotlib.colors.N->len(colors)
A:matplotlib.colors.self.colors->list(itertools.islice(itertools.cycle(colors), N))
A:matplotlib.colors.gray->float(colors)
A:matplotlib.colors.colors_r->list(reversed(self.colors))
A:matplotlib.colors.self.vmin->numpy.asanyarray(A).min()
A:matplotlib.colors.self.vmax->numpy.asanyarray(A).max()
A:matplotlib.colors.dtype->numpy.promote_types(dtype, np.float32)
A:matplotlib.colors.mask->numpy.ma.getmaskarray(xx)
A:matplotlib.colors.data->numpy.asarray(np.ma.getdata(value))
A:matplotlib.colors.(result, is_scalar)->self.process_value(value)
A:matplotlib.colors.((vmin,), _)->self.process_value(self.vmin)
A:matplotlib.colors.((vmax,), _)->self.process_value(self.vmax)
A:matplotlib.colors.val->numpy.ma.asarray(value)
A:matplotlib.colors.A->numpy.asanyarray(A)
A:matplotlib.colors.self.linthresh->float(linthresh)
A:matplotlib.colors.resdat->self._transform(result.data)
A:matplotlib.colors.sign->numpy.sign(a[masked])
A:matplotlib.colors.exp->numpy.exp(sign * a[masked] / self.linthresh - self._linscale_adj)
A:matplotlib.colors.arr->arr.astype(np.promote_types(arr.dtype, np.float32)).astype(np.promote_types(arr.dtype, np.float32))
A:matplotlib.colors.(self._upper, self._lower)->self._transform(arr)
A:matplotlib.colors.self.boundaries->numpy.asarray(boundaries)
A:matplotlib.colors.(xx, is_scalar)->self.process_value(value)
A:matplotlib.colors.xx->numpy.atleast_1d(xx.filled(self.vmax + 1))
A:matplotlib.colors.iret->(iret * scalefac).astype(np.int16)
A:matplotlib.colors.out->numpy.zeros_like(arr)
A:matplotlib.colors.arr_max->arr.astype(np.promote_types(arr.dtype, np.float32)).astype(np.promote_types(arr.dtype, np.float32)).max(-1)
A:matplotlib.colors.delta->arr.astype(np.promote_types(arr.dtype, np.float32)).astype(np.promote_types(arr.dtype, np.float32)).ptp(-1)
A:matplotlib.colors.s->numpy.zeros_like(delta)
A:matplotlib.colors.hsv->rgb_to_hsv(rgb[:, :, 0:3])
A:matplotlib.colors.r->numpy.empty_like(h)
A:matplotlib.colors.g->numpy.empty_like(h)
A:matplotlib.colors.b->numpy.empty_like(h)
A:matplotlib.colors.i->(h * 6.0).astype(int)
A:matplotlib.colors.rgb->numpy.concatenate([r[..., None], g[..., None], b[..., None]], -1)
A:matplotlib.colors.az->numpy.radians(90 - self.azdeg)
A:matplotlib.colors.alt->numpy.radians(self.altdeg)
A:matplotlib.colors.(e_dy, e_dx)->numpy.gradient(vert_exag * elevation, dy, dx)
A:matplotlib.colors.normal->numpy.empty(elevation.shape + (3,)).view(type(elevation))
A:matplotlib.colors.intensity->self.hillshade(elevation, vert_exag, dx, dy, fraction)
A:matplotlib.colors.vmin->numpy.asarray(np.ma.getdata(value)).min()
A:matplotlib.colors.vmax->numpy.asarray(np.ma.getdata(value)).max()
A:matplotlib.colors.norm->BoundaryNorm(levels, ncolors=n_data_colors)
A:matplotlib.colors.rgb0->cmap(norm(data))
A:matplotlib.colors.rgb1->self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode, vert_exag=vert_exag, dx=dx, dy=dy, fraction=fraction, **kwargs)
A:matplotlib.colors.blend->blend_mode(rgb, intensity, **kwargs)
A:matplotlib.colors.hsv[:, :, 1]->numpy.where(np.logical_and(np.abs(hsv[:, :, 1]) > 1e-10, intensity < 0), (1.0 + intensity) * hsv[:, :, 1] - intensity * hsv_min_sat, hsv[:, :, 1])
A:matplotlib.colors.hsv[:, :, 2]->numpy.where(intensity < 0, (1.0 + intensity) * hsv[:, :, 2] - intensity * hsv_min_val, hsv[:, :, 2])
A:matplotlib.colors.hsv[:, :, 1:]->numpy.where(hsv[:, :, 1:] > 1.0, 1, hsv[:, :, 1:])
A:matplotlib.colors.cmap->ListedColormap(colors[colors_i0:colors_i1], N=n_data_colors)
matplotlib.colors.BoundaryNorm(self,boundaries,ncolors,clip=False)
matplotlib.colors.BoundaryNorm.__init__(self,boundaries,ncolors,clip=False)
matplotlib.colors.BoundaryNorm.inverse(self,value)
matplotlib.colors.ColorConverter(object)
matplotlib.colors.ColorConverter.to_rgb(arg)
matplotlib.colors.ColorConverter.to_rgba(arg,alpha=None)
matplotlib.colors.ColorConverter.to_rgba_array(arg,alpha=None)
matplotlib.colors.Colormap(self,name,N=256)
matplotlib.colors.Colormap.__copy__(self)
matplotlib.colors.Colormap.__init__(self,name,N=256)
matplotlib.colors.Colormap._init(self)
matplotlib.colors.Colormap._resample(self,lutsize)
matplotlib.colors.Colormap._set_extremes(self)
matplotlib.colors.Colormap.is_gray(self)
matplotlib.colors.Colormap.reversed(self,name=None)
matplotlib.colors.Colormap.set_bad(self,color='k',alpha=None)
matplotlib.colors.Colormap.set_over(self,color='k',alpha=None)
matplotlib.colors.Colormap.set_under(self,color='k',alpha=None)
matplotlib.colors.LightSource(self,azdeg=315,altdeg=45,hsv_min_val=0,hsv_max_val=1,hsv_min_sat=1,hsv_max_sat=0)
matplotlib.colors.LightSource.__init__(self,azdeg=315,altdeg=45,hsv_min_val=0,hsv_max_val=1,hsv_min_sat=1,hsv_max_sat=0)
matplotlib.colors.LightSource.blend_hsv(self,rgb,intensity,hsv_max_sat=None,hsv_max_val=None,hsv_min_val=None,hsv_min_sat=None)
matplotlib.colors.LightSource.blend_overlay(self,rgb,intensity)
matplotlib.colors.LightSource.blend_soft_light(self,rgb,intensity)
matplotlib.colors.LightSource.direction(self)
matplotlib.colors.LightSource.hillshade(self,elevation,vert_exag=1,dx=1,dy=1,fraction=1.0)
matplotlib.colors.LightSource.shade(self,data,cmap,norm=None,blend_mode='overlay',vmin=None,vmax=None,vert_exag=1,dx=1,dy=1,fraction=1,**kwargs)
matplotlib.colors.LightSource.shade_normals(self,normals,fraction=1.0)
matplotlib.colors.LightSource.shade_rgb(self,rgb,elevation,fraction=1.0,blend_mode='hsv',vert_exag=1,dx=1,dy=1,**kwargs)
matplotlib.colors.LinearSegmentedColormap(self,name,segmentdata,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap.__init__(self,name,segmentdata,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap._init(self)
matplotlib.colors.LinearSegmentedColormap._resample(self,lutsize)
matplotlib.colors.LinearSegmentedColormap.from_list(name,colors,N=256,gamma=1.0)
matplotlib.colors.LinearSegmentedColormap.reversed(self,name=None)
matplotlib.colors.LinearSegmentedColormap.set_gamma(self,gamma)
matplotlib.colors.ListedColormap(self,colors,name='from_list',N=None)
matplotlib.colors.ListedColormap.__init__(self,colors,name='from_list',N=None)
matplotlib.colors.ListedColormap._init(self)
matplotlib.colors.ListedColormap._resample(self,lutsize)
matplotlib.colors.ListedColormap.reversed(self,name=None)
matplotlib.colors.LogNorm(self,value,clip=None)
matplotlib.colors.LogNorm.__call__(self,value,clip=None)
matplotlib.colors.LogNorm.autoscale(self,A)
matplotlib.colors.LogNorm.autoscale_None(self,A)
matplotlib.colors.LogNorm.inverse(self,value)
matplotlib.colors.NoNorm(self,value,clip=None)
matplotlib.colors.NoNorm.__call__(self,value,clip=None)
matplotlib.colors.NoNorm.inverse(self,value)
matplotlib.colors.Normalize(self,vmin=None,vmax=None,clip=False)
matplotlib.colors.Normalize.__init__(self,vmin=None,vmax=None,clip=False)
matplotlib.colors.Normalize.autoscale(self,A)
matplotlib.colors.Normalize.autoscale_None(self,A)
matplotlib.colors.Normalize.inverse(self,value)
matplotlib.colors.Normalize.process_value(value)
matplotlib.colors.Normalize.scaled(self)
matplotlib.colors.PowerNorm(self,gamma,vmin=None,vmax=None,clip=False)
matplotlib.colors.PowerNorm.__init__(self,gamma,vmin=None,vmax=None,clip=False)
matplotlib.colors.PowerNorm.autoscale(self,A)
matplotlib.colors.PowerNorm.autoscale_None(self,A)
matplotlib.colors.PowerNorm.inverse(self,value)
matplotlib.colors.SymLogNorm(self,linthresh,linscale=1.0,vmin=None,vmax=None,clip=False)
matplotlib.colors.SymLogNorm.__init__(self,linthresh,linscale=1.0,vmin=None,vmax=None,clip=False)
matplotlib.colors.SymLogNorm._inv_transform(self,a)
matplotlib.colors.SymLogNorm._transform(self,a)
matplotlib.colors.SymLogNorm._transform_vmin_vmax(self)
matplotlib.colors.SymLogNorm.autoscale(self,A)
matplotlib.colors.SymLogNorm.autoscale_None(self,A)
matplotlib.colors.SymLogNorm.inverse(self,value)
matplotlib.colors._ColorMapping(self,mapping)
matplotlib.colors._ColorMapping.__delitem__(self,key)
matplotlib.colors._ColorMapping.__init__(self,mapping)
matplotlib.colors._ColorMapping.__setitem__(self,key,value)
matplotlib.colors._is_nth_color(c)
matplotlib.colors._sanitize_extrema(ex)
matplotlib.colors._to_rgba_no_colorcycle(c,alpha=None)
matplotlib.colors._vector_dot(a,b)
matplotlib.colors._vector_magnitude(arr)
matplotlib.colors.from_levels_and_colors(levels,colors,extend='neither')
matplotlib.colors.get_named_colors_mapping()
matplotlib.colors.hsv_to_rgb(hsv)
matplotlib.colors.is_color_like(c)
matplotlib.colors.makeMappingArray(N,data,gamma=1.0)
matplotlib.colors.rgb_to_hsv(arr)
matplotlib.colors.same_color(c1,c2)
matplotlib.colors.to_hex(c,keep_alpha=False)
matplotlib.colors.to_rgb(c)
matplotlib.colors.to_rgba(c,alpha=None)
matplotlib.colors.to_rgba_array(c,alpha=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/mlab.py----------------------------------------
A:matplotlib.mlab.x->numpy.asarray(x)
A:matplotlib.mlab.xshape->list(x.shape)
A:matplotlib.mlab.xshapetarg->list(x.shape).pop(axis)
A:matplotlib.mlab.windowVals->window(np.ones(NFFT, X.dtype))
A:matplotlib.mlab.xshapeother->list(x.shape).pop()
A:matplotlib.mlab.windowValsRep->stride_repeat(windowVals, xshapeother, axis=otheraxis)
A:matplotlib.mlab.y->numpy.concatenate((yupper, ylower[::-1]))
A:matplotlib.mlab.C->numpy.cov(x, y, bias=1)
A:matplotlib.mlab.noverlap->int(noverlap)
A:matplotlib.mlab.n->numpy.take(n, np.nonzero(n)[0])
A:matplotlib.mlab.result->numpy.zeros((num_m,), dtype=float)
A:matplotlib.mlab.(result, windowVals)->apply_window(result, window, axis=0, return_window=True)
A:matplotlib.mlab.resultY->apply_window(resultY, window, axis=0)
A:matplotlib.mlab.slc->slice(1, None, None)
A:matplotlib.mlab.freqs->numpy.concatenate((freqs[freqcenter:], freqs[:freqcenter]))
A:matplotlib.mlab.pad_to->len(x)
A:matplotlib.mlab.(spec, freqs, _)->_spectral_helper(x=x, y=None, NFFT=len(x), Fs=Fs, detrend_func=detrend_none, window=window, noverlap=0, pad_to=pad_to, sides=sides, scale_by_freq=False, mode=mode)
A:matplotlib.mlab.(Pxx, freqs)->csd(x=x, y=None, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.mlab.(Pxy, freqs, _)->_spectral_helper(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend_func=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode='psd')
A:matplotlib.mlab.Pxy->numpy.mean(Pxy, axis=0)
A:matplotlib.mlab.(spec, freqs, t)->_spectral_helper(x=x, y=None, NFFT=NFFT, Fs=Fs, detrend_func=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode=mode)
A:matplotlib.mlab.(Pxx, f)->psd(x, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.(Pyy, f)->psd(y, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.(Pxy, f)->csd(x, y, NFFT, Fs, detrend, window, noverlap, pad_to, sides, scale_by_freq)
A:matplotlib.mlab.X->distances_along_curve(X)
A:matplotlib.mlab.allColumns->set()
A:matplotlib.mlab.Ncols->len(allColumns)
A:matplotlib.mlab.ind->numpy.arange(up[i], dn[i])
A:matplotlib.mlab.numSlices->len(ind)
A:matplotlib.mlab.slices->range(numSlices)
A:matplotlib.mlab.Slices->numpy.zeros((numSlices, numFreqs), dtype=np.complex_)
A:matplotlib.mlab.FFTConjSlices[iCol]->numpy.conj(Slices)
A:matplotlib.mlab.Pxx[iCol]->numpy.divide(np.mean(abs(Slices) ** 2, axis=0), normVal)
A:matplotlib.mlab.N->len(ij)
A:matplotlib.mlab.Phase[i, j]->numpy.arctan2(Pxy.imag, Pxy.real)
A:matplotlib.mlab.(n, bins)->numpy.histogram(y, bins)
A:matplotlib.mlab.p->numpy.asarray(p, float)
A:matplotlib.mlab.(res,)->numpy.nonzero(np.ravel(condition))
A:matplotlib.mlab.dif->numpy.diff(y)
A:matplotlib.mlab.self.mu->self.center(a).mean(axis=0)
A:matplotlib.mlab.self.sigma->self.center(a).std(axis=0)
A:matplotlib.mlab.a->self.center(a)
A:matplotlib.mlab.(U, s, Vh)->numpy.linalg.svd(a, full_matrices=False)
A:matplotlib.mlab.c0->numpy.array([0.19294738, 0.6202667, 0.45962655, 0.07608613, 0.135818, 0.83580842, 0.07218851, 0.48318321, 0.84472463, 0.18348462, 0.81585306, 0.96923926, 0.12835919, 0.35075355, 0.15807861, 0.837437, 0.10824303, 0.1723387, 0.43926494, 0.83705486])
A:matplotlib.mlab.c1->numpy.dot(w, v)
A:matplotlib.mlab.per->numpy.array(p)
A:matplotlib.mlab.values->numpy.sort(x, axis=None)
A:matplotlib.mlab.ai->idxs.astype(int)
A:matplotlib.mlab.ptiles->prctile(x, p)
A:matplotlib.mlab.M->numpy.asarray(M, float)
A:matplotlib.mlab.Ny->len(ys)
A:matplotlib.mlab.yout->numpy.zeros((len(t), Ny), float)
A:matplotlib.mlab.k1->numpy.asarray(derivs(y0, thist))
A:matplotlib.mlab.k2->numpy.asarray(derivs(y0 + dt2 * k1, thist + dt2))
A:matplotlib.mlab.k3->numpy.asarray(derivs(y0 + dt2 * k2, thist + dt2))
A:matplotlib.mlab.k4->numpy.asarray(derivs(y0 + dt * k3, thist + dt))
A:matplotlib.mlab.(X, Y)->numpy.indices(Z.shape)
A:matplotlib.mlab.data[x, y]->numpy.random.rand()
A:matplotlib.mlab.s0->numpy.asarray(s0, float)
A:matplotlib.mlab.s1->numpy.asarray(s1, float)
A:matplotlib.mlab.c2->numpy.dot(v, v)
A:matplotlib.mlab.z->numpy.require(z, requirements=['C'])
A:matplotlib.mlab.w->numpy.empty((n,), dtype=float)
A:matplotlib.mlab.exp_safe_MIN->math.log(2.2250738585072014e-308)
A:matplotlib.mlab.iden->numpy.zeros((n,) * rank, dtype)
A:matplotlib.mlab.max_exponent->int(math.log(number) / math.log(base))
A:matplotlib.mlab.lead_digit->int(number / max_power)
A:matplotlib.mlab.shifts->map(operator.rshift, max_length * [number], range(max_length - 1, -1, -1))
A:matplotlib.mlab.digits->list(map(operator.mod, shifts, max_length * [2]))
A:matplotlib.mlab.b->numpy.isinf(x)
A:matplotlib.mlab.arrs->list(map(np.asarray, arrs))
A:matplotlib.mlab.newdtype->numpy.dtype(all_dtypes)
A:matplotlib.mlab.newrec->numpy.recarray((common_len + left_len + right_len,), dtype=newdtype)
A:matplotlib.mlab.names->','.join([key] + ['%s%s' % (name, postfix) for postfix in postfixes])
A:matplotlib.mlab.key->tuple([row[attr] for attr in groupby])
A:matplotlib.mlab.row->next(reader)
A:matplotlib.mlab.(attrs, funcs, outnames)->list(zip(*stats))
A:matplotlib.mlab.r1keys->set(r1d)
A:matplotlib.mlab.r2keys->set(r2d)
A:matplotlib.mlab.r1ind->numpy.array([r1d[k] for k in common_keys])
A:matplotlib.mlab.r2ind->numpy.array([r2d[k] for k in common_keys])
A:matplotlib.mlab.common_len->len(common_keys)
A:matplotlib.mlab.left_keys->set(r1d).difference(r2keys)
A:matplotlib.mlab.left_ind->numpy.array([r1d[k] for k in left_keys])
A:matplotlib.mlab.left_len->len(left_ind)
A:matplotlib.mlab.right_keys->set(r2d).difference(r1keys)
A:matplotlib.mlab.right_ind->numpy.array([r2d[k] for k in right_keys])
A:matplotlib.mlab.right_len->len(right_ind)
A:matplotlib.mlab.newrec_fields->list(newrec.dtype.fields)
A:matplotlib.mlab.newfield->mapped_r2field(field)
A:matplotlib.mlab.aligned_iters->matplotlib.cbook.align_iterators(operator.attrgetter(key), *[iter(r) for r in recs])
A:matplotlib.mlab.converterd->dict()
A:matplotlib.mlab.fh->FH(fh)
A:matplotlib.mlab.delimiter->str(delimiter)
A:matplotlib.mlab.reader->csv.reader(fh, delimiter=delimiter)
A:matplotlib.mlab.d->dateparser(x, dayfirst=dayfirst, yearfirst=yearfirst)
A:matplotlib.mlab.mydateparser->with_default_value(mydateparser, datetime.datetime(1, 1, 1))
A:matplotlib.mlab.myfloat->with_default_value(float, np.nan)
A:matplotlib.mlab.myint->with_default_value(int, -1)
A:matplotlib.mlab.mystr->with_default_value(str, '')
A:matplotlib.mlab.mybool->with_default_value(mybool, None)
A:matplotlib.mlab.mydate->with_default_value(mydate, datetime.date(1, 1, 1))
A:matplotlib.mlab.func->with_default_value(func, None)
A:matplotlib.mlab.delete->set("~!@#$%^&*()-=+~\\|}[]{';: /?.>,<")
A:matplotlib.mlab.seen->dict()
A:matplotlib.mlab.item->itemd.get(item, item)
A:matplotlib.mlab.cnt->dict().get(item, 0)
A:matplotlib.mlab.converters->get_converters(reader, comments)
A:matplotlib.mlab.r->rec_keep_fields(r, fields)
A:matplotlib.mlab.val->repr(x)
A:matplotlib.mlab.formatd->get_formatd(r, formatd)
A:matplotlib.mlab.format->copy.deepcopy(format)
A:matplotlib.mlab.fixed_width->int(ntype.str[2:])
A:matplotlib.mlab.length->max(len(colname), np.max(list(map(len, list(map(lambda x: fmt % x, column))))))
A:matplotlib.mlab.textl[0]->textl[0].rstrip().rstrip()
A:matplotlib.mlab.text->os.linesep.join(textl)
A:matplotlib.mlab.missingd->dict()
A:matplotlib.mlab.(fh, opened)->matplotlib.cbook.to_filehandle(fname, 'wb', return_opened=True)
A:matplotlib.mlab.writer->csv.writer(fh, delimiter=delimiter)
A:matplotlib.mlab.ismasked->hasattr(row, '_fieldmask')
A:matplotlib.mlab.xi->numpy.asarray(xi, float)
A:matplotlib.mlab.yi->numpy.zeros(xi.shape, float)
A:matplotlib.mlab.(xi, yi)->numpy.meshgrid(xi, yi)
A:matplotlib.mlab.mask->numpy.ma.getmask(z)
A:matplotlib.mlab.zi->numpy.ma.masked_where(np.isnan(zi), zi)
A:matplotlib.mlab.triang->Triangulation(x, y)
A:matplotlib.mlab.interpolator->LinearTriInterpolator(triang, z)
A:matplotlib.mlab.s->list(y.shape)
A:matplotlib.mlab.s[0]->len(xi)
A:matplotlib.mlab.(jj,)->numpy.nonzero(x < xx)
A:matplotlib.mlab.jj->max(jj)
A:matplotlib.mlab.yp->numpy.asarray(yp, float)
A:matplotlib.mlab.idx->numpy.searchsorted(x[1:-1], xi)
A:matplotlib.mlab.sidx->list(y.shape).take(idx)
A:matplotlib.mlab.xidx->numpy.asarray(x).take(idx)
A:matplotlib.mlab.yidx->numpy.concatenate((yupper, ylower[::-1])).take(idx)
A:matplotlib.mlab.xidxp1->numpy.asarray(x).take(idx + 1)
A:matplotlib.mlab.self.dataset->numpy.atleast_2d(dataset)
A:matplotlib.mlab.isString->isinstance(bw_method, six.string_types)
A:matplotlib.mlab.self.factor->self.covariance_factor()
A:matplotlib.mlab.self.data_covariance->numpy.atleast_2d(np.cov(self.dataset, rowvar=1, bias=False))
A:matplotlib.mlab.self.data_inv_cov->numpy.linalg.inv(self.data_covariance)
A:matplotlib.mlab.points->numpy.atleast_2d(points)
A:matplotlib.mlab.tdiff->numpy.dot(self.inv_cov, diff)
A:matplotlib.mlab.result[i]->numpy.sum(np.exp(-energy), axis=0)
A:matplotlib.mlab.poly->Path(verts)
A:matplotlib.mlab.xs->numpy.asarray(xs)
A:matplotlib.mlab.ys->numpy.asarray(ys)
A:matplotlib.mlab.Nx->len(x)
matplotlib.mlab.FormatBool(FormatObj)
matplotlib.mlab.FormatBool.fromstr(self,s)
matplotlib.mlab.FormatBool.toval(self,x)
matplotlib.mlab.FormatDate(self,fmt)
matplotlib.mlab.FormatDate.__hash__(self)
matplotlib.mlab.FormatDate.__init__(self,fmt)
matplotlib.mlab.FormatDate.fromstr(self,x)
matplotlib.mlab.FormatDate.toval(self,x)
matplotlib.mlab.FormatDatetime(self,fmt='%Y-%m-%d%H:%M:%S')
matplotlib.mlab.FormatDatetime.__init__(self,fmt='%Y-%m-%d%H:%M:%S')
matplotlib.mlab.FormatDatetime.fromstr(self,x)
matplotlib.mlab.FormatFloat(self,precision=4,scale=1.0)
matplotlib.mlab.FormatFloat.__hash__(self)
matplotlib.mlab.FormatFloat.__init__(self,precision=4,scale=1.0)
matplotlib.mlab.FormatFloat.fromstr(self,s)
matplotlib.mlab.FormatFloat.toval(self,x)
matplotlib.mlab.FormatFormatStr(self,fmt)
matplotlib.mlab.FormatFormatStr.__init__(self,fmt)
matplotlib.mlab.FormatFormatStr.tostr(self,x)
matplotlib.mlab.FormatInt(FormatObj)
matplotlib.mlab.FormatInt.fromstr(self,s)
matplotlib.mlab.FormatInt.tostr(self,x)
matplotlib.mlab.FormatInt.toval(self,x)
matplotlib.mlab.FormatMillions(self,precision=4)
matplotlib.mlab.FormatMillions.__init__(self,precision=4)
matplotlib.mlab.FormatObj(object)
matplotlib.mlab.FormatObj.__hash__(self)
matplotlib.mlab.FormatObj.fromstr(self,s)
matplotlib.mlab.FormatObj.tostr(self,x)
matplotlib.mlab.FormatObj.toval(self,x)
matplotlib.mlab.FormatPercent(self,precision=4)
matplotlib.mlab.FormatPercent.__init__(self,precision=4)
matplotlib.mlab.FormatString(FormatObj)
matplotlib.mlab.FormatString.tostr(self,x)
matplotlib.mlab.FormatThousands(self,precision=4)
matplotlib.mlab.FormatThousands.__init__(self,precision=4)
matplotlib.mlab.GaussianKDE(self,dataset,bw_method=None)
matplotlib.mlab.GaussianKDE.__init__(self,dataset,bw_method=None)
matplotlib.mlab.GaussianKDE.evaluate(self,points)
matplotlib.mlab.GaussianKDE.scotts_factor(self)
matplotlib.mlab.GaussianKDE.silverman_factor(self)
matplotlib.mlab.PCA(self,a,standardize=True)
matplotlib.mlab.PCA.__init__(self,a,standardize=True)
matplotlib.mlab.PCA._get_colinear()
matplotlib.mlab.PCA.center(self,x)
matplotlib.mlab.PCA.project(self,x,minfrac=0.0)
matplotlib.mlab._single_spectrum_helper(x,mode,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab._spectral_helper(x,y=None,NFFT=None,Fs=None,detrend_func=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,mode=None)
matplotlib.mlab.amap(fn,*args)
matplotlib.mlab.angle_spectrum(x,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab.apply_window(x,window,axis=0,return_window=None)
matplotlib.mlab.base_repr(number,base=2,padding=0)
matplotlib.mlab.binary_repr(number,max_length=1025)
matplotlib.mlab.bivariate_normal(X,Y,sigmax=1.0,sigmay=1.0,mux=0.0,muy=0.0,sigmaxy=0.0)
matplotlib.mlab.center_matrix(M,dim=0)
matplotlib.mlab.cohere(x,y,NFFT=256,Fs=2,detrend=detrend_none,window=window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None)
matplotlib.mlab.cohere_pairs(X,ij,NFFT=256,Fs=2,detrend=detrend_none,window=window_hanning,noverlap=0,preferSpeedOverMemory=True,progressCallback=donothing_callback,returnPxx=False)
matplotlib.mlab.complex_spectrum(x,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab.contiguous_regions(mask)
matplotlib.mlab.cross_from_above(x,threshold)
matplotlib.mlab.cross_from_below(x,threshold)
matplotlib.mlab.csd(x,y,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None)
matplotlib.mlab.csv2rec(fname,comments='#',skiprows=0,checkrows=0,delimiter=',',converterd=None,names=None,missing='',missingd=None,use_mrecords=False,dayfirst=False,yearfirst=False)
matplotlib.mlab.csvformat_factory(format)
matplotlib.mlab.demean(x,axis=0)
matplotlib.mlab.detrend(x,key=None,axis=None)
matplotlib.mlab.detrend_linear(y)
matplotlib.mlab.detrend_mean(x,axis=None)
matplotlib.mlab.detrend_none(x,axis=None)
matplotlib.mlab.dist(x,y)
matplotlib.mlab.dist_point_to_segment(p,s0,s1)
matplotlib.mlab.distances_along_curve(X)
matplotlib.mlab.donothing_callback(*args)
matplotlib.mlab.entropy(y,bins)
matplotlib.mlab.exp_safe(x)
matplotlib.mlab.fftsurr(x,detrend=detrend_none,window=window_none)
matplotlib.mlab.find(condition)
matplotlib.mlab.frange(xini,xfin=None,delta=None,**kw)
matplotlib.mlab.get_formatd(r,formatd=None)
matplotlib.mlab.get_sparse_matrix(M,N,frac=0.1)
matplotlib.mlab.get_xyz_where(Z,Cond)
matplotlib.mlab.griddata(x,y,z,xi,yi,interp='nn')
matplotlib.mlab.identity(n,rank=2,dtype='l',typecode=None)
matplotlib.mlab.inside_poly(points,verts)
matplotlib.mlab.is_closed_polygon(X)
matplotlib.mlab.ispower2(n)
matplotlib.mlab.isvector(X)
matplotlib.mlab.l1norm(a)
matplotlib.mlab.l2norm(a)
matplotlib.mlab.less_simple_linear_interpolation(x,y,xi,extrap=False)
matplotlib.mlab.log2(x,ln2=math.log(2.0))
matplotlib.mlab.logspace(xmin,xmax,N)
matplotlib.mlab.longest_contiguous_ones(x)
matplotlib.mlab.longest_ones(x)
matplotlib.mlab.magnitude_spectrum(x,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab.movavg(x,n)
matplotlib.mlab.norm_flat(a,p=2)
matplotlib.mlab.normpdf(x,*args)
matplotlib.mlab.offset_line(y,yerr)
matplotlib.mlab.path_length(X)
matplotlib.mlab.phase_spectrum(x,Fs=None,window=None,pad_to=None,sides=None)
matplotlib.mlab.poly_below(xmin,xs,ys)
matplotlib.mlab.poly_between(x,ylower,yupper)
matplotlib.mlab.prctile(x,p=(0.0,25.0,50.0,75.0,100.0))
matplotlib.mlab.prctile_rank(x,p)
matplotlib.mlab.psd(x,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None)
matplotlib.mlab.quad2cubic(q0x,q0y,q1x,q1y,q2x,q2y)
matplotlib.mlab.rec2csv(r,fname,delimiter=',',formatd=None,missing='',missingd=None,withheader=True)
matplotlib.mlab.rec2txt(r,header=None,padding=3,precision=3,fields=None)
matplotlib.mlab.rec_append_fields(rec,names,arrs,dtypes=None)
matplotlib.mlab.rec_drop_fields(rec,names)
matplotlib.mlab.rec_groupby(r,groupby,stats)
matplotlib.mlab.rec_join(key,r1,r2,jointype='inner',defaults=None,r1postfix='1',r2postfix='2')
matplotlib.mlab.rec_keep_fields(rec,names)
matplotlib.mlab.rec_summarize(r,summaryfuncs)
matplotlib.mlab.recs_join(key,name,recs,jointype='outer',missing=0.0,postfixes=None)
matplotlib.mlab.rk4(derivs,y0,t)
matplotlib.mlab.rms_flat(a)
matplotlib.mlab.safe_isinf(x)
matplotlib.mlab.safe_isnan(x)
matplotlib.mlab.segments_intersect(s1,s2)
matplotlib.mlab.slopes(x,y)
matplotlib.mlab.specgram(x,NFFT=None,Fs=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,mode=None)
matplotlib.mlab.stineman_interp(xi,x,y,yp=None)
matplotlib.mlab.stride_repeat(x,n,axis=0)
matplotlib.mlab.stride_windows(x,n,noverlap=None,axis=0)
matplotlib.mlab.vector_lengths(X,P=2.0,axis=None)
matplotlib.mlab.window_hanning(x)
matplotlib.mlab.window_none(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/pyplot.py----------------------------------------
A:matplotlib.pyplot.is_agg_backend->rcParams['backend'].endswith('Agg')
A:matplotlib.pyplot.(_backend_mod, new_figure_manager, draw_if_interactive, _show)->pylab_setup()
A:matplotlib.pyplot.ip->get_ipython()
A:matplotlib.pyplot.ipython_gui_name->IPython.core.pylabtools.backend2gui.get(get_backend())
A:matplotlib.pyplot.o->gcf()
A:matplotlib.pyplot.manager->get_current_fig_manager()
A:matplotlib.pyplot.xkcd_ctx->rc_context({'font.family': ['xkcd', 'Humor Sans', 'Comic Sans MS'], 'font.size': 14.0, 'path.sketch': (scale, length, randomness), 'path.effects': [patheffects.withStroke(linewidth=4, foreground='w')], 'axes.linewidth': 1.5, 'lines.linewidth': 2.0, 'figure.facecolor': 'white', 'grid.linewidth': 0.0, 'axes.grid': False, 'axes.unicode_minus': False, 'axes.edgecolor': 'black', 'xtick.major.size': 8, 'xtick.major.width': 3, 'ytick.major.size': 8, 'ytick.major.width': 3})
A:matplotlib.pyplot.allnums->get_fignums()
A:matplotlib.pyplot.allLabels->get_figlabels()
A:matplotlib.pyplot.inum->get_figlabels().index(figLabel)
A:matplotlib.pyplot.num->int(num)
A:matplotlib.pyplot.figManager->matplotlib._pylab_helpers.Gcf.get_active()
A:matplotlib.pyplot.cid->matplotlib._pylab_helpers.Gcf.get_active().canvas.mpl_connect('button_press_event', make_active)
A:matplotlib.pyplot.figManagers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.pyplot.fig->gcf()
A:matplotlib.pyplot.res->gcf().savefig(*args, **kwargs)
A:matplotlib.pyplot.ax->gca()
A:matplotlib.pyplot.b->bool(b)
A:matplotlib.pyplot.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.pyplot.a->gcf().add_subplot(subplotspec, **kwargs)
A:matplotlib.pyplot.axs->gcf().subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw)
A:matplotlib.pyplot.subplotspec->GridSpec(s1, s2).new_subplotspec(loc, rowspan=rowspan, colspan=colspan)
A:matplotlib.pyplot.ax1->gcf().add_subplot(1, 1, 1)
A:matplotlib.pyplot.toolfig->figure(figsize=(6, 3))
A:matplotlib.pyplot.ret->gca().autoscale(enable=enable, axis=axis, tight=tight)
A:matplotlib.pyplot.on->_string_to_bool(on)
A:matplotlib.pyplot.locs->gca().set_yticks(args[0])
A:matplotlib.pyplot.labels->gca().xaxis.get_ticklabels()
A:matplotlib.pyplot.lines->gca().xaxis.get_ticklines()
A:matplotlib.pyplot.(lines, labels)->gca().set_thetagrids(*args, **kwargs)
A:matplotlib.pyplot.this_module->inspect.getmodule(get_plot_commands)
A:matplotlib.pyplot.commands->get_plot_commands()
A:matplotlib.pyplot.first_sentence->re.compile('(?:\\s*).+?\\.(?:\\s+|$)', flags=re.DOTALL)
A:matplotlib.pyplot.match->re.compile('(?:\\s*).+?\\.(?:\\s+|$)', flags=re.DOTALL).match(doc)
A:matplotlib.pyplot.summary->re.compile('(?:\\s*).+?\\.(?:\\s+|$)', flags=re.DOTALL).match(doc).group(0).strip().replace('\n', ' ')
A:matplotlib.pyplot.max_name->max(max_name, len(name))
A:matplotlib.pyplot.max_summary->max(max_summary, len(summary))
A:matplotlib.pyplot.plotting.__doc__->'\n'.join(lines)
A:matplotlib.pyplot.mappable->gci()
A:matplotlib.pyplot.im->gca().matshow(A, **kw)
A:matplotlib.pyplot.cmap->matplotlib.cm.get_cmap(cmap)
A:matplotlib.pyplot.A->numpy.asanyarray(A)
A:matplotlib.pyplot.plotfuncs->dict()
A:matplotlib.pyplot.r->matplotlib.mlab.csv2rec(fname, comments=comments, skiprows=skiprows, checkrows=checkrows, delimiter=delimiter, names=names)
A:matplotlib.pyplot.(xname, x)->getname_val(cols[0])
A:matplotlib.pyplot.funcname->dict().get(cols[i], 'plot')
A:matplotlib.pyplot.func->getattr(ax, funcname)
A:matplotlib.pyplot.N->len(cols)
A:matplotlib.pyplot.axax1->gcf().add_subplot(N - 1, 1, i)
A:matplotlib.pyplot.(yname, y)->getname_val(cols[i])
A:matplotlib.pyplot.addendum->matplotlib.docstring.Appender(msg, '\n\n')
A:matplotlib.pyplot.hold->kw.pop('hold', None)
matplotlib.pyplot._auto_draw_if_interactive(fig,val)
matplotlib.pyplot._autogen_docstring(base)
matplotlib.pyplot._backend_selection()
matplotlib.pyplot._setup_pyplot_info_docstrings()
matplotlib.pyplot.acorr(x,hold=None,data=None,**kwargs)
matplotlib.pyplot.angle_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.annotate(*args,**kwargs)
matplotlib.pyplot.arrow(x,y,dx,dy,hold=None,**kwargs)
matplotlib.pyplot.autoscale(enable=True,axis='both',tight=None)
matplotlib.pyplot.autumn()
matplotlib.pyplot.axes(arg=None,**kwargs)
matplotlib.pyplot.axhline(y=0,xmin=0,xmax=1,hold=None,**kwargs)
matplotlib.pyplot.axhspan(ymin,ymax,xmin=0,xmax=1,hold=None,**kwargs)
matplotlib.pyplot.axis(*v,**kwargs)
matplotlib.pyplot.axvline(x=0,ymin=0,ymax=1,hold=None,**kwargs)
matplotlib.pyplot.axvspan(xmin,xmax,ymin=0,ymax=1,hold=None,**kwargs)
matplotlib.pyplot.bar(*args,**kwargs)
matplotlib.pyplot.barbs(*args,**kw)
matplotlib.pyplot.barh(*args,**kwargs)
matplotlib.pyplot.bone()
matplotlib.pyplot.box(on=None)
matplotlib.pyplot.boxplot(x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_xticks=True,autorange=False,zorder=None,hold=None,data=None)
matplotlib.pyplot.broken_barh(xranges,yrange,hold=None,data=None,**kwargs)
matplotlib.pyplot.cla()
matplotlib.pyplot.clabel(CS,*args,**kwargs)
matplotlib.pyplot.clf()
matplotlib.pyplot.clim(vmin=None,vmax=None)
matplotlib.pyplot.close(*args)
matplotlib.pyplot.cohere(x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.colorbar(mappable=None,cax=None,ax=None,**kw)
matplotlib.pyplot.colormaps()
matplotlib.pyplot.colors()
matplotlib.pyplot.connect(s,func)
matplotlib.pyplot.contour(*args,**kwargs)
matplotlib.pyplot.contourf(*args,**kwargs)
matplotlib.pyplot.cool()
matplotlib.pyplot.copper()
matplotlib.pyplot.csd(x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.delaxes(ax=None)
matplotlib.pyplot.disconnect(cid)
matplotlib.pyplot.draw()
matplotlib.pyplot.errorbar(x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.eventplot(positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,linestyles='solid',hold=None,data=None,**kwargs)
matplotlib.pyplot.figimage(*args,**kwargs)
matplotlib.pyplot.figlegend(*args,**kwargs)
matplotlib.pyplot.fignum_exists(num)
matplotlib.pyplot.figtext(*args,**kwargs)
matplotlib.pyplot.figure(num=None,figsize=None,dpi=None,facecolor=None,edgecolor=None,frameon=True,FigureClass=Figure,clear=False,**kwargs)
matplotlib.pyplot.fill(*args,**kwargs)
matplotlib.pyplot.fill_between(x,y1,y2=0,where=None,interpolate=False,step=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.fill_betweenx(y,x1,x2=0,where=None,step=None,interpolate=False,hold=None,data=None,**kwargs)
matplotlib.pyplot.findobj(o=None,match=None,include_self=True)
matplotlib.pyplot.flag()
matplotlib.pyplot.gca(**kwargs)
matplotlib.pyplot.gcf()
matplotlib.pyplot.gci()
matplotlib.pyplot.get_current_fig_manager()
matplotlib.pyplot.get_figlabels()
matplotlib.pyplot.get_fignums()
matplotlib.pyplot.get_plot_commands()
matplotlib.pyplot.ginput(*args,**kwargs)
matplotlib.pyplot.gray()
matplotlib.pyplot.grid(b=None,which='major',axis='both',**kwargs)
matplotlib.pyplot.hexbin(x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,hold=None,data=None,**kwargs)
matplotlib.pyplot.hist(x,bins=None,range=None,density=None,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,normed=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.hist2d(x,y,bins=10,range=None,normed=False,weights=None,cmin=None,cmax=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.hlines(y,xmin,xmax,colors='k',linestyles='solid',label='',hold=None,data=None,**kwargs)
matplotlib.pyplot.hold(b=None)
matplotlib.pyplot.hot()
matplotlib.pyplot.hsv()
matplotlib.pyplot.imread(*args,**kwargs)
matplotlib.pyplot.imsave(*args,**kwargs)
matplotlib.pyplot.imshow(X,cmap=None,norm=None,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,shape=None,filternorm=1,filterrad=4.0,imlim=None,resample=None,url=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.inferno()
matplotlib.pyplot.install_repl_displayhook()
matplotlib.pyplot.ioff()
matplotlib.pyplot.ion()
matplotlib.pyplot.ishold()
matplotlib.pyplot.isinteractive()
matplotlib.pyplot.jet()
matplotlib.pyplot.legend(*args,**kwargs)
matplotlib.pyplot.locator_params(axis='both',tight=None,**kwargs)
matplotlib.pyplot.loglog(*args,**kwargs)
matplotlib.pyplot.magma()
matplotlib.pyplot.magnitude_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.margins(*args,**kw)
matplotlib.pyplot.matshow(A,fignum=None,**kw)
matplotlib.pyplot.minorticks_off()
matplotlib.pyplot.minorticks_on()
matplotlib.pyplot.nipy_spectral()
matplotlib.pyplot.over(func,*args,**kwargs)
matplotlib.pyplot.pause(interval)
matplotlib.pyplot.pcolor(*args,**kwargs)
matplotlib.pyplot.pcolormesh(*args,**kwargs)
matplotlib.pyplot.phase_spectrum(x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.pie(x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=None,radius=None,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False,hold=None,data=None)
matplotlib.pyplot.pink()
matplotlib.pyplot.plasma()
matplotlib.pyplot.plot(*args,**kwargs)
matplotlib.pyplot.plot_date(x,y,fmt='o',tz=None,xdate=True,ydate=False,hold=None,data=None,**kwargs)
matplotlib.pyplot.plotfile(fname,cols=(0,),plotfuncs=None,comments='#',skiprows=0,checkrows=5,delimiter=',',names=None,subplots=True,newfig=True,**kwargs)
matplotlib.pyplot.plotting()
matplotlib.pyplot.polar(*args,**kwargs)
matplotlib.pyplot.prism()
matplotlib.pyplot.psd(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.quiver(*args,**kw)
matplotlib.pyplot.quiverkey(*args,**kw)
matplotlib.pyplot.rc(*args,**kwargs)
matplotlib.pyplot.rc_context(rc=None,fname=None)
matplotlib.pyplot.rcdefaults()
matplotlib.pyplot.rgrids(*args,**kwargs)
matplotlib.pyplot.savefig(*args,**kwargs)
matplotlib.pyplot.sca(ax)
matplotlib.pyplot.scatter(x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,verts=None,edgecolors=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.sci(im)
matplotlib.pyplot.semilogx(*args,**kwargs)
matplotlib.pyplot.semilogy(*args,**kwargs)
matplotlib.pyplot.set_cmap(cmap)
matplotlib.pyplot.setp(*args,**kwargs)
matplotlib.pyplot.show(*args,**kw)
matplotlib.pyplot.specgram(x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,hold=None,data=None,**kwargs)
matplotlib.pyplot.spectral()
matplotlib.pyplot.spring()
matplotlib.pyplot.spy(Z,precision=0,marker=None,markersize=None,aspect='equal',**kwargs)
matplotlib.pyplot.stackplot(x,*args,**kwargs)
matplotlib.pyplot.stem(*args,**kwargs)
matplotlib.pyplot.step(x,y,*args,**kwargs)
matplotlib.pyplot.streamplot(x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both',hold=None,data=None)
matplotlib.pyplot.subplot(*args,**kwargs)
matplotlib.pyplot.subplot2grid(shape,loc,rowspan=1,colspan=1,fig=None,**kwargs)
matplotlib.pyplot.subplot_tool(targetfig=None)
matplotlib.pyplot.subplots(nrows=1,ncols=1,sharex=False,sharey=False,squeeze=True,subplot_kw=None,gridspec_kw=None,**fig_kw)
matplotlib.pyplot.subplots_adjust(*args,**kwargs)
matplotlib.pyplot.summer()
matplotlib.pyplot.suptitle(*args,**kwargs)
matplotlib.pyplot.switch_backend(newbackend)
matplotlib.pyplot.table(**kwargs)
matplotlib.pyplot.text(x,y,s,fontdict=None,withdash=False,**kwargs)
matplotlib.pyplot.thetagrids(*args,**kwargs)
matplotlib.pyplot.tick_params(axis='both',**kwargs)
matplotlib.pyplot.ticklabel_format(**kwargs)
matplotlib.pyplot.tight_layout(pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.pyplot.title(s,*args,**kwargs)
matplotlib.pyplot.tricontour(*args,**kwargs)
matplotlib.pyplot.tricontourf(*args,**kwargs)
matplotlib.pyplot.tripcolor(*args,**kwargs)
matplotlib.pyplot.triplot(*args,**kwargs)
matplotlib.pyplot.twinx(ax=None)
matplotlib.pyplot.twiny(ax=None)
matplotlib.pyplot.uninstall_repl_displayhook()
matplotlib.pyplot.violinplot(dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,points=100,bw_method=None,hold=None,data=None)
matplotlib.pyplot.viridis()
matplotlib.pyplot.vlines(x,ymin,ymax,colors='k',linestyles='solid',label='',hold=None,data=None,**kwargs)
matplotlib.pyplot.waitforbuttonpress(*args,**kwargs)
matplotlib.pyplot.winter()
matplotlib.pyplot.xcorr(x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,hold=None,data=None,**kwargs)
matplotlib.pyplot.xkcd(scale=1,length=100,randomness=2)
matplotlib.pyplot.xlabel(s,*args,**kwargs)
matplotlib.pyplot.xlim(*args,**kwargs)
matplotlib.pyplot.xscale(*args,**kwargs)
matplotlib.pyplot.xticks(*args,**kwargs)
matplotlib.pyplot.ylabel(s,*args,**kwargs)
matplotlib.pyplot.ylim(*args,**kwargs)
matplotlib.pyplot.yscale(*args,**kwargs)
matplotlib.pyplot.yticks(*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/offsetbox.py----------------------------------------
A:matplotlib.offsetbox.(w_list, d_list)->zip(*wd_list)
A:matplotlib.offsetbox.offsets_->numpy.cumsum([0] + [w + sep for w in w_list])
A:matplotlib.offsetbox.maxh->max(w_list)
A:matplotlib.offsetbox.height->max((h for (h, d) in hd_list))
A:matplotlib.offsetbox.height_descent->max((h - yd for (w, h, xd, yd) in whd_list))
A:matplotlib.offsetbox.descent->max((d for (h, d) in hd_list))
A:matplotlib.offsetbox.state->matplotlib.artist.Artist.__getstate__(self)
A:matplotlib.offsetbox.state['_offset']->_InstanceMethodPickler(offset)
A:matplotlib.offsetbox.self._offset->self._offset.get_instancemethod()
A:matplotlib.offsetbox.(a, b)->c.contains(mouseevent)
A:matplotlib.offsetbox.(w, h, xd, yd, offsets)->self.get_extent_offsets(renderer)
A:matplotlib.offsetbox.(px, py)->self.get_offset(width, height, xdescent, ydescent, renderer)
A:matplotlib.offsetbox.(width, height, xdescent, ydescent, offsets)->self.get_extent_offsets(renderer)
A:matplotlib.offsetbox.dpicor->renderer.points_to_pixels(1.0)
A:matplotlib.offsetbox.(width, xdescent, xoffsets)->_get_aligned_offsets(wd_list, self.width, self.align)
A:matplotlib.offsetbox.(height, yoffsets_)->_get_packed_offsets(pack_list, self.height, sep, self.mode)
A:matplotlib.offsetbox.ydescent->max((yd for (w, h, xd, yd) in whd_list))
A:matplotlib.offsetbox.(height, ydescent, yoffsets)->_get_aligned_offsets(hd_list, self.height, self.align)
A:matplotlib.offsetbox.(width, xoffsets_)->_get_packed_offsets(pack_list, self.width, sep, self.mode)
A:matplotlib.offsetbox.self.patch->FancyBboxPatch(xy=(0.0, 0.0), width=1.0, height=1.0, facecolor='w', edgecolor='k', mutation_scale=self.prop.get_size_in_points(), snap=True)
A:matplotlib.offsetbox.(w, h, xd, yd)->offsetbox.get_extent(renderer)
A:matplotlib.offsetbox.bbox->self.offsetbox.get_window_extent(renderer)
A:matplotlib.offsetbox.self.offset_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.self.dpi_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.self._clip_children->bool(val)
A:matplotlib.offsetbox.(ox, oy)->self.get_offset()
A:matplotlib.offsetbox.dpi_cor->renderer.points_to_pixels(1.0)
A:matplotlib.offsetbox.tpath->matplotlib.transforms.TransformedPath(mpath.Path([[0, 0], [0, self.height], [self.width, self.height], [self.width, 0]]), self.get_transform())
A:matplotlib.offsetbox.self._text->matplotlib.text.Text(0, 0, s, **textprops)
A:matplotlib.offsetbox.self._baseline_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox.(clean_line, ismath)->self._text.is_math_text(self._text._text)
A:matplotlib.offsetbox.(_, h_, d_)->renderer.get_text_width_height_descent('lp', self._text._fontproperties, ismath=False)
A:matplotlib.offsetbox.(bbox, info, d)->self._text._get_layout(renderer)
A:matplotlib.offsetbox.h_d->max(h_ - d_, h - d)
A:matplotlib.offsetbox.d->self.arrowprops.copy()
A:matplotlib.offsetbox.self.ref_offset_transform->matplotlib.transforms.Affine2D()
A:matplotlib.offsetbox._off->self.offset_transform.to_values()
A:matplotlib.offsetbox.ub->matplotlib.transforms.Bbox.union(bboxes)
A:matplotlib.offsetbox.mtx->self.offset_transform.matrix_from_values(*_off)
A:matplotlib.offsetbox.self.prop->FontProperties(size=s)
A:matplotlib.offsetbox.fontsize->renderer.points_to_pixels(self.prop.get_size_in_points())
A:matplotlib.offsetbox.l->len(bbox)
A:matplotlib.offsetbox.self._bbox_to_anchor->matplotlib.transforms.Bbox.from_bounds(*bbox)
A:matplotlib.offsetbox.bbox_to_anchor->self.get_bbox_to_anchor()
A:matplotlib.offsetbox.(x0, y0)->self._get_anchored_bbox(self.loc, bbox, bbox_to_anchor, borderpad)
A:matplotlib.offsetbox.(width, height, xdescent, ydescent)->self.get_extent(renderer)
A:matplotlib.offsetbox.(BEST, UR, UL, LL, LR, R, CL, CR, LC, UC, C)->xrange(11)
A:matplotlib.offsetbox.container->parentbbox.padded(-borderpad)
A:matplotlib.offsetbox.anchored_box->self.offsetbox.get_window_extent(renderer).anchored(c, container=container)
A:matplotlib.offsetbox.self.txt->TextArea(s, textprops=prop, minimumdescent=False)
A:matplotlib.offsetbox.fp->self.txt._text.get_fontproperties()
A:matplotlib.offsetbox.self.image->BboxImage(bbox=self.get_window_extent, cmap=cmap, norm=norm, interpolation=interpolation, origin=origin, filternorm=filternorm, filterrad=filterrad, resample=resample, **kwargs)
A:matplotlib.offsetbox.self._data->numpy.asarray(arr)
A:matplotlib.offsetbox.zoom->self.get_zoom()
A:matplotlib.offsetbox.data->self.get_data()
A:matplotlib.offsetbox.self._arrow_relpos->self.arrowprops.pop('relpos', (0.5, 0.5))
A:matplotlib.offsetbox.self.arrow_patch->FancyArrowPatch((0, 0), (1, 1), **self.arrowprops)
A:matplotlib.offsetbox.(t, tinfo)->self.offsetbox.contains(event)
A:matplotlib.offsetbox.xy_pixel->self._get_position_xy(renderer)
A:matplotlib.offsetbox.mutation_scale->renderer.points_to_pixels(mutation_scale)
A:matplotlib.offsetbox.(x1, y1)->self._get_xy(renderer, x, y, xcoord)
A:matplotlib.offsetbox.(x2, y2)->self._get_xy(renderer, x, y, ycoord)
A:matplotlib.offsetbox.(ox0, oy0)->self._get_xy(renderer, x, y, self.boxcoords)
A:matplotlib.offsetbox.fs->self.prop.get_size_in_points()
A:matplotlib.offsetbox.patchA->self.arrowprops.copy().pop('patchA', self.patch)
A:matplotlib.offsetbox.c2->self.canvas.mpl_connect('pick_event', self.on_pick)
A:matplotlib.offsetbox.c3->self.canvas.mpl_connect('button_release_event', self.on_release)
A:matplotlib.offsetbox.self.background->self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
A:matplotlib.offsetbox.self._c1->self.canvas.mpl_connect('motion_notify_event', self.on_motion)
A:matplotlib.offsetbox.offset->offsetbox.get_offset(w, h, xd, yd, renderer)
A:matplotlib.offsetbox.(self.ox, self.oy)->AnnotationBbox(myimage2, (0.5, 0.5), xybox=(30, 30), xycoords='data', boxcoords='offset points', frameon=True, pad=0.4, bboxprops=dict(boxstyle='round', fc='y'), fontsize=None, arrowprops=dict(arrowstyle='->')).get_transform().transform(ann.xyann)
A:matplotlib.offsetbox.ann.xyann->AnnotationBbox(myimage2, (0.5, 0.5), xybox=(30, 30), xycoords='data', boxcoords='offset points', frameon=True, pad=0.4, bboxprops=dict(boxstyle='round', fc='y'), fontsize=None, arrowprops=dict(arrowstyle='->')).get_transform().inverted().transform((self.ox + dx, self.oy + dy))
A:matplotlib.offsetbox.fig->matplotlib.pyplot.figure(1)
A:matplotlib.offsetbox.ax->matplotlib.pyplot.subplot(121)
A:matplotlib.offsetbox.kwargs->dict()
A:matplotlib.offsetbox.myimage->OffsetImage(a, zoom=2, norm=None, origin=None, **kwargs)
A:matplotlib.offsetbox.myimage2->OffsetImage(a, zoom=2, norm=None, origin=None, **kwargs)
A:matplotlib.offsetbox.ann->AnnotationBbox(myimage2, (0.5, 0.5), xybox=(30, 30), xycoords='data', boxcoords='offset points', frameon=True, pad=0.4, bboxprops=dict(boxstyle='round', fc='y'), fontsize=None, arrowprops=dict(arrowstyle='->'))
matplotlib.offsetbox.AnchoredOffsetbox(self,loc,pad=0.4,borderpad=0.5,child=None,prop=None,frameon=True,bbox_to_anchor=None,bbox_transform=None,**kwargs)
matplotlib.offsetbox.AnchoredOffsetbox.__init__(self,loc,pad=0.4,borderpad=0.5,child=None,prop=None,frameon=True,bbox_to_anchor=None,bbox_transform=None,**kwargs)
matplotlib.offsetbox.AnchoredOffsetbox._get_anchored_bbox(self,loc,bbox,parentbbox,borderpad)
matplotlib.offsetbox.AnchoredOffsetbox._update_offset_func(self,renderer,fontsize=None)
matplotlib.offsetbox.AnchoredOffsetbox.draw(self,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.get_bbox_to_anchor(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_child(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_children(self)
matplotlib.offsetbox.AnchoredOffsetbox.get_extent(self,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.get_window_extent(self,renderer)
matplotlib.offsetbox.AnchoredOffsetbox.set_bbox_to_anchor(self,bbox,transform=None)
matplotlib.offsetbox.AnchoredOffsetbox.set_child(self,child)
matplotlib.offsetbox.AnchoredOffsetbox.update_frame(self,bbox,fontsize=None)
matplotlib.offsetbox.AnchoredText(self,s,loc,pad=0.4,borderpad=0.5,prop=None,**kwargs)
matplotlib.offsetbox.AnchoredText.__init__(self,s,loc,pad=0.4,borderpad=0.5,prop=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox(self,offsetbox,xy,xybox=None,xycoords='data',boxcoords=None,frameon=True,pad=0.4,annotation_clip=None,box_alignment=(0.5,0.5),bboxprops=None,arrowprops=None,fontsize=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox.__init__(self,offsetbox,xy,xybox=None,xycoords='data',boxcoords=None,frameon=True,pad=0.4,annotation_clip=None,box_alignment=(0.5,0.5),bboxprops=None,arrowprops=None,fontsize=None,**kwargs)
matplotlib.offsetbox.AnnotationBbox.__str__(self)
matplotlib.offsetbox.AnnotationBbox._update_position_xybox(self,renderer,xy_pixel)
matplotlib.offsetbox.AnnotationBbox.anncoords(self)
matplotlib.offsetbox.AnnotationBbox.anncoords(self,coords)
matplotlib.offsetbox.AnnotationBbox.contains(self,event)
matplotlib.offsetbox.AnnotationBbox.draw(self,renderer)
matplotlib.offsetbox.AnnotationBbox.get_children(self)
matplotlib.offsetbox.AnnotationBbox.get_fontsize(self,s=None)
matplotlib.offsetbox.AnnotationBbox.set_figure(self,fig)
matplotlib.offsetbox.AnnotationBbox.set_fontsize(self,s=None)
matplotlib.offsetbox.AnnotationBbox.update_positions(self,renderer)
matplotlib.offsetbox.AnnotationBbox.xyann(self)
matplotlib.offsetbox.AnnotationBbox.xyann(self,xyann)
matplotlib.offsetbox.AuxTransformBox(self,aux_transform)
matplotlib.offsetbox.AuxTransformBox.__init__(self,aux_transform)
matplotlib.offsetbox.AuxTransformBox.add_artist(self,a)
matplotlib.offsetbox.AuxTransformBox.draw(self,renderer)
matplotlib.offsetbox.AuxTransformBox.get_extent(self,renderer)
matplotlib.offsetbox.AuxTransformBox.get_offset(self)
matplotlib.offsetbox.AuxTransformBox.get_transform(self)
matplotlib.offsetbox.AuxTransformBox.get_window_extent(self,renderer)
matplotlib.offsetbox.AuxTransformBox.set_offset(self,xy)
matplotlib.offsetbox.AuxTransformBox.set_transform(self,t)
matplotlib.offsetbox.DraggableAnnotation(self,annotation,use_blit=False)
matplotlib.offsetbox.DraggableAnnotation.__init__(self,annotation,use_blit=False)
matplotlib.offsetbox.DraggableAnnotation.save_offset(self)
matplotlib.offsetbox.DraggableAnnotation.update_offset(self,dx,dy)
matplotlib.offsetbox.DraggableBase(self,ref_artist,use_blit=False)
matplotlib.offsetbox.DraggableBase.__init__(self,ref_artist,use_blit=False)
matplotlib.offsetbox.DraggableBase.artist_picker(self,artist,evt)
matplotlib.offsetbox.DraggableBase.disconnect(self)
matplotlib.offsetbox.DraggableBase.finalize_offset(self)
matplotlib.offsetbox.DraggableBase.on_motion(self,evt)
matplotlib.offsetbox.DraggableBase.on_motion_blit(self,evt)
matplotlib.offsetbox.DraggableBase.on_pick(self,evt)
matplotlib.offsetbox.DraggableBase.on_release(self,event)
matplotlib.offsetbox.DraggableBase.save_offset(self)
matplotlib.offsetbox.DraggableBase.update_offset(self,dx,dy)
matplotlib.offsetbox.DraggableOffsetBox(self,ref_artist,offsetbox,use_blit=False)
matplotlib.offsetbox.DraggableOffsetBox.__init__(self,ref_artist,offsetbox,use_blit=False)
matplotlib.offsetbox.DraggableOffsetBox.get_loc_in_canvas(self)
matplotlib.offsetbox.DraggableOffsetBox.save_offset(self)
matplotlib.offsetbox.DraggableOffsetBox.update_offset(self,dx,dy)
matplotlib.offsetbox.DrawingArea(self,width,height,xdescent=0.0,ydescent=0.0,clip=False)
matplotlib.offsetbox.DrawingArea.__init__(self,width,height,xdescent=0.0,ydescent=0.0,clip=False)
matplotlib.offsetbox.DrawingArea.add_artist(self,a)
matplotlib.offsetbox.DrawingArea.clip_children(self)
matplotlib.offsetbox.DrawingArea.clip_children(self,val)
matplotlib.offsetbox.DrawingArea.draw(self,renderer)
matplotlib.offsetbox.DrawingArea.get_extent(self,renderer)
matplotlib.offsetbox.DrawingArea.get_offset(self)
matplotlib.offsetbox.DrawingArea.get_transform(self)
matplotlib.offsetbox.DrawingArea.get_window_extent(self,renderer)
matplotlib.offsetbox.DrawingArea.set_offset(self,xy)
matplotlib.offsetbox.DrawingArea.set_transform(self,t)
matplotlib.offsetbox.HPacker(self,pad=None,sep=None,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.HPacker.__init__(self,pad=None,sep=None,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.HPacker.get_extent_offsets(self,renderer)
matplotlib.offsetbox.OffsetBox(self,*args,**kwargs)
matplotlib.offsetbox.OffsetBox.__getstate__(self)
matplotlib.offsetbox.OffsetBox.__init__(self,*args,**kwargs)
matplotlib.offsetbox.OffsetBox.__setstate__(self,state)
matplotlib.offsetbox.OffsetBox.axes(self,ax)
matplotlib.offsetbox.OffsetBox.contains(self,mouseevent)
matplotlib.offsetbox.OffsetBox.draw(self,renderer)
matplotlib.offsetbox.OffsetBox.get_children(self)
matplotlib.offsetbox.OffsetBox.get_extent(self,renderer)
matplotlib.offsetbox.OffsetBox.get_extent_offsets(self,renderer)
matplotlib.offsetbox.OffsetBox.get_offset(self,width,height,xdescent,ydescent,renderer)
matplotlib.offsetbox.OffsetBox.get_visible_children(self)
matplotlib.offsetbox.OffsetBox.get_window_extent(self,renderer)
matplotlib.offsetbox.OffsetBox.set_figure(self,fig)
matplotlib.offsetbox.OffsetBox.set_height(self,height)
matplotlib.offsetbox.OffsetBox.set_offset(self,xy)
matplotlib.offsetbox.OffsetBox.set_width(self,width)
matplotlib.offsetbox.OffsetImage(self,arr,zoom=1,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,dpi_cor=True,**kwargs)
matplotlib.offsetbox.OffsetImage.__init__(self,arr,zoom=1,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,dpi_cor=True,**kwargs)
matplotlib.offsetbox.OffsetImage.draw(self,renderer)
matplotlib.offsetbox.OffsetImage.get_children(self)
matplotlib.offsetbox.OffsetImage.get_data(self)
matplotlib.offsetbox.OffsetImage.get_extent(self,renderer)
matplotlib.offsetbox.OffsetImage.get_offset(self)
matplotlib.offsetbox.OffsetImage.get_window_extent(self,renderer)
matplotlib.offsetbox.OffsetImage.get_zoom(self)
matplotlib.offsetbox.OffsetImage.set_data(self,arr)
matplotlib.offsetbox.OffsetImage.set_zoom(self,zoom)
matplotlib.offsetbox.PackerBase(self,pad=None,sep=None,width=None,height=None,align=None,mode=None,children=None)
matplotlib.offsetbox.PackerBase.__init__(self,pad=None,sep=None,width=None,height=None,align=None,mode=None,children=None)
matplotlib.offsetbox.PaddedBox(self,child,pad=None,draw_frame=False,patch_attrs=None)
matplotlib.offsetbox.PaddedBox.__init__(self,child,pad=None,draw_frame=False,patch_attrs=None)
matplotlib.offsetbox.PaddedBox.draw(self,renderer)
matplotlib.offsetbox.PaddedBox.draw_frame(self,renderer)
matplotlib.offsetbox.PaddedBox.get_extent_offsets(self,renderer)
matplotlib.offsetbox.PaddedBox.update_frame(self,bbox,fontsize=None)
matplotlib.offsetbox.TextArea(self,s,textprops=None,multilinebaseline=None,minimumdescent=True)
matplotlib.offsetbox.TextArea.__init__(self,s,textprops=None,multilinebaseline=None,minimumdescent=True)
matplotlib.offsetbox.TextArea.draw(self,renderer)
matplotlib.offsetbox.TextArea.get_extent(self,renderer)
matplotlib.offsetbox.TextArea.get_minimumdescent(self)
matplotlib.offsetbox.TextArea.get_multilinebaseline(self)
matplotlib.offsetbox.TextArea.get_offset(self)
matplotlib.offsetbox.TextArea.get_text(self)
matplotlib.offsetbox.TextArea.get_window_extent(self,renderer)
matplotlib.offsetbox.TextArea.set_minimumdescent(self,t)
matplotlib.offsetbox.TextArea.set_multilinebaseline(self,t)
matplotlib.offsetbox.TextArea.set_offset(self,xy)
matplotlib.offsetbox.TextArea.set_text(self,s)
matplotlib.offsetbox.TextArea.set_transform(self,t)
matplotlib.offsetbox.VPacker(self,pad=None,sep=None,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.VPacker.__init__(self,pad=None,sep=None,width=None,height=None,align='baseline',mode='fixed',children=None)
matplotlib.offsetbox.VPacker.get_extent_offsets(self,renderer)
matplotlib.offsetbox._get_aligned_offsets(hd_list,height,align='baseline')
matplotlib.offsetbox._get_packed_offsets(wd_list,total,sep,mode='fixed')
matplotlib.offsetbox.bbox_artist(*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/figure.py----------------------------------------
A:matplotlib.figure._log->logging.getLogger(__name__)
A:matplotlib.figure.item->dict(self._elements).get(key)
A:matplotlib.figure.key->self._make_key(*args, **kwargs)
A:matplotlib.figure.a_existing->self.get(key)
A:matplotlib.figure.thisleft->getattr(self, 'left', None)
A:matplotlib.figure.thisright->getattr(self, 'right', None)
A:matplotlib.figure.thistop->getattr(self, 'top', None)
A:matplotlib.figure.thisbottom->getattr(self, 'bottom', None)
A:matplotlib.figure.thiswspace->getattr(self, 'wspace', None)
A:matplotlib.figure.thishspace->getattr(self, 'hspace', None)
A:matplotlib.figure.val->getattr(self, s, None)
A:matplotlib.figure.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.figure.self.bbox_inches->matplotlib.transforms.Bbox.from_bounds(0, 0, *figsize)
A:matplotlib.figure.self.dpi_scale_trans->Affine2D().scale(dpi, dpi)
A:matplotlib.figure.self.bbox->TransformedBbox(self.bbox_inches, self.dpi_scale_trans)
A:matplotlib.figure.self.transFigure->BboxTransformTo(self.bbox)
A:matplotlib.figure.self.patch->Rectangle(xy=(0, 0), width=1, height=1, facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth)
A:matplotlib.figure.subplotpars->SubplotParams()
A:matplotlib.figure.self._axstack->AxesStack()
A:matplotlib.figure.self._align_xlabel_grp->matplotlib.cbook.Grouper()
A:matplotlib.figure.self._align_ylabel_grp->matplotlib.cbook.Grouper()
A:matplotlib.figure.manager->getattr(self.canvas, 'manager', None)
A:matplotlib.figure.axes->property(fget=_get_axes, doc='Read-only: list of axes in Figure')
A:matplotlib.figure.(w, h)->self.get_size_inches()
A:matplotlib.figure.dpi->self.get_dpi()
A:matplotlib.figure.self._tight->bool(tight)
A:matplotlib.figure.self._constrained_layout_pads->dict()
A:matplotlib.figure.self._constrained->bool(constrained)
A:matplotlib.figure.renderer0->matplotlib._layoutbox.get_renderer(self)
A:matplotlib.figure.allsubplots->all((hasattr(ax, 'is_last_row') for ax in self.axes))
A:matplotlib.figure.inside->self.bbox.contains(mouseevent.x, mouseevent.y)
A:matplotlib.figure.x->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect).pop('x', 0.5)
A:matplotlib.figure.y->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect).pop('y', 0.98)
A:matplotlib.figure.sup->self.text(x, y, t, **kwargs)
A:matplotlib.figure.self._suptitle._layoutbox->matplotlib._layoutbox.LayoutBox(parent=figlb, name=figlb.name + '.suptitle')
A:matplotlib.figure.(w_pad, h_pad, wspace, hspace)->self.get_constrained_layout_pads()
A:matplotlib.figure.im->self.gca()._gci()
A:matplotlib.figure.canvas->getattr(self, 'canvas')
A:matplotlib.figure.ratio->getattr(self.canvas, '_dpi_ratio', 1)
A:matplotlib.figure.v->tuple(v)
A:matplotlib.figure.a->subplot_class_factory(projection_class)(self, *args, **kwargs)
A:matplotlib.figure.ax->self.gca()
A:matplotlib.figure.(projection_class, kwargs, key)->process_projection_requirements(self, *args, **kwargs)
A:matplotlib.figure.args->tuple(map(int, str(args[0])))
A:matplotlib.figure.gs->GridSpec(nrows, ncols, figure=None, **gridspec_kw)
A:matplotlib.figure.axarr->numpy.empty((nrows, ncols), dtype=object)
A:matplotlib.figure.axarr[row, col]->self.add_subplot(gs[row, col], **subplot_kw)
A:matplotlib.figure.siblings->grouper.get_siblings(ax)
A:matplotlib.figure.last_ax->_break_share_link(ax, ax._shared_x_axes)
A:matplotlib.figure.toolbar->getattr(self.canvas, 'toolbar', None)
A:matplotlib.figure.artists->sorted((artist for artist in self.patches + self.lines + self.artists + self.images + self.axes + self.texts + self.legends if not artist.get_animated()), key=lambda artist: artist.get_zorder())
A:matplotlib.figure.(handles, labels, extra_args, kwargs)->matplotlib.legend._parse_legend_args(self.axes, *args, **kwargs)
A:matplotlib.figure.l->matplotlib.legend.Legend(self, handles, labels, *extra_args, **kwargs)
A:matplotlib.figure.override->_process_text_args({}, *args, **kwargs)
A:matplotlib.figure.t->Text(x=x, y=y, text=s)
A:matplotlib.figure.(ckey, cax)->self._axstack.current_key_axes()
A:matplotlib.figure.kwargs_copy->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect).copy()
A:matplotlib.figure.(projection_class, _, key)->process_projection_requirements(self, **kwargs_copy)
A:matplotlib.figure.state->super(Figure, self).__getstate__()
A:matplotlib.figure.version->super(Figure, self).__getstate__().pop('__mpl_version__')
A:matplotlib.figure.restore_to_pylab->super(Figure, self).__getstate__().pop('_restore_to_pylab', False)
A:matplotlib.figure.allnums->matplotlib.pyplot.get_fignums()
A:matplotlib.figure.mgr->matplotlib.pyplot._backend_mod.new_figure_manager_given_figure(num, self)
A:matplotlib.figure.mgr._cidgcf->matplotlib.pyplot._backend_mod.new_figure_manager_given_figure(num, self).canvas.mpl_connect('button_press_event', make_active)
A:matplotlib.figure.frameon->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect).pop('frameon', rcParams['savefig.frameon'])
A:matplotlib.figure.transparent->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect).pop('transparent', rcParams['savefig.transparent'])
A:matplotlib.figure.original_frameon->self.get_frameon()
A:matplotlib.figure.current_ax->self.gca()
A:matplotlib.figure.(cax, kw)->matplotlib.colorbar.make_axes(ax, **kw)
A:matplotlib.figure.cb->matplotlib.colorbar.colorbar_factory(cax, mappable, **cb_kw)
A:matplotlib.figure.blocking_mouse_input->BlockingMouseInput(self, mouse_add=mouse_add, mouse_pop=mouse_pop, mouse_stop=mouse_stop)
A:matplotlib.figure.blocking_input->BlockingKeyMouseInput(self)
A:matplotlib.figure._bbox->matplotlib.transforms.Bbox.union([b for b in bb if b.width != 0 or b.height != 0])
A:matplotlib.figure.bbox_inches->TransformedBbox(_bbox, Affine2D().scale(1.0 / self.dpi))
A:matplotlib.figure.self._layoutbox->matplotlib._layoutbox.LayoutBox(parent=None, name='figlb', artist=self)
A:matplotlib.figure.(width, height)->fig.get_size_inches()
A:matplotlib.figure.renderer->get_renderer(self)
A:matplotlib.figure.subplotspec_list->get_subplotspec_list(self.axes)
A:matplotlib.figure.kwargs->get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
A:matplotlib.figure.axs->numpy.asarray(axs).ravel()
A:matplotlib.figure.ss->axc.get_subplotspec()
A:matplotlib.figure.(nrows, ncols, row0, row1, col0, col1)->axc.get_subplotspec().get_rows_columns()
A:matplotlib.figure.labpo->self.gca().yaxis.get_label_position()
A:matplotlib.figure.(nrows, ncols, rowc0, rowc1, colc, col1)->axc.get_subplotspec().get_rows_columns()
A:matplotlib.figure.(nrows, ncols, row0, row1, colc0, colc1)->axc.get_subplotspec().get_rows_columns()
A:matplotlib.figure.figsize_min->numpy.array((4.0, 2.0))
A:matplotlib.figure.figsize_max->numpy.array((16.0, 16.0))
A:matplotlib.figure.newsize->numpy.clip(newsize, figsize_min, figsize_max)
matplotlib.figure.AxesStack(self)
matplotlib.figure.AxesStack.__contains__(self,a)
matplotlib.figure.AxesStack.__init__(self)
matplotlib.figure.AxesStack._entry_from_axes(self,e)
matplotlib.figure.AxesStack.add(self,key,a)
matplotlib.figure.AxesStack.as_list(self)
matplotlib.figure.AxesStack.bubble(self,a)
matplotlib.figure.AxesStack.current_key_axes(self)
matplotlib.figure.AxesStack.get(self,key)
matplotlib.figure.AxesStack.remove(self,a)
matplotlib.figure.Figure(self,figsize=None,dpi=None,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,subplotpars=None,tight_layout=None,constrained_layout=None)
matplotlib.figure.Figure.__getstate__(self)
matplotlib.figure.Figure.__init__(self,figsize=None,dpi=None,facecolor=None,edgecolor=None,linewidth=0.0,frameon=None,subplotpars=None,tight_layout=None,constrained_layout=None)
matplotlib.figure.Figure.__remove_ax(self,ax)
matplotlib.figure.Figure.__repr__(self)
matplotlib.figure.Figure.__setstate__(self,state)
matplotlib.figure.Figure.__str__(self)
matplotlib.figure.Figure._gci(self)
matplotlib.figure.Figure._get_axes(self)
matplotlib.figure.Figure._get_dpi(self)
matplotlib.figure.Figure._make_key(self,*args,**kwargs)
matplotlib.figure.Figure._repr_html_(self)
matplotlib.figure.Figure._set_artist_props(self,a)
matplotlib.figure.Figure._set_dpi(self,dpi,forward=True)
matplotlib.figure.Figure.add_axes(self,*args,**kwargs)
matplotlib.figure.Figure.add_axobserver(self,func)
matplotlib.figure.Figure.add_subplot(self,*args,**kwargs)
matplotlib.figure.Figure.align_labels(self,axs=None)
matplotlib.figure.Figure.align_xlabels(self,axs=None)
matplotlib.figure.Figure.align_ylabels(self,axs=None)
matplotlib.figure.Figure.autofmt_xdate(self,bottom=0.2,rotation=30,ha='right',which=None)
matplotlib.figure.Figure.clear(self,keep_observers=False)
matplotlib.figure.Figure.clf(self,keep_observers=False)
matplotlib.figure.Figure.colorbar(self,mappable,cax=None,ax=None,use_gridspec=True,**kw)
matplotlib.figure.Figure.contains(self,mouseevent)
matplotlib.figure.Figure.delaxes(self,ax)
matplotlib.figure.Figure.draw(self,renderer)
matplotlib.figure.Figure.draw_artist(self,a)
matplotlib.figure.Figure.execute_constrained_layout(self,renderer=None)
matplotlib.figure.Figure.figimage(self,X,xo=0,yo=0,alpha=None,norm=None,cmap=None,vmin=None,vmax=None,origin=None,resize=False,**kwargs)
matplotlib.figure.Figure.figurePatch(self)
matplotlib.figure.Figure.gca(self,**kwargs)
matplotlib.figure.Figure.get_axes(self)
matplotlib.figure.Figure.get_children(self)
matplotlib.figure.Figure.get_constrained_layout(self)
matplotlib.figure.Figure.get_constrained_layout_pads(self,relative=False)
matplotlib.figure.Figure.get_default_bbox_extra_artists(self)
matplotlib.figure.Figure.get_dpi(self)
matplotlib.figure.Figure.get_edgecolor(self)
matplotlib.figure.Figure.get_facecolor(self)
matplotlib.figure.Figure.get_figheight(self)
matplotlib.figure.Figure.get_figwidth(self)
matplotlib.figure.Figure.get_frameon(self)
matplotlib.figure.Figure.get_size_inches(self)
matplotlib.figure.Figure.get_tight_layout(self)
matplotlib.figure.Figure.get_tightbbox(self,renderer)
matplotlib.figure.Figure.get_window_extent(self,*args,**kwargs)
matplotlib.figure.Figure.ginput(self,n=1,timeout=30,show_clicks=True,mouse_add=1,mouse_pop=3,mouse_stop=2)
matplotlib.figure.Figure.hold(self,b=None)
matplotlib.figure.Figure.init_layoutbox(self)
matplotlib.figure.Figure.legend(self,*args,**kwargs)
matplotlib.figure.Figure.savefig(self,fname,**kwargs)
matplotlib.figure.Figure.sca(self,a)
matplotlib.figure.Figure.set_canvas(self,canvas)
matplotlib.figure.Figure.set_constrained_layout(self,constrained)
matplotlib.figure.Figure.set_constrained_layout_pads(self,**kwargs)
matplotlib.figure.Figure.set_dpi(self,val)
matplotlib.figure.Figure.set_edgecolor(self,color)
matplotlib.figure.Figure.set_facecolor(self,color)
matplotlib.figure.Figure.set_figheight(self,val,forward=True)
matplotlib.figure.Figure.set_figwidth(self,val,forward=True)
matplotlib.figure.Figure.set_frameon(self,b)
matplotlib.figure.Figure.set_size_inches(self,w,h=None,forward=True)
matplotlib.figure.Figure.set_tight_layout(self,tight)
matplotlib.figure.Figure.show(self,warn=True)
matplotlib.figure.Figure.subplots(self,nrows=1,ncols=1,sharex=False,sharey=False,squeeze=True,subplot_kw=None,gridspec_kw=None)
matplotlib.figure.Figure.subplots_adjust(self,*args,**kwargs)
matplotlib.figure.Figure.suptitle(self,t,**kwargs)
matplotlib.figure.Figure.text(self,x,y,s,*args,**kwargs)
matplotlib.figure.Figure.tight_layout(self,renderer=None,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.figure.Figure.waitforbuttonpress(self,timeout=-1)
matplotlib.figure.SubplotParams(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure.SubplotParams.__init__(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure.SubplotParams._update_this(self,s,val)
matplotlib.figure.SubplotParams.update(self,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)
matplotlib.figure._stale_figure_callback(self,val)
matplotlib.figure.figaspect(arg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/quiver.py----------------------------------------
A:matplotlib.quiver.self.angle->kw.pop('angle', 0)
A:matplotlib.quiver.self.coord->kw.pop('coordinates', 'axes')
A:matplotlib.quiver.self.color->kw.pop('color', 'k')
A:matplotlib.quiver.self._labelsep_inches->kw.pop('labelsep', 0.1)
A:matplotlib.quiver.weak_self->weakref.ref(self)
A:matplotlib.quiver.self_weakref->weak_self()
A:matplotlib.quiver.self._cid->self.ax.figure.callbacks.connect('dpi_changed', on_dpi_change)
A:matplotlib.quiver.self.labelpos->kw.pop('labelpos', 'N')
A:matplotlib.quiver.self.labelcolor->kw.pop('labelcolor', None)
A:matplotlib.quiver.self.fontproperties->kw.pop('fontproperties', dict())
A:matplotlib.quiver.self.text->matplotlib.text.Text(text=label, horizontalalignment=self.halign[self.labelpos], verticalalignment=self.valign[self.labelpos], fontproperties=font_manager.FontProperties(**_fp))
A:matplotlib.quiver.self.verts->self.Q._make_verts(np.array([self.U]), np.zeros((1,)), self.angle)
A:matplotlib.quiver.self.vector->matplotlib.collections.PolyCollection(self.verts, offsets=[(self.X, self.Y)], transOffset=self.get_transform(), **kw)
A:matplotlib.quiver.(x, y)->self.get_transform().transform_point((self.X, self.Y))
A:matplotlib.quiver.args->list(args)
A:matplotlib.quiver.C->numpy.ma.array(C, mask=mask, copy=False)
A:matplotlib.quiver.V->numpy.ma.masked_invalid(V, copy=True).ravel()
A:matplotlib.quiver.U->numpy.ma.masked_invalid(U, copy=True).ravel()
A:matplotlib.quiver.indexgrid->numpy.meshgrid(np.arange(nc), np.arange(nr))
A:matplotlib.quiver.all_shapes->set((a.shape for a in arrays))
A:matplotlib.quiver.(X, Y, U, V, C)->_parse_args(*args)
A:matplotlib.quiver.self.XY->numpy.hstack((X[:, np.newaxis], Y[:, np.newaxis]))
A:matplotlib.quiver.self.N->len(X)
A:matplotlib.quiver.self.scale->kw.pop('scale', None)
A:matplotlib.quiver.self.headwidth->kw.pop('headwidth', 3)
A:matplotlib.quiver.self.headlength->float(kw.pop('headlength', 5))
A:matplotlib.quiver.self.headaxislength->kw.pop('headaxislength', 4.5)
A:matplotlib.quiver.self.minshaft->kw.pop('minshaft', 1)
A:matplotlib.quiver.self.minlength->kw.pop('minlength', 1)
A:matplotlib.quiver.self.units->kw.pop('units', 'width')
A:matplotlib.quiver.self.scale_units->kw.pop('scale_units', None)
A:matplotlib.quiver.self.angles->kw.pop('angles', 'uv')
A:matplotlib.quiver.self.width->kw.pop('width', None)
A:matplotlib.quiver.pivot->kw.pop('pivot', 'tail').lower()
A:matplotlib.quiver.self.transform->kw.pop('transform', ax.transData)
A:matplotlib.quiver.trans->matplotlib.transforms.Affine2D().scale(dx)
A:matplotlib.quiver.(sx, sy)->matplotlib.transforms.Affine2D().scale(dx).inverted().transform_point((ax.bbox.width, ax.bbox.height))
A:matplotlib.quiver.sn->max(10, math.sqrt(self.N))
A:matplotlib.quiver.transOffset->self.get_offset_transform()
A:matplotlib.quiver.XY->numpy.ma.array(XY)
A:matplotlib.quiver.bbox->matplotlib.transforms.Bbox.null()
A:matplotlib.quiver.verts->self._make_verts(self.U, self.V, self.angles)
A:matplotlib.quiver.mask->numpy.ma.mask_or(mask, C.mask, copy=False, shrink=True)
A:matplotlib.quiver.self.U->numpy.ma.masked_invalid(U, copy=True).ravel().filled(1)
A:matplotlib.quiver.self.V->numpy.ma.masked_invalid(V, copy=True).ravel().filled(1)
A:matplotlib.quiver.dx1->numpy.hypot(dxx1, dyy1)
A:matplotlib.quiver.dx0->numpy.hypot(dxx0, dyy0)
A:matplotlib.quiver.dx->self._dots_per_unit(self.scale_units)
A:matplotlib.quiver.xy->numpy.hstack((x[:, np.newaxis], y[:, np.newaxis]))
A:matplotlib.quiver.uv->numpy.hstack((U[:, np.newaxis], V[:, np.newaxis]))
A:matplotlib.quiver.xyp->self.ax.transData.transform(self.XY + eps * uv)
A:matplotlib.quiver.angles->numpy.arctan2(dxy[:, 1], dxy[:, 0])
A:matplotlib.quiver.(angles, lengths)->self._angles_lengths(U, V, eps=eps)
A:matplotlib.quiver.a->numpy.abs(uv)
A:matplotlib.quiver.amean->numpy.abs(uv).mean()
A:matplotlib.quiver.(X, Y)->self._h_arrows(length)
A:matplotlib.quiver.theta->theta.reshape((-1, 1)).reshape((-1, 1))
A:matplotlib.quiver.N->len(length)
A:matplotlib.quiver.length->length.reshape(N, 1).reshape(N, 1)
A:matplotlib.quiver.x->numpy.array([0, -self.headaxislength, -self.headlength, 0], np.float64)
A:matplotlib.quiver.y->numpy.repeat(y[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.x0->numpy.array([0, minsh - self.headaxislength, minsh - self.headlength, minsh], np.float64)
A:matplotlib.quiver.X->numpy.array([0, -self.headaxislength, -self.headlength, 0], np.float64).take(ii, 1)
A:matplotlib.quiver.Y->numpy.repeat(y[np.newaxis, :], N, axis=0).take(ii, 1)
A:matplotlib.quiver.X0->numpy.array([0, minsh - self.headaxislength, minsh - self.headlength, minsh], np.float64).take(ii)
A:matplotlib.quiver.Y0->y0.take(ii)
A:matplotlib.quiver.short->numpy.repeat(length < minsh, 8, axis=1)
A:matplotlib.quiver.X1->numpy.repeat(x1[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.Y1->numpy.repeat(y1[np.newaxis, :], N, axis=0)
A:matplotlib.quiver.tooshort->numpy.repeat(tooshort, 8, 1)
A:matplotlib.quiver.self._pivot->kw.pop('pivot', 'tip')
A:matplotlib.quiver.self._length->kw.pop('length', 7)
A:matplotlib.quiver.barbcolor->kw.pop('barbcolor', None)
A:matplotlib.quiver.flagcolor->kw.pop('flagcolor', None)
A:matplotlib.quiver.self.sizes->kw.pop('sizes', dict())
A:matplotlib.quiver.self.fill_empty->kw.pop('fill_empty', False)
A:matplotlib.quiver.self.barb_increments->kw.pop('barb_increments', dict())
A:matplotlib.quiver.self.rounding->kw.pop('rounding', True)
A:matplotlib.quiver.self.flip->kw.pop('flip_barb', False)
A:matplotlib.quiver.transform->kw.pop('transform', ax.transData)
A:matplotlib.quiver.(x, y, u, v, c)->delete_masked_points(self.x.ravel(), self.y.ravel(), self.u, self.v, c)
A:matplotlib.quiver.num_flags->numpy.floor(mag / flag).astype(int)
A:matplotlib.quiver.mag->numpy.mod(mag, full)
A:matplotlib.quiver.num_barb->numpy.floor(mag / full).astype(int)
A:matplotlib.quiver.pivot_points->dict(tip=0.0, middle=-length / 2.0)
A:matplotlib.quiver.endy->float(pivot)
A:matplotlib.quiver.circ->CirclePolygon((0, 0), radius=empty_rad).get_verts()
A:matplotlib.quiver.empty_barb->numpy.concatenate((circ, circ[::-1]))
A:matplotlib.quiver.poly_verts->matplotlib.transforms.Affine2D().rotate(-angle).transform(poly_verts)
A:matplotlib.quiver.self.u->numpy.ma.masked_invalid(U, copy=False).ravel()
A:matplotlib.quiver.self.v->numpy.ma.masked_invalid(V, copy=False).ravel()
A:matplotlib.quiver.c->numpy.ma.masked_invalid(C, copy=False).ravel()
A:matplotlib.quiver.(x, y, u, v)->delete_masked_points(self.x.ravel(), self.y.ravel(), self.u, self.v)
A:matplotlib.quiver.magnitude->numpy.hypot(u, v)
A:matplotlib.quiver.(flags, barbs, halves, empty)->self._find_tails(magnitude, self.rounding, **self.barb_increments)
A:matplotlib.quiver.plot_barbs->self._make_barbs(u, v, flags, barbs, halves, empty, self._length, self._pivot, self.sizes, self.fill_empty, self.flip)
matplotlib.quiver.Barbs(self,ax,*args,**kw)
matplotlib.quiver.Barbs.__init__(self,ax,*args,**kw)
matplotlib.quiver.Barbs._find_tails(self,mag,rounding=True,half=5,full=10,flag=50)
matplotlib.quiver.Barbs._make_barbs(self,u,v,nflags,nbarbs,half_barb,empty_flag,length,pivot,sizes,fill_empty,flip)
matplotlib.quiver.Barbs.set_UVC(self,U,V,C=None)
matplotlib.quiver.Barbs.set_offsets(self,xy)
matplotlib.quiver.Quiver(self,ax,*args,**kw)
matplotlib.quiver.Quiver.__init__(self,ax,*args,**kw)
matplotlib.quiver.Quiver._angles_lengths(self,U,V,eps=1)
matplotlib.quiver.Quiver._dots_per_unit(self,units)
matplotlib.quiver.Quiver._h_arrows(self,length)
matplotlib.quiver.Quiver._init(self)
matplotlib.quiver.Quiver._make_verts(self,U,V,angles)
matplotlib.quiver.Quiver._set_transform(self)
matplotlib.quiver.Quiver.draw(self,renderer)
matplotlib.quiver.Quiver.get_datalim(self,transData)
matplotlib.quiver.Quiver.remove(self)
matplotlib.quiver.Quiver.set_UVC(self,U,V,C=None)
matplotlib.quiver.QuiverKey(self,Q,X,Y,U,label,**kw)
matplotlib.quiver.QuiverKey.__init__(self,Q,X,Y,U,label,**kw)
matplotlib.quiver.QuiverKey._init(self)
matplotlib.quiver.QuiverKey._set_transform(self)
matplotlib.quiver.QuiverKey._text_x(self,x)
matplotlib.quiver.QuiverKey._text_y(self,y)
matplotlib.quiver.QuiverKey.contains(self,mouseevent)
matplotlib.quiver.QuiverKey.draw(self,renderer)
matplotlib.quiver.QuiverKey.remove(self)
matplotlib.quiver.QuiverKey.set_figure(self,fig)
matplotlib.quiver._check_consistent_shapes(*arrays)
matplotlib.quiver._parse_args(*args)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/bezier.py----------------------------------------
A:matplotlib.bezier.beta->_de_casteljau1(beta, t)
A:matplotlib.bezier.start->bezier_point_at_t(t0)
A:matplotlib.bezier.end->bezier_point_at_t(t1)
A:matplotlib.bezier.start_inside->inside_closedpath(start)
A:matplotlib.bezier.end_inside->inside_closedpath(end)
A:matplotlib.bezier.middle->bezier_point_at_t(middle_t)
A:matplotlib.bezier.middle_inside->inside_closedpath(middle)
A:matplotlib.bezier._o->len(control_points)
A:matplotlib.bezier.self._orders->numpy.arange(_o)
A:matplotlib.bezier._x->numpy.dot(tt, self._px)
A:matplotlib.bezier._y->numpy.dot(tt, self._py)
A:matplotlib.bezier.bz->BezierSegment(bezier)
A:matplotlib.bezier.(t0, t1)->find_bezier_t_intersecting_with_closedpath(bezier_point_at_t, inside_closedpath, tolerence=tolerence)
A:matplotlib.bezier.(_left, _right)->split_de_casteljau(bezier, (t0 + t1) / 2.0)
A:matplotlib.bezier.path_iter->path.iter_segments()
A:matplotlib.bezier.(ctl_points, command)->next(path_iter)
A:matplotlib.bezier.begin_inside->inside(ctl_points[-2:])
A:matplotlib.bezier.bezier_path->concat([ctl_points_old[-2:], ctl_points])
A:matplotlib.bezier.bp->concat([ctl_points_old[-2:], ctl_points]).reshape((-1, 2))
A:matplotlib.bezier.(left, right)->split_bezier_intersecting_with_closedpath(bp, inside, tolerence)
A:matplotlib.bezier.path_in->Path(concat([path.vertices[:iold], verts_left]), concat([path.codes[:iold], codes_left]))
A:matplotlib.bezier.path_out->Path(concat([verts_right, path.vertices[i:]]), concat([codes_right, path.codes[i:]]))
A:matplotlib.bezier.theta1->numpy.arctan2(dx1, dy1)
A:matplotlib.bezier.theta2->numpy.arctan2(dx2, dy2)
A:matplotlib.bezier.dtheta->numpy.abs(theta1 - theta2)
A:matplotlib.bezier.parallel_test->check_if_parallel(c1x - cmx, c1y - cmy, cmx - c2x, cmy - c2y)
A:matplotlib.bezier.(cos_t1, sin_t1)->get_cos_sin(c1x, c1y, cmx, cmy)
A:matplotlib.bezier.(cos_t2, sin_t2)->get_cos_sin(cmx, cmy, c3x, c3y)
A:matplotlib.bezier.(c1x_left, c1y_left, c1x_right, c1y_right)->get_normal_points(c1x, c1y, cos_t1, sin_t1, width * w1)
A:matplotlib.bezier.(c2x_left, c2y_left, c2x_right, c2y_right)->get_normal_points(c2x, c2y, cos_t2, sin_t2, width)
A:matplotlib.bezier.(cmx_left, cmy_left)->get_intersection(c1x_left, c1y_left, cos_t1, sin_t1, c2x_left, c2y_left, cos_t2, sin_t2)
A:matplotlib.bezier.(cmx_right, cmy_right)->get_intersection(c1x_right, c1y_right, cos_t1, sin_t1, c2x_right, c2y_right, cos_t2, sin_t2)
A:matplotlib.bezier.(c3x_left, c3y_left, c3x_right, c3y_right)->get_normal_points(c3x, c3y, cos_t2, sin_t2, width * w2)
A:matplotlib.bezier.(cos_t123, sin_t123)->get_cos_sin(c12x, c12y, c23x, c23y)
A:matplotlib.bezier.(c123x_left, c123y_left, c123x_right, c123y_right)->get_normal_points(c123x, c123y, cos_t123, sin_t123, width * wm)
A:matplotlib.bezier.path_left->find_control_points(c1x_left, c1y_left, c123x_left, c123y_left, c3x_left, c3y_left)
A:matplotlib.bezier.path_right->find_control_points(c1x_right, c1y_right, c123x_right, c123y_right, c3x_right, c3y_right)
A:matplotlib.bezier.c->numpy.empty(p.vertices.shape[:1], 'i')
A:matplotlib.bezier.p->make_path_regular(p)
A:matplotlib.bezier._path->Path(np.concatenate(vertices), np.concatenate(codes))
matplotlib.bezier.BezierSegment(self,control_points)
matplotlib.bezier.BezierSegment.__init__(self,control_points)
matplotlib.bezier.BezierSegment.point_at_t(self,t)
matplotlib.bezier.NonIntersectingPathException(ValueError)
matplotlib.bezier._de_casteljau1(beta,t)
matplotlib.bezier.check_if_parallel(dx1,dy1,dx2,dy2,tolerence=1e-05)
matplotlib.bezier.concatenate_paths(paths)
matplotlib.bezier.find_bezier_t_intersecting_with_closedpath(bezier_point_at_t,inside_closedpath,t0=0.0,t1=1.0,tolerence=0.01)
matplotlib.bezier.find_control_points(c1x,c1y,mmx,mmy,c2x,c2y)
matplotlib.bezier.find_r_to_boundary_of_closedpath(inside_closedpath,xy,cos_t,sin_t,rmin=0.0,rmax=1.0,tolerence=0.01)
matplotlib.bezier.get_cos_sin(x0,y0,x1,y1)
matplotlib.bezier.get_intersection(cx1,cy1,cos_t1,sin_t1,cx2,cy2,cos_t2,sin_t2)
matplotlib.bezier.get_normal_points(cx,cy,cos_t,sin_t,length)
matplotlib.bezier.get_parallels(bezier2,width)
matplotlib.bezier.inside_circle(cx,cy,r)
matplotlib.bezier.make_path_regular(p)
matplotlib.bezier.make_wedged_bezier2(bezier2,width,w1=1.0,wm=0.5,w2=0.0)
matplotlib.bezier.split_bezier_intersecting_with_closedpath(bezier,inside_closedpath,tolerence=0.01)
matplotlib.bezier.split_de_casteljau(beta,t)
matplotlib.bezier.split_path_inout(path,inside,tolerence=0.01,reorder_inout=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_constrained_layout.py----------------------------------------
A:matplotlib._constrained_layout._log->logging.getLogger(__name__)
A:matplotlib._constrained_layout.bbox->invTransFig(sup.get_window_extent(renderer=renderer))
A:matplotlib._constrained_layout.bboxn->child._legend_box.get_window_extent(renderer)
A:matplotlib._constrained_layout.gss->set([])
A:matplotlib._constrained_layout.gs->parents[0].get_subplotspec().get_gridspec()
A:matplotlib._constrained_layout.(nrows, ncols)->ax.get_subplotspec().get_gridspec().get_geometry()
A:matplotlib._constrained_layout.hassubplotspec->numpy.zeros(nrows * ncols, dtype=bool)
A:matplotlib._constrained_layout.ss0->fig.add_subplot(gs[nn]).get_subplotspec()
A:matplotlib._constrained_layout.ax->fig.add_subplot(gs[nn])
A:matplotlib._constrained_layout.pos->fig.add_subplot(gs[nn]).get_position(original=True)
A:matplotlib._constrained_layout.tightbbox->get_axall_tightbbox(ax, renderer)
A:matplotlib._constrained_layout.width_ratios->numpy.ones(ncols)
A:matplotlib._constrained_layout.height_ratios->numpy.ones(nrows)
A:matplotlib._constrained_layout.rownummin->numpy.zeros(len(axs), dtype=np.int8)
A:matplotlib._constrained_layout.rownummax->numpy.zeros(len(axs), dtype=np.int8)
A:matplotlib._constrained_layout.colnummin->numpy.zeros(len(axs), dtype=np.int8)
A:matplotlib._constrained_layout.colnummax->numpy.zeros(len(axs), dtype=np.int8)
A:matplotlib._constrained_layout.width->numpy.zeros(len(axs))
A:matplotlib._constrained_layout.height->numpy.zeros(len(axs))
A:matplotlib._constrained_layout.(rownummin[n], colnummin[n])->divmod(ss0.num1, ncols)
A:matplotlib._constrained_layout.(rownummax[n], colnummax[n])->divmod(ss0.num2, ncols)
A:matplotlib._constrained_layout.width[n]->numpy.sum(width_ratios[colnummin[n]:colnummax[n] + 1])
A:matplotlib._constrained_layout.height[n]->numpy.sum(height_ratios[rownummin[n]:rownummax[n] + 1])
A:matplotlib._constrained_layout.newpos->fig.add_subplot(gs[nn])._poslayoutbox.get_rect()
A:matplotlib._constrained_layout.(rowNum0min, colNum0min)->divmod(ss0.num1, ncols)
A:matplotlib._constrained_layout.(rowNum0max, colNum0max)->divmod(ss0.num2, ncols)
A:matplotlib._constrained_layout.(rowNumCmin, colNumCmin)->divmod(ssc.num1, ncols)
A:matplotlib._constrained_layout.(rowNumCmax, colNumCmax)->divmod(ssc.num2, ncols)
A:matplotlib._constrained_layout.lb->matplotlib._layoutbox.LayoutBox(parent=gslb.parent, name=gslb.parent.name + '.cbar', artist=cax)
A:matplotlib._constrained_layout.lbpos->matplotlib._layoutbox.LayoutBox(parent=lb, name=lb.name + '.pos', tightheight=True, pos=True, subplot=False, artist=cax)
A:matplotlib._constrained_layout.subspec->fig.add_subplot(gs[nn]).get_subplotspec()
A:matplotlib._constrained_layout.(rownum1, colnum1)->divmod(subspec.num1, ncols)
matplotlib._constrained_layout.arange_subplotspecs(gs,hspace=0,wspace=0)
matplotlib._constrained_layout.do_constrained_layout(fig,renderer,h_pad,w_pad,hspace=None,wspace=None)
matplotlib._constrained_layout.get_axall_tightbbox(ax,renderer)
matplotlib._constrained_layout.in_same_column(colnum0min,colnum0max,colnumCmin,colnumCmax)
matplotlib._constrained_layout.in_same_row(rownum0min,rownum0max,rownumCmin,rownumCmax)
matplotlib._constrained_layout.layoutcolorbargridspec(parents,cax,shrink,aspect,location,pad=0.05)
matplotlib._constrained_layout.layoutcolorbarsingle(ax,cax,shrink,aspect,location,pad=0.05)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/legend_handler.py----------------------------------------
A:matplotlib.legend_handler.(xdescent, ydescent, width, height)->self.adjust_drawing_area(legend, orig_handle, handlebox.xdescent, handlebox.ydescent, handlebox.width, handlebox.height, fontsize)
A:matplotlib.legend_handler.artists->self.create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, handlebox.get_transform())
A:matplotlib.legend_handler.numpoints->self.get_numpoints(legend)
A:matplotlib.legend_handler.xdata->numpy.linspace(-xdescent, -xdescent + width, 2)
A:matplotlib.legend_handler.(xdata, xdata_marker)->self.get_xdata(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.legline->Line2D(xdata, ydata)
A:matplotlib.legend_handler.legline_marker->Line2D(xdata_marker, ydata_marker)
A:matplotlib.legend_handler.p->Rectangle(xy=(-xdescent, -ydescent), width=width, height=height)
A:matplotlib.legend_handler.handle_sizes->orig_handle.get_sizes()
A:matplotlib.legend_handler.ydata->self.get_ydata(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.sizes->self.get_sizes(legend, orig_handle, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.xdata_marker->numpy.asarray(xdata_marker)
A:matplotlib.legend_handler.ydata_marker->numpy.asarray(ydata[:len(xdata_marker)])
A:matplotlib.legend_handler.(xerr_size, yerr_size)->self.get_err_size(legend, xdescent, ydescent, width, height, fontsize)
A:matplotlib.legend_handler.coll->matplotlib.collections.LineCollection(verts)
A:matplotlib.legend_handler.capline_left->Line2D(xdata_marker, ydata_marker - yerr_size)
A:matplotlib.legend_handler.capline_right->Line2D(xdata_marker, ydata_marker + yerr_size)
A:matplotlib.legend_handler.leg_markerline->Line2D(xdata_marker, ydata[:len(xdata_marker)])
A:matplotlib.legend_handler.l->Line2D([thisx, thisx], [bottom, thisy])
A:matplotlib.legend_handler.leg_baseline->Line2D([np.min(xdata), np.max(xdata)], [bottom, bottom])
A:matplotlib.legend_handler.handler_map->legend.get_legend_handler_map()
A:matplotlib.legend_handler.ndivide->len(orig_handle)
A:matplotlib.legend_handler.xds_cycle->cycle(xdescent - (width + pad) * np.arange(ndivide))
A:matplotlib.legend_handler.handler->legend.get_legend_handler(handler_map, handle1)
A:matplotlib.legend_handler._a_list->legend.get_legend_handler(handler_map, handle1).create_artists(legend, handle1, next(xds_cycle), ydescent, width, height, fontsize, trans)
A:matplotlib.legend_handler.colors->matplotlib.colors.to_rgba_array(colors)
A:matplotlib.legend_handler.edgecolor->getattr(orig_handle, '_original_edgecolor', orig_handle.get_edgecolor())
A:matplotlib.legend_handler.facecolor->getattr(orig_handle, '_original_facecolor', orig_handle.get_facecolor())
matplotlib.legend_handler.HandlerBase(self,xpad=0.0,ypad=0.0,update_func=None)
matplotlib.legend_handler.HandlerBase.__init__(self,xpad=0.0,ypad=0.0,update_func=None)
matplotlib.legend_handler.HandlerBase._default_update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerBase._update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerBase.adjust_drawing_area(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerBase.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerBase.legend_artist(self,legend,orig_handle,fontsize,handlebox)
matplotlib.legend_handler.HandlerBase.update_prop(self,legend_handle,orig_handle,legend)
matplotlib.legend_handler.HandlerCircleCollection(HandlerRegularPolyCollection)
matplotlib.legend_handler.HandlerCircleCollection.create_collection(self,orig_handle,sizes,offsets,transOffset)
matplotlib.legend_handler.HandlerErrorbar(self,xerr_size=0.5,yerr_size=None,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerErrorbar.__init__(self,xerr_size=0.5,yerr_size=None,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerErrorbar.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerErrorbar.get_err_size(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerLine2D(self,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerLine2D.__init__(self,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerLine2D.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerLineCollection(HandlerLine2D)
matplotlib.legend_handler.HandlerLineCollection._default_update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerLineCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerLineCollection.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerNpoints(self,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerNpoints.__init__(self,marker_pad=0.3,numpoints=None,**kw)
matplotlib.legend_handler.HandlerNpoints.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerNpoints.get_xdata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerNpointsYoffsets(self,numpoints=None,yoffsets=None,**kw)
matplotlib.legend_handler.HandlerNpointsYoffsets.__init__(self,numpoints=None,yoffsets=None,**kw)
matplotlib.legend_handler.HandlerNpointsYoffsets.get_ydata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerPatch(self,patch_func=None,**kw)
matplotlib.legend_handler.HandlerPatch.__init__(self,patch_func=None,**kw)
matplotlib.legend_handler.HandlerPatch._create_patch(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerPatch.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerPathCollection(HandlerRegularPolyCollection)
matplotlib.legend_handler.HandlerPathCollection.create_collection(self,orig_handle,sizes,offsets,transOffset)
matplotlib.legend_handler.HandlerPolyCollection(HandlerBase)
matplotlib.legend_handler.HandlerPolyCollection._update_prop(self,legend_handle,orig_handle)
matplotlib.legend_handler.HandlerPolyCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerRegularPolyCollection(self,yoffsets=None,sizes=None,**kw)
matplotlib.legend_handler.HandlerRegularPolyCollection.__init__(self,yoffsets=None,sizes=None,**kw)
matplotlib.legend_handler.HandlerRegularPolyCollection.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerRegularPolyCollection.create_collection(self,orig_handle,sizes,offsets,transOffset)
matplotlib.legend_handler.HandlerRegularPolyCollection.get_numpoints(self,legend)
matplotlib.legend_handler.HandlerRegularPolyCollection.get_sizes(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerRegularPolyCollection.update_prop(self,legend_handle,orig_handle,legend)
matplotlib.legend_handler.HandlerStem(self,marker_pad=0.3,numpoints=None,bottom=None,yoffsets=None,**kw)
matplotlib.legend_handler.HandlerStem.__init__(self,marker_pad=0.3,numpoints=None,bottom=None,yoffsets=None,**kw)
matplotlib.legend_handler.HandlerStem.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.HandlerStem.get_ydata(self,legend,xdescent,ydescent,width,height,fontsize)
matplotlib.legend_handler.HandlerTuple(self,ndivide=1,pad=None,**kwargs)
matplotlib.legend_handler.HandlerTuple.__init__(self,ndivide=1,pad=None,**kwargs)
matplotlib.legend_handler.HandlerTuple.create_artists(self,legend,orig_handle,xdescent,ydescent,width,height,fontsize,trans)
matplotlib.legend_handler.update_from_first_child(tgt,src)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/artist.py----------------------------------------
A:matplotlib.artist._XYPair->namedtuple('_XYPair', 'x y')
A:matplotlib.artist._prop_order->dict(color=-1)
A:matplotlib.artist.self._sticky_edges->_XYPair([], [])
A:matplotlib.artist.d->dict()
A:matplotlib.artist.ax->getattr(a, 'axes', None)
A:matplotlib.artist.self._transform->self._transform._as_mpl_transform(self.axes)
A:matplotlib.artist.(hascursor, info)->self.contains(event)
A:matplotlib.artist.picker->self.get_picker()
A:matplotlib.artist.(inside, prop)->self.contains(mouseevent)
A:matplotlib.artist.self.clipbox->TransformedBbox(Bbox.unit(), path.get_transform())
A:matplotlib.artist.self._clippath->TransformedPath(path, transform)
A:matplotlib.artist.k->k.lower().lower()
A:matplotlib.artist.func->getattr(obj, 'get_' + property)
A:matplotlib.artist.self._label->six.text_type(s)
A:matplotlib.artist.props->OrderedDict(sorted(kwargs.items(), reverse=True, key=lambda x: (self._prop_order.get(x[0], 0), x[0])))
A:matplotlib.artist.artists->sum([c.findobj(matchfunc) for c in self.get_children()], [])
A:matplotlib.artist.val->func()
A:matplotlib.artist.o->type(o)
A:matplotlib.artist.self.aliasd->self.get_aliases()
A:matplotlib.artist._get_valid_values_regex->re.compile('\\n\\s*(?:\\.\\.\\s+)?ACCEPTS:\\s*((?:.|\\n)*?)(?:$|(?:\\n\\n))')
A:matplotlib.artist.match->self._get_valid_values_regex.search(docstring)
A:matplotlib.artist.nargs->len(inspect.getfullargspec(func)[0])
A:matplotlib.artist.aliases->''.join([' or %s' % x for x in sorted(self.aliasd[s])])
A:matplotlib.artist.accepts->self.get_valid_values(prop)
A:matplotlib.artist.attrs->self._get_setters_and_targets()
A:matplotlib.artist.name->self.aliased_name(name)
A:matplotlib.artist.col0_len->max((len(n) for n in names))
A:matplotlib.artist.col1_len->max((len(a) for a in accepts))
A:matplotlib.artist.s->s.replace('\n', ' ').replace('\n', ' ')
A:matplotlib.artist.insp->ArtistInspector(objs[0])
A:matplotlib.artist.ret->ArtistInspector(objs[0]).pprint_getters()
A:matplotlib.artist.objs->list(cbook.flatten(obj))
A:matplotlib.artist.printArgs['file']->kwargs.pop('file')
A:matplotlib.artist.funcvals->OrderedDict()
matplotlib.artist.Artist(self)
matplotlib.artist.Artist.__getstate__(self)
matplotlib.artist.Artist.__init__(self)
matplotlib.artist.Artist._set_gc_clip(self,gc)
matplotlib.artist.Artist.add_callback(self,func)
matplotlib.artist.Artist.axes(self)
matplotlib.artist.Artist.axes(self,new_axes)
matplotlib.artist.Artist.contains(self,mouseevent)
matplotlib.artist.Artist.convert_xunits(self,x)
matplotlib.artist.Artist.convert_yunits(self,y)
matplotlib.artist.Artist.draw(self,renderer,*args,**kwargs)
matplotlib.artist.Artist.findobj(self,match=None,include_self=True)
matplotlib.artist.Artist.format_cursor_data(self,data)
matplotlib.artist.Artist.get_agg_filter(self)
matplotlib.artist.Artist.get_alpha(self)
matplotlib.artist.Artist.get_animated(self)
matplotlib.artist.Artist.get_children(self)
matplotlib.artist.Artist.get_clip_box(self)
matplotlib.artist.Artist.get_clip_on(self)
matplotlib.artist.Artist.get_clip_path(self)
matplotlib.artist.Artist.get_contains(self)
matplotlib.artist.Artist.get_cursor_data(self,event)
matplotlib.artist.Artist.get_figure(self)
matplotlib.artist.Artist.get_gid(self)
matplotlib.artist.Artist.get_label(self)
matplotlib.artist.Artist.get_path_effects(self)
matplotlib.artist.Artist.get_picker(self)
matplotlib.artist.Artist.get_rasterized(self)
matplotlib.artist.Artist.get_sketch_params(self)
matplotlib.artist.Artist.get_snap(self)
matplotlib.artist.Artist.get_transform(self)
matplotlib.artist.Artist.get_transformed_clip_path_and_affine(self)
matplotlib.artist.Artist.get_url(self)
matplotlib.artist.Artist.get_visible(self)
matplotlib.artist.Artist.get_window_extent(self,renderer)
matplotlib.artist.Artist.get_zorder(self)
matplotlib.artist.Artist.have_units(self)
matplotlib.artist.Artist.hitlist(self,event)
matplotlib.artist.Artist.is_figure_set(self)
matplotlib.artist.Artist.is_transform_set(self)
matplotlib.artist.Artist.mouseover(self)
matplotlib.artist.Artist.mouseover(self,val)
matplotlib.artist.Artist.pchanged(self)
matplotlib.artist.Artist.pick(self,mouseevent)
matplotlib.artist.Artist.pickable(self)
matplotlib.artist.Artist.properties(self)
matplotlib.artist.Artist.remove(self)
matplotlib.artist.Artist.remove_callback(self,oid)
matplotlib.artist.Artist.set(self,**kwargs)
matplotlib.artist.Artist.set_agg_filter(self,filter_func)
matplotlib.artist.Artist.set_alpha(self,alpha)
matplotlib.artist.Artist.set_animated(self,b)
matplotlib.artist.Artist.set_clip_box(self,clipbox)
matplotlib.artist.Artist.set_clip_on(self,b)
matplotlib.artist.Artist.set_clip_path(self,path,transform=None)
matplotlib.artist.Artist.set_contains(self,picker)
matplotlib.artist.Artist.set_figure(self,fig)
matplotlib.artist.Artist.set_gid(self,gid)
matplotlib.artist.Artist.set_label(self,s)
matplotlib.artist.Artist.set_path_effects(self,path_effects)
matplotlib.artist.Artist.set_picker(self,picker)
matplotlib.artist.Artist.set_rasterized(self,rasterized)
matplotlib.artist.Artist.set_sketch_params(self,scale=None,length=None,randomness=None)
matplotlib.artist.Artist.set_snap(self,snap)
matplotlib.artist.Artist.set_transform(self,t)
matplotlib.artist.Artist.set_url(self,url)
matplotlib.artist.Artist.set_visible(self,b)
matplotlib.artist.Artist.set_zorder(self,level)
matplotlib.artist.Artist.stale(self)
matplotlib.artist.Artist.stale(self,val)
matplotlib.artist.Artist.sticky_edges(self)
matplotlib.artist.Artist.update(self,props)
matplotlib.artist.Artist.update_from(self,other)
matplotlib.artist.ArtistInspector(self,o)
matplotlib.artist.ArtistInspector.__init__(self,o)
matplotlib.artist.ArtistInspector._get_setters_and_targets(self)
matplotlib.artist.ArtistInspector.aliased_name(self,s)
matplotlib.artist.ArtistInspector.aliased_name_rest(self,s,target)
matplotlib.artist.ArtistInspector.get_aliases(self)
matplotlib.artist.ArtistInspector.get_setters(self)
matplotlib.artist.ArtistInspector.get_valid_values(self,attr)
matplotlib.artist.ArtistInspector.is_alias(self,o)
matplotlib.artist.ArtistInspector.pprint_getters(self)
matplotlib.artist.ArtistInspector.pprint_setters(self,prop=None,leadingspace=2)
matplotlib.artist.ArtistInspector.pprint_setters_rest(self,prop=None,leadingspace=4)
matplotlib.artist.ArtistInspector.properties(self)
matplotlib.artist._stale_axes_callback(self,val)
matplotlib.artist.allow_rasterization(draw)
matplotlib.artist.getp(obj,property=None)
matplotlib.artist.kwdoc(a)
matplotlib.artist.setp(obj,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_version.py----------------------------------------
matplotlib._version.get_versions()
matplotlib.get_versions()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/patches.py----------------------------------------
A:matplotlib.patches.self._hatch_color->colors.to_rgba(mpl.rcParams['hatch.color'])
A:matplotlib.patches.self._combined_transform->transforms.IdentityTransform()
A:matplotlib.patches.trans->self.get_transform()
A:matplotlib.patches.path->Path([p for (c, p) in patch_path], [c for (c, p) in patch_path])
A:matplotlib.patches.polygons->Path([p for (c, p) in patch_path], [c for (c, p) in patch_path]).to_polygons(trans)
A:matplotlib.patches._radius->self.get_linewidth()
A:matplotlib.patches.radius->property(get_radius, set_radius)
A:matplotlib.patches.inside->box_path.transformed(box_path_transform).contains_point((np.cos(theta1_rad), np.sin(theta1_rad)))
A:matplotlib.patches.self._edgecolor->colors.to_rgba(color, self._alpha)
A:matplotlib.patches.self._facecolor->colors.to_rgba(color, alpha)
A:matplotlib.patches.self._linewidth->float(w)
A:matplotlib.patches.(self._dashoffset, self._dashes)->mlines._scale_dashes(offset, ls, self._linewidth)
A:matplotlib.patches.(offset, ls)self._us_dashes->mlines._get_dash_pattern(ls)
A:matplotlib.patches.self._fill->bool(b)
A:matplotlib.patches.fill->kwargs.setdefault('fill', False)
A:matplotlib.patches.s->s.lower().lower()
A:matplotlib.patches.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.patches.transform->self.get_transform()
A:matplotlib.patches.tpath->self.get_transform().transform_path_non_affine(path)
A:matplotlib.patches.affine->transforms.IdentityTransform()
A:matplotlib.patches.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.patches.patchdoc->artist.kwdoc(Patch)
A:matplotlib.patches.self._shadow_transform->transforms.Affine2D()
A:matplotlib.patches.(r, g, b, a)->colors.to_rgba(self.patch.get_facecolor())
A:matplotlib.patches.ox->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(self._ox)
A:matplotlib.patches.oy->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(self._oy)
A:matplotlib.patches.self.angle->float(angle)
A:matplotlib.patches.self._rect_transform->transforms.BboxTransformTo(bbox)
A:matplotlib.patches.(x0, y0, x1, y1)->self._convert_units()
A:matplotlib.patches.bbox->artist.get_window_extent(renderer)
A:matplotlib.patches.rot_trans->transforms.Affine2D()
A:matplotlib.patches.x0->self.convert_xunits(self._x0)
A:matplotlib.patches.y0->self.convert_yunits(self._y0)
A:matplotlib.patches.x1->self.convert_xunits(self._x1)
A:matplotlib.patches.y1->self.convert_yunits(self._y1)
A:matplotlib.patches.xy->property(get_xy, set_xy, None, 'Set/get the vertices of the polygon.  This property is\n           provided for backward compatibility with matplotlib 0.91.x\n           only.  New code should use\n           :meth:`~matplotlib.patches.Polygon.get_xy` and\n           :meth:`~matplotlib.patches.Polygon.set_xy` instead.')
A:matplotlib.patches.self._path->path.Path.arc(last_theta, theta, 8)
A:matplotlib.patches.self._poly_transform->transforms.Affine2D()
A:matplotlib.patches.orientation->property(_get_orientation, _set_orientation)
A:matplotlib.patches.numvertices->property(_get_numvertices, _set_numvertices)
A:matplotlib.patches.self._closed->bool(closed)
A:matplotlib.patches.self._patch_transform->transforms.Affine2D().scale(width * 0.5, height * 0.5).rotate_deg(self.angle).translate(*center)
A:matplotlib.patches.arc->path.Path.arc(theta1, theta2)
A:matplotlib.patches.v->numpy.vstack([arc.vertices, [(0, 0), arc.vertices[0, :], (0, 0)]])
A:matplotlib.patches.c->numpy.concatenate([codesB, [Path.LINETO, Path.CLOSEPOLY]])
A:matplotlib.patches._path->self.get_connectionstyle()(posA, posB, patchA=self.patchA, patchB=self.patchB, shrinkA=self.shrinkA * dpi_cor, shrinkB=self.shrinkB * dpi_cor)
A:matplotlib.patches.L->numpy.hypot(dx, dy)
A:matplotlib.patches.trans1->transforms.Affine2D().scale(L, width)
A:matplotlib.patches.trans2->transforms.Affine2D.from_values(cx, sx, -sx, cx, 0.0, 0.0)
A:matplotlib.patches.trans3->transforms.Affine2D().translate(x, y)
A:matplotlib.patches.distance->numpy.hypot(dx, dy)
A:matplotlib.patches.left_half_arrow->numpy.array([[0.0, 0.0], [-hl, -hw / 2.0], [-hl * (1 - hs), -lw / 2.0], [-length, -lw / 2.0], [-length, 0]])
A:matplotlib.patches.coords->numpy.concatenate([left_half_arrow[:-1], right_half_arrow[-2::-1]])
A:matplotlib.patches.(xb1, yb1, xb2, yb2)->self.getpoints(x1, y1, x2, y2, k1)
A:matplotlib.patches.theta->numpy.rad2deg(theta)
A:matplotlib.patches.r->Rectangle(xy=(l, b), width=w, height=h, edgecolor=color, fill=False)
A:matplotlib.patches.(xc1, yc1, xc2, yc2)->self.getpoints(x1, y1, xm, ym, k1)
A:matplotlib.patches.(xd1, yd1, xd2, yd2)->self.getpoints(x1, y1, xm, ym, k2)
A:matplotlib.patches.xs->self.convert_xunits([xb1, xb2, xc2, xd2, x1, xd1, xc1, xb1])
A:matplotlib.patches.ys->self.convert_yunits([yb1, yb2, yc2, yd2, y1, yd1, yc1, yb1])
A:matplotlib.patches.(x1, y1, x2, y2, k)->map(float, (x1, y1, x2, y2, k))
A:matplotlib.patches.width->self.convert_xunits(self.width)
A:matplotlib.patches.height->self.convert_yunits(self.height)
A:matplotlib.patches.x->float(self.convert_xunits(x))
A:matplotlib.patches.y->float(self.convert_yunits(y))
A:matplotlib.patches.theta1->math.atan2(y2 - y1, x2 - x1)
A:matplotlib.patches.theta2->theta_stretch(self.theta2, width / height)
A:matplotlib.patches.(width, height)->self.get_transform().transform_point((width, height))
A:matplotlib.patches.sqrt_discrim->numpy.sqrt(discrim)
A:matplotlib.patches.box_path->box_path.transformed(box_path_transform).transformed(box_path_transform)
A:matplotlib.patches.thetas->set()
A:matplotlib.patches.theta1_rad->numpy.deg2rad(theta1)
A:matplotlib.patches.props->props.copy().copy()
A:matplotlib.patches.pad->PathEffectRenderer(self.get_path_effects(), renderer).points_to_pixels(pad)
A:matplotlib.patches.(args, varargs, varkw, defaults)->inspect.getargspec(cls.__init__)
A:matplotlib.patches.(args, varargs, varkw, defaults, kwonlyargs, kwonlydefs, annotations)->inspect.getfullargspec(cls.__init__)
A:matplotlib.patches.argstr->','.join(['%s=%s' % (an, av) for (an, av) in args])
A:matplotlib.patches._list->stylename.replace(' ', '').split(',')
A:matplotlib.patches._name->_list[0].lower()
A:matplotlib.patches.p->Path(vertices, codes)
A:matplotlib.patches.saw_vertices->numpy.concatenate([np.array(saw_vertices), [saw_vertices[0]]], axis=0)
A:matplotlib.patches.self._bbox_transmuter->BoxStyle(boxstyle, **kw)
A:matplotlib.patches.xy_event->ConnectionStyle._Base.SimpleEvent(xy_display)
A:matplotlib.patches.(left, right)->split_path_inout(path, insideB)
A:matplotlib.patches.insideA->inside_circle(x, y, shrinkA)
A:matplotlib.patches.insideB->inside_circle(x, y, shrinkB)
A:matplotlib.patches.clipped_path->self._clip(path, patchA, patchB)
A:matplotlib.patches.shrunk_path->self._shrink(clipped_path, shrinkA, shrinkB)
A:matplotlib.patches.cosA->math.cos(math.radians(self.angleA))
A:matplotlib.patches.sinA->math.sin(math.radians(self.angleA))
A:matplotlib.patches.cosB->math.cos(math.radians(self.angleB))
A:matplotlib.patches.sinB->math.sin(math.radians(self.angleB))
A:matplotlib.patches.(cx, cy)->get_intersection(x1, y1, cosA, sinA, x2, y2, cosB, sinB)
A:matplotlib.patches.theta0->numpy.deg2rad(self.angle)
A:matplotlib.patches.arm->max(armA, armB)
A:matplotlib.patches.segments->list(path.iter_segments())
A:matplotlib.patches.path_shrunk->Path(vertices, codes)
A:matplotlib.patches.(path_mutated, fillable)->self.transmute(path_shrunk, linewidth, mutation_size)
A:matplotlib.patches.cp_distance->numpy.hypot(dx, dy)
A:matplotlib.patches.head_dist->math.sqrt(head_length ** 2 + head_width ** 2)
A:matplotlib.patches.(verticesA, codesA, ddxA, ddyA)->self._get_arrow_wedge(x1, y1, x0, y0, head_dist, cos_t, sin_t, linewidth)
A:matplotlib.patches.(verticesB, codesB, ddxB, ddyB)->self._get_arrow_wedge(x2, y2, x3, y3, head_dist, cos_t, sin_t, linewidth)
A:matplotlib.patches.(x1, y1, x2, y2)->get_normal_points(x0, y0, cos_t, sin_t, width)
A:matplotlib.patches.(cos_t, sin_t)->get_cos_sin(x1, y1, x0, y0)
A:matplotlib.patches.(verticesA, codesA)->self._get_bracket(x0, y0, cos_t, sin_t, self.widthA * scaleA, self.lengthA * scaleA)
A:matplotlib.patches.(verticesB, codesB)->self._get_bracket(x0, y0, cos_t, sin_t, self.widthB * scaleB, self.lengthB * scaleB)
A:matplotlib.patches.vertices->numpy.concatenate(vertices_list)
A:matplotlib.patches.codes->numpy.concatenate(codes_list)
A:matplotlib.patches.(x0, y0, x1, y1, x2, y2)->self.ensure_quadratic_bezier(path)
A:matplotlib.patches.in_f->inside_circle(x0, y0, tail_width * 0.3)
A:matplotlib.patches.(arrow_out, arrow_in)->split_bezier_intersecting_with_closedpath(arrow_path, in_f, tolerence=0.01)
A:matplotlib.patches.(x0, y0)->_point_along_a_line(x2, y2, x1, y1, head_length)
A:matplotlib.patches.(head_left, head_right)->make_wedged_bezier2(arrow_in, head_width / 2.0, wm=0.5)
A:matplotlib.patches.(tail_left, tail_right)->make_wedged_bezier2(path_tail, tail_width * 0.5, w1=1.0, wm=0.6, w2=0.3)
A:matplotlib.patches.(path_out, path_in)->split_bezier_intersecting_with_closedpath(arrow_path, in_f, tolerence=0.01)
A:matplotlib.patches.(head_l, head_r)->make_wedged_bezier2(path_head, head_width / 2.0, wm=0.6)
A:matplotlib.patches.(path_in, path_out)->split_bezier_intersecting_with_closedpath(arrow_path, in_f, tolerence=0.01)
A:matplotlib.patches.(b_plus, b_minus)->make_wedged_bezier2(arrow_path, self.tail_width * mutation_size / 2.0, wm=self.shrink_factor)
A:matplotlib.patches.self._connector->ConnectionStyle(connectionstyle, **kw)
A:matplotlib.patches.self._arrow_transmuter->ArrowStyle(arrowstyle, **kw)
A:matplotlib.patches.(_path, fillable)->self.get_arrowstyle()(_path, self.get_mutation_scale() * dpi_cor, self.get_linewidth() * dpi_cor, self.get_mutation_aspect())
A:matplotlib.patches.dpi_cor->self.get_dpi_cor()
A:matplotlib.patches.posA->self._get_xy(x, y, self.coords1, self.axesA)
A:matplotlib.patches.posB->self._get_xy(x, y, self.coords2, self.axesB)
A:matplotlib.patches.(path, fillable)->self.get_path_in_displaycoord()
A:matplotlib.patches.(dx, dy)->self._get_xy(dx, dy, self.xycoords)
A:matplotlib.patches.dpi->self.figure.get_dpi()
A:matplotlib.patches.b->self.get_annotation_clip()
A:matplotlib.patches.xy_pixel->self._get_xy(x, y, self.coords2, self.axesB)
matplotlib.patches.Arc(self,xy,width,height,angle=0.0,theta1=0.0,theta2=360.0,**kwargs)
matplotlib.patches.Arc.__init__(self,xy,width,height,angle=0.0,theta1=0.0,theta2=360.0,**kwargs)
matplotlib.patches.Arc.__str__(self)
matplotlib.patches.Arc.draw(self,renderer)
matplotlib.patches.Arrow(self,x,y,dx,dy,width=1.0,**kwargs)
matplotlib.patches.Arrow.__init__(self,x,y,dx,dy,width=1.0,**kwargs)
matplotlib.patches.Arrow.__str__(self)
matplotlib.patches.Arrow.get_patch_transform(self)
matplotlib.patches.Arrow.get_path(self)
matplotlib.patches.ArrowStyle(_Style)
matplotlib.patches.ArrowStyle.BarAB(self,widthA=1.0,angleA=None,widthB=1.0,angleB=None)
matplotlib.patches.ArrowStyle.BarAB.__init__(self,widthA=1.0,angleA=None,widthB=1.0,angleB=None)
matplotlib.patches.ArrowStyle.BracketA(self,widthA=1.0,lengthA=0.2,angleA=None)
matplotlib.patches.ArrowStyle.BracketA.__init__(self,widthA=1.0,lengthA=0.2,angleA=None)
matplotlib.patches.ArrowStyle.BracketAB(self,widthA=1.0,lengthA=0.2,angleA=None,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.BracketAB.__init__(self,widthA=1.0,lengthA=0.2,angleA=None,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.BracketB(self,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.BracketB.__init__(self,widthB=1.0,lengthB=0.2,angleB=None)
matplotlib.patches.ArrowStyle.Curve(self)
matplotlib.patches.ArrowStyle.Curve.__init__(self)
matplotlib.patches.ArrowStyle.CurveA(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveA.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveAB(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveAB.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveB(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveB.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledA(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledA.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledAB(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledAB.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledB(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.CurveFilledB.__init__(self,head_length=0.4,head_width=0.2)
matplotlib.patches.ArrowStyle.Fancy(self,head_length=0.4,head_width=0.4,tail_width=0.4)
matplotlib.patches.ArrowStyle.Fancy.__init__(self,head_length=0.4,head_width=0.4,tail_width=0.4)
matplotlib.patches.ArrowStyle.Fancy.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle.Simple(self,head_length=0.5,head_width=0.5,tail_width=0.2)
matplotlib.patches.ArrowStyle.Simple.__init__(self,head_length=0.5,head_width=0.5,tail_width=0.2)
matplotlib.patches.ArrowStyle.Simple.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle.Wedge(self,tail_width=0.3,shrink_factor=0.5)
matplotlib.patches.ArrowStyle.Wedge.__init__(self,tail_width=0.3,shrink_factor=0.5)
matplotlib.patches.ArrowStyle.Wedge.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle._Base(self,path,mutation_size,linewidth,aspect_ratio=1.0)
matplotlib.patches.ArrowStyle._Base.__call__(self,path,mutation_size,linewidth,aspect_ratio=1.0)
matplotlib.patches.ArrowStyle._Base.__reduce__(self)
matplotlib.patches.ArrowStyle._Base.ensure_quadratic_bezier(path)
matplotlib.patches.ArrowStyle._Base.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle._Bracket(self,bracketA=None,bracketB=None,widthA=1.0,widthB=1.0,lengthA=0.2,lengthB=0.2,angleA=None,angleB=None,scaleA=None,scaleB=None)
matplotlib.patches.ArrowStyle._Bracket.__init__(self,bracketA=None,bracketB=None,widthA=1.0,widthB=1.0,lengthA=0.2,lengthB=0.2,angleA=None,angleB=None,scaleA=None,scaleB=None)
matplotlib.patches.ArrowStyle._Bracket._get_bracket(self,x0,y0,cos_t,sin_t,width,length)
matplotlib.patches.ArrowStyle._Bracket.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.ArrowStyle._Curve(self,beginarrow=None,endarrow=None,fillbegin=False,fillend=False,head_length=0.2,head_width=0.1)
matplotlib.patches.ArrowStyle._Curve.__init__(self,beginarrow=None,endarrow=None,fillbegin=False,fillend=False,head_length=0.2,head_width=0.1)
matplotlib.patches.ArrowStyle._Curve._get_arrow_wedge(self,x0,y0,x1,y1,head_dist,cos_t,sin_t,linewidth)
matplotlib.patches.ArrowStyle._Curve.transmute(self,path,mutation_size,linewidth)
matplotlib.patches.BoxStyle(_Style)
matplotlib.patches.BoxStyle.Circle(self,pad=0.3)
matplotlib.patches.BoxStyle.Circle.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.Circle.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.DArrow(self,pad=0.3)
matplotlib.patches.BoxStyle.DArrow.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.DArrow.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.LArrow(self,pad=0.3)
matplotlib.patches.BoxStyle.LArrow.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.LArrow.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.RArrow(self,pad=0.3)
matplotlib.patches.BoxStyle.RArrow.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.RArrow.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Round(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round.__init__(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Round4(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round4.__init__(self,pad=0.3,rounding_size=None)
matplotlib.patches.BoxStyle.Round4.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Roundtooth(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Roundtooth.__init__(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Roundtooth.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Sawtooth(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Sawtooth.__init__(self,pad=0.3,tooth_size=None)
matplotlib.patches.BoxStyle.Sawtooth._get_sawtooth_vertices(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Sawtooth.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle.Square(self,pad=0.3)
matplotlib.patches.BoxStyle.Square.__init__(self,pad=0.3)
matplotlib.patches.BoxStyle.Square.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.BoxStyle._Base(self)
matplotlib.patches.BoxStyle._Base.__init__(self)
matplotlib.patches.BoxStyle._Base.__reduce__(self)
matplotlib.patches.BoxStyle._Base.transmute(self,x0,y0,width,height,mutation_size)
matplotlib.patches.Circle(self,xy,radius=5,**kwargs)
matplotlib.patches.Circle.__init__(self,xy,radius=5,**kwargs)
matplotlib.patches.Circle.__str__(self)
matplotlib.patches.Circle.get_radius(self)
matplotlib.patches.Circle.set_radius(self,radius)
matplotlib.patches.CirclePolygon(self,xy,radius=5,resolution=20,**kwargs)
matplotlib.patches.CirclePolygon.__init__(self,xy,radius=5,resolution=20,**kwargs)
matplotlib.patches.CirclePolygon.__str__(self)
matplotlib.patches.ConnectionPatch(self,xyA,xyB,coordsA,coordsB=None,axesA=None,axesB=None,arrowstyle='-',arrow_transmuter=None,connectionstyle='arc3',connector=None,patchA=None,patchB=None,shrinkA=0.0,shrinkB=0.0,mutation_scale=10.0,mutation_aspect=None,clip_on=False,dpi_cor=1.0,**kwargs)
matplotlib.patches.ConnectionPatch.__init__(self,xyA,xyB,coordsA,coordsB=None,axesA=None,axesB=None,arrowstyle='-',arrow_transmuter=None,connectionstyle='arc3',connector=None,patchA=None,patchB=None,shrinkA=0.0,shrinkB=0.0,mutation_scale=10.0,mutation_aspect=None,clip_on=False,dpi_cor=1.0,**kwargs)
matplotlib.patches.ConnectionPatch.__str__(self)
matplotlib.patches.ConnectionPatch._check_xy(self,renderer)
matplotlib.patches.ConnectionPatch._get_xy(self,x,y,s,axes=None)
matplotlib.patches.ConnectionPatch.draw(self,renderer)
matplotlib.patches.ConnectionPatch.get_annotation_clip(self)
matplotlib.patches.ConnectionPatch.get_path_in_displaycoord(self)
matplotlib.patches.ConnectionPatch.set_annotation_clip(self,b)
matplotlib.patches.ConnectionStyle(_Style)
matplotlib.patches.ConnectionStyle.Angle(self,angleA=90,angleB=0,rad=0.0)
matplotlib.patches.ConnectionStyle.Angle.__init__(self,angleA=90,angleB=0,rad=0.0)
matplotlib.patches.ConnectionStyle.Angle.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Angle3(self,angleA=90,angleB=0)
matplotlib.patches.ConnectionStyle.Angle3.__init__(self,angleA=90,angleB=0)
matplotlib.patches.ConnectionStyle.Angle3.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Arc(self,angleA=0,angleB=0,armA=None,armB=None,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc.__init__(self,angleA=0,angleB=0,armA=None,armB=None,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Arc3(self,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc3.__init__(self,rad=0.0)
matplotlib.patches.ConnectionStyle.Arc3.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle.Bar(self,armA=0.0,armB=0.0,fraction=0.3,angle=None)
matplotlib.patches.ConnectionStyle.Bar.__init__(self,armA=0.0,armB=0.0,fraction=0.3,angle=None)
matplotlib.patches.ConnectionStyle.Bar.connect(self,posA,posB)
matplotlib.patches.ConnectionStyle._Base(self,posA,posB,shrinkA=2.0,shrinkB=2.0,patchA=None,patchB=None)
matplotlib.patches.ConnectionStyle._Base.SimpleEvent(self,xy)
matplotlib.patches.ConnectionStyle._Base.SimpleEvent.__init__(self,xy)
matplotlib.patches.ConnectionStyle._Base.__call__(self,posA,posB,shrinkA=2.0,shrinkB=2.0,patchA=None,patchB=None)
matplotlib.patches.ConnectionStyle._Base.__reduce__(self)
matplotlib.patches.ConnectionStyle._Base._clip(self,path,patchA,patchB)
matplotlib.patches.ConnectionStyle._Base._shrink(self,path,shrinkA,shrinkB)
matplotlib.patches.Ellipse(self,xy,width,height,angle=0.0,**kwargs)
matplotlib.patches.Ellipse.__init__(self,xy,width,height,angle=0.0,**kwargs)
matplotlib.patches.Ellipse.__str__(self)
matplotlib.patches.Ellipse._recompute_transform(self)
matplotlib.patches.Ellipse.get_patch_transform(self)
matplotlib.patches.Ellipse.get_path(self)
matplotlib.patches.FancyArrow(self,x,y,dx,dy,width=0.001,length_includes_head=False,head_width=None,head_length=None,shape='full',overhang=0,head_starts_at_zero=False,**kwargs)
matplotlib.patches.FancyArrow.__init__(self,x,y,dx,dy,width=0.001,length_includes_head=False,head_width=None,head_length=None,shape='full',overhang=0,head_starts_at_zero=False,**kwargs)
matplotlib.patches.FancyArrow.__str__(self)
matplotlib.patches.FancyArrowPatch(self,posA=None,posB=None,path=None,arrowstyle='simple',arrow_transmuter=None,connectionstyle='arc3',connector=None,patchA=None,patchB=None,shrinkA=2,shrinkB=2,mutation_scale=1,mutation_aspect=None,dpi_cor=1,**kwargs)
matplotlib.patches.FancyArrowPatch.__init__(self,posA=None,posB=None,path=None,arrowstyle='simple',arrow_transmuter=None,connectionstyle='arc3',connector=None,patchA=None,patchB=None,shrinkA=2,shrinkB=2,mutation_scale=1,mutation_aspect=None,dpi_cor=1,**kwargs)
matplotlib.patches.FancyArrowPatch.__str__(self)
matplotlib.patches.FancyArrowPatch.draw(self,renderer)
matplotlib.patches.FancyArrowPatch.get_arrowstyle(self)
matplotlib.patches.FancyArrowPatch.get_connectionstyle(self)
matplotlib.patches.FancyArrowPatch.get_dpi_cor(self)
matplotlib.patches.FancyArrowPatch.get_mutation_aspect(self)
matplotlib.patches.FancyArrowPatch.get_mutation_scale(self)
matplotlib.patches.FancyArrowPatch.get_path(self)
matplotlib.patches.FancyArrowPatch.get_path_in_displaycoord(self)
matplotlib.patches.FancyArrowPatch.set_arrowstyle(self,arrowstyle=None,**kw)
matplotlib.patches.FancyArrowPatch.set_connectionstyle(self,connectionstyle,**kw)
matplotlib.patches.FancyArrowPatch.set_dpi_cor(self,dpi_cor)
matplotlib.patches.FancyArrowPatch.set_mutation_aspect(self,aspect)
matplotlib.patches.FancyArrowPatch.set_mutation_scale(self,scale)
matplotlib.patches.FancyArrowPatch.set_patchA(self,patchA)
matplotlib.patches.FancyArrowPatch.set_patchB(self,patchB)
matplotlib.patches.FancyArrowPatch.set_positions(self,posA,posB)
matplotlib.patches.FancyBboxPatch(self,xy,width,height,boxstyle='round',bbox_transmuter=None,mutation_scale=1.0,mutation_aspect=None,**kwargs)
matplotlib.patches.FancyBboxPatch.__init__(self,xy,width,height,boxstyle='round',bbox_transmuter=None,mutation_scale=1.0,mutation_aspect=None,**kwargs)
matplotlib.patches.FancyBboxPatch.__str__(self)
matplotlib.patches.FancyBboxPatch.get_bbox(self)
matplotlib.patches.FancyBboxPatch.get_boxstyle(self)
matplotlib.patches.FancyBboxPatch.get_height(self)
matplotlib.patches.FancyBboxPatch.get_mutation_aspect(self)
matplotlib.patches.FancyBboxPatch.get_mutation_scale(self)
matplotlib.patches.FancyBboxPatch.get_path(self)
matplotlib.patches.FancyBboxPatch.get_width(self)
matplotlib.patches.FancyBboxPatch.get_x(self)
matplotlib.patches.FancyBboxPatch.get_y(self)
matplotlib.patches.FancyBboxPatch.set_bounds(self,*args)
matplotlib.patches.FancyBboxPatch.set_boxstyle(self,boxstyle=None,**kw)
matplotlib.patches.FancyBboxPatch.set_height(self,h)
matplotlib.patches.FancyBboxPatch.set_mutation_aspect(self,aspect)
matplotlib.patches.FancyBboxPatch.set_mutation_scale(self,scale)
matplotlib.patches.FancyBboxPatch.set_width(self,w)
matplotlib.patches.FancyBboxPatch.set_x(self,x)
matplotlib.patches.FancyBboxPatch.set_y(self,y)
matplotlib.patches.Patch(self,edgecolor=None,facecolor=None,color=None,linewidth=None,linestyle=None,antialiased=None,hatch=None,fill=True,capstyle=None,joinstyle=None,**kwargs)
matplotlib.patches.Patch.__init__(self,edgecolor=None,facecolor=None,color=None,linewidth=None,linestyle=None,antialiased=None,hatch=None,fill=True,capstyle=None,joinstyle=None,**kwargs)
matplotlib.patches.Patch.__str__(self)
matplotlib.patches.Patch._process_radius(self,radius)
matplotlib.patches.Patch._set_edgecolor(self,color)
matplotlib.patches.Patch._set_facecolor(self,color)
matplotlib.patches.Patch.contains(self,mouseevent,radius=None)
matplotlib.patches.Patch.contains_point(self,point,radius=None)
matplotlib.patches.Patch.contains_points(self,points,radius=None)
matplotlib.patches.Patch.draw(self,renderer)
matplotlib.patches.Patch.get_antialiased(self)
matplotlib.patches.Patch.get_capstyle(self)
matplotlib.patches.Patch.get_data_transform(self)
matplotlib.patches.Patch.get_edgecolor(self)
matplotlib.patches.Patch.get_extents(self)
matplotlib.patches.Patch.get_facecolor(self)
matplotlib.patches.Patch.get_fill(self)
matplotlib.patches.Patch.get_hatch(self)
matplotlib.patches.Patch.get_joinstyle(self)
matplotlib.patches.Patch.get_linestyle(self)
matplotlib.patches.Patch.get_linewidth(self)
matplotlib.patches.Patch.get_patch_transform(self)
matplotlib.patches.Patch.get_path(self)
matplotlib.patches.Patch.get_transform(self)
matplotlib.patches.Patch.get_verts(self)
matplotlib.patches.Patch.get_window_extent(self,renderer=None)
matplotlib.patches.Patch.set_aa(self,aa)
matplotlib.patches.Patch.set_alpha(self,alpha)
matplotlib.patches.Patch.set_antialiased(self,aa)
matplotlib.patches.Patch.set_capstyle(self,s)
matplotlib.patches.Patch.set_color(self,c)
matplotlib.patches.Patch.set_ec(self,color)
matplotlib.patches.Patch.set_edgecolor(self,color)
matplotlib.patches.Patch.set_facecolor(self,color)
matplotlib.patches.Patch.set_fc(self,color)
matplotlib.patches.Patch.set_fill(self,b)
matplotlib.patches.Patch.set_hatch(self,hatch)
matplotlib.patches.Patch.set_joinstyle(self,s)
matplotlib.patches.Patch.set_linestyle(self,ls)
matplotlib.patches.Patch.set_linewidth(self,w)
matplotlib.patches.Patch.set_ls(self,ls)
matplotlib.patches.Patch.set_lw(self,lw)
matplotlib.patches.Patch.update_from(self,other)
matplotlib.patches.PathPatch(self,path,**kwargs)
matplotlib.patches.PathPatch.__init__(self,path,**kwargs)
matplotlib.patches.PathPatch.__str__(self)
matplotlib.patches.PathPatch.get_path(self)
matplotlib.patches.Polygon(self,xy,closed=True,**kwargs)
matplotlib.patches.Polygon.__init__(self,xy,closed=True,**kwargs)
matplotlib.patches.Polygon.__str__(self)
matplotlib.patches.Polygon.get_closed(self)
matplotlib.patches.Polygon.get_path(self)
matplotlib.patches.Polygon.get_xy(self)
matplotlib.patches.Polygon.set_closed(self,closed)
matplotlib.patches.Polygon.set_xy(self,xy)
matplotlib.patches.Rectangle(self,xy,width,height,angle=0.0,**kwargs)
matplotlib.patches.Rectangle.__init__(self,xy,width,height,angle=0.0,**kwargs)
matplotlib.patches.Rectangle.__str__(self)
matplotlib.patches.Rectangle._convert_units(self)
matplotlib.patches.Rectangle._update_patch_transform(self)
matplotlib.patches.Rectangle._update_x1(self)
matplotlib.patches.Rectangle._update_y1(self)
matplotlib.patches.Rectangle.get_bbox(self)
matplotlib.patches.Rectangle.get_height(self)
matplotlib.patches.Rectangle.get_patch_transform(self)
matplotlib.patches.Rectangle.get_path(self)
matplotlib.patches.Rectangle.get_width(self)
matplotlib.patches.Rectangle.get_x(self)
matplotlib.patches.Rectangle.get_xy(self)
matplotlib.patches.Rectangle.get_y(self)
matplotlib.patches.Rectangle.set_bounds(self,*args)
matplotlib.patches.Rectangle.set_height(self,h)
matplotlib.patches.Rectangle.set_width(self,w)
matplotlib.patches.Rectangle.set_x(self,x)
matplotlib.patches.Rectangle.set_xy(self,xy)
matplotlib.patches.Rectangle.set_y(self,y)
matplotlib.patches.RegularPolygon(self,xy,numVertices,radius=5,orientation=0,**kwargs)
matplotlib.patches.RegularPolygon.__init__(self,xy,numVertices,radius=5,orientation=0,**kwargs)
matplotlib.patches.RegularPolygon.__str__(self)
matplotlib.patches.RegularPolygon._get_numvertices(self)
matplotlib.patches.RegularPolygon._get_orientation(self)
matplotlib.patches.RegularPolygon._get_radius(self)
matplotlib.patches.RegularPolygon._get_xy(self)
matplotlib.patches.RegularPolygon._set_numvertices(self,numVertices)
matplotlib.patches.RegularPolygon._set_orientation(self,orientation)
matplotlib.patches.RegularPolygon._set_radius(self,radius)
matplotlib.patches.RegularPolygon._set_xy(self,xy)
matplotlib.patches.RegularPolygon._update_transform(self)
matplotlib.patches.RegularPolygon.get_patch_transform(self)
matplotlib.patches.RegularPolygon.get_path(self)
matplotlib.patches.Shadow(self,patch,ox,oy,props=None,**kwargs)
matplotlib.patches.Shadow.__init__(self,patch,ox,oy,props=None,**kwargs)
matplotlib.patches.Shadow.__str__(self)
matplotlib.patches.Shadow._get_ox(self)
matplotlib.patches.Shadow._get_oy(self)
matplotlib.patches.Shadow._set_ox(self,ox)
matplotlib.patches.Shadow._set_oy(self,oy)
matplotlib.patches.Shadow._update(self)
matplotlib.patches.Shadow._update_transform(self,renderer)
matplotlib.patches.Shadow.draw(self,renderer)
matplotlib.patches.Shadow.get_patch_transform(self)
matplotlib.patches.Shadow.get_path(self)
matplotlib.patches.Wedge(self,center,r,theta1,theta2,width=None,**kwargs)
matplotlib.patches.Wedge.__init__(self,center,r,theta1,theta2,width=None,**kwargs)
matplotlib.patches.Wedge.__str__(self)
matplotlib.patches.Wedge._recompute_path(self)
matplotlib.patches.Wedge.get_path(self)
matplotlib.patches.Wedge.set_center(self,center)
matplotlib.patches.Wedge.set_radius(self,radius)
matplotlib.patches.Wedge.set_theta1(self,theta1)
matplotlib.patches.Wedge.set_theta2(self,theta2)
matplotlib.patches.Wedge.set_width(self,width)
matplotlib.patches.YAArrow(self,figure,xytip,xybase,width=4,frac=0.1,headwidth=12,**kwargs)
matplotlib.patches.YAArrow.__init__(self,figure,xytip,xybase,width=4,frac=0.1,headwidth=12,**kwargs)
matplotlib.patches.YAArrow.__str__(self)
matplotlib.patches.YAArrow.get_patch_transform(self)
matplotlib.patches.YAArrow.get_path(self)
matplotlib.patches.YAArrow.getpoints(self,x1,y1,x2,y2,k)
matplotlib.patches._Style(self,stylename,**kw)
matplotlib.patches._Style.__new__(self,stylename,**kw)
matplotlib.patches._Style.get_styles(klass)
matplotlib.patches._Style.pprint_styles(klass)
matplotlib.patches._Style.register(klass,name,style)
matplotlib.patches._point_along_a_line(x0,y0,x1,y1,d)
matplotlib.patches._pprint_styles(_styles)
matplotlib.patches._pprint_table(_table,leadingspace=2)
matplotlib.patches._simpleprint_styles(_styles)
matplotlib.patches.bbox_artist(artist,renderer,props=None,fill=True)
matplotlib.patches.draw_bbox(bbox,renderer,color='k',trans=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_mathtext_data.py----------------------------------------
A:matplotlib._mathtext_data.uni2type1->dict(((v, k) for (k, v) in six.iteritems(type12uni)))


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/font_manager.py----------------------------------------
A:matplotlib.font_manager._log->logging.getLogger(__name__)
A:matplotlib.font_manager.home->os.environ.get('HOME')
A:matplotlib.font_manager.path->os.path.join(home, '.fonts')
A:matplotlib.font_manager.pattern->';'.join(['*.%s;*.%s' % (ext, ext.upper()) for ext in extensions])
A:matplotlib.font_manager.user->six.moves.winreg.OpenKey(winreg.HKEY_CURRENT_USER, MSFolders)
A:matplotlib.font_manager.directory->os.path.normcase(directory)
A:matplotlib.font_manager.fontext->get_fontext_synonyms(fontext)
A:matplotlib.font_manager.local->six.moves.winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, fontdir)
A:matplotlib.font_manager.(key, direc, tp)->six.moves.winreg.EnumValue(local, j)
A:matplotlib.font_manager.direc->os.path.abspath(direc).lower()
A:matplotlib.font_manager.timer->Timer(5, lambda : warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.'))
A:matplotlib.font_manager.out->matplotlib.compat.subprocess.check_output([str('fc-list'), '--format=%{file}\\n'])
A:matplotlib.font_manager.fname->six.text_type(fname, sys.getfilesystemencoding())
A:matplotlib.font_manager.fontfiles->set()
A:matplotlib.font_manager.fontexts->get_fontext_synonyms(fontext)
A:matplotlib.font_manager.fontdir->win32FontDirectory()
A:matplotlib.font_manager.(base, ext)->os.path.splitext(f)
A:matplotlib.font_manager.files->list_fonts(path, fontexts)
A:matplotlib.font_manager.self.size->str(float(size))
A:matplotlib.font_manager.sfnt->fontManager.findfont(prop, **kw).get_sfnt()
A:matplotlib.font_manager.sfnt2->sfnt2.decode('mac_roman').lower().decode('mac_roman').lower()
A:matplotlib.font_manager.sfnt4->sfnt4.decode('mac_roman').lower().decode('mac_roman').lower()
A:matplotlib.font_manager.weight->int(weight)
A:matplotlib.font_manager.name->fontManager.findfont(prop, **kw).get_familyname()
A:matplotlib.font_manager.fontname->fontManager.findfont(prop, **kw).get_fontname().lower()
A:matplotlib.font_manager.seen->set()
A:matplotlib.font_manager.fh->open(fpath, 'rb')
A:matplotlib.font_manager.font->json_load(_fmcache).findfont(prop, **kw)
A:matplotlib.font_manager.prop->prop.get_fontconfig_pattern().get_fontconfig_pattern()
A:matplotlib.font_manager.self._family->_normalize_font_family(family)
A:matplotlib.font_manager.stretch->int(stretch)
A:matplotlib.font_manager.size->float(size)
A:matplotlib.font_manager.cls->o.pop('_class', None)
A:matplotlib.font_manager.r->FontEntry.__new__(FontEntry)
A:matplotlib.font_manager.self._last_rcParams->self.make_rcparams_key()
A:matplotlib.font_manager.key->self.make_rcparams_key()
A:matplotlib.font_manager.self.ttflist->createFontList(self.ttffiles)
A:matplotlib.font_manager.self.afmlist->createFontList(self.afmfiles, fontext='afm')
A:matplotlib.font_manager.family2->family2.lower().lower()
A:matplotlib.font_manager.family1->family1.lower().lower()
A:matplotlib.font_manager.idx->options.index(family2)
A:matplotlib.font_manager.stretchval1->stretch_dict.get(stretch1, 500)
A:matplotlib.font_manager.stretchval2->stretch_dict.get(stretch2, 500)
A:matplotlib.font_manager.weightval1->weight_dict.get(weight1, 500)
A:matplotlib.font_manager.weightval2->weight_dict.get(weight2, 500)
A:matplotlib.font_manager.sizeval1->float(size1)
A:matplotlib.font_manager.sizeval2->float(size2)
A:matplotlib.font_manager.cached->_fc_match_cache.get(prop)
A:matplotlib.font_manager.default_prop->prop.get_fontconfig_pattern().get_fontconfig_pattern().copy()
A:matplotlib.font_manager.result->fc_match(':', fontext)
A:matplotlib.font_manager.tag->fd.read(4)
A:matplotlib.font_manager._get_font->lru_cache(64)(ft2font.FT2Font)
A:matplotlib.font_manager.pipe->matplotlib.compat.subprocess.Popen(['fc-match', '-s', '--format=%{file}\\n', pattern], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:matplotlib.font_manager.cachedir->get_cachedir()
A:matplotlib.font_manager._fmcache->os.path.join(cachedir, 'fontList.json')
A:matplotlib.font_manager.fontManager->json_load(_fmcache)
matplotlib.font_manager.FontEntry(self,fname='',name='',style='normal',variant='normal',weight='normal',stretch='normal',size='medium')
matplotlib.font_manager.FontEntry.__init__(self,fname='',name='',style='normal',variant='normal',weight='normal',stretch='normal',size='medium')
matplotlib.font_manager.FontEntry.__repr__(self)
matplotlib.font_manager.FontManager(self,size=None,weight='normal')
matplotlib.font_manager.FontManager.__init__(self,size=None,weight='normal')
matplotlib.font_manager.FontManager.findfont(self,prop,fontext='ttf',directory=None,fallback_to_default=True,rebuild_if_missing=True)
matplotlib.font_manager.FontManager.get_default_size()
matplotlib.font_manager.FontManager.get_default_weight(self)
matplotlib.font_manager.FontManager.score_family(self,families,family2)
matplotlib.font_manager.FontManager.score_size(self,size1,size2)
matplotlib.font_manager.FontManager.score_stretch(self,stretch1,stretch2)
matplotlib.font_manager.FontManager.score_style(self,style1,style2)
matplotlib.font_manager.FontManager.score_variant(self,variant1,variant2)
matplotlib.font_manager.FontManager.score_weight(self,weight1,weight2)
matplotlib.font_manager.FontManager.set_default_weight(self,weight)
matplotlib.font_manager.FontManager.update_fonts(self,filenames)
matplotlib.font_manager.FontProperties(self,family=None,style=None,variant=None,weight=None,stretch=None,size=None,fname=None,_init=None)
matplotlib.font_manager.FontProperties.__eq__(self,other)
matplotlib.font_manager.FontProperties.__hash__(self)
matplotlib.font_manager.FontProperties.__init__(self,family=None,style=None,variant=None,weight=None,stretch=None,size=None,fname=None,_init=None)
matplotlib.font_manager.FontProperties.__ne__(self,other)
matplotlib.font_manager.FontProperties.__str__(self)
matplotlib.font_manager.FontProperties._parse_fontconfig_pattern(self,pattern)
matplotlib.font_manager.FontProperties.copy(self)
matplotlib.font_manager.FontProperties.get_family(self)
matplotlib.font_manager.FontProperties.get_file(self)
matplotlib.font_manager.FontProperties.get_fontconfig_pattern(self)
matplotlib.font_manager.FontProperties.get_name(self)
matplotlib.font_manager.FontProperties.get_size(self)
matplotlib.font_manager.FontProperties.get_size_in_points(self)
matplotlib.font_manager.FontProperties.get_stretch(self)
matplotlib.font_manager.FontProperties.get_style(self)
matplotlib.font_manager.FontProperties.get_variant(self)
matplotlib.font_manager.FontProperties.get_weight(self)
matplotlib.font_manager.FontProperties.set_family(self,family)
matplotlib.font_manager.FontProperties.set_file(self,file)
matplotlib.font_manager.FontProperties.set_fontconfig_pattern(self,pattern)
matplotlib.font_manager.FontProperties.set_size(self,size)
matplotlib.font_manager.FontProperties.set_stretch(self,stretch)
matplotlib.font_manager.FontProperties.set_style(self,style)
matplotlib.font_manager.FontProperties.set_variant(self,variant)
matplotlib.font_manager.FontProperties.set_weight(self,weight)
matplotlib.font_manager.JSONEncoder(json.JSONEncoder)
matplotlib.font_manager.JSONEncoder.default(self,o)
matplotlib.font_manager.OSXInstalledFonts(directories=None,fontext='ttf')
matplotlib.font_manager.TempCache(self)
matplotlib.font_manager.TempCache.__init__(self)
matplotlib.font_manager.TempCache.get(self,prop)
matplotlib.font_manager.TempCache.make_rcparams_key(self)
matplotlib.font_manager.TempCache.set(self,prop,value)
matplotlib.font_manager._call_fc_list()
matplotlib.font_manager._json_decode(o)
matplotlib.font_manager._normalize_font_family(family)
matplotlib.font_manager.afmFontProperty(fontpath,font)
matplotlib.font_manager.createFontList(fontfiles,fontext='ttf')
matplotlib.font_manager.findSystemFonts(fontpaths=None,fontext='ttf')
matplotlib.font_manager.get_font(filename,hinting_factor=None)
matplotlib.font_manager.get_fontconfig_fonts(fontext='ttf')
matplotlib.font_manager.get_fontext_synonyms(fontext)
matplotlib.font_manager.is_opentype_cff_font(filename)
matplotlib.font_manager.json_dump(data,filename)
matplotlib.font_manager.json_load(filename)
matplotlib.font_manager.list_fonts(directory,extensions)
matplotlib.font_manager.ttfFontProperty(font)
matplotlib.font_manager.ttfdict_to_fnames(d)
matplotlib.font_manager.weight_as_number(weight)
matplotlib.font_manager.win32FontDirectory()
matplotlib.font_manager.win32InstalledFonts(directory=None,fontext='ttf')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_animation_data.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/markers.py----------------------------------------
A:matplotlib.markers.(TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN, CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN, CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE)->xrange(12)
A:matplotlib.markers._empty_path->Path(np.empty((0, 2)))
A:matplotlib.markers.d->self.__dict__.copy()
A:matplotlib.markers.self._transform->Affine2D().translate(-0.5, -0.5)
A:matplotlib.markers.self._marker_function->getattr(self, '_set_' + self.markers[marker])
A:matplotlib.markers.rescale->max(np.max(np.abs(verts[:, 0])), np.max(np.abs(verts[:, 1])))
A:matplotlib.markers.marker->Path(verts)
A:matplotlib.markers.self._path->Path([[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 0.0]])
A:matplotlib.markers.verts->numpy.asarray(marker[0])
A:matplotlib.markers.path->Path(verts)
A:matplotlib.markers.props->FontProperties(size=1.0)
A:matplotlib.markers.text->TextPath(xy=(0, 0), s=self.get_marker(), fontproperties=props, usetex=rcParams['text.usetex'])
A:matplotlib.markers.(xmin, ymin)->TextPath(xy=(0, 0), s=self.get_marker(), fontproperties=props, usetex=rcParams['text.usetex']).vertices.min(axis=0)
A:matplotlib.markers.(xmax, ymax)->TextPath(xy=(0, 0), s=self.get_marker(), fontproperties=props, usetex=rcParams['text.usetex']).vertices.max(axis=0)
A:matplotlib.markers.max_dim->max(width, height)
A:matplotlib.markers.fs->self.get_fillstyle()
A:matplotlib.markers.self._pathself._alt_path->path.Path.unit_circle_righthalf()
A:matplotlib.markers.self._alt_transform->Affine2D().translate(-0.5, -0.5)
A:matplotlib.markers._triangle_path->Path([[0.0, 1.0], [-1.0, -1.0], [1.0, -1.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._triangle_path_u->Path([[0.0, 1.0], [-3 / 5.0, -1 / 5.0], [3 / 5.0, -1 / 5.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._triangle_path_d->Path([[-3 / 5.0, -1 / 5.0], [3 / 5.0, -1 / 5.0], [1.0, -1.0], [-1.0, -1.0], [-3 / 5.0, -1 / 5.0]], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._triangle_path_l->Path([[0.0, 1.0], [0.0, -1.0], [-1.0, -1.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._triangle_path_r->Path([[0.0, 1.0], [0.0, -1.0], [1.0, -1.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers.self._alt_path->Path([[0.0, 0.0], [0.0, 1.0], [1.0, 1.0], [0.0, 0.0]])
A:matplotlib.markers.polypath->path.Path.unit_regular_polygon(8)
A:matplotlib.markers.top->Path(verts[(1, 0, 5, 4, 1), :])
A:matplotlib.markers.bottom->Path(verts[(1, 2, 3, 4), :])
A:matplotlib.markers.left->Path(np.vstack(([x, y], verts[(0, 1, 2), :], [-x, -y], [x, y])))
A:matplotlib.markers.right->Path(np.vstack(([x, y], verts[(5, 4, 3), :], [-x, -y])))
A:matplotlib.markers.x->numpy.abs(np.cos(5 * np.pi / 6.0))
A:matplotlib.markers.half->Path([[0, -1], [0, 1], [-x, 1], [-1, x], [-1, -x], [-x, -1], [0, -1]])
A:matplotlib.markers._line_marker_path->Path([[0.0, -1.0], [0.0, 1.0]])
A:matplotlib.markers._tickhoriz_path->Path([[0.0, 0.0], [1.0, 0.0]])
A:matplotlib.markers._tickvert_path->Path([[-0.0, 0.0], [-0.0, 1.0]])
A:matplotlib.markers._tri_path->Path([[0.0, 0.0], [0.0, -1.0], [0.0, 0.0], [0.8, 0.5], [0.0, 0.0], [-0.8, 0.5]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._caret_path->Path([[-1.0, 1.5], [0.0, 0.0], [1.0, 1.5]])
A:matplotlib.markers._caret_path_base->Path([[-1.0, 0.0], [0.0, -1.5], [1.0, 0]])
A:matplotlib.markers._plus_path->Path([[-1.0, 0.0], [1.0, 0.0], [0.0, -1.0], [0.0, 1.0]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._x_path->Path([[-1.0, -1.0], [1.0, 1.0], [-1.0, 1.0], [1.0, -1.0]], [Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO])
A:matplotlib.markers._plus_filled_path->Path([(1 / 3, 0), (2 / 3, 0), (2 / 3, 1 / 3), (1, 1 / 3), (1, 2 / 3), (2 / 3, 2 / 3), (2 / 3, 1), (1 / 3, 1), (1 / 3, 2 / 3), (0, 2 / 3), (0, 1 / 3), (1 / 3, 1 / 3), (1 / 3, 0)], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._plus_filled_path_t->Path([(1, 1 / 2), (1, 2 / 3), (2 / 3, 2 / 3), (2 / 3, 1), (1 / 3, 1), (1 / 3, 2 / 3), (0, 2 / 3), (0, 1 / 2), (1, 1 / 2)], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._x_filled_path->Path([(0.25, 0), (0.5, 0.25), (0.75, 0), (1, 0.25), (0.75, 0.5), (1, 0.75), (0.75, 1), (0.5, 0.75), (0.25, 1), (0, 0.75), (0.25, 0.5), (0, 0.25), (0.25, 0)], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
A:matplotlib.markers._x_filled_path_t->Path([(0.75, 0.5), (1, 0.75), (0.75, 1), (0.5, 0.75), (0.25, 1), (0, 0.75), (0.25, 0.5), (0.75, 0.5)], [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])
matplotlib.markers.MarkerStyle(self,marker=None,fillstyle=None)
matplotlib.markers.MarkerStyle.__getstate__(self)
matplotlib.markers.MarkerStyle.__init__(self,marker=None,fillstyle=None)
matplotlib.markers.MarkerStyle.__setstate__(self,statedict)
matplotlib.markers.MarkerStyle._half_fill(self)
matplotlib.markers.MarkerStyle._recache(self)
matplotlib.markers.MarkerStyle._set_caretdown(self)
matplotlib.markers.MarkerStyle._set_caretdownbase(self)
matplotlib.markers.MarkerStyle._set_caretleft(self)
matplotlib.markers.MarkerStyle._set_caretleftbase(self)
matplotlib.markers.MarkerStyle._set_caretright(self)
matplotlib.markers.MarkerStyle._set_caretrightbase(self)
matplotlib.markers.MarkerStyle._set_caretup(self)
matplotlib.markers.MarkerStyle._set_caretupbase(self)
matplotlib.markers.MarkerStyle._set_circle(self,reduction=1.0)
matplotlib.markers.MarkerStyle._set_custom_marker(self,path)
matplotlib.markers.MarkerStyle._set_diamond(self)
matplotlib.markers.MarkerStyle._set_hexagon1(self)
matplotlib.markers.MarkerStyle._set_hexagon2(self)
matplotlib.markers.MarkerStyle._set_hline(self)
matplotlib.markers.MarkerStyle._set_mathtext_path(self)
matplotlib.markers.MarkerStyle._set_nothing(self)
matplotlib.markers.MarkerStyle._set_octagon(self)
matplotlib.markers.MarkerStyle._set_path_marker(self)
matplotlib.markers.MarkerStyle._set_pentagon(self)
matplotlib.markers.MarkerStyle._set_pixel(self)
matplotlib.markers.MarkerStyle._set_plus(self)
matplotlib.markers.MarkerStyle._set_plus_filled(self)
matplotlib.markers.MarkerStyle._set_point(self)
matplotlib.markers.MarkerStyle._set_square(self)
matplotlib.markers.MarkerStyle._set_star(self)
matplotlib.markers.MarkerStyle._set_thin_diamond(self)
matplotlib.markers.MarkerStyle._set_tickdown(self)
matplotlib.markers.MarkerStyle._set_tickleft(self)
matplotlib.markers.MarkerStyle._set_tickright(self)
matplotlib.markers.MarkerStyle._set_tickup(self)
matplotlib.markers.MarkerStyle._set_tri_down(self)
matplotlib.markers.MarkerStyle._set_tri_left(self)
matplotlib.markers.MarkerStyle._set_tri_right(self)
matplotlib.markers.MarkerStyle._set_tri_up(self)
matplotlib.markers.MarkerStyle._set_triangle(self,rot,skip)
matplotlib.markers.MarkerStyle._set_triangle_down(self)
matplotlib.markers.MarkerStyle._set_triangle_left(self)
matplotlib.markers.MarkerStyle._set_triangle_right(self)
matplotlib.markers.MarkerStyle._set_triangle_up(self)
matplotlib.markers.MarkerStyle._set_tuple_marker(self)
matplotlib.markers.MarkerStyle._set_vertices(self)
matplotlib.markers.MarkerStyle._set_vline(self)
matplotlib.markers.MarkerStyle._set_x(self)
matplotlib.markers.MarkerStyle._set_x_filled(self)
matplotlib.markers.MarkerStyle.get_alt_path(self)
matplotlib.markers.MarkerStyle.get_alt_transform(self)
matplotlib.markers.MarkerStyle.get_capstyle(self)
matplotlib.markers.MarkerStyle.get_fillstyle(self)
matplotlib.markers.MarkerStyle.get_joinstyle(self)
matplotlib.markers.MarkerStyle.get_marker(self)
matplotlib.markers.MarkerStyle.get_path(self)
matplotlib.markers.MarkerStyle.get_snap_threshold(self)
matplotlib.markers.MarkerStyle.get_transform(self)
matplotlib.markers.MarkerStyle.is_filled(self)
matplotlib.markers.MarkerStyle.set_fillstyle(self,fillstyle)
matplotlib.markers.MarkerStyle.set_marker(self,marker)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/widgets.py----------------------------------------
A:matplotlib.widgets.active->property(get_active, lambda self, active: self.set_active(active), doc='Is the widget active?')
A:matplotlib.widgets.cid->self.canvas.mpl_connect(event, callback)
A:matplotlib.widgets.self.label->ax.text(-label_pad, 0.5, label, verticalalignment='center', horizontalalignment='right', transform=ax.transAxes)
A:matplotlib.widgets.valinit->self._value_in_bounds(valinit)
A:matplotlib.widgets.self.poly->ax.axvspan(valmin, valinit, 0, 1, **kwargs)
A:matplotlib.widgets.self.vline->ax.axvline(valinit, 0, 1, color='r', lw=1)
A:matplotlib.widgets.self.valtext->ax.text(1.02, 0.5, valfmt % valinit, transform=ax.transAxes, verticalalignment='center', horizontalalignment='left')
A:matplotlib.widgets.val->self._value_in_bounds(event.xdata)
A:matplotlib.widgets.ys->numpy.linspace(1 - dy, dy, len(labels))
A:matplotlib.widgets.axcolor->ax.get_facecolor()
A:matplotlib.widgets.t->ax.text(0.25, y, label, transform=ax.transAxes, horizontalalignment='left', verticalalignment='center')
A:matplotlib.widgets.p->Circle(xy=(0.15, y), radius=0.05, edgecolor='black', facecolor=facecolor, transform=ax.transAxes)
A:matplotlib.widgets.l1->Line2D([x, x + w], [y + h, y], **lineparams)
A:matplotlib.widgets.l2->Line2D([x, x + w], [y, y + h], **lineparams)
A:matplotlib.widgets.self.text_disp->self._make_text_disp(self.text)
A:matplotlib.widgets.self.cursor->self.ax.vlines(bb[1, 0], bb[0, 1], bb[1, 1])
A:matplotlib.widgets.wt_disp->self._make_text_disp(widthtext)
A:matplotlib.widgets.bb->blended_transform_factory(self.ax.transAxes, self.ax.transData).transform(inv.transform(bb))
A:matplotlib.widgets.inv->self.ax.transData.inverted()
A:matplotlib.widgets.self.cursor_index->int(len(self.text) * ratio)
A:matplotlib.widgets.newval->str(val)
A:matplotlib.widgets.xy->self.ax.transAxes.inverted().transform_point((event.x, event.y))
A:matplotlib.widgets.pclicked->numpy.array([xy[0], xy[1]])
A:matplotlib.widgets.pcirc->numpy.array([p.center[0], p.center[1]])
A:matplotlib.widgets.self.value_selected->self.labels[index].get_text()
A:matplotlib.widgets.color->self.ax.get_facecolor()
A:matplotlib.widgets.self.axleft->toolfig.add_subplot(711)
A:matplotlib.widgets.self.sliderleft->Slider(self.axleft, 'left', 0, 1, targetfig.subplotpars.left, closedmax=False)
A:matplotlib.widgets.self.axbottom->toolfig.add_subplot(712)
A:matplotlib.widgets.self.sliderbottom->Slider(self.axbottom, 'bottom', 0, 1, targetfig.subplotpars.bottom, closedmax=False)
A:matplotlib.widgets.self.axright->toolfig.add_subplot(713)
A:matplotlib.widgets.self.sliderright->Slider(self.axright, 'right', 0, 1, targetfig.subplotpars.right, closedmin=False)
A:matplotlib.widgets.self.axtop->toolfig.add_subplot(714)
A:matplotlib.widgets.self.slidertop->Slider(self.axtop, 'top', 0, 1, targetfig.subplotpars.top, closedmin=False)
A:matplotlib.widgets.self.axwspace->toolfig.add_subplot(715)
A:matplotlib.widgets.self.sliderwspace->Slider(self.axwspace, 'wspace', 0, 1, targetfig.subplotpars.wspace, closedmax=False)
A:matplotlib.widgets.self.axhspace->toolfig.add_subplot(716)
A:matplotlib.widgets.self.sliderhspace->Slider(self.axhspace, 'hspace', 0, 1, targetfig.subplotpars.hspace, closedmax=False)
A:matplotlib.widgets.bax->toolfig.add_axes([0.8, 0.05, 0.15, 0.075])
A:matplotlib.widgets.self.buttonreset->Button(bax, 'Reset')
A:matplotlib.widgets.self.lineh->ax.axhline(ax.get_ybound()[0], visible=False, **lineprops)
A:matplotlib.widgets.self.linev->ax.axvline(ax.get_xbound()[0], visible=False, **lineprops)
A:matplotlib.widgets.self.background->self.canvas.copy_from_bbox(self.ax.bbox)
A:matplotlib.widgets.(xmin, xmax)->sorted([x1, x2])
A:matplotlib.widgets.(ymin, ymax)->sorted([y1, y2])
A:matplotlib.widgets.self._cidmotion->self.canvas.mpl_connect('motion_notify_event', self.onmove)
A:matplotlib.widgets.self._ciddraw->self.canvas.mpl_connect('draw_event', self.clear)
A:matplotlib.widgets.self.state_modifier_keys->dict(move=' ', clear='escape', square='shift', center='control')
A:matplotlib.widgets.self.state->set()
A:matplotlib.widgets.(x0, x1)->self.ax.get_xbound()
A:matplotlib.widgets.(y0, y1)->self.ax.get_ybound()
A:matplotlib.widgets.xdata->min(x1, xdata)
A:matplotlib.widgets.ydata->min(y1, ydata)
A:matplotlib.widgets.event->self._clean_event(event)
A:matplotlib.widgets.(event.xdata, event.ydata)->self._get_data(event)
A:matplotlib.widgets.key->key.replace('ctrl', 'control').replace('ctrl', 'control')
A:matplotlib.widgets.rectprops->dict(facecolor='red', edgecolor='black', alpha=0.2, fill=True)
A:matplotlib.widgets.trans->blended_transform_factory(self.ax.transAxes, self.ax.transData)
A:matplotlib.widgets.self.rect->Rectangle((0, 0), w, h, transform=trans, visible=False, **self.rectprops)
A:matplotlib.widgets.self.stay_rect->Rectangle((0, 0), w, h, transform=trans, visible=False, **self.rectprops)
A:matplotlib.widgets.(xdata, ydata)->self._get_data(event)
A:matplotlib.widgets.(x, y)->self.to_draw.get_data()
A:matplotlib.widgets.props->dict(mec=rectprops.get('edgecolor', 'r'))
A:matplotlib.widgets.self._markers->Line2D(x, y, animated=useblit, **props)
A:matplotlib.widgets.pts->self.ax.transData.transform(pts)
A:matplotlib.widgets.dist->numpy.sqrt(np.sum(diff ** 2, axis=1))
A:matplotlib.widgets.self.to_draw->Line2D([0, 0], [0, 0], visible=False, **self.lineprops)
A:matplotlib.widgets.lineprops->dict(color='k', linestyle='-', linewidth=2, alpha=0.5)
A:matplotlib.widgets.self._corner_handles->ToolHandles(self.ax, xc, yc, marker_props=props, useblit=self.useblit)
A:matplotlib.widgets.self._edge_handles->ToolHandles(self.ax, xe, ye, marker='s', marker_props=props, useblit=self.useblit)
A:matplotlib.widgets.self._center_handle->ToolHandles(self.ax, [xc], [yc], marker='s', marker_props=props, useblit=self.useblit)
A:matplotlib.widgets.xy1->self.ax.transData.transform_point([x1, y1])
A:matplotlib.widgets.xy2->self.ax.transData.transform_point([x2, y2])
A:matplotlib.widgets.dx_pix->abs(event.x - center_pix[0])
A:matplotlib.widgets.dy_pix->abs(event.y - center_pix[1])
A:matplotlib.widgets.maxd->max(abs(dx_pix), abs(dy_pix))
A:matplotlib.widgets.x0->self.to_draw.get_x()
A:matplotlib.widgets.y0->self.to_draw.get_y()
A:matplotlib.widgets.width->self.to_draw.get_width()
A:matplotlib.widgets.height->self.to_draw.get_height()
A:matplotlib.widgets.xlim->sorted(self.ax.get_xlim())
A:matplotlib.widgets.ylim->sorted(self.ax.get_ylim())
A:matplotlib.widgets.xmin->max(xlim[0], xmin)
A:matplotlib.widgets.ymin->max(ylim[0], ymin)
A:matplotlib.widgets.xmax->min(xmax, xlim[1])
A:matplotlib.widgets.ymax->min(ymax, ylim[1])
A:matplotlib.widgets.(c_idx, c_dist)->self._corner_handles.closest(event.x, event.y)
A:matplotlib.widgets.(e_idx, e_dist)->self._edge_handles.closest(event.x, event.y)
A:matplotlib.widgets.(m_idx, m_dist)->self._center_handle.closest(event.x, event.y)
A:matplotlib.widgets.xfm->self.ax.transData.inverted()
A:matplotlib.widgets.rad->numpy.deg2rad(np.arange(31) * 12)
A:matplotlib.widgets.self.line->Line2D([x], [y], linestyle='-', color='black', lw=2)
A:matplotlib.widgets.state_modifier_keys->dict(clear='escape', move_vertex='control', move_all='shift', move='not-applicable', square='not-applicable', center='not-applicable')
A:matplotlib.widgets.markerprops->dict(mec='k', mfc=lineprops.get('color', 'k'))
A:matplotlib.widgets.self._polygon_handles->ToolHandles(self.ax, self._xs, self._ys, useblit=self.useblit, marker_props=markerprops)
A:matplotlib.widgets.(h_idx, h_dist)->self._polygon_handles.closest(event.x, event.y)
A:matplotlib.widgets.(x0, y0)->self.line.get_transform().transform((self._xs[0], self._ys[0]))
A:matplotlib.widgets.v0_dist->numpy.sqrt((x0 - event.x) ** 2 + (y0 - event.y) ** 2)
matplotlib.widgets.AxesWidget(self,ax)
matplotlib.widgets.AxesWidget.__init__(self,ax)
matplotlib.widgets.AxesWidget.connect_event(self,event,callback)
matplotlib.widgets.AxesWidget.disconnect_events(self)
matplotlib.widgets.Button(self,ax,label,image=None,color='0.85',hovercolor='0.95')
matplotlib.widgets.Button.__init__(self,ax,label,image=None,color='0.85',hovercolor='0.95')
matplotlib.widgets.Button._click(self,event)
matplotlib.widgets.Button._motion(self,event)
matplotlib.widgets.Button._release(self,event)
matplotlib.widgets.Button.disconnect(self,cid)
matplotlib.widgets.Button.on_clicked(self,func)
matplotlib.widgets.CheckButtons(self,ax,labels,actives)
matplotlib.widgets.CheckButtons.__init__(self,ax,labels,actives)
matplotlib.widgets.CheckButtons._clicked(self,event)
matplotlib.widgets.CheckButtons.disconnect(self,cid)
matplotlib.widgets.CheckButtons.get_status(self)
matplotlib.widgets.CheckButtons.on_clicked(self,func)
matplotlib.widgets.CheckButtons.set_active(self,index)
matplotlib.widgets.Cursor(self,ax,horizOn=True,vertOn=True,useblit=False,**lineprops)
matplotlib.widgets.Cursor.__init__(self,ax,horizOn=True,vertOn=True,useblit=False,**lineprops)
matplotlib.widgets.Cursor._update(self)
matplotlib.widgets.Cursor.clear(self,event)
matplotlib.widgets.Cursor.onmove(self,event)
matplotlib.widgets.EllipseSelector(RectangleSelector)
matplotlib.widgets.EllipseSelector._rect_bbox(self)
matplotlib.widgets.EllipseSelector.draw_shape(self,extents)
matplotlib.widgets.Lasso(self,ax,xy,callback=None,useblit=True)
matplotlib.widgets.Lasso.__init__(self,ax,xy,callback=None,useblit=True)
matplotlib.widgets.Lasso.onmove(self,event)
matplotlib.widgets.Lasso.onrelease(self,event)
matplotlib.widgets.LassoSelector(self,ax,onselect=None,useblit=True,lineprops=None,button=None)
matplotlib.widgets.LassoSelector.__init__(self,ax,onselect=None,useblit=True,lineprops=None,button=None)
matplotlib.widgets.LassoSelector._onmove(self,event)
matplotlib.widgets.LassoSelector._press(self,event)
matplotlib.widgets.LassoSelector._release(self,event)
matplotlib.widgets.LassoSelector.onpress(self,event)
matplotlib.widgets.LassoSelector.onrelease(self,event)
matplotlib.widgets.LockDraw(self)
matplotlib.widgets.LockDraw.__init__(self)
matplotlib.widgets.LockDraw.available(self,o)
matplotlib.widgets.LockDraw.isowner(self,o)
matplotlib.widgets.LockDraw.locked(self)
matplotlib.widgets.LockDraw.release(self,o)
matplotlib.widgets.MultiCursor(self,canvas,axes,useblit=True,horizOn=False,vertOn=True,**lineprops)
matplotlib.widgets.MultiCursor.__init__(self,canvas,axes,useblit=True,horizOn=False,vertOn=True,**lineprops)
matplotlib.widgets.MultiCursor._update(self)
matplotlib.widgets.MultiCursor.clear(self,event)
matplotlib.widgets.MultiCursor.connect(self)
matplotlib.widgets.MultiCursor.disconnect(self)
matplotlib.widgets.MultiCursor.onmove(self,event)
matplotlib.widgets.PolygonSelector(self,ax,onselect,useblit=False,lineprops=None,markerprops=None,vertex_select_radius=15)
matplotlib.widgets.PolygonSelector.__init__(self,ax,onselect,useblit=False,lineprops=None,markerprops=None,vertex_select_radius=15)
matplotlib.widgets.PolygonSelector._draw_polygon(self)
matplotlib.widgets.PolygonSelector._on_key_press(self,event)
matplotlib.widgets.PolygonSelector._on_key_release(self,event)
matplotlib.widgets.PolygonSelector._onmove(self,event)
matplotlib.widgets.PolygonSelector._press(self,event)
matplotlib.widgets.PolygonSelector._release(self,event)
matplotlib.widgets.PolygonSelector.onmove(self,event)
matplotlib.widgets.PolygonSelector.verts(self)
matplotlib.widgets.RadioButtons(self,ax,labels,active=0,activecolor='blue')
matplotlib.widgets.RadioButtons.__init__(self,ax,labels,active=0,activecolor='blue')
matplotlib.widgets.RadioButtons._clicked(self,event)
matplotlib.widgets.RadioButtons.disconnect(self,cid)
matplotlib.widgets.RadioButtons.on_clicked(self,func)
matplotlib.widgets.RadioButtons.set_active(self,index)
matplotlib.widgets.RectangleSelector(self,ax,onselect,drawtype='box',minspanx=None,minspany=None,useblit=False,lineprops=None,rectprops=None,spancoords='data',button=None,maxdist=10,marker_props=None,interactive=False,state_modifier_keys=None)
matplotlib.widgets.RectangleSelector.__init__(self,ax,onselect,drawtype='box',minspanx=None,minspany=None,useblit=False,lineprops=None,rectprops=None,spancoords='data',button=None,maxdist=10,marker_props=None,interactive=False,state_modifier_keys=None)
matplotlib.widgets.RectangleSelector._onmove(self,event)
matplotlib.widgets.RectangleSelector._press(self,event)
matplotlib.widgets.RectangleSelector._rect_bbox(self)
matplotlib.widgets.RectangleSelector._release(self,event)
matplotlib.widgets.RectangleSelector._set_active_handle(self,event)
matplotlib.widgets.RectangleSelector.center(self)
matplotlib.widgets.RectangleSelector.corners(self)
matplotlib.widgets.RectangleSelector.draw_shape(self,extents)
matplotlib.widgets.RectangleSelector.edge_centers(self)
matplotlib.widgets.RectangleSelector.extents(self)
matplotlib.widgets.RectangleSelector.extents(self,extents)
matplotlib.widgets.RectangleSelector.geometry(self)
matplotlib.widgets.Slider(self,ax,label,valmin,valmax,valinit=0.5,valfmt='%1.2f',closedmin=True,closedmax=True,slidermin=None,slidermax=None,dragging=True,valstep=None,**kwargs)
matplotlib.widgets.Slider.__init__(self,ax,label,valmin,valmax,valinit=0.5,valfmt='%1.2f',closedmin=True,closedmax=True,slidermin=None,slidermax=None,dragging=True,valstep=None,**kwargs)
matplotlib.widgets.Slider._update(self,event)
matplotlib.widgets.Slider._value_in_bounds(self,val)
matplotlib.widgets.Slider.disconnect(self,cid)
matplotlib.widgets.Slider.on_changed(self,func)
matplotlib.widgets.Slider.reset(self)
matplotlib.widgets.Slider.set_val(self,val)
matplotlib.widgets.SpanSelector(self,ax,onselect,direction,minspan=None,useblit=False,rectprops=None,onmove_callback=None,span_stays=False,button=None)
matplotlib.widgets.SpanSelector.__init__(self,ax,onselect,direction,minspan=None,useblit=False,rectprops=None,onmove_callback=None,span_stays=False,button=None)
matplotlib.widgets.SpanSelector._onmove(self,event)
matplotlib.widgets.SpanSelector._press(self,event)
matplotlib.widgets.SpanSelector._release(self,event)
matplotlib.widgets.SpanSelector.ignore(self,event)
matplotlib.widgets.SpanSelector.new_axes(self,ax)
matplotlib.widgets.SubplotTool(self,targetfig,toolfig)
matplotlib.widgets.SubplotTool.__init__(self,targetfig,toolfig)
matplotlib.widgets.SubplotTool.funcbottom(self,val)
matplotlib.widgets.SubplotTool.funchspace(self,val)
matplotlib.widgets.SubplotTool.funcleft(self,val)
matplotlib.widgets.SubplotTool.funcright(self,val)
matplotlib.widgets.SubplotTool.functop(self,val)
matplotlib.widgets.SubplotTool.funcwspace(self,val)
matplotlib.widgets.TextBox(self,ax,label,initial='',color='.95',hovercolor='1',label_pad=0.01)
matplotlib.widgets.TextBox.__init__(self,ax,label,initial='',color='.95',hovercolor='1',label_pad=0.01)
matplotlib.widgets.TextBox._click(self,event)
matplotlib.widgets.TextBox._keypress(self,event)
matplotlib.widgets.TextBox._make_text_disp(self,string)
matplotlib.widgets.TextBox._motion(self,event)
matplotlib.widgets.TextBox._notify_change_observers(self)
matplotlib.widgets.TextBox._notify_submit_observers(self)
matplotlib.widgets.TextBox._release(self,event)
matplotlib.widgets.TextBox._rendercursor(self)
matplotlib.widgets.TextBox._resize(self,event)
matplotlib.widgets.TextBox.begin_typing(self,x)
matplotlib.widgets.TextBox.disconnect(self,cid)
matplotlib.widgets.TextBox.on_submit(self,func)
matplotlib.widgets.TextBox.on_text_change(self,func)
matplotlib.widgets.TextBox.position_cursor(self,x)
matplotlib.widgets.TextBox.set_val(self,val)
matplotlib.widgets.TextBox.stop_typing(self)
matplotlib.widgets.ToolHandles(self,ax,x,y,marker='o',marker_props=None,useblit=True)
matplotlib.widgets.ToolHandles.__init__(self,ax,x,y,marker='o',marker_props=None,useblit=True)
matplotlib.widgets.ToolHandles.closest(self,x,y)
matplotlib.widgets.ToolHandles.set_animated(self,val)
matplotlib.widgets.ToolHandles.set_data(self,pts,y=None)
matplotlib.widgets.ToolHandles.set_visible(self,val)
matplotlib.widgets.ToolHandles.x(self)
matplotlib.widgets.ToolHandles.y(self)
matplotlib.widgets.Widget(object)
matplotlib.widgets.Widget.get_active(self)
matplotlib.widgets.Widget.ignore(self,event)
matplotlib.widgets.Widget.set_active(self,active)
matplotlib.widgets._SelectorWidget(self,ax,onselect,useblit=False,button=None,state_modifier_keys=None)
matplotlib.widgets._SelectorWidget.__init__(self,ax,onselect,useblit=False,button=None,state_modifier_keys=None)
matplotlib.widgets._SelectorWidget._clean_event(self,event)
matplotlib.widgets._SelectorWidget._get_data(self,event)
matplotlib.widgets._SelectorWidget._on_key_press(self,event)
matplotlib.widgets._SelectorWidget._on_key_release(self,event)
matplotlib.widgets._SelectorWidget._on_scroll(self,event)
matplotlib.widgets._SelectorWidget._onmove(self,event)
matplotlib.widgets._SelectorWidget._press(self,event)
matplotlib.widgets._SelectorWidget._release(self,event)
matplotlib.widgets._SelectorWidget.connect_default_events(self)
matplotlib.widgets._SelectorWidget.ignore(self,event)
matplotlib.widgets._SelectorWidget.on_key_press(self,event)
matplotlib.widgets._SelectorWidget.on_key_release(self,event)
matplotlib.widgets._SelectorWidget.on_scroll(self,event)
matplotlib.widgets._SelectorWidget.onmove(self,event)
matplotlib.widgets._SelectorWidget.press(self,event)
matplotlib.widgets._SelectorWidget.release(self,event)
matplotlib.widgets._SelectorWidget.set_active(self,active)
matplotlib.widgets._SelectorWidget.set_visible(self,visible)
matplotlib.widgets._SelectorWidget.update(self)
matplotlib.widgets._SelectorWidget.update_background(self,event)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/dviread.py----------------------------------------
A:matplotlib.dviread._log->logging.getLogger(__name__)
A:matplotlib.dviread._dvistate->matplotlib.cbook.Bunch(pre=0, outer=1, inpage=2, post_post=3, finale=4)
A:matplotlib.dviread.Page->namedtuple('Page', 'text boxes height width descent')
A:matplotlib.dviread.Text->namedtuple('Text', 'x y font glyph width')
A:matplotlib.dviread.Box->namedtuple('Box', 'x y height width')
A:matplotlib.dviread._arg_mapping->dict(raw=_arg_raw, u1=partial(_arg, 1, False), u4=partial(_arg, 4, False), s4=partial(_arg, 4, True), slen=_arg_slen, olen1=_arg_olen1, slen1=_arg_slen1, ulen1=_arg_ulen1)
A:matplotlib.dviread._dispatch->partial(_dispatch, _dtable)
A:matplotlib.dviread.self.file->open(filename, 'rb')
A:matplotlib.dviread.self.baseline->self._get_baseline(filename)
A:matplotlib.dviread.(base, ext)->os.path.splitext(filename)
A:matplotlib.dviread.l->fd.read().split()
A:matplotlib.dviread.have_page->self._read()
A:matplotlib.dviread.(h, e)->font._height_depth_of(g)
A:matplotlib.dviread.minx->min(minx, x)
A:matplotlib.dviread.miny->min(miny, y - h)
A:matplotlib.dviread.maxx->max(maxx, x + w)
A:matplotlib.dviread.maxy->max(maxy, y + e)
A:matplotlib.dviread.maxy_pure->max(maxy_pure, y)
A:matplotlib.dviread.byte->ord(self.file.read(1)[0])
A:matplotlib.dviread.str->self.file.read(nbytes)
A:matplotlib.dviread.value->metric.get(char, None)
A:matplotlib.dviread.newf->DviFont(scale=_mul2012(scale, f._scale), tfm=f._tfm, texname=f.texname, vf=f._vf)
A:matplotlib.dviread.(self.h, self.v, self.w, self.x, self.y, self.z)->self.stack.pop()
A:matplotlib.dviread.special->self.file.read(datalen)
A:matplotlib.dviread.n->self.file.read(a + l)
A:matplotlib.dviread.fontname->n[-l:].decode('ascii')
A:matplotlib.dviread.tfm->_tfmfile(fontname)
A:matplotlib.dviread.vf->_vffile(fontname)
A:matplotlib.dviread.self.fonts[k]->DviFont(scale=s, tfm=tfm, texname=n, vf=vf)
A:matplotlib.dviread.comment->self.file.read(k)
A:matplotlib.dviread.width->self._tfm.width.get(char, None)
A:matplotlib.dviread.packet_ends->self._init_packet(byte)
A:matplotlib.dviread.k->self._arg(byte - 242, byte == 246)
A:matplotlib.dviread.x->self.file.read(k)
A:matplotlib.dviread.self._chars[packet_char]->Page(text=self.text, boxes=self.boxes, width=packet_width, height=None, descent=None)
A:matplotlib.dviread.header1->file.read(24)
A:matplotlib.dviread.(lh, bc, ec, nw, nh, nd)->struct.unpack('!6H', header1[2:14])
A:matplotlib.dviread.header2->file.read(4 * lh)
A:matplotlib.dviread.(self.checksum, self.design_size)->struct.unpack('!2I', header2[:8])
A:matplotlib.dviread.char_info->file.read(4 * (ec - bc + 1))
A:matplotlib.dviread.widths->file.read(4 * nw)
A:matplotlib.dviread.heights->file.read(4 * nh)
A:matplotlib.dviread.depths->file.read(4 * nd)
A:matplotlib.dviread.byte0->ord(char_info[4 * idx])
A:matplotlib.dviread.byte1->ord(char_info[4 * idx + 1])
A:matplotlib.dviread.self.width[char]->_fix2comp(widths[byte0])
A:matplotlib.dviread.self.height[char]->_fix2comp(heights[byte1 >> 4])
A:matplotlib.dviread.self.depth[char]->_fix2comp(depths[byte1 & 15])
A:matplotlib.dviread.PsFont->namedtuple('Font', 'texname psname effects encoding filename')
A:matplotlib.dviread.self._filename->find_tex_file(texname + suffix).decode(encoding, errors='replace')
A:matplotlib.dviread.msg->textwrap.fill(msg, break_on_hyphens=False, break_long_words=False)
A:matplotlib.dviread.fn->find_tex_file(fn)
A:matplotlib.dviread.enc->find_tex_file(result.encoding)
A:matplotlib.dviread.empty_re->re.compile(b'%|\\s*$')
A:matplotlib.dviread.word_re->re.compile(b'(?x) (?:\n                 "<\\[ (?P<enc1>  [^"]+    )" | # quoted encoding marked by [\n                 "<   (?P<enc2>  [^"]+.enc)" | # quoted encoding, ends in .enc\n                 "<<? (?P<file1> [^"]+    )" | # quoted font file name\n                 "    (?P<eff1>  [^"]+    )" | # quoted effects or font name\n                 <\\[  (?P<enc3>  \\S+      )  | # encoding marked by [\n                 <    (?P<enc4>  \\S+  .enc)  | # encoding, ends in .enc\n                 <<?  (?P<file2> \\S+      )  | # font file name\n                      (?P<eff2>  \\S+      )    # effects or font name\n            )')
A:matplotlib.dviread.effects_re->re.compile(b'(?x) (?P<slant> -?[0-9]*(?:\\.[0-9]+)) \\s* SlantFont\n                    | (?P<extend>-?[0-9]*(?:\\.[0-9]+)) \\s* ExtendFont')
A:matplotlib.dviread.words->re.compile(b'(?x) (?:\n                 "<\\[ (?P<enc1>  [^"]+    )" | # quoted encoding marked by [\n                 "<   (?P<enc2>  [^"]+.enc)" | # quoted encoding, ends in .enc\n                 "<<? (?P<file1> [^"]+    )" | # quoted font file name\n                 "    (?P<eff1>  [^"]+    )" | # quoted effects or font name\n                 <\\[  (?P<enc3>  \\S+      )  | # encoding marked by [\n                 <    (?P<enc4>  \\S+  .enc)  | # encoding, ends in .enc\n                 <<?  (?P<file2> \\S+      )  | # font file name\n                      (?P<eff2>  \\S+      )    # effects or font name\n            )').finditer(line)
A:matplotlib.dviread.w->next(words)
A:matplotlib.dviread.slant->match.group('slant')
A:matplotlib.dviread.effects_dict['slant']->float(slant)
A:matplotlib.dviread.effects_dict['extend']->float(match.group('extend'))
A:matplotlib.dviread.self._font[texname]->PsFont(texname=texname, psname=psname, effects=effects_dict, encoding=encoding, filename=filename)
A:matplotlib.dviread.self.encoding->self._parse(file)
A:matplotlib.dviread.data->b''.join(lines)
A:matplotlib.dviread.beginning->b''.join(lines).find(b'[')
A:matplotlib.dviread.end->b''.join(lines).find(b']')
A:matplotlib.dviread.filename->find_tex_file(texname + suffix)
A:matplotlib.dviread.format->format.decode('utf-8', errors='replace').decode('utf-8', errors='replace')
A:matplotlib.dviread.pipe->matplotlib.compat.subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:matplotlib.dviread.result->matplotlib.compat.subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].rstrip()
A:matplotlib.dviread._tfmfile->partial(_fontfile, Tfm, '.tfm')
A:matplotlib.dviread._vffile->partial(_fontfile, Vf, '.vf')
A:matplotlib.dviread.dpi->float(sys.argv[2])
A:matplotlib.dviread.fontmap->PsfontsMap(find_tex_file('pdftex.map'))
matplotlib.dviread.Dvi(self,filename,dpi)
matplotlib.dviread.Dvi.__enter__(self)
matplotlib.dviread.Dvi.__exit__(self,etype,evalue,etrace)
matplotlib.dviread.Dvi.__init__(self,filename,dpi)
matplotlib.dviread.Dvi.__iter__(self)
matplotlib.dviread.Dvi._arg(self,nbytes,signed=False)
matplotlib.dviread.Dvi._bop(self,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,p)
matplotlib.dviread.Dvi._down(self,a)
matplotlib.dviread.Dvi._down_y(self,new_y)
matplotlib.dviread.Dvi._down_z(self,new_z)
matplotlib.dviread.Dvi._eop(self,_)
matplotlib.dviread.Dvi._fnt_def(self,k,c,s,d,a,l)
matplotlib.dviread.Dvi._fnt_def_real(self,k,c,s,d,a,l)
matplotlib.dviread.Dvi._fnt_num(self,new_f)
matplotlib.dviread.Dvi._fnt_num_immediate(self,k)
matplotlib.dviread.Dvi._get_baseline(self,filename)
matplotlib.dviread.Dvi._malformed(self,offset)
matplotlib.dviread.Dvi._nop(self,_)
matplotlib.dviread.Dvi._output(self)
matplotlib.dviread.Dvi._pop(self,_)
matplotlib.dviread.Dvi._post(self,_)
matplotlib.dviread.Dvi._post_post(self,_)
matplotlib.dviread.Dvi._pre(self,i,num,den,mag,k)
matplotlib.dviread.Dvi._push(self,_)
matplotlib.dviread.Dvi._put_char(self,char)
matplotlib.dviread.Dvi._put_char_real(self,char)
matplotlib.dviread.Dvi._put_rule(self,a,b)
matplotlib.dviread.Dvi._put_rule_real(self,a,b)
matplotlib.dviread.Dvi._read(self)
matplotlib.dviread.Dvi._right(self,b)
matplotlib.dviread.Dvi._right_w(self,new_w)
matplotlib.dviread.Dvi._right_x(self,new_x)
matplotlib.dviread.Dvi._set_char(self,char)
matplotlib.dviread.Dvi._set_char_immediate(self,char)
matplotlib.dviread.Dvi._set_rule(self,a,b)
matplotlib.dviread.Dvi._xxx(self,datalen)
matplotlib.dviread.Dvi.close(self)
matplotlib.dviread.DviFont(self,scale,tfm,texname,vf)
matplotlib.dviread.DviFont.__eq__(self,other)
matplotlib.dviread.DviFont.__init__(self,scale,tfm,texname,vf)
matplotlib.dviread.DviFont.__ne__(self,other)
matplotlib.dviread.DviFont._height_depth_of(self,char)
matplotlib.dviread.DviFont._width_of(self,char)
matplotlib.dviread.Encoding(self,filename)
matplotlib.dviread.Encoding.__init__(self,filename)
matplotlib.dviread.Encoding.__iter__(self)
matplotlib.dviread.Encoding._parse(self,file)
matplotlib.dviread.PsfontsMap(self,filename)
matplotlib.dviread.PsfontsMap.__getitem__(self,texname)
matplotlib.dviread.PsfontsMap.__init__(self,filename)
matplotlib.dviread.PsfontsMap._parse(self,file)
matplotlib.dviread.Tfm(self,filename)
matplotlib.dviread.Tfm.__init__(self,filename)
matplotlib.dviread.Vf(self,filename)
matplotlib.dviread.Vf.__getitem__(self,code)
matplotlib.dviread.Vf.__init__(self,filename)
matplotlib.dviread.Vf._finalize_packet(self,packet_char,packet_width)
matplotlib.dviread.Vf._init_packet(self,pl)
matplotlib.dviread.Vf._pre(self,i,x,cs,ds)
matplotlib.dviread.Vf._read(self)
matplotlib.dviread._arg(bytes,signed,dvi,_)
matplotlib.dviread._arg_olen1(dvi,delta)
matplotlib.dviread._arg_raw(dvi,delta)
matplotlib.dviread._arg_slen(dvi,delta)
matplotlib.dviread._arg_slen1(dvi,delta)
matplotlib.dviread._arg_ulen1(dvi,delta)
matplotlib.dviread._dispatch(table,min,max=None,state=None,args=('raw',))
matplotlib.dviread._fix2comp(num)
matplotlib.dviread._fontfile(cls,suffix,texname)
matplotlib.dviread._mul2012(num1,num2)
matplotlib.dviread.find_tex_file(filename,format=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_layoutbox.py----------------------------------------
A:matplotlib._layoutbox._log->logging.getLogger(__name__)
A:matplotlib._layoutbox.renderer->FigureCanvasAgg(fig).get_renderer()
A:matplotlib._layoutbox.canvas->FigureCanvasAgg(fig)
A:matplotlib._layoutbox.self.solver->kiwisolver.Solver()
A:matplotlib._layoutbox.self.top->Variable(str(sn + 'top'))
A:matplotlib._layoutbox.self.bottom->Variable(str(sn + 'bottom'))
A:matplotlib._layoutbox.self.left->Variable(str(sn + 'left'))
A:matplotlib._layoutbox.self.right->Variable(str(sn + 'right'))
A:matplotlib._layoutbox.self.width->Variable(str(sn + 'width'))
A:matplotlib._layoutbox.self.height->Variable(str(sn + 'height'))
A:matplotlib._layoutbox.self.h_center->Variable(str(sn + 'h_center'))
A:matplotlib._layoutbox.self.v_center->Variable(str(sn + 'v_center'))
A:matplotlib._layoutbox.self.min_width->Variable(str(sn + 'min_width'))
A:matplotlib._layoutbox.self.min_height->Variable(str(sn + 'min_height'))
A:matplotlib._layoutbox.self.pref_width->Variable(str(sn + 'pref_width'))
A:matplotlib._layoutbox.self.pref_height->Variable(str(sn + 'pref_height'))
A:matplotlib._layoutbox.self.left_margin->Variable(str(sn + 'left_margin'))
A:matplotlib._layoutbox.self.right_margin->Variable(str(sn + 'right_margin'))
A:matplotlib._layoutbox.self.bottom_margin->Variable(str(sn + 'bottom_margin'))
A:matplotlib._layoutbox.self.top_margin->Variable(str(sn + 'top_margin'))
A:matplotlib._layoutbox.self.left_margin_min->Variable(str(sn + 'left_margin_min'))
A:matplotlib._layoutbox.self.right_margin_min->Variable(str(sn + 'right_margin_min'))
A:matplotlib._layoutbox.self.bottom_margin_min->Variable(str(sn + 'bottom_margin_min'))
A:matplotlib._layoutbox.self.top_margin_min->Variable(str(sn + 'top_margin_min'))
A:matplotlib._layoutbox.lb->LayoutBox(parent=self, name=name, artist=artist, pos=pos)
A:matplotlib._layoutbox.gs->subspec.get_gridspec()
A:matplotlib._layoutbox.(nrows, ncols)->subspec.get_gridspec().get_geometry()
A:matplotlib._layoutbox.tr->float(sum(gs._col_width_ratios))
A:matplotlib._layoutbox.cellHs->numpy.add.accumulate(np.ravel(list(zip(sepHeights, cellHeights))))
A:matplotlib._layoutbox.cellWs->numpy.add.accumulate(np.ravel(list(zip(sepWidths, cellWidths))))
A:matplotlib._layoutbox.(rowNum, colNum)->divmod(subspec.num1, ncols)
A:matplotlib._layoutbox.(rowNum2, colNum2)->divmod(subspec.num2, ncols)
A:matplotlib._layoutbox.figBottom->min(figBottom, figBottom2)
A:matplotlib._layoutbox.figLeft->min(figLeft, figLeft2)
A:matplotlib._layoutbox.figTop->max(figTop, figTop2)
A:matplotlib._layoutbox.figRight->max(figRight, figRight2)
A:matplotlib._layoutbox.height_ratios->numpy.ones(len(boxes))
A:matplotlib._layoutbox.width_ratios->numpy.ones(len(boxes))
A:matplotlib._layoutbox._layoutboxobjnum->itertools.count()
A:matplotlib._layoutbox.ax->fig.add_axes([0.0, 0.0, 1.0, 1.0])
A:matplotlib._layoutbox.rect->child.get_rect()
matplotlib._layoutbox.LayoutBox(self,parent=None,name='',tightwidth=False,tightheight=False,artist=None,lower_left=(0,0),upper_right=(1,1),pos=False,subplot=False,h_pad=None,w_pad=None)
matplotlib._layoutbox.LayoutBox.__init__(self,parent=None,name='',tightwidth=False,tightheight=False,artist=None,lower_left=(0,0),upper_right=(1,1),pos=False,subplot=False,h_pad=None,w_pad=None)
matplotlib._layoutbox.LayoutBox.__repr__(self)
matplotlib._layoutbox.LayoutBox._is_gridspec_layoutbox(self)
matplotlib._layoutbox.LayoutBox._is_subplotspec_layoutbox(self)
matplotlib._layoutbox.LayoutBox.add_child(self,child)
matplotlib._layoutbox.LayoutBox.add_constraints(self)
matplotlib._layoutbox.LayoutBox.constrain_bottom(self,bottom,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_bottom_margin(self,margin,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_geometry(self,left,bottom,right,top,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_height(self,height,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_height_min(self,height,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_left(self,left,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_left_margin(self,margin,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_margins(self)
matplotlib._layoutbox.LayoutBox.constrain_right(self,right,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_right_margin(self,margin,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_same(self,other,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_top(self,top,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_top_margin(self,margin,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_width(self,width,strength='strong')
matplotlib._layoutbox.LayoutBox.constrain_width_min(self,width,strength='strong')
matplotlib._layoutbox.LayoutBox.edit_bottom_margin_min(self,margin)
matplotlib._layoutbox.LayoutBox.edit_height(self,height,strength='strong')
matplotlib._layoutbox.LayoutBox.edit_left_margin_min(self,margin)
matplotlib._layoutbox.LayoutBox.edit_right_margin_min(self,margin)
matplotlib._layoutbox.LayoutBox.edit_top_margin_min(self,margin)
matplotlib._layoutbox.LayoutBox.edit_width(self,width,strength='strong')
matplotlib._layoutbox.LayoutBox.find_child_subplots(self)
matplotlib._layoutbox.LayoutBox.get_rect(self)
matplotlib._layoutbox.LayoutBox.hard_constraints(self)
matplotlib._layoutbox.LayoutBox.layout_from_subplotspec(self,subspec,name='',artist=None,pos=False)
matplotlib._layoutbox.LayoutBox.parent_constrain(self)
matplotlib._layoutbox.LayoutBox.remove_child(self,child)
matplotlib._layoutbox.LayoutBox.set_parent(self,parent)
matplotlib._layoutbox.LayoutBox.soft_constraints(self)
matplotlib._layoutbox.LayoutBox.update_variables(self)
matplotlib._layoutbox.align(boxes,attr,strength='strong')
matplotlib._layoutbox.get_renderer(fig)
matplotlib._layoutbox.hpack(boxes,padding=0,strength='strong')
matplotlib._layoutbox.hstack(boxes,padding=0,strength='strong')
matplotlib._layoutbox.hstackeq(boxes,padding=0,width_ratios=None)
matplotlib._layoutbox.match_bottom_margins(boxes,levels=1)
matplotlib._layoutbox.match_height_margins(boxes,levels=1)
matplotlib._layoutbox.match_heights(boxes,height_ratios=None,strength='medium')
matplotlib._layoutbox.match_left_margins(boxes,levels=1)
matplotlib._layoutbox.match_margins(boxes,levels=1)
matplotlib._layoutbox.match_right_margins(boxes,levels=1)
matplotlib._layoutbox.match_top_margins(boxes,levels=1)
matplotlib._layoutbox.match_width_margins(boxes,levels=1)
matplotlib._layoutbox.match_widths(boxes,width_ratios=None,strength='medium')
matplotlib._layoutbox.nonechildren(lb)
matplotlib._layoutbox.nonetree(lb)
matplotlib._layoutbox.plot_children(fig,box,level=0,printit=True)
matplotlib._layoutbox.print_children(lb)
matplotlib._layoutbox.print_tree(lb)
matplotlib._layoutbox.seq_id()
matplotlib._layoutbox.vpack(boxes,padding=0,strength='strong')
matplotlib._layoutbox.vstack(boxes,padding=0,strength='strong')
matplotlib._layoutbox.vstackeq(boxes,padding=0,height_ratios=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/animation.py----------------------------------------
A:matplotlib.animation._log->logging.getLogger(__name__)
A:matplotlib.animation.x->numpy.nextafter(x, -np.inf)
A:matplotlib.animation.self.avail->dict()
A:matplotlib.animation.self._registered->dict()
A:matplotlib.animation.writers->MovieWriterRegistry()
A:matplotlib.animation.self.extra_args->list(rcParams[self.args_key])
A:matplotlib.animation.self.metadata->dict()
A:matplotlib.animation.(w, h)->self.fig.get_size_inches()
A:matplotlib.animation.(wo, ho)->self.fig.get_size_inches()
A:matplotlib.animation.(self._w, self._h)->self._adjust_frame_size()
A:matplotlib.animation.command->self._args()
A:matplotlib.animation.self._proc->ProcessStandin()
A:matplotlib.animation.(out, err)->self._proc.communicate()
A:matplotlib.animation.bin_path->cls.bin_path()
A:matplotlib.animation.p->matplotlib.compat.subprocess.Popen(bin_path, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, creationflags=subprocess_creation_flags)
A:matplotlib.animation.self._temp_names->list()
A:matplotlib.animation.buf->BytesIO()
A:matplotlib.animation.renderer->self._fig.canvas.get_renderer()
A:matplotlib.animation.(_, err)->process.communicate()
A:matplotlib.animation.hkey->six.moves.winreg.OpenKeyEx(winreg.HKEY_LOCAL_MACHINE, 'Software\\Imagemagick\\Current', 0, winreg.KEY_QUERY_VALUE | flag)
A:matplotlib.animation.self.default_mode->default_mode.lower()
A:matplotlib.animation.(root, ext)->os.path.splitext(outfile)
A:matplotlib.animation.frame_prefix->os.path.join(frame_dir, 'frame')
A:matplotlib.animation.f->BytesIO()
A:matplotlib.animation.imgdata64->encodebytes(f.getvalue()).decode('ascii')
A:matplotlib.animation.fill_frames->_included_frames(self._temp_names, self.frame_format)
A:matplotlib.animation.mode_dict->dict(once_checked='', loop_checked='', reflect_checked='')
A:matplotlib.animation.self.frame_seq->self.new_frame_seq()
A:matplotlib.animation.self._first_draw_id->self._fig.canvas.mpl_connect('draw_event', self._start)
A:matplotlib.animation.self._close_id->self._fig.canvas.mpl_connect('close_event', self._stop)
A:matplotlib.animation.writer->Writer(codec='h264', bitrate=rcParams['animation.bitrate'], fps=1000.0 / self._interval)
A:matplotlib.animation.framedata->next(self.frame_seq)
A:matplotlib.animation.bg_cache[a.axes]->a.figure.canvas.copy_from_bbox(a.axes.bbox)
A:matplotlib.animation.axes->set((a.axes for a in artists))
A:matplotlib.animation.self._blit_cache->dict()
A:matplotlib.animation.self._resize_id->self._fig.canvas.mpl_connect('resize_event', self._handle_resize)
A:matplotlib.animation.vid64->encodebytes(video.read())
A:matplotlib.animation.vid_len->len(vid64)
A:matplotlib.animation.self._base64_video->encodebytes(video.read()).decode('ascii')
A:matplotlib.animation.self._video_size->'width="{}" height="{}"'.format(*writer.frame_size)
A:matplotlib.animation.html->fobj.read()
A:matplotlib.animation.event_source->fig.canvas.new_timer()
A:matplotlib.animation.still_going->Animation._step(self, *args)
A:matplotlib.animation.figs->set()
A:matplotlib.animation.self.save_count->int(self.save_count)
A:matplotlib.animation.self._old_saved_seq->list(self._save_seq)
A:matplotlib.animation.frame_seq->self.new_frame_seq()
A:matplotlib.animation.self._drawn_artists->self._func(framedata, *self._args)
matplotlib.animation.AVConvBase(FFMpegBase)
matplotlib.animation.AVConvBase._handle_subprocess(cls,process)
matplotlib.animation.AVConvFileWriter(AVConvBase,FFMpegFileWriter)
matplotlib.animation.AVConvWriter(AVConvBase,FFMpegWriter)
matplotlib.animation.AbstractMovieWriter(six.with_metaclass(abc.ABCMeta))
matplotlib.animation.AbstractMovieWriter.finish(self)
matplotlib.animation.AbstractMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.AbstractMovieWriter.saving(self,fig,outfile,dpi,*args,**kwargs)
matplotlib.animation.AbstractMovieWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.Animation(self,fig,event_source=None,blit=False)
matplotlib.animation.Animation.__init__(self,fig,event_source=None,blit=False)
matplotlib.animation.Animation._blit_clear(self,artists,bg_cache)
matplotlib.animation.Animation._blit_draw(self,artists,bg_cache)
matplotlib.animation.Animation._draw_frame(self,framedata)
matplotlib.animation.Animation._draw_next_frame(self,framedata,blit)
matplotlib.animation.Animation._end_redraw(self,evt)
matplotlib.animation.Animation._handle_resize(self,*args)
matplotlib.animation.Animation._init_draw(self)
matplotlib.animation.Animation._post_draw(self,framedata,blit)
matplotlib.animation.Animation._pre_draw(self,framedata,blit)
matplotlib.animation.Animation._repr_html_(self)
matplotlib.animation.Animation._setup_blit(self)
matplotlib.animation.Animation._start(self,*args)
matplotlib.animation.Animation._step(self,*args)
matplotlib.animation.Animation._stop(self,*args)
matplotlib.animation.Animation.new_frame_seq(self)
matplotlib.animation.Animation.new_saved_frame_seq(self)
matplotlib.animation.Animation.save(self,filename,writer=None,fps=None,dpi=None,codec=None,bitrate=None,extra_args=None,metadata=None,extra_anim=None,savefig_kwargs=None)
matplotlib.animation.Animation.to_html5_video(self,embed_limit=None)
matplotlib.animation.Animation.to_jshtml(self,fps=None,embed_frames=True,default_mode=None)
matplotlib.animation.ArtistAnimation(self,fig,artists,*args,**kwargs)
matplotlib.animation.ArtistAnimation.__init__(self,fig,artists,*args,**kwargs)
matplotlib.animation.ArtistAnimation._draw_frame(self,artists)
matplotlib.animation.ArtistAnimation._init_draw(self)
matplotlib.animation.ArtistAnimation._pre_draw(self,framedata,blit)
matplotlib.animation.FFMpegBase(object)
matplotlib.animation.FFMpegBase._handle_subprocess(cls,process)
matplotlib.animation.FFMpegBase.output_args(self)
matplotlib.animation.FFMpegFileWriter(FFMpegBase,FileMovieWriter)
matplotlib.animation.FFMpegFileWriter._args(self)
matplotlib.animation.FFMpegWriter(FFMpegBase,MovieWriter)
matplotlib.animation.FFMpegWriter._args(self)
matplotlib.animation.FileMovieWriter(self,*args,**kwargs)
matplotlib.animation.FileMovieWriter.__init__(self,*args,**kwargs)
matplotlib.animation.FileMovieWriter._base_temp_name(self)
matplotlib.animation.FileMovieWriter._frame_sink(self)
matplotlib.animation.FileMovieWriter.cleanup(self)
matplotlib.animation.FileMovieWriter.finish(self)
matplotlib.animation.FileMovieWriter.frame_format(self)
matplotlib.animation.FileMovieWriter.frame_format(self,frame_format)
matplotlib.animation.FileMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.FileMovieWriter.setup(self,fig,outfile,dpi=None,frame_prefix='_tmp',clear_temp=True)
matplotlib.animation.FuncAnimation(self,fig,func,frames=None,init_func=None,fargs=None,save_count=None,**kwargs)
matplotlib.animation.FuncAnimation.__init__(self,fig,func,frames=None,init_func=None,fargs=None,save_count=None,**kwargs)
matplotlib.animation.FuncAnimation._draw_frame(self,framedata)
matplotlib.animation.FuncAnimation._init_draw(self)
matplotlib.animation.FuncAnimation.new_frame_seq(self)
matplotlib.animation.FuncAnimation.new_saved_frame_seq(self)
matplotlib.animation.HTMLWriter(self,fps=30,codec=None,bitrate=None,extra_args=None,metadata=None,embed_frames=False,default_mode='loop',embed_limit=None)
matplotlib.animation.HTMLWriter.__init__(self,fps=30,codec=None,bitrate=None,extra_args=None,metadata=None,embed_frames=False,default_mode='loop',embed_limit=None)
matplotlib.animation.HTMLWriter._run(self)
matplotlib.animation.HTMLWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.HTMLWriter.isAvailable(cls)
matplotlib.animation.HTMLWriter.setup(self,fig,outfile,dpi,frame_dir=None)
matplotlib.animation.ImageMagickBase(object)
matplotlib.animation.ImageMagickBase._init_from_registry(cls)
matplotlib.animation.ImageMagickBase.delay(self)
matplotlib.animation.ImageMagickBase.isAvailable(cls)
matplotlib.animation.ImageMagickBase.output_args(self)
matplotlib.animation.ImageMagickFileWriter(ImageMagickBase,FileMovieWriter)
matplotlib.animation.ImageMagickFileWriter._args(self)
matplotlib.animation.ImageMagickWriter(ImageMagickBase,MovieWriter)
matplotlib.animation.ImageMagickWriter._args(self)
matplotlib.animation.MovieWriter(self,fps=5,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.animation.MovieWriter.__init__(self,fps=5,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.animation.MovieWriter._adjust_frame_size(self)
matplotlib.animation.MovieWriter._args(self)
matplotlib.animation.MovieWriter._frame_sink(self)
matplotlib.animation.MovieWriter._handle_subprocess(cls,process)
matplotlib.animation.MovieWriter._run(self)
matplotlib.animation.MovieWriter.bin_path(cls)
matplotlib.animation.MovieWriter.cleanup(self)
matplotlib.animation.MovieWriter.finish(self)
matplotlib.animation.MovieWriter.frame_size(self)
matplotlib.animation.MovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.MovieWriter.isAvailable(cls)
matplotlib.animation.MovieWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.MovieWriterRegistry(self)
matplotlib.animation.MovieWriterRegistry.__getitem__(self,name)
matplotlib.animation.MovieWriterRegistry.__init__(self)
matplotlib.animation.MovieWriterRegistry.ensure_not_dirty(self)
matplotlib.animation.MovieWriterRegistry.is_available(self,name)
matplotlib.animation.MovieWriterRegistry.list(self)
matplotlib.animation.MovieWriterRegistry.register(self,name)
matplotlib.animation.MovieWriterRegistry.reset_available_writers(self)
matplotlib.animation.MovieWriterRegistry.set_dirty(self)
matplotlib.animation.PillowWriter(self,*args,**kwargs)
matplotlib.animation.PillowWriter.__init__(self,*args,**kwargs)
matplotlib.animation.PillowWriter.finish(self)
matplotlib.animation.PillowWriter.grab_frame(self,**savefig_kwargs)
matplotlib.animation.PillowWriter.isAvailable(cls)
matplotlib.animation.PillowWriter.setup(self,fig,outfile,dpi=None)
matplotlib.animation.TimedAnimation(self,fig,interval=200,repeat_delay=None,repeat=True,event_source=None,*args,**kwargs)
matplotlib.animation.TimedAnimation.__init__(self,fig,interval=200,repeat_delay=None,repeat=True,event_source=None,*args,**kwargs)
matplotlib.animation.TimedAnimation._loop_delay(self,*args)
matplotlib.animation.TimedAnimation._step(self,*args)
matplotlib.animation.TimedAnimation._stop(self,*args)
matplotlib.animation._embedded_frames(frame_list,frame_format)
matplotlib.animation._included_frames(frame_list,frame_format)
matplotlib.animation.adjusted_figsize(w,h,dpi,n)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/colorbar.py----------------------------------------
A:matplotlib.colorbar.cmap->matplotlib.cm.get_cmap()
A:matplotlib.colorbar.norm->matplotlib.colors.Normalize(yi[0], yi[-1])
A:matplotlib.colorbar.self.lines->list()
A:matplotlib.colorbar.self.locator->matplotlib.ticker.FixedLocator(ticks, nbins=len(ticks))
A:matplotlib.colorbar.self.formatter->matplotlib.ticker.FixedFormatter(ticklabels)
A:matplotlib.colorbar.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.colorbar.(ticks, ticklabels, offset_string)->self._ticker()
A:matplotlib.colorbar.xy->numpy.array([[X[i][0], Y[i][0]], [X[i][1], Y[i][0]], [X[i + 1][1], Y[i + 1][0]], [X[i + 1][0], Y[i + 1][1]]])
A:matplotlib.colorbar.self.outline->matplotlib.patches.Polygon(xy, edgecolor=mpl.rcParams['axes.edgecolor'], facecolor='none', linewidth=mpl.rcParams['axes.linewidth'], closed=True, zorder=2)
A:matplotlib.colorbar.self.patch->matplotlib.patches.Polygon(xy, edgecolor=c, facecolor=c, linewidth=0.01, zorder=-1)
A:matplotlib.colorbar.x->numpy.array([0.0, 1.0])
A:matplotlib.colorbar.y->self._proportional_y()
A:matplotlib.colorbar.kw->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None')
A:matplotlib.colorbar.col->matplotlib.collections.LineCollection(xy, linewidths=linewidths)
A:matplotlib.colorbar.self.dividers->matplotlib.collections.LineCollection(self._edges(X, Y), colors=(mpl.rcParams['axes.edgecolor'],), linewidths=(0.5 * mpl.rcParams['axes.linewidth'],))
A:matplotlib.colorbar.N->len(y)
A:matplotlib.colorbar.nv->len(self._values)
A:matplotlib.colorbar.locator->matplotlib.ticker.FixedLocator(b, nbins=10)
A:matplotlib.colorbar.b->self.norm(self._boundaries, clip=False).filled()
A:matplotlib.colorbar.ticks->self._locate(b)
A:matplotlib.colorbar.offset_string->formatter.get_offset()
A:matplotlib.colorbar.self._boundaries->numpy.array(self.boundaries)
A:matplotlib.colorbar.self._values->numpy.array(self.values)
A:matplotlib.colorbar.v->numpy.zeros((len(b) - 1,), dtype=float)
A:matplotlib.colorbar.v[self._inside]->numpy.arange(self.cmap.N, dtype=np.int16)
A:matplotlib.colorbar.(self.norm.vmin, self.norm.vmax)->matplotlib.transforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)
A:matplotlib.colorbar.nb->len(self._boundaries)
A:matplotlib.colorbar.extendlength->self._get_extension_lengths(self.extendfrac, automin, automax, default=0.05)
A:matplotlib.colorbar.y[self._inside]->numpy.ma.filled(norm(yi), np.nan)
A:matplotlib.colorbar.xn->self.norm(x, clip=False).filled()
A:matplotlib.colorbar.ii->numpy.searchsorted(b, xn)
A:matplotlib.colorbar.kw['alpha']->mappable.get_alpha()
A:matplotlib.colorbar.gs->gs_from_subplotspec(2, 1, subplot_spec=parent.get_subplotspec(), hspace=wh_space, height_ratios=[x1 - pad, fraction])
A:matplotlib.colorbar.subplotspec->gs_from_subplotspec(2, 1, subplot_spec=parent.get_subplotspec(), hspace=wh_space, height_ratios=[x1 - pad, fraction]).get_topmost_subplotspec()
A:matplotlib.colorbar.pos->ax.get_position(original=True)
A:matplotlib.colorbar.anchor->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('anchor', loc_settings['anchor'])
A:matplotlib.colorbar.parent_anchor->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('panchor', loc_settings['panchor'])
A:matplotlib.colorbar.parents_iterable->matplotlib.cbook.iterable(parents)
A:matplotlib.colorbar.parents->numpy.atleast_1d(parents).ravel()
A:matplotlib.colorbar.pad->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('pad', 0.15)
A:matplotlib.colorbar.fig->parent.get_figure()
A:matplotlib.colorbar.parents_bbox->matplotlib.transforms.Bbox.union([ax.get_position(original=True).frozen() for ax in parents])
A:matplotlib.colorbar.(pbcb, _, pb1)->pb.splity(fraction, fraction + pad)
A:matplotlib.colorbar.(pb1, _, pbcb)->pb.splity(1 - fraction - pad, 1 - fraction)
A:matplotlib.colorbar.pbcb->pbcb.shrunk(shrink, 1.0).anchored(anchor, pbcb).shrunk(shrink, 1.0).anchored(anchor, pbcb)
A:matplotlib.colorbar.shrinking_trans->matplotlib.transforms.BboxTransform(parents_bbox, pb1)
A:matplotlib.colorbar.new_posn->matplotlib.transforms.Bbox(new_posn)
A:matplotlib.colorbar.cax->parent.get_figure().add_subplot(gs2[1])
A:matplotlib.colorbar.(lb, lbpos)->matplotlib._constrained_layout.layoutcolorbargridspec(parents, cax, shrink, aspect, location, pad)
A:matplotlib.colorbar.orientation->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').setdefault('orientation', 'vertical')
A:matplotlib.colorbar.fraction->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('fraction', 0.15)
A:matplotlib.colorbar.shrink->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('shrink', 1.0)
A:matplotlib.colorbar.aspect->dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None').pop('aspect', 20)
A:matplotlib.colorbar.gs2->gs_from_subplotspec(1, 3, subplot_spec=gs[1], wspace=0.0, width_ratios=wh_ratios)
A:matplotlib.colorbar.n_segments->len(C)
A:matplotlib.colorbar.patch->matplotlib.patches.PathPatch(mpath.Path(xy), facecolor=self.cmap(self.norm(val)), hatch=hatch, linewidth=0, antialiased=False, **kw)
A:matplotlib.colorbar.cb->Colorbar(cax, mappable, **kwargs)
A:matplotlib.colorbar.cid->mappable.callbacksSM.connect('changed', cb.on_mappable_changed)
matplotlib.colorbar.Colorbar(self,ax,mappable,**kw)
matplotlib.colorbar.Colorbar.__init__(self,ax,mappable,**kw)
matplotlib.colorbar.Colorbar.add_lines(self,CS,erase=True)
matplotlib.colorbar.Colorbar.on_mappable_changed(self,mappable)
matplotlib.colorbar.Colorbar.remove(self)
matplotlib.colorbar.Colorbar.update_bruteforce(self,mappable)
matplotlib.colorbar.Colorbar.update_normal(self,mappable)
matplotlib.colorbar.ColorbarBase(self,ax,cmap=None,norm=None,alpha=None,values=None,boundaries=None,orientation='vertical',ticklocation='auto',extend='neither',spacing='uniform',ticks=None,format=None,drawedges=False,filled=True,extendfrac=None,extendrect=False,label='')
matplotlib.colorbar.ColorbarBase.__init__(self,ax,cmap=None,norm=None,alpha=None,values=None,boundaries=None,orientation='vertical',ticklocation='auto',extend='neither',spacing='uniform',ticks=None,format=None,drawedges=False,filled=True,extendfrac=None,extendrect=False,label='')
matplotlib.colorbar.ColorbarBase._add_solids(self,X,Y,C)
matplotlib.colorbar.ColorbarBase._central_N(self)
matplotlib.colorbar.ColorbarBase._config_axes(self,X,Y)
matplotlib.colorbar.ColorbarBase._edges(self,X,Y)
matplotlib.colorbar.ColorbarBase._extend_lower(self)
matplotlib.colorbar.ColorbarBase._extend_upper(self)
matplotlib.colorbar.ColorbarBase._extended_N(self)
matplotlib.colorbar.ColorbarBase._find_range(self)
matplotlib.colorbar.ColorbarBase._get_extension_lengths(self,frac,automin,automax,default=0.05)
matplotlib.colorbar.ColorbarBase._locate(self,x)
matplotlib.colorbar.ColorbarBase._mesh(self)
matplotlib.colorbar.ColorbarBase._outline(self,X,Y)
matplotlib.colorbar.ColorbarBase._patch_ax(self)
matplotlib.colorbar.ColorbarBase._process_values(self,b=None)
matplotlib.colorbar.ColorbarBase._proportional_y(self)
matplotlib.colorbar.ColorbarBase._set_label(self)
matplotlib.colorbar.ColorbarBase._ticker(self)
matplotlib.colorbar.ColorbarBase._uniform_y(self,N)
matplotlib.colorbar.ColorbarBase.add_lines(self,levels,colors,linewidths,erase=True)
matplotlib.colorbar.ColorbarBase.config_axis(self)
matplotlib.colorbar.ColorbarBase.draw_all(self)
matplotlib.colorbar.ColorbarBase.get_ticks(self,minor=False)
matplotlib.colorbar.ColorbarBase.remove(self)
matplotlib.colorbar.ColorbarBase.set_alpha(self,alpha)
matplotlib.colorbar.ColorbarBase.set_label(self,label,**kw)
matplotlib.colorbar.ColorbarBase.set_ticklabels(self,ticklabels,update_ticks=True)
matplotlib.colorbar.ColorbarBase.set_ticks(self,ticks,update_ticks=True)
matplotlib.colorbar.ColorbarBase.update_ticks(self)
matplotlib.colorbar.ColorbarPatch(self,ax,mappable,**kw)
matplotlib.colorbar.ColorbarPatch.__init__(self,ax,mappable,**kw)
matplotlib.colorbar.ColorbarPatch._add_solids(self,X,Y,C)
matplotlib.colorbar._set_ticks_on_axis_warn(*args,**kw)
matplotlib.colorbar.colorbar_factory(cax,mappable,**kwargs)
matplotlib.colorbar.make_axes(parents,location=None,orientation=None,fraction=0.15,shrink=1.0,aspect=20,**kw)
matplotlib.colorbar.make_axes_gridspec(parent,**kw)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/transforms.py----------------------------------------
A:matplotlib.transforms.d->self.__dict__.copy()
A:matplotlib.transforms.d['_parents']->dict(((k, v()) for (k, v) in six.iteritems(self._parents)))
A:matplotlib.transforms.self._parents->dict(((k, weakref.ref(v)) for (k, v) in six.iteritems(state['parents']) if v is not None))
A:matplotlib.transforms.parent->parent()
A:matplotlib.transforms.child._parents[id(self)]->weakref.ref(self)
A:matplotlib.transforms.seen->set()
A:matplotlib.transforms.props->' '.join(['%s=%s' % (key, val) for (key, val) in six.iteritems(props)])
A:matplotlib.transforms.points->self._get_points()
A:matplotlib.transforms._check->staticmethod(_check)
A:matplotlib.transforms.(x0, y0, x1, y1)->self.get_points().flatten()
A:matplotlib.transforms.pts->self.get_points()
A:matplotlib.transforms.(ll, ul, lr)->patch.get_transform().transform(np.array([pts[0], [pts[0, 0], pts[1, 1]], [pts[1, 0], pts[0, 1]]]))
A:matplotlib.transforms.vertices->numpy.asarray(vertices)
A:matplotlib.transforms.a->numpy.cos(theta)
A:matplotlib.transforms.(l, b, r, t)->self.get_points().flatten()
A:matplotlib.transforms.corners->self.corners()
A:matplotlib.transforms.corners_rotated->Affine2D().rotate(radians).transform(corners)
A:matplotlib.transforms.bbox->Bbox.unit()
A:matplotlib.transforms.x0->numpy.maximum(bbox1.xmin, bbox2.xmin)
A:matplotlib.transforms.x1->numpy.minimum(bbox1.xmax, bbox2.xmax)
A:matplotlib.transforms.y0->numpy.maximum(bbox1.ymin, bbox2.ymin)
A:matplotlib.transforms.y1->numpy.minimum(bbox1.ymax, bbox2.ymax)
A:matplotlib.transforms.self._minpos->numpy.array([np.inf, np.inf])
A:matplotlib.transforms.self._points_orig->self._points.copy()
A:matplotlib.transforms.(points, minpos, changed)->update_path_extents(path, None, self._points, self._minpos, ignore)
A:matplotlib.transforms.path->Path(xy)
A:matplotlib.transforms.self._points->numpy.where(self._locked_points.mask, points, self._locked_points)
A:matplotlib.transforms.p->self._bbox.get_points()
A:matplotlib.transforms.self._locked_points->numpy.ma.array(fp, float, mask=mask).reshape((2, 2))
A:matplotlib.transforms.values->values.reshape((-1, self.input_dims)).reshape((-1, self.input_dims))
A:matplotlib.transforms.res->self.transform_affine(self.transform_non_affine(values))
A:matplotlib.transforms.x->self.transform_non_affine(path.vertices)
A:matplotlib.transforms.tpts->self.transform(pts)
A:matplotlib.transforms.tpts2->self.transform(pts2)
A:matplotlib.transforms.is_affine->property(_get_is_affine)
A:matplotlib.transforms.is_separable->property(_get_is_separable)
A:matplotlib.transforms.has_inverse->property(_get_has_inverse)
A:matplotlib.transforms.mtx->numpy.vstack((x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]))
A:matplotlib.transforms.tpoints->affine_transform(points.data, mtx)
A:matplotlib.transforms.self._inverted->Affine2D(inv(mtx), shorthand_name=shorthand_name)
A:matplotlib.transforms.matrix->IdentityTransform._mtx.copy()
A:matplotlib.transforms.self._mtx->numpy.array([[1.0, 0.0, xt], [0.0, 1.0, yt], [0.0, 0.0, 1.0]], float)
A:matplotlib.transforms.b->numpy.sin(theta)
A:matplotlib.transforms.rotate_mtx->numpy.array([[a, -b, 0.0], [b, a, 0.0], [0.0, 0.0, 1.0]], float)
A:matplotlib.transforms.translate_mtx->numpy.array([[1.0, 0.0, tx], [0.0, 1.0, ty], [0.0, 0.0, 1.0]], float)
A:matplotlib.transforms.scale_mtx->numpy.array([[sx, 0.0, 0.0], [0.0, sy, 0.0], [0.0, 0.0, 1.0]], float)
A:matplotlib.transforms.rotX->numpy.tan(xShear)
A:matplotlib.transforms.rotY->numpy.tan(yShear)
A:matplotlib.transforms.skew_mtx->numpy.array([[1.0, rotX, 0.0], [rotY, 1.0, 0.0], [0.0, 0.0, 1.0]], float)
A:matplotlib.transforms._mtx->numpy.identity(3)
A:matplotlib.transforms.x_points->x_points.reshape((len(x_points), 1)).reshape((len(x_points), 1))
A:matplotlib.transforms.y_points->y_points.reshape((len(y_points), 1)).reshape((len(y_points), 1))
A:matplotlib.transforms.self._affine->Affine2D(mtx)
A:matplotlib.transforms.x_mtx->self._x.get_matrix()
A:matplotlib.transforms.y_mtx->self._y.get_matrix()
A:matplotlib.transforms.frozen->composite_transform_factory(self._a.frozen(), self._b.frozen())
A:matplotlib.transforms.(xt, yt)->self._scale_trans.transform_point(self._t)
A:matplotlib.transforms.self._transformed_path->self._transform.transform_path_non_affine(patch_path)
A:matplotlib.transforms.self._transformed_points->path.Path._fast_from_codes_and_verts(self._transform.transform_non_affine(patch_path.vertices), None, {'interpolation_steps': patch_path._interpolation_steps, 'should_simplify': patch_path.should_simplify})
A:matplotlib.transforms.transform->patch.get_transform()
A:matplotlib.transforms.self._path->patch.get_path()
A:matplotlib.transforms.patch_path->self._patch.get_path()
A:matplotlib.transforms.maxabsvalue->max(abs(vmin), abs(vmax))
matplotlib.transforms.Affine2D(self,matrix=None,**kwargs)
matplotlib.transforms.Affine2D.__init__(self,matrix=None,**kwargs)
matplotlib.transforms.Affine2D.__str__(self)
matplotlib.transforms.Affine2D._get_is_separable(self)
matplotlib.transforms.Affine2D.clear(self)
matplotlib.transforms.Affine2D.from_values(a,b,c,d,e,f)
matplotlib.transforms.Affine2D.get_matrix(self)
matplotlib.transforms.Affine2D.identity()
matplotlib.transforms.Affine2D.rotate(self,theta)
matplotlib.transforms.Affine2D.rotate_around(self,x,y,theta)
matplotlib.transforms.Affine2D.rotate_deg(self,degrees)
matplotlib.transforms.Affine2D.rotate_deg_around(self,x,y,degrees)
matplotlib.transforms.Affine2D.scale(self,sx,sy=None)
matplotlib.transforms.Affine2D.set(self,other)
matplotlib.transforms.Affine2D.set_matrix(self,mtx)
matplotlib.transforms.Affine2D.skew(self,xShear,yShear)
matplotlib.transforms.Affine2D.skew_deg(self,xShear,yShear)
matplotlib.transforms.Affine2D.translate(self,tx,ty)
matplotlib.transforms.Affine2DBase(AffineBase)
matplotlib.transforms.Affine2DBase._get_is_separable(self)
matplotlib.transforms.Affine2DBase.frozen(self)
matplotlib.transforms.Affine2DBase.inverted(self)
matplotlib.transforms.Affine2DBase.matrix_from_values(a,b,c,d,e,f)
matplotlib.transforms.Affine2DBase.to_values(self)
matplotlib.transforms.Affine2DBase.transform_affine(self,points)
matplotlib.transforms.Affine2DBase.transform_point(self,point)
matplotlib.transforms.AffineBase(self,*args,**kwargs)
matplotlib.transforms.AffineBase.__array__(self,*args,**kwargs)
matplotlib.transforms.AffineBase.__eq__(self,other)
matplotlib.transforms.AffineBase.__init__(self,*args,**kwargs)
matplotlib.transforms.AffineBase._concat(a,b)
matplotlib.transforms.AffineBase.get_affine(self)
matplotlib.transforms.AffineBase.transform(self,values)
matplotlib.transforms.AffineBase.transform_affine(self,values)
matplotlib.transforms.AffineBase.transform_non_affine(self,points)
matplotlib.transforms.AffineBase.transform_path(self,path)
matplotlib.transforms.AffineBase.transform_path_affine(self,path)
matplotlib.transforms.AffineBase.transform_path_non_affine(self,path)
matplotlib.transforms.Bbox(self,points,**kwargs)
matplotlib.transforms.Bbox.__format__(self,fmt)
matplotlib.transforms.Bbox.__init__(self,points,**kwargs)
matplotlib.transforms.Bbox.__repr__(self)
matplotlib.transforms.Bbox.__str__(self)
matplotlib.transforms.Bbox.bounds(self,bounds)
matplotlib.transforms.Bbox.from_bounds(x0,y0,width,height)
matplotlib.transforms.Bbox.from_extents(*args)
matplotlib.transforms.Bbox.get_points(self)
matplotlib.transforms.Bbox.ignore(self,value)
matplotlib.transforms.Bbox.intervalx(self,interval)
matplotlib.transforms.Bbox.intervaly(self,interval)
matplotlib.transforms.Bbox.minpos(self)
matplotlib.transforms.Bbox.minposx(self)
matplotlib.transforms.Bbox.minposy(self)
matplotlib.transforms.Bbox.mutated(self)
matplotlib.transforms.Bbox.mutatedx(self)
matplotlib.transforms.Bbox.mutatedy(self)
matplotlib.transforms.Bbox.null()
matplotlib.transforms.Bbox.p0(self,val)
matplotlib.transforms.Bbox.p1(self,val)
matplotlib.transforms.Bbox.set(self,other)
matplotlib.transforms.Bbox.set_points(self,points)
matplotlib.transforms.Bbox.unit()
matplotlib.transforms.Bbox.update_from_data_xy(self,xy,ignore=None,updatex=True,updatey=True)
matplotlib.transforms.Bbox.update_from_path(self,path,ignore=None,updatex=True,updatey=True)
matplotlib.transforms.Bbox.x0(self,val)
matplotlib.transforms.Bbox.x1(self,val)
matplotlib.transforms.Bbox.y0(self,val)
matplotlib.transforms.Bbox.y1(self,val)
matplotlib.transforms.BboxBase(TransformNode)
matplotlib.transforms.BboxBase.__array__(self,*args,**kwargs)
matplotlib.transforms.BboxBase.anchored(self,c,container=None)
matplotlib.transforms.BboxBase.bounds(self)
matplotlib.transforms.BboxBase.contains(self,x,y)
matplotlib.transforms.BboxBase.containsx(self,x)
matplotlib.transforms.BboxBase.containsy(self,y)
matplotlib.transforms.BboxBase.corners(self)
matplotlib.transforms.BboxBase.count_contains(self,vertices)
matplotlib.transforms.BboxBase.count_overlaps(self,bboxes)
matplotlib.transforms.BboxBase.expanded(self,sw,sh)
matplotlib.transforms.BboxBase.extents(self)
matplotlib.transforms.BboxBase.frozen(self)
matplotlib.transforms.BboxBase.fully_contains(self,x,y)
matplotlib.transforms.BboxBase.fully_containsx(self,x)
matplotlib.transforms.BboxBase.fully_containsy(self,y)
matplotlib.transforms.BboxBase.fully_overlaps(self,other)
matplotlib.transforms.BboxBase.get_points(self)
matplotlib.transforms.BboxBase.height(self)
matplotlib.transforms.BboxBase.intersection(bbox1,bbox2)
matplotlib.transforms.BboxBase.intervalx(self)
matplotlib.transforms.BboxBase.intervaly(self)
matplotlib.transforms.BboxBase.inverse_transformed(self,transform)
matplotlib.transforms.BboxBase.is_unit(self)
matplotlib.transforms.BboxBase.max(self)
matplotlib.transforms.BboxBase.min(self)
matplotlib.transforms.BboxBase.overlaps(self,other)
matplotlib.transforms.BboxBase.p0(self)
matplotlib.transforms.BboxBase.p1(self)
matplotlib.transforms.BboxBase.padded(self,p)
matplotlib.transforms.BboxBase.rotated(self,radians)
matplotlib.transforms.BboxBase.shrunk(self,mx,my)
matplotlib.transforms.BboxBase.shrunk_to_aspect(self,box_aspect,container=None,fig_aspect=1.0)
matplotlib.transforms.BboxBase.size(self)
matplotlib.transforms.BboxBase.splitx(self,*args)
matplotlib.transforms.BboxBase.splity(self,*args)
matplotlib.transforms.BboxBase.transformed(self,transform)
matplotlib.transforms.BboxBase.translated(self,tx,ty)
matplotlib.transforms.BboxBase.union(bboxes)
matplotlib.transforms.BboxBase.width(self)
matplotlib.transforms.BboxBase.x0(self)
matplotlib.transforms.BboxBase.x1(self)
matplotlib.transforms.BboxBase.xmax(self)
matplotlib.transforms.BboxBase.xmin(self)
matplotlib.transforms.BboxBase.y0(self)
matplotlib.transforms.BboxBase.y1(self)
matplotlib.transforms.BboxBase.ymax(self)
matplotlib.transforms.BboxBase.ymin(self)
matplotlib.transforms.BboxTransform(self,boxin,boxout,**kwargs)
matplotlib.transforms.BboxTransform.__init__(self,boxin,boxout,**kwargs)
matplotlib.transforms.BboxTransform.__str__(self)
matplotlib.transforms.BboxTransform.get_matrix(self)
matplotlib.transforms.BboxTransformFrom(self,boxin,**kwargs)
matplotlib.transforms.BboxTransformFrom.__init__(self,boxin,**kwargs)
matplotlib.transforms.BboxTransformFrom.__str__(self)
matplotlib.transforms.BboxTransformFrom.get_matrix(self)
matplotlib.transforms.BboxTransformTo(self,boxout,**kwargs)
matplotlib.transforms.BboxTransformTo.__init__(self,boxout,**kwargs)
matplotlib.transforms.BboxTransformTo.__str__(self)
matplotlib.transforms.BboxTransformTo.get_matrix(self)
matplotlib.transforms.BboxTransformToMaxOnly(BboxTransformTo)
matplotlib.transforms.BboxTransformToMaxOnly.get_matrix(self)
matplotlib.transforms.BlendedAffine2D(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedAffine2D.__eq__(self,other)
matplotlib.transforms.BlendedAffine2D.__init__(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedAffine2D.__str__(self)
matplotlib.transforms.BlendedAffine2D.contains_branch_seperately(self,transform)
matplotlib.transforms.BlendedAffine2D.get_matrix(self)
matplotlib.transforms.BlendedGenericTransform(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedGenericTransform.__eq__(self,other)
matplotlib.transforms.BlendedGenericTransform.__init__(self,x_transform,y_transform,**kwargs)
matplotlib.transforms.BlendedGenericTransform.__str__(self)
matplotlib.transforms.BlendedGenericTransform._get_has_inverse(self)
matplotlib.transforms.BlendedGenericTransform._get_is_affine(self)
matplotlib.transforms.BlendedGenericTransform.contains_branch(self,other)
matplotlib.transforms.BlendedGenericTransform.contains_branch_seperately(self,transform)
matplotlib.transforms.BlendedGenericTransform.depth(self)
matplotlib.transforms.BlendedGenericTransform.frozen(self)
matplotlib.transforms.BlendedGenericTransform.get_affine(self)
matplotlib.transforms.BlendedGenericTransform.inverted(self)
matplotlib.transforms.BlendedGenericTransform.transform_non_affine(self,points)
matplotlib.transforms.CompositeAffine2D(self,a,b,**kwargs)
matplotlib.transforms.CompositeAffine2D.__init__(self,a,b,**kwargs)
matplotlib.transforms.CompositeAffine2D.__str__(self)
matplotlib.transforms.CompositeAffine2D._iter_break_from_left_to_right(self)
matplotlib.transforms.CompositeAffine2D.depth(self)
matplotlib.transforms.CompositeAffine2D.get_matrix(self)
matplotlib.transforms.CompositeGenericTransform(self,a,b,**kwargs)
matplotlib.transforms.CompositeGenericTransform.__eq__(self,other)
matplotlib.transforms.CompositeGenericTransform.__init__(self,a,b,**kwargs)
matplotlib.transforms.CompositeGenericTransform.__str__(self)
matplotlib.transforms.CompositeGenericTransform._get_has_inverse(self)
matplotlib.transforms.CompositeGenericTransform._get_is_affine(self)
matplotlib.transforms.CompositeGenericTransform._get_is_separable(self)
matplotlib.transforms.CompositeGenericTransform._invalidate_internal(self,value,invalidating_node)
matplotlib.transforms.CompositeGenericTransform._iter_break_from_left_to_right(self)
matplotlib.transforms.CompositeGenericTransform.depth(self)
matplotlib.transforms.CompositeGenericTransform.frozen(self)
matplotlib.transforms.CompositeGenericTransform.get_affine(self)
matplotlib.transforms.CompositeGenericTransform.inverted(self)
matplotlib.transforms.CompositeGenericTransform.transform_affine(self,points)
matplotlib.transforms.CompositeGenericTransform.transform_non_affine(self,points)
matplotlib.transforms.CompositeGenericTransform.transform_path_non_affine(self,path)
matplotlib.transforms.IdentityTransform(Affine2DBase)
matplotlib.transforms.IdentityTransform.__str__(self)
matplotlib.transforms.IdentityTransform.frozen(self)
matplotlib.transforms.IdentityTransform.get_affine(self)
matplotlib.transforms.IdentityTransform.get_matrix(self)
matplotlib.transforms.IdentityTransform.transform(self,points)
matplotlib.transforms.IdentityTransform.transform_path(self,path)
matplotlib.transforms.LockableBbox(self,bbox,x0=None,y0=None,x1=None,y1=None,**kwargs)
matplotlib.transforms.LockableBbox.__init__(self,bbox,x0=None,y0=None,x1=None,y1=None,**kwargs)
matplotlib.transforms.LockableBbox.__str__(self)
matplotlib.transforms.LockableBbox.get_points(self)
matplotlib.transforms.LockableBbox.locked_x0(self)
matplotlib.transforms.LockableBbox.locked_x0(self,x0)
matplotlib.transforms.LockableBbox.locked_x1(self)
matplotlib.transforms.LockableBbox.locked_x1(self,x1)
matplotlib.transforms.LockableBbox.locked_y0(self)
matplotlib.transforms.LockableBbox.locked_y0(self,y0)
matplotlib.transforms.LockableBbox.locked_y1(self)
matplotlib.transforms.LockableBbox.locked_y1(self,y1)
matplotlib.transforms.ScaledTranslation(self,xt,yt,scale_trans,**kwargs)
matplotlib.transforms.ScaledTranslation.__init__(self,xt,yt,scale_trans,**kwargs)
matplotlib.transforms.ScaledTranslation.__str__(self)
matplotlib.transforms.ScaledTranslation.get_matrix(self)
matplotlib.transforms.Transform(TransformNode)
matplotlib.transforms.Transform.__add__(self,other)
matplotlib.transforms.Transform.__array__(self,*args,**kwargs)
matplotlib.transforms.Transform.__radd__(self,other)
matplotlib.transforms.Transform.__repr__(self)
matplotlib.transforms.Transform.__sub__(self,other)
matplotlib.transforms.Transform._iter_break_from_left_to_right(self)
matplotlib.transforms.Transform.contains_branch(self,other)
matplotlib.transforms.Transform.contains_branch_seperately(self,other_transform)
matplotlib.transforms.Transform.depth(self)
matplotlib.transforms.Transform.get_affine(self)
matplotlib.transforms.Transform.get_matrix(self)
matplotlib.transforms.Transform.inverted(self)
matplotlib.transforms.Transform.transform(self,values)
matplotlib.transforms.Transform.transform_affine(self,values)
matplotlib.transforms.Transform.transform_angles(self,angles,pts,radians=False,pushoff=1e-05)
matplotlib.transforms.Transform.transform_bbox(self,bbox)
matplotlib.transforms.Transform.transform_non_affine(self,values)
matplotlib.transforms.Transform.transform_path(self,path)
matplotlib.transforms.Transform.transform_path_affine(self,path)
matplotlib.transforms.Transform.transform_path_non_affine(self,path)
matplotlib.transforms.Transform.transform_point(self,point)
matplotlib.transforms.TransformNode(self,shorthand_name=None)
matplotlib.transforms.TransformNode.__copy__(self,*args)
matplotlib.transforms.TransformNode.__getstate__(self)
matplotlib.transforms.TransformNode.__init__(self,shorthand_name=None)
matplotlib.transforms.TransformNode.__setstate__(self,data_dict)
matplotlib.transforms.TransformNode._invalidate_internal(self,value,invalidating_node)
matplotlib.transforms.TransformNode.frozen(self)
matplotlib.transforms.TransformNode.invalidate(self)
matplotlib.transforms.TransformNode.set_children(self,*children)
matplotlib.transforms.TransformWrapper(self,child)
matplotlib.transforms.TransformWrapper.__eq__(self,other)
matplotlib.transforms.TransformWrapper.__getstate__(self)
matplotlib.transforms.TransformWrapper.__init__(self,child)
matplotlib.transforms.TransformWrapper.__setstate__(self,state)
matplotlib.transforms.TransformWrapper.__str__(self)
matplotlib.transforms.TransformWrapper._get_has_inverse(self)
matplotlib.transforms.TransformWrapper._get_is_affine(self)
matplotlib.transforms.TransformWrapper._get_is_separable(self)
matplotlib.transforms.TransformWrapper._init(self,child)
matplotlib.transforms.TransformWrapper._set(self,child)
matplotlib.transforms.TransformWrapper.frozen(self)
matplotlib.transforms.TransformWrapper.set(self,child)
matplotlib.transforms.TransformedBbox(self,bbox,transform,**kwargs)
matplotlib.transforms.TransformedBbox.__init__(self,bbox,transform,**kwargs)
matplotlib.transforms.TransformedBbox.__str__(self)
matplotlib.transforms.TransformedBbox.get_points(self)
matplotlib.transforms.TransformedPatchPath(self,patch)
matplotlib.transforms.TransformedPatchPath.__init__(self,patch)
matplotlib.transforms.TransformedPatchPath._revalidate(self)
matplotlib.transforms.TransformedPath(self,path,transform)
matplotlib.transforms.TransformedPath.__init__(self,path,transform)
matplotlib.transforms.TransformedPath._revalidate(self)
matplotlib.transforms.TransformedPath.get_affine(self)
matplotlib.transforms.TransformedPath.get_fully_transformed_path(self)
matplotlib.transforms.TransformedPath.get_transformed_path_and_affine(self)
matplotlib.transforms.TransformedPath.get_transformed_points_and_affine(self)
matplotlib.transforms._indent_str(obj)
matplotlib.transforms.blended_transform_factory(x_transform,y_transform)
matplotlib.transforms.composite_transform_factory(a,b)
matplotlib.transforms.interval_contains(interval,val)
matplotlib.transforms.interval_contains_open(interval,val)
matplotlib.transforms.nonsingular(vmin,vmax,expander=0.001,tiny=1e-15,increasing=True)
matplotlib.transforms.offset_copy(trans,fig=None,x=0.0,y=0.0,units='inches')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/fontconfig_pattern.py----------------------------------------
A:matplotlib.fontconfig_pattern.family->Regex('([^%s]|(\\\\[%s]))*' % (family_punc, family_punc)).setParseAction(self._family)
A:matplotlib.fontconfig_pattern.size->Regex('([0-9]+\\.?[0-9]*|\\.[0-9]+)').setParseAction(self._size)
A:matplotlib.fontconfig_pattern.name->Regex('[a-z]+').setParseAction(self._name)
A:matplotlib.fontconfig_pattern.value->Regex('([^%s]|(\\\\[%s]))*' % (value_punc, value_punc)).setParseAction(self._value)
A:matplotlib.fontconfig_pattern.families->(family + ZeroOrMore(Literal(',') + family)).setParseAction(self._families)
A:matplotlib.fontconfig_pattern.point_sizes->(size + ZeroOrMore(Literal(',') + size)).setParseAction(self._point_sizes)
A:matplotlib.fontconfig_pattern.property->(name + Suppress(Literal('=')) + value + ZeroOrMore(Suppress(Literal(',')) + value) | name).setParseAction(self._property)
A:matplotlib.fontconfig_pattern.parse_fontconfig_pattern->lru_cache()(FontconfigPatternParser().parse)
A:matplotlib.fontconfig_pattern.val->','.join(val)
matplotlib.fontconfig_pattern.FontconfigPatternParser(self)
matplotlib.fontconfig_pattern.FontconfigPatternParser.__init__(self)
matplotlib.fontconfig_pattern.FontconfigPatternParser._families(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._family(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._name(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._point_sizes(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._property(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._size(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser._value(self,s,loc,tokens)
matplotlib.fontconfig_pattern.FontconfigPatternParser.parse(self,pattern)
matplotlib.fontconfig_pattern.generate_fontconfig_pattern(d)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/table.py----------------------------------------
A:matplotlib.table.self._text->Text(x=xy[0], y=xy[1], text=text, fontproperties=fontproperties)
A:matplotlib.table.fontsize->min(fontsize, size)
A:matplotlib.table.required->self.get_required_width(renderer)
A:matplotlib.table.bbox->self._get_grid_bbox(renderer)
A:matplotlib.table.bboxa->self._get_grid_bbox(renderer).inverse_transformed(self.get_data_transform())
A:matplotlib.table.(l, b, w, h)->self.get_text_bounds(renderer)
A:matplotlib.table.visible_edges->kwargs.pop('visible_edges')
A:matplotlib.table.loc->self.codes.get(loc, 1)
A:matplotlib.table.cell->CustomCell(xy, *args, visible_edges=self.edges, **kwargs)
A:matplotlib.table.height->Table(ax, loc, bbox, **kwargs)._approx_text_height()
A:matplotlib.table.heights[row]->max(height, cell.get_height())
A:matplotlib.table.width->max(c.get_required_width(renderer), width)
A:matplotlib.table.widths[col]->max(width, cell.get_width())
A:matplotlib.table.size->CustomCell(xy, *args, visible_edges=self.edges, **kwargs).auto_set_font_size(renderer)
A:matplotlib.table.(BEST, UR, UL, LL, LR, CL, CR, LC, UC, C, TR, TL, BL, BR, R, L, T, B)->xrange(len(self.codes))
A:matplotlib.table.rows->len(cellText)
A:matplotlib.table.cols->len(cellText[0])
A:matplotlib.table.table->Table(ax, loc, bbox, **kwargs)
matplotlib.table.Cell(self,xy,width,height,edgecolor='k',facecolor='w',fill=True,text='',loc=None,fontproperties=None)
matplotlib.table.Cell.__init__(self,xy,width,height,edgecolor='k',facecolor='w',fill=True,text='',loc=None,fontproperties=None)
matplotlib.table.Cell._set_text_position(self,renderer)
matplotlib.table.Cell.auto_set_font_size(self,renderer)
matplotlib.table.Cell.draw(self,renderer)
matplotlib.table.Cell.get_fontsize(self)
matplotlib.table.Cell.get_required_width(self,renderer)
matplotlib.table.Cell.get_text(self)
matplotlib.table.Cell.get_text_bounds(self,renderer)
matplotlib.table.Cell.set_figure(self,fig)
matplotlib.table.Cell.set_fontsize(self,size)
matplotlib.table.Cell.set_text_props(self,**kwargs)
matplotlib.table.Cell.set_transform(self,trans)
matplotlib.table.CustomCell(self,*args,**kwargs)
matplotlib.table.CustomCell.__init__(self,*args,**kwargs)
matplotlib.table.CustomCell.get_path(self)
matplotlib.table.CustomCell.visible_edges(self)
matplotlib.table.CustomCell.visible_edges(self,value)
matplotlib.table.Table(self,ax,loc=None,bbox=None,**kwargs)
matplotlib.table.Table.__getitem__(self,position)
matplotlib.table.Table.__init__(self,ax,loc=None,bbox=None,**kwargs)
matplotlib.table.Table.__setitem__(self,position,cell)
matplotlib.table.Table._approx_text_height(self)
matplotlib.table.Table._auto_set_column_width(self,col,renderer)
matplotlib.table.Table._auto_set_font_size(self,renderer)
matplotlib.table.Table._do_cell_alignment(self)
matplotlib.table.Table._get_grid_bbox(self,renderer)
matplotlib.table.Table._offset(self,ox,oy)
matplotlib.table.Table._update_positions(self,renderer)
matplotlib.table.Table.add_cell(self,row,col,*args,**kwargs)
matplotlib.table.Table.auto_set_column_width(self,col)
matplotlib.table.Table.auto_set_font_size(self,value=True)
matplotlib.table.Table.contains(self,mouseevent)
matplotlib.table.Table.draw(self,renderer)
matplotlib.table.Table.edges(self)
matplotlib.table.Table.edges(self,value)
matplotlib.table.Table.get_celld(self)
matplotlib.table.Table.get_children(self)
matplotlib.table.Table.get_window_extent(self,renderer)
matplotlib.table.Table.scale(self,xscale,yscale)
matplotlib.table.Table.set_fontsize(self,size)
matplotlib.table.table(ax,cellText=None,cellColours=None,cellLoc='right',colWidths=None,rowLabels=None,rowColours=None,rowLoc='left',colLabels=None,colColours=None,colLoc='center',loc='bottom',bbox=None,edges='closed',**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/contour.py----------------------------------------
A:matplotlib.contour.angle->matplotlib.text.Text.get_rotation(self)
A:matplotlib.contour.trans->con.get_transform()
A:matplotlib.contour.(x, y)->numpy.meshgrid(x, y)
A:matplotlib.contour.new_angles->con.get_transform().transform_angles(np.array([angle]), np.array([[x, y]]))
A:matplotlib.contour.fontsize->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('fontsize', None)
A:matplotlib.contour.inline->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('inline', 1)
A:matplotlib.contour.inline_spacing->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('inline_spacing', 5)
A:matplotlib.contour.self.labelFmt->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('fmt', '%1.3f')
A:matplotlib.contour._colors->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('colors', None)
A:matplotlib.contour.self._use_clabeltext->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('use_clabeltext', False)
A:matplotlib.contour.self.labelManual->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('manual', False)
A:matplotlib.contour.self.rightside_up->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).get('rightside_up', True)
A:matplotlib.contour.indices->list(xrange(len(self.levels)))
A:matplotlib.contour.levlabs->list(args[0])
A:matplotlib.contour.self.labelFontProps->matplotlib.font_manager.FontProperties()
A:matplotlib.contour.font_size_pts->self.labelFontProps.get_size_in_points()
A:matplotlib.contour.self.labelCValueList->list(xrange(len(self.labelLevelList)))
A:matplotlib.contour.cmap->matplotlib.colors.ListedColormap(self.colors[i0:None], N=ncolors)
A:matplotlib.contour.self.labelMappable->matplotlib.cm.ScalarMappable(cmap=cmap, norm=colors.NoNorm())
A:matplotlib.contour.blocking_contour_labeler->BlockingContourLabeler(self)
A:matplotlib.contour.self.labelTextsList->matplotlib.cbook.silent_list('text.Text', self.labelTexts)
A:matplotlib.contour.d->numpy.sum((pc - p0) ** 2)
A:matplotlib.contour.hysize->int(ysize / 2)
A:matplotlib.contour.adist->numpy.argsort(distances)
A:matplotlib.contour.lev->numpy.asarray(level_arg).astype(np.float64)
A:matplotlib.contour.(lev, ismath)->matplotlib.text.Text.is_math_text(lev)
A:matplotlib.contour.self._TeX_manager->matplotlib.texmanager.TexManager()
A:matplotlib.contour.(lw, _, _)->self._TeX_manager.get_text_width_height_descent(lev, fsize)
A:matplotlib.contour.self._mathtext_parser->matplotlib.mathtext.MathTextParser('bitmap')
A:matplotlib.contour.(img, _)->self._mathtext_parser.parse(lev, dpi=72, prop=self.labelFontProps)
A:matplotlib.contour.lw->self.get_label_width(lev, self.labelFmt, fsize)
A:matplotlib.contour.xx->numpy.mean(np.asarray(self.ax.axis()).reshape(2, 2), axis=1)
A:matplotlib.contour.t->self.get_transform()
A:matplotlib.contour.bbox->self.get_transform().get_window_extent(renderer=self.ax.figure.canvas.renderer)
A:matplotlib.contour.nsize->len(linecontour)
A:matplotlib.contour.xsize->int(np.ceil(nsize / labelwidth))
A:matplotlib.contour.ysize->int(labelwidth)
A:matplotlib.contour.XX->numpy.resize(linecontour[:, 0], (xsize, ysize))
A:matplotlib.contour.YY->numpy.resize(linecontour[:, 1], (xsize, ysize))
A:matplotlib.contour.L->numpy.hypot(xlast - xfirst, ylast - yfirst)
A:matplotlib.contour.dist->numpy.sum(np.abs(s) / L, axis=-1)
A:matplotlib.contour.(x, y, ind)->self.locate_label(slc, lw)
A:matplotlib.contour.dind->trans.transform(lc).index((x, y))
A:matplotlib.contour.closed->_is_closed_polygon(lc)
A:matplotlib.contour.pl->numpy.zeros(slc.shape[0], dtype=float)
A:matplotlib.contour.dx->numpy.diff(slc, axis=0)
A:matplotlib.contour.pl[1:]->numpy.cumsum(np.hypot(dx[:, 0], dx[:, 1]))
A:matplotlib.contour.xi->numpy.array([-hlw, hlw])
A:matplotlib.contour.dp->numpy.zeros_like(xi)
A:matplotlib.contour.rotation->numpy.rad2deg(np.arctan2(dy, dx))
A:matplotlib.contour.I->numpy.interp(xi, pl, np.arange(len(pl)), left=-1, right=-1)
A:matplotlib.contour.(dx, dy)->self.ax.transData.inverted().transform_point((x, y))
A:matplotlib.contour.transDataInv->self.ax.transData.inverted()
A:matplotlib.contour.drotation->self.ax.transData.inverted().transform_angles(np.array([rotation]), np.array([[x, y]]))
A:matplotlib.contour.color->self.labelMappable.to_rgba(cvalue, alpha=self.alpha)
A:matplotlib.contour._text->self.get_text(lev, self.labelFmt)
A:matplotlib.contour.paths->con.get_paths()
A:matplotlib.contour.xcmin->self.ax.transData.inverted().transform_point([xmin, ymin])
A:matplotlib.contour.paths[segmin]->matplotlib.path.Path(lc)
A:matplotlib.contour.lmin->self.labelIndiceList.index(conmin)
A:matplotlib.contour.slc->self.ax.transData.transform(lc)
A:matplotlib.contour.(rotation, nlc)->self.calc_label_rot_and_inline(slc, imin, lw, lcarg, inline_spacing)
A:matplotlib.contour.slc0->con.get_transform().transform(lc)
A:matplotlib.contour.(rotation, new)->self.calc_label_rot_and_inline(slc0, ind, lw, lcarg, inline_spacing)
A:matplotlib.contour.ds->numpy.sum((lc - point[None, :]) ** 2, 1)
A:matplotlib.contour.imin->numpy.argmin(ds)
A:matplotlib.contour.(d, xc)->_find_closest_point_on_leg(lc[leg[0]], lc[leg[1]], point)
A:matplotlib.contour.self.levels->numpy.asarray(self.levels).astype(np.float64)
A:matplotlib.contour.self.filled->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('filled', False)
A:matplotlib.contour.self.linewidths->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('linewidths', None)
A:matplotlib.contour.self.linestyles->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('linestyles', None)
A:matplotlib.contour.self.hatches->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('hatches', [None])
A:matplotlib.contour.self.alpha->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('alpha', None)
A:matplotlib.contour.self.origin->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('origin', None)
A:matplotlib.contour.self.extent->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('extent', None)
A:matplotlib.contour.self.colors->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('colors', None)
A:matplotlib.contour.norm->matplotlib.colors.LogNorm()
A:matplotlib.contour.vmin->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('vmin', None)
A:matplotlib.contour.vmax->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('vmax', None)
A:matplotlib.contour.self.extend->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('extend', 'neither')
A:matplotlib.contour.self.antialiased->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('antialiased', None)
A:matplotlib.contour.self.nchunk->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('nchunk', 0)
A:matplotlib.contour.self.locator->matplotlib.ticker.MaxNLocator(N + 1, min_n_ticks=1)
A:matplotlib.contour.self._transform->self._transform._as_mpl_transform(self.ax)
A:matplotlib.contour.kwargs->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)
A:matplotlib.contour.ncolors->len(self.levels)
A:matplotlib.contour.self.collections->matplotlib.cbook.silent_list('mcoll.LineCollection')
A:matplotlib.contour.(self.allsegs, self.allkinds)->self._get_allsegs_and_allkinds()
A:matplotlib.contour.(lowers, uppers)->self._get_lowers_and_uppers()
A:matplotlib.contour.zorder->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('zorder', 2)
A:matplotlib.contour.col->matplotlib.collections.LineCollection(segs, antialiaseds=aa, linewidths=width, linestyles=[lstyle], alpha=self.alpha, transform=self.get_transform(), zorder=zorder)
A:matplotlib.contour.tlinewidths->self._process_linewidths()
A:matplotlib.contour.tlinestyles->list(linestyles)
A:matplotlib.contour.s->', '.join(map(repr, kwargs))
A:matplotlib.contour.state->self.__dict__.copy()
A:matplotlib.contour.n_levels->len(self.collections)
A:matplotlib.contour.patch->matplotlib.collections.LineCollection(None)
A:matplotlib.contour.lower->str_format(lower)
A:matplotlib.contour.upper->str_format(upper)
A:matplotlib.contour.level->str_format(level)
A:matplotlib.contour.self.zmax->float(z.max())
A:matplotlib.contour.self.zmin->float(z.min())
A:matplotlib.contour.points->numpy.concatenate(flatseglist, axis=0)
A:matplotlib.contour.self._mins->numpy.concatenate(flatseglist, axis=0).min(axis=0)
A:matplotlib.contour.self._maxs->numpy.concatenate(flatseglist, axis=0).max(axis=0)
A:matplotlib.contour.lowers->lowers.copy().copy()
A:matplotlib.contour.self._levels->numpy.asarray(self._levels)
A:matplotlib.contour.self.cvalues->list(range(i0, i1))
A:matplotlib.contour.Nlev->len(self.levels)
A:matplotlib.contour.linewidths->list(linewidths)
A:matplotlib.contour.nreps->int(np.ceil(Nlev / len(linestyles)))
A:matplotlib.contour.point->numpy.array([x, y])
A:matplotlib.contour.lc->con.get_transform().transform(lc)
A:matplotlib.contour.(d, xc, leg)->_find_closest_point_on_path(lc, point)
A:matplotlib.contour.self._corner_mask->self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs).pop('corner_mask', None)
A:matplotlib.contour.(x, y, z)->self._check_xyz(args[:3], kwargs)
A:matplotlib.contour._mask->numpy.ma.getmask(z)
A:matplotlib.contour.contour_generator->matplotlib._contour.QuadContourGenerator(x, y, z.filled(), _mask, self._corner_mask, self.nchunk)
A:matplotlib.contour.transformed_pts->trans_to_data.transform(pts)
A:matplotlib.contour.(vertices, kinds)->self._contour_generator.create_filled_contour(level, level_upper)
A:matplotlib.contour.vertices->self._contour_generator.create_contour(level)
A:matplotlib.contour.Nargs->len(args)
A:matplotlib.contour.z->numpy.ma.asarray(args[2], dtype=np.float64)
A:matplotlib.contour.x->numpy.linspace(x0, x1, Nx)
A:matplotlib.contour.y->numpy.linspace(y0, y1, Ny)
matplotlib.contour.ClabelText(text.Text)
matplotlib.contour.ClabelText.get_rotation(self)
matplotlib.contour.ContourLabeler(object)
matplotlib.contour.ContourLabeler._add_label(self,t,x,y,lev,cvalue)
matplotlib.contour.ContourLabeler._get_label_clabeltext(self,x,y,rotation)
matplotlib.contour.ContourLabeler._get_label_text(self,x,y,rotation)
matplotlib.contour.ContourLabeler.add_label(self,x,y,rotation,lev,cvalue)
matplotlib.contour.ContourLabeler.add_label_clabeltext(self,x,y,rotation,lev,cvalue)
matplotlib.contour.ContourLabeler.add_label_near(self,x,y,inline=True,inline_spacing=5,transform=None)
matplotlib.contour.ContourLabeler.calc_label_rot_and_inline(self,slc,ind,lw,lc=None,spacing=5)
matplotlib.contour.ContourLabeler.clabel(self,*args,**kwargs)
matplotlib.contour.ContourLabeler.get_label_coords(self,distances,XX,YY,ysize,lw)
matplotlib.contour.ContourLabeler.get_label_width(self,lev,fmt,fsize)
matplotlib.contour.ContourLabeler.get_real_label_width(self,lev,fmt,fsize)
matplotlib.contour.ContourLabeler.get_text(self,lev,fmt)
matplotlib.contour.ContourLabeler.labels(self,inline,inline_spacing)
matplotlib.contour.ContourLabeler.locate_label(self,linecontour,labelwidth)
matplotlib.contour.ContourLabeler.pop_label(self,index=-1)
matplotlib.contour.ContourLabeler.print_label(self,linecontour,labelwidth)
matplotlib.contour.ContourLabeler.set_label_props(self,label,text,color)
matplotlib.contour.ContourLabeler.too_close(self,x,y,lw)
matplotlib.contour.ContourSet(self,ax,*args,**kwargs)
matplotlib.contour.ContourSet.__getstate__(self)
matplotlib.contour.ContourSet.__init__(self,ax,*args,**kwargs)
matplotlib.contour.ContourSet._autolev(self,N)
matplotlib.contour.ContourSet._contour_level_args(self,z,args)
matplotlib.contour.ContourSet._get_allsegs_and_allkinds(self)
matplotlib.contour.ContourSet._get_lowers_and_uppers(self)
matplotlib.contour.ContourSet._make_paths(self,segs,kinds)
matplotlib.contour.ContourSet._process_args(self,*args,**kwargs)
matplotlib.contour.ContourSet._process_colors(self)
matplotlib.contour.ContourSet._process_levels(self)
matplotlib.contour.ContourSet._process_linestyles(self)
matplotlib.contour.ContourSet._process_linewidths(self)
matplotlib.contour.ContourSet.changed(self)
matplotlib.contour.ContourSet.find_nearest_contour(self,x,y,indices=None,pixel=True)
matplotlib.contour.ContourSet.get_alpha(self)
matplotlib.contour.ContourSet.get_transform(self)
matplotlib.contour.ContourSet.legend_elements(self,variable_name='x',str_format=str)
matplotlib.contour.ContourSet.set_alpha(self,alpha)
matplotlib.contour.QuadContourSet(ContourSet)
matplotlib.contour.QuadContourSet._check_xyz(self,args,kwargs)
matplotlib.contour.QuadContourSet._contour_args(self,args,kwargs)
matplotlib.contour.QuadContourSet._get_allsegs_and_allkinds(self)
matplotlib.contour.QuadContourSet._initialize_x_y(self,z)
matplotlib.contour.QuadContourSet._process_args(self,*args,**kwargs)
matplotlib.contour._find_closest_point_on_leg(p1,p2,p0)
matplotlib.contour._find_closest_point_on_path(lc,point)
matplotlib.contour._is_closed_polygon(X)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/patheffects.py----------------------------------------
A:matplotlib.patheffects.self._offset_trans->matplotlib.transforms.Affine2D()
A:matplotlib.patheffects.offset_x->self.copy_with_path_effect([path_effect]).points_to_pixels(self._offset[0])
A:matplotlib.patheffects.offset_y->self.copy_with_path_effect([path_effect]).points_to_pixels(self._offset[1])
A:matplotlib.patheffects.new_gc_dict->new_gc_dict.copy().copy()
A:matplotlib.patheffects.dashes->new_gc_dict.copy().copy().pop('dashes', None)
A:matplotlib.patheffects.set_method->getattr(gc, 'set_' + k, None)
A:matplotlib.patheffects.renderer->self.copy_with_path_effect([path_effect])
A:matplotlib.patheffects.(path, transform)->self._get_text_path_transform(x, y, s, prop, angle, ismath)
A:matplotlib.patheffects.color->gc.get_rgb()
A:matplotlib.patheffects.gc0->self._update_gc(gc0, self._gc)
A:matplotlib.patheffects.trans->self._offset_transform(renderer, affine)
A:matplotlib.patheffects.self._shadow_rgbFace->matplotlib.colors.to_rgba(shadow_rgbFace)
A:matplotlib.patheffects.self._offset_tran->matplotlib.transforms.Affine2D()
A:matplotlib.patheffects.affine0->self._offset_transform(renderer, affine)
A:matplotlib.patheffects.self._shadow_color->matplotlib.colors.to_rgba(shadow_color)
A:matplotlib.patheffects.self.patch->matplotlib.patches.PathPatch([], **kwargs)
A:matplotlib.patheffects.affine->self._offset_transform(renderer, affine)
A:matplotlib.patheffects.clip_path->gc.get_clip_path()
matplotlib.patheffects.AbstractPathEffect(self,offset=(0.0,0.0))
matplotlib.patheffects.AbstractPathEffect.__init__(self,offset=(0.0,0.0))
matplotlib.patheffects.AbstractPathEffect._offset_transform(self,renderer,transform)
matplotlib.patheffects.AbstractPathEffect._update_gc(self,gc,new_gc_dict)
matplotlib.patheffects.AbstractPathEffect.draw_path(self,renderer,gc,tpath,affine,rgbFace=None)
matplotlib.patheffects.Normal(AbstractPathEffect)
matplotlib.patheffects.PathEffectRenderer(self,path_effects,renderer)
matplotlib.patheffects.PathEffectRenderer.__getattribute__(self,name)
matplotlib.patheffects.PathEffectRenderer.__init__(self,path_effects,renderer)
matplotlib.patheffects.PathEffectRenderer._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath)
matplotlib.patheffects.PathEffectRenderer.copy_with_path_effect(self,path_effects)
matplotlib.patheffects.PathEffectRenderer.draw_markers(self,gc,marker_path,marker_trans,path,*args,**kwargs)
matplotlib.patheffects.PathEffectRenderer.draw_path(self,gc,tpath,affine,rgbFace=None)
matplotlib.patheffects.PathEffectRenderer.draw_path_collection(self,gc,master_transform,paths,*args,**kwargs)
matplotlib.patheffects.PathEffectRenderer.new_gc(self)
matplotlib.patheffects.PathEffectRenderer.points_to_pixels(self,points)
matplotlib.patheffects.PathPatchEffect(self,offset=(0,0),**kwargs)
matplotlib.patheffects.PathPatchEffect.__init__(self,offset=(0,0),**kwargs)
matplotlib.patheffects.PathPatchEffect.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.SimpleLineShadow(self,offset=(2,-2),shadow_color='k',alpha=0.3,rho=0.3,**kwargs)
matplotlib.patheffects.SimpleLineShadow.__init__(self,offset=(2,-2),shadow_color='k',alpha=0.3,rho=0.3,**kwargs)
matplotlib.patheffects.SimpleLineShadow.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.SimplePatchShadow(self,offset=(2,-2),shadow_rgbFace=None,alpha=None,rho=0.3,**kwargs)
matplotlib.patheffects.SimplePatchShadow.__init__(self,offset=(2,-2),shadow_rgbFace=None,alpha=None,rho=0.3,**kwargs)
matplotlib.patheffects.SimplePatchShadow.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.Stroke(self,offset=(0,0),**kwargs)
matplotlib.patheffects.Stroke.__init__(self,offset=(0,0),**kwargs)
matplotlib.patheffects.Stroke.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.withSimplePatchShadow(SimplePatchShadow)
matplotlib.patheffects.withSimplePatchShadow.draw_path(self,renderer,gc,tpath,affine,rgbFace)
matplotlib.patheffects.withStroke(Stroke)
matplotlib.patheffects.withStroke.draw_path(self,renderer,gc,tpath,affine,rgbFace)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/docstring.py----------------------------------------
A:matplotlib.docstring.result->cls()
A:matplotlib.docstring.interpd->Substitution()
matplotlib.docstring.Appender(self,addendum,join='')
matplotlib.docstring.Appender.__init__(self,addendum,join='')
matplotlib.docstring.Substitution(self,*args,**kwargs)
matplotlib.docstring.Substitution.__init__(self,*args,**kwargs)
matplotlib.docstring.Substitution.from_params(cls,params)
matplotlib.docstring.Substitution.update(self,*args,**kwargs)
matplotlib.docstring.copy(source)
matplotlib.docstring.copy_dedent(source)
matplotlib.docstring.dedent(func)
matplotlib.docstring.dedent_interpd(func)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/streamplot.py----------------------------------------
A:matplotlib.streamplot.grid->Grid(x, y)
A:matplotlib.streamplot.mask->StreamMask(density)
A:matplotlib.streamplot.dmap->DomainMap(grid, mask)
A:matplotlib.streamplot.color->numpy.ma.masked_invalid(color)
A:matplotlib.streamplot.arrow_kw->dict(arrowstyle=arrowstyle, mutation_scale=10 * arrowsize)
A:matplotlib.streamplot.use_multicolor_lines->isinstance(color, np.ndarray)
A:matplotlib.streamplot.u->numpy.ma.masked_invalid(u)
A:matplotlib.streamplot.v->numpy.ma.masked_invalid(v)
A:matplotlib.streamplot.integrate->get_integrator(u, v, dmap, minlength, maxlength, integration_direction)
A:matplotlib.streamplot.(xg, yg)->DomainMap(grid, mask).data2grid(xs, ys)
A:matplotlib.streamplot.t->integrate(xg, yg)
A:matplotlib.streamplot.sp2->numpy.asanyarray(start_points, dtype=float).copy()
A:matplotlib.streamplot.norm->matplotlib.colors.Normalize(color.min(), color.max())
A:matplotlib.streamplot.cmap->matplotlib.cm.get_cmap(cmap)
A:matplotlib.streamplot.tgx->numpy.array(t[0])
A:matplotlib.streamplot.tgy->numpy.array(t[1])
A:matplotlib.streamplot.(tx, ty)->DomainMap(grid, mask).grid2data(*np.array(t))
A:matplotlib.streamplot.points->numpy.transpose([tx, ty]).reshape(-1, 1, 2)
A:matplotlib.streamplot.s->numpy.cumsum(np.sqrt(np.diff(tx) ** 2 + np.diff(ty) ** 2))
A:matplotlib.streamplot.n->numpy.searchsorted(s, s[-1] / 2.0)
A:matplotlib.streamplot.arrow_kw['color']->cmap(norm(color_values[n]))
A:matplotlib.streamplot.p->matplotlib.patches.FancyArrowPatch(arrow_tail, arrow_head, transform=transform, **arrow_kw)
A:matplotlib.streamplot.lc->matplotlib.collections.LineCollection(streamlines, transform=transform, **line_kw)
A:matplotlib.streamplot.ac->matplotlib.collections.PatchCollection(arrows)
A:matplotlib.streamplot.stream_container->StreamplotSet(lc, ac)
A:matplotlib.streamplot.(xm, ym)->self.grid2mask(xg, yg)
A:matplotlib.streamplot.self.nx->int(30 * density[0])
A:matplotlib.streamplot.self.ny->int(30 * density[1])
A:matplotlib.streamplot.self.nxself.ny->int(30 * density)
A:matplotlib.streamplot.self._mask->numpy.zeros((self.ny, self.nx))
A:matplotlib.streamplot.(u, v)->DomainMap(grid, mask).data2grid(u, v)
A:matplotlib.streamplot.speed->numpy.ma.sqrt(u_ax ** 2 + v_ax ** 2)
A:matplotlib.streamplot.ds_dt->interpgrid(speed, xi, yi)
A:matplotlib.streamplot.ui->interpgrid(u, xi, yi)
A:matplotlib.streamplot.vi->interpgrid(v, xi, yi)
A:matplotlib.streamplot.(dxi, dyi)->forward_time(xi, yi)
A:matplotlib.streamplot.(s, xt, yt)->_integrate_rk12(x0, y0, dmap, forward_time, maxlength)
A:matplotlib.streamplot.maxds->min(1.0 / dmap.mask.nx, 1.0 / dmap.mask.ny, 0.1)
A:matplotlib.streamplot.(k1x, k1y)->f(xi, yi)
A:matplotlib.streamplot.(k2x, k2y)->f(xi + ds * k1x, yi + ds * k1y)
A:matplotlib.streamplot.(ds, xf_traj, yf_traj)->_euler_step(xf_traj, yf_traj, dmap, f)
A:matplotlib.streamplot.error->numpy.sqrt(((dx2 - dx1) / nx) ** 2 + ((dy2 - dy1) / ny) ** 2)
A:matplotlib.streamplot.ds->min(dsx, dsy)
A:matplotlib.streamplot.(cx, cy)->f(xi, yi)
A:matplotlib.streamplot.(Ny, Nx)->numpy.shape(a)
A:matplotlib.streamplot.x->int(xi)
A:matplotlib.streamplot.y->int(yi)
A:matplotlib.streamplot.xn->numpy.clip(x + 1, 0, Nx - 1)
A:matplotlib.streamplot.yn->numpy.clip(y + 1, 0, Ny - 1)
matplotlib.streamplot.DomainMap(self,grid,mask)
matplotlib.streamplot.DomainMap.__init__(self,grid,mask)
matplotlib.streamplot.DomainMap.data2grid(self,xd,yd)
matplotlib.streamplot.DomainMap.grid2data(self,xg,yg)
matplotlib.streamplot.DomainMap.grid2mask(self,xi,yi)
matplotlib.streamplot.DomainMap.mask2grid(self,xm,ym)
matplotlib.streamplot.DomainMap.reset_start_point(self,xg,yg)
matplotlib.streamplot.DomainMap.start_trajectory(self,xg,yg)
matplotlib.streamplot.DomainMap.undo_trajectory(self)
matplotlib.streamplot.DomainMap.update_trajectory(self,xg,yg)
matplotlib.streamplot.Grid(self,x,y)
matplotlib.streamplot.Grid.__init__(self,x,y)
matplotlib.streamplot.Grid.shape(self)
matplotlib.streamplot.Grid.within_grid(self,xi,yi)
matplotlib.streamplot.InvalidIndexError(Exception)
matplotlib.streamplot.StreamMask(self,density)
matplotlib.streamplot.StreamMask.__getitem__(self,*args)
matplotlib.streamplot.StreamMask.__init__(self,density)
matplotlib.streamplot.StreamMask._start_trajectory(self,xm,ym)
matplotlib.streamplot.StreamMask._undo_trajectory(self)
matplotlib.streamplot.StreamMask._update_trajectory(self,xm,ym)
matplotlib.streamplot.StreamplotSet(self,lines,arrows,**kwargs)
matplotlib.streamplot.StreamplotSet.__init__(self,lines,arrows,**kwargs)
matplotlib.streamplot.TerminateTrajectory(Exception)
matplotlib.streamplot._euler_step(xf_traj,yf_traj,dmap,f)
matplotlib.streamplot._gen_starting_points(shape)
matplotlib.streamplot._integrate_rk12(x0,y0,dmap,f,maxlength)
matplotlib.streamplot.get_integrator(u,v,dmap,minlength,maxlength,integration_direction)
matplotlib.streamplot.interpgrid(a,xi,yi)
matplotlib.streamplot.streamplot(axes,x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/rcsetup.py----------------------------------------
A:matplotlib.rcsetup.s->eval(s, {'cycler': cycler, '__builtins__': {}})
A:matplotlib.rcsetup.f.__name__->'{}List'.format(type(scalar_validator).__name__)
A:matplotlib.rcsetup.validate_anylist->_listify_validator(validate_any)
A:matplotlib.rcsetup.b->b.lower().lower()
A:matplotlib.rcsetup.validate_floatlist->_listify_validator(validate_float)
A:matplotlib.rcsetup.fonttype->validate_int(s)
A:matplotlib.rcsetup._validate_standard_backends->ValidateInStrings('backend', all_backends, ignorecase=True)
A:matplotlib.rcsetup.validator->_prop_validators.get(norm_prop, None)
A:matplotlib.rcsetup.match->re.match('^C[0-9]$', s)
A:matplotlib.rcsetup.stmp->''.join([c for c in s if c.isdigit() or c == '.' or c == ','])
A:matplotlib.rcsetup.vals->validator(vals)
A:matplotlib.rcsetup.validate_colorlist->_listify_validator(validate_color, allow_stringlist=True)
A:matplotlib.rcsetup.validate_stringlist->_listify_validator(str)
A:matplotlib.rcsetup.validate_orientation->ValidateInStrings('orientation', ['landscape', 'portrait'])
A:matplotlib.rcsetup.validate_fontsizelist->_listify_validator(validate_fontsize)
A:matplotlib.rcsetup.validate_fontset->ValidateInStrings('fontset', ['dejavusans', 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'])
A:matplotlib.rcsetup.validate_mathtext_default->ValidateInStrings('default', 'rm cal it tt sf bf default bb frak circled scr regular'.split())
A:matplotlib.rcsetup.validate_verbose->ValidateInStrings('verbose', ['silent', 'helpful', 'debug', 'debug-annoying'])
A:matplotlib.rcsetup._validate_alignment->ValidateInStrings('alignment', ['center', 'top', 'bottom', 'baseline', 'center_baseline'])
A:matplotlib.rcsetup.v->float(s)
A:matplotlib.rcsetup.value->validate_string(value)
A:matplotlib.rcsetup.validate_ps_papersize->ValidateInStrings('ps_papersize', ['auto', 'letter', 'legal', 'ledger', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'b10'], ignorecase=True)
A:matplotlib.rcsetup.validate_joinstyle->ValidateInStrings('joinstyle', ['miter', 'round', 'bevel'], ignorecase=True)
A:matplotlib.rcsetup.validate_joinstylelist->_listify_validator(validate_joinstyle)
A:matplotlib.rcsetup.validate_capstyle->ValidateInStrings('capstyle', ['butt', 'round', 'projecting'], ignorecase=True)
A:matplotlib.rcsetup.validate_capstylelist->_listify_validator(validate_capstyle)
A:matplotlib.rcsetup.validate_fillstyle->ValidateInStrings('markers.fillstyle', ['full', 'left', 'right', 'bottom', 'top', 'none'])
A:matplotlib.rcsetup.validate_fillstylelist->_listify_validator(validate_fillstyle)
A:matplotlib.rcsetup._validate_negative_linestyle->ValidateInStrings('negative_linestyle', ['solid', 'dashed'], ignorecase=True)
A:matplotlib.rcsetup.res->validate_negative_linestyle(s)
A:matplotlib.rcsetup.dashes->validate_nseq_float(2)(s)
A:matplotlib.rcsetup.validate_legend_loc->ValidateInStrings('legend_loc', ['best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'], ignorecase=True)
A:matplotlib.rcsetup.validate_pgf_texsystem->ValidateInStrings('pgf.texsystem', ['xelatex', 'lualatex', 'pdflatex'])
A:matplotlib.rcsetup.validate_movie_writer->ValidateInStrings('animation.writer', ['ffmpeg', 'ffmpeg_file', 'avconv', 'avconv_file', 'imagemagick', 'imagemagick_file', 'html'])
A:matplotlib.rcsetup.validate_movie_frame_fmt->ValidateInStrings('animation.frame_format', ['png', 'jpeg', 'tiff', 'raw', 'rgba'])
A:matplotlib.rcsetup.validate_axis_locator->ValidateInStrings('major', ['minor', 'both', 'major'])
A:matplotlib.rcsetup.validate_movie_html_fmt->ValidateInStrings('animation.html', ['html5', 'jshtml', 'none'])
A:matplotlib.rcsetup.result->tuple([float(v) for v in s])
A:matplotlib.rcsetup.validate_grid_axis->ValidateInStrings('axes.grid.axis', ['x', 'y', 'both'])
A:matplotlib.rcsetup.validate_hatchlist->_listify_validator(validate_hatch)
A:matplotlib.rcsetup.validate_dashlist->_listify_validator(validate_nseq_float(allow_none=True))
A:matplotlib.rcsetup.pairs->six.iteritems(kwargs)
A:matplotlib.rcsetup.norm_prop->_prop_aliases.get(prop, prop)
A:matplotlib.rcsetup.checker->set()
A:matplotlib.rcsetup._validate_named_linestyle->ValidateInStrings('linestyle', list(six.iterkeys(ls_mapper)) + list(six.itervalues(ls_mapper)) + ['None', 'none', ' ', ''], ignorecase=True)
matplotlib.cycler(*args,**kwargs)
matplotlib.rcsetup.ValidateInStrings(self,key,valid,ignorecase=False)
matplotlib.rcsetup.ValidateInStrings.__init__(self,key,valid,ignorecase=False)
matplotlib.rcsetup.ValidateInterval(self,vmin,vmax,closedmin=True,closedmax=True)
matplotlib.rcsetup.ValidateInterval.__init__(self,vmin,vmax,closedmin=True,closedmax=True)
matplotlib.rcsetup._listify_validator(scalar_validator,allow_stringlist=False)
matplotlib.rcsetup._validate_linestyle(ls)
matplotlib.rcsetup.cycler(*args,**kwargs)
matplotlib.rcsetup.deprecate_axes_hold(value)
matplotlib.rcsetup.update_savefig_format(value)
matplotlib.rcsetup.validate_animation_writer_path(p)
matplotlib.rcsetup.validate_any(s)
matplotlib.rcsetup.validate_aspect(s)
matplotlib.rcsetup.validate_axisbelow(s)
matplotlib.rcsetup.validate_backend(s)
matplotlib.rcsetup.validate_bbox(s)
matplotlib.rcsetup.validate_bool(b)
matplotlib.rcsetup.validate_bool_maybe_none(b)
matplotlib.rcsetup.validate_color(s)
matplotlib.rcsetup.validate_color_for_prop_cycle(s)
matplotlib.rcsetup.validate_color_or_auto(s)
matplotlib.rcsetup.validate_color_or_inherit(s)
matplotlib.rcsetup.validate_cycler(s)
matplotlib.rcsetup.validate_dpi(s)
matplotlib.rcsetup.validate_float(s)
matplotlib.rcsetup.validate_float_or_None(s)
matplotlib.rcsetup.validate_font_properties(s)
matplotlib.rcsetup.validate_fontsize(s)
matplotlib.rcsetup.validate_fonttype(s)
matplotlib.rcsetup.validate_hatch(s)
matplotlib.rcsetup.validate_hinting(s)
matplotlib.rcsetup.validate_hist_bins(s)
matplotlib.rcsetup.validate_int(s)
matplotlib.rcsetup.validate_int_or_None(s)
matplotlib.rcsetup.validate_negative_linestyle(s)
matplotlib.rcsetup.validate_negative_linestyle_legacy(s)
matplotlib.rcsetup.validate_nseq_float(self,n=None,allow_none=False)
matplotlib.rcsetup.validate_nseq_float.__init__(self,n=None,allow_none=False)
matplotlib.rcsetup.validate_nseq_int(self,n=None)
matplotlib.rcsetup.validate_nseq_int.__init__(self,n=None)
matplotlib.rcsetup.validate_path_exists(s)
matplotlib.rcsetup.validate_ps_distiller(s)
matplotlib.rcsetup.validate_qt4(s)
matplotlib.rcsetup.validate_qt5(s)
matplotlib.rcsetup.validate_sketch(s)
matplotlib.rcsetup.validate_string(s)
matplotlib.rcsetup.validate_string_or_None(s)
matplotlib.rcsetup.validate_svg_fonttype(s)
matplotlib.rcsetup.validate_toolbar(s)
matplotlib.rcsetup.validate_webagg_address(s)
matplotlib.rcsetup.validate_whiskers(s)
matplotlib.validate_backend(s)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/legend.py----------------------------------------
A:matplotlib.legend.loc_in_canvas->self.get_loc_in_canvas()
A:matplotlib.legend.bbox->matplotlib.transforms.Bbox.from_bounds(0, 0, width, height)
A:matplotlib.legend._bbox_transform->BboxTransformFrom(bbox)
A:matplotlib.legend.self.legend._loc->tuple(_bbox_transform.transform_point(loc_in_canvas))
A:matplotlib.legend.loc_in_bbox->tr.transform_point(loc_in_canvas)
A:matplotlib.legend.self.prop->FontProperties(**prop)
A:matplotlib.legend.self._fontsize->self.prop.get_size_in_points()
A:matplotlib.legend.locals_view->locals()
A:matplotlib.legend.handles->kwargs.pop('handles', None)
A:matplotlib.legend.self._scatteryoffsets->numpy.asarray(scatteryoffsets)
A:matplotlib.legend.self.legendPatch->FancyBboxPatch(xy=(0.0, 0.0), width=1.0, height=1.0, facecolor=facecolor, edgecolor=edgecolor, mutation_scale=self._fontsize, snap=True)
A:matplotlib.legend._loc->property(_get_loc, _set_loc)
A:matplotlib.legend.(x, y)->self._get_anchored_bbox(self._loc, bbox, self.get_bbox_to_anchor(), renderer)
A:matplotlib.legend.fontsize->renderer.points_to_pixels(self._fontsize)
A:matplotlib.legend.shadow->Shadow(self.legendPatch, 2, -2)
A:matplotlib.legend.default_handler_map->self.get_default_handler_map()
A:matplotlib.legend.hm->self.get_default_handler_map().copy()
A:matplotlib.legend.label_prop->dict(verticalalignment='baseline', horizontalalignment='left', fontproperties=self.prop)
A:matplotlib.legend.legend_handler_map->self.get_legend_handler_map()
A:matplotlib.legend.handler->self.get_legend_handler(legend_handler_map, orig_handle)
A:matplotlib.legend.textbox->TextArea(lab, textprops=label_prop, multilinebaseline=True, minimumdescent=True)
A:matplotlib.legend.handlebox->DrawingArea(width=self.handlelength * fontsize, height=height, xdescent=0.0, ydescent=descent)
A:matplotlib.legend.ncol->min(self._ncol, len(handles_and_labels))
A:matplotlib.legend.(nrows, num_largecol)->divmod(len(handles_and_labels), ncol)
A:matplotlib.legend.start_idxs->numpy.concatenate([[0], np.cumsum(rows_per_col)[:-1]])
A:matplotlib.legend.cols->zip(start_idxs, rows_per_col)
A:matplotlib.legend.self._legend_handle_box->HPacker(pad=0, sep=sep, align='baseline', mode=mode, children=columnbox)
A:matplotlib.legend.self._legend_title_box->TextArea('')
A:matplotlib.legend.self._legend_box->VPacker(pad=self.borderpad * fontsize, sep=self.labelspacing * fontsize, align='center', children=[self._legend_title_box, self._legend_handle_box])
A:matplotlib.legend.path->handle.get_path()
A:matplotlib.legend.trans->handle.get_transform()
A:matplotlib.legend.tpath->handle.get_transform().transform_path(path)
A:matplotlib.legend.transform->BboxTransformTo(self.parent.bbox)
A:matplotlib.legend.(transform, transOffset, hoffsets, paths)->handle._prepare_points()
A:matplotlib.legend.vertices->numpy.array([])
A:matplotlib.legend.prop->FontProperties(**prop)
A:matplotlib.legend.l->len(bbox)
A:matplotlib.legend.self._bbox_to_anchor->TransformedBbox(self._bbox_to_anchor, transform)
A:matplotlib.legend.(BEST, UR, UL, LL, LR, R, CL, CR, LC, UC, C)->range(11)
A:matplotlib.legend.container->parentbbox.padded(-self.borderaxespad * fontsize)
A:matplotlib.legend.anchored_box->matplotlib.transforms.Bbox.from_bounds(0, 0, width, height).anchored(c, container=container)
A:matplotlib.legend.(verts, bboxes, lines, offsets)->self._auto_legend_data()
A:matplotlib.legend.legendBox->matplotlib.transforms.Bbox.from_bounds(l, b, width, height)
A:matplotlib.legend.(_, _, (l, b))->min(candidates)
A:matplotlib.legend.self._draggable->DraggableLegend(self, use_blit, update=update)
A:matplotlib.legend.handler_map->handler_map.copy().copy()
A:matplotlib.legend.label->handle.get_label()
A:matplotlib.legend.log->logging.getLogger(__name__)
A:matplotlib.legend.labels->kwargs.pop('labels', None)
A:matplotlib.legend.(handles, labels)->_get_legend_handles_labels(axs, handlers)
matplotlib.legend.DraggableLegend(self,legend,use_blit=False,update='loc')
matplotlib.legend.DraggableLegend.__init__(self,legend,use_blit=False,update='loc')
matplotlib.legend.DraggableLegend._update_bbox_to_anchor(self,loc_in_canvas)
matplotlib.legend.DraggableLegend._update_loc(self,loc_in_canvas)
matplotlib.legend.DraggableLegend.artist_picker(self,legend,evt)
matplotlib.legend.DraggableLegend.finalize_offset(self)
matplotlib.legend.Legend(self,parent,handles,labels,loc=None,numpoints=None,markerscale=None,markerfirst=True,scatterpoints=None,scatteryoffsets=None,prop=None,fontsize=None,borderpad=None,labelspacing=None,handlelength=None,handleheight=None,handletextpad=None,borderaxespad=None,columnspacing=None,ncol=1,mode=None,fancybox=None,shadow=None,title=None,framealpha=None,edgecolor=None,facecolor=None,bbox_to_anchor=None,bbox_transform=None,frameon=None,handler_map=None)
matplotlib.legend.Legend.__init__(self,parent,handles,labels,loc=None,numpoints=None,markerscale=None,markerfirst=True,scatterpoints=None,scatteryoffsets=None,prop=None,fontsize=None,borderpad=None,labelspacing=None,handlelength=None,handleheight=None,handletextpad=None,borderaxespad=None,columnspacing=None,ncol=1,mode=None,fancybox=None,shadow=None,title=None,framealpha=None,edgecolor=None,facecolor=None,bbox_to_anchor=None,bbox_transform=None,frameon=None,handler_map=None)
matplotlib.legend.Legend.__str__(self)
matplotlib.legend.Legend._approx_text_height(self,renderer=None)
matplotlib.legend.Legend._auto_legend_data(self)
matplotlib.legend.Legend._find_best_position(self,width,height,renderer,consider=None)
matplotlib.legend.Legend._findoffset(self,width,height,xdescent,ydescent,renderer)
matplotlib.legend.Legend._get_anchored_bbox(self,loc,bbox,parentbbox,renderer)
matplotlib.legend.Legend._get_loc(self)
matplotlib.legend.Legend._init_legend_box(self,handles,labels,markerfirst=True)
matplotlib.legend.Legend._set_artist_props(self,a)
matplotlib.legend.Legend._set_loc(self,loc)
matplotlib.legend.Legend.contains(self,event)
matplotlib.legend.Legend.draggable(self,state=None,use_blit=False,update='loc')
matplotlib.legend.Legend.draw(self,renderer)
matplotlib.legend.Legend.draw_frame(self,b)
matplotlib.legend.Legend.get_bbox_to_anchor(self)
matplotlib.legend.Legend.get_children(self)
matplotlib.legend.Legend.get_default_handler_map(cls)
matplotlib.legend.Legend.get_frame(self)
matplotlib.legend.Legend.get_frame_on(self)
matplotlib.legend.Legend.get_legend_handler(legend_handler_map,orig_handle)
matplotlib.legend.Legend.get_legend_handler_map(self)
matplotlib.legend.Legend.get_lines(self)
matplotlib.legend.Legend.get_patches(self)
matplotlib.legend.Legend.get_texts(self)
matplotlib.legend.Legend.get_title(self)
matplotlib.legend.Legend.get_window_extent(self,*args,**kwargs)
matplotlib.legend.Legend.set_bbox_to_anchor(self,bbox,transform=None)
matplotlib.legend.Legend.set_default_handler_map(cls,handler_map)
matplotlib.legend.Legend.set_frame_on(self,b)
matplotlib.legend.Legend.set_title(self,title,prop=None)
matplotlib.legend.Legend.update_default_handler_map(cls,handler_map)
matplotlib.legend._get_legend_handles(axs,legend_handler_map=None)
matplotlib.legend._get_legend_handles_labels(axs,legend_handler_map=None)
matplotlib.legend._parse_legend_args(axs,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_pylab_helpers.py----------------------------------------
A:matplotlib._pylab_helpers.manager->cls.figs.get(num, None)
A:matplotlib._pylab_helpers.num->next((manager.num for manager in six.itervalues(cls.figs) if manager.canvas.figure == fig), None)
matplotlib._pylab_helpers.Gcf(object)
matplotlib._pylab_helpers.Gcf.destroy(cls,num)
matplotlib._pylab_helpers.Gcf.destroy_all(cls)
matplotlib._pylab_helpers.Gcf.destroy_fig(cls,fig)
matplotlib._pylab_helpers.Gcf.draw_all(cls,force=False)
matplotlib._pylab_helpers.Gcf.get_active(cls)
matplotlib._pylab_helpers.Gcf.get_all_fig_managers(cls)
matplotlib._pylab_helpers.Gcf.get_fig_manager(cls,num)
matplotlib._pylab_helpers.Gcf.get_num_fig_managers(cls)
matplotlib._pylab_helpers.Gcf.has_fignum(cls,num)
matplotlib._pylab_helpers.Gcf.set_active(cls,manager)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/spines.py----------------------------------------
A:matplotlib.spines.self._patch_transform->matplotlib.transforms.Affine2D().scale(width * 0.5, height * 0.5).translate(*center)
A:matplotlib.spines.self._path->matplotlib.path.Path.arc(np.rad2deg(low), np.rad2deg(high))
A:matplotlib.spines.width->self.convert_xunits(self._width)
A:matplotlib.spines.height->self.convert_yunits(self._height)
A:matplotlib.spines.(viewlim_low, viewlim_high)->sorted([low, high])
A:matplotlib.spines.ticks->numpy.sort(ticks)
A:matplotlib.spines.(datalim_low, datalim_high)->sorted([datalim_low, datalim_high])
A:matplotlib.spines.low->max(low, viewlim_low)
A:matplotlib.spines.high->min(high, viewlim_high)
A:matplotlib.spines.direction->self.axes.get_theta_direction()
A:matplotlib.spines.offset->self.axes.get_theta_offset()
A:matplotlib.spines.rorigin->self.axes.get_rorigin()
A:matplotlib.spines.ret->super(Spine, self).draw(renderer)
A:matplotlib.spines.result->cls(axes, spine_type, path, **kwargs)
A:matplotlib.spines.base_transform->self.axes.get_xaxis_transform(which='grid')
A:matplotlib.spines.path->matplotlib.path.Path.unit_circle()
matplotlib.spines.Spine(self,axes,spine_type,path,**kwargs)
matplotlib.spines.Spine.__init__(self,axes,spine_type,path,**kwargs)
matplotlib.spines.Spine.__str__(self)
matplotlib.spines.Spine._adjust_location(self)
matplotlib.spines.Spine._calc_offset_transform(self)
matplotlib.spines.Spine._ensure_position_is_set(self)
matplotlib.spines.Spine._recompute_transform(self)
matplotlib.spines.Spine.arc_spine(cls,axes,spine_type,center,radius,theta1,theta2,**kwargs)
matplotlib.spines.Spine.circular_spine(cls,axes,center,radius,**kwargs)
matplotlib.spines.Spine.cla(self)
matplotlib.spines.Spine.draw(self,renderer)
matplotlib.spines.Spine.get_bounds(self)
matplotlib.spines.Spine.get_patch_transform(self)
matplotlib.spines.Spine.get_path(self)
matplotlib.spines.Spine.get_position(self)
matplotlib.spines.Spine.get_smart_bounds(self)
matplotlib.spines.Spine.get_spine_transform(self)
matplotlib.spines.Spine.is_frame_like(self)
matplotlib.spines.Spine.linear_spine(cls,axes,spine_type,**kwargs)
matplotlib.spines.Spine.register_axis(self,axis)
matplotlib.spines.Spine.set_bounds(self,low,high)
matplotlib.spines.Spine.set_color(self,c)
matplotlib.spines.Spine.set_patch_arc(self,center,radius,theta1,theta2)
matplotlib.spines.Spine.set_patch_circle(self,center,radius)
matplotlib.spines.Spine.set_patch_line(self)
matplotlib.spines.Spine.set_position(self,position)
matplotlib.spines.Spine.set_smart_bounds(self,value)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backend_bases.py----------------------------------------
A:matplotlib.backend_bases.fig_cls->kwargs.pop('FigureClass', Figure)
A:matplotlib.backend_bases.fig->fig_cls(*args, **kwargs)
A:matplotlib.backend_bases.canvas->self._get_output_canvas(format)
A:matplotlib.backend_bases.manager->matplotlib._pylab_helpers.Gcf.get_active()
A:matplotlib.backend_bases.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.backend_bases.self._text2path->matplotlib.textpath.TextToPath()
A:matplotlib.backend_bases.transform->transform.rotate(angle).translate(x, y).rotate(angle).translate(x, y)
A:matplotlib.backend_bases.paths->matplotlib.collections.QuadMesh.convert_mesh_to_paths(meshWidth, meshHeight, coordinates)
A:matplotlib.backend_bases.linewidths->numpy.array([gc.get_linewidth()], float)
A:matplotlib.backend_bases.Npaths->len(path_ids)
A:matplotlib.backend_bases.Ntransforms->len(all_transforms)
A:matplotlib.backend_bases.N->max(Npaths, Noffsets)
A:matplotlib.backend_bases.Npath_ids->max(Npaths, len(all_transforms))
A:matplotlib.backend_bases.Noffsets->len(offsets)
A:matplotlib.backend_bases.Nfacecolors->len(facecolors)
A:matplotlib.backend_bases.Nedgecolors->len(edgecolors)
A:matplotlib.backend_bases.Nlinewidths->len(linewidths)
A:matplotlib.backend_bases.Nlinestyles->len(linestyles)
A:matplotlib.backend_bases.Naa->len(antialiaseds)
A:matplotlib.backend_bases.Nurls->len(urls)
A:matplotlib.backend_bases.toffsets->offsetTrans.transform(offsets)
A:matplotlib.backend_bases.gc0->self.new_gc()
A:matplotlib.backend_bases.(xo, yo)->transform.rotate(angle).translate(x, y).rotate(angle).translate(x, y).transform_point((xo, yo))
A:matplotlib.backend_bases.(xp, yp)->transform.rotate(angle).translate(x, y).rotate(angle).translate(x, y).transform_point((0, 0))
A:matplotlib.backend_bases.fontsize->prop.get_size_in_points()
A:matplotlib.backend_bases.(verts, codes)->text2path.get_text_path(prop, s, ismath=ismath, usetex=False)
A:matplotlib.backend_bases.path->Path(verts, codes)
A:matplotlib.backend_bases.angle->numpy.deg2rad(angle)
A:matplotlib.backend_bases.(path, transform)->self._get_text_path_transform(x, y, s, prop, angle, ismath)
A:matplotlib.backend_bases.color->gc.get_rgb()
A:matplotlib.backend_bases.size->prop.get_size_in_points()
A:matplotlib.backend_bases.texmanager->self._text2path.get_texmanager()
A:matplotlib.backend_bases.(w, h, d)->self._text2path.get_texmanager().get_text_width_height_descent(s, fontsize, renderer=self)
A:matplotlib.backend_bases.dpi->getattr(self.figure, '_original_dpi', self.figure.dpi)
A:matplotlib.backend_bases.dims->self._text2path.mathtext_parser.parse(s, dpi, prop)
A:matplotlib.backend_bases.flags->self._text2path._get_hinting_flag()
A:matplotlib.backend_bases.font->self._text2path._get_font(prop)
A:matplotlib.backend_bases.(w, h)->self._text2path._get_font(prop).get_width_height()
A:matplotlib.backend_bases.d->self._text2path._get_font(prop).get_descent()
A:matplotlib.backend_bases.self._texmanager->TexManager()
A:matplotlib.backend_bases.self._hatch_color->matplotlib.colors.to_rgba(rcParams['hatch.color'])
A:matplotlib.backend_bases.dl->numpy.asarray(dash_list)
A:matplotlib.backend_bases.self._rgb->matplotlib.colors.to_rgba(fg)
A:matplotlib.backend_bases.self._linewidth->float(w)
A:matplotlib.backend_bases.hatch->self.get_hatch()
A:matplotlib.backend_bases.interval->property(_get_interval, _set_interval)
A:matplotlib.backend_bases.single_shot->property(_get_single_shot, _set_single_shot)
A:matplotlib.backend_bases.ret->func(*args, **kwargs)
A:matplotlib.backend_bases.(self.width, self.height)->self._get_output_canvas(format).get_width_height()
A:matplotlib.backend_bases.self.inaxes->matplotlib.cbook._topmost_artist(axes_list)
A:matplotlib.backend_bases.trans->Affine2D().scale(1.0 / self.figure.dpi)
A:matplotlib.backend_bases.(xdata, ydata)->Affine2D().scale(1.0 / self.figure.dpi).transform_point((x, y))
A:matplotlib.backend_bases.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.backend_bases.self.widgetlock->matplotlib.widgets.LockDraw()
A:matplotlib.backend_bases.self.button_pick_id->self.mpl_connect('button_press_event', self.pick)
A:matplotlib.backend_bases.self.scroll_pick_id->self.mpl_connect('scroll_event', self.pick)
A:matplotlib.backend_bases.under->matplotlib.cbook._topmost_artist(self.figure.hitlist(ev))
A:matplotlib.backend_bases.event->IdleEvent(s, self, guiEvent=guiEvent)
A:matplotlib.backend_bases.mouseevent->MouseEvent(s, self, x, y, button, self._key, dblclick=dblclick, guiEvent=guiEvent)
A:matplotlib.backend_bases.canvas_class->get_registered_canvas_class(fmt)
A:matplotlib.backend_bases._no_manager->object()
A:matplotlib.backend_bases.filename->os.fspath(filename)
A:matplotlib.backend_bases.format->format.lower().lower()
A:matplotlib.backend_bases.print_method->getattr(canvas, 'print_%s' % format)
A:matplotlib.backend_bases.origfacecolor->self.figure.get_facecolor()
A:matplotlib.backend_bases.origedgecolor->self.figure.get_edgecolor()
A:matplotlib.backend_bases.bbox_inches->bbox_inches.padded(pad).padded(pad)
A:matplotlib.backend_bases.result->print_method(filename, dpi=dpi, facecolor=facecolor, edgecolor=edgecolor, orientation=orientation, bbox_inches_restore=_bbox_inches_restore, **kwargs)
A:matplotlib.backend_bases.bbox_artists->self.figure.get_default_bbox_extra_artists()
A:matplotlib.backend_bases.bbox->matplotlib.transforms.Bbox.intersection(bbox, clip_path.get_extents())
A:matplotlib.backend_bases.clip_box->matplotlib.cbook._topmost_artist(artists).get_clip_box()
A:matplotlib.backend_bases.clip_path->clip_path.get_fully_transformed_path().get_fully_transformed_path()
A:matplotlib.backend_bases._bbox->matplotlib.transforms.Bbox.union(bbox_filtered)
A:matplotlib.backend_bases.bbox_extra->TransformedBbox(_bbox, trans)
A:matplotlib.backend_bases.pad->kwargs.pop('pad_inches', None)
A:matplotlib.backend_bases.restore_bbox->matplotlib.tight_bbox.adjust_bbox(self.figure, bbox_inches, canvas.fixed_dpi)
A:matplotlib.backend_bases.default_basename->default_basename.replace(' ', '_').replace(' ', '_')
A:matplotlib.backend_bases.default_filetype->self.get_default_filetype()
A:matplotlib.backend_bases.save_dir->os.path.expanduser(rcParams['savefig.directory'])
A:matplotlib.backend_bases.default_filename->'{}-{}.{}'.format(default_basename, i, default_filetype)
A:matplotlib.backend_bases.newCanvas->FigureCanvasClass(self.figure)
A:matplotlib.backend_bases.start_event_loop_default->matplotlib.cbook.deprecated('2.1', name='start_event_loop_default')(start_event_loop)
A:matplotlib.backend_bases.stop_event_loop_default->matplotlib.cbook.deprecated('2.1', name='stop_event_loop_default')(stop_event_loop)
A:matplotlib.backend_bases.x_state->_get_uniform_gridstate(ax.xaxis.minorTicks)
A:matplotlib.backend_bases.y_state->_get_uniform_gridstate(ax.yaxis.minorTicks)
A:matplotlib.backend_bases.scale->ax.get_yscale()
A:matplotlib.backend_bases.scalex->ax.get_xscale()
A:matplotlib.backend_bases.self.key_press_handler_id->self.canvas.mpl_connect('key_press_event', self.key_press)
A:matplotlib.backend_bases.self._nav_stack->matplotlib.cbook.Stack()
A:matplotlib.backend_bases.self._idDrag->self.canvas.mpl_connect('motion_notify_event', self.mouse_move)
A:matplotlib.backend_bases.s->IdleEvent(s, self, guiEvent=guiEvent).inaxes.format_coord(event.xdata, event.ydata)
A:matplotlib.backend_bases.a->matplotlib.cbook._topmost_artist(artists)
A:matplotlib.backend_bases.data->matplotlib.cbook._topmost_artist(artists).get_cursor_data(event)
A:matplotlib.backend_bases.self._idPress->self.canvas.mpl_connect('button_press_event', self.press_zoom)
A:matplotlib.backend_bases.self._idRelease->self.canvas.mpl_connect('button_release_event', self.release_zoom)
A:matplotlib.backend_bases.id1->self.canvas.mpl_connect('motion_notify_event', self.drag_zoom)
A:matplotlib.backend_bases.id2->self.canvas.mpl_connect('key_press_event', self._switch_on_zoom_mode)
A:matplotlib.backend_bases.id3->self.canvas.mpl_connect('key_release_event', self._switch_off_zoom_mode)
A:matplotlib.backend_bases.((x1, y1), (x2, y2))->numpy.clip([[lastx, lasty], [x, y]], a.bbox.min, a.bbox.max)
A:matplotlib.backend_bases.xaxis->getattr(a, 'xaxis', None)
A:matplotlib.backend_bases.yaxis->getattr(a, 'yaxis', None)
A:matplotlib.backend_bases.nav_info->self._nav_stack()
A:matplotlib.backend_bases.items->list(nav_info.items())
A:matplotlib.backend_bases.tool->self.toolmanager.get_tool(tool)
A:matplotlib.backend_bases.image->self._get_image_filename(tool.image)
A:matplotlib.backend_bases.basedir->os.path.join(rcParams['datapath'], 'images')
matplotlib.backend_bases.CloseEvent(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.CloseEvent.__init__(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.DrawEvent(self,name,canvas,renderer)
matplotlib.backend_bases.DrawEvent.__init__(self,name,canvas,renderer)
matplotlib.backend_bases.Event(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.Event.__init__(self,name,canvas,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase(self,figure)
matplotlib.backend_bases.FigureCanvasBase.__init__(self,figure)
matplotlib.backend_bases.FigureCanvasBase._get_output_canvas(self,fmt)
matplotlib.backend_bases.FigureCanvasBase._idle_draw_cntx(self)
matplotlib.backend_bases.FigureCanvasBase.blit(self,bbox=None)
matplotlib.backend_bases.FigureCanvasBase.button_press_event(self,x,y,button,dblclick=False,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.button_release_event(self,x,y,button,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.close_event(self,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.draw(self,*args,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.draw_cursor(self,event)
matplotlib.backend_bases.FigureCanvasBase.draw_event(self,renderer)
matplotlib.backend_bases.FigureCanvasBase.draw_idle(self,*args,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.enter_notify_event(self,guiEvent=None,xy=None)
matplotlib.backend_bases.FigureCanvasBase.flush_events(self)
matplotlib.backend_bases.FigureCanvasBase.get_default_filename(self)
matplotlib.backend_bases.FigureCanvasBase.get_default_filetype(cls)
matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes(cls)
matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes_grouped(cls)
matplotlib.backend_bases.FigureCanvasBase.get_width_height(self)
matplotlib.backend_bases.FigureCanvasBase.get_window_title(self)
matplotlib.backend_bases.FigureCanvasBase.grab_mouse(self,ax)
matplotlib.backend_bases.FigureCanvasBase.idle_event(self,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.is_saving(self)
matplotlib.backend_bases.FigureCanvasBase.key_press_event(self,key,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.key_release_event(self,key,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.leave_notify_event(self,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.motion_notify_event(self,x,y,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.mpl_connect(self,s,func)
matplotlib.backend_bases.FigureCanvasBase.mpl_disconnect(self,cid)
matplotlib.backend_bases.FigureCanvasBase.new_timer(self,*args,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.onRemove(self,ev)
matplotlib.backend_bases.FigureCanvasBase.pick(self,mouseevent)
matplotlib.backend_bases.FigureCanvasBase.pick_event(self,mouseevent,artist,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.print_figure(self,filename,dpi=None,facecolor=None,edgecolor=None,orientation='portrait',format=None,**kwargs)
matplotlib.backend_bases.FigureCanvasBase.release_mouse(self,ax)
matplotlib.backend_bases.FigureCanvasBase.resize(self,w,h)
matplotlib.backend_bases.FigureCanvasBase.resize_event(self)
matplotlib.backend_bases.FigureCanvasBase.scroll_event(self,x,y,step,guiEvent=None)
matplotlib.backend_bases.FigureCanvasBase.set_window_title(self,title)
matplotlib.backend_bases.FigureCanvasBase.start_event_loop(self,timeout=0)
matplotlib.backend_bases.FigureCanvasBase.stop_event_loop(self)
matplotlib.backend_bases.FigureCanvasBase.switch_backends(self,FigureCanvasClass)
matplotlib.backend_bases.FigureManagerBase(self,canvas,num)
matplotlib.backend_bases.FigureManagerBase.__init__(self,canvas,num)
matplotlib.backend_bases.FigureManagerBase.destroy(self)
matplotlib.backend_bases.FigureManagerBase.full_screen_toggle(self)
matplotlib.backend_bases.FigureManagerBase.get_window_title(self)
matplotlib.backend_bases.FigureManagerBase.key_press(self,event)
matplotlib.backend_bases.FigureManagerBase.resize(self,w,h)
matplotlib.backend_bases.FigureManagerBase.set_window_title(self,title)
matplotlib.backend_bases.FigureManagerBase.show(self)
matplotlib.backend_bases.FigureManagerBase.show_popup(self,msg)
matplotlib.backend_bases.GraphicsContextBase(self)
matplotlib.backend_bases.GraphicsContextBase.__init__(self)
matplotlib.backend_bases.GraphicsContextBase.copy_properties(self,gc)
matplotlib.backend_bases.GraphicsContextBase.get_alpha(self)
matplotlib.backend_bases.GraphicsContextBase.get_antialiased(self)
matplotlib.backend_bases.GraphicsContextBase.get_capstyle(self)
matplotlib.backend_bases.GraphicsContextBase.get_clip_path(self)
matplotlib.backend_bases.GraphicsContextBase.get_clip_rectangle(self)
matplotlib.backend_bases.GraphicsContextBase.get_dashes(self)
matplotlib.backend_bases.GraphicsContextBase.get_forced_alpha(self)
matplotlib.backend_bases.GraphicsContextBase.get_gid(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_color(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_linewidth(self)
matplotlib.backend_bases.GraphicsContextBase.get_hatch_path(self,density=6.0)
matplotlib.backend_bases.GraphicsContextBase.get_joinstyle(self)
matplotlib.backend_bases.GraphicsContextBase.get_linestyle(self)
matplotlib.backend_bases.GraphicsContextBase.get_linewidth(self)
matplotlib.backend_bases.GraphicsContextBase.get_rgb(self)
matplotlib.backend_bases.GraphicsContextBase.get_sketch_params(self)
matplotlib.backend_bases.GraphicsContextBase.get_snap(self)
matplotlib.backend_bases.GraphicsContextBase.get_url(self)
matplotlib.backend_bases.GraphicsContextBase.restore(self)
matplotlib.backend_bases.GraphicsContextBase.set_alpha(self,alpha)
matplotlib.backend_bases.GraphicsContextBase.set_antialiased(self,b)
matplotlib.backend_bases.GraphicsContextBase.set_capstyle(self,cs)
matplotlib.backend_bases.GraphicsContextBase.set_clip_path(self,path)
matplotlib.backend_bases.GraphicsContextBase.set_clip_rectangle(self,rectangle)
matplotlib.backend_bases.GraphicsContextBase.set_dashes(self,dash_offset,dash_list)
matplotlib.backend_bases.GraphicsContextBase.set_foreground(self,fg,isRGBA=False)
matplotlib.backend_bases.GraphicsContextBase.set_gid(self,id)
matplotlib.backend_bases.GraphicsContextBase.set_hatch(self,hatch)
matplotlib.backend_bases.GraphicsContextBase.set_hatch_color(self,hatch_color)
matplotlib.backend_bases.GraphicsContextBase.set_joinstyle(self,js)
matplotlib.backend_bases.GraphicsContextBase.set_linestyle(self,style)
matplotlib.backend_bases.GraphicsContextBase.set_linewidth(self,w)
matplotlib.backend_bases.GraphicsContextBase.set_sketch_params(self,scale=None,length=None,randomness=None)
matplotlib.backend_bases.GraphicsContextBase.set_snap(self,snap)
matplotlib.backend_bases.GraphicsContextBase.set_url(self,url)
matplotlib.backend_bases.IdleEvent(Event)
matplotlib.backend_bases.KeyEvent(self,name,canvas,key,x=0,y=0,guiEvent=None)
matplotlib.backend_bases.KeyEvent.__init__(self,name,canvas,key,x=0,y=0,guiEvent=None)
matplotlib.backend_bases.LocationEvent(self,name,canvas,x,y,guiEvent=None)
matplotlib.backend_bases.LocationEvent.__init__(self,name,canvas,x,y,guiEvent=None)
matplotlib.backend_bases.LocationEvent._update_enter_leave(self)
matplotlib.backend_bases.MouseEvent(self,name,canvas,x,y,button=None,key=None,step=0,dblclick=False,guiEvent=None)
matplotlib.backend_bases.MouseEvent.__init__(self,name,canvas,x,y,button=None,key=None,step=0,dblclick=False,guiEvent=None)
matplotlib.backend_bases.MouseEvent.__str__(self)
matplotlib.backend_bases.NavigationToolbar2(self,canvas)
matplotlib.backend_bases.NavigationToolbar2.__init__(self,canvas)
matplotlib.backend_bases.NavigationToolbar2._init_toolbar(self)
matplotlib.backend_bases.NavigationToolbar2._set_cursor(self,event)
matplotlib.backend_bases.NavigationToolbar2._switch_off_zoom_mode(self,event)
matplotlib.backend_bases.NavigationToolbar2._switch_on_zoom_mode(self,event)
matplotlib.backend_bases.NavigationToolbar2._update_view(self)
matplotlib.backend_bases.NavigationToolbar2.back(self,*args)
matplotlib.backend_bases.NavigationToolbar2.drag_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.drag_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.draw(self)
matplotlib.backend_bases.NavigationToolbar2.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backend_bases.NavigationToolbar2.dynamic_update(self)
matplotlib.backend_bases.NavigationToolbar2.forward(self,*args)
matplotlib.backend_bases.NavigationToolbar2.home(self,*args)
matplotlib.backend_bases.NavigationToolbar2.mouse_move(self,event)
matplotlib.backend_bases.NavigationToolbar2.pan(self,*args)
matplotlib.backend_bases.NavigationToolbar2.press(self,event)
matplotlib.backend_bases.NavigationToolbar2.press_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.press_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.push_current(self)
matplotlib.backend_bases.NavigationToolbar2.release(self,event)
matplotlib.backend_bases.NavigationToolbar2.release_pan(self,event)
matplotlib.backend_bases.NavigationToolbar2.release_zoom(self,event)
matplotlib.backend_bases.NavigationToolbar2.remove_rubberband(self)
matplotlib.backend_bases.NavigationToolbar2.save_figure(self,*args)
matplotlib.backend_bases.NavigationToolbar2.set_cursor(self,cursor)
matplotlib.backend_bases.NavigationToolbar2.set_history_buttons(self)
matplotlib.backend_bases.NavigationToolbar2.set_message(self,s)
matplotlib.backend_bases.NavigationToolbar2.update(self)
matplotlib.backend_bases.NavigationToolbar2.zoom(self,*args)
matplotlib.backend_bases.NonGuiException(Exception)
matplotlib.backend_bases.PickEvent(self,name,canvas,mouseevent,artist,guiEvent=None,**kwargs)
matplotlib.backend_bases.PickEvent.__init__(self,name,canvas,mouseevent,artist,guiEvent=None,**kwargs)
matplotlib.backend_bases.RendererBase(self)
matplotlib.backend_bases.RendererBase.__init__(self)
matplotlib.backend_bases.RendererBase._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath)
matplotlib.backend_bases.RendererBase._get_text_path_transform(self,x,y,s,prop,angle,ismath)
matplotlib.backend_bases.RendererBase._iter_collection(self,gc,master_transform,all_transforms,path_ids,offsets,offsetTrans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backend_bases.RendererBase._iter_collection_raw_paths(self,master_transform,paths,all_transforms)
matplotlib.backend_bases.RendererBase._iter_collection_uses_per_path(self,paths,all_transforms,offsets,facecolors,edgecolors)
matplotlib.backend_bases.RendererBase.close_group(self,s)
matplotlib.backend_bases.RendererBase.draw_gouraud_triangle(self,gc,points,colors,transform)
matplotlib.backend_bases.RendererBase.draw_gouraud_triangles(self,gc,triangles_array,colors_array,transform)
matplotlib.backend_bases.RendererBase.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backend_bases.RendererBase.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backend_bases.RendererBase.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backend_bases.RendererBase.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offsetTrans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backend_bases.RendererBase.draw_quad_mesh(self,gc,master_transform,meshWidth,meshHeight,coordinates,offsets,offsetTrans,facecolors,antialiased,edgecolors)
matplotlib.backend_bases.RendererBase.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backend_bases.RendererBase.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backend_bases.RendererBase.flipy(self)
matplotlib.backend_bases.RendererBase.get_canvas_width_height(self)
matplotlib.backend_bases.RendererBase.get_image_magnification(self)
matplotlib.backend_bases.RendererBase.get_texmanager(self)
matplotlib.backend_bases.RendererBase.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backend_bases.RendererBase.new_gc(self)
matplotlib.backend_bases.RendererBase.open_group(self,s,gid=None)
matplotlib.backend_bases.RendererBase.option_image_nocomposite(self)
matplotlib.backend_bases.RendererBase.option_scale_image(self)
matplotlib.backend_bases.RendererBase.points_to_pixels(self,points)
matplotlib.backend_bases.RendererBase.start_filter(self)
matplotlib.backend_bases.RendererBase.start_rasterizing(self)
matplotlib.backend_bases.RendererBase.stop_filter(self,filter_func)
matplotlib.backend_bases.RendererBase.stop_rasterizing(self)
matplotlib.backend_bases.RendererBase.strip_math(self,s)
matplotlib.backend_bases.ResizeEvent(self,name,canvas)
matplotlib.backend_bases.ResizeEvent.__init__(self,name,canvas)
matplotlib.backend_bases.ShowBase(self,block=None)
matplotlib.backend_bases.ShowBase.__call__(self,block=None)
matplotlib.backend_bases.StatusbarBase(self,toolmanager)
matplotlib.backend_bases.StatusbarBase.__init__(self,toolmanager)
matplotlib.backend_bases.StatusbarBase._message_cbk(self,event)
matplotlib.backend_bases.StatusbarBase.set_message(self,s)
matplotlib.backend_bases.TimerBase(self,interval=None,callbacks=None)
matplotlib.backend_bases.TimerBase.__del__(self)
matplotlib.backend_bases.TimerBase.__init__(self,interval=None,callbacks=None)
matplotlib.backend_bases.TimerBase._get_interval(self)
matplotlib.backend_bases.TimerBase._get_single_shot(self)
matplotlib.backend_bases.TimerBase._on_timer(self)
matplotlib.backend_bases.TimerBase._set_interval(self,interval)
matplotlib.backend_bases.TimerBase._set_single_shot(self,ss=True)
matplotlib.backend_bases.TimerBase._timer_set_interval(self)
matplotlib.backend_bases.TimerBase._timer_set_single_shot(self)
matplotlib.backend_bases.TimerBase._timer_start(self)
matplotlib.backend_bases.TimerBase._timer_stop(self)
matplotlib.backend_bases.TimerBase.add_callback(self,func,*args,**kwargs)
matplotlib.backend_bases.TimerBase.remove_callback(self,func,*args,**kwargs)
matplotlib.backend_bases.TimerBase.start(self,interval=None)
matplotlib.backend_bases.TimerBase.stop(self)
matplotlib.backend_bases.ToolContainerBase(self,toolmanager)
matplotlib.backend_bases.ToolContainerBase.__init__(self,toolmanager)
matplotlib.backend_bases.ToolContainerBase._get_image_filename(self,image)
matplotlib.backend_bases.ToolContainerBase._remove_tool_cbk(self,event)
matplotlib.backend_bases.ToolContainerBase._tool_toggled_cbk(self,event)
matplotlib.backend_bases.ToolContainerBase.add_tool(self,tool,group,position=-1)
matplotlib.backend_bases.ToolContainerBase.add_toolitem(self,name,group,position,image,description,toggle)
matplotlib.backend_bases.ToolContainerBase.remove_toolitem(self,name)
matplotlib.backend_bases.ToolContainerBase.toggle_toolitem(self,name,toggled)
matplotlib.backend_bases.ToolContainerBase.trigger_tool(self,name)
matplotlib.backend_bases._Backend(object)
matplotlib.backend_bases._Backend.draw_if_interactive(cls)
matplotlib.backend_bases._Backend.export(cls)
matplotlib.backend_bases._Backend.new_figure_manager(cls,num,*args,**kwargs)
matplotlib.backend_bases._Backend.new_figure_manager_given_figure(cls,num,figure)
matplotlib.backend_bases._Backend.show(cls,block=None)
matplotlib.backend_bases.get_registered_canvas_class(format)
matplotlib.backend_bases.key_press_handler(event,canvas,toolbar=None)
matplotlib.backend_bases.register_backend(format,backend,description=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/__init__.py----------------------------------------
A:matplotlib.__init__.__version__->str(get_versions()['version'])
A:matplotlib.__init__._log->logging.getLogger(__name__)
A:matplotlib.__init__.__version__numpy__->str('1.7.1')
A:matplotlib.__init__.a->distutils.version.LooseVersion(a)
A:matplotlib.__init__.b->distutils.version.LooseVersion(b)
A:matplotlib.__init__.oldlev->logging.getLogger(__name__).getEffectiveLevel()
A:matplotlib.__init__.fileo->open(fname, 'w')
A:matplotlib.__init__.console->logging.StreamHandler(fileo)
A:matplotlib.__init__.ret->RcParams([(key, default) for (key, (default, _)) in six.iteritems(defaultParams) if key not in _all_deprecated])
A:matplotlib.__init__.spoke->self.report(fmt % ret, level)
A:matplotlib.__init__.verbose->Verbose()
A:matplotlib.__init__.s->matplotlib.compat.subprocess.Popen([str('xmllint'), '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:matplotlib.__init__.(stdout, stderr)->matplotlib.compat.subprocess.Popen([str('xmllint'), '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:matplotlib.__init__.v->re.search(pattern, line).group(0)
A:matplotlib.__init__.match->re.search(pattern, line)
A:matplotlib.__init__.lines->stderr.decode('ascii').split('\n')
A:matplotlib.__init__.(gs_exec, gs_v)->checkdep_ghostscript()
A:matplotlib.__init__.pdftops_v->checkdep_pdftops()
A:matplotlib.__init__.dvipng_v->checkdep_dvipng()
A:matplotlib.__init__.path->os.path.join(sys.path[0], 'mpl-data')
A:matplotlib.__init__.configdiros.environ['MPLCONFIGDIR']->tempfile.mkdtemp(prefix='matplotlib-')
A:matplotlib.__init__.get_home->_wrap('$HOME=%s', _get_home, always=False)
A:matplotlib.__init__.configdir->os.path.abspath(configdir)
A:matplotlib.__init__.h->get_home()
A:matplotlib.__init__.p->os.path.join(xdg_base, 'matplotlib')
A:matplotlib.__init__.get_configdir->_wrap('CONFIGDIR=%s', _get_configdir, always=False)
A:matplotlib.__init__.get_cachedir->_wrap('CACHEDIR=%s', _get_cachedir, always=False)
A:matplotlib.__init__._file->_decode_filesystem_path(matplotlib.afm.__file__)
A:matplotlib.__init__.exe_path->os.path.dirname(_decode_filesystem_path(sys.executable))
A:matplotlib.__init__.defaultParams['datapath'][0]->_get_data_path()
A:matplotlib.__init__.get_data_path->_wrap('matplotlib data path %s', _get_data_path_cached, always=False)
A:matplotlib.__init__.datapath->get_data_path()
A:matplotlib.__init__.(_, tail)->os.path.split(datapath)
A:matplotlib.__init__.root->root.replace(tail, 'mpl-data').replace(tail, 'mpl-data')
A:matplotlib.__init__._all_deprecated->set(itertools.chain(_deprecated_ignore_map, _deprecated_map, _obsolete_set))
A:matplotlib.__init__.validate->dict(((key, converter) for (key, (default, converter)) in six.iteritems(defaultParams) if key not in _all_deprecated))
A:matplotlib.__init__.val->val.strip().strip()
A:matplotlib.__init__.cval->self.validate[key](val)
A:matplotlib.__init__.repr_split->pprint.pformat(dict(self), indent=1, width=80 - indent).split('\n')
A:matplotlib.__init__.repr_indented->('\n' + ' ' * indent).join(repr_split)
A:matplotlib.__init__.pattern_re->re.compile(pattern)
A:matplotlib.__init__.fname->os.path.expanduser(fname)
A:matplotlib.__init__.URL_REGEX->re.compile('http://|https://|ftp://|file://|file:\\\\')
A:matplotlib.__init__.f->urlopen(fname)
A:matplotlib.__init__.encoding->locale.getpreferredencoding(do_setlocale=False)
A:matplotlib.__init__.strippedline->line.split('#', 1)[0].strip()
A:matplotlib.__init__.tup->line.split('#', 1)[0].strip().split(':', 1)
A:matplotlib.__init__.key->key.strip().strip()
A:matplotlib.__init__.config->RcParams([(key, default) for (key, (default, _)) in iter_params if key not in _all_deprecated])
A:matplotlib.__init__.(val, line, cnt)->rc_temp.pop(key)
A:matplotlib.__init__.config_from_file->_rc_params_in_file(fname, fail_on_error)
A:matplotlib.__init__.iter_params->six.iteritems(defaultParams)
A:matplotlib.__init__.config['datapath']->get_data_path()
A:matplotlib.__init__.rcParams->rc_params()
A:matplotlib.__init__.(_basedir, _fname)->os.path.split(matplotlib_fname())
A:matplotlib.__init__._basedir->os.path.realpath(_basedir)
A:matplotlib.__init__._fullpath->os.path.join(_basedir, rcParams['examples.directory'])
A:matplotlib.__init__.rcParamsOrig->rc_params().copy()
A:matplotlib.__init__.rcParamsDefault->RcParams([(key, default) for (key, (default, converter)) in six.iteritems(defaultParams) if key not in _all_deprecated])
A:matplotlib.__init__.rcParams['ps.usedistiller']->checkdep_ps_distiller(rcParams['ps.usedistiller'])
A:matplotlib.__init__.rcParams['text.usetex']->checkdep_usetex(rcParams['text.usetex'])
A:matplotlib.__init__.orig->rc_params().copy()
A:matplotlib.__init__.arg->arg.lower().lower()
A:matplotlib.__init__.name->validate_backend(arg)
A:matplotlib.__init__.old_backend->get_backend()
A:matplotlib.__init__.old_recursionlimit->sys.getrecursionlimit()
A:matplotlib.__init__.args->tuple((_replacer(data, a) if _arg_names[j] in replace_names else a for (j, a) in enumerate(args)))
A:matplotlib.__init__.retcode->pytest.main(args, **kwargs)
A:matplotlib.__init__.docstring->dedent(docstring)
A:matplotlib.__init__._repl->_repl.format(names="', '".join(sorted(replace_names))).format(names="', '".join(sorted(replace_names)))
A:matplotlib.__init__.replace_names->set(replace_names)
A:matplotlib.__init__.arg_spec->inspect.getargspec(func)
A:matplotlib.__init__.sig->signature(func)
A:matplotlib.__init__.params->list(sig.parameters.values())
A:matplotlib.__init__.data_param->Parameter('data', Parameter.KEYWORD_ONLY, default=None)
A:matplotlib.__init__.new_sig->signature(func).replace(parameters=params)
A:matplotlib.__init__.label_namer_pos->arg_names.index(label_namer)
A:matplotlib.__init__.label_pos->arg_names.index('label')
A:matplotlib.__init__.data->dict(((k, _replacer(data, v) if k in replace_names else v) for (k, v) in six.iteritems(kwargs))).pop('data', None)
A:matplotlib.__init__._arg_names->positional_parameter_names(args, data)
A:matplotlib.__init__._label_namer_pos->positional_parameter_names(args, data).index(label_namer)
A:matplotlib.__init__._label_pos->arg_names.index('label')
A:matplotlib.__init__.label->dict(((k, _replacer(data, v) if k in replace_names else v) for (k, v) in six.iteritems(kwargs))).get(label_namer, None)
A:matplotlib.__init__.kwargs->dict(((k, _replacer(data, v) if k in replace_names else v) for (k, v) in six.iteritems(kwargs)))
A:matplotlib.__init__.kwargs['label']->get_label(kwargs[label_namer], label)
A:matplotlib.__init__.inner.__doc__->_add_data_doc(inner.__doc__, replace_names, replace_all_args)
matplotlib.__init__.RcParams(self,*args,**kwargs)
matplotlib.__init__.RcParams.__getitem__(self,key)
matplotlib.__init__.RcParams.__init__(self,*args,**kwargs)
matplotlib.__init__.RcParams.__iter__(self)
matplotlib.__init__.RcParams.__repr__(self)
matplotlib.__init__.RcParams.__setitem__(self,key,val)
matplotlib.__init__.RcParams.__str__(self)
matplotlib.__init__.RcParams.find_all(self,pattern)
matplotlib.__init__.Verbose(self)
matplotlib.__init__.Verbose.__init__(self)
matplotlib.__init__.Verbose.ge(self,level)
matplotlib.__init__.Verbose.report(self,s,level='helpful')
matplotlib.__init__.Verbose.set_fileo(self,fname)
matplotlib.__init__.Verbose.set_level(self,level)
matplotlib.__init__.Verbose.wrap(self,fmt,func,level='helpful',always=True)
matplotlib.__init__._add_data_doc(docstring,replace_names,replace_all_args)
matplotlib.__init__._create_tmp_config_dir()
matplotlib.__init__._decode_filesystem_path(path)
matplotlib.__init__._get_cachedir()
matplotlib.__init__._get_config_or_cache_dir(xdg_base)
matplotlib.__init__._get_configdir()
matplotlib.__init__._get_data_path()
matplotlib.__init__._get_data_path_cached()
matplotlib.__init__._get_home()
matplotlib.__init__._get_xdg_cache_dir()
matplotlib.__init__._get_xdg_config_dir()
matplotlib.__init__._init_tests()
matplotlib.__init__._is_writable_dir(p)
matplotlib.__init__._open_file_or_url(fname)
matplotlib.__init__._parse_commandline()
matplotlib.__init__._preprocess_data(replace_names=None,replace_all_args=False,label_namer=None,positional_parameter_names=None)
matplotlib.__init__._rc_params_in_file(fname,fail_on_error=False)
matplotlib.__init__._replacer(data,key)
matplotlib.__init__._set_logger_verbose_level(level_str='silent',file_str='sys.stdout')
matplotlib.__init__._url_lines(f)
matplotlib.__init__._wrap(fmt,func,level=logging.DEBUG,always=True)
matplotlib.__init__.checkdep_dvipng()
matplotlib.__init__.checkdep_ghostscript()
matplotlib.__init__.checkdep_inkscape()
matplotlib.__init__.checkdep_pdftops()
matplotlib.__init__.checkdep_ps_distiller(s)
matplotlib.__init__.checkdep_tex()
matplotlib.__init__.checkdep_usetex(s)
matplotlib.__init__.checkdep_xmllint()
matplotlib.__init__.compare_versions(a,b)
matplotlib.__init__.get_backend()
matplotlib.__init__.get_py2exe_datafiles()
matplotlib.__init__.interactive(b)
matplotlib.__init__.is_interactive()
matplotlib.__init__.is_url(filename)
matplotlib.__init__.matplotlib_fname()
matplotlib.__init__.rc(group,**kwargs)
matplotlib.__init__.rc_context(rc=None,fname=None)
matplotlib.__init__.rc_file(fname)
matplotlib.__init__.rc_file_defaults()
matplotlib.__init__.rc_params(fail_on_error=False)
matplotlib.__init__.rc_params_from_file(fname,fail_on_error=False,use_default_template=True)
matplotlib.__init__.rcdefaults()
matplotlib.__init__.test(verbosity=None,coverage=False,switch_backend_warn=True,recursionlimit=0,**kwargs)
matplotlib.__init__.tk_window_focus()
matplotlib.__init__.use(arg,warn=True,force=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/lines.py----------------------------------------
A:matplotlib.lines.style->cbook.ls_mapper.get(style, style)
A:matplotlib.lines.dashes->tuple(rcParams['lines.{}_pattern'.format(style)])
A:matplotlib.lines.dsum->sum(dashes)
A:matplotlib.lines.(res,)->numpy.nonzero((cx - x) ** 2 + (cy - y) ** 2 <= radius ** 2)
A:matplotlib.lines.(points,)->point_hits.ravel().nonzero()
A:matplotlib.lines.(lines,)->line_hits.ravel().nonzero()
A:matplotlib.lines.disp_coords->affine.transform(tpath.vertices)
A:matplotlib.lines.delta->numpy.cumsum(delta)
A:matplotlib.lines.scale->numpy.sqrt(scale)
A:matplotlib.lines.marker_delta->numpy.arange(start * scale, delta[-1], step * scale)
A:matplotlib.lines.inds->numpy.unique(inds)
A:matplotlib.lines.(ds, ls)->self._split_drawstyle_linestyle(ls)
A:matplotlib.lines.self._marker->MarkerStyle(other._marker.get_marker(), other._marker.get_fillstyle())
A:matplotlib.lines.self._xorig->numpy.asarray([])
A:matplotlib.lines.self._yorig->numpy.asarray([])
A:matplotlib.lines.transformed_path->self._get_transformed_path()
A:matplotlib.lines.(path, affine)->self._get_transformed_path().get_transformed_path_and_affine()
A:matplotlib.lines.path->affine.transform_path(path)
A:matplotlib.lines.(ind,)->numpy.nonzero(np.less_equal(d, pixels ** 2))
A:matplotlib.lines.ind->sorted(self.ind)
A:matplotlib.lines.bbox->bbox.padded(ms).padded(ms)
A:matplotlib.lines.self._xcid->ax.xaxis.callbacks.connect('units', self.recache_always)
A:matplotlib.lines.self._ycid->ax.yaxis.callbacks.connect('units', self.recache_always)
A:matplotlib.lines.xconv->self.convert_xunits(self._xorig)
A:matplotlib.lines.x->_to_unmasked_float_array(xconv).ravel()
A:matplotlib.lines.yconv->self.convert_yunits(self._yorig)
A:matplotlib.lines.y->_to_unmasked_float_array(yconv).ravel()
A:matplotlib.lines.self._xy->numpy.column_stack(np.broadcast_arrays(x, y)).astype(float)
A:matplotlib.lines.nanmask->numpy.isnan(x)
A:matplotlib.lines.self._x_filled->self._x.copy()
A:matplotlib.lines.indices->numpy.arange(len(x))
A:matplotlib.lines.self._x_filled[nanmask]->numpy.interp(indices[nanmask], indices[~nanmask], self._x[~nanmask])
A:matplotlib.lines.xy->STEP_LOOKUP_MAP[self._drawstyle](*self._xy[subslice, :].T)
A:matplotlib.lines.self._path->Path(np.asarray(xy).T, _interpolation_steps=interpolation_steps)
A:matplotlib.lines._path->Path(np.asarray(xy).T, _interpolation_steps=self._path._interpolation_steps)
A:matplotlib.lines.self._transformed_path->TransformedPath(_path, self.get_transform())
A:matplotlib.lines.(x0, x1)->self.axes.get_xbound()
A:matplotlib.lines.(i0,)->self._x_filled.searchsorted([x0], 'left')
A:matplotlib.lines.(i1,)->self._x_filled.searchsorted([x1], 'right')
A:matplotlib.lines.subslice->slice(max(i0 - 1, 0), i1 + 1)
A:matplotlib.lines.transf_path->self._get_transformed_path()
A:matplotlib.lines.renderer->PathEffectRenderer(self.get_path_effects(), renderer)
A:matplotlib.lines.(tpath, affine)->self._get_transformed_path().get_transformed_points_and_affine()
A:matplotlib.lines.gc->PathEffectRenderer(self.get_path_effects(), renderer).new_gc()
A:matplotlib.lines.ln_color_rgba->self._get_rgba_ln_color()
A:matplotlib.lines.rgbaFace->self._get_rgba_face()
A:matplotlib.lines.rgbaFaceAlt->self._get_rgba_face(alt=True)
A:matplotlib.lines.edgecolor->self.get_markeredgecolor()
A:matplotlib.lines.markevery->self.get_markevery()
A:matplotlib.lines.subsampled->_mark_every_path(markevery, tpath, affine, self.axes.transAxes)
A:matplotlib.lines.snap->marker.get_snap_threshold()
A:matplotlib.lines.marker_path->marker.get_path()
A:matplotlib.lines.marker_trans->marker_trans.scale(w).scale(w)
A:matplotlib.lines.w->float(w)
A:matplotlib.lines.alt_marker_path->marker.get_alt_path()
A:matplotlib.lines.alt_marker_trans->alt_marker_trans.scale(w).scale(w)
A:matplotlib.lines.(self._dashOffset, self._dashSeq)->_scale_dashes(self._us_dashOffset, self._us_dashSeq, self._linewidth)
A:matplotlib.lines.(self._us_dashOffset, self._us_dashSeq)->_get_dash_pattern(ls)
A:matplotlib.lines.sz->float(sz)
A:matplotlib.lines.s->s.lower().lower()
A:matplotlib.lines.self.cid->self.canvas.mpl_connect('pick_event', self.onpick)
A:matplotlib.lines.self.ind->set()
A:matplotlib.lines.(xdata, ydata)->self.line.get_data()
matplotlib.lines.Line2D(self,xdata,ydata,linewidth=None,linestyle=None,color=None,marker=None,markersize=None,markeredgewidth=None,markeredgecolor=None,markerfacecolor=None,markerfacecoloralt='none',fillstyle=None,antialiased=None,dash_capstyle=None,solid_capstyle=None,dash_joinstyle=None,solid_joinstyle=None,pickradius=5,drawstyle=None,markevery=None,**kwargs)
matplotlib.lines.Line2D.__init__(self,xdata,ydata,linewidth=None,linestyle=None,color=None,marker=None,markersize=None,markeredgewidth=None,markeredgecolor=None,markerfacecolor=None,markerfacecoloralt='none',fillstyle=None,antialiased=None,dash_capstyle=None,solid_capstyle=None,dash_joinstyle=None,solid_joinstyle=None,pickradius=5,drawstyle=None,markevery=None,**kwargs)
matplotlib.lines.Line2D.__str__(self)
matplotlib.lines.Line2D._get_markerfacecolor(self,alt=False)
matplotlib.lines.Line2D._get_rgba_face(self,alt=False)
matplotlib.lines.Line2D._get_rgba_ln_color(self,alt=False)
matplotlib.lines.Line2D._get_transformed_path(self)
matplotlib.lines.Line2D._is_sorted(self,x)
matplotlib.lines.Line2D._split_drawstyle_linestyle(self,ls)
matplotlib.lines.Line2D._transform_path(self,subslice=None)
matplotlib.lines.Line2D.axes(self,ax)
matplotlib.lines.Line2D.contains(self,mouseevent)
matplotlib.lines.Line2D.draw(self,renderer)
matplotlib.lines.Line2D.get_aa(self)
matplotlib.lines.Line2D.get_antialiased(self)
matplotlib.lines.Line2D.get_c(self)
matplotlib.lines.Line2D.get_color(self)
matplotlib.lines.Line2D.get_dash_capstyle(self)
matplotlib.lines.Line2D.get_dash_joinstyle(self)
matplotlib.lines.Line2D.get_data(self,orig=True)
matplotlib.lines.Line2D.get_drawstyle(self)
matplotlib.lines.Line2D.get_fillstyle(self)
matplotlib.lines.Line2D.get_linestyle(self)
matplotlib.lines.Line2D.get_linewidth(self)
matplotlib.lines.Line2D.get_ls(self)
matplotlib.lines.Line2D.get_lw(self)
matplotlib.lines.Line2D.get_marker(self)
matplotlib.lines.Line2D.get_markeredgecolor(self)
matplotlib.lines.Line2D.get_markeredgewidth(self)
matplotlib.lines.Line2D.get_markerfacecolor(self)
matplotlib.lines.Line2D.get_markerfacecoloralt(self)
matplotlib.lines.Line2D.get_markersize(self)
matplotlib.lines.Line2D.get_markevery(self)
matplotlib.lines.Line2D.get_mec(self)
matplotlib.lines.Line2D.get_mew(self)
matplotlib.lines.Line2D.get_mfc(self)
matplotlib.lines.Line2D.get_mfcalt(self,alt=False)
matplotlib.lines.Line2D.get_ms(self)
matplotlib.lines.Line2D.get_path(self)
matplotlib.lines.Line2D.get_pickradius(self)
matplotlib.lines.Line2D.get_solid_capstyle(self)
matplotlib.lines.Line2D.get_solid_joinstyle(self)
matplotlib.lines.Line2D.get_window_extent(self,renderer)
matplotlib.lines.Line2D.get_xdata(self,orig=True)
matplotlib.lines.Line2D.get_xydata(self)
matplotlib.lines.Line2D.get_ydata(self,orig=True)
matplotlib.lines.Line2D.is_dashed(self)
matplotlib.lines.Line2D.recache(self,always=False)
matplotlib.lines.Line2D.recache_always(self)
matplotlib.lines.Line2D.set_aa(self,val)
matplotlib.lines.Line2D.set_antialiased(self,b)
matplotlib.lines.Line2D.set_c(self,val)
matplotlib.lines.Line2D.set_color(self,color)
matplotlib.lines.Line2D.set_dash_capstyle(self,s)
matplotlib.lines.Line2D.set_dash_joinstyle(self,s)
matplotlib.lines.Line2D.set_dashes(self,seq)
matplotlib.lines.Line2D.set_data(self,*args)
matplotlib.lines.Line2D.set_drawstyle(self,drawstyle)
matplotlib.lines.Line2D.set_fillstyle(self,fs)
matplotlib.lines.Line2D.set_linestyle(self,ls)
matplotlib.lines.Line2D.set_linewidth(self,w)
matplotlib.lines.Line2D.set_ls(self,val)
matplotlib.lines.Line2D.set_lw(self,val)
matplotlib.lines.Line2D.set_marker(self,marker)
matplotlib.lines.Line2D.set_markeredgecolor(self,ec)
matplotlib.lines.Line2D.set_markeredgewidth(self,ew)
matplotlib.lines.Line2D.set_markerfacecolor(self,fc)
matplotlib.lines.Line2D.set_markerfacecoloralt(self,fc)
matplotlib.lines.Line2D.set_markersize(self,sz)
matplotlib.lines.Line2D.set_markevery(self,every)
matplotlib.lines.Line2D.set_mec(self,val)
matplotlib.lines.Line2D.set_mew(self,val)
matplotlib.lines.Line2D.set_mfc(self,val)
matplotlib.lines.Line2D.set_mfcalt(self,val)
matplotlib.lines.Line2D.set_ms(self,val)
matplotlib.lines.Line2D.set_picker(self,p)
matplotlib.lines.Line2D.set_pickradius(self,d)
matplotlib.lines.Line2D.set_solid_capstyle(self,s)
matplotlib.lines.Line2D.set_solid_joinstyle(self,s)
matplotlib.lines.Line2D.set_transform(self,t)
matplotlib.lines.Line2D.set_xdata(self,x)
matplotlib.lines.Line2D.set_ydata(self,y)
matplotlib.lines.Line2D.update_from(self,other)
matplotlib.lines.VertexSelector(self,line)
matplotlib.lines.VertexSelector.__init__(self,line)
matplotlib.lines.VertexSelector.onpick(self,event)
matplotlib.lines.VertexSelector.process_selected(self,ind,xs,ys)
matplotlib.lines._get_dash_pattern(style)
matplotlib.lines._mark_every_path(markevery,tpath,affine,ax_transform)
matplotlib.lines._scale_dashes(offset,dashes,lw)
matplotlib.lines.segment_hits(cx,cy,x,y,radius)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/image.py----------------------------------------
A:matplotlib.image._log->logging.getLogger(__name__)
A:matplotlib.image.interpolations_names->set(_interpd_)
A:matplotlib.image.(data, x, y, trans)->AxesImage(None, cmap=cmap, origin=origin).make_image(renderer, magnification)
A:matplotlib.image.bbox->Bbox([[self.ox / fac, self.oy / fac], [self.ox / fac + self._A.shape[1], self.oy / fac + self._A.shape[0]]])
A:matplotlib.image.output->self.to_rgba(output, bytes=True, norm=False)
A:matplotlib.image.trans->BboxTransform(boxin=data_extent, boxout=array_extent)
A:matplotlib.image.has_images->any((isinstance(x, _ImageBase) for x in artists))
A:matplotlib.image.mag->renderer.get_image_magnification()
A:matplotlib.image.(data, l, b)->composite_images(image_group, renderer, mag)
A:matplotlib.image.gc->renderer.new_gc()
A:matplotlib.image.rgba->numpy.zeros((A.shape[0], A.shape[1], 4), dtype=A.dtype)
A:matplotlib.image.state->super(_ImageBase, self).__getstate__()
A:matplotlib.image.clipped_bbox->matplotlib.transforms.Bbox.intersection(out_bbox, clip_bbox)
A:matplotlib.image.t0->IdentityTransform()
A:matplotlib.image.out_width->int(out_width_base)
A:matplotlib.image.out_height->int(out_height_base)
A:matplotlib.image.a_min->numpy.asscalar(a_min.astype(scaled_dtype))
A:matplotlib.image.a_max->numpy.asscalar(a_max.astype(scaled_dtype))
A:matplotlib.image.A_scaled->numpy.clip(A_scaled, newmin, newmax)
A:matplotlib.image.A_resampled->A_resampled.astype(A.dtype).astype(A.dtype)
A:matplotlib.image.mask->numpy.empty(A.shape, dtype=np.float32)
A:matplotlib.image.mask[:]->numpy.where(A.mask, np.float32(np.nan), np.float32(1))
A:matplotlib.image.out_mask->numpy.isnan(out_mask)
A:matplotlib.image.out_alpha->numpy.array(out_mask)
A:matplotlib.image.A->matplotlib.cbook.safe_masked_invalid(A, copy=True)
A:matplotlib.image.alpha->self.get_alpha()
A:matplotlib.image.alpha_channel[:]->numpy.asarray(np.asarray(alpha_channel, np.float32) * out_alpha * alpha, np.uint8)
A:matplotlib.image.self._imcache->self.to_rgba(A, bytes=True, norm=A.ndim == 2)
A:matplotlib.image.subset->TransformedBbox(clip_bbox, t0.frozen().inverted()).frozen()
A:matplotlib.image.(im, l, b, trans)->self.make_image(renderer, renderer.get_image_magnification())
A:matplotlib.image.(xmin, xmax, ymin, ymax)->self.get_extent()
A:matplotlib.image.im->imread(infile)
A:matplotlib.image.self._A->self._A.astype(np.uint8)
A:matplotlib.image.s->s.lower().lower()
A:matplotlib.image.r->float(filterrad)
A:matplotlib.image.(x1, x2, y1, y2)->self.get_extent()
A:matplotlib.image.transformed_bbox->TransformedBbox(bbox, trans)
A:matplotlib.image.sz->self.get_size()
A:matplotlib.image.arr->self.get_array()
A:matplotlib.image.data_extent->Bbox([[ymin, xmin], [ymax, xmax]])
A:matplotlib.image.array_extent->Bbox([[0, 0], arr.shape[:2]])
A:matplotlib.image.point->BboxTransform(boxin=data_extent, boxout=array_extent).transform_point([y, x])
A:matplotlib.image.(i, j)->BboxTransform(boxin=data_extent, boxout=array_extent).transform_point([y, x]).astype(int)
A:matplotlib.image.interp->kwargs.pop('interpolation', 'nearest')
A:matplotlib.image.self.is_grayscale->self.cmap.is_gray()
A:matplotlib.image.B->numpy.zeros(tuple(list(A.shape[0:2]) + [4]), np.uint8)
A:matplotlib.image.x->numpy.fromstring(raw, '<u2')
A:matplotlib.image.y->numpy.array(y, np.float64).ravel()
A:matplotlib.image.fc->self.axes.patch.get_facecolor()
A:matplotlib.image.bg->(np.array(bg) * 255).astype(np.uint8)
A:matplotlib.image.width->int(np.round(width * magnification))
A:matplotlib.image.height->int(np.round(height * magnification))
A:matplotlib.image.(numrows, numcols)->self.get_size()
A:matplotlib.image.(width, height)->renderer.get_canvas_width_height()
A:matplotlib.image.clip->Bbox([[0, 0], [width, height]])
A:matplotlib.image.self._transform->BboxTransform(Bbox([[0, 0], [1, 1]]), clip)
A:matplotlib.image.inside->self.get_window_extent().contains(x, y)
A:matplotlib.image.bbox_in->self.get_window_extent(renderer).frozen()
A:matplotlib.image.bbox_out->self.get_window_extent(renderer)
A:matplotlib.image.parsed->urlparse(fname)
A:matplotlib.image.(basename, ext)->os.path.splitext(basename)
A:matplotlib.image.fd->BytesIO(urlopen(fname).read())
A:matplotlib.image.fname->os.fspath(fname)
A:matplotlib.image.image->AxesImage(None, cmap=cmap, origin=origin)
A:matplotlib.image.fig->Figure(figsize=(width, height), dpi=dpi)
A:matplotlib.image.raw->pilImage.convert('RGBA').tobytes('raw', pilImage.mode)
A:matplotlib.image.pilImage->pilImage.convert('RGBA').convert('RGBA')
A:matplotlib.image.(basedir, basename)->os.path.split(infile)
A:matplotlib.image.(baseout, extout)->os.path.splitext(thumbfile)
A:matplotlib.image.extension->extout.lower()
A:matplotlib.image.ax->Figure(figsize=(width, height), dpi=dpi).add_axes([0, 0, 1, 1], aspect='auto', frameon=False, xticks=[], yticks=[])
matplotlib.image.AxesImage(self,ax,cmap=None,norm=None,interpolation=None,origin=None,extent=None,filternorm=1,filterrad=4.0,resample=False,**kwargs)
matplotlib.image.AxesImage.__init__(self,ax,cmap=None,norm=None,interpolation=None,origin=None,extent=None,filternorm=1,filterrad=4.0,resample=False,**kwargs)
matplotlib.image.AxesImage.__str__(self)
matplotlib.image.AxesImage._check_unsampled_image(self,renderer)
matplotlib.image.AxesImage.get_cursor_data(self,event)
matplotlib.image.AxesImage.get_extent(self)
matplotlib.image.AxesImage.get_window_extent(self,renderer=None)
matplotlib.image.AxesImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.AxesImage.set_extent(self,extent)
matplotlib.image.BboxImage(self,bbox,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,interp_at_native=True,**kwargs)
matplotlib.image.BboxImage.__init__(self,bbox,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,interp_at_native=True,**kwargs)
matplotlib.image.BboxImage.contains(self,mouseevent)
matplotlib.image.BboxImage.get_transform(self)
matplotlib.image.BboxImage.get_window_extent(self,renderer=None)
matplotlib.image.BboxImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.FigureImage(self,fig,cmap=None,norm=None,offsetx=0,offsety=0,origin=None,**kwargs)
matplotlib.image.FigureImage.__init__(self,fig,cmap=None,norm=None,offsetx=0,offsety=0,origin=None,**kwargs)
matplotlib.image.FigureImage.get_extent(self)
matplotlib.image.FigureImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.FigureImage.set_data(self,A)
matplotlib.image.NonUniformImage(self,ax,**kwargs)
matplotlib.image.NonUniformImage.__init__(self,ax,**kwargs)
matplotlib.image.NonUniformImage._check_unsampled_image(self,renderer)
matplotlib.image.NonUniformImage.get_extent(self)
matplotlib.image.NonUniformImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.NonUniformImage.set_array(self,*args)
matplotlib.image.NonUniformImage.set_cmap(self,cmap)
matplotlib.image.NonUniformImage.set_data(self,x,y,A)
matplotlib.image.NonUniformImage.set_filternorm(self,s)
matplotlib.image.NonUniformImage.set_filterrad(self,s)
matplotlib.image.NonUniformImage.set_interpolation(self,s)
matplotlib.image.NonUniformImage.set_norm(self,norm)
matplotlib.image.PcolorImage(self,ax,x=None,y=None,A=None,cmap=None,norm=None,**kwargs)
matplotlib.image.PcolorImage.__init__(self,ax,x=None,y=None,A=None,cmap=None,norm=None,**kwargs)
matplotlib.image.PcolorImage._check_unsampled_image(self,renderer)
matplotlib.image.PcolorImage.get_cursor_data(self,event)
matplotlib.image.PcolorImage.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image.PcolorImage.set_array(self,*args)
matplotlib.image.PcolorImage.set_data(self,x,y,A)
matplotlib.image._ImageBase(self,ax,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,**kwargs)
matplotlib.image._ImageBase.__getstate__(self)
matplotlib.image._ImageBase.__init__(self,ax,cmap=None,norm=None,interpolation=None,origin=None,filternorm=1,filterrad=4.0,resample=False,**kwargs)
matplotlib.image._ImageBase.__str__(self)
matplotlib.image._ImageBase._check_unsampled_image(self,renderer)
matplotlib.image._ImageBase._draw_unsampled_image(self,renderer,gc)
matplotlib.image._ImageBase._interpd(self)
matplotlib.image._ImageBase._interpdr(self)
matplotlib.image._ImageBase._make_image(self,A,in_bbox,out_bbox,clip_bbox,magnification=1.0,unsampled=False,round_to_pixel_border=True)
matplotlib.image._ImageBase.can_composite(self)
matplotlib.image._ImageBase.changed(self)
matplotlib.image._ImageBase.contains(self,mouseevent)
matplotlib.image._ImageBase.draw(self,renderer,*args,**kwargs)
matplotlib.image._ImageBase.get_filternorm(self)
matplotlib.image._ImageBase.get_filterrad(self)
matplotlib.image._ImageBase.get_interpolation(self)
matplotlib.image._ImageBase.get_resample(self)
matplotlib.image._ImageBase.get_size(self)
matplotlib.image._ImageBase.iterpnames(self)
matplotlib.image._ImageBase.make_image(self,renderer,magnification=1.0,unsampled=False)
matplotlib.image._ImageBase.set_alpha(self,alpha)
matplotlib.image._ImageBase.set_array(self,A)
matplotlib.image._ImageBase.set_data(self,A)
matplotlib.image._ImageBase.set_filternorm(self,filternorm)
matplotlib.image._ImageBase.set_filterrad(self,filterrad)
matplotlib.image._ImageBase.set_interpolation(self,s)
matplotlib.image._ImageBase.set_resample(self,v)
matplotlib.image._ImageBase.write_png(self,fname)
matplotlib.image._draw_list_compositing_images(renderer,parent,artists,suppress_composite=None)
matplotlib.image._rgb_to_rgba(A)
matplotlib.image.composite_images(images,renderer,magnification=1.0)
matplotlib.image.imread(fname,format=None)
matplotlib.image.imsave(fname,arr,vmin=None,vmax=None,cmap=None,format=None,origin=None,dpi=100)
matplotlib.image.pil_to_array(pilImage)
matplotlib.image.thumbnail(infile,thumbfile,scale=0.1,interpolation='bilinear',preview=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/cm.py----------------------------------------
A:matplotlib.cm.valnew->_reverser(val)
A:matplotlib.cm.revspec->list(reversed(spec))
A:matplotlib.cm.cmap_d[cmapname]->_generate_cmap(cmapname, LUTSIZE)
A:matplotlib.cm.cmap->get_cmap(cmap)
A:matplotlib.cm.self.callbacksSM->matplotlib.cbook.CallbackRegistry()
A:matplotlib.cm.norm->matplotlib.colors.Normalize()
A:matplotlib.cm.self.cmap->get_cmap(cmap)
A:matplotlib.cm.alpha->numpy.uint8(alpha * 255)
A:matplotlib.cm.xx->(xx * 255).astype(np.uint8)
A:matplotlib.cm.x->self.norm(x)
A:matplotlib.cm.rgba->self.cmap(x, alpha=alpha, bytes=bytes)
A:matplotlib.cm.self.norm.vmin->matplotlib.colors._sanitize_extrema(vmin)
A:matplotlib.cm.self.norm.vmax->matplotlib.colors._sanitize_extrema(vmax)
matplotlib.cm.ScalarMappable(self,norm=None,cmap=None)
matplotlib.cm.ScalarMappable.__init__(self,norm=None,cmap=None)
matplotlib.cm.ScalarMappable.add_checker(self,checker)
matplotlib.cm.ScalarMappable.autoscale(self)
matplotlib.cm.ScalarMappable.autoscale_None(self)
matplotlib.cm.ScalarMappable.changed(self)
matplotlib.cm.ScalarMappable.check_update(self,checker)
matplotlib.cm.ScalarMappable.get_array(self)
matplotlib.cm.ScalarMappable.get_clim(self)
matplotlib.cm.ScalarMappable.get_cmap(self)
matplotlib.cm.ScalarMappable.set_array(self,A)
matplotlib.cm.ScalarMappable.set_clim(self,vmin=None,vmax=None)
matplotlib.cm.ScalarMappable.set_cmap(self,cmap)
matplotlib.cm.ScalarMappable.set_norm(self,norm)
matplotlib.cm.ScalarMappable.to_rgba(self,x,alpha=None,bytes=False,norm=True)
matplotlib.cm._generate_cmap(name,lutsize)
matplotlib.cm._reverse_cmap_spec(spec)
matplotlib.cm._reverser(f)
matplotlib.cm.get_cmap(name=None,lut=None)
matplotlib.cm.register_cmap(name=None,cmap=None,data=None,lut=None)
matplotlib.cm.revcmap(data)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/type1font.py----------------------------------------
A:matplotlib.type1font.data->self._read(file)
A:matplotlib.type1font.self.parts->self._split(data)
A:matplotlib.type1font.rawdata->file.read()
A:matplotlib.type1font.type->ord(rawdata[1])
A:matplotlib.type1font.(length,)->struct.unpack(str('<i'), rawdata[2:6])
A:matplotlib.type1font.idx->self._read(file).index(b'eexec')
A:matplotlib.type1font.binary->binascii.unhexlify(data[len1:idx + 1])
A:matplotlib.type1font._whitespace_re->re.compile(b'[\\0\\t\\r\\014\\n ]+')
A:matplotlib.type1font._token_re->re.compile(b'/{0,2}[^]\\0\\t\\r\\v\\n ()<>{}/%[]+')
A:matplotlib.type1font._comment_re->re.compile(b'%[^\\r\\n\\v]*')
A:matplotlib.type1font._instring_re->re.compile(b'[()\\\\]')
A:matplotlib.type1font._whitespace->object()
A:matplotlib.type1font._name->object()
A:matplotlib.type1font._string->object()
A:matplotlib.type1font._delimiter->object()
A:matplotlib.type1font._number->object()
A:matplotlib.type1font.match->cls._token_re.match(text[pos:])
A:matplotlib.type1font.key->convert(value[1:])
A:matplotlib.type1font.(token, value)->next(tokens)
A:matplotlib.type1font.value->int(value)
A:matplotlib.type1font.prop['FamilyName']->re.sub(extras, '', prop['FullName'])
A:matplotlib.type1font.array->array.lstrip(b'[').rstrip(b']').split().lstrip(b'[').rstrip(b']').split()
A:matplotlib.type1font.oldmatrix->numpy.eye(3, 3)
A:matplotlib.type1font.modifier->numpy.array([[extend, 0, 0], [slant, 1, 0], [0, 0, 1]])
A:matplotlib.type1font.newmatrix->numpy.dot(modifier, oldmatrix)
A:matplotlib.type1font.tokenizer->self._tokens(self.parts[0])
A:matplotlib.type1font.transformed->self._transformer(tokenizer, slant=effects.get('slant', 0.0), extend=effects.get('extend', 1.0))
matplotlib.type1font.Type1Font(self,input)
matplotlib.type1font.Type1Font.__init__(self,input)
matplotlib.type1font.Type1Font._parse(self)
matplotlib.type1font.Type1Font._read(self,file)
matplotlib.type1font.Type1Font._split(self,data)
matplotlib.type1font.Type1Font._tokens(cls,text)
matplotlib.type1font.Type1Font._transformer(cls,tokens,slant,extend)
matplotlib.type1font.Type1Font.transform(self,effects)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_cm.py----------------------------------------
A:matplotlib._cm._cubehelix_data->cubehelix()
A:matplotlib._cm.ret->numpy.zeros(len(x))
matplotlib._cm.cubehelix(gamma=1.0,s=0.5,r=-1.5,h=1.0)
matplotlib._cm.gfunc32(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/_cm_listed.py----------------------------------------
A:matplotlib._cm_listed.cmaps[name]->ListedColormap(list(reversed(data)), name=name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backend_tools.py----------------------------------------
A:matplotlib.backend_tools.(HAND, POINTER, SELECT_REGION, MOVE, WAIT)->list(range(5))
A:matplotlib.backend_tools.cursors->Cursors()
A:matplotlib.backend_tools.self._toggled->kwargs.pop('toggled', self.default_toggled)
A:matplotlib.backend_tools.self._idDrag->self.figure.canvas.mpl_connect('motion_notify_event', self._mouse_move)
A:matplotlib.backend_tools.s->event.inaxes.format_coord(event.xdata, event.ydata)
A:matplotlib.backend_tools.a->matplotlib.cbook._topmost_artist(artists)
A:matplotlib.backend_tools.data->matplotlib.cbook._topmost_artist(artists).get_cursor_data(event)
A:matplotlib.backend_tools.(x_state, x_which, y_state, y_which)->self._get_next_grid_states(ax)
A:matplotlib.backend_tools.(x_state, y_state)->map(self._get_uniform_grid_state, [ax.xaxis.minorTicks, ax.yaxis.minorTicks])
A:matplotlib.backend_tools.self.views->WeakKeyDictionary()
A:matplotlib.backend_tools.self.positions->WeakKeyDictionary()
A:matplotlib.backend_tools.self.home_views->WeakKeyDictionary()
A:matplotlib.backend_tools.self.views[figure]->matplotlib.cbook.Stack()
A:matplotlib.backend_tools.self.positions[figure]->matplotlib.cbook.Stack()
A:matplotlib.backend_tools.self.home_views[figure]->WeakKeyDictionary()
A:matplotlib.backend_tools.views->WeakKeyDictionary()
A:matplotlib.backend_tools.pos->WeakKeyDictionary()
A:matplotlib.backend_tools.all_axes->self.figure.get_axes()
A:matplotlib.backend_tools.views[a]->matplotlib.cbook._topmost_artist(artists)._get_view()
A:matplotlib.backend_tools.pos[a]->self._axes_pos(a)
A:matplotlib.backend_tools.self.home_views[figure][a]->matplotlib.cbook._topmost_artist(artists)._get_view()
A:matplotlib.backend_tools.xaxis->getattr(a, 'xaxis', None)
A:matplotlib.backend_tools.yaxis->getattr(a, 'yaxis', None)
A:matplotlib.backend_tools.zaxis->getattr(a, 'zaxis', None)
A:matplotlib.backend_tools.self._idPress->self.figure.canvas.mpl_connect('button_press_event', self._press)
A:matplotlib.backend_tools.self._idRelease->self.figure.canvas.mpl_connect('button_release_event', self._release)
A:matplotlib.backend_tools.self._idScroll->self.figure.canvas.mpl_connect('scroll_event', self.scroll_zoom)
A:matplotlib.backend_tools.self.lastscroll->time.time()
A:matplotlib.backend_tools.id1->self.figure.canvas.mpl_connect('motion_notify_event', self._mouse_move)
A:matplotlib.backend_tools.id2->self.figure.canvas.mpl_connect('key_press_event', self._switch_on_zoom_mode)
A:matplotlib.backend_tools.id3->self.figure.canvas.mpl_connect('key_release_event', self._switch_off_zoom_mode)
A:matplotlib.backend_tools.((x1, y1), (x2, y2))->numpy.clip([[lastx, lasty], [x, y]], a.bbox.min, a.bbox.max)
matplotlib.backend_tools.AxisScaleBase(ToolToggleBase)
matplotlib.backend_tools.AxisScaleBase.disable(self,event)
matplotlib.backend_tools.AxisScaleBase.enable(self,event)
matplotlib.backend_tools.AxisScaleBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ConfigureSubplotsBase(ToolBase)
matplotlib.backend_tools.Cursors(object)
matplotlib.backend_tools.RubberbandBase(ToolBase)
matplotlib.backend_tools.RubberbandBase.draw_rubberband(self,*data)
matplotlib.backend_tools.RubberbandBase.remove_rubberband(self)
matplotlib.backend_tools.RubberbandBase.trigger(self,sender,event,data)
matplotlib.backend_tools.SaveFigureBase(ToolBase)
matplotlib.backend_tools.SetCursorBase(self,*args,**kwargs)
matplotlib.backend_tools.SetCursorBase.__init__(self,*args,**kwargs)
matplotlib.backend_tools.SetCursorBase._add_tool(self,tool)
matplotlib.backend_tools.SetCursorBase._add_tool_cbk(self,event)
matplotlib.backend_tools.SetCursorBase._set_cursor_cbk(self,event)
matplotlib.backend_tools.SetCursorBase._tool_trigger_cbk(self,event)
matplotlib.backend_tools.SetCursorBase.set_cursor(self,cursor)
matplotlib.backend_tools.SetCursorBase.set_figure(self,figure)
matplotlib.backend_tools.ToolBack(ViewsPositionsBase)
matplotlib.backend_tools.ToolBase(self,toolmanager,name)
matplotlib.backend_tools.ToolBase.__init__(self,toolmanager,name)
matplotlib.backend_tools.ToolBase.canvas(self)
matplotlib.backend_tools.ToolBase.destroy(self)
matplotlib.backend_tools.ToolBase.figure(self)
matplotlib.backend_tools.ToolBase.figure(self,figure)
matplotlib.backend_tools.ToolBase.name(self)
matplotlib.backend_tools.ToolBase.set_figure(self,figure)
matplotlib.backend_tools.ToolBase.toolmanager(self)
matplotlib.backend_tools.ToolBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolCursorPosition(self,*args,**kwargs)
matplotlib.backend_tools.ToolCursorPosition.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolCursorPosition.send_message(self,event)
matplotlib.backend_tools.ToolCursorPosition.set_figure(self,figure)
matplotlib.backend_tools.ToolEnableAllNavigation(ToolBase)
matplotlib.backend_tools.ToolEnableAllNavigation.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolEnableNavigation(ToolBase)
matplotlib.backend_tools.ToolEnableNavigation.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolForward(ViewsPositionsBase)
matplotlib.backend_tools.ToolFullScreen(ToolToggleBase)
matplotlib.backend_tools.ToolFullScreen.disable(self,event)
matplotlib.backend_tools.ToolFullScreen.enable(self,event)
matplotlib.backend_tools.ToolGrid(_ToolGridBase)
matplotlib.backend_tools.ToolGrid._get_next_grid_states(self,ax)
matplotlib.backend_tools.ToolHome(ViewsPositionsBase)
matplotlib.backend_tools.ToolMinorGrid(_ToolGridBase)
matplotlib.backend_tools.ToolMinorGrid._get_next_grid_states(self,ax)
matplotlib.backend_tools.ToolPan(self,*args)
matplotlib.backend_tools.ToolPan.__init__(self,*args)
matplotlib.backend_tools.ToolPan._cancel_action(self)
matplotlib.backend_tools.ToolPan._mouse_move(self,event)
matplotlib.backend_tools.ToolPan._press(self,event)
matplotlib.backend_tools.ToolPan._release(self,event)
matplotlib.backend_tools.ToolQuit(ToolBase)
matplotlib.backend_tools.ToolQuit.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolQuitAll(ToolBase)
matplotlib.backend_tools.ToolQuitAll.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolToggleBase(self,*args,**kwargs)
matplotlib.backend_tools.ToolToggleBase.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolToggleBase.disable(self,event=None)
matplotlib.backend_tools.ToolToggleBase.enable(self,event=None)
matplotlib.backend_tools.ToolToggleBase.set_figure(self,figure)
matplotlib.backend_tools.ToolToggleBase.toggled(self)
matplotlib.backend_tools.ToolToggleBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ToolViewsPositions(self,*args,**kwargs)
matplotlib.backend_tools.ToolViewsPositions.__init__(self,*args,**kwargs)
matplotlib.backend_tools.ToolViewsPositions._axes_pos(self,ax)
matplotlib.backend_tools.ToolViewsPositions.add_figure(self,figure)
matplotlib.backend_tools.ToolViewsPositions.back(self)
matplotlib.backend_tools.ToolViewsPositions.clear(self,figure)
matplotlib.backend_tools.ToolViewsPositions.forward(self)
matplotlib.backend_tools.ToolViewsPositions.home(self)
matplotlib.backend_tools.ToolViewsPositions.push_current(self,figure=None)
matplotlib.backend_tools.ToolViewsPositions.refresh_locators(self)
matplotlib.backend_tools.ToolViewsPositions.update_home_views(self,figure=None)
matplotlib.backend_tools.ToolViewsPositions.update_view(self)
matplotlib.backend_tools.ToolXScale(AxisScaleBase)
matplotlib.backend_tools.ToolXScale.set_scale(self,ax,scale)
matplotlib.backend_tools.ToolYScale(AxisScaleBase)
matplotlib.backend_tools.ToolYScale.set_scale(self,ax,scale)
matplotlib.backend_tools.ToolZoom(self,*args)
matplotlib.backend_tools.ToolZoom.__init__(self,*args)
matplotlib.backend_tools.ToolZoom._cancel_action(self)
matplotlib.backend_tools.ToolZoom._mouse_move(self,event)
matplotlib.backend_tools.ToolZoom._press(self,event)
matplotlib.backend_tools.ToolZoom._release(self,event)
matplotlib.backend_tools.ToolZoom._switch_off_zoom_mode(self,event)
matplotlib.backend_tools.ToolZoom._switch_on_zoom_mode(self,event)
matplotlib.backend_tools.ViewsPositionsBase(ToolBase)
matplotlib.backend_tools.ViewsPositionsBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.ZoomPanBase(self,*args)
matplotlib.backend_tools.ZoomPanBase.__init__(self,*args)
matplotlib.backend_tools.ZoomPanBase.disable(self,event)
matplotlib.backend_tools.ZoomPanBase.enable(self,event)
matplotlib.backend_tools.ZoomPanBase.scroll_zoom(self,event)
matplotlib.backend_tools.ZoomPanBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools._ToolGridBase(ToolBase)
matplotlib.backend_tools._ToolGridBase._get_uniform_grid_state(ticks)
matplotlib.backend_tools._ToolGridBase.trigger(self,sender,event,data=None)
matplotlib.backend_tools.add_tools_to_container(container,tools=default_toolbar_tools)
matplotlib.backend_tools.add_tools_to_manager(toolmanager,tools=default_tools)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/gridspec.py----------------------------------------
A:matplotlib.gridspec._log->logging.getLogger(__name__)
A:matplotlib.gridspec.(nrows, ncols)->self.get_gridspec().get_geometry()
A:matplotlib.gridspec.subplot_params->self.get_subplot_params(fig)
A:matplotlib.gridspec.cell_hs->numpy.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
A:matplotlib.gridspec.cell_ws->numpy.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
A:matplotlib.gridspec.(start, stop, _)->key.indices(size)
A:matplotlib.gridspec.(num1, num2)->_normalize(key, nrows * ncols)
A:matplotlib.gridspec.self._layoutbox->matplotlib._layoutbox.LayoutBox(parent=glb, name=glb.name + '.ss' + layoutbox.seq_id(), artist=self)
A:matplotlib.gridspec.ss->ax.get_subplotspec().get_topmost_subplotspec()
A:matplotlib.gridspec.subplotpars->copy.copy(figure.subplotpars)
A:matplotlib.gridspec.subplotspec_list->matplotlib.tight_layout.get_subplotspec_list(figure.axes, grid_spec=self)
A:matplotlib.gridspec.renderer->matplotlib.tight_layout.get_renderer(figure)
A:matplotlib.gridspec.kwargs->matplotlib.tight_layout.get_tight_layout_figure(figure, figure.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
A:matplotlib.gridspec.figbox->matplotlib.transforms.Bbox.from_extents(fig_left, fig_bottom, fig_right, fig_top)
A:matplotlib.gridspec.(rows, cols)->numpy.unravel_index([self.num1] if self.num2 is None else [self.num1, self.num2], (nrows, ncols))
A:matplotlib.gridspec.gridspec->self.get_gridspec()
A:matplotlib.gridspec.(row_start, col_start)->divmod(self.num1, ncols)
A:matplotlib.gridspec.(row_stop, col_stop)->divmod(self.num2, ncols)
A:matplotlib.gridspec.(fig_bottoms, fig_tops, fig_lefts, fig_rights)->self.get_gridspec().get_grid_positions(figure)
A:matplotlib.gridspec.fig_bottom->fig_bottoms[rows].min()
A:matplotlib.gridspec.fig_top->fig_tops[rows].max()
A:matplotlib.gridspec.fig_left->fig_lefts[cols].min()
A:matplotlib.gridspec.fig_right->fig_rights[cols].max()
matplotlib.gridspec.GridSpec(self,nrows,ncols,figure=None,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None,width_ratios=None,height_ratios=None)
matplotlib.gridspec.GridSpec.__getstate__(self)
matplotlib.gridspec.GridSpec.__init__(self,nrows,ncols,figure=None,left=None,bottom=None,right=None,top=None,wspace=None,hspace=None,width_ratios=None,height_ratios=None)
matplotlib.gridspec.GridSpec.__setstate__(self,state)
matplotlib.gridspec.GridSpec.get_subplot_params(self,figure=None,fig=None)
matplotlib.gridspec.GridSpec.locally_modified_subplot_params(self)
matplotlib.gridspec.GridSpec.tight_layout(self,figure,renderer=None,pad=1.08,h_pad=None,w_pad=None,rect=None)
matplotlib.gridspec.GridSpec.update(self,**kwargs)
matplotlib.gridspec.GridSpecBase(self,nrows,ncols,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecBase.__getitem__(self,key)
matplotlib.gridspec.GridSpecBase.__init__(self,nrows,ncols,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecBase.get_geometry(self)
matplotlib.gridspec.GridSpecBase.get_grid_positions(self,fig,raw=False)
matplotlib.gridspec.GridSpecBase.get_height_ratios(self)
matplotlib.gridspec.GridSpecBase.get_subplot_params(self,figure=None,fig=None)
matplotlib.gridspec.GridSpecBase.get_width_ratios(self)
matplotlib.gridspec.GridSpecBase.new_subplotspec(self,loc,rowspan=1,colspan=1)
matplotlib.gridspec.GridSpecBase.set_height_ratios(self,height_ratios)
matplotlib.gridspec.GridSpecBase.set_width_ratios(self,width_ratios)
matplotlib.gridspec.GridSpecFromSubplotSpec(self,nrows,ncols,subplot_spec,wspace=None,hspace=None,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.__init__(self,nrows,ncols,subplot_spec,wspace=None,hspace=None,height_ratios=None,width_ratios=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.get_subplot_params(self,figure=None,fig=None)
matplotlib.gridspec.GridSpecFromSubplotSpec.get_topmost_subplotspec(self)
matplotlib.gridspec.SubplotSpec(self,gridspec,num1,num2=None)
matplotlib.gridspec.SubplotSpec.__eq__(self,other)
matplotlib.gridspec.SubplotSpec.__getstate__(self)
matplotlib.gridspec.SubplotSpec.__hash__(self)
matplotlib.gridspec.SubplotSpec.__init__(self,gridspec,num1,num2=None)
matplotlib.gridspec.SubplotSpec.__setstate__(self,state)
matplotlib.gridspec.SubplotSpec.get_geometry(self)
matplotlib.gridspec.SubplotSpec.get_gridspec(self)
matplotlib.gridspec.SubplotSpec.get_position(self,figure,return_all=False)
matplotlib.gridspec.SubplotSpec.get_rows_columns(self)
matplotlib.gridspec.SubplotSpec.get_topmost_subplotspec(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/dates.py----------------------------------------
A:matplotlib.dates._log->logging.getLogger(__name__)
A:matplotlib.dates.UTC->_UTC()
A:matplotlib.dates.EPOCH_OFFSET->float(datetime.datetime(1970, 1, 1).toordinal())
A:matplotlib.dates.tzi->getattr(dt, 'tzinfo', None)
A:matplotlib.dates.dt->f(*args, **kwargs)
A:matplotlib.dates.base->float(dt.toordinal())
A:matplotlib.dates.cdate->getattr(dt, 'date', lambda : None)()
A:matplotlib.dates.midnight_time->datetime.time(0, tzinfo=tzi)
A:matplotlib.dates.rdt->datetime.datetime.combine(cdate, midnight_time)
A:matplotlib.dates._to_ordinalf_np_vectorized->numpy.vectorize(_to_ordinalf)
A:matplotlib.dates.extra->extra.astype('timedelta64[ns]').astype('timedelta64[ns]')
A:matplotlib.dates.t0->numpy.datetime64('0001-01-01T00:00:00').astype('datetime64[s]')
A:matplotlib.dates.NaT_int->numpy.datetime64('NaT').astype(np.int64)
A:matplotlib.dates.d_int->numpy.asarray(d).astype(np.int64)
A:matplotlib.dates.tz->_get_rc_timezone()
A:matplotlib.dates.(ix, remainder)->divmod(x, 1)
A:matplotlib.dates.ix->int(ix)
A:matplotlib.dates.remainder_musec->int(round(remainder * MUSECONDS_PER_DAY))
A:matplotlib.dates._from_ordinalf_np_vectorized->numpy.vectorize(_from_ordinalf)
A:matplotlib.dates.s->b.decode(self.encoding)
A:matplotlib.dates._dateutil_parser_parse_np_vectorized->numpy.vectorize(dateutil.parser.parse)
A:matplotlib.dates.d->numpy.asarray(d)
A:matplotlib.dates.j->time.strftime(fmt, (year1,) + timetuple[1:]).find(sub1, i)
A:matplotlib.dates.n->numpy.asarray(n)
A:matplotlib.dates.x->matplotlib.cbook.safe_first_element(x)
A:matplotlib.dates._ordinalf_to_timedelta_np_vectorized->numpy.vectorize(_ordinalf_to_timedelta)
A:matplotlib.dates.f1->date2num(dstart)
A:matplotlib.dates.f2->date2num(dinterval_end)
A:matplotlib.dates.num->int(np.ceil((f2 - f1) / step))
A:matplotlib.dates.illegal_s->re.compile('((^|[^%])(%%)*%s)')
A:matplotlib.dates.fmt->next((fmt for (scale, fmt) in sorted(self.scaled.items()) if scale >= locator_unit_scale), self.defaultfmt)
A:matplotlib.dates.timetuple->f(*args, **kwargs).timetuple()
A:matplotlib.dates.s1->time.strftime(fmt, (year1,) + timetuple[1:])
A:matplotlib.dates.s2->time.strftime(fmt, (year2,) + timetuple[1:])
A:matplotlib.dates.(s1, s2)->self._replace_common_substr(s1, s2, '{0:02d}'.format(year1 % 100), '{0:02d}'.format(year2 % 100), '{0:02d}'.format(dt.year % 100))
A:matplotlib.dates.ind->int(np.round(x))
A:matplotlib.dates.self._formatter->DateFormatter(fmt, self._tz)
A:matplotlib.dates.locator_unit_scale->float(self._locator._get_unit())
A:matplotlib.dates.result->fmt(x, pos)
A:matplotlib.dates.dtstart->dtstart.astimezone(tzinfo).astimezone(tzinfo)
A:matplotlib.dates.kwargs['dtstart']->dtstart.astimezone(tzinfo).astimezone(tzinfo).replace(tzinfo=None)
A:matplotlib.dates.until->until.astimezone(tzinfo).astimezone(tzinfo)
A:matplotlib.dates.kwargs['until']->until.astimezone(tzinfo).astimezone(tzinfo).replace(tzinfo=None)
A:matplotlib.dates.self._construct->kwargs.copy()
A:matplotlib.dates.self._rrule->rrule(**self._construct)
A:matplotlib.dates.arg->arg.astimezone(self._tzinfo).astimezone(self._tzinfo)
A:matplotlib.dates.args->tuple((normalize_arg(arg) for arg in args))
A:matplotlib.dates.(args, kwargs)->normalize_args(args, kwargs)
A:matplotlib.dates.dts->f(*args, **kwargs)
A:matplotlib.dates.f->getattr(self._rrule, name)
A:matplotlib.dates.(dmin, dmax)->self.viewlim_to_dt()
A:matplotlib.dates.(vmin, vmax)->self.axis.get_view_interval()
A:matplotlib.dates.unit->self._get_unit()
A:matplotlib.dates.interval->self._get_interval()
A:matplotlib.dates.delta->abs((o2 - o1) * MUSECONDS_PER_DAY)
A:matplotlib.dates.start->_from_ordinalf(1.0)
A:matplotlib.dates.stop->_from_ordinalf(3652059.9999999)
A:matplotlib.dates.dates->self.rule.between(vmin, vmax, True)
A:matplotlib.dates.vmin->date2num(vmin)
A:matplotlib.dates.vmax->date2num(vmax)
A:matplotlib.dates.self._locator->self.get_locator(dmin, dmax)
A:matplotlib.dates.self.maxticks->dict.fromkeys(self._freqs, maxticks)
A:matplotlib.dates.numYears->float(delta.years)
A:matplotlib.dates.numSeconds->numpy.floor(tdelta.total_seconds())
A:matplotlib.dates.numMicroseconds->numpy.floor(tdelta.total_seconds() * 1000000.0)
A:matplotlib.dates.locator->MinuteLocator(tz=tz)
A:matplotlib.dates.rrule->rrulewrapper(self._freq, interval=interval, dtstart=dmin, until=dmax, bymonth=bymonth, bymonthday=bymonthday, byhour=byhour, byminute=byminute, bysecond=bysecond)
A:matplotlib.dates.self.base->matplotlib.ticker.Base(base)
A:matplotlib.dates.ymin->self.base.le(dmin.year)
A:matplotlib.dates.ymax->self.base.ge(dmax.year)
A:matplotlib.dates.bymonth->range(1, 13)
A:matplotlib.dates.rule->rrulewrapper(SECONDLY, bysecond=bysecond, interval=interval)
A:matplotlib.dates.bymonthday->range(1, 32)
A:matplotlib.dates.byhour->range(24)
A:matplotlib.dates.byminute->range(60)
A:matplotlib.dates.bysecond->range(60)
A:matplotlib.dates.self._wrapped_locator->matplotlib.ticker.MultipleLocator(interval)
A:matplotlib.dates.(nmin, nmax)->date2num((vmin, vmax))
A:matplotlib.dates.ticks->self._wrapped_locator.tick_values(nmin, nmax)
A:matplotlib.dates.mus->abs(delta.total_seconds() * 1000000.0)
A:matplotlib.dates.ret->epoch2num([m.ticks() for m in mxdates])
A:matplotlib.dates.formatter->DateFormatter(fmt, tz=tz)
A:matplotlib.dates.majloc->AutoDateLocator(tz=tz)
A:matplotlib.dates.majfmt->AutoDateFormatter(majloc, tz=tz)
A:matplotlib.dates.datemin->datetime.date(2000, 1, 1)
A:matplotlib.dates.datemax->datetime.date(2010, 1, 1)
A:matplotlib.dates.units.registry[np.datetime64]->DateConverter()
A:matplotlib.dates.units.registry[datetime.date]->DateConverter()
A:matplotlib.dates.units.registry[datetime.datetime]->DateConverter()
matplotlib.dates.AutoDateFormatter(self,locator,tz=None,defaultfmt='%Y-%m-%d')
matplotlib.dates.AutoDateFormatter.__init__(self,locator,tz=None,defaultfmt='%Y-%m-%d')
matplotlib.dates.AutoDateLocator(self,tz=None,minticks=5,maxticks=None,interval_multiples=False)
matplotlib.dates.AutoDateLocator.__init__(self,tz=None,minticks=5,maxticks=None,interval_multiples=False)
matplotlib.dates.AutoDateLocator._get_unit(self)
matplotlib.dates.AutoDateLocator.autoscale(self)
matplotlib.dates.AutoDateLocator.get_locator(self,dmin,dmax)
matplotlib.dates.AutoDateLocator.nonsingular(self,vmin,vmax)
matplotlib.dates.AutoDateLocator.refresh(self)
matplotlib.dates.AutoDateLocator.set_axis(self,axis)
matplotlib.dates.AutoDateLocator.tick_values(self,vmin,vmax)
matplotlib.dates.DateConverter(units.ConversionInterface)
matplotlib.dates.DateConverter.axisinfo(unit,axis)
matplotlib.dates.DateConverter.convert(value,unit,axis)
matplotlib.dates.DateConverter.default_units(x,axis)
matplotlib.dates.DateFormatter(self,fmt,tz=None)
matplotlib.dates.DateFormatter.__init__(self,fmt,tz=None)
matplotlib.dates.DateFormatter._replace_common_substr(self,s1,s2,sub1,sub2,replacement)
matplotlib.dates.DateFormatter.set_tzinfo(self,tz)
matplotlib.dates.DateFormatter.strftime(self,dt,fmt=None)
matplotlib.dates.DateFormatter.strftime_pre_1900(self,dt,fmt=None)
matplotlib.dates.DateLocator(self,tz=None)
matplotlib.dates.DateLocator.__init__(self,tz=None)
matplotlib.dates.DateLocator._get_interval(self)
matplotlib.dates.DateLocator._get_unit(self)
matplotlib.dates.DateLocator.datalim_to_dt(self)
matplotlib.dates.DateLocator.nonsingular(self,vmin,vmax)
matplotlib.dates.DateLocator.set_tzinfo(self,tz)
matplotlib.dates.DateLocator.viewlim_to_dt(self)
matplotlib.dates.DayLocator(self,bymonthday=None,interval=1,tz=None)
matplotlib.dates.DayLocator.__init__(self,bymonthday=None,interval=1,tz=None)
matplotlib.dates.HourLocator(self,byhour=None,interval=1,tz=None)
matplotlib.dates.HourLocator.__init__(self,byhour=None,interval=1,tz=None)
matplotlib.dates.IndexDateFormatter(self,t,fmt,tz=None)
matplotlib.dates.IndexDateFormatter.__init__(self,t,fmt,tz=None)
matplotlib.dates.MicrosecondLocator(self,interval=1,tz=None)
matplotlib.dates.MicrosecondLocator.__init__(self,interval=1,tz=None)
matplotlib.dates.MicrosecondLocator._get_interval(self)
matplotlib.dates.MicrosecondLocator._get_unit(self)
matplotlib.dates.MicrosecondLocator.set_axis(self,axis)
matplotlib.dates.MicrosecondLocator.set_data_interval(self,vmin,vmax)
matplotlib.dates.MicrosecondLocator.set_view_interval(self,vmin,vmax)
matplotlib.dates.MicrosecondLocator.tick_values(self,vmin,vmax)
matplotlib.dates.MinuteLocator(self,byminute=None,interval=1,tz=None)
matplotlib.dates.MinuteLocator.__init__(self,byminute=None,interval=1,tz=None)
matplotlib.dates.MonthLocator(self,bymonth=None,bymonthday=1,interval=1,tz=None)
matplotlib.dates.MonthLocator.__init__(self,bymonth=None,bymonthday=1,interval=1,tz=None)
matplotlib.dates.RRuleLocator(self,o,tz=None)
matplotlib.dates.RRuleLocator.__init__(self,o,tz=None)
matplotlib.dates.RRuleLocator._get_interval(self)
matplotlib.dates.RRuleLocator._get_unit(self)
matplotlib.dates.RRuleLocator.autoscale(self)
matplotlib.dates.RRuleLocator.get_unit_generic(freq)
matplotlib.dates.RRuleLocator.tick_values(self,vmin,vmax)
matplotlib.dates.SecondLocator(self,bysecond=None,interval=1,tz=None)
matplotlib.dates.SecondLocator.__init__(self,bysecond=None,interval=1,tz=None)
matplotlib.dates.WeekdayLocator(self,byweekday=1,interval=1,tz=None)
matplotlib.dates.WeekdayLocator.__init__(self,byweekday=1,interval=1,tz=None)
matplotlib.dates.YearLocator(self,base=1,month=1,day=1,tz=None)
matplotlib.dates.YearLocator.__init__(self,base=1,month=1,day=1,tz=None)
matplotlib.dates.YearLocator.autoscale(self)
matplotlib.dates.YearLocator.tick_values(self,vmin,vmax)
matplotlib.dates._UTC(datetime.tzinfo)
matplotlib.dates._UTC.dst(self,dt)
matplotlib.dates._UTC.tzname(self,dt)
matplotlib.dates._UTC.utcoffset(self,dt)
matplotlib.dates._close_to_dt(d1,d2,epsilon=5)
matplotlib.dates._close_to_num(o1,o2,epsilon=5)
matplotlib.dates._dt64_to_ordinalf(d)
matplotlib.dates._from_ordinalf(x,tz=None)
matplotlib.dates._get_rc_timezone()
matplotlib.dates._ordinalf_to_timedelta(x)
matplotlib.dates._to_ordinalf(dt)
matplotlib.dates.bytespdate2num(self,fmt,encoding='utf-8')
matplotlib.dates.bytespdate2num.__init__(self,fmt,encoding='utf-8')
matplotlib.dates.date2num(d)
matplotlib.dates.date_ticker_factory(span,tz=None,numticks=5)
matplotlib.dates.datestr2num(d,default=None)
matplotlib.dates.drange(dstart,dend,delta)
matplotlib.dates.epoch2num(e)
matplotlib.dates.hours(h)
matplotlib.dates.julian2num(j)
matplotlib.dates.minutes(m)
matplotlib.dates.mx2num(mxdates)
matplotlib.dates.num2date(x,tz=None)
matplotlib.dates.num2epoch(d)
matplotlib.dates.num2julian(n)
matplotlib.dates.num2timedelta(x)
matplotlib.dates.rrulewrapper(self,freq,tzinfo=None,**kwargs)
matplotlib.dates.rrulewrapper.__getattr__(self,name)
matplotlib.dates.rrulewrapper.__init__(self,freq,tzinfo=None,**kwargs)
matplotlib.dates.rrulewrapper.__setstate__(self,state)
matplotlib.dates.rrulewrapper._attach_tzinfo(self,dt,tzinfo)
matplotlib.dates.rrulewrapper._aware_return_wrapper(self,f,returns_list=False)
matplotlib.dates.rrulewrapper._update_rrule(self,**kwargs)
matplotlib.dates.rrulewrapper.set(self,**kwargs)
matplotlib.dates.seconds(s)
matplotlib.dates.strpdate2num(self,fmt)
matplotlib.dates.strpdate2num.__init__(self,fmt)
matplotlib.dates.weeks(w)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/texmanager.py----------------------------------------
A:matplotlib.texmanager._log->logging.getLogger(__name__)
A:matplotlib.texmanager.p->Popen([str('dvipng'), '-version'], stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=sys.platform != 'win32')
A:matplotlib.texmanager.(stdout, stderr)->Popen([str('dvipng'), '-version'], stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=sys.platform != 'win32').communicate()
A:matplotlib.texmanager.lines->stdout.decode(sys.getdefaultencoding()).split('\n')
A:matplotlib.texmanager.version->distutils.version.LooseVersion(version)
A:matplotlib.texmanager.cachedir->matplotlib.get_cachedir()
A:matplotlib.texmanager.texcache->os.path.join(cachedir, 'tex.cache')
A:matplotlib.texmanager.postscriptd->property(mpl.cbook.deprecated('2.2')(lambda self: {}))
A:matplotlib.texmanager.pscnt->property(mpl.cbook.deprecated('2.2')(lambda self: 0))
A:matplotlib.texmanager.self.font_family->ff.lower()
A:matplotlib.texmanager.font_family_attr->font_family.replace('-', '_')
A:matplotlib.texmanager.preamble_bytes->self.get_custom_preamble().encode('utf-8')
A:matplotlib.texmanager.self._fontconfig->''.join(fontconfig)
A:matplotlib.texmanager.self._font_preamble->'\n'.join(['\\usepackage{type1cm}'] + cmd + ['\\usepackage{textcomp}'])
A:matplotlib.texmanager.s->''.join([tex, self.get_font_config(), '%f' % fontsize, self.get_custom_preamble(), str(dpi or '')])
A:matplotlib.texmanager.self._rc_cache->dict.fromkeys(self._rc_cache_keys)
A:matplotlib.texmanager.self._rc_cache[k]->copy.deepcopy(rcParams[k])
A:matplotlib.texmanager.basefile->self.get_basefile(tex, fontsize)
A:matplotlib.texmanager.custom_preamble->self.get_custom_preamble()
A:matplotlib.texmanager.fontcmd->{'sans-serif': '{\\sffamily %s}', 'monospace': '{\\ttfamily %s}'}.get(self.font_family, '{\\rmfamily %s}')
A:matplotlib.texmanager._re_vbox->re.compile('MatplotlibBox:\\(([\\d.]+)pt\\+([\\d.]+)pt\\)x([\\d.]+)pt')
A:matplotlib.texmanager.report->self._run_checked_subprocess(['latex', '-interaction=nonstopmode', '--halt-on-error', texfile], tex)
A:matplotlib.texmanager.texfile->self.make_tex_preview(tex, fontsize)
A:matplotlib.texmanager.m->TexManager._re_vbox.search(report.decode('utf-8'))
A:matplotlib.texmanager.dvifile->self.make_dvi(tex, fontsize)
A:matplotlib.texmanager.psfile->self.make_ps(tex, fontsize)
A:matplotlib.texmanager.alpha->self.get_grey(tex, fontsize, dpi)
A:matplotlib.texmanager.pngfile->self.make_png(tex, fontsize, dpi)
A:matplotlib.texmanager.X->read_png(os.path.join(self.texcache, pngfile))
A:matplotlib.texmanager.Z->numpy.dstack([r, g, b, alpha])
A:matplotlib.texmanager.l->fh.read().split()
A:matplotlib.texmanager.page->next(iter(dvi))
matplotlib.texmanager.TexManager(self)
matplotlib.texmanager.TexManager.__init__(self)
matplotlib.texmanager.TexManager._run_checked_subprocess(self,command,tex)
matplotlib.texmanager.TexManager.get_basefile(self,tex,fontsize,dpi=None)
matplotlib.texmanager.TexManager.get_custom_preamble(self)
matplotlib.texmanager.TexManager.get_font_config(self)
matplotlib.texmanager.TexManager.get_font_preamble(self)
matplotlib.texmanager.TexManager.get_grey(self,tex,fontsize=None,dpi=None)
matplotlib.texmanager.TexManager.get_ps_bbox(self,tex,fontsize)
matplotlib.texmanager.TexManager.get_rgba(self,tex,fontsize=None,dpi=None,rgb=(0,0,0))
matplotlib.texmanager.TexManager.get_text_width_height_descent(self,tex,fontsize,renderer=None)
matplotlib.texmanager.TexManager.make_dvi(self,tex,fontsize)
matplotlib.texmanager.TexManager.make_dvi_preview(self,tex,fontsize)
matplotlib.texmanager.TexManager.make_png(self,tex,fontsize,dpi)
matplotlib.texmanager.TexManager.make_ps(self,tex,fontsize)
matplotlib.texmanager.TexManager.make_tex(self,tex,fontsize)
matplotlib.texmanager.TexManager.make_tex_preview(self,tex,fontsize)
matplotlib.texmanager.dvipng_hack_alpha()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/path.py----------------------------------------
A:matplotlib.path.vertices->numpy.empty((length, 2), float)
A:matplotlib.path.codes->numpy.empty((ns2 + 1,))
A:matplotlib.path.pth->cls.__new__(cls)
A:matplotlib.path.pth._vertices->_to_unmasked_float_array(verts)
A:matplotlib.path.pth._readonly->internals.pop('readonly', False)
A:matplotlib.path.pth.should_simplify->internals.pop('should_simplify', True)
A:matplotlib.path.pth.simplify_threshold->internals.pop('simplify_threshold', rcParams['path.simplify_threshold'])
A:matplotlib.path.pth._has_nonfinite->internals.pop('has_nonfinite', False)
A:matplotlib.path.pth._interpolation_steps->internals.pop('interpolation_steps', 1)
A:matplotlib.path.verts->_path.clip_path_to_rect(self, bbox, inside)
A:matplotlib.path.total_length->sum(lengths)
A:matplotlib.path.cleaned->transform.transform_path(self).cleaned(transform=transform, remove_nans=remove_nans, clip=clip, snap=snap, stroke_width=stroke_width, simplify=simplify, curves=curves, sketch=sketch)
A:matplotlib.path.curr_vertices->vertices[i:i + num_vertices].flatten()
A:matplotlib.path.(vertices, codes)->_path.cleanup_path(self, transform, remove_nans, clip, snap, stroke_width, simplify, curves, sketch)
A:matplotlib.path.transform->transform.frozen().frozen()
A:matplotlib.path.self->transform.frozen().frozen().transform_path(self)
A:matplotlib.path.result->_path.points_in_path(points, radius, self, transform)
A:matplotlib.path.path->cls(verts, codes, readonly=True)
A:matplotlib.path.cls._unit_rectangle->cls([[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0], [0.0, 0.0]], [cls.MOVETO, cls.LINETO, cls.LINETO, cls.LINETO, cls.CLOSEPOLY], readonly=True)
A:matplotlib.path._unit_regular_polygons->WeakValueDictionary()
A:matplotlib.path._unit_regular_stars->WeakValueDictionary()
A:matplotlib.path.r->numpy.ones(ns2 + 1)
A:matplotlib.path.cls._unit_circle->cls.circle(center=(0, 0), radius=1, readonly=True)
A:matplotlib.path.SQRTHALF->numpy.sqrt(0.5)
A:matplotlib.path.cls._unit_circle_righthalf->cls(vertices, codes, readonly=True)
A:matplotlib.path.(eta1, eta2)->numpy.deg2rad([eta1, eta2])
A:matplotlib.path.n->int(2 ** np.ceil((eta2 - eta1) / halfpi))
A:matplotlib.path.t->numpy.tan(0.5 * deta)
A:matplotlib.path.steps->numpy.linspace(eta1, eta2, n + 1, True)
A:matplotlib.path.cos_eta->numpy.cos(steps)
A:matplotlib.path.sin_eta->numpy.sin(steps)
A:matplotlib.path._hatch_dict->maxdict(8)
A:matplotlib.path.hatch_path->get_path(hatchpattern, density)
matplotlib.path.Path(self,vertices,codes=None,_interpolation_steps=1,closed=False,readonly=False)
matplotlib.path.Path.__copy__(self)
matplotlib.path.Path.__deepcopy__(self,memo=None)
matplotlib.path.Path.__init__(self,vertices,codes=None,_interpolation_steps=1,closed=False,readonly=False)
matplotlib.path.Path.__len__(self)
matplotlib.path.Path.__repr__(self)
matplotlib.path.Path._fast_from_codes_and_verts(cls,verts,codes,internals=None)
matplotlib.path.Path._update_values(self)
matplotlib.path.Path.arc(cls,theta1,theta2,n=None,is_wedge=False)
matplotlib.path.Path.circle(cls,center=(0.0,0.0),radius=1.0,readonly=False)
matplotlib.path.Path.cleaned(self,transform=None,remove_nans=False,clip=None,quantize=False,simplify=False,curves=False,stroke_width=1.0,snap=False,sketch=None)
matplotlib.path.Path.clip_to_bbox(self,bbox,inside=True)
matplotlib.path.Path.codes(self)
matplotlib.path.Path.codes(self,codes)
matplotlib.path.Path.contains_path(self,path,transform=None)
matplotlib.path.Path.contains_point(self,point,transform=None,radius=0.0)
matplotlib.path.Path.contains_points(self,points,transform=None,radius=0.0)
matplotlib.path.Path.get_extents(self,transform=None)
matplotlib.path.Path.has_nonfinite(self)
matplotlib.path.Path.hatch(cls,hatchpattern,density=6)
matplotlib.path.Path.interpolated(self,steps)
matplotlib.path.Path.intersects_bbox(self,bbox,filled=True)
matplotlib.path.Path.intersects_path(self,other,filled=True)
matplotlib.path.Path.iter_segments(self,transform=None,remove_nans=True,clip=None,snap=False,stroke_width=1.0,simplify=None,curves=True,sketch=None)
matplotlib.path.Path.make_compound_path(cls,*args)
matplotlib.path.Path.make_compound_path_from_polys(cls,XY)
matplotlib.path.Path.readonly(self)
matplotlib.path.Path.should_simplify(self)
matplotlib.path.Path.should_simplify(self,should_simplify)
matplotlib.path.Path.simplify_threshold(self)
matplotlib.path.Path.simplify_threshold(self,threshold)
matplotlib.path.Path.to_polygons(self,transform=None,width=0,height=0,closed_only=True)
matplotlib.path.Path.transformed(self,transform)
matplotlib.path.Path.unit_circle(cls)
matplotlib.path.Path.unit_circle_righthalf(cls)
matplotlib.path.Path.unit_rectangle(cls)
matplotlib.path.Path.unit_regular_asterisk(cls,numVertices)
matplotlib.path.Path.unit_regular_polygon(cls,numVertices)
matplotlib.path.Path.unit_regular_star(cls,numVertices,innerCircle=0.5)
matplotlib.path.Path.vertices(self)
matplotlib.path.Path.vertices(self,vertices)
matplotlib.path.Path.wedge(cls,theta1,theta2,n=None)
matplotlib.path.get_path_collection_extents(master_transform,paths,transforms,offsets,offset_transform)
matplotlib.path.get_paths_extents(paths,transforms=[])


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_webagg.py----------------------------------------
A:matplotlib.backends.backend_webagg.webagg_server_thread->ServerThread()
A:matplotlib.backends.backend_webagg.image_path->os.path.join(os.path.dirname(os.path.dirname(__file__)), 'mpl-data', 'images')
A:matplotlib.backends.backend_webagg.self.url_prefix->kwargs.pop('url_prefix', '')
A:matplotlib.backends.backend_webagg.fignum->int(fignum)
A:matplotlib.backends.backend_webagg.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(self.fignum)
A:matplotlib.backends.backend_webagg.ws_uri->'ws://{req.host}{prefix}/'.format(req=self.request, prefix=self.url_prefix)
A:matplotlib.backends.backend_webagg.js_content->core.FigureManagerWebAgg.get_javascript()
A:matplotlib.backends.backend_webagg.buff->six.BytesIO()
A:matplotlib.backends.backend_webagg.self.fignum->int(fignum)
A:matplotlib.backends.backend_webagg.self.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(self.fignum)
A:matplotlib.backends.backend_webagg.message->json.loads(message)
A:matplotlib.backends.backend_webagg.data_uri->'data:image/png;base64,{0}'.format(blob.encode('base64').replace('\n', ''))
A:matplotlib.backends.backend_webagg.app->cls(url_prefix=url_prefix)
A:matplotlib.backends.backend_webagg.ioloop->tornado.ioloop.IOLoop.instance()
A:matplotlib.backends.backend_webagg.old_handler->signal.signal(signal.SIGINT, lambda sig, frame: ioloop.add_callback_from_signal(shutdown))
A:matplotlib.backends.backend_webagg.tpl->fd.read()
A:matplotlib.backends.backend_webagg.t->tornado.template.Template(tpl)
A:matplotlib.backends.backend_webagg.url->'http://127.0.0.1:{port}{prefix}'.format(port=WebAggApplication.port, prefix=WebAggApplication.url_prefix)
matplotlib.backends.backend_webagg.FigureCanvasWebAgg(core.FigureCanvasWebAggCore)
matplotlib.backends.backend_webagg.FigureCanvasWebAgg.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_webagg.FigureCanvasWebAgg.show(self)
matplotlib.backends.backend_webagg.ServerThread(threading.Thread)
matplotlib.backends.backend_webagg.ServerThread.run(self)
matplotlib.backends.backend_webagg.WebAggApplication(self,url_prefix='')
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage(self,application,request,**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage.__init__(self,application,request,**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.Download(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.Download.get(self,fignum,fmt)
matplotlib.backends.backend_webagg.WebAggApplication.FavIcon(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.FavIcon.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.MplJs(tornado.web.RequestHandler)
matplotlib.backends.backend_webagg.WebAggApplication.MplJs.get(self)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage(self,application,request,**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage.__init__(self,application,request,**kwargs)
matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage.get(self,fignum)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket(tornado.websocket.WebSocketHandler)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.on_close(self)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.on_message(self,message)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.open(self,fignum)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.send_binary(self,blob)
matplotlib.backends.backend_webagg.WebAggApplication.WebSocket.send_json(self,content)
matplotlib.backends.backend_webagg.WebAggApplication.__init__(self,url_prefix='')
matplotlib.backends.backend_webagg.WebAggApplication.initialize(cls,url_prefix='',port=None,address=None)
matplotlib.backends.backend_webagg.WebAggApplication.start(cls)
matplotlib.backends.backend_webagg._BackendWebAgg(_Backend)
matplotlib.backends.backend_webagg._BackendWebAgg.show()
matplotlib.backends.backend_webagg._BackendWebAgg.trigger_manager_draw(manager)
matplotlib.backends.backend_webagg.ipython_inline_display(figure)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_pgf.py----------------------------------------
A:matplotlib.backends.backend_pgf.fc_list->fc_list.decode('utf8').decode('utf8')
A:matplotlib.backends.backend_pgf.system_fonts->list(set(system_fonts))
A:matplotlib.backends.backend_pgf.texcommand->get_texcommand()
A:matplotlib.backends.backend_pgf.re_mathsep->re.compile(NO_ESCAPE + '\\$')
A:matplotlib.backends.backend_pgf.re_escapetext->re.compile(NO_ESCAPE + '([_^$%])')
A:matplotlib.backends.backend_pgf.re_mathdefault->re.compile(NO_ESCAPE + '(\\\\mathdefault)')
A:matplotlib.backends.backend_pgf.text->re.compile(NO_ESCAPE + '(\\\\mathdefault)').sub(repl_mathdefault, text)
A:matplotlib.backends.backend_pgf.parts->re.compile(NO_ESCAPE + '\\$').split(text)
A:matplotlib.backends.backend_pgf.s->common_texification(s)
A:matplotlib.backends.backend_pgf.size->prop.get_size_in_points()
A:matplotlib.backends.backend_pgf.(gs, ver)->matplotlib.checkdep_ghostscript()
A:matplotlib.backends.backend_pgf.latex_header->LatexManager._build_latex_header()
A:matplotlib.backends.backend_pgf.new_inst->LatexManager()
A:matplotlib.backends.backend_pgf._unclean_instances->weakref.WeakSet()
A:matplotlib.backends.backend_pgf.latex_preamble->get_preamble()
A:matplotlib.backends.backend_pgf.latex_fontspec->get_fontspec()
A:matplotlib.backends.backend_pgf.unclean_instances->list(LatexManager._unclean_instances)
A:matplotlib.backends.backend_pgf.exp->common_texification(s).encode('utf8')
A:matplotlib.backends.backend_pgf.buf->bytearray()
A:matplotlib.backends.backend_pgf.b->self.latex.stdout.read(1)
A:matplotlib.backends.backend_pgf.self.tmpdir->tempfile.mkdtemp(prefix='mpl_pgf_lm_')
A:matplotlib.backends.backend_pgf.self.texcommand->get_texcommand()
A:matplotlib.backends.backend_pgf.self.latex_header->LatexManager._build_latex_header()
A:matplotlib.backends.backend_pgf.latex->matplotlib.compat.subprocess.Popen([str(self.texcommand), '-halt-on-error'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, cwd=self.tmpdir)
A:matplotlib.backends.backend_pgf.(stdout, stderr)->matplotlib.compat.subprocess.Popen([str(self.texcommand), '-halt-on-error'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, cwd=self.tmpdir).communicate(test_input.encode('utf-8'))
A:matplotlib.backends.backend_pgf.self.latex_stdin_utf8->codecs.getwriter('utf8')(self.latex.stdin)
A:matplotlib.backends.backend_pgf.prop_cmds->_font_properties_str(prop)
A:matplotlib.backends.backend_pgf.answer->self._expect_prompt()
A:matplotlib.backends.backend_pgf.(width, height, offset)->self._expect_prompt().splitlines()[0].split(',')
A:matplotlib.backends.backend_pgf.self.latexManager->LatexManagerFactory.get_latex_manager()
A:matplotlib.backends.backend_pgf.(bl, tr)->marker_path.get_extents(marker_trans).get_points()
A:matplotlib.backends.backend_pgf.scale->matplotlib.transforms.Affine2D().scale(self.dpi)
A:matplotlib.backends.backend_pgf.((xmin, ymin), (xmax, ymax))->os.path.dirname(self.fh.name).get_extents(transform).get_points()
A:matplotlib.backends.backend_pgf.bbox->gc.get_clip_rectangle()
A:matplotlib.backends.backend_pgf.(p1, p2)->gc.get_clip_rectangle().get_points()
A:matplotlib.backends.backend_pgf.(clippath, clippath_trans)->gc.get_clip_path()
A:matplotlib.backends.backend_pgf.fillopacitystrokeopacity->gc.get_alpha()
A:matplotlib.backends.backend_pgf.stroke_rgba->gc.get_rgb()
A:matplotlib.backends.backend_pgf.(dash_offset, dash_list)->gc.get_dashes()
A:matplotlib.backends.backend_pgf.(x, y)->mtext.get_transform().transform_point(mtext.get_position())
A:matplotlib.backends.backend_pgf.(cx, cy, px, py)->tuple(points)
A:matplotlib.backends.backend_pgf.(c1x, c1y, c2x, c2y, px, py)->tuple(points)
A:matplotlib.backends.backend_pgf.path->os.path.dirname(self.fh.name)
A:matplotlib.backends.backend_pgf.(tr1, tr2, tr3, tr4, tr5, tr6)->transform.frozen().to_values()
A:matplotlib.backends.backend_pgf.interp->str(transform is None).lower()
A:matplotlib.backends.backend_pgf.alpha->gc.get_alpha()
A:matplotlib.backends.backend_pgf.(w, h, d)->self.latexManager.get_width_height_descent(s, prop)
A:matplotlib.backends.backend_pgf.remaining_tmpdirs->set()
A:matplotlib.backends.backend_pgf.renderer->MixedModeRenderer(self.figure, w, h, dpi, RendererPgf(self.figure, fh), bbox_inches_restore=_bbox_inches_restore)
A:matplotlib.backends.backend_pgf.header_info_preamble->'\n'.join(header_info_preamble)
A:matplotlib.backends.backend_pgf.dpi->self.figure.get_dpi()
A:matplotlib.backends.backend_pgf._bbox_inches_restore->kwargs.pop('bbox_inches_restore', None)
A:matplotlib.backends.backend_pgf.fh->codecs.getwriter('utf-8')(fname_or_fh)
A:matplotlib.backends.backend_pgf.tmpdir->tempfile.mkdtemp(prefix='mpl_pgf_')
A:matplotlib.backends.backend_pgf.fname_pgf->os.path.join(tmpdir, 'figure.pgf')
A:matplotlib.backends.backend_pgf.fname_tex->os.path.join(tmpdir, 'figure.tex')
A:matplotlib.backends.backend_pgf.fname_pdf->os.path.join(tmpdir, 'figure.pdf')
A:matplotlib.backends.backend_pgf.converter->make_pdf_to_png_converter()
A:matplotlib.backends.backend_pgf.fname_png->os.path.join(tmpdir, 'figure.png')
matplotlib.backends.backend_pgf.FigureCanvasPgf(FigureCanvasBase)
matplotlib.backends.backend_pgf.FigureCanvasPgf._print_pdf_to_fh(self,fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf._print_pgf_to_fh(self,fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf._print_png_to_fh(self,fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf.get_default_filetype(self)
matplotlib.backends.backend_pgf.FigureCanvasPgf.get_renderer(self)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_pdf(self,fname_or_fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_pgf(self,fname_or_fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureCanvasPgf.print_png(self,fname_or_fh,*args,**kwargs)
matplotlib.backends.backend_pgf.FigureManagerPgf(self,*args)
matplotlib.backends.backend_pgf.FigureManagerPgf.__init__(self,*args)
matplotlib.backends.backend_pgf.GraphicsContextPgf(GraphicsContextBase)
matplotlib.backends.backend_pgf.LatexError(self,message,latex_output='')
matplotlib.backends.backend_pgf.LatexError.__init__(self,message,latex_output='')
matplotlib.backends.backend_pgf.LatexManager(self)
matplotlib.backends.backend_pgf.LatexManager.__del__(self)
matplotlib.backends.backend_pgf.LatexManager.__init__(self)
matplotlib.backends.backend_pgf.LatexManager._build_latex_header()
matplotlib.backends.backend_pgf.LatexManager._cleanup(self)
matplotlib.backends.backend_pgf.LatexManager._cleanup_remaining_instances()
matplotlib.backends.backend_pgf.LatexManager._expect(self,s)
matplotlib.backends.backend_pgf.LatexManager._expect_prompt(self)
matplotlib.backends.backend_pgf.LatexManager._stdin_writeln(self,s)
matplotlib.backends.backend_pgf.LatexManager.get_width_height_descent(self,text,prop)
matplotlib.backends.backend_pgf.LatexManagerFactory(object)
matplotlib.backends.backend_pgf.LatexManagerFactory.get_latex_manager()
matplotlib.backends.backend_pgf.RendererPgf(self,figure,fh,dummy=False)
matplotlib.backends.backend_pgf.RendererPgf.__init__(self,figure,fh,dummy=False)
matplotlib.backends.backend_pgf.RendererPgf._pgf_path_draw(self,stroke=True,fill=False)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_clip(self,gc)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf._print_pgf_path_styles(self,gc,rgbFace)
matplotlib.backends.backend_pgf.RendererPgf.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backends.backend_pgf.RendererPgf.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_pgf.RendererPgf.flipy(self)
matplotlib.backends.backend_pgf.RendererPgf.get_canvas_width_height(self)
matplotlib.backends.backend_pgf.RendererPgf.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_pgf.RendererPgf.new_gc(self)
matplotlib.backends.backend_pgf.RendererPgf.option_image_nocomposite(self)
matplotlib.backends.backend_pgf.RendererPgf.option_scale_image(self)
matplotlib.backends.backend_pgf.RendererPgf.points_to_pixels(self,points)
matplotlib.backends.backend_pgf.TmpDirCleaner(object)
matplotlib.backends.backend_pgf.TmpDirCleaner.add(tmpdir)
matplotlib.backends.backend_pgf.TmpDirCleaner.cleanup_remaining_tmpdirs()
matplotlib.backends.backend_pgf._BackendPgf(_Backend)
matplotlib.backends.backend_pgf._cleanup_all()
matplotlib.backends.backend_pgf._font_properties_str(prop)
matplotlib.backends.backend_pgf.common_texification(text)
matplotlib.backends.backend_pgf.get_fontspec()
matplotlib.backends.backend_pgf.get_preamble()
matplotlib.backends.backend_pgf.get_texcommand()
matplotlib.backends.backend_pgf.make_pdf_to_png_converter()
matplotlib.backends.backend_pgf.writeln(fh,line)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_mixed.py----------------------------------------
A:matplotlib.backends.backend_mixed.self._figdpi->figure.get_dpi()
A:matplotlib.backends.backend_mixed._methods->'\n        close_group draw_image draw_markers draw_path\n        draw_path_collection draw_quad_mesh draw_tex draw_text\n        finalize flipy get_canvas_width_height get_image_magnification\n        get_texmanager get_text_width_height_descent new_gc open_group\n        option_image_nocomposite points_to_pixels strip_math\n        start_filter stop_filter draw_gouraud_triangle\n        draw_gouraud_triangles option_scale_image\n        _text2path _get_text_path_transform height width\n        '.split()
A:matplotlib.backends.backend_mixed.r->process_figure_for_rasterizing(self.figure, self._bbox_inches_restore, self._figdpi)
A:matplotlib.backends.backend_mixed.self._raster_renderer->self._raster_renderer_class(self._width * self.dpi, self._height * self.dpi, self.dpi)
A:matplotlib.backends.backend_mixed.(buffer, bounds)->self._raster_renderer.tostring_rgba_minimized()
A:matplotlib.backends.backend_mixed.image->image.reshape((h, w, 4)).reshape((h, w, 4))
A:matplotlib.backends.backend_mixed.gc->self._renderer.new_gc()
matplotlib.backends.backend_mixed.MixedModeRenderer(self,figure,width,height,dpi,vector_renderer,raster_renderer_class=None,bbox_inches_restore=None)
matplotlib.backends.backend_mixed.MixedModeRenderer.__init__(self,figure,width,height,dpi,vector_renderer,raster_renderer_class=None,bbox_inches_restore=None)
matplotlib.backends.backend_mixed.MixedModeRenderer._set_current_renderer(self,renderer)
matplotlib.backends.backend_mixed.MixedModeRenderer.start_rasterizing(self)
matplotlib.backends.backend_mixed.MixedModeRenderer.stop_rasterizing(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_tkcairo.py----------------------------------------
A:matplotlib.backends.backend_tkcairo.self._renderer->RendererCairo(self.figure.dpi)
A:matplotlib.backends.backend_tkcairo.width->int(self.figure.bbox.width)
A:matplotlib.backends.backend_tkcairo.height->int(self.figure.bbox.height)
A:matplotlib.backends.backend_tkcairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_tkcairo.buf->buf.take([2, 1, 0, 3] if sys.byteorder == 'little' else [1, 2, 3, 0], axis=2).take([2, 1, 0, 3] if sys.byteorder == 'little' else [1, 2, 3, 0], axis=2)
matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo(self,*args,**kwargs)
matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo.__init__(self,*args,**kwargs)
matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo.draw(self)
matplotlib.backends.backend_tkcairo._BackendTkCairo(_BackendTk)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_macosx.py----------------------------------------
A:matplotlib.backends.backend_macosx.(width, height)->self.get_width_height()
A:matplotlib.backends.backend_macosx.renderer->self.get_renderer(cleared=self.figure.stale)
A:matplotlib.backends.backend_macosx.self.toolbar->NavigationToolbar2Mac(canvas)
A:matplotlib.backends.backend_macosx.basedir->os.path.join(rcParams['datapath'], 'images')
A:matplotlib.backends.backend_macosx.filename->matplotlib.backends._macosx.choose_save_file('Save the figure', self.canvas.get_default_filename())
A:matplotlib.backends.backend_macosx.toolfig->Figure(figsize=(6, 3))
A:matplotlib.backends.backend_macosx.canvas->FigureCanvasMac(toolfig)
A:matplotlib.backends.backend_macosx.tool->SubplotTool(self.canvas.figure, toolfig)
matplotlib.backends.backend_macosx.FigureCanvasMac(self,figure)
matplotlib.backends.backend_macosx.FigureCanvasMac.__init__(self,figure)
matplotlib.backends.backend_macosx.FigureCanvasMac._draw(self)
matplotlib.backends.backend_macosx.FigureCanvasMac._set_device_scale(self,value)
matplotlib.backends.backend_macosx.FigureCanvasMac.blit(self,bbox)
matplotlib.backends.backend_macosx.FigureCanvasMac.draw(self)
matplotlib.backends.backend_macosx.FigureCanvasMac.draw_idle(self,*args,**kwargs)
matplotlib.backends.backend_macosx.FigureCanvasMac.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_macosx.FigureCanvasMac.resize(self,width,height)
matplotlib.backends.backend_macosx.FigureManagerMac(self,canvas,num)
matplotlib.backends.backend_macosx.FigureManagerMac.__init__(self,canvas,num)
matplotlib.backends.backend_macosx.FigureManagerMac.close(self)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac(self,canvas)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.__init__(self,canvas)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac._init_toolbar(self)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.prepare_configure_subplots(self)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.release(self,event)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.save_figure(self,*args)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.set_cursor(self,cursor)
matplotlib.backends.backend_macosx.NavigationToolbar2Mac.set_message(self,message)
matplotlib.backends.backend_macosx.TimerMac(_macosx.Timer,TimerBase)
matplotlib.backends.backend_macosx._BackendMac(_Backend)
matplotlib.backends.backend_macosx._BackendMac.mainloop()
matplotlib.backends.backend_macosx._BackendMac.trigger_manager_draw(manager)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/windowing.py----------------------------------------
A:matplotlib.backends.windowing.self._shellWindow->GetForegroundWindow()
matplotlib.backends.windowing.FocusManager(self)
matplotlib.backends.windowing.FocusManager.__del__(self)
matplotlib.backends.windowing.FocusManager.__init__(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_wxagg.py----------------------------------------
A:matplotlib.backends.backend_wxagg.self.bitmap->_convert_agg_to_wx_bitmap(self.get_renderer(), None)
A:matplotlib.backends.backend_wxagg.x->int(l)
A:matplotlib.backends.backend_wxagg.y->int(int(agg.height) - t)
A:matplotlib.backends.backend_wxagg.srcBmp->wxc.BitmapFromBuffer(int(agg.width), int(agg.height), agg.buffer_rgba())
A:matplotlib.backends.backend_wxagg.srcDC->wx.MemoryDC()
A:matplotlib.backends.backend_wxagg.destDC->wx.MemoryDC()
A:matplotlib.backends.backend_wxagg.image->wxc.EmptyImage(int(agg.width), int(agg.height))
A:matplotlib.backends.backend_wxagg.destBmp->wxc.EmptyBitmap(int(width), int(height))
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg(FigureCanvasAgg,_FigureCanvasWxBase)
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.blit(self,bbox=None)
matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.draw(self,drawDC=None)
matplotlib.backends.backend_wxagg.FigureFrameWxAgg(FigureFrameWx)
matplotlib.backends.backend_wxagg.FigureFrameWxAgg.get_canvas(self,fig)
matplotlib.backends.backend_wxagg.Toolbar(NavigationToolbar2WxAgg)
matplotlib.backends.backend_wxagg._BackendWxAgg(_BackendWx)
matplotlib.backends.backend_wxagg._WX28_clipped_agg_as_bitmap(agg,bbox)
matplotlib.backends.backend_wxagg._convert_agg_to_wx_bitmap(agg,bbox)
matplotlib.backends.backend_wxagg._convert_agg_to_wx_image(agg,bbox)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_pdf.py----------------------------------------
A:matplotlib.backends.backend_pdf._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_pdf.length->len(s)
A:matplotlib.backends.backend_pdf._string_escape_regex->re.compile(b'([\\\\()\\r\\n])')
A:matplotlib.backends.backend_pdf.m->match.group(0)
A:matplotlib.backends.backend_pdf.r->obj.strftime('D:%Y%m%d%H%M%S')
A:matplotlib.backends.backend_pdf.s->six.text_type(s)
A:matplotlib.backends.backend_pdf.z->obj.utcoffset()
A:matplotlib.backends.backend_pdf._regex->re.compile('[^!-~]')
A:matplotlib.backends.backend_pdf.name->self.file.hatchPattern(hatch_style)
A:matplotlib.backends.backend_pdf.self.name->self._regex.sub(Name.hexify, name).encode('ascii')
A:matplotlib.backends.backend_pdf._pdfops->dict(close_fill_stroke=b'b', fill_stroke=b'B', fill=b'f', closepath=b'h', close_stroke=b's', stroke=b'S', endpath=b'n', begin_text=b'BT', end_text=b'ET', curveto=b'c', rectangle=b're', lineto=b'l', moveto=b'm', concat_matrix=b'cm', use_xobject=b'Do', setgray_stroke=b'G', setgray_nonstroke=b'g', setrgb_stroke=b'RG', setrgb_nonstroke=b'rg', setcolorspace_stroke=b'CS', setcolorspace_nonstroke=b'cs', setcolor_stroke=b'SCN', setcolor_nonstroke=b'scn', setdash=b'd', setlinejoin=b'j', setlinecap=b'J', setgstate=b'gs', gsave=b'q', grestore=b'Q', textpos=b'Td', selectfont=b'Tf', textmatrix=b'Tm', show=b'Tj', showkern=b'TJ', setlinewidth=b'w', clip=b'W', shading=b'sh')
A:matplotlib.backends.backend_pdf.Op->Bunch(**{name: Operator(value) for (name, value) in six.iteritems(_pdfops)})
A:matplotlib.backends.backend_pdf.self.extra->extra.copy()
A:matplotlib.backends.backend_pdf.self.compressobj->zlib.compressobj(rcParams['pdf.compression'])
A:matplotlib.backends.backend_pdf.self.file->BytesIO()
A:matplotlib.backends.backend_pdf.self.pos->self.file.tell()
A:matplotlib.backends.backend_pdf.dict['Filter']->Name('FlateDecode')
A:matplotlib.backends.backend_pdf.contents->self.file.getvalue()
A:matplotlib.backends.backend_pdf.self.len->len(contents)
A:matplotlib.backends.backend_pdf.compressed->self.compressobj.flush()
A:matplotlib.backends.backend_pdf.(fh, opened)->matplotlib.cbook.to_filehandle(filename, 'wb', return_opened=True)
A:matplotlib.backends.backend_pdf.self.tell_base->findfont(prop).tell()
A:matplotlib.backends.backend_pdf.fh->BytesIO()
A:matplotlib.backends.backend_pdf.self._core14fontdir->os.path.join(rcParams['datapath'], 'fonts', 'pdfcorefonts')
A:matplotlib.backends.backend_pdf.self.rootObject->self.reserveObject('root')
A:matplotlib.backends.backend_pdf.self.pagesObject->self.reserveObject('pages')
A:matplotlib.backends.backend_pdf.self.fontObject->self.reserveObject('fonts')
A:matplotlib.backends.backend_pdf.self.alphaStateObject->self.reserveObject('extended graphics states')
A:matplotlib.backends.backend_pdf.self.hatchObject->self.reserveObject('tiling patterns')
A:matplotlib.backends.backend_pdf.self.gouraudObject->self.reserveObject('Gouraud triangles')
A:matplotlib.backends.backend_pdf.self.XObjectObject->self.reserveObject('external objects')
A:matplotlib.backends.backend_pdf.self.resourceObject->self.reserveObject('resources')
A:matplotlib.backends.backend_pdf.source_date_epoch->os.getenv('SOURCE_DATE_EPOCH')
A:matplotlib.backends.backend_pdf.source_date->datetime.datetime.today()
A:matplotlib.backends.backend_pdf.self.hatchPatterns->collections.OrderedDict()
A:matplotlib.backends.backend_pdf.self._images->collections.OrderedDict()
A:matplotlib.backends.backend_pdf.self.markers->collections.OrderedDict()
A:matplotlib.backends.backend_pdf.contentObject->self.reserveObject('page contents')
A:matplotlib.backends.backend_pdf.pageObject->self.reserveObject('page')
A:matplotlib.backends.backend_pdf.annotObject->self.reserveObject('annotation')
A:matplotlib.backends.backend_pdf.self.currentstream->Stream(id, len, self, extra, png)
A:matplotlib.backends.backend_pdf.filename->findfont(prop)
A:matplotlib.backends.backend_pdf.Fx->Name('F%d' % self.nextFont)
A:matplotlib.backends.backend_pdf.self._texFontMap->matplotlib.dviread.PsfontsMap(dviread.find_tex_file('pdftex.map'))
A:matplotlib.backends.backend_pdf.dvi_info->self.dviFontInfo.get(dvifont.texname)
A:matplotlib.backends.backend_pdf.pdfname->self.file.dviFontName(dvifont)
A:matplotlib.backends.backend_pdf.self.dviFontInfo[dvifont.texname]->Bunch(dvifont=dvifont, pdfname=pdfname, fontfile=psfont.filename, basefont=psfont.psname, encodingfile=psfont.encoding, effects=psfont.effects)
A:matplotlib.backends.backend_pdf.fonts[Fx]->self.embedTTF(realpath, chars[1])
A:matplotlib.backends.backend_pdf.(realpath, stat_key)->get_realpath_and_stat(fname)
A:matplotlib.backends.backend_pdf.chars->self.used_characters.get(stat_key)
A:matplotlib.backends.backend_pdf.font->get_font(filename)
A:matplotlib.backends.backend_pdf.fontname->get_font(filename).get_fontname()
A:matplotlib.backends.backend_pdf.fontdictObject->self.reserveObject('font dictionary')
A:matplotlib.backends.backend_pdf.widthsObject->self.reserveObject('font widths')
A:matplotlib.backends.backend_pdf.enc->matplotlib.dviread.Encoding(fontinfo.encodingfile)
A:matplotlib.backends.backend_pdf.fontdict['BaseFont']->Name(t1font.prop['FontName'])
A:matplotlib.backends.backend_pdf.t1font->t1font.transform(fontinfo.effects).transform(fontinfo.effects)
A:matplotlib.backends.backend_pdf.fontdesc->self.createType1Descriptor(t1font, fontinfo.fontfile)
A:matplotlib.backends.backend_pdf.fontdescObject->self.reserveObject('font descriptor')
A:matplotlib.backends.backend_pdf.fontfileObject->self.reserveObject('font file stream')
A:matplotlib.backends.backend_pdf.ft2font->get_font(fontfile)
A:matplotlib.backends.backend_pdf.charprocsObject->self.reserveObject('character procs')
A:matplotlib.backends.backend_pdf.descriptor['MaxWidth']->max(widths)
A:matplotlib.backends.backend_pdf.multi_byte_chars->set()
A:matplotlib.backends.backend_pdf.gind->get_font(filename).get_char_index(ccode)
A:matplotlib.backends.backend_pdf.glyph_name->get_font(filename).get_glyph_name(gind)
A:matplotlib.backends.backend_pdf.rawcharprocs->matplotlib.ttconv.get_pdf_charprocs(filename.encode(sys.getfilesystemencoding()), glyph_ids)
A:matplotlib.backends.backend_pdf.charprocDict['Type']->Name('XObject')
A:matplotlib.backends.backend_pdf.charprocDict['Subtype']->Name('Form')
A:matplotlib.backends.backend_pdf.charprocObject->self.reserveObject('charProc')
A:matplotlib.backends.backend_pdf.cidFontDictObject->self.reserveObject('CID font dictionary')
A:matplotlib.backends.backend_pdf.type0FontDictObject->self.reserveObject('Type 0 font dictionary')
A:matplotlib.backends.backend_pdf.cidToGidMapObject->self.reserveObject('CIDToGIDMap stream')
A:matplotlib.backends.backend_pdf.wObject->self.reserveObject('Type 0 widths')
A:matplotlib.backends.backend_pdf.toUnicodeMapObject->self.reserveObject('ToUnicode map')
A:matplotlib.backends.backend_pdf.length1Object->self.reserveObject('decoded length of a font')
A:matplotlib.backends.backend_pdf.data->bytearray(length)
A:matplotlib.backends.backend_pdf.glyph->get_font(filename).load_char(ccode, flags=LOAD_NO_HINTING)
A:matplotlib.backends.backend_pdf.cid_to_gid_map[ccode]->unichr(gind)
A:matplotlib.backends.backend_pdf.max_ccode->max(ccode, max_ccode)
A:matplotlib.backends.backend_pdf.max_width->max(max_width, width)
A:matplotlib.backends.backend_pdf.unicode_cmap->(self._identityToUnicodeCMap % (len(unicode_groups), '\n'.join(unicode_bfrange))).encode('ascii')
A:matplotlib.backends.backend_pdf.cid_to_gid_map->''.join(cid_to_gid_map).encode('utf-16be')
A:matplotlib.backends.backend_pdf.sfnt->get_font(filename).get_sfnt()
A:matplotlib.backends.backend_pdf.ps_name->Name(ps_name)
A:matplotlib.backends.backend_pdf.state->self.alphaStates.get(alpha, None)
A:matplotlib.backends.backend_pdf.edge->tuple(edge)
A:matplotlib.backends.backend_pdf.face->tuple(face)
A:matplotlib.backends.backend_pdf.pattern->self.hatchPatterns.get(hatch_style, None)
A:matplotlib.backends.backend_pdf.hatchDict->dict()
A:matplotlib.backends.backend_pdf.ob->self.reserveObject('path %d' % len(self.paths))
A:matplotlib.backends.backend_pdf.gouraudDict->dict()
A:matplotlib.backends.backend_pdf.flat_points->points.reshape((shape[0] * shape[1], 2)).reshape((shape[0] * shape[1], 2))
A:matplotlib.backends.backend_pdf.flat_colors->colors.reshape((shape[0] * shape[1], 4))
A:matplotlib.backends.backend_pdf.streamarr->numpy.empty((shape[0] * shape[1],), dtype=[(str('flags'), str('u1')), (str('points'), str('>u4'), (2,)), (str('colors'), str('u1'), (3,))])
A:matplotlib.backends.backend_pdf.entry->self._images.get(id(image), None)
A:matplotlib.backends.backend_pdf.rgb->numpy.array(rgb, order='C')
A:matplotlib.backends.backend_pdf.alpha->numpy.array(alpha, order='C')
A:matplotlib.backends.backend_pdf.buffer->BytesIO()
A:matplotlib.backends.backend_pdf.header->bytearray(8)
A:matplotlib.backends.backend_pdf.n->BytesIO().readinto(data)
A:matplotlib.backends.backend_pdf.(length, type)->struct.unpack(b'!L4s', bytes(header))
A:matplotlib.backends.backend_pdf.(height, width, data, adata)->self._unpack(img)
A:matplotlib.backends.backend_pdf.smaskObject->self.reserveObject('smask')
A:matplotlib.backends.backend_pdf.pathops->self.pathOperations(path, trans, simplify=False)
A:matplotlib.backends.backend_pdf.result->self.markers.get(key)
A:matplotlib.backends.backend_pdf.bbox->bbox.padded(padding).padded(padding)
A:matplotlib.backends.backend_pdf.extents->list(bbox.extents)
A:matplotlib.backends.backend_pdf.cmds->self.pathOperations(path, transform, clip, simplify=simplify, sketch=sketch)
A:matplotlib.backends.backend_pdf.self.infoObject->self.reserveObject('info')
A:matplotlib.backends.backend_pdf.afm_font_cache->maxdict(50)
A:matplotlib.backends.backend_pdf.self.gc->self.new_gc()
A:matplotlib.backends.backend_pdf.self.mathtext_parser->MathTextParser('Pdf')
A:matplotlib.backends.backend_pdf.orig_fill->getattr(gc, '_fillcolor', (0.0, 0.0, 0.0))
A:matplotlib.backends.backend_pdf.orig_alphas->getattr(gc, '_effective_alphas', (1.0, 1.0))
A:matplotlib.backends.backend_pdf.delta->self.gc.delta(gc)
A:matplotlib.backends.backend_pdf.used_characters->self.file.used_characters.setdefault(stat_key, (realpath, set()))
A:matplotlib.backends.backend_pdf.imob->self.file.imageObject(im)
A:matplotlib.backends.backend_pdf.(tr1, tr2, tr3, tr4, tr5, tr6)->transform.frozen().to_values()
A:matplotlib.backends.backend_pdf.facecolors->numpy.asarray(facecolors)
A:matplotlib.backends.backend_pdf.edgecolors->numpy.asarray(edgecolors)
A:matplotlib.backends.backend_pdf.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_pdf.padding->numpy.max(linewidths)
A:matplotlib.backends.backend_pdf.len_marker_path->len(marker_path)
A:matplotlib.backends.backend_pdf.uses->len(path)
A:matplotlib.backends.backend_pdf.fill->gc.fill(rgbFace)
A:matplotlib.backends.backend_pdf.stroke->gc.stroke()
A:matplotlib.backends.backend_pdf.marker->self.file.markerObject(marker_path, marker_trans, fill, stroke, self.gc._linewidth, gc.get_joinstyle(), gc.get_capstyle())
A:matplotlib.backends.backend_pdf.points->points.reshape((shape[0] * shape[1], 2)).reshape((shape[0] * shape[1], 2))
A:matplotlib.backends.backend_pdf.tpoints->tpoints.reshape(shape).reshape(shape)
A:matplotlib.backends.backend_pdf.(width, height, descent, glyphs, rects, used_characters)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_pdf.texmanager->self.get_texmanager()
A:matplotlib.backends.backend_pdf.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_pdf.dvifile->self.get_texmanager().make_dvi(s, fontsize)
A:matplotlib.backends.backend_pdf.page->next(iter(dvi))
A:matplotlib.backends.backend_pdf.mytrans->Affine2D().rotate_deg(angle).translate(x, y)
A:matplotlib.backends.backend_pdf.(curx, cury)->Affine2D().rotate_deg(angle).translate(x, y).transform_point((elt[1], elt[2]))
A:matplotlib.backends.backend_pdf.boxgc->self.new_gc()
A:matplotlib.backends.backend_pdf.path->Path([[x1, y1], [x1 + w, y1], [x1 + w, y1 + h], [x1, y1 + h], [0, 0]], pathops)
A:matplotlib.backends.backend_pdf.(l, b, w, h)->get_font(filename).get_str_bbox(s)
A:matplotlib.backends.backend_pdf.ccode->ord(c)
A:matplotlib.backends.backend_pdf.kern->get_font(filename).get_kerning(lastgind, gind, KERNING_UNFITTED)
A:matplotlib.backends.backend_pdf.(use_simple_method, chunks)->check_simple_method(s)
A:matplotlib.backends.backend_pdf.(w, h, d)->self.get_texmanager().get_text_width_height_descent(s, fontsize, renderer=self)
A:matplotlib.backends.backend_pdf.(w, h, d, glyphs, rects, used_characters)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_pdf.(l, b, w, h, d)->get_font(filename).get_str_bbox_and_descent(s)
A:matplotlib.backends.backend_pdf.scale->prop.get_size_in_points()
A:matplotlib.backends.backend_pdf.(w, h)->get_font(filename).get_width_height()
A:matplotlib.backends.backend_pdf.d->dict(self.__dict__)
A:matplotlib.backends.backend_pdf.key->hash(prop)
A:matplotlib.backends.backend_pdf.parent->GraphicsContextPdf(self.file)
A:matplotlib.backends.backend_pdf.(path, affine)->clippath.get_transformed_path_and_affine()
A:matplotlib.backends.backend_pdf.ours->numpy.asarray(ours)
A:matplotlib.backends.backend_pdf.theirs->numpy.asarray(theirs)
A:matplotlib.backends.backend_pdf.different->bool(ours != theirs)
A:matplotlib.backends.backend_pdf.fillcolor->getattr(other, '_fillcolor', self._fillcolor)
A:matplotlib.backends.backend_pdf.effective_alphas->getattr(other, '_effective_alphas', self._effective_alphas)
A:matplotlib.backends.backend_pdf.self._file->PdfFile(filename, metadata=metadata)
A:matplotlib.backends.backend_pdf.manager->matplotlib._pylab_helpers.Gcf.get_fig_manager(figure)
A:matplotlib.backends.backend_pdf.figure.canvas->FigureCanvasPdf(figure)
A:matplotlib.backends.backend_pdf.image_dpi->kwargs.get('dpi', 72)
A:matplotlib.backends.backend_pdf.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_pdf.file->PdfFile(filename, metadata=kwargs.pop('metadata', None))
A:matplotlib.backends.backend_pdf._bbox_inches_restore->kwargs.pop('bbox_inches_restore', None)
A:matplotlib.backends.backend_pdf.renderer->MixedModeRenderer(self.figure, width, height, image_dpi, RendererPdf(file, image_dpi, height, width), bbox_inches_restore=_bbox_inches_restore)
matplotlib.backends.backend_pdf.FigureCanvasPdf(FigureCanvasBase)
matplotlib.backends.backend_pdf.FigureCanvasPdf.draw(self)
matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype(self)
matplotlib.backends.backend_pdf.FigureCanvasPdf.print_pdf(self,filename,**kwargs)
matplotlib.backends.backend_pdf.FigureManagerPdf(FigureManagerBase)
matplotlib.backends.backend_pdf.GraphicsContextPdf(self,file)
matplotlib.backends.backend_pdf.GraphicsContextPdf.__init__(self,file)
matplotlib.backends.backend_pdf.GraphicsContextPdf.__repr__(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.alpha_cmd(self,alpha,forced,effective_alphas)
matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyle_cmd(self,style)
matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd(self,cliprect,clippath)
matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties(self,other)
matplotlib.backends.backend_pdf.GraphicsContextPdf.dash_cmd(self,dashes)
matplotlib.backends.backend_pdf.GraphicsContextPdf.delta(self,other)
matplotlib.backends.backend_pdf.GraphicsContextPdf.fill(self,*args)
matplotlib.backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd(self,rgb)
matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.hatch_cmd(self,hatch,hatch_color)
matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd(self,style)
matplotlib.backends.backend_pdf.GraphicsContextPdf.linewidth_cmd(self,width)
matplotlib.backends.backend_pdf.GraphicsContextPdf.paint(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.pop(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.push(self)
matplotlib.backends.backend_pdf.GraphicsContextPdf.rgb_cmd(self,rgb)
matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke(self)
matplotlib.backends.backend_pdf.Name(self,name)
matplotlib.backends.backend_pdf.Name.__eq__(self,other)
matplotlib.backends.backend_pdf.Name.__hash__(self)
matplotlib.backends.backend_pdf.Name.__init__(self,name)
matplotlib.backends.backend_pdf.Name.__lt__(self,other)
matplotlib.backends.backend_pdf.Name.__repr__(self)
matplotlib.backends.backend_pdf.Name.__str__(self)
matplotlib.backends.backend_pdf.Name.hexify(match)
matplotlib.backends.backend_pdf.Name.pdfRepr(self)
matplotlib.backends.backend_pdf.Operator(self,op)
matplotlib.backends.backend_pdf.Operator.__init__(self,op)
matplotlib.backends.backend_pdf.Operator.__repr__(self)
matplotlib.backends.backend_pdf.Operator.pdfRepr(self)
matplotlib.backends.backend_pdf.PdfFile(self,filename,metadata=None)
matplotlib.backends.backend_pdf.PdfFile.__init__(self,filename,metadata=None)
matplotlib.backends.backend_pdf.PdfFile._embedTeXFont(self,fontinfo)
matplotlib.backends.backend_pdf.PdfFile._get_xobject_symbol_name(self,filename,symbol_name)
matplotlib.backends.backend_pdf.PdfFile._unpack(self,im)
matplotlib.backends.backend_pdf.PdfFile._writeImg(self,data,height,width,grayscale,id,smask=None)
matplotlib.backends.backend_pdf.PdfFile._writePng(self,data)
matplotlib.backends.backend_pdf.PdfFile._write_afm_font(self,filename)
matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles(self,points,colors)
matplotlib.backends.backend_pdf.PdfFile.alphaState(self,alpha)
matplotlib.backends.backend_pdf.PdfFile.beginStream(self,id,len,extra=None,png=None)
matplotlib.backends.backend_pdf.PdfFile.close(self)
matplotlib.backends.backend_pdf.PdfFile.createType1Descriptor(self,t1font,fontfile)
matplotlib.backends.backend_pdf.PdfFile.dviFontName(self,dvifont)
matplotlib.backends.backend_pdf.PdfFile.embedTTF(self,filename,characters)
matplotlib.backends.backend_pdf.PdfFile.endStream(self)
matplotlib.backends.backend_pdf.PdfFile.finalize(self)
matplotlib.backends.backend_pdf.PdfFile.fontName(self,fontprop)
matplotlib.backends.backend_pdf.PdfFile.hatchPattern(self,hatch_style)
matplotlib.backends.backend_pdf.PdfFile.imageObject(self,image)
matplotlib.backends.backend_pdf.PdfFile.markerObject(self,path,trans,fill,stroke,lw,joinstyle,capstyle)
matplotlib.backends.backend_pdf.PdfFile.newPage(self,width,height)
matplotlib.backends.backend_pdf.PdfFile.newTextnote(self,text,positionRect=[-100,-100,0,0])
matplotlib.backends.backend_pdf.PdfFile.output(self,*data)
matplotlib.backends.backend_pdf.PdfFile.pathCollectionObject(self,gc,path,trans,padding,filled,stroked)
matplotlib.backends.backend_pdf.PdfFile.pathOperations(path,transform,clip=None,simplify=None,sketch=None)
matplotlib.backends.backend_pdf.PdfFile.recordXref(self,id)
matplotlib.backends.backend_pdf.PdfFile.reserveObject(self,name='')
matplotlib.backends.backend_pdf.PdfFile.texFontMap(self)
matplotlib.backends.backend_pdf.PdfFile.write(self,data)
matplotlib.backends.backend_pdf.PdfFile.writeFonts(self)
matplotlib.backends.backend_pdf.PdfFile.writeGouraudTriangles(self)
matplotlib.backends.backend_pdf.PdfFile.writeHatches(self)
matplotlib.backends.backend_pdf.PdfFile.writeImages(self)
matplotlib.backends.backend_pdf.PdfFile.writeInfoDict(self)
matplotlib.backends.backend_pdf.PdfFile.writeMarkers(self)
matplotlib.backends.backend_pdf.PdfFile.writeObject(self,object,contents)
matplotlib.backends.backend_pdf.PdfFile.writePath(self,path,transform,clip=False,sketch=None)
matplotlib.backends.backend_pdf.PdfFile.writePathCollectionTemplates(self)
matplotlib.backends.backend_pdf.PdfFile.writeTrailer(self)
matplotlib.backends.backend_pdf.PdfFile.writeXref(self)
matplotlib.backends.backend_pdf.PdfPages(self,filename,keep_empty=True,metadata=None)
matplotlib.backends.backend_pdf.PdfPages.__enter__(self)
matplotlib.backends.backend_pdf.PdfPages.__exit__(self,exc_type,exc_val,exc_tb)
matplotlib.backends.backend_pdf.PdfPages.__init__(self,filename,keep_empty=True,metadata=None)
matplotlib.backends.backend_pdf.PdfPages.attach_note(self,text,positionRect=[-100,-100,0,0])
matplotlib.backends.backend_pdf.PdfPages.close(self)
matplotlib.backends.backend_pdf.PdfPages.get_pagecount(self)
matplotlib.backends.backend_pdf.PdfPages.infodict(self)
matplotlib.backends.backend_pdf.PdfPages.savefig(self,figure=None,**kwargs)
matplotlib.backends.backend_pdf.Reference(self,id)
matplotlib.backends.backend_pdf.Reference.__init__(self,id)
matplotlib.backends.backend_pdf.Reference.__repr__(self)
matplotlib.backends.backend_pdf.Reference.pdfRepr(self)
matplotlib.backends.backend_pdf.Reference.write(self,contents,file)
matplotlib.backends.backend_pdf.RendererPdf(self,file,image_dpi,height,width)
matplotlib.backends.backend_pdf.RendererPdf.__init__(self,file,image_dpi,height,width)
matplotlib.backends.backend_pdf.RendererPdf._get_font_afm(self,prop)
matplotlib.backends.backend_pdf.RendererPdf._get_font_ttf(self,prop)
matplotlib.backends.backend_pdf.RendererPdf._setup_textpos(self,x,y,angle,oldx=0,oldy=0,oldangle=0)
matplotlib.backends.backend_pdf.RendererPdf.check_gc(self,gc,fillcolor=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles(self,gc,points,colors,trans)
matplotlib.backends.backend_pdf.RendererPdf.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_pdf.RendererPdf.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offsetTrans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_pdf.RendererPdf.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backends.backend_pdf.RendererPdf.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_pdf.RendererPdf.encode_string(self,s,fonttype)
matplotlib.backends.backend_pdf.RendererPdf.finalize(self)
matplotlib.backends.backend_pdf.RendererPdf.flipy(self)
matplotlib.backends.backend_pdf.RendererPdf.get_canvas_width_height(self)
matplotlib.backends.backend_pdf.RendererPdf.get_image_magnification(self)
matplotlib.backends.backend_pdf.RendererPdf.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_pdf.RendererPdf.merge_used_characters(self,other)
matplotlib.backends.backend_pdf.RendererPdf.new_gc(self)
matplotlib.backends.backend_pdf.RendererPdf.option_image_nocomposite(self)
matplotlib.backends.backend_pdf.RendererPdf.option_scale_image(self)
matplotlib.backends.backend_pdf.RendererPdf.track_characters(self,font,s)
matplotlib.backends.backend_pdf.Stream(self,id,len,file,extra=None,png=None)
matplotlib.backends.backend_pdf.Stream.__init__(self,id,len,file,extra=None,png=None)
matplotlib.backends.backend_pdf.Stream._flush(self)
matplotlib.backends.backend_pdf.Stream._writeHeader(self)
matplotlib.backends.backend_pdf.Stream.end(self)
matplotlib.backends.backend_pdf.Stream.write(self,data)
matplotlib.backends.backend_pdf.Verbatim(self,x)
matplotlib.backends.backend_pdf.Verbatim.__init__(self,x)
matplotlib.backends.backend_pdf.Verbatim.pdfRepr(self)
matplotlib.backends.backend_pdf._BackendPdf(_Backend)
matplotlib.backends.backend_pdf._paint_path(fill,stroke)
matplotlib.backends.backend_pdf._string_escape(match)
matplotlib.backends.backend_pdf.fill(strings,linelen=75)
matplotlib.backends.backend_pdf.pdfRepr(obj)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt4cairo.py----------------------------------------
matplotlib.backends.backend_qt4cairo._BackendQT4Cairo(_BackendQT5Cairo)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_cairo.py----------------------------------------
A:matplotlib.backends.backend_cairo.self.__size->len(myarray.flatten())
A:matplotlib.backends.backend_cairo.self.gc->GraphicsContextCairo(renderer=self)
A:matplotlib.backends.backend_cairo.self.text_ctx->cairo.Context(cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1))
A:matplotlib.backends.backend_cairo.self.mathtext_parser->MathTextParser('Cairo')
A:matplotlib.backends.backend_cairo.self.gc.ctx->cairo.Context(surface)
A:matplotlib.backends.backend_cairo.clip->ctx.clip_extents()
A:matplotlib.backends.backend_cairo.marker_path->ctx.copy_path_flat()
A:matplotlib.backends.backend_cairo.(x1, y1, x2, y2)->ctx.fill_extents()
A:matplotlib.backends.backend_cairo.imbuffer->im.flatten()
A:matplotlib.backends.backend_cairo.surface->cairo.SVGSurface(fo, width_in_points, height_in_points)
A:matplotlib.backends.backend_cairo.s->s.encode('utf-8').encode('utf-8')
A:matplotlib.backends.backend_cairo.(width, height, descent, glyphs, rects)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_cairo.fontProp->ttfFontProperty(font)
A:matplotlib.backends.backend_cairo.(width, height, descent, fonts, used_characters)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_cairo._alpha->self.get_alpha()
A:matplotlib.backends.backend_cairo.(x, y, w, h)->numpy.round(rectangle.bounds)
A:matplotlib.backends.backend_cairo.(tpath, affine)->path.get_transformed_path_and_affine()
A:matplotlib.backends.backend_cairo.self._linewidth->float(w)
A:matplotlib.backends.backend_cairo.(width, height)->self.get_width_height()
A:matplotlib.backends.backend_cairo.renderer->RendererCairo(self.figure.dpi)
A:matplotlib.backends.backend_cairo.orientation->kwargs.get('orientation', 'portrait')
A:matplotlib.backends.backend_cairo.(w_in, h_in)->self.figure.get_size_inches()
A:matplotlib.backends.backend_cairo.fo->gzip.GzipFile(None, 'wb', fileobj=fo)
matplotlib.backends.backend_cairo.ArrayWrapper(self,myarray)
matplotlib.backends.backend_cairo.ArrayWrapper.__init__(self,myarray)
matplotlib.backends.backend_cairo.ArrayWrapper.buffer_info(self)
matplotlib.backends.backend_cairo.FigureCanvasCairo(FigureCanvasBase)
matplotlib.backends.backend_cairo.FigureCanvasCairo._save(self,fo,fmt,**kwargs)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_pdf(self,fobj,*args,**kwargs)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_png(self,fobj,*args,**kwargs)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_ps(self,fobj,*args,**kwargs)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svg(self,fobj,*args,**kwargs)
matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svgz(self,fobj,*args,**kwargs)
matplotlib.backends.backend_cairo.GraphicsContextCairo(self,renderer)
matplotlib.backends.backend_cairo.GraphicsContextCairo.__init__(self,renderer)
matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb(self)
matplotlib.backends.backend_cairo.GraphicsContextCairo.restore(self)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha(self,alpha)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle(self,cs)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path(self,path)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle(self,rectangle)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes(self,offset,dashes)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground(self,fg,isRGBA=None)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle(self,js)
matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth(self,w)
matplotlib.backends.backend_cairo.RendererCairo(self,dpi)
matplotlib.backends.backend_cairo.RendererCairo.__init__(self,dpi)
matplotlib.backends.backend_cairo.RendererCairo._draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_cairo.RendererCairo._fill_and_stroke(self,ctx,fill_c,alpha,alpha_overrides)
matplotlib.backends.backend_cairo.RendererCairo.convert_path(ctx,path,transform,clip=None)
matplotlib.backends.backend_cairo.RendererCairo.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_cairo.RendererCairo.draw_markers(self,gc,marker_path,marker_trans,path,transform,rgbFace=None)
matplotlib.backends.backend_cairo.RendererCairo.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_cairo.RendererCairo.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height(self)
matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_cairo.RendererCairo.new_gc(self)
matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels(self,points)
matplotlib.backends.backend_cairo.RendererCairo.set_ctx_from_surface(self,surface)
matplotlib.backends.backend_cairo.RendererCairo.set_width_height(self,width,height)
matplotlib.backends.backend_cairo._BackendCairo(_Backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt4agg.py----------------------------------------
matplotlib.backends.backend_qt4agg._BackendQT4Agg(_BackendQT5Agg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt5agg.py----------------------------------------
A:matplotlib.backends.backend_qt5agg.painter->backend_qt5.QtGui.QPainter(self)
A:matplotlib.backends.backend_qt5agg.(l, b, r, t)->map(int, bbox.extents)
A:matplotlib.backends.backend_qt5agg.reg->self.copy_from_bbox(bbox)
A:matplotlib.backends.backend_qt5agg.buf->self.copy_from_bbox(bbox).to_string_argb()
A:matplotlib.backends.backend_qt5agg.qimage->backend_qt5.QtGui.QImage(buf, w, h, QtGui.QImage.Format_ARGB32)
A:matplotlib.backends.backend_qt5agg.origin->backend_qt5.QtCore.QPoint(l, self.renderer.height - t)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg(self,figure)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.__init__(self,figure)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.blit(self,bbox=None)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.blitbox(self)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.paintEvent(self,e)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.print_figure(self,*args,**kwargs)
matplotlib.backends.backend_qt5agg.FigureCanvasQTAggBase(FigureCanvasQTAgg)
matplotlib.backends.backend_qt5agg._BackendQT5Agg(_BackendQT5)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt5cairo.py----------------------------------------
A:matplotlib.backends.backend_qt5cairo.self._renderer->RendererCairo(self.figure.dpi)
A:matplotlib.backends.backend_qt5cairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_qt5cairo.buf->self._renderer.gc.ctx.get_target().get_data()
A:matplotlib.backends.backend_qt5cairo.qimage->backend_qt5.QtGui.QImage(buf, width, height, QtGui.QImage.Format_ARGB32_Premultiplied)
A:matplotlib.backends.backend_qt5cairo.painter->backend_qt5.QtGui.QPainter(self)
matplotlib.backends.backend_qt5cairo.FigureCanvasQTCairo(self,figure)
matplotlib.backends.backend_qt5cairo.FigureCanvasQTCairo.__init__(self,figure)
matplotlib.backends.backend_qt5cairo.FigureCanvasQTCairo.draw(self)
matplotlib.backends.backend_qt5cairo.FigureCanvasQTCairo.paintEvent(self,event)
matplotlib.backends.backend_qt5cairo._BackendQT5Cairo(_BackendQT5)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtk.py----------------------------------------
A:matplotlib.backends.backend_gtk._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_gtk.flags->int(toolfig.bbox.width).flags()
A:matplotlib.backends.backend_gtk.self._timer->gobject.timeout_add(self._interval, self._on_timer)
A:matplotlib.backends.backend_gtk.current_time->event.get_time()
A:matplotlib.backends.backend_gtk.last_time->self.last_downclick.get(event.button, 0)
A:matplotlib.backends.backend_gtk.dblclick_time->gtk.settings_get_for_screen(gdk.screen_get_default()).get_property('gtk-double-click-time')
A:matplotlib.backends.backend_gtk.key->'{0}+{1}'.format(prefix, key)
A:matplotlib.backends.backend_gtk.(x, y, state)->event.window.get_pointer()
A:matplotlib.backends.backend_gtk.self._idle_draw_id->gobject.idle_add(idle_draw)
A:matplotlib.backends.backend_gtk.self._renderer->RendererGDK(self, self.figure.dpi)
A:matplotlib.backends.backend_gtk.self._pixmap_width->max(int(self._pixmap_width * 1.1), width)
A:matplotlib.backends.backend_gtk.self._pixmap_height->max(int(self._pixmap_height * 1.1), height)
A:matplotlib.backends.backend_gtk.self._pixmap->gdk.Pixmap(self.window, self._pixmap_width, self._pixmap_height)
A:matplotlib.backends.backend_gtk.filetypes->matplotlib.backend_bases.FigureCanvasBase.filetypes.copy()
A:matplotlib.backends.backend_gtk.(width, height)->self.get_width_height()
A:matplotlib.backends.backend_gtk.pixmap->gdk.Pixmap(self.window, width, height)
A:matplotlib.backends.backend_gtk.pixbuf->gdk.Pixbuf(gdk.COLORSPACE_RGB, 0, 8, width, height)
A:matplotlib.backends.backend_gtk.options['quality']->str(options['quality'])
A:matplotlib.backends.backend_gtk.self.window->gtk.Window()
A:matplotlib.backends.backend_gtk.self.vbox->gtk.VBox()
A:matplotlib.backends.backend_gtk.self.toolbar->self._get_toolbar(canvas)
A:matplotlib.backends.backend_gtk.w->int(toolfig.bbox.width)
A:matplotlib.backends.backend_gtk.h->int(toolfig.bbox.height)
A:matplotlib.backends.backend_gtk.(tb_w, tb_h)->self.toolbar.size_request()
A:matplotlib.backends.backend_gtk.toolbar->NavigationToolbar2GTK(canvas, self.window)
A:matplotlib.backends.backend_gtk.gc->drawable.new_gc()
A:matplotlib.backends.backend_gtk.basedir->os.path.join(rcParams['datapath'], 'images')
A:matplotlib.backends.backend_gtk.self.tooltips->gtk.Tooltips()
A:matplotlib.backends.backend_gtk.fname->os.path.join(basedir, image_file + '.png')
A:matplotlib.backends.backend_gtk.image->gtk.Image()
A:matplotlib.backends.backend_gtk.tbutton->gtk.ToolButton(image, text)
A:matplotlib.backends.backend_gtk.toolitem->gtk.ToolItem()
A:matplotlib.backends.backend_gtk.self.message->gtk.Label()
A:matplotlib.backends.backend_gtk.fc->FileChooserDialog(title='Save the figure', parent=self.win, path=os.path.expanduser(rcParams['savefig.directory']), filetypes=self.canvas.get_supported_filetypes(), default_filetype=self.canvas.get_default_filetype())
A:matplotlib.backends.backend_gtk.chooser->self.get_filechooser()
A:matplotlib.backends.backend_gtk.(fname, format)->self.get_filechooser().get_filename_from_user()
A:matplotlib.backends.backend_gtk.startpath->os.path.expanduser(rcParams['savefig.directory'])
A:matplotlib.backends.backend_gtk.rcParams['savefig.directory']->os.path.dirname(six.text_type(fname))
A:matplotlib.backends.backend_gtk.toolfig->Figure(figsize=(6, 3))
A:matplotlib.backends.backend_gtk.canvas->self._get_canvas(toolfig)
A:matplotlib.backends.backend_gtk.tool->SubplotTool(self.canvas.figure, toolfig)
A:matplotlib.backends.backend_gtk.window->gtk.Window()
A:matplotlib.backends.backend_gtk.vbox->gtk.VBox()
A:matplotlib.backends.backend_gtk.hbox->gtk.HBox(spacing=10)
A:matplotlib.backends.backend_gtk.liststore->gtk.ListStore(gobject.TYPE_STRING)
A:matplotlib.backends.backend_gtk.cbox->self.wtree.get_widget('combobox_markers')
A:matplotlib.backends.backend_gtk.cell->gtk.CellRendererText()
A:matplotlib.backends.backend_gtk.self.sorted_filetypes->sorted(six.iteritems(filetypes))
A:matplotlib.backends.backend_gtk.(head, filename)->os.path.split(self.get_filename())
A:matplotlib.backends.backend_gtk.(root, ext)->os.path.splitext(filename)
A:matplotlib.backends.backend_gtk.filename->self.get_filename()
A:matplotlib.backends.backend_gtk.datadir->matplotlib.get_data_path()
A:matplotlib.backends.backend_gtk.gladefile->os.path.join(datadir, 'lineprops.glade')
A:matplotlib.backends.backend_gtk.self.wtree->gtk.glade.XML(gladefile, 'dialog_lineprops')
A:matplotlib.backends.backend_gtk.self.dlg->self.wtree.get_widget('dialog_lineprops')
A:matplotlib.backends.backend_gtk.self._lastcnt->len(self.lines)
A:matplotlib.backends.backend_gtk.ind->self.cbox_markers.get_active()
A:matplotlib.backends.backend_gtk.line->self.get_active_line()
A:matplotlib.backends.backend_gtk.ls->self.get_active_line().get_linestyle()
A:matplotlib.backends.backend_gtk.marker->self.get_active_line().get_marker()
A:matplotlib.backends.backend_gtk.button->self.wtree.get_widget('colorbutton_markerface')
A:matplotlib.backends.backend_gtk.color->gtk.gdk.Color(*[int(val * 65535) for val in rgba[:3]])
A:matplotlib.backends.backend_gtk.rgba->matplotlib.colors.to_rgba(line.get_markerfacecolor())
A:matplotlib.backends.backend_gtk.window_icon->os.path.join(rcParams['datapath'], 'images', icon_filename)
A:matplotlib.backends.backend_gtk.parent->parent.get_toplevel().get_toplevel()
A:matplotlib.backends.backend_gtk.msg->','.join(map(str, msg))
A:matplotlib.backends.backend_gtk.dialog->gtk.MessageDialog(parent=parent, type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_OK, message_format=msg)
matplotlib.backends.backend_gtk.DialogLineprops(self,lines)
matplotlib.backends.backend_gtk.DialogLineprops.__init__(self,lines)
matplotlib.backends.backend_gtk.DialogLineprops._update(self)
matplotlib.backends.backend_gtk.DialogLineprops.get_active_line(self)
matplotlib.backends.backend_gtk.DialogLineprops.get_active_linestyle(self)
matplotlib.backends.backend_gtk.DialogLineprops.get_active_marker(self)
matplotlib.backends.backend_gtk.DialogLineprops.on_colorbutton_linestyle_color_set(self,button)
matplotlib.backends.backend_gtk.DialogLineprops.on_colorbutton_markerface_color_set(self,button)
matplotlib.backends.backend_gtk.DialogLineprops.on_combobox_lineprops_changed(self,item)
matplotlib.backends.backend_gtk.DialogLineprops.on_combobox_linestyle_changed(self,item)
matplotlib.backends.backend_gtk.DialogLineprops.on_combobox_marker_changed(self,item)
matplotlib.backends.backend_gtk.DialogLineprops.on_dialog_lineprops_cancelbutton_clicked(self,button)
matplotlib.backends.backend_gtk.DialogLineprops.on_dialog_lineprops_okbutton_clicked(self,button)
matplotlib.backends.backend_gtk.DialogLineprops.show(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK(self,figure)
matplotlib.backends.backend_gtk.FigureCanvasGTK.__init__(self,figure)
matplotlib.backends.backend_gtk.FigureCanvasGTK._get_key(self,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK._pixmap_prepare(self,width,height)
matplotlib.backends.backend_gtk.FigureCanvasGTK._print_image(self,filename,format,*args,**kwargs)
matplotlib.backends.backend_gtk.FigureCanvasGTK._render_figure(self,pixmap,width,height)
matplotlib.backends.backend_gtk.FigureCanvasGTK._renderer_init(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK.button_press_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.button_release_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.configure_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.destroy(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK.draw(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK.draw_idle(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK.enter_notify_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.expose_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.flush_events(self)
matplotlib.backends.backend_gtk.FigureCanvasGTK.key_press_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.key_release_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.leave_notify_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.motion_notify_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureCanvasGTK.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_gtk.FigureCanvasGTK.print_jpeg(self,filename,*args,**kwargs)
matplotlib.backends.backend_gtk.FigureCanvasGTK.print_png(self,filename,*args,**kwargs)
matplotlib.backends.backend_gtk.FigureCanvasGTK.scroll_event(self,widget,event)
matplotlib.backends.backend_gtk.FigureManagerGTK(self,canvas,num)
matplotlib.backends.backend_gtk.FigureManagerGTK.__init__(self,canvas,num)
matplotlib.backends.backend_gtk.FigureManagerGTK._get_toolbar(self,canvas)
matplotlib.backends.backend_gtk.FigureManagerGTK.destroy(self,*args)
matplotlib.backends.backend_gtk.FigureManagerGTK.full_screen_toggle(self)
matplotlib.backends.backend_gtk.FigureManagerGTK.get_window_title(self)
matplotlib.backends.backend_gtk.FigureManagerGTK.resize(self,width,height)
matplotlib.backends.backend_gtk.FigureManagerGTK.set_window_title(self,title)
matplotlib.backends.backend_gtk.FigureManagerGTK.show(self)
matplotlib.backends.backend_gtk.FileChooserDialog(self,title='Savefile',parent=None,action=gtk.FILE_CHOOSER_ACTION_SAVE,buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_SAVE,gtk.RESPONSE_OK),path=None,filetypes=[],default_filetype=None)
matplotlib.backends.backend_gtk.FileChooserDialog.__init__(self,title='Savefile',parent=None,action=gtk.FILE_CHOOSER_ACTION_SAVE,buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_SAVE,gtk.RESPONSE_OK),path=None,filetypes=[],default_filetype=None)
matplotlib.backends.backend_gtk.FileChooserDialog.get_filename_from_user(self)
matplotlib.backends.backend_gtk.GTK_WIDGET_DRAWABLE(w)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK(self,canvas,window)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.__init__(self,canvas,window)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK._get_canvas(self,fig)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK._init_toolbar(self)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK._init_toolbar2_4(self)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.configure_subplots(self,button)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.get_filechooser(self)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.release(self,event)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.save_figure(self,*args)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.set_cursor(self,cursor)
matplotlib.backends.backend_gtk.NavigationToolbar2GTK.set_message(self,s)
matplotlib.backends.backend_gtk.TimerGTK(TimerBase)
matplotlib.backends.backend_gtk.TimerGTK._on_timer(self)
matplotlib.backends.backend_gtk.TimerGTK._timer_set_interval(self)
matplotlib.backends.backend_gtk.TimerGTK._timer_start(self)
matplotlib.backends.backend_gtk.TimerGTK._timer_stop(self)
matplotlib.backends.backend_gtk._BackendGTK(_Backend)
matplotlib.backends.backend_gtk._BackendGTK.mainloop()
matplotlib.backends.backend_gtk._BackendGTK.trigger_manager_draw(manager)
matplotlib.backends.backend_gtk.error_msg_gtk(msg,parent=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_svg.py----------------------------------------
A:matplotlib.backends.backend_svg._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_svg.s->s.replace('>', '&gt;').replace('>', '&gt;')
A:matplotlib.backends.backend_svg._escape_xml_comment->re.compile('-(?=-)')
A:matplotlib.backends.backend_svg.data->''.join(self.__data)
A:matplotlib.backends.backend_svg.tag->self.__tags.pop()
A:matplotlib.backends.backend_svg.attrib->sorted(six.iteritems(attrib))
A:matplotlib.backends.backend_svg.k->escape_attrib(k)
A:matplotlib.backends.backend_svg.v->escape_attrib(v)
A:matplotlib.backends.backend_svg.output->io.StringIO()
A:matplotlib.backends.backend_svg.value->value.to_values().to_values()
A:matplotlib.backends.backend_svg.fontd->maxdict(50)
A:matplotlib.backends.backend_svg.self.writer->XMLWriter(svgwriter)
A:matplotlib.backends.backend_svg.self._clipd->OrderedDict()
A:matplotlib.backends.backend_svg.self._hatchd->OrderedDict()
A:matplotlib.backends.backend_svg.self._fonts->OrderedDict()
A:matplotlib.backends.backend_svg.self.mathtext_parser->MathTextParser('SVG')
A:matplotlib.backends.backend_svg.self._glyph_map->dict()
A:matplotlib.backends.backend_svg.str_height->short_float_fmt(height)
A:matplotlib.backends.backend_svg.str_width->short_float_fmt(width)
A:matplotlib.backends.backend_svg.self._start_id->self.writer.start('svg', width='%spt' % str_width, height='%spt' % str_height, viewBox='0 0 %s %s' % (str_width, str_height), xmlns='http://www.w3.org/2000/svg', version='1.1', attrib={'xmlns:xlink': 'http://www.w3.org/1999/xlink'})
A:matplotlib.backends.backend_svg.default_style->generate_css({'stroke-linejoin': 'round', 'stroke-linecap': 'butt'})
A:matplotlib.backends.backend_svg.content->content.encode('utf8').encode('utf8')
A:matplotlib.backends.backend_svg.salt->salt.encode('utf8').encode('utf8')
A:matplotlib.backends.backend_svg.m->hashlib.md5()
A:matplotlib.backends.backend_svg.fname->findfont(prop)
A:matplotlib.backends.backend_svg.font->self._get_font(prop)
A:matplotlib.backends.backend_svg.size->prop.get_size_in_points()
A:matplotlib.backends.backend_svg.rgbFace->tuple(rgbFace)
A:matplotlib.backends.backend_svg.edge->tuple(edge)
A:matplotlib.backends.backend_svg.oid->gc.get_gid()
A:matplotlib.backends.backend_svg.path_data->self._convert_path(path, simplify=False)
A:matplotlib.backends.backend_svg.fill->rgb2hex(face)
A:matplotlib.backends.backend_svg.forced_alpha->gc.get_forced_alpha()
A:matplotlib.backends.backend_svg.attrib['fill-opacity']->short_float_fmt(rgbFace[3])
A:matplotlib.backends.backend_svg.attrib['fill']->rgb2hex(rgbFace)
A:matplotlib.backends.backend_svg.attrib['opacity']->short_float_fmt(alpha)
A:matplotlib.backends.backend_svg.(offset, seq)->gc.get_dashes()
A:matplotlib.backends.backend_svg.attrib['stroke-dasharray']->','.join([short_float_fmt(val) for val in seq])
A:matplotlib.backends.backend_svg.attrib['stroke-dashoffset']->short_float_fmt(float(offset))
A:matplotlib.backends.backend_svg.linewidth->gc.get_linewidth()
A:matplotlib.backends.backend_svg.rgb->gc.get_rgb()
A:matplotlib.backends.backend_svg.attrib['stroke']->rgb2hex(rgb)
A:matplotlib.backends.backend_svg.attrib['stroke-opacity']->short_float_fmt(rgb[3])
A:matplotlib.backends.backend_svg.attrib['stroke-width']->short_float_fmt(linewidth)
A:matplotlib.backends.backend_svg.attrib['stroke-linejoin']->gc.get_joinstyle()
A:matplotlib.backends.backend_svg.cliprect->gc.get_clip_rectangle()
A:matplotlib.backends.backend_svg.(clippath, clippath_trans)->gc.get_clip_path()
A:matplotlib.backends.backend_svg.clippath_trans->self._make_flip_transform(clippath_trans)
A:matplotlib.backends.backend_svg.clip->self._clipd.get(dictkey)
A:matplotlib.backends.backend_svg.sfnt->self._get_font(prop).get_sfnt()
A:matplotlib.backends.backend_svg.glyph->self._get_font(prop).load_char(char, flags=LOAD_NO_HINTING)
A:matplotlib.backends.backend_svg.(verts, codes)->self._get_font(prop).get_path()
A:matplotlib.backends.backend_svg.path->Path(verts, codes)
A:matplotlib.backends.backend_svg.trans_and_flip->self._make_flip_transform(trans)
A:matplotlib.backends.backend_svg.attrib['style']->generate_css(style)
A:matplotlib.backends.backend_svg.clipid->self._get_clip(gc)
A:matplotlib.backends.backend_svg.style->generate_css({'font-size': short_float_fmt(fontsize) + 'px', 'font-family': font.family_name, 'font-style': font.style_name.lower(), 'font-weight': font.style_name.lower()})
A:matplotlib.backends.backend_svg.attrib['x']->short_float_fmt(ax)
A:matplotlib.backends.backend_svg.attrib['y']->short_float_fmt(ay)
A:matplotlib.backends.backend_svg.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_svg.transform->mtext.get_transform()
A:matplotlib.backends.backend_svg.d->self._convert_path(path, transform, simplify=False)
A:matplotlib.backends.backend_svg.url->gc.get_url()
A:matplotlib.backends.backend_svg.tpoints->self._make_flip_transform(trans).transform(points)
A:matplotlib.backends.backend_svg.bytesio->io.BytesIO()
A:matplotlib.backends.backend_svg.alpha->gc.get_alpha()
A:matplotlib.backends.backend_svg.attrib['transform']->generate_transform([('translate', (x, y)), ('rotate', (-angle,))])
A:matplotlib.backends.backend_svg.color->rgb2hex(gc.get_rgb())
A:matplotlib.backends.backend_svg.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_svg.style['opacity']->short_float_fmt(gc.get_alpha())
A:matplotlib.backends.backend_svg._glyphs->text2path.get_glyphs_mathtext(prop, s, glyph_map=glyph_map, return_new_glyphs_only=True)
A:matplotlib.backends.backend_svg.char_id->self._adjust_char_id(char_id)
A:matplotlib.backends.backend_svg.fontstyle->prop.get_style()
A:matplotlib.backends.backend_svg.style['font-family']->six.text_type(fontfamily)
A:matplotlib.backends.backend_svg.style['font-style']->prop.get_style().lower()
A:matplotlib.backends.backend_svg.style['font-weight']->six.text_type(prop.get_weight()).lower()
A:matplotlib.backends.backend_svg.(ax, ay)->mtext.get_transform().transform_point(mtext.get_position())
A:matplotlib.backends.backend_svg.angle_rad->numpy.deg2rad(angle)
A:matplotlib.backends.backend_svg.dir_vert->numpy.array([np.sin(angle_rad), np.cos(angle_rad)])
A:matplotlib.backends.backend_svg.v_offset->numpy.dot(dir_vert, [x - ax, y - ay])
A:matplotlib.backends.backend_svg.fontset->self._fonts.setdefault(font.fname, set())
A:matplotlib.backends.backend_svg.(width, height, descent, svg_elements, used_characters)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_svg.spans->OrderedDict()
A:matplotlib.backends.backend_svg.ys->' '.join((six.text_type(c[1]) for c in chars))
A:matplotlib.backends.backend_svg.filename->getattr(fh, 'name', '')
A:matplotlib.backends.backend_svg.fh->codecs.getwriter('utf-8')(fh)
A:matplotlib.backends.backend_svg.result->self._print_svg(filename, fh, **kwargs)
A:matplotlib.backends.backend_svg.fh.stream->io.BytesIO()
A:matplotlib.backends.backend_svg.image_dpi->kwargs.pop('dpi', 72)
A:matplotlib.backends.backend_svg.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_svg._bbox_inches_restore->kwargs.pop('bbox_inches_restore', None)
A:matplotlib.backends.backend_svg.renderer->MixedModeRenderer(self.figure, width, height, image_dpi, RendererSVG(w, h, fh, filename, image_dpi), bbox_inches_restore=_bbox_inches_restore)
matplotlib.backends.backend_svg.FigureCanvasSVG(FigureCanvasBase)
matplotlib.backends.backend_svg.FigureCanvasSVG._print_svg(self,filename,fh,**kwargs)
matplotlib.backends.backend_svg.FigureCanvasSVG.get_default_filetype(self)
matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg(self,filename,*args,**kwargs)
matplotlib.backends.backend_svg.FigureCanvasSVG.print_svgz(self,filename,*args,**kwargs)
matplotlib.backends.backend_svg.FigureManagerSVG(FigureManagerBase)
matplotlib.backends.backend_svg.RendererSVG(self,width,height,svgwriter,basename=None,image_dpi=72)
matplotlib.backends.backend_svg.RendererSVG.__init__(self,width,height,svgwriter,basename=None,image_dpi=72)
matplotlib.backends.backend_svg.RendererSVG._adjust_char_id(self,char_id)
matplotlib.backends.backend_svg.RendererSVG._convert_path(self,path,transform=None,clip=None,simplify=None,sketch=None)
matplotlib.backends.backend_svg.RendererSVG._draw_text_as_path(self,gc,x,y,s,prop,angle,ismath,mtext=None)
matplotlib.backends.backend_svg.RendererSVG._draw_text_as_text(self,gc,x,y,s,prop,angle,ismath,mtext=None)
matplotlib.backends.backend_svg.RendererSVG._get_clip(self,gc)
matplotlib.backends.backend_svg.RendererSVG._get_font(self,prop)
matplotlib.backends.backend_svg.RendererSVG._get_hatch(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._get_style(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._get_style_dict(self,gc,rgbFace)
matplotlib.backends.backend_svg.RendererSVG._make_flip_transform(self,transform)
matplotlib.backends.backend_svg.RendererSVG._make_id(self,type,content)
matplotlib.backends.backend_svg.RendererSVG._write_clips(self)
matplotlib.backends.backend_svg.RendererSVG._write_default_style(self)
matplotlib.backends.backend_svg.RendererSVG._write_hatches(self)
matplotlib.backends.backend_svg.RendererSVG._write_svgfonts(self)
matplotlib.backends.backend_svg.RendererSVG.close_group(self,s)
matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_svg.RendererSVG.draw_gouraud_triangles(self,gc,triangles_array,colors_array,transform)
matplotlib.backends.backend_svg.RendererSVG.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_svg.RendererSVG.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_svg.RendererSVG.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_svg.RendererSVG.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offsetTrans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_svg.RendererSVG.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backends.backend_svg.RendererSVG.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_svg.RendererSVG.finalize(self)
matplotlib.backends.backend_svg.RendererSVG.flipy(self)
matplotlib.backends.backend_svg.RendererSVG.get_canvas_width_height(self)
matplotlib.backends.backend_svg.RendererSVG.get_image_magnification(self)
matplotlib.backends.backend_svg.RendererSVG.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_svg.RendererSVG.open_group(self,s,gid=None)
matplotlib.backends.backend_svg.RendererSVG.option_image_nocomposite(self)
matplotlib.backends.backend_svg.RendererSVG.option_scale_image(self)
matplotlib.backends.backend_svg.XMLWriter(self,file)
matplotlib.backends.backend_svg.XMLWriter.__flush(self,indent=True)
matplotlib.backends.backend_svg.XMLWriter.__init__(self,file)
matplotlib.backends.backend_svg.XMLWriter.close(self,id)
matplotlib.backends.backend_svg.XMLWriter.comment(self,comment)
matplotlib.backends.backend_svg.XMLWriter.data(self,text)
matplotlib.backends.backend_svg.XMLWriter.element(self,tag,text=None,attrib={},**extra)
matplotlib.backends.backend_svg.XMLWriter.end(self,tag=None,indent=True)
matplotlib.backends.backend_svg.XMLWriter.flush(self)
matplotlib.backends.backend_svg.XMLWriter.start(self,tag,attrib={},**extra)
matplotlib.backends.backend_svg._BackendSVG(_Backend)
matplotlib.backends.backend_svg.escape_attrib(s)
matplotlib.backends.backend_svg.escape_cdata(s)
matplotlib.backends.backend_svg.escape_comment(s)
matplotlib.backends.backend_svg.generate_css(attrib={})
matplotlib.backends.backend_svg.generate_transform(transform_list=[])
matplotlib.backends.backend_svg.short_float_fmt(x)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/wx_compat.py----------------------------------------
A:matplotlib.backends.wx_compat.wx_version->LooseVersion(wx.VERSION_STRING)
A:matplotlib.backends.wx_compat.kwargs->dict(label=text, bitmap=bmp, bmpDisabled=wx.NullBitmap, shortHelpString=text, longHelpString=tooltip_text, kind=kind)
matplotlib.backends.wx_compat._AddTool(parent,wx_ids,text,bmp,tooltip_text)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt5.py----------------------------------------
A:matplotlib.backends.backend_qt5.app->qt_compat.QtWidgets.QApplication.instance()
A:matplotlib.backends.backend_qt5.is_x11_build->hasattr(QtGui, 'QX11Info')
A:matplotlib.backends.backend_qt5.display->os.environ.get('DISPLAY')
A:matplotlib.backends.backend_qt5.qApp->qt_compat.QtWidgets.QApplication([b'matplotlib'])
A:matplotlib.backends.backend_qt5.next_coop_init->next((cls for cls in mro[mro.index(QtWidgets.QWidget) + 1:] if cls.__module__.split('.')[0] not in ['PyQt4', 'sip', 'PySide', 'PySide2', 'Shiboken']))
A:matplotlib.backends.backend_qt5.self._timer->qt_compat.QtCore.QTimer()
A:matplotlib.backends.backend_qt5.palette->qt_compat.QtGui.QPalette(QtCore.Qt.white)
A:matplotlib.backends.backend_qt5.event->qt_compat.QtGui.QResizeEvent(self.size(), self.size())
A:matplotlib.backends.backend_qt5.(w, h)->self.get_width_height()
A:matplotlib.backends.backend_qt5.x->qt_compat.QtGui.QResizeEvent(self.size(), self.size()).x()
A:matplotlib.backends.backend_qt5.(x, y)->self.mouseEventCoords(event)
A:matplotlib.backends.backend_qt5.button->qt_compat.QtWidgets.QToolButton(self)
A:matplotlib.backends.backend_qt5.steps->qt_compat.QtGui.QResizeEvent(self.size(), self.size()).pixelDelta().y()
A:matplotlib.backends.backend_qt5.key->key.lower().lower()
A:matplotlib.backends.backend_qt5.self._keyautorepeat->bool(val)
A:matplotlib.backends.backend_qt5.event_key->qt_compat.QtGui.QResizeEvent(self.size(), self.size()).key()
A:matplotlib.backends.backend_qt5.event_mods->int(event.modifiers())
A:matplotlib.backends.backend_qt5.self._event_loopevent_loop->qt_compat.QtCore.QEventLoop()
A:matplotlib.backends.backend_qt5.timer->qt_compat.QtCore.QTimer.singleShot(timeout * 1000, event_loop.quit)
A:matplotlib.backends.backend_qt5.pen->qt_compat.QtGui.QPen(QtCore.Qt.black, 1 / self._dpi_ratio, QtCore.Qt.DotLine)
A:matplotlib.backends.backend_qt5.closing->qt_compat.QtCore.Signal()
A:matplotlib.backends.backend_qt5.self.window->MainWindow()
A:matplotlib.backends.backend_qt5.image->os.path.join(matplotlib.rcParams['datapath'], 'images', 'matplotlib.png')
A:matplotlib.backends.backend_qt5.self.toolmanager->self._get_toolmanager()
A:matplotlib.backends.backend_qt5.self.toolbar->self._get_toolbar(self.canvas, self.window)
A:matplotlib.backends.backend_qt5.self.statusbar->StatusbarQt(self.window, self.toolmanager)
A:matplotlib.backends.backend_qt5.statusbar_label->qt_compat.QtWidgets.QLabel()
A:matplotlib.backends.backend_qt5.tbs_height->self.toolbar.sizeHint().height()
A:matplotlib.backends.backend_qt5.cs->canvas.sizeHint()
A:matplotlib.backends.backend_qt5.sbs->self.window.statusBar().sizeHint()
A:matplotlib.backends.backend_qt5.toolbar->ToolbarQt(self.toolmanager, self.window)
A:matplotlib.backends.backend_qt5.toolmanager->ToolManager(self.canvas.figure)
A:matplotlib.backends.backend_qt5.message->qt_compat.QtCore.Signal(str)
A:matplotlib.backends.backend_qt5.name->name.replace('.png', '_large.png').replace('.png', '_large.png')
A:matplotlib.backends.backend_qt5.pm->qt_compat.QtGui.QPixmap(name)
A:matplotlib.backends.backend_qt5.self.basedir->os.path.join(matplotlib.rcParams['datapath'], 'images')
A:matplotlib.backends.backend_qt5.a->self.addAction(self._icon('qt4_editor_options.png'), 'Customize', self.edit_parameters)
A:matplotlib.backends.backend_qt5.self.locLabel->qt_compat.QtWidgets.QLabel('', self)
A:matplotlib.backends.backend_qt5.labelAction->self.addWidget(self.locLabel)
A:matplotlib.backends.backend_qt5.size->qt_compat.QtWidgets.QPlainTextEdit().maximumSize()
A:matplotlib.backends.backend_qt5.allaxes->self.canvas.figure.get_axes()
A:matplotlib.backends.backend_qt5.(item, ok)->qt_compat.QtWidgets.QInputDialog.getItem(self.parent, 'Customize', 'Select axes:', titles, 0, False)
A:matplotlib.backends.backend_qt5.dia->SubplotToolQt(self.figure, parent)
A:matplotlib.backends.backend_qt5.filetypes->self.canvas.get_supported_filetypes_grouped()
A:matplotlib.backends.backend_qt5.sorted_filetypes->sorted(six.iteritems(filetypes))
A:matplotlib.backends.backend_qt5.default_filetype->self.canvas.get_default_filetype()
A:matplotlib.backends.backend_qt5.startpath->os.path.expanduser(matplotlib.rcParams['savefig.directory'])
A:matplotlib.backends.backend_qt5.start->os.path.join(startpath, self.canvas.get_default_filename())
A:matplotlib.backends.backend_qt5.exts_list->' '.join(['*.%s' % ext for ext in exts])
A:matplotlib.backends.backend_qt5.filters->';;'.join(filters)
A:matplotlib.backends.backend_qt5.(fname, filter)->_getSaveFileName(parent, 'Choose a filename to save to', start, filters, selectedFilter)
A:matplotlib.backends.backend_qt5.matplotlib.rcParams['savefig.directory']->os.path.dirname(six.text_type(fname))
A:matplotlib.backends.backend_qt5.dialog->qt_compat.QtWidgets.QDialog()
A:matplotlib.backends.backend_qt5.layout->qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.backend_qt5.text->qt_compat.QtWidgets.QPlainTextEdit()
A:matplotlib.backends.backend_qt5.gr->self._groups.get(group, [])
A:matplotlib.backends.backend_qt5.sep->self.addSeparator()
A:matplotlib.backends.backend_qt5.widget->self.insertWidget(before, button)
A:matplotlib.backends.backend_qt5.msg->','.join(map(str, msg))
matplotlib.backends.backend_qt5.ConfigureSubplotsQt(backend_tools.ConfigureSubplotsBase)
matplotlib.backends.backend_qt5.ConfigureSubplotsQt.trigger(self,*args)
matplotlib.backends.backend_qt5.FigureCanvasQT(self,figure)
matplotlib.backends.backend_qt5.FigureCanvasQT.__init__(self,figure)
matplotlib.backends.backend_qt5.FigureCanvasQT._dpi_ratio(self)
matplotlib.backends.backend_qt5.FigureCanvasQT._draw_idle(self)
matplotlib.backends.backend_qt5.FigureCanvasQT._get_key(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT._update_dpi(self)
matplotlib.backends.backend_qt5.FigureCanvasQT._update_figure_dpi(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.draw(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.drawRectangle(self,rect)
matplotlib.backends.backend_qt5.FigureCanvasQT.draw_idle(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.enterEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.flush_events(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.get_width_height(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.keyAutoRepeat(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.keyAutoRepeat(self,val)
matplotlib.backends.backend_qt5.FigureCanvasQT.keyPressEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.keyReleaseEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.leaveEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.minumumSizeHint(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.mouseDoubleClickEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.mouseEventCoords(self,pos)
matplotlib.backends.backend_qt5.FigureCanvasQT.mouseMoveEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.mousePressEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.mouseReleaseEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_qt5.FigureCanvasQT.resizeEvent(self,event)
matplotlib.backends.backend_qt5.FigureCanvasQT.sizeHint(self)
matplotlib.backends.backend_qt5.FigureCanvasQT.start_event_loop(self,timeout=0)
matplotlib.backends.backend_qt5.FigureCanvasQT.stop_event_loop(self,event=None)
matplotlib.backends.backend_qt5.FigureManagerQT(self,canvas,num)
matplotlib.backends.backend_qt5.FigureManagerQT.__init__(self,canvas,num)
matplotlib.backends.backend_qt5.FigureManagerQT._get_toolbar(self,canvas,parent)
matplotlib.backends.backend_qt5.FigureManagerQT._get_toolmanager(self)
matplotlib.backends.backend_qt5.FigureManagerQT._widgetclosed(self)
matplotlib.backends.backend_qt5.FigureManagerQT.destroy(self,*args)
matplotlib.backends.backend_qt5.FigureManagerQT.full_screen_toggle(self)
matplotlib.backends.backend_qt5.FigureManagerQT.get_window_title(self)
matplotlib.backends.backend_qt5.FigureManagerQT.resize(self,width,height)
matplotlib.backends.backend_qt5.FigureManagerQT.set_window_title(self,title)
matplotlib.backends.backend_qt5.FigureManagerQT.show(self)
matplotlib.backends.backend_qt5.MainWindow(QtWidgets.QMainWindow)
matplotlib.backends.backend_qt5.MainWindow.closeEvent(self,event)
matplotlib.backends.backend_qt5.NavigationToolbar2QT(self,canvas,parent,coordinates=True)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.__init__(self,canvas,parent,coordinates=True)
matplotlib.backends.backend_qt5.NavigationToolbar2QT._icon(self,name)
matplotlib.backends.backend_qt5.NavigationToolbar2QT._init_toolbar(self)
matplotlib.backends.backend_qt5.NavigationToolbar2QT._update_buttons_checked(self)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.configure_subplots(self)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.edit_parameters(self)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.pan(self,*args)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.remove_rubberband(self)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.save_figure(self,*args)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.set_cursor(self,cursor)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.set_message(self,s)
matplotlib.backends.backend_qt5.NavigationToolbar2QT.zoom(self,*args)
matplotlib.backends.backend_qt5.RubberbandQt(backend_tools.RubberbandBase)
matplotlib.backends.backend_qt5.RubberbandQt.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends.backend_qt5.RubberbandQt.remove_rubberband(self)
matplotlib.backends.backend_qt5.SaveFigureQt(backend_tools.SaveFigureBase)
matplotlib.backends.backend_qt5.SaveFigureQt.trigger(self,*args)
matplotlib.backends.backend_qt5.SetCursorQt(backend_tools.SetCursorBase)
matplotlib.backends.backend_qt5.SetCursorQt.set_cursor(self,cursor)
matplotlib.backends.backend_qt5.StatusbarQt(self,window,*args,**kwargs)
matplotlib.backends.backend_qt5.StatusbarQt.__init__(self,window,*args,**kwargs)
matplotlib.backends.backend_qt5.StatusbarQt.set_message(self,s)
matplotlib.backends.backend_qt5.SubplotToolQt(self,targetfig,parent)
matplotlib.backends.backend_qt5.SubplotToolQt.__init__(self,targetfig,parent)
matplotlib.backends.backend_qt5.SubplotToolQt._export_values(self)
matplotlib.backends.backend_qt5.SubplotToolQt._on_value_changed(self)
matplotlib.backends.backend_qt5.SubplotToolQt._reset(self)
matplotlib.backends.backend_qt5.SubplotToolQt._tight_layout(self)
matplotlib.backends.backend_qt5.TimerQT(self,*args,**kwargs)
matplotlib.backends.backend_qt5.TimerQT.__init__(self,*args,**kwargs)
matplotlib.backends.backend_qt5.TimerQT._timer_set_interval(self)
matplotlib.backends.backend_qt5.TimerQT._timer_set_single_shot(self)
matplotlib.backends.backend_qt5.TimerQT._timer_start(self)
matplotlib.backends.backend_qt5.TimerQT._timer_stop(self)
matplotlib.backends.backend_qt5.ToolbarQt(self,toolmanager,parent)
matplotlib.backends.backend_qt5.ToolbarQt.__init__(self,toolmanager,parent)
matplotlib.backends.backend_qt5.ToolbarQt._add_to_group(self,group,name,button,position)
matplotlib.backends.backend_qt5.ToolbarQt._icon(self,name)
matplotlib.backends.backend_qt5.ToolbarQt._icon_extension(self)
matplotlib.backends.backend_qt5.ToolbarQt.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_qt5.ToolbarQt.remove_toolitem(self,name)
matplotlib.backends.backend_qt5.ToolbarQt.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_qt5._BackendQT5(_Backend)
matplotlib.backends.backend_qt5._BackendQT5.mainloop()
matplotlib.backends.backend_qt5._BackendQT5.trigger_manager_draw(manager)
matplotlib.backends.backend_qt5._allow_super_init(__init__)
matplotlib.backends.backend_qt5._create_qApp()
matplotlib.backends.backend_qt5.error_msg_qt(msg,parent=None)
matplotlib.backends.backend_qt5.exception_handler(type,value,tb)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtkcairo.py----------------------------------------
A:matplotlib.backends.backend_gtkcairo.self.gc.ctx->cairo.gtk.gdk_cairo_create(pixmap)
A:matplotlib.backends.backend_gtkcairo.filetypes->FigureCanvasGTK.filetypes.copy()
A:matplotlib.backends.backend_gtkcairo.self._renderer->RendererGTKCairo(self.figure.dpi)
A:matplotlib.backends.backend_gtkcairo.toolbar->NavigationToolbar2GTKCairo(canvas, self.window)
matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo(self,*args,**kwargs)
matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo.__init__(self,*args,**kwargs)
matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo._renderer_init(self)
matplotlib.backends.backend_gtkcairo.FigureManagerGTKCairo(FigureManagerGTK)
matplotlib.backends.backend_gtkcairo.FigureManagerGTKCairo._get_toolbar(self,canvas)
matplotlib.backends.backend_gtkcairo.NavigationToolbar2Cairo(NavigationToolbar2GTK)
matplotlib.backends.backend_gtkcairo.NavigationToolbar2Cairo._get_canvas(self,fig)
matplotlib.backends.backend_gtkcairo.RendererGTKCairo(backend_cairo.RendererCairo)
matplotlib.backends.backend_gtkcairo._BackendGTKCairo(_BackendGTK)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_wx.py----------------------------------------
A:matplotlib.backends.backend_wx.dialog->wx.MessageDialog(parent=parent, message=msg, caption='Matplotlib backend_wx error', style=wx.OK | wx.CENTRE)
A:matplotlib.backends.backend_wx.msg->'\n'.join(map(str, msg))
A:matplotlib.backends.backend_wx.self._timer->wx.Timer(self.parent, wx.NewId())
A:matplotlib.backends.backend_wx.self.width->wxc.BitmapFromBuffer(cols, rows, im.tostring()).GetWidth()
A:matplotlib.backends.backend_wx.self.height->wxc.BitmapFromBuffer(cols, rows, im.tostring()).GetHeight()
A:matplotlib.backends.backend_wx.s->self.strip_math(s)
A:matplotlib.backends.backend_wx.gc->RendererWx(self.canvas.bitmap, self.canvas.figure.dpi).new_gc()
A:matplotlib.backends.backend_wx.font->wx.Font(int(size + 0.5), wxFontname, self.fontangles[fontprop.get_style()], self.fontweights[fontprop.get_weight()], False, wxFacename)
A:matplotlib.backends.backend_wx.(w, h, descent, leading)->wx.GraphicsContext.Create(dc).GetFullTextExtent(s)
A:matplotlib.backends.backend_wx.new_bounds->RendererWx(self.canvas.bitmap, self.canvas.figure.dpi).new_gc().get_clip_rectangle()
A:matplotlib.backends.backend_wx.wxpath->self.convert_path(gfx_ctx, path, transform)
A:matplotlib.backends.backend_wx.bbox->RendererWx(self.canvas.bitmap, self.canvas.figure.dpi).new_gc().get_clip_rectangle()
A:matplotlib.backends.backend_wx.bitmap->wxc.BitmapFromBuffer(cols, rows, im.tostring())
A:matplotlib.backends.backend_wx.color->wxc.NamedColour(rubberBandColor)
A:matplotlib.backends.backend_wx.(w, h, d)->self.get_text_width_height_descent(s, prop, ismath)
A:matplotlib.backends.backend_wx.x->evt.GetX()
A:matplotlib.backends.backend_wx.y->int(y - h)
A:matplotlib.backends.backend_wx.rads->math.radians(angle)
A:matplotlib.backends.backend_wx.self.gc->GraphicsContextWx(self.bitmap, self)
A:matplotlib.backends.backend_wx.key->self._get_key(evt)
A:matplotlib.backends.backend_wx.fontname->fontprop.get_name()
A:matplotlib.backends.backend_wx.wxFontname->self.fontnames.get(fontname, wx.ROMAN)
A:matplotlib.backends.backend_wx.size->self.GetClientSize()
A:matplotlib.backends.backend_wx._cache->weakref.WeakKeyDictionary()
A:matplotlib.backends.backend_wx.(dc, gfx_ctx)->self._cache.get(bitmap, (None, None))
A:matplotlib.backends.backend_wx.dc->self.GetDC()
A:matplotlib.backends.backend_wx.gfx_ctx->wx.GraphicsContext.Create(dc)
A:matplotlib.backends.backend_wx.self._pen->wx.Pen('BLACK', 1, wx.SOLID)
A:matplotlib.backends.backend_wx.w->int(math.ceil(w))
A:matplotlib.backends.backend_wx.lw->int(self.renderer.points_to_pixels(self._linewidth))
A:matplotlib.backends.backend_wx.h->int(math.ceil(h))
A:matplotlib.backends.backend_wx.self.SetInitialSize->getattr(self, 'SetBestFittingSize', do_nothing)
A:matplotlib.backends.backend_wx.self.IsShownOnScreen->getattr(self, 'IsVisible', lambda *args: True)
A:matplotlib.backends.backend_wx.self.bitmap->wxc.EmptyBitmap(width, height)
A:matplotlib.backends.backend_wx.bmp_obj->wx.BitmapDataObject()
A:matplotlib.backends.backend_wx.open_success->wx.TheClipboard.Open()
A:matplotlib.backends.backend_wx.id->wx.NewId()
A:matplotlib.backends.backend_wx.timer->wx.Timer(self, id=id)
A:matplotlib.backends.backend_wx.self._event_loop->wxc.EventLoop()
A:matplotlib.backends.backend_wx.default_filetype->self.get_default_filetype()
A:matplotlib.backends.backend_wx.filetypes->matplotlib.backend_bases.FigureCanvasBase.filetypes.copy()
A:matplotlib.backends.backend_wx.sorted_filetypes->sorted(filetypes.items())
A:matplotlib.backends.backend_wx.ext_list->';'.join(['*.%s' % ext for ext in exts])
A:matplotlib.backends.backend_wx.wildcards->'|'.join(wildcards)
A:matplotlib.backends.backend_wx.drawDC->wx.PaintDC(self)
A:matplotlib.backends.backend_wx.img->self.bitmap.ConvertToImage()
A:matplotlib.backends.backend_wx.bmp->wx.Bitmap(bmpFilename)
A:matplotlib.backends.backend_wx.sz->self.GetParent().GetSizer()
A:matplotlib.backends.backend_wx.si->self.GetParent().GetSizer().GetItem(self)
A:matplotlib.backends.backend_wx.delta->evt.GetWheelDelta()
A:matplotlib.backends.backend_wx.rotation->evt.GetWheelRotation()
A:matplotlib.backends.backend_wx.rate->evt.GetLinesPerAction()
A:matplotlib.backends.backend_wx.self.renderer->RendererWx(self.bitmap, self.figure.dpi)
A:matplotlib.backends.backend_wx.width->int(math.ceil(width))
A:matplotlib.backends.backend_wx.height->int(math.ceil(height))
A:matplotlib.backends.backend_wx.renderer->RendererWx(self.canvas.bitmap, self.canvas.figure.dpi)
A:matplotlib.backends.backend_wx.jpeg_quality->kwargs.get('quality', rcParams['savefig.jpeg_quality'])
A:matplotlib.backends.backend_wx.image->image.ConvertToImage().ConvertToImage()
A:matplotlib.backends.backend_wx.pos->wx.Point(20, 20)
A:matplotlib.backends.backend_wx.statbar->StatusBarWx(self)
A:matplotlib.backends.backend_wx.self.canvas->self.get_canvas(fig)
A:matplotlib.backends.backend_wx.self.sizer->wx.BoxSizer(wx.VERTICAL)
A:matplotlib.backends.backend_wx.self.toolbar->self._get_toolbar(statbar)
A:matplotlib.backends.backend_wx.(tw, th)->self.toolbar.GetSizeTuple()
A:matplotlib.backends.backend_wx.(fw, fh)->self.canvas.GetSizeTuple()
A:matplotlib.backends.backend_wx.self.figmgr->FigureManagerWx(self.canvas, num, self)
A:matplotlib.backends.backend_wx.toolbar->NavigationToolbar2Wx(self.canvas)
A:matplotlib.backends.backend_wx.wxapp->wx.GetApp()
A:matplotlib.backends.backend_wx.self.tb->cls._frame_class(num, figure).GetToolBar()
A:matplotlib.backends.backend_wx._NTB_AXISMENU->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_AXISMENU_BUTTON->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_X_PAN_LEFT->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_X_PAN_RIGHT->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_X_ZOOMIN->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_X_ZOOMOUT->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_Y_PAN_UP->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_Y_PAN_DOWN->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_Y_ZOOMIN->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_Y_ZOOMOUT->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_SAVE->wx.NewId()
A:matplotlib.backends.backend_wx._NTB_CLOSE->wx.NewId()
A:matplotlib.backends.backend_wx.basedir->os.path.join(rcParams['datapath'], 'images')
A:matplotlib.backends.backend_wx.bmpFilename->os.path.normpath(os.path.join(basedir, filename))
A:matplotlib.backends.backend_wx.self._menu->wx.Menu()
A:matplotlib.backends.backend_wx.self._allId->wx.NewId()
A:matplotlib.backends.backend_wx.self._invertId->wx.NewId()
A:matplotlib.backends.backend_wx.(x, y)->self.GetPositionTuple()
A:matplotlib.backends.backend_wx.(w, h)->self.GetSizeTuple()
A:matplotlib.backends.backend_wx.current->self._menu.IsChecked(evt.GetId())
A:matplotlib.backends.backend_wx.menuId->wx.NewId()
A:matplotlib.backends.backend_wx.toolfig->Figure((6, 3))
A:matplotlib.backends.backend_wx.canvas->self.get_canvas(frame, toolfig)
A:matplotlib.backends.backend_wx.figmgr->cls._frame_class(num, figure).get_figure_manager()
A:matplotlib.backends.backend_wx.sizer->wx.BoxSizer(wx.VERTICAL)
A:matplotlib.backends.backend_wx.tool->SubplotTool(self.canvas.figure, toolfig)
A:matplotlib.backends.backend_wx.self._parent->self.canvas.GetParent()
A:matplotlib.backends.backend_wx.self.wx_ids[text]->wx.NewId()
A:matplotlib.backends.backend_wx.frame->cls._frame_class(num, figure)
A:matplotlib.backends.backend_wx.(filetypes, exts, filter_index)->self.canvas._get_imagesave_wildcards()
A:matplotlib.backends.backend_wx.default_file->self.canvas.get_default_filename()
A:matplotlib.backends.backend_wx.dlg->wx.FileDialog(self.canvas.GetTopLevelParent(), 'Save to file', default_dir, default_file, filetypes, wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
A:matplotlib.backends.backend_wx.dirname->wx.FileDialog(self.canvas.GetTopLevelParent(), 'Save to file', default_dir, default_file, filetypes, wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT).GetDirectory()
A:matplotlib.backends.backend_wx.filename->wx.FileDialog(self.canvas.GetTopLevelParent(), 'Save to file', default_dir, default_file, filetypes, wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT).GetFilename()
A:matplotlib.backends.backend_wx.(basename, ext)->os.path.splitext(filename)
A:matplotlib.backends.backend_wx.cursor->wxc.Cursor(cursord[cursor])
A:matplotlib.backends.backend_wx.self.wxoverlay->wx.Overlay()
A:matplotlib.backends.backend_wx.self.savedRetinaImage->self.canvas.copy_from_bbox(event.inaxes.bbox)
A:matplotlib.backends.backend_wx.self.prevZoomRect->self.zoomAxes.plot(lineX, lineY, '-', color=rubberBandColor)
A:matplotlib.backends.backend_wx.odc->wx.DCOverlay(self.wxoverlay, dc)
A:matplotlib.backends.backend_wx.rect->wx.Rect(x0, y0, w, h)
A:matplotlib.backends.backend_wx.(r, g, b, a)->wxc.NamedColour(rubberBandColor).Get(True)
A:matplotlib.backends.backend_wx.default_dir->os.path.expanduser(matplotlib.rcParams['savefig.directory'])
A:matplotlib.backends.backend_wx.(ppw, pph)->self.GetPPIPrinter()
A:matplotlib.backends.backend_wx.(pgw, pgh)->self.GetPageSizePixels()
A:matplotlib.backends.backend_wx.(dcw, dch)->self.GetDC().GetSize()
A:matplotlib.backends.backend_wx.(grw, grh)->self.canvas.GetSizeTuple()
A:matplotlib.backends.backend_wx.bgcolor->self.canvas.figure.get_facecolor()
A:matplotlib.backends.backend_wx.top_margin->int(self.margin * pph * page_scale)
A:matplotlib.backends.backend_wx.left_margin->int(self.margin * ppw * page_scale)
matplotlib.backends.backend_wx.DEBUG_MSG(string,lvl=3,o=None)
matplotlib.backends.backend_wx.FigureCanvasWx(_FigureCanvasWxBase)
matplotlib.backends.backend_wx.FigureCanvasWx._print_image(self,filename,filetype,*args,**kwargs)
matplotlib.backends.backend_wx.FigureCanvasWx.draw(self,drawDC=None)
matplotlib.backends.backend_wx.FigureCanvasWx.print_bmp(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx.FigureCanvasWx.print_pcx(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx.FigureCanvasWx.print_png(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx.FigureCanvasWx.print_xpm(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx.FigureFrameWx(self,num,fig)
matplotlib.backends.backend_wx.FigureFrameWx.Destroy(self,*args,**kwargs)
matplotlib.backends.backend_wx.FigureFrameWx.GetToolBar(self)
matplotlib.backends.backend_wx.FigureFrameWx.__init__(self,num,fig)
matplotlib.backends.backend_wx.FigureFrameWx._get_toolbar(self,statbar)
matplotlib.backends.backend_wx.FigureFrameWx._onClose(self,evt)
matplotlib.backends.backend_wx.FigureFrameWx.get_canvas(self,fig)
matplotlib.backends.backend_wx.FigureFrameWx.get_figure_manager(self)
matplotlib.backends.backend_wx.FigureManagerWx(self,canvas,num,frame)
matplotlib.backends.backend_wx.FigureManagerWx.__init__(self,canvas,num,frame)
matplotlib.backends.backend_wx.FigureManagerWx.destroy(self,*args)
matplotlib.backends.backend_wx.FigureManagerWx.get_window_title(self)
matplotlib.backends.backend_wx.FigureManagerWx.resize(self,width,height)
matplotlib.backends.backend_wx.FigureManagerWx.set_window_title(self,title)
matplotlib.backends.backend_wx.FigureManagerWx.show(self)
matplotlib.backends.backend_wx.GraphicsContextWx(self,bitmap,renderer)
matplotlib.backends.backend_wx.GraphicsContextWx.__init__(self,bitmap,renderer)
matplotlib.backends.backend_wx.GraphicsContextWx.get_wxcolour(self,color)
matplotlib.backends.backend_wx.GraphicsContextWx.select(self)
matplotlib.backends.backend_wx.GraphicsContextWx.set_capstyle(self,cs)
matplotlib.backends.backend_wx.GraphicsContextWx.set_foreground(self,fg,isRGBA=None)
matplotlib.backends.backend_wx.GraphicsContextWx.set_joinstyle(self,js)
matplotlib.backends.backend_wx.GraphicsContextWx.set_linestyle(self,ls)
matplotlib.backends.backend_wx.GraphicsContextWx.set_linewidth(self,w)
matplotlib.backends.backend_wx.GraphicsContextWx.unselect(self)
matplotlib.backends.backend_wx.MenuButtonWx(self,parent)
matplotlib.backends.backend_wx.MenuButtonWx.Destroy(self)
matplotlib.backends.backend_wx.MenuButtonWx.__init__(self,parent)
matplotlib.backends.backend_wx.MenuButtonWx._handleInvertAxesSelected(self,evt)
matplotlib.backends.backend_wx.MenuButtonWx._handleSelectAllAxes(self,evt)
matplotlib.backends.backend_wx.MenuButtonWx._onMenuButton(self,evt)
matplotlib.backends.backend_wx.MenuButtonWx._onMenuItemSelected(self,evt)
matplotlib.backends.backend_wx.MenuButtonWx.getActiveAxes(self)
matplotlib.backends.backend_wx.MenuButtonWx.updateAxes(self,maxAxis)
matplotlib.backends.backend_wx.MenuButtonWx.updateButtonText(self,lst)
matplotlib.backends.backend_wx.NavigationToolbar2Wx(self,canvas)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.__init__(self,canvas)
matplotlib.backends.backend_wx.NavigationToolbar2Wx._init_toolbar(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.configure_subplots(self,evt)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.dynamic_update(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.get_canvas(self,frame,fig)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.pan(self,*args)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.press(self,event)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.release(self,event)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.save_figure(self,*args)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_cursor(self,cursor)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_history_buttons(self)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_message(self,s)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.set_status_bar(self,statbar)
matplotlib.backends.backend_wx.NavigationToolbar2Wx.zoom(self,*args)
matplotlib.backends.backend_wx.PrintoutWx(self,canvas,width=5.5,margin=0.5,title='matplotlib')
matplotlib.backends.backend_wx.PrintoutWx.GetPageInfo(self)
matplotlib.backends.backend_wx.PrintoutWx.HasPage(self,page)
matplotlib.backends.backend_wx.PrintoutWx.OnPrintPage(self,page)
matplotlib.backends.backend_wx.PrintoutWx.__init__(self,canvas,width=5.5,margin=0.5,title='matplotlib')
matplotlib.backends.backend_wx.RendererWx(self,bitmap,dpi)
matplotlib.backends.backend_wx.RendererWx.__init__(self,bitmap,dpi)
matplotlib.backends.backend_wx.RendererWx.convert_path(gfx_ctx,path,transform)
matplotlib.backends.backend_wx.RendererWx.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_wx.RendererWx.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_wx.RendererWx.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_wx.RendererWx.flipy(self)
matplotlib.backends.backend_wx.RendererWx.get_canvas_width_height(self)
matplotlib.backends.backend_wx.RendererWx.get_gc(self)
matplotlib.backends.backend_wx.RendererWx.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_wx.RendererWx.get_wx_font(self,s,prop)
matplotlib.backends.backend_wx.RendererWx.handle_clip_rectangle(self,gc)
matplotlib.backends.backend_wx.RendererWx.new_gc(self)
matplotlib.backends.backend_wx.RendererWx.offset_text_height(self)
matplotlib.backends.backend_wx.RendererWx.points_to_pixels(self,points)
matplotlib.backends.backend_wx.SaveFigureWx(backend_tools.SaveFigureBase)
matplotlib.backends.backend_wx.SaveFigureWx.trigger(self,*args)
matplotlib.backends.backend_wx.SetCursorWx(backend_tools.SetCursorBase)
matplotlib.backends.backend_wx.SetCursorWx.set_cursor(self,cursor)
matplotlib.backends.backend_wx.StatusBarWx(self,parent)
matplotlib.backends.backend_wx.StatusBarWx.__init__(self,parent)
matplotlib.backends.backend_wx.StatusBarWx.set_function(self,string)
matplotlib.backends.backend_wx.SubplotToolWX(self,targetfig)
matplotlib.backends.backend_wx.SubplotToolWX.__init__(self,targetfig)
matplotlib.backends.backend_wx.TimerWx(self,parent,*args,**kwargs)
matplotlib.backends.backend_wx.TimerWx.__init__(self,parent,*args,**kwargs)
matplotlib.backends.backend_wx.TimerWx._on_timer(self,*args)
matplotlib.backends.backend_wx.TimerWx._timer_set_interval(self)
matplotlib.backends.backend_wx.TimerWx._timer_set_single_shot(self)
matplotlib.backends.backend_wx.TimerWx._timer_start(self)
matplotlib.backends.backend_wx.TimerWx._timer_stop(self)
matplotlib.backends.backend_wx.Toolbar(NavigationToolbar2Wx)
matplotlib.backends.backend_wx._BackendWx(_Backend)
matplotlib.backends.backend_wx._BackendWx.mainloop()
matplotlib.backends.backend_wx._BackendWx.new_figure_manager(cls,num,*args,**kwargs)
matplotlib.backends.backend_wx._BackendWx.new_figure_manager_given_figure(cls,num,figure)
matplotlib.backends.backend_wx._BackendWx.trigger_manager_draw(manager)
matplotlib.backends.backend_wx._FigureCanvasWxBase(self,parent,id,figure)
matplotlib.backends.backend_wx._FigureCanvasWxBase.Copy_to_Clipboard(self,event=None)
matplotlib.backends.backend_wx._FigureCanvasWxBase.Destroy(self,*args,**kwargs)
matplotlib.backends.backend_wx._FigureCanvasWxBase.__init__(self,parent,id,figure)
matplotlib.backends.backend_wx._FigureCanvasWxBase._get_imagesave_wildcards(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase._get_key(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onCaptureLost(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onEnter(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onKeyDown(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onKeyUp(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onLeave(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onLeftButtonDClick(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onLeftButtonDown(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onLeftButtonUp(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onMiddleButtonDClick(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onMiddleButtonDown(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onMiddleButtonUp(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onMotion(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onMouseWheel(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onPaint(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onRightButtonDClick(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onRightButtonDown(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onRightButtonUp(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._onSize(self,evt)
matplotlib.backends.backend_wx._FigureCanvasWxBase._set_capture(self,capture=True)
matplotlib.backends.backend_wx._FigureCanvasWxBase.draw_idle(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase.flush_events(self)
matplotlib.backends.backend_wx._FigureCanvasWxBase.gui_repaint(self,drawDC=None,origin='WX')
matplotlib.backends.backend_wx._FigureCanvasWxBase.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_wx._FigureCanvasWxBase.print_figure(self,filename,*args,**kwargs)
matplotlib.backends.backend_wx._FigureCanvasWxBase.start_event_loop(self,timeout=0)
matplotlib.backends.backend_wx._FigureCanvasWxBase.stop_event_loop(self,event=None)
matplotlib.backends.backend_wx._load_bitmap(filename)
matplotlib.backends.backend_wx.debug_on_error(type,value,tb)
matplotlib.backends.backend_wx.error_msg_wx(msg,parent=None)
matplotlib.backends.backend_wx.fake_stderr(object)
matplotlib.backends.backend_wx.fake_stderr.write(self,msg)
matplotlib.backends.backend_wx.raise_msg_to_str(msg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/_gtk3_compat.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_tkagg.py----------------------------------------
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(FigureCanvasAgg,FigureCanvasTk)
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.blit(self,bbox=None)
matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.draw(self)
matplotlib.backends.backend_tkagg.FigureManagerTkAgg(FigureManagerTk)
matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg(NavigationToolbar2Tk)
matplotlib.backends.backend_tkagg._BackendTkAgg(_BackendTk)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_nbagg.py----------------------------------------
A:matplotlib.backends.backend_nbagg.output->io.StringIO()
A:matplotlib.backends.backend_nbagg.comm->CommSocket(self)
A:matplotlib.backends.backend_nbagg.self.web_sockets->set([socket for socket in self.web_sockets if not socket.comm.comm_id == comm_id])
A:matplotlib.backends.backend_nbagg.self.uuid->str(uuid.uuid4())
A:matplotlib.backends.backend_nbagg.self.comm->Comm('matplotlib', data={'id': self.uuid})
A:matplotlib.backends.backend_nbagg.data->data.decode('ascii').decode('ascii')
A:matplotlib.backends.backend_nbagg.data_uri->'data:image/png;base64,{0}'.format(data)
A:matplotlib.backends.backend_nbagg.message->json.loads(message['content']['data'])
A:matplotlib.backends.backend_nbagg.canvas->FigureCanvasNbAgg(figure)
A:matplotlib.backends.backend_nbagg.manager->FigureManagerNbAgg(canvas, num)
A:matplotlib.backends.backend_nbagg.managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.backends.backend_nbagg.interactive->is_interactive()
matplotlib.backends.backend_nbagg.CommSocket(self,manager)
matplotlib.backends.backend_nbagg.CommSocket.__init__(self,manager)
matplotlib.backends.backend_nbagg.CommSocket.is_open(self)
matplotlib.backends.backend_nbagg.CommSocket.on_close(self)
matplotlib.backends.backend_nbagg.CommSocket.on_message(self,message)
matplotlib.backends.backend_nbagg.CommSocket.send_binary(self,blob)
matplotlib.backends.backend_nbagg.CommSocket.send_json(self,content)
matplotlib.backends.backend_nbagg.FigureCanvasNbAgg(FigureCanvasWebAggCore)
matplotlib.backends.backend_nbagg.FigureCanvasNbAgg.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg(self,canvas,num)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.__init__(self,canvas,num)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg._create_comm(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.clearup_closed(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.connected(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.destroy(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.display_js(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.get_javascript(cls,stream=None)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.remove_comm(self,comm_id)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.reshow(self)
matplotlib.backends.backend_nbagg.FigureManagerNbAgg.show(self)
matplotlib.backends.backend_nbagg.NavigationIPy(NavigationToolbar2WebAgg)
matplotlib.backends.backend_nbagg._BackendNbAgg(_Backend)
matplotlib.backends.backend_nbagg._BackendNbAgg.new_figure_manager_given_figure(num,figure)
matplotlib.backends.backend_nbagg._BackendNbAgg.show(*args,**kwargs)
matplotlib.backends.backend_nbagg._BackendNbAgg.trigger_manager_draw(manager)
matplotlib.backends.backend_nbagg.connection_info()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/qt_compat.py----------------------------------------
A:matplotlib.backends.qt_compat._log->logging.getLogger(__name__)
A:matplotlib.backends.qt_compat.ETS->dict(pyqt=(QT_API_PYQTv2, 4), pyside=(QT_API_PYSIDE, 4), pyqt5=(QT_API_PYQT5, 5), pyside2=(QT_API_PYSIDE2, 5))
A:matplotlib.backends.qt_compat.QT_API_ENV->os.environ.get('QT_API')
matplotlib.backends.qt_compat.is_pyqt5()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gdk.py----------------------------------------
A:matplotlib.backends.backend_gdk.IMAGE_FORMAT->sorted(['bmp', 'eps', 'jpg', 'png', 'ps', 'svg'])
A:matplotlib.backends.backend_gdk.self._cmap->gtkDA.get_colormap()
A:matplotlib.backends.backend_gdk.self.mathtext_parser->MathTextParser('Agg')
A:matplotlib.backends.backend_gdk.polygons->path.to_polygons(transform, self.width, self.height)
A:matplotlib.backends.backend_gdk.gc.gdkGC.foreground->self.new_gc().rgb_to_gdk_color(rgbFace)
A:matplotlib.backends.backend_gdk.bbox->self.new_gc().get_clip_rectangle()
A:matplotlib.backends.backend_gdk.pixbuf->gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, 0, 8, width, height)
A:matplotlib.backends.backend_gdk.array->pixbuf_get_pixels_array(pixbuf)
A:matplotlib.backends.backend_gdk.gc->self.new_gc()
A:matplotlib.backends.backend_gdk.(layout, inkRect, logicalRect)->self._get_pango_layout(s, prop)
A:matplotlib.backends.backend_gdk.(ox, oy, width, height, descent, font_image, used_characters)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_gdk.imw->font_image.get_width()
A:matplotlib.backends.backend_gdk.imh->font_image.get_height()
A:matplotlib.backends.backend_gdk.rgb->self.new_gc().get_rgb()
A:matplotlib.backends.backend_gdk.array[:, :, 0]->int(rgb[0] * 255)
A:matplotlib.backends.backend_gdk.array[:, :, 1]->int(rgb[1] * 255)
A:matplotlib.backends.backend_gdk.array[:, :, 2]->int(rgb[2] * 255)
A:matplotlib.backends.backend_gdk.array[:, :, 3]->numpy.fromstring(font_image.as_str(), np.uint8).reshape((imh, imw))
A:matplotlib.backends.backend_gdk.x->int(x - h)
A:matplotlib.backends.backend_gdk.y->int(y - w)
A:matplotlib.backends.backend_gdk.imageVert->gdrawable.get_image(x, y, h, w)
A:matplotlib.backends.backend_gdk.imageBack->gdrawable.get_image(x, y, w, h)
A:matplotlib.backends.backend_gdk.imageFlip->gtk.gdk.Image(type=gdk.IMAGE_FASTEST, visual=gdrawable.get_visual(), width=w, height=h)
A:matplotlib.backends.backend_gdk.imageIn->gdrawable.get_image(x, y, w, h)
A:matplotlib.backends.backend_gdk.value->self.layoutd.get(key)
A:matplotlib.backends.backend_gdk.size->numpy.round(size)
A:matplotlib.backends.backend_gdk.font->pango.FontDescription(font_str)
A:matplotlib.backends.backend_gdk.layout->self.gtkDA.create_pango_layout(s)
A:matplotlib.backends.backend_gdk.(inkRect, logicalRect)->self.gtkDA.create_pango_layout(s).get_pixel_extents()
A:matplotlib.backends.backend_gdk.self.gdkGC->gtk.gdk.GC(renderer.gdkDrawable)
A:matplotlib.backends.backend_gdk.colorself._cached[tuple(rgb)]->self._cmap.alloc_color(int(rgb[0] * 65535), int(rgb[1] * 65535), int(rgb[2] * 65535))
A:matplotlib.backends.backend_gdk.pixels->self.renderer.points_to_pixels(w)
A:matplotlib.backends.backend_gdk.self.gdkGC.foreground->self.rgb_to_gdk_color(self.get_rgb())
A:matplotlib.backends.backend_gdk.self.gdkGC.line_width->max(1, int(np.round(pixels)))
A:matplotlib.backends.backend_gdk.self._renderer->RendererGDK(gtk.DrawingArea(), self.figure.dpi)
A:matplotlib.backends.backend_gdk.filetypes->matplotlib.backend_bases.FigureCanvasBase.filetypes.copy()
A:matplotlib.backends.backend_gdk.(width, height)->self.get_width_height()
A:matplotlib.backends.backend_gdk.pixmap->gtk.gdk.Pixmap(None, width, height, depth=24)
A:matplotlib.backends.backend_gdk.options['quality']->str(options['quality'])
matplotlib.backends.backend_gdk.FigureCanvasGDK(self,figure)
matplotlib.backends.backend_gdk.FigureCanvasGDK.__init__(self,figure)
matplotlib.backends.backend_gdk.FigureCanvasGDK._print_image(self,filename,format,*args,**kwargs)
matplotlib.backends.backend_gdk.FigureCanvasGDK._render_figure(self,pixmap,width,height)
matplotlib.backends.backend_gdk.FigureCanvasGDK._renderer_init(self)
matplotlib.backends.backend_gdk.FigureCanvasGDK.print_jpeg(self,filename,*args,**kwargs)
matplotlib.backends.backend_gdk.FigureCanvasGDK.print_png(self,filename,*args,**kwargs)
matplotlib.backends.backend_gdk.GraphicsContextGDK(self,renderer)
matplotlib.backends.backend_gdk.GraphicsContextGDK.__init__(self,renderer)
matplotlib.backends.backend_gdk.GraphicsContextGDK.rgb_to_gdk_color(self,rgb)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_capstyle(self,cs)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_clip_rectangle(self,rectangle)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_dashes(self,dash_offset,dash_list)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_foreground(self,fg,isRGBA=False)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_joinstyle(self,js)
matplotlib.backends.backend_gdk.GraphicsContextGDK.set_linewidth(self,w)
matplotlib.backends.backend_gdk.RendererGDK(self,gtkDA,dpi)
matplotlib.backends.backend_gdk.RendererGDK.__init__(self,gtkDA,dpi)
matplotlib.backends.backend_gdk.RendererGDK._draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_gdk.RendererGDK._draw_rotated_text(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_gdk.RendererGDK._get_pango_layout(self,s,prop)
matplotlib.backends.backend_gdk.RendererGDK.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_gdk.RendererGDK.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_gdk.RendererGDK.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_gdk.RendererGDK.flipy(self)
matplotlib.backends.backend_gdk.RendererGDK.get_canvas_width_height(self)
matplotlib.backends.backend_gdk.RendererGDK.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_gdk.RendererGDK.new_gc(self)
matplotlib.backends.backend_gdk.RendererGDK.points_to_pixels(self,points)
matplotlib.backends.backend_gdk.RendererGDK.set_pixmap(self,pixmap)
matplotlib.backends.backend_gdk.RendererGDK.set_width_height(self,width,height)
matplotlib.backends.backend_gdk._BackendGDK(_Backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtkagg.py----------------------------------------
A:matplotlib.backends.backend_gtkagg.toolbar->NavigationToolbar2GTKAgg(canvas, self.window)
A:matplotlib.backends.backend_gtkagg.filetypes->matplotlib.backends.backend_gtk.FigureCanvasGTK.filetypes.copy()
A:matplotlib.backends.backend_gtkagg.(w, h)->widget.window.get_size()
A:matplotlib.backends.backend_gtkagg.buf->self.buffer_rgba()
A:matplotlib.backends.backend_gtkagg.ren->self.get_renderer()
A:matplotlib.backends.backend_gtkagg.w->int(ren.width)
A:matplotlib.backends.backend_gtkagg.h->int(ren.height)
A:matplotlib.backends.backend_gtkagg.pixbuf->matplotlib.backends.backend_gtk.gtk.gdk.pixbuf_new_from_data(buf, gtk.gdk.COLORSPACE_RGB, True, 8, w, h, w * 4)
A:matplotlib.backends.backend_gtkagg.agg->self.switch_backends(FigureCanvasAgg)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg(self,*args,**kwargs)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg.__init__(self,*args,**kwargs)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg._render_figure(self,pixmap,width,height)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg.blit(self,bbox=None)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg.configure_event(self,widget,event=None)
matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg.print_png(self,filename,*args,**kwargs)
matplotlib.backends.backend_gtkagg.FigureManagerGTKAgg(FigureManagerGTK)
matplotlib.backends.backend_gtkagg.FigureManagerGTKAgg._get_toolbar(self,canvas)
matplotlib.backends.backend_gtkagg.NavigationToolbar2GTKAgg(NavigationToolbar2GTK)
matplotlib.backends.backend_gtkagg.NavigationToolbar2GTKAgg._get_canvas(self,fig)
matplotlib.backends.backend_gtkagg._BackendGTKAgg(_BackendGTK)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_webagg_core.py----------------------------------------
A:matplotlib.backends.backend_webagg_core.code->int(key[key.index('k') + 1:])
A:matplotlib.backends.backend_webagg_core.value->value.lower().lower()
A:matplotlib.backends.backend_webagg_core.key->_handle_key(event['key'])
A:matplotlib.backends.backend_webagg_core.renderer->self.get_renderer()
A:matplotlib.backends.backend_webagg_core.buff->matplotlib._png.write_png(output.view(dtype=np.uint8).reshape(output.shape + (4,)), None, compression=6, filter=_png.PNG_FILTER_NONE)
A:matplotlib.backends.backend_webagg_core.pixels->matplotlib._png.write_png(output.view(dtype=np.uint8).reshape(output.shape + (4,)), None, compression=6, filter=_png.PNG_FILTER_NONE).view(dtype=np.uint8).reshape(buff.shape + (4,))
A:matplotlib.backends.backend_webagg_core.last_buffer->numpy.frombuffer(self._last_renderer.buffer_rgba(), dtype=np.uint32).reshape((renderer.height, renderer.width))
A:matplotlib.backends.backend_webagg_core.output->io.StringIO()
A:matplotlib.backends.backend_webagg_core.self._renderer->matplotlib.backends.backend_agg.RendererAgg(w, h, self.figure.dpi)
A:matplotlib.backends.backend_webagg_core.self._last_renderer->matplotlib.backends.backend_agg.RendererAgg(w, h, self.figure.dpi)
A:matplotlib.backends.backend_webagg_core.handler->getattr(self, 'handle_{0}'.format(e_type), self.handle_unknown_event)
A:matplotlib.backends.backend_webagg_core.guiEvent->event.get('guiEvent', None)
A:matplotlib.backends.backend_webagg_core.figure_label->'Figure {0}'.format(self.manager.num)
A:matplotlib.backends.backend_webagg_core.dpi_ratio->event.get('dpi_ratio', 1)
A:matplotlib.backends.backend_webagg_core.self.web_sockets->set()
A:matplotlib.backends.backend_webagg_core.self.toolbar->self._get_toolbar(canvas)
A:matplotlib.backends.backend_webagg_core.toolbar->self.ToolbarCls(canvas)
A:matplotlib.backends.backend_webagg_core.diff->self.canvas.get_diff_image()
A:matplotlib.backends.backend_webagg_core.ioloop->tornado.ioloop.IOLoop.instance()
A:matplotlib.backends.backend_webagg_core.self._timer->tornado.ioloop.PeriodicCallback(self._on_timer, self.interval)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.__init__(self,*args,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore._handle_key(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore._handle_mouse(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.draw(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.draw_idle(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.get_diff_image(self)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.get_renderer(self,cleared=None)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_ack(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_draw(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_event(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_refresh(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_resize(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_send_image_mode(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_set_dpi_ratio(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_toolbar_button(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.handle_unknown_event(self,event)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.send_event(self,event_type,**kwargs)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.set_image_mode(self,mode)
matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore.show(self)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg(self,canvas,num)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.__init__(self,canvas,num)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg._get_toolbar(self,canvas)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg._send_event(self,event_type,**kwargs)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.add_web_socket(self,web_socket)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.get_javascript(cls,stream=None)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.get_static_file_path(cls)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.handle_json(self,content)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.refresh_all(self)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.remove_web_socket(self,web_socket)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.resize(self,w,h)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.set_window_title(self,title)
matplotlib.backends.backend_webagg_core.FigureManagerWebAgg.show(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg(backend_bases.NavigationToolbar2)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg._init_toolbar(self)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.release_zoom(self,event)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.save_figure(self,*args)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.set_cursor(self,cursor)
matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg.set_message(self,message)
matplotlib.backends.backend_webagg_core.TimerTornado(backend_bases.TimerBase)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_set_interval(self)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_start(self)
matplotlib.backends.backend_webagg_core.TimerTornado._timer_stop(self)
matplotlib.backends.backend_webagg_core._BackendWebAggCoreAgg(_Backend)
matplotlib.backends.backend_webagg_core._handle_key(key)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_wxcairo.py----------------------------------------
A:matplotlib.backends.backend_wxcairo.self._renderer->RendererCairo(self.figure.dpi)
A:matplotlib.backends.backend_wxcairo.width->int(self.figure.bbox.width)
A:matplotlib.backends.backend_wxcairo.height->int(self.figure.bbox.height)
A:matplotlib.backends.backend_wxcairo.surface->backend_cairo.cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_wxcairo.self.bitmap->wx.lib.wxcairo.BitmapFromImageSurface(surface)
matplotlib.backends.backend_wxcairo.FigureCanvasWxCairo(self,parent,id,figure)
matplotlib.backends.backend_wxcairo.FigureCanvasWxCairo.__init__(self,parent,id,figure)
matplotlib.backends.backend_wxcairo.FigureCanvasWxCairo.draw(self,drawDC=None)
matplotlib.backends.backend_wxcairo.FigureFrameWxCairo(FigureFrameWx)
matplotlib.backends.backend_wxcairo.FigureFrameWxCairo.get_canvas(self,fig)
matplotlib.backends.backend_wxcairo._BackendWxCairo(_BackendWx)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_template.py----------------------------------------
A:matplotlib.backends.backend_template.FigureClass->kwargs.pop('FigureClass', Figure)
A:matplotlib.backends.backend_template.thisFig->FigureClass(*args, **kwargs)
A:matplotlib.backends.backend_template.canvas->FigureCanvasTemplate(figure)
A:matplotlib.backends.backend_template.manager->FigureManagerTemplate(canvas, num)
A:matplotlib.backends.backend_template.renderer->RendererTemplate(self.figure.dpi)
A:matplotlib.backends.backend_template.filetypes->matplotlib.backend_bases.FigureCanvasBase.filetypes.copy()
matplotlib.backends.backend_template.FigureCanvasTemplate(FigureCanvasBase)
matplotlib.backends.backend_template.FigureCanvasTemplate.draw(self)
matplotlib.backends.backend_template.FigureCanvasTemplate.get_default_filetype(self)
matplotlib.backends.backend_template.FigureCanvasTemplate.print_foo(self,filename,*args,**kwargs)
matplotlib.backends.backend_template.FigureManagerTemplate(FigureManagerBase)
matplotlib.backends.backend_template.GraphicsContextTemplate(GraphicsContextBase)
matplotlib.backends.backend_template.RendererTemplate(self,dpi)
matplotlib.backends.backend_template.RendererTemplate.__init__(self,dpi)
matplotlib.backends.backend_template.RendererTemplate.draw_image(self,gc,x,y,im)
matplotlib.backends.backend_template.RendererTemplate.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_template.RendererTemplate.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_template.RendererTemplate.flipy(self)
matplotlib.backends.backend_template.RendererTemplate.get_canvas_width_height(self)
matplotlib.backends.backend_template.RendererTemplate.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_template.RendererTemplate.new_gc(self)
matplotlib.backends.backend_template.RendererTemplate.points_to_pixels(self,points)
matplotlib.backends.backend_template.draw_if_interactive()
matplotlib.backends.backend_template.new_figure_manager(num,*args,**kwargs)
matplotlib.backends.backend_template.new_figure_manager_given_figure(num,figure)
matplotlib.backends.backend_template.show(block=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/__init__.py----------------------------------------
A:matplotlib.backends.__init__._log->logging.getLogger(__name__)
A:matplotlib.backends.__init__.backend->matplotlib.get_backend()
A:matplotlib.backends.__init__._backend_loading_tb->''.join((line for line in traceback.format_stack() if not line.startswith('  File "<frozen importlib._bootstrap')))
A:matplotlib.backends.__init__.name->matplotlib.get_backend()
A:matplotlib.backends.__init__.backend_name->backend_name.lower().lower()
A:matplotlib.backends.__init__.backend_mod->__import__(backend_name, globals(), locals(), [backend_name], 0)
A:matplotlib.backends.__init__.frame->inspect.currentframe()
A:matplotlib.backends.__init__.backend_version->getattr(backend_mod, 'backend_version', 'unknown')
A:matplotlib.backends.__init__.show->getattr(backend_mod, 'show', do_nothing_show)
A:matplotlib.backends.__init__.draw_if_interactive->getattr(backend_mod, 'draw_if_interactive', do_nothing)
matplotlib.backends.__init__.pylab_setup(name=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtk3agg.py----------------------------------------
A:matplotlib.backends.backend_gtk3agg.allocation->self.get_allocation()
A:matplotlib.backends.backend_gtk3agg.ctx->backend_cairo.cairo.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True)
A:matplotlib.backends.backend_gtk3agg.area->self.copy_from_bbox(bbox)
A:matplotlib.backends.backend_gtk3agg.buf->numpy.fromstring(area.to_string_argb(), dtype='uint8')
A:matplotlib.backends.backend_gtk3agg.x->int(bbox.x0)
A:matplotlib.backends.backend_gtk3agg.image->backend_cairo.cairo.ImageSurface.create_for_data(buf, cairo.FORMAT_ARGB32, width, height)
A:matplotlib.backends.backend_gtk3agg.agg->self.switch_backends(backend_agg.FigureCanvasAgg)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg(self,figure)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.__init__(self,figure)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg._render_figure(self,width,height)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg._renderer_init(self)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.blit(self,bbox=None)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg.print_png(self,filename,*args,**kwargs)
matplotlib.backends.backend_gtk3agg.FigureManagerGTK3Agg(backend_gtk3.FigureManagerGTK3)
matplotlib.backends.backend_gtk3agg._BackendGTK3Cairo(_BackendGTK3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtk3.py----------------------------------------
A:matplotlib.backends.backend_gtk3._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_gtk3.self._timer->_gtk3_compat.GLib.timeout_add(self._interval, self._on_timer)
A:matplotlib.backends.backend_gtk3.key->'{0}+{1}'.format(prefix, key)
A:matplotlib.backends.backend_gtk3.(t, x, y, state)->event.window.get_pointer()
A:matplotlib.backends.backend_gtk3.self._idle_draw_id->_gtk3_compat.GLib.idle_add(idle_draw)
A:matplotlib.backends.backend_gtk3.self.window->_gtk3_compat.Gtk.Window(title='Subplot Configuration Tool')
A:matplotlib.backends.backend_gtk3.self.vbox->_gtk3_compat.Gtk.Box()
A:matplotlib.backends.backend_gtk3.w->int(toolfig.bbox.width)
A:matplotlib.backends.backend_gtk3.h->int(toolfig.bbox.height)
A:matplotlib.backends.backend_gtk3.self.toolmanager->self._get_toolmanager()
A:matplotlib.backends.backend_gtk3.self.toolbar->self._get_toolbar()
A:matplotlib.backends.backend_gtk3.size_request->child.size_request()
A:matplotlib.backends.backend_gtk3.self.statusbar->StatusbarGTK3(self.toolmanager)
A:matplotlib.backends.backend_gtk3.toolbar->_gtk3_compat.Gtk.Toolbar()
A:matplotlib.backends.backend_gtk3.toolmanager->ToolManager(self.canvas.figure)
A:matplotlib.backends.backend_gtk3.self.ctx->self.figure.canvas.get_property('window').cairo_create()
A:matplotlib.backends.backend_gtk3.basedir->os.path.join(rcParams['datapath'], 'images')
A:matplotlib.backends.backend_gtk3.fname->os.path.join(basedir, image_file + '.png')
A:matplotlib.backends.backend_gtk3.image->_gtk3_compat.Gtk.Image()
A:matplotlib.backends.backend_gtk3.tbutton->_gtk3_compat.Gtk.ToolButton()
A:matplotlib.backends.backend_gtk3.toolitem->_gtk3_compat.Gtk.ToolItem()
A:matplotlib.backends.backend_gtk3.self.message->_gtk3_compat.Gtk.Label()
A:matplotlib.backends.backend_gtk3.fc->FileChooserDialog(title='Save the figure', parent=self.figure.canvas.manager.window, path=os.path.expanduser(rcParams['savefig.directory']), filetypes=self.figure.canvas.get_supported_filetypes(), default_filetype=self.figure.canvas.get_default_filetype())
A:matplotlib.backends.backend_gtk3.chooser->self.get_filechooser()
A:matplotlib.backends.backend_gtk3.(fname, format)->self.get_filechooser().get_filename_from_user()
A:matplotlib.backends.backend_gtk3.startpath->os.path.expanduser(rcParams['savefig.directory'])
A:matplotlib.backends.backend_gtk3.rcParams['savefig.directory']->os.path.dirname(six.text_type(fname))
A:matplotlib.backends.backend_gtk3.toolfig->Figure(figsize=(6, 3))
A:matplotlib.backends.backend_gtk3.canvas->self.figure.canvas.__class__(toolfig)
A:matplotlib.backends.backend_gtk3.tool->SubplotTool(self.canvas.figure, toolfig)
A:matplotlib.backends.backend_gtk3.window->_gtk3_compat.Gtk.Window()
A:matplotlib.backends.backend_gtk3.vbox->_gtk3_compat.Gtk.Box()
A:matplotlib.backends.backend_gtk3.hbox->_gtk3_compat.Gtk.Box(spacing=10)
A:matplotlib.backends.backend_gtk3.liststore->_gtk3_compat.Gtk.ListStore(GObject.TYPE_STRING)
A:matplotlib.backends.backend_gtk3.cbox->_gtk3_compat.Gtk.ComboBox()
A:matplotlib.backends.backend_gtk3.cell->_gtk3_compat.Gtk.CellRendererText()
A:matplotlib.backends.backend_gtk3.self.sorted_filetypes->sorted(six.iteritems(filetypes))
A:matplotlib.backends.backend_gtk3.(head, filename)->os.path.split(self.get_filename())
A:matplotlib.backends.backend_gtk3.(root, ext)->os.path.splitext(filename)
A:matplotlib.backends.backend_gtk3.filename->self.get_filename()
A:matplotlib.backends.backend_gtk3.self._toolarea->_gtk3_compat.Gtk.Box()
A:matplotlib.backends.backend_gtk3.signal->_gtk3_compat.Gtk.ToolButton().connect('clicked', self._call_tool, name)
A:matplotlib.backends.backend_gtk3.sep->_gtk3_compat.Gtk.Separator()
A:matplotlib.backends.backend_gtk3.self._context->self.get_context_id('message')
A:matplotlib.backends.backend_gtk3.(fname, format_)->self.get_filechooser().get_filename_from_user()
A:matplotlib.backends.backend_gtk3.window_icon->os.path.join(matplotlib.rcParams['datapath'], 'images', icon_filename)
A:matplotlib.backends.backend_gtk3.parent->parent.get_toplevel().get_toplevel()
A:matplotlib.backends.backend_gtk3.msg->','.join(map(str, msg))
A:matplotlib.backends.backend_gtk3.dialog->_gtk3_compat.Gtk.MessageDialog(parent=parent, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, message_format=msg)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3.__init__(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3._get_canvas(self,fig)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3.destroy(self,*args)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3.init_window(self)
matplotlib.backends.backend_gtk3.ConfigureSubplotsGTK3.trigger(self,sender,event,data=None)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3(self,figure)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.__init__(self,figure)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3._get_key(self,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.button_press_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.button_release_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.configure_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.destroy(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.draw(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.draw_idle(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.enter_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.flush_events(self)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.key_press_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.key_release_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.leave_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.motion_notify_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.new_timer(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.scroll_event(self,widget,event)
matplotlib.backends.backend_gtk3.FigureCanvasGTK3.size_allocate(self,widget,allocation)
matplotlib.backends.backend_gtk3.FigureManagerGTK3(self,canvas,num)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.__init__(self,canvas,num)
matplotlib.backends.backend_gtk3.FigureManagerGTK3._get_toolbar(self)
matplotlib.backends.backend_gtk3.FigureManagerGTK3._get_toolmanager(self)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.destroy(self,*args)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.full_screen_toggle(self)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.get_window_title(self)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.resize(self,width,height)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.set_window_title(self,title)
matplotlib.backends.backend_gtk3.FigureManagerGTK3.show(self)
matplotlib.backends.backend_gtk3.FileChooserDialog(self,title='Savefile',parent=None,action=Gtk.FileChooserAction.SAVE,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_SAVE,Gtk.ResponseType.OK),path=None,filetypes=[],default_filetype=None)
matplotlib.backends.backend_gtk3.FileChooserDialog.__init__(self,title='Savefile',parent=None,action=Gtk.FileChooserAction.SAVE,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_SAVE,Gtk.ResponseType.OK),path=None,filetypes=[],default_filetype=None)
matplotlib.backends.backend_gtk3.FileChooserDialog.get_filename_from_user(self)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3(self,canvas,window)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.__init__(self,canvas,window)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3._get_canvas(self,fig)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3._init_toolbar(self)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.configure_subplots(self,button)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.get_filechooser(self)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.release(self,event)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.save_figure(self,*args)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.set_cursor(self,cursor)
matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3.set_message(self,s)
matplotlib.backends.backend_gtk3.RubberbandGTK3(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.RubberbandGTK3.__init__(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.RubberbandGTK3.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends.backend_gtk3.SaveFigureGTK3(backend_tools.SaveFigureBase)
matplotlib.backends.backend_gtk3.SaveFigureGTK3.get_filechooser(self)
matplotlib.backends.backend_gtk3.SaveFigureGTK3.trigger(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.SetCursorGTK3(backend_tools.SetCursorBase)
matplotlib.backends.backend_gtk3.SetCursorGTK3.set_cursor(self,cursor)
matplotlib.backends.backend_gtk3.StatusbarGTK3(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.StatusbarGTK3.__init__(self,*args,**kwargs)
matplotlib.backends.backend_gtk3.StatusbarGTK3.set_message(self,s)
matplotlib.backends.backend_gtk3.TimerGTK3(TimerBase)
matplotlib.backends.backend_gtk3.TimerGTK3._on_timer(self)
matplotlib.backends.backend_gtk3.TimerGTK3._timer_set_interval(self)
matplotlib.backends.backend_gtk3.TimerGTK3._timer_start(self)
matplotlib.backends.backend_gtk3.TimerGTK3._timer_stop(self)
matplotlib.backends.backend_gtk3.ToolbarGTK3(self,toolmanager)
matplotlib.backends.backend_gtk3.ToolbarGTK3.__init__(self,toolmanager)
matplotlib.backends.backend_gtk3.ToolbarGTK3._add_button(self,button,group,position)
matplotlib.backends.backend_gtk3.ToolbarGTK3._add_separator(self)
matplotlib.backends.backend_gtk3.ToolbarGTK3._call_tool(self,btn,name)
matplotlib.backends.backend_gtk3.ToolbarGTK3.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends.backend_gtk3.ToolbarGTK3.remove_toolitem(self,name)
matplotlib.backends.backend_gtk3.ToolbarGTK3.toggle_toolitem(self,name,toggled)
matplotlib.backends.backend_gtk3._BackendGTK3(_Backend)
matplotlib.backends.backend_gtk3._BackendGTK3.mainloop()
matplotlib.backends.backend_gtk3._BackendGTK3.trigger_manager_draw(manager)
matplotlib.backends.backend_gtk3.error_msg_gtk(msg,parent=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_ps.py----------------------------------------
A:matplotlib.backends.backend_ps._log->logging.getLogger(__name__)
A:matplotlib.backends.backend_ps.(gs_exe, gs_version)->checkdep_ghostscript()
A:matplotlib.backends.backend_ps.self._cached['gs_exe']->str(gs_exe)
A:matplotlib.backends.backend_ps.s->binascii.b2a_hex(s)
A:matplotlib.backends.backend_ps.(pipe, stderr)->binascii.b2a_hex(s).communicate()
A:matplotlib.backends.backend_ps.ver->pipe.decode('ascii')
A:matplotlib.backends.backend_ps.gs_version->tuple(map(int, ver.strip().split('.')))
A:matplotlib.backends.backend_ps.ps_backend_helper->PsBackendHelper()
A:matplotlib.backends.backend_ps.keys->list(six.iterkeys(papersize))
A:matplotlib.backends.backend_ps.ival->int(val)
A:matplotlib.backends.backend_ps.afmfontd->maxdict(50)
A:matplotlib.backends.backend_ps.self.mathtext_parser->MathTextParser('PS')
A:matplotlib.backends.backend_ps.self._afm_font_dir->os.path.join(rcParams['datapath'], 'fonts', 'afm')
A:matplotlib.backends.backend_ps.(realpath, stat_key)->get_realpath_and_stat(font.fname)
A:matplotlib.backends.backend_ps.used_characters->self.used_characters.setdefault(stat_key, (realpath, set()))
A:matplotlib.backends.backend_ps.linewidth->float(linewidth)
A:matplotlib.backends.backend_ps.texmanager->self._renderer_class(width, height, self._pswriter, imagedpi=dpi).get_texmanager()
A:matplotlib.backends.backend_ps.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_ps.(w, h, d)->self._renderer_class(width, height, self._pswriter, imagedpi=dpi).get_texmanager().get_text_width_height_descent(s, fontsize, renderer=self)
A:matplotlib.backends.backend_ps.(width, height, descent, pswriter, used_characters)->self.mathtext_parser.parse(s, 72, prop)
A:matplotlib.backends.backend_ps.font->get_font(font_filename)
A:matplotlib.backends.backend_ps.(l, b, w, h, d)->get_font(font_filename).get_str_bbox_and_descent(s)
A:matplotlib.backends.backend_ps.(w, h)->get_font(font_filename).get_width_height()
A:matplotlib.backends.backend_ps.d->d.strip().strip()
A:matplotlib.backends.backend_ps.key->hash(prop)
A:matplotlib.backends.backend_ps.fname->findfont(prop)
A:matplotlib.backends.backend_ps.size->prop.get_size_in_points()
A:matplotlib.backends.backend_ps.nhex->len(s)
A:matplotlib.backends.backend_ps.limit->min(i + chars_per_line, nhex)
A:matplotlib.backends.backend_ps.(h, w, bits)->self._rgb(im)
A:matplotlib.backends.backend_ps.(h, w, bits, imagecmd)->self._get_image_h_w_bits_command(im)
A:matplotlib.backends.backend_ps.hexlines->b'\n'.join(self._hex_lines(bits)).decode('ascii')
A:matplotlib.backends.backend_ps.matrix->' '.join(map(str, transform.frozen().to_values()))
A:matplotlib.backends.backend_ps.bbox->gc.get_clip_rectangle()
A:matplotlib.backends.backend_ps.(clippath, clippath_trans)->gc.get_clip_path()
A:matplotlib.backends.backend_ps.id->self._get_clip_path(clippath, clippath_trans)
A:matplotlib.backends.backend_ps.clip->'\n'.join(clip)
A:matplotlib.backends.backend_ps.pid->self._clip_paths.get(key)
A:matplotlib.backends.backend_ps.ps->'\n'.join(ps_cmd)
A:matplotlib.backends.backend_ps.lw->gc.get_linewidth()
A:matplotlib.backends.backend_ps.jint->gc.get_joinstyle()
A:matplotlib.backends.backend_ps.cint->gc.get_capstyle()
A:matplotlib.backends.backend_ps.uses_per_path->self._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.backends.backend_ps.(w, h, bl)->self.get_text_width_height_descent(s, prop, ismath)
A:matplotlib.backends.backend_ps.fontcmd->{'sans-serif': '{\\sffamily %s}', 'monospace': '{\\ttfamily %s}'}.get(rcParams['font.family'][0], '{\\rmfamily %s}')
A:matplotlib.backends.backend_ps.pos->_nums_to_str(x - corr, y - bl)
A:matplotlib.backends.backend_ps.fontname->get_font(font_filename).get_fontname()
A:matplotlib.backends.backend_ps.name->get_font(font_filename).get_glyph_name(gind)
A:matplotlib.backends.backend_ps.width->get_font(font_filename).get_width_char('?')
A:matplotlib.backends.backend_ps.kern->get_font(font_filename).get_kerning(lastgind, gind, KERNING_DEFAULT)
A:matplotlib.backends.backend_ps.thetext->pswriter.getvalue()
A:matplotlib.backends.backend_ps.sfnt->get_font(font_filename).get_sfnt()
A:matplotlib.backends.backend_ps.ps_name->ps_name.encode('ascii', 'replace').decode('ascii').encode('ascii', 'replace').decode('ascii')
A:matplotlib.backends.backend_ps.ccode->ord('?')
A:matplotlib.backends.backend_ps.gind->get_font(font_filename).get_char_index(c)
A:matplotlib.backends.backend_ps.glyph->get_font(font_filename).load_char(ccode, flags=LOAD_NO_HINTING)
A:matplotlib.backends.backend_ps.flat_points->trans.transform(flat_points)
A:matplotlib.backends.backend_ps.flat_colors->colors.reshape((shape[0] * shape[1], 4))
A:matplotlib.backends.backend_ps.factor->numpy.ceil((2 ** 32 - 1) / (points_max - points_min))
A:matplotlib.backends.backend_ps.streamarr->numpy.empty((shape[0] * shape[1],), dtype=[('flags', 'u1'), ('points', '>u4', (2,)), ('colors', 'u1', (3,))])
A:matplotlib.backends.backend_ps.stream->quote_ps_string(streamarr.tostring())
A:matplotlib.backends.backend_ps.mightstroke->gc.shouldstroke()
A:matplotlib.backends.backend_ps.hatch->gc.get_hatch()
A:matplotlib.backends.backend_ps.cliprect->gc.get_clip_rectangle()
A:matplotlib.backends.backend_ps.hatch_name->self.create_hatch(hatch)
A:matplotlib.backends.backend_ps.papertype->_get_papertype(width, height)
A:matplotlib.backends.backend_ps.orientation->kwargs.pop('orientation', 'portrait').lower()
A:matplotlib.backends.backend_ps.imagedpi->kwargs.pop('dpi', 72)
A:matplotlib.backends.backend_ps.facecolor->kwargs.pop('facecolor', 'w')
A:matplotlib.backends.backend_ps.edgecolor->kwargs.pop('edgecolor', 'w')
A:matplotlib.backends.backend_ps.outfiletitle->getattr(os, 'fspath', lambda obj: obj)(outfile)
A:matplotlib.backends.backend_ps.(width, height)->self.figure.get_size_inches()
A:matplotlib.backends.backend_ps.origfacecolor->self.figure.get_facecolor()
A:matplotlib.backends.backend_ps.origedgecolor->self.figure.get_edgecolor()
A:matplotlib.backends.backend_ps.dryrun->kwargs.get('dryrun', False)
A:matplotlib.backends.backend_ps.self._pswriter->io.StringIO()
A:matplotlib.backends.backend_ps._bbox_inches_restore->kwargs.pop('bbox_inches_restore', None)
A:matplotlib.backends.backend_ps.ps_renderer->self._renderer_class(width, height, self._pswriter, imagedpi=dpi)
A:matplotlib.backends.backend_ps.renderer->MixedModeRenderer(self.figure, width, height, dpi, ps_renderer, bbox_inches_restore=_bbox_inches_restore)
A:matplotlib.backends.backend_ps.source_date_epoch->os.getenv('SOURCE_DATE_EPOCH')
A:matplotlib.backends.backend_ps.source_date->time.ctime()
A:matplotlib.backends.backend_ps.Ndict->len(psDefs)
A:matplotlib.backends.backend_ps.content->content.decode('ascii').decode('ascii')
A:matplotlib.backends.backend_ps.(fd, tmpfile)->mkstemp()
A:matplotlib.backends.backend_ps.requires_unicode->file_requires_unicode(outfile)
A:matplotlib.backends.backend_ps.fh->io.TextIOWrapper(outfile, encoding='latin-1')
A:matplotlib.backends.backend_ps.(paperWidth, paperHeight)->self.figure.get_size_inches()
A:matplotlib.backends.backend_ps.temp_papertype->_get_papertype(width, height)
A:matplotlib.backends.backend_ps.font_preamble->self._renderer_class(width, height, self._pswriter, imagedpi=dpi).get_texmanager().get_font_preamble()
A:matplotlib.backends.backend_ps.custom_preamble->self._renderer_class(width, height, self._pswriter, imagedpi=dpi).get_texmanager().get_custom_preamble()
A:matplotlib.backends.backend_ps.psfrag_rotated->convert_psfrags(tmpfile, ps_renderer.psfrag, font_preamble, custom_preamble, paperWidth, paperHeight, orientation)
A:matplotlib.backends.backend_ps.latexfile->latexfile.replace('~', '\\string~').replace('~', '\\string~')
A:matplotlib.backends.backend_ps.report->matplotlib.compat.subprocess.subprocess.check_output(command, stderr=subprocess.STDOUT)
A:matplotlib.backends.backend_ps.p->matplotlib.compat.subprocess.subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
A:matplotlib.backends.backend_ps.bbox_info->re.search('%%HiResBoundingBox: .*', bbox_info).group()
A:matplotlib.backends.backend_ps.bbox_found->re.search('%%HiResBoundingBox: .*', bbox_info)
A:matplotlib.backends.backend_ps.(bbox_info, rotate)->get_bbox_header(bbox, rotated=rotated)
matplotlib.backends.backend_ps.FigureCanvasPS(FigureCanvasBase)
matplotlib.backends.backend_ps.FigureCanvasPS._print_figure(self,outfile,format,dpi=72,facecolor='w',edgecolor='w',orientation='portrait',isLandscape=False,papertype=None,metadata=None,**kwargs)
matplotlib.backends.backend_ps.FigureCanvasPS._print_figure_tex(self,outfile,format,dpi,facecolor,edgecolor,orientation,isLandscape,papertype,metadata=None,**kwargs)
matplotlib.backends.backend_ps.FigureCanvasPS._print_ps(self,outfile,format,*args,**kwargs)
matplotlib.backends.backend_ps.FigureCanvasPS.draw(self)
matplotlib.backends.backend_ps.FigureCanvasPS.get_default_filetype(self)
matplotlib.backends.backend_ps.FigureCanvasPS.print_eps(self,outfile,*args,**kwargs)
matplotlib.backends.backend_ps.FigureCanvasPS.print_ps(self,outfile,*args,**kwargs)
matplotlib.backends.backend_ps.FigureManagerPS(FigureManagerBase)
matplotlib.backends.backend_ps.GraphicsContextPS(GraphicsContextBase)
matplotlib.backends.backend_ps.GraphicsContextPS.get_capstyle(self)
matplotlib.backends.backend_ps.GraphicsContextPS.get_joinstyle(self)
matplotlib.backends.backend_ps.GraphicsContextPS.shouldstroke(self)
matplotlib.backends.backend_ps.PsBackendHelper(self)
matplotlib.backends.backend_ps.PsBackendHelper.__init__(self)
matplotlib.backends.backend_ps.PsBackendHelper.gs_exe(self)
matplotlib.backends.backend_ps.PsBackendHelper.gs_version(self)
matplotlib.backends.backend_ps.PsBackendHelper.supports_ps2write(self)
matplotlib.backends.backend_ps.RendererPS(self,width,height,pswriter,imagedpi=72)
matplotlib.backends.backend_ps.RendererPS.__init__(self,width,height,pswriter,imagedpi=72)
matplotlib.backends.backend_ps.RendererPS._convert_path(self,path,transform,clip=False,simplify=None)
matplotlib.backends.backend_ps.RendererPS._draw_ps(self,ps,gc,rgbFace,fill=True,stroke=True,command=None)
matplotlib.backends.backend_ps.RendererPS._get_clip_path(self,clippath,clippath_transform)
matplotlib.backends.backend_ps.RendererPS._get_font_afm(self,prop)
matplotlib.backends.backend_ps.RendererPS._get_font_ttf(self,prop)
matplotlib.backends.backend_ps.RendererPS._get_image_h_w_bits_command(self,im)
matplotlib.backends.backend_ps.RendererPS._hex_lines(self,s,chars_per_line=128)
matplotlib.backends.backend_ps.RendererPS._rgb(self,rgba)
matplotlib.backends.backend_ps.RendererPS.create_hatch(self,hatch)
matplotlib.backends.backend_ps.RendererPS.draw_gouraud_triangle(self,gc,points,colors,trans)
matplotlib.backends.backend_ps.RendererPS.draw_gouraud_triangles(self,gc,points,colors,trans)
matplotlib.backends.backend_ps.RendererPS.draw_image(self,gc,x,y,im,transform=None)
matplotlib.backends.backend_ps.RendererPS.draw_markers(self,gc,marker_path,marker_trans,path,trans,rgbFace=None)
matplotlib.backends.backend_ps.RendererPS.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_ps.RendererPS.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_ps.RendererPS.draw_path_collection(self,gc,master_transform,paths,all_transforms,offsets,offsetTrans,facecolors,edgecolors,linewidths,linestyles,antialiaseds,urls,offset_position)
matplotlib.backends.backend_ps.RendererPS.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backends.backend_ps.RendererPS.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_ps.RendererPS.flipy(self)
matplotlib.backends.backend_ps.RendererPS.get_canvas_width_height(self)
matplotlib.backends.backend_ps.RendererPS.get_image_magnification(self)
matplotlib.backends.backend_ps.RendererPS.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_ps.RendererPS.merge_used_characters(self,other)
matplotlib.backends.backend_ps.RendererPS.new_gc(self)
matplotlib.backends.backend_ps.RendererPS.option_image_nocomposite(self)
matplotlib.backends.backend_ps.RendererPS.option_scale_image(self)
matplotlib.backends.backend_ps.RendererPS.set_color(self,r,g,b,store=1)
matplotlib.backends.backend_ps.RendererPS.set_font(self,fontname,fontsize,store=1)
matplotlib.backends.backend_ps.RendererPS.set_linecap(self,linecap,store=1)
matplotlib.backends.backend_ps.RendererPS.set_linedash(self,offset,seq,store=1)
matplotlib.backends.backend_ps.RendererPS.set_linejoin(self,linejoin,store=1)
matplotlib.backends.backend_ps.RendererPS.set_linewidth(self,linewidth,store=1)
matplotlib.backends.backend_ps.RendererPS.track_characters(self,font,s)
matplotlib.backends.backend_ps._BackendPS(_Backend)
matplotlib.backends.backend_ps._get_papertype(w,h)
matplotlib.backends.backend_ps._move_path_to_path_or_stream(src,dst)
matplotlib.backends.backend_ps._num_to_str(val)
matplotlib.backends.backend_ps._nums_to_str(*args)
matplotlib.backends.backend_ps.convert_psfrags(tmpfile,psfrags,font_preamble,custom_preamble,paperWidth,paperHeight,orientation)
matplotlib.backends.backend_ps.get_bbox(tmpfile,bbox)
matplotlib.backends.backend_ps.get_bbox_header(lbrt,rotated=False)
matplotlib.backends.backend_ps.gs_distill(tmpfile,eps=False,ptype='letter',bbox=None,rotated=False)
matplotlib.backends.backend_ps.pstoeps(tmpfile,bbox=None,rotated=False)
matplotlib.backends.backend_ps.quote_ps_string(s)
matplotlib.backends.backend_ps.xpdf_distill(tmpfile,eps=False,ptype='letter',bbox=None,rotated=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_qt4.py----------------------------------------
matplotlib.backends.backend_qt4._BackendQT4(_BackendQT5)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_gtk3cairo.py----------------------------------------
A:matplotlib.backends.backend_gtk3cairo.ctx->backend_cairo.cairo.Context._from_pointer(cairo.ffi.cast('cairo_t **', id(ctx) + object.__basicsize__)[0], incref=True)
A:matplotlib.backends.backend_gtk3cairo.self._renderer->RendererGTK3Cairo(self.figure.dpi)
A:matplotlib.backends.backend_gtk3cairo.allocation->self.get_allocation()
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo(backend_gtk3.FigureCanvasGTK3,backend_cairo.FigureCanvasCairo)
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo._render_figure(self,width,height)
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo._renderer_init(self)
matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo.on_draw_event(self,widget,ctx)
matplotlib.backends.backend_gtk3cairo.FigureManagerGTK3Cairo(backend_gtk3.FigureManagerGTK3)
matplotlib.backends.backend_gtk3cairo.RendererGTK3Cairo(backend_cairo.RendererCairo)
matplotlib.backends.backend_gtk3cairo.RendererGTK3Cairo.set_context(self,ctx)
matplotlib.backends.backend_gtk3cairo._BackendGTK3Cairo(_BackendGTK3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/tkagg.py----------------------------------------
A:matplotlib.backends.tkagg.bbox_array->bbox.__array__()
A:matplotlib.backends.tkagg.data->numpy.asarray(aggimage)
A:matplotlib.backends.tkagg.r->six.moves.tkinter.Tk()
A:matplotlib.backends.tkagg.c->six.moves.tkinter.Canvas(r, width=aggimage.width, height=aggimage.height)
A:matplotlib.backends.tkagg.p->six.moves.tkinter.PhotoImage(width=aggimage.width, height=aggimage.height)
matplotlib.backends.tkagg.blit(photoimage,aggimage,bbox=None,colormode=1)
matplotlib.backends.tkagg.test(aggimage)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/_backend_tk.py----------------------------------------
A:matplotlib.backends._backend_tk._log->logging.getLogger(__name__)
A:matplotlib.backends._backend_tk.msg->'\n'.join(map(str, msg))
A:matplotlib.backends._backend_tk.self._timer->self.parent.after(self._interval, self._on_timer)
A:matplotlib.backends._backend_tk.self._tkcanvas->six.moves.tkinter.Canvas(master=master, background='white', width=w, height=h, borderwidth=0, highlightthickness=0)
A:matplotlib.backends._backend_tk.self._tkphoto->six.moves.tkinter.PhotoImage(master=self._tkcanvas, width=int(width), height=int(height))
A:matplotlib.backends._backend_tk.root->self._tkcanvas.winfo_toplevel()
A:matplotlib.backends._backend_tk.xw->self._tkcanvas.winfo_rootx()
A:matplotlib.backends._backend_tk.yw->self._tkcanvas.winfo_rooty()
A:matplotlib.backends._backend_tk.(xp, yp)->self._tkcanvas.winfo_pointerxy()
A:matplotlib.backends._backend_tk.show->matplotlib.cbook.deprecated('2.2', name='FigureCanvasTk.show', alternative='FigureCanvasTk.draw')(lambda self: self.draw())
A:matplotlib.backends._backend_tk.self._idle_callback->self._tkcanvas.after_idle(idle_draw)
A:matplotlib.backends._backend_tk.num->getattr(event, 'num', None)
A:matplotlib.backends._backend_tk.w->event.widget.winfo_containing(event.x_root, event.y_root)
A:matplotlib.backends._backend_tk.key->self._get_key(event)
A:matplotlib.backends._backend_tk.self.toolmanager->self._get_toolmanager()
A:matplotlib.backends._backend_tk.self.toolbar->self._get_toolbar()
A:matplotlib.backends._backend_tk.self.statusbar->StatusbarTk(self.window, self.toolmanager)
A:matplotlib.backends._backend_tk.toolbar->ToolbarTk(self.toolmanager, self.window)
A:matplotlib.backends._backend_tk.toolmanager->ToolManager(self.canvas.figure)
A:matplotlib.backends._backend_tk._focus->matplotlib.backends.windowing.FocusManager()
A:matplotlib.backends._backend_tk.is_fullscreen->bool(self.window.attributes('-fullscreen'))
A:matplotlib.backends._backend_tk.self._mbar->six.moves.tkinter.Frame(master=master, relief=Tk.RAISED, borderwidth=2)
A:matplotlib.backends._backend_tk.self._mbutton->six.moves.tkinter.Menubutton(master=self._mbar, text='Axes', underline=0)
A:matplotlib.backends._backend_tk.self._mbutton.menu->six.moves.tkinter.Menu(self._mbutton)
A:matplotlib.backends._backend_tk.self.lastrect->self.figure.canvas._tkcanvas.create_rectangle(x0, y0, x1, y1)
A:matplotlib.backends._backend_tk.img_file->os.path.join(rcParams['datapath'], 'images', file + extension)
A:matplotlib.backends._backend_tk.im->six.moves.tkinter.PhotoImage(master=self, file=image_file)
A:matplotlib.backends._backend_tk.b->six.moves.tkinter.Checkbutton(master=frame, text=text, padx=2, pady=2, image=im, indicatoron=False, command=lambda : self._button_click(text), variable=var)
A:matplotlib.backends._backend_tk.s->six.moves.tkinter.Frame(master=self, height=26, relief=Tk.RIDGE, pady=2, bg='DarkGray')
A:matplotlib.backends._backend_tk.button->self._Button(name, image_file, toggle, frame)
A:matplotlib.backends._backend_tk.self.message->six.moves.tkinter.StringVar(master=self)
A:matplotlib.backends._backend_tk.self._message_label->six.moves.tkinter.Label(master=self, textvariable=self._message)
A:matplotlib.backends._backend_tk.toolfig->Figure(figsize=(6, 3))
A:matplotlib.backends._backend_tk.window->six.moves.tkinter.Tk(className='matplotlib')
A:matplotlib.backends._backend_tk.canvas->cls.FigureCanvas(figure, master=window)
A:matplotlib.backends._backend_tk.canvas.tool->SubplotTool(self.canvas.figure, toolfig)
A:matplotlib.backends._backend_tk.filetypes->self.figure.canvas.get_supported_filetypes().copy()
A:matplotlib.backends._backend_tk.default_filetype->self.figure.canvas.get_default_filetype()
A:matplotlib.backends._backend_tk.default_filetype_name->self.figure.canvas.get_supported_filetypes().copy().pop(default_filetype)
A:matplotlib.backends._backend_tk.initialdir->os.path.expanduser(rcParams['savefig.directory'])
A:matplotlib.backends._backend_tk.initialfile->self.figure.canvas.get_default_filename()
A:matplotlib.backends._backend_tk.fname->six.moves.tkinter_tkfiledialog.asksaveasfilename(master=self.figure.canvas.manager.window, title='Save the figure', filetypes=tk_filetypes, defaultextension=defaultextension, initialdir=initialdir, initialfile=initialfile)
A:matplotlib.backends._backend_tk.rcParams['savefig.directory']->os.path.dirname(six.text_type(fname))
A:matplotlib.backends._backend_tk.toolTip->ToolTip(widget)
A:matplotlib.backends._backend_tk.(x, y, _, _)->self.widget.bbox('insert')
A:matplotlib.backends._backend_tk.self.tipwindowtw->six.moves.tkinter.Toplevel(self.widget)
A:matplotlib.backends._backend_tk.label->six.moves.tkinter.Label(tw, text=self.text, justify=Tk.LEFT, background='#ffffe0', relief=Tk.SOLID, borderwidth=1)
A:matplotlib.backends._backend_tk.frame->six.moves.tkinter.Frame(master=self, borderwidth=0)
A:matplotlib.backends._backend_tk.separator->six.moves.tkinter.Frame(master=self, bd=5, width=1, bg='black')
A:matplotlib.backends._backend_tk.var->six.moves.tkinter.IntVar()
A:matplotlib.backends._backend_tk.self._message->six.moves.tkinter.StringVar(master=self)
A:matplotlib.backends._backend_tk.self.window->six.moves.tkinter.Tk()
A:matplotlib.backends._backend_tk._tool->SubplotTool(self.figure, toolfig)
A:matplotlib.backends._backend_tk.icon_fname->os.path.join(rcParams['datapath'], 'images', 'matplotlib.ppm')
A:matplotlib.backends._backend_tk.icon_img->six.moves.tkinter.PhotoImage(file=icon_fname)
A:matplotlib.backends._backend_tk.manager->cls.FigureManager(canvas, num, window)
matplotlib.backends._backend_tk.AxisMenu(self,master,naxes)
matplotlib.backends._backend_tk.AxisMenu.__init__(self,master,naxes)
matplotlib.backends._backend_tk.AxisMenu.adjust(self,naxes)
matplotlib.backends._backend_tk.AxisMenu.get_indices(self)
matplotlib.backends._backend_tk.AxisMenu.invert_all(self)
matplotlib.backends._backend_tk.AxisMenu.select_all(self)
matplotlib.backends._backend_tk.AxisMenu.set_active(self)
matplotlib.backends._backend_tk.ConfigureSubplotsTk(self,*args,**kwargs)
matplotlib.backends._backend_tk.ConfigureSubplotsTk.__init__(self,*args,**kwargs)
matplotlib.backends._backend_tk.ConfigureSubplotsTk.destroy(self,*args,**kwargs)
matplotlib.backends._backend_tk.ConfigureSubplotsTk.init_window(self)
matplotlib.backends._backend_tk.ConfigureSubplotsTk.trigger(self,*args)
matplotlib.backends._backend_tk.FigureCanvasTk(self,figure,master=None,resize_callback=None)
matplotlib.backends._backend_tk.FigureCanvasTk.__init__(self,figure,master=None,resize_callback=None)
matplotlib.backends._backend_tk.FigureCanvasTk._get_key(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk._update_pointer_position(self,guiEvent=None)
matplotlib.backends._backend_tk.FigureCanvasTk.button_dblclick_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.button_press_event(self,event,dblclick=False)
matplotlib.backends._backend_tk.FigureCanvasTk.button_release_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.draw_idle(self)
matplotlib.backends._backend_tk.FigureCanvasTk.flush_events(self)
matplotlib.backends._backend_tk.FigureCanvasTk.get_tk_widget(self)
matplotlib.backends._backend_tk.FigureCanvasTk.key_press(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.key_release(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.motion_notify_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.new_timer(self,*args,**kwargs)
matplotlib.backends._backend_tk.FigureCanvasTk.resize(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.scroll_event(self,event)
matplotlib.backends._backend_tk.FigureCanvasTk.scroll_event_windows(self,event)
matplotlib.backends._backend_tk.FigureManagerTk(self,canvas,num,window)
matplotlib.backends._backend_tk.FigureManagerTk.__init__(self,canvas,num,window)
matplotlib.backends._backend_tk.FigureManagerTk._get_toolbar(self)
matplotlib.backends._backend_tk.FigureManagerTk._get_toolmanager(self)
matplotlib.backends._backend_tk.FigureManagerTk.destroy(self,*args)
matplotlib.backends._backend_tk.FigureManagerTk.full_screen_toggle(self)
matplotlib.backends._backend_tk.FigureManagerTk.get_window_title(self)
matplotlib.backends._backend_tk.FigureManagerTk.resize(self,width,height=None)
matplotlib.backends._backend_tk.FigureManagerTk.set_window_title(self,title)
matplotlib.backends._backend_tk.FigureManagerTk.show(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk(self,canvas,window)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._Button(self,text,file,command,extension='.gif')
matplotlib.backends._backend_tk.NavigationToolbar2Tk._Spacer(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.__init__(self,canvas,window)
matplotlib.backends._backend_tk.NavigationToolbar2Tk._init_toolbar(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.configure_subplots(self)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.destroy(self,*args)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.draw_rubberband(self,event,x0,y0,x1,y1)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.release(self,event)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.save_figure(self,*args)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.set_active(self,ind)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.set_cursor(self,cursor)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.set_message(self,s)
matplotlib.backends._backend_tk.NavigationToolbar2Tk.update(self)
matplotlib.backends._backend_tk.RubberbandTk(self,*args,**kwargs)
matplotlib.backends._backend_tk.RubberbandTk.__init__(self,*args,**kwargs)
matplotlib.backends._backend_tk.RubberbandTk.draw_rubberband(self,x0,y0,x1,y1)
matplotlib.backends._backend_tk.RubberbandTk.remove_rubberband(self)
matplotlib.backends._backend_tk.SaveFigureTk(backend_tools.SaveFigureBase)
matplotlib.backends._backend_tk.SaveFigureTk.trigger(self,*args)
matplotlib.backends._backend_tk.SetCursorTk(backend_tools.SetCursorBase)
matplotlib.backends._backend_tk.SetCursorTk.set_cursor(self,cursor)
matplotlib.backends._backend_tk.StatusbarTk(self,window,*args,**kwargs)
matplotlib.backends._backend_tk.StatusbarTk.__init__(self,window,*args,**kwargs)
matplotlib.backends._backend_tk.StatusbarTk.set_message(self,s)
matplotlib.backends._backend_tk.TimerTk(self,parent,*args,**kwargs)
matplotlib.backends._backend_tk.TimerTk.__init__(self,parent,*args,**kwargs)
matplotlib.backends._backend_tk.TimerTk._on_timer(self)
matplotlib.backends._backend_tk.TimerTk._timer_start(self)
matplotlib.backends._backend_tk.TimerTk._timer_stop(self)
matplotlib.backends._backend_tk.ToolTip(self,widget)
matplotlib.backends._backend_tk.ToolTip.__init__(self,widget)
matplotlib.backends._backend_tk.ToolTip.createToolTip(widget,text)
matplotlib.backends._backend_tk.ToolTip.hidetip(self)
matplotlib.backends._backend_tk.ToolTip.showtip(self,text)
matplotlib.backends._backend_tk.ToolbarTk(self,toolmanager,window)
matplotlib.backends._backend_tk.ToolbarTk._Button(self,text,image_file,toggle,frame)
matplotlib.backends._backend_tk.ToolbarTk.__init__(self,toolmanager,window)
matplotlib.backends._backend_tk.ToolbarTk._add_separator(self)
matplotlib.backends._backend_tk.ToolbarTk._button_click(self,name)
matplotlib.backends._backend_tk.ToolbarTk._get_groupframe(self,group)
matplotlib.backends._backend_tk.ToolbarTk.add_toolitem(self,name,group,position,image_file,description,toggle)
matplotlib.backends._backend_tk.ToolbarTk.remove_toolitem(self,name)
matplotlib.backends._backend_tk.ToolbarTk.toggle_toolitem(self,name,toggled)
matplotlib.backends._backend_tk._BackendTk(_Backend)
matplotlib.backends._backend_tk._BackendTk.mainloop()
matplotlib.backends._backend_tk._BackendTk.new_figure_manager_given_figure(cls,num,figure)
matplotlib.backends._backend_tk._BackendTk.trigger_manager_draw(manager)
matplotlib.backends._backend_tk.error_msg_tkpaint(msg,parent=None)
matplotlib.backends._backend_tk.raise_msg_to_str(msg)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/backend_agg.py----------------------------------------
A:matplotlib.backends.backend_agg.lock->threading.RLock()
A:matplotlib.backends.backend_agg.self._renderer->self._filter_renderers.pop()
A:matplotlib.backends.backend_agg.self.mathtext_parser->MathTextParser('Agg')
A:matplotlib.backends.backend_agg.self.bbox->matplotlib.transforms.Bbox.from_bounds(0, 0, self.width, self.height)
A:matplotlib.backends.backend_agg.extents->self.get_content_extents()
A:matplotlib.backends.backend_agg.region->self.copy_from_bbox(bbox)
A:matplotlib.backends.backend_agg.nch->numpy.ceil(npts / nmax)
A:matplotlib.backends.backend_agg.chsize->int(np.ceil(npts / nch))
A:matplotlib.backends.backend_agg.i0->numpy.arange(0, npts, chsize)
A:matplotlib.backends.backend_agg.i1->numpy.zeros_like(i0)
A:matplotlib.backends.backend_agg.p->Path(v, c)
A:matplotlib.backends.backend_agg.(ox, oy, width, height, descent, font_image, used_characters)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_agg.x->numpy.round(x + xd)
A:matplotlib.backends.backend_agg.y->numpy.round(y + yd)
A:matplotlib.backends.backend_agg.flags->get_hinting_flag()
A:matplotlib.backends.backend_agg.font->get_font(fname)
A:matplotlib.backends.backend_agg.(xo, yo)->get_font(fname).get_bitmap_offset()
A:matplotlib.backends.backend_agg.size->prop.get_size_in_points()
A:matplotlib.backends.backend_agg.texmanager->self.get_texmanager()
A:matplotlib.backends.backend_agg.fontsize->prop.get_size_in_points()
A:matplotlib.backends.backend_agg.(w, h, d)->self.get_text_width_height_descent(s, prop, ismath)
A:matplotlib.backends.backend_agg.(ox, oy, width, height, descent, fonts, used_characters)->self.mathtext_parser.parse(s, self.dpi, prop)
A:matplotlib.backends.backend_agg.(w, h)->get_font(fname).get_width_height()
A:matplotlib.backends.backend_agg.d->get_font(fname).get_descent()
A:matplotlib.backends.backend_agg.Z->numpy.array(Z * 255.0, np.uint8)
A:matplotlib.backends.backend_agg.fname->findfont(prop)
A:matplotlib.backends.backend_agg.(x1, y1, x2, y2)->self.copy_from_bbox(bbox).get_extents()
A:matplotlib.backends.backend_agg.(buffer, bounds)->self.tostring_rgba_minimized()
A:matplotlib.backends.backend_agg.img->numpy.asarray(img * 255.0, np.uint8)
A:matplotlib.backends.backend_agg.(img, ox, oy)->post_processing(img.reshape((h, w, 4)) / 255.0, self.dpi)
A:matplotlib.backends.backend_agg.gc->self.new_gc()
A:matplotlib.backends.backend_agg.renderer->self.get_renderer()
A:matplotlib.backends.backend_agg.self.renderer->RendererAgg(w, h, self.figure.dpi)
A:matplotlib.backends.backend_agg.fileobj->open(filename_or_obj, 'wb')
A:matplotlib.backends.backend_agg.metadata->OrderedDict({'Software': version_str})
A:matplotlib.backends.backend_agg.user_metadata->kwargs.pop('metadata', None)
A:matplotlib.backends.backend_agg.(buf, size)->self.print_to_buffer()
A:matplotlib.backends.backend_agg.image->PIL.Image.frombuffer('RGBA', size, buf, 'raw', 'RGBA', 0, 1)
A:matplotlib.backends.backend_agg.rgba->matplotlib.colors.to_rgba(rcParams['savefig.facecolor'])
A:matplotlib.backends.backend_agg.color->tuple([int(x * 255.0) for x in rgba[:3]])
A:matplotlib.backends.backend_agg.background->PIL.Image.new('RGB', size, color)
matplotlib.backends.backend_agg.FigureCanvasAgg(FigureCanvasBase)
matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.copy_from_bbox(self,bbox)
matplotlib.backends.backend_agg.FigureCanvasAgg.draw(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.get_renderer(self,cleared=False)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_png(self,filename_or_obj,*args,**kwargs)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_raw(self,filename_or_obj,*args,**kwargs)
matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.restore_region(self,region,bbox=None,xy=None)
matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb(self)
matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb(self)
matplotlib.backends.backend_agg.RendererAgg(self,width,height,dpi)
matplotlib.backends.backend_agg.RendererAgg.__getstate__(self)
matplotlib.backends.backend_agg.RendererAgg.__init__(self,width,height,dpi)
matplotlib.backends.backend_agg.RendererAgg.__setstate__(self,state)
matplotlib.backends.backend_agg.RendererAgg._get_agg_font(self,prop)
matplotlib.backends.backend_agg.RendererAgg._get_hinting_flag(self)
matplotlib.backends.backend_agg.RendererAgg._update_methods(self)
matplotlib.backends.backend_agg.RendererAgg.buffer_rgba(self)
matplotlib.backends.backend_agg.RendererAgg.clear(self)
matplotlib.backends.backend_agg.RendererAgg.debug(self)
matplotlib.backends.backend_agg.RendererAgg.draw_markers(self,*kl,**kw)
matplotlib.backends.backend_agg.RendererAgg.draw_mathtext(self,gc,x,y,s,prop,angle)
matplotlib.backends.backend_agg.RendererAgg.draw_path(self,gc,path,transform,rgbFace=None)
matplotlib.backends.backend_agg.RendererAgg.draw_path_collection(self,*kl,**kw)
matplotlib.backends.backend_agg.RendererAgg.draw_tex(self,gc,x,y,s,prop,angle,ismath='TeX!',mtext=None)
matplotlib.backends.backend_agg.RendererAgg.draw_text(self,gc,x,y,s,prop,angle,ismath=False,mtext=None)
matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height(self)
matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent(self,s,prop,ismath)
matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite(self)
matplotlib.backends.backend_agg.RendererAgg.option_scale_image(self)
matplotlib.backends.backend_agg.RendererAgg.points_to_pixels(self,points)
matplotlib.backends.backend_agg.RendererAgg.restore_region(self,region,bbox=None,xy=None)
matplotlib.backends.backend_agg.RendererAgg.start_filter(self)
matplotlib.backends.backend_agg.RendererAgg.stop_filter(self,post_processing)
matplotlib.backends.backend_agg.RendererAgg.tostring_argb(self)
matplotlib.backends.backend_agg.RendererAgg.tostring_rgb(self)
matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized(self)
matplotlib.backends.backend_agg._BackendAgg(_Backend)
matplotlib.backends.backend_agg.get_hinting_flag()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/qt_editor/formlayout.py----------------------------------------
A:matplotlib.backends.qt_editor.formlayout.colorChanged->matplotlib.backends.qt_compat.QtCore.Signal(QtGui.QColor)
A:matplotlib.backends.qt_editor.formlayout.self._color->matplotlib.backends.qt_compat.QtGui.QColor()
A:matplotlib.backends.qt_editor.formlayout.color->self.text()
A:matplotlib.backends.qt_editor.formlayout.pixmap->matplotlib.backends.qt_compat.QtGui.QPixmap(self.iconSize())
A:matplotlib.backends.qt_editor.formlayout.qcolor->to_qcolor(color)
A:matplotlib.backends.qt_editor.formlayout.rgba->matplotlib.colors.to_rgba(color)
A:matplotlib.backends.qt_editor.formlayout.self.lineedit->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(mcolors.to_hex(color.getRgbF(), keep_alpha=True), parent)
A:matplotlib.backends.qt_editor.formlayout.self.colorbtn->ColorButton(parent)
A:matplotlib.backends.qt_editor.formlayout.font->self.family.currentFont()
A:matplotlib.backends.qt_editor.formlayout.self.family->matplotlib.backends.qt_compat.QtWidgets.QFontComboBox(parent)
A:matplotlib.backends.qt_editor.formlayout.self.size->matplotlib.backends.qt_compat.QtWidgets.QComboBox(parent)
A:matplotlib.backends.qt_editor.formlayout.size->self.family.currentFont().pointSize()
A:matplotlib.backends.qt_editor.formlayout.self.italic->matplotlib.backends.qt_compat.QtWidgets.QCheckBox(self.tr('Italic'), parent)
A:matplotlib.backends.qt_editor.formlayout.self.bold->matplotlib.backends.qt_compat.QtWidgets.QCheckBox(self.tr('Bold'), parent)
A:matplotlib.backends.qt_editor.formlayout.text->edit.text()
A:matplotlib.backends.qt_editor.formlayout.update_buttons->matplotlib.backends.qt_compat.QtCore.Signal()
A:matplotlib.backends.qt_editor.formlayout.self.data->self.formwidget.get()
A:matplotlib.backends.qt_editor.formlayout.self.formlayout->matplotlib.backends.qt_compat.QtWidgets.QFormLayout(self)
A:matplotlib.backends.qt_editor.formlayout.dialog->FormDialog(data, title, comment, icon, parent, apply)
A:matplotlib.backends.qt_editor.formlayout.field->matplotlib.backends.qt_compat.QtWidgets.QLineEdit(repr(value), self)
A:matplotlib.backends.qt_editor.formlayout.value->eval(str(field.text()))
A:matplotlib.backends.qt_editor.formlayout.selindex->keys.index(selindex)
A:matplotlib.backends.qt_editor.formlayout.index->self.tabwidget.addTab(widget, title)
A:matplotlib.backends.qt_editor.formlayout.layout->matplotlib.backends.qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.qt_editor.formlayout.self.combobox->matplotlib.backends.qt_compat.QtWidgets.QComboBox()
A:matplotlib.backends.qt_editor.formlayout.self.stackwidget->matplotlib.backends.qt_compat.QtWidgets.QStackedWidget(self)
A:matplotlib.backends.qt_editor.formlayout.widget->FormWidget(data, comment=comment, parent=self)
A:matplotlib.backends.qt_editor.formlayout.self.tabwidget->matplotlib.backends.qt_compat.QtWidgets.QTabWidget()
A:matplotlib.backends.qt_editor.formlayout.self.formwidget->FormWidget(data, comment=comment, parent=self)
A:matplotlib.backends.qt_editor.formlayout.self.bboxbbox->matplotlib.backends.qt_compat.QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
A:matplotlib.backends.qt_editor.formlayout.apply_btn->bbox.addButton(QtWidgets.QDialogButtonBox.Apply)
A:matplotlib.backends.qt_editor.formlayout.icon->matplotlib.backends.qt_compat.QtWidgets.QWidget().style().standardIcon(QtWidgets.QStyle.SP_MessageBoxQuestion)
A:matplotlib.backends.qt_editor.formlayout.btn->self.bbox.button(btn_type)
A:matplotlib.backends.qt_editor.formlayout._app->matplotlib.backends.qt_compat.QtWidgets.QApplication([])
A:matplotlib.backends.qt_editor.formlayout.datalist->create_datalist_example()
A:matplotlib.backends.qt_editor.formlayout.datagroup->create_datagroup_example()
matplotlib.backends.qt_editor.formlayout.ColorButton(self,parent=None)
matplotlib.backends.qt_editor.formlayout.ColorButton.__init__(self,parent=None)
matplotlib.backends.qt_editor.formlayout.ColorButton.choose_color(self)
matplotlib.backends.qt_editor.formlayout.ColorButton.get_color(self)
matplotlib.backends.qt_editor.formlayout.ColorButton.set_color(self,color)
matplotlib.backends.qt_editor.formlayout.ColorLayout(self,color,parent=None)
matplotlib.backends.qt_editor.formlayout.ColorLayout.__init__(self,color,parent=None)
matplotlib.backends.qt_editor.formlayout.ColorLayout.text(self)
matplotlib.backends.qt_editor.formlayout.ColorLayout.update_color(self)
matplotlib.backends.qt_editor.formlayout.ColorLayout.update_text(self,color)
matplotlib.backends.qt_editor.formlayout.FontLayout(self,value,parent=None)
matplotlib.backends.qt_editor.formlayout.FontLayout.__init__(self,value,parent=None)
matplotlib.backends.qt_editor.formlayout.FontLayout.get_font(self)
matplotlib.backends.qt_editor.formlayout.FormComboWidget(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormComboWidget.__init__(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormComboWidget.get(self)
matplotlib.backends.qt_editor.formlayout.FormComboWidget.setup(self)
matplotlib.backends.qt_editor.formlayout.FormDialog(self,data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor.formlayout.FormDialog.__init__(self,data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor.formlayout.FormDialog.accept(self)
matplotlib.backends.qt_editor.formlayout.FormDialog.apply(self)
matplotlib.backends.qt_editor.formlayout.FormDialog.get(self)
matplotlib.backends.qt_editor.formlayout.FormDialog.register_float_field(self,field)
matplotlib.backends.qt_editor.formlayout.FormDialog.reject(self)
matplotlib.backends.qt_editor.formlayout.FormDialog.update_buttons(self)
matplotlib.backends.qt_editor.formlayout.FormTabWidget(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormTabWidget.__init__(self,datalist,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormTabWidget.get(self)
matplotlib.backends.qt_editor.formlayout.FormTabWidget.setup(self)
matplotlib.backends.qt_editor.formlayout.FormWidget(self,data,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormWidget.__init__(self,data,comment='',parent=None)
matplotlib.backends.qt_editor.formlayout.FormWidget.get(self)
matplotlib.backends.qt_editor.formlayout.FormWidget.get_dialog(self)
matplotlib.backends.qt_editor.formlayout.FormWidget.setup(self)
matplotlib.backends.qt_editor.formlayout.fedit(data,title='',comment='',icon=None,parent=None,apply=None)
matplotlib.backends.qt_editor.formlayout.font_is_installed(font)
matplotlib.backends.qt_editor.formlayout.is_edit_valid(edit)
matplotlib.backends.qt_editor.formlayout.qfont_to_tuple(font)
matplotlib.backends.qt_editor.formlayout.to_qcolor(color)
matplotlib.backends.qt_editor.formlayout.tuple_to_qfont(tup)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/qt_editor/formsubplottool.py----------------------------------------
A:matplotlib.backends.qt_editor.formsubplottool.layout->matplotlib.backends.qt_compat.QtWidgets.QHBoxLayout()
A:matplotlib.backends.qt_editor.formsubplottool.left->matplotlib.backends.qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.qt_editor.formsubplottool.right->matplotlib.backends.qt_compat.QtWidgets.QVBoxLayout()
A:matplotlib.backends.qt_editor.formsubplottool.box->matplotlib.backends.qt_compat.QtWidgets.QGroupBox('Spacings')
A:matplotlib.backends.qt_editor.formsubplottool.inner->matplotlib.backends.qt_compat.QtWidgets.QFormLayout(box)
A:matplotlib.backends.qt_editor.formsubplottool.self._widgets[side]widget->matplotlib.backends.qt_compat.QtWidgets.QDoubleSpinBox()
A:matplotlib.backends.qt_editor.formsubplottool.widget->matplotlib.backends.qt_compat.QtWidgets.QPushButton('Export values')
A:matplotlib.backends.qt_editor.formsubplottool.self._widgets[action]widget->matplotlib.backends.qt_compat.QtWidgets.QPushButton(action)
matplotlib.backends.qt_editor.formsubplottool.UiSubplotTool(self,*args,**kwargs)
matplotlib.backends.qt_editor.formsubplottool.UiSubplotTool.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/qt_editor/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/backends/qt_editor/figureoptions.py----------------------------------------
A:matplotlib.backends.qt_editor.figureoptions.basedir->os.path.join(matplotlib.rcParams['datapath'], 'images')
A:matplotlib.backends.qt_editor.figureoptions.(xmin, xmax)->map(float, axes.get_xlim())
A:matplotlib.backends.qt_editor.figureoptions.(ymin, ymax)->map(float, axes.get_ylim())
A:matplotlib.backends.qt_editor.figureoptions.xunits->axes.xaxis.get_units()
A:matplotlib.backends.qt_editor.figureoptions.yunits->axes.yaxis.get_units()
A:matplotlib.backends.qt_editor.figureoptions.match->re.match('(_line|_image)(\\d+)', label)
A:matplotlib.backends.qt_editor.figureoptions.label->image.get_label()
A:matplotlib.backends.qt_editor.figureoptions.curvelabels->sorted(linedict, key=cmp_key)
A:matplotlib.backends.qt_editor.figureoptions.color->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_color(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.ec->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_markeredgecolor(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.fc->matplotlib.colors.to_hex(mcolors.to_rgba(line.get_markerfacecolor(), line.get_alpha()), keep_alpha=True)
A:matplotlib.backends.qt_editor.figureoptions.has_curve->bool(curves)
A:matplotlib.backends.qt_editor.figureoptions.imagelabels->sorted(imagedict, key=cmp_key)
A:matplotlib.backends.qt_editor.figureoptions.cmap->image.get_cmap()
A:matplotlib.backends.qt_editor.figureoptions.(low, high)->image.get_clim()
A:matplotlib.backends.qt_editor.figureoptions.has_image->bool(images)
A:matplotlib.backends.qt_editor.figureoptions.orig_xlim->axes.get_xlim()
A:matplotlib.backends.qt_editor.figureoptions.orig_ylim->axes.get_ylim()
A:matplotlib.backends.qt_editor.figureoptions.general->matplotlib.backends.qt_editor.formlayout.fedit(datalist, title='Figure options', parent=parent, icon=get_icon('qt4_editor_options.svg'), apply=apply_callback).pop(0)
A:matplotlib.backends.qt_editor.figureoptions.rgba->matplotlib.colors.to_rgba(color)
A:matplotlib.backends.qt_editor.figureoptions.old_legend->axes.get_legend()
A:matplotlib.backends.qt_editor.figureoptions.new_legend->axes.legend(ncol=ncol)
A:matplotlib.backends.qt_editor.figureoptions.figure->axes.get_figure()
A:matplotlib.backends.qt_editor.figureoptions.data->matplotlib.backends.qt_editor.formlayout.fedit(datalist, title='Figure options', parent=parent, icon=get_icon('qt4_editor_options.svg'), apply=apply_callback)
matplotlib.backends.qt_editor.figureoptions.figure_edit(axes,parent=None)
matplotlib.backends.qt_editor.figureoptions.get_icon(name)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_quiver.py----------------------------------------
A:matplotlib.tests.test_quiver.(X, Y)->numpy.meshgrid(np.arange(2), np.arange(2))
A:matplotlib.tests.test_quiver.U->numpy.cos(X)
A:matplotlib.tests.test_quiver.V->numpy.sin(Y)
A:matplotlib.tests.test_quiver.Q->draw_quiver(ax)
A:matplotlib.tests.test_quiver.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_quiver.qk->ax.quiverkey(q, 1, 1, 2, 'Label')
A:matplotlib.tests.test_quiver.UV->numpy.ones_like(X)
A:matplotlib.tests.test_quiver.uv->dict(u=np.array([1.1]), v=np.array([2.0]))
A:matplotlib.tests.test_quiver.q0->ax.quiver([1], [1], uv['u'], uv['v'])
A:matplotlib.tests.test_quiver.q->ax.quiver(X, Y, U, V, angles=angles)
A:matplotlib.tests.test_quiver.x->numpy.arange(3)
A:matplotlib.tests.test_quiver.y->numpy.arange(3)
A:matplotlib.tests.test_quiver.u->numpy.ma.array(15.0 * np.ones((4,)))
A:matplotlib.tests.test_quiver.v->numpy.ma.array(15.0 * np.ones_like(u))
A:matplotlib.tests.test_quiver.UVangles->numpy.ones_like(X)
matplotlib.tests.test_quiver.draw_quiver(ax,**kw)
matplotlib.tests.test_quiver.test_angles_and_scale()
matplotlib.tests.test_quiver.test_bad_masked_sizes()
matplotlib.tests.test_quiver.test_barbs()
matplotlib.tests.test_quiver.test_barbs_pivot()
matplotlib.tests.test_quiver.test_no_warnings()
matplotlib.tests.test_quiver.test_quiver_animate()
matplotlib.tests.test_quiver.test_quiver_copy()
matplotlib.tests.test_quiver.test_quiver_key_memory_leak()
matplotlib.tests.test_quiver.test_quiver_key_pivot()
matplotlib.tests.test_quiver.test_quiver_memory_leak()
matplotlib.tests.test_quiver.test_quiver_single()
matplotlib.tests.test_quiver.test_quiver_with_key()
matplotlib.tests.test_quiver.test_quiver_xy()
matplotlib.tests.test_quiver.test_quiverkey_angles()
matplotlib.tests.test_quiver.test_zero_headlength()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_bases.py----------------------------------------
A:matplotlib.tests.test_backend_bases.id->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_backend_bases.offsets->numpy.arange(20).reshape((10, 2))
A:matplotlib.tests.test_backend_bases.rb->RendererBase()
A:matplotlib.tests.test_backend_bases.raw_paths->list(rb._iter_collection_raw_paths(master_transform, paths, all_transforms))
A:matplotlib.tests.test_backend_bases.gc->RendererBase().new_gc()
A:matplotlib.tests.test_backend_bases.uses->RendererBase()._iter_collection_uses_per_path(paths, all_transforms, offsets, facecolors, edgecolors)
A:matplotlib.tests.test_backend_bases.seen->numpy.bincount(ids, minlength=len(raw_paths))
A:matplotlib.tests.test_backend_bases.test_dir->tempfile.mkdtemp()
A:matplotlib.tests.test_backend_bases.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_bases.canvas->FigureCanvasBase(fig)
A:matplotlib.tests.test_backend_bases.filename->FigureCanvasBase(fig).get_default_filename()
matplotlib.tests.test_backend_bases.test_get_default_filename()
matplotlib.tests.test_backend_bases.test_get_default_filename_already_exists()
matplotlib.tests.test_backend_bases.test_uses_per_path()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_ttconv.py----------------------------------------
A:matplotlib.tests.test_ttconv.fontname->os.path.abspath(fontname)
A:matplotlib.tests.test_ttconv.fontprop->FontProperties(fname=fontname, size=80)
A:matplotlib.tests.test_ttconv.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_ttconv.ax->matplotlib.pyplot.figure().add_subplot(111)
matplotlib.tests.test_ttconv.test_truetype_conversion()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_font_manager.py----------------------------------------
A:matplotlib.tests.test_font_manager.font->findfont(FontProperties(family=['sans-serif']))
A:matplotlib.tests.test_font_manager.cmap->findfont(FontProperties(family=['sans-serif'])).get_charmap()
A:matplotlib.tests.test_font_manager.copy->json_load(name)
A:matplotlib.tests.test_font_manager.fp->FontProperties(**prop)
A:matplotlib.tests.test_font_manager.font1->get_font(font, hinting_factor=1)
A:matplotlib.tests.test_font_manager.expected->get_font(font, hinting_factor=1).get_width_height()
A:matplotlib.tests.test_font_manager.hinted_font->get_font(font, hinting_factor=factor)
matplotlib.tests.test_font_manager.test_font_priority()
matplotlib.tests.test_font_manager.test_get_fontconfig_fonts()
matplotlib.tests.test_font_manager.test_hinting_factor(factor)
matplotlib.tests.test_font_manager.test_json_serialization()
matplotlib.tests.test_font_manager.test_otf()
matplotlib.tests.test_font_manager.test_score_weight()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_afm.py----------------------------------------
A:matplotlib.tests.test_afm.byte_str->inp_str.encode('utf8')
A:matplotlib.tests.test_afm.ret->matplotlib.afm._to_str(byte_str)
A:matplotlib.tests.test_afm.fh->BytesIO(AFM_TEST_DATA)
A:matplotlib.tests.test_afm.header->matplotlib.afm._parse_header(fh)
A:matplotlib.tests.test_afm.metrics->matplotlib.afm._parse_char_metrics(fh)
A:matplotlib.tests.test_afm.fm->matplotlib.afm.AFM(fh)
matplotlib.tests.test_afm.test_get_familyname_guessed()
matplotlib.tests.test_afm.test_nonascii_str()
matplotlib.tests.test_afm.test_parse_char_metrics()
matplotlib.tests.test_afm.test_parse_header()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_colors.py----------------------------------------
A:matplotlib.tests.test_colors.colorlist->numpy.empty((n, 4), float)
A:matplotlib.tests.test_colors.colorlist[:, 0]->numpy.linspace(0, 1, n)
A:matplotlib.tests.test_colors.colorlist[:, 2]->numpy.linspace(1, 0, n)
A:matplotlib.tests.test_colors.lsc->matplotlib.colors.LinearSegmentedColormap.from_list('lsc', colorlist)
A:matplotlib.tests.test_colors.lc->matplotlib.colors.ListedColormap(colorlist)
A:matplotlib.tests.test_colors.lsc3->matplotlib.colors.LinearSegmentedColormap.from_list('lsc', colorlist)._resample(3)
A:matplotlib.tests.test_colors.lc3->matplotlib.colors.ListedColormap(colorlist)._resample(3)
A:matplotlib.tests.test_colors.expected->numpy.ma.masked_array([-1, -99, 0, 2, 3], mask=[0, 1, 0, 0, 0])
A:matplotlib.tests.test_colors.cm_copy->copy.copy(cm)
A:matplotlib.tests.test_colors.ret1->cm_copy([-1, 0, 0.5, 1, np.nan, np.inf])
A:matplotlib.tests.test_colors.cm2->matplotlib.colors.ListedColormap(s, N=5)
A:matplotlib.tests.test_colors.ret2->cm_copy([-1, 0, 0.5, 1, np.nan, np.inf])
A:matplotlib.tests.test_colors.cmap->matplotlib.pyplot.get_cmap(name)
A:matplotlib.tests.test_colors.anative->numpy.ma.masked_invalid(np.array(a, dtype=dt))
A:matplotlib.tests.test_colors.aforeign->numpy.ma.masked_invalid(np.array(a, dtype=dt)).byteswap().newbyteorder()
A:matplotlib.tests.test_colors.bn->matplotlib.colors.BoundaryNorm(boundaries, len(boundaries))
A:matplotlib.tests.test_colors.ncolors->len(boundaries)
A:matplotlib.tests.test_colors.ret->bn(v)
A:matplotlib.tests.test_colors.vals->numpy.array([-30, -1, 2, 6], dtype=float)
A:matplotlib.tests.test_colors.ln->matplotlib.colors.LogNorm(clip=True, vmax=5)
A:matplotlib.tests.test_colors.a->numpy.array([-0.5, 0, 1, 8, 16], dtype=float)
A:matplotlib.tests.test_colors.pnorm->matplotlib.colors.PowerNorm(2, vmin=2, vmax=8, clip=False)
A:matplotlib.tests.test_colors.norm->matplotlib.colors.SymLogNorm(1e-05, vmin=-1, vmax=1)
A:matplotlib.tests.test_colors.normed_vals->norm(vals)
A:matplotlib.tests.test_colors.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_colors.cbar->matplotlib.colorbar.ColorbarBase(fig.add_subplot(111), norm=norm)
A:matplotlib.tests.test_colors.ticks->matplotlib.colorbar.ColorbarBase(fig.add_subplot(111), norm=norm).get_ticks()
A:matplotlib.tests.test_colors.masked_array->numpy.ma.array(vals)
A:matplotlib.tests.test_colors.data->numpy.arange(-10, 10, 1, dtype=float)
A:matplotlib.tests.test_colors.(cmap, norm)->matplotlib.colors.from_levels_and_colors(levels, colors[0:i1], extend=extend)
A:matplotlib.tests.test_colors.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_colors.m->matplotlib.pyplot.pcolormesh(data, cmap=cmap, norm=norm)
A:matplotlib.tests.test_colors.clr->matplotlib.colors.to_rgba_array(colors)
A:matplotlib.tests.test_colors.d_val->numpy.ma.array([1], mask=True)
A:matplotlib.tests.test_colors.tt->numpy.random.random(a_shape)
A:matplotlib.tests.test_colors.fname->matplotlib.cbook.get_sample_data('jacksboro_fault_dem.npz', asfileobj=False)
A:matplotlib.tests.test_colors.dem->numpy.load(fname)
A:matplotlib.tests.test_colors.ls->matplotlib.colors.LightSource(az, elev)
A:matplotlib.tests.test_colors.(fig, axes)->matplotlib.pyplot.subplots(nrows=3, ncols=3)
A:matplotlib.tests.test_colors.rgb->matplotlib.colors.LightSource(az, elev).shade(z, cmap)
A:matplotlib.tests.test_colors.z->numpy.cos(phi)
A:matplotlib.tests.test_colors.illum->numpy.array(illum)
A:matplotlib.tests.test_colors.(dy, dx)->numpy.gradient(-z)
A:matplotlib.tests.test_colors.dz->numpy.ones_like(dy)
A:matplotlib.tests.test_colors.normals->numpy.dstack([dx, dy, dz])
A:matplotlib.tests.test_colors.dividers[i, j, 0]->numpy.linalg.norm(vec)
A:matplotlib.tests.test_colors.intensity->numpy.tensordot(normals, illum, axes=(2, 0))
A:matplotlib.tests.test_colors.h1->matplotlib.colors.LightSource(az, elev).hillshade(z)
A:matplotlib.tests.test_colors.h2->alternative_hillshade(az, elev, z)
A:matplotlib.tests.test_colors.(theta, phi)->_azimuth2math(azimuth, elevation)
A:matplotlib.tests.test_colors.(a, b, c)->_sph2cart(theta, phi)
A:matplotlib.tests.test_colors.h->matplotlib.colors.LightSource(az, elev).hillshade(z)
A:matplotlib.tests.test_colors.theta->numpy.radians((90 - azimuth) % 360)
A:matplotlib.tests.test_colors.phi->numpy.radians(90 - elevation)
A:matplotlib.tests.test_colors.s->pd.Series(lst)
A:matplotlib.tests.test_colors.cm1->matplotlib.colors.ListedColormap(lst, N=5)
A:matplotlib.tests.test_colors.cmap_r->matplotlib.pyplot.get_cmap(name).reversed()
A:matplotlib.tests.test_colors.matplotlib.rcParams['axes.prop_cycle']->cycler('color', ['8e4585', 'r'])
A:matplotlib.tests.test_colors.mydata->numpy.arange(-10, 10, 1, dtype=float).view(MyArray)
A:matplotlib.tests.test_colors.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_colors.warn->recwarn.pop(UserWarning)
matplotlib.tests.test_colors._azimuth2math(azimuth,elevation)
matplotlib.tests.test_colors._inverse_tester(norm_instance,vals)
matplotlib.tests.test_colors._mask_tester(norm_instance,vals)
matplotlib.tests.test_colors._scalar_tester(norm_instance,vals)
matplotlib.tests.test_colors._sph2cart(theta,phi)
matplotlib.tests.test_colors.test_BoundaryNorm()
matplotlib.tests.test_colors.test_LogNorm()
matplotlib.tests.test_colors.test_Normalize()
matplotlib.tests.test_colors.test_PowerNorm()
matplotlib.tests.test_colors.test_SymLogNorm()
matplotlib.tests.test_colors.test_SymLogNorm_colorbar()
matplotlib.tests.test_colors.test_SymLogNorm_single_zero()
matplotlib.tests.test_colors.test_autoscale_masked()
matplotlib.tests.test_colors.test_cmap_and_norm_from_levels_and_colors()
matplotlib.tests.test_colors.test_cmap_and_norm_from_levels_and_colors2()
matplotlib.tests.test_colors.test_cn()
matplotlib.tests.test_colors.test_color_names()
matplotlib.tests.test_colors.test_colormap_copy()
matplotlib.tests.test_colors.test_colormap_endian()
matplotlib.tests.test_colors.test_colormap_reversing(name)
matplotlib.tests.test_colors.test_colors_no_float()
matplotlib.tests.test_colors.test_conversions()
matplotlib.tests.test_colors.test_grey_gray()
matplotlib.tests.test_colors.test_light_source_hillshading()
matplotlib.tests.test_colors.test_light_source_masked_shading()
matplotlib.tests.test_colors.test_light_source_planar_hillshading()
matplotlib.tests.test_colors.test_light_source_shading_default()
matplotlib.tests.test_colors.test_light_source_topo_surface()
matplotlib.tests.test_colors.test_ndarray_subclass_norm(recwarn)
matplotlib.tests.test_colors.test_pandas_iterable(pd)
matplotlib.tests.test_colors.test_resample()
matplotlib.tests.test_colors.test_rgb_hsv_round_trip()
matplotlib.tests.test_colors.test_same_color()
matplotlib.tests.test_colors.test_tableau_order()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_widgets.py----------------------------------------
A:matplotlib.tests.test_widgets.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_widgets.event->mock.Mock()
A:matplotlib.tests.test_widgets.func->getattr(tool, etype)
A:matplotlib.tests.test_widgets.ax->get_ax()
A:matplotlib.tests.test_widgets.tool->matplotlib.widgets.PolygonSelector(ax, onselect)
A:matplotlib.tests.test_widgets.check->matplotlib.widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True))
A:matplotlib.tests.test_widgets.cid->matplotlib.widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True)).on_clicked(lambda : None)
A:matplotlib.tests.test_widgets.rax1->matplotlib.pyplot.axes([0.05, 0.7, 0.15, 0.15])
A:matplotlib.tests.test_widgets.rax2->matplotlib.pyplot.axes([0.05, 0.2, 0.15, 0.15])
A:matplotlib.tests.test_widgets.slider_->matplotlib.widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0, valinit=5.0)
A:matplotlib.tests.test_widgets.slider->matplotlib.widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0, valinit=25.0)
matplotlib.tests.test_widgets.check_lasso_selector(**kwargs)
matplotlib.tests.test_widgets.check_polygon_selector(event_sequence,expected_result,selections_count)
matplotlib.tests.test_widgets.check_rectangle(**kwargs)
matplotlib.tests.test_widgets.check_span(*args,**kwargs)
matplotlib.tests.test_widgets.do_event(tool,etype,button=1,xdata=0,ydata=0,key=None,step=1)
matplotlib.tests.test_widgets.get_ax()
matplotlib.tests.test_widgets.polygon_place_vertex(xdata,ydata)
matplotlib.tests.test_widgets.test_CheckButtons()
matplotlib.tests.test_widgets.test_check_radio_buttons_image()
matplotlib.tests.test_widgets.test_ellipse()
matplotlib.tests.test_widgets.test_lasso_selector()
matplotlib.tests.test_widgets.test_polygon_selector()
matplotlib.tests.test_widgets.test_rectangle_handles()
matplotlib.tests.test_widgets.test_rectangle_selector()
matplotlib.tests.test_widgets.test_slider_slidermin_slidermax()
matplotlib.tests.test_widgets.test_slider_slidermin_slidermax_invalid()
matplotlib.tests.test_widgets.test_slider_valmin_valmax()
matplotlib.tests.test_widgets.test_span_selector()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_svg.py----------------------------------------
A:matplotlib.tests.test_backend_svg.needs_usetex->pytest.mark.xfail(not matplotlib.checkdep_usetex(True), reason='This test needs a TeX installation')
A:matplotlib.tests.test_backend_svg.fig->Figure()
A:matplotlib.tests.test_backend_svg.ax->Figure().add_subplot(111)
A:matplotlib.tests.test_backend_svg.x->numpy.linspace(0, 4 * np.pi, 50)
A:matplotlib.tests.test_backend_svg.y->numpy.sin(x)
A:matplotlib.tests.test_backend_svg.yerr->numpy.ones_like(y)
A:matplotlib.tests.test_backend_svg.(a, b, c)->Figure().add_subplot(111).errorbar(x, y, yerr=yerr, fmt='ko')
A:matplotlib.tests.test_backend_svg.fd->BytesIO()
A:matplotlib.tests.test_backend_svg.buf->BytesIO().read().decode()
A:matplotlib.tests.test_backend_svg.parser->xml.parsers.expat.ParserCreate()
A:matplotlib.tests.test_backend_svg.(X, Y)->numpy.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))
A:matplotlib.tests.test_backend_svg.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_backend_svg.expected->'<a xlink:href="{0}">'.format(test_url)
A:matplotlib.tests.test_backend_svg.(fig, ax)->matplotlib.pyplot.subplots()
matplotlib.tests.test_backend_svg._test_determinism_save(filename,usetex)
matplotlib.tests.test_backend_svg.test_bold_font_output()
matplotlib.tests.test_backend_svg.test_bold_font_output_with_none_fonttype()
matplotlib.tests.test_backend_svg.test_determinism(filename,usetex)
matplotlib.tests.test_backend_svg.test_fill_black_with_alpha()
matplotlib.tests.test_backend_svg.test_missing_psfont(monkeypatch)
matplotlib.tests.test_backend_svg.test_noscale()
matplotlib.tests.test_backend_svg.test_text_urls()
matplotlib.tests.test_backend_svg.test_visibility()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_preprocess_data.py----------------------------------------
A:matplotlib.tests.test_preprocess_data.data->pd.DataFrame({'a': np.array([1, 2], dtype=np.int32), 'b': np.array([8, 9], dtype=np.int32), 'w': ['NOT', 'NOT']})
A:matplotlib.tests.test_preprocess_data.func->_preprocess_data(replace_all_args=True, replace_names=['w'], label_namer='y')(funcy)
A:matplotlib.tests.test_preprocess_data.func2->_preprocess_data(replace_all_args=True, replace_names=['w'], label_namer='y', positional_parameter_names=['x', 'y', 'ls', 'label', 'w'])(funcy)
matplotlib.tests.test_preprocess_data.plot_func(ax,x,y,ls='x',label=None,w='xyz')
matplotlib.tests.test_preprocess_data.plot_func_varargs(ax,*args,**kwargs)
matplotlib.tests.test_preprocess_data.test_compiletime_checks()
matplotlib.tests.test_preprocess_data.test_docstring_addition()
matplotlib.tests.test_preprocess_data.test_function_call_replace_all()
matplotlib.tests.test_preprocess_data.test_function_call_with_dict_data(func)
matplotlib.tests.test_preprocess_data.test_function_call_with_dict_data_not_in_data(func)
matplotlib.tests.test_preprocess_data.test_function_call_with_pandas_data(func,pd)
matplotlib.tests.test_preprocess_data.test_function_call_with_replace_all_args()
matplotlib.tests.test_preprocess_data.test_function_call_without_data(func)
matplotlib.tests.test_preprocess_data.test_label_problems_at_runtime()
matplotlib.tests.test_preprocess_data.test_more_args_than_pos_parameter()
matplotlib.tests.test_preprocess_data.test_no_label_replacements()
matplotlib.tests.test_preprocess_data.test_positional_parameter_names_as_function()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_compare_images.py----------------------------------------
A:matplotlib.tests.test_compare_images.(baseline_dir, result_dir)->_image_directories(lambda : 'dummy func')
A:matplotlib.tests.test_compare_images.im1->os.path.join(baseline_dir, im1)
A:matplotlib.tests.test_compare_images.im2_src->os.path.join(baseline_dir, im2)
A:matplotlib.tests.test_compare_images.im2->os.path.join(result_dir, im2)
A:matplotlib.tests.test_compare_images.results->compare_images(im1, im2, tol=tol, in_decorator=True)
A:matplotlib.tests.test_compare_images.(fig, ax)->matplotlib.pyplot.subplots(figsize=(6.4, 4), dpi=100)
A:matplotlib.tests.test_compare_images.fig->nosetest_simple_figure()
A:matplotlib.tests.test_compare_images.nose->pytest.importorskip('nose')
A:matplotlib.tests.test_compare_images.func->image_comparison(**kwargs)(func)
A:matplotlib.tests.test_compare_images.loader->pytest.importorskip('nose').loader.TestLoader()
A:matplotlib.tests.test_compare_images.suite->pytest.importorskip('nose').loader.TestLoader().loadTestsFromGenerator(func, 'matplotlib.tests.test_compare_images')
A:matplotlib.tests.test_compare_images.output->io.StringIO()
A:matplotlib.tests.test_compare_images.result->TestResultVerifier(stream=output, descriptions=True, verbosity=1)
matplotlib.tests.test_compare_images.nosetest_empty()
matplotlib.tests.test_compare_images.nosetest_manual_text_removal()
matplotlib.tests.test_compare_images.nosetest_simple_figure()
matplotlib.tests.test_compare_images.test_image_comparison_expect_rms(im1,im2,tol,expect_rms)
matplotlib.tests.test_compare_images.test_nose_image_comparison(func,kwargs,errors,failures,dots,monkeypatch)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_contour.py----------------------------------------
A:matplotlib.tests.test_contour.x->numpy.arange(-3.0, 3.0, delta)
A:matplotlib.tests.test_contour.y->numpy.arange(-2.0, 2.0, delta)
A:matplotlib.tests.test_contour.z->numpy.arange(12).reshape((3, 4))
A:matplotlib.tests.test_contour.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_contour.ax->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_contour.(xg, yg)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_contour.g->numpy.random.random((9, 10))
A:matplotlib.tests.test_contour.b->numpy.random.random((9, 9))
A:matplotlib.tests.test_contour.(fig, ax)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_contour.cs->matplotlib.pyplot.contour(x, y, r)
A:matplotlib.tests.test_contour.(x, y)->numpy.meshgrid(np.linspace(-2, 2, 4), np.linspace(-2, 2, 4))
A:matplotlib.tests.test_contour.pts->numpy.array([(1.5, 3.0), (1.5, 4.4), (1.5, 6.0)])
A:matplotlib.tests.test_contour.(_, axes)->matplotlib.pyplot.subplots(2, 4)
A:matplotlib.tests.test_contour.data->numpy.arange(12).reshape(3, 4)
A:matplotlib.tests.test_contour.c->matplotlib.pyplot.figure().add_subplot(111).contour(data, colors=colors[:-1], levels=levels, extend=extend)
A:matplotlib.tests.test_contour.base->datetime.datetime(2013, 1, 1)
A:matplotlib.tests.test_contour.(z1, z2)->numpy.meshgrid(np.arange(20), np.arange(20))
A:matplotlib.tests.test_contour.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_contour.CS->matplotlib.pyplot.figure().add_subplot(111).contour(X, Y, Z)
A:matplotlib.tests.test_contour.mask->numpy.where(np.random.rand(n, n) >= mask_level, True, False)
A:matplotlib.tests.test_contour.locator->matplotlib.pyplot.MaxNLocator(nbins=4, symmetric=True)
A:matplotlib.tests.test_contour.qcg->matplotlib._contour.QuadContourGenerator(arr, arr, arr, None, True, 0)
A:matplotlib.tests.test_contour.r->numpy.sqrt(x ** 2 + y ** 2)
matplotlib.tests.test_contour.test_circular_contour_warning()
matplotlib.tests.test_contour.test_contour_1x1_array()
matplotlib.tests.test_contour.test_contour_badlevel_fmt()
matplotlib.tests.test_contour.test_contour_datetime_axis()
matplotlib.tests.test_contour.test_contour_empty_levels()
matplotlib.tests.test_contour.test_contour_labels_size_color()
matplotlib.tests.test_contour.test_contour_manual_labels()
matplotlib.tests.test_contour.test_contour_shape_1d_valid()
matplotlib.tests.test_contour.test_contour_shape_2d_valid()
matplotlib.tests.test_contour.test_contour_shape_invalid_1()
matplotlib.tests.test_contour.test_contour_shape_invalid_2()
matplotlib.tests.test_contour.test_contour_shape_mismatch_1()
matplotlib.tests.test_contour.test_contour_shape_mismatch_2()
matplotlib.tests.test_contour.test_contour_shape_mismatch_3()
matplotlib.tests.test_contour.test_contour_shape_mismatch_4()
matplotlib.tests.test_contour.test_contour_uniform_z()
matplotlib.tests.test_contour.test_contourf_decreasing_levels()
matplotlib.tests.test_contour.test_contourf_symmetric_locator()
matplotlib.tests.test_contour.test_corner_mask()
matplotlib.tests.test_contour.test_given_colors_levels_and_extends()
matplotlib.tests.test_contour.test_internal_cpp_api()
matplotlib.tests.test_contour.test_labels()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_pickle.py----------------------------------------
A:matplotlib.tests.test_pickle.fig->matplotlib.pyplot.gcf()
A:matplotlib.tests.test_pickle.ax->matplotlib.pyplot.subplot(111, polar=True)
A:matplotlib.tests.test_pickle.datauv->numpy.linspace(0, 10, 80).reshape(10, 8)
A:matplotlib.tests.test_pickle.v->numpy.sin(v * -0.6)
A:matplotlib.tests.test_pickle.result_fh->BytesIO()
A:matplotlib.tests.test_pickle._->fc(fig)
A:matplotlib.tests.test_pickle.renderer->RendererAgg(10, 20, 30)
A:matplotlib.tests.test_pickle.manager->new_figure_manager(1000)
A:matplotlib.tests.test_pickle.pf->six.moves.cPickle.dumps(obj)
A:matplotlib.tests.test_pickle.self.identity->matplotlib.transforms.IdentityTransform()
A:matplotlib.tests.test_pickle.self.identity2->matplotlib.transforms.IdentityTransform()
A:matplotlib.tests.test_pickle.self.composite->matplotlib.transforms.CompositeGenericTransform(self.identity, self.identity2)
A:matplotlib.tests.test_pickle.self.wrapper->matplotlib.transforms.TransformWrapper(self.composite)
A:matplotlib.tests.test_pickle.self.composite2->matplotlib.transforms.CompositeGenericTransform(self.wrapper, self.identity)
A:matplotlib.tests.test_pickle.obj->six.moves.cPickle.loads(pf)
A:matplotlib.tests.test_pickle.r->rrulewrapper(2)
matplotlib.tests.test_pickle.TransformBlob(self)
matplotlib.tests.test_pickle.TransformBlob.__init__(self)
matplotlib.tests.test_pickle.test_complete()
matplotlib.tests.test_pickle.test_image()
matplotlib.tests.test_pickle.test_no_pyplot()
matplotlib.tests.test_pickle.test_polar()
matplotlib.tests.test_pickle.test_renderer()
matplotlib.tests.test_pickle.test_rrulewrapper()
matplotlib.tests.test_pickle.test_simple()
matplotlib.tests.test_pickle.test_transform()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_scale.py----------------------------------------
A:matplotlib.tests.test_scale.ax->matplotlib.pyplot.figure().add_subplot(111, xscale='logit')
A:matplotlib.tests.test_scale.x->numpy.logspace(-1, 1)
A:matplotlib.tests.test_scale.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_scale.buf->io.BytesIO()
A:matplotlib.tests.test_scale.xs->numpy.random.normal(size=int(1000.0))
A:matplotlib.tests.test_scale.tform->(ax.transAxes + ax.transData.inverted()).inverted()
A:matplotlib.tests.test_scale.s->repr(Log10Transform(nonpos='clip'))
A:matplotlib.tests.test_scale.(fig, ((ax1, ax2), (ax3, ax4)))->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_scale.xdata->numpy.arange(0, 10, 0.01)
A:matplotlib.tests.test_scale.ydata->numpy.exp(-xdata)
matplotlib.tests.test_scale.test_extra_kwargs_raise()
matplotlib.tests.test_scale.test_log_scales()
matplotlib.tests.test_scale.test_log_scatter()
matplotlib.tests.test_scale.test_logit_scales()
matplotlib.tests.test_scale.test_logscale_invert_transform()
matplotlib.tests.test_scale.test_logscale_mask()
matplotlib.tests.test_scale.test_logscale_nonpos_values()
matplotlib.tests.test_scale.test_logscale_subs()
matplotlib.tests.test_scale.test_logscale_transform_repr()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_lines.py----------------------------------------
A:matplotlib.tests.test_lines.x->numpy.array([0, 9])
A:matplotlib.tests.test_lines.y->numpy.array([1, 1])
A:matplotlib.tests.test_lines.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_lines.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_lines.l->matplotlib.lines.Line2D(x, y)
A:matplotlib.tests.test_lines.t_no_line->min(repeat(fig.canvas.draw, number=1, repeat=3))
A:matplotlib.tests.test_lines.t_unvisible_line->min(repeat(fig.canvas.draw, number=1, repeat=3))
A:matplotlib.tests.test_lines.cs->matplotlib.pyplot.figure().add_subplot(1, 1, 1).contour(np.random.randn(20, 30), linestyles=[(0, (3, 3))])
A:matplotlib.tests.test_lines.line->matplotlib.lines.Line2D([], [])
A:matplotlib.tests.test_lines.(fig, axs)->matplotlib.pyplot.subplots(6)
A:matplotlib.tests.test_lines.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_lines.(line,)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).plot(x, y)
A:matplotlib.tests.test_lines.colors->itertools.cycle([[0, 0, 1], 'g', '#ff0000', 'c', 'm', 'y', np.array([0, 0, 0])])
A:matplotlib.tests.test_lines.color->next(colors)
A:matplotlib.tests.test_lines.th->numpy.linspace(0, 32)
A:matplotlib.tests.test_lines.cy->cycler(matplotlib.rcParams['axes.prop_cycle'])
matplotlib.tests.test_lines.test_drawstyle_variants()
matplotlib.tests.test_lines.test_invisible_Line_rendering()
matplotlib.tests.test_lines.test_line_colors()
matplotlib.tests.test_lines.test_line_dashes()
matplotlib.tests.test_lines.test_linestyle_variants()
matplotlib.tests.test_lines.test_lw_scaling()
matplotlib.tests.test_lines.test_marker_fill_styles()
matplotlib.tests.test_lines.test_nan_is_sorted()
matplotlib.tests.test_lines.test_set_drawstyle()
matplotlib.tests.test_lines.test_set_line_coll_dash()
matplotlib.tests.test_lines.test_set_line_coll_dash_image()
matplotlib.tests.test_lines.test_valid_drawstyles()
matplotlib.tests.test_lines.test_valid_linestyles()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_constrainedlayout.py----------------------------------------
A:matplotlib.tests.test_constrainedlayout.pcm->example_pcolor(ax, fontsize=12)
A:matplotlib.tests.test_constrainedlayout.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_constrainedlayout.ax->matplotlib.pyplot.figure().add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_constrainedlayout.(fig, axs)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_constrainedlayout.gs->matplotlib.gridspec.GridSpec(3, 3, figure=fig)
A:matplotlib.tests.test_constrainedlayout.gsl->matplotlib.gridspec.GridSpecFromSubplotSpec(1, 2, gs0[0])
A:matplotlib.tests.test_constrainedlayout.gsr->matplotlib.gridspec.GridSpecFromSubplotSpec(1, 2, gs[1])
A:matplotlib.tests.test_constrainedlayout.gs0->matplotlib.gridspec.GridSpec(6, 2, figure=fig)
A:matplotlib.tests.test_constrainedlayout.gsl0->matplotlib.gridspec.GridSpecFromSubplotSpec(2, 2, gsl[1], height_ratios=[2.0, 1.0])
A:matplotlib.tests.test_constrainedlayout.ax1->matplotlib.pyplot.figure().add_subplot(gs[0, 0])
A:matplotlib.tests.test_constrainedlayout.ax2->matplotlib.pyplot.figure().add_axes([0, 0, 1, 1]).twiny()
A:matplotlib.tests.test_constrainedlayout.(fig, ax)->matplotlib.pyplot.subplots(constrained_layout=True)
A:matplotlib.tests.test_constrainedlayout.ax3->matplotlib.pyplot.figure().add_subplot(gs[1:, 0:2])
A:matplotlib.tests.test_constrainedlayout.ax4->matplotlib.pyplot.figure().add_subplot(gs[1:, -1])
A:matplotlib.tests.test_constrainedlayout.gx->numpy.linspace(-5, 5, 4)
A:matplotlib.tests.test_constrainedlayout.img->numpy.hypot(gx, gx[:, None])
A:matplotlib.tests.test_constrainedlayout.mesh->matplotlib.pyplot.figure().add_axes([0, 0, 1, 1]).pcolormesh(gx, gx, img)
matplotlib.tests.test_constrainedlayout.example_pcolor(ax,fontsize=12)
matplotlib.tests.test_constrainedlayout.example_plot(ax,fontsize=12,nodec=False)
matplotlib.tests.test_constrainedlayout.test_constrained_layout1()
matplotlib.tests.test_constrainedlayout.test_constrained_layout10()
matplotlib.tests.test_constrainedlayout.test_constrained_layout11()
matplotlib.tests.test_constrainedlayout.test_constrained_layout11rat()
matplotlib.tests.test_constrainedlayout.test_constrained_layout12()
matplotlib.tests.test_constrainedlayout.test_constrained_layout13()
matplotlib.tests.test_constrainedlayout.test_constrained_layout14()
matplotlib.tests.test_constrainedlayout.test_constrained_layout15()
matplotlib.tests.test_constrainedlayout.test_constrained_layout16()
matplotlib.tests.test_constrainedlayout.test_constrained_layout17()
matplotlib.tests.test_constrainedlayout.test_constrained_layout18()
matplotlib.tests.test_constrainedlayout.test_constrained_layout19()
matplotlib.tests.test_constrainedlayout.test_constrained_layout2()
matplotlib.tests.test_constrainedlayout.test_constrained_layout20()
matplotlib.tests.test_constrainedlayout.test_constrained_layout3()
matplotlib.tests.test_constrainedlayout.test_constrained_layout4()
matplotlib.tests.test_constrainedlayout.test_constrained_layout5()
matplotlib.tests.test_constrainedlayout.test_constrained_layout6()
matplotlib.tests.test_constrainedlayout.test_constrained_layout7()
matplotlib.tests.test_constrainedlayout.test_constrained_layout8()
matplotlib.tests.test_constrainedlayout.test_constrained_layout8()
matplotlib.tests.test_constrainedlayout.test_constrained_layout9()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_pgf.py----------------------------------------
A:matplotlib.tests.test_backend_pgf.(baseline_dir, result_dir)->_image_directories(lambda : 'dummy func')
A:matplotlib.tests.test_backend_pgf.latex->matplotlib.compat.subprocess.Popen([str(texsystem), '-halt-on-error'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
A:matplotlib.tests.test_backend_pgf.(stdout, stderr)->matplotlib.compat.subprocess.Popen([str(texsystem), '-halt-on-error'], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(header.encode('utf8'))
A:matplotlib.tests.test_backend_pgf.needs_xelatex->pytest.mark.skipif(not check_for('xelatex'), reason='xelatex + pgf is required')
A:matplotlib.tests.test_backend_pgf.needs_pdflatex->pytest.mark.skipif(not check_for('pdflatex'), reason='pdflatex + pgf is required')
A:matplotlib.tests.test_backend_pgf.actual->os.path.join(result_dir, fname)
A:matplotlib.tests.test_backend_pgf.expected->os.path.join(result_dir, 'expected_%s' % fname)
A:matplotlib.tests.test_backend_pgf.err->compare_images(expected, actual, tol=tol)
A:matplotlib.tests.test_backend_pgf.x->numpy.linspace(0, 1, 15)
A:matplotlib.tests.test_backend_pgf.original_params->matplotlib.rcParams.copy()
A:matplotlib.tests.test_backend_pgf.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_pgf.ax1->matplotlib.pyplot.figure().add_subplot(121)
A:matplotlib.tests.test_backend_pgf.ax2->matplotlib.pyplot.figure().add_subplot(122)
A:matplotlib.tests.test_backend_pgf.bbox->matplotlib.pyplot.figure().add_subplot(121).get_window_extent().transformed(fig.dpi_scale_trans.inverted())
matplotlib.tests.test_backend_pgf.check_for(texsystem)
matplotlib.tests.test_backend_pgf.compare_figure(fname,savefig_kwargs={},tol=0)
matplotlib.tests.test_backend_pgf.create_figure()
matplotlib.tests.test_backend_pgf.test_bbox_inches()
matplotlib.tests.test_backend_pgf.test_mixedmode()
matplotlib.tests.test_backend_pgf.test_pathclip()
matplotlib.tests.test_backend_pgf.test_pdflatex()
matplotlib.tests.test_backend_pgf.test_rcupdate()
matplotlib.tests.test_backend_pgf.test_xelatex()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_rcparams.py----------------------------------------
A:matplotlib.tests.test_rcparams.fname->str(d.join('testrcvalid.temp'))
A:matplotlib.tests.test_rcparams.rc->matplotlib.rc_params_from_file(utf32_be, True, False)
A:matplotlib.tests.test_rcparams.expected_repr->"\nRcParams({'font.cursive': ['Apple Chancery',\n                           'Textile',\n                           'Zapf Chancery',\n                           'cursive'],\n          'font.family': ['sans-serif'],\n          'font.size': 12.0,\n          'font.weight': 'normal'})".lstrip()
A:matplotlib.tests.test_rcparams.expected_str->"\nfont.cursive: ['Apple Chancery', 'Textile', 'Zapf Chancery', 'cursive']\nfont.family: ['sans-serif']\nfont.size: 12.0\nfont.weight: normal".lstrip()
A:matplotlib.tests.test_rcparams._copy->matplotlib.rcParams.copy()
A:matplotlib.tests.test_rcparams._deep_copy->deepcopy(mpl.rcParams)
A:matplotlib.tests.test_rcparams.param_dict['legend.%scolor' % (color_type,)]->param_dict.pop('color')
A:matplotlib.tests.test_rcparams.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_rcparams.leg->ax.legend()
A:matplotlib.tests.test_rcparams.utf32_be->os.path.join(os.path.dirname(__file__), 'test_utf32_be_rcparams.rc')
A:matplotlib.tests.test_rcparams.res->validator(arg)
A:matplotlib.tests.test_rcparams.deprecated->list(dep1.union(dep2))
A:matplotlib.tests.test_rcparams.path_to_rc->matplotlib.matplotlib_fname()
A:matplotlib.tests.test_rcparams.rclines->f.readlines()
A:matplotlib.tests.test_rcparams.d->tmpdir.mkdir('test1')
A:matplotlib.tests.test_rcparams.dic->matplotlib.rc_params_from_file(fname, fail_on_error=True, use_default_template=False)
matplotlib.tests.test_rcparams.generate_validator_testcases(valid)
matplotlib.tests.test_rcparams.test_Bug_2543()
matplotlib.tests.test_rcparams.test_Issue_1713()
matplotlib.tests.test_rcparams.test_RcParams_class()
matplotlib.tests.test_rcparams.test_if_rctemplate_is_up_to_date()
matplotlib.tests.test_rcparams.test_if_rctemplate_would_be_valid(tmpdir)
matplotlib.tests.test_rcparams.test_keymaps()
matplotlib.tests.test_rcparams.test_legend_colors(color_type,param_dict,target)
matplotlib.tests.test_rcparams.test_rcparams()
matplotlib.tests.test_rcparams.test_rcparams_init()
matplotlib.tests.test_rcparams.test_rcparams_reset_after_fail()
matplotlib.tests.test_rcparams.test_rcparams_update()
matplotlib.tests.test_rcparams.test_validator_invalid(validator,arg,exception_type)
matplotlib.tests.test_rcparams.test_validator_valid(validator,arg,target)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_dates.py----------------------------------------
A:matplotlib.tests.test_dates.base->datetime.datetime(2017, 1, 1)
A:matplotlib.tests.test_dates.timenp->numpy.array(time, dtype='datetime64[ns]')
A:matplotlib.tests.test_dates.data->numpy.array([0.0, 2.0, 1.0])
A:matplotlib.tests.test_dates.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_dates.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_dates.(h,)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).plot(data, time)
A:matplotlib.tests.test_dates.(hnp,)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).plot(data, timenp)
A:matplotlib.tests.test_dates.time->matplotlib.dates.date2num(t0)
A:matplotlib.tests.test_dates.tnp->numpy.array([t0, 'NaT'], dtype=dtype)
A:matplotlib.tests.test_dates.nptime->matplotlib.dates.date2num(tnp)
A:matplotlib.tests.test_dates.t0->datetime.datetime(2009, 1, 20)
A:matplotlib.tests.test_dates.tmpl->matplotlib.dates.date2num(np.datetime64('NaT', units))
A:matplotlib.tests.test_dates.tf->datetime.datetime(2009, 1, 31)
A:matplotlib.tests.test_dates.rrule->matplotlib.dates.rrulewrapper(dateutil.rrule.YEARLY, interval=500)
A:matplotlib.tests.test_dates.locator->_create_auto_date_locator(d1, d2)
A:matplotlib.tests.test_dates.loc->matplotlib.dates.DayLocator()
A:matplotlib.tests.test_dates.x1->datetime.datetime(year=1, month=1, day=1, tzinfo=pytz.UTC)
A:matplotlib.tests.test_dates.y1->datetime.datetime(year=1, month=1, day=16, tzinfo=pytz.UTC)
A:matplotlib.tests.test_dates.formatter->matplotlib.dates.AutoDateFormatter(locator)
A:matplotlib.tests.test_dates.formatted_date_str->'{weekday} {day:02d} {month:02d} {year:02d} {full_year:04d} {hour24:02d} {hour12:02d} {minute:02d} {second:02d} %{microsecond:06d} %x'.format(weekday=str((dt.weekday() + 1) % 7), day=dt.day, month=dt.month, year=dt.year % 100, full_year=dt.year, hour24=dt.hour, hour12=(dt.hour - 1) % 12 + 1, minute=dt.minute, second=dt.second, microsecond=dt.microsecond)
A:matplotlib.tests.test_dates.locale_formatter->matplotlib.dates.DateFormatter('%x')
A:matplotlib.tests.test_dates.locale_d_fmt->locale.nl_langinfo(locale.D_FMT)
A:matplotlib.tests.test_dates.expanded_formatter->matplotlib.dates.DateFormatter(locale_d_fmt)
A:matplotlib.tests.test_dates.start->datetime.datetime(2011, 1, 1, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.end->datetime.datetime(2011, 1, 2, tzinfo=mdates.UTC)
A:matplotlib.tests.test_dates.delta->datetime.timedelta(hours=4)
A:matplotlib.tests.test_dates.daterange->matplotlib.dates.drange(start, end, delta)
A:matplotlib.tests.test_dates.yearFmt->matplotlib.dates.DateFormatter('%Y')
A:matplotlib.tests.test_dates.d1->datetime.datetime(1997, 1, 1)
A:matplotlib.tests.test_dates.BRUSSELS->pytz.timezone('Europe/Brussels')
A:matplotlib.tests.test_dates.dtstart->attach_tz(datetime.datetime(2017, 4, 1, 0), SYD)
A:matplotlib.tests.test_dates.interval->datetime.timedelta(minutes=33, seconds=45)
A:matplotlib.tests.test_dates.dt_utc->date_range(start=dtstart, freq=interval, periods=N)
A:matplotlib.tests.test_dates.dt_bxl->tz_convert(dt_utc, BRUSSELS)
A:matplotlib.tests.test_dates.actual_ordinalf->list(mdates.date2num(dt_bxl))
A:matplotlib.tests.test_dates.r->self.mk_tzaware(r)
A:matplotlib.tests.test_dates.tzinfo->getattr(r, 'tzinfo', None)
A:matplotlib.tests.test_dates.localizer->getattr(tzinfo, 'normalize', None)
A:matplotlib.tests.test_dates.dt->matplotlib.dates.num2timedelta(x)
A:matplotlib.tests.test_dates.val->getattr(datetime_obj, attr, None)
A:matplotlib.tests.test_dates.SYD->get_tz('Australia/Sydney')
A:matplotlib.tests.test_dates.dtend->attach_tz(datetime.datetime(2017, 4, 4, 0), SYD)
A:matplotlib.tests.test_dates.rule->matplotlib.dates.rrulewrapper(freq=dateutil.rrule.DAILY, dtstart=dtstart)
A:matplotlib.tests.test_dates.act->matplotlib.dates.rrulewrapper(freq=dateutil.rrule.DAILY, dtstart=dtstart).between(dtstart, dtend)
matplotlib.tests.test_dates._test_date2num_dst(date_range,tz_convert)
matplotlib.tests.test_dates.test_DateFormatter()
matplotlib.tests.test_dates.test_DayLocator()
matplotlib.tests.test_dates.test_RRuleLocator()
matplotlib.tests.test_dates.test_RRuleLocator_dayrange()
matplotlib.tests.test_dates.test_auto_date_locator()
matplotlib.tests.test_dates.test_auto_date_locator_intmult()
matplotlib.tests.test_dates.test_date2num_NaT(dtype)
matplotlib.tests.test_dates.test_date2num_NaT_scalar(units)
matplotlib.tests.test_dates.test_date2num_dst()
matplotlib.tests.test_dates.test_date2num_dst_pandas(pd)
matplotlib.tests.test_dates.test_date_axhline()
matplotlib.tests.test_dates.test_date_axhspan()
matplotlib.tests.test_dates.test_date_axvline()
matplotlib.tests.test_dates.test_date_axvspan()
matplotlib.tests.test_dates.test_date_date2num_numpy(t0,dtype)
matplotlib.tests.test_dates.test_date_empty()
matplotlib.tests.test_dates.test_date_formatter_callable()
matplotlib.tests.test_dates.test_date_formatter_strftime()
matplotlib.tests.test_dates.test_date_inverted_limit()
matplotlib.tests.test_dates.test_date_numpyx()
matplotlib.tests.test_dates.test_drange()
matplotlib.tests.test_dates.test_empty_date_with_year_formatter()
matplotlib.tests.test_dates.test_num2timedelta(x,tdelta)
matplotlib.tests.test_dates.test_rrulewrapper(attach_tz,get_tz)
matplotlib.tests.test_dates.test_too_many_date_ticks()
matplotlib.tests.test_dates.test_tz_utc()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_skew.py----------------------------------------
A:matplotlib.tests.test_skew.self.xaxis->SkewXAxis(self)
A:matplotlib.tests.test_skew.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.tests.test_skew.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_skew.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1, projection='skewx')
A:matplotlib.tests.test_skew.(fix, axes)->matplotlib.pyplot.subplots(5, 5, sharex=True, sharey=True, figsize=(8, 8))
A:matplotlib.tests.test_skew.rotations->list(itertools.product([-3, -1, 0, 1, 3], repeat=2))
A:matplotlib.tests.test_skew.t->matplotlib.transforms.Affine2D().skew_deg(xdeg, ydeg)
matplotlib.tests.test_skew.SkewSpine(mspines.Spine)
matplotlib.tests.test_skew.SkewSpine._adjust_location(self)
matplotlib.tests.test_skew.SkewXAxes(Axes)
matplotlib.tests.test_skew.SkewXAxes._gen_axes_spines(self)
matplotlib.tests.test_skew.SkewXAxes._init_axis(self)
matplotlib.tests.test_skew.SkewXAxes._set_lim_and_transforms(self)
matplotlib.tests.test_skew.SkewXAxes.lower_xlim(self)
matplotlib.tests.test_skew.SkewXAxes.upper_xlim(self)
matplotlib.tests.test_skew.SkewXAxis(maxis.XAxis)
matplotlib.tests.test_skew.SkewXAxis._get_tick(self,major)
matplotlib.tests.test_skew.SkewXAxis.get_view_interval(self)
matplotlib.tests.test_skew.SkewXTick(maxis.XTick)
matplotlib.tests.test_skew.SkewXTick._has_default_loc(self)
matplotlib.tests.test_skew.SkewXTick._need_lower(self)
matplotlib.tests.test_skew.SkewXTick._need_upper(self)
matplotlib.tests.test_skew.SkewXTick.get_view_interval(self)
matplotlib.tests.test_skew.SkewXTick.gridOn(self)
matplotlib.tests.test_skew.SkewXTick.gridOn(self,value)
matplotlib.tests.test_skew.SkewXTick.label1On(self)
matplotlib.tests.test_skew.SkewXTick.label1On(self,value)
matplotlib.tests.test_skew.SkewXTick.label2On(self)
matplotlib.tests.test_skew.SkewXTick.label2On(self,value)
matplotlib.tests.test_skew.SkewXTick.tick1On(self)
matplotlib.tests.test_skew.SkewXTick.tick1On(self,value)
matplotlib.tests.test_skew.SkewXTick.tick2On(self)
matplotlib.tests.test_skew.SkewXTick.tick2On(self,value)
matplotlib.tests.test_skew.SkewXTick.update_position(self,loc)
matplotlib.tests.test_skew.test_set_line_coll_dash_image()
matplotlib.tests.test_skew.test_skew_rectangle()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_mathtext.py----------------------------------------
A:matplotlib.tests.test_mathtext.wrapper->''.join(wrapper)
A:matplotlib.tests.test_mathtext.fig->matplotlib.pyplot.figure(figsize=(5.25, 0.75))
A:matplotlib.tests.test_mathtext.fontpath->matplotlib.font_manager.findfont('DejaVu Sans')
A:matplotlib.tests.test_mathtext.font->matplotlib.ft2font.FT2Font(fontpath)
A:matplotlib.tests.test_mathtext.table->matplotlib.ft2font.FT2Font(fontpath).get_sfnt_table('head')
A:matplotlib.tests.test_mathtext.parser->matplotlib.mathtext.MathTextParser('agg')
A:matplotlib.tests.test_mathtext.buff->io.BytesIO()
A:matplotlib.tests.test_mathtext.array->numpy.fromstring(buff.getvalue(), dtype=np.uint8)
matplotlib.tests.test_mathtext.baseline_images(request,fontset,index)
matplotlib.tests.test_mathtext.test_fontinfo()
matplotlib.tests.test_mathtext.test_mathfont_rendering(baseline_images,fontset,index,test)
matplotlib.tests.test_mathtext.test_mathtext_exceptions(math,msg)
matplotlib.tests.test_mathtext.test_mathtext_rendering(baseline_images,fontset,index,test)
matplotlib.tests.test_mathtext.test_single_minus_sign()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_legend.py----------------------------------------
A:matplotlib.tests.test_legend.ll->inspect.getdoc(func)
A:matplotlib.tests.test_legend.lines->axs[0].plot(range(10))
A:matplotlib.tests.test_legend.stax->get_docstring_section(mpl.axes.Axes.legend, 'Other Parameters')
A:matplotlib.tests.test_legend.stfig->get_docstring_section(mpl.figure.Figure.legend, 'Other Parameters')
A:matplotlib.tests.test_legend.stleg->get_docstring_section(mpl.legend.Legend.__init__, 'Other Parameters')
A:matplotlib.tests.test_legend.X->numpy.random.randn(10)
A:matplotlib.tests.test_legend.Y->numpy.random.randn(10)
A:matplotlib.tests.test_legend.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_legend.(handles, labels)->fig.add_subplot(111).get_legend_handles_labels()
A:matplotlib.tests.test_legend.legend->collections.OrderedDict(zip(labels, handles))
A:matplotlib.tests.test_legend.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_legend.ax->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_legend.x->numpy.linspace(0, 30, 1000)
A:matplotlib.tests.test_legend.b1->matplotlib.pyplot.figure().add_subplot(111).bar(x, x, color='m')
A:matplotlib.tests.test_legend.b2->matplotlib.pyplot.figure().add_subplot(111).bar(x, x[::-1], color='g')
A:matplotlib.tests.test_legend.(p1,)->host_subplot(111).plot([0, 1, 2], [0, 1, 2], label='Density')
A:matplotlib.tests.test_legend.(p2,)->host.twinx().plot([0, 1, 2], [0, 3, 2], label='Temperature')
A:matplotlib.tests.test_legend.(p3,)->matplotlib.pyplot.figure().add_subplot(111).plot([3, 4, 5], '-d')
A:matplotlib.tests.test_legend.leg->matplotlib.pyplot.figure().add_subplot(111).legend(shadow=True, facecolor='w')
A:matplotlib.tests.test_legend.(fig, axes_list)->matplotlib.pyplot.subplots(len(legend_modes), 1)
A:matplotlib.tests.test_legend.l1->matplotlib.pyplot.figure().add_subplot(111).legend(loc=2, mode=mode)
A:matplotlib.tests.test_legend.l2->matplotlib.pyplot.figure().add_subplot(111).legend(loc=5, mode=mode)
A:matplotlib.tests.test_legend.patch->matplotlib.pyplot.Rectangle((0.33, 0.4), 0.3, 0.3, hatch='||', fill=False, edgecolor='C1', label='Patch\nexplicit color\nunfilled')
A:matplotlib.tests.test_legend.th->numpy.linspace(0, 2 * np.pi, 1024)
A:matplotlib.tests.test_legend.(lns,)->matplotlib.pyplot.figure().add_subplot(111).plot(th, np.sin(th), label='sin', lw=5)
A:matplotlib.tests.test_legend.(lnc,)->matplotlib.pyplot.figure().add_subplot(111).plot(th, np.cos(th), label='cos', lw=5)
A:matplotlib.tests.test_legend.host->host_subplot(111)
A:matplotlib.tests.test_legend.par->host_subplot(111).twinx()
A:matplotlib.tests.test_legend.(fig, axs)->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_legend.lines2->axs[1].plot(np.arange(10) * 2.0)
A:matplotlib.tests.test_legend.(fig2, ax2)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_legend.brs->matplotlib.pyplot.figure().add_subplot(111).bar(range(3), range(3))
A:matplotlib.tests.test_legend.h->matplotlib.pyplot.figure().add_subplot(111).scatter([np.nan], [np.nan], marker='o', facecolor='r', edgecolor='r', s=3)
A:matplotlib.tests.test_legend.(x, y)->numpy.random.rand(2, n)
A:matplotlib.tests.test_legend.hl->matplotlib.pyplot.figure().add_subplot(111).legend()
A:matplotlib.tests.test_legend.(hand, lab)->matplotlib.legend._get_legend_handles_labels([ax])
A:matplotlib.tests.test_legend.offset->matplotlib.transforms.Affine2D().translate(-20, 20)
A:matplotlib.tests.test_legend.lc1->matplotlib.collections.LineCollection(lines1, linestyles='--', lw=3)
A:matplotlib.tests.test_legend.lc2->matplotlib.collections.LineCollection(lines2, linestyles='-.')
A:matplotlib.tests.test_legend.lc3->matplotlib.collections.LineCollection(lines3, linestyles=':', lw=0.5)
matplotlib.tests.test_legend.TestLegendFigureFunction(object)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_handle_label(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_kw_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_arg(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_three_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_label_three_args_pluskw(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_legend_no_args(self)
matplotlib.tests.test_legend.TestLegendFigureFunction.test_warn_args_kwargs(self)
matplotlib.tests.test_legend.TestLegendFunction(object)
matplotlib.tests.test_legend.TestLegendFunction.test_kwargs(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_handle_label(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_handler_map(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_label_args(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_no_args(self)
matplotlib.tests.test_legend.TestLegendFunction.test_legend_three_args(self)
matplotlib.tests.test_legend.TestLegendFunction.test_parasite(self)
matplotlib.tests.test_legend.TestLegendFunction.test_warn_args_kwargs(self)
matplotlib.tests.test_legend.get_docstring_section(func,section)
matplotlib.tests.test_legend.test_alpha_rcparam()
matplotlib.tests.test_legend.test_alpha_rgba()
matplotlib.tests.test_legend.test_cross_figure_patch_legend()
matplotlib.tests.test_legend.test_fancy()
matplotlib.tests.test_legend.test_framealpha()
matplotlib.tests.test_legend.test_handler_numpoints()
matplotlib.tests.test_legend.test_hatching()
matplotlib.tests.test_legend.test_labels_first()
matplotlib.tests.test_legend.test_legend_auto1()
matplotlib.tests.test_legend.test_legend_auto2()
matplotlib.tests.test_legend.test_legend_auto3()
matplotlib.tests.test_legend.test_legend_expand()
matplotlib.tests.test_legend.test_legend_kwdocstrings()
matplotlib.tests.test_legend.test_legend_ordereddict()
matplotlib.tests.test_legend.test_legend_remove()
matplotlib.tests.test_legend.test_legend_repeatcheckok()
matplotlib.tests.test_legend.test_legend_stackplot()
matplotlib.tests.test_legend.test_linecollection_scaled_dashes()
matplotlib.tests.test_legend.test_multiple_keys()
matplotlib.tests.test_legend.test_nanscatter()
matplotlib.tests.test_legend.test_not_covering_scatter()
matplotlib.tests.test_legend.test_not_covering_scatter_transform()
matplotlib.tests.test_legend.test_rc()
matplotlib.tests.test_legend.test_shadow_framealpha()
matplotlib.tests.test_legend.test_various_labels()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_agg.py----------------------------------------
A:matplotlib.tests.test_agg.fig->matplotlib.pyplot.figure(figsize=(300, 1000))
A:matplotlib.tests.test_agg.canvas->FigureCanvas(fig)
A:matplotlib.tests.test_agg.buf->io.BytesIO()
A:matplotlib.tests.test_agg.buff->io.BytesIO()
A:matplotlib.tests.test_agg.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_agg.collection->matplotlib.collections.PathCollection([path.Path([[-10, 5], [10, 5], [10, -5], [-10, -5], [-10, 5]])])
A:matplotlib.tests.test_agg.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_agg.data->numpy.arange(steps)
A:matplotlib.tests.test_agg.points->numpy.random.rand(70000)
A:matplotlib.tests.test_agg.w->numpy.hanning(window_len)
A:matplotlib.tests.test_agg.y->numpy.convolve(w / w.sum(), s, mode='same')
A:matplotlib.tests.test_agg.A1->numpy.array([smooth1d(x, window_len) for x in np.asarray(A)])
A:matplotlib.tests.test_agg.A2->numpy.transpose(A1)
A:matplotlib.tests.test_agg.A3->numpy.array([smooth1d(x, window_len) for x in A2])
A:matplotlib.tests.test_agg.A4->numpy.transpose(A3)
A:matplotlib.tests.test_agg.padded_src->self.prepare_image(im, dpi, pad)
A:matplotlib.tests.test_agg.pad->self.get_pad(dpi)
A:matplotlib.tests.test_agg.tgt_image->numpy.zeros_like(padded_src)
A:matplotlib.tests.test_agg.a1->numpy.roll(padded_src, int(ox / 72.0 * dpi), axis=1)
A:matplotlib.tests.test_agg.a2->numpy.roll(a1, -int(oy / 72.0 * dpi), axis=0)
A:matplotlib.tests.test_agg.aa->smooth2d(padded_src[:, :, -1] * self.alpha, self.sigma / 72.0 * dpi)
A:matplotlib.tests.test_agg.self.gauss_filter->GaussianFilter(sigma, alpha, color)
A:matplotlib.tests.test_agg.self.offset_filter->OffsetFilter(offsets)
A:matplotlib.tests.test_agg.t1->self.gauss_filter.process_image(padded_src, dpi)
A:matplotlib.tests.test_agg.t2->self.offset_filter.process_image(t1, dpi)
A:matplotlib.tests.test_agg.ax->matplotlib.pyplot.figure(figsize=(300, 1000)).add_subplot(111)
A:matplotlib.tests.test_agg.(l1,)->matplotlib.pyplot.figure(figsize=(300, 1000)).add_subplot(111).plot([0.1, 0.5, 0.9], [0.1, 0.9, 0.5], 'bo-', mec='b', mfc='w', lw=5, mew=3, ms=10, label='Line 1')
A:matplotlib.tests.test_agg.(l2,)->matplotlib.pyplot.figure(figsize=(300, 1000)).add_subplot(111).plot([0.1, 0.5, 0.9], [0.5, 0.2, 0.7], 'ro-', mec='r', mfc='w', lw=5, mew=3, ms=10, label='Line 1')
A:matplotlib.tests.test_agg.gauss->DropShadowFilter(4)
A:matplotlib.tests.test_agg.xx->l.get_xdata()
A:matplotlib.tests.test_agg.yy->l.get_ydata()
A:matplotlib.tests.test_agg.(shadow,)->matplotlib.pyplot.figure(figsize=(300, 1000)).add_subplot(111).plot(xx, yy)
A:matplotlib.tests.test_agg.ot->matplotlib.transforms.offset_copy(l.get_transform(), ax.figure, x=4.0, y=-6.0, units='points')
A:matplotlib.tests.test_agg.x->range(200)
A:matplotlib.tests.test_agg.Image->pytest.importorskip('PIL.Image')
A:matplotlib.tests.test_agg.im->pytest.importorskip('PIL.Image').open(buf)
matplotlib.tests.test_agg.test_agg_filter()
matplotlib.tests.test_agg.test_chunksize()
matplotlib.tests.test_agg.test_jpeg_dpi()
matplotlib.tests.test_agg.test_large_single_path_collection()
matplotlib.tests.test_agg.test_long_path()
matplotlib.tests.test_agg.test_marker_with_nan()
matplotlib.tests.test_agg.test_repeated_save_with_alpha()
matplotlib.tests.test_agg.test_too_large_image()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_patches.py----------------------------------------
A:matplotlib.tests.test_patches.p->matplotlib.patches.Rectangle((5 * U.km, 6 * U.km), 1 * U.km, 2 * U.km)
A:matplotlib.tests.test_patches.loc->numpy.asarray([1.0, 2.0])
A:matplotlib.tests.test_patches.rect1->Rectangle(loc, width, height, angle=angle)
A:matplotlib.tests.test_patches.rect2->Rectangle(loc, width, height)
A:matplotlib.tests.test_patches.rotation_matrix->numpy.array([[np.cos(angle_rad), -np.sin(angle_rad)], [np.sin(angle_rad), np.cos(angle_rad)]])
A:matplotlib.tests.test_patches.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_patches.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_patches.path->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0).get_path()
A:matplotlib.tests.test_patches.path2->matplotlib.path.Path.unit_circle().deepcopy()
A:matplotlib.tests.test_patches.combined->matplotlib.path.Path.make_compound_path(path, path2)
A:matplotlib.tests.test_patches.patch->matplotlib.patches.Rectangle((start, 0), delta, 1)
A:matplotlib.tests.test_patches.bbox->matplotlib.transforms.Bbox([[-12, -77.5], [50, -110]])
A:matplotlib.tests.test_patches.result_path->matplotlib.path.Path.make_compound_path(path, path2).clip_to_bbox(bbox)
A:matplotlib.tests.test_patches.result_patch->matplotlib.patches.PathPatch(result_path, alpha=0.5, facecolor='green', lw=4, edgecolor='black')
A:matplotlib.tests.test_patches.star->matplotlib.path.Path(verts + i, codes)
A:matplotlib.tests.test_patches.circle->matplotlib.path.Path.unit_circle()
A:matplotlib.tests.test_patches.verts->numpy.concatenate([circle.vertices, star.vertices[::-1]])
A:matplotlib.tests.test_patches.codes->numpy.concatenate([circle.codes, star.codes])
A:matplotlib.tests.test_patches.cut_star1->matplotlib.path.Path(verts, codes)
A:matplotlib.tests.test_patches.cut_star2->matplotlib.path.Path(verts + 1, codes)
A:matplotlib.tests.test_patches.col->matplotlib.collections.PathCollection([cut_star2], linewidth=5, linestyles=[(0.0, (5.0, 7.0, 10.0, 7.0))], facecolor=(1, 0, 0), edgecolor=(0, 0, 1))
A:matplotlib.tests.test_patches.c->matplotlib.pyplot.Circle((0, 0), 1, facecolor='none', alpha=1)
A:matplotlib.tests.test_patches.init_args->dict(((k, v[0]) for (k, v) in six.iteritems(param_dict)))
A:matplotlib.tests.test_patches.w->matplotlib.patches.Wedge(**init_args)
A:matplotlib.tests.test_patches.wedge->matplotlib.patches.Wedge((x * 3, y * 3), 1, theta1, theta2, facecolor='none', edgecolor='k', lw=3)
A:matplotlib.tests.test_patches.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_patches.rects->matplotlib.pyplot.axes().bar(range(5), range(1, 6))
A:matplotlib.tests.test_patches.r->Rectangle((i - 0.8 / 2, 5), 0.8, 1, hatch='//', fc='none')
A:matplotlib.tests.test_patches.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_patches.con->matplotlib.patches.ConnectionPatch(xyA=(0.1, 0.1), xyB=(0.9, 0.9), coordsA='data', coordsB='data', axesA=ax2, axesB=ax1, arrowstyle='->')
A:matplotlib.tests.test_patches.start->datetime(2017, 1, 1, 0, 0, 0)
A:matplotlib.tests.test_patches.delta->timedelta(seconds=16)
A:matplotlib.tests.test_patches.dt_delta->datetime(1970, 1, 5)
A:matplotlib.tests.test_patches.ell->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0)
A:matplotlib.tests.test_patches.transform->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0).get_transform()
A:matplotlib.tests.test_patches.radius->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0)._process_radius(None)
A:matplotlib.tests.test_patches.expected->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0).get_path().contains_points(points, transform, radius)
A:matplotlib.tests.test_patches.result->matplotlib.patches.Ellipse((0.5, 0.5), 0.5, 1.0, 0).contains_points(points)
matplotlib.tests.test_patches.test_Polygon_close()
matplotlib.tests.test_patches.test_clip_to_bbox()
matplotlib.tests.test_patches.test_connection_patch()
matplotlib.tests.test_patches.test_contains_point()
matplotlib.tests.test_patches.test_contains_points()
matplotlib.tests.test_patches.test_datetime_datetime_fails()
matplotlib.tests.test_patches.test_datetime_rectangle()
matplotlib.tests.test_patches.test_multi_color_hatch()
matplotlib.tests.test_patches.test_negative_rect()
matplotlib.tests.test_patches.test_patch_alpha_coloring()
matplotlib.tests.test_patches.test_patch_alpha_override()
matplotlib.tests.test_patches.test_patch_color_none()
matplotlib.tests.test_patches.test_patch_custom_linestyle()
matplotlib.tests.test_patches.test_patch_linestyle_accents()
matplotlib.tests.test_patches.test_patch_str()
matplotlib.tests.test_patches.test_rotate_rect()
matplotlib.tests.test_patches.test_units_rectangle()
matplotlib.tests.test_patches.test_wedge_movement()
matplotlib.tests.test_patches.test_wedge_range()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_qt4.py----------------------------------------
A:matplotlib.tests.test_backend_qt4.qt_compat->pytest.importorskip('matplotlib.backends.qt_compat')
A:matplotlib.tests.test_backend_qt4.py_qt_ver->int(QtCore.PYQT_VERSION_STR.split('.')[0])
A:matplotlib.tests.test_backend_qt4.pytestmark->pytest.mark.xfail(reason='Qt4 is not available')
A:matplotlib.tests.test_backend_qt4.init_figs->copy.copy(Gcf.figs)
A:matplotlib.tests.test_backend_qt4.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_backend_qt4.event->mock.Mock()
matplotlib.tests.test_backend_qt4.test_correct_key(qt_key,qt_mods,answer)
matplotlib.tests.test_backend_qt4.test_fig_close()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_qt5.py----------------------------------------
A:matplotlib.tests.test_backend_qt5.qt_compat->pytest.importorskip('matplotlib.backends.qt_compat', minversion='5')
A:matplotlib.tests.test_backend_qt5.init_figs->copy.copy(Gcf.figs)
A:matplotlib.tests.test_backend_qt5.fig->matplotlib.pyplot.figure(figsize=(5, 2), dpi=120)
A:matplotlib.tests.test_backend_qt5.event->mock.Mock()
A:matplotlib.tests.test_backend_qt5.size->qt_canvas.size()
A:matplotlib.tests.test_backend_qt5.(fig, ax)->matplotlib.pyplot.subplots()
matplotlib.tests.test_backend_qt5.test_correct_key(qt_key,qt_mods,answer)
matplotlib.tests.test_backend_qt5.test_dpi_ratio_change()
matplotlib.tests.test_backend_qt5.test_fig_close()
matplotlib.tests.test_backend_qt5.test_figureoptions()
matplotlib.tests.test_backend_qt5.test_subplottool()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_figure.py----------------------------------------
A:matplotlib.tests.test_figure.fig->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10)
A:matplotlib.tests.test_figure.gs->matplotlib.gridspec.GridSpec(3, 3)
A:matplotlib.tests.test_figure.ax->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10).add_subplot(111)
A:matplotlib.tests.test_figure.fig0->matplotlib.pyplot.figure(num=1)
A:matplotlib.tests.test_figure.fig1->matplotlib.pyplot.figure(num=1, clear=False)
A:matplotlib.tests.test_figure.(fig2, ax2)->matplotlib.pyplot.subplots(2, 1, num=1, clear=True)
A:matplotlib.tests.test_figure.(fig, axes)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_figure.ax1->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10).add_axes([0, 0, 1, 1])
A:matplotlib.tests.test_figure.ax2->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10).add_subplot(121, projection='polar')
A:matplotlib.tests.test_figure.ax3->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10).add_subplot(122)
A:matplotlib.tests.test_figure.(fig, _)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_figure.fps->FontProperties(size='large', weight='bold')
A:matplotlib.tests.test_figure.txt->matplotlib.pyplot.figure(figsize=(10, 20), dpi=10).suptitle('fontprops title', fontproperties=fps)
A:matplotlib.tests.test_figure.(w, h)->matplotlib.pyplot.figaspect(np.zeros((2, 2)))
A:matplotlib.tests.test_figure.x->matplotlib.dates.datestr2num(date)
A:matplotlib.tests.test_figure.y->matplotlib.dates.datestr2num(time)
A:matplotlib.tests.test_figure.(fig, ax_arr)->matplotlib.pyplot.subplots(2, 2, sharex=True, sharey=True, squeeze=False)
A:matplotlib.tests.test_figure.out->Path(tmpdir, 'test.{}'.format(fmt))
matplotlib.tests.test_figure.test_align_labels()
matplotlib.tests.test_figure.test_alpha()
matplotlib.tests.test_figure.test_autofmt_xdate(which)
matplotlib.tests.test_figure.test_axes_remove()
matplotlib.tests.test_figure.test_change_dpi()
matplotlib.tests.test_figure.test_clf_keyword()
matplotlib.tests.test_figure.test_figaspect()
matplotlib.tests.test_figure.test_fignum_exists()
matplotlib.tests.test_figure.test_figure()
matplotlib.tests.test_figure.test_figure_label()
matplotlib.tests.test_figure.test_figure_legend()
matplotlib.tests.test_figure.test_figure_repr()
matplotlib.tests.test_figure.test_fspath(fmt,tmpdir)
matplotlib.tests.test_figure.test_gca()
matplotlib.tests.test_figure.test_invalid_figure_size()
matplotlib.tests.test_figure.test_iterability_axes_argument()
matplotlib.tests.test_figure.test_savefig()
matplotlib.tests.test_figure.test_set_fig_size()
matplotlib.tests.test_figure.test_subplots_shareax_loglabels()
matplotlib.tests.test_figure.test_suptitle()
matplotlib.tests.test_figure.test_suptitle_fontproperties()
matplotlib.tests.test_figure.test_too_many_figures()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_triangulation.py----------------------------------------
A:matplotlib.tests.test_triangulation.(x, y)->map(np.ravel, np.meshgrid(xi, xi))
A:matplotlib.tests.test_triangulation.x->numpy.asarray([0, 1, 0, 1, 0.5])
A:matplotlib.tests.test_triangulation.y->numpy.asarray([0, 0, 1, 1, 0.5])
A:matplotlib.tests.test_triangulation.triang->matplotlib.tri.Triangulation(x, y)
A:matplotlib.tests.test_triangulation.tri_points->numpy.array([[0.8660254037844384, -0.5000000000000004], [0.7577722283113836, -0.5000000000000004], [0.6495190528383288, -0.5000000000000003], [0.5412658773652739, -0.5000000000000003], [0.811898816047911, -0.40625000000000044], [0.7036456405748561, -0.4062500000000004], [0.5953924651018013, -0.40625000000000033]])
A:matplotlib.tests.test_triangulation.test_points->numpy.asarray([[0.58, -0.46], [0.65, -0.46], [0.65, -0.42], [0.7, -0.48], [0.7, -0.44], [0.75, -0.44], [0.8, -0.48]])
A:matplotlib.tests.test_triangulation.triangles->numpy.array([[0, 1, 2], [0, 1, 3], [1, 2, 4]], dtype=np.int32)
A:matplotlib.tests.test_triangulation.xmid->x[triang.triangles].mean(axis=1)
A:matplotlib.tests.test_triangulation.ymid->y[triang.triangles].mean(axis=1)
A:matplotlib.tests.test_triangulation.points->numpy.array([(0, 0), (0, 1.1), (1, 0), (1, 1)])
A:matplotlib.tests.test_triangulation.old_triangles->numpy.array([[0, 1, 2], [0, 1, 3], [1, 2, 4]], dtype=np.int32).copy()
A:matplotlib.tests.test_triangulation.tri->matplotlib.tri.Triangulation(points[:, 0], points[:, 1], triangles)
A:matplotlib.tests.test_triangulation.mask->numpy.array([False, False, True], dtype=bool)
A:matplotlib.tests.test_triangulation.trifinder->matplotlib._tri.TrapezoidMapTriFinder(triang)
A:matplotlib.tests.test_triangulation.(xs, ys)->numpy.meshgrid(xs, ys)
A:matplotlib.tests.test_triangulation.xs->numpy.linspace(triang.x[pt1], triang.x[pt2], 10)
A:matplotlib.tests.test_triangulation.ys->numpy.linspace(triang.y[pt1], triang.y[pt2], 10)
A:matplotlib.tests.test_triangulation.tris->trifinder(xs, ys)
A:matplotlib.tests.test_triangulation.linear_interp->matplotlib.tri.LinearTriInterpolator(triang, z0)
A:matplotlib.tests.test_triangulation.cubic_min_E->matplotlib.tri.CubicTriInterpolator(triang, z0)
A:matplotlib.tests.test_triangulation.cubic_geom->matplotlib.tri.CubicTriInterpolator(triang, z0, kind='geom')
A:matplotlib.tests.test_triangulation.zs->interp(xs, ys)
A:matplotlib.tests.test_triangulation.z->numpy.sqrt((x - 0.3) * (x - 0.3) + (y - 0.4) * (y - 0.4))
A:matplotlib.tests.test_triangulation.dz->gradient_quad(x, y)
A:matplotlib.tests.test_triangulation.cubic_user->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=dz)
A:matplotlib.tests.test_triangulation.interp_zs->cubic_user(xs, ys)
A:matplotlib.tests.test_triangulation.(interp_dzsdx, interp_dzsdy)->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=dz).gradient(x, y)
A:matplotlib.tests.test_triangulation.(dzsdx, dzsdy)->gradient_quad(x, y)
A:matplotlib.tests.test_triangulation.diff_lin->numpy.abs(linear_interp(xs, ys) - zs)
A:matplotlib.tests.test_triangulation.diff_cubic->numpy.abs(interp(xs, ys) - zs)
A:matplotlib.tests.test_triangulation.(dzx, dzy)->interpolator.gradient([loc_x], [loc_y])
A:matplotlib.tests.test_triangulation.(tab_dzx, tab_dzy)->interpolator.gradient(star_x, star_y)
A:matplotlib.tests.test_triangulation.dzx->numpy.zeros(7, dtype=np.float64)
A:matplotlib.tests.test_triangulation.dzy->numpy.zeros(7, dtype=np.float64)
A:matplotlib.tests.test_triangulation.values->numpy.zeros([3, 3], dtype=np.float64)
A:matplotlib.tests.test_triangulation.interp->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=(dzx, dzy))
A:matplotlib.tests.test_triangulation.rows->numpy.array([0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1], dtype=np.int32)
A:matplotlib.tests.test_triangulation.cols->numpy.array([0, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=np.int32)
A:matplotlib.tests.test_triangulation.vals->numpy.ones(17, dtype=np.float64)
A:matplotlib.tests.test_triangulation.mat->matplotlib.tri.triinterpolate._Sparse_Matrix_coo(vals, rows, cols, dim)
A:matplotlib.tests.test_triangulation.mat_dense->matplotlib.tri.triinterpolate._Sparse_Matrix_coo(vals, rows, cols, dim).to_dense()
A:matplotlib.tests.test_triangulation.b->numpy.zeros(n * m + 2, dtype=np.float64)
A:matplotlib.tests.test_triangulation.(x, _)->matplotlib.tri.triinterpolate._cg(A=mat, b=b, x0=np.ones(n * m + 2), tol=1e-10)
A:matplotlib.tests.test_triangulation.(vals, rows, cols, _)->poisson_sparse_matrix(n, m)
A:matplotlib.tests.test_triangulation.sum_w->numpy.zeros([4, 2])
A:matplotlib.tests.test_triangulation.dof_estimator->matplotlib.tri.triinterpolate._DOF_estimator_geom(cubic_geom)
A:matplotlib.tests.test_triangulation.weights->matplotlib.tri.triinterpolate._DOF_estimator_geom(cubic_geom).compute_geom_weights()
A:matplotlib.tests.test_triangulation.x0->(radii * np.cos(angles)).flatten()
A:matplotlib.tests.test_triangulation.y0->(radii * np.sin(angles)).flatten()
A:matplotlib.tests.test_triangulation.zs_target->numpy.ma.array(1.23 * xs - 4.79 * ys, mask=mask_out)
A:matplotlib.tests.test_triangulation.(zs,)->matplotlib.tri.CubicTriInterpolator(triang, z, kind='user', dz=(dzx, dzy))._interpolate_multikeys(xs, ys, tri_index=itri * np.ones(10, dtype=np.int32))
A:matplotlib.tests.test_triangulation.r1->numpy.sqrt((0.5 - x) ** 2 + (0.5 - y) ** 2)
A:matplotlib.tests.test_triangulation.theta1->numpy.arctan2(0.5 - x, 0.5 - y)
A:matplotlib.tests.test_triangulation.r2->numpy.sqrt((-x - 0.2) ** 2 + (-y - 0.2) ** 2)
A:matplotlib.tests.test_triangulation.theta2->numpy.arctan2(-x - 0.2, -y - 0.2)
A:matplotlib.tests.test_triangulation.radii->numpy.linspace(min_radius, 0.95, n_radii)
A:matplotlib.tests.test_triangulation.angles->numpy.repeat(angles[..., np.newaxis], n_radii, axis=1)
A:matplotlib.tests.test_triangulation.triang0->matplotlib.tri.Triangulation(x0, y0)
A:matplotlib.tests.test_triangulation.z0->z(x0, y0)
A:matplotlib.tests.test_triangulation.xs0->xs0.ravel().ravel()
A:matplotlib.tests.test_triangulation.ys0->ys0.ravel().ravel()
A:matplotlib.tests.test_triangulation.(xs0, ys0)->numpy.meshgrid(xs0, ys0)
A:matplotlib.tests.test_triangulation.interp_z0[interp_key]->interp(xs0, ys0)
A:matplotlib.tests.test_triangulation.interpz->dic_interp[interp_key](xs, ys)
A:matplotlib.tests.test_triangulation.refiner->matplotlib.tri.UniformTriRefiner(triang[i])
A:matplotlib.tests.test_triangulation.(tri_refi, z_test_refi)->matplotlib.tri.UniformTriRefiner(triang[i]).refine_field(V, subdiv=3)
A:matplotlib.tests.test_triangulation.levels->numpy.arange(0.0, 1.0, 0.01)
A:matplotlib.tests.test_triangulation.theta->numpy.radians(25)
A:matplotlib.tests.test_triangulation.V->dipole_potential(x, y)
A:matplotlib.tests.test_triangulation.tci->matplotlib.tri.CubicTriInterpolator(triang, -V)
A:matplotlib.tests.test_triangulation.(Ex, Ey)->matplotlib.tri.CubicTriInterpolator(triang, -V).gradient(triang.x, triang.y)
A:matplotlib.tests.test_triangulation.E_norm->numpy.sqrt(Ex ** 2 + Ey ** 2)
A:matplotlib.tests.test_triangulation.cmap->matplotlib.cm.get_cmap(name='hot', lut=None)
A:matplotlib.tests.test_triangulation.analyser->matplotlib.tri.TriAnalyzer(triang)
A:matplotlib.tests.test_triangulation.mask_flat->matplotlib.tri.TriAnalyzer(triang).get_flat_tri_mask(0.2)
A:matplotlib.tests.test_triangulation.verif_mask->numpy.zeros(162, dtype=bool)
A:matplotlib.tests.test_triangulation.refi_triang->matplotlib.tri.UniformTriRefiner(triang[i]).refine_triangulation(subdiv=subdiv)
A:matplotlib.tests.test_triangulation.x_verif->x_verif.ravel().ravel()
A:matplotlib.tests.test_triangulation.(x_verif, y_verif)->numpy.meshgrid(x_verif, x_verif)
A:matplotlib.tests.test_triangulation.y_verif->y_verif.ravel().ravel()
A:matplotlib.tests.test_triangulation.ind1d->numpy.in1d(np.around(x_verif * (2.5 + y_verif), 8), np.around(x_refi * (2.5 + y_refi), 8))
A:matplotlib.tests.test_triangulation.tri_finder->matplotlib.tri.Triangulation(x, y).get_trifinder()
A:matplotlib.tests.test_triangulation.refi_tri_indices->tri_finder(refi_tri_barycenter_x, refi_tri_barycenter_y)
A:matplotlib.tests.test_triangulation.(refined_triang, refined_z)->matplotlib.tri.UniformTriRefiner(triang[i]).refine_field(z, subdiv=1)
A:matplotlib.tests.test_triangulation.ax->Figure().add_axes([0.1, 0.1, 0.7, 0.7])
A:matplotlib.tests.test_triangulation.triangles1->numpy.array([[2, 0, 3], [2, 1, 0]])
A:matplotlib.tests.test_triangulation.triangles2->numpy.array(triangles1, copy=True, order='F')
A:matplotlib.tests.test_triangulation.triang1->matplotlib.tri.Triangulation(x, y, triangles1)
A:matplotlib.tests.test_triangulation.triang2->matplotlib.tri.TriAnalyzer(triang)._get_compressed_triangulation()
A:matplotlib.tests.test_triangulation.refiner1->matplotlib.tri.UniformTriRefiner(triang1)
A:matplotlib.tests.test_triangulation.refiner2->matplotlib.tri.UniformTriRefiner(triang2)
A:matplotlib.tests.test_triangulation.fine_triang1->matplotlib.tri.UniformTriRefiner(triang1).refine_triangulation(subdiv=1)
A:matplotlib.tests.test_triangulation.fine_triang2->matplotlib.tri.UniformTriRefiner(triang2).refine_triangulation(subdiv=1)
A:matplotlib.tests.test_triangulation.xi->numpy.linspace(-2, 2, 100)
A:matplotlib.tests.test_triangulation.w->numpy.logical_and(x > y - 1, np.logical_and(x < -1.95, y > -1.2))
A:matplotlib.tests.test_triangulation.tcg->matplotlib._tri.TriContourGenerator(triang, z)
A:matplotlib.tests.test_triangulation.triang_offset->matplotlib.tri.Triangulation(x + offset, y + offset)
matplotlib.tests.test_triangulation.meshgrid_triangles(n)
matplotlib.tests.test_triangulation.test_delaunay()
matplotlib.tests.test_triangulation.test_delaunay_duplicate_points()
matplotlib.tests.test_triangulation.test_delaunay_insufficient_points(x,y)
matplotlib.tests.test_triangulation.test_delaunay_points_in_line()
matplotlib.tests.test_triangulation.test_delaunay_robust()
matplotlib.tests.test_triangulation.test_internal_cpp_api()
matplotlib.tests.test_triangulation.test_no_modify()
matplotlib.tests.test_triangulation.test_qhull_large_offset()
matplotlib.tests.test_triangulation.test_qhull_triangle_orientation()
matplotlib.tests.test_triangulation.test_tri_smooth_contouring()
matplotlib.tests.test_triangulation.test_tri_smooth_gradient()
matplotlib.tests.test_triangulation.test_trianalyzer_mismatched_indices()
matplotlib.tests.test_triangulation.test_tricontourf_decreasing_levels()
matplotlib.tests.test_triangulation.test_trifinder()
matplotlib.tests.test_triangulation.test_triinterp()
matplotlib.tests.test_triangulation.test_triinterp_colinear()
matplotlib.tests.test_triangulation.test_triinterp_transformations()
matplotlib.tests.test_triangulation.test_triinterpcubic_C1_continuity()
matplotlib.tests.test_triangulation.test_triinterpcubic_cg_solver()
matplotlib.tests.test_triangulation.test_triinterpcubic_geom_weights()
matplotlib.tests.test_triangulation.test_tripcolor()
matplotlib.tests.test_triangulation.test_triplot_return()
matplotlib.tests.test_triangulation.test_trirefine()
matplotlib.tests.test_triangulation.test_trirefiner_fortran_contiguous_triangles()
matplotlib.tests.test_triangulation.test_tritools()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_collections.py----------------------------------------
A:matplotlib.tests.test_collections.positions->numpy.array([0.0, 1.0, 2.0, 3.0, 5.0, 8.0, 13.0, 21.0])
A:matplotlib.tests.test_collections.extra_positions->numpy.array([34.0, 55.0, 89.0])
A:matplotlib.tests.test_collections.coll->fig.add_subplot(1, 1, 1).scatter([], [])
A:matplotlib.tests.test_collections.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_collections.splt->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_collections.(_, coll, props)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.(_, coll, _)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.(splt, coll, props)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.new_positions->fig.add_subplot(1, 1, 1).scatter([], []).get_positions()
A:matplotlib.tests.test_collections.(splt, coll, _)->generate_EventCollection_plot()
A:matplotlib.tests.test_collections.new_color->numpy.array([0, 1, 1, 1])
A:matplotlib.tests.test_collections.segments->fig.add_subplot(1, 1, 1).scatter([], []).get_segments()
A:matplotlib.tests.test_collections.col->matplotlib.collections.PathCollection([], joinstyle='round')
A:matplotlib.tests.test_collections.col_data_lim->matplotlib.collections.PathCollection([], joinstyle='round').get_datalim(mtransforms.IdentityTransform())
A:matplotlib.tests.test_collections.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_collections.uv->numpy.linspace(0, 10, 80).reshape(10, 8)
A:matplotlib.tests.test_collections.q->matplotlib.pyplot.quiver(x, y, u, v)
A:matplotlib.tests.test_collections.x->numpy.array([0.0, 1.0, 0.5])
A:matplotlib.tests.test_collections.y->numpy.arange(3)
A:matplotlib.tests.test_collections.(y, x)->numpy.meshgrid(y, x)
A:matplotlib.tests.test_collections.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_collections.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_collections.ec->matplotlib.collections.EllipseCollection(ww, hh, aa, units='x', offsets=XY, transOffset=ax.transData, facecolors='none')
A:matplotlib.tests.test_collections.zpos->list(range(5))
A:matplotlib.tests.test_collections.poly->matplotlib.collections.PolyCollection(vertsQuad * len(zpos), linewidth=0.25)
A:matplotlib.tests.test_collections.xy_points->numpy.transpose([xx.flatten(), yy.flatten()])
A:matplotlib.tests.test_collections.rotations->numpy.linspace(0, 2 * np.pi, len(xy_points))
A:matplotlib.tests.test_collections.squares->SquareCollection(sizes=circle_areas, offsets=xy, transOffset=ax.transData)
A:matplotlib.tests.test_collections.event->MouseEvent()
A:matplotlib.tests.test_collections.(found, indices)->matplotlib.collections.PathCollection([], joinstyle='round').contains(event)
A:matplotlib.tests.test_collections.e->matplotlib.collections.EllipseCollection(widths, heights, angles, units='xy', offsets=coords, transOffset=ax.transData)
A:matplotlib.tests.test_collections.ecfc->pd.Series(['red', 'blue', 'green'], index=index)
A:matplotlib.tests.test_collections.lw->pd.Series([1, 2, 3], index=index)
A:matplotlib.tests.test_collections.ls->pd.Series(['solid', 'dashed', 'dashdot'], index=index)
A:matplotlib.tests.test_collections.aa->pd.Series([True, False, True], index=index)
A:matplotlib.tests.test_collections.segs->numpy.zeros((3, 3, 2))
A:matplotlib.tests.test_collections.line_segments->LineCollection(segs, linewidth=[10, 15, 20])
A:matplotlib.tests.test_collections.sc->matplotlib.pyplot.figure().add_subplot(1, 1, 1).scatter(range(5), range(5), c=range(5))
matplotlib.tests.test_collections.check_allprop_array(values,target)
matplotlib.tests.test_collections.check_segments(coll,positions,linelength,lineoffset,orientation)
matplotlib.tests.test_collections.generate_EventCollection_plot()
matplotlib.tests.test_collections.test_EllipseCollection()
matplotlib.tests.test_collections.test__EventCollection__add_positions()
matplotlib.tests.test_collections.test__EventCollection__append_positions()
matplotlib.tests.test_collections.test__EventCollection__extend_positions()
matplotlib.tests.test_collections.test__EventCollection__get_color()
matplotlib.tests.test_collections.test__EventCollection__get_linelength()
matplotlib.tests.test_collections.test__EventCollection__get_lineoffset()
matplotlib.tests.test_collections.test__EventCollection__get_linestyle()
matplotlib.tests.test_collections.test__EventCollection__get_orientation()
matplotlib.tests.test_collections.test__EventCollection__get_positions()
matplotlib.tests.test_collections.test__EventCollection__get_segments()
matplotlib.tests.test_collections.test__EventCollection__is_horizontal()
matplotlib.tests.test_collections.test__EventCollection__set_color()
matplotlib.tests.test_collections.test__EventCollection__set_linelength()
matplotlib.tests.test_collections.test__EventCollection__set_lineoffset()
matplotlib.tests.test_collections.test__EventCollection__set_linestyle()
matplotlib.tests.test_collections.test__EventCollection__set_linestyle_single_dash()
matplotlib.tests.test_collections.test__EventCollection__set_linewidth()
matplotlib.tests.test_collections.test__EventCollection__set_orientation()
matplotlib.tests.test_collections.test__EventCollection__set_positions()
matplotlib.tests.test_collections.test__EventCollection__switch_orientation()
matplotlib.tests.test_collections.test__EventCollection__switch_orientation_2x()
matplotlib.tests.test_collections.test_add_collection()
matplotlib.tests.test_collections.test_barb_limits()
matplotlib.tests.test_collections.test_cap_and_joinstyle_image()
matplotlib.tests.test_collections.test_capstyle()
matplotlib.tests.test_collections.test_joinstyle()
matplotlib.tests.test_collections.test_linestyle_single_dashes()
matplotlib.tests.test_collections.test_lslw_bcast()
matplotlib.tests.test_collections.test_null_collection_datalim()
matplotlib.tests.test_collections.test_pandas_indexing(pd)
matplotlib.tests.test_collections.test_picking()
matplotlib.tests.test_collections.test_polycollection_close()
matplotlib.tests.test_collections.test_quiver_limits()
matplotlib.tests.test_collections.test_regularpolycollection_rotate()
matplotlib.tests.test_collections.test_regularpolycollection_scale()
matplotlib.tests.test_collections.test_scatter_post_alpha()
matplotlib.tests.test_collections.test_size_in_xy()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_animation.py----------------------------------------
A:matplotlib.tests.test_animation.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_animation.savefig_kwargs->dict(foo=0)
A:matplotlib.tests.test_animation.anim->matplotlib.animation.FuncAnimation(fig, animate, init_func=init, frames=iter(range(5)))
A:matplotlib.tests.test_animation.writer->NullMovieWriter()
A:matplotlib.tests.test_animation.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_animation.(line,)->ax.plot([], [])
A:matplotlib.tests.test_animation.x->numpy.linspace(0, 10, 100)
A:matplotlib.tests.test_animation.y->numpy.sin(x + i)
matplotlib.tests.test_animation.NullMovieWriter(animation.AbstractMovieWriter)
matplotlib.tests.test_animation.NullMovieWriter.finish(self)
matplotlib.tests.test_animation.NullMovieWriter.grab_frame(self,**savefig_kwargs)
matplotlib.tests.test_animation.NullMovieWriter.setup(self,fig,outfile,dpi,*args)
matplotlib.tests.test_animation.RegisteredNullMovieWriter(self,fps=None,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.tests.test_animation.RegisteredNullMovieWriter.__init__(self,fps=None,codec=None,bitrate=None,extra_args=None,metadata=None)
matplotlib.tests.test_animation.RegisteredNullMovieWriter.isAvailable(self)
matplotlib.tests.test_animation.test_movie_writer_dpi_default()
matplotlib.tests.test_animation.test_movie_writer_registry()
matplotlib.tests.test_animation.test_no_length_frames()
matplotlib.tests.test_animation.test_null_movie_writer()
matplotlib.tests.test_animation.test_save_animation_smoketest(tmpdir,writer,output)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_pdf.py----------------------------------------
A:matplotlib.tests.test_backend_pdf.needs_usetex->pytest.mark.xfail(not checkdep_usetex(True), reason='This test needs a TeX installation')
A:matplotlib.tests.test_backend_pdf.fig->matplotlib.pyplot.figure(figsize=(1, 2))
A:matplotlib.tests.test_backend_pdf.ax->matplotlib.pyplot.figure(figsize=(1, 2)).add_subplot(1, 1, 1)
A:matplotlib.tests.test_backend_pdf.pdfio->io.BytesIO()
A:matplotlib.tests.test_backend_pdf.(X, Y)->numpy.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))
A:matplotlib.tests.test_backend_pdf.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_backend_pdf.a->matplotlib.pyplot.Rectangle([0, 0], 0, 0, facecolor='green', hatch='XXXX')
A:matplotlib.tests.test_backend_pdf.b->matplotlib.pyplot.Rectangle([0, 0], 0, 0, facecolor='blue', hatch='XXXX')
A:matplotlib.tests.test_backend_pdf.dd->numpy.exp(-(x ** 2 + y ** 2))
A:matplotlib.tests.test_backend_pdf.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_pdf.actual_image->tmpdir.join('figure.pdf')
A:matplotlib.tests.test_backend_pdf.expected_image->tmpdir.join('figure.eps')
A:matplotlib.tests.test_backend_pdf.result->compare_images(str(actual_image), str(expected_image), 0)
A:matplotlib.tests.test_backend_pdf.path->str(tmpdir.join('tmpoutput.pdf'))
matplotlib.tests.test_backend_pdf.test_composite_image()
matplotlib.tests.test_backend_pdf.test_determinism_all()
matplotlib.tests.test_backend_pdf.test_determinism_hatches()
matplotlib.tests.test_backend_pdf.test_determinism_images()
matplotlib.tests.test_backend_pdf.test_determinism_markers()
matplotlib.tests.test_backend_pdf.test_determinism_plain()
matplotlib.tests.test_backend_pdf.test_failing_latex(tmpdir)
matplotlib.tests.test_backend_pdf.test_grayscale_alpha()
matplotlib.tests.test_backend_pdf.test_hatching_legend()
matplotlib.tests.test_backend_pdf.test_missing_psfont(monkeypatch)
matplotlib.tests.test_backend_pdf.test_multipage_keep_empty()
matplotlib.tests.test_backend_pdf.test_multipage_pagecount()
matplotlib.tests.test_backend_pdf.test_multipage_properfinalize()
matplotlib.tests.test_backend_pdf.test_pdf_savefig_when_color_is_none(tmpdir)
matplotlib.tests.test_backend_pdf.test_pdfpages_fspath()
matplotlib.tests.test_backend_pdf.test_source_date_epoch()
matplotlib.tests.test_backend_pdf.test_type42()
matplotlib.tests.test_backend_pdf.test_use14corefonts()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_ticker.py----------------------------------------
A:matplotlib.tests.test_ticker.loc->matplotlib.ticker.LogitLocator()
A:matplotlib.tests.test_ticker.test_value->numpy.array([0.5, 1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0, 128.0, 256.0])
A:matplotlib.tests.test_ticker.mult->matplotlib.ticker.MultipleLocator(base=0.7)
A:matplotlib.tests.test_ticker.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_ticker.fixed->matplotlib.ticker.FixedLocator(range(0, 24), nbins=5)
A:matplotlib.tests.test_ticker.index->matplotlib.ticker.IndexLocator(base=3, offset=4)
A:matplotlib.tests.test_ticker.sym->matplotlib.ticker.SymmetricalLogLocator(base=10, linthresh=1)
A:matplotlib.tests.test_ticker.formatter->matplotlib.ticker.PercentFormatter(xmax, decimals, symbol)
A:matplotlib.tests.test_ticker.tmp_form->matplotlib.ticker.FormatStrFormatter('%05d')
A:matplotlib.tests.test_ticker.formatter.axis->FakeAxis()
A:matplotlib.tests.test_ticker.fmt->matplotlib.ticker.PercentFormatter(symbol='\\{t}%', is_latex=is_latex)
A:matplotlib.tests.test_ticker.label->matplotlib.ticker.PercentFormatter(symbol='\\{t}%', is_latex=is_latex).pprint_val(value, domain)
A:matplotlib.tests.test_ticker.minor_tlocs->axis.get_minorticklocs()
A:matplotlib.tests.test_ticker.temp_lf->matplotlib.ticker.LogFormatter()
A:matplotlib.tests.test_ticker.temp_lf.axis->FakeAxis()
matplotlib.tests.test_ticker.FakeAxis(self,vmin=1,vmax=10)
matplotlib.tests.test_ticker.FakeAxis.__init__(self,vmin=1,vmax=10)
matplotlib.tests.test_ticker.FakeAxis.get_view_interval(self)
matplotlib.tests.test_ticker.TestAutoMinorLocator(object)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_basic(self)
matplotlib.tests.test_ticker.TestAutoMinorLocator.test_low_number_of_majorticks(self,nb_majorticks,expected_nb_minorticks)
matplotlib.tests.test_ticker.TestEngFormatter(object)
matplotlib.tests.test_ticker.TestEngFormatter.test_params(self,input,expected)
matplotlib.tests.test_ticker.TestFixedLocator(object)
matplotlib.tests.test_ticker.TestFixedLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestFormatStrFormatter(object)
matplotlib.tests.test_ticker.TestFormatStrFormatter.test_basic(self)
matplotlib.tests.test_ticker.TestIndexLocator(object)
matplotlib.tests.test_ticker.TestIndexLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLinearLocator(object)
matplotlib.tests.test_ticker.TestLinearLocator.test_basic(self)
matplotlib.tests.test_ticker.TestLinearLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLogFormatter(object)
matplotlib.tests.test_ticker.TestLogFormatter._sub_labels(self,axis,subs=())
matplotlib.tests.test_ticker.TestLogFormatter.test_LogFormatter_call(self,val)
matplotlib.tests.test_ticker.TestLogFormatter.test_pprint(self,value,domain,expected)
matplotlib.tests.test_ticker.TestLogFormatter.test_sublabel(self)
matplotlib.tests.test_ticker.TestLogFormatterExponent(object)
matplotlib.tests.test_ticker.TestLogFormatterExponent.test_basic(self,labelOnlyBase,base,exponent,locs,positions,expected)
matplotlib.tests.test_ticker.TestLogFormatterExponent.test_blank(self)
matplotlib.tests.test_ticker.TestLogFormatterMathtext
matplotlib.tests.test_ticker.TestLogFormatterMathtext.test_min_exponent(self,min_exponent,value,expected)
matplotlib.tests.test_ticker.TestLogFormatterSciNotation(object)
matplotlib.tests.test_ticker.TestLogFormatterSciNotation.test_basic(self,base,value,expected)
matplotlib.tests.test_ticker.TestLogLocator(object)
matplotlib.tests.test_ticker.TestLogLocator.test_basic(self)
matplotlib.tests.test_ticker.TestLogLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestLogitLocator(object)
matplotlib.tests.test_ticker.TestLogitLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestMaxNLocator(object)
matplotlib.tests.test_ticker.TestMaxNLocator.test_basic(self,vmin,vmax,expected)
matplotlib.tests.test_ticker.TestMaxNLocator.test_integer(self,vmin,vmax,steps,expected)
matplotlib.tests.test_ticker.TestMultipleLocator(object)
matplotlib.tests.test_ticker.TestMultipleLocator.test_basic(self)
matplotlib.tests.test_ticker.TestMultipleLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestNullLocator(object)
matplotlib.tests.test_ticker.TestNullLocator.test_set_params(self)
matplotlib.tests.test_ticker.TestPercentFormatter(object)
matplotlib.tests.test_ticker.TestPercentFormatter.test_basic(self,xmax,decimals,symbol,x,display_range,expected)
matplotlib.tests.test_ticker.TestPercentFormatter.test_latex(self,is_latex,usetex,expected)
matplotlib.tests.test_ticker.TestScalarFormatter(object)
matplotlib.tests.test_ticker.TestScalarFormatter.test_offset_value(self,left,right,offset)
matplotlib.tests.test_ticker.TestScalarFormatter.test_use_offset(self,use_offset)
matplotlib.tests.test_ticker.TestStrMethodFormatter(object)
matplotlib.tests.test_ticker.TestStrMethodFormatter.test_basic(self,format,input,expected)
matplotlib.tests.test_ticker.TestSymmetricalLogLocator(object)
matplotlib.tests.test_ticker.TestSymmetricalLogLocator.test_set_params(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_table.py----------------------------------------
A:matplotlib.tests.test_table.yoff->numpy.zeros(len(colLabels))
A:matplotlib.tests.test_table.t->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_table.c->numpy.linspace(0, 1, dim)
A:matplotlib.tests.test_table.colours->matplotlib.pyplot.cm.RdYlGn(c)
A:matplotlib.tests.test_table.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_table.ax1->matplotlib.pyplot.figure().add_subplot(4, 1, 1)
A:matplotlib.tests.test_table.ax2->matplotlib.pyplot.figure().add_subplot(4, 1, 2)
A:matplotlib.tests.test_table.ax3->matplotlib.pyplot.figure().add_subplot(4, 1, 3)
A:matplotlib.tests.test_table.ax4->matplotlib.pyplot.figure().add_subplot(4, 1, 4)
A:matplotlib.tests.test_table.(_, axes)->matplotlib.pyplot.subplots(nrows=len(cells), figsize=(4, len(cells) + 1))
A:matplotlib.tests.test_table.cell->Table(ax).add_cell(1, 2, 1, 1)
A:matplotlib.tests.test_table.code->tuple((s for (_, s) in cell.get_path().iter_segments()))
A:matplotlib.tests.test_table.tb1->matplotlib.pyplot.figure().add_subplot(4, 1, 1).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb2->matplotlib.pyplot.figure().add_subplot(4, 1, 2).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb3->matplotlib.pyplot.figure().add_subplot(4, 1, 3).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.tb4->matplotlib.pyplot.figure().add_subplot(4, 1, 4).table(cellText=[['Fit Text', 2], ['very long long text, Longer text than default', 1]], rowLabels=['A', 'B'], colLabels=['Col1', 'Col2'], loc='center')
A:matplotlib.tests.test_table.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_table.table->Table(ax)
A:matplotlib.tests.test_table.cell2->CustomCell((0, 0), 1, 2, visible_edges=None)
matplotlib.tests.test_table.test_auto_column()
matplotlib.tests.test_table.test_customcell()
matplotlib.tests.test_table.test_diff_cell_table()
matplotlib.tests.test_table.test_label_colours()
matplotlib.tests.test_table.test_non_square()
matplotlib.tests.test_table.test_table_cells()
matplotlib.tests.test_table.test_zorder()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_basic.py----------------------------------------
matplotlib.tests.test_basic.test_override_builtins()
matplotlib.tests.test_basic.test_simple()
matplotlib.tests.test_basic.test_verbose()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_transforms.py----------------------------------------
A:matplotlib.tests.test_transforms.self.underlying_transform->matplotlib.transforms.Affine2D().scale(10, 10)
A:matplotlib.tests.test_transforms.my_trans->AssertingNonAffineTransform()
A:matplotlib.tests.test_transforms.ax->matplotlib.pyplot.axes(projection='polar')
A:matplotlib.tests.test_transforms.(line,)->matplotlib.pyplot.plot(np.arange(10), transform=ScaledBy(10))
A:matplotlib.tests.test_transforms.times10->matplotlib.transforms.Affine2D().scale(10)
A:matplotlib.tests.test_transforms.x->numpy.linspace(8, 10, 20)
A:matplotlib.tests.test_transforms.y->numpy.linspace(1, 5, 20)
A:matplotlib.tests.test_transforms.(xs, ys)->numpy.meshgrid(np.linspace(15, 20, 15), np.linspace(12.4, 12.5, 20))
A:matplotlib.tests.test_transforms.expected->numpy.array([[0, 6], [0, 6], [0, 6]])
A:matplotlib.tests.test_transforms.points->numpy.array([[0, 0], [1, 1], [2, 2]])
A:matplotlib.tests.test_transforms.t->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_transforms.actual->matplotlib.transforms.Affine2D().transform(points)
A:matplotlib.tests.test_transforms.path->Path(points, codes)
A:matplotlib.tests.test_transforms.trans->matplotlib.transforms.Affine2D()
A:matplotlib.tests.test_transforms.tpath->matplotlib.transforms.Affine2D().transform_path_non_affine(path)
A:matplotlib.tests.test_transforms.result->self.stack2.get_affine().get_matrix()
A:matplotlib.tests.test_transforms.(tpoints, tcodes)->zip(*result)
A:matplotlib.tests.test_transforms.self.ta1->matplotlib.transforms.Affine2D(shorthand_name='ta1').rotate(np.pi / 2)
A:matplotlib.tests.test_transforms.self.ta2->matplotlib.transforms.Affine2D(shorthand_name='ta2').translate(10, 0)
A:matplotlib.tests.test_transforms.self.ta3->matplotlib.transforms.Affine2D(shorthand_name='ta3').scale(1, 2)
A:matplotlib.tests.test_transforms.self.tn1->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn1')
A:matplotlib.tests.test_transforms.self.tn2->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn2')
A:matplotlib.tests.test_transforms.self.tn3->NonAffineForTest(mtransforms.Affine2D().translate(1, 2), shorthand_name='tn3')
A:matplotlib.tests.test_transforms.na_pts->self.stack1.transform_non_affine(points)
A:matplotlib.tests.test_transforms.all_pts->self.stack1.transform(points)
A:matplotlib.tests.test_transforms.na_expected->numpy.array([[1.0, 2.0], [-19.0, 12.0], [np.nan, np.nan], [1.0, 1.0]], dtype=np.float64)
A:matplotlib.tests.test_transforms.all_expected->numpy.array([[11.0, 4.0], [-9.0, 24.0], [np.nan, np.nan], [11.0, 2.0]], dtype=np.float64)
A:matplotlib.tests.test_transforms.expected_result->(self.ta2 + self.ta3).get_matrix()
A:matplotlib.tests.test_transforms.offset->matplotlib.transforms.Affine2D().translate(0, 10)
A:matplotlib.tests.test_transforms.na_offset->NonAffineForTest(mtransforms.Affine2D().translate(10, 10))
A:matplotlib.tests.test_transforms.pth->Path(np.array([[0, 0], [0, 10], [10, 10], [10, 0]]))
A:matplotlib.tests.test_transforms.patch->matplotlib.patches.Wedge((0, 0), 1, 45, 135, transform=trans)
A:matplotlib.tests.test_transforms.r1->bbox_from_ext(0, 0, 1, 1)
A:matplotlib.tests.test_transforms.r2->bbox_from_ext(0.5, 0.5, 1.5, 1.5)
A:matplotlib.tests.test_transforms.r3->bbox_from_ext(0.5, 0, 0.75, 0.75)
A:matplotlib.tests.test_transforms.r4->bbox_from_ext(0.5, 1.5, 1, 2.5)
A:matplotlib.tests.test_transforms.r5->bbox_from_ext(1, 1, 2, 2)
A:matplotlib.tests.test_transforms.b->matplotlib.transforms.Bbox([[0, 0], [1, np.nan]])
A:matplotlib.tests.test_transforms.asdict->eval(format(b, fmt), {'Bbox': dict})
A:matplotlib.tests.test_transforms.r->matplotlib.transforms.Affine2D().transform_affine((1, 1))
A:matplotlib.tests.test_transforms.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_transforms.a->matplotlib.transforms.Bbox([[0, 0], [1, 1]])
A:matplotlib.tests.test_transforms.angles->numpy.array([20, 45, 60])
A:matplotlib.tests.test_transforms.new_angles->matplotlib.transforms.Affine2D().transform_angles(angles, points)
A:matplotlib.tests.test_transforms.zero_expansion->numpy.array([-0.001, 0.001])
A:matplotlib.tests.test_transforms.out->numpy.array(mtransforms.nonsingular(*args))
A:matplotlib.tests.test_transforms.trans_path->matplotlib.transforms.TransformedPath(path, trans)
A:matplotlib.tests.test_transforms.tpatch->matplotlib.transforms.TransformedPatchPath(patch)
A:matplotlib.tests.test_transforms.orig->matplotlib.transforms.Bbox.unit()
A:matplotlib.tests.test_transforms.locked->matplotlib.transforms.LockableBbox(orig, **{locked_element: 2})
matplotlib.tests.test_transforms.BasicTransformTests(unittest.TestCase)
matplotlib.tests.test_transforms.BasicTransformTests.setUp(self)
matplotlib.tests.test_transforms.BasicTransformTests.test_affine_simplification(self)
matplotlib.tests.test_transforms.BasicTransformTests.test_contains_branch(self)
matplotlib.tests.test_transforms.BasicTransformTests.test_left_to_right_iteration(self)
matplotlib.tests.test_transforms.BasicTransformTests.test_transform_depth(self)
matplotlib.tests.test_transforms.BasicTransformTests.test_transform_shortcuts(self)
matplotlib.tests.test_transforms.NonAffineForTest(self,real_trans,*args,**kwargs)
matplotlib.tests.test_transforms.NonAffineForTest.__init__(self,real_trans,*args,**kwargs)
matplotlib.tests.test_transforms.NonAffineForTest.transform_non_affine(self,values)
matplotlib.tests.test_transforms.NonAffineForTest.transform_path_non_affine(self,path)
matplotlib.tests.test_transforms.TestTransformPlotInterface(unittest.TestCase)
matplotlib.tests.test_transforms.TestTransformPlotInterface.tearDown(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_axes_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_compound_coords1(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_compound_coords2(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_data_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extent_predata_transform_coords(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_for_non_affine_transData(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_line_extents_non_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_pathc_extents_affine(self)
matplotlib.tests.test_transforms.TestTransformPlotInterface.test_pathc_extents_non_affine(self)
matplotlib.tests.test_transforms.assert_bbox_eq(bbox1,bbox2)
matplotlib.tests.test_transforms.test_Affine2D_from_values()
matplotlib.tests.test_transforms.test_bbox_as_strings()
matplotlib.tests.test_transforms.test_bbox_intersection()
matplotlib.tests.test_transforms.test_clipping_of_log()
matplotlib.tests.test_transforms.test_contour_pre_transform_limits()
matplotlib.tests.test_transforms.test_external_transform_api()
matplotlib.tests.test_transforms.test_invalid_arguments()
matplotlib.tests.test_transforms.test_lockable_bbox(locked_element)
matplotlib.tests.test_transforms.test_log_transform()
matplotlib.tests.test_transforms.test_nan_overlap()
matplotlib.tests.test_transforms.test_non_affine_caching()
matplotlib.tests.test_transforms.test_nonsingular()
matplotlib.tests.test_transforms.test_pcolor_pre_transform_limits()
matplotlib.tests.test_transforms.test_pcolormesh_pre_transform_limits()
matplotlib.tests.test_transforms.test_pre_transform_plotting()
matplotlib.tests.test_transforms.test_transform_angles()
matplotlib.tests.test_transforms.test_transform_single_point()
matplotlib.tests.test_transforms.test_transformed_patch_path()
matplotlib.tests.test_transforms.test_transformed_path()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backend_ps.py----------------------------------------
A:matplotlib.tests.test_backend_ps.needs_ghostscript->pytest.mark.xfail(matplotlib.checkdep_ghostscript()[0] is None, reason='This test needs a ghostscript installation')
A:matplotlib.tests.test_backend_ps.needs_usetex->pytest.mark.xfail(not matplotlib.checkdep_usetex(True), reason='This test needs a TeX installation')
A:matplotlib.tests.test_backend_ps.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_backend_ps.tempdir->tempfile.mkdtemp()
A:matplotlib.tests.test_backend_ps.base_tempdir->os.path.join(tempdir, 'short~1')
A:matplotlib.tests.test_backend_ps.output_eps->os.path.join(base_tempdir, 'tex_demo.eps')
A:matplotlib.tests.test_backend_ps.path->str(tmpdir.join('tmpoutput.ps'))
matplotlib.tests.test_backend_ps.test_determinism_all()
matplotlib.tests.test_backend_ps.test_determinism_all_tex()
matplotlib.tests.test_backend_ps.test_failing_latex(tmpdir)
matplotlib.tests.test_backend_ps.test_patheffects()
matplotlib.tests.test_backend_ps.test_savefig_to_stringio(format,use_log,rcParams)
matplotlib.tests.test_backend_ps.test_source_date_epoch()
matplotlib.tests.test_backend_ps.test_tilde_in_tempfilename()
matplotlib.tests.test_backend_ps.test_transparency()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_axes.py----------------------------------------
A:matplotlib.tests.test_axes.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.x->numpy.array([1, 2, 3])
A:matplotlib.tests.test_axes.a->numpy.zeros((m, n))
A:matplotlib.tests.test_axes.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_axes.ax->matplotlib.pyplot.figure().add_subplot(111, polar=True)
A:matplotlib.tests.test_axes.vals->numpy.linspace(0, 1, num=5, endpoint=True)
A:matplotlib.tests.test_axes.locs->numpy.sin(np.pi * vals / 2.0)
A:matplotlib.tests.test_axes.majl->matplotlib.pyplot.FixedLocator(locs)
A:matplotlib.tests.test_axes.minl->matplotlib.pyplot.FixedLocator([0.1, 0.2, 0.3])
A:matplotlib.tests.test_axes.ax1->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_axes.ax2->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny()
A:matplotlib.tests.test_axes.ax3->matplotlib.pyplot.figure().add_subplot(3, 1, 3)
A:matplotlib.tests.test_axes.x2->numpy.array([0, 1, 2])
A:matplotlib.tests.test_axes.ax_x_on->matplotlib.pyplot.figure().add_subplot(111, polar=True).twinx()
A:matplotlib.tests.test_axes.ax_x_off->matplotlib.pyplot.figure().add_subplot(111, polar=True).twinx()
A:matplotlib.tests.test_axes.ax_y_on->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny()
A:matplotlib.tests.test_axes.ax_y_off->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny()
A:matplotlib.tests.test_axes.img->numpy.random.random((100, 100))
A:matplotlib.tests.test_axes.ax0->matplotlib.pyplot.subplot(211)
A:matplotlib.tests.test_axes.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(2, 1, sharex=True)
A:matplotlib.tests.test_axes.t->numpy.random.RandomState(57483).randn(100)
A:matplotlib.tests.test_axes.s->matplotlib.pyplot.scatter(x, y, color=colors, linewidths=linewidths)
A:matplotlib.tests.test_axes.(line,)->matplotlib.pyplot.figure().add_subplot(111, polar=True).plot((0, 0), (0, 1), color='#0000ff', lw=1)
A:matplotlib.tests.test_axes.kwargs->list(product(length_includes_head, shape, head_starts_at_zero))
A:matplotlib.tests.test_axes.(fig, axs)->matplotlib.pyplot.subplots(ncols=3, sharex=True, sharey=True)
A:matplotlib.tests.test_axes.ann->matplotlib.pyplot.figure().add_subplot(111, polar=True).annotate('foo', (0, 1), xytext=(2, 3), arrowprops={})
A:matplotlib.tests.test_axes.r->matplotlib.pyplot.figure().add_subplot(111, polar=True).yaxis.get_major_locator()()
A:matplotlib.tests.test_axes.el->Ellipse((0, 0), 10, 20, facecolor='r', alpha=0.5)
A:matplotlib.tests.test_axes.day->matplotlib.testing.jpl_units.Duration('ET', 24.0 * 60.0 * 60.0)
A:matplotlib.tests.test_axes.ax4->matplotlib.pyplot.figure().add_subplot(224)
A:matplotlib.tests.test_axes.xdata->numpy.array([[0.53295185, 0.23052951, 0.19057629, 0.66724975, 0.96577916, 0.73136095, 0.60823287, 0.017921, 0.29744742, 0.27164665], [0.2798012, 0.25814229, 0.02818193, 0.12966456, 0.57446277, 0.58167607, 0.71028245, 0.69112737, 0.89923072, 0.99072476], [0.81218578, 0.80464528, 0.76071809, 0.85616314, 0.12757994, 0.94324936, 0.73078663, 0.09658102, 0.60703967, 0.77664978], [0.28332265, 0.81479711, 0.86985333, 0.43797066, 0.32540082, 0.43819229, 0.92230363, 0.49414252, 0.68168256, 0.05922372], [0.10721335, 0.93904142, 0.79163075, 0.73232848, 0.90283839, 0.68408046, 0.25502302, 0.95976614, 0.59214115, 0.13663711], [0.28087456, 0.33127607, 0.15530412, 0.76558121, 0.83389773, 0.03735974, 0.98717738, 0.71432229, 0.54881366, 0.86893953], [0.77995937, 0.995556, 0.29688434, 0.15646162, 0.051848, 0.37161935, 0.12998491, 0.09377296, 0.36882507, 0.36583435], [0.37851836, 0.05315792, 0.63144617, 0.25003433, 0.69586032, 0.11393988, 0.92362096, 0.88045438, 0.93530252, 0.68275072], [0.86486596, 0.83236675, 0.82960664, 0.5779663, 0.25724233, 0.84841095, 0.90862812, 0.64414887, 0.3565272, 0.71026066], [0.01383268, 0.3406093, 0.76084285, 0.70800694, 0.87634056, 0.08213693, 0.54655021, 0.98123181, 0.44080053, 0.86815815]])
A:matplotlib.tests.test_axes.y1->numpy.random.standard_normal(n)
A:matplotlib.tests.test_axes.y2->numpy.random.rand(n)
A:matplotlib.tests.test_axes.theta_mins->numpy.arange(15.0, 361.0, 90.0)
A:matplotlib.tests.test_axes.theta_maxs->numpy.arange(50.0, 361.0, 90.0)
A:matplotlib.tests.test_axes.(fig, axes)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.t0->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime(2009, 1, 20))
A:matplotlib.tests.test_axes.tf->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime(2009, 1, 21))
A:matplotlib.tests.test_axes.dt->matplotlib.testing.jpl_units.Duration('ET', units.day.convert('sec'))
A:matplotlib.tests.test_axes.data->numpy.random.rand(20, 10)
A:matplotlib.tests.test_axes.hb->matplotlib.pyplot.figure().add_subplot(111, polar=True).hexbin(x, y, extent=[0.1, 0.3, 0.6, 0.7], picker=-1)
A:matplotlib.tests.test_axes.y->numpy.array([1, np.nan, 3])
A:matplotlib.tests.test_axes.olderr->numpy.seterr(divide='ignore')
A:matplotlib.tests.test_axes.(x, y)->numpy.meshgrid(x, x)
A:matplotlib.tests.test_axes.c->matplotlib.patches.Circle((8, 8), radius=4, facecolor='none', edgecolor='green')
A:matplotlib.tests.test_axes.clipTransform->numpy.array([1, 2, 3]).get_transform()
A:matplotlib.tests.test_axes.clip_path->TransformedPath(clipPath, clipTransform)
A:matplotlib.tests.test_axes.verts->numpy.column_stack([np.cos(theta) * rx / area, np.sin(theta) * ry / area])
A:matplotlib.tests.test_axes.p->matplotlib.pyplot.figure().add_subplot(111, polar=True).get_position()
A:matplotlib.tests.test_axes.prof->numpy.array([7.9, 6.6, 3.8])
A:matplotlib.tests.test_axes.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_axes.Z->numpy.arange(6).reshape((3, 2))
A:matplotlib.tests.test_axes.Zm->numpy.ma.masked_where(np.abs(Qz) < 0.5 * np.max(Qz), Z)
A:matplotlib.tests.test_axes.base->datetime.datetime.datetime(2013, 1, 1)
A:matplotlib.tests.test_axes.(z1, z2)->numpy.meshgrid(np.arange(20), np.arange(20))
A:matplotlib.tests.test_axes.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.theta->numpy.linspace(0, 2 * np.pi, 21)
A:matplotlib.tests.test_axes.rtheta->numpy.deg2rad(angle)
A:matplotlib.tests.test_axes.R->numpy.array([[np.cos(rtheta), -np.sin(rtheta)], [np.sin(rtheta), np.cos(rtheta)]])
A:matplotlib.tests.test_axes.e1->matplotlib.patches.Arc((xcenter, ycenter), width, height, angle=angle, linewidth=2, fill=False, zorder=2)
A:matplotlib.tests.test_axes.e2->matplotlib.patches.Arc((xcenter, ycenter), width, height, angle=angle, linewidth=2, fill=False, zorder=2)
A:matplotlib.tests.test_axes.gs->matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
A:matplotlib.tests.test_axes.axes->axes.flatten().flatten()
A:matplotlib.tests.test_axes.rng->numpy.random.RandomState(57483)
A:matplotlib.tests.test_axes.(mpl_heights, _, _)->matplotlib.pyplot.hist(t, bins=bins, density=True)
A:matplotlib.tests.test_axes.(np_heights, _)->numpy.histogram(t, bins=bins, density=True)
A:matplotlib.tests.test_axes.(x, y, z)->contour_dat()
A:matplotlib.tests.test_axes.cs->matplotlib.pyplot.figure().add_subplot(111, polar=True).contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2), cmap=plt.get_cmap('RdBu'), vmin=-0.6, vmax=0.6, extend='both')
A:matplotlib.tests.test_axes.cs1->matplotlib.pyplot.figure().add_subplot(111, polar=True).contour(x, y, z, levels=np.arange(-2.2, -0.599, 0.2), colors=['y'], linestyles='solid', linewidths=2)
A:matplotlib.tests.test_axes.cs2->matplotlib.pyplot.figure().add_subplot(111, polar=True).contour(x, y, z, levels=np.arange(0.6, 2.2, 0.2), colors=['c'], linewidths=2)
A:matplotlib.tests.test_axes.cbar->matplotlib.pyplot.figure().colorbar(cs, ax=ax)
A:matplotlib.tests.test_axes.(fig, (ax0, ax1, ax2))->matplotlib.pyplot.subplots(ncols=3)
A:matplotlib.tests.test_axes.prj->Polar()
A:matplotlib.tests.test_axes.prj2->Polar()
A:matplotlib.tests.test_axes.prj3->Polar()
A:matplotlib.tests.test_axes.ax_via_gca->matplotlib.pyplot.gca(projection=prj3)
A:matplotlib.tests.test_axes.(fig1, ax1)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_axes.(fig2, ax2)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.d->layers(3, 100)
A:matplotlib.tests.test_axes.logstats->matplotlib.cbook.boxplot_stats(np.random.lognormal(mean=1.25, sigma=1.0, size=(37, 4)))
A:matplotlib.tests.test_axes.boxprops->dict(linestyle='--', color='b', linewidth=3)
A:matplotlib.tests.test_axes.flierprops->dict(linestyle='none', marker='d', markerfacecolor='g')
A:matplotlib.tests.test_axes.meanprops->dict(linestyle='none', marker='d', markerfacecolor='green')
A:matplotlib.tests.test_axes.medianprops->dict(linestyle='--', color='b', linewidth=3)
A:matplotlib.tests.test_axes.capprops->dict(linestyle='--', color='g', linewidth=3)
A:matplotlib.tests.test_axes.whiskerprops->dict(linestyle='-', color='m', linewidth=3)
A:matplotlib.tests.test_axes.(fig, [ax1, ax2])->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_axes.CIs->numpy.array([[-1.5, 3.0], [-1.0, 3.5]])
A:matplotlib.tests.test_axes.(fix, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.bp->matplotlib.pyplot.figure().add_subplot(111, polar=True).boxplot(x, sym='o')
A:matplotlib.tests.test_axes.old_xlim->matplotlib.pyplot.figure().add_subplot(111, polar=True).get_xlim()
A:matplotlib.tests.test_axes.new_xlim->matplotlib.pyplot.figure().add_subplot(111, polar=True).get_xlim()
A:matplotlib.tests.test_axes.b->matplotlib.pyplot.bar(np.array(xs, dtype=np.uint8), [2, 3, 4, 5])
A:matplotlib.tests.test_axes.ylower->numpy.maximum(0.01, y - yerr)
A:matplotlib.tests.test_axes.(f, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.(e1, _, _)->matplotlib.pyplot.figure().add_subplot(111, polar=True).errorbar(x, y, c=None)
A:matplotlib.tests.test_axes.(e2, _, _)->matplotlib.pyplot.figure().add_subplot(111, polar=True).errorbar(x, 2 * y, c=None)
A:matplotlib.tests.test_axes.(ln1,)->matplotlib.pyplot.figure().add_subplot(111, polar=True).plot(x, 4 * y)
A:matplotlib.tests.test_axes.uplims->numpy.zeros_like(x)
A:matplotlib.tests.test_axes.lolims->numpy.zeros_like(x)
A:matplotlib.tests.test_axes.(plotline, _, barlines)->matplotlib.pyplot.errorbar(x, y, xerr=1, yerr=1, fmt='none')
A:matplotlib.tests.test_axes._cycle->cycler(ls=['--', ':'], marker=['s', 's'], mfc=['k', 'w'])
A:matplotlib.tests.test_axes.d1->numpy.linspace(1, 3, 20)
A:matplotlib.tests.test_axes.d2->numpy.linspace(0, 10, 50)
A:matplotlib.tests.test_axes.w1->numpy.linspace(0.01, 3.5, 50)
A:matplotlib.tests.test_axes.w2->numpy.linspace(0.05, 2.0, 20)
A:matplotlib.tests.test_axes.x1->dateutil.parser.parse('2013-9-28 12:00:00')
A:matplotlib.tests.test_axes.kw->dict(ms=100, mew=20)
A:matplotlib.tests.test_axes.lon->numpy.linspace(-np.pi, np.pi, 360)
A:matplotlib.tests.test_axes.lat->numpy.linspace(-np.pi / 2.0, np.pi / 2.0, 180)
A:matplotlib.tests.test_axes.(lon, lat)->numpy.meshgrid(lon, lat)
A:matplotlib.tests.test_axes.xy->numpy.arange(10)
A:matplotlib.tests.test_axes.ll2->matplotlib.pyplot.figure().add_subplot(111, polar=True).transProjection.inverted().transform(xy)
A:matplotlib.tests.test_axes.ll->matplotlib.pyplot.figure().add_subplot(111, polar=True).transProjection.inverted().transform(xy)
A:matplotlib.tests.test_axes.xy2->matplotlib.pyplot.figure().add_subplot(111, polar=True).transProjection.transform(ll)
A:matplotlib.tests.test_axes.data1->numpy.random.random([20]).tolist()
A:matplotlib.tests.test_axes.data2->numpy.random.random([10]).tolist()
A:matplotlib.tests.test_axes.num_datasets->len(data)
A:matplotlib.tests.test_axes.axobj->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_axes.colls->matplotlib.pyplot.figure().add_subplot(111).eventplot(data, colors=['r', 'b'], color=['c', 'm'], linewidths=[2, 1], linewidth=[1, 2], linestyles=['solid', 'dashed'], linestyle=['dashdot', 'dotted'])
A:matplotlib.tests.test_axes.num_collections->len(colls)
A:matplotlib.tests.test_axes.expected->broadcast_to(mcolors.to_rgba_array(expected), (len(data), 4))
A:matplotlib.tests.test_axes.collections->matplotlib.pyplot.figure().add_subplot(111, polar=True).eventplot(data, colors=colors)
A:matplotlib.tests.test_axes.yerr->list(xrange(10))
A:matplotlib.tests.test_axes.(fig2, (ax2, ax3, ax4))->matplotlib.pyplot.subplots(nrows=3, figsize=(4, 8))
A:matplotlib.tests.test_axes.(fig3, ax5)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_axes.x5->numpy.ma.masked_equal([2, 4, 6, 8, 10, 12], 8)
A:matplotlib.tests.test_axes.ymin5->numpy.ma.masked_equal([0, 1, -1, 0, 2, 1], 2)
A:matplotlib.tests.test_axes.ymax5->numpy.ma.masked_equal([13, 14, 15, 16, 17, 18], 18)
A:matplotlib.tests.test_axes.y5->numpy.ma.masked_equal([2, 4, 6, 8, 10, 12], 8)
A:matplotlib.tests.test_axes.xmin5->numpy.ma.masked_equal([0, 1, -1, 0, 2, 1], 2)
A:matplotlib.tests.test_axes.xmax5->numpy.ma.masked_equal([13, 14, 15, 16, 17, 18], 18)
A:matplotlib.tests.test_axes.(fig, ax_lst)->matplotlib.pyplot.subplots(2, 2, sharex='all', sharey='all')
A:matplotlib.tests.test_axes.ax_lst->ax_lst.flatten().flatten()
A:matplotlib.tests.test_axes.p1->matplotlib.pyplot.figure().add_subplot(111, polar=True).eventplot(data, colors=colors).PatchCollection([c], match_original=True)
A:matplotlib.tests.test_axes.p2->matplotlib.pyplot.figure().add_subplot(111, polar=True).eventplot(data, colors=colors).PatchCollection([c], match_original=True)
A:matplotlib.tests.test_axes.NFFT->int(1000 * Fs / 11)
A:matplotlib.tests.test_axes.noverlap->int(NFFT / 2)
A:matplotlib.tests.test_axes.pad_to->int(2 ** np.ceil(np.log2(NFFT)))
A:matplotlib.tests.test_axes.fig1->matplotlib.pyplot.figure()
A:matplotlib.tests.test_axes.fig2->matplotlib.pyplot.figure()
A:matplotlib.tests.test_axes.ax11->matplotlib.pyplot.figure().add_subplot(3, 1, 1)
A:matplotlib.tests.test_axes.ax12->matplotlib.pyplot.figure().add_subplot(3, 1, 2)
A:matplotlib.tests.test_axes.ax13->matplotlib.pyplot.figure().add_subplot(3, 1, 3)
A:matplotlib.tests.test_axes.ax21->matplotlib.pyplot.figure().add_subplot(3, 1, 1)
A:matplotlib.tests.test_axes.ax22->matplotlib.pyplot.figure().add_subplot(3, 1, 2)
A:matplotlib.tests.test_axes.ax23->matplotlib.pyplot.figure().add_subplot(3, 1, 3)
A:matplotlib.tests.test_axes.spec11->matplotlib.pyplot.figure().add_subplot(3, 1, 1).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='default', mode='phase')
A:matplotlib.tests.test_axes.spec12->matplotlib.pyplot.figure().add_subplot(3, 1, 2).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='onesided', mode='phase')
A:matplotlib.tests.test_axes.spec13->matplotlib.pyplot.figure().add_subplot(3, 1, 3).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='twosided', mode='phase')
A:matplotlib.tests.test_axes.spec21->matplotlib.pyplot.figure().add_subplot(3, 1, 1).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='default', mode='magnitude', scale='linear', norm=matplotlib.colors.LogNorm())
A:matplotlib.tests.test_axes.spec22->matplotlib.pyplot.figure().add_subplot(3, 1, 2).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='onesided', mode='magnitude', scale='linear', norm=matplotlib.colors.LogNorm())
A:matplotlib.tests.test_axes.spec23->matplotlib.pyplot.figure().add_subplot(3, 1, 3).specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='twosided', mode='magnitude', scale='linear', norm=matplotlib.colors.LogNorm())
A:matplotlib.tests.test_axes.(psd1, freqs1)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).psd(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='default')
A:matplotlib.tests.test_axes.(psd2, freqs2)->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny().psd(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='onesided', return_line=False)
A:matplotlib.tests.test_axes.(psd3, freqs3, line3)->matplotlib.pyplot.figure().add_subplot(3, 1, 3).psd(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='twosided', return_line=True)
A:matplotlib.tests.test_axes.(csd1, freqs1)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).csd(y1, y2, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='default')
A:matplotlib.tests.test_axes.(csd2, freqs2)->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny().csd(y1, y2, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='onesided', return_line=False)
A:matplotlib.tests.test_axes.(csd3, freqs3, line3)->matplotlib.pyplot.figure().add_subplot(3, 1, 3).csd(y1, y2, NFFT=NFFT, Fs=Fs, noverlap=noverlap, pad_to=pad_to, sides='twosided', return_line=True)
A:matplotlib.tests.test_axes.(spec11, freqs11, line11)->matplotlib.pyplot.figure().add_subplot(3, 1, 1).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='default')
A:matplotlib.tests.test_axes.(spec12, freqs12, line12)->matplotlib.pyplot.figure().add_subplot(3, 1, 2).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='onesided')
A:matplotlib.tests.test_axes.(spec13, freqs13, line13)->matplotlib.pyplot.figure().add_subplot(3, 1, 3).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='twosided')
A:matplotlib.tests.test_axes.(spec21, freqs21, line21)->matplotlib.pyplot.figure().add_subplot(3, 1, 1).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='default', scale='dB')
A:matplotlib.tests.test_axes.(spec22, freqs22, line22)->matplotlib.pyplot.figure().add_subplot(3, 1, 2).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='onesided', scale='dB')
A:matplotlib.tests.test_axes.(spec23, freqs23, line23)->matplotlib.pyplot.figure().add_subplot(3, 1, 3).magnitude_spectrum(y, Fs=Fs, pad_to=pad_to, sides='twosided', scale='dB')
A:matplotlib.tests.test_axes.(spec1, freqs1, line1)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).phase_spectrum(y, Fs=Fs, pad_to=pad_to, sides='default')
A:matplotlib.tests.test_axes.(spec2, freqs2, line2)->matplotlib.pyplot.figure().add_subplot(111, polar=True).twiny().phase_spectrum(y, Fs=Fs, pad_to=pad_to, sides='onesided')
A:matplotlib.tests.test_axes.(spec3, freqs3, line3)->matplotlib.pyplot.figure().add_subplot(3, 1, 3).phase_spectrum(y, Fs=Fs, pad_to=pad_to, sides='twosided')
A:matplotlib.tests.test_axes.host->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_axes.par1->matplotlib.pyplot.figure().add_subplot(111).twinx()
A:matplotlib.tests.test_axes.par2->matplotlib.pyplot.figure().add_subplot(111).twinx()
A:matplotlib.tests.test_axes.(p1,)->matplotlib.pyplot.figure().add_subplot(111).plot([0, 1, 2], [0, 1, 2], 'b-')
A:matplotlib.tests.test_axes.(p2,)->matplotlib.pyplot.figure().add_subplot(111).twinx().plot([0, 1, 2], [0, 3, 2], 'r-')
A:matplotlib.tests.test_axes.(p3,)->matplotlib.pyplot.figure().add_subplot(111).twinx().plot([0, 1, 2], [50, 30, 15], 'g-')
A:matplotlib.tests.test_axes.tkw->dict(size=4, width=1.5)
A:matplotlib.tests.test_axes.(ymin, ymax)->matplotlib.pyplot.figure().add_subplot(111, polar=True).get_ylim()
A:matplotlib.tests.test_axes.(x0, x1)->axes[1].get_xlim()
A:matplotlib.tests.test_axes.(y0, y1)->axes[1].get_ylim()
A:matplotlib.tests.test_axes.ax_twin->getattr(ax, 'twin{}'.format(twin))()
A:matplotlib.tests.test_axes.l->matplotlib.pyplot.figure().add_subplot(111, polar=True).plot(x2, y2)
A:matplotlib.tests.test_axes.ymin->min(data)
A:matplotlib.tests.test_axes.ymax->max(data)
A:matplotlib.tests.test_axes.(fig3, ax3)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_axes.out->io.BytesIO()
A:matplotlib.tests.test_axes.X->numpy.array([0, 1, 2, 10])
A:matplotlib.tests.test_axes.Y->numpy.array([0, 1, 2])
A:matplotlib.tests.test_axes.err_cycler->cycler('err', [1, [1, 1, 1, 1, 1], [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], [[1]] * 5, np.ones(5), np.ones((2, 5)), np.ones((5, 1)), None])
A:matplotlib.tests.test_axes.xerr_cy->cycler('xerr', err_cycler)
A:matplotlib.tests.test_axes.yerr_cy->cycler('yerr', err_cycler)
A:matplotlib.tests.test_axes.test_cyclers->chain(xerr_only, yerr_only, both_err, empty)
A:matplotlib.tests.test_axes.eb->matplotlib.pyplot.figure().add_subplot(111, polar=True).errorbar(**kwargs)
A:matplotlib.tests.test_axes.m->matplotlib.pyplot.figure().add_subplot(111, polar=True).titleOffsetTrans.get_matrix()
A:matplotlib.tests.test_axes.orig_xlim->ax_lst[0][1].get_xlim()
A:matplotlib.tests.test_axes.time->pd.date_range('2000-01-01', periods=10)
A:matplotlib.tests.test_axes.depth->numpy.arange(20)
A:matplotlib.tests.test_axes.dates->numpy.arange('2005-02', '2005-03', dtype='datetime64[D]')
A:matplotlib.tests.test_axes.values->numpy.sin(np.array(range(len(dates))))
A:matplotlib.tests.test_axes.df->pd.DataFrame({'a': range(2), 'b': range(2)})
A:matplotlib.tests.test_axes.without_zero_index->df[np.array(df.index) % 2 == 1].copy()
A:matplotlib.tests.test_axes.ser_1->pd.Series(data=[1, 2, 2, 3, 3, 4, 4, 4, 4, 5])
A:matplotlib.tests.test_axes.axis_1->matplotlib.pyplot.subplot()
A:matplotlib.tests.test_axes.(ln,)->matplotlib.pyplot.figure().add_subplot(111, polar=True).plot(range(3))
A:matplotlib.tests.test_axes.circ->matplotlib.patches.Circle((3, 3), color='r')
A:matplotlib.tests.test_axes.uv->numpy.linspace(0, 50, len(dates))
A:matplotlib.tests.test_axes.brs->matplotlib.pyplot.figure().add_subplot(111, polar=True).bar(range(3), range(3))
A:matplotlib.tests.test_axes.(fix, (ax, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_axes.cc->matplotlib.pyplot.figure().add_subplot(111, polar=True).fill_between(range(3), range(3), **{el: 'k'})
A:matplotlib.tests.test_axes.target->matplotlib.colors.to_rgba('k')
A:matplotlib.tests.test_axes.edge_target->matplotlib.colors.to_rgba('k')
A:matplotlib.tests.test_axes.face_target->matplotlib.colors.to_rgba('C{}'.format(j))
A:matplotlib.tests.test_axes.(xlim0, xlim1)->matplotlib.pyplot.figure().add_subplot(111, polar=True).get_xlim()
A:matplotlib.tests.test_axes.transform->matplotlib.pyplot.figure().add_subplot(111, polar=True).xaxis.get_transform()
A:matplotlib.tests.test_axes.(xlim0t, xlim1t)->matplotlib.pyplot.figure().add_subplot(111, polar=True).xaxis.get_transform().transform([xlim0, xlim1])
A:matplotlib.tests.test_axes.(x0t, x1t)->matplotlib.pyplot.figure().add_subplot(111, polar=True).xaxis.get_transform().transform([10, 100])
A:matplotlib.tests.test_axes.colors->numpy.array(['k', 'w', 'k'])
A:matplotlib.tests.test_axes.linewidths->matplotlib.pyplot.scatter(x, y, color=colors, linewidths=linewidths).get_linewidths()
A:matplotlib.tests.test_axes.facecolors->matplotlib.pyplot.scatter(x, y, color=colors, linewidths=linewidths).get_facecolors()
A:matplotlib.tests.test_axes.linecolors->matplotlib.pyplot.scatter(x, y, color=colors, linewidths=linewidths).get_edgecolors()
A:matplotlib.tests.test_axes.(rect1, rect2)->matplotlib.pyplot.figure().add_subplot(111, polar=True).bar([0, 1], [0, 1], edgecolor=(0.1, 0.2, 0.3, 0.4))
A:matplotlib.tests.test_axes.xtwin->matplotlib.pyplot.figure().add_subplot(111, polar=True).twinx()
A:matplotlib.tests.test_axes.(r,)->matplotlib.pyplot.figure().add_subplot(111, polar=True).barh(*args, **kwargs)
matplotlib.tests.test_axes._rc_test_bxp_helper(ax,rc_dict)
matplotlib.tests.test_axes.contour_dat()
matplotlib.tests.test_axes.generate_errorbar_inputs()
matplotlib.tests.test_axes.shared_axes_generator(request)
matplotlib.tests.test_axes.shared_axis_remover(request)
matplotlib.tests.test_axes.test_acorr()
matplotlib.tests.test_axes.test_adjust_numtick_aspect()
matplotlib.tests.test_axes.test_alpha()
matplotlib.tests.test_axes.test_angle_spectrum_freqs()
matplotlib.tests.test_axes.test_angle_spectrum_noise()
matplotlib.tests.test_axes.test_annotate_default_arrow()
matplotlib.tests.test_axes.test_arc_angles()
matplotlib.tests.test_axes.test_arc_ellipse()
matplotlib.tests.test_axes.test_arrow_simple()
matplotlib.tests.test_axes.test_as_mpl_axes_api()
matplotlib.tests.test_axes.test_auto_numticks()
matplotlib.tests.test_axes.test_auto_numticks_log()
matplotlib.tests.test_axes.test_autoscale_log_shared()
matplotlib.tests.test_axes.test_autoscale_tight()
matplotlib.tests.test_axes.test_autoscale_tiny_range()
matplotlib.tests.test_axes.test_axes_margins()
matplotlib.tests.test_axes.test_axes_tick_params_gridlines()
matplotlib.tests.test_axes.test_axes_tick_params_xlabelside()
matplotlib.tests.test_axes.test_axes_tick_params_ylabelside()
matplotlib.tests.test_axes.test_axhspan_epoch()
matplotlib.tests.test_axes.test_axis_set_tick_params_labelsize_labelcolor()
matplotlib.tests.test_axes.test_axisbelow()
matplotlib.tests.test_axes.test_axvspan_epoch()
matplotlib.tests.test_axes.test_bar_broadcast_args()
matplotlib.tests.test_axes.test_bar_color_cycle()
matplotlib.tests.test_axes.test_bar_signature(args,kwargs,warning_count)
matplotlib.tests.test_axes.test_bar_tick_label_multiple()
matplotlib.tests.test_axes.test_bar_tick_label_multiple_old_alignment()
matplotlib.tests.test_axes.test_bar_tick_label_single()
matplotlib.tests.test_axes.test_bar_ticklabel_fail()
matplotlib.tests.test_axes.test_bar_uint8()
matplotlib.tests.test_axes.test_barb_units()
matplotlib.tests.test_axes.test_barh_signature(args,kwargs,warning_count)
matplotlib.tests.test_axes.test_barh_tick_label()
matplotlib.tests.test_axes.test_basic_annotate()
matplotlib.tests.test_axes.test_boxplot()
matplotlib.tests.test_axes.test_boxplot_autorange_whiskers()
matplotlib.tests.test_axes.test_boxplot_bad_ci_1()
matplotlib.tests.test_axes.test_boxplot_bad_ci_2()
matplotlib.tests.test_axes.test_boxplot_bad_medians_1()
matplotlib.tests.test_axes.test_boxplot_bad_medians_2()
matplotlib.tests.test_axes.test_boxplot_mod_artist_after_plotting()
matplotlib.tests.test_axes.test_boxplot_no_weird_whisker()
matplotlib.tests.test_axes.test_boxplot_rc_parameters()
matplotlib.tests.test_axes.test_boxplot_sym()
matplotlib.tests.test_axes.test_boxplot_sym2()
matplotlib.tests.test_axes.test_boxplot_with_CIarray()
matplotlib.tests.test_axes.test_boxplot_zorder()
matplotlib.tests.test_axes.test_broken_barh_empty()
matplotlib.tests.test_axes.test_bxp_bad_positions()
matplotlib.tests.test_axes.test_bxp_bad_widths()
matplotlib.tests.test_axes.test_bxp_baseline()
matplotlib.tests.test_axes.test_bxp_custombox()
matplotlib.tests.test_axes.test_bxp_customcap()
matplotlib.tests.test_axes.test_bxp_custommedian()
matplotlib.tests.test_axes.test_bxp_customoutlier()
matplotlib.tests.test_axes.test_bxp_custompatchartist()
matplotlib.tests.test_axes.test_bxp_custompositions()
matplotlib.tests.test_axes.test_bxp_customwhisker()
matplotlib.tests.test_axes.test_bxp_customwidths()
matplotlib.tests.test_axes.test_bxp_horizontal()
matplotlib.tests.test_axes.test_bxp_no_flier_stats()
matplotlib.tests.test_axes.test_bxp_nobox()
matplotlib.tests.test_axes.test_bxp_nocaps()
matplotlib.tests.test_axes.test_bxp_patchartist()
matplotlib.tests.test_axes.test_bxp_precentilewhis()
matplotlib.tests.test_axes.test_bxp_rangewhis()
matplotlib.tests.test_axes.test_bxp_scalarwidth()
matplotlib.tests.test_axes.test_bxp_showcustommean()
matplotlib.tests.test_axes.test_bxp_showmean()
matplotlib.tests.test_axes.test_bxp_showmeanasline()
matplotlib.tests.test_axes.test_bxp_shownotches()
matplotlib.tests.test_axes.test_bxp_with_xlabels()
matplotlib.tests.test_axes.test_bxp_with_ylabels()
matplotlib.tests.test_axes.test_canonical()
matplotlib.tests.test_axes.test_color_None()
matplotlib.tests.test_axes.test_color_alias()
matplotlib.tests.test_axes.test_color_length_mismatch()
matplotlib.tests.test_axes.test_const_xy()
matplotlib.tests.test_axes.test_contour_colorbar()
matplotlib.tests.test_axes.test_contour_hatching()
matplotlib.tests.test_axes.test_csd_freqs()
matplotlib.tests.test_axes.test_csd_noise()
matplotlib.tests.test_axes.test_dash_offset()
matplotlib.tests.test_axes.test_date_timezone_x()
matplotlib.tests.test_axes.test_date_timezone_x_and_y()
matplotlib.tests.test_axes.test_date_timezone_y()
matplotlib.tests.test_axes.test_eb_line_zorder()
matplotlib.tests.test_axes.test_empty_errorbar_legend()
matplotlib.tests.test_axes.test_empty_eventplot()
matplotlib.tests.test_axes.test_empty_shared_subplots()
matplotlib.tests.test_axes.test_errobar_nonefmt()
matplotlib.tests.test_axes.test_errorbar()
matplotlib.tests.test_axes.test_errorbar_colorcycle()
matplotlib.tests.test_axes.test_errorbar_inputs_shotgun(kwargs)
matplotlib.tests.test_axes.test_errorbar_limits()
matplotlib.tests.test_axes.test_errorbar_shape()
matplotlib.tests.test_axes.test_errorbar_with_prop_cycle()
matplotlib.tests.test_axes.test_eventplot()
matplotlib.tests.test_axes.test_eventplot_colors(colors)
matplotlib.tests.test_axes.test_eventplot_defaults()
matplotlib.tests.test_axes.test_eventplot_legend()
matplotlib.tests.test_axes.test_eventplot_orientation(data,orientation)
matplotlib.tests.test_axes.test_eventplot_problem_kwargs()
matplotlib.tests.test_axes.test_fill_between_input(x,y1,y2)
matplotlib.tests.test_axes.test_fill_between_interpolate()
matplotlib.tests.test_axes.test_fill_between_interpolate_decreasing()
matplotlib.tests.test_axes.test_fill_betweenx_input(y,x1,x2)
matplotlib.tests.test_axes.test_fill_units()
matplotlib.tests.test_axes.test_fillbetween_cycle()
matplotlib.tests.test_axes.test_formatter_large_small()
matplotlib.tests.test_axes.test_formatter_ticker()
matplotlib.tests.test_axes.test_get_labels()
matplotlib.tests.test_axes.test_hexbin_empty()
matplotlib.tests.test_axes.test_hexbin_extent()
matplotlib.tests.test_axes.test_hexbin_log()
matplotlib.tests.test_axes.test_hexbin_pickable()
matplotlib.tests.test_axes.test_hist2d()
matplotlib.tests.test_axes.test_hist2d_transpose()
matplotlib.tests.test_axes.test_hist_bar_empty()
matplotlib.tests.test_axes.test_hist_datetime_datasets()
matplotlib.tests.test_axes.test_hist_density()
matplotlib.tests.test_axes.test_hist_emptydata()
matplotlib.tests.test_axes.test_hist_log()
matplotlib.tests.test_axes.test_hist_normed_density(normed,density)
matplotlib.tests.test_axes.test_hist_offset()
matplotlib.tests.test_axes.test_hist_stacked_bar()
matplotlib.tests.test_axes.test_hist_stacked_density()
matplotlib.tests.test_axes.test_hist_stacked_normed()
matplotlib.tests.test_axes.test_hist_stacked_step()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled()
matplotlib.tests.test_axes.test_hist_stacked_stepfilled_alpha()
matplotlib.tests.test_axes.test_hist_stacked_weighted()
matplotlib.tests.test_axes.test_hist_step()
matplotlib.tests.test_axes.test_hist_step_bottom()
matplotlib.tests.test_axes.test_hist_step_empty()
matplotlib.tests.test_axes.test_hist_step_filled()
matplotlib.tests.test_axes.test_hist_step_horiz()
matplotlib.tests.test_axes.test_hist_step_log_bottom()
matplotlib.tests.test_axes.test_hist_steplog()
matplotlib.tests.test_axes.test_hist_unequal_bins_density()
matplotlib.tests.test_axes.test_hlines()
matplotlib.tests.test_axes.test_horiz_violinplot_baseline()
matplotlib.tests.test_axes.test_horiz_violinplot_custompoints_10()
matplotlib.tests.test_axes.test_horiz_violinplot_custompoints_200()
matplotlib.tests.test_axes.test_horiz_violinplot_showall()
matplotlib.tests.test_axes.test_horiz_violinplot_showextrema()
matplotlib.tests.test_axes.test_horiz_violinplot_showmeans()
matplotlib.tests.test_axes.test_horiz_violinplot_showmedians()
matplotlib.tests.test_axes.test_imshow()
matplotlib.tests.test_axes.test_imshow_clip()
matplotlib.tests.test_axes.test_invalid_axis_limits()
matplotlib.tests.test_axes.test_inverted_cla()
matplotlib.tests.test_axes.test_inverted_limits()
matplotlib.tests.test_axes.test_large_offset()
matplotlib.tests.test_axes.test_length_one_hist()
matplotlib.tests.test_axes.test_log_margins()
matplotlib.tests.test_axes.test_log_scales()
matplotlib.tests.test_axes.test_loglog()
matplotlib.tests.test_axes.test_loglog_nonpos()
matplotlib.tests.test_axes.test_ls_ds_conflict()
matplotlib.tests.test_axes.test_magnitude_spectrum_freqs()
matplotlib.tests.test_axes.test_magnitude_spectrum_noise()
matplotlib.tests.test_axes.test_manage_xticks()
matplotlib.tests.test_axes.test_margins()
matplotlib.tests.test_axes.test_marker_edges()
matplotlib.tests.test_axes.test_marker_styles()
matplotlib.tests.test_axes.test_markers_fillstyle_rcparams()
matplotlib.tests.test_axes.test_markevery()
matplotlib.tests.test_axes.test_markevery_line()
matplotlib.tests.test_axes.test_markevery_linear_scales()
matplotlib.tests.test_axes.test_markevery_linear_scales_zoomed()
matplotlib.tests.test_axes.test_markevery_log_scales()
matplotlib.tests.test_axes.test_markevery_polar()
matplotlib.tests.test_axes.test_matshow()
matplotlib.tests.test_axes.test_minorticks_on(xscale,yscale)
matplotlib.tests.test_axes.test_minorticks_on_rcParams_both()
matplotlib.tests.test_axes.test_mixed_collection()
matplotlib.tests.test_axes.test_mollweide_forward_inverse_closure()
matplotlib.tests.test_axes.test_mollweide_grid()
matplotlib.tests.test_axes.test_mollweide_inverse_forward_closure()
matplotlib.tests.test_axes.test_move_offsetlabel()
matplotlib.tests.test_axes.test_no_None()
matplotlib.tests.test_axes.test_none_kwargs()
matplotlib.tests.test_axes.test_nonfinite_limits()
matplotlib.tests.test_axes.test_numerical_hist_label()
matplotlib.tests.test_axes.test_o_marker_path_snap()
matplotlib.tests.test_axes.test_offset_label_color()
matplotlib.tests.test_axes.test_pandas_bar_align_center(pd)
matplotlib.tests.test_axes.test_pandas_errorbar_indexing(pd)
matplotlib.tests.test_axes.test_pandas_indexing_dates(pd)
matplotlib.tests.test_axes.test_pandas_indexing_hist(pd)
matplotlib.tests.test_axes.test_pandas_pcolormesh(pd)
matplotlib.tests.test_axes.test_patch_deprecations()
matplotlib.tests.test_axes.test_pathological_hexbin()
matplotlib.tests.test_axes.test_pcolor_datetime_axis()
matplotlib.tests.test_axes.test_pcolor_fast_non_uniform()
matplotlib.tests.test_axes.test_pcolorargs()
matplotlib.tests.test_axes.test_pcolorargs_5205()
matplotlib.tests.test_axes.test_pcolormesh()
matplotlib.tests.test_axes.test_pcolormesh_datetime_axis()
matplotlib.tests.test_axes.test_phase_spectrum_freqs()
matplotlib.tests.test_axes.test_phase_spectrum_noise()
matplotlib.tests.test_axes.test_pie_ccw_true()
matplotlib.tests.test_axes.test_pie_center_radius()
matplotlib.tests.test_axes.test_pie_frame_grid()
matplotlib.tests.test_axes.test_pie_linewidth_0()
matplotlib.tests.test_axes.test_pie_linewidth_2()
matplotlib.tests.test_axes.test_pie_rotatelabels_true()
matplotlib.tests.test_axes.test_plot_columns_cycle_deprecation()
matplotlib.tests.test_axes.test_polar_annotations()
matplotlib.tests.test_axes.test_polar_coord_annotations()
matplotlib.tests.test_axes.test_polar_gridlines()
matplotlib.tests.test_axes.test_polar_negative_rmin()
matplotlib.tests.test_axes.test_polar_rlabel_position()
matplotlib.tests.test_axes.test_polar_rmin()
matplotlib.tests.test_axes.test_polar_rorigin()
matplotlib.tests.test_axes.test_polar_theta_limits()
matplotlib.tests.test_axes.test_polar_theta_position()
matplotlib.tests.test_axes.test_polar_units()
matplotlib.tests.test_axes.test_polar_wrap()
matplotlib.tests.test_axes.test_polycollection_joinstyle()
matplotlib.tests.test_axes.test_psd_freqs()
matplotlib.tests.test_axes.test_psd_noise()
matplotlib.tests.test_axes.test_pyplot_axes()
matplotlib.tests.test_axes.test_quiver_units()
matplotlib.tests.test_axes.test_rc_grid()
matplotlib.tests.test_axes.test_rc_major_minor_tick()
matplotlib.tests.test_axes.test_rc_spines()
matplotlib.tests.test_axes.test_rc_tick()
matplotlib.tests.test_axes.test_rcparam_grid_minor()
matplotlib.tests.test_axes.test_relim_visible_only()
matplotlib.tests.test_axes.test_remove_shared_axes(shared_axes_generator,shared_axis_remover)
matplotlib.tests.test_axes.test_remove_shared_axes_relim()
matplotlib.tests.test_axes.test_rgba_markers()
matplotlib.tests.test_axes.test_scatter_2D()
matplotlib.tests.test_axes.test_scatter_color()
matplotlib.tests.test_axes.test_scatter_color_masking()
matplotlib.tests.test_axes.test_scatter_marker()
matplotlib.tests.test_axes.test_scatter_plot()
matplotlib.tests.test_axes.test_set_get_ticklabels()
matplotlib.tests.test_axes.test_shaped_data()
matplotlib.tests.test_axes.test_shared_scale()
matplotlib.tests.test_axes.test_shared_with_aspect_1()
matplotlib.tests.test_axes.test_shared_with_aspect_2()
matplotlib.tests.test_axes.test_shared_with_aspect_3()
matplotlib.tests.test_axes.test_single_date()
matplotlib.tests.test_axes.test_single_point()
matplotlib.tests.test_axes.test_specgram_angle_freqs()
matplotlib.tests.test_axes.test_specgram_freqs()
matplotlib.tests.test_axes.test_specgram_freqs_phase()
matplotlib.tests.test_axes.test_specgram_magnitude_freqs()
matplotlib.tests.test_axes.test_specgram_magnitude_noise()
matplotlib.tests.test_axes.test_specgram_noise()
matplotlib.tests.test_axes.test_specgram_noise_angle()
matplotlib.tests.test_axes.test_specgram_noise_phase()
matplotlib.tests.test_axes.test_spy()
matplotlib.tests.test_axes.test_square_plot()
matplotlib.tests.test_axes.test_stackplot()
matplotlib.tests.test_axes.test_stackplot_baseline()
matplotlib.tests.test_axes.test_stem_args()
matplotlib.tests.test_axes.test_stem_dates()
matplotlib.tests.test_axes.test_step_linestyle()
matplotlib.tests.test_axes.test_subplot_key_hash()
matplotlib.tests.test_axes.test_symlog()
matplotlib.tests.test_axes.test_symlog2()
matplotlib.tests.test_axes.test_text_labelsize()
matplotlib.tests.test_axes.test_tick_label_update()
matplotlib.tests.test_axes.test_tick_param_label_rotation()
matplotlib.tests.test_axes.test_tick_space_size_0()
matplotlib.tests.test_axes.test_title_location_roundtrip()
matplotlib.tests.test_axes.test_title_pad()
matplotlib.tests.test_axes.test_transparent_markers()
matplotlib.tests.test_axes.test_twin_axis_locaters_formatters()
matplotlib.tests.test_axes.test_twin_inherit_autoscale_setting()
matplotlib.tests.test_axes.test_twin_spines()
matplotlib.tests.test_axes.test_twin_spines_on_top()
matplotlib.tests.test_axes.test_twin_with_aspect(twin)
matplotlib.tests.test_axes.test_twinx_axis_scales()
matplotlib.tests.test_axes.test_twinx_cla()
matplotlib.tests.test_axes.test_twinx_knows_limits()
matplotlib.tests.test_axes.test_unicode_hist_label()
matplotlib.tests.test_axes.test_use_sticky_edges()
matplotlib.tests.test_axes.test_vert_violinplot_baseline()
matplotlib.tests.test_axes.test_vert_violinplot_custompoints_10()
matplotlib.tests.test_axes.test_vert_violinplot_custompoints_200()
matplotlib.tests.test_axes.test_vert_violinplot_showall()
matplotlib.tests.test_axes.test_vert_violinplot_showextrema()
matplotlib.tests.test_axes.test_vert_violinplot_showmeans()
matplotlib.tests.test_axes.test_vert_violinplot_showmedians()
matplotlib.tests.test_axes.test_vertex_markers()
matplotlib.tests.test_axes.test_violin_point_mass()
matplotlib.tests.test_axes.test_violinplot_bad_positions()
matplotlib.tests.test_axes.test_violinplot_bad_widths()
matplotlib.tests.test_axes.test_vline_limit()
matplotlib.tests.test_axes.test_vlines()
matplotlib.tests.test_axes.test_zero_linewidth()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_spines.py----------------------------------------
A:matplotlib.tests.test_spines.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_spines.x->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_spines.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_spines.spinebbox->spine.get_transform().transform_path(spine.get_path()).get_extents()
matplotlib.tests.test_spines.test_label_without_ticks()
matplotlib.tests.test_spines.test_spines_axes_positions()
matplotlib.tests.test_spines.test_spines_capstyle()
matplotlib.tests.test_spines.test_spines_data_positions()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_simplification.py----------------------------------------
A:matplotlib.tests.test_simplification.t->numpy.arange(65536)
A:matplotlib.tests.test_simplification.s->numpy.sin(2 * np.pi * t)
A:matplotlib.tests.test_simplification.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_simplification.x->numpy.linspace(0, 3.14 * 2, 3000)
A:matplotlib.tests.test_simplification.y->numpy.sin(x)
A:matplotlib.tests.test_simplification.p1->fig.add_axes((0, 0, 1.0, 1.0), ylim=(0, 5), autoscale_on=False).plot(abs(np.fft.fft(np.sin(2 * np.pi * 0.01 * t) * np.blackman(len(t)))))
A:matplotlib.tests.test_simplification.path->Path(verts)
A:matplotlib.tests.test_simplification.transform->p1[0].get_transform()
A:matplotlib.tests.test_simplification.simplified->list(p.iter_segments(clip=[0, 0, 100, 100]))
A:matplotlib.tests.test_simplification.x_max->x[1:].max()
A:matplotlib.tests.test_simplification.x_min->x[1:].min()
A:matplotlib.tests.test_simplification.y_max->y[1:].max()
A:matplotlib.tests.test_simplification.y_min->y[1:].min()
A:matplotlib.tests.test_simplification.p_expected->Path([[0, 0], [x_max, y_max], [x[-1], y[-1]], [0, 0]], codes=[1, 2, 2, 0])
A:matplotlib.tests.test_simplification.p->Path([[50, 40]], [1])
A:matplotlib.tests.test_simplification.p2->Path([[50, 40]], [1]).cleaned(simplify=True)
A:matplotlib.tests.test_simplification.pp1->matplotlib.patches.PathPatch(Path([(0, 0), (1, 0), (1, 1), (np.nan, 1), (0, 0), (2, 0), (2, 2), (0, 0)], [Path.MOVETO, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CURVE3, Path.CLOSEPOLY]), fc='none')
A:matplotlib.tests.test_simplification.verts->verts.reshape((len(verts) // 2, 2)).reshape((len(verts) // 2, 2))
A:matplotlib.tests.test_simplification.segs->list(segs)
A:matplotlib.tests.test_simplification.xx->numpy.arange(200000)
A:matplotlib.tests.test_simplification.yy->numpy.random.rand(200000)
A:matplotlib.tests.test_simplification.fig->matplotlib.pyplot.figure(figsize=(2, 1))
A:matplotlib.tests.test_simplification.ax->matplotlib.pyplot.figure(figsize=(2, 1)).add_axes((0, 0, 1.0, 1.0), ylim=(0, 5), autoscale_on=False)
matplotlib.tests.test_simplification.test_angled_antiparallel(angle,offset)
matplotlib.tests.test_simplification.test_antiparallel_simplification()
matplotlib.tests.test_simplification.test_clipper()
matplotlib.tests.test_simplification.test_clipping()
matplotlib.tests.test_simplification.test_clipping_full()
matplotlib.tests.test_simplification.test_clipping_with_nans()
matplotlib.tests.test_simplification.test_diamond()
matplotlib.tests.test_simplification.test_fft_peaks()
matplotlib.tests.test_simplification.test_hatch()
matplotlib.tests.test_simplification.test_noise()
matplotlib.tests.test_simplification.test_overflow()
matplotlib.tests.test_simplification.test_para_equal_perp()
matplotlib.tests.test_simplification.test_simplify_curve()
matplotlib.tests.test_simplification.test_sine_plus_noise()
matplotlib.tests.test_simplification.test_start_with_moveto()
matplotlib.tests.test_simplification.test_throw_rendering_complexity_exceeded()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_type1font.py----------------------------------------
A:matplotlib.tests.test_type1font.filename->os.path.join(os.path.dirname(__file__), 'cmr10.pfb')
A:matplotlib.tests.test_type1font.font->matplotlib.type1font.Type1Font(filename)
A:matplotlib.tests.test_type1font.slanted->matplotlib.type1font.Type1Font(filename).transform({'slant': 1})
A:matplotlib.tests.test_type1font.condensed->matplotlib.type1font.Type1Font(filename).transform({'extend': 0.5})
A:matplotlib.tests.test_type1font.rawdata->fd.read()
A:matplotlib.tests.test_type1font.differ->difflib.Differ()
A:matplotlib.tests.test_type1font.diff->list(differ.compare(font.parts[0].decode('latin-1').splitlines(), condensed.parts[0].decode('latin-1').splitlines()))
matplotlib.tests.test_type1font.test_Type1Font()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_gridspec.py----------------------------------------
A:matplotlib.tests.test_gridspec.gs->matplotlib.gridspec.GridSpec(2, 1)
matplotlib.tests.test_gridspec.test_equal()
matplotlib.tests.test_gridspec.test_height_ratios()
matplotlib.tests.test_gridspec.test_width_ratios()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_subplots.py----------------------------------------
A:matplotlib.tests.test_subplots.(f, ((a1, a2), (a3, a4)))->matplotlib.pyplot.subplots(2, 2, sharex=True, sharey=True)
A:matplotlib.tests.test_subplots.(f, (a1, a2))->matplotlib.pyplot.subplots(2, 1, sharex=True)
A:matplotlib.tests.test_subplots.x->numpy.arange(0, 10000000000.0, 1000000000.0)
A:matplotlib.tests.test_subplots.(fig, axes)->matplotlib.pyplot.subplots(2, 2, sharex='col', sharey='all')
matplotlib.tests.test_subplots.check_shared(axs,x_shared,y_shared)
matplotlib.tests.test_subplots.check_visible(axs,x_visible,y_visible)
matplotlib.tests.test_subplots.test_exceptions()
matplotlib.tests.test_subplots.test_shared()
matplotlib.tests.test_subplots.test_shared_and_moved()
matplotlib.tests.test_subplots.test_subplots_offsettext()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_category.py----------------------------------------
A:matplotlib.tests.test_category.(ids, data)->zip(*test_cases)
A:matplotlib.tests.test_category.unit->matplotlib.category.UnitData(ydata)
A:matplotlib.tests.test_category.(fids, fdata)->zip(*test_cases)
A:matplotlib.tests.test_category.unitdata->matplotlib.category.UnitData()
A:matplotlib.tests.test_category.(ids, values)->zip(*test_cases)
A:matplotlib.tests.test_category.(fids, fvalues)->zip(*failing_test_cases)
A:matplotlib.tests.test_category.self.cc->matplotlib.category.StrCategoryConverter()
A:matplotlib.tests.test_category.self.unit->matplotlib.category.UnitData()
A:matplotlib.tests.test_category.self.ax->FakeAxis(self.unit)
A:matplotlib.tests.test_category.actual->self.cc.convert(data, self.unit, self.ax)
A:matplotlib.tests.test_category.data->numpy.array([1, 2, 3], dtype=float)
A:matplotlib.tests.test_category.axis->self.cc.axisinfo(self.unit, self.ax)
A:matplotlib.tests.test_category.ticks->list(range(len(labels)))
A:matplotlib.tests.test_category.(ids, cases)->zip(*test_cases)
A:matplotlib.tests.test_category.labels->matplotlib.category.StrCategoryFormatter(unit._mapping)
A:matplotlib.tests.test_category.(bytes_ids, bytes_data)->zip(*bytes_cases)
A:matplotlib.tests.test_category.counts->numpy.array([4, 6, 5])
A:matplotlib.tests.test_category.(numlike_ids, numlike_data)->zip(*numlike_cases)
matplotlib.tests.test_category.FakeAxis(self,units)
matplotlib.tests.test_category.FakeAxis.__init__(self,units)
matplotlib.tests.test_category.TestPlotBytes(object)
matplotlib.tests.test_category.TestPlotBytes.test_plot_bytes(self,ax,plotter,bdata)
matplotlib.tests.test_category.TestPlotNumlike(object)
matplotlib.tests.test_category.TestPlotNumlike.test_plot_numlike(self,ax,plotter,ndata)
matplotlib.tests.test_category.TestPlotTypes(object)
matplotlib.tests.test_category.TestPlotTypes.test_data(self)
matplotlib.tests.test_category.TestPlotTypes.test_mixed_type_exception(self,ax,plotter,xdata)
matplotlib.tests.test_category.TestPlotTypes.test_mixed_type_update_exception(self,ax,plotter,xdata)
matplotlib.tests.test_category.TestPlotTypes.test_plot_unicode(self,ax,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_xaxis(self,ax,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_xyaxis(self,ax,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_plot_yaxis(self,ax,test_data,plotter)
matplotlib.tests.test_category.TestPlotTypes.test_update_plot(self,ax,plotter)
matplotlib.tests.test_category.TestStrCategoryConverter(object)
matplotlib.tests.test_category.TestStrCategoryConverter.mock_axis(self,request)
matplotlib.tests.test_category.TestStrCategoryConverter.test_axisinfo(self)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert(self,vals)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_fail(self,fvals)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_float_array(self)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_one_number(self)
matplotlib.tests.test_category.TestStrCategoryConverter.test_convert_one_string(self,value)
matplotlib.tests.test_category.TestStrCategoryConverter.test_default_units(self)
matplotlib.tests.test_category.TestStrCategoryFormatter(object)
matplotlib.tests.test_category.TestStrCategoryFormatter.test_StrCategoryFormatter(self,ax,ydata)
matplotlib.tests.test_category.TestStrCategoryFormatter.test_StrCategoryFormatterPlot(self,ax,ydata,plotter)
matplotlib.tests.test_category.TestStrCategoryLocator(object)
matplotlib.tests.test_category.TestStrCategoryLocator.test_StrCategoryLocator(self)
matplotlib.tests.test_category.TestStrCategoryLocator.test_StrCategoryLocatorPlot(self,ax,plotter)
matplotlib.tests.test_category.TestUnitData(object)
matplotlib.tests.test_category.TestUnitData.test_non_string_fails(self,fdata)
matplotlib.tests.test_category.TestUnitData.test_non_string_update_fails(self,fdata)
matplotlib.tests.test_category.TestUnitData.test_unit(self,data,locs)
matplotlib.tests.test_category.TestUnitData.test_update(self)
matplotlib.tests.test_category.ax()
matplotlib.tests.test_category.axis_test(axis,labels)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_bbox_tight.py----------------------------------------
A:matplotlib.tests.test_bbox_tight.rows->len(data)
A:matplotlib.tests.test_bbox_tight.yoff->numpy.zeros(len(colLabels))
A:matplotlib.tests.test_bbox_tight.(fig, ax)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_bbox_tight.the_table->matplotlib.pyplot.table(cellText=cellText, rowLabels=rowLabels, colLabels=colLabels, loc='bottom')
A:matplotlib.tests.test_bbox_tight.ax->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_bbox_tight.patch->matplotlib.patches.Rectangle([-50, -50], 100, 100, transform=ax.transData, facecolor='blue', alpha=0.5)
A:matplotlib.tests.test_bbox_tight.path->matplotlib.path.Path.unit_regular_star(5).deepcopy()
A:matplotlib.tests.test_bbox_tight.fig->matplotlib.pyplot.figure()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_clipping()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_raster()
matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_suptile_legend()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_usetex.py----------------------------------------
A:matplotlib.tests.test_usetex.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_usetex.ax->matplotlib.pyplot.figure().add_subplot(111)
matplotlib.tests.test_usetex.test_usetex()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_text.py----------------------------------------
A:matplotlib.tests.test_text.needs_usetex->pytest.mark.xfail(not matplotlib.checkdep_usetex(True), reason='This test needs a TeX installation')
A:matplotlib.tests.test_text.data_path->_get_data_path()
A:matplotlib.tests.test_text.prop->FontProperties(**kw)
A:matplotlib.tests.test_text.path->findfont(prop, directory=data_path)
A:matplotlib.tests.test_text.ax->matplotlib.pyplot.subplot(1, 1, 1)
A:matplotlib.tests.test_text.normalFont->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', size=14)
A:matplotlib.tests.test_text.boldFont->find_matplotlib_font(family='Foo', style='normal', variant='normal', weight='bold', stretch=500, size=14)
A:matplotlib.tests.test_text.boldItemFont->find_matplotlib_font(family='sans serif', style='italic', variant='normal', weight=750, stretch=500, size=14)
A:matplotlib.tests.test_text.lightFont->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', weight=200, stretch=500, size=14)
A:matplotlib.tests.test_text.condensedFont->find_matplotlib_font(family='sans-serif', style='normal', variant='normal', weight=500, stretch=100, size=14)
A:matplotlib.tests.test_text.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_text.fn->findfont('Helvetica', fontext='afm')
A:matplotlib.tests.test_text.afm->AFM(fh)
A:matplotlib.tests.test_text.mevent->matplotlib.backend_bases.MouseEvent('button_press_event', fig.canvas, 0.5, 0.5, 1, None)
A:matplotlib.tests.test_text.xs->numpy.linspace(0.25, 0.75, 30)
A:matplotlib.tests.test_text.ys->numpy.linspace(0.25, 0.75, 30)
A:matplotlib.tests.test_text.(xs, ys)->numpy.meshgrid(xs, ys)
A:matplotlib.tests.test_text.txt->matplotlib.pyplot.text(0.48, 0.52, 'hello world', ha='center', fontsize=30, rotation=30)
A:matplotlib.tests.test_text.(mevent.x, mevent.y)->matplotlib.pyplot.gca().transAxes.transform_point([x, y])
A:matplotlib.tests.test_text.(contains, _)->matplotlib.pyplot.text(0.48, 0.52, 'hello world', ha='center', fontsize=30, rotation=30).contains(mevent)
A:matplotlib.tests.test_text.vl->matplotlib.pyplot.subplot(1, 1, 1).viewLim.frozen()
A:matplotlib.tests.test_text.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_text.ann->matplotlib.pyplot.subplot(1, 1, 1).annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels')
A:matplotlib.tests.test_text.init_pos->matplotlib.pyplot.subplot(1, 1, 1).annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels').get_window_extent(fig.canvas.renderer)
A:matplotlib.tests.test_text.post_pos->matplotlib.pyplot.subplot(1, 1, 1).annotate('test', (0, 0), xytext=(0, 0), textcoords='figure pixels').get_window_extent(fig.canvas.renderer)
A:matplotlib.tests.test_text.t->matplotlib.pyplot.figure().text(0.5, 0.5, 'some text')
A:matplotlib.tests.test_text.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(2)
A:matplotlib.tests.test_text.txt1->ax1.text(0.5, 0.5, 'aardvark')
A:matplotlib.tests.test_text.ann1->ax2.annotate('aardvark', xy=[0.5, 0.5])
A:matplotlib.tests.test_text.fp->FontProperties(size='large')
A:matplotlib.tests.test_text.sz1->FontProperties(size='large').get_size_in_points()
A:matplotlib.tests.test_text.renderer->matplotlib.pyplot.figure().canvas.get_renderer()
A:matplotlib.tests.test_text.text1->matplotlib.pyplot.text(0.25, 0.5, text_string, linespacing=spacing1)
A:matplotlib.tests.test_text.text2->matplotlib.pyplot.text(0.25, 0.5, text_string, linespacing=spacing2)
A:matplotlib.tests.test_text.box1->matplotlib.pyplot.text(0.25, 0.5, text_string, linespacing=spacing1).get_window_extent(renderer=renderer)
A:matplotlib.tests.test_text.box2->matplotlib.pyplot.text(0.25, 0.5, text_string, linespacing=spacing2).get_window_extent(renderer=renderer)
matplotlib.tests.test_text.test_afm_kerning()
matplotlib.tests.test_text.test_agg_text_clip()
matplotlib.tests.test_text.test_alignment()
matplotlib.tests.test_text.test_annotation_negative_ax_coords()
matplotlib.tests.test_text.test_annotation_negative_fig_coords()
matplotlib.tests.test_text.test_antialiasing()
matplotlib.tests.test_text.test_axes_titles()
matplotlib.tests.test_text.test_bbox_clipping()
matplotlib.tests.test_text.test_contains()
matplotlib.tests.test_text.test_font_scaling()
matplotlib.tests.test_text.test_font_styles()
matplotlib.tests.test_text.test_get_rotation_float()
matplotlib.tests.test_text.test_get_rotation_int()
matplotlib.tests.test_text.test_get_rotation_mod360()
matplotlib.tests.test_text.test_get_rotation_none()
matplotlib.tests.test_text.test_get_rotation_raises()
matplotlib.tests.test_text.test_get_rotation_string()
matplotlib.tests.test_text.test_hinting_factor_backends()
matplotlib.tests.test_text.test_multiline()
matplotlib.tests.test_text.test_nonfinite_pos()
matplotlib.tests.test_text.test_set_position()
matplotlib.tests.test_text.test_single_artist_usetex()
matplotlib.tests.test_text.test_text_size_binding()
matplotlib.tests.test_text.test_text_stale()
matplotlib.tests.test_text.test_titles()
matplotlib.tests.test_text.test_two_2line_texts(spacing1,spacing2)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_arrow_patches.py----------------------------------------
A:matplotlib.tests.test_arrow_patches.(fig, axes)->matplotlib.pyplot.subplots(len(t), len(r), squeeze=False, subplot_kw=dict(aspect=True), figsize=(8, 4.5))
A:matplotlib.tests.test_arrow_patches.styles->matplotlib.patches.ArrowStyle.get_styles()
A:matplotlib.tests.test_arrow_patches.n->len(styles)
A:matplotlib.tests.test_arrow_patches.fig1->matplotlib.pyplot.figure(1, figsize=(4 / 1.5, figheight / 1.5))
A:matplotlib.tests.test_arrow_patches.fig2->matplotlib.pyplot.figure('fancyarrow_dpi_cor_test', figsize=(4, 3), dpi=50)
A:matplotlib.tests.test_arrow_patches.ax->matplotlib.pyplot.figure('fancyarrow_dpi_cor_test', figsize=(4, 3), dpi=50).add_subplot(111)
A:matplotlib.tests.test_arrow_patches.(fig, ax)->matplotlib.pyplot.subplots(figsize=(6, 10))
A:matplotlib.tests.test_arrow_patches.e->FancyArrowPatch((0, 0), (0.5, 0.5), arrowstyle='-|>', connectionstyle='angle3,angleA=0,angleB=90', mutation_scale=10.0, linewidth=2, linestyle='dashed', color='k')
A:matplotlib.tests.test_arrow_patches.e2->FancyArrowPatch((0, 0), (0.5, 0.5), arrowstyle='-|>', connectionstyle='angle3', mutation_scale=10.0, linewidth=2, linestyle='dotted', color='k')
A:matplotlib.tests.test_arrow_patches.patch->matplotlib.patches.FancyArrowPatch((0.1, i), (0.8, i), arrowstyle=stylename, mutation_scale=25)
matplotlib.tests.test_arrow_patches.__prepare_fancyarrow_dpi_cor_test()
matplotlib.tests.test_arrow_patches.draw_arrow(ax,t,r)
matplotlib.tests.test_arrow_patches.test_arrow_styles()
matplotlib.tests.test_arrow_patches.test_boxarrow()
matplotlib.tests.test_arrow_patches.test_fancyarrow()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dash()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dpi_cor_100dpi()
matplotlib.tests.test_arrow_patches.test_fancyarrow_dpi_cor_200dpi()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_marker.py----------------------------------------
A:matplotlib.tests.test_marker.marker_style->matplotlib.markers.MarkerStyle()
A:matplotlib.tests.test_marker.mrk_array->numpy.array([[-0.5, 0, 1, 2, 3]])
matplotlib.tests.test_marker.test_markers_invalid()
matplotlib.tests.test_marker.test_markers_valid()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_mlab.py----------------------------------------
A:matplotlib.tests.test_mlab.a->numpy.array([(1.0, 2, 'foo', 'bing'), (2.0, 3, 'bar', 'blah')], dtype=np.dtype([(str('x'), np.float32), (str('y'), np.int8), (str('s'), str, 3), (str('s2'), str, 4)]))
A:matplotlib.tests.test_mlab.pca->matplotlib.mlab.PCA(a)
A:matplotlib.tests.test_mlab.res->matplotlib.mlab.detrend(input, key=mlab.detrend_linear, axis=1)
A:matplotlib.tests.test_mlab.targ->numpy.vstack(arrt)
A:matplotlib.tests.test_mlab.ind->numpy.arange(0, len(x) - NFFT + 1, step)
A:matplotlib.tests.test_mlab.n->len(ind)
A:matplotlib.tests.test_mlab.result->matplotlib.mlab.apply_window(ydata1, mlab.window_hanning, axis=0, return_window=False)
A:matplotlib.tests.test_mlab.x->numpy.asarray([0.0, 1.0, 0.0, 1.0, 0.5])
A:matplotlib.tests.test_mlab.y->matplotlib.mlab.GaussianKDE(x1).evaluate(x2)
A:matplotlib.tests.test_mlab.yr->numpy.repeat(np.expand_dims(x, axis), n, axis=axis)
A:matplotlib.tests.test_mlab.yt->self.check_window_apply_repeat(x, window, 13, 2)
A:matplotlib.tests.test_mlab.x1->numpy.arange(3, 10, 2)
A:matplotlib.tests.test_mlab.x2->numpy.arange(3, 8, 2)
A:matplotlib.tests.test_mlab.y_strided->matplotlib.mlab.stride_repeat(y, n=33.815)
A:matplotlib.tests.test_mlab.fd->tempfile.TemporaryFile(suffix='csv', mode='w+', newline='')
A:matplotlib.tests.test_mlab.expected->numpy.recarray((99,), [(str('x'), float), (str('y'), float), (str('t'), float)])
A:matplotlib.tests.test_mlab.expected['x'][:]->numpy.linspace(-1000000000.0, -1, 99)
A:matplotlib.tests.test_mlab.expected['y'][:]->numpy.linspace(1, 1000000000.0, 99)
A:matplotlib.tests.test_mlab.expected['t'][:]->numpy.linspace(0, 0.01, 99)
A:matplotlib.tests.test_mlab.actual->matplotlib.mlab.csv2rec(tempcsv)
A:matplotlib.tests.test_mlab.bad->numpy.recarray((99, 4), [(str('x'), float), (str('y'), float)])
A:matplotlib.tests.test_mlab.array->matplotlib.mlab.csv2rec(tempcsv, names='a', **kwargs)
A:matplotlib.tests.test_mlab.truth->'       x   y   s     s2\n   1.000   2   foo   bing   \n   2.000   3   bar   blah   '.splitlines()
A:matplotlib.tests.test_mlab.self.sig_ones->numpy.ones(n)
A:matplotlib.tests.test_mlab.windowVals->window(np.ones((NFFT,), x.dtype))
A:matplotlib.tests.test_mlab.window->matplotlib.mlab.window_hanning(np.ones(x.shape[1]))
A:matplotlib.tests.test_mlab.window1->matplotlib.mlab.window_hanning(np.ones(x.shape[1]))
A:matplotlib.tests.test_mlab.(y, window2)->matplotlib.mlab.apply_window(x, window, axis=1, return_window=True)
A:matplotlib.tests.test_mlab.yt[:, i]->window1(x[:, i])
A:matplotlib.tests.test_mlab.yt[i, :]->window1(x[i, :])
A:matplotlib.tests.test_mlab.yi->matplotlib.mlab.stride_windows(x, n=13, noverlap=2, axis=0)
A:matplotlib.tests.test_mlab.ydata->numpy.tile(ydata, (20, 1))
A:matplotlib.tests.test_mlab.ycontrol1->matplotlib.mlab.apply_window(ydata1, mlab.window_hanning)
A:matplotlib.tests.test_mlab.ycontrol2->matplotlib.mlab.window_hanning(ycontrol2)
A:matplotlib.tests.test_mlab.ycontrol->ycontrol.flatten().flatten()
A:matplotlib.tests.test_mlab.ydata1->matplotlib.mlab.stride_windows(ydata, 32, noverlap=0, axis=0)
A:matplotlib.tests.test_mlab.self.sig_zeros->numpy.zeros(n)
A:matplotlib.tests.test_mlab.self.sig_slope->numpy.linspace(-10.0, 90.0, n)
A:matplotlib.tests.test_mlab.sig_rand->numpy.random.standard_normal(n)
A:matplotlib.tests.test_mlab.sig_sin->numpy.sin(x * 2 * np.pi / (n / 100))
A:matplotlib.tests.test_mlab.input->numpy.vstack(arri)
A:matplotlib.tests.test_mlab.pad_to_density->int(2 ** np.ceil(np.log2(NFFT_density_real)))
A:matplotlib.tests.test_mlab.pad_to_spectrum_real->len(x)
A:matplotlib.tests.test_mlab.pad_to_spectrum_realpad_to_spectrum->len(x)
A:matplotlib.tests.test_mlab.NFFT_spectrum_realNFFT_spectrum->len(x)
A:matplotlib.tests.test_mlab.freqs_density->numpy.linspace(-Fs / 2, Fs / 2, num=pad_to_density_real, endpoint=False)
A:matplotlib.tests.test_mlab.freqs_spectrum->numpy.linspace(-Fs / 2, Fs / 2, num=pad_to_spectrum_real, endpoint=False)
A:matplotlib.tests.test_mlab.t_specgram->numpy.array([NFFT_specgram_real / (2 * Fs)])
A:matplotlib.tests.test_mlab.t_spectrum->numpy.array([NFFT_spectrum_real / (2 * Fs)])
A:matplotlib.tests.test_mlab.i->numpy.abs(resfreqs - fstim).argmin()
A:matplotlib.tests.test_mlab.fspa->numpy.abs(fsp)
A:matplotlib.tests.test_mlab.zeroind->numpy.abs(fsp).argmin()
A:matplotlib.tests.test_mlab.spect->spec.copy()
A:matplotlib.tests.test_mlab.maxind->spec.copy().argmax()
A:matplotlib.tests.test_mlab.(spec, fsp, t)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='phase')
A:matplotlib.tests.test_mlab.(spec, fsp)->matplotlib.mlab.phase_spectrum(x=self.y, Fs=self.Fs, sides=self.sides, pad_to=self.pad_to_spectrum)
A:matplotlib.tests.test_mlab.sargs->dict(x=self.y, y=self.y + 1, Fs=self.Fs, window=mlab.window_none, sides=self.sides)
A:matplotlib.tests.test_mlab.(spec0, _)->matplotlib.mlab.csd(NFFT=self.NFFT_density, **sargs)
A:matplotlib.tests.test_mlab.(spec1, _)->matplotlib.mlab.csd(NFFT=self.NFFT_density * 2, **sargs)
A:matplotlib.tests.test_mlab.ydatab->numpy.tile(ydata, (20, 1)).T.flatten()
A:matplotlib.tests.test_mlab.(spec_g, fsp_g)->matplotlib.mlab.psd(x=ydataf, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, detrend=mlab.detrend_linear, window=mlab.window_hanning)
A:matplotlib.tests.test_mlab.(spec_b, fsp_b)->matplotlib.mlab.psd(x=ydatab, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, detrend=mlab.detrend_linear, window=mlab.window_hanning)
A:matplotlib.tests.test_mlab.(spec_c, fsp_c)->matplotlib.mlab.psd(x=ycontrol, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=0, sides=self.sides, window=mlab.window_none)
A:matplotlib.tests.test_mlab.(ycontrol1, windowVals)->matplotlib.mlab.apply_window(ycontrol1, mlab.window_hanning, return_window=True)
A:matplotlib.tests.test_mlab.ydataf->numpy.tile(ydata, (20, 1)).flatten()
A:matplotlib.tests.test_mlab.win->matplotlib.mlab.window_hanning(np.ones(self.NFFT_density_real))
A:matplotlib.tests.test_mlab.(spec_s, fsp_s)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=mlab.window_hanning, scale_by_freq=True)
A:matplotlib.tests.test_mlab.(spec_n, fsp_n)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=mlab.window_hanning, scale_by_freq=False)
A:matplotlib.tests.test_mlab.specm->numpy.mean(spec, axis=1)
A:matplotlib.tests.test_mlab.(Pxx, freqsxx)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(Pxy, freqsxy)->matplotlib.mlab.csd(x=self.y, y=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(speca, freqspeca, ta)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='angle')
A:matplotlib.tests.test_mlab.(specb, freqspecb, tb)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='default')
A:matplotlib.tests.test_mlab.(specc, freqspecc, tc)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='complex')
A:matplotlib.tests.test_mlab.(specm, freqspecm, tm)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='magnitude')
A:matplotlib.tests.test_mlab.(specp, freqspecp, tp)->matplotlib.mlab.specgram(x=self.y, NFFT=self.NFFT_specgram, Fs=self.Fs, noverlap=self.nover_specgram, pad_to=self.pad_to_specgram, sides=self.sides, mode='phase')
A:matplotlib.tests.test_mlab.(speca, fspa)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides, window=win)
A:matplotlib.tests.test_mlab.(specb, fspb)->matplotlib.mlab.psd(x=self.y, NFFT=self.NFFT_density, Fs=self.Fs, noverlap=self.nover_density, pad_to=self.pad_to_density, sides=self.sides)
A:matplotlib.tests.test_mlab.(cohsq, f)->matplotlib.mlab.cohere(x, y, NFFT=256, Fs=2, noverlap=128)
A:matplotlib.tests.test_mlab.z->get_z(x, y)
A:matplotlib.tests.test_mlab.zi->matplotlib.mlab.griddata(x, y, z_masked, xi, yi, interp='nn')
A:matplotlib.tests.test_mlab.(xi, yi)->numpy.meshgrid(xi, yi)
A:matplotlib.tests.test_mlab.z_masked->numpy.ma.array(z, mask=[False, False, False, True, False])
A:matplotlib.tests.test_mlab.correct_zi_masked->numpy.ma.masked_where(xi + yi > 1.0, correct_zi)
A:matplotlib.tests.test_mlab.kde->matplotlib.mlab.GaussianKDE(x1)
A:matplotlib.tests.test_mlab.xs->numpy.linspace(-7, 7, 51)
A:matplotlib.tests.test_mlab.kde2->matplotlib.mlab.GaussianKDE(x1, 'scott')
A:matplotlib.tests.test_mlab.y2->kde2(xs)
A:matplotlib.tests.test_mlab.xn->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.gkde->matplotlib.mlab.GaussianKDE(xn)
A:matplotlib.tests.test_mlab.gkde2->matplotlib.mlab.GaussianKDE(xn, 'scott')
A:matplotlib.tests.test_mlab.gkde3->matplotlib.mlab.GaussianKDE(xn, bw_method=gkde.factor)
A:matplotlib.tests.test_mlab.kdepdf->matplotlib.mlab.GaussianKDE(xn).evaluate(xs)
A:matplotlib.tests.test_mlab.kdepdf2->matplotlib.mlab.GaussianKDE(xn, 'scott').evaluate(xs)
A:matplotlib.tests.test_mlab.kdepdf3->matplotlib.mlab.GaussianKDE(xn, bw_method=gkde.factor).evaluate(xs)
A:matplotlib.tests.test_mlab.mygauss->matplotlib.mlab.GaussianKDE(x1, 'scott')
A:matplotlib.tests.test_mlab.multidim_data->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.data->numpy.random.randn(n_basesample)
A:matplotlib.tests.test_mlab.u->numpy.array([0, 1, 2, 3, 1, 2, 1])
A:matplotlib.tests.test_mlab.(P, f)->matplotlib.mlab.psd(u, NFFT=u.size * 2, Fs=1 / dt, window=mlab.window_none, detrend=mlab.detrend_none, noverlap=0, pad_to=None, scale_by_freq=None, sides='onesided')
A:matplotlib.tests.test_mlab.Su_1side->numpy.append([Su[0]], Su[1:4] + Su[4:][::-1])
matplotlib.tests.test_mlab.TestDetrend(object)
matplotlib.tests.test_mlab.TestDetrend.setup(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_1D_base_slope_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_1D_base_slope_off_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_1D_base_slope_off_list(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_1D_d1_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_axism1(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_d2_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_default(self)
matplotlib.tests.test_mlab.TestDetrend.test_demean_2D_none(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_0D_d0_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_1D_d1_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_2D_d2_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_2D_default(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_2D_none(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_bad_key_str_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_bad_key_var_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_linear_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_linear_1d_slope_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_linear_1d_slope_off_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_linear_1d_slope_off_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_mean_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_mean_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_mean_2D_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_detrend_none_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_1d_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_1d_slope(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_1d_slope_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_1d_slope_off_list(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_linear_2D_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_0D_d0_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_slope(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_slope_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_slope_off_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_slope_off_list(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_base_slope_off_list_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_d1_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_1D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_axism1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_d2_ValueError(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_default(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_none(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_mean_2D_none_T(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_0D_zeros_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_1D_base(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_1D_base_slope_off_list(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_1D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_1D_slope(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_2D(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_none_2D_T(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_constant_2D_none_T(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_default_2D_axis1(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_linear_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_linear_1d_slope_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_linear_2d_slope_off_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_linear_2d_slope_off_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_mean_0D_off(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_mean_0D_zeros(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_mean_2D_axis0(self)
matplotlib.tests.test_mlab.TestDetrend.test_detrend_str_none_0D_zeros(self)
matplotlib.tests.test_mlab.TestGaussianKDE(object)
matplotlib.tests.test_mlab.TestGaussianKDE.test_gaussian_kde_covariance_caching(self)
matplotlib.tests.test_mlab.TestGaussianKDE.test_kde_bandwidth_method(self)
matplotlib.tests.test_mlab.TestGaussianKDE.test_kde_integer_input(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom(object)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_callable_covariance_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_callable_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_no_data(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scalar_covariance_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scalar_empty_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scott_multidim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_scott_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_silverman_multidim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_silverman_singledim_dataset(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_single_dataset_element(self)
matplotlib.tests.test_mlab.TestGaussianKDECustom.test_wrong_bw_method(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate(object)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_diff_dim(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_dim_and_num(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_equal_dim_and_num_lt(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_inv_dim(self)
matplotlib.tests.test_mlab.TestGaussianKDEEvaluate.test_evaluate_point_dim_not_one(self)
matplotlib.tests.test_mlab.TestSpectral(object)
matplotlib.tests.test_mlab.TestSpectral.check_freqs(self,vals,targfreqs,resfreqs,fstims)
matplotlib.tests.test_mlab.TestSpectral.check_maxfreq(self,spec,fsp,fstims)
matplotlib.tests.test_mlab.TestSpectral.stim(self,request,fstims,iscomplex,sides,len_x,NFFT_density,nover_density,pad_to_density,pad_to_spectrum)
matplotlib.tests.test_mlab.TestSpectral.test_angle_spectrum(self)
matplotlib.tests.test_mlab.TestSpectral.test_complex_spectrum(self)
matplotlib.tests.test_mlab.TestSpectral.test_csd(self)
matplotlib.tests.test_mlab.TestSpectral.test_csd_padding(self)
matplotlib.tests.test_mlab.TestSpectral.test_magnitude_spectrum(self)
matplotlib.tests.test_mlab.TestSpectral.test_phase_spectrum(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_csd_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_detrend_linear_func_trend(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_detrend_linear_str_trend(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_detrend_mean_func_offset(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_detrend_mean_str_offset(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_window_hanning(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_window_hanning_detrend_linear(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_psd_windowarray_scale_by_freq(self)
matplotlib.tests.test_mlab.TestSpectral.test_single_spectrum_helper_raises_mode_default(self)
matplotlib.tests.test_mlab.TestSpectral.test_single_spectrum_helper_raises_mode_psd(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_angle(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_angle_phase_equivalent(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_auto(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_auto_default_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_auto_psd_equal(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_complex(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_complex_angle_equivalent(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_complex_mag_equivalent(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_complex_phase_equivalent(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_default(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_magnitude(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_phase(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_psd(self)
matplotlib.tests.test_mlab.TestSpectral.test_specgram_warn_only1seg(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_magnitude_magnitude_spectrum(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_magnitude_specgram(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_psd(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_angle_same_data(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_complex_same_data(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_magnitude_same_data(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_noverlap_eq_NFFT(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_noverlap_gt_NFFT(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_phase_same_data(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_unknown_mode(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_unknown_sides(self)
matplotlib.tests.test_mlab.TestSpectral.test_spectral_helper_raises_winlen_ne_NFFT(self)
matplotlib.tests.test_mlab.TestStride(object)
matplotlib.tests.test_mlab.TestStride.calc_window_target(self,x,NFFT,noverlap=0,axis=0)
matplotlib.tests.test_mlab.TestStride.get_base(self,x)
matplotlib.tests.test_mlab.TestStride.test_stride_ensure_integer_type(self)
matplotlib.tests.test_mlab.TestStride.test_stride_repeat(self,n,axis)
matplotlib.tests.test_mlab.TestStride.test_stride_repeat_invalid_axis(self,axis)
matplotlib.tests.test_mlab.TestStride.test_stride_repeat_invalid_input_shape(self,shape)
matplotlib.tests.test_mlab.TestStride.test_stride_repeat_n_lt_1_ValueError(self)
matplotlib.tests.test_mlab.TestStride.test_stride_windows(self,n,noverlap,axis)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_invalid_input_shape(self,shape)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_invalid_params(self,n,noverlap)
matplotlib.tests.test_mlab.TestStride.test_stride_windows_n32_noverlap0_unflatten(self,axis)
matplotlib.tests.test_mlab.TestWindow(object)
matplotlib.tests.test_mlab.TestWindow.check_window_apply_repeat(self,x,window,NFFT,noverlap)
matplotlib.tests.test_mlab.TestWindow.setup(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_0D_ValueError(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_1D_axis1_ValueError(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_1D_els_wrongsize_ValueError(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_3D_ValueError(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_1D(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_1D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D__els1_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_els2_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_els3_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_stack_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_stack_windows_axis1(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_2D_stack_windows_axis1_unflatten(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_els1_2D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_els2_2D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_els3_2D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_hanning_els_1D_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_apply_window_stride_windows_hanning_2D_n13_noverlapn3_axis0(self)
matplotlib.tests.test_mlab.TestWindow.test_window_hanning_ones(self)
matplotlib.tests.test_mlab.TestWindow.test_window_hanning_rand(self)
matplotlib.tests.test_mlab.TestWindow.test_window_none_ones(self)
matplotlib.tests.test_mlab.TestWindow.test_window_none_rand(self)
matplotlib.tests.test_mlab.tempcsv()
matplotlib.tests.test_mlab.test_cohere()
matplotlib.tests.test_mlab.test_colinear_pca()
matplotlib.tests.test_mlab.test_contiguous_regions()
matplotlib.tests.test_mlab.test_csv2rec_dates(tempcsv,input,kwargs)
matplotlib.tests.test_mlab.test_csv2rec_names_with_comments(tempcsv)
matplotlib.tests.test_mlab.test_griddata_linear()
matplotlib.tests.test_mlab.test_griddata_nn()
matplotlib.tests.test_mlab.test_logspace(xmin,xmax,N)
matplotlib.tests.test_mlab.test_prctile(input,percentile)
matplotlib.tests.test_mlab.test_psd_onesided_norm()
matplotlib.tests.test_mlab.test_psd_oversampling()
matplotlib.tests.test_mlab.test_rec2csv_bad_shape_ValueError(tempcsv)
matplotlib.tests.test_mlab.test_rec2txt_basic()
matplotlib.tests.test_mlab.test_recarray_csv_roundtrip(tempcsv)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_png.py----------------------------------------
A:matplotlib.tests.test_png.dirname->os.path.join(os.path.dirname(__file__), 'baseline_images', 'pngsuite')
A:matplotlib.tests.test_png.files->sorted(glob.iglob(os.path.join(dirname, 'basn*.png')))
A:matplotlib.tests.test_png.fig->matplotlib.pyplot.figure(figsize=(len(files), 2))
A:matplotlib.tests.test_png.data->matplotlib.pyplot.imread(fname)
A:matplotlib.tests.test_png.img->matplotlib._png.read_png_int(os.path.join(os.path.dirname(__file__), 'baseline_images/test_png/uint16.png'))
A:matplotlib.tests.test_png.d->tmpdir.mkdir('test')
A:matplotlib.tests.test_png.fname->str(d.join('test.png'))
A:matplotlib.tests.test_png.fname_t->str(d.join('test_truncated.png'))
A:matplotlib.tests.test_png.buf->fin.read()
A:matplotlib.tests.test_png.b->BytesIO()
A:matplotlib.tests.test_png.b2->BytesIO(b.read(20))
matplotlib.tests.test_png.test_imread_png_uint16()
matplotlib.tests.test_png.test_pngsuite()
matplotlib.tests.test_png.test_truncated_buffer()
matplotlib.tests.test_png.test_truncated_file(tmpdir)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_sankey.py----------------------------------------
A:matplotlib.tests.test_sankey.sankey->Sankey()
matplotlib.tests.test_sankey.test_sankey()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_dviread.py----------------------------------------
A:matplotlib.tests.test_dviread.filename->os.path.join(os.path.dirname(__file__), 'baseline_images', 'dviread', 'test.map')
A:matplotlib.tests.test_dviread.fontmap->matplotlib.dviread.PsfontsMap(filename)
A:matplotlib.tests.test_dviread.key->('TeXfont%d' % n).encode('ascii')
A:matplotlib.tests.test_dviread.dir->os.path.join(os.path.dirname(__file__), 'baseline_images', 'dviread')
A:matplotlib.tests.test_dviread.correct->json.load(f)
matplotlib.tests.test_dviread.test_PsfontsMap(monkeypatch)
matplotlib.tests.test_dviread.test_dviread()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_units.py----------------------------------------
A:matplotlib.tests.test_units.qc->matplotlib.units.ConversionInterface()
A:matplotlib.tests.test_units.qc.convert->MagicMock(side_effect=convert)
A:matplotlib.tests.test_units.qc.axisinfo->MagicMock(side_effect=lambda u, a: munits.AxisInfo(label=u))
A:matplotlib.tests.test_units.qc.default_units->MagicMock(side_effect=lambda x, a: x.units)
A:matplotlib.tests.test_units.y->Quantity(np.linspace(0, 30), 'miles')
A:matplotlib.tests.test_units.x->Quantity(np.linspace(0, 5), 'hours')
A:matplotlib.tests.test_units.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_units.data->numpy.linspace(-5, 5)
A:matplotlib.tests.test_units.data_masked->numpy.ma.array(data, mask=(data > -2) & (data < 2))
A:matplotlib.tests.test_units.data_masked_units->Quantity(data_masked, 'meters')
A:matplotlib.tests.test_units.day->matplotlib.testing.jpl_units.Duration('ET', 24.0 * 60.0 * 60.0)
A:matplotlib.tests.test_units.b->matplotlib.testing.jpl_units.Epoch('ET', dt=datetime(2009, 4, 25))
matplotlib.tests.test_units.Quantity(self,data,units)
matplotlib.tests.test_units.Quantity.__array__(self)
matplotlib.tests.test_units.Quantity.__getattr__(self,attr)
matplotlib.tests.test_units.Quantity.__getitem__(self,item)
matplotlib.tests.test_units.Quantity.__init__(self,data,units)
matplotlib.tests.test_units.Quantity.to(self,new_units)
matplotlib.tests.test_units.test_jpl_bar_units()
matplotlib.tests.test_units.test_jpl_barh_units()
matplotlib.tests.test_units.test_numpy_facade()
matplotlib.tests.test_units.test_plot_masked_units()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_texmanager.py----------------------------------------
A:matplotlib.tests.test_texmanager.tm1->TexManager()
A:matplotlib.tests.test_texmanager.font_config1->TexManager().get_font_config()
A:matplotlib.tests.test_texmanager.tm2->TexManager()
A:matplotlib.tests.test_texmanager.font_config2->TexManager().get_font_config()
matplotlib.tests.test_texmanager.test_fontconfig_preamble()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_offsetbox.py----------------------------------------
A:matplotlib.tests.test_offsetbox.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_offsetbox.da->DrawingArea(100, 100)
A:matplotlib.tests.test_offsetbox.bg->matplotlib.patches.Rectangle((0, 0), size, size, facecolor='#CCCCCC', edgecolor='None', linewidth=0)
A:matplotlib.tests.test_offsetbox.line->matplotlib.lines.Line2D([-size * 0.5, size * 1.5], [size / 2, size / 2], color='black', linewidth=10)
A:matplotlib.tests.test_offsetbox.anchored_box->AnchoredOffsetbox(loc=code, child=da)
matplotlib.tests.test_offsetbox.test_expand_with_tight_layout()
matplotlib.tests.test_offsetbox.test_get_packed_offsets(wd_list,total,sep,mode)
matplotlib.tests.test_offsetbox.test_offsetbox_clip_children()
matplotlib.tests.test_offsetbox.test_offsetbox_clipping()
matplotlib.tests.test_offsetbox.test_offsetbox_loc_codes()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_container.py----------------------------------------
A:matplotlib.tests.test_container.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_container.st->matplotlib.pyplot.gca().stem([1, 2], [1, 2])
A:matplotlib.tests.test_container.eb->matplotlib.pyplot.gca().errorbar([1], [1], fmt='none')
matplotlib.tests.test_container.test_errorbar_remove()
matplotlib.tests.test_container.test_stem_remove()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_image.py----------------------------------------
A:matplotlib.tests.test_image.needs_pillow->pytest.mark.xfail(not HAS_PIL, reason='Test requires Pillow')
A:matplotlib.tests.test_image.X->numpy.array([[[218, 165, 32], [122, 103, 238]], [[127, 255, 0], [255, 99, 71]]], dtype=np.uint8)
A:matplotlib.tests.test_image.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_image.ax1->matplotlib.pyplot.figure().add_subplot(121)
A:matplotlib.tests.test_image.ax2->matplotlib.pyplot.figure().add_subplot(122)
A:matplotlib.tests.test_image.ax3->matplotlib.pyplot.figure().add_subplot(313)
A:matplotlib.tests.test_image.(x, y)->numpy.ix_(np.arange(100.0) / 100.0, np.arange(100.0) / 100.0)
A:matplotlib.tests.test_image.z->numpy.arange(6, dtype=float).reshape((3, 2))
A:matplotlib.tests.test_image.c->numpy.sin(20 * x ** 2 + 50 * y ** 2)
A:matplotlib.tests.test_image.ax->matplotlib.pyplot.figure().add_subplot(1, 1, 1)
A:matplotlib.tests.test_image.buffer->io.BytesIO()
A:matplotlib.tests.test_image.img->numpy.array([[2.0, 1.0, 1e+22], [4.0, 1.0, 3.0]])
A:matplotlib.tests.test_image.data->numpy.ma.masked_array(data, mask)
A:matplotlib.tests.test_image.buff_dpi1->io.BytesIO()
A:matplotlib.tests.test_image.buff_dpi100->io.BytesIO()
A:matplotlib.tests.test_image.arr_dpi1->matplotlib.pyplot.imread(buff_dpi1)
A:matplotlib.tests.test_image.arr_dpi100->matplotlib.pyplot.imread(buff_dpi100)
A:matplotlib.tests.test_image.buff->io.BytesIO()
A:matplotlib.tests.test_image.arr_buf->(255 * arr_buf).astype('uint8')
A:matplotlib.tests.test_image.Z->numpy.sin(Y ** 2)
A:matplotlib.tests.test_image.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_image.im->matplotlib.pyplot.imshow([[1, 2], [3, np.nan]])
A:matplotlib.tests.test_image.(xdisp, ydisp)->matplotlib.pyplot.figure().add_subplot(1, 1, 1).transData.transform_point([x, y])
A:matplotlib.tests.test_image.event->MouseEvent('motion_notify_event', fig.canvas, xdisp, ydisp)
A:matplotlib.tests.test_image.patch->matplotlib.patches.Circle((0, 0), radius=1, transform=ax.transData)
A:matplotlib.tests.test_image.rect->matplotlib.patches.Rectangle(xy=(1, 1), width=2, height=2, transform=im.axes.transData)
A:matplotlib.tests.test_image.arr->numpy.arange(300, dtype=dtype).reshape((10, 10, 3))
A:matplotlib.tests.test_image.f->matplotlib.pyplot.figure(figsize=[1, 1])
A:matplotlib.tests.test_image.buf->io.BytesIO()
A:matplotlib.tests.test_image.(r, g, b, a)->sum(im[:, -1])
A:matplotlib.tests.test_image.arr[:, :, 3]->numpy.concatenate((np.arange(0, 1.1, 0.1), np.arange(0, 1, 0.1)[::-1]))
A:matplotlib.tests.test_image.arr2->numpy.zeros((21, 11, 4))
A:matplotlib.tests.test_image.(fig, axes)->matplotlib.pyplot.subplots(1, 3, figsize=(3, 1))
A:matplotlib.tests.test_image.image->PIL.Image.open(buff)
A:matplotlib.tests.test_image.bbox_im->BboxImage(TransformedBbox(Bbox([[0.1, 0.2], [0.3, 0.25]]), ax.figure.transFigure))
A:matplotlib.tests.test_image.im_obj->matplotlib.pyplot.figure().add_subplot(1, 1, 1).imshow(im, extent=[0.4, 0.7, 0.2, 0.9], interpolation='nearest')
A:matplotlib.tests.test_image.im_bbox->matplotlib.pyplot.figure().add_subplot(1, 1, 1).imshow(im, extent=[0.4, 0.7, 0.2, 0.9], interpolation='nearest').get_window_extent(renderer)
A:matplotlib.tests.test_image.imd->numpy.ones((10, 10), dtype='uint8')
A:matplotlib.tests.test_image.im[..., 3]->numpy.linspace(0.0, 1.0, 300)
A:matplotlib.tests.test_image.num_colors->len(image.getcolors(256))
A:matplotlib.tests.test_image.corner_pixel->PIL.Image.open(buff).getpixel((0, 0))
A:matplotlib.tests.test_image.x->numpy.ones((10, 10))
A:matplotlib.tests.test_image.y->numpy.arange(4, dtype=float)
A:matplotlib.tests.test_image.p1->ax[0].pcolormesh(data)
A:matplotlib.tests.test_image.p2->ax[1].pcolormesh(data)
A:matplotlib.tests.test_image.tree->xml.etree.ElementTree.parse(buff)
A:matplotlib.tests.test_image.req->six.moves.urllib.request.urlopen('http://matplotlib.org/_static/logo_sidebar_horiz.png')
A:matplotlib.tests.test_image.xy->numpy.arange(-3.0, 3.0, delta)
A:matplotlib.tests.test_image.(X, Y)->numpy.meshgrid(np.arange(-5, 5, 1), np.arange(-5, 5, 1))
A:matplotlib.tests.test_image.(fig, ax1)->matplotlib.pyplot.subplots(1, 1)
A:matplotlib.tests.test_image.im1->matplotlib.pyplot.figure().add_subplot(121).imshow(Z, interpolation='none', cmap='viridis', origin='lower', extent=[-2, 4, -3, 2], clip_on=True)
A:matplotlib.tests.test_image.(x1, x2, y1, y2)->matplotlib.pyplot.figure().add_subplot(121).imshow(Z, interpolation='none', cmap='viridis', origin='lower', extent=[-2, 4, -3, 2], clip_on=True).get_extent()
A:matplotlib.tests.test_image.palette->copy(plt.cm.gray)
A:matplotlib.tests.test_image.Zm->numpy.ma.masked_where(Z > 1.2, Z)
A:matplotlib.tests.test_image.(fig, (ax1, ax2))->matplotlib.pyplot.subplots(1, 2)
A:matplotlib.tests.test_image.A->numpy.ma.masked_array(np.ones((5, 5), dtype=np.uint16), A)
A:matplotlib.tests.test_image.kwargs->dict(origin='lower', interpolation='nearest', cmap='viridis')
A:matplotlib.tests.test_image.cm->copy(plt.get_cmap('viridis'))
A:matplotlib.tests.test_image.n->matplotlib.colors.Normalize(vmin=0, vmax=N * N - 1)
A:matplotlib.tests.test_image.mask->numpy.zeros_like(data).astype('bool')
A:matplotlib.tests.test_image.(fig, ax_grid)->matplotlib.pyplot.subplots(3, 6)
A:matplotlib.tests.test_image.(_, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_image.out->matplotlib.pyplot.figure().add_subplot(1, 1, 1).imshow(arr).get_array()
A:matplotlib.tests.test_image.pc->matplotlib.pyplot.figure().add_subplot(1, 1, 1).imshow(img)
A:matplotlib.tests.test_image.(f, ax)->matplotlib.pyplot.subplots()
matplotlib.tests.test_image.do_figimage(suppressComposite)
matplotlib.tests.test_image.test_axesimage_setdata()
matplotlib.tests.test_image.test_bbox_image_inverted()
matplotlib.tests.test_image.test_composite(fmt,counted,composite_image,count)
matplotlib.tests.test_image.test_cursor_data()
matplotlib.tests.test_image.test_empty_imshow(make_norm)
matplotlib.tests.test_image.test_figimage0()
matplotlib.tests.test_image.test_figimage1()
matplotlib.tests.test_image.test_figureimage_setdata()
matplotlib.tests.test_image.test_full_invalid()
matplotlib.tests.test_image.test_get_window_extent_for_AxisImage()
matplotlib.tests.test_image.test_image_alpha()
matplotlib.tests.test_image.test_image_clip()
matplotlib.tests.test_image.test_image_cliprect()
matplotlib.tests.test_image.test_image_composite_alpha()
matplotlib.tests.test_image.test_image_composite_background()
matplotlib.tests.test_image.test_image_edges()
matplotlib.tests.test_image.test_image_interps()
matplotlib.tests.test_image.test_image_preserve_size()
matplotlib.tests.test_image.test_image_preserve_size2()
matplotlib.tests.test_image.test_image_python_io()
matplotlib.tests.test_image.test_image_shift()
matplotlib.tests.test_image.test_imread_fspath()
matplotlib.tests.test_image.test_imread_pil_uint16()
matplotlib.tests.test_image.test_imsave()
matplotlib.tests.test_image.test_imsave_color_alpha()
matplotlib.tests.test_image.test_imsave_fspath(fmt)
matplotlib.tests.test_image.test_imshow()
matplotlib.tests.test_image.test_imshow_bignumbers()
matplotlib.tests.test_image.test_imshow_bignumbers_real()
matplotlib.tests.test_image.test_imshow_bool()
matplotlib.tests.test_image.test_imshow_clips_rgb_to_valid_range(dtype)
matplotlib.tests.test_image.test_imshow_deprecated_interd_warn()
matplotlib.tests.test_image.test_imshow_endianess()
matplotlib.tests.test_image.test_imshow_flatfield()
matplotlib.tests.test_image.test_imshow_float128()
matplotlib.tests.test_image.test_imshow_masked_interpolation()
matplotlib.tests.test_image.test_imshow_no_warn_invalid()
matplotlib.tests.test_image.test_interp_nearest_vs_none()
matplotlib.tests.test_image.test_jpeg_2d()
matplotlib.tests.test_image.test_jpeg_alpha()
matplotlib.tests.test_image.test_load_from_url()
matplotlib.tests.test_image.test_log_scale_image(recwarn)
matplotlib.tests.test_image.test_mask_image()
matplotlib.tests.test_image.test_mask_image_over_under()
matplotlib.tests.test_image.test_minimized_rasterized()
matplotlib.tests.test_image.test_no_interpolation_origin()
matplotlib.tests.test_image.test_nonuniformimage_setcmap()
matplotlib.tests.test_image.test_nonuniformimage_setdata()
matplotlib.tests.test_image.test_nonuniformimage_setnorm()
matplotlib.tests.test_image.test_pcolorimage_extent()
matplotlib.tests.test_image.test_pcolorimage_setdata()
matplotlib.tests.test_image.test_rasterize_dpi()
matplotlib.tests.test_image.test_relim()
matplotlib.tests.test_image.test_rotate_image()
matplotlib.tests.test_image.test_zoom_and_clip_upper_origin()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_path.py----------------------------------------
A:matplotlib.tests.test_path.path->matplotlib.path.Path.arc(low, high)
A:matplotlib.tests.test_path.ret->matplotlib.path.Path.arc(low, high).contains_points(points)
A:matplotlib.tests.test_path.result->matplotlib.path.Path.arc(low, high).contains_points(points, radius=-0.5)
A:matplotlib.tests.test_path.box->numpy.array([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])
A:matplotlib.tests.test_path.p->Path(data)
A:matplotlib.tests.test_path.test->numpy.array([[np.nan, 0.5]])
A:matplotlib.tests.test_path.contains->Path(data).contains_points(test)
A:matplotlib.tests.test_path.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_path.polygon->fig.add_subplot(4, 2, i + 1).axvspan(1, 10)
A:matplotlib.tests.test_path.fig->matplotlib.pyplot.figure(figsize=(6.0, 6.2))
A:matplotlib.tests.test_path.ax->matplotlib.pyplot.figure(figsize=(6.0, 6.2)).add_subplot(4, 2, i + 1)
A:matplotlib.tests.test_path.x->numpy.linspace(0, 2 * np.pi, 100)
A:matplotlib.tests.test_path.r->matplotlib.path.Path.make_compound_path()
A:matplotlib.tests.test_path.y->numpy.sin(x)
A:matplotlib.tests.test_path.hand->numpy.array([[1.64516129, 1.16145833], [1.64516129, 1.59375], [1.35080645, 1.921875], [1.375, 2.18229167], [1.68548387, 1.9375], [1.60887097, 2.55208333], [1.68548387, 2.69791667], [1.76209677, 2.56770833], [1.83064516, 1.97395833], [1.89516129, 2.75], [1.9516129, 2.84895833], [2.01209677, 2.76041667], [1.99193548, 1.99479167], [2.11290323, 2.63020833], [2.2016129, 2.734375], [2.25403226, 2.60416667], [2.14919355, 1.953125], [2.30645161, 2.36979167], [2.39112903, 2.36979167], [2.41532258, 2.1875], [2.1733871, 1.703125], [2.07782258, 1.16666667]])
A:matplotlib.tests.test_path.poly->Path(np.vstack((hand[:, 1], hand[:, 0])).T, closed=True)
A:matplotlib.tests.test_path.clip_rect->matplotlib.transforms.Bbox([[r0, c0], [r1, c1]])
A:matplotlib.tests.test_path.path1->Path(verts)
A:matplotlib.tests.test_path.path2->Path(verts, codes)
A:matplotlib.tests.test_path.mins->numpy.min(path.vertices, axis=0)
A:matplotlib.tests.test_path.maxs->numpy.max(path.vertices, axis=0)
matplotlib.tests.test_path.test_contains_points_negative_radius()
matplotlib.tests.test_path.test_full_arc(offset)
matplotlib.tests.test_path.test_log_transform_with_zero()
matplotlib.tests.test_path.test_make_compound_path_empty()
matplotlib.tests.test_path.test_marker_paths_pdf()
matplotlib.tests.test_path.test_nan_isolated_points()
matplotlib.tests.test_path.test_nonlinear_containment()
matplotlib.tests.test_path.test_path_clipping()
matplotlib.tests.test_path.test_path_deepcopy()
matplotlib.tests.test_path.test_path_no_doubled_point_in_to_polygon()
matplotlib.tests.test_path.test_path_to_polygons()
matplotlib.tests.test_path.test_point_in_path()
matplotlib.tests.test_path.test_point_in_path_nan()
matplotlib.tests.test_path.test_readonly_path()
matplotlib.tests.test_path.test_xkcd()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/__init__.py----------------------------------------
A:matplotlib.tests.__init__.diff->difflib.unified_diff(reference_str.splitlines(1), test_str.splitlines(1), 'Reference', 'Test result', '', '', 0)
matplotlib.tests.__init__.assert_str_equal(reference_str,test_str,format_str='String{str1}and{str2}donotmatch:\n{differences}')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/conftest.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_cbook.py----------------------------------------
A:matplotlib.tests.test_cbook.d1->matplotlib.cbook.restrict_dict(d, ['foo', 1])
A:matplotlib.tests.test_cbook.d2->matplotlib.cbook.restrict_dict(d, ['bar', 2])
A:matplotlib.tests.test_cbook.d3->matplotlib.cbook.restrict_dict(d, {'foo': 1})
A:matplotlib.tests.test_cbook.d4->matplotlib.cbook.restrict_dict(d, {})
A:matplotlib.tests.test_cbook.d5->matplotlib.cbook.restrict_dict(d, {'foo', 2})
A:matplotlib.tests.test_cbook.self.arr0->numpy.arange(1.0, 7.0)
A:matplotlib.tests.test_cbook.self.arr2->numpy.array(self.arr1)
A:matplotlib.tests.test_cbook.self.arr3->numpy.ma.array(self.arr2, mask=self.mask1)
A:matplotlib.tests.test_cbook.self.arr_s2->numpy.array(self.arr_s)
A:matplotlib.tests.test_cbook.self.arr_dt2->numpy.array(self.arr_dt)
A:matplotlib.tests.test_cbook.self.arr_rgba->matplotlib.colors.to_rgba_array(self.arr_colors)
A:matplotlib.tests.test_cbook.actual->dmp(self.arr3, self.arr_rgba)
A:matplotlib.tests.test_cbook.self.data->numpy.random.lognormal(size=(self.nrows, self.ncols), mean=1.5, sigma=1.75)
A:matplotlib.tests.test_cbook.self.known_keys->sorted(['mean', 'med', 'q1', 'q3', 'iqr', 'cilo', 'cihi', 'whislo', 'whishi', 'fliers', 'label'])
A:matplotlib.tests.test_cbook.self.std_results->matplotlib.cbook.boxplot_stats(self.data)
A:matplotlib.tests.test_cbook.results->matplotlib.cbook.boxplot_stats(data)
A:matplotlib.tests.test_cbook.data->numpy.random.normal(size=(34, 34, 34))
A:matplotlib.tests.test_cbook.x->numpy.arange(5)
A:matplotlib.tests.test_cbook.bstats_false->matplotlib.cbook.boxplot_stats(x, autorange=False)
A:matplotlib.tests.test_cbook.bstats_true->matplotlib.cbook.boxplot_stats(x, autorange=True)
A:matplotlib.tests.test_cbook.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.tests.test_cbook.mini_me->Test_callback_registry()
A:matplotlib.tests.test_cbook.cid1->self.connect(self.signal, mini_me.dummy)
A:matplotlib.tests.test_cbook.cid2->self.connect(self.signal, mini_me.dummy)
A:matplotlib.tests.test_cbook.cb->matplotlib.cbook.CallbackRegistry()
A:matplotlib.tests.test_cbook.cb_old->matplotlib.cbook.CallbackRegistry(exception_handler=None)
A:matplotlib.tests.test_cbook.cb_filt->matplotlib.cbook.CallbackRegistry(exception_handler=transformer)
A:matplotlib.tests.test_cbook.y1->numpy.arange(4)
A:matplotlib.tests.test_cbook.(xs, y1s, y2s)->matplotlib.cbook.pts_to_midstep(x, y1, y2)
A:matplotlib.tests.test_cbook.x_target->numpy.asarray([0, 0.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3], dtype='float')
A:matplotlib.tests.test_cbook.y1_target->numpy.asarray([0, 0, 1, 1, 2, 2, 3, 3], dtype='float')
A:matplotlib.tests.test_cbook.y2_target->numpy.asarray([3, 3, 2, 2, 1, 1, 0, 0], dtype='float')
A:matplotlib.tests.test_cbook.(xs, y1s)->matplotlib.cbook.pts_to_midstep(x, y1)
A:matplotlib.tests.test_cbook.steps->matplotlib.cbook.pts_to_midstep([], [])
A:matplotlib.tests.test_cbook.g->matplotlib.cbook.Grouper()
A:matplotlib.tests.test_cbook.ret->matplotlib.cbook.safe_first_element(it)
A:matplotlib.tests.test_cbook.x_test->numpy.linspace(0.01, 0.5, 3)
A:matplotlib.tests.test_cbook.func_parser->matplotlib.cbook._StringFuncParser(string)
matplotlib.tests.test_cbook.TestFuncParser(object)
matplotlib.tests.test_cbook.TestFuncParser.test_bounded(self,string,bounded)
matplotlib.tests.test_cbook.TestFuncParser.test_get_inverse(self,string)
matplotlib.tests.test_cbook.TestFuncParser.test_inverse(self,string)
matplotlib.tests.test_cbook.TestFuncParser.test_values(self,string,func)
matplotlib.tests.test_cbook.Test_boxplot_stats(object)
matplotlib.tests.test_cbook.Test_boxplot_stats.setup(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_bad_dims(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_boxplot_stats_autorange_false(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_dict_keys(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_each_dict(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_form_main_list(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_label_error(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_baseline(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_bootstrapped(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_float(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_percentiles(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_whiskers_range(self)
matplotlib.tests.test_cbook.Test_boxplot_stats.test_results_withlabels(self)
matplotlib.tests.test_cbook.Test_callback_registry(object)
matplotlib.tests.test_cbook.Test_callback_registry.connect(self,s,func)
matplotlib.tests.test_cbook.Test_callback_registry.dummy(self)
matplotlib.tests.test_cbook.Test_callback_registry.is_empty(self)
matplotlib.tests.test_cbook.Test_callback_registry.is_not_empty(self)
matplotlib.tests.test_cbook.Test_callback_registry.setup(self)
matplotlib.tests.test_cbook.Test_callback_registry.test_callback_complete(self)
matplotlib.tests.test_cbook.Test_callback_registry.test_pickling(self)
matplotlib.tests.test_cbook.Test_delete_masked_points(object)
matplotlib.tests.test_cbook.Test_delete_masked_points.setup_method(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_bad_first_arg(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_datetime(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_rgba(self)
matplotlib.tests.test_cbook.Test_delete_masked_points.test_string_seq(self)
matplotlib.tests.test_cbook.raising_cb_reg(func)
matplotlib.tests.test_cbook.test_callbackregistry_process_exception(cb,excp)
matplotlib.tests.test_cbook.test_flatiter()
matplotlib.tests.test_cbook.test_grouper()
matplotlib.tests.test_cbook.test_grouper_private()
matplotlib.tests.test_cbook.test_is_hashable()
matplotlib.tests.test_cbook.test_normalize_kwargs_fail(inp,kwargs_to_norm)
matplotlib.tests.test_cbook.test_normalize_kwargs_pass(inp,expected,kwargs_to_norm)
matplotlib.tests.test_cbook.test_normalize_kwargs_warn(inp,expected,kwargs_to_norm,warn_count)
matplotlib.tests.test_cbook.test_restrict_dict()
matplotlib.tests.test_cbook.test_sanitize_sequence()
matplotlib.tests.test_cbook.test_step_fails(args)
matplotlib.tests.test_cbook.test_to_midstep()
matplotlib.tests.test_cbook.test_to_midstep_empty()
matplotlib.tests.test_cbook.test_to_poststep()
matplotlib.tests.test_cbook.test_to_poststep_empty()
matplotlib.tests.test_cbook.test_to_prestep()
matplotlib.tests.test_cbook.test_to_prestep_empty()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_style.py----------------------------------------
A:matplotlib.tests.test_style.tempdir->tempfile.mkdtemp()
A:matplotlib.tests.test_style.d->OrderedDict([(PARAM, original_value), ('badparam', None)])
A:matplotlib.tests.test_style.x->matplotlib.style.context([d])
matplotlib.tests.test_style.temp_style(style_name,settings=None)
matplotlib.tests.test_style.test_alias(equiv_styles)
matplotlib.tests.test_style.test_available()
matplotlib.tests.test_style.test_context()
matplotlib.tests.test_style.test_context_with_badparam()
matplotlib.tests.test_style.test_context_with_dict()
matplotlib.tests.test_style.test_context_with_dict_after_namedstyle()
matplotlib.tests.test_style.test_context_with_dict_before_namedstyle()
matplotlib.tests.test_style.test_context_with_union_of_dict_and_namedstyle()
matplotlib.tests.test_style.test_invalid_rc_warning_includes_filename()
matplotlib.tests.test_style.test_use()
matplotlib.tests.test_style.test_use_url()
matplotlib.tests.test_style.test_xkcd_cm()
matplotlib.tests.test_style.test_xkcd_no_cm()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_colorbar.py----------------------------------------
A:matplotlib.tests.test_colorbar.cmap->get_cmap('RdBu', lut=5)
A:matplotlib.tests.test_colorbar.norms->dict()
A:matplotlib.tests.test_colorbar.norms['neither']->BoundaryNorm(clevs, len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['min']->BoundaryNorm([-10] + clevs[1:], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['max']->BoundaryNorm(clevs[:-1] + [10], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.norms['both']->BoundaryNorm([-10] + clevs[1:-1] + [10], len(clevs) - 1)
A:matplotlib.tests.test_colorbar.(cmap, norms)->_get_cmap_norms()
A:matplotlib.tests.test_colorbar.fig->matplotlib.pyplot.figure(figsize=(8, 6))
A:matplotlib.tests.test_colorbar.cax->matplotlib.pyplot.figure(figsize=(8, 6)).add_subplot(12, 1, i * 3 + j + 1)
A:matplotlib.tests.test_colorbar.cb->ColorbarBase(ax, norm=LogNorm(vmin=0.1, vmax=1000.0), orientation='vertical', extend='both')
A:matplotlib.tests.test_colorbar.data->numpy.arange(1200).reshape(30, 40)
A:matplotlib.tests.test_colorbar.data_2nd->numpy.repeat(np.repeat(data_2nd, 10, axis=1), 10, axis=0)
A:matplotlib.tests.test_colorbar.color_mappable->matplotlib.pyplot.contourf(data, levels=levels, extend='both')
A:matplotlib.tests.test_colorbar.hatch_mappable->matplotlib.pyplot.contourf(data_2nd, levels=[1, 2, 3], colors='none', hatches=['/', 'o', '+'], extend='max')
A:matplotlib.tests.test_colorbar.ax1->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.05, 0.85, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.ax2->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.1, 0.65, 0.75, 0.1])
A:matplotlib.tests.test_colorbar.ax3->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.05, 0.45, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.x->numpy.arange(-3.0, 4.001)
A:matplotlib.tests.test_colorbar.y->numpy.arange(-4.0, 3.001)
A:matplotlib.tests.test_colorbar.z->numpy.ma.masked_greater(np.arange(50, 54), 50)
A:matplotlib.tests.test_colorbar.cs->matplotlib.pyplot.gca().contourf(X, Y, Z, clevs, colors=colors)
A:matplotlib.tests.test_colorbar.ax->matplotlib.pyplot.gca()
A:matplotlib.tests.test_colorbar.sc->matplotlib.pyplot.gca().scatter([1, 2], [3, 4], cmap='spring')
A:matplotlib.tests.test_colorbar.pre_figbox->numpy.array(ax.figbox)
A:matplotlib.tests.test_colorbar.post_figbox->numpy.array(ax.figbox)
A:matplotlib.tests.test_colorbar.ax4->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.05, 0.25, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.ax5->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.05, 0.05, 0.9, 0.1])
A:matplotlib.tests.test_colorbar.im->matplotlib.pyplot.figure(figsize=(8, 6)).add_axes([0.05, 0.85, 0.9, 0.1]).pcolormesh(np.linspace(0, 10, 16).reshape((4, 4)), cmap=cmap)
A:matplotlib.tests.test_colorbar.values->numpy.linspace(0, 10, 5)
A:matplotlib.tests.test_colorbar.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_colorbar.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_colorbar.clevs->numpy.array([-12, -5, 0, 5, 12], dtype=float)
A:matplotlib.tests.test_colorbar.cbar->matplotlib.pyplot.figure(figsize=(8, 6)).colorbar(cs, ax=ax, extend='neither', orientation='horizontal', ticks=clevs)
A:matplotlib.tests.test_colorbar.userTicks->matplotlib.pyplot.colorbar(ticks=[0, 600, 1200])
A:matplotlib.tests.test_colorbar.defTicks->matplotlib.pyplot.colorbar(orientation='horizontal')
A:matplotlib.tests.test_colorbar.(f, ax)->matplotlib.pyplot.subplots()
matplotlib.tests.test_colorbar._colorbar_extension_length(spacing)
matplotlib.tests.test_colorbar._colorbar_extension_shape(spacing)
matplotlib.tests.test_colorbar._get_cmap_norms()
matplotlib.tests.test_colorbar.test_colorbar_axes_kw()
matplotlib.tests.test_colorbar.test_colorbar_closed_patch()
matplotlib.tests.test_colorbar.test_colorbar_extension_length()
matplotlib.tests.test_colorbar.test_colorbar_extension_shape()
matplotlib.tests.test_colorbar.test_colorbar_get_ticks()
matplotlib.tests.test_colorbar.test_colorbar_lognorm_extension()
matplotlib.tests.test_colorbar.test_colorbar_positioning()
matplotlib.tests.test_colorbar.test_colorbar_single_scatter()
matplotlib.tests.test_colorbar.test_colorbar_ticks()
matplotlib.tests.test_colorbar.test_colorbarbase()
matplotlib.tests.test_colorbar.test_gridspec_make_colorbar()
matplotlib.tests.test_colorbar.test_remove_from_figure(use_gridspec)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_tightlayout.py----------------------------------------
A:matplotlib.tests.test_tightlayout.fig->matplotlib.pyplot.gcf()
A:matplotlib.tests.test_tightlayout.ax->matplotlib.pyplot.gcf().add_subplot(224)
A:matplotlib.tests.test_tightlayout.(fig, ((ax1, ax2), (ax3, ax4)))->matplotlib.pyplot.subplots(nrows=2, ncols=2)
A:matplotlib.tests.test_tightlayout.ax1->matplotlib.pyplot.gcf().add_subplot(gs1[0])
A:matplotlib.tests.test_tightlayout.ax2->matplotlib.pyplot.gcf().add_subplot(gs1[1])
A:matplotlib.tests.test_tightlayout.ax3->matplotlib.pyplot.subplot2grid((3, 3), (1, 0), colspan=2, rowspan=2)
A:matplotlib.tests.test_tightlayout.ax4->matplotlib.pyplot.subplot2grid((3, 3), (1, 2), rowspan=2)
A:matplotlib.tests.test_tightlayout.arr->numpy.arange(100).reshape((10, 10))
A:matplotlib.tests.test_tightlayout.gs1->matplotlib.gridspec.GridSpec(2, 1)
A:matplotlib.tests.test_tightlayout.gs2->matplotlib.gridspec.GridSpec(3, 1)
A:matplotlib.tests.test_tightlayout.top->min(gs1.top, gs2.top)
A:matplotlib.tests.test_tightlayout.bottom->max(gs1.bottom, gs2.bottom)
A:matplotlib.tests.test_tightlayout.(f, axarr)->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_tightlayout.da->DrawingArea(size, size)
A:matplotlib.tests.test_tightlayout.background->Rectangle((0, 0), width=size, height=size, facecolor=color, edgecolor='None', linewidth=0, antialiased=False)
A:matplotlib.tests.test_tightlayout.anchored_box->AnchoredOffsetbox(loc=10, child=da, pad=0.0, frameon=False, bbox_to_anchor=point, bbox_transform=ax.transAxes, borderpad=0.0)
A:matplotlib.tests.test_tightlayout.(_, axs)->matplotlib.pyplot.subplots(rows, cols)
A:matplotlib.tests.test_tightlayout.axs->_subplots()
matplotlib.tests.test_tightlayout.add_offsetboxes(ax,size=10,margin=0.1,color='black')
matplotlib.tests.test_tightlayout.example_plot(ax,fontsize=12)
matplotlib.tests.test_tightlayout.test_empty_layout()
matplotlib.tests.test_tightlayout.test_outward_ticks()
matplotlib.tests.test_tightlayout.test_tight_layout1()
matplotlib.tests.test_tightlayout.test_tight_layout2()
matplotlib.tests.test_tightlayout.test_tight_layout3()
matplotlib.tests.test_tightlayout.test_tight_layout4()
matplotlib.tests.test_tightlayout.test_tight_layout5()
matplotlib.tests.test_tightlayout.test_tight_layout6()
matplotlib.tests.test_tightlayout.test_tight_layout7()
matplotlib.tests.test_tightlayout.test_tight_layout8()
matplotlib.tests.test_tightlayout.test_tight_layout9()
matplotlib.tests.test_tightlayout.test_tight_layout_offsetboxes()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_artist.py----------------------------------------
A:matplotlib.tests.test_artist.ax->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_artist.xy_pix->matplotlib.pyplot.figure().add_subplot(111).transData.transform_point(xy_data)
A:matplotlib.tests.test_artist.e->matplotlib.patches.Ellipse(xy_pix, width=100, height=100)
A:matplotlib.tests.test_artist.intermediate_transform->matplotlib.patches.Ellipse(xy_pix, width=100, height=100).get_transform()
A:matplotlib.tests.test_artist.c->matplotlib.collections.PatchCollection([e], transform=mtransforms.IdentityTransform(), alpha=0.5)
A:matplotlib.tests.test_artist.exterior->matplotlib.path.Path.unit_rectangle().deepcopy()
A:matplotlib.tests.test_artist.interior->matplotlib.path.Path.unit_circle().deepcopy()
A:matplotlib.tests.test_artist.clip_path->matplotlib.path.Path(vertices=np.concatenate([exterior.vertices, interior.vertices]), codes=np.concatenate([exterior.codes, interior.codes]))
A:matplotlib.tests.test_artist.star->matplotlib.path.Path.unit_regular_star(6).deepcopy()
A:matplotlib.tests.test_artist.ax1->matplotlib.pyplot.subplot(121)
A:matplotlib.tests.test_artist.col->matplotlib.collections.PathCollection([star], lw=5, edgecolor='blue', facecolor='red', alpha=0.7, hatch='*')
A:matplotlib.tests.test_artist.ax2->matplotlib.pyplot.subplot(122, sharex=ax1, sharey=ax1)
A:matplotlib.tests.test_artist.patch->matplotlib.patches.PathPatch(star, lw=5, edgecolor='blue', facecolor='red', alpha=0.7, hatch='*')
A:matplotlib.tests.test_artist.x->numpy.random.random(20000)
A:matplotlib.tests.test_artist.y->numpy.random.random(20000)
A:matplotlib.tests.test_artist.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_artist.pdf->io.BytesIO()
A:matplotlib.tests.test_artist.svg->io.BytesIO()
A:matplotlib.tests.test_artist.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_artist.rect1->matplotlib.patches.Rectangle((0, 0), 3, 4, hatch='/')
A:matplotlib.tests.test_artist.rect2->matplotlib.collections.RegularPolyCollection(4, sizes=[16000], offsets=[(1.5, 6.5)], transOffset=ax.transData, hatch='/')
A:matplotlib.tests.test_artist.rect3->matplotlib.patches.Rectangle((4, 0), 3, 4, hatch='/', edgecolor='C1')
A:matplotlib.tests.test_artist.rect4->matplotlib.collections.RegularPolyCollection(4, sizes=[16000], offsets=[(5.5, 6.5)], transOffset=ax.transData, hatch='/', edgecolor='C1')
A:matplotlib.tests.test_artist.im->matplotlib.pyplot.figure().add_subplot(111).imshow(np.arange(36).reshape(6, 6))
A:matplotlib.tests.test_artist.(ln,)->matplotlib.pyplot.figure().add_subplot(111).plot(range(5), zorder=None)
A:matplotlib.tests.test_artist.(fig, [[ax1, ax2], [ax3, ax4]])->matplotlib.pyplot.subplots(2, 2)
A:matplotlib.tests.test_artist.pp1->matplotlib.patches.PathPatch(mpath.Path([(0, 0), (1, 0), (1, 1), (0, 0)], [mpath.Path.MOVETO, mpath.Path.CURVE3, mpath.Path.CURVE3, mpath.Path.CLOSEPOLY]), fc='none', transform=ax4.transData)
A:matplotlib.tests.test_artist.ln->matplotlib.lines.Line2D([], [])
A:matplotlib.tests.test_artist.(fig, axes)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_artist.lines1->axes.plot(range(3))
A:matplotlib.tests.test_artist.lines2->axes.plot(range(3))
A:matplotlib.tests.test_artist.sio->io.StringIO()
A:matplotlib.tests.test_artist.valid_values->matplotlib.artist.ArtistInspector(TestArtist).get_valid_values('f')
matplotlib.tests.test_artist.test_None_zorder()
matplotlib.tests.test_artist.test_artist_inspector_get_valid_values(accept_clause,expected)
matplotlib.tests.test_artist.test_clipping()
matplotlib.tests.test_artist.test_collection_transform_of_none()
matplotlib.tests.test_artist.test_cull_markers()
matplotlib.tests.test_artist.test_default_edges()
matplotlib.tests.test_artist.test_hatching()
matplotlib.tests.test_artist.test_patch_transform_of_none()
matplotlib.tests.test_artist.test_properties()
matplotlib.tests.test_artist.test_remove()
matplotlib.tests.test_artist.test_setp()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_backends_interactive.py----------------------------------------
A:matplotlib.tests.test_backends_interactive.environ->os.environ.copy()
A:matplotlib.tests.test_backends_interactive.proc->Popen([sys.executable, '-c', _test_script], env=environ)
matplotlib.tests.test_backends_interactive._get_testable_interactive_backends()
matplotlib.tests.test_backends_interactive.test_backend(backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_streamplot.py----------------------------------------
A:matplotlib.tests.test_streamplot.x->numpy.linspace(-5, 10, 20)
A:matplotlib.tests.test_streamplot.y->numpy.linspace(-2, 4, 10)
A:matplotlib.tests.test_streamplot.(X, Y)->numpy.meshgrid(x, y)
A:matplotlib.tests.test_streamplot.(X, Y, U, V)->velocity_field()
A:matplotlib.tests.test_streamplot.start_x->numpy.linspace(X.min(), X.max(), 10)
A:matplotlib.tests.test_streamplot.start_y->numpy.linspace(Y.min(), Y.max(), 10)
A:matplotlib.tests.test_streamplot.start_points->numpy.column_stack([start_x, start_y])
A:matplotlib.tests.test_streamplot.speed->numpy.sqrt(U * U + V * V)
A:matplotlib.tests.test_streamplot.mask->numpy.zeros(U.shape, dtype=bool)
A:matplotlib.tests.test_streamplot.U->numpy.ma.array(U, mask=mask)
A:matplotlib.tests.test_streamplot.(x, y, U, V)->swirl_velocity_field()
A:matplotlib.tests.test_streamplot.ax->matplotlib.pyplot.axes()
A:matplotlib.tests.test_streamplot.(y, x)->numpy.meshgrid(y, x)
matplotlib.tests.test_streamplot.swirl_velocity_field()
matplotlib.tests.test_streamplot.test_colormap()
matplotlib.tests.test_streamplot.test_direction()
matplotlib.tests.test_streamplot.test_linewidth()
matplotlib.tests.test_streamplot.test_masks_and_nans()
matplotlib.tests.test_streamplot.test_maxlength()
matplotlib.tests.test_streamplot.test_startpoints()
matplotlib.tests.test_streamplot.test_streamplot_limits()
matplotlib.tests.test_streamplot.velocity_field()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_patheffects.py----------------------------------------
A:matplotlib.tests.test_patheffects.ax1->matplotlib.pyplot.subplot(111)
A:matplotlib.tests.test_patheffects.txt->matplotlib.pyplot.subplot(111).annotate('test', (1.0, 1.0), (0.0, 0), arrowprops=dict(arrowstyle='->', connectionstyle='angle3', lw=2), size=20, ha='center', path_effects=[path_effects.withStroke(linewidth=3, foreground='w')])
A:matplotlib.tests.test_patheffects.ax2->matplotlib.pyplot.subplot(111)
A:matplotlib.tests.test_patheffects.arr->numpy.arange(25).reshape((5, 5))
A:matplotlib.tests.test_patheffects.cntr->matplotlib.pyplot.subplot(111).contour(arr, colors='k')
A:matplotlib.tests.test_patheffects.clbls->matplotlib.pyplot.subplot(111).clabel(cntr, fmt='%2.0f', use_clabeltext=True)
A:matplotlib.tests.test_patheffects.(p1,)->matplotlib.pyplot.plot(range(10))
A:matplotlib.tests.test_patheffects.leg->matplotlib.pyplot.legend([p1], ['Line 1$^2$'], fancybox=True, loc=2)
A:matplotlib.tests.test_patheffects.text->matplotlib.pyplot.axes([0, 0, 1, 1]).text(x=0.01, y=0.9 - i * 0.13, s=chunk, fontdict={'ha': 'left', 'va': 'center', 'size': font_size, 'color': 'white'})
A:matplotlib.tests.test_patheffects.t->matplotlib.pyplot.gcf().text(0.02, 0.1, 'Hatch shadow', fontsize=75, weight=1000, va='center')
A:matplotlib.tests.test_patheffects.ax->matplotlib.pyplot.axes([0, 0, 1, 1])
A:matplotlib.tests.test_patheffects.fig->matplotlib.pyplot.figure(dpi=150)
A:matplotlib.tests.test_patheffects.renderer->matplotlib.pyplot.figure(dpi=150).canvas.get_renderer()
A:matplotlib.tests.test_patheffects.pe_renderer->matplotlib.patheffects.SimpleLineShadow().get_proxy_renderer(renderer)
A:matplotlib.tests.test_patheffects.pe->matplotlib.patheffects.SimplePatchShadow(offset=(4, 5))
A:matplotlib.tests.test_patheffects.(x, y)->numpy.meshgrid(np.linspace(0, 10, 150), np.linspace(-5, 5, 100))
A:matplotlib.tests.test_patheffects.cs->matplotlib.pyplot.contour(data)
matplotlib.tests.test_patheffects.test_PathEffect_points_to_pixels()
matplotlib.tests.test_patheffects.test_SimplePatchShadow_offset()
matplotlib.tests.test_patheffects.test_collection()
matplotlib.tests.test_patheffects.test_patheffect1()
matplotlib.tests.test_patheffects.test_patheffect2()
matplotlib.tests.test_patheffects.test_patheffect3()
matplotlib.tests.test_patheffects.test_patheffects_stroked_text()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tests/test_cycles.py----------------------------------------
A:matplotlib.tests.test_cycles.fig->matplotlib.pyplot.figure()
A:matplotlib.tests.test_cycles.ax->matplotlib.pyplot.figure().add_subplot(111)
A:matplotlib.tests.test_cycles.xs->numpy.arange(10)
A:matplotlib.tests.test_cycles.(fig, ax)->matplotlib.pyplot.subplots()
A:matplotlib.tests.test_cycles.prop->next(ax._get_lines.prop_cycler)
A:matplotlib.tests.test_cycles.got->next(ax._get_lines.prop_cycler)
matplotlib.tests.test_cycles.test_colorcycle_basic()
matplotlib.tests.test_cycles.test_cycle_reset()
matplotlib.tests.test_cycles.test_fillcycle_basic()
matplotlib.tests.test_cycles.test_fillcycle_ignore()
matplotlib.tests.test_cycles.test_invalid_input_forms()
matplotlib.tests.test_cycles.test_linestylecycle_basic()
matplotlib.tests.test_cycles.test_marker_cycle()
matplotlib.tests.test_cycles.test_property_collision_fill()
matplotlib.tests.test_cycles.test_property_collision_plot()
matplotlib.tests.test_cycles.test_valid_input_forms()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/compat/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/compat/subprocess.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/projections/polar.py----------------------------------------
A:matplotlib.projections.polar.xy->numpy.empty(tr.shape, float)
A:matplotlib.projections.polar.x[:]->numpy.where(mask, np.nan, r * np.cos(t))
A:matplotlib.projections.polar.y[:]->numpy.where(mask, np.nan, r * np.sin(t))
A:matplotlib.projections.polar.ipath->path.interpolated(path._interpolation_steps)
A:matplotlib.projections.polar.limits_scaled->self._limits.transformed(self._scale_transform)
A:matplotlib.projections.polar.affine->matplotlib.transforms.Affine2D().scale(0.5 / yscale).translate(0.5, 0.5)
A:matplotlib.projections.polar.self._mtx->matplotlib.transforms.Affine2D().scale(0.5 / yscale).translate(0.5, 0.5).get_matrix()
A:matplotlib.projections.polar.r->numpy.sqrt(x * x + y * y)
A:matplotlib.projections.polar.theta->numpy.where(y < 0, 2 * np.pi - theta, theta)
A:matplotlib.projections.polar.(vmin, vmax)->self.base.view_limits(vmin, vmax)
A:matplotlib.projections.polar.d->numpy.rad2deg(abs(vmax - vmin))
A:matplotlib.projections.polar.digits->max(-int(np.log10(d) - 1.5), 0)
A:matplotlib.projections.polar.self.axisself.base.axis->_AxisWrapper(self.base.axis)
A:matplotlib.projections.polar.self.axis->_AxisWrapper(axis)
A:matplotlib.projections.polar.lim->self.axis.get_view_interval()
A:matplotlib.projections.polar.self._text1_translate->matplotlib.transforms.ScaledTranslation(0, 0, axes.figure.dpi_scale_trans)
A:matplotlib.projections.polar.self._text2_translate->matplotlib.transforms.ScaledTranslation(0, 0, axes.figure.dpi_scale_trans)
A:matplotlib.projections.polar.t->super(RadialTick, self)._get_text2()
A:matplotlib.projections.polar.trans->matplotlib.transforms.Affine2D().scale(-1.0, 1.0).rotate(tick_angle)
A:matplotlib.projections.polar.marker->self.tick2line.get_marker()
A:matplotlib.projections.polar.rorigin->self._axes.get_rorigin()
A:matplotlib.projections.polar.padx->numpy.cos(angle + np.pi / 2)
A:matplotlib.projections.polar.pady->numpy.sin(angle + np.pi / 2)
A:matplotlib.projections.polar.thetamin->axes.get_thetamin()
A:matplotlib.projections.polar.thetamax->axes.get_thetamax()
A:matplotlib.projections.polar.direction->axes.get_theta_direction()
A:matplotlib.projections.polar.offset_rad->axes.get_theta_offset()
A:matplotlib.projections.polar.offset->numpy.rad2deg(offset_rad)
A:matplotlib.projections.polar.full->_is_full_circle_deg(thetamin, thetamax)
A:matplotlib.projections.polar.tick_angle->numpy.deg2rad(angle + 180)
A:matplotlib.projections.polar.(ha, va)->self._determine_anchor(mode, angle, direction < 0)
A:matplotlib.projections.polar.points->self._viewLim.get_points().copy()
A:matplotlib.projections.polar.width->min(radius * (rmax - rmin) / rmax, radius)
A:matplotlib.projections.polar.wedge->matplotlib.patches.Wedge(self._center, points[1, 1], points[0, 0], points[1, 0], width=width)
A:matplotlib.projections.polar.self._default_theta_offset->kwargs.pop('theta_offset', 0)
A:matplotlib.projections.polar.self._default_theta_direction->kwargs.pop('theta_direction', 1)
A:matplotlib.projections.polar.self._default_rlabel_position->numpy.deg2rad(kwargs.pop('rlabel_position', 22.5))
A:matplotlib.projections.polar.start->self.spines.get('start', None)
A:matplotlib.projections.polar.end->self.spines.get('end', None)
A:matplotlib.projections.polar.inner->self.spines.get('inner', None)
A:matplotlib.projections.polar.self.xaxis->ThetaAxis(self)
A:matplotlib.projections.polar.self.yaxis->RadialAxis(self)
A:matplotlib.projections.polar.self._originViewLim->matplotlib.transforms.LockableBbox(self.viewLim)
A:matplotlib.projections.polar.self._direction->matplotlib.transforms.Affine2D().scale(self._default_theta_direction, 1.0)
A:matplotlib.projections.polar.self._theta_offset->matplotlib.transforms.Affine2D().translate(self._default_theta_offset, 0.0)
A:matplotlib.projections.polar.self.transShift->matplotlib.transforms.composite_transform_factory(self._direction, self._theta_offset)
A:matplotlib.projections.polar.self._realViewLim->matplotlib.transforms.TransformedBbox(self.viewLim, self.transShift)
A:matplotlib.projections.polar.self.transScale->matplotlib.transforms.TransformWrapper(mtransforms.IdentityTransform())
A:matplotlib.projections.polar.self.axesLim->_WedgeBbox((0.5, 0.5), self._realViewLim, self._originViewLim)
A:matplotlib.projections.polar.self.transWedge->matplotlib.transforms.BboxTransformFrom(self.axesLim)
A:matplotlib.projections.polar.self.transAxes->matplotlib.transforms.BboxTransformTo(self.bbox)
A:matplotlib.projections.polar.self.transProjection->self.PolarTransform(self, _apply_theta_transforms=False)
A:matplotlib.projections.polar.self.transProjectionAffine->self.PolarAffine(self.transScale, self._originViewLim)
A:matplotlib.projections.polar.flipr_transform->matplotlib.transforms.Affine2D().translate(0.0, -0.5).scale(1.0, -1.0).translate(0.0, 0.5)
A:matplotlib.projections.polar.self._r_label_position->matplotlib.transforms.Affine2D().translate(self._default_rlabel_position, 0.0)
A:matplotlib.projections.polar.self._yaxis_text_transform->matplotlib.transforms.TransformWrapper(self._r_label_position + self.transData)
A:matplotlib.projections.polar.pad_shift->_ThetaShift(self, pad, 'min')
A:matplotlib.projections.polar.(thetamin, thetamax)->numpy.rad2deg(self._realViewLim.intervalx)
A:matplotlib.projections.polar.center->self.transWedge.transform_point((0.5, 0.5))
A:matplotlib.projections.polar.(edge, _)->self.transWedge.transform_point((1, 0))
A:matplotlib.projections.polar.spines->OrderedDict([('polar', mspines.Spine.arc_spine(self, 'top', (0.5, 0.5), 0.5, 0.0, 360.0)), ('start', mspines.Spine.linear_spine(self, 'left')), ('end', mspines.Spine.linear_spine(self, 'right')), ('inner', mspines.Spine.arc_spine(self, 'bottom', (0.5, 0.5), 0.0, 0.0, 360.0))])
A:matplotlib.projections.polar.self.viewLim.x1->numpy.deg2rad(thetamax)
A:matplotlib.projections.polar.self.viewLim.x0->numpy.deg2rad(thetamin)
A:matplotlib.projections.polar.kwargs['xmin']->numpy.deg2rad(kwargs.pop('thetamin'))
A:matplotlib.projections.polar.kwargs['xmax']->numpy.deg2rad(kwargs.pop('thetamax'))
A:matplotlib.projections.polar.mtx->self._direction.get_matrix()
A:matplotlib.projections.polar.kwargs['ymin']->kwargs.pop('rmin')
A:matplotlib.projections.polar.kwargs['ymax']->kwargs.pop('rmax')
A:matplotlib.projections.polar.angles->numpy.deg2rad(angles)
A:matplotlib.projections.polar.radii->numpy.asarray(radii)
A:matplotlib.projections.polar.angle->numpy.deg2rad(self.get_rlabel_position())
A:matplotlib.projections.polar.(t, r)->p.trans_inverse.transform_point((x, y))
A:matplotlib.projections.polar.self._pan_start->matplotlib.cbook.Bunch(rmax=self.get_rmax(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), r_label_angle=self.get_rlabel_position(), x=x, y=y, mode=mode)
A:matplotlib.projections.polar.(startt, startr)->p.trans_inverse.transform_point((p.x, p.y))
A:matplotlib.projections.polar.(trans, vert1, horiz1)->self.get_yaxis_text1_transform(0.0)
A:matplotlib.projections.polar.(trans, vert2, horiz2)->self.get_yaxis_text2_transform(0.0)
matplotlib.projections.PolarAxes(self,*args,**kwargs)
matplotlib.projections.PolarAxes._init_axis(self)
matplotlib.projections.PolarAxes._set_lim_and_transforms(self)
matplotlib.projections.PolarAxes.can_pan(self)
matplotlib.projections.PolarAxes.can_zoom(self)
matplotlib.projections.PolarAxes.cla(self)
matplotlib.projections.PolarAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.PolarAxes.draw(self,*args,**kwargs)
matplotlib.projections.PolarAxes.end_pan(self)
matplotlib.projections.PolarAxes.format_coord(self,theta,r)
matplotlib.projections.PolarAxes.get_data_ratio(self)
matplotlib.projections.PolarAxes.get_rlabel_position(self)
matplotlib.projections.PolarAxes.get_rmax(self)
matplotlib.projections.PolarAxes.get_rmin(self)
matplotlib.projections.PolarAxes.get_rorigin(self)
matplotlib.projections.PolarAxes.get_theta_direction(self)
matplotlib.projections.PolarAxes.get_theta_offset(self)
matplotlib.projections.PolarAxes.get_thetamax(self)
matplotlib.projections.PolarAxes.get_thetamin(self)
matplotlib.projections.PolarAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.PolarAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.PolarAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.PolarAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.PolarAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.PolarAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.PolarAxes.set_rgrids(self,radii,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.projections.PolarAxes.set_rlabel_position(self,value)
matplotlib.projections.PolarAxes.set_rlim(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_rmax(self,rmax)
matplotlib.projections.PolarAxes.set_rmin(self,rmin)
matplotlib.projections.PolarAxes.set_rorigin(self,rorigin)
matplotlib.projections.PolarAxes.set_rscale(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_rticks(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_theta_direction(self,direction)
matplotlib.projections.PolarAxes.set_theta_offset(self,offset)
matplotlib.projections.PolarAxes.set_theta_zero_location(self,loc,offset=0.0)
matplotlib.projections.PolarAxes.set_thetagrids(self,angles,labels=None,frac=None,fmt=None,**kwargs)
matplotlib.projections.PolarAxes.set_thetalim(self,*args,**kwargs)
matplotlib.projections.PolarAxes.set_thetamax(self,thetamax)
matplotlib.projections.PolarAxes.set_thetamin(self,thetamin)
matplotlib.projections.PolarAxes.set_xscale(self,scale,*args,**kwargs)
matplotlib.projections.PolarAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.PolarAxes.start_pan(self,x,y,button)
matplotlib.projections.polar.InvertedPolarTransform(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.InvertedPolarTransform.__init__(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.InvertedPolarTransform.__str__(self)
matplotlib.projections.polar.InvertedPolarTransform.inverted(self)
matplotlib.projections.polar.InvertedPolarTransform.transform_non_affine(self,xy)
matplotlib.projections.polar.PolarAffine(self,scale_transform,limits)
matplotlib.projections.polar.PolarAffine.__init__(self,scale_transform,limits)
matplotlib.projections.polar.PolarAffine.__str__(self)
matplotlib.projections.polar.PolarAffine.get_matrix(self)
matplotlib.projections.polar.PolarAxes(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.__init__(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes._gen_axes_patch(self)
matplotlib.projections.polar.PolarAxes._gen_axes_spines(self)
matplotlib.projections.polar.PolarAxes._init_axis(self)
matplotlib.projections.polar.PolarAxes._set_lim_and_transforms(self)
matplotlib.projections.polar.PolarAxes.can_pan(self)
matplotlib.projections.polar.PolarAxes.can_zoom(self)
matplotlib.projections.polar.PolarAxes.cla(self)
matplotlib.projections.polar.PolarAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.polar.PolarAxes.draw(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.end_pan(self)
matplotlib.projections.polar.PolarAxes.format_coord(self,theta,r)
matplotlib.projections.polar.PolarAxes.get_data_ratio(self)
matplotlib.projections.polar.PolarAxes.get_rlabel_position(self)
matplotlib.projections.polar.PolarAxes.get_rmax(self)
matplotlib.projections.polar.PolarAxes.get_rmin(self)
matplotlib.projections.polar.PolarAxes.get_rorigin(self)
matplotlib.projections.polar.PolarAxes.get_theta_direction(self)
matplotlib.projections.polar.PolarAxes.get_theta_offset(self)
matplotlib.projections.polar.PolarAxes.get_thetamax(self)
matplotlib.projections.polar.PolarAxes.get_thetamin(self)
matplotlib.projections.polar.PolarAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.polar.PolarAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.polar.PolarAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.polar.PolarAxes.set_rgrids(self,radii,labels=None,angle=None,fmt=None,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rlabel_position(self,value)
matplotlib.projections.polar.PolarAxes.set_rlim(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rmax(self,rmax)
matplotlib.projections.polar.PolarAxes.set_rmin(self,rmin)
matplotlib.projections.polar.PolarAxes.set_rorigin(self,rorigin)
matplotlib.projections.polar.PolarAxes.set_rscale(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_rticks(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_theta_direction(self,direction)
matplotlib.projections.polar.PolarAxes.set_theta_offset(self,offset)
matplotlib.projections.polar.PolarAxes.set_theta_zero_location(self,loc,offset=0.0)
matplotlib.projections.polar.PolarAxes.set_thetagrids(self,angles,labels=None,frac=None,fmt=None,**kwargs)
matplotlib.projections.polar.PolarAxes.set_thetalim(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_thetamax(self,thetamax)
matplotlib.projections.polar.PolarAxes.set_thetamin(self,thetamin)
matplotlib.projections.polar.PolarAxes.set_xscale(self,scale,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.polar.PolarAxes.start_pan(self,x,y,button)
matplotlib.projections.polar.PolarTransform(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.PolarTransform.__init__(self,axis=None,use_rmin=True,_apply_theta_transforms=True)
matplotlib.projections.polar.PolarTransform.__str__(self)
matplotlib.projections.polar.PolarTransform.inverted(self)
matplotlib.projections.polar.PolarTransform.transform_non_affine(self,tr)
matplotlib.projections.polar.PolarTransform.transform_path_non_affine(self,path)
matplotlib.projections.polar.RadialAxis(self,*args,**kwargs)
matplotlib.projections.polar.RadialAxis.__init__(self,*args,**kwargs)
matplotlib.projections.polar.RadialAxis._get_tick(self,major)
matplotlib.projections.polar.RadialAxis._set_scale(self,value,**kwargs)
matplotlib.projections.polar.RadialAxis._wrap_locator_formatter(self)
matplotlib.projections.polar.RadialAxis.cla(self)
matplotlib.projections.polar.RadialLocator(self,base,axes=None)
matplotlib.projections.polar.RadialLocator.__init__(self,base,axes=None)
matplotlib.projections.polar.RadialLocator.autoscale(self)
matplotlib.projections.polar.RadialLocator.pan(self,numsteps)
matplotlib.projections.polar.RadialLocator.refresh(self)
matplotlib.projections.polar.RadialLocator.view_limits(self,vmin,vmax)
matplotlib.projections.polar.RadialLocator.zoom(self,direction)
matplotlib.projections.polar.RadialTick(maxis.YTick)
matplotlib.projections.polar.RadialTick._determine_anchor(self,mode,angle,start)
matplotlib.projections.polar.RadialTick._get_text1(self)
matplotlib.projections.polar.RadialTick._get_text2(self)
matplotlib.projections.polar.RadialTick.update_position(self,loc)
matplotlib.projections.polar.ThetaAxis(maxis.XAxis)
matplotlib.projections.polar.ThetaAxis._copy_tick_props(self,src,dest)
matplotlib.projections.polar.ThetaAxis._get_tick(self,major)
matplotlib.projections.polar.ThetaAxis._set_scale(self,value,**kwargs)
matplotlib.projections.polar.ThetaAxis._wrap_locator_formatter(self)
matplotlib.projections.polar.ThetaAxis.cla(self)
matplotlib.projections.polar.ThetaFormatter(self,x,pos=None)
matplotlib.projections.polar.ThetaFormatter.__call__(self,x,pos=None)
matplotlib.projections.polar.ThetaLocator(self,base)
matplotlib.projections.polar.ThetaLocator.__init__(self,base)
matplotlib.projections.polar.ThetaLocator.autoscale(self)
matplotlib.projections.polar.ThetaLocator.pan(self,numsteps)
matplotlib.projections.polar.ThetaLocator.refresh(self)
matplotlib.projections.polar.ThetaLocator.set_axis(self,axis)
matplotlib.projections.polar.ThetaLocator.view_limits(self,vmin,vmax)
matplotlib.projections.polar.ThetaLocator.zoom(self,direction)
matplotlib.projections.polar.ThetaTick(self,axes,*args,**kwargs)
matplotlib.projections.polar.ThetaTick.__init__(self,axes,*args,**kwargs)
matplotlib.projections.polar.ThetaTick._apply_params(self,**kw)
matplotlib.projections.polar.ThetaTick._get_text1(self)
matplotlib.projections.polar.ThetaTick._get_text2(self)
matplotlib.projections.polar.ThetaTick._update_padding(self,pad,angle)
matplotlib.projections.polar.ThetaTick.update_position(self,loc)
matplotlib.projections.polar._AxisWrapper(self,axis)
matplotlib.projections.polar._AxisWrapper.__init__(self,axis)
matplotlib.projections.polar._AxisWrapper.get_data_interval(self)
matplotlib.projections.polar._AxisWrapper.get_minpos(self)
matplotlib.projections.polar._AxisWrapper.get_tick_space(self)
matplotlib.projections.polar._AxisWrapper.get_view_interval(self)
matplotlib.projections.polar._AxisWrapper.set_data_interval(self,vmin,vmax)
matplotlib.projections.polar._AxisWrapper.set_view_interval(self,vmin,vmax)
matplotlib.projections.polar._ThetaShift(self,axes,pad,mode)
matplotlib.projections.polar._ThetaShift.__init__(self,axes,pad,mode)
matplotlib.projections.polar._ThetaShift.__str__(self)
matplotlib.projections.polar._ThetaShift.get_matrix(self)
matplotlib.projections.polar._WedgeBbox(self,center,viewLim,originLim,**kwargs)
matplotlib.projections.polar._WedgeBbox.__init__(self,center,viewLim,originLim,**kwargs)
matplotlib.projections.polar._WedgeBbox.__str__(self)
matplotlib.projections.polar._WedgeBbox.get_points(self)
matplotlib.projections.polar._is_full_circle_deg(thetamin,thetamax)
matplotlib.projections.polar._is_full_circle_rad(thetamin,thetamax)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/projections/geo.py----------------------------------------
A:matplotlib.projections.geo.self.xaxis->matplotlib.axis.XAxis(self)
A:matplotlib.projections.geo.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.projections.geo.self.transProjection->self._get_core_transform(self.RESOLUTION)
A:matplotlib.projections.geo.self.transAffine->self._get_affine_transform()
A:matplotlib.projections.geo.self.transAxes->BboxTransformTo(self.bbox)
A:matplotlib.projections.geo.self._xaxis_pretransform->Affine2D().scale(1, self._longitude_cap * 2).translate(0, -self._longitude_cap)
A:matplotlib.projections.geo.yaxis_stretch->Affine2D().scale(np.pi * 2, 1).translate(-np.pi, 0)
A:matplotlib.projections.geo.yaxis_space->Affine2D().scale(1, 1.1)
A:matplotlib.projections.geo.transform->self._get_core_transform(1)
A:matplotlib.projections.geo.(xscale, _)->self._get_core_transform(1).transform_point((np.pi, 0))
A:matplotlib.projections.geo.(_, yscale)->self._get_core_transform(1).transform_point((0, np.pi / 2))
A:matplotlib.projections.geo.(lon, lat)->numpy.rad2deg([lon, lat])
A:matplotlib.projections.geo.grid->numpy.arange(-90 + degrees, 90, degrees)
A:matplotlib.projections.geo.self._longitude_cap->numpy.deg2rad(degrees)
A:matplotlib.projections.geo.ipath->path.interpolated(self._resolution)
A:matplotlib.projections.geo.cos_latitude->numpy.cos(latitude)
A:matplotlib.projections.geo.alpha->numpy.sqrt(1.0 + cos_latitude * np.cos(half_long))
A:matplotlib.projections.geo.xy->numpy.empty(ll.shape, dtype=float)
A:matplotlib.projections.geo.sqrt2->numpy.sqrt(2.0)
A:matplotlib.projections.geo.z->numpy.sqrt(1 - (x / 4) ** 2 - (y / 2) ** 2)
A:matplotlib.projections.geo.latitude->numpy.arcsin(y * z)
A:matplotlib.projections.geo.aux->numpy.empty(latitude.shape, dtype=float)
A:matplotlib.projections.geo.(delta, large_delta)->d(theta)
A:matplotlib.projections.geo.theta->numpy.arcsin(y / np.sqrt(2))
A:matplotlib.projections.geo.lat->numpy.arcsin(cos_c * np.sin(clat) + y * sin_c * np.cos(clat) / p)
A:matplotlib.projections.geo.cos_lat->numpy.cos(latitude)
A:matplotlib.projections.geo.sin_lat->numpy.sin(latitude)
A:matplotlib.projections.geo.cos_diff_long->numpy.cos(diff_long)
A:matplotlib.projections.geo.inner_k->numpy.where(inner_k == 0.0, 1e-15, inner_k)
A:matplotlib.projections.geo.k->numpy.sqrt(2.0 / inner_k)
A:matplotlib.projections.geo.p->numpy.where(p == 0.0, 1e-09, p)
A:matplotlib.projections.geo.sin_c->numpy.sin(c)
A:matplotlib.projections.geo.cos_c->numpy.cos(c)
A:matplotlib.projections.geo.self._center_longitude->kwargs.pop('center_longitude', 0.0)
A:matplotlib.projections.geo.self._center_latitude->kwargs.pop('center_latitude', 0.0)
matplotlib.projections.AitoffAxes(self,*args,**kwargs)
matplotlib.projections.AitoffAxes.AitoffTransform(_GeoTransform)
matplotlib.projections.AitoffAxes.AitoffTransform.inverted(self)
matplotlib.projections.AitoffAxes.AitoffTransform.transform_non_affine(self,ll)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform(_GeoTransform)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform.inverted(self)
matplotlib.projections.AitoffAxes.InvertedAitoffTransform.transform_non_affine(self,xy)
matplotlib.projections.AitoffAxes._get_core_transform(self,resolution)
matplotlib.projections.HammerAxes(self,*args,**kwargs)
matplotlib.projections.HammerAxes.HammerTransform(_GeoTransform)
matplotlib.projections.HammerAxes.HammerTransform.inverted(self)
matplotlib.projections.HammerAxes.HammerTransform.transform_non_affine(self,ll)
matplotlib.projections.HammerAxes.InvertedHammerTransform(_GeoTransform)
matplotlib.projections.HammerAxes.InvertedHammerTransform.inverted(self)
matplotlib.projections.HammerAxes.InvertedHammerTransform.transform_non_affine(self,xy)
matplotlib.projections.HammerAxes._get_core_transform(self,resolution)
matplotlib.projections.LambertAxes(self,*args,**kwargs)
matplotlib.projections.LambertAxes.InvertedLambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.LambertAxes.InvertedLambertTransform.inverted(self)
matplotlib.projections.LambertAxes.InvertedLambertTransform.transform_non_affine(self,xy)
matplotlib.projections.LambertAxes.LambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.LambertAxes.LambertTransform.inverted(self)
matplotlib.projections.LambertAxes.LambertTransform.transform_non_affine(self,ll)
matplotlib.projections.LambertAxes._get_affine_transform(self)
matplotlib.projections.LambertAxes._get_core_transform(self,resolution)
matplotlib.projections.LambertAxes.cla(self)
matplotlib.projections.MollweideAxes(self,*args,**kwargs)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform(_GeoTransform)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform.inverted(self)
matplotlib.projections.MollweideAxes.InvertedMollweideTransform.transform_non_affine(self,xy)
matplotlib.projections.MollweideAxes.MollweideTransform(_GeoTransform)
matplotlib.projections.MollweideAxes.MollweideTransform.inverted(self)
matplotlib.projections.MollweideAxes.MollweideTransform.transform_non_affine(self,ll)
matplotlib.projections.MollweideAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.AitoffAxes(self,*args,**kwargs)
matplotlib.projections.geo.AitoffAxes.AitoffTransform(_GeoTransform)
matplotlib.projections.geo.AitoffAxes.AitoffTransform.inverted(self)
matplotlib.projections.geo.AitoffAxes.AitoffTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform(_GeoTransform)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.inverted(self)
matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.AitoffAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.AitoffAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.GeoAxes(Axes)
matplotlib.projections.geo.GeoAxes.ThetaFormatter(self,round_to=1.0)
matplotlib.projections.geo.GeoAxes.ThetaFormatter.__init__(self,round_to=1.0)
matplotlib.projections.geo.GeoAxes._gen_axes_patch(self)
matplotlib.projections.geo.GeoAxes._gen_axes_spines(self)
matplotlib.projections.geo.GeoAxes._get_affine_transform(self)
matplotlib.projections.geo.GeoAxes._init_axis(self)
matplotlib.projections.geo.GeoAxes._set_lim_and_transforms(self)
matplotlib.projections.geo.GeoAxes.can_pan(self)
matplotlib.projections.geo.GeoAxes.can_zoom(self)
matplotlib.projections.geo.GeoAxes.cla(self)
matplotlib.projections.geo.GeoAxes.drag_pan(self,button,key,x,y)
matplotlib.projections.geo.GeoAxes.end_pan(self)
matplotlib.projections.geo.GeoAxes.format_coord(self,lon,lat)
matplotlib.projections.geo.GeoAxes.get_data_ratio(self)
matplotlib.projections.geo.GeoAxes.get_xaxis_text1_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_xaxis_text2_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_xaxis_transform(self,which='grid')
matplotlib.projections.geo.GeoAxes.get_yaxis_text1_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_yaxis_text2_transform(self,pad)
matplotlib.projections.geo.GeoAxes.get_yaxis_transform(self,which='grid')
matplotlib.projections.geo.GeoAxes.set_latitude_grid(self,degrees)
matplotlib.projections.geo.GeoAxes.set_longitude_grid(self,degrees)
matplotlib.projections.geo.GeoAxes.set_longitude_grid_ends(self,degrees)
matplotlib.projections.geo.GeoAxes.set_xlim(self,*args,**kwargs)
matplotlib.projections.geo.GeoAxes.set_yscale(self,*args,**kwargs)
matplotlib.projections.geo.GeoAxes.start_pan(self,x,y,button)
matplotlib.projections.geo.HammerAxes(self,*args,**kwargs)
matplotlib.projections.geo.HammerAxes.HammerTransform(_GeoTransform)
matplotlib.projections.geo.HammerAxes.HammerTransform.inverted(self)
matplotlib.projections.geo.HammerAxes.HammerTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform(_GeoTransform)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.inverted(self)
matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.HammerAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.HammerAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.LambertAxes(self,*args,**kwargs)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.__init__(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.inverted(self)
matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.LambertAxes.LambertTransform(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.LambertTransform.__init__(self,center_longitude,center_latitude,resolution)
matplotlib.projections.geo.LambertAxes.LambertTransform.inverted(self)
matplotlib.projections.geo.LambertAxes.LambertTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.LambertAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.LambertAxes._get_affine_transform(self)
matplotlib.projections.geo.LambertAxes._get_core_transform(self,resolution)
matplotlib.projections.geo.LambertAxes.cla(self)
matplotlib.projections.geo.MollweideAxes(self,*args,**kwargs)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform(_GeoTransform)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.inverted(self)
matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.transform_non_affine(self,xy)
matplotlib.projections.geo.MollweideAxes.MollweideTransform(_GeoTransform)
matplotlib.projections.geo.MollweideAxes.MollweideTransform.inverted(self)
matplotlib.projections.geo.MollweideAxes.MollweideTransform.transform_non_affine(self,ll)
matplotlib.projections.geo.MollweideAxes.__init__(self,*args,**kwargs)
matplotlib.projections.geo.MollweideAxes._get_core_transform(self,resolution)
matplotlib.projections.geo._GeoTransform(self,resolution)
matplotlib.projections.geo._GeoTransform.__init__(self,resolution)
matplotlib.projections.geo._GeoTransform.__str__(self)
matplotlib.projections.geo._GeoTransform.transform_path_non_affine(self,path)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/projections/__init__.py----------------------------------------
A:matplotlib.projections.__init__.projection_registry->ProjectionRegistry()
A:matplotlib.projections.__init__.ispolar->kwargs.pop('polar', False)
A:matplotlib.projections.__init__.projection->kwargs.pop('projection', None)
A:matplotlib.projections.__init__.projection_class->get_projection_class(projection)
A:matplotlib.projections.__init__.(projection_class, extra_kwargs)->kwargs.pop('projection', None)._as_mpl_axes()
A:matplotlib.projections.__init__.key->figure._make_key(*args, **kwargs)
matplotlib.projections.__init__.ProjectionRegistry(self)
matplotlib.projections.__init__.ProjectionRegistry.__init__(self)
matplotlib.projections.__init__.ProjectionRegistry.get_projection_class(self,name)
matplotlib.projections.__init__.ProjectionRegistry.get_projection_names(self)
matplotlib.projections.__init__.ProjectionRegistry.register(self,*projections)
matplotlib.projections.__init__.get_projection_class(projection=None)
matplotlib.projections.__init__.get_projection_names()
matplotlib.projections.__init__.process_projection_requirements(figure,*args,**kwargs)
matplotlib.projections.__init__.register_projection(cls)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/cbook/deprecation.py----------------------------------------
A:matplotlib.cbook.deprecation.message->message.strip().strip()
A:matplotlib.cbook.deprecation.wrapper->functools.wraps(func)(wrapper)
A:matplotlib.cbook.deprecation.old_doc->textwrap.dedent(old_doc or '').strip('\n')
matplotlib.cbook.MatplotlibDeprecationWarning(UserWarning)
matplotlib.cbook.deprecated(since,message='',name='',alternative='',pending=False,obj_type=None,addendum='')
matplotlib.cbook.deprecation.MatplotlibDeprecationWarning(UserWarning)
matplotlib.cbook.deprecation._generate_deprecation_message(since,message='',name='',alternative='',pending=False,obj_type='attribute',addendum='')
matplotlib.cbook.deprecation.deprecated(since,message='',name='',alternative='',pending=False,obj_type=None,addendum='')
matplotlib.cbook.deprecation.warn_deprecated(since,message='',name='',alternative='',pending=False,obj_type='attribute',addendum='')
matplotlib.cbook.warn_deprecated(since,message='',name='',alternative='',pending=False,obj_type='attribute',addendum='')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/cbook/_backports.py----------------------------------------
A:matplotlib.cbook._backports.path->path.split(os.pathsep).split(os.pathsep)
A:matplotlib.cbook._backports.pathext->os.environ.get('PATHEXT', '').split(os.pathsep)
A:matplotlib.cbook._backports.seen->set()
A:matplotlib.cbook._backports.normdir->os.path.normcase(dir)
A:matplotlib.cbook._backports.name->os.path.join(dir, thefile)
A:matplotlib.cbook._backports.new_array->new_array.view(type=type(original_array)).view(type=type(original_array))
A:matplotlib.cbook._backports.array->numpy.array(array, copy=False, subok=subok)
A:matplotlib.cbook._backports.result->_maybe_view_as_subclass(array, broadcast)
matplotlib._backports._broadcast_to(array,shape,subok,readonly)
matplotlib._backports._maybe_view_as_subclass(original_array,new_array)
matplotlib._backports.broadcast_to(array,shape,subok=False)
matplotlib._backports.which(cmd,mode=os.F_OK|os.X_OK,path=None)
matplotlib.cbook._backports._broadcast_to(array,shape,subok,readonly)
matplotlib.cbook._backports._maybe_view_as_subclass(original_array,new_array)
matplotlib.cbook._backports.broadcast_to(array,shape,subok=False)
matplotlib.cbook._backports.which(cmd,mode=os.F_OK|os.X_OK,path=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/cbook/__init__.py----------------------------------------
A:matplotlib.cbook.__init__.preferredencoding->locale.getpreferredencoding(matplotlib.rcParams['axes.formatter.use_locale']).strip()
A:matplotlib.cbook.__init__.tup->time.strptime(s, self.fmt)
A:matplotlib.cbook.__init__.self._hash->hash(cb)
A:matplotlib.cbook.__init__.self.inst->ref(inst)
A:matplotlib.cbook.__init__.d->self.__dict__.copy()
A:matplotlib.cbook.__init__.d['inst']->inst()
A:matplotlib.cbook.__init__.mtd->types.MethodType(self.func, self.inst())
A:matplotlib.cbook.__init__.self.callbacks->dict()
A:matplotlib.cbook.__init__.proxy->_BoundMethodProxy(func)
A:matplotlib.cbook.__init__.kwarg_val->kwargs.pop(key, None)
A:matplotlib.cbook.__init__.s->six.text_type(s)
A:matplotlib.cbook.__init__.flag->flag.replace('U', '').replace('U', '')
A:matplotlib.cbook.__init__.fh->io.open(fname, flag, encoding=encoding)
A:matplotlib.cbook.__init__.(fh, opened)->to_filehandle(path_or_file, mode, True, encoding)
A:matplotlib.cbook.__init__.root->os.path.join(matplotlib._get_data_path(), 'sample_data')
A:matplotlib.cbook.__init__.path->os.path.join(root, fname)
A:matplotlib.cbook.__init__.(base, ext)->os.path.splitext(fname)
A:matplotlib.cbook.__init__.result->re.compile('\n\r? {0,%d}' % nshift).sub('\n', s).strip()
A:matplotlib.cbook.__init__.sndx->sndx.replace('0', '').replace('0', '')
A:matplotlib.cbook.__init__.realpath->os.path.realpath(path)
A:matplotlib.cbook.__init__.stat->os.stat(realpath)
A:matplotlib.cbook.__init__.get_realpath_and_stat->GetRealpathAndStat()
A:matplotlib.cbook.__init__.seq->text.split(' ')
A:matplotlib.cbook.__init__.Nseq->len(seq)
A:matplotlib.cbook.__init__._find_dedent_regex->re.compile('(?:(?:\\n\\r?)|^)( *)\\S')
A:matplotlib.cbook.__init__.match->match.lower().lower()
A:matplotlib.cbook.__init__.unindent->re.compile('\n\r? {0,%d}' % nshift)
A:matplotlib.cbook.__init__.pattern_list->patterns.split(';')
A:matplotlib.cbook.__init__.fullname->os.path.normpath(os.path.join(dirname, name))
A:matplotlib.cbook.__init__.newfiles->listFiles(arg, recurse=1, return_folders=1)
A:matplotlib.cbook.__init__.sh->io.BytesIO()
A:matplotlib.cbook.__init__.n->len(self._elements)
A:matplotlib.cbook.__init__.pid->os.getpid()
A:matplotlib.cbook.__init__.a2->Popen([str('tasklist'), '/nh', '/fi', 'pid eq %d' % pid], stdout=PIPE).stdout.read()
A:matplotlib.cbook.__init__.mem->int(a2.strip().split()[-2].replace(',', ''))
A:matplotlib.cbook.__init__.Nx->len(args[0])
A:matplotlib.cbook.__init__.x->numpy.asanyarray(x)
A:matplotlib.cbook.__init__.xm->numpy.ma.masked_invalid(x, copy=False)
A:matplotlib.cbook.__init__.referents->gc.get_referents(obj)
A:matplotlib.cbook.__init__.val->mapping.pop(key)
A:matplotlib.cbook.__init__.set_a->mapping.setdefault(ref(a), [ref(a)])
A:matplotlib.cbook.__init__.set_b->mapping.get(ref(arg))
A:matplotlib.cbook.__init__.seta->mapping.pop(ref(a), None)
A:matplotlib.cbook.__init__.token->object()
A:matplotlib.cbook.__init__.siblings->self._mapping.get(ref(a), [ref(a)])
A:matplotlib.cbook.__init__.fps->a.reshape((len(a), -1))
A:matplotlib.cbook.__init__.nrecs->len(args[0])
A:matplotlib.cbook.__init__.mask->numpy.asarray(mask, dtype=bool)
A:matplotlib.cbook.__init__.margs[i]->numpy.asanyarray(x).filled()
A:matplotlib.cbook.__init__.M->len(data)
A:matplotlib.cbook.__init__.bs_index->numpy.random.randint(M, size=(N, M))
A:matplotlib.cbook.__init__.estimate->numpy.median(bsData, axis=1, overwrite_input=True)
A:matplotlib.cbook.__init__.CI->_bootstrap_median(data, N=bootstrap)
A:matplotlib.cbook.__init__.N->len(data)
A:matplotlib.cbook.__init__.X->_reshape_2D(X, 'X')
A:matplotlib.cbook.__init__.ncols->len(X)
A:matplotlib.cbook.__init__.labels->repeat(None)
A:matplotlib.cbook.__init__.stats['fliers']->numpy.hstack([np.compress(x < stats['whislo'], x), np.compress(x > stats['whishi'], x)])
A:matplotlib.cbook.__init__.stats['mean']->numpy.mean(x)
A:matplotlib.cbook.__init__.(q1, med, q3)->numpy.percentile(x, [25, 50, 75])
A:matplotlib.cbook.__init__.(stats['cilo'], stats['cihi'])->_compute_conf_interval(x, med, stats['iqr'], bootstrap)
A:matplotlib.cbook.__init__.loval->numpy.percentile(x, whis[0])
A:matplotlib.cbook.__init__.hival->numpy.percentile(x, whis[1])
A:matplotlib.cbook.__init__.wiskhi->numpy.compress(x <= hival, x)
A:matplotlib.cbook.__init__.stats['whishi']->numpy.max(wiskhi)
A:matplotlib.cbook.__init__.wisklo->numpy.compress(x >= loval, x)
A:matplotlib.cbook.__init__.stats['whislo']->numpy.min(wisklo)
A:matplotlib.cbook.__init__.m->numpy.concatenate(((1,), mask, (1,)))
A:matplotlib.cbook.__init__.indices->numpy.arange(len(mask) + 1)
A:matplotlib.cbook.__init__.i0->numpy.compress(mdif == -1, indices)
A:matplotlib.cbook.__init__.i1->numpy.compress(mdif == 1, indices)
A:matplotlib.cbook.__init__.breakpoints->numpy.cumsum(seglengths)
A:matplotlib.cbook.__init__.ic0->numpy.concatenate(((0,), breakpoints[:-1]))
A:matplotlib.cbook.__init__.self.value->next(self.it)
A:matplotlib.cbook.__init__.self.key->func(self.value)
A:matplotlib.cbook.__init__.minkey->min(minvals)
A:matplotlib.cbook.__init__.(idx,)->numpy.nonzero(mask[:-1] != mask[1:])
A:matplotlib.cbook.__init__.idx->idx.tolist().tolist()
A:matplotlib.cbook.__init__.min_val->numpy.min(x)
A:matplotlib.cbook.__init__.max_val->numpy.max(x)
A:matplotlib.cbook.__init__.coords->numpy.linspace(min_val, max_val, points)
A:matplotlib.cbook.__init__.stats['vals']->method(x, coords)
A:matplotlib.cbook.__init__.stats['median']->numpy.median(x)
A:matplotlib.cbook.__init__.nested_class->getattr(containing_class, class_name)
A:matplotlib.cbook.__init__.nested_instance->_NestedClassGetter()
A:matplotlib.cbook.__init__.steps->numpy.zeros((1 + len(args), 2 * len(x)))
A:matplotlib.cbook.__init__.y->_check_1d(y)
A:matplotlib.cbook.__init__.alias_mapping->dict()
A:matplotlib.cbook.__init__.kw->dict(kw)
A:matplotlib.cbook.__init__.ret->dict()
A:matplotlib.cbook.__init__.self.lock_path->os.path.join(self.path, self.LOCKFN + self.end)
A:matplotlib.cbook.__init__.self.pattern->os.path.join(self.path, self.LOCKFN + '-*')
A:matplotlib.cbook.__init__.files->glob.glob(self.pattern)
A:matplotlib.cbook.__init__.err_str->_lockstr.format(self.pattern)
A:matplotlib.cbook.__init__._funcs['linear']->_FuncInfo(lambda x: x, lambda x: x, True)
A:matplotlib.cbook.__init__._funcs['quadratic']->_FuncInfo(np.square, np.sqrt, True)
A:matplotlib.cbook.__init__._funcs['cubic']->_FuncInfo(lambda x: x ** 3, lambda x: x ** (1.0 / 3), True)
A:matplotlib.cbook.__init__._funcs['sqrt']->_FuncInfo(np.sqrt, np.square, True)
A:matplotlib.cbook.__init__._funcs['cbrt']->_FuncInfo(lambda x: x ** (1.0 / 3), lambda x: x ** 3, True)
A:matplotlib.cbook.__init__._funcs['log10']->_FuncInfo(np.log10, lambda x: 10 ** x, False)
A:matplotlib.cbook.__init__._funcs['log']->_FuncInfo(np.log, np.exp, False)
A:matplotlib.cbook.__init__._funcs['log2']->_FuncInfo(np.log2, lambda x: 2 ** x, False)
A:matplotlib.cbook.__init__._funcs['x**{p}']->_FuncInfo(lambda x, p: x ** p[0], lambda x, p: x ** (1.0 / p[0]), True)
A:matplotlib.cbook.__init__._funcs['root{p}(x)']->_FuncInfo(lambda x, p: x ** (1.0 / p[0]), lambda x, p: x ** p, True)
A:matplotlib.cbook.__init__._funcs['log{p}(x)']->_FuncInfo(lambda x, p: np.log(x) / np.log(p[0]), lambda x, p: p[0] ** x, False, lambda p: p[0] > 0)
A:matplotlib.cbook.__init__._funcs['log10(x+{p})']->_FuncInfo(lambda x, p: np.log10(x + p[0]), lambda x, p: 10 ** x - p[0], lambda p: p[0] > 0)
A:matplotlib.cbook.__init__._funcs['log(x+{p})']->_FuncInfo(lambda x, p: np.log(x + p[0]), lambda x, p: np.exp(x) - p[0], lambda p: p[0] > 0)
A:matplotlib.cbook.__init__._funcs['log{p}(x+{p})']->_FuncInfo(lambda x, p: np.log(x + p[1]) / np.log(p[0]), lambda x, p: p[0] ** x - p[1], lambda p: p[1] > 0, lambda p: p[0] > 0)
A:matplotlib.cbook.__init__.self._str_func->six.text_type(str_func)
A:matplotlib.cbook.__init__.(self._key, self._params)->self._get_key_params()
A:matplotlib.cbook.__init__.self._func->self._parse_func()
A:matplotlib.cbook.__init__.func->_FuncInfo(function, inverse, is_bounded_0_1)
A:matplotlib.cbook.__init__.is_bounded_0_1->_FuncInfo(function, inverse, is_bounded_0_1).is_bounded_0_1(self._params)
A:matplotlib.cbook.__init__.params->re.findall(regex, str_func)
A:matplotlib.cbook.__init__.params[i]->float(param)
A:matplotlib.cbook.__init__.str_func->re.sub(regex, '{p}', str_func)
matplotlib.cbook.__init__.Bunch(self,**kwds)
matplotlib.cbook.__init__.Bunch.__init__(self,**kwds)
matplotlib.cbook.__init__.Bunch.__repr__(self)
matplotlib.cbook.__init__.CallbackRegistry(self,exception_handler=_exception_printer)
matplotlib.cbook.__init__.CallbackRegistry.__getstate__(self)
matplotlib.cbook.__init__.CallbackRegistry.__init__(self,exception_handler=_exception_printer)
matplotlib.cbook.__init__.CallbackRegistry.__setstate__(self,state)
matplotlib.cbook.__init__.CallbackRegistry._remove_proxy(self,proxy)
matplotlib.cbook.__init__.CallbackRegistry.connect(self,s,func)
matplotlib.cbook.__init__.CallbackRegistry.disconnect(self,cid)
matplotlib.cbook.__init__.CallbackRegistry.process(self,s,*args,**kwargs)
matplotlib.cbook.__init__.GetRealpathAndStat(self)
matplotlib.cbook.__init__.GetRealpathAndStat.__init__(self)
matplotlib.cbook.__init__.Grouper(self,init=())
matplotlib.cbook.__init__.Grouper.__contains__(self,item)
matplotlib.cbook.__init__.Grouper.__init__(self,init=())
matplotlib.cbook.__init__.Grouper.__iter__(self)
matplotlib.cbook.__init__.Grouper.clean(self)
matplotlib.cbook.__init__.Grouper.get_siblings(self,a)
matplotlib.cbook.__init__.Grouper.join(self,a,*args)
matplotlib.cbook.__init__.Grouper.joined(self,a,b)
matplotlib.cbook.__init__.Grouper.remove(self,a)
matplotlib.cbook.__init__.IgnoredKeywordWarning(UserWarning)
matplotlib.cbook.__init__.Locked(self,path)
matplotlib.cbook.__init__.Locked.TimeoutError(RuntimeError)
matplotlib.cbook.__init__.Locked.__enter__(self)
matplotlib.cbook.__init__.Locked.__exit__(self,exc_type,exc_value,traceback)
matplotlib.cbook.__init__.Locked.__init__(self,path)
matplotlib.cbook.__init__.Null(self,*args,**kwargs)
matplotlib.cbook.__init__.Null.__delattr__(self,name)
matplotlib.cbook.__init__.Null.__getattr__(self,name)
matplotlib.cbook.__init__.Null.__init__(self,*args,**kwargs)
matplotlib.cbook.__init__.Null.__repr__(self)
matplotlib.cbook.__init__.Null.__setattr__(self,name,value)
matplotlib.cbook.__init__.Null.__str__(self)
matplotlib.cbook.__init__.RingBuffer(self,size_max)
matplotlib.cbook.__init__.RingBuffer.__Full
matplotlib.cbook.__init__.RingBuffer.__Full.append(self,x)
matplotlib.cbook.__init__.RingBuffer.__Full.get(self)
matplotlib.cbook.__init__.RingBuffer.__get_item__(self,i)
matplotlib.cbook.__init__.RingBuffer.__init__(self,size_max)
matplotlib.cbook.__init__.RingBuffer.append(self,x)
matplotlib.cbook.__init__.RingBuffer.get(self)
matplotlib.cbook.__init__.Sorter(object)
matplotlib.cbook.__init__.Sorter._helper(self,data,aux,inplace)
matplotlib.cbook.__init__.Sorter.byAttribute(self,data,attributename,inplace=1)
matplotlib.cbook.__init__.Sorter.byItem(self,data,itemindex=None,inplace=1)
matplotlib.cbook.__init__.Stack(self,default=None)
matplotlib.cbook.__init__.Stack.__getitem__(self,ind)
matplotlib.cbook.__init__.Stack.__init__(self,default=None)
matplotlib.cbook.__init__.Stack.__len__(self)
matplotlib.cbook.__init__.Stack.back(self)
matplotlib.cbook.__init__.Stack.bubble(self,o)
matplotlib.cbook.__init__.Stack.clear(self)
matplotlib.cbook.__init__.Stack.empty(self)
matplotlib.cbook.__init__.Stack.forward(self)
matplotlib.cbook.__init__.Stack.home(self)
matplotlib.cbook.__init__.Stack.push(self,o)
matplotlib.cbook.__init__.Stack.remove(self,o)
matplotlib.cbook.__init__.Xlator(self,match)
matplotlib.cbook.__init__.Xlator.__call__(self,match)
matplotlib.cbook.__init__.Xlator._make_regex(self)
matplotlib.cbook.__init__.Xlator.xlat(self,text)
matplotlib.cbook.__init__._BoundMethodProxy(self,cb)
matplotlib.cbook.__init__._BoundMethodProxy.__eq__(self,other)
matplotlib.cbook.__init__._BoundMethodProxy.__getstate__(self)
matplotlib.cbook.__init__._BoundMethodProxy.__hash__(self)
matplotlib.cbook.__init__._BoundMethodProxy.__init__(self,cb)
matplotlib.cbook.__init__._BoundMethodProxy.__ne__(self,other)
matplotlib.cbook.__init__._BoundMethodProxy.__setstate__(self,statedict)
matplotlib.cbook.__init__._BoundMethodProxy._destroy(self,wk)
matplotlib.cbook.__init__._BoundMethodProxy.add_destroy_callback(self,callback)
matplotlib.cbook.__init__._FuncInfo(self,function,inverse,bounded_0_1=True,check_params=None)
matplotlib.cbook.__init__._FuncInfo.__init__(self,function,inverse,bounded_0_1=True,check_params=None)
matplotlib.cbook.__init__._FuncInfo.check_params(self,params=None)
matplotlib.cbook.__init__._FuncInfo.is_bounded_0_1(self,params=None)
matplotlib.cbook.__init__._InstanceMethodPickler(self,instancemethod)
matplotlib.cbook.__init__._InstanceMethodPickler.__init__(self,instancemethod)
matplotlib.cbook.__init__._InstanceMethodPickler.get_instancemethod(self)
matplotlib.cbook.__init__._NestedClassGetter(self,containing_class,class_name)
matplotlib.cbook.__init__._NestedClassGetter.__call__(self,containing_class,class_name)
matplotlib.cbook.__init__._StringFuncParser(self,str_func)
matplotlib.cbook.__init__._StringFuncParser.__init__(self,str_func)
matplotlib.cbook.__init__._StringFuncParser._get_key_params(self)
matplotlib.cbook.__init__._StringFuncParser._parse_func(self)
matplotlib.cbook.__init__._StringFuncParser.func_info(self)
matplotlib.cbook.__init__._StringFuncParser.function(self)
matplotlib.cbook.__init__._StringFuncParser.inverse(self)
matplotlib.cbook.__init__._StringFuncParser.is_bounded_0_1(self)
matplotlib.cbook.__init__._check_1d(x)
matplotlib.cbook.__init__._exception_printer(exc)
matplotlib.cbook.__init__._reshape_2D(X,name)
matplotlib.cbook.__init__._str_equal(obj,s)
matplotlib.cbook.__init__._str_lower_equal(obj,s)
matplotlib.cbook.__init__._string_to_bool(s)
matplotlib.cbook.__init__._to_unmasked_float_array(x)
matplotlib.cbook.__init__._topmost_artist(artists,_cached_max=functools.partial(max,key=operator.attrgetter('zorder')))
matplotlib.cbook.__init__.align_iterators(func,*iterables)
matplotlib.cbook.__init__.allequal(seq)
matplotlib.cbook.__init__.allpairs(x)
matplotlib.cbook.__init__.alltrue(seq)
matplotlib.cbook.__init__.boxplot_stats(X,whis=1.5,bootstrap=None,labels=None,autorange=False)
matplotlib.cbook.__init__.contiguous_regions(mask)
matplotlib.cbook.__init__.converter(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.converter.__init__(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.converter.is_missing(self,s)
matplotlib.cbook.__init__.dedent(s)
matplotlib.cbook.__init__.delete_masked_points(*args)
matplotlib.cbook.__init__.dict_delall(d,keys)
matplotlib.cbook.__init__.exception_to_str(s=None)
matplotlib.cbook.__init__.file_requires_unicode(x)
matplotlib.cbook.__init__.finddir(o,match,case=False)
matplotlib.cbook.__init__.flatten(seq,scalarp=is_scalar_or_string)
matplotlib.cbook.__init__.get_label(y,default_name)
matplotlib.cbook.__init__.get_recursive_filelist(args)
matplotlib.cbook.__init__.get_sample_data(fname,asfileobj=True)
matplotlib.cbook.__init__.get_split_ind(seq,N)
matplotlib.cbook.__init__.index_of(y)
matplotlib.cbook.__init__.is_hashable(obj)
matplotlib.cbook.__init__.is_math_text(s)
matplotlib.cbook.__init__.is_numlike(obj)
matplotlib.cbook.__init__.is_scalar(obj)
matplotlib.cbook.__init__.is_scalar_or_string(val)
matplotlib.cbook.__init__.is_sequence_of_strings(obj)
matplotlib.cbook.__init__.is_string_like(obj)
matplotlib.cbook.__init__.is_writable_file_like(obj)
matplotlib.cbook.__init__.issubclass_safe(x,klass)
matplotlib.cbook.__init__.iterable(obj)
matplotlib.cbook.__init__.listFiles(root,patterns='*',recurse=1,return_folders=0)
matplotlib.cbook.__init__.local_over_kwdict(local_var,kwargs,*keys)
matplotlib.cbook.__init__.maxdict(self,maxsize)
matplotlib.cbook.__init__.maxdict.__init__(self,maxsize)
matplotlib.cbook.__init__.maxdict.__setitem__(self,k,v)
matplotlib.cbook.__init__.mkdirs(newdir,mode=511)
matplotlib.cbook.__init__.normalize_kwargs(kw,alias_mapping=None,required=(),forbidden=(),allowed=None)
matplotlib.cbook.__init__.onetrue(seq)
matplotlib.cbook.__init__.open_file_cm(path_or_file,mode='r',encoding=None)
matplotlib.cbook.__init__.pieces(seq,num=2)
matplotlib.cbook.__init__.print_cycles(objects,outstream=sys.stdout,show_progress=False)
matplotlib.cbook.__init__.pts_to_midstep(x,*args)
matplotlib.cbook.__init__.pts_to_poststep(x,*args)
matplotlib.cbook.__init__.pts_to_prestep(x,*args)
matplotlib.cbook.__init__.recursive_remove(path)
matplotlib.cbook.__init__.report_memory(i=0)
matplotlib.cbook.__init__.restrict_dict(d,keys)
matplotlib.cbook.__init__.reverse_dict(d)
matplotlib.cbook.__init__.safe_first_element(obj)
matplotlib.cbook.__init__.safe_masked_invalid(x,copy=False)
matplotlib.cbook.__init__.safezip(*args)
matplotlib.cbook.__init__.sanitize_sequence(data)
matplotlib.cbook.__init__.silent_list(self,type,seq=None)
matplotlib.cbook.__init__.silent_list.__getstate__(self)
matplotlib.cbook.__init__.silent_list.__init__(self,type,seq=None)
matplotlib.cbook.__init__.silent_list.__repr__(self)
matplotlib.cbook.__init__.silent_list.__setstate__(self,state)
matplotlib.cbook.__init__.silent_list.__str__(self)
matplotlib.cbook.__init__.simple_linear_interpolation(a,steps)
matplotlib.cbook.__init__.soundex(name,len=4)
matplotlib.cbook.__init__.strip_math(s)
matplotlib.cbook.__init__.to_filehandle(fname,flag='rU',return_opened=False,encoding=None)
matplotlib.cbook.__init__.todate(self,fmt='%Y-%m-%d',missing='Null',missingval=None)
matplotlib.cbook.__init__.todate.__init__(self,fmt='%Y-%m-%d',missing='Null',missingval=None)
matplotlib.cbook.__init__.todatetime(self,fmt='%Y-%m-%d',missing='Null',missingval=None)
matplotlib.cbook.__init__.todatetime.__init__(self,fmt='%Y-%m-%d',missing='Null',missingval=None)
matplotlib.cbook.__init__.tofloat(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.tofloat.__init__(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.toint(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.toint.__init__(self,missing='Null',missingval=None)
matplotlib.cbook.__init__.tostr(self,missing='Null',missingval='')
matplotlib.cbook.__init__.tostr.__init__(self,missing='Null',missingval='')
matplotlib.cbook.__init__.unicode_safe(s)
matplotlib.cbook.__init__.unique(x)
matplotlib.cbook.__init__.unmasked_index_ranges(mask,compressed=True)
matplotlib.cbook.__init__.violin_stats(X,method,points=100)
matplotlib.cbook.__init__.wrap(prefix,text,cols)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/determinism.py----------------------------------------
A:matplotlib.testing.determinism.sde->os.environ.pop('SOURCE_DATE_EPOCH', None)
A:matplotlib.testing.determinism.fig->matplotlib.pyplot.figure()
A:matplotlib.testing.determinism.ax1->matplotlib.pyplot.figure().add_subplot(1, 6, 1)
A:matplotlib.testing.determinism.x->range(5)
A:matplotlib.testing.determinism.ax2->matplotlib.pyplot.figure().add_subplot(1, 6, 2)
A:matplotlib.testing.determinism.stdout->getattr(sys.stdout, 'buffer', sys.stdout)
A:matplotlib.testing.determinism.result->check_output([sys.executable, '-R', '-c', 'import matplotlib; matplotlib._called_from_pytest = True; matplotlib.use(%r); from matplotlib.testing.determinism import _determinism_save;_determinism_save(%r,%r,%r)' % (format, objects, format, usetex)])
A:matplotlib.testing.determinism.buff->check_output([sys.executable, '-R', '-c', 'import matplotlib; matplotlib._called_from_pytest = True; matplotlib.use(%r); from matplotlib.testing.determinism import _determinism_save;_determinism_save(%r,%r)' % (format, '', format)])
A:matplotlib.testing.determinism.find_keyword->re.compile(b'.*' + keyword + b'.*')
A:matplotlib.testing.determinism.key->re.compile(b'.*' + keyword + b'.*').search(buff)
matplotlib.testing.determinism._determinism_check(objects='mhi',format='pdf',usetex=False)
matplotlib.testing.determinism._determinism_save(objects='mhi',format='pdf',usetex=False)
matplotlib.testing.determinism._determinism_source_date_epoch(format,string,keyword=b'CreationDate')


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/compare.py----------------------------------------
A:matplotlib.testing.compare.(base, ext)->os.path.splitext(fname)
A:matplotlib.testing.compare.absDiff->abs(expected - actual)
A:matplotlib.testing.compare.relDiff->abs(expected - actual)
A:matplotlib.testing.compare.cachedir->_get_cachedir()
A:matplotlib.testing.compare.cache_dir->get_cache_dir()
A:matplotlib.testing.compare.md5->hashlib.md5()
A:matplotlib.testing.compare.data->fd.read(block_size)
A:matplotlib.testing.compare.cmdline->cmd(old, new)
A:matplotlib.testing.compare.pipe->matplotlib.compat.subprocess.Popen(cmd, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:matplotlib.testing.compare.(stdout, stderr)->matplotlib.compat.subprocess.Popen(cmd, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:matplotlib.testing.compare.errcode->matplotlib.compat.subprocess.Popen(cmd, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()
A:matplotlib.testing.compare.stream->iter(functools.partial(self._proc.stdout.read, 1), b'')
A:matplotlib.testing.compare.n->len(prompt)
A:matplotlib.testing.compare.its->itertools.tee(stream, n)
A:matplotlib.testing.compare.window->tuple(map(next, its))
A:matplotlib.testing.compare.env->os.environ.copy()
A:matplotlib.testing.compare.self._stderr->TemporaryFile()
A:matplotlib.testing.compare.self._proc->matplotlib.compat.subprocess.Popen([str('inkscape'), '--without-gui', '--shell'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=self._stderr, env=env)
A:matplotlib.testing.compare.(orig_b, dest_b)->map(_shlex_quote_bytes, map(fsencode, [orig, dest]))
A:matplotlib.testing.compare.(gs, gs_v)->matplotlib.checkdep_ghostscript()
A:matplotlib.testing.compare.converter['pdf']->make_external_conversion_command(cmd)
A:matplotlib.testing.compare.converter['eps']->make_external_conversion_command(cmd)
A:matplotlib.testing.compare.converter['svg']->_SVGConverter()
A:matplotlib.testing.compare.(base, extension)->filename.rsplit('.', 1)
A:matplotlib.testing.compare.hash_value->get_file_hash(filename)
A:matplotlib.testing.compare.cached_file->os.path.join(cache_dir, hash_value + new_ext)
A:matplotlib.testing.compare.verifier->verifiers.get(extension, None)
A:matplotlib.testing.compare.cmd->verifier(filename)
A:matplotlib.testing.compare.actual->convert(actual, False)
A:matplotlib.testing.compare.expected->convert(expected, True)
A:matplotlib.testing.compare.expectedImage->numpy.array(expectedImage).astype(float)
A:matplotlib.testing.compare.actualImage->numpy.array(actualImage).astype(float)
A:matplotlib.testing.compare.(actualImage, expectedImage)->crop_to_same(actual, actualImage, expected, expectedImage)
A:matplotlib.testing.compare.diff_image->make_test_filename(actual, 'failed-diff')
A:matplotlib.testing.compare.rms->calculate_rms(expectedImage, actualImage)
A:matplotlib.testing.compare.results->'\n  '.join([line.format(**results) for line in template])
A:matplotlib.testing.compare.absDiffImage->numpy.abs(expectedImage - actualImage)
A:matplotlib.testing.compare.save_image_np->numpy.clip(absDiffImage, 0, 255).astype(np.uint8)
A:matplotlib.testing.compare.with_alpha->numpy.empty((height, width, 4), dtype=np.uint8)
matplotlib.testing.compare._SVGConverter(self)
matplotlib.testing.compare._SVGConverter.__del__(self)
matplotlib.testing.compare._SVGConverter.__init__(self)
matplotlib.testing.compare._SVGConverter._read_to_prompt(self)
matplotlib.testing.compare._shlex_quote_bytes(b)
matplotlib.testing.compare._update_converter()
matplotlib.testing.compare.calculate_rms(expectedImage,actualImage)
matplotlib.testing.compare.comparable_formats()
matplotlib.testing.compare.compare_float(expected,actual,relTol=None,absTol=None)
matplotlib.testing.compare.compare_images(expected,actual,tol,in_decorator=False)
matplotlib.testing.compare.convert(filename,cache)
matplotlib.testing.compare.crop_to_same(actual_path,actual_image,expected_path,expected_image)
matplotlib.testing.compare.get_cache_dir()
matplotlib.testing.compare.get_file_hash(path,block_size=2**20)
matplotlib.testing.compare.make_external_conversion_command(cmd)
matplotlib.testing.compare.make_test_filename(fname,purpose)
matplotlib.testing.compare.save_diff_image(expected,actual,output)
matplotlib.testing.compare.verify(filename)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/exceptions.py----------------------------------------
matplotlib.testing.exceptions.ImageComparisonFailure(AssertionError)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/__init__.py----------------------------------------
matplotlib.testing.__init__._copy_metadata(src_func,tgt_func)
matplotlib.testing.__init__.is_called_from_pytest()
matplotlib.testing.__init__.set_font_settings_for_testing()
matplotlib.testing.__init__.set_reproducibility_for_testing()
matplotlib.testing.__init__.setup()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/conftest.py----------------------------------------
A:matplotlib.testing.conftest.original_units_registry->matplotlib.units.registry.copy()
A:matplotlib.testing.conftest.original_settings->matplotlib.rcParams.copy()
A:matplotlib.testing.conftest.backend_marker->request.keywords.get('backend')
A:matplotlib.testing.conftest.prev_backend->matplotlib.get_backend()
A:matplotlib.testing.conftest.style_marker->request.keywords.get('style')
A:matplotlib.testing.conftest.baseline_images->request.getfixturevalue('baseline_images')
A:matplotlib.testing.conftest.pd->pytest.importorskip('pandas')
matplotlib.testing.conftest.mpl_image_comparison_parameters(request,extension)
matplotlib.testing.conftest.mpl_test_settings(request)
matplotlib.testing.conftest.pd()
matplotlib.testing.conftest.pytest_configure(config)
matplotlib.testing.conftest.pytest_unconfigure(config)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/noseclasses.py----------------------------------------
matplotlib.testing.noseclasses.KnownFailure(self)
matplotlib.testing.noseclasses.KnownFailure.__init__(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/decorators.py----------------------------------------
A:matplotlib.testing.decorators.cls.original_units_registry->matplotlib.units.registry.copy()
A:matplotlib.testing.decorators.cls.original_settings->matplotlib.rcParams.copy()
A:matplotlib.testing.decorators.original_units_registry->matplotlib.units.registry.copy()
A:matplotlib.testing.decorators.original_settings->matplotlib.rcParams.copy()
A:matplotlib.testing.decorators.result->func(*args, **kwargs)
A:matplotlib.testing.decorators.found->distutils.version.StrictVersion(ft2font.__freetype_version__)
A:matplotlib.testing.decorators.null_formatter->matplotlib.ticker.NullFormatter()
A:matplotlib.testing.decorators.err->compare_images(expected, actual, tol, in_decorator=True)
A:matplotlib.testing.decorators.err[key]->os.path.relpath(err[key])
A:matplotlib.testing.decorators.(self.baseline_dir, self.result_dir)->_image_directories(func)
A:matplotlib.testing.decorators.baseline_path->os.path.join(self.baseline_dir, baseline)
A:matplotlib.testing.decorators.expected_fname->self.copy_baseline(baseline, extension)
A:matplotlib.testing.decorators.reason->'Do not have baseline image {0} because this file does not exist: {1}'.format(expected_fname, orig_expected_fname)
A:matplotlib.testing.decorators.fig->matplotlib.pyplot.figure(fignum)
A:matplotlib.testing.decorators.kwargs->self.savefig_kwargs.copy()
A:matplotlib.testing.decorators.func->_checked_on_freetype_version(self.freetype_version)(func)
A:matplotlib.testing.decorators.extensions->map(_mark_xfail_if_format_is_uncomparable, extensions)
A:matplotlib.testing.decorators.img->_ImageComparisonBase(tol=tol, remove_text=remove_text, savefig_kwargs=savefig_kwargs)
A:matplotlib.testing.decorators.savefig_kwarg->dict()
A:matplotlib.testing.decorators.basedir->os.path.dirname(mod_file)
A:matplotlib.testing.decorators.mods->module_name.split('.')
A:matplotlib.testing.decorators.subdir->os.path.join(*mods)
A:matplotlib.testing.decorators.res(file, path, _)->imp.find_module(sub_mod, path)
A:matplotlib.testing.decorators.path->list(sys.modules[sub_mod].__path__)
A:matplotlib.testing.decorators.baseline_dir->os.path.join(basedir, 'baseline_images', subdir)
A:matplotlib.testing.decorators.result_dir->os.path.abspath(os.path.join('result_images', subdir))
A:matplotlib.testing.decorators.prev_backend->matplotlib.get_backend()
matplotlib.testing.decorators.CleanupTest(object)
matplotlib.testing.decorators.CleanupTest.setup_class(cls)
matplotlib.testing.decorators.CleanupTest.teardown_class(cls)
matplotlib.testing.decorators.CleanupTest.test(self)
matplotlib.testing.decorators.CleanupTestCase(unittest.TestCase)
matplotlib.testing.decorators.CleanupTestCase.setUpClass(cls)
matplotlib.testing.decorators.CleanupTestCase.tearDownClass(cls)
matplotlib.testing.decorators.ImageComparisonTest(self,baseline_images,extensions,tol,freetype_version,remove_text,savefig_kwargs,style)
matplotlib.testing.decorators.ImageComparisonTest.__init__(self,baseline_images,extensions,tol,freetype_version,remove_text,savefig_kwargs,style)
matplotlib.testing.decorators.ImageComparisonTest.nose_runner(self)
matplotlib.testing.decorators.ImageComparisonTest.remove_text(figure)
matplotlib.testing.decorators.ImageComparisonTest.setup(self)
matplotlib.testing.decorators.ImageComparisonTest.teardown(self)
matplotlib.testing.decorators._ImageComparisonBase(self,tol,remove_text,savefig_kwargs)
matplotlib.testing.decorators._ImageComparisonBase.__init__(self,tol,remove_text,savefig_kwargs)
matplotlib.testing.decorators._ImageComparisonBase.compare(self,idx,baseline,extension)
matplotlib.testing.decorators._ImageComparisonBase.copy_baseline(self,baseline,extension)
matplotlib.testing.decorators._ImageComparisonBase.delayed_init(self,func)
matplotlib.testing.decorators._checked_on_freetype_version(required_freetype_version)
matplotlib.testing.decorators._do_cleanup(original_units_registry,original_settings)
matplotlib.testing.decorators._image_directories(func)
matplotlib.testing.decorators._knownfailureif(fail_condition,msg=None,known_exception_class=None)
matplotlib.testing.decorators._mark_xfail_if_format_is_uncomparable(extension)
matplotlib.testing.decorators._pytest_image_comparison(baseline_images,extensions,tol,freetype_version,remove_text,savefig_kwargs,style)
matplotlib.testing.decorators._raise_on_image_difference(expected,actual,tol)
matplotlib.testing.decorators._xfail_if_format_is_uncomparable(extension)
matplotlib.testing.decorators.check_freetype_version(ver)
matplotlib.testing.decorators.cleanup(style=None)
matplotlib.testing.decorators.image_comparison(baseline_images,extensions=None,tol=0,freetype_version=None,remove_text=False,savefig_kwarg=None,style='_classic_test')
matplotlib.testing.decorators.knownfailureif(fail_condition,msg=None,known_exception_class=None)
matplotlib.testing.decorators.remove_ticks_and_titles(figure)
matplotlib.testing.decorators.skip_if_command_unavailable(cmd)
matplotlib.testing.decorators.switch_backend(backend)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/disable_internet.py----------------------------------------
A:matplotlib.testing.disable_internet.hostname->socket.gethostname()
A:matplotlib.testing.disable_internet.fqdn->socket.getfqdn()
A:matplotlib.testing.disable_internet._orig_opener->six.moves.urllib.request.build_opener()
A:matplotlib.testing.disable_internet.no_proxy_handler->six.moves.urllib.request.ProxyHandler({})
A:matplotlib.testing.disable_internet.opener->six.moves.urllib.request.build_opener(no_proxy_handler)
A:matplotlib.testing.disable_internet.socket.create_connection->check_internet_off(socket_create_connection)
A:matplotlib.testing.disable_internet.socket.socket.bind->check_internet_off(socket_bind)
A:matplotlib.testing.disable_internet.socket.socket.connect->check_internet_off(socket_connect)
matplotlib.testing.disable_internet.check_internet_off(original_function)
matplotlib.testing.disable_internet.no_internet(verbose=False)
matplotlib.testing.disable_internet.turn_off_internet(verbose=False)
matplotlib.testing.disable_internet.turn_on_internet(verbose=False)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/Epoch.py----------------------------------------
A:matplotlib.testing.jpl_units.Epoch.daynum->date2num(dt)
A:matplotlib.testing.jpl_units.Epoch.self._jd->float(jd)
A:matplotlib.testing.jpl_units.Epoch.self._seconds->float(sec)
A:matplotlib.testing.jpl_units.Epoch.deltaDays->int(math.floor(self._seconds / 86400.0))
A:matplotlib.testing.jpl_units.Epoch.t->self.convert(rhs._frame)
A:matplotlib.testing.jpl_units.Epoch.range->staticmethod(range)
matplotlib.testing.jpl_units.Epoch(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch.__add__(self,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch.__cmp__(self,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch.__init__(self,frame,sec=None,jd=None,daynum=None,dt=None)
matplotlib.testing.jpl_units.Epoch.Epoch.__repr__(self)
matplotlib.testing.jpl_units.Epoch.Epoch.__str__(self)
matplotlib.testing.jpl_units.Epoch.Epoch.__sub__(self,rhs)
matplotlib.testing.jpl_units.Epoch.Epoch.convert(self,frame)
matplotlib.testing.jpl_units.Epoch.Epoch.frame(self)
matplotlib.testing.jpl_units.Epoch.Epoch.julianDate(self,frame)
matplotlib.testing.jpl_units.Epoch.Epoch.range(start,stop,step)
matplotlib.testing.jpl_units.Epoch.Epoch.secondsPast(self,frame,jd)
matplotlib.testing.jpl_units.Epoch.__add__(self,rhs)
matplotlib.testing.jpl_units.Epoch.__cmp__(self,rhs)
matplotlib.testing.jpl_units.Epoch.__repr__(self)
matplotlib.testing.jpl_units.Epoch.__str__(self)
matplotlib.testing.jpl_units.Epoch.__sub__(self,rhs)
matplotlib.testing.jpl_units.Epoch.convert(self,frame)
matplotlib.testing.jpl_units.Epoch.frame(self)
matplotlib.testing.jpl_units.Epoch.julianDate(self,frame)
matplotlib.testing.jpl_units.Epoch.range(start,stop,step)
matplotlib.testing.jpl_units.Epoch.secondsPast(self,frame,jd)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/StrConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.StrConverter.ticks->list(xrange(len(labels)))
A:matplotlib.testing.jpl_units.StrConverter.labels->axis.get_ticklabels()
A:matplotlib.testing.jpl_units.StrConverter.loc->axis.get_major_locator()
matplotlib.testing.jpl_units.StrConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.StrConverter.StrConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.StrConverter.StrConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.StrConverter.StrConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.StrConverter.StrConverter.default_units(value,axis)
matplotlib.testing.jpl_units.StrConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.StrConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.StrConverter.default_units(value,axis)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/UnitDblFormatter.py----------------------------------------
matplotlib.testing.jpl_units.UnitDblFormatter(self,*args,**kwargs)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter(self,*args,**kwargs)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.__init__(self,*args,**kwargs)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.format_data(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter.format_data_short(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.format_data(self,value)
matplotlib.testing.jpl_units.UnitDblFormatter.format_data_short(self,value)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/EpochConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.EpochConverter.majloc->matplotlib.dates.AutoDateLocator()
A:matplotlib.testing.jpl_units.EpochConverter.majfmt->matplotlib.dates.AutoDateFormatter(majloc)
A:matplotlib.testing.jpl_units.EpochConverter.unit->EpochConverter.default_units(value, axis)
A:matplotlib.testing.jpl_units.EpochConverter.frame->value.frame()
matplotlib.testing.jpl_units.EpochConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.default_units(value,axis)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.duration2float(value)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.epoch2float(value,unit)
matplotlib.testing.jpl_units.EpochConverter.EpochConverter.float2epoch(value,unit)
matplotlib.testing.jpl_units.EpochConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.EpochConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.EpochConverter.default_units(value,axis)
matplotlib.testing.jpl_units.EpochConverter.duration2float(value)
matplotlib.testing.jpl_units.EpochConverter.epoch2float(value,unit)
matplotlib.testing.jpl_units.EpochConverter.float2epoch(value,unit)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/Duration.py----------------------------------------
matplotlib.testing.jpl_units.Duration(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration.__abs__(self)
matplotlib.testing.jpl_units.Duration.Duration.__add__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__cmp__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__div__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__init__(self,frame,seconds)
matplotlib.testing.jpl_units.Duration.Duration.__mul__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__neg__(self)
matplotlib.testing.jpl_units.Duration.Duration.__nonzero__(self)
matplotlib.testing.jpl_units.Duration.Duration.__rdiv__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.__repr__(self)
matplotlib.testing.jpl_units.Duration.Duration.__rmul__(self,lhs)
matplotlib.testing.jpl_units.Duration.Duration.__str__(self)
matplotlib.testing.jpl_units.Duration.Duration.__sub__(self,rhs)
matplotlib.testing.jpl_units.Duration.Duration.checkSameFrame(self,rhs,func)
matplotlib.testing.jpl_units.Duration.Duration.frame(self)
matplotlib.testing.jpl_units.Duration.Duration.seconds(self)
matplotlib.testing.jpl_units.Duration.__abs__(self)
matplotlib.testing.jpl_units.Duration.__add__(self,rhs)
matplotlib.testing.jpl_units.Duration.__cmp__(self,rhs)
matplotlib.testing.jpl_units.Duration.__div__(self,rhs)
matplotlib.testing.jpl_units.Duration.__mul__(self,rhs)
matplotlib.testing.jpl_units.Duration.__neg__(self)
matplotlib.testing.jpl_units.Duration.__nonzero__(self)
matplotlib.testing.jpl_units.Duration.__rdiv__(self,rhs)
matplotlib.testing.jpl_units.Duration.__repr__(self)
matplotlib.testing.jpl_units.Duration.__rmul__(self,lhs)
matplotlib.testing.jpl_units.Duration.__str__(self)
matplotlib.testing.jpl_units.Duration.__sub__(self,rhs)
matplotlib.testing.jpl_units.Duration.checkSameFrame(self,rhs,func)
matplotlib.testing.jpl_units.Duration.frame(self)
matplotlib.testing.jpl_units.Duration.seconds(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/UnitDblConverter.py----------------------------------------
A:matplotlib.testing.jpl_units.UnitDblConverter.n->int(x / np.pi * 2.0 + 0.25)
A:matplotlib.testing.jpl_units.UnitDblConverter.label->UnitDblConverter.default_units(value, axis).label()
A:matplotlib.testing.jpl_units.UnitDblConverter.majfmt->matplotlib.testing.jpl_units.UnitDblFormatter(useOffset=False)
A:matplotlib.testing.jpl_units.UnitDblConverter.unit->UnitDblConverter.default_units(value, axis)
matplotlib.testing.jpl_units.UnitDblConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter(units.ConversionInterface)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter.default_units(value,axis)
matplotlib.testing.jpl_units.UnitDblConverter.axisinfo(unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.convert(value,unit,axis)
matplotlib.testing.jpl_units.UnitDblConverter.default_units(value,axis)
matplotlib.testing.jpl_units.UnitDblConverter.rad_fn(x,pos=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/__init__.py----------------------------------------
A:matplotlib.testing.jpl_units.__init__.mplU.registry[str]->StrConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[Epoch]->EpochConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[Duration]->EpochConverter()
A:matplotlib.testing.jpl_units.__init__.mplU.registry[UnitDbl]->UnitDblConverter()
A:matplotlib.testing.jpl_units.__init__.m->UnitDbl(1.0, 'm')
A:matplotlib.testing.jpl_units.__init__.km->UnitDbl(1.0, 'km')
A:matplotlib.testing.jpl_units.__init__.mile->UnitDbl(1.0, 'mile')
A:matplotlib.testing.jpl_units.__init__.deg->UnitDbl(1.0, 'deg')
A:matplotlib.testing.jpl_units.__init__.rad->UnitDbl(1.0, 'rad')
A:matplotlib.testing.jpl_units.__init__.sec->UnitDbl(1.0, 'sec')
A:matplotlib.testing.jpl_units.__init__.min->UnitDbl(1.0, 'min')
A:matplotlib.testing.jpl_units.__init__.hr->UnitDbl(1.0, 'hour')
A:matplotlib.testing.jpl_units.__init__.day->UnitDbl(24.0, 'hour')
matplotlib.testing.jpl_units.__init__.register()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/jpl_units/UnitDbl.py----------------------------------------
A:matplotlib.testing.jpl_units.UnitDbl.self._value->float(value * data[0])
A:matplotlib.testing.jpl_units.UnitDbl.step->UnitDbl(1, start._units)
A:matplotlib.testing.jpl_units.UnitDbl.range->staticmethod(range)
matplotlib.testing.jpl_units.UnitDbl(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__abs__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__add__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__cmp__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__div__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__init__(self,value,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__mul__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__neg__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__nonzero__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__repr__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__rmul__(self,lhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__str__(self)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.__sub__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.checkSameUnits(self,rhs,func)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.checkUnits(self,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.convert(self,units)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.range(start,stop,step=None)
matplotlib.testing.jpl_units.UnitDbl.UnitDbl.type(self)
matplotlib.testing.jpl_units.UnitDbl.__abs__(self)
matplotlib.testing.jpl_units.UnitDbl.__add__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.__cmp__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.__div__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.__mul__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.__neg__(self)
matplotlib.testing.jpl_units.UnitDbl.__nonzero__(self)
matplotlib.testing.jpl_units.UnitDbl.__repr__(self)
matplotlib.testing.jpl_units.UnitDbl.__rmul__(self,lhs)
matplotlib.testing.jpl_units.UnitDbl.__str__(self)
matplotlib.testing.jpl_units.UnitDbl.__sub__(self,rhs)
matplotlib.testing.jpl_units.UnitDbl.checkSameUnits(self,rhs,func)
matplotlib.testing.jpl_units.UnitDbl.checkUnits(self,units)
matplotlib.testing.jpl_units.UnitDbl.convert(self,units)
matplotlib.testing.jpl_units.UnitDbl.range(start,stop,step=None)
matplotlib.testing.jpl_units.UnitDbl.type(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/exceptions.py----------------------------------------
matplotlib.testing._nose.KnownFailureTest(Exception)
matplotlib.testing._nose.exceptions.KnownFailureDidNotFailTest(Exception)
matplotlib.testing._nose.exceptions.KnownFailureTest(Exception)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/__init__.py----------------------------------------
A:matplotlib.testing._nose.__init__.old_backend->get_backend()
A:matplotlib.testing._nose.__init__.old_recursionlimit->sys.getrecursionlimit()
A:matplotlib.testing._nose.__init__.extra_plugins->get_extra_test_plugins()
A:matplotlib.testing._nose.__init__.env->get_env()
A:matplotlib.testing._nose.__init__.success->nose.run(addplugins=[plugin() for plugin in extra_plugins], env=env, defaultTest=default_test_modules, **kwargs)
matplotlib.testing._nose.__init__.check_deps()
matplotlib.testing._nose.__init__.get_env()
matplotlib.testing._nose.__init__.get_extra_test_plugins()
matplotlib.testing._nose.__init__.knownfail(msg)
matplotlib.testing._nose.__init__.test(verbosity=None,coverage=False,switch_backend_warn=True,recursionlimit=0,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/decorators.py----------------------------------------
A:matplotlib.testing._nose.decorators.result->f(*args, **kwargs)
matplotlib.testing._nose.decorators.knownfailureif(fail_condition,msg=None,known_exception_class=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/plugins/knownfailure.py----------------------------------------
A:matplotlib.testing._nose.plugins.knownfailure.knownfail->ErrorClass(KnownFailureTest, label='KNOWNFAIL', isfailure=False)
A:matplotlib.testing._nose.plugins.knownfailure.disable->getattr(options, 'noKnownFail', False)
matplotlib.testing._nose.KnownFailure(ErrorClassPlugin)
matplotlib.testing._nose.KnownFailure.addError(self,test,err,*zero_nine_capt_args)
matplotlib.testing._nose.KnownFailure.configure(self,options,conf)
matplotlib.testing._nose.KnownFailure.options(self,parser,env=os.environ)
matplotlib.testing._nose.plugins.knownfailure.KnownFailure(ErrorClassPlugin)
matplotlib.testing._nose.plugins.knownfailure.KnownFailure.addError(self,test,err,*zero_nine_capt_args)
matplotlib.testing._nose.plugins.knownfailure.KnownFailure.configure(self,options,conf)
matplotlib.testing._nose.plugins.knownfailure.KnownFailure.options(self,parser,env=os.environ)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/plugins/performgc.py----------------------------------------
A:matplotlib.testing._nose.plugins.performgc.self.enabled->getattr(options, 'performGC', False)
matplotlib.testing._nose.PerformGC(Plugin)
matplotlib.testing._nose.PerformGC.afterTest(self,test)
matplotlib.testing._nose.PerformGC.configure(self,options,conf)
matplotlib.testing._nose.PerformGC.options(self,parser,env=os.environ)
matplotlib.testing._nose.plugins.performgc.PerformGC(Plugin)
matplotlib.testing._nose.plugins.performgc.PerformGC.afterTest(self,test)
matplotlib.testing._nose.plugins.performgc.PerformGC.configure(self,options,conf)
matplotlib.testing._nose.plugins.performgc.PerformGC.options(self,parser,env=os.environ)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/testing/_nose/plugins/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/mathmpl.py----------------------------------------
A:matplotlib.sphinxext.mathmpl.mathtext_parser->MathTextParser('Bitmap')
A:matplotlib.sphinxext.mathmpl.i->rawtext.find('`')
A:matplotlib.sphinxext.mathmpl.node->latex_math(block_text)
A:matplotlib.sphinxext.mathmpl.node['fontset']->options.get('fontset', 'cm')
A:matplotlib.sphinxext.mathmpl.latex->''.join(content)
A:matplotlib.sphinxext.mathmpl.depth->latex2png(latex, dest, node['fontset'])
A:matplotlib.sphinxext.mathmpl.inline->isinstance(node.parent, nodes.TextElement)
A:matplotlib.sphinxext.mathmpl.destdir->os.path.join(setup.app.builder.outdir, '_images', 'mathmpl')
A:matplotlib.sphinxext.mathmpl.dest->os.path.join(destdir, '%s.png' % name)
A:matplotlib.sphinxext.mathmpl.path->'/'.join((setup.app.builder.imgpath, 'mathmpl'))
matplotlib.sphinxext.mathmpl.fontset_choice(arg)
matplotlib.sphinxext.mathmpl.latex2html(node,source)
matplotlib.sphinxext.mathmpl.latex2png(latex,filename,fontset='cm')
matplotlib.sphinxext.mathmpl.latex_math(nodes.General,nodes.Element)
matplotlib.sphinxext.mathmpl.math_directive(name,arguments,options,content,lineno,content_offset,block_text,state,state_machine)
matplotlib.sphinxext.mathmpl.math_role(role,rawtext,text,lineno,inliner,options={},content=[])
matplotlib.sphinxext.mathmpl.setup(app)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/plot_directive.py----------------------------------------
A:matplotlib.sphinxext.plot_directive.sphinx_version->tuple([int(re.split('[^0-9]', x)[0]) for x in sphinx_version[:2]])
A:matplotlib.sphinxext.plot_directive.sectname->c.astext()
A:matplotlib.sphinxext.plot_directive.r->re.compile('^\\s*>>>', re.M)
A:matplotlib.sphinxext.plot_directive.m->re.match('^\\s*(>>>|\\.\\.\\.) (.*)$', line)
A:matplotlib.sphinxext.plot_directive.is_doctest->contains_doctest(code)
A:matplotlib.sphinxext.plot_directive.sub_re->re.compile('^#\\s*-\\*-\\s*coding:\\s*.*-\\*-$', flags=re.MULTILINE)
A:matplotlib.sphinxext.plot_directive.plot_context->dict()
A:matplotlib.sphinxext.plot_directive.pwd->os.getcwd()
A:matplotlib.sphinxext.plot_directive.old_sys_path->list(sys.path)
A:matplotlib.sphinxext.plot_directive.dirname->os.path.abspath(os.path.dirname(code_path))
A:matplotlib.sphinxext.plot_directive.sys.stdout->cStringIO.StringIO()
A:matplotlib.sphinxext.plot_directive.code->textwrap.dedent('\n'.join(map(six.text_type, content)))
A:matplotlib.sphinxext.plot_directive.plot_formats->plot_formats.split(',').split(',')
A:matplotlib.sphinxext.plot_directive.(suffix, dpi)->fmt.split(':')
A:matplotlib.sphinxext.plot_directive.formats->get_plot_formats(config)
A:matplotlib.sphinxext.plot_directive.code_pieces->split_code_at_show(code)
A:matplotlib.sphinxext.plot_directive.img->ImageFile('%s_%02d_%02d' % (output_base, i, j), output_dir)
A:matplotlib.sphinxext.plot_directive.fig_managers->matplotlib._pylab_helpers.Gcf.get_all_fig_managers()
A:matplotlib.sphinxext.plot_directive.rst_dir->os.path.dirname(rst_file)
A:matplotlib.sphinxext.plot_directive.source_file_name->os.path.join(setup.confdir, config.plot_basedir, directives.uri(arguments[0]))
A:matplotlib.sphinxext.plot_directive.caption->'\n'.join(('      ' + line.strip() for line in caption.split('\n')))
A:matplotlib.sphinxext.plot_directive.output_base->output_base.replace('.', '-').replace('.', '-')
A:matplotlib.sphinxext.plot_directive.(base, ext)->os.path.splitext(os.path.basename(source_file_name))
A:matplotlib.sphinxext.plot_directive.(base, source_ext)->os.path.splitext(output_base)
A:matplotlib.sphinxext.plot_directive.source_rel_name->relpath(source_file_name, setup.confdir)
A:matplotlib.sphinxext.plot_directive.source_rel_dir->os.path.dirname(source_rel_name)
A:matplotlib.sphinxext.plot_directive.build_dir->os.path.normpath(build_dir)
A:matplotlib.sphinxext.plot_directive.dest_dir->os.path.abspath(os.path.join(setup.app.builder.outdir, source_rel_dir))
A:matplotlib.sphinxext.plot_directive.dest_dir_link->os.path.join(relpath(setup.confdir, rst_dir), source_rel_dir).replace(os.path.sep, '/')
A:matplotlib.sphinxext.plot_directive.build_dir_link->relpath(build_dir, rst_dir).replace(os.path.sep, '/')
A:matplotlib.sphinxext.plot_directive.results->render_figures(code, source_file_name, build_dir, output_base, keep_context, function_name, config, context_reset=context_opt == 'reset', close_figs=context_opt == 'close-figs')
A:matplotlib.sphinxext.plot_directive.sm->reporter.system_message(2, 'Exception occurred in plotting {}\n from {}:\n{}'.format(output_base, source_file_name, err), line=lineno)
A:matplotlib.sphinxext.plot_directive.source_code->'\n'.join(lines)
A:matplotlib.sphinxext.plot_directive.result->jinja2.Template(config.plot_template or TEMPLATE).render(default_fmt=default_fmt, dest_dir=dest_dir_link, build_dir=build_dir_link, source_link=src_link, multi_image=len(images) > 1, only_html=only_html, only_latex=only_latex, only_texinfo=only_texinfo, options=opts, images=images, source_code=source_code, html_show_formats=config.plot_html_show_formats and len(images), caption=caption)
A:matplotlib.sphinxext.plot_directive.destimg->os.path.join(dest_dir, os.path.basename(fn))
A:matplotlib.sphinxext.plot_directive.target_name->os.path.join(dest_dir, output_base + source_ext)
A:matplotlib.sphinxext.plot_directive.code_escaped->unescape_doctest(code)
matplotlib.sphinxext.plot_directive.ImageFile(self,basename,dirname)
matplotlib.sphinxext.plot_directive.ImageFile.__init__(self,basename,dirname)
matplotlib.sphinxext.plot_directive.ImageFile.filename(self,format)
matplotlib.sphinxext.plot_directive.ImageFile.filenames(self)
matplotlib.sphinxext.plot_directive.PlotError(RuntimeError)
matplotlib.sphinxext.plot_directive._option_align(arg)
matplotlib.sphinxext.plot_directive._option_boolean(arg)
matplotlib.sphinxext.plot_directive._option_context(arg)
matplotlib.sphinxext.plot_directive._option_format(arg)
matplotlib.sphinxext.plot_directive.clear_state(plot_rcparams,close=True)
matplotlib.sphinxext.plot_directive.contains_doctest(text)
matplotlib.sphinxext.plot_directive.get_plot_formats(config)
matplotlib.sphinxext.plot_directive.mark_plot_labels(app,document)
matplotlib.sphinxext.plot_directive.out_of_date(original,derived)
matplotlib.sphinxext.plot_directive.plot_directive(name,arguments,options,content,lineno,content_offset,block_text,state,state_machine)
matplotlib.sphinxext.plot_directive.remove_coding(text)
matplotlib.sphinxext.plot_directive.render_figures(code,code_path,output_dir,output_base,context,function_name,config,context_reset=False,close_figs=False)
matplotlib.sphinxext.plot_directive.run(arguments,content,options,state_machine,state,lineno)
matplotlib.sphinxext.plot_directive.run_code(code,code_path,ns=None,function_name=None)
matplotlib.sphinxext.plot_directive.setup(app)
matplotlib.sphinxext.plot_directive.split_code_at_show(text)
matplotlib.sphinxext.plot_directive.unescape_doctest(text)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/only_directives.py----------------------------------------
A:matplotlib.sphinxext.only_directives.text->'\n'.join(content)
A:matplotlib.sphinxext.only_directives.node->node_class(text)
matplotlib.sphinxext.only_directives.builder_inited(app)
matplotlib.sphinxext.only_directives.html_only(only_base)
matplotlib.sphinxext.only_directives.html_only_directive(name,arguments,options,content,lineno,content_offset,block_text,state,state_machine)
matplotlib.sphinxext.only_directives.latex_only(only_base)
matplotlib.sphinxext.only_directives.latex_only_directive(name,arguments,options,content,lineno,content_offset,block_text,state,state_machine)
matplotlib.sphinxext.only_directives.only_base(Body,Element)
matplotlib.sphinxext.only_directives.only_base.dont_traverse(self,*args,**kwargs)
matplotlib.sphinxext.only_directives.run(content,node_class,state,content_offset)
matplotlib.sphinxext.only_directives.setup(app)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/test_tinypages.py----------------------------------------
A:matplotlib.sphinxext.tests.test_tinypages.needs_sphinx->pytest.mark.skipif(call([sys.executable, '-msphinx', '--help'], stdout=PIPE, stderr=PIPE), reason="'{} -msphinx' does not return 0".format(sys.executable))
A:matplotlib.sphinxext.tests.test_tinypages.contents1->fobj.read()
A:matplotlib.sphinxext.tests.test_tinypages.contents2->fobj.read()
A:matplotlib.sphinxext.tests.test_tinypages.html_dir->pjoin(str(tmpdir), 'html')
A:matplotlib.sphinxext.tests.test_tinypages.doctree_dir->pjoin(str(tmpdir), 'doctrees')
A:matplotlib.sphinxext.tests.test_tinypages.proc->Popen(cmd, stdout=PIPE, stderr=PIPE)
A:matplotlib.sphinxext.tests.test_tinypages.(out, err)->Popen(cmd, stdout=PIPE, stderr=PIPE).communicate()
A:matplotlib.sphinxext.tests.test_tinypages.html_contents->fobj.read()
matplotlib.sphinxext.tests.test_tinypages.file_same(file1,file2)
matplotlib.sphinxext.tests.test_tinypages.test_tinypages(tmpdir)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/conftest.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/tinypages/conf.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/tinypages/range6.py----------------------------------------
matplotlib.sphinxext.tests.tinypages.range6.range4()
matplotlib.sphinxext.tests.tinypages.range6.range6()


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/sphinxext/tests/tinypages/range4.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/style/core.py----------------------------------------
A:matplotlib.style.core.BASE_LIBRARY_PATH->os.path.join(mpl.get_data_path(), 'stylelib')
A:matplotlib.style.core.STYLE_FILE_PATTERN->re.compile('([\\S]+).%s$' % STYLE_EXTENSION)
A:matplotlib.style.core.rc->rc_params_from_file(style, use_default_template=False)
A:matplotlib.style.core.initial_settings->matplotlib.rcParams.copy()
A:matplotlib.style.core.library->dict()
A:matplotlib.style.core.stylelib_path->os.path.expanduser(stylelib_path)
A:matplotlib.style.core.styles->dict()
A:matplotlib.style.core.filename->os.path.basename(path)
A:matplotlib.style.core.match->re.compile('([\\S]+).%s$' % STYLE_EXTENSION).match(filename)
A:matplotlib.style.core.path->os.path.abspath(os.path.join(style_dir, path))
A:matplotlib.style.core.styles[name]->rc_params_from_file(path, use_default_template=False)
A:matplotlib.style.core._base_library->load_base_library()
A:matplotlib.style.core.available[:]library->update_user_library(_base_library)
matplotlib.style.context(style,after_reset=False)
matplotlib.style.core._apply_style(d,warn=True)
matplotlib.style.core._remove_blacklisted_style_params(d,warn=True)
matplotlib.style.core.context(style,after_reset=False)
matplotlib.style.core.is_style_file(filename)
matplotlib.style.core.iter_style_files(style_dir)
matplotlib.style.core.iter_user_libraries()
matplotlib.style.core.load_base_library()
matplotlib.style.core.read_style_directory(style_dir)
matplotlib.style.core.reload_library()
matplotlib.style.core.update_nested_dict(main_dict,new_dict)
matplotlib.style.core.update_user_library(library)
matplotlib.style.core.use(style)
matplotlib.style.reload_library()
matplotlib.style.use(style)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/style/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/trifinder.py----------------------------------------
A:matplotlib.tri.trifinder.self._cpp_trifinder->matplotlib._tri.TrapezoidMapTriFinder(triangulation.get_cpp_triangulation())
A:matplotlib.tri.trifinder.x->numpy.asarray(x, dtype=np.float64)
A:matplotlib.tri.trifinder.y->numpy.asarray(y, dtype=np.float64)
A:matplotlib.tri.trifinder.indices->self._cpp_trifinder.find_many(x.ravel(), y.ravel()).reshape(x.shape)
matplotlib.tri.TrapezoidMapTriFinder(self,triangulation)
matplotlib.tri.TrapezoidMapTriFinder._get_tree_stats(self)
matplotlib.tri.TrapezoidMapTriFinder._initialize(self)
matplotlib.tri.TrapezoidMapTriFinder._print_tree(self)
matplotlib.tri.TriFinder(self,triangulation)
matplotlib.tri.trifinder.TrapezoidMapTriFinder(self,triangulation)
matplotlib.tri.trifinder.TrapezoidMapTriFinder.__init__(self,triangulation)
matplotlib.tri.trifinder.TrapezoidMapTriFinder._get_tree_stats(self)
matplotlib.tri.trifinder.TrapezoidMapTriFinder._initialize(self)
matplotlib.tri.trifinder.TrapezoidMapTriFinder._print_tree(self)
matplotlib.tri.trifinder.TriFinder(self,triangulation)
matplotlib.tri.trifinder.TriFinder.__init__(self,triangulation)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/triplot.py----------------------------------------
A:matplotlib.tri.triplot.(tri, args, kwargs)->matplotlib.tri.triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri.triplot.(linestyle, marker, color)->matplotlib.axes._base._process_plot_format(fmt)
A:matplotlib.tri.triplot.kw->kwargs.copy()
A:matplotlib.tri.triplot.kw[key]->kwargs.get(key, val)
A:matplotlib.tri.triplot.kw_lines->kwargs.copy().copy()
A:matplotlib.tri.triplot.kw_lines['zorder']->kwargs.copy().get('zorder', 1)
A:matplotlib.tri.triplot.tri_lines_x->numpy.insert(x[edges], 2, np.nan, axis=1)
A:matplotlib.tri.triplot.tri_lines_y->numpy.insert(y[edges], 2, np.nan, axis=1)
A:matplotlib.tri.triplot.tri_lines->ax.plot([], [], **kw_lines)
A:matplotlib.tri.triplot.kw_markers->kwargs.copy().copy()
A:matplotlib.tri.triplot.tri_markers->ax.plot([], [], **kw_markers)
matplotlib.tri.triplot(ax,*args,**kwargs)
matplotlib.tri.triplot.triplot(ax,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/trirefine.py----------------------------------------
A:matplotlib.tri.trirefine.ancestors->numpy.asarray(ancestors)
A:matplotlib.tri.trirefine.(refi_triangulation, ancestors)->self._refine_triangulation_once(refi_triangulation, ancestors)
A:matplotlib.tri.trirefine.found_index[refi_triangles]->numpy.repeat(ancestors, 3).reshape(-1, 3)
A:matplotlib.tri.trirefine.found_index[refi_triangles[ancestor_mask, :]]->numpy.repeat(ancestors[ancestor_mask], 3).reshape(-1, 3)
A:matplotlib.tri.trirefine.found_index[refi_triangles[~ancestor_mask, :]]->numpy.repeat(ancestors[~ancestor_mask], 3).reshape(-1, 3)
A:matplotlib.tri.trirefine.interp->matplotlib.tri.CubicTriInterpolator(self._triangulation, z)
A:matplotlib.tri.trirefine.(refi_tri, found_index)->self.refine_triangulation(subdiv=subdiv, return_tri_index=True)
A:matplotlib.tri.trirefine.borders->numpy.sum(neighbors == -1)
A:matplotlib.tri.trirefine.refi_x->numpy.zeros(refi_npts)
A:matplotlib.tri.trirefine.refi_y->numpy.zeros(refi_npts)
A:matplotlib.tri.trirefine.edge_elems->numpy.ravel(np.vstack([np.arange(ntri, dtype=np.int32), np.arange(ntri, dtype=np.int32), np.arange(ntri, dtype=np.int32)]))
A:matplotlib.tri.trirefine.edge_apexes->numpy.ravel(np.vstack([np.zeros(ntri, dtype=np.int32), np.ones(ntri, dtype=np.int32), np.ones(ntri, dtype=np.int32) * 2]))
A:matplotlib.tri.trirefine.new_pt_midside->numpy.empty([ntri, 3], dtype=np.int32)
A:matplotlib.tri.trirefine.n_masters_loc->numpy.sum(mask_st_loc)
A:matplotlib.tri.trirefine.mask_slaves->numpy.logical_not(mask_masters)
A:matplotlib.tri.trirefine.diff_table->numpy.abs(neighbors[slaves_masters, :] - np.outer(slaves, np.ones(3, dtype=np.int32)))
A:matplotlib.tri.trirefine.slave_masters_apex->numpy.argmin(diff_table, axis=1)
A:matplotlib.tri.trirefine.child_triangles->numpy.empty([ntri * 4, 3], dtype=np.int32)
A:matplotlib.tri.trirefine.child_triangulation->Triangulation(refi_x, refi_y, child_triangles)
matplotlib.tri.TriRefiner(self,triangulation)
matplotlib.tri.UniformTriRefiner(self,triangulation)
matplotlib.tri.UniformTriRefiner._refine_triangulation_once(triangulation,ancestors=None)
matplotlib.tri.UniformTriRefiner.refine_field(self,z,triinterpolator=None,subdiv=3)
matplotlib.tri.UniformTriRefiner.refine_triangulation(self,return_tri_index=False,subdiv=3)
matplotlib.tri.trirefine.TriRefiner(self,triangulation)
matplotlib.tri.trirefine.TriRefiner.__init__(self,triangulation)
matplotlib.tri.trirefine.UniformTriRefiner(self,triangulation)
matplotlib.tri.trirefine.UniformTriRefiner.__init__(self,triangulation)
matplotlib.tri.trirefine.UniformTriRefiner._refine_triangulation_once(triangulation,ancestors=None)
matplotlib.tri.trirefine.UniformTriRefiner.refine_field(self,z,triinterpolator=None,subdiv=3)
matplotlib.tri.trirefine.UniformTriRefiner.refine_triangulation(self,return_tri_index=False,subdiv=3)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/triinterpolate.py----------------------------------------
A:matplotlib.tri.triinterpolate.self._z->numpy.asarray(z)
A:matplotlib.tri.triinterpolate.x->numpy.zeros(n)
A:matplotlib.tri.triinterpolate.y->numpy.expand_dims(y, ndim)
A:matplotlib.tri.triinterpolate.size_ret->numpy.size(x_scaled)
A:matplotlib.tri.triinterpolate.tri_index->numpy.ravel(tri_index)
A:matplotlib.tri.triinterpolate.ret_loc->numpy.empty(size_ret, dtype=np.float64)
A:matplotlib.tri.triinterpolate.self._plane_coefficients->self._triangulation.calculate_plane_coefficients(self._z)
A:matplotlib.tri.triinterpolate.tri_analyzer->TriAnalyzer(self._triangulation)
A:matplotlib.tri.triinterpolate.(compressed_triangles, compressed_x, compressed_y, tri_renum, node_renum)->TriAnalyzer(self._triangulation)._get_compressed_triangulation(True, True)
A:matplotlib.tri.triinterpolate.self._unit_x->numpy.ptp(compressed_x)
A:matplotlib.tri.triinterpolate.self._unit_y->numpy.ptp(compressed_y)
A:matplotlib.tri.triinterpolate.self._pts->numpy.column_stack([compressed_x / self._unit_x, compressed_y / self._unit_y])
A:matplotlib.tri.triinterpolate.self._eccs->self._compute_tri_eccentricities(self._tris_pts)
A:matplotlib.tri.triinterpolate.self._dof->self._compute_dof(kind, dz=dz)
A:matplotlib.tri.triinterpolate.self._ReferenceElement->_ReducedHCT_Element()
A:matplotlib.tri.triinterpolate.alpha->numpy.expand_dims(alpha, 2)
A:matplotlib.tri.triinterpolate.dof->numpy.zeros([npt, 9], dtype=np.float64)
A:matplotlib.tri.triinterpolate.J->CubicTriInterpolator._get_jacobian(self._tris_pts)
A:matplotlib.tri.triinterpolate.dzdx->self._ReferenceElement.get_function_derivatives(alpha, J, ecc, dof)
A:matplotlib.tri.triinterpolate.TE->_DOF_estimator_min_E(self)
A:matplotlib.tri.triinterpolate.abT->numpy.concatenate([np.expand_dims(a, ndim + 1), np.expand_dims(b, ndim + 1)], ndim + 1)
A:matplotlib.tri.triinterpolate.ab->_transpose_vectorized(abT)
A:matplotlib.tri.triinterpolate.metric->_prod_vectorized(ab, abT)
A:matplotlib.tri.triinterpolate.metric_inv->_pseudo_inv22sym_vectorized(metric)
A:matplotlib.tri.triinterpolate.Covar->_prod_vectorized(ab, _transpose_vectorized(np.expand_dims(OM, ndim)))
A:matplotlib.tri.triinterpolate.ksi->_roll_vectorized(alpha, -subtri, axis=0)
A:matplotlib.tri.triinterpolate.a->numpy.expand_dims(tris_pts[:, 2, :] - tris_pts[:, 1, :], axis=2)
A:matplotlib.tri.triinterpolate.b->numpy.expand_dims(tris_pts[:, 0, :] - tris_pts[:, 2, :], axis=2)
A:matplotlib.tri.triinterpolate.c->numpy.expand_dims(tris_pts[:, 1, :] - tris_pts[:, 0, :], axis=2)
A:matplotlib.tri.triinterpolate.M->numpy.array([[0.0, 0.0, 0.0, 4.5, 4.5, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.5, 1.25, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 1.25, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 1.0, 0.0, -1.5, 0.0, 3.0, 3.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, -0.25, 0.25, 0.0, 1.0, 0.0, 0.0, 0.5], [0.25, 0.0, 0.0, -0.5, -0.25, 1.0, 0.0, 0.0, 0.0, 1.0], [0.5, 0.0, 1.0, 0.0, -1.5, 0.0, 0.0, 3.0, 3.0, 3.0], [0.25, 0.0, 0.0, -0.25, -0.5, 0.0, 0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.0, 0.25, -0.25, 0.0, 0.0, 1.0, 0.0, 0.5]])
A:matplotlib.tri.triinterpolate.M0->numpy.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, 0.0, 0.0, 1.5, 1.5, 0.0, 0.0, 0.0, 0.0, -3.0], [-0.5, 0.0, 0.0, 0.75, 0.75, 0.0, 0.0, 0.0, 0.0, -1.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, -1.5, -1.5, 0.0, 0.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.0, 0.0, -0.75, -0.75, 0.0, 0.0, 0.0, 0.0, 1.5]])
A:matplotlib.tri.triinterpolate.M1->numpy.array([[-0.5, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.0, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.25, 0.0, 0.0, -0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:matplotlib.tri.triinterpolate.M2->numpy.array([[0.5, 0.0, 0.0, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.25, 0.0, 0.0, 0.0, -0.75, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.5, 0.0, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.25, 0.0, 0.0, 0.0, 0.75, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:matplotlib.tri.triinterpolate.rotate_dV->numpy.array([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [-1.0, -1.0], [-1.0, -1.0], [1.0, 0.0]])
A:matplotlib.tri.triinterpolate.rotate_d2V->numpy.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [1.0, 1.0, 1.0], [0.0, -2.0, -1.0], [1.0, 1.0, 1.0], [1.0, 0.0, 0.0], [-2.0, 0.0, -1.0]])
A:matplotlib.tri.triinterpolate.gauss_pts->numpy.array([[13.0 / 18.0, 4.0 / 18.0, 1.0 / 18.0], [4.0 / 18.0, 13.0 / 18.0, 1.0 / 18.0], [7.0 / 18.0, 7.0 / 18.0, 4.0 / 18.0], [1.0 / 18.0, 13.0 / 18.0, 4.0 / 18.0], [1.0 / 18.0, 4.0 / 18.0, 13.0 / 18.0], [4.0 / 18.0, 7.0 / 18.0, 7.0 / 18.0], [4.0 / 18.0, 1.0 / 18.0, 13.0 / 18.0], [13.0 / 18.0, 1.0 / 18.0, 4.0 / 18.0], [7.0 / 18.0, 4.0 / 18.0, 7.0 / 18.0]], dtype=np.float64)
A:matplotlib.tri.triinterpolate.E->_roll_vectorized(ecc, -subtri, axis=0)
A:matplotlib.tri.triinterpolate.J0_to_J1->numpy.array([[-1.0, 1.0], [-1.0, 0.0]])
A:matplotlib.tri.triinterpolate.J0_to_J2->numpy.array([[0.0, -1.0], [1.0, -1.0]])
A:matplotlib.tri.triinterpolate.V->_to_matrix_vectorized([[x_sq * x], [y_sq * y], [z_sq * z], [x_sq * z], [x_sq * y], [y_sq * x], [y_sq * z], [z_sq * y], [z_sq * x], [x * y * z]])
A:matplotlib.tri.triinterpolate.prod->_prod_vectorized(self.M, d2V)
A:matplotlib.tri.triinterpolate.s->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri.triinterpolate.dV->_prod_vectorized(dV, _extract_submatrices(self.rotate_dV, subtri, block_size=2, axis=0))
A:matplotlib.tri.triinterpolate.dsdksi->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri.triinterpolate.dfdksi->_to_matrix_vectorized([[col0[:, 0, 0], col1[:, 0, 0], col2[:, 0, 0]], [col0[:, 1, 0], col1[:, 1, 0], col2[:, 1, 0]]])
A:matplotlib.tri.triinterpolate.J_inv->_safe_inv22_vectorized(J)
A:matplotlib.tri.triinterpolate.dfdx->_prod_vectorized(J_inv, _transpose_vectorized(dfdksi))
A:matplotlib.tri.triinterpolate.d2sdksi2->_roll_vectorized(prod, 3 * subtri, axis=0)
A:matplotlib.tri.triinterpolate.d2fdksi2->_prod_vectorized(dofs, d2sdksi2)
A:matplotlib.tri.triinterpolate.H_rot->_to_matrix_vectorized([[Ji00 * Ji00, Ji10 * Ji10, Ji00 * Ji10], [Ji01 * Ji01, Ji11 * Ji11, Ji01 * Ji11], [2 * Ji00 * Ji01, 2 * Ji11 * Ji10, Ji00 * Ji11 + Ji10 * Ji01]])
A:matplotlib.tri.triinterpolate.d2fdx2->_prod_vectorized(d2fdksi2, H_rot)
A:matplotlib.tri.triinterpolate.d2V->_prod_vectorized(d2V, _extract_submatrices(self.rotate_d2V, subtri, block_size=3, axis=0))
A:matplotlib.tri.triinterpolate.n->numpy.size(ecc, 0)
A:matplotlib.tri.triinterpolate.J1->_prod_vectorized(_ReducedHCT_Element.J0_to_J1, J)
A:matplotlib.tri.triinterpolate.J2->_prod_vectorized(_ReducedHCT_Element.J0_to_J2, J)
A:matplotlib.tri.triinterpolate.DOF_rot->numpy.zeros([n, 9, 9], dtype=np.float64)
A:matplotlib.tri.triinterpolate.(H_rot, area)->self.get_Hrot_from_J(J, return_area=True)
A:matplotlib.tri.triinterpolate.K->_prod_vectorized(_prod_vectorized(_transpose_vectorized(DOF_rot), K), DOF_rot)
A:matplotlib.tri.triinterpolate.d2Skdksi2->self.get_d2Sidksij2(alpha, ecc)
A:matplotlib.tri.triinterpolate.d2Skdx2->_prod_vectorized(d2Skdksi2, H_rot)
A:matplotlib.tri.triinterpolate.ntri->numpy.size(ecc, 0)
A:matplotlib.tri.triinterpolate.vec_range->numpy.arange(ntri, dtype=np.int32)
A:matplotlib.tri.triinterpolate.f_dof_indices->_to_matrix_vectorized([[c_indices, triangles[:, 0] * 2, triangles[:, 0] * 2 + 1, c_indices, triangles[:, 1] * 2, triangles[:, 1] * 2 + 1, c_indices, triangles[:, 2] * 2, triangles[:, 2] * 2 + 1]])
A:matplotlib.tri.triinterpolate.expand_indices->numpy.ones([ntri, 9, 1], dtype=np.int32)
A:matplotlib.tri.triinterpolate.f_row_indices->_prod_vectorized(_transpose_vectorized(f_dof_indices), _transpose_vectorized(expand_indices))
A:matplotlib.tri.triinterpolate.f_col_indices->_prod_vectorized(expand_indices, f_dof_indices)
A:matplotlib.tri.triinterpolate.K_elem->self.get_bending_matrices(J, ecc)
A:matplotlib.tri.triinterpolate.Kff_vals->numpy.ravel(K_elem[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri.triinterpolate.Kff_rows->numpy.ravel(f_row_indices[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri.triinterpolate.Kff_cols->numpy.ravel(f_col_indices[np.ix_(vec_range, f_dof, f_dof)])
A:matplotlib.tri.triinterpolate.Uc_elem->numpy.expand_dims(Uc, axis=2)
A:matplotlib.tri.triinterpolate.Ff->numpy.bincount(np.ravel(Ff_indices), weights=np.ravel(Ff_elem))
A:matplotlib.tri.triinterpolate.self.dz->self.compute_dz(**kwargs)
A:matplotlib.tri.triinterpolate.tri_dof->self.get_dof_vec(tri_z, tri_dz, J)
A:matplotlib.tri.triinterpolate.col0->_prod_vectorized(J, np.expand_dims(tri_dz[:, 0, :], axis=3))
A:matplotlib.tri.triinterpolate.col1->_prod_vectorized(J1, np.expand_dims(tri_dz[:, 1, :], axis=3))
A:matplotlib.tri.triinterpolate.col2->_prod_vectorized(J2, np.expand_dims(tri_dz[:, 2, :], axis=3))
A:matplotlib.tri.triinterpolate.el_geom_w->self.compute_geom_weights()
A:matplotlib.tri.triinterpolate.el_geom_grad->self.compute_geom_grads()
A:matplotlib.tri.triinterpolate.w_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(el_geom_w))
A:matplotlib.tri.triinterpolate.dfx_el_w->numpy.empty_like(el_geom_w)
A:matplotlib.tri.triinterpolate.dfy_el_w->numpy.empty_like(el_geom_w)
A:matplotlib.tri.triinterpolate.dfx_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(dfx_el_w))
A:matplotlib.tri.triinterpolate.dfy_node_sum->numpy.bincount(np.ravel(self._triangles), weights=np.ravel(dfy_el_w))
A:matplotlib.tri.triinterpolate.weights->numpy.zeros([np.size(self._triangles, 0), 3])
A:matplotlib.tri.triinterpolate.alpha1->numpy.arctan2(p1[:, 1] - p0[:, 1], p1[:, 0] - p0[:, 0])
A:matplotlib.tri.triinterpolate.alpha2->numpy.arctan2(p2[:, 1] - p0[:, 1], p2[:, 0] - p0[:, 0])
A:matplotlib.tri.triinterpolate.angle->numpy.abs(np.mod((alpha2 - alpha1) / np.pi, 1.0))
A:matplotlib.tri.triinterpolate.dM->numpy.dstack([dM1, dM2])
A:matplotlib.tri.triinterpolate.dM_inv->_safe_inv22_vectorized(dM)
A:matplotlib.tri.triinterpolate.df->numpy.empty_like(dZ)
A:matplotlib.tri.triinterpolate.dz_init->_DOF_estimator_geom.compute_dz(self)
A:matplotlib.tri.triinterpolate.Uf0->numpy.ravel(dz_init)
A:matplotlib.tri.triinterpolate.reference_element->_ReducedHCT_Element()
A:matplotlib.tri.triinterpolate.(Kff_rows, Kff_cols, Kff_vals, Ff)->_ReducedHCT_Element().get_Kff_and_Ff(J, eccs, triangles, Uc)
A:matplotlib.tri.triinterpolate.Kff_coo->_Sparse_Matrix_coo(Kff_vals, Kff_rows, Kff_cols, shape=(n_dof, n_dof))
A:matplotlib.tri.triinterpolate.(Uf, err)->_cg(A=Kff_coo, b=Ff, x0=Uf0, tol=tol)
A:matplotlib.tri.triinterpolate.err0->numpy.linalg.norm(Kff_coo.dot(Uf0) - Ff)
A:matplotlib.tri.triinterpolate.dz->numpy.empty([self._pts.shape[0], 2], dtype=np.float64)
A:matplotlib.tri.triinterpolate.self.vals->numpy.bincount(indices, weights=self.vals)
A:matplotlib.tri.triinterpolate.self.rows->numpy.asarray(rows, dtype=np.int32)
A:matplotlib.tri.triinterpolate.self.cols->numpy.asarray(cols, dtype=np.int32)
A:matplotlib.tri.triinterpolate.(_, unique, indices)->numpy.unique(self.m * self.rows + self.cols, return_index=True, return_inverse=True)
A:matplotlib.tri.triinterpolate.ret->numpy.zeros([self.n, self.m], dtype=np.float64)
A:matplotlib.tri.triinterpolate.diag->numpy.zeros(min(self.n, self.n), dtype=np.float64)
A:matplotlib.tri.triinterpolate.b_norm->numpy.linalg.norm(b)
A:matplotlib.tri.triinterpolate.kvec->numpy.where(kvec > 1e-06, kvec, 1e-06)
A:matplotlib.tri.triinterpolate.p->numpy.zeros(n)
A:matplotlib.tri.triinterpolate.rho->numpy.dot(r, w)
A:matplotlib.tri.triinterpolate.z->A.dot(p)
A:matplotlib.tri.triinterpolate.err->numpy.linalg.norm(A.dot(x) - b)
A:matplotlib.tri.triinterpolate.M_inv->numpy.empty_like(M)
A:matplotlib.tri.triinterpolate.delta_inv->numpy.zeros(M.shape[0])
A:matplotlib.tri.triinterpolate.ndim1->len(sh1)
A:matplotlib.tri.triinterpolate.vec_indices->numpy.arange(sh[0], dtype=np.int32)
A:matplotlib.tri.triinterpolate.M_roll->numpy.empty_like(M)
A:matplotlib.tri.triinterpolate.c_vec->numpy.asarray([len(item) for item in M])
A:matplotlib.tri.triinterpolate.r->len(M)
A:matplotlib.tri.triinterpolate.M00->numpy.asarray(M[0][0])
A:matplotlib.tri.triinterpolate.M_ret->numpy.empty(sh, dtype=dt)
A:matplotlib.tri.triinterpolate.M_ret[:, irow, icol]->numpy.asarray(M[irow][icol])
A:matplotlib.tri.triinterpolate.M_res->numpy.empty(sh, dtype=dt)
matplotlib.tri.CubicTriInterpolator(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri.CubicTriInterpolator._compute_dof(self,kind,dz=None)
matplotlib.tri.CubicTriInterpolator._compute_tri_eccentricities(tris_pts)
matplotlib.tri.CubicTriInterpolator._get_alpha_vec(x,y,tris_pts)
matplotlib.tri.CubicTriInterpolator._get_jacobian(tris_pts)
matplotlib.tri.CubicTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.CubicTriInterpolator.gradient(self,x,y)
matplotlib.tri.LinearTriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.LinearTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.LinearTriInterpolator.gradient(self,x,y)
matplotlib.tri.TriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.TriInterpolator._interpolate_multikeys(self,x,y,tri_index=None,return_keys=('z',))
matplotlib.tri.TriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri._DOF_estimator(self,interpolator,**kwargs)
matplotlib.tri._DOF_estimator.compute_dof_from_df(self)
matplotlib.tri._DOF_estimator.compute_dz(self,**kwargs)
matplotlib.tri._DOF_estimator.get_dof_vec(tri_z,tri_dz,J)
matplotlib.tri._DOF_estimator_geom(_DOF_estimator)
matplotlib.tri._DOF_estimator_geom.compute_dz(self)
matplotlib.tri._DOF_estimator_geom.compute_geom_grads(self)
matplotlib.tri._DOF_estimator_geom.compute_geom_weights(self)
matplotlib.tri._DOF_estimator_min_E(self,Interpolator)
matplotlib.tri._DOF_estimator_min_E.compute_dz(self)
matplotlib.tri._DOF_estimator_user(_DOF_estimator)
matplotlib.tri._DOF_estimator_user.compute_dz(self,dz)
matplotlib.tri._ReducedHCT_Element
matplotlib.tri._ReducedHCT_Element.get_Hrot_from_J(self,J,return_area=False)
matplotlib.tri._ReducedHCT_Element.get_Kff_and_Ff(self,J,ecc,triangles,Uc)
matplotlib.tri._ReducedHCT_Element.get_bending_matrices(self,J,ecc)
matplotlib.tri._ReducedHCT_Element.get_d2Sidksij2(self,alpha,ecc)
matplotlib.tri._ReducedHCT_Element.get_function_derivatives(self,alpha,J,ecc,dofs)
matplotlib.tri._ReducedHCT_Element.get_function_hessians(self,alpha,J,ecc,dofs)
matplotlib.tri._ReducedHCT_Element.get_function_values(self,alpha,ecc,dofs)
matplotlib.tri._Sparse_Matrix_coo(self,vals,rows,cols,shape)
matplotlib.tri._Sparse_Matrix_coo.__str__(self)
matplotlib.tri._Sparse_Matrix_coo.compress_csc(self)
matplotlib.tri._Sparse_Matrix_coo.compress_csr(self)
matplotlib.tri._Sparse_Matrix_coo.diag(self)
matplotlib.tri._Sparse_Matrix_coo.dot(self,V)
matplotlib.tri._Sparse_Matrix_coo.to_dense(self)
matplotlib.tri._cg(A,b,x0=None,tol=1e-10,maxiter=1000)
matplotlib.tri._extract_submatrices(M,block_indices,block_size,axis)
matplotlib.tri._inv22_vectorized(M)
matplotlib.tri._prod_vectorized(M1,M2)
matplotlib.tri._pseudo_inv22sym_vectorized(M)
matplotlib.tri._roll_vectorized(M,roll_indices,axis)
matplotlib.tri._safe_inv22_vectorized(M)
matplotlib.tri._scalar_vectorized(scalar,M)
matplotlib.tri._to_matrix_vectorized(M)
matplotlib.tri._transpose_vectorized(M)
matplotlib.tri.triinterpolate.CubicTriInterpolator(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri.triinterpolate.CubicTriInterpolator.__init__(self,triangulation,z,kind='min_E',trifinder=None,dz=None)
matplotlib.tri.triinterpolate.CubicTriInterpolator._compute_dof(self,kind,dz=None)
matplotlib.tri.triinterpolate.CubicTriInterpolator._compute_tri_eccentricities(tris_pts)
matplotlib.tri.triinterpolate.CubicTriInterpolator._get_alpha_vec(x,y,tris_pts)
matplotlib.tri.triinterpolate.CubicTriInterpolator._get_jacobian(tris_pts)
matplotlib.tri.triinterpolate.CubicTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.triinterpolate.CubicTriInterpolator.gradient(self,x,y)
matplotlib.tri.triinterpolate.LinearTriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.triinterpolate.LinearTriInterpolator.__init__(self,triangulation,z,trifinder=None)
matplotlib.tri.triinterpolate.LinearTriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.triinterpolate.LinearTriInterpolator.gradient(self,x,y)
matplotlib.tri.triinterpolate.TriInterpolator(self,triangulation,z,trifinder=None)
matplotlib.tri.triinterpolate.TriInterpolator.__init__(self,triangulation,z,trifinder=None)
matplotlib.tri.triinterpolate.TriInterpolator._interpolate_multikeys(self,x,y,tri_index=None,return_keys=('z',))
matplotlib.tri.triinterpolate.TriInterpolator._interpolate_single_key(self,return_key,tri_index,x,y)
matplotlib.tri.triinterpolate._DOF_estimator(self,interpolator,**kwargs)
matplotlib.tri.triinterpolate._DOF_estimator.__init__(self,interpolator,**kwargs)
matplotlib.tri.triinterpolate._DOF_estimator.compute_dof_from_df(self)
matplotlib.tri.triinterpolate._DOF_estimator.compute_dz(self,**kwargs)
matplotlib.tri.triinterpolate._DOF_estimator.get_dof_vec(tri_z,tri_dz,J)
matplotlib.tri.triinterpolate._DOF_estimator_geom(_DOF_estimator)
matplotlib.tri.triinterpolate._DOF_estimator_geom.compute_dz(self)
matplotlib.tri.triinterpolate._DOF_estimator_geom.compute_geom_grads(self)
matplotlib.tri.triinterpolate._DOF_estimator_geom.compute_geom_weights(self)
matplotlib.tri.triinterpolate._DOF_estimator_min_E(self,Interpolator)
matplotlib.tri.triinterpolate._DOF_estimator_min_E.__init__(self,Interpolator)
matplotlib.tri.triinterpolate._DOF_estimator_min_E.compute_dz(self)
matplotlib.tri.triinterpolate._DOF_estimator_user(_DOF_estimator)
matplotlib.tri.triinterpolate._DOF_estimator_user.compute_dz(self,dz)
matplotlib.tri.triinterpolate._ReducedHCT_Element
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_Hrot_from_J(self,J,return_area=False)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_Kff_and_Ff(self,J,ecc,triangles,Uc)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_bending_matrices(self,J,ecc)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_d2Sidksij2(self,alpha,ecc)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_function_derivatives(self,alpha,J,ecc,dofs)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_function_hessians(self,alpha,J,ecc,dofs)
matplotlib.tri.triinterpolate._ReducedHCT_Element.get_function_values(self,alpha,ecc,dofs)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo(self,vals,rows,cols,shape)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.__init__(self,vals,rows,cols,shape)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.__str__(self)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.compress_csc(self)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.compress_csr(self)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.diag(self)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.dot(self,V)
matplotlib.tri.triinterpolate._Sparse_Matrix_coo.to_dense(self)
matplotlib.tri.triinterpolate._cg(A,b,x0=None,tol=1e-10,maxiter=1000)
matplotlib.tri.triinterpolate._extract_submatrices(M,block_indices,block_size,axis)
matplotlib.tri.triinterpolate._inv22_vectorized(M)
matplotlib.tri.triinterpolate._prod_vectorized(M1,M2)
matplotlib.tri.triinterpolate._pseudo_inv22sym_vectorized(M)
matplotlib.tri.triinterpolate._roll_vectorized(M,roll_indices,axis)
matplotlib.tri.triinterpolate._safe_inv22_vectorized(M)
matplotlib.tri.triinterpolate._scalar_vectorized(scalar,M)
matplotlib.tri.triinterpolate._to_matrix_vectorized(M)
matplotlib.tri.triinterpolate._transpose_vectorized(M)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/triangulation.py----------------------------------------
A:matplotlib.tri.triangulation.self.x->numpy.asarray(x, dtype=np.float64)
A:matplotlib.tri.triangulation.self.y->numpy.asarray(y, dtype=np.float64)
A:matplotlib.tri.triangulation.(self.triangles, self._neighbors)->matplotlib._qhull.delaunay(x, y)
A:matplotlib.tri.triangulation.self.triangles->numpy.array(triangles, dtype=np.int32, order='C')
A:matplotlib.tri.triangulation.self.mask->numpy.asarray(mask, dtype=bool)
A:matplotlib.tri.triangulation.self._edges->self.get_cpp_triangulation().get_edges()
A:matplotlib.tri.triangulation.self._cpp_triangulation->matplotlib._tri.Triangulation(self.x, self.y, self.triangles, self.mask, self._edges, self._neighbors, not self.is_delaunay)
A:matplotlib.tri.triangulation.triangles->numpy.asarray(triangles, dtype=np.int32)
A:matplotlib.tri.triangulation.mask->kwargs.pop('mask', None)
A:matplotlib.tri.triangulation.triangulation->Triangulation(x, y, triangles, mask)
A:matplotlib.tri.triangulation.self._trifinder->TrapezoidMapTriFinder(self)
A:matplotlib.tri.triangulation.self._neighbors->self.get_cpp_triangulation().get_neighbors()
matplotlib.tri.Triangulation(self,x,y,triangles=None,mask=None)
matplotlib.tri.Triangulation.calculate_plane_coefficients(self,z)
matplotlib.tri.Triangulation.edges(self)
matplotlib.tri.Triangulation.get_cpp_triangulation(self)
matplotlib.tri.Triangulation.get_from_args_and_kwargs(*args,**kwargs)
matplotlib.tri.Triangulation.get_masked_triangles(self)
matplotlib.tri.Triangulation.get_trifinder(self)
matplotlib.tri.Triangulation.neighbors(self)
matplotlib.tri.Triangulation.set_mask(self,mask)
matplotlib.tri.triangulation.Triangulation(self,x,y,triangles=None,mask=None)
matplotlib.tri.triangulation.Triangulation.__init__(self,x,y,triangles=None,mask=None)
matplotlib.tri.triangulation.Triangulation.calculate_plane_coefficients(self,z)
matplotlib.tri.triangulation.Triangulation.edges(self)
matplotlib.tri.triangulation.Triangulation.get_cpp_triangulation(self)
matplotlib.tri.triangulation.Triangulation.get_from_args_and_kwargs(*args,**kwargs)
matplotlib.tri.triangulation.Triangulation.get_masked_triangles(self)
matplotlib.tri.triangulation.Triangulation.get_trifinder(self)
matplotlib.tri.triangulation.Triangulation.neighbors(self)
matplotlib.tri.triangulation.Triangulation.set_mask(self,mask)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/tripcolor.py----------------------------------------
A:matplotlib.tri.tripcolor.alpha->kwargs.pop('alpha', 1.0)
A:matplotlib.tri.tripcolor.norm->kwargs.pop('norm', None)
A:matplotlib.tri.tripcolor.cmap->kwargs.pop('cmap', None)
A:matplotlib.tri.tripcolor.vmin->kwargs.pop('vmin', None)
A:matplotlib.tri.tripcolor.vmax->kwargs.pop('vmax', None)
A:matplotlib.tri.tripcolor.shading->kwargs.pop('shading', 'flat')
A:matplotlib.tri.tripcolor.facecolors->kwargs.pop('facecolors', None)
A:matplotlib.tri.tripcolor.(tri, args, kwargs)->matplotlib.tri.triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri.tripcolor.C->C.compress(1 - tri.mask).compress(1 - tri.mask)
A:matplotlib.tri.tripcolor.kwargs['linewidths']->kwargs.pop('linewidth')
A:matplotlib.tri.tripcolor.kwargs['edgecolors']->kwargs.pop('edgecolor')
A:matplotlib.tri.tripcolor.ec->kwargs.setdefault('edgecolors', edgecolors)
A:matplotlib.tri.tripcolor.kwargs['antialiaseds']->kwargs.pop('antialiased')
A:matplotlib.tri.tripcolor.collection->PolyCollection(verts, **kwargs)
A:matplotlib.tri.tripcolor.maskedTris->tri.get_masked_triangles()
A:matplotlib.tri.tripcolor.verts->numpy.concatenate((tri.x[maskedTris][..., np.newaxis], tri.y[maskedTris][..., np.newaxis]), axis=2)
A:matplotlib.tri.tripcolor.minx->tri.x.min()
A:matplotlib.tri.tripcolor.maxx->tri.x.max()
A:matplotlib.tri.tripcolor.miny->tri.y.min()
A:matplotlib.tri.tripcolor.maxy->tri.y.max()
matplotlib.tri.tripcolor(ax,*args,**kwargs)
matplotlib.tri.tripcolor.tripcolor(ax,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/tricontour.py----------------------------------------
A:matplotlib.tri.tricontour.(tri, z)->self._contour_args(args, kwargs)
A:matplotlib.tri.tricontour.C->matplotlib._tri.TriContourGenerator(tri.get_cpp_triangulation(), z)
A:matplotlib.tri.tricontour.(lowers, uppers)->self._get_lowers_and_uppers()
A:matplotlib.tri.tricontour.(segs, kinds)->self.cppContourGenerator.create_filled_contour(lower, upper)
A:matplotlib.tri.tricontour.segs->self.cppContourGenerator.create_contour(level)
A:matplotlib.tri.tricontour.(tri, args, kwargs)->matplotlib.tri.triangulation.Triangulation.get_from_args_and_kwargs(*args, **kwargs)
A:matplotlib.tri.tricontour.z->numpy.asarray(args[0])
A:matplotlib.tri.tricontour.self.zmax->numpy.asarray(args[0]).max()
A:matplotlib.tri.tricontour.self.zmin->numpy.asarray(args[0]).min()
matplotlib.tri.TriContourSet(self,ax,*args,**kwargs)
matplotlib.tri.TriContourSet._contour_args(self,args,kwargs)
matplotlib.tri.TriContourSet._get_allsegs_and_allkinds(self)
matplotlib.tri.TriContourSet._process_args(self,*args,**kwargs)
matplotlib.tri.tricontour(ax,*args,**kwargs)
matplotlib.tri.tricontour.TriContourSet(self,ax,*args,**kwargs)
matplotlib.tri.tricontour.TriContourSet.__init__(self,ax,*args,**kwargs)
matplotlib.tri.tricontour.TriContourSet._contour_args(self,args,kwargs)
matplotlib.tri.tricontour.TriContourSet._get_allsegs_and_allkinds(self)
matplotlib.tri.tricontour.TriContourSet._process_args(self,*args,**kwargs)
matplotlib.tri.tricontour.tricontour(ax,*args,**kwargs)
matplotlib.tri.tricontour.tricontourf(ax,*args,**kwargs)
matplotlib.tri.tricontourf(ax,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/tri/tritools.py----------------------------------------
A:matplotlib.tri.tritools.compressed_triangles->self._triangulation.get_masked_triangles()
A:matplotlib.tri.tritools.a->numpy.sqrt(a[:, 0] ** 2 + a[:, 1] ** 2)
A:matplotlib.tri.tritools.b->numpy.sqrt(b[:, 0] ** 2 + b[:, 1] ** 2)
A:matplotlib.tri.tritools.c->numpy.sqrt(c[:, 0] ** 2 + c[:, 1] ** 2)
A:matplotlib.tri.tritools.circum_radius->numpy.empty(ntri, dtype=np.float64)
A:matplotlib.tri.tritools.current_mask->numpy.zeros(ntri, dtype=bool)
A:matplotlib.tri.tritools.valid_neighbors->numpy.where(valid_neighbors == -1, -1, renum_neighbors[valid_neighbors])
A:matplotlib.tri.tritools.renum_neighbors->numpy.arange(ntri, dtype=np.int32)
A:matplotlib.tri.tritools.added_mask->numpy.logical_and(wavefront, mask_bad_ratio)
A:matplotlib.tri.tritools.nadd->numpy.sum(added_mask)
A:matplotlib.tri.tritools.tri_renum->self._total_to_compress_renum(tri_mask, ntri)
A:matplotlib.tri.tritools.node_renum->self._total_to_compress_renum(node_mask)
A:matplotlib.tri.tritools.n->numpy.size(mask)
A:matplotlib.tri.tritools.valid->numpy.arange(n, dtype=np.int32).compress(~mask, axis=0)
A:matplotlib.tri.tritools.renum[valid]->numpy.arange(np.size(valid, 0), dtype=np.int32)
matplotlib.tri.TriAnalyzer(self,triangulation)
matplotlib.tri.TriAnalyzer._get_compressed_triangulation(self,return_tri_renum=False,return_node_renum=False)
matplotlib.tri.TriAnalyzer._total_to_compress_renum(mask,n=None)
matplotlib.tri.TriAnalyzer.circle_ratios(self,rescale=True)
matplotlib.tri.TriAnalyzer.get_flat_tri_mask(self,min_circle_ratio=0.01,rescale=True)
matplotlib.tri.TriAnalyzer.scale_factors(self)
matplotlib.tri.tritools.TriAnalyzer(self,triangulation)
matplotlib.tri.tritools.TriAnalyzer.__init__(self,triangulation)
matplotlib.tri.tritools.TriAnalyzer._get_compressed_triangulation(self,return_tri_renum=False,return_node_renum=False)
matplotlib.tri.tritools.TriAnalyzer._total_to_compress_renum(mask,n=None)
matplotlib.tri.tritools.TriAnalyzer.circle_ratios(self,rescale=True)
matplotlib.tri.tritools.TriAnalyzer.get_flat_tri_mask(self,min_circle_ratio=0.01,rescale=True)
matplotlib.tri.tritools.TriAnalyzer.scale_factors(self)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/axes/_axes.py----------------------------------------
A:matplotlib.axes._axes._log->logging.getLogger(__name__)
A:matplotlib.axes._axes.label->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('label', None)
A:matplotlib.axes._axes.(handles, labels)->matplotlib.legend._get_legend_handles_labels([self], legend_handler_map)
A:matplotlib.axes._axes.(handles, labels, extra_args, kwargs)->matplotlib.legend._parse_legend_args([self], *args, **kwargs)
A:matplotlib.axes._axes.self.legend_->matplotlib.legend.Legend(self, handles, labels, **kwargs)
A:matplotlib.axes._axes.t->t._as_mpl_transform(self.axes)._as_mpl_transform(self.axes)
A:matplotlib.axes._axes.a->matplotlib.patches.FancyArrow(x, y, dx, dy, **kwargs)
A:matplotlib.axes._axes.(ymin, ymax)->matplotlib.transforms.nonsingular(ymin, ymax, expander=0.1)
A:matplotlib.axes._axes.yy->self.convert_yunits(y)
A:matplotlib.axes._axes.trans->self.get_yaxis_transform(which='grid')
A:matplotlib.axes._axes.l->self.plot(*args, **kwargs)
A:matplotlib.axes._axes.(xmin, xmax)->matplotlib.transforms.nonsingular(xmin, xmax, expander=0.1)
A:matplotlib.axes._axes.xx->self.convert_xunits(x)
A:matplotlib.axes._axes.p->matplotlib.patches.Polygon(verts, **kwargs)
A:matplotlib.axes._axes.y->numpy.zeros(4 * len(bins) - 3)
A:matplotlib.axes._axes.xmin->min(xmin, xi.min())
A:matplotlib.axes._axes.xmax->max(xmax, xi.max())
A:matplotlib.axes._axes.(y, xmin, xmax)->matplotlib.cbook.delete_masked_points(y, xmin, xmax)
A:matplotlib.axes._axes.lines->self.plot(freqs, spec, **kwargs)
A:matplotlib.axes._axes.minx->numpy.min(x)
A:matplotlib.axes._axes.maxx->numpy.max(x)
A:matplotlib.axes._axes.miny->numpy.min(y)
A:matplotlib.axes._axes.maxy->numpy.max(y)
A:matplotlib.axes._axes.x->numpy.zeros(4 * len(bins) - 3)
A:matplotlib.axes._axes.ymin->max(ymin * 0.9, 1e-100)
A:matplotlib.axes._axes.ymax->numpy.resize(ymax, x.shape)
A:matplotlib.axes._axes.(x, ymin, ymax)->matplotlib.cbook.delete_masked_points(x, ymin, ymax)
A:matplotlib.axes._axes.positions->range(1, N + 1)
A:matplotlib.axes._axes.lineoffsets->numpy.cumsum(lineoffsets)
A:matplotlib.axes._axes.linelengths->numpy.tile(linelengths, len(positions))
A:matplotlib.axes._axes.colors->matplotlib.colors.to_rgba_array(c)
A:matplotlib.axes._axes.linewidths->numpy.tile(linewidths, len(positions))
A:matplotlib.axes._axes.linestyles->matplotlib.cbook.local_over_kwdict(linestyles, kwargs, 'linestyle')
A:matplotlib.axes._axes.coll->matplotlib.collections.EventCollection(position, orientation=orientation, lineoffset=lineoffset, linelength=linelength, linewidth=linewidth, color=color, linestyle=linestyle)
A:matplotlib.axes._axes.(mins, maxes)->zip(*min_max)
A:matplotlib.axes._axes.minpos->numpy.min(mins)
A:matplotlib.axes._axes.maxpos->numpy.max(maxes)
A:matplotlib.axes._axes.minline->(lineoffsets - linelengths).min()
A:matplotlib.axes._axes.maxline->(lineoffsets + linelengths).max()
A:matplotlib.axes._axes.scalex->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('scalex', True)
A:matplotlib.axes._axes.scaley->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('scaley', True)
A:matplotlib.axes._axes.kwargs->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases)
A:matplotlib.axes._axes.ret->self.imshow(mask, interpolation='nearest', aspect=aspect, extent=extent, origin=origin, **kwargs)
A:matplotlib.axes._axes.Nx->len(x)
A:matplotlib.axes._axes.correls->numpy.correlate(x, y, mode=2)
A:matplotlib.axes._axes.lags->numpy.arange(-maxlags, maxlags + 1)
A:matplotlib.axes._axes.b->matplotlib.quiver.Barbs(self, *args, **kw)
A:matplotlib.axes._axes.(a,)->self.plot(lags, correls, **kwargs)
A:matplotlib.axes._axes.where->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('where', 'pre')
A:matplotlib.axes._axes.usr_linestyle->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('linestyle', '')
A:matplotlib.axes._axes.(dp, x, height, width, y, kwargs)->matcher(*args, **kwargs)
A:matplotlib.axes._axes.color->matplotlib.colors.to_rgba_array(color)
A:matplotlib.axes._axes.edgecolor->itertools.chain(itertools.cycle(mcolors.to_rgba_array(edgecolor)), itertools.repeat([0, 0, 0, 0]))
A:matplotlib.axes._axes.linewidth->itertools.cycle(np.atleast_1d(linewidth))
A:matplotlib.axes._axes.xerr->self.convert_xunits(xerr)
A:matplotlib.axes._axes.yerr->self.convert_yunits(yerr)
A:matplotlib.axes._axes.error_kw->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('error_kw', dict())
A:matplotlib.axes._axes.ecolor->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('ecolor', 'k')
A:matplotlib.axes._axes.capsize->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('capsize', rcParams['errorbar.capsize'])
A:matplotlib.axes._axes.align->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('align', 'center')
A:matplotlib.axes._axes.orientation->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('orientation', 'vertical')
A:matplotlib.axes._axes.log->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('log', False)
A:matplotlib.axes._axes.tick_labels->matplotlib.cbook._backports.broadcast_to(tick_labels, len(patches))
A:matplotlib.axes._axes.width->self.convert_xunits(width)
A:matplotlib.axes._axes.height->self.convert_yunits(height)
A:matplotlib.axes._axes.(x, height, width, y, linewidth)->numpy.broadcast_arrays(np.atleast_1d(x), height, width, y, linewidth)
A:matplotlib.axes._axes.args->self._quiver_units(args, kw)
A:matplotlib.axes._axes.r->matplotlib.patches.Rectangle(xy=(l, b), width=w, height=h, facecolor=c, edgecolor=e, linewidth=lw, label='_nolegend_')
A:matplotlib.axes._axes.errorbar->self.errorbar(ex, ey, yerr=yerr, xerr=xerr, fmt='none', **error_kw)
A:matplotlib.axes._axes.bar_container->BarContainer(patches, errorbar, label=label)
A:matplotlib.axes._axes.(dp, y, width, height, left, kwargs)->matcher(*args, **kwargs)
A:matplotlib.axes._axes.patches->self.bar(x=left, height=height, width=width, bottom=y, **kwargs)
A:matplotlib.axes._axes.xdata->matplotlib.cbook.safe_first_element(xranges)
A:matplotlib.axes._axes.ydata->matplotlib.cbook.safe_first_element(yrange)
A:matplotlib.axes._axes.xranges->self.convert_xunits(xranges)
A:matplotlib.axes._axes.yrange->self.convert_yunits(yrange)
A:matplotlib.axes._axes.col->matplotlib.collections.BrokenBarHCollection(xranges, yrange, **kwargs)
A:matplotlib.axes._axes.linefmt->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('linefmt', None)
A:matplotlib.axes._axes.markerfmt->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('markerfmt', None)
A:matplotlib.axes._axes.basefmt->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('basefmt', None)
A:matplotlib.axes._axes.bottom->numpy.zeros(len(bins) - 1)
A:matplotlib.axes._axes.second->numpy.arange(len(y))
A:matplotlib.axes._axes.(linestyle, linemarker, linecolor)->_process_plot_format(linefmt)
A:matplotlib.axes._axes.(markerstyle, markermarker, markercolor)->_process_plot_format(markerfmt)
A:matplotlib.axes._axes.(basestyle, basemarker, basecolor)->_process_plot_format(basefmt)
A:matplotlib.axes._axes.(markerline,)->self.plot(x, y, color=markercolor, linestyle=markerstyle, marker=markermarker, label='_nolegend_')
A:matplotlib.axes._axes.(l,)->self.plot([thisx, thisx], [bottom, thisy], color=linecolor, linestyle=linestyle, marker=linemarker, label='_nolegend_')
A:matplotlib.axes._axes.(baseline,)->self.plot([np.min(x), np.max(x)], [bottom, bottom], color=basecolor, linestyle=basestyle, marker=basemarker, label='_nolegend_')
A:matplotlib.axes._axes.stem_container->StemContainer((markerline, stemlines, baseline), label=label)
A:matplotlib.axes._axes.sx->numpy.zeros(4 * len(bins) - 3).sum()
A:matplotlib.axes._axes.color_cycle->itertools.cycle(colors)
A:matplotlib.axes._axes.w->matplotlib.cbook._reshape_2D(weights, 'weights')
A:matplotlib.axes._axes.shad->matplotlib.patches.Shadow(w, -0.02, -0.02)
A:matplotlib.axes._axes.s->numpy.ma.ravel(s)
A:matplotlib.axes._axes.base_style['color']->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('color')
A:matplotlib.axes._axes.base_style->next(self._get_lines.prop_cycler)
A:matplotlib.axes._axes.plot_line_style->dict(base_style)
A:matplotlib.axes._axes.eb_lines_style->dict(base_style)
A:matplotlib.axes._axes.eb_cap_style->dict(base_style)
A:matplotlib.axes._axes.data_line->matplotlib.lines.Line2D(x, y, **plot_line_style)
A:matplotlib.axes._axes.lolims->_bool_asarray_helper(lolims, len(x))
A:matplotlib.axes._axes.uplims->_bool_asarray_helper(uplims, len(x))
A:matplotlib.axes._axes.xlolims->_bool_asarray_helper(xlolims, len(x))
A:matplotlib.axes._axes.xuplims->_bool_asarray_helper(xuplims, len(x))
A:matplotlib.axes._axes.fe->safe_first_element(err)
A:matplotlib.axes._axes.(left, right)->extract_err(xerr, x)
A:matplotlib.axes._axes.(yo, _)->xywhere(y, right, xuplims & everymask)
A:matplotlib.axes._axes.(lo, ro)->xywhere(left, x, xuplims & everymask)
A:matplotlib.axes._axes.(rightup, yup)->xywhere(right, y, xlolims & everymask)
A:matplotlib.axes._axes.(xlo, ylo)->xywhere(x, y, lolims & everymask)
A:matplotlib.axes._axes.(leftlo, ylo)->xywhere(left, y, xuplims & everymask)
A:matplotlib.axes._axes.(xup, yup)->xywhere(x, y, uplims & everymask)
A:matplotlib.axes._axes.(lower, upper)->extract_err(yerr, y)
A:matplotlib.axes._axes.(xo, _)->xywhere(x, lower, uplims & everymask)
A:matplotlib.axes._axes.(lo, uo)->xywhere(lower, y, uplims & everymask)
A:matplotlib.axes._axes.(xup, upperup)->xywhere(x, upper, lolims & everymask)
A:matplotlib.axes._axes.(xlo, lowerlo)->xywhere(x, lower, uplims & everymask)
A:matplotlib.axes._axes.errorbar_container->ErrorbarContainer((data_line, tuple(caplines), tuple(barcols)), has_xerr=xerr is not None, has_yerr=yerr is not None, label=label)
A:matplotlib.axes._axes.bxpstats->matplotlib.cbook.boxplot_stats(x, whis=whis, bootstrap=bootstrap, labels=labels, autorange=autorange)
A:matplotlib.axes._axes.dictionary->dict()
A:matplotlib.axes._axes.boxprops->_update_dict(boxprops, 'boxprops', default_props)
A:matplotlib.axes._axes.whiskerprops->_update_dict(whiskerprops, 'whiskerprops', default_props)
A:matplotlib.axes._axes.capprops->_update_dict(capprops, 'capprops', default_props)
A:matplotlib.axes._axes.medianprops->_update_dict(medianprops, 'medianprops', default_props)
A:matplotlib.axes._axes.meanprops->_update_dict(meanprops, 'meanprops', default_props)
A:matplotlib.axes._axes.flierprops->dict(linestyle='none', marker='', color='none')
A:matplotlib.axes._axes.boxprops['edgecolor']->_update_dict(boxprops, 'boxprops', default_props).pop('color')
A:matplotlib.axes._axes.(_, marker, color)->_process_plot_format(sym)
A:matplotlib.axes._axes.artists->self.bxp(bxpstats, positions=positions, widths=widths, vert=vert, patch_artist=patch_artist, shownotches=notch, showmeans=showmeans, showcaps=showcaps, showbox=showbox, boxprops=boxprops, flierprops=flierprops, medianprops=medianprops, meanprops=meanprops, meanline=meanline, showfliers=showfliers, capprops=capprops, whiskerprops=whiskerprops, manage_xticks=manage_xticks, zorder=zorder)
A:matplotlib.axes._axes.final_boxprops->dict(linestyle=rcParams['boxplot.boxprops.linestyle'], color=rcParams['boxplot.boxprops.color'])
A:matplotlib.axes._axes.final_whiskerprops->dict(linestyle=rcParams['boxplot.whiskerprops.linestyle'], linewidth=rcParams['boxplot.whiskerprops.linewidth'], color=rcParams['boxplot.whiskerprops.color'])
A:matplotlib.axes._axes.final_capprops->dict(linestyle=rcParams['boxplot.capprops.linestyle'], linewidth=rcParams['boxplot.capprops.linewidth'], color=rcParams['boxplot.capprops.color'])
A:matplotlib.axes._axes.final_flierprops->dict(linestyle=rcParams['boxplot.flierprops.linestyle'], linewidth=rcParams['boxplot.flierprops.linewidth'], color=rcParams['boxplot.flierprops.color'], marker=rcParams['boxplot.flierprops.marker'], markerfacecolor=rcParams['boxplot.flierprops.markerfacecolor'], markeredgecolor=rcParams['boxplot.flierprops.markeredgecolor'], markersize=rcParams['boxplot.flierprops.markersize'])
A:matplotlib.axes._axes.final_medianprops->dict(linestyle=rcParams['boxplot.medianprops.linestyle'], linewidth=rcParams['boxplot.medianprops.linewidth'], color=rcParams['boxplot.medianprops.color'])
A:matplotlib.axes._axes.final_meanprops->dict(linestyle='', marker=rcParams['boxplot.meanprops.marker'], markerfacecolor=rcParams['boxplot.meanprops.markerfacecolor'], markeredgecolor=rcParams['boxplot.meanprops.markeredgecolor'], markersize=rcParams['boxplot.meanprops.markersize'])
A:matplotlib.axes._axes.verts->numpy.concatenate((X1[:, newaxis], Y1[:, newaxis], X2[:, newaxis], Y2[:, newaxis], X3[:, newaxis], Y3[:, newaxis], X4[:, newaxis], Y4[:, newaxis], X1[:, newaxis], Y1[:, newaxis]), axis=1).reshape((npoly, 5, 2))
A:matplotlib.axes._axes.(verts, codes)->to_vc(xs, ys)
A:matplotlib.axes._axes.path->matplotlib.markers.MarkerStyle(marker).get_path().transformed(marker_obj.get_transform())
A:matplotlib.axes._axes.patch->_barfunc(bins[:-1] + boffset, height, width, align='center', log=log, color=c, **{bottom_kwarg: bottom})
A:matplotlib.axes._axes.N->len(vpstats)
A:matplotlib.axes._axes.whiskerlo_y->numpy.array([stats['q1'], stats['whislo']])
A:matplotlib.axes._axes.whiskerhi_y->numpy.array([stats['q3'], stats['whishi']])
A:matplotlib.axes._axes.cap_x->numpy.array([cap_left, cap_right])
A:matplotlib.axes._axes.edgecolors->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('edgecolor', edgecolors)
A:matplotlib.axes._axes.fc->self._get_patches_for_fill.get_next_color()
A:matplotlib.axes._axes.co->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('color', None)
A:matplotlib.axes._axes.c->numpy.asanyarray(Z).tocoo()
A:matplotlib.axes._axes.c_array->numpy.asanyarray(c, dtype=float)
A:matplotlib.axes._axes.(x, y, s, c, colors, edgecolors, linewidths)->matplotlib.cbook.delete_masked_points(x, y, s, c, colors, edgecolors, linewidths)
A:matplotlib.axes._axes.marker_obj->matplotlib.markers.MarkerStyle(marker)
A:matplotlib.axes._axes.offsets->numpy.zeros((n, 2), float)
A:matplotlib.axes._axes.collection->matplotlib.collections.QuadMesh(nc, nr, coords, 0, edgecolors='None')
A:matplotlib.axes._axes.(x, y, C)->matplotlib.cbook.delete_masked_points(x, y, C)
A:matplotlib.axes._axes.ny->int(nx / math.sqrt(3))
A:matplotlib.axes._axes.xorig->numpy.zeros(4 * len(bins) - 3).copy()
A:matplotlib.axes._axes.yorig->numpy.zeros(4 * len(bins) - 3).copy()
A:matplotlib.axes._axes.ix1->numpy.round(x).astype(int)
A:matplotlib.axes._axes.iy1->numpy.round(y).astype(int)
A:matplotlib.axes._axes.ix2->numpy.floor(x).astype(int)
A:matplotlib.axes._axes.iy2->numpy.floor(y).astype(int)
A:matplotlib.axes._axes.lattice1->numpy.empty((nx1, ny1), dtype=object)
A:matplotlib.axes._axes.lattice2->numpy.empty((nx2, ny2), dtype=object)
A:matplotlib.axes._axes.accum->numpy.sort(bins).searchsorted(accum)
A:matplotlib.axes._axes.lattice1[i, j]->reduce_C_function(vals)
A:matplotlib.axes._axes.lattice2[i, j]->reduce_C_function(vals)
A:matplotlib.axes._axes.offsets[:nx1 * ny1, 0]->numpy.repeat(np.arange(nx1), ny1)
A:matplotlib.axes._axes.offsets[:nx1 * ny1, 1]->numpy.tile(np.arange(ny1), nx1)
A:matplotlib.axes._axes.offsets[nx1 * ny1:, 0]->numpy.repeat(np.arange(nx2) + 0.5, ny2)
A:matplotlib.axes._axes.polygon->numpy.zeros((6, 2), float)
A:matplotlib.axes._axes.bins->numpy.sort(bins)
A:matplotlib.axes._axes.C->numpy.ma.ravel(C)
A:matplotlib.axes._axes.ind->numpy.linspace(ymin, ymax, gridsize).searchsorted(x).clip(0, len(coarse) - 1)
A:matplotlib.axes._axes.mus->numpy.zeros(len(coarse))
A:matplotlib.axes._axes.mu->reduce_C_function(yi)
A:matplotlib.axes._axes.coarse->numpy.linspace(ymin, ymax, gridsize)
A:matplotlib.axes._axes.xcoarse->coarse_bin(xorig, C, coarse)
A:matplotlib.axes._axes.values->numpy.array(values)
A:matplotlib.axes._axes.hbar->matplotlib.collections.PolyCollection(verts, transform=trans, edgecolors='face')
A:matplotlib.axes._axes.ycoarse->coarse_bin(yorig, C, coarse)
A:matplotlib.axes._axes.vbar->matplotlib.collections.PolyCollection(verts, transform=trans, edgecolors='face')
A:matplotlib.axes._axes.dx->numpy.diff(x)
A:matplotlib.axes._axes.dy->numpy.diff(y)
A:matplotlib.axes._axes.qk->matplotlib.quiver.QuiverKey(*args, **kw)
A:matplotlib.axes._axes.q->matplotlib.quiver.Quiver(self, *args, **kw)
A:matplotlib.axes._axes.stream_container->matplotlib.streamplot.streamplot(self, x, y, u, v, density=density, linewidth=linewidth, color=color, cmap=cmap, norm=norm, arrowsize=arrowsize, arrowstyle=arrowstyle, minlength=minlength, start_points=start_points, transform=transform, zorder=zorder, maxlength=maxlength, integration_direction=integration_direction)
A:matplotlib.axes._axes.y1->numpy.ma.masked_invalid(self.convert_yunits(y1))
A:matplotlib.axes._axes.y2->numpy.ma.masked_invalid(self.convert_yunits(y2))
A:matplotlib.axes._axes.(x, y1, y2)->numpy.broadcast_arrays(np.atleast_1d(x), y1, y2)
A:matplotlib.axes._axes.(xslice, y1slice, y2slice)->step_func(xslice, y1slice, y2slice)
A:matplotlib.axes._axes.X->numpy.zeros(4 * len(bins) - 3).ravel()
A:matplotlib.axes._axes.im1->max(ind - 1, 0)
A:matplotlib.axes._axes.diff_order->diff_values.argsort()
A:matplotlib.axes._axes.diff_root_x->numpy.interp(diff_root_y, y_values[y_order], x1_values[y_order])
A:matplotlib.axes._axes.x_order->x_values.argsort()
A:matplotlib.axes._axes.diff_root_y->numpy.interp(0, diff_values[diff_order], y_values[diff_order])
A:matplotlib.axes._axes.start->get_interp_point(ind0)
A:matplotlib.axes._axes.end->get_interp_point(ind1)
A:matplotlib.axes._axes.x1->numpy.ma.masked_invalid(self.convert_xunits(x1))
A:matplotlib.axes._axes.x2->numpy.ma.masked_invalid(self.convert_xunits(x2))
A:matplotlib.axes._axes.(y, x1, x2)->numpy.broadcast_arrays(np.atleast_1d(y), x1, x2)
A:matplotlib.axes._axes.(yslice, x1slice, x2slice)->step_func(yslice, x1slice, x2slice)
A:matplotlib.axes._axes.Y->numpy.zeros(4 * len(bins) - 3).ravel()
A:matplotlib.axes._axes.y_order->y_values.argsort()
A:matplotlib.axes._axes.im->self.imshow(Z, **kw)
A:matplotlib.axes._axes.allmatch->kw.pop('allmatch', False)
A:matplotlib.axes._axes.(X, Y)->numpy.meshgrid(np.arange(numCols + 1), np.arange(numRows + 1))
A:matplotlib.axes._axes.alpha->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('alpha', None)
A:matplotlib.axes._axes.norm->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('norm', None)
A:matplotlib.axes._axes.cmap->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('cmap', None)
A:matplotlib.axes._axes.vmin->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('vmin', None)
A:matplotlib.axes._axes.vmax->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('vmax', None)
A:matplotlib.axes._axes.(X, Y, C)->self._pcolorargs('pcolormesh', *args, allmatch=allmatch)
A:matplotlib.axes._axes.ravelmask->(mask == 0).ravel()
A:matplotlib.axes._axes.X1->compress(ravelmask, ma.filled(X[0:-1, 0:-1]).ravel())
A:matplotlib.axes._axes.Y1->compress(ravelmask, ma.filled(Y[0:-1, 0:-1]).ravel())
A:matplotlib.axes._axes.X2->compress(ravelmask, ma.filled(X[1:, 0:-1]).ravel())
A:matplotlib.axes._axes.Y2->compress(ravelmask, ma.filled(Y[1:, 0:-1]).ravel())
A:matplotlib.axes._axes.X3->compress(ravelmask, ma.filled(X[1:, 1:]).ravel())
A:matplotlib.axes._axes.Y3->compress(ravelmask, ma.filled(Y[1:, 1:]).ravel())
A:matplotlib.axes._axes.X4->compress(ravelmask, ma.filled(X[0:-1, 1:]).ravel())
A:matplotlib.axes._axes.Y4->compress(ravelmask, ma.filled(Y[0:-1, 1:]).ravel())
A:matplotlib.axes._axes.npoly->len(X1)
A:matplotlib.axes._axes.xy->numpy.concatenate((X1[:, newaxis], Y1[:, newaxis], X2[:, newaxis], Y2[:, newaxis], X3[:, newaxis], Y3[:, newaxis], X4[:, newaxis], Y4[:, newaxis], X1[:, newaxis], Y1[:, newaxis]), axis=1)
A:matplotlib.axes._axes.kwargs['linewidths']->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('linewidth')
A:matplotlib.axes._axes.kwargs['edgecolors']->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('edgecolor')
A:matplotlib.axes._axes.ec->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).setdefault('edgecolors', 'none')
A:matplotlib.axes._axes.kwargs['antialiaseds']->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('antialiased')
A:matplotlib.axes._axes.pts->numpy.vstack([x, y]).T.astype(float)
A:matplotlib.axes._axes.transformed_pts->trans_to_data.transform(pts)
A:matplotlib.axes._axes.shading->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('shading', 'flat').lower()
A:matplotlib.axes._axes.antialiased->matplotlib.cbook.normalize_kwargs(kwargs, color_aliases).pop('antialiased', False)
A:matplotlib.axes._axes.coords->numpy.empty((Nx * Ny, 2), np.float64)
A:matplotlib.axes._axes.(minx, miny)->numpy.min(coords, axis=0)
A:matplotlib.axes._axes.(maxx, maxy)->numpy.max(coords, axis=0)
A:matplotlib.axes._axes.contours->matplotlib.contour.QuadContourSet(self, *args, **kwargs)
A:matplotlib.axes._axes.nx->len(x)
A:matplotlib.axes._axes.bin_range->self.convert_xunits(bin_range)
A:matplotlib.axes._axes.hist_kwargs->dict(range=bin_range)
A:matplotlib.axes._axes.(m, bins)->numpy.histogram(x[i], bins, weights=w[i], **hist_kwargs)
A:matplotlib.axes._axes.m->m.astype(float).astype(float)
A:matplotlib.axes._axes.mlast->numpy.zeros(len(bins) - 1, m.dtype)
A:matplotlib.axes._axes.db->numpy.diff(bins)
A:matplotlib.axes._axes.slc->slice(None, None, -1)
A:matplotlib.axes._axes._saved_autoscalex->self.get_autoscalex_on()
A:matplotlib.axes._axes._saved_autoscaley->self.get_autoscaley_on()
A:matplotlib.axes._axes.totwidth->numpy.diff(bins)
A:matplotlib.axes._axes.dr->numpy.clip(rwidth, 0, 1)
A:matplotlib.axes._axes.minimum->numpy.min(bottom)
A:matplotlib.axes._axes.ndata->numpy.array(tops)
A:matplotlib.axes._axes.(h, xedges, yedges)->numpy.histogram2d(x, y, bins=bins, range=range, normed=normed, weights=weights)
A:matplotlib.axes._axes.pc->self.pcolorfast(xedges, yedges, h.T, **kwargs)
A:matplotlib.axes._axes.(pxx, freqs)->matplotlib.mlab.psd(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.axes._axes.line->self.plot(freqs, 10 * np.log10(np.abs(pxy)), **kwargs)
A:matplotlib.axes._axes.logi->int(np.log10(intv))
A:matplotlib.axes._axes.ticks->numpy.arange(math.floor(vmin), math.ceil(vmax) + 1, step)
A:matplotlib.axes._axes.(pxy, freqs)->matplotlib.mlab.csd(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq)
A:matplotlib.axes._axes.(spec, freqs)->matplotlib.mlab.phase_spectrum(x=x, Fs=Fs, window=window, pad_to=pad_to, sides=sides)
A:matplotlib.axes._axes.(cxy, freqs)->matplotlib.mlab.cohere(x=x, y=y, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, scale_by_freq=scale_by_freq)
A:matplotlib.axes._axes.(spec, freqs, t)->matplotlib.mlab.specgram(x=x, NFFT=NFFT, Fs=Fs, detrend=detrend, window=window, noverlap=noverlap, pad_to=pad_to, sides=sides, scale_by_freq=scale_by_freq, mode=mode)
A:matplotlib.axes._axes.Z->numpy.asanyarray(Z)
A:matplotlib.axes._axes.kwargs['cmap']->matplotlib.colors.ListedColormap(['w', 'k'], name='binary')
A:matplotlib.axes._axes.(y, x)->numpy.nonzero(nonzero)
A:matplotlib.axes._axes.marks->matplotlib.lines.Line2D(x, y, linestyle='None', marker=marker, markersize=markersize, **kwargs)
A:matplotlib.axes._axes.kde->matplotlib.mlab.GaussianKDE(X, bw_method)
A:matplotlib.axes._axes.vpstats->matplotlib.cbook.violin_stats(dataset, _kde_method, points=points)
A:matplotlib.axes._axes.fillcoloredgecolor->self._get_lines.get_next_color()
A:matplotlib.axes._axes.vals->numpy.array(stats['vals'])
A:matplotlib.axes._axes.artists['cmeans']->perp_lines(means, pmins, pmaxes, colors=edgecolor)
A:matplotlib.axes._axes.artists['cmaxes']->perp_lines(maxes, pmins, pmaxes, colors=edgecolor)
A:matplotlib.axes._axes.artists['cmins']->perp_lines(mins, pmins, pmaxes, colors=edgecolor)
A:matplotlib.axes._axes.artists['cbars']->par_lines(positions, mins, maxes, colors=edgecolor)
A:matplotlib.axes._axes.artists['cmedians']->perp_lines(medians, pmins, pmaxes, colors=edgecolor)
matplotlib.axes.Axes(_AxesBase)
matplotlib.axes.Axes._pcolorargs(funcname,*args,**kw)
matplotlib.axes.Axes._quiver_units(self,args,kw)
matplotlib.axes.Axes.acorr(self,x,**kwargs)
matplotlib.axes.Axes.angle_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes.Axes.annotate(self,*args,**kwargs)
matplotlib.axes.Axes.arrow(self,x,y,dx,dy,**kwargs)
matplotlib.axes.Axes.axhline(self,y=0,xmin=0,xmax=1,**kwargs)
matplotlib.axes.Axes.axhspan(self,ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.axes.Axes.axvline(self,x=0,ymin=0,ymax=1,**kwargs)
matplotlib.axes.Axes.axvspan(self,xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.axes.Axes.bar(self,*args,**kwargs)
matplotlib.axes.Axes.barbs(self,*args,**kw)
matplotlib.axes.Axes.barh(self,*args,**kwargs)
matplotlib.axes.Axes.boxplot(self,x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_xticks=True,autorange=False,zorder=None)
matplotlib.axes.Axes.broken_barh(self,xranges,yrange,**kwargs)
matplotlib.axes.Axes.bxp(self,bxpstats,positions=None,widths=None,vert=True,patch_artist=False,shownotches=False,showmeans=False,showcaps=True,showbox=True,showfliers=True,boxprops=None,whiskerprops=None,flierprops=None,medianprops=None,capprops=None,meanprops=None,meanline=False,manage_xticks=True,zorder=None)
matplotlib.axes.Axes.clabel(self,CS,*args,**kwargs)
matplotlib.axes.Axes.cohere(self,x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,**kwargs)
matplotlib.axes.Axes.contour(self,*args,**kwargs)
matplotlib.axes.Axes.contourf(self,*args,**kwargs)
matplotlib.axes.Axes.csd(self,x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes.Axes.errorbar(self,x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,**kwargs)
matplotlib.axes.Axes.eventplot(self,positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,linestyles='solid',**kwargs)
matplotlib.axes.Axes.fill(self,*args,**kwargs)
matplotlib.axes.Axes.fill_between(self,x,y1,y2=0,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes.Axes.fill_betweenx(self,y,x1,x2=0,where=None,step=None,interpolate=False,**kwargs)
matplotlib.axes.Axes.get_legend_handles_labels(self,legend_handler_map=None)
matplotlib.axes.Axes.get_title(self,loc='center')
matplotlib.axes.Axes.get_xlabel(self)
matplotlib.axes.Axes.get_ylabel(self)
matplotlib.axes.Axes.hexbin(self,x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,**kwargs)
matplotlib.axes.Axes.hist(self,x,bins=None,range=None,density=None,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,normed=None,**kwargs)
matplotlib.axes.Axes.hist2d(self,x,y,bins=10,range=None,normed=False,weights=None,cmin=None,cmax=None,**kwargs)
matplotlib.axes.Axes.hlines(self,y,xmin,xmax,colors='k',linestyles='solid',label='',**kwargs)
matplotlib.axes.Axes.imshow(self,X,cmap=None,norm=None,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,shape=None,filternorm=1,filterrad=4.0,imlim=None,resample=None,url=None,**kwargs)
matplotlib.axes.Axes.legend(self,*args,**kwargs)
matplotlib.axes.Axes.loglog(self,*args,**kwargs)
matplotlib.axes.Axes.magnitude_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,**kwargs)
matplotlib.axes.Axes.matshow(self,Z,**kwargs)
matplotlib.axes.Axes.pcolor(self,*args,**kwargs)
matplotlib.axes.Axes.pcolorfast(self,*args,**kwargs)
matplotlib.axes.Axes.pcolormesh(self,*args,**kwargs)
matplotlib.axes.Axes.phase_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes.Axes.pie(self,x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=None,radius=None,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False)
matplotlib.axes.Axes.plot(self,*args,**kwargs)
matplotlib.axes.Axes.plot_date(self,x,y,fmt='o',tz=None,xdate=True,ydate=False,**kwargs)
matplotlib.axes.Axes.psd(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes.Axes.quiver(self,*args,**kw)
matplotlib.axes.Axes.quiverkey(self,*args,**kw)
matplotlib.axes.Axes.scatter(self,x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,verts=None,edgecolors=None,**kwargs)
matplotlib.axes.Axes.semilogx(self,*args,**kwargs)
matplotlib.axes.Axes.semilogy(self,*args,**kwargs)
matplotlib.axes.Axes.set_title(self,label,fontdict=None,loc='center',pad=None,**kwargs)
matplotlib.axes.Axes.set_xlabel(self,xlabel,fontdict=None,labelpad=None,**kwargs)
matplotlib.axes.Axes.set_ylabel(self,ylabel,fontdict=None,labelpad=None,**kwargs)
matplotlib.axes.Axes.specgram(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes.Axes.spy(self,Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.axes.Axes.stackplot(self,x,*args,**kwargs)
matplotlib.axes.Axes.stem(self,*args,**kwargs)
matplotlib.axes.Axes.step(self,x,y,*args,**kwargs)
matplotlib.axes.Axes.streamplot(self,x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both')
matplotlib.axes.Axes.table(self,**kwargs)
matplotlib.axes.Axes.text(self,x,y,s,fontdict=None,withdash=False,**kwargs)
matplotlib.axes.Axes.tricontour(self,*args,**kwargs)
matplotlib.axes.Axes.tricontourf(self,*args,**kwargs)
matplotlib.axes.Axes.tripcolor(self,*args,**kwargs)
matplotlib.axes.Axes.triplot(self,*args,**kwargs)
matplotlib.axes.Axes.violin(self,vpstats,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False)
matplotlib.axes.Axes.violinplot(self,dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,points=100,bw_method=None)
matplotlib.axes.Axes.vlines(self,x,ymin,ymax,colors='k',linestyles='solid',label='',**kwargs)
matplotlib.axes.Axes.xcorr(self,x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,**kwargs)
matplotlib.axes._axes.Axes(_AxesBase)
matplotlib.axes._axes.Axes._pcolorargs(funcname,*args,**kw)
matplotlib.axes._axes.Axes._quiver_units(self,args,kw)
matplotlib.axes._axes.Axes.acorr(self,x,**kwargs)
matplotlib.axes._axes.Axes.angle_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes._axes.Axes.annotate(self,*args,**kwargs)
matplotlib.axes._axes.Axes.arrow(self,x,y,dx,dy,**kwargs)
matplotlib.axes._axes.Axes.axhline(self,y=0,xmin=0,xmax=1,**kwargs)
matplotlib.axes._axes.Axes.axhspan(self,ymin,ymax,xmin=0,xmax=1,**kwargs)
matplotlib.axes._axes.Axes.axvline(self,x=0,ymin=0,ymax=1,**kwargs)
matplotlib.axes._axes.Axes.axvspan(self,xmin,xmax,ymin=0,ymax=1,**kwargs)
matplotlib.axes._axes.Axes.bar(self,*args,**kwargs)
matplotlib.axes._axes.Axes.barbs(self,*args,**kw)
matplotlib.axes._axes.Axes.barh(self,*args,**kwargs)
matplotlib.axes._axes.Axes.boxplot(self,x,notch=None,sym=None,vert=None,whis=None,positions=None,widths=None,patch_artist=None,bootstrap=None,usermedians=None,conf_intervals=None,meanline=None,showmeans=None,showcaps=None,showbox=None,showfliers=None,boxprops=None,labels=None,flierprops=None,medianprops=None,meanprops=None,capprops=None,whiskerprops=None,manage_xticks=True,autorange=False,zorder=None)
matplotlib.axes._axes.Axes.broken_barh(self,xranges,yrange,**kwargs)
matplotlib.axes._axes.Axes.bxp(self,bxpstats,positions=None,widths=None,vert=True,patch_artist=False,shownotches=False,showmeans=False,showcaps=True,showbox=True,showfliers=True,boxprops=None,whiskerprops=None,flierprops=None,medianprops=None,capprops=None,meanprops=None,meanline=False,manage_xticks=True,zorder=None)
matplotlib.axes._axes.Axes.clabel(self,CS,*args,**kwargs)
matplotlib.axes._axes.Axes.cohere(self,x,y,NFFT=256,Fs=2,Fc=0,detrend=mlab.detrend_none,window=mlab.window_hanning,noverlap=0,pad_to=None,sides='default',scale_by_freq=None,**kwargs)
matplotlib.axes._axes.Axes.contour(self,*args,**kwargs)
matplotlib.axes._axes.Axes.contourf(self,*args,**kwargs)
matplotlib.axes._axes.Axes.csd(self,x,y,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes._axes.Axes.errorbar(self,x,y,yerr=None,xerr=None,fmt='',ecolor=None,elinewidth=None,capsize=None,barsabove=False,lolims=False,uplims=False,xlolims=False,xuplims=False,errorevery=1,capthick=None,**kwargs)
matplotlib.axes._axes.Axes.eventplot(self,positions,orientation='horizontal',lineoffsets=1,linelengths=1,linewidths=None,colors=None,linestyles='solid',**kwargs)
matplotlib.axes._axes.Axes.fill(self,*args,**kwargs)
matplotlib.axes._axes.Axes.fill_between(self,x,y1,y2=0,where=None,interpolate=False,step=None,**kwargs)
matplotlib.axes._axes.Axes.fill_betweenx(self,y,x1,x2=0,where=None,step=None,interpolate=False,**kwargs)
matplotlib.axes._axes.Axes.get_legend_handles_labels(self,legend_handler_map=None)
matplotlib.axes._axes.Axes.get_title(self,loc='center')
matplotlib.axes._axes.Axes.get_xlabel(self)
matplotlib.axes._axes.Axes.get_ylabel(self)
matplotlib.axes._axes.Axes.hexbin(self,x,y,C=None,gridsize=100,bins=None,xscale='linear',yscale='linear',extent=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,edgecolors='face',reduce_C_function=np.mean,mincnt=None,marginals=False,**kwargs)
matplotlib.axes._axes.Axes.hist(self,x,bins=None,range=None,density=None,weights=None,cumulative=False,bottom=None,histtype='bar',align='mid',orientation='vertical',rwidth=None,log=False,color=None,label=None,stacked=False,normed=None,**kwargs)
matplotlib.axes._axes.Axes.hist2d(self,x,y,bins=10,range=None,normed=False,weights=None,cmin=None,cmax=None,**kwargs)
matplotlib.axes._axes.Axes.hlines(self,y,xmin,xmax,colors='k',linestyles='solid',label='',**kwargs)
matplotlib.axes._axes.Axes.imshow(self,X,cmap=None,norm=None,aspect=None,interpolation=None,alpha=None,vmin=None,vmax=None,origin=None,extent=None,shape=None,filternorm=1,filterrad=4.0,imlim=None,resample=None,url=None,**kwargs)
matplotlib.axes._axes.Axes.legend(self,*args,**kwargs)
matplotlib.axes._axes.Axes.loglog(self,*args,**kwargs)
matplotlib.axes._axes.Axes.magnitude_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,scale=None,**kwargs)
matplotlib.axes._axes.Axes.matshow(self,Z,**kwargs)
matplotlib.axes._axes.Axes.pcolor(self,*args,**kwargs)
matplotlib.axes._axes.Axes.pcolorfast(self,*args,**kwargs)
matplotlib.axes._axes.Axes.pcolormesh(self,*args,**kwargs)
matplotlib.axes._axes.Axes.phase_spectrum(self,x,Fs=None,Fc=None,window=None,pad_to=None,sides=None,**kwargs)
matplotlib.axes._axes.Axes.pie(self,x,explode=None,labels=None,colors=None,autopct=None,pctdistance=0.6,shadow=False,labeldistance=1.1,startangle=None,radius=None,counterclock=True,wedgeprops=None,textprops=None,center=(0,0),frame=False,rotatelabels=False)
matplotlib.axes._axes.Axes.plot(self,*args,**kwargs)
matplotlib.axes._axes.Axes.plot_date(self,x,y,fmt='o',tz=None,xdate=True,ydate=False,**kwargs)
matplotlib.axes._axes.Axes.psd(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,pad_to=None,sides=None,scale_by_freq=None,return_line=None,**kwargs)
matplotlib.axes._axes.Axes.quiver(self,*args,**kw)
matplotlib.axes._axes.Axes.quiverkey(self,*args,**kw)
matplotlib.axes._axes.Axes.scatter(self,x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,verts=None,edgecolors=None,**kwargs)
matplotlib.axes._axes.Axes.semilogx(self,*args,**kwargs)
matplotlib.axes._axes.Axes.semilogy(self,*args,**kwargs)
matplotlib.axes._axes.Axes.set_title(self,label,fontdict=None,loc='center',pad=None,**kwargs)
matplotlib.axes._axes.Axes.set_xlabel(self,xlabel,fontdict=None,labelpad=None,**kwargs)
matplotlib.axes._axes.Axes.set_ylabel(self,ylabel,fontdict=None,labelpad=None,**kwargs)
matplotlib.axes._axes.Axes.specgram(self,x,NFFT=None,Fs=None,Fc=None,detrend=None,window=None,noverlap=None,cmap=None,xextent=None,pad_to=None,sides=None,scale_by_freq=None,mode=None,scale=None,vmin=None,vmax=None,**kwargs)
matplotlib.axes._axes.Axes.spy(self,Z,precision=0,marker=None,markersize=None,aspect='equal',origin='upper',**kwargs)
matplotlib.axes._axes.Axes.stackplot(self,x,*args,**kwargs)
matplotlib.axes._axes.Axes.stem(self,*args,**kwargs)
matplotlib.axes._axes.Axes.step(self,x,y,*args,**kwargs)
matplotlib.axes._axes.Axes.streamplot(self,x,y,u,v,density=1,linewidth=None,color=None,cmap=None,norm=None,arrowsize=1,arrowstyle='-|>',minlength=0.1,transform=None,zorder=None,start_points=None,maxlength=4.0,integration_direction='both')
matplotlib.axes._axes.Axes.table(self,**kwargs)
matplotlib.axes._axes.Axes.text(self,x,y,s,fontdict=None,withdash=False,**kwargs)
matplotlib.axes._axes.Axes.tricontour(self,*args,**kwargs)
matplotlib.axes._axes.Axes.tricontourf(self,*args,**kwargs)
matplotlib.axes._axes.Axes.tripcolor(self,*args,**kwargs)
matplotlib.axes._axes.Axes.triplot(self,*args,**kwargs)
matplotlib.axes._axes.Axes.violin(self,vpstats,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False)
matplotlib.axes._axes.Axes.violinplot(self,dataset,positions=None,vert=True,widths=0.5,showmeans=False,showextrema=True,showmedians=False,points=100,bw_method=None)
matplotlib.axes._axes.Axes.vlines(self,x,ymin,ymax,colors='k',linestyles='solid',label='',**kwargs)
matplotlib.axes._axes.Axes.xcorr(self,x,y,normed=True,detrend=mlab.detrend_none,usevlines=True,maxlags=10,**kwargs)
matplotlib.axes._axes._plot_args_replacer(args,data)
matplotlib.axes._plot_args_replacer(args,data)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/axes/_subplots.py----------------------------------------
A:matplotlib.axes._subplots.s->str(int(args[0]))
A:matplotlib.axes._subplots.(rows, cols, num)->map(int, s)
A:matplotlib.axes._subplots.rows->int(rows)
A:matplotlib.axes._subplots.cols->int(cols)
A:matplotlib.axes._subplots.self._layoutbox->matplotlib._layoutbox.LayoutBox(parent=self._subplotspec._layoutbox, name=name, artist=self)
A:matplotlib.axes._subplots.self._poslayoutbox->matplotlib._layoutbox.LayoutBox(parent=self._layoutbox, name=self._layoutbox.name + '.pos', pos=True, subplot=True, artist=self)
A:matplotlib.axes._subplots.(rows, cols, num1, num2)->self.get_subplotspec().get_geometry()
A:matplotlib.axes._subplots.(self.figbox, self.rowNum, self.colNum, self.numRows, self.numCols)->self.get_subplotspec().get_position(self.figure, return_all=True)
A:matplotlib.axes._subplots.lastrow->self.is_last_row()
A:matplotlib.axes._subplots.firstcol->self.is_first_col()
A:matplotlib.axes._subplots.(projection_class, kwargs, key)->process_projection_requirements(self.figure, *kl, **kwargs)
A:matplotlib.axes._subplots.ax2->subplot_class_factory(projection_class)(self.figure, *kl, **kwargs)
A:matplotlib.axes._subplots.new_class->type(str('%sSubplot') % axes_class.__name__, (SubplotBase, axes_class), {'_axes_class': axes_class})
A:matplotlib.axes._subplots.Subplot->subplot_class_factory()
A:matplotlib.axes._subplots.subplot_instance->_PicklableSubplotClassConstructor()
A:matplotlib.axes._subplots.subplot_class->subplot_class_factory(axes_class)
matplotlib.axes.SubplotBase(self,fig,*args,**kwargs)
matplotlib.axes.SubplotBase.__reduce__(self)
matplotlib.axes.SubplotBase._make_twin_axes(self,*kl,**kwargs)
matplotlib.axes.SubplotBase.change_geometry(self,numrows,numcols,num)
matplotlib.axes.SubplotBase.get_geometry(self)
matplotlib.axes.SubplotBase.get_subplotspec(self)
matplotlib.axes.SubplotBase.is_first_col(self)
matplotlib.axes.SubplotBase.is_first_row(self)
matplotlib.axes.SubplotBase.is_last_col(self)
matplotlib.axes.SubplotBase.is_last_row(self)
matplotlib.axes.SubplotBase.label_outer(self)
matplotlib.axes.SubplotBase.set_subplotspec(self,subplotspec)
matplotlib.axes.SubplotBase.update_params(self)
matplotlib.axes._PicklableSubplotClassConstructor(self,axes_class)
matplotlib.axes._subplots.SubplotBase(self,fig,*args,**kwargs)
matplotlib.axes._subplots.SubplotBase.__init__(self,fig,*args,**kwargs)
matplotlib.axes._subplots.SubplotBase.__reduce__(self)
matplotlib.axes._subplots.SubplotBase._make_twin_axes(self,*kl,**kwargs)
matplotlib.axes._subplots.SubplotBase.change_geometry(self,numrows,numcols,num)
matplotlib.axes._subplots.SubplotBase.get_geometry(self)
matplotlib.axes._subplots.SubplotBase.get_subplotspec(self)
matplotlib.axes._subplots.SubplotBase.is_first_col(self)
matplotlib.axes._subplots.SubplotBase.is_first_row(self)
matplotlib.axes._subplots.SubplotBase.is_last_col(self)
matplotlib.axes._subplots.SubplotBase.is_last_row(self)
matplotlib.axes._subplots.SubplotBase.label_outer(self)
matplotlib.axes._subplots.SubplotBase.set_subplotspec(self,subplotspec)
matplotlib.axes._subplots.SubplotBase.update_params(self)
matplotlib.axes._subplots._PicklableSubplotClassConstructor(self,axes_class)
matplotlib.axes._subplots._PicklableSubplotClassConstructor.__call__(self,axes_class)
matplotlib.axes._subplots.subplot_class_factory(axes_class=None)
matplotlib.axes.subplot_class_factory(axes_class=None)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/axes/_base.py----------------------------------------
A:matplotlib.axes._base.color->matplotlib.colors.to_rgba('C{}'.format(color_cycle_number))
A:matplotlib.axes._base.fmtint->str(int(fmt))
A:matplotlib.axes._base.fmt->fmt.replace(' ', '').replace(' ', '')
A:matplotlib.axes._base.color_cycle_number->int(chars[i + 1])
A:matplotlib.axes._base.self.__dict__->super(_AxesBase, self).__getstate__().copy()
A:matplotlib.axes._base.prop_cycler->cycler(*args, **kwargs)
A:matplotlib.axes._base.self.prop_cycler->itertools.cycle(prop_cycler)
A:matplotlib.axes._base.xunits->kwargs.copy().pop('thetaunits', xunits)
A:matplotlib.axes._base.yunits->kwargs.copy().pop('runits', yunits)
A:matplotlib.axes._base.ret->self.yaxis.set_ticks(ticks, minor=minor)
A:matplotlib.axes._base.bx->self.axes.xaxis.update_units(x)
A:matplotlib.axes._base.by->self.axes.yaxis.update_units(y)
A:matplotlib.axes._base.x->_check_1d(tup[0])
A:matplotlib.axes._base.y->_check_1d(tup[-1])
A:matplotlib.axes._base.ignore->set()
A:matplotlib.axes._base.default_dict->self._getdefaults(ignores, kw)
A:matplotlib.axes._base.kw->kw.copy().copy()
A:matplotlib.axes._base.seg->func(x[:, j % ncx], y[:, j % ncy], kw, kwargs)
A:matplotlib.axes._base.kwargs->kwargs.copy().copy()
A:matplotlib.axes._base.facecolor->kw.copy().copy().get('color', None)
A:matplotlib.axes._base.(linestyle, marker, color)->_process_plot_format(tup[-1])
A:matplotlib.axes._base.kwargs['label']->get_label(tup[-1], None)
A:matplotlib.axes._base.(x, y)->self.transData.inverted().transform_point((x, y))
A:matplotlib.axes._base.kw['closed']->kwargs.copy().copy().get('closed', True)
A:matplotlib.axes._base._shared_x_axes->matplotlib.cbook.Grouper()
A:matplotlib.axes._base._shared_y_axes->matplotlib.cbook.Grouper()
A:matplotlib.axes._base._twinned_axes->matplotlib.cbook.Grouper()
A:matplotlib.axes._base.self._position->matplotlib.transforms.Bbox.from_bounds(*rect)
A:matplotlib.axes._base.self._originalPosition->self._position.frozen()
A:matplotlib.axes._base.self.spines->self._gen_axes_spines()
A:matplotlib.axes._base.self._xcid->self.xaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scalex=True))
A:matplotlib.axes._base.self._ycid->self.yaxis.callbacks.connect('units finalize', lambda : self._on_units_changed(scaley=True))
A:matplotlib.axes._base.state->super(_AxesBase, self).__getstate__()
A:matplotlib.axes._base.container->getattr(self, container_name)
A:matplotlib.axes._base.x_pad->self.xaxis.get_tick_padding()
A:matplotlib.axes._base.y_pad->self.yaxis.get_tick_padding()
A:matplotlib.axes._base.self.xaxis->matplotlib.axis.XAxis(self)
A:matplotlib.axes._base.self.yaxis->matplotlib.axis.YAxis(self)
A:matplotlib.axes._base.self.bbox->matplotlib.transforms.TransformedBbox(self._position, fig.transFigure)
A:matplotlib.axes._base.self.dataLim->matplotlib.transforms.Bbox.null()
A:matplotlib.axes._base.self.viewLim->matplotlib.transforms.Bbox.unit()
A:matplotlib.axes._base.self.transScale->matplotlib.transforms.TransformWrapper(mtransforms.IdentityTransform())
A:matplotlib.axes._base.self.transAxes->matplotlib.transforms.BboxTransformTo(self.bbox)
A:matplotlib.axes._base.self.transLimits->matplotlib.transforms.BboxTransformFrom(mtransforms.TransformedBbox(self.viewLim, self.transScale))
A:matplotlib.axes._base.self._xaxis_transform->matplotlib.transforms.blended_transform_factory(self.transData, self.transAxes)
A:matplotlib.axes._base.self._yaxis_transform->matplotlib.transforms.blended_transform_factory(self.transAxes, self.transData)
A:matplotlib.axes._base.pos->locator(self, renderer)
A:matplotlib.axes._base.patch_visible->self.patch.get_visible()
A:matplotlib.axes._base.xaxis_visible->self.xaxis.get_visible()
A:matplotlib.axes._base.yaxis_visible->self.yaxis.get_visible()
A:matplotlib.axes._base.self.callbacks->matplotlib.cbook.CallbackRegistry()
A:matplotlib.axes._base.(x0, x1)->self.get_axes_locator().view_limits(x0, x1)
A:matplotlib.axes._base.self.xaxis._scale->matplotlib.scale.scale_factory(self._sharex.xaxis.get_scale(), self.xaxis)
A:matplotlib.axes._base.(y0, y1)->self._sharey.get_ylim()
A:matplotlib.axes._base.self.yaxis._scale->matplotlib.scale.scale_factory(self._sharey.yaxis.get_scale(), self.yaxis)
A:matplotlib.axes._base.self._get_lines->_process_plot_var_args(self)
A:matplotlib.axes._base.self._get_patches_for_fill->_process_plot_var_args(self, 'fill')
A:matplotlib.axes._base.self.mouseover_set->set()
A:matplotlib.axes._base.props->matplotlib.font_manager.FontProperties(size=rcParams['axes.titlesize'], weight=rcParams['axes.titleweight'])
A:matplotlib.axes._base.self.title->matplotlib.text.Text(x=0.5, y=1.0, text='', fontproperties=props, verticalalignment='baseline', horizontalalignment='center')
A:matplotlib.axes._base.self._left_title->matplotlib.text.Text(x=0.0, y=1.0, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='left')
A:matplotlib.axes._base.self._right_title->matplotlib.text.Text(x=1.0, y=1.0, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='right')
A:matplotlib.axes._base.self.patch->self._gen_axes_patch()
A:matplotlib.axes._base.self.titleOffsetTrans->matplotlib.transforms.ScaledTranslation(0.0, title_offset_points / 72.0, self.figure.dpi_scale_trans)
A:matplotlib.axes._base.prop_cycle->cycler(*args, **kwargs)
A:matplotlib.axes._base.aspect->self.get_aspect()
A:matplotlib.axes._base.axes->set(self._shared_x_axes.get_siblings(self) + self._shared_y_axes.get_siblings(self))
A:matplotlib.axes._base.(xmin, xmax)->self.get_xlim()
A:matplotlib.axes._base.(ymin, ymax)->self.get_ylim()
A:matplotlib.axes._base.xsize->max(abs(xmax - xmin), 1e-30)
A:matplotlib.axes._base.ysize->max(abs(ymax - ymin), 1e-30)
A:matplotlib.axes._base.position->self.get_position(original=True)
A:matplotlib.axes._base.(figW, figH)->self.get_figure().get_size_inches()
A:matplotlib.axes._base.pb->self.get_position(original=True).frozen()
A:matplotlib.axes._base.pb1->self.get_position(original=True).frozen().shrunk_to_aspect(box_aspect, pb, fig_aspect)
A:matplotlib.axes._base.emit->kwargs.copy().copy().get('emit', True)
A:matplotlib.axes._base.s->v[0].lower()
A:matplotlib.axes._base.xlim->self.get_xlim()
A:matplotlib.axes._base.ylim->self.get_ylim()
A:matplotlib.axes._base.edge_size->max(np.diff(xlim), np.diff(ylim))
A:matplotlib.axes._base.xmin->kwargs.copy().copy().get('xmin', None)
A:matplotlib.axes._base.xmax->kwargs.copy().copy().get('xmax', None)
A:matplotlib.axes._base.ymin->kwargs.copy().copy().get('ymin', None)
A:matplotlib.axes._base.ymax->kwargs.copy().copy().get('ymax', None)
A:matplotlib.axes._base.label->getattr(self, container_name).get_label()
A:matplotlib.axes._base.(xmin, xmax, ymin, ymax)->image.get_extent()
A:matplotlib.axes._base.path->line.get_path()
A:matplotlib.axes._base.line_trans->line.get_transform()
A:matplotlib.axes._base.line_trans_path->line._get_transformed_path()
A:matplotlib.axes._base.(na_path, _)->line._get_transformed_path().get_transformed_path_and_affine()
A:matplotlib.axes._base.data_path->trans_to_data.transform_path(path)
A:matplotlib.axes._base.(updatex, updatey)->patch.get_transform().contains_branch_seperately(self.transData)
A:matplotlib.axes._base.xys->numpy.asarray(xys)
A:matplotlib.axes._base.self._use_sticky_edges->bool(b)
A:matplotlib.axes._base.tight->kw.copy().copy().pop('tight', True)
A:matplotlib.axes._base.mx->kw.copy().copy().pop('x', None)
A:matplotlib.axes._base.my->kw.copy().copy().pop('y', None)
A:matplotlib.axes._base.self._autoscaleXon->bool(auto)
A:matplotlib.axes._base.self._autoscaleYon->bool(auto)
A:matplotlib.axes._base.self._tight->bool(tight)
A:matplotlib.axes._base.x_stickies->sum([sticky.x for sticky in stickies], [])
A:matplotlib.axes._base.y_stickies->sum([sticky.y for sticky in stickies], [])
A:matplotlib.axes._base.shared->shared_axes.get_siblings(self)
A:matplotlib.axes._base.bb->matplotlib.transforms.BboxBase.union(dl)
A:matplotlib.axes._base.locator->self.get_axes_locator()
A:matplotlib.axes._base.minpos->getattr(bb, minpos)
A:matplotlib.axes._base.transform->kwargs.pop('axis', 'both').lower().get_transform()
A:matplotlib.axes._base.inverse_trans->kwargs.pop('axis', 'both').lower().get_transform().inverted()
A:matplotlib.axes._base.(x0t, x1t)->kwargs.pop('axis', 'both').lower().get_transform().transform([x0, x1])
A:matplotlib.axes._base.artists->sorted(artists, key=attrgetter('zorder'))
A:matplotlib.axes._base.self._axisbelow->validate_axisbelow(b)
A:matplotlib.axes._base.b->_string_to_bool(b)
A:matplotlib.axes._base.style->kwargs.copy().copy().pop('style', '').lower()
A:matplotlib.axes._base.scilimits->kwargs.copy().copy().pop('scilimits', None)
A:matplotlib.axes._base.useOffset->kwargs.copy().copy().pop('useOffset', None)
A:matplotlib.axes._base.useLocale->kwargs.copy().copy().pop('useLocale', None)
A:matplotlib.axes._base.useMathText->kwargs.copy().copy().pop('useMathText', None)
A:matplotlib.axes._base.axis->kwargs.copy().copy().pop('axis', 'both').lower()
A:matplotlib.axes._base.xkw->dict(kwargs)
A:matplotlib.axes._base.ykw->dict(kwargs)
A:matplotlib.axes._base.(left, right)->self.xaxis.limit_range_for_scale(left, right)
A:matplotlib.axes._base.(old_lower, old_upper)->self.get_ybound()
A:matplotlib.axes._base.converted_limit->convert(limit)
A:matplotlib.axes._base.left->self._validate_converted_limits(left, self.convert_xunits)
A:matplotlib.axes._base.right->self._validate_converted_limits(right, self.convert_xunits)
A:matplotlib.axes._base.(old_left, old_right)->self.get_xlim()
A:matplotlib.axes._base.g->self.get_shared_y_axes()
A:matplotlib.axes._base.(bottom, top)->self.yaxis.limit_range_for_scale(bottom, top)
A:matplotlib.axes._base.bottom->self._validate_converted_limits(bottom, self.convert_yunits)
A:matplotlib.axes._base.top->self._validate_converted_limits(top, self.convert_yunits)
A:matplotlib.axes._base.(old_bottom, old_top)->self.get_ylim()
A:matplotlib.axes._base.val->func(y)
A:matplotlib.axes._base.xs->self.format_xdata(x)
A:matplotlib.axes._base.ys->self.format_ydata(y)
A:matplotlib.axes._base.scale->ax.get_scale()
A:matplotlib.axes._base.(Xmin, Xmax)->self.get_xlim()
A:matplotlib.axes._base.(Ymin, Ymax)->self.get_ylim()
A:matplotlib.axes._base.(xmin, ymin)->tranD2C((Xmin, Ymin))
A:matplotlib.axes._base.(xmax, ymax)->tranD2C((Xmax, Ymax))
A:matplotlib.axes._base.inverse->self.transData.inverted()
A:matplotlib.axes._base.(lastx, lasty)->self.transData.inverted().transform_point((lastx, lasty))
A:matplotlib.axes._base.self._pan_start->matplotlib.cbook.Bunch(lim=self.viewLim.frozen(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), bbox=self.bbox.frozen(), x=x, y=y)
A:matplotlib.axes._base.(dx, dy)->format_deltas(key, dx, dy)
A:matplotlib.axes._base.result->matplotlib.transforms.Bbox(newpoints).transformed(p.trans_inverse)
A:matplotlib.axes._base.alpha->numpy.power(10.0, (dx, dy))
A:matplotlib.axes._base.start->numpy.array([p.x, p.y])
A:matplotlib.axes._base.oldpoints->p.lim.transformed(p.trans)
A:matplotlib.axes._base.valid->numpy.isfinite(result.transformed(p.trans))
A:matplotlib.axes._base.points->matplotlib.transforms.Bbox(newpoints).transformed(p.trans_inverse).get_points().astype(object)
A:matplotlib.axes._base.c->matplotlib.colors.to_rgba(c)
A:matplotlib.axes._base.bb_xaxis->self.xaxis.get_tightbbox(renderer)
A:matplotlib.axes._base.bb_yaxis->self.yaxis.get_tightbbox(renderer)
A:matplotlib.axes._base._bbox->matplotlib.transforms.Bbox.union([b for b in bb if b.width != 0 or b.height != 0])
A:matplotlib.axes._base.ax2->self._make_twin_axes(sharey=self)
matplotlib.axes._base._AxesBase(self,fig,rect,facecolor=None,frameon=True,sharex=None,sharey=None,label='',xscale=None,yscale=None,**kwargs)
matplotlib.axes._base._AxesBase.__getstate__(self)
matplotlib.axes._base._AxesBase.__init__(self,fig,rect,facecolor=None,frameon=True,sharex=None,sharey=None,label='',xscale=None,yscale=None,**kwargs)
matplotlib.axes._base._AxesBase.__setstate__(self,state)
matplotlib.axes._base._AxesBase.__str__(self)
matplotlib.axes._base._AxesBase._add_text(self,txt)
matplotlib.axes._base._AxesBase._gci(self)
matplotlib.axes._base._AxesBase._gen_axes_patch(self)
matplotlib.axes._base._AxesBase._gen_axes_spines(self,locations=None,offset=0.0,units='inches')
matplotlib.axes._base._AxesBase._get_axis_list(self)
matplotlib.axes._base._AxesBase._get_view(self)
matplotlib.axes._base._AxesBase._init_axis(self)
matplotlib.axes._base._AxesBase._make_twin_axes(self,*kl,**kwargs)
matplotlib.axes._base._AxesBase._on_units_changed(self,scalex=False,scaley=False)
matplotlib.axes._base._AxesBase._process_unit_info(self,xdata=None,ydata=None,kwargs=None)
matplotlib.axes._base._AxesBase._sci(self,im)
matplotlib.axes._base._AxesBase._set_artist_props(self,a)
matplotlib.axes._base._AxesBase._set_lim_and_transforms(self)
matplotlib.axes._base._AxesBase._set_position(self,pos,which='both')
matplotlib.axes._base._AxesBase._set_title_offset_trans(self,title_offset_points)
matplotlib.axes._base._AxesBase._set_view(self,view)
matplotlib.axes._base._AxesBase._set_view_from_bbox(self,bbox,direction='in',mode=None,twinx=False,twiny=False)
matplotlib.axes._base._AxesBase._update_image_limits(self,image)
matplotlib.axes._base._AxesBase._update_line_limits(self,line)
matplotlib.axes._base._AxesBase._update_patch_limits(self,patch)
matplotlib.axes._base._AxesBase._update_transScale(self)
matplotlib.axes._base._AxesBase._validate_converted_limits(self,limit,convert)
matplotlib.axes._base._AxesBase.add_artist(self,a)
matplotlib.axes._base._AxesBase.add_collection(self,collection,autolim=True)
matplotlib.axes._base._AxesBase.add_container(self,container)
matplotlib.axes._base._AxesBase.add_image(self,image)
matplotlib.axes._base._AxesBase.add_line(self,line)
matplotlib.axes._base._AxesBase.add_patch(self,p)
matplotlib.axes._base._AxesBase.add_table(self,tab)
matplotlib.axes._base._AxesBase.apply_aspect(self,position=None)
matplotlib.axes._base._AxesBase.autoscale(self,enable=True,axis='both',tight=None)
matplotlib.axes._base._AxesBase.autoscale_view(self,tight=None,scalex=True,scaley=True)
matplotlib.axes._base._AxesBase.axesPatch(self)
matplotlib.axes._base._AxesBase.axis(self,*v,**kwargs)
matplotlib.axes._base._AxesBase.can_pan(self)
matplotlib.axes._base._AxesBase.can_zoom(self)
matplotlib.axes._base._AxesBase.cla(self)
matplotlib.axes._base._AxesBase.clear(self)
matplotlib.axes._base._AxesBase.contains(self,mouseevent)
matplotlib.axes._base._AxesBase.contains_point(self,point)
matplotlib.axes._base._AxesBase.drag_pan(self,button,key,x,y)
matplotlib.axes._base._AxesBase.draw(self,renderer=None,inframe=False)
matplotlib.axes._base._AxesBase.draw_artist(self,a)
matplotlib.axes._base._AxesBase.end_pan(self)
matplotlib.axes._base._AxesBase.format_coord(self,x,y)
matplotlib.axes._base._AxesBase.format_xdata(self,x)
matplotlib.axes._base._AxesBase.format_ydata(self,y)
matplotlib.axes._base._AxesBase.get_adjustable(self)
matplotlib.axes._base._AxesBase.get_anchor(self)
matplotlib.axes._base._AxesBase.get_aspect(self)
matplotlib.axes._base._AxesBase.get_autoscale_on(self)
matplotlib.axes._base._AxesBase.get_autoscalex_on(self)
matplotlib.axes._base._AxesBase.get_autoscaley_on(self)
matplotlib.axes._base._AxesBase.get_axes_locator(self)
matplotlib.axes._base._AxesBase.get_axisbelow(self)
matplotlib.axes._base._AxesBase.get_children(self)
matplotlib.axes._base._AxesBase.get_cursor_props(self)
matplotlib.axes._base._AxesBase.get_data_ratio(self)
matplotlib.axes._base._AxesBase.get_data_ratio_log(self)
matplotlib.axes._base._AxesBase.get_default_bbox_extra_artists(self)
matplotlib.axes._base._AxesBase.get_facecolor(self)
matplotlib.axes._base._AxesBase.get_frame_on(self)
matplotlib.axes._base._AxesBase.get_images(self)
matplotlib.axes._base._AxesBase.get_legend(self)
matplotlib.axes._base._AxesBase.get_lines(self)
matplotlib.axes._base._AxesBase.get_navigate(self)
matplotlib.axes._base._AxesBase.get_navigate_mode(self)
matplotlib.axes._base._AxesBase.get_position(self,original=False)
matplotlib.axes._base._AxesBase.get_rasterization_zorder(self)
matplotlib.axes._base._AxesBase.get_renderer_cache(self)
matplotlib.axes._base._AxesBase.get_shared_x_axes(self)
matplotlib.axes._base._AxesBase.get_shared_y_axes(self)
matplotlib.axes._base._AxesBase.get_tightbbox(self,renderer,call_axes_locator=True)
matplotlib.axes._base._AxesBase.get_window_extent(self,*args,**kwargs)
matplotlib.axes._base._AxesBase.get_xaxis(self)
matplotlib.axes._base._AxesBase.get_xaxis_text1_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_xaxis_text2_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_xaxis_transform(self,which='grid')
matplotlib.axes._base._AxesBase.get_xbound(self)
matplotlib.axes._base._AxesBase.get_xgridlines(self)
matplotlib.axes._base._AxesBase.get_xlim(self)
matplotlib.axes._base._AxesBase.get_xmajorticklabels(self)
matplotlib.axes._base._AxesBase.get_xminorticklabels(self)
matplotlib.axes._base._AxesBase.get_xscale(self)
matplotlib.axes._base._AxesBase.get_xticklabels(self,minor=False,which=None)
matplotlib.axes._base._AxesBase.get_xticklines(self)
matplotlib.axes._base._AxesBase.get_xticks(self,minor=False)
matplotlib.axes._base._AxesBase.get_yaxis(self)
matplotlib.axes._base._AxesBase.get_yaxis_text1_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_yaxis_text2_transform(self,pad_points)
matplotlib.axes._base._AxesBase.get_yaxis_transform(self,which='grid')
matplotlib.axes._base._AxesBase.get_ybound(self)
matplotlib.axes._base._AxesBase.get_ygridlines(self)
matplotlib.axes._base._AxesBase.get_ylim(self)
matplotlib.axes._base._AxesBase.get_ymajorticklabels(self)
matplotlib.axes._base._AxesBase.get_yminorticklabels(self)
matplotlib.axes._base._AxesBase.get_yscale(self)
matplotlib.axes._base._AxesBase.get_yticklabels(self,minor=False,which=None)
matplotlib.axes._base._AxesBase.get_yticklines(self)
matplotlib.axes._base._AxesBase.get_yticks(self,minor=False)
matplotlib.axes._base._AxesBase.grid(self,b=None,which='major',axis='both',**kwargs)
matplotlib.axes._base._AxesBase.has_data(self)
matplotlib.axes._base._AxesBase.hold(self,b=None)
matplotlib.axes._base._AxesBase.in_axes(self,mouseevent)
matplotlib.axes._base._AxesBase.invert_xaxis(self)
matplotlib.axes._base._AxesBase.invert_yaxis(self)
matplotlib.axes._base._AxesBase.ishold(self)
matplotlib.axes._base._AxesBase.locator_params(self,axis='both',tight=None,**kwargs)
matplotlib.axes._base._AxesBase.margins(self,*args,**kw)
matplotlib.axes._base._AxesBase.minorticks_off(self)
matplotlib.axes._base._AxesBase.minorticks_on(self)
matplotlib.axes._base._AxesBase.pick(self,*args)
matplotlib.axes._base._AxesBase.redraw_in_frame(self)
matplotlib.axes._base._AxesBase.relim(self,visible_only=False)
matplotlib.axes._base._AxesBase.reset_position(self)
matplotlib.axes._base._AxesBase.set_adjustable(self,adjustable,share=False)
matplotlib.axes._base._AxesBase.set_anchor(self,anchor,share=False)
matplotlib.axes._base._AxesBase.set_aspect(self,aspect,adjustable=None,anchor=None,share=False)
matplotlib.axes._base._AxesBase.set_autoscale_on(self,b)
matplotlib.axes._base._AxesBase.set_autoscalex_on(self,b)
matplotlib.axes._base._AxesBase.set_autoscaley_on(self,b)
matplotlib.axes._base._AxesBase.set_axes_locator(self,locator)
matplotlib.axes._base._AxesBase.set_axis_off(self)
matplotlib.axes._base._AxesBase.set_axis_on(self)
matplotlib.axes._base._AxesBase.set_axisbelow(self,b)
matplotlib.axes._base._AxesBase.set_color_cycle(self,clist)
matplotlib.axes._base._AxesBase.set_cursor_props(self,*args)
matplotlib.axes._base._AxesBase.set_facecolor(self,color)
matplotlib.axes._base._AxesBase.set_figure(self,fig)
matplotlib.axes._base._AxesBase.set_frame_on(self,b)
matplotlib.axes._base._AxesBase.set_navigate(self,b)
matplotlib.axes._base._AxesBase.set_navigate_mode(self,b)
matplotlib.axes._base._AxesBase.set_position(self,pos,which='both')
matplotlib.axes._base._AxesBase.set_prop_cycle(self,*args,**kwargs)
matplotlib.axes._base._AxesBase.set_rasterization_zorder(self,z)
matplotlib.axes._base._AxesBase.set_xbound(self,lower=None,upper=None)
matplotlib.axes._base._AxesBase.set_xlim(self,left=None,right=None,emit=True,auto=False,**kw)
matplotlib.axes._base._AxesBase.set_xmargin(self,m)
matplotlib.axes._base._AxesBase.set_xscale(self,value,**kwargs)
matplotlib.axes._base._AxesBase.set_xticklabels(self,labels,fontdict=None,minor=False,**kwargs)
matplotlib.axes._base._AxesBase.set_xticks(self,ticks,minor=False)
matplotlib.axes._base._AxesBase.set_ybound(self,lower=None,upper=None)
matplotlib.axes._base._AxesBase.set_ylim(self,bottom=None,top=None,emit=True,auto=False,**kw)
matplotlib.axes._base._AxesBase.set_ymargin(self,m)
matplotlib.axes._base._AxesBase.set_yscale(self,value,**kwargs)
matplotlib.axes._base._AxesBase.set_yticklabels(self,labels,fontdict=None,minor=False,**kwargs)
matplotlib.axes._base._AxesBase.set_yticks(self,ticks,minor=False)
matplotlib.axes._base._AxesBase.start_pan(self,x,y,button)
matplotlib.axes._base._AxesBase.tick_params(self,axis='both',**kwargs)
matplotlib.axes._base._AxesBase.ticklabel_format(self,**kwargs)
matplotlib.axes._base._AxesBase.twinx(self)
matplotlib.axes._base._AxesBase.twiny(self)
matplotlib.axes._base._AxesBase.update_datalim(self,xys,updatex=True,updatey=True)
matplotlib.axes._base._AxesBase.update_datalim_bounds(self,bounds)
matplotlib.axes._base._AxesBase.use_sticky_edges(self)
matplotlib.axes._base._AxesBase.use_sticky_edges(self,b)
matplotlib.axes._base._AxesBase.xaxis_date(self,tz=None)
matplotlib.axes._base._AxesBase.xaxis_inverted(self)
matplotlib.axes._base._AxesBase.yaxis_date(self,tz=None)
matplotlib.axes._base._AxesBase.yaxis_inverted(self)
matplotlib.axes._base._process_plot_format(fmt)
matplotlib.axes._base._process_plot_var_args(self,axes,command='plot')
matplotlib.axes._base._process_plot_var_args.__getstate__(self)
matplotlib.axes._base._process_plot_var_args.__init__(self,axes,command='plot')
matplotlib.axes._base._process_plot_var_args.__setstate__(self,state)
matplotlib.axes._base._process_plot_var_args._getdefaults(self,ignore,*kwargs)
matplotlib.axes._base._process_plot_var_args._grab_next_args(self,*args,**kwargs)
matplotlib.axes._base._process_plot_var_args._makefill(self,x,y,kw,kwargs)
matplotlib.axes._base._process_plot_var_args._makeline(self,x,y,kw,kwargs)
matplotlib.axes._base._process_plot_var_args._plot_args(self,tup,kwargs)
matplotlib.axes._base._process_plot_var_args._setdefaults(self,defaults,*kwargs)
matplotlib.axes._base._process_plot_var_args._xy_from_xy(self,x,y)
matplotlib.axes._base._process_plot_var_args.get_next_color(self)
matplotlib.axes._base._process_plot_var_args.set_lineprops(self,line,**kwargs)
matplotlib.axes._base._process_plot_var_args.set_patchprops(self,fill_poly,**kwargs)
matplotlib.axes._base._process_plot_var_args.set_prop_cycle(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/matplotlib/matplotlib2.2.2/axes/__init__.py----------------------------------------

