
----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/locale.py----------------------------------------
A:tornado.locale._supported_locales->frozenset(list(_translations.keys()) + [_default_locale])
A:tornado.locale.(locale, extension)->path.split('.')
A:tornado.locale.full_path->os.path.join(directory, path)
A:tornado.locale.f->open(full_path, 'r')
A:tornado.locale._translations[lang]->gettext.translation(domain, directory, languages=[lang])
A:tornado.locale.code->code.replace('-', '_').replace('-', '_')
A:tornado.locale.parts->code.replace('-', '_').replace('-', '_').split('_')
A:tornado.locale.translations->_translations.get(code, None)
A:tornado.locale.locale->CSVLocale(code, translations)
A:tornado.locale.self.name->LOCALE_NAMES.get(code, {}).get('name', u('Unknown'))
A:tornado.locale.date->datetime.datetime.utcfromtimestamp(date)
A:tornado.locale.now->datetime.datetime.utcnow()
A:tornado.locale.minutes->round(seconds / 60.0)
A:tornado.locale.hours->round(seconds / (60.0 * 60))
A:tornado.locale.format->_('%(time)s')
A:tornado.locale.value->str(value)
A:tornado.locale.message_dict->self.translations.get('unknown', {})
tornado.locale.CSVLocale(Locale)
tornado.locale.CSVLocale.translate(self,message,plural_message=None,count=None)
tornado.locale.GettextLocale(self,code,translations)
tornado.locale.GettextLocale.__init__(self,code,translations)
tornado.locale.GettextLocale.translate(self,message,plural_message=None,count=None)
tornado.locale.Locale(self,code,translations)
tornado.locale.Locale.__init__(self,code,translations)
tornado.locale.Locale.format_date(self,date,gmt_offset=0,relative=True,shorter=False,full_format=False)
tornado.locale.Locale.format_day(self,date,gmt_offset=0,dow=True)
tornado.locale.Locale.friendly_number(self,value)
tornado.locale.Locale.get(cls,code)
tornado.locale.Locale.get_closest(cls,*locale_codes)
tornado.locale.Locale.list(self,parts)
tornado.locale.Locale.translate(self,message,plural_message=None,count=None)
tornado.locale.get(*locale_codes)
tornado.locale.get_supported_locales()
tornado.locale.load_gettext_translations(directory,domain)
tornado.locale.load_translations(directory)
tornado.locale.set_default_locale(code)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/httpclient.py----------------------------------------
A:tornado.httpclient.self._io_loop->IOLoop()
A:tornado.httpclient.self._async_client->async_client_class(self._io_loop, **kwargs)
A:tornado.httpclient.response->HTTPClient().fetch(arg, follow_redirects=options.follow_redirects, validate_cert=options.validate_cert)
A:tornado.httpclient.instance->super(AsyncHTTPClient, cls).__new__(cls, io_loop=io_loop, **kwargs)
A:tornado.httpclient.self.defaults->dict(HTTPRequest._DEFAULTS)
A:tornado.httpclient.request->_RequestProxy(request, self.defaults)
A:tornado.httpclient.request.headers->tornado.httputil.HTTPHeaders(request.headers)
A:tornado.httpclient.future->Future()
A:tornado.httpclient.callback->tornado.stack_context.wrap(callback)
A:tornado.httpclient.exc->Future().exception()
A:tornado.httpclient._DEFAULTS->dict(connect_timeout=20.0, request_timeout=20.0, follow_redirects=True, max_redirects=5, use_gzip=True, proxy_password='', allow_nonstandard_methods=False, validate_cert=True)
A:tornado.httpclient.headers->tornado.httputil.HTTPHeaders()
A:tornado.httpclient.headers['If-Modified-Since']->tornado.httputil.format_timestamp(if_modified_since)
A:tornado.httpclient.self.body->utf8(body)
A:tornado.httpclient.self.streaming_callback->tornado.stack_context.wrap(streaming_callback)
A:tornado.httpclient.self.header_callback->tornado.stack_context.wrap(header_callback)
A:tornado.httpclient.self.prepare_curl_callback->tornado.stack_context.wrap(prepare_curl_callback)
A:tornado.httpclient.self.start_time->time.time()
A:tornado.httpclient.self.headers->tornado.httputil.HTTPHeaders()
A:tornado.httpclient.self.error->HTTPError(self.code, response=self)
A:tornado.httpclient.self._body->self.buffer.getvalue()
A:tornado.httpclient.body->property(_get_body)
A:tornado.httpclient.args->parse_command_line()
A:tornado.httpclient.request_attr->getattr(self.request, name)
A:tornado.httpclient.client->HTTPClient()
tornado.httpclient.AsyncHTTPClient(cls,io_loop=None,force_instance=False,**kwargs)
tornado.httpclient.AsyncHTTPClient.__new__(cls,io_loop=None,force_instance=False,**kwargs)
tornado.httpclient.AsyncHTTPClient._async_clients(cls)
tornado.httpclient.AsyncHTTPClient.close(self)
tornado.httpclient.AsyncHTTPClient.configurable_base(cls)
tornado.httpclient.AsyncHTTPClient.configurable_default(cls)
tornado.httpclient.AsyncHTTPClient.configure(cls,impl,**kwargs)
tornado.httpclient.AsyncHTTPClient.fetch(self,request,callback=None,**kwargs)
tornado.httpclient.AsyncHTTPClient.fetch_impl(self,request,callback)
tornado.httpclient.AsyncHTTPClient.initialize(self,io_loop,defaults=None)
tornado.httpclient.HTTPClient(self,async_client_class=None,**kwargs)
tornado.httpclient.HTTPClient.__del__(self)
tornado.httpclient.HTTPClient.__init__(self,async_client_class=None,**kwargs)
tornado.httpclient.HTTPClient.close(self)
tornado.httpclient.HTTPClient.fetch(self,request,**kwargs)
tornado.httpclient.HTTPError(self,code,message=None,response=None)
tornado.httpclient.HTTPError.__init__(self,code,message=None,response=None)
tornado.httpclient.HTTPRequest(self,url,method='GET',headers=None,body=None,auth_username=None,auth_password=None,connect_timeout=None,request_timeout=None,if_modified_since=None,follow_redirects=None,max_redirects=None,user_agent=None,use_gzip=None,network_interface=None,streaming_callback=None,header_callback=None,prepare_curl_callback=None,proxy_host=None,proxy_port=None,proxy_username=None,proxy_password=None,allow_nonstandard_methods=None,validate_cert=None,ca_certs=None,allow_ipv6=None,client_key=None,client_cert=None)
tornado.httpclient.HTTPRequest.__init__(self,url,method='GET',headers=None,body=None,auth_username=None,auth_password=None,connect_timeout=None,request_timeout=None,if_modified_since=None,follow_redirects=None,max_redirects=None,user_agent=None,use_gzip=None,network_interface=None,streaming_callback=None,header_callback=None,prepare_curl_callback=None,proxy_host=None,proxy_port=None,proxy_username=None,proxy_password=None,allow_nonstandard_methods=None,validate_cert=None,ca_certs=None,allow_ipv6=None,client_key=None,client_cert=None)
tornado.httpclient.HTTPResponse(self,request,code,headers=None,buffer=None,effective_url=None,error=None,request_time=None,time_info=None,reason=None)
tornado.httpclient.HTTPResponse.__init__(self,request,code,headers=None,buffer=None,effective_url=None,error=None,request_time=None,time_info=None,reason=None)
tornado.httpclient.HTTPResponse.__repr__(self)
tornado.httpclient.HTTPResponse._get_body(self)
tornado.httpclient.HTTPResponse.rethrow(self)
tornado.httpclient._RequestProxy(self,request,defaults)
tornado.httpclient._RequestProxy.__getattr__(self,name)
tornado.httpclient._RequestProxy.__init__(self,request,defaults)
tornado.httpclient.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/escape.py----------------------------------------
A:tornado.escape._XHTML_ESCAPE_RE->re.compile('[&<>"]')
A:tornado.escape.result->_parse_qs(qs, keep_blank_values, strict_parsing, encoding='latin1', errors='strict')
A:tornado.escape._URL_RE->re.compile(to_unicode('\\b((?:([\\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\\s&()]|&amp;|&quot;)*(?:[^!"#$%&\'()*+,.:;<=>?@\\[\\]^`{|}~\\s]))|(?:\\((?:[^\\s&()]|&amp;|&quot;)*\\)))+)'))
A:tornado.escape.url->m.group(1)
A:tornado.escape.proto->m.group(2)
A:tornado.escape.href->m.group(1)
A:tornado.escape.parts->url[proto_len:].split('/')
A:tornado.escape.amp->m.group(1).rfind('&')
A:tornado.escape.text->_unicode(xhtml_escape(text))
A:tornado.escape.unicode_map[name]->unichr(value)
A:tornado.escape._HTML_UNICODE_MAP->_build_unicode_map()
tornado.escape._build_unicode_map()
tornado.escape._convert_entity(m)
tornado.escape.json_decode(value)
tornado.escape.json_encode(value)
tornado.escape.linkify(text,shorten=False,extra_params='',require_protocol=False,permitted_protocols=['http','https'])
tornado.escape.recursive_unicode(obj)
tornado.escape.squeeze(value)
tornado.escape.to_basestring(value)
tornado.escape.to_unicode(value)
tornado.escape.url_escape(value)
tornado.escape.utf8(value)
tornado.escape.xhtml_escape(value)
tornado.escape.xhtml_unescape(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/template.py----------------------------------------
A:tornado.template._UNSET->object()
A:tornado.template.reader->_TemplateReader(name, escape.native_str(template_string))
A:tornado.template.self.file->_File(self, _parse(reader, self))
A:tornado.template.self.code->self._generate_python(loader, compress_whitespace)
A:tornado.template.self.compiled->compile(escape.to_unicode(self.code), '%s.generated.py' % self.name.replace('.', '_'), 'exec', dont_inherit=True)
A:tornado.template.formatted_code->_format_code(self.code).rstrip()
A:tornado.template.buffer->StringIO()
A:tornado.template.ancestors->self._get_ancestors(loader)
A:tornado.template.writer->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template, compress_whitespace)
A:tornado.template.template->Template(f.read(), name=name, loader=self)
A:tornado.template.self.lock->threading.RLock()
A:tornado.template.name->posixpath.normpath(posixpath.join(file_dir, name))
A:tornado.template.self.templates[name]->self._create_template(name)
A:tornado.template.self.root->os.path.abspath(root_directory)
A:tornado.template.current_path->os.path.join(self.root, parent_path)
A:tornado.template.file_dir->posixpath.dirname(parent_path)
A:tornado.template.relative_path->os.path.abspath(os.path.join(file_dir, name))
A:tornado.template.path->os.path.join(self.root, name)
A:tornado.template.f->open(path, 'rb')
A:tornado.template.included->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template, compress_whitespace).loader.load(self.name, self.template_name)
A:tornado.template.value->re.sub('(\\s*\\n\\s*)', '\n', value)
A:tornado.template.index->self.text.find(needle, start, end)
A:tornado.template.size->len(self)
A:tornado.template.(start, stop, step)->key.indices(size)
A:tornado.template.lines->code.splitlines()
A:tornado.template.body->_ChunkList([])
A:tornado.template.curly->_TemplateReader(name, escape.native_str(template_string)).find('{', curly)
A:tornado.template.cons->_TemplateReader(name, escape.native_str(template_string)).consume(curly)
A:tornado.template.start_brace->_TemplateReader(name, escape.native_str(template_string)).consume(2)
A:tornado.template.end->_TemplateReader(name, escape.native_str(template_string)).find('%}')
A:tornado.template.contents->_TemplateReader(name, escape.native_str(template_string)).consume(end).strip()
A:tornado.template.(operator, space, suffix)->_TemplateReader(name, escape.native_str(template_string)).consume(end).strip().partition(' ')
A:tornado.template.suffix->suffix.strip('"').strip("'").strip('"').strip("'")
A:tornado.template.allowed_parents->intermediate_blocks.get(operator)
A:tornado.template.block->_ControlBlock(contents, line, block_body)
A:tornado.template.fn->suffix.strip('"').strip("'").strip('"').strip("'").strip()
A:tornado.template.block_body->_parse(reader, template, operator, in_loop)
tornado.template.BaseLoader(self,autoescape=_DEFAULT_AUTOESCAPE,namespace=None)
tornado.template.BaseLoader.__init__(self,autoescape=_DEFAULT_AUTOESCAPE,namespace=None)
tornado.template.BaseLoader._create_template(self,name)
tornado.template.BaseLoader.load(self,name,parent_path=None)
tornado.template.BaseLoader.reset(self)
tornado.template.BaseLoader.resolve_path(self,name,parent_path=None)
tornado.template.DictLoader(self,dict,**kwargs)
tornado.template.DictLoader.__init__(self,dict,**kwargs)
tornado.template.DictLoader._create_template(self,name)
tornado.template.DictLoader.resolve_path(self,name,parent_path=None)
tornado.template.Loader(self,root_directory,**kwargs)
tornado.template.Loader.__init__(self,root_directory,**kwargs)
tornado.template.Loader._create_template(self,name)
tornado.template.Loader.resolve_path(self,name,parent_path=None)
tornado.template.ParseError(Exception)
tornado.template.Template(self,template_string,name='<string>',loader=None,compress_whitespace=None,autoescape=_UNSET)
tornado.template.Template.__init__(self,template_string,name='<string>',loader=None,compress_whitespace=None,autoescape=_UNSET)
tornado.template.Template._generate_python(self,loader,compress_whitespace)
tornado.template.Template._get_ancestors(self,loader)
tornado.template.Template.generate(self,**kwargs)
tornado.template._ApplyBlock(self,method,line,body=None)
tornado.template._ApplyBlock.__init__(self,method,line,body=None)
tornado.template._ApplyBlock.each_child(self)
tornado.template._ApplyBlock.generate(self,writer)
tornado.template._ChunkList(self,chunks)
tornado.template._ChunkList.__init__(self,chunks)
tornado.template._ChunkList.each_child(self)
tornado.template._ChunkList.generate(self,writer)
tornado.template._CodeWriter(self,file,named_blocks,loader,current_template,compress_whitespace)
tornado.template._CodeWriter.__init__(self,file,named_blocks,loader,current_template,compress_whitespace)
tornado.template._CodeWriter.include(self,template,line)
tornado.template._CodeWriter.indent(self)
tornado.template._CodeWriter.indent_size(self)
tornado.template._CodeWriter.write_line(self,line,line_number,indent=None)
tornado.template._ControlBlock(self,statement,line,body=None)
tornado.template._ControlBlock.__init__(self,statement,line,body=None)
tornado.template._ControlBlock.each_child(self)
tornado.template._ControlBlock.generate(self,writer)
tornado.template._Expression(self,expression,line,raw=False)
tornado.template._Expression.__init__(self,expression,line,raw=False)
tornado.template._Expression.generate(self,writer)
tornado.template._ExtendsBlock(self,name)
tornado.template._ExtendsBlock.__init__(self,name)
tornado.template._File(self,template,body)
tornado.template._File.__init__(self,template,body)
tornado.template._File.each_child(self)
tornado.template._File.generate(self,writer)
tornado.template._IncludeBlock(self,name,reader,line)
tornado.template._IncludeBlock.__init__(self,name,reader,line)
tornado.template._IncludeBlock.find_named_blocks(self,loader,named_blocks)
tornado.template._IncludeBlock.generate(self,writer)
tornado.template._IntermediateControlBlock(self,statement,line)
tornado.template._IntermediateControlBlock.__init__(self,statement,line)
tornado.template._IntermediateControlBlock.generate(self,writer)
tornado.template._Module(self,expression,line)
tornado.template._Module.__init__(self,expression,line)
tornado.template._NamedBlock(self,name,body,template,line)
tornado.template._NamedBlock.__init__(self,name,body,template,line)
tornado.template._NamedBlock.each_child(self)
tornado.template._NamedBlock.find_named_blocks(self,loader,named_blocks)
tornado.template._NamedBlock.generate(self,writer)
tornado.template._Node(object)
tornado.template._Node.each_child(self)
tornado.template._Node.find_named_blocks(self,loader,named_blocks)
tornado.template._Node.generate(self,writer)
tornado.template._Statement(self,statement,line)
tornado.template._Statement.__init__(self,statement,line)
tornado.template._Statement.generate(self,writer)
tornado.template._TemplateReader(self,name,text)
tornado.template._TemplateReader.__getitem__(self,key)
tornado.template._TemplateReader.__init__(self,name,text)
tornado.template._TemplateReader.__len__(self)
tornado.template._TemplateReader.__str__(self)
tornado.template._TemplateReader.consume(self,count=None)
tornado.template._TemplateReader.find(self,needle,start=0,end=None)
tornado.template._TemplateReader.remaining(self)
tornado.template._Text(self,value,line)
tornado.template._Text.__init__(self,value,line)
tornado.template._Text.generate(self,writer)
tornado.template._format_code(code)
tornado.template._parse(reader,template,in_block=None,in_loop=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/web.py----------------------------------------
A:tornado.web._template_loader_lock->threading.Lock()
A:tornado.web._remove_control_chars_regex->re.compile('[\\x00-\\x08\\x0e-\\x1f]')
A:tornado.web.self.ui->ObjectDict(((n, self._ui_method(m)) for (n, m) in application.ui_methods.items()))
A:tornado.web.self.ui['_modules']->ObjectDict(((n, self._ui_module(n, m)) for (n, m) in application.ui_modules.items()))
A:tornado.web.self._headers->tornado.httputil.HTTPHeaders({'Server': 'TornadoServer/%s' % tornado.version, 'Content-Type': 'text/html; charset=UTF-8', 'Date': httputil.format_timestamp(time.gmtime())})
A:tornado.web.self._reason->tornado.escape.native_str(reason)
A:tornado.web.self._headers[name]->self._convert_header_value(value)
A:tornado.web.value->b'|'.join([value, timestamp, signature])
A:tornado.web.args->self.get_arguments(name, strip=strip)
A:tornado.web.v->v.strip().strip()
A:tornado.web.name->tornado.escape.native_str(name)
A:tornado.web.self._new_cookie->http.cookies.SimpleCookie()
A:tornado.web.morsel['expires']->tornado.httputil.format_timestamp(expires)
A:tornado.web.url->self.get_login_url()
A:tornado.web.chunk->self.transform_chunk(chunk, finishing)
A:tornado.web.html->self.render_string(template_name, **kwargs)
A:tornado.web.embed_part->module.embedded_css()
A:tornado.web.file_part->module.css_files()
A:tornado.web.head_part->module.html_head()
A:tornado.web.body_part->module.html_body()
A:tornado.web.unique_paths->set()
A:tornado.web.path->self.parse_url_path(path)
A:tornado.web.js->''.join(('<script src="' + escape.xhtml_escape(p) + '" type="text/javascript"></script>' for p in paths))
A:tornado.web.sloc->self.render_string(template_name, **kwargs).rindex(b'</body>')
A:tornado.web.css->''.join(('<link href="' + escape.xhtml_escape(p) + '" type="text/css" rel="stylesheet"/>' for p in paths))
A:tornado.web.hloc->self.render_string(template_name, **kwargs).index(b'</body>')
A:tornado.web.template_path->os.path.dirname(frame.f_code.co_filename)
A:tornado.web.frame->sys._getframe(0)
A:tornado.web.loader->self.create_template_loader(template_path)
A:tornado.web.t->self.create_template_loader(template_path).load(template_name)
A:tornado.web.namespace->dict(handler=self, request=self.request, current_user=self.current_user, locale=self.locale, _=self.locale.translate, static_url=self.static_url, xsrf_form_html=self.xsrf_form_html, reverse_url=self.reverse_url)
A:tornado.web.(self._status_code, self._headers, chunk)->transform.transform_first_chunk(self._status_code, self._headers, chunk, include_footers)
A:tornado.web.headers->self._generate_headers()
A:tornado.web.etag->self.compute_etag()
A:tornado.web.inm->self.request.headers.get('If-None-Match')
A:tornado.web.content_length->sum((len(part) for part in self._write_buffer))
A:tornado.web.exc_info->dict(((str(k), unquote(v)) for (k, v) in match.groupdict().items())).pop('exc_info')
A:tornado.web.self._locale->self.get_browser_locale()
A:tornado.web.languages->self.request.headers['Accept-Language'].split(',')
A:tornado.web.parts->utf8(value).split(b'|')
A:tornado.web.score->float(parts[1][2:])
A:tornado.web.self._current_user->self.get_current_user()
A:tornado.web.token->binascii.b2a_hex(uuid.uuid4().bytes)
A:tornado.web.static_handler_class->settings.get('static_handler_class', StaticFileHandler)
A:tornado.web.include_host->getattr(self, 'include_host', False)
A:tornado.web.callback->functools.partial(callback, *args, **kwargs)
A:tornado.web.hasher->hashlib.sha1()
A:tornado.web.self.path_kwargs->dict(((k, self.decode_argument(v, name=k)) for (k, v) in kwargs.items()))
A:tornado.web.self._active_modules[name]->module(self)
A:tornado.web.rendered->self._active_modules[name].render(*args, **kwargs)
A:tornado.web.result->method(self, *args, **kwargs)
A:tornado.web.uri->self.request.path.rstrip('/')
A:tornado.web.handlers->self._get_host_handlers(request)
A:tornado.web.static_url_prefix->settings.get('static_url_prefix', '/static/')
A:tornado.web.static_handler_args->settings.get('static_handler_args', {})
A:tornado.web.server->HTTPServer(self, **kwargs)
A:tornado.web.handler->ErrorHandler(self, request, status_code=404)
A:tornado.web.spec->URLSpec(pattern, handler, kwargs)
A:tornado.web.match->URLSpec(pattern, handler, kwargs).regex.match(request.path)
A:tornado.web.kwargs->dict(((str(k), unquote(v)) for (k, v) in match.groupdict().items()))
A:tornado.web.self.reason->dict(((str(k), unquote(v)) for (k, v) in match.groupdict().items())).get('reason', None)
A:tornado.web._lock->threading.Lock()
A:tornado.web.abspath->os.path.join(abspath, self.default_filename)
A:tornado.web.stat_result->os.stat(abspath)
A:tornado.web.modified->datetime.datetime.fromtimestamp(stat_result[stat.ST_MTIME])
A:tornado.web.(mime_type, encoding)->mimetypes.guess_type(abspath)
A:tornado.web.cache_time->self.get_cache_time(path, modified, mime_type)
A:tornado.web.ims_value->self.request.headers.get('If-Modified-Since')
A:tornado.web.date_tuple->email.utils.parsedate(ims_value)
A:tornado.web.if_since->datetime.datetime.fromtimestamp(time.mktime(date_tuple))
A:tornado.web.data->file.read()
A:tornado.web.version_hash->cls.get_version(settings, path)
A:tornado.web.abs_path->os.path.join(settings['static_path'], path)
A:tornado.web.f->open(abs_path, 'rb')
A:tornado.web.hashes[abs_path]->hashlib.md5(f.read()).hexdigest()
A:tornado.web.hsh->hashes.get(abs_path)
A:tornado.web.url_path->url_path.replace('/', os.path.sep).replace('/', os.path.sep)
A:tornado.web.CONTENT_TYPES->set(['text/plain', 'text/html', 'text/css', 'text/xml', 'application/javascript', 'application/x-javascript', 'application/xml', 'application/atom+xml', 'text/javascript', 'application/json', 'application/xhtml+xml'])
A:tornado.web.self._gzip_value->BytesIO()
A:tornado.web.self._gzip_file->gzip.GzipFile(mode='w', fileobj=self._gzip_value)
A:tornado.web.headers['Content-Length']->str(len(chunk))
A:tornado.web.self._chunking->request.supports_http_1_1()
A:tornado.web.next_url->self.request.full_url()
A:tornado.web.self.regex->re.compile(pattern)
A:tornado.web.(self._path, self._group_count)->self._find_groups()
A:tornado.web.paren_loc->fragment.index(')')
A:tornado.web.a->str(a)
A:tornado.web.timestamp->int(parts[1])
A:tornado.web.signature->_create_signature(secret, name, parts[0], parts[1])
A:tornado.web.hash->hmac.new(utf8(secret), digestmod=hashlib.sha1)
tornado.web.Application(self,handlers=None,default_host='',transforms=None,wsgi=False,**settings)
tornado.web.Application.__init__(self,handlers=None,default_host='',transforms=None,wsgi=False,**settings)
tornado.web.Application._get_host_handlers(self,request)
tornado.web.Application._load_ui_methods(self,methods)
tornado.web.Application._load_ui_modules(self,modules)
tornado.web.Application.add_handlers(self,host_pattern,host_handlers)
tornado.web.Application.add_transform(self,transform_class)
tornado.web.Application.listen(self,port,address='',**kwargs)
tornado.web.Application.log_request(self,handler)
tornado.web.Application.reverse_url(self,name,*args)
tornado.web.ChunkedTransferEncoding(self,request)
tornado.web.ChunkedTransferEncoding.__init__(self,request)
tornado.web.ChunkedTransferEncoding.transform_chunk(self,block,finishing)
tornado.web.ChunkedTransferEncoding.transform_first_chunk(self,status_code,headers,chunk,finishing)
tornado.web.ErrorHandler(RequestHandler)
tornado.web.ErrorHandler.check_xsrf_cookie(self)
tornado.web.ErrorHandler.initialize(self,status_code)
tornado.web.ErrorHandler.prepare(self)
tornado.web.FallbackHandler(RequestHandler)
tornado.web.FallbackHandler.initialize(self,fallback)
tornado.web.FallbackHandler.prepare(self)
tornado.web.GZipContentEncoding(self,request)
tornado.web.GZipContentEncoding.__init__(self,request)
tornado.web.GZipContentEncoding.transform_chunk(self,chunk,finishing)
tornado.web.GZipContentEncoding.transform_first_chunk(self,status_code,headers,chunk,finishing)
tornado.web.HTTPError(self,status_code,log_message=None,*args,**kwargs)
tornado.web.HTTPError.__init__(self,status_code,log_message=None,*args,**kwargs)
tornado.web.HTTPError.__str__(self)
tornado.web.OutputTransform(self,request)
tornado.web.OutputTransform.__init__(self,request)
tornado.web.OutputTransform.transform_chunk(self,chunk,finishing)
tornado.web.OutputTransform.transform_first_chunk(self,status_code,headers,chunk,finishing)
tornado.web.RedirectHandler(RequestHandler)
tornado.web.RedirectHandler.get(self)
tornado.web.RedirectHandler.initialize(self,url,permanent=True)
tornado.web.RequestHandler(self,application,request,**kwargs)
tornado.web.RequestHandler.__init__(self,application,request,**kwargs)
tornado.web.RequestHandler._clear_headers_for_304(self)
tornado.web.RequestHandler._convert_header_value(self,value)
tornado.web.RequestHandler._execute(self,transforms,*args,**kwargs)
tornado.web.RequestHandler._generate_headers(self)
tornado.web.RequestHandler._handle_request_exception(self,e)
tornado.web.RequestHandler._log(self)
tornado.web.RequestHandler._request_summary(self)
tornado.web.RequestHandler._stack_context_handle_exception(self,type,value,traceback)
tornado.web.RequestHandler._ui_method(self,method)
tornado.web.RequestHandler._ui_module(self,name,module)
tornado.web.RequestHandler.add_header(self,name,value)
tornado.web.RequestHandler.async_callback(self,callback,*args,**kwargs)
tornado.web.RequestHandler.check_xsrf_cookie(self)
tornado.web.RequestHandler.clear(self)
tornado.web.RequestHandler.clear_all_cookies(self)
tornado.web.RequestHandler.clear_cookie(self,name,path='/',domain=None)
tornado.web.RequestHandler.clear_header(self,name)
tornado.web.RequestHandler.compute_etag(self)
tornado.web.RequestHandler.cookies(self)
tornado.web.RequestHandler.create_signed_value(self,name,value)
tornado.web.RequestHandler.create_template_loader(self,template_path)
tornado.web.RequestHandler.current_user(self)
tornado.web.RequestHandler.decode_argument(self,value,name=None)
tornado.web.RequestHandler.delete(self,*args,**kwargs)
tornado.web.RequestHandler.finish(self,chunk=None)
tornado.web.RequestHandler.flush(self,include_footers=False,callback=None)
tornado.web.RequestHandler.get(self,*args,**kwargs)
tornado.web.RequestHandler.get_argument(self,name,default=_ARG_DEFAULT,strip=True)
tornado.web.RequestHandler.get_arguments(self,name,strip=True)
tornado.web.RequestHandler.get_browser_locale(self,default='en_US')
tornado.web.RequestHandler.get_cookie(self,name,default=None)
tornado.web.RequestHandler.get_current_user(self)
tornado.web.RequestHandler.get_login_url(self)
tornado.web.RequestHandler.get_secure_cookie(self,name,value=None,max_age_days=31)
tornado.web.RequestHandler.get_status(self)
tornado.web.RequestHandler.get_template_namespace(self)
tornado.web.RequestHandler.get_template_path(self)
tornado.web.RequestHandler.get_user_locale(self)
tornado.web.RequestHandler.head(self,*args,**kwargs)
tornado.web.RequestHandler.initialize(self)
tornado.web.RequestHandler.locale(self)
tornado.web.RequestHandler.on_connection_close(self)
tornado.web.RequestHandler.on_finish(self)
tornado.web.RequestHandler.options(self,*args,**kwargs)
tornado.web.RequestHandler.patch(self,*args,**kwargs)
tornado.web.RequestHandler.post(self,*args,**kwargs)
tornado.web.RequestHandler.prepare(self)
tornado.web.RequestHandler.put(self,*args,**kwargs)
tornado.web.RequestHandler.redirect(self,url,permanent=False,status=None)
tornado.web.RequestHandler.render(self,template_name,**kwargs)
tornado.web.RequestHandler.render_string(self,template_name,**kwargs)
tornado.web.RequestHandler.require_setting(self,name,feature='thisfeature')
tornado.web.RequestHandler.reverse_url(self,name,*args)
tornado.web.RequestHandler.send_error(self,status_code=500,**kwargs)
tornado.web.RequestHandler.set_cookie(self,name,value,domain=None,expires=None,path='/',expires_days=None,**kwargs)
tornado.web.RequestHandler.set_default_headers(self)
tornado.web.RequestHandler.set_header(self,name,value)
tornado.web.RequestHandler.set_secure_cookie(self,name,value,expires_days=30,**kwargs)
tornado.web.RequestHandler.set_status(self,status_code,reason=None)
tornado.web.RequestHandler.settings(self)
tornado.web.RequestHandler.static_url(self,path,include_host=None)
tornado.web.RequestHandler.write(self,chunk)
tornado.web.RequestHandler.write_error(self,status_code,**kwargs)
tornado.web.RequestHandler.xsrf_form_html(self)
tornado.web.RequestHandler.xsrf_token(self)
tornado.web.StaticFileHandler(RequestHandler)
tornado.web.StaticFileHandler.get(self,path,include_body=True)
tornado.web.StaticFileHandler.get_cache_time(self,path,modified,mime_type)
tornado.web.StaticFileHandler.get_version(cls,settings,path)
tornado.web.StaticFileHandler.head(self,path)
tornado.web.StaticFileHandler.initialize(self,path,default_filename=None)
tornado.web.StaticFileHandler.make_static_url(cls,settings,path)
tornado.web.StaticFileHandler.parse_url_path(self,url_path)
tornado.web.StaticFileHandler.reset(cls)
tornado.web.StaticFileHandler.set_extra_headers(self,path)
tornado.web.TemplateModule(self,handler)
tornado.web.TemplateModule.__init__(self,handler)
tornado.web.TemplateModule._get_resources(self,key)
tornado.web.TemplateModule.css_files(self)
tornado.web.TemplateModule.embedded_css(self)
tornado.web.TemplateModule.embedded_javascript(self)
tornado.web.TemplateModule.html_body(self)
tornado.web.TemplateModule.html_head(self)
tornado.web.TemplateModule.javascript_files(self)
tornado.web.TemplateModule.render(self,path,**kwargs)
tornado.web.UIModule(self,handler)
tornado.web.UIModule.__init__(self,handler)
tornado.web.UIModule.css_files(self)
tornado.web.UIModule.embedded_css(self)
tornado.web.UIModule.embedded_javascript(self)
tornado.web.UIModule.html_body(self)
tornado.web.UIModule.html_head(self)
tornado.web.UIModule.javascript_files(self)
tornado.web.UIModule.render(self,*args,**kwargs)
tornado.web.UIModule.render_string(self,path,**kwargs)
tornado.web.URLSpec(self,pattern,handler_class,kwargs=None,name=None)
tornado.web.URLSpec.__init__(self,pattern,handler_class,kwargs=None,name=None)
tornado.web.URLSpec.__repr__(self)
tornado.web.URLSpec._find_groups(self)
tornado.web.URLSpec.reverse(self,*args)
tornado.web._create_signature(secret,*parts)
tornado.web._linkify(UIModule)
tornado.web._linkify.render(self,text,**kwargs)
tornado.web._xsrf_form_html(UIModule)
tornado.web._xsrf_form_html.render(self)
tornado.web.addslash(method)
tornado.web.asynchronous(method)
tornado.web.authenticated(method)
tornado.web.create_signed_value(secret,name,value)
tornado.web.decode_signed_value(secret,name,value,max_age_days=31)
tornado.web.removeslash(method)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/ioloop.py----------------------------------------
A:tornado.ioloop._instance_lock->threading.Lock()
A:tornado.ioloop._current->threading.local()
A:tornado.ioloop.IOLoop._instance->IOLoop()
A:tornado.ioloop.current->getattr(IOLoop._current, 'instance', None)
A:tornado.ioloop.result->func()
A:tornado.ioloop.future_cell[0]->Future()
A:tornado.ioloop.timeout_handle->self.add_timeout(self.time() + timeout, self.stop)
A:tornado.ioloop.callback->tornado.stack_context.wrap(callback)
A:tornado.ioloop.self._callback_lock->threading.Lock()
A:tornado.ioloop.self._waker->Waker()
A:tornado.ioloop.self._handlers[fd]->tornado.stack_context.wrap(handler)
A:tornado.ioloop.old_current->getattr(IOLoop._current, 'instance', None)
A:tornado.ioloop.self._thread_ident->_thread.get_ident()
A:tornado.ioloop.old_wakeup_fd->signal.set_wakeup_fd(self._waker.write_fileno())
A:tornado.ioloop.now->self.time()
A:tornado.ioloop.timeout->_Timeout(deadline, stack_context.wrap(callback), self)
A:tornado.ioloop.poll_timeout->min(seconds, poll_timeout)
A:tornado.ioloop.event_pairs->self._impl.poll(poll_timeout)
A:tornado.ioloop.(fd, events)->self._events.popitem()
A:tornado.ioloop.self._next_timeout->self.io_loop.time()
A:tornado.ioloop.current_time->self.io_loop.time()
A:tornado.ioloop.self._timeout->self.io_loop.add_timeout(self._next_timeout, self._run)
tornado.ioloop.IOLoop(Configurable)
tornado.ioloop.IOLoop._run_callback(self,callback)
tornado.ioloop.IOLoop.add_callback(self,callback,*args,**kwargs)
tornado.ioloop.IOLoop.add_callback_from_signal(self,callback,*args,**kwargs)
tornado.ioloop.IOLoop.add_future(self,future,callback)
tornado.ioloop.IOLoop.add_handler(self,fd,handler,events)
tornado.ioloop.IOLoop.add_timeout(self,deadline,callback)
tornado.ioloop.IOLoop.clear_current()
tornado.ioloop.IOLoop.close(self,all_fds=False)
tornado.ioloop.IOLoop.configurable_base(cls)
tornado.ioloop.IOLoop.configurable_default(cls)
tornado.ioloop.IOLoop.current()
tornado.ioloop.IOLoop.handle_callback_exception(self,callback)
tornado.ioloop.IOLoop.initialize(self)
tornado.ioloop.IOLoop.initialized()
tornado.ioloop.IOLoop.install(self)
tornado.ioloop.IOLoop.instance()
tornado.ioloop.IOLoop.log_stack(self,signal,frame)
tornado.ioloop.IOLoop.make_current(self)
tornado.ioloop.IOLoop.remove_handler(self,fd)
tornado.ioloop.IOLoop.remove_timeout(self,timeout)
tornado.ioloop.IOLoop.run_sync(self,func,timeout=None)
tornado.ioloop.IOLoop.set_blocking_log_threshold(self,seconds)
tornado.ioloop.IOLoop.set_blocking_signal_threshold(self,seconds,action)
tornado.ioloop.IOLoop.start(self)
tornado.ioloop.IOLoop.stop(self)
tornado.ioloop.IOLoop.time(self)
tornado.ioloop.IOLoop.update_handler(self,fd,events)
tornado.ioloop.PeriodicCallback(self,callback,callback_time,io_loop=None)
tornado.ioloop.PeriodicCallback.__init__(self,callback,callback_time,io_loop=None)
tornado.ioloop.PeriodicCallback._run(self)
tornado.ioloop.PeriodicCallback._schedule_next(self)
tornado.ioloop.PeriodicCallback.start(self)
tornado.ioloop.PeriodicCallback.stop(self)
tornado.ioloop.PollIOLoop(IOLoop)
tornado.ioloop.PollIOLoop.add_callback(self,callback,*args,**kwargs)
tornado.ioloop.PollIOLoop.add_callback_from_signal(self,callback,*args,**kwargs)
tornado.ioloop.PollIOLoop.add_handler(self,fd,handler,events)
tornado.ioloop.PollIOLoop.add_timeout(self,deadline,callback)
tornado.ioloop.PollIOLoop.close(self,all_fds=False)
tornado.ioloop.PollIOLoop.initialize(self,impl,time_func=None)
tornado.ioloop.PollIOLoop.remove_handler(self,fd)
tornado.ioloop.PollIOLoop.remove_timeout(self,timeout)
tornado.ioloop.PollIOLoop.set_blocking_signal_threshold(self,seconds,action)
tornado.ioloop.PollIOLoop.start(self)
tornado.ioloop.PollIOLoop.stop(self)
tornado.ioloop.PollIOLoop.time(self)
tornado.ioloop.PollIOLoop.update_handler(self,fd,events)
tornado.ioloop.TimeoutError(Exception)
tornado.ioloop._Timeout(self,deadline,callback,io_loop)
tornado.ioloop._Timeout.__init__(self,deadline,callback,io_loop)
tornado.ioloop._Timeout.__le__(self,other)
tornado.ioloop._Timeout.__lt__(self,other)
tornado.ioloop._Timeout.timedelta_to_seconds(td)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/options.py----------------------------------------
A:tornado.options.frame->sys._getframe(0)
A:tornado.options.self._options[name]->_Option(name, file_name=file_name, default=default, type=type, help=help, metavar=metavar, multiple=multiple, group_name=group_name, callback=callback)
A:tornado.options.arg->args[i].lstrip('-')
A:tornado.options.(name, equals, value)->args[i].lstrip('-').partition('=')
A:tornado.options.name->name.replace('-', '_').replace('-', '_')
A:tornado.options.lines->textwrap.wrap(description, 79 - 35)
A:tornado.options.self._originals[name]->getattr(self._options, name)
A:tornado.options._parse->{datetime.datetime: self._parse_datetime, datetime.timedelta: self._parse_timedelta, bool: self._parse_bool, basestring_type: self._parse_string}.get(self.type, self.type)
A:tornado.options.(lo, _, hi)->part.partition(':')
A:tornado.options.lo->_parse(lo)
A:tornado.options.self._value->_parse(value)
A:tornado.options._TIMEDELTA_ABBREV_DICT->dict(((abbrev, full) for (full, abbrevs) in _TIMEDELTA_ABBREVS for abbrev in abbrevs))
A:tornado.options._TIMEDELTA_PATTERN->re.compile('\\s*(%s)\\s*(\\w*)\\s*' % _FLOAT_PATTERN, re.IGNORECASE)
A:tornado.options.sum->datetime.timedelta()
A:tornado.options.m->self._TIMEDELTA_PATTERN.match(value, start)
A:tornado.options.num->float(m.group(1))
A:tornado.options.units->self._TIMEDELTA_ABBREV_DICT.get(units, units)
A:tornado.options.start->self._TIMEDELTA_PATTERN.match(value, start).end()
A:tornado.options.options->OptionParser()
tornado.options.Error(Exception)
tornado.options.OptionParser(self)
tornado.options.OptionParser.__getattr__(self,name)
tornado.options.OptionParser.__init__(self)
tornado.options.OptionParser.__setattr__(self,name,value)
tornado.options.OptionParser._help_callback(self,value)
tornado.options.OptionParser.add_parse_callback(self,callback)
tornado.options.OptionParser.define(self,name,default=None,type=None,help=None,metavar=None,multiple=False,group=None,callback=None)
tornado.options.OptionParser.mockable(self)
tornado.options.OptionParser.parse_command_line(self,args=None,final=True)
tornado.options.OptionParser.parse_config_file(self,path,final=True)
tornado.options.OptionParser.print_help(self,file=None)
tornado.options.OptionParser.run_parse_callbacks(self)
tornado.options._Mockable(self,options)
tornado.options._Mockable.__delattr__(self,name)
tornado.options._Mockable.__getattr__(self,name)
tornado.options._Mockable.__init__(self,options)
tornado.options._Mockable.__setattr__(self,name,value)
tornado.options._Option(self,name,default=None,type=basestring_type,help=None,metavar=None,multiple=False,file_name=None,group_name=None,callback=None)
tornado.options._Option.__init__(self,name,default=None,type=basestring_type,help=None,metavar=None,multiple=False,file_name=None,group_name=None,callback=None)
tornado.options._Option._parse_bool(self,value)
tornado.options._Option._parse_datetime(self,value)
tornado.options._Option._parse_string(self,value)
tornado.options._Option._parse_timedelta(self,value)
tornado.options._Option.parse(self,value)
tornado.options._Option.set(self,value)
tornado.options._Option.value(self)
tornado.options.add_parse_callback(callback)
tornado.options.define(name,default=None,type=None,help=None,metavar=None,multiple=False,group=None,callback=None)
tornado.options.parse_command_line(args=None,final=True)
tornado.options.parse_config_file(path,final=True)
tornado.options.print_help(file=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/testing.py----------------------------------------
A:tornado.testing.[sock]->tornado.netutil.bind_sockets(0, 'localhost', family=socket.AF_INET)
A:tornado.testing.self.io_loop->self.get_new_ioloop()
A:tornado.testing.self.__failure->sys.exc_info()
A:tornado.testing.self.__timeout->self.io_loop.add_timeout(self.io_loop.time() + timeout, timeout_func)
A:tornado.testing.(sock, port)->bind_unused_port()
A:tornado.testing.self.http_client->self.get_http_client()
A:tornado.testing.self._app->self.get_app()
A:tornado.testing.self.http_server->self.get_http_server()
A:tornado.testing.module_dir->os.path.dirname(__file__)
A:tornado.testing.f->tornado.gen.coroutine(f)
A:tornado.testing.logger->logging.getLogger(logger)
A:tornado.testing.handler.stream->StringIO()
A:tornado.testing.self.regex->re.compile(regex)
A:tornado.testing.message->record.getMessage()
tornado.testing.AsyncHTTPSTestCase(AsyncHTTPTestCase)
tornado.testing.AsyncHTTPSTestCase.get_http_client(self)
tornado.testing.AsyncHTTPSTestCase.get_httpserver_options(self)
tornado.testing.AsyncHTTPSTestCase.get_protocol(self)
tornado.testing.AsyncHTTPSTestCase.get_ssl_options(self)
tornado.testing.AsyncHTTPTestCase(AsyncTestCase)
tornado.testing.AsyncHTTPTestCase.fetch(self,path,**kwargs)
tornado.testing.AsyncHTTPTestCase.get_app(self)
tornado.testing.AsyncHTTPTestCase.get_http_client(self)
tornado.testing.AsyncHTTPTestCase.get_http_port(self)
tornado.testing.AsyncHTTPTestCase.get_http_server(self)
tornado.testing.AsyncHTTPTestCase.get_httpserver_options(self)
tornado.testing.AsyncHTTPTestCase.get_protocol(self)
tornado.testing.AsyncHTTPTestCase.get_url(self,path)
tornado.testing.AsyncHTTPTestCase.setUp(self)
tornado.testing.AsyncHTTPTestCase.tearDown(self)
tornado.testing.AsyncTestCase(self,*args,**kwargs)
tornado.testing.AsyncTestCase.__init__(self,*args,**kwargs)
tornado.testing.AsyncTestCase.__rethrow(self)
tornado.testing.AsyncTestCase._handle_exception(self,typ,value,tb)
tornado.testing.AsyncTestCase.get_new_ioloop(self)
tornado.testing.AsyncTestCase.run(self,result=None)
tornado.testing.AsyncTestCase.setUp(self)
tornado.testing.AsyncTestCase.stop(self,_arg=None,**kwargs)
tornado.testing.AsyncTestCase.tearDown(self)
tornado.testing.AsyncTestCase.wait(self,condition=None,timeout=5)
tornado.testing.ExpectLog(self,logger,regex,required=True)
tornado.testing.ExpectLog.__enter__(self)
tornado.testing.ExpectLog.__exit__(self,typ,value,tb)
tornado.testing.ExpectLog.__init__(self,logger,regex,required=True)
tornado.testing.ExpectLog.filter(self,record)
tornado.testing.LogTrapTestCase(unittest.TestCase)
tornado.testing.LogTrapTestCase.run(self,result=None)
tornado.testing.bind_unused_port()
tornado.testing.gen_test(f)
tornado.testing.get_unused_port()
tornado.testing.main(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/netutil.py----------------------------------------
A:tornado.netutil.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:tornado.netutil.st->os.stat(file)
A:tornado.netutil.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.netutil.(connection, address)->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM).accept()
A:tornado.netutil.res->socket.getaddrinfo(ip, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_NUMERICHOST)
A:tornado.netutil.addrinfo->socket.getaddrinfo(host, port, family)
A:tornado.netutil._SSL_CONTEXT_KEYWORDS->frozenset(['ssl_version', 'certfile', 'keyfile', 'cert_reqs', 'ca_certs', 'ciphers'])
A:tornado.netutil.context->ssl_options_to_context(ssl_options)
A:tornado.netutil.frag->re.escape(frag)
A:tornado.netutil.san->cert.get('subjectAltName', ())
tornado.netutil.BlockingResolver(ExecutorResolver)
tornado.netutil.BlockingResolver.initialize(self,io_loop=None)
tornado.netutil.ExecutorResolver(Resolver)
tornado.netutil.ExecutorResolver.initialize(self,io_loop=None,executor=None)
tornado.netutil.ExecutorResolver.resolve(self,host,port,family=socket.AF_UNSPEC)
tornado.netutil.OverrideResolver(Resolver)
tornado.netutil.OverrideResolver.initialize(self,resolver,mapping)
tornado.netutil.OverrideResolver.resolve(self,host,port,*args,**kwargs)
tornado.netutil.Resolver(Configurable)
tornado.netutil.Resolver.configurable_base(cls)
tornado.netutil.Resolver.configurable_default(cls)
tornado.netutil.Resolver.resolve(self,host,port,family=socket.AF_UNSPEC,callback=None)
tornado.netutil.ThreadedResolver(ExecutorResolver)
tornado.netutil.ThreadedResolver.initialize(self,io_loop=None,num_threads=10)
tornado.netutil.add_accept_handler(sock,callback,io_loop=None)
tornado.netutil.bind_sockets(port,address=None,family=socket.AF_UNSPEC,backlog=128,flags=None)
tornado.netutil.is_valid_ip(ip)
tornado.netutil.ssl_options_to_context(ssl_options)
tornado.netutil.ssl_wrap_socket(socket,ssl_options,server_hostname=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/process.py----------------------------------------
A:tornado.process.seed->long(hexlify(os.urandom(16)), 16)
A:tornado.process.num_processes->cpu_count()
A:tornado.process.pid->os.fork()
A:tornado.process.id->children.pop(pid)
A:tornado.process.(pid, status)->os.wait()
A:tornado.process.new_id->start_child(id)
A:tornado.process.STREAM->object()
A:tornado.process.self.io_loop->kwargs.pop('io_loop', None)
A:tornado.process.(in_r, in_w)->os.pipe()
A:tornado.process.self.stdin->PipeIOStream(in_w, io_loop=self.io_loop)
A:tornado.process.(out_r, out_w)->os.pipe()
A:tornado.process.self.stdout->PipeIOStream(out_r, io_loop=self.io_loop)
A:tornado.process.(err_r, err_w)->os.pipe()
A:tornado.process.self.stderr->PipeIOStream(err_r, io_loop=self.io_loop)
A:tornado.process.self.proc->subprocess.Popen(*args, **kwargs)
A:tornado.process.self._exit_callback->tornado.stack_context.wrap(callback)
A:tornado.process.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.process.cls._old_sigchld->signal.signal(signal.SIGCHLD, lambda sig, frame: io_loop.add_callback_from_signal(cls._cleanup))
A:tornado.process.(ret_pid, status)->os.waitpid(pid, os.WNOHANG)
A:tornado.process.subproc->cls._waiting.pop(pid)
A:tornado.process.self.returncode->os.WEXITSTATUS(status)
tornado.process.Subprocess(self,*args,**kwargs)
tornado.process.Subprocess.__init__(self,*args,**kwargs)
tornado.process.Subprocess._cleanup(cls)
tornado.process.Subprocess._set_returncode(self,status)
tornado.process.Subprocess._try_cleanup_process(cls,pid)
tornado.process.Subprocess.initialize(cls,io_loop=None)
tornado.process.Subprocess.set_exit_callback(self,callback)
tornado.process.Subprocess.uninitialize(cls)
tornado.process._reseed_random()
tornado.process.cpu_count()
tornado.process.fork_processes(num_processes,max_restarts=100)
tornado.process.task_id()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/gen.py----------------------------------------
A:tornado.gen.result->Arguments(args, kwargs)
A:tornado.gen.runner->Runner(result, final_callback)
A:tornado.gen.future->TracebackFuture()
A:tornado.gen.callback->kwargs.pop('callback')
A:tornado.gen.(typ, value, tb)->sys.exc_info()
A:tornado.gen.self.key->object()
A:tornado.gen.self.kwargs['callback']->Runner(result, final_callback).result_callback(self.key)
A:tornado.gen.i->YieldFuture(i)
A:tornado.gen.self.unfinished_children->set(self.children)
A:tornado.gen.finished->list(itertools.takewhile(lambda i: i.is_ready(), self.unfinished_children))
A:tornado.gen.self.yield_point->_NullYieldPoint()
A:tornado.gen.self.pending_callbacks->set()
A:tornado.gen.next->self.yield_point.get_result()
A:tornado.gen.self.exc_info->sys.exc_info()
A:tornado.gen.yielded->YieldFuture(yielded)
A:tornado.gen.Arguments->collections.namedtuple('Arguments', ['args', 'kwargs'])
tornado.gen.BadYieldError(Exception)
tornado.gen.Callback(self,key)
tornado.gen.Callback.__init__(self,key)
tornado.gen.Callback.get_result(self)
tornado.gen.Callback.is_ready(self)
tornado.gen.Callback.start(self,runner)
tornado.gen.KeyReuseError(Exception)
tornado.gen.LeakedCallbackError(Exception)
tornado.gen.Multi(self,children)
tornado.gen.Multi.__init__(self,children)
tornado.gen.Multi.get_result(self)
tornado.gen.Multi.is_ready(self)
tornado.gen.Multi.start(self,runner)
tornado.gen.Return(self,value=None)
tornado.gen.Return.__init__(self,value=None)
tornado.gen.ReturnValueIgnoredError(Exception)
tornado.gen.Runner(self,gen,final_callback)
tornado.gen.Runner.__init__(self,gen,final_callback)
tornado.gen.Runner.handle_exception(self,typ,value,tb)
tornado.gen.Runner.is_ready(self,key)
tornado.gen.Runner.pop_result(self,key)
tornado.gen.Runner.register_callback(self,key)
tornado.gen.Runner.result_callback(self,key)
tornado.gen.Runner.run(self)
tornado.gen.Runner.set_result(self,key,result)
tornado.gen.Task(self,func,*args,**kwargs)
tornado.gen.Task.__init__(self,func,*args,**kwargs)
tornado.gen.Task.get_result(self)
tornado.gen.Task.is_ready(self)
tornado.gen.Task.start(self,runner)
tornado.gen.UnknownKeyError(Exception)
tornado.gen.Wait(self,key)
tornado.gen.Wait.__init__(self,key)
tornado.gen.Wait.get_result(self)
tornado.gen.Wait.is_ready(self)
tornado.gen.Wait.start(self,runner)
tornado.gen.WaitAll(self,keys)
tornado.gen.WaitAll.__init__(self,keys)
tornado.gen.WaitAll.get_result(self)
tornado.gen.WaitAll.is_ready(self)
tornado.gen.WaitAll.start(self,runner)
tornado.gen.YieldFuture(self,future,io_loop=None)
tornado.gen.YieldFuture.__init__(self,future,io_loop=None)
tornado.gen.YieldFuture.get_result(self)
tornado.gen.YieldFuture.is_ready(self)
tornado.gen.YieldFuture.start(self,runner)
tornado.gen.YieldPoint(object)
tornado.gen.YieldPoint.get_result(self)
tornado.gen.YieldPoint.is_ready(self)
tornado.gen.YieldPoint.start(self,runner)
tornado.gen._NullYieldPoint(YieldPoint)
tornado.gen._NullYieldPoint.get_result(self)
tornado.gen._NullYieldPoint.is_ready(self)
tornado.gen._NullYieldPoint.start(self,runner)
tornado.gen.coroutine(func)
tornado.gen.engine(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/stack_context.py----------------------------------------
A:tornado.stack_context._state->_State()
A:tornado.stack_context.self.context->self.context_factory()
A:tornado.stack_context.exc->sys.exc_info()
A:tornado.stack_context.exit->exits.pop()
tornado.stack_context.ExceptionStackContext(self,exception_handler,_active_cell=None)
tornado.stack_context.ExceptionStackContext.__enter__(self)
tornado.stack_context.ExceptionStackContext.__exit__(self,type,value,traceback)
tornado.stack_context.ExceptionStackContext.__init__(self,exception_handler,_active_cell=None)
tornado.stack_context.NullContext(object)
tornado.stack_context.NullContext.__enter__(self)
tornado.stack_context.NullContext.__exit__(self,type,value,traceback)
tornado.stack_context.StackContext(self,context_factory,_active_cell=None)
tornado.stack_context.StackContext.__enter__(self)
tornado.stack_context.StackContext.__exit__(self,type,value,traceback)
tornado.stack_context.StackContext.__init__(self,context_factory,_active_cell=None)
tornado.stack_context.StackContextInconsistentError(Exception)
tornado.stack_context._StackContextWrapper(functools.partial)
tornado.stack_context._State(self)
tornado.stack_context._State.__init__(self)
tornado.stack_context._nested(*managers)
tornado.stack_context.wrap(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/httputil.py----------------------------------------
A:tornado.httputil.norm_name->HTTPHeaders._normalize_name(name)
A:tornado.httputil.(name, value)->line.split(':', 1)
A:tornado.httputil.h->cls()
A:tornado.httputil._NORMALIZED_HEADER_RE->re.compile('^[A-Z0-9][a-z0-9]*(-[A-Z0-9][a-z0-9]*)*$')
A:tornado.httputil.normalized->'-'.join([w.capitalize() for w in name.split('-')])
A:tornado.httputil.uri_arguments->parse_qs_bytes(native_str(body), keep_blank_values=True)
A:tornado.httputil.fields->content_type.split(';')
A:tornado.httputil.(k, sep, v)->field.strip().partition('=')
A:tornado.httputil.final_boundary_index->data.rfind(b'--' + boundary + b'--')
A:tornado.httputil.parts->_parseparam(';' + line)
A:tornado.httputil.eoh->part.find(b'\r\n\r\n')
A:tornado.httputil.headers->HTTPHeaders.parse(part[:eoh].decode('utf-8'))
A:tornado.httputil.disp_header->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Disposition', '')
A:tornado.httputil.(disposition, disp_params)->_parse_header(disp_header)
A:tornado.httputil.ctype->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Type', 'application/unknown')
A:tornado.httputil.ts->time.gmtime(ts)
A:tornado.httputil.end->len(s)
A:tornado.httputil.key->next(parts)
A:tornado.httputil.i->p.find('=')
A:tornado.httputil.name->p[:i].strip().lower()
A:tornado.httputil.value->value.replace('\\\\', '\\').replace('\\"', '"').replace('\\\\', '\\').replace('\\"', '"')
tornado.httputil.HTTPFile(ObjectDict)
tornado.httputil.HTTPHeaders(self,*args,**kwargs)
tornado.httputil.HTTPHeaders.__contains__(self,name)
tornado.httputil.HTTPHeaders.__delitem__(self,name)
tornado.httputil.HTTPHeaders.__getitem__(self,name)
tornado.httputil.HTTPHeaders.__init__(self,*args,**kwargs)
tornado.httputil.HTTPHeaders.__setitem__(self,name,value)
tornado.httputil.HTTPHeaders._normalize_name(name)
tornado.httputil.HTTPHeaders.add(self,name,value)
tornado.httputil.HTTPHeaders.copy(self)
tornado.httputil.HTTPHeaders.get(self,name,default=None)
tornado.httputil.HTTPHeaders.get_all(self)
tornado.httputil.HTTPHeaders.get_list(self,name)
tornado.httputil.HTTPHeaders.parse(cls,headers)
tornado.httputil.HTTPHeaders.parse_line(self,line)
tornado.httputil.HTTPHeaders.update(self,*args,**kwargs)
tornado.httputil._parse_header(line)
tornado.httputil._parseparam(s)
tornado.httputil.doctests()
tornado.httputil.format_timestamp(ts)
tornado.httputil.parse_body_arguments(content_type,body,arguments,files)
tornado.httputil.parse_multipart_form_data(boundary,data,arguments,files)
tornado.httputil.url_concat(url,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/wsgi.py----------------------------------------
A:tornado.wsgi.handler->tornado.web.Application.__call__(self, HTTPRequest(environ))
A:tornado.wsgi.headers->list(handler._headers.get_all())
A:tornado.wsgi.self.path->urllib.quote(from_wsgi_str(environ.get('SCRIPT_NAME', '')))
A:tornado.wsgi.self.query->environ.get('QUERY_STRING', '')
A:tornado.wsgi.self.arguments->parse_qs_bytes(native_str(self.query), keep_blank_values=True)
A:tornado.wsgi.self.headers->tornado.httputil.HTTPHeaders()
A:tornado.wsgi.self.body->environ['wsgi.input'].read(int(self.headers['Content-Length']))
A:tornado.wsgi.self.remote_ip->environ.get('REMOTE_ADDR', '')
A:tornado.wsgi.self._start_time->time.time()
A:tornado.wsgi.self._cookies->http.cookies.SimpleCookie()
A:tornado.wsgi.app_response->self.wsgi_application(WSGIContainer.environ(request), start_response)
A:tornado.wsgi.body->tornado.escape.utf8(body)
A:tornado.wsgi.status_code->int(data['status'].split()[0])
A:tornado.wsgi.header_set->set((k.lower() for (k, v) in headers))
A:tornado.wsgi.hostport->request.host.split(':')
A:tornado.wsgi.port->int(hostport[1])
A:tornado.wsgi.environ['CONTENT_TYPE']->request.headers.pop('Content-Type')
A:tornado.wsgi.environ['CONTENT_LENGTH']->request.headers.pop('Content-Length')
tornado.wsgi.HTTPRequest(self,environ)
tornado.wsgi.HTTPRequest.__init__(self,environ)
tornado.wsgi.HTTPRequest.cookies(self)
tornado.wsgi.HTTPRequest.full_url(self)
tornado.wsgi.HTTPRequest.request_time(self)
tornado.wsgi.HTTPRequest.supports_http_1_1(self)
tornado.wsgi.WSGIApplication(self,handlers=None,default_host='',**settings)
tornado.wsgi.WSGIApplication.__init__(self,handlers=None,default_host='',**settings)
tornado.wsgi.WSGIContainer(self,wsgi_application)
tornado.wsgi.WSGIContainer.__init__(self,wsgi_application)
tornado.wsgi.WSGIContainer._log(self,status_code,request)
tornado.wsgi.WSGIContainer.environ(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/concurrent.py----------------------------------------
A:tornado.concurrent.future->TracebackFuture()
A:tornado.concurrent.dummy_executor->DummyExecutor()
A:tornado.concurrent.callback->kwargs.pop('callback', None)
A:tornado.concurrent._NO_RESULT->object()
A:tornado.concurrent.replacer->ArgReplacer(f, 'callback')
A:tornado.concurrent.(callback, args, kwargs)->ArgReplacer(f, 'callback').replace(lambda value=_NO_RESULT: future.set_result(value), args, kwargs)
A:tornado.concurrent.result->TracebackFuture().result()
A:tornado.concurrent.exc_info->sys.exc_info()
tornado.concurrent.DummyExecutor(object)
tornado.concurrent.DummyExecutor.submit(self,fn,*args,**kwargs)
tornado.concurrent.ReturnValueIgnoredError(Exception)
tornado.concurrent.TracebackFuture(self)
tornado.concurrent.TracebackFuture.__init__(self)
tornado.concurrent.TracebackFuture.exc_info(self)
tornado.concurrent.TracebackFuture.result(self)
tornado.concurrent.TracebackFuture.set_exc_info(self,exc_info)
tornado.concurrent._DummyFuture(self)
tornado.concurrent._DummyFuture.__init__(self)
tornado.concurrent._DummyFuture._check_done(self)
tornado.concurrent._DummyFuture._set_done(self)
tornado.concurrent._DummyFuture.add_done_callback(self,fn)
tornado.concurrent._DummyFuture.cancel(self)
tornado.concurrent._DummyFuture.cancelled(self)
tornado.concurrent._DummyFuture.done(self)
tornado.concurrent._DummyFuture.exception(self,timeout=None)
tornado.concurrent._DummyFuture.result(self,timeout=None)
tornado.concurrent._DummyFuture.running(self)
tornado.concurrent._DummyFuture.set_exception(self,exception)
tornado.concurrent._DummyFuture.set_result(self,result)
tornado.concurrent.chain_future(a,b)
tornado.concurrent.return_future(f)
tornado.concurrent.run_on_executor(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/auth.py----------------------------------------
A:tornado.auth.result->Future().result()
A:tornado.auth.replacer->ArgReplacer(f, 'callback')
A:tornado.auth.future->Future()
A:tornado.auth.(callback, args, kwargs)->ArgReplacer(f, 'callback').replace(future, args, kwargs)
A:tornado.auth.args->tornado.escape.parse_qs_bytes(escape.native_str(response.body))
A:tornado.auth.args['openid.mode']->u('check_authentication')
A:tornado.auth.http_client->self.get_auth_http_client()
A:tornado.auth.url->urllib.parse.urljoin(self.request.full_url(), callback_uri)
A:tornado.auth.ax_attrs->set(ax_attrs)
A:tornado.auth.args['openid.ax.required']->','.join(required)
A:tornado.auth.email->get_ax_arg('http://axschema.org/contact/email')
A:tornado.auth.name->get_ax_arg('http://axschema.org/namePerson')
A:tornado.auth.first_name->get_ax_arg('http://axschema.org/namePerson/first')
A:tornado.auth.last_name->get_ax_arg('http://axschema.org/namePerson/last')
A:tornado.auth.username->get_ax_arg('http://axschema.org/namePerson/friendly')
A:tornado.auth.locale->get_ax_arg('http://axschema.org/pref/language').lower()
A:tornado.auth.user->user_future.result()
A:tornado.auth.user['name']->u(' ').join(name_parts)
A:tornado.auth.claimed_id->self.get_argument('openid.claimed_id', None)
A:tornado.auth.request_key->tornado.escape.utf8(self.get_argument('oauth_token'))
A:tornado.auth.oauth_verifier->self.get_argument('oauth_verifier', None)
A:tornado.auth.request_cookie->self.get_cookie('_oauth_request_token')
A:tornado.auth.token->dict(key=p['oauth_token'][0], secret=p['oauth_token_secret'][0])
A:tornado.auth.consumer_token->self._oauth_consumer_token()
A:tornado.auth.args['oauth_callback']->urllib.parse.urljoin(self.request.full_url(), callback_uri)
A:tornado.auth.signature->_oauth_signature(consumer_token, method, url, args, access_token)
A:tornado.auth.request_token->_oauth_parse_response(response.body)
A:tornado.auth.access_token->_oauth_parse_response(response.body)
A:tornado.auth.base_args->dict(oauth_consumer_key=escape.to_basestring(consumer_token['key']), oauth_token=escape.to_basestring(access_token['key']), oauth_signature_method='HMAC-SHA1', oauth_timestamp=str(int(time.time())), oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)), oauth_version=getattr(self, '_OAUTH_VERSION', '1.0a'))
A:tornado.auth.base_args['oauth_signature']->tornado.escape.to_basestring(signature)
A:tornado.auth.http->self.get_auth_http_client()
A:tornado.auth.oauth->self._oauth_request_parameters(url, access_token, all_args, method=method)
A:tornado.auth.http_callback->self.async_callback(self._on_twitter_request, callback)
A:tornado.auth.callback->self.async_callback(self._on_facebook_request, callback)
A:tornado.auth.args['cancel_url']->urllib.parse.urljoin(self.request.full_url(), cancel_uri)
A:tornado.auth.args['req_perms']->','.join(extended_permissions)
A:tornado.auth.session->tornado.escape.json_decode(self.get_argument('session'))
A:tornado.auth.args['call_id']->str(long(time.time() * 1000000.0))
A:tornado.auth.args['sig']->self._signature(args)
A:tornado.auth.json->tornado.escape.json_decode(response.body)
A:tornado.auth.body->tornado.escape.native_str(body)
A:tornado.auth.fields->set(['id', 'name', 'first_name', 'last_name', 'locale', 'picture', 'link'])
A:tornado.auth.fieldmap[field]->user_future.result().get(field)
A:tornado.auth.parts->urllib.parse.urlparse(url)
A:tornado.auth.base_string->'&'.join((_oauth_escape(e) for e in base_elems))
A:tornado.auth.key->b'&'.join(key_elems)
A:tornado.auth.hash->hmac.new(key, escape.utf8(base_string), hashlib.sha1)
A:tornado.auth.val->val.encode('utf-8').encode('utf-8')
A:tornado.auth.p->urllib.parse.parse_qs(body, keep_blank_values=False)
tornado.auth.AuthError(Exception)
tornado.auth.FacebookGraphMixin(OAuth2Mixin)
tornado.auth.FacebookGraphMixin._on_access_token(self,redirect_uri,client_id,client_secret,future,fields,response)
tornado.auth.FacebookGraphMixin._on_facebook_request(self,future,response)
tornado.auth.FacebookGraphMixin._on_get_user_info(self,future,session,fields,user)
tornado.auth.FacebookGraphMixin.facebook_request(self,path,callback,access_token=None,post_args=None,**args)
tornado.auth.FacebookGraphMixin.get_auth_http_client(self)
tornado.auth.FacebookGraphMixin.get_authenticated_user(self,redirect_uri,client_id,client_secret,code,callback,extra_fields=None)
tornado.auth.FacebookMixin(object)
tornado.auth.FacebookMixin._on_get_user_info(self,callback,session,users)
tornado.auth.FacebookMixin._parse_response(self,callback,response)
tornado.auth.FacebookMixin._signature(self,args)
tornado.auth.FacebookMixin.authenticate_redirect(self,callback_uri=None,cancel_uri=None,extended_permissions=None)
tornado.auth.FacebookMixin.authorize_redirect(self,extended_permissions,callback_uri=None,cancel_uri=None)
tornado.auth.FacebookMixin.facebook_request(self,method,callback,**args)
tornado.auth.FacebookMixin.get_auth_http_client(self)
tornado.auth.FacebookMixin.get_authenticated_user(self,callback)
tornado.auth.FriendFeedMixin(OAuthMixin)
tornado.auth.FriendFeedMixin._oauth_consumer_token(self)
tornado.auth.FriendFeedMixin._oauth_get_user_future(self,access_token,callback)
tornado.auth.FriendFeedMixin._on_friendfeed_request(self,future,response)
tornado.auth.FriendFeedMixin._parse_user_response(self,callback,user)
tornado.auth.FriendFeedMixin.friendfeed_request(self,path,callback,access_token=None,post_args=None,**args)
tornado.auth.GoogleMixin(OpenIdMixin,OAuthMixin)
tornado.auth.GoogleMixin._oauth_consumer_token(self)
tornado.auth.GoogleMixin._oauth_get_user_future(self,access_token)
tornado.auth.GoogleMixin.authorize_redirect(self,oauth_scope,callback_uri=None,ax_attrs=['name','email','language','username'])
tornado.auth.GoogleMixin.get_authenticated_user(self,callback)
tornado.auth.OAuth2Mixin(object)
tornado.auth.OAuth2Mixin._oauth_request_token_url(self,redirect_uri=None,client_id=None,client_secret=None,code=None,extra_params=None)
tornado.auth.OAuth2Mixin.authorize_redirect(self,redirect_uri=None,client_id=None,client_secret=None,extra_params=None)
tornado.auth.OAuthMixin(object)
tornado.auth.OAuthMixin._oauth_access_token_url(self,request_token)
tornado.auth.OAuthMixin._oauth_consumer_token(self)
tornado.auth.OAuthMixin._oauth_get_user(self,access_token,callback)
tornado.auth.OAuthMixin._oauth_get_user_future(self,access_token,callback)
tornado.auth.OAuthMixin._oauth_request_parameters(self,url,access_token,parameters={},method='GET')
tornado.auth.OAuthMixin._oauth_request_token_url(self,callback_uri=None,extra_params=None)
tornado.auth.OAuthMixin._on_access_token(self,future,response)
tornado.auth.OAuthMixin._on_oauth_get_user(self,access_token,future,user_future)
tornado.auth.OAuthMixin._on_request_token(self,authorize_url,callback_uri,response)
tornado.auth.OAuthMixin.authorize_redirect(self,callback_uri=None,extra_params=None,http_client=None)
tornado.auth.OAuthMixin.get_auth_http_client(self)
tornado.auth.OAuthMixin.get_authenticated_user(self,callback,http_client=None)
tornado.auth.OpenIdMixin(object)
tornado.auth.OpenIdMixin._on_authentication_verified(self,future,response)
tornado.auth.OpenIdMixin._openid_args(self,callback_uri,ax_attrs=[],oauth_scope=None)
tornado.auth.OpenIdMixin.authenticate_redirect(self,callback_uri=None,ax_attrs=['name','email','language','username'])
tornado.auth.OpenIdMixin.get_auth_http_client(self)
tornado.auth.OpenIdMixin.get_authenticated_user(self,callback,http_client=None)
tornado.auth.TwitterMixin(OAuthMixin)
tornado.auth.TwitterMixin._oauth_consumer_token(self)
tornado.auth.TwitterMixin._oauth_get_user_future(self,access_token)
tornado.auth.TwitterMixin._on_twitter_request(self,future,response)
tornado.auth.TwitterMixin.authenticate_redirect(self,callback_uri=None)
tornado.auth.TwitterMixin.twitter_request(self,path,callback=None,access_token=None,post_args=None,**args)
tornado.auth._auth_future_to_callback(callback,future)
tornado.auth._auth_return_future(f)
tornado.auth._oauth10a_signature(consumer_token,method,url,parameters={},token=None)
tornado.auth._oauth_escape(val)
tornado.auth._oauth_parse_response(body)
tornado.auth._oauth_signature(consumer_token,method,url,parameters={},token=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/curl_httpclient.py----------------------------------------
A:tornado.curl_httpclient.self._multi->pycurl.CurlMulti()
A:tornado.curl_httpclient.self._requests->collections.deque()
A:tornado.curl_httpclient.self._force_timeout_callback->tornado.ioloop.PeriodicCallback(self._handle_force_timeout, 1000, io_loop=io_loop)
A:tornado.curl_httpclient.dummy_curl_handle->pycurl.Curl()
A:tornado.curl_httpclient.self._timeout->self.io_loop.add_timeout(self.io_loop.time() + msecs / 1000.0, self._handle_timeout)
A:tornado.curl_httpclient.(ret, num_handles)->self._multi.socket_all()
A:tornado.curl_httpclient.new_timeout->self._multi.timeout()
A:tornado.curl_httpclient.(num_q, ok_list, err_list)->self._multi.info_read()
A:tornado.curl_httpclient.curl->pycurl.Curl()
A:tornado.curl_httpclient.(request, callback)->self._requests.popleft()
A:tornado.curl_httpclient.error->CurlError(curl_error, curl_message)
A:tornado.curl_httpclient.code->pycurl.Curl().getinfo(pycurl.HTTP_CODE)
A:tornado.curl_httpclient.effective_url->pycurl.Curl().getinfo(pycurl.EFFECTIVE_URL)
A:tornado.curl_httpclient.time_info->dict(queue=info['curl_start_time'] - info['request'].start_time, namelookup=curl.getinfo(pycurl.NAMELOOKUP_TIME), connect=curl.getinfo(pycurl.CONNECT_TIME), pretransfer=curl.getinfo(pycurl.PRETRANSFER_TIME), starttransfer=curl.getinfo(pycurl.STARTTRANSFER_TIME), total=curl.getinfo(pycurl.TOTAL_TIME), redirect=curl.getinfo(pycurl.REDIRECT_TIME))
A:tornado.curl_httpclient.custom_methods->set(['DELETE'])
A:tornado.curl_httpclient.request_buffer->BytesIO(utf8(request.body))
A:tornado.curl_httpclient.header_line->header_line.strip().strip()
tornado.curl_httpclient.CurlAsyncHTTPClient(AsyncHTTPClient)
tornado.curl_httpclient.CurlAsyncHTTPClient._finish(self,curl,curl_error=None,curl_message=None)
tornado.curl_httpclient.CurlAsyncHTTPClient._finish_pending_requests(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_events(self,fd,events)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_force_timeout(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_socket(self,event,fd,multi,data)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_timeout(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._process_queue(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._set_timeout(self,msecs)
tornado.curl_httpclient.CurlAsyncHTTPClient.close(self)
tornado.curl_httpclient.CurlAsyncHTTPClient.fetch_impl(self,request,callback)
tornado.curl_httpclient.CurlAsyncHTTPClient.handle_callback_exception(self,callback)
tornado.curl_httpclient.CurlAsyncHTTPClient.initialize(self,io_loop,max_clients=10,defaults=None)
tornado.curl_httpclient.CurlError(self,errno,message)
tornado.curl_httpclient.CurlError.__init__(self,errno,message)
tornado.curl_httpclient._curl_create()
tornado.curl_httpclient._curl_debug(debug_type,debug_msg)
tornado.curl_httpclient._curl_header_callback(headers,header_line)
tornado.curl_httpclient._curl_setup_request(curl,request,buffer,headers)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/simple_httpclient.py----------------------------------------
A:tornado.simple_httpclient.self.queue->collections.deque()
A:tornado.simple_httpclient.self.resolver->OverrideResolver(resolver=self.resolver, mapping=hostname_mapping)
A:tornado.simple_httpclient.(request, callback)->self.queue.popleft()
A:tornado.simple_httpclient.key->object()
A:tornado.simple_httpclient._SUPPORTED_METHODS->set(['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'])
A:tornado.simple_httpclient.self.start_time->io_loop.time()
A:tornado.simple_httpclient.self.parsed->urllib.parse.urlsplit(_unicode(self.request.url))
A:tornado.simple_httpclient.(userpass, _, netloc)->netloc.rpartition('@')
A:tornado.simple_httpclient.match->re.match('HTTP/1.[01] ([0-9]+) ([^\r]*)', first_line)
A:tornado.simple_httpclient.host->re.match('HTTP/1.[01] ([0-9]+) ([^\r]*)', first_line).group(1)
A:tornado.simple_httpclient.port->int(match.group(2))
A:tornado.simple_httpclient.self.stream->IOStream(socket.socket(af), io_loop=self.io_loop, max_buffer_size=self.max_buffer_size)
A:tornado.simple_httpclient.timeout->min(self.request.connect_timeout, self.request.request_timeout)
A:tornado.simple_httpclient.self._timeout->self.io_loop.add_timeout(self.start_time + self.request.request_timeout, stack_context.wrap(self._on_timeout))
A:tornado.simple_httpclient.self.request.headers['Content-Length']->str(len(self.request.body))
A:tornado.simple_httpclient.message->str(self.stream.error)
A:tornado.simple_httpclient.data->native_str(data.decode('latin1'))
A:tornado.simple_httpclient.(first_line, _, header_data)->native_str(data.decode('latin1')).partition('\n')
A:tornado.simple_httpclient.code->int(match.group(1))
A:tornado.simple_httpclient.self.headers->tornado.httputil.HTTPHeaders.parse(header_data)
A:tornado.simple_httpclient.self.reason->re.match('HTTP/1.[01] ([0-9]+) ([^\r]*)', first_line).group(2)
A:tornado.simple_httpclient.pieces->re.split(',\\s*', self.headers['Content-Length'])
A:tornado.simple_httpclient.content_length->int(self.headers['Content-Length'])
A:tornado.simple_httpclient.self._decompressor->GzipDecompressor()
A:tornado.simple_httpclient.original_request->getattr(self.request, 'original_request', self.request)
A:tornado.simple_httpclient.new_request->copy.copy(self.request.request)
A:tornado.simple_httpclient.new_request.url->urllib.parse.urljoin(self.request.url, self.headers['Location'])
A:tornado.simple_httpclient.buffer->BytesIO(data)
A:tornado.simple_httpclient.response->HTTPResponse(original_request, self.code, reason=self.reason, headers=self.headers, request_time=self.io_loop.time() - self.start_time, buffer=buffer, effective_url=self.request.url)
A:tornado.simple_httpclient.length->int(data.strip(), 16)
A:tornado.simple_httpclient.tail->self._decompressor.flush()
A:tornado.simple_httpclient.chunk->self._decompressor.decompress(chunk)
tornado.simple_httpclient.SimpleAsyncHTTPClient(AsyncHTTPClient)
tornado.simple_httpclient.SimpleAsyncHTTPClient._process_queue(self)
tornado.simple_httpclient.SimpleAsyncHTTPClient._release_fetch(self,key)
tornado.simple_httpclient.SimpleAsyncHTTPClient.fetch_impl(self,request,callback)
tornado.simple_httpclient.SimpleAsyncHTTPClient.initialize(self,io_loop,max_clients=10,hostname_mapping=None,max_buffer_size=104857600,resolver=None,defaults=None)
tornado.simple_httpclient._HTTPConnection(self,io_loop,client,request,release_callback,final_callback,max_buffer_size,resolver)
tornado.simple_httpclient._HTTPConnection.__init__(self,io_loop,client,request,release_callback,final_callback,max_buffer_size,resolver)
tornado.simple_httpclient._HTTPConnection._handle_1xx(self,code)
tornado.simple_httpclient._HTTPConnection._handle_exception(self,typ,value,tb)
tornado.simple_httpclient._HTTPConnection._on_body(self,data)
tornado.simple_httpclient._HTTPConnection._on_chunk_data(self,data)
tornado.simple_httpclient._HTTPConnection._on_chunk_length(self,data)
tornado.simple_httpclient._HTTPConnection._on_close(self)
tornado.simple_httpclient._HTTPConnection._on_connect(self)
tornado.simple_httpclient._HTTPConnection._on_headers(self,data)
tornado.simple_httpclient._HTTPConnection._on_resolve(self,addrinfo)
tornado.simple_httpclient._HTTPConnection._on_timeout(self)
tornado.simple_httpclient._HTTPConnection._release(self)
tornado.simple_httpclient._HTTPConnection._remove_timeout(self)
tornado.simple_httpclient._HTTPConnection._run_callback(self,response)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/httpserver.py----------------------------------------
A:tornado.httpserver.self._header_callback->tornado.stack_context.wrap(self._on_headers)
A:tornado.httpserver.self._close_callback->tornado.stack_context.wrap(callback)
A:tornado.httpserver.self._write_callback->tornado.stack_context.wrap(callback)
A:tornado.httpserver.connection_header->connection_header.lower().lower()
A:tornado.httpserver.data->native_str(data.decode('latin1'))
A:tornado.httpserver.eol->native_str(data.decode('latin1')).find('\r\n')
A:tornado.httpserver.(method, uri, version)->start_line.split(' ')
A:tornado.httpserver.headers->tornado.httputil.HTTPHeaders.parse(data[eol:])
A:tornado.httpserver.self._request->HTTPRequest(connection=self, method=method, uri=uri, version=version, headers=headers, remote_ip=remote_ip, protocol=self.protocol)
A:tornado.httpserver.content_length->int(content_length)
A:tornado.httpserver.ip->self.headers.get('X-Real-Ip', self.headers.get('X-Forwarded-For', self.remote_ip))
A:tornado.httpserver.proto->self.headers.get('X-Scheme', self.headers.get('X-Forwarded-Proto', self.protocol))
A:tornado.httpserver.self._start_time->time.time()
A:tornado.httpserver.(self.path, sep, self.query)->uri.partition('?')
A:tornado.httpserver.self.arguments->parse_qs_bytes(self.query, keep_blank_values=True)
A:tornado.httpserver.self._cookies->http.cookies.SimpleCookie()
A:tornado.httpserver.self._finish_time->time.time()
A:tornado.httpserver.args->', '.join(['%s=%r' % (n, getattr(self, n)) for n in attrs])
tornado.httpserver.HTTPConnection(self,stream,address,request_callback,no_keep_alive=False,xheaders=False,protocol=None)
tornado.httpserver.HTTPConnection.__init__(self,stream,address,request_callback,no_keep_alive=False,xheaders=False,protocol=None)
tornado.httpserver.HTTPConnection._clear_callbacks(self)
tornado.httpserver.HTTPConnection._finish_request(self)
tornado.httpserver.HTTPConnection._on_connection_close(self)
tornado.httpserver.HTTPConnection._on_headers(self,data)
tornado.httpserver.HTTPConnection._on_request_body(self,data)
tornado.httpserver.HTTPConnection._on_write_complete(self)
tornado.httpserver.HTTPConnection.close(self)
tornado.httpserver.HTTPConnection.finish(self)
tornado.httpserver.HTTPConnection.set_close_callback(self,callback)
tornado.httpserver.HTTPConnection.write(self,chunk,callback=None)
tornado.httpserver.HTTPRequest(self,method,uri,version='HTTP/1.0',headers=None,body=None,remote_ip=None,protocol=None,host=None,files=None,connection=None)
tornado.httpserver.HTTPRequest.__init__(self,method,uri,version='HTTP/1.0',headers=None,body=None,remote_ip=None,protocol=None,host=None,files=None,connection=None)
tornado.httpserver.HTTPRequest.__repr__(self)
tornado.httpserver.HTTPRequest.cookies(self)
tornado.httpserver.HTTPRequest.finish(self)
tornado.httpserver.HTTPRequest.full_url(self)
tornado.httpserver.HTTPRequest.get_ssl_certificate(self,binary_form=False)
tornado.httpserver.HTTPRequest.request_time(self)
tornado.httpserver.HTTPRequest.supports_http_1_1(self)
tornado.httpserver.HTTPRequest.write(self,chunk,callback=None)
tornado.httpserver.HTTPServer(self,request_callback,no_keep_alive=False,io_loop=None,xheaders=False,ssl_options=None,protocol=None,**kwargs)
tornado.httpserver.HTTPServer.__init__(self,request_callback,no_keep_alive=False,io_loop=None,xheaders=False,ssl_options=None,protocol=None,**kwargs)
tornado.httpserver.HTTPServer.handle_stream(self,stream,address)
tornado.httpserver._BadRequestException(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/websocket.py----------------------------------------
A:tornado.websocket.connection->map(lambda s: s.strip().lower(), headers.get('Connection', '').split(','))
A:tornado.websocket.self.ws_connection->WebSocketProtocol76(self)
A:tornado.websocket.message->tornado.escape.utf8(message)
A:tornado.websocket.callback->functools.partial(callback, *args, **kwargs)
A:tornado.websocket.scheme->self.handler.get_websocket_scheme()
A:tornado.websocket.subprotocol->self.request.headers.get('Sec-WebSocket-Protocol', None)
A:tornado.websocket.selected->self.handler.select_subprotocol(subprotocols)
A:tornado.websocket.key_1->self.request.headers.get('Sec-Websocket-Key1')
A:tornado.websocket.key_2->self.request.headers.get('Sec-Websocket-Key2')
A:tornado.websocket.part_1->self._calculate_part(key_1)
A:tornado.websocket.part_2->self._calculate_part(key_2)
A:tornado.websocket.challenge_response->self.challenge_response(challenge)
A:tornado.websocket.number->int(''.join((c for c in key if c.isdigit())))
A:tornado.websocket.spaces->len([c2 for c2 in key if c2.isspace()])
A:tornado.websocket.m->hashlib.md5()
A:tornado.websocket.frame_type->ord(byte)
A:tornado.websocket.self._waiting->self.stream.io_loop.add_timeout(self.stream.io_loop.time() + 5, self._abort)
A:tornado.websocket.sha1->hashlib.sha1()
A:tornado.websocket.subprotocols->self.request.headers.get('Sec-WebSocket-Protocol', '')
A:tornado.websocket.frame->struct.pack('B', finbit | opcode)
A:tornado.websocket.l->len(data)
A:tornado.websocket.mask->array.array('B', mask)
A:tornado.websocket.(header, payloadlen)->struct.unpack('BB', data)
A:tornado.websocket.self._masked_frame->bool(payloadlen & 128)
A:tornado.websocket.unmasked->array.array('B', data)
A:tornado.websocket.decoded->data.decode('utf-8')
A:tornado.websocket.self.connect_future->Future()
A:tornado.websocket.self.read_queue->collections.deque()
A:tornado.websocket.self.key->base64.b64encode(os.urandom(16))
A:tornado.websocket.(scheme, sep, rest)->tornado.httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS).url.partition(':')
A:tornado.websocket.accept->WebSocketProtocol13.compute_accept_value(self.key)
A:tornado.websocket.self.protocol->WebSocketProtocol13(self, mask_outgoing=True)
A:tornado.websocket.future->Future()
A:tornado.websocket.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.websocket.request->tornado.httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS)
A:tornado.websocket.conn->WebSocketClientConnection(io_loop, request)
tornado.websocket.WebSocketClientConnection(self,io_loop,request)
tornado.websocket.WebSocketClientConnection.__init__(self,io_loop,request)
tornado.websocket.WebSocketClientConnection._handle_1xx(self,code)
tornado.websocket.WebSocketClientConnection._on_close(self)
tornado.websocket.WebSocketClientConnection._on_http_response(self,response)
tornado.websocket.WebSocketClientConnection.on_message(self,message)
tornado.websocket.WebSocketClientConnection.on_pong(self,data)
tornado.websocket.WebSocketClientConnection.read_message(self,callback=None)
tornado.websocket.WebSocketClientConnection.write_message(self,message,binary=False)
tornado.websocket.WebSocketError(Exception)
tornado.websocket.WebSocketHandler(self,application,request,**kwargs)
tornado.websocket.WebSocketHandler.__init__(self,application,request,**kwargs)
tornado.websocket.WebSocketHandler._execute(self,transforms,*args,**kwargs)
tornado.websocket.WebSocketHandler._not_supported(self,*args,**kwargs)
tornado.websocket.WebSocketHandler.allow_draft76(self)
tornado.websocket.WebSocketHandler.async_callback(self,callback,*args,**kwargs)
tornado.websocket.WebSocketHandler.close(self)
tornado.websocket.WebSocketHandler.get_websocket_scheme(self)
tornado.websocket.WebSocketHandler.on_close(self)
tornado.websocket.WebSocketHandler.on_connection_close(self)
tornado.websocket.WebSocketHandler.on_message(self,message)
tornado.websocket.WebSocketHandler.on_pong(self,data)
tornado.websocket.WebSocketHandler.open(self)
tornado.websocket.WebSocketHandler.ping(self,data)
tornado.websocket.WebSocketHandler.select_subprotocol(self,subprotocols)
tornado.websocket.WebSocketHandler.write_message(self,message,binary=False)
tornado.websocket.WebSocketProtocol(self,handler)
tornado.websocket.WebSocketProtocol.__init__(self,handler)
tornado.websocket.WebSocketProtocol._abort(self)
tornado.websocket.WebSocketProtocol.async_callback(self,callback,*args,**kwargs)
tornado.websocket.WebSocketProtocol.on_connection_close(self)
tornado.websocket.WebSocketProtocol13(self,handler,mask_outgoing=False)
tornado.websocket.WebSocketProtocol13.__init__(self,handler,mask_outgoing=False)
tornado.websocket.WebSocketProtocol13._accept_connection(self)
tornado.websocket.WebSocketProtocol13._apply_mask(self,mask,data)
tornado.websocket.WebSocketProtocol13._challenge_response(self)
tornado.websocket.WebSocketProtocol13._handle_message(self,opcode,data)
tornado.websocket.WebSocketProtocol13._handle_websocket_headers(self)
tornado.websocket.WebSocketProtocol13._on_frame_data(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_length_16(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_length_64(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_start(self,data)
tornado.websocket.WebSocketProtocol13._on_masked_frame_data(self,data)
tornado.websocket.WebSocketProtocol13._on_masking_key(self,data)
tornado.websocket.WebSocketProtocol13._receive_frame(self)
tornado.websocket.WebSocketProtocol13._write_frame(self,fin,opcode,data)
tornado.websocket.WebSocketProtocol13.accept_connection(self)
tornado.websocket.WebSocketProtocol13.close(self)
tornado.websocket.WebSocketProtocol13.compute_accept_value(key)
tornado.websocket.WebSocketProtocol13.write_message(self,message,binary=False)
tornado.websocket.WebSocketProtocol13.write_ping(self,data)
tornado.websocket.WebSocketProtocol76(self,handler)
tornado.websocket.WebSocketProtocol76.__init__(self,handler)
tornado.websocket.WebSocketProtocol76._calculate_part(self,key)
tornado.websocket.WebSocketProtocol76._generate_challenge_response(self,part_1,part_2,part_3)
tornado.websocket.WebSocketProtocol76._handle_challenge(self,challenge)
tornado.websocket.WebSocketProtocol76._handle_websocket_headers(self)
tornado.websocket.WebSocketProtocol76._on_end_delimiter(self,frame)
tornado.websocket.WebSocketProtocol76._on_frame_type(self,byte)
tornado.websocket.WebSocketProtocol76._on_length_indicator(self,byte)
tornado.websocket.WebSocketProtocol76._receive_message(self)
tornado.websocket.WebSocketProtocol76._write_response(self,challenge)
tornado.websocket.WebSocketProtocol76.accept_connection(self)
tornado.websocket.WebSocketProtocol76.challenge_response(self,challenge)
tornado.websocket.WebSocketProtocol76.close(self)
tornado.websocket.WebSocketProtocol76.write_message(self,message,binary=False)
tornado.websocket.WebSocketProtocol76.write_ping(self,data)
tornado.websocket.websocket_connect(url,io_loop=None,callback=None,connect_timeout=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/tcpserver.py----------------------------------------
A:tornado.tcpserver.sockets->bind_sockets(port, address=address, family=family, backlog=backlog)
A:tornado.tcpserver.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.tcpserver.connection->ssl_wrap_socket(connection, self.ssl_options, server_side=True, do_handshake_on_connect=False)
A:tornado.tcpserver.stream->IOStream(connection, io_loop=self.io_loop)
tornado.tcpserver.TCPServer(self,io_loop=None,ssl_options=None)
tornado.tcpserver.TCPServer.__init__(self,io_loop=None,ssl_options=None)
tornado.tcpserver.TCPServer._handle_connection(self,connection,address)
tornado.tcpserver.TCPServer.add_socket(self,socket)
tornado.tcpserver.TCPServer.add_sockets(self,sockets)
tornado.tcpserver.TCPServer.bind(self,port,address=None,family=socket.AF_UNSPEC,backlog=128)
tornado.tcpserver.TCPServer.handle_stream(self,stream,address)
tornado.tcpserver.TCPServer.listen(self,port,address='')
tornado.tcpserver.TCPServer.start(self,num_processes=1)
tornado.tcpserver.TCPServer.stop(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/iostream.py----------------------------------------
A:tornado.iostream.self._read_buffer->collections.deque()
A:tornado.iostream.self._write_buffer->collections.deque()
A:tornado.iostream.self._read_regex->re.compile(regex)
A:tornado.iostream.self._streaming_callback->tornado.stack_context.wrap(streaming_callback)
A:tornado.iostream.self._write_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.self._close_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.exc_info->sys.exc_info()
A:tornado.iostream.self.error->socket.error(err, os.strerror(err))
A:tornado.iostream.self._read_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.chunk->deque.popleft()
A:tornado.iostream.bytes_to_consume->min(self._read_bytes, bytes_to_consume)
A:tornado.iostream.loc->self._read_buffer[0].find(self._read_delimiter)
A:tornado.iostream.delimiter_len->len(self._read_delimiter)
A:tornado.iostream.m->self._read_regex.search(self._read_buffer[0])
A:tornado.iostream.num_bytes->self.write_to_fd(self._write_buffer[0])
A:tornado.iostream.errno->self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
A:tornado.iostream.self._connect_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.err->self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
A:tornado.iostream.self._ssl_options->kwargs.pop('ssl_options', {})
A:tornado.iostream.peer->self.socket.getpeername()
A:tornado.iostream.verify_mode->self._ssl_options.get('cert_reqs', ssl.CERT_NONE)
A:tornado.iostream.cert->self.socket.getpeercert()
A:tornado.iostream.self.socket->ssl_wrap_socket(self.socket, self._ssl_options, server_hostname=self._server_hostname, do_handshake_on_connect=False)
A:tornado.iostream.new_len->max(len(deque[0]) * 2, len(deque[0]) + len(deque[1]))
tornado.iostream.BaseIOStream(self,io_loop=None,max_buffer_size=104857600,read_chunk_size=4096)
tornado.iostream.BaseIOStream.__init__(self,io_loop=None,max_buffer_size=104857600,read_chunk_size=4096)
tornado.iostream.BaseIOStream._add_io_state(self,state)
tornado.iostream.BaseIOStream._check_closed(self)
tornado.iostream.BaseIOStream._consume(self,loc)
tornado.iostream.BaseIOStream._handle_events(self,fd,events)
tornado.iostream.BaseIOStream._handle_read(self)
tornado.iostream.BaseIOStream._handle_write(self)
tornado.iostream.BaseIOStream._maybe_add_error_listener(self)
tornado.iostream.BaseIOStream._maybe_run_close_callback(self)
tornado.iostream.BaseIOStream._read_from_buffer(self)
tornado.iostream.BaseIOStream._read_to_buffer(self)
tornado.iostream.BaseIOStream._run_callback(self,callback,*args)
tornado.iostream.BaseIOStream._set_read_callback(self,callback)
tornado.iostream.BaseIOStream._try_inline_read(self)
tornado.iostream.BaseIOStream.close(self,exc_info=False)
tornado.iostream.BaseIOStream.close_fd(self)
tornado.iostream.BaseIOStream.closed(self)
tornado.iostream.BaseIOStream.fileno(self)
tornado.iostream.BaseIOStream.get_fd_error(self)
tornado.iostream.BaseIOStream.read_bytes(self,num_bytes,callback,streaming_callback=None)
tornado.iostream.BaseIOStream.read_from_fd(self)
tornado.iostream.BaseIOStream.read_until(self,delimiter,callback)
tornado.iostream.BaseIOStream.read_until_close(self,callback,streaming_callback=None)
tornado.iostream.BaseIOStream.read_until_regex(self,regex,callback)
tornado.iostream.BaseIOStream.reading(self)
tornado.iostream.BaseIOStream.set_close_callback(self,callback)
tornado.iostream.BaseIOStream.write(self,data,callback=None)
tornado.iostream.BaseIOStream.write_to_fd(self,data)
tornado.iostream.BaseIOStream.writing(self)
tornado.iostream.IOStream(self,socket,*args,**kwargs)
tornado.iostream.IOStream.__init__(self,socket,*args,**kwargs)
tornado.iostream.IOStream._handle_connect(self)
tornado.iostream.IOStream.close_fd(self)
tornado.iostream.IOStream.connect(self,address,callback=None,server_hostname=None)
tornado.iostream.IOStream.fileno(self)
tornado.iostream.IOStream.get_fd_error(self)
tornado.iostream.IOStream.read_from_fd(self)
tornado.iostream.IOStream.write_to_fd(self,data)
tornado.iostream.PipeIOStream(self,fd,*args,**kwargs)
tornado.iostream.PipeIOStream.__init__(self,fd,*args,**kwargs)
tornado.iostream.PipeIOStream.close_fd(self)
tornado.iostream.PipeIOStream.fileno(self)
tornado.iostream.PipeIOStream.read_from_fd(self)
tornado.iostream.PipeIOStream.write_to_fd(self,data)
tornado.iostream.SSLIOStream(self,*args,**kwargs)
tornado.iostream.SSLIOStream.__init__(self,*args,**kwargs)
tornado.iostream.SSLIOStream._do_ssl_handshake(self)
tornado.iostream.SSLIOStream._handle_connect(self)
tornado.iostream.SSLIOStream._handle_read(self)
tornado.iostream.SSLIOStream._handle_write(self)
tornado.iostream.SSLIOStream._verify_cert(self,peercert)
tornado.iostream.SSLIOStream.connect(self,address,callback=None,server_hostname=None)
tornado.iostream.SSLIOStream.read_from_fd(self)
tornado.iostream.SSLIOStream.reading(self)
tornado.iostream.SSLIOStream.writing(self)
tornado.iostream.StreamClosedError(IOError)
tornado.iostream._double_prefix(deque)
tornado.iostream._merge_prefix(deque,size)
tornado.iostream.doctests()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/util.py----------------------------------------
A:tornado.util.self.decompressobj->zlib.decompressobj(16 + zlib.MAX_WBITS)
A:tornado.util.parts->name.split('.')
A:tornado.util.obj->__import__('.'.join(parts[:-1]), None, None, [parts[-1]], 0)
A:tornado.util.base->cls.configurable_base()
A:tornado.util.impl->import_object(impl)
A:tornado.util.instance->super(Configurable, cls).__new__(impl)
A:tornado.util.base.__impl_class->cls.configurable_default()
A:tornado.util.self.arg_pos->inspect.getargspec(func).args.index(self.name)
A:tornado.util.args->list(args)
A:tornado.util.old_value->kwargs.get(self.name)
tornado.util.ArgReplacer(self,func,name)
tornado.util.ArgReplacer.__init__(self,func,name)
tornado.util.ArgReplacer.replace(self,new_value,args,kwargs)
tornado.util.Configurable(cls,**kwargs)
tornado.util.Configurable.__new__(cls,**kwargs)
tornado.util.Configurable._restore_configuration(cls,saved)
tornado.util.Configurable._save_configuration(cls)
tornado.util.Configurable.configurable_base(cls)
tornado.util.Configurable.configurable_default(cls)
tornado.util.Configurable.configure(cls,impl,**kwargs)
tornado.util.Configurable.configured_class(cls)
tornado.util.Configurable.initialize(self)
tornado.util.GzipDecompressor(self)
tornado.util.GzipDecompressor.__init__(self)
tornado.util.GzipDecompressor.decompress(self,value)
tornado.util.GzipDecompressor.flush(self)
tornado.util.ObjectDict(dict)
tornado.util.ObjectDict.__getattr__(self,name)
tornado.util.ObjectDict.__setattr__(self,name,value)
tornado.util.doctests()
tornado.util.import_object(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/log.py----------------------------------------
A:tornado.log.access_log->logging.getLogger('tornado.access')
A:tornado.log.app_log->logging.getLogger('tornado.application')
A:tornado.log.gen_log->logging.getLogger('tornado.general')
A:tornado.log.fg_color->unicode_type(fg_color, 'ascii')
A:tornado.log.self._normal->unicode_type(curses.tigetstr('sgr0'), 'ascii')
A:tornado.log.record.message->record.getMessage()
A:tornado.log.record.asctime->time.strftime('%y%m%d %H:%M:%S', self.converter(record.created))
A:tornado.log.record.exc_text->self.formatException(record.exc_info)
A:tornado.log.formatted->'\n'.join(lines)
A:tornado.log.logger->logging.getLogger()
A:tornado.log.channel->logging.StreamHandler()
tornado.log.LogFormatter(self,color=True,*args,**kwargs)
tornado.log.LogFormatter.__init__(self,color=True,*args,**kwargs)
tornado.log.LogFormatter.format(self,record)
tornado.log._stderr_supports_color()
tornado.log.define_logging_options(options=None)
tornado.log.enable_pretty_logging(options=None,logger=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/autoreload.py----------------------------------------
A:tornado.autoreload._watched_files->set()
A:tornado.autoreload._io_loops->weakref.WeakKeyDictionary()
A:tornado.autoreload.callback->functools.partial(_reload_on_update, modify_times)
A:tornado.autoreload.scheduler->tornado.ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)
A:tornado.autoreload.io_loop->tornado.ioloop.IOLoop()
A:tornado.autoreload.path->getattr(module, '__file__', None)
A:tornado.autoreload.loader->pkgutil.get_loader(module)
tornado.autoreload._check_file(modify_times,path)
tornado.autoreload._reload()
tornado.autoreload._reload_on_update(modify_times)
tornado.autoreload.add_reload_hook(fn)
tornado.autoreload.main()
tornado.autoreload.start(io_loop=None,check_time=500)
tornado.autoreload.wait()
tornado.autoreload.watch(filename)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/select.py----------------------------------------
A:tornado.platform.select.self.read_fds->set()
A:tornado.platform.select.self.write_fds->set()
A:tornado.platform.select.self.error_fds->set()
A:tornado.platform.select.(readable, writeable, errors)->select.select(self.read_fds, self.write_fds, self.error_fds, timeout)
tornado.platform.select.SelectIOLoop(PollIOLoop)
tornado.platform.select.SelectIOLoop.initialize(self,**kwargs)
tornado.platform.select._Select(self)
tornado.platform.select._Select.__init__(self)
tornado.platform.select._Select.close(self)
tornado.platform.select._Select.modify(self,fd,events)
tornado.platform.select._Select.poll(self,timeout)
tornado.platform.select._Select.register(self,fd,events)
tornado.platform.select._Select.unregister(self,fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/windows.py----------------------------------------
A:tornado.platform.windows.success->SetHandleInformation(fd, HANDLE_FLAG_INHERIT, 0)
tornado.platform.windows.set_close_exec(fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/auto.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/interface.py----------------------------------------
tornado.platform.interface.Waker(object)
tornado.platform.interface.Waker.close(self)
tornado.platform.interface.Waker.consume(self)
tornado.platform.interface.Waker.fileno(self)
tornado.platform.interface.Waker.wake(self)
tornado.platform.interface.Waker.write_fileno(self)
tornado.platform.interface.set_close_exec(fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/caresresolver.py----------------------------------------
A:tornado.platform.caresresolver.self.channel->pycares.Channel(sock_state_cb=self._sock_state_cb)
tornado.platform.caresresolver.CaresResolver(Resolver)
tornado.platform.caresresolver.CaresResolver._handle_events(self,fd,events)
tornado.platform.caresresolver.CaresResolver._sock_state_cb(self,fd,readable,writable)
tornado.platform.caresresolver.CaresResolver.initialize(self,io_loop=None)
tornado.platform.caresresolver.CaresResolver.resolve(self,host,port,family=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/epoll.py----------------------------------------
tornado.platform.epoll.EPollIOLoop(PollIOLoop)
tornado.platform.epoll.EPollIOLoop.initialize(self,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/kqueue.py----------------------------------------
A:tornado.platform.kqueue.self._kqueue->select.kqueue()
A:tornado.platform.kqueue.events->self._active.pop(fd)
A:tornado.platform.kqueue.kevents->self._kqueue.control(None, 1000, timeout)
tornado.platform.kqueue.KQueueIOLoop(PollIOLoop)
tornado.platform.kqueue.KQueueIOLoop.initialize(self,**kwargs)
tornado.platform.kqueue._KQueue(self)
tornado.platform.kqueue._KQueue.__init__(self)
tornado.platform.kqueue._KQueue._control(self,fd,events,flags)
tornado.platform.kqueue._KQueue.close(self)
tornado.platform.kqueue._KQueue.fileno(self)
tornado.platform.kqueue._KQueue.modify(self,fd,events)
tornado.platform.kqueue._KQueue.poll(self,timeout)
tornado.platform.kqueue._KQueue.register(self,fd,events)
tornado.platform.kqueue._KQueue.unregister(self,fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/twisted.py----------------------------------------
A:tornado.platform.twisted.self._func->functools.partial(f, *args, **kw)
A:tornado.platform.twisted.self._timeout->self._reactor._io_loop.add_timeout(self._time, self._called)
A:tornado.platform.twisted.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.platform.twisted.dc->TornadoDelayedCall(self, seconds, f, *args, **kw)
A:tornado.platform.twisted.err->twisted.internet.error.ConnectionLost()
A:tornado.platform.twisted.fd->self._writers.pop(writer)
A:tornado.platform.twisted.fire_shutdown->functools.partial(self.fireSystemEvent, 'shutdown')
A:tornado.platform.twisted.reactor->TornadoReactor(io_loop)
A:tornado.platform.twisted.self.fds[fd]->_FD(fd, wrap(handler))
A:tornado.platform.twisted.delay->tornado.ioloop._Timeout.timedelta_to_seconds(deadline)
A:tornado.platform.twisted.self.reactor->tornado.platform.twisted.TornadoReactor(io_loop)
A:tornado.platform.twisted.host_resolver->twisted.names.hosts.Resolver('/etc/hosts')
A:tornado.platform.twisted.cache_resolver->twisted.names.cache.CacheResolver(reactor=self.reactor)
A:tornado.platform.twisted.real_resolver->twisted.names.client.Resolver('/etc/resolv.conf', reactor=self.reactor)
A:tornado.platform.twisted.self.resolver->twisted.names.resolve.ResolverChain([host_resolver, cache_resolver, real_resolver])
A:tornado.platform.twisted.deferred->self.resolver.getHostByName(utf8(host))
tornado.platform.twisted.TornadoDelayedCall(self,reactor,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoDelayedCall.__init__(self,reactor,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoDelayedCall._called(self)
tornado.platform.twisted.TornadoDelayedCall.active(self)
tornado.platform.twisted.TornadoDelayedCall.cancel(self)
tornado.platform.twisted.TornadoDelayedCall.delay(self,seconds)
tornado.platform.twisted.TornadoDelayedCall.getTime(self)
tornado.platform.twisted.TornadoDelayedCall.reset(self,seconds)
tornado.platform.twisted.TornadoReactor(self,io_loop=None)
tornado.platform.twisted.TornadoReactor.__init__(self,io_loop=None)
tornado.platform.twisted.TornadoReactor._invoke_callback(self,fd,events)
tornado.platform.twisted.TornadoReactor._removeDelayedCall(self,dc)
tornado.platform.twisted.TornadoReactor.addReader(self,reader)
tornado.platform.twisted.TornadoReactor.addWriter(self,writer)
tornado.platform.twisted.TornadoReactor.callFromThread(self,f,*args,**kw)
tornado.platform.twisted.TornadoReactor.callLater(self,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoReactor.crash(self)
tornado.platform.twisted.TornadoReactor.doIteration(self,delay)
tornado.platform.twisted.TornadoReactor.getDelayedCalls(self)
tornado.platform.twisted.TornadoReactor.getReaders(self)
tornado.platform.twisted.TornadoReactor.getWriters(self)
tornado.platform.twisted.TornadoReactor.installWaker(self)
tornado.platform.twisted.TornadoReactor.mainLoop(self)
tornado.platform.twisted.TornadoReactor.removeAll(self)
tornado.platform.twisted.TornadoReactor.removeReader(self,reader)
tornado.platform.twisted.TornadoReactor.removeWriter(self,writer)
tornado.platform.twisted.TornadoReactor.seconds(self)
tornado.platform.twisted.TornadoReactor.stop(self)
tornado.platform.twisted.TornadoReactor.wakeUp(self)
tornado.platform.twisted.TwistedIOLoop(tornado.ioloop.IOLoop)
tornado.platform.twisted.TwistedIOLoop._run_callback(self,callback,*args,**kwargs)
tornado.platform.twisted.TwistedIOLoop.add_callback(self,callback,*args,**kwargs)
tornado.platform.twisted.TwistedIOLoop.add_callback_from_signal(self,callback,*args,**kwargs)
tornado.platform.twisted.TwistedIOLoop.add_handler(self,fd,handler,events)
tornado.platform.twisted.TwistedIOLoop.add_timeout(self,deadline,callback)
tornado.platform.twisted.TwistedIOLoop.close(self,all_fds=False)
tornado.platform.twisted.TwistedIOLoop.initialize(self,reactor=None)
tornado.platform.twisted.TwistedIOLoop.remove_handler(self,fd)
tornado.platform.twisted.TwistedIOLoop.remove_timeout(self,timeout)
tornado.platform.twisted.TwistedIOLoop.start(self)
tornado.platform.twisted.TwistedIOLoop.stop(self)
tornado.platform.twisted.TwistedIOLoop.update_handler(self,fd,events)
tornado.platform.twisted.TwistedResolver(Resolver)
tornado.platform.twisted.TwistedResolver.initialize(self,io_loop=None)
tornado.platform.twisted.TwistedResolver.resolve(self,host,port,family=0)
tornado.platform.twisted._FD(self,fd,handler)
tornado.platform.twisted._FD.__init__(self,fd,handler)
tornado.platform.twisted._FD.connectionLost(self,reason)
tornado.platform.twisted._FD.doRead(self)
tornado.platform.twisted._FD.doWrite(self)
tornado.platform.twisted._FD.fileno(self)
tornado.platform.twisted._FD.logPrefix(self)
tornado.platform.twisted._TestReactor(self)
tornado.platform.twisted._TestReactor.__init__(self)
tornado.platform.twisted._TestReactor.listenTCP(self,port,factory,backlog=50,interface='')
tornado.platform.twisted._TestReactor.listenUDP(self,port,protocol,interface='',maxPacketSize=8192)
tornado.platform.twisted.install(io_loop=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/common.py----------------------------------------
A:tornado.platform.common.self.writer->socket.socket()
A:tornado.platform.common.a->socket.socket()
A:tornado.platform.common.connect_address->socket.socket().getsockname()
A:tornado.platform.common.(self.reader, addr)->socket.socket().accept()
A:tornado.platform.common.self.reader_fd->self.reader.fileno()
A:tornado.platform.common.result->self.reader.recv(1024)
tornado.platform.common.Waker(self)
tornado.platform.common.Waker.__init__(self)
tornado.platform.common.Waker.close(self)
tornado.platform.common.Waker.consume(self)
tornado.platform.common.Waker.fileno(self)
tornado.platform.common.Waker.wake(self)
tornado.platform.common.Waker.write_fileno(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/platform/posix.py----------------------------------------
A:tornado.platform.posix.flags->fcntl.fcntl(fd, fcntl.F_GETFL)
A:tornado.platform.posix.(r, w)->os.pipe()
A:tornado.platform.posix.self.reader->os.fdopen(r, 'rb', 0)
A:tornado.platform.posix.self.writer->os.fdopen(w, 'wb', 0)
A:tornado.platform.posix.result->self.reader.read()
tornado.platform.posix.Waker(self)
tornado.platform.posix.Waker.__init__(self)
tornado.platform.posix.Waker.close(self)
tornado.platform.posix.Waker.consume(self)
tornado.platform.posix.Waker.fileno(self)
tornado.platform.posix.Waker.wake(self)
tornado.platform.posix.Waker.write_fileno(self)
tornado.platform.posix._set_nonblocking(fd)
tornado.platform.posix.set_close_exec(fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/template_test.py----------------------------------------
A:tornado.test.template_test.template->Template('{{ 1 / 2 }}')
A:tornado.test.template_test.loader->DictLoader({'foo.py': '{% autoescape py_escape %}s = {{ name }}\n'})
A:tornado.test.template_test.result->self.loader.load('utf8.html').generate()
A:tornado.test.template_test.exc_stack->traceback.format_exc()
A:tornado.test.template_test.self.loader->Loader(os.path.join(os.path.dirname(__file__), 'templates'))
A:tornado.test.template_test.tmpl->self.loader.load('utf8.html')
tornado.test.template_test.AutoEscapeTest(unittest.TestCase)
tornado.test.template_test.AutoEscapeTest.setUp(self)
tornado.test.template_test.AutoEscapeTest.test_custom_escape(self)
tornado.test.template_test.AutoEscapeTest.test_default_off(self)
tornado.test.template_test.AutoEscapeTest.test_default_on(self)
tornado.test.template_test.AutoEscapeTest.test_extended_block(self)
tornado.test.template_test.AutoEscapeTest.test_raw_expression(self)
tornado.test.template_test.AutoEscapeTest.test_unextended_block(self)
tornado.test.template_test.StackTraceTest(unittest.TestCase)
tornado.test.template_test.StackTraceTest.test_error_line_number_directive(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_expression(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_base_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_sub_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_include(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_module(self)
tornado.test.template_test.StackTraceTest.test_multi_includes(self)
tornado.test.template_test.TemplateLoaderTest(unittest.TestCase)
tornado.test.template_test.TemplateLoaderTest.setUp(self)
tornado.test.template_test.TemplateLoaderTest.test_utf8_in_file(self)
tornado.test.template_test.TemplateTest(unittest.TestCase)
tornado.test.template_test.TemplateTest.test_apply(self)
tornado.test.template_test.TemplateTest.test_break_continue(self)
tornado.test.template_test.TemplateTest.test_break_in_apply(self)
tornado.test.template_test.TemplateTest.test_break_outside_loop(self)
tornado.test.template_test.TemplateTest.test_bytes(self)
tornado.test.template_test.TemplateTest.test_bytes_apply(self)
tornado.test.template_test.TemplateTest.test_comment(self)
tornado.test.template_test.TemplateTest.test_comment_directive(self)
tornado.test.template_test.TemplateTest.test_custom_namespace(self)
tornado.test.template_test.TemplateTest.test_escaping(self)
tornado.test.template_test.TemplateTest.test_expressions(self)
tornado.test.template_test.TemplateTest.test_extends(self)
tornado.test.template_test.TemplateTest.test_if(self)
tornado.test.template_test.TemplateTest.test_if_empty_body(self)
tornado.test.template_test.TemplateTest.test_include(self)
tornado.test.template_test.TemplateTest.test_no_inherit_future(self)
tornado.test.template_test.TemplateTest.test_relative_load(self)
tornado.test.template_test.TemplateTest.test_simple(self)
tornado.test.template_test.TemplateTest.test_try(self)
tornado.test.template_test.TemplateTest.test_unicode_apply(self)
tornado.test.template_test.TemplateTest.test_unicode_literal_expression(self)
tornado.test.template_test.TemplateTest.test_unicode_template(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/websocket_test.py----------------------------------------
A:tornado.test.websocket_test.ws->self.wait().result()
A:tornado.test.websocket_test.response->self.wait().result()
A:tornado.test.websocket_test.(sock, port)->bind_unused_port()
tornado.test.websocket_test.EchoHandler(WebSocketHandler)
tornado.test.websocket_test.EchoHandler.on_message(self,message)
tornado.test.websocket_test.NonWebSocketHandler(RequestHandler)
tornado.test.websocket_test.NonWebSocketHandler.get(self)
tornado.test.websocket_test.WebSocketTest(AsyncHTTPTestCase)
tornado.test.websocket_test.WebSocketTest.get_app(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_gen(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_http_success(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/escape_test.py----------------------------------------
A:tornado.test.escape_test.linked->tornado.escape.linkify(text, **kwargs)
tornado.test.escape_test.EscapeTestCase(unittest.TestCase)
tornado.test.escape_test.EscapeTestCase.test_escape_return_types(self)
tornado.test.escape_test.EscapeTestCase.test_json_decode(self)
tornado.test.escape_test.EscapeTestCase.test_json_encode(self)
tornado.test.escape_test.EscapeTestCase.test_linkify(self)
tornado.test.escape_test.EscapeTestCase.test_url_escape(self)
tornado.test.escape_test.EscapeTestCase.test_url_unescape(self)
tornado.test.escape_test.EscapeTestCase.test_xhtml_escape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/wsgi_test.py----------------------------------------
A:tornado.test.wsgi_test.response->self.fetch('/typecheck', method='POST', body='foo=bar', headers=headers)
A:tornado.test.wsgi_test.data->json_decode(response.body)
A:tornado.test.wsgi_test.self.app->WSGIApplication(self.get_handlers(), **self.get_app_kwargs())
tornado.test.wsgi_test.WSGIApplicationTest(AsyncHTTPTestCase)
tornado.test.wsgi_test.WSGIApplicationTest.get_app(self)
tornado.test.wsgi_test.WSGIApplicationTest.test_path_quoting(self)
tornado.test.wsgi_test.WSGIApplicationTest.test_simple(self)
tornado.test.wsgi_test.WSGIApplicationTest.test_types(self)
tornado.test.wsgi_test.WSGIConnectionTest(httpserver_test.HTTPConnectionTest)
tornado.test.wsgi_test.WSGIConnectionTest.get_app(self)
tornado.test.wsgi_test.WSGIContainerTest(AsyncHTTPTestCase)
tornado.test.wsgi_test.WSGIContainerTest.get_app(self)
tornado.test.wsgi_test.WSGIContainerTest.test_simple(self)
tornado.test.wsgi_test.WSGIContainerTest.wsgi_app(self,environ,start_response)
tornado.test.wsgi_test.wrap_web_tests()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/httpclient_test.py----------------------------------------
A:tornado.test.httpclient_test.name->self.get_argument('name', 'world')
A:tornado.test.httpclient_test.count->int(count)
A:tornado.test.httpclient_test.response->self.http_client.fetch(self.get_url('/'))
A:tornado.test.httpclient_test.(sock, port)->bind_unused_port()
A:tornado.test.httpclient_test.stream->IOStream(conn, io_loop=self.io_loop)
A:tornado.test.httpclient_test.resp->self.wait()
A:tornado.test.httpclient_test.url->self.get_url('/hello')
A:tornado.test.httpclient_test.unicode_body->u('é')
A:tornado.test.httpclient_test.byte_body->binascii.a2b_hex(b'e9')
A:tornado.test.httpclient_test.(k, v)->header_line.split(':', 1)
A:tornado.test.httpclient_test.headers[k]->v.strip()
A:tornado.test.httpclient_test.defaults->dict(user_agent='TestDefaultUserAgent')
A:tornado.test.httpclient_test.client->self.http_client.__class__(self.io_loop, force_instance=True, defaults=defaults)
A:tornado.test.httpclient_test.proxy->_RequestProxy(HTTPRequest('http://example.com/'), None)
A:tornado.test.httpclient_test.s->str(response)
A:tornado.test.httpclient_test.self.server_ioloop->IOLoop()
A:tornado.test.httpclient_test.(sock, self.port)->bind_unused_port()
A:tornado.test.httpclient_test.app->Application([('/', HelloWorldHandler)])
A:tornado.test.httpclient_test.server->HTTPServer(app, io_loop=self.server_ioloop)
A:tornado.test.httpclient_test.self.server_thread->threading.Thread(target=self.server_ioloop.start)
A:tornado.test.httpclient_test.self.http_client->HTTPClient()
tornado.test.httpclient_test.AuthHandler(RequestHandler)
tornado.test.httpclient_test.AuthHandler.get(self)
tornado.test.httpclient_test.ChunkHandler(RequestHandler)
tornado.test.httpclient_test.ChunkHandler.get(self)
tornado.test.httpclient_test.ContentLength304Handler(RequestHandler)
tornado.test.httpclient_test.ContentLength304Handler._clear_headers_for_304(self)
tornado.test.httpclient_test.ContentLength304Handler.get(self)
tornado.test.httpclient_test.CountdownHandler(RequestHandler)
tornado.test.httpclient_test.CountdownHandler.get(self,count)
tornado.test.httpclient_test.EchoPostHandler(RequestHandler)
tornado.test.httpclient_test.EchoPostHandler.post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase(AsyncHTTPTestCase)
tornado.test.httpclient_test.HTTPClientCommonTestCase.get_app(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_304_with_content_length(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_encoding(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked_close(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_configure_defaults(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_credentials_in_url(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_final_callback_stack_context(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_follow_redirect(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_interface(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_callback(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_callback_stack_context(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_hello_world(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_reuse_request_from_response(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_callback(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_stack_context(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_types(self)
tornado.test.httpclient_test.HTTPResponseTestCase(unittest.TestCase)
tornado.test.httpclient_test.HTTPResponseTestCase.test_str(self)
tornado.test.httpclient_test.HelloWorldHandler(RequestHandler)
tornado.test.httpclient_test.HelloWorldHandler.get(self)
tornado.test.httpclient_test.PostHandler(RequestHandler)
tornado.test.httpclient_test.PostHandler.post(self)
tornado.test.httpclient_test.RequestProxyTest(unittest.TestCase)
tornado.test.httpclient_test.RequestProxyTest.test_bad_attribute(self)
tornado.test.httpclient_test.RequestProxyTest.test_both_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_default_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_defaults_none(self)
tornado.test.httpclient_test.RequestProxyTest.test_neither_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_request_set(self)
tornado.test.httpclient_test.SyncHTTPClientTest(unittest.TestCase)
tornado.test.httpclient_test.SyncHTTPClientTest.get_url(self,path)
tornado.test.httpclient_test.SyncHTTPClientTest.setUp(self)
tornado.test.httpclient_test.SyncHTTPClientTest.tearDown(self)
tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client(self)
tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client_error(self)
tornado.test.httpclient_test.UserAgentHandler(RequestHandler)
tornado.test.httpclient_test.UserAgentHandler.get(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/iostream_test.py----------------------------------------
A:tornado.test.iostream_test.response->self.fetch('/', headers={'Connection': 'close'})
A:tornado.test.iostream_test.stream->IOStream(s, io_loop=self.io_loop)
A:tornado.test.iostream_test.data->self.wait()
A:tornado.test.iostream_test.self.stream->self._make_client_iostream()
A:tornado.test.iostream_test.(listener, port)->bind_unused_port()
A:tornado.test.iostream_test.streams[0]->self._make_server_iostream(connection, **kwargs)
A:tornado.test.iostream_test.client_stream->self._make_client_iostream(socket.socket(), **kwargs)
A:tornado.test.iostream_test.(server, client)->self.make_iostream_pair()
A:tornado.test.iostream_test.(server_socket, port)->bind_unused_port()
A:tornado.test.iostream_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.iostream_test.res->self.wait()
A:tornado.test.iostream_test.ssl_options->dict(certfile=os.path.join(os.path.dirname(__file__), 'test.crt'), keyfile=os.path.join(os.path.dirname(__file__), 'test.key'))
A:tornado.test.iostream_test.connection->ssl_wrap_socket(connection, context, server_side=True, do_handshake_on_connect=False)
A:tornado.test.iostream_test.context->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:tornado.test.iostream_test.(r, w)->os.pipe()
A:tornado.test.iostream_test.rs->PipeIOStream(r, io_loop=self.io_loop)
A:tornado.test.iostream_test.ws->PipeIOStream(w, io_loop=self.io_loop)
tornado.test.iostream_test.HelloHandler(RequestHandler)
tornado.test.iostream_test.HelloHandler.get(self)
tornado.test.iostream_test.TestIOStream(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStream._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStream._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin(object)
tornado.test.iostream_test.TestIOStreamMixin._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin.make_iostream_pair(self,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin.test_async_read_error_logging(self)
tornado.test.iostream_test.TestIOStreamMixin.test_close_buffered_data(self)
tornado.test.iostream_test.TestIOStreamMixin.test_close_callback_with_pending_read(self)
tornado.test.iostream_test.TestIOStreamMixin.test_connection_refused(self)
tornado.test.iostream_test.TestIOStreamMixin.test_delayed_close_callback(self)
tornado.test.iostream_test.TestIOStreamMixin.test_gaierror(self)
tornado.test.iostream_test.TestIOStreamMixin.test_inline_read_error(self)
tornado.test.iostream_test.TestIOStreamMixin.test_large_read_until(self)
tornado.test.iostream_test.TestIOStreamMixin.test_read_callback_error(self)
tornado.test.iostream_test.TestIOStreamMixin.test_read_until_close_after_close(self)
tornado.test.iostream_test.TestIOStreamMixin.test_streaming_callback(self)
tornado.test.iostream_test.TestIOStreamMixin.test_streaming_callback_with_data_in_buffer(self)
tornado.test.iostream_test.TestIOStreamMixin.test_streaming_read_until_close_after_close(self)
tornado.test.iostream_test.TestIOStreamMixin.test_streaming_until_close(self)
tornado.test.iostream_test.TestIOStreamMixin.test_write_zero_bytes(self)
tornado.test.iostream_test.TestIOStreamSSL(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStreamSSL._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSL._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSLContext(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStreamSSLContext._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSLContext._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamWebHTTP(TestIOStreamWebMixin,AsyncHTTPTestCase)
tornado.test.iostream_test.TestIOStreamWebHTTP._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebHTTPS(TestIOStreamWebMixin,AsyncHTTPSTestCase)
tornado.test.iostream_test.TestIOStreamWebHTTPS._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebMixin(object)
tornado.test.iostream_test.TestIOStreamWebMixin._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebMixin.get_app(self)
tornado.test.iostream_test.TestIOStreamWebMixin.test_connection_closed(self)
tornado.test.iostream_test.TestIOStreamWebMixin.test_read_until_close(self)
tornado.test.iostream_test.TestIOStreamWebMixin.test_read_zero_bytes(self)
tornado.test.iostream_test.TestIOStreamWebMixin.test_write_while_connecting(self)
tornado.test.iostream_test.TestPipeIOStream(AsyncTestCase)
tornado.test.iostream_test.TestPipeIOStream.test_pipe_iostream(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/testing_test.py----------------------------------------
A:tornado.test.testing_test.result->tornado.test.util.unittest.TestResult()
tornado.test.testing_test.AsyncTestCaseTest(AsyncTestCase)
tornado.test.testing_test.AsyncTestCaseTest.test_exception_in_callback(self)
tornado.test.testing_test.AsyncTestCaseTest.test_subsequent_wait_calls(self)
tornado.test.testing_test.GenTest(AsyncTestCase)
tornado.test.testing_test.GenTest.setUp(self)
tornado.test.testing_test.GenTest.tearDown(self)
tornado.test.testing_test.GenTest.test_async(self)
tornado.test.testing_test.GenTest.test_sync(self)
tornado.test.testing_test.SetUpTearDownTest(unittest.TestCase)
tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/import_test.py----------------------------------------
tornado.test.import_test.ImportTest(unittest.TestCase)
tornado.test.import_test.ImportTest.test_import_everything(self)
tornado.test.import_test.ImportTest.test_import_pycurl(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/simple_httpclient_test.py----------------------------------------
A:tornado.test.simple_httpclient_test.client->SimpleAsyncHTTPClient(self.io_loop, max_clients=1, force_instance=True)
A:tornado.test.simple_httpclient_test.redirect_code->int(self.request.body)
A:tornado.test.simple_httpclient_test.self.http_client->SimpleAsyncHTTPClient(self.io_loop, hostname_mapping={'www.example.com': '127.0.0.1', ('foo.example.com', 8000): ('127.0.0.1', self.get_http_port())})
A:tornado.test.simple_httpclient_test.self.triggers->collections.deque()
A:tornado.test.simple_httpclient_test.io_loop2->IOLoop()
A:tornado.test.simple_httpclient_test.response->self.wait()
A:tornado.test.simple_httpclient_test.f->gzip.GzipFile(mode='r', fileobj=response.buffer)
A:tornado.test.simple_httpclient_test.headers->HTTPHeaders({'User-Agent': 'Foo'})
A:tornado.test.simple_httpclient_test.url->self.get_url('/host_echo').replace('http://', 'http://me:secret@')
A:tornado.test.simple_httpclient_test.host_re->re.compile(b'^localhost:[0-9]+$')
A:tornado.test.simple_httpclient_test.(server_socket, port)->bind_unused_port()
A:tornado.test.simple_httpclient_test.expected_message->os.strerror(errno.ECONNREFUSED)
A:tornado.test.simple_httpclient_test.self.saved->tornado.httpclient.AsyncHTTPClient._save_configuration()
A:tornado.test.simple_httpclient_test.res->self.fetch('/')
tornado.test.simple_httpclient_test.ContentLengthHandler(RequestHandler)
tornado.test.simple_httpclient_test.ContentLengthHandler.get(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase(AsyncTestCase)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.tearDown(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.test_max_clients(self)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.get_app(self)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.respond_100(self,request)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.respond_200(self)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.test_100_continue(self)
tornado.test.simple_httpclient_test.HangHandler(RequestHandler)
tornado.test.simple_httpclient_test.HangHandler.get(self)
tornado.test.simple_httpclient_test.HeadHandler(RequestHandler)
tornado.test.simple_httpclient_test.HeadHandler.head(self)
tornado.test.simple_httpclient_test.HostEchoHandler(RequestHandler)
tornado.test.simple_httpclient_test.HostEchoHandler.get(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.get_app(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.setUp(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.test_hostname_mapping(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.test_port_mapping(self)
tornado.test.simple_httpclient_test.NoContentHandler(RequestHandler)
tornado.test.simple_httpclient_test.NoContentHandler.get(self)
tornado.test.simple_httpclient_test.OptionsHandler(RequestHandler)
tornado.test.simple_httpclient_test.OptionsHandler.options(self)
tornado.test.simple_httpclient_test.SeeOtherGetHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOtherGetHandler.get(self)
tornado.test.simple_httpclient_test.SeeOtherPostHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOtherPostHandler.post(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase.get_http_client(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.get_app(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_connection_limit(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_connection_refused(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_default_certificates_exist(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_gzip(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_head_request(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_header_reuse(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_host_header(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_ipv6(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_max_redirects(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_multiple_content_length_accepted(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_no_content(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_options_request(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_redirect_connection_limit(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_request_timeout(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_see_other_redirect(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_singleton(self)
tornado.test.simple_httpclient_test.TriggerHandler(RequestHandler)
tornado.test.simple_httpclient_test.TriggerHandler.get(self)
tornado.test.simple_httpclient_test.TriggerHandler.initialize(self,queue,wake_callback)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/httpserver_test.py----------------------------------------
A:tornado.test.httpserver_test.response->self.wait()
A:tornado.test.httpserver_test.skipIfOldSSL->tornado.test.util.unittest.skipIf(getattr(ssl, 'OPENSSL_VERSION_INFO', (0, 0)) < (1, 0), 'old version of ssl module and/or openssl')
A:tornado.test.httpserver_test.context->ssl_options_to_context(AsyncHTTPSTestCase.get_ssl_options(self))
A:tornado.test.httpserver_test.application->Application()
A:tornado.test.httpserver_test.module_dir->os.path.dirname(__file__)
A:tornado.test.httpserver_test.existing_certificate->os.path.join(module_dir, 'test.crt')
A:tornado.test.httpserver_test.client->SimpleAsyncHTTPClient(self.io_loop)
A:tornado.test.httpserver_test.conn->RawRequestHTTPConnection(self.io_loop, client, httpclient._RequestProxy(httpclient.HTTPRequest(self.get_url('/')), dict(httpclient.HTTPRequest._DEFAULTS)), None, self.stop, 1024 * 1024, Resolver(io_loop=self.io_loop))
A:tornado.test.httpserver_test.data->self.wait()
A:tornado.test.httpserver_test.stream->IOStream(socket.socket(socket.AF_UNIX), io_loop=self.io_loop)
A:tornado.test.httpserver_test.first_line->self.wait()
A:tornado.test.httpserver_test.header_data->self.wait()
A:tornado.test.httpserver_test.headers->self.read_headers()
A:tornado.test.httpserver_test.body->self.wait()
A:tornado.test.httpserver_test.actual_type->type(obj)
A:tornado.test.httpserver_test.output->super(SSLXHeaderTest, self).get_httpserver_options()
A:tornado.test.httpserver_test.self.tmpdir->tempfile.mkdtemp()
A:tornado.test.httpserver_test.sockfile->os.path.join(self.tmpdir, 'test.sock')
A:tornado.test.httpserver_test.sock->tornado.netutil.bind_unix_socket(sockfile)
A:tornado.test.httpserver_test.app->Application([('/hello', HelloWorldRequestHandler)])
A:tornado.test.httpserver_test.server->HTTPServer(app, io_loop=self.io_loop)
A:tornado.test.httpserver_test.self.stream->IOStream(socket.socket(), io_loop=self.io_loop)
A:tornado.test.httpserver_test.header_bytes->self.wait()
tornado.test.httpserver_test.BadSSLOptionsTest(unittest.TestCase)
tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_arguments(self)
tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_key(self)
tornado.test.httpserver_test.BaseSSLTest(AsyncHTTPSTestCase)
tornado.test.httpserver_test.BaseSSLTest.get_app(self)
tornado.test.httpserver_test.EchoHandler(RequestHandler)
tornado.test.httpserver_test.EchoHandler.get(self)
tornado.test.httpserver_test.EchoHandler.post(self)
tornado.test.httpserver_test.HTTPConnectionTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.HTTPConnectionTest.get_app(self)
tornado.test.httpserver_test.HTTPConnectionTest.get_handlers(self)
tornado.test.httpserver_test.HTTPConnectionTest.raw_fetch(self,headers,body)
tornado.test.httpserver_test.HTTPConnectionTest.test_100_continue(self)
tornado.test.httpserver_test.HTTPConnectionTest.test_multipart_form(self)
tornado.test.httpserver_test.HTTPServerTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.HTTPServerTest.get_app(self)
tornado.test.httpserver_test.HTTPServerTest.test_double_slash(self)
tornado.test.httpserver_test.HTTPServerTest.test_empty_post_parameters(self)
tornado.test.httpserver_test.HTTPServerTest.test_empty_query_string(self)
tornado.test.httpserver_test.HTTPServerTest.test_empty_request(self)
tornado.test.httpserver_test.HTTPServerTest.test_query_string_encoding(self)
tornado.test.httpserver_test.HTTPServerTest.test_types(self)
tornado.test.httpserver_test.HandlerBaseTestCase(AsyncHTTPTestCase)
tornado.test.httpserver_test.HandlerBaseTestCase.fetch_json(self,*args,**kwargs)
tornado.test.httpserver_test.HandlerBaseTestCase.get_app(self)
tornado.test.httpserver_test.HelloWorldRequestHandler(RequestHandler)
tornado.test.httpserver_test.HelloWorldRequestHandler.get(self)
tornado.test.httpserver_test.HelloWorldRequestHandler.initialize(self,protocol='http')
tornado.test.httpserver_test.HelloWorldRequestHandler.post(self)
tornado.test.httpserver_test.KeepAliveTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.KeepAliveTest.close(self)
tornado.test.httpserver_test.KeepAliveTest.connect(self)
tornado.test.httpserver_test.KeepAliveTest.get_app(self)
tornado.test.httpserver_test.KeepAliveTest.read_headers(self)
tornado.test.httpserver_test.KeepAliveTest.read_response(self)
tornado.test.httpserver_test.KeepAliveTest.setUp(self)
tornado.test.httpserver_test.KeepAliveTest.tearDown(self)
tornado.test.httpserver_test.KeepAliveTest.test_cancel_during_download(self)
tornado.test.httpserver_test.KeepAliveTest.test_finish_while_closed(self)
tornado.test.httpserver_test.KeepAliveTest.test_http10(self)
tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive(self)
tornado.test.httpserver_test.KeepAliveTest.test_pipelined_cancel(self)
tornado.test.httpserver_test.KeepAliveTest.test_pipelined_requests(self)
tornado.test.httpserver_test.KeepAliveTest.test_request_close(self)
tornado.test.httpserver_test.KeepAliveTest.test_two_requests(self)
tornado.test.httpserver_test.ManualProtocolTest(HandlerBaseTestCase)
tornado.test.httpserver_test.ManualProtocolTest.Handler(RequestHandler)
tornado.test.httpserver_test.ManualProtocolTest.Handler.get(self)
tornado.test.httpserver_test.ManualProtocolTest.get_httpserver_options(self)
tornado.test.httpserver_test.ManualProtocolTest.test_manual_protocol(self)
tornado.test.httpserver_test.MultipartTestHandler(RequestHandler)
tornado.test.httpserver_test.MultipartTestHandler.post(self)
tornado.test.httpserver_test.RawRequestHTTPConnection(simple_httpclient._HTTPConnection)
tornado.test.httpserver_test.RawRequestHTTPConnection._on_connect(self)
tornado.test.httpserver_test.RawRequestHTTPConnection.set_request(self,request)
tornado.test.httpserver_test.SSLContextTest(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLContextTest.get_ssl_options(self)
tornado.test.httpserver_test.SSLTestMixin(object)
tornado.test.httpserver_test.SSLTestMixin.get_ssl_options(self)
tornado.test.httpserver_test.SSLTestMixin.get_ssl_version(self)
tornado.test.httpserver_test.SSLTestMixin.test_large_post(self)
tornado.test.httpserver_test.SSLTestMixin.test_non_ssl_request(self)
tornado.test.httpserver_test.SSLTestMixin.test_ssl(self)
tornado.test.httpserver_test.SSLXHeaderTest(AsyncHTTPSTestCase,HandlerBaseTestCase)
tornado.test.httpserver_test.SSLXHeaderTest.get_app(self)
tornado.test.httpserver_test.SSLXHeaderTest.get_httpserver_options(self)
tornado.test.httpserver_test.SSLXHeaderTest.test_request_without_xprotocol(self)
tornado.test.httpserver_test.SSLv23Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv23Test.get_ssl_version(self)
tornado.test.httpserver_test.SSLv3Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv3Test.get_ssl_version(self)
tornado.test.httpserver_test.TLSv1Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.TLSv1Test.get_ssl_version(self)
tornado.test.httpserver_test.TypeCheckHandler(RequestHandler)
tornado.test.httpserver_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.httpserver_test.TypeCheckHandler.get(self)
tornado.test.httpserver_test.TypeCheckHandler.post(self)
tornado.test.httpserver_test.TypeCheckHandler.prepare(self)
tornado.test.httpserver_test.UnixSocketTest(AsyncTestCase)
tornado.test.httpserver_test.UnixSocketTest.setUp(self)
tornado.test.httpserver_test.UnixSocketTest.tearDown(self)
tornado.test.httpserver_test.UnixSocketTest.test_unix_socket(self)
tornado.test.httpserver_test.XHeaderTest(HandlerBaseTestCase)
tornado.test.httpserver_test.XHeaderTest.Handler(RequestHandler)
tornado.test.httpserver_test.XHeaderTest.Handler.get(self)
tornado.test.httpserver_test.XHeaderTest.get_httpserver_options(self)
tornado.test.httpserver_test.XHeaderTest.test_ip_headers(self)
tornado.test.httpserver_test.XHeaderTest.test_scheme_headers(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/runtests.py----------------------------------------
A:tornado.test.runtests.result->super(TornadoTextTestRunner, self).run(test)
A:tornado.test.runtests.skip_reasons->set((reason for (test, reason) in result.skipped))
tornado.test.runtests.TornadoTextTestRunner(unittest.TextTestRunner)
tornado.test.runtests.TornadoTextTestRunner.run(self,test)
tornado.test.runtests.all()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/netutil_test.py----------------------------------------
A:tornado.test.netutil_test.result->self.wait()
A:tornado.test.netutil_test.self.resolver->TwistedResolver(io_loop=self.io_loop)
tornado.test.netutil_test.BlockingResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.BlockingResolverTest.setUp(self)
tornado.test.netutil_test.CaresResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.CaresResolverTest.setUp(self)
tornado.test.netutil_test.IsValidIPTest(unittest.TestCase)
tornado.test.netutil_test.IsValidIPTest.test_is_valid_ip(self)
tornado.test.netutil_test.ThreadedResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.ThreadedResolverTest.setUp(self)
tornado.test.netutil_test.ThreadedResolverTest.tearDown(self)
tornado.test.netutil_test.TwistedResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.TwistedResolverTest.setUp(self)
tornado.test.netutil_test._ResolverTestMixin(object)
tornado.test.netutil_test._ResolverTestMixin.test_future_interface(self)
tornado.test.netutil_test._ResolverTestMixin.test_localhost(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/concurrent_test.py----------------------------------------
A:tornado.test.concurrent_test.result->self.wait()
A:tornado.test.concurrent_test.future->self.client.capitalize('HELLO')
A:tornado.test.concurrent_test.future2->self.wait()
A:tornado.test.concurrent_test.tb->traceback.extract_tb(sys.exc_info()[2])
A:tornado.test.concurrent_test.data->to_unicode(data)
A:tornado.test.concurrent_test.(status, message)->re.match('(.*)\t(.*)\n', to_unicode(data)).groups()
A:tornado.test.concurrent_test.self.stream->IOStream(socket.socket(), io_loop=self.io_loop)
A:tornado.test.concurrent_test.self.future->Future()
A:tornado.test.concurrent_test.stream->IOStream(socket.socket(), io_loop=self.io_loop)
A:tornado.test.concurrent_test.self.server->CapServer(io_loop=self.io_loop)
A:tornado.test.concurrent_test.(sock, port)->bind_unused_port()
A:tornado.test.concurrent_test.self.client->self.client_class(io_loop=self.io_loop, port=port)
tornado.test.concurrent_test.BaseCapClient(self,port,io_loop)
tornado.test.concurrent_test.BaseCapClient.__init__(self,port,io_loop)
tornado.test.concurrent_test.BaseCapClient.process_response(self,data)
tornado.test.concurrent_test.CapError(Exception)
tornado.test.concurrent_test.CapServer(TCPServer)
tornado.test.concurrent_test.CapServer.handle_read(self,data)
tornado.test.concurrent_test.CapServer.handle_stream(self,stream,address)
tornado.test.concurrent_test.ClientTestMixin(object)
tornado.test.concurrent_test.ClientTestMixin.setUp(self)
tornado.test.concurrent_test.ClientTestMixin.tearDown(self)
tornado.test.concurrent_test.ClientTestMixin.test_callback(self)
tornado.test.concurrent_test.ClientTestMixin.test_callback_error(self)
tornado.test.concurrent_test.ClientTestMixin.test_future(self)
tornado.test.concurrent_test.ClientTestMixin.test_future_error(self)
tornado.test.concurrent_test.ClientTestMixin.test_generator(self)
tornado.test.concurrent_test.ClientTestMixin.test_generator_error(self)
tornado.test.concurrent_test.DecoratorCapClient(BaseCapClient)
tornado.test.concurrent_test.DecoratorCapClient.capitalize(self,request_data,callback)
tornado.test.concurrent_test.DecoratorCapClient.handle_connect(self)
tornado.test.concurrent_test.DecoratorCapClient.handle_read(self,data)
tornado.test.concurrent_test.DecoratorClientTest(ClientTestMixin,AsyncTestCase,LogTrapTestCase)
tornado.test.concurrent_test.GeneratorCapClient(BaseCapClient)
tornado.test.concurrent_test.GeneratorCapClient.capitalize(self,request_data,callback)
tornado.test.concurrent_test.GeneratorClientTest(ClientTestMixin,AsyncTestCase,LogTrapTestCase)
tornado.test.concurrent_test.ManualCapClient(BaseCapClient)
tornado.test.concurrent_test.ManualCapClient.capitalize(self,request_data,callback=None)
tornado.test.concurrent_test.ManualCapClient.handle_connect(self)
tornado.test.concurrent_test.ManualCapClient.handle_read(self,data)
tornado.test.concurrent_test.ManualClientTest(ClientTestMixin,AsyncTestCase,LogTrapTestCase)
tornado.test.concurrent_test.ReturnFutureTest(AsyncTestCase)
tornado.test.concurrent_test.ReturnFutureTest.async_future(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.delayed_failure(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.immediate_failure(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.no_result_future(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.return_value(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.sync_future(self,callback)
tornado.test.concurrent_test.ReturnFutureTest.test_async_future(self)
tornado.test.concurrent_test.ReturnFutureTest.test_async_future_gen(self)
tornado.test.concurrent_test.ReturnFutureTest.test_callback_kw(self)
tornado.test.concurrent_test.ReturnFutureTest.test_callback_positional(self)
tornado.test.concurrent_test.ReturnFutureTest.test_delayed_failure(self)
tornado.test.concurrent_test.ReturnFutureTest.test_error_in_callback(self)
tornado.test.concurrent_test.ReturnFutureTest.test_future_traceback(self)
tornado.test.concurrent_test.ReturnFutureTest.test_immediate_failure(self)
tornado.test.concurrent_test.ReturnFutureTest.test_kw_only_callback(self)
tornado.test.concurrent_test.ReturnFutureTest.test_no_callback(self)
tornado.test.concurrent_test.ReturnFutureTest.test_no_result_future(self)
tornado.test.concurrent_test.ReturnFutureTest.test_no_result_future_callback(self)
tornado.test.concurrent_test.ReturnFutureTest.test_none_callback_kw(self)
tornado.test.concurrent_test.ReturnFutureTest.test_none_callback_pos(self)
tornado.test.concurrent_test.ReturnFutureTest.test_return_value(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/util_test.py----------------------------------------
A:tornado.test.util_test.exc_info->sys.exc_info()
A:tornado.test.util_test.self.saved->TestConfigurable._save_configuration()
A:tornado.test.util_test.obj->TestConfig2()
A:tornado.test.util_test.f->StringIO()
A:tornado.test.util_test.self.replacer->ArgReplacer(function, 'callback')
tornado.test.util_test.ArgReplacerTest(unittest.TestCase)
tornado.test.util_test.ArgReplacerTest.setUp(self)
tornado.test.util_test.ArgReplacerTest.test_keyword(self)
tornado.test.util_test.ArgReplacerTest.test_omitted(self)
tornado.test.util_test.ArgReplacerTest.test_position(self)
tornado.test.util_test.ConfigurableTest(unittest.TestCase)
tornado.test.util_test.ConfigurableTest.checkSubclasses(self)
tornado.test.util_test.ConfigurableTest.setUp(self)
tornado.test.util_test.ConfigurableTest.tearDown(self)
tornado.test.util_test.ConfigurableTest.test_config_args(self)
tornado.test.util_test.ConfigurableTest.test_config_class(self)
tornado.test.util_test.ConfigurableTest.test_config_class_args(self)
tornado.test.util_test.ConfigurableTest.test_default(self)
tornado.test.util_test.ExecInTest(unittest.TestCase)
tornado.test.util_test.ExecInTest.test_no_inherit_future(self)
tornado.test.util_test.RaiseExcInfoTest(unittest.TestCase)
tornado.test.util_test.RaiseExcInfoTest.test_two_arg_exception(self)
tornado.test.util_test.TestConfig1(TestConfigurable)
tornado.test.util_test.TestConfig1.initialize(self,a=None)
tornado.test.util_test.TestConfig2(TestConfigurable)
tornado.test.util_test.TestConfig2.initialize(self,b=None)
tornado.test.util_test.TestConfigurable(Configurable)
tornado.test.util_test.TestConfigurable.configurable_base(cls)
tornado.test.util_test.TestConfigurable.configurable_default(cls)
tornado.test.util_test.UnicodeLiteralTest(unittest.TestCase)
tornado.test.util_test.UnicodeLiteralTest.test_unicode_escapes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/options_test.py----------------------------------------
A:tornado.test.options_test.options->OptionParser()
A:tornado.test.options_test.sys.stderr->StringIO()
A:tornado.test.options_test.usage->sys.stderr.getvalue()
A:tornado.test.options_test.base_options->OptionParser()
A:tornado.test.options_test.sub_options->OptionParser()
A:tornado.test.options_test.rest->OptionParser().parse_command_line(['main.py', '--verbose', 'subcommand', '--foo=bar'])
A:tornado.test.options_test.rest2->OptionParser().parse_command_line(rest)
tornado.test.options_test.OptionsTest(unittest.TestCase)
tornado.test.options_test.OptionsTest.test_help(self)
tornado.test.options_test.OptionsTest.test_mock_patch(self)
tornado.test.options_test.OptionsTest.test_parse_callbacks(self)
tornado.test.options_test.OptionsTest.test_parse_command_line(self)
tornado.test.options_test.OptionsTest.test_parse_config_file(self)
tornado.test.options_test.OptionsTest.test_setattr(self)
tornado.test.options_test.OptionsTest.test_setattr_type_check(self)
tornado.test.options_test.OptionsTest.test_setattr_with_callback(self)
tornado.test.options_test.OptionsTest.test_subcommand(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/gen_test.py----------------------------------------
A:tornado.test.gen_test.skipBefore33->tornado.test.util.unittest.skipIf(sys.version_info < (3, 3), 'PEP 380 not available')
A:tornado.test.gen_test.start->time.time()
A:tornado.test.gen_test.end->time.time()
A:tornado.test.gen_test.initial_stack_depth->len(stack_context._state.contexts)
A:tornado.test.gen_test.result->self.run_gen(f)
A:tornado.test.gen_test.global_namespace->dict(globals(), **locals())
A:tornado.test.gen_test.future->f2()
A:tornado.test.gen_test.client->AsyncHTTPClient(io_loop=io_loop)
A:tornado.test.gen_test.response->self.fetch('/yield_exception')
tornado.test.gen_test.GenCoroutineExceptionHandler(RequestHandler)
tornado.test.gen_test.GenCoroutineExceptionHandler.get(self)
tornado.test.gen_test.GenCoroutineSequenceHandler(RequestHandler)
tornado.test.gen_test.GenCoroutineSequenceHandler.get(self)
tornado.test.gen_test.GenCoroutineTest(AsyncTestCase)
tornado.test.gen_test.GenCoroutineTest.setUp(self)
tornado.test.gen_test.GenCoroutineTest.tearDown(self)
tornado.test.gen_test.GenCoroutineTest.test_async_early_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_gen_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_raise(self)
tornado.test.gen_test.GenCoroutineTest.test_async_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_return_no_value(self)
tornado.test.gen_test.GenCoroutineTest.test_pass_callback(self)
tornado.test.gen_test.GenCoroutineTest.test_replace_context_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_replace_yieldpoint_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_swallow_context_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_swallow_yieldpoint_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_gen_return(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_raise(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_return(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_return_no_value(self)
tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler(RequestHandler)
tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler.get(self)
tornado.test.gen_test.GenEngineTest(AsyncTestCase)
tornado.test.gen_test.GenEngineTest.async_future(self,result,callback)
tornado.test.gen_test.GenEngineTest.delay_callback(self,iterations,callback,arg)
tornado.test.gen_test.GenEngineTest.function_with_stack_context(self,callback)
tornado.test.gen_test.GenEngineTest.named_context(self,name)
tornado.test.gen_test.GenEngineTest.run_gen(self,f)
tornado.test.gen_test.GenEngineTest.setUp(self)
tornado.test.gen_test.GenEngineTest.test_arguments(self)
tornado.test.gen_test.GenEngineTest.test_async_raise_return(self)
tornado.test.gen_test.GenEngineTest.test_async_raise_return_value(self)
tornado.test.gen_test.GenEngineTest.test_async_raise_return_value_tuple(self)
tornado.test.gen_test.GenEngineTest.test_bogus_yield(self)
tornado.test.gen_test.GenEngineTest.test_bogus_yield_tuple(self)
tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase1(self)
tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase2(self)
tornado.test.gen_test.GenEngineTest.test_exception_in_yield(self)
tornado.test.gen_test.GenEngineTest.test_exception_phase1(self)
tornado.test.gen_test.GenEngineTest.test_exception_phase2(self)
tornado.test.gen_test.GenEngineTest.test_future(self)
tornado.test.gen_test.GenEngineTest.test_inline_cb(self)
tornado.test.gen_test.GenEngineTest.test_ioloop_cb(self)
tornado.test.gen_test.GenEngineTest.test_key_mismatch(self)
tornado.test.gen_test.GenEngineTest.test_key_mismatch_tuple(self)
tornado.test.gen_test.GenEngineTest.test_key_reuse(self)
tornado.test.gen_test.GenEngineTest.test_key_reuse_tuple(self)
tornado.test.gen_test.GenEngineTest.test_leaked_callback(self)
tornado.test.gen_test.GenEngineTest.test_leaked_callback_tuple(self)
tornado.test.gen_test.GenEngineTest.test_multi(self)
tornado.test.gen_test.GenEngineTest.test_multi_delayed(self)
tornado.test.gen_test.GenEngineTest.test_multi_future(self)
tornado.test.gen_test.GenEngineTest.test_multi_performance(self)
tornado.test.gen_test.GenEngineTest.test_no_yield(self)
tornado.test.gen_test.GenEngineTest.test_orphaned_callback(self)
tornado.test.gen_test.GenEngineTest.test_parallel_callback(self)
tornado.test.gen_test.GenEngineTest.test_raise_after_stop(self)
tornado.test.gen_test.GenEngineTest.test_resume_after_exception_in_yield(self)
tornado.test.gen_test.GenEngineTest.test_return_value(self)
tornado.test.gen_test.GenEngineTest.test_return_value_tuple(self)
tornado.test.gen_test.GenEngineTest.test_reuse(self)
tornado.test.gen_test.GenEngineTest.test_stack_context_leak(self)
tornado.test.gen_test.GenEngineTest.test_stack_context_leak_exception(self)
tornado.test.gen_test.GenEngineTest.test_sync_raise_return(self)
tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value(self)
tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value_tuple(self)
tornado.test.gen_test.GenEngineTest.test_task(self)
tornado.test.gen_test.GenEngineTest.test_task_transfer_stack_context(self)
tornado.test.gen_test.GenEngineTest.test_wait_all(self)
tornado.test.gen_test.GenEngineTest.test_wait_transfer_stack_context(self)
tornado.test.gen_test.GenEngineTest.test_with_arg(self)
tornado.test.gen_test.GenEngineTest.test_with_arg_tuple(self)
tornado.test.gen_test.GenExceptionHandler(RequestHandler)
tornado.test.gen_test.GenExceptionHandler.get(self)
tornado.test.gen_test.GenSequenceHandler(RequestHandler)
tornado.test.gen_test.GenSequenceHandler.get(self)
tornado.test.gen_test.GenTaskHandler(RequestHandler)
tornado.test.gen_test.GenTaskHandler.get(self)
tornado.test.gen_test.GenWebTest(AsyncHTTPTestCase)
tornado.test.gen_test.GenWebTest.get_app(self)
tornado.test.gen_test.GenWebTest.test_coroutine_exception_handler(self)
tornado.test.gen_test.GenWebTest.test_coroutine_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_coroutine_unfinished_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_exception_handler(self)
tornado.test.gen_test.GenWebTest.test_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_task_handler(self)
tornado.test.gen_test.GenWebTest.test_yield_exception_handler(self)
tornado.test.gen_test.GenYieldExceptionHandler(RequestHandler)
tornado.test.gen_test.GenYieldExceptionHandler.get(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/httputil_test.py----------------------------------------
A:tornado.test.httputil_test.url->url_concat('https://localhost/path?r=1&t=2', [])
A:tornado.test.httputil_test.data->'Foo: bar\n baz\nAsdf: qwer\n\tzxcv\nFoo: even\n     more\n     lines\n'.replace('\n', '\r\n')
A:tornado.test.httputil_test.headers->tornado.httputil.HTTPHeaders.parse(data)
A:tornado.test.httputil_test.tup->tuple(time.gmtime(self.TIMESTAMP))
tornado.test.httputil_test.FormatTimestampTest(unittest.TestCase)
tornado.test.httputil_test.FormatTimestampTest.check(self,value)
tornado.test.httputil_test.FormatTimestampTest.test_datetime(self)
tornado.test.httputil_test.FormatTimestampTest.test_struct_time(self)
tornado.test.httputil_test.FormatTimestampTest.test_time_tuple(self)
tornado.test.httputil_test.FormatTimestampTest.test_unix_time_float(self)
tornado.test.httputil_test.FormatTimestampTest.test_unix_time_int(self)
tornado.test.httputil_test.HTTPHeadersTest(unittest.TestCase)
tornado.test.httputil_test.HTTPHeadersTest.test_multi_line(self)
tornado.test.httputil_test.MultipartFormDataTest(unittest.TestCase)
tornado.test.httputil_test.MultipartFormDataTest.test_boundary_starts_and_ends_with_quotes(self)
tornado.test.httputil_test.MultipartFormDataTest.test_content_disposition_header_without_name_parameter(self)
tornado.test.httputil_test.MultipartFormDataTest.test_data_after_final_boundary(self)
tornado.test.httputil_test.MultipartFormDataTest.test_file_upload(self)
tornado.test.httputil_test.MultipartFormDataTest.test_invalid_content_disposition(self)
tornado.test.httputil_test.MultipartFormDataTest.test_line_does_not_end_with_correct_line_break(self)
tornado.test.httputil_test.MultipartFormDataTest.test_missing_headers(self)
tornado.test.httputil_test.MultipartFormDataTest.test_special_filenames(self)
tornado.test.httputil_test.MultipartFormDataTest.test_unquoted_names(self)
tornado.test.httputil_test.TestUrlConcat(unittest.TestCase)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_encode_args(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_mult_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_query_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_q_with_no_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_q(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/web_test.py----------------------------------------
A:tornado.test.web_test.self.app->Application(self.get_handlers(), **self.get_app_kwargs())
A:tornado.test.web_test.self.application->ObjectDict(settings=dict(cookie_secret='0123456789'))
A:tornado.test.web_test.handler->CookieTestRequestHandler()
A:tornado.test.web_test.match->re.match(b'12345678\\|([0-9]+)\\|([0-9a-f]+)', cookie)
A:tornado.test.web_test.timestamp->re.match(b'12345678\\|([0-9]+)\\|([0-9a-f]+)', cookie).group(1)
A:tornado.test.web_test.sig->re.match(b'12345678\\|([0-9]+)\\|([0-9a-f]+)', cookie).group(2)
A:tornado.test.web_test.handler._cookies['foo']->utf8('1234|5678%s|%s' % (to_basestring(timestamp), to_basestring(sig)))
A:tornado.test.web_test.response->self.fetch('/', headers={'Cookie': 'foo=bar; baz=xyzzy'})
A:tornado.test.web_test.headers->self.fetch('/', headers={'Cookie': 'foo=bar; baz=xyzzy'}).headers.get_list('Set-Cookie')
A:tornado.test.web_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.web_test.self.stream->IOStream(s, io_loop=self.io_loop)
A:tornado.test.web_test.actual_type->type(obj)
A:tornado.test.web_test.loader->DictLoader({'linkify.html': '{% module linkify(message) %}', 'page.html': '<html><head></head><body>\n{% for e in entries %}\n{% module Template("entry.html", entry=e) %}\n{% end %}\n</body></html>', 'entry.html': '{{ set_resources(embedded_css=".entry { margin-bottom: 1em; }", embedded_javascript="js_embed()", css_files=["/base.css", "/foo.css"], javascript_files="/common.js", html_head="<meta>", html_body=\'<script src="/analytics.js"/>\') }}\n<div class="entry">...</div>'})
A:tornado.test.web_test.cookie_value->to_unicode(create_signed_value(self.COOKIE_SECRET, 'asdf', 'qwer'))
A:tornado.test.web_test.data->json_decode(response.body)
A:tornado.test.web_test.do_include->bool(self.get_argument('include_host'))
A:tornado.test.web_test.regular_url->self.static_url(path)
A:tornado.test.web_test.override_url->self.static_url(path, include_host=do_include)
A:tornado.test.web_test.protocol_length->len(protocol)
A:tornado.test.web_test.check_regular->self.static_url(path).find(protocol, 0, protocol_length)
A:tornado.test.web_test.check_override->self.static_url(path, include_host=do_include).find(protocol, 0, protocol_length)
A:tornado.test.web_test.response1->self.fetch('/')
A:tornado.test.web_test.response2->self.fetch('/', headers={'If-None-Match': response1.headers['Etag']})
A:tornado.test.web_test.path->self.parse_url_path(path)
A:tornado.test.web_test.extension_index->url_path.rindex('.')
A:tornado.test.web_test.version_index->url_path.rindex('.', 0, extension_index)
A:tornado.test.web_test.reason->self.request.arguments.get('reason', [])
A:tornado.test.web_test.header_date->datetime.datetime.strptime(response.headers['Date'], '%a, %d %b %Y %H:%M:%S GMT')
A:tornado.test.web_test.set_cookies->sorted(response.headers.get_list('Set-Cookie'))
tornado.test.web_test.AuthRedirectRequestHandler(RequestHandler)
tornado.test.web_test.AuthRedirectRequestHandler.get(self)
tornado.test.web_test.AuthRedirectRequestHandler.get_login_url(self)
tornado.test.web_test.AuthRedirectRequestHandler.initialize(self,login_url)
tornado.test.web_test.AuthRedirectTest(WebTestCase)
tornado.test.web_test.AuthRedirectTest.get_handlers(self)
tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect(self)
tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect(self)
tornado.test.web_test.ClearAllCookiesTest(SimpleHandlerTestCase)
tornado.test.web_test.ClearAllCookiesTest.Handler(RequestHandler)
tornado.test.web_test.ClearAllCookiesTest.Handler.get(self)
tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies(self)
tornado.test.web_test.ClearHeaderTest(SimpleHandlerTestCase)
tornado.test.web_test.ClearHeaderTest.Handler(RequestHandler)
tornado.test.web_test.ClearHeaderTest.Handler.get(self)
tornado.test.web_test.ClearHeaderTest.test_clear_header(self)
tornado.test.web_test.ConnectionCloseHandler(RequestHandler)
tornado.test.web_test.ConnectionCloseHandler.get(self)
tornado.test.web_test.ConnectionCloseHandler.initialize(self,test)
tornado.test.web_test.ConnectionCloseHandler.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest(WebTestCase)
tornado.test.web_test.ConnectionCloseTest.get_handlers(self)
tornado.test.web_test.ConnectionCloseTest.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest.on_handler_waiting(self)
tornado.test.web_test.ConnectionCloseTest.test_connection_close(self)
tornado.test.web_test.CookieTest(WebTestCase)
tornado.test.web_test.CookieTest.get_handlers(self)
tornado.test.web_test.CookieTest.test_cookie_special_char(self)
tornado.test.web_test.CookieTest.test_get_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie_domain(self)
tornado.test.web_test.CookieTest.test_set_cookie_overwrite(self)
tornado.test.web_test.CookieTestRequestHandler(self)
tornado.test.web_test.CookieTestRequestHandler.__init__(self)
tornado.test.web_test.CookieTestRequestHandler.get_cookie(self,name)
tornado.test.web_test.CookieTestRequestHandler.set_cookie(self,name,value,expires_days=None)
tornado.test.web_test.CustomStaticFileTest(WebTestCase)
tornado.test.web_test.CustomStaticFileTest.get_app_kwargs(self)
tornado.test.web_test.CustomStaticFileTest.get_handlers(self)
tornado.test.web_test.CustomStaticFileTest.test_serve(self)
tornado.test.web_test.CustomStaticFileTest.test_static_url(self)
tornado.test.web_test.DateHeaderTest(SimpleHandlerTestCase)
tornado.test.web_test.DateHeaderTest.Handler(RequestHandler)
tornado.test.web_test.DateHeaderTest.Handler.get(self)
tornado.test.web_test.DateHeaderTest.test_date_header(self)
tornado.test.web_test.DecodeArgHandler(RequestHandler)
tornado.test.web_test.DecodeArgHandler.decode_argument(self,value,name=None)
tornado.test.web_test.DecodeArgHandler.get(self,arg)
tornado.test.web_test.EchoHandler(RequestHandler)
tornado.test.web_test.EchoHandler.get(self,*path_args)
tornado.test.web_test.EmptyFlushCallbackHandler(RequestHandler)
tornado.test.web_test.EmptyFlushCallbackHandler.get(self)
tornado.test.web_test.ErrorHandlerXSRFTest(WebTestCase)
tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs(self)
tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers(self)
tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf(self)
tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf(self)
tornado.test.web_test.ErrorResponseTest(WebTestCase)
tornado.test.web_test.ErrorResponseTest.get_handlers(self)
tornado.test.web_test.ErrorResponseTest.test_default(self)
tornado.test.web_test.ErrorResponseTest.test_failed_write_error(self)
tornado.test.web_test.ErrorResponseTest.test_get_error_html(self)
tornado.test.web_test.ErrorResponseTest.test_write_error(self)
tornado.test.web_test.FlowControlHandler(RequestHandler)
tornado.test.web_test.FlowControlHandler.get(self)
tornado.test.web_test.FlowControlHandler.step2(self)
tornado.test.web_test.FlowControlHandler.step3(self)
tornado.test.web_test.GetArgumentHandler(RequestHandler)
tornado.test.web_test.GetArgumentHandler.get(self)
tornado.test.web_test.GzipTestCase(SimpleHandlerTestCase)
tornado.test.web_test.GzipTestCase.Handler(RequestHandler)
tornado.test.web_test.GzipTestCase.Handler.get(self)
tornado.test.web_test.GzipTestCase.get_app_kwargs(self)
tornado.test.web_test.GzipTestCase.test_gzip(self)
tornado.test.web_test.GzipTestCase.test_gzip_not_requested(self)
tornado.test.web_test.GzipTestCase.test_vary_already_present(self)
tornado.test.web_test.Header304Test(SimpleHandlerTestCase)
tornado.test.web_test.Header304Test.Handler(RequestHandler)
tornado.test.web_test.Header304Test.Handler.get(self)
tornado.test.web_test.Header304Test.test_304_headers(self)
tornado.test.web_test.HeaderInjectionHandler(RequestHandler)
tornado.test.web_test.HeaderInjectionHandler.get(self)
tornado.test.web_test.HostMatchingTest(WebTestCase)
tornado.test.web_test.HostMatchingTest.Handler(RequestHandler)
tornado.test.web_test.HostMatchingTest.Handler.get(self)
tornado.test.web_test.HostMatchingTest.Handler.initialize(self,reply)
tornado.test.web_test.HostMatchingTest.get_handlers(self)
tornado.test.web_test.HostMatchingTest.test_host_matching(self)
tornado.test.web_test.LinkifyHandler(RequestHandler)
tornado.test.web_test.LinkifyHandler.get(self)
tornado.test.web_test.MultiHeaderHandler(RequestHandler)
tornado.test.web_test.MultiHeaderHandler.get(self)
tornado.test.web_test.NamedURLSpecGroupsTest(WebTestCase)
tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers(self)
tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups(self)
tornado.test.web_test.NonWSGIWebTests(WebTestCase)
tornado.test.web_test.NonWSGIWebTests.get_handlers(self)
tornado.test.web_test.NonWSGIWebTests.test_empty_flush(self)
tornado.test.web_test.NonWSGIWebTests.test_flow_control(self)
tornado.test.web_test.OptionalPathHandler(RequestHandler)
tornado.test.web_test.OptionalPathHandler.get(self,path)
tornado.test.web_test.PathArgsInPrepareTest(WebTestCase)
tornado.test.web_test.PathArgsInPrepareTest.Handler(RequestHandler)
tornado.test.web_test.PathArgsInPrepareTest.Handler.get(self,path)
tornado.test.web_test.PathArgsInPrepareTest.Handler.prepare(self)
tornado.test.web_test.PathArgsInPrepareTest.get_handlers(self)
tornado.test.web_test.PathArgsInPrepareTest.test_kw(self)
tornado.test.web_test.PathArgsInPrepareTest.test_pos(self)
tornado.test.web_test.RaiseWithReasonTest(SimpleHandlerTestCase)
tornado.test.web_test.RaiseWithReasonTest.Handler(RequestHandler)
tornado.test.web_test.RaiseWithReasonTest.Handler.get(self)
tornado.test.web_test.RaiseWithReasonTest.get_http_client(self)
tornado.test.web_test.RaiseWithReasonTest.test_httperror_str(self)
tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason(self)
tornado.test.web_test.RedirectHandler(RequestHandler)
tornado.test.web_test.RedirectHandler.get(self)
tornado.test.web_test.RequestEncodingTest(WebTestCase)
tornado.test.web_test.RequestEncodingTest.fetch_json(self,path)
tornado.test.web_test.RequestEncodingTest.get_handlers(self)
tornado.test.web_test.RequestEncodingTest.test_group_encoding(self)
tornado.test.web_test.RequestEncodingTest.test_group_question_mark(self)
tornado.test.web_test.RequestEncodingTest.test_slashes(self)
tornado.test.web_test.SecureCookieTest(unittest.TestCase)
tornado.test.web_test.SecureCookieTest.test_arbitrary_bytes(self)
tornado.test.web_test.SecureCookieTest.test_cookie_tampering_future_timestamp(self)
tornado.test.web_test.SecureCookieTest.test_round_trip(self)
tornado.test.web_test.SimpleHandlerTestCase(WebTestCase)
tornado.test.web_test.SimpleHandlerTestCase.get_handlers(self)
tornado.test.web_test.StaticFileTest(WebTestCase)
tornado.test.web_test.StaticFileTest._trigger_include_host_check(self,include_host)
tornado.test.web_test.StaticFileTest.get_app_kwargs(self)
tornado.test.web_test.StaticFileTest.get_handlers(self)
tornado.test.web_test.StaticFileTest.test_absolute_static_url(self)
tornado.test.web_test.StaticFileTest.test_include_host_override(self)
tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since(self)
tornado.test.web_test.StaticFileTest.test_static_304_if_none_match(self)
tornado.test.web_test.StaticFileTest.test_static_files(self)
tornado.test.web_test.StaticFileTest.test_static_url(self)
tornado.test.web_test.StatusReasonTest(SimpleHandlerTestCase)
tornado.test.web_test.StatusReasonTest.Handler(RequestHandler)
tornado.test.web_test.StatusReasonTest.Handler.get(self)
tornado.test.web_test.StatusReasonTest.get_http_client(self)
tornado.test.web_test.StatusReasonTest.test_status(self)
tornado.test.web_test.TypeCheckHandler(RequestHandler)
tornado.test.web_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.web_test.TypeCheckHandler.get(self,path_component)
tornado.test.web_test.TypeCheckHandler.post(self,path_component)
tornado.test.web_test.TypeCheckHandler.prepare(self)
tornado.test.web_test.UIModuleResourceHandler(RequestHandler)
tornado.test.web_test.UIModuleResourceHandler.get(self)
tornado.test.web_test.WSGISafeWebTest(WebTestCase)
tornado.test.web_test.WSGISafeWebTest.fetch_json(self,*args,**kwargs)
tornado.test.web_test.WSGISafeWebTest.get_app_kwargs(self)
tornado.test.web_test.WSGISafeWebTest.get_handlers(self)
tornado.test.web_test.WSGISafeWebTest.test_decode_argument(self)
tornado.test.web_test.WSGISafeWebTest.test_get_argument(self)
tornado.test.web_test.WSGISafeWebTest.test_header_injection(self)
tornado.test.web_test.WSGISafeWebTest.test_multi_header(self)
tornado.test.web_test.WSGISafeWebTest.test_no_gzip(self)
tornado.test.web_test.WSGISafeWebTest.test_optional_path(self)
tornado.test.web_test.WSGISafeWebTest.test_redirect(self)
tornado.test.web_test.WSGISafeWebTest.test_reverse_url(self)
tornado.test.web_test.WSGISafeWebTest.test_types(self)
tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources(self)
tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped(self)
tornado.test.web_test.WebTestCase(AsyncHTTPTestCase)
tornado.test.web_test.WebTestCase.get_app(self)
tornado.test.web_test.WebTestCase.get_app_kwargs(self)
tornado.test.web_test.WebTestCase.get_handlers(self)
tornado.test.web_test.wsgi_safe(cls)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/ioloop_test.py----------------------------------------
A:tornado.test.ioloop_test.self.start_time->time.time()
A:tornado.test.ioloop_test.self.stop_time->time.time()
A:tornado.test.ioloop_test.thread->threading.Thread(target=target)
A:tornado.test.ioloop_test.(sock, port)->bind_unused_port()
A:tornado.test.ioloop_test.other_ioloop->IOLoop()
A:tornado.test.ioloop_test.closing->threading.Event()
A:tornado.test.ioloop_test.(client, server)->socket.socketpair()
A:tornado.test.ioloop_test.handle->self.io_loop.add_timeout(self.io_loop.time(), self.stop())
A:tornado.test.ioloop_test.self.io_loop->IOLoop()
A:tornado.test.ioloop_test.self.current_io_loop->tornado.ioloop.IOLoop.current()
A:tornado.test.ioloop_test.wrapped->wrap(f1)
A:tornado.test.ioloop_test.result->self.wait()
A:tornado.test.ioloop_test.future->self.wait()
A:tornado.test.ioloop_test.ready->threading.Event()
tornado.test.ioloop_test.TestIOLoop(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_from_signal(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_from_signal_other_thread(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_wakeup(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_wakeup_other_thread(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_while_closing(self)
tornado.test.ioloop_test.TestIOLoop.test_add_timeout_timedelta(self)
tornado.test.ioloop_test.TestIOLoop.test_handle_callback_exception(self)
tornado.test.ioloop_test.TestIOLoop.test_multiple_add(self)
tornado.test.ioloop_test.TestIOLoop.test_read_while_writeable(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_timeout_after_fire(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_without_add(self)
tornado.test.ioloop_test.TestIOLoopAddCallback(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoopAddCallback.add_callback(self,callback,*args,**kwargs)
tornado.test.ioloop_test.TestIOLoopAddCallback.context(self,name)
tornado.test.ioloop_test.TestIOLoopAddCallback.setUp(self)
tornado.test.ioloop_test.TestIOLoopAddCallback.test_pre_wrap(self)
tornado.test.ioloop_test.TestIOLoopAddCallback.test_pre_wrap_with_args(self)
tornado.test.ioloop_test.TestIOLoopAddCallbackFromSignal(TestIOLoopAddCallback)
tornado.test.ioloop_test.TestIOLoopAddCallbackFromSignal.add_callback(self,callback,*args,**kwargs)
tornado.test.ioloop_test.TestIOLoopCurrent(unittest.TestCase)
tornado.test.ioloop_test.TestIOLoopCurrent.setUp(self)
tornado.test.ioloop_test.TestIOLoopCurrent.tearDown(self)
tornado.test.ioloop_test.TestIOLoopCurrent.test_current(self)
tornado.test.ioloop_test.TestIOLoopFutures(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoopFutures.test_add_future_stack_context(self)
tornado.test.ioloop_test.TestIOLoopFutures.test_add_future_threads(self)
tornado.test.ioloop_test.TestIOLoopRunSync(unittest.TestCase)
tornado.test.ioloop_test.TestIOLoopRunSync.setUp(self)
tornado.test.ioloop_test.TestIOLoopRunSync.tearDown(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_async_exception(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_async_result(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_current(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_sync_exception(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_sync_result(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_timeout(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/process_test.py----------------------------------------
A:tornado.test.process_test.(sock, port)->bind_unused_port()
A:tornado.test.process_test.id->fork_processes(3, max_restarts=3)
A:tornado.test.process_test.server->HTTPServer(self.get_app())
A:tornado.test.process_test.client->HTTPClient(SimpleAsyncHTTPClient)
A:tornado.test.process_test.pid->int(fetch('/').body)
A:tornado.test.process_test.pid2->int(fetch('/').body)
A:tornado.test.process_test.subproc->Subprocess([sys.executable, '-c', 'import time; time.sleep(30)'], io_loop=self.io_loop)
A:tornado.test.process_test.data->self.wait()
A:tornado.test.process_test.ret->self.wait()
tornado.test.process_test.ProcessTest(unittest.TestCase)
tornado.test.process_test.ProcessTest.get_app(self)
tornado.test.process_test.ProcessTest.tearDown(self)
tornado.test.process_test.ProcessTest.test_multi_process(self)
tornado.test.process_test.SubprocessTest(AsyncTestCase)
tornado.test.process_test.SubprocessTest.test_sigchild(self)
tornado.test.process_test.SubprocessTest.test_sigchild_signal(self)
tornado.test.process_test.SubprocessTest.test_stderr(self)
tornado.test.process_test.SubprocessTest.test_subprocess(self)
tornado.test.process_test.skip_if_twisted()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/twisted_test.py----------------------------------------
A:tornado.test.twisted_test.skipIfNoTwisted->tornado.test.util.unittest.skipUnless(have_twisted, 'twisted module not present')
A:tornado.test.twisted_test.saved[sig]->signal.getsignal(sig)
A:tornado.test.twisted_test.self._saved_signals->save_signal_handlers()
A:tornado.test.twisted_test.self._io_loop->IOLoop()
A:tornado.test.twisted_test.self._reactor->TornadoReactor(self._io_loop)
A:tornado.test.twisted_test.self._now->self._reactor.seconds()
A:tornado.test.twisted_test.dc->self._reactor.callLater(self._timeout, self.callLaterCallback)
A:tornado.test.twisted_test.self._called->self._reactor.seconds()
A:tornado.test.twisted_test.dc1->self._reactor.callLater(self._timeout1, self.callLaterCallback1)
A:tornado.test.twisted_test.dc2->self._reactor.callLater(self._timeout2, self.callLaterCallback2)
A:tornado.test.twisted_test.self._called1->self._reactor.seconds()
A:tornado.test.twisted_test.self._called2->self._reactor.seconds()
A:tornado.test.twisted_test.self._mainThread->_thread.get_ident()
A:tornado.test.twisted_test.self._thread->threading.Thread(target=self._newThreadRun)
A:tornado.test.twisted_test.Reader->implementer(IReadDescriptor)(Reader)
A:tornado.test.twisted_test.Writer->implementer(IWriteDescriptor)(Writer)
A:tornado.test.twisted_test.flags->fcntl.fcntl(fd, fcntl.F_GETFL)
A:tornado.test.twisted_test.(r, w)->os.pipe()
A:tornado.test.twisted_test.self._p1->os.fdopen(r, 'rb', 0)
A:tornado.test.twisted_test.self._p2->os.fdopen(w, 'wb', 0)
A:tornado.test.twisted_test.self._reader->Reader(self._p1, checkReadInput)
A:tornado.test.twisted_test.self._writer->Writer(self._p2, lambda fd: fd.write('x'))
A:tornado.test.twisted_test.self.saved_signals->save_signal_handlers()
A:tornado.test.twisted_test.self.io_loop->IOLoop()
A:tornado.test.twisted_test.self.reactor->TornadoReactor(self.io_loop)
A:tornado.test.twisted_test.site->Site(HelloResource())
A:tornado.test.twisted_test.port->self.reactor.listenTCP(0, site, interface='127.0.0.1')
A:tornado.test.twisted_test.app->Application([('/', HelloHandler)], log_function=lambda x: None)
A:tornado.test.twisted_test.server->HTTPServer(app, io_loop=self.io_loop)
A:tornado.test.twisted_test.(sock, self.tornado_port)->bind_unused_port()
A:tornado.test.twisted_test.client->Agent(self.reactor)
A:tornado.test.twisted_test.d->Agent(self.reactor).request('GET', url)
A:tornado.test.twisted_test.finished->Deferred()
A:tornado.test.twisted_test.response->self.twisted_fetch('http://localhost:%d' % self.tornado_port, self.run_reactor)
A:tornado.test.twisted_test.test_class->import_object(test_name)
A:tornado.test.twisted_test.self.__curdir->os.getcwd()
A:tornado.test.twisted_test.self.__tempdir->tempfile.mkdtemp()
A:tornado.test.twisted_test.self.__saved_signals->save_signal_handlers()
A:tornado.test.twisted_test.test_subclass->make_test_subclass(test_class)
A:tornado.test.twisted_test.self.real_io_loop->SelectIOLoop()
A:tornado.test.twisted_test.reactor->TornadoReactor(io_loop=self.real_io_loop)
tornado.test.twisted_test.CompatibilityTests(unittest.TestCase)
tornado.test.twisted_test.CompatibilityTests.run_ioloop(self)
tornado.test.twisted_test.CompatibilityTests.run_reactor(self)
tornado.test.twisted_test.CompatibilityTests.setUp(self)
tornado.test.twisted_test.CompatibilityTests.start_tornado_server(self)
tornado.test.twisted_test.CompatibilityTests.start_twisted_server(self)
tornado.test.twisted_test.CompatibilityTests.tearDown(self)
tornado.test.twisted_test.CompatibilityTests.testTornadoServerTwistedClientIOLoop(self)
tornado.test.twisted_test.CompatibilityTests.testTornadoServerTwistedClientReactor(self)
tornado.test.twisted_test.CompatibilityTests.testTwistedServerTornadoClientIOLoop(self)
tornado.test.twisted_test.CompatibilityTests.testTwistedServerTornadoClientReactor(self)
tornado.test.twisted_test.CompatibilityTests.tornado_fetch(self,url,runner)
tornado.test.twisted_test.CompatibilityTests.twisted_fetch(self,url,runner)
tornado.test.twisted_test.ReactorCallFromThreadTest(ReactorTestCase)
tornado.test.twisted_test.ReactorCallFromThreadTest._fnCalledFromThread(self)
tornado.test.twisted_test.ReactorCallFromThreadTest._newThreadRun(self)
tornado.test.twisted_test.ReactorCallFromThreadTest._whenRunningCallback(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.setUp(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.tearDown(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.testCallFromThread(self)
tornado.test.twisted_test.ReactorCallInThread(ReactorTestCase)
tornado.test.twisted_test.ReactorCallInThread._fnCalledInThread(self,*args,**kwargs)
tornado.test.twisted_test.ReactorCallInThread._whenRunningCallback(self)
tornado.test.twisted_test.ReactorCallInThread.setUp(self)
tornado.test.twisted_test.ReactorCallInThread.testCallInThread(self)
tornado.test.twisted_test.ReactorCallLaterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorCallLaterTest.callLaterCallback(self)
tornado.test.twisted_test.ReactorCallLaterTest.test_callLater(self)
tornado.test.twisted_test.ReactorReaderWriterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorReaderWriterTest._set_nonblocking(self,fd)
tornado.test.twisted_test.ReactorReaderWriterTest._testNoWriter(self)
tornado.test.twisted_test.ReactorReaderWriterTest._testReadWrite(self)
tornado.test.twisted_test.ReactorReaderWriterTest.setUp(self)
tornado.test.twisted_test.ReactorReaderWriterTest.tearDown(self)
tornado.test.twisted_test.ReactorReaderWriterTest.testNoWriter(self)
tornado.test.twisted_test.ReactorReaderWriterTest.testReadWrite(self)
tornado.test.twisted_test.ReactorTestCase(unittest.TestCase)
tornado.test.twisted_test.ReactorTestCase.setUp(self)
tornado.test.twisted_test.ReactorTestCase.tearDown(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorTwoCallLaterTest.callLaterCallback1(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest.callLaterCallback2(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest.test_callLater(self)
tornado.test.twisted_test.ReactorWhenRunningTest(ReactorTestCase)
tornado.test.twisted_test.ReactorWhenRunningTest.anotherWhenRunningCallback(self)
tornado.test.twisted_test.ReactorWhenRunningTest.test_whenRunning(self)
tornado.test.twisted_test.ReactorWhenRunningTest.whenRunningCallback(self)
tornado.test.twisted_test.Reader(self,fd,callback)
tornado.test.twisted_test.Reader.__init__(self,fd,callback)
tornado.test.twisted_test.Reader.close(self)
tornado.test.twisted_test.Reader.connectionLost(self,reason)
tornado.test.twisted_test.Reader.doRead(self)
tornado.test.twisted_test.Reader.fileno(self)
tornado.test.twisted_test.Reader.logPrefix(self)
tornado.test.twisted_test.Reader.readConnectionLost(self,reason)
tornado.test.twisted_test.Writer(self,fd,callback)
tornado.test.twisted_test.Writer.__init__(self,fd,callback)
tornado.test.twisted_test.Writer.close(self)
tornado.test.twisted_test.Writer.connectionLost(self,reason)
tornado.test.twisted_test.Writer.doWrite(self)
tornado.test.twisted_test.Writer.fileno(self)
tornado.test.twisted_test.Writer.logPrefix(self)
tornado.test.twisted_test.restore_signal_handlers(saved)
tornado.test.twisted_test.save_signal_handlers()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/util.py----------------------------------------
A:tornado.test.util.skipIfNonUnix->unittest2.skipIf(os.name != 'posix' or sys.platform == 'cygwin', 'non-unix platform')
A:tornado.test.util.skipOnTravis->unittest2.skipIf('TRAVIS' in os.environ, 'timing tests unreliable on travis')


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/stack_context_test.py----------------------------------------
A:tornado.test.stack_context_test.callback->wrap(callback)
A:tornado.test.stack_context_test.wrapped->wrap(f2)
tornado.test.stack_context_test.HTTPStackContextTest(AsyncHTTPTestCase)
tornado.test.stack_context_test.HTTPStackContextTest.get_app(self)
tornado.test.stack_context_test.HTTPStackContextTest.handle_response(self,response)
tornado.test.stack_context_test.HTTPStackContextTest.test_stack_context(self)
tornado.test.stack_context_test.StackContextTest(AsyncTestCase)
tornado.test.stack_context_test.StackContextTest.context(self,name)
tornado.test.stack_context_test.StackContextTest.setUp(self)
tornado.test.stack_context_test.StackContextTest.test_deactivate(self)
tornado.test.stack_context_test.StackContextTest.test_exit_library_context(self)
tornado.test.stack_context_test.StackContextTest.test_isolation_empty(self)
tornado.test.stack_context_test.StackContextTest.test_isolation_nonempty(self)
tornado.test.stack_context_test.StackContextTest.test_yield_in_with(self)
tornado.test.stack_context_test.StackContextTest.test_yield_in_with_exception_stack_context(self)
tornado.test.stack_context_test.StackContextTest.test_yield_outside_with(self)
tornado.test.stack_context_test.StackContextTest.test_yield_outside_with_exception_stack_context(self)
tornado.test.stack_context_test.TestRequestHandler(self,app,request,io_loop)
tornado.test.stack_context_test.TestRequestHandler.__init__(self,app,request,io_loop)
tornado.test.stack_context_test.TestRequestHandler.get(self)
tornado.test.stack_context_test.TestRequestHandler.get_error_html(self,status_code,**kwargs)
tornado.test.stack_context_test.TestRequestHandler.part2(self)
tornado.test.stack_context_test.TestRequestHandler.part3(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/auth_test.py----------------------------------------
A:tornado.test.auth_test.self._OPENID_ENDPOINT->test.get_url('/openid/server/authenticate')
A:tornado.test.auth_test.self._OAUTH_REQUEST_TOKEN_URL->test.get_url('/oauth1/server/request_token')
A:tornado.test.auth_test.self._OAUTH_AUTHORIZE_URL->test.get_url('/oauth1/server/authorize')
A:tornado.test.auth_test.self._OAUTH_ACCESS_TOKEN_URL->test.get_url('/twitter/server/access_token')
A:tornado.test.auth_test.params->self._oauth_request_parameters('http://www.example.com/api/asdf', dict(key='uiop', secret='5678'), parameters=dict(foo='bar'))
A:tornado.test.auth_test.self._TWITTER_BASE_URL->test.get_url('/twitter/api')
A:tornado.test.auth_test.response->self.fetch('/google/client/openid_login?openid.mode=blah&openid.ns.ax=http://openid.net/srv/ax/1.0&openid.ax.type.email=http://axschema.org/contact/email&openid.ax.value.email=foo@example.com', follow_redirects=False)
A:tornado.test.auth_test.parsed->json_decode(response.body)
tornado.test.auth_test.AuthTest(AsyncHTTPTestCase)
tornado.test.auth_test.AuthTest.get_app(self)
tornado.test.auth_test.AuthTest.test_google_get_user(self)
tornado.test.auth_test.AuthTest.test_google_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth10a_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10a_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10a_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth2_redirect(self)
tornado.test.auth_test.AuthTest.test_openid_get_user(self)
tornado.test.auth_test.AuthTest.test_openid_redirect(self)
tornado.test.auth_test.AuthTest.test_twitter_get_user(self)
tornado.test.auth_test.AuthTest.test_twitter_redirect(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user_error(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user_future(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user_future_error(self)
tornado.test.auth_test.GoogleOpenIdClientLoginHandler(RequestHandler,GoogleMixin)
tornado.test.auth_test.GoogleOpenIdClientLoginHandler.get(self)
tornado.test.auth_test.GoogleOpenIdClientLoginHandler.get_auth_http_client(self)
tornado.test.auth_test.GoogleOpenIdClientLoginHandler.initialize(self,test)
tornado.test.auth_test.GoogleOpenIdClientLoginHandler.on_user(self,user)
tornado.test.auth_test.OAuth1ClientLoginHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_get_user(self,access_token,callback)
tornado.test.auth_test.OAuth1ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth1ClientLoginHandler.initialize(self,test,version)
tornado.test.auth_test.OAuth1ClientLoginHandler.on_user(self,user)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.get(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.initialize(self,version)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler.get(self)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler(RequestHandler,OAuth2Mixin)
tornado.test.auth_test.OAuth2ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdClientLoginHandler(RequestHandler,OpenIdMixin)
tornado.test.auth_test.OpenIdClientLoginHandler.get(self)
tornado.test.auth_test.OpenIdClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdClientLoginHandler.on_user(self,user)
tornado.test.auth_test.OpenIdServerAuthenticateHandler(RequestHandler)
tornado.test.auth_test.OpenIdServerAuthenticateHandler.post(self)
tornado.test.auth_test.TwitterClientHandler(RequestHandler,TwitterMixin)
tornado.test.auth_test.TwitterClientHandler.get_auth_http_client(self)
tornado.test.auth_test.TwitterClientHandler.initialize(self,test)
tornado.test.auth_test.TwitterClientLoginHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientLoginHandler.get(self)
tornado.test.auth_test.TwitterClientLoginHandler.on_user(self,user)
tornado.test.auth_test.TwitterClientShowUserFutureHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientShowUserFutureHandler.get(self)
tornado.test.auth_test.TwitterClientShowUserHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientShowUserHandler.get(self)
tornado.test.auth_test.TwitterServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.TwitterServerAccessTokenHandler.get(self)
tornado.test.auth_test.TwitterServerShowUserHandler(RequestHandler)
tornado.test.auth_test.TwitterServerShowUserHandler.get(self,screen_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/log_test.py----------------------------------------
A:tornado.test.log_test.LINE_RE->re.compile(b'(?s)\x01\\[E [0-9]{6} [0-9]{2}:[0-9]{2}:[0-9]{2} log_test:[0-9]+\\]\x02 (.*)')
A:tornado.test.log_test.self.formatter->LogFormatter(color=False)
A:tornado.test.log_test.self.formatter._normal->u('\x02')
A:tornado.test.log_test.self.logger->logging.Logger('tornado.test.log_test.EnablePrettyLoggingTest')
A:tornado.test.log_test.self.tempdir->tempfile.mkdtemp()
A:tornado.test.log_test.self.filename->os.path.join(self.tempdir, 'log.out')
A:tornado.test.log_test.self.handler->self.make_handler(self.filename)
A:tornado.test.log_test.line->f.read().strip()
A:tornado.test.log_test.m->LogFormatterTest.LINE_RE.match(line)
A:tornado.test.log_test.output->self.get_output()
A:tornado.test.log_test.self.options->OptionParser()
A:tornado.test.log_test.tmpdir->tempfile.mkdtemp()
A:tornado.test.log_test.filenames->glob.glob(tmpdir + '/test_log*')
tornado.test.log_test.EnablePrettyLoggingTest(unittest.TestCase)
tornado.test.log_test.EnablePrettyLoggingTest.setUp(self)
tornado.test.log_test.EnablePrettyLoggingTest.test_log_file(self)
tornado.test.log_test.LogFormatterTest(unittest.TestCase)
tornado.test.log_test.LogFormatterTest.get_output(self)
tornado.test.log_test.LogFormatterTest.make_handler(self,filename)
tornado.test.log_test.LogFormatterTest.setUp(self)
tornado.test.log_test.LogFormatterTest.tearDown(self)
tornado.test.log_test.LogFormatterTest.test_basic_logging(self)
tornado.test.log_test.LogFormatterTest.test_bytes_exception_logging(self)
tornado.test.log_test.LogFormatterTest.test_bytes_logging(self)
tornado.test.log_test.LogFormatterTest.test_utf8_logging(self)
tornado.test.log_test.UnicodeLogFormatterTest(LogFormatterTest)
tornado.test.log_test.UnicodeLogFormatterTest.make_handler(self,filename)
tornado.test.log_test.UnicodeLogFormatterTest.test_unicode_logging(self)
tornado.test.log_test.ignore_bytes_warning()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/curl_httpclient_test.py----------------------------------------
A:tornado.test.curl_httpclient_test.client->CurlAsyncHTTPClient(io_loop=self.io_loop)
A:tornado.test.curl_httpclient_test.self.http_client->CurlAsyncHTTPClient(self.io_loop)
A:tornado.test.curl_httpclient_test.request->HTTPRequest(self.get_url('/'), prepare_curl_callback=lambda curl: 1 / 0)
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase)
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase.get_http_client(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase(AsyncHTTPTestCase)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.get_app(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.setUp(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.test_prepare_curl_callback_stack_context(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado3.0.2/lib/python3.6/site-packages/tornado/test/locale_test.py----------------------------------------
A:tornado.test.locale_test.self.saved[var]->getattr(tornado.locale, var)
A:tornado.test.locale_test.locale->tornado.locale.get('fr_FR')
tornado.test.locale_test.LocaleDataTest(unittest.TestCase)
tornado.test.locale_test.LocaleDataTest.test_non_ascii_name(self)
tornado.test.locale_test.TranslationLoaderTest(unittest.TestCase)
tornado.test.locale_test.TranslationLoaderTest.clear_locale_cache(self)
tornado.test.locale_test.TranslationLoaderTest.setUp(self)
tornado.test.locale_test.TranslationLoaderTest.tearDown(self)
tornado.test.locale_test.TranslationLoaderTest.test_csv(self)
tornado.test.locale_test.TranslationLoaderTest.test_gettext(self)

