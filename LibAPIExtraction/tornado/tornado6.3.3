
----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/locale.py----------------------------------------
A:tornado.locale._supported_locales->frozenset(list(_translations.keys()) + [_default_locale])
A:tornado.locale.(locale, extension)->path.split('.')
A:tornado.locale.full_path->os.path.join(directory, path)
A:tornado.locale.data->bf.read(len(codecs.BOM_UTF16_LE))
A:tornado.locale.lang->os.path.basename(os.path.dirname(os.path.dirname(filename)))
A:tornado.locale._translations[lang]->gettext.translation(domain, directory, languages=[lang])
A:tornado.locale.code->code.replace('-', '_').replace('-', '_')
A:tornado.locale.parts->code.replace('-', '_').replace('-', '_').split('_')
A:tornado.locale.translations->_translations.get(code, None)
A:tornado.locale.locale->CSVLocale(code, translations)
A:tornado.locale.self.name->tornado._locale_data.LOCALE_NAMES.get(code, {}).get('name', 'Unknown')
A:tornado.locale.date->datetime.datetime.utcfromtimestamp(date)
A:tornado.locale.now->datetime.datetime.utcnow()
A:tornado.locale.minutes->round(seconds / 60.0)
A:tornado.locale.hours->round(seconds / (60.0 * 60))
A:tornado.locale.format->_('%(time)s')
A:tornado.locale.s->str(value)
A:tornado.locale.message_dict->self.translations.get('unknown', {})
A:tornado.locale.result->self.gettext(msg_with_ctxt)
tornado.locale.CSVLocale(self,code:str,translations:Dict[str,Dict[str,str]])
tornado.locale.CSVLocale.__init__(self,code:str,translations:Dict[str,Dict[str,str]])
tornado.locale.CSVLocale.pgettext(self,context:str,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.CSVLocale.translate(self,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.GettextLocale(self,code:str,translations:gettext.NullTranslations)
tornado.locale.GettextLocale.__init__(self,code:str,translations:gettext.NullTranslations)
tornado.locale.GettextLocale.pgettext(self,context:str,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.GettextLocale.translate(self,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.Locale(self,code:str)
tornado.locale.Locale.__init__(self,code:str)
tornado.locale.Locale.format_date(self,date:Union[int,float,datetime.datetime],gmt_offset:int=0,relative:bool=True,shorter:bool=False,full_format:bool=False)->str
tornado.locale.Locale.format_day(self,date:datetime.datetime,gmt_offset:int=0,dow:bool=True)->bool
tornado.locale.Locale.friendly_number(self,value:int)->str
tornado.locale.Locale.get(cls,code:str)->'Locale'
tornado.locale.Locale.get_closest(cls,*locale_codes:str)->'Locale'
tornado.locale.Locale.list(self,parts:Any)->str
tornado.locale.Locale.pgettext(self,context:str,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.Locale.translate(self,message:str,plural_message:Optional[str]=None,count:Optional[int]=None)->str
tornado.locale.get(*locale_codes:str)->'Locale'
tornado.locale.get_supported_locales()->Iterable[str]
tornado.locale.load_gettext_translations(directory:str,domain:str)->None
tornado.locale.load_translations(directory:str,encoding:Optional[str]=None)->None
tornado.locale.set_default_locale(code:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/httpclient.py----------------------------------------
A:tornado.httpclient.self._io_loop->IOLoop(make_current=False)
A:tornado.httpclient.self._async_client->self._io_loop.run_sync(make_client)
A:tornado.httpclient.response->HTTPClient().fetch(arg, follow_redirects=options.follow_redirects, validate_cert=options.validate_cert, proxy_host=options.proxy_host, proxy_port=options.proxy_port)
A:tornado.httpclient.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.httpclient.instance_cache->cls._async_clients()
A:tornado.httpclient.instance->super(AsyncHTTPClient, cls).__new__(cls, **kwargs)
A:tornado.httpclient.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.httpclient.self.defaults->dict(HTTPRequest._DEFAULTS)
A:tornado.httpclient.cached_val->self._instance_cache.pop(self.io_loop, None)
A:tornado.httpclient.request->HTTPRequest(url=request, **kwargs)
A:tornado.httpclient.request.headers->tornado.httputil.HTTPHeaders(request.headers)
A:tornado.httpclient.request_proxy->_RequestProxy(request, self.defaults)
A:tornado.httpclient.future->Future()
A:tornado.httpclient._DEFAULTS->dict(connect_timeout=20.0, request_timeout=20.0, follow_redirects=True, max_redirects=5, decompress_response=True, proxy_password='', allow_nonstandard_methods=False, validate_cert=True)
A:tornado.httpclient.self.headers['If-Modified-Since']->tornado.httputil.format_timestamp(if_modified_since)
A:tornado.httpclient.self.start_time->time.time()
A:tornado.httpclient.self._headers->tornado.httputil.HTTPHeaders()
A:tornado.httpclient.self._body->self.buffer.getvalue()
A:tornado.httpclient.self.headers->tornado.httputil.HTTPHeaders()
A:tornado.httpclient.self.error->HTTPError(self.code, message=self.reason, response=self)
A:tornado.httpclient.args->parse_command_line()
A:tornado.httpclient.request_attr->getattr(self.request, name)
A:tornado.httpclient.client->HTTPClient()
tornado.httpclient.AsyncHTTPClient(cls,force_instance:bool=False,**kwargs:Any)
tornado.httpclient.AsyncHTTPClient.__new__(cls,force_instance:bool=False,**kwargs:Any)
tornado.httpclient.AsyncHTTPClient._async_clients(cls)->Dict[IOLoop, 'AsyncHTTPClient']
tornado.httpclient.AsyncHTTPClient.close(self)->None
tornado.httpclient.AsyncHTTPClient.configurable_base(cls)->Type[Configurable]
tornado.httpclient.AsyncHTTPClient.configurable_default(cls)->Type[Configurable]
tornado.httpclient.AsyncHTTPClient.configure(cls,impl:'Union[None,str,Type[Configurable]]',**kwargs:Any)->None
tornado.httpclient.AsyncHTTPClient.fetch(self,request:Union[str,'HTTPRequest'],raise_error:bool=True,**kwargs:Any)->'Future[HTTPResponse]'
tornado.httpclient.AsyncHTTPClient.fetch_impl(self,request:'HTTPRequest',callback:Callable[['HTTPResponse'],None])->None
tornado.httpclient.AsyncHTTPClient.initialize(self,defaults:Optional[Dict[str,Any]]=None)->None
tornado.httpclient.HTTPClient(self,async_client_class:'Optional[Type[AsyncHTTPClient]]'=None,**kwargs:Any)
tornado.httpclient.HTTPClient.__del__(self)->None
tornado.httpclient.HTTPClient.__init__(self,async_client_class:'Optional[Type[AsyncHTTPClient]]'=None,**kwargs:Any)
tornado.httpclient.HTTPClient.close(self)->None
tornado.httpclient.HTTPClient.fetch(self,request:Union['HTTPRequest',str],**kwargs:Any)->'HTTPResponse'
tornado.httpclient.HTTPClientError(self,code:int,message:Optional[str]=None,response:Optional[HTTPResponse]=None)
tornado.httpclient.HTTPClientError.__init__(self,code:int,message:Optional[str]=None,response:Optional[HTTPResponse]=None)
tornado.httpclient.HTTPClientError.__str__(self)->str
tornado.httpclient.HTTPRequest(self,url:str,method:str='GET',headers:Optional[Union[Dict[str,str],httputil.HTTPHeaders]]=None,body:Optional[Union[bytes,str]]=None,auth_username:Optional[str]=None,auth_password:Optional[str]=None,auth_mode:Optional[str]=None,connect_timeout:Optional[float]=None,request_timeout:Optional[float]=None,if_modified_since:Optional[Union[float,datetime.datetime]]=None,follow_redirects:Optional[bool]=None,max_redirects:Optional[int]=None,user_agent:Optional[str]=None,use_gzip:Optional[bool]=None,network_interface:Optional[str]=None,streaming_callback:Optional[Callable[[bytes],None]]=None,header_callback:Optional[Callable[[str],None]]=None,prepare_curl_callback:Optional[Callable[[Any],None]]=None,proxy_host:Optional[str]=None,proxy_port:Optional[int]=None,proxy_username:Optional[str]=None,proxy_password:Optional[str]=None,proxy_auth_mode:Optional[str]=None,allow_nonstandard_methods:Optional[bool]=None,validate_cert:Optional[bool]=None,ca_certs:Optional[str]=None,allow_ipv6:Optional[bool]=None,client_key:Optional[str]=None,client_cert:Optional[str]=None,body_producer:Optional[Callable[[Callable[[bytes],None]],'Future[None]']]=None,expect_100_continue:bool=False,decompress_response:Optional[bool]=None,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None)
tornado.httpclient.HTTPRequest.__init__(self,url:str,method:str='GET',headers:Optional[Union[Dict[str,str],httputil.HTTPHeaders]]=None,body:Optional[Union[bytes,str]]=None,auth_username:Optional[str]=None,auth_password:Optional[str]=None,auth_mode:Optional[str]=None,connect_timeout:Optional[float]=None,request_timeout:Optional[float]=None,if_modified_since:Optional[Union[float,datetime.datetime]]=None,follow_redirects:Optional[bool]=None,max_redirects:Optional[int]=None,user_agent:Optional[str]=None,use_gzip:Optional[bool]=None,network_interface:Optional[str]=None,streaming_callback:Optional[Callable[[bytes],None]]=None,header_callback:Optional[Callable[[str],None]]=None,prepare_curl_callback:Optional[Callable[[Any],None]]=None,proxy_host:Optional[str]=None,proxy_port:Optional[int]=None,proxy_username:Optional[str]=None,proxy_password:Optional[str]=None,proxy_auth_mode:Optional[str]=None,allow_nonstandard_methods:Optional[bool]=None,validate_cert:Optional[bool]=None,ca_certs:Optional[str]=None,allow_ipv6:Optional[bool]=None,client_key:Optional[str]=None,client_cert:Optional[str]=None,body_producer:Optional[Callable[[Callable[[bytes],None]],'Future[None]']]=None,expect_100_continue:bool=False,decompress_response:Optional[bool]=None,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None)
tornado.httpclient.HTTPRequest.body(self)->bytes
tornado.httpclient.HTTPRequest.body(self,value:Union[bytes,str])->None
tornado.httpclient.HTTPRequest.headers(self)->httputil.HTTPHeaders
tornado.httpclient.HTTPRequest.headers(self,value:Union[Dict[str,str],httputil.HTTPHeaders])->None
tornado.httpclient.HTTPResponse(self,request:HTTPRequest,code:int,headers:Optional[httputil.HTTPHeaders]=None,buffer:Optional[BytesIO]=None,effective_url:Optional[str]=None,error:Optional[BaseException]=None,request_time:Optional[float]=None,time_info:Optional[Dict[str,float]]=None,reason:Optional[str]=None,start_time:Optional[float]=None)
tornado.httpclient.HTTPResponse.__init__(self,request:HTTPRequest,code:int,headers:Optional[httputil.HTTPHeaders]=None,buffer:Optional[BytesIO]=None,effective_url:Optional[str]=None,error:Optional[BaseException]=None,request_time:Optional[float]=None,time_info:Optional[Dict[str,float]]=None,reason:Optional[str]=None,start_time:Optional[float]=None)
tornado.httpclient.HTTPResponse.__repr__(self)->str
tornado.httpclient.HTTPResponse.body(self)->bytes
tornado.httpclient.HTTPResponse.rethrow(self)->None
tornado.httpclient._RequestProxy(self,request:HTTPRequest,defaults:Optional[Dict[str,Any]])
tornado.httpclient._RequestProxy.__getattr__(self,name:str)->Any
tornado.httpclient._RequestProxy.__init__(self,request:HTTPRequest,defaults:Optional[Dict[str,Any]])
tornado.httpclient.main()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/__init__.py----------------------------------------
tornado.__init__.__getattr__(name:str)->typing.Any


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/escape.py----------------------------------------
A:tornado.escape._XHTML_ESCAPE_RE->re.compile('[&<>"\']')
A:tornado.escape.value->to_basestring(value).replace('+', ' ')
A:tornado.escape.qs->qs.decode('latin1').decode('latin1')
A:tornado.escape.result->urllib.parse.parse_qs(qs, keep_blank_values, strict_parsing, encoding='latin1', errors='strict')
A:tornado.escape._URL_RE->re.compile(to_unicode('\\b((?:([\\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\\s&()]|&amp;|&quot;)*(?:[^!"#$%&\'()*+,.:;<=>?@\\[\\]^`{|}~\\s]))|(?:\\((?:[^\\s&()]|&amp;|&quot;)*\\)))+)'))
A:tornado.escape.url->m.group(1)
A:tornado.escape.proto->m.group(2)
A:tornado.escape.href->m.group(1)
A:tornado.escape.parts->url[proto_len:].split('/')
A:tornado.escape.amp->m.group(1).rfind('&')
A:tornado.escape.text->_unicode(xhtml_escape(text))
A:tornado.escape.unicode_map[name]->chr(value)
A:tornado.escape._HTML_UNICODE_MAP->_build_unicode_map()
tornado.escape._build_unicode_map()->Dict[str, str]
tornado.escape._convert_entity(m:typing.Match)->str
tornado.escape.json_decode(value:Union[str,bytes])->Any
tornado.escape.json_encode(value:Any)->str
tornado.escape.linkify(text:Union[str,bytes],shorten:bool=False,extra_params:Union[str,Callable[[str],str]]='',require_protocol:bool=False,permitted_protocols:List[str]=['http','https'])->str
tornado.escape.parse_qs_bytes(qs:Union[str,bytes],keep_blank_values:bool=False,strict_parsing:bool=False)->Dict[str, List[bytes]]
tornado.escape.recursive_unicode(obj:Any)->Any
tornado.escape.squeeze(value:str)->str
tornado.escape.to_unicode(value:Union[None,str,bytes])->Optional[str]
tornado.escape.url_escape(value:Union[str,bytes],plus:bool=True)->str
tornado.escape.url_unescape(value:Union[str,bytes],encoding:Optional[str]='utf-8',plus:bool=True)->Union[str, bytes]
tornado.escape.utf8(value:Union[None,str,bytes])->Optional[bytes]
tornado.escape.xhtml_escape(value:Union[str,bytes])->str
tornado.escape.xhtml_unescape(value:Union[str,bytes])->str


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/template.py----------------------------------------
A:tornado.template._UNSET->_UnsetMarker()
A:tornado.template.text->re.sub('(\\s*\\n\\s*)', '\n', text)
A:tornado.template.self.name->tornado.escape.native_str(name)
A:tornado.template.reader->_TemplateReader(name, escape.native_str(template_string), whitespace)
A:tornado.template.self.file->_File(self, _parse(reader, self))
A:tornado.template.self.code->self._generate_python(loader)
A:tornado.template.self.compiled->compile(escape.to_unicode(self.code), '%s.generated.py' % self.name.replace('.', '_'), 'exec', dont_inherit=True)
A:tornado.template.formatted_code->_format_code(self.code).rstrip()
A:tornado.template.execute->typing.cast(Callable[[], bytes], namespace['_tt_execute'])
A:tornado.template.buffer->StringIO()
A:tornado.template.ancestors->self._get_ancestors(loader)
A:tornado.template.writer->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template)
A:tornado.template.template->Template(f.read(), name=name, loader=self)
A:tornado.template.self.lock->threading.RLock()
A:tornado.template.name->posixpath.normpath(posixpath.join(file_dir, name))
A:tornado.template.self.templates[name]->self._create_template(name)
A:tornado.template.self.root->os.path.abspath(root_directory)
A:tornado.template.current_path->os.path.join(self.root, parent_path)
A:tornado.template.file_dir->posixpath.dirname(parent_path)
A:tornado.template.relative_path->os.path.abspath(os.path.join(file_dir, name))
A:tornado.template.path->os.path.join(self.root, name)
A:tornado.template.included->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template).loader.load(self.name, self.template_name)
A:tornado.template.value->filter_whitespace(self.whitespace, value)
A:tornado.template.index->self.text.find(needle, start, end)
A:tornado.template.size->len(self)
A:tornado.template.(start, stop, step)->key.indices(size)
A:tornado.template.lines->code.splitlines()
A:tornado.template.body->_ChunkList([])
A:tornado.template.curly->_TemplateReader(name, escape.native_str(template_string), whitespace).find('{', curly)
A:tornado.template.cons->_TemplateReader(name, escape.native_str(template_string), whitespace).consume(curly)
A:tornado.template.start_brace->_TemplateReader(name, escape.native_str(template_string), whitespace).consume(2)
A:tornado.template.end->_TemplateReader(name, escape.native_str(template_string), whitespace).find('%}')
A:tornado.template.contents->_TemplateReader(name, escape.native_str(template_string), whitespace).consume(end).strip()
A:tornado.template.(operator, space, suffix)->_TemplateReader(name, escape.native_str(template_string), whitespace).consume(end).strip().partition(' ')
A:tornado.template.suffix->suffix.strip('"').strip("'").strip('"').strip("'")
A:tornado.template.allowed_parents->intermediate_blocks.get(operator)
A:tornado.template.block->_ControlBlock(contents, line, block_body)
A:tornado.template.fn->suffix.strip('"').strip("'").strip('"').strip("'").strip()
A:tornado.template.mode->suffix.strip('"').strip("'").strip('"').strip("'").strip()
A:tornado.template.block_body->_parse(reader, template, operator, in_loop)
tornado.template.BaseLoader(self,autoescape:str=_DEFAULT_AUTOESCAPE,namespace:Optional[Dict[str,Any]]=None,whitespace:Optional[str]=None)
tornado.template.BaseLoader.__init__(self,autoescape:str=_DEFAULT_AUTOESCAPE,namespace:Optional[Dict[str,Any]]=None,whitespace:Optional[str]=None)
tornado.template.BaseLoader._create_template(self,name:str)->Template
tornado.template.BaseLoader.load(self,name:str,parent_path:Optional[str]=None)->Template
tornado.template.BaseLoader.reset(self)->None
tornado.template.BaseLoader.resolve_path(self,name:str,parent_path:Optional[str]=None)->str
tornado.template.DictLoader(self,dict:Dict[str,str],**kwargs:Any)
tornado.template.DictLoader.__init__(self,dict:Dict[str,str],**kwargs:Any)
tornado.template.DictLoader._create_template(self,name:str)->Template
tornado.template.DictLoader.resolve_path(self,name:str,parent_path:Optional[str]=None)->str
tornado.template.Loader(self,root_directory:str,**kwargs:Any)
tornado.template.Loader.__init__(self,root_directory:str,**kwargs:Any)
tornado.template.Loader._create_template(self,name:str)->Template
tornado.template.Loader.resolve_path(self,name:str,parent_path:Optional[str]=None)->str
tornado.template.ParseError(self,message:str,filename:Optional[str]=None,lineno:int=0)
tornado.template.ParseError.__init__(self,message:str,filename:Optional[str]=None,lineno:int=0)
tornado.template.ParseError.__str__(self)->str
tornado.template.Template(self,template_string:Union[str,bytes],name:str='<string>',loader:Optional['BaseLoader']=None,compress_whitespace:Union[bool,_UnsetMarker]=_UNSET,autoescape:Optional[Union[str,_UnsetMarker]]=_UNSET,whitespace:Optional[str]=None)
tornado.template.Template.__init__(self,template_string:Union[str,bytes],name:str='<string>',loader:Optional['BaseLoader']=None,compress_whitespace:Union[bool,_UnsetMarker]=_UNSET,autoescape:Optional[Union[str,_UnsetMarker]]=_UNSET,whitespace:Optional[str]=None)
tornado.template.Template._generate_python(self,loader:Optional['BaseLoader'])->str
tornado.template.Template._get_ancestors(self,loader:Optional['BaseLoader'])->List['_File']
tornado.template.Template.generate(self,**kwargs:Any)->bytes
tornado.template._ApplyBlock(self,method:str,line:int,body:_Node)
tornado.template._ApplyBlock.__init__(self,method:str,line:int,body:_Node)
tornado.template._ApplyBlock.each_child(self)->Iterable['_Node']
tornado.template._ApplyBlock.generate(self,writer:'_CodeWriter')->None
tornado.template._ChunkList(self,chunks:List[_Node])
tornado.template._ChunkList.__init__(self,chunks:List[_Node])
tornado.template._ChunkList.each_child(self)->Iterable['_Node']
tornado.template._ChunkList.generate(self,writer:'_CodeWriter')->None
tornado.template._CodeWriter(self,file:TextIO,named_blocks:Dict[str,_NamedBlock],loader:Optional[BaseLoader],current_template:Template)
tornado.template._CodeWriter.__init__(self,file:TextIO,named_blocks:Dict[str,_NamedBlock],loader:Optional[BaseLoader],current_template:Template)
tornado.template._CodeWriter.include(self,template:Template,line:int)->'ContextManager'
tornado.template._CodeWriter.indent(self)->'ContextManager'
tornado.template._CodeWriter.indent_size(self)->int
tornado.template._CodeWriter.write_line(self,line:str,line_number:int,indent:Optional[int]=None)->None
tornado.template._ControlBlock(self,statement:str,line:int,body:_Node)
tornado.template._ControlBlock.__init__(self,statement:str,line:int,body:_Node)
tornado.template._ControlBlock.each_child(self)->Iterable[_Node]
tornado.template._ControlBlock.generate(self,writer:'_CodeWriter')->None
tornado.template._Expression(self,expression:str,line:int,raw:bool=False)
tornado.template._Expression.__init__(self,expression:str,line:int,raw:bool=False)
tornado.template._Expression.generate(self,writer:'_CodeWriter')->None
tornado.template._ExtendsBlock(self,name:str)
tornado.template._ExtendsBlock.__init__(self,name:str)
tornado.template._File(self,template:Template,body:'_ChunkList')
tornado.template._File.__init__(self,template:Template,body:'_ChunkList')
tornado.template._File.each_child(self)->Iterable['_Node']
tornado.template._File.generate(self,writer:'_CodeWriter')->None
tornado.template._IncludeBlock(self,name:str,reader:'_TemplateReader',line:int)
tornado.template._IncludeBlock.__init__(self,name:str,reader:'_TemplateReader',line:int)
tornado.template._IncludeBlock.find_named_blocks(self,loader:Optional[BaseLoader],named_blocks:Dict[str,_NamedBlock])->None
tornado.template._IncludeBlock.generate(self,writer:'_CodeWriter')->None
tornado.template._IntermediateControlBlock(self,statement:str,line:int)
tornado.template._IntermediateControlBlock.__init__(self,statement:str,line:int)
tornado.template._IntermediateControlBlock.generate(self,writer:'_CodeWriter')->None
tornado.template._Module(self,expression:str,line:int)
tornado.template._Module.__init__(self,expression:str,line:int)
tornado.template._NamedBlock(self,name:str,body:_Node,template:Template,line:int)
tornado.template._NamedBlock.__init__(self,name:str,body:_Node,template:Template,line:int)
tornado.template._NamedBlock.each_child(self)->Iterable['_Node']
tornado.template._NamedBlock.find_named_blocks(self,loader:Optional[BaseLoader],named_blocks:Dict[str,'_NamedBlock'])->None
tornado.template._NamedBlock.generate(self,writer:'_CodeWriter')->None
tornado.template._Node(object)
tornado.template._Node.each_child(self)->Iterable['_Node']
tornado.template._Node.find_named_blocks(self,loader:Optional[BaseLoader],named_blocks:Dict[str,'_NamedBlock'])->None
tornado.template._Node.generate(self,writer:'_CodeWriter')->None
tornado.template._Statement(self,statement:str,line:int)
tornado.template._Statement.__init__(self,statement:str,line:int)
tornado.template._Statement.generate(self,writer:'_CodeWriter')->None
tornado.template._TemplateReader(self,name:str,text:str,whitespace:str)
tornado.template._TemplateReader.__getitem__(self,key:Union[int,slice])->str
tornado.template._TemplateReader.__init__(self,name:str,text:str,whitespace:str)
tornado.template._TemplateReader.__len__(self)->int
tornado.template._TemplateReader.__str__(self)->str
tornado.template._TemplateReader.consume(self,count:Optional[int]=None)->str
tornado.template._TemplateReader.find(self,needle:str,start:int=0,end:Optional[int]=None)->int
tornado.template._TemplateReader.raise_parse_error(self,msg:str)->None
tornado.template._TemplateReader.remaining(self)->int
tornado.template._Text(self,value:str,line:int,whitespace:str)
tornado.template._Text.__init__(self,value:str,line:int,whitespace:str)
tornado.template._Text.generate(self,writer:'_CodeWriter')->None
tornado.template._UnsetMarker
tornado.template._format_code(code:str)->str
tornado.template._parse(reader:_TemplateReader,template:Template,in_block:Optional[str]=None,in_loop:Optional[str]=None)->_ChunkList
tornado.template.filter_whitespace(mode:str,text:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/web.py----------------------------------------
A:tornado.web._ARG_DEFAULT->_ArgDefaultMarker()
A:tornado.web._template_loader_lock->threading.Lock()
A:tornado.web._remove_control_chars_regex->re.compile('[\\x00-\\x08\\x0e-\\x1f]')
A:tornado.web.self.ui->ObjectDict(((n, self._ui_method(m)) for (n, m) in application.ui_methods.items()))
A:tornado.web.self.ui['_tt_modules']->_UIModuleNamespace(self, application.ui_modules)
A:tornado.web.self._headers->tornado.httputil.HTTPHeaders({'Server': 'TornadoServer/%s' % tornado.version, 'Content-Type': 'text/html; charset=UTF-8', 'Date': httputil.format_timestamp(time.time())})
A:tornado.web.self._reason->tornado.httputil.responses.get(status_code, 'Unknown')
A:tornado.web.self._headers[name]->self._convert_header_value(value)
A:tornado.web._INVALID_HEADER_CHAR_RE->re.compile('[\\x00-\\x1f]')
A:tornado.web.retval->utf8(value).decode('latin1')
A:tornado.web.args->self._get_arguments(name, source, strip=strip)
A:tornado.web.s->s.strip().strip()
A:tornado.web.name->tornado.escape.native_str(name)
A:tornado.web.value->utf8(value)
A:tornado.web.self._new_cookie->http.cookies.SimpleCookie()
A:tornado.web.morsel['expires']->tornado.httputil.format_timestamp(expires)
A:tornado.web.morsel['max-age']->str(max_age)
A:tornado.web.chunk->self._gzip_value.getvalue()
A:tornado.web.html->self.render_string(template_name, **kwargs)
A:tornado.web.embed_part->module.embedded_css()
A:tornado.web.file_part->module.css_files()
A:tornado.web.head_part->module.html_head()
A:tornado.web.body_part->module.html_body()
A:tornado.web.js->self.render_linked_js(js_files)
A:tornado.web.sloc->self.render_string(template_name, **kwargs).rindex(b'</body>')
A:tornado.web.js_bytes->self.render_embed_js(js_embed)
A:tornado.web.css->self.render_linked_css(css_files)
A:tornado.web.hloc->self.render_string(template_name, **kwargs).index(b'</body>')
A:tornado.web.css_bytes->self.render_embed_css(css_embed)
A:tornado.web.unique_paths->set()
A:tornado.web.path->self.static_url(path)
A:tornado.web.template_path->os.path.dirname(frame.f_code.co_filename)
A:tornado.web.frame->sys._getframe(0)
A:tornado.web.loader->self.create_template_loader(template_path)
A:tornado.web.t->self.create_template_loader(template_path).load(template_name)
A:tornado.web.namespace->dict(handler=self, request=self.request, current_user=self.current_user, locale=self.locale, _=self.locale.translate, pgettext=self.locale.pgettext, static_url=self.static_url, xsrf_form_html=self.xsrf_form_html, reverse_url=self.reverse_url)
A:tornado.web.(self._status_code, self._headers, chunk)->transform.transform_first_chunk(self._status_code, self._headers, chunk, include_footers)
A:tornado.web.start_line->tornado.httputil.ResponseStartLine('', self._status_code, self._reason)
A:tornado.web.future->self.flush(include_footers=True)
A:tornado.web.content_length->sum((len(part) for part in self._write_buffer))
A:tornado.web.reason->kwargs.get('reason')
A:tornado.web.loc->self.get_user_locale()
A:tornado.web.self._locale->self.get_browser_locale()
A:tornado.web.languages->self.request.headers['Accept-Language'].split(',')
A:tornado.web.parts->utf8(value).split(b'|')
A:tornado.web.score->float(parts[1].strip()[2:])
A:tornado.web.self._current_user->self.get_current_user()
A:tornado.web.(version, token, timestamp)->self._decode_xsrf_token(cookie)
A:tornado.web.output_version->self.settings.get('xsrf_cookie_version', 2)
A:tornado.web.cookie_kwargs->self.settings.get('xsrf_cookie_kwargs', {})
A:tornado.web.self._xsrf_token->b'|'.join([b'2', binascii.b2a_hex(mask), binascii.b2a_hex(_websocket_mask(mask, token)), utf8(str(int(timestamp)))])
A:tornado.web.mask->binascii.a2b_hex(utf8(mask_str))
A:tornado.web.cookie_name->self.settings.get('xsrf_cookie_name', '_xsrf')
A:tornado.web.cookie->self.get_cookie(cookie_name)
A:tornado.web.token->utf8(cookie)
A:tornado.web.timestamp->int(timestamp_bytes)
A:tornado.web.m->re.compile(b'^([1-9][0-9]*)\\|(.*)$').match(value)
A:tornado.web.version->_get_version(value)
A:tornado.web.(_, mask_str, masked_token, timestamp_str)->self.get_cookie(cookie_name).split('|')
A:tornado.web.(_, token, _)->self._decode_xsrf_token(token)
A:tornado.web.(_, expected_token, _)->self._get_raw_xsrf_token()
A:tornado.web.include_host->getattr(self, 'include_host', False)
A:tornado.web.hasher->hashlib.sha512()
A:tornado.web.etag->self.compute_etag()
A:tornado.web.computed_etag->utf8(self._headers.get('Etag', ''))
A:tornado.web.etags->re.findall(b'\\*|(?:W/)?"[^"]*"', utf8(self.request.headers.get('If-None-Match', '')))
A:tornado.web.self.path_kwargs->dict(((k, self.decode_argument(v, name=k)) for (k, v) in kwargs.items()))
A:tornado.web.result->method(*self.path_args, **self.path_kwargs)
A:tornado.web.method->getattr(self, self.request.method.lower())
A:tornado.web.self._active_modules[name]->module(self)
A:tornado.web.rendered->self._active_modules[name].render(*args, **kwargs)
A:tornado.web._RequestHandlerType->TypeVar('_RequestHandlerType', bound=RequestHandler)
A:tornado.web.uri->self.request.path.rstrip('/')
A:tornado.web.rule->Rule(host_matcher, _ApplicationRouter(self, host_handlers))
A:tornado.web.rule.target->_ApplicationRouter(self.application, rule.target)
A:tornado.web.handlers->list(handlers or [])
A:tornado.web.static_url_prefix->settings.get('static_url_prefix', '/static/')
A:tornado.web.static_handler_class->self.application.settings.get('static_handler_class', StaticFileHandler)
A:tornado.web.static_handler_args->settings.get('static_handler_args', {})
A:tornado.web.self.wildcard_router->_ApplicationRouter(self, handlers)
A:tornado.web.self.default_router->_ApplicationRouter(self, [Rule(AnyMatches(), self.wildcard_router)])
A:tornado.web.server->HTTPServer(self, **kwargs)
A:tornado.web.host_matcher->HostMatches(host_pattern)
A:tornado.web.dispatcher->self.find_handler(request)
A:tornado.web.route->self.default_router.find_handler(request)
A:tornado.web.reversed_url->self.default_router.reverse_url(name, *args)
A:tornado.web.self.stream_request_body->_has_stream_request_body(self.handler_class)
A:tornado.web.self.request._body_future->Future()
A:tornado.web.self.request.body->b''.join(self.chunks)
A:tornado.web.self.handler->self.handler_class(self.application, self.request, **self.handler_kwargs)
A:tornado.web.self.handler._prepared_future->Future()
A:tornado.web.fut->tornado.gen.convert_yielded(self.handler._execute(transforms, *self.path_args, **self.path_kwargs))
A:tornado.web.self.reason->kwargs.get('reason', None)
A:tornado.web.self.log_message->log_message.replace('%', '%%')
A:tornado.web.to_url->tornado.httputil.url_concat(to_url, list(httputil.qs_to_qsl(self.request.query_arguments)))
A:tornado.web._lock->threading.Lock()
A:tornado.web.self.path->self.parse_url_path(path)
A:tornado.web.absolute_path->os.path.join(absolute_path, self.default_filename)
A:tornado.web.self.absolute_path->self.validate_absolute_path(self.root, absolute_path)
A:tornado.web.self.modified->self.get_modified_time()
A:tornado.web.range_header->self.request.headers.get('Range')
A:tornado.web.request_range->tornado.httputil._parse_request_range(range_header)
A:tornado.web.size->self.get_content_size()
A:tornado.web.content->self.get_content(self.absolute_path, start, end)
A:tornado.web.version_hash->cls.get_version(settings, path)
A:tornado.web.content_type->self.get_content_type()
A:tornado.web.cache_time->self.get_cache_time(self.path, self.modified, content_type)
A:tornado.web.ims_value->self.request.headers.get('If-Modified-Since')
A:tornado.web.date_tuple->email.utils.parsedate(ims_value)
A:tornado.web.if_since->datetime.datetime(*date_tuple[:6])
A:tornado.web.abspath->os.path.abspath(os.path.join(root, path))
A:tornado.web.root->os.path.abspath(root)
A:tornado.web.data->cls.get_content(abspath)
A:tornado.web.self._stat_result->os.stat(self.absolute_path)
A:tornado.web.stat_result->self._stat()
A:tornado.web.modified->datetime.datetime.utcfromtimestamp(int(stat_result.st_mtime))
A:tornado.web.(mime_type, encoding)->mimetypes.guess_type(self.absolute_path)
A:tornado.web.url_path->url_path.replace('/', os.path.sep).replace('/', os.path.sep)
A:tornado.web.abs_path->cls.get_absolute_path(settings['static_path'], path)
A:tornado.web.hashes[abs_path]->cls.get_content_version(abs_path)
A:tornado.web.hsh->hashes.get(abs_path)
A:tornado.web.CONTENT_TYPES->set(['application/javascript', 'application/x-javascript', 'application/xml', 'application/atom+xml', 'application/json', 'application/xhtml+xml', 'image/svg+xml'])
A:tornado.web.self._gzip_value->BytesIO()
A:tornado.web.self._gzip_file->gzip.GzipFile(mode='w', fileobj=self._gzip_value, compresslevel=self.GZIP_LEVEL)
A:tornado.web.headers['Content-Length']->str(len(chunk))
A:tornado.web.url->self.get_login_url()
A:tornado.web.next_url->self.request.full_url()
A:tornado.web.signature->_create_signature_v1(secret, name, parts[0], parts[1])
A:tornado.web.to_sign->b'|'.join([b'2', format_field(str(key_version or 0)), format_field(timestamp), format_field(name), format_field(value), b''])
A:tornado.web._signed_value_version_re->re.compile(b'^([1-9][0-9]*)\\|(.*)$')
A:tornado.web.(length, _, rest)->s.strip().strip().partition(b':')
A:tornado.web.n->int(length)
A:tornado.web.(key_version, rest)->_consume_field(rest)
A:tornado.web.(timestamp, rest)->_consume_field(rest)
A:tornado.web.(name_field, rest)->_consume_field(rest)
A:tornado.web.(value_field, passed_sig)->_consume_field(rest)
A:tornado.web.(key_version, timestamp_bytes, name_field, value_field, passed_sig)->_decode_fields_v2(value)
A:tornado.web.expected_sig->_create_signature_v2(secret, signed_string)
A:tornado.web.(key_version, _, _, _, _)->_decode_fields_v2(value)
A:tornado.web.hash->hmac.new(utf8(secret), digestmod=hashlib.sha256)
tornado.web.Application(self,handlers:Optional[_RuleList]=None,default_host:Optional[str]=None,transforms:Optional[List[Type['OutputTransform']]]=None,**settings:Any)
tornado.web.Application.__init__(self,handlers:Optional[_RuleList]=None,default_host:Optional[str]=None,transforms:Optional[List[Type['OutputTransform']]]=None,**settings:Any)
tornado.web.Application._load_ui_methods(self,methods:Any)->None
tornado.web.Application._load_ui_modules(self,modules:Any)->None
tornado.web.Application.add_handlers(self,host_pattern:str,host_handlers:_RuleList)->None
tornado.web.Application.add_transform(self,transform_class:Type['OutputTransform'])->None
tornado.web.Application.find_handler(self,request:httputil.HTTPServerRequest,**kwargs:Any)->'_HandlerDelegate'
tornado.web.Application.get_handler_delegate(self,request:httputil.HTTPServerRequest,target_class:Type[RequestHandler],target_kwargs:Optional[Dict[str,Any]]=None,path_args:Optional[List[bytes]]=None,path_kwargs:Optional[Dict[str,bytes]]=None)->'_HandlerDelegate'
tornado.web.Application.listen(self,port:int,address:Optional[str]=None,*,family:socket.AddressFamily=socket.AF_UNSPEC,backlog:int=tornado.netutil._DEFAULT_BACKLOG,flags:Optional[int]=None,reuse_port:bool=False,**kwargs:Any)->HTTPServer
tornado.web.Application.log_request(self,handler:RequestHandler)->None
tornado.web.Application.reverse_url(self,name:str,*args:Any)->str
tornado.web.ErrorHandler(RequestHandler)
tornado.web.ErrorHandler.check_xsrf_cookie(self)->None
tornado.web.ErrorHandler.initialize(self,status_code:int)->None
tornado.web.ErrorHandler.prepare(self)->None
tornado.web.FallbackHandler(RequestHandler)
tornado.web.FallbackHandler.initialize(self,fallback:Callable[[httputil.HTTPServerRequest],None])->None
tornado.web.FallbackHandler.prepare(self)->None
tornado.web.Finish(Exception)
tornado.web.GZipContentEncoding(self,request:httputil.HTTPServerRequest)
tornado.web.GZipContentEncoding.__init__(self,request:httputil.HTTPServerRequest)
tornado.web.GZipContentEncoding._compressible_type(self,ctype:str)->bool
tornado.web.GZipContentEncoding.transform_chunk(self,chunk:bytes,finishing:bool)->bytes
tornado.web.GZipContentEncoding.transform_first_chunk(self,status_code:int,headers:httputil.HTTPHeaders,chunk:bytes,finishing:bool)->Tuple[int, httputil.HTTPHeaders, bytes]
tornado.web.HTTPError(self,status_code:int=500,log_message:Optional[str]=None,*args:Any,**kwargs:Any)
tornado.web.HTTPError.__init__(self,status_code:int=500,log_message:Optional[str]=None,*args:Any,**kwargs:Any)
tornado.web.HTTPError.__str__(self)->str
tornado.web.MissingArgumentError(self,arg_name:str)
tornado.web.MissingArgumentError.__init__(self,arg_name:str)
tornado.web.OutputTransform(self,request:httputil.HTTPServerRequest)
tornado.web.OutputTransform.__init__(self,request:httputil.HTTPServerRequest)
tornado.web.OutputTransform.transform_chunk(self,chunk:bytes,finishing:bool)->bytes
tornado.web.OutputTransform.transform_first_chunk(self,status_code:int,headers:httputil.HTTPHeaders,chunk:bytes,finishing:bool)->Tuple[int, httputil.HTTPHeaders, bytes]
tornado.web.RedirectHandler(RequestHandler)
tornado.web.RedirectHandler.get(self,*args:Any,**kwargs:Any)->None
tornado.web.RedirectHandler.initialize(self,url:str,permanent:bool=True)->None
tornado.web.RequestHandler(self,application:'Application',request:httputil.HTTPServerRequest,**kwargs:Any)
tornado.web.RequestHandler.__init__(self,application:'Application',request:httputil.HTTPServerRequest,**kwargs:Any)
tornado.web.RequestHandler._break_cycles(self)->None
tornado.web.RequestHandler._clear_representation_headers(self)->None
tornado.web.RequestHandler._convert_header_value(self,value:_HeaderTypes)->str
tornado.web.RequestHandler._decode_xsrf_token(self,cookie:str)->Tuple[Optional[int], Optional[bytes], Optional[float]]
tornado.web.RequestHandler._execute(self,transforms:List['OutputTransform'],*args:bytes,**kwargs:bytes)->None
tornado.web.RequestHandler._get_argument(self,name:str,default:Union[None,str,_ArgDefaultMarker],source:Dict[str,List[bytes]],strip:bool=True)->Optional[str]
tornado.web.RequestHandler._get_arguments(self,name:str,source:Dict[str,List[bytes]],strip:bool=True)->List[str]
tornado.web.RequestHandler._get_raw_xsrf_token(self)->Tuple[Optional[int], bytes, float]
tornado.web.RequestHandler._handle_request_exception(self,e:BaseException)->None
tornado.web.RequestHandler._initialize(self)->None
tornado.web.RequestHandler._log(self)->None
tornado.web.RequestHandler._request_summary(self)->str
tornado.web.RequestHandler._ui_method(self,method:Callable[...,str])->Callable[..., str]
tornado.web.RequestHandler._ui_module(self,name:str,module:Type['UIModule'])->Callable[..., str]
tornado.web.RequestHandler._unimplemented_method(self,*args:str,**kwargs:str)->None
tornado.web.RequestHandler.add_header(self,name:str,value:_HeaderTypes)->None
tornado.web.RequestHandler.check_etag_header(self)->bool
tornado.web.RequestHandler.check_xsrf_cookie(self)->None
tornado.web.RequestHandler.clear(self)->None
tornado.web.RequestHandler.clear_all_cookies(self,**kwargs:Any)->None
tornado.web.RequestHandler.clear_cookie(self,name:str,**kwargs:Any)->None
tornado.web.RequestHandler.clear_header(self,name:str)->None
tornado.web.RequestHandler.compute_etag(self)->Optional[str]
tornado.web.RequestHandler.cookies(self)->Dict[str, http.cookies.Morsel]
tornado.web.RequestHandler.create_signed_value(self,name:str,value:Union[str,bytes],version:Optional[int]=None)->bytes
tornado.web.RequestHandler.create_template_loader(self,template_path:str)->template.BaseLoader
tornado.web.RequestHandler.current_user(self)->Any
tornado.web.RequestHandler.current_user(self,value:Any)->None
tornado.web.RequestHandler.data_received(self,chunk:bytes)->Optional[Awaitable[None]]
tornado.web.RequestHandler.decode_argument(self,value:bytes,name:Optional[str]=None)->str
tornado.web.RequestHandler.detach(self)->iostream.IOStream
tornado.web.RequestHandler.finish(self,chunk:Optional[Union[str,bytes,dict]]=None)->'Future[None]'
tornado.web.RequestHandler.flush(self,include_footers:bool=False)->'Future[None]'
tornado.web.RequestHandler.get_argument(self,name:str,default:Union[None,str,_ArgDefaultMarker]=_ARG_DEFAULT,strip:bool=True)->Optional[str]
tornado.web.RequestHandler.get_arguments(self,name:str,strip:bool=True)->List[str]
tornado.web.RequestHandler.get_body_argument(self,name:str,default:Union[None,str,_ArgDefaultMarker]=_ARG_DEFAULT,strip:bool=True)->Optional[str]
tornado.web.RequestHandler.get_body_arguments(self,name:str,strip:bool=True)->List[str]
tornado.web.RequestHandler.get_browser_locale(self,default:str='en_US')->tornado.locale.Locale
tornado.web.RequestHandler.get_cookie(self,name:str,default:Optional[str]=None)->Optional[str]
tornado.web.RequestHandler.get_current_user(self)->Any
tornado.web.RequestHandler.get_login_url(self)->str
tornado.web.RequestHandler.get_query_argument(self,name:str,default:Union[None,str,_ArgDefaultMarker]=_ARG_DEFAULT,strip:bool=True)->Optional[str]
tornado.web.RequestHandler.get_query_arguments(self,name:str,strip:bool=True)->List[str]
tornado.web.RequestHandler.get_signed_cookie(self,name:str,value:Optional[str]=None,max_age_days:float=31,min_version:Optional[int]=None)->Optional[bytes]
tornado.web.RequestHandler.get_signed_cookie_key_version(self,name:str,value:Optional[str]=None)->Optional[int]
tornado.web.RequestHandler.get_status(self)->int
tornado.web.RequestHandler.get_template_namespace(self)->Dict[str, Any]
tornado.web.RequestHandler.get_template_path(self)->Optional[str]
tornado.web.RequestHandler.get_user_locale(self)->Optional[tornado.locale.Locale]
tornado.web.RequestHandler.locale(self)->tornado.locale.Locale
tornado.web.RequestHandler.locale(self,value:tornado.locale.Locale)->None
tornado.web.RequestHandler.log_exception(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[TracebackType])->None
tornado.web.RequestHandler.on_connection_close(self)->None
tornado.web.RequestHandler.on_finish(self)->None
tornado.web.RequestHandler.prepare(self)->Optional[Awaitable[None]]
tornado.web.RequestHandler.redirect(self,url:str,permanent:bool=False,status:Optional[int]=None)->None
tornado.web.RequestHandler.render(self,template_name:str,**kwargs:Any)->'Future[None]'
tornado.web.RequestHandler.render_embed_css(self,css_embed:Iterable[bytes])->bytes
tornado.web.RequestHandler.render_embed_js(self,js_embed:Iterable[bytes])->bytes
tornado.web.RequestHandler.render_linked_css(self,css_files:Iterable[str])->str
tornado.web.RequestHandler.render_linked_js(self,js_files:Iterable[str])->str
tornado.web.RequestHandler.render_string(self,template_name:str,**kwargs:Any)->bytes
tornado.web.RequestHandler.require_setting(self,name:str,feature:str='thisfeature')->None
tornado.web.RequestHandler.reverse_url(self,name:str,*args:Any)->str
tornado.web.RequestHandler.send_error(self,status_code:int=500,**kwargs:Any)->None
tornado.web.RequestHandler.set_cookie(self,name:str,value:Union[str,bytes],domain:Optional[str]=None,expires:Optional[Union[float,Tuple,datetime.datetime]]=None,path:str='/',expires_days:Optional[float]=None,*,max_age:Optional[int]=None,httponly:bool=False,secure:bool=False,samesite:Optional[str]=None,**kwargs:Any)->None
tornado.web.RequestHandler.set_default_headers(self)->None
tornado.web.RequestHandler.set_etag_header(self)->None
tornado.web.RequestHandler.set_header(self,name:str,value:_HeaderTypes)->None
tornado.web.RequestHandler.set_signed_cookie(self,name:str,value:Union[str,bytes],expires_days:Optional[float]=30,version:Optional[int]=None,**kwargs:Any)->None
tornado.web.RequestHandler.set_status(self,status_code:int,reason:Optional[str]=None)->None
tornado.web.RequestHandler.settings(self)->Dict[str, Any]
tornado.web.RequestHandler.static_url(self,path:str,include_host:Optional[bool]=None,**kwargs:Any)->str
tornado.web.RequestHandler.write(self,chunk:Union[str,bytes,dict])->None
tornado.web.RequestHandler.write_error(self,status_code:int,**kwargs:Any)->None
tornado.web.RequestHandler.xsrf_form_html(self)->str
tornado.web.RequestHandler.xsrf_token(self)->bytes
tornado.web.StaticFileHandler(RequestHandler)
tornado.web.StaticFileHandler._get_cached_version(cls,abs_path:str)->Optional[str]
tornado.web.StaticFileHandler._stat(self)->os.stat_result
tornado.web.StaticFileHandler.compute_etag(self)->Optional[str]
tornado.web.StaticFileHandler.get(self,path:str,include_body:bool=True)->None
tornado.web.StaticFileHandler.get_absolute_path(cls,root:str,path:str)->str
tornado.web.StaticFileHandler.get_cache_time(self,path:str,modified:Optional[datetime.datetime],mime_type:str)->int
tornado.web.StaticFileHandler.get_content(cls,abspath:str,start:Optional[int]=None,end:Optional[int]=None)->Generator[bytes, None, None]
tornado.web.StaticFileHandler.get_content_size(self)->int
tornado.web.StaticFileHandler.get_content_type(self)->str
tornado.web.StaticFileHandler.get_content_version(cls,abspath:str)->str
tornado.web.StaticFileHandler.get_modified_time(self)->Optional[datetime.datetime]
tornado.web.StaticFileHandler.get_version(cls,settings:Dict[str,Any],path:str)->Optional[str]
tornado.web.StaticFileHandler.head(self,path:str)->Awaitable[None]
tornado.web.StaticFileHandler.initialize(self,path:str,default_filename:Optional[str]=None)->None
tornado.web.StaticFileHandler.make_static_url(cls,settings:Dict[str,Any],path:str,include_version:bool=True)->str
tornado.web.StaticFileHandler.parse_url_path(self,url_path:str)->str
tornado.web.StaticFileHandler.reset(cls)->None
tornado.web.StaticFileHandler.set_extra_headers(self,path:str)->None
tornado.web.StaticFileHandler.set_headers(self)->None
tornado.web.StaticFileHandler.should_return_304(self)->bool
tornado.web.StaticFileHandler.validate_absolute_path(self,root:str,absolute_path:str)->Optional[str]
tornado.web.TemplateModule(self,handler:RequestHandler)
tornado.web.TemplateModule.__init__(self,handler:RequestHandler)
tornado.web.TemplateModule._get_resources(self,key:str)->Iterable[str]
tornado.web.TemplateModule.css_files(self)->Iterable[str]
tornado.web.TemplateModule.embedded_css(self)->str
tornado.web.TemplateModule.embedded_javascript(self)->str
tornado.web.TemplateModule.html_body(self)->str
tornado.web.TemplateModule.html_head(self)->str
tornado.web.TemplateModule.javascript_files(self)->Iterable[str]
tornado.web.TemplateModule.render(self,path:str,**kwargs:Any)->bytes
tornado.web.UIModule(self,handler:RequestHandler)
tornado.web.UIModule.__init__(self,handler:RequestHandler)
tornado.web.UIModule.css_files(self)->Optional[Iterable[str]]
tornado.web.UIModule.current_user(self)->Any
tornado.web.UIModule.embedded_css(self)->Optional[str]
tornado.web.UIModule.embedded_javascript(self)->Optional[str]
tornado.web.UIModule.html_body(self)->Optional[str]
tornado.web.UIModule.html_head(self)->Optional[str]
tornado.web.UIModule.javascript_files(self)->Optional[Iterable[str]]
tornado.web.UIModule.render(self,*args:Any,**kwargs:Any)->str
tornado.web.UIModule.render_string(self,path:str,**kwargs:Any)->bytes
tornado.web._ApplicationRouter(self,application:'Application',rules:Optional[_RuleList]=None)
tornado.web._ApplicationRouter.__init__(self,application:'Application',rules:Optional[_RuleList]=None)
tornado.web._ApplicationRouter.get_target_delegate(self,target:Any,request:httputil.HTTPServerRequest,**target_params:Any)->Optional[httputil.HTTPMessageDelegate]
tornado.web._ApplicationRouter.process_rule(self,rule:Rule)->Rule
tornado.web._ArgDefaultMarker
tornado.web._HandlerDelegate(self,application:Application,request:httputil.HTTPServerRequest,handler_class:Type[RequestHandler],handler_kwargs:Optional[Dict[str,Any]],path_args:Optional[List[bytes]],path_kwargs:Optional[Dict[str,bytes]])
tornado.web._HandlerDelegate.__init__(self,application:Application,request:httputil.HTTPServerRequest,handler_class:Type[RequestHandler],handler_kwargs:Optional[Dict[str,Any]],path_args:Optional[List[bytes]],path_kwargs:Optional[Dict[str,bytes]])
tornado.web._HandlerDelegate.data_received(self,data:bytes)->Optional[Awaitable[None]]
tornado.web._HandlerDelegate.execute(self)->Optional[Awaitable[None]]
tornado.web._HandlerDelegate.finish(self)->None
tornado.web._HandlerDelegate.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->Optional[Awaitable[None]]
tornado.web._HandlerDelegate.on_connection_close(self)->None
tornado.web._UIModuleNamespace(self,handler:RequestHandler,ui_modules:Dict[str,Type[UIModule]])
tornado.web._UIModuleNamespace.__getattr__(self,key:str)->Callable[..., str]
tornado.web._UIModuleNamespace.__getitem__(self,key:str)->Callable[..., str]
tornado.web._UIModuleNamespace.__init__(self,handler:RequestHandler,ui_modules:Dict[str,Type[UIModule]])
tornado.web._create_signature_v1(secret:Union[str,bytes],*parts:Union[str,bytes])->bytes
tornado.web._create_signature_v2(secret:Union[str,bytes],s:bytes)->bytes
tornado.web._decode_fields_v2(value:bytes)->Tuple[int, bytes, bytes, bytes, bytes]
tornado.web._decode_signed_value_v1(secret:Union[str,bytes],name:str,value:bytes,max_age_days:float,clock:Callable[[],float])->Optional[bytes]
tornado.web._decode_signed_value_v2(secret:_CookieSecretTypes,name:str,value:bytes,max_age_days:float,clock:Callable[[],float])->Optional[bytes]
tornado.web._get_version(value:bytes)->int
tornado.web._has_stream_request_body(cls:Type[RequestHandler])->bool
tornado.web._linkify(UIModule)
tornado.web._linkify.render(self,text:str,**kwargs:Any)->str
tornado.web._xsrf_form_html(UIModule)
tornado.web._xsrf_form_html.render(self)->str
tornado.web.addslash(method:Callable[...,Optional[Awaitable[None]]])->Callable[..., Optional[Awaitable[None]]]
tornado.web.authenticated(method:Callable[...,Optional[Awaitable[None]]])->Callable[..., Optional[Awaitable[None]]]
tornado.web.create_signed_value(secret:_CookieSecretTypes,name:str,value:Union[str,bytes],version:Optional[int]=None,clock:Optional[Callable[[],float]]=None,key_version:Optional[int]=None)->bytes
tornado.web.decode_signed_value(secret:_CookieSecretTypes,name:str,value:Union[None,str,bytes],max_age_days:float=31,clock:Optional[Callable[[],float]]=None,min_version:Optional[int]=None)->Optional[bytes]
tornado.web.get_signature_key_version(value:Union[str,bytes])->Optional[int]
tornado.web.is_absolute(path:str)->bool
tornado.web.removeslash(method:Callable[...,Optional[Awaitable[None]]])->Callable[..., Optional[Awaitable[None]]]
tornado.web.stream_request_body(cls:Type[_RequestHandlerType])->Type[_RequestHandlerType]


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/http1connection.py----------------------------------------
A:tornado.http1connection.params->HTTP1ConnectionParameters()
A:tornado.http1connection.self._finish_future->Future()
A:tornado.http1connection.delegate->_GzipMessageDelegate(delegate, self.params.chunk_size)
A:tornado.http1connection.header_future->self.stream.read_until_regex(b'\r?\n\r?\n', max_bytes=self.params.max_header_size)
A:tornado.http1connection.(start_line_str, headers)->self._parse_headers(header_data)
A:tornado.http1connection.resp_start_line->tornado.httputil.parse_response_start_line(start_line_str)
A:tornado.http1connection.req_start_line->tornado.httputil.parse_request_start_line(start_line_str)
A:tornado.http1connection.header_recv_future->_GzipMessageDelegate(delegate, self.params.chunk_size).headers_received(start_line, headers)
A:tornado.http1connection.body_future->self._read_body(resp_start_line.code if self.is_client else 0, headers, delegate)
A:tornado.http1connection.self._expected_content_remaining->parse_int(headers['Content-Length'])
A:tornado.http1connection.futureself._write_future->Future()
A:tornado.http1connection.self._pending_write->self.stream.write(b'0\r\n\r\n')
A:tornado.http1connection.exc->future.exception()
A:tornado.http1connection.connection_header->connection_header.lower().lower()
A:tornado.http1connection.data_str->native_str(data.decode('latin1')).lstrip('\r\n')
A:tornado.http1connection.eol->native_str(data.decode('latin1')).lstrip('\r\n').find('\n')
A:tornado.http1connection.start_line->data_str[:eol].rstrip('\r')
A:tornado.http1connection.headers->tornado.httputil.HTTPHeaders.parse(data_str[eol:])
A:tornado.http1connection.pieces->re.split(',\\s*', headers['Content-Length'])
A:tornado.http1connection.ret->self._delegate.data_received(chunk)
A:tornado.http1connection.chunk_len->parse_hex_int(native_str(chunk_len_str[:-2]))
A:tornado.http1connection.self._decompressor->GzipDecompressor()
A:tornado.http1connection.decompressed->self._decompressor.decompress(compressed_data, self._chunk_size)
A:tornado.http1connection.tail->self._decompressor.flush()
A:tornado.http1connection.fut->tornado.gen.convert_yielded(self._server_request_loop(delegate))
A:tornado.http1connection.conn->HTTP1Connection(self.stream, False, self.params, self.context)
A:tornado.http1connection.request_delegate->_GzipMessageDelegate(delegate, self.params.chunk_size).start_request(self, conn)
A:tornado.http1connection.DIGITS->re.compile('[0-9]+')
A:tornado.http1connection.HEXDIGITS->re.compile('[0-9a-fA-F]+')
tornado.http1connection.HTTP1Connection(self,stream:iostream.IOStream,is_client:bool,params:Optional[HTTP1ConnectionParameters]=None,context:Optional[object]=None)
tornado.http1connection.HTTP1Connection.__init__(self,stream:iostream.IOStream,is_client:bool,params:Optional[HTTP1ConnectionParameters]=None,context:Optional[object]=None)
tornado.http1connection.HTTP1Connection._can_keep_alive(self,start_line:httputil.RequestStartLine,headers:httputil.HTTPHeaders)->bool
tornado.http1connection.HTTP1Connection._clear_callbacks(self)->None
tornado.http1connection.HTTP1Connection._finish_request(self,future:'Optional[Future[None]]')->None
tornado.http1connection.HTTP1Connection._format_chunk(self,chunk:bytes)->bytes
tornado.http1connection.HTTP1Connection._on_connection_close(self)->None
tornado.http1connection.HTTP1Connection._on_write_complete(self,future:'Future[None]')->None
tornado.http1connection.HTTP1Connection._parse_headers(self,data:bytes)->Tuple[str, httputil.HTTPHeaders]
tornado.http1connection.HTTP1Connection._read_body(self,code:int,headers:httputil.HTTPHeaders,delegate:httputil.HTTPMessageDelegate)->Optional[Awaitable[None]]
tornado.http1connection.HTTP1Connection._read_body_until_close(self,delegate:httputil.HTTPMessageDelegate)->None
tornado.http1connection.HTTP1Connection._read_chunked_body(self,delegate:httputil.HTTPMessageDelegate)->None
tornado.http1connection.HTTP1Connection._read_fixed_body(self,content_length:int,delegate:httputil.HTTPMessageDelegate)->None
tornado.http1connection.HTTP1Connection._read_message(self,delegate:httputil.HTTPMessageDelegate)->bool
tornado.http1connection.HTTP1Connection.close(self)->None
tornado.http1connection.HTTP1Connection.detach(self)->iostream.IOStream
tornado.http1connection.HTTP1Connection.finish(self)->None
tornado.http1connection.HTTP1Connection.read_response(self,delegate:httputil.HTTPMessageDelegate)->Awaitable[bool]
tornado.http1connection.HTTP1Connection.set_body_timeout(self,timeout:float)->None
tornado.http1connection.HTTP1Connection.set_close_callback(self,callback:Optional[Callable[[],None]])->None
tornado.http1connection.HTTP1Connection.set_max_body_size(self,max_body_size:int)->None
tornado.http1connection.HTTP1Connection.write(self,chunk:bytes)->'Future[None]'
tornado.http1connection.HTTP1Connection.write_headers(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders,chunk:Optional[bytes]=None)->'Future[None]'
tornado.http1connection.HTTP1ConnectionParameters(self,no_keep_alive:bool=False,chunk_size:Optional[int]=None,max_header_size:Optional[int]=None,header_timeout:Optional[float]=None,max_body_size:Optional[int]=None,body_timeout:Optional[float]=None,decompress:bool=False)
tornado.http1connection.HTTP1ConnectionParameters.__init__(self,no_keep_alive:bool=False,chunk_size:Optional[int]=None,max_header_size:Optional[int]=None,header_timeout:Optional[float]=None,max_body_size:Optional[int]=None,body_timeout:Optional[float]=None,decompress:bool=False)
tornado.http1connection.HTTP1ServerConnection(self,stream:iostream.IOStream,params:Optional[HTTP1ConnectionParameters]=None,context:Optional[object]=None)
tornado.http1connection.HTTP1ServerConnection.__init__(self,stream:iostream.IOStream,params:Optional[HTTP1ConnectionParameters]=None,context:Optional[object]=None)
tornado.http1connection.HTTP1ServerConnection._server_request_loop(self,delegate:httputil.HTTPServerConnectionDelegate)->None
tornado.http1connection.HTTP1ServerConnection.close(self)->None
tornado.http1connection.HTTP1ServerConnection.start_serving(self,delegate:httputil.HTTPServerConnectionDelegate)->None
tornado.http1connection._ExceptionLoggingContext(self,logger:logging.Logger)
tornado.http1connection._ExceptionLoggingContext.__enter__(self)->None
tornado.http1connection._ExceptionLoggingContext.__exit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:types.TracebackType)->None
tornado.http1connection._ExceptionLoggingContext.__init__(self,logger:logging.Logger)
tornado.http1connection._GzipMessageDelegate(self,delegate:httputil.HTTPMessageDelegate,chunk_size:int)
tornado.http1connection._GzipMessageDelegate.__init__(self,delegate:httputil.HTTPMessageDelegate,chunk_size:int)
tornado.http1connection._GzipMessageDelegate.data_received(self,chunk:bytes)->None
tornado.http1connection._GzipMessageDelegate.finish(self)->None
tornado.http1connection._GzipMessageDelegate.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->Optional[Awaitable[None]]
tornado.http1connection._GzipMessageDelegate.on_connection_close(self)->None
tornado.http1connection._QuietException(self)
tornado.http1connection._QuietException.__init__(self)
tornado.http1connection.parse_hex_int(s:str)->int
tornado.http1connection.parse_int(s:str)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/_locale_data.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/ioloop.py----------------------------------------
A:tornado.ioloop._T->TypeVar('_T')
A:tornado.ioloop._S->TypeVar('_S', bound=_Selectable)
A:tornado.ioloop._ioloop_for_asyncio->dict()
A:tornado.ioloop.impl->import_object(impl)
A:tornado.ioloop.loop->asyncio.new_event_loop()
A:tornado.ioloop.current->AsyncIOMainLoop()
A:tornado.ioloop.old->IOLoop.current(instance=False)
A:tornado.ioloop.result->convert_yielded(result)
A:tornado.ioloop.fut->Future()
A:tornado.ioloop.timeout_handle->self.add_timeout(self.time() + timeout, timeout_callback)
A:tornado.ioloop.self._executor->concurrent.futures.ThreadPoolExecutor(max_workers=cpu_count() * 5)
A:tornado.ioloop.c_future->executor.submit(func, *args)
A:tornado.ioloop.t_future->Future()
A:tornado.ioloop.ret->tornado.gen.convert_yielded(ret)
A:tornado.ioloop.self.io_loop->IOLoop.current()
A:tornado.ioloop.self._next_timeout->self.io_loop.time()
A:tornado.ioloop.val->self.callback()
A:tornado.ioloop.self._timeout->self.io_loop.add_timeout(self._next_timeout, self._run)
tornado.ioloop.IOLoop(Configurable)
tornado.ioloop.IOLoop._clear_current()->None
tornado.ioloop.IOLoop._clear_current_hook(self)->None
tornado.ioloop.IOLoop._discard_future_result(self,future:Future)->None
tornado.ioloop.IOLoop._make_current(self)->None
tornado.ioloop.IOLoop._run_callback(self,callback:Callable[[],Any])->None
tornado.ioloop.IOLoop.add_callback(self,callback:Callable,*args:Any,**kwargs:Any)->None
tornado.ioloop.IOLoop.add_callback_from_signal(self,callback:Callable,*args:Any,**kwargs:Any)->None
tornado.ioloop.IOLoop.add_future(self,future:'Union[Future[_T],concurrent.futures.Future[_T]]',callback:Callable[['Future[_T]'],None])->None
tornado.ioloop.IOLoop.add_handler(self,fd:Union[int,_Selectable],handler:Callable[...,None],events:int)->None
tornado.ioloop.IOLoop.add_timeout(self,deadline:Union[float,datetime.timedelta],callback:Callable,*args:Any,**kwargs:Any)->object
tornado.ioloop.IOLoop.call_at(self,when:float,callback:Callable,*args:Any,**kwargs:Any)->object
tornado.ioloop.IOLoop.call_later(self,delay:float,callback:Callable,*args:Any,**kwargs:Any)->object
tornado.ioloop.IOLoop.clear_current()->None
tornado.ioloop.IOLoop.clear_instance()->None
tornado.ioloop.IOLoop.close(self,all_fds:bool=False)->None
tornado.ioloop.IOLoop.close_fd(self,fd:Union[int,_Selectable])->None
tornado.ioloop.IOLoop.configurable_base(cls)->Type[Configurable]
tornado.ioloop.IOLoop.configurable_default(cls)->Type[Configurable]
tornado.ioloop.IOLoop.configure(cls,impl:'Union[None,str,Type[Configurable]]',**kwargs:Any)->None
tornado.ioloop.IOLoop.current(instance:bool=True)->Optional['IOLoop']
tornado.ioloop.IOLoop.initialize(self,make_current:bool=True)->None
tornado.ioloop.IOLoop.install(self)->None
tornado.ioloop.IOLoop.instance()->'IOLoop'
tornado.ioloop.IOLoop.make_current(self)->None
tornado.ioloop.IOLoop.remove_handler(self,fd:Union[int,_Selectable])->None
tornado.ioloop.IOLoop.remove_timeout(self,timeout:object)->None
tornado.ioloop.IOLoop.run_in_executor(self,executor:Optional[concurrent.futures.Executor],func:Callable[...,_T],*args:Any)->Awaitable[_T]
tornado.ioloop.IOLoop.run_sync(self,func:Callable,timeout:Optional[float]=None)->Any
tornado.ioloop.IOLoop.set_default_executor(self,executor:concurrent.futures.Executor)->None
tornado.ioloop.IOLoop.spawn_callback(self,callback:Callable,*args:Any,**kwargs:Any)->None
tornado.ioloop.IOLoop.split_fd(self,fd:Union[int,_Selectable])->Tuple[int, Union[int, _Selectable]]
tornado.ioloop.IOLoop.start(self)->None
tornado.ioloop.IOLoop.stop(self)->None
tornado.ioloop.IOLoop.time(self)->float
tornado.ioloop.IOLoop.update_handler(self,fd:Union[int,_Selectable],events:int)->None
tornado.ioloop.PeriodicCallback(self,callback:Callable[[],Optional[Awaitable]],callback_time:Union[datetime.timedelta,float],jitter:float=0)
tornado.ioloop.PeriodicCallback.__init__(self,callback:Callable[[],Optional[Awaitable]],callback_time:Union[datetime.timedelta,float],jitter:float=0)
tornado.ioloop.PeriodicCallback._run(self)->None
tornado.ioloop.PeriodicCallback._schedule_next(self)->None
tornado.ioloop.PeriodicCallback._update_next(self,current_time:float)->None
tornado.ioloop.PeriodicCallback.is_running(self)->bool
tornado.ioloop.PeriodicCallback.start(self)->None
tornado.ioloop.PeriodicCallback.stop(self)->None
tornado.ioloop._Selectable(Protocol)
tornado.ioloop._Selectable.close(self)->None
tornado.ioloop._Selectable.fileno(self)->int
tornado.ioloop._Timeout(self,deadline:float,callback:Callable[[],None],io_loop:IOLoop)
tornado.ioloop._Timeout.__init__(self,deadline:float,callback:Callable[[],None],io_loop:IOLoop)
tornado.ioloop._Timeout.__le__(self,other:'_Timeout')->bool
tornado.ioloop._Timeout.__lt__(self,other:'_Timeout')->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/options.py----------------------------------------
A:tornado.options.name->self._normalize_name(name)
A:tornado.options.normalized->self._normalize_name(name)
A:tornado.options.frame->sys._getframe(0)
A:tornado.options.option->_Option(name, file_name=file_name, default=default, type=type, help=help, metavar=metavar, multiple=multiple, group_name=group_name, callback=callback)
A:tornado.options.arg->args[i].lstrip('-')
A:tornado.options.(name, equals, value)->args[i].lstrip('-').partition('=')
A:tornado.options.prefix->self._normalize_name(option.name)
A:tornado.options.lines->textwrap.wrap(description, 79 - 35)
A:tornado.options.self._originals[name]->getattr(self._options, name)
A:tornado.options.UNSET->object()
A:tornado.options._parse->{datetime.datetime: self._parse_datetime, datetime.timedelta: self._parse_timedelta, bool: self._parse_bool, basestring_type: self._parse_string}.get(self.type, self.type)
A:tornado.options.(lo_str, _, hi_str)->part.partition(':')
A:tornado.options.lo->_parse(lo_str)
A:tornado.options.self._value->_parse(value)
A:tornado.options._TIMEDELTA_PATTERN->re.compile('\\s*(%s)\\s*(\\w*)\\s*' % _FLOAT_PATTERN, re.IGNORECASE)
A:tornado.options.sum->datetime.timedelta()
A:tornado.options.m->self._TIMEDELTA_PATTERN.match(value, start)
A:tornado.options.num->float(m.group(1))
A:tornado.options.units->self._TIMEDELTA_ABBREV_DICT.get(units, units)
A:tornado.options.start->self._TIMEDELTA_PATTERN.match(value, start).end()
A:tornado.options.options->OptionParser()
tornado.options.Error(Exception)
tornado.options.OptionParser(self)
tornado.options.OptionParser.__contains__(self,name:str)->bool
tornado.options.OptionParser.__getattr__(self,name:str)->Any
tornado.options.OptionParser.__getitem__(self,name:str)->Any
tornado.options.OptionParser.__init__(self)
tornado.options.OptionParser.__iter__(self)->Iterator
tornado.options.OptionParser.__setattr__(self,name:str,value:Any)->None
tornado.options.OptionParser.__setitem__(self,name:str,value:Any)->None
tornado.options.OptionParser._help_callback(self,value:bool)->None
tornado.options.OptionParser._normalize_name(self,name:str)->str
tornado.options.OptionParser.add_parse_callback(self,callback:Callable[[],None])->None
tornado.options.OptionParser.as_dict(self)->Dict[str, Any]
tornado.options.OptionParser.define(self,name:str,default:Any=None,type:Optional[type]=None,help:Optional[str]=None,metavar:Optional[str]=None,multiple:bool=False,group:Optional[str]=None,callback:Optional[Callable[[Any],None]]=None)->None
tornado.options.OptionParser.group_dict(self,group:str)->Dict[str, Any]
tornado.options.OptionParser.groups(self)->Set[str]
tornado.options.OptionParser.items(self)->Iterable[Tuple[str, Any]]
tornado.options.OptionParser.mockable(self)->'_Mockable'
tornado.options.OptionParser.parse_command_line(self,args:Optional[List[str]]=None,final:bool=True)->List[str]
tornado.options.OptionParser.parse_config_file(self,path:str,final:bool=True)->None
tornado.options.OptionParser.print_help(self,file:Optional[TextIO]=None)->None
tornado.options.OptionParser.run_parse_callbacks(self)->None
tornado.options._Mockable(self,options:OptionParser)
tornado.options._Mockable.__delattr__(self,name:str)->None
tornado.options._Mockable.__getattr__(self,name:str)->Any
tornado.options._Mockable.__init__(self,options:OptionParser)
tornado.options._Mockable.__setattr__(self,name:str,value:Any)->None
tornado.options._Option(self,name:str,default:Any=None,type:Optional[type]=None,help:Optional[str]=None,metavar:Optional[str]=None,multiple:bool=False,file_name:Optional[str]=None,group_name:Optional[str]=None,callback:Optional[Callable[[Any],None]]=None)
tornado.options._Option.__init__(self,name:str,default:Any=None,type:Optional[type]=None,help:Optional[str]=None,metavar:Optional[str]=None,multiple:bool=False,file_name:Optional[str]=None,group_name:Optional[str]=None,callback:Optional[Callable[[Any],None]]=None)
tornado.options._Option._parse_bool(self,value:str)->bool
tornado.options._Option._parse_datetime(self,value:str)->datetime.datetime
tornado.options._Option._parse_string(self,value:str)->str
tornado.options._Option._parse_timedelta(self,value:str)->datetime.timedelta
tornado.options._Option.parse(self,value:str)->Any
tornado.options._Option.set(self,value:Any)->None
tornado.options._Option.value(self)->Any
tornado.options.add_parse_callback(callback:Callable[[],None])->None
tornado.options.define(name:str,default:Any=None,type:Optional[type]=None,help:Optional[str]=None,metavar:Optional[str]=None,multiple:bool=False,group:Optional[str]=None,callback:Optional[Callable[[Any],None]]=None)->None
tornado.options.parse_command_line(args:Optional[List[str]]=None,final:bool=True)->List[str]
tornado.options.parse_config_file(path:str,final:bool=True)->None
tornado.options.print_help(file:Optional[TextIO]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/testing.py----------------------------------------
A:tornado.testing.env->os.environ.get('ASYNC_TEST_TIMEOUT')
A:tornado.testing.result->f(self, *args, **kwargs)
A:tornado.testing.self.io_loop->self.get_new_ioloop()
A:tornado.testing.tasks->asyncio.Task.all_tasks(asyncio_loop)
A:tornado.testing.(done, pending)->self.io_loop.run_sync(lambda : asyncio.wait(tasks))
A:tornado.testing.ret->super().run(result)
A:tornado.testing.timeout->get_async_test_timeout()
A:tornado.testing.self.__failure->sys.exc_info()
A:tornado.testing.self.__timeout->self.io_loop.add_timeout(self.io_loop.time() + timeout, timeout_func)
A:tornado.testing.(sock, port)->bind_unused_port()
A:tornado.testing.self.http_client->self.get_http_client()
A:tornado.testing.self._app->self.get_app()
A:tornado.testing.self.http_server->self.get_http_server()
A:tornado.testing.url->self.get_url(path)
A:tornado.testing.module_dir->os.path.dirname(__file__)
A:tornado.testing.coro->tornado.gen.coroutine(pre_coroutine)
A:tornado.testing.logger->logging.getLogger(logger)
A:tornado.testing.self.regex->re.compile(regex)
A:tornado.testing.message->record.getMessage()
A:tornado.testing.val->cm.__enter__()
tornado.testing.AsyncHTTPSTestCase(AsyncHTTPTestCase)
tornado.testing.AsyncHTTPSTestCase.default_ssl_options()->Dict[str, Any]
tornado.testing.AsyncHTTPSTestCase.get_http_client(self)->AsyncHTTPClient
tornado.testing.AsyncHTTPSTestCase.get_httpserver_options(self)->Dict[str, Any]
tornado.testing.AsyncHTTPSTestCase.get_protocol(self)->str
tornado.testing.AsyncHTTPSTestCase.get_ssl_options(self)->Dict[str, Any]
tornado.testing.AsyncHTTPTestCase(AsyncTestCase)
tornado.testing.AsyncHTTPTestCase.fetch(self,path:str,raise_error:bool=False,**kwargs:Any)->HTTPResponse
tornado.testing.AsyncHTTPTestCase.get_app(self)->Application
tornado.testing.AsyncHTTPTestCase.get_http_client(self)->AsyncHTTPClient
tornado.testing.AsyncHTTPTestCase.get_http_port(self)->int
tornado.testing.AsyncHTTPTestCase.get_http_server(self)->HTTPServer
tornado.testing.AsyncHTTPTestCase.get_httpserver_options(self)->Dict[str, Any]
tornado.testing.AsyncHTTPTestCase.get_protocol(self)->str
tornado.testing.AsyncHTTPTestCase.get_url(self,path:str)->str
tornado.testing.AsyncHTTPTestCase.setUp(self)->None
tornado.testing.AsyncHTTPTestCase.tearDown(self)->None
tornado.testing.AsyncTestCase(self,methodName:str='runTest')
tornado.testing.AsyncTestCase.__init__(self,methodName:str='runTest')
tornado.testing.AsyncTestCase.__rethrow(self)->None
tornado.testing.AsyncTestCase._handle_exception(self,typ:Type[Exception],value:Exception,tb:TracebackType)->bool
tornado.testing.AsyncTestCase.get_new_ioloop(self)->IOLoop
tornado.testing.AsyncTestCase.run(self,result:Optional[unittest.TestResult]=None)->Optional[unittest.TestResult]
tornado.testing.AsyncTestCase.setUp(self)->None
tornado.testing.AsyncTestCase.stop(self,_arg:Any=None,**kwargs:Any)->None
tornado.testing.AsyncTestCase.tearDown(self)->None
tornado.testing.AsyncTestCase.wait(self,condition:Optional[Callable[...,bool]]=None,timeout:Optional[float]=None)->Any
tornado.testing.ExpectLog(self,logger:Union[logging.Logger,basestring_type],regex:str,required:bool=True,level:Optional[int]=None)
tornado.testing.ExpectLog.__enter__(self)->'ExpectLog'
tornado.testing.ExpectLog.__exit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[TracebackType])->None
tornado.testing.ExpectLog.__init__(self,logger:Union[logging.Logger,basestring_type],regex:str,required:bool=True,level:Optional[int]=None)
tornado.testing.ExpectLog.filter(self,record:logging.LogRecord)->bool
tornado.testing._TestMethodWrapper(self,orig_method:Callable)
tornado.testing._TestMethodWrapper.__getattr__(self,name:str)->Any
tornado.testing._TestMethodWrapper.__init__(self,orig_method:Callable)
tornado.testing.bind_unused_port(reuse_port:bool=False,address:str='127.0.0.1')->Tuple[socket.socket, int]
tornado.testing.gen_test(func:Optional[Callable[...,Union[Generator,'Coroutine']]]=None,timeout:Optional[float]=None)->Union[Callable[..., None], Callable[[Callable[..., Union[Generator, 'Coroutine']]], Callable[..., None]]]
tornado.testing.get_async_test_timeout()->float
tornado.testing.main(**kwargs:Any)->None
tornado.testing.setup_with_context_manager(testcase:unittest.TestCase,cm:Any)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/netutil.py----------------------------------------
A:tornado.netutil._client_ssl_defaults->ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
A:tornado.netutil._server_ssl_defaults->ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
A:tornado.netutil.unique_addresses->set()
A:tornado.netutil.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:tornado.netutil.sockaddr->tuple([host, bound_port] + list(sockaddr[2:]))
A:tornado.netutil.st->os.stat(file)
A:tornado.netutil.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.netutil.(connection, address)->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM).accept()
A:tornado.netutil.res->socket.getaddrinfo(ip, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_NUMERICHOST)
A:tornado.netutil.addrinfo->socket.getaddrinfo(host, port, family, socket.SOCK_STREAM)
A:tornado.netutil.threadpool->ThreadedResolver._create_threadpool(num_threads)
A:tornado.netutil.pid->os.getpid()
A:tornado.netutil.cls._threadpool->concurrent.futures.ThreadPoolExecutor(num_threads)
A:tornado.netutil._SSL_CONTEXT_KEYWORDS->frozenset(['ssl_version', 'certfile', 'keyfile', 'cert_reqs', 'ca_certs', 'ciphers'])
A:tornado.netutil.context->ssl_options_to_context(ssl_options, server_side=server_side)
tornado.netutil.BlockingResolver(ExecutorResolver)
tornado.netutil.BlockingResolver.initialize(self)->None
tornado.netutil.DefaultExecutorResolver(Resolver)
tornado.netutil.DefaultExecutorResolver.resolve(self,host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->List[Tuple[int, Any]]
tornado.netutil.DefaultLoopResolver(Resolver)
tornado.netutil.DefaultLoopResolver.resolve(self,host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->List[Tuple[int, Any]]
tornado.netutil.ExecutorResolver(Resolver)
tornado.netutil.ExecutorResolver.close(self)->None
tornado.netutil.ExecutorResolver.initialize(self,executor:Optional[concurrent.futures.Executor]=None,close_executor:bool=True)->None
tornado.netutil.ExecutorResolver.resolve(self,host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->List[Tuple[int, Any]]
tornado.netutil.OverrideResolver(Resolver)
tornado.netutil.OverrideResolver.close(self)->None
tornado.netutil.OverrideResolver.initialize(self,resolver:Resolver,mapping:dict)->None
tornado.netutil.OverrideResolver.resolve(self,host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->Awaitable[List[Tuple[int, Any]]]
tornado.netutil.Resolver(Configurable)
tornado.netutil.Resolver.close(self)->None
tornado.netutil.Resolver.configurable_base(cls)->Type['Resolver']
tornado.netutil.Resolver.configurable_default(cls)->Type['Resolver']
tornado.netutil.Resolver.resolve(self,host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->Awaitable[List[Tuple[int, Any]]]
tornado.netutil.ThreadedResolver(ExecutorResolver)
tornado.netutil.ThreadedResolver._create_threadpool(cls,num_threads:int)->concurrent.futures.ThreadPoolExecutor
tornado.netutil.ThreadedResolver.initialize(self,num_threads:int=10)->None
tornado.netutil._resolve_addr(host:str,port:int,family:socket.AddressFamily=socket.AF_UNSPEC)->List[Tuple[int, Any]]
tornado.netutil.add_accept_handler(sock:socket.socket,callback:Callable[[socket.socket,Any],None])->Callable[[], None]
tornado.netutil.bind_sockets(port:int,address:Optional[str]=None,family:socket.AddressFamily=socket.AF_UNSPEC,backlog:int=_DEFAULT_BACKLOG,flags:Optional[int]=None,reuse_port:bool=False)->List[socket.socket]
tornado.netutil.is_valid_ip(ip:str)->bool
tornado.netutil.ssl_options_to_context(ssl_options:Union[Dict[str,Any],ssl.SSLContext],server_side:Optional[bool]=None)->ssl.SSLContext
tornado.netutil.ssl_wrap_socket(socket:socket.socket,ssl_options:Union[Dict[str,Any],ssl.SSLContext],server_hostname:Optional[str]=None,server_side:Optional[bool]=None,**kwargs:Any)->ssl.SSLSocket


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/process.py----------------------------------------
A:tornado.process.seed->int(hexlify(os.urandom(16)), 16)
A:tornado.process.num_processes->cpu_count()
A:tornado.process.pid->os.fork()
A:tornado.process.id->children.pop(pid)
A:tornado.process.(pid, status)->os.wait()
A:tornado.process.new_id->start_child(id)
A:tornado.process.STREAM->object()
A:tornado.process.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.process.(in_r, in_w)->os.pipe()
A:tornado.process.self.stdin->PipeIOStream(in_w)
A:tornado.process.(out_r, out_w)->os.pipe()
A:tornado.process.self.stdout->PipeIOStream(out_r)
A:tornado.process.(err_r, err_w)->os.pipe()
A:tornado.process.self.stderr->PipeIOStream(err_r)
A:tornado.process.self.proc->subprocess.Popen(*args, **kwargs)
A:tornado.process.future->Future()
A:tornado.process.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.process.cls._old_sigchld->signal.signal(signal.SIGCHLD, lambda sig, frame: io_loop.add_callback_from_signal(cls._cleanup))
A:tornado.process.(ret_pid, status)->os.waitpid(pid, os.WNOHANG)
A:tornado.process.subproc->cls._waiting.pop(pid)
A:tornado.process.self.returncode->os.WEXITSTATUS(status)
tornado.process.Subprocess(self,*args:Any,**kwargs:Any)
tornado.process.Subprocess.__init__(self,*args:Any,**kwargs:Any)
tornado.process.Subprocess._cleanup(cls)->None
tornado.process.Subprocess._set_returncode(self,status:int)->None
tornado.process.Subprocess._try_cleanup_process(cls,pid:int)->None
tornado.process.Subprocess.initialize(cls)->None
tornado.process.Subprocess.set_exit_callback(self,callback:Callable[[int],None])->None
tornado.process.Subprocess.uninitialize(cls)->None
tornado.process.Subprocess.wait_for_exit(self,raise_error:bool=True)->'Future[int]'
tornado.process._reseed_random()->None
tornado.process.cpu_count()->int
tornado.process.fork_processes(num_processes:Optional[int],max_restarts:Optional[int]=None)->int
tornado.process.task_id()->Optional[int]


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/queues.py----------------------------------------
A:tornado.queues._T->TypeVar('_T')
A:tornado.queues.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.queues.timeout_handle->tornado.ioloop.IOLoop.current().add_timeout(timeout, on_timeout)
A:tornado.queues.self._getters->collections.deque([])
A:tornado.queues.self._putters->collections.deque([])
A:tornado.queues.self._finished->Event()
A:tornado.queues.future->Future()
A:tornado.queues.getter->self._getters.popleft()
A:tornado.queues.(item, putter)->self._putters.popleft()
A:tornado.queues.self._queue->collections.deque()
tornado.queues.LifoQueue(Queue)
tornado.queues.LifoQueue._get(self)->_T
tornado.queues.LifoQueue._init(self)->None
tornado.queues.LifoQueue._put(self,item:_T)->None
tornado.queues.PriorityQueue(Queue)
tornado.queues.PriorityQueue._get(self)->_T
tornado.queues.PriorityQueue._init(self)->None
tornado.queues.PriorityQueue._put(self,item:_T)->None
tornado.queues.Queue(self,maxsize:int=0)
tornado.queues.Queue.__aiter__(self)->_QueueIterator[_T]
tornado.queues.Queue.__init__(self,maxsize:int=0)
tornado.queues.Queue.__put_internal(self,item:_T)->None
tornado.queues.Queue.__repr__(self)->str
tornado.queues.Queue.__str__(self)->str
tornado.queues.Queue._consume_expired(self)->None
tornado.queues.Queue._format(self)->str
tornado.queues.Queue._get(self)->_T
tornado.queues.Queue._init(self)->None
tornado.queues.Queue._put(self,item:_T)->None
tornado.queues.Queue.empty(self)->bool
tornado.queues.Queue.full(self)->bool
tornado.queues.Queue.get(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[_T]
tornado.queues.Queue.get_nowait(self)->_T
tornado.queues.Queue.join(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[None]
tornado.queues.Queue.maxsize(self)->int
tornado.queues.Queue.put(self,item:_T,timeout:Optional[Union[float,datetime.timedelta]]=None)->'Future[None]'
tornado.queues.Queue.put_nowait(self,item:_T)->None
tornado.queues.Queue.qsize(self)->int
tornado.queues.Queue.task_done(self)->None
tornado.queues.QueueEmpty(Exception)
tornado.queues.QueueFull(Exception)
tornado.queues._QueueIterator(self,q:'Queue[_T]')
tornado.queues._QueueIterator.__anext__(self)->Awaitable[_T]
tornado.queues._QueueIterator.__init__(self,q:'Queue[_T]')
tornado.queues._set_timeout(future:Future,timeout:Union[None,float,datetime.timedelta])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/gen.py----------------------------------------
A:tornado.gen._T->typing.TypeVar('_T')
A:tornado.gen.future->_create_future()
A:tornado.gen.source_traceback->getattr(future, '_source_traceback', ())
A:tornado.gen.result->_create_future()
A:tornado.gen.yielded->self.gen.send(value)
A:tornado.gen.runner->Runner(ctx_run, result, future, yielded)
A:tornado.gen.self._unfinished->dict(((f, i) for (i, f) in enumerate(args)))
A:tornado.gen.futures->list(kwargs.values())
A:tornado.gen.self._finished->collections.deque()
A:tornado.gen.self._running_future->Future()
A:tornado.gen.self.current_index->self._unfinished.pop(done)
A:tornado.gen.keys->list(children.keys())
A:tornado.gen.children_seq->children.values()
A:tornado.gen.children_futs->list(map(convert_yielded, children_seq))
A:tornado.gen.unfinished_children->set(children_futs)
A:tornado.gen.listening->set()
A:tornado.gen.fut->_create_future()
A:tornado.gen.future_converted->convert_yielded(future)
A:tornado.gen.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.gen.timeout_handle->tornado.ioloop.IOLoop.current().add_timeout(timeout, timeout_callback)
A:tornado.gen.f->_create_future()
A:tornado.gen._null_future->typing.cast(Future, _NullFuture())
A:tornado.gen.moment->typing.cast(Future, _NullFuture())
A:tornado.gen.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.gen.value->_create_future().result()
A:tornado.gen.self.future->Future()
A:tornado.gen._wrap_awaitable->getattr(asyncio, 'async')
A:tornado.gen.convert_yielded->singledispatch(convert_yielded)
tornado.gen.BadYieldError(Exception)
tornado.gen.KeyReuseError(Exception)
tornado.gen.LeakedCallbackError(Exception)
tornado.gen.Return(self,value:Any=None)
tornado.gen.Return.__init__(self,value:Any=None)
tornado.gen.ReturnValueIgnoredError(Exception)
tornado.gen.Runner(self,ctx_run:Callable,gen:'Generator[_Yieldable,Any,_T]',result_future:'Future[_T]',first_yielded:_Yieldable)
tornado.gen.Runner.__init__(self,ctx_run:Callable,gen:'Generator[_Yieldable,Any,_T]',result_future:'Future[_T]',first_yielded:_Yieldable)
tornado.gen.Runner.handle_exception(self,typ:Type[Exception],value:Exception,tb:types.TracebackType)->bool
tornado.gen.Runner.handle_yield(self,yielded:_Yieldable)->bool
tornado.gen.Runner.run(self)->None
tornado.gen.UnknownKeyError(Exception)
tornado.gen.WaitIterator(self,*args:Future,**kwargs:Future)
tornado.gen.WaitIterator.__aiter__(self)->typing.AsyncIterator
tornado.gen.WaitIterator.__anext__(self)->Future
tornado.gen.WaitIterator.__init__(self,*args:Future,**kwargs:Future)
tornado.gen.WaitIterator._done_callback(self,done:Future)->None
tornado.gen.WaitIterator._return_result(self,done:Future)->Future
tornado.gen.WaitIterator.done(self)->bool
tornado.gen.WaitIterator.next(self)->Future
tornado.gen._NullFuture(object)
tornado.gen._NullFuture.done(self)->bool
tornado.gen._NullFuture.result(self)->None
tornado.gen._create_future()->Future
tornado.gen._fake_ctx_run(f:Callable[...,_T],*args:Any,**kw:Any)->_T
tornado.gen._value_from_stopiteration(e:Union[StopIteration,'Return'])->Any
tornado.gen.convert_yielded(yielded:_Yieldable)->Future
tornado.gen.coroutine(func:Union[Callable[...,'Generator[Any,Any,_T]'],Callable[...,_T]])->Callable[..., 'Future[_T]']
tornado.gen.is_coroutine_function(func:Any)->bool
tornado.gen.maybe_future(x:Any)->Future
tornado.gen.multi(children:Union[List[_Yieldable],Dict[Any,_Yieldable]],quiet_exceptions:'Union[Type[Exception],Tuple[Type[Exception],...]]'=())->'Union[Future[List], Future[Dict]]'
tornado.gen.multi_future(children:Union[List[_Yieldable],Dict[Any,_Yieldable]],quiet_exceptions:'Union[Type[Exception],Tuple[Type[Exception],...]]'=())->'Union[Future[List], Future[Dict]]'
tornado.gen.sleep(duration:float)->'Future[None]'
tornado.gen.with_timeout(timeout:Union[float,datetime.timedelta],future:_Yieldable,quiet_exceptions:'Union[Type[Exception],Tuple[Type[Exception],...]]'=())->Future


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/httputil.py----------------------------------------
A:tornado.httputil.norm_name->_normalize_header(name)
A:tornado.httputil.(name, value)->native_str(line).split(':', 1)
A:tornado.httputil.h->cls()
A:tornado.httputil.context->getattr(connection, 'context', None)
A:tornado.httputil.self.remote_ip->getattr(context, 'remote_ip', None)
A:tornado.httputil.self.protocol->getattr(context, 'protocol', 'http')
A:tornado.httputil.self._start_time->time.time()
A:tornado.httputil.(self.path, sep, self.query)->uri.partition('?')
A:tornado.httputil.self.arguments->parse_qs_bytes(self.query, keep_blank_values=True)
A:tornado.httputil.self.query_arguments->copy.deepcopy(self.arguments)
A:tornado.httputil.self._cookies->http.cookies.SimpleCookie()
A:tornado.httputil.parsed->parse_cookie(self.headers['Cookie'])
A:tornado.httputil.args->', '.join(['%s=%r' % (n, getattr(self, n)) for n in attrs])
A:tornado.httputil.parsed_url->urlparse(url)
A:tornado.httputil.parsed_query->parse_qsl(parsed_url.query, keep_blank_values=True)
A:tornado.httputil.err->"'args' parameter should be dict, list or tuple. Not {0}".format(type(args))
A:tornado.httputil.final_query->urlencode(parsed_query)
A:tornado.httputil.url->urlunparse((parsed_url[0], parsed_url[1], parsed_url[2], parsed_url[3], final_query, parsed_url[5]))
A:tornado.httputil.(unit, _, value)->range_header.partition('=')
A:tornado.httputil.(start_b, _, end_b)->email.utils.collapse_rfc2231_value(decoded_value).partition('-')
A:tornado.httputil.start->_int_or_none(start_b)
A:tornado.httputil.end->len(s)
A:tornado.httputil.val->val.strip().strip()
A:tornado.httputil.uri_arguments->parse_qs_bytes(body, keep_blank_values=True)
A:tornado.httputil.fields->content_type.split(';')
A:tornado.httputil.(k, sep, v)->field.strip().partition('=')
A:tornado.httputil.final_boundary_index->data.rfind(b'--' + boundary + b'--')
A:tornado.httputil.parts->_parseparam(';' + line)
A:tornado.httputil.eoh->part.find(b'\r\n\r\n')
A:tornado.httputil.headers->HTTPHeaders.parse(part[:eoh].decode('utf-8'))
A:tornado.httputil.disp_header->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Disposition', '')
A:tornado.httputil.(disposition, disp_params)->_parse_header(disp_header)
A:tornado.httputil.ctype->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Type', 'application/unknown')
A:tornado.httputil.time_num->calendar.timegm(ts.utctimetuple())
A:tornado.httputil.RequestStartLine->collections.namedtuple('RequestStartLine', ['method', 'path', 'version'])
A:tornado.httputil._http_version_re->re.compile('^HTTP/1\\.[0-9]$')
A:tornado.httputil.(method, path, version)->native_str(line).split(' ')
A:tornado.httputil.ResponseStartLine->collections.namedtuple('ResponseStartLine', ['version', 'code', 'reason'])
A:tornado.httputil._http_response_line_re->re.compile('(HTTP/1.[0-9]) ([0-9]+) ([^\\r]*)')
A:tornado.httputil.line->native_str(line)
A:tornado.httputil.match->re.compile('^(.+):(\\d+)$').match(netloc)
A:tornado.httputil.key->next(parts)
A:tornado.httputil.i->p.find('=')
A:tornado.httputil.name->p[:i].strip().lower()
A:tornado.httputil.value->email.utils.collapse_rfc2231_value(decoded_value)
A:tornado.httputil.decoded_params->email.utils.decode_params(params)
A:tornado.httputil.username->unicodedata.normalize('NFC', username)
A:tornado.httputil.password->unicodedata.normalize('NFC', password)
A:tornado.httputil._netloc_re->re.compile('^(.+):(\\d+)$')
A:tornado.httputil.host->re.compile('^(.+):(\\d+)$').match(netloc).group(1)
A:tornado.httputil.port->int(match.group(2))
A:tornado.httputil._OctalPatt->re.compile('\\\\[0-3][0-7][0-7]')
A:tornado.httputil._QuotePatt->re.compile('[\\\\].')
A:tornado.httputil.n->len(s)
A:tornado.httputil.o_match->re.compile('\\\\[0-3][0-7][0-7]').search(s, i)
A:tornado.httputil.q_match->re.compile('[\\\\].').search(s, i)
A:tornado.httputil.j->re.compile('\\\\[0-3][0-7][0-7]').search(s, i).start(0)
A:tornado.httputil.k->re.compile('[\\\\].').search(s, i).start(0)
A:tornado.httputil.(key, val)->chunk.split(str('='), 1)
A:tornado.httputil.cookiedict[key]->_unquote_cookie(val)
tornado.httputil.HTTPConnection(object)
tornado.httputil.HTTPConnection.finish(self)->None
tornado.httputil.HTTPConnection.write(self,chunk:bytes)->'Future[None]'
tornado.httputil.HTTPConnection.write_headers(self,start_line:Union['RequestStartLine','ResponseStartLine'],headers:HTTPHeaders,chunk:Optional[bytes]=None)->'Future[None]'
tornado.httputil.HTTPFile(ObjectDict)
tornado.httputil.HTTPHeaders(self,*args:typing.Any,**kwargs:str)
tornado.httputil.HTTPHeaders.__delitem__(self,name:str)->None
tornado.httputil.HTTPHeaders.__getitem__(self,name:str)->str
tornado.httputil.HTTPHeaders.__init__(self,*args:typing.Any,**kwargs:str)
tornado.httputil.HTTPHeaders.__iter__(self)->Iterator[typing.Any]
tornado.httputil.HTTPHeaders.__len__(self)->int
tornado.httputil.HTTPHeaders.__setitem__(self,name:str,value:str)->None
tornado.httputil.HTTPHeaders.__str__(self)->str
tornado.httputil.HTTPHeaders.add(self,name:str,value:str)->None
tornado.httputil.HTTPHeaders.copy(self)->'HTTPHeaders'
tornado.httputil.HTTPHeaders.get_all(self)->Iterable[Tuple[str, str]]
tornado.httputil.HTTPHeaders.get_list(self,name:str)->List[str]
tornado.httputil.HTTPHeaders.parse(cls,headers:str)->'HTTPHeaders'
tornado.httputil.HTTPHeaders.parse_line(self,line:str)->None
tornado.httputil.HTTPInputError(Exception)
tornado.httputil.HTTPMessageDelegate(object)
tornado.httputil.HTTPMessageDelegate.data_received(self,chunk:bytes)->Optional[Awaitable[None]]
tornado.httputil.HTTPMessageDelegate.finish(self)->None
tornado.httputil.HTTPMessageDelegate.headers_received(self,start_line:Union['RequestStartLine','ResponseStartLine'],headers:HTTPHeaders)->Optional[Awaitable[None]]
tornado.httputil.HTTPMessageDelegate.on_connection_close(self)->None
tornado.httputil.HTTPOutputError(Exception)
tornado.httputil.HTTPServerConnectionDelegate(object)
tornado.httputil.HTTPServerConnectionDelegate.on_close(self,server_conn:object)->None
tornado.httputil.HTTPServerConnectionDelegate.start_request(self,server_conn:object,request_conn:'HTTPConnection')->'HTTPMessageDelegate'
tornado.httputil.HTTPServerRequest(self,method:Optional[str]=None,uri:Optional[str]=None,version:str='HTTP/1.0',headers:Optional[HTTPHeaders]=None,body:Optional[bytes]=None,host:Optional[str]=None,files:Optional[Dict[str,List['HTTPFile']]]=None,connection:Optional['HTTPConnection']=None,start_line:Optional['RequestStartLine']=None,server_connection:Optional[object]=None)
tornado.httputil.HTTPServerRequest.__init__(self,method:Optional[str]=None,uri:Optional[str]=None,version:str='HTTP/1.0',headers:Optional[HTTPHeaders]=None,body:Optional[bytes]=None,host:Optional[str]=None,files:Optional[Dict[str,List['HTTPFile']]]=None,connection:Optional['HTTPConnection']=None,start_line:Optional['RequestStartLine']=None,server_connection:Optional[object]=None)
tornado.httputil.HTTPServerRequest.__repr__(self)->str
tornado.httputil.HTTPServerRequest._parse_body(self)->None
tornado.httputil.HTTPServerRequest.cookies(self)->Dict[str, http.cookies.Morsel]
tornado.httputil.HTTPServerRequest.full_url(self)->str
tornado.httputil.HTTPServerRequest.get_ssl_certificate(self,binary_form:bool=False)->Union[None, Dict, bytes]
tornado.httputil.HTTPServerRequest.request_time(self)->float
tornado.httputil._encode_header(key:str,pdict:Dict[str,str])->str
tornado.httputil._get_content_range(start:Optional[int],end:Optional[int],total:int)->str
tornado.httputil._int_or_none(val:str)->Optional[int]
tornado.httputil._normalize_header(name:str)->str
tornado.httputil._parse_header(line:str)->Tuple[str, Dict[str, str]]
tornado.httputil._parse_request_range(range_header:str)->Optional[Tuple[Optional[int], Optional[int]]]
tornado.httputil._parseparam(s:str)->Generator[str, None, None]
tornado.httputil._unquote_cookie(s:str)->str
tornado.httputil.doctests()
tornado.httputil.encode_username_password(username:Union[str,bytes],password:Union[str,bytes])->bytes
tornado.httputil.format_timestamp(ts:Union[int,float,tuple,time.struct_time,datetime.datetime])->str
tornado.httputil.parse_body_arguments(content_type:str,body:bytes,arguments:Dict[str,List[bytes]],files:Dict[str,List[HTTPFile]],headers:Optional[HTTPHeaders]=None)->None
tornado.httputil.parse_cookie(cookie:str)->Dict[str, str]
tornado.httputil.parse_multipart_form_data(boundary:bytes,data:bytes,arguments:Dict[str,List[bytes]],files:Dict[str,List[HTTPFile]])->None
tornado.httputil.parse_request_start_line(line:str)->RequestStartLine
tornado.httputil.parse_response_start_line(line:str)->ResponseStartLine
tornado.httputil.qs_to_qsl(qs:Dict[str,List[AnyStr]])->Iterable[Tuple[str, AnyStr]]
tornado.httputil.split_host_and_port(netloc:str)->Tuple[str, Optional[int]]
tornado.httputil.url_concat(url:str,args:Union[None,Dict[str,str],List[Tuple[str,str]],Tuple[Tuple[str,str],...]])->str


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/wsgi.py----------------------------------------
A:tornado.wsgi.loop->tornado.ioloop.IOLoop.current()
A:tornado.wsgi.app_response_iter->iter(app_response)
A:tornado.wsgi.body->tornado.escape.utf8(body)
A:tornado.wsgi.(status_code_str, reason)->data['status'].split(' ', 1)
A:tornado.wsgi.status_code->int(status_code_str)
A:tornado.wsgi.header_set->set((k.lower() for (k, v) in headers))
A:tornado.wsgi.start_line->tornado.httputil.ResponseStartLine('HTTP/1.1', status_code, reason)
A:tornado.wsgi.header_obj->tornado.httputil.HTTPHeaders()
A:tornado.wsgi.hostport->request.host.split(':')
A:tornado.wsgi.port->int(hostport[1])
A:tornado.wsgi.environ['CONTENT_TYPE']->request.headers.pop('Content-Type')
A:tornado.wsgi.environ['CONTENT_LENGTH']->request.headers.pop('Content-Length')
tornado.wsgi.WSGIContainer(self,wsgi_application:'WSGIAppType',executor:Optional[concurrent.futures.Executor]=None)
tornado.wsgi.WSGIContainer.__init__(self,wsgi_application:'WSGIAppType',executor:Optional[concurrent.futures.Executor]=None)
tornado.wsgi.WSGIContainer._log(self,status_code:int,request:httputil.HTTPServerRequest)->None
tornado.wsgi.WSGIContainer.environ(self,request:httputil.HTTPServerRequest)->Dict[Text, Any]
tornado.wsgi.WSGIContainer.handle_request(self,request:httputil.HTTPServerRequest)->None
tornado.wsgi.to_wsgi_str(s:bytes)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/concurrent.py----------------------------------------
A:tornado.concurrent._T->typing.TypeVar('_T')
A:tornado.concurrent.future->concurrent.futures.Future()
A:tornado.concurrent.dummy_executor->DummyExecutor()
A:tornado.concurrent.executor->kwargs.get('executor', 'executor')
A:tornado.concurrent.async_future->Future()
A:tornado.concurrent.conc_future->getattr(self, executor).submit(fn, self, *args, **kwargs)
A:tornado.concurrent._NO_RESULT->object()
A:tornado.concurrent.a_exc->a.exception()
tornado.concurrent.DummyExecutor(futures.Executor)
tornado.concurrent.DummyExecutor.shutdown(self,wait:bool=True)->None
tornado.concurrent.DummyExecutor.submit(self,fn:Callable[...,_T],*args:Any,**kwargs:Any)->'futures.Future[_T]'
tornado.concurrent.ReturnValueIgnoredError(Exception)
tornado.concurrent.chain_future(a:'Future[_T]',b:'Future[_T]')->None
tornado.concurrent.future_add_done_callback(future:'Union[futures.Future[_T],Future[_T]]',callback:Callable[...,None])->None
tornado.concurrent.future_set_exc_info(future:'Union[futures.Future[_T],Future[_T]]',exc_info:Tuple[Optional[type],Optional[BaseException],Optional[types.TracebackType]])->None
tornado.concurrent.future_set_exception_unless_cancelled(future:'Union[futures.Future[_T],Future[_T]]',exc:BaseException)->None
tornado.concurrent.future_set_result_unless_cancelled(future:'Union[futures.Future[_T],Future[_T]]',value:_T)->None
tornado.concurrent.is_future(x:Any)->bool
tornado.concurrent.run_on_executor(*args:Any,**kwargs:Any)->Callable


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/auth.py----------------------------------------
A:tornado.auth.handler->cast(RequestHandler, self)
A:tornado.auth.args->tornado.escape.json_decode(response.body)
A:tornado.auth.http_client->self.get_auth_http_client()
A:tornado.auth.url->urllib.parse.urljoin(handler.request.full_url(), callback_uri)
A:tornado.auth.ax_attrs->set(ax_attrs)
A:tornado.auth.args['openid.ax.required']->','.join(required)
A:tornado.auth.email->get_ax_arg('http://axschema.org/contact/email')
A:tornado.auth.name->get_ax_arg('http://axschema.org/namePerson')
A:tornado.auth.first_name->get_ax_arg('http://axschema.org/namePerson/first')
A:tornado.auth.last_name->get_ax_arg('http://axschema.org/namePerson/last')
A:tornado.auth.username->get_ax_arg('http://axschema.org/namePerson/friendly')
A:tornado.auth.locale->get_ax_arg('http://axschema.org/pref/language').lower()
A:tornado.auth.user->dict()
A:tornado.auth.user['name']->' '.join(name_parts)
A:tornado.auth.claimed_id->cast(RequestHandler, self).get_argument('openid.claimed_id', None)
A:tornado.auth.request_key->tornado.escape.utf8(handler.get_argument('oauth_token'))
A:tornado.auth.oauth_verifier->cast(RequestHandler, self).get_argument('oauth_verifier', None)
A:tornado.auth.request_cookie->cast(RequestHandler, self).get_cookie('_oauth_request_token')
A:tornado.auth.token->dict(key=p['oauth_token'][0], secret=p['oauth_token_secret'][0])
A:tornado.auth.access_token->_oauth_parse_response(response.body)
A:tornado.auth.consumer_token->self._oauth_consumer_token()
A:tornado.auth.args['oauth_callback']->urllib.parse.urljoin(handler.request.full_url(), callback_uri)
A:tornado.auth.signature->_oauth_signature(consumer_token, method, url, args, access_token)
A:tornado.auth.request_token->_oauth_parse_response(response.body)
A:tornado.auth.base_args->dict(oauth_consumer_key=escape.to_basestring(consumer_token['key']), oauth_token=escape.to_basestring(access_token['key']), oauth_signature_method='HMAC-SHA1', oauth_timestamp=str(int(time.time())), oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)), oauth_version='1.0')
A:tornado.auth.base_args['oauth_signature']->tornado.escape.to_basestring(signature)
A:tornado.auth.args['scope']->' '.join(scope)
A:tornado.auth.http->self.get_auth_http_client()
A:tornado.auth.oauth->self._oauth_request_parameters(url, access_token, all_args, method=method)
A:tornado.auth.settings->self.get_google_oauth_settings()
A:tornado.auth.body->urllib.parse.urlencode({'redirect_uri': redirect_uri, 'code': code, 'client_id': client_id, 'client_secret': client_secret, 'grant_type': 'authorization_code'})
A:tornado.auth.fields->set(['id', 'name', 'first_name', 'last_name', 'locale', 'picture', 'link'])
A:tornado.auth.fieldmap[field]->dict().get(field)
A:tornado.auth.parts->urllib.parse.urlparse(url)
A:tornado.auth.base_string->'&'.join((_oauth_escape(e) for e in base_elems))
A:tornado.auth.key->b'&'.join(key_elems)
A:tornado.auth.hash->hmac.new(key, escape.utf8(base_string), hashlib.sha1)
A:tornado.auth.val->val.encode('utf-8').encode('utf-8')
A:tornado.auth.body_str->tornado.escape.native_str(body)
A:tornado.auth.p->urllib.parse.parse_qs(body_str, keep_blank_values=False)
tornado.auth.AuthError(Exception)
tornado.auth.FacebookGraphMixin(OAuth2Mixin)
tornado.auth.FacebookGraphMixin.facebook_request(self,path:str,access_token:Optional[str]=None,post_args:Optional[Dict[str,Any]]=None,**args:Any)->Any
tornado.auth.FacebookGraphMixin.get_authenticated_user(self,redirect_uri:str,client_id:str,client_secret:str,code:str,extra_fields:Optional[Dict[str,Any]]=None)->Optional[Dict[str, Any]]
tornado.auth.GoogleOAuth2Mixin(OAuth2Mixin)
tornado.auth.GoogleOAuth2Mixin.get_authenticated_user(self,redirect_uri:str,code:str,client_id:Optional[str]=None,client_secret:Optional[str]=None)->Dict[str, Any]
tornado.auth.GoogleOAuth2Mixin.get_google_oauth_settings(self)->Dict[str, str]
tornado.auth.OAuth2Mixin(object)
tornado.auth.OAuth2Mixin._oauth_request_token_url(self,redirect_uri:Optional[str]=None,client_id:Optional[str]=None,client_secret:Optional[str]=None,code:Optional[str]=None,extra_params:Optional[Dict[str,Any]]=None)->str
tornado.auth.OAuth2Mixin.authorize_redirect(self,redirect_uri:Optional[str]=None,client_id:Optional[str]=None,client_secret:Optional[str]=None,extra_params:Optional[Dict[str,Any]]=None,scope:Optional[List[str]]=None,response_type:str='code')->None
tornado.auth.OAuth2Mixin.get_auth_http_client(self)->httpclient.AsyncHTTPClient
tornado.auth.OAuth2Mixin.oauth2_request(self,url:str,access_token:Optional[str]=None,post_args:Optional[Dict[str,Any]]=None,**args:Any)->Any
tornado.auth.OAuthMixin(object)
tornado.auth.OAuthMixin._oauth_access_token_url(self,request_token:Dict[str,Any])->str
tornado.auth.OAuthMixin._oauth_consumer_token(self)->Dict[str, Any]
tornado.auth.OAuthMixin._oauth_get_user_future(self,access_token:Dict[str,Any])->Dict[str, Any]
tornado.auth.OAuthMixin._oauth_request_parameters(self,url:str,access_token:Dict[str,Any],parameters:Dict[str,Any]={},method:str='GET')->Dict[str, Any]
tornado.auth.OAuthMixin._oauth_request_token_url(self,callback_uri:Optional[str]=None,extra_params:Optional[Dict[str,Any]]=None)->str
tornado.auth.OAuthMixin._on_request_token(self,authorize_url:str,callback_uri:Optional[str],response:httpclient.HTTPResponse)->None
tornado.auth.OAuthMixin.authorize_redirect(self,callback_uri:Optional[str]=None,extra_params:Optional[Dict[str,Any]]=None,http_client:Optional[httpclient.AsyncHTTPClient]=None)->None
tornado.auth.OAuthMixin.get_auth_http_client(self)->httpclient.AsyncHTTPClient
tornado.auth.OAuthMixin.get_authenticated_user(self,http_client:Optional[httpclient.AsyncHTTPClient]=None)->Dict[str, Any]
tornado.auth.OpenIdMixin(object)
tornado.auth.OpenIdMixin._on_authentication_verified(self,response:httpclient.HTTPResponse)->Dict[str, Any]
tornado.auth.OpenIdMixin._openid_args(self,callback_uri:str,ax_attrs:Iterable[str]=[],oauth_scope:Optional[str]=None)->Dict[str, str]
tornado.auth.OpenIdMixin.authenticate_redirect(self,callback_uri:Optional[str]=None,ax_attrs:List[str]=['name','email','language','username'])->None
tornado.auth.OpenIdMixin.get_auth_http_client(self)->httpclient.AsyncHTTPClient
tornado.auth.OpenIdMixin.get_authenticated_user(self,http_client:Optional[httpclient.AsyncHTTPClient]=None)->Dict[str, Any]
tornado.auth.TwitterMixin(OAuthMixin)
tornado.auth.TwitterMixin._oauth_consumer_token(self)->Dict[str, Any]
tornado.auth.TwitterMixin._oauth_get_user_future(self,access_token:Dict[str,Any])->Dict[str, Any]
tornado.auth.TwitterMixin.authenticate_redirect(self,callback_uri:Optional[str]=None)->None
tornado.auth.TwitterMixin.twitter_request(self,path:str,access_token:Dict[str,Any],post_args:Optional[Dict[str,Any]]=None,**args:Any)->Any
tornado.auth._oauth10a_signature(consumer_token:Dict[str,Any],method:str,url:str,parameters:Dict[str,Any]={},token:Optional[Dict[str,Any]]=None)->bytes
tornado.auth._oauth_escape(val:Union[str,bytes])->str
tornado.auth._oauth_parse_response(body:bytes)->Dict[str, Any]
tornado.auth._oauth_signature(consumer_token:Dict[str,Any],method:str,url:str,parameters:Dict[str,Any]={},token:Optional[Dict[str,Any]]=None)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/curl_httpclient.py----------------------------------------
A:tornado.curl_httpclient.curl_log->logging.getLogger('tornado.curl_httpclient')
A:tornado.curl_httpclient.self._multi->pycurl.CurlMulti()
A:tornado.curl_httpclient.self._requests->collections.deque()
A:tornado.curl_httpclient.self._force_timeout_callback->tornado.ioloop.PeriodicCallback(self._handle_force_timeout, 1000)
A:tornado.curl_httpclient.dummy_curl_handle->pycurl.Curl()
A:tornado.curl_httpclient.self._timeout->self.io_loop.add_timeout(self.io_loop.time() + msecs / 1000.0, self._handle_timeout)
A:tornado.curl_httpclient.(ret, num_handles)->self._multi.socket_all()
A:tornado.curl_httpclient.new_timeout->self._multi.timeout()
A:tornado.curl_httpclient.(num_q, ok_list, err_list)->self._multi.info_read()
A:tornado.curl_httpclient.curl->pycurl.Curl()
A:tornado.curl_httpclient.(request, callback, queue_start_time)->self._requests.popleft()
A:tornado.curl_httpclient.error->CurlError(curl_error, curl_message)
A:tornado.curl_httpclient.code->pycurl.Curl().getinfo(pycurl.HTTP_CODE)
A:tornado.curl_httpclient.effective_url->pycurl.Curl().getinfo(pycurl.EFFECTIVE_URL)
A:tornado.curl_httpclient.time_info->dict(queue=info['curl_start_ioloop_time'] - info['queue_start_time'], namelookup=curl.getinfo(pycurl.NAMELOOKUP_TIME), connect=curl.getinfo(pycurl.CONNECT_TIME), appconnect=curl.getinfo(pycurl.APPCONNECT_TIME), pretransfer=curl.getinfo(pycurl.PRETRANSFER_TIME), starttransfer=curl.getinfo(pycurl.STARTTRANSFER_TIME), total=curl.getinfo(pycurl.TOTAL_TIME), redirect=curl.getinfo(pycurl.REDIRECT_TIME))
A:tornado.curl_httpclient.credentials->tornado.httputil.encode_username_password(request.proxy_username, request.proxy_password)
A:tornado.curl_httpclient.custom_methods->set(['DELETE', 'OPTIONS', 'PATCH'])
A:tornado.curl_httpclient.request_buffer->BytesIO(utf8(request.body or ''))
A:tornado.curl_httpclient.userpwd->tornado.httputil.encode_username_password(request.auth_username, request.auth_password)
A:tornado.curl_httpclient.header_line->header_line.rstrip().rstrip()
A:tornado.curl_httpclient.(__, __, reason)->tornado.httputil.parse_response_start_line(header_line)
A:tornado.curl_httpclient.debug_msg->native_str(debug_msg)
tornado.curl_httpclient.CurlAsyncHTTPClient(AsyncHTTPClient)
tornado.curl_httpclient.CurlAsyncHTTPClient._curl_create(self)->pycurl.Curl
tornado.curl_httpclient.CurlAsyncHTTPClient._curl_debug(self,debug_type:int,debug_msg:str)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._curl_header_callback(self,headers:httputil.HTTPHeaders,header_callback:Callable[[str],None],header_line_bytes:bytes)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._curl_setup_request(self,curl:pycurl.Curl,request:HTTPRequest,buffer:BytesIO,headers:httputil.HTTPHeaders)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._finish(self,curl:pycurl.Curl,curl_error:Optional[int]=None,curl_message:Optional[str]=None)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._finish_pending_requests(self)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_events(self,fd:int,events:int)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_force_timeout(self)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_socket(self,event:int,fd:int,multi:Any,data:bytes)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_timeout(self)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._process_queue(self)->None
tornado.curl_httpclient.CurlAsyncHTTPClient._set_timeout(self,msecs:int)->None
tornado.curl_httpclient.CurlAsyncHTTPClient.close(self)->None
tornado.curl_httpclient.CurlAsyncHTTPClient.fetch_impl(self,request:HTTPRequest,callback:Callable[[HTTPResponse],None])->None
tornado.curl_httpclient.CurlAsyncHTTPClient.handle_callback_exception(self,callback:Any)->None
tornado.curl_httpclient.CurlAsyncHTTPClient.initialize(self,max_clients:int=10,defaults:Optional[Dict[str,Any]]=None)->None
tornado.curl_httpclient.CurlError(self,errno:int,message:str)
tornado.curl_httpclient.CurlError.__init__(self,errno:int,message:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/routing.py----------------------------------------
A:tornado.routing.request->tornado.httputil.HTTPServerRequest(connection=self.request_conn, server_connection=self.server_conn, start_line=start_line, headers=headers)
A:tornado.routing.self.delegate->_DefaultMessageDelegate(self.request_conn)
A:tornado.routing.rule->super().process_rule(rule)
A:tornado.routing.target_params->super().process_rule(rule).matcher.match(request)
A:tornado.routing.delegate->self.get_target_delegate(rule.target, request, **target_params)
A:tornado.routing.reversed_url->super().process_rule(rule).target.reverse_url(name, *args)
A:tornado.routing.target->import_object(target)
A:tornado.routing.self.host_pattern->re.compile(host_pattern)
A:tornado.routing.self.regex->re.compile(path_pattern)
A:tornado.routing.(self._path, self._group_count)->self._find_groups()
A:tornado.routing.match->self.regex.match(request.path)
A:tornado.routing.path_kwargs->dict(((str(k), _unquote_or_none(v)) for (k, v) in match.groupdict().items()))
A:tornado.routing.a->str(a)
A:tornado.routing.paren_loc->fragment.index(')')
A:tornado.routing.unescaped_fragment->re_unescape(fragment)
A:tornado.routing.matcher->PathMatches(pattern)
tornado.routing.AnyMatches(Matcher)
tornado.routing.AnyMatches.match(self,request:httputil.HTTPServerRequest)->Optional[Dict[str, Any]]
tornado.routing.DefaultHostMatches(self,application:Any,host_pattern:Pattern)
tornado.routing.DefaultHostMatches.__init__(self,application:Any,host_pattern:Pattern)
tornado.routing.DefaultHostMatches.match(self,request:httputil.HTTPServerRequest)->Optional[Dict[str, Any]]
tornado.routing.HostMatches(self,host_pattern:Union[str,Pattern])
tornado.routing.HostMatches.__init__(self,host_pattern:Union[str,Pattern])
tornado.routing.HostMatches.match(self,request:httputil.HTTPServerRequest)->Optional[Dict[str, Any]]
tornado.routing.Matcher(object)
tornado.routing.Matcher.match(self,request:httputil.HTTPServerRequest)->Optional[Dict[str, Any]]
tornado.routing.Matcher.reverse(self,*args:Any)->Optional[str]
tornado.routing.PathMatches(self,path_pattern:Union[str,Pattern])
tornado.routing.PathMatches.__init__(self,path_pattern:Union[str,Pattern])
tornado.routing.PathMatches._find_groups(self)->Tuple[Optional[str], Optional[int]]
tornado.routing.PathMatches.match(self,request:httputil.HTTPServerRequest)->Optional[Dict[str, Any]]
tornado.routing.PathMatches.reverse(self,*args:Any)->Optional[str]
tornado.routing.ReversibleRouter(Router)
tornado.routing.ReversibleRouter.reverse_url(self,name:str,*args:Any)->Optional[str]
tornado.routing.ReversibleRuleRouter(self,rules:Optional[_RuleList]=None)
tornado.routing.ReversibleRuleRouter.__init__(self,rules:Optional[_RuleList]=None)
tornado.routing.ReversibleRuleRouter.process_rule(self,rule:'Rule')->'Rule'
tornado.routing.ReversibleRuleRouter.reverse_url(self,name:str,*args:Any)->Optional[str]
tornado.routing.Router(httputil.HTTPServerConnectionDelegate)
tornado.routing.Router.find_handler(self,request:httputil.HTTPServerRequest,**kwargs:Any)->Optional[httputil.HTTPMessageDelegate]
tornado.routing.Router.start_request(self,server_conn:object,request_conn:httputil.HTTPConnection)->httputil.HTTPMessageDelegate
tornado.routing.Rule(self,matcher:'Matcher',target:Any,target_kwargs:Optional[Dict[str,Any]]=None,name:Optional[str]=None)
tornado.routing.Rule.__init__(self,matcher:'Matcher',target:Any,target_kwargs:Optional[Dict[str,Any]]=None,name:Optional[str]=None)
tornado.routing.Rule.__repr__(self)->str
tornado.routing.Rule.reverse(self,*args:Any)->Optional[str]
tornado.routing.RuleRouter(self,rules:Optional[_RuleList]=None)
tornado.routing.RuleRouter.__init__(self,rules:Optional[_RuleList]=None)
tornado.routing.RuleRouter.add_rules(self,rules:_RuleList)->None
tornado.routing.RuleRouter.find_handler(self,request:httputil.HTTPServerRequest,**kwargs:Any)->Optional[httputil.HTTPMessageDelegate]
tornado.routing.RuleRouter.get_target_delegate(self,target:Any,request:httputil.HTTPServerRequest,**target_params:Any)->Optional[httputil.HTTPMessageDelegate]
tornado.routing.RuleRouter.process_rule(self,rule:'Rule')->'Rule'
tornado.routing.URLSpec(self,pattern:Union[str,Pattern],handler:Any,kwargs:Optional[Dict[str,Any]]=None,name:Optional[str]=None)
tornado.routing.URLSpec.__init__(self,pattern:Union[str,Pattern],handler:Any,kwargs:Optional[Dict[str,Any]]=None,name:Optional[str]=None)
tornado.routing.URLSpec.__repr__(self)->str
tornado.routing._DefaultMessageDelegate(self,connection:httputil.HTTPConnection)
tornado.routing._DefaultMessageDelegate.__init__(self,connection:httputil.HTTPConnection)
tornado.routing._DefaultMessageDelegate.finish(self)->None
tornado.routing._RoutingDelegate(self,router:Router,server_conn:object,request_conn:httputil.HTTPConnection)
tornado.routing._RoutingDelegate.__init__(self,router:Router,server_conn:object,request_conn:httputil.HTTPConnection)
tornado.routing._RoutingDelegate.data_received(self,chunk:bytes)->Optional[Awaitable[None]]
tornado.routing._RoutingDelegate.finish(self)->None
tornado.routing._RoutingDelegate.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->Optional[Awaitable[None]]
tornado.routing._RoutingDelegate.on_connection_close(self)->None
tornado.routing._unquote_or_none(s:Optional[str])->Optional[bytes]


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/simple_httpclient.py----------------------------------------
A:tornado.simple_httpclient.self.queue->collections.deque()
A:tornado.simple_httpclient.self.resolver->OverrideResolver(resolver=self.resolver, mapping=hostname_mapping)
A:tornado.simple_httpclient.self.tcp_client->TCPClient(resolver=self.resolver)
A:tornado.simple_httpclient.key->object()
A:tornado.simple_httpclient.timeout_handle->self.io_loop.add_timeout(self.io_loop.time() + timeout, functools.partial(self._on_timeout, key, 'in request queue'))
A:tornado.simple_httpclient.(key, request, callback)->self.queue.popleft()
A:tornado.simple_httpclient.release_callback->functools.partial(self._release_fetch, key)
A:tornado.simple_httpclient.timeout_response->HTTPResponse(request, 599, error=HTTPTimeoutError(error_message), request_time=self.io_loop.time() - request.start_time)
A:tornado.simple_httpclient._SUPPORTED_METHODS->set(['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'])
A:tornado.simple_httpclient.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.simple_httpclient.self.start_time->self.io_loop.time()
A:tornado.simple_httpclient.self.start_wall_time->time.time()
A:tornado.simple_httpclient.self.parsed->urllib.parse.urlsplit(_unicode(self.request.url))
A:tornado.simple_httpclient.(userpass, _, netloc)->netloc.rpartition('@')
A:tornado.simple_httpclient.(host, port)->tornado.httputil.split_host_and_port(netloc)
A:tornado.simple_httpclient.ssl_options->self._get_ssl_options(self.parsed.scheme)
A:tornado.simple_httpclient.timeout->min(self.request.connect_timeout, self.request.request_timeout)
A:tornado.simple_httpclient.self._timeout->self.io_loop.add_timeout(self.start_time + self.request.request_timeout, functools.partial(self._on_timeout, 'during request'))
A:tornado.simple_httpclient.self.request.headers['User-Agent']->'Tornado/{}'.format(version)
A:tornado.simple_httpclient.self.request.headers['Content-Length']->str(len(self.request.body))
A:tornado.simple_httpclient.self.connection->self._create_connection(stream)
A:tornado.simple_httpclient.start_line->tornado.httputil.RequestStartLine(self.request.method, req_path, '')
A:tornado.simple_httpclient.ssl_ctx->ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=self.request.ca_certs)
A:tornado.simple_httpclient.connection->HTTP1Connection(stream, True, HTTP1ConnectionParameters(no_keep_alive=True, max_header_size=self.max_header_size, max_body_size=self.max_body_size, decompress=bool(self.request.decompress_response)), self._sockaddr)
A:tornado.simple_httpclient.fut->self.client.fetch(new_request, raise_error=False)
A:tornado.simple_httpclient.value->HTTPStreamClosedError('Stream closed')
A:tornado.simple_httpclient.data->b''.join(self.chunks)
A:tornado.simple_httpclient.original_request->getattr(self.request, 'original_request', self.request)
A:tornado.simple_httpclient.new_request->copy.copy(self.request.request)
A:tornado.simple_httpclient.new_request.url->urllib.parse.urljoin(self.request.url, self.headers['Location'])
A:tornado.simple_httpclient.buffer->BytesIO(data)
A:tornado.simple_httpclient.response->HTTPResponse(original_request, self.code, reason=getattr(self, 'reason', None), headers=self.headers, request_time=self.io_loop.time() - self.start_time, start_time=self.start_wall_time, buffer=buffer, effective_url=self.request.url)
tornado.simple_httpclient.HTTPStreamClosedError(self,message:str)
tornado.simple_httpclient.HTTPStreamClosedError.__init__(self,message:str)
tornado.simple_httpclient.HTTPStreamClosedError.__str__(self)->str
tornado.simple_httpclient.HTTPTimeoutError(self,message:str)
tornado.simple_httpclient.HTTPTimeoutError.__init__(self,message:str)
tornado.simple_httpclient.HTTPTimeoutError.__str__(self)->str
tornado.simple_httpclient.SimpleAsyncHTTPClient(AsyncHTTPClient)
tornado.simple_httpclient.SimpleAsyncHTTPClient._connection_class(self)->type
tornado.simple_httpclient.SimpleAsyncHTTPClient._handle_request(self,request:HTTPRequest,release_callback:Callable[[],None],final_callback:Callable[[HTTPResponse],None])->None
tornado.simple_httpclient.SimpleAsyncHTTPClient._on_timeout(self,key:object,info:Optional[str]=None)->None
tornado.simple_httpclient.SimpleAsyncHTTPClient._process_queue(self)->None
tornado.simple_httpclient.SimpleAsyncHTTPClient._release_fetch(self,key:object)->None
tornado.simple_httpclient.SimpleAsyncHTTPClient._remove_timeout(self,key:object)->None
tornado.simple_httpclient.SimpleAsyncHTTPClient.close(self)->None
tornado.simple_httpclient.SimpleAsyncHTTPClient.fetch_impl(self,request:HTTPRequest,callback:Callable[[HTTPResponse],None])->None
tornado.simple_httpclient.SimpleAsyncHTTPClient.initialize(self,max_clients:int=10,hostname_mapping:Optional[Dict[str,str]]=None,max_buffer_size:int=104857600,resolver:Optional[Resolver]=None,defaults:Optional[Dict[str,Any]]=None,max_header_size:Optional[int]=None,max_body_size:Optional[int]=None)->None
tornado.simple_httpclient._HTTPConnection(self,client:Optional[SimpleAsyncHTTPClient],request:HTTPRequest,release_callback:Callable[[],None],final_callback:Callable[[HTTPResponse],None],max_buffer_size:int,tcp_client:TCPClient,max_header_size:int,max_body_size:int)
tornado.simple_httpclient._HTTPConnection.__init__(self,client:Optional[SimpleAsyncHTTPClient],request:HTTPRequest,release_callback:Callable[[],None],final_callback:Callable[[HTTPResponse],None],max_buffer_size:int,tcp_client:TCPClient,max_header_size:int,max_body_size:int)
tornado.simple_httpclient._HTTPConnection._create_connection(self,stream:IOStream)->HTTP1Connection
tornado.simple_httpclient._HTTPConnection._get_ssl_options(self,scheme:str)->Union[None, Dict[str, Any], ssl.SSLContext]
tornado.simple_httpclient._HTTPConnection._handle_exception(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[TracebackType])->bool
tornado.simple_httpclient._HTTPConnection._on_end_request(self)->None
tornado.simple_httpclient._HTTPConnection._on_timeout(self,info:Optional[str]=None)->None
tornado.simple_httpclient._HTTPConnection._release(self)->None
tornado.simple_httpclient._HTTPConnection._remove_timeout(self)->None
tornado.simple_httpclient._HTTPConnection._run_callback(self,response:HTTPResponse)->None
tornado.simple_httpclient._HTTPConnection._should_follow_redirect(self)->bool
tornado.simple_httpclient._HTTPConnection._write_body(self,start_read:bool)->None
tornado.simple_httpclient._HTTPConnection.data_received(self,chunk:bytes)->None
tornado.simple_httpclient._HTTPConnection.finish(self)->None
tornado.simple_httpclient._HTTPConnection.headers_received(self,first_line:Union[httputil.ResponseStartLine,httputil.RequestStartLine],headers:httputil.HTTPHeaders)->None
tornado.simple_httpclient._HTTPConnection.on_connection_close(self)->None
tornado.simple_httpclient._HTTPConnection.run(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/httpserver.py----------------------------------------
A:tornado.httpserver.self.conn_params->HTTP1ConnectionParameters(decompress=decompress_request, chunk_size=chunk_size, max_header_size=max_header_size, header_timeout=idle_connection_timeout or 3600, max_body_size=max_body_size, body_timeout=body_timeout, no_keep_alive=no_keep_alive)
A:tornado.httpserver.self._connections->set()
A:tornado.httpserver.conn->HTTP1ServerConnection(stream, self.conn_params, context)
A:tornado.httpserver.context->_HTTPRequestContext(stream, address, self.protocol, self.trusted_downstream)
A:tornado.httpserver.delegate->_ProxyAdapter(delegate, request_conn)
A:tornado.httpserver.self.request->tornado.httputil.HTTPServerRequest(connection=self.connection, start_line=typing.cast(httputil.RequestStartLine, start_line), headers=headers)
A:tornado.httpserver.self.request.body->b''.join(self._chunks)
A:tornado.httpserver.self.trusted_downstream->set(trusted_downstream or [])
A:tornado.httpserver.ip->headers.get('X-Real-Ip', ip)
A:tornado.httpserver.proto_header->proto_header.split(',')[-1].strip().split(',')[-1].strip()
tornado.httpserver.HTTPServer(self,*args:Any,**kwargs:Any)
tornado.httpserver.HTTPServer.__init__(self,*args:Any,**kwargs:Any)
tornado.httpserver.HTTPServer.close_all_connections(self)->None
tornado.httpserver.HTTPServer.configurable_base(cls)->Type[Configurable]
tornado.httpserver.HTTPServer.configurable_default(cls)->Type[Configurable]
tornado.httpserver.HTTPServer.handle_stream(self,stream:iostream.IOStream,address:Tuple)->None
tornado.httpserver.HTTPServer.initialize(self,request_callback:Union[httputil.HTTPServerConnectionDelegate,Callable[[httputil.HTTPServerRequest],None]],no_keep_alive:bool=False,xheaders:bool=False,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None,protocol:Optional[str]=None,decompress_request:bool=False,chunk_size:Optional[int]=None,max_header_size:Optional[int]=None,idle_connection_timeout:Optional[float]=None,body_timeout:Optional[float]=None,max_body_size:Optional[int]=None,max_buffer_size:Optional[int]=None,trusted_downstream:Optional[List[str]]=None)->None
tornado.httpserver.HTTPServer.on_close(self,server_conn:object)->None
tornado.httpserver.HTTPServer.start_request(self,server_conn:object,request_conn:httputil.HTTPConnection)->httputil.HTTPMessageDelegate
tornado.httpserver._CallableAdapter(self,request_callback:Callable[[httputil.HTTPServerRequest],None],request_conn:httputil.HTTPConnection)
tornado.httpserver._CallableAdapter.__init__(self,request_callback:Callable[[httputil.HTTPServerRequest],None],request_conn:httputil.HTTPConnection)
tornado.httpserver._CallableAdapter.data_received(self,chunk:bytes)->Optional[Awaitable[None]]
tornado.httpserver._CallableAdapter.finish(self)->None
tornado.httpserver._CallableAdapter.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->Optional[Awaitable[None]]
tornado.httpserver._CallableAdapter.on_connection_close(self)->None
tornado.httpserver._HTTPRequestContext(self,stream:iostream.IOStream,address:Tuple,protocol:Optional[str],trusted_downstream:Optional[List[str]]=None)
tornado.httpserver._HTTPRequestContext.__init__(self,stream:iostream.IOStream,address:Tuple,protocol:Optional[str],trusted_downstream:Optional[List[str]]=None)
tornado.httpserver._HTTPRequestContext.__str__(self)->str
tornado.httpserver._HTTPRequestContext._apply_xheaders(self,headers:httputil.HTTPHeaders)->None
tornado.httpserver._HTTPRequestContext._unapply_xheaders(self)->None
tornado.httpserver._ProxyAdapter(self,delegate:httputil.HTTPMessageDelegate,request_conn:httputil.HTTPConnection)
tornado.httpserver._ProxyAdapter.__init__(self,delegate:httputil.HTTPMessageDelegate,request_conn:httputil.HTTPConnection)
tornado.httpserver._ProxyAdapter._cleanup(self)->None
tornado.httpserver._ProxyAdapter.data_received(self,chunk:bytes)->Optional[Awaitable[None]]
tornado.httpserver._ProxyAdapter.finish(self)->None
tornado.httpserver._ProxyAdapter.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->Optional[Awaitable[None]]
tornado.httpserver._ProxyAdapter.on_connection_close(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/websocket.py----------------------------------------
A:tornado.websocket.connection->map(lambda s: s.strip().lower(), headers.get('Connection', '').split(','))
A:tornado.websocket.origin->origin.lower().lower()
A:tornado.websocket.self.ws_connection->self.get_websocket_protocol()
A:tornado.websocket.message->self._compressor.compress(message)
A:tornado.websocket.data->utf8(data)
A:tornado.websocket.parsed_origin->urlparse(origin)
A:tornado.websocket.host->self.request.headers.get('Host')
A:tornado.websocket.websocket_version->self.request.headers.get('Sec-WebSocket-Version')
A:tornado.websocket.params->_WebSocketParams(ping_interval=self.ping_interval, ping_timeout=self.ping_timeout, max_message_size=self.max_message_size, compression_options=self.get_compression_options())
A:tornado.websocket.result->decompressor.decompress(data + b'\x00\x00\xff\xff', self._max_message_size)
A:tornado.websocket.self._compressor->_PerMessageDeflateCompressor(**self._get_compressor_options(side, agreed_parameters, compression_options))
A:tornado.websocket.self._decompressor->_PerMessageDeflateDecompressor(max_message_size=self.params.max_message_size, **self._get_compressor_options(other_side, agreed_parameters, compression_options))
A:tornado.websocket.sha1->hashlib.sha1()
A:tornado.websocket.subprotocol_header->handler.request.headers.get('Sec-WebSocket-Protocol')
A:tornado.websocket.self.selected_subprotocol->headers.get('Sec-WebSocket-Protocol', None)
A:tornado.websocket.extensions->self._parse_extensions_header(headers)
A:tornado.websocket.self.stream->handler._detach_stream()
A:tornado.websocket.open_result->handler.open(*handler.open_args, **handler.open_kwargs)
A:tornado.websocket.accept->self.compute_accept_value(key)
A:tornado.websocket.options->dict(persistent=side + '_no_context_takeover' not in agreed_parameters)
A:tornado.websocket.wbits_header->agreed_parameters.get(side + '_max_window_bits', None)
A:tornado.websocket.options['max_wbits']->int(wbits_header)
A:tornado.websocket.allowed_keys->set(['server_no_context_takeover', 'client_no_context_takeover', 'server_max_window_bits', 'client_max_window_bits'])
A:tornado.websocket.data_len->len(data)
A:tornado.websocket.frame->struct.pack('B', finbit | opcode | flags)
A:tornado.websocket.mask->os.urandom(4)
A:tornado.websocket.fut->self._write_frame(True, opcode, message, flags=flags)
A:tornado.websocket.(header, mask_payloadlen)->struct.unpack('BB', data)
A:tornado.websocket.self._frame_compressed->bool(reserved_bits & self.RSV1)
A:tornado.websocket.is_masked->bool(mask_payloadlen & 128)
A:tornado.websocket.self._fragmented_message_buffer->bytearray(data)
A:tornado.websocket.handled_future->self._handle_message(opcode, data)
A:tornado.websocket.decoded->utf8(data).decode('utf-8')
A:tornado.websocket.self.close_reason->to_unicode(data[2:])
A:tornado.websocket.self.last_pong->tornado.ioloop.IOLoop.current().time()
A:tornado.websocket.close_data->struct.pack('>H', code)
A:tornado.websocket.self._waiting->self.stream.io_loop.add_timeout(self.stream.io_loop.time() + 5, self._abort)
A:tornado.websocket.self.last_pingself.last_pong->tornado.ioloop.IOLoop.current().time()
A:tornado.websocket.self.ping_callback->PeriodicCallback(self.periodic_ping, self.ping_interval * 1000)
A:tornado.websocket.now->tornado.ioloop.IOLoop.current().time()
A:tornado.websocket.self.connect_future->Future()
A:tornado.websocket.self.read_queue->Queue(1)
A:tornado.websocket.self.key->base64.b64encode(os.urandom(16))
A:tornado.websocket.self.params->_WebSocketParams(ping_interval=ping_interval, ping_timeout=ping_timeout, max_message_size=max_message_size, compression_options=compression_options)
A:tornado.websocket.(scheme, sep, rest)->cast(httpclient.HTTPRequest, httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS)).url.partition(':')
A:tornado.websocket.request.headers['Sec-WebSocket-Protocol']->','.join(subprotocols)
A:tornado.websocket.self.tcp_client->TCPClient(resolver=resolver)
A:tornado.websocket.self.protocol->self.get_websocket_protocol()
A:tornado.websocket.self.protocol.stream->self.connection.detach()
A:tornado.websocket.awaitable->self.read_queue.get()
A:tornado.websocket.request.headers->tornado.httputil.HTTPHeaders(request.headers)
A:tornado.websocket.request->cast(httpclient.HTTPRequest, httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS))
A:tornado.websocket.conn->WebSocketClientConnection(request, on_message_callback=on_message_callback, compression_options=compression_options, ping_interval=ping_interval, ping_timeout=ping_timeout, max_message_size=max_message_size, subprotocols=subprotocols, resolver=resolver)
tornado.websocket.WebSocketClientConnection(self,request:httpclient.HTTPRequest,on_message_callback:Optional[Callable[[Union[None,str,bytes]],None]]=None,compression_options:Optional[Dict[str,Any]]=None,ping_interval:Optional[float]=None,ping_timeout:Optional[float]=None,max_message_size:int=_default_max_message_size,subprotocols:Optional[List[str]]=[],resolver:Optional[Resolver]=None)
tornado.websocket.WebSocketClientConnection.__init__(self,request:httpclient.HTTPRequest,on_message_callback:Optional[Callable[[Union[None,str,bytes]],None]]=None,compression_options:Optional[Dict[str,Any]]=None,ping_interval:Optional[float]=None,ping_timeout:Optional[float]=None,max_message_size:int=_default_max_message_size,subprotocols:Optional[List[str]]=[],resolver:Optional[Resolver]=None)
tornado.websocket.WebSocketClientConnection._on_http_response(self,response:httpclient.HTTPResponse)->None
tornado.websocket.WebSocketClientConnection._on_message(self,message:Union[None,str,bytes])->Optional[Awaitable[None]]
tornado.websocket.WebSocketClientConnection.close(self,code:Optional[int]=None,reason:Optional[str]=None)->None
tornado.websocket.WebSocketClientConnection.get_websocket_protocol(self)->WebSocketProtocol
tornado.websocket.WebSocketClientConnection.headers_received(self,start_line:Union[httputil.RequestStartLine,httputil.ResponseStartLine],headers:httputil.HTTPHeaders)->None
tornado.websocket.WebSocketClientConnection.log_exception(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[TracebackType])->None
tornado.websocket.WebSocketClientConnection.on_connection_close(self)->None
tornado.websocket.WebSocketClientConnection.on_message(self,message:Union[str,bytes])->Optional[Awaitable[None]]
tornado.websocket.WebSocketClientConnection.on_ping(self,data:bytes)->None
tornado.websocket.WebSocketClientConnection.on_pong(self,data:bytes)->None
tornado.websocket.WebSocketClientConnection.on_ws_connection_close(self,close_code:Optional[int]=None,close_reason:Optional[str]=None)->None
tornado.websocket.WebSocketClientConnection.ping(self,data:bytes=b'')->None
tornado.websocket.WebSocketClientConnection.read_message(self,callback:Optional[Callable[['Future[Union[None,str,bytes]]'],None]]=None)->Awaitable[Union[None, str, bytes]]
tornado.websocket.WebSocketClientConnection.selected_subprotocol(self)->Optional[str]
tornado.websocket.WebSocketClientConnection.write_message(self,message:Union[str,bytes,Dict[str,Any]],binary:bool=False)->'Future[None]'
tornado.websocket.WebSocketClosedError(WebSocketError)
tornado.websocket.WebSocketError(Exception)
tornado.websocket.WebSocketHandler(self,application:tornado.web.Application,request:httputil.HTTPServerRequest,**kwargs:Any)
tornado.websocket.WebSocketHandler.__init__(self,application:tornado.web.Application,request:httputil.HTTPServerRequest,**kwargs:Any)
tornado.websocket.WebSocketHandler._break_cycles(self)->None
tornado.websocket.WebSocketHandler._detach_stream(self)->IOStream
tornado.websocket.WebSocketHandler.check_origin(self,origin:str)->bool
tornado.websocket.WebSocketHandler.close(self,code:Optional[int]=None,reason:Optional[str]=None)->None
tornado.websocket.WebSocketHandler.get(self,*args:Any,**kwargs:Any)->None
tornado.websocket.WebSocketHandler.get_compression_options(self)->Optional[Dict[str, Any]]
tornado.websocket.WebSocketHandler.get_websocket_protocol(self)->Optional['WebSocketProtocol']
tornado.websocket.WebSocketHandler.max_message_size(self)->int
tornado.websocket.WebSocketHandler.on_close(self)->None
tornado.websocket.WebSocketHandler.on_connection_close(self)->None
tornado.websocket.WebSocketHandler.on_message(self,message:Union[str,bytes])->Optional[Awaitable[None]]
tornado.websocket.WebSocketHandler.on_ping(self,data:bytes)->None
tornado.websocket.WebSocketHandler.on_pong(self,data:bytes)->None
tornado.websocket.WebSocketHandler.on_ws_connection_close(self,close_code:Optional[int]=None,close_reason:Optional[str]=None)->None
tornado.websocket.WebSocketHandler.open(self,*args:str,**kwargs:str)->Optional[Awaitable[None]]
tornado.websocket.WebSocketHandler.ping(self,data:Union[str,bytes]=b'')->None
tornado.websocket.WebSocketHandler.ping_interval(self)->Optional[float]
tornado.websocket.WebSocketHandler.ping_timeout(self)->Optional[float]
tornado.websocket.WebSocketHandler.select_subprotocol(self,subprotocols:List[str])->Optional[str]
tornado.websocket.WebSocketHandler.selected_subprotocol(self)->Optional[str]
tornado.websocket.WebSocketHandler.set_nodelay(self,value:bool)->None
tornado.websocket.WebSocketHandler.write_message(self,message:Union[bytes,str,Dict[str,Any]],binary:bool=False)->'Future[None]'
tornado.websocket.WebSocketProtocol(self,handler:'_WebSocketDelegate')
tornado.websocket.WebSocketProtocol.__init__(self,handler:'_WebSocketDelegate')
tornado.websocket.WebSocketProtocol._abort(self)->None
tornado.websocket.WebSocketProtocol._process_server_headers(self,key:Union[str,bytes],headers:httputil.HTTPHeaders)->None
tornado.websocket.WebSocketProtocol._receive_frame_loop(self)->None
tornado.websocket.WebSocketProtocol._run_callback(self,callback:Callable,*args:Any,**kwargs:Any)->'Optional[Future[Any]]'
tornado.websocket.WebSocketProtocol.accept_connection(self,handler:WebSocketHandler)->None
tornado.websocket.WebSocketProtocol.close(self,code:Optional[int]=None,reason:Optional[str]=None)->None
tornado.websocket.WebSocketProtocol.is_closing(self)->bool
tornado.websocket.WebSocketProtocol.on_connection_close(self)->None
tornado.websocket.WebSocketProtocol.selected_subprotocol(self)->Optional[str]
tornado.websocket.WebSocketProtocol.set_nodelay(self,x:bool)->None
tornado.websocket.WebSocketProtocol.start_pinging(self)->None
tornado.websocket.WebSocketProtocol.write_message(self,message:Union[str,bytes,Dict[str,Any]],binary:bool=False)->'Future[None]'
tornado.websocket.WebSocketProtocol.write_ping(self,data:bytes)->None
tornado.websocket.WebSocketProtocol13(self,handler:'_WebSocketDelegate',mask_outgoing:bool,params:_WebSocketParams)
tornado.websocket.WebSocketProtocol13.__init__(self,handler:'_WebSocketDelegate',mask_outgoing:bool,params:_WebSocketParams)
tornado.websocket.WebSocketProtocol13._accept_connection(self,handler:WebSocketHandler)->None
tornado.websocket.WebSocketProtocol13._challenge_response(self,handler:WebSocketHandler)->str
tornado.websocket.WebSocketProtocol13._create_compressors(self,side:str,agreed_parameters:Dict[str,Any],compression_options:Optional[Dict[str,Any]]=None)->None
tornado.websocket.WebSocketProtocol13._get_compressor_options(self,side:str,agreed_parameters:Dict[str,Any],compression_options:Optional[Dict[str,Any]]=None)->Dict[str, Any]
tornado.websocket.WebSocketProtocol13._handle_message(self,opcode:int,data:bytes)->'Optional[Future[None]]'
tornado.websocket.WebSocketProtocol13._handle_websocket_headers(self,handler:WebSocketHandler)->None
tornado.websocket.WebSocketProtocol13._parse_extensions_header(self,headers:httputil.HTTPHeaders)->List[Tuple[str, Dict[str, str]]]
tornado.websocket.WebSocketProtocol13._process_server_headers(self,key:Union[str,bytes],headers:httputil.HTTPHeaders)->None
tornado.websocket.WebSocketProtocol13._read_bytes(self,n:int)->bytes
tornado.websocket.WebSocketProtocol13._receive_frame(self)->None
tornado.websocket.WebSocketProtocol13._receive_frame_loop(self)->None
tornado.websocket.WebSocketProtocol13._write_frame(self,fin:bool,opcode:int,data:bytes,flags:int=0)->'Future[None]'
tornado.websocket.WebSocketProtocol13.accept_connection(self,handler:WebSocketHandler)->None
tornado.websocket.WebSocketProtocol13.close(self,code:Optional[int]=None,reason:Optional[str]=None)->None
tornado.websocket.WebSocketProtocol13.compute_accept_value(key:Union[str,bytes])->str
tornado.websocket.WebSocketProtocol13.is_closing(self)->bool
tornado.websocket.WebSocketProtocol13.periodic_ping(self)->None
tornado.websocket.WebSocketProtocol13.ping_interval(self)->Optional[float]
tornado.websocket.WebSocketProtocol13.ping_timeout(self)->Optional[float]
tornado.websocket.WebSocketProtocol13.selected_subprotocol(self)->Optional[str]
tornado.websocket.WebSocketProtocol13.selected_subprotocol(self,value:Optional[str])->None
tornado.websocket.WebSocketProtocol13.set_nodelay(self,x:bool)->None
tornado.websocket.WebSocketProtocol13.start_pinging(self)->None
tornado.websocket.WebSocketProtocol13.write_message(self,message:Union[str,bytes,Dict[str,Any]],binary:bool=False)->'Future[None]'
tornado.websocket.WebSocketProtocol13.write_ping(self,data:bytes)->None
tornado.websocket._DecompressTooLargeError(Exception)
tornado.websocket._PerMessageDeflateCompressor(self,persistent:bool,max_wbits:Optional[int],compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._PerMessageDeflateCompressor.__init__(self,persistent:bool,max_wbits:Optional[int],compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._PerMessageDeflateCompressor._create_compressor(self)->'_Compressor'
tornado.websocket._PerMessageDeflateCompressor.compress(self,data:bytes)->bytes
tornado.websocket._PerMessageDeflateDecompressor(self,persistent:bool,max_wbits:Optional[int],max_message_size:int,compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._PerMessageDeflateDecompressor.__init__(self,persistent:bool,max_wbits:Optional[int],max_message_size:int,compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._PerMessageDeflateDecompressor._create_decompressor(self)->'_Decompressor'
tornado.websocket._PerMessageDeflateDecompressor.decompress(self,data:bytes)->bytes
tornado.websocket._WebSocketParams(self,ping_interval:Optional[float]=None,ping_timeout:Optional[float]=None,max_message_size:int=_default_max_message_size,compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._WebSocketParams.__init__(self,ping_interval:Optional[float]=None,ping_timeout:Optional[float]=None,max_message_size:int=_default_max_message_size,compression_options:Optional[Dict[str,Any]]=None)
tornado.websocket._raise_not_supported_for_websockets(*args:Any,**kwargs:Any)->None
tornado.websocket.websocket_connect(url:Union[str,httpclient.HTTPRequest],callback:Optional[Callable[['Future[WebSocketClientConnection]'],None]]=None,connect_timeout:Optional[float]=None,on_message_callback:Optional[Callable[[Union[None,str,bytes]],None]]=None,compression_options:Optional[Dict[str,Any]]=None,ping_interval:Optional[float]=None,ping_timeout:Optional[float]=None,max_message_size:int=_default_max_message_size,subprotocols:Optional[List[str]]=None,resolver:Optional[Resolver]=None)->'Awaitable[WebSocketClientConnection]'


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/tcpserver.py----------------------------------------
A:tornado.tcpserver.sockets->bind_sockets(port, address=address, family=family, backlog=backlog, flags=flags, reuse_port=reuse_port)
A:tornado.tcpserver.self._handlers[sock.fileno()]->add_accept_handler(sock, self._handle_connection)
A:tornado.tcpserver.connection->ssl_wrap_socket(connection, self.ssl_options, server_side=True, do_handshake_on_connect=False)
A:tornado.tcpserver.stream->IOStream(connection, max_buffer_size=self.max_buffer_size, read_chunk_size=self.read_chunk_size)
A:tornado.tcpserver.future->self.handle_stream(stream, address)
tornado.tcpserver.TCPServer(self,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None,max_buffer_size:Optional[int]=None,read_chunk_size:Optional[int]=None)
tornado.tcpserver.TCPServer.__init__(self,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None,max_buffer_size:Optional[int]=None,read_chunk_size:Optional[int]=None)
tornado.tcpserver.TCPServer._handle_connection(self,connection:socket.socket,address:Any)->None
tornado.tcpserver.TCPServer.add_socket(self,socket:socket.socket)->None
tornado.tcpserver.TCPServer.add_sockets(self,sockets:Iterable[socket.socket])->None
tornado.tcpserver.TCPServer.bind(self,port:int,address:Optional[str]=None,family:socket.AddressFamily=socket.AF_UNSPEC,backlog:int=_DEFAULT_BACKLOG,flags:Optional[int]=None,reuse_port:bool=False)->None
tornado.tcpserver.TCPServer.handle_stream(self,stream:IOStream,address:tuple)->Optional[Awaitable[None]]
tornado.tcpserver.TCPServer.listen(self,port:int,address:Optional[str]=None,family:socket.AddressFamily=socket.AF_UNSPEC,backlog:int=_DEFAULT_BACKLOG,flags:Optional[int]=None,reuse_port:bool=False)->None
tornado.tcpserver.TCPServer.start(self,num_processes:Optional[int]=1,max_restarts:Optional[int]=None)->None
tornado.tcpserver.TCPServer.stop(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/iostream.py----------------------------------------
A:tornado.iostream._IOStreamType->TypeVar('_IOStreamType', bound='IOStream')
A:tornado.iostream._WINDOWS->sys.platform.startswith('win')
A:tornado.iostream.self._buffers->collections.deque()
A:tornado.iostream.size->len(self._write_buffer)
A:tornado.iostream.data->memoryview(data).cast('B')
A:tornado.iostream.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.iostream.self.read_chunk_size->min(read_chunk_size or 65536, self.max_buffer_size // 2)
A:tornado.iostream.self._read_buffer->bytearray()
A:tornado.iostream.self._write_buffer->_StreamBuffer()
A:tornado.iostream.self._write_futures->collections.deque()
A:tornado.iostream.future->Future()
A:tornado.iostream.self._read_regex->re.compile(regex)
A:tornado.iostream.n->len(buf)
A:tornado.iostream.exc_info->sys.exc_info()
A:tornado.iostream.pos->self._read_to_buffer_loop()
A:tornado.iostream.self.error->ssl_wrap_socket(socket, ssl_options, server_hostname=server_hostname, server_side=server_side, do_handshake_on_connect=False).error(err, os.strerror(err))
A:tornado.iostream.self._read_future->Future()
A:tornado.iostream.self._read_buffer_size->len(self._read_buffer)
A:tornado.iostream.result->self._consume(size)
A:tornado.iostream.buf->bytearray(self.read_chunk_size)
A:tornado.iostream.bytes_read->self.read_from_fd(buf)
A:tornado.iostream.num_bytes->self.write_to_fd(self._write_buffer.peek(size))
A:tornado.iostream.loc->self._read_regex.search(self._read_buffer).end()
A:tornado.iostream.delimiter_len->len(self._read_delimiter)
A:tornado.iostream.m->self._read_regex.search(self._read_buffer)
A:tornado.iostream.b->memoryview(self._read_buffer)[:loc].tobytes()
A:tornado.iostream.errno->self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
A:tornado.iostream.self._connect_future->typing.cast('Future[IOStream]', future)
A:tornado.iostream.socket->ssl_wrap_socket(socket, ssl_options, server_hostname=server_hostname, server_side=server_side, do_handshake_on_connect=False)
A:tornado.iostream.ssl_stream->SSLIOStream(socket, ssl_options=ssl_options)
A:tornado.iostream.err->self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
A:tornado.iostream.self._ssl_options->kwargs.pop('ssl_options', _client_ssl_defaults)
A:tornado.iostream.peer->self.socket.getpeername()
A:tornado.iostream.verify_mode->self._ssl_options.get('cert_reqs', ssl.CERT_NONE)
A:tornado.iostream.cert->self.socket.getpeercert()
A:tornado.iostream.fut->super().connect(address)
A:tornado.iostream.self.socket->ssl_wrap_socket(self.socket, self._ssl_options, server_hostname=self._server_hostname, do_handshake_on_connect=False, server_side=False)
A:tornado.iostream.futureself._ssl_connect_future->Future()
A:tornado.iostream.self._fio->io.FileIO(self.fd, 'r+')
tornado.iostream.BaseIOStream(self,max_buffer_size:Optional[int]=None,read_chunk_size:Optional[int]=None,max_write_buffer_size:Optional[int]=None)
tornado.iostream.BaseIOStream.__init__(self,max_buffer_size:Optional[int]=None,read_chunk_size:Optional[int]=None,max_write_buffer_size:Optional[int]=None)
tornado.iostream.BaseIOStream._add_io_state(self,state:int)->None
tornado.iostream.BaseIOStream._check_closed(self)->None
tornado.iostream.BaseIOStream._check_max_bytes(self,delimiter:Union[bytes,Pattern],size:int)->None
tornado.iostream.BaseIOStream._consume(self,loc:int)->bytes
tornado.iostream.BaseIOStream._find_read_pos(self)->Optional[int]
tornado.iostream.BaseIOStream._finish_read(self,size:int)->None
tornado.iostream.BaseIOStream._handle_connect(self)->None
tornado.iostream.BaseIOStream._handle_events(self,fd:Union[int,ioloop._Selectable],events:int)->None
tornado.iostream.BaseIOStream._handle_read(self)->None
tornado.iostream.BaseIOStream._handle_write(self)->None
tornado.iostream.BaseIOStream._is_connreset(self,exc:BaseException)->bool
tornado.iostream.BaseIOStream._maybe_add_error_listener(self)->None
tornado.iostream.BaseIOStream._read_from_buffer(self,pos:int)->None
tornado.iostream.BaseIOStream._read_to_buffer(self)->Optional[int]
tornado.iostream.BaseIOStream._read_to_buffer_loop(self)->Optional[int]
tornado.iostream.BaseIOStream._signal_closed(self)->None
tornado.iostream.BaseIOStream._start_read(self)->Future
tornado.iostream.BaseIOStream._try_inline_read(self)->None
tornado.iostream.BaseIOStream.close(self,exc_info:Union[None,bool,BaseException,Tuple['Optional[Type[BaseException]]',Optional[BaseException],Optional[TracebackType]]]=False)->None
tornado.iostream.BaseIOStream.close_fd(self)->None
tornado.iostream.BaseIOStream.closed(self)->bool
tornado.iostream.BaseIOStream.fileno(self)->Union[int, ioloop._Selectable]
tornado.iostream.BaseIOStream.get_fd_error(self)->Optional[Exception]
tornado.iostream.BaseIOStream.read_bytes(self,num_bytes:int,partial:bool=False)->Awaitable[bytes]
tornado.iostream.BaseIOStream.read_from_fd(self,buf:Union[bytearray,memoryview])->Optional[int]
tornado.iostream.BaseIOStream.read_into(self,buf:bytearray,partial:bool=False)->Awaitable[int]
tornado.iostream.BaseIOStream.read_until(self,delimiter:bytes,max_bytes:Optional[int]=None)->Awaitable[bytes]
tornado.iostream.BaseIOStream.read_until_close(self)->Awaitable[bytes]
tornado.iostream.BaseIOStream.read_until_regex(self,regex:bytes,max_bytes:Optional[int]=None)->Awaitable[bytes]
tornado.iostream.BaseIOStream.reading(self)->bool
tornado.iostream.BaseIOStream.set_close_callback(self,callback:Optional[Callable[[],None]])->None
tornado.iostream.BaseIOStream.set_nodelay(self,value:bool)->None
tornado.iostream.BaseIOStream.write(self,data:Union[bytes,memoryview])->'Future[None]'
tornado.iostream.BaseIOStream.write_to_fd(self,data:memoryview)->int
tornado.iostream.BaseIOStream.writing(self)->bool
tornado.iostream.IOStream(self,socket:socket.socket,*args:Any,**kwargs:Any)
tornado.iostream.IOStream.__init__(self,socket:socket.socket,*args:Any,**kwargs:Any)
tornado.iostream.IOStream._handle_connect(self)->None
tornado.iostream.IOStream.close_fd(self)->None
tornado.iostream.IOStream.connect(self:_IOStreamType,address:Any,server_hostname:Optional[str]=None)->'Future[_IOStreamType]'
tornado.iostream.IOStream.fileno(self)->Union[int, ioloop._Selectable]
tornado.iostream.IOStream.get_fd_error(self)->Optional[Exception]
tornado.iostream.IOStream.read_from_fd(self,buf:Union[bytearray,memoryview])->Optional[int]
tornado.iostream.IOStream.set_nodelay(self,value:bool)->None
tornado.iostream.IOStream.start_tls(self,server_side:bool,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None,server_hostname:Optional[str]=None)->Awaitable['SSLIOStream']
tornado.iostream.IOStream.write_to_fd(self,data:memoryview)->int
tornado.iostream.PipeIOStream(self,fd:int,*args:Any,**kwargs:Any)
tornado.iostream.PipeIOStream.__init__(self,fd:int,*args:Any,**kwargs:Any)
tornado.iostream.PipeIOStream.close_fd(self)->None
tornado.iostream.PipeIOStream.fileno(self)->int
tornado.iostream.PipeIOStream.read_from_fd(self,buf:Union[bytearray,memoryview])->Optional[int]
tornado.iostream.PipeIOStream.write_to_fd(self,data:memoryview)->int
tornado.iostream.SSLIOStream(self,*args:Any,**kwargs:Any)
tornado.iostream.SSLIOStream.__init__(self,*args:Any,**kwargs:Any)
tornado.iostream.SSLIOStream._do_ssl_handshake(self)->None
tornado.iostream.SSLIOStream._finish_ssl_connect(self)->None
tornado.iostream.SSLIOStream._handle_connect(self)->None
tornado.iostream.SSLIOStream._handle_read(self)->None
tornado.iostream.SSLIOStream._handle_write(self)->None
tornado.iostream.SSLIOStream._is_connreset(self,e:BaseException)->bool
tornado.iostream.SSLIOStream._verify_cert(self,peercert:Any)->bool
tornado.iostream.SSLIOStream.connect(self,address:Tuple,server_hostname:Optional[str]=None)->'Future[SSLIOStream]'
tornado.iostream.SSLIOStream.read_from_fd(self,buf:Union[bytearray,memoryview])->Optional[int]
tornado.iostream.SSLIOStream.reading(self)->bool
tornado.iostream.SSLIOStream.wait_for_handshake(self)->'Future[SSLIOStream]'
tornado.iostream.SSLIOStream.write_to_fd(self,data:memoryview)->int
tornado.iostream.SSLIOStream.writing(self)->bool
tornado.iostream.StreamBufferFullError(Exception)
tornado.iostream.StreamClosedError(self,real_error:Optional[BaseException]=None)
tornado.iostream.StreamClosedError.__init__(self,real_error:Optional[BaseException]=None)
tornado.iostream.UnsatisfiableReadError(Exception)
tornado.iostream._StreamBuffer(self)
tornado.iostream._StreamBuffer.__init__(self)
tornado.iostream._StreamBuffer.__len__(self)->int
tornado.iostream._StreamBuffer.advance(self,size:int)->None
tornado.iostream._StreamBuffer.append(self,data:Union[bytes,bytearray,memoryview])->None
tornado.iostream._StreamBuffer.peek(self,size:int)->memoryview
tornado.iostream.doctests()->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/util.py----------------------------------------
A:tornado.util.is_finalizing->_get_emulated_is_finalizing()
A:tornado.util.self.decompressobj->zlib.decompressobj(16 + zlib.MAX_WBITS)
A:tornado.util.parts->name.split('.')
A:tornado.util.obj->__import__('.'.join(parts[:-1]), fromlist=[parts[-1]])
A:tornado.util.code->compile(code, '<string>', 'exec', dont_inherit=True)
A:tornado.util._alphanum->frozenset('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
A:tornado.util.group->match.group(1)
A:tornado.util._re_unescape_pattern->re.compile('\\\\(.)', re.DOTALL)
A:tornado.util.base->cls.configurable_base()
A:tornado.util.impl->typing.cast(Type[Configurable], import_object(impl))
A:tornado.util.instance->super(Configurable, cls).__new__(impl)
A:tornado.util.base.__impl_class->cls.configurable_default()
A:tornado.util.self.arg_pos->self._getargnames(func).index(name)
A:tornado.util.args->list(args)
A:tornado.util.old_value->kwargs.get(self.name)
A:tornado.util.mask_arr->array.array('B', mask)
A:tornado.util.unmasked_arr->array.array('B', data)
tornado.util.ArgReplacer(self,func:Callable,name:str)
tornado.util.ArgReplacer.__init__(self,func:Callable,name:str)
tornado.util.ArgReplacer._getargnames(self,func:Callable)->List[str]
tornado.util.ArgReplacer.get_old_value(self,args:Sequence[Any],kwargs:Dict[str,Any],default:Any=None)->Any
tornado.util.ArgReplacer.replace(self,new_value:Any,args:Sequence[Any],kwargs:Dict[str,Any])->Tuple[Any, Sequence[Any], Dict[str, Any]]
tornado.util.Configurable(cls,*args:Any,**kwargs:Any)
tornado.util.Configurable.__new__(cls,*args:Any,**kwargs:Any)
tornado.util.Configurable._initialize(self)->None
tornado.util.Configurable._restore_configuration(cls,saved)
tornado.util.Configurable._save_configuration(cls)
tornado.util.Configurable.configurable_base(cls)
tornado.util.Configurable.configurable_default(cls)
tornado.util.Configurable.configure(cls,impl,**kwargs)
tornado.util.Configurable.configured_class(cls)
tornado.util.GzipDecompressor(self)
tornado.util.GzipDecompressor.__init__(self)
tornado.util.GzipDecompressor.decompress(self,value:bytes,max_length:int=0)->bytes
tornado.util.GzipDecompressor.flush(self)->bytes
tornado.util.GzipDecompressor.unconsumed_tail(self)->bytes
tornado.util.ObjectDict(Dict[str,Any])
tornado.util.ObjectDict.__getattr__(self,name:str)->Any
tornado.util.ObjectDict.__setattr__(self,name:str,value:Any)->None
tornado.util._re_unescape_replacement(match:Match[str])->str
tornado.util._websocket_mask_python(mask:bytes,data:bytes)->bytes
tornado.util.doctests()
tornado.util.errno_from_exception(e:BaseException)->Optional[int]
tornado.util.exec_in(code:Any,glob:Dict[str,Any],loc:Optional[Optional[Mapping[str,Any]]]=None)->None
tornado.util.import_object(name:str)->Any
tornado.util.raise_exc_info(exc_info:Tuple[Optional[type],Optional[BaseException],Optional['TracebackType']])->typing.NoReturn
tornado.util.re_unescape(s:str)->str
tornado.util.timedelta_to_seconds(td)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/tcpclient.py----------------------------------------
A:tornado.tcpclient.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.tcpclient.self.future->Future()
A:tornado.tcpclient.self.remaining->len(addrinfo)
A:tornado.tcpclient.(self.primary_addrs, self.secondary_addrs)->self.split(addrinfo)
A:tornado.tcpclient.self.streams->set()
A:tornado.tcpclient.(af, addr)->next(addrs)
A:tornado.tcpclient.(stream, future)->self.connect(af, addr)
A:tornado.tcpclient.stream->IOStream(socket_obj, max_buffer_size=max_buffer_size)
A:tornado.tcpclient.self.timeout->self.io_loop.add_timeout(self.io_loop.time() + timeout, self.on_timeout)
A:tornado.tcpclient.self.connect_timeout->self.io_loop.add_timeout(connect_timeout, self.on_connect_timeout)
A:tornado.tcpclient.self.resolver->Resolver()
A:tornado.tcpclient.connector->_Connector(addrinfo, functools.partial(self._create_stream, max_buffer_size, source_ip=source_ip, source_port=source_port))
A:tornado.tcpclient.socket_obj->socket.socket(af)
A:tornado.tcpclient.fu->Future()
tornado.tcpclient.TCPClient(self,resolver:Optional[Resolver]=None)
tornado.tcpclient.TCPClient.__init__(self,resolver:Optional[Resolver]=None)
tornado.tcpclient.TCPClient._create_stream(self,max_buffer_size:int,af:socket.AddressFamily,addr:Tuple,source_ip:Optional[str]=None,source_port:Optional[int]=None)->Tuple[IOStream, 'Future[IOStream]']
tornado.tcpclient.TCPClient.close(self)->None
tornado.tcpclient.TCPClient.connect(self,host:str,port:int,af:socket.AddressFamily=socket.AF_UNSPEC,ssl_options:Optional[Union[Dict[str,Any],ssl.SSLContext]]=None,max_buffer_size:Optional[int]=None,source_ip:Optional[str]=None,source_port:Optional[int]=None,timeout:Optional[Union[float,datetime.timedelta]]=None)->IOStream
tornado.tcpclient._Connector(self,addrinfo:List[Tuple],connect:Callable[[socket.AddressFamily,Tuple],Tuple[IOStream,'Future[IOStream]']])
tornado.tcpclient._Connector.__init__(self,addrinfo:List[Tuple],connect:Callable[[socket.AddressFamily,Tuple],Tuple[IOStream,'Future[IOStream]']])
tornado.tcpclient._Connector.clear_timeout(self)->None
tornado.tcpclient._Connector.clear_timeouts(self)->None
tornado.tcpclient._Connector.close_streams(self)->None
tornado.tcpclient._Connector.on_connect_done(self,addrs:Iterator[Tuple[socket.AddressFamily,Tuple]],af:socket.AddressFamily,addr:Tuple,future:'Future[IOStream]')->None
tornado.tcpclient._Connector.on_connect_timeout(self)->None
tornado.tcpclient._Connector.on_timeout(self)->None
tornado.tcpclient._Connector.set_connect_timeout(self,connect_timeout:Union[float,datetime.timedelta])->None
tornado.tcpclient._Connector.set_timeout(self,timeout:float)->None
tornado.tcpclient._Connector.split(addrinfo:List[Tuple])->Tuple[List[Tuple[socket.AddressFamily, Tuple]], List[Tuple[socket.AddressFamily, Tuple]]]
tornado.tcpclient._Connector.start(self,timeout:float=_INITIAL_CONNECT_TIMEOUT,connect_timeout:Optional[Union[float,datetime.timedelta]]=None)->'Future[Tuple[socket.AddressFamily, Any, IOStream]]'
tornado.tcpclient._Connector.try_connect(self,addrs:Iterator[Tuple[socket.AddressFamily,Tuple]])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/log.py----------------------------------------
A:tornado.log.access_log->logging.getLogger('tornado.access')
A:tornado.log.app_log->logging.getLogger('tornado.application')
A:tornado.log.gen_log->logging.getLogger('tornado.general')
A:tornado.log.self._colors[levelno]->unicode_type(curses.tparm(fg_color, code), 'ascii')
A:tornado.log.normal->curses.tigetstr('sgr0')
A:tornado.log.self._normal->unicode_type(normal, 'ascii')
A:tornado.log.message->record.getMessage()
A:tornado.log.record.message->_safe_unicode(message)
A:tornado.log.record.asctime->self.formatTime(record, cast(str, self.datefmt))
A:tornado.log.record.exc_text->self.formatException(record.exc_info)
A:tornado.log.formatted->'\n'.join(lines)
A:tornado.log.logger->logging.getLogger()
A:tornado.log.channel->logging.StreamHandler()
tornado.log.LogFormatter(self,fmt:str=DEFAULT_FORMAT,datefmt:str=DEFAULT_DATE_FORMAT,style:str='%',color:bool=True,colors:Dict[int,int]=DEFAULT_COLORS)
tornado.log.LogFormatter.__init__(self,fmt:str=DEFAULT_FORMAT,datefmt:str=DEFAULT_DATE_FORMAT,style:str='%',color:bool=True,colors:Dict[int,int]=DEFAULT_COLORS)
tornado.log.LogFormatter.format(self,record:Any)->str
tornado.log._safe_unicode(s:Any)->str
tornado.log._stderr_supports_color()->bool
tornado.log.define_logging_options(options:Any=None)->None
tornado.log.enable_pretty_logging(options:Any=None,logger:Optional[logging.Logger]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/locks.py----------------------------------------
A:tornado.locks.self._waiters->set()
A:tornado.locks.waiter->Future()
A:tornado.locks.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.locks.timeout_handle->tornado.ioloop.IOLoop.current().add_timeout(timeout, on_timeout)
A:tornado.locks.fut->Future()
A:tornado.locks.timeout_fut->tornado.gen.with_timeout(timeout, fut)
A:tornado.locks.res->super().__repr__()
A:tornado.locks.extra->'{0},waiters:{1}'.format(extra, len(self._waiters))
A:tornado.locks.self._block->BoundedSemaphore(value=1)
tornado.locks.BoundedSemaphore(self,value:int=1)
tornado.locks.BoundedSemaphore.__init__(self,value:int=1)
tornado.locks.BoundedSemaphore.release(self)->None
tornado.locks.Condition(_TimeoutGarbageCollector)
tornado.locks.Condition.__repr__(self)->str
tornado.locks.Condition.notify(self,n:int=1)->None
tornado.locks.Condition.notify_all(self)->None
tornado.locks.Condition.wait(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[bool]
tornado.locks.Event(self)
tornado.locks.Event.__init__(self)
tornado.locks.Event.__repr__(self)->str
tornado.locks.Event.clear(self)->None
tornado.locks.Event.is_set(self)->bool
tornado.locks.Event.set(self)->None
tornado.locks.Event.wait(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[None]
tornado.locks.Lock(self)
tornado.locks.Lock.__aenter__(self)->None
tornado.locks.Lock.__aexit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[types.TracebackType])->None
tornado.locks.Lock.__enter__(self)->None
tornado.locks.Lock.__exit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[types.TracebackType])->None
tornado.locks.Lock.__init__(self)
tornado.locks.Lock.__repr__(self)->str
tornado.locks.Lock.acquire(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[_ReleasingContextManager]
tornado.locks.Lock.release(self)->None
tornado.locks.Semaphore(self,value:int=1)
tornado.locks.Semaphore.__aenter__(self)->None
tornado.locks.Semaphore.__aexit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],tb:Optional[types.TracebackType])->None
tornado.locks.Semaphore.__enter__(self)->None
tornado.locks.Semaphore.__exit__(self,typ:'Optional[Type[BaseException]]',value:Optional[BaseException],traceback:Optional[types.TracebackType])->None
tornado.locks.Semaphore.__init__(self,value:int=1)
tornado.locks.Semaphore.__repr__(self)->str
tornado.locks.Semaphore.acquire(self,timeout:Optional[Union[float,datetime.timedelta]]=None)->Awaitable[_ReleasingContextManager]
tornado.locks.Semaphore.release(self)->None
tornado.locks._ReleasingContextManager(self,obj:Any)
tornado.locks._ReleasingContextManager.__enter__(self)->None
tornado.locks._ReleasingContextManager.__exit__(self,exc_type:'Optional[Type[BaseException]]',exc_val:Optional[BaseException],exc_tb:Optional[types.TracebackType])->None
tornado.locks._ReleasingContextManager.__init__(self,obj:Any)
tornado.locks._TimeoutGarbageCollector(self)
tornado.locks._TimeoutGarbageCollector.__init__(self)
tornado.locks._TimeoutGarbageCollector._garbage_collect(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/autoreload.py----------------------------------------
A:tornado.autoreload._watched_files->set()
A:tornado.autoreload._io_loops->weakref.WeakKeyDictionary()
A:tornado.autoreload.io_loop->tornado.ioloop.IOLoop()
A:tornado.autoreload.callback->functools.partial(_reload_on_update, modify_times)
A:tornado.autoreload.scheduler->tornado.ioloop.PeriodicCallback(callback, check_time)
A:tornado.autoreload.path->getattr(module, '__file__', None)
A:tornado.autoreload.spec->getattr(sys.modules['__main__'], '__spec__', None)
A:tornado.autoreload.original_spec->getattr(sys.modules['__main__'], '__spec__', None)
A:tornado.autoreload.loader->pkgutil.get_loader(module)
tornado.autoreload._check_file(modify_times:Dict[str,float],path:str)->None
tornado.autoreload._reload()->None
tornado.autoreload._reload_on_update(modify_times:Dict[str,float])->None
tornado.autoreload.add_reload_hook(fn:Callable[[],None])->None
tornado.autoreload.main()->None
tornado.autoreload.start(check_time:int=500)->None
tornado.autoreload.wait()->None
tornado.autoreload.watch(filename:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/platform/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/platform/caresresolver.py----------------------------------------
A:tornado.platform.caresresolver.self.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.platform.caresresolver.self.channel->pycares.Channel(sock_state_cb=self._sock_state_cb)
A:tornado.platform.caresresolver.fut->Future()
tornado.platform.caresresolver.CaresResolver(Resolver)
tornado.platform.caresresolver.CaresResolver._handle_events(self,fd:int,events:int)->None
tornado.platform.caresresolver.CaresResolver._sock_state_cb(self,fd:int,readable:bool,writable:bool)->None
tornado.platform.caresresolver.CaresResolver.initialize(self)->None
tornado.platform.caresresolver.CaresResolver.resolve(self,host:str,port:int,family:int=0)->'Generator[Any, Any, List[Tuple[int, Any]]]'


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/platform/asyncio.py----------------------------------------
A:tornado.platform.asyncio._T->TypeVar('_T')
A:tornado.platform.asyncio._selector_loops->set()
A:tornado.platform.asyncio.self.selector_loop->AddThreadSelectorEventLoop(asyncio_loop)
A:tornado.platform.asyncio.self.readers->set()
A:tornado.platform.asyncio.self.writers->set()
A:tornado.platform.asyncio.existing_loop->tornado.ioloop.IOLoop._ioloop_for_asyncio.setdefault(asyncio_loop, self)
A:tornado.platform.asyncio.(fd, fileobj)->self.split_fd(fd)
A:tornado.platform.asyncio.kwargs['asyncio_loop']loop->asyncio.new_event_loop()
A:tornado.platform.asyncio.self.old_asyncio->asyncio.get_event_loop()
A:tornado.platform.asyncio.loop->self.new_event_loop()
A:tornado.platform.asyncio.self._select_cond->threading.Condition()
A:tornado.platform.asyncio.self._thread->threading.Thread(name='Tornado selector', daemon=True, target=self._run_select)
A:tornado.platform.asyncio.(self._waker_r, self._waker_w)->socket.socketpair()
A:tornado.platform.asyncio.(rs, ws, xs)->select.select(to_read, to_write, to_write)
A:tornado.platform.asyncio.(rs, _, _)->select.select([self._waker_r.fileno()], [], [], 0)
A:tornado.platform.asyncio.self._readers[fd]->functools.partial(callback, *args)
A:tornado.platform.asyncio.self._writers[fd]->functools.partial(callback, *args)
tornado.platform.asyncio.AddThreadSelectorEventLoop(self,real_loop:asyncio.AbstractEventLoop)
tornado.platform.asyncio.AddThreadSelectorEventLoop.__del__(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop.__getattribute__(self,name:str)->Any
tornado.platform.asyncio.AddThreadSelectorEventLoop.__init__(self,real_loop:asyncio.AbstractEventLoop)
tornado.platform.asyncio.AddThreadSelectorEventLoop._consume_waker(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop._handle_event(self,fd:'_FileDescriptorLike',cb_map:Dict['_FileDescriptorLike',Callable])->None
tornado.platform.asyncio.AddThreadSelectorEventLoop._handle_select(self,rs:List['_FileDescriptorLike'],ws:List['_FileDescriptorLike'])->None
tornado.platform.asyncio.AddThreadSelectorEventLoop._run_select(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop._start_select(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop._wake_selector(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop.add_reader(self,fd:'_FileDescriptorLike',callback:Callable[...,None],*args:Any)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop.add_writer(self,fd:'_FileDescriptorLike',callback:Callable[...,None],*args:Any)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop.close(self)->None
tornado.platform.asyncio.AddThreadSelectorEventLoop.remove_reader(self,fd:'_FileDescriptorLike')->bool
tornado.platform.asyncio.AddThreadSelectorEventLoop.remove_writer(self,fd:'_FileDescriptorLike')->bool
tornado.platform.asyncio.AnyThreadEventLoopPolicy(self)
tornado.platform.asyncio.AnyThreadEventLoopPolicy.__init__(self)
tornado.platform.asyncio.AnyThreadEventLoopPolicy.get_event_loop(self)->asyncio.AbstractEventLoop
tornado.platform.asyncio.AsyncIOLoop(BaseAsyncIOLoop)
tornado.platform.asyncio.AsyncIOLoop._clear_current_hook(self)->None
tornado.platform.asyncio.AsyncIOLoop._make_current(self)->None
tornado.platform.asyncio.AsyncIOLoop.close(self,all_fds:bool=False)->None
tornado.platform.asyncio.AsyncIOLoop.initialize(self,**kwargs:Any)->None
tornado.platform.asyncio.AsyncIOMainLoop(BaseAsyncIOLoop)
tornado.platform.asyncio.AsyncIOMainLoop._make_current(self)->None
tornado.platform.asyncio.AsyncIOMainLoop.initialize(self,**kwargs:Any)->None
tornado.platform.asyncio.BaseAsyncIOLoop(IOLoop)
tornado.platform.asyncio.BaseAsyncIOLoop._handle_events(self,fd:int,events:int)->None
tornado.platform.asyncio.BaseAsyncIOLoop.add_callback(self,callback:Callable,*args:Any,**kwargs:Any)->None
tornado.platform.asyncio.BaseAsyncIOLoop.add_callback_from_signal(self,callback:Callable,*args:Any,**kwargs:Any)->None
tornado.platform.asyncio.BaseAsyncIOLoop.add_handler(self,fd:Union[int,_Selectable],handler:Callable[...,None],events:int)->None
tornado.platform.asyncio.BaseAsyncIOLoop.call_at(self,when:float,callback:Callable,*args:Any,**kwargs:Any)->object
tornado.platform.asyncio.BaseAsyncIOLoop.close(self,all_fds:bool=False)->None
tornado.platform.asyncio.BaseAsyncIOLoop.initialize(self,asyncio_loop:asyncio.AbstractEventLoop,**kwargs:Any)->None
tornado.platform.asyncio.BaseAsyncIOLoop.remove_handler(self,fd:Union[int,_Selectable])->None
tornado.platform.asyncio.BaseAsyncIOLoop.remove_timeout(self,timeout:object)->None
tornado.platform.asyncio.BaseAsyncIOLoop.run_in_executor(self,executor:Optional[concurrent.futures.Executor],func:Callable[...,_T],*args:Any)->Awaitable[_T]
tornado.platform.asyncio.BaseAsyncIOLoop.set_default_executor(self,executor:concurrent.futures.Executor)->None
tornado.platform.asyncio.BaseAsyncIOLoop.start(self)->None
tornado.platform.asyncio.BaseAsyncIOLoop.stop(self)->None
tornado.platform.asyncio.BaseAsyncIOLoop.update_handler(self,fd:Union[int,_Selectable],events:int)->None
tornado.platform.asyncio._atexit_callback()->None
tornado.platform.asyncio.to_asyncio_future(tornado_future:asyncio.Future)->asyncio.Future
tornado.platform.asyncio.to_tornado_future(asyncio_future:asyncio.Future)->asyncio.Future


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/platform/twisted.py----------------------------------------
A:tornado.platform.twisted.self.reactor->twisted.internet.asyncioreactor.AsyncioSelectorReactor()
A:tornado.platform.twisted.host_resolver->twisted.names.hosts.Resolver('/etc/hosts')
A:tornado.platform.twisted.cache_resolver->twisted.names.cache.CacheResolver(reactor=self.reactor)
A:tornado.platform.twisted.real_resolver->twisted.names.client.Resolver('/etc/resolv.conf', reactor=self.reactor)
A:tornado.platform.twisted.self.resolver->twisted.names.resolve.ResolverChain([host_resolver, cache_resolver, real_resolver])
A:tornado.platform.twisted.deferred->self.resolver.getHostByName(utf8(host))
A:tornado.platform.twisted.fut->Future()
A:tornado.platform.twisted.f->Future()
tornado.platform.twisted.TwistedResolver(Resolver)
tornado.platform.twisted.TwistedResolver.initialize(self)->None
tornado.platform.twisted.TwistedResolver.resolve(self,host:str,port:int,family:int=0)->'Generator[Any, Any, List[Tuple[int, Any]]]'
tornado.platform.twisted.install()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/asyncio_test.py----------------------------------------
A:tornado.test.asyncio_test.ensure_future->getattr(asyncio, 'async')
A:tornado.test.asyncio_test.event_loop->asyncio.get_event_loop()
A:tornado.test.asyncio_test.self.orig_policy->asyncio.get_event_loop_policy()
A:tornado.test.asyncio_test.loop->asyncio.get_event_loop()
A:tornado.test.asyncio_test.orig_count->len(IOLoop._ioloop_for_asyncio)
A:tornado.test.asyncio_test.self.executor->ThreadPoolExecutor(1)
A:tornado.test.asyncio_test.future->self.executor.submit(get_and_close_event_loop)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest(unittest.TestCase)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.get_event_loop_on_thread(self)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.setUp(self)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.tearDown(self)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_asyncio_accessor(self)
tornado.test.asyncio_test.AnyThreadEventLoopPolicyTest.test_tornado_accessor(self)
tornado.test.asyncio_test.AsyncIOLoopTest(AsyncTestCase)
tornado.test.asyncio_test.AsyncIOLoopTest.asyncio_loop(self)
tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_adapter(self)
tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_callback(self)
tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_future(self)
tornado.test.asyncio_test.AsyncIOLoopTest.test_asyncio_yield_from(self)
tornado.test.asyncio_test.LeakTest(unittest.TestCase)
tornado.test.asyncio_test.LeakTest.setUp(self)
tornado.test.asyncio_test.LeakTest.tearDown(self)
tornado.test.asyncio_test.LeakTest.test_asyncio_close_leak(self)
tornado.test.asyncio_test.LeakTest.test_ioloop_close_leak(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/template_test.py----------------------------------------
A:tornado.test.template_test.template->Template('{{ 1 / 2 }}')
A:tornado.test.template_test.loader->DictLoader({'foo.html': '{% whitespace oneline %}\n    {% for i in range(3) %}\n        {{ i }}\n    {% end %}\n{% whitespace all %}\n    pre\tformatted\n'})
A:tornado.test.template_test.result->self.loader.load('utf8.html').generate()
A:tornado.test.template_test.exc_stack->traceback.format_exc()
A:tornado.test.template_test.self.loader->Loader(os.path.join(os.path.dirname(__file__), 'templates'))
A:tornado.test.template_test.tmpl->self.loader.load('utf8.html')
tornado.test.template_test.AutoEscapeTest(unittest.TestCase)
tornado.test.template_test.AutoEscapeTest.setUp(self)
tornado.test.template_test.AutoEscapeTest.test_custom_escape(self)
tornado.test.template_test.AutoEscapeTest.test_default_off(self)
tornado.test.template_test.AutoEscapeTest.test_default_on(self)
tornado.test.template_test.AutoEscapeTest.test_extended_block(self)
tornado.test.template_test.AutoEscapeTest.test_manual_minimize_whitespace(self)
tornado.test.template_test.AutoEscapeTest.test_raw_expression(self)
tornado.test.template_test.AutoEscapeTest.test_unextended_block(self)
tornado.test.template_test.AutoEscapeTest.test_whitespace_by_filename(self)
tornado.test.template_test.AutoEscapeTest.test_whitespace_by_loader(self)
tornado.test.template_test.AutoEscapeTest.test_whitespace_directive(self)
tornado.test.template_test.ParseErrorDetailTest(unittest.TestCase)
tornado.test.template_test.ParseErrorDetailTest.test_custom_parse_error(self)
tornado.test.template_test.ParseErrorDetailTest.test_details(self)
tornado.test.template_test.StackTraceTest(unittest.TestCase)
tornado.test.template_test.StackTraceTest.test_error_line_number_directive(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_expression(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_base_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_sub_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_include(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_module(self)
tornado.test.template_test.StackTraceTest.test_multi_includes(self)
tornado.test.template_test.TemplateLoaderTest(unittest.TestCase)
tornado.test.template_test.TemplateLoaderTest.setUp(self)
tornado.test.template_test.TemplateLoaderTest.test_utf8_in_file(self)
tornado.test.template_test.TemplateTest(unittest.TestCase)
tornado.test.template_test.TemplateTest.test_apply(self)
tornado.test.template_test.TemplateTest.test_break_continue(self)
tornado.test.template_test.TemplateTest.test_break_in_apply(self)
tornado.test.template_test.TemplateTest.test_break_outside_loop(self)
tornado.test.template_test.TemplateTest.test_bytes(self)
tornado.test.template_test.TemplateTest.test_bytes_apply(self)
tornado.test.template_test.TemplateTest.test_comment(self)
tornado.test.template_test.TemplateTest.test_comment_directive(self)
tornado.test.template_test.TemplateTest.test_custom_namespace(self)
tornado.test.template_test.TemplateTest.test_escaping(self)
tornado.test.template_test.TemplateTest.test_expressions(self)
tornado.test.template_test.TemplateTest.test_extends(self)
tornado.test.template_test.TemplateTest.test_if(self)
tornado.test.template_test.TemplateTest.test_if_empty_body(self)
tornado.test.template_test.TemplateTest.test_include(self)
tornado.test.template_test.TemplateTest.test_no_inherit_future(self)
tornado.test.template_test.TemplateTest.test_non_ascii_name(self)
tornado.test.template_test.TemplateTest.test_relative_load(self)
tornado.test.template_test.TemplateTest.test_simple(self)
tornado.test.template_test.TemplateTest.test_try(self)
tornado.test.template_test.TemplateTest.test_unicode_apply(self)
tornado.test.template_test.TemplateTest.test_unicode_literal_expression(self)
tornado.test.template_test.TemplateTest.test_unicode_template(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/websocket_test.py----------------------------------------
A:tornado.test.websocket_test.self.close_future->Future()
A:tornado.test.websocket_test.response->self.wait().result()
A:tornado.test.websocket_test.ws->self.wait().result()
A:tornado.test.websocket_test.(sock, port)->bind_unused_port()
A:tornado.test.websocket_test.port->self.get_http_port()
A:tornado.test.websocket_test.families->set((addr[0] for addr in addrinfo))
A:tornado.test.websocket_test.self.message_sent->Event()
tornado.test.websocket_test.AsyncPrepareHandler(TestWebSocketHandler)
tornado.test.websocket_test.AsyncPrepareHandler.on_message(self,message)
tornado.test.websocket_test.AsyncPrepareHandler.prepare(self)
tornado.test.websocket_test.ClientOnlyCompressionTest(UncompressedTestMixin,WebSocketBaseTestCase)
tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options(self)
tornado.test.websocket_test.ClientPeriodicPingTest(WebSocketBaseTestCase)
tornado.test.websocket_test.ClientPeriodicPingTest.get_app(self)
tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping(self)
tornado.test.websocket_test.CloseReasonHandler(TestWebSocketHandler)
tornado.test.websocket_test.CloseReasonHandler.open(self)
tornado.test.websocket_test.CompressionTestMixin(object)
tornado.test.websocket_test.CompressionTestMixin.get_app(self)
tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options(self)
tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options(self)
tornado.test.websocket_test.CompressionTestMixin.test_message_sizes(self:typing.Any)
tornado.test.websocket_test.CompressionTestMixin.test_size_limit(self:typing.Any)
tornado.test.websocket_test.CompressionTestMixin.verify_wire_bytes(self,bytes_in:int,bytes_out:int)->None
tornado.test.websocket_test.CoroutineOnMessageHandler(TestWebSocketHandler)
tornado.test.websocket_test.CoroutineOnMessageHandler.initialize(self,**kwargs)
tornado.test.websocket_test.CoroutineOnMessageHandler.on_message(self,message)
tornado.test.websocket_test.CythonMaskFunctionTest(MaskFunctionMixin,unittest.TestCase)
tornado.test.websocket_test.CythonMaskFunctionTest.mask(self,mask,data)
tornado.test.websocket_test.DefaultCompressionTest(CompressionTestMixin,WebSocketBaseTestCase)
tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options(self)
tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options(self)
tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes(self,bytes_in,bytes_out)
tornado.test.websocket_test.EchoHandler(TestWebSocketHandler)
tornado.test.websocket_test.EchoHandler.on_message(self,message)
tornado.test.websocket_test.ErrorInAsyncOpenHandler(TestWebSocketHandler)
tornado.test.websocket_test.ErrorInAsyncOpenHandler.open(self)
tornado.test.websocket_test.ErrorInOnMessageHandler(TestWebSocketHandler)
tornado.test.websocket_test.ErrorInOnMessageHandler.on_message(self,message)
tornado.test.websocket_test.ErrorInOpenHandler(TestWebSocketHandler)
tornado.test.websocket_test.ErrorInOpenHandler.open(self)
tornado.test.websocket_test.HeaderEchoHandler(TestWebSocketHandler)
tornado.test.websocket_test.HeaderEchoHandler.prepare(self)
tornado.test.websocket_test.HeaderEchoHandler.set_default_headers(self)
tornado.test.websocket_test.HeaderHandler(TestWebSocketHandler)
tornado.test.websocket_test.HeaderHandler.open(self)
tornado.test.websocket_test.ManualPingTest(WebSocketBaseTestCase)
tornado.test.websocket_test.ManualPingTest.get_app(self)
tornado.test.websocket_test.ManualPingTest.test_manual_ping(self)
tornado.test.websocket_test.MaskFunctionMixin(object)
tornado.test.websocket_test.MaskFunctionMixin.mask(self,mask:bytes,data:bytes)->bytes
tornado.test.websocket_test.MaskFunctionMixin.test_mask(self:typing.Any)
tornado.test.websocket_test.MaxMessageSizeTest(WebSocketBaseTestCase)
tornado.test.websocket_test.MaxMessageSizeTest.get_app(self)
tornado.test.websocket_test.MaxMessageSizeTest.test_large_message(self)
tornado.test.websocket_test.NativeCoroutineOnMessageHandler(TestWebSocketHandler)
tornado.test.websocket_test.NativeCoroutineOnMessageHandler.initialize(self,**kwargs)
tornado.test.websocket_test.NativeCoroutineOnMessageHandler.on_message(self,message)
tornado.test.websocket_test.NoCompressionTest(UncompressedTestMixin,WebSocketBaseTestCase)
tornado.test.websocket_test.NoDelayHandler(TestWebSocketHandler)
tornado.test.websocket_test.NoDelayHandler.open(self)
tornado.test.websocket_test.NonWebSocketHandler(RequestHandler)
tornado.test.websocket_test.NonWebSocketHandler.get(self)
tornado.test.websocket_test.OpenCoroutineHandler(TestWebSocketHandler)
tornado.test.websocket_test.OpenCoroutineHandler.initialize(self,test,**kwargs)
tornado.test.websocket_test.OpenCoroutineHandler.on_message(self,message)
tornado.test.websocket_test.OpenCoroutineHandler.open(self)
tornado.test.websocket_test.PathArgsHandler(TestWebSocketHandler)
tornado.test.websocket_test.PathArgsHandler.open(self,arg)
tornado.test.websocket_test.PythonMaskFunctionTest(MaskFunctionMixin,unittest.TestCase)
tornado.test.websocket_test.PythonMaskFunctionTest.mask(self,mask,data)
tornado.test.websocket_test.RedirectHandler(RequestHandler)
tornado.test.websocket_test.RedirectHandler.get(self)
tornado.test.websocket_test.RenderMessageHandler(TestWebSocketHandler)
tornado.test.websocket_test.RenderMessageHandler.on_message(self,message)
tornado.test.websocket_test.ServerOnlyCompressionTest(UncompressedTestMixin,WebSocketBaseTestCase)
tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options(self)
tornado.test.websocket_test.ServerPeriodicPingTest(WebSocketBaseTestCase)
tornado.test.websocket_test.ServerPeriodicPingTest.get_app(self)
tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping(self)
tornado.test.websocket_test.SubprotocolHandler(TestWebSocketHandler)
tornado.test.websocket_test.SubprotocolHandler.initialize(self,**kwargs)
tornado.test.websocket_test.SubprotocolHandler.open(self)
tornado.test.websocket_test.SubprotocolHandler.select_subprotocol(self,subprotocols)
tornado.test.websocket_test.TestWebSocketHandler(WebSocketHandler)
tornado.test.websocket_test.TestWebSocketHandler.get_compression_options(self)
tornado.test.websocket_test.TestWebSocketHandler.initialize(self,close_future=None,compression_options=None)
tornado.test.websocket_test.TestWebSocketHandler.on_close(self)
tornado.test.websocket_test.UncompressedTestMixin(CompressionTestMixin)
tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes(self:typing.Any,bytes_in,bytes_out)
tornado.test.websocket_test.WebSocketBaseTestCase(AsyncHTTPTestCase)
tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect(self,path,**kwargs)
tornado.test.websocket_test.WebSocketNativeCoroutineTest(WebSocketBaseTestCase)
tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app(self)
tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine(self)
tornado.test.websocket_test.WebSocketTest(WebSocketBaseTestCase)
tornado.test.websocket_test.WebSocketTest.get_app(self)
tornado.test.websocket_test.WebSocketTest.get_http_client(self)
tornado.test.websocket_test.WebSocketTest.tearDown(self)
tornado.test.websocket_test.WebSocketTest.test_async_prepare(self)
tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version(self)
tornado.test.websocket_test.WebSocketTest.test_binary_message(self)
tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid(self)
tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url(self)
tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains(self)
tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path(self)
tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path(self)
tornado.test.websocket_test.WebSocketTest.test_client_close_reason(self)
tornado.test.websocket_test.WebSocketTest.test_coroutine(self)
tornado.test.websocket_test.WebSocketTest.test_error_in_async_open(self)
tornado.test.websocket_test.WebSocketTest.test_error_in_closed_client_write_message(self)
tornado.test.websocket_test.WebSocketTest.test_error_in_on_message(self)
tornado.test.websocket_test.WebSocketTest.test_error_in_open(self)
tornado.test.websocket_test.WebSocketTest.test_http_request(self)
tornado.test.websocket_test.WebSocketTest.test_missing_websocket_key(self)
tornado.test.websocket_test.WebSocketTest.test_nodelay(self)
tornado.test.websocket_test.WebSocketTest.test_open_coroutine(self)
tornado.test.websocket_test.WebSocketTest.test_path_args(self)
tornado.test.websocket_test.WebSocketTest.test_render_message(self)
tornado.test.websocket_test.WebSocketTest.test_server_close_reason(self)
tornado.test.websocket_test.WebSocketTest.test_subprotocols(self)
tornado.test.websocket_test.WebSocketTest.test_subprotocols_not_offered(self)
tornado.test.websocket_test.WebSocketTest.test_unicode_message(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_gen(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_headers(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_http_redirect(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_http_success(self)
tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail(self)
tornado.test.websocket_test.WebSocketTest.test_write_after_close(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/escape_test.py----------------------------------------
A:tornado.test.escape_test.linked->tornado.escape.linkify(text, **kwargs)
tornado.test.escape_test.EscapeTestCase(unittest.TestCase)
tornado.test.escape_test.EscapeTestCase.test_escape_return_types(self)
tornado.test.escape_test.EscapeTestCase.test_json_decode(self)
tornado.test.escape_test.EscapeTestCase.test_json_encode(self)
tornado.test.escape_test.EscapeTestCase.test_linkify(self)
tornado.test.escape_test.EscapeTestCase.test_recursive_unicode(self)
tornado.test.escape_test.EscapeTestCase.test_squeeze(self)
tornado.test.escape_test.EscapeTestCase.test_url_escape_quote_plus(self)
tornado.test.escape_test.EscapeTestCase.test_url_escape_unicode(self)
tornado.test.escape_test.EscapeTestCase.test_url_unescape_unicode(self)
tornado.test.escape_test.EscapeTestCase.test_xhtml_escape(self)
tornado.test.escape_test.EscapeTestCase.test_xhtml_unescape_numeric(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/wsgi_test.py----------------------------------------
A:tornado.test.wsgi_test.executor->self.get_executor()
A:tornado.test.wsgi_test.self.barrier->threading.Barrier(2, timeout=0.3)
A:tornado.test.wsgi_test.n->self.barrier.wait()
A:tornado.test.wsgi_test.response->self.fetch('/simple')
tornado.test.wsgi_test.WSGIAppMixin
tornado.test.wsgi_test.WSGIAppMixin.barrier_wsgi_app(self,environ,start_response)
tornado.test.wsgi_test.WSGIAppMixin.get_app(self)
tornado.test.wsgi_test.WSGIAppMixin.get_executor(self)
tornado.test.wsgi_test.WSGIAppMixin.respond_plain(self,start_response)
tornado.test.wsgi_test.WSGIAppMixin.simple_wsgi_app(self,environ,start_response)
tornado.test.wsgi_test.WSGIAppMixin.streaming_barrier_wsgi_app(self,environ,start_response)
tornado.test.wsgi_test.WSGIContainerDummyExecutorTest(WSGIAppMixin,AsyncHTTPTestCase)
tornado.test.wsgi_test.WSGIContainerDummyExecutorTest.get_executor(self)
tornado.test.wsgi_test.WSGIContainerDummyExecutorTest.test_concurrent_barrier(self)
tornado.test.wsgi_test.WSGIContainerDummyExecutorTest.test_concurrent_streaming_barrier(self)
tornado.test.wsgi_test.WSGIContainerDummyExecutorTest.test_simple(self)
tornado.test.wsgi_test.WSGIContainerThreadPoolTest(WSGIAppMixin,AsyncHTTPTestCase)
tornado.test.wsgi_test.WSGIContainerThreadPoolTest.get_executor(self)
tornado.test.wsgi_test.WSGIContainerThreadPoolTest.test_concurrent_barrier(self)
tornado.test.wsgi_test.WSGIContainerThreadPoolTest.test_concurrent_streaming_barrier(self)
tornado.test.wsgi_test.WSGIContainerThreadPoolTest.test_simple(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/httpclient_test.py----------------------------------------
A:tornado.test.httpclient_test.name->self.get_argument('name', 'world')
A:tornado.test.httpclient_test.count->int(count)
A:tornado.test.httpclient_test.response->self.http_client.fetch(self.get_url('/'))
A:tornado.test.httpclient_test.(sock, port)->bind_unused_port()
A:tornado.test.httpclient_test.stream->IOStream(conn)
A:tornado.test.httpclient_test.resp->HTTPResponse(HTTPRequest('http://example.com/'), 403)
A:tornado.test.httpclient_test.username->unicodedata.normalize('NFD', 'josé')
A:tornado.test.httpclient_test.url->self.get_url('/hello')
A:tornado.test.httpclient_test.byte_body->binascii.a2b_hex(b'e9')
A:tornado.test.httpclient_test.f->gzip.GzipFile(mode='r', fileobj=response.buffer)
A:tornado.test.httpclient_test.(k, v)->header_line.split(':', 1)
A:tornado.test.httpclient_test.headers[k.lower()]->v.strip()
A:tornado.test.httpclient_test.defaults->dict(user_agent='TestDefaultUserAgent', allow_ipv6=False)
A:tornado.test.httpclient_test.client->self.http_client.__class__(force_instance=True, defaults=defaults)
A:tornado.test.httpclient_test.headers->container()
A:tornado.test.httpclient_test.request->HTTPRequest('http://example.com', if_modified_since=http_date)
A:tornado.test.httpclient_test.start_time->time.time()
A:tornado.test.httpclient_test.fut->self.http_client.fetch(self.get_url('/404'))
A:tornado.test.httpclient_test.proxy->_RequestProxy(HTTPRequest('http://example.com/'), None)
A:tornado.test.httpclient_test.s->str(response)
A:tornado.test.httpclient_test.self.server_ioloop->IOLoop(make_current=False)
A:tornado.test.httpclient_test.event->threading.Event()
A:tornado.test.httpclient_test.(sock, self.port)->bind_unused_port()
A:tornado.test.httpclient_test.app->Application([('/', HelloWorldHandler)])
A:tornado.test.httpclient_test.self.server->HTTPServer(app)
A:tornado.test.httpclient_test.self.server_thread->threading.Thread(target=start)
A:tornado.test.httpclient_test.self.http_client->HTTPClient()
A:tornado.test.httpclient_test.proc->subprocess.run([sys.executable, '-c', 'from tornado.httpclient import HTTPClient; f = lambda: None; c = HTTPClient()'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True, timeout=5)
A:tornado.test.httpclient_test.http_date->datetime.datetime.utcnow()
A:tornado.test.httpclient_test.e->HTTPError(403)
A:tornado.test.httpclient_test.e2->copy.copy(e)
tornado.test.httpclient_test.AllMethodsHandler(RequestHandler)
tornado.test.httpclient_test.AllMethodsHandler.method(self)
tornado.test.httpclient_test.AuthHandler(RequestHandler)
tornado.test.httpclient_test.AuthHandler.get(self)
tornado.test.httpclient_test.ChunkHandler(RequestHandler)
tornado.test.httpclient_test.ChunkHandler.get(self)
tornado.test.httpclient_test.ContentLength304Handler(RequestHandler)
tornado.test.httpclient_test.ContentLength304Handler._clear_representation_headers(self)
tornado.test.httpclient_test.ContentLength304Handler.get(self)
tornado.test.httpclient_test.CountdownHandler(RequestHandler)
tornado.test.httpclient_test.CountdownHandler.get(self,count)
tornado.test.httpclient_test.EchoPostHandler(RequestHandler)
tornado.test.httpclient_test.EchoPostHandler.post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase(AsyncHTTPTestCase)
tornado.test.httpclient_test.HTTPClientCommonTestCase.get_app(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_304_with_content_length(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_all_methods(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_explicit_mode(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_unicode(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_bind_source_ip(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_encoding(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_sanity_checks(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked_close(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_configure_defaults(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_credentials_in_url(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_error_after_cancel(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_follow_redirect(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error_no_raise(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_interface(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_gzip(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_callback(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_encoding(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_types(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_hello_world(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_invalid_gzip(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_method_after_redirect(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_multi_line_headers(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_non_ascii_header(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_patch_receives_payload(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_put_307(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_redirect_put_with_body(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_redirect_put_without_body(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_redirect_without_location(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_response_times(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_reuse_request_from_response(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_callback(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_types(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_unsupported_auth_mode(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_zero_timeout(self)
tornado.test.httpclient_test.HTTPErrorTestCase(unittest.TestCase)
tornado.test.httpclient_test.HTTPErrorTestCase.test_copy(self)
tornado.test.httpclient_test.HTTPErrorTestCase.test_error_with_response(self)
tornado.test.httpclient_test.HTTPErrorTestCase.test_plain_error(self)
tornado.test.httpclient_test.HTTPRequestTestCase(unittest.TestCase)
tornado.test.httpclient_test.HTTPRequestTestCase.test_body(self)
tornado.test.httpclient_test.HTTPRequestTestCase.test_body_setter(self)
tornado.test.httpclient_test.HTTPRequestTestCase.test_headers(self)
tornado.test.httpclient_test.HTTPRequestTestCase.test_headers_setter(self)
tornado.test.httpclient_test.HTTPRequestTestCase.test_if_modified_since(self)
tornado.test.httpclient_test.HTTPRequestTestCase.test_null_headers_setter(self)
tornado.test.httpclient_test.HTTPResponseTestCase(unittest.TestCase)
tornado.test.httpclient_test.HTTPResponseTestCase.test_str(self)
tornado.test.httpclient_test.HeaderEncodingHandler(RequestHandler)
tornado.test.httpclient_test.HeaderEncodingHandler.get(self)
tornado.test.httpclient_test.HelloWorldHandler(RequestHandler)
tornado.test.httpclient_test.HelloWorldHandler.get(self)
tornado.test.httpclient_test.InvalidGzipHandler(RequestHandler)
tornado.test.httpclient_test.InvalidGzipHandler.get(self)->None
tornado.test.httpclient_test.PatchHandler(RequestHandler)
tornado.test.httpclient_test.PatchHandler.patch(self)
tornado.test.httpclient_test.PostHandler(RequestHandler)
tornado.test.httpclient_test.PostHandler.post(self)
tornado.test.httpclient_test.PutHandler(RequestHandler)
tornado.test.httpclient_test.PutHandler.put(self)
tornado.test.httpclient_test.RedirectHandler(RequestHandler)
tornado.test.httpclient_test.RedirectHandler.prepare(self)
tornado.test.httpclient_test.RedirectWithoutLocationHandler(RequestHandler)
tornado.test.httpclient_test.RedirectWithoutLocationHandler.prepare(self)
tornado.test.httpclient_test.RequestProxyTest(unittest.TestCase)
tornado.test.httpclient_test.RequestProxyTest.test_bad_attribute(self)
tornado.test.httpclient_test.RequestProxyTest.test_both_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_default_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_defaults_none(self)
tornado.test.httpclient_test.RequestProxyTest.test_neither_set(self)
tornado.test.httpclient_test.RequestProxyTest.test_request_set(self)
tornado.test.httpclient_test.SetHeaderHandler(RequestHandler)
tornado.test.httpclient_test.SetHeaderHandler.get(self)
tornado.test.httpclient_test.SyncHTTPClientSubprocessTest(unittest.TestCase)
tornado.test.httpclient_test.SyncHTTPClientSubprocessTest.test_destructor_log(self)
tornado.test.httpclient_test.SyncHTTPClientTest(unittest.TestCase)
tornado.test.httpclient_test.SyncHTTPClientTest.get_url(self,path)
tornado.test.httpclient_test.SyncHTTPClientTest.setUp(self)
tornado.test.httpclient_test.SyncHTTPClientTest.tearDown(self)
tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client(self)
tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client_error(self)
tornado.test.httpclient_test.UserAgentHandler(RequestHandler)
tornado.test.httpclient_test.UserAgentHandler.get(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/iostream_test.py----------------------------------------
A:tornado.test.iostream_test.response->self.fetch('/', headers={'Connection': 'close'})
A:tornado.test.iostream_test.stream->IOStream(s)
A:tornado.test.iostream_test.self.stream->self._make_client_iostream()
A:tornado.test.iostream_test.connect_fut->self._make_client_iostream(socket.socket(), **kwargs).connect(('127.0.0.1', port))
A:tornado.test.iostream_test.write_fut->IOStream(s).write(b'GET / HTTP/1.0\r\nConnection: close\r\n\r\n')
A:tornado.test.iostream_test.it->tornado.gen.WaitIterator(connect_fut, write_fut)
A:tornado.test.iostream_test.headers->tornado.httputil.HTTPHeaders.parse(header_data.decode('latin1'))
A:tornado.test.iostream_test.content_length->int(headers['Content-Length'])
A:tornado.test.iostream_test.rf->asyncio.ensure_future(rs.read_until(b'done'))
A:tornado.test.iostream_test.event->Event()
A:tornado.test.iostream_test.cond->Condition()
A:tornado.test.iostream_test.fut->IOStream(s).wait_for_handshake()
A:tornado.test.iostream_test.closed->Event()
A:tornado.test.iostream_test.buf->self.make_streambuffer(10)
A:tornado.test.iostream_test.r->random.Random(42)
A:tornado.test.iostream_test.produce_hash->hashlib.sha1()
A:tornado.test.iostream_test.consume_hash->hashlib.sha1()
A:tornado.test.iostream_test.size->random.Random(42).randint(1, min(1000, remaining))
A:tornado.test.iostream_test.data->os.urandom(size)
A:tornado.test.iostream_test.(listener, port)->bind_unused_port()
A:tornado.test.iostream_test.server_stream_fut->Future()
A:tornado.test.iostream_test.client_stream->self._make_client_iostream(socket.socket(), **kwargs)
A:tornado.test.iostream_test.(cleanup_func, port)->refusing_port()
A:tornado.test.iostream_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.iostream_test.io_loop->tornado.ioloop.IOLoop.current()
A:tornado.test.iostream_test.ssl_ctx->ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
A:tornado.test.iostream_test.connection->ssl_wrap_socket(connection, context, server_side=True, do_handshake_on_connect=False)
A:tornado.test.iostream_test.context->ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
A:tornado.test.iostream_test.(self.listener, self.port)->bind_unused_port()
A:tornado.test.iostream_test.self.server_accepted->Future()
A:tornado.test.iostream_test.self.client_stream->IOStream(socket.socket())
A:tornado.test.iostream_test.self.server_stream->IOStream(connection)
A:tornado.test.iostream_test.client_future->self.client_start_tls(ssl.create_default_context(), server_hostname='127.0.0.1')
A:tornado.test.iostream_test.server_future->self.server_start_tls(_server_ssl_options())
A:tornado.test.iostream_test.(sock, port)->bind_unused_port()
A:tornado.test.iostream_test.server->server_cls(ssl_options=_server_ssl_options())
A:tornado.test.iostream_test.client->SSLIOStream(socket.socket(), ssl_options=ssl_ctx)
A:tornado.test.iostream_test.handshake_future->Future()
A:tornado.test.iostream_test.(r, w)->os.pipe()
A:tornado.test.iostream_test.self.random->random.Random(42)
A:tornado.test.iostream_test.got->self.to_bytes(buf.peek(size))
A:tornado.test.iostream_test.n->self.random.randrange(1, len(expected) + 1)
tornado.test.iostream_test.HelloHandler(RequestHandler)
tornado.test.iostream_test.HelloHandler.get(self)
tornado.test.iostream_test.TestIOStream(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStream._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStream._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin(TestReadWriteMixin)
tornado.test.iostream_test.TestIOStreamMixin._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin.make_iostream_pair(self:typing.Any,**kwargs)
tornado.test.iostream_test.TestIOStreamMixin.test_async_read_error_logging(self)
tornado.test.iostream_test.TestIOStreamMixin.test_connection_refused(self:typing.Any)
tornado.test.iostream_test.TestIOStreamMixin.test_future_write(self)
tornado.test.iostream_test.TestIOStreamMixin.test_gaierror(self:typing.Any)
tornado.test.iostream_test.TestIOStreamMixin.test_inline_read_error(self:typing.Any)
tornado.test.iostream_test.TestIOStreamMixin.test_read_until_close_with_error(self:typing.Any)
tornado.test.iostream_test.TestIOStreamSSL(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStreamSSL._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSL._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSLContext(TestIOStreamMixin,AsyncTestCase)
tornado.test.iostream_test.TestIOStreamSSLContext._make_client_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamSSLContext._make_server_iostream(self,connection,**kwargs)
tornado.test.iostream_test.TestIOStreamStartTLS(AsyncTestCase)
tornado.test.iostream_test.TestIOStreamStartTLS.accept(self,connection,address)
tornado.test.iostream_test.TestIOStreamStartTLS.client_send_line(self,line)
tornado.test.iostream_test.TestIOStreamStartTLS.client_start_tls(self,ssl_options=None,server_hostname=None)
tornado.test.iostream_test.TestIOStreamStartTLS.server_send_line(self,line)
tornado.test.iostream_test.TestIOStreamStartTLS.server_start_tls(self,ssl_options=None)
tornado.test.iostream_test.TestIOStreamStartTLS.setUp(self)
tornado.test.iostream_test.TestIOStreamStartTLS.tearDown(self)
tornado.test.iostream_test.TestIOStreamStartTLS.test_check_hostname(self)
tornado.test.iostream_test.TestIOStreamStartTLS.test_handshake_fail(self)
tornado.test.iostream_test.TestIOStreamStartTLS.test_start_tls_smtp(self)
tornado.test.iostream_test.TestIOStreamStartTLS.test_typed_memoryview(self)
tornado.test.iostream_test.TestIOStreamWebHTTP(TestIOStreamWebMixin,AsyncHTTPTestCase)
tornado.test.iostream_test.TestIOStreamWebHTTP._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebHTTPS(TestIOStreamWebMixin,AsyncHTTPSTestCase)
tornado.test.iostream_test.TestIOStreamWebHTTPS._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebMixin(object)
tornado.test.iostream_test.TestIOStreamWebMixin._make_client_iostream(self)
tornado.test.iostream_test.TestIOStreamWebMixin.get_app(self)
tornado.test.iostream_test.TestIOStreamWebMixin.test_connection_closed(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_future_close_while_reading(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_future_interface(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_future_read_until_close(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_read_until_close(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_read_zero_bytes(self:typing.Any)
tornado.test.iostream_test.TestIOStreamWebMixin.test_write_while_connecting(self:typing.Any)
tornado.test.iostream_test.TestPipeIOStream(TestReadWriteMixin,AsyncTestCase)
tornado.test.iostream_test.TestPipeIOStream.make_iostream_pair(self,**kwargs)
tornado.test.iostream_test.TestPipeIOStream.test_pipe_iostream(self)
tornado.test.iostream_test.TestPipeIOStream.test_pipe_iostream_big_write(self)
tornado.test.iostream_test.TestReadWriteMixin(object)
tornado.test.iostream_test.TestReadWriteMixin.iostream_pair(self,**kwargs)
tornado.test.iostream_test.TestReadWriteMixin.make_iostream_pair(self,**kwargs)
tornado.test.iostream_test.TestReadWriteMixin.test_close_buffered_data(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_close_callback_with_pending_read(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_flow_control(self)
tornado.test.iostream_test.TestReadWriteMixin.test_future_close_callback(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_future_delayed_close_callback(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_large_read_until(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_many_mixed_reads(self)
tornado.test.iostream_test.TestReadWriteMixin.test_read_bytes_partial(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_into(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_into_partial(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_into_zero_bytes(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_close_after_close(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_max_bytes(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_max_bytes_ignores_extra(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_max_bytes_inline(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_regex_max_bytes(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_regex_max_bytes_ignores_extra(self)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_regex_max_bytes_inline(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_unsatisfied_after_close(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_read_until_with_close_after_second_packet(self)
tornado.test.iostream_test.TestReadWriteMixin.test_small_read_untils_from_large_buffer(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_small_reads_from_large_buffer(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_write_memoryview(self:typing.Any)
tornado.test.iostream_test.TestReadWriteMixin.test_write_zero_bytes(self)
tornado.test.iostream_test.TestStreamBuffer(unittest.TestCase)
tornado.test.iostream_test.TestStreamBuffer.check_append_all_then_skip_all(self,buf,objs,input_type)
tornado.test.iostream_test.TestStreamBuffer.check_peek(self,buf,expected)
tornado.test.iostream_test.TestStreamBuffer.make_streambuffer(self,large_buf_threshold=10)
tornado.test.iostream_test.TestStreamBuffer.setUp(self)
tornado.test.iostream_test.TestStreamBuffer.test_large(self)
tornado.test.iostream_test.TestStreamBuffer.test_small(self)
tornado.test.iostream_test.TestStreamBuffer.to_bytes(self,b)
tornado.test.iostream_test.WaitForHandshakeTest(AsyncTestCase)
tornado.test.iostream_test.WaitForHandshakeTest.connect_to_server(self,server_cls)
tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_connected(self)
tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_waiting_error(self)
tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_future(self)
tornado.test.iostream_test._server_ssl_options()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/testing_test.py----------------------------------------
A:tornado.test.testing_test.old_value->os.environ.get(name)
A:tornado.test.testing_test.event->Event()
A:tornado.test.testing_test.(sock, port)->bind_unused_port()
A:tornado.test.testing_test.app->Application()
A:tornado.test.testing_test.server->HTTPServer(app, **self.get_httpserver_options())
A:tornado.test.testing_test.response->self.fetch(path)
A:tornado.test.testing_test.test->SetUpTearDown('test')
A:tornado.test.testing_test.result->unittest.TestResult()
tornado.test.testing_test.AsyncHTTPTestCaseSetUpTearDownTest(unittest.TestCase)
tornado.test.testing_test.AsyncHTTPTestCaseSetUpTearDownTest.test_tear_down_releases_app_and_http_server(self)
tornado.test.testing_test.AsyncHTTPTestCaseTest(AsyncHTTPTestCase)
tornado.test.testing_test.AsyncHTTPTestCaseTest.get_app(self)
tornado.test.testing_test.AsyncHTTPTestCaseTest.setUp(self)
tornado.test.testing_test.AsyncHTTPTestCaseTest.tearDown(self)
tornado.test.testing_test.AsyncHTTPTestCaseTest.test_fetch_full_http_url(self)
tornado.test.testing_test.AsyncHTTPTestCaseTest.test_fetch_segment(self)
tornado.test.testing_test.AsyncTestCaseTest(AsyncTestCase)
tornado.test.testing_test.AsyncTestCaseTest.test_subsequent_wait_calls(self)
tornado.test.testing_test.AsyncTestCaseTest.test_wait_timeout(self)
tornado.test.testing_test.AsyncTestCaseWrapperTest(unittest.TestCase)
tornado.test.testing_test.AsyncTestCaseWrapperTest.test_other_return(self)
tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_coroutine(self)
tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator(self)
tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator_with_skip(self)
tornado.test.testing_test.AsyncTestCaseWrapperTest.test_unwrap(self)
tornado.test.testing_test.GenTest(AsyncTestCase)
tornado.test.testing_test.GenTest.setUp(self)
tornado.test.testing_test.GenTest.tearDown(self)
tornado.test.testing_test.GenTest.test_async(self)
tornado.test.testing_test.GenTest.test_native_coroutine(self)
tornado.test.testing_test.GenTest.test_native_coroutine_timeout(self)
tornado.test.testing_test.GenTest.test_no_timeout(self)
tornado.test.testing_test.GenTest.test_no_timeout_environment_variable(self)
tornado.test.testing_test.GenTest.test_sync(self)
tornado.test.testing_test.GenTest.test_timeout(self)
tornado.test.testing_test.GenTest.test_timeout_environment_variable(self)
tornado.test.testing_test.GenTest.test_with_method_args(self)
tornado.test.testing_test.GenTest.test_with_method_kwargs(self)
tornado.test.testing_test.LeakTest(AsyncTestCase)
tornado.test.testing_test.LeakTest.tearDown(self)
tornado.test.testing_test.LeakTest.test_leaked_coroutine(self)
tornado.test.testing_test.SetUpTearDownTest(unittest.TestCase)
tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down(self)
tornado.test.testing_test.set_environ(name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/resolve_test_helper.py----------------------------------------
A:tornado.test.resolve_test_helper.resolver->ThreadedResolver()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/import_test.py----------------------------------------
A:tornado.test.import_test.proc->subprocess.Popen([sys.executable], stdin=subprocess.PIPE)
tornado.test.import_test.ImportTest(unittest.TestCase)
tornado.test.import_test.ImportTest.test_import_aliases(self)
tornado.test.import_test.ImportTest.test_import_everything(self)
tornado.test.import_test.ImportTest.test_lazy_import(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/simple_httpclient_test.py----------------------------------------
A:tornado.test.simple_httpclient_test.client->SimpleAsyncHTTPClient(force_instance=True)
A:tornado.test.simple_httpclient_test.event->Event()
A:tornado.test.simple_httpclient_test.self.stream->self.detach()
A:tornado.test.simple_httpclient_test.redirect_code->int(self.request.body)
A:tornado.test.simple_httpclient_test.stream->request.connection.detach()
A:tornado.test.simple_httpclient_test.self.triggers->collections.deque()
A:tornado.test.simple_httpclient_test.client1->self.io_loop.run_sync(make_client)
A:tornado.test.simple_httpclient_test.client2->io_loop2.run_sync(make_client)
A:tornado.test.simple_httpclient_test.response->self.fetch('/large')
A:tornado.test.simple_httpclient_test.headers->HTTPHeaders({'User-Agent': 'Foo'})
A:tornado.test.simple_httpclient_test.cleanup_event->Event()
A:tornado.test.simple_httpclient_test.[sock]->bind_sockets(0, '::1', family=socket.AF_INET6)
A:tornado.test.simple_httpclient_test.host_re->re.compile(b'^127.0.0.1:[0-9]+$')
A:tornado.test.simple_httpclient_test.url->self.get_url('/host_echo').replace('http://', 'http://me:secret@')
A:tornado.test.simple_httpclient_test.(cleanup_func, port)->refusing_port()
A:tornado.test.simple_httpclient_test.expected_message->os.strerror(errno.ECONNREFUSED)
A:tornado.test.simple_httpclient_test.fut1->SimpleAsyncHTTPClient(force_instance=True).fetch(self.get_url('/trigger'), request_timeout=10)
A:tornado.test.simple_httpclient_test.chunks->list(map(to_unicode, chunk_bytes))
A:tornado.test.simple_httpclient_test.num_start_lines->len([h for h in headers if h.startswith('HTTP/')])
A:tornado.test.simple_httpclient_test.self.http_client->SimpleAsyncHTTPClient(resolver=BadResolver())
A:tornado.test.simple_httpclient_test.resp->self.fetch('/')
A:tornado.test.simple_httpclient_test.ssl_ctx->ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
A:tornado.test.simple_httpclient_test.ctx->ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
A:tornado.test.simple_httpclient_test.self.saved->tornado.httpclient.AsyncHTTPClient._save_configuration()
A:tornado.test.simple_httpclient_test.self.http1->request.version.startswith('HTTP/1.')
A:tornado.test.simple_httpclient_test.fut->self.request.connection.stream.write(b'HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\nA')
A:tornado.test.simple_httpclient_test.res->self.fetch('/')
A:tornado.test.simple_httpclient_test.self.cleanup_event->Event()
tornado.test.simple_httpclient_test.ChunkedWithContentLengthTest(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.ChunkedWithContentLengthTest.get_app(self)
tornado.test.simple_httpclient_test.ChunkedWithContentLengthTest.get_http_client(self)
tornado.test.simple_httpclient_test.ChunkedWithContentLengthTest.test_chunked_with_content_length(self)
tornado.test.simple_httpclient_test.ContentLengthHandler(RequestHandler)
tornado.test.simple_httpclient_test.ContentLengthHandler.get(self)
tornado.test.simple_httpclient_test.ContentLengthHandler.write_response(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase(AsyncTestCase)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.tearDown(self)
tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase.test_max_clients(self)
tornado.test.simple_httpclient_test.EchoPostHandler(RequestHandler)
tornado.test.simple_httpclient_test.EchoPostHandler.post(self)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.get_app(self)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.respond_100(self,request)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.respond_200(self,fut)
tornado.test.simple_httpclient_test.HTTP100ContinueTestCase.test_100_continue(self)
tornado.test.simple_httpclient_test.HTTP204NoContentTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.HTTP204NoContentTestCase.get_app(self)
tornado.test.simple_httpclient_test.HTTP204NoContentTestCase.respond_204(self,request)
tornado.test.simple_httpclient_test.HTTP204NoContentTestCase.test_204_invalid_content_length(self)
tornado.test.simple_httpclient_test.HTTP204NoContentTestCase.test_204_no_content(self)
tornado.test.simple_httpclient_test.HeadHandler(RequestHandler)
tornado.test.simple_httpclient_test.HeadHandler.head(self)
tornado.test.simple_httpclient_test.HostEchoHandler(RequestHandler)
tornado.test.simple_httpclient_test.HostEchoHandler.get(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.get_app(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.setUp(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.test_hostname_mapping(self)
tornado.test.simple_httpclient_test.HostnameMappingTestCase.test_port_mapping(self)
tornado.test.simple_httpclient_test.MaxBodySizeTest(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.MaxBodySizeTest.get_app(self)
tornado.test.simple_httpclient_test.MaxBodySizeTest.get_http_client(self)
tornado.test.simple_httpclient_test.MaxBodySizeTest.test_large_body(self)
tornado.test.simple_httpclient_test.MaxBodySizeTest.test_small_body(self)
tornado.test.simple_httpclient_test.MaxBufferSizeTest(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.MaxBufferSizeTest.get_app(self)
tornado.test.simple_httpclient_test.MaxBufferSizeTest.get_http_client(self)
tornado.test.simple_httpclient_test.MaxBufferSizeTest.test_large_body(self)
tornado.test.simple_httpclient_test.MaxHeaderSizeTest(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_app(self)
tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_http_client(self)
tornado.test.simple_httpclient_test.MaxHeaderSizeTest.test_large_headers(self)
tornado.test.simple_httpclient_test.MaxHeaderSizeTest.test_small_headers(self)
tornado.test.simple_httpclient_test.NoContentHandler(RequestHandler)
tornado.test.simple_httpclient_test.NoContentHandler.get(self)
tornado.test.simple_httpclient_test.NoContentLengthHandler(RequestHandler)
tornado.test.simple_httpclient_test.NoContentLengthHandler.get(self)
tornado.test.simple_httpclient_test.OptionsHandler(RequestHandler)
tornado.test.simple_httpclient_test.OptionsHandler.options(self)
tornado.test.simple_httpclient_test.ResolveTimeoutTestCase(AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.ResolveTimeoutTestCase.get_app(self)
tornado.test.simple_httpclient_test.ResolveTimeoutTestCase.setUp(self)
tornado.test.simple_httpclient_test.ResolveTimeoutTestCase.test_resolve_timeout(self)
tornado.test.simple_httpclient_test.RespondInPrepareHandler(RequestHandler)
tornado.test.simple_httpclient_test.RespondInPrepareHandler.prepare(self)
tornado.test.simple_httpclient_test.SeeOtherGetHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOtherGetHandler.get(self)
tornado.test.simple_httpclient_test.SeeOtherPostHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOtherPostHandler.post(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase.get_http_client(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase(SimpleHTTPClientTestMixin,AsyncHTTPTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.create_client(self,**kwargs)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin(object)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.async_body_producer(self,write)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.create_client(self,**kwargs)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.get_app(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.sync_body_producer(self,write)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_100_continue(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_100_continue_early_response(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_async_body_producer_chunked(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_async_body_producer_content_length(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_connect_timeout(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_connection_limit(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_connection_refused(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_default_user_agent(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_head_request(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_header_reuse(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_host_header(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_ipv6(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_max_redirects(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_multiple_content_length_accepted(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_native_body_producer_chunked(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_native_body_producer_content_length(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_no_content(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_no_content_length(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_options_request(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_queue_timeout(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_redirect_connection_limit(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_request_timeout(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_see_other_redirect(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_singleton(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_streaming_follow_redirects(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_sync_body_producer_chunked(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin.test_sync_body_producer_content_length(self:typing.Any)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase(SimpleHTTPClientTestMixin,AsyncHTTPSTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.create_client(self,**kwargs)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.test_error_logging(self)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.test_ssl_context(self)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.test_ssl_context_handshake_fail(self)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.test_ssl_options(self)
tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase.test_ssl_options_handshake_fail(self)
tornado.test.simple_httpclient_test.TriggerHandler(RequestHandler)
tornado.test.simple_httpclient_test.TriggerHandler.get(self)
tornado.test.simple_httpclient_test.TriggerHandler.initialize(self,queue,wake_callback)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/tcpclient_test.py----------------------------------------
A:tornado.test.tcpclient_test.self.queue->Queue()
A:tornado.test.tcpclient_test.sockets->bind_sockets(0, 'localhost', family)
A:tornado.test.tcpclient_test.self.client->TCPClient()
A:tornado.test.tcpclient_test.self.server->TestTCPServer(family)
A:tornado.test.tcpclient_test.addrinfo->self.io_loop.run_sync(lambda : Resolver().resolve('localhost', 80))
A:tornado.test.tcpclient_test.families->set((addr[0] for addr in addrinfo))
A:tornado.test.tcpclient_test.port->self.start_server(family)
A:tornado.test.tcpclient_test.(cleanup_func, port)->refusing_port()
A:tornado.test.tcpclient_test.(primary, secondary)->tornado.tcpclient._Connector.split([(AF1, 'a'), (AF2, 'b'), (AF1, 'c'), (AF2, 'd')])
A:tornado.test.tcpclient_test.stream->ConnectorTest.FakeStream()
A:tornado.test.tcpclient_test.future->_Connector(addrinfo, self.create_stream).start(3600, connect_timeout=self.io_loop.time() + 3600)
A:tornado.test.tcpclient_test.conn->_Connector(addrinfo, self.create_stream)
A:tornado.test.tcpclient_test.(conn, future)->self.start_connect(self.addrinfo)
tornado.test.tcpclient_test.ConnectorTest(AsyncTestCase)
tornado.test.tcpclient_test.ConnectorTest.FakeStream(self)
tornado.test.tcpclient_test.ConnectorTest.FakeStream.__init__(self)
tornado.test.tcpclient_test.ConnectorTest.FakeStream.close(self)
tornado.test.tcpclient_test.ConnectorTest.assert_connector_streams_closed(self,conn)
tornado.test.tcpclient_test.ConnectorTest.assert_pending(self,*keys)
tornado.test.tcpclient_test.ConnectorTest.create_stream(self,af,addr)
tornado.test.tcpclient_test.ConnectorTest.resolve_connect(self,af,addr,success)
tornado.test.tcpclient_test.ConnectorTest.setUp(self)
tornado.test.tcpclient_test.ConnectorTest.start_connect(self,addrinfo)
tornado.test.tcpclient_test.ConnectorTest.tearDown(self)
tornado.test.tcpclient_test.ConnectorTest.test_all_fail(self)
tornado.test.tcpclient_test.ConnectorTest.test_immediate_failure(self)
tornado.test.tcpclient_test.ConnectorTest.test_immediate_success(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_second_try(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_second_try_after_connect_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_second_try_failure(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_second_try_failure_before_connect_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_second_try_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_success_before_connect_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_one_family_timeout_after_connect_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_success_after_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_two_families_immediate_failure(self)
tornado.test.tcpclient_test.ConnectorTest.test_two_families_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_two_family_success_after_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_two_family_timeout_after_connect_timeout(self)
tornado.test.tcpclient_test.ConnectorTest.test_two_family_timeout_before_connect_timeout(self)
tornado.test.tcpclient_test.TCPClientTest(AsyncTestCase)
tornado.test.tcpclient_test.TCPClientTest.do_test_connect(self,family,host,source_ip=None,source_port=None)
tornado.test.tcpclient_test.TCPClientTest.setUp(self)
tornado.test.tcpclient_test.TCPClientTest.skipIfLocalhostV4(self)
tornado.test.tcpclient_test.TCPClientTest.start_server(self,family)
tornado.test.tcpclient_test.TCPClientTest.stop_server(self)
tornado.test.tcpclient_test.TCPClientTest.tearDown(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_ipv4_dual(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_ipv4_ipv4(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_ipv6_dual(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_ipv6_ipv6(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_timeout(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_unspec_dual(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_unspec_ipv4(self)
tornado.test.tcpclient_test.TCPClientTest.test_connect_unspec_ipv6(self)
tornado.test.tcpclient_test.TCPClientTest.test_refused_ipv4(self)
tornado.test.tcpclient_test.TCPClientTest.test_source_ip_fail(self)
tornado.test.tcpclient_test.TCPClientTest.test_source_ip_success(self)
tornado.test.tcpclient_test.TCPClientTest.test_source_port_fail(self)
tornado.test.tcpclient_test.TestConnectorSplit(unittest.TestCase)
tornado.test.tcpclient_test.TestConnectorSplit.test_mixed(self)
tornado.test.tcpclient_test.TestConnectorSplit.test_one_family(self)
tornado.test.tcpclient_test.TestTCPServer(self,family)
tornado.test.tcpclient_test.TestTCPServer.__init__(self,family)
tornado.test.tcpclient_test.TestTCPServer.handle_stream(self,stream,address)
tornado.test.tcpclient_test.TestTCPServer.stop(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/httpserver_test.py----------------------------------------
A:tornado.test.httpserver_test.conn->typing.cast(HTTP1Connection, self.request.connection)
A:tornado.test.httpserver_test.delegate->Delegate()
A:tornado.test.httpserver_test.response->self.fetch('/')
A:tornado.test.httpserver_test.skipIfOldSSL->unittest.skipIf(getattr(ssl, 'OPENSSL_VERSION_INFO', (0, 0)) < (1, 0), 'old version of ssl module and/or openssl')
A:tornado.test.httpserver_test.context->ssl_options_to_context(AsyncHTTPSTestCase.get_ssl_options(self), server_side=True)
A:tornado.test.httpserver_test.application->Application()
A:tornado.test.httpserver_test.module_dir->os.path.dirname(__file__)
A:tornado.test.httpserver_test.existing_certificate->os.path.join(module_dir, 'test.crt')
A:tornado.test.httpserver_test.existing_key->os.path.join(module_dir, 'test.key')
A:tornado.test.httpserver_test.(start_line, headers, body)->self.io_loop.run_sync(lambda : read_stream_body(stream))
A:tornado.test.httpserver_test.data->json_decode(response.body)
A:tornado.test.httpserver_test.stream->IOStream(socket.socket())
A:tornado.test.httpserver_test.headers->tornado.httputil.HTTPHeaders.parse(header_bytes.decode('latin1'))
A:tornado.test.httpserver_test.actual_type->type(obj)
A:tornado.test.httpserver_test.bin_text->urllib.parse.quote(bin_text).encode('ascii')
A:tornado.test.httpserver_test.self.stream->IOStream(socket.socket())
A:tornado.test.httpserver_test.(start_line, headers, response)->self.io_loop.run_sync(lambda : read_stream_body(self.stream))
A:tornado.test.httpserver_test.resp->self.fetch('/', headers=valid_ipv4_list)
A:tornado.test.httpserver_test.result->json_decode(resp.body)
A:tornado.test.httpserver_test.output->super().get_httpserver_options()
A:tornado.test.httpserver_test.self.tmpdir->tempfile.mkdtemp()
A:tornado.test.httpserver_test.self.sockfile->os.path.join(self.tmpdir, 'test.sock')
A:tornado.test.httpserver_test.sock->tornado.netutil.bind_unix_socket(self.sockfile)
A:tornado.test.httpserver_test.app->Application([('/hello', HelloWorldRequestHandler)])
A:tornado.test.httpserver_test.self.server->HTTPServer(app)
A:tornado.test.httpserver_test.self.cleanup_event->Event()
A:tornado.test.httpserver_test.bytesio->BytesIO()
A:tornado.test.httpserver_test.gzip_file->gzip.GzipFile(mode='w', fileobj=bytesio)
A:tornado.test.httpserver_test.compressed_body->BytesIO().getvalue()
A:tornado.test.httpserver_test.response_body->utf8(json_encode(self.chunk_lengths))
A:tornado.test.httpserver_test.chunks->self.fetch_chunk_sizes(body_producer=body_producer)
A:tornado.test.httpserver_test.gzfile->gzip.GzipFile(mode='w', fileobj=bytesio)
A:tornado.test.httpserver_test.compressed->self.compress(self.BODY)
A:tornado.test.httpserver_test.event->Event()
A:tornado.test.httpserver_test.self.http1->request.version.startswith('HTTP/1.')
tornado.test.httpserver_test.BadSSLOptionsTest(unittest.TestCase)
tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_arguments(self)
tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_key(self)
tornado.test.httpserver_test.BaseSSLTest(AsyncHTTPSTestCase)
tornado.test.httpserver_test.BaseSSLTest.get_app(self)
tornado.test.httpserver_test.BodyLimitsTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.BodyLimitsTest.get_app(self)
tornado.test.httpserver_test.BodyLimitsTest.get_http_client(self)
tornado.test.httpserver_test.BodyLimitsTest.get_httpserver_options(self)
tornado.test.httpserver_test.BodyLimitsTest.test_body_size_override_reset(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered_chunked(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked_override(self)
tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_override(self)
tornado.test.httpserver_test.BodyLimitsTest.test_small_body(self)
tornado.test.httpserver_test.BodyLimitsTest.test_timeout(self)
tornado.test.httpserver_test.EchoHandler(RequestHandler)
tornado.test.httpserver_test.EchoHandler.get(self)
tornado.test.httpserver_test.EchoHandler.post(self)
tornado.test.httpserver_test.GzipBaseTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.GzipBaseTest.get_app(self)
tornado.test.httpserver_test.GzipBaseTest.post_gzip(self,body)
tornado.test.httpserver_test.GzipBaseTest.test_uncompressed(self)
tornado.test.httpserver_test.GzipTest(GzipBaseTest,AsyncHTTPTestCase)
tornado.test.httpserver_test.GzipTest.get_httpserver_options(self)
tornado.test.httpserver_test.GzipTest.test_gzip(self)
tornado.test.httpserver_test.GzipTest.test_gzip_case_insensitive(self)
tornado.test.httpserver_test.GzipUnsupportedTest(GzipBaseTest,AsyncHTTPTestCase)
tornado.test.httpserver_test.GzipUnsupportedTest.test_gzip_unsupported(self)
tornado.test.httpserver_test.HTTPConnectionTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.HTTPConnectionTest.get_app(self)
tornado.test.httpserver_test.HTTPConnectionTest.get_handlers(self)
tornado.test.httpserver_test.HTTPConnectionTest.raw_fetch(self,headers,body,newline=b'\r\n')
tornado.test.httpserver_test.HTTPConnectionTest.test_100_continue(self)
tornado.test.httpserver_test.HTTPConnectionTest.test_multipart_form(self)
tornado.test.httpserver_test.HTTPConnectionTest.test_newlines(self)
tornado.test.httpserver_test.HTTPServerRawTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.HTTPServerRawTest.get_app(self)
tornado.test.httpserver_test.HTTPServerRawTest.setUp(self)
tornado.test.httpserver_test.HTTPServerRawTest.tearDown(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_body(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_body_invalid_size(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_uppercase(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_empty_request(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_invalid_content_length(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_first_line_log(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_first_line_response(self)
tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_headers(self)
tornado.test.httpserver_test.HTTPServerTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.HTTPServerTest.get_app(self)
tornado.test.httpserver_test.HTTPServerTest.test_double_slash(self)
tornado.test.httpserver_test.HTTPServerTest.test_empty_post_parameters(self)
tornado.test.httpserver_test.HTTPServerTest.test_empty_query_string(self)
tornado.test.httpserver_test.HTTPServerTest.test_post_encodings(self)
tornado.test.httpserver_test.HTTPServerTest.test_query_string_encoding(self)
tornado.test.httpserver_test.HTTPServerTest.test_types(self)
tornado.test.httpserver_test.HandlerBaseTestCase(AsyncHTTPTestCase)
tornado.test.httpserver_test.HandlerBaseTestCase.fetch_json(self,*args,**kwargs)
tornado.test.httpserver_test.HandlerBaseTestCase.get_app(self)
tornado.test.httpserver_test.HelloWorldRequestHandler(RequestHandler)
tornado.test.httpserver_test.HelloWorldRequestHandler.get(self)
tornado.test.httpserver_test.HelloWorldRequestHandler.initialize(self,protocol='http')
tornado.test.httpserver_test.HelloWorldRequestHandler.post(self)
tornado.test.httpserver_test.IdleTimeoutTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.IdleTimeoutTest.connect(self)
tornado.test.httpserver_test.IdleTimeoutTest.get_app(self)
tornado.test.httpserver_test.IdleTimeoutTest.get_httpserver_options(self)
tornado.test.httpserver_test.IdleTimeoutTest.setUp(self)
tornado.test.httpserver_test.IdleTimeoutTest.tearDown(self)
tornado.test.httpserver_test.IdleTimeoutTest.test_idle_after_use(self)
tornado.test.httpserver_test.IdleTimeoutTest.test_unused_connection(self)
tornado.test.httpserver_test.InvalidOutputContentLengthTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.InvalidOutputContentLengthTest.MessageDelegate(self,connection)
tornado.test.httpserver_test.InvalidOutputContentLengthTest.MessageDelegate.__init__(self,connection)
tornado.test.httpserver_test.InvalidOutputContentLengthTest.MessageDelegate.headers_received(self,start_line,headers)
tornado.test.httpserver_test.InvalidOutputContentLengthTest.get_app(self)
tornado.test.httpserver_test.InvalidOutputContentLengthTest.test_invalid_output_content_length(self)
tornado.test.httpserver_test.KeepAliveTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.KeepAliveTest.close(self)
tornado.test.httpserver_test.KeepAliveTest.connect(self)
tornado.test.httpserver_test.KeepAliveTest.get_app(self)
tornado.test.httpserver_test.KeepAliveTest.read_headers(self)
tornado.test.httpserver_test.KeepAliveTest.read_response(self)
tornado.test.httpserver_test.KeepAliveTest.setUp(self)
tornado.test.httpserver_test.KeepAliveTest.tearDown(self)
tornado.test.httpserver_test.KeepAliveTest.test_cancel_during_download(self)
tornado.test.httpserver_test.KeepAliveTest.test_finish_while_closed(self)
tornado.test.httpserver_test.KeepAliveTest.test_http10(self)
tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive(self)
tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive_extra_crlf(self)
tornado.test.httpserver_test.KeepAliveTest.test_keepalive_chunked(self)
tornado.test.httpserver_test.KeepAliveTest.test_keepalive_chunked_head_no_body(self)
tornado.test.httpserver_test.KeepAliveTest.test_pipelined_cancel(self)
tornado.test.httpserver_test.KeepAliveTest.test_pipelined_requests(self)
tornado.test.httpserver_test.KeepAliveTest.test_request_close(self)
tornado.test.httpserver_test.KeepAliveTest.test_two_requests(self)
tornado.test.httpserver_test.LegacyInterfaceTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.LegacyInterfaceTest.get_app(self)
tornado.test.httpserver_test.LegacyInterfaceTest.test_legacy_interface(self)
tornado.test.httpserver_test.ManualProtocolTest(HandlerBaseTestCase)
tornado.test.httpserver_test.ManualProtocolTest.Handler(RequestHandler)
tornado.test.httpserver_test.ManualProtocolTest.Handler.get(self)
tornado.test.httpserver_test.ManualProtocolTest.get_httpserver_options(self)
tornado.test.httpserver_test.ManualProtocolTest.test_manual_protocol(self)
tornado.test.httpserver_test.MaxHeaderSizeTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.MaxHeaderSizeTest.get_app(self)
tornado.test.httpserver_test.MaxHeaderSizeTest.get_httpserver_options(self)
tornado.test.httpserver_test.MaxHeaderSizeTest.test_large_headers(self)
tornado.test.httpserver_test.MaxHeaderSizeTest.test_small_headers(self)
tornado.test.httpserver_test.MultipartTestHandler(RequestHandler)
tornado.test.httpserver_test.MultipartTestHandler.post(self)
tornado.test.httpserver_test.PostEchoGBKHandler(PostEchoHandler)
tornado.test.httpserver_test.PostEchoGBKHandler.decode_argument(self,value,name=None)
tornado.test.httpserver_test.PostEchoHandler(RequestHandler)
tornado.test.httpserver_test.PostEchoHandler.post(self,*path_args)
tornado.test.httpserver_test.SSLContextTest(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLContextTest.get_ssl_options(self)
tornado.test.httpserver_test.SSLTestMixin(object)
tornado.test.httpserver_test.SSLTestMixin.get_ssl_options(self)
tornado.test.httpserver_test.SSLTestMixin.get_ssl_version(self)
tornado.test.httpserver_test.SSLTestMixin.test_error_logging(self:typing.Any)
tornado.test.httpserver_test.SSLTestMixin.test_large_post(self:typing.Any)
tornado.test.httpserver_test.SSLTestMixin.test_non_ssl_request(self:typing.Any)
tornado.test.httpserver_test.SSLTestMixin.test_ssl(self:typing.Any)
tornado.test.httpserver_test.SSLXHeaderTest(AsyncHTTPSTestCase,HandlerBaseTestCase)
tornado.test.httpserver_test.SSLXHeaderTest.get_app(self)
tornado.test.httpserver_test.SSLXHeaderTest.get_httpserver_options(self)
tornado.test.httpserver_test.SSLXHeaderTest.test_request_without_xprotocol(self)
tornado.test.httpserver_test.SSLv23Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv23Test.get_ssl_version(self)
tornado.test.httpserver_test.SSLv3Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv3Test.get_ssl_version(self)
tornado.test.httpserver_test.StreamingChunkSizeTest(AsyncHTTPTestCase)
tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate(self,connection)
tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate.__init__(self,connection)
tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate.data_received(self,chunk)
tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate.finish(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate.headers_received(self,start_line,headers)
tornado.test.httpserver_test.StreamingChunkSizeTest.compress(self,body)
tornado.test.httpserver_test.StreamingChunkSizeTest.fetch_chunk_sizes(self,**kwargs)
tornado.test.httpserver_test.StreamingChunkSizeTest.get_app(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.get_http_client(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.get_httpserver_options(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_body(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_compressed(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.test_compressed_body(self)
tornado.test.httpserver_test.StreamingChunkSizeTest.test_regular_body(self)
tornado.test.httpserver_test.TLSv1Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.TLSv1Test.get_ssl_version(self)
tornado.test.httpserver_test.TypeCheckHandler(RequestHandler)
tornado.test.httpserver_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.httpserver_test.TypeCheckHandler.get(self)
tornado.test.httpserver_test.TypeCheckHandler.post(self)
tornado.test.httpserver_test.TypeCheckHandler.prepare(self)
tornado.test.httpserver_test.UnixSocketTest(AsyncTestCase)
tornado.test.httpserver_test.UnixSocketTest.setUp(self)
tornado.test.httpserver_test.UnixSocketTest.tearDown(self)
tornado.test.httpserver_test.UnixSocketTest.test_unix_socket(self)
tornado.test.httpserver_test.UnixSocketTest.test_unix_socket_bad_request(self)
tornado.test.httpserver_test.XHeaderTest(HandlerBaseTestCase)
tornado.test.httpserver_test.XHeaderTest.Handler(RequestHandler)
tornado.test.httpserver_test.XHeaderTest.Handler.get(self)
tornado.test.httpserver_test.XHeaderTest.get_httpserver_options(self)
tornado.test.httpserver_test.XHeaderTest.test_ip_headers(self)
tornado.test.httpserver_test.XHeaderTest.test_scheme_headers(self)
tornado.test.httpserver_test.XHeaderTest.test_trusted_downstream(self)
tornado.test.httpserver_test.read_stream_body(stream)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/runtests.py----------------------------------------
A:tornado.test.runtests.result->super().run(test)
A:tornado.test.runtests.skip_reasons->set((reason for (test, reason) in result.skipped))
A:tornado.test.runtests.log_counter->LogCounter()
A:tornado.test.runtests.counting_stderr->CountingStderr(orig_stderr)
A:tornado.test.runtests.kwargs['testRunner']->test_runner_factory(orig_stderr)
tornado.test.runtests.CountingStderr(self,real)
tornado.test.runtests.CountingStderr.__init__(self,real)
tornado.test.runtests.CountingStderr.flush(self)
tornado.test.runtests.CountingStderr.write(self,data)
tornado.test.runtests.LogCounter(self,*args,**kwargs)
tornado.test.runtests.LogCounter.__init__(self,*args,**kwargs)
tornado.test.runtests.LogCounter.filter(self,record)
tornado.test.runtests.all()
tornado.test.runtests.main()
tornado.test.runtests.test_runner_factory(stderr)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/netutil_test.py----------------------------------------
A:tornado.test.netutil_test.self.resolver->TwistedResolver()
A:tornado.test.netutil_test.start->time.time()
A:tornado.test.netutil_test.popen->Popen(command, preexec_fn=lambda : signal.alarm(TIMEOUT))
A:tornado.test.netutil_test.return_code->Popen(command, preexec_fn=lambda : signal.alarm(TIMEOUT)).poll()
A:tornado.test.netutil_test.sockets->bind_sockets(port, '127.0.0.1', reuse_port=True)
A:tornado.test.netutil_test.(socket, port)->bind_unused_port(reuse_port=True)
tornado.test.netutil_test.BlockingResolverErrorTest(AsyncTestCase,_ResolverErrorTestMixin)
tornado.test.netutil_test.BlockingResolverErrorTest.setUp(self)
tornado.test.netutil_test.BlockingResolverErrorTest.tearDown(self)
tornado.test.netutil_test.BlockingResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.BlockingResolverTest.setUp(self)
tornado.test.netutil_test.CaresResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.CaresResolverTest.setUp(self)
tornado.test.netutil_test.IsValidIPTest(unittest.TestCase)
tornado.test.netutil_test.IsValidIPTest.test_is_valid_ip(self)
tornado.test.netutil_test.OverrideResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.OverrideResolverTest.setUp(self)
tornado.test.netutil_test.OverrideResolverTest.test_resolve_multiaddr(self)
tornado.test.netutil_test.TestPortAllocation(unittest.TestCase)
tornado.test.netutil_test.TestPortAllocation.test_reuse_port(self)
tornado.test.netutil_test.TestPortAllocation.test_same_port_allocation(self)
tornado.test.netutil_test.ThreadedResolverErrorTest(AsyncTestCase,_ResolverErrorTestMixin)
tornado.test.netutil_test.ThreadedResolverErrorTest.setUp(self)
tornado.test.netutil_test.ThreadedResolverErrorTest.tearDown(self)
tornado.test.netutil_test.ThreadedResolverImportTest(unittest.TestCase)
tornado.test.netutil_test.ThreadedResolverImportTest.test_import(self)
tornado.test.netutil_test.ThreadedResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.ThreadedResolverTest.setUp(self)
tornado.test.netutil_test.ThreadedResolverTest.tearDown(self)
tornado.test.netutil_test.TwistedResolverTest(AsyncTestCase,_ResolverTestMixin)
tornado.test.netutil_test.TwistedResolverTest.setUp(self)
tornado.test.netutil_test._ResolverErrorTestMixin(object)
tornado.test.netutil_test._ResolverErrorTestMixin.test_bad_host(self:typing.Any)
tornado.test.netutil_test._ResolverTestMixin(object)
tornado.test.netutil_test._ResolverTestMixin.test_localhost(self:typing.Any)
tornado.test.netutil_test._failing_getaddrinfo(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/concurrent_test.py----------------------------------------
A:tornado.test.concurrent_test.fut->Future()
A:tornado.test.concurrent_test.is_cancelled->Future().cancelled()
A:tornado.test.concurrent_test.data->to_unicode(data)
A:tornado.test.concurrent_test.m->re.match('(.*)\t(.*)\n', to_unicode(data))
A:tornado.test.concurrent_test.(status, message)->re.match('(.*)\t(.*)\n', to_unicode(data)).groups()
A:tornado.test.concurrent_test.stream->IOStream(socket.socket())
A:tornado.test.concurrent_test.self.server->CapServer()
A:tornado.test.concurrent_test.(sock, port)->bind_unused_port()
A:tornado.test.concurrent_test.self.client->self.client_class(port=port)
A:tornado.test.concurrent_test.future->self.client.capitalize('HELLO')
A:tornado.test.concurrent_test.self.executor->concurrent.futures.thread.ThreadPoolExecutor(1)
A:tornado.test.concurrent_test.o->Object()
A:tornado.test.concurrent_test.self.__executor->concurrent.futures.thread.ThreadPoolExecutor(1)
tornado.test.concurrent_test.BaseCapClient(self,port)
tornado.test.concurrent_test.BaseCapClient.__init__(self,port)
tornado.test.concurrent_test.BaseCapClient.process_response(self,data)
tornado.test.concurrent_test.CapError(Exception)
tornado.test.concurrent_test.CapServer(TCPServer)
tornado.test.concurrent_test.CapServer.handle_stream(self,stream,address)
tornado.test.concurrent_test.ClientTestMixin(object)
tornado.test.concurrent_test.ClientTestMixin.setUp(self)
tornado.test.concurrent_test.ClientTestMixin.tearDown(self)
tornado.test.concurrent_test.ClientTestMixin.test_future(self:typing.Any)
tornado.test.concurrent_test.ClientTestMixin.test_future_error(self:typing.Any)
tornado.test.concurrent_test.ClientTestMixin.test_generator(self:typing.Any)
tornado.test.concurrent_test.ClientTestMixin.test_generator_error(self:typing.Any)
tornado.test.concurrent_test.GeneratorCapClient(BaseCapClient)
tornado.test.concurrent_test.GeneratorCapClient.capitalize(self,request_data)
tornado.test.concurrent_test.GeneratorClientTest(ClientTestMixin,AsyncTestCase)
tornado.test.concurrent_test.MiscFutureTest(AsyncTestCase)
tornado.test.concurrent_test.MiscFutureTest.test_future_set_result_unless_cancelled(self)
tornado.test.concurrent_test.RunOnExecutorTest(AsyncTestCase)
tornado.test.concurrent_test.RunOnExecutorTest.test_async_await(self)
tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_executor(self)
tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_no_args(self)
tornado.test.concurrent_test.RunOnExecutorTest.test_no_calling(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/routing_test.py----------------------------------------
A:tornado.test.routing_test.response->self.fetch('/404')
A:tornado.test.routing_test.FirstHandler->_get_named_handler('first_handler')
A:tornado.test.routing_test.SecondHandler->_get_named_handler('second_handler')
A:tornado.test.routing_test.router->CustomRouter()
A:tornado.test.routing_test.app1->CustomApplication(app_name='app1')
A:tornado.test.routing_test.app2->CustomApplication(app_name='app2')
A:tornado.test.routing_test.app->Application()
A:tornado.test.routing_test.wsgi_app->WSGIContainer(self.wsgi_app)
tornado.test.routing_test.BasicRouter(Router)
tornado.test.routing_test.BasicRouter.find_handler(self,request,**kwargs)
tornado.test.routing_test.BasicRouterTestCase(AsyncHTTPTestCase)
tornado.test.routing_test.BasicRouterTestCase.get_app(self)
tornado.test.routing_test.BasicRouterTestCase.test_basic_router(self)
tornado.test.routing_test.ConnectionDelegate(HTTPServerConnectionDelegate)
tornado.test.routing_test.ConnectionDelegate.start_request(self,server_conn,request_conn)
tornado.test.routing_test.CustomRouter(self)
tornado.test.routing_test.CustomRouter.__init__(self)
tornado.test.routing_test.CustomRouter.add_routes(self,routes)
tornado.test.routing_test.CustomRouter.find_handler(self,request,**kwargs)
tornado.test.routing_test.CustomRouter.reverse_url(self,name,*args)
tornado.test.routing_test.CustomRouterTestCase(AsyncHTTPTestCase)
tornado.test.routing_test.CustomRouterTestCase.get_app(self)
tornado.test.routing_test.CustomRouterTestCase.test_custom_router(self)
tornado.test.routing_test.GetResource(RequestHandler)
tornado.test.routing_test.GetResource.get(self,path)
tornado.test.routing_test.HTTPMethodRouter(self,app)
tornado.test.routing_test.HTTPMethodRouter.__init__(self,app)
tornado.test.routing_test.HTTPMethodRouter.find_handler(self,request,**kwargs)
tornado.test.routing_test.HTTPMethodRouterTestCase(AsyncHTTPTestCase)
tornado.test.routing_test.HTTPMethodRouterTestCase.get_app(self)
tornado.test.routing_test.HTTPMethodRouterTestCase.test_http_method_router(self)
tornado.test.routing_test.PostResource(RequestHandler)
tornado.test.routing_test.PostResource.post(self,path)
tornado.test.routing_test.RuleRouterTest(AsyncHTTPTestCase)
tornado.test.routing_test.RuleRouterTest.get_app(self)
tornado.test.routing_test.RuleRouterTest.test_rule_based_router(self)
tornado.test.routing_test.WSGIContainerTestCase(AsyncHTTPTestCase)
tornado.test.routing_test.WSGIContainerTestCase.get_app(self)
tornado.test.routing_test.WSGIContainerTestCase.test_delegate_not_found(self)
tornado.test.routing_test.WSGIContainerTestCase.test_wsgi_container(self)
tornado.test.routing_test.WSGIContainerTestCase.wsgi_app(self,environ,start_response)
tornado.test.routing_test._get_named_handler(handler_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/util_test.py----------------------------------------
A:tornado.test.util_test.exc_info->sys.exc_info()
A:tornado.test.util_test.self.saved->TestConfigurable._save_configuration()
A:tornado.test.util_test.self.saved3->TestConfig3._save_configuration()
A:tornado.test.util_test.obj->TestConfig3()
A:tornado.test.util_test.obj2->TestConfigurable()
A:tornado.test.util_test.obj3->TestConfigurable()
A:tornado.test.util_test.f->StringIO()
A:tornado.test.util_test.self.replacer->ArgReplacer(function, 'callback')
A:tornado.test.util_test.kwargs->dict(y=2, callback='old', z=3)
A:tornado.test.util_test.time_delta->datetime.timedelta(hours=1)
tornado.test.util_test.ArgReplacerTest(unittest.TestCase)
tornado.test.util_test.ArgReplacerTest.setUp(self)
tornado.test.util_test.ArgReplacerTest.test_keyword(self)
tornado.test.util_test.ArgReplacerTest.test_omitted(self)
tornado.test.util_test.ArgReplacerTest.test_position(self)
tornado.test.util_test.ConfigurableTest(unittest.TestCase)
tornado.test.util_test.ConfigurableTest.checkSubclasses(self)
tornado.test.util_test.ConfigurableTest.setUp(self)
tornado.test.util_test.ConfigurableTest.tearDown(self)
tornado.test.util_test.ConfigurableTest.test_config_args(self)
tornado.test.util_test.ConfigurableTest.test_config_class(self)
tornado.test.util_test.ConfigurableTest.test_config_class_args(self)
tornado.test.util_test.ConfigurableTest.test_config_inner_level(self)
tornado.test.util_test.ConfigurableTest.test_config_multi_level(self)
tornado.test.util_test.ConfigurableTest.test_config_str(self)
tornado.test.util_test.ConfigurableTest.test_default(self)
tornado.test.util_test.ExecInTest(unittest.TestCase)
tornado.test.util_test.ExecInTest.test_no_inherit_future(self)
tornado.test.util_test.ImportObjectTest(unittest.TestCase)
tornado.test.util_test.ImportObjectTest.test_import_member(self)
tornado.test.util_test.ImportObjectTest.test_import_member_unicode(self)
tornado.test.util_test.ImportObjectTest.test_import_module(self)
tornado.test.util_test.ImportObjectTest.test_import_module_unicode(self)
tornado.test.util_test.IsFinalizingTest(unittest.TestCase)
tornado.test.util_test.IsFinalizingTest.test_basic(self)
tornado.test.util_test.RaiseExcInfoTest(unittest.TestCase)
tornado.test.util_test.RaiseExcInfoTest.test_two_arg_exception(self)
tornado.test.util_test.ReUnescapeTest(unittest.TestCase)
tornado.test.util_test.ReUnescapeTest.test_re_unescape(self)
tornado.test.util_test.ReUnescapeTest.test_re_unescape_raises_error_on_invalid_input(self)
tornado.test.util_test.TestConfig1(TestConfigurable)
tornado.test.util_test.TestConfig1.initialize(self,pos_arg=None,a=None)
tornado.test.util_test.TestConfig2(TestConfigurable)
tornado.test.util_test.TestConfig2.initialize(self,pos_arg=None,b=None)
tornado.test.util_test.TestConfig3(TestConfigurable)
tornado.test.util_test.TestConfig3.configurable_base(cls)
tornado.test.util_test.TestConfig3.configurable_default(cls)
tornado.test.util_test.TestConfig3A(TestConfig3)
tornado.test.util_test.TestConfig3A.initialize(self,a=None)
tornado.test.util_test.TestConfig3B(TestConfig3)
tornado.test.util_test.TestConfig3B.initialize(self,b=None)
tornado.test.util_test.TestConfigurable(Configurable)
tornado.test.util_test.TestConfigurable.configurable_base(cls)
tornado.test.util_test.TestConfigurable.configurable_default(cls)
tornado.test.util_test.TimedeltaToSecondsTest(unittest.TestCase)
tornado.test.util_test.TimedeltaToSecondsTest.test_timedelta_to_seconds(self)
tornado.test.util_test.UnicodeLiteralTest(unittest.TestCase)
tornado.test.util_test.UnicodeLiteralTest.test_unicode_escapes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/options_test.py----------------------------------------
A:tornado.test.options_test.options->OptionParser()
A:tornado.test.options_test.config_path->os.path.join(os.path.dirname(os.path.abspath(__file__)), 'options_test.cfg')
A:tornado.test.options_test.sys.stderr->StringIO()
A:tornado.test.options_test.usage->sys.stderr.getvalue()
A:tornado.test.options_test.base_options->OptionParser()
A:tornado.test.options_test.sub_options->OptionParser()
A:tornado.test.options_test.rest->OptionParser().parse_command_line(['main.py', '--verbose', 'subcommand', '--foo=bar'])
A:tornado.test.options_test.rest2->OptionParser().parse_command_line(rest)
A:tornado.test.options_test.actual->sorted(options.items())
A:tornado.test.options_test.frame->sys._getframe(0)
A:tornado.test.options_test.b_group_dict->OptionParser().group_dict('b_group')
A:tornado.test.options_test.buf->StringIO()
tornado.test.options_test.Email(self,value)
tornado.test.options_test.Email.__init__(self,value)
tornado.test.options_test.Email.value(self)
tornado.test.options_test.OptionsTest(unittest.TestCase)
tornado.test.options_test.OptionsTest._check_options_values(self,options)
tornado.test.options_test.OptionsTest._define_options(self)
tornado.test.options_test.OptionsTest._sample_options(self)
tornado.test.options_test.OptionsTest.test_as_dict(self)
tornado.test.options_test.OptionsTest.test_dash_underscore_cli(self)
tornado.test.options_test.OptionsTest.test_dash_underscore_file(self)
tornado.test.options_test.OptionsTest.test_dash_underscore_introspection(self)
tornado.test.options_test.OptionsTest.test_error_redefine(self)
tornado.test.options_test.OptionsTest.test_error_redefine_underscore(self)
tornado.test.options_test.OptionsTest.test_getitem(self)
tornado.test.options_test.OptionsTest.test_group_dict(self)
tornado.test.options_test.OptionsTest.test_help(self)
tornado.test.options_test.OptionsTest.test_items(self)
tornado.test.options_test.OptionsTest.test_iter(self)
tornado.test.options_test.OptionsTest.test_mock_patch(self)
tornado.test.options_test.OptionsTest.test_multiple_int(self)
tornado.test.options_test.OptionsTest.test_multiple_string(self)
tornado.test.options_test.OptionsTest.test_parse_callbacks(self)
tornado.test.options_test.OptionsTest.test_parse_command_line(self)
tornado.test.options_test.OptionsTest.test_parse_config_file(self)
tornado.test.options_test.OptionsTest.test_setattr(self)
tornado.test.options_test.OptionsTest.test_setattr_type_check(self)
tornado.test.options_test.OptionsTest.test_setattr_with_callback(self)
tornado.test.options_test.OptionsTest.test_setitem(self)
tornado.test.options_test.OptionsTest.test_subcommand(self)
tornado.test.options_test.OptionsTest.test_types(self)
tornado.test.options_test.OptionsTest.test_types_with_conf_file(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/http1connection_test.py----------------------------------------
A:tornado.test.http1connection_test.(listener, port)->bind_unused_port()
A:tornado.test.http1connection_test.event->Event()
A:tornado.test.http1connection_test.self.server_stream->IOStream(conn)
A:tornado.test.http1connection_test.self.client_stream->IOStream(socket.socket())
A:tornado.test.http1connection_test.conn->HTTP1Connection(self.client_stream, True)
tornado.test.http1connection_test.HTTP1ConnectionTest(AsyncTestCase)
tornado.test.http1connection_test.HTTP1ConnectionTest.asyncSetUp(self)
tornado.test.http1connection_test.HTTP1ConnectionTest.setUp(self)
tornado.test.http1connection_test.HTTP1ConnectionTest.test_http10_no_content_length(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/locks_test.py----------------------------------------
A:tornado.test.locks_test.c->tornado.locks.Condition()
A:tornado.test.locks_test.wait->tornado.locks.Condition().wait(timedelta(seconds=0.02))
A:tornado.test.locks_test.future->asyncio.ensure_future(lock.acquire())
A:tornado.test.locks_test.event->tornado.locks.Event()
A:tornado.test.locks_test.e->tornado.locks.Event()
A:tornado.test.locks_test.future_0->asyncio.ensure_future(e.wait())
A:tornado.test.locks_test.future_1->asyncio.ensure_future(e.wait())
A:tornado.test.locks_test.future_2->asyncio.ensure_future(e.wait())
A:tornado.test.locks_test.f0->asyncio.ensure_future(sem.acquire())
A:tornado.test.locks_test.f1->asyncio.ensure_future(sem.acquire())
A:tornado.test.locks_test.sem->tornado.locks.BoundedSemaphore()
A:tornado.test.locks_test.f2->asyncio.ensure_future(sem.acquire())
A:tornado.test.locks_test.acquire->tornado.locks.BoundedSemaphore().acquire(timedelta(seconds=0.02))
A:tornado.test.locks_test.f->asyncio.ensure_future(sem.acquire())
A:tornado.test.locks_test.lock->tornado.locks.Lock()
tornado.test.locks_test.BoundedSemaphoreTest(AsyncTestCase)
tornado.test.locks_test.BoundedSemaphoreTest.test_release_unacquired(self)
tornado.test.locks_test.ConditionTest(AsyncTestCase)
tornado.test.locks_test.ConditionTest.loop_briefly(self)
tornado.test.locks_test.ConditionTest.record_done(self,future,key)
tornado.test.locks_test.ConditionTest.setUp(self)
tornado.test.locks_test.ConditionTest.test_garbage_collection(self)
tornado.test.locks_test.ConditionTest.test_nested_notify(self)
tornado.test.locks_test.ConditionTest.test_notify(self)
tornado.test.locks_test.ConditionTest.test_notify_1(self)
tornado.test.locks_test.ConditionTest.test_notify_all(self)
tornado.test.locks_test.ConditionTest.test_notify_all_with_timeout(self)
tornado.test.locks_test.ConditionTest.test_notify_n(self)
tornado.test.locks_test.ConditionTest.test_notify_n_with_timeout(self)
tornado.test.locks_test.ConditionTest.test_repr(self)
tornado.test.locks_test.ConditionTest.test_wait_timeout(self)
tornado.test.locks_test.ConditionTest.test_wait_timeout_preempted(self)
tornado.test.locks_test.EventTest(AsyncTestCase)
tornado.test.locks_test.EventTest.test_event(self)
tornado.test.locks_test.EventTest.test_event_set_multiple(self)
tornado.test.locks_test.EventTest.test_event_timeout(self)
tornado.test.locks_test.EventTest.test_event_wait_clear(self)
tornado.test.locks_test.EventTest.test_repr(self)
tornado.test.locks_test.LockTests(AsyncTestCase)
tornado.test.locks_test.LockTests.test_acquire_fifo(self)
tornado.test.locks_test.LockTests.test_acquire_fifo_async_with(self)
tornado.test.locks_test.LockTests.test_acquire_release(self)
tornado.test.locks_test.LockTests.test_acquire_timeout(self)
tornado.test.locks_test.LockTests.test_context_manager_misuse(self)
tornado.test.locks_test.LockTests.test_multi_release(self)
tornado.test.locks_test.LockTests.test_repr(self)
tornado.test.locks_test.LockTests.test_yield_lock(self)
tornado.test.locks_test.SemaphoreContextManagerTest(AsyncTestCase)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_async_await(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_contended(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_exception(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_misuse(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_timeout(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_context_manager_timeout_error(self)
tornado.test.locks_test.SemaphoreContextManagerTest.test_yield_sem(self)
tornado.test.locks_test.SemaphoreTest(AsyncTestCase)
tornado.test.locks_test.SemaphoreTest.test_acquire(self)
tornado.test.locks_test.SemaphoreTest.test_acquire_timeout(self)
tornado.test.locks_test.SemaphoreTest.test_acquire_timeout_preempted(self)
tornado.test.locks_test.SemaphoreTest.test_garbage_collection(self)
tornado.test.locks_test.SemaphoreTest.test_negative_value(self)
tornado.test.locks_test.SemaphoreTest.test_release_unacquired(self)
tornado.test.locks_test.SemaphoreTest.test_repr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/gen_test.py----------------------------------------
A:tornado.test.gen_test.start->time.time()
A:tornado.test.gen_test.end->time.time()
A:tornado.test.gen_test.f->executor.submit(dummy)
A:tornado.test.gen_test.coro->tornado.gen.coroutine(f)()
A:tornado.test.gen_test.future->Future()
A:tornado.test.gen_test.immediate->Future()
A:tornado.test.gen_test.local_var->Foo()
A:tornado.test.gen_test.self.local_ref->weakref.ref(local_var)
A:tornado.test.gen_test.asyncio_loop->asyncio.get_event_loop()
A:tornado.test.gen_test.actual->repr(coro)
A:tornado.test.gen_test.response->self.fetch('/native_coroutine')
A:tornado.test.gen_test.g->tornado.gen.WaitIterator(*futures)
A:tornado.test.gen_test.f1->Future()
A:tornado.test.gen_test.f2->Future()
A:tornado.test.gen_test.f3->Future()
A:tornado.test.gen_test.dg->tornado.gen.WaitIterator(f1=f1, f2=f2)
A:tornado.test.gen_test.fut->asyncio.get_event_loop().create_task(infinite_coro(result))
A:tornado.test.gen_test.weakref_scope[0]->weakref.ref(fut)
A:tornado.test.gen_test.loop->self.get_new_ioloop()
A:tornado.test.gen_test.result->self.get_new_ioloop().run_sync(wait_a_moment)
A:tornado.test.gen_test.ctx_var->contextvars.ContextVar('ctx_var')
A:tornado.test.gen_test.ctx->contextvars.copy_context()
A:tornado.test.gen_test.token->contextvars.ContextVar('ctx_var').set(1)
tornado.test.gen_test.AsyncPrepareErrorHandler(RequestHandler)
tornado.test.gen_test.AsyncPrepareErrorHandler.get(self)
tornado.test.gen_test.AsyncPrepareErrorHandler.prepare(self)
tornado.test.gen_test.ContextVarsTest(AsyncTestCase)
tornado.test.gen_test.ContextVarsTest.gen_inner(self,x)
tornado.test.gen_test.ContextVarsTest.gen_root(self,x)
tornado.test.gen_test.ContextVarsTest.inner(self,x)
tornado.test.gen_test.ContextVarsTest.native_root(self,x)
tornado.test.gen_test.ContextVarsTest.test_propagate(self)
tornado.test.gen_test.ContextVarsTest.test_propagate_to_first_yield_with_native_async_function(self)
tornado.test.gen_test.ContextVarsTest.test_reset(self)
tornado.test.gen_test.ContextVarsTest.thread_inner(self,x)
tornado.test.gen_test.GenBasicTest(AsyncTestCase)
tornado.test.gen_test.GenBasicTest.add_one_async(self,x)
tornado.test.gen_test.GenBasicTest.async_exception(self,e)
tornado.test.gen_test.GenBasicTest.async_future(self,result)
tornado.test.gen_test.GenBasicTest.delay(self,iterations,arg)
tornado.test.gen_test.GenBasicTest.test_async_raise_return(self)
tornado.test.gen_test.GenBasicTest.test_async_raise_return_value(self)
tornado.test.gen_test.GenBasicTest.test_async_raise_return_value_tuple(self)
tornado.test.gen_test.GenBasicTest.test_bogus_yield(self)
tornado.test.gen_test.GenBasicTest.test_bogus_yield_tuple(self)
tornado.test.gen_test.GenBasicTest.test_exception_phase1(self)
tornado.test.gen_test.GenBasicTest.test_exception_phase2(self)
tornado.test.gen_test.GenBasicTest.test_future(self)
tornado.test.gen_test.GenBasicTest.test_multi(self)
tornado.test.gen_test.GenBasicTest.test_multi_delayed(self)
tornado.test.gen_test.GenBasicTest.test_multi_dict(self)
tornado.test.gen_test.GenBasicTest.test_multi_dict_delayed(self)
tornado.test.gen_test.GenBasicTest.test_multi_dict_future(self)
tornado.test.gen_test.GenBasicTest.test_multi_empty(self)
tornado.test.gen_test.GenBasicTest.test_multi_exceptions(self)
tornado.test.gen_test.GenBasicTest.test_multi_future(self)
tornado.test.gen_test.GenBasicTest.test_multi_future_duplicate(self)
tornado.test.gen_test.GenBasicTest.test_multi_future_exceptions(self)
tornado.test.gen_test.GenBasicTest.test_multi_performance(self)
tornado.test.gen_test.GenBasicTest.test_no_yield(self)
tornado.test.gen_test.GenBasicTest.test_none(self)
tornado.test.gen_test.GenBasicTest.test_reuse(self)
tornado.test.gen_test.GenBasicTest.test_sync_raise_return(self)
tornado.test.gen_test.GenBasicTest.test_sync_raise_return_value(self)
tornado.test.gen_test.GenBasicTest.test_sync_raise_return_value_tuple(self)
tornado.test.gen_test.GenCoroutineSequenceHandler(RequestHandler)
tornado.test.gen_test.GenCoroutineSequenceHandler.get(self)
tornado.test.gen_test.GenCoroutineTest(AsyncTestCase)
tornado.test.gen_test.GenCoroutineTest.setUp(self)
tornado.test.gen_test.GenCoroutineTest.tearDown(self)
tornado.test.gen_test.GenCoroutineTest.test_async_await(self)
tornado.test.gen_test.GenCoroutineTest.test_async_await_mixed_multi_native_future(self)
tornado.test.gen_test.GenCoroutineTest.test_async_early_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_gen_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_raise(self)
tornado.test.gen_test.GenCoroutineTest.test_async_return(self)
tornado.test.gen_test.GenCoroutineTest.test_async_return_no_value(self)
tornado.test.gen_test.GenCoroutineTest.test_async_with_timeout(self)
tornado.test.gen_test.GenCoroutineTest.test_asyncio_future_debug_info(self)
tornado.test.gen_test.GenCoroutineTest.test_asyncio_gather(self)
tornado.test.gen_test.GenCoroutineTest.test_asyncio_sleep_zero(self)
tornado.test.gen_test.GenCoroutineTest.test_attributes(self)
tornado.test.gen_test.GenCoroutineTest.test_coroutine_refcounting(self)
tornado.test.gen_test.GenCoroutineTest.test_is_coroutine_function(self)
tornado.test.gen_test.GenCoroutineTest.test_moment(self)
tornado.test.gen_test.GenCoroutineTest.test_py3_leak_exception_context(self)
tornado.test.gen_test.GenCoroutineTest.test_replace_yieldpoint_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_sleep(self)
tornado.test.gen_test.GenCoroutineTest.test_swallow_yieldpoint_exception(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_gen_return(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_raise(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_return(self)
tornado.test.gen_test.GenCoroutineTest.test_sync_return_no_value(self)
tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler(RequestHandler)
tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler.get(self)
tornado.test.gen_test.GenWebTest(AsyncHTTPTestCase)
tornado.test.gen_test.GenWebTest.get_app(self)
tornado.test.gen_test.GenWebTest.test_async_prepare_error_handler(self)
tornado.test.gen_test.GenWebTest.test_coroutine_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_coroutine_unfinished_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_native_coroutine_handler(self)
tornado.test.gen_test.GenWebTest.test_undecorated_coroutines(self)
tornado.test.gen_test.NativeCoroutineHandler(RequestHandler)
tornado.test.gen_test.NativeCoroutineHandler.get(self)
tornado.test.gen_test.RunnerGCTest(AsyncTestCase)
tornado.test.gen_test.RunnerGCTest.is_pypy3(self)
tornado.test.gen_test.RunnerGCTest.test_gc(self)
tornado.test.gen_test.RunnerGCTest.test_gc_infinite_async_await(self)
tornado.test.gen_test.RunnerGCTest.test_gc_infinite_coro(self)
tornado.test.gen_test.RunnerGCTest.test_multi_moment(self)
tornado.test.gen_test.UndecoratedCoroutinesHandler(RequestHandler)
tornado.test.gen_test.UndecoratedCoroutinesHandler.get(self)
tornado.test.gen_test.UndecoratedCoroutinesHandler.prepare(self)
tornado.test.gen_test.WaitIteratorTest(AsyncTestCase)
tornado.test.gen_test.WaitIteratorTest.finish_coroutines(self,iteration,futures)
tornado.test.gen_test.WaitIteratorTest.test_already_done(self)
tornado.test.gen_test.WaitIteratorTest.test_empty_iterator(self)
tornado.test.gen_test.WaitIteratorTest.test_iterator(self)
tornado.test.gen_test.WaitIteratorTest.test_iterator_async_await(self)
tornado.test.gen_test.WaitIteratorTest.test_no_ref(self)
tornado.test.gen_test.WithTimeoutTest(AsyncTestCase)
tornado.test.gen_test.WithTimeoutTest.test_already_resolved(self)
tornado.test.gen_test.WithTimeoutTest.test_completed_concurrent_future(self)
tornado.test.gen_test.WithTimeoutTest.test_completes_before_timeout(self)
tornado.test.gen_test.WithTimeoutTest.test_fails_before_timeout(self)
tornado.test.gen_test.WithTimeoutTest.test_normal_concurrent_future(self)
tornado.test.gen_test.WithTimeoutTest.test_timeout(self)
tornado.test.gen_test.WithTimeoutTest.test_timeout_concurrent_future(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/queues_test.py----------------------------------------
A:tornado.test.queues_test.q->tornado.queues.Queue(maxsize=3)
A:tornado.test.queues_test.put2->tornado.queues.Queue(maxsize=3).put(2)
A:tornado.test.queues_test.put->tornado.queues.Queue(maxsize=3).put(3)
A:tornado.test.queues_test.get_timeout->tornado.queues.Queue(maxsize=3).get(timeout=timedelta(seconds=0.01))
A:tornado.test.queues_test.get->asyncio.ensure_future(q.get())
A:tornado.test.queues_test.get0->tornado.queues.Queue(maxsize=3).get()
A:tornado.test.queues_test.get1->tornado.queues.Queue(maxsize=3).get()
A:tornado.test.queues_test.put_timeout->tornado.queues.Queue(maxsize=3).put(1, timeout=timedelta(seconds=0.01))
A:tornado.test.queues_test.join->asyncio.ensure_future(q.join())
tornado.test.queues_test.LifoQueueJoinTest(QueueJoinTest)
tornado.test.queues_test.LifoQueueJoinTest.test_order(self)
tornado.test.queues_test.PriorityQueueJoinTest(QueueJoinTest)
tornado.test.queues_test.PriorityQueueJoinTest.test_order(self)
tornado.test.queues_test.ProducerConsumerTest(AsyncTestCase)
tornado.test.queues_test.ProducerConsumerTest.test_producer_consumer(self)
tornado.test.queues_test.QueueBasicTest(AsyncTestCase)
tornado.test.queues_test.QueueBasicTest.test_maxsize(self)
tornado.test.queues_test.QueueBasicTest.test_order(self)
tornado.test.queues_test.QueueBasicTest.test_repr_and_str(self)
tornado.test.queues_test.QueueGetTest(AsyncTestCase)
tornado.test.queues_test.QueueGetTest.test_async_for(self)
tornado.test.queues_test.QueueGetTest.test_blocking_get(self)
tornado.test.queues_test.QueueGetTest.test_blocking_get_wait(self)
tornado.test.queues_test.QueueGetTest.test_get_clears_timed_out_getters(self)
tornado.test.queues_test.QueueGetTest.test_get_clears_timed_out_putters(self)
tornado.test.queues_test.QueueGetTest.test_get_timeout(self)
tornado.test.queues_test.QueueGetTest.test_get_timeout_preempted(self)
tornado.test.queues_test.QueueGetTest.test_get_with_putters(self)
tornado.test.queues_test.QueueGetTest.test_nonblocking_get(self)
tornado.test.queues_test.QueueGetTest.test_nonblocking_get_exception(self)
tornado.test.queues_test.QueueJoinTest(AsyncTestCase)
tornado.test.queues_test.QueueJoinTest.test_join_empty_queue(self)
tornado.test.queues_test.QueueJoinTest.test_join_timeout(self)
tornado.test.queues_test.QueueJoinTest.test_task_done(self)
tornado.test.queues_test.QueueJoinTest.test_task_done_delay(self)
tornado.test.queues_test.QueueJoinTest.test_task_done_underflow(self)
tornado.test.queues_test.QueuePutTest(AsyncTestCase)
tornado.test.queues_test.QueuePutTest.test_blocking_put(self)
tornado.test.queues_test.QueuePutTest.test_blocking_put_wait(self)
tornado.test.queues_test.QueuePutTest.test_float_maxsize(self)
tornado.test.queues_test.QueuePutTest.test_nonblocking_put_exception(self)
tornado.test.queues_test.QueuePutTest.test_nonblocking_put_with_getters(self)
tornado.test.queues_test.QueuePutTest.test_put_clears_timed_out_getters(self)
tornado.test.queues_test.QueuePutTest.test_put_clears_timed_out_putters(self)
tornado.test.queues_test.QueuePutTest.test_put_timeout(self)
tornado.test.queues_test.QueuePutTest.test_put_timeout_preempted(self)
tornado.test.queues_test.QueuePutTest.test_put_with_getters(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/httputil_test.py----------------------------------------
A:tornado.test.httputil_test.url->url_concat('https://localhost/path', dict(y='y'))
A:tornado.test.httputil_test.qs->urllib.parse.parse_qs(qsstring)
A:tornado.test.httputil_test.qsl->list(qs_to_qsl(qs))
A:tornado.test.httputil_test.data->'Foo: bar\n baz\nAsdf: qwer\n\tzxcv\nFoo: even\n     more\n     lines\n'.replace('\n', '\r\n')
A:tornado.test.httputil_test.(args, files)->form_data_args()
A:tornado.test.httputil_test.headers->HTTPHeaders()
A:tornado.test.httputil_test.encoded->newline.encode(encoding)
A:tornado.test.httputil_test.h1->HTTPHeaders()
A:tornado.test.httputil_test.h2->HTTPHeaders().copy()
A:tornado.test.httputil_test.h3->copy.copy(h1)
A:tornado.test.httputil_test.h4->copy.deepcopy(h1)
A:tornado.test.httputil_test.pickled->pickle.dumps(headers)
A:tornado.test.httputil_test.unpickled->pickle.loads(pickled)
A:tornado.test.httputil_test.headers2->tornado.httputil.HTTPHeaders.parse(str(headers))
A:tornado.test.httputil_test.tup->tuple(time.gmtime(self.TIMESTAMP))
A:tornado.test.httputil_test.requets->HTTPServerRequest(uri='/')
A:tornado.test.httputil_test.request->HTTPServerRequest(uri='/', headers=HTTPHeaders({'Canary': ['Coal Mine']}))
A:tornado.test.httputil_test.start_line->' '.join([self.METHOD, self.PATH, self.VERSION])
A:tornado.test.httputil_test.parsed_start_line->parse_request_start_line(start_line)
tornado.test.httputil_test.FormatTimestampTest(unittest.TestCase)
tornado.test.httputil_test.FormatTimestampTest.check(self,value)
tornado.test.httputil_test.FormatTimestampTest.test_datetime(self)
tornado.test.httputil_test.FormatTimestampTest.test_struct_time(self)
tornado.test.httputil_test.FormatTimestampTest.test_time_tuple(self)
tornado.test.httputil_test.FormatTimestampTest.test_unix_time_float(self)
tornado.test.httputil_test.FormatTimestampTest.test_unix_time_int(self)
tornado.test.httputil_test.HTTPHeadersTest(unittest.TestCase)
tornado.test.httputil_test.HTTPHeadersTest.test_copy(self)
tornado.test.httputil_test.HTTPHeadersTest.test_malformed_continuation(self)
tornado.test.httputil_test.HTTPHeadersTest.test_multi_line(self)
tornado.test.httputil_test.HTTPHeadersTest.test_optional_cr(self)
tornado.test.httputil_test.HTTPHeadersTest.test_pickle_roundtrip(self)
tornado.test.httputil_test.HTTPHeadersTest.test_setdefault(self)
tornado.test.httputil_test.HTTPHeadersTest.test_string(self)
tornado.test.httputil_test.HTTPHeadersTest.test_unicode_newlines(self)
tornado.test.httputil_test.HTTPServerRequestTest(unittest.TestCase)
tornado.test.httputil_test.HTTPServerRequestTest.test_body_is_a_byte_string(self)
tornado.test.httputil_test.HTTPServerRequestTest.test_default_constructor(self)
tornado.test.httputil_test.HTTPServerRequestTest.test_repr_does_not_contain_headers(self)
tornado.test.httputil_test.MultipartFormDataTest(unittest.TestCase)
tornado.test.httputil_test.MultipartFormDataTest.test_boundary_starts_and_ends_with_quotes(self)
tornado.test.httputil_test.MultipartFormDataTest.test_content_disposition_header_without_name_parameter(self)
tornado.test.httputil_test.MultipartFormDataTest.test_data_after_final_boundary(self)
tornado.test.httputil_test.MultipartFormDataTest.test_file_upload(self)
tornado.test.httputil_test.MultipartFormDataTest.test_invalid_content_disposition(self)
tornado.test.httputil_test.MultipartFormDataTest.test_line_does_not_end_with_correct_line_break(self)
tornado.test.httputil_test.MultipartFormDataTest.test_missing_headers(self)
tornado.test.httputil_test.MultipartFormDataTest.test_non_ascii_filename(self)
tornado.test.httputil_test.MultipartFormDataTest.test_special_filenames(self)
tornado.test.httputil_test.MultipartFormDataTest.test_unquoted_names(self)
tornado.test.httputil_test.ParseCookieTest(unittest.TestCase)
tornado.test.httputil_test.ParseCookieTest.test_cookie_edgecases(self)
tornado.test.httputil_test.ParseCookieTest.test_invalid_cookies(self)
tornado.test.httputil_test.ParseCookieTest.test_python_cookies(self)
tornado.test.httputil_test.ParseRequestStartLineTest(unittest.TestCase)
tornado.test.httputil_test.ParseRequestStartLineTest.test_parse_request_start_line(self)
tornado.test.httputil_test.QsParseTest(unittest.TestCase)
tornado.test.httputil_test.QsParseTest.test_parsing(self)
tornado.test.httputil_test.TestUrlConcat(unittest.TestCase)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_dict_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_encode_args(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_mult_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_query_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_query_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_none_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_q_with_no_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_q(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_with_frag(self)
tornado.test.httputil_test.form_data_args()->Tuple[Dict[str, List[bytes]], Dict[str, List[HTTPFile]]]


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/web_test.py----------------------------------------
A:tornado.test.web_test.self.app->Application(self.get_handlers(), **self.get_app_kwargs())
A:tornado.test.web_test.self.application->ObjectDict(settings=dict(cookie_secret=cookie_secret, key_version=key_version))
A:tornado.test.web_test.handler->CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS, key_version=0)
A:tornado.test.web_test.match->re.match('.*; expires=(?P<expires>.+);.*', header)
A:tornado.test.web_test.timestamp->re.match('.*; expires=(?P<expires>.+);.*', header).group(1)
A:tornado.test.web_test.sig->re.match('.*; expires=(?P<expires>.+);.*', header).group(2)
A:tornado.test.web_test.handler._cookies['foo']->utf8('1234|5678%s|%s' % (to_basestring(timestamp), to_basestring(sig)))
A:tornado.test.web_test.new_handler->CookieTestRequestHandler(cookie_secret=new_key_versions, key_version=1)
A:tornado.test.web_test.new_key_versions->self.KEY_VERSIONS.copy()
A:tornado.test.web_test.test.final_return->self.render('foo.html')
A:tornado.test.web_test.response->self.fetch('/', headers={'Accept-Language': 'fr-FR;q=-1'})
A:tornado.test.web_test.cookie->self.get_cookie('foo', 'default')
A:tornado.test.web_test.headers->self.cookie_headers(old_token)
A:tornado.test.web_test.header->self.fetch('/', headers={'Accept-Language': 'fr-FR;q=-1'}).headers.get('Set-Cookie')
A:tornado.test.web_test.parsed->email.utils.parsedate(match.groupdict()['expires'])
A:tornado.test.web_test.header_expires->datetime.datetime(*parsed[:6])
A:tornado.test.web_test.self.cleanup_event->Event()
A:tornado.test.web_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.web_test.self.stream->IOStream(s)
A:tornado.test.web_test.actual_type->type(obj)
A:tornado.test.web_test.loader->DictLoader({'without_user.html': '', 'with_user.html': '{{ current_user }}', 'without_user_module.html': '{% module WithoutUserModule() %}', 'with_user_module.html': '{% module WithUserModule() %}'})
A:tornado.test.web_test.cookie_value->to_unicode(create_signed_value(self.COOKIE_SECRET, 'asdf', 'qwer'))
A:tornado.test.web_test.data->json_decode(response.body)
A:tornado.test.web_test.body->urllib.parse.urlencode(dict())
A:tornado.test.web_test.static_dir->os.path.join(os.path.dirname(__file__), 'static')
A:tornado.test.web_test.with_v->int(self.get_argument('include_version', '1'))
A:tornado.test.web_test.do_include->bool(self.get_argument('include_host'))
A:tornado.test.web_test.regular_url->self.static_url(path)
A:tornado.test.web_test.override_url->self.static_url(path, include_host=do_include)
A:tornado.test.web_test.protocol_length->len(protocol)
A:tornado.test.web_test.check_regular->self.static_url(path).find(protocol, 0, protocol_length)
A:tornado.test.web_test.check_override->self.static_url(path, include_host=do_include).find(protocol, 0, protocol_length)
A:tornado.test.web_test.head_response->self.fetch(*args, method='HEAD', **kwargs)
A:tornado.test.web_test.get_response->self.fetch(*args, method='GET', **kwargs)
A:tornado.test.web_test.content_headers->set()
A:tornado.test.web_test.response1->self.fetch('/')
A:tornado.test.web_test.response2->self.fetch('/', headers={'If-None-Match': response1.headers['Etag']})
A:tornado.test.web_test.stat->os.stat(relpath('static/robots.txt'))
A:tornado.test.web_test.robots_file_path->os.path.join(self.static_dir, 'robots.txt')
A:tornado.test.web_test.self.http_client->SimpleAsyncHTTPClient()
A:tornado.test.web_test.path->os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static/robots.txt')
A:tornado.test.web_test.version_hash->cls.get_version(settings, path)
A:tornado.test.web_test.extension_index->url_path.rindex('.')
A:tornado.test.web_test.version_index->url_path.rindex('.', 0, extension_index)
A:tornado.test.web_test.reason->self.request.arguments.get('reason', [])
A:tornado.test.web_test.header_date->datetime.datetime(*parsed[:6])
A:tornado.test.web_test.set_cookies->sorted(response.headers.get_list('Set-Cookie'))
A:tornado.test.web_test.exc->self.get_argument('exc')
A:tornado.test.web_test.self.locale->tornado.locale.get('en_US')
A:tornado.test.web_test.resp->self.fetch('/')
A:tornado.test.web_test.stream->self.connect(b'/close_detection', connection_close=False)
A:tornado.test.web_test.self.prepared->Future()
A:tornado.test.web_test.self.data->Future()
A:tornado.test.web_test.self.finished->Future()
A:tornado.test.web_test.self.close_future->Future()
A:tornado.test.web_test.bytesio->BytesIO()
A:tornado.test.web_test.gzip_file->gzip.GzipFile(mode='w', fileobj=bytesio)
A:tornado.test.web_test.compressed_body->BytesIO().getvalue()
A:tornado.test.web_test.signed_v1->create_signed_value(SignedValueTest.SECRET, 'key', 'value', version=1, clock=self.present)
A:tornado.test.web_test.signed_v2->create_signed_value(SignedValueTest.SECRET, 'key', 'value', version=2, clock=self.present)
A:tornado.test.web_test.signed_default->create_signed_value(SignedValueTest.SECRET, 'key', 'value', clock=self.present)
A:tornado.test.web_test.decoded_v1->decode_signed_value(SignedValueTest.SECRET, 'key', signed_v1, min_version=1, clock=self.present)
A:tornado.test.web_test.decoded_v2->decode_signed_value(SignedValueTest.SECRET, 'key', signed_v2, min_version=2, clock=self.present)
A:tornado.test.web_test.signed1->create_signed_value(SignedValueTest.SECRET, 'key1', 'value', clock=self.present)
A:tornado.test.web_test.signed2->create_signed_value(SignedValueTest.SECRET, 'key2', 'value', clock=self.present)
A:tornado.test.web_test.decoded1->decode_signed_value(SignedValueTest.SECRET, 'key2', signed1, clock=self.present)
A:tornado.test.web_test.decoded2->decode_signed_value(SignedValueTest.SECRET, 'key1', signed2, clock=self.present)
A:tornado.test.web_test.signed->create_signed_value(SignedValueTest.SECRET_DICT, 'key', value, clock=self.present, key_version=1)
A:tornado.test.web_test.decoded_past->decode_signed_value(SignedValueTest.SECRET, 'key1', signed, clock=self.past)
A:tornado.test.web_test.decoded_present->decode_signed_value(SignedValueTest.SECRET, 'key1', signed, clock=self.present)
A:tornado.test.web_test.decoded->decode_signed_value(newkeys, 'key', signed, clock=self.present)
A:tornado.test.web_test.newkeys->SignedValueTest.SECRET_DICT.copy()
A:tornado.test.web_test.key_version->get_signature_key_version(signed)
A:tornado.test.web_test.version->int(self.get_argument('version', '2'))
A:tornado.test.web_test.self.xsrf_token->self.get_token()
A:tornado.test.web_test.tokens->set()
A:tornado.test.web_test.token2->self.get_token()
A:tornado.test.web_test.tokens_seen->set([token])
A:tornado.test.web_test.token->self.get_token(token)
A:tornado.test.web_test.v1_token->self.get_token(version=1)
A:tornado.test.web_test.v2_token->self.get_token(v1_token)
A:tornado.test.web_test.e->HTTPError(403, reason='Go away')
A:tornado.test.web_test.e2->copy.copy(e)
A:tornado.test.web_test.app->Application([])
A:tornado.test.web_test.server->Application([]).listen(0, address='127.0.0.1')
A:tornado.test.web_test.url_spec->url(path, None)
A:tornado.test.web_test.result->url(path, None).reverse()
tornado.test.web_test.AcceptLanguageTest(WebTestCase)
tornado.test.web_test.AcceptLanguageTest.get_handlers(self)
tornado.test.web_test.AcceptLanguageTest.test_accept_language(self)
tornado.test.web_test.AcceptLanguageTest.test_accept_language_ignore(self)
tornado.test.web_test.AcceptLanguageTest.test_accept_language_invalid(self)
tornado.test.web_test.AllHTTPMethodsTest(SimpleHandlerTestCase)
tornado.test.web_test.AllHTTPMethodsTest.Handler(RequestHandler)
tornado.test.web_test.AllHTTPMethodsTest.Handler.method(self)
tornado.test.web_test.AllHTTPMethodsTest.test_standard_methods(self)
tornado.test.web_test.ApplicationTest(AsyncTestCase)
tornado.test.web_test.ApplicationTest.test_listen(self)
tornado.test.web_test.AuthRedirectRequestHandler(RequestHandler)
tornado.test.web_test.AuthRedirectRequestHandler.get(self)
tornado.test.web_test.AuthRedirectRequestHandler.get_login_url(self)
tornado.test.web_test.AuthRedirectRequestHandler.initialize(self,login_url)
tornado.test.web_test.AuthRedirectTest(WebTestCase)
tornado.test.web_test.AuthRedirectTest.get_handlers(self)
tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect(self)
tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect(self)
tornado.test.web_test.BaseFlowControlHandler(RequestHandler)
tornado.test.web_test.BaseFlowControlHandler.in_method(self,method)
tornado.test.web_test.BaseFlowControlHandler.initialize(self,test)
tornado.test.web_test.BaseFlowControlHandler.post(self)
tornado.test.web_test.BaseFlowControlHandler.prepare(self)
tornado.test.web_test.BaseStreamingRequestFlowControlTest(object)
tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_http_client(self)
tornado.test.web_test.BaseStreamingRequestFlowControlTest.get_httpserver_options(self)
tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_chunked_body(self:typing.Any)
tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_compressed_body(self:typing.Any)
tornado.test.web_test.BaseStreamingRequestFlowControlTest.test_flow_control_fixed_body(self:typing.Any)
tornado.test.web_test.BuggyLoggingTest(SimpleHandlerTestCase)
tornado.test.web_test.BuggyLoggingTest.Handler(RequestHandler)
tornado.test.web_test.BuggyLoggingTest.Handler.get(self)
tornado.test.web_test.BuggyLoggingTest.Handler.log_exception(self,typ,value,tb)
tornado.test.web_test.BuggyLoggingTest.test_buggy_log_exception(self)
tornado.test.web_test.CacheTest(WebTestCase)
tornado.test.web_test.CacheTest._test_etag(self,computed_etag,etags,status_code)
tornado.test.web_test.CacheTest.get_handlers(self)
tornado.test.web_test.CacheTest.test_multiple_strong_etag_match(self)
tornado.test.web_test.CacheTest.test_multiple_strong_etag_not_match(self)
tornado.test.web_test.CacheTest.test_multiple_weak_etag_match(self)
tornado.test.web_test.CacheTest.test_multiple_weak_etag_not_match(self)
tornado.test.web_test.CacheTest.test_strong_etag_match(self)
tornado.test.web_test.CacheTest.test_strong_etag_not_match(self)
tornado.test.web_test.CacheTest.test_weak_etag_match(self)
tornado.test.web_test.CacheTest.test_weak_etag_not_match(self)
tornado.test.web_test.CacheTest.test_wildcard_etag(self)
tornado.test.web_test.ClearAllCookiesTest(SimpleHandlerTestCase)
tornado.test.web_test.ClearAllCookiesTest.Handler(RequestHandler)
tornado.test.web_test.ClearAllCookiesTest.Handler.get(self)
tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies(self)
tornado.test.web_test.ClearHeaderTest(SimpleHandlerTestCase)
tornado.test.web_test.ClearHeaderTest.Handler(RequestHandler)
tornado.test.web_test.ClearHeaderTest.Handler.get(self)
tornado.test.web_test.ClearHeaderTest.test_clear_header(self)
tornado.test.web_test.ClientCloseTest(SimpleHandlerTestCase)
tornado.test.web_test.ClientCloseTest.Handler(RequestHandler)
tornado.test.web_test.ClientCloseTest.Handler.get(self)
tornado.test.web_test.ClientCloseTest.test_client_close(self)
tornado.test.web_test.ConnectionCloseHandler(RequestHandler)
tornado.test.web_test.ConnectionCloseHandler.get(self)
tornado.test.web_test.ConnectionCloseHandler.initialize(self,test)
tornado.test.web_test.ConnectionCloseHandler.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest(WebTestCase)
tornado.test.web_test.ConnectionCloseTest.get_handlers(self)
tornado.test.web_test.ConnectionCloseTest.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest.on_handler_waiting(self)
tornado.test.web_test.ConnectionCloseTest.test_connection_close(self)
tornado.test.web_test.CookieTest(WebTestCase)
tornado.test.web_test.CookieTest.get_handlers(self)
tornado.test.web_test.CookieTest.test_cookie_special_char(self)
tornado.test.web_test.CookieTest.test_get_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie_deprecated(self)
tornado.test.web_test.CookieTest.test_set_cookie_domain(self)
tornado.test.web_test.CookieTest.test_set_cookie_expires_days(self)
tornado.test.web_test.CookieTest.test_set_cookie_false_flags(self)
tornado.test.web_test.CookieTest.test_set_cookie_max_age(self)
tornado.test.web_test.CookieTest.test_set_cookie_overwrite(self)
tornado.test.web_test.CookieTestRequestHandler(self,cookie_secret='0123456789',key_version=None)
tornado.test.web_test.CookieTestRequestHandler.__init__(self,cookie_secret='0123456789',key_version=None)
tornado.test.web_test.CookieTestRequestHandler.get_cookie(self,name)
tornado.test.web_test.CookieTestRequestHandler.set_cookie(self,name,value,expires_days=None)
tornado.test.web_test.Custom404Test(WebTestCase)
tornado.test.web_test.Custom404Test.get_app_kwargs(self)
tornado.test.web_test.Custom404Test.get_handlers(self)
tornado.test.web_test.Custom404Test.test_404(self)
tornado.test.web_test.CustomStaticFileTest(WebTestCase)
tornado.test.web_test.CustomStaticFileTest.get_app_kwargs(self)
tornado.test.web_test.CustomStaticFileTest.get_handlers(self)
tornado.test.web_test.CustomStaticFileTest.test_serve(self)
tornado.test.web_test.CustomStaticFileTest.test_static_url(self)
tornado.test.web_test.DateHeaderTest(SimpleHandlerTestCase)
tornado.test.web_test.DateHeaderTest.Handler(RequestHandler)
tornado.test.web_test.DateHeaderTest.Handler.get(self)
tornado.test.web_test.DateHeaderTest.test_date_header(self)
tornado.test.web_test.DecodeArgHandler(RequestHandler)
tornado.test.web_test.DecodeArgHandler.decode_argument(self,value,name=None)
tornado.test.web_test.DecodeArgHandler.get(self,arg)
tornado.test.web_test.DecoratedStreamingRequestFlowControlTest(BaseStreamingRequestFlowControlTest,WebTestCase)
tornado.test.web_test.DecoratedStreamingRequestFlowControlTest.get_handlers(self)
tornado.test.web_test.DecoratorTest(WebTestCase)
tornado.test.web_test.DecoratorTest.get_handlers(self)
tornado.test.web_test.DecoratorTest.test_addslash(self)
tornado.test.web_test.DecoratorTest.test_removeslash(self)
tornado.test.web_test.Default404Test(WebTestCase)
tornado.test.web_test.Default404Test.get_handlers(self)
tornado.test.web_test.Default404Test.test_404(self)
tornado.test.web_test.DefaultHandlerArgumentsTest(WebTestCase)
tornado.test.web_test.DefaultHandlerArgumentsTest.get_app_kwargs(self)
tornado.test.web_test.DefaultHandlerArgumentsTest.get_handlers(self)
tornado.test.web_test.DefaultHandlerArgumentsTest.test_403(self)
tornado.test.web_test.DefaultHostMatchingTest(WebTestCase)
tornado.test.web_test.DefaultHostMatchingTest.get_app_kwargs(self)
tornado.test.web_test.DefaultHostMatchingTest.get_handlers(self)
tornado.test.web_test.DefaultHostMatchingTest.test_default_host_matching(self)
tornado.test.web_test.EchoHandler(RequestHandler)
tornado.test.web_test.EchoHandler.get(self,*path_args)
tornado.test.web_test.EmptyFlushCallbackHandler(RequestHandler)
tornado.test.web_test.EmptyFlushCallbackHandler.get(self)
tornado.test.web_test.ErrorHandlerXSRFTest(WebTestCase)
tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs(self)
tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers(self)
tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf(self)
tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf(self)
tornado.test.web_test.ErrorResponseTest(WebTestCase)
tornado.test.web_test.ErrorResponseTest.get_handlers(self)
tornado.test.web_test.ErrorResponseTest.test_default(self)
tornado.test.web_test.ErrorResponseTest.test_failed_write_error(self)
tornado.test.web_test.ErrorResponseTest.test_write_error(self)
tornado.test.web_test.ExceptionHandlerTest(SimpleHandlerTestCase)
tornado.test.web_test.ExceptionHandlerTest.Handler(RequestHandler)
tornado.test.web_test.ExceptionHandlerTest.Handler.get(self)
tornado.test.web_test.ExceptionHandlerTest.Handler.log_exception(self,typ,value,tb)
tornado.test.web_test.ExceptionHandlerTest.Handler.write_error(self,status_code,**kwargs)
tornado.test.web_test.ExceptionHandlerTest.test_http_error(self)
tornado.test.web_test.ExceptionHandlerTest.test_known_error(self)
tornado.test.web_test.ExceptionHandlerTest.test_unknown_error(self)
tornado.test.web_test.FinalReturnTest(WebTestCase)
tornado.test.web_test.FinalReturnTest.get_app_kwargs(self)
tornado.test.web_test.FinalReturnTest.get_handlers(self)
tornado.test.web_test.FinalReturnTest.test_finish_method_return_future(self)
tornado.test.web_test.FinalReturnTest.test_render_method_return_future(self)
tornado.test.web_test.FinishExceptionTest(SimpleHandlerTestCase)
tornado.test.web_test.FinishExceptionTest.Handler(RequestHandler)
tornado.test.web_test.FinishExceptionTest.Handler.get(self)
tornado.test.web_test.FinishExceptionTest.test_finish_exception(self)
tornado.test.web_test.FinishInPrepareTest(SimpleHandlerTestCase)
tornado.test.web_test.FinishInPrepareTest.Handler(RequestHandler)
tornado.test.web_test.FinishInPrepareTest.Handler.get(self)
tornado.test.web_test.FinishInPrepareTest.Handler.prepare(self)
tornado.test.web_test.FinishInPrepareTest.test_finish_in_prepare(self)
tornado.test.web_test.GetArgumentErrorTest(SimpleHandlerTestCase)
tornado.test.web_test.GetArgumentErrorTest.Handler(RequestHandler)
tornado.test.web_test.GetArgumentErrorTest.Handler.get(self)
tornado.test.web_test.GetArgumentErrorTest.test_catch_error(self)
tornado.test.web_test.GetArgumentHandler(RequestHandler)
tornado.test.web_test.GetArgumentHandler.prepare(self)
tornado.test.web_test.GetArgumentsHandler(RequestHandler)
tornado.test.web_test.GetArgumentsHandler.prepare(self)
tornado.test.web_test.GetCurrentUserTest(WebTestCase)
tornado.test.web_test.GetCurrentUserTest.get_app_kwargs(self)
tornado.test.web_test.GetCurrentUserTest.get_handlers(self)
tornado.test.web_test.GetCurrentUserTest.tearDown(self)
tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy(self)
tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_works(self)
tornado.test.web_test.GetCurrentUserTest.test_get_current_user_is_lazy(self)
tornado.test.web_test.GetCurrentUserTest.test_get_current_user_works(self)
tornado.test.web_test.GzipTestCase(SimpleHandlerTestCase)
tornado.test.web_test.GzipTestCase.Handler(RequestHandler)
tornado.test.web_test.GzipTestCase.Handler.get(self)
tornado.test.web_test.GzipTestCase.assert_compressed(self,response)
tornado.test.web_test.GzipTestCase.get_app_kwargs(self)
tornado.test.web_test.GzipTestCase.test_gzip(self)
tornado.test.web_test.GzipTestCase.test_gzip_not_requested(self)
tornado.test.web_test.GzipTestCase.test_gzip_static(self)
tornado.test.web_test.GzipTestCase.test_vary_already_present(self)
tornado.test.web_test.GzipTestCase.test_vary_already_present_multiple(self)
tornado.test.web_test.HTTPErrorTest(unittest.TestCase)
tornado.test.web_test.HTTPErrorTest.test_copy(self)
tornado.test.web_test.HandlerByNameTest(WebTestCase)
tornado.test.web_test.HandlerByNameTest.get_handlers(self)
tornado.test.web_test.HandlerByNameTest.test_handler_by_name(self)
tornado.test.web_test.Header204Test(SimpleHandlerTestCase)
tornado.test.web_test.Header204Test.Handler(RequestHandler)
tornado.test.web_test.Header204Test.Handler.get(self)
tornado.test.web_test.Header204Test.test_204_headers(self)
tornado.test.web_test.Header304Test(SimpleHandlerTestCase)
tornado.test.web_test.Header304Test.Handler(RequestHandler)
tornado.test.web_test.Header304Test.Handler.get(self)
tornado.test.web_test.Header304Test.test_304_headers(self)
tornado.test.web_test.HeaderInjectionHandler(RequestHandler)
tornado.test.web_test.HeaderInjectionHandler.get(self)
tornado.test.web_test.HelloHandler(RequestHandler)
tornado.test.web_test.HelloHandler.get(self)
tornado.test.web_test.HostMatchingTest(WebTestCase)
tornado.test.web_test.HostMatchingTest.Handler(RequestHandler)
tornado.test.web_test.HostMatchingTest.Handler.get(self)
tornado.test.web_test.HostMatchingTest.Handler.initialize(self,reply)
tornado.test.web_test.HostMatchingTest.get_handlers(self)
tornado.test.web_test.HostMatchingTest.test_host_matching(self)
tornado.test.web_test.IncorrectContentLengthTest(SimpleHandlerTestCase)
tornado.test.web_test.IncorrectContentLengthTest.get_handlers(self)
tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_high(self)
tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_low(self)
tornado.test.web_test.LinkifyHandler(RequestHandler)
tornado.test.web_test.LinkifyHandler.get(self)
tornado.test.web_test.MultiHeaderHandler(RequestHandler)
tornado.test.web_test.MultiHeaderHandler.get(self)
tornado.test.web_test.NamedURLSpecGroupsTest(WebTestCase)
tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers(self)
tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups(self)
tornado.test.web_test.NativeStreamingRequestFlowControlTest(BaseStreamingRequestFlowControlTest,WebTestCase)
tornado.test.web_test.NativeStreamingRequestFlowControlTest.get_handlers(self)
tornado.test.web_test.NonWSGIWebTests(WebTestCase)
tornado.test.web_test.NonWSGIWebTests.get_handlers(self)
tornado.test.web_test.NonWSGIWebTests.test_empty_flush(self)
tornado.test.web_test.OptionalPathHandler(RequestHandler)
tornado.test.web_test.OptionalPathHandler.get(self,path)
tornado.test.web_test.PatchMethodTest(SimpleHandlerTestCase)
tornado.test.web_test.PatchMethodTest.Handler(RequestHandler)
tornado.test.web_test.PatchMethodTest.Handler.other(self)
tornado.test.web_test.PatchMethodTest.Handler.patch(self)
tornado.test.web_test.PatchMethodTest.test_other(self)
tornado.test.web_test.PatchMethodTest.test_patch(self)
tornado.test.web_test.PathArgsInPrepareTest(WebTestCase)
tornado.test.web_test.PathArgsInPrepareTest.Handler(RequestHandler)
tornado.test.web_test.PathArgsInPrepareTest.Handler.get(self,path)
tornado.test.web_test.PathArgsInPrepareTest.Handler.prepare(self)
tornado.test.web_test.PathArgsInPrepareTest.get_handlers(self)
tornado.test.web_test.PathArgsInPrepareTest.test_kw(self)
tornado.test.web_test.PathArgsInPrepareTest.test_pos(self)
tornado.test.web_test.PermissionError(Exception)
tornado.test.web_test.RaiseWithReasonTest(SimpleHandlerTestCase)
tornado.test.web_test.RaiseWithReasonTest.Handler(RequestHandler)
tornado.test.web_test.RaiseWithReasonTest.Handler.get(self)
tornado.test.web_test.RaiseWithReasonTest.get_http_client(self)
tornado.test.web_test.RaiseWithReasonTest.test_httperror_str(self)
tornado.test.web_test.RaiseWithReasonTest.test_httperror_str_from_httputil(self)
tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason(self)
tornado.test.web_test.RedirectHandler(RequestHandler)
tornado.test.web_test.RedirectHandler.get(self)
tornado.test.web_test.RedirectHandlerTest(WebTestCase)
tornado.test.web_test.RedirectHandlerTest.get_handlers(self)
tornado.test.web_test.RedirectHandlerTest.test_basic_redirect(self)
tornado.test.web_test.RedirectHandlerTest.test_redirect_pattern(self)
tornado.test.web_test.RedirectHandlerTest.test_redirect_with_appending_argument(self)
tornado.test.web_test.RedirectHandlerTest.test_redirect_with_argument(self)
tornado.test.web_test.RequestEncodingTest(WebTestCase)
tornado.test.web_test.RequestEncodingTest.fetch_json(self,path)
tornado.test.web_test.RequestEncodingTest.get_handlers(self)
tornado.test.web_test.RequestEncodingTest.test_error(self)
tornado.test.web_test.RequestEncodingTest.test_group_encoding(self)
tornado.test.web_test.RequestEncodingTest.test_group_question_mark(self)
tornado.test.web_test.RequestEncodingTest.test_slashes(self)
tornado.test.web_test.RequestSummaryTest(SimpleHandlerTestCase)
tornado.test.web_test.RequestSummaryTest.Handler(RequestHandler)
tornado.test.web_test.RequestSummaryTest.Handler.get(self)
tornado.test.web_test.RequestSummaryTest.test_missing_remote_ip(self)
tornado.test.web_test.SecureCookieV1Test(unittest.TestCase)
tornado.test.web_test.SecureCookieV1Test.test_arbitrary_bytes(self)
tornado.test.web_test.SecureCookieV1Test.test_cookie_tampering_future_timestamp(self)
tornado.test.web_test.SecureCookieV1Test.test_round_trip(self)
tornado.test.web_test.SecureCookieV2Test(unittest.TestCase)
tornado.test.web_test.SecureCookieV2Test.test_key_version_increment_version(self)
tornado.test.web_test.SecureCookieV2Test.test_key_version_invalidate_version(self)
tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip(self)
tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip_differing_version(self)
tornado.test.web_test.SecureCookieV2Test.test_round_trip(self)
tornado.test.web_test.SetLazyPropertiesTest(SimpleHandlerTestCase)
tornado.test.web_test.SetLazyPropertiesTest.Handler(RequestHandler)
tornado.test.web_test.SetLazyPropertiesTest.Handler.get(self)
tornado.test.web_test.SetLazyPropertiesTest.Handler.get_current_user(self)
tornado.test.web_test.SetLazyPropertiesTest.Handler.get_user_locale(self)
tornado.test.web_test.SetLazyPropertiesTest.Handler.prepare(self)
tornado.test.web_test.SetLazyPropertiesTest.test_set_properties(self)
tornado.test.web_test.SignedValueTest(unittest.TestCase)
tornado.test.web_test.SignedValueTest.past(self)
tornado.test.web_test.SignedValueTest.present(self)
tornado.test.web_test.SignedValueTest.test_expired(self)
tornado.test.web_test.SignedValueTest.test_key_version_retrieval(self)
tornado.test.web_test.SignedValueTest.test_key_versioning_invalid_key(self)
tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_default_key(self)
tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_non_default_key(self)
tornado.test.web_test.SignedValueTest.test_known_values(self)
tornado.test.web_test.SignedValueTest.test_name_swap(self)
tornado.test.web_test.SignedValueTest.test_non_ascii(self)
tornado.test.web_test.SignedValueTest.test_payload_tampering(self)
tornado.test.web_test.SignedValueTest.test_signature_tampering(self)
tornado.test.web_test.SimpleHandlerTestCase(WebTestCase)
tornado.test.web_test.SimpleHandlerTestCase.get_handlers(self)
tornado.test.web_test.StaticDefaultFilenameTest(WebTestCase)
tornado.test.web_test.StaticDefaultFilenameTest.get_app_kwargs(self)
tornado.test.web_test.StaticDefaultFilenameTest.get_handlers(self)
tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_filename(self)
tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_redirect(self)
tornado.test.web_test.StaticFileTest(WebTestCase)
tornado.test.web_test.StaticFileTest._trigger_include_host_check(self,include_host)
tornado.test.web_test.StaticFileTest.get_and_head(self,*args,**kwargs)
tornado.test.web_test.StaticFileTest.get_app_kwargs(self)
tornado.test.web_test.StaticFileTest.get_handlers(self)
tornado.test.web_test.StaticFileTest.test_absolute_static_url(self)
tornado.test.web_test.StaticFileTest.test_absolute_version_exclusion(self)
tornado.test.web_test.StaticFileTest.test_include_host_override(self)
tornado.test.web_test.StaticFileTest.test_path_traversal_protection(self)
tornado.test.web_test.StaticFileTest.test_relative_version_exclusion(self)
tornado.test.web_test.StaticFileTest.test_root_static_path(self)
tornado.test.web_test.StaticFileTest.test_static_304_etag_modified_bug(self)
tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since(self)
tornado.test.web_test.StaticFileTest.test_static_304_if_none_match(self)
tornado.test.web_test.StaticFileTest.test_static_404(self)
tornado.test.web_test.StaticFileTest.test_static_compressed_files(self)
tornado.test.web_test.StaticFileTest.test_static_etag(self)
tornado.test.web_test.StaticFileTest.test_static_files(self)
tornado.test.web_test.StaticFileTest.test_static_head(self)
tornado.test.web_test.StaticFileTest.test_static_head_range(self)
tornado.test.web_test.StaticFileTest.test_static_if_modified_since_pre_epoch(self)
tornado.test.web_test.StaticFileTest.test_static_if_modified_since_time_zone(self)
tornado.test.web_test.StaticFileTest.test_static_invalid_range(self)
tornado.test.web_test.StaticFileTest.test_static_range_if_none_match(self)
tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_end_less_than_start(self)
tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_invalid_start(self)
tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_zero_suffix(self)
tornado.test.web_test.StaticFileTest.test_static_url(self)
tornado.test.web_test.StaticFileTest.test_static_with_range(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_end_edge(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_full_file(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_full_past_end(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_neg_end(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_neg_past_start(self)
tornado.test.web_test.StaticFileTest.test_static_with_range_partial_past_end(self)
tornado.test.web_test.StaticFileWithPathTest(WebTestCase)
tornado.test.web_test.StaticFileWithPathTest.get_app_kwargs(self)
tornado.test.web_test.StaticFileWithPathTest.get_handlers(self)
tornado.test.web_test.StaticFileWithPathTest.test_serve(self)
tornado.test.web_test.StatusReasonTest(SimpleHandlerTestCase)
tornado.test.web_test.StatusReasonTest.Handler(RequestHandler)
tornado.test.web_test.StatusReasonTest.Handler.get(self)
tornado.test.web_test.StatusReasonTest.get_http_client(self)
tornado.test.web_test.StatusReasonTest.test_status(self)
tornado.test.web_test.StreamingRequestBodyTest(WebTestCase)
tornado.test.web_test.StreamingRequestBodyTest.connect(self,url,connection_close)
tornado.test.web_test.StreamingRequestBodyTest.get_handlers(self)
tornado.test.web_test.StreamingRequestBodyTest.test_close_during_upload(self)
tornado.test.web_test.StreamingRequestBodyTest.test_early_return(self)
tornado.test.web_test.StreamingRequestBodyTest.test_early_return_with_data(self)
tornado.test.web_test.StreamingRequestBodyTest.test_streaming_body(self)
tornado.test.web_test.TypeCheckHandler(RequestHandler)
tornado.test.web_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.web_test.TypeCheckHandler.get(self,path_component)
tornado.test.web_test.TypeCheckHandler.post(self,path_component)
tornado.test.web_test.TypeCheckHandler.prepare(self)
tornado.test.web_test.UIMethodUIModuleTest(SimpleHandlerTestCase)
tornado.test.web_test.UIMethodUIModuleTest.Handler(RequestHandler)
tornado.test.web_test.UIMethodUIModuleTest.Handler.get(self)
tornado.test.web_test.UIMethodUIModuleTest.Handler.value(self)
tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs(self)
tornado.test.web_test.UIMethodUIModuleTest.tearDown(self)
tornado.test.web_test.UIMethodUIModuleTest.test_ui_method(self)
tornado.test.web_test.UIModuleResourceHandler(RequestHandler)
tornado.test.web_test.UIModuleResourceHandler.get(self)
tornado.test.web_test.URLSpecReverseTest(unittest.TestCase)
tornado.test.web_test.URLSpecReverseTest.test_non_reversible(self)
tornado.test.web_test.URLSpecReverseTest.test_reverse(self)
tornado.test.web_test.URLSpecReverseTest.test_reverse_arguments(self)
tornado.test.web_test.UnimplementedHTTPMethodsTest(SimpleHandlerTestCase)
tornado.test.web_test.UnimplementedHTTPMethodsTest.Handler(RequestHandler)
tornado.test.web_test.UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods(self)
tornado.test.web_test.UnimplementedNonStandardMethodsTest(SimpleHandlerTestCase)
tornado.test.web_test.UnimplementedNonStandardMethodsTest.Handler(RequestHandler)
tornado.test.web_test.UnimplementedNonStandardMethodsTest.Handler.other(self)
tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_other(self)
tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_patch(self)
tornado.test.web_test.WSGISafeWebTest(WebTestCase)
tornado.test.web_test.WSGISafeWebTest.fetch_json(self,*args,**kwargs)
tornado.test.web_test.WSGISafeWebTest.get_app_kwargs(self)
tornado.test.web_test.WSGISafeWebTest.get_handlers(self)
tornado.test.web_test.WSGISafeWebTest.tearDown(self)
tornado.test.web_test.WSGISafeWebTest.test_decode_argument(self)
tornado.test.web_test.WSGISafeWebTest.test_decode_argument_invalid_unicode(self)
tornado.test.web_test.WSGISafeWebTest.test_decode_argument_plus(self)
tornado.test.web_test.WSGISafeWebTest.test_get_argument(self)
tornado.test.web_test.WSGISafeWebTest.test_get_body_arguments(self)
tornado.test.web_test.WSGISafeWebTest.test_get_query_arguments(self)
tornado.test.web_test.WSGISafeWebTest.test_header_injection(self)
tornado.test.web_test.WSGISafeWebTest.test_multi_header(self)
tornado.test.web_test.WSGISafeWebTest.test_no_gzip(self)
tornado.test.web_test.WSGISafeWebTest.test_optional_path(self)
tornado.test.web_test.WSGISafeWebTest.test_redirect(self)
tornado.test.web_test.WSGISafeWebTest.test_reverse_url(self)
tornado.test.web_test.WSGISafeWebTest.test_types(self)
tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources(self)
tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped(self)
tornado.test.web_test.WSGISafeWebTest.test_web_redirect(self)
tornado.test.web_test.WSGISafeWebTest.test_web_redirect_double_slash(self)
tornado.test.web_test.WebTestCase(AsyncHTTPTestCase)
tornado.test.web_test.WebTestCase.get_app(self)
tornado.test.web_test.WebTestCase.get_app_kwargs(self)
tornado.test.web_test.WebTestCase.get_handlers(self)
tornado.test.web_test.XSRFCookieKwargsTest(SimpleHandlerTestCase)
tornado.test.web_test.XSRFCookieKwargsTest.Handler(RequestHandler)
tornado.test.web_test.XSRFCookieKwargsTest.Handler.get(self)
tornado.test.web_test.XSRFCookieKwargsTest.get_app_kwargs(self)
tornado.test.web_test.XSRFCookieKwargsTest.test_xsrf_httponly(self)
tornado.test.web_test.XSRFCookieNameTest(SimpleHandlerTestCase)
tornado.test.web_test.XSRFCookieNameTest.Handler(RequestHandler)
tornado.test.web_test.XSRFCookieNameTest.Handler.get(self)
tornado.test.web_test.XSRFCookieNameTest.Handler.post(self)
tornado.test.web_test.XSRFCookieNameTest.cookie_headers(self,token=None)
tornado.test.web_test.XSRFCookieNameTest.get_app_kwargs(self)
tornado.test.web_test.XSRFCookieNameTest.get_token(self,old_token=None)
tornado.test.web_test.XSRFCookieNameTest.setUp(self)
tornado.test.web_test.XSRFCookieNameTest.test_xsrf_fail_body_no_cookie(self)
tornado.test.web_test.XSRFCookieNameTest.test_xsrf_fail_no_token(self)
tornado.test.web_test.XSRFCookieNameTest.test_xsrf_success_post_body(self)
tornado.test.web_test.XSRFTest(SimpleHandlerTestCase)
tornado.test.web_test.XSRFTest.Handler(RequestHandler)
tornado.test.web_test.XSRFTest.Handler.get(self)
tornado.test.web_test.XSRFTest.Handler.post(self)
tornado.test.web_test.XSRFTest.cookie_headers(self,token=None)
tornado.test.web_test.XSRFTest.get_app_kwargs(self)
tornado.test.web_test.XSRFTest.get_token(self,old_token=None,version=None)
tornado.test.web_test.XSRFTest.setUp(self)
tornado.test.web_test.XSRFTest.test_cross_user(self)
tornado.test.web_test.XSRFTest.test_distinct_tokens(self)
tornado.test.web_test.XSRFTest.test_refresh_token(self)
tornado.test.web_test.XSRFTest.test_versioning(self)
tornado.test.web_test.XSRFTest.test_xsrf_fail_argument_invalid_format(self)
tornado.test.web_test.XSRFTest.test_xsrf_fail_body_no_cookie(self)
tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_invalid_format(self)
tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_no_body(self)
tornado.test.web_test.XSRFTest.test_xsrf_fail_no_token(self)
tornado.test.web_test.XSRFTest.test_xsrf_success_header(self)
tornado.test.web_test.XSRFTest.test_xsrf_success_non_hex_token(self)
tornado.test.web_test.XSRFTest.test_xsrf_success_post_body(self)
tornado.test.web_test.XSRFTest.test_xsrf_success_query_string(self)
tornado.test.web_test.XSRFTest.test_xsrf_success_short_token(self)
tornado.test.web_test.relpath(*a)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/ioloop_test.py----------------------------------------
A:tornado.test.ioloop_test.loop.add_callback->types.MethodType(add_callback, loop)
A:tornado.test.ioloop_test.self.start_time->time.time()
A:tornado.test.ioloop_test.self.stop_time->time.time()
A:tornado.test.ioloop_test.thread->threading.Thread(target=target)
A:tornado.test.ioloop_test.(sock, port)->bind_unused_port()
A:tornado.test.ioloop_test.other_ioloop->IOLoop()
A:tornado.test.ioloop_test.closing->threading.Event()
A:tornado.test.ioloop_test.(client, server)->socket.socketpair()
A:tornado.test.ioloop_test.handle->self.io_loop.call_later(0, lambda : None)
A:tornado.test.ioloop_test.timeout->self.io_loop.add_timeout(self.io_loop.time() + 3600, lambda : None)
A:tornado.test.ioloop_test.now->self.io_loop.time()
A:tornado.test.ioloop_test.t2_handle->self.io_loop.add_timeout(now + 0.02, t2)
A:tornado.test.ioloop_test.(sockobj, port)->bind_unused_port()
A:tornado.test.ioloop_test.socket_wrapper->SocketWrapper(sockobj)
A:tornado.test.ioloop_test.io_loop->IOLoop()
A:tornado.test.ioloop_test.(server_sock, port)->bind_unused_port()
A:tornado.test.ioloop_test.(conn, addr)->server_sock.accept()
A:tornado.test.ioloop_test.loop->tornado.ioloop.IOLoop.current()
A:tornado.test.ioloop_test.asyncio_loop->asyncio.new_event_loop()
A:tornado.test.ioloop_test.self.io_loop->IOLoop(make_current=False)
A:tornado.test.ioloop_test.self.current_io_loop->tornado.ioloop.IOLoop.current()
A:tornado.test.ioloop_test.future->self.wait()
A:tornado.test.ioloop_test.event1->threading.Event()
A:tornado.test.ioloop_test.event2->threading.Event()
A:tornado.test.ioloop_test.event->threading.Event()
A:tornado.test.ioloop_test.executor->MyExecutor(1)
A:tornado.test.ioloop_test.pc->PeriodicCallback(callback, 10)
A:tornado.test.ioloop_test.cls->self.run_python('from tornado.platform.asyncio import AsyncIOMainLoop', 'AsyncIOMainLoop().install()', 'print(classname(IOLoop.current()))')
tornado.test.ioloop_test.TestIOLoop(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_from_signal(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_from_signal_other_thread(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_return_sequence(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_wakeup(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_wakeup_other_thread(self)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_while_closing(self)
tornado.test.ioloop_test.TestIOLoop.test_add_timeout_return(self)
tornado.test.ioloop_test.TestIOLoop.test_add_timeout_timedelta(self)
tornado.test.ioloop_test.TestIOLoop.test_call_at_return(self)
tornado.test.ioloop_test.TestIOLoop.test_call_later_return(self)
tornado.test.ioloop_test.TestIOLoop.test_close_file_object(self)
tornado.test.ioloop_test.TestIOLoop.test_exception_logging(self)
tornado.test.ioloop_test.TestIOLoop.test_exception_logging_future(self)
tornado.test.ioloop_test.TestIOLoop.test_exception_logging_native_coro(self)
tornado.test.ioloop_test.TestIOLoop.test_explicit_asyncio_loop(self)
tornado.test.ioloop_test.TestIOLoop.test_handler_callback_file_object(self)
tornado.test.ioloop_test.TestIOLoop.test_init_close_race(self)
tornado.test.ioloop_test.TestIOLoop.test_mixed_fd_fileobj(self)
tornado.test.ioloop_test.TestIOLoop.test_multiple_add(self)
tornado.test.ioloop_test.TestIOLoop.test_read_while_writeable(self)
tornado.test.ioloop_test.TestIOLoop.test_reentrant(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_handler_from_handler(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_timeout_after_fire(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_timeout_cleanup(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_timeout_from_timeout(self)
tornado.test.ioloop_test.TestIOLoop.test_remove_without_add(self)
tornado.test.ioloop_test.TestIOLoop.test_spawn_callback(self)
tornado.test.ioloop_test.TestIOLoop.test_timeout_with_arguments(self)
tornado.test.ioloop_test.TestIOLoopConfiguration(unittest.TestCase)
tornado.test.ioloop_test.TestIOLoopConfiguration.run_python(self,*statements)
tornado.test.ioloop_test.TestIOLoopConfiguration.test_asyncio(self)
tornado.test.ioloop_test.TestIOLoopConfiguration.test_asyncio_main(self)
tornado.test.ioloop_test.TestIOLoopConfiguration.test_default(self)
tornado.test.ioloop_test.TestIOLoopCurrent(unittest.TestCase)
tornado.test.ioloop_test.TestIOLoopCurrent.setUp(self)
tornado.test.ioloop_test.TestIOLoopCurrent.tearDown(self)
tornado.test.ioloop_test.TestIOLoopCurrent.test_force_current(self)
tornado.test.ioloop_test.TestIOLoopCurrent.test_non_current(self)
tornado.test.ioloop_test.TestIOLoopCurrentAsync(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoopCurrentAsync.setUp(self)
tornado.test.ioloop_test.TestIOLoopCurrentAsync.test_clear_without_current(self)
tornado.test.ioloop_test.TestIOLoopFutures(AsyncTestCase)
tornado.test.ioloop_test.TestIOLoopFutures.test_add_future_threads(self)
tornado.test.ioloop_test.TestIOLoopFutures.test_run_in_executor_gen(self)
tornado.test.ioloop_test.TestIOLoopFutures.test_run_in_executor_native(self)
tornado.test.ioloop_test.TestIOLoopFutures.test_set_default_executor(self)
tornado.test.ioloop_test.TestIOLoopRunSync(unittest.TestCase)
tornado.test.ioloop_test.TestIOLoopRunSync.setUp(self)
tornado.test.ioloop_test.TestIOLoopRunSync.tearDown(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_async_exception(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_async_result(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_current(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_native_coroutine(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_sync_exception(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_sync_result(self)
tornado.test.ioloop_test.TestIOLoopRunSync.test_timeout(self)
tornado.test.ioloop_test.TestPeriodicCallbackAsync(AsyncTestCase)
tornado.test.ioloop_test.TestPeriodicCallbackAsync.test_periodic_async(self)->None
tornado.test.ioloop_test.TestPeriodicCallbackAsync.test_periodic_coro(self)->None
tornado.test.ioloop_test.TestPeriodicCallbackAsync.test_periodic_plain(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath(unittest.TestCase)
tornado.test.ioloop_test.TestPeriodicCallbackMath.dummy(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath.simulate_calls(self,pc,durations)
tornado.test.ioloop_test.TestPeriodicCallbackMath.test_basic(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath.test_clock_backwards(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath.test_jitter(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath.test_overrun(self)
tornado.test.ioloop_test.TestPeriodicCallbackMath.test_timedelta(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/process_test.py----------------------------------------
A:tornado.test.process_test.(sock, port)->bind_unused_port()
A:tornado.test.process_test.id->fork_processes(3, max_restarts=3)
A:tornado.test.process_test.server->HTTPServer(self.get_app())
A:tornado.test.process_test.client->HTTPClient(SimpleAsyncHTTPClient)
A:tornado.test.process_test.pid->int(fetch('/').body)
A:tornado.test.process_test.pid2->int(fetch('/').body)
A:tornado.test.process_test.subproc->Subprocess([sys.executable, '-c', 'import sys; sys.exit(1)'])
A:tornado.test.process_test.ret->self.wait()
A:tornado.test.process_test.fut->Subprocess([sys.executable, '-c', 'import sys; sys.exit(1)']).stdout.read_until_close()
tornado.test.process_test.ProcessTest(unittest.TestCase)
tornado.test.process_test.ProcessTest.get_app(self)
tornado.test.process_test.ProcessTest.tearDown(self)
tornado.test.process_test.ProcessTest.test_multi_process(self)
tornado.test.process_test.SubprocessTest(AsyncTestCase)
tornado.test.process_test.SubprocessTest.term_and_wait(self,subproc)
tornado.test.process_test.SubprocessTest.test_close_stdin(self)
tornado.test.process_test.SubprocessTest.test_sigchild(self)
tornado.test.process_test.SubprocessTest.test_sigchild_future(self)
tornado.test.process_test.SubprocessTest.test_sigchild_signal(self)
tornado.test.process_test.SubprocessTest.test_stderr(self)
tornado.test.process_test.SubprocessTest.test_subprocess(self)
tornado.test.process_test.SubprocessTest.test_wait_for_exit_raise(self)
tornado.test.process_test.SubprocessTest.test_wait_for_exit_raise_disabled(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/twisted_test.py----------------------------------------
A:tornado.test.twisted_test.skipIfNoTwisted->unittest.skipUnless(have_twisted, 'twisted module not present')
tornado.test.twisted_test.ConvertDeferredTest(AsyncTestCase)
tornado.test.twisted_test.ConvertDeferredTest.test_failure(self)
tornado.test.twisted_test.ConvertDeferredTest.test_success(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/util.py----------------------------------------
A:tornado.test.util.skipIfNonUnix->unittest.skipIf(os.name != 'posix' or sys.platform == 'cygwin', 'non-unix platform')
A:tornado.test.util.skipOnTravis->unittest.skipIf('TRAVIS' in os.environ, 'timing tests unreliable on travis')
A:tornado.test.util.skipIfNoNetwork->unittest.skipIf('NO_NETWORK' in os.environ, 'network access disabled')
A:tornado.test.util.skipNotCPython->unittest.skipIf(platform.python_implementation() != 'CPython', 'Not CPython implementation')
A:tornado.test.util.skipPypy3V58->unittest.skipIf(platform.python_implementation() == 'PyPy' and sys.version_info > (3,) and (sys.pypy_version_info < (5, 9)), 'pypy3 5.8 has buggy ssl module')
A:tornado.test.util.sock->socket.socket(socket.AF_INET6)
A:tornado.test.util.skipIfNoIPv6->unittest.skipIf(not _detect_ipv6(), 'ipv6 support not present')
A:tornado.test.util.(server_socket, port)->bind_unused_port()
A:tornado.test.util.client_socket->socket.socket()
A:tornado.test.util.(conn, client_addr)->server_socket.accept()
A:tornado.test.util.global_namespace->dict(caller_globals, **caller_locals)
A:tornado.test.util.subTest->contextlib.contextmanager(lambda *a, **kw: (yield))
tornado.test.util._detect_ipv6()
tornado.test.util.exec_test(caller_globals,caller_locals,s)
tornado.test.util.ignore_deprecation()
tornado.test.util.refusing_port()
tornado.test.util.subTest(test,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/auth_test.py----------------------------------------
A:tornado.test.auth_test.self._OPENID_ENDPOINT->test.get_url('/openid/server/authenticate')
A:tornado.test.auth_test.res->self.authorize_redirect()
A:tornado.test.auth_test.self._OAUTH_REQUEST_TOKEN_URL->test.get_url('/oauth1/server/request_token')
A:tornado.test.auth_test.self._OAUTH_AUTHORIZE_URL->test.get_url('/google/oauth2/authorize')
A:tornado.test.auth_test.self._OAUTH_ACCESS_TOKEN_URL->test.get_url('/google/oauth2/token')
A:tornado.test.auth_test.params->self._oauth_request_parameters('http://www.example.com/api/asdf', dict(key='uiop', secret='5678'), parameters=dict(foo='bar'))
A:tornado.test.auth_test.self._FACEBOOK_BASE_URL->test.get_url('/facebook/server')
A:tornado.test.auth_test.self._OAUTH_AUTHENTICATE_URL->test.get_url('/twitter/server/authenticate')
A:tornado.test.auth_test.self._TWITTER_BASE_URL->test.get_url('/twitter/api')
A:tornado.test.auth_test.response->self.fetch('/client/login')
A:tornado.test.auth_test.parsed->json_decode(response.body)
A:tornado.test.auth_test.get.side_effect->Exception('boom')
A:tornado.test.auth_test.user->json_decode(response.body)
A:tornado.test.auth_test.self._OAUTH_REDIRECT_URI->test.get_url('/client/login')
A:tornado.test.auth_test.code->self.get_argument('code', None)
tornado.test.auth_test.AuthTest(AsyncHTTPTestCase)
tornado.test.auth_test.AuthTest.base_twitter_redirect(self,url)
tornado.test.auth_test.AuthTest.get_app(self)
tornado.test.auth_test.AuthTest.test_facebook_login(self)
tornado.test.auth_test.AuthTest.test_oauth10_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth10a_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10a_get_user_coroutine_exception(self)
tornado.test.auth_test.AuthTest.test_oauth10a_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10a_redirect_error(self)
tornado.test.auth_test.AuthTest.test_oauth10a_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth2_redirect(self)
tornado.test.auth_test.AuthTest.test_openid_get_user(self)
tornado.test.auth_test.AuthTest.test_openid_redirect(self)
tornado.test.auth_test.AuthTest.test_twitter_authenticate_redirect(self)
tornado.test.auth_test.AuthTest.test_twitter_get_user(self)
tornado.test.auth_test.AuthTest.test_twitter_redirect(self)
tornado.test.auth_test.AuthTest.test_twitter_redirect_gen_coroutine(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user(self)
tornado.test.auth_test.AuthTest.test_twitter_show_user_error(self)
tornado.test.auth_test.FacebookClientLoginHandler(RequestHandler,FacebookGraphMixin)
tornado.test.auth_test.FacebookClientLoginHandler.get(self)
tornado.test.auth_test.FacebookClientLoginHandler.initialize(self,test)
tornado.test.auth_test.FacebookServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.FacebookServerAccessTokenHandler.get(self)
tornado.test.auth_test.FacebookServerMeHandler(RequestHandler)
tornado.test.auth_test.FacebookServerMeHandler.get(self)
tornado.test.auth_test.GoogleLoginHandler(RequestHandler,GoogleOAuth2Mixin)
tornado.test.auth_test.GoogleLoginHandler.get(self)
tornado.test.auth_test.GoogleLoginHandler.initialize(self,test)
tornado.test.auth_test.GoogleOAuth2AuthorizeHandler(RequestHandler)
tornado.test.auth_test.GoogleOAuth2AuthorizeHandler.get(self)
tornado.test.auth_test.GoogleOAuth2Test(AsyncHTTPTestCase)
tornado.test.auth_test.GoogleOAuth2Test.get_app(self)
tornado.test.auth_test.GoogleOAuth2Test.test_google_login(self)
tornado.test.auth_test.GoogleOAuth2TokenHandler(RequestHandler)
tornado.test.auth_test.GoogleOAuth2TokenHandler.post(self)
tornado.test.auth_test.GoogleOAuth2UserinfoHandler(RequestHandler)
tornado.test.auth_test.GoogleOAuth2UserinfoHandler.get(self)
tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler(OAuth1ClientLoginHandler)
tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler.get(self)
tornado.test.auth_test.OAuth1ClientLoginHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_get_user_future(self,access_token)
tornado.test.auth_test.OAuth1ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth1ClientLoginHandler.initialize(self,test,version)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.get(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.initialize(self,version)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler.get(self)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler(RequestHandler,OAuth2Mixin)
tornado.test.auth_test.OAuth2ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdClientLoginHandler(RequestHandler,OpenIdMixin)
tornado.test.auth_test.OpenIdClientLoginHandler.get(self)
tornado.test.auth_test.OpenIdClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdServerAuthenticateHandler(RequestHandler)
tornado.test.auth_test.OpenIdServerAuthenticateHandler.post(self)
tornado.test.auth_test.TwitterClientAuthenticateHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientAuthenticateHandler.get(self)
tornado.test.auth_test.TwitterClientHandler(RequestHandler,TwitterMixin)
tornado.test.auth_test.TwitterClientHandler.get_auth_http_client(self)
tornado.test.auth_test.TwitterClientHandler.initialize(self,test)
tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler.get(self)
tornado.test.auth_test.TwitterClientLoginHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientLoginHandler.get(self)
tornado.test.auth_test.TwitterClientShowUserHandler(TwitterClientHandler)
tornado.test.auth_test.TwitterClientShowUserHandler.get(self)
tornado.test.auth_test.TwitterServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.TwitterServerAccessTokenHandler.get(self)
tornado.test.auth_test.TwitterServerShowUserHandler(RequestHandler)
tornado.test.auth_test.TwitterServerShowUserHandler.get(self,screen_name)
tornado.test.auth_test.TwitterServerVerifyCredentialsHandler(RequestHandler)
tornado.test.auth_test.TwitterServerVerifyCredentialsHandler.get(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/tcpserver_test.py----------------------------------------
A:tornado.test.tcpserver_test.(sock, port)->bind_unused_port()
A:tornado.test.tcpserver_test.server->TestServer()
A:tornado.test.tcpserver_test.client->IOStream(socket.socket())
A:tornado.test.tcpserver_test.result->subprocess.run([sys.executable, '-Werror::DeprecationWarning'], capture_output=True, input=code, encoding='utf8', check=True)
A:tornado.test.tcpserver_test.code->textwrap.dedent("\n            import asyncio\n            import socket\n            from tornado.netutil import bind_sockets\n            from tornado.process import task_id, fork_processes\n            from tornado.tcpserver import TCPServer\n\n            # Pick an unused port which we will be able to bind to multiple times.\n            (sock,) = bind_sockets(0, address='127.0.0.1',\n                family=socket.AF_INET, reuse_port=True)\n            port = sock.getsockname()[1]\n\n            fork_processes(3)\n\n            async def main():\n                server = TCPServer()\n                server.listen(port, address='127.0.0.1', reuse_port=True)\n            asyncio.run(main())\n            print(task_id(), end='')\n            ")
A:tornado.test.tcpserver_test.(out, err)->self.run_subproc(code)
tornado.test.tcpserver_test.TCPServerTest(AsyncTestCase)
tornado.test.tcpserver_test.TCPServerTest.test_handle_stream_coroutine_logging(self)
tornado.test.tcpserver_test.TCPServerTest.test_handle_stream_native_coroutine(self)
tornado.test.tcpserver_test.TCPServerTest.test_stop_in_callback(self)
tornado.test.tcpserver_test.TCPServerTest.test_stop_twice(self)
tornado.test.tcpserver_test.TestMultiprocess(unittest.TestCase)
tornado.test.tcpserver_test.TestMultiprocess.run_subproc(self,code:str)->Tuple[str, str]
tornado.test.tcpserver_test.TestMultiprocess.test_add_sockets(self)
tornado.test.tcpserver_test.TestMultiprocess.test_bind_start(self)
tornado.test.tcpserver_test.TestMultiprocess.test_listen_multi_reuse_port(self)
tornado.test.tcpserver_test.TestMultiprocess.test_listen_single(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/autoreload_test.py----------------------------------------
A:tornado.test.autoreload_test.self.path->mkdtemp()
A:tornado.test.autoreload_test.pythonpath->os.getcwd()
A:tornado.test.autoreload_test.p->Popen([sys.executable, '-m', 'testapp'], stdout=subprocess.PIPE, cwd=self.path, env=dict(os.environ, PYTHONPATH=pythonpath), universal_newlines=True)
A:tornado.test.autoreload_test.init_file->os.path.join(self.path, 'testapp', '__init__.py')
A:tornado.test.autoreload_test.main_file->os.path.join(self.path, 'testapp', '__main__.py')
A:tornado.test.autoreload_test.autoreload_proc->Popen([sys.executable, '-m', 'tornado.autoreload', '-m', 'testapp'], stdout=subprocess.PIPE, cwd=self.path, env=dict(os.environ, PYTHONPATH=pythonpath), universal_newlines=True)
tornado.test.autoreload_test.AutoreloadTest(unittest.TestCase)
tornado.test.autoreload_test.AutoreloadTest.setUp(self)
tornado.test.autoreload_test.AutoreloadTest.tearDown(self)
tornado.test.autoreload_test.AutoreloadTest.test_reload_module(self)
tornado.test.autoreload_test.AutoreloadTest.test_reload_wrapper_preservation(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/log_test.py----------------------------------------
A:tornado.test.log_test.LINE_RE->re.compile(b'(?s)\x01\\[E [0-9]{6} [0-9]{2}:[0-9]{2}:[0-9]{2} log_test:[0-9]+\\]\x02 (.*)')
A:tornado.test.log_test.self.formatter->LogFormatter(color=False)
A:tornado.test.log_test.self.logger->logging.Logger('tornado.test.log_test.EnablePrettyLoggingTest')
A:tornado.test.log_test.self.tempdir->tempfile.mkdtemp()
A:tornado.test.log_test.self.filename->os.path.join(self.tempdir, 'log.out')
A:tornado.test.log_test.self.handler->self.make_handler(self.filename)
A:tornado.test.log_test.line->f.read().strip()
A:tornado.test.log_test.m->LogFormatterTest.LINE_RE.match(line)
A:tornado.test.log_test.output->self.get_output()
A:tornado.test.log_test.self.options->OptionParser()
A:tornado.test.log_test.tmpdir->tempfile.mkdtemp()
A:tornado.test.log_test.filenames->glob.glob(tmpdir + '/test_log*')
A:tornado.test.log_test.program->';'.join([IMPORT, statement, LOG_INFO])
A:tornado.test.log_test.proc->subprocess.Popen([sys.executable, '-c', program] + (args or []), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:tornado.test.log_test.(stdout, stderr)->subprocess.Popen([sys.executable, '-c', program] + (args or []), stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
tornado.test.log_test.EnablePrettyLoggingTest(unittest.TestCase)
tornado.test.log_test.EnablePrettyLoggingTest.setUp(self)
tornado.test.log_test.EnablePrettyLoggingTest.test_log_file(self)
tornado.test.log_test.EnablePrettyLoggingTest.test_log_file_with_timed_rotating(self)
tornado.test.log_test.EnablePrettyLoggingTest.test_wrong_rotate_mode_value(self)
tornado.test.log_test.LogFormatterTest(unittest.TestCase)
tornado.test.log_test.LogFormatterTest.get_output(self)
tornado.test.log_test.LogFormatterTest.make_handler(self,filename)
tornado.test.log_test.LogFormatterTest.setUp(self)
tornado.test.log_test.LogFormatterTest.tearDown(self)
tornado.test.log_test.LogFormatterTest.test_basic_logging(self)
tornado.test.log_test.LogFormatterTest.test_bytes_exception_logging(self)
tornado.test.log_test.LogFormatterTest.test_bytes_logging(self)
tornado.test.log_test.LogFormatterTest.test_utf8_logging(self)
tornado.test.log_test.LoggingOptionTest(unittest.TestCase)
tornado.test.log_test.LoggingOptionTest.logs_present(self,statement,args=None)
tornado.test.log_test.LoggingOptionTest.test_default(self)
tornado.test.log_test.LoggingOptionTest.test_disable_code_none(self)
tornado.test.log_test.LoggingOptionTest.test_disable_code_string(self)
tornado.test.log_test.LoggingOptionTest.test_disable_command_line(self)
tornado.test.log_test.LoggingOptionTest.test_disable_command_line_case_insensitive(self)
tornado.test.log_test.LoggingOptionTest.test_disable_override(self)
tornado.test.log_test.LoggingOptionTest.test_tornado_default(self)
tornado.test.log_test.UnicodeLogFormatterTest(LogFormatterTest)
tornado.test.log_test.UnicodeLogFormatterTest.make_handler(self,filename)
tornado.test.log_test.UnicodeLogFormatterTest.test_unicode_logging(self)
tornado.test.log_test.ignore_bytes_warning()


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/curl_httpclient_test.py----------------------------------------
A:tornado.test.curl_httpclient_test.client->CurlAsyncHTTPClient(defaults=dict(allow_ipv6=False))
A:tornado.test.curl_httpclient_test.auth_header->self.request.headers.get('Authorization', None)
A:tornado.test.curl_httpclient_test.(auth_mode, params)->self.request.headers.get('Authorization', None).split(' ', 1)
A:tornado.test.curl_httpclient_test.(k, v)->pair.strip().split('=', 1)
A:tornado.test.curl_httpclient_test.h1->md5(utf8('%s:%s:%s' % (self.username, realm, self.password))).hexdigest()
A:tornado.test.curl_httpclient_test.h2->md5(utf8('%s:%s' % (self.request.method, self.request.path))).hexdigest()
A:tornado.test.curl_httpclient_test.digest->md5(utf8('%s:%s:%s' % (h1, nonce, h2))).hexdigest()
A:tornado.test.curl_httpclient_test.self.http_client->self.create_client()
A:tornado.test.curl_httpclient_test.response->self.fetch('/digest_non_ascii', auth_mode='digest', auth_username='foo', auth_password='barユ£')
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase)
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase.get_http_client(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase(AsyncHTTPTestCase)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.create_client(self,**kwargs)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.get_app(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.setUp(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.test_custom_reason(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.test_digest_auth(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.test_digest_auth_non_ascii(self)
tornado.test.curl_httpclient_test.CurlHTTPClientTestCase.test_fail_custom_reason(self)
tornado.test.curl_httpclient_test.CustomFailReasonHandler(RequestHandler)
tornado.test.curl_httpclient_test.CustomFailReasonHandler.get(self)
tornado.test.curl_httpclient_test.CustomReasonHandler(RequestHandler)
tornado.test.curl_httpclient_test.CustomReasonHandler.get(self)
tornado.test.curl_httpclient_test.DigestAuthHandler(RequestHandler)
tornado.test.curl_httpclient_test.DigestAuthHandler.get(self)
tornado.test.curl_httpclient_test.DigestAuthHandler.initialize(self,username,password)


----------------------------------------/dataset/nuaa/anaconda3/envs/tornado6.3.3/lib/python3.9/site-packages/tornado/test/locale_test.py----------------------------------------
A:tornado.test.locale_test.self.saved[var]->getattr(tornado.locale, var)
A:tornado.test.locale_test.locale->tornado.locale.get('en_US')
A:tornado.test.locale_test.char_data->to_unicode(f.read())
A:tornado.test.locale_test.tmpdir->tempfile.mkdtemp()
A:tornado.test.locale_test.date->datetime.datetime(2013, 4, 28, 18, 35)
A:tornado.test.locale_test.now->datetime.datetime.utcnow()
tornado.test.locale_test.EnglishTest(unittest.TestCase)
tornado.test.locale_test.EnglishTest.test_format_date(self)
tornado.test.locale_test.EnglishTest.test_format_day(self)
tornado.test.locale_test.EnglishTest.test_friendly_number(self)
tornado.test.locale_test.EnglishTest.test_list(self)
tornado.test.locale_test.LocaleDataTest(unittest.TestCase)
tornado.test.locale_test.LocaleDataTest.test_non_ascii_name(self)
tornado.test.locale_test.TranslationLoaderTest(unittest.TestCase)
tornado.test.locale_test.TranslationLoaderTest.clear_locale_cache(self)
tornado.test.locale_test.TranslationLoaderTest.setUp(self)
tornado.test.locale_test.TranslationLoaderTest.tearDown(self)
tornado.test.locale_test.TranslationLoaderTest.test_csv(self)
tornado.test.locale_test.TranslationLoaderTest.test_csv_bom(self)
tornado.test.locale_test.TranslationLoaderTest.test_gettext(self)

