
----------------------------------------/home/zhang/Packages/tornado/tornado2.2/util.py----------------------------------------
A:tornado.util.parts->name.split('.')
A:tornado.util.obj->__import__('.'.join(parts[:-1]), None, None, [parts[-1]], 0)
tornado.util.ObjectDict(dict)
tornado.util.ObjectDict.__getattr__(self,name)
tornado.util.ObjectDict.__setattr__(self,name,value)
tornado.util.doctests()
tornado.util.import_object(name)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/httputil.py----------------------------------------
A:tornado.httputil.norm_name->HTTPHeaders._normalize_name(name)
A:tornado.httputil.(name, value)->line.split(':', 1)
A:tornado.httputil.h->cls()
A:tornado.httputil._NORMALIZED_HEADER_RE->re.compile('^[A-Z0-9][a-z0-9]*(-[A-Z0-9][a-z0-9]*)*$')
A:tornado.httputil.normalized->'-'.join([w.capitalize() for w in name.split('-')])
A:tornado.httputil.parts->_parseparam(';' + line)
A:tornado.httputil.eoh->part.find(b('\r\n\r\n'))
A:tornado.httputil.headers->HTTPHeaders.parse(part[:eoh].decode('utf-8'))
A:tornado.httputil.disp_header->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Disposition', '')
A:tornado.httputil.(disposition, disp_params)->_parse_header(disp_header)
A:tornado.httputil.ctype->HTTPHeaders.parse(part[:eoh].decode('utf-8')).get('Content-Type', 'application/unknown')
A:tornado.httputil.end->len(s)
A:tornado.httputil.key->next(parts)
A:tornado.httputil.i->p.find('=')
A:tornado.httputil.name->p[:i].strip().lower()
A:tornado.httputil.value->value.replace('\\\\', '\\').replace('\\"', '"').replace('\\\\', '\\').replace('\\"', '"')
tornado.httputil.HTTPFile(ObjectDict)
tornado.httputil.HTTPHeaders(self,*args,**kwargs)
tornado.httputil.HTTPHeaders.__contains__(self,name)
tornado.httputil.HTTPHeaders.__delitem__(self,name)
tornado.httputil.HTTPHeaders.__getitem__(self,name)
tornado.httputil.HTTPHeaders.__init__(self,*args,**kwargs)
tornado.httputil.HTTPHeaders.__setitem__(self,name,value)
tornado.httputil.HTTPHeaders._normalize_name(name)
tornado.httputil.HTTPHeaders.add(self,name,value)
tornado.httputil.HTTPHeaders.get(self,name,default=None)
tornado.httputil.HTTPHeaders.get_all(self)
tornado.httputil.HTTPHeaders.get_list(self,name)
tornado.httputil.HTTPHeaders.parse(cls,headers)
tornado.httputil.HTTPHeaders.parse_line(self,line)
tornado.httputil.HTTPHeaders.update(self,*args,**kwargs)
tornado.httputil._parse_header(line)
tornado.httputil._parseparam(s)
tornado.httputil.doctests()
tornado.httputil.parse_multipart_form_data(boundary,data,arguments,files)
tornado.httputil.url_concat(url,args)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/locale.py----------------------------------------
A:tornado.locale._supported_locales->frozenset(list(_translations.keys()) + [_default_locale])
A:tornado.locale.(locale, extension)->path.split('.')
A:tornado.locale.f->open(os.path.join(directory, path), 'r')
A:tornado.locale._translations[lang]->gettext.translation(domain, directory, languages=[lang])
A:tornado.locale.code->code.replace('-', '_').replace('-', '_')
A:tornado.locale.parts->code.replace('-', '_').replace('-', '_').split('_')
A:tornado.locale.translations->_translations.get(code, None)
A:tornado.locale.locale->CSVLocale(code, translations)
A:tornado.locale.self.name->LOCALE_NAMES.get(code, {}).get('name', 'Unknown')
A:tornado.locale.date->datetime.datetime.utcfromtimestamp(date)
A:tornado.locale.now->datetime.datetime.utcnow()
A:tornado.locale.minutes->round(seconds / 60.0)
A:tornado.locale.hours->round(seconds / (60.0 * 60))
A:tornado.locale.format->_('%(time)s')
A:tornado.locale.value->str(value)
A:tornado.locale.message_dict->self.translations.get('unknown', {})
tornado.locale.CSVLocale(Locale)
tornado.locale.CSVLocale.translate(self,message,plural_message=None,count=None)
tornado.locale.GettextLocale(Locale)
tornado.locale.GettextLocale.translate(self,message,plural_message=None,count=None)
tornado.locale.Locale(self,code,translations)
tornado.locale.Locale.__init__(self,code,translations)
tornado.locale.Locale.format_date(self,date,gmt_offset=0,relative=True,shorter=False,full_format=False)
tornado.locale.Locale.format_day(self,date,gmt_offset=0,dow=True)
tornado.locale.Locale.friendly_number(self,value)
tornado.locale.Locale.get(cls,code)
tornado.locale.Locale.get_closest(cls,*locale_codes)
tornado.locale.Locale.list(self,parts)
tornado.locale.Locale.translate(self,message,plural_message=None,count=None)
tornado.locale.get(*locale_codes)
tornado.locale.get_supported_locales(cls)
tornado.locale.load_gettext_translations(directory,domain)
tornado.locale.load_translations(directory)
tornado.locale.set_default_locale(code)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/gen.py----------------------------------------
A:tornado.gen.gen->func(*args, **kwargs)
A:tornado.gen.runner->Runner(gen)
A:tornado.gen.self.key->object()
A:tornado.gen.self.kwargs['callback']->Runner(gen).result_callback(self.key)
A:tornado.gen.self.yield_point->_NullYieldPoint()
A:tornado.gen.self.pending_callbacks->set()
A:tornado.gen.next->self.yield_point.get_result()
A:tornado.gen.self.exc_info->sys.exc_info()
A:tornado.gen.yielded->Multi(yielded)
A:tornado.gen.result->Arguments(args, kwargs)
A:tornado.gen.args->property(operator.itemgetter(0))
A:tornado.gen.kwargs->property(operator.itemgetter(1))
tornado.gen.Arguments(cls,args,kwargs)
tornado.gen.Arguments.__new__(cls,args,kwargs)
tornado.gen.BadYieldError(Exception)
tornado.gen.Callback(self,key)
tornado.gen.Callback.__init__(self,key)
tornado.gen.Callback.get_result(self)
tornado.gen.Callback.is_ready(self)
tornado.gen.Callback.start(self,runner)
tornado.gen.KeyReuseError(Exception)
tornado.gen.LeakedCallbackError(Exception)
tornado.gen.Multi(self,children)
tornado.gen.Multi.__init__(self,children)
tornado.gen.Multi.get_result(self)
tornado.gen.Multi.is_ready(self)
tornado.gen.Multi.start(self,runner)
tornado.gen.Runner(self,gen)
tornado.gen.Runner.__init__(self,gen)
tornado.gen.Runner.handle_exception(self,typ,value,tb)
tornado.gen.Runner.is_ready(self,key)
tornado.gen.Runner.pop_result(self,key)
tornado.gen.Runner.register_callback(self,key)
tornado.gen.Runner.result_callback(self,key)
tornado.gen.Runner.run(self)
tornado.gen.Runner.set_result(self,key,result)
tornado.gen.Task(self,func,*args,**kwargs)
tornado.gen.Task.__init__(self,func,*args,**kwargs)
tornado.gen.Task.get_result(self)
tornado.gen.Task.is_ready(self)
tornado.gen.Task.start(self,runner)
tornado.gen.UnknownKeyError(Exception)
tornado.gen.Wait(self,key)
tornado.gen.Wait.__init__(self,key)
tornado.gen.Wait.get_result(self)
tornado.gen.Wait.is_ready(self)
tornado.gen.Wait.start(self,runner)
tornado.gen.WaitAll(self,keys)
tornado.gen.WaitAll.__init__(self,keys)
tornado.gen.WaitAll.get_result(self)
tornado.gen.WaitAll.is_ready(self)
tornado.gen.WaitAll.start(self,runner)
tornado.gen.YieldPoint(object)
tornado.gen.YieldPoint.get_result(self)
tornado.gen.YieldPoint.is_ready(self)
tornado.gen.YieldPoint.start(self,runner)
tornado.gen._NullYieldPoint(YieldPoint)
tornado.gen._NullYieldPoint.get_result(self)
tornado.gen._NullYieldPoint.is_ready(self)
tornado.gen._NullYieldPoint.start(self,runner)
tornado.gen.engine(func)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/process.py----------------------------------------
A:tornado.process.seed->int(hexlify(os.urandom(16)), 16)
A:tornado.process.num_processes->cpu_count()
A:tornado.process.pid->os.fork()
A:tornado.process.id->children.pop(pid)
A:tornado.process.(pid, status)->os.wait()
A:tornado.process.new_id->start_child(id)
tornado.process._reseed_random()
tornado.process.cpu_count()
tornado.process.fork_processes(num_processes,max_restarts=100)
tornado.process.task_id()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/testing.py----------------------------------------
A:tornado.testing.self.io_loop->self.get_new_ioloop()
A:tornado.testing.self.__failure->sys.exc_info()
A:tornado.testing.self.http_client->AsyncHTTPClient(io_loop=self.io_loop)
A:tornado.testing.self._app->self.get_app()
A:tornado.testing.self.http_server->HTTPServer(self._app, io_loop=self.io_loop, **self.get_httpserver_options())
A:tornado.testing.self.__port->get_unused_port()
A:tornado.testing.logger->logging.getLogger()
A:tornado.testing.handler.stream->StringIO()
tornado.testing.AsyncHTTPTestCase(AsyncTestCase)
tornado.testing.AsyncHTTPTestCase.fetch(self,path,**kwargs)
tornado.testing.AsyncHTTPTestCase.get_app(self)
tornado.testing.AsyncHTTPTestCase.get_http_port(self)
tornado.testing.AsyncHTTPTestCase.get_httpserver_options(self)
tornado.testing.AsyncHTTPTestCase.get_url(self,path)
tornado.testing.AsyncHTTPTestCase.setUp(self)
tornado.testing.AsyncHTTPTestCase.tearDown(self)
tornado.testing.AsyncTestCase(self,*args,**kwargs)
tornado.testing.AsyncTestCase.__init__(self,*args,**kwargs)
tornado.testing.AsyncTestCase._stack_context(self)
tornado.testing.AsyncTestCase.get_new_ioloop(self)
tornado.testing.AsyncTestCase.run(self,result=None)
tornado.testing.AsyncTestCase.setUp(self)
tornado.testing.AsyncTestCase.stop(self,_arg=None,**kwargs)
tornado.testing.AsyncTestCase.tearDown(self)
tornado.testing.AsyncTestCase.wait(self,condition=None,timeout=5)
tornado.testing.LogTrapTestCase(unittest.TestCase)
tornado.testing.LogTrapTestCase.run(self,result=None)
tornado.testing.get_unused_port()
tornado.testing.main()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/template.py----------------------------------------
A:tornado.template._UNSET->object()
A:tornado.template.reader->_TemplateReader(name, escape.native_str(template_string))
A:tornado.template.self.file->_File(self, _parse(reader, self))
A:tornado.template.self.code->self._generate_python(loader, compress_whitespace)
A:tornado.template.self.compiled->compile(escape.to_unicode(self.code), '%s.generated.py' % self.name.replace('.', '_'), 'exec')
A:tornado.template.formatted_code->_format_code(self.code).rstrip()
A:tornado.template.buffer->io.StringIO()
A:tornado.template.ancestors->self._get_ancestors(loader)
A:tornado.template.writer->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template, compress_whitespace)
A:tornado.template.template->Template(f.read(), name=name, loader=self)
A:tornado.template.self.lock->threading.RLock()
A:tornado.template.name->posixpath.normpath(posixpath.join(file_dir, name))
A:tornado.template.self.templates[name]->self._create_template(name)
A:tornado.template.self.root->os.path.abspath(root_directory)
A:tornado.template.current_path->os.path.join(self.root, parent_path)
A:tornado.template.file_dir->posixpath.dirname(parent_path)
A:tornado.template.relative_path->os.path.abspath(os.path.join(file_dir, name))
A:tornado.template.path->os.path.join(self.root, name)
A:tornado.template.f->open(path, 'r')
A:tornado.template.included->_CodeWriter(buffer, named_blocks, loader, ancestors[0].template, compress_whitespace).loader.load(self.name, self.template_name)
A:tornado.template.value->re.sub('(\\s*\\n\\s*)', '\n', value)
A:tornado.template.index->self.text.find(needle, start, end)
A:tornado.template.size->len(self)
A:tornado.template.(start, stop, step)->key.indices(size)
A:tornado.template.lines->code.splitlines()
A:tornado.template.body->_ChunkList([])
A:tornado.template.curly->_TemplateReader(name, escape.native_str(template_string)).find('{', curly)
A:tornado.template.cons->_TemplateReader(name, escape.native_str(template_string)).consume(curly)
A:tornado.template.start_brace->_TemplateReader(name, escape.native_str(template_string)).consume(2)
A:tornado.template.end->_TemplateReader(name, escape.native_str(template_string)).find('%}')
A:tornado.template.contents->_TemplateReader(name, escape.native_str(template_string)).consume(end).strip()
A:tornado.template.(operator, space, suffix)->_TemplateReader(name, escape.native_str(template_string)).consume(end).strip().partition(' ')
A:tornado.template.suffix->suffix.strip('"').strip("'").strip('"').strip("'")
A:tornado.template.allowed_parents->intermediate_blocks.get(operator)
A:tornado.template.block->_ControlBlock(contents, line, block_body)
A:tornado.template.fn->suffix.strip('"').strip("'").strip('"').strip("'").strip()
A:tornado.template.block_body->_parse(reader, template, operator)
tornado.template.BaseLoader(self,autoescape=_DEFAULT_AUTOESCAPE,namespace=None)
tornado.template.BaseLoader.__init__(self,autoescape=_DEFAULT_AUTOESCAPE,namespace=None)
tornado.template.BaseLoader._create_template(self,name)
tornado.template.BaseLoader.load(self,name,parent_path=None)
tornado.template.BaseLoader.reset(self)
tornado.template.BaseLoader.resolve_path(self,name,parent_path=None)
tornado.template.DictLoader(self,dict,**kwargs)
tornado.template.DictLoader.__init__(self,dict,**kwargs)
tornado.template.DictLoader._create_template(self,name)
tornado.template.DictLoader.resolve_path(self,name,parent_path=None)
tornado.template.Loader(self,root_directory,**kwargs)
tornado.template.Loader.__init__(self,root_directory,**kwargs)
tornado.template.Loader._create_template(self,name)
tornado.template.Loader.resolve_path(self,name,parent_path=None)
tornado.template.ParseError(Exception)
tornado.template.Template(self,template_string,name='<string>',loader=None,compress_whitespace=None,autoescape=_UNSET)
tornado.template.Template.__init__(self,template_string,name='<string>',loader=None,compress_whitespace=None,autoescape=_UNSET)
tornado.template.Template._generate_python(self,loader,compress_whitespace)
tornado.template.Template._get_ancestors(self,loader)
tornado.template.Template.generate(self,**kwargs)
tornado.template._ApplyBlock(self,method,line,body=None)
tornado.template._ApplyBlock.__init__(self,method,line,body=None)
tornado.template._ApplyBlock.each_child(self)
tornado.template._ApplyBlock.generate(self,writer)
tornado.template._ChunkList(self,chunks)
tornado.template._ChunkList.__init__(self,chunks)
tornado.template._ChunkList.each_child(self)
tornado.template._ChunkList.generate(self,writer)
tornado.template._CodeWriter(self,file,named_blocks,loader,current_template,compress_whitespace)
tornado.template._CodeWriter.__init__(self,file,named_blocks,loader,current_template,compress_whitespace)
tornado.template._CodeWriter.include(self,template,line)
tornado.template._CodeWriter.indent(self)
tornado.template._CodeWriter.indent_size(self)
tornado.template._CodeWriter.write_line(self,line,line_number,indent=None)
tornado.template._ControlBlock(self,statement,line,body=None)
tornado.template._ControlBlock.__init__(self,statement,line,body=None)
tornado.template._ControlBlock.each_child(self)
tornado.template._ControlBlock.generate(self,writer)
tornado.template._Expression(self,expression,line,raw=False)
tornado.template._Expression.__init__(self,expression,line,raw=False)
tornado.template._Expression.generate(self,writer)
tornado.template._ExtendsBlock(self,name)
tornado.template._ExtendsBlock.__init__(self,name)
tornado.template._File(self,template,body)
tornado.template._File.__init__(self,template,body)
tornado.template._File.each_child(self)
tornado.template._File.generate(self,writer)
tornado.template._IncludeBlock(self,name,reader,line)
tornado.template._IncludeBlock.__init__(self,name,reader,line)
tornado.template._IncludeBlock.find_named_blocks(self,loader,named_blocks)
tornado.template._IncludeBlock.generate(self,writer)
tornado.template._IntermediateControlBlock(self,statement,line)
tornado.template._IntermediateControlBlock.__init__(self,statement,line)
tornado.template._IntermediateControlBlock.generate(self,writer)
tornado.template._Module(self,expression,line)
tornado.template._Module.__init__(self,expression,line)
tornado.template._NamedBlock(self,name,body,template,line)
tornado.template._NamedBlock.__init__(self,name,body,template,line)
tornado.template._NamedBlock.each_child(self)
tornado.template._NamedBlock.find_named_blocks(self,loader,named_blocks)
tornado.template._NamedBlock.generate(self,writer)
tornado.template._Node(object)
tornado.template._Node.each_child(self)
tornado.template._Node.find_named_blocks(self,loader,named_blocks)
tornado.template._Node.generate(self,writer)
tornado.template._Statement(self,statement,line)
tornado.template._Statement.__init__(self,statement,line)
tornado.template._Statement.generate(self,writer)
tornado.template._TemplateReader(self,name,text)
tornado.template._TemplateReader.__getitem__(self,key)
tornado.template._TemplateReader.__init__(self,name,text)
tornado.template._TemplateReader.__len__(self)
tornado.template._TemplateReader.__str__(self)
tornado.template._TemplateReader.consume(self,count=None)
tornado.template._TemplateReader.find(self,needle,start=0,end=None)
tornado.template._TemplateReader.remaining(self)
tornado.template._Text(self,value,line)
tornado.template._Text.__init__(self,value,line)
tornado.template._Text.generate(self,writer)
tornado.template._format_code(code)
tornado.template._parse(reader,template,in_block=None)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/options.py----------------------------------------
A:tornado.options.frame->sys._getframe(0)
A:tornado.options.options[name]->_Option(name, file_name=file_name, default=default, type=type, help=help, metavar=metavar, multiple=multiple, group_name=group_name)
A:tornado.options.arg->args[i].lstrip('-')
A:tornado.options.(name, equals, value)->args[i].lstrip('-').partition('=')
A:tornado.options.name->name.replace('-', '_').replace('-', '_')
A:tornado.options.cls._instance->cls()
A:tornado.options._parse->{datetime.datetime: self._parse_datetime, datetime.timedelta: self._parse_timedelta, bool: self._parse_bool, str: self._parse_string}.get(self.type, self.type)
A:tornado.options.(lo, _, hi)->part.partition(':')
A:tornado.options.lo->_parse(lo)
A:tornado.options.self._value->_parse(value)
A:tornado.options._TIMEDELTA_ABBREV_DICT->dict(((abbrev, full) for (full, abbrevs) in _TIMEDELTA_ABBREVS for abbrev in abbrevs))
A:tornado.options._TIMEDELTA_PATTERN->re.compile('\\s*(%s)\\s*(\\w*)\\s*' % _FLOAT_PATTERN, re.IGNORECASE)
A:tornado.options.sum->datetime.timedelta()
A:tornado.options.m->self._TIMEDELTA_PATTERN.match(value, start)
A:tornado.options.num->float(m.group(1))
A:tornado.options.units->self._TIMEDELTA_ABBREV_DICT.get(units, units)
A:tornado.options.start->self._TIMEDELTA_PATTERN.match(value, start).end()
A:tornado.options.root_logger->logging.getLogger()
A:tornado.options.channel->logging.StreamHandler()
A:tornado.options.fg_color->str(curses.tigetstr('setaf') or curses.tigetstr('setf') or '', 'ascii')
A:tornado.options.self._normal->str(curses.tigetstr('sgr0'), 'ascii')
A:tornado.options.record.message->record.getMessage()
A:tornado.options.record.asctime->time.strftime('%y%m%d %H:%M:%S', self.converter(record.created))
A:tornado.options.record.exc_text->self.formatException(record.exc_info)
A:tornado.options.options->_Options.instance()
tornado.options.Error(Exception)
tornado.options._LogFormatter(self,color,*args,**kwargs)
tornado.options._LogFormatter.__init__(self,color,*args,**kwargs)
tornado.options._LogFormatter.format(self,record)
tornado.options._Option(self,name,default=None,type=str,help=None,metavar=None,multiple=False,file_name=None,group_name=None)
tornado.options._Option.__init__(self,name,default=None,type=str,help=None,metavar=None,multiple=False,file_name=None,group_name=None)
tornado.options._Option._parse_bool(self,value)
tornado.options._Option._parse_datetime(self,value)
tornado.options._Option._parse_string(self,value)
tornado.options._Option._parse_timedelta(self,value)
tornado.options._Option.parse(self,value)
tornado.options._Option.set(self,value)
tornado.options._Option.value(self)
tornado.options._Options(dict)
tornado.options._Options.__getattr__(self,name)
tornado.options._Options.instance(cls)
tornado.options.define(name,default=None,type=None,help=None,metavar=None,multiple=False,group=None)
tornado.options.enable_pretty_logging()
tornado.options.parse_command_line(args=None)
tornado.options.parse_config_file(path)
tornado.options.print_help(file=sys.stdout)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/simple_httpclient.py----------------------------------------
A:tornado.simple_httpclient.self.queue->collections.deque()
A:tornado.simple_httpclient.request->HTTPRequest(url=request, **kwargs)
A:tornado.simple_httpclient.request.headers->HTTPHeaders(request.headers)
A:tornado.simple_httpclient.callback->tornado.stack_context.wrap(callback)
A:tornado.simple_httpclient.(request, callback)->self.queue.popleft()
A:tornado.simple_httpclient.key->object()
A:tornado.simple_httpclient._SUPPORTED_METHODS->set(['GET', 'HEAD', 'POST', 'PUT', 'DELETE'])
A:tornado.simple_httpclient.self.start_time->time.time()
A:tornado.simple_httpclient.parsed->urllib.parse.urlsplit(_unicode(self.request.url))
A:tornado.simple_httpclient.(userpass, _, netloc)->netloc.rpartition('@')
A:tornado.simple_httpclient.match->re.match('HTTP/1.[01] ([0-9]+)', first_line)
A:tornado.simple_httpclient.host->self.client.hostname_mapping.get(host, host)
A:tornado.simple_httpclient.port->int(match.group(2))
A:tornado.simple_httpclient.addrinfo->socket.getaddrinfo(host, port, af, socket.SOCK_STREAM, 0, 0)
A:tornado.simple_httpclient.self.stream->IOStream(socket.socket(af, socktype, proto), io_loop=self.io_loop, max_buffer_size=max_buffer_size)
A:tornado.simple_httpclient.timeout->min(request.connect_timeout, request.request_timeout)
A:tornado.simple_httpclient.self._timeout->self.io_loop.add_timeout(self.start_time + self.request.request_timeout, self._on_timeout)
A:tornado.simple_httpclient.self.request.headers['Content-Length']->str(len(self.request.body))
A:tornado.simple_httpclient.data->self._decompressor.decompress(data)
A:tornado.simple_httpclient.(first_line, _, header_data)->self._decompressor.decompress(data).partition('\n')
A:tornado.simple_httpclient.self.code->int(match.group(1))
A:tornado.simple_httpclient.self.headers->tornado.httputil.HTTPHeaders.parse(header_data)
A:tornado.simple_httpclient.pieces->re.split(',\\s*', self.headers['Content-Length'])
A:tornado.simple_httpclient.content_length->int(self.headers['Content-Length'])
A:tornado.simple_httpclient.self._decompressor->zlib.decompressobj(16 + zlib.MAX_WBITS)
A:tornado.simple_httpclient.original_request->getattr(self.request, 'original_request', self.request)
A:tornado.simple_httpclient.new_request->copy.copy(self.request)
A:tornado.simple_httpclient.new_request.url->urllib.parse.urljoin(self.request.url, self.headers['Location'])
A:tornado.simple_httpclient.buffer->BytesIO(data)
A:tornado.simple_httpclient.response->HTTPResponse(original_request, self.code, headers=self.headers, request_time=time.time() - self.start_time, buffer=buffer, effective_url=self.request.url)
A:tornado.simple_httpclient.length->int(data.strip(), 16)
A:tornado.simple_httpclient.chunk->self._decompressor.decompress(chunk)
A:tornado.simple_httpclient.frag->re.escape(frag)
A:tornado.simple_httpclient.san->cert.get('subjectAltName', ())
tornado.simple_httpclient.CertificateError(ValueError)
tornado.simple_httpclient.SimpleAsyncHTTPClient(AsyncHTTPClient)
tornado.simple_httpclient.SimpleAsyncHTTPClient._process_queue(self)
tornado.simple_httpclient.SimpleAsyncHTTPClient._release_fetch(self,key)
tornado.simple_httpclient.SimpleAsyncHTTPClient.fetch(self,request,callback,**kwargs)
tornado.simple_httpclient.SimpleAsyncHTTPClient.initialize(self,io_loop=None,max_clients=10,max_simultaneous_connections=None,hostname_mapping=None,max_buffer_size=104857600)
tornado.simple_httpclient._HTTPConnection(self,io_loop,client,request,release_callback,final_callback,max_buffer_size)
tornado.simple_httpclient._HTTPConnection.__init__(self,io_loop,client,request,release_callback,final_callback,max_buffer_size)
tornado.simple_httpclient._HTTPConnection._on_body(self,data)
tornado.simple_httpclient._HTTPConnection._on_chunk_data(self,data)
tornado.simple_httpclient._HTTPConnection._on_chunk_length(self,data)
tornado.simple_httpclient._HTTPConnection._on_close(self)
tornado.simple_httpclient._HTTPConnection._on_connect(self,parsed)
tornado.simple_httpclient._HTTPConnection._on_headers(self,data)
tornado.simple_httpclient._HTTPConnection._on_timeout(self)
tornado.simple_httpclient._HTTPConnection._release(self)
tornado.simple_httpclient._HTTPConnection._run_callback(self,response)
tornado.simple_httpclient._HTTPConnection.cleanup(self)
tornado.simple_httpclient._dnsname_to_pat(dn)
tornado.simple_httpclient.match_hostname(cert,hostname)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/httpclient.py----------------------------------------
A:tornado.httpclient.self._io_loop->IOLoop()
A:tornado.httpclient.self._async_client->async_client_class(self._io_loop)
A:tornado.httpclient.cls._async_client_dict->weakref.WeakKeyDictionary()
A:tornado.httpclient.instance->super(AsyncHTTPClient, cls).__new__(impl)
A:tornado.httpclient.impl->import_object(impl)
A:tornado.httpclient.headers->tornado.httputil.HTTPHeaders()
A:tornado.httpclient.timestamp->calendar.timegm(if_modified_since.utctimetuple())
A:tornado.httpclient.headers['If-Modified-Since']->email.utils.formatdate(timestamp, localtime=False, usegmt=True)
A:tornado.httpclient.self.body->utf8(body)
A:tornado.httpclient.self.start_time->time.time()
A:tornado.httpclient.self.error->HTTPError(self.code, response=self)
A:tornado.httpclient.self._body->self.buffer.getvalue()
A:tornado.httpclient.body->property(_get_body)
A:tornado.httpclient.args->parse_command_line()
A:tornado.httpclient.client->HTTPClient()
A:tornado.httpclient.response->HTTPClient().fetch(arg, follow_redirects=options.follow_redirects, validate_cert=options.validate_cert)
tornado.httpclient.AsyncHTTPClient(cls,io_loop=None,max_clients=10,force_instance=False,**kwargs)
tornado.httpclient.AsyncHTTPClient.__new__(cls,io_loop=None,max_clients=10,force_instance=False,**kwargs)
tornado.httpclient.AsyncHTTPClient._async_clients(cls)
tornado.httpclient.AsyncHTTPClient.close(self)
tornado.httpclient.AsyncHTTPClient.configure(impl,**kwargs)
tornado.httpclient.AsyncHTTPClient.fetch(self,request,callback,**kwargs)
tornado.httpclient.HTTPClient(self,async_client_class=None)
tornado.httpclient.HTTPClient.__del__(self)
tornado.httpclient.HTTPClient.__init__(self,async_client_class=None)
tornado.httpclient.HTTPClient.close(self)
tornado.httpclient.HTTPClient.fetch(self,request,**kwargs)
tornado.httpclient.HTTPError(self,code,message=None,response=None)
tornado.httpclient.HTTPError.__init__(self,code,message=None,response=None)
tornado.httpclient.HTTPRequest(self,url,method='GET',headers=None,body=None,auth_username=None,auth_password=None,connect_timeout=20.0,request_timeout=20.0,if_modified_since=None,follow_redirects=True,max_redirects=5,user_agent=None,use_gzip=True,network_interface=None,streaming_callback=None,header_callback=None,prepare_curl_callback=None,proxy_host=None,proxy_port=None,proxy_username=None,proxy_password='',allow_nonstandard_methods=False,validate_cert=True,ca_certs=None,allow_ipv6=None,client_key=None,client_cert=None)
tornado.httpclient.HTTPRequest.__init__(self,url,method='GET',headers=None,body=None,auth_username=None,auth_password=None,connect_timeout=20.0,request_timeout=20.0,if_modified_since=None,follow_redirects=True,max_redirects=5,user_agent=None,use_gzip=True,network_interface=None,streaming_callback=None,header_callback=None,prepare_curl_callback=None,proxy_host=None,proxy_port=None,proxy_username=None,proxy_password='',allow_nonstandard_methods=False,validate_cert=True,ca_certs=None,allow_ipv6=None,client_key=None,client_cert=None)
tornado.httpclient.HTTPResponse(self,request,code,headers={},buffer=None,effective_url=None,error=None,request_time=None,time_info={})
tornado.httpclient.HTTPResponse.__init__(self,request,code,headers={},buffer=None,effective_url=None,error=None,request_time=None,time_info={})
tornado.httpclient.HTTPResponse.__repr__(self)
tornado.httpclient.HTTPResponse._get_body(self)
tornado.httpclient.HTTPResponse.rethrow(self)
tornado.httpclient.main()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/database.py----------------------------------------
A:tornado.database.args->dict(conv=CONVERSIONS, use_unicode=True, charset='utf8', db=database, init_command='SET time_zone = "+0:00"', sql_mode='TRADITIONAL')
A:tornado.database.pair->host.split(':')
A:tornado.database.args['port']->int(pair[1])
A:tornado.database.self._last_use_time->time.time()
A:tornado.database.self._db->MySQLdb.connect(**self._db_args)
A:tornado.database.cursor->self._cursor()
A:tornado.database.rows->self.query(query, *parameters)
A:tornado.database.CONVERSIONS->copy.copy(MySQLdb.converters.conversions)
tornado.database.Connection(self,host,database,user=None,password=None,max_idle_time=7*3600)
tornado.database.Connection.__del__(self)
tornado.database.Connection.__init__(self,host,database,user=None,password=None,max_idle_time=7*3600)
tornado.database.Connection._cursor(self)
tornado.database.Connection._ensure_connected(self)
tornado.database.Connection._execute(self,cursor,query,parameters)
tornado.database.Connection.close(self)
tornado.database.Connection.execute(self,query,*parameters)
tornado.database.Connection.execute_lastrowid(self,query,*parameters)
tornado.database.Connection.execute_rowcount(self,query,*parameters)
tornado.database.Connection.executemany(self,query,parameters)
tornado.database.Connection.executemany_lastrowid(self,query,parameters)
tornado.database.Connection.executemany_rowcount(self,query,parameters)
tornado.database.Connection.get(self,query,*parameters)
tornado.database.Connection.iter(self,query,*parameters)
tornado.database.Connection.query(self,query,*parameters)
tornado.database.Connection.reconnect(self)
tornado.database.Row(dict)
tornado.database.Row.__getattr__(self,name)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/ioloop.py----------------------------------------
A:tornado.ioloop.self._callback_lock->threading.Lock()
A:tornado.ioloop.self._waker->Waker()
A:tornado.ioloop.IOLoop._instance->IOLoop()
A:tornado.ioloop.self._handlers[fd]->tornado.stack_context.wrap(handler)
A:tornado.ioloop.self._thread_ident->_thread.get_ident()
A:tornado.ioloop.now->time.time()
A:tornado.ioloop.timeout->_Timeout(deadline, stack_context.wrap(callback))
A:tornado.ioloop.poll_timeout->min(seconds, poll_timeout)
A:tornado.ioloop.event_pairs->self._impl.poll(poll_timeout)
A:tornado.ioloop.(fd, events)->self._events.popitem()
A:tornado.ioloop.self._next_timeout->time.time()
A:tornado.ioloop.current_time->time.time()
A:tornado.ioloop.self._timeout->self.io_loop.add_timeout(self._next_timeout, self._run)
A:tornado.ioloop.self._epoll_fd->epoll.epoll_create()
A:tornado.ioloop.self._kqueue->select.kqueue()
A:tornado.ioloop.events->self._active.pop(fd)
A:tornado.ioloop.kevents->self._kqueue.control(None, 1000, timeout)
A:tornado.ioloop.self.read_fds->set()
A:tornado.ioloop.self.write_fds->set()
A:tornado.ioloop.self.error_fds->set()
A:tornado.ioloop.(readable, writeable, errors)->select.select(self.read_fds, self.write_fds, self.error_fds, timeout)
tornado.ioloop.IOLoop(self,impl=None)
tornado.ioloop.IOLoop.__init__(self,impl=None)
tornado.ioloop.IOLoop._run_callback(self,callback)
tornado.ioloop.IOLoop.add_callback(self,callback)
tornado.ioloop.IOLoop.add_handler(self,fd,handler,events)
tornado.ioloop.IOLoop.add_timeout(self,deadline,callback)
tornado.ioloop.IOLoop.close(self,all_fds=False)
tornado.ioloop.IOLoop.handle_callback_exception(self,callback)
tornado.ioloop.IOLoop.initialized()
tornado.ioloop.IOLoop.install(self)
tornado.ioloop.IOLoop.instance()
tornado.ioloop.IOLoop.log_stack(self,signal,frame)
tornado.ioloop.IOLoop.remove_handler(self,fd)
tornado.ioloop.IOLoop.remove_timeout(self,timeout)
tornado.ioloop.IOLoop.running(self)
tornado.ioloop.IOLoop.set_blocking_log_threshold(self,seconds)
tornado.ioloop.IOLoop.set_blocking_signal_threshold(self,seconds,action)
tornado.ioloop.IOLoop.start(self)
tornado.ioloop.IOLoop.stop(self)
tornado.ioloop.IOLoop.update_handler(self,fd,events)
tornado.ioloop.PeriodicCallback(self,callback,callback_time,io_loop=None)
tornado.ioloop.PeriodicCallback.__init__(self,callback,callback_time,io_loop=None)
tornado.ioloop.PeriodicCallback._run(self)
tornado.ioloop.PeriodicCallback._schedule_next(self)
tornado.ioloop.PeriodicCallback.start(self)
tornado.ioloop.PeriodicCallback.stop(self)
tornado.ioloop._EPoll(self)
tornado.ioloop._EPoll.__init__(self)
tornado.ioloop._EPoll.close(self)
tornado.ioloop._EPoll.fileno(self)
tornado.ioloop._EPoll.modify(self,fd,events)
tornado.ioloop._EPoll.poll(self,timeout)
tornado.ioloop._EPoll.register(self,fd,events)
tornado.ioloop._EPoll.unregister(self,fd)
tornado.ioloop._KQueue(self)
tornado.ioloop._KQueue.__init__(self)
tornado.ioloop._KQueue._control(self,fd,events,flags)
tornado.ioloop._KQueue.close(self)
tornado.ioloop._KQueue.fileno(self)
tornado.ioloop._KQueue.modify(self,fd,events)
tornado.ioloop._KQueue.poll(self,timeout)
tornado.ioloop._KQueue.register(self,fd,events)
tornado.ioloop._KQueue.unregister(self,fd)
tornado.ioloop._Select(self)
tornado.ioloop._Select.__init__(self)
tornado.ioloop._Select.close(self)
tornado.ioloop._Select.modify(self,fd,events)
tornado.ioloop._Select.poll(self,timeout)
tornado.ioloop._Select.register(self,fd,events)
tornado.ioloop._Select.unregister(self,fd)
tornado.ioloop._Timeout(self,deadline,callback)
tornado.ioloop._Timeout.__init__(self,deadline,callback)
tornado.ioloop._Timeout.__le__(self,other)
tornado.ioloop._Timeout.__lt__(self,other)
tornado.ioloop._Timeout.timedelta_to_seconds(td)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/wsgi.py----------------------------------------
A:tornado.wsgi.handler->tornado.web.Application.__call__(self, HTTPRequest(environ))
A:tornado.wsgi.headers->list(handler._headers.items())
A:tornado.wsgi.self.path->urllib.parse.quote(environ.get('SCRIPT_NAME', ''))
A:tornado.wsgi.self.query->environ.get('QUERY_STRING', '')
A:tornado.wsgi.arguments->cgi.parse_qs(self.query)
A:tornado.wsgi.self.headers->tornado.httputil.HTTPHeaders()
A:tornado.wsgi.self.body->environ['wsgi.input'].read(int(self.headers['Content-Length']))
A:tornado.wsgi.self.remote_ip->environ.get('REMOTE_ADDR', '')
A:tornado.wsgi.content_type->self.headers.get('Content-Type', '')
A:tornado.wsgi.self._start_time->time.time()
A:tornado.wsgi.self._cookies->http.cookies.SimpleCookie()
A:tornado.wsgi.app_response->self.wsgi_application(WSGIContainer.environ(request), start_response)
A:tornado.wsgi.body->tornado.escape.utf8(body)
A:tornado.wsgi.status_code->int(data['status'].split()[0])
A:tornado.wsgi.header_set->set((k.lower() for (k, v) in headers))
A:tornado.wsgi.hostport->request.host.split(':')
A:tornado.wsgi.port->int(hostport[1])
A:tornado.wsgi.environ['CONTENT_TYPE']->request.headers.pop('Content-Type')
A:tornado.wsgi.environ['CONTENT_LENGTH']->request.headers.pop('Content-Length')
tornado.wsgi.HTTPRequest(self,environ)
tornado.wsgi.HTTPRequest.__init__(self,environ)
tornado.wsgi.HTTPRequest.cookies(self)
tornado.wsgi.HTTPRequest.full_url(self)
tornado.wsgi.HTTPRequest.request_time(self)
tornado.wsgi.HTTPRequest.supports_http_1_1(self)
tornado.wsgi.WSGIApplication(self,handlers=None,default_host='',**settings)
tornado.wsgi.WSGIApplication.__init__(self,handlers=None,default_host='',**settings)
tornado.wsgi.WSGIContainer(self,wsgi_application)
tornado.wsgi.WSGIContainer.__init__(self,wsgi_application)
tornado.wsgi.WSGIContainer._log(self,status_code,request)
tornado.wsgi.WSGIContainer.environ(request)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/stack_context.py----------------------------------------
A:tornado.stack_context._state->_State()
A:tornado.stack_context.self.context->self.context_factory()
A:tornado.stack_context.exc->sys.exc_info()
A:tornado.stack_context.exit->exits.pop()
tornado.stack_context.ExceptionStackContext(self,exception_handler)
tornado.stack_context.ExceptionStackContext.__enter__(self)
tornado.stack_context.ExceptionStackContext.__exit__(self,type,value,traceback)
tornado.stack_context.ExceptionStackContext.__init__(self,exception_handler)
tornado.stack_context.NullContext(object)
tornado.stack_context.NullContext.__enter__(self)
tornado.stack_context.NullContext.__exit__(self,type,value,traceback)
tornado.stack_context.StackContext(self,context_factory)
tornado.stack_context.StackContext.__enter__(self)
tornado.stack_context.StackContext.__exit__(self,type,value,traceback)
tornado.stack_context.StackContext.__init__(self,context_factory)
tornado.stack_context._StackContextWrapper(functools.partial)
tornado.stack_context._State(self)
tornado.stack_context._State.__init__(self)
tornado.stack_context._nested(*managers)
tornado.stack_context.wrap(fn)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/websocket.py----------------------------------------
A:tornado.websocket.self.ws_connection->WebSocketProtocol76(self)
A:tornado.websocket.message->tornado.escape.utf8(message)
A:tornado.websocket.callback->functools.partial(callback, *args, **kwargs)
A:tornado.websocket.scheme->self.handler.get_websocket_scheme()
A:tornado.websocket.subprotocol->self.request.headers.get('Sec-WebSocket-Protocol', None)
A:tornado.websocket.selected->self.handler.select_subprotocol(subprotocols)
A:tornado.websocket.key_1->self.request.headers.get('Sec-Websocket-Key1')
A:tornado.websocket.key_2->self.request.headers.get('Sec-Websocket-Key2')
A:tornado.websocket.part_1->self._calculate_part(key_1)
A:tornado.websocket.part_2->self._calculate_part(key_2)
A:tornado.websocket.challenge_response->self.challenge_response(challenge)
A:tornado.websocket.number->int(''.join((c for c in key if c.isdigit())))
A:tornado.websocket.spaces->len([c for c in key if c.isspace()])
A:tornado.websocket.m->hashlib.md5()
A:tornado.websocket.frame_type->ord(byte)
A:tornado.websocket.self._waiting->self.stream.io_loop.add_timeout(time.time() + 5, self._abort)
A:tornado.websocket.sha1->hashlib.sha1()
A:tornado.websocket.subprotocols->self.request.headers.get('Sec-WebSocket-Protocol', '')
A:tornado.websocket.frame->struct.pack('B', finbit | opcode)
A:tornado.websocket.l->len(data)
A:tornado.websocket.(header, payloadlen)->struct.unpack('BB', data)
A:tornado.websocket.self._frame_mask->array.array('B', data)
A:tornado.websocket.unmasked->array.array('B', data)
A:tornado.websocket.decoded->data.decode('utf-8')
tornado.websocket.WebSocketHandler(self,application,request,**kwargs)
tornado.websocket.WebSocketHandler.__init__(self,application,request,**kwargs)
tornado.websocket.WebSocketHandler._execute(self,transforms,*args,**kwargs)
tornado.websocket.WebSocketHandler._not_supported(self,*args,**kwargs)
tornado.websocket.WebSocketHandler.allow_draft76(self)
tornado.websocket.WebSocketHandler.async_callback(self,callback,*args,**kwargs)
tornado.websocket.WebSocketHandler.close(self)
tornado.websocket.WebSocketHandler.get_websocket_scheme(self)
tornado.websocket.WebSocketHandler.on_close(self)
tornado.websocket.WebSocketHandler.on_connection_close(self)
tornado.websocket.WebSocketHandler.on_message(self,message)
tornado.websocket.WebSocketHandler.open(self)
tornado.websocket.WebSocketHandler.select_subprotocol(self,subprotocols)
tornado.websocket.WebSocketHandler.write_message(self,message,binary=False)
tornado.websocket.WebSocketProtocol(self,handler)
tornado.websocket.WebSocketProtocol.__init__(self,handler)
tornado.websocket.WebSocketProtocol._abort(self)
tornado.websocket.WebSocketProtocol.async_callback(self,callback,*args,**kwargs)
tornado.websocket.WebSocketProtocol.on_connection_close(self)
tornado.websocket.WebSocketProtocol13(self,handler)
tornado.websocket.WebSocketProtocol13.__init__(self,handler)
tornado.websocket.WebSocketProtocol13._accept_connection(self)
tornado.websocket.WebSocketProtocol13._challenge_response(self)
tornado.websocket.WebSocketProtocol13._handle_message(self,opcode,data)
tornado.websocket.WebSocketProtocol13._handle_websocket_headers(self)
tornado.websocket.WebSocketProtocol13._on_frame_data(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_length_16(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_length_64(self,data)
tornado.websocket.WebSocketProtocol13._on_frame_start(self,data)
tornado.websocket.WebSocketProtocol13._on_masking_key(self,data)
tornado.websocket.WebSocketProtocol13._receive_frame(self)
tornado.websocket.WebSocketProtocol13._write_frame(self,fin,opcode,data)
tornado.websocket.WebSocketProtocol13.accept_connection(self)
tornado.websocket.WebSocketProtocol13.close(self)
tornado.websocket.WebSocketProtocol13.write_message(self,message,binary=False)
tornado.websocket.WebSocketProtocol76(self,handler)
tornado.websocket.WebSocketProtocol76.__init__(self,handler)
tornado.websocket.WebSocketProtocol76._calculate_part(self,key)
tornado.websocket.WebSocketProtocol76._generate_challenge_response(self,part_1,part_2,part_3)
tornado.websocket.WebSocketProtocol76._handle_challenge(self,challenge)
tornado.websocket.WebSocketProtocol76._handle_websocket_headers(self)
tornado.websocket.WebSocketProtocol76._on_end_delimiter(self,frame)
tornado.websocket.WebSocketProtocol76._on_frame_type(self,byte)
tornado.websocket.WebSocketProtocol76._on_length_indicator(self,byte)
tornado.websocket.WebSocketProtocol76._receive_message(self)
tornado.websocket.WebSocketProtocol76._write_response(self,challenge)
tornado.websocket.WebSocketProtocol76.accept_connection(self)
tornado.websocket.WebSocketProtocol76.challenge_response(self,challenge)
tornado.websocket.WebSocketProtocol76.close(self)
tornado.websocket.WebSocketProtocol76.write_message(self,message,binary=False)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/autoreload.py----------------------------------------
A:tornado.autoreload.callback->functools.partial(_reload_on_update, modify_times)
A:tornado.autoreload.scheduler->tornado.ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)
A:tornado.autoreload.io_loop->tornado.ioloop.IOLoop()
A:tornado.autoreload._watched_files->set()
A:tornado.autoreload.path->getattr(module, '__file__', None)
tornado.autoreload._check_file(modify_times,path)
tornado.autoreload._close_all_fds(io_loop)
tornado.autoreload._reload()
tornado.autoreload._reload_on_update(modify_times)
tornado.autoreload.add_reload_hook(fn)
tornado.autoreload.main()
tornado.autoreload.start(io_loop=None,check_time=500)
tornado.autoreload.wait()
tornado.autoreload.watch(filename)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/httpserver.py----------------------------------------
A:tornado.httpserver.self._header_callback->tornado.stack_context.wrap(self._on_headers)
A:tornado.httpserver.self._write_callback->tornado.stack_context.wrap(callback)
A:tornado.httpserver.connection_header->connection_header.lower().lower()
A:tornado.httpserver.data->native_str(data.decode('latin1'))
A:tornado.httpserver.eol->native_str(data.decode('latin1')).find('\r\n')
A:tornado.httpserver.(method, uri, version)->start_line.split(' ')
A:tornado.httpserver.headers->tornado.httputil.HTTPHeaders.parse(data[eol:])
A:tornado.httpserver.self._request->HTTPRequest(connection=self, method=method, uri=uri, version=version, headers=headers, remote_ip=self.address[0])
A:tornado.httpserver.content_length->int(content_length)
A:tornado.httpserver.content_type->self._request.headers.get('Content-Type', '')
A:tornado.httpserver.arguments->parse_qs_bytes(query)
A:tornado.httpserver.fields->self._request.headers.get('Content-Type', '').split(';')
A:tornado.httpserver.(k, sep, v)->field.strip().partition('=')
A:tornado.httpserver.self.remote_ip->self.headers.get('X-Real-Ip', self.headers.get('X-Forwarded-For', remote_ip))
A:tornado.httpserver.self.protocol->self.headers.get('X-Scheme', self.headers.get('X-Forwarded-Proto', protocol))
A:tornado.httpserver.self._start_time->time.time()
A:tornado.httpserver.(scheme, netloc, path, query, fragment)->urllib.parse.urlsplit(native_str(uri))
A:tornado.httpserver.self._cookies->http.cookies.SimpleCookie()
A:tornado.httpserver.self._finish_time->time.time()
A:tornado.httpserver.args->', '.join(['%s=%r' % (n, getattr(self, n)) for n in attrs])
A:tornado.httpserver.res->socket.getaddrinfo(ip, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_NUMERICHOST)
tornado.httpserver.HTTPConnection(self,stream,address,request_callback,no_keep_alive=False,xheaders=False)
tornado.httpserver.HTTPConnection.__init__(self,stream,address,request_callback,no_keep_alive=False,xheaders=False)
tornado.httpserver.HTTPConnection._finish_request(self)
tornado.httpserver.HTTPConnection._on_headers(self,data)
tornado.httpserver.HTTPConnection._on_request_body(self,data)
tornado.httpserver.HTTPConnection._on_write_complete(self)
tornado.httpserver.HTTPConnection.finish(self)
tornado.httpserver.HTTPConnection.write(self,chunk,callback=None)
tornado.httpserver.HTTPRequest(self,method,uri,version='HTTP/1.0',headers=None,body=None,remote_ip=None,protocol=None,host=None,files=None,connection=None)
tornado.httpserver.HTTPRequest.__init__(self,method,uri,version='HTTP/1.0',headers=None,body=None,remote_ip=None,protocol=None,host=None,files=None,connection=None)
tornado.httpserver.HTTPRequest.__repr__(self)
tornado.httpserver.HTTPRequest._valid_ip(self,ip)
tornado.httpserver.HTTPRequest.cookies(self)
tornado.httpserver.HTTPRequest.finish(self)
tornado.httpserver.HTTPRequest.full_url(self)
tornado.httpserver.HTTPRequest.get_ssl_certificate(self)
tornado.httpserver.HTTPRequest.request_time(self)
tornado.httpserver.HTTPRequest.supports_http_1_1(self)
tornado.httpserver.HTTPRequest.write(self,chunk,callback=None)
tornado.httpserver.HTTPServer(self,request_callback,no_keep_alive=False,io_loop=None,xheaders=False,ssl_options=None,**kwargs)
tornado.httpserver.HTTPServer.__init__(self,request_callback,no_keep_alive=False,io_loop=None,xheaders=False,ssl_options=None,**kwargs)
tornado.httpserver.HTTPServer.handle_stream(self,stream,address)
tornado.httpserver._BadRequestException(Exception)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/netutil.py----------------------------------------
A:tornado.netutil.sockets->bind_sockets(port, address=address, family=family, backlog=backlog)
A:tornado.netutil.self.io_loop->tornado.ioloop.IOLoop.instance()
A:tornado.netutil.connection->ssl.wrap_socket(connection, server_side=True, do_handshake_on_connect=False, **self.ssl_options)
A:tornado.netutil.stream->IOStream(connection, io_loop=self.io_loop)
A:tornado.netutil.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:tornado.netutil.st->os.stat(file)
A:tornado.netutil.io_loop->tornado.ioloop.IOLoop.instance()
A:tornado.netutil.(connection, address)->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM).accept()
tornado.netutil.TCPServer(self,io_loop=None,ssl_options=None)
tornado.netutil.TCPServer.__init__(self,io_loop=None,ssl_options=None)
tornado.netutil.TCPServer._handle_connection(self,connection,address)
tornado.netutil.TCPServer.add_socket(self,socket)
tornado.netutil.TCPServer.add_sockets(self,sockets)
tornado.netutil.TCPServer.bind(self,port,address=None,family=socket.AF_UNSPEC,backlog=128)
tornado.netutil.TCPServer.handle_stream(self,stream,address)
tornado.netutil.TCPServer.listen(self,port,address='')
tornado.netutil.TCPServer.start(self,num_processes=1)
tornado.netutil.TCPServer.stop(self)
tornado.netutil.add_accept_handler(sock,callback,io_loop=None)
tornado.netutil.bind_sockets(port,address=None,family=socket.AF_UNSPEC,backlog=128)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/web.py----------------------------------------
A:tornado.web._template_loader_lock->threading.Lock()
A:tornado.web.self.ui->ObjectDict(((n, self._ui_method(m)) for (n, m) in application.ui_methods.items()))
A:tornado.web.self.ui['_modules']->ObjectDict(((n, self._ui_module(n, m)) for (n, m) in application.ui_modules.items()))
A:tornado.web.self._headers[name]->self._convert_header_value(value)
A:tornado.web.value->b('|').join([value, timestamp, signature])
A:tornado.web.t->self.create_template_loader(template_path).load(template_name)
A:tornado.web.args->dict(handler=self, request=self.request, current_user=self.current_user, locale=self.locale, _=self.locale.translate, static_url=self.static_url, xsrf_form_html=self.xsrf_form_html, reverse_url=self.application.reverse_url)
A:tornado.web.v->v.strip().strip()
A:tornado.web.name->tornado.escape.native_str(name)
A:tornado.web.new_cookie->http.cookies.SimpleCookie()
A:tornado.web.timestamp->int(parts[1])
A:tornado.web.new_cookie[name]['expires']->email.utils.formatdate(timestamp, localtime=False, usegmt=True)
A:tornado.web.url->self.get_login_url()
A:tornado.web.chunk->self.transform_chunk(chunk, finishing)
A:tornado.web.html->self.render_string(template_name, **kwargs)
A:tornado.web.embed_part->module.embedded_css()
A:tornado.web.file_part->module.css_files()
A:tornado.web.head_part->module.html_head()
A:tornado.web.body_part->module.html_body()
A:tornado.web.unique_paths->set()
A:tornado.web.path->self.parse_url_path(path)
A:tornado.web.js->''.join(('<script src="' + escape.xhtml_escape(p) + '" type="text/javascript"></script>' for p in paths))
A:tornado.web.sloc->self.render_string(template_name, **kwargs).rindex(b('</body>'))
A:tornado.web.css->''.join(('<link href="' + escape.xhtml_escape(p) + '" type="text/css" rel="stylesheet"/>' for p in paths))
A:tornado.web.hloc->self.render_string(template_name, **kwargs).index(b('</body>'))
A:tornado.web.template_path->os.path.dirname(frame.f_code.co_filename)
A:tornado.web.frame->sys._getframe(0)
A:tornado.web.loader->self.create_template_loader(template_path)
A:tornado.web.(self._headers, chunk)->transform.transform_first_chunk(self._headers, chunk, include_footers)
A:tornado.web.headers->b('')
A:tornado.web.etag->self.compute_etag()
A:tornado.web.inm->self.request.headers.get('If-None-Match')
A:tornado.web.content_length->sum((len(part) for part in self._write_buffer))
A:tornado.web.exc_info->dict(((k, unquote(v)) for (k, v) in match.groupdict().items())).pop('exc_info')
A:tornado.web.self._locale->self.get_browser_locale()
A:tornado.web.languages->self.request.headers['Accept-Language'].split(',')
A:tornado.web.parts->utf8(value).split(b('|'))
A:tornado.web.score->float(parts[1][2:])
A:tornado.web.self._current_user->self.get_current_user()
A:tornado.web.token->binascii.b2a_hex(uuid.uuid4().bytes)
A:tornado.web.static_handler_class->settings.get('static_handler_class', StaticFileHandler)
A:tornado.web.include_host->getattr(self, 'include_host', False)
A:tornado.web.callback->functools.partial(callback, *args, **kwargs)
A:tornado.web.hasher->hashlib.sha1()
A:tornado.web.kwargs->dict(((k, unquote(v)) for (k, v) in match.groupdict().items()))
A:tornado.web.self._active_modules[name]->module(self)
A:tornado.web.rendered->self._active_modules[name].render(*args, **kwargs)
A:tornado.web.uri->self.request.path.rstrip('/')
A:tornado.web.handlers->self._get_host_handlers(request)
A:tornado.web.static_url_prefix->settings.get('static_url_prefix', '/static/')
A:tornado.web.static_handler_args->settings.get('static_handler_args', {})
A:tornado.web.server->HTTPServer(self, **kwargs)
A:tornado.web.handler->ErrorHandler(self, request, status_code=404)
A:tornado.web.spec->URLSpec(pattern, handler, kwargs)
A:tornado.web.match->URLSpec(pattern, handler, kwargs).regex.match(request.path)
A:tornado.web._lock->threading.Lock()
A:tornado.web.abspath->os.path.join(abspath, self.default_filename)
A:tornado.web.stat_result->os.stat(abspath)
A:tornado.web.modified->datetime.datetime.fromtimestamp(stat_result[stat.ST_MTIME])
A:tornado.web.(mime_type, encoding)->mimetypes.guess_type(abspath)
A:tornado.web.cache_time->self.get_cache_time(path, modified, mime_type)
A:tornado.web.ims_value->self.request.headers.get('If-Modified-Since')
A:tornado.web.date_tuple->email.utils.parsedate(ims_value)
A:tornado.web.if_since->datetime.datetime.fromtimestamp(time.mktime(date_tuple))
A:tornado.web.data->file.read()
A:tornado.web.version_hash->cls.get_version(settings, path)
A:tornado.web.abs_path->os.path.join(settings['static_path'], path)
A:tornado.web.f->open(abs_path, 'rb')
A:tornado.web.hashes[abs_path]->hashlib.md5(f.read()).hexdigest()
A:tornado.web.hsh->hashes.get(abs_path)
A:tornado.web.url_path->url_path.replace('/', os.path.sep).replace('/', os.path.sep)
A:tornado.web.CONTENT_TYPES->set(['text/plain', 'text/html', 'text/css', 'text/xml', 'application/javascript', 'application/x-javascript', 'application/xml', 'application/atom+xml', 'text/javascript', 'application/json', 'application/xhtml+xml'])
A:tornado.web.self._gzip_value->BytesIO()
A:tornado.web.self._gzip_file->gzip.GzipFile(mode='w', fileobj=self._gzip_value)
A:tornado.web.headers['Content-Length']->str(len(chunk))
A:tornado.web.self._chunking->request.supports_http_1_1()
A:tornado.web.next_url->self.request.full_url()
A:tornado.web.self.regex->re.compile(pattern)
A:tornado.web.(self._path, self._group_count)->self._find_groups()
A:tornado.web.paren_loc->fragment.index(')')
A:tornado.web.signature->_create_signature(secret, name, parts[0], parts[1])
A:tornado.web.hash->hmac.new(utf8(secret), digestmod=hashlib.sha1)
tornado.web.Application(self,handlers=None,default_host='',transforms=None,wsgi=False,**settings)
tornado.web.Application.__init__(self,handlers=None,default_host='',transforms=None,wsgi=False,**settings)
tornado.web.Application._get_host_handlers(self,request)
tornado.web.Application._load_ui_methods(self,methods)
tornado.web.Application._load_ui_modules(self,modules)
tornado.web.Application.add_handlers(self,host_pattern,host_handlers)
tornado.web.Application.add_transform(self,transform_class)
tornado.web.Application.listen(self,port,address='',**kwargs)
tornado.web.Application.log_request(self,handler)
tornado.web.Application.reverse_url(self,name,*args)
tornado.web.ChunkedTransferEncoding(self,request)
tornado.web.ChunkedTransferEncoding.__init__(self,request)
tornado.web.ChunkedTransferEncoding.transform_chunk(self,block,finishing)
tornado.web.ChunkedTransferEncoding.transform_first_chunk(self,headers,chunk,finishing)
tornado.web.ErrorHandler(RequestHandler)
tornado.web.ErrorHandler.initialize(self,status_code)
tornado.web.ErrorHandler.prepare(self)
tornado.web.FallbackHandler(RequestHandler)
tornado.web.FallbackHandler.initialize(self,fallback)
tornado.web.FallbackHandler.prepare(self)
tornado.web.GZipContentEncoding(self,request)
tornado.web.GZipContentEncoding.__init__(self,request)
tornado.web.GZipContentEncoding.transform_chunk(self,chunk,finishing)
tornado.web.GZipContentEncoding.transform_first_chunk(self,headers,chunk,finishing)
tornado.web.HTTPError(self,status_code,log_message=None,*args)
tornado.web.HTTPError.__init__(self,status_code,log_message=None,*args)
tornado.web.HTTPError.__str__(self)
tornado.web.OutputTransform(self,request)
tornado.web.OutputTransform.__init__(self,request)
tornado.web.OutputTransform.transform_chunk(self,chunk,finishing)
tornado.web.OutputTransform.transform_first_chunk(self,headers,chunk,finishing)
tornado.web.RedirectHandler(RequestHandler)
tornado.web.RedirectHandler.get(self)
tornado.web.RedirectHandler.initialize(self,url,permanent=True)
tornado.web.RequestHandler(self,application,request,**kwargs)
tornado.web.RequestHandler.__init__(self,application,request,**kwargs)
tornado.web.RequestHandler._convert_header_value(self,value)
tornado.web.RequestHandler._execute(self,transforms,*args,**kwargs)
tornado.web.RequestHandler._generate_headers(self)
tornado.web.RequestHandler._handle_request_exception(self,e)
tornado.web.RequestHandler._log(self)
tornado.web.RequestHandler._request_summary(self)
tornado.web.RequestHandler._stack_context_handle_exception(self,type,value,traceback)
tornado.web.RequestHandler._ui_method(self,method)
tornado.web.RequestHandler._ui_module(self,name,module)
tornado.web.RequestHandler.add_header(self,name,value)
tornado.web.RequestHandler.async_callback(self,callback,*args,**kwargs)
tornado.web.RequestHandler.check_xsrf_cookie(self)
tornado.web.RequestHandler.clear(self)
tornado.web.RequestHandler.clear_all_cookies(self)
tornado.web.RequestHandler.clear_cookie(self,name,path='/',domain=None)
tornado.web.RequestHandler.compute_etag(self)
tornado.web.RequestHandler.cookies(self)
tornado.web.RequestHandler.create_signed_value(self,name,value)
tornado.web.RequestHandler.create_template_loader(self,template_path)
tornado.web.RequestHandler.current_user(self)
tornado.web.RequestHandler.decode_argument(self,value,name=None)
tornado.web.RequestHandler.delete(self,*args,**kwargs)
tornado.web.RequestHandler.finish(self,chunk=None)
tornado.web.RequestHandler.flush(self,include_footers=False,callback=None)
tornado.web.RequestHandler.get(self,*args,**kwargs)
tornado.web.RequestHandler.get_argument(self,name,default=_ARG_DEFAULT,strip=True)
tornado.web.RequestHandler.get_arguments(self,name,strip=True)
tornado.web.RequestHandler.get_browser_locale(self,default='en_US')
tornado.web.RequestHandler.get_cookie(self,name,default=None)
tornado.web.RequestHandler.get_current_user(self)
tornado.web.RequestHandler.get_login_url(self)
tornado.web.RequestHandler.get_secure_cookie(self,name,value=None,max_age_days=31)
tornado.web.RequestHandler.get_status(self)
tornado.web.RequestHandler.get_template_path(self)
tornado.web.RequestHandler.get_user_locale(self)
tornado.web.RequestHandler.head(self,*args,**kwargs)
tornado.web.RequestHandler.initialize(self)
tornado.web.RequestHandler.locale(self)
tornado.web.RequestHandler.on_connection_close(self)
tornado.web.RequestHandler.on_finish(self)
tornado.web.RequestHandler.options(self,*args,**kwargs)
tornado.web.RequestHandler.post(self,*args,**kwargs)
tornado.web.RequestHandler.prepare(self)
tornado.web.RequestHandler.put(self,*args,**kwargs)
tornado.web.RequestHandler.redirect(self,url,permanent=False,status=None)
tornado.web.RequestHandler.render(self,template_name,**kwargs)
tornado.web.RequestHandler.render_string(self,template_name,**kwargs)
tornado.web.RequestHandler.require_setting(self,name,feature='thisfeature')
tornado.web.RequestHandler.reverse_url(self,name,*args)
tornado.web.RequestHandler.send_error(self,status_code=500,**kwargs)
tornado.web.RequestHandler.set_cookie(self,name,value,domain=None,expires=None,path='/',expires_days=None,**kwargs)
tornado.web.RequestHandler.set_default_headers(self)
tornado.web.RequestHandler.set_header(self,name,value)
tornado.web.RequestHandler.set_secure_cookie(self,name,value,expires_days=30,**kwargs)
tornado.web.RequestHandler.set_status(self,status_code)
tornado.web.RequestHandler.settings(self)
tornado.web.RequestHandler.static_url(self,path,include_host=None)
tornado.web.RequestHandler.write(self,chunk)
tornado.web.RequestHandler.write_error(self,status_code,**kwargs)
tornado.web.RequestHandler.xsrf_form_html(self)
tornado.web.RequestHandler.xsrf_token(self)
tornado.web.StaticFileHandler(RequestHandler)
tornado.web.StaticFileHandler.get(self,path,include_body=True)
tornado.web.StaticFileHandler.get_cache_time(self,path,modified,mime_type)
tornado.web.StaticFileHandler.get_version(cls,settings,path)
tornado.web.StaticFileHandler.head(self,path)
tornado.web.StaticFileHandler.initialize(self,path,default_filename=None)
tornado.web.StaticFileHandler.make_static_url(cls,settings,path)
tornado.web.StaticFileHandler.parse_url_path(self,url_path)
tornado.web.StaticFileHandler.reset(cls)
tornado.web.StaticFileHandler.set_extra_headers(self,path)
tornado.web.TemplateModule(self,handler)
tornado.web.TemplateModule.__init__(self,handler)
tornado.web.TemplateModule._get_resources(self,key)
tornado.web.TemplateModule.css_files(self)
tornado.web.TemplateModule.embedded_css(self)
tornado.web.TemplateModule.embedded_javascript(self)
tornado.web.TemplateModule.html_body(self)
tornado.web.TemplateModule.html_head(self)
tornado.web.TemplateModule.javascript_files(self)
tornado.web.TemplateModule.render(self,path,**kwargs)
tornado.web.UIModule(self,handler)
tornado.web.UIModule.__init__(self,handler)
tornado.web.UIModule.css_files(self)
tornado.web.UIModule.embedded_css(self)
tornado.web.UIModule.embedded_javascript(self)
tornado.web.UIModule.html_body(self)
tornado.web.UIModule.html_head(self)
tornado.web.UIModule.javascript_files(self)
tornado.web.UIModule.render(self,*args,**kwargs)
tornado.web.UIModule.render_string(self,path,**kwargs)
tornado.web.URLSpec(self,pattern,handler_class,kwargs={},name=None)
tornado.web.URLSpec.__init__(self,pattern,handler_class,kwargs={},name=None)
tornado.web.URLSpec._find_groups(self)
tornado.web.URLSpec.reverse(self,*args)
tornado.web._create_signature(secret,*parts)
tornado.web._linkify(UIModule)
tornado.web._linkify.render(self,text,**kwargs)
tornado.web._time_independent_equals(a,b)
tornado.web._xsrf_form_html(UIModule)
tornado.web._xsrf_form_html.render(self)
tornado.web.addslash(method)
tornado.web.asynchronous(method)
tornado.web.authenticated(method)
tornado.web.create_signed_value(secret,name,value)
tornado.web.decode_signed_value(secret,name,value,max_age_days=31)
tornado.web.removeslash(method)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/iostream.py----------------------------------------
A:tornado.iostream.self._read_buffer->collections.deque()
A:tornado.iostream.self._write_buffer->collections.deque()
A:tornado.iostream.self._connect_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.self._read_regex->re.compile(regex)
A:tornado.iostream.self._read_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.self._streaming_callback->tornado.stack_context.wrap(streaming_callback)
A:tornado.iostream.self._write_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.self._close_callback->tornado.stack_context.wrap(callback)
A:tornado.iostream.result->self._read_to_buffer()
A:tornado.iostream.chunk->deque.popleft()
A:tornado.iostream.bytes_to_consume->min(self._read_bytes, self._read_buffer_size)
A:tornado.iostream.loc->self._read_buffer[0].find(self._read_delimiter)
A:tornado.iostream.new_len->max(len(self._read_buffer[0]) * 2, len(self._read_buffer[0]) + len(self._read_buffer[1]))
A:tornado.iostream.delimiter_len->len(self._read_delimiter)
A:tornado.iostream.m->self._read_regex.search(self._read_buffer[0])
A:tornado.iostream.err->self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
A:tornado.iostream.num_bytes->self.socket.send(self._write_buffer[0])
A:tornado.iostream.self._ssl_options->kwargs.pop('ssl_options', {})
A:tornado.iostream.self.socket->ssl.wrap_socket(self.socket, do_handshake_on_connect=False, **self._ssl_options)
tornado.iostream.IOStream(self,socket,io_loop=None,max_buffer_size=104857600,read_chunk_size=4096)
tornado.iostream.IOStream.__init__(self,socket,io_loop=None,max_buffer_size=104857600,read_chunk_size=4096)
tornado.iostream.IOStream._add_io_state(self,state)
tornado.iostream.IOStream._check_closed(self)
tornado.iostream.IOStream._consume(self,loc)
tornado.iostream.IOStream._handle_connect(self)
tornado.iostream.IOStream._handle_events(self,fd,events)
tornado.iostream.IOStream._handle_read(self)
tornado.iostream.IOStream._handle_write(self)
tornado.iostream.IOStream._maybe_add_error_listener(self)
tornado.iostream.IOStream._read_from_buffer(self)
tornado.iostream.IOStream._read_from_socket(self)
tornado.iostream.IOStream._read_to_buffer(self)
tornado.iostream.IOStream._run_callback(self,callback,*args)
tornado.iostream.IOStream.close(self)
tornado.iostream.IOStream.closed(self)
tornado.iostream.IOStream.connect(self,address,callback=None)
tornado.iostream.IOStream.read_bytes(self,num_bytes,callback,streaming_callback=None)
tornado.iostream.IOStream.read_until(self,delimiter,callback)
tornado.iostream.IOStream.read_until_close(self,callback,streaming_callback=None)
tornado.iostream.IOStream.read_until_regex(self,regex,callback)
tornado.iostream.IOStream.reading(self)
tornado.iostream.IOStream.set_close_callback(self,callback)
tornado.iostream.IOStream.write(self,data,callback=None)
tornado.iostream.IOStream.writing(self)
tornado.iostream.SSLIOStream(self,*args,**kwargs)
tornado.iostream.SSLIOStream.__init__(self,*args,**kwargs)
tornado.iostream.SSLIOStream._do_ssl_handshake(self)
tornado.iostream.SSLIOStream._handle_connect(self)
tornado.iostream.SSLIOStream._handle_read(self)
tornado.iostream.SSLIOStream._handle_write(self)
tornado.iostream.SSLIOStream._read_from_socket(self)
tornado.iostream.SSLIOStream.reading(self)
tornado.iostream.SSLIOStream.writing(self)
tornado.iostream._merge_prefix(deque,size)
tornado.iostream.doctests()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/auth.py----------------------------------------
A:tornado.auth.args->tornado.escape.parse_qs_bytes(escape.native_str(response.body))
A:tornado.auth.http_client->tornado.httpclient.AsyncHTTPClient()
A:tornado.auth.url->urllib.parse.urljoin(self.request.full_url(), callback_uri)
A:tornado.auth.ax_attrs->set(ax_attrs)
A:tornado.auth.args['openid.ax.required']->','.join(required)
A:tornado.auth.email->get_ax_arg('http://axschema.org/contact/email')
A:tornado.auth.name->get_ax_arg('http://axschema.org/namePerson')
A:tornado.auth.first_name->get_ax_arg('http://axschema.org/namePerson/first')
A:tornado.auth.last_name->get_ax_arg('http://axschema.org/namePerson/last')
A:tornado.auth.username->get_ax_arg('http://axschema.org/namePerson/friendly')
A:tornado.auth.locale->get_ax_arg('http://axschema.org/pref/language').lower()
A:tornado.auth.user->dict()
A:tornado.auth.user['name']->' '.join(name_parts)
A:tornado.auth.request_key->tornado.escape.utf8(self.get_argument('oauth_token'))
A:tornado.auth.oauth_verifier->self.get_argument('oauth_verifier', None)
A:tornado.auth.request_cookie->self.get_cookie('_oauth_request_token')
A:tornado.auth.token->dict(key=p[b('oauth_token')][0], secret=p[b('oauth_token_secret')][0])
A:tornado.auth.consumer_token->self._oauth_consumer_token()
A:tornado.auth.args['oauth_callback']->urllib.parse.urljoin(self.request.full_url(), callback_uri)
A:tornado.auth.signature->_oauth_signature(consumer_token, method, url, args, access_token)
A:tornado.auth.request_token->_oauth_parse_response(response.body)
A:tornado.auth.access_token->_oauth_parse_response(response.body)
A:tornado.auth.base_args->dict(oauth_consumer_key=consumer_token['key'], oauth_token=access_token['key'], oauth_signature_method='HMAC-SHA1', oauth_timestamp=str(int(time.time())), oauth_nonce=binascii.b2a_hex(uuid.uuid4().bytes), oauth_version=getattr(self, '_OAUTH_VERSION', '1.0a'))
A:tornado.auth.http->tornado.httpclient.AsyncHTTPClient()
A:tornado.auth.oauth->self._oauth_request_parameters(url, access_token, all_args, method=method)
A:tornado.auth.callback->self.async_callback(self._on_facebook_request, callback)
A:tornado.auth.args['cancel_url']->urllib.parse.urljoin(self.request.full_url(), cancel_uri)
A:tornado.auth.args['req_perms']->','.join(extended_permissions)
A:tornado.auth.session->tornado.escape.json_decode(self.get_argument('session'))
A:tornado.auth.args['call_id']->str(int(time.time() * 1000000.0))
A:tornado.auth.args['sig']->self._signature(args)
A:tornado.auth.json->tornado.escape.json_decode(response.body)
A:tornado.auth.body->body.encode('utf-8').encode('utf-8')
A:tornado.auth.fields->set(['id', 'name', 'first_name', 'last_name', 'locale', 'picture', 'link'])
A:tornado.auth.fieldmap[field]->dict().get(field)
A:tornado.auth.parts->urllib.parse.urlparse(url)
A:tornado.auth.base_string->'&'.join((_oauth_escape(e) for e in base_elems))
A:tornado.auth.key->b('&').join(key_elems)
A:tornado.auth.hash->hmac.new(key, escape.utf8(base_string), hashlib.sha1)
A:tornado.auth.val->val.encode('utf-8').encode('utf-8')
A:tornado.auth.p->tornado.escape.parse_qs(body, keep_blank_values=False)
tornado.auth.FacebookGraphMixin(OAuth2Mixin)
tornado.auth.FacebookGraphMixin._on_access_token(self,redirect_uri,client_id,client_secret,callback,fields,response)
tornado.auth.FacebookGraphMixin._on_facebook_request(self,callback,response)
tornado.auth.FacebookGraphMixin._on_get_user_info(self,callback,session,fields,user)
tornado.auth.FacebookGraphMixin.facebook_request(self,path,callback,access_token=None,post_args=None,**args)
tornado.auth.FacebookGraphMixin.get_authenticated_user(self,redirect_uri,client_id,client_secret,code,callback,extra_fields=None)
tornado.auth.FacebookMixin(object)
tornado.auth.FacebookMixin._on_get_user_info(self,callback,session,users)
tornado.auth.FacebookMixin._parse_response(self,callback,response)
tornado.auth.FacebookMixin._signature(self,args)
tornado.auth.FacebookMixin.authenticate_redirect(self,callback_uri=None,cancel_uri=None,extended_permissions=None)
tornado.auth.FacebookMixin.authorize_redirect(self,extended_permissions,callback_uri=None,cancel_uri=None)
tornado.auth.FacebookMixin.facebook_request(self,method,callback,**args)
tornado.auth.FacebookMixin.get_authenticated_user(self,callback)
tornado.auth.FriendFeedMixin(OAuthMixin)
tornado.auth.FriendFeedMixin._oauth_consumer_token(self)
tornado.auth.FriendFeedMixin._oauth_get_user(self,access_token,callback)
tornado.auth.FriendFeedMixin._on_friendfeed_request(self,callback,response)
tornado.auth.FriendFeedMixin._parse_user_response(self,callback,user)
tornado.auth.FriendFeedMixin.friendfeed_request(self,path,callback,access_token=None,post_args=None,**args)
tornado.auth.GoogleMixin(OpenIdMixin,OAuthMixin)
tornado.auth.GoogleMixin._oauth_consumer_token(self)
tornado.auth.GoogleMixin._oauth_get_user(self,access_token,callback)
tornado.auth.GoogleMixin.authorize_redirect(self,oauth_scope,callback_uri=None,ax_attrs=['name','email','language','username'])
tornado.auth.GoogleMixin.get_authenticated_user(self,callback)
tornado.auth.OAuth2Mixin(object)
tornado.auth.OAuth2Mixin._oauth_request_token_url(self,redirect_uri=None,client_id=None,client_secret=None,code=None,extra_params=None)
tornado.auth.OAuth2Mixin.authorize_redirect(self,redirect_uri=None,client_id=None,client_secret=None,extra_params=None)
tornado.auth.OAuthMixin(object)
tornado.auth.OAuthMixin._oauth_access_token_url(self,request_token)
tornado.auth.OAuthMixin._oauth_get_user(self,access_token,callback)
tornado.auth.OAuthMixin._oauth_request_parameters(self,url,access_token,parameters={},method='GET')
tornado.auth.OAuthMixin._oauth_request_token_url(self,callback_uri=None,extra_params=None)
tornado.auth.OAuthMixin._on_access_token(self,callback,response)
tornado.auth.OAuthMixin._on_oauth_get_user(self,access_token,callback,user)
tornado.auth.OAuthMixin._on_request_token(self,authorize_url,callback_uri,response)
tornado.auth.OAuthMixin.authorize_redirect(self,callback_uri=None,extra_params=None,http_client=None)
tornado.auth.OAuthMixin.get_authenticated_user(self,callback,http_client=None)
tornado.auth.OpenIdMixin(object)
tornado.auth.OpenIdMixin._on_authentication_verified(self,callback,response)
tornado.auth.OpenIdMixin._openid_args(self,callback_uri,ax_attrs=[],oauth_scope=None)
tornado.auth.OpenIdMixin.authenticate_redirect(self,callback_uri=None,ax_attrs=['name','email','language','username'])
tornado.auth.OpenIdMixin.get_authenticated_user(self,callback,http_client=None)
tornado.auth.TwitterMixin(OAuthMixin)
tornado.auth.TwitterMixin._oauth_consumer_token(self)
tornado.auth.TwitterMixin._oauth_get_user(self,access_token,callback)
tornado.auth.TwitterMixin._on_twitter_request(self,callback,response)
tornado.auth.TwitterMixin._parse_user_response(self,callback,user)
tornado.auth.TwitterMixin.authenticate_redirect(self,callback_uri=None)
tornado.auth.TwitterMixin.twitter_request(self,path,callback,access_token=None,post_args=None,**args)
tornado.auth._oauth10a_signature(consumer_token,method,url,parameters={},token=None)
tornado.auth._oauth_escape(val)
tornado.auth._oauth_parse_response(body)
tornado.auth._oauth_signature(consumer_token,method,url,parameters={},token=None)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/curl_httpclient.py----------------------------------------
A:tornado.curl_httpclient.self._multi->pycurl.CurlMulti()
A:tornado.curl_httpclient.self._requests->collections.deque()
A:tornado.curl_httpclient.self._force_timeout_callback->tornado.ioloop.PeriodicCallback(self._handle_force_timeout, 1000, io_loop=io_loop)
A:tornado.curl_httpclient.request->HTTPRequest(url=request, **kwargs)
A:tornado.curl_httpclient.self._timeout->self.io_loop.add_timeout(time.time() + msecs / 1000.0, self._handle_timeout)
A:tornado.curl_httpclient.(ret, num_handles)->self._multi.socket_all()
A:tornado.curl_httpclient.new_timeout->self._multi.timeout()
A:tornado.curl_httpclient.(num_q, ok_list, err_list)->self._multi.info_read()
A:tornado.curl_httpclient.curl->pycurl.Curl()
A:tornado.curl_httpclient.(request, callback)->self._requests.popleft()
A:tornado.curl_httpclient.error->CurlError(curl_error, curl_message)
A:tornado.curl_httpclient.code->pycurl.Curl().getinfo(pycurl.HTTP_CODE)
A:tornado.curl_httpclient.effective_url->pycurl.Curl().getinfo(pycurl.EFFECTIVE_URL)
A:tornado.curl_httpclient.time_info->dict(queue=info['curl_start_time'] - info['request'].start_time, namelookup=curl.getinfo(pycurl.NAMELOOKUP_TIME), connect=curl.getinfo(pycurl.CONNECT_TIME), pretransfer=curl.getinfo(pycurl.PRETRANSFER_TIME), starttransfer=curl.getinfo(pycurl.STARTTRANSFER_TIME), total=curl.getinfo(pycurl.TOTAL_TIME), redirect=curl.getinfo(pycurl.REDIRECT_TIME))
A:tornado.curl_httpclient.custom_methods->set(['DELETE'])
A:tornado.curl_httpclient.request_buffer->io.StringIO(utf8(request.body))
A:tornado.curl_httpclient.header_line->header_line.strip().strip()
tornado.curl_httpclient.CurlAsyncHTTPClient(AsyncHTTPClient)
tornado.curl_httpclient.CurlAsyncHTTPClient._finish(self,curl,curl_error=None,curl_message=None)
tornado.curl_httpclient.CurlAsyncHTTPClient._finish_pending_requests(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_events(self,fd,events)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_force_timeout(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_socket(self,event,fd,multi,data)
tornado.curl_httpclient.CurlAsyncHTTPClient._handle_timeout(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._process_queue(self)
tornado.curl_httpclient.CurlAsyncHTTPClient._set_timeout(self,msecs)
tornado.curl_httpclient.CurlAsyncHTTPClient.close(self)
tornado.curl_httpclient.CurlAsyncHTTPClient.fetch(self,request,callback,**kwargs)
tornado.curl_httpclient.CurlAsyncHTTPClient.handle_callback_exception(self,callback)
tornado.curl_httpclient.CurlAsyncHTTPClient.initialize(self,io_loop=None,max_clients=10,max_simultaneous_connections=None)
tornado.curl_httpclient.CurlError(self,errno,message)
tornado.curl_httpclient.CurlError.__init__(self,errno,message)
tornado.curl_httpclient._curl_create(max_simultaneous_connections=None)
tornado.curl_httpclient._curl_debug(debug_type,debug_msg)
tornado.curl_httpclient._curl_header_callback(headers,header_line)
tornado.curl_httpclient._curl_setup_request(curl,request,buffer,headers)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/escape.py----------------------------------------
A:tornado.escape._XHTML_ESCAPE_RE->re.compile('[&<>"]')
A:tornado.escape.result->parse_qs(qs, keep_blank_values, strict_parsing, encoding='latin1', errors='strict')
A:tornado.escape._URL_RE->re.compile('\\b((?:([\\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\\s&()]|&amp;|&quot;)*(?:[^!"#$%&\'()*+,.:;<=>?@\\[\\]^`{|}~\\s]))|(?:\\((?:[^\\s&()]|&amp;|&quot;)*\\)))+)')
A:tornado.escape.url->m.group(1)
A:tornado.escape.proto->m.group(2)
A:tornado.escape.href->m.group(1)
A:tornado.escape.parts->url[proto_len:].split('/')
A:tornado.escape.amp->m.group(1).rfind('&')
A:tornado.escape.text->_unicode(xhtml_escape(text))
A:tornado.escape.unicode_map[name]->chr(value)
A:tornado.escape._HTML_UNICODE_MAP->_build_unicode_map()
tornado.escape._build_unicode_map()
tornado.escape._convert_entity(m)
tornado.escape.json_decode(value)
tornado.escape.json_encode(value)
tornado.escape.linkify(text,shorten=False,extra_params='',require_protocol=False,permitted_protocols=['http','https'])
tornado.escape.recursive_unicode(obj)
tornado.escape.squeeze(value)
tornado.escape.to_basestring(value)
tornado.escape.to_unicode(value)
tornado.escape.url_escape(value)
tornado.escape.utf8(value)
tornado.escape.xhtml_escape(value)
tornado.escape.xhtml_unescape(value)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/httputil_test.py----------------------------------------
A:tornado.test.httputil_test.url->url_concat('https://localhost/path?r=1&t=2', [])
A:tornado.test.httputil_test.data->'Foo: bar\n baz\nAsdf: qwer\n\tzxcv\nFoo: even\n     more\n     lines\n'.replace('\n', '\r\n')
A:tornado.test.httputil_test.headers->tornado.httputil.HTTPHeaders.parse(data)
tornado.test.httputil_test.HTTPHeadersTest(unittest.TestCase)
tornado.test.httputil_test.HTTPHeadersTest.test_multi_line(self)
tornado.test.httputil_test.MultipartFormDataTest(LogTrapTestCase)
tornado.test.httputil_test.MultipartFormDataTest.test_file_upload(self)
tornado.test.httputil_test.MultipartFormDataTest.test_special_filenames(self)
tornado.test.httputil_test.MultipartFormDataTest.test_unquoted_names(self)
tornado.test.httputil_test.TestUrlConcat(unittest.TestCase)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_encode_args(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_mult_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_query_params(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_q_with_no_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_amp(self)
tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_q(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/iostream_test.py----------------------------------------
A:tornado.test.iostream_test.port->get_unused_port()
A:tornado.test.iostream_test.[listener]->tornado.netutil.bind_sockets(port, '127.0.0.1', family=socket.AF_INET)
A:tornado.test.iostream_test.streams[0]->IOStream(connection, io_loop=self.io_loop, **kwargs)
A:tornado.test.iostream_test.client_stream->IOStream(socket.socket(), io_loop=self.io_loop, **kwargs)
A:tornado.test.iostream_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.iostream_test.self.stream->IOStream(s, io_loop=self.io_loop)
A:tornado.test.iostream_test.data->self.wait()
A:tornado.test.iostream_test.(server, client)->self.make_iostream_pair(read_chunk_size=256)
A:tornado.test.iostream_test.stream->IOStream(s, io_loop=self.io_loop)
A:tornado.test.iostream_test.response->self.fetch('/', headers={'Connection': 'close'})
tornado.test.iostream_test.HelloHandler(RequestHandler)
tornado.test.iostream_test.HelloHandler.get(self)
tornado.test.iostream_test.TestIOStream(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.iostream_test.TestIOStream.get_app(self)
tornado.test.iostream_test.TestIOStream.make_iostream_pair(self,**kwargs)
tornado.test.iostream_test.TestIOStream.test_close_buffered_data(self)
tornado.test.iostream_test.TestIOStream.test_connection_closed(self)
tornado.test.iostream_test.TestIOStream.test_connection_refused(self)
tornado.test.iostream_test.TestIOStream.test_delayed_close_callback(self)
tornado.test.iostream_test.TestIOStream.test_read_until_close(self)
tornado.test.iostream_test.TestIOStream.test_read_zero_bytes(self)
tornado.test.iostream_test.TestIOStream.test_streaming_callback(self)
tornado.test.iostream_test.TestIOStream.test_streaming_until_close(self)
tornado.test.iostream_test.TestIOStream.test_write_zero_bytes(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/ioloop_test.py----------------------------------------
A:tornado.test.ioloop_test.self.start_time->time.time()
tornado.test.ioloop_test.TestIOLoop(AsyncTestCase,LogTrapTestCase)
tornado.test.ioloop_test.TestIOLoop.test_add_callback_wakeup(self)
tornado.test.ioloop_test.TestIOLoop.test_add_timeout_timedelta(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/simple_httpclient_test.py----------------------------------------
A:tornado.test.simple_httpclient_test.client->SimpleAsyncHTTPClient(self.io_loop, max_clients=1, force_instance=True)
A:tornado.test.simple_httpclient_test.self.http_client->SimpleAsyncHTTPClient(self.io_loop)
A:tornado.test.simple_httpclient_test.self.triggers->collections.deque()
A:tornado.test.simple_httpclient_test.io_loop2->IOLoop()
A:tornado.test.simple_httpclient_test.response->self.fetch('/no_content?error=1')
A:tornado.test.simple_httpclient_test.f->gzip.GzipFile(mode='r', fileobj=response.buffer)
A:tornado.test.simple_httpclient_test.url->self.get_url('/hello').replace('localhost', '[::1]')
tornado.test.simple_httpclient_test.ContentLengthHandler(RequestHandler)
tornado.test.simple_httpclient_test.ContentLengthHandler.get(self)
tornado.test.simple_httpclient_test.HangHandler(RequestHandler)
tornado.test.simple_httpclient_test.HangHandler.get(self)
tornado.test.simple_httpclient_test.HeadHandler(RequestHandler)
tornado.test.simple_httpclient_test.HeadHandler.head(self)
tornado.test.simple_httpclient_test.NoContentHandler(RequestHandler)
tornado.test.simple_httpclient_test.NoContentHandler.get(self)
tornado.test.simple_httpclient_test.SeeOther303GetHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOther303GetHandler.get(self)
tornado.test.simple_httpclient_test.SeeOther303PostHandler(RequestHandler)
tornado.test.simple_httpclient_test.SeeOther303PostHandler.post(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase(HTTPClientCommonTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase.get_http_client(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.get_app(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.setUp(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_303_redirect(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_connection_limit(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_default_certificates_exist(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_gzip(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_head_request(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_ipv6(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_max_redirects(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_multiple_content_length_accepted(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_no_content(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_redirect_connection_limit(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_request_timeout(self)
tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase.test_singleton(self)
tornado.test.simple_httpclient_test.TriggerHandler(RequestHandler)
tornado.test.simple_httpclient_test.TriggerHandler.get(self)
tornado.test.simple_httpclient_test.TriggerHandler.initialize(self,queue,wake_callback)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/stack_context_test.py----------------------------------------
A:tornado.test.stack_context_test.callback->wrap(callback)
tornado.test.stack_context_test.HTTPStackContextTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.stack_context_test.HTTPStackContextTest.get_app(self)
tornado.test.stack_context_test.HTTPStackContextTest.handle_response(self,response)
tornado.test.stack_context_test.HTTPStackContextTest.test_stack_context(self)
tornado.test.stack_context_test.StackContextTest(AsyncTestCase,LogTrapTestCase)
tornado.test.stack_context_test.StackContextTest.context(self,name)
tornado.test.stack_context_test.StackContextTest.setUp(self)
tornado.test.stack_context_test.StackContextTest.test_exit_library_context(self)
tornado.test.stack_context_test.TestRequestHandler(self,app,request,io_loop)
tornado.test.stack_context_test.TestRequestHandler.__init__(self,app,request,io_loop)
tornado.test.stack_context_test.TestRequestHandler.get(self)
tornado.test.stack_context_test.TestRequestHandler.get_error_html(self,status_code,**kwargs)
tornado.test.stack_context_test.TestRequestHandler.part2(self)
tornado.test.stack_context_test.TestRequestHandler.part3(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/template_test.py----------------------------------------
A:tornado.test.template_test.template->Template(utf8('{% comment blah blah %}foo'))
A:tornado.test.template_test.loader->DictLoader({'foo.py': '{% autoescape py_escape %}s = {{ name }}\n'})
A:tornado.test.template_test.exc_stack->traceback.format_exc()
tornado.test.template_test.AutoEscapeTest(LogTrapTestCase)
tornado.test.template_test.AutoEscapeTest.setUp(self)
tornado.test.template_test.AutoEscapeTest.test_custom_escape(self)
tornado.test.template_test.AutoEscapeTest.test_default_off(self)
tornado.test.template_test.AutoEscapeTest.test_default_on(self)
tornado.test.template_test.AutoEscapeTest.test_extended_block(self)
tornado.test.template_test.AutoEscapeTest.test_raw_expression(self)
tornado.test.template_test.AutoEscapeTest.test_unextended_block(self)
tornado.test.template_test.StackTraceTest(LogTrapTestCase)
tornado.test.template_test.StackTraceTest.test_error_line_number_directive(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_expression(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_base_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_extends_sub_error(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_include(self)
tornado.test.template_test.StackTraceTest.test_error_line_number_module(self)
tornado.test.template_test.StackTraceTest.test_multi_includes(self)
tornado.test.template_test.TemplateTest(LogTrapTestCase)
tornado.test.template_test.TemplateTest.test_apply(self)
tornado.test.template_test.TemplateTest.test_bytes(self)
tornado.test.template_test.TemplateTest.test_comment(self)
tornado.test.template_test.TemplateTest.test_comment_directive(self)
tornado.test.template_test.TemplateTest.test_custom_namespace(self)
tornado.test.template_test.TemplateTest.test_escaping(self)
tornado.test.template_test.TemplateTest.test_expressions(self)
tornado.test.template_test.TemplateTest.test_extends(self)
tornado.test.template_test.TemplateTest.test_if(self)
tornado.test.template_test.TemplateTest.test_include(self)
tornado.test.template_test.TemplateTest.test_relative_load(self)
tornado.test.template_test.TemplateTest.test_simple(self)
tornado.test.template_test.TemplateTest.test_unicode_literal_expression(self)
tornado.test.template_test.TemplateTest.test_unicode_template(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/wsgi_test.py----------------------------------------
A:tornado.test.wsgi_test.response->self.fetch('/path/foo%20bar%C3%A9')
tornado.test.wsgi_test.WSGIApplicationTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.wsgi_test.WSGIApplicationTest.get_app(self)
tornado.test.wsgi_test.WSGIApplicationTest.test_path_quoting(self)
tornado.test.wsgi_test.WSGIApplicationTest.test_simple(self)
tornado.test.wsgi_test.WSGIConnectionTest(HTTPConnectionTest)
tornado.test.wsgi_test.WSGIConnectionTest.get_app(self)
tornado.test.wsgi_test.WSGIContainerTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.wsgi_test.WSGIContainerTest.get_app(self)
tornado.test.wsgi_test.WSGIContainerTest.test_simple(self)
tornado.test.wsgi_test.WSGIContainerTest.wsgi_app(self,environ,start_response)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/testing_test.py----------------------------------------
A:tornado.test.testing_test.result->unittest.TestResult()
tornado.test.testing_test.AsyncTestCaseTest(AsyncTestCase,LogTrapTestCase)
tornado.test.testing_test.AsyncTestCaseTest.test_exception_in_callback(self)
tornado.test.testing_test.SetUpTearDownTest(unittest.TestCase)
tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/escape_test.py----------------------------------------
A:tornado.test.escape_test.linked->tornado.escape.linkify(text, **kwargs)
tornado.test.escape_test.EscapeTestCase(unittest.TestCase)
tornado.test.escape_test.EscapeTestCase.test_escape_return_types(self)
tornado.test.escape_test.EscapeTestCase.test_json_decode(self)
tornado.test.escape_test.EscapeTestCase.test_json_encode(self)
tornado.test.escape_test.EscapeTestCase.test_linkify(self)
tornado.test.escape_test.EscapeTestCase.test_url_escape(self)
tornado.test.escape_test.EscapeTestCase.test_url_unescape(self)
tornado.test.escape_test.EscapeTestCase.test_xhtml_escape(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/process_test.py----------------------------------------
A:tornado.test.process_test.port->get_unused_port()
A:tornado.test.process_test.sockets->bind_sockets(port, '127.0.0.1')
A:tornado.test.process_test.id->fork_processes(3, max_restarts=3)
A:tornado.test.process_test.server->HTTPServer(self.get_app())
A:tornado.test.process_test.client->HTTPClient(SimpleAsyncHTTPClient)
A:tornado.test.process_test.pid->int(fetch('/').body)
A:tornado.test.process_test.pid2->int(fetch('/').body)
tornado.test.process_test.ProcessTest(LogTrapTestCase)
tornado.test.process_test.ProcessTest.get_app(self)
tornado.test.process_test.ProcessTest.tearDown(self)
tornado.test.process_test.ProcessTest.test_multi_process(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/web_test.py----------------------------------------
A:tornado.test.web_test.self.application->ObjectDict(settings=dict(cookie_secret='0123456789'))
A:tornado.test.web_test.handler->CookieTestRequestHandler()
A:tornado.test.web_test.match->re.match(b('12345678\\|([0-9]+)\\|([0-9a-f]+)'), cookie)
A:tornado.test.web_test.timestamp->re.match(b('12345678\\|([0-9]+)\\|([0-9a-f]+)'), cookie).group(1)
A:tornado.test.web_test.sig->re.match(b('12345678\\|([0-9]+)\\|([0-9a-f]+)'), cookie).group(2)
A:tornado.test.web_test.handler._cookies['foo']->utf8('1234|5678%s|%s' % (timestamp, sig))
A:tornado.test.web_test.response->self.fetch('/static_url/foo.txt')
A:tornado.test.web_test.headers->self.fetch('/static_url/foo.txt').headers.get_list('Set-Cookie')
A:tornado.test.web_test.s->socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
A:tornado.test.web_test.self.stream->IOStream(s, io_loop=self.io_loop)
A:tornado.test.web_test.actual_type->type(obj)
A:tornado.test.web_test.loader->DictLoader({'linkify.html': '{% module linkify(message) %}', 'page.html': '<html><head></head><body>\n{% for e in entries %}\n{% module Template("entry.html", entry=e) %}\n{% end %}\n</body></html>', 'entry.html': '{{ set_resources(embedded_css=".entry { margin-bottom: 1em; }", embedded_javascript="js_embed()", css_files=["/base.css", "/foo.css"], javascript_files="/common.js", html_head="<meta>", html_body=\'<script src="/analytics.js"/>\') }}\n<div class="entry">...</div>'})
A:tornado.test.web_test.data->json_decode(response.body)
A:tornado.test.web_test.do_include->bool(self.get_argument('include_host'))
A:tornado.test.web_test.regular_url->self.static_url(path)
A:tornado.test.web_test.override_url->self.static_url(path, include_host=do_include)
A:tornado.test.web_test.protocol_length->len(protocol)
A:tornado.test.web_test.check_regular->self.static_url(path).find(protocol, 0, protocol_length)
A:tornado.test.web_test.check_override->self.static_url(path, include_host=do_include).find(protocol, 0, protocol_length)
A:tornado.test.web_test.path->self.parse_url_path(path)
A:tornado.test.web_test.version_hash->cls.get_version(settings, path)
A:tornado.test.web_test.extension_index->url_path.rindex('.')
A:tornado.test.web_test.version_index->url_path.rindex('.', 0, extension_index)
tornado.test.web_test.AuthRedirectRequestHandler(RequestHandler)
tornado.test.web_test.AuthRedirectRequestHandler.get(self)
tornado.test.web_test.AuthRedirectRequestHandler.get_login_url(self)
tornado.test.web_test.AuthRedirectRequestHandler.initialize(self,login_url)
tornado.test.web_test.AuthRedirectTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.AuthRedirectTest.get_app(self)
tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect(self)
tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect(self)
tornado.test.web_test.ConnectionCloseHandler(RequestHandler)
tornado.test.web_test.ConnectionCloseHandler.get(self)
tornado.test.web_test.ConnectionCloseHandler.initialize(self,test)
tornado.test.web_test.ConnectionCloseHandler.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.ConnectionCloseTest.get_app(self)
tornado.test.web_test.ConnectionCloseTest.on_connection_close(self)
tornado.test.web_test.ConnectionCloseTest.on_handler_waiting(self)
tornado.test.web_test.ConnectionCloseTest.test_connection_close(self)
tornado.test.web_test.CookieTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.CookieTest.get_app(self)
tornado.test.web_test.CookieTest.test_cookie_special_char(self)
tornado.test.web_test.CookieTest.test_get_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie(self)
tornado.test.web_test.CookieTest.test_set_cookie_domain(self)
tornado.test.web_test.CookieTestRequestHandler(self)
tornado.test.web_test.CookieTestRequestHandler.__init__(self)
tornado.test.web_test.CookieTestRequestHandler.get_cookie(self,name)
tornado.test.web_test.CookieTestRequestHandler.set_cookie(self,name,value,expires_days=None)
tornado.test.web_test.CustomStaticFileTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.CustomStaticFileTest.get_app(self)
tornado.test.web_test.CustomStaticFileTest.test_serve(self)
tornado.test.web_test.CustomStaticFileTest.test_static_url(self)
tornado.test.web_test.DecodeArgHandler(RequestHandler)
tornado.test.web_test.DecodeArgHandler.decode_argument(self,value,name=None)
tornado.test.web_test.DecodeArgHandler.get(self,arg)
tornado.test.web_test.EchoHandler(RequestHandler)
tornado.test.web_test.EchoHandler.get(self,path)
tornado.test.web_test.ErrorResponseTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.ErrorResponseTest.get_app(self)
tornado.test.web_test.ErrorResponseTest.test_default(self)
tornado.test.web_test.ErrorResponseTest.test_failed_write_error(self)
tornado.test.web_test.ErrorResponseTest.test_get_error_html(self)
tornado.test.web_test.ErrorResponseTest.test_write_error(self)
tornado.test.web_test.FlowControlHandler(RequestHandler)
tornado.test.web_test.FlowControlHandler.get(self)
tornado.test.web_test.FlowControlHandler.step2(self)
tornado.test.web_test.FlowControlHandler.step3(self)
tornado.test.web_test.LinkifyHandler(RequestHandler)
tornado.test.web_test.LinkifyHandler.get(self)
tornado.test.web_test.MultiHeaderHandler(RequestHandler)
tornado.test.web_test.MultiHeaderHandler.get(self)
tornado.test.web_test.OptionalPathHandler(RequestHandler)
tornado.test.web_test.OptionalPathHandler.get(self,path)
tornado.test.web_test.RedirectHandler(RequestHandler)
tornado.test.web_test.RedirectHandler.get(self)
tornado.test.web_test.RequestEncodingTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.RequestEncodingTest.get_app(self)
tornado.test.web_test.RequestEncodingTest.test_path_encoding(self)
tornado.test.web_test.RequestEncodingTest.test_question_mark(self)
tornado.test.web_test.SecureCookieTest(LogTrapTestCase)
tornado.test.web_test.SecureCookieTest.test_cookie_tampering_future_timestamp(self)
tornado.test.web_test.SecureCookieTest.test_round_trip(self)
tornado.test.web_test.StaticFileTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.StaticFileTest._trigger_include_host_check(self,include_host)
tornado.test.web_test.StaticFileTest.get_app(self)
tornado.test.web_test.StaticFileTest.test_absolute_static_url(self)
tornado.test.web_test.StaticFileTest.test_include_host_override(self)
tornado.test.web_test.StaticFileTest.test_static_files(self)
tornado.test.web_test.StaticFileTest.test_static_url(self)
tornado.test.web_test.TypeCheckHandler(RequestHandler)
tornado.test.web_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.web_test.TypeCheckHandler.get(self,path_component)
tornado.test.web_test.TypeCheckHandler.post(self,path_component)
tornado.test.web_test.TypeCheckHandler.prepare(self)
tornado.test.web_test.UIModuleResourceHandler(RequestHandler)
tornado.test.web_test.UIModuleResourceHandler.get(self)
tornado.test.web_test.WebTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.web_test.WebTest.fetch_json(self,*args,**kwargs)
tornado.test.web_test.WebTest.get_app(self)
tornado.test.web_test.WebTest.test_decode_argument(self)
tornado.test.web_test.WebTest.test_flow_control(self)
tornado.test.web_test.WebTest.test_multi_header(self)
tornado.test.web_test.WebTest.test_optional_path(self)
tornado.test.web_test.WebTest.test_redirect(self)
tornado.test.web_test.WebTest.test_types(self)
tornado.test.web_test.WebTest.test_uimodule_resources(self)
tornado.test.web_test.WebTest.test_uimodule_unescaped(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/run_pyversion_tests.py----------------------------------------
A:tornado.test.run_pyversion_tests.ret->subprocess.call(args)
tornado.test.run_pyversion_tests.exists_on_path(filename)
tornado.test.run_pyversion_tests.main()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/import_test.py----------------------------------------
tornado.test.import_test.ImportTest(unittest.TestCase)
tornado.test.import_test.ImportTest.test_import_everything(self)
tornado.test.import_test.ImportTest.test_import_mysqldb(self)
tornado.test.import_test.ImportTest.test_import_pycurl(self)
tornado.test.import_test.ImportTest.test_import_twisted(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/twisted_test.py----------------------------------------
A:tornado.test.twisted_test.self._io_loop->IOLoop()
A:tornado.test.twisted_test.self._reactor->TornadoReactor(self._io_loop)
A:tornado.test.twisted_test.self._now->self._reactor.seconds()
A:tornado.test.twisted_test.dc->self._reactor.callLater(self._timeout, self.callLaterCallback)
A:tornado.test.twisted_test.self._called->self._reactor.seconds()
A:tornado.test.twisted_test.dc1->self._reactor.callLater(self._timeout1, self.callLaterCallback1)
A:tornado.test.twisted_test.dc2->self._reactor.callLater(self._timeout2, self.callLaterCallback2)
A:tornado.test.twisted_test.self._called1->self._reactor.seconds()
A:tornado.test.twisted_test.self._called2->self._reactor.seconds()
A:tornado.test.twisted_test.self._mainThread->_thread.get_ident()
A:tornado.test.twisted_test.self._thread->threading.Thread(target=self._newThreadRun)
A:tornado.test.twisted_test.flags->fcntl.fcntl(fd, fcntl.F_GETFL)
A:tornado.test.twisted_test.(r, w)->os.pipe()
A:tornado.test.twisted_test.self._p1->os.fdopen(r, 'rb', 0)
A:tornado.test.twisted_test.self._p2->os.fdopen(w, 'wb', 0)
A:tornado.test.twisted_test.self._reader->Reader(self._p1, checkReadInput)
A:tornado.test.twisted_test.self._writer->Writer(self._p2, lambda fd: fd.write('x'))
A:tornado.test.twisted_test.self.io_loop->IOLoop()
A:tornado.test.twisted_test.self.reactor->TornadoReactor(self.io_loop)
A:tornado.test.twisted_test.site->Site(HelloResource())
A:tornado.test.twisted_test.self.twisted_port->get_unused_port()
A:tornado.test.twisted_test.app->Application([('/', HelloHandler)], log_function=lambda x: None)
A:tornado.test.twisted_test.self.tornado_port->get_unused_port()
A:tornado.test.twisted_test.client->Agent(self.reactor)
A:tornado.test.twisted_test.d->Agent(self.reactor).request('GET', url)
A:tornado.test.twisted_test.finished->Deferred()
A:tornado.test.twisted_test.response->self.twisted_fetch('http://localhost:%d' % self.tornado_port, self.run_reactor)
A:tornado.test.twisted_test.test_class->import_object(test_name)
A:tornado.test.twisted_test.test_subclass->make_test_subclass(test_class)
tornado.test.twisted_test.CompatibilityTests(unittest.TestCase)
tornado.test.twisted_test.CompatibilityTests.run_ioloop(self)
tornado.test.twisted_test.CompatibilityTests.run_reactor(self)
tornado.test.twisted_test.CompatibilityTests.setUp(self)
tornado.test.twisted_test.CompatibilityTests.start_tornado_server(self)
tornado.test.twisted_test.CompatibilityTests.start_twisted_server(self)
tornado.test.twisted_test.CompatibilityTests.tearDown(self)
tornado.test.twisted_test.CompatibilityTests.testTornadoServerTwistedClientIOLoop(self)
tornado.test.twisted_test.CompatibilityTests.testTornadoServerTwistedClientReactor(self)
tornado.test.twisted_test.CompatibilityTests.testTwistedServerTornadoClientIOLoop(self)
tornado.test.twisted_test.CompatibilityTests.testTwistedServerTornadoClientReactor(self)
tornado.test.twisted_test.CompatibilityTests.tornado_fetch(self,url,runner)
tornado.test.twisted_test.CompatibilityTests.twisted_fetch(self,url,runner)
tornado.test.twisted_test.ReactorCallFromThreadTest(ReactorTestCase)
tornado.test.twisted_test.ReactorCallFromThreadTest._fnCalledFromThread(self)
tornado.test.twisted_test.ReactorCallFromThreadTest._newThreadRun(self)
tornado.test.twisted_test.ReactorCallFromThreadTest._whenRunningCallback(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.setUp(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.tearDown(self)
tornado.test.twisted_test.ReactorCallFromThreadTest.testCallFromThread(self)
tornado.test.twisted_test.ReactorCallInThread(ReactorTestCase)
tornado.test.twisted_test.ReactorCallInThread._fnCalledInThread(self,*args,**kwargs)
tornado.test.twisted_test.ReactorCallInThread._whenRunningCallback(self)
tornado.test.twisted_test.ReactorCallInThread.setUp(self)
tornado.test.twisted_test.ReactorCallInThread.testCallInThread(self)
tornado.test.twisted_test.ReactorCallLaterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorCallLaterTest.callLaterCallback(self)
tornado.test.twisted_test.ReactorCallLaterTest.test_callLater(self)
tornado.test.twisted_test.ReactorReaderWriterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorReaderWriterTest._set_nonblocking(self,fd)
tornado.test.twisted_test.ReactorReaderWriterTest._testNoWriter(self)
tornado.test.twisted_test.ReactorReaderWriterTest._testReadWrite(self)
tornado.test.twisted_test.ReactorReaderWriterTest.setUp(self)
tornado.test.twisted_test.ReactorReaderWriterTest.tearDown(self)
tornado.test.twisted_test.ReactorReaderWriterTest.testNoWriter(self)
tornado.test.twisted_test.ReactorReaderWriterTest.testReadWrite(self)
tornado.test.twisted_test.ReactorTestCase(unittest.TestCase)
tornado.test.twisted_test.ReactorTestCase.setUp(self)
tornado.test.twisted_test.ReactorTestCase.tearDown(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest(ReactorTestCase)
tornado.test.twisted_test.ReactorTwoCallLaterTest.callLaterCallback1(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest.callLaterCallback2(self)
tornado.test.twisted_test.ReactorTwoCallLaterTest.test_callLater(self)
tornado.test.twisted_test.ReactorWhenRunningTest(ReactorTestCase)
tornado.test.twisted_test.ReactorWhenRunningTest.anotherWhenRunningCallback(self)
tornado.test.twisted_test.ReactorWhenRunningTest.test_whenRunning(self)
tornado.test.twisted_test.ReactorWhenRunningTest.whenRunningCallback(self)
tornado.test.twisted_test.Reader(self,fd,callback)
tornado.test.twisted_test.Reader.__init__(self,fd,callback)
tornado.test.twisted_test.Reader.close(self)
tornado.test.twisted_test.Reader.connectionLost(self,reason)
tornado.test.twisted_test.Reader.doRead(self)
tornado.test.twisted_test.Reader.fileno(self)
tornado.test.twisted_test.Reader.logPrefix(self)
tornado.test.twisted_test.Writer(self,fd,callback)
tornado.test.twisted_test.Writer.__init__(self,fd,callback)
tornado.test.twisted_test.Writer.close(self)
tornado.test.twisted_test.Writer.connectionLost(self,reason)
tornado.test.twisted_test.Writer.doWrite(self)
tornado.test.twisted_test.Writer.fileno(self)
tornado.test.twisted_test.Writer.logPrefix(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/httpclient_test.py----------------------------------------
A:tornado.test.httpclient_test.name->self.get_argument('name', 'world')
A:tornado.test.httpclient_test.count->int(count)
A:tornado.test.httpclient_test.self.http_client->self.get_http_client()
A:tornado.test.httpclient_test.response->self.fetch('/hello')
A:tornado.test.httpclient_test.port->get_unused_port()
A:tornado.test.httpclient_test.(sock,)->tornado.netutil.bind_sockets(port, address='127.0.0.1')
A:tornado.test.httpclient_test.stream->IOStream(conn, io_loop=self.io_loop)
A:tornado.test.httpclient_test.resp->self.wait()
A:tornado.test.httpclient_test.url->self.get_url('/auth').replace('http://', 'http://me:secret@')
A:tornado.test.httpclient_test.byte_body->binascii.a2b_hex(b('e9'))
tornado.test.httpclient_test.AuthHandler(RequestHandler)
tornado.test.httpclient_test.AuthHandler.get(self)
tornado.test.httpclient_test.ChunkHandler(RequestHandler)
tornado.test.httpclient_test.ChunkHandler.get(self)
tornado.test.httpclient_test.CountdownHandler(RequestHandler)
tornado.test.httpclient_test.CountdownHandler.get(self,count)
tornado.test.httpclient_test.EchoPostHandler(RequestHandler)
tornado.test.httpclient_test.EchoPostHandler.post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.httpclient_test.HTTPClientCommonTestCase.get_app(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.get_http_client(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.setUp(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_encoding(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked_close(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_credentials_in_url(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_follow_redirect(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_hello_world(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_post(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_callback(self)
tornado.test.httpclient_test.HTTPClientCommonTestCase.test_types(self)
tornado.test.httpclient_test.HelloWorldHandler(RequestHandler)
tornado.test.httpclient_test.HelloWorldHandler.get(self)
tornado.test.httpclient_test.PostHandler(RequestHandler)
tornado.test.httpclient_test.PostHandler.post(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/auth_test.py----------------------------------------
A:tornado.test.auth_test.self._OPENID_ENDPOINT->test.get_url('/openid/server/authenticate')
A:tornado.test.auth_test.self._OAUTH_REQUEST_TOKEN_URL->test.get_url('/oauth1/server/request_token')
A:tornado.test.auth_test.self._OAUTH_AUTHORIZE_URL->test.get_url('/oauth2/server/authorize')
A:tornado.test.auth_test.self._OAUTH_ACCESS_TOKEN_URL->test.get_url('/oauth1/server/access_token')
A:tornado.test.auth_test.params->self._oauth_request_parameters('http://www.example.com/api/asdf', dict(key='uiop', secret='5678'), parameters=dict(foo='bar'))
A:tornado.test.auth_test.response->self.fetch('/oauth2/client/login', follow_redirects=False)
A:tornado.test.auth_test.parsed->json_decode(response.body)
tornado.test.auth_test.AuthTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.auth_test.AuthTest.get_app(self)
tornado.test.auth_test.AuthTest.test_oauth10_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth10a_get_user(self)
tornado.test.auth_test.AuthTest.test_oauth10a_redirect(self)
tornado.test.auth_test.AuthTest.test_oauth10a_request_parameters(self)
tornado.test.auth_test.AuthTest.test_oauth2_redirect(self)
tornado.test.auth_test.AuthTest.test_openid_get_user(self)
tornado.test.auth_test.AuthTest.test_openid_redirect(self)
tornado.test.auth_test.OAuth1ClientLoginHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_get_user(self,access_token,callback)
tornado.test.auth_test.OAuth1ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth1ClientLoginHandler.initialize(self,test,version)
tornado.test.auth_test.OAuth1ClientLoginHandler.on_user(self,user)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler(RequestHandler,OAuthMixin)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler._oauth_consumer_token(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.get(self)
tornado.test.auth_test.OAuth1ClientRequestParametersHandler.initialize(self,version)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerAccessTokenHandler.get(self)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler(RequestHandler)
tornado.test.auth_test.OAuth1ServerRequestTokenHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler(RequestHandler,OAuth2Mixin)
tornado.test.auth_test.OAuth2ClientLoginHandler.get(self)
tornado.test.auth_test.OAuth2ClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdClientLoginHandler(RequestHandler,OpenIdMixin)
tornado.test.auth_test.OpenIdClientLoginHandler.get(self)
tornado.test.auth_test.OpenIdClientLoginHandler.initialize(self,test)
tornado.test.auth_test.OpenIdClientLoginHandler.on_user(self,user)
tornado.test.auth_test.OpenIdServerAuthenticateHandler(RequestHandler)
tornado.test.auth_test.OpenIdServerAuthenticateHandler.post(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/httpserver_test.py----------------------------------------
A:tornado.test.httpserver_test.response->self.wait()
A:tornado.test.httpserver_test.self.http_client->SimpleAsyncHTTPClient(io_loop=self.io_loop, force_instance=True)
A:tornado.test.httpserver_test.test_dir->os.path.dirname(__file__)
A:tornado.test.httpserver_test.client->SimpleAsyncHTTPClient(self.io_loop)
A:tornado.test.httpserver_test.conn->RawRequestHTTPConnection(self.io_loop, client, httpclient.HTTPRequest(self.get_url('/')), None, self.stop, 1024 * 1024)
A:tornado.test.httpserver_test.data->json_decode(response.body)
A:tornado.test.httpserver_test.stream->IOStream(socket.socket(socket.AF_UNIX), io_loop=self.io_loop)
A:tornado.test.httpserver_test.first_line->self.wait()
A:tornado.test.httpserver_test.header_data->self.wait()
A:tornado.test.httpserver_test.headers->tornado.httputil.HTTPHeaders.parse(self.wait().decode('latin1'))
A:tornado.test.httpserver_test.body->self.wait()
A:tornado.test.httpserver_test.actual_type->type(obj)
A:tornado.test.httpserver_test.self.tmpdir->tempfile.mkdtemp()
A:tornado.test.httpserver_test.sockfile->os.path.join(self.tmpdir, 'test.sock')
A:tornado.test.httpserver_test.sock->tornado.netutil.bind_unix_socket(sockfile)
A:tornado.test.httpserver_test.app->Application([('/hello', HelloWorldRequestHandler)])
A:tornado.test.httpserver_test.server->HTTPServer(app, io_loop=self.io_loop)
tornado.test.httpserver_test.BaseSSLTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.httpserver_test.BaseSSLTest.fetch(self,path,**kwargs)
tornado.test.httpserver_test.BaseSSLTest.get_app(self)
tornado.test.httpserver_test.BaseSSLTest.get_httpserver_options(self)
tornado.test.httpserver_test.BaseSSLTest.get_ssl_version(self)
tornado.test.httpserver_test.BaseSSLTest.setUp(self)
tornado.test.httpserver_test.EchoHandler(RequestHandler)
tornado.test.httpserver_test.EchoHandler.get(self)
tornado.test.httpserver_test.HTTPConnectionTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.httpserver_test.HTTPConnectionTest.get_app(self)
tornado.test.httpserver_test.HTTPConnectionTest.get_handlers(self)
tornado.test.httpserver_test.HTTPConnectionTest.raw_fetch(self,headers,body)
tornado.test.httpserver_test.HTTPConnectionTest.test_100_continue(self)
tornado.test.httpserver_test.HTTPConnectionTest.test_multipart_form(self)
tornado.test.httpserver_test.HTTPServerTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.httpserver_test.HTTPServerTest.get_app(self)
tornado.test.httpserver_test.HTTPServerTest.test_query_string_encoding(self)
tornado.test.httpserver_test.HTTPServerTest.test_types(self)
tornado.test.httpserver_test.HandlerBaseTestCase(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.httpserver_test.HandlerBaseTestCase.fetch_json(self,*args,**kwargs)
tornado.test.httpserver_test.HandlerBaseTestCase.get_app(self)
tornado.test.httpserver_test.HelloWorldRequestHandler(RequestHandler)
tornado.test.httpserver_test.HelloWorldRequestHandler.get(self)
tornado.test.httpserver_test.HelloWorldRequestHandler.initialize(self,protocol='http')
tornado.test.httpserver_test.HelloWorldRequestHandler.post(self)
tornado.test.httpserver_test.MultipartTestHandler(RequestHandler)
tornado.test.httpserver_test.MultipartTestHandler.post(self)
tornado.test.httpserver_test.RawRequestHTTPConnection(simple_httpclient._HTTPConnection)
tornado.test.httpserver_test.RawRequestHTTPConnection._on_connect(self,parsed)
tornado.test.httpserver_test.RawRequestHTTPConnection.set_request(self,request)
tornado.test.httpserver_test.SSLTestMixin(object)
tornado.test.httpserver_test.SSLTestMixin.test_large_post(self)
tornado.test.httpserver_test.SSLTestMixin.test_non_ssl_request(self)
tornado.test.httpserver_test.SSLTestMixin.test_ssl(self)
tornado.test.httpserver_test.SSLv23Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv23Test.get_ssl_version(self)
tornado.test.httpserver_test.SSLv3Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.SSLv3Test.get_ssl_version(self)
tornado.test.httpserver_test.TLSv1Test(BaseSSLTest,SSLTestMixin)
tornado.test.httpserver_test.TLSv1Test.get_ssl_version(self)
tornado.test.httpserver_test.TypeCheckHandler(RequestHandler)
tornado.test.httpserver_test.TypeCheckHandler.check_type(self,name,obj,expected_type)
tornado.test.httpserver_test.TypeCheckHandler.get(self)
tornado.test.httpserver_test.TypeCheckHandler.post(self)
tornado.test.httpserver_test.TypeCheckHandler.prepare(self)
tornado.test.httpserver_test.UnixSocketTest(AsyncTestCase,LogTrapTestCase)
tornado.test.httpserver_test.UnixSocketTest.setUp(self)
tornado.test.httpserver_test.UnixSocketTest.tearDown(self)
tornado.test.httpserver_test.UnixSocketTest.test_unix_socket(self)
tornado.test.httpserver_test.XHeaderTest(HandlerBaseTestCase)
tornado.test.httpserver_test.XHeaderTest.Handler(RequestHandler)
tornado.test.httpserver_test.XHeaderTest.Handler.get(self)
tornado.test.httpserver_test.XHeaderTest.get_httpserver_options(self)
tornado.test.httpserver_test.XHeaderTest.test_ip_headers(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/gen_test.py----------------------------------------
A:tornado.test.gen_test.client->AsyncHTTPClient(io_loop=io_loop)
A:tornado.test.gen_test.response->self.fetch('/yield_exception')
tornado.test.gen_test.GenExceptionHandler(RequestHandler)
tornado.test.gen_test.GenExceptionHandler.get(self)
tornado.test.gen_test.GenSequenceHandler(RequestHandler)
tornado.test.gen_test.GenSequenceHandler.get(self)
tornado.test.gen_test.GenTaskHandler(RequestHandler)
tornado.test.gen_test.GenTaskHandler.get(self)
tornado.test.gen_test.GenTest(AsyncTestCase)
tornado.test.gen_test.GenTest.delay_callback(self,iterations,callback,arg)
tornado.test.gen_test.GenTest.run_gen(self,f)
tornado.test.gen_test.GenTest.test_arguments(self)
tornado.test.gen_test.GenTest.test_bogus_yield(self)
tornado.test.gen_test.GenTest.test_exception_in_task_phase1(self)
tornado.test.gen_test.GenTest.test_exception_in_task_phase2(self)
tornado.test.gen_test.GenTest.test_exception_in_yield(self)
tornado.test.gen_test.GenTest.test_exception_phase1(self)
tornado.test.gen_test.GenTest.test_exception_phase2(self)
tornado.test.gen_test.GenTest.test_inline_cb(self)
tornado.test.gen_test.GenTest.test_ioloop_cb(self)
tornado.test.gen_test.GenTest.test_key_mismatch(self)
tornado.test.gen_test.GenTest.test_key_reuse(self)
tornado.test.gen_test.GenTest.test_leaked_callback(self)
tornado.test.gen_test.GenTest.test_multi(self)
tornado.test.gen_test.GenTest.test_multi_delayed(self)
tornado.test.gen_test.GenTest.test_no_yield(self)
tornado.test.gen_test.GenTest.test_orphaned_callback(self)
tornado.test.gen_test.GenTest.test_parallel_callback(self)
tornado.test.gen_test.GenTest.test_resume_after_exception_in_yield(self)
tornado.test.gen_test.GenTest.test_reuse(self)
tornado.test.gen_test.GenTest.test_task(self)
tornado.test.gen_test.GenTest.test_wait_all(self)
tornado.test.gen_test.GenTest.test_with_arg(self)
tornado.test.gen_test.GenWebTest(AsyncHTTPTestCase,LogTrapTestCase)
tornado.test.gen_test.GenWebTest.get_app(self)
tornado.test.gen_test.GenWebTest.test_exception_handler(self)
tornado.test.gen_test.GenWebTest.test_sequence_handler(self)
tornado.test.gen_test.GenWebTest.test_task_handler(self)
tornado.test.gen_test.GenWebTest.test_yield_exception_handler(self)
tornado.test.gen_test.GenYieldExceptionHandler(RequestHandler)
tornado.test.gen_test.GenYieldExceptionHandler.get(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/curl_httpclient_test.py----------------------------------------
A:tornado.test.curl_httpclient_test.client->CurlAsyncHTTPClient(io_loop=self.io_loop)
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase(HTTPClientCommonTestCase)
tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase.get_http_client(self)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/test/runtests.py----------------------------------------
tornado.test.runtests.all()


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/interface.py----------------------------------------
tornado.platform.interface.Waker(object)
tornado.platform.interface.Waker.close(self)
tornado.platform.interface.Waker.consume(self)
tornado.platform.interface.Waker.fileno(self)
tornado.platform.interface.Waker.wake(self)
tornado.platform.interface.set_close_exec(fd)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/posix.py----------------------------------------
A:tornado.platform.posix.flags->fcntl.fcntl(fd, fcntl.F_GETFL)
A:tornado.platform.posix.(r, w)->os.pipe()
A:tornado.platform.posix.self.reader->os.fdopen(r, 'rb', 0)
A:tornado.platform.posix.self.writer->os.fdopen(w, 'wb', 0)
A:tornado.platform.posix.result->self.reader.read()
tornado.platform.posix.Waker(self)
tornado.platform.posix.Waker.__init__(self)
tornado.platform.posix.Waker.close(self)
tornado.platform.posix.Waker.consume(self)
tornado.platform.posix.Waker.fileno(self)
tornado.platform.posix.Waker.wake(self)
tornado.platform.posix._set_nonblocking(fd)
tornado.platform.posix.set_close_exec(fd)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/windows.py----------------------------------------
A:tornado.platform.windows.success->SetHandleInformation(fd, HANDLE_FLAG_INHERIT, 0)
A:tornado.platform.windows.self.writer->socket.socket()
A:tornado.platform.windows.a->socket.socket()
A:tornado.platform.windows.connect_address->socket.socket().getsockname()
A:tornado.platform.windows.(self.reader, addr)->socket.socket().accept()
A:tornado.platform.windows.self.reader_fd->self.reader.fileno()
A:tornado.platform.windows.result->self.reader.recv(1024)
tornado.platform.windows.Waker(self)
tornado.platform.windows.Waker.__init__(self)
tornado.platform.windows.Waker.close(self)
tornado.platform.windows.Waker.consume(self)
tornado.platform.windows.Waker.fileno(self)
tornado.platform.windows.Waker.wake(self)
tornado.platform.windows.set_close_exec(fd)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/twisted.py----------------------------------------
A:tornado.platform.twisted.self._func->functools.partial(f, *args, **kw)
A:tornado.platform.twisted.self._timeout->self._reactor._io_loop.add_timeout(self._time, self._called)
A:tornado.platform.twisted.io_loop->tornado.ioloop.IOLoop.instance()
A:tornado.platform.twisted.dc->TornadoDelayedCall(self, seconds, f, *args, **kw)
A:tornado.platform.twisted.p->functools.partial(f, *args, **kw)
A:tornado.platform.twisted.err->twisted.internet.error.ConnectionLost()
A:tornado.platform.twisted.fd->self._writers.pop(writer)
A:tornado.platform.twisted.reactor->TornadoReactor(io_loop)
tornado.platform.twisted.TornadoDelayedCall(self,reactor,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoDelayedCall.__init__(self,reactor,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoDelayedCall._called(self)
tornado.platform.twisted.TornadoDelayedCall.active(self)
tornado.platform.twisted.TornadoDelayedCall.cancel(self)
tornado.platform.twisted.TornadoDelayedCall.delay(self,seconds)
tornado.platform.twisted.TornadoDelayedCall.getTime(self)
tornado.platform.twisted.TornadoDelayedCall.reset(self,seconds)
tornado.platform.twisted.TornadoReactor(self,io_loop=None)
tornado.platform.twisted.TornadoReactor.__init__(self,io_loop=None)
tornado.platform.twisted.TornadoReactor._invoke_callback(self,fd,events)
tornado.platform.twisted.TornadoReactor._removeDelayedCall(self,dc)
tornado.platform.twisted.TornadoReactor.addReader(self,reader)
tornado.platform.twisted.TornadoReactor.addWriter(self,writer)
tornado.platform.twisted.TornadoReactor.callFromThread(self,f,*args,**kw)
tornado.platform.twisted.TornadoReactor.callLater(self,seconds,f,*args,**kw)
tornado.platform.twisted.TornadoReactor.crash(self)
tornado.platform.twisted.TornadoReactor.doIteration(self,delay)
tornado.platform.twisted.TornadoReactor.getDelayedCalls(self)
tornado.platform.twisted.TornadoReactor.getReaders(self)
tornado.platform.twisted.TornadoReactor.getWriters(self)
tornado.platform.twisted.TornadoReactor.installWaker(self)
tornado.platform.twisted.TornadoReactor.mainLoop(self)
tornado.platform.twisted.TornadoReactor.removeAll(self)
tornado.platform.twisted.TornadoReactor.removeReader(self,reader)
tornado.platform.twisted.TornadoReactor.removeWriter(self,writer)
tornado.platform.twisted.TornadoReactor.seconds(self)
tornado.platform.twisted.TornadoReactor.stop(self)
tornado.platform.twisted.TornadoReactor.wakeUp(self)
tornado.platform.twisted._TestReactor(self)
tornado.platform.twisted._TestReactor.__init__(self)
tornado.platform.twisted._TestReactor.listenTCP(self,port,factory,backlog=50,interface='')
tornado.platform.twisted._TestReactor.listenUDP(self,port,protocol,interface='',maxPacketSize=8192)
tornado.platform.twisted.install(io_loop=None)


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/tornado/tornado2.2/platform/auto.py----------------------------------------

