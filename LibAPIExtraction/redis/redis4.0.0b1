
----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/utils.py----------------------------------------
A:redis.utils.p->redis_obj.pipeline()
redis.from_url(url,**kwargs)
redis.utils.from_url(url,**kwargs)
redis.utils.pipeline(redis_obj)
redis.utils.safe_str(value)
redis.utils.str_if_bytes(value)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/features.py----------------------------------------


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/backoff.py----------------------------------------
A:redis.backoff.max_backoff->max(self._base, self._previous_backoff * 3)
A:redis.backoff.temp->random.uniform(self._base, max_backoff)
A:redis.backoff.self._previous_backoff->min(self._cap, temp)
redis.backoff.AbstractBackoff(ABC)
redis.backoff.AbstractBackoff.compute(self,failures)
redis.backoff.AbstractBackoff.reset(self)
redis.backoff.ConstantBackoff(self,backoff)
redis.backoff.ConstantBackoff.__init__(self,backoff)
redis.backoff.ConstantBackoff.compute(self,failures)
redis.backoff.DecorrelatedJitterBackoff(self,cap,base)
redis.backoff.DecorrelatedJitterBackoff.__init__(self,cap,base)
redis.backoff.DecorrelatedJitterBackoff.compute(self,failures)
redis.backoff.DecorrelatedJitterBackoff.reset(self)
redis.backoff.EqualJitterBackoff(self,cap,base)
redis.backoff.EqualJitterBackoff.__init__(self,cap,base)
redis.backoff.EqualJitterBackoff.compute(self,failures)
redis.backoff.ExponentialBackoff(self,cap,base)
redis.backoff.ExponentialBackoff.__init__(self,cap,base)
redis.backoff.ExponentialBackoff.compute(self,failures)
redis.backoff.FullJitterBackoff(self,cap,base)
redis.backoff.FullJitterBackoff.__init__(self,cap,base)
redis.backoff.FullJitterBackoff.compute(self,failures)
redis.backoff.NoBackoff(self)
redis.backoff.NoBackoff.__init__(self)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/sentinel.py----------------------------------------
A:redis.sentinel.self.connection_pool->kwargs.pop('connection_pool')
A:redis.sentinel.kwargs['connection_class']->kwargs.get('connection_class', SentinelManagedConnection)
A:redis.sentinel.self.is_master->kwargs.pop('is_master', True)
A:redis.sentinel.self.check_connection->kwargs.pop('check_connection', False)
A:redis.sentinel.self.connection_kwargs['connection_pool']->weakref.proxy(self)
A:redis.sentinel.parent->super(SentinelConnectionPool, self)
A:redis.sentinel.master_address->self.sentinel_manager.discover_master(self.service_name)
A:redis.sentinel.slaves->self.filter_slaves(slaves)
A:redis.sentinel.self.slave_rr_counter->random.randint(0, len(slaves) - 1)
A:redis.sentinel.once->bool(kwargs.get('once', False))
A:redis.sentinel.masters->sentinel.sentinel_masters()
A:redis.sentinel.state->sentinel.sentinel_masters().get(service_name)
A:redis.sentinel.connection_kwargs->dict(self.connection_kwargs)
redis.sentinel.MasterNotFoundError(ConnectionError)
redis.sentinel.Sentinel(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__init__(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__repr__(self)
redis.sentinel.Sentinel.check_master_state(self,state,service_name)
redis.sentinel.Sentinel.discover_master(self,service_name)
redis.sentinel.Sentinel.discover_slaves(self,service_name)
redis.sentinel.Sentinel.execute_command(self,*args,**kwargs)
redis.sentinel.Sentinel.filter_slaves(self,slaves)
redis.sentinel.Sentinel.master_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.Sentinel.slave_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.SentinelConnectionPool(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__init__(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__repr__(self)
redis.sentinel.SentinelConnectionPool.get_master_address(self)
redis.sentinel.SentinelConnectionPool.owns_connection(self,connection)
redis.sentinel.SentinelConnectionPool.reset(self)
redis.sentinel.SentinelConnectionPool.rotate_slaves(self)
redis.sentinel.SentinelManagedConnection(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__init__(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__repr__(self)
redis.sentinel.SentinelManagedConnection.connect(self)
redis.sentinel.SentinelManagedConnection.connect_to(self,address)
redis.sentinel.SentinelManagedConnection.read_response(self)
redis.sentinel.SlaveNotFoundError(ConnectionError)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/lock.py----------------------------------------
A:redis.lock.self.thread_local->bool(thread_local)
A:redis.lock.cls.lua_release->client.register_script(cls.LUA_RELEASE_SCRIPT)
A:redis.lock.cls.lua_extend->client.register_script(cls.LUA_EXTEND_SCRIPT)
A:redis.lock.cls.lua_reacquire->client.register_script(cls.LUA_REACQUIRE_SCRIPT)
A:redis.lock.token->self.redis.connection_pool.get_encoder().encode(token)
A:redis.lock.encoder->self.redis.connection_pool.get_encoder()
A:redis.lock.timeout->int(self.timeout * 1000)
A:redis.lock.stored_token->self.redis.connection_pool.get_encoder().encode(stored_token)
A:redis.lock.additional_time->int(additional_time * 1000)
redis.lock.Lock(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.__enter__(self)
redis.lock.Lock.__exit__(self,exc_type,exc_value,traceback)
redis.lock.Lock.__init__(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.acquire(self,blocking=None,blocking_timeout=None,token=None)
redis.lock.Lock.do_acquire(self,token)
redis.lock.Lock.do_extend(self,additional_time,replace_ttl)
redis.lock.Lock.do_reacquire(self)
redis.lock.Lock.do_release(self,expected_token)
redis.lock.Lock.extend(self,additional_time,replace_ttl=False)
redis.lock.Lock.locked(self)
redis.lock.Lock.owned(self)
redis.lock.Lock.reacquire(self)
redis.lock.Lock.register_scripts(self)
redis.lock.Lock.release(self)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/retry.py----------------------------------------
A:redis.retry.backoff->self._backoff.compute(failures)
redis.retry.Retry(self,backoff,retries,supported_errors=(ConnectionError,TimeoutError))
redis.retry.Retry.__init__(self,backoff,retries,supported_errors=(ConnectionError,TimeoutError))
redis.retry.Retry.call_with_retry(self,do,fail)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/exceptions.py----------------------------------------
redis.AuthenticationError(ConnectionError)
redis.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.BusyLoadingError(ConnectionError)
redis.ChildDeadlockedError(Exception)
redis.ConnectionError(RedisError)
redis.DataError(RedisError)
redis.InvalidResponse(RedisError)
redis.PubSubError(RedisError)
redis.ReadOnlyError(ResponseError)
redis.RedisError(Exception)
redis.ResponseError(RedisError)
redis.TimeoutError(RedisError)
redis.WatchError(RedisError)
redis.exceptions.AuthenticationError(ConnectionError)
redis.exceptions.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.exceptions.BusyLoadingError(ConnectionError)
redis.exceptions.ChildDeadlockedError(Exception)
redis.exceptions.ConnectionError(RedisError)
redis.exceptions.DataError(RedisError)
redis.exceptions.ExecAbortError(ResponseError)
redis.exceptions.InvalidResponse(RedisError)
redis.exceptions.LockError(RedisError,ValueError)
redis.exceptions.LockNotOwnedError(LockError)
redis.exceptions.ModuleError(ResponseError)
redis.exceptions.NoPermissionError(ResponseError)
redis.exceptions.NoScriptError(ResponseError)
redis.exceptions.PubSubError(RedisError)
redis.exceptions.ReadOnlyError(ResponseError)
redis.exceptions.RedisError(Exception)
redis.exceptions.ResponseError(RedisError)
redis.exceptions.TimeoutError(RedisError)
redis.exceptions.WatchError(RedisError)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/__init__.py----------------------------------------
A:redis.__init__.VERSION->tuple(map(int_or_str, __version__.split('.')))
redis.__init__.int_or_str(value)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/client.py----------------------------------------
A:redis.client.response->self.parse_response(connection, '_')
A:redis.client.data->bool_ok(response)
A:redis.client.response[field]->int(response[field])
A:redis.client.(k, v)->item.rsplit('=', 1)
A:redis.client.sub_dict[k]->get_value(v)
A:redis.client.(key, value)->info.split('=')
A:redis.client.info[key]->get_value(value)
A:redis.client.stats->pairs_to_dict(response, decode_keys=True, decode_string_values=True)
A:redis.client.stats[key]->pairs_to_dict(value, decode_keys=True, decode_string_values=True)
A:redis.client.result->Redis.parse_response(self, connection, command_name, **options)
A:redis.client.flags->set(result['flags'].split(','))
A:redis.client.state->parse_sentinel_state(map(str_if_bytes, item))
A:redis.client.keys->map(str_if_bytes, keys)
A:redis.client.values->map(str_if_bytes, values)
A:redis.client.it->iter(r)
A:redis.client.value->type_info[key](value)
A:redis.client.score_cast_func->options.get('score_cast_func', float)
A:redis.client.result['command']->space.join(item[4])
A:redis.client.line_items->line.split(' ')
A:redis.client.raw_lines->str_if_bytes(response).splitlines()
A:redis.client.data['flags']->list(map(str_if_bytes, data['flags']))
A:redis.client.data['passwords']->list(map(str_if_bytes, data['passwords']))
A:redis.client.data['commands']->str_if_bytes(data['commands'])
A:redis.client.log_data->pairs_to_dict(log, True, True)
A:redis.client.client_info->pairs_to_dict(log, True, True).get('client-info', '')
A:redis.client.log_data['client-info']->parse_client_info(client_info)
A:redis.client.log_data['age-seconds']->float(log_data['age-seconds'])
A:redis.client.infos->str_if_bytes(value).split(' ')
A:redis.client.client_info[int_key]->int(client_info[int_key])
A:redis.client.connection_pool->ConnectionPool(**kwargs)
A:redis.client.self.connection->self.connection_pool.get_connection('pubsub', self.shard_hint)
A:redis.client.self.response_callbacks->CaseInsensitiveDict(self.__class__.RESPONSE_CALLBACKS)
A:redis.client.shard_hint->kwargs.pop('shard_hint', None)
A:redis.client.value_from_callable->kwargs.pop('value_from_callable', False)
A:redis.client.watch_delay->kwargs.pop('watch_delay', None)
A:redis.client.func_value->func(pipe)
A:redis.client.exec_value->pipe.execute()
A:redis.client.monitor_re->re.compile('\\[(\\d+) (.*)\\] (.*)')
A:redis.client.command_re->re.compile('"(.*?)(?<!\\\\)"')
A:redis.client.(command_time, command_data)->self.parse_response(connection, '_').split(' ', 1)
A:redis.client.m->self.monitor_re.match(command_data)
A:redis.client.(db_id, client_info, command)->self.monitor_re.match(command_data).groups()
A:redis.client.command->command.replace('\\"', '"').replace('\\"', '"')
A:redis.client.(client_address, client_port)->pairs_to_dict(log, True, True).get('client-info', '').rsplit(':', 1)
A:redis.client.self.encoder->self.connection_pool.get_encoder()
A:redis.client.self.pending_unsubscribe_channels->set()
A:redis.client.self.pending_unsubscribe_patterns->set()
A:redis.client.args->list_or_args(args[0], args[1:])
A:redis.client.new_patterns->self._normalize_keys(new_patterns)
A:redis.client.ret_val->self.execute_command('SUBSCRIBE', *new_channels.keys())
A:redis.client.patterns->self._normalize_keys(dict.fromkeys(args))
A:redis.client.new_channels->self._normalize_keys(new_channels)
A:redis.client.channels->self._normalize_keys(dict.fromkeys(args))
A:redis.client.message_type->str_if_bytes(response[0])
A:redis.client.handler->self.channels.get(message['channel'], None)
A:redis.client.thread->PubSubWorkerThread(self, sleep_time, daemon=daemon, exception_handler=exception_handler)
A:redis.client.self._running->threading.Event()
A:redis.client.self.scripts->set()
A:redis.client.conn->self.connection_pool.get_connection('MULTI', self.shard_hint)
A:redis.client.cmds->chain([(('MULTI',), {})], commands, [(('EXEC',), {})])
A:redis.client.all_cmds->connection.pack_commands([args for (args, _) in commands])
A:redis.client.r->self.response_callbacks[command_name](r, **options)
A:redis.client.cmd->' '.join(map(safe_str, command))
A:redis.client.scripts->list(self.scripts)
A:redis.client.exists->immediate('SCRIPT EXISTS', *shas)
A:redis.client.s.sha->immediate('SCRIPT LOAD', s.script)
A:redis.client.encoder->registered_client.connection_pool.get_encoder()
A:redis.client.script->registered_client.connection_pool.get_encoder().encode(script)
A:redis.client.self.sha->client.script_load(self.script)
redis.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None)
redis.Redis.__del__(self)
redis.Redis.__enter__(self)
redis.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.Redis.__repr__(self)
redis.Redis._disconnect_raise(self,conn,error)
redis.Redis._send_command_parse_response(self,conn,command_name,*args,**options)
redis.Redis.client(self)
redis.Redis.close(self)
redis.Redis.execute_command(self,*args,**options)
redis.Redis.from_url(cls,url,**kwargs)
redis.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.Redis.monitor(self)
redis.Redis.parse_response(self,connection,command_name,**options)
redis.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.Redis.pubsub(self,**kwargs)
redis.Redis.set_response_callback(self,command,callback)
redis.Redis.transaction(self,func,*watches,**kwargs)
redis.client.CaseInsensitiveDict(self,data)
redis.client.CaseInsensitiveDict.__contains__(self,k)
redis.client.CaseInsensitiveDict.__delitem__(self,k)
redis.client.CaseInsensitiveDict.__getitem__(self,k)
redis.client.CaseInsensitiveDict.__init__(self,data)
redis.client.CaseInsensitiveDict.__setitem__(self,k,v)
redis.client.CaseInsensitiveDict.get(self,k,default=None)
redis.client.CaseInsensitiveDict.update(self,data)
redis.client.Monitor(self,connection_pool)
redis.client.Monitor.__enter__(self)
redis.client.Monitor.__exit__(self,*args)
redis.client.Monitor.__init__(self,connection_pool)
redis.client.Monitor.listen(self)
redis.client.Monitor.next_command(self)
redis.client.Pipeline(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__bool__(self)
redis.client.Pipeline.__del__(self)
redis.client.Pipeline.__enter__(self)
redis.client.Pipeline.__exit__(self,exc_type,exc_value,traceback)
redis.client.Pipeline.__init__(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__len__(self)
redis.client.Pipeline._disconnect_raise_reset(self,conn,error)
redis.client.Pipeline._disconnect_reset_raise(self,conn,error)
redis.client.Pipeline._execute_pipeline(self,connection,commands,raise_on_error)
redis.client.Pipeline._execute_transaction(self,connection,commands,raise_on_error)
redis.client.Pipeline.annotate_exception(self,exception,number,command)
redis.client.Pipeline.discard(self)
redis.client.Pipeline.execute(self,raise_on_error=True)
redis.client.Pipeline.execute_command(self,*args,**kwargs)
redis.client.Pipeline.immediate_execute_command(self,*args,**options)
redis.client.Pipeline.load_scripts(self)
redis.client.Pipeline.multi(self)
redis.client.Pipeline.parse_response(self,connection,command_name,**options)
redis.client.Pipeline.pipeline_execute_command(self,*args,**options)
redis.client.Pipeline.raise_first_error(self,commands,response)
redis.client.Pipeline.reset(self)
redis.client.Pipeline.unwatch(self)
redis.client.Pipeline.watch(self,*names)
redis.client.PubSub(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False)
redis.client.PubSub.__del__(self)
redis.client.PubSub.__enter__(self)
redis.client.PubSub.__exit__(self,exc_type,exc_value,traceback)
redis.client.PubSub.__init__(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False)
redis.client.PubSub._disconnect_raise_connect(self,conn,error)
redis.client.PubSub._execute(self,conn,command,*args,**kwargs)
redis.client.PubSub._normalize_keys(self,data)
redis.client.PubSub.check_health(self)
redis.client.PubSub.close(self)
redis.client.PubSub.execute_command(self,*args)
redis.client.PubSub.get_message(self,ignore_subscribe_messages=False,timeout=0)
redis.client.PubSub.handle_message(self,response,ignore_subscribe_messages=False)
redis.client.PubSub.listen(self)
redis.client.PubSub.on_connect(self,connection)
redis.client.PubSub.parse_response(self,block=True,timeout=0)
redis.client.PubSub.ping(self,message=None)
redis.client.PubSub.psubscribe(self,*args,**kwargs)
redis.client.PubSub.punsubscribe(self,*args)
redis.client.PubSub.reset(self)
redis.client.PubSub.run_in_thread(self,sleep_time=0,daemon=False,exception_handler=None)
redis.client.PubSub.subscribe(self,*args,**kwargs)
redis.client.PubSub.subscribed(self)
redis.client.PubSub.unsubscribe(self,*args)
redis.client.PubSubWorkerThread(self,pubsub,sleep_time,daemon=False,exception_handler=None)
redis.client.PubSubWorkerThread.__init__(self,pubsub,sleep_time,daemon=False,exception_handler=None)
redis.client.PubSubWorkerThread.run(self)
redis.client.PubSubWorkerThread.stop(self)
redis.client.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None)
redis.client.Redis.__del__(self)
redis.client.Redis.__enter__(self)
redis.client.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.client.Redis.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None)
redis.client.Redis.__repr__(self)
redis.client.Redis._disconnect_raise(self,conn,error)
redis.client.Redis._send_command_parse_response(self,conn,command_name,*args,**options)
redis.client.Redis.client(self)
redis.client.Redis.close(self)
redis.client.Redis.execute_command(self,*args,**options)
redis.client.Redis.from_url(cls,url,**kwargs)
redis.client.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.client.Redis.monitor(self)
redis.client.Redis.parse_response(self,connection,command_name,**options)
redis.client.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.client.Redis.pubsub(self,**kwargs)
redis.client.Redis.set_response_callback(self,command,callback)
redis.client.Redis.transaction(self,func,*watches,**kwargs)
redis.client.Script(self,registered_client,script)
redis.client.Script.__init__(self,registered_client,script)
redis.client._parse_node_line(line)
redis.client.bool_ok(response)
redis.client.float_or_none(response)
redis.client.int_or_none(response)
redis.client.pairs_to_dict(response,decode_keys=False,decode_string_values=False)
redis.client.pairs_to_dict_typed(response,type_info)
redis.client.pairs_to_dict_with_str_keys(response)
redis.client.parse_acl_getuser(response,**options)
redis.client.parse_acl_log(response,**options)
redis.client.parse_client_info(value)
redis.client.parse_client_kill(response,**options)
redis.client.parse_client_list(response,**options)
redis.client.parse_cluster_info(response,**options)
redis.client.parse_cluster_nodes(response,**options)
redis.client.parse_config_get(response,**options)
redis.client.parse_debug_object(response)
redis.client.parse_geosearch_generic(response,**options)
redis.client.parse_hscan(response,**options)
redis.client.parse_info(response)
redis.client.parse_list_of_dicts(response)
redis.client.parse_memory_stats(response,**kwargs)
redis.client.parse_module_result(response)
redis.client.parse_object(response,infotype)
redis.client.parse_pubsub_numsub(response,**options)
redis.client.parse_scan(response,**options)
redis.client.parse_sentinel_get_master(response)
redis.client.parse_sentinel_master(response)
redis.client.parse_sentinel_masters(response)
redis.client.parse_sentinel_slaves_and_sentinels(response)
redis.client.parse_sentinel_state(item)
redis.client.parse_set_result(response,**options)
redis.client.parse_slowlog_get(response,**options)
redis.client.parse_stralgo(response,**options)
redis.client.parse_stream_list(response)
redis.client.parse_xautoclaim(response,**options)
redis.client.parse_xclaim(response,**options)
redis.client.parse_xinfo_stream(response)
redis.client.parse_xpending(response,**options)
redis.client.parse_xpending_range(response)
redis.client.parse_xread(response)
redis.client.parse_zadd(response,**options)
redis.client.parse_zmscore(response,**options)
redis.client.parse_zscan(response,**options)
redis.client.sort_return_tuples(response,**options)
redis.client.string_keys_to_dict(key_string,callback)
redis.client.timestamp_to_datetime(response)
redis.client.zset_score_pairs(response,**options)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/commands.py----------------------------------------
A:redis.commands.keys->list_or_args(keys, None)
A:redis.commands.b->int(bits)
A:redis.commands.encoder->registered_client.connection_pool.get_encoder()
A:redis.commands.passwords->list_or_args(passwords, [])
A:redis.commands.password->registered_client.connection_pool.get_encoder().encode(password)
A:redis.commands.hashed_passwords->list_or_args(hashed_passwords, [])
A:redis.commands.hashed_password->registered_client.connection_pool.get_encoder().encode(hashed_password)
A:redis.commands.category->registered_client.connection_pool.get_encoder().encode(category)
A:redis.commands.cmd->registered_client.connection_pool.get_encoder().encode(cmd)
A:redis.commands.key->registered_client.connection_pool.get_encoder().encode(key)
A:redis.commands.decode_responses->self.connection_pool.connection_kwargs.get('decode_responses', False)
A:redis.commands.time->int(time.total_seconds())
A:redis.commands.when->int(time.mktime(when.timetuple()))
A:redis.commands.opset->set([ex, px, exat, pxat])
A:redis.commands.ex->int(ex.total_seconds())
A:redis.commands.px->int(px.total_seconds() * 1000)
A:redis.commands.s->int(exat.microsecond / 1000000)
A:redis.commands.ms->int(pxat.microsecond / 1000)
A:redis.commands.value->self.get(name)
A:redis.commands.args->list_or_args(keys, args)
A:redis.commands.time_ms->int(time_ms.total_seconds() * 1000)
A:redis.commands.(cursor, data)->self.zscan(name, cursor=cursor, match=match, count=count, score_cast_func=score_cast_func)
A:redis.commands.(keys, values)->zip(*streams.items())
A:redis.commands.pieces->list(args)
A:redis.commands.script->registered_client.connection_pool.get_encoder().encode(script)
A:redis.commands.self.sha->client.script_load(self.script)
A:redis.commands.overflow->overflow.upper().upper()
redis.commands.BitFieldOperation(self,client,key,default_overflow=None)
redis.commands.BitFieldOperation.__init__(self,client,key,default_overflow=None)
redis.commands.BitFieldOperation.command(self)
redis.commands.BitFieldOperation.execute(self)
redis.commands.BitFieldOperation.get(self,fmt,offset)
redis.commands.BitFieldOperation.incrby(self,fmt,offset,increment,overflow=None)
redis.commands.BitFieldOperation.overflow(self,overflow)
redis.commands.BitFieldOperation.reset(self)
redis.commands.BitFieldOperation.set(self,fmt,offset,value)
redis.commands.Commands
redis.commands.Commands.__delitem__(self,name)
redis.commands.Commands.__getitem__(self,name)
redis.commands.Commands.__setitem__(self,name,value)
redis.commands.Commands._georadiusgeneric(self,command,*args,**kwargs)
redis.commands.Commands._geosearchgeneric(self,command,*args,**kwargs)
redis.commands.Commands._zaggregate(self,command,dest,keys,aggregate=None,**options)
redis.commands.Commands.acl_cat(self,category=None)
redis.commands.Commands.acl_deluser(self,*username)
redis.commands.Commands.acl_genpass(self,bits=None)
redis.commands.Commands.acl_getuser(self,username)
redis.commands.Commands.acl_help(self)
redis.commands.Commands.acl_list(self)
redis.commands.Commands.acl_load(self)
redis.commands.Commands.acl_log(self,count=None)
redis.commands.Commands.acl_log_reset(self)
redis.commands.Commands.acl_save(self)
redis.commands.Commands.acl_setuser(self,username,enabled=False,nopass=False,passwords=None,hashed_passwords=None,categories=None,commands=None,keys=None,reset=False,reset_keys=False,reset_passwords=False)
redis.commands.Commands.acl_users(self)
redis.commands.Commands.acl_whoami(self)
redis.commands.Commands.append(self,key,value)
redis.commands.Commands.bgrewriteaof(self)
redis.commands.Commands.bgsave(self,schedule=True)
redis.commands.Commands.bitcount(self,key,start=None,end=None)
redis.commands.Commands.bitfield(self,key,default_overflow=None)
redis.commands.Commands.bitop(self,operation,dest,*keys)
redis.commands.Commands.bitpos(self,key,bit,start=None,end=None)
redis.commands.Commands.blmove(self,first_list,second_list,timeout,src='LEFT',dest='RIGHT')
redis.commands.Commands.blpop(self,keys,timeout=0)
redis.commands.Commands.brpop(self,keys,timeout=0)
redis.commands.Commands.brpoplpush(self,src,dst,timeout=0)
redis.commands.Commands.bzpopmax(self,keys,timeout=0)
redis.commands.Commands.bzpopmin(self,keys,timeout=0)
redis.commands.Commands.client_getname(self)
redis.commands.Commands.client_id(self)
redis.commands.Commands.client_info(self)
redis.commands.Commands.client_kill(self,address)
redis.commands.Commands.client_kill_filter(self,_id=None,_type=None,addr=None,skipme=None,laddr=None,user=None)
redis.commands.Commands.client_list(self,_type=None,client_id=[])
redis.commands.Commands.client_pause(self,timeout)
redis.commands.Commands.client_reply(self,reply)
redis.commands.Commands.client_setname(self,name)
redis.commands.Commands.client_trackinginfo(self)
redis.commands.Commands.client_unblock(self,client_id,error=False)
redis.commands.Commands.client_unpause(self)
redis.commands.Commands.cluster(self,cluster_arg,*args)
redis.commands.Commands.command_count(self)
redis.commands.Commands.command_info(self)
redis.commands.Commands.config_get(self,pattern='*')
redis.commands.Commands.config_resetstat(self)
redis.commands.Commands.config_rewrite(self)
redis.commands.Commands.config_set(self,name,value)
redis.commands.Commands.copy(self,source,destination,destination_db=None,replace=False)
redis.commands.Commands.dbsize(self)
redis.commands.Commands.debug_object(self,key)
redis.commands.Commands.decr(self,name,amount=1)
redis.commands.Commands.decrby(self,name,amount=1)
redis.commands.Commands.delete(self,*names)
redis.commands.Commands.dump(self,name)
redis.commands.Commands.echo(self,value)
redis.commands.Commands.eval(self,script,numkeys,*keys_and_args)
redis.commands.Commands.evalsha(self,sha,numkeys,*keys_and_args)
redis.commands.Commands.exists(self,*names)
redis.commands.Commands.expire(self,name,time)
redis.commands.Commands.expireat(self,name,when)
redis.commands.Commands.flushall(self,asynchronous=False)
redis.commands.Commands.flushdb(self,asynchronous=False)
redis.commands.Commands.geoadd(self,name,*values)
redis.commands.Commands.geodist(self,name,place1,place2,unit=None)
redis.commands.Commands.geohash(self,name,*values)
redis.commands.Commands.geopos(self,name,*values)
redis.commands.Commands.georadius(self,name,longitude,latitude,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None,any=False)
redis.commands.Commands.georadiusbymember(self,name,member,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None,any=False)
redis.commands.Commands.geosearch(self,name,member=None,longitude=None,latitude=None,unit='m',radius=None,width=None,height=None,sort=None,count=None,any=False,withcoord=False,withdist=False,withhash=False)
redis.commands.Commands.geosearchstore(self,dest,name,member=None,longitude=None,latitude=None,unit='m',radius=None,width=None,height=None,sort=None,count=None,any=False,storedist=False)
redis.commands.Commands.get(self,name)
redis.commands.Commands.getbit(self,name,offset)
redis.commands.Commands.getdel(self,name)
redis.commands.Commands.getex(self,name,ex=None,px=None,exat=None,pxat=None,persist=False)
redis.commands.Commands.getrange(self,key,start,end)
redis.commands.Commands.getset(self,name,value)
redis.commands.Commands.hdel(self,name,*keys)
redis.commands.Commands.hexists(self,name,key)
redis.commands.Commands.hget(self,name,key)
redis.commands.Commands.hgetall(self,name)
redis.commands.Commands.hincrby(self,name,key,amount=1)
redis.commands.Commands.hincrbyfloat(self,name,key,amount=1.0)
redis.commands.Commands.hkeys(self,name)
redis.commands.Commands.hlen(self,name)
redis.commands.Commands.hmget(self,name,keys,*args)
redis.commands.Commands.hmset(self,name,mapping)
redis.commands.Commands.hrandfield(self,key,count=None,withvalues=False)
redis.commands.Commands.hscan(self,name,cursor=0,match=None,count=None)
redis.commands.Commands.hscan_iter(self,name,match=None,count=None)
redis.commands.Commands.hset(self,name,key=None,value=None,mapping=None)
redis.commands.Commands.hsetnx(self,name,key,value)
redis.commands.Commands.hstrlen(self,name,key)
redis.commands.Commands.hvals(self,name)
redis.commands.Commands.incr(self,name,amount=1)
redis.commands.Commands.incrby(self,name,amount=1)
redis.commands.Commands.incrbyfloat(self,name,amount=1.0)
redis.commands.Commands.info(self,section=None)
redis.commands.Commands.keys(self,pattern='*')
redis.commands.Commands.lastsave(self)
redis.commands.Commands.lindex(self,name,index)
redis.commands.Commands.linsert(self,name,where,refvalue,value)
redis.commands.Commands.llen(self,name)
redis.commands.Commands.lmove(self,first_list,second_list,src='LEFT',dest='RIGHT')
redis.commands.Commands.lolwut(self,*version_numbers)
redis.commands.Commands.lpop(self,name,count=None)
redis.commands.Commands.lpos(self,name,value,rank=None,count=None,maxlen=None)
redis.commands.Commands.lpush(self,name,*values)
redis.commands.Commands.lpushx(self,name,*values)
redis.commands.Commands.lrange(self,name,start,end)
redis.commands.Commands.lrem(self,name,count,value)
redis.commands.Commands.lset(self,name,index,value)
redis.commands.Commands.ltrim(self,name,start,end)
redis.commands.Commands.memory_doctor(self)
redis.commands.Commands.memory_help(self)
redis.commands.Commands.memory_malloc_stats(self)
redis.commands.Commands.memory_purge(self)
redis.commands.Commands.memory_stats(self)
redis.commands.Commands.memory_usage(self,key,samples=None)
redis.commands.Commands.mget(self,keys,*args)
redis.commands.Commands.migrate(self,host,port,keys,destination_db,timeout,copy=False,replace=False,auth=None)
redis.commands.Commands.module_list(self)
redis.commands.Commands.module_load(self,path,*args)
redis.commands.Commands.module_unload(self,name)
redis.commands.Commands.move(self,name,db)
redis.commands.Commands.mset(self,mapping)
redis.commands.Commands.msetnx(self,mapping)
redis.commands.Commands.object(self,infotype,key)
redis.commands.Commands.persist(self,name)
redis.commands.Commands.pexpire(self,name,time)
redis.commands.Commands.pexpireat(self,name,when)
redis.commands.Commands.pfadd(self,name,*values)
redis.commands.Commands.pfcount(self,*sources)
redis.commands.Commands.pfmerge(self,dest,*sources)
redis.commands.Commands.ping(self)
redis.commands.Commands.psetex(self,name,time_ms,value)
redis.commands.Commands.pttl(self,name)
redis.commands.Commands.publish(self,channel,message)
redis.commands.Commands.pubsub_channels(self,pattern='*')
redis.commands.Commands.pubsub_numpat(self)
redis.commands.Commands.pubsub_numsub(self,*args)
redis.commands.Commands.quit(self)
redis.commands.Commands.randomkey(self)
redis.commands.Commands.readonly(self)
redis.commands.Commands.readwrite(self)
redis.commands.Commands.register_script(self,script)
redis.commands.Commands.rename(self,src,dst)
redis.commands.Commands.renamenx(self,src,dst)
redis.commands.Commands.restore(self,name,ttl,value,replace=False,absttl=False,idletime=None,frequency=None)
redis.commands.Commands.rpop(self,name,count=None)
redis.commands.Commands.rpoplpush(self,src,dst)
redis.commands.Commands.rpush(self,name,*values)
redis.commands.Commands.rpushx(self,name,value)
redis.commands.Commands.sadd(self,name,*values)
redis.commands.Commands.save(self)
redis.commands.Commands.scan(self,cursor=0,match=None,count=None,_type=None)
redis.commands.Commands.scan_iter(self,match=None,count=None,_type=None)
redis.commands.Commands.scard(self,name)
redis.commands.Commands.script_exists(self,*args)
redis.commands.Commands.script_flush(self,sync_type='SYNC')
redis.commands.Commands.script_kill(self)
redis.commands.Commands.script_load(self,script)
redis.commands.Commands.sdiff(self,keys,*args)
redis.commands.Commands.sdiffstore(self,dest,keys,*args)
redis.commands.Commands.set(self,name,value,ex=None,px=None,nx=False,xx=False,keepttl=False,get=False,exat=None,pxat=None)
redis.commands.Commands.setbit(self,name,offset,value)
redis.commands.Commands.setex(self,name,time,value)
redis.commands.Commands.setnx(self,name,value)
redis.commands.Commands.setrange(self,name,offset,value)
redis.commands.Commands.shutdown(self,save=False,nosave=False)
redis.commands.Commands.sinter(self,keys,*args)
redis.commands.Commands.sinterstore(self,dest,keys,*args)
redis.commands.Commands.sismember(self,name,value)
redis.commands.Commands.slaveof(self,host=None,port=None)
redis.commands.Commands.slowlog_get(self,num=None)
redis.commands.Commands.slowlog_len(self)
redis.commands.Commands.slowlog_reset(self)
redis.commands.Commands.smembers(self,name)
redis.commands.Commands.smove(self,src,dst,value)
redis.commands.Commands.sort(self,name,start=None,num=None,by=None,get=None,desc=False,alpha=False,store=None,groups=False)
redis.commands.Commands.spop(self,name,count=None)
redis.commands.Commands.srandmember(self,name,number=None)
redis.commands.Commands.srem(self,name,*values)
redis.commands.Commands.sscan(self,name,cursor=0,match=None,count=None)
redis.commands.Commands.sscan_iter(self,name,match=None,count=None)
redis.commands.Commands.stralgo(self,algo,value1,value2,specific_argument='strings',len=False,idx=False,minmatchlen=None,withmatchlen=False)
redis.commands.Commands.strlen(self,name)
redis.commands.Commands.substr(self,name,start,end=-1)
redis.commands.Commands.sunion(self,keys,*args)
redis.commands.Commands.sunionstore(self,dest,keys,*args)
redis.commands.Commands.swapdb(self,first,second)
redis.commands.Commands.time(self)
redis.commands.Commands.touch(self,*args)
redis.commands.Commands.ttl(self,name)
redis.commands.Commands.type(self,name)
redis.commands.Commands.unlink(self,*names)
redis.commands.Commands.unwatch(self)
redis.commands.Commands.wait(self,num_replicas,timeout)
redis.commands.Commands.watch(self,*names)
redis.commands.Commands.xack(self,name,groupname,*ids)
redis.commands.Commands.xadd(self,name,fields,id='*',maxlen=None,approximate=True,nomkstream=False,minid=None,limit=None)
redis.commands.Commands.xautoclaim(self,name,groupname,consumername,min_idle_time,start_id=0,count=None,justid=False)
redis.commands.Commands.xclaim(self,name,groupname,consumername,min_idle_time,message_ids,idle=None,time=None,retrycount=None,force=False,justid=False)
redis.commands.Commands.xdel(self,name,*ids)
redis.commands.Commands.xgroup_create(self,name,groupname,id='$',mkstream=False)
redis.commands.Commands.xgroup_createconsumer(self,name,groupname,consumername)
redis.commands.Commands.xgroup_delconsumer(self,name,groupname,consumername)
redis.commands.Commands.xgroup_destroy(self,name,groupname)
redis.commands.Commands.xgroup_setid(self,name,groupname,id)
redis.commands.Commands.xinfo_consumers(self,name,groupname)
redis.commands.Commands.xinfo_groups(self,name)
redis.commands.Commands.xinfo_stream(self,name)
redis.commands.Commands.xlen(self,name)
redis.commands.Commands.xpending(self,name,groupname)
redis.commands.Commands.xpending_range(self,name,groupname,min,max,count,consumername=None,idle=None)
redis.commands.Commands.xrange(self,name,min='-',max='+',count=None)
redis.commands.Commands.xread(self,streams,count=None,block=None)
redis.commands.Commands.xreadgroup(self,groupname,consumername,streams,count=None,block=None,noack=False)
redis.commands.Commands.xrevrange(self,name,max='+',min='-',count=None)
redis.commands.Commands.xtrim(self,name,maxlen=None,approximate=True,minid=None,limit=None)
redis.commands.Commands.zadd(self,name,mapping,nx=False,xx=False,ch=False,incr=False,gt=None,lt=None)
redis.commands.Commands.zcard(self,name)
redis.commands.Commands.zcount(self,name,min,max)
redis.commands.Commands.zdiff(self,keys,withscores=False)
redis.commands.Commands.zdiffstore(self,dest,keys)
redis.commands.Commands.zincrby(self,name,amount,value)
redis.commands.Commands.zinter(self,keys,aggregate=None,withscores=False)
redis.commands.Commands.zinterstore(self,dest,keys,aggregate=None)
redis.commands.Commands.zlexcount(self,name,min,max)
redis.commands.Commands.zmscore(self,key,members)
redis.commands.Commands.zpopmax(self,name,count=None)
redis.commands.Commands.zpopmin(self,name,count=None)
redis.commands.Commands.zrandmember(self,key,count=None,withscores=False)
redis.commands.Commands.zrange(self,name,start,end,desc=False,withscores=False,score_cast_func=float)
redis.commands.Commands.zrangebylex(self,name,min,max,start=None,num=None)
redis.commands.Commands.zrangebyscore(self,name,min,max,start=None,num=None,withscores=False,score_cast_func=float)
redis.commands.Commands.zrangestore(self,dest,name,start,end)
redis.commands.Commands.zrank(self,name,value)
redis.commands.Commands.zrem(self,name,*values)
redis.commands.Commands.zremrangebylex(self,name,min,max)
redis.commands.Commands.zremrangebyrank(self,name,min,max)
redis.commands.Commands.zremrangebyscore(self,name,min,max)
redis.commands.Commands.zrevrange(self,name,start,end,withscores=False,score_cast_func=float)
redis.commands.Commands.zrevrangebylex(self,name,max,min,start=None,num=None)
redis.commands.Commands.zrevrangebyscore(self,name,max,min,start=None,num=None,withscores=False,score_cast_func=float)
redis.commands.Commands.zrevrank(self,name,value)
redis.commands.Commands.zscan(self,name,cursor=0,match=None,count=None,score_cast_func=float)
redis.commands.Commands.zscan_iter(self,name,match=None,count=None,score_cast_func=float)
redis.commands.Commands.zscore(self,name,value)
redis.commands.Commands.zunion(self,keys,aggregate=None,withscores=False)
redis.commands.Commands.zunionstore(self,dest,keys,aggregate=None)
redis.commands.Script(self,registered_client,script)
redis.commands.Script.__init__(self,registered_client,script)
redis.commands.SentinelCommands
redis.commands.SentinelCommands.sentinel(self,*args)
redis.commands.SentinelCommands.sentinel_ckquorum(self,new_master_name)
redis.commands.SentinelCommands.sentinel_failover(self,new_master_name)
redis.commands.SentinelCommands.sentinel_flushconfig(self)
redis.commands.SentinelCommands.sentinel_get_master_addr_by_name(self,service_name)
redis.commands.SentinelCommands.sentinel_master(self,service_name)
redis.commands.SentinelCommands.sentinel_masters(self)
redis.commands.SentinelCommands.sentinel_monitor(self,name,ip,port,quorum)
redis.commands.SentinelCommands.sentinel_remove(self,name)
redis.commands.SentinelCommands.sentinel_reset(self,pattern)
redis.commands.SentinelCommands.sentinel_sentinels(self,service_name)
redis.commands.SentinelCommands.sentinel_set(self,name,option,value)
redis.commands.SentinelCommands.sentinel_slaves(self,service_name)
redis.commands.list_or_args(keys,args)


----------------------------------------/home/zhang/Packages/redis/redis4.0.0b1/connection.py----------------------------------------
A:redis.connection.NONBLOCKING_EXCEPTIONS->tuple(NONBLOCKING_EXCEPTION_ERROR_NUMBERS.keys())
A:redis.connection.hiredis_version->Version(hiredis.__version__)
A:redis.connection.SENTINEL->object()
A:redis.connection.value->unquote(value[0])
A:redis.connection.exception_class->exception_class.get(response, ResponseError).get(response, ResponseError)
A:redis.connection.self._buffer->bytearray(socket_read_size)
A:redis.connection.data->buf.readline()
A:redis.connection.data_length->len(data)
A:redis.connection.allowed->NONBLOCKING_EXCEPTION_ERROR_NUMBERS.get(ex.__class__, -1)
A:redis.connection.raw->self._buffer.readline()
A:redis.connection.response->self._parser.read_response()
A:redis.connection.error->self.parse_error(response)
A:redis.connection.length->int(response)
A:redis.connection.self._reader->hiredis.Reader(**kwargs)
A:redis.connection.self._next_response->self._reader.gets()
A:redis.connection.bufflen->self._sock.recv_into(self._buffer)
A:redis.connection.buffer->self._sock.recv(self.socket_read_size)
A:redis.connection.response[0]->self.parse_error(response[0].args[0])
A:redis.connection.self.pid->os.getpid()
A:redis.connection.self.port->int(port)
A:redis.connection.self.retry->Retry(NoBackoff(), 0)
A:redis.connection.self.encoder->Encoder(encoding, encoding_errors, decode_responses)
A:redis.connection.self._parser->parser_class(socket_read_size=socket_read_size)
A:redis.connection.repr_args->','.join(['%s=%s' % (k, v) for (k, v) in self.repr_pieces()])
A:redis.connection.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:redis.connection.auth_response->self.read_response()
A:redis.connection.buff->SYM_EMPTY.join((buff, SYM_DOLLAR, str(arg_length).encode(), SYM_CRLF, arg, SYM_CRLF))
A:redis.connection.arg_length->len(arg)
A:redis.connection.chunklen->len(chunk)
A:redis.connection.context->ssl.create_default_context()
A:redis.connection.url->urlparse(url)
A:redis.connection.parser->URL_QUERY_ARGUMENT_PARSERS.get(name)
A:redis.connection.kwargs[name]->parser(value)
A:redis.connection.kwargs['username']->unquote(url.username)
A:redis.connection.kwargs['password']->unquote(url.password)
A:redis.connection.kwargs['path']->unquote(url.path)
A:redis.connection.kwargs['host']->unquote(url.hostname)
A:redis.connection.kwargs['port']->int(url.port)
A:redis.connection.kwargs['db']->int(unquote(url.path).replace('/', ''))
A:redis.connection.url_options->parse_url(url)
A:redis.connection.self._fork_lock->threading.Lock()
A:redis.connection.self._lock->threading.Lock()
A:redis.connection.self._in_use_connections->set()
A:redis.connection.acquired->self._fork_lock.acquire(timeout=5)
A:redis.connection.connection->self.make_connection()
A:redis.connection.connections->chain(self._available_connections, self._in_use_connections)
A:redis.connection.self.pool->self.queue_class(self.max_connections)
redis.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.BlockingConnectionPool.disconnect(self)
redis.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.BlockingConnectionPool.make_connection(self)
redis.BlockingConnectionPool.release(self,connection)
redis.BlockingConnectionPool.reset(self)
redis.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None)
redis.Connection.__del__(self)
redis.Connection.__repr__(self)
redis.Connection._connect(self)
redis.Connection._error_message(self,exception)
redis.Connection._ping_failed(self,error)
redis.Connection._send_ping(self)
redis.Connection.can_read(self,timeout=0)
redis.Connection.check_health(self)
redis.Connection.clear_connect_callbacks(self)
redis.Connection.connect(self)
redis.Connection.disconnect(self)
redis.Connection.on_connect(self)
redis.Connection.pack_command(self,*args)
redis.Connection.pack_commands(self,commands)
redis.Connection.read_response(self)
redis.Connection.register_connect_callback(self,callback)
redis.Connection.repr_pieces(self)
redis.Connection.send_command(self,*args,**kwargs)
redis.Connection.send_packed_command(self,command,check_health=True)
redis.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.ConnectionPool.__repr__(self)
redis.ConnectionPool._checkpid(self)
redis.ConnectionPool.disconnect(self,inuse_connections=True)
redis.ConnectionPool.from_url(cls,url,**kwargs)
redis.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.ConnectionPool.get_encoder(self)
redis.ConnectionPool.make_connection(self)
redis.ConnectionPool.owns_connection(self,connection)
redis.ConnectionPool.release(self,connection)
redis.ConnectionPool.reset(self)
redis.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.SSLConnection._connect(self)
redis.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None)
redis.UnixDomainSocketConnection._connect(self)
redis.UnixDomainSocketConnection._error_message(self,exception)
redis.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.BaseParser
redis.connection.BaseParser.parse_error(self,response)
redis.connection.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.__init__(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.disconnect(self)
redis.connection.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.BlockingConnectionPool.make_connection(self)
redis.connection.BlockingConnectionPool.release(self,connection)
redis.connection.BlockingConnectionPool.reset(self)
redis.connection.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None)
redis.connection.Connection.__del__(self)
redis.connection.Connection.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None)
redis.connection.Connection.__repr__(self)
redis.connection.Connection._connect(self)
redis.connection.Connection._error_message(self,exception)
redis.connection.Connection._ping_failed(self,error)
redis.connection.Connection._send_ping(self)
redis.connection.Connection.can_read(self,timeout=0)
redis.connection.Connection.check_health(self)
redis.connection.Connection.clear_connect_callbacks(self)
redis.connection.Connection.connect(self)
redis.connection.Connection.disconnect(self)
redis.connection.Connection.on_connect(self)
redis.connection.Connection.pack_command(self,*args)
redis.connection.Connection.pack_commands(self,commands)
redis.connection.Connection.read_response(self)
redis.connection.Connection.register_connect_callback(self,callback)
redis.connection.Connection.repr_pieces(self)
redis.connection.Connection.send_command(self,*args,**kwargs)
redis.connection.Connection.send_packed_command(self,command,check_health=True)
redis.connection.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__init__(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__repr__(self)
redis.connection.ConnectionPool._checkpid(self)
redis.connection.ConnectionPool.disconnect(self,inuse_connections=True)
redis.connection.ConnectionPool.from_url(cls,url,**kwargs)
redis.connection.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.ConnectionPool.get_encoder(self)
redis.connection.ConnectionPool.make_connection(self)
redis.connection.ConnectionPool.owns_connection(self,connection)
redis.connection.ConnectionPool.release(self,connection)
redis.connection.ConnectionPool.reset(self)
redis.connection.Encoder(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.__init__(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.decode(self,value,force=False)
redis.connection.Encoder.encode(self,value)
redis.connection.HiredisParser(self,socket_read_size)
redis.connection.HiredisParser.__del__(self)
redis.connection.HiredisParser.__init__(self,socket_read_size)
redis.connection.HiredisParser.can_read(self,timeout)
redis.connection.HiredisParser.on_connect(self,connection)
redis.connection.HiredisParser.on_disconnect(self)
redis.connection.HiredisParser.read_from_socket(self,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.HiredisParser.read_response(self)
redis.connection.PythonParser(self,socket_read_size)
redis.connection.PythonParser.__del__(self)
redis.connection.PythonParser.__init__(self,socket_read_size)
redis.connection.PythonParser.can_read(self,timeout)
redis.connection.PythonParser.on_connect(self,connection)
redis.connection.PythonParser.on_disconnect(self)
redis.connection.PythonParser.read_response(self)
redis.connection.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.connection.SSLConnection.__init__(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.connection.SSLConnection._connect(self)
redis.connection.SocketBuffer(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer.__init__(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer._read_from_socket(self,length=None,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.SocketBuffer.can_read(self,timeout)
redis.connection.SocketBuffer.close(self)
redis.connection.SocketBuffer.length(self)
redis.connection.SocketBuffer.purge(self)
redis.connection.SocketBuffer.read(self,length)
redis.connection.SocketBuffer.readline(self)
redis.connection.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None)
redis.connection.UnixDomainSocketConnection.__init__(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None)
redis.connection.UnixDomainSocketConnection._connect(self)
redis.connection.UnixDomainSocketConnection._error_message(self,exception)
redis.connection.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.parse_url(url)
redis.connection.to_bool(value)

