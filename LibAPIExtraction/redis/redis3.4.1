
----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/__init__.py----------------------------------------
A:redis.__init__.VERSION->tuple(map(int_or_str, __version__.split('.')))
redis.__init__.int_or_str(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/lock.py----------------------------------------
A:redis.lock.self.thread_local->bool(thread_local)
A:redis.lock.cls.lua_release->client.register_script(cls.LUA_RELEASE_SCRIPT)
A:redis.lock.cls.lua_extend->client.register_script(cls.LUA_EXTEND_SCRIPT)
A:redis.lock.cls.lua_reacquire->client.register_script(cls.LUA_REACQUIRE_SCRIPT)
A:redis.lock.token->self.redis.connection_pool.get_encoder().encode(token)
A:redis.lock.encoder->self.redis.connection_pool.get_encoder()
A:redis.lock.timeout->int(self.timeout * 1000)
A:redis.lock.stored_token->self.redis.connection_pool.get_encoder().encode(stored_token)
A:redis.lock.additional_time->int(additional_time * 1000)
redis.lock.Lock(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.__enter__(self)
redis.lock.Lock.__exit__(self,exc_type,exc_value,traceback)
redis.lock.Lock.__init__(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.acquire(self,blocking=None,blocking_timeout=None,token=None)
redis.lock.Lock.do_acquire(self,token)
redis.lock.Lock.do_extend(self,additional_time)
redis.lock.Lock.do_reacquire(self)
redis.lock.Lock.do_release(self,expected_token)
redis.lock.Lock.extend(self,additional_time)
redis.lock.Lock.locked(self)
redis.lock.Lock.owned(self)
redis.lock.Lock.reacquire(self)
redis.lock.Lock.register_scripts(self)
redis.lock.Lock.release(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/client.py----------------------------------------
A:redis.client.keys->list_or_args(keys, None)
A:redis.client.response->self.parse_response(connection, '_')
A:redis.client.data->pairs_to_dict(response, decode_keys=True)
A:redis.client.response[field]->int(response[field])
A:redis.client.(k, v)->item.rsplit('=', 1)
A:redis.client.sub_dict[k]->get_value(v)
A:redis.client.(key, value)->line.rsplit(':', 1)
A:redis.client.info[key]->get_value(value)
A:redis.client.result->Redis.parse_response(self, connection, command_name, **options)
A:redis.client.flags->set(result['flags'].split(','))
A:redis.client.state->parse_sentinel_state(imap(nativestr, item))
A:redis.client.it->iter(r)
A:redis.client.value->self.get(name)
A:redis.client.score_cast_func->options.get('score_cast_func', float)
A:redis.client.line_items->line.split(' ')
A:redis.client.raw_lines->self.parse_response(connection, '_').splitlines()
A:redis.client.data['flags']->list(map(nativestr, data['flags']))
A:redis.client.data['passwords']->list(map(nativestr, data['passwords']))
A:redis.client.data['commands']->nativestr(data['commands'])
A:redis.client.RESPONSE_CALLBACKS->dict_merge(string_keys_to_dict('AUTH EXPIRE EXPIREAT HEXISTS HMSET MOVE MSETNX PERSIST PSETEX RENAMENX SISMEMBER SMOVE SETEX SETNX', bool), string_keys_to_dict('BITCOUNT BITPOS DECRBY DEL EXISTS GEOADD GETBIT HDEL HLEN HSTRLEN INCRBY LINSERT LLEN LPUSHX PFADD PFCOUNT RPUSHX SADD SCARD SDIFFSTORE SETBIT SETRANGE SINTERSTORE SREM STRLEN SUNIONSTORE UNLINK XACK XDEL XLEN XTRIM ZCARD ZLEXCOUNT ZREM ZREMRANGEBYLEX ZREMRANGEBYRANK ZREMRANGEBYSCORE', int), string_keys_to_dict('INCRBYFLOAT HINCRBYFLOAT', float), string_keys_to_dict('LPUSH RPUSH', lambda r: isinstance(r, (long, int)) and r or nativestr(r) == 'OK'), string_keys_to_dict('SORT', sort_return_tuples), string_keys_to_dict('ZSCORE ZINCRBY GEODIST', float_or_none), string_keys_to_dict('FLUSHALL FLUSHDB LSET LTRIM MSET PFMERGE READONLY READWRITE RENAME SAVE SELECT SHUTDOWN SLAVEOF SWAPDB WATCH UNWATCH ', bool_ok), string_keys_to_dict('BLPOP BRPOP', lambda r: r and tuple(r) or None), string_keys_to_dict('SDIFF SINTER SMEMBERS SUNION', lambda r: r and set(r) or set()), string_keys_to_dict('ZPOPMAX ZPOPMIN ZRANGE ZRANGEBYSCORE ZREVRANGE ZREVRANGEBYSCORE', zset_score_pairs), string_keys_to_dict('BZPOPMIN BZPOPMAX', lambda r: r and (r[0], r[1], float(r[2])) or None), string_keys_to_dict('ZRANK ZREVRANK', int_or_none), string_keys_to_dict('XREVRANGE XRANGE', parse_stream_list), string_keys_to_dict('XREAD XREADGROUP', parse_xread), string_keys_to_dict('BGREWRITEAOF BGSAVE', lambda r: True), {'ACL CAT': lambda r: list(map(nativestr, r)), 'ACL DELUSER': int, 'ACL GENPASS': nativestr, 'ACL GETUSER': parse_acl_getuser, 'ACL LIST': lambda r: list(map(nativestr, r)), 'ACL LOAD': bool_ok, 'ACL SAVE': bool_ok, 'ACL SETUSER': bool_ok, 'ACL USERS': lambda r: list(map(nativestr, r)), 'ACL WHOAMI': nativestr, 'CLIENT GETNAME': lambda r: r and nativestr(r), 'CLIENT ID': int, 'CLIENT KILL': parse_client_kill, 'CLIENT LIST': parse_client_list, 'CLIENT SETNAME': bool_ok, 'CLIENT UNBLOCK': lambda r: r and int(r) == 1 or False, 'CLIENT PAUSE': bool_ok, 'CLUSTER ADDSLOTS': bool_ok, 'CLUSTER COUNT-FAILURE-REPORTS': lambda x: int(x), 'CLUSTER COUNTKEYSINSLOT': lambda x: int(x), 'CLUSTER DELSLOTS': bool_ok, 'CLUSTER FAILOVER': bool_ok, 'CLUSTER FORGET': bool_ok, 'CLUSTER INFO': parse_cluster_info, 'CLUSTER KEYSLOT': lambda x: int(x), 'CLUSTER MEET': bool_ok, 'CLUSTER NODES': parse_cluster_nodes, 'CLUSTER REPLICATE': bool_ok, 'CLUSTER RESET': bool_ok, 'CLUSTER SAVECONFIG': bool_ok, 'CLUSTER SET-CONFIG-EPOCH': bool_ok, 'CLUSTER SETSLOT': bool_ok, 'CLUSTER SLAVES': parse_cluster_nodes, 'CONFIG GET': parse_config_get, 'CONFIG RESETSTAT': bool_ok, 'CONFIG SET': bool_ok, 'DEBUG OBJECT': parse_debug_object, 'GEOHASH': lambda r: list(map(nativestr_or_none, r)), 'GEOPOS': lambda r: list(map(lambda ll: (float(ll[0]), float(ll[1])) if ll is not None else None, r)), 'GEORADIUS': parse_georadius_generic, 'GEORADIUSBYMEMBER': parse_georadius_generic, 'HGETALL': lambda r: r and pairs_to_dict(r) or {}, 'HSCAN': parse_hscan, 'INFO': parse_info, 'LASTSAVE': timestamp_to_datetime, 'MEMORY PURGE': bool_ok, 'MEMORY USAGE': int_or_none, 'OBJECT': parse_object, 'PING': lambda r: nativestr(r) == 'PONG', 'PUBSUB NUMSUB': parse_pubsub_numsub, 'RANDOMKEY': lambda r: r and r or None, 'SCAN': parse_scan, 'SCRIPT EXISTS': lambda r: list(imap(bool, r)), 'SCRIPT FLUSH': bool_ok, 'SCRIPT KILL': bool_ok, 'SCRIPT LOAD': nativestr, 'SENTINEL GET-MASTER-ADDR-BY-NAME': parse_sentinel_get_master, 'SENTINEL MASTER': parse_sentinel_master, 'SENTINEL MASTERS': parse_sentinel_masters, 'SENTINEL MONITOR': bool_ok, 'SENTINEL REMOVE': bool_ok, 'SENTINEL SENTINELS': parse_sentinel_slaves_and_sentinels, 'SENTINEL SET': bool_ok, 'SENTINEL SLAVES': parse_sentinel_slaves_and_sentinels, 'SET': lambda r: r and nativestr(r) == 'OK', 'SLOWLOG GET': parse_slowlog_get, 'SLOWLOG LEN': int, 'SLOWLOG RESET': bool_ok, 'SSCAN': parse_scan, 'TIME': lambda x: (int(x[0]), int(x[1])), 'XCLAIM': parse_xclaim, 'XGROUP CREATE': bool_ok, 'XGROUP DELCONSUMER': int, 'XGROUP DESTROY': bool, 'XGROUP SETID': bool_ok, 'XINFO CONSUMERS': parse_list_of_dicts, 'XINFO GROUPS': parse_list_of_dicts, 'XINFO STREAM': parse_xinfo_stream, 'XPENDING': parse_xpending, 'ZADD': parse_zadd, 'ZSCAN': parse_zscan})
A:redis.client.connection_pool->ConnectionPool(**kwargs)
A:redis.client.self.connection->self.connection_pool.get_connection('pubsub', self.shard_hint)
A:redis.client.self.response_callbacks->CaseInsensitiveDict(self.__class__.RESPONSE_CALLBACKS)
A:redis.client.shard_hint->kwargs.pop('shard_hint', None)
A:redis.client.value_from_callable->kwargs.pop('value_from_callable', False)
A:redis.client.watch_delay->kwargs.pop('watch_delay', None)
A:redis.client.func_value->func(pipe)
A:redis.client.exec_value->pipe.execute()
A:redis.client.encoder->registered_client.connection_pool.get_encoder()
A:redis.client.passwords->list_or_args(passwords, [])
A:redis.client.password->registered_client.connection_pool.get_encoder().encode(password)
A:redis.client.hashed_passwords->list_or_args(hashed_passwords, [])
A:redis.client.hashed_password->registered_client.connection_pool.get_encoder().encode(hashed_password)
A:redis.client.category->registered_client.connection_pool.get_encoder().encode(category)
A:redis.client.cmd->' '.join(imap(safe_unicode, command))
A:redis.client.key->registered_client.connection_pool.get_encoder().encode(key)
A:redis.client.decode_responses->self.connection_pool.connection_kwargs.get('decode_responses', False)
A:redis.client.time->int(time.total_seconds())
A:redis.client.when->int(mod_time.mktime(when.timetuple()))
A:redis.client.args->list_or_args(args[0], args[1:])
A:redis.client.ms->int(when.microsecond / 1000)
A:redis.client.time_ms->int(time_ms.total_seconds() * 1000)
A:redis.client.ex->int(ex.total_seconds())
A:redis.client.px->int(px.total_seconds() * 1000)
A:redis.client.(cursor, data)->self.zscan(name, cursor=cursor, match=match, count=count, score_cast_func=score_cast_func)
A:redis.client.(keys, values)->izip(*iteritems(streams))
A:redis.client.pieces->list(args)
A:redis.client.monitor_re->re.compile('\\[(\\d+) (.*)\\] (.*)')
A:redis.client.command_re->re.compile('"(.*?)(?<!\\\\)"')
A:redis.client.(command_time, command_data)->self.parse_response(connection, '_').split(' ', 1)
A:redis.client.m->self.monitor_re.match(command_data)
A:redis.client.(db_id, client_info, command)->self.monitor_re.match(command_data).groups()
A:redis.client.command->command.replace('\\"', '"').replace('\\\\', '\\').replace('\\"', '"').replace('\\\\', '\\')
A:redis.client.(client_address, client_port)->client_info.rsplit(':', 1)
A:redis.client.self.encoder->self.connection_pool.get_encoder()
A:redis.client.self.pending_unsubscribe_channels->set()
A:redis.client.self.pending_unsubscribe_patterns->set()
A:redis.client.new_patterns->self._normalize_keys(new_patterns)
A:redis.client.ret_val->self.execute_command('SUBSCRIBE', *iterkeys(new_channels))
A:redis.client.patterns->self._normalize_keys(dict.fromkeys(args))
A:redis.client.new_channels->self._normalize_keys(new_channels)
A:redis.client.channels->self._normalize_keys(dict.fromkeys(args))
A:redis.client.message_type->nativestr(response[0])
A:redis.client.handler->self.channels.get(message['channel'], None)
A:redis.client.thread->PubSubWorkerThread(self, sleep_time, daemon=daemon)
A:redis.client.self._running->threading.Event()
A:redis.client.self.scripts->set()
A:redis.client.conn->self.connection_pool.get_connection('MULTI', self.shard_hint)
A:redis.client.cmds->chain([(('MULTI',), {})], commands, [(('EXEC',), {})])
A:redis.client.all_cmds->connection.pack_commands([args for (args, _) in commands])
A:redis.client.r->self.response_callbacks[command_name](r, **options)
A:redis.client.scripts->list(self.scripts)
A:redis.client.exists->immediate('SCRIPT EXISTS', *shas)
A:redis.client.s.sha->immediate('SCRIPT LOAD', s.script)
A:redis.client.script->registered_client.connection_pool.get_encoder().encode(script)
A:redis.client.self.sha->client.script_load(self.script)
A:redis.client.overflow->overflow.upper().upper()
redis.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None)
redis.Redis.__del__(self)
redis.Redis.__delitem__(self,name)
redis.Redis.__enter__(self)
redis.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.Redis.__getitem__(self,name)
redis.Redis.__repr__(self)
redis.Redis.__setitem__(self,name,value)
redis.Redis._georadiusgeneric(self,command,*args,**kwargs)
redis.Redis._zaggregate(self,command,dest,keys,aggregate=None)
redis.Redis.acl_cat(self,category=None)
redis.Redis.acl_deluser(self,username)
redis.Redis.acl_genpass(self)
redis.Redis.acl_getuser(self,username)
redis.Redis.acl_list(self)
redis.Redis.acl_load(self)
redis.Redis.acl_save(self)
redis.Redis.acl_setuser(self,username,enabled=False,nopass=False,passwords=None,hashed_passwords=None,categories=None,commands=None,keys=None,reset=False,reset_keys=False,reset_passwords=False)
redis.Redis.acl_users(self)
redis.Redis.acl_whoami(self)
redis.Redis.append(self,key,value)
redis.Redis.bgrewriteaof(self)
redis.Redis.bgsave(self)
redis.Redis.bitcount(self,key,start=None,end=None)
redis.Redis.bitfield(self,key,default_overflow=None)
redis.Redis.bitop(self,operation,dest,*keys)
redis.Redis.bitpos(self,key,bit,start=None,end=None)
redis.Redis.blpop(self,keys,timeout=0)
redis.Redis.brpop(self,keys,timeout=0)
redis.Redis.brpoplpush(self,src,dst,timeout=0)
redis.Redis.bzpopmax(self,keys,timeout=0)
redis.Redis.bzpopmin(self,keys,timeout=0)
redis.Redis.client(self)
redis.Redis.client_getname(self)
redis.Redis.client_id(self)
redis.Redis.client_kill(self,address)
redis.Redis.client_kill_filter(self,_id=None,_type=None,addr=None,skipme=None)
redis.Redis.client_list(self,_type=None)
redis.Redis.client_pause(self,timeout)
redis.Redis.client_setname(self,name)
redis.Redis.client_unblock(self,client_id,error=False)
redis.Redis.close(self)
redis.Redis.cluster(self,cluster_arg,*args)
redis.Redis.config_get(self,pattern='*')
redis.Redis.config_resetstat(self)
redis.Redis.config_rewrite(self)
redis.Redis.config_set(self,name,value)
redis.Redis.dbsize(self)
redis.Redis.debug_object(self,key)
redis.Redis.decr(self,name,amount=1)
redis.Redis.decrby(self,name,amount=1)
redis.Redis.delete(self,*names)
redis.Redis.dump(self,name)
redis.Redis.echo(self,value)
redis.Redis.eval(self,script,numkeys,*keys_and_args)
redis.Redis.evalsha(self,sha,numkeys,*keys_and_args)
redis.Redis.execute_command(self,*args,**options)
redis.Redis.exists(self,*names)
redis.Redis.expire(self,name,time)
redis.Redis.expireat(self,name,when)
redis.Redis.flushall(self,asynchronous=False)
redis.Redis.flushdb(self,asynchronous=False)
redis.Redis.from_url(cls,url,db=None,**kwargs)
redis.Redis.geoadd(self,name,*values)
redis.Redis.geodist(self,name,place1,place2,unit=None)
redis.Redis.geohash(self,name,*values)
redis.Redis.geopos(self,name,*values)
redis.Redis.georadius(self,name,longitude,latitude,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None)
redis.Redis.georadiusbymember(self,name,member,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None)
redis.Redis.get(self,name)
redis.Redis.getbit(self,name,offset)
redis.Redis.getrange(self,key,start,end)
redis.Redis.getset(self,name,value)
redis.Redis.hdel(self,name,*keys)
redis.Redis.hexists(self,name,key)
redis.Redis.hget(self,name,key)
redis.Redis.hgetall(self,name)
redis.Redis.hincrby(self,name,key,amount=1)
redis.Redis.hincrbyfloat(self,name,key,amount=1.0)
redis.Redis.hkeys(self,name)
redis.Redis.hlen(self,name)
redis.Redis.hmget(self,name,keys,*args)
redis.Redis.hmset(self,name,mapping)
redis.Redis.hscan(self,name,cursor=0,match=None,count=None)
redis.Redis.hscan_iter(self,name,match=None,count=None)
redis.Redis.hset(self,name,key,value)
redis.Redis.hsetnx(self,name,key,value)
redis.Redis.hstrlen(self,name,key)
redis.Redis.hvals(self,name)
redis.Redis.incr(self,name,amount=1)
redis.Redis.incrby(self,name,amount=1)
redis.Redis.incrbyfloat(self,name,amount=1.0)
redis.Redis.info(self,section=None)
redis.Redis.keys(self,pattern='*')
redis.Redis.lastsave(self)
redis.Redis.lindex(self,name,index)
redis.Redis.linsert(self,name,where,refvalue,value)
redis.Redis.llen(self,name)
redis.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.Redis.lpop(self,name)
redis.Redis.lpush(self,name,*values)
redis.Redis.lpushx(self,name,value)
redis.Redis.lrange(self,name,start,end)
redis.Redis.lrem(self,name,count,value)
redis.Redis.lset(self,name,index,value)
redis.Redis.ltrim(self,name,start,end)
redis.Redis.memory_purge(self)
redis.Redis.memory_usage(self,key,samples=None)
redis.Redis.mget(self,keys,*args)
redis.Redis.migrate(self,host,port,keys,destination_db,timeout,copy=False,replace=False,auth=None)
redis.Redis.monitor(self)
redis.Redis.move(self,name,db)
redis.Redis.mset(self,mapping)
redis.Redis.msetnx(self,mapping)
redis.Redis.object(self,infotype,key)
redis.Redis.parse_response(self,connection,command_name,**options)
redis.Redis.persist(self,name)
redis.Redis.pexpire(self,name,time)
redis.Redis.pexpireat(self,name,when)
redis.Redis.pfadd(self,name,*values)
redis.Redis.pfcount(self,*sources)
redis.Redis.pfmerge(self,dest,*sources)
redis.Redis.ping(self)
redis.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.Redis.psetex(self,name,time_ms,value)
redis.Redis.pttl(self,name)
redis.Redis.publish(self,channel,message)
redis.Redis.pubsub(self,**kwargs)
redis.Redis.pubsub_channels(self,pattern='*')
redis.Redis.pubsub_numpat(self)
redis.Redis.pubsub_numsub(self,*args)
redis.Redis.randomkey(self)
redis.Redis.readonly(self)
redis.Redis.readwrite(self)
redis.Redis.register_script(self,script)
redis.Redis.rename(self,src,dst)
redis.Redis.renamenx(self,src,dst)
redis.Redis.restore(self,name,ttl,value,replace=False)
redis.Redis.rpop(self,name)
redis.Redis.rpoplpush(self,src,dst)
redis.Redis.rpush(self,name,*values)
redis.Redis.rpushx(self,name,value)
redis.Redis.sadd(self,name,*values)
redis.Redis.save(self)
redis.Redis.scan(self,cursor=0,match=None,count=None,_type=None)
redis.Redis.scan_iter(self,match=None,count=None,_type=None)
redis.Redis.scard(self,name)
redis.Redis.script_exists(self,*args)
redis.Redis.script_flush(self)
redis.Redis.script_kill(self)
redis.Redis.script_load(self,script)
redis.Redis.sdiff(self,keys,*args)
redis.Redis.sdiffstore(self,dest,keys,*args)
redis.Redis.sentinel(self,*args)
redis.Redis.sentinel_get_master_addr_by_name(self,service_name)
redis.Redis.sentinel_master(self,service_name)
redis.Redis.sentinel_masters(self)
redis.Redis.sentinel_monitor(self,name,ip,port,quorum)
redis.Redis.sentinel_remove(self,name)
redis.Redis.sentinel_sentinels(self,service_name)
redis.Redis.sentinel_set(self,name,option,value)
redis.Redis.sentinel_slaves(self,service_name)
redis.Redis.set(self,name,value,ex=None,px=None,nx=False,xx=False)
redis.Redis.set_response_callback(self,command,callback)
redis.Redis.setbit(self,name,offset,value)
redis.Redis.setex(self,name,time,value)
redis.Redis.setnx(self,name,value)
redis.Redis.setrange(self,name,offset,value)
redis.Redis.shutdown(self,save=False,nosave=False)
redis.Redis.sinter(self,keys,*args)
redis.Redis.sinterstore(self,dest,keys,*args)
redis.Redis.sismember(self,name,value)
redis.Redis.slaveof(self,host=None,port=None)
redis.Redis.slowlog_get(self,num=None)
redis.Redis.slowlog_len(self)
redis.Redis.slowlog_reset(self)
redis.Redis.smembers(self,name)
redis.Redis.smove(self,src,dst,value)
redis.Redis.sort(self,name,start=None,num=None,by=None,get=None,desc=False,alpha=False,store=None,groups=False)
redis.Redis.spop(self,name,count=None)
redis.Redis.srandmember(self,name,number=None)
redis.Redis.srem(self,name,*values)
redis.Redis.sscan(self,name,cursor=0,match=None,count=None)
redis.Redis.sscan_iter(self,name,match=None,count=None)
redis.Redis.strlen(self,name)
redis.Redis.substr(self,name,start,end=-1)
redis.Redis.sunion(self,keys,*args)
redis.Redis.sunionstore(self,dest,keys,*args)
redis.Redis.swapdb(self,first,second)
redis.Redis.time(self)
redis.Redis.touch(self,*args)
redis.Redis.transaction(self,func,*watches,**kwargs)
redis.Redis.ttl(self,name)
redis.Redis.type(self,name)
redis.Redis.unlink(self,*names)
redis.Redis.unwatch(self)
redis.Redis.wait(self,num_replicas,timeout)
redis.Redis.watch(self,*names)
redis.Redis.xack(self,name,groupname,*ids)
redis.Redis.xadd(self,name,fields,id='*',maxlen=None,approximate=True)
redis.Redis.xclaim(self,name,groupname,consumername,min_idle_time,message_ids,idle=None,time=None,retrycount=None,force=False,justid=False)
redis.Redis.xdel(self,name,*ids)
redis.Redis.xgroup_create(self,name,groupname,id='$',mkstream=False)
redis.Redis.xgroup_delconsumer(self,name,groupname,consumername)
redis.Redis.xgroup_destroy(self,name,groupname)
redis.Redis.xgroup_setid(self,name,groupname,id)
redis.Redis.xinfo_consumers(self,name,groupname)
redis.Redis.xinfo_groups(self,name)
redis.Redis.xinfo_stream(self,name)
redis.Redis.xlen(self,name)
redis.Redis.xpending(self,name,groupname)
redis.Redis.xpending_range(self,name,groupname,min,max,count,consumername=None)
redis.Redis.xrange(self,name,min='-',max='+',count=None)
redis.Redis.xread(self,streams,count=None,block=None)
redis.Redis.xreadgroup(self,groupname,consumername,streams,count=None,block=None,noack=False)
redis.Redis.xrevrange(self,name,max='+',min='-',count=None)
redis.Redis.xtrim(self,name,maxlen,approximate=True)
redis.Redis.zadd(self,name,mapping,nx=False,xx=False,ch=False,incr=False)
redis.Redis.zcard(self,name)
redis.Redis.zcount(self,name,min,max)
redis.Redis.zincrby(self,name,amount,value)
redis.Redis.zinterstore(self,dest,keys,aggregate=None)
redis.Redis.zlexcount(self,name,min,max)
redis.Redis.zpopmax(self,name,count=None)
redis.Redis.zpopmin(self,name,count=None)
redis.Redis.zrange(self,name,start,end,desc=False,withscores=False,score_cast_func=float)
redis.Redis.zrangebylex(self,name,min,max,start=None,num=None)
redis.Redis.zrangebyscore(self,name,min,max,start=None,num=None,withscores=False,score_cast_func=float)
redis.Redis.zrank(self,name,value)
redis.Redis.zrem(self,name,*values)
redis.Redis.zremrangebylex(self,name,min,max)
redis.Redis.zremrangebyrank(self,name,min,max)
redis.Redis.zremrangebyscore(self,name,min,max)
redis.Redis.zrevrange(self,name,start,end,withscores=False,score_cast_func=float)
redis.Redis.zrevrangebylex(self,name,max,min,start=None,num=None)
redis.Redis.zrevrangebyscore(self,name,max,min,start=None,num=None,withscores=False,score_cast_func=float)
redis.Redis.zrevrank(self,name,value)
redis.Redis.zscan(self,name,cursor=0,match=None,count=None,score_cast_func=float)
redis.Redis.zscan_iter(self,name,match=None,count=None,score_cast_func=float)
redis.Redis.zscore(self,name,value)
redis.Redis.zunionstore(self,dest,keys,aggregate=None)
redis.client.BitFieldOperation(self,client,key,default_overflow=None)
redis.client.BitFieldOperation.__init__(self,client,key,default_overflow=None)
redis.client.BitFieldOperation.command(self)
redis.client.BitFieldOperation.execute(self)
redis.client.BitFieldOperation.get(self,fmt,offset)
redis.client.BitFieldOperation.incrby(self,fmt,offset,increment,overflow=None)
redis.client.BitFieldOperation.overflow(self,overflow)
redis.client.BitFieldOperation.reset(self)
redis.client.BitFieldOperation.set(self,fmt,offset,value)
redis.client.CaseInsensitiveDict(self,data)
redis.client.CaseInsensitiveDict.__contains__(self,k)
redis.client.CaseInsensitiveDict.__delitem__(self,k)
redis.client.CaseInsensitiveDict.__getitem__(self,k)
redis.client.CaseInsensitiveDict.__init__(self,data)
redis.client.CaseInsensitiveDict.__setitem__(self,k,v)
redis.client.CaseInsensitiveDict.get(self,k,default=None)
redis.client.CaseInsensitiveDict.update(self,data)
redis.client.Monitor(self,connection_pool)
redis.client.Monitor.__enter__(self)
redis.client.Monitor.__exit__(self,*args)
redis.client.Monitor.__init__(self,connection_pool)
redis.client.Monitor.listen(self)
redis.client.Monitor.next_command(self)
redis.client.Pipeline(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__bool__(self)
redis.client.Pipeline.__del__(self)
redis.client.Pipeline.__enter__(self)
redis.client.Pipeline.__exit__(self,exc_type,exc_value,traceback)
redis.client.Pipeline.__init__(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__len__(self)
redis.client.Pipeline.__nonzero__(self)
redis.client.Pipeline._execute_pipeline(self,connection,commands,raise_on_error)
redis.client.Pipeline._execute_transaction(self,connection,commands,raise_on_error)
redis.client.Pipeline.annotate_exception(self,exception,number,command)
redis.client.Pipeline.execute(self,raise_on_error=True)
redis.client.Pipeline.execute_command(self,*args,**kwargs)
redis.client.Pipeline.immediate_execute_command(self,*args,**options)
redis.client.Pipeline.load_scripts(self)
redis.client.Pipeline.multi(self)
redis.client.Pipeline.parse_response(self,connection,command_name,**options)
redis.client.Pipeline.pipeline_execute_command(self,*args,**options)
redis.client.Pipeline.raise_first_error(self,commands,response)
redis.client.Pipeline.reset(self)
redis.client.Pipeline.unwatch(self)
redis.client.Pipeline.watch(self,*names)
redis.client.PubSub(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False)
redis.client.PubSub.__del__(self)
redis.client.PubSub.__enter__(self)
redis.client.PubSub.__exit__(self,exc_type,exc_value,traceback)
redis.client.PubSub.__init__(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False)
redis.client.PubSub._execute(self,connection,command,*args,**kwargs)
redis.client.PubSub._normalize_keys(self,data)
redis.client.PubSub.check_health(self)
redis.client.PubSub.close(self)
redis.client.PubSub.execute_command(self,*args)
redis.client.PubSub.get_message(self,ignore_subscribe_messages=False,timeout=0)
redis.client.PubSub.handle_message(self,response,ignore_subscribe_messages=False)
redis.client.PubSub.listen(self)
redis.client.PubSub.on_connect(self,connection)
redis.client.PubSub.parse_response(self,block=True,timeout=0)
redis.client.PubSub.ping(self,message=None)
redis.client.PubSub.psubscribe(self,*args,**kwargs)
redis.client.PubSub.punsubscribe(self,*args)
redis.client.PubSub.reset(self)
redis.client.PubSub.run_in_thread(self,sleep_time=0,daemon=False)
redis.client.PubSub.subscribe(self,*args,**kwargs)
redis.client.PubSub.subscribed(self)
redis.client.PubSub.unsubscribe(self,*args)
redis.client.PubSubWorkerThread(self,pubsub,sleep_time,daemon=False)
redis.client.PubSubWorkerThread.__init__(self,pubsub,sleep_time,daemon=False)
redis.client.PubSubWorkerThread.run(self)
redis.client.PubSubWorkerThread.stop(self)
redis.client.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None)
redis.client.Redis.__del__(self)
redis.client.Redis.__delitem__(self,name)
redis.client.Redis.__enter__(self)
redis.client.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.client.Redis.__getitem__(self,name)
redis.client.Redis.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None)
redis.client.Redis.__repr__(self)
redis.client.Redis.__setitem__(self,name,value)
redis.client.Redis._georadiusgeneric(self,command,*args,**kwargs)
redis.client.Redis._zaggregate(self,command,dest,keys,aggregate=None)
redis.client.Redis.acl_cat(self,category=None)
redis.client.Redis.acl_deluser(self,username)
redis.client.Redis.acl_genpass(self)
redis.client.Redis.acl_getuser(self,username)
redis.client.Redis.acl_list(self)
redis.client.Redis.acl_load(self)
redis.client.Redis.acl_save(self)
redis.client.Redis.acl_setuser(self,username,enabled=False,nopass=False,passwords=None,hashed_passwords=None,categories=None,commands=None,keys=None,reset=False,reset_keys=False,reset_passwords=False)
redis.client.Redis.acl_users(self)
redis.client.Redis.acl_whoami(self)
redis.client.Redis.append(self,key,value)
redis.client.Redis.bgrewriteaof(self)
redis.client.Redis.bgsave(self)
redis.client.Redis.bitcount(self,key,start=None,end=None)
redis.client.Redis.bitfield(self,key,default_overflow=None)
redis.client.Redis.bitop(self,operation,dest,*keys)
redis.client.Redis.bitpos(self,key,bit,start=None,end=None)
redis.client.Redis.blpop(self,keys,timeout=0)
redis.client.Redis.brpop(self,keys,timeout=0)
redis.client.Redis.brpoplpush(self,src,dst,timeout=0)
redis.client.Redis.bzpopmax(self,keys,timeout=0)
redis.client.Redis.bzpopmin(self,keys,timeout=0)
redis.client.Redis.client(self)
redis.client.Redis.client_getname(self)
redis.client.Redis.client_id(self)
redis.client.Redis.client_kill(self,address)
redis.client.Redis.client_kill_filter(self,_id=None,_type=None,addr=None,skipme=None)
redis.client.Redis.client_list(self,_type=None)
redis.client.Redis.client_pause(self,timeout)
redis.client.Redis.client_setname(self,name)
redis.client.Redis.client_unblock(self,client_id,error=False)
redis.client.Redis.close(self)
redis.client.Redis.cluster(self,cluster_arg,*args)
redis.client.Redis.config_get(self,pattern='*')
redis.client.Redis.config_resetstat(self)
redis.client.Redis.config_rewrite(self)
redis.client.Redis.config_set(self,name,value)
redis.client.Redis.dbsize(self)
redis.client.Redis.debug_object(self,key)
redis.client.Redis.decr(self,name,amount=1)
redis.client.Redis.decrby(self,name,amount=1)
redis.client.Redis.delete(self,*names)
redis.client.Redis.dump(self,name)
redis.client.Redis.echo(self,value)
redis.client.Redis.eval(self,script,numkeys,*keys_and_args)
redis.client.Redis.evalsha(self,sha,numkeys,*keys_and_args)
redis.client.Redis.execute_command(self,*args,**options)
redis.client.Redis.exists(self,*names)
redis.client.Redis.expire(self,name,time)
redis.client.Redis.expireat(self,name,when)
redis.client.Redis.flushall(self,asynchronous=False)
redis.client.Redis.flushdb(self,asynchronous=False)
redis.client.Redis.from_url(cls,url,db=None,**kwargs)
redis.client.Redis.geoadd(self,name,*values)
redis.client.Redis.geodist(self,name,place1,place2,unit=None)
redis.client.Redis.geohash(self,name,*values)
redis.client.Redis.geopos(self,name,*values)
redis.client.Redis.georadius(self,name,longitude,latitude,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None)
redis.client.Redis.georadiusbymember(self,name,member,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None)
redis.client.Redis.get(self,name)
redis.client.Redis.getbit(self,name,offset)
redis.client.Redis.getrange(self,key,start,end)
redis.client.Redis.getset(self,name,value)
redis.client.Redis.hdel(self,name,*keys)
redis.client.Redis.hexists(self,name,key)
redis.client.Redis.hget(self,name,key)
redis.client.Redis.hgetall(self,name)
redis.client.Redis.hincrby(self,name,key,amount=1)
redis.client.Redis.hincrbyfloat(self,name,key,amount=1.0)
redis.client.Redis.hkeys(self,name)
redis.client.Redis.hlen(self,name)
redis.client.Redis.hmget(self,name,keys,*args)
redis.client.Redis.hmset(self,name,mapping)
redis.client.Redis.hscan(self,name,cursor=0,match=None,count=None)
redis.client.Redis.hscan_iter(self,name,match=None,count=None)
redis.client.Redis.hset(self,name,key,value)
redis.client.Redis.hsetnx(self,name,key,value)
redis.client.Redis.hstrlen(self,name,key)
redis.client.Redis.hvals(self,name)
redis.client.Redis.incr(self,name,amount=1)
redis.client.Redis.incrby(self,name,amount=1)
redis.client.Redis.incrbyfloat(self,name,amount=1.0)
redis.client.Redis.info(self,section=None)
redis.client.Redis.keys(self,pattern='*')
redis.client.Redis.lastsave(self)
redis.client.Redis.lindex(self,name,index)
redis.client.Redis.linsert(self,name,where,refvalue,value)
redis.client.Redis.llen(self,name)
redis.client.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.client.Redis.lpop(self,name)
redis.client.Redis.lpush(self,name,*values)
redis.client.Redis.lpushx(self,name,value)
redis.client.Redis.lrange(self,name,start,end)
redis.client.Redis.lrem(self,name,count,value)
redis.client.Redis.lset(self,name,index,value)
redis.client.Redis.ltrim(self,name,start,end)
redis.client.Redis.memory_purge(self)
redis.client.Redis.memory_usage(self,key,samples=None)
redis.client.Redis.mget(self,keys,*args)
redis.client.Redis.migrate(self,host,port,keys,destination_db,timeout,copy=False,replace=False,auth=None)
redis.client.Redis.monitor(self)
redis.client.Redis.move(self,name,db)
redis.client.Redis.mset(self,mapping)
redis.client.Redis.msetnx(self,mapping)
redis.client.Redis.object(self,infotype,key)
redis.client.Redis.parse_response(self,connection,command_name,**options)
redis.client.Redis.persist(self,name)
redis.client.Redis.pexpire(self,name,time)
redis.client.Redis.pexpireat(self,name,when)
redis.client.Redis.pfadd(self,name,*values)
redis.client.Redis.pfcount(self,*sources)
redis.client.Redis.pfmerge(self,dest,*sources)
redis.client.Redis.ping(self)
redis.client.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.client.Redis.psetex(self,name,time_ms,value)
redis.client.Redis.pttl(self,name)
redis.client.Redis.publish(self,channel,message)
redis.client.Redis.pubsub(self,**kwargs)
redis.client.Redis.pubsub_channels(self,pattern='*')
redis.client.Redis.pubsub_numpat(self)
redis.client.Redis.pubsub_numsub(self,*args)
redis.client.Redis.randomkey(self)
redis.client.Redis.readonly(self)
redis.client.Redis.readwrite(self)
redis.client.Redis.register_script(self,script)
redis.client.Redis.rename(self,src,dst)
redis.client.Redis.renamenx(self,src,dst)
redis.client.Redis.restore(self,name,ttl,value,replace=False)
redis.client.Redis.rpop(self,name)
redis.client.Redis.rpoplpush(self,src,dst)
redis.client.Redis.rpush(self,name,*values)
redis.client.Redis.rpushx(self,name,value)
redis.client.Redis.sadd(self,name,*values)
redis.client.Redis.save(self)
redis.client.Redis.scan(self,cursor=0,match=None,count=None,_type=None)
redis.client.Redis.scan_iter(self,match=None,count=None,_type=None)
redis.client.Redis.scard(self,name)
redis.client.Redis.script_exists(self,*args)
redis.client.Redis.script_flush(self)
redis.client.Redis.script_kill(self)
redis.client.Redis.script_load(self,script)
redis.client.Redis.sdiff(self,keys,*args)
redis.client.Redis.sdiffstore(self,dest,keys,*args)
redis.client.Redis.sentinel(self,*args)
redis.client.Redis.sentinel_get_master_addr_by_name(self,service_name)
redis.client.Redis.sentinel_master(self,service_name)
redis.client.Redis.sentinel_masters(self)
redis.client.Redis.sentinel_monitor(self,name,ip,port,quorum)
redis.client.Redis.sentinel_remove(self,name)
redis.client.Redis.sentinel_sentinels(self,service_name)
redis.client.Redis.sentinel_set(self,name,option,value)
redis.client.Redis.sentinel_slaves(self,service_name)
redis.client.Redis.set(self,name,value,ex=None,px=None,nx=False,xx=False)
redis.client.Redis.set_response_callback(self,command,callback)
redis.client.Redis.setbit(self,name,offset,value)
redis.client.Redis.setex(self,name,time,value)
redis.client.Redis.setnx(self,name,value)
redis.client.Redis.setrange(self,name,offset,value)
redis.client.Redis.shutdown(self,save=False,nosave=False)
redis.client.Redis.sinter(self,keys,*args)
redis.client.Redis.sinterstore(self,dest,keys,*args)
redis.client.Redis.sismember(self,name,value)
redis.client.Redis.slaveof(self,host=None,port=None)
redis.client.Redis.slowlog_get(self,num=None)
redis.client.Redis.slowlog_len(self)
redis.client.Redis.slowlog_reset(self)
redis.client.Redis.smembers(self,name)
redis.client.Redis.smove(self,src,dst,value)
redis.client.Redis.sort(self,name,start=None,num=None,by=None,get=None,desc=False,alpha=False,store=None,groups=False)
redis.client.Redis.spop(self,name,count=None)
redis.client.Redis.srandmember(self,name,number=None)
redis.client.Redis.srem(self,name,*values)
redis.client.Redis.sscan(self,name,cursor=0,match=None,count=None)
redis.client.Redis.sscan_iter(self,name,match=None,count=None)
redis.client.Redis.strlen(self,name)
redis.client.Redis.substr(self,name,start,end=-1)
redis.client.Redis.sunion(self,keys,*args)
redis.client.Redis.sunionstore(self,dest,keys,*args)
redis.client.Redis.swapdb(self,first,second)
redis.client.Redis.time(self)
redis.client.Redis.touch(self,*args)
redis.client.Redis.transaction(self,func,*watches,**kwargs)
redis.client.Redis.ttl(self,name)
redis.client.Redis.type(self,name)
redis.client.Redis.unlink(self,*names)
redis.client.Redis.unwatch(self)
redis.client.Redis.wait(self,num_replicas,timeout)
redis.client.Redis.watch(self,*names)
redis.client.Redis.xack(self,name,groupname,*ids)
redis.client.Redis.xadd(self,name,fields,id='*',maxlen=None,approximate=True)
redis.client.Redis.xclaim(self,name,groupname,consumername,min_idle_time,message_ids,idle=None,time=None,retrycount=None,force=False,justid=False)
redis.client.Redis.xdel(self,name,*ids)
redis.client.Redis.xgroup_create(self,name,groupname,id='$',mkstream=False)
redis.client.Redis.xgroup_delconsumer(self,name,groupname,consumername)
redis.client.Redis.xgroup_destroy(self,name,groupname)
redis.client.Redis.xgroup_setid(self,name,groupname,id)
redis.client.Redis.xinfo_consumers(self,name,groupname)
redis.client.Redis.xinfo_groups(self,name)
redis.client.Redis.xinfo_stream(self,name)
redis.client.Redis.xlen(self,name)
redis.client.Redis.xpending(self,name,groupname)
redis.client.Redis.xpending_range(self,name,groupname,min,max,count,consumername=None)
redis.client.Redis.xrange(self,name,min='-',max='+',count=None)
redis.client.Redis.xread(self,streams,count=None,block=None)
redis.client.Redis.xreadgroup(self,groupname,consumername,streams,count=None,block=None,noack=False)
redis.client.Redis.xrevrange(self,name,max='+',min='-',count=None)
redis.client.Redis.xtrim(self,name,maxlen,approximate=True)
redis.client.Redis.zadd(self,name,mapping,nx=False,xx=False,ch=False,incr=False)
redis.client.Redis.zcard(self,name)
redis.client.Redis.zcount(self,name,min,max)
redis.client.Redis.zincrby(self,name,amount,value)
redis.client.Redis.zinterstore(self,dest,keys,aggregate=None)
redis.client.Redis.zlexcount(self,name,min,max)
redis.client.Redis.zpopmax(self,name,count=None)
redis.client.Redis.zpopmin(self,name,count=None)
redis.client.Redis.zrange(self,name,start,end,desc=False,withscores=False,score_cast_func=float)
redis.client.Redis.zrangebylex(self,name,min,max,start=None,num=None)
redis.client.Redis.zrangebyscore(self,name,min,max,start=None,num=None,withscores=False,score_cast_func=float)
redis.client.Redis.zrank(self,name,value)
redis.client.Redis.zrem(self,name,*values)
redis.client.Redis.zremrangebylex(self,name,min,max)
redis.client.Redis.zremrangebyrank(self,name,min,max)
redis.client.Redis.zremrangebyscore(self,name,min,max)
redis.client.Redis.zrevrange(self,name,start,end,withscores=False,score_cast_func=float)
redis.client.Redis.zrevrangebylex(self,name,max,min,start=None,num=None)
redis.client.Redis.zrevrangebyscore(self,name,max,min,start=None,num=None,withscores=False,score_cast_func=float)
redis.client.Redis.zrevrank(self,name,value)
redis.client.Redis.zscan(self,name,cursor=0,match=None,count=None,score_cast_func=float)
redis.client.Redis.zscan_iter(self,name,match=None,count=None,score_cast_func=float)
redis.client.Redis.zscore(self,name,value)
redis.client.Redis.zunionstore(self,dest,keys,aggregate=None)
redis.client.Script(self,registered_client,script)
redis.client.Script.__init__(self,registered_client,script)
redis.client._parse_node_line(line)
redis.client.bool_ok(response)
redis.client.dict_merge(*dicts)
redis.client.float_or_none(response)
redis.client.int_or_none(response)
redis.client.list_or_args(keys,args)
redis.client.nativestr_or_none(response)
redis.client.pairs_to_dict(response,decode_keys=False)
redis.client.pairs_to_dict_typed(response,type_info)
redis.client.pairs_to_dict_with_nativestr_keys(response)
redis.client.parse_acl_getuser(response,**options)
redis.client.parse_client_kill(response,**options)
redis.client.parse_client_list(response,**options)
redis.client.parse_cluster_info(response,**options)
redis.client.parse_cluster_nodes(response,**options)
redis.client.parse_config_get(response,**options)
redis.client.parse_debug_object(response)
redis.client.parse_georadius_generic(response,**options)
redis.client.parse_hscan(response,**options)
redis.client.parse_info(response)
redis.client.parse_list_of_dicts(response)
redis.client.parse_object(response,infotype)
redis.client.parse_pubsub_numsub(response,**options)
redis.client.parse_scan(response,**options)
redis.client.parse_sentinel_get_master(response)
redis.client.parse_sentinel_master(response)
redis.client.parse_sentinel_masters(response)
redis.client.parse_sentinel_slaves_and_sentinels(response)
redis.client.parse_sentinel_state(item)
redis.client.parse_slowlog_get(response,**options)
redis.client.parse_stream_list(response)
redis.client.parse_xclaim(response,**options)
redis.client.parse_xinfo_stream(response)
redis.client.parse_xpending(response,**options)
redis.client.parse_xpending_range(response)
redis.client.parse_xread(response)
redis.client.parse_zadd(response,**options)
redis.client.parse_zscan(response,**options)
redis.client.sort_return_tuples(response,**options)
redis.client.string_keys_to_dict(key_string,callback)
redis.client.timestamp_to_datetime(response)
redis.client.zset_score_pairs(response,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/utils.py----------------------------------------
A:redis.utils.p->redis_obj.pipeline()
redis.from_url(url,db=None,**kwargs)
redis.utils.dummy(object)
redis.utils.from_url(url,db=None,**kwargs)
redis.utils.pipeline(redis_obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/exceptions.py----------------------------------------
redis.AuthenticationError(ConnectionError)
redis.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.BusyLoadingError(ConnectionError)
redis.ChildDeadlockedError(Exception)
redis.ConnectionError(RedisError)
redis.DataError(RedisError)
redis.InvalidResponse(RedisError)
redis.PubSubError(RedisError)
redis.ReadOnlyError(ResponseError)
redis.RedisError(Exception)
redis.ResponseError(RedisError)
redis.TimeoutError(RedisError)
redis.WatchError(RedisError)
redis.exceptions.AuthenticationError(ConnectionError)
redis.exceptions.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.exceptions.BusyLoadingError(ConnectionError)
redis.exceptions.ChildDeadlockedError(Exception)
redis.exceptions.ConnectionError(RedisError)
redis.exceptions.DataError(RedisError)
redis.exceptions.ExecAbortError(ResponseError)
redis.exceptions.InvalidResponse(RedisError)
redis.exceptions.LockError(RedisError,ValueError)
redis.exceptions.LockNotOwnedError(LockError)
redis.exceptions.NoPermissionError(ResponseError)
redis.exceptions.NoScriptError(ResponseError)
redis.exceptions.PubSubError(RedisError)
redis.exceptions.ReadOnlyError(ResponseError)
redis.exceptions.RedisError(Exception)
redis.exceptions.ResponseError(RedisError)
redis.exceptions.TimeoutError(RedisError)
redis.exceptions.WatchError(RedisError)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/_compat.py----------------------------------------
A:redis._compat.timeout->s.gettimeout()
A:redis._compat.now->time.time()
A:redis._compat.recv->_handle_ssl_timeout(recv)
A:redis._compat.recv_into->_handle_ssl_timeout(recv_into)
A:redis._compat.sendall->_handle_ssl_timeout(sendall)
A:redis._compat.shutdown->_handle_ssl_timeout(shutdown)
A:redis._compat.ssl_wrap_socket->_handle_ssl_timeout(ssl_wrap_socket)
A:redis._compat.ascii_text->str(obj).encode('string_escape')
redis._compat.sendall(sock,*args,**kwargs)
redis._compat.shutdown(sock,*args,**kwargs)
redis._compat.ssl_wrap_socket(context,sock,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/sentinel.py----------------------------------------
A:redis.sentinel.self.connection_pool->kwargs.pop('connection_pool')
A:redis.sentinel.kwargs['connection_class']->kwargs.get('connection_class', SentinelManagedConnection)
A:redis.sentinel.self.is_master->kwargs.pop('is_master', True)
A:redis.sentinel.self.check_connection->kwargs.pop('check_connection', False)
A:redis.sentinel.self.connection_kwargs['connection_pool']->weakref.proxy(self)
A:redis.sentinel.master_address->self.sentinel_manager.discover_master(self.service_name)
A:redis.sentinel.slaves->self.filter_slaves(slaves)
A:redis.sentinel.self.slave_rr_counter->random.randint(0, len(slaves) - 1)
A:redis.sentinel.masters->sentinel.sentinel_masters()
A:redis.sentinel.state->sentinel.sentinel_masters().get(service_name)
A:redis.sentinel.connection_kwargs->dict(self.connection_kwargs)
redis.sentinel.MasterNotFoundError(ConnectionError)
redis.sentinel.Sentinel(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__init__(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__repr__(self)
redis.sentinel.Sentinel.check_master_state(self,state,service_name)
redis.sentinel.Sentinel.discover_master(self,service_name)
redis.sentinel.Sentinel.discover_slaves(self,service_name)
redis.sentinel.Sentinel.filter_slaves(self,slaves)
redis.sentinel.Sentinel.master_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.Sentinel.slave_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.SentinelConnectionPool(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__init__(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__repr__(self)
redis.sentinel.SentinelConnectionPool.get_master_address(self)
redis.sentinel.SentinelConnectionPool.reset(self)
redis.sentinel.SentinelConnectionPool.rotate_slaves(self)
redis.sentinel.SentinelManagedConnection(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__init__(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__repr__(self)
redis.sentinel.SentinelManagedConnection.connect(self)
redis.sentinel.SentinelManagedConnection.connect_to(self,address)
redis.sentinel.SentinelManagedConnection.read_response(self)
redis.sentinel.SlaveNotFoundError(ConnectionError)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis3.4.1/lib/python3.6/site-packages/redis/connection.py----------------------------------------
A:redis.connection.NONBLOCKING_EXCEPTIONS->tuple(NONBLOCKING_EXCEPTION_ERROR_NUMBERS.keys())
A:redis.connection.hiredis_version->StrictVersion(hiredis.__version__)
A:redis.connection.SENTINEL->object()
A:redis.connection.value->value.decode(self.encoding, self.encoding_errors).decode(self.encoding, self.encoding_errors)
A:redis.connection.exception_class->exception_class.get(response, ResponseError).get(response, ResponseError)
A:redis.connection.self._buffer->bytearray(socket_read_size)
A:redis.connection.data->buf.readline()
A:redis.connection.data_length->len(data)
A:redis.connection.allowed->NONBLOCKING_EXCEPTION_ERROR_NUMBERS.get(ex.__class__, -1)
A:redis.connection.response->self._parser.read_response()
A:redis.connection.error->self.parse_error(response)
A:redis.connection.length->int(response)
A:redis.connection.self._reader->hiredis.Reader(**kwargs)
A:redis.connection.self._next_response->self._reader.gets()
A:redis.connection.bufflen->recv_into(self._sock, self._buffer)
A:redis.connection.buffer->recv(self._sock, self.socket_read_size)
A:redis.connection.response[0]->self.parse_error(response[0].args[0])
A:redis.connection.self.pid->os.getpid()
A:redis.connection.self.port->int(port)
A:redis.connection.self.encoder->Encoder(encoding, encoding_errors, decode_responses)
A:redis.connection.self._parser->parser_class(socket_read_size=socket_read_size)
A:redis.connection.repr_args->','.join(['%s=%s' % (k, v) for (k, v) in self.repr_pieces()])
A:redis.connection.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:redis.connection.auth_response->self.read_response()
A:redis.connection.buff->SYM_EMPTY.join((buff, SYM_DOLLAR, str(arg_length).encode(), SYM_CRLF, arg, SYM_CRLF))
A:redis.connection.arg_length->len(arg)
A:redis.connection.chunklen->len(chunk)
A:redis.connection.context->ssl.create_default_context()
A:redis.connection.url->urlparse(url)
A:redis.connection.parser->URL_QUERY_ARGUMENT_PARSERS.get(name)
A:redis.connection.url_options[name]->parser(value[0])
A:redis.connection.url_options['db']->int(url_options.get('db', db or 0))
A:redis.connection.valid_schemes->', '.join(('redis://', 'rediss://', 'unix://'))
A:redis.connection.kwargs['encoding']->kwargs.pop('charset')
A:redis.connection.kwargs['encoding_errors']->kwargs.pop('errors')
A:redis.connection.self._fork_lock->threading.Lock()
A:redis.connection.self._lock->threading.RLock()
A:redis.connection.self._in_use_connections->set()
A:redis.connection.acquired->self._fork_lock.acquire(False)
A:redis.connection.connection->self.make_connection()
A:redis.connection.all_conns->chain(self._available_connections, self._in_use_connections)
A:redis.connection.self.pool->self.queue_class(self.max_connections)
redis.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.BlockingConnectionPool.disconnect(self)
redis.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.BlockingConnectionPool.make_connection(self)
redis.BlockingConnectionPool.release(self,connection)
redis.BlockingConnectionPool.reset(self)
redis.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None)
redis.Connection.__del__(self)
redis.Connection.__repr__(self)
redis.Connection._connect(self)
redis.Connection._error_message(self,exception)
redis.Connection.can_read(self,timeout=0)
redis.Connection.check_health(self)
redis.Connection.clear_connect_callbacks(self)
redis.Connection.connect(self)
redis.Connection.disconnect(self)
redis.Connection.on_connect(self)
redis.Connection.pack_command(self,*args)
redis.Connection.pack_commands(self,commands)
redis.Connection.read_response(self)
redis.Connection.register_connect_callback(self,callback)
redis.Connection.repr_pieces(self)
redis.Connection.send_command(self,*args,**kwargs)
redis.Connection.send_packed_command(self,command,check_health=True)
redis.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.ConnectionPool.__repr__(self)
redis.ConnectionPool._checkpid(self)
redis.ConnectionPool.disconnect(self)
redis.ConnectionPool.from_url(cls,url,db=None,decode_components=False,**kwargs)
redis.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.ConnectionPool.get_encoder(self)
redis.ConnectionPool.make_connection(self)
redis.ConnectionPool.release(self,connection)
redis.ConnectionPool.reset(self)
redis.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.SSLConnection._connect(self)
redis.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None)
redis.UnixDomainSocketConnection._connect(self)
redis.UnixDomainSocketConnection._error_message(self,exception)
redis.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.BaseParser(object)
redis.connection.BaseParser.parse_error(self,response)
redis.connection.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.__init__(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.disconnect(self)
redis.connection.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.BlockingConnectionPool.make_connection(self)
redis.connection.BlockingConnectionPool.release(self,connection)
redis.connection.BlockingConnectionPool.reset(self)
redis.connection.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None)
redis.connection.Connection.__del__(self)
redis.connection.Connection.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None)
redis.connection.Connection.__repr__(self)
redis.connection.Connection._connect(self)
redis.connection.Connection._error_message(self,exception)
redis.connection.Connection.can_read(self,timeout=0)
redis.connection.Connection.check_health(self)
redis.connection.Connection.clear_connect_callbacks(self)
redis.connection.Connection.connect(self)
redis.connection.Connection.disconnect(self)
redis.connection.Connection.on_connect(self)
redis.connection.Connection.pack_command(self,*args)
redis.connection.Connection.pack_commands(self,commands)
redis.connection.Connection.read_response(self)
redis.connection.Connection.register_connect_callback(self,callback)
redis.connection.Connection.repr_pieces(self)
redis.connection.Connection.send_command(self,*args,**kwargs)
redis.connection.Connection.send_packed_command(self,command,check_health=True)
redis.connection.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__init__(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__repr__(self)
redis.connection.ConnectionPool._checkpid(self)
redis.connection.ConnectionPool.disconnect(self)
redis.connection.ConnectionPool.from_url(cls,url,db=None,decode_components=False,**kwargs)
redis.connection.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.ConnectionPool.get_encoder(self)
redis.connection.ConnectionPool.make_connection(self)
redis.connection.ConnectionPool.release(self,connection)
redis.connection.ConnectionPool.reset(self)
redis.connection.Encoder(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.__init__(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.decode(self,value,force=False)
redis.connection.Encoder.encode(self,value)
redis.connection.HiredisParser(self,socket_read_size)
redis.connection.HiredisParser.__del__(self)
redis.connection.HiredisParser.__init__(self,socket_read_size)
redis.connection.HiredisParser.can_read(self,timeout)
redis.connection.HiredisParser.on_connect(self,connection)
redis.connection.HiredisParser.on_disconnect(self)
redis.connection.HiredisParser.read_from_socket(self,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.HiredisParser.read_response(self)
redis.connection.PythonParser(self,socket_read_size)
redis.connection.PythonParser.__del__(self)
redis.connection.PythonParser.__init__(self,socket_read_size)
redis.connection.PythonParser.can_read(self,timeout)
redis.connection.PythonParser.on_connect(self,connection)
redis.connection.PythonParser.on_disconnect(self)
redis.connection.PythonParser.read_response(self)
redis.connection.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.connection.SSLConnection.__init__(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,**kwargs)
redis.connection.SSLConnection._connect(self)
redis.connection.SocketBuffer(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer.__init__(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer._read_from_socket(self,length=None,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.SocketBuffer.can_read(self,timeout)
redis.connection.SocketBuffer.close(self)
redis.connection.SocketBuffer.length(self)
redis.connection.SocketBuffer.purge(self)
redis.connection.SocketBuffer.read(self,length)
redis.connection.SocketBuffer.readline(self)
redis.connection.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None)
redis.connection.UnixDomainSocketConnection.__init__(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None)
redis.connection.UnixDomainSocketConnection._connect(self)
redis.connection.UnixDomainSocketConnection._error_message(self,exception)
redis.connection.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.to_bool(value)

