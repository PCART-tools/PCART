
----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/__init__.py----------------------------------------
A:redis.__init__.__version__->importlib_metadata.version('redis')
A:redis.__init__.VERSION->tuple(map(int_or_str, __version__.split('.')))
redis.__init__.int_or_str(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/retry.py----------------------------------------
A:redis.retry.self._supported_errors->tuple(set(self._supported_errors + tuple(specified_errors)))
A:redis.retry.backoff->self._backoff.compute(failures)
redis.retry.Retry(self,backoff,retries,supported_errors=(ConnectionError,TimeoutError))
redis.retry.Retry.__init__(self,backoff,retries,supported_errors=(ConnectionError,TimeoutError))
redis.retry.Retry.call_with_retry(self,do,fail)
redis.retry.Retry.update_supported_erros(self,specified_errors:list)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/lock.py----------------------------------------
A:redis.lock.self.thread_local->bool(thread_local)
A:redis.lock.cls.lua_release->client.register_script(cls.LUA_RELEASE_SCRIPT)
A:redis.lock.cls.lua_extend->client.register_script(cls.LUA_EXTEND_SCRIPT)
A:redis.lock.cls.lua_reacquire->client.register_script(cls.LUA_REACQUIRE_SCRIPT)
A:redis.lock.token->self.redis.connection_pool.get_encoder().encode(token)
A:redis.lock.encoder->self.redis.connection_pool.get_encoder()
A:redis.lock.timeout->int(self.timeout * 1000)
A:redis.lock.stored_token->self.redis.connection_pool.get_encoder().encode(stored_token)
A:redis.lock.additional_time->int(additional_time * 1000)
redis.lock.Lock(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.__enter__(self)
redis.lock.Lock.__exit__(self,exc_type,exc_value,traceback)
redis.lock.Lock.__init__(self,redis,name,timeout=None,sleep=0.1,blocking=True,blocking_timeout=None,thread_local=True)
redis.lock.Lock.acquire(self,blocking=None,blocking_timeout=None,token=None)
redis.lock.Lock.do_acquire(self,token)
redis.lock.Lock.do_extend(self,additional_time,replace_ttl)
redis.lock.Lock.do_reacquire(self)
redis.lock.Lock.do_release(self,expected_token)
redis.lock.Lock.extend(self,additional_time,replace_ttl=False)
redis.lock.Lock.locked(self)
redis.lock.Lock.owned(self)
redis.lock.Lock.reacquire(self)
redis.lock.Lock.register_scripts(self)
redis.lock.Lock.release(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/backoff.py----------------------------------------
A:redis.backoff.max_backoff->max(self._base, self._previous_backoff * 3)
A:redis.backoff.temp->random.uniform(self._base, max_backoff)
A:redis.backoff.self._previous_backoff->min(self._cap, temp)
redis.backoff.AbstractBackoff(ABC)
redis.backoff.AbstractBackoff.compute(self,failures)
redis.backoff.AbstractBackoff.reset(self)
redis.backoff.ConstantBackoff(self,backoff)
redis.backoff.ConstantBackoff.__init__(self,backoff)
redis.backoff.ConstantBackoff.compute(self,failures)
redis.backoff.DecorrelatedJitterBackoff(self,cap,base)
redis.backoff.DecorrelatedJitterBackoff.__init__(self,cap,base)
redis.backoff.DecorrelatedJitterBackoff.compute(self,failures)
redis.backoff.DecorrelatedJitterBackoff.reset(self)
redis.backoff.EqualJitterBackoff(self,cap,base)
redis.backoff.EqualJitterBackoff.__init__(self,cap,base)
redis.backoff.EqualJitterBackoff.compute(self,failures)
redis.backoff.ExponentialBackoff(self,cap,base)
redis.backoff.ExponentialBackoff.__init__(self,cap,base)
redis.backoff.ExponentialBackoff.compute(self,failures)
redis.backoff.FullJitterBackoff(self,cap,base)
redis.backoff.FullJitterBackoff.__init__(self,cap,base)
redis.backoff.FullJitterBackoff.compute(self,failures)
redis.backoff.NoBackoff(self)
redis.backoff.NoBackoff.__init__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/client.py----------------------------------------
A:redis.client.response->self.parse_response(connection, '_')
A:redis.client.data->bool_ok(response)
A:redis.client.response[field]->int(response[field])
A:redis.client.(k, v)->item.rsplit('=', 1)
A:redis.client.sub_dict[k]->get_value(v)
A:redis.client.(key, value)->info.split('=')
A:redis.client.info[key]->get_value(value)
A:redis.client.stats->pairs_to_dict(response, decode_keys=True, decode_string_values=True)
A:redis.client.stats[key]->pairs_to_dict(value, decode_keys=True, decode_string_values=True)
A:redis.client.result->Redis.parse_response(self, connection, command_name, **options)
A:redis.client.flags->set(result['flags'].split(','))
A:redis.client.state->parse_sentinel_state(map(str_if_bytes, item))
A:redis.client.keys->map(str_if_bytes, keys)
A:redis.client.values->map(str_if_bytes, values)
A:redis.client.it->iter(r)
A:redis.client.value->type_info[key](value)
A:redis.client.score_cast_func->options.get('score_cast_func', float)
A:redis.client.result['command']->space.join(item[4])
A:redis.client.line_items->line.split(' ')
A:redis.client.cmd_name->str_if_bytes(command[0])
A:redis.client.cmd_dict['arity']->int(command[1])
A:redis.client.data['flags']->list(map(str_if_bytes, data['flags']))
A:redis.client.data['passwords']->list(map(str_if_bytes, data['passwords']))
A:redis.client.data['commands']->str_if_bytes(data['commands'])
A:redis.client.log_data->pairs_to_dict(log, True, True)
A:redis.client.client_info->pairs_to_dict(log, True, True).get('client-info', '')
A:redis.client.log_data['client-info']->parse_client_info(client_info)
A:redis.client.log_data['age-seconds']->float(log_data['age-seconds'])
A:redis.client.infos->str_if_bytes(value).split(' ')
A:redis.client.client_info[int_key]->int(client_info[int_key])
A:redis.client.connection_pool->ConnectionPool(**kwargs)
A:redis.client.self.connection->self.connection_pool.get_connection('pubsub', self.shard_hint)
A:redis.client.self.response_callbacks->CaseInsensitiveDict(self.__class__.RESPONSE_CALLBACKS)
A:redis.client.shard_hint->kwargs.pop('shard_hint', None)
A:redis.client.value_from_callable->kwargs.pop('value_from_callable', False)
A:redis.client.watch_delay->kwargs.pop('watch_delay', None)
A:redis.client.func_value->func(pipe)
A:redis.client.exec_value->pipe.execute()
A:redis.client.monitor_re->re.compile('\\[(\\d+) (.*)\\] (.*)')
A:redis.client.command_re->re.compile('"(.*?)(?<!\\\\)"')
A:redis.client.(command_time, command_data)->self.parse_response(connection, '_').split(' ', 1)
A:redis.client.m->self.monitor_re.match(command_data)
A:redis.client.(db_id, client_info, command)->self.monitor_re.match(command_data).groups()
A:redis.client.command->command.replace('\\"', '"').replace('\\"', '"')
A:redis.client.(client_address, client_port)->pairs_to_dict(log, True, True).get('client-info', '').rsplit(':', 1)
A:redis.client.self.subscribed_event->threading.Event()
A:redis.client.self.encoder->self.connection_pool.get_encoder()
A:redis.client.self.health_check_response_b->self.encoder.encode(self.HEALTH_CHECK_MESSAGE)
A:redis.client.self.pending_unsubscribe_channels->set()
A:redis.client.self.pending_unsubscribe_patterns->set()
A:redis.client.args->list_or_args(args[0], args[1:])
A:redis.client.new_patterns->self._normalize_keys(new_patterns)
A:redis.client.ret_val->self.execute_command('SUBSCRIBE', *new_channels.keys())
A:redis.client.patterns->self._normalize_keys(dict.fromkeys(args))
A:redis.client.new_channels->self._normalize_keys(new_channels)
A:redis.client.channels->self._normalize_keys(dict.fromkeys(args))
A:redis.client.start_time->time.time()
A:redis.client.timeout->max(0.0, timeout - time_spent)
A:redis.client.message_type->str_if_bytes(response[0])
A:redis.client.handler->self.channels.get(message['channel'], None)
A:redis.client.thread->PubSubWorkerThread(self, sleep_time, daemon=daemon, exception_handler=exception_handler)
A:redis.client.self._running->threading.Event()
A:redis.client.self.scripts->set()
A:redis.client.conn->self.connection_pool.get_connection('MULTI', self.shard_hint)
A:redis.client.cmds->chain([(('MULTI',), {})], commands, [(('EXEC',), {})])
A:redis.client.all_cmds->connection.pack_commands([args for (args, _) in commands])
A:redis.client.r->self.response_callbacks[command_name](r, **options)
A:redis.client.cmd->' '.join(map(safe_str, command))
A:redis.client.scripts->list(self.scripts)
A:redis.client.exists->immediate('SCRIPT EXISTS', *shas)
A:redis.client.s.sha->immediate('SCRIPT LOAD', s.script)
redis.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,retry_on_error=[],ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_ca_path=None,ssl_check_hostname=False,ssl_password=None,ssl_validate_ocsp=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.Redis.__del__(self)
redis.Redis.__enter__(self)
redis.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.Redis.__repr__(self)
redis.Redis._disconnect_raise(self,conn,error)
redis.Redis._send_command_parse_response(self,conn,command_name,*args,**options)
redis.Redis.client(self)
redis.Redis.close(self)
redis.Redis.execute_command(self,*args,**options)
redis.Redis.from_url(cls,url,**kwargs)
redis.Redis.get_connection_kwargs(self)
redis.Redis.get_encoder(self)
redis.Redis.load_external_module(self,funcname,func)
redis.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.Redis.monitor(self)
redis.Redis.parse_response(self,connection,command_name,**options)
redis.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.Redis.pubsub(self,**kwargs)
redis.Redis.set_response_callback(self,command,callback)
redis.Redis.transaction(self,func,*watches,**kwargs)
redis.client.CaseInsensitiveDict(self,data)
redis.client.CaseInsensitiveDict.__contains__(self,k)
redis.client.CaseInsensitiveDict.__delitem__(self,k)
redis.client.CaseInsensitiveDict.__getitem__(self,k)
redis.client.CaseInsensitiveDict.__init__(self,data)
redis.client.CaseInsensitiveDict.__setitem__(self,k,v)
redis.client.CaseInsensitiveDict.get(self,k,default=None)
redis.client.CaseInsensitiveDict.update(self,data)
redis.client.Monitor(self,connection_pool)
redis.client.Monitor.__enter__(self)
redis.client.Monitor.__exit__(self,*args)
redis.client.Monitor.__init__(self,connection_pool)
redis.client.Monitor.listen(self)
redis.client.Monitor.next_command(self)
redis.client.Pipeline(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__bool__(self)
redis.client.Pipeline.__del__(self)
redis.client.Pipeline.__enter__(self)
redis.client.Pipeline.__exit__(self,exc_type,exc_value,traceback)
redis.client.Pipeline.__init__(self,connection_pool,response_callbacks,transaction,shard_hint)
redis.client.Pipeline.__len__(self)
redis.client.Pipeline._disconnect_raise_reset(self,conn,error)
redis.client.Pipeline._disconnect_reset_raise(self,conn,error)
redis.client.Pipeline._execute_pipeline(self,connection,commands,raise_on_error)
redis.client.Pipeline._execute_transaction(self,connection,commands,raise_on_error)
redis.client.Pipeline.annotate_exception(self,exception,number,command)
redis.client.Pipeline.discard(self)
redis.client.Pipeline.execute(self,raise_on_error=True)
redis.client.Pipeline.execute_command(self,*args,**kwargs)
redis.client.Pipeline.immediate_execute_command(self,*args,**options)
redis.client.Pipeline.load_scripts(self)
redis.client.Pipeline.multi(self)
redis.client.Pipeline.parse_response(self,connection,command_name,**options)
redis.client.Pipeline.pipeline_execute_command(self,*args,**options)
redis.client.Pipeline.raise_first_error(self,commands,response)
redis.client.Pipeline.reset(self)
redis.client.Pipeline.unwatch(self)
redis.client.Pipeline.watch(self,*names)
redis.client.PubSub(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False,encoder=None)
redis.client.PubSub.__del__(self)
redis.client.PubSub.__enter__(self)
redis.client.PubSub.__exit__(self,exc_type,exc_value,traceback)
redis.client.PubSub.__init__(self,connection_pool,shard_hint=None,ignore_subscribe_messages=False,encoder=None)
redis.client.PubSub._disconnect_raise_connect(self,conn,error)
redis.client.PubSub._execute(self,conn,command,*args,**kwargs)
redis.client.PubSub._normalize_keys(self,data)
redis.client.PubSub.check_health(self)
redis.client.PubSub.clean_health_check_responses(self)
redis.client.PubSub.close(self)
redis.client.PubSub.execute_command(self,*args)
redis.client.PubSub.get_message(self,ignore_subscribe_messages=False,timeout=0)
redis.client.PubSub.handle_message(self,response,ignore_subscribe_messages=False)
redis.client.PubSub.is_health_check_response(self,response)
redis.client.PubSub.listen(self)
redis.client.PubSub.on_connect(self,connection)
redis.client.PubSub.parse_response(self,block=True,timeout=0)
redis.client.PubSub.ping(self,message=None)
redis.client.PubSub.psubscribe(self,*args,**kwargs)
redis.client.PubSub.punsubscribe(self,*args)
redis.client.PubSub.reset(self)
redis.client.PubSub.run_in_thread(self,sleep_time=0,daemon=False,exception_handler=None)
redis.client.PubSub.subscribe(self,*args,**kwargs)
redis.client.PubSub.subscribed(self)
redis.client.PubSub.unsubscribe(self,*args)
redis.client.PubSubWorkerThread(self,pubsub,sleep_time,daemon=False,exception_handler=None)
redis.client.PubSubWorkerThread.__init__(self,pubsub,sleep_time,daemon=False,exception_handler=None)
redis.client.PubSubWorkerThread.run(self)
redis.client.PubSubWorkerThread.stop(self)
redis.client.Redis(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,retry_on_error=[],ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_ca_path=None,ssl_check_hostname=False,ssl_password=None,ssl_validate_ocsp=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.client.Redis.__del__(self)
redis.client.Redis.__enter__(self)
redis.client.Redis.__exit__(self,exc_type,exc_value,traceback)
redis.client.Redis.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=None,socket_keepalive_options=None,connection_pool=None,unix_socket_path=None,encoding='utf-8',encoding_errors='strict',charset=None,errors=None,decode_responses=False,retry_on_timeout=False,retry_on_error=[],ssl=False,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_ca_path=None,ssl_check_hostname=False,ssl_password=None,ssl_validate_ocsp=False,max_connections=None,single_connection_client=False,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.client.Redis.__repr__(self)
redis.client.Redis._disconnect_raise(self,conn,error)
redis.client.Redis._send_command_parse_response(self,conn,command_name,*args,**options)
redis.client.Redis.client(self)
redis.client.Redis.close(self)
redis.client.Redis.execute_command(self,*args,**options)
redis.client.Redis.from_url(cls,url,**kwargs)
redis.client.Redis.get_connection_kwargs(self)
redis.client.Redis.get_encoder(self)
redis.client.Redis.load_external_module(self,funcname,func)
redis.client.Redis.lock(self,name,timeout=None,sleep=0.1,blocking_timeout=None,lock_class=None,thread_local=True)
redis.client.Redis.monitor(self)
redis.client.Redis.parse_response(self,connection,command_name,**options)
redis.client.Redis.pipeline(self,transaction=True,shard_hint=None)
redis.client.Redis.pubsub(self,**kwargs)
redis.client.Redis.set_response_callback(self,command,callback)
redis.client.Redis.transaction(self,func,*watches,**kwargs)
redis.client._parse_node_line(line)
redis.client.bool_ok(response)
redis.client.float_or_none(response)
redis.client.int_or_none(response)
redis.client.pairs_to_dict(response,decode_keys=False,decode_string_values=False)
redis.client.pairs_to_dict_typed(response,type_info)
redis.client.pairs_to_dict_with_str_keys(response)
redis.client.parse_acl_getuser(response,**options)
redis.client.parse_acl_log(response,**options)
redis.client.parse_client_info(value)
redis.client.parse_client_kill(response,**options)
redis.client.parse_client_list(response,**options)
redis.client.parse_cluster_info(response,**options)
redis.client.parse_cluster_nodes(response,**options)
redis.client.parse_command(response,**options)
redis.client.parse_config_get(response,**options)
redis.client.parse_debug_object(response)
redis.client.parse_geosearch_generic(response,**options)
redis.client.parse_hscan(response,**options)
redis.client.parse_info(response)
redis.client.parse_list_of_dicts(response)
redis.client.parse_memory_stats(response,**kwargs)
redis.client.parse_module_result(response)
redis.client.parse_object(response,infotype)
redis.client.parse_pubsub_numsub(response,**options)
redis.client.parse_scan(response,**options)
redis.client.parse_sentinel_get_master(response)
redis.client.parse_sentinel_master(response)
redis.client.parse_sentinel_masters(response)
redis.client.parse_sentinel_slaves_and_sentinels(response)
redis.client.parse_sentinel_state(item)
redis.client.parse_set_result(response,**options)
redis.client.parse_slowlog_get(response,**options)
redis.client.parse_stralgo(response,**options)
redis.client.parse_stream_list(response)
redis.client.parse_xautoclaim(response,**options)
redis.client.parse_xclaim(response,**options)
redis.client.parse_xinfo_stream(response,**options)
redis.client.parse_xpending(response,**options)
redis.client.parse_xpending_range(response)
redis.client.parse_xread(response)
redis.client.parse_zadd(response,**options)
redis.client.parse_zmscore(response,**options)
redis.client.parse_zscan(response,**options)
redis.client.sort_return_tuples(response,**options)
redis.client.string_keys_to_dict(key_string,callback)
redis.client.timestamp_to_datetime(response)
redis.client.zset_score_pairs(response,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/utils.py----------------------------------------
A:redis.utils.p->redis_obj.pipeline()
A:redis.utils.result->set()
redis.from_url(url,**kwargs)
redis.utils.dict_merge(*dicts)
redis.utils.from_url(url,**kwargs)
redis.utils.list_keys_to_dict(key_list,callback)
redis.utils.merge_result(command,res)
redis.utils.pipeline(redis_obj)
redis.utils.safe_str(value)
redis.utils.str_if_bytes(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/exceptions.py----------------------------------------
A:redis.exceptions.(slot_id, new_node)->resp.split(' ')
A:redis.exceptions.(host, port)->new_node.rsplit(':', 1)
A:redis.exceptions.self.slot_id->int(slot_id)
redis.AuthenticationError(ConnectionError)
redis.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.BusyLoadingError(ConnectionError)
redis.ChildDeadlockedError(Exception)
redis.ConnectionError(RedisError)
redis.DataError(RedisError)
redis.InvalidResponse(RedisError)
redis.PubSubError(RedisError)
redis.ReadOnlyError(ResponseError)
redis.RedisError(Exception)
redis.ResponseError(RedisError)
redis.TimeoutError(RedisError)
redis.WatchError(RedisError)
redis.exceptions.AskError(self,resp)
redis.exceptions.AskError.__init__(self,resp)
redis.exceptions.AuthenticationError(ConnectionError)
redis.exceptions.AuthenticationWrongNumberOfArgsError(ResponseError)
redis.exceptions.AuthorizationError(ConnectionError)
redis.exceptions.BusyLoadingError(ConnectionError)
redis.exceptions.ChildDeadlockedError(Exception)
redis.exceptions.ClusterCrossSlotError(ResponseError)
redis.exceptions.ClusterDownError(self,resp)
redis.exceptions.ClusterDownError.__init__(self,resp)
redis.exceptions.ClusterError(RedisError)
redis.exceptions.ConnectionError(RedisError)
redis.exceptions.DataError(RedisError)
redis.exceptions.ExecAbortError(ResponseError)
redis.exceptions.InvalidResponse(RedisError)
redis.exceptions.LockError(RedisError,ValueError)
redis.exceptions.LockNotOwnedError(LockError)
redis.exceptions.MasterDownError(ClusterDownError)
redis.exceptions.ModuleError(ResponseError)
redis.exceptions.MovedError(AskError)
redis.exceptions.NoPermissionError(ResponseError)
redis.exceptions.NoScriptError(ResponseError)
redis.exceptions.PubSubError(RedisError)
redis.exceptions.ReadOnlyError(ResponseError)
redis.exceptions.RedisClusterException(Exception)
redis.exceptions.RedisError(Exception)
redis.exceptions.ResponseError(RedisError)
redis.exceptions.SlotNotCoveredError(RedisClusterException)
redis.exceptions.TimeoutError(RedisError)
redis.exceptions.TryAgainError(self,*args,**kwargs)
redis.exceptions.TryAgainError.__init__(self,*args,**kwargs)
redis.exceptions.WatchError(RedisError)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/cluster.py----------------------------------------
A:redis.cluster.log->logging.getLogger(__name__)
A:redis.cluster.numsub_d->OrderedDict()
A:redis.cluster.current_host->options.get('current_host', '')
A:redis.cluster.READ_COMMANDS->frozenset(['BITCOUNT', 'BITPOS', 'EXISTS', 'GEODIST', 'GEOHASH', 'GEOPOS', 'GEORADIUS', 'GEORADIUSBYMEMBER', 'GET', 'GETBIT', 'GETRANGE', 'HEXISTS', 'HGET', 'HGETALL', 'HKEYS', 'HLEN', 'HMGET', 'HSTRLEN', 'HVALS', 'KEYS', 'LINDEX', 'LLEN', 'LRANGE', 'MGET', 'PTTL', 'RANDOMKEY', 'SCARD', 'SDIFF', 'SINTER', 'SISMEMBER', 'SMEMBERS', 'SRANDMEMBER', 'STRLEN', 'SUNION', 'TTL', 'ZCARD', 'ZCOUNT', 'ZRANGE', 'ZSCORE'])
A:redis.cluster.EXCEPTION_CLASSES->dict_merge(DefaultParser.EXCEPTION_CLASSES, {'ASK': AskError, 'TRYAGAIN': TryAgainError, 'MOVED': MovedError, 'CLUSTERDOWN': ClusterDownError, 'CROSSSLOT': ClusterCrossSlotError, 'MASTERDOWN': MasterDownError})
A:redis.cluster.COMMAND_FLAGS->dict_merge(list_keys_to_dict(['ACL CAT', 'ACL DELUSER', 'ACL GENPASS', 'ACL GETUSER', 'ACL HELP', 'ACL LIST', 'ACL LOG', 'ACL LOAD', 'ACL SAVE', 'ACL SETUSER', 'ACL USERS', 'ACL WHOAMI', 'CLIENT LIST', 'CLIENT SETNAME', 'CLIENT GETNAME', 'CONFIG SET', 'CONFIG REWRITE', 'CONFIG RESETSTAT', 'TIME', 'PUBSUB CHANNELS', 'PUBSUB NUMPAT', 'PUBSUB NUMSUB', 'PING', 'INFO', 'SHUTDOWN', 'KEYS', 'SCAN', 'FLUSHALL', 'FLUSHDB', 'DBSIZE', 'BGSAVE', 'SLOWLOG GET', 'SLOWLOG LEN', 'SLOWLOG RESET', 'WAIT', 'SAVE', 'MEMORY PURGE', 'MEMORY MALLOC-STATS', 'MEMORY STATS', 'LASTSAVE', 'CLIENT TRACKINGINFO', 'CLIENT PAUSE', 'CLIENT UNPAUSE', 'CLIENT UNBLOCK', 'CLIENT ID', 'CLIENT REPLY', 'CLIENT GETREDIR', 'CLIENT INFO', 'CLIENT KILL', 'READONLY', 'READWRITE', 'CLUSTER INFO', 'CLUSTER MEET', 'CLUSTER NODES', 'CLUSTER REPLICAS', 'CLUSTER RESET', 'CLUSTER SET-CONFIG-EPOCH', 'CLUSTER SLOTS', 'CLUSTER COUNT-FAILURE-REPORTS', 'CLUSTER KEYSLOT', 'COMMAND', 'COMMAND COUNT', 'COMMAND GETKEYS', 'CONFIG GET', 'DEBUG', 'RANDOMKEY', 'READONLY', 'READWRITE', 'TIME'], DEFAULT_NODE), list_keys_to_dict(['CLUSTER COUNTKEYSINSLOT', 'CLUSTER DELSLOTS', 'CLUSTER GETKEYSINSLOT', 'CLUSTER SETSLOT'], SLOT_ID))
A:redis.cluster.RESULT_CALLBACKS->dict_merge(list_keys_to_dict(['PUBSUB NUMSUB'], parse_pubsub_numsub), list_keys_to_dict(['PUBSUB NUMPAT'], lambda command, res: sum(list(res.values()))), list_keys_to_dict(['KEYS', 'PUBSUB CHANNELS'], merge_result), list_keys_to_dict(['PING', 'CONFIG SET', 'CONFIG REWRITE', 'CONFIG RESETSTAT', 'CLIENT SETNAME', 'BGSAVE', 'SLOWLOG RESET', 'SAVE', 'MEMORY PURGE', 'CLIENT PAUSE', 'CLIENT UNPAUSE'], lambda command, res: all(res.values()) if isinstance(res, dict) else res), list_keys_to_dict(['DBSIZE', 'WAIT'], lambda command, res: sum(res.values()) if isinstance(res, dict) else res), list_keys_to_dict(['CLIENT UNBLOCK'], lambda command, res: 1 if sum(res.values()) > 0 else 0), list_keys_to_dict(['SCAN'], parse_scan_result))
A:redis.cluster.url_options->parse_url(url)
A:redis.cluster.host->socket.gethostbyname(host)
A:redis.cluster.port->int(primary_node[1])
A:redis.cluster.self.user_on_connect_func->cleanup_kwargs(**kwargs).pop('redis_connect_func', None)
A:redis.cluster.kwargs->cleanup_kwargs(**kwargs)
A:redis.cluster.self.encoder->Encoder(kwargs.get('encoding', 'utf-8'), kwargs.get('encoding_errors', 'strict'), kwargs.get('decode_responses', False))
A:redis.cluster.self.command_flags->self.__class__.COMMAND_FLAGS.copy()
A:redis.cluster.self.node_flags->self.__class__.NODE_FLAGS.copy()
A:redis.cluster.self.nodes_manager->NodesManager(startup_nodes=startup_nodes, from_url=from_url, require_full_coverage=require_full_coverage, skip_full_coverage_check=skip_full_coverage_check, **kwargs)
A:redis.cluster.self.cluster_response_callbacks->CaseInsensitiveDict(self.__class__.CLUSTER_COMMANDS_RESPONSE_CALLBACKS)
A:redis.cluster.self.result_callbacks->CaseInsensitiveDict(self.__class__.RESULT_CALLBACKS)
A:redis.cluster.self.commands_parser->CommandsParser(super())
A:redis.cluster.self._lock->threading.Lock()
A:redis.cluster.slot->self.determine_slot(*c.args)
A:redis.cluster.slot_cache->self.nodes_manager.slots_cache.get(slot)
A:redis.cluster.target_node->ClusterNode(host, port, PRIMARY)
A:redis.cluster.nodes_flag->cleanup_kwargs(**kwargs).pop('nodes_flag', None)
A:redis.cluster.command_flag->self.command_flags.get(command)
A:redis.cluster.node->self.nodes_manager.get_node_from_slot(slot, self.read_from_replicas and c.args[0] in READ_COMMANDS)
A:redis.cluster.k->self.encoder.encode(key)
A:redis.cluster.keys->self._get_command_keys(*args)
A:redis.cluster.nodes->self._determine_nodes(*args, **kwargs, nodes_flag=passed_targets).values()
A:redis.cluster.passed_targets->cleanup_kwargs(**kwargs).pop('target_nodes', None)
A:redis.cluster.target_nodes->self._determine_nodes(*args, **kwargs, nodes_flag=passed_targets)
A:redis.cluster.res[node.name]->self._execute_command(node, *args, **kwargs)
A:redis.cluster.ttl->int(self.RedisClusterRequestTTL)
A:redis.cluster.redis_node->self.get_redis_connection(node)
A:redis.cluster.connection->get_connection(redis_node, c.args)
A:redis.cluster.response->self.cluster_response_callbacks[command](response, **kwargs)
A:redis.cluster.redirect_addr->get_node_name(host=e.host, port=e.port)
A:redis.cluster.message->e.__str__()
A:redis.cluster.self.name->get_node_name(host, port)
A:redis.cluster.server_index->self.primary_to_idx.setdefault(primary, self.start_index)
A:redis.cluster.self.read_load_balancer->LoadBalancer()
A:redis.cluster.lock->threading.Lock()
A:redis.cluster.redirected_node->ClusterNode(e.host, e.port, PRIMARY)
A:redis.cluster.node_idx->random.randint(1, len(self.slots_cache[slot]) - 1)
A:redis.cluster.node.redis_connection->self.create_redis_node(host=node.host, port=node.port, **self.connection_kwargs)
A:redis.cluster.r->self.create_redis_node(startup_node.host, startup_node.port, **copy_kwargs)
A:redis.cluster.copy_kwargs->copy.deepcopy(kwargs)
A:redis.cluster.cluster_slots->str_if_bytes(r.execute_command('CLUSTER SLOTS'))
A:redis.cluster.target_replica_node->ClusterNode(host, port, REPLICA)
A:redis.cluster.fully_covered->self.check_slots_coverage(tmp_slots)
A:redis.cluster.redis_connection->self.cluster.get_redis_connection(node)
A:redis.cluster.self.connection->self.connection_pool.get_connection('pubsub', self.shard_hint)
A:redis.cluster.cmd->' '.join(map(safe_str, command))
A:redis.cluster.self.scripts->set()
A:redis.cluster.attempt->sorted((c for c in attempt if isinstance(c.result, ClusterPipeline.ERRORS_ALLOW_RETRY)), key=lambda x: x.position)
A:redis.cluster.nodes[node_name]->NodeCommands(redis_node.parse_response, redis_node.connection_pool, connection)
A:redis.cluster.node_commands->self._determine_nodes(*args, **kwargs, nodes_flag=passed_targets).values().values()
A:redis.cluster.c.result->self.parse_response(connection, c.args[0], **c.options)
A:redis.cluster.ClusterPipeline.bitop->block_pipeline_command(RedisCluster.bitop)
A:redis.cluster.ClusterPipeline.brpoplpush->block_pipeline_command(RedisCluster.brpoplpush)
A:redis.cluster.ClusterPipeline.client_getname->block_pipeline_command(RedisCluster.client_getname)
A:redis.cluster.ClusterPipeline.client_list->block_pipeline_command(RedisCluster.client_list)
A:redis.cluster.ClusterPipeline.client_setname->block_pipeline_command(RedisCluster.client_setname)
A:redis.cluster.ClusterPipeline.config_set->block_pipeline_command(RedisCluster.config_set)
A:redis.cluster.ClusterPipeline.dbsize->block_pipeline_command(RedisCluster.dbsize)
A:redis.cluster.ClusterPipeline.flushall->block_pipeline_command(RedisCluster.flushall)
A:redis.cluster.ClusterPipeline.flushdb->block_pipeline_command(RedisCluster.flushdb)
A:redis.cluster.ClusterPipeline.keys->block_pipeline_command(RedisCluster.keys)
A:redis.cluster.ClusterPipeline.mget->block_pipeline_command(RedisCluster.mget)
A:redis.cluster.ClusterPipeline.move->block_pipeline_command(RedisCluster.move)
A:redis.cluster.ClusterPipeline.mset->block_pipeline_command(RedisCluster.mset)
A:redis.cluster.ClusterPipeline.msetnx->block_pipeline_command(RedisCluster.msetnx)
A:redis.cluster.ClusterPipeline.pfmerge->block_pipeline_command(RedisCluster.pfmerge)
A:redis.cluster.ClusterPipeline.pfcount->block_pipeline_command(RedisCluster.pfcount)
A:redis.cluster.ClusterPipeline.ping->block_pipeline_command(RedisCluster.ping)
A:redis.cluster.ClusterPipeline.publish->block_pipeline_command(RedisCluster.publish)
A:redis.cluster.ClusterPipeline.randomkey->block_pipeline_command(RedisCluster.randomkey)
A:redis.cluster.ClusterPipeline.rename->block_pipeline_command(RedisCluster.rename)
A:redis.cluster.ClusterPipeline.renamenx->block_pipeline_command(RedisCluster.renamenx)
A:redis.cluster.ClusterPipeline.rpoplpush->block_pipeline_command(RedisCluster.rpoplpush)
A:redis.cluster.ClusterPipeline.scan->block_pipeline_command(RedisCluster.scan)
A:redis.cluster.ClusterPipeline.sdiff->block_pipeline_command(RedisCluster.sdiff)
A:redis.cluster.ClusterPipeline.sdiffstore->block_pipeline_command(RedisCluster.sdiffstore)
A:redis.cluster.ClusterPipeline.sinter->block_pipeline_command(RedisCluster.sinter)
A:redis.cluster.ClusterPipeline.sinterstore->block_pipeline_command(RedisCluster.sinterstore)
A:redis.cluster.ClusterPipeline.smove->block_pipeline_command(RedisCluster.smove)
A:redis.cluster.ClusterPipeline.sort->block_pipeline_command(RedisCluster.sort)
A:redis.cluster.ClusterPipeline.sunion->block_pipeline_command(RedisCluster.sunion)
A:redis.cluster.ClusterPipeline.sunionstore->block_pipeline_command(RedisCluster.sunionstore)
A:redis.cluster.ClusterPipeline.readwrite->block_pipeline_command(RedisCluster.readwrite)
A:redis.cluster.ClusterPipeline.readonly->block_pipeline_command(RedisCluster.readonly)
redis.RedisCluster(self,host=None,port=6379,startup_nodes=None,cluster_error_retry_attempts=3,require_full_coverage=True,skip_full_coverage_check=False,reinitialize_steps=10,read_from_replicas=False,url=None,**kwargs)
redis.RedisCluster.__del__(self)
redis.RedisCluster.__enter__(self)
redis.RedisCluster.__exit__(self,exc_type,exc_value,traceback)
redis.RedisCluster._determine_nodes(self,*args,**kwargs)
redis.RedisCluster._execute_command(self,target_node,*args,**kwargs)
redis.RedisCluster._get_command_keys(self,*args)
redis.RedisCluster._is_nodes_flag(self,target_nodes)
redis.RedisCluster._parse_target_nodes(self,target_nodes)
redis.RedisCluster._process_result(self,command,res,**kwargs)
redis.RedisCluster._should_reinitialized(self)
redis.RedisCluster.close(self)
redis.RedisCluster.determine_slot(self,*args)
redis.RedisCluster.disconnect_connection_pools(self)
redis.RedisCluster.execute_command(self,*args,**kwargs)
redis.RedisCluster.from_url(cls,url,**kwargs)
redis.RedisCluster.get_connection_kwargs(self)
redis.RedisCluster.get_default_node(self)
redis.RedisCluster.get_encoder(self)
redis.RedisCluster.get_node(self,host=None,port=None,node_name=None)
redis.RedisCluster.get_node_from_key(self,key,replica=False)
redis.RedisCluster.get_nodes(self)
redis.RedisCluster.get_primaries(self)
redis.RedisCluster.get_random_node(self)
redis.RedisCluster.get_redis_connection(self,node)
redis.RedisCluster.get_replicas(self)
redis.RedisCluster.keyslot(self,key)
redis.RedisCluster.monitor(self,target_node=None)
redis.RedisCluster.on_connect(self,connection)
redis.RedisCluster.pipeline(self,transaction=None,shard_hint=None)
redis.RedisCluster.pubsub(self,node=None,host=None,port=None,**kwargs)
redis.RedisCluster.reinitialize_caches(self)
redis.RedisCluster.set_default_node(self,node)
redis.cluster.ClusterNode(self,host,port,server_type=None,redis_connection=None)
redis.cluster.ClusterNode.__del__(self)
redis.cluster.ClusterNode.__eq__(self,obj)
redis.cluster.ClusterNode.__init__(self,host,port,server_type=None,redis_connection=None)
redis.cluster.ClusterNode.__repr__(self)
redis.cluster.ClusterParser(DefaultParser)
redis.cluster.ClusterPipeline(self,nodes_manager,result_callbacks=None,cluster_response_callbacks=None,startup_nodes=None,read_from_replicas=False,cluster_error_retry_attempts=5,reinitialize_steps=10,**kwargs)
redis.cluster.ClusterPipeline.__bool__(self)
redis.cluster.ClusterPipeline.__del__(self)
redis.cluster.ClusterPipeline.__enter__(self)
redis.cluster.ClusterPipeline.__exit__(self,exc_type,exc_value,traceback)
redis.cluster.ClusterPipeline.__init__(self,nodes_manager,result_callbacks=None,cluster_response_callbacks=None,startup_nodes=None,read_from_replicas=False,cluster_error_retry_attempts=5,reinitialize_steps=10,**kwargs)
redis.cluster.ClusterPipeline.__len__(self)
redis.cluster.ClusterPipeline.__nonzero__(self)
redis.cluster.ClusterPipeline.__repr__(self)
redis.cluster.ClusterPipeline._execute_transaction(self,*args,**kwargs)
redis.cluster.ClusterPipeline._fail_on_redirect(self,allow_redirections)
redis.cluster.ClusterPipeline._send_cluster_commands(self,stack,raise_on_error=True,allow_redirections=True)
redis.cluster.ClusterPipeline.annotate_exception(self,exception,number,command)
redis.cluster.ClusterPipeline.delete(self,*names)
redis.cluster.ClusterPipeline.eval(self)
redis.cluster.ClusterPipeline.execute(self,raise_on_error=True)
redis.cluster.ClusterPipeline.execute_command(self,*args,**kwargs)
redis.cluster.ClusterPipeline.immediate_execute_command(self,*args,**options)
redis.cluster.ClusterPipeline.load_scripts(self)
redis.cluster.ClusterPipeline.multi(self)
redis.cluster.ClusterPipeline.pipeline_execute_command(self,*args,**options)
redis.cluster.ClusterPipeline.raise_first_error(self,stack)
redis.cluster.ClusterPipeline.reset(self)
redis.cluster.ClusterPipeline.script_load_for_pipeline(self,*args,**kwargs)
redis.cluster.ClusterPipeline.send_cluster_commands(self,stack,raise_on_error=True,allow_redirections=True)
redis.cluster.ClusterPipeline.unwatch(self)
redis.cluster.ClusterPipeline.watch(self,*names)
redis.cluster.ClusterPubSub(self,redis_cluster,node=None,host=None,port=None,**kwargs)
redis.cluster.ClusterPubSub.__init__(self,redis_cluster,node=None,host=None,port=None,**kwargs)
redis.cluster.ClusterPubSub._raise_on_invalid_node(self,redis_cluster,node,host,port)
redis.cluster.ClusterPubSub.execute_command(self,*args,**kwargs)
redis.cluster.ClusterPubSub.get_pubsub_node(self)
redis.cluster.ClusterPubSub.get_redis_connection(self)
redis.cluster.ClusterPubSub.set_pubsub_node(self,cluster,node=None,host=None,port=None)
redis.cluster.LoadBalancer(self,start_index=0)
redis.cluster.LoadBalancer.__init__(self,start_index=0)
redis.cluster.LoadBalancer.get_server_index(self,primary,list_size)
redis.cluster.LoadBalancer.reset(self)
redis.cluster.NodeCommands(self,parse_response,connection_pool,connection)
redis.cluster.NodeCommands.__init__(self,parse_response,connection_pool,connection)
redis.cluster.NodeCommands.append(self,c)
redis.cluster.NodeCommands.read(self)
redis.cluster.NodeCommands.write(self)
redis.cluster.NodesManager(self,startup_nodes,from_url=False,require_full_coverage=True,skip_full_coverage_check=False,lock=None,**kwargs)
redis.cluster.NodesManager.__init__(self,startup_nodes,from_url=False,require_full_coverage=True,skip_full_coverage_check=False,lock=None,**kwargs)
redis.cluster.NodesManager._update_moved_slots(self)
redis.cluster.NodesManager.check_slots_coverage(self,slots_cache)
redis.cluster.NodesManager.close(self)
redis.cluster.NodesManager.cluster_require_full_coverage(self,cluster_nodes)
redis.cluster.NodesManager.create_redis_connections(self,nodes)
redis.cluster.NodesManager.create_redis_node(self,host,port,**kwargs)
redis.cluster.NodesManager.get_node(self,host=None,port=None,node_name=None)
redis.cluster.NodesManager.get_node_from_slot(self,slot,read_from_replicas=False,server_type=None)
redis.cluster.NodesManager.get_nodes_by_server_type(self,server_type)
redis.cluster.NodesManager.initialize(self)
redis.cluster.NodesManager.populate_startup_nodes(self,nodes)
redis.cluster.NodesManager.reset(self)
redis.cluster.NodesManager.update_moved_exception(self,exception)
redis.cluster.PipelineCommand(self,args,options=None,position=None)
redis.cluster.PipelineCommand.__init__(self,args,options=None,position=None)
redis.cluster.RedisCluster(self,host=None,port=6379,startup_nodes=None,cluster_error_retry_attempts=3,require_full_coverage=True,skip_full_coverage_check=False,reinitialize_steps=10,read_from_replicas=False,url=None,**kwargs)
redis.cluster.RedisCluster.__del__(self)
redis.cluster.RedisCluster.__enter__(self)
redis.cluster.RedisCluster.__exit__(self,exc_type,exc_value,traceback)
redis.cluster.RedisCluster.__init__(self,host=None,port=6379,startup_nodes=None,cluster_error_retry_attempts=3,require_full_coverage=True,skip_full_coverage_check=False,reinitialize_steps=10,read_from_replicas=False,url=None,**kwargs)
redis.cluster.RedisCluster._determine_nodes(self,*args,**kwargs)
redis.cluster.RedisCluster._execute_command(self,target_node,*args,**kwargs)
redis.cluster.RedisCluster._get_command_keys(self,*args)
redis.cluster.RedisCluster._is_nodes_flag(self,target_nodes)
redis.cluster.RedisCluster._parse_target_nodes(self,target_nodes)
redis.cluster.RedisCluster._process_result(self,command,res,**kwargs)
redis.cluster.RedisCluster._should_reinitialized(self)
redis.cluster.RedisCluster.close(self)
redis.cluster.RedisCluster.determine_slot(self,*args)
redis.cluster.RedisCluster.disconnect_connection_pools(self)
redis.cluster.RedisCluster.execute_command(self,*args,**kwargs)
redis.cluster.RedisCluster.from_url(cls,url,**kwargs)
redis.cluster.RedisCluster.get_connection_kwargs(self)
redis.cluster.RedisCluster.get_default_node(self)
redis.cluster.RedisCluster.get_encoder(self)
redis.cluster.RedisCluster.get_node(self,host=None,port=None,node_name=None)
redis.cluster.RedisCluster.get_node_from_key(self,key,replica=False)
redis.cluster.RedisCluster.get_nodes(self)
redis.cluster.RedisCluster.get_primaries(self)
redis.cluster.RedisCluster.get_random_node(self)
redis.cluster.RedisCluster.get_redis_connection(self,node)
redis.cluster.RedisCluster.get_replicas(self)
redis.cluster.RedisCluster.keyslot(self,key)
redis.cluster.RedisCluster.monitor(self,target_node=None)
redis.cluster.RedisCluster.on_connect(self,connection)
redis.cluster.RedisCluster.pipeline(self,transaction=None,shard_hint=None)
redis.cluster.RedisCluster.pubsub(self,node=None,host=None,port=None,**kwargs)
redis.cluster.RedisCluster.reinitialize_caches(self)
redis.cluster.RedisCluster.set_default_node(self,node)
redis.cluster.block_pipeline_command(func)
redis.cluster.cleanup_kwargs(**kwargs)
redis.cluster.get_connection(redis_node,*args,**options)
redis.cluster.get_node_name(host,port)
redis.cluster.parse_cluster_slots(resp,**options)
redis.cluster.parse_pubsub_numsub(command,res,**options)
redis.cluster.parse_scan_result(command,res,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/sentinel.py----------------------------------------
A:redis.sentinel.self.connection_pool->kwargs.pop('connection_pool')
A:redis.sentinel.kwargs['connection_class']->kwargs.get('connection_class', SentinelManagedSSLConnection if kwargs.pop('ssl', False) else SentinelManagedConnection)
A:redis.sentinel.self.is_master->kwargs.pop('is_master', True)
A:redis.sentinel.self.check_connection->kwargs.pop('check_connection', False)
A:redis.sentinel.self.connection_kwargs['connection_pool']->weakref.proxy(self)
A:redis.sentinel.parent->super()
A:redis.sentinel.master_address->self.sentinel_manager.discover_master(self.service_name)
A:redis.sentinel.slaves->self.filter_slaves(slaves)
A:redis.sentinel.self.slave_rr_counter->random.randint(0, len(slaves) - 1)
A:redis.sentinel.once->bool(kwargs.get('once', False))
A:redis.sentinel.masters->sentinel.sentinel_masters()
A:redis.sentinel.state->sentinel.sentinel_masters().get(service_name)
A:redis.sentinel.connection_kwargs->dict(self.connection_kwargs)
redis.Sentinel(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.Sentinel.__repr__(self)
redis.Sentinel.check_master_state(self,state,service_name)
redis.Sentinel.discover_master(self,service_name)
redis.Sentinel.discover_slaves(self,service_name)
redis.Sentinel.execute_command(self,*args,**kwargs)
redis.Sentinel.filter_slaves(self,slaves)
redis.Sentinel.master_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.Sentinel.slave_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.SentinelConnectionPool(self,service_name,sentinel_manager,**kwargs)
redis.SentinelConnectionPool.__repr__(self)
redis.SentinelConnectionPool.get_master_address(self)
redis.SentinelConnectionPool.owns_connection(self,connection)
redis.SentinelConnectionPool.reset(self)
redis.SentinelConnectionPool.rotate_slaves(self)
redis.SentinelManagedConnection(self,**kwargs)
redis.SentinelManagedConnection.__repr__(self)
redis.SentinelManagedConnection.connect(self)
redis.SentinelManagedConnection.connect_to(self,address)
redis.SentinelManagedConnection.read_response(self,disable_decoding=False)
redis.SentinelManagedSSLConnection(SentinelManagedConnection,SSLConnection)
redis.sentinel.MasterNotFoundError(ConnectionError)
redis.sentinel.Sentinel(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__init__(self,sentinels,min_other_sentinels=0,sentinel_kwargs=None,**connection_kwargs)
redis.sentinel.Sentinel.__repr__(self)
redis.sentinel.Sentinel.check_master_state(self,state,service_name)
redis.sentinel.Sentinel.discover_master(self,service_name)
redis.sentinel.Sentinel.discover_slaves(self,service_name)
redis.sentinel.Sentinel.execute_command(self,*args,**kwargs)
redis.sentinel.Sentinel.filter_slaves(self,slaves)
redis.sentinel.Sentinel.master_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.Sentinel.slave_for(self,service_name,redis_class=Redis,connection_pool_class=SentinelConnectionPool,**kwargs)
redis.sentinel.SentinelConnectionPool(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__init__(self,service_name,sentinel_manager,**kwargs)
redis.sentinel.SentinelConnectionPool.__repr__(self)
redis.sentinel.SentinelConnectionPool.get_master_address(self)
redis.sentinel.SentinelConnectionPool.owns_connection(self,connection)
redis.sentinel.SentinelConnectionPool.reset(self)
redis.sentinel.SentinelConnectionPool.rotate_slaves(self)
redis.sentinel.SentinelManagedConnection(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__init__(self,**kwargs)
redis.sentinel.SentinelManagedConnection.__repr__(self)
redis.sentinel.SentinelManagedConnection.connect(self)
redis.sentinel.SentinelManagedConnection.connect_to(self,address)
redis.sentinel.SentinelManagedConnection.read_response(self,disable_decoding=False)
redis.sentinel.SentinelManagedSSLConnection(SentinelManagedConnection,SSLConnection)
redis.sentinel.SlaveNotFoundError(ConnectionError)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/ocsp.py----------------------------------------
A:redis.ocsp.pem->ssl.get_server_certificate((self.HOST, self.PORT), ca_certs=self.CA_CERTS)
A:redis.ocsp.cert->cryptography.x509.load_pem_x509_certificate(pem.encode(), backends.default_backend())
A:redis.ocsp.der->self.SOCK.getpeercert(True)
A:redis.ocsp.orb->orb.add_certificate(cert, issuer_cert, cryptography.hazmat.primitives.hashes.SHA256()).add_certificate(cert, issuer_cert, cryptography.hazmat.primitives.hashes.SHA256())
A:redis.ocsp.request->orb.add_certificate(cert, issuer_cert, cryptography.hazmat.primitives.hashes.SHA256()).add_certificate(cert, issuer_cert, cryptography.hazmat.primitives.hashes.SHA256()).build()
A:redis.ocsp.path->base64.b64encode(request.public_bytes(hazmat.primitives.serialization.Encoding.DER))
A:redis.ocsp.url->urljoin(server, path.decode('ascii'))
A:redis.ocsp.r->requests.get(ocsp_url, headers=header)
A:redis.ocsp.issuer_cert->self._bin2ascii(der)
A:redis.ocsp.ocsp_url->self.build_certificate_url(server, cert, issuer_cert)
A:redis.ocsp.ocsp_response->cryptography.x509.ocsp.load_der_ocsp_response(r.content)
A:redis.ocsp.(cert, issuer_url, ocsp_server)->self.components_from_direct_connection()
redis.ocsp.OCSPVerifier(self,sock,host,port,ca_certs=None)
redis.ocsp.OCSPVerifier.__init__(self,sock,host,port,ca_certs=None)
redis.ocsp.OCSPVerifier._bin2ascii(self,der)
redis.ocsp.OCSPVerifier._certificate_components(self,cert)
redis.ocsp.OCSPVerifier.build_certificate_url(self,server,cert,issuer_cert)
redis.ocsp.OCSPVerifier.check_certificate(self,server,cert,issuer_url)
redis.ocsp.OCSPVerifier.components_from_direct_connection(self)
redis.ocsp.OCSPVerifier.components_from_socket(self)
redis.ocsp.OCSPVerifier.is_valid(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/connection.py----------------------------------------
A:redis.connection.NONBLOCKING_EXCEPTIONS->tuple(NONBLOCKING_EXCEPTION_ERROR_NUMBERS.keys())
A:redis.connection.hiredis_version->Version(hiredis.__version__)
A:redis.connection.SENTINEL->object()
A:redis.connection.value->unquote(value[0])
A:redis.connection.exception_class->exception_class.get(response, ResponseError).get(response, ResponseError)
A:redis.connection.self._buffer->bytearray(socket_read_size)
A:redis.connection.data->buf.readline()
A:redis.connection.data_length->len(data)
A:redis.connection.allowed->NONBLOCKING_EXCEPTION_ERROR_NUMBERS.get(ex.__class__, -1)
A:redis.connection.raw->self._buffer.readline()
A:redis.connection.response->self._parser.read_response(disable_decoding=disable_decoding)
A:redis.connection.error->self.parse_error(response)
A:redis.connection.length->int(response)
A:redis.connection.self._reader->hiredis.Reader(**kwargs)
A:redis.connection.self._next_response->self._reader.gets()
A:redis.connection.bufflen->self._sock.recv_into(self._buffer)
A:redis.connection.buffer->self._sock.recv(self.socket_read_size)
A:redis.connection.response[0]->self.parse_error(response[0].args[0])
A:redis.connection.self.pid->os.getpid()
A:redis.connection.self.port->int(port)
A:redis.connection.self.retry->Retry(NoBackoff(), 0)
A:redis.connection.self.encoder->Encoder(encoding, encoding_errors, decode_responses)
A:redis.connection.repr_args->','.join([f'{k}={v}' for (k, v) in self.repr_pieces()])
A:redis.connection.self._parser->parser_class(socket_read_size=self._socket_read_size)
A:redis.connection.sock->socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
A:redis.connection.callback->ref()
A:redis.connection.auth_response->self.read_response()
A:redis.connection.buff->SYM_EMPTY.join((buff, SYM_DOLLAR, str(arg_length).encode(), SYM_CRLF, arg, SYM_CRLF))
A:redis.connection.arg_length->len(arg)
A:redis.connection.chunklen->len(chunk)
A:redis.connection.context->ssl.create_default_context()
A:redis.connection.sslsock->ssl.create_default_context().wrap_socket(sock, server_hostname=self.host)
A:redis.connection.o->OCSPVerifier(sslsock, self.host, self.port, self.ca_certs)
A:redis.connection.url->urlparse(url)
A:redis.connection.parser->URL_QUERY_ARGUMENT_PARSERS.get(name)
A:redis.connection.kwargs[name]->parser(value)
A:redis.connection.kwargs['username']->unquote(url.username)
A:redis.connection.kwargs['password']->unquote(url.password)
A:redis.connection.kwargs['path']->unquote(url.path)
A:redis.connection.kwargs['host']->unquote(url.hostname)
A:redis.connection.kwargs['port']->int(url.port)
A:redis.connection.kwargs['db']->int(unquote(url.path).replace('/', ''))
A:redis.connection.url_options->parse_url(url)
A:redis.connection.self._fork_lock->threading.Lock()
A:redis.connection.self._lock->threading.Lock()
A:redis.connection.self._in_use_connections->set()
A:redis.connection.acquired->self._fork_lock.acquire(timeout=5)
A:redis.connection.connection->self.make_connection()
A:redis.connection.connections->chain(self._available_connections, self._in_use_connections)
A:redis.connection.self.pool->self.queue_class(self.max_connections)
redis.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.BlockingConnectionPool.disconnect(self)
redis.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.BlockingConnectionPool.make_connection(self)
redis.BlockingConnectionPool.release(self,connection)
redis.BlockingConnectionPool.reset(self)
redis.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,retry_on_error=[],encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.Connection.__del__(self)
redis.Connection.__repr__(self)
redis.Connection._connect(self)
redis.Connection._error_message(self,exception)
redis.Connection._ping_failed(self,error)
redis.Connection._send_ping(self)
redis.Connection.can_read(self,timeout=0)
redis.Connection.check_health(self)
redis.Connection.clear_connect_callbacks(self)
redis.Connection.connect(self)
redis.Connection.disconnect(self)
redis.Connection.on_connect(self)
redis.Connection.pack_command(self,*args)
redis.Connection.pack_commands(self,commands)
redis.Connection.read_response(self,disable_decoding=False)
redis.Connection.register_connect_callback(self,callback)
redis.Connection.repr_pieces(self)
redis.Connection.send_command(self,*args,**kwargs)
redis.Connection.send_packed_command(self,command,check_health=True)
redis.Connection.set_parser(self,parser_class)
redis.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.ConnectionPool.__repr__(self)
redis.ConnectionPool._checkpid(self)
redis.ConnectionPool.disconnect(self,inuse_connections=True)
redis.ConnectionPool.from_url(cls,url,**kwargs)
redis.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.ConnectionPool.get_encoder(self)
redis.ConnectionPool.make_connection(self)
redis.ConnectionPool.owns_connection(self,connection)
redis.ConnectionPool.release(self,connection)
redis.ConnectionPool.reset(self)
redis.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,ssl_ca_path=None,ssl_password=None,ssl_validate_ocsp=False,**kwargs)
redis.SSLConnection._connect(self)
redis.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,retry_on_error=[],parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None,redis_connect_func=None)
redis.UnixDomainSocketConnection._connect(self)
redis.UnixDomainSocketConnection._error_message(self,exception)
redis.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.BaseParser
redis.connection.BaseParser.parse_error(self,response)
redis.connection.BlockingConnectionPool(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.__init__(self,max_connections=50,timeout=20,connection_class=Connection,queue_class=LifoQueue,**connection_kwargs)
redis.connection.BlockingConnectionPool.disconnect(self)
redis.connection.BlockingConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.BlockingConnectionPool.make_connection(self)
redis.connection.BlockingConnectionPool.release(self,connection)
redis.connection.BlockingConnectionPool.reset(self)
redis.connection.Connection(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,retry_on_error=[],encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.connection.Connection.__del__(self)
redis.connection.Connection.__init__(self,host='localhost',port=6379,db=0,password=None,socket_timeout=None,socket_connect_timeout=None,socket_keepalive=False,socket_keepalive_options=None,socket_type=0,retry_on_timeout=False,retry_on_error=[],encoding='utf-8',encoding_errors='strict',decode_responses=False,parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,username=None,retry=None,redis_connect_func=None)
redis.connection.Connection.__repr__(self)
redis.connection.Connection._connect(self)
redis.connection.Connection._error_message(self,exception)
redis.connection.Connection._ping_failed(self,error)
redis.connection.Connection._send_ping(self)
redis.connection.Connection.can_read(self,timeout=0)
redis.connection.Connection.check_health(self)
redis.connection.Connection.clear_connect_callbacks(self)
redis.connection.Connection.connect(self)
redis.connection.Connection.disconnect(self)
redis.connection.Connection.on_connect(self)
redis.connection.Connection.pack_command(self,*args)
redis.connection.Connection.pack_commands(self,commands)
redis.connection.Connection.read_response(self,disable_decoding=False)
redis.connection.Connection.register_connect_callback(self,callback)
redis.connection.Connection.repr_pieces(self)
redis.connection.Connection.send_command(self,*args,**kwargs)
redis.connection.Connection.send_packed_command(self,command,check_health=True)
redis.connection.Connection.set_parser(self,parser_class)
redis.connection.ConnectionPool(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__init__(self,connection_class=Connection,max_connections=None,**connection_kwargs)
redis.connection.ConnectionPool.__repr__(self)
redis.connection.ConnectionPool._checkpid(self)
redis.connection.ConnectionPool.disconnect(self,inuse_connections=True)
redis.connection.ConnectionPool.from_url(cls,url,**kwargs)
redis.connection.ConnectionPool.get_connection(self,command_name,*keys,**options)
redis.connection.ConnectionPool.get_encoder(self)
redis.connection.ConnectionPool.make_connection(self)
redis.connection.ConnectionPool.owns_connection(self,connection)
redis.connection.ConnectionPool.release(self,connection)
redis.connection.ConnectionPool.reset(self)
redis.connection.Encoder(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.__init__(self,encoding,encoding_errors,decode_responses)
redis.connection.Encoder.decode(self,value,force=False)
redis.connection.Encoder.encode(self,value)
redis.connection.HiredisParser(self,socket_read_size)
redis.connection.HiredisParser.__del__(self)
redis.connection.HiredisParser.__init__(self,socket_read_size)
redis.connection.HiredisParser.can_read(self,timeout)
redis.connection.HiredisParser.on_connect(self,connection,**kwargs)
redis.connection.HiredisParser.on_disconnect(self)
redis.connection.HiredisParser.read_from_socket(self,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.HiredisParser.read_response(self,disable_decoding=False)
redis.connection.PythonParser(self,socket_read_size)
redis.connection.PythonParser.__del__(self)
redis.connection.PythonParser.__init__(self,socket_read_size)
redis.connection.PythonParser.can_read(self,timeout)
redis.connection.PythonParser.on_connect(self,connection)
redis.connection.PythonParser.on_disconnect(self)
redis.connection.PythonParser.read_response(self,disable_decoding=False)
redis.connection.SSLConnection(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,ssl_ca_path=None,ssl_password=None,ssl_validate_ocsp=False,**kwargs)
redis.connection.SSLConnection.__init__(self,ssl_keyfile=None,ssl_certfile=None,ssl_cert_reqs='required',ssl_ca_certs=None,ssl_check_hostname=False,ssl_ca_path=None,ssl_password=None,ssl_validate_ocsp=False,**kwargs)
redis.connection.SSLConnection._connect(self)
redis.connection.SocketBuffer(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer.__init__(self,socket,socket_read_size,socket_timeout)
redis.connection.SocketBuffer._read_from_socket(self,length=None,timeout=SENTINEL,raise_on_timeout=True)
redis.connection.SocketBuffer.can_read(self,timeout)
redis.connection.SocketBuffer.close(self)
redis.connection.SocketBuffer.length(self)
redis.connection.SocketBuffer.purge(self)
redis.connection.SocketBuffer.read(self,length)
redis.connection.SocketBuffer.readline(self)
redis.connection.UnixDomainSocketConnection(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,retry_on_error=[],parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None,redis_connect_func=None)
redis.connection.UnixDomainSocketConnection.__init__(self,path='',db=0,username=None,password=None,socket_timeout=None,encoding='utf-8',encoding_errors='strict',decode_responses=False,retry_on_timeout=False,retry_on_error=[],parser_class=DefaultParser,socket_read_size=65536,health_check_interval=0,client_name=None,retry=None,redis_connect_func=None)
redis.connection.UnixDomainSocketConnection._connect(self)
redis.connection.UnixDomainSocketConnection._error_message(self,exception)
redis.connection.UnixDomainSocketConnection.repr_pieces(self)
redis.connection.parse_url(url)
redis.connection.to_bool(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/crc.py----------------------------------------
A:redis.crc.start->key.find(b'{')
A:redis.crc.end->key.find(b'}', start + 1)
redis.crc.key_slot(key,bucket=REDIS_CLUSTER_HASH_SLOTS)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/helpers.py----------------------------------------
A:redis.commands.helpers.keys->list(keys)
A:redis.commands.helpers.res[response[i]]->float(response[i + 1])
A:redis.commands.helpers.res[det[0]]->float(det[1])
A:redis.commands.helpers.v->v.replace('"', '\\"').replace('"', '\\"')
A:redis.commands.helpers.newobj->copy.copy(obj)
redis.commands.helpers.decodeDictKeys(obj)
redis.commands.helpers.delist(x)
redis.commands.helpers.list_or_args(keys,args)
redis.commands.helpers.nativestr(x)
redis.commands.helpers.parse_list_to_dict(response)
redis.commands.helpers.parse_to_dict(response)
redis.commands.helpers.parse_to_list(response)
redis.commands.helpers.quote_string(v)
redis.commands.helpers.random_string(length=10)
redis.commands.helpers.stringify_param_value(value)
redis.commands.list_or_args(keys,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/core.py----------------------------------------
A:redis.commands.core.b->int(bits)
A:redis.commands.core.encoder->registered_client.connection_pool.get_encoder()
A:redis.commands.core.passwords->list_or_args(passwords, [])
A:redis.commands.core.password->registered_client.connection_pool.get_encoder().encode(password)
A:redis.commands.core.hashed_passwords->list_or_args(hashed_passwords, [])
A:redis.commands.core.hashed_password->registered_client.connection_pool.get_encoder().encode(hashed_password)
A:redis.commands.core.category->registered_client.connection_pool.get_encoder().encode(category)
A:redis.commands.core.cmd->registered_client.connection_pool.get_encoder().encode(cmd)
A:redis.commands.core.key->registered_client.connection_pool.get_encoder().encode(key)
A:redis.commands.core.keys->list_or_args(keys, None)
A:redis.commands.core.decode_responses->self.get_connection_kwargs().get('decode_responses', False)
A:redis.commands.core.time->int(time.total_seconds())
A:redis.commands.core.when->int(time.mktime(when.timetuple()))
A:redis.commands.core.ex->int(ex.total_seconds())
A:redis.commands.core.px->int(px.total_seconds() * 1000)
A:redis.commands.core.s->int(exat.microsecond / 1000000)
A:redis.commands.core.ms->int(pxat.microsecond / 1000)
A:redis.commands.core.value->self.get(name)
A:redis.commands.core.args->list_or_args(keys, args)
A:redis.commands.core.time_ms->int(time_ms.total_seconds() * 1000)
A:redis.commands.core.supported_algos_str->', '.join(supported_algo)
A:redis.commands.core.(cursor, data)->self.zscan(name, cursor=cursor, match=match, count=count, score_cast_func=score_cast_func)
A:redis.commands.core.(keys, values)->zip(*streams.items())
A:redis.commands.core.pieces->list(args)
A:redis.commands.core.script->registered_client.connection_pool.get_encoder().encode(script)
A:redis.commands.core.self.sha->client.script_load(self.script)
A:redis.commands.core.overflow->overflow.upper().upper()
redis.commands.CoreCommands(ACLCommands,ClusterCommands,DataAccessCommands,ManagementCommands,ModuleCommands,PubSubCommands,ScriptCommands)
redis.commands.core.ACLCommands
redis.commands.core.ACLCommands.acl_cat(self,category=None,**kwargs)
redis.commands.core.ACLCommands.acl_deluser(self,*username,**kwargs)
redis.commands.core.ACLCommands.acl_genpass(self,bits=None,**kwargs)
redis.commands.core.ACLCommands.acl_getuser(self,username,**kwargs)
redis.commands.core.ACLCommands.acl_help(self,**kwargs)
redis.commands.core.ACLCommands.acl_list(self,**kwargs)
redis.commands.core.ACLCommands.acl_load(self,**kwargs)
redis.commands.core.ACLCommands.acl_log(self,count=None,**kwargs)
redis.commands.core.ACLCommands.acl_log_reset(self,**kwargs)
redis.commands.core.ACLCommands.acl_save(self,**kwargs)
redis.commands.core.ACLCommands.acl_setuser(self,username,enabled=False,nopass=False,passwords=None,hashed_passwords=None,categories=None,commands=None,keys=None,reset=False,reset_keys=False,reset_passwords=False,**kwargs)
redis.commands.core.ACLCommands.acl_users(self,**kwargs)
redis.commands.core.ACLCommands.acl_whoami(self,**kwargs)
redis.commands.core.BasicKeyCommands
redis.commands.core.BasicKeyCommands.__delitem__(self,name)
redis.commands.core.BasicKeyCommands.__getitem__(self,name)
redis.commands.core.BasicKeyCommands.__setitem__(self,name,value)
redis.commands.core.BasicKeyCommands.append(self,key,value)
redis.commands.core.BasicKeyCommands.bitcount(self,key,start=None,end=None)
redis.commands.core.BasicKeyCommands.bitfield(self,key,default_overflow=None)
redis.commands.core.BasicKeyCommands.bitop(self,operation,dest,*keys)
redis.commands.core.BasicKeyCommands.bitpos(self,key,bit,start=None,end=None)
redis.commands.core.BasicKeyCommands.blmove(self,first_list,second_list,timeout,src='LEFT',dest='RIGHT')
redis.commands.core.BasicKeyCommands.copy(self,source,destination,destination_db=None,replace=False)
redis.commands.core.BasicKeyCommands.decr(self,name,amount=1)
redis.commands.core.BasicKeyCommands.decrby(self,name,amount=1)
redis.commands.core.BasicKeyCommands.delete(self,*names)
redis.commands.core.BasicKeyCommands.dump(self,name)
redis.commands.core.BasicKeyCommands.exists(self,*names)
redis.commands.core.BasicKeyCommands.expire(self,name,time)
redis.commands.core.BasicKeyCommands.expireat(self,name,when)
redis.commands.core.BasicKeyCommands.get(self,name)
redis.commands.core.BasicKeyCommands.getbit(self,name,offset)
redis.commands.core.BasicKeyCommands.getdel(self,name)
redis.commands.core.BasicKeyCommands.getex(self,name,ex=None,px=None,exat=None,pxat=None,persist=False)
redis.commands.core.BasicKeyCommands.getrange(self,key,start,end)
redis.commands.core.BasicKeyCommands.getset(self,name,value)
redis.commands.core.BasicKeyCommands.hrandfield(self,key,count=None,withvalues=False)
redis.commands.core.BasicKeyCommands.incr(self,name,amount=1)
redis.commands.core.BasicKeyCommands.incrby(self,name,amount=1)
redis.commands.core.BasicKeyCommands.incrbyfloat(self,name,amount=1.0)
redis.commands.core.BasicKeyCommands.keys(self,pattern='*',**kwargs)
redis.commands.core.BasicKeyCommands.lmove(self,first_list,second_list,src='LEFT',dest='RIGHT')
redis.commands.core.BasicKeyCommands.mget(self,keys,*args)
redis.commands.core.BasicKeyCommands.move(self,name,db)
redis.commands.core.BasicKeyCommands.mset(self,mapping)
redis.commands.core.BasicKeyCommands.msetnx(self,mapping)
redis.commands.core.BasicKeyCommands.persist(self,name)
redis.commands.core.BasicKeyCommands.pexpire(self,name,time)
redis.commands.core.BasicKeyCommands.pexpireat(self,name,when)
redis.commands.core.BasicKeyCommands.psetex(self,name,time_ms,value)
redis.commands.core.BasicKeyCommands.pttl(self,name)
redis.commands.core.BasicKeyCommands.randomkey(self,**kwargs)
redis.commands.core.BasicKeyCommands.rename(self,src,dst)
redis.commands.core.BasicKeyCommands.renamenx(self,src,dst)
redis.commands.core.BasicKeyCommands.restore(self,name,ttl,value,replace=False,absttl=False,idletime=None,frequency=None)
redis.commands.core.BasicKeyCommands.set(self,name,value,ex=None,px=None,nx=False,xx=False,keepttl=False,get=False,exat=None,pxat=None)
redis.commands.core.BasicKeyCommands.setbit(self,name,offset,value)
redis.commands.core.BasicKeyCommands.setex(self,name,time,value)
redis.commands.core.BasicKeyCommands.setnx(self,name,value)
redis.commands.core.BasicKeyCommands.setrange(self,name,offset,value)
redis.commands.core.BasicKeyCommands.stralgo(self,algo,value1,value2,specific_argument='strings',len=False,idx=False,minmatchlen=None,withmatchlen=False,**kwargs)
redis.commands.core.BasicKeyCommands.strlen(self,name)
redis.commands.core.BasicKeyCommands.substr(self,name,start,end=-1)
redis.commands.core.BasicKeyCommands.touch(self,*args)
redis.commands.core.BasicKeyCommands.ttl(self,name)
redis.commands.core.BasicKeyCommands.type(self,name)
redis.commands.core.BasicKeyCommands.unlink(self,*names)
redis.commands.core.BasicKeyCommands.unwatch(self)
redis.commands.core.BasicKeyCommands.watch(self,*names)
redis.commands.core.BitFieldOperation(self,client,key,default_overflow=None)
redis.commands.core.BitFieldOperation.__init__(self,client,key,default_overflow=None)
redis.commands.core.BitFieldOperation.command(self)
redis.commands.core.BitFieldOperation.execute(self)
redis.commands.core.BitFieldOperation.get(self,fmt,offset)
redis.commands.core.BitFieldOperation.incrby(self,fmt,offset,increment,overflow=None)
redis.commands.core.BitFieldOperation.overflow(self,overflow)
redis.commands.core.BitFieldOperation.reset(self)
redis.commands.core.BitFieldOperation.set(self,fmt,offset,value)
redis.commands.core.ClusterCommands
redis.commands.core.ClusterCommands.cluster(self,cluster_arg,*args,**kwargs)
redis.commands.core.ClusterCommands.readonly(self,**kwargs)
redis.commands.core.ClusterCommands.readwrite(self,**kwargs)
redis.commands.core.CoreCommands(ACLCommands,ClusterCommands,DataAccessCommands,ManagementCommands,ModuleCommands,PubSubCommands,ScriptCommands)
redis.commands.core.DataAccessCommands(BasicKeyCommands,HyperlogCommands,HashCommands,GeoCommands,ListCommands,ScanCommands,SetCommands,StreamCommands,SortedSetCommands)
redis.commands.core.GeoCommands
redis.commands.core.GeoCommands._georadiusgeneric(self,command,*args,**kwargs)
redis.commands.core.GeoCommands._geosearchgeneric(self,command,*args,**kwargs)
redis.commands.core.GeoCommands.geoadd(self,name,values,nx=False,xx=False,ch=False)
redis.commands.core.GeoCommands.geodist(self,name,place1,place2,unit=None)
redis.commands.core.GeoCommands.geohash(self,name,*values)
redis.commands.core.GeoCommands.geopos(self,name,*values)
redis.commands.core.GeoCommands.georadius(self,name,longitude,latitude,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None,any=False)
redis.commands.core.GeoCommands.georadiusbymember(self,name,member,radius,unit=None,withdist=False,withcoord=False,withhash=False,count=None,sort=None,store=None,store_dist=None,any=False)
redis.commands.core.GeoCommands.geosearch(self,name,member=None,longitude=None,latitude=None,unit='m',radius=None,width=None,height=None,sort=None,count=None,any=False,withcoord=False,withdist=False,withhash=False)
redis.commands.core.GeoCommands.geosearchstore(self,dest,name,member=None,longitude=None,latitude=None,unit='m',radius=None,width=None,height=None,sort=None,count=None,any=False,storedist=False)
redis.commands.core.HashCommands
redis.commands.core.HashCommands.hdel(self,name,*keys)
redis.commands.core.HashCommands.hexists(self,name,key)
redis.commands.core.HashCommands.hget(self,name,key)
redis.commands.core.HashCommands.hgetall(self,name)
redis.commands.core.HashCommands.hincrby(self,name,key,amount=1)
redis.commands.core.HashCommands.hincrbyfloat(self,name,key,amount=1.0)
redis.commands.core.HashCommands.hkeys(self,name)
redis.commands.core.HashCommands.hlen(self,name)
redis.commands.core.HashCommands.hmget(self,name,keys,*args)
redis.commands.core.HashCommands.hmset(self,name,mapping)
redis.commands.core.HashCommands.hset(self,name,key=None,value=None,mapping=None)
redis.commands.core.HashCommands.hsetnx(self,name,key,value)
redis.commands.core.HashCommands.hstrlen(self,name,key)
redis.commands.core.HashCommands.hvals(self,name)
redis.commands.core.HyperlogCommands
redis.commands.core.HyperlogCommands.pfadd(self,name,*values)
redis.commands.core.HyperlogCommands.pfcount(self,*sources)
redis.commands.core.HyperlogCommands.pfmerge(self,dest,*sources)
redis.commands.core.ListCommands
redis.commands.core.ListCommands.blpop(self,keys,timeout=0)
redis.commands.core.ListCommands.brpop(self,keys,timeout=0)
redis.commands.core.ListCommands.brpoplpush(self,src,dst,timeout=0)
redis.commands.core.ListCommands.lindex(self,name,index)
redis.commands.core.ListCommands.linsert(self,name,where,refvalue,value)
redis.commands.core.ListCommands.llen(self,name)
redis.commands.core.ListCommands.lpop(self,name,count=None)
redis.commands.core.ListCommands.lpos(self,name,value,rank=None,count=None,maxlen=None)
redis.commands.core.ListCommands.lpush(self,name,*values)
redis.commands.core.ListCommands.lpushx(self,name,*values)
redis.commands.core.ListCommands.lrange(self,name,start,end)
redis.commands.core.ListCommands.lrem(self,name,count,value)
redis.commands.core.ListCommands.lset(self,name,index,value)
redis.commands.core.ListCommands.ltrim(self,name,start,end)
redis.commands.core.ListCommands.rpop(self,name,count=None)
redis.commands.core.ListCommands.rpoplpush(self,src,dst)
redis.commands.core.ListCommands.rpush(self,name,*values)
redis.commands.core.ListCommands.rpushx(self,name,value)
redis.commands.core.ListCommands.sort(self,name,start=None,num=None,by=None,get=None,desc=False,alpha=False,store=None,groups=False)
redis.commands.core.ManagementCommands
redis.commands.core.ManagementCommands.bgrewriteaof(self,**kwargs)
redis.commands.core.ManagementCommands.bgsave(self,schedule=True,**kwargs)
redis.commands.core.ManagementCommands.client_getname(self,**kwargs)
redis.commands.core.ManagementCommands.client_getredir(self,**kwargs)
redis.commands.core.ManagementCommands.client_id(self,**kwargs)
redis.commands.core.ManagementCommands.client_info(self,**kwargs)
redis.commands.core.ManagementCommands.client_kill(self,address,**kwargs)
redis.commands.core.ManagementCommands.client_kill_filter(self,_id=None,_type=None,addr=None,skipme=None,laddr=None,user=None,**kwargs)
redis.commands.core.ManagementCommands.client_list(self,_type=None,client_id=[],**kwargs)
redis.commands.core.ManagementCommands.client_pause(self,timeout,all=True,**kwargs)
redis.commands.core.ManagementCommands.client_reply(self,reply,**kwargs)
redis.commands.core.ManagementCommands.client_setname(self,name,**kwargs)
redis.commands.core.ManagementCommands.client_tracking(self,on=True,clientid=None,prefix=[],bcast=False,optin=False,optout=False,noloop=False,**kwargs)
redis.commands.core.ManagementCommands.client_tracking_off(self,clientid=None,prefix=[],bcast=False,optin=False,optout=False,noloop=False)
redis.commands.core.ManagementCommands.client_tracking_on(self,clientid=None,prefix=[],bcast=False,optin=False,optout=False,noloop=False)
redis.commands.core.ManagementCommands.client_trackinginfo(self,**kwargs)
redis.commands.core.ManagementCommands.client_unblock(self,client_id,error=False,**kwargs)
redis.commands.core.ManagementCommands.client_unpause(self,**kwargs)
redis.commands.core.ManagementCommands.command(self,**kwargs)
redis.commands.core.ManagementCommands.command_count(self,**kwargs)
redis.commands.core.ManagementCommands.command_info(self,**kwargs)
redis.commands.core.ManagementCommands.config_get(self,pattern='*',**kwargs)
redis.commands.core.ManagementCommands.config_resetstat(self,**kwargs)
redis.commands.core.ManagementCommands.config_rewrite(self,**kwargs)
redis.commands.core.ManagementCommands.config_set(self,name,value,**kwargs)
redis.commands.core.ManagementCommands.dbsize(self,**kwargs)
redis.commands.core.ManagementCommands.debug_object(self,key,**kwargs)
redis.commands.core.ManagementCommands.debug_segfault(self,**kwargs)
redis.commands.core.ManagementCommands.echo(self,value,**kwargs)
redis.commands.core.ManagementCommands.flushall(self,asynchronous=False,**kwargs)
redis.commands.core.ManagementCommands.flushdb(self,asynchronous=False,**kwargs)
redis.commands.core.ManagementCommands.info(self,section=None,**kwargs)
redis.commands.core.ManagementCommands.lastsave(self,**kwargs)
redis.commands.core.ManagementCommands.lolwut(self,*version_numbers,**kwargs)
redis.commands.core.ManagementCommands.memory_doctor(self,**kwargs)
redis.commands.core.ManagementCommands.memory_help(self,**kwargs)
redis.commands.core.ManagementCommands.memory_malloc_stats(self,**kwargs)
redis.commands.core.ManagementCommands.memory_purge(self,**kwargs)
redis.commands.core.ManagementCommands.memory_stats(self,**kwargs)
redis.commands.core.ManagementCommands.memory_usage(self,key,samples=None,**kwargs)
redis.commands.core.ManagementCommands.migrate(self,host,port,keys,destination_db,timeout,copy=False,replace=False,auth=None,**kwargs)
redis.commands.core.ManagementCommands.object(self,infotype,key,**kwargs)
redis.commands.core.ManagementCommands.ping(self,**kwargs)
redis.commands.core.ManagementCommands.psync(self,replicationid,offset)
redis.commands.core.ManagementCommands.quit(self,**kwargs)
redis.commands.core.ManagementCommands.replicaof(self,*args,**kwargs)
redis.commands.core.ManagementCommands.reset(self)
redis.commands.core.ManagementCommands.role(self)
redis.commands.core.ManagementCommands.save(self,**kwargs)
redis.commands.core.ManagementCommands.select(self,index,**kwargs)
redis.commands.core.ManagementCommands.shutdown(self,save=False,nosave=False,**kwargs)
redis.commands.core.ManagementCommands.slaveof(self,host=None,port=None,**kwargs)
redis.commands.core.ManagementCommands.slowlog_get(self,num=None,**kwargs)
redis.commands.core.ManagementCommands.slowlog_len(self,**kwargs)
redis.commands.core.ManagementCommands.slowlog_reset(self,**kwargs)
redis.commands.core.ManagementCommands.swapdb(self,first,second,**kwargs)
redis.commands.core.ManagementCommands.sync(self)
redis.commands.core.ManagementCommands.time(self,**kwargs)
redis.commands.core.ManagementCommands.wait(self,num_replicas,timeout,**kwargs)
redis.commands.core.ModuleCommands
redis.commands.core.ModuleCommands.command(self)
redis.commands.core.ModuleCommands.command_count(self)
redis.commands.core.ModuleCommands.command_getkeys(self,*args)
redis.commands.core.ModuleCommands.command_info(self)
redis.commands.core.ModuleCommands.module_list(self)
redis.commands.core.ModuleCommands.module_load(self,path,*args)
redis.commands.core.ModuleCommands.module_unload(self,name)
redis.commands.core.PubSubCommands
redis.commands.core.PubSubCommands.publish(self,channel,message,**kwargs)
redis.commands.core.PubSubCommands.pubsub_channels(self,pattern='*',**kwargs)
redis.commands.core.PubSubCommands.pubsub_numpat(self,**kwargs)
redis.commands.core.PubSubCommands.pubsub_numsub(self,*args,**kwargs)
redis.commands.core.ScanCommands
redis.commands.core.ScanCommands.hscan(self,name,cursor=0,match=None,count=None)
redis.commands.core.ScanCommands.hscan_iter(self,name,match=None,count=None)
redis.commands.core.ScanCommands.scan(self,cursor=0,match=None,count=None,_type=None,**kwargs)
redis.commands.core.ScanCommands.scan_iter(self,match=None,count=None,_type=None,**kwargs)
redis.commands.core.ScanCommands.sscan(self,name,cursor=0,match=None,count=None)
redis.commands.core.ScanCommands.sscan_iter(self,name,match=None,count=None)
redis.commands.core.ScanCommands.zscan(self,name,cursor=0,match=None,count=None,score_cast_func=float)
redis.commands.core.ScanCommands.zscan_iter(self,name,match=None,count=None,score_cast_func=float)
redis.commands.core.Script(self,registered_client,script)
redis.commands.core.Script.__init__(self,registered_client,script)
redis.commands.core.ScriptCommands
redis.commands.core.ScriptCommands.eval(self,script,numkeys,*keys_and_args)
redis.commands.core.ScriptCommands.evalsha(self,sha,numkeys,*keys_and_args)
redis.commands.core.ScriptCommands.register_script(self,script)
redis.commands.core.ScriptCommands.script_debug(self,*args)
redis.commands.core.ScriptCommands.script_exists(self,*args)
redis.commands.core.ScriptCommands.script_flush(self,sync_type=None)
redis.commands.core.ScriptCommands.script_kill(self)
redis.commands.core.ScriptCommands.script_load(self,script)
redis.commands.core.SetCommands
redis.commands.core.SetCommands.sadd(self,name,*values)
redis.commands.core.SetCommands.scard(self,name)
redis.commands.core.SetCommands.sdiff(self,keys,*args)
redis.commands.core.SetCommands.sdiffstore(self,dest,keys,*args)
redis.commands.core.SetCommands.sinter(self,keys,*args)
redis.commands.core.SetCommands.sinterstore(self,dest,keys,*args)
redis.commands.core.SetCommands.sismember(self,name,value)
redis.commands.core.SetCommands.smembers(self,name)
redis.commands.core.SetCommands.smismember(self,name,values,*args)
redis.commands.core.SetCommands.smove(self,src,dst,value)
redis.commands.core.SetCommands.spop(self,name,count=None)
redis.commands.core.SetCommands.srandmember(self,name,number=None)
redis.commands.core.SetCommands.srem(self,name,*values)
redis.commands.core.SetCommands.sunion(self,keys,*args)
redis.commands.core.SetCommands.sunionstore(self,dest,keys,*args)
redis.commands.core.SortedSetCommands
redis.commands.core.SortedSetCommands._zaggregate(self,command,dest,keys,aggregate=None,**options)
redis.commands.core.SortedSetCommands._zrange(self,command,dest,name,start,end,desc=False,byscore=False,bylex=False,withscores=False,score_cast_func=float,offset=None,num=None)
redis.commands.core.SortedSetCommands.bzpopmax(self,keys,timeout=0)
redis.commands.core.SortedSetCommands.bzpopmin(self,keys,timeout=0)
redis.commands.core.SortedSetCommands.zadd(self,name,mapping,nx=False,xx=False,ch=False,incr=False,gt=None,lt=None)
redis.commands.core.SortedSetCommands.zcard(self,name)
redis.commands.core.SortedSetCommands.zcount(self,name,min,max)
redis.commands.core.SortedSetCommands.zdiff(self,keys,withscores=False)
redis.commands.core.SortedSetCommands.zdiffstore(self,dest,keys)
redis.commands.core.SortedSetCommands.zincrby(self,name,amount,value)
redis.commands.core.SortedSetCommands.zinter(self,keys,aggregate=None,withscores=False)
redis.commands.core.SortedSetCommands.zinterstore(self,dest,keys,aggregate=None)
redis.commands.core.SortedSetCommands.zlexcount(self,name,min,max)
redis.commands.core.SortedSetCommands.zmscore(self,key,members)
redis.commands.core.SortedSetCommands.zpopmax(self,name,count=None)
redis.commands.core.SortedSetCommands.zpopmin(self,name,count=None)
redis.commands.core.SortedSetCommands.zrandmember(self,key,count=None,withscores=False)
redis.commands.core.SortedSetCommands.zrange(self,name,start,end,desc=False,withscores=False,score_cast_func=float,byscore=False,bylex=False,offset=None,num=None)
redis.commands.core.SortedSetCommands.zrangebylex(self,name,min,max,start=None,num=None)
redis.commands.core.SortedSetCommands.zrangebyscore(self,name,min,max,start=None,num=None,withscores=False,score_cast_func=float)
redis.commands.core.SortedSetCommands.zrangestore(self,dest,name,start,end,byscore=False,bylex=False,desc=False,offset=None,num=None)
redis.commands.core.SortedSetCommands.zrank(self,name,value)
redis.commands.core.SortedSetCommands.zrem(self,name,*values)
redis.commands.core.SortedSetCommands.zremrangebylex(self,name,min,max)
redis.commands.core.SortedSetCommands.zremrangebyrank(self,name,min,max)
redis.commands.core.SortedSetCommands.zremrangebyscore(self,name,min,max)
redis.commands.core.SortedSetCommands.zrevrange(self,name,start,end,withscores=False,score_cast_func=float)
redis.commands.core.SortedSetCommands.zrevrangebylex(self,name,max,min,start=None,num=None)
redis.commands.core.SortedSetCommands.zrevrangebyscore(self,name,max,min,start=None,num=None,withscores=False,score_cast_func=float)
redis.commands.core.SortedSetCommands.zrevrank(self,name,value)
redis.commands.core.SortedSetCommands.zscore(self,name,value)
redis.commands.core.SortedSetCommands.zunion(self,keys,aggregate=None,withscores=False)
redis.commands.core.SortedSetCommands.zunionstore(self,dest,keys,aggregate=None)
redis.commands.core.StreamCommands
redis.commands.core.StreamCommands.xack(self,name,groupname,*ids)
redis.commands.core.StreamCommands.xadd(self,name,fields,id='*',maxlen=None,approximate=True,nomkstream=False,minid=None,limit=None)
redis.commands.core.StreamCommands.xautoclaim(self,name,groupname,consumername,min_idle_time,start_id=0,count=None,justid=False)
redis.commands.core.StreamCommands.xclaim(self,name,groupname,consumername,min_idle_time,message_ids,idle=None,time=None,retrycount=None,force=False,justid=False)
redis.commands.core.StreamCommands.xdel(self,name,*ids)
redis.commands.core.StreamCommands.xgroup_create(self,name,groupname,id='$',mkstream=False)
redis.commands.core.StreamCommands.xgroup_createconsumer(self,name,groupname,consumername)
redis.commands.core.StreamCommands.xgroup_delconsumer(self,name,groupname,consumername)
redis.commands.core.StreamCommands.xgroup_destroy(self,name,groupname)
redis.commands.core.StreamCommands.xgroup_setid(self,name,groupname,id)
redis.commands.core.StreamCommands.xinfo_consumers(self,name,groupname)
redis.commands.core.StreamCommands.xinfo_groups(self,name)
redis.commands.core.StreamCommands.xinfo_stream(self,name,full=False)
redis.commands.core.StreamCommands.xlen(self,name)
redis.commands.core.StreamCommands.xpending(self,name,groupname)
redis.commands.core.StreamCommands.xpending_range(self,name,groupname,idle=None,min=None,max=None,count=None,consumername=None)
redis.commands.core.StreamCommands.xrange(self,name,min='-',max='+',count=None)
redis.commands.core.StreamCommands.xread(self,streams,count=None,block=None)
redis.commands.core.StreamCommands.xreadgroup(self,groupname,consumername,streams,count=None,block=None,noack=False)
redis.commands.core.StreamCommands.xrevrange(self,name,max='+',min='-',count=None)
redis.commands.core.StreamCommands.xtrim(self,name,maxlen=None,approximate=True,minid=None,limit=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/redismodules.py----------------------------------------
A:redis.commands.redismodules.jj->JSON(client=self, encoder=encoder, decoder=decoder)
A:redis.commands.redismodules.s->TimeSeries(client=self)
A:redis.commands.redismodules.bf->BFBloom(client=self)
A:redis.commands.redismodules.cf->CFBloom(client=self)
A:redis.commands.redismodules.cms->CMSBloom(client=self)
A:redis.commands.redismodules.topk->TOPKBloom(client=self)
A:redis.commands.redismodules.tdigest->TDigestBloom(client=self)
A:redis.commands.redismodules.g->Graph(client=self, name=index_name)
redis.commands.RedisModuleCommands
redis.commands.RedisModuleCommands.bf(self)
redis.commands.RedisModuleCommands.cf(self)
redis.commands.RedisModuleCommands.cms(self)
redis.commands.RedisModuleCommands.ft(self,index_name='idx')
redis.commands.RedisModuleCommands.graph(self,index_name='idx')
redis.commands.RedisModuleCommands.json(self,encoder=JSONEncoder(),decoder=JSONDecoder())
redis.commands.RedisModuleCommands.tdigest(self)
redis.commands.RedisModuleCommands.topk(self)
redis.commands.RedisModuleCommands.ts(self)
redis.commands.redismodules.RedisModuleCommands
redis.commands.redismodules.RedisModuleCommands.bf(self)
redis.commands.redismodules.RedisModuleCommands.cf(self)
redis.commands.redismodules.RedisModuleCommands.cms(self)
redis.commands.redismodules.RedisModuleCommands.ft(self,index_name='idx')
redis.commands.redismodules.RedisModuleCommands.graph(self,index_name='idx')
redis.commands.redismodules.RedisModuleCommands.json(self,encoder=JSONEncoder(),decoder=JSONDecoder())
redis.commands.redismodules.RedisModuleCommands.tdigest(self)
redis.commands.redismodules.RedisModuleCommands.topk(self)
redis.commands.redismodules.RedisModuleCommands.ts(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/cluster.py----------------------------------------
A:redis.commands.cluster.k->self.encoder.encode(pair[0])
A:redis.commands.cluster.slot->key_slot(k)
A:redis.commands.cluster.keys->list_or_args(keys, args)
A:redis.commands.cluster.slots_to_keys->self._partition_keys_by_slot(keys)
A:redis.commands.cluster.slot_values->self.execute_command('MGET', *slot_keys, **options)
A:redis.commands.cluster.slot_results->dict(zip(slot_keys, slot_values))
A:redis.commands.cluster.target_nodes->kwargs.pop('target_nodes', None)
redis.commands.RedisClusterCommands(ClusterMultiKeyCommands,ClusterManagementCommands,ACLCommands,PubSubCommands,ClusterDataAccessCommands)
redis.commands.RedisClusterCommands.cluster_addslots(self,target_node,*slots)
redis.commands.RedisClusterCommands.cluster_count_failure_report(self,node_id)
redis.commands.RedisClusterCommands.cluster_countkeysinslot(self,slot_id)
redis.commands.RedisClusterCommands.cluster_delslots(self,*slots)
redis.commands.RedisClusterCommands.cluster_failover(self,target_node,option=None)
redis.commands.RedisClusterCommands.cluster_get_keys_in_slot(self,slot,num_keys)
redis.commands.RedisClusterCommands.cluster_info(self,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_keyslot(self,key)
redis.commands.RedisClusterCommands.cluster_meet(self,host,port,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_nodes(self)
redis.commands.RedisClusterCommands.cluster_replicas(self,node_id,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_replicate(self,target_nodes,node_id)
redis.commands.RedisClusterCommands.cluster_reset(self,soft=True,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_save_config(self,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_set_config_epoch(self,epoch,target_nodes=None)
redis.commands.RedisClusterCommands.cluster_setslot(self,target_node,node_id,slot_id,state)
redis.commands.RedisClusterCommands.cluster_setslot_stable(self,slot_id)
redis.commands.RedisClusterCommands.cluster_slots(self,target_nodes=None)
redis.commands.RedisClusterCommands.readonly(self,target_nodes=None)
redis.commands.RedisClusterCommands.readwrite(self,target_nodes=None)
redis.commands.cluster.ClusterDataAccessCommands(DataAccessCommands)
redis.commands.cluster.ClusterDataAccessCommands.stralgo(self,algo,value1,value2,specific_argument='strings',len=False,idx=False,minmatchlen=None,withmatchlen=False,**kwargs)
redis.commands.cluster.ClusterManagementCommands(ManagementCommands)
redis.commands.cluster.ClusterManagementCommands.replicaof(self,*args,**kwargs)
redis.commands.cluster.ClusterManagementCommands.slaveof(self,*args,**kwargs)
redis.commands.cluster.ClusterManagementCommands.swapdb(self,*args,**kwargs)
redis.commands.cluster.ClusterMultiKeyCommands
redis.commands.cluster.ClusterMultiKeyCommands._partition_keys_by_slot(self,keys)
redis.commands.cluster.ClusterMultiKeyCommands._split_command_across_slots(self,command,*keys)
redis.commands.cluster.ClusterMultiKeyCommands.delete(self,*keys)
redis.commands.cluster.ClusterMultiKeyCommands.exists(self,*keys)
redis.commands.cluster.ClusterMultiKeyCommands.mget_nonatomic(self,keys,*args)
redis.commands.cluster.ClusterMultiKeyCommands.mset_nonatomic(self,mapping)
redis.commands.cluster.ClusterMultiKeyCommands.touch(self,*keys)
redis.commands.cluster.ClusterMultiKeyCommands.unlink(self,*keys)
redis.commands.cluster.RedisClusterCommands(ClusterMultiKeyCommands,ClusterManagementCommands,ACLCommands,PubSubCommands,ClusterDataAccessCommands)
redis.commands.cluster.RedisClusterCommands.cluster_addslots(self,target_node,*slots)
redis.commands.cluster.RedisClusterCommands.cluster_count_failure_report(self,node_id)
redis.commands.cluster.RedisClusterCommands.cluster_countkeysinslot(self,slot_id)
redis.commands.cluster.RedisClusterCommands.cluster_delslots(self,*slots)
redis.commands.cluster.RedisClusterCommands.cluster_failover(self,target_node,option=None)
redis.commands.cluster.RedisClusterCommands.cluster_get_keys_in_slot(self,slot,num_keys)
redis.commands.cluster.RedisClusterCommands.cluster_info(self,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_keyslot(self,key)
redis.commands.cluster.RedisClusterCommands.cluster_meet(self,host,port,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_nodes(self)
redis.commands.cluster.RedisClusterCommands.cluster_replicas(self,node_id,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_replicate(self,target_nodes,node_id)
redis.commands.cluster.RedisClusterCommands.cluster_reset(self,soft=True,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_save_config(self,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_set_config_epoch(self,epoch,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.cluster_setslot(self,target_node,node_id,slot_id,state)
redis.commands.cluster.RedisClusterCommands.cluster_setslot_stable(self,slot_id)
redis.commands.cluster.RedisClusterCommands.cluster_slots(self,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.readonly(self,target_nodes=None)
redis.commands.cluster.RedisClusterCommands.readwrite(self,target_nodes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/sentinel.py----------------------------------------
redis.commands.SentinelCommands
redis.commands.SentinelCommands.sentinel(self,*args)
redis.commands.SentinelCommands.sentinel_ckquorum(self,new_master_name)
redis.commands.SentinelCommands.sentinel_failover(self,new_master_name)
redis.commands.SentinelCommands.sentinel_flushconfig(self)
redis.commands.SentinelCommands.sentinel_get_master_addr_by_name(self,service_name)
redis.commands.SentinelCommands.sentinel_master(self,service_name)
redis.commands.SentinelCommands.sentinel_masters(self)
redis.commands.SentinelCommands.sentinel_monitor(self,name,ip,port,quorum)
redis.commands.SentinelCommands.sentinel_remove(self,name)
redis.commands.SentinelCommands.sentinel_reset(self,pattern)
redis.commands.SentinelCommands.sentinel_sentinels(self,service_name)
redis.commands.SentinelCommands.sentinel_set(self,name,option,value)
redis.commands.SentinelCommands.sentinel_slaves(self,service_name)
redis.commands.sentinel.SentinelCommands
redis.commands.sentinel.SentinelCommands.sentinel(self,*args)
redis.commands.sentinel.SentinelCommands.sentinel_ckquorum(self,new_master_name)
redis.commands.sentinel.SentinelCommands.sentinel_failover(self,new_master_name)
redis.commands.sentinel.SentinelCommands.sentinel_flushconfig(self)
redis.commands.sentinel.SentinelCommands.sentinel_get_master_addr_by_name(self,service_name)
redis.commands.sentinel.SentinelCommands.sentinel_master(self,service_name)
redis.commands.sentinel.SentinelCommands.sentinel_masters(self)
redis.commands.sentinel.SentinelCommands.sentinel_monitor(self,name,ip,port,quorum)
redis.commands.sentinel.SentinelCommands.sentinel_remove(self,name)
redis.commands.sentinel.SentinelCommands.sentinel_reset(self,pattern)
redis.commands.sentinel.SentinelCommands.sentinel_sentinels(self,service_name)
redis.commands.sentinel.SentinelCommands.sentinel_set(self,name,option,value)
redis.commands.sentinel.SentinelCommands.sentinel_slaves(self,service_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/parser.py----------------------------------------
A:redis.commands.parser.self.commands->r.execute_command('COMMAND')
A:redis.commands.parser.cmd_name->args[0].lower()
A:redis.commands.parser.cmd_name_split->args[0].lower().split()
A:redis.commands.parser.command->args[0].upper()
A:redis.commands.parser.keys->list(args[1:])
A:redis.commands.parser.keys_pos->list(range(command['first_key_pos'], last_key_pos + 1, command['step_count']))
A:redis.commands.parser.message->e.__str__()
A:redis.commands.parser.pubsub_type->args[1].upper()
redis.commands.CommandsParser(self,redis_connection)
redis.commands.CommandsParser._get_moveable_keys(self,redis_conn,*args)
redis.commands.CommandsParser._get_pubsub_keys(self,*args)
redis.commands.CommandsParser.get_keys(self,redis_conn,*args)
redis.commands.CommandsParser.initialize(self,r)
redis.commands.parser.CommandsParser(self,redis_connection)
redis.commands.parser.CommandsParser.__init__(self,redis_connection)
redis.commands.parser.CommandsParser._get_moveable_keys(self,redis_conn,*args)
redis.commands.parser.CommandsParser._get_pubsub_keys(self,*args)
redis.commands.parser.CommandsParser.get_keys(self,redis_conn,*args)
redis.commands.parser.CommandsParser.initialize(self,r)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/__init__.py----------------------------------------
A:redis.commands.graph.__init__.lbls->self.labels()
A:redis.commands.graph.__init__.rels->self.relationshipTypes()
A:redis.commands.graph.__init__.props->self.propertyKeys()
A:redis.commands.graph.__init__.node.alias->random_string()
A:redis.commands.graph.__init__.y->kwagrs.get('y', None)
redis.commands.graph.__init__.Graph(self,client,name=random_string())
redis.commands.graph.__init__.Graph.__init__(self,client,name=random_string())
redis.commands.graph.__init__.Graph._build_params_header(self,params)
redis.commands.graph.__init__.Graph._clear_schema(self)
redis.commands.graph.__init__.Graph._refresh_attributes(self)
redis.commands.graph.__init__.Graph._refresh_labels(self)
redis.commands.graph.__init__.Graph._refresh_relations(self)
redis.commands.graph.__init__.Graph._refresh_schema(self)
redis.commands.graph.__init__.Graph.add_edge(self,edge)
redis.commands.graph.__init__.Graph.add_node(self,node)
redis.commands.graph.__init__.Graph.call_procedure(self,procedure,*args,read_only=False,**kwagrs)
redis.commands.graph.__init__.Graph.get_label(self,idx)
redis.commands.graph.__init__.Graph.get_property(self,idx)
redis.commands.graph.__init__.Graph.get_relation(self,idx)
redis.commands.graph.__init__.Graph.labels(self)
redis.commands.graph.__init__.Graph.name(self)
redis.commands.graph.__init__.Graph.propertyKeys(self)
redis.commands.graph.__init__.Graph.relationshipTypes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/exceptions.py----------------------------------------
redis.commands.graph.exceptions.VersionMismatchException(self,version)
redis.commands.graph.exceptions.VersionMismatchException.__init__(self,version)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/query_result.py----------------------------------------
A:redis.commands.graph.query_result.error->VersionMismatchException(version)
A:redis.commands.graph.query_result.self.header->self.parse_header(raw_result_set)
A:redis.commands.graph.query_result.self.result_set->self.parse_records(raw_result_set)
A:redis.commands.graph.query_result.raw_statistics[idx]->stat.decode()
A:redis.commands.graph.query_result.v->self._get_value(s, raw_statistics)
A:redis.commands.graph.query_result.prop_name->self.graph.get_property(prop[0])
A:redis.commands.graph.query_result.prop_value->self.parse_scalar(prop[1:])
A:redis.commands.graph.query_result.node_id->int(cell[0])
A:redis.commands.graph.query_result.properties->self.parse_entity_properties(cell[4])
A:redis.commands.graph.query_result.edge_id->int(cell[0])
A:redis.commands.graph.query_result.relation->self.graph.get_relation(cell[1])
A:redis.commands.graph.query_result.src_node_id->int(cell[2])
A:redis.commands.graph.query_result.dest_node_id->int(cell[3])
A:redis.commands.graph.query_result.nodes->self.parse_scalar(cell[0])
A:redis.commands.graph.query_result.edges->self.parse_scalar(cell[1])
A:redis.commands.graph.query_result.m->OrderedDict()
A:redis.commands.graph.query_result.n_entries->len(cell)
A:redis.commands.graph.query_result.key->self.parse_string(cell[i])
A:redis.commands.graph.query_result.m[key]->self.parse_scalar(cell[i + 1])
A:redis.commands.graph.query_result.p['latitude']->float(cell[0])
A:redis.commands.graph.query_result.p['longitude']->float(cell[1])
A:redis.commands.graph.query_result.scalar_type->int(cell[0])
A:redis.commands.graph.query_result.scalar->self.parse_point(value)
A:redis.commands.graph.query_result.scalar[i]->self.parse_scalar(array[i])
redis.commands.graph.query_result.QueryResult(self,graph,response,profile=False)
redis.commands.graph.query_result.QueryResult.__init__(self,graph,response,profile=False)
redis.commands.graph.query_result.QueryResult._check_for_errors(self,response)
redis.commands.graph.query_result.QueryResult._get_stat(self,stat)
redis.commands.graph.query_result.QueryResult._get_value(prop,statistics)
redis.commands.graph.query_result.QueryResult.cached_execution(self)
redis.commands.graph.query_result.QueryResult.indices_created(self)
redis.commands.graph.query_result.QueryResult.indices_deleted(self)
redis.commands.graph.query_result.QueryResult.is_empty(self)
redis.commands.graph.query_result.QueryResult.labels_added(self)
redis.commands.graph.query_result.QueryResult.nodes_created(self)
redis.commands.graph.query_result.QueryResult.nodes_deleted(self)
redis.commands.graph.query_result.QueryResult.parse_edge(self,cell)
redis.commands.graph.query_result.QueryResult.parse_entity_properties(self,props)
redis.commands.graph.query_result.QueryResult.parse_header(self,raw_result_set)
redis.commands.graph.query_result.QueryResult.parse_map(self,cell)
redis.commands.graph.query_result.QueryResult.parse_node(self,cell)
redis.commands.graph.query_result.QueryResult.parse_path(self,cell)
redis.commands.graph.query_result.QueryResult.parse_point(self,cell)
redis.commands.graph.query_result.QueryResult.parse_profile(self,response)
redis.commands.graph.query_result.QueryResult.parse_records(self,raw_result_set)
redis.commands.graph.query_result.QueryResult.parse_results(self,raw_result_set)
redis.commands.graph.query_result.QueryResult.parse_scalar(self,cell)
redis.commands.graph.query_result.QueryResult.parse_statistics(self,raw_statistics)
redis.commands.graph.query_result.QueryResult.parse_string(self,cell)
redis.commands.graph.query_result.QueryResult.properties_set(self)
redis.commands.graph.query_result.QueryResult.relationships_created(self)
redis.commands.graph.query_result.QueryResult.relationships_deleted(self)
redis.commands.graph.query_result.QueryResult.run_time_ms(self)
redis.commands.graph.query_result.ResultSetColumnTypes
redis.commands.graph.query_result.ResultSetScalarTypes


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/edge.py----------------------------------------
A:redis.commands.graph.edge.props->','.join((key + ':' + str(quote_string(val)) for (key, val) in sorted(self.properties.items())))
A:redis.commands.graph.edge.res->str(self.src_node)
redis.commands.graph.Edge(self,src_node,relation,dest_node,edge_id=None,properties=None)
redis.commands.graph.Edge.__eq__(self,rhs)
redis.commands.graph.Edge.__str__(self)
redis.commands.graph.Edge.toString(self)
redis.commands.graph.edge.Edge(self,src_node,relation,dest_node,edge_id=None,properties=None)
redis.commands.graph.edge.Edge.__eq__(self,rhs)
redis.commands.graph.edge.Edge.__init__(self,src_node,relation,dest_node,edge_id=None,properties=None)
redis.commands.graph.edge.Edge.__str__(self)
redis.commands.graph.edge.Edge.toString(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/commands.py----------------------------------------
A:redis.commands.graph.commands.response->self.execute_command(*command)
A:redis.commands.graph.commands.plan->self.execute_command('GRAPH.EXPLAIN', self.name, query)
redis.commands.graph.GraphCommands
redis.commands.graph.GraphCommands.bulk(self,**kwargs)
redis.commands.graph.GraphCommands.commit(self)
redis.commands.graph.GraphCommands.config(self,name,value=None,set=False)
redis.commands.graph.GraphCommands.delete(self)
redis.commands.graph.GraphCommands.explain(self,query,params=None)
redis.commands.graph.GraphCommands.flush(self)
redis.commands.graph.GraphCommands.list_keys(self)
redis.commands.graph.GraphCommands.merge(self,pattern)
redis.commands.graph.GraphCommands.profile(self,query)
redis.commands.graph.GraphCommands.query(self,q,params=None,timeout=None,read_only=False,profile=False)
redis.commands.graph.GraphCommands.slowlog(self)
redis.commands.graph.commands.GraphCommands
redis.commands.graph.commands.GraphCommands.bulk(self,**kwargs)
redis.commands.graph.commands.GraphCommands.commit(self)
redis.commands.graph.commands.GraphCommands.config(self,name,value=None,set=False)
redis.commands.graph.commands.GraphCommands.delete(self)
redis.commands.graph.commands.GraphCommands.explain(self,query,params=None)
redis.commands.graph.commands.GraphCommands.flush(self)
redis.commands.graph.commands.GraphCommands.list_keys(self)
redis.commands.graph.commands.GraphCommands.merge(self,pattern)
redis.commands.graph.commands.GraphCommands.profile(self,query)
redis.commands.graph.commands.GraphCommands.query(self,q,params=None,timeout=None,read_only=False,profile=False)
redis.commands.graph.commands.GraphCommands.slowlog(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/node.py----------------------------------------
A:redis.commands.graph.node.props->','.join((key + ':' + str(quote_string(val)) for (key, val) in sorted(self.properties.items())))
redis.commands.graph.Node(self,node_id=None,alias=None,label=None,properties=None)
redis.commands.graph.Node.__eq__(self,rhs)
redis.commands.graph.Node.__str__(self)
redis.commands.graph.Node.toString(self)
redis.commands.graph.node.Node(self,node_id=None,alias=None,label=None,properties=None)
redis.commands.graph.node.Node.__eq__(self,rhs)
redis.commands.graph.node.Node.__init__(self,node_id=None,alias=None,label=None,properties=None)
redis.commands.graph.node.Node.__str__(self)
redis.commands.graph.node.Node.toString(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/graph/path.py----------------------------------------
A:redis.commands.graph.path.edge_count->self.edge_count()
A:redis.commands.graph.path.edge->self.get_relationship(i)
redis.commands.graph.Path(self,nodes,edges)
redis.commands.graph.Path.__eq__(self,other)
redis.commands.graph.Path.__str__(self)
redis.commands.graph.Path.add_edge(self,edge)
redis.commands.graph.Path.add_node(self,node)
redis.commands.graph.Path.edge_count(self)
redis.commands.graph.Path.edges(self)
redis.commands.graph.Path.first_node(self)
redis.commands.graph.Path.get_node(self,index)
redis.commands.graph.Path.get_relationship(self,index)
redis.commands.graph.Path.last_node(self)
redis.commands.graph.Path.new_empty_path(cls)
redis.commands.graph.Path.nodes(self)
redis.commands.graph.Path.nodes_count(self)
redis.commands.graph.path.Path(self,nodes,edges)
redis.commands.graph.path.Path.__eq__(self,other)
redis.commands.graph.path.Path.__init__(self,nodes,edges)
redis.commands.graph.path.Path.__str__(self)
redis.commands.graph.path.Path.add_edge(self,edge)
redis.commands.graph.path.Path.add_node(self,node)
redis.commands.graph.path.Path.edge_count(self)
redis.commands.graph.path.Path.edges(self)
redis.commands.graph.path.Path.first_node(self)
redis.commands.graph.path.Path.get_node(self,index)
redis.commands.graph.path.Path.get_relationship(self,index)
redis.commands.graph.path.Path.last_node(self)
redis.commands.graph.path.Path.new_empty_path(cls)
redis.commands.graph.path.Path.nodes(self)
redis.commands.graph.path.Path.nodes_count(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/json/__init__.py----------------------------------------
A:redis.commands.json.__init__.x->self.__decoder__.decode(obj)
A:redis.commands.json.__init__.p->Pipeline(connection_pool=self.client.connection_pool, response_callbacks=self.MODULE_CALLBACKS, transaction=transaction, shard_hint=shard_hint)
redis.commands.json.__init__.JSON(self,client,version=None,decoder=JSONDecoder(),encoder=JSONEncoder())
redis.commands.json.__init__.JSON.__init__(self,client,version=None,decoder=JSONDecoder(),encoder=JSONEncoder())
redis.commands.json.__init__.JSON._decode(self,obj)
redis.commands.json.__init__.JSON._encode(self,obj)
redis.commands.json.__init__.JSON.pipeline(self,transaction=True,shard_hint=None)
redis.commands.json.__init__.Pipeline(JSONCommands,redis.client.Pipeline)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/json/decoders.py----------------------------------------
A:redis.commands.json.decoders.b[index]->d(item)
A:redis.commands.json.decoders.newobj->copy.copy(obj)
A:redis.commands.json.decoders.match->re.findall(intreg, obj)
redis.commands.json.bulk_of_jsons(d)
redis.commands.json.decode_list(b)
redis.commands.json.decoders.bulk_of_jsons(d)
redis.commands.json.decoders.decode_dict_keys(obj)
redis.commands.json.decoders.decode_list(b)
redis.commands.json.decoders.unstring(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/json/commands.py----------------------------------------
A:redis.commands.json.commands.obj->decode_dict_keys(obj)
A:redis.commands.json.commands.file_content->loads(fp.read())
A:redis.commands.json.commands.file_path->os.path.join(root, file)
redis.commands.json.JSONCommands
redis.commands.json.JSONCommands.arrappend(self,name,path=Path.rootPath(),*args)
redis.commands.json.JSONCommands.arrindex(self,name,path,scalar,start=0,stop=-1)
redis.commands.json.JSONCommands.arrinsert(self,name,path,index,*args)
redis.commands.json.JSONCommands.arrlen(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.arrpop(self,name,path=Path.rootPath(),index=-1)
redis.commands.json.JSONCommands.arrtrim(self,name,path,start,stop)
redis.commands.json.JSONCommands.clear(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.debug(self,subcommand,key=None,path=Path.rootPath())
redis.commands.json.JSONCommands.delete(self,key,path=Path.rootPath())
redis.commands.json.JSONCommands.get(self,name,*args,no_escape=False)
redis.commands.json.JSONCommands.jsonget(self,*args,**kwargs)
redis.commands.json.JSONCommands.jsonmget(self,*args,**kwargs)
redis.commands.json.JSONCommands.jsonset(self,*args,**kwargs)
redis.commands.json.JSONCommands.mget(self,keys,path)
redis.commands.json.JSONCommands.numincrby(self,name,path,number)
redis.commands.json.JSONCommands.nummultby(self,name,path,number)
redis.commands.json.JSONCommands.objkeys(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.objlen(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.resp(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.set(self,name,path,obj,nx=False,xx=False,decode_keys=False)
redis.commands.json.JSONCommands.set_file(self,name,path,file_name,nx=False,xx=False,decode_keys=False)
redis.commands.json.JSONCommands.set_path(self,json_path,root_folder,nx=False,xx=False,decode_keys=False)
redis.commands.json.JSONCommands.strappend(self,name,value,path=Path.rootPath())
redis.commands.json.JSONCommands.strlen(self,name,path=None)
redis.commands.json.JSONCommands.toggle(self,name,path=Path.rootPath())
redis.commands.json.JSONCommands.type(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands
redis.commands.json.commands.JSONCommands.arrappend(self,name,path=Path.rootPath(),*args)
redis.commands.json.commands.JSONCommands.arrindex(self,name,path,scalar,start=0,stop=-1)
redis.commands.json.commands.JSONCommands.arrinsert(self,name,path,index,*args)
redis.commands.json.commands.JSONCommands.arrlen(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.arrpop(self,name,path=Path.rootPath(),index=-1)
redis.commands.json.commands.JSONCommands.arrtrim(self,name,path,start,stop)
redis.commands.json.commands.JSONCommands.clear(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.debug(self,subcommand,key=None,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.delete(self,key,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.get(self,name,*args,no_escape=False)
redis.commands.json.commands.JSONCommands.jsonget(self,*args,**kwargs)
redis.commands.json.commands.JSONCommands.jsonmget(self,*args,**kwargs)
redis.commands.json.commands.JSONCommands.jsonset(self,*args,**kwargs)
redis.commands.json.commands.JSONCommands.mget(self,keys,path)
redis.commands.json.commands.JSONCommands.numincrby(self,name,path,number)
redis.commands.json.commands.JSONCommands.nummultby(self,name,path,number)
redis.commands.json.commands.JSONCommands.objkeys(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.objlen(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.resp(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.set(self,name,path,obj,nx=False,xx=False,decode_keys=False)
redis.commands.json.commands.JSONCommands.set_file(self,name,path,file_name,nx=False,xx=False,decode_keys=False)
redis.commands.json.commands.JSONCommands.set_path(self,json_path,root_folder,nx=False,xx=False,decode_keys=False)
redis.commands.json.commands.JSONCommands.strappend(self,name,value,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.strlen(self,name,path=None)
redis.commands.json.commands.JSONCommands.toggle(self,name,path=Path.rootPath())
redis.commands.json.commands.JSONCommands.type(self,name,path=Path.rootPath())


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/json/path.py----------------------------------------
redis.commands.json.path.Path(self,path)
redis.commands.json.path.Path.__init__(self,path)
redis.commands.json.path.Path.__repr__(self)
redis.commands.json.path.Path.rootPath()


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/__init__.py----------------------------------------
A:redis.commands.search.__init__.self.pipeline->client.pipeline(transaction=False, shard_hint=None)
redis.commands.search.__init__.Search(self,client,index_name='idx')
redis.commands.search.__init__.Search.BatchIndexer(self,client,chunk_size=1000)
redis.commands.search.__init__.Search.BatchIndexer.__del__(self)
redis.commands.search.__init__.Search.BatchIndexer.__init__(self,client,chunk_size=1000)
redis.commands.search.__init__.Search.BatchIndexer.add_document(self,doc_id,nosave=False,score=1.0,payload=None,replace=False,partial=False,no_create=False,**fields)
redis.commands.search.__init__.Search.BatchIndexer.add_document_hash(self,doc_id,score=1.0,replace=False)
redis.commands.search.__init__.Search.BatchIndexer.commit(self)
redis.commands.search.__init__.Search.__init__(self,client,index_name='idx')


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/querystring.py----------------------------------------
A:redis.commands.search.querystring.self.v->str(v)
A:redis.commands.search.querystring.curvals->kvparams.setdefault(k, [])
A:redis.commands.search.querystring.s->BaseNode(f'@{key}:({self.JOINSTR.join((v.to_string() for v in vals))})')
A:redis.commands.search.querystring.with_parens->self._should_use_paren(with_parens)
A:redis.commands.search.querystring.self.s->str(s)
A:redis.commands.search.querystring.ret->super().to_string(with_parens=False)
redis.commands.search.querystring.BaseNode(self,s)
redis.commands.search.querystring.BaseNode.__init__(self,s)
redis.commands.search.querystring.BaseNode.to_string(self,with_parens=None)
redis.commands.search.querystring.DisjunctNode(IntersectNode)
redis.commands.search.querystring.DisjunctNode.to_string(self,with_parens=None)
redis.commands.search.querystring.DistjunctUnion(DisjunctNode)
redis.commands.search.querystring.GeoValue(self,lon,lat,radius,unit='km')
redis.commands.search.querystring.GeoValue.__init__(self,lon,lat,radius,unit='km')
redis.commands.search.querystring.IntersectNode(Node)
redis.commands.search.querystring.Node(self,*children,**kwparams)
redis.commands.search.querystring.Node.JOINSTR(self)
redis.commands.search.querystring.Node.__init__(self,*children,**kwparams)
redis.commands.search.querystring.Node.__str__(self)
redis.commands.search.querystring.Node._should_use_paren(self,optval)
redis.commands.search.querystring.Node.join_fields(self,key,vals)
redis.commands.search.querystring.Node.to_node(cls,obj)
redis.commands.search.querystring.Node.to_string(self,with_parens=None)
redis.commands.search.querystring.OptionalNode(IntersectNode)
redis.commands.search.querystring.OptionalNode.to_string(self,with_parens=None)
redis.commands.search.querystring.RangeValue(self,a,b,inclusive_min=False,inclusive_max=False)
redis.commands.search.querystring.RangeValue.__init__(self,a,b,inclusive_min=False,inclusive_max=False)
redis.commands.search.querystring.RangeValue.to_string(self)
redis.commands.search.querystring.ScalarValue(self,v)
redis.commands.search.querystring.ScalarValue.__init__(self,v)
redis.commands.search.querystring.ScalarValue.to_string(self)
redis.commands.search.querystring.TagValue(self,*tags)
redis.commands.search.querystring.TagValue.__init__(self,*tags)
redis.commands.search.querystring.TagValue.to_string(self)
redis.commands.search.querystring.UnionNode(Node)
redis.commands.search.querystring.Value
redis.commands.search.querystring.Value.__str__(self)
redis.commands.search.querystring.Value.combinable(self)
redis.commands.search.querystring.Value.make_value(v)
redis.commands.search.querystring.Value.to_string(self)
redis.commands.search.querystring.between(a,b,inclusive_min=True,inclusive_max=True)
redis.commands.search.querystring.disjunct(*args,**kwargs)
redis.commands.search.querystring.disjunct_union(*args,**kwargs)
redis.commands.search.querystring.equal(n)
redis.commands.search.querystring.ge(n)
redis.commands.search.querystring.geo(lat,lon,radius,unit='km')
redis.commands.search.querystring.gt(n)
redis.commands.search.querystring.intersect(*args,**kwargs)
redis.commands.search.querystring.le(n)
redis.commands.search.querystring.lt(n)
redis.commands.search.querystring.querystring(*args,**kwargs)
redis.commands.search.querystring.tags(*t)
redis.commands.search.querystring.union(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/_util.py----------------------------------------
redis.commands.search._util.to_string(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/result.py----------------------------------------
A:redis.commands.search.result.id->to_string(res[i])
redis.commands.search.result.Result(self,res,hascontent,duration=0,has_payload=False,with_scores=False)
redis.commands.search.result.Result.__init__(self,res,hascontent,duration=0,has_payload=False,with_scores=False)
redis.commands.search.result.Result.__repr__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/suggestion.py----------------------------------------
A:redis.commands.search.suggestion.self.string->to_string(string)
A:redis.commands.search.suggestion.self.payload->to_string(payload)
redis.commands.search.suggestion.Suggestion(self,string,score=1.0,payload=None)
redis.commands.search.suggestion.Suggestion.__init__(self,string,score=1.0,payload=None)
redis.commands.search.suggestion.Suggestion.__repr__(self)
redis.commands.search.suggestion.SuggestionParser(self,with_scores,with_payloads,ret)
redis.commands.search.suggestion.SuggestionParser.__init__(self,with_scores,with_payloads,ret)
redis.commands.search.suggestion.SuggestionParser.__iter__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/query.py----------------------------------------
A:redis.commands.search.query.self._filters->list()
A:redis.commands.search.query.fields->self._mk_field_list(fields)
A:redis.commands.search.query.self._sortby->SortbyField(field, asc)
redis.commands.search.query.Filter(self,keyword,field,*args)
redis.commands.search.query.Filter.__init__(self,keyword,field,*args)
redis.commands.search.query.GeoFilter(self,field,lon,lat,radius,unit=KILOMETERS)
redis.commands.search.query.GeoFilter.__init__(self,field,lon,lat,radius,unit=KILOMETERS)
redis.commands.search.query.NumericFilter(self,field,minval,maxval,minExclusive=False,maxExclusive=False)
redis.commands.search.query.NumericFilter.__init__(self,field,minval,maxval,minExclusive=False,maxExclusive=False)
redis.commands.search.query.Query(self,query_string)
redis.commands.search.query.Query.__init__(self,query_string)
redis.commands.search.query.Query._get_args_tags(self)
redis.commands.search.query.Query._mk_field_list(self,fields)
redis.commands.search.query.Query.add_filter(self,flt)
redis.commands.search.query.Query.expander(self,expander)
redis.commands.search.query.Query.get_args(self)
redis.commands.search.query.Query.highlight(self,fields=None,tags=None)
redis.commands.search.query.Query.in_order(self)
redis.commands.search.query.Query.language(self,language)
redis.commands.search.query.Query.limit_fields(self,*fields)
redis.commands.search.query.Query.limit_ids(self,*ids)
redis.commands.search.query.Query.no_content(self)
redis.commands.search.query.Query.no_stopwords(self)
redis.commands.search.query.Query.paging(self,offset,num)
redis.commands.search.query.Query.query_string(self)
redis.commands.search.query.Query.return_field(self,field,as_field=None)
redis.commands.search.query.Query.return_fields(self,*fields)
redis.commands.search.query.Query.scorer(self,scorer)
redis.commands.search.query.Query.slop(self,slop)
redis.commands.search.query.Query.sort_by(self,field,asc=True)
redis.commands.search.query.Query.summarize(self,fields=None,context_len=None,num_frags=None,sep=None)
redis.commands.search.query.Query.verbatim(self)
redis.commands.search.query.Query.with_payloads(self)
redis.commands.search.query.Query.with_scores(self)
redis.commands.search.query.SortbyField(self,field,asc=True)
redis.commands.search.query.SortbyField.__init__(self,field,asc=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/field.py----------------------------------------
A:redis.commands.search.field.self.args_suffix->list()
redis.commands.search.field.Field(self,name,args=[],sortable=False,no_index=False,as_name=None)
redis.commands.search.field.Field.__init__(self,name,args=[],sortable=False,no_index=False,as_name=None)
redis.commands.search.field.Field.append_arg(self,value)
redis.commands.search.field.Field.redis_args(self)
redis.commands.search.field.GeoField(self,name,**kwargs)
redis.commands.search.field.GeoField.__init__(self,name,**kwargs)
redis.commands.search.field.NumericField(self,name,**kwargs)
redis.commands.search.field.NumericField.__init__(self,name,**kwargs)
redis.commands.search.field.TagField(self,name,separator=',',**kwargs)
redis.commands.search.field.TagField.__init__(self,name,separator=',',**kwargs)
redis.commands.search.field.TextField(self,name,weight=1.0,no_stem=False,phonetic_matcher=None,**kwargs)
redis.commands.search.field.TextField.__init__(self,name,weight=1.0,no_stem=False,phonetic_matcher=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/aggregation.py----------------------------------------
A:redis.commands.search.aggregation.FIELDNAME->object()
A:redis.commands.search.aggregation.self._limit->Limit(offset, num)
A:redis.commands.search.aggregation.max->kwargs.get('max', 0)
redis.commands.search.aggregation.AggregateRequest(self,query='*')
redis.commands.search.aggregation.AggregateRequest.__init__(self,query='*')
redis.commands.search.aggregation.AggregateRequest.apply(self,**kwexpr)
redis.commands.search.aggregation.AggregateRequest.build_args(self)
redis.commands.search.aggregation.AggregateRequest.cursor(self,count=0,max_idle=0.0)
redis.commands.search.aggregation.AggregateRequest.filter(self,expressions)
redis.commands.search.aggregation.AggregateRequest.group_by(self,fields,*reducers)
redis.commands.search.aggregation.AggregateRequest.limit(self,offset,num)
redis.commands.search.aggregation.AggregateRequest.load(self,*fields)
redis.commands.search.aggregation.AggregateRequest.sort_by(self,*fields,**kwargs)
redis.commands.search.aggregation.AggregateRequest.verbatim(self)
redis.commands.search.aggregation.AggregateRequest.with_schema(self)
redis.commands.search.aggregation.AggregateResult(self,rows,cursor,schema)
redis.commands.search.aggregation.AggregateResult.__init__(self,rows,cursor,schema)
redis.commands.search.aggregation.AggregateResult.__repr__(self)
redis.commands.search.aggregation.Asc(SortDirection)
redis.commands.search.aggregation.Cursor(self,cid)
redis.commands.search.aggregation.Cursor.__init__(self,cid)
redis.commands.search.aggregation.Cursor.build_args(self)
redis.commands.search.aggregation.Desc(SortDirection)
redis.commands.search.aggregation.Limit(self,offset=0,count=0)
redis.commands.search.aggregation.Limit.__init__(self,offset=0,count=0)
redis.commands.search.aggregation.Limit.build_args(self)
redis.commands.search.aggregation.Reducer(self,*args)
redis.commands.search.aggregation.Reducer.__init__(self,*args)
redis.commands.search.aggregation.Reducer.alias(self,alias)
redis.commands.search.aggregation.Reducer.args(self)
redis.commands.search.aggregation.SortDirection(self,field)
redis.commands.search.aggregation.SortDirection.__init__(self,field)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/commands.py----------------------------------------
A:redis.commands.search.commands.fields->self.client.hgetall(id)
A:redis.commands.search.commands.res->self.execute_command(*cmd)
A:redis.commands.search.commands.it->map(to_string, res)
A:redis.commands.search.commands.query->Query(query)
A:redis.commands.search.commands.(args, query)->self._mk_query_args(query)
A:redis.commands.search.commands.st->time.time()
A:redis.commands.search.commands.(args, query_text)->self._mk_query_args(query)
A:redis.commands.search.commands.has_cursor->bool(query._cursor)
A:redis.commands.search.commands.raw->self.execute_command(SYNDUMP_CMD, self.index_name)
A:redis.commands.search.commands.cursor->Cursor(raw[1])
A:redis.commands.search.commands.result->Result(res[0], not query._no_content, duration=(time.time() - st) * 1000.0, has_payload=query._with_payloads, with_scores=query._with_scores)
A:redis.commands.search.commands.pipe->self.pipeline(transaction=False)
A:redis.commands.search.commands.ret->self.execute_command(*args)
A:redis.commands.search.commands.parser->SuggestionParser(with_scores, with_payloads, ret)
redis.commands.search.SearchCommands
redis.commands.search.SearchCommands._add_document(self,doc_id,conn=None,nosave=False,score=1.0,payload=None,replace=False,partial=False,language=None,no_create=False,**fields)
redis.commands.search.SearchCommands._add_document_hash(self,doc_id,conn=None,score=1.0,language=None,replace=False)
redis.commands.search.SearchCommands._get_AggregateResult(self,raw,query,has_cursor)
redis.commands.search.SearchCommands._mk_query_args(self,query)
redis.commands.search.SearchCommands.add_document(self,doc_id,nosave=False,score=1.0,payload=None,replace=False,partial=False,language=None,no_create=False,**fields)
redis.commands.search.SearchCommands.add_document_hash(self,doc_id,score=1.0,language=None,replace=False)
redis.commands.search.SearchCommands.aggregate(self,query)
redis.commands.search.SearchCommands.aliasadd(self,alias)
redis.commands.search.SearchCommands.aliasdel(self,alias)
redis.commands.search.SearchCommands.aliasupdate(self,alias)
redis.commands.search.SearchCommands.alter_schema_add(self,fields)
redis.commands.search.SearchCommands.batch_indexer(self,chunk_size=100)
redis.commands.search.SearchCommands.config_get(self,option)
redis.commands.search.SearchCommands.config_set(self,option,value)
redis.commands.search.SearchCommands.create_index(self,fields,no_term_offsets=False,no_field_flags=False,stopwords=None,definition=None)
redis.commands.search.SearchCommands.delete_document(self,doc_id,conn=None,delete_actual_document=False)
redis.commands.search.SearchCommands.dict_add(self,name,*terms)
redis.commands.search.SearchCommands.dict_del(self,name,*terms)
redis.commands.search.SearchCommands.dict_dump(self,name)
redis.commands.search.SearchCommands.dropindex(self,delete_documents=False)
redis.commands.search.SearchCommands.explain(self,query)
redis.commands.search.SearchCommands.explain_cli(self,query)
redis.commands.search.SearchCommands.get(self,*ids)
redis.commands.search.SearchCommands.info(self)
redis.commands.search.SearchCommands.load_document(self,id)
redis.commands.search.SearchCommands.profile(self,query,limited=False)
redis.commands.search.SearchCommands.search(self,query)
redis.commands.search.SearchCommands.spellcheck(self,query,distance=None,include=None,exclude=None)
redis.commands.search.SearchCommands.sugadd(self,key,*suggestions,**kwargs)
redis.commands.search.SearchCommands.sugdel(self,key,string)
redis.commands.search.SearchCommands.sugget(self,key,prefix,fuzzy=False,num=10,with_scores=False,with_payloads=False)
redis.commands.search.SearchCommands.suglen(self,key)
redis.commands.search.SearchCommands.syndump(self)
redis.commands.search.SearchCommands.synupdate(self,groupid,skipinitial=False,*terms)
redis.commands.search.SearchCommands.tagvals(self,tagfield)
redis.commands.search.commands.SearchCommands
redis.commands.search.commands.SearchCommands._add_document(self,doc_id,conn=None,nosave=False,score=1.0,payload=None,replace=False,partial=False,language=None,no_create=False,**fields)
redis.commands.search.commands.SearchCommands._add_document_hash(self,doc_id,conn=None,score=1.0,language=None,replace=False)
redis.commands.search.commands.SearchCommands._get_AggregateResult(self,raw,query,has_cursor)
redis.commands.search.commands.SearchCommands._mk_query_args(self,query)
redis.commands.search.commands.SearchCommands.add_document(self,doc_id,nosave=False,score=1.0,payload=None,replace=False,partial=False,language=None,no_create=False,**fields)
redis.commands.search.commands.SearchCommands.add_document_hash(self,doc_id,score=1.0,language=None,replace=False)
redis.commands.search.commands.SearchCommands.aggregate(self,query)
redis.commands.search.commands.SearchCommands.aliasadd(self,alias)
redis.commands.search.commands.SearchCommands.aliasdel(self,alias)
redis.commands.search.commands.SearchCommands.aliasupdate(self,alias)
redis.commands.search.commands.SearchCommands.alter_schema_add(self,fields)
redis.commands.search.commands.SearchCommands.batch_indexer(self,chunk_size=100)
redis.commands.search.commands.SearchCommands.config_get(self,option)
redis.commands.search.commands.SearchCommands.config_set(self,option,value)
redis.commands.search.commands.SearchCommands.create_index(self,fields,no_term_offsets=False,no_field_flags=False,stopwords=None,definition=None)
redis.commands.search.commands.SearchCommands.delete_document(self,doc_id,conn=None,delete_actual_document=False)
redis.commands.search.commands.SearchCommands.dict_add(self,name,*terms)
redis.commands.search.commands.SearchCommands.dict_del(self,name,*terms)
redis.commands.search.commands.SearchCommands.dict_dump(self,name)
redis.commands.search.commands.SearchCommands.dropindex(self,delete_documents=False)
redis.commands.search.commands.SearchCommands.explain(self,query)
redis.commands.search.commands.SearchCommands.explain_cli(self,query)
redis.commands.search.commands.SearchCommands.get(self,*ids)
redis.commands.search.commands.SearchCommands.info(self)
redis.commands.search.commands.SearchCommands.load_document(self,id)
redis.commands.search.commands.SearchCommands.profile(self,query,limited=False)
redis.commands.search.commands.SearchCommands.search(self,query)
redis.commands.search.commands.SearchCommands.spellcheck(self,query,distance=None,include=None,exclude=None)
redis.commands.search.commands.SearchCommands.sugadd(self,key,*suggestions,**kwargs)
redis.commands.search.commands.SearchCommands.sugdel(self,key,string)
redis.commands.search.commands.SearchCommands.sugget(self,key,prefix,fuzzy=False,num=10,with_scores=False,with_payloads=False)
redis.commands.search.commands.SearchCommands.suglen(self,key)
redis.commands.search.commands.SearchCommands.syndump(self)
redis.commands.search.commands.SearchCommands.synupdate(self,groupid,skipinitial=False,*terms)
redis.commands.search.commands.SearchCommands.tagvals(self,tagfield)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/reducers.py----------------------------------------
redis.commands.search.reducers.FieldOnlyReducer(self,field)
redis.commands.search.reducers.FieldOnlyReducer.__init__(self,field)
redis.commands.search.reducers.avg(self,field)
redis.commands.search.reducers.avg.__init__(self,field)
redis.commands.search.reducers.count(self)
redis.commands.search.reducers.count.__init__(self)
redis.commands.search.reducers.count_distinct(self,field)
redis.commands.search.reducers.count_distinct.__init__(self,field)
redis.commands.search.reducers.count_distinctish(FieldOnlyReducer)
redis.commands.search.reducers.first_value(self,field,*byfields)
redis.commands.search.reducers.first_value.__init__(self,field,*byfields)
redis.commands.search.reducers.max(self,field)
redis.commands.search.reducers.max.__init__(self,field)
redis.commands.search.reducers.min(self,field)
redis.commands.search.reducers.min.__init__(self,field)
redis.commands.search.reducers.quantile(self,field,pct)
redis.commands.search.reducers.quantile.__init__(self,field,pct)
redis.commands.search.reducers.random_sample(self,field,size)
redis.commands.search.reducers.random_sample.__init__(self,field,size)
redis.commands.search.reducers.stddev(self,field)
redis.commands.search.reducers.stddev.__init__(self,field)
redis.commands.search.reducers.sum(self,field)
redis.commands.search.reducers.sum.__init__(self,field)
redis.commands.search.reducers.tolist(self,field)
redis.commands.search.reducers.tolist.__init__(self,field)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/document.py----------------------------------------
redis.commands.search.document.Document(self,id,payload=None,**fields)
redis.commands.search.document.Document.__init__(self,id,payload=None,**fields)
redis.commands.search.document.Document.__repr__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/search/indexDefinition.py----------------------------------------
redis.commands.search.indexDefinition.IndexDefinition(self,prefix=[],filter=None,language_field=None,language=None,score_field=None,score=1.0,payload_field=None,index_type=None)
redis.commands.search.indexDefinition.IndexDefinition.__init__(self,prefix=[],filter=None,language_field=None,language=None,score_field=None,score=1.0,payload_field=None,index_type=None)
redis.commands.search.indexDefinition.IndexDefinition._appendFilter(self,filter)
redis.commands.search.indexDefinition.IndexDefinition._appendIndexType(self,index_type)
redis.commands.search.indexDefinition.IndexDefinition._appendLanguage(self,language_field,language)
redis.commands.search.indexDefinition.IndexDefinition._appendPayload(self,payload_field)
redis.commands.search.indexDefinition.IndexDefinition._appendPrefix(self,prefix)
redis.commands.search.indexDefinition.IndexDefinition._appendScore(self,score_field,score)
redis.commands.search.indexDefinition.IndexType(Enum)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/bf/__init__.py----------------------------------------
redis.bf.__init__.AbstractBloom(object)
redis.bf.__init__.AbstractBloom.appendBucketSize(params,bucket_size)
redis.bf.__init__.AbstractBloom.appendCapacity(params,capacity)
redis.bf.__init__.AbstractBloom.appendError(params,error)
redis.bf.__init__.AbstractBloom.appendExpansion(params,expansion)
redis.bf.__init__.AbstractBloom.appendItems(params,items)
redis.bf.__init__.AbstractBloom.appendItemsAndIncrements(params,items,increments)
redis.bf.__init__.AbstractBloom.appendMaxIterations(params,max_iterations)
redis.bf.__init__.AbstractBloom.appendNoCreate(params,noCreate)
redis.bf.__init__.AbstractBloom.appendNoScale(params,noScale)
redis.bf.__init__.AbstractBloom.appendValuesAndWeights(params,items,weights)
redis.bf.__init__.AbstractBloom.appendWeights(params,weights)
redis.bf.__init__.BFBloom(self,client,**kwargs)
redis.bf.__init__.CFBloom(self,client,**kwargs)
redis.bf.__init__.CMSBloom(self,client,**kwargs)
redis.bf.__init__.TDigestBloom(self,client,**kwargs)
redis.bf.__init__.TOPKBloom(self,client,**kwargs)
redis.commands.bf.__init__.AbstractBloom(object)
redis.commands.bf.__init__.AbstractBloom.appendBucketSize(params,bucket_size)
redis.commands.bf.__init__.AbstractBloom.appendCapacity(params,capacity)
redis.commands.bf.__init__.AbstractBloom.appendError(params,error)
redis.commands.bf.__init__.AbstractBloom.appendExpansion(params,expansion)
redis.commands.bf.__init__.AbstractBloom.appendItems(params,items)
redis.commands.bf.__init__.AbstractBloom.appendItemsAndIncrements(params,items,increments)
redis.commands.bf.__init__.AbstractBloom.appendMaxIterations(params,max_iterations)
redis.commands.bf.__init__.AbstractBloom.appendNoCreate(params,noCreate)
redis.commands.bf.__init__.AbstractBloom.appendNoScale(params,noScale)
redis.commands.bf.__init__.AbstractBloom.appendValuesAndWeights(params,items,weights)
redis.commands.bf.__init__.AbstractBloom.appendWeights(params,weights)
redis.commands.bf.__init__.BFBloom(self,client,**kwargs)
redis.commands.bf.__init__.BFBloom.__init__(self,client,**kwargs)
redis.commands.bf.__init__.CFBloom(self,client,**kwargs)
redis.commands.bf.__init__.CFBloom.__init__(self,client,**kwargs)
redis.commands.bf.__init__.CMSBloom(self,client,**kwargs)
redis.commands.bf.__init__.CMSBloom.__init__(self,client,**kwargs)
redis.commands.bf.__init__.TDigestBloom(self,client,**kwargs)
redis.commands.bf.__init__.TDigestBloom.__init__(self,client,**kwargs)
redis.commands.bf.__init__.TOPKBloom(self,client,**kwargs)
redis.commands.bf.__init__.TOPKBloom.__init__(self,client,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/bf/commands.py----------------------------------------
redis.bf.BFCommands
redis.bf.BFCommands.add(self,key,item)
redis.bf.BFCommands.create(self,key,errorRate,capacity,expansion=None,noScale=None)
redis.bf.BFCommands.exists(self,key,item)
redis.bf.BFCommands.info(self,key)
redis.bf.BFCommands.insert(self,key,items,capacity=None,error=None,noCreate=None,expansion=None,noScale=None)
redis.bf.BFCommands.loadchunk(self,key,iter,data)
redis.bf.BFCommands.madd(self,key,*items)
redis.bf.BFCommands.mexists(self,key,*items)
redis.bf.BFCommands.scandump(self,key,iter)
redis.bf.CFCommands
redis.bf.CFCommands.add(self,key,item)
redis.bf.CFCommands.addnx(self,key,item)
redis.bf.CFCommands.count(self,key,item)
redis.bf.CFCommands.create(self,key,capacity,expansion=None,bucket_size=None,max_iterations=None)
redis.bf.CFCommands.delete(self,key,item)
redis.bf.CFCommands.exists(self,key,item)
redis.bf.CFCommands.info(self,key)
redis.bf.CFCommands.insert(self,key,items,capacity=None,nocreate=None)
redis.bf.CFCommands.insertnx(self,key,items,capacity=None,nocreate=None)
redis.bf.CFCommands.loadchunk(self,key,iter,data)
redis.bf.CFCommands.scandump(self,key,iter)
redis.bf.CMSCommands
redis.bf.CMSCommands.incrby(self,key,items,increments)
redis.bf.CMSCommands.info(self,key)
redis.bf.CMSCommands.initbydim(self,key,width,depth)
redis.bf.CMSCommands.initbyprob(self,key,error,probability)
redis.bf.CMSCommands.merge(self,destKey,numKeys,srcKeys,weights=[])
redis.bf.CMSCommands.query(self,key,*items)
redis.bf.TDigestCommands
redis.bf.TDigestCommands.add(self,key,values,weights)
redis.bf.TDigestCommands.cdf(self,key,value)
redis.bf.TDigestCommands.create(self,key,compression)
redis.bf.TDigestCommands.info(self,key)
redis.bf.TDigestCommands.max(self,key)
redis.bf.TDigestCommands.merge(self,toKey,fromKey)
redis.bf.TDigestCommands.min(self,key)
redis.bf.TDigestCommands.quantile(self,key,quantile)
redis.bf.TDigestCommands.reset(self,key)
redis.bf.TOPKCommands
redis.bf.TOPKCommands.add(self,key,*items)
redis.bf.TOPKCommands.count(self,key,*items)
redis.bf.TOPKCommands.incrby(self,key,items,increments)
redis.bf.TOPKCommands.info(self,key)
redis.bf.TOPKCommands.list(self,key,withcount=False)
redis.bf.TOPKCommands.query(self,key,*items)
redis.bf.TOPKCommands.reserve(self,key,k,width,depth,decay)
redis.commands.bf.commands.BFCommands
redis.commands.bf.commands.BFCommands.add(self,key,item)
redis.commands.bf.commands.BFCommands.create(self,key,errorRate,capacity,expansion=None,noScale=None)
redis.commands.bf.commands.BFCommands.exists(self,key,item)
redis.commands.bf.commands.BFCommands.info(self,key)
redis.commands.bf.commands.BFCommands.insert(self,key,items,capacity=None,error=None,noCreate=None,expansion=None,noScale=None)
redis.commands.bf.commands.BFCommands.loadchunk(self,key,iter,data)
redis.commands.bf.commands.BFCommands.madd(self,key,*items)
redis.commands.bf.commands.BFCommands.mexists(self,key,*items)
redis.commands.bf.commands.BFCommands.scandump(self,key,iter)
redis.commands.bf.commands.CFCommands
redis.commands.bf.commands.CFCommands.add(self,key,item)
redis.commands.bf.commands.CFCommands.addnx(self,key,item)
redis.commands.bf.commands.CFCommands.count(self,key,item)
redis.commands.bf.commands.CFCommands.create(self,key,capacity,expansion=None,bucket_size=None,max_iterations=None)
redis.commands.bf.commands.CFCommands.delete(self,key,item)
redis.commands.bf.commands.CFCommands.exists(self,key,item)
redis.commands.bf.commands.CFCommands.info(self,key)
redis.commands.bf.commands.CFCommands.insert(self,key,items,capacity=None,nocreate=None)
redis.commands.bf.commands.CFCommands.insertnx(self,key,items,capacity=None,nocreate=None)
redis.commands.bf.commands.CFCommands.loadchunk(self,key,iter,data)
redis.commands.bf.commands.CFCommands.scandump(self,key,iter)
redis.commands.bf.commands.CMSCommands
redis.commands.bf.commands.CMSCommands.incrby(self,key,items,increments)
redis.commands.bf.commands.CMSCommands.info(self,key)
redis.commands.bf.commands.CMSCommands.initbydim(self,key,width,depth)
redis.commands.bf.commands.CMSCommands.initbyprob(self,key,error,probability)
redis.commands.bf.commands.CMSCommands.merge(self,destKey,numKeys,srcKeys,weights=[])
redis.commands.bf.commands.CMSCommands.query(self,key,*items)
redis.commands.bf.commands.TDigestCommands
redis.commands.bf.commands.TDigestCommands.add(self,key,values,weights)
redis.commands.bf.commands.TDigestCommands.cdf(self,key,value)
redis.commands.bf.commands.TDigestCommands.create(self,key,compression)
redis.commands.bf.commands.TDigestCommands.info(self,key)
redis.commands.bf.commands.TDigestCommands.max(self,key)
redis.commands.bf.commands.TDigestCommands.merge(self,toKey,fromKey)
redis.commands.bf.commands.TDigestCommands.min(self,key)
redis.commands.bf.commands.TDigestCommands.quantile(self,key,quantile)
redis.commands.bf.commands.TDigestCommands.reset(self,key)
redis.commands.bf.commands.TOPKCommands
redis.commands.bf.commands.TOPKCommands.add(self,key,*items)
redis.commands.bf.commands.TOPKCommands.count(self,key,*items)
redis.commands.bf.commands.TOPKCommands.incrby(self,key,items,increments)
redis.commands.bf.commands.TOPKCommands.info(self,key)
redis.commands.bf.commands.TOPKCommands.list(self,key,withcount=False)
redis.commands.bf.commands.TOPKCommands.query(self,key,*items)
redis.commands.bf.commands.TOPKCommands.reserve(self,key,k,width,depth,decay)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/bf/info.py----------------------------------------
A:redis.commands.bf.info.response->dict(zip(map(nativestr, args[::2]), args[1::2]))
redis.commands.bf.BFInfo(self,args)
redis.commands.bf.CFInfo(self,args)
redis.commands.bf.CMSInfo(self,args)
redis.commands.bf.TDigestInfo(self,args)
redis.commands.bf.TopKInfo(self,args)
redis.commands.bf.info.BFInfo(self,args)
redis.commands.bf.info.BFInfo.__init__(self,args)
redis.commands.bf.info.CFInfo(self,args)
redis.commands.bf.info.CFInfo.__init__(self,args)
redis.commands.bf.info.CMSInfo(self,args)
redis.commands.bf.info.CMSInfo.__init__(self,args)
redis.commands.bf.info.TDigestInfo(self,args)
redis.commands.bf.info.TDigestInfo.__init__(self,args)
redis.commands.bf.info.TopKInfo(self,args)
redis.commands.bf.info.TopKInfo.__init__(self,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/timeseries/__init__.py----------------------------------------
A:redis.commands.timeseries.__init__.p->Pipeline(connection_pool=self.client.connection_pool, response_callbacks=self.MODULE_CALLBACKS, transaction=transaction, shard_hint=shard_hint)
redis.commands.timeseries.__init__.Pipeline(TimeSeriesCommands,redis.client.Pipeline)
redis.commands.timeseries.__init__.TimeSeries(self,client=None,**kwargs)
redis.commands.timeseries.__init__.TimeSeries.__init__(self,client=None,**kwargs)
redis.commands.timeseries.__init__.TimeSeries.pipeline(self,transaction=True,shard_hint=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/timeseries/utils.py----------------------------------------
redis.commands.timeseries.parse_get(response)
redis.commands.timeseries.parse_m_get(response)
redis.commands.timeseries.parse_m_range(response)
redis.commands.timeseries.parse_range(response)
redis.commands.timeseries.utils.list_to_dict(aList)
redis.commands.timeseries.utils.parse_get(response)
redis.commands.timeseries.utils.parse_m_get(response)
redis.commands.timeseries.utils.parse_m_range(response)
redis.commands.timeseries.utils.parse_range(response)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/timeseries/commands.py----------------------------------------
A:redis.commands.timeseries.commands.retention_msecs->kwargs.get('retention_msecs', None)
A:redis.commands.timeseries.commands.uncompressed->kwargs.get('uncompressed', False)
A:redis.commands.timeseries.commands.labels->kwargs.get('labels', {})
A:redis.commands.timeseries.commands.chunk_size->kwargs.get('chunk_size', None)
A:redis.commands.timeseries.commands.duplicate_policy->kwargs.get('duplicate_policy', None)
A:redis.commands.timeseries.commands.timestamp->kwargs.get('timestamp', None)
A:redis.commands.timeseries.commands.params->self.__mrange_params(aggregation_type, bucket_size_msec, count, filters, from_time, to_time, with_labels, filter_by_ts, filter_by_min_value, filter_by_max_value, groupby, reduce, select_labels, align)
redis.commands.timeseries.TimeSeriesCommands
redis.commands.timeseries.TimeSeriesCommands.__mrange_params(self,aggregation_type,bucket_size_msec,count,filters,from_time,to_time,with_labels,filter_by_ts,filter_by_min_value,filter_by_max_value,groupby,reduce,select_labels,align)
redis.commands.timeseries.TimeSeriesCommands.__range_params(self,key,from_time,to_time,count,aggregation_type,bucket_size_msec,filter_by_ts,filter_by_min_value,filter_by_max_value,align)
redis.commands.timeseries.TimeSeriesCommands._appendAggregation(params,aggregation_type,bucket_size_msec)
redis.commands.timeseries.TimeSeriesCommands._appendAlign(params,align)
redis.commands.timeseries.TimeSeriesCommands._appendChunkSize(params,chunk_size)
redis.commands.timeseries.TimeSeriesCommands._appendCount(params,count)
redis.commands.timeseries.TimeSeriesCommands._appendDuplicatePolicy(params,command,duplicate_policy)
redis.commands.timeseries.TimeSeriesCommands._appendFilerByTs(params,ts_list)
redis.commands.timeseries.TimeSeriesCommands._appendFilerByValue(params,min_value,max_value)
redis.commands.timeseries.TimeSeriesCommands._appendGroupbyReduce(params,groupby,reduce)
redis.commands.timeseries.TimeSeriesCommands._appendLabels(params,labels)
redis.commands.timeseries.TimeSeriesCommands._appendRetention(params,retention)
redis.commands.timeseries.TimeSeriesCommands._appendTimestamp(params,timestamp)
redis.commands.timeseries.TimeSeriesCommands._appendUncompressed(params,uncompressed)
redis.commands.timeseries.TimeSeriesCommands._appendWithLabels(params,with_labels,select_labels=None)
redis.commands.timeseries.TimeSeriesCommands.add(self,key,timestamp,value,**kwargs)
redis.commands.timeseries.TimeSeriesCommands.alter(self,key,**kwargs)
redis.commands.timeseries.TimeSeriesCommands.create(self,key,**kwargs)
redis.commands.timeseries.TimeSeriesCommands.createrule(self,source_key,dest_key,aggregation_type,bucket_size_msec)
redis.commands.timeseries.TimeSeriesCommands.decrby(self,key,value,**kwargs)
redis.commands.timeseries.TimeSeriesCommands.delete(self,key,from_time,to_time)
redis.commands.timeseries.TimeSeriesCommands.deleterule(self,source_key,dest_key)
redis.commands.timeseries.TimeSeriesCommands.get(self,key)
redis.commands.timeseries.TimeSeriesCommands.incrby(self,key,value,**kwargs)
redis.commands.timeseries.TimeSeriesCommands.info(self,key)
redis.commands.timeseries.TimeSeriesCommands.madd(self,ktv_tuples)
redis.commands.timeseries.TimeSeriesCommands.mget(self,filters,with_labels=False)
redis.commands.timeseries.TimeSeriesCommands.mrange(self,from_time,to_time,filters,count=None,aggregation_type=None,bucket_size_msec=0,with_labels=False,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,groupby=None,reduce=None,select_labels=None,align=None)
redis.commands.timeseries.TimeSeriesCommands.mrevrange(self,from_time,to_time,filters,count=None,aggregation_type=None,bucket_size_msec=0,with_labels=False,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,groupby=None,reduce=None,select_labels=None,align=None)
redis.commands.timeseries.TimeSeriesCommands.queryindex(self,filters)
redis.commands.timeseries.TimeSeriesCommands.range(self,key,from_time,to_time,count=None,aggregation_type=None,bucket_size_msec=0,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,align=None)
redis.commands.timeseries.TimeSeriesCommands.revrange(self,key,from_time,to_time,count=None,aggregation_type=None,bucket_size_msec=0,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,align=None)
redis.commands.timeseries.commands.TimeSeriesCommands
redis.commands.timeseries.commands.TimeSeriesCommands.__mrange_params(self,aggregation_type,bucket_size_msec,count,filters,from_time,to_time,with_labels,filter_by_ts,filter_by_min_value,filter_by_max_value,groupby,reduce,select_labels,align)
redis.commands.timeseries.commands.TimeSeriesCommands.__range_params(self,key,from_time,to_time,count,aggregation_type,bucket_size_msec,filter_by_ts,filter_by_min_value,filter_by_max_value,align)
redis.commands.timeseries.commands.TimeSeriesCommands._appendAggregation(params,aggregation_type,bucket_size_msec)
redis.commands.timeseries.commands.TimeSeriesCommands._appendAlign(params,align)
redis.commands.timeseries.commands.TimeSeriesCommands._appendChunkSize(params,chunk_size)
redis.commands.timeseries.commands.TimeSeriesCommands._appendCount(params,count)
redis.commands.timeseries.commands.TimeSeriesCommands._appendDuplicatePolicy(params,command,duplicate_policy)
redis.commands.timeseries.commands.TimeSeriesCommands._appendFilerByTs(params,ts_list)
redis.commands.timeseries.commands.TimeSeriesCommands._appendFilerByValue(params,min_value,max_value)
redis.commands.timeseries.commands.TimeSeriesCommands._appendGroupbyReduce(params,groupby,reduce)
redis.commands.timeseries.commands.TimeSeriesCommands._appendLabels(params,labels)
redis.commands.timeseries.commands.TimeSeriesCommands._appendRetention(params,retention)
redis.commands.timeseries.commands.TimeSeriesCommands._appendTimestamp(params,timestamp)
redis.commands.timeseries.commands.TimeSeriesCommands._appendUncompressed(params,uncompressed)
redis.commands.timeseries.commands.TimeSeriesCommands._appendWithLabels(params,with_labels,select_labels=None)
redis.commands.timeseries.commands.TimeSeriesCommands.add(self,key,timestamp,value,**kwargs)
redis.commands.timeseries.commands.TimeSeriesCommands.alter(self,key,**kwargs)
redis.commands.timeseries.commands.TimeSeriesCommands.create(self,key,**kwargs)
redis.commands.timeseries.commands.TimeSeriesCommands.createrule(self,source_key,dest_key,aggregation_type,bucket_size_msec)
redis.commands.timeseries.commands.TimeSeriesCommands.decrby(self,key,value,**kwargs)
redis.commands.timeseries.commands.TimeSeriesCommands.delete(self,key,from_time,to_time)
redis.commands.timeseries.commands.TimeSeriesCommands.deleterule(self,source_key,dest_key)
redis.commands.timeseries.commands.TimeSeriesCommands.get(self,key)
redis.commands.timeseries.commands.TimeSeriesCommands.incrby(self,key,value,**kwargs)
redis.commands.timeseries.commands.TimeSeriesCommands.info(self,key)
redis.commands.timeseries.commands.TimeSeriesCommands.madd(self,ktv_tuples)
redis.commands.timeseries.commands.TimeSeriesCommands.mget(self,filters,with_labels=False)
redis.commands.timeseries.commands.TimeSeriesCommands.mrange(self,from_time,to_time,filters,count=None,aggregation_type=None,bucket_size_msec=0,with_labels=False,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,groupby=None,reduce=None,select_labels=None,align=None)
redis.commands.timeseries.commands.TimeSeriesCommands.mrevrange(self,from_time,to_time,filters,count=None,aggregation_type=None,bucket_size_msec=0,with_labels=False,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,groupby=None,reduce=None,select_labels=None,align=None)
redis.commands.timeseries.commands.TimeSeriesCommands.queryindex(self,filters)
redis.commands.timeseries.commands.TimeSeriesCommands.range(self,key,from_time,to_time,count=None,aggregation_type=None,bucket_size_msec=0,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,align=None)
redis.commands.timeseries.commands.TimeSeriesCommands.revrange(self,key,from_time,to_time,count=None,aggregation_type=None,bucket_size_msec=0,filter_by_ts=None,filter_by_min_value=None,filter_by_max_value=None,align=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/redis4.1.0/lib/python3.6/site-packages/redis/commands/timeseries/info.py----------------------------------------
A:redis.commands.timeseries.info.response->dict(zip(map(nativestr, args[::2]), args[1::2]))
A:redis.commands.timeseries.info.self.labels->list_to_dict(response['labels'])
A:redis.commands.timeseries.info.self.duplicate_policy->self.duplicate_policy.decode()
redis.commands.timeseries.TSInfo(self,args)
redis.commands.timeseries.info.TSInfo(self,args)
redis.commands.timeseries.info.TSInfo.__init__(self,args)

