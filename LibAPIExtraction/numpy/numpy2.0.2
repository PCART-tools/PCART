
----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/__init__.py----------------------------------------
A:numpy.__init__.globals()[ta]->getattr(_core, ta)
A:numpy.__init__.__all__->list(__numpy_submodules__ | set(_core.__all__) | set(_mat.__all__) | set(lib._histograms_impl.__all__) | set(lib._nanfunctions_impl.__all__) | set(lib._function_base_impl.__all__) | set(lib._twodim_base_impl.__all__) | set(lib._shape_base_impl.__all__) | set(lib._type_check_impl.__all__) | set(lib._arraysetops_impl.__all__) | set(lib._ufunclike_impl.__all__) | set(lib._arraypad_impl.__all__) | set(lib._utils_impl.__all__) | set(lib._stride_tricks_impl.__all__) | set(lib._polynomial_impl.__all__) | set(lib._npyio_impl.__all__) | set(lib._index_tricks_impl.__all__) | {'emath', 'show_config', '__version__'})
A:numpy.__init__.test->PytestTester(__name__)
A:numpy.__init__.x->linspace(0, 2, 5)
A:numpy.__init__.c->array([3.0, 2.0, 1.0])
A:numpy.__init__.y->polyval(c, x)
A:numpy.__init__._->polyfit(x, y, 2, cov=True)
A:numpy.__init__.msg->'Polyfit sanity test emitted a warning, most likely due to using a buggy Accelerate backend.\nIf you compiled yourself, more information is available at:\nhttps://numpy.org/devdocs/building/index.html\nOtherwise report this to the vendor that provided NumPy.\n\n{}\n'.format(error_message)
A:numpy.__init__.use_hugepage->int(use_hugepage)
A:numpy.__init__.kernel_version->tuple((int(v) for v in kernel_version))


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/__init__.pyi----------------------------------------
numpy.__init__._ArrayOrScalarCommon
numpy.__init__._ArrayOrScalarCommon.T(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__array_interface__(self)->dict[str, Any]
numpy.__init__._ArrayOrScalarCommon.__array_priority__(self)->float
numpy.__init__._ArrayOrScalarCommon.__array_struct__(self)->Any
numpy.__init__._ArrayOrScalarCommon.__bool__(self)->builtins.bool
numpy.__init__._ArrayOrScalarCommon.__bytes__(self)->bytes
numpy.__init__._ArrayOrScalarCommon.__copy__(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__deepcopy__(self:_ArraySelf,memo:None|dict[int,Any],/)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__eq__(self,other:Any)->Any
numpy.__init__._ArrayOrScalarCommon.__ne__(self,other:Any)->Any
numpy.__init__._ArrayOrScalarCommon.__repr__(self)->str
numpy.__init__._ArrayOrScalarCommon.__setstate__(self,state:tuple[SupportsIndex,_ShapeLike,_DType_co,np.bool,bytes|list[Any]],/)->None
numpy.__init__._ArrayOrScalarCommon.__str__(self)->str
numpy.__init__._ArrayOrScalarCommon.all(self,axis:None=...,out:None=...,keepdims:L[False]=...,*,where:_ArrayLikeBool_co=...)->np.bool
numpy.__init__._ArrayOrScalarCommon.all(self,axis:None|_ShapeLike=...,out:None=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.all(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.any(self,axis:None=...,out:None=...,keepdims:L[False]=...,*,where:_ArrayLikeBool_co=...)->np.bool
numpy.__init__._ArrayOrScalarCommon.any(self,axis:None|_ShapeLike=...,out:None=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.any(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:None=...,out:None=...,*,keepdims:L[False]=...)->intp
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:None|SupportsIndex=...,out:_NdArraySubClass=...,*,keepdims:builtins.bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:SupportsIndex=...,out:None=...,*,keepdims:builtins.bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:None=...,out:None=...,*,keepdims:L[False]=...)->intp
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:None|SupportsIndex=...,out:_NdArraySubClass=...,*,keepdims:builtins.bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:SupportsIndex=...,out:None=...,*,keepdims:builtins.bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.argsort(self,axis:None|SupportsIndex=...,kind:None|_SortKind=...,order:None|str|Sequence[str]=...,*,stable:None|bool=...)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.choose(self,choices:ArrayLike,out:None=...,mode:_ModeKind=...)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.choose(self,choices:ArrayLike,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.clip(self,min:ArrayLike=...,max:None|ArrayLike=...,out:None=...,**kwargs:Any)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.clip(self,min:ArrayLike=...,max:None|ArrayLike=...,out:_NdArraySubClass=...,**kwargs:Any)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.clip(self,min:None=...,max:ArrayLike=...,out:None=...,**kwargs:Any)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.clip(self,min:None=...,max:ArrayLike=...,out:_NdArraySubClass=...,**kwargs:Any)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.compress(self,a:ArrayLike,axis:None|SupportsIndex=...,out:None=...)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.compress(self,a:ArrayLike,axis:None|SupportsIndex=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.conj(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.conjugate(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.copy(self:_ArraySelf,order:_OrderKACF=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.cumprod(self,axis:None|SupportsIndex=...,dtype:DTypeLike=...,out:None=...)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.cumprod(self,axis:None|SupportsIndex=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.cumsum(self,axis:None|SupportsIndex=...,dtype:DTypeLike=...,out:None=...)->NDArray[Any]
numpy.__init__._ArrayOrScalarCommon.cumsum(self,axis:None|SupportsIndex=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.data(self)->memoryview
numpy.__init__._ArrayOrScalarCommon.dump(self,file:str|bytes|os.PathLike[str]|os.PathLike[bytes]|_SupportsWrite[bytes])->None
numpy.__init__._ArrayOrScalarCommon.dumps(self)->bytes
numpy.__init__._ArrayOrScalarCommon.flags(self)->flagsobj
numpy.__init__._ArrayOrScalarCommon.itemsize(self)->int
numpy.__init__._ArrayOrScalarCommon.mT(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.max(self,axis:None|_ShapeLike=...,out:None=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.max(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.mean(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.mean(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.min(self,axis:None|_ShapeLike=...,out:None=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.min(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.nbytes(self)->int
numpy.__init__._ArrayOrScalarCommon.prod(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.prod(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.round(self,decimals:SupportsIndex=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.round(self:_ArraySelf,decimals:SupportsIndex=...,out:None=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.std(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None=...,ddof:float=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.std(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:float=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.sum(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.sum(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:builtins.bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.tobytes(self,order:_OrderKACF=...)->bytes
numpy.__init__._ArrayOrScalarCommon.tofile(self,fid:str|bytes|os.PathLike[str]|os.PathLike[bytes]|_IOProtocol,sep:str=...,format:str=...)->None
numpy.__init__._ArrayOrScalarCommon.tolist(self)->Any
numpy.__init__._ArrayOrScalarCommon.var(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None=...,ddof:float=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.var(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:float=...,keepdims:builtins.bool=...,*,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._CopyMode(enum.Enum)
numpy.__init__._DatetimeScalar(Protocol)
numpy.__init__._DatetimeScalar.day(self)->int
numpy.__init__._DatetimeScalar.month(self)->int
numpy.__init__._DatetimeScalar.year(self)->int
numpy.__init__._IOProtocol(Protocol)
numpy.__init__._IOProtocol.fileno(self)->int
numpy.__init__._IOProtocol.flush(self)->object
numpy.__init__._IOProtocol.seek(self,offset:int,whence:int,/)->object
numpy.__init__._IOProtocol.tell(self)->SupportsIndex
numpy.__init__._MemMapIOProtocol(Protocol)
numpy.__init__._MemMapIOProtocol.fileno(self)->SupportsIndex
numpy.__init__._MemMapIOProtocol.flush(self)->object
numpy.__init__._MemMapIOProtocol.read(self)->object
numpy.__init__._MemMapIOProtocol.seek(self,offset:int,whence:int,/)->object
numpy.__init__._MemMapIOProtocol.tell(self)->int
numpy.__init__._MemMapIOProtocol.write(self,s:bytes,/)->object
numpy.__init__._SupportsDLPack(Protocol[_T_contra])
numpy.__init__._SupportsDLPack.__dlpack__(self,*,stream:None|_T_contra=...)->_PyCapsule
numpy.__init__._SupportsImag(Protocol[_T_co])
numpy.__init__._SupportsImag.imag(self)->_T_co
numpy.__init__._SupportsItem(Protocol[_T_co])
numpy.__init__._SupportsItem.item(self,args:Any,/)->_T_co
numpy.__init__._SupportsReal(Protocol[_T_co])
numpy.__init__._SupportsReal.real(self)->_T_co
numpy.__init__._SupportsWrite(Protocol[_AnyStr_contra])
numpy.__init__._SupportsWrite.write(self,s:_AnyStr_contra,/)->object
numpy.__init__._get_promotion_state()->str
numpy.__init__._no_nep50_warning()->Generator[None, None, None]
numpy.__init__._set_promotion_state(state:str,/)->None
numpy.__init__.bool(self,value:object=...,/)
numpy.__init__.bool.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool.__complex__(self)->complex
numpy.__init__.bool.__float__(self)->float
numpy.__init__.bool.__init__(self,value:object=...,/)
numpy.__init__.bool.__int__(self)->int
numpy.__init__.bool.__invert__(self)->np.bool
numpy.__init__.bool.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->builtins.bool
numpy.__init__.bool.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool.tolist(self)->builtins.bool
numpy.__init__.broadcast(cls,*args:ArrayLike)
numpy.__init__.broadcast.__iter__(self:_T)->_T
numpy.__init__.broadcast.__new__(cls,*args:ArrayLike)
numpy.__init__.broadcast.__next__(self)->tuple[Any, ...]
numpy.__init__.broadcast.index(self)->int
numpy.__init__.broadcast.iters(self)->tuple[flatiter[Any], ...]
numpy.__init__.broadcast.nd(self)->int
numpy.__init__.broadcast.ndim(self)->int
numpy.__init__.broadcast.numiter(self)->int
numpy.__init__.broadcast.reset(self)->None
numpy.__init__.broadcast.shape(self)->_Shape
numpy.__init__.broadcast.size(self)->int
numpy.__init__.busdaycalendar(cls,weekmask:ArrayLike=...,holidays:ArrayLike|dt.date|_NestedSequence[dt.date]=...)
numpy.__init__.busdaycalendar.__new__(cls,weekmask:ArrayLike=...,holidays:ArrayLike|dt.date|_NestedSequence[dt.date]=...)
numpy.__init__.busdaycalendar.holidays(self)->NDArray[datetime64]
numpy.__init__.busdaycalendar.weekmask(self)->NDArray[np.bool]
numpy.__init__.bytes_(self,value:str,/,encoding:str=...,errors:str=...)
numpy.__init__.bytes_.__init__(self,value:str,/,encoding:str=...,errors:str=...)
numpy.__init__.bytes_.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->bytes
numpy.__init__.bytes_.tolist(self)->bytes
numpy.__init__.character(flexible)
numpy.__init__.character.__float__(self)->float
numpy.__init__.character.__int__(self)->int
numpy.__init__.complexfloating(self,value:_ComplexValue=...,/)
numpy.__init__.complexfloating.__abs__(self)->floating[_NBit1]
numpy.__init__.complexfloating.__getnewargs__(self:complex128)->tuple[float, float]
numpy.__init__.complexfloating.__init__(self,value:_ComplexValue=...,/)
numpy.__init__.complexfloating.imag(self)->floating[_NBit2]
numpy.__init__.complexfloating.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->complex
numpy.__init__.complexfloating.real(self)->floating[_NBit1]
numpy.__init__.complexfloating.tolist(self)->complex
numpy.__init__.datetime64(self,value:int,format:_CharLike_co|tuple[_CharLike_co,_IntLike_co],/)
numpy.__init__.datetime64.__add__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__init__(self,value:int,format:_CharLike_co|tuple[_CharLike_co,_IntLike_co],/)
numpy.__init__.datetime64.__radd__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__rsub__(self,other:datetime64)->timedelta64
numpy.__init__.datetime64.__sub__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__sub__(self,other:datetime64)->timedelta64
numpy.__init__.dtype(cls,dtype:type[object],align:builtins.bool=...,copy:builtins.bool=...,metadata:dict[builtins.str,Any]=...)
numpy.__init__.dtype.__class_getitem__(self,item:Any)->GenericAlias
numpy.__init__.dtype.__eq__(self,other:Any)->builtins.bool
numpy.__init__.dtype.__ge__(self,other:DTypeLike)->builtins.bool
numpy.__init__.dtype.__getitem__(self:dtype[void],key:builtins.str|SupportsIndex)->dtype[Any]
numpy.__init__.dtype.__getitem__(self:dtype[void],key:list[builtins.str])->dtype[void]
numpy.__init__.dtype.__gt__(self,other:DTypeLike)->builtins.bool
numpy.__init__.dtype.__hash__(self)->int
numpy.__init__.dtype.__le__(self,other:DTypeLike)->builtins.bool
numpy.__init__.dtype.__lt__(self,other:DTypeLike)->builtins.bool
numpy.__init__.dtype.__mul__(self,value:SupportsIndex)->dtype[void]
numpy.__init__.dtype.__mul__(self:_DType,value:L[1])->_DType
numpy.__init__.dtype.__mul__(self:_FlexDType,value:SupportsIndex)->_FlexDType
numpy.__init__.dtype.__ne__(self,other:Any)->builtins.bool
numpy.__init__.dtype.__new__(cls,dtype:type[object],align:builtins.bool=...,copy:builtins.bool=...,metadata:dict[builtins.str,Any]=...)
numpy.__init__.dtype.__rmul__(self,value:SupportsIndex)->dtype[Any]
numpy.__init__.dtype.__rmul__(self:_FlexDType,value:SupportsIndex)->_FlexDType
numpy.__init__.dtype.alignment(self)->int
numpy.__init__.dtype.base(self)->dtype[Any]
numpy.__init__.dtype.byteorder(self)->builtins.str
numpy.__init__.dtype.char(self)->builtins.str
numpy.__init__.dtype.descr(self)->list[tuple[builtins.str, builtins.str] | tuple[builtins.str, builtins.str, _Shape]]
numpy.__init__.dtype.fields(self)->None | MappingProxyType[builtins.str, tuple[dtype[Any], int] | tuple[dtype[Any], int, Any]]
numpy.__init__.dtype.flags(self)->int
numpy.__init__.dtype.hasobject(self)->builtins.bool
numpy.__init__.dtype.isalignedstruct(self)->builtins.bool
numpy.__init__.dtype.isbuiltin(self)->int
numpy.__init__.dtype.isnative(self)->builtins.bool
numpy.__init__.dtype.itemsize(self)->int
numpy.__init__.dtype.kind(self)->builtins.str
numpy.__init__.dtype.metadata(self)->None | MappingProxyType[builtins.str, Any]
numpy.__init__.dtype.name(self)->builtins.str
numpy.__init__.dtype.ndim(self)->int
numpy.__init__.dtype.newbyteorder(self:_DType,__new_order:_ByteOrder=...)->_DType
numpy.__init__.dtype.num(self)->int
numpy.__init__.dtype.shape(self)->_Shape
numpy.__init__.dtype.str(self)->builtins.str
numpy.__init__.dtype.subdtype(self)->None | tuple[dtype[Any], _Shape]
numpy.__init__.dtype.type(self)->type[_DTypeScalar_co]
numpy.__init__.errstate(self,*,call:_ErrFunc|_SupportsWrite[str]=...,all:None|_ErrKind=...,divide:None|_ErrKind=...,over:None|_ErrKind=...,under:None|_ErrKind=...,invalid:None|_ErrKind=...)
numpy.__init__.errstate.__enter__(self)->None
numpy.__init__.errstate.__exit__(self,exc_type:None|type[BaseException],exc_value:None|BaseException,traceback:None|TracebackType,/)->None
numpy.__init__.errstate.__init__(self,*,call:_ErrFunc|_SupportsWrite[str]=...,all:None|_ErrKind=...,divide:None|_ErrKind=...,over:None|_ErrKind=...,under:None|_ErrKind=...,invalid:None|_ErrKind=...)
numpy.__init__.finfo(cls,dtype:str)
numpy.__init__.finfo.__new__(cls,dtype:str)
numpy.__init__.finfo.smallest_normal(self)->_FloatType
numpy.__init__.finfo.tiny(self)->_FloatType
numpy.__init__.flatiter(Generic[_NdArraySubClass])
numpy.__init__.flatiter.__array__(self,dtype:_DType,/)->ndarray[Any, _DType]
numpy.__init__.flatiter.__array__(self:flatiter[ndarray[Any,_DType]],dtype:None=...,/)->ndarray[Any, _DType]
numpy.__init__.flatiter.__getitem__(self,key:_ArrayLikeInt|slice|ellipsis|tuple[_ArrayLikeInt|slice|ellipsis])->_NdArraySubClass
numpy.__init__.flatiter.__getitem__(self:flatiter[NDArray[_ScalarType]],key:int|integer[Any]|tuple[int|integer[Any]])->_ScalarType
numpy.__init__.flatiter.__iter__(self:_FlatIterSelf)->_FlatIterSelf
numpy.__init__.flatiter.__len__(self)->int
numpy.__init__.flatiter.__next__(self:flatiter[NDArray[_ScalarType]])->_ScalarType
numpy.__init__.flatiter.__setitem__(self,key:_ArrayLikeInt|slice|ellipsis|tuple[_ArrayLikeInt|slice|ellipsis],value:Any)->None
numpy.__init__.flatiter.base(self)->_NdArraySubClass
numpy.__init__.flatiter.coords(self)->_Shape
numpy.__init__.flatiter.copy(self)->_NdArraySubClass
numpy.__init__.flatiter.index(self)->int
numpy.__init__.flexible(generic)
numpy.__init__.floating(self,value:_FloatValue=...,/)
numpy.__init__.floating.__ceil__(self:float64)->int
numpy.__init__.floating.__floor__(self:float64)->int
numpy.__init__.floating.__getformat__(self:float64,typestr:L['double','float'],/)->str
numpy.__init__.floating.__getnewargs__(self:float64)->tuple[float]
numpy.__init__.floating.__init__(self,value:_FloatValue=...,/)
numpy.__init__.floating.__round__(self,ndigits:None=...)->int
numpy.__init__.floating.__round__(self:_ScalarType,ndigits:SupportsIndex)->_ScalarType
numpy.__init__.floating.__trunc__(self:float64)->int
numpy.__init__.floating.as_integer_ratio(self)->tuple[int, int]
numpy.__init__.floating.fromhex(cls:type[float64],string:str,/)->float64
numpy.__init__.floating.hex(self:float64)->str
numpy.__init__.floating.is_integer(self)->builtins.bool
numpy.__init__.floating.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->float
numpy.__init__.floating.tolist(self)->float
numpy.__init__.from_dlpack(obj:_SupportsDLPack[None],/)->NDArray[Any]
numpy.__init__.generic(self,*args:Any,**kwargs:Any)
numpy.__init__.generic.__array__(self,dtype:_DType,/)->ndarray[Any, _DType]
numpy.__init__.generic.__array__(self:_ScalarType,dtype:None=...,/)->NDArray[_ScalarType]
numpy.__init__.generic.__hash__(self)->int
numpy.__init__.generic.__init__(self,*args:Any,**kwargs:Any)
numpy.__init__.generic.astype(self,dtype:DTypeLike,order:_OrderKACF=...,casting:_CastingKind=...,subok:builtins.bool=...,copy:builtins.bool|_CopyMode=...)->Any
numpy.__init__.generic.astype(self,dtype:_DTypeLike[_ScalarType],order:_OrderKACF=...,casting:_CastingKind=...,subok:builtins.bool=...,copy:builtins.bool|_CopyMode=...)->_ScalarType
numpy.__init__.generic.base(self)->None
numpy.__init__.generic.bitwise_count(self,out:None|NDArray[Any]=...,*,where:_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:builtins.bool=...)->Any
numpy.__init__.generic.byteswap(self:_ScalarType,inplace:L[False]=...)->_ScalarType
numpy.__init__.generic.dtype(self:_ScalarType)->_dtype[_ScalarType]
numpy.__init__.generic.flat(self:_ScalarType)->flatiter[NDArray[_ScalarType]]
numpy.__init__.generic.flatten(self:_ScalarType,order:_OrderKACF=...)->NDArray[_ScalarType]
numpy.__init__.generic.getfield(self,dtype:DTypeLike,offset:SupportsIndex=...)->Any
numpy.__init__.generic.getfield(self,dtype:_DTypeLike[_ScalarType],offset:SupportsIndex=...)->_ScalarType
numpy.__init__.generic.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->Any
numpy.__init__.generic.ndim(self)->L[0]
numpy.__init__.generic.ravel(self:_ScalarType,order:_OrderKACF=...)->NDArray[_ScalarType]
numpy.__init__.generic.repeat(self:_ScalarType,repeats:_ArrayLikeInt_co,axis:None|SupportsIndex=...)->NDArray[_ScalarType]
numpy.__init__.generic.reshape(self:_ScalarType,*shape:SupportsIndex,order:_OrderACF=...)->NDArray[_ScalarType]
numpy.__init__.generic.reshape(self:_ScalarType,shape:_ShapeLike,/,*,order:_OrderACF=...)->NDArray[_ScalarType]
numpy.__init__.generic.shape(self)->tuple[()]
numpy.__init__.generic.size(self)->L[1]
numpy.__init__.generic.squeeze(self:_ScalarType,axis:None|L[0]|tuple[()]=...)->_ScalarType
numpy.__init__.generic.strides(self)->tuple[()]
numpy.__init__.generic.take(self,indices:_ArrayLikeInt_co,axis:None|SupportsIndex=...,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__.generic.take(self:_ScalarType,indices:_ArrayLikeInt_co,axis:None|SupportsIndex=...,out:None=...,mode:_ModeKind=...)->NDArray[_ScalarType]
numpy.__init__.generic.take(self:_ScalarType,indices:_IntLike_co,axis:None|SupportsIndex=...,out:None=...,mode:_ModeKind=...)->_ScalarType
numpy.__init__.generic.transpose(self:_ScalarType,axes:None|tuple[()]=...,/)->_ScalarType
numpy.__init__.generic.view(self,dtype:DTypeLike,type:type[NDArray[Any]]=...)->Any
numpy.__init__.generic.view(self,dtype:_DTypeLike[_ScalarType],type:type[NDArray[Any]]=...)->_ScalarType
numpy.__init__.generic.view(self:_ScalarType,type:type[NDArray[Any]]=...)->_ScalarType
numpy.__init__.iinfo(cls,dtype:str)
numpy.__init__.iinfo.__new__(cls,dtype:str)
numpy.__init__.iinfo.max(self)->int
numpy.__init__.iinfo.min(self)->int
numpy.__init__.inexact(number[_NBit1])
numpy.__init__.inexact.__getnewargs__(self:inexact[_64Bit])->tuple[float, ...]
numpy.__init__.integer(number[_NBit1])
numpy.__init__.integer.__and__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__index__(self)->int
numpy.__init__.integer.__invert__(self:_IntType)->_IntType
numpy.__init__.integer.__lshift__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__mod__(self,value:_IntLike_co)->integer[Any]
numpy.__init__.integer.__or__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__rand__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__rlshift__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__rmod__(self,value:_IntLike_co)->integer[Any]
numpy.__init__.integer.__ror__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__round__(self,ndigits:None=...)->int
numpy.__init__.integer.__round__(self:_ScalarType,ndigits:SupportsIndex)->_ScalarType
numpy.__init__.integer.__rrshift__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__rshift__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__rxor__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.__xor__(self,other:_IntLike_co)->integer[Any]
numpy.__init__.integer.bit_count(self:_ScalarType)->int
numpy.__init__.integer.denominator(self)->L[1]
numpy.__init__.integer.is_integer(self)->L[True]
numpy.__init__.integer.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->int
numpy.__init__.integer.numerator(self:_ScalarType)->_ScalarType
numpy.__init__.integer.tolist(self)->int
numpy.__init__.matrix(subtype,data:ArrayLike,dtype:DTypeLike=...,copy:builtins.bool=...)
numpy.__init__.matrix.A(self)->ndarray[_ShapeType, _DType_co]
numpy.__init__.matrix.A1(self)->ndarray[Any, _DType_co]
numpy.__init__.matrix.H(self)->matrix[Any, _DType_co]
numpy.__init__.matrix.I(self)->matrix[Any, Any]
numpy.__init__.matrix.T(self)->matrix[Any, _DType_co]
numpy.__init__.matrix.__array_finalize__(self,obj:object)->None
numpy.__init__.matrix.__getitem__(self,key:None|slice|ellipsis|SupportsIndex|_ArrayLikeInt_co|tuple[None|slice|ellipsis|_ArrayLikeInt_co|SupportsIndex,...])->matrix[Any, _DType_co]
numpy.__init__.matrix.__getitem__(self,key:SupportsIndex|_ArrayLikeInt_co|tuple[SupportsIndex|_ArrayLikeInt_co,...])->Any
numpy.__init__.matrix.__getitem__(self:NDArray[void],key:list[str])->matrix[_ShapeType, dtype[void]]
numpy.__init__.matrix.__getitem__(self:NDArray[void],key:str)->matrix[Any, dtype[Any]]
numpy.__init__.matrix.__imul__(self,other:ArrayLike)->matrix[_ShapeType, _DType_co]
numpy.__init__.matrix.__ipow__(self,other:ArrayLike)->matrix[_ShapeType, _DType_co]
numpy.__init__.matrix.__mul__(self,other:ArrayLike)->matrix[Any, Any]
numpy.__init__.matrix.__new__(subtype,data:ArrayLike,dtype:DTypeLike=...,copy:builtins.bool=...)
numpy.__init__.matrix.__pow__(self,other:ArrayLike)->matrix[Any, Any]
numpy.__init__.matrix.__rmul__(self,other:ArrayLike)->matrix[Any, Any]
numpy.__init__.matrix.all(self,axis:None=...,out:None=...)->np.bool
numpy.__init__.matrix.all(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.all(self,axis:_ShapeLike,out:None=...)->matrix[Any, dtype[np.bool]]
numpy.__init__.matrix.any(self,axis:None=...,out:None=...)->np.bool
numpy.__init__.matrix.any(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.any(self,axis:_ShapeLike,out:None=...)->matrix[Any, dtype[np.bool]]
numpy.__init__.matrix.argmax(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.argmax(self,axis:_ShapeLike,out:None=...)->matrix[Any, dtype[intp]]
numpy.__init__.matrix.argmax(self:NDArray[_ScalarType],axis:None=...,out:None=...)->intp
numpy.__init__.matrix.argmin(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.argmin(self,axis:_ShapeLike,out:None=...)->matrix[Any, dtype[intp]]
numpy.__init__.matrix.argmin(self:NDArray[_ScalarType],axis:None=...,out:None=...)->intp
numpy.__init__.matrix.flatten(self,order:_OrderKACF=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.getA(self)->ndarray[_ShapeType, _DType_co]
numpy.__init__.matrix.getA1(self)->ndarray[Any, _DType_co]
numpy.__init__.matrix.getH(self)->matrix[Any, _DType_co]
numpy.__init__.matrix.getI(self)->matrix[Any, Any]
numpy.__init__.matrix.getT(self)->matrix[Any, _DType_co]
numpy.__init__.matrix.max(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.max(self,axis:_ShapeLike,out:None=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.max(self:NDArray[_ScalarType],axis:None=...,out:None=...)->_ScalarType
numpy.__init__.matrix.mean(self,axis:None=...,dtype:DTypeLike=...,out:None=...)->Any
numpy.__init__.matrix.mean(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.mean(self,axis:_ShapeLike,dtype:DTypeLike=...,out:None=...)->matrix[Any, Any]
numpy.__init__.matrix.min(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.min(self,axis:_ShapeLike,out:None=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.min(self:NDArray[_ScalarType],axis:None=...,out:None=...)->_ScalarType
numpy.__init__.matrix.prod(self,axis:None=...,dtype:DTypeLike=...,out:None=...)->Any
numpy.__init__.matrix.prod(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.prod(self,axis:_ShapeLike,dtype:DTypeLike=...,out:None=...)->matrix[Any, Any]
numpy.__init__.matrix.ptp(self,axis:None|_ShapeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.ptp(self,axis:_ShapeLike,out:None=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.ptp(self:NDArray[_ScalarType],axis:None=...,out:None=...)->_ScalarType
numpy.__init__.matrix.ravel(self,order:_OrderKACF=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.squeeze(self,axis:None|_ShapeLike=...)->matrix[Any, _DType_co]
numpy.__init__.matrix.std(self,axis:None=...,dtype:DTypeLike=...,out:None=...,ddof:float=...)->Any
numpy.__init__.matrix.std(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:float=...)->_NdArraySubClass
numpy.__init__.matrix.std(self,axis:_ShapeLike,dtype:DTypeLike=...,out:None=...,ddof:float=...)->matrix[Any, Any]
numpy.__init__.matrix.sum(self,axis:None=...,dtype:DTypeLike=...,out:None=...)->Any
numpy.__init__.matrix.sum(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.matrix.sum(self,axis:_ShapeLike,dtype:DTypeLike=...,out:None=...)->matrix[Any, Any]
numpy.__init__.matrix.tolist(self:matrix[Any,dtype[_SupportsItem[_T]]])->list[list[_T]]
numpy.__init__.matrix.var(self,axis:None=...,dtype:DTypeLike=...,out:None=...,ddof:float=...)->Any
numpy.__init__.matrix.var(self,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:float=...)->_NdArraySubClass
numpy.__init__.matrix.var(self,axis:_ShapeLike,dtype:DTypeLike=...,out:None=...,ddof:float=...)->matrix[Any, Any]
numpy.__init__.memmap(subtype,filename:str|bytes|os.PathLike[str]|os.PathLike[bytes]|_MemMapIOProtocol,dtype:DTypeLike,mode:_MemMapModeKind=...,offset:int=...,shape:None|int|tuple[int,...]=...,order:_OrderKACF=...)
numpy.__init__.memmap.__array_finalize__(self,obj:object)->None
numpy.__init__.memmap.__array_wrap__(self,array:memmap[_ShapeType,_DType_co],context:None|tuple[ufunc,tuple[Any,...],int]=...,return_scalar:builtins.bool=...)->Any
numpy.__init__.memmap.__new__(subtype,filename:str|bytes|os.PathLike[str]|os.PathLike[bytes]|_MemMapIOProtocol,dtype:DTypeLike,mode:_MemMapModeKind=...,offset:int=...,shape:None|int|tuple[int,...]=...,order:_OrderKACF=...)
numpy.__init__.memmap.flush(self)->None
numpy.__init__.ndarray(cls:type[_ArraySelf],shape:_ShapeLike,dtype:DTypeLike=...,buffer:None|_SupportsBuffer=...,offset:SupportsIndex=...,strides:None|_ShapeLike=...,order:_OrderKACF=...)
numpy.__init__.ndarray.__abs__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__abs__(self:NDArray[_UnknownType])->NDArray[Any]
numpy.__init__.ndarray.__abs__(self:NDArray[complexfloating[_NBit1,_NBit1]])->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__abs__(self:NDArray[np.bool])->NDArray[np.bool]
numpy.__init__.ndarray.__abs__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__abs__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__add__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__add__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__add__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__add__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__add__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__add__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__add__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__add__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__add__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__add__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__add__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__add__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__and__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__and__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__and__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__and__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__and__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__and__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__array__(self,dtype:None=...,/,*,copy:None|bool=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.__array__(self,dtype:_DType,/,*,copy:None|bool=...)->ndarray[Any, _DType]
numpy.__init__.ndarray.__array_finalize__(self,obj:None|NDArray[Any],/)->None
numpy.__init__.ndarray.__array_function__(self,func:Callable[...,Any],types:Iterable[type],args:Iterable[Any],kwargs:Mapping[str,Any])->Any
numpy.__init__.ndarray.__array_namespace__(self,*,api_version:str|None=...)->Any
numpy.__init__.ndarray.__array_ufunc__(self,ufunc:ufunc,method:L['__call__','reduce','reduceat','accumulate','outer','at'],*inputs:Any,**kwargs:Any)->Any
numpy.__init__.ndarray.__array_wrap__(self,array:ndarray[_ShapeType2,_DType],context:None|tuple[ufunc,tuple[Any,...],int]=...,return_scalar:builtins.bool=...,/)->ndarray[_ShapeType2, _DType]
numpy.__init__.ndarray.__class_getitem__(self,item:Any)->GenericAlias
numpy.__init__.ndarray.__complex__(self:NDArray[SupportsComplex])->complex
numpy.__init__.ndarray.__contains__(self,key)->builtins.bool
numpy.__init__.ndarray.__divmod__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->_2Tuple[NDArray[Any]]
numpy.__init__.ndarray.__divmod__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->_2Tuple[NDArray[int8]]
numpy.__init__.ndarray.__divmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->_2Tuple[NDArray[floating[Any]]]
numpy.__init__.ndarray.__divmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->_2Tuple[NDArray[signedinteger[Any]]]
numpy.__init__.ndarray.__divmod__(self:_ArrayTD64_co,other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->tuple[NDArray[int64], NDArray[timedelta64]]
numpy.__init__.ndarray.__divmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->_2Tuple[NDArray[unsignedinteger[Any]]]
numpy.__init__.ndarray.__dlpack__(self:NDArray[number[Any]],*,stream:None=...)->_PyCapsule
numpy.__init__.ndarray.__dlpack_device__(self)->tuple[int, L[0]]
numpy.__init__.ndarray.__float__(self:NDArray[SupportsFloat])->float
numpy.__init__.ndarray.__floordiv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__floordiv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__floordiv__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__floordiv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[int64]
numpy.__init__.ndarray.__floordiv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__floordiv__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__floordiv__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__ge__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ge__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ge__(self:NDArray[object_],other:Any)->NDArray[np.bool]
numpy.__init__.ndarray.__ge__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ge__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__getitem__(self,key:NDArray[integer[Any]]|NDArray[np.bool]|tuple[NDArray[integer[Any]]|NDArray[np.bool],...])->ndarray[Any, _DType_co]
numpy.__init__.ndarray.__getitem__(self,key:None|slice|ellipsis|SupportsIndex|_ArrayLikeInt_co|tuple[None|slice|ellipsis|_ArrayLikeInt_co|SupportsIndex,...])->ndarray[Any, _DType_co]
numpy.__init__.ndarray.__getitem__(self,key:SupportsIndex|tuple[SupportsIndex,...])->Any
numpy.__init__.ndarray.__getitem__(self:NDArray[void],key:list[str])->ndarray[_ShapeType, _dtype[void]]
numpy.__init__.ndarray.__getitem__(self:NDArray[void],key:str)->NDArray[Any]
numpy.__init__.ndarray.__gt__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[np.bool]
numpy.__init__.ndarray.__gt__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__gt__(self:NDArray[object_],other:Any)->NDArray[np.bool]
numpy.__init__.ndarray.__gt__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[np.bool]
numpy.__init__.ndarray.__gt__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__iadd__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__iadd__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__iadd__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__iadd__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__iadd__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[timedelta64],other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__iadd__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__iand__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__iand__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__iand__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__iand__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__iand__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[timedelta64],other:_ArrayLikeInt_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ilshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ilshift__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ilshift__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ilshift__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__imatmul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__imatmul__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__imatmul__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__imatmul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__imatmul__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__imatmul__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__imatmul__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__imod__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__imod__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[timedelta64],other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__imod__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__imul__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__imul__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__imul__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__imul__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__index__(self:NDArray[SupportsIndex])->int
numpy.__init__.ndarray.__int__(self:NDArray[SupportsInt])->int
numpy.__init__.ndarray.__invert__(self:NDArray[_IntType])->NDArray[_IntType]
numpy.__init__.ndarray.__invert__(self:NDArray[_UnknownType])->NDArray[Any]
numpy.__init__.ndarray.__invert__(self:NDArray[np.bool])->NDArray[np.bool]
numpy.__init__.ndarray.__invert__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__ior__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ior__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ior__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ior__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ior__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ipow__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ipow__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__irshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__irshift__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__irshift__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__irshift__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__isub__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__isub__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__isub__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[timedelta64],other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__isub__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__iter__(self)->Any
numpy.__init__.ndarray.__itruediv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__itruediv__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__itruediv__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__itruediv__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__itruediv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__itruediv__(self:NDArray[timedelta64],other:_ArrayLikeInt_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__ixor__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ixor__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ixor__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ixor__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ixor__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co|_IntLike_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__le__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[np.bool]
numpy.__init__.ndarray.__le__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__le__(self:NDArray[object_],other:Any)->NDArray[np.bool]
numpy.__init__.ndarray.__le__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[np.bool]
numpy.__init__.ndarray.__le__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__len__(self)->int
numpy.__init__.ndarray.__lshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__lshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__lshift__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__lshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__lshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__lshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__lt__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[np.bool]
numpy.__init__.ndarray.__lt__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__lt__(self:NDArray[object_],other:Any)->NDArray[np.bool]
numpy.__init__.ndarray.__lt__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[np.bool]
numpy.__init__.ndarray.__lt__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[np.bool]
numpy.__init__.ndarray.__matmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__matmul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__matmul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__matmul__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__matmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__matmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__mod__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__mod__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__mod__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__mod__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__mod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__mod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__mod__(self:_ArrayTD64_co,other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__mod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__mul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__mul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__mul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__mul__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__mul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__mul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__mul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayTD64_co,other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__mul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__neg__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__neg__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__neg__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__new__(cls:type[_ArraySelf],shape:_ShapeLike,dtype:DTypeLike=...,buffer:None|_SupportsBuffer=...,offset:SupportsIndex=...,strides:None|_ShapeLike=...,order:_OrderKACF=...)
numpy.__init__.ndarray.__or__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__or__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__or__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__or__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__or__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__or__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__pos__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__pos__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__pos__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__pow__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__pow__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__pow__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__pow__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__pow__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__pow__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__radd__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__radd__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__radd__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__radd__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__radd__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__radd__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__radd__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__radd__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__radd__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rand__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rand__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rand__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__rand__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rand__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rand__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rdivmod__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->_2Tuple[NDArray[Any]]
numpy.__init__.ndarray.__rdivmod__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->_2Tuple[NDArray[int8]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->_2Tuple[NDArray[floating[Any]]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->_2Tuple[NDArray[signedinteger[Any]]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayTD64_co,other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->tuple[NDArray[int64], NDArray[timedelta64]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->_2Tuple[NDArray[unsignedinteger[Any]]]
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[np.bool],other:_ArrayLikeTD64_co)->NoReturn
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[timedelta64],other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[int64]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rlshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rlshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rlshift__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rlshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rlshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rlshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmatmul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmatmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmod__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmod__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rmod__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rmod__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmod__(self:_ArrayTD64_co,other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__rmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmul__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rmul__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__rmul__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__rmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayTD64_co,other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__ror__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__ror__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__ror__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__ror__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__ror__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__ror__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rpow__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rpow__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rpow__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rpow__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__rpow__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rpow__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rrshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rrshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rrshift__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rrshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rrshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rrshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rshift__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rshift__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rsub__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rsub__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rsub__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rsub__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__rsub__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__rsub__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rsub__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__rsub__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rsub__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rtruediv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rtruediv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rtruediv__(self:NDArray[np.bool],other:_ArrayLikeTD64_co)->NoReturn
numpy.__init__.ndarray.__rtruediv__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__rtruediv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rtruediv__(self:NDArray[timedelta64],other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[float64]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayInt_co,other:_ArrayInt_co)->NDArray[float64]
numpy.__init__.ndarray.__rxor__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rxor__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__rxor__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__rxor__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rxor__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rxor__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__setitem__(self,key,value)
numpy.__init__.ndarray.__sub__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__sub__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__sub__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__sub__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__sub__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__sub__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__sub__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__sub__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__sub__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__truediv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__truediv__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__truediv__(self:NDArray[number[Any]],other:_ArrayLikeNumber_co)->NDArray[number[Any]]
numpy.__init__.ndarray.__truediv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_SupportsArray[_dtype[timedelta64]]|_NestedSequence[_SupportsArray[_dtype[timedelta64]]])->NDArray[float64]
numpy.__init__.ndarray.__truediv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__truediv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__truediv__(self:_ArrayInt_co,other:_ArrayInt_co)->NDArray[float64]
numpy.__init__.ndarray.__xor__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__xor__(self:NDArray[_UnknownType],other:_ArrayLikeUnknown)->NDArray[Any]
numpy.__init__.ndarray.__xor__(self:NDArray[np.bool],other:_ArrayLikeBool_co)->NDArray[np.bool]
numpy.__init__.ndarray.__xor__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__xor__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__xor__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.argpartition(self,kth:_ArrayLikeInt_co,axis:None|SupportsIndex=...,kind:_PartitionKind=...,order:None|str|Sequence[str]=...)->NDArray[intp]
numpy.__init__.ndarray.astype(self,dtype:DTypeLike,order:_OrderKACF=...,casting:_CastingKind=...,subok:builtins.bool=...,copy:builtins.bool|_CopyMode=...)->NDArray[Any]
numpy.__init__.ndarray.astype(self,dtype:_DTypeLike[_ScalarType],order:_OrderKACF=...,casting:_CastingKind=...,subok:builtins.bool=...,copy:builtins.bool|_CopyMode=...)->NDArray[_ScalarType]
numpy.__init__.ndarray.base(self)->None | NDArray[Any]
numpy.__init__.ndarray.bitwise_count(self,out:None|NDArray[Any]=...,*,where:_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:builtins.bool=...)->NDArray[Any]
numpy.__init__.ndarray.byteswap(self:_ArraySelf,inplace:builtins.bool=...)->_ArraySelf
numpy.__init__.ndarray.ctypes(self)->_ctypes[int]
numpy.__init__.ndarray.device(self)->L['cpu']
numpy.__init__.ndarray.diagonal(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.dot(self,b:ArrayLike,out:None=...)->Any
numpy.__init__.ndarray.dot(self,b:ArrayLike,out:_NdArraySubClass)->_NdArraySubClass
numpy.__init__.ndarray.dot(self,b:_ScalarLike_co,out:None=...)->NDArray[Any]
numpy.__init__.ndarray.dtype(self)->_DType_co
numpy.__init__.ndarray.fill(self,value:Any)->None
numpy.__init__.ndarray.flat(self:_NdArraySubClass)->flatiter[_NdArraySubClass]
numpy.__init__.ndarray.flatten(self,order:_OrderKACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.getfield(self,dtype:DTypeLike,offset:SupportsIndex=...)->NDArray[Any]
numpy.__init__.ndarray.getfield(self,dtype:_DTypeLike[_ScalarType],offset:SupportsIndex=...)->NDArray[_ScalarType]
numpy.__init__.ndarray.imag(self,value:ArrayLike)->None
numpy.__init__.ndarray.imag(self:ndarray[_ShapeType,dtype[_SupportsImag[_ScalarType]]])->ndarray[_ShapeType, _dtype[_ScalarType]]
numpy.__init__.ndarray.item(self:ndarray[Any,_dtype[_SupportsItem[_T]]],*args:SupportsIndex)->_T
numpy.__init__.ndarray.item(self:ndarray[Any,_dtype[_SupportsItem[_T]]],args:tuple[SupportsIndex,...],/)->_T
numpy.__init__.ndarray.ndim(self)->int
numpy.__init__.ndarray.nonzero(self)->tuple[NDArray[intp], ...]
numpy.__init__.ndarray.partition(self,kth:_ArrayLikeInt_co,axis:SupportsIndex=...,kind:_PartitionKind=...,order:None|str|Sequence[str]=...)->None
numpy.__init__.ndarray.put(self,ind:_ArrayLikeInt_co,v:ArrayLike,mode:_ModeKind=...)->None
numpy.__init__.ndarray.ravel(self,order:_OrderKACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.real(self,value:ArrayLike)->None
numpy.__init__.ndarray.real(self:ndarray[_ShapeType,dtype[_SupportsReal[_ScalarType]]])->ndarray[_ShapeType, _dtype[_ScalarType]]
numpy.__init__.ndarray.repeat(self,repeats:_ArrayLikeInt_co,axis:None|SupportsIndex=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.reshape(self,*shape:SupportsIndex,order:_OrderACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.reshape(self,shape:_ShapeLike,/,*,order:_OrderACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.resize(self,*new_shape:SupportsIndex,refcheck:builtins.bool=...)->None
numpy.__init__.ndarray.resize(self,new_shape:_ShapeLike,/,*,refcheck:builtins.bool=...)->None
numpy.__init__.ndarray.searchsorted(self,v:ArrayLike,side:_SortSide=...,sorter:None|_ArrayLikeInt_co=...)->NDArray[intp]
numpy.__init__.ndarray.searchsorted(self,v:_ScalarLike_co,side:_SortSide=...,sorter:None|_ArrayLikeInt_co=...)->intp
numpy.__init__.ndarray.setfield(self,val:ArrayLike,dtype:DTypeLike,offset:SupportsIndex=...)->None
numpy.__init__.ndarray.setflags(self,write:builtins.bool=...,align:builtins.bool=...,uic:builtins.bool=...)->None
numpy.__init__.ndarray.shape(self)->_Shape
numpy.__init__.ndarray.shape(self,value:_ShapeLike)->None
numpy.__init__.ndarray.size(self)->int
numpy.__init__.ndarray.sort(self,axis:SupportsIndex=...,kind:None|_SortKind=...,order:None|str|Sequence[str]=...,*,stable:None|bool=...)->None
numpy.__init__.ndarray.squeeze(self,axis:None|SupportsIndex|tuple[SupportsIndex,...]=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.strides(self)->_Shape
numpy.__init__.ndarray.strides(self,value:_ShapeLike)->None
numpy.__init__.ndarray.swapaxes(self,axis1:SupportsIndex,axis2:SupportsIndex)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.take(self,indices:_ArrayLikeInt_co,axis:None|SupportsIndex=...,out:None=...,mode:_ModeKind=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.take(self,indices:_ArrayLikeInt_co,axis:None|SupportsIndex=...,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__.ndarray.take(self:NDArray[_ScalarType],indices:_IntLike_co,axis:None|SupportsIndex=...,out:None=...,mode:_ModeKind=...)->_ScalarType
numpy.__init__.ndarray.to_device(self,device:L['cpu'],/,*,stream:None|int|Any=...)->NDArray[Any]
numpy.__init__.ndarray.trace(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...,dtype:DTypeLike=...,out:None=...)->Any
numpy.__init__.ndarray.trace(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.ndarray.transpose(self:_ArraySelf,*axes:SupportsIndex)->_ArraySelf
numpy.__init__.ndarray.transpose(self:_ArraySelf,axes:None|_ShapeLike,/)->_ArraySelf
numpy.__init__.ndarray.view(self,dtype:DTypeLike)->NDArray[Any]
numpy.__init__.ndarray.view(self,dtype:DTypeLike,type:type[_NdArraySubClass])->_NdArraySubClass
numpy.__init__.ndarray.view(self,dtype:_DTypeLike[_ScalarType])->NDArray[_ScalarType]
numpy.__init__.ndarray.view(self,type:type[_NdArraySubClass])->_NdArraySubClass
numpy.__init__.ndarray.view(self:_ArraySelf)->_ArraySelf
numpy.__init__.ndenumerate(cls,arr:complex|_NestedSequence[complex])
numpy.__init__.ndenumerate.__iter__(self:_T)->_T
numpy.__init__.ndenumerate.__new__(cls,arr:complex|_NestedSequence[complex])
numpy.__init__.ndenumerate.__next__(self:ndenumerate[_ScalarType])->tuple[_Shape, _ScalarType]
numpy.__init__.ndindex(self,*shape:SupportsIndex)
numpy.__init__.ndindex.__init__(self,*shape:SupportsIndex)
numpy.__init__.ndindex.__iter__(self:_T)->_T
numpy.__init__.ndindex.__next__(self)->_Shape
numpy.__init__.nditer(cls,op:ArrayLike|Sequence[ArrayLike],flags:None|Sequence[_NDIterFlagsKind]=...,op_flags:None|Sequence[Sequence[_NDIterOpFlagsKind]]=...,op_dtypes:DTypeLike|Sequence[DTypeLike]=...,order:_OrderKACF=...,casting:_CastingKind=...,op_axes:None|Sequence[Sequence[SupportsIndex]]=...,itershape:None|_ShapeLike=...,buffersize:SupportsIndex=...)
numpy.__init__.nditer.__copy__(self)->nditer
numpy.__init__.nditer.__enter__(self)->nditer
numpy.__init__.nditer.__exit__(self,exc_type:None|type[BaseException],exc_value:None|BaseException,traceback:None|TracebackType)->None
numpy.__init__.nditer.__getitem__(self,index:SupportsIndex)->NDArray[Any]
numpy.__init__.nditer.__getitem__(self,index:slice)->tuple[NDArray[Any], ...]
numpy.__init__.nditer.__iter__(self)->nditer
numpy.__init__.nditer.__len__(self)->int
numpy.__init__.nditer.__new__(cls,op:ArrayLike|Sequence[ArrayLike],flags:None|Sequence[_NDIterFlagsKind]=...,op_flags:None|Sequence[Sequence[_NDIterOpFlagsKind]]=...,op_dtypes:DTypeLike|Sequence[DTypeLike]=...,order:_OrderKACF=...,casting:_CastingKind=...,op_axes:None|Sequence[Sequence[SupportsIndex]]=...,itershape:None|_ShapeLike=...,buffersize:SupportsIndex=...)
numpy.__init__.nditer.__next__(self)->tuple[NDArray[Any], ...]
numpy.__init__.nditer.__setitem__(self,index:slice|SupportsIndex,value:ArrayLike)->None
numpy.__init__.nditer.close(self)->None
numpy.__init__.nditer.copy(self)->nditer
numpy.__init__.nditer.debug_print(self)->None
numpy.__init__.nditer.dtypes(self)->tuple[dtype[Any], ...]
numpy.__init__.nditer.enable_external_loop(self)->None
numpy.__init__.nditer.finished(self)->builtins.bool
numpy.__init__.nditer.has_delayed_bufalloc(self)->builtins.bool
numpy.__init__.nditer.has_index(self)->builtins.bool
numpy.__init__.nditer.has_multi_index(self)->builtins.bool
numpy.__init__.nditer.index(self)->int
numpy.__init__.nditer.iterationneedsapi(self)->builtins.bool
numpy.__init__.nditer.iterindex(self)->int
numpy.__init__.nditer.iternext(self)->builtins.bool
numpy.__init__.nditer.iterrange(self)->tuple[int, ...]
numpy.__init__.nditer.itersize(self)->int
numpy.__init__.nditer.itviews(self)->tuple[NDArray[Any], ...]
numpy.__init__.nditer.multi_index(self)->tuple[int, ...]
numpy.__init__.nditer.ndim(self)->int
numpy.__init__.nditer.nop(self)->int
numpy.__init__.nditer.operands(self)->tuple[NDArray[Any], ...]
numpy.__init__.nditer.remove_axis(self,i:SupportsIndex,/)->None
numpy.__init__.nditer.remove_multi_index(self)->None
numpy.__init__.nditer.reset(self)->None
numpy.__init__.nditer.shape(self)->tuple[int, ...]
numpy.__init__.nditer.value(self)->tuple[NDArray[Any], ...]
numpy.__init__.number(generic,Generic[_NBit1])
numpy.__init__.number.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.__class_getitem__(self,item:Any)->GenericAlias
numpy.__init__.number.__complex__(self)->complex
numpy.__init__.number.__float__(self)->float
numpy.__init__.number.__int__(self)->int
numpy.__init__.number.__neg__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.__pos__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.object_(self,value:object=...,/)
numpy.__init__.object_.__complex__(self)->complex
numpy.__init__.object_.__float__(self)->float
numpy.__init__.object_.__init__(self,value:object=...,/)
numpy.__init__.object_.__int__(self)->int
numpy.__init__.object_.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.object_.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.poly1d(self,c_or_r:ArrayLike,r:builtins.bool=...,variable:None|str=...)
numpy.__init__.poly1d.__add__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__array__(self,t:None=...,copy:None|bool=...)->NDArray[Any]
numpy.__init__.poly1d.__array__(self,t:_DType,copy:None|bool=...)->ndarray[Any, _DType]
numpy.__init__.poly1d.__div__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__getitem__(self,val:int)->Any
numpy.__init__.poly1d.__init__(self,c_or_r:ArrayLike,r:builtins.bool=...,variable:None|str=...)
numpy.__init__.poly1d.__iter__(self)->Iterator[Any]
numpy.__init__.poly1d.__len__(self)->int
numpy.__init__.poly1d.__mul__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__neg__(self)->poly1d
numpy.__init__.poly1d.__pos__(self)->poly1d
numpy.__init__.poly1d.__pow__(self,val:_FloatLike_co)->poly1d
numpy.__init__.poly1d.__radd__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__rdiv__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__rmul__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__rsub__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__rtruediv__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__setitem__(self,key:int,val:Any)->None
numpy.__init__.poly1d.__sub__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.__truediv__(self,other:ArrayLike)->poly1d
numpy.__init__.poly1d.c(self)->NDArray[Any]
numpy.__init__.poly1d.c(self,value:NDArray[Any])->None
numpy.__init__.poly1d.coef(self)->NDArray[Any]
numpy.__init__.poly1d.coef(self,value:NDArray[Any])->None
numpy.__init__.poly1d.coefficients(self)->NDArray[Any]
numpy.__init__.poly1d.coefficients(self,value:NDArray[Any])->None
numpy.__init__.poly1d.coeffs(self)->NDArray[Any]
numpy.__init__.poly1d.coeffs(self,value:NDArray[Any])->None
numpy.__init__.poly1d.deriv(self,m:SupportsInt|SupportsIndex=...)->poly1d
numpy.__init__.poly1d.integ(self,m:SupportsInt|SupportsIndex=...,k:None|_ArrayLikeComplex_co|_ArrayLikeObject_co=...)->poly1d
numpy.__init__.poly1d.o(self)->int
numpy.__init__.poly1d.order(self)->int
numpy.__init__.poly1d.r(self)->NDArray[Any]
numpy.__init__.poly1d.roots(self)->NDArray[Any]
numpy.__init__.poly1d.variable(self)->str
numpy.__init__.show_config()->None
numpy.__init__.signedinteger(self,value:_IntValue=...,/)
numpy.__init__.signedinteger.__init__(self,value:_IntValue=...,/)
numpy.__init__.str_(self,value:bytes,/,encoding:str=...,errors:str=...)
numpy.__init__.str_.__init__(self,value:bytes,/,encoding:str=...,errors:str=...)
numpy.__init__.str_.item(self,args:L[0]|tuple[()]|tuple[L[0]]=...,/)->str
numpy.__init__.str_.tolist(self)->str
numpy.__init__.timedelta64(self,value:None|int|_CharLike_co|dt.timedelta|timedelta64=...,format:_CharLike_co|tuple[_CharLike_co,_IntLike_co]=...,/)
numpy.__init__.timedelta64.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__add__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__complex__(self)->complex
numpy.__init__.timedelta64.__divmod__(self,other:timedelta64)->tuple[int64, timedelta64]
numpy.__init__.timedelta64.__float__(self)->float
numpy.__init__.timedelta64.__init__(self,value:None|int|_CharLike_co|dt.timedelta|timedelta64=...,format:_CharLike_co|tuple[_CharLike_co,_IntLike_co]=...,/)
numpy.__init__.timedelta64.__int__(self)->int
numpy.__init__.timedelta64.__mod__(self,other:timedelta64)->timedelta64
numpy.__init__.timedelta64.__mul__(self,other:_FloatLike_co)->timedelta64
numpy.__init__.timedelta64.__neg__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__pos__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__radd__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__rdivmod__(self,other:timedelta64)->tuple[int64, timedelta64]
numpy.__init__.timedelta64.__rfloordiv__(self,other:timedelta64)->int64
numpy.__init__.timedelta64.__rmod__(self,other:timedelta64)->timedelta64
numpy.__init__.timedelta64.__rmul__(self,other:_FloatLike_co)->timedelta64
numpy.__init__.timedelta64.__rsub__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__rtruediv__(self,other:timedelta64)->float64
numpy.__init__.timedelta64.__sub__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.denominator(self)->L[1]
numpy.__init__.timedelta64.numerator(self:_ScalarType)->_ScalarType
numpy.__init__.ufunc
numpy.__init__.ufunc.__doc__(self)->str
numpy.__init__.ufunc.__name__(self)->str
numpy.__init__.ufunc.identity(self)->Any
numpy.__init__.ufunc.nargs(self)->int
numpy.__init__.ufunc.nin(self)->int
numpy.__init__.ufunc.nout(self)->int
numpy.__init__.ufunc.ntypes(self)->int
numpy.__init__.ufunc.signature(self)->None | str
numpy.__init__.ufunc.types(self)->list[str]
numpy.__init__.unsignedinteger(self,value:_IntValue=...,/)
numpy.__init__.unsignedinteger.__init__(self,value:_IntValue=...,/)
numpy.__init__.vectorize(self,pyfunc:Callable[...,Any],otypes:None|str|Iterable[DTypeLike]=...,doc:None|str=...,excluded:None|Iterable[int|str]=...,cache:builtins.bool=...,signature:None|str=...)
numpy.__init__.vectorize.__init__(self,pyfunc:Callable[...,Any],otypes:None|str|Iterable[DTypeLike]=...,doc:None|str=...,excluded:None|Iterable[int|str]=...,cache:builtins.bool=...,signature:None|str=...)
numpy.__init__.void(self,value:Any,/,dtype:_DTypeLikeVoid)
numpy.__init__.void.__getitem__(self,key:list[str])->void
numpy.__init__.void.__getitem__(self,key:str|SupportsIndex)->Any
numpy.__init__.void.__init__(self,value:Any,/,dtype:_DTypeLikeVoid)
numpy.__init__.void.__setitem__(self,key:str|list[str]|SupportsIndex,value:ArrayLike)->None
numpy.__init__.void.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.void.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.void.setfield(self,val:ArrayLike,dtype:DTypeLike,offset:int=...)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/__config__.py----------------------------------------
A:numpy.__config__.CONFIG->_cleanup({'Compilers': {'c': {'name': 'gcc', 'linker': 'ld.bfd', 'version': '10.2.1', 'commands': 'cc', 'args': '', 'linker args': ''}, 'cython': {'name': 'cython', 'linker': 'cython', 'version': '3.0.11', 'commands': 'cython', 'args': '', 'linker args': ''}, 'c++': {'name': 'gcc', 'linker': 'ld.bfd', 'version': '10.2.1', 'commands': 'c++', 'args': '', 'linker args': ''}}, 'Machine Information': {'host': {'cpu': 'x86_64', 'family': 'x86_64', 'endian': 'little', 'system': 'linux'}, 'build': {'cpu': 'x86_64', 'family': 'x86_64', 'endian': 'little', 'system': 'linux'}, 'cross-compiled': bool('False'.lower().replace('false', ''))}, 'Build Dependencies': {'blas': {'name': 'scipy-openblas', 'found': bool('True'.lower().replace('false', '')), 'version': '0.3.27', 'detection method': 'pkgconfig', 'include directory': '/opt/_internal/cpython-3.9.18/lib/python3.9/site-packages/scipy_openblas64/include', 'lib directory': '/opt/_internal/cpython-3.9.18/lib/python3.9/site-packages/scipy_openblas64/lib', 'openblas configuration': 'OpenBLAS 0.3.27  USE64BITINT DYNAMIC_ARCH NO_AFFINITY Zen MAX_THREADS=64', 'pc file directory': '/project/.openblas'}, 'lapack': {'name': 'scipy-openblas', 'found': bool('True'.lower().replace('false', '')), 'version': '0.3.27', 'detection method': 'pkgconfig', 'include directory': '/opt/_internal/cpython-3.9.18/lib/python3.9/site-packages/scipy_openblas64/include', 'lib directory': '/opt/_internal/cpython-3.9.18/lib/python3.9/site-packages/scipy_openblas64/lib', 'openblas configuration': 'OpenBLAS 0.3.27  USE64BITINT DYNAMIC_ARCH NO_AFFINITY Zen MAX_THREADS=64', 'pc file directory': '/project/.openblas'}}, 'Python Information': {'path': '/tmp/build-env-qcve7dge/bin/python', 'version': '3.9'}, 'SIMD Extensions': {'baseline': __cpu_baseline__, 'found': [feature for feature in __cpu_dispatch__ if __cpu_features__[feature]], 'not found': [feature for feature in __cpu_dispatch__ if not __cpu_features__[feature]]}})
A:numpy.__config__.yaml->_check_pyyaml()
numpy.__config__.DisplayModes(Enum)
numpy.__config__._check_pyyaml()
numpy.__config__._cleanup(d)
numpy.__config__.show(mode=DisplayModes.stdout.value)
numpy.show_config(mode=DisplayModes.stdout.value)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pytesttester.py----------------------------------------
A:numpy._pytesttester.info->numpy.lib._utils_impl._opt_info()
A:numpy._pytesttester.module_path->os.path.abspath(module.__path__[0])
A:numpy._pytesttester.code->pytest.main(pytest_args)
numpy.PytestTester(self,module_name)
numpy._pytesttester.PytestTester(self,module_name)
numpy._pytesttester.PytestTester.__init__(self,module_name)
numpy._pytesttester._show_numpy_info()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pytesttester.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_expired_attrs_2_0.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/dtypes.py----------------------------------------
A:numpy.dtypes.alias->alias.removeprefix('numpy.dtypes.').removeprefix('numpy.dtypes.')
numpy.dtypes._add_dtype_helper(DType,alias)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/dtypes.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/exceptions.py----------------------------------------
numpy.exceptions.AxisError(self,axis,ndim=None,msg_prefix=None)
numpy.exceptions.AxisError.__init__(self,axis,ndim=None,msg_prefix=None)
numpy.exceptions.AxisError.__str__(self)
numpy.exceptions.ComplexWarning(RuntimeWarning)
numpy.exceptions.DTypePromotionError(TypeError)
numpy.exceptions.ModuleDeprecationWarning(DeprecationWarning)
numpy.exceptions.RankWarning(RuntimeWarning)
numpy.exceptions.TooHardError(RuntimeError)
numpy.exceptions.VisibleDeprecationWarning(UserWarning)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/exceptions.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_distributor_init.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/version.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ctypeslib.py----------------------------------------
A:numpy.ctypeslib.c_intp->numpy._core._internal._getintp_ctype()
A:numpy.ctypeslib.libname->os.fsdecode(libname)
A:numpy.ctypeslib.loader_path->os.path.abspath(loader_path)
A:numpy.ctypeslib.so_ext->sysconfig.get_config_var('EXT_SUFFIX')
A:numpy.ctypeslib.libdir->os.path.dirname(loader_path)
A:numpy.ctypeslib.libpath->os.path.join(libdir, ln)
A:numpy.ctypeslib.full_dtype->_dtype((self._dtype_, self._shape_))
A:numpy.ctypeslib.dtype->_dtype(dtype)
A:numpy.ctypeslib.flags->_flags_fromnum(num)
A:numpy.ctypeslib.num->_num_fromflags(flags)
A:numpy.ctypeslib.shape->tuple(shape)
A:numpy.ctypeslib.name->str(id(dtype))
A:numpy.ctypeslib.klass->type('ndpointer_%s' % name, (base,), {'_dtype_': dtype, '_shape_': shape, '_ndim_': ndim, '_flags_': num})
A:numpy.ctypeslib._scalar_type_map->_get_scalar_type_map()
A:numpy.ctypeslib.dtype_with_endian->_dtype(dtype).newbyteorder('S').newbyteorder('S')
A:numpy.ctypeslib.dtype_native->_dtype(dtype).newbyteorder('=')
A:numpy.ctypeslib.ctype->_ctype_from_dtype(element_dtype)
A:numpy.ctypeslib.field_data->sorted(field_data, key=lambda f: f[0])
A:numpy.ctypeslib.size->max(size, ctypes.sizeof(ctype))
A:numpy.ctypeslib.p_arr_type->ctypes.POINTER(_ctype_ndarray(obj._type_, shape))
A:numpy.ctypeslib.ctype_scalar->as_ctypes_type(ai['typestr'])
A:numpy.ctypeslib.result_type->_ctype_ndarray(ctype_scalar, ai['shape'])
A:numpy.ctypeslib.result->_ctype_ndarray(ctype_scalar, ai['shape']).from_address(addr)
numpy.ctypeslib._concrete_ndptr(_ndptr)
numpy.ctypeslib._concrete_ndptr._check_retval_(self)
numpy.ctypeslib._concrete_ndptr.contents(self)
numpy.ctypeslib._flags_fromnum(num)
numpy.ctypeslib._ndptr(_ndptr_base)
numpy.ctypeslib._ndptr.from_param(cls,obj)
numpy.ctypeslib._num_fromflags(flaglist)
numpy.ctypeslib.ndpointer(dtype=None,ndim=None,shape=None,flags=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ctypeslib.pyi----------------------------------------
numpy.ctypeslib.as_array(obj:_ArrayLike[_SCT],shape:None|_ShapeLike=...)->NDArray[_SCT]
numpy.ctypeslib.as_array(obj:ctypes._PointerLike,shape:Sequence[int])->NDArray[Any]
numpy.ctypeslib.as_array(obj:object,shape:None|_ShapeLike=...)->NDArray[Any]
numpy.ctypeslib.as_ctypes(obj:NDArray[byte])->ctypes.Array[ctypes.c_byte]
numpy.ctypeslib.as_ctypes(obj:NDArray[double])->ctypes.Array[ctypes.c_double]
numpy.ctypeslib.as_ctypes(obj:NDArray[intc])->ctypes.Array[ctypes.c_int]
numpy.ctypeslib.as_ctypes(obj:NDArray[long])->ctypes.Array[ctypes.c_long]
numpy.ctypeslib.as_ctypes(obj:NDArray[longdouble])->ctypes.Array[ctypes.c_longdouble]
numpy.ctypeslib.as_ctypes(obj:NDArray[longlong])->ctypes.Array[ctypes.c_longlong]
numpy.ctypeslib.as_ctypes(obj:NDArray[np.bool])->ctypes.Array[ctypes.c_bool]
numpy.ctypeslib.as_ctypes(obj:NDArray[short])->ctypes.Array[ctypes.c_short]
numpy.ctypeslib.as_ctypes(obj:NDArray[single])->ctypes.Array[ctypes.c_float]
numpy.ctypeslib.as_ctypes(obj:NDArray[ubyte])->ctypes.Array[ctypes.c_ubyte]
numpy.ctypeslib.as_ctypes(obj:NDArray[uintc])->ctypes.Array[ctypes.c_uint]
numpy.ctypeslib.as_ctypes(obj:NDArray[ulong])->ctypes.Array[ctypes.c_ulong]
numpy.ctypeslib.as_ctypes(obj:NDArray[ulonglong])->ctypes.Array[ctypes.c_ulonglong]
numpy.ctypeslib.as_ctypes(obj:NDArray[ushort])->ctypes.Array[ctypes.c_ushort]
numpy.ctypeslib.as_ctypes(obj:NDArray[void])->ctypes.Array[Any]
numpy.ctypeslib.as_ctypes(obj:byte)->ctypes.c_byte
numpy.ctypeslib.as_ctypes(obj:double)->ctypes.c_double
numpy.ctypeslib.as_ctypes(obj:intc)->ctypes.c_int
numpy.ctypeslib.as_ctypes(obj:long)->ctypes.c_long
numpy.ctypeslib.as_ctypes(obj:longdouble)->ctypes.c_longdouble
numpy.ctypeslib.as_ctypes(obj:longlong)->ctypes.c_longlong
numpy.ctypeslib.as_ctypes(obj:np.bool)->ctypes.c_bool
numpy.ctypeslib.as_ctypes(obj:short)->ctypes.c_short
numpy.ctypeslib.as_ctypes(obj:single)->ctypes.c_float
numpy.ctypeslib.as_ctypes(obj:ubyte)->ctypes.c_ubyte
numpy.ctypeslib.as_ctypes(obj:uintc)->ctypes.c_uint
numpy.ctypeslib.as_ctypes(obj:ulong)->ctypes.c_ulong
numpy.ctypeslib.as_ctypes(obj:ulonglong)->ctypes.c_ulonglong
numpy.ctypeslib.as_ctypes(obj:ushort)->ctypes.c_ushort
numpy.ctypeslib.as_ctypes(obj:void)->Any
numpy.ctypeslib.as_ctypes_type(dtype:_BoolCodes|_DTypeLike[np.bool]|type[ctypes.c_bool])->type[ctypes.c_bool]
numpy.ctypeslib.as_ctypes_type(dtype:_ByteCodes|_DTypeLike[byte]|type[ctypes.c_byte])->type[ctypes.c_byte]
numpy.ctypeslib.as_ctypes_type(dtype:_DoubleCodes|_DTypeLike[double]|type[float|ctypes.c_double])->type[ctypes.c_double]
numpy.ctypeslib.as_ctypes_type(dtype:_IntCCodes|_DTypeLike[intc]|type[ctypes.c_int])->type[ctypes.c_int]
numpy.ctypeslib.as_ctypes_type(dtype:_LongCodes|_DTypeLike[long]|type[ctypes.c_long])->type[ctypes.c_long]
numpy.ctypeslib.as_ctypes_type(dtype:_LongDoubleCodes|_DTypeLike[longdouble]|type[ctypes.c_longdouble])->type[ctypes.c_longdouble]
numpy.ctypeslib.as_ctypes_type(dtype:_LongLongCodes|_DTypeLike[longlong]|type[ctypes.c_longlong])->type[ctypes.c_longlong]
numpy.ctypeslib.as_ctypes_type(dtype:_ShortCodes|_DTypeLike[short]|type[ctypes.c_short])->type[ctypes.c_short]
numpy.ctypeslib.as_ctypes_type(dtype:_SingleCodes|_DTypeLike[single]|type[ctypes.c_float])->type[ctypes.c_float]
numpy.ctypeslib.as_ctypes_type(dtype:_UByteCodes|_DTypeLike[ubyte]|type[ctypes.c_ubyte])->type[ctypes.c_ubyte]
numpy.ctypeslib.as_ctypes_type(dtype:_UIntCCodes|_DTypeLike[uintc]|type[ctypes.c_uint])->type[ctypes.c_uint]
numpy.ctypeslib.as_ctypes_type(dtype:_ULongCodes|_DTypeLike[ulong]|type[ctypes.c_ulong])->type[ctypes.c_ulong]
numpy.ctypeslib.as_ctypes_type(dtype:_ULongLongCodes|_DTypeLike[ulonglong]|type[ctypes.c_ulonglong])->type[ctypes.c_ulonglong]
numpy.ctypeslib.as_ctypes_type(dtype:_UShortCodes|_DTypeLike[ushort]|type[ctypes.c_ushort])->type[ctypes.c_ushort]
numpy.ctypeslib.as_ctypes_type(dtype:_VoidDTypeLike)->type[Any]
numpy.ctypeslib.as_ctypes_type(dtype:str)->type[Any]
numpy.ctypeslib.as_ctypes_type(dtype:type[int])->type[c_intp]
numpy.ctypeslib.load_library(libname:str|bytes|os.PathLike[str]|os.PathLike[bytes],loader_path:str|bytes|os.PathLike[str]|os.PathLike[bytes])->ctypes.CDLL


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_globals.py----------------------------------------
A:numpy._globals.cls.__instance->super().__new__(cls)
A:numpy._globals._NoValue->_NoValueType()
numpy._CopyMode(enum.Enum)
numpy._CopyMode.__bool__(self)
numpy._NoValueType(cls)
numpy._NoValueType.__repr__(self)
numpy._globals._CopyMode(enum.Enum)
numpy._globals._CopyMode.__bool__(self)
numpy._globals._NoValueType(cls)
numpy._globals._NoValueType.__new__(cls)
numpy._globals._NoValueType.__repr__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matlib.py----------------------------------------
A:numpy.matlib.a->asanyarray(a)
A:numpy.matlib.b->empty((n, n), dtype=dtype)
A:numpy.matlib.c->asanyarray(a).reshape(1, a.size).repeat(m, 0).reshape(rows, origcols).repeat(n, 0)
numpy.matlib.empty(shape,dtype=None,order='C')
numpy.matlib.eye(n,M=None,k=0,dtype=float,order='C')
numpy.matlib.identity(n,dtype=None)
numpy.matlib.ones(shape,dtype=None,order='C')
numpy.matlib.rand(*args)
numpy.matlib.randn(*args)
numpy.matlib.repmat(a,m,n)
numpy.matlib.zeros(shape,dtype=None,order='C')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/conftest.py----------------------------------------
A:numpy.conftest._pytest_ini->os.path.join(os.path.dirname(__file__), '..', 'pytest.ini')
A:numpy.conftest.available_mem->session.config.getoption('available_memory')
A:numpy.conftest.mode->get_fpu_mode()
A:numpy.conftest.old_mode->get_fpu_mode()
A:numpy.conftest.new_mode->get_fpu_mode()
A:numpy.conftest.collect_result->_collect_results.get(request.node)
A:numpy.conftest.state->numpy._get_promotion_state()
numpy.conftest.add_np(doctest_namespace)
numpy.conftest.check_fpu_mode(request)
numpy.conftest.env_setup(monkeypatch)
numpy.conftest.pytest_addoption(parser)
numpy.conftest.pytest_configure(config)
numpy.conftest.pytest_itemcollected(item)
numpy.conftest.pytest_sessionstart(session)
numpy.conftest.weak_promotion(request)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_configtool.py----------------------------------------
A:numpy._configtool.parser->argparse.ArgumentParser()
A:numpy._configtool.args->argparse.ArgumentParser().parse_args()
numpy._configtool.main()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/compat/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/compat/py3k.py----------------------------------------
numpy.compat.asbytes(s)
numpy.compat.asbytes_nested(x)
numpy.compat.asstr(s)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.contextlib_nullcontext(self,enter_result=None)
numpy.compat.contextlib_nullcontext.__enter__(self)
numpy.compat.contextlib_nullcontext.__exit__(self,*excinfo)
numpy.compat.getexception()
numpy.compat.is_pathlib_path(obj)
numpy.compat.isfileobj(f)
numpy.compat.npy_load_module(name,fn,info=None)
numpy.compat.open_latin1(filename,mode='r')
numpy.compat.py3k.asbytes(s)
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asstr(s)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.contextlib_nullcontext(self,enter_result=None)
numpy.compat.py3k.contextlib_nullcontext.__enter__(self)
numpy.compat.py3k.contextlib_nullcontext.__exit__(self,*excinfo)
numpy.compat.py3k.contextlib_nullcontext.__init__(self,enter_result=None)
numpy.compat.py3k.getexception()
numpy.compat.py3k.is_pathlib_path(obj)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.npy_load_module(name,fn,info=None)
numpy.compat.py3k.open_latin1(filename,mode='r')
numpy.compat.py3k.sixu(s)
numpy.compat.sixu(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/compat/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/_multiarray_umath.py----------------------------------------
A:numpy.core._multiarray_umath.attr->getattr(_multiarray_umath, item)
A:numpy.core._multiarray_umath.msg->textwrap.dedent(f"\n            A module that was compiled using NumPy 1.x cannot be run in\n            NumPy {short_version} as it may crash. To support both 1.x and 2.x\n            versions of NumPy, modules must be compiled with NumPy 2.0.\n            Some module may need to rebuild instead e.g. with 'pybind11>=2.12'.\n\n            If you are a user of the module, the easiest solution will be to\n            downgrade to 'numpy<2' or try to upgrade the affected module.\n            We expect that some modules will need time to support NumPy 2.\n\n            ")
A:numpy.core._multiarray_umath.ret->getattr(_multiarray_umath, attr_name, None)
numpy.core._multiarray_umath.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/arrayprint.py----------------------------------------
A:numpy.core.arrayprint.ret->getattr(arrayprint, attr_name, None)
numpy.core.arrayprint.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/__init__.py----------------------------------------
A:numpy.core.__init__.mod->__import__(module, fromlist=[name])
A:numpy.core.__init__.attr->getattr(_core, attr_name)
numpy.core.__init__.__getattr__(attr_name)
numpy.core.__init__._ufunc_reconstruct(module,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/_dtype.py----------------------------------------
A:numpy.core._dtype.ret->getattr(_dtype, attr_name, None)
numpy.core._dtype.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/numerictypes.py----------------------------------------
A:numpy.core.numerictypes.ret->getattr(numerictypes, attr_name, None)
numpy.core.numerictypes.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/_utils.py----------------------------------------
numpy.core._raise_warning(attr:str,submodule:str=None)->None
numpy.core._utils._raise_warning(attr:str,submodule:str=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/umath.py----------------------------------------
A:numpy.core.umath.ret->getattr(umath, attr_name, None)
numpy.core.umath.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/overrides.py----------------------------------------
A:numpy.core.overrides.ret->getattr(overrides, attr_name, None)
numpy.core.overrides.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/fromnumeric.py----------------------------------------
A:numpy.core.fromnumeric.ret->getattr(fromnumeric, attr_name, None)
numpy.core.fromnumeric.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/getlimits.py----------------------------------------
A:numpy.core.getlimits.ret->getattr(getlimits, attr_name, None)
numpy.core.getlimits.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/multiarray.py----------------------------------------
A:numpy.core.multiarray.globals()[item]->getattr(multiarray, item)
A:numpy.core.multiarray.ret->getattr(multiarray, attr_name, None)
numpy.core.multiarray.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/numeric.py----------------------------------------
A:numpy.core.numeric.sentinel->object()
A:numpy.core.numeric.ret->getattr(numeric, attr_name, sentinel)
numpy.core.numeric.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/records.py----------------------------------------
A:numpy.core.records.ret->getattr(records, attr_name, None)
numpy.core.records.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/_dtype_ctypes.py----------------------------------------
A:numpy.core._dtype_ctypes.ret->getattr(_dtype_ctypes, attr_name, None)
numpy.core._dtype_ctypes.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/shape_base.py----------------------------------------
A:numpy.core.shape_base.ret->getattr(shape_base, attr_name, None)
numpy.core.shape_base.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/defchararray.py----------------------------------------
A:numpy.core.defchararray.ret->getattr(defchararray, attr_name, None)
numpy.core.defchararray.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/function_base.py----------------------------------------
A:numpy.core.function_base.ret->getattr(function_base, attr_name, None)
numpy.core.function_base.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/_internal.py----------------------------------------
A:numpy.core._internal.ret->getattr(_internal, attr_name, None)
numpy.core._internal.__getattr__(attr_name)
numpy.core._internal._reconstruct(subtype,shape,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/core/einsumfunc.py----------------------------------------
A:numpy.core.einsumfunc.ret->getattr(einsumfunc, attr_name, None)
numpy.core.einsumfunc.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_methods.py----------------------------------------
A:numpy._core._methods.bool_dt->numpy._core.multiarray.dtype('bool')
A:numpy._core._methods.axis->tuple(range(arr.ndim))
A:numpy._core._methods.items->umr_sum(broadcast_to(where, arr.shape), axis, nt.intp, None, keepdims)
A:numpy._core._methods.arr->asanyarray(a)
A:numpy._core._methods.rcount->numpy._core.umath.maximum(rcount - ddof, 0)
A:numpy._core._methods.dtype->numpy._core.multiarray.dtype('f8')
A:numpy._core._methods.ret->numpy._core.umath.sqrt(ret)
A:numpy._core._methods.arrmean->arrmean.dtype.type(arrmean / rcount).dtype.type(arrmean / rcount)
A:numpy._core._methods.div->numpy._core.umath.maximum(rcount - ddof, 0).reshape(arrmean.shape)
A:numpy._core._methods.x->numpy._core.umath.multiply(x, x, out=x)
A:numpy._core._methods.xv->numpy._core.umath.multiply(x, x, out=x).view(dtype=(_complex_to_float[x.dtype], (2,)))
A:numpy._core._methods.ctx->open(os.fspath(file), 'wb')
numpy._core._methods._all(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._core._methods._amax(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._core._methods._amin(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._core._methods._any(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._core._methods._bitwise_count(a,out=None,*,where=True,casting='same_kind',order='K',dtype=None,subok=True)
numpy._core._methods._clip(a,min=None,max=None,out=None,**kwargs)
numpy._core._methods._count_reduce_items(arr,axis,keepdims=False,where=True)
numpy._core._methods._dump(self,file,protocol=2)
numpy._core._methods._dumps(self,protocol=2)
numpy._core._methods._mean(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._core._methods._prod(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._core._methods._ptp(a,axis=None,out=None,keepdims=False)
numpy._core._methods._std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True,mean=None)
numpy._core._methods._sum(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._core._methods._var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True,mean=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/function_base.py----------------------------------------
A:numpy._core.function_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy._core.function_base.num->operator.index(num)
A:numpy._core.function_base.conv->_array_converter(start, stop)
A:numpy._core.function_base.(start, stop)->_array_converter(start, stop).as_arrays()
A:numpy._core.function_base.dt->result_type(start, stop, float(num), _nx.zeros((), dtype))
A:numpy._core.function_base.integer_dtype->_nx.issubdtype(dtype, _nx.integer)
A:numpy._core.function_base.delta->numpy.subtract(stop, start, dtype=type(dt))
A:numpy._core.function_base.y->linspace(start, stop, num=num, endpoint=endpoint, axis=axis)
A:numpy._core.function_base._mult_inplace->_nx.isscalar(delta)
A:numpy._core.function_base.base->numpy.expand_dims(base, axis=axis)
A:numpy._core.function_base.start->start.astype(dt, copy=True).astype(dt, copy=True)
A:numpy._core.function_base.stop->stop.astype(dt, copy=True).astype(dt, copy=True)
A:numpy._core.function_base.dtype->_nx.dtype(dtype)
A:numpy._core.function_base.out_sign->_nx.sign(start)
A:numpy._core.function_base.log_start->_nx.log10(start)
A:numpy._core.function_base.log_stop->_nx.log10(stop)
A:numpy._core.function_base.result->_nx.moveaxis(result, 0, axis)
A:numpy._core.function_base.new->getattr(__import__(place, globals(), {}, [obj]), obj)
numpy._core._add_docstring(obj,doc,warn_on_python)
numpy._core._geomspace_dispatcher(start,stop,num=None,endpoint=None,dtype=None,axis=None)
numpy._core._linspace_dispatcher(start,stop,num=None,endpoint=None,retstep=None,dtype=None,axis=None,*,device=None)
numpy._core._logspace_dispatcher(start,stop,num=None,endpoint=None,base=None,dtype=None,axis=None)
numpy._core._needs_add_docstring(obj)
numpy._core.function_base._add_docstring(obj,doc,warn_on_python)
numpy._core.function_base._geomspace_dispatcher(start,stop,num=None,endpoint=None,dtype=None,axis=None)
numpy._core.function_base._linspace_dispatcher(start,stop,num=None,endpoint=None,retstep=None,dtype=None,axis=None,*,device=None)
numpy._core.function_base._logspace_dispatcher(start,stop,num=None,endpoint=None,base=None,dtype=None,axis=None)
numpy._core.function_base._needs_add_docstring(obj)
numpy._core.function_base.add_newdoc(place,obj,doc,warn_on_python=True)
numpy._core.function_base.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)
numpy._core.function_base.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0,*,device=None)
numpy._core.function_base.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)
numpy.add_newdoc(place,obj,doc,warn_on_python=True)
numpy.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)
numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0,*,device=None)
numpy.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/function_base.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_ufunc_config.py----------------------------------------
A:numpy._core._ufunc_config.old->_get_extobj_dict()
A:numpy._core._ufunc_config.extobj->_make_extobj(call=self._call, all=self._all, divide=self._divide, over=self._over, under=self._under, invalid=self._invalid)
A:numpy._core._ufunc_config.res->_get_extobj_dict()
A:numpy._core._ufunc_config._Unspecified->_unspecified()
A:numpy._core._ufunc_config.self._token->umath._extobj_contextvar.set(extobj)
A:numpy._core._ufunc_config._token->umath._extobj_contextvar.set(extobj)
A:numpy._core._ufunc_config.NO_NEP50_WARNING->contextvars.ContextVar('_no_nep50_warning', default=False)
A:numpy._core._ufunc_config.token->contextvars.ContextVar('_no_nep50_warning', default=False).set(True)
numpy._core._ufunc_config._no_nep50_warning()
numpy._core._ufunc_config._unspecified
numpy._core._ufunc_config.errstate(self,*,call=_Unspecified,all=None,divide=None,over=None,under=None,invalid=None)
numpy._core._ufunc_config.errstate.__enter__(self)
numpy._core._ufunc_config.errstate.__exit__(self,*exc_info)
numpy._core._ufunc_config.errstate.__init__(self,*,call=_Unspecified,all=None,divide=None,over=None,under=None,invalid=None)
numpy._core._ufunc_config.getbufsize()
numpy._core._ufunc_config.geterr()
numpy._core._ufunc_config.geterrcall()
numpy._core._ufunc_config.setbufsize(size)
numpy._core._ufunc_config.seterr(all=None,divide=None,over=None,under=None,invalid=None)
numpy._core._ufunc_config.seterrcall(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_ufunc_config.pyi----------------------------------------
numpy._core._ufunc_config._ErrDict(TypedDict)
numpy._core._ufunc_config._ErrDictOptional(TypedDict,total=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_string_helpers.py----------------------------------------
A:numpy._core._string_helpers._all_chars->tuple(map(chr, range(256)))
A:numpy._core._string_helpers.lowered->s.translate(LOWER_TABLE)
A:numpy._core._string_helpers.uppered->s.translate(UPPER_TABLE)
numpy._core._string_helpers.english_capitalize(s)
numpy._core._string_helpers.english_lower(s)
numpy._core._string_helpers.english_upper(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_type_aliases.py----------------------------------------
A:numpy._core._type_aliases.allTypes[_abstract_type_name]->getattr(ma, _abstract_type_name)
A:numpy._core._type_aliases.sctype_list->list(sctypes[sctype_key])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_type_aliases.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/arrayprint.py----------------------------------------
A:numpy._core.arrayprint.options['suppress']->bool(suppress)
A:numpy._core.arrayprint.options['precision']->operator.index(precision)
A:numpy._core.arrayprint.opt->_make_options_dict(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, sign, formatter, floatmode, legacy)
A:numpy._core.arrayprint.opts->numpy.get_printoptions()
A:numpy._core.arrayprint.axis->len(index)
A:numpy._core.arrayprint.formatdict[key]->indirect(formatter[key])
A:numpy._core.arrayprint.formatdict['numpystr']->indirect(formatter['str_kind'])
A:numpy._core.arrayprint.formatdict->_get_formatdict(data, **options)
A:numpy._core.arrayprint.repr_running->set()
A:numpy._core.arrayprint.data->_leading_trailing(data, options['edgeitems'])
A:numpy._core.arrayprint.format_function->SubArrayFormat(format_function, **options)
A:numpy._core.arrayprint.lst->array2string(arr, max_line_width, precision, suppress_small, ', ', prefix, suffix=suffix)
A:numpy._core.arrayprint.overrides->_make_options_dict(precision, threshold, edgeitems, max_line_width, suppress_small, None, None, sign, formatter, floatmode, legacy)
A:numpy._core.arrayprint.options->_format_options.copy()
A:numpy._core.arrayprint.words->recurser(index + (-1,), next_hanging_indent, next_width).splitlines()
A:numpy._core.arrayprint.max_word_length->max((len(word) for word in words))
A:numpy._core.arrayprint.word->recurser(index + (-1,), next_hanging_indent, next_width)
A:numpy._core.arrayprint.(s, line)->_extendLine_pretty(s, line, word, elem_width, hanging_indent, legacy)
A:numpy._core.arrayprint.nested->recurser(index + (-1,), next_hanging_indent, next_width)
A:numpy._core.arrayprint.self.precision->max((len(s) for s in frac_part))
A:numpy._core.arrayprint.abs_non_zero->absolute(finite_vals[finite_vals != 0])
A:numpy._core.arrayprint.max_val->numpy.max(abs_non_zero)
A:numpy._core.arrayprint.min_val->numpy.min(abs_non_zero)
A:numpy._core.arrayprint.(frac_strs, _, exp_strs)->zip(*(s.partition('e') for s in strs))
A:numpy._core.arrayprint.(int_part, frac_part)->zip(*(s.split('.') for s in strs))
A:numpy._core.arrayprint.self.pad_left->max(self.pad_left, nanlen - offset, inflen - offset)
A:numpy._core.arrayprint.self.pad_right->max((len(s) for s in frac_part))
A:numpy._core.arrayprint.nanlen->len(_format_options['nanstr'])
A:numpy._core.arrayprint.precision->_none_or_positive_arg(precision, 'precision')
A:numpy._core.arrayprint.pad_left->_none_or_positive_arg(pad_left, 'pad_left')
A:numpy._core.arrayprint.exp_digits->_none_or_positive_arg(exp_digits, 'exp_digits')
A:numpy._core.arrayprint.min_digits->_none_or_positive_arg(min_digits, 'min_digits')
A:numpy._core.arrayprint.pad_right->_none_or_positive_arg(pad_right, 'pad_right')
A:numpy._core.arrayprint.data_max->numpy.max(data)
A:numpy._core.arrayprint.data_min->numpy.min(data)
A:numpy._core.arrayprint.data_max_str_len->len(str(data_max))
A:numpy._core.arrayprint.max_str_len->max(max_str_len, 5)
A:numpy._core.arrayprint.self.real_format->FloatingFormat(x.real, precision, floatmode_real, suppress_small, sign=sign, legacy=legacy)
A:numpy._core.arrayprint.self.imag_format->FloatingFormat(x.imag, precision, floatmode_imag, suppress_small, sign='+', legacy=legacy)
A:numpy._core.arrayprint.r->self.real_format(x.real)
A:numpy._core.arrayprint.i->self.imag_format(x.imag)
A:numpy._core.arrayprint.sp->len(i.rstrip())
A:numpy._core.arrayprint.self._format->'%{}s'.format(max_str_len)
A:numpy._core.arrayprint.self._nat->"'NaT'".rjust(max_str_len)
A:numpy._core.arrayprint.val_repr->StructuredVoidFormat.from_data(array(x), **options)(x)
A:numpy._core.arrayprint.cls->type(x)
A:numpy._core.arrayprint.void_dtype->numpy.dtype((np.void, x.dtype))
A:numpy._core.arrayprint.dtype->numpy.dtype(dtype)
A:numpy._core.arrayprint.typename->repr(typename)
A:numpy._core.arrayprint.dtype_str->'dtype={})'.format(dtype_short_repr(arr.dtype))
A:numpy._core.arrayprint._array2string_impl->getattr(array2string, '__wrapped__', array2string)
A:numpy._core.arrayprint._default_array_str->functools.partial(_array_str_implementation, array2string=_array2string_impl)
A:numpy._core.arrayprint._default_array_repr->functools.partial(_array_repr_implementation, array2string=_array2string_impl)
numpy._core.arrayprint.BoolFormat(self,data,**kwargs)
numpy._core.arrayprint.BoolFormat.__init__(self,data,**kwargs)
numpy._core.arrayprint.ComplexFloatingFormat(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy._core.arrayprint.ComplexFloatingFormat.__init__(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy._core.arrayprint.DatetimeFormat(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy._core.arrayprint.DatetimeFormat.__init__(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy._core.arrayprint.DatetimeFormat._format_non_nat(self,x)
numpy._core.arrayprint.FloatingFormat(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy._core.arrayprint.FloatingFormat.__init__(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy._core.arrayprint.FloatingFormat.fillFormat(self,data)
numpy._core.arrayprint.IntegerFormat(self,data,sign='-')
numpy._core.arrayprint.IntegerFormat.__init__(self,data,sign='-')
numpy._core.arrayprint.StructuredVoidFormat(self,format_functions)
numpy._core.arrayprint.StructuredVoidFormat.__init__(self,format_functions)
numpy._core.arrayprint.StructuredVoidFormat.from_data(cls,data,**options)
numpy._core.arrayprint.SubArrayFormat(self,format_function,**options)
numpy._core.arrayprint.SubArrayFormat.__init__(self,format_function,**options)
numpy._core.arrayprint.SubArrayFormat.format_array(self,a)
numpy._core.arrayprint.TimedeltaFormat(_TimelikeFormat)
numpy._core.arrayprint.TimedeltaFormat._format_non_nat(self,x)
numpy._core.arrayprint._TimelikeFormat(self,data)
numpy._core.arrayprint._TimelikeFormat.__init__(self,data)
numpy._core.arrayprint._TimelikeFormat._format_non_nat(self,x)
numpy._core.arrayprint._array2string(a,options,separator='',prefix='')
numpy._core.arrayprint._array2string_dispatcher(a,max_line_width=None,precision=None,suppress_small=None,separator=None,prefix=None,style=None,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix=None,*,legacy=None)
numpy._core.arrayprint._array_repr_dispatcher(arr,max_line_width=None,precision=None,suppress_small=None)
numpy._core.arrayprint._array_repr_implementation(arr,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy._core.arrayprint._array_str_dispatcher(a,max_line_width=None,precision=None,suppress_small=None)
numpy._core.arrayprint._array_str_implementation(a,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy._core.arrayprint._extendLine(s,line,word,line_width,next_line_prefix,legacy)
numpy._core.arrayprint._extendLine_pretty(s,line,word,line_width,next_line_prefix,legacy)
numpy._core.arrayprint._formatArray(a,format_function,line_width,next_line_prefix,separator,edge_items,summary_insert,legacy)
numpy._core.arrayprint._get_format_function(data,**options)
numpy._core.arrayprint._get_formatdict(data,*,precision,floatmode,suppress,sign,legacy,formatter,**kwargs)
numpy._core.arrayprint._get_legacy_print_mode()
numpy._core.arrayprint._guarded_repr_or_str(v)
numpy._core.arrayprint._leading_trailing(a,edgeitems,index=())
numpy._core.arrayprint._make_options_dict(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,sign=None,formatter=None,floatmode=None,legacy=None)
numpy._core.arrayprint._none_or_positive_arg(x,name)
numpy._core.arrayprint._object_format(o)
numpy._core.arrayprint._recursive_guard(fillvalue='...')
numpy._core.arrayprint._void_scalar_to_string(x,is_repr=True)
numpy._core.arrayprint.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',prefix='',style=np._NoValue,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix='',*,legacy=None)
numpy._core.arrayprint.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy._core.arrayprint.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy._core.arrayprint.dtype_is_implied(dtype)
numpy._core.arrayprint.dtype_short_repr(dtype)
numpy._core.arrayprint.format_float_positional(x,precision=None,unique=True,fractional=True,trim='k',sign=False,pad_left=None,pad_right=None,min_digits=None)
numpy._core.arrayprint.format_float_scientific(x,precision=None,unique=True,trim='k',sign=False,pad_left=None,exp_digits=None,min_digits=None)
numpy._core.arrayprint.get_printoptions()
numpy._core.arrayprint.printoptions(*args,**kwargs)
numpy._core.arrayprint.repr_format(x)
numpy._core.arrayprint.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,formatter=None,sign=None,floatmode=None,*,legacy=None)
numpy._core.arrayprint.set_string_function(f,repr=True)
numpy._core.arrayprint.str_format(x)
numpy.arrayprint.BoolFormat(self,data,**kwargs)
numpy.arrayprint.ComplexFloatingFormat(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.arrayprint.DatetimeFormat(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy.arrayprint.DatetimeFormat._format_non_nat(self,x)
numpy.arrayprint.FloatingFormat(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.arrayprint.FloatingFormat.fillFormat(self,data)
numpy.arrayprint.IntegerFormat(self,data,sign='-')
numpy.arrayprint.StructuredVoidFormat(self,format_functions)
numpy.arrayprint.StructuredVoidFormat.from_data(cls,data,**options)
numpy.arrayprint.SubArrayFormat(self,format_function,**options)
numpy.arrayprint.SubArrayFormat.format_array(self,a)
numpy.arrayprint.TimedeltaFormat(_TimelikeFormat)
numpy.arrayprint.TimedeltaFormat._format_non_nat(self,x)
numpy.arrayprint._TimelikeFormat(self,data)
numpy.arrayprint._TimelikeFormat._format_non_nat(self,x)
numpy.arrayprint._array2string(a,options,separator='',prefix='')
numpy.arrayprint._array2string_dispatcher(a,max_line_width=None,precision=None,suppress_small=None,separator=None,prefix=None,style=None,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix=None,*,legacy=None)
numpy.arrayprint._array_repr_dispatcher(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint._array_repr_implementation(arr,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.arrayprint._array_str_dispatcher(a,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint._array_str_implementation(a,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.arrayprint._extendLine(s,line,word,line_width,next_line_prefix,legacy)
numpy.arrayprint._extendLine_pretty(s,line,word,line_width,next_line_prefix,legacy)
numpy.arrayprint._formatArray(a,format_function,line_width,next_line_prefix,separator,edge_items,summary_insert,legacy)
numpy.arrayprint._get_format_function(data,**options)
numpy.arrayprint._get_formatdict(data,*,precision,floatmode,suppress,sign,legacy,formatter,**kwargs)
numpy.arrayprint._get_legacy_print_mode()
numpy.arrayprint._guarded_repr_or_str(v)
numpy.arrayprint._leading_trailing(a,edgeitems,index=())
numpy.arrayprint._make_options_dict(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,sign=None,formatter=None,floatmode=None,legacy=None)
numpy.arrayprint._none_or_positive_arg(x,name)
numpy.arrayprint._object_format(o)
numpy.arrayprint._recursive_guard(fillvalue='...')
numpy.arrayprint._void_scalar_to_string(x,is_repr=True)
numpy.arrayprint.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',prefix='',style=np._NoValue,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix='',*,legacy=None)
numpy.arrayprint.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint.dtype_is_implied(dtype)
numpy.arrayprint.dtype_short_repr(dtype)
numpy.arrayprint.format_float_positional(x,precision=None,unique=True,fractional=True,trim='k',sign=False,pad_left=None,pad_right=None,min_digits=None)
numpy.arrayprint.format_float_scientific(x,precision=None,unique=True,trim='k',sign=False,pad_left=None,exp_digits=None,min_digits=None)
numpy.arrayprint.get_printoptions()
numpy.arrayprint.printoptions(*args,**kwargs)
numpy.arrayprint.repr_format(x)
numpy.arrayprint.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,formatter=None,sign=None,floatmode=None,*,legacy=None)
numpy.arrayprint.set_string_function(f,repr=True)
numpy.arrayprint.str_format(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/arrayprint.pyi----------------------------------------
numpy._core.arrayprint._FormatDict(TypedDict,total=False)
numpy._core.arrayprint._FormatOptions(TypedDict)
numpy.arrayprint._FormatDict(TypedDict,total=False)
numpy.arrayprint._FormatOptions(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/__init__.py----------------------------------------
A:numpy._core.__init__.test->PytestTester(__name__)
numpy._core.__init__._DType_reconstruct(scalar_type)
numpy._core.__init__._DType_reduce(DType)
numpy._core.__init__.__getattr__(name)
numpy._core.__init__._ufunc_reduce(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/multiarray.py----------------------------------------
A:numpy._core.multiarray.array_function_from_c_func_and_dispatcher->functools.partial(overrides.array_function_from_dispatcher, module='numpy', docs_from_dispatcher=True, verify=False)
A:numpy._core.multiarray.arrays->list(arrays)
numpy._core.multiarray.bincount(x,weights=None,minlength=None)
numpy._core.multiarray.busday_count(begindates,enddates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy._core.multiarray.busday_offset(dates,offsets,roll=None,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy._core.multiarray.can_cast(from_,to,casting=None)
numpy._core.multiarray.concatenate(arrays,axis=None,out=None,*,dtype=None,casting=None)
numpy._core.multiarray.copyto(dst,src,casting=None,where=None)
numpy._core.multiarray.datetime_as_string(arr,unit=None,timezone=None,casting=None)
numpy._core.multiarray.dot(a,b,out=None)
numpy._core.multiarray.empty_like(prototype,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core.multiarray.inner(a,b)
numpy._core.multiarray.is_busday(dates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy._core.multiarray.lexsort(keys,axis=None)
numpy._core.multiarray.may_share_memory(a,b,max_work=None)
numpy._core.multiarray.min_scalar_type(a)
numpy._core.multiarray.packbits(a,axis=None,bitorder='big')
numpy._core.multiarray.putmask(a,/,mask,values)
numpy._core.multiarray.ravel_multi_index(multi_index,dims,mode=None,order=None)
numpy._core.multiarray.result_type(*arrays_and_dtypes)
numpy._core.multiarray.shares_memory(a,b,max_work=None)
numpy._core.multiarray.unpackbits(a,axis=None,count=None,bitorder='big')
numpy._core.multiarray.unravel_index(indices,shape=None,order=None)
numpy._core.multiarray.vdot(a,b)
numpy._core.multiarray.where(condition,x=None,y=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/multiarray.pyi----------------------------------------
numpy._core.multiarray._SupportsLenAndGetItem(Protocol[_T_contra,_T_co])
numpy._core.multiarray._SupportsLenAndGetItem.__getitem__(self,key:_T_contra,/)->_T_co
numpy._core.multiarray._SupportsLenAndGetItem.__len__(self)->int
numpy._core.multiarray.add_docstring(obj:Callable[...,Any],docstring:str,/)->None
numpy._core.multiarray.arange(start:Any,stop:Any,step:Any=...,dtype:DTypeLike=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.arange(start:Any,stop:Any,step:Any=...,dtype:_DTypeLike[_SCT]=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.arange(start:_FloatLike_co,stop:_FloatLike_co,step:_FloatLike_co=...,dtype:None=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[floating[Any]]
numpy._core.multiarray.arange(start:_IntLike_co,stop:_IntLike_co,step:_IntLike_co=...,dtype:None=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[signedinteger[Any]]
numpy._core.multiarray.arange(start:_TD64Like_co,stop:_TD64Like_co,step:_TD64Like_co=...,dtype:None=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[timedelta64]
numpy._core.multiarray.arange(start:datetime64,stop:datetime64,step:datetime64=...,dtype:None=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[datetime64]
numpy._core.multiarray.arange(stop:Any,/,*,dtype:DTypeLike,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.arange(stop:Any,/,*,dtype:_DTypeLike[_SCT],device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.arange(stop:_FloatLike_co,/,*,dtype:None=...,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[floating[Any]]
numpy._core.multiarray.arange(stop:_IntLike_co,/,*,dtype:None=...,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[signedinteger[Any]]
numpy._core.multiarray.arange(stop:_TD64Like_co,/,*,dtype:None=...,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[timedelta64]
numpy._core.multiarray.array(object:Any,dtype:DTypeLike,*,copy:None|bool|_CopyMode=...,order:_OrderKACF=...,subok:bool=...,ndmin:int=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.array(object:Any,dtype:_DTypeLike[_SCT],*,copy:None|bool|_CopyMode=...,order:_OrderKACF=...,subok:bool=...,ndmin:int=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.array(object:_ArrayLike[_SCT],dtype:None=...,*,copy:None|bool|_CopyMode=...,order:_OrderKACF=...,subok:bool=...,ndmin:int=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.array(object:_ArrayType,dtype:None=...,*,copy:None|bool|_CopyMode=...,order:_OrderKACF=...,subok:L[True],ndmin:int=...,like:None|_SupportsArrayFunc=...)->_ArrayType
numpy._core.multiarray.array(object:object,dtype:None=...,*,copy:None|bool|_CopyMode=...,order:_OrderKACF=...,subok:bool=...,ndmin:int=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asanyarray(a:Any,dtype:DTypeLike,order:_OrderKACF=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asanyarray(a:Any,dtype:_DTypeLike[_SCT],order:_OrderKACF=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asanyarray(a:_ArrayLike[_SCT],dtype:None=...,order:_OrderKACF=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asanyarray(a:_ArrayType,dtype:None=...,order:_OrderKACF=...,*,like:None|_SupportsArrayFunc=...)->_ArrayType
numpy._core.multiarray.asanyarray(a:object,dtype:None=...,order:_OrderKACF=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asarray(a:Any,dtype:DTypeLike,order:_OrderKACF=...,*,device:None|L['cpu']=...,copy:None|bool=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asarray(a:Any,dtype:_DTypeLike[_SCT],order:_OrderKACF=...,*,device:None|L['cpu']=...,copy:None|bool=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asarray(a:_ArrayLike[_SCT],dtype:None=...,order:_OrderKACF=...,*,device:None|L['cpu']=...,copy:None|bool=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asarray(a:object,dtype:None=...,order:_OrderKACF=...,*,device:None|L['cpu']=...,copy:None|bool=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.ascontiguousarray(a:Any,dtype:DTypeLike,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.ascontiguousarray(a:Any,dtype:_DTypeLike[_SCT],*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.ascontiguousarray(a:_ArrayLike[_SCT],dtype:None=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.ascontiguousarray(a:object,dtype:None=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asfortranarray(a:Any,dtype:DTypeLike,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.asfortranarray(a:Any,dtype:_DTypeLike[_SCT],*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asfortranarray(a:_ArrayLike[_SCT],dtype:None=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.asfortranarray(a:object,dtype:None=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.compare_chararrays(a1:_ArrayLikeBytes_co,a2:_ArrayLikeBytes_co,cmp:L['<','<=','==','>=','>','!='],rstrip:bool)->NDArray[np.bool]
numpy._core.multiarray.compare_chararrays(a1:_ArrayLikeStr_co,a2:_ArrayLikeStr_co,cmp:L['<','<=','==','>=','>','!='],rstrip:bool)->NDArray[np.bool]
numpy._core.multiarray.datetime_data(dtype:str|_DTypeLike[datetime64]|_DTypeLike[timedelta64],/)->tuple[str, int]
numpy._core.multiarray.empty(shape:_ShapeLike,dtype:DTypeLike,order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.empty(shape:_ShapeLike,dtype:None=...,order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[float64]
numpy._core.multiarray.empty(shape:_ShapeLike,dtype:_DTypeLike[_SCT],order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.flagsobj
numpy._core.multiarray.flagsobj.__getitem__(self,key:_GetItemKeys)->bool
numpy._core.multiarray.flagsobj.__setitem__(self,key:_SetItemKeys,value:bool)->None
numpy._core.multiarray.flagsobj.behaved(self)->bool
numpy._core.multiarray.flagsobj.c_contiguous(self)->bool
numpy._core.multiarray.flagsobj.carray(self)->bool
numpy._core.multiarray.flagsobj.contiguous(self)->bool
numpy._core.multiarray.flagsobj.f_contiguous(self)->bool
numpy._core.multiarray.flagsobj.farray(self)->bool
numpy._core.multiarray.flagsobj.fnc(self)->bool
numpy._core.multiarray.flagsobj.forc(self)->bool
numpy._core.multiarray.flagsobj.fortran(self)->bool
numpy._core.multiarray.flagsobj.num(self)->int
numpy._core.multiarray.flagsobj.owndata(self)->bool
numpy._core.multiarray.frombuffer(buffer:_SupportsBuffer,dtype:DTypeLike,count:SupportsIndex=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.frombuffer(buffer:_SupportsBuffer,dtype:None=...,count:SupportsIndex=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[float64]
numpy._core.multiarray.frombuffer(buffer:_SupportsBuffer,dtype:_DTypeLike[_SCT],count:SupportsIndex=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.fromfile(file:str|bytes|os.PathLike[Any]|_IOProtocol,dtype:DTypeLike,count:SupportsIndex=...,sep:str=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.fromfile(file:str|bytes|os.PathLike[Any]|_IOProtocol,dtype:None=...,count:SupportsIndex=...,sep:str=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[float64]
numpy._core.multiarray.fromfile(file:str|bytes|os.PathLike[Any]|_IOProtocol,dtype:_DTypeLike[_SCT],count:SupportsIndex=...,sep:str=...,offset:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.fromiter(iter:Iterable[Any],dtype:DTypeLike,count:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.fromiter(iter:Iterable[Any],dtype:_DTypeLike[_SCT],count:SupportsIndex=...,*,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.frompyfunc(func:Callable[...,Any],/,nin:SupportsIndex,nout:SupportsIndex,*,identity:Any=...)->ufunc
numpy._core.multiarray.fromstring(string:str|bytes,dtype:DTypeLike,count:SupportsIndex=...,*,sep:str,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.fromstring(string:str|bytes,dtype:None=...,count:SupportsIndex=...,*,sep:str,like:None|_SupportsArrayFunc=...)->NDArray[float64]
numpy._core.multiarray.fromstring(string:str|bytes,dtype:_DTypeLike[_SCT],count:SupportsIndex=...,*,sep:str,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]
numpy._core.multiarray.nested_iters(op:ArrayLike|Sequence[ArrayLike],axes:Sequence[Sequence[SupportsIndex]],flags:None|Sequence[_NDIterFlagsKind]=...,op_flags:None|Sequence[Sequence[_NDIterOpFlagsKind]]=...,op_dtypes:DTypeLike|Sequence[DTypeLike]=...,order:_OrderKACF=...,casting:_CastingKind=...,buffersize:SupportsIndex=...)->tuple[nditer, ...]
numpy._core.multiarray.promote_types(__type1:DTypeLike,__type2:DTypeLike)->dtype[Any]
numpy._core.multiarray.zeros(shape:_ShapeLike,dtype:DTypeLike,order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[Any]
numpy._core.multiarray.zeros(shape:_ShapeLike,dtype:None=...,order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[float64]
numpy._core.multiarray.zeros(shape:_ShapeLike,dtype:_DTypeLike[_SCT],order:_OrderCF=...,*,device:None|L['cpu']=...,like:None|_SupportsArrayFunc=...)->NDArray[_SCT]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_dtype.py----------------------------------------
A:numpy._core._dtype.arg_str->_construction_repr(dtype, include_align=False)
A:numpy._core._dtype.byteorder->_byte_order_str(dtype)
A:numpy._core._dtype.swapped->numpy.dtype(int).newbyteorder('S')
A:numpy._core._dtype.native->numpy.dtype(int).newbyteorder('S').newbyteorder('S')
A:numpy._core._dtype.(unit, count)->numpy.datetime_data(dtype)
A:numpy._core._dtype.(fld_dtype, offset, title)->_unpack_field(*dtype.fields[name])
A:numpy._core._dtype.(fld_dtype, fld_offset, title)->_unpack_field(*dtype.fields[name])
A:numpy._core._dtype.total_offset->_aligned_offset(total_offset, max_alignment)
A:numpy._core._dtype.max_alignment->max(max_alignment, fld_dtype.alignment)
A:numpy._core._dtype.sub->_struct_dict_str(dtype, include_align)
A:numpy._core._dtype.name->_kind_name(dtype)
numpy._core._dtype.__repr__(dtype)
numpy._core._dtype.__str__(dtype)
numpy._core._dtype._aligned_offset(offset,alignment)
numpy._core._dtype._byte_order_str(dtype)
numpy._core._dtype._construction_repr(dtype,include_align=False,short=False)
numpy._core._dtype._datetime_metadata_str(dtype)
numpy._core._dtype._is_packed(dtype)
numpy._core._dtype._isunsized(dtype)
numpy._core._dtype._kind_name(dtype)
numpy._core._dtype._name_get(dtype)
numpy._core._dtype._name_includes_bit_suffix(dtype)
numpy._core._dtype._scalar_str(dtype,short)
numpy._core._dtype._struct_dict_str(dtype,includealignedflag)
numpy._core._dtype._struct_list_str(dtype)
numpy._core._dtype._struct_str(dtype,include_align)
numpy._core._dtype._subarray_str(dtype)
numpy._core._dtype._unpack_field(dtype,offset,title=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/records.py----------------------------------------
A:numpy._core.records.dtype->sb.dtype(dtype)
A:numpy._core.records.self._nfields->len(keys)
A:numpy._core.records.names->names.split(',').split(',')
A:numpy._core.records._dup->find_duplicate(self._names)
A:numpy._core.records.res->sb.array(recList, dtype=descr).view(recarray)
A:numpy._core.records.obj->obj.view(dtype).view(dtype)
A:numpy._core.records.maxlen->max((len(name) for name in names))
A:numpy._core.records.descr->sb.dtype(dtype)
A:numpy._core.records.self->ndarray.__new__(subtype, shape, (record, descr), buffer=buf, offset=offset, strides=strides, order=order)
A:numpy._core.records.val->sb.dtype((record, val))
A:numpy._core.records.ret->object.__setattr__(self, attr, val)
A:numpy._core.records.repr_dtype->sb.dtype((nt.void, repr_dtype))
A:numpy._core.records.lst->sb.array2string(self, separator=', ', prefix=prefix, suffix=',')
A:numpy._core.records.shape->tuple(shape)
A:numpy._core.records.nn->len(d0)
A:numpy._core.records._array->recarray(shape, descr)
A:numpy._core.records.retval->sb.array(recList, dtype=descr)
A:numpy._core.records._array[k]->tuple(recList[k])
A:numpy._core.records.pos->fd.tell()
A:numpy._core.records.ctx->open(os.fspath(fd), 'rb')
A:numpy._core.records.size->get_remaining_size(fd)
A:numpy._core.records.shapeprod->sb.array(shape).prod(dtype=nt.intp)
A:numpy._core.records.nbytesread->fd.readinto(_array.data)
A:numpy._core.records.new->new.copy().copy()
A:numpy._core.records.interface->getattr(obj, '__array_interface__', None)
numpy._core.records._deprecate_shape_0_as_None(shape)
numpy._core.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy._core.records.find_duplicate(list)
numpy._core.records.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy._core.records.format_parser.__init__(self,formats,names,titles,aligned=False,byteorder=None)
numpy._core.records.format_parser._createdtype(self,byteorder)
numpy._core.records.format_parser._parseFormats(self,formats,aligned=False)
numpy._core.records.format_parser._setfieldnames(self,names,titles)
numpy._core.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy._core.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy._core.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy._core.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy._core.records.get_remaining_size(fd)
numpy._core.records.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy._core.records.recarray.__array_finalize__(self,obj)
numpy._core.records.recarray.__getattribute__(self,attr)
numpy._core.records.recarray.__getitem__(self,indx)
numpy._core.records.recarray.__new__(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy._core.records.recarray.__repr__(self)
numpy._core.records.recarray.__setattr__(self,attr,val)
numpy._core.records.recarray.field(self,attr,val=None)
numpy._core.records.record(nt.void)
numpy._core.records.record.__getattribute__(self,attr)
numpy._core.records.record.__getitem__(self,indx)
numpy._core.records.record.__repr__(self)
numpy._core.records.record.__setattr__(self,attr,val)
numpy._core.records.record.__str__(self)
numpy._core.records.record.pprint(self)
numpy.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.recarray.__array_finalize__(self,obj)
numpy.recarray.__getattribute__(self,attr)
numpy.recarray.__getitem__(self,indx)
numpy.recarray.__repr__(self)
numpy.recarray.__setattr__(self,attr,val)
numpy.recarray.field(self,attr,val=None)
numpy.record(nt.void)
numpy.record.__getattribute__(self,attr)
numpy.record.__getitem__(self,indx)
numpy.record.__repr__(self)
numpy.record.__setattr__(self,attr,val)
numpy.record.__str__(self)
numpy.record.pprint(self)
numpy.records._deprecate_shape_0_as_None(shape)
numpy.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy.records.find_duplicate(list)
numpy.records.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy.records.format_parser._createdtype(self,byteorder)
numpy.records.format_parser._parseFormats(self,formats,aligned=False)
numpy.records.format_parser._setfieldnames(self,names,titles)
numpy.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.get_remaining_size(fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/records.pyi----------------------------------------
numpy._core.records._SupportsReadInto(Protocol)
numpy._core.records._SupportsReadInto.readinto(self,buffer:memoryview,/)->int
numpy._core.records._SupportsReadInto.seek(self,offset:int,whence:int,/)->object
numpy._core.records._SupportsReadInto.tell(self,/)->int
numpy.records._SupportsReadInto(Protocol)
numpy.records._SupportsReadInto.readinto(self,buffer:memoryview,/)->int
numpy.records._SupportsReadInto.seek(self,offset:int,whence:int,/)->object
numpy.records._SupportsReadInto.tell(self,/)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_exceptions.py----------------------------------------
A:numpy._core._exceptions.self.dtypes->tuple(dtypes)
A:numpy._core._exceptions.size_str->self._size_to_string(self._total_size)
numpy._core._exceptions.UFuncTypeError(self,ufunc)
numpy._core._exceptions.UFuncTypeError.__init__(self,ufunc)
numpy._core._exceptions._ArrayMemoryError(self,shape,dtype)
numpy._core._exceptions._ArrayMemoryError.__init__(self,shape,dtype)
numpy._core._exceptions._ArrayMemoryError.__str__(self)
numpy._core._exceptions._ArrayMemoryError._size_to_string(num_bytes)
numpy._core._exceptions._ArrayMemoryError._total_size(self)
numpy._core._exceptions._UFuncBinaryResolutionError(self,ufunc,dtypes)
numpy._core._exceptions._UFuncBinaryResolutionError.__init__(self,ufunc,dtypes)
numpy._core._exceptions._UFuncBinaryResolutionError.__str__(self)
numpy._core._exceptions._UFuncCastingError(self,ufunc,casting,from_,to)
numpy._core._exceptions._UFuncCastingError.__init__(self,ufunc,casting,from_,to)
numpy._core._exceptions._UFuncInputCastingError(self,ufunc,casting,from_,to,i)
numpy._core._exceptions._UFuncInputCastingError.__init__(self,ufunc,casting,from_,to,i)
numpy._core._exceptions._UFuncInputCastingError.__str__(self)
numpy._core._exceptions._UFuncNoLoopError(self,ufunc,dtypes)
numpy._core._exceptions._UFuncNoLoopError.__init__(self,ufunc,dtypes)
numpy._core._exceptions._UFuncNoLoopError.__str__(self)
numpy._core._exceptions._UFuncOutputCastingError(self,ufunc,casting,from_,to,i)
numpy._core._exceptions._UFuncOutputCastingError.__init__(self,ufunc,casting,from_,to,i)
numpy._core._exceptions._UFuncOutputCastingError.__str__(self)
numpy._core._exceptions._display_as_base(cls)
numpy._core._exceptions._unpack_tuple(tup)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/numerictypes.py----------------------------------------
A:numpy._core.numerictypes.g->obj2sctype(t)
A:numpy._core.numerictypes.base->_kind_name(dtype(t))
A:numpy._core.numerictypes.res->dtype(rep)
A:numpy._core.numerictypes.dtype->_preprocess_dtype(dtype)
A:numpy._core.numerictypes.processed_kinds->set()
A:numpy._core.numerictypes.kind->_preprocess_dtype(kind)
A:numpy._core.numerictypes.sctype->obj2sctype(sctype)
A:numpy._core.numerictypes.dt->dtype(typ)
A:numpy._core.numerictypes.ScalarType->tuple(ScalarType)
numpy._core.numerictypes._PreprocessDTypeError(Exception)
numpy._core.numerictypes._preprocess_dtype(dtype)
numpy._core.numerictypes._register_types()
numpy._core.numerictypes._scalar_type_key(typ)
numpy._core.numerictypes.isdtype(dtype,kind)
numpy._core.numerictypes.issctype(rep)
numpy._core.numerictypes.issubclass_(arg1,arg2)
numpy._core.numerictypes.issubdtype(arg1,arg2)
numpy._core.numerictypes.issubsctype(arg1,arg2)
numpy._core.numerictypes.maximum_sctype(t)
numpy._core.numerictypes.obj2sctype(rep,default=None)
numpy._core.numerictypes.sctype2char(sctype)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/numerictypes.pyi----------------------------------------
numpy._core.numerictypes._TypeCodes(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_machar.py----------------------------------------
A:numpy._core._machar.one->float_conv(1)
A:numpy._core._machar.itemp->int_conv(temp - a)
A:numpy._core._machar.beta->float_conv(ibeta)
A:numpy._core._machar.smallest_subnormal->abs(xmin / beta ** it)
A:numpy._core._machar.self.epsneg->float_to_float(epsneg)
A:numpy._core._machar.self._str_epsneg->float_to_str(epsneg)
A:numpy._core._machar.self.eps->float_to_float(eps)
A:numpy._core._machar.self._str_eps->float_to_str(eps)
A:numpy._core._machar.self.xmin->float_to_float(xmin)
A:numpy._core._machar.self._str_xmin->float_to_str(xmin)
A:numpy._core._machar.self.xmax->float_to_float(xmax)
A:numpy._core._machar.self._str_xmax->float_to_str(xmax)
A:numpy._core._machar.self._str_smallest_normal->float_to_str(self.xmin)
A:numpy._core._machar.self.smallest_subnormal->float_to_float(smallest_subnormal)
A:numpy._core._machar.self._str_smallest_subnormal->float_to_str(smallest_subnormal)
A:numpy._core._machar.self.precision->int(-math.log10(float_to_float(self.eps)))
A:numpy._core._machar.self.resolution->float_to_float(resolution)
A:numpy._core._machar.self._str_resolution->float_to_str(resolution)
numpy._core._machar.MachAr(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy._core._machar.MachAr.__init__(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy._core._machar.MachAr.__str__(self)
numpy._core._machar.MachAr._do_init(self,float_conv,int_conv,float_to_float,float_to_str,title)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/getlimits.py----------------------------------------
A:numpy._core.getlimits.a->a.copy().copy()
A:numpy._core.getlimits.self._smallest_subnormal->nextafter(self.ftype(0), self.ftype(1), dtype=self.ftype)
A:numpy._core.getlimits.self.epsilonself.eps->self._float_to_float(eps)
A:numpy._core.getlimits.self.epsneg->self._float_to_float(epsneg)
A:numpy._core.getlimits.self.xmaxself.huge->self._float_to_float(huge)
A:numpy._core.getlimits.self.xmin->self._float_to_float(tiny)
A:numpy._core.getlimits.self.smallest_normalself.tiny->self._float_to_float(tiny)
A:numpy._core.getlimits.self.ibeta->self.params['itype'](ibeta)
A:numpy._core.getlimits.self.precision->int(-log10(self.eps))
A:numpy._core.getlimits.self.resolution->self._float_to_float(self._float_conv(10) ** (-self.precision))
A:numpy._core.getlimits.self._str_eps->_get_machar(dtype)._str_eps.strip()
A:numpy._core.getlimits.self._str_epsneg->_get_machar(dtype)._str_epsneg.strip()
A:numpy._core.getlimits.self._str_xmin->self._float_to_str(self.xmin)
A:numpy._core.getlimits.self._str_xmax->self._float_to_str(self.xmax)
A:numpy._core.getlimits.self._str_resolution->_get_machar(dtype)._str_resolution.strip()
A:numpy._core.getlimits.self._str_smallest_normal->_get_machar(dtype)._str_smallest_normal.strip()
A:numpy._core.getlimits.float16_ma->MachArLike(f16, machep=-10, negep=-11, minexp=-14, maxexp=16, it=10, iexp=5, ibeta=2, irnd=5, ngrd=0, eps=exp2(f16(-10)), epsneg=exp2(f16(-11)), huge=f16(65504), tiny=f16(2 ** (-14)))
A:numpy._core.getlimits.float32_ma->MachArLike(f32, machep=-23, negep=-24, minexp=-126, maxexp=128, it=23, iexp=8, ibeta=2, irnd=5, ngrd=0, eps=exp2(f32(-23)), epsneg=exp2(f32(-24)), huge=f32((1 - 2 ** (-24)) * 2 ** 128), tiny=exp2(f32(-126)))
A:numpy._core.getlimits.float64_ma->MachArLike(f64, machep=-52, negep=-53, minexp=-1022, maxexp=1024, it=52, iexp=11, ibeta=2, irnd=5, ngrd=0, eps=2.0 ** (-52.0), epsneg=epsneg_f64, huge=(1.0 - epsneg_f64) / tiny_f64 * f64(4), tiny=tiny_f64)
A:numpy._core.getlimits.epsneg_f128->exp2(ld(-113))
A:numpy._core.getlimits.tiny_f128->exp2(ld(-16382))
A:numpy._core.getlimits.float128_ma->MachArLike(ld, machep=-112, negep=-113, minexp=-16382, maxexp=16384, it=112, iexp=15, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-112)), epsneg=epsneg_f128, huge=huge_f128, tiny=tiny_f128)
A:numpy._core.getlimits.epsneg_f80->exp2(ld(-64))
A:numpy._core.getlimits.tiny_f80->exp2(ld(-16382))
A:numpy._core.getlimits.float80_ma->MachArLike(ld, machep=-63, negep=-64, minexp=-16382, maxexp=16384, it=63, iexp=15, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-63)), epsneg=epsneg_f80, huge=huge_f80, tiny=tiny_f80)
A:numpy._core.getlimits.huge_dd->nextafter(ld(inf), ld(0), dtype=ld)
A:numpy._core.getlimits.smallest_subnormal_dd->ld(nextafter(0.0, 1.0))
A:numpy._core.getlimits.float_dd_ma->MachArLike(ld, machep=-105, negep=-106, minexp=-1022, maxexp=1024, it=105, iexp=11, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-105)), epsneg=exp2(ld(-106)), huge=huge_dd, tiny=smallest_normal_dd, smallest_subnormal=smallest_subnormal_dd)
A:numpy._core.getlimits.params->_MACHAR_PARAMS.get(ftype)
A:numpy._core.getlimits.key->key.view(key.dtype.newbyteorder('<')).tobytes().view(key.dtype.newbyteorder('<')).tobytes()
A:numpy._core.getlimits.ma_like->_kt.get(key[:10])
A:numpy._core.getlimits.obj->object.__new__(cls)._init(dtype)
A:numpy._core.getlimits.dtype->numeric.dtype(type(dtype))
A:numpy._core.getlimits.newdtype->ntypes.obj2sctype(dtype)
A:numpy._core.getlimits.self.dtype->numeric.dtype(type(int_type))
A:numpy._core.getlimits.machar->_get_machar(dtype)
A:numpy._core.getlimits.self._str_tiny->_get_machar(dtype)._str_xmin.strip()
A:numpy._core.getlimits.self._str_max->_get_machar(dtype)._str_xmax.strip()
A:numpy._core.getlimits.self._str_smallest_subnormal->_get_machar(dtype)._str_smallest_subnormal.strip()
A:numpy._core.getlimits.d->self.__dict__.copy()
A:numpy._core.getlimits.val->int((1 << self.bits - 1) - 1)
numpy._core.MachArLike(self,ftype,*,eps,epsneg,huge,tiny,ibeta,smallest_subnormal=None,**kwargs)
numpy._core.MachArLike._float_conv(self,value)
numpy._core.MachArLike._float_to_float(self,value)
numpy._core.MachArLike._float_to_str(self,value)
numpy._core.MachArLike._str_smallest_subnormal(self)
numpy._core.MachArLike.smallest_subnormal(self)
numpy._core._discovered_machar(ftype)
numpy._core._fr0(a)
numpy._core._fr1(a)
numpy._core._get_machar(ftype)
numpy._core._register_known_types()
numpy._core._register_type(machar,bytepat)
numpy._core.getlimits.MachArLike(self,ftype,*,eps,epsneg,huge,tiny,ibeta,smallest_subnormal=None,**kwargs)
numpy._core.getlimits.MachArLike.__init__(self,ftype,*,eps,epsneg,huge,tiny,ibeta,smallest_subnormal=None,**kwargs)
numpy._core.getlimits.MachArLike._float_conv(self,value)
numpy._core.getlimits.MachArLike._float_to_float(self,value)
numpy._core.getlimits.MachArLike._float_to_str(self,value)
numpy._core.getlimits.MachArLike._str_smallest_subnormal(self)
numpy._core.getlimits.MachArLike.smallest_subnormal(self)
numpy._core.getlimits._discovered_machar(ftype)
numpy._core.getlimits._fr0(a)
numpy._core.getlimits._fr1(a)
numpy._core.getlimits._get_machar(ftype)
numpy._core.getlimits._register_known_types()
numpy._core.getlimits._register_type(machar,bytepat)
numpy._core.getlimits.finfo(cls,dtype)
numpy._core.getlimits.finfo.__new__(cls,dtype)
numpy._core.getlimits.finfo.__repr__(self)
numpy._core.getlimits.finfo.__str__(self)
numpy._core.getlimits.finfo._init(self,dtype)
numpy._core.getlimits.finfo.smallest_normal(self)
numpy._core.getlimits.finfo.tiny(self)
numpy._core.getlimits.iinfo(self,int_type)
numpy._core.getlimits.iinfo.__init__(self,int_type)
numpy._core.getlimits.iinfo.__repr__(self)
numpy._core.getlimits.iinfo.__str__(self)
numpy._core.getlimits.iinfo.max(self)
numpy._core.getlimits.iinfo.min(self)
numpy.finfo(cls,dtype)
numpy.finfo.__repr__(self)
numpy.finfo.__str__(self)
numpy.finfo._init(self,dtype)
numpy.finfo.smallest_normal(self)
numpy.finfo.tiny(self)
numpy.iinfo(self,int_type)
numpy.iinfo.__repr__(self)
numpy.iinfo.__str__(self)
numpy.iinfo.max(self)
numpy.iinfo.min(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/getlimits.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/umath.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_internal.py----------------------------------------
A:numpy._core._internal.n->len(obj)
A:numpy._core._internal.num->int(obj[1])
A:numpy._core._internal.format->dtype(obj[0], align=align)
A:numpy._core._internal.(names, formats, offsets, titles)->_makenames_list(adict, align)
A:numpy._core._internal.new->descriptor.metadata.copy()
A:numpy._core._internal.format_re->re.compile('(?P<order1>[<>|=]?)(?P<repeats> *[(]?[ ,0-9]*[)]? *)(?P<order2>[<>|=]?)(?P<dtype>[A-Za-z0-9.?]*(?:\\[[a-zA-Z0-9,.]+\\])?)')
A:numpy._core._internal.sep_re->re.compile('\\s*,\\s*')
A:numpy._core._internal.space_re->re.compile('\\s+$')
A:numpy._core._internal.mo->re.compile('\\s*,\\s*').match(astr, pos=startindex)
A:numpy._core._internal.(order1, repeats, order2, dtype)->re.compile('\\s*,\\s*').match(astr, pos=startindex).groups()
A:numpy._core._internal.startindex->re.compile('\\s*,\\s*').match(astr, pos=startindex).end()
A:numpy._core._internal.order1->_convorder.get(order1, order1)
A:numpy._core._internal.order2->_convorder.get(order2, order2)
A:numpy._core._internal.val->dummy_ctype(np.intp)
A:numpy._core._internal.self._data->self._ctypes.c_void_p(ptr)
A:numpy._core._internal.self._ctypes->_missing_ctypes()
A:numpy._core._internal.ptr->self._ctypes.cast(self._data, obj)
A:numpy._core._internal.nameslist->list(oldnames)
A:numpy._core._internal.seen->set()
A:numpy._core._internal.new_descr->promote_types(field1[0], field2[0])
A:numpy._core._internal.res->self.advance(i)
A:numpy._core._internal._pep3118_native_typechars->''.join(_pep3118_native_map.keys())
A:numpy._core._internal._pep3118_standard_typechars->''.join(_pep3118_standard_map.keys())
A:numpy._core._internal.i->self.s.index(c)
A:numpy._core._internal.stream->_Stream(spec)
A:numpy._core._internal.(dtype, align)->__dtype_from_pep3118(stream, is_subdtype=False)
A:numpy._core._internal.field_spec->dict(names=names, formats=[fields[name][0] for name in names], offsets=[fields[name][1] for name in names], itemsize=value.itemsize)
A:numpy._core._internal.shape->tuple(map(int, shape.split(',')))
A:numpy._core._internal.byteorder->_Stream(spec).advance(1)
A:numpy._core._internal.itemsize_str->_Stream(spec).consume_until(lambda c: not c.isdigit())
A:numpy._core._internal.itemsize->int(itemsize_str)
A:numpy._core._internal.(value, align)->__dtype_from_pep3118(stream, is_subdtype=True)
A:numpy._core._internal.typechar->_Stream(spec).advance(1)
A:numpy._core._internal.numpy_byteorder->{'@': '=', '^': '='}.get(stream.byteorder, stream.byteorder)
A:numpy._core._internal.value->dtype((value, shape))
A:numpy._core._internal.common_alignment->_lcm(align, common_alignment)
A:numpy._core._internal.name->_Stream(spec).consume_until(':')
A:numpy._core._internal.ret->dtype(field_spec)
A:numpy._core._internal.args_string->', '.join(['{!r}'.format(arg) for arg in inputs] + ['{}={!r}'.format(k, v) for (k, v) in kwargs.items()])
A:numpy._core._internal.types_string->', '.join((repr(type(arg).__name__) for arg in args))
A:numpy._core._internal.func_name->'{}.{}'.format(public_api.__module__, public_api.__name__)
A:numpy._core._internal.in_args->', '.join((f'x{i + 1}' for i in range(ufunc.nin)))
A:numpy._core._internal.out_args->'[, {positional}], / [, out={default}]'.format(positional=', '.join(('out{}'.format(i + 1) for i in range(ufunc.nout))), default=repr((None,) * ufunc.nout))
numpy._core._internal._Stream(self,s)
numpy._core._internal._Stream.__bool__(self)
numpy._core._internal._Stream.__init__(self,s)
numpy._core._internal._Stream.advance(self,n)
numpy._core._internal._Stream.consume(self,c)
numpy._core._internal._Stream.consume_until(self,c)
numpy._core._internal._Stream.next(self)
numpy._core._internal.__dtype_from_pep3118(stream,is_subdtype)
numpy._core._internal._add_trailing_padding(value,padding)
numpy._core._internal._array_descr(descriptor)
numpy._core._internal._commastring(astr)
numpy._core._internal._convert_to_stringdtype_kwargs(coerce,na_object=_NoValue)
numpy._core._internal._copy_fields(ary)
numpy._core._internal._ctypes(self,array,ptr=None)
numpy._core._internal._ctypes.__init__(self,array,ptr=None)
numpy._core._internal._ctypes._as_parameter_(self)
numpy._core._internal._ctypes.data(self)
numpy._core._internal._ctypes.data_as(self,obj)
numpy._core._internal._ctypes.get_as_parameter(self)
numpy._core._internal._ctypes.get_data(self)
numpy._core._internal._ctypes.get_shape(self)
numpy._core._internal._ctypes.get_strides(self)
numpy._core._internal._ctypes.shape(self)
numpy._core._internal._ctypes.shape_as(self,obj)
numpy._core._internal._ctypes.strides(self)
numpy._core._internal._ctypes.strides_as(self,obj)
numpy._core._internal._dtype_from_pep3118(spec)
numpy._core._internal._fix_names(field_spec)
numpy._core._internal._gcd(a,b)
numpy._core._internal._getfield_is_safe(oldtype,newtype,offset)
numpy._core._internal._getintp_ctype()
numpy._core._internal._lcm(a,b)
numpy._core._internal._makenames_list(adict,align)
numpy._core._internal._missing_ctypes
numpy._core._internal._missing_ctypes.c_void_p(self,ptr)
numpy._core._internal._missing_ctypes.c_void_p.__init__(self,ptr)
numpy._core._internal._missing_ctypes.cast(self,num,obj)
numpy._core._internal._newnames(datatype,order)
numpy._core._internal._prod(a)
numpy._core._internal._promote_fields(dt1,dt2)
numpy._core._internal._ufunc_doc_signature_formatter(ufunc)
numpy._core._internal._usefields(adict,align)
numpy._core._internal._view_is_safe(oldtype,newtype)
numpy._core._internal.array_function_errmsg_formatter(public_api,types)
numpy._core._internal.array_ufunc_errmsg_formatter(dummy,ufunc,method,*inputs,**kwargs)
numpy._core._internal.dummy_ctype(self,cls)
numpy._core._internal.dummy_ctype.__eq__(self,other)
numpy._core._internal.dummy_ctype.__init__(self,cls)
numpy._core._internal.dummy_ctype.__mul__(self,other)
numpy._core._internal.dummy_ctype.__ne__(self,other)
numpy._core._internal.npy_ctypes_check(cls)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_internal.pyi----------------------------------------
numpy._core._internal._ctypes.__new__(cls,array:NDArray[Any],ptr:_PT)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/numeric.py----------------------------------------
A:numpy._core.numeric.ufunc->type(sin)
A:numpy._core.numeric.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy._core.numeric.res->all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))
A:numpy._core.numeric.z->zeros(1, dtype=res.dtype)
A:numpy._core.numeric.a->a.astype(dtype).astype(dtype)
A:numpy._core.numeric._ones_with_like->array_function_dispatch()(ones)
A:numpy._core.numeric.fill_value->asarray(fill_value)
A:numpy._core.numeric._full_with_like->array_function_dispatch()(full)
A:numpy._core.numeric.a_bool->a.astype(dtype).astype(dtype).astype(np.bool, copy=False)
A:numpy._core.numeric.b->b.astype(dtype).astype(dtype)
A:numpy._core.numeric.axes_a->list(axes_a)
A:numpy._core.numeric.axes_b->list(axes_b)
A:numpy._core.numeric.na->len(axes_a)
A:numpy._core.numeric.nb->len(axes_b)
A:numpy._core.numeric.N2->math.prod((bs[axis] for axis in axes_b))
A:numpy._core.numeric.at->a.astype(dtype).astype(dtype).transpose(newaxes_a).reshape(newshape_a)
A:numpy._core.numeric.bt->b.astype(dtype).astype(dtype).transpose(newaxes_b).reshape(newshape_b)
A:numpy._core.numeric.axis->tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])
A:numpy._core.numeric.broadcasted->broadcast(shift, axis)
A:numpy._core.numeric.result->transpose(order)
A:numpy._core.numeric.(arr_index, res_index)->zip(*indices)
A:numpy._core.numeric.axes->list(range(0, n))
A:numpy._core.numeric.source->normalize_axis_tuple(source, a.ndim, 'source')
A:numpy._core.numeric.destination->normalize_axis_tuple(destination, a.ndim, 'destination')
A:numpy._core.numeric.axisa->normalize_axis_index(axisa, a.ndim, msg_prefix='axisa')
A:numpy._core.numeric.axisb->normalize_axis_index(axisb, b.ndim, msg_prefix='axisb')
A:numpy._core.numeric.axisc->normalize_axis_index(axisc, len(shape), msg_prefix='axisc')
A:numpy._core.numeric.dtype->promote_types(a.dtype, b.dtype)
A:numpy._core.numeric.cp->empty(shape, dtype)
A:numpy._core.numeric.tmp->array(a2 * b1)
A:numpy._core.numeric.dimensions->tuple(dimensions)
A:numpy._core.numeric.N->len(dimensions)
A:numpy._core.numeric.idx->arange(dim, dtype=dtype).reshape(shape[:i] + (dim,) + shape[i + 1:])
A:numpy._core.numeric.args->indices(shape, dtype=dtype)
A:numpy._core.numeric._fromfunction_with_like->array_function_dispatch()(fromfunction)
A:numpy._core.numeric.num->abs(int(number))
A:numpy._core.numeric.binwidth->len(binary)
A:numpy._core.numeric.poswidth->len(bin(-num)[2:])
A:numpy._core.numeric.outwidth->builtins.max(binwidth, width)
A:numpy._core.numeric.dt->multiarray.result_type(y, 1.0)
A:numpy._core.numeric._identity_with_like->array_function_dispatch()(identity)
A:numpy._core.numeric.y->float(y)
A:numpy._core.numeric.False_->nt.bool(False)
A:numpy._core.numeric.True_->nt.bool(True)
A:numpy._core.numeric.existing->set(__all__)
A:numpy._core.numeric.mall->getattr(module, '__all__')
numpy._core._allclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._core._argwhere_dispatcher(a)
numpy._core._array_equal_dispatcher(a1,a2,equal_nan=None)
numpy._core._array_equiv_dispatcher(a1,a2)
numpy._core._astype_dispatcher(x,dtype,/,*,copy=None)
numpy._core._convolve_dispatcher(a,v,mode=None)
numpy._core._correlate_dispatcher(a,v,mode=None)
numpy._core._count_nonzero_dispatcher(a,axis=None,*,keepdims=None)
numpy._core._cross_dispatcher(a,b,axisa=None,axisb=None,axisc=None,axis=None)
numpy._core._dtype_cannot_hold_nan(dtype)
numpy._core._flatnonzero_dispatcher(a)
numpy._core._frombuffer(buf,dtype,shape,order)
numpy._core._full_dispatcher(shape,fill_value,dtype=None,order=None,*,device=None,like=None)
numpy._core._full_like_dispatcher(a,fill_value,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core._isclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._core._maketup(descr,val)
numpy._core._moveaxis_dispatcher(a,source,destination)
numpy._core._ones_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core._outer_dispatcher(a,b,out=None)
numpy._core._roll_dispatcher(a,shift,axis=None)
numpy._core._rollaxis_dispatcher(a,axis,start=None)
numpy._core._tensordot_dispatcher(a,b,axes=None)
numpy._core._zeros_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core.normalize_axis_tuple(axis,ndim,argname=None,allow_duplicate=False)
numpy._core.numeric._allclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._core.numeric._argwhere_dispatcher(a)
numpy._core.numeric._array_equal_dispatcher(a1,a2,equal_nan=None)
numpy._core.numeric._array_equiv_dispatcher(a1,a2)
numpy._core.numeric._astype_dispatcher(x,dtype,/,*,copy=None)
numpy._core.numeric._convolve_dispatcher(a,v,mode=None)
numpy._core.numeric._correlate_dispatcher(a,v,mode=None)
numpy._core.numeric._count_nonzero_dispatcher(a,axis=None,*,keepdims=None)
numpy._core.numeric._cross_dispatcher(a,b,axisa=None,axisb=None,axisc=None,axis=None)
numpy._core.numeric._dtype_cannot_hold_nan(dtype)
numpy._core.numeric._flatnonzero_dispatcher(a)
numpy._core.numeric._frombuffer(buf,dtype,shape,order)
numpy._core.numeric._full_dispatcher(shape,fill_value,dtype=None,order=None,*,device=None,like=None)
numpy._core.numeric._full_like_dispatcher(a,fill_value,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core.numeric._isclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._core.numeric._maketup(descr,val)
numpy._core.numeric._moveaxis_dispatcher(a,source,destination)
numpy._core.numeric._ones_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core.numeric._outer_dispatcher(a,b,out=None)
numpy._core.numeric._roll_dispatcher(a,shift,axis=None)
numpy._core.numeric._rollaxis_dispatcher(a,axis,start=None)
numpy._core.numeric._tensordot_dispatcher(a,b,axes=None)
numpy._core.numeric._zeros_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None,*,device=None)
numpy._core.numeric.allclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy._core.numeric.argwhere(a)
numpy._core.numeric.array_equal(a1,a2,equal_nan=False)
numpy._core.numeric.array_equiv(a1,a2)
numpy._core.numeric.astype(x,dtype,/,*,copy=True)
numpy._core.numeric.base_repr(number,base=2,padding=0)
numpy._core.numeric.binary_repr(num,width=None)
numpy._core.numeric.convolve(a,v,mode='full')
numpy._core.numeric.correlate(a,v,mode='valid')
numpy._core.numeric.count_nonzero(a,axis=None,*,keepdims=False)
numpy._core.numeric.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy._core.numeric.extend_all(module)
numpy._core.numeric.flatnonzero(a)
numpy._core.numeric.fromfunction(function,shape,*,dtype=float,like=None,**kwargs)
numpy._core.numeric.full(shape,fill_value,dtype=None,order='C',*,device=None,like=None)
numpy._core.numeric.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None,*,device=None)
numpy._core.numeric.identity(n,dtype=None,*,like=None)
numpy._core.numeric.indices(dimensions,dtype=int,sparse=False)
numpy._core.numeric.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy._core.numeric.isfortran(a)
numpy._core.numeric.isscalar(element)
numpy._core.numeric.moveaxis(a,source,destination)
numpy._core.numeric.normalize_axis_tuple(axis,ndim,argname=None,allow_duplicate=False)
numpy._core.numeric.ones(shape,dtype=None,order='C',*,device=None,like=None)
numpy._core.numeric.ones_like(a,dtype=None,order='K',subok=True,shape=None,*,device=None)
numpy._core.numeric.outer(a,b,out=None)
numpy._core.numeric.roll(a,shift,axis=None)
numpy._core.numeric.rollaxis(a,axis,start=0)
numpy._core.numeric.tensordot(a,b,axes=2)
numpy._core.numeric.zeros_like(a,dtype=None,order='K',subok=True,shape=None,*,device=None)
numpy.allclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.argwhere(a)
numpy.array_equal(a1,a2,equal_nan=False)
numpy.array_equiv(a1,a2)
numpy.astype(x,dtype,/,*,copy=True)
numpy.base_repr(number,base=2,padding=0)
numpy.binary_repr(num,width=None)
numpy.convolve(a,v,mode='full')
numpy.correlate(a,v,mode='valid')
numpy.count_nonzero(a,axis=None,*,keepdims=False)
numpy.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy.extend_all(module)
numpy.flatnonzero(a)
numpy.fromfunction(function,shape,*,dtype=float,like=None,**kwargs)
numpy.full(shape,fill_value,dtype=None,order='C',*,device=None,like=None)
numpy.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None,*,device=None)
numpy.identity(n,dtype=None,*,like=None)
numpy.indices(dimensions,dtype=int,sparse=False)
numpy.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.isfortran(a)
numpy.isscalar(element)
numpy.moveaxis(a,source,destination)
numpy.ones(shape,dtype=None,order='C',*,device=None,like=None)
numpy.ones_like(a,dtype=None,order='K',subok=True,shape=None,*,device=None)
numpy.outer(a,b,out=None)
numpy.roll(a,shift,axis=None)
numpy.rollaxis(a,axis,start=0)
numpy.tensordot(a,b,axes=2)
numpy.zeros_like(a,dtype=None,order='K',subok=True,shape=None,*,device=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/numeric.pyi----------------------------------------
numpy._core.numeric.vecdot(x1:_ArrayLikeBool_co,x2:_ArrayLikeBool_co,axis:int=...)->NDArray[np.bool]
numpy._core.numeric.vecdot(x1:_ArrayLikeComplex_co,x2:_ArrayLikeComplex_co,axis:int=...)->NDArray[complexfloating[Any, Any]]
numpy._core.numeric.vecdot(x1:_ArrayLikeFloat_co,x2:_ArrayLikeFloat_co,axis:int=...)->NDArray[floating[Any]]
numpy._core.numeric.vecdot(x1:_ArrayLikeInt_co,x2:_ArrayLikeInt_co,axis:int=...)->NDArray[signedinteger[Any]]
numpy._core.numeric.vecdot(x1:_ArrayLikeObject_co,x2:_ArrayLikeObject_co,axis:int=...)->NDArray[object_]
numpy._core.numeric.vecdot(x1:_ArrayLikeTD64_co,x2:_ArrayLikeTD64_co,axis:int=...)->NDArray[timedelta64]
numpy._core.numeric.vecdot(x1:_ArrayLikeUInt_co,x2:_ArrayLikeUInt_co,axis:int=...)->NDArray[unsignedinteger[Any]]
numpy._core.numeric.vecdot(x1:_ArrayLikeUnknown,x2:_ArrayLikeUnknown,axis:int=...)->NDArray[Any]
numpy.vecdot(x1:_ArrayLikeBool_co,x2:_ArrayLikeBool_co,axis:int=...)->NDArray[np.bool]
numpy.vecdot(x1:_ArrayLikeComplex_co,x2:_ArrayLikeComplex_co,axis:int=...)->NDArray[complexfloating[Any, Any]]
numpy.vecdot(x1:_ArrayLikeFloat_co,x2:_ArrayLikeFloat_co,axis:int=...)->NDArray[floating[Any]]
numpy.vecdot(x1:_ArrayLikeInt_co,x2:_ArrayLikeInt_co,axis:int=...)->NDArray[signedinteger[Any]]
numpy.vecdot(x1:_ArrayLikeObject_co,x2:_ArrayLikeObject_co,axis:int=...)->NDArray[object_]
numpy.vecdot(x1:_ArrayLikeTD64_co,x2:_ArrayLikeTD64_co,axis:int=...)->NDArray[timedelta64]
numpy.vecdot(x1:_ArrayLikeUInt_co,x2:_ArrayLikeUInt_co,axis:int=...)->NDArray[unsignedinteger[Any]]
numpy.vecdot(x1:_ArrayLikeUnknown,x2:_ArrayLikeUnknown,axis:int=...)->NDArray[Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_asarray.py----------------------------------------
A:numpy._core._asarray.arr->array(a, dtype=dtype, order=order, copy=None, subok=subok)
A:numpy._core._asarray._require_with_like->array_function_dispatch()(require)
numpy._core._asarray.require(a,dtype=None,requirements=None,*,like=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_asarray.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_add_newdocs.py----------------------------------------
numpy._core._add_newdocs.refer_to_array_attribute(attr,method=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/einsumfunc.py----------------------------------------
A:numpy._core.einsumfunc.einsum_symbols_set->set(einsum_symbols)
A:numpy._core.einsumfunc.overall_size->_compute_size_by_dict(idx_contraction, size_dictionary)
A:numpy._core.einsumfunc.op_factor->max(1, num_terms - 1)
A:numpy._core.einsumfunc.idx_contract->set()
A:numpy._core.einsumfunc.idx_remain->set(output_subscript).copy()
A:numpy._core.einsumfunc.cont->_find_contraction(con, remaining, output_set)
A:numpy._core.einsumfunc.new_size->_compute_size_by_dict(idx_result, idx_dict)
A:numpy._core.einsumfunc.contract->_find_contraction(contract_inds, input_sets, output_set)
A:numpy._core.einsumfunc.cost->_flop_count(idx_contract, idx_removed, len(contract_inds), dimension_dict)
A:numpy._core.einsumfunc.naive_cost->_flop_count(indices, inner_product, len(input_list), dimension_dict)
A:numpy._core.einsumfunc.comb_iter->itertools.combinations(range(len(input_sets)), 2)
A:numpy._core.einsumfunc.result->_parse_possible_contraction(positions, input_sets, output_set, idx_dict, memory_limit, path_cost, naive_cost)
A:numpy._core.einsumfunc.best->min(known_contractions, key=lambda x: x[0])
A:numpy._core.einsumfunc.known_contractions->_update_other_results(known_contractions, best)
A:numpy._core.einsumfunc.set_left->set(input_left)
A:numpy._core.einsumfunc.set_right->set(input_right)
A:numpy._core.einsumfunc.rs->len(idx_removed)
A:numpy._core.einsumfunc.subscripts->','.join(split_subscripts)
A:numpy._core.einsumfunc.tmp_operands->list(operands)
A:numpy._core.einsumfunc.s->operator.index(s)
A:numpy._core.einsumfunc.used->','.join(split_subscripts).replace('.', '').replace(',', '').replace('->', '')
A:numpy._core.einsumfunc.unused->list(einsum_symbols_set - set(used))
A:numpy._core.einsumfunc.ellipse_inds->''.join(unused)
A:numpy._core.einsumfunc.(input_tmp, output_sub)->','.join(split_subscripts).split('->')
A:numpy._core.einsumfunc.split_subscripts->','.join(split_subscripts).split(',')
A:numpy._core.einsumfunc.ellipse_count->max(operands[num].ndim, 1)
A:numpy._core.einsumfunc.split_subscripts[num]->sub.replace('...', rep_inds)
A:numpy._core.einsumfunc.tmp_subscripts->','.join(split_subscripts).replace(',', '')
A:numpy._core.einsumfunc.normal_inds->''.join(sorted(set(output_subscript) - set(out_ellipse)))
A:numpy._core.einsumfunc.(input_subscripts, output_subscript)->','.join(split_subscripts).split('->')
A:numpy._core.einsumfunc.memory_limit->int(path_type[1])
A:numpy._core.einsumfunc.(input_subscripts, output_subscript, operands)->_parse_einsum_input(operands)
A:numpy._core.einsumfunc.input_list->input_subscripts.split(',')
A:numpy._core.einsumfunc.output_set->set(output_subscript)
A:numpy._core.einsumfunc.indices->set(input_subscripts.replace(',', ''))
A:numpy._core.einsumfunc.max_size->max(size_list)
A:numpy._core.einsumfunc.path->_optimal_path(input_sets, output_set, dimension_dict, memory_arg)
A:numpy._core.einsumfunc.contract_inds->tuple(sorted(list(contract_inds), reverse=True))
A:numpy._core.einsumfunc.bcast->set()
A:numpy._core.einsumfunc.do_blas->_can_dot(tmp_inputs, out_inds, idx_removed)
A:numpy._core.einsumfunc.idx_result->''.join([x[1] for x in sorted(sort_result)])
A:numpy._core.einsumfunc.max_i->max(size_list)
A:numpy._core.einsumfunc.(operands, contraction_list)->einsum_path(*operands, optimize=optimize, einsum_call=True)
A:numpy._core.einsumfunc.output_order->kwargs.pop('order', 'K')
A:numpy._core.einsumfunc.(input_str, results_index)->einsum_str.split('->')
A:numpy._core.einsumfunc.(input_left, input_right)->input_str.split(',')
A:numpy._core.einsumfunc.tensor_result->tensor_result.replace(s, '').replace(s, '')
A:numpy._core.einsumfunc.new_view->c_einsum(einsum_str, *tmp_operands, **kwargs)
numpy._core._can_dot(inputs,result,idx_removed)
numpy._core._compute_size_by_dict(indices,idx_dict)
numpy._core._einsum_dispatcher(*operands,out=None,optimize=None,**kwargs)
numpy._core._einsum_path_dispatcher(*operands,optimize=None,einsum_call=None)
numpy._core._find_contraction(positions,input_sets,output_set)
numpy._core._flop_count(idx_contraction,inner,num_terms,size_dictionary)
numpy._core._greedy_path(input_sets,output_set,idx_dict,memory_limit)
numpy._core._optimal_path(input_sets,output_set,idx_dict,memory_limit)
numpy._core._parse_einsum_input(operands)
numpy._core._parse_possible_contraction(positions,input_sets,output_set,idx_dict,memory_limit,path_cost,naive_cost)
numpy._core._update_other_results(results,best)
numpy._core.einsumfunc._can_dot(inputs,result,idx_removed)
numpy._core.einsumfunc._compute_size_by_dict(indices,idx_dict)
numpy._core.einsumfunc._einsum_dispatcher(*operands,out=None,optimize=None,**kwargs)
numpy._core.einsumfunc._einsum_path_dispatcher(*operands,optimize=None,einsum_call=None)
numpy._core.einsumfunc._find_contraction(positions,input_sets,output_set)
numpy._core.einsumfunc._flop_count(idx_contraction,inner,num_terms,size_dictionary)
numpy._core.einsumfunc._greedy_path(input_sets,output_set,idx_dict,memory_limit)
numpy._core.einsumfunc._optimal_path(input_sets,output_set,idx_dict,memory_limit)
numpy._core.einsumfunc._parse_einsum_input(operands)
numpy._core.einsumfunc._parse_possible_contraction(positions,input_sets,output_set,idx_dict,memory_limit,path_cost,naive_cost)
numpy._core.einsumfunc._update_other_results(results,best)
numpy._core.einsumfunc.einsum(*operands,out=None,optimize=False,**kwargs)
numpy._core.einsumfunc.einsum_path(*operands,optimize='greedy',einsum_call=False)
numpy.einsum(*operands,out=None,optimize=False,**kwargs)
numpy.einsum_path(*operands,optimize='greedy',einsum_call=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/einsumfunc.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/strings.py----------------------------------------
A:numpy._core.strings.output_dtype_like->numpy.asarray(output_dtype_like)
A:numpy._core.strings.ret->numpy.asarray(result.tolist())
A:numpy._core.strings.a->numpy.asanyarray(a)
A:numpy._core.strings.i->numpy.maximum(i, 0)
A:numpy._core.strings.a_len->str_len(a)
A:numpy._core.strings.out->numpy.empty_like(arr, shape=buffersizes.shape, dtype=out_dtype)
A:numpy._core.strings.tabsize->numpy.asanyarray(tabsize)
A:numpy._core.strings.shape->numpy.broadcast_shapes(a.shape, tabsize.shape)
A:numpy._core.strings.buffersizes->_expandtabs_length(a, tabsize)
A:numpy._core.strings.a_arr->numpy.asarray(a)
A:numpy._core.strings.width_arr->numpy.asarray(width)
A:numpy._core.strings.size->int(np.max(width_arr.flat))
A:numpy._core.strings.fillchar->numpy._utils.asbytes(fillchar)
A:numpy._core.strings.res_dtype->type(a_arr.dtype)(size)
A:numpy._core.strings.arr->numpy.asanyarray(a)
A:numpy._core.strings.old->numpy.asanyarray(old, dtype=getattr(old, 'dtype', a_dt))
A:numpy._core.strings.new->numpy.asanyarray(new, dtype=getattr(new, 'dtype', a_dt))
A:numpy._core.strings.count->numpy.asanyarray(count)
A:numpy._core.strings.counts->numpy.where(count < 0, counts, np.minimum(counts, count))
numpy._core.strings._clean_args(*args)
numpy._core.strings._get_num_chars(a)
numpy._core.strings._join(sep,seq)
numpy._core.strings._partition(a,sep)
numpy._core.strings._rpartition(a,sep)
numpy._core.strings._rsplit(a,sep=None,maxsplit=None)
numpy._core.strings._split(a,sep=None,maxsplit=None)
numpy._core.strings._splitlines(a,keepends=None)
numpy._core.strings._to_bytes_or_str_array(result,output_dtype_like)
numpy._core.strings.capitalize(a)
numpy._core.strings.center(a,width,fillchar='')
numpy._core.strings.count(a,sub,start=0,end=None)
numpy._core.strings.decode(a,encoding=None,errors=None)
numpy._core.strings.encode(a,encoding=None,errors=None)
numpy._core.strings.endswith(a,suffix,start=0,end=None)
numpy._core.strings.expandtabs(a,tabsize=8)
numpy._core.strings.find(a,sub,start=0,end=None)
numpy._core.strings.index(a,sub,start=0,end=None)
numpy._core.strings.ljust(a,width,fillchar='')
numpy._core.strings.lower(a)
numpy._core.strings.lstrip(a,chars=None)
numpy._core.strings.mod(a,values)
numpy._core.strings.multiply(a,i)
numpy._core.strings.replace(a,old,new,count=-1)
numpy._core.strings.rfind(a,sub,start=0,end=None)
numpy._core.strings.rindex(a,sub,start=0,end=None)
numpy._core.strings.rjust(a,width,fillchar='')
numpy._core.strings.rstrip(a,chars=None)
numpy._core.strings.startswith(a,prefix,start=0,end=None)
numpy._core.strings.strip(a,chars=None)
numpy._core.strings.swapcase(a)
numpy._core.strings.title(a)
numpy._core.strings.translate(a,table,deletechars=None)
numpy._core.strings.upper(a)
numpy._core.strings.zfill(a,width)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/strings.pyi----------------------------------------
numpy._core.strings.add(x1:S_co,x2:S_co)->NDArray[np.bytes_]
numpy._core.strings.add(x1:U_co,x2:U_co)->NDArray[np.str_]
numpy._core.strings.equal(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.equal(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.greater(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.greater(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.greater_equal(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.greater_equal(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.isalnum(a:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.isalpha(x:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.isdecimal(x:U_co)->NDArray[np.bool]
numpy._core.strings.isdigit(x:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.islower(a:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.isnumeric(x:U_co)->NDArray[np.bool]
numpy._core.strings.isspace(x:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.istitle(a:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.isupper(a:U_co|S_co)->NDArray[np.bool]
numpy._core.strings.join(sep:S_co,seq:S_co)->NDArray[np.bytes_]
numpy._core.strings.join(sep:U_co,seq:U_co)->NDArray[np.str_]
numpy._core.strings.less(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.less(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.less_equal(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.less_equal(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.not_equal(x1:S_co,x2:S_co)->NDArray[np.bool]
numpy._core.strings.not_equal(x1:U_co,x2:U_co)->NDArray[np.bool]
numpy._core.strings.partition(a:S_co,sep:S_co)->NDArray[np.bytes_]
numpy._core.strings.partition(a:U_co,sep:U_co)->NDArray[np.str_]
numpy._core.strings.rpartition(a:S_co,sep:S_co)->NDArray[np.bytes_]
numpy._core.strings.rpartition(a:U_co,sep:U_co)->NDArray[np.str_]
numpy._core.strings.rsplit(a:S_co,sep:None|S_co=...,maxsplit:None|i_co=...)->NDArray[np.object_]
numpy._core.strings.rsplit(a:U_co,sep:None|U_co=...,maxsplit:None|i_co=...)->NDArray[np.object_]
numpy._core.strings.split(a:S_co,sep:None|S_co=...,maxsplit:None|i_co=...)->NDArray[np.object_]
numpy._core.strings.split(a:U_co,sep:None|U_co=...,maxsplit:None|i_co=...)->NDArray[np.object_]
numpy._core.strings.splitlines(a:S_co,keepends:None|b_co=...)->NDArray[np.object_]
numpy._core.strings.splitlines(a:U_co,keepends:None|b_co=...)->NDArray[np.object_]
numpy._core.strings.str_len(x:U_co|S_co)->NDArray[np.int_]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/overrides.py----------------------------------------
A:numpy._core.overrides.ARRAY_FUNCTIONS->set()
A:numpy._core.overrides.public_api.__doc__->functools.wraps(implementation)(public_api).__doc__.replace('${ARRAY_FUNCTION_LIKE}', array_function_like_doc)
A:numpy._core.overrides.ArgSpec->collections.namedtuple('ArgSpec', 'args varargs keywords defaults')
A:numpy._core.overrides.implementation_spec->ArgSpec(*getargspec(implementation))
A:numpy._core.overrides.dispatcher_spec->ArgSpec(*getargspec(dispatcher))
A:numpy._core.overrides.public_api->functools.wraps(implementation)(public_api)
numpy._core.overrides.array_function_dispatch(dispatcher=None,module=None,verify=True,docs_from_dispatcher=False)
numpy._core.overrides.array_function_from_dispatcher(implementation,module=None,verify=True,docs_from_dispatcher=True)
numpy._core.overrides.set_array_function_like_doc(public_api)
numpy._core.overrides.verify_matching_signatures(implementation,dispatcher)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/fromnumeric.py----------------------------------------
A:numpy._core.fromnumeric.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy._core.fromnumeric.conv->_array_converter(obj)
A:numpy._core.fromnumeric.(arr,)->_array_converter(obj).as_arrays(subok=False)
A:numpy._core.fromnumeric.result->getattr(arr, method)(*args, **kwds)
A:numpy._core.fromnumeric.bound->getattr(obj, method, None)
A:numpy._core.fromnumeric.reduction->getattr(obj, method)
A:numpy._core.fromnumeric.x->asanyarray(x)
A:numpy._core.fromnumeric.a->ravel(a)
A:numpy._core.fromnumeric.res->_sum_(a)
numpy._core._all_dispatcher(a,axis=None,out=None,keepdims=None,*,where=None)
numpy._core._any_dispatcher(a,axis=None,out=None,keepdims=None,*,where=np._NoValue)
numpy._core._argmax_dispatcher(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core._argmin_dispatcher(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core._argpartition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._core._argsort_dispatcher(a,axis=None,kind=None,order=None,*,stable=None)
numpy._core._choose_dispatcher(a,choices,out=None,mode=None)
numpy._core._clip_dispatcher(a,a_min,a_max,out=None,**kwargs)
numpy._core._compress_dispatcher(condition,a,axis=None,out=None)
numpy._core._cumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy._core._cumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy._core._diagonal_dispatcher(a,offset=None,axis1=None,axis2=None)
numpy._core._matrix_transpose_dispatcher(x)
numpy._core._max_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._core._mean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,*,where=None)
numpy._core._min_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._core._ndim_dispatcher(a)
numpy._core._nonzero_dispatcher(a)
numpy._core._partition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._core._prod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._core._ptp_dispatcher(a,axis=None,out=None,keepdims=None)
numpy._core._put_dispatcher(a,ind,v,mode=None)
numpy._core._ravel_dispatcher(a,order=None)
numpy._core._repeat_dispatcher(a,repeats,axis=None)
numpy._core._reshape_dispatcher(a,newshape,order=None)
numpy._core._resize_dispatcher(a,new_shape)
numpy._core._round_dispatcher(a,decimals=None,out=None)
numpy._core._searchsorted_dispatcher(a,v,side=None,sorter=None)
numpy._core._shape_dispatcher(a)
numpy._core._size_dispatcher(a,axis=None)
numpy._core._sort_dispatcher(a,axis=None,kind=None,order=None,*,stable=None)
numpy._core._squeeze_dispatcher(a,axis=None)
numpy._core._std_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy._core._sum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._core._swapaxes_dispatcher(a,axis1,axis2)
numpy._core._take_dispatcher(a,indices,axis=None,out=None,mode=None)
numpy._core._trace_dispatcher(a,offset=None,axis1=None,axis2=None,dtype=None,out=None)
numpy._core._transpose_dispatcher(a,axes=None)
numpy._core._var_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy._core._wrapfunc(obj,method,*args,**kwds)
numpy._core._wrapit(obj,method,*args,**kwds)
numpy._core._wrapreduction(obj,ufunc,method,axis,dtype,out,**kwargs)
numpy._core._wrapreduction_any_all(obj,ufunc,method,axis,out,**kwargs)
numpy._core.fromnumeric._all_dispatcher(a,axis=None,out=None,keepdims=None,*,where=None)
numpy._core.fromnumeric._any_dispatcher(a,axis=None,out=None,keepdims=None,*,where=np._NoValue)
numpy._core.fromnumeric._argmax_dispatcher(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core.fromnumeric._argmin_dispatcher(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core.fromnumeric._argpartition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._core.fromnumeric._argsort_dispatcher(a,axis=None,kind=None,order=None,*,stable=None)
numpy._core.fromnumeric._choose_dispatcher(a,choices,out=None,mode=None)
numpy._core.fromnumeric._clip_dispatcher(a,a_min,a_max,out=None,**kwargs)
numpy._core.fromnumeric._compress_dispatcher(condition,a,axis=None,out=None)
numpy._core.fromnumeric._cumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy._core.fromnumeric._cumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy._core.fromnumeric._diagonal_dispatcher(a,offset=None,axis1=None,axis2=None)
numpy._core.fromnumeric._matrix_transpose_dispatcher(x)
numpy._core.fromnumeric._max_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._core.fromnumeric._mean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,*,where=None)
numpy._core.fromnumeric._min_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._core.fromnumeric._ndim_dispatcher(a)
numpy._core.fromnumeric._nonzero_dispatcher(a)
numpy._core.fromnumeric._partition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._core.fromnumeric._prod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._core.fromnumeric._ptp_dispatcher(a,axis=None,out=None,keepdims=None)
numpy._core.fromnumeric._put_dispatcher(a,ind,v,mode=None)
numpy._core.fromnumeric._ravel_dispatcher(a,order=None)
numpy._core.fromnumeric._repeat_dispatcher(a,repeats,axis=None)
numpy._core.fromnumeric._reshape_dispatcher(a,newshape,order=None)
numpy._core.fromnumeric._resize_dispatcher(a,new_shape)
numpy._core.fromnumeric._round_dispatcher(a,decimals=None,out=None)
numpy._core.fromnumeric._searchsorted_dispatcher(a,v,side=None,sorter=None)
numpy._core.fromnumeric._shape_dispatcher(a)
numpy._core.fromnumeric._size_dispatcher(a,axis=None)
numpy._core.fromnumeric._sort_dispatcher(a,axis=None,kind=None,order=None,*,stable=None)
numpy._core.fromnumeric._squeeze_dispatcher(a,axis=None)
numpy._core.fromnumeric._std_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy._core.fromnumeric._sum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._core.fromnumeric._swapaxes_dispatcher(a,axis1,axis2)
numpy._core.fromnumeric._take_dispatcher(a,indices,axis=None,out=None,mode=None)
numpy._core.fromnumeric._trace_dispatcher(a,offset=None,axis1=None,axis2=None,dtype=None,out=None)
numpy._core.fromnumeric._transpose_dispatcher(a,axes=None)
numpy._core.fromnumeric._var_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy._core.fromnumeric._wrapfunc(obj,method,*args,**kwds)
numpy._core.fromnumeric._wrapit(obj,method,*args,**kwds)
numpy._core.fromnumeric._wrapreduction(obj,ufunc,method,axis,dtype,out,**kwargs)
numpy._core.fromnumeric._wrapreduction_any_all(obj,ufunc,method,axis,out,**kwargs)
numpy._core.fromnumeric.all(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy._core.fromnumeric.amax(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.amin(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.any(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy._core.fromnumeric.argmax(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core.fromnumeric.argmin(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy._core.fromnumeric.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy._core.fromnumeric.argsort(a,axis=-1,kind=None,order=None,*,stable=None)
numpy._core.fromnumeric.around(a,decimals=0,out=None)
numpy._core.fromnumeric.choose(a,choices,out=None,mode='raise')
numpy._core.fromnumeric.clip(a,a_min,a_max,out=None,**kwargs)
numpy._core.fromnumeric.compress(condition,a,axis=None,out=None)
numpy._core.fromnumeric.cumprod(a,axis=None,dtype=None,out=None)
numpy._core.fromnumeric.cumsum(a,axis=None,dtype=None,out=None)
numpy._core.fromnumeric.diagonal(a,offset=0,axis1=0,axis2=1)
numpy._core.fromnumeric.matrix_transpose(x,/)
numpy._core.fromnumeric.max(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.mean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy._core.fromnumeric.min(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.ndim(a)
numpy._core.fromnumeric.nonzero(a)
numpy._core.fromnumeric.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy._core.fromnumeric.prod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.ptp(a,axis=None,out=None,keepdims=np._NoValue)
numpy._core.fromnumeric.put(a,ind,v,mode='raise')
numpy._core.fromnumeric.ravel(a,order='C')
numpy._core.fromnumeric.repeat(a,repeats,axis=None)
numpy._core.fromnumeric.reshape(a,newshape,order='C')
numpy._core.fromnumeric.resize(a,new_shape)
numpy._core.fromnumeric.round(a,decimals=0,out=None)
numpy._core.fromnumeric.searchsorted(a,v,side='left',sorter=None)
numpy._core.fromnumeric.shape(a)
numpy._core.fromnumeric.size(a,axis=None)
numpy._core.fromnumeric.sort(a,axis=-1,kind=None,order=None,*,stable=None)
numpy._core.fromnumeric.squeeze(a,axis=None)
numpy._core.fromnumeric.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy._core.fromnumeric.sum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy._core.fromnumeric.swapaxes(a,axis1,axis2)
numpy._core.fromnumeric.take(a,indices,axis=None,out=None,mode='raise')
numpy._core.fromnumeric.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy._core.fromnumeric.transpose(a,axes=None)
numpy._core.fromnumeric.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy.all(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.amax(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.amin(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.any(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.argmax(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.argmin(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy.argsort(a,axis=-1,kind=None,order=None,*,stable=None)
numpy.around(a,decimals=0,out=None)
numpy.choose(a,choices,out=None,mode='raise')
numpy.clip(a,a_min,a_max,out=None,**kwargs)
numpy.compress(condition,a,axis=None,out=None)
numpy.cumprod(a,axis=None,dtype=None,out=None)
numpy.cumsum(a,axis=None,dtype=None,out=None)
numpy.diagonal(a,offset=0,axis1=0,axis2=1)
numpy.matrix_transpose(x,/)
numpy.max(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.mean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.min(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.ndim(a)
numpy.nonzero(a)
numpy.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy.prod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.ptp(a,axis=None,out=None,keepdims=np._NoValue)
numpy.put(a,ind,v,mode='raise')
numpy.ravel(a,order='C')
numpy.repeat(a,repeats,axis=None)
numpy.reshape(a,newshape,order='C')
numpy.resize(a,new_shape)
numpy.round(a,decimals=0,out=None)
numpy.searchsorted(a,v,side='left',sorter=None)
numpy.shape(a)
numpy.size(a,axis=None)
numpy.sort(a,axis=-1,kind=None,order=None,*,stable=None)
numpy.squeeze(a,axis=None)
numpy.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy.sum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.swapaxes(a,axis1,axis2)
numpy.take(a,indices,axis=None,out=None,mode='raise')
numpy.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.transpose(a,axes=None)
numpy.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/fromnumeric.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_add_newdocs_scalars.py----------------------------------------
A:numpy._core._add_newdocs_scalars.alias_type->getattr(_numerictypes, alias)
A:numpy._core._add_newdocs_scalars.possible_aliases->numeric_type_aliases([('int8', '8-bit signed integer (``-128`` to ``127``)'), ('int16', '16-bit signed integer (``-32_768`` to ``32_767``)'), ('int32', '32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``)'), ('int64', '64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``)'), ('intp', 'Signed integer large enough to fit pointer, compatible with C ``intptr_t``'), ('uint8', '8-bit unsigned integer (``0`` to ``255``)'), ('uint16', '16-bit unsigned integer (``0`` to ``65_535``)'), ('uint32', '32-bit unsigned integer (``0`` to ``4_294_967_295``)'), ('uint64', '64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``)'), ('uintp', 'Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``'), ('float16', '16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa'), ('float32', '32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa'), ('float64', '64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa'), ('float96', '96-bit extended-precision floating-point number type'), ('float128', '128-bit extended-precision floating-point number type'), ('complex64', 'Complex number type composed of 2 32-bit-precision floating-point numbers'), ('complex128', 'Complex number type composed of 2 64-bit-precision floating-point numbers'), ('complex192', 'Complex number type composed of 2 96-bit extended-precision floating-point numbers'), ('complex256', 'Complex number type composed of 2 128-bit extended-precision floating-point numbers')])
A:numpy._core._add_newdocs_scalars.(system, _, _, _, machine)->os.uname()
A:numpy._core._add_newdocs_scalars.(_system, _machine)->_get_platform_and_machine()
A:numpy._core._add_newdocs_scalars.o->getattr(_numerictypes, obj)
A:numpy._core._add_newdocs_scalars.alias_doc->''.join((f':Alias: `numpy.{alias}`\n    ' for alias in fixed_aliases))
numpy._core._add_newdocs_scalars._get_platform_and_machine()
numpy._core._add_newdocs_scalars.add_newdoc_for_scalar_type(obj,fixed_aliases,doc)
numpy._core._add_newdocs_scalars.numeric_type_aliases(aliases)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/defchararray.py----------------------------------------
A:numpy._core.defchararray.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.char')
A:numpy._core.defchararray.itemsize->len(obj)
A:numpy._core.defchararray.self->numeric.ndarray.__new__(subtype, shape, (dtype, itemsize), buffer=buffer, offset=offset, strides=strides, order=order)
A:numpy._core.defchararray.val->narray(obj, dtype=(dtype, itemsize), order=order, subok=True)
A:numpy._core.defchararray.temp->narray(obj, dtype=(dtype, itemsize), order=order, subok=True).rstrip()
A:numpy._core.defchararray.obj->obj.tolist().tolist()
numpy._core.defchararray._binary_op_dispatcher(x1,x2)
numpy._core.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)
numpy._core.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)
numpy._core.defchararray.chararray(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy._core.defchararray.chararray.__add__(self,other)
numpy._core.defchararray.chararray.__array_finalize__(self,obj)
numpy._core.defchararray.chararray.__array_wrap__(self,arr,context=None,return_scalar=False)
numpy._core.defchararray.chararray.__eq__(self,other)
numpy._core.defchararray.chararray.__ge__(self,other)
numpy._core.defchararray.chararray.__getitem__(self,obj)
numpy._core.defchararray.chararray.__gt__(self,other)
numpy._core.defchararray.chararray.__le__(self,other)
numpy._core.defchararray.chararray.__lt__(self,other)
numpy._core.defchararray.chararray.__mod__(self,i)
numpy._core.defchararray.chararray.__mul__(self,i)
numpy._core.defchararray.chararray.__ne__(self,other)
numpy._core.defchararray.chararray.__new__(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy._core.defchararray.chararray.__radd__(self,other)
numpy._core.defchararray.chararray.__rmod__(self,other)
numpy._core.defchararray.chararray.__rmul__(self,i)
numpy._core.defchararray.chararray.argsort(self,axis=-1,kind=None,order=None)
numpy._core.defchararray.chararray.capitalize(self)
numpy._core.defchararray.chararray.center(self,width,fillchar='')
numpy._core.defchararray.chararray.count(self,sub,start=0,end=None)
numpy._core.defchararray.chararray.decode(self,encoding=None,errors=None)
numpy._core.defchararray.chararray.encode(self,encoding=None,errors=None)
numpy._core.defchararray.chararray.endswith(self,suffix,start=0,end=None)
numpy._core.defchararray.chararray.expandtabs(self,tabsize=8)
numpy._core.defchararray.chararray.find(self,sub,start=0,end=None)
numpy._core.defchararray.chararray.index(self,sub,start=0,end=None)
numpy._core.defchararray.chararray.isalnum(self)
numpy._core.defchararray.chararray.isalpha(self)
numpy._core.defchararray.chararray.isdecimal(self)
numpy._core.defchararray.chararray.isdigit(self)
numpy._core.defchararray.chararray.islower(self)
numpy._core.defchararray.chararray.isnumeric(self)
numpy._core.defchararray.chararray.isspace(self)
numpy._core.defchararray.chararray.istitle(self)
numpy._core.defchararray.chararray.isupper(self)
numpy._core.defchararray.chararray.join(self,seq)
numpy._core.defchararray.chararray.ljust(self,width,fillchar='')
numpy._core.defchararray.chararray.lower(self)
numpy._core.defchararray.chararray.lstrip(self,chars=None)
numpy._core.defchararray.chararray.partition(self,sep)
numpy._core.defchararray.chararray.replace(self,old,new,count=None)
numpy._core.defchararray.chararray.rfind(self,sub,start=0,end=None)
numpy._core.defchararray.chararray.rindex(self,sub,start=0,end=None)
numpy._core.defchararray.chararray.rjust(self,width,fillchar='')
numpy._core.defchararray.chararray.rpartition(self,sep)
numpy._core.defchararray.chararray.rsplit(self,sep=None,maxsplit=None)
numpy._core.defchararray.chararray.rstrip(self,chars=None)
numpy._core.defchararray.chararray.split(self,sep=None,maxsplit=None)
numpy._core.defchararray.chararray.splitlines(self,keepends=None)
numpy._core.defchararray.chararray.startswith(self,prefix,start=0,end=None)
numpy._core.defchararray.chararray.strip(self,chars=None)
numpy._core.defchararray.chararray.swapcase(self)
numpy._core.defchararray.chararray.title(self)
numpy._core.defchararray.chararray.translate(self,table,deletechars=None)
numpy._core.defchararray.chararray.upper(self)
numpy._core.defchararray.chararray.zfill(self,width)
numpy._core.defchararray.equal(x1,x2)
numpy._core.defchararray.greater(x1,x2)
numpy._core.defchararray.greater_equal(x1,x2)
numpy._core.defchararray.less(x1,x2)
numpy._core.defchararray.less_equal(x1,x2)
numpy._core.defchararray.multiply(a,i)
numpy._core.defchararray.not_equal(x1,x2)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/defchararray.pyi----------------------------------------
numpy._core.defchararray.add(x1:S_co,x2:S_co)->NDArray[bytes_]
numpy._core.defchararray.add(x1:U_co,x2:U_co)->NDArray[str_]
numpy._core.defchararray.capitalize(a:S_co)->NDArray[bytes_]
numpy._core.defchararray.capitalize(a:U_co)->NDArray[str_]
numpy._core.defchararray.center(a:S_co,width:i_co,fillchar:S_co=...)->NDArray[bytes_]
numpy._core.defchararray.center(a:U_co,width:i_co,fillchar:U_co=...)->NDArray[str_]
numpy._core.defchararray.count(a:S_co,sub:S_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.count(a:U_co,sub:U_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.decode(a:S_co,encoding:None|str=...,errors:None|str=...)->NDArray[str_]
numpy._core.defchararray.encode(a:U_co,encoding:None|str=...,errors:None|str=...)->NDArray[bytes_]
numpy._core.defchararray.endswith(a:S_co,suffix:S_co,start:i_co=...,end:None|i_co=...)->NDArray[np.bool]
numpy._core.defchararray.endswith(a:U_co,suffix:U_co,start:i_co=...,end:None|i_co=...)->NDArray[np.bool]
numpy._core.defchararray.expandtabs(a:S_co,tabsize:i_co=...)->NDArray[bytes_]
numpy._core.defchararray.expandtabs(a:U_co,tabsize:i_co=...)->NDArray[str_]
numpy._core.defchararray.find(a:S_co,sub:S_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.find(a:U_co,sub:U_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.index(a:S_co,sub:S_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.index(a:U_co,sub:U_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.isalnum(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.isalpha(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.isdecimal(a:U_co)->NDArray[np.bool]
numpy._core.defchararray.isdigit(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.islower(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.isnumeric(a:U_co)->NDArray[np.bool]
numpy._core.defchararray.isspace(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.istitle(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.isupper(a:U_co|S_co)->NDArray[np.bool]
numpy._core.defchararray.join(sep:S_co,seq:S_co)->NDArray[bytes_]
numpy._core.defchararray.join(sep:U_co,seq:U_co)->NDArray[str_]
numpy._core.defchararray.ljust(a:S_co,width:i_co,fillchar:S_co=...)->NDArray[bytes_]
numpy._core.defchararray.ljust(a:U_co,width:i_co,fillchar:U_co=...)->NDArray[str_]
numpy._core.defchararray.lower(a:S_co)->NDArray[bytes_]
numpy._core.defchararray.lower(a:U_co)->NDArray[str_]
numpy._core.defchararray.lstrip(a:S_co,chars:None|S_co=...)->NDArray[bytes_]
numpy._core.defchararray.lstrip(a:U_co,chars:None|U_co=...)->NDArray[str_]
numpy._core.defchararray.mod(a:S_co,value:Any)->NDArray[bytes_]
numpy._core.defchararray.mod(a:U_co,value:Any)->NDArray[str_]
numpy._core.defchararray.partition(a:S_co,sep:S_co)->NDArray[bytes_]
numpy._core.defchararray.partition(a:U_co,sep:U_co)->NDArray[str_]
numpy._core.defchararray.replace(a:S_co,old:S_co,new:S_co,count:None|i_co=...)->NDArray[bytes_]
numpy._core.defchararray.replace(a:U_co,old:U_co,new:U_co,count:None|i_co=...)->NDArray[str_]
numpy._core.defchararray.rfind(a:S_co,sub:S_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.rfind(a:U_co,sub:U_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.rindex(a:S_co,sub:S_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.rindex(a:U_co,sub:U_co,start:i_co=...,end:None|i_co=...)->NDArray[int_]
numpy._core.defchararray.rjust(a:S_co,width:i_co,fillchar:S_co=...)->NDArray[bytes_]
numpy._core.defchararray.rjust(a:U_co,width:i_co,fillchar:U_co=...)->NDArray[str_]
numpy._core.defchararray.rpartition(a:S_co,sep:S_co)->NDArray[bytes_]
numpy._core.defchararray.rpartition(a:U_co,sep:U_co)->NDArray[str_]
numpy._core.defchararray.rsplit(a:S_co,sep:None|S_co=...,maxsplit:None|i_co=...)->NDArray[object_]
numpy._core.defchararray.rsplit(a:U_co,sep:None|U_co=...,maxsplit:None|i_co=...)->NDArray[object_]
numpy._core.defchararray.rstrip(a:S_co,chars:None|S_co=...)->NDArray[bytes_]
numpy._core.defchararray.rstrip(a:U_co,chars:None|U_co=...)->NDArray[str_]
numpy._core.defchararray.split(a:S_co,sep:None|S_co=...,maxsplit:None|i_co=...)->NDArray[object_]
numpy._core.defchararray.split(a:U_co,sep:None|U_co=...,maxsplit:None|i_co=...)->NDArray[object_]
numpy._core.defchararray.splitlines(a:S_co,keepends:None|b_co=...)->NDArray[object_]
numpy._core.defchararray.splitlines(a:U_co,keepends:None|b_co=...)->NDArray[object_]
numpy._core.defchararray.startswith(a:S_co,prefix:S_co,start:i_co=...,end:None|i_co=...)->NDArray[np.bool]
numpy._core.defchararray.startswith(a:U_co,prefix:U_co,start:i_co=...,end:None|i_co=...)->NDArray[np.bool]
numpy._core.defchararray.str_len(A:U_co|S_co)->NDArray[int_]
numpy._core.defchararray.strip(a:S_co,chars:None|S_co=...)->NDArray[bytes_]
numpy._core.defchararray.strip(a:U_co,chars:None|U_co=...)->NDArray[str_]
numpy._core.defchararray.swapcase(a:S_co)->NDArray[bytes_]
numpy._core.defchararray.swapcase(a:U_co)->NDArray[str_]
numpy._core.defchararray.title(a:S_co)->NDArray[bytes_]
numpy._core.defchararray.title(a:U_co)->NDArray[str_]
numpy._core.defchararray.translate(a:S_co,table:S_co,deletechars:None|S_co=...)->NDArray[bytes_]
numpy._core.defchararray.translate(a:U_co,table:U_co,deletechars:None|U_co=...)->NDArray[str_]
numpy._core.defchararray.upper(a:S_co)->NDArray[bytes_]
numpy._core.defchararray.upper(a:U_co)->NDArray[str_]
numpy._core.defchararray.zfill(a:S_co,width:i_co)->NDArray[bytes_]
numpy._core.defchararray.zfill(a:U_co,width:i_co)->NDArray[str_]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/memmap.py----------------------------------------
A:numpy._core.memmap.f_ctx->open(os.fspath(filename), ('r' if mode == 'c' else mode) + 'b')
A:numpy._core.memmap.flen->fid.tell()
A:numpy._core.memmap.descr->dtypedescr(dtype)
A:numpy._core.memmap.shape->tuple(shape)
A:numpy._core.memmap.size->numpy.intp(1)
A:numpy._core.memmap.bytes->int(offset + size * _dbytes)
A:numpy._core.memmap.mm->mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)
A:numpy._core.memmap.self->numeric.ndarray.__new__(subtype, shape, dtype=descr, buffer=mm, offset=array_offset, order=order)
A:numpy._core.memmap.self.filename->os.path.abspath(fid.name)
A:numpy._core.memmap.arr->super().__array_wrap__(arr, context)
A:numpy._core.memmap.res->super().__getitem__(index)
numpy._core.__array_finalize__(self,obj)
numpy._core.__array_wrap__(self,arr,context=None,return_scalar=False)
numpy._core.__getitem__(self,index)
numpy._core.flush(self)
numpy._core.memmap.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy._core.memmap.memmap.__array_finalize__(self,obj)
numpy._core.memmap.memmap.__array_wrap__(self,arr,context=None,return_scalar=False)
numpy._core.memmap.memmap.__getitem__(self,index)
numpy._core.memmap.memmap.__new__(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy._core.memmap.memmap.flush(self)
numpy.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/memmap.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/_dtype_ctypes.py----------------------------------------
A:numpy._core._dtype_ctypes.effective_pack->min(t._pack_, ctypes.alignment(ftyp))
numpy._core._dtype_ctypes._from_ctypes_array(t)
numpy._core._dtype_ctypes._from_ctypes_scalar(t)
numpy._core._dtype_ctypes._from_ctypes_structure(t)
numpy._core._dtype_ctypes._from_ctypes_union(t)
numpy._core._dtype_ctypes.dtype_from_ctypes_type(t)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/shape_base.py----------------------------------------
A:numpy._core.shape_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy._core.shape_base.ary->asanyarray(ary)
A:numpy._core.shape_base.result->result.copy().copy()
A:numpy._core.shape_base.arrs->atleast_1d(*tup)
A:numpy._core.shape_base.arrays->functools.reduce(operator.add, arrays)
A:numpy._core.shape_base.axis->normalize_axis_index(axis, result_ndim)
A:numpy._core.shape_base._size->getattr(_from_nx.size, '__wrapped__', _from_nx.size)
A:numpy._core.shape_base._ndim->getattr(_from_nx.ndim, '__wrapped__', _from_nx.ndim)
A:numpy._core.shape_base._concatenate->getattr(_from_nx.concatenate, '__wrapped__', _from_nx.concatenate)
A:numpy._core.shape_base.idx_str->''.join(('[{}]'.format(i) for i in index if i is not None))
A:numpy._core.shape_base.(first_index, max_arr_ndim, final_size)->next(idxs_ndims)
A:numpy._core.shape_base.size->_size(arrays)
A:numpy._core.shape_base.offsets_at_axis->_accumulate(shape_at_axis)
A:numpy._core.shape_base.(shapes, slices, arrays)->zip(*[_block_info_recursion(arr, max_depth, result_ndim, depth + 1) for arr in arrays])
A:numpy._core.shape_base.(shape, slice_prefixes)->_concatenate_shapes(shapes, axis)
A:numpy._core.shape_base.arr->_atleast_nd(arrays, result_ndim)
A:numpy._core.shape_base.(arrays, list_ndim, result_ndim, final_size)->_block_setup(arrays)
A:numpy._core.shape_base.(bottom_index, arr_ndim, final_size)->_block_check_depths_match(arrays)
A:numpy._core.shape_base.list_ndim->len(bottom_index)
A:numpy._core.shape_base.result_ndim->max(arr_ndim, list_ndim)
A:numpy._core.shape_base.(shape, slices, arrays)->_block_info_recursion(arrays, list_ndim, result_ndim)
A:numpy._core.shape_base.dtype->_nx.result_type(*[arr.dtype for arr in arrays])
A:numpy._core.shape_base.F_order->all((arr.flags['F_CONTIGUOUS'] for arr in arrays))
A:numpy._core.shape_base.C_order->all((arr.flags['C_CONTIGUOUS'] for arr in arrays))
numpy._core._accumulate(values)
numpy._core._arrays_for_stack_dispatcher(arrays)
numpy._core._atleast_1d_dispatcher(*arys)
numpy._core._atleast_2d_dispatcher(*arys)
numpy._core._atleast_3d_dispatcher(*arys)
numpy._core._atleast_nd(a,ndim)
numpy._core._block(arrays,max_depth,result_ndim,depth=0)
numpy._core._block_check_depths_match(arrays,parent_index=[])
numpy._core._block_concatenate(arrays,list_ndim,result_ndim)
numpy._core._block_dispatcher(arrays)
numpy._core._block_format_index(index)
numpy._core._block_info_recursion(arrays,max_depth,result_ndim,depth=0)
numpy._core._block_setup(arrays)
numpy._core._block_slicing(arrays,list_ndim,result_ndim)
numpy._core._concatenate_shapes(shapes,axis)
numpy._core._stack_dispatcher(arrays,axis=None,out=None,*,dtype=None,casting=None)
numpy._core._vhstack_dispatcher(tup,*,dtype=None,casting=None)
numpy._core.shape_base._accumulate(values)
numpy._core.shape_base._arrays_for_stack_dispatcher(arrays)
numpy._core.shape_base._atleast_1d_dispatcher(*arys)
numpy._core.shape_base._atleast_2d_dispatcher(*arys)
numpy._core.shape_base._atleast_3d_dispatcher(*arys)
numpy._core.shape_base._atleast_nd(a,ndim)
numpy._core.shape_base._block(arrays,max_depth,result_ndim,depth=0)
numpy._core.shape_base._block_check_depths_match(arrays,parent_index=[])
numpy._core.shape_base._block_concatenate(arrays,list_ndim,result_ndim)
numpy._core.shape_base._block_dispatcher(arrays)
numpy._core.shape_base._block_format_index(index)
numpy._core.shape_base._block_info_recursion(arrays,max_depth,result_ndim,depth=0)
numpy._core.shape_base._block_setup(arrays)
numpy._core.shape_base._block_slicing(arrays,list_ndim,result_ndim)
numpy._core.shape_base._concatenate_shapes(shapes,axis)
numpy._core.shape_base._stack_dispatcher(arrays,axis=None,out=None,*,dtype=None,casting=None)
numpy._core.shape_base._vhstack_dispatcher(tup,*,dtype=None,casting=None)
numpy._core.shape_base.atleast_1d(*arys)
numpy._core.shape_base.atleast_2d(*arys)
numpy._core.shape_base.atleast_3d(*arys)
numpy._core.shape_base.block(arrays)
numpy._core.shape_base.hstack(tup,*,dtype=None,casting='same_kind')
numpy._core.shape_base.stack(arrays,axis=0,out=None,*,dtype=None,casting='same_kind')
numpy._core.shape_base.vstack(tup,*,dtype=None,casting='same_kind')
numpy.atleast_1d(*arys)
numpy.atleast_2d(*arys)
numpy.atleast_3d(*arys)
numpy.block(arrays)
numpy.hstack(tup,*,dtype=None,casting='same_kind')
numpy.stack(arrays,axis=0,out=None,*,dtype=None,casting='same_kind')
numpy.vstack(tup,*,dtype=None,casting='same_kind')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/shape_base.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/cversions.py----------------------------------------
A:numpy._core.cversions.curdir->dirname(__file__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_machar.py----------------------------------------
numpy._core.tests.test_machar.TestMachAr
numpy._core.tests.test_machar.TestMachAr._run_machar_highprec(self)
numpy._core.tests.test_machar.TestMachAr.test_underlow(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_protocols.py----------------------------------------
A:numpy._core.tests.test_protocols.array->Wrapper(np.arange(10))
A:numpy._core.tests.test_protocols.wrapped->Wrapper()
A:numpy._core.tests.test_protocols.arr->numpy.array(wrapped, dtype=str)
numpy._core.tests.test_protocols.test_array_called()
numpy._core.tests.test_protocols.test_getattr_warning()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_custom_dtypes.py----------------------------------------
A:numpy._core.tests.test_custom_dtypes.SF->_get_sfloat_dtype()
A:numpy._core.tests.test_custom_dtypes.a->self._get_array(2.0)
A:numpy._core.tests.test_custom_dtypes.sf->SF(1.0)
A:numpy._core.tests.test_custom_dtypes.sf2->SF(1.0).scaled_by(2.0)
A:numpy._core.tests.test_custom_dtypes.sf6->SF(1.0).scaled_by(2.0).scaled_by(3.0)
A:numpy._core.tests.test_custom_dtypes.(dt, _)->discover_array_params([1.0, 2.0, 3.0], dtype=SF)
A:numpy._core.tests.test_custom_dtypes.dt->numpy.dtype([('id', int), ('value', SF(0.5))])
A:numpy._core.tests.test_custom_dtypes.na->self._get_array(2.0).astype(SF(-1.0))
A:numpy._core.tests.test_custom_dtypes.a2->self._get_array(2.0).astype(SF(2.0))
A:numpy._core.tests.test_custom_dtypes.b->self._get_array(-2.0)
A:numpy._core.tests.test_custom_dtypes.res->pickle.loads(s)
A:numpy._core.tests.test_custom_dtypes.float_a->numpy.array([1.0, 2.0, 3.0])
A:numpy._core.tests.test_custom_dtypes.float_b->self._get_array(-2.0).view(np.float64).copy()
A:numpy._core.tests.test_custom_dtypes.c->self._get_array(3.0)
A:numpy._core.tests.test_custom_dtypes.float_equiv->self._get_array(2.0).astype(float)
A:numpy._core.tests.test_custom_dtypes.expected->numpy.array([1.0, 2.0, 3.0], dtype=SF(1.0)).astype(SF(1.0))
A:numpy._core.tests.test_custom_dtypes.arr->numpy.array([1.0, 2.0, 3.0], dtype=SF(1.0))
A:numpy._core.tests.test_custom_dtypes.arr1->numpy.array([1.0, 2.0, 3.0], dtype=SF)
A:numpy._core.tests.test_custom_dtypes.arr2->numpy.array([1.0, 2.0, 3.0], dtype=SF(1.0)).copy()
A:numpy._core.tests.test_custom_dtypes.s->pickle.dumps(SF)
numpy._core.tests.test_custom_dtypes.TestSFloat
numpy._core.tests.test_custom_dtypes.TestSFloat._get_array(self,scaling,aligned=True)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_addition_cast_safety(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_astype_class(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_basic_addition(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_basic_multiply(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_basic_multiply_promotion(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_basic_ufunc_at(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_class_discovery(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_creation_class(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_dtype_name(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_flatiter(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_flatiter_index(self,index)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_logical_ufuncs_casts_to_bool(self,ufunc)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_np_save_load(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_possible_and_impossible_reduce(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_repr(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_scaled_float_from_floats(self,scaling)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_cast_internal_errors(self,aligned)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_casts(self,aligned)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_from_float(self,scaling)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_getitem(self,aligned,scaling)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_promotion(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_rescaled(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_sfloat_structured_dtype_printing(self)
numpy._core.tests.test_custom_dtypes.TestSFloat.test_wrapped_and_wrapped_reductions(self)
numpy._core.tests.test_custom_dtypes.test_is_numeric()
numpy._core.tests.test_custom_dtypes.test_type_pickle()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_limited_api.py----------------------------------------
A:numpy._core.tests.test_limited_api.pytestmark->pytest.mark.skipif(cython is None, reason='requires cython')
A:numpy._core.tests.test_limited_api.srcdir->os.path.join(os.path.dirname(__file__), 'examples', 'limited_api')
numpy._core.tests.test_limited_api.install_temp(tmpdir_factory)
numpy._core.tests.test_limited_api.test_limited_api(install_temp)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalarprint.py----------------------------------------
A:numpy._core.tests.test_scalarprint.msg->'for str({}({}))'.format(np.dtype(styp).name, repr(val))
A:numpy._core.tests.test_scalarprint.x->numpy.float32(1024 - 2 ** (-14))
A:numpy._core.tests.test_scalarprint.output->f.read()
A:numpy._core.tests.test_scalarprint.gen->userinput()
A:numpy._core.tests.test_scalarprint.capture->fo.read().strip()
A:numpy._core.tests.test_scalarprint.a->numpy.float64.fromhex('-1p-97')
A:numpy._core.tests.test_scalarprint.b->numpy.float128(str(a))
A:numpy._core.tests.test_scalarprint.y->numpy.float32(1024 - 2 ** (-13))
numpy._core.tests.test_scalarprint.TestRealScalars
numpy._core.tests.test_scalarprint.TestRealScalars.float32_roundtrip(self)
numpy._core.tests.test_scalarprint.TestRealScalars.float64_vs_python(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_dragon4(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_dragon4_interface(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_ppc64_ibm_double_double128(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_py2_float_print(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs(self)
numpy._core.tests.test_scalarprint.TestRealScalars.test_str(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_ufunc.py----------------------------------------
A:numpy._core.tests.test_ufunc.xs->numpy.full(10, input_dtype(x), dtype=output_dtype)
A:numpy._core.tests.test_ufunc.x->x[4:6, 1:11:6, 1:5].transpose(1, 2, 0)
A:numpy._core.tests.test_ufunc.arr->numpy.arange(10, dtype=i4)
A:numpy._core.tests.test_ufunc.res->numpy.add.resolve_dtypes((None, i2, None), reduction=True)
A:numpy._core.tests.test_ufunc.val->numpy.float64(np.pi / 4)
A:numpy._core.tests.test_ufunc.num_arr->numpy.array(val, dtype=np.float64)
A:numpy._core.tests.test_ufunc.obj_arr->numpy.array(values, dtype=object)
A:numpy._core.tests.test_ufunc.res_num->ufunc(num_arr)
A:numpy._core.tests.test_ufunc.res_obj->ufunc(obj_arr)
A:numpy._core.tests.test_ufunc.obj->pickle.loads(pickle.dumps(_pickleable_module_global.ufunc))
A:numpy._core.tests.test_ufunc.idx->numpy.array(list(zip(np.arange(L - 2), np.arange(L - 2) + 2))).ravel()
A:numpy._core.tests.test_ufunc.(enabled, num_dims, ixs, flags, sizes)->numpy._core._umath_tests.test_signature(3, 1, '( 3? ) , (3? ,  3?) ,(n )-> ( 9)')
A:numpy._core.tests.test_ufunc.b->numpy.dtype('?')
A:numpy._core.tests.test_ufunc.res1->numpy.maximum([3], [4], sig=(None, None, None))
A:numpy._core.tests.test_ufunc.res2->numpy.maximum([3], [4])
A:numpy._core.tests.test_ufunc.float_dtype->type(np.dtype(np.float64))
A:numpy._core.tests.test_ufunc.int64->numpy.dtype('int64')
A:numpy._core.tests.test_ufunc.int64_2->pickle.loads(pickle.dumps(int64))
A:numpy._core.tests.test_ufunc.td->numpy.timedelta(2, 's')
A:numpy._core.tests.test_ufunc.a->numpy.ones((1, 10))
A:numpy._core.tests.test_ufunc.arr_bs->numpy.arange(10, dtype=i4).astype(arr.dtype.newbyteorder())
A:numpy._core.tests.test_ufunc.expected->numpy.add.accumulate(arr)
A:numpy._core.tests.test_ufunc.tgt->dt(v * (v + 1) / 2)
A:numpy._core.tests.test_ufunc.dt->numpy.dtype(tc)
A:numpy._core.tests.test_ufunc.aa->numpy.ones((1, 10)).copy()
A:numpy._core.tests.test_ufunc.bb->numpy.dtype('?').astype(dt)
A:numpy._core.tests.test_ufunc.rtol->max(np.finfo(dtout).resolution, 1e-15)
A:numpy._core.tests.test_ufunc.dtout->numpy.dtype(tcout)
A:numpy._core.tests.test_ufunc.atol->max(np.finfo(dtout).tiny, 3e-308)
A:numpy._core.tests.test_ufunc.d->numpy.ones((5, 2), dtype=int)
A:numpy._core.tests.test_ufunc.d.real->numpy.arange(1, v + 1)
A:numpy._core.tests.test_ufunc.arr1->numpy.array([element], dtype=f'{order1}U4')
A:numpy._core.tests.test_ufunc.arr2->numpy.array([element], dtype=f'{order2}U4')
A:numpy._core.tests.test_ufunc.actual->numpy.vecdot(arr1, arr2)
A:numpy._core.tests.test_ufunc.actual2->numpy.vecdot(arr2, arr1)
A:numpy._core.tests.test_ufunc.actual3->numpy.vecdot(arr1.astype('object'), arr2.astype('object'))
A:numpy._core.tests.test_ufunc.result->numpy._core.umath.find(arr, b'cde', 0, np.iinfo(np.int64).max)
A:numpy._core.tests.test_ufunc.out->numpy.array(-1, dtype=np.intp)
A:numpy._core.tests.test_ufunc.(u, v)->numpy.broadcast_arrays(a, b)
A:numpy._core.tests.test_ufunc.out2->numpy.empty(3)
A:numpy._core.tests.test_ufunc.c->numpy.array([1.0, 2.0])
A:numpy._core.tests.test_ufunc.Ba->numpy.arange(1, dtype='>f8')
A:numpy._core.tests.test_ufunc.La->numpy.arange(1, dtype='<f8')
A:numpy._core.tests.test_ufunc.z->numpy.zeros((2, 2))
A:numpy._core.tests.test_ufunc.w->numpy.array([], dtype='f8')
A:numpy._core.tests.test_ufunc.(expected_s, expected_l)->numpy.linalg._umath_linalg.slogdet(a)
A:numpy._core.tests.test_ufunc.(cs, cl)->numpy.linalg._umath_linalg.slogdet(a, keepdims=True)
A:numpy._core.tests.test_ufunc.mat->numpy.arange(12).reshape((2, 3, 2))
A:numpy._core.tests.test_ufunc.single_vec->numpy.arange(3)
A:numpy._core.tests.test_ufunc.mm_col_vec->numpy._core._umath_tests.matrix_multiply(mat, col_vec_array)
A:numpy._core.tests.test_ufunc.matmul_col_vec->numpy._core._umath_tests.matmul(mat, col_vec_array)
A:numpy._core.tests.test_ufunc.matmul_col->numpy._core._umath_tests.matmul(mat, single_vec)
A:numpy._core.tests.test_ufunc.mm_row_vec->numpy._core._umath_tests.matrix_multiply(row_vec_array, mat)
A:numpy._core.tests.test_ufunc.matmul_row_vec->numpy._core._umath_tests.matmul(row_vec_array, mat)
A:numpy._core.tests.test_ufunc.matmul_row->numpy._core._umath_tests.matmul(single_vec, mat)
A:numpy._core.tests.test_ufunc.col_vec_array->row_vec_array.swapaxes(-2, -1)
A:numpy._core.tests.test_ufunc.mm_row_col_vec->numpy._core._umath_tests.matrix_multiply(row_vec, col_vec)
A:numpy._core.tests.test_ufunc.matmul_row_col_vec->numpy._core._umath_tests.matmul(row_vec, col_vec)
A:numpy._core.tests.test_ufunc.matmul_row_col->numpy._core._umath_tests.matmul(single_vec, single_vec)
A:numpy._core.tests.test_ufunc.mm_row_col_array->numpy._core._umath_tests.matrix_multiply(row_vec_array, col_vec_array)
A:numpy._core.tests.test_ufunc.matmul_row_col_array->numpy._core._umath_tests.matmul(row_vec_array, col_vec_array)
A:numpy._core.tests.test_ufunc.d1->numpy.array(np.random.rand(2, 3, 4), dtype=tp)
A:numpy._core.tests.test_ufunc.d2->numpy.array(np.random.rand(2, 3, 4), dtype=tp)
A:numpy._core.tests.test_ufunc.base->slice_n(n - 1)
A:numpy._core.tests.test_ufunc.permute_3->permute_n(3)
A:numpy._core.tests.test_ufunc.arr0d->numpy.array(HasComparisons())
A:numpy._core.tests.test_ufunc.arr1d->numpy.array([HasComparisons()])
A:numpy._core.tests.test_ufunc.m->numpy.array([True], dtype=bool)
A:numpy._core.tests.test_ufunc.a_copy->numpy.ones((1, 10)).copy()
A:numpy._core.tests.test_ufunc.a_check->numpy.full(a.shape, -np.inf)
A:numpy._core.tests.test_ufunc.check->f_reduce(a, axis=0, out=out, keepdims=keepdims)
A:numpy._core.tests.test_ufunc.target->numpy.array([True, False, False, False], dtype=bool)
A:numpy._core.tests.test_ufunc.indx->numpy.arange(5)
A:numpy._core.tests.test_ufunc.vals->numpy.array([1, 5, 2, 10], dtype=a.dtype)
A:numpy._core.tests.test_ufunc.atag->numpy.ones((1, 10)).copy()
A:numpy._core.tests.test_ufunc.value->numpy.ones((1, 10)).dtype.type(1j)
A:numpy._core.tests.test_ufunc.indices->numpy.zeros(8195, dtype=np.int16)
A:numpy._core.tests.test_ufunc.values->numpy.array(['a', 1], dtype=object)
A:numpy._core.tests.test_ufunc.index->numpy.array([1, 2, 1], np.dtype('i').newbyteorder())
A:numpy._core.tests.test_ufunc.orig->numpy.arange(4)
A:numpy._core.tests.test_ufunc.indxs->numpy.array([-1, 1, -1, 2]).astype(np.intp)
A:numpy._core.tests.test_ufunc.expected[i]->ufunc(expected[i], v)
A:numpy._core.tests.test_ufunc.o->numpy.ones((2,), dtype=d.dtype)
A:numpy._core.tests.test_ufunc.ra->numpy.ones((1, 10)).view(dtype='f8,f8,f8').squeeze()
A:numpy._core.tests.test_ufunc.mra->numpy.ones((1, 10)).view(dtype='f8,f8,f8').squeeze().view(MyA)
A:numpy._core.tests.test_ufunc.arr_be->numpy.arange(10, dtype='>i8')
A:numpy._core.tests.test_ufunc.arr_le->numpy.arange(10, dtype='<i8')
A:numpy._core.tests.test_ufunc.single_res->numpy.zeros((), dtype=np.float32)
A:numpy._core.tests.test_ufunc.y_base->numpy.arange(4 * 4, dtype=np.int16).reshape(4, 4)
A:numpy._core.tests.test_ufunc.y_base_copy->numpy.arange(4 * 4, dtype=np.int16).reshape(4, 4).copy()
A:numpy._core.tests.test_ufunc.r0->numpy.add.reduce(x, out=y.copy(), axis=2)
A:numpy._core.tests.test_ufunc.r1->numpy.add.reduce(x, out=y, axis=2)
A:numpy._core.tests.test_ufunc.correct_out->f_reduce(a, axis=0, keepdims=keepdims)
A:numpy._core.tests.test_ufunc.out_correct->numpy.empty((1, 1))
A:numpy._core.tests.test_ufunc.out_incorrect->numpy.empty((3, 1))
A:numpy._core.tests.test_ufunc.exc->pytest.raises(TypeError, np.sqrt, None)
A:numpy._core.tests.test_ufunc.(inp, out)->typ.split('->')
A:numpy._core.tests.test_ufunc.outs->tuple(out)
A:numpy._core.tests.test_ufunc.a.flat->range(1, 7)
A:numpy._core.tests.test_ufunc.res_c->ufunc(*args_c)
A:numpy._core.tests.test_ufunc.res_n->ufunc(*args_n)
A:numpy._core.tests.test_ufunc.count->sys.getrefcount(value)
A:numpy._core.tests.test_ufunc.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_ufunc.neg_zero->numpy.dtype(dtype).type(-0.0)
A:numpy._core.tests.test_ufunc.start->dtype(0)
A:numpy._core.tests.test_ufunc.end->dtype(len(element))
A:numpy._core.tests.test_ufunc.i4->numpy.dtype('i4')
A:numpy._core.tests.test_ufunc.f4->numpy.dtype('f4')
A:numpy._core.tests.test_ufunc.f8->numpy.dtype('f8')
A:numpy._core.tests.test_ufunc.r->numpy.equal.resolve_dtypes((S0, S0, None))
A:numpy._core.tests.test_ufunc.i8->numpy.dtype('i8')
A:numpy._core.tests.test_ufunc.S0->numpy.dtype('S0')
A:numpy._core.tests.test_ufunc.dts->numpy.dtype('10i')
A:numpy._core.tests.test_ufunc.i2->numpy.dtype('i2')
A:numpy._core.tests.test_ufunc.default_int_->numpy.dtype(np.int_)
A:numpy._core.tests.test_ufunc.strided_loop_t->ctypes.CFUNCTYPE(ct.c_int, ct.c_void_p, data_t, dim_t, strides_t, ct.c_void_p)
A:numpy._core.tests.test_ufunc.(dt, call_info_obj)->numpy.negative._resolve_dtypes_and_context((i4, i4))
A:numpy._core.tests.test_ufunc.call_info->ctypes.pythonapi.PyCapsule_GetPointer(ct.py_object(call_info_obj), ct.c_char_p(b'numpy_1.24_ufunc_call_info'))
A:numpy._core.tests.test_ufunc.(dt, call_info)->numpy.negative._resolve_dtypes_and_context((i4, i4))
A:numpy._core.tests.test_ufunc.t->numpy.zeros((1029, 917), dtype=np.single)
A:numpy._core.tests.test_ufunc.tc->numpy.cos(t)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test__get_strided_loop_errors_bad_call_info(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test__get_strided_loop_errors_bad_strides(self,strides)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_long_arrays(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_loop_access(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_basic(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_comparison(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_errors(self,dtypes)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_reduction(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_reduction_errors(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_resolve_dtypes_reduction_no_output(self)
numpy._core.tests.test_ufunc.TestLowlevelAPIAccess.test_weird_dtypes(self)
numpy._core.tests.test_ufunc.TestUfunc
numpy._core.tests.test_ufunc.TestUfunc.check_identityless_reduction(self,a)
numpy._core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results(self,tp)
numpy._core.tests.test_ufunc.TestUfunc.test_NotImplemented_not_returned(self)
numpy._core.tests.test_ufunc.TestUfunc.test_all_ufunc(self)
numpy._core.tests.test_ufunc.TestUfunc.test_at_broadcast_failure(self)
numpy._core.tests.test_ufunc.TestUfunc.test_at_negative_indexes(self,dtype,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_at_no_loop_for_op(self)
numpy._core.tests.test_ufunc.TestUfunc.test_at_not_none_signature(self)
numpy._core.tests.test_ufunc.TestUfunc.test_at_output_casting(self)
numpy._core.tests.test_ufunc.TestUfunc.test_axes_argument(self)
numpy._core.tests.test_ufunc.TestUfunc.test_axis_argument(self)
numpy._core.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds(self)
numpy._core.tests.test_ufunc.TestUfunc.test_broadcast(self)
numpy._core.tests.test_ufunc.TestUfunc.test_can_ignore_signature(self)
numpy._core.tests.test_ufunc.TestUfunc.test_cast_index_fastpath(self)
numpy._core.tests.test_ufunc.TestUfunc.test_cast_safety(self,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_casting_out_param(self)
numpy._core.tests.test_ufunc.TestUfunc.test_cross1d(self)
numpy._core.tests.test_ufunc.TestUfunc.test_cumsum(self)
numpy._core.tests.test_ufunc.TestUfunc.test_custom_array_like(self)
numpy._core.tests.test_ufunc.TestUfunc.test_custom_ufunc(self)
numpy._core.tests.test_ufunc.TestUfunc.test_custom_ufunc_forced_sig(self)
numpy._core.tests.test_ufunc.TestUfunc.test_empty_reduction_and_identity(self)
numpy._core.tests.test_ufunc.TestUfunc.test_endian(self)
numpy._core.tests.test_ufunc.TestUfunc.test_euclidean_pdist(self)
numpy._core.tests.test_ufunc.TestUfunc.test_forced_dtype_times(self)
numpy._core.tests.test_ufunc.TestUfunc.test_forced_sig(self)
numpy._core.tests.test_ufunc.TestUfunc.test_get_signature(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_huge_array(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable(self)
numpy._core.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder(self)
numpy._core.tests.test_ufunc.TestUfunc.test_incontiguous_array(self)
numpy._core.tests.test_ufunc.TestUfunc.test_initial_reduction(self)
numpy._core.tests.test_ufunc.TestUfunc.test_innerwt(self)
numpy._core.tests.test_ufunc.TestUfunc.test_innerwt_empty(self)
numpy._core.tests.test_ufunc.TestUfunc.test_invalid_args(self)
numpy._core.tests.test_ufunc.TestUfunc.test_keepdims_argument(self)
numpy._core.tests.test_ufunc.TestUfunc.test_logical_ufuncs_mixed_object_signatures(self,ufunc,signature)
numpy._core.tests.test_ufunc.TestUfunc.test_logical_ufuncs_object_signatures(self,ufunc,signature)
numpy._core.tests.test_ufunc.TestUfunc.test_logical_ufuncs_out_cast_check(self,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_logical_ufuncs_support_anything(self,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_logical_ufuncs_supports_string(self,ufunc,dtype,values)
numpy._core.tests.test_ufunc.TestUfunc.test_matrix_multiply(self)
numpy._core.tests.test_ufunc.TestUfunc.test_matrix_multiply_umath_empty(self)
numpy._core.tests.test_ufunc.TestUfunc.test_nat_is_nan(self,nat)
numpy._core.tests.test_ufunc.TestUfunc.test_nat_is_not_finite(self,nat)
numpy._core.tests.test_ufunc.TestUfunc.test_nat_is_not_inf(self,nat)
numpy._core.tests.test_ufunc.TestUfunc.test_no_doc_string(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_array_accumulate_failure(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_array_accumulate_inplace(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_array_reduceat_failure(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_array_reduceat_inplace(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_array_reduction(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_comparison(self)
numpy._core.tests.test_ufunc.TestUfunc.test_object_logical(self)
numpy._core.tests.test_ufunc.TestUfunc.test_operand_flags(self)
numpy._core.tests.test_ufunc.TestUfunc.test_out_broadcast_errors(self,arr,out)
numpy._core.tests.test_ufunc.TestUfunc.test_out_broadcasts(self)
numpy._core.tests.test_ufunc.TestUfunc.test_output_argument(self)
numpy._core.tests.test_ufunc.TestUfunc.test_partial_signature_mismatch(self,casting)
numpy._core.tests.test_ufunc.TestUfunc.test_partial_signature_mismatch_with_cache(self)
numpy._core.tests.test_ufunc.TestUfunc.test_pickle(self)
numpy._core.tests.test_ufunc.TestUfunc.test_pickle_name_is_qualname(self)
numpy._core.tests.test_ufunc.TestUfunc.test_pickle_withstring(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_arguments(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_identity_depends_on_loop(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_noncontig_output(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_output_does_not_broadcast_input(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_output_subclass_ok(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_wrong_dimension_output(self,f_reduce,keepdims,out_shape)
numpy._core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduceat_and_accumulate_out_shape_mismatch(self,with_cast)
numpy._core.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reducelike_byteorder_resolution(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reducelike_out_promotes(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reducelike_output_needs_identical_cast(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduction_where_initial_needed(self)
numpy._core.tests.test_ufunc.TestUfunc.test_reduction_with_where(self,axis,where)
numpy._core.tests.test_ufunc.TestUfunc.test_reduction_with_where_and_initial(self,axis,where,initial)
numpy._core.tests.test_ufunc.TestUfunc.test_safe_casting(self)
numpy._core.tests.test_ufunc.TestUfunc.test_scalar_equal(self)
numpy._core.tests.test_ufunc.TestUfunc.test_scalar_reduction(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature0(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature1(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature10(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature2(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature3(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature4(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature5(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature6(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature7(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature8(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature9(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_all_None(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_dtype_instances_allowed(self,get_kwarg)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_dtype_instances_allowed(self,get_kwarg)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_dtype_type(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_errors(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_failure_extra_parenthesis(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_failure_mismatching_parenthesis(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_input_arg(self)
numpy._core.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_output_arg(self)
numpy._core.tests.test_ufunc.TestUfunc.test_struct_ufunc(self)
numpy._core.tests.test_ufunc.TestUfunc.test_structured_equal(self)
numpy._core.tests.test_ufunc.TestUfunc.test_sum(self)
numpy._core.tests.test_ufunc.TestUfunc.test_sum_complex(self)
numpy._core.tests.test_ufunc.TestUfunc.test_sum_initial(self)
numpy._core.tests.test_ufunc.TestUfunc.test_sum_stability(self)
numpy._core.tests.test_ufunc.TestUfunc.test_sum_where(self)
numpy._core.tests.test_ufunc.TestUfunc.test_true_divide(self)
numpy._core.tests.test_ufunc.TestUfunc.test_type_cast(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_0D(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_advanced(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_basic(self,a)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_boolean(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_dtypes(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_ellipsis(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_inner_loops(self,typecode,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_inner_loops_complex(self,typecode,ufunc)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_large(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_multiD(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_negative(self)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_at_scalar_value_fastpath(self,value)
numpy._core.tests.test_ufunc.TestUfunc.test_ufunc_custom_out(self)
numpy._core.tests.test_ufunc.TestUfunc.test_use_output_signature_for_all_arguments(self)
numpy._core.tests.test_ufunc.TestUfunc.test_vecdot(self)
numpy._core.tests.test_ufunc.TestUfunc.test_vecdot_complex(self)
numpy._core.tests.test_ufunc.TestUfunc.test_vecdot_object_breaks_outer_loop_on_error(self)
numpy._core.tests.test_ufunc.TestUfunc.test_vecdot_object_no_conjugate(self)
numpy._core.tests.test_ufunc.TestUfunc.test_vecdot_subclass(self)
numpy._core.tests.test_ufunc.TestUfunc.test_where_param(self)
numpy._core.tests.test_ufunc.TestUfunc.test_where_param_alloc(self)
numpy._core.tests.test_ufunc.TestUfunc.test_where_param_buffer_output(self)
numpy._core.tests.test_ufunc.TestUfunc.test_where_with_broadcasting(self)
numpy._core.tests.test_ufunc.TestUfunc.test_zerosize_reduction(self)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.f2(x,y)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.foo
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.foo.conjugate(self)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.foo.logical_xor(self,obj)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc(self,input_dtype,output_dtype,f=f2,x=0,y=1)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O(self)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O_method(self,foo=foo)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_On_Om_method(self,foo=foo)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_python_complex_conjugate(self)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc(self,input_dtype,output_dtype,f=np.exp,x=0,y=1)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O(self)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_full(self,ufunc)
numpy._core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_simple(self,foo=foo)
numpy._core.tests.test_ufunc.TestUfuncKwargs
numpy._core.tests.test_ufunc.TestUfuncKwargs.test_extobj_removed(self)
numpy._core.tests.test_ufunc.TestUfuncKwargs.test_kwarg_exact(self)
numpy._core.tests.test_ufunc.TestUfuncKwargs.test_sig_dtype(self)
numpy._core.tests.test_ufunc.TestUfuncKwargs.test_sig_signature(self)
numpy._core.tests.test_ufunc._check_neg_zero(value)
numpy._core.tests.test_ufunc._pickleable_module_global()
numpy._core.tests.test_ufunc.test_addition_negative_zero(dtype)
numpy._core.tests.test_ufunc.test_addition_reduce_negative_zero(dtype,use_initial)
numpy._core.tests.test_ufunc.test_addition_string_types(dt1,dt2)
numpy._core.tests.test_ufunc.test_addition_unicode_inverse_byte_order(order1,order2)
numpy._core.tests.test_ufunc.test_find_access_past_buffer()
numpy._core.tests.test_ufunc.test_find_non_long_args(dtype)
numpy._core.tests.test_ufunc.test_object_reduce_cleanup_on_failure()
numpy._core.tests.test_ufunc.test_reduce_casterrors(offset)
numpy._core.tests.test_ufunc.test_trivial_loop_invalid_cast()
numpy._core.tests.test_ufunc.test_ufunc_input_casterrors(bad_offset)
numpy._core.tests.test_ufunc.test_ufunc_input_floatingpoint_error(bad_offset)
numpy._core.tests.test_ufunc.test_ufunc_methods_floaterrors(method)
numpy._core.tests.test_ufunc.test_ufunc_noncontiguous(ufunc)
numpy._core.tests.test_ufunc.test_ufunc_out_casterrors()
numpy._core.tests.test_ufunc.test_ufunc_types(ufunc)
numpy._core.tests.test_ufunc.test_ufunc_warn_with_nan(ufunc)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_multiarray.py----------------------------------------
A:numpy._core.tests.test_multiarray.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_multiarray.buf->numpy.arange(2 * 3 * 4, dtype='i1').reshape(2, 3, 4).transpose(1, 0, 2).tobytes()
A:numpy._core.tests.test_multiarray.data->numpy.copy(temp)
A:numpy._core.tests.test_multiarray.self.a->numpy.arange(10)
A:numpy._core.tests.test_multiarray.mydict->locals()
A:numpy._core.tests.test_multiarray.arr->numpy.arange(5)
A:numpy._core.tests.test_multiarray.view1->numpy.asarray(frominterface)
A:numpy._core.tests.test_multiarray.vals->pickle.loads(pickle.dumps(a, v))
A:numpy._core.tests.test_multiarray.types->''.join((np.typecodes['AllInteger'], np.typecodes['AllFloat'], np.typecodes['Datetime'], '?O'))
A:numpy._core.tests.test_multiarray.values->numpy._core.records.fromstring(data, types)
A:numpy._core.tests.test_multiarray.a->numpy.arange(10)
A:numpy._core.tests.test_multiarray.arr_writeable->get_c_wrapping_array(True)
A:numpy._core.tests.test_multiarray.arr_readonly->get_c_wrapping_array(False)
A:numpy._core.tests.test_multiarray.i->max(i - 1, 1)
A:numpy._core.tests.test_multiarray.self.one->numpy.arange(10)
A:numpy._core.tests.test_multiarray.self.two->numpy.arange(20).reshape(4, 5)
A:numpy._core.tests.test_multiarray.self.three->numpy.arange(60, dtype=np.float64).reshape(2, 5, 6)
A:numpy._core.tests.test_multiarray.numpy_int->numpy.int_(0)
A:numpy._core.tests.test_multiarray.r->numpy.array([5.0, 1.0, 3.0, 2.0, -1.0, -4.0, 1.0, -10.0, 10.0, 1.0, 1.0, 3.0], dtype=np.float64)
A:numpy._core.tests.test_multiarray.x->numpy.arange(2 * 3 * 4, dtype='i1').reshape(2, 3, 4).transpose(1, 0, 2)
A:numpy._core.tests.test_multiarray.arr_0d->numpy.array(0)
A:numpy._core.tests.test_multiarray.y->memoryview(x)
A:numpy._core.tests.test_multiarray.d->numpy.ones(100)
A:numpy._core.tests.test_multiarray.tgt->numpy.dot(a, b)
A:numpy._core.tests.test_multiarray.e->float(1e+150)
A:numpy._core.tests.test_multiarray.a[...]->numpy.arange(6)[::-1].reshape(1, 2, 3)
A:numpy._core.tests.test_multiarray.a1d->numpy.array(['test'])
A:numpy._core.tests.test_multiarray.a0d->numpy.array('done')
A:numpy._core.tests.test_multiarray.u->numpy.array(['done'])
A:numpy._core.tests.test_multiarray.b->numpy.linspace(0, 1, 10)
A:numpy._core.tests.test_multiarray.tinyb->numpy.nextafter(np.longdouble(0), 1).astype(dtype)
A:numpy._core.tests.test_multiarray.tinya->numpy.nextafter(np.longdouble(0), -1).astype(dtype)
A:numpy._core.tests.test_multiarray.tiny1d->numpy.array([tinya])
A:numpy._core.tests.test_multiarray.a[:]->list(range(101))
A:numpy._core.tests.test_multiarray.d1->numpy.dtype('u1,c8', align=True)
A:numpy._core.tests.test_multiarray.d2->numpy.dtype('u4,c8', align=True)
A:numpy._core.tests.test_multiarray.dt_int->numpy.dtype(('i4', fields))
A:numpy._core.tests.test_multiarray.arr_int->numpy.zeros(4, dt_int)
A:numpy._core.tests.test_multiarray.result->numpy.array([(0, 1), (2, 3)], dtype='i4,i4').nonzero()
A:numpy._core.tests.test_multiarray.outer->numpy.array([None, None])
A:numpy._core.tests.test_multiarray.outer[0]outer[1]->numpy.array([1, 2, 3])
A:numpy._core.tests.test_multiarray.outer_ragged->numpy.array([None, None])
A:numpy._core.tests.test_multiarray.outer_ragged[0]->numpy.array([1, 2, 3])
A:numpy._core.tests.test_multiarray.outer_ragged[1]->numpy.array([1, 2, 3, 4])
A:numpy._core.tests.test_multiarray.expected->numpy.array([[65536], [327684], [589832], [851980], [1114128]], dtype='<i4')
A:numpy._core.tests.test_multiarray.arr1->numpy.random.randint(5, size=100).astype(dt1)
A:numpy._core.tests.test_multiarray.arr2->numpy.random.randint(5, size=99).astype(dt2)
A:numpy._core.tests.test_multiarray.a['a']->numpy.arange(60).reshape(3, 5, 2, 2)
A:numpy._core.tests.test_multiarray.a_tmp->a_tmp.view(a_tmp.dtype.newbyteorder()).view(a_tmp.dtype.newbyteorder())
A:numpy._core.tests.test_multiarray.c->numpy.linspace(0, 1, 10).__array__()
A:numpy._core.tests.test_multiarray.dat2->numpy.zeros(3, [('A', 'i'), ('B', '|O')])
A:numpy._core.tests.test_multiarray.struct_dt->numpy.dtype([('elem', 'i4', 5)])
A:numpy._core.tests.test_multiarray.dt->numpy.dtype(dict(formats=['<i4', '<i4'], names=['one', 'two'], offsets=[4, 0], itemsize=8))
A:numpy._core.tests.test_multiarray.x[0]['field']->numpy.ones(10, dtype='i4')
A:numpy._core.tests.test_multiarray.x[0]['struct']->numpy.ones(1, dtype=struct_dt)
A:numpy._core.tests.test_multiarray.b[0]['x']->numpy.arange(3)
A:numpy._core.tests.test_multiarray.c[0]['x']->numpy.arange(3)
A:numpy._core.tests.test_multiarray.xx->x['S'].reshape((2, 2))
A:numpy._core.tests.test_multiarray.yy->numpy.load(tmp)
A:numpy._core.tests.test_multiarray.v1->numpy.array([1, 2]).astype(dt)
A:numpy._core.tests.test_multiarray.v2->numpy.array([3, 4]).reshape(-1, 1).astype(dt)
A:numpy._core.tests.test_multiarray.v3->numpy.array([(2, 3)], dtype=[('bar', 'i8'), ('baz', 'i8')])
A:numpy._core.tests.test_multiarray.v4->numpy.array([(2,)], dtype=[('bar', 'i8')])
A:numpy._core.tests.test_multiarray.v5->numpy.array([(2, 3)], dtype=[('foo', 'f8'), ('bar', 'f8')])
A:numpy._core.tests.test_multiarray.w->numpy.arange(5).view({'names': ['bar'], 'formats': ['i8'], 'offsets': [8]})
A:numpy._core.tests.test_multiarray.ans->numpy.array([(2, 3), (2, 3)], dtype=dt)
A:numpy._core.tests.test_multiarray.ab->numpy.array([(1, 2)], dtype=[A, B])
A:numpy._core.tests.test_multiarray.ba->numpy.array([(1, 2)], dtype=[B, A])
A:numpy._core.tests.test_multiarray.dt1->numpy.dtype([('a', 'b'), ('b', 'i'), ('sub', np.dtype('b,i')), ('c', 'i')], align=True)
A:numpy._core.tests.test_multiarray.dt2->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b', (3,)), ('d', 'i')], align=True)
A:numpy._core.tests.test_multiarray.dt1nest->numpy.dtype([('', dt1)])
A:numpy._core.tests.test_multiarray.dt2nest->numpy.dtype([('', dt2)])
A:numpy._core.tests.test_multiarray.res->numpy.arange(6, 8, dtype='bool')
A:numpy._core.tests.test_multiarray.scalar->pickle.loads(pickle.dumps(scalar))
A:numpy._core.tests.test_multiarray.a0->numpy.arange(20.0)
A:numpy._core.tests.test_multiarray.b0->numpy.bool(False)
A:numpy._core.tests.test_multiarray.a1->numpy.bool(1)
A:numpy._core.tests.test_multiarray.b1->numpy.zeros(dim1)
A:numpy._core.tests.test_multiarray.av->numpy.arange(10).view(np.uint8)
A:numpy._core.tests.test_multiarray.v->numpy.array([F(2, 3), F(5, 7)])
A:numpy._core.tests.test_multiarray.zs->self._zeros(10, dt)
A:numpy._core.tests.test_multiarray.sort_method->getattr(zs, name)
A:numpy._core.tests.test_multiarray.sort_func->getattr(np, name)
A:numpy._core.tests.test_multiarray.p->numpy.inner(a, a)
A:numpy._core.tests.test_multiarray.zs2->pickle.loads(p)
A:numpy._core.tests.test_multiarray.pk_dmp->pickle.dumps(arr)
A:numpy._core.tests.test_multiarray.pk_load->pickle.loads(pk_dmp)
A:numpy._core.tests.test_multiarray.array->numpy.array([(0, 1), (2, 3)], dtype='i4,i4')
A:numpy._core.tests.test_multiarray.bytes_string->pickle.dumps(f_contiguous_array, protocol=5, buffer_callback=buffers.append)
A:numpy._core.tests.test_multiarray.array_from_buffer->pickle.loads(bytes_string, buffers=buffers)
A:numpy._core.tests.test_multiarray.wh_full->numpy.array([[False, True, False, True, True], [True, False, True, True, False], [True, True, False, False, True], [False, True, True, False, True], [True, False, True, True, False]])
A:numpy._core.tests.test_multiarray.wh_lower->numpy.array([[False], [False], [True]])
A:numpy._core.tests.test_multiarray.wh_middle->numpy.array([[False], [True], [False]])
A:numpy._core.tests.test_multiarray.out->numpy.empty((3, 3), dtype='int')
A:numpy._core.tests.test_multiarray.ind->list(range(x.shape[0]))
A:numpy._core.tests.test_multiarray.A->numpy.repeat(self.m_rect, 2, axis=1)
A:numpy._core.tests.test_multiarray.oned->numpy.ones(1)
A:numpy._core.tests.test_multiarray.ret->numpy.take(x, inds, out=out)
A:numpy._core.tests.test_multiarray.a2->numpy.array(ba2, ctype)
A:numpy._core.tests.test_multiarray.m->numpy.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], dtype=bool)
A:numpy._core.tests.test_multiarray.m_rect->numpy.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], dtype=bool).reshape((2, 3))
A:numpy._core.tests.test_multiarray.ai->(a * (1 + 1j)).astype(cdtype)
A:numpy._core.tests.test_multiarray.bi->(b * (1 + 1j)).astype(cdtype)
A:numpy._core.tests.test_multiarray.msg->repr(f)
A:numpy._core.tests.test_multiarray.indx->numpy.linspace(0, 1, 10).__array__().argsort(kind=kind)
A:numpy._core.tests.test_multiarray.rand->numpy.random.randint(256, size=4000, dtype=np.uint8)
A:numpy._core.tests.test_multiarray.do->numpy.ones(100).copy()
A:numpy._core.tests.test_multiarray.x1->numpy.arange(dt1.itemsize, dtype=np.int8).view(dt1)
A:numpy._core.tests.test_multiarray.x2->numpy.arange(dt2.itemsize, dtype=np.int8).view(dt2)
A:numpy._core.tests.test_multiarray.x3->numpy.arange(dt3.itemsize, dtype=np.int8).view(dt3)
A:numpy._core.tests.test_multiarray.k->b'\xc3\xa4'.decode('UTF8')
A:numpy._core.tests.test_multiarray.aligned->aligned_array(arr.shape, align, dtype, order)
A:numpy._core.tests.test_multiarray.unaligned->aligned[1:].view(a.dtype)
A:numpy._core.tests.test_multiarray.s->numpy._core._multiarray_tests.get_struct_alignments()
A:numpy._core.tests.test_multiarray.keys->numpy.array([1, 3, 8, -2])
A:numpy._core.tests.test_multiarray.srt->numpy.empty((10,), dtype=np.intp)
A:numpy._core.tests.test_multiarray.d_obj->numpy.arange(10, dtype=object)
A:numpy._core.tests.test_multiarray.kth->numpy.array([30, 15, 5])
A:numpy._core.tests.test_multiarray.okth->numpy.array([30, 15, 5]).copy()
A:numpy._core.tests.test_multiarray.d0->numpy.transpose(d1)
A:numpy._core.tests.test_multiarray.dc->numpy.dtype('u1,c8', align=True).copy()
A:numpy._core.tests.test_multiarray.idx->numpy.lexsort((u, v))
A:numpy._core.tests.test_multiarray.x0->numpy.array([[1, 2, 3], [4, 5, 6]], np.int32)
A:numpy._core.tests.test_multiarray.y0->numpy.array([1, 2, 3, 4, 5, 6], np.int32)
A:numpy._core.tests.test_multiarray.y0f->numpy.array([1, 4, 2, 5, 3, 6], np.int32)
A:numpy._core.tests.test_multiarray.y1->numpy.array([1, 2, 3, 4, 5, 6, 7, 8], np.int32)
A:numpy._core.tests.test_multiarray.y1f->numpy.array([1, 5, 3, 7, 2, 6, 4, 8], np.int32)
A:numpy._core.tests.test_multiarray.ddt->numpy.array([[55, 145, 235, 325], [145, 451, 757, 1063], [235, 757, 1279, 1801], [325, 1063, 1801, 2539]])
A:numpy._core.tests.test_multiarray.dtd->numpy.array([[504, 540, 576, 612, 648, 684], [540, 580, 620, 660, 700, 740], [576, 620, 664, 708, 752, 796], [612, 660, 708, 756, 804, 852], [648, 700, 752, 804, 856, 908], [684, 740, 796, 852, 908, 964]])
A:numpy._core.tests.test_multiarray.eaf->numpy.arange(10).astype(et)
A:numpy._core.tests.test_multiarray.ebf->numpy.linspace(0, 1, 10).astype(et)
A:numpy._core.tests.test_multiarray.edf->numpy.ones(100).astype(et)
A:numpy._core.tests.test_multiarray.eddtf->numpy.array([[55, 145, 235, 325], [145, 451, 757, 1063], [235, 757, 1279, 1801], [325, 1063, 1801, 2539]]).astype(et)
A:numpy._core.tests.test_multiarray.edtdf->numpy.array([[504, 540, 576, 612, 648, 684], [540, 580, 620, 660, 700, 740], [576, 620, 664, 708, 752, 796], [612, 660, 708, 756, 804, 852], [648, 700, 752, 804, 856, 908], [684, 740, 796, 852, 908, 964]]).astype(et)
A:numpy._core.tests.test_multiarray.ret1->func(b.T, a.T)
A:numpy._core.tests.test_multiarray.ret2->func(b.T.copy(), a.T.copy())
A:numpy._core.tests.test_multiarray.b[...]->numpy.random.rand(3, 3)
A:numpy._core.tests.test_multiarray.t->numpy.linspace(0, 1, 10).trace()
A:numpy._core.tests.test_multiarray.empty_array->numpy.asarray(list())
A:numpy._core.tests.test_multiarray.strides->list(a.strides)
A:numpy._core.tests.test_multiarray.shape->list(src.shape)
A:numpy._core.tests.test_multiarray.ac->numpy.arange(10).conj()
A:numpy._core.tests.test_multiarray.ap->complex(a)
A:numpy._core.tests.test_multiarray.bp->complex(b)
A:numpy._core.tests.test_multiarray.cp->complex(c)
A:numpy._core.tests.test_multiarray.MyType->eval("type('MyType', (base,), class_namespace)", eval_namespace)
A:numpy._core.tests.test_multiarray.arr_method->getattr(arr, '__{0}__'.format(op))
A:numpy._core.tests.test_multiarray.arr_rmethod->getattr(arr, '__r{0}__'.format(op))
A:numpy._core.tests.test_multiarray.arr_imethod->getattr(arr, '__i{0}__'.format(op))
A:numpy._core.tests.test_multiarray.op_fn->getattr(builtins, op)
A:numpy._core.tests.test_multiarray.kw->numpy.add(a, [1], signature='ii->i')
A:numpy._core.tests.test_multiarray.dummy->numpy.arange(2.0)
A:numpy._core.tests.test_multiarray.tmp_kw->numpy.add(a, [1], signature='ii->i').copy()
A:numpy._core.tests.test_multiarray.func->getattr(ufunc, method)
A:numpy._core.tests.test_multiarray.kw['out'][0][...]->func(*inputs, **tmp_kw)
A:numpy._core.tests.test_multiarray.B->numpy.array([[1, 3], [2, 4]], dtype=dt)
A:numpy._core.tests.test_multiarray.C->numpy.array([1, 1], dtype=dt)
A:numpy._core.tests.test_multiarray.obj_arr->numpy.array(Dummy())
A:numpy._core.tests.test_multiarray.tst->numpy.array('foo').view(A)
A:numpy._core.tests.test_multiarray.(orig, res)->incref_elide(d)
A:numpy._core.tests.test_multiarray.f->Foo(0.5)
A:numpy._core.tests.test_multiarray.l->numpy.array(['aa', 'bb'])
A:numpy._core.tests.test_multiarray.my_object->object()
A:numpy._core.tests.test_multiarray.arr_with_object->numpy.array([(my_object, 1, 2.0)], dtype=[('a', object), ('b', int), ('c', float)])
A:numpy._core.tests.test_multiarray.arr_without_object->numpy.array([('xxx', 1, 2.0)], dtype=[('a', str), ('b', int), ('c', float)])
A:numpy._core.tests.test_multiarray.depickled_arr_with_object->pickle.loads(pickle.dumps(arr_with_object, protocol=proto))
A:numpy._core.tests.test_multiarray.depickled_arr_without_object->pickle.loads(pickle.dumps(arr_without_object, protocol=proto))
A:numpy._core.tests.test_multiarray.f_contiguous_array->numpy.array([[1, 2, 3], [4, 5, 6]], order='F')
A:numpy._core.tests.test_multiarray.depickled_f_contiguous_array->pickle.loads(bytes_string, buffers=buffers)
A:numpy._core.tests.test_multiarray.depickled_non_contiguous_array->pickle.loads(pickle.dumps(non_contiguous_array, protocol=proto))
A:numpy._core.tests.test_multiarray.carray->numpy.array([[2, 9], [7, 0], [3, 8]])
A:numpy._core.tests.test_multiarray.original->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]')
A:numpy._core.tests.test_multiarray.original_byte_reversed->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]').copy(order='K')
A:numpy._core.tests.test_multiarray.original_byte_reversed.dtype->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]').copy(order='K').dtype.newbyteorder('S')
A:numpy._core.tests.test_multiarray.new->numpy.frombuffer(obj)
A:numpy._core.tests.test_multiarray.m2->numpy.arange(21.0).reshape(3, 7)
A:numpy._core.tests.test_multiarray.m3->numpy.array([[0, 1, 0, 0], [0, 0, 0, 0]], bool)
A:numpy._core.tests.test_multiarray.xorig->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8]])
A:numpy._core.tests.test_multiarray.g1->numpy.array(['This', 'is', 'example'])
A:numpy._core.tests.test_multiarray.g2->numpy.array(['This', 'was', 'example'])
A:numpy._core.tests.test_multiarray.new_shape->tuple(new_shape)
A:numpy._core.tests.test_multiarray._res_orig->method(arr.T, axis=axis)
A:numpy._core.tests.test_multiarray.res_orig->method(arr.T, axis=axis).reshape(new_shape)
A:numpy._core.tests.test_multiarray.outarray->numpy.empty(new_shape[::-1], dtype=res.dtype)
A:numpy._core.tests.test_multiarray.res1->method(arr.T, axis=axis, out=outarray, keepdims=True)
A:numpy._core.tests.test_multiarray.wrong_shape->list(new_shape)
A:numpy._core.tests.test_multiarray.wrong_outarray->numpy.empty(wrong_shape, dtype=res.dtype)
A:numpy._core.tests.test_multiarray.arg_method->getattr(a, method)
A:numpy._core.tests.test_multiarray.val_method->getattr(a, method)
A:numpy._core.tests.test_multiarray.a_maxmin->val_method(i)
A:numpy._core.tests.test_multiarray.aarg_maxmin->arg_method(i)
A:numpy._core.tests.test_multiarray.axes->list(range(a.ndim))
A:numpy._core.tests.test_multiarray.out1->numpy.matmul(d, d.reshape(5, 4))
A:numpy._core.tests.test_multiarray.out2->numpy.dot(d, d.reshape(5, 4))
A:numpy._core.tests.test_multiarray.val->numpy.array([0, 1, 2, 3, 4, 5, 6, 7])
A:numpy._core.tests.test_multiarray.rarr->numpy.concatenate((arr, padd))
A:numpy._core.tests.test_multiarray.padd->numpy.repeat(np.max(arr), 513)
A:numpy._core.tests.test_multiarray.min_val->numpy.min(arr)
A:numpy._core.tests.test_multiarray.sk->numpy.array([0, -0.1, 0.1])
A:numpy._core.tests.test_multiarray.rec->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')])
A:numpy._core.tests.test_multiarray.input_arr->numpy.array([-2.0, np.nan, 0.5, 3.0, 0.25, np.nan])
A:numpy._core.tests.test_multiarray.rec1->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')]).take([1])
A:numpy._core.tests.test_multiarray.inds->numpy.zeros(shape, dtype=np.intp)
A:numpy._core.tests.test_multiarray.expected_idx->numpy.array([2, 1, 0])
A:numpy._core.tests.test_multiarray.left->numpy.lexsort((u.astype('O'),))
A:numpy._core.tests.test_multiarray.right->numpy.argsort(u, kind='mergesort')
A:numpy._core.tests.test_multiarray.filename->str(filename)
A:numpy._core.tests.test_multiarray.pos->Foo(0.5).tell()
A:numpy._core.tests.test_multiarray.z->t(x)
A:numpy._core.tests.test_multiarray.x_str->numpy.arange(2 * 3 * 4, dtype='i1').reshape(2, 3, 4).transpose(1, 0, 2).tobytes()
A:numpy._core.tests.test_multiarray.binary->numpy.array([[65536], [327684], [589832], [851980], [1114128]], dtype='<i4').tobytes()
A:numpy._core.tests.test_multiarray.mm->mmap.mmap(tmp.fileno(), 0)
A:numpy._core.tests.test_multiarray.indtype->numpy.dtype(np.intp)
A:numpy._core.tests.test_multiarray.rc_indtype->sys.getrefcount(indtype)
A:numpy._core.tests.test_multiarray.rc_ind->sys.getrefcount(ind)
A:numpy._core.tests.test_multiarray.xref->weakref.ref(x)
A:numpy._core.tests.test_multiarray.fn1->str('f1')
A:numpy._core.tests.test_multiarray.fnn->str('not at all')
A:numpy._core.tests.test_multiarray.fn3->str('f3')
A:numpy._core.tests.test_multiarray.sfn1->str('sf1')
A:numpy._core.tests.test_multiarray.fn2->str('f2')
A:numpy._core.tests.test_multiarray.self.rmat->numpy.random.random((4, 5))
A:numpy._core.tests.test_multiarray.self.omat->self.omat.reshape(4, 5)
A:numpy._core.tests.test_multiarray.mat->numpy.eye(5)
A:numpy._core.tests.test_multiarray.wh_partial->numpy.array([[False], [True], [True], [False], [True]])
A:numpy._core.tests.test_multiarray.a3d->numpy.arange(16).reshape((2, 2, 4))
A:numpy._core.tests.test_multiarray._wh_partial->numpy.array([False, True, True, False])
A:numpy._core.tests.test_multiarray.msqr->_mean(mat * mat.conj(), axis=axis)
A:numpy._core.tests.test_multiarray.mean->_mean(mat, axis=axis)
A:numpy._core.tests.test_multiarray.cmat->self.cmat.copy().astype('complex128')
A:numpy._core.tests.test_multiarray.cmat_swapped->self.cmat.copy().astype('complex128').astype(cmat.dtype.newbyteorder())
A:numpy._core.tests.test_multiarray.whf->numpy.array([[False, True, False, True, True], [True, False, True, False, True], [True, True, False, True, False], [True, False, True, True, False], [False, True, False, True, True]])
A:numpy._core.tests.test_multiarray.whp->numpy.array([[False], [False], [True], [True], [False]])
A:numpy._core.tests.test_multiarray.self.info->getattr(obj, 'info', '')
A:numpy._core.tests.test_multiarray.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy._core.tests.test_multiarray.a[:, 0, 0]->numpy.arange(size)
A:numpy._core.tests.test_multiarray.self.A->numpy.random.rand(4, 2)
A:numpy._core.tests.test_multiarray.self.b1->numpy.random.rand(2, 1)
A:numpy._core.tests.test_multiarray.self.b2->numpy.random.rand(2)
A:numpy._core.tests.test_multiarray.self.b3->numpy.random.rand(1, 2)
A:numpy._core.tests.test_multiarray.self.b4->numpy.random.rand(4)
A:numpy._core.tests.test_multiarray.b2->numpy.zeros(dim2)
A:numpy._core.tests.test_multiarray.self.array->numpy.array(sequence)
A:numpy._core.tests.test_multiarray.U_non_cont->numpy.transpose([[1.0, 1.0], [1.0, 2.0]])
A:numpy._core.tests.test_multiarray.U_cont->numpy.ascontiguousarray(U_non_cont)
A:numpy._core.tests.test_multiarray.zeros->numpy.array([Vec([0.0, 0.0]), Vec([0.0, 0.0])])
A:numpy._core.tests.test_multiarray.r2->numpy.dot(*args)
A:numpy._core.tests.test_multiarray.N->numpy.prod(shape)
A:numpy._core.tests.test_multiarray.tmp->tmp[offset:offset + N * d.nbytes].view(dtype=dtype)
A:numpy._core.tests.test_multiarray.testdata->itertools.product((15, 32), (10000,), (200, 89), ('C', 'F'))
A:numpy._core.tests.test_multiarray.A_d->numpy.random.rand(m, n)
A:numpy._core.tests.test_multiarray.X_d->numpy.random.rand(n)
A:numpy._core.tests.test_multiarray.desired->numpy.array([[[[158, 182, 206], [230, 254, 278]], [[566, 654, 742], [830, 918, 1006]], [[974, 1126, 1278], [1430, 1582, 1734]]], [[[1382, 1598, 1814], [2030, 2246, 2462]], [[1790, 2070, 2350], [2630, 2910, 3190]], [[2198, 2542, 2886], [3230, 3574, 3918]]]]).astype(dt)
A:numpy._core.tests.test_multiarray.A_f->as_aligned(A_d, align, np.float32, order=a_order)
A:numpy._core.tests.test_multiarray.X_f->as_aligned(X_d, align, np.float32)
A:numpy._core.tests.test_multiarray.X_f_2c->as_aligned(X_f_2, align, np.float32)
A:numpy._core.tests.test_multiarray.vec->numpy.array([1, 2], dtype=dt)
A:numpy._core.tests.test_multiarray.vec1->numpy.array([1, 2])
A:numpy._core.tests.test_multiarray.vec2->numpy.array([3, 4]).reshape(-1, 1)
A:numpy._core.tests.test_multiarray.tgt1->numpy.array([True, False])
A:numpy._core.tests.test_multiarray.tgt2->numpy.stack([tgt1] * 2, axis=0)
A:numpy._core.tests.test_multiarray.mat1->numpy.array([[1, 2], [3, 4]])
A:numpy._core.tests.test_multiarray.mat2->numpy.array([[1, 0], [1, 1]])
A:numpy._core.tests.test_multiarray.m1->numpy.arange(15.0).reshape(5, 3)
A:numpy._core.tests.test_multiarray.mat12->numpy.stack([mat1, mat2], axis=0)
A:numpy._core.tests.test_multiarray.mat21->numpy.stack([mat2, mat1], axis=0)
A:numpy._core.tests.test_multiarray.tgt11->numpy.array([[7, 10], [15, 22]])
A:numpy._core.tests.test_multiarray.tgt12->numpy.array([[3, 2], [7, 4]])
A:numpy._core.tests.test_multiarray.tgt21->numpy.array([[1, 1], [1, 1]], dtype=np.bool)
A:numpy._core.tests.test_multiarray.tgt12_21->numpy.stack([tgt12, tgt21], axis=0)
A:numpy._core.tests.test_multiarray.tgt11_12->numpy.stack((tgt11, tgt12), axis=0)
A:numpy._core.tests.test_multiarray.tgt11_21->numpy.stack((tgt11, tgt21), axis=0)
A:numpy._core.tests.test_multiarray.m12->numpy.stack([m1, m2], axis=0)
A:numpy._core.tests.test_multiarray.m21->numpy.stack([m2, m1], axis=0)
A:numpy._core.tests.test_multiarray.tgt_mv->numpy.dot(a, v)
A:numpy._core.tests.test_multiarray.vc->numpy.arange(10.0)
A:numpy._core.tests.test_multiarray.vr->numpy.arange(6.0)
A:numpy._core.tests.test_multiarray.m0->numpy.zeros((3, 0))
A:numpy._core.tests.test_multiarray.r1->numpy.matmul(*args)
A:numpy._core.tests.test_multiarray.r3->numpy.matmul(args[0].copy(), args[1].copy())
A:numpy._core.tests.test_multiarray.M1->f(random_ints(), random_ints())
A:numpy._core.tests.test_multiarray.M2->f(random_ints(), random_ints())
A:numpy._core.tests.test_multiarray.M3->self.matmul(M1, M2)
A:numpy._core.tests.test_multiarray.rg->numpy.random.default_rng(np.random.PCG64(43))
A:numpy._core.tests.test_multiarray.a_id->id(a)
A:numpy._core.tests.test_multiarray.a_size->numpy.prod(a_shape)
A:numpy._core.tests.test_multiarray.b_size->numpy.prod(b_shape)
A:numpy._core.tests.test_multiarray.expected_dt->numpy.result_type(*ops)
A:numpy._core.tests.test_multiarray.self.m->numpy.array([1, 2, 3, 4, 5, 6])
A:numpy._core.tests.test_multiarray.self.m_rect->self.m.reshape((2, 3))
A:numpy._core.tests.test_multiarray.wanted->numpy.dtype('O')
A:numpy._core.tests.test_multiarray.actual->_dtype_from_pep3118(spec)
A:numpy._core.tests.test_multiarray.base->dict(formats=['i'], names=['f0'])
A:numpy._core.tests.test_multiarray.obj->numpy.asarray(obj)
A:numpy._core.tests.test_multiarray.y2->numpy.array(x)
A:numpy._core.tests.test_multiarray.sz->sum([np.dtype(b).itemsize for (a, b) in dt])
A:numpy._core.tests.test_multiarray.pickle_obj->pickle.dumps(obj)
A:numpy._core.tests.test_multiarray.count_1->sys.getrefcount(np._core._internal)
A:numpy._core.tests.test_multiarray.count_2->sys.getrefcount(np._core._internal)
A:numpy._core.tests.test_multiarray.dt3->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b'), ('d', 'b'), ('e', 'b'), ('sub', np.dtype('b,i', align=True))])
A:numpy._core.tests.test_multiarray.fd->io.BytesIO()
A:numpy._core.tests.test_multiarray.(shape, strides)->numpy._core._multiarray_tests.get_buffer_info(arr, ['C_CONTIGUOUS'])
A:numpy._core.tests.test_multiarray.value->c_integer(42)
A:numpy._core.tests.test_multiarray.name->type(obj)
A:numpy._core.tests.test_multiarray.buffer->_testbuffer.ndarray(data, shape, format='i', flags=_testbuffer.ND_PIL)
A:numpy._core.tests.test_multiarray.pyscalar->numpy.arange(5).item(0)
A:numpy._core.tests.test_multiarray.view->memoryview(arr)
A:numpy._core.tests.test_multiarray.base_arr->numpy.arange(10)
A:numpy._core.tests.test_multiarray.refcount->sys.getrefcount(x)
A:numpy._core.tests.test_multiarray.pre_cnt->sys.getrefcount(np.dtype('f8'))
A:numpy._core.tests.test_multiarray.post_cnt->sys.getrefcount(np.dtype('f8'))
A:numpy._core.tests.test_multiarray.my_dtype->numpy.dtype({'names': ['A', 'B'], 'formats': ['f4', 'f4'], 'offsets': [0, 8], 'itemsize': 16})
A:numpy._core.tests.test_multiarray.descr_t->numpy.dtype(a.__array_interface__['descr'])
A:numpy._core.tests.test_multiarray.typestr_t->numpy.dtype(a.__array_interface__['typestr'])
A:numpy._core.tests.test_multiarray.interface1->dict(arr.__array_interface__)
A:numpy._core.tests.test_multiarray.interface2->dict(interface1)
A:numpy._core.tests.test_multiarray.interface2['data']->arr[0].tobytes()
A:numpy._core.tests.test_multiarray.arr3->arr[:1].reshape(())
A:numpy._core.tests.test_multiarray.interface->dict(arr.__array_interface__)
A:numpy._core.tests.test_multiarray.interface['data']->memoryview(arr)
A:numpy._core.tests.test_multiarray.from_c->numpy._core._multiarray_tests.test_as_c_array(array, 1, 2, 3)
A:numpy._core.tests.test_multiarray.self_containing->numpy.array([None])
A:numpy._core.tests.test_multiarray.nan->float('NaN')
A:numpy._core.tests.test_multiarray.ibad->numpy.vstack(np.where(x == 99.0))
A:numpy._core.tests.test_multiarray.benchmark->numpy.array([(0, 1), (2, 3)], dtype='i4,i4').nonzero()
A:numpy._core.tests.test_multiarray.old->sys.getsizeof(d)
A:numpy._core.tests.test_multiarray.l[:]->numpy.str_('cc')
A:numpy._core.tests.test_multiarray.test_arr->numpy.array([[1, 2, 3], [4, 5, 6]])
A:numpy._core.tests.test_multiarray.arr_ref->weakref.ref(arr)
A:numpy._core.tests.test_multiarray.ctypes_ptr->numpy.arange(5).ctypes.data_as(ctypes.c_void_p)
A:numpy._core.tests.test_multiarray.arr_wb->npy_create_writebackifcopy(arr)
A:numpy._core.tests.test_multiarray.orig->numpy.arange(5).copy()
A:numpy._core.tests.test_multiarray.arr_cnt->sys.getrefcount(arr)
A:numpy._core.tests.test_multiarray.keyword_stop->numpy.arange(stop=3)
A:numpy._core.tests.test_multiarray.keyword_zerotostop->numpy.arange(0, stop=3)
A:numpy._core.tests.test_multiarray.keyword_start_stop->numpy.arange(start=3, stop=9)
A:numpy._core.tests.test_multiarray.DType_name->re.escape(str(type(np.array('a').dtype)))
A:numpy._core.tests.test_multiarray.res_be->numpy.arange(1, 1000, dtype='>i4')
A:numpy._core.tests.test_multiarray.res_le->numpy.arange(1, 1000, dtype='<i4')
A:numpy._core.tests.test_multiarray.args[which]->numpy.float64(2.0)
A:numpy._core.tests.test_multiarray.obj_ref->weakref.ref(obj_arr[()])
A:numpy._core.tests.test_multiarray.self.saved_result->super().__array_finalize__(obj)
A:numpy._core.tests.test_multiarray.my_always_equal->my_always_equal_cls()
A:numpy._core.tests.test_multiarray.numpy_arr->numpy.zeros(5, dtype=dt1)
A:numpy._core.tests.test_multiarray.my_arr->numpy.zeros(5, dtype=dt2).view(MyArr)
A:numpy._core.tests.test_multiarray.got->fun(z)
A:numpy._core.tests.test_multiarray.d3->numpy.dtype({'names': ['a', 'b'], 'formats': ['u1', d1]}, align=True)
A:numpy._core.tests.test_multiarray.dst->numpy.zeros((2, 2), dtype='c8')
A:numpy._core.tests.test_multiarray.err_msg->repr((shape, dtype, order, align))
A:numpy._core.tests.test_multiarray.xf64->_aligned_zeros(3, np.float64)
A:numpy._core.tests.test_multiarray.xc64->_aligned_zeros(3, np.complex64, align=align)
A:numpy._core.tests.test_multiarray.xf128->_aligned_zeros(3, np.longdouble, align=align)
A:numpy._core.tests.test_multiarray.xf64[:]->_aligned_zeros(3, np.float64).copy()
A:numpy._core.tests.test_multiarray.xc64[:]->_aligned_zeros(3, np.complex64, align=align).copy()
A:numpy._core.tests.test_multiarray.xf128[:]->_aligned_zeros(3, np.longdouble, align=align).copy()
A:numpy._core.tests.test_multiarray.xf64[::2]->xf64[::2].copy().copy()
A:numpy._core.tests.test_multiarray.xc64[::2]->xc64[::2].copy().copy()
A:numpy._core.tests.test_multiarray.xf128[::2]->xf128[::2].copy().copy()
A:numpy._core.tests.test_multiarray.temp->numpy.frombuffer(arr.tobytes(), dtype=np.float16)
A:numpy._core.tests.test_multiarray.rng->numpy.random.default_rng(42)
A:numpy._core.tests.test_multiarray.rnd->numpy.random.RandomState(1100710816)
A:numpy._core.tests.test_multiarray.(i, j)->numpy.random.RandomState(1100710816).choice(N, 2, replace=False)
A:numpy._core.tests.test_multiarray.refc_start->sys.getrefcount(b)
A:numpy._core.tests.test_multiarray.refc_end->sys.getrefcount(b)
numpy._core.tests.test_multiarray.MatmulCommon
numpy._core.tests.test_multiarray.MatmulCommon.test_exceptions(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_matrix_matrix_values(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_matrix_vector_values(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_result_types(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_scalar_output(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_shapes(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_vector_matrix_values(self)
numpy._core.tests.test_multiarray.MatmulCommon.test_vector_vector_values(self)
numpy._core.tests.test_multiarray.TestAlignment
numpy._core.tests.test_multiarray.TestAlignment.check(self,shape,dtype,order,align)
numpy._core.tests.test_multiarray.TestAlignment.test_strided_loop_alignments(self)
numpy._core.tests.test_multiarray.TestAlignment.test_various_alignments(self)
numpy._core.tests.test_multiarray.TestArange
numpy._core.tests.test_multiarray.TestArange.test_arange_booleans(self)
numpy._core.tests.test_multiarray.TestArange.test_byteswapped(self)
numpy._core.tests.test_multiarray.TestArange.test_error_paths_and_promotion(self,which)
numpy._core.tests.test_multiarray.TestArange.test_infinite(self)
numpy._core.tests.test_multiarray.TestArange.test_nan_step(self)
numpy._core.tests.test_multiarray.TestArange.test_rejects_bad_dtypes(self,dtype)
numpy._core.tests.test_multiarray.TestArange.test_rejects_strings(self)
numpy._core.tests.test_multiarray.TestArange.test_require_range(self)
numpy._core.tests.test_multiarray.TestArange.test_start_stop_kwarg(self)
numpy._core.tests.test_multiarray.TestArange.test_zero_step(self)
numpy._core.tests.test_multiarray.TestArgmax
numpy._core.tests.test_multiarray.TestArgmax.test_combinations(self,data)
numpy._core.tests.test_multiarray.TestArgmax.test_maximum_signed_integers(self)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_all(self,method)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_np_argmin_argmax_keepdims(self,size,axis,method)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_np_vs_ndarray(self,arr_method,np_method)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_object_with_NULLs(self,method,vals)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_output_shape(self,method)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_ret_is_out(self,ndim,method)
numpy._core.tests.test_multiarray.TestArgmaxArgminCommon.test_unicode(self,np_array,method,idx,val)
numpy._core.tests.test_multiarray.TestArgmin
numpy._core.tests.test_multiarray.TestArgmin.test_combinations(self,data)
numpy._core.tests.test_multiarray.TestArgmin.test_minimum_signed_integers(self)
numpy._core.tests.test_multiarray.TestArrayAttributeDeletion
numpy._core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion(self)
numpy._core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion(self)
numpy._core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion(self)
numpy._core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion(self)
numpy._core.tests.test_multiarray.TestArrayConstruction
numpy._core.tests.test_multiarray.TestArrayConstruction.test_0d_array_shape(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_as_keyword(self,func)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_cont(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_copy_false(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_copy_if_needed(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_copy_str(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_copy_true(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_array_empty(self)
numpy._core.tests.test_multiarray.TestArrayConstruction.test_bad_arguments_error(self,func)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument(object)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.RaiseOnBool
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.RaiseOnBool.__bool__(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test___array__(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test___array__copy_arg(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test__array__reference_leak(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_array_interfaces(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_buffer_interface(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_compatible_cast(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_order_mismatch(self,arr,order1,order2)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_scalars(self)
numpy._core.tests.test_multiarray.TestArrayCreationCopyArgument.test_striding_not_ok(self)
numpy._core.tests.test_multiarray.TestArrayFinalize
numpy._core.tests.test_multiarray.TestArrayFinalize.test_bad_finalize1(self)
numpy._core.tests.test_multiarray.TestArrayFinalize.test_bad_finalize2(self)
numpy._core.tests.test_multiarray.TestArrayFinalize.test_bad_finalize3(self)
numpy._core.tests.test_multiarray.TestArrayFinalize.test_can_use_super(self)
numpy._core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error(self)
numpy._core.tests.test_multiarray.TestArrayFinalize.test_receives_base(self)
numpy._core.tests.test_multiarray.TestArrayInterface
numpy._core.tests.test_multiarray.TestArrayInterface.Foo(self,value)
numpy._core.tests.test_multiarray.TestArrayInterface.Foo.__array_interface__(self)
numpy._core.tests.test_multiarray.TestArrayInterface.Foo.__float__(self)
numpy._core.tests.test_multiarray.TestArrayInterface.Foo.__init__(self,value)
numpy._core.tests.test_multiarray.TestArrayInterface.test_scalar_interface(self,val,iface,expected)
numpy._core.tests.test_multiarray.TestArrayPriority
numpy._core.tests.test_multiarray.TestArrayPriority.Bar(cls,*args,**kwargs)
numpy._core.tests.test_multiarray.TestArrayPriority.Bar.__new__(cls,*args,**kwargs)
numpy._core.tests.test_multiarray.TestArrayPriority.Foo(cls,*args,**kwargs)
numpy._core.tests.test_multiarray.TestArrayPriority.Foo.__new__(cls,*args,**kwargs)
numpy._core.tests.test_multiarray.TestArrayPriority.Other
numpy._core.tests.test_multiarray.TestArrayPriority.Other._all(self,other)
numpy._core.tests.test_multiarray.TestArrayPriority.test_ndarray_other(self)
numpy._core.tests.test_multiarray.TestArrayPriority.test_ndarray_subclass(self)
numpy._core.tests.test_multiarray.TestArrayPriority.test_subclass_other(self)
numpy._core.tests.test_multiarray.TestArrayPriority.test_subclass_subclass(self)
numpy._core.tests.test_multiarray.TestAsCArray
numpy._core.tests.test_multiarray.TestAsCArray.test_1darray(self)
numpy._core.tests.test_multiarray.TestAsCArray.test_2darray(self)
numpy._core.tests.test_multiarray.TestAsCArray.test_3darray(self)
numpy._core.tests.test_multiarray.TestAssignment
numpy._core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting(self)
numpy._core.tests.test_multiarray.TestAssignment.test_assignment_errors(self)
numpy._core.tests.test_multiarray.TestAssignment.test_cast_to_string(self)
numpy._core.tests.test_multiarray.TestAssignment.test_longdouble_assignment(self)
numpy._core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list(self)
numpy._core.tests.test_multiarray.TestAssignment.test_unicode_assignment(self)
numpy._core.tests.test_multiarray.TestAttributes
numpy._core.tests.test_multiarray.TestAttributes.setup_method(self)
numpy._core.tests.test_multiarray.TestAttributes.test_attributes(self)
numpy._core.tests.test_multiarray.TestAttributes.test_dtypeattr(self)
numpy._core.tests.test_multiarray.TestAttributes.test_fill(self)
numpy._core.tests.test_multiarray.TestAttributes.test_fill_max_uint64(self)
numpy._core.tests.test_multiarray.TestAttributes.test_fill_readonly(self)
numpy._core.tests.test_multiarray.TestAttributes.test_fill_struct_array(self)
numpy._core.tests.test_multiarray.TestAttributes.test_fill_subarrays(self)
numpy._core.tests.test_multiarray.TestAttributes.test_int_subclassing(self)
numpy._core.tests.test_multiarray.TestAttributes.test_set_stridesattr(self)
numpy._core.tests.test_multiarray.TestAttributes.test_stridesattr(self)
numpy._core.tests.test_multiarray.TestBinop
numpy._core.tests.test_multiarray.TestBinop.test_array_ufunc_index(self)
numpy._core.tests.test_multiarray.TestBinop.test_inplace(self)
numpy._core.tests.test_multiarray.TestBinop.test_out_override(self)
numpy._core.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override(self)
numpy._core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype(self)
numpy._core.tests.test_multiarray.TestBinop.test_pow_override_with_errors(self)
numpy._core.tests.test_multiarray.TestBinop.test_ufunc_binop_bad_array_priority(self,priority)
numpy._core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction(self)
numpy._core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature(self)
numpy._core.tests.test_multiarray.TestBool
numpy._core.tests.test_multiarray.TestBool._test_cast_from_flexible(self,dtype)
numpy._core.tests.test_multiarray.TestBool.check_count_nonzero(self,power,length)
numpy._core.tests.test_multiarray.TestBool.test_cast_from_bytes(self)
numpy._core.tests.test_multiarray.TestBool.test_cast_from_unicode(self)
numpy._core.tests.test_multiarray.TestBool.test_cast_from_void(self)
numpy._core.tests.test_multiarray.TestBool.test_count_nonzero(self)
numpy._core.tests.test_multiarray.TestBool.test_count_nonzero_all(self)
numpy._core.tests.test_multiarray.TestBool.test_count_nonzero_unaligned(self)
numpy._core.tests.test_multiarray.TestBool.test_sum(self)
numpy._core.tests.test_multiarray.TestBool.test_test_interning(self)
numpy._core.tests.test_multiarray.TestBytestringArrayNonzero
numpy._core.tests.test_multiarray.TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey(self)
numpy._core.tests.test_multiarray.TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey(self)
numpy._core.tests.test_multiarray.TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy(self)
numpy._core.tests.test_multiarray.TestBytestringArrayNonzero.test_whitespace_bstring_array_is_truthy(self)
numpy._core.tests.test_multiarray.TestCAPI
numpy._core.tests.test_multiarray.TestCAPI.test_IsPythonScalar(self)
numpy._core.tests.test_multiarray.TestCAPI.test_intp_sequence_converters(self,converter)
numpy._core.tests.test_multiarray.TestCAPI.test_intp_sequence_converters_errors(self,converter)
numpy._core.tests.test_multiarray.TestCTypes
numpy._core.tests.test_multiarray.TestCTypes._make_readonly(x)
numpy._core.tests.test_multiarray.TestCTypes.test_ctypes_as_parameter_holds_reference(self)
numpy._core.tests.test_multiarray.TestCTypes.test_ctypes_data_as_holds_reference(self,arr)
numpy._core.tests.test_multiarray.TestCTypes.test_ctypes_is_available(self)
numpy._core.tests.test_multiarray.TestCTypes.test_ctypes_is_not_available(self)
numpy._core.tests.test_multiarray.TestCequenceMethods
numpy._core.tests.test_multiarray.TestCequenceMethods.test_array_contains(self)
numpy._core.tests.test_multiarray.TestChoose
numpy._core.tests.test_multiarray.TestChoose.setup_method(self)
numpy._core.tests.test_multiarray.TestChoose.test_basic(self)
numpy._core.tests.test_multiarray.TestChoose.test_broadcast1(self)
numpy._core.tests.test_multiarray.TestChoose.test_broadcast2(self)
numpy._core.tests.test_multiarray.TestChoose.test_dimension_and_args_limit(self)
numpy._core.tests.test_multiarray.TestChoose.test_output_dtype(self,ops)
numpy._core.tests.test_multiarray.TestClip
numpy._core.tests.test_multiarray.TestClip._check_range(self,x,cmin,cmax)
numpy._core.tests.test_multiarray.TestClip._clip_type(self,type_group,array_max,clip_min,clip_max,inplace=False,expected_min=None,expected_max=None)
numpy._core.tests.test_multiarray.TestClip.test_basic(self)
numpy._core.tests.test_multiarray.TestClip.test_int_range_error(self,inplace)
numpy._core.tests.test_multiarray.TestClip.test_max_or_min(self)
numpy._core.tests.test_multiarray.TestClip.test_nan(self)
numpy._core.tests.test_multiarray.TestClip.test_record_array(self)
numpy._core.tests.test_multiarray.TestCompress
numpy._core.tests.test_multiarray.TestCompress.test_axis(self)
numpy._core.tests.test_multiarray.TestCompress.test_flatten(self)
numpy._core.tests.test_multiarray.TestCompress.test_truncate(self)
numpy._core.tests.test_multiarray.TestConversion
numpy._core.tests.test_multiarray.TestConversion.test_array_scalar_relational_operation(self)
numpy._core.tests.test_multiarray.TestConversion.test_to_bool_scalar(self)
numpy._core.tests.test_multiarray.TestConversion.test_to_int_scalar(self)
numpy._core.tests.test_multiarray.TestCreation
numpy._core.tests.test_multiarray.TestCreation._ragged_creation(self,seq)
numpy._core.tests.test_multiarray.TestCreation.test_array_of_ragged_array(self)
numpy._core.tests.test_multiarray.TestCreation.test_array_too_big(self)
numpy._core.tests.test_multiarray.TestCreation.test_creation_from_dtypemeta(self,func)
numpy._core.tests.test_multiarray.TestCreation.test_deep_nonragged_object(self)
numpy._core.tests.test_multiarray.TestCreation.test_empty_unicode(self)
numpy._core.tests.test_multiarray.TestCreation.test_failed_len_sequence(self)
numpy._core.tests.test_multiarray.TestCreation.test_false_len_iterable(self)
numpy._core.tests.test_multiarray.TestCreation.test_false_len_sequence(self)
numpy._core.tests.test_multiarray.TestCreation.test_from_attribute(self)
numpy._core.tests.test_multiarray.TestCreation.test_from_string(self)
numpy._core.tests.test_multiarray.TestCreation.test_malloc_fails(self)
numpy._core.tests.test_multiarray.TestCreation.test_no_len_object_type(self)
numpy._core.tests.test_multiarray.TestCreation.test_non_sequence_sequence(self)
numpy._core.tests.test_multiarray.TestCreation.test_object_initialized_to_None(self,function,dtype)
numpy._core.tests.test_multiarray.TestCreation.test_ragged_ndim_object(self)
numpy._core.tests.test_multiarray.TestCreation.test_ragged_shape_object(self)
numpy._core.tests.test_multiarray.TestCreation.test_sequence_non_homogeneous(self)
numpy._core.tests.test_multiarray.TestCreation.test_structured_void_promotion(self,idx)
numpy._core.tests.test_multiarray.TestCreation.test_too_big_error(self)
numpy._core.tests.test_multiarray.TestCreation.test_void(self)
numpy._core.tests.test_multiarray.TestCreation.test_zeros(self)
numpy._core.tests.test_multiarray.TestCreation.test_zeros_big(self)
numpy._core.tests.test_multiarray.TestCreation.test_zeros_like_like_zeros(self)
numpy._core.tests.test_multiarray.TestCreation.test_zeros_obj(self)
numpy._core.tests.test_multiarray.TestCreation.test_zeros_obj_obj(self)
numpy._core.tests.test_multiarray.TestDevice
numpy._core.tests.test_multiarray.TestDevice.test_device(self)
numpy._core.tests.test_multiarray.TestDevice.test_to_device(self)
numpy._core.tests.test_multiarray.TestDot
numpy._core.tests.test_multiarray.TestDot.setup_method(self)
numpy._core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix(self)
numpy._core.tests.test_multiarray.TestDot.test_all(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_2args(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_3args(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_3args_errors(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_array_order(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_out_aliasing(self)
numpy._core.tests.test_multiarray.TestDot.test_dot_out_result(self)
numpy._core.tests.test_multiarray.TestDot.test_dotcolumnvect1(self)
numpy._core.tests.test_multiarray.TestDot.test_dotcolumnvect2(self)
numpy._core.tests.test_multiarray.TestDot.test_dotmatmat(self)
numpy._core.tests.test_multiarray.TestDot.test_dotmatvec(self)
numpy._core.tests.test_multiarray.TestDot.test_dotmatvec2(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecmat(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecmat2(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecmat3(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecscalar(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecscalar2(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecvecinner(self)
numpy._core.tests.test_multiarray.TestDot.test_dotvecvecouter(self)
numpy._core.tests.test_multiarray.TestDot.test_dtype_discovery_fails(self)
numpy._core.tests.test_multiarray.TestDot.test_huge_vectordot(self,dtype)
numpy._core.tests.test_multiarray.TestDot.test_vecobject(self)
numpy._core.tests.test_multiarray.TestDtypedescr
numpy._core.tests.test_multiarray.TestDtypedescr.test_byteorders(self)
numpy._core.tests.test_multiarray.TestDtypedescr.test_construction(self)
numpy._core.tests.test_multiarray.TestDtypedescr.test_structured_non_void(self)
numpy._core.tests.test_multiarray.TestFancyIndexing
numpy._core.tests.test_multiarray.TestFancyIndexing.test_assign_mask(self)
numpy._core.tests.test_multiarray.TestFancyIndexing.test_assign_mask2(self)
numpy._core.tests.test_multiarray.TestFancyIndexing.test_list(self)
numpy._core.tests.test_multiarray.TestFancyIndexing.test_mask(self)
numpy._core.tests.test_multiarray.TestFancyIndexing.test_mask2(self)
numpy._core.tests.test_multiarray.TestFancyIndexing.test_tuple(self)
numpy._core.tests.test_multiarray.TestFlags
numpy._core.tests.test_multiarray.TestFlags.setup_method(self)
numpy._core.tests.test_multiarray.TestFlags.test_otherflags(self)
numpy._core.tests.test_multiarray.TestFlags.test_readonly_flag_protocols(self,flag,flag_value,writeable)
numpy._core.tests.test_multiarray.TestFlags.test_string_align(self)
numpy._core.tests.test_multiarray.TestFlags.test_void_align(self)
numpy._core.tests.test_multiarray.TestFlags.test_warnonwrite(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable_any_base(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable_from_buffer(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable_from_c_data(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable_from_readonly(self)
numpy._core.tests.test_multiarray.TestFlags.test_writeable_pickle(self)
numpy._core.tests.test_multiarray.TestFlat
numpy._core.tests.test_multiarray.TestFlat.setup_method(self)
numpy._core.tests.test_multiarray.TestFlat.test___array__(self)
numpy._core.tests.test_multiarray.TestFlat.test_contiguous(self)
numpy._core.tests.test_multiarray.TestFlat.test_discontiguous(self)
numpy._core.tests.test_multiarray.TestFlat.test_index_getset(self)
numpy._core.tests.test_multiarray.TestFlat.test_maxdims(self)
numpy._core.tests.test_multiarray.TestFlat.test_refcount(self)
numpy._core.tests.test_multiarray.TestFormat
numpy._core.tests.test_multiarray.TestFormat.test_0d(self)
numpy._core.tests.test_multiarray.TestFormat.test_1d_format(self)
numpy._core.tests.test_multiarray.TestFormat.test_1d_no_format(self)
numpy._core.tests.test_multiarray.TestFromBuffer
numpy._core.tests.test_multiarray.TestFromBuffer.test_array_base(self,obj)
numpy._core.tests.test_multiarray.TestFromBuffer.test_basic(self,byteorder,dtype)
numpy._core.tests.test_multiarray.TestFromBuffer.test_empty(self)
numpy._core.tests.test_multiarray.TestFromBuffer.test_mmap_close(self)
numpy._core.tests.test_multiarray.TestHash
numpy._core.tests.test_multiarray.TestHash.test_int(self)
numpy._core.tests.test_multiarray.TestHashing
numpy._core.tests.test_multiarray.TestHashing.test_arrays_not_hashable(self)
numpy._core.tests.test_multiarray.TestHashing.test_collections_hashable(self)
numpy._core.tests.test_multiarray.TestIO
numpy._core.tests.test_multiarray.TestIO._check_from(self,s,value,filename,**kw)
numpy._core.tests.test_multiarray.TestIO.decimal_sep_localization(self,request)
numpy._core.tests.test_multiarray.TestIO.test_ascii(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_binary(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_bool_fromstring(self)
numpy._core.tests.test_multiarray.TestIO.test_counted_string(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_counted_string_with_ws(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_dtype(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_dtype_bool(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_empty_files_binary(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_empty_files_text(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_file_position_after_fromfile(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_file_position_after_tofile(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_fromfile_bad_dup(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_fromfile_offset(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_fromfile_subarray_binary(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_fromstring_count0(self)
numpy._core.tests.test_multiarray.TestIO.test_inf(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_int64_fromstring(self)
numpy._core.tests.test_multiarray.TestIO.test_io_open_buffered_fromfile(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_io_open_unbuffered_fromfile(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_largish_file(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_load_object_array_fromfile(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_long_sep(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_malformed(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_nan(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_nofile(self)
numpy._core.tests.test_multiarray.TestIO.test_numbers(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_parsing_subarray_unsupported(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_read_shorter_than_count_subarray(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip_binary_str(self,x)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip_dump_pathlib(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip_file(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip_repr(self,x)
numpy._core.tests.test_multiarray.TestIO.test_roundtrip_str(self,x)
numpy._core.tests.test_multiarray.TestIO.test_string(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_string_with_ws(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_tofile_cleanup(self,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.test_tofile_format(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_tofile_sep(self,tmp_filename,decimal_sep_localization)
numpy._core.tests.test_multiarray.TestIO.test_uint64_fromstring(self)
numpy._core.tests.test_multiarray.TestIO.test_unseekable_fromfile(self,x,tmp_filename)
numpy._core.tests.test_multiarray.TestIO.tmp_filename(self,tmp_path,request)
numpy._core.tests.test_multiarray.TestIO.x(self)
numpy._core.tests.test_multiarray.TestInner
numpy._core.tests.test_multiarray.TestInner.test_3d_tensor(self)
numpy._core.tests.test_multiarray.TestInner.test_inner_product_with_various_contiguities(self)
numpy._core.tests.test_multiarray.TestInner.test_inner_scalar_and_vector(self)
numpy._core.tests.test_multiarray.TestInner.test_inner_type_mismatch(self)
numpy._core.tests.test_multiarray.TestInner.test_vecself(self)
numpy._core.tests.test_multiarray.TestLexsort
numpy._core.tests.test_multiarray.TestLexsort.test_basic(self,dtype)
numpy._core.tests.test_multiarray.TestLexsort.test_datetime(self)
numpy._core.tests.test_multiarray.TestLexsort.test_invalid_axis(self)
numpy._core.tests.test_multiarray.TestLexsort.test_mixed(self)
numpy._core.tests.test_multiarray.TestLexsort.test_object(self)
numpy._core.tests.test_multiarray.TestMatmul(MatmulCommon)
numpy._core.tests.test_multiarray.TestMatmul.test_dot_equivalent(self,args)
numpy._core.tests.test_multiarray.TestMatmul.test_empty_out(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_bool(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_empty(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_exception_add(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_exception_multiply(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_object(self)
numpy._core.tests.test_multiarray.TestMatmul.test_matmul_object_type_scalar(self)
numpy._core.tests.test_multiarray.TestMatmul.test_out_arg(self)
numpy._core.tests.test_multiarray.TestMatmul.test_out_contiguous(self)
numpy._core.tests.test_multiarray.TestMatmulInplace
numpy._core.tests.test_multiarray.TestMatmulInplace.test_basic(self,dtype1:np.dtype,dtype2:np.dtype)->None
numpy._core.tests.test_multiarray.TestMatmulInplace.test_shapes(self,a_shape:tuple[int,...],b_shape:tuple[int,...])
numpy._core.tests.test_multiarray.TestMatmulOperator(MatmulCommon)
numpy._core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override(self)
numpy._core.tests.test_multiarray.TestMatmulOperator.test_matmul_raises(self)
numpy._core.tests.test_multiarray.TestMethods
numpy._core.tests.test_multiarray.TestMethods.assert_partitioned(self,d,kth)
numpy._core.tests.test_multiarray.TestMethods.test__complex__(self)
numpy._core.tests.test_multiarray.TestMethods.test__complex__should_not_work(self)
numpy._core.tests.test_multiarray.TestMethods.test__deepcopy__(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test__deepcopy__catches_failure(self)
numpy._core.tests.test_multiarray.TestMethods.test_all_where(self)
numpy._core.tests.test_multiarray.TestMethods.test_any_and_all_object_dtype(self)
numpy._core.tests.test_multiarray.TestMethods.test_any_and_all_result_dtype(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_any_where(self)
numpy._core.tests.test_multiarray.TestMethods.test_argpartition_empty_array(self,kth_dtype)
numpy._core.tests.test_multiarray.TestMethods.test_argpartition_gh5524(self,kth_dtype)
numpy._core.tests.test_multiarray.TestMethods.test_argpartition_integer(self)
numpy._core.tests.test_multiarray.TestMethods.test_argpartition_out_of_range(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_argsort(self)
numpy._core.tests.test_multiarray.TestMethods.test_arr_mult(self,func)
numpy._core.tests.test_multiarray.TestMethods.test_choose(self)
numpy._core.tests.test_multiarray.TestMethods.test_compress(self)
numpy._core.tests.test_multiarray.TestMethods.test_conjugate(self)
numpy._core.tests.test_multiarray.TestMethods.test_conjugate_out(self)
numpy._core.tests.test_multiarray.TestMethods.test_copy(self)
numpy._core.tests.test_multiarray.TestMethods.test_diagonal(self)
numpy._core.tests.test_multiarray.TestMethods.test_diagonal_memleak(self)
numpy._core.tests.test_multiarray.TestMethods.test_diagonal_view_notwriteable(self)
numpy._core.tests.test_multiarray.TestMethods.test_dot(self)
numpy._core.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails(self)
numpy._core.tests.test_multiarray.TestMethods.test_dot_matmul_out(self)
numpy._core.tests.test_multiarray.TestMethods.test_dot_out_mem_overlap(self)
numpy._core.tests.test_multiarray.TestMethods.test_dot_type_mismatch(self)
numpy._core.tests.test_multiarray.TestMethods.test_flatten(self)
numpy._core.tests.test_multiarray.TestMethods.test_matmul_out(self)
numpy._core.tests.test_multiarray.TestMethods.test_no_dgemv(self,func,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_partition(self)
numpy._core.tests.test_multiarray.TestMethods.test_partition_cdtype(self)
numpy._core.tests.test_multiarray.TestMethods.test_partition_empty_array(self,kth_dtype)
numpy._core.tests.test_multiarray.TestMethods.test_partition_fuzz(self)
numpy._core.tests.test_multiarray.TestMethods.test_partition_integer(self)
numpy._core.tests.test_multiarray.TestMethods.test_partition_iterative(self)
numpy._core.tests.test_multiarray.TestMethods.test_partition_out_of_range(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_partition_unicode_kind(self)
numpy._core.tests.test_multiarray.TestMethods.test_prod(self)
numpy._core.tests.test_multiarray.TestMethods.test_put(self)
numpy._core.tests.test_multiarray.TestMethods.test_ravel(self)
numpy._core.tests.test_multiarray.TestMethods.test_ravel_subclass(self)
numpy._core.tests.test_multiarray.TestMethods.test_repeat(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_reshape(self)
numpy._core.tests.test_multiarray.TestMethods.test_round(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_complex(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_floats(self,a)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_n_elements(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_resetting(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_return_type(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_type_specific(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_unaligned_array(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_unicode(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_with_invalid_sorter(self)
numpy._core.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter(self)
numpy._core.tests.test_multiarray.TestMethods.test_size_zero_memleak(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_axis(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_bad_ordering(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_complex(self,part,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_sort_complex_byte_swapping(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_degraded(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_object(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_order(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_raises(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_signed(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_sort_size_0(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_string(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_sort_structured(self,dt,step)
numpy._core.tests.test_multiarray.TestMethods.test_sort_time(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_sort_unicode_kind(self)
numpy._core.tests.test_multiarray.TestMethods.test_sort_unsigned(self,dtype)
numpy._core.tests.test_multiarray.TestMethods.test_squeeze(self)
numpy._core.tests.test_multiarray.TestMethods.test_swapaxes(self)
numpy._core.tests.test_multiarray.TestMethods.test_trace(self)
numpy._core.tests.test_multiarray.TestMethods.test_trace_subclass(self)
numpy._core.tests.test_multiarray.TestMethods.test_transpose(self)
numpy._core.tests.test_multiarray.TestMethods.test_void_sort(self)
numpy._core.tests.test_multiarray.TestMinMax
numpy._core.tests.test_multiarray.TestMinMax.test_axis(self)
numpy._core.tests.test_multiarray.TestMinMax.test_datetime(self)
numpy._core.tests.test_multiarray.TestMinMax.test_scalar(self)
numpy._core.tests.test_multiarray.TestMinScalarType
numpy._core.tests.test_multiarray.TestMinScalarType.test_object(self)
numpy._core.tests.test_multiarray.TestMinScalarType.test_usigned_int(self)
numpy._core.tests.test_multiarray.TestMinScalarType.test_usigned_longlong(self)
numpy._core.tests.test_multiarray.TestMinScalarType.test_usigned_short(self)
numpy._core.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort(self)
numpy._core.tests.test_multiarray.TestNeighborhoodIter
numpy._core.tests.test_multiarray.TestNeighborhoodIter.test_circular(self,dt)
numpy._core.tests.test_multiarray.TestNeighborhoodIter.test_mirror(self,dt)
numpy._core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d(self,dt)
numpy._core.tests.test_multiarray.TestNeighborhoodIter.test_simple(self,dt)
numpy._core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d(self,dt)
numpy._core.tests.test_multiarray.TestNewBufferProtocol
numpy._core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip(self,obj)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_integer_via_memoryview(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_struct_via_memoryview(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_error_if_stored_buffer_info_is_corrupted(self,obj)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_error_message_unsupported(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_error_pointer_type(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_and_pickle_user_dtype(self,obj,error)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_endian(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_flags(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_record(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_invalid_buffer_format(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_max_dims(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_no_suboffsets(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_out_of_order_fields(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_padding(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides(self,c=np.ones((1,10,10),dtype='i8'))
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_scalar(self)
numpy._core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types(self)
numpy._core.tests.test_multiarray.TestNewaxis
numpy._core.tests.test_multiarray.TestNewaxis.test_basic(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype
numpy._core.tests.test_multiarray.TestPEP3118Dtype._check(self,spec,wanted)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_char_vs_string(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_field_order(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding(self)
numpy._core.tests.test_multiarray.TestPEP3118Dtype.test_unnamed_fields(self)
numpy._core.tests.test_multiarray.TestPickling
numpy._core.tests.test_multiarray.TestPickling._loads(self,obj)
numpy._core.tests.test_multiarray.TestPickling.test_correct_protocol5_error_message(self)
numpy._core.tests.test_multiarray.TestPickling.test_datetime64_byteorder(self)
numpy._core.tests.test_multiarray.TestPickling.test_f_contiguous_array(self)
numpy._core.tests.test_multiarray.TestPickling.test_non_contiguous_array(self)
numpy._core.tests.test_multiarray.TestPickling.test_record_array_with_object_dtype(self)
numpy._core.tests.test_multiarray.TestPickling.test_roundtrip(self)
numpy._core.tests.test_multiarray.TestPickling.test_subarray_int_shape(self)
numpy._core.tests.test_multiarray.TestPickling.test_version0_float32(self)
numpy._core.tests.test_multiarray.TestPickling.test_version0_int8(self)
numpy._core.tests.test_multiarray.TestPickling.test_version0_object(self)
numpy._core.tests.test_multiarray.TestPickling.test_version1_float32(self)
numpy._core.tests.test_multiarray.TestPickling.test_version1_int8(self)
numpy._core.tests.test_multiarray.TestPickling.test_version1_object(self)
numpy._core.tests.test_multiarray.TestPutmask
numpy._core.tests.test_multiarray.TestPutmask.test_byteorder(self,dtype)
numpy._core.tests.test_multiarray.TestPutmask.test_ip_types(self)
numpy._core.tests.test_multiarray.TestPutmask.test_kwargs(self)
numpy._core.tests.test_multiarray.TestPutmask.test_mask_size(self)
numpy._core.tests.test_multiarray.TestPutmask.test_overlaps(self)
numpy._core.tests.test_multiarray.TestPutmask.test_record_array(self)
numpy._core.tests.test_multiarray.TestPutmask.test_writeable(self)
numpy._core.tests.test_multiarray.TestPutmask.tst_basic(self,x,T,mask,val)
numpy._core.tests.test_multiarray.TestRecord
numpy._core.tests.test_multiarray.TestRecord.test_bytes_fields(self)
numpy._core.tests.test_multiarray.TestRecord.test_empty_structure_creation(self)
numpy._core.tests.test_multiarray.TestRecord.test_field_names(self)
numpy._core.tests.test_multiarray.TestRecord.test_field_rename(self)
numpy._core.tests.test_multiarray.TestRecord.test_fromarrays_unicode(self)
numpy._core.tests.test_multiarray.TestRecord.test_multifield_indexing_view(self)
numpy._core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence(self)
numpy._core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode(self)
numpy._core.tests.test_multiarray.TestRecord.test_record_hash(self)
numpy._core.tests.test_multiarray.TestRecord.test_record_no_hash(self)
numpy._core.tests.test_multiarray.TestRecord.test_unicode_order(self)
numpy._core.tests.test_multiarray.TestRepeat
numpy._core.tests.test_multiarray.TestRepeat.setup_method(self)
numpy._core.tests.test_multiarray.TestRepeat.test_axis_spec(self)
numpy._core.tests.test_multiarray.TestRepeat.test_basic(self)
numpy._core.tests.test_multiarray.TestRepeat.test_broadcast1(self)
numpy._core.tests.test_multiarray.TestRepeat.test_broadcast2(self)
numpy._core.tests.test_multiarray.TestResize
numpy._core.tests.test_multiarray.TestResize.test_0d_shape(self)
numpy._core.tests.test_multiarray.TestResize.test_basic(self)
numpy._core.tests.test_multiarray.TestResize.test_check_reference(self)
numpy._core.tests.test_multiarray.TestResize.test_check_weakref(self)
numpy._core.tests.test_multiarray.TestResize.test_empty_view(self)
numpy._core.tests.test_multiarray.TestResize.test_freeform_shape(self)
numpy._core.tests.test_multiarray.TestResize.test_int_shape(self)
numpy._core.tests.test_multiarray.TestResize.test_invalid_arguments(self)
numpy._core.tests.test_multiarray.TestResize.test_none_shape(self)
numpy._core.tests.test_multiarray.TestResize.test_obj_obj(self)
numpy._core.tests.test_multiarray.TestResize.test_zeros_appended(self)
numpy._core.tests.test_multiarray.TestScalarIndexing
numpy._core.tests.test_multiarray.TestScalarIndexing.setup_method(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_empty_subscript(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_newaxis(self)
numpy._core.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment(self)
numpy._core.tests.test_multiarray.TestStackedNeighborhoodIter
numpy._core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular(self)
numpy._core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const(self)
numpy._core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror(self)
numpy._core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within(self)
numpy._core.tests.test_multiarray.TestStats
numpy._core.tests.test_multiarray.TestStats.setup_method(self)
numpy._core.tests.test_multiarray.TestStats.test_ddof(self)
numpy._core.tests.test_multiarray.TestStats.test_ddof_too_big(self)
numpy._core.tests.test_multiarray.TestStats.test_dtype_from_dtype(self)
numpy._core.tests.test_multiarray.TestStats.test_dtype_from_input(self)
numpy._core.tests.test_multiarray.TestStats.test_empty(self)
numpy._core.tests.test_multiarray.TestStats.test_keepdims(self)
numpy._core.tests.test_multiarray.TestStats.test_mean_axis_error(self)
numpy._core.tests.test_multiarray.TestStats.test_mean_float16(self)
numpy._core.tests.test_multiarray.TestStats.test_mean_values(self)
numpy._core.tests.test_multiarray.TestStats.test_mean_where(self)
numpy._core.tests.test_multiarray.TestStats.test_out(self)
numpy._core.tests.test_multiarray.TestStats.test_python_type(self)
numpy._core.tests.test_multiarray.TestStats.test_std_values(self)
numpy._core.tests.test_multiarray.TestStats.test_std_where(self)
numpy._core.tests.test_multiarray.TestStats.test_subclass(self)
numpy._core.tests.test_multiarray.TestStats.test_var_axis_error(self)
numpy._core.tests.test_multiarray.TestStats.test_var_complex_byteorder(self)
numpy._core.tests.test_multiarray.TestStats.test_var_complex_values(self,complex_dtype,ndec)
numpy._core.tests.test_multiarray.TestStats.test_var_dimensions(self)
numpy._core.tests.test_multiarray.TestStats.test_var_values(self)
numpy._core.tests.test_multiarray.TestStats.test_var_where(self)
numpy._core.tests.test_multiarray.TestStringCompare
numpy._core.tests.test_multiarray.TestStringCompare.test_mixed(self)
numpy._core.tests.test_multiarray.TestStringCompare.test_string(self)
numpy._core.tests.test_multiarray.TestStringCompare.test_unicode(self)
numpy._core.tests.test_multiarray.TestStructured
numpy._core.tests.test_multiarray.TestStructured.test_assignment(self)
numpy._core.tests.test_multiarray.TestStructured.test_base_attr(self)
numpy._core.tests.test_multiarray.TestStructured.test_casting(self)
numpy._core.tests.test_multiarray.TestStructured.test_empty_structured_array_comparison(self)
numpy._core.tests.test_multiarray.TestStructured.test_multiindex_titles(self)
numpy._core.tests.test_multiarray.TestStructured.test_objview(self)
numpy._core.tests.test_multiarray.TestStructured.test_setfield(self)
numpy._core.tests.test_multiarray.TestStructured.test_setfield_object(self)
numpy._core.tests.test_multiarray.TestStructured.test_structured_array_comparison_bad_broadcasts(self,op)
numpy._core.tests.test_multiarray.TestStructured.test_structured_asarray_is_view(self)
numpy._core.tests.test_multiarray.TestStructured.test_structured_cast_promotion_fieldorder(self)
numpy._core.tests.test_multiarray.TestStructured.test_structured_comparisons_with_promotion(self)
numpy._core.tests.test_multiarray.TestStructured.test_structured_promotion_packs(self,dtype_dict,align)
numpy._core.tests.test_multiarray.TestStructured.test_structuredscalar_indexing(self)
numpy._core.tests.test_multiarray.TestStructured.test_subarray_comparison(self)
numpy._core.tests.test_multiarray.TestStructured.test_subarray_field_access(self)
numpy._core.tests.test_multiarray.TestStructured.test_void_comparison_failures(self,op)
numpy._core.tests.test_multiarray.TestStructured.test_zero_width_string(self)
numpy._core.tests.test_multiarray.TestSubscripting
numpy._core.tests.test_multiarray.TestSubscripting.test_test_zero_rank(self)
numpy._core.tests.test_multiarray.TestTake
numpy._core.tests.test_multiarray.TestTake.test_byteorder(self,dtype)
numpy._core.tests.test_multiarray.TestTake.test_clip(self)
numpy._core.tests.test_multiarray.TestTake.test_ip_types(self)
numpy._core.tests.test_multiarray.TestTake.test_out_overlap(self)
numpy._core.tests.test_multiarray.TestTake.test_raise(self)
numpy._core.tests.test_multiarray.TestTake.test_record_array(self)
numpy._core.tests.test_multiarray.TestTake.test_ret_is_out(self,shape)
numpy._core.tests.test_multiarray.TestTake.test_wrap(self)
numpy._core.tests.test_multiarray.TestTake.tst_basic(self,x)
numpy._core.tests.test_multiarray.TestTemporaryElide
numpy._core.tests.test_multiarray.TestTemporaryElide.test_elide_broadcast(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_elide_readonly(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar_readonly(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_elide_updateifcopy(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide_stack(self)
numpy._core.tests.test_multiarray.TestTemporaryElide.test_temporary_with_cast(self)
numpy._core.tests.test_multiarray.TestUnicodeArrayNonzero
numpy._core.tests.test_multiarray.TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey(self)
numpy._core.tests.test_multiarray.TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey(self)
numpy._core.tests.test_multiarray.TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy(self)
numpy._core.tests.test_multiarray.TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_truthy(self)
numpy._core.tests.test_multiarray.TestUnicodeEncoding
numpy._core.tests.test_multiarray.TestUnicodeEncoding.test_assign_scalar(self)
numpy._core.tests.test_multiarray.TestUnicodeEncoding.test_fill_scalar(self)
numpy._core.tests.test_multiarray.TestUnicodeEncoding.test_round_trip(self)
numpy._core.tests.test_multiarray.TestVdot
numpy._core.tests.test_multiarray.TestVdot.test_basic(self)
numpy._core.tests.test_multiarray.TestVdot.test_vdot_array_order(self)
numpy._core.tests.test_multiarray.TestVdot.test_vdot_uncontiguous(self)
numpy._core.tests.test_multiarray.TestView
numpy._core.tests.test_multiarray.TestView.test_basic(self)
numpy._core.tests.test_multiarray.TestViewDtype
numpy._core.tests.test_multiarray.TestViewDtype.test_f_contiguous(self)
numpy._core.tests.test_multiarray.TestViewDtype.test_larger_dtype_multiple(self)
numpy._core.tests.test_multiarray.TestViewDtype.test_larger_dtype_not_multiple(self)
numpy._core.tests.test_multiarray.TestViewDtype.test_non_c_contiguous(self)
numpy._core.tests.test_multiarray.TestViewDtype.test_smaller_dtype_multiple(self)
numpy._core.tests.test_multiarray.TestViewDtype.test_smaller_dtype_not_multiple(self)
numpy._core.tests.test_multiarray.TestWarnings
numpy._core.tests.test_multiarray.TestWarnings.test_complex_warning(self)
numpy._core.tests.test_multiarray.TestWhere
numpy._core.tests.test_multiarray.TestWhere.test_basic(self)
numpy._core.tests.test_multiarray.TestWhere.test_dtype_mix(self)
numpy._core.tests.test_multiarray.TestWhere.test_empty_result(self)
numpy._core.tests.test_multiarray.TestWhere.test_error(self)
numpy._core.tests.test_multiarray.TestWhere.test_exotic(self)
numpy._core.tests.test_multiarray.TestWhere.test_foreign(self)
numpy._core.tests.test_multiarray.TestWhere.test_kwargs(self)
numpy._core.tests.test_multiarray.TestWhere.test_largedim(self)
numpy._core.tests.test_multiarray.TestWhere.test_ndim(self)
numpy._core.tests.test_multiarray.TestWhere.test_string(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_argmax_with_out(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_argmin_with_out(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_choose_mod_raise(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_dealloc_warning(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_dot_out(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_flatiter__array__(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_insert_noncontiguous(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_put_noncontiguous(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_putmask_noncontiguous(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_take_mode_raise(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_view_assign(self)
numpy._core.tests.test_multiarray.TestWritebackIfCopy.test_view_discard_refcount(self)
numpy._core.tests.test_multiarray.TestZeroRank
numpy._core.tests.test_multiarray.TestZeroRank.setup_method(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_constructor(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_empty_subscript(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_invalid_subscript(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_newaxis(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_output(self)
numpy._core.tests.test_multiarray.TestZeroRank.test_real_imag(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible
numpy._core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition(self,name,kinds,**kwargs)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible._zeros(shape,dtype=str)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_argpartition(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_argsort(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_create(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_dumps(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_partition(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle_empty(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle_with_buffercallback(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_resize(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_sort(self)
numpy._core.tests.test_multiarray.TestZeroSizeFlexible.test_view(self)
numpy._core.tests.test_multiarray._aligned_zeros(shape,dtype=float,order='C',align=None)
numpy._core.tests.test_multiarray._mean(a,**args)
numpy._core.tests.test_multiarray._std(a,**args)
numpy._core.tests.test_multiarray._var(a,**args)
numpy._core.tests.test_multiarray.assert_arg_sorted(arr,arg)
numpy._core.tests.test_multiarray.assert_arr_partitioned(kth,k,arr_part)
numpy._core.tests.test_multiarray.test_argsort_float(N,dtype)
numpy._core.tests.test_multiarray.test_argsort_int(N,dtype)
numpy._core.tests.test_multiarray.test_array_interface_empty_shape()
numpy._core.tests.test_multiarray.test_array_interface_itemsize()
numpy._core.tests.test_multiarray.test_array_interface_offset()
numpy._core.tests.test_multiarray.test_array_interface_unicode_typestr()
numpy._core.tests.test_multiarray.test_cannot_assign_data()
numpy._core.tests.test_multiarray.test_comparisons_forwards_error(op)
numpy._core.tests.test_multiarray.test_equal_override()
numpy._core.tests.test_multiarray.test_equal_subclass_no_override(op,dt1,dt2)
numpy._core.tests.test_multiarray.test_flat_element_deletion()
numpy._core.tests.test_multiarray.test_getfield()
numpy._core.tests.test_multiarray.test_gh_22683()
numpy._core.tests.test_multiarray.test_gh_24459()
numpy._core.tests.test_multiarray.test_insufficient_width()
numpy._core.tests.test_multiarray.test_interface_no_shape()
numpy._core.tests.test_multiarray.test_matmul_axes()
numpy._core.tests.test_multiarray.test_no_loop_gives_all_true_or_false(dt1,dt2)
numpy._core.tests.test_multiarray.test_npy_char_raises()
numpy._core.tests.test_multiarray.test_npymath_complex(fun,npfun,x,y,test_dtype)
numpy._core.tests.test_multiarray.test_npymath_real()
numpy._core.tests.test_multiarray.test_orderconverter_with_nonASCII_unicode_ordering()
numpy._core.tests.test_multiarray.test_partition_fp(N,dtype)
numpy._core.tests.test_multiarray.test_partition_int(N,dtype)
numpy._core.tests.test_multiarray.test_private_get_ndarray_c_version()
numpy._core.tests.test_multiarray.test_ragged_comparison_fails(op)
numpy._core.tests.test_multiarray.test_richcompare_scalar_boolean_singleton_return()
numpy._core.tests.test_multiarray.test_scalar_element_deletion()
numpy._core.tests.test_multiarray.test_sort_float(N,dtype)
numpy._core.tests.test_multiarray.test_sort_float16()
numpy._core.tests.test_multiarray.test_sort_int(N,dtype)
numpy._core.tests.test_multiarray.test_sort_uint()
numpy._core.tests.test_multiarray.test_uintalignment_and_alignment()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_ctors.py----------------------------------------
A:numpy._core.tests.test_scalar_ctors.fsingle->numpy.single('-1e10000')
A:numpy._core.tests.test_scalar_ctors.fdouble->numpy.double('-1e10000')
A:numpy._core.tests.test_scalar_ctors.flongdouble->assert_warns(RuntimeWarning, np.longdouble, '-1e10000')
A:numpy._core.tests.test_scalar_ctors.fhalf->numpy.half('-1e10000')
A:numpy._core.tests.test_scalar_ctors.s->numpy.str_(b'\\x61', 'unicode-escape')
A:numpy._core.tests.test_scalar_ctors.dt->numpy.datetime64('2000-01', ('M', 2))
A:numpy._core.tests.test_scalar_ctors.x->t1(arg)
A:numpy._core.tests.test_scalar_ctors.arr->numpy.array(x, dtype=t2)
A:numpy._core.tests.test_scalar_ctors.res->numpy.void(data[()], dtype=dtype)
A:numpy._core.tests.test_scalar_ctors.expected->bytes(bytes_)
A:numpy._core.tests.test_scalar_ctors.m->memoryview(b'just one mintleaf?')
A:numpy._core.tests.test_scalar_ctors.dtype->numpy.dtype([('s', [('f', 'f8'), ('u', 'U1')]), ('i', 'i2')])
A:numpy._core.tests.test_scalar_ctors.data->numpy.array(((1.0, 'a'), 2), dtype=dtype)
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar._do_test(self,t1,t2,arg=2)
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar.test_complex(self,t1,t2,arg)
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar.test_complex_errors(self,t)
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar.test_integers(self,t1,t2)
numpy._core.tests.test_scalar_ctors.TestArrayFromScalar.test_reals(self,t1,t2)
numpy._core.tests.test_scalar_ctors.TestExtraArgs
numpy._core.tests.test_scalar_ctors.TestExtraArgs.test_bool(self)
numpy._core.tests.test_scalar_ctors.TestExtraArgs.test_datetime(self)
numpy._core.tests.test_scalar_ctors.TestExtraArgs.test_superclass(self)
numpy._core.tests.test_scalar_ctors.TestExtraArgs.test_void(self)
numpy._core.tests.test_scalar_ctors.TestFromInt
numpy._core.tests.test_scalar_ctors.TestFromInt.test_intp(self)
numpy._core.tests.test_scalar_ctors.TestFromInt.test_uint64_from_negative(self)
numpy._core.tests.test_scalar_ctors.TestFromString
numpy._core.tests.test_scalar_ctors.TestFromString.test_floating(self)
numpy._core.tests.test_scalar_ctors.TestFromString.test_floating_overflow(self)
numpy._core.tests.test_scalar_ctors.test_void_arraylike_trumps_byteslike()
numpy._core.tests.test_scalar_ctors.test_void_bad_dtype()
numpy._core.tests.test_scalar_ctors.test_void_dtype_arg()
numpy._core.tests.test_scalar_ctors.test_void_from_byteslike(bytes_)
numpy._core.tests.test_scalar_ctors.test_void_from_integer_with_dtype(data)
numpy._core.tests.test_scalar_ctors.test_void_from_structure()
numpy._core.tests.test_scalar_ctors.test_void_via_length(length)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_half.py----------------------------------------
A:numpy._core.tests.test_half.self.all_f16->numpy.arange(65536, dtype=uint16)
A:numpy._core.tests.test_half.self.all_f32->numpy.array(self.all_f16, dtype=float32)
A:numpy._core.tests.test_half.self.all_f64->numpy.array(self.all_f16, dtype=float64)
A:numpy._core.tests.test_half.self.nonan_f16->numpy.concatenate((np.arange(64512, 32767, -1, dtype=uint16), np.arange(0, 31745, 1, dtype=uint16)))
A:numpy._core.tests.test_half.self.nonan_f32->numpy.array(self.nonan_f16, dtype=float32)
A:numpy._core.tests.test_half.self.nonan_f64->numpy.array(self.nonan_f16, dtype=float64)
A:numpy._core.tests.test_half.b->Dummy()
A:numpy._core.tests.test_half.a_ld->numpy.array(self.nonan_f16, dtype=np.longdouble)
A:numpy._core.tests.test_half.i_int->numpy.arange(-2048, 2049)
A:numpy._core.tests.test_half.i_f16->numpy.array(i_int, dtype=float16)
A:numpy._core.tests.test_half.j->numpy.array(i_f16, dtype=int)
A:numpy._core.tests.test_half.expected_dt->numpy.dtype(f'{string_dt}32')
A:numpy._core.tests.test_half.arr->numpy.ones(3, dtype=np.float16).astype(string_dt)
A:numpy._core.tests.test_half.string->numpy.array('3.1416', dtype=string_dt)
A:numpy._core.tests.test_half.max_pattern->numpy.float16(np.finfo(np.float16).max).view(np.uint16)
A:numpy._core.tests.test_half.f16s_patterns->numpy.arange(0, max_pattern + 1, dtype=np.uint16)
A:numpy._core.tests.test_half.f16s_float->numpy.nextafter(f16s_float, float_t(-np.inf))
A:numpy._core.tests.test_half.res_patterns->numpy.nextafter(f16s_float, float_t(-np.inf)).astype(np.float16).view(np.uint16)
A:numpy._core.tests.test_half.cmp_patterns->f16s_patterns[1:-1].copy()
A:numpy._core.tests.test_half.smallest_value->numpy.uint16(1).view(np.float16).astype(float_t)
A:numpy._core.tests.test_half.larger_value->larger_pattern.view(float_t)
A:numpy._core.tests.test_half.nan->float16(np.nan)
A:numpy._core.tests.test_half.a->numpy.ones((1,), dtype=float16)
A:numpy._core.tests.test_half.a_bits->self.finite_f16.view(dtype=uint16)
A:numpy._core.tests.test_half.hinf->numpy.array((np.inf,), dtype=float16)
A:numpy._core.tests.test_half.hnan->numpy.array((np.nan,), dtype=float16)
A:numpy._core.tests.test_half.a_f16->numpy.ones((1,), dtype=float16).view(dtype=float16)
A:numpy._core.tests.test_half.c->numpy.array(b)
A:numpy._core.tests.test_half.x->numpy.minimum(b, c)
A:numpy._core.tests.test_half.a16->numpy.array((1,), dtype=float16)
A:numpy._core.tests.test_half.a32->numpy.array((1,), dtype=float32)
A:numpy._core.tests.test_half.b16->float16(1)
A:numpy._core.tests.test_half.b32->float32(1)
A:numpy._core.tests.test_half.sx16->numpy.array((0.0001,), dtype=float16)
A:numpy._core.tests.test_half.bx16->numpy.array((10000.0,), dtype=float16)
A:numpy._core.tests.test_half.sy16->float16(0.0001)
A:numpy._core.tests.test_half.by16->float16(10000.0)
numpy._core.tests.test_half.TestHalf
numpy._core.tests.test_half.TestHalf.setup_method(self)
numpy._core.tests.test_half.TestHalf.test_half_array_interface(self)
numpy._core.tests.test_half.TestHalf.test_half_coercion(self,weak_promotion)
numpy._core.tests.test_half.TestHalf.test_half_conversion_denormal_round_even(self,float_t,uint_t,bits)
numpy._core.tests.test_half.TestHalf.test_half_conversion_from_string(self,string_dt)
numpy._core.tests.test_half.TestHalf.test_half_conversion_rounding(self,float_t,shift,offset)
numpy._core.tests.test_half.TestHalf.test_half_conversion_to_string(self,string_dt)
numpy._core.tests.test_half.TestHalf.test_half_conversions(self)
numpy._core.tests.test_half.TestHalf.test_half_correctness(self)
numpy._core.tests.test_half.TestHalf.test_half_fpe(self)
numpy._core.tests.test_half.TestHalf.test_half_funcs(self)
numpy._core.tests.test_half.TestHalf.test_half_ordering(self)
numpy._core.tests.test_half.TestHalf.test_half_rounding(self)
numpy._core.tests.test_half.TestHalf.test_half_ufuncs(self)
numpy._core.tests.test_half.TestHalf.test_half_values(self)
numpy._core.tests.test_half.TestHalf.test_nans_infs(self)
numpy._core.tests.test_half.TestHalf.test_spacing_nextafter(self)
numpy._core.tests.test_half.assert_raises_fpe(strmatch,callable,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_datetime.py----------------------------------------
A:numpy._core.tests.test_datetime.t0->numpy.datetime64('2023-06-09T12:18:40', 'ns')
A:numpy._core.tests.test_datetime.dt1->numpy.dtype('M8[%s]' % unit1)
A:numpy._core.tests.test_datetime.dt2->numpy.dtype('M8[%s]' % unit2)
A:numpy._core.tests.test_datetime.expected->numpy.arange(366)
A:numpy._core.tests.test_datetime.arr->arr.astype('S').astype('S')
A:numpy._core.tests.test_datetime.a->numpy.array(['1980-03-23'], dtype=np.datetime64)
A:numpy._core.tests.test_datetime.b->numpy.datetime64('2010-02-15T06:30', 'm')
A:numpy._core.tests.test_datetime.dt->numpy.datetime64('2000', 'ns')
A:numpy._core.tests.test_datetime.dm->numpy.datetime64('1970-01-01', 'M')
A:numpy._core.tests.test_datetime.d->numpy.array(5, dtype='m8[D]')
A:numpy._core.tests.test_datetime.actual->divmod(op1, op2)
A:numpy._core.tests.test_datetime.test->numpy.array(datetime.timedelta(seconds=20))
A:numpy._core.tests.test_datetime.nan->numpy.array([np.nan] * 8 + [0])
A:numpy._core.tests.test_datetime.fnan->numpy.array([np.nan] * 8 + [0]).astype('f')
A:numpy._core.tests.test_datetime.lnan->numpy.array([np.nan] * 8 + [0]).astype('g')
A:numpy._core.tests.test_datetime.cnan->numpy.array([np.nan] * 8 + [0]).astype('D')
A:numpy._core.tests.test_datetime.cfnan->numpy.array([np.nan] * 8 + [0]).astype('F')
A:numpy._core.tests.test_datetime.clnan->numpy.array([np.nan] * 8 + [0]).astype('G')
A:numpy._core.tests.test_datetime.hnan->numpy.array([np.nan] * 8 + [0]).astype(np.half)
A:numpy._core.tests.test_datetime.nat->numpy.timedelta64('NaT')
A:numpy._core.tests.test_datetime.str_a->numpy.array(a, dtype='S')
A:numpy._core.tests.test_datetime.uni_a->numpy.array(a, dtype='U')
A:numpy._core.tests.test_datetime.dt_a->numpy.array(a, dtype='M')
A:numpy._core.tests.test_datetime.dt_b->numpy.empty_like(dt_a)
A:numpy._core.tests.test_datetime.str_b->numpy.empty(str_a.shape, dtype=(np.bytes_, 128))
A:numpy._core.tests.test_datetime.uni_b->numpy.empty_like(uni_a)
A:numpy._core.tests.test_datetime.times->numpy.array(['2017', 'NaT'], dtype=time_dtype)
A:numpy._core.tests.test_datetime.times_swapped->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(times.dtype.newbyteorder())
A:numpy._core.tests.test_datetime.unswapped->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(times.dtype.newbyteorder()).view(np.dtype('int64').newbyteorder())
A:numpy._core.tests.test_datetime.dtype1->numpy.dtype(time1)
A:numpy._core.tests.test_datetime.dtype2->numpy.dtype(time2)
A:numpy._core.tests.test_datetime.res->numpy.array('2020-10-10', dtype='M8').reshape(shape)
A:numpy._core.tests.test_datetime.from_strings->numpy.array(['2017', 'NaT'], dtype=str_dtype)
A:numpy._core.tests.test_datetime.to_strings->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(str_dtype)
A:numpy._core.tests.test_datetime.from_strings_swapped->numpy.array(['2017', 'NaT'], dtype=str_dtype).astype(from_strings.dtype.newbyteorder())
A:numpy._core.tests.test_datetime.scalar->numpy.datetime64('2016-01-01T00:00:00.000000000')
A:numpy._core.tests.test_datetime.op1->numpy.timedelta64(val1)
A:numpy._core.tests.test_datetime.op2->numpy.timedelta64(val2)
A:numpy._core.tests.test_datetime.dt_nat->numpy.datetime64('NaT', 'D')
A:numpy._core.tests.test_datetime.dt_other->numpy.datetime64('2000-01-01')
A:numpy._core.tests.test_datetime.td_nat->numpy.timedelta64('NaT', 'h')
A:numpy._core.tests.test_datetime.td_other->numpy.timedelta64(1, 'h')
A:numpy._core.tests.test_datetime.dtnat->numpy.array('NaT', dtype='M8[h]')
A:numpy._core.tests.test_datetime.t->numpy.ones(3, dtype='M8[s]')
A:numpy._core.tests.test_datetime.timesteps->numpy.array([date], dtype='datetime64[s]')[0].astype(np.int64)
A:numpy._core.tests.test_datetime.x->numpy.array([date], dtype='datetime64[%s]' % unit)
A:numpy._core.tests.test_datetime.bdd->numpy.busdaycalendar(weekmask='1111100', holidays=holidays)
A:numpy._core.tests.test_datetime.dates->numpy.busday_offset('2011-12-31', -np.arange(366), roll='forward', busdaycal=bdd)
A:numpy._core.tests.test_datetime.sunday->numpy.datetime64('2023-03-05')
A:numpy._core.tests.test_datetime.pos->numpy.array([True, True, False])
A:numpy._core.tests.test_datetime.neg->numpy.array([False, False, True])
A:numpy._core.tests.test_datetime.false->numpy.array([False, False, False])
A:numpy._core.tests.test_datetime.obj_arr->numpy.array([None])
A:numpy._core.tests.test_datetime.arr[...]->numpy.bytes_('2020-10-10')
A:numpy._core.tests.test_datetime.epoch->numpy.datetime64(0, time_unit)
A:numpy._core.tests.test_datetime.latest->numpy.datetime64(np.iinfo(np.int64).max, time_unit)
A:numpy._core.tests.test_datetime.earliest->numpy.datetime64(-np.iinfo(np.int64).max, time_unit)
A:numpy._core.tests.test_datetime.limit->numpy.datetime64(np.iinfo(np.int64).max * sign, time_unit)
A:numpy._core.tests.test_datetime.limit_via_str->numpy.datetime64(str(limit), time_unit)
A:numpy._core.tests.test_datetime.obj->custom()
numpy._core.tests.test_datetime.TestDateTime
numpy._core.tests.test_datetime.TestDateTime.test_assert_equal(self)
numpy._core.tests.test_datetime.TestDateTime.test_cast_overflow(self)
numpy._core.tests.test_datetime.TestDateTime.test_compare_generic_nat(self)
numpy._core.tests.test_datetime.TestDateTime.test_corecursive_input(self)
numpy._core.tests.test_datetime.TestDateTime.test_creation_overflow(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_add(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_arange(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_arange_no_dtype(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_array_find_type(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_array_str(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_as_string(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_as_string_timezone(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_busday_offset(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_casting_rules(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_compare(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_compare_nat(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_conversions_byteorders(self,str_dtype,time_dtype)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_divide(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_dtype_creation(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_is_busday(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_like(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_minmax(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_multiply(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_nat_argsort_stability(self,size)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_nat_casting(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_no_subtract_reducelike(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_prefix_conversions(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction_timezone(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_string_conversion(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_subtract(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_timedelta_sort_nat(self,arr,expected,dtype)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_unary(self)
numpy._core.tests.test_datetime.TestDateTime.test_datetime_y2038(self)
numpy._core.tests.test_datetime.TestDateTime.test_days_creation(self)
numpy._core.tests.test_datetime.TestDateTime.test_days_to_pydate(self)
numpy._core.tests.test_datetime.TestDateTime.test_different_unit_comparison(self)
numpy._core.tests.test_datetime.TestDateTime.test_discovery_from_object_array(self,shape)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_as(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_day(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_fs(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_hour(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_minute(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_month(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_second(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_week(self)
numpy._core.tests.test_datetime.TestDateTime.test_divisor_conversion_year(self)
numpy._core.tests.test_datetime.TestDateTime.test_dtype_comparison(self)
numpy._core.tests.test_datetime.TestDateTime.test_dtype_promotion(self)
numpy._core.tests.test_datetime.TestDateTime.test_hours(self)
numpy._core.tests.test_datetime.TestDateTime.test_isfinite_isinf_isnan_units(self,unit,dstr)
numpy._core.tests.test_datetime.TestDateTime.test_isfinite_scalar(self)
numpy._core.tests.test_datetime.TestDateTime.test_isnat(self)
numpy._core.tests.test_datetime.TestDateTime.test_isnat_error(self)
numpy._core.tests.test_datetime.TestDateTime.test_limit_str_roundtrip(self,time_unit,sign)
numpy._core.tests.test_datetime.TestDateTime.test_limit_symmetry(self,time_unit)
numpy._core.tests.test_datetime.TestDateTime.test_month_truncation(self)
numpy._core.tests.test_datetime.TestDateTime.test_pickle(self)
numpy._core.tests.test_datetime.TestDateTime.test_prohibit_negative_datetime(self,unit)
numpy._core.tests.test_datetime.TestDateTime.test_pydatetime_creation(self)
numpy._core.tests.test_datetime.TestDateTime.test_pyobject_roundtrip(self)
numpy._core.tests.test_datetime.TestDateTime.test_setstate(self)
numpy._core.tests.test_datetime.TestDateTime.test_string(self)
numpy._core.tests.test_datetime.TestDateTime.test_string_parser_error_check(self)
numpy._core.tests.test_datetime.TestDateTime.test_string_parser_variants(self)
numpy._core.tests.test_datetime.TestDateTime.test_time_byteswapped_cast(self,time1,time2)
numpy._core.tests.test_datetime.TestDateTime.test_time_byteswapping(self,time_dtype)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_0_dim_object_array_conversion(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_arange(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_arange_no_dtype(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_array_str(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_correct_mean(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_divmod(self,op1,op2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_divmod_warnings(self,op1,op2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_error(self,val1,val2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_precision(self,val1,val2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_warnings(self,op1,op2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_floor_divide(self,op1,op2,exp)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_modulus(self,val1,val2,expected)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_modulus_div_by_zero(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_modulus_error(self,val1,val2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_modulus_type_resolution(self,val1,val2)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_nat_argsort_stability(self,size)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_nat_format(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_np_int_construction(self,unit)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_object_array_conversion(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction(self)
numpy._core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction_units(self)
numpy._core.tests.test_datetime.TestDateTimeData
numpy._core.tests.test_datetime.TestDateTimeData.test_basic(self)
numpy._core.tests.test_datetime.TestDateTimeData.test_bytes(self)
numpy._core.tests.test_datetime.TestDateTimeData.test_non_ascii(self)
numpy._core.tests.test_datetime.test_comparisons_return_not_implemented()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_item_selection.py----------------------------------------
A:numpy._core.tests.test_item_selection.ta->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t)
A:numpy._core.tests.test_item_selection.tresult->list(ta.T.copy())
A:numpy._core.tests.test_item_selection.res->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t).take(index_array, mode=mode, axis=1)
A:numpy._core.tests.test_item_selection.a->a.argpartition(np.array([], dtype=np.int16)).argpartition(np.array([], dtype=np.int16))
A:numpy._core.tests.test_item_selection.b->numpy.array([0, 1, 2, 3, 4, 5])
A:numpy._core.tests.test_item_selection.d->numpy.arange(10)
A:numpy._core.tests.test_item_selection.k->b'\xc3\xa4'.decode('UTF8')
A:numpy._core.tests.test_item_selection.a_original->numpy.array([0, 2, 4, 6, 8, 10])
A:numpy._core.tests.test_item_selection.vals->numpy.arange(1001).astype(dtype=dtype)
A:numpy._core.tests.test_item_selection.mask->numpy.random.randint(2, size=1000).astype(bool)
A:numpy._core.tests.test_item_selection.arr->numpy.zeros(1000, dtype=dtype)
A:numpy._core.tests.test_item_selection.zeros->numpy.zeros(1000, dtype=dtype).copy()
A:numpy._core.tests.test_item_selection.arr_copy->numpy.zeros(1000, dtype=dtype).copy()
A:numpy._core.tests.test_item_selection.indx_put->indx.copy()
A:numpy._core.tests.test_item_selection.untouched->numpy.ones(len(arr), dtype=bool)
numpy._core.tests.test_item_selection.TestPut
numpy._core.tests.test_item_selection.TestPut.test_empty(self,dtype,mode)
numpy._core.tests.test_item_selection.TestPut.test_simple(self,dtype,mode)
numpy._core.tests.test_item_selection.TestPutMask
numpy._core.tests.test_item_selection.TestPutMask.test_empty(self,dtype,mode)
numpy._core.tests.test_item_selection.TestPutMask.test_simple(self,dtype)
numpy._core.tests.test_item_selection.TestTake
numpy._core.tests.test_item_selection.TestTake.test_empty_argpartition(self)
numpy._core.tests.test_item_selection.TestTake.test_empty_partition(self)
numpy._core.tests.test_item_selection.TestTake.test_refcounting(self)
numpy._core.tests.test_item_selection.TestTake.test_simple(self)
numpy._core.tests.test_item_selection.TestTake.test_unicode_mode(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_arrayprint.py----------------------------------------
A:numpy._core.tests.test_arrayprint.x->numpy.array(['é'], dtype=object)
A:numpy._core.tests.test_arrayprint.x1d->numpy.array([1, 2]).view(sub)
A:numpy._core.tests.test_arrayprint.x2d->numpy.array([[1, 2], [3, 4]]).view(sub)
A:numpy._core.tests.test_arrayprint.xstruct->numpy.ones((2, 2), dtype=[('a', '<i4')]).view(sub)
A:numpy._core.tests.test_arrayprint.obj->numpy.asarray(inp).view(cls)
A:numpy._core.tests.test_arrayprint.ret->super().__getitem__(ind)
A:numpy._core.tests.test_arrayprint.y->numpy.array([0.2918820979355541, 0.5064172631089138, 0.2848750619642916, 0.4342965294660567, 0.7326538397312751, 0.3459503329096204, 0.0862072768214508, 0.39112753029631175], dtype=np.float64)
A:numpy._core.tests.test_arrayprint.x[()]->sub(None)
A:numpy._core.tests.test_arrayprint.result->numpy.array2string(a, max_line_width=len(repr(text)) * 2 + 3)
A:numpy._core.tests.test_arrayprint.dc->numpy.arange(5).view(DuckCounter)
A:numpy._core.tests.test_arrayprint.arr0d->numpy.array(None)
A:numpy._core.tests.test_arrayprint.arr1d->numpy.array([None, None])
A:numpy._core.tests.test_arrayprint.first->numpy.array(None)
A:numpy._core.tests.test_arrayprint.second->numpy.array(None)
A:numpy._core.tests.test_arrayprint.no_fields->numpy.dtype([])
A:numpy._core.tests.test_arrayprint.arr_no_fields->numpy.empty(4, dtype=no_fields)
A:numpy._core.tests.test_arrayprint.a->numpy.arange(27).reshape((3, 3, 3))
A:numpy._core.tests.test_arrayprint.s->str(np.array([2.0]) / 3)
A:numpy._core.tests.test_arrayprint.dt->numpy.dtype([('name', np.str_, 16), ('grades', np.float64, (2,))])
A:numpy._core.tests.test_arrayprint.A->numpy.arange(5 * 2 * 3, dtype='<i8').view([('i', '<i8', (5, 2, 3))])
A:numpy._core.tests.test_arrayprint.struct_int->numpy.array([([1, -1],), ([123, 1],)], dtype=[('B', 'i4', 2)])
A:numpy._core.tests.test_arrayprint.struct_2dint->numpy.array([([[0, 1], [2, 3]],), ([[12, 0], [0, 0]],)], dtype=[('B', 'i4', (2, 2))])
A:numpy._core.tests.test_arrayprint.array_scalar->numpy.array((1.0, 2.1234567890123457, 3.0), dtype='f8,f8,f8')
A:numpy._core.tests.test_arrayprint.arr->numpy.zeros(3, int)
A:numpy._core.tests.test_arrayprint.B->numpy.ones(2002, dtype='>i8').view([('i', '>i8', (2, 1001))])
A:numpy._core.tests.test_arrayprint.C->numpy.arange(22, dtype='<i8').reshape(2, 11).view([('i1', '<i8'), ('i10', '<i8', (10,))])
A:numpy._core.tests.test_arrayprint.a[0, 0]->numpy.eye(2)
A:numpy._core.tests.test_arrayprint.a[0, 1]->numpy.eye(3)
A:numpy._core.tests.test_arrayprint.a[1, 1]->numpy.ones((3, 1))
A:numpy._core.tests.test_arrayprint.text->text.item().item()
A:numpy._core.tests.test_arrayprint.expected_repr->'[{0!r} {0!r}\n {0!r}]'.format(text)
A:numpy._core.tests.test_arrayprint.r1->sys.getrefcount(a)
A:numpy._core.tests.test_arrayprint.r2->sys.getrefcount(a)
A:numpy._core.tests.test_arrayprint.self.oldopts->numpy.get_printoptions()
A:numpy._core.tests.test_arrayprint.z->numpy.array([np.inf, 1.1234, -1e+120])
A:numpy._core.tests.test_arrayprint.w->numpy.array(['1e{}'.format(i) for i in range(25)], dtype=np.float64)
A:numpy._core.tests.test_arrayprint.b->numpy.zeros((3, 3, 1, 1))
A:numpy._core.tests.test_arrayprint.c->numpy.array([1.0 + 1j, 1.123456789 + 1.123456789j], dtype='c16')
A:numpy._core.tests.test_arrayprint.wp->numpy.array([12.34, 100.0, 1e+123])
A:numpy._core.tests.test_arrayprint.native_dtype->numpy.dtype(native)
A:numpy._core.tests.test_arrayprint.non_native_dtype->numpy.dtype(native).newbyteorder()
A:numpy._core.tests.test_arrayprint.non_native_repr->repr(np.array([1], non_native_dtype))
A:numpy._core.tests.test_arrayprint.native_repr->repr(np.array([1], native_dtype))
A:numpy._core.tests.test_arrayprint.opts->numpy.get_printoptions()
A:numpy._core.tests.test_arrayprint.saved_opts->ctx.copy()
A:numpy._core.tests.test_arrayprint.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_arrayprint.string->str(scalar)
A:numpy._core.tests.test_arrayprint.repr_string->str(scalar).strip('()')
A:numpy._core.tests.test_arrayprint.representation->repr(scalar)
A:numpy._core.tests.test_arrayprint.scalar->numpy.void((1.0, 2.0), dtype=[('f0', '<f8'), ('f1', '>f4')])
numpy._core.tests.test_arrayprint.TestArray2String
numpy._core.tests.test_arrayprint.TestArray2String.test_any_text(self,text)
numpy._core.tests.test_arrayprint.TestArray2String.test_basic(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_edgeitems_kwarg(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_format_function(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_linewidth(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_multiline_repr(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_nested_array_repr(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_refcount(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_structure_format_float(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_structure_format_int(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_structure_format_mixed(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_summarize_1d(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_summarize_2d(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_summarize_structure(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_unexpected_kwarg(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_unstructured_void_repr(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_wide_element(self)
numpy._core.tests.test_arrayprint.TestArray2String.test_with_sign(self)
numpy._core.tests.test_arrayprint.TestArrayRepr
numpy._core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_containing_list(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_fieldless_structured(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_nan_inf(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_object_subclass(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_self_containing(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_subclass(self)
numpy._core.tests.test_arrayprint.TestArrayRepr.test_void_scalar_recursion(self)
numpy._core.tests.test_arrayprint.TestComplexArray
numpy._core.tests.test_arrayprint.TestComplexArray.test_str(self)
numpy._core.tests.test_arrayprint.TestContextManager
numpy._core.tests.test_arrayprint.TestContextManager.test_ctx_mgr(self)
numpy._core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_as_smth(self)
numpy._core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_exceptions(self)
numpy._core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_restores(self)
numpy._core.tests.test_arrayprint.TestPrintOptions
numpy._core.tests.test_arrayprint.TestPrintOptions.setup_method(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.teardown_method(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_0d_arrays(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_bad_args(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_basic(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_bool_spacing(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_dtype_endianness_repr(self,native)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_dtype_linewidth_wrapping(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_edgeitems(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_edgeitems_structured(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_float_overflow_nowarn(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_float_spacing(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_floatmode(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_formatter(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_formatter_reset(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_legacy_mode_scalars(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_legacy_stray_comma(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_linewidth_repr(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_linewidth_str(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_precision_zero(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing(self)
numpy._core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing_structured(self)
numpy._core.tests.test_arrayprint.test_scalar_repr_numbers(dtype,value)
numpy._core.tests.test_arrayprint.test_scalar_repr_special(scalar,legacy_repr,representation)
numpy._core.tests.test_arrayprint.test_scalar_void_float_str()
numpy._core.tests.test_arrayprint.test_unicode_object_array()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalarinherit.py----------------------------------------
A:numpy._core.tests.test_scalarinherit.x->B1(1.0)
A:numpy._core.tests.test_scalarinherit.y->C0(2.0)
A:numpy._core.tests.test_scalarinherit.z->D(3.0)
A:numpy._core.tests.test_scalarinherit.np_s->numpy.bytes_('abc')
A:numpy._core.tests.test_scalarinherit.np_u->numpy.str_('abc')
numpy._core.tests.test_scalarinherit.A
numpy._core.tests.test_scalarinherit.B(A,np.float64)
numpy._core.tests.test_scalarinherit.B0(np.float64,A)
numpy._core.tests.test_scalarinherit.B1(np.float64,HasNew)
numpy._core.tests.test_scalarinherit.C(B)
numpy._core.tests.test_scalarinherit.C0(B0)
numpy._core.tests.test_scalarinherit.D(C,B)
numpy._core.tests.test_scalarinherit.HasNew(cls,*args,**kwargs)
numpy._core.tests.test_scalarinherit.HasNew.__new__(cls,*args,**kwargs)
numpy._core.tests.test_scalarinherit.TestCharacter
numpy._core.tests.test_scalarinherit.TestCharacter.test_char_radd(self)
numpy._core.tests.test_scalarinherit.TestCharacter.test_char_repeat(self)
numpy._core.tests.test_scalarinherit.TestInherit
numpy._core.tests.test_scalarinherit.TestInherit.test_gh_15395(self)
numpy._core.tests.test_scalarinherit.TestInherit.test_init(self)
numpy._core.tests.test_scalarinherit.TestInherit.test_init2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_unicode.py----------------------------------------
A:numpy._core.tests.test_unicode.charmax->max([ord(c) for c in arr])
A:numpy._core.tests.test_unicode.v->memoryview(arr)
A:numpy._core.tests.test_unicode.str_arr->numpy.array(['1234', '1234\x00\x00'], dtype='S')
A:numpy._core.tests.test_unicode.uni_arr1->numpy.array(['1234', '1234\x00\x00'], dtype='S').astype('>U')
A:numpy._core.tests.test_unicode.uni_arr2->numpy.array(['1234', '1234\x00\x00'], dtype='S').astype('<U')
A:numpy._core.tests.test_unicode.ua->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen)
A:numpy._core.tests.test_unicode.ua2->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).astype(dtype=longer_type)
A:numpy._core.tests.test_unicode.ua3->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).astype(dtype=longer_type).astype(dtype=ua.dtype)
A:numpy._core.tests.test_unicode.test1->numpy.array([self.ucs_value * self.ulen] * 2, dtype='U%s' % self.ulen)
A:numpy._core.tests.test_unicode.longer_type->numpy.dtype('U%s' % (self.ulen + 1)).newbyteorder()
numpy._core.tests.test_unicode.AssignValues
numpy._core.tests.test_unicode.AssignValues.content_check(self,ua,ua_scalar,nbytes)
numpy._core.tests.test_unicode.AssignValues.test_values0D(self)
numpy._core.tests.test_unicode.AssignValues.test_valuesMD(self)
numpy._core.tests.test_unicode.AssignValues.test_valuesSD(self)
numpy._core.tests.test_unicode.ByteorderValues
numpy._core.tests.test_unicode.ByteorderValues.test_values0D(self)
numpy._core.tests.test_unicode.ByteorderValues.test_valuesMD(self)
numpy._core.tests.test_unicode.ByteorderValues.test_valuesSD(self)
numpy._core.tests.test_unicode.ByteorderValues.test_values_cast(self)
numpy._core.tests.test_unicode.ByteorderValues.test_values_updowncast(self)
numpy._core.tests.test_unicode.CreateValues
numpy._core.tests.test_unicode.CreateValues.content_check(self,ua,ua_scalar,nbytes)
numpy._core.tests.test_unicode.CreateValues.test_values0D(self)
numpy._core.tests.test_unicode.CreateValues.test_valuesMD(self)
numpy._core.tests.test_unicode.CreateValues.test_valuesSD(self)
numpy._core.tests.test_unicode.CreateZeros
numpy._core.tests.test_unicode.CreateZeros.content_check(self,ua,ua_scalar,nbytes)
numpy._core.tests.test_unicode.CreateZeros.test_zeros0D(self)
numpy._core.tests.test_unicode.CreateZeros.test_zerosMD(self)
numpy._core.tests.test_unicode.CreateZeros.test_zerosSD(self)
numpy._core.tests.test_unicode.TestAssignValues_1009_UCS2(AssignValues)
numpy._core.tests.test_unicode.TestAssignValues_1009_UCS4(AssignValues)
numpy._core.tests.test_unicode.TestAssignValues_1_UCS2(AssignValues)
numpy._core.tests.test_unicode.TestAssignValues_1_UCS4(AssignValues)
numpy._core.tests.test_unicode.TestAssignValues_2_UCS2(AssignValues)
numpy._core.tests.test_unicode.TestAssignValues_2_UCS4(AssignValues)
numpy._core.tests.test_unicode.TestByteorder_1009_UCS2(ByteorderValues)
numpy._core.tests.test_unicode.TestByteorder_1009_UCS4(ByteorderValues)
numpy._core.tests.test_unicode.TestByteorder_1_UCS2(ByteorderValues)
numpy._core.tests.test_unicode.TestByteorder_1_UCS4(ByteorderValues)
numpy._core.tests.test_unicode.TestByteorder_2_UCS2(ByteorderValues)
numpy._core.tests.test_unicode.TestByteorder_2_UCS4(ByteorderValues)
numpy._core.tests.test_unicode.TestCreateValues_1009_UCS2(CreateValues)
numpy._core.tests.test_unicode.TestCreateValues_1009_UCS4(CreateValues)
numpy._core.tests.test_unicode.TestCreateValues_1_UCS2(CreateValues)
numpy._core.tests.test_unicode.TestCreateValues_1_UCS4(CreateValues)
numpy._core.tests.test_unicode.TestCreateValues_2_UCS2(CreateValues)
numpy._core.tests.test_unicode.TestCreateValues_2_UCS4(CreateValues)
numpy._core.tests.test_unicode.TestCreateZeros_1(CreateZeros)
numpy._core.tests.test_unicode.TestCreateZeros_1009(CreateZeros)
numpy._core.tests.test_unicode.TestCreateZeros_2(CreateZeros)
numpy._core.tests.test_unicode.buffer_length(arr)
numpy._core.tests.test_unicode.test_string_cast()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_casting_floatingpoint_errors.py----------------------------------------
A:numpy._core.tests.test_casting_floatingpoint_errors.spacing->numpy.spacing(np.nextafter(np.finfo('f8').max, 0))
A:numpy._core.tests.test_casting_floatingpoint_errors.from_dt->numpy.dtype(from_dt)
A:numpy._core.tests.test_casting_floatingpoint_errors.from_val->numpy.dtype(from_dt).type(value)
A:numpy._core.tests.test_casting_floatingpoint_errors.arr->numpy.empty((3,), dtype=dtype)
A:numpy._core.tests.test_casting_floatingpoint_errors.arr[[True, False, True]]->numpy.array([value, value])
A:numpy._core.tests.test_casting_floatingpoint_errors.values->numpy.array([value, value, value])
A:numpy._core.tests.test_casting_floatingpoint_errors.dtype->numpy.dtype(dtype)
numpy._core.tests.test_casting_floatingpoint_errors.check_operations(dtype,value)
numpy._core.tests.test_casting_floatingpoint_errors.test_floatingpoint_errors_casting(dtype,value)
numpy._core.tests.test_casting_floatingpoint_errors.values_and_dtypes()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_nditer.py----------------------------------------
A:numpy._core.tests.test_nditer.a->numpy.arange(6, dtype='f4')
A:numpy._core.tests.test_nditer.dt->numpy.dtype('f4')
A:numpy._core.tests.test_nditer.rc_a->sys.getrefcount(a)
A:numpy._core.tests.test_nditer.rc_dt->sys.getrefcount(dt)
A:numpy._core.tests.test_nditer.it->numpy.nditer((arr1, arr2), op_dtypes=['d', 'i4'], casting='unsafe', flags=['reduce_ok', 'buffered'], op_flags=[['readonly'], ['readwrite']])
A:numpy._core.tests.test_nditer.rc2_a->sys.getrefcount(a)
A:numpy._core.tests.test_nditer.rc2_dt->sys.getrefcount(dt)
A:numpy._core.tests.test_nditer.it2->nditer([a, None], ['reduce_ok', 'external_loop', 'buffered', 'delay_bufalloc'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]], buffersize=10)
A:numpy._core.tests.test_nditer.dirs_index[bit]->slice(None, None, -1)
A:numpy._core.tests.test_nditer.dirs_index->tuple(dirs_index)
A:numpy._core.tests.test_nditer.i->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt)
A:numpy._core.tests.test_nditer.start_count->sys.getrefcount(index)
A:numpy._core.tests.test_nditer.end_count->sys.getrefcount(index)
A:numpy._core.tests.test_nditer.size->numpy.prod(shape)
A:numpy._core.tests.test_nditer.a3d->arange(24).reshape(2, 3, 4)
A:numpy._core.tests.test_nditer.msg->str(e)
A:numpy._core.tests.test_nditer.au->au.view(au.dtype.newbyteorder()).view(au.dtype.newbyteorder())
A:numpy._core.tests.test_nditer.a[:]->numpy.arange(16, dtype='i4')
A:numpy._core.tests.test_nditer.rc->sys.getrefcount(a[0])
A:numpy._core.tests.test_nditer.x->numpy.ones((7, 13, 8), np.int8)[4:6, 1:11:6, 1:5].transpose(1, 2, 0)
A:numpy._core.tests.test_nditer.b->numpy.zeros((3,))
A:numpy._core.tests.test_nditer.j->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt).copy()
A:numpy._core.tests.test_nditer.arr->numpy.full(int(ncu.BUFSIZE * 2.5), value).astype(in_dtype)
A:numpy._core.tests.test_nditer.expected->"\n    ------ BEGIN ITERATOR DUMP ------\n    | Iterator Address:\n    | ItFlags: BUFFER REDUCE REUSE_REDUCE_LOOPS\n    | NDim: 2\n    | NOp: 2\n    | IterSize: 50\n    | IterStart: 0\n    | IterEnd: 50\n    | IterIndex: 0\n    | Iterator SizeOf:\n    | BufferData SizeOf:\n    | AxisData SizeOf:\n    |\n    | Perm: 0 1\n    | DTypes:\n    | DTypes: dtype('float64') dtype('int32')\n    | InitDataPtrs:\n    | BaseOffsets: 0 0\n    | Operands:\n    | Operand DTypes: dtype('int64') dtype('float64')\n    | OpItFlags:\n    |   Flags[0]: READ CAST ALIGNED\n    |   Flags[1]: READ WRITE CAST ALIGNED REDUCE\n    |\n    | BufferData:\n    |   BufferSize: 50\n    |   Size: 5\n    |   BufIterEnd: 5\n    |   REDUCE Pos: 0\n    |   REDUCE OuterSize: 10\n    |   REDUCE OuterDim: 1\n    |   Strides: 8 4\n    |   Ptrs:\n    |   REDUCE Outer Strides: 40 0\n    |   REDUCE Outer Ptrs:\n    |   ReadTransferFn:\n    |   ReadTransferData:\n    |   WriteTransferFn:\n    |   WriteTransferData:\n    |   Buffers:\n    |\n    | AxisData[0]:\n    |   Shape: 5\n    |   Index: 0\n    |   Strides: 16 8\n    |   Ptrs:\n    | AxisData[1]:\n    |   Shape: 10\n    |   Index: 0\n    |   Strides: 80 0\n    |   Ptrs:\n    ------- END ITERATOR DUMP -------\n    ".strip().splitlines()
A:numpy._core.tests.test_nditer.it_copy->numpy.nditer((arr1, arr2), op_dtypes=['d', 'i4'], casting='unsafe', flags=['reduce_ok', 'buffered'], op_flags=[['readonly'], ['readwrite']]).copy()
A:numpy._core.tests.test_nditer.res->res.strip().splitlines().strip().splitlines()
A:numpy._core.tests.test_nditer.res_copy->next(it_copy)
A:numpy._core.tests.test_nditer.in_dtype->numpy.dtype([('a', np.dtype('O,O')), ('b', np.dtype('5O,3O,(1,)O,(1,)i,(1,)O'))])
A:numpy._core.tests.test_nditer.out_dtype->numpy.dtype([('a', np.dtype('O')), ('b', np.dtype('O,3i,4O,4O,4i'))])
A:numpy._core.tests.test_nditer.res1->next(it)
A:numpy._core.tests.test_nditer.res2->next(it_copy)
A:numpy._core.tests.test_nditer.a_fort->numpy.arange(6, dtype='f4').ravel(order='F')
A:numpy._core.tests.test_nditer.val->numpy.concatenate((val, x))
A:numpy._core.tests.test_nditer._tmp->_tmp.view(_tmp.dtype.newbyteorder()).byteswap().view(_tmp.dtype.newbyteorder()).byteswap()
A:numpy._core.tests.test_nditer.simple_arr->numpy.array([1, 2], dtype='i,i')
A:numpy._core.tests.test_nditer.buf->next(it)
A:numpy._core.tests.test_nditer.code->textwrap.dedent('\n        import numpy as np\n\n        it = np.nditer((np.array(1, dtype="i"),), op_dtypes=["S1"],\n                       op_flags=["writeonly"], casting="unsafe", flags=["buffered"])\n        buf = next(it)\n        buf[...] = "a"\n        del buf, it  # Flushing only happens during deallocate right now.\n        ')
A:numpy._core.tests.test_nditer.a['a']->numpy.arange(6 * 2 * 3).reshape(6, 2, 3)
A:numpy._core.tests.test_nditer.a['a'][:, 0, 0]->numpy.arange(6)
A:numpy._core.tests.test_nditer.a['a'][:, 0, 0, 0]->numpy.arange(6)
A:numpy._core.tests.test_nditer.nditer2->numpy.nditer([arr.copy(), None], op_axes=op_axes, flags=flags, op_flags=op_flags, op_dtypes=op_dtypes)
A:numpy._core.tests.test_nditer.nditer1->numpy.nditer([arr, None], op_axes=op_axes, flags=flags, op_flags=op_flags, buffersize=bufsize, op_dtypes=op_dtypes)
A:numpy._core.tests.test_nditer.c->numpy.arange(12).reshape(3, 4)
A:numpy._core.tests.test_nditer.(i, j)->numpy.nested_iters(a, [[0], [1]], flags=['buffered'], op_flags=['readwrite'], casting='same_kind', op_dtypes='f8')
A:numpy._core.tests.test_nditer.(i, j, k)->numpy.nested_iters(a, [[2, 0], [], [1]])
A:numpy._core.tests.test_nditer.it1->nditer([a, None], ['reduce_ok', 'external_loop'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]])
A:numpy._core.tests.test_nditer.x[...]->numpy.arange(x.size).reshape(x.shape)
A:numpy._core.tests.test_nditer.y_base->numpy.arange(4 * 4, dtype=np.int8).reshape(4, 4)
A:numpy._core.tests.test_nditer.y_base_copy->numpy.arange(4 * 4, dtype=np.int8).reshape(4, 4).copy()
A:numpy._core.tests.test_nditer.m->numpy.array([[True, True, False], [False, True, False]])
A:numpy._core.tests.test_nditer.m2->numpy.array([True, True, False])
A:numpy._core.tests.test_nditer.m3->numpy.array([0, 1, 1], dtype='u1')
A:numpy._core.tests.test_nditer.mbad1->numpy.array([0, 1, 1], dtype='i1')
A:numpy._core.tests.test_nditer.mbad2->numpy.array([0, 1, 1], dtype='f4')
A:numpy._core.tests.test_nditer.msk->numpy.empty(shape, dtype=bool)
A:numpy._core.tests.test_nditer.original->numpy.full(int(ncu.BUFSIZE * 2.5), value).astype(in_dtype).copy()
A:numpy._core.tests.test_nditer.mask->numpy.random.randint(0, 2, size=10000).astype(bool)
A:numpy._core.tests.test_nditer.singleton->object()
A:numpy._core.tests.test_nditer.count->sys.getrefcount(value)
A:numpy._core.tests.test_nditer.vals->next(i)
A:numpy._core.tests.test_nditer.oarr->numpy.full(int(ncu.BUFSIZE * 2.5), value).astype(in_dtype).astype(object)
A:numpy._core.tests.test_nditer.out->numpy.ones(8000, dtype=np.intp)
A:numpy._core.tests.test_nditer.arrays->tuple(arrays)
A:numpy._core.tests.test_nditer.z->add_context(range(5), range(5))
A:numpy._core.tests.test_nditer.arr2->numpy.arange(5.0)
numpy._core.tests.test_nditer.TestIterNested
numpy._core.tests.test_nditer.TestIterNested.test_0d(self)
numpy._core.tests.test_nditer.TestIterNested.test_basic(self)
numpy._core.tests.test_nditer.TestIterNested.test_broadcast(self)
numpy._core.tests.test_nditer.TestIterNested.test_dtype_buffered(self)
numpy._core.tests.test_nditer.TestIterNested.test_dtype_copy(self)
numpy._core.tests.test_nditer.TestIterNested.test_flip_axes(self)
numpy._core.tests.test_nditer.TestIterNested.test_iter_nested_iters_dtype_buffered(self)
numpy._core.tests.test_nditer.TestIterNested.test_reorder(self)
numpy._core.tests.test_nditer._is_buffered(iterator)
numpy._core.tests.test_nditer.iter_indices(i)
numpy._core.tests.test_nditer.iter_iterindices(i)
numpy._core.tests.test_nditer.iter_multi_index(i)
numpy._core.tests.test_nditer.test_0d_iter()
numpy._core.tests.test_nditer.test_all_allocated()
numpy._core.tests.test_nditer.test_buffered_cast_error_paths()
numpy._core.tests.test_nditer.test_buffered_cast_error_paths_unraisable()
numpy._core.tests.test_nditer.test_close_equivalent()
numpy._core.tests.test_nditer.test_close_parameters()
numpy._core.tests.test_nditer.test_close_raises()
numpy._core.tests.test_nditer.test_debug_print(capfd)
numpy._core.tests.test_nditer.test_iter_allocate_output_buffered_readwrite()
numpy._core.tests.test_nditer.test_iter_allocate_output_errors()
numpy._core.tests.test_nditer.test_iter_allocate_output_itorder()
numpy._core.tests.test_nditer.test_iter_allocate_output_opaxes()
numpy._core.tests.test_nditer.test_iter_allocate_output_simple()
numpy._core.tests.test_nditer.test_iter_allocate_output_subtype()
numpy._core.tests.test_nditer.test_iter_allocate_output_types_byte_order()
numpy._core.tests.test_nditer.test_iter_allocate_output_types_promotion()
numpy._core.tests.test_nditer.test_iter_allocate_output_types_scalar()
numpy._core.tests.test_nditer.test_iter_allocated_array_dtypes()
numpy._core.tests.test_nditer.test_iter_array_cast()
numpy._core.tests.test_nditer.test_iter_array_cast_errors()
numpy._core.tests.test_nditer.test_iter_assign_mapping()
numpy._core.tests.test_nditer.test_iter_best_order()
numpy._core.tests.test_nditer.test_iter_best_order_c_index_1d()
numpy._core.tests.test_nditer.test_iter_best_order_c_index_2d()
numpy._core.tests.test_nditer.test_iter_best_order_c_index_3d()
numpy._core.tests.test_nditer.test_iter_best_order_f_index_1d()
numpy._core.tests.test_nditer.test_iter_best_order_f_index_2d()
numpy._core.tests.test_nditer.test_iter_best_order_f_index_3d()
numpy._core.tests.test_nditer.test_iter_best_order_multi_index_1d()
numpy._core.tests.test_nditer.test_iter_best_order_multi_index_2d()
numpy._core.tests.test_nditer.test_iter_best_order_multi_index_3d()
numpy._core.tests.test_nditer.test_iter_broadcasting()
numpy._core.tests.test_nditer.test_iter_broadcasting_errors()
numpy._core.tests.test_nditer.test_iter_buffered_cast_byteswapped()
numpy._core.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex()
numpy._core.tests.test_nditer.test_iter_buffered_cast_simple()
numpy._core.tests.test_nditer.test_iter_buffered_cast_structured_type()
numpy._core.tests.test_nditer.test_iter_buffered_cast_structured_type_failure_with_cleanup()
numpy._core.tests.test_nditer.test_iter_buffered_cast_subarray()
numpy._core.tests.test_nditer.test_iter_buffered_reduce_reuse()
numpy._core.tests.test_nditer.test_iter_buffering()
numpy._core.tests.test_nditer.test_iter_buffering_badwriteback()
numpy._core.tests.test_nditer.test_iter_buffering_delayed_alloc()
numpy._core.tests.test_nditer.test_iter_buffering_growinner()
numpy._core.tests.test_nditer.test_iter_buffering_reduction()
numpy._core.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops()
numpy._core.tests.test_nditer.test_iter_buffering_string()
numpy._core.tests.test_nditer.test_iter_c_or_f_order()
numpy._core.tests.test_nditer.test_iter_c_order()
numpy._core.tests.test_nditer.test_iter_common_dtype()
numpy._core.tests.test_nditer.test_iter_copy()
numpy._core.tests.test_nditer.test_iter_copy_casts(dtype,loop_dtype)
numpy._core.tests.test_nditer.test_iter_copy_casts_structured()
numpy._core.tests.test_nditer.test_iter_copy_casts_structured2()
numpy._core.tests.test_nditer.test_iter_copy_if_overlap()
numpy._core.tests.test_nditer.test_iter_dim_coalescing()
numpy._core.tests.test_nditer.test_iter_element_deletion()
numpy._core.tests.test_nditer.test_iter_f_order()
numpy._core.tests.test_nditer.test_iter_flags_errors()
numpy._core.tests.test_nditer.test_iter_iterindex()
numpy._core.tests.test_nditer.test_iter_iterrange()
numpy._core.tests.test_nditer.test_iter_itershape()
numpy._core.tests.test_nditer.test_iter_nbo_align_contig()
numpy._core.tests.test_nditer.test_iter_no_broadcast()
numpy._core.tests.test_nditer.test_iter_no_inner_dim_coalescing()
numpy._core.tests.test_nditer.test_iter_no_inner_full_coalesce()
numpy._core.tests.test_nditer.test_iter_non_writable_attribute_deletion()
numpy._core.tests.test_nditer.test_iter_object_arrays_basic()
numpy._core.tests.test_nditer.test_iter_object_arrays_conversions()
numpy._core.tests.test_nditer.test_iter_op_axes()
numpy._core.tests.test_nditer.test_iter_op_axes_errors()
numpy._core.tests.test_nditer.test_iter_reduction()
numpy._core.tests.test_nditer.test_iter_reduction_error()
numpy._core.tests.test_nditer.test_iter_refcount()
numpy._core.tests.test_nditer.test_iter_remove_axis()
numpy._core.tests.test_nditer.test_iter_remove_multi_index_inner_loop()
numpy._core.tests.test_nditer.test_iter_scalar_cast()
numpy._core.tests.test_nditer.test_iter_scalar_cast_errors()
numpy._core.tests.test_nditer.test_iter_slice()
numpy._core.tests.test_nditer.test_iter_too_large()
numpy._core.tests.test_nditer.test_iter_too_large_with_multiindex()
numpy._core.tests.test_nditer.test_iter_writable_attribute_deletion()
numpy._core.tests.test_nditer.test_iter_write_buffering()
numpy._core.tests.test_nditer.test_iter_writemasked(a)
numpy._core.tests.test_nditer.test_iter_writemasked_badinput()
numpy._core.tests.test_nditer.test_iter_writemasked_broadcast_error(mask,mask_axes)
numpy._core.tests.test_nditer.test_iter_writemasked_decref()
numpy._core.tests.test_nditer.test_nditer_multi_index_set()
numpy._core.tests.test_nditer.test_nditer_multi_index_set_refcount()
numpy._core.tests.test_nditer.test_object_iter_cleanup()
numpy._core.tests.test_nditer.test_object_iter_cleanup_large_reduce(arr)
numpy._core.tests.test_nditer.test_object_iter_cleanup_reduce()
numpy._core.tests.test_nditer.test_partial_iteration_cleanup(in_dtype,buf_dtype,steps)
numpy._core.tests.test_nditer.test_partial_iteration_error(in_dtype,buf_dtype)
numpy._core.tests.test_nditer.test_warn_noclose()
numpy._core.tests.test_nditer.test_writebacks()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_overrides.py----------------------------------------
A:numpy._core.tests.test_overrides.array->numpy.array(1).view(MyArray)
A:numpy._core.tests.test_overrides.args->_get_implementing_args([array, other])
A:numpy._core.tests.test_overrides.override_sub->numpy.array(1).view(MyArray).view(OverrideSub)
A:numpy._core.tests.test_overrides.no_override_sub->numpy.array(1).view(MyArray).view(NoOverrideSub)
A:numpy._core.tests.test_overrides.other->Other()
A:numpy._core.tests.test_overrides.subarray->numpy.array(1).view(OverrideSub)
A:numpy._core.tests.test_overrides.a->A()
A:numpy._core.tests.test_overrides.b->B()
A:numpy._core.tests.test_overrides.c->C()
A:numpy._core.tests.test_overrides.d->D()
A:numpy._core.tests.test_overrides.namespace->dict(__array_function__=_return_not_implemented)
A:numpy._core.tests.test_overrides.actual->_get_implementing_args(relevant_args[:64])
A:numpy._core.tests.test_overrides.result->numpy.sum(proxy)
A:numpy._core.tests.test_overrides.expected->np_func(*like_args_exp, **kwargs)
A:numpy._core.tests.test_overrides.roundtripped->pickle.loads(pickle.dumps(dispatched_one_arg, protocol=proto))
A:numpy._core.tests.test_overrides.original->MyArray()
A:numpy._core.tests.test_overrides.(obj, func, types, args, kwargs)->dispatched_one_arg(original)
A:numpy._core.tests.test_overrides.duck_array->DuckArray()
A:numpy._core.tests.test_overrides.(MyArray, implements)->_new_duck_type_and_implements()
A:numpy._core.tests.test_overrides.func->getattr(np, name)
A:numpy._core.tests.test_overrides.error->TypeError(value)
A:numpy._core.tests.test_overrides.func_with_like->array_function_dispatch()(func)
A:numpy._core.tests.test_overrides.signature->inspect.signature(np.sum)
A:numpy._core.tests.test_overrides.proxy->ArrayProxy(mock.Mock(spec=ArrayProxy))
A:numpy._core.tests.test_overrides.my_func->getattr(self.MyArray, function)
A:numpy._core.tests.test_overrides.ref->self.MyArray.array()
A:numpy._core.tests.test_overrides.array_like->np_func(*like_args, **kwargs, like=None)
A:numpy._core.tests.test_overrides.np_func->getattr(np, function)
A:numpy._core.tests.test_overrides.like_args->tuple((a() if callable(a) else a for a in args))
A:numpy._core.tests.test_overrides.np_args->tuple((a() if callable(a) else a for a in args))
A:numpy._core.tests.test_overrides.np_arr->np_func(*np_args, **kwargs)
A:numpy._core.tests.test_overrides.data->numpy.random.random(5)
A:numpy._core.tests.test_overrides.fname->os.path.join(tmpdir, 'testfile')
A:numpy._core.tests.test_overrides.np_res->numpy.fromfile(fname, like=ref)
A:numpy._core.tests.test_overrides.like_args_exp->tuple((a() if callable(a) else a for a in args))
A:numpy._core.tests.test_overrides.func1->staticmethod(np.mean)
A:numpy._core.tests.test_overrides.func3->classmethod(np.mean)
A:numpy._core.tests.test_overrides.m->MyClass()
A:numpy._core.tests.test_overrides.bound->numpy.mean.__get__(MyClass)
numpy._core.tests.test_overrides.TestArrayFunctionDispatch
numpy._core.tests.test_overrides.TestArrayFunctionDispatch.test_interface(self)
numpy._core.tests.test_overrides.TestArrayFunctionDispatch.test_name_and_docstring(self)
numpy._core.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented(self)
numpy._core.tests.test_overrides.TestArrayFunctionDispatch.test_pickle(self)
numpy._core.tests.test_overrides.TestArrayFunctionDispatch.test_where_dispatch(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_bad_like_passing(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_bad_like_sig(self,func)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_dispatcher_error(self,value)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_not_implemented(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_one_arg(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_properties(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_signature_error_message(self)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_signature_error_message_simple(self,name)
numpy._core.tests.test_overrides.TestArrayFunctionImplementation.test_too_many_args(self)
numpy._core.tests.test_overrides.TestArrayLike
numpy._core.tests.test_overrides.TestArrayLike.add_method(self,name,arr_class,enable_value_error=False)
numpy._core.tests.test_overrides.TestArrayLike.func_args(*args,**kwargs)
numpy._core.tests.test_overrides.TestArrayLike.setup_method(self)
numpy._core.tests.test_overrides.TestArrayLike.test_array_like(self,function,args,kwargs,numpy_ref)
numpy._core.tests.test_overrides.TestArrayLike.test_array_like_fromfile(self,numpy_ref)
numpy._core.tests.test_overrides.TestArrayLike.test_array_like_not_implemented(self)
numpy._core.tests.test_overrides.TestArrayLike.test_exception_handling(self)
numpy._core.tests.test_overrides.TestArrayLike.test_like_as_none(self,function,args,kwargs)
numpy._core.tests.test_overrides.TestArrayLike.test_no_array_function_like(self,function,args,kwargs,ref)
numpy._core.tests.test_overrides.TestGetImplementingArgs
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays(self)
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_ndarray(self)
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_and_duck_array(self)
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array(self)
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses(self)
numpy._core.tests.test_overrides.TestGetImplementingArgs.test_too_many_duck_arrays(self)
numpy._core.tests.test_overrides.TestNDArrayArrayFunction
numpy._core.tests.test_overrides.TestNDArrayArrayFunction.test_method(self)
numpy._core.tests.test_overrides.TestNDArrayArrayFunction.test_no_wrapper(self)
numpy._core.tests.test_overrides.TestNDArrayMethods
numpy._core.tests.test_overrides.TestNDArrayMethods.test_repr(self)
numpy._core.tests.test_overrides.TestNumPyFunctions
numpy._core.tests.test_overrides.TestNumPyFunctions.test_inspect_sum(self)
numpy._core.tests.test_overrides.TestNumPyFunctions.test_override_sum(self)
numpy._core.tests.test_overrides.TestNumPyFunctions.test_set_module(self)
numpy._core.tests.test_overrides.TestNumPyFunctions.test_sum_forwarding_implementation(self)
numpy._core.tests.test_overrides.TestNumPyFunctions.test_sum_on_mock_array(self)
numpy._core.tests.test_overrides.TestVerifyMatchingSignatures
numpy._core.tests.test_overrides.TestVerifyMatchingSignatures.test_array_function_dispatch(self)
numpy._core.tests.test_overrides.TestVerifyMatchingSignatures.test_verify_matching_signatures(self)
numpy._core.tests.test_overrides._new_duck_type_and_implements()
numpy._core.tests.test_overrides._return_not_implemented(self,*args,**kwargs)
numpy._core.tests.test_overrides.dispatched_one_arg(array)
numpy._core.tests.test_overrides.dispatched_two_arg(array1,array2)
numpy._core.tests.test_overrides.test_function_like()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_casting_unittests.py----------------------------------------
A:numpy._core.tests.test_casting_unittests.simple_dtypes->simple_dtypes.replace('l', '').replace('L', '').replace('l', '').replace('L', '')
A:numpy._core.tests.test_casting_unittests.dt->dt.newbyteorder().newbyteorder()
A:numpy._core.tests.test_casting_unittests.table->textwrap.dedent('\n        X ? b h i l q B H I L Q e f d g F D G S U V O M m\n        ? # = = = = = = = = = = = = = = = = = = = = = . =\n        b . # = = = = . . . . . = = = = = = = = = = = . =\n        h . ~ # = = = . . . . . ~ = = = = = = = = = = . =\n        i . ~ ~ # = = . . . . . ~ ~ = = ~ = = = = = = . =\n        l . ~ ~ ~ # # . . . . . ~ ~ = = ~ = = = = = = . =\n        q . ~ ~ ~ # # . . . . . ~ ~ = = ~ = = = = = = . =\n        B . ~ = = = = # = = = = = = = = = = = = = = = . =\n        H . ~ ~ = = = ~ # = = = ~ = = = = = = = = = = . =\n        I . ~ ~ ~ = = ~ ~ # = = ~ ~ = = ~ = = = = = = . =\n        L . ~ ~ ~ ~ ~ ~ ~ ~ # # ~ ~ = = ~ = = = = = = . ~\n        Q . ~ ~ ~ ~ ~ ~ ~ ~ # # ~ ~ = = ~ = = = = = = . ~\n        e . . . . . . . . . . . # = = = = = = = = = = . .\n        f . . . . . . . . . . . ~ # = = = = = = = = = . .\n        d . . . . . . . . . . . ~ ~ # = ~ = = = = = = . .\n        g . . . . . . . . . . . ~ ~ ~ # ~ ~ = = = = = . .\n        F . . . . . . . . . . . . . . . # = = = = = = . .\n        D . . . . . . . . . . . . . . . ~ # = = = = = . .\n        G . . . . . . . . . . . . . . . ~ ~ # = = = = . .\n        S . . . . . . . . . . . . . . . . . . # = = = . .\n        U . . . . . . . . . . . . . . . . . . . # = = . .\n        V . . . . . . . . . . . . . . . . . . . . # = . .\n        O . . . . . . . . . . . . . . . . . . . . = # . .\n        M . . . . . . . . . . . . . . . . . . . . = = # .\n        m . . . . . . . . . . . . . . . . . . . . = = . #\n        ').strip().split('\n')
A:numpy._core.tests.test_casting_unittests.CAST_TABLE->_get_cancast_table()
A:numpy._core.tests.test_casting_unittests.arr1->numpy.empty(length, dtype=dtype1)
A:numpy._core.tests.test_casting_unittests.arr2->arr2.view(time_dt).view(time_dt)
A:numpy._core.tests.test_casting_unittests.from_bytes->numpy.zeros(max_size1, dtype=np.uint8)
A:numpy._core.tests.test_casting_unittests.to_bytes->numpy.zeros(max_size2, dtype=np.uint8)
A:numpy._core.tests.test_casting_unittests.new1->as_strided(from_bytes[1:].view(arr1.dtype), arr1.shape, (stride1,))
A:numpy._core.tests.test_casting_unittests.new2->as_strided(to_bytes[1:].view(arr2.dtype), arr2.shape, (stride2,))
A:numpy._core.tests.test_casting_unittests.buf->from_bytes[offset::stride1].tobytes()
A:numpy._core.tests.test_casting_unittests.cast->get_castingimpl(type(from_dt), type(to_dt))
A:numpy._core.tests.test_casting_unittests.(casting, (from_res, to_res), view_off)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((from_dt, to_dt))
A:numpy._core.tests.test_casting_unittests.(arr1, arr2, values)->self.get_data(from_dt, int64_dt)
A:numpy._core.tests.test_casting_unittests.(arr1_o, arr2_o)->self.get_data_variation(arr1, arr2, True, False)
A:numpy._core.tests.test_casting_unittests.from_dt->numpy.dtype(from_dt)
A:numpy._core.tests.test_casting_unittests.int64_dt->numpy.dtype(np.int64)
A:numpy._core.tests.test_casting_unittests.arr2[...]->numpy.datetime64('NaT')
A:numpy._core.tests.test_casting_unittests.to_dt->numpy.dtype(to_dt)
A:numpy._core.tests.test_casting_unittests.values->values.astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).astype(np.dtype('int64').newbyteorder(from_dt.byteorder))
A:numpy._core.tests.test_casting_unittests.DType->type(from_dt)
A:numpy._core.tests.test_casting_unittests.expected_out->expected_out.view(to_dt).view(to_dt)
A:numpy._core.tests.test_casting_unittests.orig_arr->values.astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).view(from_dt)
A:numpy._core.tests.test_casting_unittests.orig_out->numpy.empty_like(expected_out)
A:numpy._core.tests.test_casting_unittests.(arr, out)->self.get_data_variation(orig_arr, orig_out, aligned, contig)
A:numpy._core.tests.test_casting_unittests.string_DT->type(np.dtype(string_char))
A:numpy._core.tests.test_casting_unittests.other_dt->numpy.dtype(other_dt)
A:numpy._core.tests.test_casting_unittests.expected_length->get_expected_stringlength(other_dt)
A:numpy._core.tests.test_casting_unittests.string_dt->numpy.dtype(f'{string_char}{expected_length}')
A:numpy._core.tests.test_casting_unittests.(safety, (res_other_dt, res_dt), view_off)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((other_dt, None))
A:numpy._core.tests.test_casting_unittests.(safety, (_, res_dt), view_off)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((dtype, None))
A:numpy._core.tests.test_casting_unittests.(safety, _, view_off)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((from_dt, to_dt))
A:numpy._core.tests.test_casting_unittests.cast_back->get_castingimpl(string_DT, type(other_dt))
A:numpy._core.tests.test_casting_unittests.(_, (res_other_dt, string_dt), _)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((other_dt, None))
A:numpy._core.tests.test_casting_unittests.(orig_arr, values)->self.get_data(other_dt, None)
A:numpy._core.tests.test_casting_unittests.str_arr->numpy.zeros(len(orig_arr), dtype=string_dt)
A:numpy._core.tests.test_casting_unittests.string_dt_short->self.string_with_modified_length(string_dt, -1)
A:numpy._core.tests.test_casting_unittests.str_arr_short->numpy.zeros(len(orig_arr), dtype=string_dt_short)
A:numpy._core.tests.test_casting_unittests.string_dt_long->self.string_with_modified_length(string_dt, 1)
A:numpy._core.tests.test_casting_unittests.str_arr_long->numpy.zeros(len(orig_arr), dtype=string_dt_long)
A:numpy._core.tests.test_casting_unittests.(other_arr, str_arr)->self.get_data_variation(orig_arr, str_arr, True, contig)
A:numpy._core.tests.test_casting_unittests.(_, str_arr_short)->self.get_data_variation(orig_arr, str_arr_short.copy(), True, contig)
A:numpy._core.tests.test_casting_unittests.(_, str_arr_long)->self.get_data_variation(orig_arr, str_arr_long, True, contig)
A:numpy._core.tests.test_casting_unittests.dtype1->numpy.dtype(f'{order1}U30')
A:numpy._core.tests.test_casting_unittests.dtype2->numpy.dtype(f'{order2}U30')
A:numpy._core.tests.test_casting_unittests.data1->numpy.empty(30 * 4 + 1, dtype=np.uint8)[1:].view(dtype1)
A:numpy._core.tests.test_casting_unittests.data2->numpy.empty(30 * 4 + 1, dtype=np.uint8)[1:].view(dtype2)
A:numpy._core.tests.test_casting_unittests.object_dtype->type(np.dtype(object))
A:numpy._core.tests.test_casting_unittests.other_dtype->type(np.dtype(str))
A:numpy._core.tests.test_casting_unittests.dtype->numpy.dtype([('foo', '<f4', (3, 2))])
A:numpy._core.tests.test_casting_unittests.(_, _, view_off)->get_castingimpl(type(from_dt), type(to_dt))._resolve_descriptors((from_dt, to_dt))
A:numpy._core.tests.test_casting_unittests.arr_normal->numpy.array([None] * 5)
A:numpy._core.tests.test_casting_unittests.arr_NULLs->numpy.empty_like(arr_normal)
A:numpy._core.tests.test_casting_unittests.expected->numpy.array([None] * 5).astype(dtype)
A:numpy._core.tests.test_casting_unittests.nonstandard_bools->numpy.array([0, 3, -7], dtype=np.int8).view(bool)
A:numpy._core.tests.test_casting_unittests.res->numpy.array([0, 3, -7], dtype=np.int8).view(bool).astype(dtype)
numpy._core.tests.test_casting_unittests.Casting(enum.IntEnum)
numpy._core.tests.test_casting_unittests.TestCasting
numpy._core.tests.test_casting_unittests.TestCasting.get_data(self,dtype1,dtype2)
numpy._core.tests.test_casting_unittests.TestCasting.get_data_variation(self,arr1,arr2,aligned=True,contig=True)
numpy._core.tests.test_casting_unittests.TestCasting.string_with_modified_length(self,dtype,change_length)
numpy._core.tests.test_casting_unittests.TestCasting.test_nonstandard_bool_to_other(self,dtype)
numpy._core.tests.test_casting_unittests.TestCasting.test_numeric_to_times(self,from_Dt)
numpy._core.tests.test_casting_unittests.TestCasting.test_object_and_simple_resolution(self,dtype)
numpy._core.tests.test_casting_unittests.TestCasting.test_object_casts_NULL_None_equivalence(self,dtype)
numpy._core.tests.test_casting_unittests.TestCasting.test_object_to_parametric_internal_error(self)
numpy._core.tests.test_casting_unittests.TestCasting.test_simple_cancast(self,from_Dt)
numpy._core.tests.test_casting_unittests.TestCasting.test_simple_direct_casts(self,from_dt)
numpy._core.tests.test_casting_unittests.TestCasting.test_simple_string_casts_roundtrip(self,other_dt,string_char)
numpy._core.tests.test_casting_unittests.TestCasting.test_simple_to_object_resolution(self,dtype)
numpy._core.tests.test_casting_unittests.TestCasting.test_string_cancast(self,other_DT,string_char)
numpy._core.tests.test_casting_unittests.TestCasting.test_string_to_string_cancast(self,other_dt,string_char)
numpy._core.tests.test_casting_unittests.TestCasting.test_structured_field_offsets(self,to_dt,expected_off)
numpy._core.tests.test_casting_unittests.TestCasting.test_structured_view_offsets_paramteric(self,from_dt,to_dt,expected_off)
numpy._core.tests.test_casting_unittests.TestCasting.test_time_to_time(self,from_dt,to_dt,expected_casting,expected_view_off,nom,denom)
numpy._core.tests.test_casting_unittests.TestCasting.test_unicode_byteswapped_cast(self,order1,order2)
numpy._core.tests.test_casting_unittests.TestCasting.test_void_and_structured_with_subarray(self,casting)
numpy._core.tests.test_casting_unittests.TestCasting.test_void_to_string_special_case(self)
numpy._core.tests.test_casting_unittests.TestChanges
numpy._core.tests.test_casting_unittests.TestChanges.test_float_to_string(self,floating,string)
numpy._core.tests.test_casting_unittests.TestChanges.test_to_void(self)
numpy._core.tests.test_casting_unittests._get_cancast_table()
numpy._core.tests.test_casting_unittests.get_expected_stringlength(dtype)
numpy._core.tests.test_casting_unittests.simple_dtype_instances()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_umath_complex.py----------------------------------------
A:numpy._core.tests.test_umath_complex.platform_skip->pytest.mark.skipif(xfail_complex_tests, reason='Inadequate C99 complex support')
A:numpy._core.tests.test_umath_complex.z->numpy.sqrt(np.array(complex(-np.inf, np.nan)))
A:numpy._core.tests.test_umath_complex.x->numpy.array([complex(np.nan, ncu.NZERO)], dtype=complex)
A:numpy._core.tests.test_umath_complex.y->numpy.abs(x)
A:numpy._core.tests.test_umath_complex.xa->numpy.array(x, dtype=complex)
A:numpy._core.tests.test_umath_complex.ya->numpy.array(yl, dtype=complex)
A:numpy._core.tests.test_umath_complex.ref->g(xi, yi)
A:numpy._core.tests.test_umath_complex.self.olderr->numpy.seterr(invalid='ignore')
A:numpy._core.tests.test_umath_complex.lx->list(range(len(x)))
A:numpy._core.tests.test_umath_complex.y_r->numpy.array([np.sqrt(2.0), 2, np.sqrt(5), np.inf, np.nan])
A:numpy._core.tests.test_umath_complex.z1->numpy.array([complex(x1, y1)])
A:numpy._core.tests.test_umath_complex.z2->complex(x2, y2)
A:numpy._core.tests.test_umath_complex.arr->numpy.ones(arraysize, dtype=astype)
A:numpy._core.tests.test_umath_complex.abs_true->numpy.ones(arraysize, dtype=arr.real.dtype)
A:numpy._core.tests.test_umath_complex.sq_true->numpy.array([complex(np.nan, np.nan), complex(np.nan, np.nan), complex(np.nan, np.nan), complex(np.nan, np.inf), complex(-np.inf, np.nan), complex(np.inf, np.nan), complex(0.0, 0.0), complex(np.nan, np.nan), complex(np.nan, np.nan)], dtype=astype)
A:numpy._core.tests.test_umath_complex.vec->numpy.array([(0, 0.0, 0, -31.666483, 200, 0.0, 0.0, 1.0, 3.0 + 4j, 613090), (1, 0.0, 0, 260.91525, 42, 0.0, 0.0, 1.0, 5.0 + 12j, 787315), (1, 0.0, 0, 52.15155, 42, 0.0, 0.0, 1.0, 8.0 + 15j, 806641), (1, 0.0, 0, 52.430195, 42, 0.0, 0.0, 1.0, 7.0 + 24j, 1363540), (2, 0.0, 0, 304.43646, 58, 0.0, 0.0, 1.0, 20.0 + 21j, 787323), (3, 0.0, 0, 299.42108, 52, 0.0, 0.0, 1.0, 12.0 + 35j, 787332), (4, 0.0, 0, 39.4836, 28, 0.0, 0.0, 9.182192, 9.0 + 40j, 787304), (4, 0.0, 0, 76.83787, 28, 0.0, 0.0, 1.0, 28.0 + 45j, 1321869), (5, 0.0, 0, 143.26366, 24, 0.0, 0.0, 10.996129, 11.0 + 60j, 787299)], dtype=dtype)
A:numpy._core.tests.test_umath_complex.myfunc->getattr(np, func)
A:numpy._core.tests.test_umath_complex.g->myfunc(a[::stride])
A:numpy._core.tests.test_umath_complex.b->vec['mycomplex'].copy()
A:numpy._core.tests.test_umath_complex.h->myfunc(b[::stride])
numpy._core.tests.test_umath_complex.TestCabs
numpy._core.tests.test_umath_complex.TestCabs.setup_method(self)
numpy._core.tests.test_umath_complex.TestCabs.teardown_method(self)
numpy._core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan(self)
numpy._core.tests.test_umath_complex.TestCabs.test_fabs(self)
numpy._core.tests.test_umath_complex.TestCabs.test_simple(self)
numpy._core.tests.test_umath_complex.TestCarg
numpy._core.tests.test_umath_complex.TestCarg.test_simple(self)
numpy._core.tests.test_umath_complex.TestCarg.test_special_values(self)
numpy._core.tests.test_umath_complex.TestCarg.test_zero(self)
numpy._core.tests.test_umath_complex.TestCexp
numpy._core.tests.test_umath_complex.TestCexp.test_simple(self)
numpy._core.tests.test_umath_complex.TestCexp.test_special_values(self)
numpy._core.tests.test_umath_complex.TestCexp.test_special_values2(self)
numpy._core.tests.test_umath_complex.TestClog
numpy._core.tests.test_umath_complex.TestClog.test_simple(self)
numpy._core.tests.test_umath_complex.TestClog.test_special_values(self)
numpy._core.tests.test_umath_complex.TestComplexAbsoluteAVX
numpy._core.tests.test_umath_complex.TestComplexAbsoluteAVX.test_array(self,arraysize,stride,astype)
numpy._core.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes
numpy._core.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes.test_array(self,stride,astype,func)
numpy._core.tests.test_umath_complex.TestCpow
numpy._core.tests.test_umath_complex.TestCpow.setup_method(self)
numpy._core.tests.test_umath_complex.TestCpow.teardown_method(self)
numpy._core.tests.test_umath_complex.TestCpow.test_array(self)
numpy._core.tests.test_umath_complex.TestCpow.test_scalar(self)
numpy._core.tests.test_umath_complex.TestCpow.test_simple(self)
numpy._core.tests.test_umath_complex.TestCsqrt
numpy._core.tests.test_umath_complex.TestCsqrt.test_simple(self)
numpy._core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate(self)
numpy._core.tests.test_umath_complex.TestCsqrt.test_special_values(self)
numpy._core.tests.test_umath_complex.TestSpecialComplexAVX
numpy._core.tests.test_umath_complex.TestSpecialComplexAVX.test_array(self,stride,astype)
numpy._core.tests.test_umath_complex.check_complex_value(f,x1,y1,x2,y2,exact=True)
numpy._core.tests.test_umath_complex.check_real_value(f,x1,y1,x,exact=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_umath.py----------------------------------------
A:numpy._core.tests.test_umath.arr1->numpy.array([-4.0, 1.0, 10.0, 0.0, np.nan, -np.nan, np.inf, -np.inf])
A:numpy._core.tests.test_umath.arr2->numpy.array([-2.0, -1.0, np.nan, 1.0, 0.0, np.nan, 1.0, -3.0])
A:numpy._core.tests.test_umath.v1->numpy.arcsinh(np.float128(x))
A:numpy._core.tests.test_umath.self.olderr->numpy.seterr(invalid='ignore')
A:numpy._core.tests.test_umath.a->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff')
A:numpy._core.tests.test_umath.o->numpy.ones(10 * 2, dtype=bool)
A:numpy._core.tests.test_umath.r->r.view(type(self)).view(type(self))
A:numpy._core.tests.test_umath.d->numpy.absolute(1 - np.arcsin(z) / p)
A:numpy._core.tests.test_umath.o1->numpy.empty((1,))
A:numpy._core.tests.test_umath.o2->numpy.empty((1,), dtype=np.int32)
A:numpy._core.tests.test_umath.(r1, r2)->numpy.frexp(d, out=o1, subok=subok)
A:numpy._core.tests.test_umath.arr->numpy.arange(3).astype(np.float64)
A:numpy._core.tests.test_umath.b->cfunc(p)
A:numpy._core.tests.test_umath.np_scalar->numpy.dtype(dtype).type(scalar)
A:numpy._core.tests.test_umath.a_lst->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').tolist()
A:numpy._core.tests.test_umath.b_lst->cfunc(p).tolist()
A:numpy._core.tests.test_umath.comp_b->np_comp(a, b).view(np.uint8)
A:numpy._core.tests.test_umath.comp_s1->np_comp(np_scalar, b).view(np.uint8)
A:numpy._core.tests.test_umath.comp_s2->np_comp(a, np_scalar).view(np.uint8)
A:numpy._core.tests.test_umath.a1->numpy.array([2 ** 60], dtype=dtypes[0])
A:numpy._core.tests.test_umath.a2->numpy.array([2 ** 60 + 1], dtype=dtypes[1])
A:numpy._core.tests.test_umath.expected->ufunc(array, where=where)
A:numpy._core.tests.test_umath.x->numpy.array([x])
A:numpy._core.tests.test_umath.fo->numpy.iinfo(dtype)
A:numpy._core.tests.test_umath.(a, b, divisors)->eval(ex_val)
A:numpy._core.tests.test_umath.ac->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').copy()
A:numpy._core.tests.test_umath.lst->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').tolist()
A:numpy._core.tests.test_umath.div_a->numpy.floor_divide.reduce(a)
A:numpy._core.tests.test_umath.div_lst->reduce(c_div, lst)
A:numpy._core.tests.test_umath.dividend_array->numpy.array([dividend] * 5)
A:numpy._core.tests.test_umath.quotient_array->numpy.array([quotient] * 5)
A:numpy._core.tests.test_umath.fnan->numpy.array(np.nan, dtype=dt)
A:numpy._core.tests.test_umath.fone->numpy.array(1.0, dtype=dt)
A:numpy._core.tests.test_umath.fzer->numpy.array(0.0, dtype=dt)
A:numpy._core.tests.test_umath.finf->numpy.array(np.inf, dtype=dt)
A:numpy._core.tests.test_umath.y->numpy.array([y])
A:numpy._core.tests.test_umath.div->numpy.floor_divide(fnan, fzer)
A:numpy._core.tests.test_umath.z->numpy.array([1e-05 * (1 + 1j)], dtype=dtype)
A:numpy._core.tests.test_umath.(div, rem)->numpy.divmod(fnan, fzer)
A:numpy._core.tests.test_umath.nlst->list(range(-127, 0))
A:numpy._core.tests.test_umath.plst->list(range(1, 128))
A:numpy._core.tests.test_umath.arg->numpy.ones(1, dtype=dtin)
A:numpy._core.tests.test_umath.tgt->numpy.array([1.0, -1.0, 1j, -1j] + [complex(np.nan, np.nan)] * 5 + [0.0, 1.0, -1.0, -1j, 0.6 + 0.8j, -0.8 + 0.6j])
A:numpy._core.tests.test_umath.tgtdiv->numpy.where((tgtdiv == 0.0) & ((b < 0) ^ (a < 0)), -0.0, tgtdiv)
A:numpy._core.tests.test_umath.tgtrem->numpy.where((tgtrem == 0.0) & (b < 0), -0.0, tgtrem)
A:numpy._core.tests.test_umath.fa->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').astype(dt)
A:numpy._core.tests.test_umath.fb->cfunc(p).astype(dt)
A:numpy._core.tests.test_umath.fzero->numpy.array(0.0, dtype=dtype)
A:numpy._core.tests.test_umath.(div, mod)->numpy.divmod(4, a)
A:numpy._core.tests.test_umath.rem->numpy.remainder(fnan, fone)
A:numpy._core.tests.test_umath.fmod->numpy.fmod(fnan, fone)
A:numpy._core.tests.test_umath.result_type->namedtuple('result_type', ['nocast', 'casted'])
A:numpy._core.tests.test_umath.to_check->interesting_binop_operands(1, 0, dtype)
A:numpy._core.tests.test_umath.res->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').__array_ufunc__(np.add, '__call__', a, a)
A:numpy._core.tests.test_umath.(res1, res2)->numpy.divmod(op1, op2)
A:numpy._core.tests.test_umath.divisor->numpy.array([-1], dtype=divisor_dtype)
A:numpy._core.tests.test_umath.result->numpy.add.reduceat(x, [], axis=1)
A:numpy._core.tests.test_umath.expected_array->numpy.array([self.overflow_results[operation].casted(dividend_dtype)] * len(a)).flatten()
A:numpy._core.tests.test_umath.zero->t(0)
A:numpy._core.tests.test_umath.one->t(1)
A:numpy._core.tests.test_umath.cnan->numpy.array([complex(np.nan, np.nan)])
A:numpy._core.tests.test_umath.minusone->numpy.array(-1, dtype=dt)
A:numpy._core.tests.test_umath.xf->numpy.log(np.array(x, dtype=dt))
A:numpy._core.tests.test_umath.yf->numpy.log(np.array(y, dtype=dt))
A:numpy._core.tests.test_umath.v->numpy.log2(2.0 ** i)
A:numpy._core.tests.test_umath.zf->numpy.log(np.array(z, dtype=dt))
A:numpy._core.tests.test_umath.logxf->numpy.array(x, dtype=dt)
A:numpy._core.tests.test_umath.logyf->numpy.array(y, dtype=dt)
A:numpy._core.tests.test_umath.logzf->numpy.array(z, dtype=dt)
A:numpy._core.tests.test_umath.strides->numpy.array([-4, -3, -2, -1, 1, 2, 3, 4])
A:numpy._core.tests.test_umath.sizes->numpy.arange(2, 100)
A:numpy._core.tests.test_umath.x_f64->numpy.float64(x_f32)
A:numpy._core.tests.test_umath.x_special->numpy.float64(x_f32).copy()
A:numpy._core.tests.test_umath.y_true->numpy.exp(x_f64)
A:numpy._core.tests.test_umath.y_special->numpy.log(x_special)
A:numpy._core.tests.test_umath.yf1p->numpy.array(y1p, dtype=dt)
A:numpy._core.tests.test_umath.underflow_trigger->numpy.array(float.fromhex('0x1.f37f47a03f82ap-511'), dtype=np.float64)
A:numpy._core.tests.test_umath.rng->numpy.random.default_rng(42)
A:numpy._core.tests.test_umath.in_arr->numpy.array(in_, dtype=dt)
A:numpy._core.tests.test_umath.out_arr->numpy.array(out, dtype=dt)
A:numpy._core.tests.test_umath.array->numpy.array([1, 2, 3])
A:numpy._core.tests.test_umath.dt->numpy.dtype(dtype)
A:numpy._core.tests.test_umath.dt_info->numpy.finfo(dt)
A:numpy._core.tests.test_umath.arr_f64->numpy.array([np.nan, -np.nan, np.inf, -np.inf, -1.0, 1.0, -0.0, 0.0, 2.2251e-308, -2.2251e-308], dtype='d')
A:numpy._core.tests.test_umath.arr_f32->numpy.array([np.nan, -np.nan, np.inf, -np.inf, -1.0, 1.0, -0.0, 0.0, 1.4013e-45, -1.4013e-45], dtype='f')
A:numpy._core.tests.test_umath.nan->t(np.nan)
A:numpy._core.tests.test_umath.inf->t(np.inf)
A:numpy._core.tests.test_umath.sign->numpy.array([False, True, False, True, True, False, True, False, False, True])
A:numpy._core.tests.test_umath.finite->numpy.array([False, False, False, False, True, True, True, True, True, True])
A:numpy._core.tests.test_umath.arr_f64_rv->numpy.copy(arr_f64)
A:numpy._core.tests.test_umath.arr_f32_rv->numpy.copy(arr_f32)
A:numpy._core.tests.test_umath.data->numpy.repeat(data, 10)
A:numpy._core.tests.test_umath.out->numpy.ndarray(data.shape, dtype=dtype)
A:numpy._core.tests.test_umath.contig_in->numpy.array(ncontig_in)
A:numpy._core.tests.test_umath.data_rv->numpy.copy(data)
A:numpy._core.tests.test_umath.contig_sign_in->numpy.array(ncontig_sign_in)
A:numpy._core.tests.test_umath.data_split->numpy.array(np.array_split(data, 2))
A:numpy._core.tests.test_umath.nan_split->numpy.array(np.array_split(nan, 2))
A:numpy._core.tests.test_umath.inf_split->numpy.array(np.array_split(inf, 2))
A:numpy._core.tests.test_umath.sign_split->numpy.array(np.array_split(sign, 2))
A:numpy._core.tests.test_umath.finite_split->numpy.array(np.array_split(finite, 2))
A:numpy._core.tests.test_umath.data_split_rv->numpy.array(np.array_split(data_rv, 2))
A:numpy._core.tests.test_umath.mant->numpy.array([0.125, 0.25, 0.5, 1.0, 1.0, 2.0, 4.0, 8.0], dtype=dtype)
A:numpy._core.tests.test_umath.exp->numpy.array(list(itertools.accumulate(arr, ufunc)), dtype=dtype)
A:numpy._core.tests.test_umath.mant_true->numpy.array([np.nan, np.nan, np.inf, -np.inf, 0.0, -0.0, 0.5, -0.5], dtype=dtype)
A:numpy._core.tests.test_umath.exp_true->numpy.exp(x_f32)
A:numpy._core.tests.test_umath.out_mant->numpy.ones(8, dtype=dtype)
A:numpy._core.tests.test_umath.(mant, exp)->numpy.frexp(arr[::stride], out=(out_mant[::stride], out_exp[::stride]))
A:numpy._core.tests.test_umath.myfunc->getattr(np, func)
A:numpy._core.tests.test_umath.x_f32->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii))
A:numpy._core.tests.test_umath.x_f128->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii)).astype(np.longdouble)
A:numpy._core.tests.test_umath.y_true128->myfunc(x_f128)
A:numpy._core.tests.test_umath.y_true32->myfunc(x_f32)
A:numpy._core.tests.test_umath.y_true64->myfunc(x_f64)
A:numpy._core.tests.test_umath.M->numpy.int_(N / 20)
A:numpy._core.tests.test_umath.index->numpy.random.randint(low=0, high=N, size=M)
A:numpy._core.tests.test_umath.x_f32[index]->numpy.float32(100000000000.0 * np.random.rand(M))
A:numpy._core.tests.test_umath.tx_f32->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii)).copy()
A:numpy._core.tests.test_umath.x_f32_large->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii)).copy()
A:numpy._core.tests.test_umath.log_true->numpy.log(x_f32)
A:numpy._core.tests.test_umath.sin_true->numpy.sin(x_f32_large)
A:numpy._core.tests.test_umath.cos_true->numpy.cos(x_f32_large)
A:numpy._core.tests.test_umath.seq1->numpy.arange(11)
A:numpy._core.tests.test_umath.tmp1->numpy.arange(11).astype(dt)
A:numpy._core.tests.test_umath.tmp2->seq2.astype(dt)
A:numpy._core.tests.test_umath.arg1->numpy.asarray(input1, dtype=dtype)
A:numpy._core.tests.test_umath.arg2->numpy.asarray(input2, dtype=dtype)
A:numpy._core.tests.test_umath.maxtrue->numpy.array([-2.0, 1.0, np.nan, 1.0, np.nan, np.nan, np.inf, -3.0])
A:numpy._core.tests.test_umath.out_maxtrue->numpy.array([-2.0, 1.0, 1.0, 10.0, 1.0, 1.0, np.nan, 1.0])
A:numpy._core.tests.test_umath.d1->dt(0.1)
A:numpy._core.tests.test_umath.d1_next->numpy.nextafter(d1, np.inf)
A:numpy._core.tests.test_umath.mintrue->numpy.array([-4.0, -1.0, np.nan, 0.0, np.nan, np.nan, 1.0, -np.inf])
A:numpy._core.tests.test_umath.out_mintrue->numpy.array([-4.0, 1.0, 1.0, 1.0, 1.0, 1.0, np.nan, 1.0])
A:numpy._core.tests.test_umath.none->numpy.array([0, 0, 0, 0], bool)
A:numpy._core.tests.test_umath.some->numpy.array([1, 0, 1, 1], bool)
A:numpy._core.tests.test_umath.every->numpy.array([1, 1, 1, 1], bool)
A:numpy._core.tests.test_umath.empty->numpy.array([], dtype=object)
A:numpy._core.tests.test_umath.zeros->numpy.array([0], dtype=dt)
A:numpy._core.tests.test_umath.ones->numpy.array([-1]).astype(dt)
A:numpy._core.tests.test_umath.btype->numpy.array([True], dtype=object)
A:numpy._core.tests.test_umath.bitwise_count_a->numpy.bitwise_count(a)
A:numpy._core.tests.test_umath.expectedhalf->numpy.array([[0.0, 0.0, 0.5, 1.0], [1.0, np.nan, 1.0, 0.0]])
A:numpy._core.tests.test_umath.expected1->numpy.array([[0.0, 0.0, 0.5, 1.0], [1.0, np.nan, 1.0, 0.0]]).copy()
A:numpy._core.tests.test_umath.h->numpy._core.umath.heaviside(x, np.float32(1.0))
A:numpy._core.tests.test_umath.foo->numpy.array([np.nan])
A:numpy._core.tests.test_umath.inp[:]->numpy.arange(inp.size, dtype=dt)
A:numpy._core.tests.test_umath.expect->numpy.repeat(expect, 10)
A:numpy._core.tests.test_umath.expect_split->numpy.array(np.array_split(expect, 2))
A:numpy._core.tests.test_umath.c->numpy.array([True, True])
A:numpy._core.tests.test_umath.singleton->numpy.array([1.0])
A:numpy._core.tests.test_umath.ok->numpy.empty(1).view(Ok)
A:numpy._core.tests.test_umath.bad->numpy.empty(1).view(Bad)
A:numpy._core.tests.test_umath.res0->numpy.multiply(a, b, 'out_arg')
A:numpy._core.tests.test_umath.res1->numpy.multiply(a, b, out='out_arg')
A:numpy._core.tests.test_umath.three_mul_ufunc->numpy.frompyfunc(tres_mul, 3, 1)
A:numpy._core.tests.test_umath.four_mul_ufunc->numpy.frompyfunc(quatro_mul, 4, 1)
A:numpy._core.tests.test_umath.a_sub->ASub()
A:numpy._core.tests.test_umath.c_sub->CSub()
A:numpy._core.tests.test_umath.c2->C()
A:numpy._core.tests.test_umath.res2->numpy.multiply(2, b, 'out_arg')
A:numpy._core.tests.test_umath.res3->numpy.multiply(3, b, out='out_arg')
A:numpy._core.tests.test_umath.res4->numpy.multiply(a, 4, 'out_arg')
A:numpy._core.tests.test_umath.res5->numpy.multiply(a, 5, out='out_arg')
A:numpy._core.tests.test_umath.res6->numpy.modf(a, 'out0', 'out1')
A:numpy._core.tests.test_umath.res7->numpy.frexp(a, 'out0', 'out1')
A:numpy._core.tests.test_umath.cls->type(self)
A:numpy._core.tests.test_umath.obj->numpy.array(obj)
A:numpy._core.tests.test_umath.inputs->numpy.ndarray.__new__(subtype, shape, dtype=object)._unwrap(inputs)
A:numpy._core.tests.test_umath.kwargs->kwargs.copy().copy()
A:numpy._core.tests.test_umath.kwargs['out']->tuple(out_args)
A:numpy._core.tests.test_umath.kwargs['where']->numpy.ndarray.__new__(subtype, shape, dtype=object)._unwrap((kwargs['where'],))
A:numpy._core.tests.test_umath.where->numpy.array([True, False, True])
A:numpy._core.tests.test_umath.result_1->ufunc(array, where=where.view(OverriddenArrayNew))
A:numpy._core.tests.test_umath.result_2->ufunc(array.view(OverriddenArrayNew), where=where.view(OverriddenArrayNew))
A:numpy._core.tests.test_umath.opt_out->OptOut()
A:numpy._core.tests.test_umath.greedy->GreedyArray()
A:numpy._core.tests.test_umath.results->tuple((np.asarray(result).view(A) if output is None else output for (result, output) in zip(results, outputs)))
A:numpy._core.tests.test_umath.check->numpy.absolute(1 - np.arcsin(z) / p).copy()
A:numpy._core.tests.test_umath.(b1, b2)->numpy.modf(d, out=(None, a))
A:numpy._core.tests.test_umath.(c1, c2)->numpy.modf(a, out=(a, b))
A:numpy._core.tests.test_umath.big->numpy.int32(np.iinfo(np.int32).max // 11)
A:numpy._core.tests.test_umath.f->t(_f)
A:numpy._core.tests.test_umath.fr->f(x)
A:numpy._core.tests.test_umath.fz->f(complex(x))
A:numpy._core.tests.test_umath.fcf->f(np.csingle(z))
A:numpy._core.tests.test_umath.fcd->f(np.cdouble(z))
A:numpy._core.tests.test_umath.fcl->f(np.clongdouble(z))
A:numpy._core.tests.test_umath.cname->name_map.get(fname, fname)
A:numpy._core.tests.test_umath.cfunc->getattr(cmath, cname)
A:numpy._core.tests.test_umath.info->numpy.finfo(dtype)
A:numpy._core.tests.test_umath.x_series->numpy.logspace(-20, -3.001, 200)
A:numpy._core.tests.test_umath.x_basic->numpy.logspace(-2.999, 0, 10, endpoint=False)
A:numpy._core.tests.test_umath.z0->numpy.asarray(z0, dtype=dtype)
A:numpy._core.tests.test_umath.self->numpy.ndarray.__new__(subtype, shape, dtype=object)
A:numpy._core.tests.test_umath.mul_ufunc->numpy.frompyfunc(mul, nin=2, nout=1)
A:numpy._core.tests.test_umath.x0->numpy.atleast_1d(x0).astype(dtype)
A:numpy._core.tests.test_umath.dx->numpy.atleast_1d(dx).astype(dtype)
A:numpy._core.tests.test_umath.atol->numpy.float32(0.01)
A:numpy._core.tests.test_umath.y0->f(x0)
A:numpy._core.tests.test_umath.yp->f(x0 + dx * scale * np.absolute(x0) / np.absolute(dx))
A:numpy._core.tests.test_umath.ym->f(x)
A:numpy._core.tests.test_umath.two->t(2)
A:numpy._core.tests.test_umath.f1->t(_f + 1)
A:numpy._core.tests.test_umath.db->numpy.dtype([('name', 'S11'), ('time', np.int64), ('value', np.float32)])
A:numpy._core.tests.test_umath.h2->numpy.array(h2)
A:numpy._core.tests.test_umath.h1->numpy.add.reduceat(a['value'], indx)
A:numpy._core.tests.test_umath.indices->numpy.array([], 'i4')
A:numpy._core.tests.test_umath.out_max->numpy.array([0.61, 0.61, 0.77, 0.77, 0.77], dtype=ftype)
A:numpy._core.tests.test_umath.out_min->numpy.array([0.61, 0.6, 0.6, 0.41, 0.19], dtype=ftype)
A:numpy._core.tests.test_umath.acc->ufunc.accumulate(arr, dtype=dtype)
A:numpy._core.tests.test_umath.acc_u8->ufunc.accumulate(arr, dtype=dtype).view(np.uint8)
A:numpy._core.tests.test_umath.actual->numpy.multiply.outer(arr.view(foo), arr.view(foo))
A:numpy._core.tests.test_umath.deep->numpy.ones((1,) * 33)
numpy._core.tests.test_umath.TestAVXFloat32Transcendental
numpy._core.tests.test_umath.TestAVXFloat32Transcendental.test_exp_float32(self)
numpy._core.tests.test_umath.TestAVXFloat32Transcendental.test_log_float32(self)
numpy._core.tests.test_umath.TestAVXFloat32Transcendental.test_sincos_float32(self)
numpy._core.tests.test_umath.TestAVXFloat32Transcendental.test_strided_float32(self)
numpy._core.tests.test_umath.TestAVXUfuncs
numpy._core.tests.test_umath.TestAVXUfuncs.test_avx_based_ufunc(self)
numpy._core.tests.test_umath.TestAbsoluteNegative
numpy._core.tests.test_umath.TestAbsoluteNegative.test_abs_neg_blocked(self)
numpy._core.tests.test_umath.TestAbsoluteNegative.test_lower_align(self)
numpy._core.tests.test_umath.TestAbsoluteNegative.test_noncontiguous(self,dtype,big)
numpy._core.tests.test_umath.TestAdd
numpy._core.tests.test_umath.TestAdd.test_reduce_alignment(self)
numpy._core.tests.test_umath.TestAddDocstring
numpy._core.tests.test_umath.TestAddDocstring.test_add_same_docstring(self)
numpy._core.tests.test_umath.TestAddDocstring.test_different_docstring_fails(self)
numpy._core.tests.test_umath.TestAdd_newdoc_ufunc
numpy._core.tests.test_umath.TestAdd_newdoc_ufunc.test_string_arg(self)
numpy._core.tests.test_umath.TestAdd_newdoc_ufunc.test_ufunc_arg(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_any_ninf(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_any_pinf(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_inf_any(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_nan_any(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_negative_zero(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_one_one(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_positive_zero(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_zero_negative(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_zero_positive(self)
numpy._core.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero(self)
numpy._core.tests.test_umath.TestAttributes
numpy._core.tests.test_umath.TestAttributes.test_attributes(self)
numpy._core.tests.test_umath.TestAttributes.test_doc(self)
numpy._core.tests.test_umath.TestBitwiseUFuncs
numpy._core.tests.test_umath.TestBitwiseUFuncs.test_bitwise_count(self,input_dtype_obj,bitsize)
numpy._core.tests.test_umath.TestBitwiseUFuncs.test_identity(self)
numpy._core.tests.test_umath.TestBitwiseUFuncs.test_reduction(self)
numpy._core.tests.test_umath.TestBitwiseUFuncs.test_types(self)
numpy._core.tests.test_umath.TestBitwiseUFuncs.test_values(self)
numpy._core.tests.test_umath.TestBool
numpy._core.tests.test_umath.TestBool.test_exceptions(self)
numpy._core.tests.test_umath.TestBool.test_reduce(self)
numpy._core.tests.test_umath.TestBool.test_truth_table_bitwise(self)
numpy._core.tests.test_umath.TestBool.test_truth_table_logical(self)
numpy._core.tests.test_umath.TestCbrt
numpy._core.tests.test_umath.TestCbrt.test_cbrt(self)
numpy._core.tests.test_umath.TestCbrt.test_cbrt_scalar(self)
numpy._core.tests.test_umath.TestChoose
numpy._core.tests.test_umath.TestChoose.test_mixed(self)
numpy._core.tests.test_umath.TestComparisons
numpy._core.tests.test_umath.TestComparisons.test_comparison_functions(self,dtype,py_comp,np_comp)
numpy._core.tests.test_umath.TestComparisons.test_error_in_equal_reduce(self)
numpy._core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_equal(self)
numpy._core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_not_equal(self)
numpy._core.tests.test_umath.TestComparisons.test_large_integer_direct_comparison(self,dtypes,py_comp,np_comp,vals)
numpy._core.tests.test_umath.TestComparisons.test_object_dtype(self)
numpy._core.tests.test_umath.TestComparisons.test_object_nonbool_dtype_error(self)
numpy._core.tests.test_umath.TestComparisons.test_unsigned_signed_direct_comparison(self,dtype,py_comp_func,np_comp_func,flip)
numpy._core.tests.test_umath.TestComplexFunctions
numpy._core.tests.test_umath.TestComplexFunctions.test_against_cmath(self)
numpy._core.tests.test_umath.TestComplexFunctions.test_branch_cuts(self)
numpy._core.tests.test_umath.TestComplexFunctions.test_branch_cuts_complex64(self)
numpy._core.tests.test_umath.TestComplexFunctions.test_it(self)
numpy._core.tests.test_umath.TestComplexFunctions.test_loss_of_precision(self,dtype)
numpy._core.tests.test_umath.TestComplexFunctions.test_precisions_consistent(self)
numpy._core.tests.test_umath.TestComplexFunctions.test_promotion_corner_cases(self)
numpy._core.tests.test_umath.TestConstants
numpy._core.tests.test_umath.TestConstants.test_e(self)
numpy._core.tests.test_umath.TestConstants.test_euler_gamma(self)
numpy._core.tests.test_umath.TestConstants.test_pi(self)
numpy._core.tests.test_umath.TestDegrees
numpy._core.tests.test_umath.TestDegrees.test_degrees(self)
numpy._core.tests.test_umath.TestDivision
numpy._core.tests.test_umath.TestDivision.test_division_complex(self)
numpy._core.tests.test_umath.TestDivision.test_division_int(self)
numpy._core.tests.test_umath.TestDivision.test_division_int_boundary(self,dtype,ex_val)
numpy._core.tests.test_umath.TestDivision.test_division_int_reduce(self,dtype,ex_val)
numpy._core.tests.test_umath.TestDivision.test_division_int_timedelta(self,dividend,divisor,quotient)
numpy._core.tests.test_umath.TestDivision.test_floor_division_complex(self)
numpy._core.tests.test_umath.TestDivision.test_floor_division_corner_cases(self,dtype)
numpy._core.tests.test_umath.TestDivision.test_floor_division_errors(self,dtype)
numpy._core.tests.test_umath.TestDivision.test_floor_division_signed_zero(self)
numpy._core.tests.test_umath.TestDivision.test_zero_division_complex(self)
numpy._core.tests.test_umath.TestDivisionIntegerOverflowsAndDivideByZero
numpy._core.tests.test_umath.TestDivisionIntegerOverflowsAndDivideByZero.test_divide_by_zero(self,dtype)
numpy._core.tests.test_umath.TestDivisionIntegerOverflowsAndDivideByZero.test_overflows(self,dividend_dtype,divisor_dtype,operation)
numpy._core.tests.test_umath.TestDivisionIntegerOverflowsAndDivideByZero.test_signed_division_overflow(self,dtype)
numpy._core.tests.test_umath.TestExp
numpy._core.tests.test_umath.TestExp.test_exp_strides(self)
numpy._core.tests.test_umath.TestExp.test_exp_values(self)
numpy._core.tests.test_umath.TestExp2
numpy._core.tests.test_umath.TestExp2.test_exp2_values(self)
numpy._core.tests.test_umath.TestExpm1
numpy._core.tests.test_umath.TestExpm1.test_complex(self)
numpy._core.tests.test_umath.TestExpm1.test_expm1(self)
numpy._core.tests.test_umath.TestExpm1.test_special(self)
numpy._core.tests.test_umath.TestFPClass
numpy._core.tests.test_umath.TestFPClass.test_fp_noncontiguous(self,dtype)
numpy._core.tests.test_umath.TestFPClass.test_fpclass(self,stride)
numpy._core.tests.test_umath.TestFRExp
numpy._core.tests.test_umath.TestFRExp.test_frexp(self,dtype,stride)
numpy._core.tests.test_umath.TestFloat_power
numpy._core.tests.test_umath.TestFloat_power.test_type_conversion(self)
numpy._core.tests.test_umath.TestFloatingPoint
numpy._core.tests.test_umath.TestFloatingPoint.test_floating_point(self)
numpy._core.tests.test_umath.TestFmax(_FilterInvalids)
numpy._core.tests.test_umath.TestFmax.test_complex_nans(self)
numpy._core.tests.test_umath.TestFmax.test_float_nans(self)
numpy._core.tests.test_umath.TestFmax.test_precision(self)
numpy._core.tests.test_umath.TestFmax.test_reduce(self)
numpy._core.tests.test_umath.TestFmax.test_reduce_complex(self)
numpy._core.tests.test_umath.TestFmin(_FilterInvalids)
numpy._core.tests.test_umath.TestFmin.test_complex_nans(self)
numpy._core.tests.test_umath.TestFmin.test_float_nans(self)
numpy._core.tests.test_umath.TestFmin.test_precision(self)
numpy._core.tests.test_umath.TestFmin.test_reduce(self)
numpy._core.tests.test_umath.TestFmin.test_reduce_complex(self)
numpy._core.tests.test_umath.TestFrompyfunc
numpy._core.tests.test_umath.TestFrompyfunc.test_identity(self)
numpy._core.tests.test_umath.TestHeavside
numpy._core.tests.test_umath.TestHeavside.test_heaviside(self)
numpy._core.tests.test_umath.TestHypot
numpy._core.tests.test_umath.TestHypot.test_reduce(self)
numpy._core.tests.test_umath.TestHypot.test_simple(self)
numpy._core.tests.test_umath.TestHypotSpecialValues
numpy._core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs(self)
numpy._core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2(self)
numpy._core.tests.test_umath.TestHypotSpecialValues.test_no_fpe(self)
numpy._core.tests.test_umath.TestInt
numpy._core.tests.test_umath.TestInt.test_logical_not(self)
numpy._core.tests.test_umath.TestLDExp
numpy._core.tests.test_umath.TestLDExp.test_ldexp(self,dtype,stride)
numpy._core.tests.test_umath.TestLdexp
numpy._core.tests.test_umath.TestLdexp._check_ldexp(self,tp)
numpy._core.tests.test_umath.TestLdexp.test_ldexp(self)
numpy._core.tests.test_umath.TestLdexp.test_ldexp_overflow(self)
numpy._core.tests.test_umath.TestLog
numpy._core.tests.test_umath.TestLog.test_log_strides(self)
numpy._core.tests.test_umath.TestLog.test_log_values(self)
numpy._core.tests.test_umath.TestLog.test_log_values_maxofdtype(self)
numpy._core.tests.test_umath.TestLog1p
numpy._core.tests.test_umath.TestLog1p.test_log1p(self)
numpy._core.tests.test_umath.TestLog1p.test_special(self)
numpy._core.tests.test_umath.TestLog2
numpy._core.tests.test_umath.TestLog2.test_log2_ints(self,i)
numpy._core.tests.test_umath.TestLog2.test_log2_special(self)
numpy._core.tests.test_umath.TestLog2.test_log2_values(self,dt)
numpy._core.tests.test_umath.TestLogAddExp(_FilterInvalids)
numpy._core.tests.test_umath.TestLogAddExp.test_inf(self)
numpy._core.tests.test_umath.TestLogAddExp.test_logaddexp_range(self)
numpy._core.tests.test_umath.TestLogAddExp.test_logaddexp_values(self)
numpy._core.tests.test_umath.TestLogAddExp.test_nan(self)
numpy._core.tests.test_umath.TestLogAddExp.test_reduce(self)
numpy._core.tests.test_umath.TestLogAddExp2(_FilterInvalids)
numpy._core.tests.test_umath.TestLogAddExp2.test_inf(self)
numpy._core.tests.test_umath.TestLogAddExp2.test_logaddexp2_range(self)
numpy._core.tests.test_umath.TestLogAddExp2.test_logaddexp2_values(self)
numpy._core.tests.test_umath.TestLogAddExp2.test_nan(self)
numpy._core.tests.test_umath.TestLogAddExp2.test_reduce(self)
numpy._core.tests.test_umath.TestMaximum(_FilterInvalids)
numpy._core.tests.test_umath.TestMaximum.test_complex_nans(self)
numpy._core.tests.test_umath.TestMaximum.test_float_nans(self)
numpy._core.tests.test_umath.TestMaximum.test_object_array(self)
numpy._core.tests.test_umath.TestMaximum.test_object_nans(self)
numpy._core.tests.test_umath.TestMaximum.test_precision(self)
numpy._core.tests.test_umath.TestMaximum.test_reduce(self)
numpy._core.tests.test_umath.TestMaximum.test_reduce_complex(self)
numpy._core.tests.test_umath.TestMaximum.test_strided_array(self)
numpy._core.tests.test_umath.TestMinMax
numpy._core.tests.test_umath.TestMinMax.test_lower_align(self)
numpy._core.tests.test_umath.TestMinMax.test_minimize_no_warns(self)
numpy._core.tests.test_umath.TestMinMax.test_minmax_blocked(self)
numpy._core.tests.test_umath.TestMinMax.test_reduce_reorder(self)
numpy._core.tests.test_umath.TestMinimum(_FilterInvalids)
numpy._core.tests.test_umath.TestMinimum.test_complex_nans(self)
numpy._core.tests.test_umath.TestMinimum.test_float_nans(self)
numpy._core.tests.test_umath.TestMinimum.test_object_array(self)
numpy._core.tests.test_umath.TestMinimum.test_object_nans(self)
numpy._core.tests.test_umath.TestMinimum.test_precision(self)
numpy._core.tests.test_umath.TestMinimum.test_reduce(self)
numpy._core.tests.test_umath.TestMinimum.test_reduce_complex(self)
numpy._core.tests.test_umath.TestMinimum.test_strided_array(self)
numpy._core.tests.test_umath.TestOut
numpy._core.tests.test_umath.TestOut.test_out_subok(self)
numpy._core.tests.test_umath.TestOut.test_out_wrap_no_leak(self)
numpy._core.tests.test_umath.TestOut.test_out_wrap_subok(self)
numpy._core.tests.test_umath.TestPositive
numpy._core.tests.test_umath.TestPositive.test_invalid(self)
numpy._core.tests.test_umath.TestPositive.test_valid(self)
numpy._core.tests.test_umath.TestPower
numpy._core.tests.test_umath.TestPower.test_fast_power(self)
numpy._core.tests.test_umath.TestPower.test_float_to_inf_power(self)
numpy._core.tests.test_umath.TestPower.test_integer_power(self)
numpy._core.tests.test_umath.TestPower.test_integer_power_of_1(self)
numpy._core.tests.test_umath.TestPower.test_integer_power_of_zero(self)
numpy._core.tests.test_umath.TestPower.test_integer_power_with_integer_zero_exponent(self)
numpy._core.tests.test_umath.TestPower.test_integer_to_negative_power(self)
numpy._core.tests.test_umath.TestPower.test_power_complex(self)
numpy._core.tests.test_umath.TestPower.test_power_float(self)
numpy._core.tests.test_umath.TestPower.test_power_zero(self)
numpy._core.tests.test_umath.TestPower.test_zero_power_nonzero(self)
numpy._core.tests.test_umath.TestRadians
numpy._core.tests.test_umath.TestRadians.test_radians(self)
numpy._core.tests.test_umath.TestRationalFunctions
numpy._core.tests.test_umath.TestRationalFunctions._test_gcd_inner(self,dtype)
numpy._core.tests.test_umath.TestRationalFunctions._test_lcm_inner(self,dtype)
numpy._core.tests.test_umath.TestRationalFunctions.test_decimal(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_float(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_gcd(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_gcd_object(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_gcd_overflow(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_huge_integers(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_lcm(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_lcm_object(self)
numpy._core.tests.test_umath.TestRationalFunctions.test_lcm_overflow(self)
numpy._core.tests.test_umath.TestRemainder
numpy._core.tests.test_umath.TestRemainder.test_float_divmod_corner_cases(self)
numpy._core.tests.test_umath.TestRemainder.test_float_divmod_errors(self,dtype)
numpy._core.tests.test_umath.TestRemainder.test_float_remainder_corner_cases(self)
numpy._core.tests.test_umath.TestRemainder.test_float_remainder_errors(self,dtype,fn)
numpy._core.tests.test_umath.TestRemainder.test_float_remainder_exact(self)
numpy._core.tests.test_umath.TestRemainder.test_float_remainder_overflow(self)
numpy._core.tests.test_umath.TestRemainder.test_float_remainder_roundoff(self)
numpy._core.tests.test_umath.TestRemainder.test_remainder_basic(self)
numpy._core.tests.test_umath.TestRoundingFunctions
numpy._core.tests.test_umath.TestRoundingFunctions.test_fraction(self)
numpy._core.tests.test_umath.TestRoundingFunctions.test_object_direct(self)
numpy._core.tests.test_umath.TestRoundingFunctions.test_object_indirect(self)
numpy._core.tests.test_umath.TestSign
numpy._core.tests.test_umath.TestSign.test_sign(self)
numpy._core.tests.test_umath.TestSign.test_sign_complex(self)
numpy._core.tests.test_umath.TestSign.test_sign_dtype_nan_object(self)
numpy._core.tests.test_umath.TestSign.test_sign_dtype_object(self)
numpy._core.tests.test_umath.TestSpecialFloats
numpy._core.tests.test_umath.TestSpecialFloats.test_abs_values(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_arccosh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_arcsincos(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_arcsinh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_arctan(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_arctanh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_cosh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_divide_spurious_fpexception(self,dtype)
numpy._core.tests.test_umath.TestSpecialFloats.test_exp2(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_exp_exceptions(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_exp_values(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_expm1(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_log_values(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_reciprocal_values(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_sincos_errors(self,callable,dtype,value)
numpy._core.tests.test_umath.TestSpecialFloats.test_sincos_overlaps(self,callable,dtype,stride)
numpy._core.tests.test_umath.TestSpecialFloats.test_sincos_underflow(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_sincos_values(self,dtype)
numpy._core.tests.test_umath.TestSpecialFloats.test_sinh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_sqrt_values(self,dt)
numpy._core.tests.test_umath.TestSpecialFloats.test_square_values(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_tan(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_tanh(self)
numpy._core.tests.test_umath.TestSpecialFloats.test_unary_spurious_fpexception(self,ufunc,dtype,data,escape)
numpy._core.tests.test_umath.TestSpecialMethods
numpy._core.tests.test_umath.TestSpecialMethods.test_array_too_many_args(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_array_ufunc_direct_call(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_default_prepare(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_failing_out_wrap(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_failing_wrap(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_gufunc_override(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_none_wrap(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_priority(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_where(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_wrap(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_wrap_out(self)
numpy._core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable(self)
numpy._core.tests.test_umath.TestSubclass
numpy._core.tests.test_umath.TestSubclass.test_subclass_op(self)
numpy._core.tests.test_umath._FilterInvalids
numpy._core.tests.test_umath._FilterInvalids.setup_method(self)
numpy._core.tests.test_umath._FilterInvalids.teardown_method(self)
numpy._core.tests.test_umath._check_branch_cut(f,x0,dx,re_sign=1,im_sign=-1,sig_zero_ok=False,dtype=complex)
numpy._core.tests.test_umath._signs(dt)
numpy._core.tests.test_umath._test_nextafter(t)
numpy._core.tests.test_umath._test_spacing(t)
numpy._core.tests.test_umath.assert_arctan2_isnan(x,y)
numpy._core.tests.test_umath.assert_arctan2_isninf(x,y)
numpy._core.tests.test_umath.assert_arctan2_isnzero(x,y)
numpy._core.tests.test_umath.assert_arctan2_ispinf(x,y)
numpy._core.tests.test_umath.assert_arctan2_ispzero(x,y)
numpy._core.tests.test_umath.assert_hypot_isinf(x,y)
numpy._core.tests.test_umath.assert_hypot_isnan(x,y)
numpy._core.tests.test_umath.bad_arcsinh()
numpy._core.tests.test_umath.floor_divide_and_remainder(x,y)
numpy._core.tests.test_umath.interesting_binop_operands(val1,val2,dtype)
numpy._core.tests.test_umath.on_powerpc()
numpy._core.tests.test_umath.test_bad_legacy_gufunc_silent_errors(x1)
numpy._core.tests.test_umath.test_bad_legacy_ufunc_silent_errors()
numpy._core.tests.test_umath.test_complex_nan_comparisons()
numpy._core.tests.test_umath.test_copysign()
numpy._core.tests.test_umath.test_memoverlap_accumulate(ftype)
numpy._core.tests.test_umath.test_memoverlap_accumulate_cmp(ufunc,dtype)
numpy._core.tests.test_umath.test_memoverlap_accumulate_symmetric(ufunc,dtype)
numpy._core.tests.test_umath.test_nextafter()
numpy._core.tests.test_umath.test_nextafter_0()
numpy._core.tests.test_umath.test_nextafter_vs_spacing()
numpy._core.tests.test_umath.test_nextafterf()
numpy._core.tests.test_umath.test_nextafterl()
numpy._core.tests.test_umath.test_outer_bad_subclass()
numpy._core.tests.test_umath.test_outer_exceeds_maxdims()
numpy._core.tests.test_umath.test_outer_subclass_preserve(arr)
numpy._core.tests.test_umath.test_pos_nan()
numpy._core.tests.test_umath.test_reduceat()
numpy._core.tests.test_umath.test_reduceat_empty()
numpy._core.tests.test_umath.test_rint_big_int()
numpy._core.tests.test_umath.test_signaling_nan_exceptions()
numpy._core.tests.test_umath.test_spacing()
numpy._core.tests.test_umath.test_spacing_gfortran()
numpy._core.tests.test_umath.test_spacingf()
numpy._core.tests.test_umath.test_spacingl()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/_locales.py----------------------------------------
A:numpy._core.tests._locales.old_locale->locale.getlocale(locale.LC_NUMERIC)
A:numpy._core.tests._locales.(cur_locale, tst_locale)->find_comma_decimal_point_locale()
numpy._core.tests._locales.CommaDecimalPointLocale
numpy._core.tests._locales.CommaDecimalPointLocale.__enter__(self)
numpy._core.tests._locales.CommaDecimalPointLocale.__exit__(self,type,value,traceback)
numpy._core.tests._locales.CommaDecimalPointLocale.setup_method(self)
numpy._core.tests._locales.CommaDecimalPointLocale.teardown_method(self)
numpy._core.tests._locales.find_comma_decimal_point_locale()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_function_base.py----------------------------------------
A:numpy._core.tests.test_function_base.y->linspace(start, stop, 3)
A:numpy._core.tests.test_function_base.start->array([0.0, 1.0])
A:numpy._core.tests.test_function_base.stop->array([2.0, 1.0])
A:numpy._core.tests.test_function_base.t1->array([1.0 + 2j, 1.5 + 2.5j, 2.0 + 3j, 2.5 + 3.5j, 3.0 + 4j])
A:numpy._core.tests.test_function_base.t2->array([0.0 + 1j, 2.5 + 0.75j, 5.0 + 0.5j, 7.5 + 0.25j, 10.0 + 0j])
A:numpy._core.tests.test_function_base.t3->linspace(start, stop[0], 5)
A:numpy._core.tests.test_function_base.t4->stack([linspace(_start, stop[0], 5) for _start in start], axis=1)
A:numpy._core.tests.test_function_base.t5->linspace(start, stop, 5, axis=-1)
A:numpy._core.tests.test_function_base.base->array([1, 2])
A:numpy._core.tests.test_function_base.a->array(0).view(PhysicalQuantity2)
A:numpy._core.tests.test_function_base.b->array(1).view(PhysicalQuantity2)
A:numpy._core.tests.test_function_base.ls->linspace(a, b, 1)
A:numpy._core.tests.test_function_base.z->numpy.geomspace(x, y, 5)
A:numpy._core.tests.test_function_base.expected->numpy.array([1.2 + 3.4j, -1.47384 + 3.2905616j, -3.33577588 + 1.36842949j, -3.36011056 - 1.30753855j, -1.53343861 - 3.26321406j])
A:numpy._core.tests.test_function_base.lim1->linspace(1 + 2j, 3 + 4j, 5)
A:numpy._core.tests.test_function_base.lim2->linspace(1j, 10, 5)
A:numpy._core.tests.test_function_base.lim3->array([1200, 1000], dtype='uint16')
A:numpy._core.tests.test_function_base.t6->linspace(1200.0, 1000.0, 5)
A:numpy._core.tests.test_function_base.gs->geomspace(a, b, 1)
A:numpy._core.tests.test_function_base.one->Arrayish(array(1, dtype='<i4'))
A:numpy._core.tests.test_function_base.five->Arrayish(array(5, dtype='<i4'))
A:numpy._core.tests.test_function_base.t->array([-1, -1, 0, 0, 1, 1, 2, 3], dtype=int)
numpy._core.tests.test_PhysicalQuantity(cls,value)
numpy._core.tests.test_PhysicalQuantity.__add__(self,x)
numpy._core.tests.test_PhysicalQuantity.__div__(self,x)
numpy._core.tests.test_PhysicalQuantity.__mul__(self,x)
numpy._core.tests.test_PhysicalQuantity.__rdiv__(self,x)
numpy._core.tests.test_PhysicalQuantity.__rsub__(self,x)
numpy._core.tests.test_PhysicalQuantity.__sub__(self,x)
numpy._core.tests.test_PhysicalQuantity2(ndarray)
numpy._core.tests.test_TestAdd_newdoc
numpy._core.tests.test_TestAdd_newdoc.test_add_doc(self)
numpy._core.tests.test_TestAdd_newdoc.test_errors_are_ignored(self)
numpy._core.tests.test_TestGeomspace
numpy._core.tests.test_TestGeomspace.test_basic(self)
numpy._core.tests.test_TestGeomspace.test_boundaries_match_start_and_stop_exactly(self)
numpy._core.tests.test_TestGeomspace.test_bounds(self)
numpy._core.tests.test_TestGeomspace.test_complex(self)
numpy._core.tests.test_TestGeomspace.test_complex_shortest_path(self)
numpy._core.tests.test_TestGeomspace.test_dtype(self)
numpy._core.tests.test_TestGeomspace.test_nan_interior(self)
numpy._core.tests.test_TestGeomspace.test_physical_quantities(self)
numpy._core.tests.test_TestGeomspace.test_start_stop_array(self)
numpy._core.tests.test_TestGeomspace.test_start_stop_array_scalar(self)
numpy._core.tests.test_TestGeomspace.test_subclass(self)
numpy._core.tests.test_TestLinspace
numpy._core.tests.test_TestLinspace.test_any_step_zero_and_not_mult_inplace(self)
numpy._core.tests.test_TestLinspace.test_array_interface(self)
numpy._core.tests.test_TestLinspace.test_basic(self)
numpy._core.tests.test_TestLinspace.test_complex(self)
numpy._core.tests.test_TestLinspace.test_corner(self)
numpy._core.tests.test_TestLinspace.test_denormal_numbers(self)
numpy._core.tests.test_TestLinspace.test_dtype(self)
numpy._core.tests.test_TestLinspace.test_equivalent_to_arange(self)
numpy._core.tests.test_TestLinspace.test_object(self)
numpy._core.tests.test_TestLinspace.test_physical_quantities(self)
numpy._core.tests.test_TestLinspace.test_retstep(self)
numpy._core.tests.test_TestLinspace.test_round_negative(self)
numpy._core.tests.test_TestLinspace.test_start_stop_array(self)
numpy._core.tests.test_TestLinspace.test_start_stop_array_scalar(self)
numpy._core.tests.test_TestLinspace.test_subclass(self)
numpy._core.tests.test_TestLinspace.test_type(self)
numpy._core.tests.test_TestLogspace
numpy._core.tests.test_TestLogspace.test_base_array(self,axis:int)
numpy._core.tests.test_TestLogspace.test_basic(self)
numpy._core.tests.test_TestLogspace.test_dtype(self)
numpy._core.tests.test_TestLogspace.test_physical_quantities(self)
numpy._core.tests.test_TestLogspace.test_start_stop_array(self)
numpy._core.tests.test_TestLogspace.test_stop_base_array(self,axis:int)
numpy._core.tests.test_TestLogspace.test_subclass(self)
numpy._core.tests.test_function_base.PhysicalQuantity(cls,value)
numpy._core.tests.test_function_base.PhysicalQuantity.__add__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity.__div__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity.__mul__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity.__new__(cls,value)
numpy._core.tests.test_function_base.PhysicalQuantity.__rdiv__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity.__rsub__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity.__sub__(self,x)
numpy._core.tests.test_function_base.PhysicalQuantity2(ndarray)
numpy._core.tests.test_function_base.TestAdd_newdoc
numpy._core.tests.test_function_base.TestAdd_newdoc.test_add_doc(self)
numpy._core.tests.test_function_base.TestAdd_newdoc.test_errors_are_ignored(self)
numpy._core.tests.test_function_base.TestGeomspace
numpy._core.tests.test_function_base.TestGeomspace.test_basic(self)
numpy._core.tests.test_function_base.TestGeomspace.test_boundaries_match_start_and_stop_exactly(self)
numpy._core.tests.test_function_base.TestGeomspace.test_bounds(self)
numpy._core.tests.test_function_base.TestGeomspace.test_complex(self)
numpy._core.tests.test_function_base.TestGeomspace.test_complex_shortest_path(self)
numpy._core.tests.test_function_base.TestGeomspace.test_dtype(self)
numpy._core.tests.test_function_base.TestGeomspace.test_nan_interior(self)
numpy._core.tests.test_function_base.TestGeomspace.test_physical_quantities(self)
numpy._core.tests.test_function_base.TestGeomspace.test_start_stop_array(self)
numpy._core.tests.test_function_base.TestGeomspace.test_start_stop_array_scalar(self)
numpy._core.tests.test_function_base.TestGeomspace.test_subclass(self)
numpy._core.tests.test_function_base.TestLinspace
numpy._core.tests.test_function_base.TestLinspace.test_any_step_zero_and_not_mult_inplace(self)
numpy._core.tests.test_function_base.TestLinspace.test_array_interface(self)
numpy._core.tests.test_function_base.TestLinspace.test_basic(self)
numpy._core.tests.test_function_base.TestLinspace.test_complex(self)
numpy._core.tests.test_function_base.TestLinspace.test_corner(self)
numpy._core.tests.test_function_base.TestLinspace.test_denormal_numbers(self)
numpy._core.tests.test_function_base.TestLinspace.test_dtype(self)
numpy._core.tests.test_function_base.TestLinspace.test_equivalent_to_arange(self)
numpy._core.tests.test_function_base.TestLinspace.test_object(self)
numpy._core.tests.test_function_base.TestLinspace.test_physical_quantities(self)
numpy._core.tests.test_function_base.TestLinspace.test_retstep(self)
numpy._core.tests.test_function_base.TestLinspace.test_round_negative(self)
numpy._core.tests.test_function_base.TestLinspace.test_start_stop_array(self)
numpy._core.tests.test_function_base.TestLinspace.test_start_stop_array_scalar(self)
numpy._core.tests.test_function_base.TestLinspace.test_subclass(self)
numpy._core.tests.test_function_base.TestLinspace.test_type(self)
numpy._core.tests.test_function_base.TestLogspace
numpy._core.tests.test_function_base.TestLogspace.test_base_array(self,axis:int)
numpy._core.tests.test_function_base.TestLogspace.test_basic(self)
numpy._core.tests.test_function_base.TestLogspace.test_dtype(self)
numpy._core.tests.test_function_base.TestLogspace.test_physical_quantities(self)
numpy._core.tests.test_function_base.TestLogspace.test_start_stop_array(self)
numpy._core.tests.test_function_base.TestLogspace.test_stop_base_array(self,axis:int)
numpy._core.tests.test_function_base.TestLogspace.test_subclass(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test__exceptions.py----------------------------------------
A:numpy._core.tests.test__exceptions.error->_ArrayMemoryError((1023,), np.dtype(np.uint8))
A:numpy._core.tests.test__exceptions.res->pickle.loads(pickle.dumps(error))
A:numpy._core.tests.test__exceptions.e->_ArrayMemoryError((2, 4), np.dtype((np.uint64, 16)))
A:numpy._core.tests.test__exceptions.exc->AxisError(*args)
A:numpy._core.tests.test__exceptions.exc2->pickle.loads(pickle.dumps(exc))
A:numpy._core.tests.test__exceptions.attr1->getattr(exc, name)
A:numpy._core.tests.test__exceptions.attr2->getattr(exc2, name)
numpy._core.tests.test__exceptions.TestArrayMemoryError
numpy._core.tests.test__exceptions.TestArrayMemoryError.test__size_to_string(self)
numpy._core.tests.test__exceptions.TestArrayMemoryError.test__total_size(self)
numpy._core.tests.test__exceptions.TestArrayMemoryError.test_pickling(self)
numpy._core.tests.test__exceptions.TestArrayMemoryError.test_str(self)
numpy._core.tests.test__exceptions.TestAxisError
numpy._core.tests.test__exceptions.TestAxisError.test_attr(self,args)
numpy._core.tests.test__exceptions.TestAxisError.test_pickling(self,args)
numpy._core.tests.test__exceptions.TestUFuncNoLoopError
numpy._core.tests.test__exceptions.TestUFuncNoLoopError.test_pickling(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_dlpack.py----------------------------------------
A:numpy._core.tests.test_dlpack.x->numpy.ndarray(dtype='f8', shape=(10, 5, 1), strides=(8, 80, 4), buffer=np.ones(1000, dtype=np.uint8), order='F')
A:numpy._core.tests.test_dlpack.y->numpy.from_dlpack(x)
A:numpy._core.tests.test_dlpack.dt->numpy.dtype('=i8').newbyteorder()
A:numpy._core.tests.test_dlpack.y5->numpy.diagonal(x).copy()
A:numpy._core.tests.test_dlpack._->numpy.ndarray(dtype='f8', shape=(10, 5, 1), strides=(8, 80, 4), buffer=np.ones(1000, dtype=np.uint8), order='F').__dlpack__()
numpy._core.tests.test_dlpack.TestDLPack
numpy._core.tests.test_dlpack.TestDLPack.dlpack_deleter_exception(self)
numpy._core.tests.test_dlpack.TestDLPack.test_dlpack_destructor_exception(self)
numpy._core.tests.test_dlpack.TestDLPack.test_dlpack_device(self)
numpy._core.tests.test_dlpack.TestDLPack.test_dtype_passthrough(self,dtype)
numpy._core.tests.test_dlpack.TestDLPack.test_dunder_dlpack_refcount(self)
numpy._core.tests.test_dlpack.TestDLPack.test_dunder_dlpack_stream(self)
numpy._core.tests.test_dlpack.TestDLPack.test_from_dlpack_refcount(self)
numpy._core.tests.test_dlpack.TestDLPack.test_higher_dims(self,ndim)
numpy._core.tests.test_dlpack.TestDLPack.test_invalid_byte_swapping(self)
numpy._core.tests.test_dlpack.TestDLPack.test_invalid_dtype(self)
numpy._core.tests.test_dlpack.TestDLPack.test_ndim0(self)
numpy._core.tests.test_dlpack.TestDLPack.test_non_contiguous(self)
numpy._core.tests.test_dlpack.TestDLPack.test_readonly(self)
numpy._core.tests.test_dlpack.TestDLPack.test_size1dims_arrays(self)
numpy._core.tests.test_dlpack.TestDLPack.test_strides_not_multiple_of_itemsize(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_argparse.py----------------------------------------
A:numpy._core.tests.test_argparse.arg2->numpy.str_('arg2')
A:numpy._core.tests.test_argparse.missing_arg->numpy.str_('missing_arg')
A:numpy._core.tests.test_argparse.arr->numpy.arange(3)
A:numpy._core.tests.test_argparse.args->range(1000)
numpy._core.tests.test_argparse.test_invalid_integers()
numpy._core.tests.test_argparse.test_missing_arguments()
numpy._core.tests.test_argparse.test_multiple_values()
numpy._core.tests.test_argparse.test_string_fallbacks()
numpy._core.tests.test_argparse.test_too_many_arguments_method_forwarding()
numpy._core.tests.test_argparse.test_too_many_positional()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_dtype.py----------------------------------------
A:numpy._core.tests.test_dtype.dt->create_custom_field_dtype(blueprint, mytype, 0)
A:numpy._core.tests.test_dtype.dt2->numpy.dtype({'names': ['val1', 'val2'], 'formats': [(np.float32, (0,)), int]})
A:numpy._core.tests.test_dtype.dt3->numpy.dtype({'f0': ('i4', 0), 'f1': ([('f1', 'i1'), ('f2', 'i4'), ('f3', 'i1')], 4), 'f2': ('i1', 10)}, align=False)
A:numpy._core.tests.test_dtype.uintp->numpy.dtype(np.uintp)
A:numpy._core.tests.test_dtype.right->numpy.dtype(np.ulonglong)
A:numpy._core.tests.test_dtype.bytes_value->value.encode('ascii')
A:numpy._core.tests.test_dtype.from_bytes->numpy.dtype(bytes_value)
A:numpy._core.tests.test_dtype.from_str->numpy.dtype(value)
A:numpy._core.tests.test_dtype.x->rational(1)
A:numpy._core.tests.test_dtype.y->numpy.zeros(3, dtype=pickled)
A:numpy._core.tests.test_dtype.dtype_class->type(np.dtype(type_char))
A:numpy._core.tests.test_dtype.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_dtype.dt1->numpy.dtype([('a', '|i1'), ('b', [('f0', '<i2'), ('f1', '<f4')], 2)], align=True)
A:numpy._core.tests.test_dtype.a->numpy.array([o], dtype=dt)
A:numpy._core.tests.test_dtype.b->numpy.dtype([('yo', int), ('ye', simple1), ('yi', np.dtype((int, (3, 2))))])
A:numpy._core.tests.test_dtype.d->numpy.dtype((np.void, np.dtype('i4,i4', metadata={'datum': 1})))
A:numpy._core.tests.test_dtype.c->numpy.dtype([('yo', int), ('ye', simple1), ('yi', np.dtype((a, (3, 2))))])
A:numpy._core.tests.test_dtype.res->numpy.result_type(other, complex_scalar)
A:numpy._core.tests.test_dtype.expected->numpy.dtype([('f0', pair[0]), ('f1', pair[1])])
A:numpy._core.tests.test_dtype.arr->numpy.broadcast_to(arr, 10)
A:numpy._core.tests.test_dtype.t1->numpy.dtype('(1,)i4', align=True)
A:numpy._core.tests.test_dtype.t2->numpy.dtype('2i4', align=True)
A:numpy._core.tests.test_dtype.item->numpy.broadcast_to(arr, 10).item(0)
A:numpy._core.tests.test_dtype.cast->numpy.broadcast_to(arr, 10).astype(object)
A:numpy._core.tests.test_dtype.obj->object()
A:numpy._core.tests.test_dtype.before->sys.getrefcount(singleton)
A:numpy._core.tests.test_dtype.now->sys.getrefcount(creation_obj)
A:numpy._core.tests.test_dtype.before2->sys.getrefcount(one)
A:numpy._core.tests.test_dtype.after2->sys.getrefcount(one)
A:numpy._core.tests.test_dtype.before_val0->sys.getrefcount(val0)
A:numpy._core.tests.test_dtype.before_val1->sys.getrefcount(val1)
A:numpy._core.tests.test_dtype.after_val0->sys.getrefcount(val0)
A:numpy._core.tests.test_dtype.after_val1->sys.getrefcount(val1)
A:numpy._core.tests.test_dtype.after->sys.getrefcount(singleton)
A:numpy._core.tests.test_dtype.new->numpy.result_type(other, complex_scalar).repeat(10)
A:numpy._core.tests.test_dtype.after_repeat->sys.getrefcount(singleton)
A:numpy._core.tests.test_dtype.sparse_dtype->numpy.dtype([('a', {'names': ['ab'], 'formats': ['f'], 'offsets': [4]}, (2, 3))])
A:numpy._core.tests.test_dtype.sparse_arr->numpy.broadcast_to(arr, 10).view(self.sparse_dtype)
A:numpy._core.tests.test_dtype.simple1->numpy.dtype({'names': ['r', 'b'], 'formats': ['u1', 'u1'], 'titles': ['Red pixel', 'Blue pixel']})
A:numpy._core.tests.test_dtype.l->list()
A:numpy._core.tests.test_dtype.new_dtype->numpy.dtype(dtype.descr)
A:numpy._core.tests.test_dtype.totalsize->aligned_offset(totalsize, max_alignment)
A:numpy._core.tests.test_dtype.max_alignment->max(new_field_descr.alignment, max_alignment)
A:numpy._core.tests.test_dtype.canonical->numpy.result_type(dtype)
A:numpy._core.tests.test_dtype.canonical_dt->numpy.result_type(arr.dtype)
A:numpy._core.tests.test_dtype.two_arg_result->numpy.promote_types(dtype_with_empty_space, dtype_with_empty_space)
A:numpy._core.tests.test_dtype.field_subset->random.sample(dtype.names, k=4)
A:numpy._core.tests.test_dtype.canonicalized->numpy.result_type(dtype_with_empty_space)
A:numpy._core.tests.test_dtype.dtype_aligned->numpy.dtype(dtype.descr, align=not dtype.isalignedstruct)
A:numpy._core.tests.test_dtype.buf->pickle.dumps(dtype, proto)
A:numpy._core.tests.test_dtype.pickled->pickle.loads(buf)
A:numpy._core.tests.test_dtype.roundtrip_DType->pickle.loads(pickle.dumps(DType, proto))
A:numpy._core.tests.test_dtype.pre_pickle_hash->hash(dt)
A:numpy._core.tests.test_dtype.roundtrip_dt->pickle.loads(pickle.dumps(dt, proto))
A:numpy._core.tests.test_dtype.min_complex->numpy.dtype(np.complex64)
A:numpy._core.tests.test_dtype.expected_dtype->numpy.dtype(int)
A:numpy._core.tests.test_dtype.dt_instance->dt()
A:numpy._core.tests.test_dtype.dt_name->type(dtype).__name__.lower().removesuffix('dtype')
A:numpy._core.tests.test_dtype.all_codes->set(np.typecodes['All'])
A:numpy._core.tests.test_dtype.numeric_codes->set(np.typecodes['AllInteger'] + np.typecodes['AllFloat'] + '?')
A:numpy._core.tests.test_dtype.DType->getattr(numpy.dtypes, f'{int_}{size}DType')
A:numpy._core.tests.test_dtype.sctype->getattr(numpy, f'{int_.lower()}{size}')
A:numpy._core.tests.test_dtype.p_uint8->ctypes.POINTER(ctypes.c_uint8)
A:numpy._core.tests.test_dtype.all_types->set(np.typecodes['All'])
A:numpy._core.tests.test_dtype.all_pairs->permutations(all_types, 2)
A:numpy._core.tests.test_dtype.pair_type->numpy.dtype('{},{}'.format(*pair))
A:numpy._core.tests.test_dtype.blueprint->numpy.dtype([('field', object)])
A:numpy._core.tests.test_dtype.o->object()
A:numpy._core.tests.test_dtype.cls->type(np.dtype(code))
A:numpy._core.tests.test_dtype.td->numpy.timedelta64(4)
A:numpy._core.tests.test_dtype.result->numpy.result_type(0, td)
numpy._core.tests.test_dtype.TestBuiltin
numpy._core.tests.test_dtype.TestBuiltin.test_bad_param(self)
numpy._core.tests.test_dtype.TestBuiltin.test_create_invalid_string_errors(self)
numpy._core.tests.test_dtype.TestBuiltin.test_create_string_dtypes_directly(self,type_char,char_size,scalar_type)
numpy._core.tests.test_dtype.TestBuiltin.test_dtype(self,t)
numpy._core.tests.test_dtype.TestBuiltin.test_dtype_bytes_str_equivalence(self,value)
numpy._core.tests.test_dtype.TestBuiltin.test_dtype_from_bytes(self)
numpy._core.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing(self)
numpy._core.tests.test_dtype.TestBuiltin.test_expired_dtypes_with_bad_bytesize(self)
numpy._core.tests.test_dtype.TestBuiltin.test_field_order_equality(self)
numpy._core.tests.test_dtype.TestBuiltin.test_invalid_types(self)
numpy._core.tests.test_dtype.TestBuiltin.test_leading_zero_parsing(self)
numpy._core.tests.test_dtype.TestBuiltin.test_numeric_style_types_are_invalid(self,dtype)
numpy._core.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_comparison(self,operation)
numpy._core.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_equality(self)
numpy._core.tests.test_dtype.TestBuiltin.test_run(self,t)
numpy._core.tests.test_dtype.TestClassGetItem
numpy._core.tests.test_dtype.TestClassGetItem.test_dtype(self)->None
numpy._core.tests.test_dtype.TestClassGetItem.test_dtype_subclass(self,code:str)->None
numpy._core.tests.test_dtype.TestClassGetItem.test_subscript_scalar(self)->None
numpy._core.tests.test_dtype.TestClassGetItem.test_subscript_tuple(self,arg_len:int)->None
numpy._core.tests.test_dtype.TestDTypeClasses
numpy._core.tests.test_dtype.TestDTypeClasses.test_basic_dtypes_subclass_properties(self,dtype)
numpy._core.tests.test_dtype.TestDTypeClasses.test_dtype_superclass(self)
numpy._core.tests.test_dtype.TestDTypeClasses.test_float_alias_names(self,name)
numpy._core.tests.test_dtype.TestDTypeClasses.test_integer_alias_names(self,int_,size)
numpy._core.tests.test_dtype.TestDTypeClasses.test_is_numeric(self)
numpy._core.tests.test_dtype.TestDTypeMakeCanonical
numpy._core.tests.test_dtype.TestDTypeMakeCanonical.check_canonical(self,dtype,canonical)
numpy._core.tests.test_dtype.TestDTypeMakeCanonical.test_make_canonical_hypothesis(self,dtype)
numpy._core.tests.test_dtype.TestDTypeMakeCanonical.test_object_flag_not_inherited(self)
numpy._core.tests.test_dtype.TestDTypeMakeCanonical.test_simple(self)
numpy._core.tests.test_dtype.TestDTypeMakeCanonical.test_structured(self,dtype)
numpy._core.tests.test_dtype.TestDtypeAttributeDeletion
numpy._core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion(self)
numpy._core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion(self)
numpy._core.tests.test_dtype.TestDtypeAttributes
numpy._core.tests.test_dtype.TestDtypeAttributes.test_descr_has_trailing_void(self)
numpy._core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass(self)
numpy._core.tests.test_dtype.TestDtypeAttributes.test_zero_stride(self)
numpy._core.tests.test_dtype.TestFromCTypes
numpy._core.tests.test_dtype.TestFromCTypes.check(ctype,dtype)
numpy._core.tests.test_dtype.TestFromCTypes.test_array(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_big_endian_structure(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_big_endian_structure_packed(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_bit_fields(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_large_packed_structure(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_little_endian_structure(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_little_endian_structure_packed(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_packed_structure(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_padded_structure(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_pairs(self,pair)
numpy._core.tests.test_dtype.TestFromCTypes.test_pointer(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_simple_endian_types(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_size_t(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_union(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_union_packed(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed(self)
numpy._core.tests.test_dtype.TestFromCTypes.test_void_pointer(self)
numpy._core.tests.test_dtype.TestFromDTypeAttribute
numpy._core.tests.test_dtype.TestFromDTypeAttribute.test_recursion(self)
numpy._core.tests.test_dtype.TestFromDTypeAttribute.test_simple(self)
numpy._core.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype(self)
numpy._core.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype_recursion(self)
numpy._core.tests.test_dtype.TestMetadata
numpy._core.tests.test_dtype.TestMetadata.test_base_metadata_copied(self)
numpy._core.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict(self)
numpy._core.tests.test_dtype.TestMetadata.test_metadata_takes_dict(self)
numpy._core.tests.test_dtype.TestMetadata.test_nested_metadata(self)
numpy._core.tests.test_dtype.TestMetadata.test_no_metadata(self)
numpy._core.tests.test_dtype.TestMonsterType
numpy._core.tests.test_dtype.TestMonsterType.test1(self)
numpy._core.tests.test_dtype.TestMonsterType.test_dict_recursion(self)
numpy._core.tests.test_dtype.TestMonsterType.test_list_recursion(self)
numpy._core.tests.test_dtype.TestMonsterType.test_tuple_recursion(self)
numpy._core.tests.test_dtype.TestPickling
numpy._core.tests.test_dtype.TestPickling.check_pickling(self,dtype)
numpy._core.tests.test_dtype.TestPickling.test_builtin(self,t)
numpy._core.tests.test_dtype.TestPickling.test_datetime(self,base,unit)
numpy._core.tests.test_dtype.TestPickling.test_metadata(self)
numpy._core.tests.test_dtype.TestPickling.test_pickle_dtype(self,dt)
numpy._core.tests.test_dtype.TestPickling.test_pickle_dtype_class(self,DType)
numpy._core.tests.test_dtype.TestPickling.test_structured(self)
numpy._core.tests.test_dtype.TestPickling.test_structured_aligned(self)
numpy._core.tests.test_dtype.TestPickling.test_structured_padded(self)
numpy._core.tests.test_dtype.TestPickling.test_structured_titles(self)
numpy._core.tests.test_dtype.TestPickling.test_structured_unaligned(self)
numpy._core.tests.test_dtype.TestPromotion
numpy._core.tests.test_dtype.TestPromotion.test_complex_other_value_based(self,weak_promotion,other,expected,expected_weak)
numpy._core.tests.test_dtype.TestPromotion.test_complex_pyscalar_promote_rational(self)
numpy._core.tests.test_dtype.TestPromotion.test_complex_scalar_value_based(self,other,expected)
numpy._core.tests.test_dtype.TestPromotion.test_float_int_pyscalar_promote_rational(self,weak_promotion,other,expected)
numpy._core.tests.test_dtype.TestPromotion.test_permutations_do_not_influence_result(self,dtypes,expected)
numpy._core.tests.test_dtype.TestPromotion.test_python_integer_promotion(self,val)
numpy._core.tests.test_dtype.TestRecord
numpy._core.tests.test_dtype.TestRecord.test_aligned_size(self)
numpy._core.tests.test_dtype.TestRecord.test_bool_commastring(self)
numpy._core.tests.test_dtype.TestRecord.test_comma_datetime(self)
numpy._core.tests.test_dtype.TestRecord.test_different_names(self)
numpy._core.tests.test_dtype.TestRecord.test_different_titles(self)
numpy._core.tests.test_dtype.TestRecord.test_empty_struct_alignment(self)
numpy._core.tests.test_dtype.TestRecord.test_equivalent_record(self)
numpy._core.tests.test_dtype.TestRecord.test_fieldless_views(self)
numpy._core.tests.test_dtype.TestRecord.test_fields_by_index(self)
numpy._core.tests.test_dtype.TestRecord.test_from_dict_with_zero_width_field(self)
numpy._core.tests.test_dtype.TestRecord.test_from_dictproxy(self)
numpy._core.tests.test_dtype.TestRecord.test_init_simple_structured(self)
numpy._core.tests.test_dtype.TestRecord.test_multifield_index(self,align_flag)
numpy._core.tests.test_dtype.TestRecord.test_mutate(self)
numpy._core.tests.test_dtype.TestRecord.test_mutate_error(self)
numpy._core.tests.test_dtype.TestRecord.test_nonint_offsets(self)
numpy._core.tests.test_dtype.TestRecord.test_nonstructured_with_object(self)
numpy._core.tests.test_dtype.TestRecord.test_not_lists(self)
numpy._core.tests.test_dtype.TestRecord.test_parenthesized_single_number(self)
numpy._core.tests.test_dtype.TestRecord.test_partial_dict(self)
numpy._core.tests.test_dtype.TestRecord.test_refcount_dictionary_setting(self)
numpy._core.tests.test_dtype.TestRecord.test_subarray_list(self,obj,dtype,expected)
numpy._core.tests.test_dtype.TestRecord.test_union_struct(self)
numpy._core.tests.test_dtype.TestString
numpy._core.tests.test_dtype.TestString.test_base_dtype_with_object_type(self)
numpy._core.tests.test_dtype.TestString.test_complex_dtype_str(self)
numpy._core.tests.test_dtype.TestString.test_empty_string_to_object(self)
numpy._core.tests.test_dtype.TestString.test_repr_str_subarray(self)
numpy._core.tests.test_dtype.TestString.test_repr_structured(self)
numpy._core.tests.test_dtype.TestString.test_repr_structured_datetime(self)
numpy._core.tests.test_dtype.TestString.test_repr_structured_not_packed(self)
numpy._core.tests.test_dtype.TestString.test_void_subclass_fields(self)
numpy._core.tests.test_dtype.TestString.test_void_subclass_sized(self)
numpy._core.tests.test_dtype.TestString.test_void_subclass_unsized(self)
numpy._core.tests.test_dtype.TestStructuredDtypeSparseFields
numpy._core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment(self)
numpy._core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment_fancy(self)
numpy._core.tests.test_dtype.TestStructuredObjectRefcounting
numpy._core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_create_delete(self,dt,pat,count,singleton,creation_func,creation_obj)
numpy._core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_indexing(self,shape,index,items_changed,dt,pat,count,singleton)
numpy._core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_item_setting(self,dt,pat,count,singleton)
numpy._core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_take_and_repeat(self,dt,pat,count,singleton)
numpy._core.tests.test_dtype.TestSubarray
numpy._core.tests.test_dtype.TestSubarray.test_aligned_empty(self)
numpy._core.tests.test_dtype.TestSubarray.test_alignment(self)
numpy._core.tests.test_dtype.TestSubarray.test_equivalent_record(self)
numpy._core.tests.test_dtype.TestSubarray.test_nonequivalent_record(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_equal(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_invalid(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_matches_ndim(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_monster(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_sequence(self)
numpy._core.tests.test_dtype.TestSubarray.test_shape_simple(self)
numpy._core.tests.test_dtype.TestSubarray.test_single_subarray(self)
numpy._core.tests.test_dtype.TestSubarray.test_subarray_base_item(self)
numpy._core.tests.test_dtype.TestSubarray.test_subarray_cast_copies(self)
numpy._core.tests.test_dtype.TestUserDType
numpy._core.tests.test_dtype.TestUserDType.test_custom_structured_dtype(self)
numpy._core.tests.test_dtype.TestUserDType.test_custom_structured_dtype_errors(self)
numpy._core.tests.test_dtype.assert_dtype_equal(a,b)
numpy._core.tests.test_dtype.assert_dtype_not_equal(a,b)
numpy._core.tests.test_dtype.iter_struct_object_dtypes()
numpy._core.tests.test_dtype.test_creating_dtype_with_dtype_class_errors()
numpy._core.tests.test_dtype.test_dtypes_are_true()
numpy._core.tests.test_dtype.test_invalid_dtype_string()
numpy._core.tests.test_dtype.test_keyword_argument()
numpy._core.tests.test_dtype.test_rational_dtype()
numpy._core.tests.test_dtype.test_result_type_integers_and_unitless_timedelta64()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalarmath.py----------------------------------------
A:numpy._core.tests.test_scalarmath.floating_types->numpy.floating.__subclasses__()
A:numpy._core.tests.test_scalarmath.complex_floating_types->numpy.complexfloating.__subclasses__()
A:numpy._core.tests.test_scalarmath.a->numpy.array(l[:3], dtype=np.uint64)
A:numpy._core.tests.test_scalarmath.a_scalar->atype(3)
A:numpy._core.tests.test_scalarmath.a_array->numpy.array([3], dtype=atype)
A:numpy._core.tests.test_scalarmath.b_scalar->btype(1)
A:numpy._core.tests.test_scalarmath.b_array->numpy.array([1], dtype=btype)
A:numpy._core.tests.test_scalarmath.b->t(0.0)
A:numpy._core.tests.test_scalarmath.res->op(val1, val2)
A:numpy._core.tests.test_scalarmath.scalar_res->op(scalar1, scalar2)
A:numpy._core.tests.test_scalarmath.arr1->numpy.array(2, dtype=dt1)
A:numpy._core.tests.test_scalarmath.arr2->numpy.array(3, dtype=dt2)
A:numpy._core.tests.test_scalarmath.i->numpy.dtype(numpy_type).type()
A:numpy._core.tests.test_scalarmath.f->fscalar(1)
A:numpy._core.tests.test_scalarmath.expected->op(np.asarray(val1), val2)
A:numpy._core.tests.test_scalarmath.exp1->numpy.ones_like(inp1)
A:numpy._core.tests.test_scalarmath.inp1[...]->numpy.ones_like(inp1)
A:numpy._core.tests.test_scalarmath.inp2[...]->numpy.ones_like(inp2)
A:numpy._core.tests.test_scalarmath.d->numpy.float32()
A:numpy._core.tests.test_scalarmath.o->sys.getrecursionlimit()
A:numpy._core.tests.test_scalarmath.(div, rem)->op(a, b)
A:numpy._core.tests.test_scalarmath.nlst->list(range(-127, 0))
A:numpy._core.tests.test_scalarmath.plst->list(range(1, 128))
A:numpy._core.tests.test_scalarmath.arg->list(itertools.product(dividend, divisor))
A:numpy._core.tests.test_scalarmath.tgt->list((divmod(*t) for t in arg))
A:numpy._core.tests.test_scalarmath.tgtdiv->numpy.where((tgtdiv == 0.0) & ((b < 0) ^ (a < 0)), -0.0, tgtdiv)
A:numpy._core.tests.test_scalarmath.tgtrem->numpy.where((tgtrem == 0.0) & (b < 0), -0.0, tgtrem)
A:numpy._core.tests.test_scalarmath.fa->numpy.array(l[:3], dtype=np.uint64).astype(dt)
A:numpy._core.tests.test_scalarmath.fb->t(0.0).astype(dt)
A:numpy._core.tests.test_scalarmath.rem->operator.mod(finf, fone)
A:numpy._core.tests.test_scalarmath.fone->numpy.array(1.0, dtype=dt)
A:numpy._core.tests.test_scalarmath.fzer->numpy.array(0.0, dtype=dt)
A:numpy._core.tests.test_scalarmath.finf->numpy.array(np.inf, dtype=dt)
A:numpy._core.tests.test_scalarmath.fnan->numpy.array(np.nan, dtype=dt)
A:numpy._core.tests.test_scalarmath.(div, mod)->op(fone, fzer)
A:numpy._core.tests.test_scalarmath.data->list()
A:numpy._core.tests.test_scalarmath.x->numpy.longdouble(1)
A:numpy._core.tests.test_scalarmath.finfo->numpy.finfo(t)
A:numpy._core.tests.test_scalarmath.constr->numpy.array([0] * storage_bytes, dtype=np.uint8)
A:numpy._core.tests.test_scalarmath.val_repr->repr(val)
A:numpy._core.tests.test_scalarmath.val2->other_type(2)
A:numpy._core.tests.test_scalarmath.accepted_types->set(np.typecodes['AllInteger'])
A:numpy._core.tests.test_scalarmath.seq->seq_type([1, 2, 3])
A:numpy._core.tests.test_scalarmath.max->st(np.iinfo(dtype).max)
A:numpy._core.tests.test_scalarmath.dt->numpy.dtype(type_code)
A:numpy._core.tests.test_scalarmath.shift_scl->numpy.dtype(type_code).type(shift)
A:numpy._core.tests.test_scalarmath.res_scl->op(val_scl, shift_scl)
A:numpy._core.tests.test_scalarmath.val_arr->numpy.array([val_scl] * 32, dtype=dt)
A:numpy._core.tests.test_scalarmath.shift_arr->numpy.array([shift] * 32, dtype=dt)
A:numpy._core.tests.test_scalarmath.res_arr->op(val_arr, shift_arr)
A:numpy._core.tests.test_scalarmath.numpy_val->scalar(val)
A:numpy._core.tests.test_scalarmath.val->st(100)
A:numpy._core.tests.test_scalarmath.min->st(np.iinfo(dtype).min)
A:numpy._core.tests.test_scalarmath.neg_1->st(-1)
A:numpy._core.tests.test_scalarmath.zero->st(0)
A:numpy._core.tests.test_scalarmath.myf_op->type('myf_op', (sctype,), {__op__: op_func, __rop__: rop_func})
A:numpy._core.tests.test_scalarmath.myt->type('myt', (subtype,), {__rop__: rop_func})
A:numpy._core.tests.test_scalarmath.val1->sctype(2)
numpy._core.tests.test_scalarmath.TestAbs
numpy._core.tests.test_scalarmath.TestAbs._test_abs_func(self,absfunc,test_dtype)
numpy._core.tests.test_scalarmath.TestAbs.test_builtin_abs(self,dtype)
numpy._core.tests.test_scalarmath.TestAbs.test_numpy_abs(self,dtype)
numpy._core.tests.test_scalarmath.TestBaseMath
numpy._core.tests.test_scalarmath.TestBaseMath.test_blocked(self)
numpy._core.tests.test_scalarmath.TestBaseMath.test_lower_align(self)
numpy._core.tests.test_scalarmath.TestBitShifts
numpy._core.tests.test_scalarmath.TestBitShifts.test_shift_all_bits(self,type_code,op)
numpy._core.tests.test_scalarmath.TestComplexDivision
numpy._core.tests.test_scalarmath.TestComplexDivision.test_branches(self)
numpy._core.tests.test_scalarmath.TestComplexDivision.test_signed_zeros(self)
numpy._core.tests.test_scalarmath.TestComplexDivision.test_zero_division(self)
numpy._core.tests.test_scalarmath.TestConversion
numpy._core.tests.test_scalarmath.TestConversion.test_iinfo_long_values(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_from_huge_longdouble(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble___int__(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_from_long(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_from_longdouble(self)
numpy._core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour(self)
numpy._core.tests.test_scalarmath.TestConversion.test_numpy_scalar_relational_operators(self)
numpy._core.tests.test_scalarmath.TestConversion.test_scalar_comparison_to_none(self)
numpy._core.tests.test_scalarmath.TestHash
numpy._core.tests.test_scalarmath.TestHash.test_complex_hashes(self,type_code)
numpy._core.tests.test_scalarmath.TestHash.test_float_and_complex_hashes(self,type_code)
numpy._core.tests.test_scalarmath.TestHash.test_integer_hashes(self,type_code)
numpy._core.tests.test_scalarmath.TestModulus
numpy._core.tests.test_scalarmath.TestModulus.test_float_modulus_corner_cases(self)
numpy._core.tests.test_scalarmath.TestModulus.test_float_modulus_exact(self)
numpy._core.tests.test_scalarmath.TestModulus.test_float_modulus_roundoff(self)
numpy._core.tests.test_scalarmath.TestModulus.test_inplace_floordiv_handling(self)
numpy._core.tests.test_scalarmath.TestModulus.test_modulus_basic(self)
numpy._core.tests.test_scalarmath.TestMultiply
numpy._core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like(self)
numpy._core.tests.test_scalarmath.TestMultiply.test_seq_repeat(self)
numpy._core.tests.test_scalarmath.TestNegative
numpy._core.tests.test_scalarmath.TestNegative.test_exceptions(self)
numpy._core.tests.test_scalarmath.TestNegative.test_result(self)
numpy._core.tests.test_scalarmath.TestPower
numpy._core.tests.test_scalarmath.TestPower.test_integers_to_negative_integer_power(self)
numpy._core.tests.test_scalarmath.TestPower.test_large_types(self)
numpy._core.tests.test_scalarmath.TestPower.test_mixed_types(self)
numpy._core.tests.test_scalarmath.TestPower.test_modular_power(self)
numpy._core.tests.test_scalarmath.TestPower.test_small_types(self)
numpy._core.tests.test_scalarmath.TestRepr
numpy._core.tests.test_scalarmath.TestRepr._test_type_repr(self,t)
numpy._core.tests.test_scalarmath.TestRepr.test_float_repr(self)
numpy._core.tests.test_scalarmath.TestSubtract
numpy._core.tests.test_scalarmath.TestSubtract.test_exceptions(self)
numpy._core.tests.test_scalarmath.TestSubtract.test_result(self)
numpy._core.tests.test_scalarmath.TestTypes
numpy._core.tests.test_scalarmath.TestTypes.test_leak(self)
numpy._core.tests.test_scalarmath.TestTypes.test_type_add(self)
numpy._core.tests.test_scalarmath.TestTypes.test_type_create(self)
numpy._core.tests.test_scalarmath.TestTypes.test_types(self)
numpy._core.tests.test_scalarmath._signs(dt)
numpy._core.tests.test_scalarmath.check_ufunc_scalar_equivalence(op,arr1,arr2)
numpy._core.tests.test_scalarmath.floordiv_and_mod(x,y)
numpy._core.tests.test_scalarmath.recursionlimit(n)
numpy._core.tests.test_scalarmath.test_array_scalar_ufunc_dtypes(op,dt1,dt2)
numpy._core.tests.test_scalarmath.test_array_scalar_ufunc_equivalence(op,arr1,arr2)
numpy._core.tests.test_scalarmath.test_int_float_promotion_truediv(fscalar)
numpy._core.tests.test_scalarmath.test_longdouble_complex()
numpy._core.tests.test_scalarmath.test_longdouble_operators_with_large_int(sctype,op)
numpy._core.tests.test_scalarmath.test_longdouble_operators_with_obj(sctype,op)
numpy._core.tests.test_scalarmath.test_operator_object_left(o,op,type_)
numpy._core.tests.test_scalarmath.test_operator_object_right(o,op,type_)
numpy._core.tests.test_scalarmath.test_operator_scalars(op,type1,type2)
numpy._core.tests.test_scalarmath.test_pyscalar_subclasses(subtype,__op__,__rop__,op,cmp)
numpy._core.tests.test_scalarmath.test_scalar_integer_operation_divbyzero(dtype,operation)
numpy._core.tests.test_scalarmath.test_scalar_integer_operation_overflow(dtype,operation)
numpy._core.tests.test_scalarmath.test_scalar_matches_array_op_with_pyscalar(op,sctype,other_type,rop)
numpy._core.tests.test_scalarmath.test_scalar_signed_integer_overflow(dtype,operation)
numpy._core.tests.test_scalarmath.test_scalar_unsigned_integer_overflow(dtype)
numpy._core.tests.test_scalarmath.test_subclass_deferral(sctype,__op__,__rop__,op,cmp)
numpy._core.tests.test_scalarmath.test_truediv_int()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_nep50_promotions.py----------------------------------------
A:numpy._core.tests.test_nep50_promotions.state->numpy._get_promotion_state()
A:numpy._core.tests.test_nep50_promotions.warning->str(recwarn.pop(RuntimeWarning).message)
A:numpy._core.tests.test_nep50_promotions.maxint->int(np.iinfo(dtype).max)
A:numpy._core.tests.test_nep50_promotions.res->numpy.result_type(*dtypes_sample)
A:numpy._core.tests.test_nep50_promotions.arr->numpy.array(1)
A:numpy._core.tests.test_nep50_promotions.optional->data.draw(strategies.lists(strategies.sampled_from(dtypes + optional_dtypes)))
A:numpy._core.tests.test_nep50_promotions.dtypes_sample->data.draw(strategies.permutations(all_dtypes))
A:numpy._core.tests.test_nep50_promotions.val->numpy.array([10, 10], dtype=object).astype(sctype)
A:numpy._core.tests.test_nep50_promotions.val_obj->numpy.array([10, 10], dtype=object)
A:numpy._core.tests.test_nep50_promotions.iinfo->numpy.iinfo(sctype)
numpy._core.tests.test_nep50_promotions._weak_promotion_enabled()
numpy._core.tests.test_nep50_promotions.create_with_array(sctype,value)
numpy._core.tests.test_nep50_promotions.create_with_scalar(sctype,value)
numpy._core.tests.test_nep50_promotions.test_expected_promotion(expected,dtypes,optional_dtypes,data)
numpy._core.tests.test_nep50_promotions.test_integer_comparison(sctype,other_val,comp)
numpy._core.tests.test_nep50_promotions.test_integer_integer_comparison(comp)
numpy._core.tests.test_nep50_promotions.test_nep50_complex_promotion()
numpy._core.tests.test_nep50_promotions.test_nep50_examples()
numpy._core.tests.test_nep50_promotions.test_nep50_huge_integers(ufunc,state)
numpy._core.tests.test_nep50_promotions.test_nep50_in_concat_and_choose()
numpy._core.tests.test_nep50_promotions.test_nep50_integer_conversion_errors()
numpy._core.tests.test_nep50_promotions.test_nep50_integer_regression()
numpy._core.tests.test_nep50_promotions.test_nep50_weak_integers(dtype)
numpy._core.tests.test_nep50_promotions.test_nep50_weak_integers_with_inexact(dtype)
numpy._core.tests.test_nep50_promotions.test_nep50_with_axisconcatenator()
numpy._core.tests.test_nep50_promotions.test_oob_creation(sctype,create)
numpy._core.tests.test_nep50_promotions.test_weak_promotion_scalar_path(op)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_defchararray.py----------------------------------------
A:numpy._core.tests.test_defchararray.A->numpy.array([[' abc ', ''], ['12345', 'MixedCase'], ['123 \t 345 \x00 ', 'UPPER']], dtype='S')
A:numpy._core.tests.test_defchararray.B->self.B.encode('unicode_escape')
A:numpy._core.tests.test_defchararray.C->numpy.array([[3, 7], [19, 1]], dtype=np.int64)
A:numpy._core.tests.test_defchararray.self.A->numpy.array([['abc', '123'], ['789', 'xyz']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.self.B->numpy.array([['efg', '456'], ['051', 'tuv']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.out1->numpy.char.equal(self.A, self.B)
A:numpy._core.tests.test_defchararray.out2->numpy.char.equal('a', 'a')
A:numpy._core.tests.test_defchararray.self.C->numpy.array(['ABCDEFGHIJKLMNOPQRSTUVWXYZ', '01234567890123456789012345']).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.T->self.A.expandtabs()
A:numpy._core.tests.test_defchararray.A0->self.A.decode('ascii')
A:numpy._core.tests.test_defchararray.tgt->numpy.array([[' ,a,b,c, ', ''], ['1,2,3,4,5', 'M#i#x#e#d#C#a#s#e'], ['1,2,3, ,\t, ,3,4,5, ,\x00, ', 'U#P#P#E#R']])
A:numpy._core.tests.test_defchararray.P->self.A.rpartition([b'3', b'M'])
A:numpy._core.tests.test_defchararray.R->self.A.replace([b'3', b'a'], [b'##########', b'@'])
A:numpy._core.tests.test_defchararray.S1->self.A.replace(b'A very long byte string, longer than A', b'')
A:numpy._core.tests.test_defchararray.S2->self.A.replace(b'', b'')
A:numpy._core.tests.test_defchararray.S3->self.A.replace(b'3', b'3')
A:numpy._core.tests.test_defchararray.S4->self.A.replace(b'3', b'', count=0)
A:numpy._core.tests.test_defchararray.a->numpy.array('0,0,0').view(np.char.chararray)
A:numpy._core.tests.test_defchararray.r1->numpy.array('0,0,0').view(np.char.chararray).replace('0', '1', count=np.arange(3))
A:numpy._core.tests.test_defchararray.r2->numpy.array('0,0,0').view(np.char.chararray).replace('0', [['1'], ['2']], count=np.arange(1, 4))
A:numpy._core.tests.test_defchararray.r3->numpy.array('0,0,0').view(np.char.chararray).replace(['0', '0,0', '0,0,0'], 'X')
A:numpy._core.tests.test_defchararray.r4->numpy.array('0,0,0').view(np.char.chararray).replace('5', 'ABCDE', count=-1)
A:numpy._core.tests.test_defchararray.r5->numpy.array('0,0,0').view(np.char.chararray).replace('5', 'ABCDE', count=[-1, -1, -1, 1])
A:numpy._core.tests.test_defchararray.AB->numpy.array([['abcefg', '123456'], ['789051', 'xyztuv']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.QA->numpy.array([['qabc', 'q123'], ['q789', 'qxyz']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.Ar->numpy.array([[A[0, 0] * r, A[0, 1] * r], [A[1, 0] * r, A[1, 1] * r]]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.F->numpy.array([['%d', '%f'], ['%s', '%r']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.FC->numpy.array([['3', '7.000000'], ['19', 'np.int64(1)']]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.A1->numpy.array([['1.000', '1'], ['1', repr(np.array(1)[()])]]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.A2->numpy.array([['1.000', '2'], ['3', repr(np.array(4)[()])]]).view(np.char.chararray)
A:numpy._core.tests.test_defchararray.arr->numpy.array([['abc ', 'def '], ['geh ', 'ijk ']], dtype='S4').view(np.char.chararray)
A:numpy._core.tests.test_defchararray.self.U->numpy.array([], dtype='U')
A:numpy._core.tests.test_defchararray.self.S->numpy.array([], dtype='S')
A:numpy._core.tests.test_defchararray.res->numpy.char.decode(self.S.reshape((1, 0, 1)))
A:numpy._core.tests.test_defchararray.seps->numpy.array(['-', '_'])
A:numpy._core.tests.test_defchararray.s->numpy.char.chararray((4,))
numpy._core.tests.test_defchararray.TestBasic
numpy._core.tests.test_defchararray.TestBasic.test_from_object_array(self)
numpy._core.tests.test_defchararray.TestBasic.test_from_object_array_unicode(self)
numpy._core.tests.test_defchararray.TestBasic.test_from_string(self)
numpy._core.tests.test_defchararray.TestBasic.test_from_string_array(self)
numpy._core.tests.test_defchararray.TestBasic.test_from_unicode(self)
numpy._core.tests.test_defchararray.TestBasic.test_from_unicode_array(self)
numpy._core.tests.test_defchararray.TestBasic.test_unicode_upconvert(self)
numpy._core.tests.test_defchararray.TestChar
numpy._core.tests.test_defchararray.TestChar.setup_method(self)
numpy._core.tests.test_defchararray.TestChar.test_it(self)
numpy._core.tests.test_defchararray.TestComparisons
numpy._core.tests.test_defchararray.TestComparisons.setup_method(self)
numpy._core.tests.test_defchararray.TestComparisons.test_equal(self)
numpy._core.tests.test_defchararray.TestComparisons.test_greater(self)
numpy._core.tests.test_defchararray.TestComparisons.test_greater_equal(self)
numpy._core.tests.test_defchararray.TestComparisons.test_less(self)
numpy._core.tests.test_defchararray.TestComparisons.test_less_equal(self)
numpy._core.tests.test_defchararray.TestComparisons.test_not_equal(self)
numpy._core.tests.test_defchararray.TestComparisons.test_type(self)
numpy._core.tests.test_defchararray.TestComparisonsMixed1(TestComparisons)
numpy._core.tests.test_defchararray.TestComparisonsMixed1.setup_method(self)
numpy._core.tests.test_defchararray.TestComparisonsMixed2(TestComparisons)
numpy._core.tests.test_defchararray.TestComparisonsMixed2.setup_method(self)
numpy._core.tests.test_defchararray.TestInformation
numpy._core.tests.test_defchararray.TestInformation.setup_method(self)
numpy._core.tests.test_defchararray.TestInformation.test_count(self)
numpy._core.tests.test_defchararray.TestInformation.test_endswith(self)
numpy._core.tests.test_defchararray.TestInformation.test_find(self,dtype,encode)
numpy._core.tests.test_defchararray.TestInformation.test_index(self)
numpy._core.tests.test_defchararray.TestInformation.test_isalnum(self)
numpy._core.tests.test_defchararray.TestInformation.test_isalpha(self)
numpy._core.tests.test_defchararray.TestInformation.test_isdigit(self)
numpy._core.tests.test_defchararray.TestInformation.test_islower(self)
numpy._core.tests.test_defchararray.TestInformation.test_isspace(self)
numpy._core.tests.test_defchararray.TestInformation.test_istitle(self)
numpy._core.tests.test_defchararray.TestInformation.test_isupper(self)
numpy._core.tests.test_defchararray.TestInformation.test_len(self)
numpy._core.tests.test_defchararray.TestInformation.test_rfind(self)
numpy._core.tests.test_defchararray.TestInformation.test_rindex(self)
numpy._core.tests.test_defchararray.TestInformation.test_startswith(self)
numpy._core.tests.test_defchararray.TestMethods
numpy._core.tests.test_defchararray.TestMethods.setup_method(self)
numpy._core.tests.test_defchararray.TestMethods.test_capitalize(self)
numpy._core.tests.test_defchararray.TestMethods.test_center(self)
numpy._core.tests.test_defchararray.TestMethods.test_decode(self)
numpy._core.tests.test_defchararray.TestMethods.test_encode(self)
numpy._core.tests.test_defchararray.TestMethods.test_expandtabs(self)
numpy._core.tests.test_defchararray.TestMethods.test_isdecimal(self)
numpy._core.tests.test_defchararray.TestMethods.test_isnumeric(self)
numpy._core.tests.test_defchararray.TestMethods.test_join(self)
numpy._core.tests.test_defchararray.TestMethods.test_ljust(self)
numpy._core.tests.test_defchararray.TestMethods.test_lower(self)
numpy._core.tests.test_defchararray.TestMethods.test_lstrip(self)
numpy._core.tests.test_defchararray.TestMethods.test_partition(self)
numpy._core.tests.test_defchararray.TestMethods.test_replace(self)
numpy._core.tests.test_defchararray.TestMethods.test_replace_broadcasting(self)
numpy._core.tests.test_defchararray.TestMethods.test_replace_count_and_size(self)
numpy._core.tests.test_defchararray.TestMethods.test_rjust(self)
numpy._core.tests.test_defchararray.TestMethods.test_rpartition(self)
numpy._core.tests.test_defchararray.TestMethods.test_rsplit(self)
numpy._core.tests.test_defchararray.TestMethods.test_rstrip(self)
numpy._core.tests.test_defchararray.TestMethods.test_split(self)
numpy._core.tests.test_defchararray.TestMethods.test_splitlines(self)
numpy._core.tests.test_defchararray.TestMethods.test_strip(self)
numpy._core.tests.test_defchararray.TestMethods.test_swapcase(self)
numpy._core.tests.test_defchararray.TestMethods.test_title(self)
numpy._core.tests.test_defchararray.TestMethods.test_upper(self)
numpy._core.tests.test_defchararray.TestMethodsEmptyArray
numpy._core.tests.test_defchararray.TestMethodsEmptyArray.setup_method(self)
numpy._core.tests.test_defchararray.TestMethodsEmptyArray.test_decode(self)
numpy._core.tests.test_defchararray.TestMethodsEmptyArray.test_decode_with_reshape(self)
numpy._core.tests.test_defchararray.TestMethodsEmptyArray.test_encode(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_decode(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_encode(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_expandtabs(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_join(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_mod(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_partition(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_replace(self)
numpy._core.tests.test_defchararray.TestMethodsScalarValues.test_rpartition(self)
numpy._core.tests.test_defchararray.TestOperations
numpy._core.tests.test_defchararray.TestOperations.setup_method(self)
numpy._core.tests.test_defchararray.TestOperations.test_add(self)
numpy._core.tests.test_defchararray.TestOperations.test_mod(self)
numpy._core.tests.test_defchararray.TestOperations.test_mul(self)
numpy._core.tests.test_defchararray.TestOperations.test_radd(self)
numpy._core.tests.test_defchararray.TestOperations.test_rmod(self)
numpy._core.tests.test_defchararray.TestOperations.test_rmul(self)
numpy._core.tests.test_defchararray.TestOperations.test_slice(self)
numpy._core.tests.test_defchararray.TestVecString
numpy._core.tests.test_defchararray.TestVecString.test_broadcast_error(self)
numpy._core.tests.test_defchararray.TestVecString.test_invalid_args_tuple(self)
numpy._core.tests.test_defchararray.TestVecString.test_invalid_function_args(self)
numpy._core.tests.test_defchararray.TestVecString.test_invalid_result_type(self)
numpy._core.tests.test_defchararray.TestVecString.test_invalid_type_descr(self)
numpy._core.tests.test_defchararray.TestVecString.test_non_existent_method(self)
numpy._core.tests.test_defchararray.TestVecString.test_non_string_array(self)
numpy._core.tests.test_defchararray.TestWhitespace
numpy._core.tests.test_defchararray.TestWhitespace.setup_method(self)
numpy._core.tests.test_defchararray.TestWhitespace.test1(self)
numpy._core.tests.test_defchararray.test_empty_indexing()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_indexerrors.py----------------------------------------
A:numpy._core.tests.test_indexerrors.x->numpy.empty((2, 3, 0, 4))
A:numpy._core.tests.test_indexerrors.d->numpy.zeros((5, 0), dtype=object)
A:numpy._core.tests.test_indexerrors.a->numpy.zeros((3, 3))
numpy._core.tests.test_indexerrors.TestIndexErrors
numpy._core.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_mapping(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_mapping_error_message(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_methods(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_put_exceptions(self)
numpy._core.tests.test_indexerrors.TestIndexErrors.test_take_from_object(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_strings.py----------------------------------------
A:numpy._core.tests.test_strings.arr_string->numpy.array(['a', 'b'], dtype='S')
A:numpy._core.tests.test_strings.arr_unicode->numpy.array(['a', 'c'], dtype='U')
A:numpy._core.tests.test_strings.res1->ufunc(arr_string, arr_unicode, signature='UU->?', casting='unsafe')
A:numpy._core.tests.test_strings.res2->ufunc(arr_string, arr_unicode, signature='SS->?', casting='unsafe')
A:numpy._core.tests.test_strings.expected->numpy.empty(np.broadcast_shapes(arr.shape, arr2.shape), dtype=bool)
A:numpy._core.tests.test_strings.native_dt->numpy.dtype(dtypes[0]).newbyteorder('=')
A:numpy._core.tests.test_strings.arr->numpy.array([np.nan, np.inf, -np.inf, fi.max, fi.min], dtype=float_dt)
A:numpy._core.tests.test_strings.new->numpy.array(new, dtype=dt)
A:numpy._core.tests.test_strings.arr2->numpy.empty((100, 1, 0, 1), dtype=dtypes[1])
A:numpy._core.tests.test_strings.float_dt->numpy.dtype(float_dt)
A:numpy._core.tests.test_strings.fi->numpy.finfo(float_dt)
A:numpy._core.tests.test_strings.res->numpy.array(res, dtype=dt)
A:numpy._core.tests.test_strings.in1->numpy.array(in1, dtype=dt)
A:numpy._core.tests.test_strings.in2->numpy.array(in2, dtype=dt)
A:numpy._core.tests.test_strings.out->numpy.array(out, dtype=dt)
A:numpy._core.tests.test_strings.a->numpy.array('0,0,0', dtype=dt)
A:numpy._core.tests.test_strings.i->numpy.array(3, dtype=i_dt)
A:numpy._core.tests.test_strings.in_->numpy.array(b'1')
A:numpy._core.tests.test_strings.sub->numpy.array(sub, dtype=dt)
A:numpy._core.tests.test_strings.prefix->numpy.array(prefix, dtype=dt)
A:numpy._core.tests.test_strings.suffix->numpy.array(suffix, dtype=dt)
A:numpy._core.tests.test_strings.chars->numpy.array(chars, dtype=dt)
A:numpy._core.tests.test_strings.buf->numpy.array(buf, dtype=dt)
A:numpy._core.tests.test_strings.old->numpy.array(old, dtype=dt)
A:numpy._core.tests.test_strings.r1->numpy.strings.replace(a, '0', '1', np.arange(3))
A:numpy._core.tests.test_strings.r1_res->numpy.array(['01234ABCDE6789' * i for i in range(4)], dtype=dt)
A:numpy._core.tests.test_strings.r2->numpy.strings.replace(a, '0', [['1'], ['2']], np.arange(1, 4))
A:numpy._core.tests.test_strings.r3->numpy.strings.replace(a, ['0', '0,0', '0,0,0'], 'X')
A:numpy._core.tests.test_strings.r4->numpy.strings.replace(a, '5', 'ABCDE', -1)
A:numpy._core.tests.test_strings.r5->numpy.strings.replace(a, '5', 'ABCDE', [-1, -1, -1, 1])
numpy._core.tests.test_strings.TestMethods
numpy._core.tests.test_strings.TestMethods.test_add(self,in1,in2,out,dt)
numpy._core.tests.test_strings.TestMethods.test_count(self,a,sub,start,end,out,dt)
numpy._core.tests.test_strings.TestMethods.test_endswith(self,a,suffix,start,end,out,dt)
numpy._core.tests.test_strings.TestMethods.test_expandtabs(self,buf,tabsize,res,dt)
numpy._core.tests.test_strings.TestMethods.test_expandtabs_raises_overflow(self,dt)
numpy._core.tests.test_strings.TestMethods.test_find(self,a,sub,start,end,out,dt)
numpy._core.tests.test_strings.TestMethods.test_index(self,buf,sub,start,end,res,dt)
numpy._core.tests.test_strings.TestMethods.test_index_raises(self,buf,sub,start,end,dt)
numpy._core.tests.test_strings.TestMethods.test_isalnum(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_isalpha(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_isdigit(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_islower(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_isspace(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_istitle(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_isupper(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_lstrip(self,a,chars,out,dt)
numpy._core.tests.test_strings.TestMethods.test_multiply(self,in1,in2,out,dt)
numpy._core.tests.test_strings.TestMethods.test_multiply_integer_dtypes(self,i_dt,dt)
numpy._core.tests.test_strings.TestMethods.test_multiply_raises(self,dt)
numpy._core.tests.test_strings.TestMethods.test_replace(self,buf,old,new,count,res,dt)
numpy._core.tests.test_strings.TestMethods.test_rfind(self,a,sub,start,end,out,dt)
numpy._core.tests.test_strings.TestMethods.test_rindex(self,buf,sub,start,end,res,dt)
numpy._core.tests.test_strings.TestMethods.test_rindex_raises(self,buf,sub,start,end,dt)
numpy._core.tests.test_strings.TestMethods.test_rstrip(self,a,chars,out,dt)
numpy._core.tests.test_strings.TestMethods.test_startswith(self,a,prefix,start,end,out,dt)
numpy._core.tests.test_strings.TestMethods.test_str_len(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethods.test_strip(self,a,chars,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_expandtabs(self,buf,res,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_index_raises_unicode(self,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_index_unicode(self,buf,sub,start,end,res,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_isalnum_unicode(self,in_,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_isdecimal_unicode(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_islower_unicode(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_isnumeric_unicode(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_istitle_unicode(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_isupper_unicode(self,in_,out,dt)
numpy._core.tests.test_strings.TestMethodsWithUnicode.test_replace_unicode(self,buf,old,new,count,res,dt)
numpy._core.tests.test_strings.TestReplaceOnArrays
numpy._core.tests.test_strings.TestReplaceOnArrays.test_replace_broadcasting(self,dt)
numpy._core.tests.test_strings.TestReplaceOnArrays.test_replace_count_and_size(self,dt)
numpy._core.tests.test_strings.TestUnicodeOnlyMethodsRaiseWithBytes
numpy._core.tests.test_strings.TestUnicodeOnlyMethodsRaiseWithBytes.test_isdecimal_raises(self)
numpy._core.tests.test_strings.TestUnicodeOnlyMethodsRaiseWithBytes.test_isnumeric_bytes(self)
numpy._core.tests.test_strings.check_itemsize(n_elem,dt)
numpy._core.tests.test_strings.test_float_to_string_cast(str_dt,float_dt)
numpy._core.tests.test_strings.test_mixed_string_comparison_ufuncs_fail(op,ufunc,sym)
numpy._core.tests.test_strings.test_mixed_string_comparisons_ufuncs_with_cast(op,ufunc,sym)
numpy._core.tests.test_strings.test_string_comparisons(op,ufunc,sym,dtypes,aligned)
numpy._core.tests.test_strings.test_string_comparisons_empty(op,ufunc,sym,dtypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_deprecations.py----------------------------------------
A:numpy._core.tests.test_deprecations.self.warn_ctx->warnings.catch_warnings(record=True)
A:numpy._core.tests.test_deprecations.self.log->self.warn_ctx.__enter__()
A:numpy._core.tests.test_deprecations.test_case_instance->_DeprecationTestCase()
A:numpy._core.tests.test_deprecations.x->numpy.array([1.51, 2, 3.51, 4], dtype=float)
A:numpy._core.tests.test_deprecations.res->numpy.fromstring(x_str, sep=',', count=4)
A:numpy._core.tests.test_deprecations.x_str->'1.51,2,3.51,4{}'.format(invalid_str)
A:numpy._core.tests.test_deprecations.bytestr->'1.51,2,3.51,4{}'.format(invalid_str).encode('ascii')
A:numpy._core.tests.test_deprecations.message->re.escape('tostring() is deprecated. Use tobytes() instead.')
A:numpy._core.tests.test_deprecations.arr->numpy.array([0, 0, 0], dtype=dtype)
A:numpy._core.tests.test_deprecations.b->numpy.array([[3.14]])
A:numpy._core.tests.test_deprecations.s->numpy.array([0, 0, 0], dtype=dtype).tostring()
A:numpy._core.tests.test_deprecations.scalar->scalar_type(0)
A:numpy._core.tests.test_deprecations.arr2->numpy.ones((2, 2, 1))
A:numpy._core.tests.test_deprecations.m->numpy.array([1, 2, 3]).view(np.matrix)
A:numpy._core.tests.test_deprecations.func->getattr(self.ctypes, name)
A:numpy._core.tests.test_deprecations.c->numpy.zeros(5)
A:numpy._core.tests.test_deprecations.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_deprecations.info->numpy.iinfo(dtype)
A:numpy._core.tests.test_deprecations.kwargs->dict(delimiter=',', missing_values='N/A', names=True)
A:numpy._core.tests.test_deprecations.test1->Test1()
A:numpy._core.tests.test_deprecations.test2->Test2()
numpy._core.tests.test_deprecations.BuiltInRoundComplexDType(_DeprecationTestCase)
numpy._core.tests.test_deprecations.BuiltInRoundComplexDType.test_deprecated(self)
numpy._core.tests.test_deprecations.BuiltInRoundComplexDType.test_not_deprecated(self)
numpy._core.tests.test_deprecations.FlatteningConcatenateUnsafeCast(_DeprecationTestCase)
numpy._core.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_deprecated(self)
numpy._core.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_not_deprecated(self)
numpy._core.tests.test_deprecations.TestArrayFinalizeNone(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestArrayFinalizeNone.test_use_none_is_deprecated(self)
numpy._core.tests.test_deprecations.TestBincount(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestBincount.test_bincount_minlength(self)
numpy._core.tests.test_deprecations.TestCtypesGetter(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestCtypesGetter.test_deprecated(self,name:str)->None
numpy._core.tests.test_deprecations.TestCtypesGetter.test_not_deprecated(self,name:str)->None
numpy._core.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation.test_deprecation_dtype_attribute_is_dtype(self)
numpy._core.tests.test_deprecations.TestDTypeCoercion(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDTypeCoercion.test_array_construction(self)
numpy._core.tests.test_deprecations.TestDTypeCoercion.test_dtype_coercion(self)
numpy._core.tests.test_deprecations.TestDTypeCoercion.test_not_deprecated(self)
numpy._core.tests.test_deprecations.TestDatetimeEvent(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDatetimeEvent.test_3_tuple(self)
numpy._core.tests.test_deprecations.TestDeprecatedArrayWrap(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDeprecatedArrayWrap.test_deprecated(self)
numpy._core.tests.test_deprecations.TestDeprecatedDTypeAliases(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDeprecatedDTypeAliases._check_for_warning(self,func)
numpy._core.tests.test_deprecations.TestDeprecatedDTypeAliases.test_a_dtype_alias(self)
numpy._core.tests.test_deprecations.TestDeprecatedDTypeParenthesizedRepeatCount(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDeprecatedDTypeParenthesizedRepeatCount.test_parenthesized_repeat_count(self,string)
numpy._core.tests.test_deprecations.TestDeprecatedFinfo(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDeprecatedFinfo.test_deprecated_none(self)
numpy._core.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar.test_deprecated(self)
numpy._core.tests.test_deprecations.TestFromStringAndFileInvalidData(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_data_file(self,invalid_str)
numpy._core.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_string(self,invalid_str)
numpy._core.tests.test_deprecations.TestFromstring(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestFromstring.test_fromstring(self)
numpy._core.tests.test_deprecations.TestGeneratorSum(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestGeneratorSum.test_generator_sum(self)
numpy._core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_index_broadcast_not_deprecated(self)
numpy._core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_subspace(self,index)
numpy._core.tests.test_deprecations.TestLibImports(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestLibImports.test_lib_functions_deprecation_call(self)
numpy._core.tests.test_deprecations.TestLoadtxtParseIntsViaFloat(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestLoadtxtParseIntsViaFloat.test_deprecated_raised(self,dtype)
numpy._core.tests.test_deprecations.TestLoadtxtParseIntsViaFloat.test_deprecated_warning(self,dtype)
numpy._core.tests.test_deprecations.TestMachAr(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestMachAr.test_deprecated_module(self)
numpy._core.tests.test_deprecations.TestMathAlias(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestMathAlias.test_deprecated_np_lib_math(self)
numpy._core.tests.test_deprecations.TestMatrixInOuter(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestMatrixInOuter.test_deprecated(self)
numpy._core.tests.test_deprecations.TestNonExactMatchDeprecation(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestNonExactMatchDeprecation.test_non_exact_match(self)
numpy._core.tests.test_deprecations.TestNonNumericConjugate(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestNonNumericConjugate.test_conjugate(self)
numpy._core.tests.test_deprecations.TestNonZero(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestNonZero.test_zerod(self)
numpy._core.tests.test_deprecations.TestPartitionBoolIndex(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestPartitionBoolIndex.test_deprecated(self,func)
numpy._core.tests.test_deprecations.TestPartitionBoolIndex.test_not_deprecated(self,func)
numpy._core.tests.test_deprecations.TestPyIntConversion(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestPyIntConversion.test_deprecated_scalar(self,dtype)
numpy._core.tests.test_deprecations.TestQuantileInterpolationDeprecation(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestQuantileInterpolationDeprecation.test_both_passed(self,func)
numpy._core.tests.test_deprecations.TestQuantileInterpolationDeprecation.test_deprecated(self,func)
numpy._core.tests.test_deprecations.TestRemovedGlobals
numpy._core.tests.test_deprecations.TestRemovedGlobals.test_attributeerror_includes_info(self,name)
numpy._core.tests.test_deprecations.TestScalarConversion(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestScalarConversion.test_behaviour(self)
numpy._core.tests.test_deprecations.TestScalarConversion.test_float_conversion(self)
numpy._core.tests.test_deprecations.TestSingleElementSignature(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestSingleElementSignature.test_deprecated(self)
numpy._core.tests.test_deprecations.TestTestDeprecated
numpy._core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated(self)
numpy._core.tests.test_deprecations.TestToString(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestToString.test_tostring(self)
numpy._core.tests.test_deprecations.TestToString.test_tostring_matches_tobytes(self)
numpy._core.tests.test_deprecations.TestTruthTestingEmptyArrays(_DeprecationTestCase)
numpy._core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_1d(self)
numpy._core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_2d(self)
numpy._core.tests.test_deprecations._DeprecationTestCase
numpy._core.tests.test_deprecations._DeprecationTestCase.assert_deprecated(self,function,num=1,ignore_others=False,function_fails=False,exceptions=np._NoValue,args=(),kwargs={})
numpy._core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated(self,function,args=(),kwargs={})
numpy._core.tests.test_deprecations._DeprecationTestCase.setup_method(self)
numpy._core.tests.test_deprecations._DeprecationTestCase.teardown_method(self)
numpy._core.tests.test_deprecations._VisibleDeprecationTestCase(_DeprecationTestCase)
numpy._core.tests.test_deprecations.test_future_scalar_attributes(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalar_methods.py----------------------------------------
A:numpy._core.tests.test_scalar_methods.f->numpy.ldexp(ftype(frac), exp)
A:numpy._core.tests.test_scalar_methods.(n, d)->numpy.ldexp(ftype(frac), exp).as_integer_ratio()
A:numpy._core.tests.test_scalar_methods.nf->numpy.longdouble(n)
A:numpy._core.tests.test_scalar_methods.df->numpy.longdouble(d)
A:numpy._core.tests.test_scalar_methods.value->cls(str_value)
A:numpy._core.tests.test_scalar_methods.float_array->numpy.arange(-5, 5).astype(code)
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio.test_against_known_values(self)
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio.test_errors(self,ftype)
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio.test_roundtrip(self,ftype,frac_vals,exp_vals)
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio.test_simple_fractions(self,ftype)
numpy._core.tests.test_scalar_methods.TestAsIntegerRatio.test_small(self,ftype,f,ratio)
numpy._core.tests.test_scalar_methods.TestBitCount
numpy._core.tests.test_scalar_methods.TestBitCount.test_bit_count(self)
numpy._core.tests.test_scalar_methods.TestBitCount.test_small(self,itype)
numpy._core.tests.test_scalar_methods.TestClassGetItem
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_abc(self,cls:Type[np.number])->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_abc_complexfloating(self)->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_abc_complexfloating_subscript_tuple(self,arg_len:int)->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_abc_non_numeric(self,cls:Type[np.generic])->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_concrete(self,code:str)->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_subscript_scalar(self)->None
numpy._core.tests.test_scalar_methods.TestClassGetItem.test_subscript_tuple(self,arg_len:int)->None
numpy._core.tests.test_scalar_methods.TestIsInteger
numpy._core.tests.test_scalar_methods.TestIsInteger.test_false(self,code:str)->None
numpy._core.tests.test_scalar_methods.TestIsInteger.test_special(self,code:str,str_value:str)->None
numpy._core.tests.test_scalar_methods.TestIsInteger.test_true(self,code:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_cython.py----------------------------------------
A:numpy._core.tests.test_cython.pytestmark->pytest.mark.skipif(cython is None, reason='requires cython')
A:numpy._core.tests.test_cython.srcdir->os.path.join(os.path.dirname(__file__), 'examples', 'cython')
A:numpy._core.tests.test_cython.native_file->str(build_dir / 'interpreter-native-file.ini')
A:numpy._core.tests.test_cython.dt64->numpy.datetime64('2016-01-01', 'ns')
A:numpy._core.tests.test_cython.result->checks.make_iso_8601_datetime(dt)
A:numpy._core.tests.test_cython.expected->numpy.timedelta64(12345, 'h').view('i8')
A:numpy._core.tests.test_cython.td64->numpy.timedelta64(12345, 'h')
A:numpy._core.tests.test_cython.res->checks.get_datetime_iso_8601_strlen()
A:numpy._core.tests.test_cython.dt->datetime(2016, 6, 2, 10, 45, 19)
A:numpy._core.tests.test_cython.bcast->numpy.broadcast(*arrays)
A:numpy._core.tests.test_cython.dtype->numpy.dtype('i,O')
A:numpy._core.tests.test_cython.arr->numpy.array([0, 10 + 10j], dtype='F')
A:numpy._core.tests.test_cython.it->numpy.nditer([arr, arr2])
A:numpy._core.tests.test_cython.arr2->numpy.random.rand(2, 1, 2)
numpy._core.tests.test_cython.TestDatetimeStrings
numpy._core.tests.test_cython.TestDatetimeStrings.test_get_datetime_iso_8601_strlen(self,install_temp)
numpy._core.tests.test_cython.TestDatetimeStrings.test_make_iso_8601_datetime(self,install_temp)
numpy._core.tests.test_cython.install_temp(tmpdir_factory)
numpy._core.tests.test_cython.test_abstract_scalars(install_temp)
numpy._core.tests.test_cython.test_complex(install_temp)
numpy._core.tests.test_cython.test_conv_intp(install_temp)
numpy._core.tests.test_cython.test_convert_datetime64_to_datetimestruct(install_temp)
numpy._core.tests.test_cython.test_default_int(install_temp)
numpy._core.tests.test_cython.test_dtype_flags(install_temp)
numpy._core.tests.test_cython.test_fillwithbytes(install_temp)
numpy._core.tests.test_cython.test_get_datetime64_unit(install_temp)
numpy._core.tests.test_cython.test_get_datetime64_value(install_temp)
numpy._core.tests.test_cython.test_get_timedelta64_value(install_temp)
numpy._core.tests.test_cython.test_is_datetime64_object(install_temp)
numpy._core.tests.test_cython.test_is_timedelta64_object(install_temp)
numpy._core.tests.test_cython.test_multiiter_fields(install_temp,arrays)
numpy._core.tests.test_cython.test_npyiter_api(install_temp)
numpy._core.tests.test_cython.test_ravel_axis(install_temp)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_shape_base.py----------------------------------------
A:numpy._core.tests.test_shape_base.a->ArrayLike()
A:numpy._core.tests.test_shape_base.b->ArrayLike()
A:numpy._core.tests.test_shape_base.res->array([[1, 2], [3, 4]])
A:numpy._core.tests.test_shape_base.desired->numpy.array([[1, 1, 2, 2], [1, 1, 2, 2]])
A:numpy._core.tests.test_shape_base.expected_res->numpy.array([[1, 2], [2, 3], [3, 4]])
A:numpy._core.tests.test_shape_base.axis->list(range(3))
A:numpy._core.tests.test_shape_base.r->numpy.concatenate(x, None)
A:numpy._core.tests.test_shape_base.d->array(['0.0', '1.0', '2.0', '3.0', '0', '1', '2', 'x'])
A:numpy._core.tests.test_shape_base.out->numpy.zeros_like(res)
A:numpy._core.tests.test_shape_base.rout->concatenate((a0, a1, a2), 2, out=out)
A:numpy._core.tests.test_shape_base.x->numpy.arange(1, 100)
A:numpy._core.tests.test_shape_base.r4->list(range(4))
A:numpy._core.tests.test_shape_base.r3->list(range(3))
A:numpy._core.tests.test_shape_base.a23->array([[10, 11, 12], [13, 14, 15]])
A:numpy._core.tests.test_shape_base.a13->array([[0, 1, 2]])
A:numpy._core.tests.test_shape_base.res_out->stack(to_concat, out=out, axis=axis, casting=casting)
A:numpy._core.tests.test_shape_base.res_dtype->stack(to_concat, dtype=out_dtype, axis=axis, casting=casting)
A:numpy._core.tests.test_shape_base.r1->array([[1, 2, 3], [4, 5, 6]])
A:numpy._core.tests.test_shape_base.(arrays, list_ndim, result_ndim, _)->_block_setup(arrays)
A:numpy._core.tests.test_shape_base.(_, _, _, total_size)->_block_setup([[1, 2], [3, 4]])
A:numpy._core.tests.test_shape_base.a_2d->numpy.ones((2, 2))
A:numpy._core.tests.test_shape_base.result->block([[a, b], [c]])
A:numpy._core.tests.test_shape_base.expected->numpy.array([[[1.0, 2.0, 2.0], [3.0, 3.0, 3.0], [3.0, 3.0, 3.0]]])
A:numpy._core.tests.test_shape_base.a_1d->numpy.array([1, 2, 3])
A:numpy._core.tests.test_shape_base.b_1d->numpy.array([2, 2])
A:numpy._core.tests.test_shape_base.one_2d->numpy.array([[1, 1, 1]])
A:numpy._core.tests.test_shape_base.two_2d->numpy.array([[2, 2, 2]])
A:numpy._core.tests.test_shape_base.three_2d->numpy.array([[3, 3, 3, 3, 3, 3]])
A:numpy._core.tests.test_shape_base.four_1d->numpy.array([4, 4, 4, 4, 4, 4])
A:numpy._core.tests.test_shape_base.five_0d->numpy.array(5)
A:numpy._core.tests.test_shape_base.six_1d->numpy.array([6, 6, 6, 6, 6])
A:numpy._core.tests.test_shape_base.zero_2d->numpy.zeros((2, 6))
A:numpy._core.tests.test_shape_base.one->numpy.array([1, 1, 1])
A:numpy._core.tests.test_shape_base.two->numpy.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]])
A:numpy._core.tests.test_shape_base.three->numpy.array([3, 3, 3])
A:numpy._core.tests.test_shape_base.four->numpy.array([4, 4, 4])
A:numpy._core.tests.test_shape_base.five->numpy.array(5)
A:numpy._core.tests.test_shape_base.six->numpy.array([6, 6, 6, 6, 6])
A:numpy._core.tests.test_shape_base.zero->numpy.zeros((2, 6))
A:numpy._core.tests.test_shape_base.arr_c->numpy.zeros((3, 3), order='C')
A:numpy._core.tests.test_shape_base.arr_f->numpy.zeros((3, 3), order='F')
A:numpy._core.tests.test_shape_base.c->ArrayLike()
numpy._core.tests.test_TestAtleast1d
numpy._core.tests.test_TestAtleast1d.test_0D_array(self)
numpy._core.tests.test_TestAtleast1d.test_1D_array(self)
numpy._core.tests.test_TestAtleast1d.test_2D_array(self)
numpy._core.tests.test_TestAtleast1d.test_3D_array(self)
numpy._core.tests.test_TestAtleast1d.test_r1array(self)
numpy._core.tests.test_TestAtleast2d
numpy._core.tests.test_TestAtleast2d.test_0D_array(self)
numpy._core.tests.test_TestAtleast2d.test_1D_array(self)
numpy._core.tests.test_TestAtleast2d.test_2D_array(self)
numpy._core.tests.test_TestAtleast2d.test_3D_array(self)
numpy._core.tests.test_TestAtleast2d.test_r2array(self)
numpy._core.tests.test_TestAtleast3d
numpy._core.tests.test_TestAtleast3d.test_0D_array(self)
numpy._core.tests.test_TestAtleast3d.test_1D_array(self)
numpy._core.tests.test_TestAtleast3d.test_2D_array(self)
numpy._core.tests.test_TestAtleast3d.test_3D_array(self)
numpy._core.tests.test_TestBlock
numpy._core.tests.test_TestBlock.block(self,request)
numpy._core.tests.test_TestBlock.test_3d(self,block)
numpy._core.tests.test_TestBlock.test_block_complicated(self,block)
numpy._core.tests.test_TestBlock.test_block_memory_order(self,block)
numpy._core.tests.test_TestBlock.test_block_mixed_1d_and_2d(self,block)
numpy._core.tests.test_TestBlock.test_block_simple_column_wise(self,block)
numpy._core.tests.test_TestBlock.test_block_simple_row_wise(self,block)
numpy._core.tests.test_TestBlock.test_block_total_size_estimate(self,block)
numpy._core.tests.test_TestBlock.test_block_with_1d_arrays_column_wise(self,block)
numpy._core.tests.test_TestBlock.test_block_with_1d_arrays_multiple_rows(self,block)
numpy._core.tests.test_TestBlock.test_block_with_1d_arrays_row_wise(self,block)
numpy._core.tests.test_TestBlock.test_block_with_mismatched_shape(self,block)
numpy._core.tests.test_TestBlock.test_different_ndims(self,block)
numpy._core.tests.test_TestBlock.test_different_ndims_depths(self,block)
numpy._core.tests.test_TestBlock.test_empty_lists(self,block)
numpy._core.tests.test_TestBlock.test_invalid_nesting(self,block)
numpy._core.tests.test_TestBlock.test_nested(self,block)
numpy._core.tests.test_TestBlock.test_no_lists(self,block)
numpy._core.tests.test_TestBlock.test_returns_copy(self,block)
numpy._core.tests.test_TestBlock.test_tuple(self,block)
numpy._core.tests.test_TestConcatenate
numpy._core.tests.test_TestConcatenate.test_bad_out_shape(self)
numpy._core.tests.test_TestConcatenate.test_concatenate(self)
numpy._core.tests.test_TestConcatenate.test_concatenate_axis_None(self)
numpy._core.tests.test_TestConcatenate.test_dtype_with_promotion(self,arrs,string_dt,axis)
numpy._core.tests.test_TestConcatenate.test_exceptions(self)
numpy._core.tests.test_TestConcatenate.test_large_concatenate_axis_None(self)
numpy._core.tests.test_TestConcatenate.test_operator_concat(self)
numpy._core.tests.test_TestConcatenate.test_out_and_dtype(self,axis,out_dtype,casting)
numpy._core.tests.test_TestConcatenate.test_returns_copy(self)
numpy._core.tests.test_TestConcatenate.test_string_dtype_does_not_inspect(self,axis)
numpy._core.tests.test_TestConcatenate.test_subarray_error(self,axis)
numpy._core.tests.test_TestHstack
numpy._core.tests.test_TestHstack.test_0D_array(self)
numpy._core.tests.test_TestHstack.test_1D_array(self)
numpy._core.tests.test_TestHstack.test_2D_array(self)
numpy._core.tests.test_TestHstack.test_casting_and_dtype(self)
numpy._core.tests.test_TestHstack.test_casting_and_dtype_type_error(self)
numpy._core.tests.test_TestHstack.test_empty_input(self)
numpy._core.tests.test_TestHstack.test_generator(self)
numpy._core.tests.test_TestHstack.test_non_iterable(self)
numpy._core.tests.test_TestVstack
numpy._core.tests.test_TestVstack.test_0D_array(self)
numpy._core.tests.test_TestVstack.test_1D_array(self)
numpy._core.tests.test_TestVstack.test_2D_array(self)
numpy._core.tests.test_TestVstack.test_2D_array2(self)
numpy._core.tests.test_TestVstack.test_casting_and_dtype(self)
numpy._core.tests.test_TestVstack.test_casting_and_dtype_type_error(self)
numpy._core.tests.test_TestVstack.test_empty_input(self)
numpy._core.tests.test_TestVstack.test_generator(self)
numpy._core.tests.test_TestVstack.test_non_iterable(self)
numpy._core.tests.test_shape_base.TestAtleast1d
numpy._core.tests.test_shape_base.TestAtleast1d.test_0D_array(self)
numpy._core.tests.test_shape_base.TestAtleast1d.test_1D_array(self)
numpy._core.tests.test_shape_base.TestAtleast1d.test_2D_array(self)
numpy._core.tests.test_shape_base.TestAtleast1d.test_3D_array(self)
numpy._core.tests.test_shape_base.TestAtleast1d.test_r1array(self)
numpy._core.tests.test_shape_base.TestAtleast2d
numpy._core.tests.test_shape_base.TestAtleast2d.test_0D_array(self)
numpy._core.tests.test_shape_base.TestAtleast2d.test_1D_array(self)
numpy._core.tests.test_shape_base.TestAtleast2d.test_2D_array(self)
numpy._core.tests.test_shape_base.TestAtleast2d.test_3D_array(self)
numpy._core.tests.test_shape_base.TestAtleast2d.test_r2array(self)
numpy._core.tests.test_shape_base.TestAtleast3d
numpy._core.tests.test_shape_base.TestAtleast3d.test_0D_array(self)
numpy._core.tests.test_shape_base.TestAtleast3d.test_1D_array(self)
numpy._core.tests.test_shape_base.TestAtleast3d.test_2D_array(self)
numpy._core.tests.test_shape_base.TestAtleast3d.test_3D_array(self)
numpy._core.tests.test_shape_base.TestBlock
numpy._core.tests.test_shape_base.TestBlock.block(self,request)
numpy._core.tests.test_shape_base.TestBlock.test_3d(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_complicated(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_memory_order(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_mixed_1d_and_2d(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_simple_column_wise(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_simple_row_wise(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_total_size_estimate(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_column_wise(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_multiple_rows(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_row_wise(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_block_with_mismatched_shape(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_different_ndims(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_different_ndims_depths(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_empty_lists(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_invalid_nesting(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_nested(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_no_lists(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_returns_copy(self,block)
numpy._core.tests.test_shape_base.TestBlock.test_tuple(self,block)
numpy._core.tests.test_shape_base.TestConcatenate
numpy._core.tests.test_shape_base.TestConcatenate.test_bad_out_shape(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_concatenate(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_concatenate_axis_None(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_dtype_with_promotion(self,arrs,string_dt,axis)
numpy._core.tests.test_shape_base.TestConcatenate.test_exceptions(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_large_concatenate_axis_None(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_operator_concat(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_out_and_dtype(self,axis,out_dtype,casting)
numpy._core.tests.test_shape_base.TestConcatenate.test_returns_copy(self)
numpy._core.tests.test_shape_base.TestConcatenate.test_string_dtype_does_not_inspect(self,axis)
numpy._core.tests.test_shape_base.TestConcatenate.test_subarray_error(self,axis)
numpy._core.tests.test_shape_base.TestHstack
numpy._core.tests.test_shape_base.TestHstack.test_0D_array(self)
numpy._core.tests.test_shape_base.TestHstack.test_1D_array(self)
numpy._core.tests.test_shape_base.TestHstack.test_2D_array(self)
numpy._core.tests.test_shape_base.TestHstack.test_casting_and_dtype(self)
numpy._core.tests.test_shape_base.TestHstack.test_casting_and_dtype_type_error(self)
numpy._core.tests.test_shape_base.TestHstack.test_empty_input(self)
numpy._core.tests.test_shape_base.TestHstack.test_generator(self)
numpy._core.tests.test_shape_base.TestHstack.test_non_iterable(self)
numpy._core.tests.test_shape_base.TestVstack
numpy._core.tests.test_shape_base.TestVstack.test_0D_array(self)
numpy._core.tests.test_shape_base.TestVstack.test_1D_array(self)
numpy._core.tests.test_shape_base.TestVstack.test_2D_array(self)
numpy._core.tests.test_shape_base.TestVstack.test_2D_array2(self)
numpy._core.tests.test_shape_base.TestVstack.test_casting_and_dtype(self)
numpy._core.tests.test_shape_base.TestVstack.test_casting_and_dtype_type_error(self)
numpy._core.tests.test_shape_base.TestVstack.test_empty_input(self)
numpy._core.tests.test_shape_base.TestVstack.test_generator(self)
numpy._core.tests.test_shape_base.TestVstack.test_non_iterable(self)
numpy._core.tests.test_shape_base.test_block_dispatcher()
numpy._core.tests.test_shape_base.test_stack()
numpy._core.tests.test_shape_base.test_stack_out_and_dtype(axis,out_dtype,casting)
numpy._core.tests.test_test_block_dispatcher()
numpy._core.tests.test_test_stack()
numpy._core.tests.test_test_stack_out_and_dtype(axis,out_dtype,casting)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_stringdtype.py----------------------------------------
A:numpy._core.tests.test_stringdtype.chars->numpy.array(chars, dtype='U1')
A:numpy._core.tests.test_stringdtype.ret->numpy.random.choice(chars, size=100 * 10, replace=True)
A:numpy._core.tests.test_stringdtype.hashes->set()
A:numpy._core.tests.test_stringdtype.dt->numpy.dtype('T')
A:numpy._core.tests.test_stringdtype.arr->numpy.array(inp, dtype=StringDType(na_object=None))
A:numpy._core.tests.test_stringdtype.a->numpy.array(['🐍--', '🦜-🦜-'], 'T')
A:numpy._core.tests.test_stringdtype.newarr->numpy.array(inp, dtype=StringDType(na_object=None)).astype(dtype2)
A:numpy._core.tests.test_stringdtype.expected->numpy.array(''.join(values), dtype=dtype)
A:numpy._core.tests.test_stringdtype.arr_as_U8->numpy.array(''.join(values), dtype=dtype).astype('U8')
A:numpy._core.tests.test_stringdtype.arr_as_U3->numpy.array(''.join(values), dtype=dtype).astype('U3')
A:numpy._core.tests.test_stringdtype.sarr->numpy.array(string_list, dtype='T')
A:numpy._core.tests.test_stringdtype.varr->numpy.array(utf8_bytes, dtype=void_dtype)
A:numpy._core.tests.test_stringdtype.barr->numpy.array(strings, dtype=bool)
A:numpy._core.tests.test_stringdtype.oarr->numpy.array(string_list, dtype=o_dtype)
A:numpy._core.tests.test_stringdtype.res->call_func(func, args, na_arr)
A:numpy._core.tests.test_stringdtype.ores->op(oarr2, oarr)
A:numpy._core.tests.test_stringdtype.orres->op(sarr2, oarr)
A:numpy._core.tests.test_stringdtype.olres->op(oarr2, sarr)
A:numpy._core.tests.test_stringdtype.sarr2->numpy.array([s + '2' for s in string_list], dtype=dtype)
A:numpy._core.tests.test_stringdtype.oarr2->numpy.array([s + '2' for s in string_list], dtype=o_dtype)
A:numpy._core.tests.test_stringdtype.e->numpy.empty((3,), self.dtype)
A:numpy._core.tests.test_stringdtype.na_object->getattr(arr.dtype, 'na_object', '')
A:numpy._core.tests.test_stringdtype.strings->strings.copy().copy()
A:numpy._core.tests.test_stringdtype.arr_sorted->numpy.array(sorted(strings), dtype=dtype)
A:numpy._core.tests.test_stringdtype.dtype->StringDType(na_object=na_object)
A:numpy._core.tests.test_stringdtype.is_nonzero->numpy.array([i for (i, item) in enumerate(strings) if len(item) != 0])
A:numpy._core.tests.test_stringdtype.strings_with_na->numpy.array(strings + [na_object], dtype=dtype)
A:numpy._core.tests.test_stringdtype.sarr_cat->numpy.array(string_list + string_list, dtype='T')
A:numpy._core.tests.test_stringdtype.arr_rev->numpy.array(string_list[::-1], dtype=StringDType())
A:numpy._core.tests.test_stringdtype.arr_copy->numpy.array(arr, copy=None, dtype=arr_rev.dtype)
A:numpy._core.tests.test_stringdtype.arr_view->numpy.array(arr, copy=None, dtype=arr.dtype)
A:numpy._core.tests.test_stringdtype.orig_dt->StringDType()
A:numpy._core.tests.test_stringdtype.result->numpy.strings.replace(a, '🦜-', '🦜†', count)
A:numpy._core.tests.test_stringdtype.ainp->numpy.array(inp, dtype=typename)
A:numpy._core.tests.test_stringdtype.sres->call_func(func, args, string_array)
A:numpy._core.tests.test_stringdtype.fi->numpy.finfo(typename)
A:numpy._core.tests.test_stringdtype.out->numpy.empty((), dtype=dtype)
A:numpy._core.tests.test_stringdtype.uarr->numpy.array(data, dtype=str)
A:numpy._core.tests.test_stringdtype.ufunc->getattr(np, ufunc_name + 'imum')
A:numpy._core.tests.test_stringdtype.arr1->numpy.array([dtype.na_object] + string_list, dtype=dtype)
A:numpy._core.tests.test_stringdtype.arr2->numpy.array(other_strings + [dtype.na_object], dtype=dtype)
A:numpy._core.tests.test_stringdtype.is_str->isinstance(dtype.na_object, str)
A:numpy._core.tests.test_stringdtype.lresult->numpy.array(['hello' + s for s in string_list], dtype=StringDType())
A:numpy._core.tests.test_stringdtype.rresult->numpy.array([s + 'hello' for s in string_list], dtype=StringDType())
A:numpy._core.tests.test_stringdtype.repeats->numpy.array([2, 3, 4])
A:numpy._core.tests.test_stringdtype.other_dtype->numpy.dtype(other_dtype)
A:numpy._core.tests.test_stringdtype.other->other.astype(other_dtype).astype(other_dtype)
A:numpy._core.tests.test_stringdtype.arr_cache->numpy.array(inp, dtype=StringDType(na_object=None)).copy()
A:numpy._core.tests.test_stringdtype.lres->numpy.multiply(arr, other, out=arr)
A:numpy._core.tests.test_stringdtype.rres->numpy.multiply(other, arr, out=arr)
A:numpy._core.tests.test_stringdtype.has_na->hasattr(dtype, 'na_object')
A:numpy._core.tests.test_stringdtype.sa->numpy.delete(sa, 3)
A:numpy._core.tests.test_stringdtype.ra->numpy.delete(sa, 3).astype(a.dtype)
A:numpy._core.tests.test_stringdtype.all_nats->list(map(''.join, all_nats))
A:numpy._core.tests.test_stringdtype.NaT_dt->numpy.datetime64('NaT')
A:numpy._core.tests.test_stringdtype.NaT_td->numpy.timedelta64('NaT')
A:numpy._core.tests.test_stringdtype.dt_array->numpy.array(inp, dtype=StringDType(na_object=None)).astype('M8[s]')
A:numpy._core.tests.test_stringdtype.td_array->numpy.array(inp, dtype=StringDType(na_object=None)).astype('m8[s]')
A:numpy._core.tests.test_stringdtype.rng->numpy.random.default_rng(80991187)
A:numpy._core.tests.test_stringdtype.rnd->numpy.random.default_rng(80991187).random()
A:numpy._core.tests.test_stringdtype.num->numpy.random.randint(0, arr.size)
A:numpy._core.tests.test_stringdtype.func->getattr(np.strings, function_name)
A:numpy._core.tests.test_stringdtype.ures->ures.astype(StringDType()).astype(StringDType())
A:numpy._core.tests.test_stringdtype.na_arr->numpy.insert(string_array, 0, dtype.na_object)
A:numpy._core.tests.test_stringdtype.unicode_bug_fail->pytest.mark.xfail(reason='unicode output width is buggy', strict=True)
A:numpy._core.tests.test_stringdtype.san_args->tuple((np.array(arg, dtype=array.dtype) if isinstance(arg, str) else arg for arg in args[1:]))
A:numpy._core.tests.test_stringdtype.indx->function(a, '🐍', start, stop)
A:numpy._core.tests.test_stringdtype.rjs->numpy.char.rjust(string_array, 1000)
A:numpy._core.tests.test_stringdtype.rju->numpy.char.rjust(unicode_array, 1000)
A:numpy._core.tests.test_stringdtype.ljs->numpy.char.ljust(string_array, 1000)
A:numpy._core.tests.test_stringdtype.lju->numpy.char.ljust(unicode_array, 1000)
A:numpy._core.tests.test_stringdtype.op->numpy.array(inp, dtype=op_dtype)
A:numpy._core.tests.test_stringdtype.self.dtype->StringDType(na_object=np.nan)
A:numpy._core.tests.test_stringdtype.self.view_dtype->numpy.dtype([('offset', f'u{sp}'), ('size', f'u{sp // 2}'), ('xsiz', f'V{sp // 2 - 1}'), ('size_and_flags', 'u1')] if sys.byteorder == 'little' else [('size_and_flags', 'u1'), ('xsiz', f'V{sp // 2 - 1}'), ('size', f'u{sp // 2}'), ('offset', f'u{sp}')])
A:numpy._core.tests.test_stringdtype.self.a->numpy.array([self.s_empty, self.s_short, self.s_medium, self.s_long], self.dtype)
A:numpy._core.tests.test_stringdtype.interface->dict(a.__array_interface__)
A:numpy._core.tests.test_stringdtype.is_short->self.is_short(self.a)
A:numpy._core.tests.test_stringdtype.length->numpy.strings.str_len(self.a)
A:numpy._core.tests.test_stringdtype.view->self.get_view(self.a)
A:numpy._core.tests.test_stringdtype.sizes->numpy.where(is_short, view['size_and_flags'] & 15, view['size'])
A:numpy._core.tests.test_stringdtype.z->numpy.zeros((2,), self.dtype)
A:numpy._core.tests.test_stringdtype.c->self.a.copy()
A:numpy._core.tests.test_stringdtype.in_arena->numpy.array([True, False, True, True])
A:numpy._core.tests.test_stringdtype.is_short_exp->self.is_short(self.a)
numpy._core.tests.test_stringdtype.TestImplementation
numpy._core.tests.test_stringdtype.TestImplementation.get_flags(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.get_view(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.in_arena(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.is_missing(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.is_on_heap(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.is_short(self,a)
numpy._core.tests.test_stringdtype.TestImplementation.setup_class(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_no_reuse_after_short(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_reuse_after_empty(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_reuse_after_missing(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_reuse_for_shorter(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_reuse_if_possible(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_reuse_with_setting(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_arena_use_with_setting(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_copy(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_empty(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_setup(self)
numpy._core.tests.test_stringdtype.TestImplementation.test_zeros(self)
numpy._core.tests.test_stringdtype.TestStringLikeCasts
numpy._core.tests.test_stringdtype.TestStringLikeCasts.test_bytes_casts(self,dtype,strings)
numpy._core.tests.test_stringdtype.TestStringLikeCasts.test_unicode_casts(self,dtype,strings)
numpy._core.tests.test_stringdtype.TestStringLikeCasts.test_void_casts(self,dtype,strings)
numpy._core.tests.test_stringdtype._pickle_load(filename)
numpy._core.tests.test_stringdtype.call_func(func,args,array,sanitize=True)
numpy._core.tests.test_stringdtype.coerce(request)
numpy._core.tests.test_stringdtype.coerce2(request)
numpy._core.tests.test_stringdtype.dtype(na_object,coerce)
numpy._core.tests.test_stringdtype.dtype2(na_object2,coerce2)
numpy._core.tests.test_stringdtype.get_dtype(na_object,coerce=True)
numpy._core.tests.test_stringdtype.na_object(request)
numpy._core.tests.test_stringdtype.na_object2(request)
numpy._core.tests.test_stringdtype.random_string_list()
numpy._core.tests.test_stringdtype.string_array(dtype)
numpy._core.tests.test_stringdtype.string_list()
numpy._core.tests.test_stringdtype.test_add_no_legacy_promote_with_signature()
numpy._core.tests.test_stringdtype.test_add_promoter(string_list)
numpy._core.tests.test_stringdtype.test_add_promoter_reduce()
numpy._core.tests.test_stringdtype.test_additional_unicode_cast(random_string_list,dtype)
numpy._core.tests.test_stringdtype.test_argmax(strings)
numpy._core.tests.test_stringdtype.test_array_creation_utf8(dtype,data)
numpy._core.tests.test_stringdtype.test_arrfuncs_zeros(arrfunc,expected)
numpy._core.tests.test_stringdtype.test_astype_copy_false()
numpy._core.tests.test_stringdtype.test_binary(string_array,unicode_array,function_name,args)
numpy._core.tests.test_stringdtype.test_cast_from_bool(strings,cast_answer)
numpy._core.tests.test_stringdtype.test_cast_to_bool(strings,cast_answer,any_answer,all_answer)
numpy._core.tests.test_stringdtype.test_cfloat_casts(typename)
numpy._core.tests.test_stringdtype.test_comparisons(string_list,dtype,op,o_dtype)
numpy._core.tests.test_stringdtype.test_concatenate(string_list)
numpy._core.tests.test_stringdtype.test_create_with_copy_none(string_list)
numpy._core.tests.test_stringdtype.test_create_with_na(dtype)
numpy._core.tests.test_stringdtype.test_creation_functions()
numpy._core.tests.test_stringdtype.test_datetime_timedelta_cast(dtype,input_data,input_dtype)
numpy._core.tests.test_stringdtype.test_dtype_creation()
numpy._core.tests.test_stringdtype.test_dtype_equality(dtype)
numpy._core.tests.test_stringdtype.test_dtype_repr(dtype)
numpy._core.tests.test_stringdtype.test_fancy_indexing(string_list)
numpy._core.tests.test_stringdtype.test_float_casts(typename)
numpy._core.tests.test_stringdtype.test_growing_strings(dtype)
numpy._core.tests.test_stringdtype.test_insert_scalar(dtype,string_list)
numpy._core.tests.test_stringdtype.test_isnan(dtype,string_list)
numpy._core.tests.test_stringdtype.test_max_regression()
numpy._core.tests.test_stringdtype.test_multiply_reduce()
numpy._core.tests.test_stringdtype.test_multiply_two_string_raises()
numpy._core.tests.test_stringdtype.test_nat_casts()
numpy._core.tests.test_stringdtype.test_nat_conversion()
numpy._core.tests.test_stringdtype.test_non_default_start_stop(function,start,stop,expected)
numpy._core.tests.test_stringdtype.test_nonzero(strings,na_object)
numpy._core.tests.test_stringdtype.test_null_roundtripping()
numpy._core.tests.test_stringdtype.test_pickle(dtype,string_list)
numpy._core.tests.test_stringdtype.test_replace_non_default_repeat(count)
numpy._core.tests.test_stringdtype.test_scalars_string_conversion(data,dtype)
numpy._core.tests.test_stringdtype.test_self_casts(dtype,dtype2,strings)
numpy._core.tests.test_stringdtype.test_set_replace_na(i)
numpy._core.tests.test_stringdtype.test_sized_integer_casts(bitsize,signed)
numpy._core.tests.test_stringdtype.test_sort(dtype,strings)
numpy._core.tests.test_stringdtype.test_string_too_large_error()
numpy._core.tests.test_stringdtype.test_strip_ljust_rjust_consistency(string_array,unicode_array)
numpy._core.tests.test_stringdtype.test_take(string_list)
numpy._core.tests.test_stringdtype.test_threaded_access_and_mutation(dtype,random_string_list)
numpy._core.tests.test_stringdtype.test_ufunc_add(dtype,string_list,other_strings,use_out)
numpy._core.tests.test_stringdtype.test_ufunc_add_reduce(dtype)
numpy._core.tests.test_stringdtype.test_ufunc_multiply(dtype,string_list,other,other_dtype,use_out)
numpy._core.tests.test_stringdtype.test_ufuncs_minmax(string_list,ufunc_name,func,use_out)
numpy._core.tests.test_stringdtype.test_unary(string_array,unicode_array,function_name)
numpy._core.tests.test_stringdtype.test_unset_na_coercion()
numpy._core.tests.test_stringdtype.test_unsized_integer_casts(typename,signed)
numpy._core.tests.test_stringdtype.test_where(string_list,na_object)
numpy._core.tests.test_stringdtype.unicode_array()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_longdouble.py----------------------------------------
A:numpy._core.tests.test_longdouble.LD_INFO->numpy.finfo(np.longdouble)
A:numpy._core.tests.test_longdouble.a->numpy.array([1, 2, 3, 4])
A:numpy._core.tests.test_longdouble.repr_precision->len(repr(np.longdouble(0.1)))
A:numpy._core.tests.test_longdouble.o_str->strtype(str(o))
A:numpy._core.tests.test_longdouble.o_strarr->numpy.asarray([o] * 3, dtype=strtype)
A:numpy._core.tests.test_longdouble.tgt->numpy.array([ldbl] * 5)
A:numpy._core.tests.test_longdouble.out->''.join([str(t) + '\n' for t in tgt])
A:numpy._core.tests.test_longdouble.res->numpy.fromfile(path, dtype=np.longdouble, sep=' ')
A:numpy._core.tests.test_longdouble.b->numpy.fromstring('1,234', dtype=np.longdouble, sep=' ')
A:numpy._core.tests.test_longdouble.str_val->str(int_val)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort_float(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_repr(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_sep(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_value(self)
numpy._core.tests.test_longdouble.TestCommaDecimalPointLocale.test_str_roundtrip_foreign(self)
numpy._core.tests.test_longdouble.TestFileBased
numpy._core.tests.test_longdouble.TestFileBased.test_fromfile(self)
numpy._core.tests.test_longdouble.TestFileBased.test_fromfile_bogus(self)
numpy._core.tests.test_longdouble.TestFileBased.test_fromfile_complex(self)
numpy._core.tests.test_longdouble.TestFileBased.test_genfromtxt(self)
numpy._core.tests.test_longdouble.TestFileBased.test_loadtxt(self)
numpy._core.tests.test_longdouble.TestFileBased.test_tofile_roundtrip(self)
numpy._core.tests.test_longdouble.test_array_and_stringlike_roundtrip(strtype)
numpy._core.tests.test_longdouble.test_array_repr()
numpy._core.tests.test_longdouble.test_bogus_string()
numpy._core.tests.test_longdouble.test_eps_positive()
numpy._core.tests.test_longdouble.test_format()
numpy._core.tests.test_longdouble.test_fromstring()
numpy._core.tests.test_longdouble.test_fromstring_bogus()
numpy._core.tests.test_longdouble.test_fromstring_complex()
numpy._core.tests.test_longdouble.test_fromstring_empty()
numpy._core.tests.test_longdouble.test_fromstring_missing()
numpy._core.tests.test_longdouble.test_longdouble_from_bool(bool_val)
numpy._core.tests.test_longdouble.test_longdouble_from_int(int_val)
numpy._core.tests.test_longdouble.test_musllinux_x86_64_signature()
numpy._core.tests.test_longdouble.test_percent()
numpy._core.tests.test_longdouble.test_scalar_extraction()
numpy._core.tests.test_longdouble.test_str_exact()
numpy._core.tests.test_longdouble.test_str_roundtrip()
numpy._core.tests.test_longdouble.test_str_roundtrip_bytes()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_dispatcher.py----------------------------------------
A:numpy._core.tests.test_cpu_dispatcher.test->numpy._core._umath_tests.test_dispatch()
numpy._core.tests.test_cpu_dispatcher.test_dispatcher()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_numerictypes.py----------------------------------------
A:numpy._core.tests.test_numerictypes.l->normalize_descr(dtype)
A:numpy._core.tests.test_numerictypes.h->numpy.array(self._buffer, dtype=self._descr)
A:numpy._core.tests.test_numerictypes.a->numpy.arange(10, dtype=np.float32)
A:numpy._core.tests.test_numerictypes.self.ary->numpy.array([(1, 2, 3, 4), (5, 6, 7, 8)], dtype='i4,f4,i2,c8')
A:numpy._core.tests.test_numerictypes.res->self.ary[['f0', 'f2']].tolist()
A:numpy._core.tests.test_numerictypes.actual->issctype(rep)
numpy._core.tests.test_numerictypes.CreateValues
numpy._core.tests.test_numerictypes.CreateValues.test_list_of_list_of_tuple(self)
numpy._core.tests.test_numerictypes.CreateValues.test_list_of_tuple(self)
numpy._core.tests.test_numerictypes.CreateValues.test_tuple(self)
numpy._core.tests.test_numerictypes.CreateZeros
numpy._core.tests.test_numerictypes.CreateZeros.test_zeros0D(self)
numpy._core.tests.test_numerictypes.CreateZeros.test_zerosMD(self)
numpy._core.tests.test_numerictypes.CreateZeros.test_zerosSD(self)
numpy._core.tests.test_numerictypes.ReadValuesNested
numpy._core.tests.test_numerictypes.ReadValuesNested.test_access_top_fields(self)
numpy._core.tests.test_numerictypes.ReadValuesNested.test_nested1_acessors(self)
numpy._core.tests.test_numerictypes.ReadValuesNested.test_nested1_descriptor(self)
numpy._core.tests.test_numerictypes.ReadValuesNested.test_nested2_acessors(self)
numpy._core.tests.test_numerictypes.ReadValuesNested.test_nested2_descriptor(self)
numpy._core.tests.test_numerictypes.ReadValuesPlain
numpy._core.tests.test_numerictypes.ReadValuesPlain.test_access_fields(self)
numpy._core.tests.test_numerictypes.TestBoolDefinition
numpy._core.tests.test_numerictypes.TestBoolDefinition.test_bool_definition(self)
numpy._core.tests.test_numerictypes.TestCreateValuesNestedMultiple(CreateValues)
numpy._core.tests.test_numerictypes.TestCreateValuesNestedSingle(CreateValues)
numpy._core.tests.test_numerictypes.TestCreateValuesPlainMultiple(CreateValues)
numpy._core.tests.test_numerictypes.TestCreateValuesPlainSingle(CreateValues)
numpy._core.tests.test_numerictypes.TestCreateZerosNested(CreateZeros)
numpy._core.tests.test_numerictypes.TestCreateZerosPlain(CreateZeros)
numpy._core.tests.test_numerictypes.TestDocStrings
numpy._core.tests.test_numerictypes.TestDocStrings.test_platform_dependent_aliases(self)
numpy._core.tests.test_numerictypes.TestEmptyField
numpy._core.tests.test_numerictypes.TestEmptyField.test_assign(self)
numpy._core.tests.test_numerictypes.TestIsDType
numpy._core.tests.test_numerictypes.TestIsDType.test_isdtype(self,dtype,close_dtype,dtype_group)
numpy._core.tests.test_numerictypes.TestIsDType.test_isdtype_invalid_args(self)
numpy._core.tests.test_numerictypes.TestIsDType.test_sctypes_complete(self)
numpy._core.tests.test_numerictypes.TestIsSubDType
numpy._core.tests.test_numerictypes.TestIsSubDType.test_both_abstract(self)
numpy._core.tests.test_numerictypes.TestIsSubDType.test_nondtype_nonscalartype(self)
numpy._core.tests.test_numerictypes.TestIsSubDType.test_same(self)
numpy._core.tests.test_numerictypes.TestIsSubDType.test_sibling_class(self)
numpy._core.tests.test_numerictypes.TestIsSubDType.test_subclass(self)
numpy._core.tests.test_numerictypes.TestIsSubDType.test_subclass_backwards(self)
numpy._core.tests.test_numerictypes.TestMaximumSctype
numpy._core.tests.test_numerictypes.TestMaximumSctype.test_complex(self,t)
numpy._core.tests.test_numerictypes.TestMaximumSctype.test_float(self,t)
numpy._core.tests.test_numerictypes.TestMaximumSctype.test_int(self,t)
numpy._core.tests.test_numerictypes.TestMaximumSctype.test_other(self,t)
numpy._core.tests.test_numerictypes.TestMaximumSctype.test_uint(self,t)
numpy._core.tests.test_numerictypes.TestMultipleFields
numpy._core.tests.test_numerictypes.TestMultipleFields._bad_call(self)
numpy._core.tests.test_numerictypes.TestMultipleFields.setup_method(self)
numpy._core.tests.test_numerictypes.TestMultipleFields.test_no_tuple(self)
numpy._core.tests.test_numerictypes.TestMultipleFields.test_return(self)
numpy._core.tests.test_numerictypes.TestReadValuesNestedMultiple(ReadValuesNested)
numpy._core.tests.test_numerictypes.TestReadValuesNestedSingle(ReadValuesNested)
numpy._core.tests.test_numerictypes.TestReadValuesPlainMultiple(ReadValuesPlain)
numpy._core.tests.test_numerictypes.TestReadValuesPlainSingle(ReadValuesPlain)
numpy._core.tests.test_numerictypes.TestScalarTypeNames
numpy._core.tests.test_numerictypes.TestScalarTypeNames.test_names_are_undersood_by_dtype(self,t)
numpy._core.tests.test_numerictypes.TestScalarTypeNames.test_names_are_unique(self)
numpy._core.tests.test_numerictypes.TestScalarTypeNames.test_names_reflect_attributes(self,t)
numpy._core.tests.test_numerictypes.TestSctypeDict
numpy._core.tests.test_numerictypes.TestSctypeDict.test_longdouble(self)
numpy._core.tests.test_numerictypes.TestSctypeDict.test_ulong(self)
numpy._core.tests.test_numerictypes.Test_sctype2char
numpy._core.tests.test_numerictypes.Test_sctype2char.test_abstract_type(self)
numpy._core.tests.test_numerictypes.Test_sctype2char.test_array_instance(self)
numpy._core.tests.test_numerictypes.Test_sctype2char.test_non_type(self)
numpy._core.tests.test_numerictypes.Test_sctype2char.test_other_type(self)
numpy._core.tests.test_numerictypes.Test_sctype2char.test_scalar_type(self)
numpy._core.tests.test_numerictypes.Test_sctype2char.test_third_party_scalar_type(self)
numpy._core.tests.test_numerictypes.normalize_descr(descr)
numpy._core.tests.test_numerictypes.test_issctype(rep,expected)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_arraymethod.py----------------------------------------
A:numpy._core.tests.test_arraymethod.method->get_castingimpl(type(np.dtype('d')), type(np.dtype('f')))
numpy._core.tests.test_arraymethod.TestClassGetItem
numpy._core.tests.test_arraymethod.TestClassGetItem.test_class_getitem(self,cls:type[np.ndarray])->None
numpy._core.tests.test_arraymethod.TestClassGetItem.test_subscript_tup(self,cls:type[np.ndarray],arg_len:int)->None
numpy._core.tests.test_arraymethod.TestResolveDescriptors
numpy._core.tests.test_arraymethod.TestResolveDescriptors.test_invalid_arguments(self,args)
numpy._core.tests.test_arraymethod.TestSimpleStridedCall
numpy._core.tests.test_arraymethod.TestSimpleStridedCall.test_invalid_arguments(self,args,error)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_hashtable.py----------------------------------------
A:numpy._core.tests.test_hashtable.keys->tuple(random.choices(pool, k=key_length))
A:numpy._core.tests.test_hashtable.dictionary->dict(keys_vals)
A:numpy._core.tests.test_hashtable.res->identityhash_tester(key_length, keys_vals, replace=True)
numpy._core.tests.test_hashtable.test_identity_hashtable(key_length,length)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_conversion_utils.py----------------------------------------
A:numpy._core.tests.test_conversion_utils.pattern->'\\(got {}\\)'.format(re.escape(repr(val)))
numpy._core.tests.test_conversion_utils.StringConverterTestCase
numpy._core.tests.test_conversion_utils.StringConverterTestCase._check(self,val,expected)
numpy._core.tests.test_conversion_utils.StringConverterTestCase._check_conv_assert_warn(self,val,expected)
numpy._core.tests.test_conversion_utils.StringConverterTestCase._check_value_error(self,val)
numpy._core.tests.test_conversion_utils.StringConverterTestCase.test_wrong_type(self)
numpy._core.tests.test_conversion_utils.StringConverterTestCase.test_wrong_value(self)
numpy._core.tests.test_conversion_utils.TestByteorderConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestByteorderConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestCastingConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestCastingConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestClipmodeConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestClipmodeConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestIntpConverter
numpy._core.tests.test_conversion_utils.TestIntpConverter.test_basic(self)
numpy._core.tests.test_conversion_utils.TestIntpConverter.test_float(self)
numpy._core.tests.test_conversion_utils.TestIntpConverter.test_none(self)
numpy._core.tests.test_conversion_utils.TestIntpConverter.test_too_large(self)
numpy._core.tests.test_conversion_utils.TestIntpConverter.test_too_many_dims(self)
numpy._core.tests.test_conversion_utils.TestOrderConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestOrderConverter.test_flatten_invalid_order(self)
numpy._core.tests.test_conversion_utils.TestOrderConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestSearchsideConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestSearchsideConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestSelectkindConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestSelectkindConverter.test_valid(self)
numpy._core.tests.test_conversion_utils.TestSortkindConverter(StringConverterTestCase)
numpy._core.tests.test_conversion_utils.TestSortkindConverter.test_valid(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_print.py----------------------------------------
A:numpy._core.tests.test_print.file->StringIO()
A:numpy._core.tests.test_print.file_tp->StringIO()
numpy._core.tests.test_print.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy._core.tests.test_print.TestCommaDecimalPointLocale.test_locale_double(self)
numpy._core.tests.test_print.TestCommaDecimalPointLocale.test_locale_longdouble(self)
numpy._core.tests.test_print.TestCommaDecimalPointLocale.test_locale_single(self)
numpy._core.tests.test_print._test_redirected_print(x,tp,ref=None)
numpy._core.tests.test_print.test_complex_inf_nan(dtype)
numpy._core.tests.test_print.test_complex_type_print(tp)
numpy._core.tests.test_print.test_complex_types(tp)
numpy._core.tests.test_print.test_float_type_print(tp)
numpy._core.tests.test_print.test_float_types(tp)
numpy._core.tests.test_print.test_nan_inf_float(tp)
numpy._core.tests.test_print.test_scalar_format()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_api.py----------------------------------------
A:numpy._core.tests.test_api.tobj->type(object)
A:numpy._core.tests.test_api.ones11->numpy.ones((1, 1), np.float64)
A:numpy._core.tests.test_api.tndarray->type(ones11)
A:numpy._core.tests.test_api.old_refcount->sys.getrefcount(np.float64)
A:numpy._core.tests.test_api.S2->numpy.dtype((bytes, 2))
A:numpy._core.tests.test_api.S3->numpy.dtype((bytes, 3))
A:numpy._core.tests.test_api.S5->numpy.dtype((bytes, 5))
A:numpy._core.tests.test_api.U2->numpy.dtype((str, 2))
A:numpy._core.tests.test_api.U3->numpy.dtype((str, 3))
A:numpy._core.tests.test_api.U5->numpy.dtype((str, 5))
A:numpy._core.tests.test_api.builtins->getattr(__builtins__, '__dict__', __builtins__)
A:numpy._core.tests.test_api.dat->numpy.array(memoryview(b'1.0'))
A:numpy._core.tests.test_api.a->numpy.array([(1, 2, 3)], dtype='u4,u4,u4')
A:numpy._core.tests.test_api.o->type('o', (object,), dict(__array__=custom__array__))()
A:numpy._core.tests.test_api.rt->numpy.array(rt)
A:numpy._core.tests.test_api.b->numpy.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)], dtype='u4,u4,u4')
A:numpy._core.tests.test_api.arr->numpy.arange(10, dtype=np.intp)
A:numpy._core.tests.test_api.dt->numpy.dtype(dt)
A:numpy._core.tests.test_api.expected->numpy.array([True, True, True, True, True, True, False, False], dtype=out_dtype)
A:numpy._core.tests.test_api.value->scalar_type(b'1+3j')
A:numpy._core.tests.test_api.mask->numpy.array(l)
A:numpy._core.tests.test_api.r->numpy.ones(power)
A:numpy._core.tests.test_api.d->numpy.zeros(power)
A:numpy._core.tests.test_api.imask->numpy.array(l).view(np.uint8)
A:numpy._core.tests.test_api.c->numpy.arange(24).reshape(2, 1, 4, 3).swapaxes(2, 3)
A:numpy._core.tests.test_api.res->numpy.copy(c, order='K')
A:numpy._core.tests.test_api.result->numpy.broadcast_arrays(a, b)
A:numpy._core.tests.test_api.output->numpy.full(shape, fill_value)
A:numpy._core.tests.test_api.res_true->numpy.arange(10, dtype=np.intp).astype(np.intp, copy=True)
A:numpy._core.tests.test_api.res_false->numpy.arange(10, dtype=np.intp).astype(np.intp, copy=False)
A:numpy._core.tests.test_api.res_false_float->numpy.arange(10, dtype=np.intp).astype(np.float64, copy=False)
numpy._core.tests.test_api.test_array_array()
numpy._core.tests.test_api.test_array_astype()
numpy._core.tests.test_api.test_array_astype_to_string_discovery_empty(dt)
numpy._core.tests.test_api.test_array_astype_to_void(dt)
numpy._core.tests.test_api.test_array_astype_warning(t)
numpy._core.tests.test_api.test_array_impossible_casts(array)
numpy._core.tests.test_api.test_astype_copyflag()
numpy._core.tests.test_api.test_broadcast_arrays()
numpy._core.tests.test_api.test_contiguous_flags()
numpy._core.tests.test_api.test_copy_order()
numpy._core.tests.test_api.test_copyto()
numpy._core.tests.test_api.test_copyto_fromscalar()
numpy._core.tests.test_api.test_copyto_permut()
numpy._core.tests.test_api.test_full_from_list(shape,fill_value,expected_output)
numpy._core.tests.test_api.test_none_to_nan_cast(dtype)
numpy._core.tests.test_api.test_object_array_astype_to_void()
numpy._core.tests.test_api.test_string_to_boolean_cast(dtype,out_dtype)
numpy._core.tests.test_api.test_string_to_complex_cast(str_type,scalar_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_arrayobject.py----------------------------------------
A:numpy._core.tests.test_arrayobject.arr->numpy.broadcast_to(vec, shape)
A:numpy._core.tests.test_arrayobject.num_of_axes->len(shape)
A:numpy._core.tests.test_arrayobject.vec->numpy.arange(shape[-1])
A:numpy._core.tests.test_arrayobject.tgt->numpy.swapaxes(arr, num_of_axes - 2, num_of_axes - 1)
numpy._core.tests.test_arrayobject.test_matrix_transpose_equals_swapaxes(shape)
numpy._core.tests.test_arrayobject.test_matrix_transpose_equals_transpose_2d()
numpy._core.tests.test_arrayobject.test_matrix_transpose_raises_error_for_1d()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_memmap.py----------------------------------------
A:numpy._core.tests.test_memmap.self.tmpfp->NamedTemporaryFile(prefix='mmap')
A:numpy._core.tests.test_memmap.self.data->arange(12, dtype=self.dtype)
A:numpy._core.tests.test_memmap.fp->memmap(self.tmpfp, shape=size, mode='w+', offset=offset)
A:numpy._core.tests.test_memmap.newfp->memmap(self.tmpfp, dtype=self.dtype, mode='r', shape=self.shape)
A:numpy._core.tests.test_memmap.abspath->str(Path(tmpname).resolve())
A:numpy._core.tests.test_memmap.fp_base->memmap(self.tmpfp, dtype=self.dtype, mode='w+', shape=self.shape)
A:numpy._core.tests.test_memmap.new1->memmap(self.tmpfp, shape=size, mode='w+', offset=offset).view()
A:numpy._core.tests.test_memmap.new2->memmap(self.tmpfp, shape=size, mode='w+', offset=offset).view().view()
A:numpy._core.tests.test_memmap.new_array->asarray(fp)
A:numpy._core.tests.test_memmap.result->unary_op(fp)
A:numpy._core.tests.test_memmap.mm->memmap(self.tmpfp, dtype='float64')
numpy._core.tests.test_TestMemmap
numpy._core.tests.test_TestMemmap.setup_method(self)
numpy._core.tests.test_TestMemmap.teardown_method(self)
numpy._core.tests.test_TestMemmap.test_arithmetic_drops_references(self)
numpy._core.tests.test_TestMemmap.test_attributes(self)
numpy._core.tests.test_TestMemmap.test_del(self)
numpy._core.tests.test_TestMemmap.test_empty_array(self)
numpy._core.tests.test_TestMemmap.test_filename(self,tmp_path)
numpy._core.tests.test_TestMemmap.test_filename_fileobj(self)
numpy._core.tests.test_TestMemmap.test_flush(self)
numpy._core.tests.test_TestMemmap.test_getitem(self)
numpy._core.tests.test_TestMemmap.test_indexing_drops_references(self)
numpy._core.tests.test_TestMemmap.test_memmap_subclass(self)
numpy._core.tests.test_TestMemmap.test_mmap_offset_greater_than_allocation_granularity(self)
numpy._core.tests.test_TestMemmap.test_no_shape(self)
numpy._core.tests.test_TestMemmap.test_open_with_filename(self,tmp_path)
numpy._core.tests.test_TestMemmap.test_path(self,tmp_path)
numpy._core.tests.test_TestMemmap.test_roundtrip(self)
numpy._core.tests.test_TestMemmap.test_shape_type(self)
numpy._core.tests.test_TestMemmap.test_slicing_keeps_references(self)
numpy._core.tests.test_TestMemmap.test_ufunc_return_ndarray(self)
numpy._core.tests.test_TestMemmap.test_unnamed_file(self)
numpy._core.tests.test_TestMemmap.test_view(self)
numpy._core.tests.test_memmap.TestMemmap
numpy._core.tests.test_memmap.TestMemmap.setup_method(self)
numpy._core.tests.test_memmap.TestMemmap.teardown_method(self)
numpy._core.tests.test_memmap.TestMemmap.test_arithmetic_drops_references(self)
numpy._core.tests.test_memmap.TestMemmap.test_attributes(self)
numpy._core.tests.test_memmap.TestMemmap.test_del(self)
numpy._core.tests.test_memmap.TestMemmap.test_empty_array(self)
numpy._core.tests.test_memmap.TestMemmap.test_filename(self,tmp_path)
numpy._core.tests.test_memmap.TestMemmap.test_filename_fileobj(self)
numpy._core.tests.test_memmap.TestMemmap.test_flush(self)
numpy._core.tests.test_memmap.TestMemmap.test_getitem(self)
numpy._core.tests.test_memmap.TestMemmap.test_indexing_drops_references(self)
numpy._core.tests.test_memmap.TestMemmap.test_memmap_subclass(self)
numpy._core.tests.test_memmap.TestMemmap.test_mmap_offset_greater_than_allocation_granularity(self)
numpy._core.tests.test_memmap.TestMemmap.test_no_shape(self)
numpy._core.tests.test_memmap.TestMemmap.test_open_with_filename(self,tmp_path)
numpy._core.tests.test_memmap.TestMemmap.test_path(self,tmp_path)
numpy._core.tests.test_memmap.TestMemmap.test_roundtrip(self)
numpy._core.tests.test_memmap.TestMemmap.test_shape_type(self)
numpy._core.tests.test_memmap.TestMemmap.test_slicing_keeps_references(self)
numpy._core.tests.test_memmap.TestMemmap.test_ufunc_return_ndarray(self)
numpy._core.tests.test_memmap.TestMemmap.test_unnamed_file(self)
numpy._core.tests.test_memmap.TestMemmap.test_view(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_abc.py----------------------------------------
numpy._core.tests.test_abc.TestABC
numpy._core.tests.test_abc.TestABC.test_abstract(self)
numpy._core.tests.test_abc.TestABC.test_complex(self)
numpy._core.tests.test_abc.TestABC.test_floats(self)
numpy._core.tests.test_abc.TestABC.test_int(self)
numpy._core.tests.test_abc.TestABC.test_uint(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_einsum.py----------------------------------------
A:numpy._core.tests.test_einsum.sizes->numpy.array([2, 3, 4, 5, 4, 3, 2, 6, 5, 4, 3])
A:numpy._core.tests.test_einsum.global_size_dict->dict(zip(chars, sizes))
A:numpy._core.tests.test_einsum.a->numpy.arange(9, dtype=int).reshape(3, 3)
A:numpy._core.tests.test_einsum.b->numpy.arange(9, dtype=int).reshape(3, 3)
A:numpy._core.tests.test_einsum.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_einsum.np_array->numpy.asarray([0, 0])
A:numpy._core.tests.test_einsum.c->numpy.einsum('ij,jk->ik', a, b, out=b)
A:numpy._core.tests.test_einsum.d->numpy.dot(a, b)
A:numpy._core.tests.test_einsum.tgt->numpy.ones((2, 1, 1), dtype=np.bool)
A:numpy._core.tests.test_einsum.p->numpy.ones((10, 2))
A:numpy._core.tests.test_einsum.q->numpy.ones((1, 2))
A:numpy._core.tests.test_einsum.x->numpy.ones((2, 2), np.float32)
A:numpy._core.tests.test_einsum.y->numpy.random.random_sample((10, 10, 10, 10)).trace(axis1=0, axis2=2).trace()
A:numpy._core.tests.test_einsum.objMult->numpy.array([Mult()])
A:numpy._core.tests.test_einsum.objNULL->numpy.ndarray(buffer=b'\x00' * np.intp(0).itemsize, shape=1, dtype=object)
A:numpy._core.tests.test_einsum.A->numpy.arange(3 * 3).reshape(3, 3).astype(np.float64)
A:numpy._core.tests.test_einsum.B->numpy.arange(3 * 3 * 64 * 64).reshape(3, 3, 64, 64).astype(np.float32)
A:numpy._core.tests.test_einsum.ref->numpy.einsum('...lmn,...lmno->...o', A, B, optimize=False)
A:numpy._core.tests.test_einsum.v->numpy.arange(dims[2])
A:numpy._core.tests.test_einsum.es->numpy.einsum('cl, cpxy->lpxy', A, B)
A:numpy._core.tests.test_einsum.tp->numpy.tensordot(A, B, axes=(0, 0))
A:numpy._core.tests.test_einsum.y1->numpy.zeros((5, 5))
A:numpy._core.tests.test_einsum.idx->numpy.arange(5)
A:numpy._core.tests.test_einsum.tensor->numpy.random.random_sample((10, 10, 10, 10))
A:numpy._core.tests.test_einsum.correct_base->numpy.ones((2, 2, 2))
A:numpy._core.tests.test_einsum.arr->numpy.array([[1]])
A:numpy._core.tests.test_einsum.scalar->numpy.array(2, dtype=dtype)
A:numpy._core.tests.test_einsum.res->numpy.einsum('...ij,...jk->...ik', a, a, out=a)
A:numpy._core.tests.test_einsum.out->numpy.ones(7, dtype=dtype)
A:numpy._core.tests.test_einsum.terms->string.split('->')[0].split(',')
A:numpy._core.tests.test_einsum.noopt->numpy.einsum(*path_test, optimize=False)
A:numpy._core.tests.test_einsum.opt->numpy.einsum(*path_test, optimize=exp_path)
A:numpy._core.tests.test_einsum.e->numpy.random.rand(1, 1, 5, 4)
A:numpy._core.tests.test_einsum.f->numpy.random.rand(7, 7)
A:numpy._core.tests.test_einsum.g->numpy.arange(64).reshape(2, 4, 8)
A:numpy._core.tests.test_einsum.tmp->numpy.einsum('...ft,mf->...mt', d, c, order='a', optimize=opt)
A:numpy._core.tests.test_einsum.outer_test->self.build_operands('a,b,c->abc')
A:numpy._core.tests.test_einsum.(path, path_str)->numpy.einsum_path(*path_test, optimize=exp_path)
A:numpy._core.tests.test_einsum.long_test->self.build_operands('acdf,jbje,gihb,hfac')
A:numpy._core.tests.test_einsum.long_test1->self.build_operands('acdf,jbje,gihb,hfac,gfac,gifabc,hfac')
A:numpy._core.tests.test_einsum.long_test2->self.build_operands('chd,bde,agbc,hiad,bdi,cgh,agdb')
A:numpy._core.tests.test_einsum.edge_test1->self.build_operands('eb,cb,fb->cef')
A:numpy._core.tests.test_einsum.edge_test2->self.build_operands('dd,fb,be,cdb->cef')
A:numpy._core.tests.test_einsum.edge_test3->self.build_operands('bca,cdb,dbf,afc->')
A:numpy._core.tests.test_einsum.edge_test4->self.build_operands('a,ac,ab,ad,cd,bd,bc->', size_dict={'a': 20, 'b': 20, 'c': 20, 'd': 20})
A:numpy._core.tests.test_einsum.path_test->self.build_operands('a,a,a->a')
numpy._core.tests.test_einsum.TestEinsum
numpy._core.tests.test_einsum.TestEinsum.check_einsum_sums(self,dtype,do_opt=False)
numpy._core.tests.test_einsum.TestEinsum.optimize_compare(self,subscripts,operands=None)
numpy._core.tests.test_einsum.TestEinsum.test_broadcasting_dot_cases(self)
numpy._core.tests.test_einsum.TestEinsum.test_collapse(self)
numpy._core.tests.test_einsum.TestEinsum.test_combined_views_mapping(self)
numpy._core.tests.test_einsum.TestEinsum.test_complex(self)
numpy._core.tests.test_einsum.TestEinsum.test_different_paths(self,dtype)
numpy._core.tests.test_einsum.TestEinsum.test_edge_cases(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_all_contig_non_contig_output(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_broadcast(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_errors(self,do_opt,einsum_fn)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_failed_on_p9_and_s390x(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_fixed_collapsingbug(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_fixedstridebug(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_misc(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_object_errors(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_specific_errors(self,do_opt)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat128(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat64(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_clongdouble(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_float16(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_float32(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_float64(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_int16(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_int32(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_int64(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_int8(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_longdouble(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_object(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_uint16(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_uint32(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_uint64(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_sums_uint8(self)
numpy._core.tests.test_einsum.TestEinsum.test_einsum_views(self)
numpy._core.tests.test_einsum.TestEinsum.test_expand(self)
numpy._core.tests.test_einsum.TestEinsum.test_hadamard_like_products(self)
numpy._core.tests.test_einsum.TestEinsum.test_index_transformations(self)
numpy._core.tests.test_einsum.TestEinsum.test_inner_product(self)
numpy._core.tests.test_einsum.TestEinsum.test_object_loop(self)
numpy._core.tests.test_einsum.TestEinsum.test_out_is_res(self)
numpy._core.tests.test_einsum.TestEinsum.test_output_order(self)
numpy._core.tests.test_einsum.TestEinsum.test_random_cases(self)
numpy._core.tests.test_einsum.TestEinsum.test_small_boolean_arrays(self)
numpy._core.tests.test_einsum.TestEinsum.test_subscript_range(self)
numpy._core.tests.test_einsum.TestEinsumPath
numpy._core.tests.test_einsum.TestEinsumPath.assert_path_equal(self,comp,benchmark)
numpy._core.tests.test_einsum.TestEinsumPath.build_operands(self,string,size_dict=global_size_dict)
numpy._core.tests.test_einsum.TestEinsumPath.test_edge_paths(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_long_paths(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_memory_contraints(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_path_type_input(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_path_type_input_internal_trace(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_path_type_input_invalid(self)
numpy._core.tests.test_einsum.TestEinsumPath.test_spaces(self)
numpy._core.tests.test_einsum.test_overlap()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_regression.py----------------------------------------
A:numpy._core.tests.test_regression.a->numpy.frombuffer(b'\x01' * size, dtype=np.bool)
A:numpy._core.tests.test_regression.b->numpy.frombuffer(b'\x80' * size, dtype=np.bool)
A:numpy._core.tests.test_regression.c->numpy.rec.array([(1, 2, 3), (4, 5, 6)])
A:numpy._core.tests.test_regression.origidx->numpy.array([-1, 0, 1])
A:numpy._core.tests.test_regression.idx->numpy.array(origidx)
A:numpy._core.tests.test_regression.ca->numpy.char.array(['Hi', 'There'])
A:numpy._core.tests.test_regression.h->numpy.array(buffer, dtype=descr)
A:numpy._core.tests.test_regression.x->numpy.array([1, 2, 4, 7, 0], dtype=np.int16)
A:numpy._core.tests.test_regression.ua->numpy.array([[[ucs_value * ulen] * 2] * 3] * 4, dtype='U%s' % ulen)
A:numpy._core.tests.test_regression.xa->numpy.where((a > 2) & (a < 6))
A:numpy._core.tests.test_regression.xb->numpy.where((b > 2) & (b < 6))
A:numpy._core.tests.test_regression.net->numpy.zeros(3, dtype='>f4')
A:numpy._core.tests.test_regression.max_net->numpy.zeros(3, dtype='>f4').max()
A:numpy._core.tests.test_regression.test->numpy.where(net <= 0.0, max_net, net)
A:numpy._core.tests.test_regression.correct->numpy.array([0.60520202, 0.00458849, 0.60520202])
A:numpy._core.tests.test_regression.dt->numpy.dtype(dict(names=['a', 'b'], offsets=[0, 0], formats=[np.int64, np.int64]))
A:numpy._core.tests.test_regression.buf->numpy.array([-5.171866611150749e-07 + 2.5618634555957426e-07j, 0, 0, 0, 0, 0])
A:numpy._core.tests.test_regression.y->str(x)
A:numpy._core.tests.test_regression._z->numpy.ones(10)
A:numpy._core.tests.test_regression._dummy->numpy.empty((0, 10))
A:numpy._core.tests.test_regression.z->numpy.array([2.2 - 1.1j], dtype)
A:numpy._core.tests.test_regression.ref->numpy.arange(0, -finfo.eps, 2 * finfo.eps)
A:numpy._core.tests.test_regression.finfo->numpy.finfo(np.float64)
A:numpy._core.tests.test_regression.descr->numpy.dtype([('i', int), ('f', float), ('s', '|S3')])
A:numpy._core.tests.test_regression.x.flat->numpy.arange(3, dtype=float)
A:numpy._core.tests.test_regression.x[:]->numpy.arange(3, dtype=float)
A:numpy._core.tests.test_regression.a[index]->numpy.array(np.nan)
A:numpy._core.tests.test_regression.dt_->pickle.load(f)
A:numpy._core.tests.test_regression.r->numpy.frombuffer(b'abcdefghijklmnop' * 4 * 3, dtype='i4,(2,3)u2')
A:numpy._core.tests.test_regression.tmp->numpy.atleast_1d([MyFloat()])
A:numpy._core.tests.test_regression.v->numpy.array(([0] * 5 + [1] * 6 + [2] * 6) * 4)
A:numpy._core.tests.test_regression.xs->numpy.empty(4, dt)
A:numpy._core.tests.test_regression.result->pickle.loads(test_data, encoding='bytes')
A:numpy._core.tests.test_regression.arr->numpy.array(['SOme wOrd Ǆ ß ᾛ ΣΣ ﬃ⁵Å Ç Ⅰ']).astype(np.str_)
A:numpy._core.tests.test_regression.arr2->numpy.array([[['H', 'e', 'l', 'l', 'o'], ['F', 'o', 'o', 'b', '']]])
A:numpy._core.tests.test_regression.res1->getattr(arr1, func)(arr2)
A:numpy._core.tests.test_regression.res2->getattr(np, func)(arr1, arr2)
A:numpy._core.tests.test_regression.arr1->numpy.zeros((5, 1), dtype=np.object_)
A:numpy._core.tests.test_regression.ra->numpy.fromiter(((i * 3, i * 2) for i in range(10)), dtype='i8,f8')
A:numpy._core.tests.test_regression.rb->numpy.rec.array(ra, dtype=dt)
A:numpy._core.tests.test_regression.x1->numpy.array([[1, 2], [3, 4], [5, 6]])
A:numpy._core.tests.test_regression.x2->numpy.array(['a', 'dd', 'xyz'])
A:numpy._core.tests.test_regression.x3->numpy.array([1.1, 2, 3])
A:numpy._core.tests.test_regression.data->data.transpose(0, 2, 1).copy().transpose(0, 2, 1).copy()
A:numpy._core.tests.test_regression.dt1->numpy.dtype([('f0', 'i8'), ('f1', 'i8')])
A:numpy._core.tests.test_regression.dt2->numpy.dtype(('uint32', (2,)))
A:numpy._core.tests.test_regression.a2->numpy.array([s[:i]] * 5)
A:numpy._core.tests.test_regression.dt0->numpy.dtype([('f0', 'i4'), ('f1', 'i4')])
A:numpy._core.tests.test_regression.tosubtract->numpy.arange(5)
A:numpy._core.tests.test_regression.todivide->numpy.array([2.0, 0.5, 0.25])
A:numpy._core.tests.test_regression.ref_d->sys.getrefcount(d)
A:numpy._core.tests.test_regression.s->pickle.dumps(val, protocol)
A:numpy._core.tests.test_regression.uradians->numpy.frompyfunc(radians, 1, 1)
A:numpy._core.tests.test_regression.big_endian->numpy.array([83.4, 83.5], dtype='>f8')
A:numpy._core.tests.test_regression.little_endian->numpy.array([83.4, 83.5], dtype='<f8')
A:numpy._core.tests.test_regression.new->pickle.loads(pickle.dumps(el, protocol=proto))
A:numpy._core.tests.test_regression.index->numpy.array(0, dtype=np.int32)
A:numpy._core.tests.test_regression.cnt0_a->cnt(a)
A:numpy._core.tests.test_regression.cnt0_b->cnt(b)
A:numpy._core.tests.test_regression.cnt0_c->cnt(c)
A:numpy._core.tests.test_regression.arr0->numpy.zeros(2, dtype=np.object_)
A:numpy._core.tests.test_regression.d->numpy.datetime64('2015-07-04 12:59:59.50', 'ns')
A:numpy._core.tests.test_regression.oldsize->numpy.setbufsize(10 * 16)
A:numpy._core.tests.test_regression.dtype->numpy.rec.format_parser(['i4', 'i4'], [], [])
A:numpy._core.tests.test_regression.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy._core.tests.test_regression.filename->os.path.join(data_dir, 'astype_copy.pkl')
A:numpy._core.tests.test_regression.xp->numpy.array(['SOme wOrd Ǆ ß ᾛ ΣΣ ﬃ⁵Å Ç Ⅰ']).astype(np.str_).__array_namespace__(api_version=None)
A:numpy._core.tests.test_regression.xpd->numpy.array(['SOme wOrd Ǆ ß ᾛ ΣΣ ﬃ⁵Å Ç Ⅰ']).astype(np.str_).__array_namespace__(api_version=None).astype(np.float64)
A:numpy._core.tests.test_regression.self.info->getattr(obj, 'info', '')
A:numpy._core.tests.test_regression.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy._core.tests.test_regression.dat2->TestArray([2, 3, 1, 0], 'jubba')
A:numpy._core.tests.test_regression.t->T()
A:numpy._core.tests.test_regression.C->numpy.array([-np.inf, -3 + 4j, 0, 4 - 3j, np.inf, np.nan])
A:numpy._core.tests.test_regression.have->numpy.sign(C)
A:numpy._core.tests.test_regression.want->numpy.array([-1 + 0j, -0.6 + 0.8j, 0 + 0j, 0.8 - 0.6j, 1 + 0j, complex(np.nan, np.nan)])
A:numpy._core.tests.test_regression.b2->numpy.object_(3.0)
A:numpy._core.tests.test_regression.test_string->numpy.bytes_('')
A:numpy._core.tests.test_regression.test_string_void_scalar->numpy._core.multiarray.scalar(np.dtype(('V', test_string.dtype.itemsize)), test_string.tobytes())
A:numpy._core.tests.test_regression.test_record->numpy.ones((), 'i,i')
A:numpy._core.tests.test_regression.test_record_void_scalar->numpy._core.multiarray.scalar(test_record.dtype, test_record.tobytes())
A:numpy._core.tests.test_regression.i->numpy.lexsort((a[::-1], b))
A:numpy._core.tests.test_regression.e->numpy.empty((2,), dtype=(np.str_, 8))
A:numpy._core.tests.test_regression.a1->numpy.array(a, '|S%d' % i)
A:numpy._core.tests.test_regression.s1->numpy.array(('a', 'Foo'), dtype='c,O')
A:numpy._core.tests.test_regression.s2->numpy.array(('b', 'Bar'), dtype='c,O')
A:numpy._core.tests.test_regression.numb->sys.getrefcount(strb)
A:numpy._core.tests.test_regression.numa->sys.getrefcount(stra)
A:numpy._core.tests.test_regression.min->numpy.array([np.iinfo(t).min])
A:numpy._core.tests.test_regression.out->numpy.logspace(start, stop, num=5, axis=1, dtype=np.float32)
A:numpy._core.tests.test_regression.ret->numpy.fromfile(f, count=4, dtype='u1')
A:numpy._core.tests.test_regression.cnan->complex(0, np.nan)
A:numpy._core.tests.test_regression.lut->numpy.ones((5 + 3, 4), float)
A:numpy._core.tests.test_regression.rgba->numpy.empty(shape=a.shape + (4,), dtype=lut.dtype)
A:numpy._core.tests.test_regression.c1->sys.getrefcount(rgba)
A:numpy._core.tests.test_regression.c2->sys.getrefcount(rgba)
A:numpy._core.tests.test_regression.f0->tempfile.NamedTemporaryFile()
A:numpy._core.tests.test_regression.obj->numpy.asarray(input_array).view(cls)
A:numpy._core.tests.test_regression.oldsqueeze->OldSqueeze(np.array([[1], [2], [3]]))
A:numpy._core.tests.test_regression.a[()]->numpy.array(4)
A:numpy._core.tests.test_regression.blob->pickle.dumps(data, protocol=1)
A:numpy._core.tests.test_regression.bytestring->'\x01  '.encode('ascii')
A:numpy._core.tests.test_regression.a_rec->numpy.array([(0, 1), (3, 2)], dtype='i4,i8')
A:numpy._core.tests.test_regression.a_obj->numpy.empty((2,), dtype=object)
A:numpy._core.tests.test_regression.acnt->sys.getrefcount(a)
A:numpy._core.tests.test_regression.res->numpy.vectorize(f, otypes=[arr.dtype])(arr)
A:numpy._core.tests.test_regression.data_str->numpy.array([[['H', 'e', 'l', 'l', 'o'], ['F', 'o', 'o', 'b', '']]]).tobytes('F')
A:numpy._core.tests.test_regression.data_back->numpy.ndarray(arr2.shape, arr2.dtype, buffer=data_str, order='F')
A:numpy._core.tests.test_regression.count->numpy.count_nonzero(arr)
A:numpy._core.tests.test_regression.formatted->'{0}'.format(arr[0])
A:numpy._core.tests.test_regression.arr_cp->copy.deepcopy(arr)
A:numpy._core.tests.test_regression.rhs->Foo()
A:numpy._core.tests.test_regression.lhs->numpy.array(1)
A:numpy._core.tests.test_regression.uf->numpy.frompyfunc(f, 1, 0)
A:numpy._core.tests.test_regression.expected->numpy.array([[1.0, 3.1621094, 10.0, 31.625, 100.0], [100.0, 31.625, 10.0, 3.1621094, 1.0]], dtype=np.float32)
A:numpy._core.tests.test_regression.recordtype->numpy.dtype([('a', np.float64), ('b', np.int32), ('d', (str, 5))])
A:numpy._core.tests.test_regression.before->sys.getrefcount(a)
A:numpy._core.tests.test_regression.after->sys.getrefcount(a)
A:numpy._core.tests.test_regression.val->t()
A:numpy._core.tests.test_regression.scalar_types->set(np._core.sctypeDict.values())
A:numpy._core.tests.test_regression.item->sctype(values.get(sctype, 1))
A:numpy._core.tests.test_regression.item2->copy.copy(item)
A:numpy._core.tests.test_regression.va->numpy.zeros(10, 'V4')
A:numpy._core.tests.test_regression.structure->numpy.array([1], dtype=[(('x', 'X'), np.object_)])
A:numpy._core.tests.test_regression.structure[0]['x']->numpy.array([2])
A:numpy._core.tests.test_regression.scvalue->sctype(values.get(ch, 3))
A:numpy._core.tests.test_regression.squeezed->sctype(values.get(ch, 3)).squeeze(axis=axis)
A:numpy._core.tests.test_regression.base->sys.getrefcount(s)
A:numpy._core.tests.test_regression.dumped->pickle.dumps(arr, protocol=proto)
A:numpy._core.tests.test_regression.c_arr->numpy.ctypeslib.as_ctypes(arr)
A:numpy._core.tests.test_regression.f->numpy.frompyfunc(cassé, 1, 1)
A:numpy._core.tests.test_regression.carr->numpy.char.chararray((2,), itemsize=25)
A:numpy._core.tests.test_regression.start->numpy.array([0, 2], dtype=np.float16)
A:numpy._core.tests.test_regression.stop->numpy.array([2, 0], dtype=np.float16)
A:numpy._core.tests.test_regression.out2->numpy.logspace(start, stop, num=5, axis=1, dtype=np.float32, base=np.array([10.0]))
A:numpy._core.tests.test_regression.vals->numpy.linspace(0, 1, num=128)
A:numpy._core.tests.test_regression.expected_res->numpy.square(in_vec)
numpy._core.tests.test_regression.TestRegression
numpy._core.tests.test_regression.TestRegression.test_0d_string_scalar(self)
numpy._core.tests.test_regression.TestRegression.test_2d__array__shape(self)
numpy._core.tests.test_regression.TestRegression.test__array_interface__descr(self)
numpy._core.tests.test_regression.TestRegression.test__array_namespace__(self)
numpy._core.tests.test_regression.TestRegression.test_add_identity(self)
numpy._core.tests.test_regression.TestRegression.test_alignment_update(self)
numpy._core.tests.test_regression.TestRegression.test_any_float(self)
numpy._core.tests.test_regression.TestRegression.test_arange_endian(self)
numpy._core.tests.test_regression.TestRegression.test_arange_inf_step(self)
numpy._core.tests.test_regression.TestRegression.test_arange_non_native_dtype(self)
numpy._core.tests.test_regression.TestRegression.test_arange_underflow_stop_and_step(self)
numpy._core.tests.test_regression.TestRegression.test_argmax(self)
numpy._core.tests.test_regression.TestRegression.test_argmax_byteorder(self)
numpy._core.tests.test_regression.TestRegression.test_arr_transpose(self)
numpy._core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array(self)
numpy._core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2(self)
numpy._core.tests.test_regression.TestRegression.test_array_index(self)
numpy._core.tests.test_regression.TestRegression.test_array_ndmin_overflow(self)
numpy._core.tests.test_regression.TestRegression.test_array_resize_method_system_error(self)
numpy._core.tests.test_regression.TestRegression.test_array_scalar_contiguous(self)
numpy._core.tests.test_regression.TestRegression.test_array_side_effect(self)
numpy._core.tests.test_regression.TestRegression.test_array_str_64bit(self)
numpy._core.tests.test_regression.TestRegression.test_array_too_big(self)
numpy._core.tests.test_regression.TestRegression.test_asarray_with_order(self)
numpy._core.tests.test_regression.TestRegression.test_assign_from_sequence_error(self)
numpy._core.tests.test_regression.TestRegression.test_assign_obj_listoflists(self)
numpy._core.tests.test_regression.TestRegression.test_astype_copy(self)
numpy._core.tests.test_regression.TestRegression.test_attributes(self)
numpy._core.tests.test_regression.TestRegression.test_bad_array_interface(self)
numpy._core.tests.test_regression.TestRegression.test_binary_repr_0(self)
numpy._core.tests.test_regression.TestRegression.test_binary_repr_0_width(self)
numpy._core.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory(self)
numpy._core.tests.test_regression.TestRegression.test_bool(self)
numpy._core.tests.test_regression.TestRegression.test_bool_flat_indexing_invalid_nr_elements(self)
numpy._core.tests.test_regression.TestRegression.test_bool_subscript_crash(self)
numpy._core.tests.test_regression.TestRegression.test_broadcast_flat_assignment(self)
numpy._core.tests.test_regression.TestRegression.test_buffer_hashlib(self)
numpy._core.tests.test_regression.TestRegression.test_byteswap_complex_scalar(self)
numpy._core.tests.test_regression.TestRegression.test_char_array_creation(self)
numpy._core.tests.test_regression.TestRegression.test_char_dump(self)
numpy._core.tests.test_regression.TestRegression.test_character_array_strip(self)
numpy._core.tests.test_regression.TestRegression.test_chararray_rstrip(self)
numpy._core.tests.test_regression.TestRegression.test_complex64_alignment(self)
numpy._core.tests.test_regression.TestRegression.test_complex_boolean_cast(self)
numpy._core.tests.test_regression.TestRegression.test_complex_conversion_error(self)
numpy._core.tests.test_regression.TestRegression.test_complex_nan_maximum(self)
numpy._core.tests.test_regression.TestRegression.test_complex_scalar_complex_cast(self)
numpy._core.tests.test_regression.TestRegression.test_complex_scalar_warning(self)
numpy._core.tests.test_regression.TestRegression.test_compress_small_type(self)
numpy._core.tests.test_regression.TestRegression.test_convolve_empty(self)
numpy._core.tests.test_regression.TestRegression.test_copy_detection_corner_case(self)
numpy._core.tests.test_regression.TestRegression.test_copy_detection_zero_dim(self)
numpy._core.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity(self)
numpy._core.tests.test_regression.TestRegression.test_correct_hash_dict(self)
numpy._core.tests.test_regression.TestRegression.test_deepcopy_F_order_object_array(self)
numpy._core.tests.test_regression.TestRegression.test_deepcopy_empty_object_array(self)
numpy._core.tests.test_regression.TestRegression.test_deepcopy_on_0d_array(self)
numpy._core.tests.test_regression.TestRegression.test_dot_alignment_sse2(self)
numpy._core.tests.test_regression.TestRegression.test_dot_big_stride(self)
numpy._core.tests.test_regression.TestRegression.test_dot_negative_stride(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_keyerrors_(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_names(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_posttuple(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_repr(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_scalar_squeeze(self)
numpy._core.tests.test_regression.TestRegression.test_dtype_tuple(self)
numpy._core.tests.test_regression.TestRegression.test_duplicate_field_names_assign(self)
numpy._core.tests.test_regression.TestRegression.test_duplicate_title_and_name(self)
numpy._core.tests.test_regression.TestRegression.test_eff1d_casting(self)
numpy._core.tests.test_regression.TestRegression.test_empty_array_type(self)
numpy._core.tests.test_regression.TestRegression.test_empty_mul(self)
numpy._core.tests.test_regression.TestRegression.test_empty_percentile(self)
numpy._core.tests.test_regression.TestRegression.test_endian_bool_indexing(self)
numpy._core.tests.test_regression.TestRegression.test_endian_recarray(self)
numpy._core.tests.test_regression.TestRegression.test_endian_where(self)
numpy._core.tests.test_regression.TestRegression.test_eq_string_and_object_array(self)
numpy._core.tests.test_regression.TestRegression.test_fancy_index(self)
numpy._core.tests.test_regression.TestRegression.test_field_access_by_title(self)
numpy._core.tests.test_regression.TestRegression.test_fields_strides(self)
numpy._core.tests.test_regression.TestRegression.test_flat_assignment(self)
numpy._core.tests.test_regression.TestRegression.test_flat_byteorder(self)
numpy._core.tests.test_regression.TestRegression.test_flat_index_byteswap(self)
numpy._core.tests.test_regression.TestRegression.test_for_equal_names(self)
numpy._core.tests.test_regression.TestRegression.test_for_object_scalar_creation(self)
numpy._core.tests.test_regression.TestRegression.test_for_zero_length_in_choose(self)
numpy._core.tests.test_regression.TestRegression.test_format_on_flex_array_element(self)
numpy._core.tests.test_regression.TestRegression.test_fortran_order_buffer(self)
numpy._core.tests.test_regression.TestRegression.test_fromfile_tofile_seeks(self)
numpy._core.tests.test_regression.TestRegression.test_fromiter_bytes(self)
numpy._core.tests.test_regression.TestRegression.test_fromiter_comparison(self)
numpy._core.tests.test_regression.TestRegression.test_frompyfunc_endian(self)
numpy._core.tests.test_regression.TestRegression.test_frompyfunc_many_args(self)
numpy._core.tests.test_regression.TestRegression.test_frompyfunc_name(self)
numpy._core.tests.test_regression.TestRegression.test_frompyfunc_nout_0(self)
numpy._core.tests.test_regression.TestRegression.test_fromstring(self)
numpy._core.tests.test_regression.TestRegression.test_fromstring_crash(self)
numpy._core.tests.test_regression.TestRegression.test_gh_23737(self)
numpy._core.tests.test_regression.TestRegression.test_hstack_invalid_dims(self)
numpy._core.tests.test_regression.TestRegression.test_huge_arange(self)
numpy._core.tests.test_regression.TestRegression.test_indexing1(self)
numpy._core.tests.test_regression.TestRegression.test_indexing2(self)
numpy._core.tests.test_regression.TestRegression.test_invalid_round(self)
numpy._core.tests.test_regression.TestRegression.test_invalid_structured_dtypes(self)
numpy._core.tests.test_regression.TestRegression.test_isin_refcnt_bug(self)
numpy._core.tests.test_regression.TestRegression.test_junk_in_string_fields_of_recarray(self)
numpy._core.tests.test_regression.TestRegression.test_large_float_sum(self)
numpy._core.tests.test_regression.TestRegression.test_leak_in_structured_dtype_comparison(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_buffer_length(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_invalid_axis(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides_2d(self)
numpy._core.tests.test_regression.TestRegression.test_lexsort_zerolen_element(self)
numpy._core.tests.test_regression.TestRegression.test_load_ufunc_pickle(self)
numpy._core.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans(self)
numpy._core.tests.test_regression.TestRegression.test_logspace_base_does_not_determine_dtype(self)
numpy._core.tests.test_regression.TestRegression.test_mem_0d_array_index(self)
numpy._core.tests.test_regression.TestRegression.test_mem_around(self)
numpy._core.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification(self)
numpy._core.tests.test_regression.TestRegression.test_mem_axis_minimization(self)
numpy._core.tests.test_regression.TestRegression.test_mem_custom_float_to_array(self)
numpy._core.tests.test_regression.TestRegression.test_mem_deallocation_leak(self)
numpy._core.tests.test_regression.TestRegression.test_mem_divmod(self)
numpy._core.tests.test_regression.TestRegression.test_mem_dot(self)
numpy._core.tests.test_regression.TestRegression.test_mem_dtype_align(self)
numpy._core.tests.test_regression.TestRegression.test_mem_empty(self)
numpy._core.tests.test_regression.TestRegression.test_mem_float_imag(self)
numpy._core.tests.test_regression.TestRegression.test_mem_fromiter_invalid_dtype_string(self)
numpy._core.tests.test_regression.TestRegression.test_mem_lexsort_strings(self)
numpy._core.tests.test_regression.TestRegression.test_mem_on_invalid_dtype(self)
numpy._core.tests.test_regression.TestRegression.test_mem_scalar_indexing(self)
numpy._core.tests.test_regression.TestRegression.test_mem_string_arr(self)
numpy._core.tests.test_regression.TestRegression.test_memoryleak(self)
numpy._core.tests.test_regression.TestRegression.test_method_args(self)
numpy._core.tests.test_regression.TestRegression.test_misaligned_dot_product_objects(self)
numpy._core.tests.test_regression.TestRegression.test_misaligned_objects_segfault(self)
numpy._core.tests.test_regression.TestRegression.test_misaligned_scalars_segfault(self)
numpy._core.tests.test_regression.TestRegression.test_mixed_string_byte_array_creation(self)
numpy._core.tests.test_regression.TestRegression.test_multidim_byteswap(self)
numpy._core.tests.test_regression.TestRegression.test_multiple_assign(self)
numpy._core.tests.test_regression.TestRegression.test_ndmin_float64(self)
numpy._core.tests.test_regression.TestRegression.test_ndmin_order(self)
numpy._core.tests.test_regression.TestRegression.test_negative_nd_indexing(self)
numpy._core.tests.test_regression.TestRegression.test_nonarray_assignment(self,index)
numpy._core.tests.test_regression.TestRegression.test_nonbool_logical(self)
numpy._core.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate(self)
numpy._core.tests.test_regression.TestRegression.test_noncontiguous_fill(self)
numpy._core.tests.test_regression.TestRegression.test_nonnative_endian_fill(self)
numpy._core.tests.test_regression.TestRegression.test_nonscalar_item_method(self)
numpy._core.tests.test_regression.TestRegression.test_nonzero_byteswap(self)
numpy._core.tests.test_regression.TestRegression.test_numeric_carray_compare(self)
numpy._core.tests.test_regression.TestRegression.test_numpy_float_python_long_addition(self)
numpy._core.tests.test_regression.TestRegression.test_object_argmax(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_assign(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_circular_reference(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_fill(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_from_list(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_nested(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_refcount_self_assign(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_refcounting(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_self_copy(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_self_reference(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_shape(self)
numpy._core.tests.test_regression.TestRegression.test_object_array_to_fixed_string(self)
numpy._core.tests.test_regression.TestRegression.test_object_casting(self)
numpy._core.tests.test_regression.TestRegression.test_object_casting_errors(self)
numpy._core.tests.test_regression.TestRegression.test_objectarray_setfield(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_bytes_overwrite(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_datetime64_array(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_dtype(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_empty_string(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_module(self,protocol,val)
numpy._core.tests.test_regression.TestRegression.test_pickle_py2_array_latin1_hack(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_py2_bytes_encoding(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_py2_scalar_latin1_hack(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_string_overwrite(self)
numpy._core.tests.test_regression.TestRegression.test_pickle_transposed(self)
numpy._core.tests.test_regression.TestRegression.test_rand_seed(self)
numpy._core.tests.test_regression.TestRegression.test_random_shuffle(self)
numpy._core.tests.test_regression.TestRegression.test_ravel_with_order(self)
numpy._core.tests.test_regression.TestRegression.test_rec_fromarray(self)
numpy._core.tests.test_regression.TestRegression.test_rec_iterate(self)
numpy._core.tests.test_regression.TestRegression.test_recarray_copy(self)
numpy._core.tests.test_regression.TestRegression.test_recarray_fields(self)
numpy._core.tests.test_regression.TestRegression.test_recarray_single_element(self)
numpy._core.tests.test_regression.TestRegression.test_recarray_tolist(self)
numpy._core.tests.test_regression.TestRegression.test_reduce(self)
numpy._core.tests.test_regression.TestRegression.test_reduce_big_object_array(self)
numpy._core.tests.test_regression.TestRegression.test_reduce_contiguous(self)
numpy._core.tests.test_regression.TestRegression.test_refcount_error_in_clip(self)
numpy._core.tests.test_regression.TestRegression.test_refcount_vdot(self)
numpy._core.tests.test_regression.TestRegression.test_repeat_broadcasting(self)
numpy._core.tests.test_regression.TestRegression.test_repeat_discont(self)
numpy._core.tests.test_regression.TestRegression.test_repeated_square_consistency(self)
numpy._core.tests.test_regression.TestRegression.test_replace_regression(self)
numpy._core.tests.test_regression.TestRegression.test_reshape_order(self)
numpy._core.tests.test_regression.TestRegression.test_reshape_size_overflow(self)
numpy._core.tests.test_regression.TestRegression.test_reshape_trailing_ones_strides(self)
numpy._core.tests.test_regression.TestRegression.test_reshape_zero_size(self)
numpy._core.tests.test_regression.TestRegression.test_reshape_zero_strides(self)
numpy._core.tests.test_regression.TestRegression.test_richcompare_crash(self)
numpy._core.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass(self)
numpy._core.tests.test_regression.TestRegression.test_round(self)
numpy._core.tests.test_regression.TestRegression.test_scalar_compare(self)
numpy._core.tests.test_regression.TestRegression.test_scalar_copy(self)
numpy._core.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments(self)
numpy._core.tests.test_regression.TestRegression.test_searchsorted_variable_length(self)
numpy._core.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype(self)
numpy._core.tests.test_regression.TestRegression.test_setting_rank0_string(self)
numpy._core.tests.test_regression.TestRegression.test_sign_bit(self)
numpy._core.tests.test_regression.TestRegression.test_sign_for_complex_nan(self)
numpy._core.tests.test_regression.TestRegression.test_signed_integer_division_overflow(self)
numpy._core.tests.test_regression.TestRegression.test_sort_bigendian(self)
numpy._core.tests.test_regression.TestRegression.test_sort_unique_crash(self)
numpy._core.tests.test_regression.TestRegression.test_squeeze_axis_handling(self)
numpy._core.tests.test_regression.TestRegression.test_squeeze_contiguous(self)
numpy._core.tests.test_regression.TestRegression.test_squeeze_type(self)
numpy._core.tests.test_regression.TestRegression.test_startswith(self)
numpy._core.tests.test_regression.TestRegression.test_string_NULL(self)
numpy._core.tests.test_regression.TestRegression.test_string_argsort_with_zeros(self)
numpy._core.tests.test_regression.TestRegression.test_string_array_size(self)
numpy._core.tests.test_regression.TestRegression.test_string_astype(self)
numpy._core.tests.test_regression.TestRegression.test_string_mergesort(self)
numpy._core.tests.test_regression.TestRegression.test_string_sort_with_zeros(self)
numpy._core.tests.test_regression.TestRegression.test_string_truncation(self)
numpy._core.tests.test_regression.TestRegression.test_string_truncation_ucs2(self)
numpy._core.tests.test_regression.TestRegression.test_structarray_title(self)
numpy._core.tests.test_regression.TestRegression.test_structured_arrays_with_objects1(self)
numpy._core.tests.test_regression.TestRegression.test_structured_arrays_with_objects2(self)
numpy._core.tests.test_regression.TestRegression.test_structured_count_nonzero(self)
numpy._core.tests.test_regression.TestRegression.test_structured_type_to_object(self)
numpy._core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment(self)
numpy._core.tests.test_regression.TestRegression.test_swap_real(self)
numpy._core.tests.test_regression.TestRegression.test_take_object_fail(self)
numpy._core.tests.test_regression.TestRegression.test_take_output(self)
numpy._core.tests.test_regression.TestRegression.test_take_refcount(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1434(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1538(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1539(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1608(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1756(self)
numpy._core.tests.test_regression.TestRegression.test_ticket_1770(self)
numpy._core.tests.test_regression.TestRegression.test_to_ctypes(self)
numpy._core.tests.test_regression.TestRegression.test_tobytes_FORTRANORDER_discontiguous(self)
numpy._core.tests.test_regression.TestRegression.test_ufunc_casting_out(self)
numpy._core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views(self)
numpy._core.tests.test_regression.TestRegression.test_ufunc_order(self,operation,order)
numpy._core.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak(self)
numpy._core.tests.test_regression.TestRegression.test_uint_int_conversion(self)
numpy._core.tests.test_regression.TestRegression.test_unaligned_unicode_access(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_alloc_dealloc_match(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_scalar(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_string_comparison(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_swapping(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_to_string_cast(self)
numpy._core.tests.test_regression.TestRegression.test_unicode_to_string_cast_error(self)
numpy._core.tests.test_regression.TestRegression.test_unique_stable(self)
numpy._core.tests.test_regression.TestRegression.test_unpickle_dtype_with_object(self)
numpy._core.tests.test_regression.TestRegression.test_vectorize_fixed_width_string(self)
numpy._core.tests.test_regression.TestRegression.test_void_compare_segfault(self)
numpy._core.tests.test_regression.TestRegression.test_void_copyswap(self)
numpy._core.tests.test_regression.TestRegression.test_void_getitem(self)
numpy._core.tests.test_regression.TestRegression.test_void_item_memview(self)
numpy._core.tests.test_regression.TestRegression.test_void_scalar_constructor(self)
numpy._core.tests.test_regression.TestRegression.test_void_scalar_with_titles(self)
numpy._core.tests.test_regression.TestRegression.test_zero_sized_array_indexing(self)
numpy._core.tests.test_regression.TestRegression.test_zeros(self)
numpy._core.tests.test_regression.TestRegression.test_zeros_order(self)
numpy._core.tests.test_regression.TestRegression.test_zerosize_accumulate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_numeric.py----------------------------------------
A:numpy._core.tests.test_numeric.A->numpy.array([1, 1j, -1, -1j])
A:numpy._core.tests.test_numeric.Ar1->numpy.array([[1, 2, 3, 1], [2, 3, 1, 2]])
A:numpy._core.tests.test_numeric.Ar2->numpy.array([[1, 2], [3, 1], [2, 3], [1, 2]])
A:numpy._core.tests.test_numeric.Ar3->numpy.array([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:numpy._core.tests.test_numeric.Ar->numpy.resize(A, (2, 1))
A:numpy._core.tests.test_numeric.my_arr->numpy.array([]).view(MyArray)
A:numpy._core.tests.test_numeric.out->numpy.array(0.0)
A:numpy._core.tests.test_numeric.tgt->numpy.array([2, 3])
A:numpy._core.tests.test_numeric.s->numeric_dtypes.flatmap(lambda x: hynp.from_dtype(x, allow_nan=False))
A:numpy._core.tests.test_numeric.f->numpy.float64(5.1 * 10 ** 73)
A:numpy._core.tests.test_numeric.i->numpy.int64(501)
A:numpy._core.tests.test_numeric.B->numpy.ma.array([[100.0, 3.0, 104.0, 5.0], [101.0, 2.0, 103.0, 4.0]], mask=[[True, False, True, False], [True, False, True, False]])
A:numpy._core.tests.test_numeric.rng->numpy.random.RandomState(1234)
A:numpy._core.tests.test_numeric.mean_out->numpy.ma.array([[0.0, 0.0, 0.0, 0.0]], mask=[[False, False, False, False]])
A:numpy._core.tests.test_numeric.std_out->numpy.ma.array([[0.0, 0.0, 0.0, 0.0]], mask=[[False, False, False, False]])
A:numpy._core.tests.test_numeric.mean->numpy.mean(A, out=mean_out, axis=axis, keepdims=True)
A:numpy._core.tests.test_numeric.std->numpy.std(A, out=std_out, axis=axis, keepdims=True, mean=mean)
A:numpy._core.tests.test_numeric.std_old->numpy.std(A, axis=axis, keepdims=True)
A:numpy._core.tests.test_numeric.var_out->numpy.ma.array([[0.0, 0.0, 0.0, 0.0]], mask=[[False, False, False, False]])
A:numpy._core.tests.test_numeric.var->numpy.var(A, out=var_out, axis=axis, keepdims=True, mean=mean)
A:numpy._core.tests.test_numeric.var_old->numpy.var(A, axis=axis, keepdims=True)
A:numpy._core.tests.test_numeric.mean_old->numpy.mean(A, axis=axis, keepdims=True)
A:numpy._core.tests.test_numeric.mean_b->numpy.mean(B, axis=axis, keepdims=True)
A:numpy._core.tests.test_numeric.std_b->numpy.std(B, axis=axis, keepdims=True, mean=mean_b)
A:numpy._core.tests.test_numeric.var_b->numpy.var(B, axis=axis, keepdims=True, mean=mean_b)
A:numpy._core.tests.test_numeric.self.nm->self.f.copy()
A:numpy._core.tests.test_numeric.self.im->self.t.copy()
A:numpy._core.tests.test_numeric.d->numpy.ones(100)
A:numpy._core.tests.test_numeric.e->numpy.array([True] * 100043, dtype=bool)
A:numpy._core.tests.test_numeric.self.f->numpy.ones(256, dtype=np.float32)
A:numpy._core.tests.test_numeric.self.ef->numpy.ones(self.f.size, dtype=bool)
A:numpy._core.tests.test_numeric.self.d->numpy.ones(128, dtype=np.float64)
A:numpy._core.tests.test_numeric.self.ed->numpy.ones(self.d.size, dtype=bool)
A:numpy._core.tests.test_numeric.self.nf->self.f.copy()
A:numpy._core.tests.test_numeric.self.nd->self.d.copy()
A:numpy._core.tests.test_numeric.self.inff->self.f.copy()
A:numpy._core.tests.test_numeric.self.infd->self.d.copy()
A:numpy._core.tests.test_numeric.self.efnonan->self.ef.copy()
A:numpy._core.tests.test_numeric.self.ednonan->self.ed.copy()
A:numpy._core.tests.test_numeric.self.signf->self.f.copy()
A:numpy._core.tests.test_numeric.self.signd->self.d.copy()
A:numpy._core.tests.test_numeric.err->numpy.seterr()
A:numpy._core.tests.test_numeric.old->numpy.seterr(divide='print')
A:numpy._core.tests.test_numeric.new->numpy.seterr()
A:numpy._core.tests.test_numeric.ftype->obj2sctype(typecode)
A:numpy._core.tests.test_numeric.fi->numpy.finfo(dt)
A:numpy._core.tests.test_numeric.rtype->type(ftype(0).real)
A:numpy._core.tests.test_numeric.ft_tiny->ftype(fi._machar.tiny)
A:numpy._core.tests.test_numeric.ft_max->ftype(fi.max)
A:numpy._core.tests.test_numeric.ft_eps->ftype(fi.eps)
A:numpy._core.tests.test_numeric.b->numpy.ndarray((0, 4))
A:numpy._core.tests.test_numeric.rational_dt->numpy.dtype(rational)
A:numpy._core.tests.test_numeric.numpy_dtype->numpy.dtype(numpy_dtype)
A:numpy._core.tests.test_numeric.double_dt->numpy.dtype('double')
A:numpy._core.tests.test_numeric.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_numeric.res->numpy.rollaxis(a, axis=-ip, start=-jp)
A:numpy._core.tests.test_numeric.dtype1->dtype1.newbyteorder().newbyteorder()
A:numpy._core.tests.test_numeric.dtype2->numpy.dtype(dtype2, metadata=metadata2)
A:numpy._core.tests.test_numeric.res_bs->numpy.promote_types(dtype1, dtype2)
A:numpy._core.tests.test_numeric.ii->numpy.iinfo(dt)
A:numpy._core.tests.test_numeric.scalar->numpy.dtype(dtype).type(0)
A:numpy._core.tests.test_numeric.ai32->numpy.fromiter(self.makegen(), np.int32)
A:numpy._core.tests.test_numeric.ai64->numpy.fromiter(self.makegen(), np.int64)
A:numpy._core.tests.test_numeric.af->numpy.fromiter(self.makegen(), float)
A:numpy._core.tests.test_numeric.expected->numpy.array(data, dtype=np.uint32)
A:numpy._core.tests.test_numeric.a->numpy.ndarray((3, 0))
A:numpy._core.tests.test_numeric.a20->numpy.fromiter(self.makegen(), int, 20)
A:numpy._core.tests.test_numeric.iterable->self.load_data(count, error_index)
A:numpy._core.tests.test_numeric.x->numpy.arange(30).view(sub_class)
A:numpy._core.tests.test_numeric.c->numpy.require(b, None, [flag])
A:numpy._core.tests.test_numeric.shape->tuple(range(2, 2 + nd))
A:numpy._core.tests.test_numeric.m->numpy.zeros(a.shape)
A:numpy._core.tests.test_numeric.n->numpy.zeros(a.shape).astype(object)
A:numpy._core.tests.test_numeric.arr->numpy.empty((5,))
A:numpy._core.tests.test_numeric.dt->numpy.dtype([('', dt)] * 2)
A:numpy._core.tests.test_numeric.tpe->ThreadPoolExecutor(max_workers=8)
A:numpy._core.tests.test_numeric.V->rand(5, 8)
A:numpy._core.tests.test_numeric.g1->randint(0, 5, size=15)
A:numpy._core.tests.test_numeric.g2->randint(0, 8, size=15)
A:numpy._core.tests.test_numeric.e0->numpy.array(0, dtype='int')
A:numpy._core.tests.test_numeric.e1->numpy.array(1, dtype='float')
A:numpy._core.tests.test_numeric.a12->numpy.array([1, 2])
A:numpy._core.tests.test_numeric.a12b->numpy.array([1, 2]).copy()
A:numpy._core.tests.test_numeric.a123->numpy.array([1, 2, 3])
A:numpy._core.tests.test_numeric.a13->numpy.array([1, 3])
A:numpy._core.tests.test_numeric.a34->numpy.array([3, 4])
A:numpy._core.tests.test_numeric.aS1->numpy.array(['a'], dtype='S1')
A:numpy._core.tests.test_numeric.aS1b->numpy.array(['a'], dtype='S1').copy()
A:numpy._core.tests.test_numeric.aS1u4->numpy.array([('a', 1)], dtype='S1,u4')
A:numpy._core.tests.test_numeric.aS1u4b->numpy.array([('a', 1)], dtype='S1,u4').copy()
A:numpy._core.tests.test_numeric.b1->numpy.array([1, 2, np.nan])
A:numpy._core.tests.test_numeric.b2->numpy.array([1, np.nan, 2])
A:numpy._core.tests.test_numeric.b3->numpy.array([1, 2, np.inf])
A:numpy._core.tests.test_numeric.b4->numpy.array(np.nan)
A:numpy._core.tests.test_numeric.t1->numpy.array([1, 2, np.nan]).astype('timedelta64')
A:numpy._core.tests.test_numeric.t2->numpy.array([1, np.nan, 2]).astype('timedelta64')
A:numpy._core.tests.test_numeric.md1->numpy.array([[0, 1], [np.nan, 1]])
A:numpy._core.tests.test_numeric.zeros->numpy.zeros(3, dtype=dtype)
A:numpy._core.tests.test_numeric.nonzeros->numpy.array([b'1', b'2', b'3'], dtype=dtype)
A:numpy._core.tests.test_numeric.data->self._neg_byteorder(data)
A:numpy._core.tests.test_numeric.actual->numpy.astype(np.array(data, dtype=np.int64), np.uint32)
A:numpy._core.tests.test_numeric.ac->numpy.ndarray((3, 0)).copy()
A:numpy._core.tests.test_numeric.act->numpy.ndarray((3, 0)).copy().copy()
A:numpy._core.tests.test_numeric.M->numpy.float64(1)
A:numpy._core.tests.test_numeric.am->self.fastclip(a, m, None)
A:numpy._core.tests.test_numeric.aM->self.fastclip(a, None, M)
A:numpy._core.tests.test_numeric.m_s->self._neg_byteorder(m)
A:numpy._core.tests.test_numeric.a_s->self._neg_byteorder(a)
A:numpy._core.tests.test_numeric.bt->numpy.ndarray((0, 4)).copy()
A:numpy._core.tests.test_numeric.a2->numpy.clip(a, m, M, out=a)
A:numpy._core.tests.test_numeric.(in_shapes, result_shape)->self._neg_byteorder(data).draw(hynp.mutually_broadcastable_shapes(num_shapes=2, base_shape=arr.shape))
A:numpy._core.tests.test_numeric.amin->self._neg_byteorder(data).draw(s | hynp.arrays(dtype=numeric_dtypes, shape=in_shapes[0], elements={'allow_nan': False}))
A:numpy._core.tests.test_numeric.amax->self._neg_byteorder(data).draw(s | hynp.arrays(dtype=numeric_dtypes, shape=in_shapes[1], elements={'allow_nan': False}))
A:numpy._core.tests.test_numeric.result->numpy.moveaxis(x, 0, 0)
A:numpy._core.tests.test_numeric.t->numpy.result_type(arr, amin, amax)
A:numpy._core.tests.test_numeric.self.olderr->numpy.seterr(invalid='ignore')
A:numpy._core.tests.test_numeric.aran->numpy.arange(125).reshape((5, 5, 5))
A:numpy._core.tests.test_numeric.y->numpy.array([-1, -2j, 3 + 1j], dtype=complex)
A:numpy._core.tests.test_numeric.atol->numpy.array([1e-08, 1e-08])
A:numpy._core.tests.test_numeric.rtol->numpy.array([1e-05, 1e-05])
A:numpy._core.tests.test_numeric.below_one->float(1.0 - np.finfo('f8').eps)
A:numpy._core.tests.test_numeric.f32->numpy.array(below_one, 'f4')
A:numpy._core.tests.test_numeric.self.A->numpy.array([1, -1, 1, -1])
A:numpy._core.tests.test_numeric.r->numpy.mean(d, out=out)
A:numpy._core.tests.test_numeric.self.dtypes->sorted(dtypes - variable_sized | {np.dtype(tp.str.replace('0', str(i))) for tp in variable_sized for i in range(1, 10)}, key=keyfunc)
A:numpy._core.tests.test_numeric.dtype_str->numpy.dtype(dtype.type).str.replace('0', '1')
A:numpy._core.tests.test_numeric.val->str(fill_value)
A:numpy._core.tests.test_numeric.beg->sys.getrefcount(dim)
A:numpy._core.tests.test_numeric.z->numpy.array([[950, 11010, -30370]], dtype=np.int32)
A:numpy._core.tests.test_numeric.dz->like_function(d, order='A', dtype=dtype, **fill_kwarg)
A:numpy._core.tests.test_numeric.sz->like_function(d, dtype=dtype, shape=s, order=o, **fill_kwarg)
A:numpy._core.tests.test_numeric.self.x->numpy.array([1, 2, 3, 4, 5], dtype=dt)
A:numpy._core.tests.test_numeric.self.y->numpy.array([-1, -2, -3], dtype=dt)
A:numpy._core.tests.test_numeric.self.z1->numpy.array([-3.0, -8.0, -14.0, -20.0, -26.0, -14.0, -5.0], dtype=dt)
A:numpy._core.tests.test_numeric.self.z1_4->numpy.array([-2.0, -5.0, -8.0, -11.0, -14.0, -5.0], dtype=dt)
A:numpy._core.tests.test_numeric.self.z1r->numpy.array([-15.0, -22.0, -22.0, -16.0, -10.0, -4.0, -1.0], dtype=dt)
A:numpy._core.tests.test_numeric.self.z2->numpy.array([-5.0, -14.0, -26.0, -20.0, -14.0, -8.0, -3.0], dtype=dt)
A:numpy._core.tests.test_numeric.self.z2r->numpy.array([-1.0, -4.0, -10.0, -16.0, -22.0, -22.0, -15.0], dtype=dt)
A:numpy._core.tests.test_numeric.self.zs->numpy.array([-3.0, -14.0, -30.0, -48.0, -66.0, -84.0, -102.0, -54.0, -19.0], dtype=dt)
A:numpy._core.tests.test_numeric.k->numpy.ones(3)
A:numpy._core.tests.test_numeric.r_z->r_z[::-1].conjugate()
A:numpy._core.tests.test_numeric.default_mode->numpy.convolve(d, k, mode='full')
A:numpy._core.tests.test_numeric.valid_mode->numpy.correlate(d, k, mode='v')
A:numpy._core.tests.test_numeric.full_mode->numpy.convolve(d, k, mode='f')
A:numpy._core.tests.test_numeric.xr->numpy.roll(x, 2)
A:numpy._core.tests.test_numeric.x2->numpy.reshape(np.arange(10), (2, 5))
A:numpy._core.tests.test_numeric.x2r->numpy.roll(x2, -4, axis=1)
A:numpy._core.tests.test_numeric.aind->numpy.indices(a.shape)
A:numpy._core.tests.test_numeric.cp->numpy.cross(v, u)
A:numpy._core.tests.test_numeric.u->numpy.array([[195, 8, 9]], np.uint8)
A:numpy._core.tests.test_numeric.v->numpy.array([250, 166, 68], np.int32)
A:numpy._core.tests.test_numeric.arr1->numpy.ones((5,))
A:numpy._core.tests.test_numeric.arr2->numpy.ones((2,))
A:numpy._core.tests.test_numeric.arr3->numpy.linspace(-2, 2, 5)
A:numpy._core.tests.test_numeric.out1->numpy.ndarray(shape=(5, 5))
A:numpy._core.tests.test_numeric.out2->numpy.ndarray(shape=(2, 5))
A:numpy._core.tests.test_numeric.res1->numpy.outer(arr1, arr3, out1)
A:numpy._core.tests.test_numeric.[x, y]->numpy.indices((4, 3), sparse=True)
A:numpy._core.tests.test_numeric.[x]->numpy.indices((4,), sparse=True)
A:numpy._core.tests.test_numeric.inds->numpy.indices(dims, dtype=dtype)
A:numpy._core.tests.test_numeric.mit->numpy.broadcast(*arrs)
A:numpy._core.tests.test_numeric.mit2->numpy.broadcast(*arrs, **{})
A:numpy._core.tests.test_numeric.td->numpy.tensordot(a, b, (1, 0))
A:numpy._core.tests.test_numeric.arr_0d->numpy.array(1)
A:numpy._core.tests.test_numeric.ret->numpy.tensordot(arr_0d, arr_0d, ([], []))
numpy._core.tests.test_NIterError(Exception)
numpy._core.tests.test_TestAllclose
numpy._core.tests.test_TestAllclose.setup_method(self)
numpy._core.tests.test_TestAllclose.teardown_method(self)
numpy._core.tests.test_TestAllclose.test_equalnan(self)
numpy._core.tests.test_TestAllclose.test_ip_allclose(self)
numpy._core.tests.test_TestAllclose.test_ip_not_allclose(self)
numpy._core.tests.test_TestAllclose.test_min_int(self)
numpy._core.tests.test_TestAllclose.test_no_parameter_modification(self)
numpy._core.tests.test_TestAllclose.test_return_class_is_ndarray(self)
numpy._core.tests.test_TestAllclose.tst_allclose(self,x,y)
numpy._core.tests.test_TestAllclose.tst_not_allclose(self,x,y)
numpy._core.tests.test_TestArgwhere
numpy._core.tests.test_TestArgwhere.test_2D(self)
numpy._core.tests.test_TestArgwhere.test_list(self)
numpy._core.tests.test_TestArgwhere.test_nd(self,nd)
numpy._core.tests.test_TestArrayComparisons
numpy._core.tests.test_TestArrayComparisons.test_array_equal_different_scalar_types(self)
numpy._core.tests.test_TestArrayComparisons.test_array_equal_equal_nan(self,bx,by,equal_nan,expected)
numpy._core.tests.test_TestArrayComparisons.test_array_equiv(self)
numpy._core.tests.test_TestArrayComparisons.test_compare_unstructured_voids(self,dtype)
numpy._core.tests.test_TestArrayComparisons.test_none_compares_elementwise(self)
numpy._core.tests.test_TestAsType
numpy._core.tests.test_TestAsType.test_astype(self)
numpy._core.tests.test_TestBaseRepr
numpy._core.tests.test_TestBaseRepr.test_base3(self)
numpy._core.tests.test_TestBaseRepr.test_base_range(self)
numpy._core.tests.test_TestBaseRepr.test_minimal_signed_int(self)
numpy._core.tests.test_TestBaseRepr.test_negative(self)
numpy._core.tests.test_TestBaseRepr.test_positive(self)
numpy._core.tests.test_TestBinaryRepr
numpy._core.tests.test_TestBinaryRepr.test_large_neg_int64(self)
numpy._core.tests.test_TestBinaryRepr.test_neg_width_boundaries(self)
numpy._core.tests.test_TestBinaryRepr.test_negative(self)
numpy._core.tests.test_TestBinaryRepr.test_positive(self)
numpy._core.tests.test_TestBinaryRepr.test_sufficient_width(self)
numpy._core.tests.test_TestBinaryRepr.test_zero(self)
numpy._core.tests.test_TestBoolArray
numpy._core.tests.test_TestBoolArray.setup_method(self)
numpy._core.tests.test_TestBoolArray.test_all_any(self)
numpy._core.tests.test_TestBoolArray.test_logical_and_or_xor(self)
numpy._core.tests.test_TestBoolArray.test_logical_not_abs(self)
numpy._core.tests.test_TestBoolCmp
numpy._core.tests.test_TestBoolCmp.setup_method(self)
numpy._core.tests.test_TestBoolCmp.test_double(self)
numpy._core.tests.test_TestBoolCmp.test_float(self)
numpy._core.tests.test_TestBoolScalar
numpy._core.tests.test_TestBoolScalar.test_bitwise_and(self)
numpy._core.tests.test_TestBoolScalar.test_bitwise_or(self)
numpy._core.tests.test_TestBoolScalar.test_bitwise_xor(self)
numpy._core.tests.test_TestBoolScalar.test_logical(self)
numpy._core.tests.test_TestBroadcast
numpy._core.tests.test_TestBroadcast.test_broadcast_error_kwargs(self)
numpy._core.tests.test_TestBroadcast.test_broadcast_in_args(self)
numpy._core.tests.test_TestBroadcast.test_broadcast_single_arg(self)
numpy._core.tests.test_TestBroadcast.test_number_of_arguments(self)
numpy._core.tests.test_TestBroadcast.test_shape_mismatch_error_message(self)
numpy._core.tests.test_TestClip
numpy._core.tests.test_TestClip._generate_data(self,n,m)
numpy._core.tests.test_TestClip._generate_data_complex(self,n,m)
numpy._core.tests.test_TestClip._generate_flt_data(self,n,m)
numpy._core.tests.test_TestClip._generate_int32_data(self,n,m)
numpy._core.tests.test_TestClip._generate_int_data(self,n,m)
numpy._core.tests.test_TestClip._generate_non_native_data(self,n,m)
numpy._core.tests.test_TestClip._neg_byteorder(self,a)
numpy._core.tests.test_TestClip.clip(self,a,m,M,out=None)
numpy._core.tests.test_TestClip.fastclip(self,a,m,M,out=None,**kwargs)
numpy._core.tests.test_TestClip.setup_method(self)
numpy._core.tests.test_TestClip.test_NaT_propagation(self,arr,amin,amax)
numpy._core.tests.test_TestClip.test_array_double(self)
numpy._core.tests.test_TestClip.test_clip_all_none(self)
numpy._core.tests.test_TestClip.test_clip_complex(self)
numpy._core.tests.test_TestClip.test_clip_func_takes_out(self)
numpy._core.tests.test_TestClip.test_clip_inplace_array(self)
numpy._core.tests.test_TestClip.test_clip_inplace_simple(self)
numpy._core.tests.test_TestClip.test_clip_invalid_casting(self)
numpy._core.tests.test_TestClip.test_clip_nan(self)
numpy._core.tests.test_TestClip.test_clip_non_contig(self)
numpy._core.tests.test_TestClip.test_clip_problem_cases(self,arr,amin,amax,exp)
numpy._core.tests.test_TestClip.test_clip_property(self,data,arr)
numpy._core.tests.test_TestClip.test_clip_scalar_nan_propagation(self,arr,amin,amax)
numpy._core.tests.test_TestClip.test_clip_value_min_max_flip(self,amin,amax)
numpy._core.tests.test_TestClip.test_clip_with_out_array_int32(self)
numpy._core.tests.test_TestClip.test_clip_with_out_array_outint32(self)
numpy._core.tests.test_TestClip.test_clip_with_out_memory_overlap(self)
numpy._core.tests.test_TestClip.test_clip_with_out_simple(self)
numpy._core.tests.test_TestClip.test_clip_with_out_simple2(self)
numpy._core.tests.test_TestClip.test_clip_with_out_simple_int32(self)
numpy._core.tests.test_TestClip.test_clip_with_out_transposed(self)
numpy._core.tests.test_TestClip.test_noncontig_inplace(self)
numpy._core.tests.test_TestClip.test_object_clip(self)
numpy._core.tests.test_TestClip.test_ones_pathological(self,dtype)
numpy._core.tests.test_TestClip.test_simple_complex(self)
numpy._core.tests.test_TestClip.test_simple_double(self)
numpy._core.tests.test_TestClip.test_simple_inplace_01(self)
numpy._core.tests.test_TestClip.test_simple_inplace_02(self)
numpy._core.tests.test_TestClip.test_simple_int(self)
numpy._core.tests.test_TestClip.test_simple_int32_inout(self,casting)
numpy._core.tests.test_TestClip.test_simple_int32_out(self)
numpy._core.tests.test_TestClip.test_simple_int64_inout(self)
numpy._core.tests.test_TestClip.test_simple_int64_out(self)
numpy._core.tests.test_TestClip.test_simple_nonnative(self)
numpy._core.tests.test_TestClip.test_simple_out(self)
numpy._core.tests.test_TestClip.test_type_cast_01(self)
numpy._core.tests.test_TestClip.test_type_cast_02(self)
numpy._core.tests.test_TestClip.test_type_cast_03(self)
numpy._core.tests.test_TestClip.test_type_cast_04(self)
numpy._core.tests.test_TestClip.test_type_cast_05(self)
numpy._core.tests.test_TestClip.test_type_cast_06(self)
numpy._core.tests.test_TestClip.test_type_cast_07(self)
numpy._core.tests.test_TestClip.test_type_cast_08(self)
numpy._core.tests.test_TestClip.test_type_cast_09(self)
numpy._core.tests.test_TestClip.test_type_cast_10(self)
numpy._core.tests.test_TestClip.test_type_cast_11(self)
numpy._core.tests.test_TestClip.test_type_cast_12(self)
numpy._core.tests.test_TestConvolve
numpy._core.tests.test_TestConvolve.test_mode(self)
numpy._core.tests.test_TestConvolve.test_no_overwrite(self)
numpy._core.tests.test_TestConvolve.test_object(self)
numpy._core.tests.test_TestCorrelate
numpy._core.tests.test_TestCorrelate._setup(self,dt)
numpy._core.tests.test_TestCorrelate.test_complex(self)
numpy._core.tests.test_TestCorrelate.test_float(self)
numpy._core.tests.test_TestCorrelate.test_mode(self)
numpy._core.tests.test_TestCorrelate.test_no_overwrite(self)
numpy._core.tests.test_TestCorrelate.test_object(self)
numpy._core.tests.test_TestCorrelate.test_zero_size(self)
numpy._core.tests.test_TestCreationFuncs
numpy._core.tests.test_TestCreationFuncs.check_function(self,func,fill_value=None)
numpy._core.tests.test_TestCreationFuncs.setup_method(self)
numpy._core.tests.test_TestCreationFuncs.test_empty(self)
numpy._core.tests.test_TestCreationFuncs.test_for_reference_leak(self)
numpy._core.tests.test_TestCreationFuncs.test_full(self)
numpy._core.tests.test_TestCreationFuncs.test_ones(self)
numpy._core.tests.test_TestCreationFuncs.test_zeros(self)
numpy._core.tests.test_TestCross
numpy._core.tests.test_TestCross.test_2x2(self)
numpy._core.tests.test_TestCross.test_2x3(self)
numpy._core.tests.test_TestCross.test_3x3(self)
numpy._core.tests.test_TestCross.test_broadcasting(self)
numpy._core.tests.test_TestCross.test_broadcasting_shapes(self)
numpy._core.tests.test_TestCross.test_uint8_int32_mixed_dtypes(self)
numpy._core.tests.test_TestCross.test_zero_dimension(self,a,b)
numpy._core.tests.test_TestFloatExceptions
numpy._core.tests.test_TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy._core.tests.test_TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy._core.tests.test_TestFloatExceptions.test_floating_exceptions(self,typecode)
numpy._core.tests.test_TestFloatExceptions.test_warnings(self)
numpy._core.tests.test_TestFromiter
numpy._core.tests.test_TestFromiter.load_data(self,n,eindex)
numpy._core.tests.test_TestFromiter.makegen(self)
numpy._core.tests.test_TestFromiter.test_2592(self,count,error_index,dtype)
numpy._core.tests.test_TestFromiter.test_empty_not_structured(self,dtype)
numpy._core.tests.test_TestFromiter.test_empty_result(self)
numpy._core.tests.test_TestFromiter.test_failed_itemsetting(self)
numpy._core.tests.test_TestFromiter.test_growth_and_complicated_dtypes(self,dtype,data,length_hint)
numpy._core.tests.test_TestFromiter.test_lengths(self)
numpy._core.tests.test_TestFromiter.test_too_few_items(self)
numpy._core.tests.test_TestFromiter.test_types(self)
numpy._core.tests.test_TestFromiter.test_values(self)
numpy._core.tests.test_TestIndex
numpy._core.tests.test_TestIndex.test_boolean(self)
numpy._core.tests.test_TestIndex.test_boolean_edgecase(self)
numpy._core.tests.test_TestIndices
numpy._core.tests.test_TestIndices.test_return_type(self,dtype,dims)
numpy._core.tests.test_TestIndices.test_scalar_input(self)
numpy._core.tests.test_TestIndices.test_simple(self)
numpy._core.tests.test_TestIndices.test_single_input(self)
numpy._core.tests.test_TestIndices.test_sparse(self)
numpy._core.tests.test_TestIsclose
numpy._core.tests.test_TestIsclose._setup(self)
numpy._core.tests.test_TestIsclose.test_equal_nan(self)
numpy._core.tests.test_TestIsclose.test_ip_all_isclose(self)
numpy._core.tests.test_TestIsclose.test_ip_isclose(self)
numpy._core.tests.test_TestIsclose.test_ip_isclose_allclose(self)
numpy._core.tests.test_TestIsclose.test_ip_none_isclose(self)
numpy._core.tests.test_TestIsclose.test_masked_arrays(self)
numpy._core.tests.test_TestIsclose.test_nep50_isclose(self)
numpy._core.tests.test_TestIsclose.test_no_parameter_modification(self)
numpy._core.tests.test_TestIsclose.test_non_finite_scalar(self)
numpy._core.tests.test_TestIsclose.test_scalar_return(self)
numpy._core.tests.test_TestIsclose.test_timedelta(self)
numpy._core.tests.test_TestIsclose.tst_all_isclose(self,x,y)
numpy._core.tests.test_TestIsclose.tst_isclose_allclose(self,x,y)
numpy._core.tests.test_TestIsclose.tst_none_isclose(self,x,y)
numpy._core.tests.test_TestIsscalar
numpy._core.tests.test_TestIsscalar.test_isscalar(self)
numpy._core.tests.test_TestKeepdims
numpy._core.tests.test_TestKeepdims.sub_array(np.ndarray)
numpy._core.tests.test_TestKeepdims.sub_array.sum(self,axis=None,dtype=None,out=None)
numpy._core.tests.test_TestKeepdims.test_raise(self)
numpy._core.tests.test_TestLikeFuncs
numpy._core.tests.test_TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy._core.tests.test_TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy._core.tests.test_TestLikeFuncs.setup_method(self)
numpy._core.tests.test_TestLikeFuncs.test_dtype_str_bytes(self,likefunc,dtype)
numpy._core.tests.test_TestLikeFuncs.test_empty_like(self)
numpy._core.tests.test_TestLikeFuncs.test_filled_like(self)
numpy._core.tests.test_TestLikeFuncs.test_ones_like(self)
numpy._core.tests.test_TestLikeFuncs.test_zeros_like(self)
numpy._core.tests.test_TestMoveaxis
numpy._core.tests.test_TestMoveaxis.test_array_likes(self)
numpy._core.tests.test_TestMoveaxis.test_errors(self)
numpy._core.tests.test_TestMoveaxis.test_move_multiples(self)
numpy._core.tests.test_TestMoveaxis.test_move_new_position(self)
numpy._core.tests.test_TestMoveaxis.test_move_to_end(self)
numpy._core.tests.test_TestMoveaxis.test_preserve_order(self)
numpy._core.tests.test_TestNonarrayArgs
numpy._core.tests.test_TestNonarrayArgs.test_choose(self)
numpy._core.tests.test_TestNonarrayArgs.test_clip(self)
numpy._core.tests.test_TestNonarrayArgs.test_compress(self)
numpy._core.tests.test_TestNonarrayArgs.test_count_nonzero(self)
numpy._core.tests.test_TestNonarrayArgs.test_diagonal(self)
numpy._core.tests.test_TestNonarrayArgs.test_dunder_round(self,dtype)
numpy._core.tests.test_TestNonarrayArgs.test_dunder_round_accuracy(self)
numpy._core.tests.test_TestNonarrayArgs.test_dunder_round_edgecases(self,val,ndigits)
numpy._core.tests.test_TestNonarrayArgs.test_mean(self)
numpy._core.tests.test_TestNonarrayArgs.test_prod(self)
numpy._core.tests.test_TestNonarrayArgs.test_ptp(self)
numpy._core.tests.test_TestNonarrayArgs.test_ravel(self)
numpy._core.tests.test_TestNonarrayArgs.test_repeat(self)
numpy._core.tests.test_TestNonarrayArgs.test_reshape(self)
numpy._core.tests.test_TestNonarrayArgs.test_round(self)
numpy._core.tests.test_TestNonarrayArgs.test_round_py_consistency(self)
numpy._core.tests.test_TestNonarrayArgs.test_searchsorted(self)
numpy._core.tests.test_TestNonarrayArgs.test_size(self)
numpy._core.tests.test_TestNonarrayArgs.test_squeeze(self)
numpy._core.tests.test_TestNonarrayArgs.test_std(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword_axis_None(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword_keepdims_false(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword_keepdims_true_masked(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword_multiple_axis(self)
numpy._core.tests.test_TestNonarrayArgs.test_std_with_mean_keyword_where_nontrivial(self)
numpy._core.tests.test_TestNonarrayArgs.test_sum(self)
numpy._core.tests.test_TestNonarrayArgs.test_swapaxes(self)
numpy._core.tests.test_TestNonarrayArgs.test_take(self)
numpy._core.tests.test_TestNonarrayArgs.test_trace(self)
numpy._core.tests.test_TestNonarrayArgs.test_transpose(self)
numpy._core.tests.test_TestNonarrayArgs.test_var(self)
numpy._core.tests.test_TestNonarrayArgs.test_var_with_mean_keyword(self)
numpy._core.tests.test_TestNonarrayArgs.test_var_with_mean_keyword_keepdims_false(self)
numpy._core.tests.test_TestNonarrayArgs.test_var_with_mean_keyword_keepdims_true_masked(self)
numpy._core.tests.test_TestNonarrayArgs.test_var_with_mean_keyword_where_nontrivial(self)
numpy._core.tests.test_TestNonzero
numpy._core.tests.test_TestNonzero.test_array_method(self)
numpy._core.tests.test_TestNonzero.test_count_nonzero_axis(self)
numpy._core.tests.test_TestNonzero.test_count_nonzero_axis_all_dtypes(self)
numpy._core.tests.test_TestNonzero.test_count_nonzero_axis_consistent(self)
numpy._core.tests.test_TestNonzero.test_countnonzero_axis_empty(self)
numpy._core.tests.test_TestNonzero.test_countnonzero_keepdims(self)
numpy._core.tests.test_TestNonzero.test_nonzero_exception_safe(self)
numpy._core.tests.test_TestNonzero.test_nonzero_invalid_object(self)
numpy._core.tests.test_TestNonzero.test_nonzero_onedim(self)
numpy._core.tests.test_TestNonzero.test_nonzero_sideeffect_safety(self)
numpy._core.tests.test_TestNonzero.test_nonzero_sideffects_structured_void(self)
numpy._core.tests.test_TestNonzero.test_nonzero_trivial(self)
numpy._core.tests.test_TestNonzero.test_nonzero_twodim(self)
numpy._core.tests.test_TestNonzero.test_nonzero_zerod(self)
numpy._core.tests.test_TestNonzero.test_return_type(self)
numpy._core.tests.test_TestNonzero.test_sparse(self)
numpy._core.tests.test_TestNonzero.test_structured_threadsafety(self)
numpy._core.tests.test_TestRequire
numpy._core.tests.test_TestRequire.generate_all_false(self,dtype)
numpy._core.tests.test_TestRequire.set_and_check_flag(self,flag,dtype,arr)
numpy._core.tests.test_TestRequire.test_C_and_F_simul(self)
numpy._core.tests.test_TestRequire.test_ensure_array(self)
numpy._core.tests.test_TestRequire.test_non_array_input(self)
numpy._core.tests.test_TestRequire.test_preserve_subtype(self)
numpy._core.tests.test_TestRequire.test_require_each(self)
numpy._core.tests.test_TestRequire.test_unknown_requirement(self)
numpy._core.tests.test_TestResize
numpy._core.tests.test_TestResize.test_copies(self)
numpy._core.tests.test_TestResize.test_negative_resize(self)
numpy._core.tests.test_TestResize.test_repeats(self)
numpy._core.tests.test_TestResize.test_reshape_from_zero(self)
numpy._core.tests.test_TestResize.test_subclass(self)
numpy._core.tests.test_TestResize.test_zeroresize(self)
numpy._core.tests.test_TestRoll
numpy._core.tests.test_TestRoll.test_roll1d(self)
numpy._core.tests.test_TestRoll.test_roll2d(self)
numpy._core.tests.test_TestRoll.test_roll_empty(self)
numpy._core.tests.test_TestRollaxis
numpy._core.tests.test_TestRollaxis.test_exceptions(self)
numpy._core.tests.test_TestRollaxis.test_results(self)
numpy._core.tests.test_TestSeterr
numpy._core.tests.test_TestSeterr.test_default(self)
numpy._core.tests.test_TestSeterr.test_divide_err(self)
numpy._core.tests.test_TestSeterr.test_set(self)
numpy._core.tests.test_TestStdVar
numpy._core.tests.test_TestStdVar.setup_method(self)
numpy._core.tests.test_TestStdVar.test_basic(self)
numpy._core.tests.test_TestStdVar.test_correction(self)
numpy._core.tests.test_TestStdVar.test_ddof1(self)
numpy._core.tests.test_TestStdVar.test_ddof2(self)
numpy._core.tests.test_TestStdVar.test_out_scalar(self)
numpy._core.tests.test_TestStdVar.test_scalars(self)
numpy._core.tests.test_TestStdVarComplex
numpy._core.tests.test_TestStdVarComplex.test_basic(self)
numpy._core.tests.test_TestStdVarComplex.test_scalars(self)
numpy._core.tests.test_TestStringFunction
numpy._core.tests.test_TestStringFunction.test_set_string_function(self)
numpy._core.tests.test_TestTensordot
numpy._core.tests.test_TestTensordot.test_zero_dimension(self)
numpy._core.tests.test_TestTensordot.test_zero_dimensional(self)
numpy._core.tests.test_TestTypes
numpy._core.tests.test_TestTypes.check_promotion_cases(self,promote_func)
numpy._core.tests.test_TestTypes.test_can_cast(self)
numpy._core.tests.test_TestTypes.test_can_cast_and_promote_usertypes(self)
numpy._core.tests.test_TestTypes.test_can_cast_scalars(self,dtype)
numpy._core.tests.test_TestTypes.test_can_cast_simple_to_structured(self)
numpy._core.tests.test_TestTypes.test_can_cast_structured_to_simple(self)
numpy._core.tests.test_TestTypes.test_can_cast_values(self)
numpy._core.tests.test_TestTypes.test_coercion(self)
numpy._core.tests.test_TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy._core.tests.test_TestTypes.test_promote_identical_types_metadata(self,dtype)
numpy._core.tests.test_TestTypes.test_promote_types_endian(self)
numpy._core.tests.test_TestTypes.test_promote_types_metadata(self,dtype1,dtype2)
numpy._core.tests.test_TestTypes.test_promote_types_strings(self,swap,string_dtype)
numpy._core.tests.test_TestTypes.test_result_type(self)
numpy._core.tests.test_TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy._core.tests.test__test_array_equal_parametrizations()
numpy._core.tests.test_assert_array_strict_equal(x,y)
numpy._core.tests.test_numeric.NIterError(Exception)
numpy._core.tests.test_numeric.TestAllclose
numpy._core.tests.test_numeric.TestAllclose.setup_method(self)
numpy._core.tests.test_numeric.TestAllclose.teardown_method(self)
numpy._core.tests.test_numeric.TestAllclose.test_equalnan(self)
numpy._core.tests.test_numeric.TestAllclose.test_ip_allclose(self)
numpy._core.tests.test_numeric.TestAllclose.test_ip_not_allclose(self)
numpy._core.tests.test_numeric.TestAllclose.test_min_int(self)
numpy._core.tests.test_numeric.TestAllclose.test_no_parameter_modification(self)
numpy._core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray(self)
numpy._core.tests.test_numeric.TestAllclose.tst_allclose(self,x,y)
numpy._core.tests.test_numeric.TestAllclose.tst_not_allclose(self,x,y)
numpy._core.tests.test_numeric.TestArgwhere
numpy._core.tests.test_numeric.TestArgwhere.test_2D(self)
numpy._core.tests.test_numeric.TestArgwhere.test_list(self)
numpy._core.tests.test_numeric.TestArgwhere.test_nd(self,nd)
numpy._core.tests.test_numeric.TestArrayComparisons
numpy._core.tests.test_numeric.TestArrayComparisons.test_array_equal_different_scalar_types(self)
numpy._core.tests.test_numeric.TestArrayComparisons.test_array_equal_equal_nan(self,bx,by,equal_nan,expected)
numpy._core.tests.test_numeric.TestArrayComparisons.test_array_equiv(self)
numpy._core.tests.test_numeric.TestArrayComparisons.test_compare_unstructured_voids(self,dtype)
numpy._core.tests.test_numeric.TestArrayComparisons.test_none_compares_elementwise(self)
numpy._core.tests.test_numeric.TestAsType
numpy._core.tests.test_numeric.TestAsType.test_astype(self)
numpy._core.tests.test_numeric.TestBaseRepr
numpy._core.tests.test_numeric.TestBaseRepr.test_base3(self)
numpy._core.tests.test_numeric.TestBaseRepr.test_base_range(self)
numpy._core.tests.test_numeric.TestBaseRepr.test_minimal_signed_int(self)
numpy._core.tests.test_numeric.TestBaseRepr.test_negative(self)
numpy._core.tests.test_numeric.TestBaseRepr.test_positive(self)
numpy._core.tests.test_numeric.TestBinaryRepr
numpy._core.tests.test_numeric.TestBinaryRepr.test_large_neg_int64(self)
numpy._core.tests.test_numeric.TestBinaryRepr.test_neg_width_boundaries(self)
numpy._core.tests.test_numeric.TestBinaryRepr.test_negative(self)
numpy._core.tests.test_numeric.TestBinaryRepr.test_positive(self)
numpy._core.tests.test_numeric.TestBinaryRepr.test_sufficient_width(self)
numpy._core.tests.test_numeric.TestBinaryRepr.test_zero(self)
numpy._core.tests.test_numeric.TestBoolArray
numpy._core.tests.test_numeric.TestBoolArray.setup_method(self)
numpy._core.tests.test_numeric.TestBoolArray.test_all_any(self)
numpy._core.tests.test_numeric.TestBoolArray.test_logical_and_or_xor(self)
numpy._core.tests.test_numeric.TestBoolArray.test_logical_not_abs(self)
numpy._core.tests.test_numeric.TestBoolCmp
numpy._core.tests.test_numeric.TestBoolCmp.setup_method(self)
numpy._core.tests.test_numeric.TestBoolCmp.test_double(self)
numpy._core.tests.test_numeric.TestBoolCmp.test_float(self)
numpy._core.tests.test_numeric.TestBoolScalar
numpy._core.tests.test_numeric.TestBoolScalar.test_bitwise_and(self)
numpy._core.tests.test_numeric.TestBoolScalar.test_bitwise_or(self)
numpy._core.tests.test_numeric.TestBoolScalar.test_bitwise_xor(self)
numpy._core.tests.test_numeric.TestBoolScalar.test_logical(self)
numpy._core.tests.test_numeric.TestBroadcast
numpy._core.tests.test_numeric.TestBroadcast.test_broadcast_error_kwargs(self)
numpy._core.tests.test_numeric.TestBroadcast.test_broadcast_in_args(self)
numpy._core.tests.test_numeric.TestBroadcast.test_broadcast_single_arg(self)
numpy._core.tests.test_numeric.TestBroadcast.test_number_of_arguments(self)
numpy._core.tests.test_numeric.TestBroadcast.test_shape_mismatch_error_message(self)
numpy._core.tests.test_numeric.TestClip
numpy._core.tests.test_numeric.TestClip._generate_data(self,n,m)
numpy._core.tests.test_numeric.TestClip._generate_data_complex(self,n,m)
numpy._core.tests.test_numeric.TestClip._generate_flt_data(self,n,m)
numpy._core.tests.test_numeric.TestClip._generate_int32_data(self,n,m)
numpy._core.tests.test_numeric.TestClip._generate_int_data(self,n,m)
numpy._core.tests.test_numeric.TestClip._generate_non_native_data(self,n,m)
numpy._core.tests.test_numeric.TestClip._neg_byteorder(self,a)
numpy._core.tests.test_numeric.TestClip.clip(self,a,m,M,out=None)
numpy._core.tests.test_numeric.TestClip.fastclip(self,a,m,M,out=None,**kwargs)
numpy._core.tests.test_numeric.TestClip.setup_method(self)
numpy._core.tests.test_numeric.TestClip.test_NaT_propagation(self,arr,amin,amax)
numpy._core.tests.test_numeric.TestClip.test_array_double(self)
numpy._core.tests.test_numeric.TestClip.test_clip_all_none(self)
numpy._core.tests.test_numeric.TestClip.test_clip_complex(self)
numpy._core.tests.test_numeric.TestClip.test_clip_func_takes_out(self)
numpy._core.tests.test_numeric.TestClip.test_clip_inplace_array(self)
numpy._core.tests.test_numeric.TestClip.test_clip_inplace_simple(self)
numpy._core.tests.test_numeric.TestClip.test_clip_invalid_casting(self)
numpy._core.tests.test_numeric.TestClip.test_clip_nan(self)
numpy._core.tests.test_numeric.TestClip.test_clip_non_contig(self)
numpy._core.tests.test_numeric.TestClip.test_clip_problem_cases(self,arr,amin,amax,exp)
numpy._core.tests.test_numeric.TestClip.test_clip_property(self,data,arr)
numpy._core.tests.test_numeric.TestClip.test_clip_scalar_nan_propagation(self,arr,amin,amax)
numpy._core.tests.test_numeric.TestClip.test_clip_value_min_max_flip(self,amin,amax)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_array_int32(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_array_outint32(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_memory_overlap(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_simple(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_simple2(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_simple_int32(self)
numpy._core.tests.test_numeric.TestClip.test_clip_with_out_transposed(self)
numpy._core.tests.test_numeric.TestClip.test_noncontig_inplace(self)
numpy._core.tests.test_numeric.TestClip.test_object_clip(self)
numpy._core.tests.test_numeric.TestClip.test_ones_pathological(self,dtype)
numpy._core.tests.test_numeric.TestClip.test_simple_complex(self)
numpy._core.tests.test_numeric.TestClip.test_simple_double(self)
numpy._core.tests.test_numeric.TestClip.test_simple_inplace_01(self)
numpy._core.tests.test_numeric.TestClip.test_simple_inplace_02(self)
numpy._core.tests.test_numeric.TestClip.test_simple_int(self)
numpy._core.tests.test_numeric.TestClip.test_simple_int32_inout(self,casting)
numpy._core.tests.test_numeric.TestClip.test_simple_int32_out(self)
numpy._core.tests.test_numeric.TestClip.test_simple_int64_inout(self)
numpy._core.tests.test_numeric.TestClip.test_simple_int64_out(self)
numpy._core.tests.test_numeric.TestClip.test_simple_nonnative(self)
numpy._core.tests.test_numeric.TestClip.test_simple_out(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_01(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_02(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_03(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_04(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_05(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_06(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_07(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_08(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_09(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_10(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_11(self)
numpy._core.tests.test_numeric.TestClip.test_type_cast_12(self)
numpy._core.tests.test_numeric.TestConvolve
numpy._core.tests.test_numeric.TestConvolve.test_mode(self)
numpy._core.tests.test_numeric.TestConvolve.test_no_overwrite(self)
numpy._core.tests.test_numeric.TestConvolve.test_object(self)
numpy._core.tests.test_numeric.TestCorrelate
numpy._core.tests.test_numeric.TestCorrelate._setup(self,dt)
numpy._core.tests.test_numeric.TestCorrelate.test_complex(self)
numpy._core.tests.test_numeric.TestCorrelate.test_float(self)
numpy._core.tests.test_numeric.TestCorrelate.test_mode(self)
numpy._core.tests.test_numeric.TestCorrelate.test_no_overwrite(self)
numpy._core.tests.test_numeric.TestCorrelate.test_object(self)
numpy._core.tests.test_numeric.TestCorrelate.test_zero_size(self)
numpy._core.tests.test_numeric.TestCreationFuncs
numpy._core.tests.test_numeric.TestCreationFuncs.check_function(self,func,fill_value=None)
numpy._core.tests.test_numeric.TestCreationFuncs.setup_method(self)
numpy._core.tests.test_numeric.TestCreationFuncs.test_empty(self)
numpy._core.tests.test_numeric.TestCreationFuncs.test_for_reference_leak(self)
numpy._core.tests.test_numeric.TestCreationFuncs.test_full(self)
numpy._core.tests.test_numeric.TestCreationFuncs.test_ones(self)
numpy._core.tests.test_numeric.TestCreationFuncs.test_zeros(self)
numpy._core.tests.test_numeric.TestCross
numpy._core.tests.test_numeric.TestCross.test_2x2(self)
numpy._core.tests.test_numeric.TestCross.test_2x3(self)
numpy._core.tests.test_numeric.TestCross.test_3x3(self)
numpy._core.tests.test_numeric.TestCross.test_broadcasting(self)
numpy._core.tests.test_numeric.TestCross.test_broadcasting_shapes(self)
numpy._core.tests.test_numeric.TestCross.test_uint8_int32_mixed_dtypes(self)
numpy._core.tests.test_numeric.TestCross.test_zero_dimension(self,a,b)
numpy._core.tests.test_numeric.TestFloatExceptions
numpy._core.tests.test_numeric.TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy._core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy._core.tests.test_numeric.TestFloatExceptions.test_floating_exceptions(self,typecode)
numpy._core.tests.test_numeric.TestFloatExceptions.test_warnings(self)
numpy._core.tests.test_numeric.TestFromiter
numpy._core.tests.test_numeric.TestFromiter.load_data(self,n,eindex)
numpy._core.tests.test_numeric.TestFromiter.makegen(self)
numpy._core.tests.test_numeric.TestFromiter.test_2592(self,count,error_index,dtype)
numpy._core.tests.test_numeric.TestFromiter.test_empty_not_structured(self,dtype)
numpy._core.tests.test_numeric.TestFromiter.test_empty_result(self)
numpy._core.tests.test_numeric.TestFromiter.test_failed_itemsetting(self)
numpy._core.tests.test_numeric.TestFromiter.test_growth_and_complicated_dtypes(self,dtype,data,length_hint)
numpy._core.tests.test_numeric.TestFromiter.test_lengths(self)
numpy._core.tests.test_numeric.TestFromiter.test_too_few_items(self)
numpy._core.tests.test_numeric.TestFromiter.test_types(self)
numpy._core.tests.test_numeric.TestFromiter.test_values(self)
numpy._core.tests.test_numeric.TestIndex
numpy._core.tests.test_numeric.TestIndex.test_boolean(self)
numpy._core.tests.test_numeric.TestIndex.test_boolean_edgecase(self)
numpy._core.tests.test_numeric.TestIndices
numpy._core.tests.test_numeric.TestIndices.test_return_type(self,dtype,dims)
numpy._core.tests.test_numeric.TestIndices.test_scalar_input(self)
numpy._core.tests.test_numeric.TestIndices.test_simple(self)
numpy._core.tests.test_numeric.TestIndices.test_single_input(self)
numpy._core.tests.test_numeric.TestIndices.test_sparse(self)
numpy._core.tests.test_numeric.TestIsclose
numpy._core.tests.test_numeric.TestIsclose._setup(self)
numpy._core.tests.test_numeric.TestIsclose.test_equal_nan(self)
numpy._core.tests.test_numeric.TestIsclose.test_ip_all_isclose(self)
numpy._core.tests.test_numeric.TestIsclose.test_ip_isclose(self)
numpy._core.tests.test_numeric.TestIsclose.test_ip_isclose_allclose(self)
numpy._core.tests.test_numeric.TestIsclose.test_ip_none_isclose(self)
numpy._core.tests.test_numeric.TestIsclose.test_masked_arrays(self)
numpy._core.tests.test_numeric.TestIsclose.test_nep50_isclose(self)
numpy._core.tests.test_numeric.TestIsclose.test_no_parameter_modification(self)
numpy._core.tests.test_numeric.TestIsclose.test_non_finite_scalar(self)
numpy._core.tests.test_numeric.TestIsclose.test_scalar_return(self)
numpy._core.tests.test_numeric.TestIsclose.test_timedelta(self)
numpy._core.tests.test_numeric.TestIsclose.tst_all_isclose(self,x,y)
numpy._core.tests.test_numeric.TestIsclose.tst_isclose_allclose(self,x,y)
numpy._core.tests.test_numeric.TestIsclose.tst_none_isclose(self,x,y)
numpy._core.tests.test_numeric.TestIsscalar
numpy._core.tests.test_numeric.TestIsscalar.test_isscalar(self)
numpy._core.tests.test_numeric.TestKeepdims
numpy._core.tests.test_numeric.TestKeepdims.sub_array(np.ndarray)
numpy._core.tests.test_numeric.TestKeepdims.sub_array.sum(self,axis=None,dtype=None,out=None)
numpy._core.tests.test_numeric.TestKeepdims.test_raise(self)
numpy._core.tests.test_numeric.TestLikeFuncs
numpy._core.tests.test_numeric.TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy._core.tests.test_numeric.TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy._core.tests.test_numeric.TestLikeFuncs.setup_method(self)
numpy._core.tests.test_numeric.TestLikeFuncs.test_dtype_str_bytes(self,likefunc,dtype)
numpy._core.tests.test_numeric.TestLikeFuncs.test_empty_like(self)
numpy._core.tests.test_numeric.TestLikeFuncs.test_filled_like(self)
numpy._core.tests.test_numeric.TestLikeFuncs.test_ones_like(self)
numpy._core.tests.test_numeric.TestLikeFuncs.test_zeros_like(self)
numpy._core.tests.test_numeric.TestMoveaxis
numpy._core.tests.test_numeric.TestMoveaxis.test_array_likes(self)
numpy._core.tests.test_numeric.TestMoveaxis.test_errors(self)
numpy._core.tests.test_numeric.TestMoveaxis.test_move_multiples(self)
numpy._core.tests.test_numeric.TestMoveaxis.test_move_new_position(self)
numpy._core.tests.test_numeric.TestMoveaxis.test_move_to_end(self)
numpy._core.tests.test_numeric.TestMoveaxis.test_preserve_order(self)
numpy._core.tests.test_numeric.TestNonarrayArgs
numpy._core.tests.test_numeric.TestNonarrayArgs.test_choose(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_clip(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_compress(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_count_nonzero(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_diagonal(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_dunder_round(self,dtype)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_dunder_round_accuracy(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_dunder_round_edgecases(self,val,ndigits)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_mean(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_prod(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_ptp(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_ravel(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_repeat(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_reshape(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_round(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_round_py_consistency(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_searchsorted(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_size(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_squeeze(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword_axis_None(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword_keepdims_false(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword_keepdims_true_masked(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword_multiple_axis(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_std_with_mean_keyword_where_nontrivial(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_sum(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_swapaxes(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_take(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_trace(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_transpose(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_var(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_var_with_mean_keyword(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_var_with_mean_keyword_keepdims_false(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_var_with_mean_keyword_keepdims_true_masked(self)
numpy._core.tests.test_numeric.TestNonarrayArgs.test_var_with_mean_keyword_where_nontrivial(self)
numpy._core.tests.test_numeric.TestNonzero
numpy._core.tests.test_numeric.TestNonzero.test_array_method(self)
numpy._core.tests.test_numeric.TestNonzero.test_count_nonzero_axis(self)
numpy._core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes(self)
numpy._core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_consistent(self)
numpy._core.tests.test_numeric.TestNonzero.test_countnonzero_axis_empty(self)
numpy._core.tests.test_numeric.TestNonzero.test_countnonzero_keepdims(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_exception_safe(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_onedim(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_sideeffect_safety(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_sideffects_structured_void(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_trivial(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_twodim(self)
numpy._core.tests.test_numeric.TestNonzero.test_nonzero_zerod(self)
numpy._core.tests.test_numeric.TestNonzero.test_return_type(self)
numpy._core.tests.test_numeric.TestNonzero.test_sparse(self)
numpy._core.tests.test_numeric.TestNonzero.test_structured_threadsafety(self)
numpy._core.tests.test_numeric.TestRequire
numpy._core.tests.test_numeric.TestRequire.generate_all_false(self,dtype)
numpy._core.tests.test_numeric.TestRequire.set_and_check_flag(self,flag,dtype,arr)
numpy._core.tests.test_numeric.TestRequire.test_C_and_F_simul(self)
numpy._core.tests.test_numeric.TestRequire.test_ensure_array(self)
numpy._core.tests.test_numeric.TestRequire.test_non_array_input(self)
numpy._core.tests.test_numeric.TestRequire.test_preserve_subtype(self)
numpy._core.tests.test_numeric.TestRequire.test_require_each(self)
numpy._core.tests.test_numeric.TestRequire.test_unknown_requirement(self)
numpy._core.tests.test_numeric.TestResize
numpy._core.tests.test_numeric.TestResize.test_copies(self)
numpy._core.tests.test_numeric.TestResize.test_negative_resize(self)
numpy._core.tests.test_numeric.TestResize.test_repeats(self)
numpy._core.tests.test_numeric.TestResize.test_reshape_from_zero(self)
numpy._core.tests.test_numeric.TestResize.test_subclass(self)
numpy._core.tests.test_numeric.TestResize.test_zeroresize(self)
numpy._core.tests.test_numeric.TestRoll
numpy._core.tests.test_numeric.TestRoll.test_roll1d(self)
numpy._core.tests.test_numeric.TestRoll.test_roll2d(self)
numpy._core.tests.test_numeric.TestRoll.test_roll_empty(self)
numpy._core.tests.test_numeric.TestRollaxis
numpy._core.tests.test_numeric.TestRollaxis.test_exceptions(self)
numpy._core.tests.test_numeric.TestRollaxis.test_results(self)
numpy._core.tests.test_numeric.TestSeterr
numpy._core.tests.test_numeric.TestSeterr.test_default(self)
numpy._core.tests.test_numeric.TestSeterr.test_divide_err(self)
numpy._core.tests.test_numeric.TestSeterr.test_set(self)
numpy._core.tests.test_numeric.TestStdVar
numpy._core.tests.test_numeric.TestStdVar.setup_method(self)
numpy._core.tests.test_numeric.TestStdVar.test_basic(self)
numpy._core.tests.test_numeric.TestStdVar.test_correction(self)
numpy._core.tests.test_numeric.TestStdVar.test_ddof1(self)
numpy._core.tests.test_numeric.TestStdVar.test_ddof2(self)
numpy._core.tests.test_numeric.TestStdVar.test_out_scalar(self)
numpy._core.tests.test_numeric.TestStdVar.test_scalars(self)
numpy._core.tests.test_numeric.TestStdVarComplex
numpy._core.tests.test_numeric.TestStdVarComplex.test_basic(self)
numpy._core.tests.test_numeric.TestStdVarComplex.test_scalars(self)
numpy._core.tests.test_numeric.TestStringFunction
numpy._core.tests.test_numeric.TestStringFunction.test_set_string_function(self)
numpy._core.tests.test_numeric.TestTensordot
numpy._core.tests.test_numeric.TestTensordot.test_zero_dimension(self)
numpy._core.tests.test_numeric.TestTensordot.test_zero_dimensional(self)
numpy._core.tests.test_numeric.TestTypes
numpy._core.tests.test_numeric.TestTypes.check_promotion_cases(self,promote_func)
numpy._core.tests.test_numeric.TestTypes.test_can_cast(self)
numpy._core.tests.test_numeric.TestTypes.test_can_cast_and_promote_usertypes(self)
numpy._core.tests.test_numeric.TestTypes.test_can_cast_scalars(self,dtype)
numpy._core.tests.test_numeric.TestTypes.test_can_cast_simple_to_structured(self)
numpy._core.tests.test_numeric.TestTypes.test_can_cast_structured_to_simple(self)
numpy._core.tests.test_numeric.TestTypes.test_can_cast_values(self)
numpy._core.tests.test_numeric.TestTypes.test_coercion(self)
numpy._core.tests.test_numeric.TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy._core.tests.test_numeric.TestTypes.test_promote_identical_types_metadata(self,dtype)
numpy._core.tests.test_numeric.TestTypes.test_promote_types_endian(self)
numpy._core.tests.test_numeric.TestTypes.test_promote_types_metadata(self,dtype1,dtype2)
numpy._core.tests.test_numeric.TestTypes.test_promote_types_strings(self,swap,string_dtype)
numpy._core.tests.test_numeric.TestTypes.test_result_type(self)
numpy._core.tests.test_numeric.TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy._core.tests.test_numeric._test_array_equal_parametrizations()
numpy._core.tests.test_numeric.assert_array_strict_equal(x,y)
numpy._core.tests.test_numeric.test_outer_out_param()
numpy._core.tests.test_test_outer_out_param()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_mem_policy.py----------------------------------------
A:numpy._core.tests.test_mem_policy.orig_policy_name->numpy._core.multiarray.get_handler_name(a)
A:numpy._core.tests.test_mem_policy.a->get_module.get_array_with_base()
A:numpy._core.tests.test_mem_policy.orig_policy->get_module.set_secret_data_policy()
A:numpy._core.tests.test_mem_policy.b->numpy.arange(10)
A:numpy._core.tests.test_mem_policy.def_policy_1->get_module.set_old_policy(None)
A:numpy._core.tests.test_mem_policy.def_policy_2->get_module.set_old_policy(orig_policy)
A:numpy._core.tests.test_mem_policy.event->threading.Event()
A:numpy._core.tests.test_mem_policy.concurrent_task1->threading.Thread(target=concurrent_thread1, args=(get_module, event))
A:numpy._core.tests.test_mem_policy.concurrent_task2->threading.Thread(target=concurrent_thread2, args=(get_module, event))
A:numpy._core.tests.test_mem_policy.c->numpy.arange(10)
A:numpy._core.tests.test_mem_policy.oldval->numpy._core._multiarray_umath._set_numpy_warn_if_no_mem_policy(policy)
numpy._core.tests.test_mem_policy.async_test_context_locality(get_module)
numpy._core.tests.test_mem_policy.concurrent_context1(get_module,orig_policy_name,event)
numpy._core.tests.test_mem_policy.concurrent_context2(get_module,orig_policy_name,event)
numpy._core.tests.test_mem_policy.concurrent_thread1(get_module,event)
numpy._core.tests.test_mem_policy.concurrent_thread2(get_module,event)
numpy._core.tests.test_mem_policy.get_module(tmp_path)
numpy._core.tests.test_mem_policy.test_context_locality(get_module)
numpy._core.tests.test_mem_policy.test_default_policy_singleton(get_module)
numpy._core.tests.test_mem_policy.test_new_policy(get_module)
numpy._core.tests.test_mem_policy.test_owner_is_base(get_module)
numpy._core.tests.test_mem_policy.test_policy_propagation(get_module)
numpy._core.tests.test_mem_policy.test_set_policy(get_module)
numpy._core.tests.test_mem_policy.test_switch_owner(get_module,policy)
numpy._core.tests.test_mem_policy.test_thread_locality(get_module)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_mem_overlap.py----------------------------------------
A:numpy._core.tests.test_mem_overlap.shape->tuple((rng.randint(1, 30, dtype=np.intp) for j in range(ndim)))
A:numpy._core.tests.test_mem_overlap.ind->numpy.arange(0, 100, 2, dtype=np.int16)
A:numpy._core.tests.test_mem_overlap.arr->numpy.arange(np.prod(shape)).reshape(shape)
A:numpy._core.tests.test_mem_overlap.cpy->numpy.arange(np.prod(shape)).reshape(shape).copy()
A:numpy._core.tests.test_mem_overlap.inds->_indices(ndims)
A:numpy._core.tests.test_mem_overlap.srcidx->tuple([a[0] for a in ind])
A:numpy._core.tests.test_mem_overlap.dstidx->tuple([a[1] for a in ind])
A:numpy._core.tests.test_mem_overlap.rng->numpy.random.RandomState(1234)
A:numpy._core.tests.test_mem_overlap.A_max->min(max_int, A_max)
A:numpy._core.tests.test_mem_overlap.U_max->min(max_int - 1, U_max)
A:numpy._core.tests.test_mem_overlap.A->tuple((int(rng.randint(1, A_max + 1, dtype=np.intp)) for j in range(ndim)))
A:numpy._core.tests.test_mem_overlap.U->tuple((int(rng.randint(0, U_max + 2, dtype=np.intp)) for j in range(ndim)))
A:numpy._core.tests.test_mem_overlap.b_ub->min(max_int - 2, sum((a * ub for (a, ub) in zip(A, U))))
A:numpy._core.tests.test_mem_overlap.b->x[s2].transpose(t2)
A:numpy._core.tests.test_mem_overlap.X->solve_diophantine(A, U, 0, require_ub_nontrivial=1)
A:numpy._core.tests.test_mem_overlap.X_simplified->solve_diophantine(A, U, b, simplify=1)
A:numpy._core.tests.test_mem_overlap.ranges->tuple((range(n) for n in a.shape))
A:numpy._core.tests.test_mem_overlap.got->operation(*args, **kwargs).copy()
A:numpy._core.tests.test_mem_overlap.exact->x[s2].transpose(t2).any()
A:numpy._core.tests.test_mem_overlap.xp->as_strided(x, shape=x.shape, strides=strides)
A:numpy._core.tests.test_mem_overlap.x->numpy.random.RandomState(1234).rand(200, 200)
A:numpy._core.tests.test_mem_overlap.start->numpy.random.RandomState(1234).randint(0, n + 1, dtype=np.intp)
A:numpy._core.tests.test_mem_overlap.stop->numpy.random.RandomState(1234).randint(start, n + 1, dtype=np.intp)
A:numpy._core.tests.test_mem_overlap.strides->tuple((rng.randint(-1000, 1000, dtype=np.intp) for j in range(ndim)))
A:numpy._core.tests.test_mem_overlap.steps->tuple((rng.randint(1, 11, dtype=np.intp) if rng.randint(0, 5, dtype=np.intp) == 0 else 1 for j in range(x.ndim)))
A:numpy._core.tests.test_mem_overlap.s1->tuple((random_slice(p, s) for (p, s) in zip(x.shape, steps)))
A:numpy._core.tests.test_mem_overlap.t1->numpy.arange(x.ndim)
A:numpy._core.tests.test_mem_overlap.t2->numpy.arange(x.ndim)
A:numpy._core.tests.test_mem_overlap.steps2->tuple((rng.randint(1, 11, dtype=np.intp) if rng.randint(0, 5, dtype=np.intp) == 0 else 1 for j in range(x.ndim)))
A:numpy._core.tests.test_mem_overlap.s2->tuple((random_slice(p, s) for (p, s) in zip(x.shape, steps2)))
A:numpy._core.tests.test_mem_overlap.a->numpy.arange(100, dtype=np.int16)
A:numpy._core.tests.test_mem_overlap.pair_iter->iter_random_view_pairs(x, same_steps)
A:numpy._core.tests.test_mem_overlap.(a, b)->next(it)
A:numpy._core.tests.test_mem_overlap.bounds_overlap->numpy.may_share_memory(a, b)
A:numpy._core.tests.test_mem_overlap.may_share_answer->numpy.may_share_memory(a, b)
A:numpy._core.tests.test_mem_overlap.easy_answer->numpy.may_share_memory(a, b, max_work=get_max_work(a, b))
A:numpy._core.tests.test_mem_overlap.exact_answer->numpy.may_share_memory(a, b, max_work=MAY_SHARE_EXACT)
A:numpy._core.tests.test_mem_overlap.m->set()
A:numpy._core.tests.test_mem_overlap.offset->sum((s * w for (s, w) in zip(a.strides, v)))
A:numpy._core.tests.test_mem_overlap.ndim->numpy.random.RandomState(1234).randint(1, 4, dtype=np.intp)
A:numpy._core.tests.test_mem_overlap.result->check_internal_overlap(a)
A:numpy._core.tests.test_mem_overlap.interface->dict(x.__array_interface__)
A:numpy._core.tests.test_mem_overlap.kwargs2->dict(kwargs)
A:numpy._core.tests.test_mem_overlap.kwargs2['out']->out.copy()
A:numpy._core.tests.test_mem_overlap.out_orig->out.copy()
A:numpy._core.tests.test_mem_overlap.out[...]->operation(*args, **kwargs2)
A:numpy._core.tests.test_mem_overlap.expected->out.copy()
A:numpy._core.tests.test_mem_overlap.it->iter_random_view_pairs(x, same_steps=False, equal_size=True)
A:numpy._core.tests.test_mem_overlap.a_orig->numpy.arange(100, dtype=np.int16).copy()
A:numpy._core.tests.test_mem_overlap.b_orig->x[s2].transpose(t2).copy()
A:numpy._core.tests.test_mem_overlap.(outsize, scalarize)->get_out_axis_size(a, b, axis)
A:numpy._core.tests.test_mem_overlap.sl[axis]->slice(0, outsize)
A:numpy._core.tests.test_mem_overlap.b_out->b_out.reshape([]).reshape([])
A:numpy._core.tests.test_mem_overlap.size->len(a)
A:numpy._core.tests.test_mem_overlap.idx->numpy.arange(0, size, step)
A:numpy._core.tests.test_mem_overlap.c1->ufunc(a, b, out=c0)
A:numpy._core.tests.test_mem_overlap.c2->ufunc(a, b, out=c)
A:numpy._core.tests.test_mem_overlap.n->max(2, int(np.sqrt(b.shape[-1])) // 2)
A:numpy._core.tests.test_mem_overlap.a0->numpy.arange(100, dtype=np.int16).copy()
A:numpy._core.tests.test_mem_overlap.b0->x[s2].transpose(t2).copy()
A:numpy._core.tests.test_mem_overlap.mask->view_element_first_byte(b).view(np.bool)
A:numpy._core.tests.test_mem_overlap.c3->ufunc(a, out=b, where=mask).copy()
A:numpy._core.tests.test_mem_overlap.v->numpy.arange(6 * n).astype(dtype)
A:numpy._core.tests.test_mem_overlap.c0->c.copy()
numpy._core.tests.test_mem_overlap.TestUFunc
numpy._core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz(self,operation,get_out_axis_size,dtype=np.int16,count=5000)
numpy._core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_inplace_op_simple_manual(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_unary_gufunc_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_complex_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_fuzz(self)
numpy._core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same(self)
numpy._core.tests.test_mem_overlap._check_assignment(srcidx,dstidx)
numpy._core.tests.test_mem_overlap._indices(ndims)
numpy._core.tests.test_mem_overlap._indices_for_axis()
numpy._core.tests.test_mem_overlap._indices_for_nelems(nelems)
numpy._core.tests.test_mem_overlap.assert_copy_equivalent(operation,args,out,**kwargs)
numpy._core.tests.test_mem_overlap.check_internal_overlap(a,manual_expected=None)
numpy._core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz(get_max_work,same_steps,min_count)
numpy._core.tests.test_mem_overlap.check_may_share_memory_exact(a,b)
numpy._core.tests.test_mem_overlap.iter_random_view_pairs(x,same_steps=True,equal_size=False)
numpy._core.tests.test_mem_overlap.test_diophantine_fuzz()
numpy._core.tests.test_mem_overlap.test_diophantine_overflow()
numpy._core.tests.test_mem_overlap.test_internal_overlap_diophantine()
numpy._core.tests.test_mem_overlap.test_internal_overlap_fuzz()
numpy._core.tests.test_mem_overlap.test_internal_overlap_manual()
numpy._core.tests.test_mem_overlap.test_internal_overlap_slices()
numpy._core.tests.test_mem_overlap.test_may_share_memory_bad_max_work()
numpy._core.tests.test_mem_overlap.test_may_share_memory_easy_fuzz()
numpy._core.tests.test_mem_overlap.test_may_share_memory_harder_fuzz()
numpy._core.tests.test_mem_overlap.test_may_share_memory_manual()
numpy._core.tests.test_mem_overlap.test_non_ndarray_inputs()
numpy._core.tests.test_mem_overlap.test_overlapping_assignments()
numpy._core.tests.test_mem_overlap.test_shares_memory_api()
numpy._core.tests.test_mem_overlap.view_element_first_byte(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_array_coercion.py----------------------------------------
A:numpy._core.tests.test_array_coercion.length->len(str(obj[0]))
A:numpy._core.tests.test_array_coercion.expected->numpy.broadcast_to(arr[:, :, np.newaxis, np.newaxis], (5, 2, 2, 2))
A:numpy._core.tests.test_array_coercion.arr->numpy.array([''] * 10, dtype=object)
A:numpy._core.tests.test_array_coercion.obj->memoryview(arr)
A:numpy._core.tests.test_array_coercion.obj[0]->numpy.array(1.2)
A:numpy._core.tests.test_array_coercion.expected_dtype->numpy.promote_types(dt1, dt2)
A:numpy._core.tests.test_array_coercion.scalar->numpy.timedelta64(val, unit)
A:numpy._core.tests.test_array_coercion.arr1->numpy.array(scalar).reshape(1)
A:numpy._core.tests.test_array_coercion.arr2->numpy.array([scalar])
A:numpy._core.tests.test_array_coercion.arr3->numpy.empty(1, dtype=scalar.dtype)
A:numpy._core.tests.test_array_coercion.arr4->numpy.empty(1, dtype=scalar.dtype)
A:numpy._core.tests.test_array_coercion.cast->numpy.array(scalar).astype('S6')
A:numpy._core.tests.test_array_coercion.res->numpy.array([[''] * 10, arr], dtype='S')
A:numpy._core.tests.test_array_coercion.ass->numpy.ones((), dtype='S6')
A:numpy._core.tests.test_array_coercion.dtype->numpy.dtype(dtype)
A:numpy._core.tests.test_array_coercion.(discovered_dtype, _)->numpy._core._multiarray_umath._discover_array_parameters([], type(dtype))
A:numpy._core.tests.test_array_coercion.coerced->numpy.array(scalar, dtype=dtype)
A:numpy._core.tests.test_array_coercion.cut_string->numpy.dtype(dtype).type(str(scalar)[:6])
A:numpy._core.tests.test_array_coercion.initial->arraylike(np.ones((1, 1)))
A:numpy._core.tests.test_array_coercion.out->numpy.array([arr, [arr]], dtype=object)
A:numpy._core.tests.test_array_coercion.mismatch_first_dim->numpy.zeros((1, 2))
A:numpy._core.tests.test_array_coercion.mismatch_second_dim->numpy.zeros((3, 3))
A:numpy._core.tests.test_array_coercion.(dtype, shape)->numpy._core._multiarray_umath._discover_array_parameters([arr, mismatch_first_dim], dtype=np.dtype('O'))
A:numpy._core.tests.test_array_coercion.empty->numpy.arange(1, dtype=object)
A:numpy._core.tests.test_array_coercion.int_array->numpy.array([1, 2, 3], dtype='i')
A:numpy._core.tests.test_array_coercion.unequal_type->numpy.dtype('i', metadata={'spam': True})
A:numpy._core.tests.test_array_coercion.annotated_int_array->numpy.asarray(int_array, dtype=unequal_type)
A:numpy._core.tests.test_array_coercion.equivalent_requirement->numpy.dtype('i', metadata={'spam': True})
A:numpy._core.tests.test_array_coercion.annotated_int_array_alt->numpy.asarray(annotated_int_array, dtype=equivalent_requirement)
A:numpy._core.tests.test_array_coercion.long_int_array->numpy.asarray(int_array, dtype='l')
A:numpy._core.tests.test_array_coercion.long_long_int_array->numpy.asarray(int_array, dtype='q')
A:numpy._core.tests.test_array_coercion.array_a->numpy.asarray(int_array, dtype=typeA)
numpy._core.tests.test_array_coercion.TestArrayLikes
numpy._core.tests.test_array_coercion.TestArrayLikes.test_0d_generic_special_case(self)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_0d_object_special_case(self,arraylike)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_arraylike_classes(self)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_attributes(self,attribute,error)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_bad_length(self,error)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_object_assignment_special_case(self,arraylike,arr)
numpy._core.tests.test_array_coercion.TestArrayLikes.test_too_large_array_error_paths(self)
numpy._core.tests.test_array_coercion.TestAsArray
numpy._core.tests.test_array_coercion.TestAsArray.test_dtype_identity(self)
numpy._core.tests.test_array_coercion.TestBadSequences
numpy._core.tests.test_array_coercion.TestBadSequences.test_growing_list(self)
numpy._core.tests.test_array_coercion.TestBadSequences.test_mutated_list(self)
numpy._core.tests.test_array_coercion.TestBadSequences.test_replace_0d_array(self)
numpy._core.tests.test_array_coercion.TestNested
numpy._core.tests.test_array_coercion.TestNested.test_array_of_different_depths(self)
numpy._core.tests.test_array_coercion.TestNested.test_empty_sequence(self)
numpy._core.tests.test_array_coercion.TestNested.test_nested_arraylikes(self,arraylike)
numpy._core.tests.test_array_coercion.TestNested.test_nested_simple(self)
numpy._core.tests.test_array_coercion.TestNested.test_pathological_self_containing(self)
numpy._core.tests.test_array_coercion.TestNested.test_uneven_depth_ragged(self,arraylike)
numpy._core.tests.test_array_coercion.TestScalarDiscovery
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case(self)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case_deep(self)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_default_dtype_instance(self,dtype_char)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_pyscalar_subclasses(self,pyscalar)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_scalar(self,scalar)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion(self,scalar)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion_same_as_cast_and_assignment(self,cast_to)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_promotion(self)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_to_int_coerce_does_not_cast(self,dtype,scalar,error)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_unknown_object(self)
numpy._core.tests.test_array_coercion.TestScalarDiscovery.test_void_special_case(self)
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure.WeirdArrayInterface
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure.WeirdArrayInterface.__array_interface__(self)
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure.WeirdArrayLike
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure.WeirdArrayLike.__array__(self,dtype=None,copy=None)
numpy._core.tests.test_array_coercion.TestSpecialAttributeLookupFailure.test_deprecated(self)
numpy._core.tests.test_array_coercion.TestStringDiscovery
numpy._core.tests.test_array_coercion.TestStringDiscovery.test_basic_stringlength(self,obj)
numpy._core.tests.test_array_coercion.TestStringDiscovery.test_nested_arrays_stringlength(self,obj)
numpy._core.tests.test_array_coercion.TestStringDiscovery.test_unpack_first_level(self,arraylike)
numpy._core.tests.test_array_coercion.TestTimeScalars
numpy._core.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_datetime(self,val,unit,dtype)
numpy._core.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_timedelta(self,val,unit)
numpy._core.tests.test_array_coercion.TestTimeScalars.test_coercion_basic(self,dtype,scalar)
numpy._core.tests.test_array_coercion.TestTimeScalars.test_coercion_timedelta_convert_to_number(self,dtype,scalar)
numpy._core.tests.test_array_coercion.arraylikes()
numpy._core.tests.test_array_coercion.is_parametric_dtype(dtype)
numpy._core.tests.test_array_coercion.scalar_instances(times=True,extended_precision=True,user_dtype=True)
numpy._core.tests.test_array_coercion.test_empty_string()
numpy._core.tests.test_array_coercion.test_subarray_from_array_construction()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_simd.py----------------------------------------
A:numpy._core.tests.test_simd.err->get_floatstatus()
A:numpy._core.tests.test_simd.rng->reversed(rng)
A:numpy._core.tests.test_simd.max_int->self._int_max()
A:numpy._core.tests.test_simd.min_int->self._int_min()
A:numpy._core.tests.test_simd.max_unsig->getattr(self.npyv, 'setall_u' + self.sfx[1:])(-1)
A:numpy._core.tests.test_simd.sfx->vector.__name__.replace('npyv_', '')
A:numpy._core.tests.test_simd.target->target.split('__').split('__')
A:numpy._core.tests.test_simd.true_mask->self.cmpeq(self.zero(), self.zero())
A:numpy._core.tests.test_simd.load->getattr(self.npyv, 'load_u' + len_str)
A:numpy._core.tests.test_simd.cvt->getattr(self.npyv, f'cvt_b{len_str}_u{len_str}')
A:numpy._core.tests.test_simd.data_a->self._data(self._int_max() - self.nlanes)
A:numpy._core.tests.test_simd.data_b->self._data(self._int_min(), reverse=True)
A:numpy._core.tests.test_simd.vdata_a->self.load(self._data())
A:numpy._core.tests.test_simd.vdata_b->self.load(self._data(reverse=True))
A:numpy._core.tests.test_simd.vand->cast(getattr(self, 'and')(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.vor->cast(getattr(self, 'or')(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.vxor->cast(self.xor(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.vnot->cast(getattr(self, 'not')(vdata_a))
A:numpy._core.tests.test_simd.vandc->cast(getattr(self, 'andc')(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.vorc->getattr(self, 'orc')(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.vxnor->getattr(self, 'xnor')(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.vdata->self.load(data)
A:numpy._core.tests.test_simd.data_bits->data2bits(data)
A:numpy._core.tests.test_simd.tobits->self.tobits(vdata)
A:numpy._core.tests.test_simd.bin_tobits->bin(tobits)
A:numpy._core.tests.test_simd.data->self._data(r)
A:numpy._core.tests.test_simd.rdata->self._data(reverse=True)
A:numpy._core.tests.test_simd.vrdata->self._load_b(rdata)
A:numpy._core.tests.test_simd.pack_simd->getattr(self.npyv, f'pack_b8_{self.sfx}')
A:numpy._core.tests.test_simd.vpack->pack_simd(vrdata, vrdata, vrdata, vrdata, vdata, vdata, vdata, vdata)
A:numpy._core.tests.test_simd.func->eval(intrin)
A:numpy._core.tests.test_simd.intrin->getattr(self, intrin)
A:numpy._core.tests.test_simd.desired->func(data_a)
A:numpy._core.tests.test_simd.simd->intrin(data_a)
A:numpy._core.tests.test_simd.data_shl_a->self.load([a << count for a in data_a])
A:numpy._core.tests.test_simd.shl->self.shl(vdata_a, count)
A:numpy._core.tests.test_simd.data_shr_a->self.load([a >> count for a in data_a])
A:numpy._core.tests.test_simd.shr->self.shr(vdata_a, count)
A:numpy._core.tests.test_simd.shli->self.shli(vdata_a, count)
A:numpy._core.tests.test_simd.shri->self.shri(vdata_a, count)
A:numpy._core.tests.test_simd.data_adds->self._int_clip([a + b for (a, b) in zip(data_a, data_b)])
A:numpy._core.tests.test_simd.adds->self.adds(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.data_subs->self._int_clip([a - b for (a, b) in zip(data_a, data_b)])
A:numpy._core.tests.test_simd.subs->self.subs(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.simd_max->self.max(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.simd_min->self.min(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.features->self._cpu_features()
A:numpy._core.tests.test_simd.vround->self.round_s32(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.vdata_cx2->self.add(vdata_c, vdata_c)
A:numpy._core.tests.test_simd.data_fma->self.load([a * b + c for (a, b, c) in zip(vdata_a, vdata_b, vdata_c)])
A:numpy._core.tests.test_simd.fma->self.muladd(vdata_a, vdata_b, vdata_c)
A:numpy._core.tests.test_simd.fms->self.mulsub(vdata_a, vdata_b, vdata_c)
A:numpy._core.tests.test_simd.data_fms->self.sub(data_fma, vdata_cx2)
A:numpy._core.tests.test_simd.nfma->self.nmuladd(vdata_a, vdata_b, vdata_c)
A:numpy._core.tests.test_simd.data_nfma->self.sub(vdata_cx2, data_fma)
A:numpy._core.tests.test_simd.nfms->self.nmulsub(vdata_a, vdata_b, vdata_c)
A:numpy._core.tests.test_simd.data_nfms->self.mul(data_fma, self.setall(-1))
A:numpy._core.tests.test_simd.fmas->list(self.muladdsub(vdata_a, vdata_b, vdata_c))
A:numpy._core.tests.test_simd.vabs->self.abs(self.mul(vdata, self.setall(-1)))
A:numpy._core.tests.test_simd.sqrt->self.sqrt(vdata)
A:numpy._core.tests.test_simd.data_sqrt->self.load([math.sqrt(x) for x in data])
A:numpy._core.tests.test_simd.square->self.square(vdata)
A:numpy._core.tests.test_simd._round->self._to_unsigned(intrin(self.setall(w)))
A:numpy._core.tests.test_simd.x->self.setall(i)
A:numpy._core.tests.test_simd.y->intrin(x)
A:numpy._core.tests.test_simd.data_round->self._to_unsigned(self.setall(-0.0))
A:numpy._core.tests.test_simd.chk_nan->{'xp': 1, 'np': 1, 'nn': 2, 'xn': 2}.get(intrin[-2:], 0)
A:numpy._core.tests.test_simd.reduce_intrin->getattr(self, 'reduce_' + intrin)
A:numpy._core.tests.test_simd.vdata_ab->self.load([op1, op2] * hf_nlanes)
A:numpy._core.tests.test_simd.recip->self.recip(vdata)
A:numpy._core.tests.test_simd.data_recip->self.load([1 / x for x in data])
A:numpy._core.tests.test_simd.nnan->self.notnan(self.setall(self._nan()))
A:numpy._core.tests.test_simd.v->self.setall(d)
A:numpy._core.tests.test_simd.mask_true->self._true_mask()
A:numpy._core.tests.test_simd.vcmp->to_bool(intrin(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.load_data->self.load(data)
A:numpy._core.tests.test_simd.loada_data->self.loada(data)
A:numpy._core.tests.test_simd.loads_data->self.loads(data)
A:numpy._core.tests.test_simd.loadl->self.loadl(data)
A:numpy._core.tests.test_simd.(npyv_load_tillz, npyv_load_till)->eval(intrin)
A:numpy._core.tests.test_simd.lanes->list(range(1, self.nlanes + 1))
A:numpy._core.tests.test_simd.load_till->npyv_load_till(data, n, *fill)
A:numpy._core.tests.test_simd.load_tillz->npyv_load_tillz(data, n)
A:numpy._core.tests.test_simd.npyv_store_till->eval(intrin)
A:numpy._core.tests.test_simd.data_rev->self._data(reverse=True)
A:numpy._core.tests.test_simd.data_till->self._data(reverse=True).copy()
A:numpy._core.tests.test_simd.store_till->self._data(reverse=True)
A:numpy._core.tests.test_simd.npyv_loadn->eval(intrin)
A:numpy._core.tests.test_simd.data_stride->list(self.load(data_stride))
A:numpy._core.tests.test_simd.loadn->npyv_loadn(data, stride)
A:numpy._core.tests.test_simd.(npyv_loadn_tillz, npyv_loadn_till)->eval(intrin)
A:numpy._core.tests.test_simd.loadn_till->npyv_loadn_till(data, stride, n, *fill)
A:numpy._core.tests.test_simd.loadn_tillz->npyv_loadn_tillz(data, stride, n)
A:numpy._core.tests.test_simd.npyv_storen->eval(intrin)
A:numpy._core.tests.test_simd.storen->data_storen.copy()
A:numpy._core.tests.test_simd.npyv_storen_till->eval(intrin)
A:numpy._core.tests.test_simd.storen_till->self._data(reverse=True).copy().copy()
A:numpy._core.tests.test_simd.idx_itrin->getattr(self.npyv, f'setall_u{elsize}')
A:numpy._core.tests.test_simd.table->range(0, table_size)
A:numpy._core.tests.test_simd.broadi->self.setall(i)
A:numpy._core.tests.test_simd.idx->idx_itrin(i)
A:numpy._core.tests.test_simd.lut->intrin(table, idx)
A:numpy._core.tests.test_simd.broadcast_zero->self.zero()
A:numpy._core.tests.test_simd.broadcasti->self.setall(i)
A:numpy._core.tests.test_simd.vset->self.set(*data_a)
A:numpy._core.tests.test_simd.vsetf->self.setf(10, *data_a)
A:numpy._core.tests.test_simd.select_a->self.select(self.cmpeq(self.zero(), self.zero()), vdata_a, vdata_b)
A:numpy._core.tests.test_simd.select_b->self.select(self.cmpneq(self.zero(), self.zero()), vdata_a, vdata_b)
A:numpy._core.tests.test_simd.combinel->self.combinel(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.combineh->self.combineh(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.combine->self.combine(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.data_zipl->self.load([v for p in zip(data_a_lo, data_b_lo) for v in p])
A:numpy._core.tests.test_simd.data_ziph->self.load([v for p in zip(data_a_hi, data_b_hi) for v in p])
A:numpy._core.tests.test_simd.vzip->self.zip(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.unzip->self._x2('load')(list(data_zipl) + list(data_ziph))
A:numpy._core.tests.test_simd.ssize->self._scalar_size()
A:numpy._core.tests.test_simd.rev64->self.rev64(self.load(range(self.nlanes)))
A:numpy._core.tests.test_simd.vperm->self.permi128(data, *indices)
A:numpy._core.tests.test_simd.cmp->to_bool(intrin(vdata_a, vdata_b))
A:numpy._core.tests.test_simd.data_cast_a->self._to_unsigned(vdata_a)
A:numpy._core.tests.test_simd.data_cast_b->self._to_unsigned(vdata_b)
A:numpy._core.tests.test_simd.data_xor->cast_data([a ^ b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy._core.tests.test_simd.data_or->cast_data([a | b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy._core.tests.test_simd.data_and->cast_data([a & b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy._core.tests.test_simd.data_not->cast_data([~a for a in data_cast_a])
A:numpy._core.tests.test_simd.to_boolean->getattr(self.npyv, 'cvt_%s_%s' % (bsfx, self.sfx))
A:numpy._core.tests.test_simd.from_boolean->getattr(self.npyv, 'cvt_%s_%s' % (self.sfx, bsfx))
A:numpy._core.tests.test_simd.false_vb->to_boolean(self.setall(0))
A:numpy._core.tests.test_simd.true_vb->self.cmpeq(self.setall(0), self.setall(0))
A:numpy._core.tests.test_simd.false_vsfx->from_boolean(false_vb)
A:numpy._core.tests.test_simd.true_vsfx->from_boolean(true_vb)
A:numpy._core.tests.test_simd.expand->getattr(self.npyv, f'expand_{totype}_{self.sfx}')
A:numpy._core.tests.test_simd.edata->expand(vdata)
A:numpy._core.tests.test_simd.data_add->self.add(vdata_b, vdata_a)
A:numpy._core.tests.test_simd.add->self.add(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.data_sub->self.sub(vdata_b, vdata_a)
A:numpy._core.tests.test_simd.sub->self.sub(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.data_mul->self.load([a * b for (a, b) in zip(data_a, data_b)])
A:numpy._core.tests.test_simd.mul->self.mul(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.data_div->self.div(vdata_b, vdata_a)
A:numpy._core.tests.test_simd.div->self.div(vdata_a, vdata_b)
A:numpy._core.tests.test_simd.int_min->self._int_min()
A:numpy._core.tests.test_simd.bsize->self._scalar_size()
A:numpy._core.tests.test_simd.dividend->self.load(self._data(dividend))
A:numpy._core.tests.test_simd.divisor_parms->self.divisor(divisor)
A:numpy._core.tests.test_simd.divc->self.divc(dividend, divisor_parms)
A:numpy._core.tests.test_simd.data_sum->sum(data)
A:numpy._core.tests.test_simd.vsum->self.sumup(vdata)
A:numpy._core.tests.test_simd.false_mask->self.cmpneq(self.zero(), self.zero())
A:numpy._core.tests.test_simd.ifsub->self.ifsub(false_mask, vdata_a, vdata_b, vdata_b)
A:numpy._core.tests.test_simd.ifadd->self.ifadd(false_mask, vdata_a, vdata_b, vdata_b)
A:numpy._core.tests.test_simd.ifdiv->self.ifdiv(false_mask, vdata_a, vdata_b, vdata_b)
A:numpy._core.tests.test_simd.ifdivz->self.ifdivz(false_mask, vdata_a, vdata_b)
A:numpy._core.tests.test_simd.pretty_name->target_name.split('__')
A:numpy._core.tests.test_simd.skip_sfx->dict()
A:numpy._core.tests.test_simd.skip_m->dict().get(sfx, skip)
A:numpy._core.tests.test_simd.attr->dict(npyv=targets[target_name], sfx=sfx, target_name=target_name)
A:numpy._core.tests.test_simd.tcls->type(f'Test{cls.__name__}_{simd_width}_{target_name}_{sfx}', inhr, attr)
numpy._core.tests.test_simd._SIMD_ALL(_Test_Utility)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_div(self)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_intdiv(self)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_mul(self)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sum(self)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sumup(self)
numpy._core.tests.test_simd._SIMD_ALL.test_arithmetic_subadd(self)
numpy._core.tests.test_simd._SIMD_ALL.test_conversion_boolean(self)
numpy._core.tests.test_simd._SIMD_ALL.test_conversion_expand(self)
numpy._core.tests.test_simd._SIMD_ALL.test_lut(self,intrin,table_size,elsize)
numpy._core.tests.test_simd._SIMD_ALL.test_mask_conditional(self)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_load(self)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_noncont_load(self,intrin,elsizes,scale)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_load(self,intrin,elsizes,scale,fill)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_store(self,intrin,elsizes,scale)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_noncont_store(self,intrin,elsizes,scale)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_partial_load(self,intrin,elsizes,scale,fill)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_partial_store(self,intrin,elsizes,scale)
numpy._core.tests.test_simd._SIMD_ALL.test_memory_store(self)
numpy._core.tests.test_simd._SIMD_ALL.test_misc(self)
numpy._core.tests.test_simd._SIMD_ALL.test_operators_comparison(self,func,intrin)
numpy._core.tests.test_simd._SIMD_ALL.test_operators_crosstest(self,intrin,data)
numpy._core.tests.test_simd._SIMD_ALL.test_operators_logical(self)
numpy._core.tests.test_simd._SIMD_ALL.test_reorder(self)
numpy._core.tests.test_simd._SIMD_ALL.test_reorder_permi128(self)
numpy._core.tests.test_simd._SIMD_ALL.test_reorder_rev64(self)
numpy._core.tests.test_simd._SIMD_BOOL(_Test_Utility)
numpy._core.tests.test_simd._SIMD_BOOL._data(self,start=None,count=None,reverse=False)
numpy._core.tests.test_simd._SIMD_BOOL._load_b(self,data)
numpy._core.tests.test_simd._SIMD_BOOL._nlanes(self)
numpy._core.tests.test_simd._SIMD_BOOL.test_operators_crosstest(self,intrin,data)
numpy._core.tests.test_simd._SIMD_BOOL.test_operators_logical(self)
numpy._core.tests.test_simd._SIMD_BOOL.test_pack(self)
numpy._core.tests.test_simd._SIMD_BOOL.test_tobits(self)
numpy._core.tests.test_simd._SIMD_FP(_Test_Utility)
numpy._core.tests.test_simd._SIMD_FP.test_abs(self)
numpy._core.tests.test_simd._SIMD_FP.test_arithmetic_fused(self)
numpy._core.tests.test_simd._SIMD_FP.test_comparison_with_nan(self,py_comp,np_comp)
numpy._core.tests.test_simd._SIMD_FP.test_max_min(self,intrin)
numpy._core.tests.test_simd._SIMD_FP.test_operators_crosstest(self,intrin,data)
numpy._core.tests.test_simd._SIMD_FP.test_reciprocal(self)
numpy._core.tests.test_simd._SIMD_FP.test_rounding(self,intrin,func)
numpy._core.tests.test_simd._SIMD_FP.test_special_cases(self)
numpy._core.tests.test_simd._SIMD_FP.test_sqrt(self)
numpy._core.tests.test_simd._SIMD_FP.test_square(self)
numpy._core.tests.test_simd._SIMD_FP.test_unary_invalid_fpexception(self,intrin_name)
numpy._core.tests.test_simd._SIMD_FP32(_Test_Utility)
numpy._core.tests.test_simd._SIMD_FP32.test_conversions(self)
numpy._core.tests.test_simd._SIMD_FP64(_Test_Utility)
numpy._core.tests.test_simd._SIMD_FP64.test_conversions(self)
numpy._core.tests.test_simd._SIMD_INT(_Test_Utility)
numpy._core.tests.test_simd._SIMD_INT.test_arithmetic_subadd_saturated(self)
numpy._core.tests.test_simd._SIMD_INT.test_math_max_min(self)
numpy._core.tests.test_simd._SIMD_INT.test_operators_shift(self)
numpy._core.tests.test_simd._SIMD_INT.test_reduce_max_min(self,start)
numpy._core.tests.test_simd._Test_Utility
numpy._core.tests.test_simd._Test_Utility.__getattr__(self,attr)
numpy._core.tests.test_simd._Test_Utility._cpu_features(self)
numpy._core.tests.test_simd._Test_Utility._data(self,start=None,count=None,reverse=False)
numpy._core.tests.test_simd._Test_Utility._int_clip(self,seq)
numpy._core.tests.test_simd._Test_Utility._int_max(self)
numpy._core.tests.test_simd._Test_Utility._int_min(self)
numpy._core.tests.test_simd._Test_Utility._is_fp(self)
numpy._core.tests.test_simd._Test_Utility._is_signed(self)
numpy._core.tests.test_simd._Test_Utility._is_unsigned(self)
numpy._core.tests.test_simd._Test_Utility._nan(self)
numpy._core.tests.test_simd._Test_Utility._ninfinity(self)
numpy._core.tests.test_simd._Test_Utility._pinfinity(self)
numpy._core.tests.test_simd._Test_Utility._scalar_size(self)
numpy._core.tests.test_simd._Test_Utility._to_unsigned(self,vector)
numpy._core.tests.test_simd._Test_Utility._true_mask(self)
numpy._core.tests.test_simd._Test_Utility._x2(self,intrin_name)
numpy._core.tests.test_simd.check_floatstatus(divbyzero=False,overflow=False,underflow=False,invalid=False,all=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_scalarbuffer.py----------------------------------------
A:numpy._core.tests.test_scalarbuffer.(scalars_only, codes_only)->zip(*scalars_and_codes)
A:numpy._core.tests.test_scalarbuffer.x->scalar()
A:numpy._core.tests.test_scalarbuffer.a->numpy.empty(1, dt)
A:numpy._core.tests.test_scalarbuffer.mv_x->memoryview(x)
A:numpy._core.tests.test_scalarbuffer.mv_a->memoryview(a)
A:numpy._core.tests.test_scalarbuffer.expected->dict(strides=(), itemsize=8, ndim=0, shape=(), format='2w', readonly=True)
A:numpy._core.tests.test_scalarbuffer.dt->numpy.dtype([('a', 'uint16'), ('b', 'M8[s]')])
A:numpy._core.tests.test_scalarbuffer.dt1->numpy.datetime64('2016-01-01')
A:numpy._core.tests.test_scalarbuffer.dt2->numpy.datetime64('2017-01-01')
A:numpy._core.tests.test_scalarbuffer.v->memoryview(s)
A:numpy._core.tests.test_scalarbuffer.s->numpy.str_(s)
A:numpy._core.tests.test_scalarbuffer.code_points->numpy.frombuffer(v, dtype='i4')
A:numpy._core.tests.test_scalarbuffer.r->rational(1)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118._as_dict(self,m)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_datetime_memoryview(self)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_buffers_readonly(self,scalar)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_code_and_properties(self,scalar,code)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_dim(self,scalar)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_match_array(self,scalar)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_str_ucs4(self,s)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_user_scalar_fails_buffer(self)
numpy._core.tests.test_scalarbuffer.TestScalarPEP3118.test_void_scalar_structured_data(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_indexing.py----------------------------------------
A:numpy._core.tests.test_indexing.a->a.reshape(5, 2).reshape(5, 2)
A:numpy._core.tests.test_indexing.s->numpy.arange(10).view(SubClass)
A:numpy._core.tests.test_indexing.index->tuple((i for i in index if not isskip(i)))
A:numpy._core.tests.test_indexing.u_index->tuple((i for i in index if not isskip(i))).astype(np.uintp)
A:numpy._core.tests.test_indexing.arr->arr.copy().copy()
A:numpy._core.tests.test_indexing.arr[u_index]->numpy.arange(5)
A:numpy._core.tests.test_indexing.b->arr.copy().copy().copy()
A:numpy._core.tests.test_indexing.idx->numpy.array([[[True], [False]]])
A:numpy._core.tests.test_indexing.expected->numpy.zeros(1000)
A:numpy._core.tests.test_indexing.idx_row->numpy.zeros(3, dtype=int)
A:numpy._core.tests.test_indexing.idx_col->numpy.array([2, 1, 0])
A:numpy._core.tests.test_indexing.expected_vals->numpy.copy(arr[:-10])
A:numpy._core.tests.test_indexing.indx->numpy.arange(*indx.indices(arr.shape[ax]))
A:numpy._core.tests.test_indexing.arr[indx]->numpy.ones(100, dtype=object)
A:numpy._core.tests.test_indexing.b[[0, 1]]->numpy.arange(2 * 4 * 2).reshape(2, 4, 2).T.copy()
A:numpy._core.tests.test_indexing.ind->numpy.broadcast_to(ind, (10, 55, 4, 4))
A:numpy._core.tests.test_indexing.res->numpy.broadcast(*indx[1:])
A:numpy._core.tests.test_indexing.a[[0, 1, 2, 3, 4], :]->memoryview(s)
A:numpy._core.tests.test_indexing.a[:, [0, 1, 2, 3, 4]]->memoryview(s)
A:numpy._core.tests.test_indexing.a[...]->numpy.ones((1, 3, 2))
A:numpy._core.tests.test_indexing.d->numpy.zeros((3, 3, 3))
A:numpy._core.tests.test_indexing.z->Zero()
A:numpy._core.tests.test_indexing.refcount->sys.getrefcount(np.dtype(np.intp))
A:numpy._core.tests.test_indexing.x->numpy.ones(10)
A:numpy._core.tests.test_indexing.x[...]->numpy.array('b' * 8, dtype='S')
A:numpy._core.tests.test_indexing.b[...]->numpy.arange(d.size)
A:numpy._core.tests.test_indexing.x2->numpy.ones((10, 2))
A:numpy._core.tests.test_indexing.zind->numpy.zeros(4, dtype=np.intp)
A:numpy._core.tests.test_indexing.arro->numpy.zeros((4, 4))
A:numpy._core.tests.test_indexing.arr[0]->numpy.str_('asdfg')
A:numpy._core.tests.test_indexing.dt->numpy.dtype([('', dt)] * 2)
A:numpy._core.tests.test_indexing.rng->numpy.random.default_rng()
A:numpy._core.tests.test_indexing.tpe->ThreadPoolExecutor(max_workers=8)
A:numpy._core.tests.test_indexing.a[[0, 1, 2], :]->numpy.ones((1, 3, 2))
A:numpy._core.tests.test_indexing.a[:, [0, 1]]->numpy.ones((1, 3, 2))
A:numpy._core.tests.test_indexing.a[[[0], [1], [2]], [0, 1]]->numpy.ones((1, 3, 2))
A:numpy._core.tests.test_indexing.values->numpy.zeros((100, 100))
A:numpy._core.tests.test_indexing.shape_str->str(arr[index].shape).replace(' ', '')
A:numpy._core.tests.test_indexing.self.finalize_status->numpy.array(self)
A:numpy._core.tests.test_indexing.bool_index->numpy.zeros(shape).astype(bool)
A:numpy._core.tests.test_indexing.zero_array->numpy.zeros(shape)
A:numpy._core.tests.test_indexing.zero_array[bool_index]->numpy.array([1])
A:numpy._core.tests.test_indexing.cmp_arr->arr.copy().copy().copy()
A:numpy._core.tests.test_indexing.a[:3]->numpy.array(['2', '-3', '-1'])
A:numpy._core.tests.test_indexing.b[[0, 2, 1]]->numpy.array(['2', '-1', '-3'])
A:numpy._core.tests.test_indexing.b[[0], :3]->numpy.array([['2', '-3', '-1']])
A:numpy._core.tests.test_indexing.self.a->numpy.arange(np.prod([3, 1, 5, 6])).reshape(3, 1, 5, 6)
A:numpy._core.tests.test_indexing.self.b->numpy.empty((3, 0, 5, 6))
A:numpy._core.tests.test_indexing.in_indices->list(indices)
A:numpy._core.tests.test_indexing.flat_indx->numpy.array([0] * indx.sum(), dtype=np.intp)
A:numpy._core.tests.test_indexing.axes->list(range(arr.ndim))
A:numpy._core.tests.test_indexing.mi->numpy.ravel_multi_index(indx[1:], orig_slice, mode='wrap')
A:numpy._core.tests.test_indexing.(mimic_get, no_copy)->self._get_multi_index(arr, (index,))
A:numpy._core.tests.test_indexing.prev_refcount->sys.getrefcount(arr)
A:numpy._core.tests.test_indexing.idx1->numpy.array([[False] * 9])
A:numpy._core.tests.test_indexing.idx2->numpy.array([[False] * 8 + [True]])
A:numpy._core.tests.test_indexing.idx3->numpy.array([[False] * 10])
A:numpy._core.tests.test_indexing.subscript->functools.partial(array_indexing, 0)
A:numpy._core.tests.test_indexing.assign->functools.partial(array_indexing, 1)
numpy._core.tests.test_indexing.TestArrayToIndexDeprecation
numpy._core.tests.test_indexing.TestArrayToIndexDeprecation.test_array_to_index_error(self)
numpy._core.tests.test_indexing.TestBooleanIndexing
numpy._core.tests.test_indexing.TestBooleanIndexing.test_bool_as_int_argument_errors(self)
numpy._core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_fast_path(self)
numpy._core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_weirdness(self)
numpy._core.tests.test_indexing.TestBroadcastedAssignments
numpy._core.tests.test_indexing.TestBroadcastedAssignments.assign(self,a,ind,val)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_error_reports_correct_shape(self,index)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_subspace(self)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_index_is_larger(self)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_prepend_not_one(self)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_prepending_ones(self)
numpy._core.tests.test_indexing.TestBroadcastedAssignments.test_simple_broadcasting_errors(self)
numpy._core.tests.test_indexing.TestCApiAccess
numpy._core.tests.test_indexing.TestCApiAccess.test_getitem(self)
numpy._core.tests.test_indexing.TestCApiAccess.test_setitem(self)
numpy._core.tests.test_indexing.TestFancyIndexingCast
numpy._core.tests.test_indexing.TestFancyIndexingCast.test_boolean_index_cast_assign(self)
numpy._core.tests.test_indexing.TestFancyIndexingEquivalence
numpy._core.tests.test_indexing.TestFancyIndexingEquivalence.test_cast_equivalence(self)
numpy._core.tests.test_indexing.TestFancyIndexingEquivalence.test_object_assign(self)
numpy._core.tests.test_indexing.TestFieldIndexing
numpy._core.tests.test_indexing.TestFieldIndexing.test_scalar_return_type(self)
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_argument_errors(self)
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication(self)
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument.test_reduce_axis_float_index(self)
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_indexing(self)
numpy._core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_slicing(self)
numpy._core.tests.test_indexing.TestIndexing
numpy._core.tests.test_indexing.TestIndexing.test_array_like_values(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_assignment_needs_api(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_indexing_list(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim(self)
numpy._core.tests.test_indexing.TestIndexing.test_boolean_shape_mismatch(self)
numpy._core.tests.test_indexing.TestIndexing.test_broaderrors_indexing(self)
numpy._core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_character_assignment(self)
numpy._core.tests.test_indexing.TestIndexing.test_ellipsis_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_empty_fancy_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_empty_tuple_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_everything_returns_views(self)
numpy._core.tests.test_indexing.TestIndexing.test_gh_26542(self)
numpy._core.tests.test_indexing.TestIndexing.test_gh_26542_2d(self)
numpy._core.tests.test_indexing.TestIndexing.test_gh_26542_index_overlap(self)
numpy._core.tests.test_indexing.TestIndexing.test_index_no_array_to_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_index_no_floats(self)
numpy._core.tests.test_indexing.TestIndexing.test_indexing_array_negative_strides(self)
numpy._core.tests.test_indexing.TestIndexing.test_indexing_array_weird_strides(self)
numpy._core.tests.test_indexing.TestIndexing.test_memory_order(self)
numpy._core.tests.test_indexing.TestIndexing.test_nonbaseclass_values(self)
numpy._core.tests.test_indexing.TestIndexing.test_none_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_nontuple_ndindex(self)
numpy._core.tests.test_indexing.TestIndexing.test_reverse_strides_and_subspace_bufferinit(self)
numpy._core.tests.test_indexing.TestIndexing.test_reversed_strides_result_allocation(self)
numpy._core.tests.test_indexing.TestIndexing.test_same_kind_index_casting(self)
numpy._core.tests.test_indexing.TestIndexing.test_scalar_array_bool(self)
numpy._core.tests.test_indexing.TestIndexing.test_scalar_return_type(self)
numpy._core.tests.test_indexing.TestIndexing.test_single_bool_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_single_int_index(self)
numpy._core.tests.test_indexing.TestIndexing.test_slicing_no_floats(self)
numpy._core.tests.test_indexing.TestIndexing.test_small_regressions(self)
numpy._core.tests.test_indexing.TestIndexing.test_structured_advanced_indexing(self)
numpy._core.tests.test_indexing.TestIndexing.test_subclass_writeable(self)
numpy._core.tests.test_indexing.TestIndexing.test_too_many_advanced_indices(self,index,num,original_ndim)
numpy._core.tests.test_indexing.TestIndexing.test_too_many_fancy_indices_special_case(self)
numpy._core.tests.test_indexing.TestIndexing.test_trivial_fancy_not_possible(self)
numpy._core.tests.test_indexing.TestIndexing.test_trivial_fancy_out_of_bounds(self)
numpy._core.tests.test_indexing.TestIndexing.test_tuple_subclass(self)
numpy._core.tests.test_indexing.TestIndexing.test_unaligned(self)
numpy._core.tests.test_indexing.TestIndexing.test_uncontiguous_subspace_assignment(self)
numpy._core.tests.test_indexing.TestIndexing.test_void_scalar_empty_tuple(self)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated
numpy._core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index(self,arr,index)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index(self,arr,index)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result(self,arr,index,mimic_get,no_copy)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index(self,arr,indices)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated.setup_method(self)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated.test_1d(self)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated.test_boolean(self)
numpy._core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim(self)
numpy._core.tests.test_indexing.TestMultipleEllipsisError
numpy._core.tests.test_indexing.TestMultipleEllipsisError.test_basic(self)
numpy._core.tests.test_indexing.TestNonIntegerArrayLike
numpy._core.tests.test_indexing.TestNonIntegerArrayLike.test_basic(self)
numpy._core.tests.test_indexing.TestSubclasses
numpy._core.tests.test_indexing.TestSubclasses.test_basic(self)
numpy._core.tests.test_indexing.TestSubclasses.test_fancy_on_read_only(self)
numpy._core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_simd_module.py----------------------------------------
A:numpy._core.tests.test_simd_module.nlanes->getattr(npyv, 'nlanes_' + sfx)
A:numpy._core.tests.test_simd_module.vector->getattr(npyv, 'setall_' + sfx)(1)
A:numpy._core.tests.test_simd_module.a->npyv.setall_u32(1)
A:numpy._core.tests.test_simd_module.a2->npyv2.setall_u32(1)
A:numpy._core.tests.test_simd_module.lanes->getattr(npyv, 'load_' + sfx)([mins_72] * nlanes)
A:numpy._core.tests.test_simd_module.data_range->range(0, npyv.nlanes_u32)
A:numpy._core.tests.test_simd_module.vdata->npyv.load_u32(data_range)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_compare(self)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_nomix(self)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_num_lanes(self,sfx)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_raises(self)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_signed_overflow(self,sfx)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_truncate_f32(self)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_type_name(self,sfx)
numpy._core.tests.test_simd_module.Test_SIMD_MODULE.test_unsigned_overflow(self,sfx)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_records.py----------------------------------------
A:numpy._core.tests.test_records.r->numpy.zeros((1, 3), dtype=dt).view(np.recarray)
A:numpy._core.tests.test_records.r1->numpy.rec.fromfile(fd, formats='f8,i4,S5', shape=3, byteorder='big')
A:numpy._core.tests.test_records.r2->numpy.rec.array(fd, formats='f8,i4,S5', shape=3, byteorder='big')
A:numpy._core.tests.test_records.x1->numpy.array([1, 2, 3, 4])
A:numpy._core.tests.test_records.x2->numpy.array(['a', 'dd', 'xyz', '12'])
A:numpy._core.tests.test_records.x3->numpy.array([1.1, 2, 3, 4])
A:numpy._core.tests.test_records.data_dir->Path(path).join(path.dirname(__file__), 'data')
A:numpy._core.tests.test_records.filename->Path(path).join(data_dir, 'recarray_from_file.fits')
A:numpy._core.tests.test_records.fd->open(filename, 'rb')
A:numpy._core.tests.test_records.bytes_array->BytesIO()
A:numpy._core.tests.test_records.r3->numpy.rec.fromfile(bytes_array, formats='f8,i4,S5', shape=3, byteorder='big')
A:numpy._core.tests.test_records.a->numpy.empty(1, dtype=dt)
A:numpy._core.tests.test_records.b->numpy.array([1, 2, 3, 4, 5], dtype=np.int64)
A:numpy._core.tests.test_records.c->numpy.zeros((1, 3), dtype=dt).view(np.recarray).view(C)
A:numpy._core.tests.test_records.a[i]->list(range(1, 10))
A:numpy._core.tests.test_records.mine->numpy.rec.fromarrays([a, b, c], names='date,data1,data2')
A:numpy._core.tests.test_records.arr_0d->numpy.rec.array((1, 2.0, '2003'), dtype='<i4,<f8,<M8[Y]')
A:numpy._core.tests.test_records.recordarr->numpy.rec.array(a)
A:numpy._core.tests.test_records.recarr->numpy.empty(1, dtype=dt).view(np.recarray)
A:numpy._core.tests.test_records.recordview->numpy.empty(1, dtype=dt).view(np.dtype((np.record, a.dtype)))
A:numpy._core.tests.test_records.recordarr_r->eval('np.' + repr(recordarr), {'np': np})
A:numpy._core.tests.test_records.recarr_r->eval('np.' + repr(recarr), {'np': np})
A:numpy._core.tests.test_records.recordview_r->eval('np.' + repr(recordview), {'np': np, 'numpy': np})
A:numpy._core.tests.test_records.rv->numpy.zeros((1, 3), dtype=dt).view(np.recarray).view('f8').view('f4,i4')
A:numpy._core.tests.test_records.rec->numpy.recarray(1, dtype=[('x', float, 5)])
A:numpy._core.tests.test_records.arr2->numpy.recarray(1, dtype=[('x', float, 5)]).view(rec.dtype.fields or rec.dtype, np.ndarray)
A:numpy._core.tests.test_records.ra->numpy.recarray((2,), dtype=[('x', object), ('y', float), ('z', int)])
A:numpy._core.tests.test_records.pa->pickle.loads(pickle.dumps(a[0], protocol=proto))
A:numpy._core.tests.test_records.ndtype->numpy.dtype([('a', int), ('b', object)])
A:numpy._core.tests.test_records.dt->numpy.dtype([('a', np.uint8), ('b', np.uint8), ('c', np.uint8)])
A:numpy._core.tests.test_records.path->Path(path)
A:numpy._core.tests.test_records.x->numpy._core.records.fromfile(path, formats='f8,i4,S5', shape=10)
A:numpy._core.tests.test_records.self.data->numpy.rec.fromrecords([(1, 2, 3), (4, 5, 6)], dtype=[('col1', '<i4'), ('col2', '<i4'), ('col3', '<i4')])
A:numpy._core.tests.test_records.(ctor, args)->a[0].__reduce__()
A:numpy._core.tests.test_records.dump->pickle.dumps(a[0])
A:numpy._core.tests.test_records.unpickled->pickle.loads(dump)
A:numpy._core.tests.test_records.r.foo->numpy.array([1, 2, 3])
A:numpy._core.tests.test_records.arr->numpy.rec.fromarrays(arrays)
A:numpy._core.tests.test_records.data->numpy.zeros(3, dt_outer).view(np.recarray)
A:numpy._core.tests.test_records.dt_outer->numpy.dtype([('inner', dt_padded_end)])
numpy._core.tests.test_records.TestFromrecords
numpy._core.tests.test_records.TestFromrecords.test_0d_recarray_repr(self)
numpy._core.tests.test_records.TestFromrecords.test_fromrecords(self)
numpy._core.tests.test_records.TestFromrecords.test_fromrecords_0len(self)
numpy._core.tests.test_records.TestFromrecords.test_fromrecords_2d(self)
numpy._core.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype(self)
numpy._core.tests.test_records.TestFromrecords.test_method_array(self)
numpy._core.tests.test_records.TestFromrecords.test_method_array2(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_conflict_fields(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_from_names(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_from_obj(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_from_repr(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_fromarrays(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_fromfile(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_repr(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_returntypes(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_slices(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_stringtypes(self)
numpy._core.tests.test_records.TestFromrecords.test_recarray_views(self)
numpy._core.tests.test_records.TestFromrecords.test_zero_width_strings(self)
numpy._core.tests.test_records.TestPathUsage
numpy._core.tests.test_records.TestPathUsage.test_tofile_fromfile(self)
numpy._core.tests.test_records.TestRecord
numpy._core.tests.test_records.TestRecord.setup_method(self)
numpy._core.tests.test_records.TestRecord.test_assign_dtype_attribute(self,nfields)
numpy._core.tests.test_records.TestRecord.test_assignment1(self)
numpy._core.tests.test_records.TestRecord.test_assignment2(self)
numpy._core.tests.test_records.TestRecord.test_fromarrays_nested_structured_arrays(self)
numpy._core.tests.test_records.TestRecord.test_invalid_assignment(self)
numpy._core.tests.test_records.TestRecord.test_missing_field(self)
numpy._core.tests.test_records.TestRecord.test_nested_dtype_padding(self)
numpy._core.tests.test_records.TestRecord.test_nested_fields_are_records(self,nfields)
numpy._core.tests.test_records.TestRecord.test_nonwriteable_setfield(self)
numpy._core.tests.test_records.TestRecord.test_objview_record(self)
numpy._core.tests.test_records.TestRecord.test_out_of_order_fields(self)
numpy._core.tests.test_records.TestRecord.test_pickle_1(self)
numpy._core.tests.test_records.TestRecord.test_pickle_2(self)
numpy._core.tests.test_records.TestRecord.test_pickle_3(self)
numpy._core.tests.test_records.TestRecord.test_pickle_void(self)
numpy._core.tests.test_records.TestRecord.test_record_scalar_setitem(self)
numpy._core.tests.test_records.test_find_duplicate()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_extint128.py----------------------------------------
A:numpy._core.tests.test_extint128.c->numpy._core._multiarray_tests.extint_shr_128(a)
A:numpy._core.tests.test_extint128.d->numpy._core._multiarray_tests.extint_ceildiv_128_64(a, b)
A:numpy._core.tests.test_extint128.b->numpy._core._multiarray_tests.extint_to_64(a)
A:numpy._core.tests.test_extint128.(c, cr)->divmod(-a, b)
A:numpy._core.tests.test_extint128.(d, dr)->numpy._core._multiarray_tests.extint_divmod_128_64(a, b)
numpy._core.tests.test_extint128.exc_iter(*args)
numpy._core.tests.test_extint128.test_add_128()
numpy._core.tests.test_extint128.test_ceildiv_128_64()
numpy._core.tests.test_extint128.test_divmod_128_64()
numpy._core.tests.test_extint128.test_floordiv_128_64()
numpy._core.tests.test_extint128.test_gt_128()
numpy._core.tests.test_extint128.test_mul_64_64()
numpy._core.tests.test_extint128.test_neg_128()
numpy._core.tests.test_extint128.test_safe_binop()
numpy._core.tests.test_extint128.test_shl_128()
numpy._core.tests.test_extint128.test_shr_128()
numpy._core.tests.test_extint128.test_sub_128()
numpy._core.tests.test_extint128.test_to_128()
numpy._core.tests.test_extint128.test_to_64()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_umath_accuracy.py----------------------------------------
A:numpy._core.tests.test_umath_accuracy.IS_AVX512FP16->numpy._core._multiarray_umath.__cpu_features__.get('AVX512FP16', False)
A:numpy._core.tests.test_umath_accuracy.platform_skip->pytest.mark.skipif(not runtest, reason='avoid testing inconsistent platform library implementations')
A:numpy._core.tests.test_umath_accuracy.i->int(s, 16)
A:numpy._core.tests.test_umath_accuracy.cp->pointer(c_int(i))
A:numpy._core.tests.test_umath_accuracy.fp->cast(cp, POINTER(c_float))
A:numpy._core.tests.test_umath_accuracy.str_to_float->numpy.vectorize(convert)
A:numpy._core.tests.test_umath_accuracy.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy._core.tests.test_umath_accuracy.files->list(filter(lambda f: f.endswith('.csv'), files))
A:numpy._core.tests.test_umath_accuracy.filepath->os.path.join(data_dir, filename)
A:numpy._core.tests.test_umath_accuracy.data->numpy.genfromtxt(file_without_comments, dtype=('|S39', '|S39', '|S39', int), names=('type', 'input', 'output', 'ulperr'), delimiter=',', skip_header=1)
A:numpy._core.tests.test_umath_accuracy.npfunc->getattr(np, npname)
A:numpy._core.tests.test_umath_accuracy.inval->numpy.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))
A:numpy._core.tests.test_umath_accuracy.outval->numpy.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))
A:numpy._core.tests.test_umath_accuracy.perm->numpy.random.permutation(len(inval))
A:numpy._core.tests.test_umath_accuracy.maxulperr->data_subset['ulperr'].max()
A:numpy._core.tests.test_umath_accuracy.arr->numpy.arange(65536, dtype=np.int16)
A:numpy._core.tests.test_umath_accuracy.datafp16->numpy.frombuffer(arr.tobytes(), dtype=np.float16)
A:numpy._core.tests.test_umath_accuracy.datafp32->numpy.frombuffer(arr.tobytes(), dtype=np.float16).astype(np.float32)
A:numpy._core.tests.test_umath_accuracy.ufunc->getattr(np, func)
A:numpy._core.tests.test_umath_accuracy.ulp->numpy.ceil(max_ulp_err[func])
numpy._core.tests.test_umath_accuracy.TestAccuracy
numpy._core.tests.test_umath_accuracy.TestAccuracy.test_validate_fp16_transcendentals(self,ufunc)
numpy._core.tests.test_umath_accuracy.TestAccuracy.test_validate_svml_fp16(self)
numpy._core.tests.test_umath_accuracy.TestAccuracy.test_validate_transcendentals(self)
numpy._core.tests.test_umath_accuracy.convert(s,datatype='np.float32')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/_natype.py----------------------------------------
A:numpy._core.tests._natype.out->numpy.empty(other.shape, dtype=object)
A:numpy._core.tests._natype.__add__->_create_binary_propagating_op('__add__')
A:numpy._core.tests._natype.__radd__->_create_binary_propagating_op('__radd__')
A:numpy._core.tests._natype.__sub__->_create_binary_propagating_op('__sub__')
A:numpy._core.tests._natype.__rsub__->_create_binary_propagating_op('__rsub__')
A:numpy._core.tests._natype.__mul__->_create_binary_propagating_op('__mul__')
A:numpy._core.tests._natype.__rmul__->_create_binary_propagating_op('__rmul__')
A:numpy._core.tests._natype.__matmul__->_create_binary_propagating_op('__matmul__')
A:numpy._core.tests._natype.__rmatmul__->_create_binary_propagating_op('__rmatmul__')
A:numpy._core.tests._natype.__truediv__->_create_binary_propagating_op('__truediv__')
A:numpy._core.tests._natype.__rtruediv__->_create_binary_propagating_op('__rtruediv__')
A:numpy._core.tests._natype.__floordiv__->_create_binary_propagating_op('__floordiv__')
A:numpy._core.tests._natype.__rfloordiv__->_create_binary_propagating_op('__rfloordiv__')
A:numpy._core.tests._natype.__mod__->_create_binary_propagating_op('__mod__')
A:numpy._core.tests._natype.__rmod__->_create_binary_propagating_op('__rmod__')
A:numpy._core.tests._natype.__divmod__->_create_binary_propagating_op('__divmod__', is_divmod=True)
A:numpy._core.tests._natype.__rdivmod__->_create_binary_propagating_op('__rdivmod__', is_divmod=True)
A:numpy._core.tests._natype.__eq__->_create_binary_propagating_op('__eq__')
A:numpy._core.tests._natype.__ne__->_create_binary_propagating_op('__ne__')
A:numpy._core.tests._natype.__le__->_create_binary_propagating_op('__le__')
A:numpy._core.tests._natype.__lt__->_create_binary_propagating_op('__lt__')
A:numpy._core.tests._natype.__gt__->_create_binary_propagating_op('__gt__')
A:numpy._core.tests._natype.__ge__->_create_binary_propagating_op('__ge__')
A:numpy._core.tests._natype.__neg__->_create_unary_propagating_op('__neg__')
A:numpy._core.tests._natype.__pos__->_create_unary_propagating_op('__pos__')
A:numpy._core.tests._natype.__abs__->_create_unary_propagating_op('__abs__')
A:numpy._core.tests._natype.__invert__->_create_unary_propagating_op('__invert__')
A:numpy._core.tests._natype.result->result.item().item()
A:numpy._core.tests._natype.pd_NA->NAType()
numpy._core.tests._natype.NAType
numpy._core.tests._natype.NAType.__and__(self,other)
numpy._core.tests._natype.NAType.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy._core.tests._natype.NAType.__bool__(self)
numpy._core.tests._natype.NAType.__format__(self,format_spec)->str
numpy._core.tests._natype.NAType.__hash__(self)
numpy._core.tests._natype.NAType.__or__(self,other)
numpy._core.tests._natype.NAType.__pow__(self,other)
numpy._core.tests._natype.NAType.__reduce__(self)
numpy._core.tests._natype.NAType.__repr__(self)->str
numpy._core.tests._natype.NAType.__rpow__(self,other)
numpy._core.tests._natype.NAType.__xor__(self,other)
numpy._core.tests._natype._create_binary_propagating_op(name,is_divmod=False)
numpy._core.tests._natype._create_unary_propagating_op(name:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_array_interface.py----------------------------------------
A:numpy._core.tests.test_array_interface.buf->data_source(256, expected_value)
A:numpy._core.tests.test_array_interface.arr->numpy.array(buf, copy=False)
numpy._core.tests.test_array_interface.get_module(tmp_path)
numpy._core.tests.test_array_interface.test_cstruct(get_module)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_errstate.py----------------------------------------
A:numpy._core.tests.test_errstate.hosttype->sysconfig.get_config_var('HOST_GNU_TYPE')
A:numpy._core.tests.test_errstate.olderrcall->numpy.geterrcall()
A:numpy._core.tests.test_errstate.errstate->numpy.errstate(invalid='warn')
A:numpy._core.tests.test_errstate.asyncio->pytest.importorskip('asyncio')
A:numpy._core.tests.test_errstate.loop->pytest.importorskip('asyncio').new_event_loop()
numpy._core.tests.test_errstate.TestErrstate
numpy._core.tests.test_errstate.TestErrstate.test_asyncio_safe(self)
numpy._core.tests.test_errstate.TestErrstate.test_divide(self)
numpy._core.tests.test_errstate.TestErrstate.test_errcall(self)
numpy._core.tests.test_errstate.TestErrstate.test_errstate_decorator(self)
numpy._core.tests.test_errstate.TestErrstate.test_errstate_enter_once(self)
numpy._core.tests.test_errstate.TestErrstate.test_invalid(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_cpu_features.py----------------------------------------
A:numpy._core.tests.test_cpu_features.detected->str(__cpu_features__).replace("'", '')
A:numpy._core.tests.test_cpu_features.cpuinfo->str(err)
A:numpy._core.tests.test_cpu_features.auxv->subprocess.check_output(['/bin/true'], env=dict(LD_SHOW_AUXV='1'))
A:numpy._core.tests.test_cpu_features.error_report->textwrap.indent('\n###########################################\n### Extra debugging information\n###########################################\n-------------------------------------------\n--- NumPy Detections\n-------------------------------------------\n%s\n-------------------------------------------\n--- SYS / CPUINFO\n-------------------------------------------\n%s....\n-------------------------------------------\n--- SYS / AUXV\n-------------------------------------------\n%s\n' % (detected, cpuinfo, auxv), prefix='\r')
A:numpy._core.tests.test_cpu_features.out->self._run()
A:numpy._core.tests.test_cpu_features.features_flags->set()
A:numpy._core.tests.test_cpu_features.cpu_have->self.cpu_have(feature_name)
A:numpy._core.tests.test_cpu_features.npy_have->numpy._core._multiarray_umath.__cpu_features__.get(feature_name)
A:numpy._core.tests.test_cpu_features.map_names->self.features_map.get(feature_name, feature_name)
A:numpy._core.tests.test_cpu_features.self.features_flags->self.features_flags.union(hwcap_value[1].upper().decode().split())
A:numpy._core.tests.test_cpu_features.values->values.union(flags_value[1].upper().split()).union(flags_value[1].upper().split())
A:numpy._core.tests.test_cpu_features.cwd->pathlib.Path(__file__).parent.resolve()
A:numpy._core.tests.test_cpu_features.env->os.environ.copy()
A:numpy._core.tests.test_cpu_features._enable->os.environ.pop('NPY_ENABLE_CPU_FEATURES', None)
A:numpy._core.tests.test_cpu_features._disable->os.environ.pop('NPY_DISABLE_CPU_FEATURES', None)
A:numpy._core.tests.test_cpu_features.SUBPROCESS_ARGS->dict(cwd=cwd, capture_output=True, text=True, check=True)
A:numpy._core.tests.test_cpu_features.file->tmp_path_factory.mktemp('runtime_test_script')
A:numpy._core.tests.test_cpu_features.self.env->os.environ.copy()
A:numpy._core.tests.test_cpu_features.non_baseline_features->_text_to_list(out.stdout)
A:numpy._core.tests.test_cpu_features.enabled_features->_text_to_list(out.stdout)
A:numpy._core.tests.test_cpu_features.self.env['NPY_ENABLE_CPU_FEATURES']->','.join(non_baseline_features)
A:numpy._core.tests.test_cpu_features.is_linux->sys.platform.startswith('linux')
A:numpy._core.tests.test_cpu_features.is_cygwin->sys.platform.startswith('cygwin')
A:numpy._core.tests.test_cpu_features.machine->platform.machine()
A:numpy._core.tests.test_cpu_features.is_x86->re.match('^(amd64|x86|i386|i686)', machine, re.IGNORECASE)
A:numpy._core.tests.test_cpu_features.features_groups->dict(NEON_FP16=['NEON', 'HALF'], NEON_VFPV4=['NEON', 'VFPV4'])
A:numpy._core.tests.test_cpu_features.features_map->dict(VSX2='ARCH_2_07', VSX3='ARCH_3_00', VSX4='ARCH_3_1')
A:numpy._core.tests.test_cpu_features.is_power->re.match('^(powerpc|ppc)64', machine, re.IGNORECASE)
A:numpy._core.tests.test_cpu_features.is_zarch->re.match('^(s390x)', machine, re.IGNORECASE)
A:numpy._core.tests.test_cpu_features.is_arm->re.match('^(arm|aarch64)', machine, re.IGNORECASE)
A:numpy._core.tests.test_cpu_features.arch->self.get_cpuinfo_item('CPU architecture')
A:numpy._core.tests.test_cpu_features.self.features_map->dict(ASIMD=('AES', 'SHA1', 'SHA2', 'PMULL', 'CRC32'))
numpy._core.tests.test_cpu_features.AbstractTest
numpy._core.tests.test_cpu_features.AbstractTest.cpu_have(self,feature_name)
numpy._core.tests.test_cpu_features.AbstractTest.get_cpuinfo_item(self,magic_key)
numpy._core.tests.test_cpu_features.AbstractTest.load_flags(self)
numpy._core.tests.test_cpu_features.AbstractTest.load_flags_auxv(self)
numpy._core.tests.test_cpu_features.AbstractTest.load_flags_cpuinfo(self,magic_key)
numpy._core.tests.test_cpu_features.AbstractTest.test_features(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation
numpy._core.tests.test_cpu_features.TestEnvPrivation._expect_error(self,msg,err_type,no_error_msg='Failedtogenerateerror')
numpy._core.tests.test_cpu_features.TestEnvPrivation._run(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation.setup_class(self,tmp_path_factory)
numpy._core.tests.test_cpu_features.TestEnvPrivation.setup_method(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation.test_both_enable_disable_set(self,enabled,disabled)
numpy._core.tests.test_cpu_features.TestEnvPrivation.test_impossible_feature_disable(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation.test_impossible_feature_enable(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation.test_runtime_feature_selection(self)
numpy._core.tests.test_cpu_features.TestEnvPrivation.test_variable_too_long(self,action)
numpy._core.tests.test_cpu_features.Test_ARM_Features(AbstractTest)
numpy._core.tests.test_cpu_features.Test_ARM_Features.load_flags(self)
numpy._core.tests.test_cpu_features.Test_POWER_Features(AbstractTest)
numpy._core.tests.test_cpu_features.Test_POWER_Features.load_flags(self)
numpy._core.tests.test_cpu_features.Test_X86_Features(AbstractTest)
numpy._core.tests.test_cpu_features.Test_X86_Features.load_flags(self)
numpy._core.tests.test_cpu_features.Test_ZARCH_Features(AbstractTest)
numpy._core.tests.test_cpu_features.Test_ZARCH_Features.load_flags(self)
numpy._core.tests.test_cpu_features._text_to_list(txt)
numpy._core.tests.test_cpu_features.assert_features_equal(actual,desired,fname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/test_getlimits.py----------------------------------------
A:numpy._core.tests.test_getlimits.ftype->finfo(longdouble)
A:numpy._core.tests.test_getlimits.ftype2->finfo(longdouble)
A:numpy._core.tests.test_getlimits.dts->list(zip(['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8'], [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64]))
A:numpy._core.tests.test_getlimits.f1->numpy.finfo(np.float32(1.0))
A:numpy._core.tests.test_getlimits.f2->numpy.finfo(np.float64(1.0))
A:numpy._core.tests.test_getlimits.dtype->numpy.dtype('float32')
A:numpy._core.tests.test_getlimits.x->NonHashableWithDtype()
A:numpy._core.tests.test_getlimits.class_iinfo->iinfo(c)
A:numpy._core.tests.test_getlimits.instance_iinfo->iinfo(c(12))
A:numpy._core.tests.test_getlimits.class_finfo->finfo(c)
A:numpy._core.tests.test_getlimits.instance_finfo->finfo(c(1.2))
A:numpy._core.tests.test_getlimits.ld_ma->_discovered_machar(np.longdouble)
A:numpy._core.tests.test_getlimits.info->numpy.finfo(ftype)
numpy._core.tests.test_TestDouble
numpy._core.tests.test_TestDouble.test_singleton(self)
numpy._core.tests.test_TestFinfo
numpy._core.tests.test_TestFinfo.test_basic(self)
numpy._core.tests.test_TestFinfo.test_regression_gh23108(self)
numpy._core.tests.test_TestFinfo.test_regression_gh23867(self)
numpy._core.tests.test_TestHalf
numpy._core.tests.test_TestHalf.test_singleton(self)
numpy._core.tests.test_TestIinfo
numpy._core.tests.test_TestIinfo.test_basic(self)
numpy._core.tests.test_TestIinfo.test_unsigned_max(self)
numpy._core.tests.test_TestLongdouble
numpy._core.tests.test_TestLongdouble.test_singleton(self)
numpy._core.tests.test_TestPythonFloat
numpy._core.tests.test_TestPythonFloat.test_singleton(self)
numpy._core.tests.test_TestRepr
numpy._core.tests.test_TestRepr.test_finfo_repr(self)
numpy._core.tests.test_TestRepr.test_iinfo_repr(self)
numpy._core.tests.test_TestSingle
numpy._core.tests.test_TestSingle.test_singleton(self)
numpy._core.tests.test_assert_finfo_equal(f1,f2)
numpy._core.tests.test_assert_iinfo_equal(i1,i2)
numpy._core.tests.test_assert_ma_equal(discovered,ma_like)
numpy._core.tests.test_getlimits.TestDouble
numpy._core.tests.test_getlimits.TestDouble.test_singleton(self)
numpy._core.tests.test_getlimits.TestFinfo
numpy._core.tests.test_getlimits.TestFinfo.test_basic(self)
numpy._core.tests.test_getlimits.TestFinfo.test_regression_gh23108(self)
numpy._core.tests.test_getlimits.TestFinfo.test_regression_gh23867(self)
numpy._core.tests.test_getlimits.TestHalf
numpy._core.tests.test_getlimits.TestHalf.test_singleton(self)
numpy._core.tests.test_getlimits.TestIinfo
numpy._core.tests.test_getlimits.TestIinfo.test_basic(self)
numpy._core.tests.test_getlimits.TestIinfo.test_unsigned_max(self)
numpy._core.tests.test_getlimits.TestLongdouble
numpy._core.tests.test_getlimits.TestLongdouble.test_singleton(self)
numpy._core.tests.test_getlimits.TestPythonFloat
numpy._core.tests.test_getlimits.TestPythonFloat.test_singleton(self)
numpy._core.tests.test_getlimits.TestRepr
numpy._core.tests.test_getlimits.TestRepr.test_finfo_repr(self)
numpy._core.tests.test_getlimits.TestRepr.test_iinfo_repr(self)
numpy._core.tests.test_getlimits.TestSingle
numpy._core.tests.test_getlimits.TestSingle.test_singleton(self)
numpy._core.tests.test_getlimits.assert_finfo_equal(f1,f2)
numpy._core.tests.test_getlimits.assert_iinfo_equal(i1,i2)
numpy._core.tests.test_getlimits.assert_ma_equal(discovered,ma_like)
numpy._core.tests.test_getlimits.test_instances()
numpy._core.tests.test_getlimits.test_known_types()
numpy._core.tests.test_getlimits.test_plausible_finfo()
numpy._core.tests.test_getlimits.test_subnormal_warning()
numpy._core.tests.test_test_instances()
numpy._core.tests.test_test_known_types()
numpy._core.tests.test_test_plausible_finfo()
numpy._core.tests.test_test_subnormal_warning()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/examples/limited_api/setup.py----------------------------------------
A:numpy._core.tests.examples.limited_api.setup.limited_api->Extension('limited_api', sources=[os.path.join('.', 'limited_api.c')], include_dirs=[np.get_include()], define_macros=macros)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_core/tests/examples/cython/setup.py----------------------------------------
A:numpy._core.tests.examples.cython.setup.checks->Extension('checks', sources=[os.path.join('.', 'checks.pyx')], include_dirs=[np.get_include()], define_macros=macros)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/strings/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/strings/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/npy_pkg_config.py----------------------------------------
A:numpy.distutils.npy_pkg_config._VAR->re.compile('\\$\\{([a-zA-Z0-9_-]+)\\}')
A:numpy.distutils.npy_pkg_config.flags->(' ' + line).split(' -')
A:numpy.distutils.npy_pkg_config.val->self.vars.interpolate(self._sections[section]['libs'])
A:numpy.distutils.npy_pkg_config.self._raw_data->dict([(k, v) for (k, v) in d.items()])
A:numpy.distutils.npy_pkg_config.self._re[name]->re.compile('\\$\\{%s\\}' % name)
A:numpy.distutils.npy_pkg_config.value->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(2)
A:numpy.distutils.npy_pkg_config.nvalue->_interpolate(value)
A:numpy.distutils.npy_pkg_config.d->os.environ.get('NPY_PKG_CONFIG_PATH')
A:numpy.distutils.npy_pkg_config.config->RawConfigParser()
A:numpy.distutils.npy_pkg_config.n->RawConfigParser().read(filenames)
A:numpy.distutils.npy_pkg_config.meta->parse_meta(config)
A:numpy.distutils.npy_pkg_config.vars[name]->_escape_backslash(value)
A:numpy.distutils.npy_pkg_config.requires[s]->RawConfigParser().get(s, 'requires')
A:numpy.distutils.npy_pkg_config.(meta, vars, sections, reqs)->_read_config(filenames)
A:numpy.distutils.npy_pkg_config.(nmeta, nvars, nsections, nreqs)->_read_config(pkg_to_filename(rvalue))
A:numpy.distutils.npy_pkg_config.vars['pkgdir']->_escape_backslash(os.path.dirname(mod.__file__))
A:numpy.distutils.npy_pkg_config.v->_read_config_imp(pkg_to_filename(pkgname), dirs)
A:numpy.distutils.npy_pkg_config.parser->OptionParser()
A:numpy.distutils.npy_pkg_config.(options, args)->OptionParser().parse_args(sys.argv)
A:numpy.distutils.npy_pkg_config.files->glob.glob('*.ini')
A:numpy.distutils.npy_pkg_config.info->read_config(pkg_name, ['numpy/_core/lib/npy-pkg-config', '.'])
A:numpy.distutils.npy_pkg_config.m->re.search('([\\S]+)=([\\S]+)', options.define_variable)
A:numpy.distutils.npy_pkg_config.name->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(1)
numpy.distutils.FormatError(self,msg)
numpy.distutils.FormatError.__str__(self)
numpy.distutils.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.LibraryInfo.__str__(self)
numpy.distutils.LibraryInfo.cflags(self,section='default')
numpy.distutils.LibraryInfo.libs(self,section='default')
numpy.distutils.LibraryInfo.sections(self)
numpy.distutils.PkgNotFound(self,msg)
numpy.distutils.PkgNotFound.__str__(self)
numpy.distutils.VariableSet(self,d)
numpy.distutils.VariableSet.__getitem__(self,name)
numpy.distutils.VariableSet.__setitem__(self,name,value)
numpy.distutils.VariableSet._init_parse(self)
numpy.distutils.VariableSet._init_parse_var(self,name,value)
numpy.distutils.VariableSet.interpolate(self,value)
numpy.distutils.VariableSet.variables(self)
numpy.distutils._escape_backslash(val)
numpy.distutils._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.FormatError(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__init__(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__init__(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo.cflags(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.libs(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.sections(self)
numpy.distutils.npy_pkg_config.PkgNotFound(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__init__(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__str__(self)
numpy.distutils.npy_pkg_config.VariableSet(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__getitem__(self,name)
numpy.distutils.npy_pkg_config.VariableSet.__init__(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__setitem__(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet._init_parse(self)
numpy.distutils.npy_pkg_config.VariableSet._init_parse_var(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet.interpolate(self,value)
numpy.distutils.npy_pkg_config.VariableSet.variables(self)
numpy.distutils.npy_pkg_config._escape_backslash(val)
numpy.distutils.npy_pkg_config._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.parse_config(filename,dirs=None)
numpy.distutils.npy_pkg_config.parse_flags(line)
numpy.distutils.npy_pkg_config.parse_meta(config)
numpy.distutils.npy_pkg_config.parse_sections(config)
numpy.distutils.npy_pkg_config.parse_variables(config)
numpy.distutils.npy_pkg_config.pkg_to_filename(pkg_name)
numpy.distutils.npy_pkg_config.read_config(pkgname,dirs=None)
numpy.distutils.parse_config(filename,dirs=None)
numpy.distutils.parse_flags(line)
numpy.distutils.parse_meta(config)
numpy.distutils.parse_sections(config)
numpy.distutils.parse_variables(config)
numpy.distutils.pkg_to_filename(pkg_name)
numpy.distutils.read_config(pkgname,dirs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/numpy_distribution.py----------------------------------------
numpy.distutils.numpy_distribution.NumpyDistribution(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.__init__(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.has_scons_scripts(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/__init__.py----------------------------------------
A:numpy.distutils.__init__.test->PytestTester(__name__)
A:numpy.distutils.__init__.c->ccompiler.new_compiler(plat=plat, compiler=compiler, verbose=verbose)
numpy.distutils.__init__.customized_ccompiler(plat=None,compiler=None,verbose=1)
numpy.distutils.__init__.customized_fcompiler(plat=None,compiler=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/__init__.pyi----------------------------------------
numpy.distutils.__init__.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/misc_util.py----------------------------------------
A:numpy.distutils.misc_util._tdata->tlocal()
A:numpy.distutils.misc_util.cpu_count->min(cpu_count, 8)
A:numpy.distutils.misc_util.envjobs->int(os.environ.get('NPY_NUM_BUILD_JOBS', cpu_count))
A:numpy.distutils.misc_util.dist->self.get_distribution()
A:numpy.distutils.misc_util.args->list(args)
A:numpy.distutils.misc_util.split->m.group('name').split('/')
A:numpy.distutils.misc_util.pd->os.path.realpath(os.path.abspath(parent_path))
A:numpy.distutils.misc_util.apath->os.path.realpath(os.path.abspath(path))
A:numpy.distutils.misc_util.caller_file->eval('__file__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.d->os.path.dirname(d)
A:numpy.distutils.misc_util.caller_name->eval('__name__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.joined->joined.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_file->os.path.join(path, '_numpyconfig.h')
A:numpy.distutils.misc_util.dirs->get_numpy_include_dirs()
A:numpy.distutils.misc_util.fn->njoin(self.local_path, f)
A:numpy.distutils.misc_util.value->line[len(s):].strip()
A:numpy.distutils.misc_util.l->os.path.basename(subpackage_path).split('.')
A:numpy.distutils.misc_util.i->os.path.basename(subpackage_path).split('.').index('..', j)
A:numpy.distutils.misc_util.p->sorted_glob(n)
A:numpy.distutils.misc_util.p2->sorted_glob(njoin(local_path, n))
A:numpy.distutils.misc_util.n2->njoin(local_path, n)
A:numpy.distutils.misc_util._tdata.tempdir->tempfile.mkdtemp()
A:numpy.distutils.misc_util.(fid, name)->tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=_tdata.tempdir, text=text)
A:numpy.distutils.misc_util.fo->os.fdopen(fid, 'w')
A:numpy.distutils.misc_util._colour_codes->dict(black=0, red=1, green=2, yellow=3, blue=4, magenta=5, cyan=6, white=7, default=9)
A:numpy.distutils.misc_util.msc_pos->sys.version.find('MSC v.')
A:numpy.distutils.misc_util.msc_ver->int(sys.version[msc_pos + 6:msc_pos + 10])
A:numpy.distutils.misc_util.ver->msvc_runtime_major()
A:numpy.distutils.misc_util.major->{1300: 70, 1310: 71, 1400: 80, 1500: 90, 1600: 100, 1900: 140}.get(msvc_runtime_version(), None)
A:numpy.distutils.misc_util.m->re.match(b'(?P<revision>\\d+)', output)
A:numpy.distutils.misc_util.name->re.match(b'(?P<revision>\\d+)', output).group('name')
A:numpy.distutils.misc_util.modules->_get_f90_modules(source)
A:numpy.distutils.misc_util.head->sorted_glob(os.path.join(d, '*.h'))
A:numpy.distutils.misc_util.abs_dir->os.path.abspath(directory)
A:numpy.distutils.misc_util.c->Configuration(name, parent_name, local_path)
A:numpy.distutils.misc_util.new_dir->os.sep.join(new_dir)
A:numpy.distutils.misc_util.prune_file_pat->re.compile('(?:[~#]|\\.py[co]|\\.o)$')
A:numpy.distutils.misc_util.dpath->os.path.join(dirpath, d)
A:numpy.distutils.misc_util.rpath->rel_path(path, self.local_path)
A:numpy.distutils.misc_util.sources->lib[1].get('sources', [])
A:numpy.distutils.misc_util.depends->lib[1].get('depends', [])
A:numpy.distutils.misc_util.confvars->distutils.sysconfig.get_config_vars()
A:numpy.distutils.misc_util.so_ext->so_ext.replace('.' + confvars.get('SOABI'), '', 1).replace('.' + confvars.get('SOABI'), '', 1)
A:numpy.distutils.misc_util.self.name->dot_join(parent_name, package_name)
A:numpy.distutils.misc_util.caller_frame->get_frame(caller_level)
A:numpy.distutils.misc_util.self.local_path->get_path_from_frame(caller_frame, top_path)
A:numpy.distutils.misc_util.package_path->njoin(self.local_path, package_path)
A:numpy.distutils.misc_util.self.path_in_package->os.path.join(*self.name.split('.'))
A:numpy.distutils.misc_util.v->copy.copy(attrs.get(n, {}))
A:numpy.distutils.misc_util.self.options->dict(ignore_setup_xxx_py=False, assume_default_configuration=False, delegate_options_to_subpackages=False, quiet=False)
A:numpy.distutils.misc_util.f->get_frame(i)
A:numpy.distutils.misc_util.caller_instance->eval('self', f.f_globals, f.f_locals)
A:numpy.distutils.misc_util.a->getattr(self, k, None)
A:numpy.distutils.misc_util.subpackage_path->njoin([subpackage_path] + l[:-1])
A:numpy.distutils.misc_util.n->dot_join(self.name, name)
A:numpy.distutils.misc_util.setup_module->exec_mod_from_location('_'.join(n.split('.')), setup_py)
A:numpy.distutils.misc_util.config->self._get_configuration_from_setup_py(setup_py, subpackage_name, subpackage_path, parent_name, caller_level=caller_level + 1)
A:numpy.distutils.misc_util.pn->dot_join(*[parent_name] + subpackage_name.split('.')[:-1])
A:numpy.distutils.misc_util.subpackage_name->os.path.basename(subpackage_path)
A:numpy.distutils.misc_util.setup_py->njoin(subpackage_path, 'setup_%s.py' % subpackage_name)
A:numpy.distutils.misc_util.config_list->self.get_subpackage(subpackage_name, subpackage_path, parent_name=parent_name, caller_level=2)
A:numpy.distutils.misc_util.paths->self.paths(filepat, include_non_existing=False)
A:numpy.distutils.misc_util.pattern_list->os.path.dirname(d).split(os.sep)
A:numpy.distutils.misc_util.rl->list(range(len(pattern_list) - 1))
A:numpy.distutils.misc_util.path_list->path.replace('/', os.path.sep).split(os.sep)
A:numpy.distutils.misc_util.target_path->os.path.join(self.path_in_package, d, d1)
A:numpy.distutils.misc_util.data_dict[p]->set()
A:numpy.distutils.misc_util.include_dirs->self.paths(paths)
A:numpy.distutils.misc_util.include_non_existing->kws.get('include_non_existing', True)
A:numpy.distutils.misc_util.new_v->self.paths(v)
A:numpy.distutils.misc_util.ext_args->copy.copy(kw)
A:numpy.distutils.misc_util.ext_args['name']->dot_join(self.name, name)
A:numpy.distutils.misc_util.libraries->copy.copy(kw).get('libraries', [])
A:numpy.distutils.misc_util.(lname, lpath)->libname.split('@', 1)
A:numpy.distutils.misc_util.lpath->os.path.abspath(njoin(self.local_path, lpath))
A:numpy.distutils.misc_util.ext->Extension(**ext_args)
A:numpy.distutils.misc_util.build_info->copy.copy(build_info)
A:numpy.distutils.misc_util.install_dir->os.path.join(self.package_path, install_dir)
A:numpy.distutils.misc_util.template->os.path.join(self.package_path, template)
A:numpy.distutils.misc_util.scripts->self.paths(files)
A:numpy.distutils.misc_util.cmd->self.get_distribution().get_command_obj(cmdname)
A:numpy.distutils.misc_util.old_path->os.environ.get('PATH')
A:numpy.distutils.misc_util.path->path.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_cmd->self.get_config_cmd()
A:numpy.distutils.misc_util.flag->self.get_config_cmd().try_compile(simple_fortran_subroutine, lang='f90')
A:numpy.distutils.misc_util.output->subprocess.check_output(['hg', 'identify', '--num'], cwd=path)
A:numpy.distutils.misc_util.entries->njoin(path, '.svn', 'entries')
A:numpy.distutils.misc_util.fstr->get_frame(i).read()
A:numpy.distutils.misc_util.branch_fn->njoin(path, '.hg', 'branch')
A:numpy.distutils.misc_util.branch_cache_fn->njoin(path, '.hg', 'branch.cache')
A:numpy.distutils.misc_util.revision0->get_frame(i).read().strip()
A:numpy.distutils.misc_util.revision1->int(revision1)
A:numpy.distutils.misc_util.version->str(revision)
A:numpy.distutils.misc_util.version_module->exec_mod_from_location('_'.join(n.split('.')), fn)
A:numpy.distutils.misc_util.revision->self._get_hg_revision(self.local_path)
A:numpy.distutils.misc_util.target->njoin(self.local_path, '__hg_version__.py')
A:numpy.distutils.misc_util.spec->importlib.util.spec_from_file_location(modname, modfile)
A:numpy.distutils.misc_util.pkg_info->get_pkg_info(pkgname, dirs)
A:numpy.distutils.misc_util.info->parse_flags(pkg_info.cflags())
A:numpy.distutils.misc_util.prefix->prefix.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.(pathdrive, path)->os.path.splitdrive(path)
A:numpy.distutils.misc_util.foo->importlib.util.module_from_spec(spec)
numpy.distutils.misc_util.Configuration(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__init__(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__str__(self)
numpy.distutils.misc_util.Configuration._add_library(self,name,sources,install_dir,build_info)
numpy.distutils.misc_util.Configuration._fix_paths_dict(self,kw)
numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py(self,setup_py,subpackage_name,subpackage_path,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration._get_hg_revision(self,path)
numpy.distutils.misc_util.Configuration._get_svn_revision(self,path)
numpy.distutils.misc_util.Configuration._optimize_data_files(self)
numpy.distutils.misc_util.Configuration._wildcard_get_subpackage(self,subpackage_name,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration.add_data_dir(self,data_path)
numpy.distutils.misc_util.Configuration.add_data_files(self,*files)
numpy.distutils.misc_util.Configuration.add_define_macros(self,macros)
numpy.distutils.misc_util.Configuration.add_extension(self,name,sources,**kw)
numpy.distutils.misc_util.Configuration.add_headers(self,*files)
numpy.distutils.misc_util.Configuration.add_include_dirs(self,*paths)
numpy.distutils.misc_util.Configuration.add_installed_library(self,name,sources,install_dir,build_info=None)
numpy.distutils.misc_util.Configuration.add_library(self,name,sources,**build_info)
numpy.distutils.misc_util.Configuration.add_npy_pkg_config(self,template,install_dir,subst_dict=None)
numpy.distutils.misc_util.Configuration.add_scripts(self,*files)
numpy.distutils.misc_util.Configuration.add_subpackage(self,subpackage_name,subpackage_path=None,standalone=False)
numpy.distutils.misc_util.Configuration.append_to(self,extlib)
numpy.distutils.misc_util.Configuration.dict_append(self,**dict)
numpy.distutils.misc_util.Configuration.get_build_temp_dir(self)
numpy.distutils.misc_util.Configuration.get_config_cmd(self)
numpy.distutils.misc_util.Configuration.get_distribution(self)
numpy.distutils.misc_util.Configuration.get_info(self,*names)
numpy.distutils.misc_util.Configuration.get_subpackage(self,subpackage_name,subpackage_path=None,parent_name=None,caller_level=1)
numpy.distutils.misc_util.Configuration.get_version(self,version_file=None,version_variable=None)
numpy.distutils.misc_util.Configuration.have_f77c(self)
numpy.distutils.misc_util.Configuration.have_f90c(self)
numpy.distutils.misc_util.Configuration.info(self,message)
numpy.distutils.misc_util.Configuration.make_config_py(self,name='__config__')
numpy.distutils.misc_util.Configuration.make_hg_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.make_svn_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.paths(self,*paths,**kws)
numpy.distutils.misc_util.Configuration.set_options(self,**options)
numpy.distutils.misc_util.Configuration.todict(self)
numpy.distutils.misc_util.Configuration.warn(self,message)
numpy.distutils.misc_util.InstallableLib(self,name,build_info,target_dir)
numpy.distutils.misc_util.InstallableLib.__init__(self,name,build_info,target_dir)
numpy.distutils.misc_util._commandline_dep_string(cc_args,extra_postargs,pp_opts)
numpy.distutils.misc_util._fix_paths(paths,local_path,include_non_existing)
numpy.distutils.misc_util._get_directories(list_of_sources)
numpy.distutils.misc_util._get_f90_modules(source)
numpy.distutils.misc_util._get_headers(directory_list)
numpy.distutils.misc_util.all_strings(lst)
numpy.distutils.misc_util.allpath(name)
numpy.distutils.misc_util.appendpath(prefix,path)
numpy.distutils.misc_util.as_list(seq)
numpy.distutils.misc_util.blue_text(s)
numpy.distutils.misc_util.clean_up_temporary_directory()
numpy.distutils.misc_util.cyan_text(s)
numpy.distutils.misc_util.cyg2win32(path:str)->str
numpy.distutils.misc_util.default_config_dict(name=None,parent_name=None,local_path=None)
numpy.distutils.misc_util.default_text(s)
numpy.distutils.misc_util.dict_append(d,**kws)
numpy.distutils.misc_util.dot_join(*args)
numpy.distutils.misc_util.exec_mod_from_location(modname,modfile)
numpy.distutils.misc_util.filter_sources(sources)
numpy.distutils.misc_util.general_source_directories_files(top_path)
numpy.distutils.misc_util.general_source_files(top_path)
numpy.distutils.misc_util.generate_config_py(target)
numpy.distutils.misc_util.get_build_architecture()
numpy.distutils.misc_util.get_cmd(cmdname,_cache={})
numpy.distutils.misc_util.get_data_files(data)
numpy.distutils.misc_util.get_dependencies(sources)
numpy.distutils.misc_util.get_ext_source_files(ext)
numpy.distutils.misc_util.get_frame(level=0)
numpy.distutils.misc_util.get_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_language(sources)
numpy.distutils.misc_util.get_lib_source_files(lib)
numpy.distutils.misc_util.get_mathlibs(path=None)
numpy.distutils.misc_util.get_npy_pkg_dir()
numpy.distutils.misc_util.get_num_build_jobs()
numpy.distutils.misc_util.get_numpy_include_dirs()
numpy.distutils.misc_util.get_path_from_frame(frame,parent_path=None)
numpy.distutils.misc_util.get_pkg_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_script_files(scripts)
numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=False)
numpy.distutils.misc_util.gpaths(paths,local_path='',include_non_existing=True)
numpy.distutils.misc_util.green_text(s)
numpy.distutils.misc_util.has_cxx_sources(sources)
numpy.distutils.misc_util.has_f_sources(sources)
numpy.distutils.misc_util.is_bootstrapping()
numpy.distutils.misc_util.is_glob_pattern(s)
numpy.distutils.misc_util.is_local_src_dir(directory)
numpy.distutils.misc_util.is_sequence(seq)
numpy.distutils.misc_util.is_string(s)
numpy.distutils.misc_util.make_temp_file(suffix='',prefix='',text=True)
numpy.distutils.misc_util.mingw32()
numpy.distutils.misc_util.minrelpath(path)
numpy.distutils.misc_util.msvc_runtime_library()
numpy.distutils.misc_util.msvc_runtime_major()
numpy.distutils.misc_util.msvc_runtime_version()
numpy.distutils.misc_util.msvc_version(compiler)
numpy.distutils.misc_util.njoin(*path)
numpy.distutils.misc_util.quote_args(args)
numpy.distutils.misc_util.red_text(s)
numpy.distutils.misc_util.rel_path(path,parent_path)
numpy.distutils.misc_util.sanitize_cxx_flags(cxxflags)
numpy.distutils.misc_util.sorted_glob(fileglob)
numpy.distutils.misc_util.terminal_has_colors()
numpy.distutils.misc_util.yellow_text(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/exec_command.py----------------------------------------
A:numpy.distutils.exec_command.mylocale->locale.getpreferredencoding(False)
A:numpy.distutils.exec_command.output->output.replace('\r\n', '\n').replace('\r\n', '\n')
A:numpy.distutils.exec_command.(fo, name)->make_temp_file()
A:numpy.distutils.exec_command.(fdir, fn)->os.path.split(pythonexe)
A:numpy.distutils.exec_command.fn->os.path.join(path, exe)
A:numpy.distutils.exec_command.pythonexe->os.path.join(fdir, fn)
A:numpy.distutils.exec_command.path->os.environ.get('PATH', os.defpath)
A:numpy.distutils.exec_command.(fn, ext)->os.path.splitext(exe)
A:numpy.distutils.exec_command.f_ext->realpath(f_ext)
A:numpy.distutils.exec_command.execute_in->os.path.abspath(execute_in)
A:numpy.distutils.exec_command.oldcwd->os.path.abspath(os.getcwd())
A:numpy.distutils.exec_command.exec_dir->os.path.dirname(exec_dir)
A:numpy.distutils.exec_command.oldenv->_preserve_environment(list(env.keys()))
A:numpy.distutils.exec_command.st->_exec_command(command, use_shell=use_shell, use_tee=use_tee, **env)
A:numpy.distutils.exec_command.sh->os.environ.get('SHELL', '/bin/sh')
A:numpy.distutils.exec_command.command->' '.join((_quote_arg(arg) for arg in command))
A:numpy.distutils.exec_command.proc->subprocess.Popen(command, shell=use_shell, env=env, text=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:numpy.distutils.exec_command.(text, err)->subprocess.Popen(command, shell=use_shell, env=env, text=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
A:numpy.distutils.exec_command.text->text.replace('\r\n', '\n').replace('\r\n', '\n')
numpy.distutils.exec_command._exec_command(command,use_shell=None,use_tee=None,**env)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._quote_arg(arg)
numpy.distutils.exec_command._update_environment(**env)
numpy.distutils.exec_command.exec_command(command,execute_in='',use_shell=None,use_tee=None,_with_python=1,**env)
numpy.distutils.exec_command.filepath_from_subprocess_output(output)
numpy.distutils.exec_command.find_executable(exe,path=None,_cache={})
numpy.distutils.exec_command.forward_bytes_to_stdout(val)
numpy.distutils.exec_command.get_pythonexe()
numpy.distutils.exec_command.temp_file_name()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/from_template.py----------------------------------------
A:numpy.distutils.from_template.routine_start_re->re.compile('(\\n|\\A)((     (\\$|\\*))|)\\s*(subroutine|function)\\b', re.I)
A:numpy.distutils.from_template.routine_end_re->re.compile('\\n\\s*end\\s*(subroutine|function)\\b.*(\\n|\\Z)', re.I)
A:numpy.distutils.from_template.function_start_re->re.compile('\\n     (\\$|\\*)\\s*function\\b', re.I)
A:numpy.distutils.from_template.m->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line)
A:numpy.distutils.from_template.start->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line).start()
A:numpy.distutils.from_template.i->astr.rfind('\n', ind, start)
A:numpy.distutils.from_template.template_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*>')
A:numpy.distutils.from_template.named_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>')
A:numpy.distutils.from_template.list_re->re.compile('<\\s*((.*?))\\s*>')
A:numpy.distutils.from_template.reps->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>').findall(astr)
A:numpy.distutils.from_template.repl->rep[1].replace('\\,', '@comma@')
A:numpy.distutils.from_template.thelist->find_repl_patterns(substr).get(r, names.get(r, None))
A:numpy.distutils.from_template.names->find_repl_patterns(astr)
A:numpy.distutils.from_template.item_re->re.compile('\\A\\\\(?P<index>\\d+)\\Z')
A:numpy.distutils.from_template.b->astr.split(',')
A:numpy.distutils.from_template.j->int(m.group('index'))
A:numpy.distutils.from_template.allkeys->list(adict.keys())
A:numpy.distutils.from_template.template_name_re->re.compile('\\A\\s*(\\w[\\w\\d]*)\\s*\\Z')
A:numpy.distutils.from_template.substr->re.compile('<\\s*((.*?))\\s*>').sub(listrepl, substr)
A:numpy.distutils.from_template.lnames->find_repl_patterns(substr)
A:numpy.distutils.from_template.name->mobj.group(1)
A:numpy.distutils.from_template.num->len(rule)
A:numpy.distutils.from_template.newstr->newstr.replace('@leftarrow@', '<').replace('@leftarrow@', '<')
A:numpy.distutils.from_template.struct->parse_structure(newstr)
A:numpy.distutils.from_template.(cleanedstr, defs)->find_and_remove_repl_patterns(newstr[oldend:sub[0]])
A:numpy.distutils.from_template.include_src_re->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I)
A:numpy.distutils.from_template.d->os.path.dirname(source)
A:numpy.distutils.from_template.fn->os.path.join(d, fn)
A:numpy.distutils.from_template.lines->resolve_includes(source)
A:numpy.distutils.from_template._special_names->find_repl_patterns('\n<_c=s,d,c,z>\n<_t=real,double precision,complex,double complex>\n<prefix=s,d,c,z>\n<ftype=real,double precision,complex,double complex>\n<ctype=float,double,complex_float,complex_double>\n<ftypereal=real,double precision,\\0,\\1>\n<ctypereal=float,double,\\0,\\1>\n')
A:numpy.distutils.from_template.fid->open(file, 'r')
A:numpy.distutils.from_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.from_template.outfile->open(newname, 'w')
A:numpy.distutils.from_template.allstr->open(file, 'r').read()
A:numpy.distutils.from_template.writestr->process_str(allstr)
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr,names)
numpy.distutils.from_template.find_and_remove_repl_patterns(astr)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.main()
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/ccompiler.py----------------------------------------
A:numpy.distutils.ccompiler._global_lock->threading.Lock()
A:numpy.distutils.ccompiler._processing_files->set()
A:numpy.distutils.ccompiler.lines->f.readlines()
A:numpy.distutils.ccompiler.cmdline->_commandline_dep_string(cc_args, extra_postargs, pp_opts)
A:numpy.distutils.ccompiler.contents->''.join(lines[:-1])
A:numpy.distutils.ccompiler.display->'\n'.join(display)
A:numpy.distutils.ccompiler.o->o.encode('utf8').encode('utf8')
A:numpy.distutils.ccompiler.cmd->' '.join(list(cmd))
A:numpy.distutils.ccompiler.(base, ext)->os.path.splitext(os.path.normpath(src_name))
A:numpy.distutils.ccompiler.d->os.path.basename(os.path.abspath(d))
A:numpy.distutils.ccompiler.base->os.path.basename(base)
A:numpy.distutils.ccompiler.obj_name->os.path.join(output_dir, base + self.obj_extension)
A:numpy.distutils.ccompiler.jobs->get_num_build_jobs()
A:numpy.distutils.ccompiler._job_semaphore->threading.Semaphore(jobs)
A:numpy.distutils.ccompiler.fcomp->getattr(self, 'compiler_' + fc)
A:numpy.distutils.ccompiler.(macros, objects, extra_postargs, pp_opts, build)->self._setup_compile(output_dir, macros, include_dirs, sources, depends, extra_postargs)
A:numpy.distutils.ccompiler.cc_args->self._get_cc_args(pp_opts, debug, extra_preargs)
A:numpy.distutils.ccompiler.objects_to_build->list(build.keys())
A:numpy.distutils.ccompiler.obj->cyg2win32(obj)
A:numpy.distutils.ccompiler.src->cyg2win32(src)
A:numpy.distutils.ccompiler.build_items->build.items()
A:numpy.distutils.ccompiler.res->pool.map(single_compile, build_items)
A:numpy.distutils.ccompiler.keys->list(compiler.executables.keys())
A:numpy.distutils.ccompiler.v->getattr(compiler, key)
A:numpy.distutils.ccompiler.mx->max(mx, len(key))
A:numpy.distutils.ccompiler.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.ccompiler.fn->os.path.join(tmpdir, 'file.c')
A:numpy.distutils.ccompiler.version_string->version_string.replace('\n', ' ').replace('\n', ' ')
A:numpy.distutils.ccompiler.m->re.match(pat, version_string)
A:numpy.distutils.ccompiler.pos->re.match(pat, version_string).end()
A:numpy.distutils.ccompiler.version->LooseVersion(version)
A:numpy.distutils.ccompiler.output->filepath_from_subprocess_output(output)
A:numpy.distutils.ccompiler.cxx->copy(self)
A:numpy.distutils.ccompiler.compiler->klass(None, dry_run, force)
A:numpy.distutils.ccompiler.msg->str(e)
A:numpy.distutils.ccompiler.r->_distutils_gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.ccompiler._m->sys.modules.get('distutils.' + _cc + 'compiler')
numpy.distutils.ccompiler.CCompiler_compile(self,sources,output_dir=None,macros=None,include_dirs=None,debug=0,extra_preargs=None,extra_postargs=None,depends=None)
numpy.distutils.ccompiler.CCompiler_customize(self,dist,need_cxx=0)
numpy.distutils.ccompiler.CCompiler_customize_cmd(self,cmd,ignore=())
numpy.distutils.ccompiler.CCompiler_cxx_compiler(self)
numpy.distutils.ccompiler.CCompiler_find_executables(self)
numpy.distutils.ccompiler.CCompiler_get_version(self,force=False,ok_status=[0])
numpy.distutils.ccompiler.CCompiler_object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.ccompiler.CCompiler_show_customization(self)
numpy.distutils.ccompiler.CCompiler_spawn(self,cmd,display=None,env=None)
numpy.distutils.ccompiler._compiler_to_string(compiler)
numpy.distutils.ccompiler._needs_build(obj,cc_args,extra_postargs,pp_opts)
numpy.distutils.ccompiler.gen_lib_options(compiler,library_dirs,runtime_library_dirs,libraries)
numpy.distutils.ccompiler.new_compiler(plat=None,compiler=None,verbose=None,dry_run=0,force=0)
numpy.distutils.ccompiler.replace_method(klass,method_name,func)
numpy.distutils.ccompiler.simple_version_match(pat='[-.\\d]+',ignore='',start='')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/lib2def.py----------------------------------------
A:numpy.distutils.lib2def.FUNC_RE->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.DATA_RE->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.p->subprocess.Popen(nm_cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
A:numpy.distutils.lib2def.(nm_output, nm_err)->subprocess.Popen(nm_cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).communicate()
A:numpy.distutils.lib2def.data->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.func->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.(libfile, deffile)->parse_cmd()
A:numpy.distutils.lib2def.deffile->open(deffile, 'w')
A:numpy.distutils.lib2def.nm_output->getnm(nm_cmd, shell=False)
A:numpy.distutils.lib2def.(dlist, flist)->parse_nm(nm_output)
numpy.distutils.lib2def.getnm(nm_cmd=['nm','-Cs','python%s.lib'%py_ver],shell=True)
numpy.distutils.lib2def.output_def(dlist,flist,header,file=sys.stdout)
numpy.distutils.lib2def.parse_cmd()
numpy.distutils.lib2def.parse_nm(nm_output)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/core.py----------------------------------------
A:numpy.distutils.core.dist->setup(**new_attr)
A:numpy.distutils.core.cmdclass->numpy_cmdclass.copy()
A:numpy.distutils.core.new_attr->attr.copy()
A:numpy.distutils.core.configuration->attr.copy().pop('configuration')
A:numpy.distutils.core.config->numpy.distutils.command.config.todict().todict()
numpy.distutils.core._check_append_ext_library(libraries,lib_name,build_info)
numpy.distutils.core._check_append_library(libraries,item)
numpy.distutils.core._command_line_ok(_cache=None)
numpy.distutils.core._dict_append(d,**kws)
numpy.distutils.core.get_distribution(always=False)
numpy.distutils.core.setup(**attr)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/line_endings.py----------------------------------------
A:numpy.distutils.line_endings.data->fp.read()
A:numpy.distutils.line_endings.newdata->re.sub('\n', '\r\n', newdata)
A:numpy.distutils.line_endings.full_path->os.path.join(dir_name, file)
A:numpy.distutils.line_endings.file->dos2unix(full_path)
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files,dir_name,file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files,dir_name,file_names)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/system_info.py----------------------------------------
A:numpy.distutils.system_info.global_compiler->_customized_ccompiler()
A:numpy.distutils.system_info.s->textwrap.dedent('            void zungqr_();\n            int main(int argc, const char *argv[])\n            {\n                zungqr_();\n                return 0;\n            }')
A:numpy.distutils.system_info.library_root->os.path.normpath(library_root)
A:numpy.distutils.system_info.vcpkg->shutil.which('vcpkg')
A:numpy.distutils.system_info.vcpkg_dir->os.path.dirname(vcpkg)
A:numpy.distutils.system_info.vcpkg_installed->os.path.join(vcpkg_dir, 'installed')
A:numpy.distutils.system_info.conda->shutil.which('conda')
A:numpy.distutils.system_info.conda_dir->os.path.dirname(conda)
A:numpy.distutils.system_info.default_lib_dirs->libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib', '/opt/local/lib', '/sw/lib'], platform_bits)
A:numpy.distutils.system_info.default_x11_lib_dirs->libpaths(['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib'], platform_bits)
A:numpy.distutils.system_info.globbed_x11_dir->glob('/usr/lib/*/libX11.so')
A:numpy.distutils.system_info.p->self.combine_paths(d, ['', 'umfpack'], 'umfpack.h')
A:numpy.distutils.system_info.triplet->str(p.communicate()[0].decode().strip())
A:numpy.distutils.system_info.so_ext->get_shared_lib_extension()
A:numpy.distutils.system_info.sysfile->os.path.join(os.path.split(os.path.abspath(f))[0], fname)
A:numpy.distutils.system_info.f->new_fcompiler(c_compiler=c)
A:numpy.distutils.system_info.user_file->os.path.join(f, fname)
A:numpy.distutils.system_info.order_str->os.environ.get(env, None)
A:numpy.distutils.system_info.order_str_l->list(order_str)
A:numpy.distutils.system_info.orders->os.environ.get(env, None).lower().split(',')
A:numpy.distutils.system_info.allow_order->base_order.copy()
A:numpy.distutils.system_info.cl->{'armpl': armpl_info, 'blas_armpl': blas_armpl_info, 'lapack_armpl': lapack_armpl_info, 'fftw3_armpl': fftw3_armpl_info, 'atlas': atlas_info, 'atlas_threads': atlas_threads_info, 'atlas_blas': atlas_blas_info, 'atlas_blas_threads': atlas_blas_threads_info, 'lapack_atlas': lapack_atlas_info, 'lapack_atlas_threads': lapack_atlas_threads_info, 'atlas_3_10': atlas_3_10_info, 'atlas_3_10_threads': atlas_3_10_threads_info, 'atlas_3_10_blas': atlas_3_10_blas_info, 'atlas_3_10_blas_threads': atlas_3_10_blas_threads_info, 'lapack_atlas_3_10': lapack_atlas_3_10_info, 'lapack_atlas_3_10_threads': lapack_atlas_3_10_threads_info, 'flame': flame_info, 'mkl': mkl_info, 'ssl2': ssl2_info, 'openblas': openblas_info, 'openblas_lapack': openblas_lapack_info, 'openblas_clapack': openblas_clapack_info, 'blis': blis_info, 'lapack_mkl': lapack_mkl_info, 'blas_mkl': blas_mkl_info, 'lapack_ssl2': lapack_ssl2_info, 'blas_ssl2': blas_ssl2_info, 'accelerate': accelerate_info, 'accelerate_lapack': accelerate_lapack_info, 'openblas64_': openblas64__info, 'openblas64__lapack': openblas64__lapack_info, 'openblas_ilp64': openblas_ilp64_info, 'openblas_ilp64_lapack': openblas_ilp64_lapack_info, 'x11': x11_info, 'fft_opt': fft_opt_info, 'fftw': fftw_info, 'fftw2': fftw2_info, 'fftw3': fftw3_info, 'dfftw': dfftw_info, 'sfftw': sfftw_info, 'fftw_threads': fftw_threads_info, 'dfftw_threads': dfftw_threads_info, 'sfftw_threads': sfftw_threads_info, 'djbfft': djbfft_info, 'blas': blas_info, 'lapack': lapack_info, 'lapack_src': lapack_src_info, 'blas_src': blas_src_info, 'numpy': numpy_info, 'f2py': f2py_info, 'Numeric': Numeric_info, 'numeric': Numeric_info, 'numarray': numarray_info, 'numerix': numerix_info, 'lapack_opt': lapack_opt_info, 'lapack_ilp64_opt': lapack_ilp64_opt_info, 'lapack_ilp64_plain_opt': lapack_ilp64_plain_opt_info, 'lapack64__opt': lapack64__opt_info, 'blas_opt': blas_opt_info, 'blas_ilp64_opt': blas_ilp64_opt_info, 'blas_ilp64_plain_opt': blas_ilp64_plain_opt_info, 'blas64__opt': blas64__opt_info, 'boost_python': boost_python_info, 'agg2': agg2_info, 'wx': wx_info, 'gdk_pixbuf_xlib_2': gdk_pixbuf_xlib_2_info, 'gdk-pixbuf-xlib-2.0': gdk_pixbuf_xlib_2_info, 'gdk_pixbuf_2': gdk_pixbuf_2_info, 'gdk-pixbuf-2.0': gdk_pixbuf_2_info, 'gdk': gdk_info, 'gdk_2': gdk_2_info, 'gdk-2.0': gdk_2_info, 'gdk_x11_2': gdk_x11_2_info, 'gdk-x11-2.0': gdk_x11_2_info, 'gtkp_x11_2': gtkp_x11_2_info, 'gtk+-x11-2.0': gtkp_x11_2_info, 'gtkp_2': gtkp_2_info, 'gtk+-2.0': gtkp_2_info, 'xft': xft_info, 'freetype2': freetype2_info, 'umfpack': umfpack_info, 'amd': amd_info}.get(name.lower(), system_info)
A:numpy.distutils.system_info.self.cp->ConfigParser(defaults)
A:numpy.distutils.system_info.self.search_static_first->self.cp.getboolean(self.section, 'search_static_first')
A:numpy.distutils.system_info.libs->self.get_libs(opt, ver_param['libs'])
A:numpy.distutils.system_info.dirs->glob(os.path.join(d, 'mkl', '*'))
A:numpy.distutils.system_info.r_dirs->self.get_runtime_lib_dirs()
A:numpy.distutils.system_info.i->self.check_libs(r_dirs, [lib])
A:numpy.distutils.system_info.i['runtime_library_dirs']->self.check_libs(r_dirs, [lib]).pop('library_dirs')
A:numpy.distutils.system_info.lib_info->self.calc_libraries_info()
A:numpy.distutils.system_info.extra_info->self.calc_extra_info()
A:numpy.distutils.system_info.opt->self.get_option_single('umfpack_libs', 'libraries')
A:numpy.distutils.system_info.res->self.saved_results.get(self.__class__.__name__)
A:numpy.distutils.system_info.v->str(v)
A:numpy.distutils.system_info.l->self.check_libs(lib_dirs, umfpack_libs, []).get('define_macros', [])
A:numpy.distutils.system_info.b->os.path.basename(d)
A:numpy.distutils.system_info.ds->os.path.join(d, os.path.basename(py_incl_dir)).split(os.pathsep)
A:numpy.distutils.system_info.d1->os.path.join(d, dd)
A:numpy.distutils.system_info.default_dirs->self.cp.get(self.section, key).split(os.pathsep)
A:numpy.distutils.system_info.path->self.get_paths(self.section, key)
A:numpy.distutils.system_info.c->customized_ccompiler()
A:numpy.distutils.system_info.exts->self.library_extensions()
A:numpy.distutils.system_info.info->self.check_libs(lib_dirs, umfpack_libs, [])
A:numpy.distutils.system_info.found_lib->self._find_lib(lib_dir, lib, exts)
A:numpy.distutils.system_info.(found_dirs, found_libs)->self._find_libs(lib_dirs, libs, exts)
A:numpy.distutils.system_info.(opt_found_dirs, opt_found_libs)->self._find_libs(lib_dirs, opt_libs, exts)
A:numpy.distutils.system_info.djbfft_info->get_info('djbfft')
A:numpy.distutils.system_info.lib_dirs->self.get_lib_dirs()
A:numpy.distutils.system_info.incl_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.pre_dirs->system_info.get_paths(self, section, key)
A:numpy.distutils.system_info.mklroot->self.get_mkl_rootdir()
A:numpy.distutils.system_info.paths->os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)
A:numpy.distutils.system_info.d->os.path.join(d, os.path.basename(py_incl_dir))
A:numpy.distutils.system_info.path_atoms->self.get_paths(self.section, key).split(os.sep)
A:numpy.distutils.system_info.mkl_libs->self.get_libs(opt, self._lib_mkl)
A:numpy.distutils.system_info.tcsdsroot->self.get_tcsds_rootdir()
A:numpy.distutils.system_info.ssl2_libs->self.get_libs('ssl2_libs', self._lib_ssl2)
A:numpy.distutils.system_info.armpl_libs->self.get_libs('armpl_libs', self._lib_armpl)
A:numpy.distutils.system_info.atlas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.lapack_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.atlas->self.check_libs2(lib_dirs, atlas_libs, [])
A:numpy.distutils.system_info.lapack->self.check_libs2(lib_dirs2, lapack_libs, [])
A:numpy.distutils.system_info.include_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.h->os.path.dirname(h)
A:numpy.distutils.system_info.message->textwrap.dedent('\n                *********************************************************************\n                    Could not find lapack library within the ATLAS installation.\n                *********************************************************************\n                ')
A:numpy.distutils.system_info.fn->os.path.join(lapack_dir, prefix + lapack_name + e)
A:numpy.distutils.system_info.(atlas_version, atlas_extra_info)->get_atlas_version(**atlas)
A:numpy.distutils.system_info.src_dirs->self.get_src_dirs()
A:numpy.distutils.system_info.src_dir2->os.path.join(src_dir, '..', 'INSTALL')
A:numpy.distutils.system_info.libraries->self.get_libs('libraries', self._lib_names)
A:numpy.distutils.system_info.library_dirs->config.get('library_dirs', [])
A:numpy.distutils.system_info.(s, o)->customized_ccompiler().get_output(atlas_version_c_text, libraries=libraries + ['gfortran'], library_dirs=library_dirs)
A:numpy.distutils.system_info.m->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o)
A:numpy.distutils.system_info.atlas_version->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o).group('version')
A:numpy.distutils.system_info.lapack_info->self._get_info_lapack()
A:numpy.distutils.system_info.info_src->get_info('lapack_src')
A:numpy.distutils.system_info.info_blas->self._get_info_blas()
A:numpy.distutils.system_info.info['extra_link_args']->os.environ['NPY_BLAS_LIBS'].split()
A:numpy.distutils.system_info.(lapack_order, unknown_order)->_parse_env_order(self.lapack_order, self.order_env_var_name)
A:numpy.distutils.system_info.macros->dict(info.get('define_macros', []))
A:numpy.distutils.system_info.prefix->dict(info.get('define_macros', [])).get('BLAS_SYMBOL_PREFIX', '')
A:numpy.distutils.system_info.suffix->dict(info.get('define_macros', [])).get('BLAS_SYMBOL_SUFFIX', '')
A:numpy.distutils.system_info.blas->get_info('blas')
A:numpy.distutils.system_info.blas_src->get_info('blas_src')
A:numpy.distutils.system_info.(blas_order, unknown_order)->_parse_env_order(self.blas_order, self.order_env_var_name)
A:numpy.distutils.system_info.blas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.info['include_dirs']->self.get_include_dirs()
A:numpy.distutils.system_info.cblas_info_obj->cblas_info()
A:numpy.distutils.system_info.cblas_opt->cblas_info().get_option_single('cblas_libs', 'libraries')
A:numpy.distutils.system_info.cblas_libs->cblas_info().get_libs(cblas_opt, None)
A:numpy.distutils.system_info.lib->self.get_cblas_libs(info)
A:numpy.distutils.system_info.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.system_info.src->os.path.join(tmpdir, 'source.c')
A:numpy.distutils.system_info.obj->customized_ccompiler().compile([src], output_dir=tmpdir)
A:numpy.distutils.system_info.openblas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.fullpath->os.path.join(library_dir, library + '.a')
A:numpy.distutils.system_info.fake_lib_file->os.path.join(tmpdir, basename + '.fobjects')
A:numpy.distutils.system_info.fake_clib_file->os.path.join(tmpdir, basename + '.cobjects')
A:numpy.distutils.system_info.prototypes->'\n'.join(('void %s%s%s();' % (self.symbol_prefix, symbol_name, self.symbol_suffix) for symbol_name in self._require_symbols))
A:numpy.distutils.system_info.calls->'\n'.join(('%s%s%s();' % (self.symbol_prefix, symbol_name, self.symbol_suffix) for symbol_name in self._require_symbols))
A:numpy.distutils.system_info.out->os.path.join(tmpdir, 'a.out')
A:numpy.distutils.system_info.blis_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.extra_args->self.check_libs(lib_dirs, umfpack_libs, []).get('extra_link_args', [])
A:numpy.distutils.system_info.flame_libs->self.get_libs('libraries', self._lib_names)
A:numpy.distutils.system_info.blas_info->get_info('blas_opt')
A:numpy.distutils.system_info.x11_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.module->__import__(self.modulename)
A:numpy.distutils.system_info.py_incl_dir->sysconfig.get_path('include')
A:numpy.distutils.system_info.py_pincl_dir->sysconfig.get_path('platinclude')
A:numpy.distutils.system_info.vrs->getattr(module, v, None)
A:numpy.distutils.system_info.msg1->str(e)
A:numpy.distutils.system_info.msg2->str(e)
A:numpy.distutils.system_info.msg3->str(e)
A:numpy.distutils.system_info.f2py_dir->os.path.join(os.path.dirname(f2py.__file__), 'src')
A:numpy.distutils.system_info.srcs_dir->os.path.join(src_dir, 'libs', 'python', 'src')
A:numpy.distutils.system_info.bpl_srcs->glob(os.path.join(srcs_dir, '*.cpp'))
A:numpy.distutils.system_info.agg2_srcs->glob(os.path.join(src_dir, 'src', '*.cpp'))
A:numpy.distutils.system_info.o->filepath_from_subprocess_output(o)
A:numpy.distutils.system_info.config_exe->find_executable(self.get_config_exe())
A:numpy.distutils.system_info.version->self.get_config_output(config_exe, self.version_flag)
A:numpy.distutils.system_info.release->self.get_config_output(config_exe, '--release')
A:numpy.distutils.system_info.opts->self.get_config_output(config_exe, self.cflags_flag)
A:numpy.distutils.system_info.(n, v)->opt[2:].split('=')
A:numpy.distutils.system_info.amd_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.inc_dir->os.path.dirname(p[0])
A:numpy.distutils.system_info.umfpack_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.result->combine_paths(*combine_paths(args[0], args[1]) + args[2:])
A:numpy.distutils.system_info.parser->optparse.OptionParser('usage: %prog [-v] [info objs]')
A:numpy.distutils.system_info.(opts, args)->parseCmdLine(argv)
A:numpy.distutils.system_info._gdict_->globals().copy()
A:numpy.distutils.system_info.conf->c()
numpy.distutils.system_info.AliasedOptionError(DistutilsError)
numpy.distutils.system_info.AtlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasILP64NotFoundError(NotFoundError)
numpy.distutils.system_info.BlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasOptNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasSrcNotFoundError(BlasNotFoundError)
numpy.distutils.system_info.DJBFFTNotFoundError(NotFoundError)
numpy.distutils.system_info.FFTWNotFoundError(NotFoundError)
numpy.distutils.system_info.FlameNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackILP64NotFoundError(NotFoundError)
numpy.distutils.system_info.LapackNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackSrcNotFoundError(LapackNotFoundError)
numpy.distutils.system_info.NotFoundError(DistutilsError)
numpy.distutils.system_info.NumericNotFoundError(NotFoundError)
numpy.distutils.system_info.Numeric_info(_numpy_info)
numpy.distutils.system_info.UmfpackNotFoundError(NotFoundError)
numpy.distutils.system_info.X11NotFoundError(NotFoundError)
numpy.distutils.system_info._c_string_literal(s)
numpy.distutils.system_info._ilp64_opt_info_mixin
numpy.distutils.system_info._ilp64_opt_info_mixin._check_info(self,info)
numpy.distutils.system_info._numpy_info(self)
numpy.distutils.system_info._numpy_info.__init__(self)
numpy.distutils.system_info._numpy_info.calc_info(self)
numpy.distutils.system_info._parse_env_order(base_order,env)
numpy.distutils.system_info._pkg_config_info(system_info)
numpy.distutils.system_info._pkg_config_info.calc_info(self)
numpy.distutils.system_info._pkg_config_info.get_config_exe(self)
numpy.distutils.system_info._pkg_config_info.get_config_output(self,config_exe,option)
numpy.distutils.system_info.accelerate_info(system_info)
numpy.distutils.system_info.accelerate_info.calc_info(self)
numpy.distutils.system_info.accelerate_lapack_info(accelerate_info)
numpy.distutils.system_info.accelerate_lapack_info._calc_info(self)
numpy.distutils.system_info.agg2_info(system_info)
numpy.distutils.system_info.agg2_info.calc_info(self)
numpy.distutils.system_info.agg2_info.get_paths(self,section,key)
numpy.distutils.system_info.amd_info(system_info)
numpy.distutils.system_info.amd_info.calc_info(self)
numpy.distutils.system_info.armpl_info(system_info)
numpy.distutils.system_info.armpl_info.calc_info(self)
numpy.distutils.system_info.atlas_3_10_blas_info(atlas_3_10_info)
numpy.distutils.system_info.atlas_3_10_blas_info.calc_info(self)
numpy.distutils.system_info.atlas_3_10_blas_threads_info(atlas_3_10_blas_info)
numpy.distutils.system_info.atlas_3_10_info(atlas_info)
numpy.distutils.system_info.atlas_3_10_threads_info(atlas_3_10_info)
numpy.distutils.system_info.atlas_blas_info(atlas_info)
numpy.distutils.system_info.atlas_blas_info.calc_info(self)
numpy.distutils.system_info.atlas_blas_threads_info(atlas_blas_info)
numpy.distutils.system_info.atlas_info(system_info)
numpy.distutils.system_info.atlas_info.calc_info(self)
numpy.distutils.system_info.atlas_info.get_paths(self,section,key)
numpy.distutils.system_info.atlas_threads_info(atlas_info)
numpy.distutils.system_info.blas64__opt_info(blas_ilp64_opt_info)
numpy.distutils.system_info.blas_armpl_info(armpl_info)
numpy.distutils.system_info.blas_ilp64_opt_info(blas_opt_info,_ilp64_opt_info_mixin)
numpy.distutils.system_info.blas_ilp64_opt_info._calc_info(self,name)
numpy.distutils.system_info.blas_ilp64_plain_opt_info(blas_ilp64_opt_info)
numpy.distutils.system_info.blas_info(system_info)
numpy.distutils.system_info.blas_info.calc_info(self)
numpy.distutils.system_info.blas_info.get_cblas_libs(self,info)
numpy.distutils.system_info.blas_mkl_info(mkl_info)
numpy.distutils.system_info.blas_opt_info(system_info)
numpy.distutils.system_info.blas_opt_info._calc_info(self,name)
numpy.distutils.system_info.blas_opt_info._calc_info_accelerate(self)
numpy.distutils.system_info.blas_opt_info._calc_info_armpl(self)
numpy.distutils.system_info.blas_opt_info._calc_info_atlas(self)
numpy.distutils.system_info.blas_opt_info._calc_info_blas(self)
numpy.distutils.system_info.blas_opt_info._calc_info_blis(self)
numpy.distutils.system_info.blas_opt_info._calc_info_from_envvar(self)
numpy.distutils.system_info.blas_opt_info._calc_info_mkl(self)
numpy.distutils.system_info.blas_opt_info._calc_info_openblas(self)
numpy.distutils.system_info.blas_opt_info._calc_info_ssl2(self)
numpy.distutils.system_info.blas_opt_info.calc_info(self)
numpy.distutils.system_info.blas_src_info(system_info)
numpy.distutils.system_info.blas_src_info.calc_info(self)
numpy.distutils.system_info.blas_src_info.get_paths(self,section,key)
numpy.distutils.system_info.blas_ssl2_info(ssl2_info)
numpy.distutils.system_info.blis_info(blas_info)
numpy.distutils.system_info.blis_info.calc_info(self)
numpy.distutils.system_info.boost_python_info(system_info)
numpy.distutils.system_info.boost_python_info.calc_info(self)
numpy.distutils.system_info.boost_python_info.get_paths(self,section,key)
numpy.distutils.system_info.cblas_info(system_info)
numpy.distutils.system_info.combine_paths(*args,**kws)
numpy.distutils.system_info.customized_ccompiler()
numpy.distutils.system_info.dfftw_info(fftw_info)
numpy.distutils.system_info.dfftw_threads_info(fftw_info)
numpy.distutils.system_info.dict_append(d,**kws)
numpy.distutils.system_info.djbfft_info(system_info)
numpy.distutils.system_info.djbfft_info.calc_info(self)
numpy.distutils.system_info.djbfft_info.get_paths(self,section,key)
numpy.distutils.system_info.f2py_info(system_info)
numpy.distutils.system_info.f2py_info.calc_info(self)
numpy.distutils.system_info.fft_opt_info(system_info)
numpy.distutils.system_info.fft_opt_info.calc_info(self)
numpy.distutils.system_info.fftw2_info(fftw_info)
numpy.distutils.system_info.fftw3_armpl_info(fftw_info)
numpy.distutils.system_info.fftw3_info(fftw_info)
numpy.distutils.system_info.fftw_info(system_info)
numpy.distutils.system_info.fftw_info.calc_info(self)
numpy.distutils.system_info.fftw_info.calc_ver_info(self,ver_param)
numpy.distutils.system_info.fftw_threads_info(fftw_info)
numpy.distutils.system_info.flame_info(system_info)
numpy.distutils.system_info.flame_info.calc_info(self)
numpy.distutils.system_info.flame_info.check_embedded_lapack(self,info)
numpy.distutils.system_info.freetype2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_xlib_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.get_atlas_version(**config)
numpy.distutils.system_info.get_info(name,notfound_action=0)
numpy.distutils.system_info.get_standard_file(fname)
numpy.distutils.system_info.gtkp_2_info(_pkg_config_info)
numpy.distutils.system_info.gtkp_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.lapack64__opt_info(lapack_ilp64_opt_info)
numpy.distutils.system_info.lapack_armpl_info(armpl_info)
numpy.distutils.system_info.lapack_atlas_3_10_info(atlas_3_10_info)
numpy.distutils.system_info.lapack_atlas_3_10_threads_info(atlas_3_10_threads_info)
numpy.distutils.system_info.lapack_atlas_info(atlas_info)
numpy.distutils.system_info.lapack_atlas_threads_info(atlas_threads_info)
numpy.distutils.system_info.lapack_ilp64_opt_info(lapack_opt_info,_ilp64_opt_info_mixin)
numpy.distutils.system_info.lapack_ilp64_opt_info._calc_info(self,name)
numpy.distutils.system_info.lapack_ilp64_plain_opt_info(lapack_ilp64_opt_info)
numpy.distutils.system_info.lapack_info(system_info)
numpy.distutils.system_info.lapack_info.calc_info(self)
numpy.distutils.system_info.lapack_mkl_info(mkl_info)
numpy.distutils.system_info.lapack_opt_info(system_info)
numpy.distutils.system_info.lapack_opt_info._calc_info(self,name)
numpy.distutils.system_info.lapack_opt_info._calc_info_accelerate(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_armpl(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_atlas(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_flame(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_from_envvar(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_lapack(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_mkl(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_openblas(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_ssl2(self)
numpy.distutils.system_info.lapack_opt_info._get_info_blas(self)
numpy.distutils.system_info.lapack_opt_info._get_info_lapack(self)
numpy.distutils.system_info.lapack_opt_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info(system_info)
numpy.distutils.system_info.lapack_src_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info.get_paths(self,section,key)
numpy.distutils.system_info.lapack_ssl2_info(ssl2_info)
numpy.distutils.system_info.libpaths(paths,bits)
numpy.distutils.system_info.mkl_info(self)
numpy.distutils.system_info.mkl_info.__init__(self)
numpy.distutils.system_info.mkl_info.calc_info(self)
numpy.distutils.system_info.mkl_info.get_mkl_rootdir(self)
numpy.distutils.system_info.numarray_info(_numpy_info)
numpy.distutils.system_info.numerix_info(system_info)
numpy.distutils.system_info.numerix_info.calc_info(self)
numpy.distutils.system_info.numpy_info(_numpy_info)
numpy.distutils.system_info.openblas64__info(openblas_ilp64_info)
numpy.distutils.system_info.openblas64__lapack_info(openblas_ilp64_lapack_info,openblas64__info)
numpy.distutils.system_info.openblas_clapack_info(openblas_lapack_info)
numpy.distutils.system_info.openblas_ilp64_info(openblas_info)
numpy.distutils.system_info.openblas_ilp64_info._calc_info(self)
numpy.distutils.system_info.openblas_ilp64_lapack_info(openblas_ilp64_info)
numpy.distutils.system_info.openblas_ilp64_lapack_info._calc_info(self)
numpy.distutils.system_info.openblas_info(blas_info)
numpy.distutils.system_info.openblas_info._calc_info(self)
numpy.distutils.system_info.openblas_info.calc_info(self)
numpy.distutils.system_info.openblas_info.check_msvc_gfortran_libs(self,library_dirs,libraries)
numpy.distutils.system_info.openblas_info.check_symbols(self,info)
numpy.distutils.system_info.openblas_info.symbol_prefix(self)
numpy.distutils.system_info.openblas_info.symbol_suffix(self)
numpy.distutils.system_info.openblas_lapack_info(openblas_info)
numpy.distutils.system_info.parseCmdLine(argv=(None,))
numpy.distutils.system_info.sfftw_info(fftw_info)
numpy.distutils.system_info.sfftw_threads_info(fftw_info)
numpy.distutils.system_info.show_all(argv=None)
numpy.distutils.system_info.ssl2_info(self)
numpy.distutils.system_info.ssl2_info.__init__(self)
numpy.distutils.system_info.ssl2_info.calc_info(self)
numpy.distutils.system_info.ssl2_info.get_tcsds_rootdir(self)
numpy.distutils.system_info.system_info(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs)
numpy.distutils.system_info.system_info.__init__(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs)
numpy.distutils.system_info.system_info._check_libs(self,lib_dirs,libs,opt_libs,exts)
numpy.distutils.system_info.system_info._find_lib(self,lib_dir,lib,exts)
numpy.distutils.system_info.system_info._find_libs(self,lib_dirs,libs,exts)
numpy.distutils.system_info.system_info.calc_extra_info(self)
numpy.distutils.system_info.system_info.calc_libraries_info(self)
numpy.distutils.system_info.system_info.check_libs(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.check_libs2(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.combine_paths(self,*args)
numpy.distutils.system_info.system_info.get_include_dirs(self,key='include_dirs')
numpy.distutils.system_info.system_info.get_info(self,notfound_action=0)
numpy.distutils.system_info.system_info.get_lib_dirs(self,key='library_dirs')
numpy.distutils.system_info.system_info.get_libraries(self,key='libraries')
numpy.distutils.system_info.system_info.get_libs(self,key,default)
numpy.distutils.system_info.system_info.get_option_single(self,*options)
numpy.distutils.system_info.system_info.get_paths(self,section,key)
numpy.distutils.system_info.system_info.get_runtime_lib_dirs(self,key='runtime_library_dirs')
numpy.distutils.system_info.system_info.get_src_dirs(self,key='src_dirs')
numpy.distutils.system_info.system_info.has_info(self)
numpy.distutils.system_info.system_info.library_extensions(self)
numpy.distutils.system_info.system_info.parse_config_files(self)
numpy.distutils.system_info.system_info.set_info(self,**info)
numpy.distutils.system_info.umfpack_info(system_info)
numpy.distutils.system_info.umfpack_info.calc_info(self)
numpy.distutils.system_info.wx_info(_pkg_config_info)
numpy.distutils.system_info.x11_info(self)
numpy.distutils.system_info.x11_info.__init__(self)
numpy.distutils.system_info.x11_info.calc_info(self)
numpy.distutils.system_info.xft_info(_pkg_config_info)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/extension.py----------------------------------------
A:numpy.distutils.extension.self.swig_opts->self.swig_opts.split()
numpy.distutils.extension.Extension(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_c_compile_args=None,extra_cxx_compile_args=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.__init__(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_c_compile_args=None,extra_cxx_compile_args=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.has_cxx_sources(self)
numpy.distutils.extension.Extension.has_f2py_sources(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/pathccompiler.py----------------------------------------
numpy.distutils.pathccompiler.PathScaleCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.pathccompiler.PathScaleCCompiler.__init__(self,verbose=0,dry_run=0,force=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/msvc9compiler.py----------------------------------------
A:numpy.distutils.msvc9compiler.environ_lib->os.getenv('lib')
A:numpy.distutils.msvc9compiler.environ_include->os.getenv('include')
A:numpy.distutils.msvc9compiler.os.environ['lib']->_merge(environ_lib, os.environ['lib'])
A:numpy.distutils.msvc9compiler.os.environ['include']->_merge(environ_include, os.environ['include'])
numpy.distutils.msvc9compiler.MSVCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvc9compiler.MSVCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvc9compiler.MSVCCompiler.initialize(self,plat_name=None)
numpy.distutils.msvc9compiler.MSVCCompiler.manifest_setup_ldargs(self,output_filename,build_temp,ld_args)
numpy.distutils.msvc9compiler._merge(old,new)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/mingw32ccompiler.py----------------------------------------
A:numpy.distutils.mingw32ccompiler.msvcr->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler._START->re.compile('\\[Ordinal/Name Pointer\\] Table')
A:numpy.distutils.mingw32ccompiler._TABLE->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)')
A:numpy.distutils.mingw32ccompiler.msvcr_success->build_msvcr_library()
A:numpy.distutils.mingw32ccompiler.msvcr_dbg_success->build_msvcr_library(debug=True)
A:numpy.distutils.mingw32ccompiler.msvcr_version->msvc_runtime_version()
A:numpy.distutils.mingw32ccompiler.runtime_library->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.(base, ext)->os.path.splitext(os.path.normcase(src_name))
A:numpy.distutils.mingw32ccompiler.(drv, base)->os.path.splitdrive(base)
A:numpy.distutils.mingw32ccompiler.base->os.path.basename(config._gen_temp_sourcefile('yo', [], 'c'))
A:numpy.distutils.mingw32ccompiler.(major_version, minor_version)->tuple(sys.version_info[:2])
A:numpy.distutils.mingw32ccompiler.dll->os.path.join(folder, dllname)
A:numpy.distutils.mingw32ccompiler.st->subprocess.check_output(['objdump.exe', '-p', dll])
A:numpy.distutils.mingw32ccompiler.dump->dump_table(dll)
A:numpy.distutils.mingw32ccompiler.m->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)').match(dump[j].decode())
A:numpy.distutils.mingw32ccompiler.winsxs_path->os.path.join(os.environ.get('WINDIR', 'C:\\WINDOWS'), 'winsxs')
A:numpy.distutils.mingw32ccompiler.filepath->os.path.join(path, dll_name)
A:numpy.distutils.mingw32ccompiler.msvcr_ver->msvc_runtime_major()
A:numpy.distutils.mingw32ccompiler.msvcr_name->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.out_file->os.path.join(sys.prefix, 'libs', out_name)
A:numpy.distutils.mingw32ccompiler.dll_file->find_python_dll()
A:numpy.distutils.mingw32ccompiler.def_file->os.path.join(sys.prefix, 'libs', def_name)
A:numpy.distutils.mingw32ccompiler.retcode->subprocess.call(cmd)
A:numpy.distutils.mingw32ccompiler.arch->get_build_architecture()
A:numpy.distutils.mingw32ccompiler.(out_exists, out_file)->_check_for_import_lib()
A:numpy.distutils.mingw32ccompiler.lib_file->os.path.join(sys.prefix, 'libs', lib_name)
A:numpy.distutils.mingw32ccompiler.base_lib->os.path.join(sys.real_prefix, 'libs', lib_name)
A:numpy.distutils.mingw32ccompiler.nm_output->numpy.distutils.lib2def.getnm(lib2def.DEFAULT_NM + [lib_file], shell=False)
A:numpy.distutils.mingw32ccompiler.(dlist, flist)->numpy.distutils.lib2def.parse_nm(nm_output)
A:numpy.distutils.mingw32ccompiler.dll_name->find_python_dll()
A:numpy.distutils.mingw32ccompiler.status->subprocess.check_output(cmd)
A:numpy.distutils.mingw32ccompiler.crt_ver->getattr(msvcrt, 'CRT_ASSEMBLY_VERSION', None)
A:numpy.distutils.mingw32ccompiler.(maj, min)->re.match('(\\d+)\\.(\\d)', crt_ver).groups()
A:numpy.distutils.mingw32ccompiler.template->textwrap.dedent('        <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">\n          <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">\n            <security>\n              <requestedPrivileges>\n                <requestedExecutionLevel level="asInvoker" uiAccess="false"></requestedExecutionLevel>\n              </requestedPrivileges>\n            </security>\n          </trustInfo>\n          <dependency>\n            <dependentAssembly>\n              <assemblyIdentity type="win32" name="Microsoft.VC%(maj)d%(min)d.CRT" version="%(fullver)s" processorArchitecture="*" publicKeyToken="1fc8b3b9a1e18e3b"></assemblyIdentity>\n            </dependentAssembly>\n          </dependency>\n        </assembly>')
A:numpy.distutils.mingw32ccompiler.maj->msvc_runtime_major()
A:numpy.distutils.mingw32ccompiler.root->configtest_name(config)
A:numpy.distutils.mingw32ccompiler.msver->get_build_msvc_version()
A:numpy.distutils.mingw32ccompiler.(ma_str, mi_str)->str(msver).split('.')
A:numpy.distutils.mingw32ccompiler.manxml->msvc_manifest_xml(int(ma_str), int(mi_str))
numpy.distutils.mingw32ccompiler.Mingw32CCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.link(self,target_desc,objects,output_filename,output_dir,libraries,library_dirs,runtime_library_dirs,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.mingw32ccompiler._build_import_library_amd64()
numpy.distutils.mingw32ccompiler._build_import_library_x86()
numpy.distutils.mingw32ccompiler._check_for_import_lib()
numpy.distutils.mingw32ccompiler.build_import_library()
numpy.distutils.mingw32ccompiler.build_msvcr_library(debug=False)
numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked(msver)
numpy.distutils.mingw32ccompiler.configtest_name(config)
numpy.distutils.mingw32ccompiler.dump_table(dll)
numpy.distutils.mingw32ccompiler.find_dll(dll_name)
numpy.distutils.mingw32ccompiler.find_python_dll()
numpy.distutils.mingw32ccompiler.generate_def(dll,dfile)
numpy.distutils.mingw32ccompiler.generate_manifest(config)
numpy.distutils.mingw32ccompiler.get_msvcr_replacement()
numpy.distutils.mingw32ccompiler.manifest_name(config)
numpy.distutils.mingw32ccompiler.manifest_rc(name,type='dll')
numpy.distutils.mingw32ccompiler.msvc_manifest_xml(maj,min)
numpy.distutils.mingw32ccompiler.rc_name(config)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/ccompiler_opt.py----------------------------------------
A:numpy.distutils.ccompiler_opt.conf_check_path->os.path.join(os.path.dirname(os.path.realpath(__file__)), 'checks')
A:numpy.distutils.ccompiler_opt.conf_cc_flags->dict(gcc=dict(native='-march=native', opt='-O3', werror='-Werror'), clang=dict(native='-march=native', opt='-O3', werror='-Werror=switch -Werror'), icc=dict(native='-xHost', opt='-O3', werror='-Werror'), iccw=dict(native='/QxHost', opt='/O3', werror='/Werror'), msvc=dict(native=None, opt='/O2', werror='/WX'), fcc=dict(native='-mcpu=a64fx', opt=None, werror=None))
A:numpy.distutils.ccompiler_opt.conf_min_features->dict(x86='SSE SSE2', x64='SSE SSE2 SSE3', ppc64='', ppc64le='VSX VSX2', s390x='', armhf='', aarch64='NEON NEON_FP16 NEON_VFPV4 ASIMD')
A:numpy.distutils.ccompiler_opt.conf_features->dict(SSE=dict(interest=1, headers='xmmintrin.h', implies='SSE2'), SSE2=dict(interest=2, implies='SSE', headers='emmintrin.h'), SSE3=dict(interest=3, implies='SSE2', headers='pmmintrin.h'), SSSE3=dict(interest=4, implies='SSE3', headers='tmmintrin.h'), SSE41=dict(interest=5, implies='SSSE3', headers='smmintrin.h'), POPCNT=dict(interest=6, implies='SSE41', headers='popcntintrin.h'), SSE42=dict(interest=7, implies='POPCNT'), AVX=dict(interest=8, implies='SSE42', headers='immintrin.h', implies_detect=False), XOP=dict(interest=9, implies='AVX', headers='x86intrin.h'), FMA4=dict(interest=10, implies='AVX', headers='x86intrin.h'), F16C=dict(interest=11, implies='AVX'), FMA3=dict(interest=12, implies='F16C'), AVX2=dict(interest=13, implies='F16C'), AVX512F=dict(interest=20, implies='FMA3 AVX2', implies_detect=False, extra_checks='AVX512F_REDUCE'), AVX512CD=dict(interest=21, implies='AVX512F'), AVX512_KNL=dict(interest=40, implies='AVX512CD', group='AVX512ER AVX512PF', detect='AVX512_KNL', implies_detect=False), AVX512_KNM=dict(interest=41, implies='AVX512_KNL', group='AVX5124FMAPS AVX5124VNNIW AVX512VPOPCNTDQ', detect='AVX512_KNM', implies_detect=False), AVX512_SKX=dict(interest=42, implies='AVX512CD', group='AVX512VL AVX512BW AVX512DQ', detect='AVX512_SKX', implies_detect=False, extra_checks='AVX512BW_MASK AVX512DQ_MASK'), AVX512_CLX=dict(interest=43, implies='AVX512_SKX', group='AVX512VNNI', detect='AVX512_CLX'), AVX512_CNL=dict(interest=44, implies='AVX512_SKX', group='AVX512IFMA AVX512VBMI', detect='AVX512_CNL', implies_detect=False), AVX512_ICL=dict(interest=45, implies='AVX512_CLX AVX512_CNL', group='AVX512VBMI2 AVX512BITALG AVX512VPOPCNTDQ', detect='AVX512_ICL', implies_detect=False), AVX512_SPR=dict(interest=46, implies='AVX512_ICL', group='AVX512FP16', detect='AVX512_SPR', implies_detect=False), VSX=dict(interest=1, headers='altivec.h', extra_checks='VSX_ASM'), VSX2=dict(interest=2, implies='VSX', implies_detect=False), VSX3=dict(interest=3, implies='VSX2', implies_detect=False, extra_checks='VSX3_HALF_DOUBLE'), VSX4=dict(interest=4, implies='VSX3', implies_detect=False, extra_checks='VSX4_MMA'), VX=dict(interest=1, headers='vecintrin.h'), VXE=dict(interest=2, implies='VX', implies_detect=False), VXE2=dict(interest=3, implies='VXE', implies_detect=False), NEON=dict(interest=1, headers='arm_neon.h'), NEON_FP16=dict(interest=2, implies='NEON'), NEON_VFPV4=dict(interest=3, implies='NEON_FP16'), ASIMD=dict(interest=4, implies='NEON_FP16 NEON_VFPV4', implies_detect=False), ASIMDHP=dict(interest=5, implies='ASIMD'), ASIMDDP=dict(interest=6, implies='ASIMD'), ASIMDFHM=dict(interest=7, implies='ASIMDHP'))
A:numpy.distutils.ccompiler_opt.partial->dict(VX=dict(flags='-march=arch11 -mzvector'), VXE=dict(flags='-march=arch12', implies_detect=False), VXE2=dict(flags='-march=arch13', implies_detect=False))
A:numpy.distutils.ccompiler_opt.tmp->tempfile.mkdtemp()
A:numpy.distutils.ccompiler_opt.bk_spawn->getattr(cc, 'spawn', None)
A:numpy.distutils.ccompiler_opt.cc_type->getattr(self._ccompiler, 'compiler_type', '')
A:numpy.distutils.ccompiler_opt.platform->get_platform()
A:numpy.distutils.ccompiler_opt.cc_info->getattr(self._ccompiler, 'compiler', getattr(self._ccompiler, 'compiler_so', ''))
A:numpy.distutils.ccompiler_opt.compiler->str(cc_info)
A:numpy.distutils.ccompiler_opt.extra_args->os.environ.get('CFLAGS', '')
A:numpy.distutils.ccompiler_opt.out->' '.join([to_str(a) for a in (*args,)])
A:numpy.distutils.ccompiler_opt.old_path->os.getenv('path')
A:numpy.distutils.ccompiler_opt._dist_warn_regex->re.compile('.*(warning D9002|invalid argument for option).*')
A:numpy.distutils.ccompiler_opt.o->subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
A:numpy.distutils.ccompiler_opt._cache_ignore->re.compile('^(_|conf_)')
A:numpy.distutils.ccompiler_opt.self.cache_private->set()
A:numpy.distutils.ccompiler_opt.self._cache_hash->self.cache_hash(*factors, *self.conf_cache_factors)
A:numpy.distutils.ccompiler_opt.cache_mod->self.dist_load_module('cache', cache_path)
A:numpy.distutils.ccompiler_opt.other_cache->_share_cache.get(self._cache_hash)
A:numpy.distutils.ccompiler_opt.cdict->self.__dict__.copy()
A:numpy.distutils.ccompiler_opt.d->os.path.dirname(self._cache_path)
A:numpy.distutils.ccompiler_opt.repr_dict->pprint.pformat(cdict, compact=True)
A:numpy.distutils.ccompiler_opt.cache_key->str((cb.__name__, *args, *kwargs.keys(), *kwargs.values()))
A:numpy.distutils.ccompiler_opt.ccb->cb(self, *args, **kwargs)
A:numpy.distutils.ccompiler_opt.dist_info->self.dist_info()
A:numpy.distutils.ccompiler_opt.compiler_flags->self.conf_cc_flags.get(self.cc_name)
A:numpy.distutils.ccompiler_opt.flags->' '.join(self.feature_flags(tar))
A:numpy.distutils.ccompiler_opt.test_path->os.path.join(self.conf_check_path, 'extra_%s.c' % chk.lower())
A:numpy.distutils.ccompiler_opt.test->self.dist_test(test_path, force_flags + self.cc_flags['werror'], macros=macros)
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_mrgx->re.compile('^(-mcpu=|-march=|-x[A-Z0-9\\-])')
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_frgx->re.compile('^(?!(-mcpu=|-march=|-x[A-Z0-9\\-]|-m[a-z0-9\\-\\.]*.$))|(?:-mzvector)')
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_krgx->re.compile('^(-mfpu|-mtune)')
A:numpy.distutils.ccompiler_opt._cc_normalize_arch_ver->re.compile('[0-9.]')
A:numpy.distutils.ccompiler_opt.tokens->list(filter(None, re.split(self._parse_regex_target, tokens)))
A:numpy.distutils.ccompiler_opt.ver->float('0' + ''.join(re.findall(self._cc_normalize_arch_ver, tokens[0])))
A:numpy.distutils.ccompiler_opt.filtered->list(filter(self._cc_normalize_unix_frgx.search, lower_flags))
A:numpy.distutils.ccompiler_opt.(ver, arch, subflags)->ver_flags(cur_flag)
A:numpy.distutils.ccompiler_opt.(xver, _, xsubflags)->ver_flags(xflag)
A:numpy.distutils.ccompiler_opt.matched->set()
A:numpy.distutils.ccompiler_opt.match->re.match(self._cc_normalize_unix_krgx, f)
A:numpy.distutils.ccompiler_opt._cc_normalize_win_frgx->re.compile('^(?!(/arch\\:|/Qx\\:))')
A:numpy.distutils.ccompiler_opt._cc_normalize_win_mrgx->re.compile('^(/arch|/Qx:)')
A:numpy.distutils.ccompiler_opt.self.feature_supportedpfeatures->self.conf_features_partial()
A:numpy.distutils.ccompiler_opt.disabled->self.feature_supported.get(feature_name).get('disable')
A:numpy.distutils.ccompiler_opt.oval->self.feature_supported.get(feature_name).get(option)
A:numpy.distutils.ccompiler_opt.feature[option]->self.feature_supported.get(feature_name).get(option).split()
A:numpy.distutils.ccompiler_opt.self.feature_min->set()
A:numpy.distutils.ccompiler_opt.min_f->self.conf_min_features.get(self.cc_march, '')
A:numpy.distutils.ccompiler_opt.names->self.feature_sorted(self.feature_implies_c(names))
A:numpy.distutils.ccompiler_opt.supported_names->set()
A:numpy.distutils.ccompiler_opt.rank->max([self.feature_supported[f]['interest'] for f in k])
A:numpy.distutils.ccompiler_opt.implies->' '.join(self.feature_sorted(self.feature_implies(tar)))
A:numpy.distutils.ccompiler_opt.tied->self.feature_sorted(tied + [n])
A:numpy.distutils.ccompiler_opt.tnames->self.feature_sorted(tnames, reverse=True)
A:numpy.distutils.ccompiler_opt.f->os.path.dirname(self._cache_path).get('flags', [])
A:numpy.distutils.ccompiler_opt.force_flags->self.feature_flags(name)
A:numpy.distutils.ccompiler_opt.can->all([self.feature_can_autovec(t) for t in tar])
A:numpy.distutils.ccompiler_opt.extra_checks->os.path.dirname(self._cache_path).get('extra_checks', [])
A:numpy.distutils.ccompiler_opt.is_supported->self.dist_test(test_path, flags + self.cc_flags['werror'])
A:numpy.distutils.ccompiler_opt.feature->self.feature_supported.get(feature_name)
A:numpy.distutils.ccompiler_opt.extra_defs->self.feature_supported.get(feature_name).get('group', [])
A:numpy.distutils.ccompiler_opt.self._parse_policies->dict(KEEP_BASELINE=(None, self._parse_policy_not_keepbase, []), KEEP_SORT=(self._parse_policy_keepsort, self._parse_policy_not_keepsort, []), MAXOPT=(self._parse_policy_maxopt, None, []), WERROR=(self._parse_policy_werror, None, []), AUTOVEC=(self._parse_policy_autovec, None, ['MAXOPT']))
A:numpy.distutils.ccompiler_opt.cpu_baseline->self._parse_arg_features('cpu_baseline', cpu_baseline)
A:numpy.distutils.ccompiler_opt.baseline_names->self.cpu_baseline_names()
A:numpy.distutils.ccompiler_opt.self.parse_baseline_flags->self.feature_flags(baseline_names)
A:numpy.distutils.ccompiler_opt.self.parse_baseline_names->self.feature_sorted(self.feature_implies_c(baseline_names))
A:numpy.distutils.ccompiler_opt.cpu_dispatch_->self._parse_arg_features('cpu_dispatch', cpu_dispatch)
A:numpy.distutils.ccompiler_opt.conflict_baseline->self._parse_arg_features('cpu_dispatch', cpu_dispatch).difference(cpu_dispatch)
A:numpy.distutils.ccompiler_opt.self.parse_dispatch_names->self.feature_sorted(self.feature_names(cpu_dispatch))
A:numpy.distutils.ccompiler_opt.GROUP_NAME->group_name.upper()
A:numpy.distutils.ccompiler_opt.(has_baseline, features, extra_flags)->self._parse_target_tokens(tokens)
A:numpy.distutils.ccompiler_opt.start_pos->line.find(start_with)
A:numpy.distutils.ccompiler_opt.end_pos->line.find(end_with)
A:numpy.distutils.ccompiler_opt._parse_regex_arg->re.compile('\\s|,|([+-])')
A:numpy.distutils.ccompiler_opt.final_features->final_features.difference(features_to).difference(features_to)
A:numpy.distutils.ccompiler_opt.TOK->tok.upper()
A:numpy.distutils.ccompiler_opt.features_to->self.feature_supported.keys()
A:numpy.distutils.ccompiler_opt._parse_regex_target->re.compile('\\s|[*,/]|([()])')
A:numpy.distutils.ccompiler_opt.skipped->set()
A:numpy.distutils.ccompiler_opt.policies->set()
A:numpy.distutils.ccompiler_opt.(has_baseline, final_targets, extra_flags)->func(has_baseline, final_targets, extra_flags)
A:numpy.distutils.ccompiler_opt.multi_target->set()
A:numpy.distutils.ccompiler_opt.targets->tuple(targets)
A:numpy.distutils.ccompiler_opt.final_targets->self.feature_sorted(final_targets, reverse=True)
A:numpy.distutils.ccompiler_opt.(ghas_baseline, gtargets, gextra_flags)->self.parse_target_groups.get(token, (False, None, []))
A:numpy.distutils.ccompiler_opt.is_base->all([f in self.parse_baseline_names for f in tar])
A:numpy.distutils.ccompiler_opt.self.sources_status->getattr(self, 'sources_status', {})
A:numpy.distutils.ccompiler_opt.self.hit_cache->hasattr(self, 'hit_cache')
A:numpy.distutils.ccompiler_opt.baseline_flags->self.cpu_baseline_flags()
A:numpy.distutils.ccompiler_opt.include_dirs->kwargs.setdefault('include_dirs', [])
A:numpy.distutils.ccompiler_opt.output_dir->os.path.join(src_dir, output_dir)
A:numpy.distutils.ccompiler_opt.(has_baseline, targets, extra_flags)->self.parse_targets(src)
A:numpy.distutils.ccompiler_opt.nochange->self._generate_config(output_dir, src, targets, has_baseline)
A:numpy.distutils.ccompiler_opt.tar_src->self._wrap_target(output_dir, src, tar, nochange=nochange)
A:numpy.distutils.ccompiler_opt.dispatch_names->self.cpu_dispatch_names()
A:numpy.distutils.ccompiler_opt.baseline_len->len(baseline_names)
A:numpy.distutils.ccompiler_opt.dispatch_len->len(dispatch_names)
A:numpy.distutils.ccompiler_opt.header_dir->os.path.dirname(header_path)
A:numpy.distutils.ccompiler_opt.baseline_calls->' \\\n'.join(['\t%sWITH_CPU_EXPAND_(MACRO_TO_CALL(%s, __VA_ARGS__))' % (self.conf_c_prefix, f) for f in baseline_names])
A:numpy.distutils.ccompiler_opt.dispatch_calls->' \\\n'.join(dispatch_calls)
A:numpy.distutils.ccompiler_opt.detect->' '.join(self.feature_detect(tar))
A:numpy.distutils.ccompiler_opt.pad->max(max(secs_len), max(cols_len))
A:numpy.distutils.ccompiler_opt.ext_name->'.'.join(target)
A:numpy.distutils.ccompiler_opt.target_name->'__'.join([t for t in tar])
A:numpy.distutils.ccompiler_opt.wrap_path->'{0}.{2}{1}'.format(*os.path.splitext(wrap_path), ext_name.lower())
A:numpy.distutils.ccompiler_opt.features->self.feature_sorted(self.feature_implies_c(target))
A:numpy.distutils.ccompiler_opt.target_defs->'\n'.join(target_defs)
A:numpy.distutils.ccompiler_opt.config_path->os.path.join(output_dir, config_path)
A:numpy.distutils.ccompiler_opt.cache_hash->self.cache_hash(targets, has_baseline)
A:numpy.distutils.ccompiler_opt.last_hash->os.path.dirname(self._cache_path).get('flags', []).readline().split('cache_hash:')
A:numpy.distutils.ccompiler_opt.req_detect->'&&'.join(['CHK(%s)' % f for f in req_detect])
A:numpy.distutils.ccompiler_opt.opt->CCompilerOpt(compiler, **kwargs)
numpy.distutils.ccompiler_opt.CCompilerOpt(self,ccompiler,cpu_baseline='min',cpu_dispatch='max',cache_path=None)
numpy.distutils.ccompiler_opt.CCompilerOpt.__init__(self,ccompiler,cpu_baseline='min',cpu_dispatch='max',cache_path=None)
numpy.distutils.ccompiler_opt.CCompilerOpt._generate_config(self,output_dir,dispatch_src,targets,has_baseline=False)
numpy.distutils.ccompiler_opt.CCompilerOpt._wrap_target(self,output_dir,dispatch_src,target,nochange=False)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_baseline_flags(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_baseline_names(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_dispatch_names(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.generate_dispatch_header(self,header_path)
numpy.distutils.ccompiler_opt.CCompilerOpt.is_cached(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.report(self,full=False)
numpy.distutils.ccompiler_opt.CCompilerOpt.try_dispatch(self,sources,src_dir=None,ccompiler=None,**kwargs)
numpy.distutils.ccompiler_opt._CCompiler(self)
numpy.distutils.ccompiler_opt._CCompiler.__init__(self)
numpy.distutils.ccompiler_opt._CCompiler._cc_normalize_unix(self,flags)
numpy.distutils.ccompiler_opt._CCompiler._cc_normalize_win(self,flags)
numpy.distutils.ccompiler_opt._CCompiler.cc_normalize_flags(self,flags)
numpy.distutils.ccompiler_opt._CCompiler.cc_test_cexpr(self,cexpr,flags=[])
numpy.distutils.ccompiler_opt._CCompiler.cc_test_flags(self,flags)
numpy.distutils.ccompiler_opt._Cache(self,cache_path=None,*factors)
numpy.distutils.ccompiler_opt._Cache.__del__(self)
numpy.distutils.ccompiler_opt._Cache.__init__(self,cache_path=None,*factors)
numpy.distutils.ccompiler_opt._Cache.cache_flush(self)
numpy.distutils.ccompiler_opt._Cache.cache_hash(self,*factors)
numpy.distutils.ccompiler_opt._Cache.me(cb)
numpy.distutils.ccompiler_opt._Config(self)
numpy.distutils.ccompiler_opt._Config.__init__(self)
numpy.distutils.ccompiler_opt._Config.conf_features_partial(self)
numpy.distutils.ccompiler_opt._Distutils(self,ccompiler)
numpy.distutils.ccompiler_opt._Distutils.__init__(self,ccompiler)
numpy.distutils.ccompiler_opt._Distutils._dist_str(*args)
numpy.distutils.ccompiler_opt._Distutils._dist_test_spawn(cmd,display=None)
numpy.distutils.ccompiler_opt._Distutils._dist_test_spawn_paths(self,cmd,display=None)
numpy.distutils.ccompiler_opt._Distutils.dist_compile(self,sources,flags,ccompiler=None,**kwargs)
numpy.distutils.ccompiler_opt._Distutils.dist_error(*args)
numpy.distutils.ccompiler_opt._Distutils.dist_fatal(*args)
numpy.distutils.ccompiler_opt._Distutils.dist_info(self)
numpy.distutils.ccompiler_opt._Distutils.dist_load_module(name,path)
numpy.distutils.ccompiler_opt._Distutils.dist_log(*args,stderr=False)
numpy.distutils.ccompiler_opt._Distutils.dist_test(self,source,flags,macros=[])
numpy.distutils.ccompiler_opt._Feature(self)
numpy.distutils.ccompiler_opt._Feature.__init__(self)
numpy.distutils.ccompiler_opt._Feature.feature_ahead(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_c_preprocessor(self,feature_name,tabs=0)
numpy.distutils.ccompiler_opt._Feature.feature_can_autovec(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_detect(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_extra_checks(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_flags(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_get_til(self,names,keyisfalse)
numpy.distutils.ccompiler_opt._Feature.feature_implies(self,names,keep_origins=False)
numpy.distutils.ccompiler_opt._Feature.feature_implies_c(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_is_exist(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_is_supported(self,name,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_names(self,names=None,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_sorted(self,names,reverse=False)
numpy.distutils.ccompiler_opt._Feature.feature_test(self,name,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_untied(self,names)
numpy.distutils.ccompiler_opt._Parse(self,cpu_baseline,cpu_dispatch)
numpy.distutils.ccompiler_opt._Parse.__init__(self,cpu_baseline,cpu_dispatch)
numpy.distutils.ccompiler_opt._Parse._parse_arg_features(self,arg_name,req_features)
numpy.distutils.ccompiler_opt._Parse._parse_multi_target(self,targets)
numpy.distutils.ccompiler_opt._Parse._parse_policy_autovec(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_keepsort(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_maxopt(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_not_keepbase(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_not_keepsort(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_werror(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_target_tokens(self,tokens)
numpy.distutils.ccompiler_opt._Parse._parse_token_group(self,token,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_token_policy(self,token)
numpy.distutils.ccompiler_opt._Parse.parse_targets(self,source)
numpy.distutils.ccompiler_opt.new_ccompiler_opt(compiler,dispatch_hpath,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fujitsuccompiler.py----------------------------------------
numpy.distutils.fujitsuccompiler.FujitsuCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.fujitsuccompiler.FujitsuCCompiler.__init__(self,verbose=0,dry_run=0,force=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/msvccompiler.py----------------------------------------
A:numpy.distutils.msvccompiler.environ_lib->os.getenv('lib', '')
A:numpy.distutils.msvccompiler.environ_include->os.getenv('include', '')
A:numpy.distutils.msvccompiler.os.environ['lib']->_merge(environ_lib, os.environ['lib'])
A:numpy.distutils.msvccompiler.os.environ['include']->_merge(environ_include, os.environ['include'])
numpy.distutils.msvccompiler.MSVCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvccompiler.MSVCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvccompiler.MSVCCompiler.initialize(self)
numpy.distutils.msvccompiler._merge(old,new)
numpy.distutils.msvccompiler.lib_opts_if_msvc(build_cmd)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/intelccompiler.py----------------------------------------
A:numpy.distutils.intelccompiler.v->self.get_version()
A:numpy.distutils.intelccompiler.self.cc_exe->'icc -std=c99 -m64 -fPIC -fp-model strict -O3 -fomit-frame-pointer -{}'.format(mpopt)
A:numpy.distutils.intelccompiler.version_match->simple_version_match(start='Intel\\(R\\).*?64,')
A:numpy.distutils.intelccompiler.self.cc->self.find_exe('icl.exe')
A:numpy.distutils.intelccompiler.self.lib->self.find_exe('xilib')
A:numpy.distutils.intelccompiler.self.linker->self.find_exe('xilink')
numpy.distutils.intelccompiler.IntelCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelItaniumCCompiler(IntelCCompiler)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/_shell_utils.py----------------------------------------
A:numpy.distutils._shell_utils.CommandLineToArgvW.restype->ctypes.POINTER(ctypes.c_wchar_p)
A:numpy.distutils._shell_utils.nargs->ctypes.c_int()
A:numpy.distutils._shell_utils.lpargs->CommandLineToArgvW(cmd, ctypes.byref(nargs))
numpy.distutils._shell_utils.CommandLineParser
numpy.distutils._shell_utils.CommandLineParser.join(argv)
numpy.distutils._shell_utils.CommandLineParser.split(cmd)
numpy.distutils._shell_utils.PosixParser
numpy.distutils._shell_utils.PosixParser.join(argv)
numpy.distutils._shell_utils.PosixParser.split(cmd)
numpy.distutils._shell_utils.WindowsParser
numpy.distutils._shell_utils.WindowsParser.join(argv)
numpy.distutils._shell_utils.WindowsParser.split(cmd)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/cpuinfo.py----------------------------------------
A:numpy.distutils.cpuinfo.(status, output)->getstatusoutput(cmd)
A:numpy.distutils.cpuinfo.(ok, output)->getoutput('uname -m')
A:numpy.distutils.cpuinfo.info[key]->output.strip()
A:numpy.distutils.cpuinfo.attr->getattr(self, '_' + name)
A:numpy.distutils.cpuinfo.nbits->re.compile('(\\d+)bit').search(abits).group(1)
A:numpy.distutils.cpuinfo.info[0]['uname_m']->output.strip()
A:numpy.distutils.cpuinfo.fo->open('/proc/cpuinfo')
A:numpy.distutils.cpuinfo.info->command_info(arch='arch', mach='mach', uname_i='uname_i', isainfo_b='isainfo -b', isainfo_n='isainfo -n')
A:numpy.distutils.cpuinfo.info['sysctl_hw']->key_value_from_command('sysctl hw', sep='=')
A:numpy.distutils.cpuinfo.info['uname_X']->key_value_from_command('uname -X', sep='=')
A:numpy.distutils.cpuinfo.m->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line)
A:numpy.distutils.cpuinfo.info['processor']->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line).group('p')
A:numpy.distutils.cpuinfo.prgx->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE)
A:numpy.distutils.cpuinfo.chnd->winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.pkey)
A:numpy.distutils.cpuinfo.proc->winreg.EnumKey(chnd, pnum)
A:numpy.distutils.cpuinfo.phnd->winreg.OpenKey(chnd, proc)
A:numpy.distutils.cpuinfo.(name, value, vtpe)->winreg.EnumValue(phnd, pidx)
A:numpy.distutils.cpuinfo.srch->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE).search(value)
A:numpy.distutils.cpuinfo.info[-1]['Family']->int(srch.group('FML'))
A:numpy.distutils.cpuinfo.info[-1]['Model']->int(srch.group('MDL'))
A:numpy.distutils.cpuinfo.info[-1]['Stepping']->int(srch.group('STP'))
A:numpy.distutils.cpuinfo.cpu->cpuinfo()
numpy.distutils.cpuinfo.CPUInfoBase
numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits(self)
numpy.distutils.cpuinfo.CPUInfoBase.__getattr__(self,name)
numpy.distutils.cpuinfo.CPUInfoBase._getNCPUs(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_32bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_64bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._try_call(self,func)
numpy.distutils.cpuinfo.DarwinCPUInfo(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__init__(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.DarwinCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_Power_Macintosh(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc403(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc505(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc601(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc602(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc620(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc630(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc740(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7400(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7450(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc750(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc801(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc821(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc823(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc860(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo.__init__(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP19(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP20(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP21(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_4k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP24(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP25(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP26(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP27(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP28(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP30(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_10k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r12000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r2000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3900(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4100(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4300(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4400(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4600(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4650(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r6000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r8000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_rorion(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.get_ip(self)
numpy.distutils.cpuinfo.LinuxCPUInfo(self)
numpy.distutils.cpuinfo.LinuxCPUInfo.__init__(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_f00f_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_fdiv_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_ssse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Alpha(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Athlon64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonHX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK7(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonMP(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Celeron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV4(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV5(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Hammer(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Itanium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Nocona(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Opteron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PCA56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Prescott(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i486(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i586(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i686(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.SunOSCPUInfo(self)
numpy.distutils.cpuinfo.SunOSCPUInfo.__init__(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_SUNW(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv7(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv8(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparc(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcstation5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sun4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sunfire(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra1(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra2(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra250(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra30(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5_10(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra60(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra80(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice10k(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.Win32CPUInfo(self)
numpy.distutils.cpuinfo.Win32CPUInfo.__init__(self)
numpy.distutils.cpuinfo.Win32CPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK5(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_3(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK7(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am5x86(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i386(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i586(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i686(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.Win32CPUInfo._not_impl(self)
numpy.distutils.cpuinfo.command_by_line(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.command_info(successful_status=(0,),stacklevel=1,**kw)
numpy.distutils.cpuinfo.getoutput(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.key_value_from_command(cmd,sep,successful_status=(0,),stacklevel=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/conv_template.py----------------------------------------
A:numpy.distutils.conv_template.start->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopbeg, ind)
A:numpy.distutils.conv_template.start2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', start2)
A:numpy.distutils.conv_template.fini1->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopend, start2)
A:numpy.distutils.conv_template.fini2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', fini1)
A:numpy.distutils.conv_template.torep->obj.group(1)
A:numpy.distutils.conv_template.numrep->obj.group(2)
A:numpy.distutils.conv_template.parenrep->re.compile('\\(([^)]*)\\)\\*(\\d+)')
A:numpy.distutils.conv_template.plainrep->re.compile('([^*]+)\\*(\\d+)')
A:numpy.distutils.conv_template.astr->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')])
A:numpy.distutils.conv_template.stripast->re.compile('\\n\\s*\\*?')
A:numpy.distutils.conv_template.named_re->re.compile('#\\s*(\\w*)\\s*=([^#]*)#')
A:numpy.distutils.conv_template.exclude_vars_re->re.compile('(\\w*)=(\\w*)')
A:numpy.distutils.conv_template.exclude_re->re.compile(':exclude:')
A:numpy.distutils.conv_template.loophead->re.compile('\\n\\s*\\*?').sub('', loophead)
A:numpy.distutils.conv_template.reps->re.compile('#\\s*(\\w*)\\s*=([^#]*)#').findall(loophead)
A:numpy.distutils.conv_template.vals->parse_values(rep[1])
A:numpy.distutils.conv_template.size->len(vals)
A:numpy.distutils.conv_template.span->obj.span()
A:numpy.distutils.conv_template.endline->re.compile('\\n\\s*\\*?').sub('', loophead).find('\n', span[1])
A:numpy.distutils.conv_template.ex_names->re.compile('(\\w*)=(\\w*)').findall(substr)
A:numpy.distutils.conv_template.replace_re->re.compile('@(\\w+)@')
A:numpy.distutils.conv_template.name->match.group(1)
A:numpy.distutils.conv_template.struct->parse_structure(astr, level)
A:numpy.distutils.conv_template.envlist->parse_loop_header(head)
A:numpy.distutils.conv_template.newcode->parse_string(text, newenv, newlevel, newline)
A:numpy.distutils.conv_template.include_src_re->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I)
A:numpy.distutils.conv_template.d->os.path.dirname(source)
A:numpy.distutils.conv_template.m->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I).match(line)
A:numpy.distutils.conv_template.fn->os.path.join(d, fn)
A:numpy.distutils.conv_template.lines->resolve_includes(source)
A:numpy.distutils.conv_template.sourcefile->os.path.normcase(source).replace('\\', '\\\\')
A:numpy.distutils.conv_template.code->process_str(''.join(lines))
A:numpy.distutils.conv_template.allkeys->list(adict.keys())
A:numpy.distutils.conv_template.newkey->''.join([x[:n] for x in allkeys])
A:numpy.distutils.conv_template.fid->open(file, 'r')
A:numpy.distutils.conv_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.conv_template.outfile->open(newname, 'w')
A:numpy.distutils.conv_template.allstr->open(file, 'r').read()
A:numpy.distutils.conv_template.writestr->process_str(allstr)
numpy.distutils.conv_template.main()
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr,env,level,line)
numpy.distutils.conv_template.parse_structure(astr,level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/armccompiler.py----------------------------------------
numpy.distutils.armccompiler.ArmCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.armccompiler.ArmCCompiler.__init__(self,verbose=0,dry_run=0,force=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/unixccompiler.py----------------------------------------
A:numpy.distutils.unixccompiler.opt->shlex.join(shlex.split(os.environ['OPT']))
A:numpy.distutils.unixccompiler.gcv_opt->shlex.join(shlex.split(get_config_vars('OPT')[0]))
A:numpy.distutils.unixccompiler.ccomp_s->ccomp_s.replace(gcv_opt, opt).replace(gcv_opt, opt)
A:numpy.distutils.unixccompiler.self.compiler_so->shlex.split(ccomp_s)
A:numpy.distutils.unixccompiler.llink_s->shlex.join(self.linker_so)
A:numpy.distutils.unixccompiler.msg->str(e)
A:numpy.distutils.unixccompiler.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.unixccompiler.output_filename->self.library_filename(output_libname, output_dir=output_dir)
numpy.distutils.unixccompiler.UnixCCompiler__compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib(self,objects,output_libname,output_dir=None,debug=0,target_lang=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/log.py----------------------------------------
numpy.distutils.log.Log(old_Log)
numpy.distutils.log.Log._log(self,level,msg,args)
numpy.distutils.log.Log.good(self,msg,*args)
numpy.distutils.log._fix_args(args,flag=1)
numpy.distutils.log.debug(msg,*a,**kw)
numpy.distutils.log.error(msg,*a,**kw)
numpy.distutils.log.get_threshold()
numpy.distutils.log.info(msg,*a,**kw)
numpy.distutils.log.set_threshold(level,force=False)
numpy.distutils.log.set_verbosity(v,force=False)
numpy.distutils.log.warn(msg,*a,**kw)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/hpux.py----------------------------------------
numpy.distutils.fcompiler.hpux.HPUXFCompiler(FCompiler)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_libraries(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_version(self,force=0,ok_status=[256,0,1])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/arm.py----------------------------------------
A:numpy.distutils.fcompiler.arm.opt->numpy.distutils.fcompiler.FCompiler.get_library_dirs(self)
A:numpy.distutils.fcompiler.arm.flang_dir->dirname(self.executables['compiler_f77'][0])
numpy.distutils.fcompiler.arm.ArmFlangCompiler(FCompiler)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_flags(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_flags_free(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_libraries(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.arm.ArmFlangCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/__init__.py----------------------------------------
A:numpy.distutils.fcompiler.__init__.distutils_vars->EnvironmentConfig(distutils_section='config_fc', noopt=(None, None, 'noopt', str2bool, False), noarch=(None, None, 'noarch', str2bool, False), debug=(None, None, 'debug', str2bool, False), verbose=(None, None, 'verbose', str2bool, False))
A:numpy.distutils.fcompiler.__init__.command_vars->EnvironmentConfig(distutils_section='config_fc', compiler_f77=('exe.compiler_f77', 'F77', 'f77exec', None, False), compiler_f90=('exe.compiler_f90', 'F90', 'f90exec', None, False), compiler_fix=('exe.compiler_fix', 'F90', 'f90exec', None, False), version_cmd=('exe.version_cmd', None, None, None, False), linker_so=('exe.linker_so', 'LDSHARED', 'ldshared', None, False), linker_exe=('exe.linker_exe', 'LD', 'ld', None, False), archiver=(None, 'AR', 'ar', None, False), ranlib=(None, 'RANLIB', 'ranlib', None, False))
A:numpy.distutils.fcompiler.__init__.flag_vars->EnvironmentConfig(distutils_section='config_fc', f77=('flags.f77', 'F77FLAGS', 'f77flags', flaglist, True), f90=('flags.f90', 'F90FLAGS', 'f90flags', flaglist, True), free=('flags.free', 'FREEFLAGS', 'freeflags', flaglist, True), fix=('flags.fix', None, None, flaglist, False), opt=('flags.opt', 'FOPT', 'opt', flaglist, True), opt_f77=('flags.opt_f77', None, None, flaglist, False), opt_f90=('flags.opt_f90', None, None, flaglist, False), arch=('flags.arch', 'FARCH', 'arch', flaglist, False), arch_f77=('flags.arch_f77', None, None, flaglist, False), arch_f90=('flags.arch_f90', None, None, flaglist, False), debug=('flags.debug', 'FDEBUG', 'fdebug', flaglist, True), debug_f77=('flags.debug_f77', None, None, flaglist, False), debug_f90=('flags.debug_f90', None, None, flaglist, False), flags=('self.get_flags', 'FFLAGS', 'fflags', flaglist, True), linker_so=('flags.linker_so', 'LDFLAGS', 'ldflags', flaglist, True), linker_exe=('flags.linker_exe', 'LDFLAGS', 'ldflags', flaglist, True), ar=('flags.ar', 'ARFLAGS', 'arflags', flaglist, True))
A:numpy.distutils.fcompiler.__init__.shared_lib_extension->get_shared_lib_extension()
A:numpy.distutils.fcompiler.__init__.self.distutils_vars->self.distutils_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.command_vars->self.command_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.flag_vars->self.flag_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.executables->self.executables.copy()
A:numpy.distutils.fcompiler.__init__.obj->self.__new__(self.__class__)
A:numpy.distutils.fcompiler.__init__.obj.distutils_vars->self.__new__(self.__class__).distutils_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.command_vars->self.__new__(self.__class__).command_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.flag_vars->self.__new__(self.__class__).flag_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.executables->self.__new__(self.__class__).executables.copy()
A:numpy.distutils.fcompiler.__init__.version_cmd->_command_property('version_cmd')
A:numpy.distutils.fcompiler.__init__.compiler_f77->_command_property('compiler_f77')
A:numpy.distutils.fcompiler.__init__.compiler_f90->_command_property('compiler_f90')
A:numpy.distutils.fcompiler.__init__.compiler_fix->_command_property('compiler_fix')
A:numpy.distutils.fcompiler.__init__.linker_so->_command_property('linker_so')
A:numpy.distutils.fcompiler.__init__.linker_exe->_command_property('linker_exe')
A:numpy.distutils.fcompiler.__init__.archiver->_command_property('archiver')
A:numpy.distutils.fcompiler.__init__.ranlib->_command_property('ranlib')
A:numpy.distutils.fcompiler.__init__.value->split_quoted(value)
A:numpy.distutils.fcompiler.__init__.fc_exe->cached_find_executable(exe)
A:numpy.distutils.fcompiler.__init__.cmd->self.executables.get(key, None)
A:numpy.distutils.fcompiler.__init__.exe_from_environ->getattr(self.command_vars, exe_key)
A:numpy.distutils.fcompiler.__init__.seen->set()
A:numpy.distutils.fcompiler.__init__.f90->numpy.distutils._shell_utils.NativeParser.split(f90)
A:numpy.distutils.fcompiler.__init__.f77->numpy.distutils._shell_utils.NativeParser.split(f77)
A:numpy.distutils.fcompiler.__init__.version->numpy.distutils.ccompiler.CCompiler.get_version(self, force=force, ok_status=ok_status)
A:numpy.distutils.fcompiler.__init__.noopt->self.distutils_vars.get('noopt', False)
A:numpy.distutils.fcompiler.__init__.noarch->self.distutils_vars.get('noarch', noopt)
A:numpy.distutils.fcompiler.__init__.debug->self.distutils_vars.get('debug', False)
A:numpy.distutils.fcompiler.__init__.fix->numpy.distutils._shell_utils.NativeParser.split(fix)
A:numpy.distutils.fcompiler.__init__.this_get->getattr(self, 'get_flags_' + tag)
A:numpy.distutils.fcompiler.__init__.python_lib->get_python_lib(standard_lib=1)
A:numpy.distutils.fcompiler.__init__.ld_so_aix->os.path.join(python_config, 'ld_so_aix')
A:numpy.distutils.fcompiler.__init__.python_exp->os.path.join(python_config, 'python.exp')
A:numpy.distutils.fcompiler.__init__.python_config->get_config_var('LIBPL')
A:numpy.distutils.fcompiler.__init__.v->new_fcompiler(compiler=compiler, verbose=dist.verbose).get_version()
A:numpy.distutils.fcompiler.__init__.pretty_printer->FancyGetopt(compilers_ni)
A:numpy.distutils.fcompiler.__init__.src_flags->get_f77flags(src)
A:numpy.distutils.fcompiler.__init__.extra_flags->get_f77flags(src).get(self.compiler_type, [])
A:numpy.distutils.fcompiler.__init__.msg->str(e)
A:numpy.distutils.fcompiler.__init__.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.fcompiler.__init__.(libraries, library_dirs, runtime_library_dirs)->self._fix_lib_args(libraries, library_dirs, runtime_library_dirs)
A:numpy.distutils.fcompiler.__init__.lib_opts->gen_lib_options(self, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.fcompiler.__init__.output_filename->os.path.join(output_dir, output_filename)
A:numpy.distutils.fcompiler.__init__.hook->getattr(self, 'get_flags_' + hook_name)
A:numpy.distutils.fcompiler.__init__.pys->os.path.join(os.path.dirname(__file__), '*.py')
A:numpy.distutils.fcompiler.__init__.(module_name, ext)->os.path.splitext(os.path.basename(fname))
A:numpy.distutils.fcompiler.__init__.klass->getattr(module, cname)
A:numpy.distutils.fcompiler.__init__.dist->Distribution()
A:numpy.distutils.fcompiler.__init__.c->new_fcompiler(compiler=compiler, verbose=dist.verbose)
A:numpy.distutils.fcompiler.__init__.matching_compiler_types->available_fcompilers_for_platform(osname, platform)
A:numpy.distutils.fcompiler.__init__.compiler_type->_find_existing_fcompiler(matching_compiler_types, osname=osname, platform=platform, requiref90=requiref90, c_compiler=c_compiler)
A:numpy.distutils.fcompiler.__init__.failed_fcompilers->set()
A:numpy.distutils.fcompiler.__init__.compiler->klass(verbose=verbose, dry_run=dry_run, force=force)
A:numpy.distutils.fcompiler.__init__.dist.script_name->os.path.basename(sys.argv[0])
A:numpy.distutils.fcompiler.__init__.platform_compilers->available_fcompilers_for_platform()
A:numpy.distutils.fcompiler.__init__.compilers_ni->list(set(fcompiler_class.keys()) - set(platform_compilers))
A:numpy.distutils.fcompiler.__init__.(fo, name)->make_temp_file(suffix='.f')
A:numpy.distutils.fcompiler.__init__.line->f.readline()
A:numpy.distutils.fcompiler.__init__._f77flags_re->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I)
A:numpy.distutils.fcompiler.__init__.m->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line)
A:numpy.distutils.fcompiler.__init__.fcname->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fcname').strip()
A:numpy.distutils.fcompiler.__init__.fflags->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fflags').strip()
A:numpy.distutils.fcompiler.__init__.flags[fcname]->split_quoted(fflags)
numpy.distutils.fcompiler.__init__.CompilerNotFound(Exception)
numpy.distutils.fcompiler.__init__.FCompiler(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.__copy__(self)
numpy.distutils.fcompiler.__init__.FCompiler.__init__(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler._command_property(key)
numpy.distutils.fcompiler.__init__.FCompiler._compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.fcompiler.__init__.FCompiler._environment_hook(self,name,hook_name)
numpy.distutils.fcompiler.__init__.FCompiler._get_command_flags(self,key)
numpy.distutils.fcompiler.__init__.FCompiler.can_ccompiler_link(self,ccompiler)
numpy.distutils.fcompiler.__init__.FCompiler.copy(self)
numpy.distutils.fcompiler.__init__.FCompiler.customize(self,dist=None)
numpy.distutils.fcompiler.__init__.FCompiler.dump_properties(self)
numpy.distutils.fcompiler.__init__.FCompiler.find_executables(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_ar(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_free(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_exe(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_libraries(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_version(self,force=False,ok_status=[0])
numpy.distutils.fcompiler.__init__.FCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.__init__.FCompiler.library_option(self,lib)
numpy.distutils.fcompiler.__init__.FCompiler.link(self,target_desc,objects,output_filename,output_dir=None,libraries=None,library_dirs=None,runtime_library_dirs=None,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.fcompiler.__init__.FCompiler.module_options(self,module_dirs,module_build_dir)
numpy.distutils.fcompiler.__init__.FCompiler.set_command(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.set_commands(self,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.set_executable(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.update_executables(self)
numpy.distutils.fcompiler.__init__.FCompiler.wrap_unlinkable_objects(self,objects,output_dir,extra_dll_dir)
numpy.distutils.fcompiler.__init__._find_existing_fcompiler(compiler_types,osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.available_fcompilers_for_platform(osname=None,platform=None)
numpy.distutils.fcompiler.__init__.dummy_fortran_file()
numpy.distutils.fcompiler.__init__.flaglist(s)
numpy.distutils.fcompiler.__init__.get_default_fcompiler(osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.get_f77flags(src)
numpy.distutils.fcompiler.__init__.has_f90_header(src)
numpy.distutils.fcompiler.__init__.is_free_format(file)
numpy.distutils.fcompiler.__init__.is_sequence_of_strings(seq)
numpy.distutils.fcompiler.__init__.load_all_fcompiler_classes()
numpy.distutils.fcompiler.__init__.new_fcompiler(plat=None,compiler=None,verbose=0,dry_run=0,force=0,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.show_fcompilers(dist=None)
numpy.distutils.fcompiler.__init__.str2bool(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/sun.py----------------------------------------
A:numpy.distutils.fcompiler.sun.version_match->simple_version_match(start='f9[05]: (Sun|Forte|WorkShop).*Fortran 95')
numpy.distutils.fcompiler.sun.SunFCompiler(FCompiler)
numpy.distutils.fcompiler.sun.SunFCompiler.get_arch(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_libraries(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_opt(self)
numpy.distutils.fcompiler.sun.SunFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/compaq.py----------------------------------------
A:numpy.distutils.fcompiler.compaq.m->MSVCCompiler()
numpy.distutils.fcompiler.compaq.CompaqFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_opt(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/nag.py----------------------------------------
A:numpy.distutils.fcompiler.nag.m->re.search(self.version_pattern, version_string)
A:numpy.distutils.fcompiler.nag.version->self.get_version()
A:numpy.distutils.fcompiler.nag.compiler->customized_fcompiler(compiler='nagfor')
numpy.distutils.fcompiler.nag.BaseNAGFCompiler(FCompiler)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.nag.NAGFCompiler(BaseNAGFCompiler)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nag.NAGFORCompiler(BaseNAGFCompiler)
numpy.distutils.fcompiler.nag.NAGFORCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nag.NAGFORCompiler.get_flags_linker_so(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/pg.py----------------------------------------
A:numpy.distutils.fcompiler.pg.opt->numpy.distutils.fcompiler.FCompiler.get_library_dirs(self)
A:numpy.distutils.fcompiler.pg.flang_dir->dirname(self.executables['compiler_f77'][0])
numpy.distutils.fcompiler.pg.PGroupFCompiler(FCompiler)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler(FCompiler)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_free(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_libraries(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/lahey.py----------------------------------------
A:numpy.distutils.fcompiler.lahey.d->os.environ.get('LAHEY')
numpy.distutils.fcompiler.lahey.LaheyFCompiler(FCompiler)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_libraries(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_library_dirs(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/ibm.py----------------------------------------
A:numpy.distutils.fcompiler.ibm.version->self.get_version(ok_status=[0, 40])
A:numpy.distutils.fcompiler.ibm.lslpp->find_executable('lslpp')
A:numpy.distutils.fcompiler.ibm.xlf->find_executable('xlf')
A:numpy.distutils.fcompiler.ibm.o->subprocess.check_output([lslpp, '-Lc', 'xlfcmp'])
A:numpy.distutils.fcompiler.ibm.m->crt1_match(line)
A:numpy.distutils.fcompiler.ibm.l->sorted(os.listdir(xlf_dir))
A:numpy.distutils.fcompiler.ibm.self.versionversion->LooseVersion(l[0])
A:numpy.distutils.fcompiler.ibm.(fo, new_cfg)->make_temp_file(suffix='_xlf.cfg')
numpy.distutils.fcompiler.ibm.IBMFCompiler(FCompiler)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version(self,*args,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/fujitsu.py----------------------------------------
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler(FCompiler)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_libraries(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/none.py----------------------------------------
numpy.distutils.fcompiler.none.NoneFCompiler(FCompiler)
numpy.distutils.fcompiler.none.NoneFCompiler.find_executables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/gnu.py----------------------------------------
A:numpy.distutils.fcompiler.gnu.TARGET_R->re.compile('Target: ([a-zA-Z0-9_\\-]*)')
A:numpy.distutils.fcompiler.gnu.version_string->version_string[version_string.find('\n') + 1:].strip()
A:numpy.distutils.fcompiler.gnu.m->re.compile('Target: ([a-zA-Z0-9_\\-]*)').search(output)
A:numpy.distutils.fcompiler.gnu.v->self.gnu_version_match(version_string)
A:numpy.distutils.fcompiler.gnu.target->self.get_target()
A:numpy.distutils.fcompiler.gnu.os.environ['MACOSX_DEPLOYMENT_TARGET']->str(target)
A:numpy.distutils.fcompiler.gnu.output->filepath_from_subprocess_output(output)
A:numpy.distutils.fcompiler.gnu.libgfortran_dir->os.path.dirname(output)
A:numpy.distutils.fcompiler.gnu.d->os.path.dirname(filename)
A:numpy.distutils.fcompiler.gnu.path->os.path.join(root, 'lib')
A:numpy.distutils.fcompiler.gnu.root->os.path.join(d, *(os.pardir,) * 4)
A:numpy.distutils.fcompiler.gnu.d2->os.path.abspath(os.path.join(root, 'lib'))
A:numpy.distutils.fcompiler.gnu.lib_gfortran_dir->self.get_libgfortran_dir()
A:numpy.distutils.fcompiler.gnu.arch_re->re.compile('-arch\\s+(\\w+)')
A:numpy.distutils.fcompiler.gnu.c_archs->self._c_arch_flags()
A:numpy.distutils.fcompiler.gnu.flags->GnuFCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.gnu.arch_flags->self._universal_flags(self.linker_so)
A:numpy.distutils.fcompiler.gnu.opt->GnuFCompiler.get_libraries(self)
A:numpy.distutils.fcompiler.gnu.mingwdir->os.path.normpath(path)
A:numpy.distutils.fcompiler.gnu.i->GnuFCompiler.get_libraries(self).index('gcc')
A:numpy.distutils.fcompiler.gnu.p->Popen(newcmd, stderr=STDOUT, stdout=PIPE, cwd=d)
A:numpy.distutils.fcompiler.gnu.(stdout, stderr)->Popen(newcmd, stderr=STDOUT, stdout=PIPE, cwd=d).communicate()
A:numpy.distutils.fcompiler.gnu.h->hashlib.sha1()
A:numpy.distutils.fcompiler.gnu.block->f.read(131072)
A:numpy.distutils.fcompiler.gnu.text->text.decode('ascii').decode('ascii')
A:numpy.distutils.fcompiler.gnu.object_hash->self._hash_files(list(objects) + list(chained_dlls))
A:numpy.distutils.fcompiler.gnu.dll_path->os.path.join(extra_dll_dir, dll_name)
A:numpy.distutils.fcompiler.gnu.def_path->os.path.join(output_dir, def_name)
A:numpy.distutils.fcompiler.gnu.lib_path->os.path.join(output_dir, lib_name)
A:numpy.distutils.fcompiler.gnu.(lib, dll)->self._link_wrapper_lib(plain_objects, output_dir, extra_dll_dir, chained_dlls=chained_dlls, is_archive=False)
A:numpy.distutils.fcompiler.gnu.(fid, filename)->tempfile.mkstemp(suffix='.f')
numpy.distutils.fcompiler.gnu.Gnu95FCompiler(GnuFCompiler)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._hash_files(self,filenames)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._link_wrapper_lib(self,objects,output_dir,extra_dll_dir,chained_dlls,is_archive)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags(self,cmd)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.can_ccompiler_link(self,compiler)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.wrap_unlinkable_objects(self,objects,output_dir,extra_dll_dir)
numpy.distutils.fcompiler.gnu.GnuFCompiler(FCompiler)
numpy.distutils.fcompiler.gnu.GnuFCompiler._c_arch_flags(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match(self,version_string)
numpy.distutils.fcompiler.gnu.GnuFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu._can_target(cmd,arch)
numpy.distutils.fcompiler.gnu.is_win64()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/nv.py----------------------------------------
numpy.distutils.fcompiler.nv.NVHPCFCompiler(FCompiler)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/absoft.py----------------------------------------
A:numpy.distutils.fcompiler.absoft.f->cyg2win32(dummy_fortran_file())
A:numpy.distutils.fcompiler.absoft.opt->numpy.distutils.fcompiler.FCompiler.get_flags_fix(self)
A:numpy.distutils.fcompiler.absoft.d->os.environ.get('ABSOFT')
A:numpy.distutils.fcompiler.absoft.v->self.get_version()
numpy.distutils.fcompiler.absoft.AbsoftFCompiler(FCompiler)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_libraries(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_option(self,lib)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.update_executables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/mips.py----------------------------------------
A:numpy.distutils.fcompiler.mips.r->self.get_flags_arch_f77()
numpy.distutils.fcompiler.mips.MIPSFCompiler(FCompiler)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f77(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f90(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_opt(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/vast.py----------------------------------------
A:numpy.distutils.fcompiler.vast.(d, b)->os.path.split(f90)
A:numpy.distutils.fcompiler.vast.vf90->os.path.join(d, 'v' + b)
A:numpy.distutils.fcompiler.vast.vast_version->self.get_version()
A:numpy.distutils.fcompiler.vast.gnu->GnuFCompiler()
A:numpy.distutils.fcompiler.vast.self.version->GnuFCompiler().get_version()
A:numpy.distutils.fcompiler.vast.opt->numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.vast.VastFCompiler(GnuFCompiler)
numpy.distutils.fcompiler.vast.VastFCompiler.find_executables(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_version_cmd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/pathf95.py----------------------------------------
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler(FCompiler)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_opt(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/environment.py----------------------------------------
A:numpy.distutils.fcompiler.environment.v->os.environ.get(envvar, None)
A:numpy.distutils.fcompiler.environment.var->convert(confvar_contents)
A:numpy.distutils.fcompiler.environment.envvar_contents->convert(envvar_contents)
A:numpy.distutils.fcompiler.environment.ec->self.__class__(distutils_section=self._distutils_section, **self._conf_keys)
A:numpy.distutils.fcompiler.environment.self._conf->dist.get_option_dict(self._distutils_section)
numpy.distutils.fcompiler.EnvironmentConfig(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.EnvironmentConfig.__getattr__(self,name)
numpy.distutils.fcompiler.EnvironmentConfig._get_var(self,name,conf_desc)
numpy.distutils.fcompiler.EnvironmentConfig.clone(self,hook_handler)
numpy.distutils.fcompiler.EnvironmentConfig.dump_variable(self,name)
numpy.distutils.fcompiler.EnvironmentConfig.dump_variables(self)
numpy.distutils.fcompiler.EnvironmentConfig.get(self,name,default=None)
numpy.distutils.fcompiler.EnvironmentConfig.use_distribution(self,dist)
numpy.distutils.fcompiler.environment.EnvironmentConfig(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.environment.EnvironmentConfig.__getattr__(self,name)
numpy.distutils.fcompiler.environment.EnvironmentConfig.__init__(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.environment.EnvironmentConfig._get_var(self,name,conf_desc)
numpy.distutils.fcompiler.environment.EnvironmentConfig.clone(self,hook_handler)
numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variable(self,name)
numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variables(self)
numpy.distutils.fcompiler.environment.EnvironmentConfig.get(self,name,default=None)
numpy.distutils.fcompiler.environment.EnvironmentConfig.use_distribution(self,dist)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/intel.py----------------------------------------
A:numpy.distutils.fcompiler.intel.f->dummy_fortran_file()
A:numpy.distutils.fcompiler.intel.version_match->simple_version_match(start='Intel\\(R\\).*?64,')
A:numpy.distutils.fcompiler.intel.v->self.get_version()
A:numpy.distutils.fcompiler.intel.opt->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.intel.idx->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self).index('-shared')
numpy.distutils.fcompiler.intel.BaseIntelFCompiler(FCompiler)
numpy.distutils.fcompiler.intel.BaseIntelFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.intel.BaseIntelFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelItaniumFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.intel_version_match(type)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/fcompiler/g95.py----------------------------------------
numpy.distutils.fcompiler.g95.G95FCompiler(FCompiler)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_opt(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/utilities.py----------------------------------------
A:numpy.distutils.tests.utilities.code->textwrap.dedent(f"        import os\n        import sys\n        sys.path = {repr(sys.path)}\n\n        def configuration(parent_name='',top_path=None):\n            global config\n            from numpy.distutils.misc_util import Configuration\n            config = Configuration('', parent_name, top_path)\n            return config\n\n        from numpy.distutils.core import setup\n        setup(configuration=configuration)\n\n        config_cmd = config.get_config_cmd()\n        have_c = config_cmd.try_compile('void foo() {{}}')\n        print('COMPILERS:%%d,%%d,%%d' %% (have_c,\n                                          config.have_f77c(),\n                                          config.have_f90c()))\n        sys.exit(99)\n        ")
A:numpy.distutils.tests.utilities.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.tests.utilities.script->os.path.join(tmpdir, 'setup.py')
A:numpy.distutils.tests.utilities.p->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=tmpdir)
A:numpy.distutils.tests.utilities.(out, err)->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=tmpdir).communicate()
A:numpy.distutils.tests.utilities.m->re.search(b'COMPILERS:(\\d+),(\\d+),(\\d+)', out)
numpy.distutils.tests.utilities._get_compiler_status()
numpy.distutils.tests.utilities.has_c_compiler()
numpy.distutils.tests.utilities.has_f77_compiler()
numpy.distutils.tests.utilities.has_f90_compiler()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt_conf.py----------------------------------------
A:numpy.distutils.tests.test_ccompiler_opt_conf.arch_compilers->dict(x86=('gcc', 'clang', 'icc', 'iccw', 'msvc'), x64=('gcc', 'clang', 'icc', 'iccw', 'msvc'), ppc64=('gcc', 'clang'), ppc64le=('gcc', 'clang'), armhf=('gcc', 'clang'), aarch64=('gcc', 'clang'), narch=('gcc',))
A:numpy.distutils.tests.test_ccompiler_opt_conf.conf_partial->FakeCCompilerOpt.conf_features_partial(self)
A:numpy.distutils.tests.test_ccompiler_opt_conf.error_msg->"during validate '{}' within feature '{}', march '{}' and compiler '{}'\n>> ".format(log, feature_name, self.cc_march, self.cc_name)
A:numpy.distutils.tests.test_ccompiler_opt_conf.error_tp->' or '.join(error_tp)
A:numpy.distutils.tests.test_ccompiler_opt_conf.val->val.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.implies->implies.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.impl_dict->search_in.get(f)
A:numpy.distutils.tests.test_ccompiler_opt_conf.group->group.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.extra_checks->extra_checks.split().split()
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.__init__(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_compile(self,sources,flags,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_info(self)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_log(*args,stderr=False)
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures(self,methodName='runTest')
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures.__init__(self,methodName='runTest')
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures._setup(self)
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures.test_features(self)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures(FakeCCompilerOpt)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.conf_features_partial(self)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_duplicates(self,error_msg,option,val)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_extra_checks(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_feature(self,log,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_group(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_implies(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_option_types(self,error_msg,option,val)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_from_template.py----------------------------------------
A:numpy.distutils.tests.test_from_template.pyf->process_str(pyf_src)
A:numpy.distutils.tests.test_from_template.normalized_pyf->normalize_whitespace(pyf)
A:numpy.distutils.tests.test_from_template.normalized_expected_pyf->normalize_whitespace(expected_pyf)
numpy.distutils.tests.test_from_template.normalize_whitespace(s)
numpy.distutils.tests.test_from_template.test_from_template()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_fcompiler_gnu.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_gnu.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95')
A:numpy.distutils.tests.test_fcompiler_gnu.v->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95').version_match(vs)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_g77_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_not_g77(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_gfortran_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_not_gfortran(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_exec_command.py----------------------------------------
A:numpy.distutils.tests.test_exec_command.self.pyexe->get_pythonexe()
A:numpy.distutils.tests.test_exec_command.(s, o)->numpy.distutils.exec_command.exec_command('"%s" -c "f = open(\'%s\', \'r\'); print(f.read()); f.close()"' % (self.pyexe, fn), execute_in=tmpdir, **kws)
A:numpy.distutils.tests.test_exec_command.tmpfile->os.path.join(tmpdir, fn)
numpy.distutils.tests.test_exec_command.TestExecCommand
numpy.distutils.tests.test_exec_command.TestExecCommand.check_basic(self,*kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_execute_in(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_nt(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_posix(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.setup_method(self)
numpy.distutils.tests.test_exec_command.TestExecCommand.test_basic(self)
numpy.distutils.tests.test_exec_command.emulate_nonposix(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__(self)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.redirect_stderr(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stderr.__init__(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stdout(self,stdout=None)
numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stdout.__init__(self,stdout=None)
numpy.distutils.tests.test_exec_command.test_exec_command_stderr()
numpy.distutils.tests.test_exec_command.test_exec_command_stdout()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_log.py----------------------------------------
A:numpy.distutils.tests.test_log.f->io.StringIO()
A:numpy.distutils.tests.test_log.r_ansi->re.compile('\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')
A:numpy.distutils.tests.test_log.func->getattr(log, func_name)
A:numpy.distutils.tests.test_log.out->io.StringIO().getvalue()
A:numpy.distutils.tests.test_log.clean_out->re.compile('\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])').sub('', out)
A:numpy.distutils.tests.test_log.line->next((line for line in clean_out.splitlines()))
numpy.distutils.tests.test_log.setup_module()
numpy.distutils.tests.test_log.teardown_module()
numpy.distutils.tests.test_log.test_log_prefix(func_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_shell_utils.py----------------------------------------
A:numpy.distutils.tests.test_shell_utils.joined->Parser.join(argv)
A:numpy.distutils.tests.test_shell_utils.json_out->runner(joined).decode()
numpy.distutils.tests.test_shell_utils.Parser(request)
numpy.distutils.tests.test_shell_utils.runner(Parser)
numpy.distutils.tests.test_shell_utils.test_join_matches_subprocess(Parser,runner,argv)
numpy.distutils.tests.test_shell_utils.test_roundtrip(Parser,argv)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_system_info.py----------------------------------------
A:numpy.distutils.tests.test_system_info.cl->{'temp1': Temp1Info, 'temp2': Temp2Info, 'duplicate_options': DuplicateOptionInfo}.get(name.lower(), _system_info)
A:numpy.distutils.tests.test_system_info.compiler->customized_ccompiler()
A:numpy.distutils.tests.test_system_info.p->Popen(cmd, stdout=PIPE, stderr=PIPE)
A:numpy.distutils.tests.test_system_info.HAVE_COMPILER->have_compiler()
A:numpy.distutils.tests.test_system_info.self.cp->ConfigParser(defaults)
A:numpy.distutils.tests.test_system_info.self._dir1->mkdtemp()
A:numpy.distutils.tests.test_system_info.self._src1->os.path.join(self._dir1, 'foo.c')
A:numpy.distutils.tests.test_system_info.self._lib1->os.path.join(self._dir1, 'libfoo.so')
A:numpy.distutils.tests.test_system_info.self._dir2->mkdtemp()
A:numpy.distutils.tests.test_system_info.self._src2->os.path.join(self._dir2, 'bar.c')
A:numpy.distutils.tests.test_system_info.self._lib2->os.path.join(self._dir2, 'libbar.so')
A:numpy.distutils.tests.test_system_info.site_cfg->simple_site.format(**{'dir1': self._dir1, 'lib1': self._lib1, 'dir2': self._dir2, 'lib2': self._lib2, 'pathsep': os.pathsep, 'lib2_escaped': _shell_utils.NativeParser.join([self._lib2])})
A:numpy.distutils.tests.test_system_info.(fd, self._sitecfg)->mkstemp()
A:numpy.distutils.tests.test_system_info.self.c_default->site_and_parse(get_class('default'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_temp1->site_and_parse(get_class('temp1'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_temp2->site_and_parse(get_class('temp2'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_dup_options->site_and_parse(get_class('duplicate_options'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.extra->tsi.calc_extra_info()
A:numpy.distutils.tests.test_system_info.c->customized_ccompiler()
A:numpy.distutils.tests.test_system_info.previousDir->os.getcwd()
A:numpy.distutils.tests.test_system_info.cfg->os.path.join(self._dir1, 'site.cfg')
A:numpy.distutils.tests.test_system_info.info->mkl_info()
A:numpy.distutils.tests.test_system_info.lib_dirs->mkl_info().cp['ALL']['library_dirs'].split(os.pathsep)
A:numpy.distutils.tests.test_system_info.mkl->fid.read().replace('[ALL]', '[mkl]', 1)
A:numpy.distutils.tests.test_system_info.dflt->fid.read().replace('[mkl]', '[DEFAULT]', 1)
A:numpy.distutils.tests.test_system_info.base_order->list('abcdef')
A:numpy.distutils.tests.test_system_info.(order, unknown)->_parse_env_order(base_order, env)
numpy.distutils.tests.test_system_info.DuplicateOptionInfo(_system_info)
numpy.distutils.tests.test_system_info.Temp1Info(_system_info)
numpy.distutils.tests.test_system_info.Temp2Info(_system_info)
numpy.distutils.tests.test_system_info.TestSystemInfoReading
numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup_method(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.teardown_method(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_all(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile1(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile2(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_duplicate_options(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_overrides(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp1(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp2(self)
numpy.distutils.tests.test_system_info._system_info(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.tests.test_system_info._system_info.__init__(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.tests.test_system_info._system_info._check_libs(self,lib_dirs,libs,opt_libs,exts)
numpy.distutils.tests.test_system_info.get_class(name,notfound_action=1)
numpy.distutils.tests.test_system_info.have_compiler()
numpy.distutils.tests.test_system_info.test_distutils_parse_env_order(monkeypatch)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_build_ext.py----------------------------------------
A:numpy.distutils.tests.test_build_ext.srctree->os.path.join(os.path.dirname(__file__), '..', '..', '..')
A:numpy.distutils.tests.test_build_ext.so->line.strip()
numpy.distutils.tests.test_build_ext.test_multi_fortran_libs_link(tmp_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_fcompiler.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='none')
A:numpy.distutils.tests.test_fcompiler.flag_vars->numpy.distutils.fcompiler.new_fcompiler(compiler='none').flag_vars.clone(lambda *args, **kwargs: None)
A:numpy.distutils.tests.test_fcompiler.new_flag->'-dummy-{}-flag'.format(opt)
A:numpy.distutils.tests.test_fcompiler.prev_flags->getattr(flag_vars, opt)
A:numpy.distutils.tests.test_fcompiler.new_flags->getattr(flag_vars, opt)
numpy.distutils.tests.test_fcompiler.test_fcompiler_flags(monkeypatch)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_misc_util.py----------------------------------------
A:numpy.distutils.tests.test_misc_util.local_path->minrelpath(join(dirname(__file__), '..'))
A:numpy.distutils.tests.test_misc_util.ls->gpaths('command/*.py', local_path)
A:numpy.distutils.tests.test_misc_util.f->gpaths('system_info.py', local_path)
A:numpy.distutils.tests.test_misc_util.ext->get_shared_lib_extension(is_python_ext=False)
A:numpy.distutils.tests.test_misc_util.info->get_info('npymath')
numpy.distutils.tests.test_misc_util.TestAppendpath
numpy.distutils.tests.test_misc_util.TestAppendpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_2(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_3(self)
numpy.distutils.tests.test_misc_util.TestGpaths
numpy.distutils.tests.test_misc_util.TestGpaths.test_gpaths(self)
numpy.distutils.tests.test_misc_util.TestMinrelpath
numpy.distutils.tests.test_misc_util.TestMinrelpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestSharedExtension
numpy.distutils.tests.test_misc_util.TestSharedExtension.test_get_shared_lib_extension(self)
numpy.distutils.tests.test_misc_util.test_installed_npymath_ini()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_mingw32ccompiler.py----------------------------------------
A:numpy.distutils.tests.test_mingw32ccompiler.out->subprocess.check_output(['nm.exe', '--help'])
A:numpy.distutils.tests.test_mingw32ccompiler.(has_import_lib, fullpath)->numpy.distutils.mingw32ccompiler._check_for_import_lib()
numpy.distutils.tests.test_mingw32ccompiler.test_build_import()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_fcompiler_nagfor.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_nagfor.fc->numpy.distutils.fcompiler.new_fcompiler(compiler=comp)
A:numpy.distutils.tests.test_fcompiler_nagfor.v->numpy.distutils.fcompiler.new_fcompiler(compiler=comp).version_match(vs)
numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions
numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions.test_version_match(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_fcompiler_intel.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_intel.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem')
A:numpy.distutils.tests.test_fcompiler_intel.v->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem').version_match(vs)
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions.test_64bit_version(self)
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions.test_32bit_version(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_npy_pkg_config.py----------------------------------------
A:numpy.distutils.tests.test_npy_pkg_config.out->read_config(pkg)
A:numpy.distutils.tests.test_npy_pkg_config.d->parse_flags('-L /usr/lib -lfoo -L/usr/lib -lbar')
numpy.distutils.tests.test_TestLibraryInfo
numpy.distutils.tests.test_TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_TestParseFlags
numpy.distutils.tests.test_TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_TestParseFlags.test_simple_lflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_lflags(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/tests/test_ccompiler_opt.py----------------------------------------
A:numpy.distutils.tests.test_ccompiler_opt.tmpdir->tempfile.mkdtemp(*args, **kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.arch_compilers->dict(x86=('gcc', 'clang', 'icc', 'iccw', 'msvc'), x64=('gcc', 'clang', 'icc', 'iccw', 'msvc'), ppc64=('gcc', 'clang'), ppc64le=('gcc', 'clang'), armhf=('gcc', 'clang'), aarch64=('gcc', 'clang', 'fcc'), s390x=('gcc', 'clang'), noarch=('gcc',))
A:numpy.distutils.tests.test_ccompiler_opt.self._opt->self.nopt()
A:numpy.distutils.tests.test_ccompiler_opt.opt->self.nopt(cpu_baseline=baseline, cpu_dispatch=dispatch)
A:numpy.distutils.tests.test_ccompiler_opt.file->os.path.join(tmpdir, 'test_targets.c')
A:numpy.distutils.tests.test_ccompiler_opt.fake_objects->self.nopt(cpu_baseline=baseline, cpu_dispatch=dispatch).try_dispatch([file])
A:numpy.distutils.tests.test_ccompiler_opt.glen->len(gtar)
A:numpy.distutils.tests.test_ccompiler_opt.gtar->('(' + ' '.join(gtar) + ')').upper()
A:numpy.distutils.tests.test_ccompiler_opt.map2origin->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc')
A:numpy.distutils.tests.test_ccompiler_opt.march->self.march()
A:numpy.distutils.tests.test_ccompiler_opt.cc_name->self.cc_name()
A:numpy.distutils.tests.test_ccompiler_opt.map_march->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc').get(march, march)
A:numpy.distutils.tests.test_ccompiler_opt.map_cc->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc').get(cc_name, cc_name)
A:numpy.distutils.tests.test_ccompiler_opt.regex->kwargs.pop(key, None)
A:numpy.distutils.tests.test_ccompiler_opt.match->self.arg_regex(**kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.features->' '.join(opt.cpu_baseline_names())
A:numpy.distutils.tests.test_ccompiler_opt.flags->' '.join(opt.cpu_baseline_flags())
A:numpy.distutils.tests.test_ccompiler_opt.(targets, _)->self.get_targets(targets=targets, groups=groups, **kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.targets->' '.join(targets)
A:numpy.distutils.tests.test_ccompiler_opt.match_dict->self.arg_regex(**kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.(_, tar_flags)->self.get_targets(targets=targets, groups=groups)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt(self,trap_files='',trap_flags='',*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.__init__(self,trap_files='',trap_flags='',*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.__repr__(self)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_compile(self,sources,flags,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_info(self)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_log(*args,stderr=False)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.arg_regex(self,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.cc_name(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect(self,dispatch,baseline='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_baseline(self,baseline,dispatch='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_flags(self,baseline,dispatch='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_target_flags(self,targets,groups={},**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_targets(self,targets,groups={},**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.get_targets(self,targets,groups,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.march(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.nopt(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.opt(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.setup_class(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_empty(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_options(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_validation(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_flags(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_implies(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_interface(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_skip(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_exceptions(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_groups(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_multi(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_policies(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_syntax(self)
numpy.distutils.tests.test_ccompiler_opt.new_test(arch,cc)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/__init__.py----------------------------------------
A:numpy.distutils.command.__init__.a->np.NA(2)
numpy.distutils.command.__init__.test_na_writable_attributes_deletion()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/develop.py----------------------------------------
numpy.distutils.command.develop.develop(old_develop)
numpy.distutils.command.develop.develop.install_for_development(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build_src.py----------------------------------------
A:numpy.distutils.command.build_src.var->re.compile('@([a-zA-Z_]+)@')
A:numpy.distutils.command.build_src.m->_f2py_module_name_match(line)
A:numpy.distutils.command.build_src.plat_specifier->'.{}-{}.{}'.format(get_platform(), *sys.version_info[:2])
A:numpy.distutils.command.build_src.self.build_src->os.path.join(self.build_base, 'src' + plat_specifier)
A:numpy.distutils.command.build_src.self.f2py_opts->shlex.split(self.f2py_opts)
A:numpy.distutils.command.build_src.self.swig_opts->shlex.split(self.swig_opts)
A:numpy.distutils.command.build_src.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.build_src.v->getattr(build_ext, c, None)
A:numpy.distutils.command.build_src.build_dir->os.path.join(self.build_src, target_dir)
A:numpy.distutils.command.build_src.s->f()
A:numpy.distutils.command.build_src.filenames->get_data_files((d, files))
A:numpy.distutils.command.build_src.template_dir->os.path.dirname(template)
A:numpy.distutils.command.build_src.generated_dir->os.path.join(self.build_src, template_dir, install_dir)
A:numpy.distutils.command.build_src.generated->os.path.basename(os.path.splitext(template)[0])
A:numpy.distutils.command.build_src.generated_path->os.path.join(generated_dir, generated)
A:numpy.distutils.command.build_src.full_install_dir->os.path.join(template_dir, install_dir)
A:numpy.distutils.command.build_src.install_cmd->copy.copy(get_cmd('install'))
A:numpy.distutils.command.build_src.prefix->os.path.join(os.path.abspath(top_prefix), pkg_path)
A:numpy.distutils.command.build_src.(install_dir, generated)->self._build_npy_pkg_config(info, d)
A:numpy.distutils.command.build_src.target->os.path.join(target_dir, '%s_wrap%s' % (name, ext))
A:numpy.distutils.command.build_src.source->func(extension, build_dir)
A:numpy.distutils.command.build_src.sources->self.pyrex_sources(sources, ext)
A:numpy.distutils.command.build_src.(sources, h_files)->self.filter_h_files(sources)
A:numpy.distutils.command.build_src.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_src.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_src.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_src.self.ext_target_dir->self.get_package_dir(package)
A:numpy.distutils.command.build_src.(sources, py_files)->self.filter_py_files(sources)
A:numpy.distutils.command.build_src.old_level->numpy.distutils.log.set_threshold(new_level)
A:numpy.distutils.command.build_src.(base, ext)->os.path.splitext(source)
A:numpy.distutils.command.build_src.depends->extension[1].get('depends')
A:numpy.distutils.command.build_src.include_dirs->extension[1].get('include_dirs')
A:numpy.distutils.command.build_src.target_dir->os.path.dirname(base)
A:numpy.distutils.command.build_src.target_file->_find_swig_target(target_dir, name)
A:numpy.distutils.command.build_src.outstr->process_c_file(source)
A:numpy.distutils.command.build_src.d->os.path.dirname(numpy.f2py.__file__)
A:numpy.distutils.command.build_src.name->_f2py_module_name_match(line).group('name')
A:numpy.distutils.command.build_src.target_c->os.path.join(build_dir, 'fortranobject.c')
A:numpy.distutils.command.build_src.target_h->os.path.join(build_dir, 'fortranobject.h')
A:numpy.distutils.command.build_src.source_c->os.path.join(d, 'src', 'fortranobject.c')
A:numpy.distutils.command.build_src.source_h->os.path.join(d, 'src', 'fortranobject.h')
A:numpy.distutils.command.build_src.filename->os.path.join(target_dir, ext_name + name_ext)
A:numpy.distutils.command.build_src.typ->get_swig_target(source)
A:numpy.distutils.command.build_src.typ2->get_swig_target(source)
A:numpy.distutils.command.build_src.line->f.readline()
numpy.distutils.command.build_src._find_swig_target(target_dir,name)
numpy.distutils.command.build_src.build_src(build_ext.build_ext)
numpy.distutils.command.build_src.build_src._build_npy_pkg_config(self,info,gd)
numpy.distutils.command.build_src.build_src.build_data_files_sources(self)
numpy.distutils.command.build_src.build_src.build_extension_sources(self,ext)
numpy.distutils.command.build_src.build_src.build_library_sources(self,lib_name,build_info)
numpy.distutils.command.build_src.build_src.build_npy_pkg_config(self)
numpy.distutils.command.build_src.build_src.build_py_modules_sources(self)
numpy.distutils.command.build_src.build_src.build_sources(self)
numpy.distutils.command.build_src.build_src.f2py_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.filter_files(self,sources,exts=[])
numpy.distutils.command.build_src.build_src.filter_h_files(self,sources)
numpy.distutils.command.build_src.build_src.filter_py_files(self,sources)
numpy.distutils.command.build_src.build_src.finalize_options(self)
numpy.distutils.command.build_src.build_src.generate_a_pyrex_source(self,base,ext_name,source,extension)
numpy.distutils.command.build_src.build_src.generate_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.initialize_options(self)
numpy.distutils.command.build_src.build_src.pyrex_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.run(self)
numpy.distutils.command.build_src.build_src.swig_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.template_sources(self,sources,extension)
numpy.distutils.command.build_src.get_f2py_modulename(source)
numpy.distutils.command.build_src.get_swig_modulename(source)
numpy.distutils.command.build_src.get_swig_target(source)
numpy.distutils.command.build_src.subst_vars(target,source,d)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/autodist.py----------------------------------------
A:numpy.distutils.command.autodist.body->textwrap.dedent('\n        int\n        main()\n        {\n        #if (! defined __GNUC__) || (__GNUC__ < %(major)d) || \\\n                (__GNUC_MINOR__ < %(minor)d) || \\\n                (__GNUC_PATCHLEVEL__ < %(patchlevel)d)\n        #error gcc >= %(version)s required\n        #endif\n            return 0;\n        }\n        ')
A:numpy.distutils.command.autodist.st->cmd.try_compile(body % {'restrict': kw}, None, None)
A:numpy.distutils.command.autodist.version->'.'.join([str(major), str(minor), str(patchlevel)])
numpy.distutils.command.autodist.check_compiler_gcc(cmd)
numpy.distutils.command.autodist.check_gcc_function_attribute(cmd,attribute,name)
numpy.distutils.command.autodist.check_gcc_function_attribute_with_intrinsics(cmd,attribute,name,code,include)
numpy.distutils.command.autodist.check_gcc_variable_attribute(cmd,attribute)
numpy.distutils.command.autodist.check_gcc_version_at_least(cmd,major,minor=0,patchlevel=0)
numpy.distutils.command.autodist.check_inline(cmd)
numpy.distutils.command.autodist.check_restrict(cmd)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/sdist.py----------------------------------------
numpy.distutils.command.sdist.sdist(old_sdist)
numpy.distutils.command.sdist.sdist.add_defaults(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build.py----------------------------------------
A:numpy.distutils.command.build.plat_specifier->'.{}-{}.{}'.format(get_platform(), *sys.version_info[:2])
A:numpy.distutils.command.build.self.build_scripts->os.path.join(self.build_base, 'scripts' + plat_specifier)
numpy.distutils.command.build.build(old_build)
numpy.distutils.command.build.build.finalize_options(self)
numpy.distutils.command.build.build.initialize_options(self)
numpy.distutils.command.build.build.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/config.py----------------------------------------
A:numpy.distutils.command.config.self.fcompiler->new_fcompiler(compiler=self.fcompiler, dry_run=self.dry_run, force=1, c_compiler=self.compiler)
A:numpy.distutils.command.config.ret->mth(*(self,) + args)
A:numpy.distutils.command.config.(src, obj)->self._wrap_method(old_config._compile, lang, (body, headers, include_dirs, lang))
A:numpy.distutils.command.config.d->filepath_from_subprocess_output(d)
A:numpy.distutils.command.config.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.config.libfile2->os.path.join(libdir, '%s.lib' % libname)
A:numpy.distutils.command.config.body->textwrap.dedent('\n            typedef %(type)s npy_check_sizeof_type;\n            int main (void)\n            {\n                static int test_array [1 - 2 * !(((long) (sizeof (npy_check_sizeof_type))) <= %(size)s)];\n                test_array [0] = 0\n\n                ;\n                return 0;\n            }\n            ')
A:numpy.distutils.command.config.grabber->GrabStdout()
A:numpy.distutils.command.config.(src, obj, exe)->self._link(body, headers, include_dirs, libraries, library_dirs, lang)
A:numpy.distutils.command.config.exe->os.path.join('.', exe)
A:numpy.distutils.command.config.output->filepath_from_subprocess_output(output)
A:numpy.distutils.command.config.exitcode->os.WEXITSTATUS(exitstatus)
A:numpy.distutils.command.config.sig->os.WTERMSIG(exitstatus)
numpy.distutils.command.config.GrabStdout(self)
numpy.distutils.command.config.GrabStdout.__init__(self)
numpy.distutils.command.config.GrabStdout.flush(self)
numpy.distutils.command.config.GrabStdout.restore(self)
numpy.distutils.command.config.GrabStdout.write(self,data)
numpy.distutils.command.config.config(old_config)
numpy.distutils.command.config.config._check_compiler(self)
numpy.distutils.command.config.config._compile(self,body,headers,include_dirs,lang)
numpy.distutils.command.config.config._link(self,body,headers,include_dirs,libraries,library_dirs,lang)
numpy.distutils.command.config.config._wrap_method(self,mth,lang,args)
numpy.distutils.command.config.config.check_compiler_gcc(self)
numpy.distutils.command.config.config.check_decl(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_func(self,func,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_funcs_once(self,funcs,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_gcc_function_attribute(self,attribute,name)
numpy.distutils.command.config.config.check_gcc_function_attribute_with_intrinsics(self,attribute,name,code,include)
numpy.distutils.command.config.config.check_gcc_variable_attribute(self,attribute)
numpy.distutils.command.config.config.check_gcc_version_at_least(self,major,minor=0,patchlevel=0)
numpy.distutils.command.config.config.check_header(self,header,include_dirs=None,library_dirs=None,lang='c')
numpy.distutils.command.config.config.check_inline(self)
numpy.distutils.command.config.config.check_macro_true(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_restrict(self)
numpy.distutils.command.config.config.check_type(self,type_name,headers=None,include_dirs=None,library_dirs=None)
numpy.distutils.command.config.config.check_type_size(self,type_name,headers=None,include_dirs=None,library_dirs=None,expected=None)
numpy.distutils.command.config.config.get_output(self,body,headers=None,include_dirs=None,libraries=None,library_dirs=None,lang='c',use_tee=None)
numpy.distutils.command.config.config.initialize_options(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/install_clib.py----------------------------------------
A:numpy.distutils.command.install_clib.build_clib_cmd->get_cmd('build_clib')
A:numpy.distutils.command.install_clib.compiler->new_compiler(compiler=None)
A:numpy.distutils.command.install_clib.target_dir->os.path.join(self.install_dir, l.target_dir)
A:numpy.distutils.command.install_clib.name->new_compiler(compiler=None).library_filename(l.name)
A:numpy.distutils.command.install_clib.source->os.path.join(build_dir, name)
numpy.distutils.command.install_clib.install_clib(Command)
numpy.distutils.command.install_clib.install_clib.finalize_options(self)
numpy.distutils.command.install_clib.install_clib.get_outputs(self)
numpy.distutils.command.install_clib.install_clib.initialize_options(self)
numpy.distutils.command.install_clib.install_clib.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build_scripts.py----------------------------------------
A:numpy.distutils.command.build_scripts.script->func(build_dir)
A:numpy.distutils.command.build_scripts.self.scripts->self.generate_scripts(self.scripts)
numpy.distutils.command.build_scripts.build_scripts(old_build_scripts)
numpy.distutils.command.build_scripts.build_scripts.generate_scripts(self,scripts)
numpy.distutils.command.build_scripts.build_scripts.get_source_files(self)
numpy.distutils.command.build_scripts.build_scripts.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/install_data.py----------------------------------------
numpy.distutils.command.install_data.install_data(old_install_data)
numpy.distutils.command.install_data.install_data.finalize_options(self)
numpy.distutils.command.install_data.install_data.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build_clib.py----------------------------------------
A:numpy.distutils.command.build_clib.self.parallel->int(self.parallel)
A:numpy.distutils.command.build_clib.l->build_info.get('language', None)
A:numpy.distutils.command.build_clib.self.compiler->new_compiler(compiler=self.compiler, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_clib.dispatch_hpath->os.path.join(bsrc_dir, dispatch_hpath)
A:numpy.distutils.command.build_clib.opt_cache_path->os.path.abspath(os.path.join(self.build_temp, 'ccompiler_opt_cache_clib.py'))
A:numpy.distutils.command.build_clib.self.compiler_opt->new_ccompiler_opt(compiler=self.compiler, dispatch_hpath=dispatch_hpath, cpu_baseline=self.cpu_baseline, cpu_dispatch=self.cpu_dispatch, cache_path=opt_cache_path)
A:numpy.distutils.command.build_clib.self._f_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90='f90' in languages, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.libname->self.compiler.library_filename(l.name)
A:numpy.distutils.command.build_clib.source->os.path.join(self.build_clib, libname)
A:numpy.distutils.command.build_clib.target->os.path.join(l.target_dir, libname)
A:numpy.distutils.command.build_clib.sources->list(sources)
A:numpy.distutils.command.build_clib.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(sources)
A:numpy.distutils.command.build_clib.lib_file->compiler.library_filename(lib_name, output_dir=self.build_clib)
A:numpy.distutils.command.build_clib.config_fc->build_info.get('config_fc', {})
A:numpy.distutils.command.build_clib.fcompiler->new_fcompiler(compiler=fcompiler.compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=requiref90, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.base_config_fc->dist.get_option_dict('config_fc').copy()
A:numpy.distutils.command.build_clib.macros->build_info.get('macros')
A:numpy.distutils.command.build_clib.include_dirs->build_info.get('include_dirs')
A:numpy.distutils.command.build_clib.extra_postargs->self.assemble_flags(build_info.get('extra_compiler_args'))
A:numpy.distutils.command.build_clib.extra_cflags->self.assemble_flags(build_info.get('extra_cflags'))
A:numpy.distutils.command.build_clib.extra_cxxflags->self.assemble_flags(build_info.get('extra_cxxflags'))
A:numpy.distutils.command.build_clib.module_build_dir->os.path.dirname(lib_file)
A:numpy.distutils.command.build_clib.copt_baseline_flags->self.compiler_opt.cpu_baseline_flags()
A:numpy.distutils.command.build_clib.cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_clib.cxx_objects->compiler.cxx_compiler().compile(cxx_sources, output_dir=self.build_temp, macros=macros + copt_macros, include_dirs=include_dirs, debug=self.debug, extra_postargs=extra_postargs + copt_baseline_flags + extra_cxxflags)
A:numpy.distutils.command.build_clib.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_clib.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_clib.listfn->os.path.join(self.build_clib, lib_name + '.cobjects')
A:numpy.distutils.command.build_clib.lib_fname->os.path.join(self.build_clib, lib_name + compiler.static_lib_extension)
A:numpy.distutils.command.build_clib.clib_libraries->build_info.get('libraries', [])
numpy.distutils.command.build_clib.build_clib(old_build_clib)
numpy.distutils.command.build_clib.build_clib.assemble_flags(self,in_flags)
numpy.distutils.command.build_clib.build_clib.build_a_library(self,build_info,lib_name,libraries)
numpy.distutils.command.build_clib.build_clib.build_libraries(self,libraries)
numpy.distutils.command.build_clib.build_clib.finalize_options(self)
numpy.distutils.command.build_clib.build_clib.get_source_files(self)
numpy.distutils.command.build_clib.build_clib.have_cxx_sources(self)
numpy.distutils.command.build_clib.build_clib.have_f_sources(self)
numpy.distutils.command.build_clib.build_clib.initialize_options(self)
numpy.distutils.command.build_clib.build_clib.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build_ext.py----------------------------------------
A:numpy.distutils.command.build_ext.self.parallel->int(self.parallel)
A:numpy.distutils.command.build_ext.self.include_dirs->self.include_dirs.split(os.pathsep)
A:numpy.distutils.command.build_ext.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.build_ext.self.compiler->new_compiler(compiler=compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_ext.dispatch_hpath->os.path.join(bsrc_dir, dispatch_hpath)
A:numpy.distutils.command.build_ext.opt_cache_path->os.path.abspath(os.path.join(self.build_temp, 'ccompiler_opt_cache_ext.py'))
A:numpy.distutils.command.build_ext.self.compiler_opt->new_ccompiler_opt(compiler=self.compiler, dispatch_hpath=dispatch_hpath, cpu_baseline=self.cpu_baseline, cpu_dispatch=self.cpu_dispatch, cache_path=opt_cache_path)
A:numpy.distutils.command.build_ext.self.extra_dll_dir->os.path.join(self.build_temp, '.libs')
A:numpy.distutils.command.build_ext.all_languages->set()
A:numpy.distutils.command.build_ext.ext_languages->set()
A:numpy.distutils.command.build_ext.self._cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_ext.self._f77_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=False, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.self._f90_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=True, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.shared_lib_dir->os.path.join(self.build_lib, shared_lib_dir)
A:numpy.distutils.command.build_ext.runtime_lib->os.path.join(self.extra_dll_dir, fn)
A:numpy.distutils.command.build_ext.sources->list(sources)
A:numpy.distutils.command.build_ext.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_ext.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_ext.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_ext.build_py->self.get_finalized_command('build_py')
A:numpy.distutils.command.build_ext.package_dir->self.get_finalized_command('build_py').get_package_dir(package)
A:numpy.distutils.command.build_ext.ext_filename->os.path.join(self.build_lib, self.get_ext_filename(fullname))
A:numpy.distutils.command.build_ext.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(ext.sources)
A:numpy.distutils.command.build_ext.copt_baseline_flags->self.compiler_opt.cpu_baseline_flags()
A:numpy.distutils.command.build_ext.module_build_dir->os.path.join(self.build_temp, os.path.dirname(self.get_ext_filename(fullname)))
A:numpy.distutils.command.build_ext.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_ext.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_ext.(objects, libraries)->self._process_unlinkable_fobjects(objects, libraries, fcompiler, library_dirs, unlinkable_fobjects)
A:numpy.distutils.command.build_ext.objects->list(objects)
A:numpy.distutils.command.build_ext.libraries->list(libraries)
A:numpy.distutils.command.build_ext.unlinkable_fobjects->list(unlinkable_fobjects)
A:numpy.distutils.command.build_ext.fake_lib->os.path.join(libdir, lib + '.fobjects')
A:numpy.distutils.command.build_ext.c_lib->os.path.join(libdir, lib + '.cobjects')
A:numpy.distutils.command.build_ext.wrapped->fcompiler.wrap_unlinkable_objects(fobjects, output_dir=self.build_temp, extra_dll_dir=self.extra_dll_dir)
A:numpy.distutils.command.build_ext.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.build_ext.libfile2->os.path.join(self.build_temp, libname + '.lib')
A:numpy.distutils.command.build_ext.dir->filepath_from_subprocess_output(dir)
A:numpy.distutils.command.build_ext.p->combine_paths(f_lib_dirs, 'lib' + lib + '.a')
A:numpy.distutils.command.build_ext.dst_name->os.path.join(self.build_temp, lib + '.lib')
numpy.distutils.command.build_ext.build_ext(old_build_ext)
numpy.distutils.command.build_ext.build_ext._add_dummy_mingwex_sym(self,c_sources)
numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran(self,fcompiler,c_libraries,c_library_dirs)
numpy.distutils.command.build_ext.build_ext._process_unlinkable_fobjects(self,objects,libraries,fcompiler,library_dirs,unlinkable_fobjects)
numpy.distutils.command.build_ext.build_ext.build_extension(self,ext)
numpy.distutils.command.build_ext.build_ext.finalize_options(self)
numpy.distutils.command.build_ext.build_ext.get_outputs(self)
numpy.distutils.command.build_ext.build_ext.get_source_files(self)
numpy.distutils.command.build_ext.build_ext.initialize_options(self)
numpy.distutils.command.build_ext.build_ext.run(self)
numpy.distutils.command.build_ext.build_ext.swig_sources(self,sources,extensions=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/install_headers.py----------------------------------------
A:numpy.distutils.command.install_headers.prefix->os.path.dirname(self.install_dir)
A:numpy.distutils.command.install_headers.d->os.path.join(*[prefix] + header[0].split('.'))
A:numpy.distutils.command.install_headers.(out, _)->self.copy_file(header, d)
numpy.distutils.command.install_headers.install_headers(old_install_headers)
numpy.distutils.command.install_headers.install_headers.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/egg_info.py----------------------------------------
A:numpy.distutils.command.egg_info.msg->textwrap.dedent('\n                `build_src` is being run, this may lead to missing\n                files in your sdist!  You want to use distutils.sdist\n                instead of the setuptools version:\n\n                    from distutils.command.sdist import sdist\n                    cmdclass={\'sdist\': sdist}"\n\n                See numpy\'s setup.py or gh-7131 for details.')
numpy.distutils.command.egg_info.egg_info(_egg_info)
numpy.distutils.command.egg_info.egg_info.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/config_compiler.py----------------------------------------
A:numpy.distutils.command.config_compiler.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.config_compiler.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.config_compiler.config->self.get_finalized_command('config')
A:numpy.distutils.command.config_compiler.build->self.get_finalized_command('build')
A:numpy.distutils.command.config_compiler.v->getattr(c, a)
numpy.distutils.command.config_compiler.config_cc(Command)
numpy.distutils.command.config_compiler.config_cc.finalize_options(self)
numpy.distutils.command.config_compiler.config_cc.initialize_options(self)
numpy.distutils.command.config_compiler.config_cc.run(self)
numpy.distutils.command.config_compiler.config_fc(Command)
numpy.distutils.command.config_compiler.config_fc.finalize_options(self)
numpy.distutils.command.config_compiler.config_fc.initialize_options(self)
numpy.distutils.command.config_compiler.config_fc.run(self)
numpy.distutils.command.config_compiler.show_fortran_compilers(_cache=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/build_py.py----------------------------------------
A:numpy.distutils.command.build_py.build_src->self.get_finalized_command('build_src')
A:numpy.distutils.command.build_py.self.packages->list(build_src.py_modules_dict.keys())
A:numpy.distutils.command.build_py.modules->distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py(old_build_py)
numpy.distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py.find_package_modules(self,package,package_dir)
numpy.distutils.command.build_py.build_py.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/bdist_rpm.py----------------------------------------
A:numpy.distutils.command.bdist_rpm.spec_file->distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)
A:numpy.distutils.command.bdist_rpm.setup_py->os.path.basename(sys.argv[0])
A:numpy.distutils.command.bdist_rpm.line->line.replace('setup.py', setup_py).replace('setup.py', setup_py)
numpy.distutils.command.bdist_rpm.bdist_rpm(old_bdist_rpm)
numpy.distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/distutils/command/install.py----------------------------------------
A:numpy.distutils.command.install.caller->sys._getframe(3)
A:numpy.distutils.command.install.caller_module->sys._getframe(3).f_globals.get('__name__', '')
A:numpy.distutils.command.install.r->self.setuptools_run()
A:numpy.distutils.command.install.l->l.rstrip().rstrip()
numpy.distutils.command.install.install(old_install)
numpy.distutils.command.install.install.finalize_options(self)
numpy.distutils.command.install.install.run(self)
numpy.distutils.command.install.install.setuptools_run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/__init__.py----------------------------------------
A:numpy.matrixlib.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.py----------------------------------------
A:numpy.matrixlib.defmatrix.data->_convert_from_string(data)
A:numpy.matrixlib.defmatrix.rows->str.split(';')
A:numpy.matrixlib.defmatrix.trow->row.split(',')
A:numpy.matrixlib.defmatrix.temp->col.strip().split()
A:numpy.matrixlib.defmatrix.Ncols->len(newrow)
A:numpy.matrixlib.defmatrix.intype->numpy._core.numeric.dtype(dtype)
A:numpy.matrixlib.defmatrix.new->_convert_from_string(data).view(subtype)
A:numpy.matrixlib.defmatrix.arr->arr.copy().copy()
A:numpy.matrixlib.defmatrix.ret->numpy._core.numeric.ndarray.__new__(subtype, shape, arr.dtype, buffer=arr, order=order)
A:numpy.matrixlib.defmatrix.newshape->tuple([x for x in self.shape if x > 1])
A:numpy.matrixlib.defmatrix.ndim->len(newshape)
A:numpy.matrixlib.defmatrix.out->numpy._core.numeric.ndarray.__getitem__(self, index)
A:numpy.matrixlib.defmatrix.n->len(index)
A:numpy.matrixlib.defmatrix.col->col.strip().strip()
numpy.asmatrix(data,dtype=None)
numpy.bmat(obj,ldict=None,gdict=None)
numpy.matrix(subtype,data,dtype=None,copy=True)
numpy.matrix.A(self)
numpy.matrix.A1(self)
numpy.matrix.H(self)
numpy.matrix.I(self)
numpy.matrix.T(self)
numpy.matrix.__array_finalize__(self,obj)
numpy.matrix.__getitem__(self,index)
numpy.matrix.__imul__(self,other)
numpy.matrix.__ipow__(self,other)
numpy.matrix.__mul__(self,other)
numpy.matrix.__pow__(self,other)
numpy.matrix.__rmul__(self,other)
numpy.matrix.__rpow__(self,other)
numpy.matrix._align(self,axis)
numpy.matrix._collapse(self,axis)
numpy.matrix.all(self,axis=None,out=None)
numpy.matrix.any(self,axis=None,out=None)
numpy.matrix.argmax(self,axis=None,out=None)
numpy.matrix.argmin(self,axis=None,out=None)
numpy.matrix.flatten(self,order='C')
numpy.matrix.max(self,axis=None,out=None)
numpy.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrix.min(self,axis=None,out=None)
numpy.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrix.ptp(self,axis=None,out=None)
numpy.matrix.ravel(self,order='C')
numpy.matrix.squeeze(self,axis=None)
numpy.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrix.tolist(self)
numpy.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib._convert_from_string(data)
numpy.matrixlib._from_string(str,gdict,ldict)
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._from_string(str,gdict,ldict)
numpy.matrixlib.defmatrix.asmatrix(data,dtype=None)
numpy.matrixlib.defmatrix.bmat(obj,ldict=None,gdict=None)
numpy.matrixlib.defmatrix.matrix(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.A(self)
numpy.matrixlib.defmatrix.matrix.A1(self)
numpy.matrixlib.defmatrix.matrix.H(self)
numpy.matrixlib.defmatrix.matrix.I(self)
numpy.matrixlib.defmatrix.matrix.T(self)
numpy.matrixlib.defmatrix.matrix.__array_finalize__(self,obj)
numpy.matrixlib.defmatrix.matrix.__getitem__(self,index)
numpy.matrixlib.defmatrix.matrix.__imul__(self,other)
numpy.matrixlib.defmatrix.matrix.__ipow__(self,other)
numpy.matrixlib.defmatrix.matrix.__mul__(self,other)
numpy.matrixlib.defmatrix.matrix.__new__(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.__pow__(self,other)
numpy.matrixlib.defmatrix.matrix.__rmul__(self,other)
numpy.matrixlib.defmatrix.matrix.__rpow__(self,other)
numpy.matrixlib.defmatrix.matrix._align(self,axis)
numpy.matrixlib.defmatrix.matrix._collapse(self,axis)
numpy.matrixlib.defmatrix.matrix.all(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.any(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmax(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmin(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.flatten(self,order='C')
numpy.matrixlib.defmatrix.matrix.max(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.min(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.ptp(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.ravel(self,order='C')
numpy.matrixlib.defmatrix.matrix.squeeze(self,axis=None)
numpy.matrixlib.defmatrix.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib.defmatrix.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.tolist(self)
numpy.matrixlib.defmatrix.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/defmatrix.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_defmatrix.py----------------------------------------
A:numpy.matrixlib.tests.test_defmatrix.A->numpy.arange(6)
A:numpy.matrixlib.tests.test_defmatrix.mA->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.B->numpy.dot(B, Ainv)
A:numpy.matrixlib.tests.test_defmatrix.C->bmat([[A, A], [A, A]])
A:numpy.matrixlib.tests.test_defmatrix.D->numpy.array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.E->numpy.array([[5, 6], [7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.AEresult->matrix([[1, 2, 5, 6], [3, 4, 7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.vec->numpy.arange(5)
A:numpy.matrixlib.tests.test_defmatrix.mvec->matrix(vec)
A:numpy.matrixlib.tests.test_defmatrix.Aresult->numpy.array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.mixresult->numpy.array([[1, 2, 5, 6], [3, 4, 7, 8], [5, 6, 1, 2], [7, 8, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.b2->bmat('A,B;C,D', ldict={'A': A, 'B': B}, gdict={'C': B, 'D': A})
A:numpy.matrixlib.tests.test_defmatrix.M->matrix([[1, 2, 0, 0], [3, 4, 0, 0], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.sum0->matrix([8, 12, 4, 6])
A:numpy.matrixlib.tests.test_defmatrix.x->matrix([[1, 2, 3], [4, 5, 6]])
A:numpy.matrixlib.tests.test_defmatrix.y->numpy.zeros((3, 1), float)
A:numpy.matrixlib.tests.test_defmatrix.mx->matrix([[1, 2, 3], [4, 5, 6]]).view(np.matrix)
A:numpy.matrixlib.tests.test_defmatrix.mB->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.xpinv->matrix([[-0.77777778, 0.27777778], [-0.11111111, 0.11111111], [0.55555556, -0.05555556]])
A:numpy.matrixlib.tests.test_defmatrix.mC->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.O->numpy.ones((10, 10), np.complex128)
A:numpy.matrixlib.tests.test_defmatrix.Ainv->numpy.linalg.inv(A)
A:numpy.matrixlib.tests.test_defmatrix.mA2->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.m->matrix([[1], [2]])
A:numpy.matrixlib.tests.test_defmatrix.m2->matrix([[1], [2]]).copy()
A:numpy.matrixlib.tests.test_defmatrix.mi->matrix([[1], [2]]).copy()
A:numpy.matrixlib.tests.test_defmatrix.m4->matrix([[1], [2]]).copy().copy()
A:numpy.matrixlib.tests.test_defmatrix.two->scalar_t(2)
A:numpy.matrixlib.tests.test_defmatrix.a->numpy.arange(10).reshape((2, 5)).view(np.matrix)
A:numpy.matrixlib.tests.test_defmatrix.f->getattr(a, attrib)
A:numpy.matrixlib.tests.test_defmatrix.b->f(*args)
A:numpy.matrixlib.tests.test_defmatrix.(c, d)->matrix([0.0]).nonzero()
A:numpy.matrixlib.tests.test_defmatrix.expanded->numpy.expand_dims(a, axis=1)
numpy.matrixlib.tests.test_TestAlgebra
numpy.matrixlib.tests.test_TestAlgebra.test_basic(self)
numpy.matrixlib.tests.test_TestAlgebra.test_notimplemented(self)
numpy.matrixlib.tests.test_TestAlgebra.test_pow(self)
numpy.matrixlib.tests.test_TestAlgebra.test_scalar_type_pow(self)
numpy.matrixlib.tests.test_TestCasting
numpy.matrixlib.tests.test_TestCasting.test_basic(self)
numpy.matrixlib.tests.test_TestCtor
numpy.matrixlib.tests.test_TestCtor.test_basic(self)
numpy.matrixlib.tests.test_TestCtor.test_bmat_nondefault_str(self)
numpy.matrixlib.tests.test_TestCtor.test_exceptions(self)
numpy.matrixlib.tests.test_TestIndexing
numpy.matrixlib.tests.test_TestIndexing.test_basic(self)
numpy.matrixlib.tests.test_TestMatrixReturn
numpy.matrixlib.tests.test_TestMatrixReturn.test_instance_methods(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_array_to_list(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_boolean_indexing(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_dimesions(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_fancy_indexing(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_list_indexing(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_matrix_element(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_row_column_indexing(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_scalar_indexing(self)
numpy.matrixlib.tests.test_TestPower
numpy.matrixlib.tests.test_TestPower.test_list(self)
numpy.matrixlib.tests.test_TestPower.test_returntype(self)
numpy.matrixlib.tests.test_TestProperties
numpy.matrixlib.tests.test_TestProperties.test_asmatrix(self)
numpy.matrixlib.tests.test_TestProperties.test_basic(self)
numpy.matrixlib.tests.test_TestProperties.test_comparisons(self)
numpy.matrixlib.tests.test_TestProperties.test_make_bool_matrix_from_str(self)
numpy.matrixlib.tests.test_TestProperties.test_max(self)
numpy.matrixlib.tests.test_TestProperties.test_min(self)
numpy.matrixlib.tests.test_TestProperties.test_noaxis(self)
numpy.matrixlib.tests.test_TestProperties.test_pinv(self)
numpy.matrixlib.tests.test_TestProperties.test_prod(self)
numpy.matrixlib.tests.test_TestProperties.test_ptp(self)
numpy.matrixlib.tests.test_TestProperties.test_repr(self)
numpy.matrixlib.tests.test_TestProperties.test_sum(self)
numpy.matrixlib.tests.test_TestProperties.test_var(self)
numpy.matrixlib.tests.test_TestShape
numpy.matrixlib.tests.test_TestShape.test_array_memory_sharing(self)
numpy.matrixlib.tests.test_TestShape.test_expand_dims_matrix(self)
numpy.matrixlib.tests.test_TestShape.test_matrix_memory_sharing(self)
numpy.matrixlib.tests.test_TestShape.test_matrix_ravel_order(self)
numpy.matrixlib.tests.test_TestShape.test_member_flatten(self)
numpy.matrixlib.tests.test_TestShape.test_member_ravel(self)
numpy.matrixlib.tests.test_TestShape.test_numpy_ravel(self)
numpy.matrixlib.tests.test_TestShape.test_numpy_ravel_order(self)
numpy.matrixlib.tests.test_TestShape.test_shape(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_notimplemented(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_pow(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_scalar_type_pow(self)
numpy.matrixlib.tests.test_defmatrix.TestCasting
numpy.matrixlib.tests.test_defmatrix.TestCasting.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_bmat_nondefault_str(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_exceptions(self)
numpy.matrixlib.tests.test_defmatrix.TestIndexing
numpy.matrixlib.tests.test_defmatrix.TestIndexing.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn.test_instance_methods(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_to_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_boolean_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_dimesions(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_fancy_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_list_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_matrix_element(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_row_column_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_scalar_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestPower
numpy.matrixlib.tests.test_defmatrix.TestPower.test_list(self)
numpy.matrixlib.tests.test_defmatrix.TestPower.test_returntype(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_asmatrix(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_comparisons(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_make_bool_matrix_from_str(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_max(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_min(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_noaxis(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_pinv(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_prod(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_ptp(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_repr(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_sum(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_var(self)
numpy.matrixlib.tests.test_defmatrix.TestShape
numpy.matrixlib.tests.test_defmatrix.TestShape.test_array_memory_sharing(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_expand_dims_matrix(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_memory_sharing(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_ravel_order(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_flatten(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_ravel(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel_order(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_multiarray.py----------------------------------------
A:numpy.matrixlib.tests.test_multiarray.x->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
A:numpy.matrixlib.tests.test_multiarray.y->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)]).view(dtype='<i2', type=np.matrix)
numpy.matrixlib.tests.test_multiarray.TestView
numpy.matrixlib.tests.test_multiarray.TestView.test_keywords(self)
numpy.matrixlib.tests.test_multiarray.TestView.test_type(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_masked_matrix.py----------------------------------------
A:numpy.matrixlib.tests.test_masked_matrix.mat->numpy.matrix(data)
A:numpy.matrixlib.tests.test_masked_matrix._data->numpy.ma.core.MaskedArray.__new__(cls, data=mat, mask=mask)
A:numpy.matrixlib.tests.test_masked_matrix._view->self.view(MaskedArray)
A:numpy.matrixlib.tests.test_masked_matrix.x1->numpy.matrix(np.arange(5) * 1.0)
A:numpy.matrixlib.tests.test_masked_matrix.x2->masked_values(x1, 3.0)
A:numpy.matrixlib.tests.test_masked_matrix.x3->masked_array(x1, mask=[[0, 1, 0], [1, 0, 0]])
A:numpy.matrixlib.tests.test_masked_matrix.x4->masked_array(x1)
A:numpy.matrixlib.tests.test_masked_matrix.x3[1, :]->masked_array([1, 2, 3], [1, 1, 0])
A:numpy.matrixlib.tests.test_masked_matrix.x4[1, :]->masked_array([1, 2, 3], [1, 1, 0])
A:numpy.matrixlib.tests.test_masked_matrix.a->masked_array(iterator, dtype=[('a', float), ('b', float)])
A:numpy.matrixlib.tests.test_masked_matrix.a_pickled->pickle.loads(pickle.dumps(a, protocol=proto))
A:numpy.matrixlib.tests.test_masked_matrix.m->numpy.array([[True, False, False], [False, False, False], [True, True, False]], dtype=np.bool)
A:numpy.matrixlib.tests.test_masked_matrix.test->masked_array(iterator, dtype=[('a', float), ('b', float)]).view((float, 2), np.matrix)
A:numpy.matrixlib.tests.test_masked_matrix.test.flat->masked_array([3, 2, 1], mask=[1, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.control->masked_array(np.matrix([[3, 2, 1]]), mask=[1, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.x->numpy.arange(5, dtype='float')
A:numpy.matrixlib.tests.test_masked_matrix.X->numpy.matrix(x)
A:numpy.matrixlib.tests.test_masked_matrix.mX->masked_array(X, mask=m)
A:numpy.matrixlib.tests.test_masked_matrix.b->masked_array(iterator, dtype=[('a', float), ('b', float)]).compressed()
A:numpy.matrixlib.tests.test_masked_matrix.aravel->masked_array(iterator, dtype=[('a', float), ('b', float)]).ravel()
A:numpy.matrixlib.tests.test_masked_matrix.iterator->list(zip(np.arange(10), np.random.rand(10)))
A:numpy.matrixlib.tests.test_masked_matrix.data->numpy.array(iterator)
A:numpy.matrixlib.tests.test_masked_matrix.mx->MMatrix(x, mask=[0, 1, 0, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.xmx->masked_array(mx.data.__array__(), mask=mx.mask)
A:numpy.matrixlib.tests.test_masked_matrix.expected->numpy.ma.array(np.r_['r', 1, 2, 3])
numpy.matrixlib.tests.test_masked_matrix.MMatrix(cls,data,mask=nomask)
numpy.matrixlib.tests.test_masked_matrix.MMatrix.__array_finalize__(self,obj)
numpy.matrixlib.tests.test_masked_matrix.MMatrix.__new__(cls,data,mask=nomask)
numpy.matrixlib.tests.test_masked_matrix.MMatrix._series(self)
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix(self)
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix_builder(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_allany_onmatrices(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_compressed(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_count_mean_with_matrix(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_flat(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_matrix_indexing(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_pickling_subbaseclass(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_ravel(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_view(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.setup_method(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations2(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_unary_operations(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_maskedarray_subclassing(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_interaction.py----------------------------------------
A:numpy.matrixlib.tests.test_interaction.m->numpy.asmatrix(a)
A:numpy.matrixlib.tests.test_interaction.x->numpy.linspace(0, 5)
A:numpy.matrixlib.tests.test_interaction.res->f(mat)
A:numpy.matrixlib.tests.test_interaction.a->numpy.array(m)
A:numpy.matrixlib.tests.test_interaction.actual->numpy.partition(a, 1, axis=None)
A:numpy.matrixlib.tests.test_interaction.expected->numpy.bmat([[a, b], [c, d]])
A:numpy.matrixlib.tests.test_interaction.arr->numpy.matrix([1, 2], dtype=object)
A:numpy.matrixlib.tests.test_interaction.desired->numpy.matrix([[3, 6]], dtype=object)
A:numpy.matrixlib.tests.test_interaction.i->numpy.nditer([a, b, None], [], [['readonly'], ['readonly'], ['writeonly', 'allocate', 'no_subtype']])
A:numpy.matrixlib.tests.test_interaction.b->numpy.array([2])
A:numpy.matrixlib.tests.test_interaction.c->numpy.array([3])
A:numpy.matrixlib.tests.test_interaction.mat->numpy.matrix(np.eye(3))
A:numpy.matrixlib.tests.test_interaction.y->numpy.linspace(-5, 0)
A:numpy.matrixlib.tests.test_interaction.w->numpy.matrix([[1, 2], [3, 4]])
A:numpy.matrixlib.tests.test_interaction.r->numpy.dot(x, y)
A:numpy.matrixlib.tests.test_interaction.mx->numpy.matrix(x)
A:numpy.matrixlib.tests.test_interaction.my->numpy.matrix(y)
A:numpy.matrixlib.tests.test_interaction.mr->numpy.dot(mx, my.T)
A:numpy.matrixlib.tests.test_interaction.result->numpy.apply_along_axis(double, 1, m)
A:numpy.matrixlib.tests.test_interaction.d->numpy.array([4])
A:numpy.matrixlib.tests.test_interaction.msg->str(exc_info.value)
A:numpy.matrixlib.tests.test_interaction.msg_reference->textwrap.dedent('\n    Arrays are not equal\n\n    (shapes (2,), (1, 2) mismatch)\n     ACTUAL: array([1, 2])\n     DESIRED: matrix([[1, 2]])')
A:numpy.matrixlib.tests.test_interaction.m1->numpy.matrix([[1.0, 2.0]])
A:numpy.matrixlib.tests.test_interaction.m2->numpy.matrix([[1.0, np.nan]])
A:numpy.matrixlib.tests.test_interaction.m3->numpy.matrix([[1.0, -np.inf]])
A:numpy.matrixlib.tests.test_interaction.m4->numpy.matrix([[np.nan, np.inf]])
A:numpy.matrixlib.tests.test_interaction.m5->numpy.matrix([[1.0, 2.0], [np.nan, np.inf]])
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix(self)
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_builder(self)
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_scalar(self)
numpy.matrixlib.tests.test_interaction.like_function()
numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix()
numpy.matrixlib.tests.test_interaction.test_array_almost_equal_matrix()
numpy.matrixlib.tests.test_interaction.test_array_astype()
numpy.matrixlib.tests.test_interaction.test_array_equal_error_message_matrix()
numpy.matrixlib.tests.test_interaction.test_average_matrix()
numpy.matrixlib.tests.test_interaction.test_dot_matrix()
numpy.matrixlib.tests.test_interaction.test_dot_scalar_and_matrix_of_objects()
numpy.matrixlib.tests.test_interaction.test_ediff1d_matrix()
numpy.matrixlib.tests.test_interaction.test_fancy_indexing()
numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix()
numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix_of_objects()
numpy.matrixlib.tests.test_interaction.test_iter_allocate_output_subtype()
numpy.matrixlib.tests.test_interaction.test_kron_matrix()
numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices()
numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices_general()
numpy.matrixlib.tests.test_interaction.test_object_scalar_multiply()
numpy.matrixlib.tests.test_interaction.test_partition_matrix_none()
numpy.matrixlib.tests.test_interaction.test_polynomial_mapdomain()
numpy.matrixlib.tests.test_interaction.test_sort_matrix_none()
numpy.matrixlib.tests.test_interaction.test_stack()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_regression.py----------------------------------------
A:numpy.matrixlib.tests.test_regression.x->numpy.asmatrix(np.random.uniform(0, 1, (3, 3)))
A:numpy.matrixlib.tests.test_regression.a->numpy.matrix([1.0], dtype=float)
A:numpy.matrixlib.tests.test_regression.(c, d)->numpy.matrix([0.0]).nonzero()
numpy.matrixlib.tests.test_regression.TestRegression
numpy.matrixlib.tests.test_regression.TestRegression.test_kron_matrix(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_properties(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_std_argmax(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_numeric.py----------------------------------------
A:numpy.matrixlib.tests.test_numeric.b1->numpy.matrix([[1, 2], [3, 4]])
A:numpy.matrixlib.tests.test_numeric.diag_b1->numpy.matrix([[1, 4]])
A:numpy.matrixlib.tests.test_numeric.array_b1->numpy.array([1, 4])
numpy.matrixlib.tests.test_numeric.TestDot
numpy.matrixlib.tests.test_numeric.TestDot.test_matscalar(self)
numpy.matrixlib.tests.test_numeric.test_diagonal()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/matrixlib/tests/test_matrix_linalg.py----------------------------------------
numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase(LinalgTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestCondMatrix(CondCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestDetMatrix(DetCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestEigMatrix(EigCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestEigvalsMatrix(EigvalsCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestInvMatrix(InvCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestLstsqMatrix(LstsqCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestNormDoubleMatrix(_TestNorm2DMatrix,_TestNormDoubleBase)
numpy.matrixlib.tests.test_matrix_linalg.TestNormInt64Matrix(_TestNorm2DMatrix,_TestNormInt64Base)
numpy.matrixlib.tests.test_matrix_linalg.TestNormSingleMatrix(_TestNorm2DMatrix,_TestNormSingleBase)
numpy.matrixlib.tests.test_matrix_linalg.TestPinvMatrix(PinvCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestQRMatrix(_TestQR)
numpy.matrixlib.tests.test_matrix_linalg.TestSVDMatrix(SVDCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestSolveMatrix(SolveCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix(_TestNorm2D)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_matlib.py----------------------------------------
A:numpy.tests.test_matlib.x->numpy.matlib.repmat(a1, 2, 2)
A:numpy.tests.test_matlib.xc->numpy.matlib.eye(3, k=1, dtype=int)
A:numpy.tests.test_matlib.xf->numpy.matlib.eye(3, 4, dtype=int, order='F')
A:numpy.tests.test_matlib.a1->numpy.arange(4)
A:numpy.tests.test_matlib.y->numpy.array([[0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3]])
numpy.tests.test_matlib.test_empty()
numpy.tests.test_matlib.test_eye()
numpy.tests.test_matlib.test_identity()
numpy.tests.test_matlib.test_ones()
numpy.tests.test_matlib.test_rand()
numpy.tests.test_matlib.test_randn()
numpy.tests.test_matlib.test_repmat()
numpy.tests.test_matlib.test_zeros()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test__all__.py----------------------------------------
numpy.tests.test__all__.test_no_duplicates_in_np__all__()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_ctypeslib.py----------------------------------------
A:numpy.tests.test_ctypeslib.cdll->load_library('_multiarray_umath', np._core._multiarray_umath.__file__)
A:numpy.tests.test_ctypeslib.test_cdll->load_library('_multiarray_tests', np._core._multiarray_tests.__file__)
A:numpy.tests.test_ctypeslib.out1->load_library('_multiarray_umath', loader_path)
A:numpy.tests.test_ctypeslib.out2->load_library(Path('_multiarray_umath'), loader_path)
A:numpy.tests.test_ctypeslib.out3->load_library('_multiarray_umath', Path(loader_path))
A:numpy.tests.test_ctypeslib.out4->load_library(b'_multiarray_umath', loader_path)
A:numpy.tests.test_ctypeslib.so_ext->sysconfig.get_config_var('EXT_SUFFIX')
A:numpy.tests.test_ctypeslib.p->cast((c_int * 10)(*range(10)), POINTER(c_int))
A:numpy.tests.test_ctypeslib.dt->numpy.dtype(dict(names=['a', 'b'], offsets=[0, 2], formats=[np.uint32, np.uint32]))
A:numpy.tests.test_ctypeslib.samedt->numpy.dtype(dtdescr)
A:numpy.tests.test_ctypeslib.dt2->numpy.dtype(dtdescr, align=True)
A:numpy.tests.test_ctypeslib.x->numpy.array([[1, 2], [3, 4]], order='F')
A:numpy.tests.test_ctypeslib.arr->numpy.zeros((224, 224, 3))
A:numpy.tests.test_ctypeslib.ptr_type->ndpointer(dtype=arr.dtype)
A:numpy.tests.test_ctypeslib.arr2->c_forward_pointer(arr)
A:numpy.tests.test_ctypeslib.ret->c_forward_pointer(arr)
A:numpy.tests.test_ctypeslib.a->numpy.arange(N, dtype=np.short)
A:numpy.tests.test_ctypeslib.c_array->(2 * Struct3)(Struct3(Struct(a=1), Struct(a=2), Struct(a=3)), Struct3(Struct(a=4), Struct(a=5), Struct(a=6)))
A:numpy.tests.test_ctypeslib.expected->numpy.array([[(1,), (2,), (3,)], [(4,), (5,), (6,)]], dtype=[('a', np.int16)])
A:numpy.tests.test_ctypeslib.pnt->numpy.ctypeslib.as_ctypes(a)
A:numpy.tests.test_ctypeslib.newpnt->ctypes.cast(pnt, ctypes.POINTER(ctypes.c_short))
A:numpy.tests.test_ctypeslib.b->numpy.ctypeslib.as_array(newpnt, (N,))
A:numpy.tests.test_ctypeslib.c_arr->numpy.ctypeslib.as_ctypes(arr)
A:numpy.tests.test_ctypeslib.arr_ref->weakref.ref(arr)
A:numpy.tests.test_ctypeslib.ct->numpy.ctypeslib.as_ctypes_type(dt)
numpy.tests.test_ctypeslib.TestAsArray
numpy.tests.test_ctypeslib.TestAsArray.test_array(self)
numpy.tests.test_ctypeslib.TestAsArray.test_pointer(self)
numpy.tests.test_ctypeslib.TestAsArray.test_reference_cycles(self)
numpy.tests.test_ctypeslib.TestAsArray.test_segmentation_fault(self)
numpy.tests.test_ctypeslib.TestAsArray.test_struct_array_pointer(self)
numpy.tests.test_ctypeslib.TestAsCtypesType
numpy.tests.test_ctypeslib.TestAsCtypesType.test_overlapping(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_padded_union(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_scalar(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure_aligned(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_subarray(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_union(self)
numpy.tests.test_ctypeslib.TestLoadLibrary
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic(self)
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic2(self)
numpy.tests.test_ctypeslib.TestNdpointer
numpy.tests.test_ctypeslib.TestNdpointer.test_cache(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_dtype(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_flags(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_ndim(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_shape(self)
numpy.tests.test_ctypeslib.TestNdpointerCFunc
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_arguments(self)
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_return(self,dt)
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_vague_return_value(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_configtool.py----------------------------------------
A:numpy.tests.test_configtool.p->subprocess.run(['numpy-config', arg], capture_output=True, text=True)
A:numpy.tests.test_configtool.stdout->check_numpyconfig('--pkgconfigdir')
numpy.tests.test_configtool.check_numpyconfig(arg)
numpy.tests.test_configtool.test_configtool_cflags()
numpy.tests.test_configtool.test_configtool_pkgconfigdir()
numpy.tests.test_configtool.test_configtool_version()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_numpy_config.py----------------------------------------
A:numpy.tests.test_numpy_config.pytestmark->pytest.mark.skipif(not hasattr(np.__config__, '_built_with_meson'), reason='Requires Meson builds')
A:numpy.tests.test_numpy_config.mock_yaml_importer.side_effect->ModuleNotFoundError()
A:numpy.tests.test_numpy_config.config->numpy.show_config(mode='dicts')
numpy.tests.test_numpy_config.TestNumPyConfigs
numpy.tests.test_numpy_config.TestNumPyConfigs.test_dict_mode(self)
numpy.tests.test_numpy_config.TestNumPyConfigs.test_invalid_mode(self)
numpy.tests.test_numpy_config.TestNumPyConfigs.test_pyyaml_not_found(self,mock_yaml_importer)
numpy.tests.test_numpy_config.TestNumPyConfigs.test_warn_to_add_tests(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_lazyloading.py----------------------------------------
A:numpy.tests.test_lazyloading.old_numpy->sys.modules.pop('numpy')
A:numpy.tests.test_lazyloading.spec->find_spec('numpy')
A:numpy.tests.test_lazyloading.module->module_from_spec(spec)
A:numpy.tests.test_lazyloading.loader->LazyLoader(spec.loader)
numpy.tests.test_lazyloading.test_lazy_load()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_scripts.py----------------------------------------
A:numpy.tests.test_scripts.is_inplace->isfile(pathjoin(dirname(np.__file__), '..', 'setup.py'))
A:numpy.tests.test_scripts.exe_dir->dirname(sys.executable)
A:numpy.tests.test_scripts.major->str(version.major)
A:numpy.tests.test_scripts.minor->str(version.minor)
A:numpy.tests.test_scripts.stdout->subprocess.check_output([sys.executable, '-mnumpy.f2py', '-v'])
numpy.tests.test_scripts.find_f2py_commands()
numpy.tests.test_scripts.test_f2py(f2py_cmd)
numpy.tests.test_scripts.test_pep338()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_numpy_version.py----------------------------------------
A:numpy.tests.test_numpy_version.res->re.match(version_pattern + dev_suffix + '$', np.__version__)
A:numpy.tests.test_numpy_version.contents->set([s for s in dir(np.version) if not s.startswith('_')])
A:numpy.tests.test_numpy_version.expected->set(['full_version', 'git_revision', 'release', 'short_version', 'version'])
numpy.tests.test_numpy_version.test_short_version()
numpy.tests.test_numpy_version.test_valid_numpy_version()
numpy.tests.test_numpy_version.test_version_module()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_reloading.py----------------------------------------
A:numpy.tests.test_reloading.code->textwrap.dedent('\n        import sys\n        from pytest import warns\n        import numpy as np\n\n        for k in list(sys.modules.keys()):\n            if "numpy" in k:\n                del sys.modules[k]\n\n        with warns(UserWarning):\n            import numpy as np\n        ')
A:numpy.tests.test_reloading.p->subprocess.run([sys.executable, '-c', code], capture_output=True)
numpy.tests.test_reloading.test_full_reimport()
numpy.tests.test_reloading.test_novalue()
numpy.tests.test_reloading.test_numpy_reloading()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_public_api.py----------------------------------------
A:numpy.tests.test_public_api.item->getattr(module, name)
A:numpy.tests.test_public_api.bad_results->check_dir(np.fft)
A:numpy.tests.test_public_api.result->subprocess.check_output(exe)
A:numpy.tests.test_public_api.cdll->ctypes.CDLL(np._core._multiarray_tests.__file__)
A:numpy.tests.test_public_api.f->getattr(cdll, 'test_not_exported', None)
A:numpy.tests.test_public_api.module->modules_queue.pop()
A:numpy.tests.test_public_api.objnames->dir(module)
A:numpy.tests.test_public_api.unexpected_members->find_unexpected_members('numpy')
A:numpy.tests.test_public_api.eps->importlib.metadata.entry_points()
A:numpy.tests.test_public_api.xp_eps->importlib.metadata.entry_points().get('array_api', [])
A:numpy.tests.test_public_api.ep->next((ep for ep in xp_eps if ep.name == 'numpy'))
A:numpy.tests.test_public_api.xp->next((ep for ep in xp_eps if ep.name == 'numpy')).load()
A:numpy.tests.test_public_api.all_members->_remove_exceptions(all_members)
A:numpy.tests.test_public_api.dir_members->_remove_exceptions(dir_members)
A:numpy.tests.test_public_api.member->getattr(module, member_name)
A:numpy.tests.test_public_api.submodule_member->getattr(submodule, submodule_member_name)
A:numpy.tests.test_public_api.core_submodule->__import__(f'numpy.core.{submodule_name}', fromlist=[submodule_member_name])
numpy.tests.test_public_api.check_dir(module,module_name=None)
numpy.tests.test_public_api.is_unexpected(name)
numpy.tests.test_public_api.test_NPY_NO_EXPORT()
numpy.tests.test_public_api.test_all_modules_are_expected()
numpy.tests.test_public_api.test_all_modules_are_expected_2()
numpy.tests.test_public_api.test_api_importable()
numpy.tests.test_public_api.test_array_api_entry_point()
numpy.tests.test_public_api.test_core_shims_coherence()
numpy.tests.test_public_api.test_dir_testing()
numpy.tests.test_public_api.test_functions_single_location()
numpy.tests.test_public_api.test_import_lazy_import(name)
numpy.tests.test_public_api.test_main_namespace_all_dir_coherence()
numpy.tests.test_public_api.test_numpy_fft()
numpy.tests.test_public_api.test_numpy_linalg()
numpy.tests.test_public_api.test_numpy_namespace()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/tests/test_warnings.py----------------------------------------
A:numpy.tests.test_warnings.p->ParseCall()
A:numpy.tests.test_warnings.tree->ast.parse(file.read())
numpy.tests.test_warnings.FindFuncs(self,filename)
numpy.tests.test_warnings.FindFuncs.__init__(self,filename)
numpy.tests.test_warnings.FindFuncs.visit_Call(self,node)
numpy.tests.test_warnings.ParseCall(self)
numpy.tests.test_warnings.ParseCall.__init__(self)
numpy.tests.test_warnings.ParseCall.visit_Attribute(self,node)
numpy.tests.test_warnings.ParseCall.visit_Name(self,node)
numpy.tests.test_warnings.test_warning_calls()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/format.py----------------------------------------
A:numpy.lib.format.magic_str->_read_bytes(fp, MAGIC_LEN, 'magic string')
A:numpy.lib.format.new_dtype->drop_metadata(dtype)
A:numpy.lib.format.dt->numpy.dtype((descr_to_dtype(descr_str), shape))
A:numpy.lib.format.d['descr']->dtype_to_descr(array.dtype)
A:numpy.lib.format.header->_filter_header(header)
A:numpy.lib.format.msg->'Header length {} too big for version={}'.format(hlen, version)
A:numpy.lib.format.ret->_wrap_header(header, (2, 0))
A:numpy.lib.format.hinfo->_header_size_info.get(version)
A:numpy.lib.format.hlength_str->_read_bytes(fp, struct.calcsize(hlength_type), 'array header length')
A:numpy.lib.format.d->dict(descr=dtype_to_descr(dtype), fortran_order=fortran_order, shape=shape)
A:numpy.lib.format.keys->sorted(d.keys())
A:numpy.lib.format.dtype->numpy.dtype(dtype)
A:numpy.lib.format.buffersize->max(16 * 1024 ** 2 // array.itemsize, 1)
A:numpy.lib.format.dtype_class->type(array.dtype)
A:numpy.lib.format.version->read_magic(fp)
A:numpy.lib.format.(shape, fortran_order, dtype)->_read_array_header(fp, version, max_header_size=max_header_size)
A:numpy.lib.format.count->numpy.multiply.reduce(shape, dtype=numpy.int64)
A:numpy.lib.format.array->array.transpose().transpose()
A:numpy.lib.format.read_count->min(max_read_count, count - i)
A:numpy.lib.format.read_size->int(read_count * dtype.itemsize)
A:numpy.lib.format.data->bytes()
A:numpy.lib.format.array[i:i + read_count]->numpy.frombuffer(data, dtype=dtype, count=read_count)
A:numpy.lib.format.offset->fp.tell()
A:numpy.lib.format.marray->numpy.memmap(filename, dtype=dtype, shape=shape, order=order, mode=mode, offset=offset)
A:numpy.lib.format.r->fp.read(size - len(data))
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._read_array_header(fp,version,max_header_size=_MAX_HEADER_SIZE)
numpy.lib.format._read_bytes(fp,size,error_template='ranoutofdata')
numpy.lib.format._wrap_header(header,version)
numpy.lib.format._wrap_header_guess_version(header)
numpy.lib.format._write_array_header(fp,d,version=None)
numpy.lib.format.descr_to_dtype(descr)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.isfileobj(f)
numpy.lib.format.magic(major,minor)
numpy.lib.format.open_memmap(filename,mode='r+',dtype=None,shape=None,fortran_order=False,version=None,*,max_header_size=_MAX_HEADER_SIZE)
numpy.lib.format.read_array(fp,allow_pickle=False,pickle_kwargs=None,*,max_header_size=_MAX_HEADER_SIZE)
numpy.lib.format.read_array_header_1_0(fp,max_header_size=_MAX_HEADER_SIZE)
numpy.lib.format.read_array_header_2_0(fp,max_header_size=_MAX_HEADER_SIZE)
numpy.lib.format.read_magic(fp)
numpy.lib.format.write_array(fp,array,version=None,allow_pickle=True,pickle_kwargs=None)
numpy.lib.format.write_array_header_1_0(fp,d)
numpy.lib.format.write_array_header_2_0(fp,d)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/format.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_utils_impl.py----------------------------------------
A:numpy.lib._utils_impl.d->os.path.join(os.path.dirname(_core.__file__), 'include')
A:numpy.lib._utils_impl.lines->'\n\n'.join([depdoc, doc]).expandtabs().split('\n')
A:numpy.lib._utils_impl.indent->min(indent, len(line) - content)
A:numpy.lib._utils_impl.depdoc->textwrap.indent(depdoc, ' ' * indent)
A:numpy.lib._utils_impl.doc->'\n\n'.join([depdoc, doc])
A:numpy.lib._utils_impl.content->len(line.lstrip())
A:numpy.lib._utils_impl.firstwidth->len(name)
A:numpy.lib._utils_impl.arglist->str(inspect.signature(object)).split(sepstr)
A:numpy.lib._utils_impl.module->__import__(module, globals(), locals(), [])
A:numpy.lib._utils_impl.thisdict->totraverse.pop(0)
A:numpy.lib._utils_impl.cls->getattr(obj, '__class__', type(obj))
A:numpy.lib._utils_impl.nm->getattr(cls, '__name__', cls)
A:numpy.lib._utils_impl.(_namedict, _dictlist)->_makenamedict(toplevel)
A:numpy.lib._utils_impl.arguments->str(inspect.signature(object))
A:numpy.lib._utils_impl.argstr->_split_line(name, arguments, maxwidth)
A:numpy.lib._utils_impl.doc1->inspect.getdoc(object)
A:numpy.lib._utils_impl.methods->pydoc.allmethods(object)
A:numpy.lib._utils_impl.thisobj->getattr(object, meth, None)
A:numpy.lib._utils_impl.(methstr, other)->pydoc.splitdoc(inspect.getdoc(thisobj) or 'None')
A:numpy.lib._utils_impl.potential_nans->data.take(-1, axis=axis)
A:numpy.lib._utils_impl.n->n.filled(False).filled(False)
A:numpy.lib._utils_impl.enabled_features->' '.join(__cpu_baseline__)
A:numpy.lib._utils_impl.field_dt->drop_metadata(field[0])
A:numpy.lib._utils_impl.structure->dict(names=names, formats=formats, offsets=offsets, titles=titles, itemsize=dtype.itemsize)
A:numpy.lib._utils_impl.new_subdtype->drop_metadata(subdtype)
numpy.get_include()
numpy.info(object=None,maxwidth=76,output=None,toplevel='numpy')
numpy.lib._utils_impl._Deprecate(self,old_name=None,new_name=None,message=None)
numpy.lib._utils_impl._Deprecate.__init__(self,old_name=None,new_name=None,message=None)
numpy.lib._utils_impl._get_indent(lines)
numpy.lib._utils_impl._info(obj,output=None)
numpy.lib._utils_impl._makenamedict(module='numpy')
numpy.lib._utils_impl._median_nancheck(data,result,axis)
numpy.lib._utils_impl._opt_info()
numpy.lib._utils_impl._split_line(name,arguments,width)
numpy.lib._utils_impl.deprecate(*args,**kwargs)
numpy.lib._utils_impl.deprecate_with_doc(msg)
numpy.lib._utils_impl.drop_metadata(dtype,/)
numpy.lib._utils_impl.get_include()
numpy.lib._utils_impl.info(object=None,maxwidth=76,output=None,toplevel='numpy')
numpy.lib._utils_impl.safe_eval(source)
numpy.lib._utils_impl.show_runtime()
numpy.show_runtime()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_utils_impl.pyi----------------------------------------
numpy.lib._utils_impl._SupportsWrite(Protocol[_T_contra])
numpy.lib._utils_impl._SupportsWrite.write(self,s:_T_contra,/)->Any
numpy.lib._utils_impl.source(object:object,output:None|_SupportsWrite[str]=...)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/__init__.py----------------------------------------
A:numpy.lib.__init__.test->PytestTester(__name__)
numpy.lib.__init__.__getattr__(attr)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arraysetops_impl.py----------------------------------------
A:numpy.lib._arraysetops_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._arraysetops_impl.conv->_array_converter(ary)
A:numpy.lib._arraysetops_impl.ary->conv[0].ravel()
A:numpy.lib._arraysetops_impl.to_begin->to_begin.ravel().ravel()
A:numpy.lib._arraysetops_impl.l_begin->len(to_begin)
A:numpy.lib._arraysetops_impl.to_end->to_end.ravel().ravel()
A:numpy.lib._arraysetops_impl.l_end->len(to_end)
A:numpy.lib._arraysetops_impl.l_diff->max(len(ary) - 1, 0)
A:numpy.lib._arraysetops_impl.result->unique(x, return_index=False, return_inverse=True, return_counts=False, equal_nan=False)
A:numpy.lib._arraysetops_impl.ar->numpy.concatenate((ar1, ar2))
A:numpy.lib._arraysetops_impl.ret->numpy.empty(ar.shape, dtype=bool)
A:numpy.lib._arraysetops_impl.consolidated->numpy.empty(len(ar), dtype=dtype)
A:numpy.lib._arraysetops_impl.n->len(uniq)
A:numpy.lib._arraysetops_impl.uniq->numpy.moveaxis(uniq, 0, axis)
A:numpy.lib._arraysetops_impl.output->_unique1d(consolidated, return_index, return_inverse, return_counts, equal_nan=equal_nan, inverse_shape=inverse_shape, axis=axis)
A:numpy.lib._arraysetops_impl.perm->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort' if return_index else 'quicksort')
A:numpy.lib._arraysetops_impl.mask->numpy.zeros(len(ar1), dtype=bool)
A:numpy.lib._arraysetops_impl.aux_firstnan->numpy.searchsorted(aux, aux[-1], side='left')
A:numpy.lib._arraysetops_impl.inv_idx->numpy.empty(mask.shape, dtype=np.intp)
A:numpy.lib._arraysetops_impl.idx->numpy.concatenate(np.nonzero(mask) + ([mask.size],))
A:numpy.lib._arraysetops_impl.ar1->unique(ar1)
A:numpy.lib._arraysetops_impl.ar2->unique(ar2)
A:numpy.lib._arraysetops_impl.(ar1, ind1)->unique(ar1, return_index=True)
A:numpy.lib._arraysetops_impl.(ar2, ind2)->unique(ar2, return_index=True)
A:numpy.lib._arraysetops_impl.aux->numpy.concatenate((ar1, ar2))
A:numpy.lib._arraysetops_impl.aux_sort_indices->numpy.argsort(aux, kind='mergesort')
A:numpy.lib._arraysetops_impl.flag->numpy.concatenate((bool_ar, [invert]))
A:numpy.lib._arraysetops_impl.is_int_arrays->all((ar.dtype.kind in ('u', 'i', 'b') for ar in (ar1, ar2)))
A:numpy.lib._arraysetops_impl.ar2_min->numpy.array(ar2_min, dtype=np.intp)
A:numpy.lib._arraysetops_impl.ar2_max->int(np.max(ar2))
A:numpy.lib._arraysetops_impl.outgoing_array->numpy.zeros_like(ar1, dtype=bool)
A:numpy.lib._arraysetops_impl.isin_helper_ar->numpy.zeros(ar2_range + 1, dtype=bool)
A:numpy.lib._arraysetops_impl.out->numpy.empty_like(in_range_ar1, dtype=np.intp)
A:numpy.lib._arraysetops_impl.(ar1, rev_idx)->numpy.unique(ar1, return_inverse=True)
A:numpy.lib._arraysetops_impl.order->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:numpy.lib._arraysetops_impl.element->numpy.asarray(element)
numpy.ediff1d(ary,to_end=None,to_begin=None)
numpy.in1d(ar1,ar2,assume_unique=False,invert=False,*,kind=None)
numpy.intersect1d(ar1,ar2,assume_unique=False,return_indices=False)
numpy.isin(element,test_elements,assume_unique=False,invert=False,*,kind=None)
numpy.lib._arraysetops_impl.UniqueAllResult(NamedTuple)
numpy.lib._arraysetops_impl.UniqueCountsResult(NamedTuple)
numpy.lib._arraysetops_impl.UniqueInverseResult(NamedTuple)
numpy.lib._arraysetops_impl._ediff1d_dispatcher(ary,to_end=None,to_begin=None)
numpy.lib._arraysetops_impl._in1d(ar1,ar2,assume_unique=False,invert=False,*,kind=None)
numpy.lib._arraysetops_impl._in1d_dispatcher(ar1,ar2,assume_unique=None,invert=None,*,kind=None)
numpy.lib._arraysetops_impl._intersect1d_dispatcher(ar1,ar2,assume_unique=None,return_indices=None)
numpy.lib._arraysetops_impl._isin_dispatcher(element,test_elements,assume_unique=None,invert=None,*,kind=None)
numpy.lib._arraysetops_impl._setdiff1d_dispatcher(ar1,ar2,assume_unique=None)
numpy.lib._arraysetops_impl._setxor1d_dispatcher(ar1,ar2,assume_unique=None)
numpy.lib._arraysetops_impl._union1d_dispatcher(ar1,ar2)
numpy.lib._arraysetops_impl._unique1d(ar,return_index=False,return_inverse=False,return_counts=False,*,equal_nan=True,inverse_shape=None,axis=None)
numpy.lib._arraysetops_impl._unique_all_dispatcher(x,/)
numpy.lib._arraysetops_impl._unique_counts_dispatcher(x,/)
numpy.lib._arraysetops_impl._unique_dispatcher(ar,return_index=None,return_inverse=None,return_counts=None,axis=None,*,equal_nan=None)
numpy.lib._arraysetops_impl._unique_inverse_dispatcher(x,/)
numpy.lib._arraysetops_impl._unique_values_dispatcher(x,/)
numpy.lib._arraysetops_impl._unpack_tuple(x)
numpy.lib._arraysetops_impl.ediff1d(ary,to_end=None,to_begin=None)
numpy.lib._arraysetops_impl.in1d(ar1,ar2,assume_unique=False,invert=False,*,kind=None)
numpy.lib._arraysetops_impl.intersect1d(ar1,ar2,assume_unique=False,return_indices=False)
numpy.lib._arraysetops_impl.isin(element,test_elements,assume_unique=False,invert=False,*,kind=None)
numpy.lib._arraysetops_impl.setdiff1d(ar1,ar2,assume_unique=False)
numpy.lib._arraysetops_impl.setxor1d(ar1,ar2,assume_unique=False)
numpy.lib._arraysetops_impl.union1d(ar1,ar2)
numpy.lib._arraysetops_impl.unique(ar,return_index=False,return_inverse=False,return_counts=False,axis=None,*,equal_nan=True)
numpy.lib._arraysetops_impl.unique_all(x)
numpy.lib._arraysetops_impl.unique_counts(x)
numpy.lib._arraysetops_impl.unique_inverse(x)
numpy.lib._arraysetops_impl.unique_values(x)
numpy.setdiff1d(ar1,ar2,assume_unique=False)
numpy.setxor1d(ar1,ar2,assume_unique=False)
numpy.union1d(ar1,ar2)
numpy.unique(ar,return_index=False,return_inverse=False,return_counts=False,axis=None,*,equal_nan=True)
numpy.unique_all(x)
numpy.unique_counts(x)
numpy.unique_inverse(x)
numpy.unique_values(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arraysetops_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/array_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/array_utils.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_function_base_impl.py----------------------------------------
A:numpy.lib._function_base_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._function_base_impl._QuantileMethods->dict(inverted_cdf=dict(get_virtual_index=lambda n, quantiles: _inverted_cdf(n, quantiles), fix_gamma=None), averaged_inverted_cdf=dict(get_virtual_index=lambda n, quantiles: n * quantiles - 1, fix_gamma=lambda gamma, _: _get_gamma_mask(shape=gamma.shape, default_value=1.0, conditioned_value=0.5, where=gamma == 0)), closest_observation=dict(get_virtual_index=lambda n, quantiles: _closest_observation(n, quantiles), fix_gamma=None), interpolated_inverted_cdf=dict(get_virtual_index=lambda n, quantiles: _compute_virtual_index(n, quantiles, 0, 1), fix_gamma=lambda gamma, _: gamma), hazen=dict(get_virtual_index=lambda n, quantiles: _compute_virtual_index(n, quantiles, 0.5, 0.5), fix_gamma=lambda gamma, _: gamma), weibull=dict(get_virtual_index=lambda n, quantiles: _compute_virtual_index(n, quantiles, 0, 0), fix_gamma=lambda gamma, _: gamma), linear=dict(get_virtual_index=lambda n, quantiles: (n - 1) * quantiles, fix_gamma=lambda gamma, _: gamma), median_unbiased=dict(get_virtual_index=lambda n, quantiles: _compute_virtual_index(n, quantiles, 1 / 3.0, 1 / 3.0), fix_gamma=lambda gamma, _: gamma), normal_unbiased=dict(get_virtual_index=lambda n, quantiles: _compute_virtual_index(n, quantiles, 3 / 8.0, 3 / 8.0), fix_gamma=lambda gamma, _: gamma), lower=dict(get_virtual_index=lambda n, quantiles: np.floor((n - 1) * quantiles).astype(np.intp), fix_gamma=None), higher=dict(get_virtual_index=lambda n, quantiles: np.ceil((n - 1) * quantiles).astype(np.intp), fix_gamma=None), midpoint=dict(get_virtual_index=lambda n, quantiles: 0.5 * (np.floor((n - 1) * quantiles) + np.ceil((n - 1) * quantiles)), fix_gamma=lambda gamma, index: _get_gamma_mask(shape=gamma.shape, default_value=0.5, conditioned_value=0.0, where=index % 1 == 0)), nearest=dict(get_virtual_index=lambda n, quantiles: np.around((n - 1) * quantiles).astype(np.intp), fix_gamma=None))
A:numpy.lib._function_base_impl.axes->numpy._core.numeric.normalize_axis_tuple(axis, N)
A:numpy.lib._function_base_impl.m->numpy.asarray(m)
A:numpy.lib._function_base_impl.axes_list->arange(0, m.ndim)
A:numpy.lib._function_base_impl.axis->normalize_axis_index(axis, ndim)
A:numpy.lib._function_base_impl.indexer->tuple(indexer)
A:numpy.lib._function_base_impl.wgt->_weights_are_valid(weights=weights, a=a, axis=axis)
A:numpy.lib._function_base_impl.a->numpy.asanyarray(a)
A:numpy.lib._function_base_impl.avg->numpy.asanyarray(a).mean(axis, **keepdims_kw)
A:numpy.lib._function_base_impl.avg_as_array->numpy.asanyarray(avg)
A:numpy.lib._function_base_impl.scl->numpy.broadcast_to(scl, avg_as_array.shape).copy()
A:numpy.lib._function_base_impl.result_dtype->numpy.result_type(a.dtype, wgt.dtype)
A:numpy.lib._function_base_impl.x->numpy._core.numeric.asarray(x)
A:numpy.lib._function_base_impl.n2->len(funclist)
A:numpy.lib._function_base_impl.condlist->numpy.broadcast_arrays(*condlist)
A:numpy.lib._function_base_impl.n->arange(0, M)
A:numpy.lib._function_base_impl.y->numpy.asarray(y)
A:numpy.lib._function_base_impl.y[cond]->func(vals, *args, **kw)
A:numpy.lib._function_base_impl.dtype->numpy.result_type(m, y, np.float64)
A:numpy.lib._function_base_impl.choicelist->numpy.broadcast_arrays(*choicelist)
A:numpy.lib._function_base_impl.result->result.item().item()
A:numpy.lib._function_base_impl.f->f.astype(np.float64).astype(np.float64)
A:numpy.lib._function_base_impl.len_axes->len(axes)
A:numpy.lib._function_base_impl.dx->list(varargs)
A:numpy.lib._function_base_impl.distances->distances.astype(np.float64).astype(np.float64)
A:numpy.lib._function_base_impl.diffx->numpy.diff(distances)
A:numpy.lib._function_base_impl.otype->numpy.dtype(otype.name.replace('datetime', 'timedelta'))
A:numpy.lib._function_base_impl.out->numpy.full(shape, default_value)
A:numpy.lib._function_base_impl.slice1[axis]->slice(1, None)
A:numpy.lib._function_base_impl.slice2[axis]->slice(None, -1)
A:numpy.lib._function_base_impl.slice3[axis]->slice(None)
A:numpy.lib._function_base_impl.slice4[axis]->slice(None)
A:numpy.lib._function_base_impl.shape->list(a.shape)
A:numpy.lib._function_base_impl.prepend->numpy.broadcast_to(prepend, tuple(shape))
A:numpy.lib._function_base_impl.append->numpy.broadcast_to(append, tuple(shape))
A:numpy.lib._function_base_impl.slice1->tuple(slice1)
A:numpy.lib._function_base_impl.slice2->tuple(slice2)
A:numpy.lib._function_base_impl.fp->numpy.concatenate((fp[-1:], fp, fp[0:1]))
A:numpy.lib._function_base_impl.period->abs(period)
A:numpy.lib._function_base_impl.xp->numpy.concatenate((xp[-1:] - period, xp, xp[0:1] + period))
A:numpy.lib._function_base_impl.asort_xp->numpy.argsort(xp)
A:numpy.lib._function_base_impl.z->asanyarray(z)
A:numpy.lib._function_base_impl.p->asarray(p)
A:numpy.lib._function_base_impl.dd->diff(p, axis=axis)
A:numpy.lib._function_base_impl.(interval_high, rem)->divmod(period, 2)
A:numpy.lib._function_base_impl.up->array(p, copy=True, dtype=dtype)
A:numpy.lib._function_base_impl.b->array(a, copy=True)
A:numpy.lib._function_base_impl.trim->trim.upper().upper()
A:numpy.lib._function_base_impl.last->len(filt)
A:numpy.lib._function_base_impl._CORE_DIMENSION_LIST->'(?:{0:}(?:,{0:})*)?'.format(_DIMENSION_NAME)
A:numpy.lib._function_base_impl._ARGUMENT->'\\({}\\)'.format(_CORE_DIMENSION_LIST)
A:numpy.lib._function_base_impl._ARGUMENT_LIST->'{0:}(?:,{0:})*'.format(_ARGUMENT)
A:numpy.lib._function_base_impl._SIGNATURE->'^{0:}->{0:}$'.format(_ARGUMENT_LIST)
A:numpy.lib._function_base_impl.signature->re.sub('\\s+', '', signature)
A:numpy.lib._function_base_impl.num_core_dims->len(core_dims)
A:numpy.lib._function_base_impl.dummy_array->numpy.lib.stride_tricks.as_strided(0, arg.shape[:ndim])
A:numpy.lib._function_base_impl.broadcast_shape->numpy.lib._stride_tricks_impl._broadcast_shape(*broadcast_args)
A:numpy.lib._function_base_impl.shapes->_calculate_shapes(broadcast_shape, dim_sizes, list_of_core_dims)
A:numpy.lib._function_base_impl.arrays->tuple((np.empty_like(result, shape=shape, dtype=dtype) for (result, shape, dtype) in zip(results, shapes, dtypes)))
A:numpy.lib._function_base_impl.excluded->set()
A:numpy.lib._function_base_impl.self.excluded->set(excluded)
A:numpy.lib._function_base_impl.self._in_and_out_core_dims->_parse_gufunc_signature(signature)
A:numpy.lib._function_base_impl.nargs->len(args)
A:numpy.lib._function_base_impl.the_args->list(args)
A:numpy.lib._function_base_impl.nin->len(args)
A:numpy.lib._function_base_impl.nout->len(output_core_dims)
A:numpy.lib._function_base_impl.ufunc->frompyfunc(_func, len(args), nout)
A:numpy.lib._function_base_impl.outputs->_create_arrays(broadcast_shape, dim_sizes, output_core_dims, otypes)
A:numpy.lib._function_base_impl.otypes->''.join([asarray(outputs[_k]).dtype.char for _k in range(nout)])
A:numpy.lib._function_base_impl.res->_get_gamma_mask(shape=index.shape, default_value=next, conditioned_value=previous, where=gamma_condition_fun(gamma, index)).astype(np.intp)
A:numpy.lib._function_base_impl.(ufunc, otypes)->self._get_ufunc_and_otypes(func=func, args=args)
A:numpy.lib._function_base_impl.args->tuple((asanyarray(arg) for arg in args))
A:numpy.lib._function_base_impl.(broadcast_shape, dim_sizes)->_parse_input_dimensions(args, input_core_dims)
A:numpy.lib._function_base_impl.input_shapes->_calculate_shapes(broadcast_shape, dim_sizes, input_core_dims)
A:numpy.lib._function_base_impl.results->func(*(arg[index] for arg in args))
A:numpy.lib._function_base_impl.X->numpy.concatenate((X, y), axis=0)
A:numpy.lib._function_base_impl.fweights->numpy.asarray(fweights, dtype=float)
A:numpy.lib._function_base_impl.aweights->numpy.asarray(aweights, dtype=float)
A:numpy.lib._function_base_impl.(avg, w_sum)->average(X, axis=1, weights=w, returned=True)
A:numpy.lib._function_base_impl.c->cov(x, y, rowvar, dtype=dtype)
A:numpy.lib._function_base_impl.d->numpy.asarray(d)
A:numpy.lib._function_base_impl.stddev->sqrt(d.real)
A:numpy.lib._function_base_impl.values->ravel(values)
A:numpy.lib._function_base_impl.index_out->tuple((0 if i in axis else slice(None) for i in range(nd)))
A:numpy.lib._function_base_impl.nkeep->len(keep)
A:numpy.lib._function_base_impl.r->func(a, **kwargs)
A:numpy.lib._function_base_impl.index_r->tuple((np.newaxis if i in axis else slice(None) for i in range(nd)))
A:numpy.lib._function_base_impl.part->partition(a, kth, axis=axis)
A:numpy.lib._function_base_impl.indexer[axis]->slice(index - 1, index + 1)
A:numpy.lib._function_base_impl.rout->numpy.lib._utils_impl._median_nancheck(part, rout, axis)
A:numpy.lib._function_base_impl.method->_check_interpolation_as_method(method, interpolation, 'quantile')
A:numpy.lib._function_base_impl.q->numpy.asanyarray(q)
A:numpy.lib._function_base_impl.weights->numpy.take_along_axis(weights, index_array, axis=0)
A:numpy.lib._function_base_impl.gamma->gamma.reshape(result_shape).reshape(result_shape)
A:numpy.lib._function_base_impl.diff_b_a->subtract(b, a)
A:numpy.lib._function_base_impl.lerp_interpolation->asanyarray(add(a, diff_b_a * t, out=out))
A:numpy.lib._function_base_impl.previous->numpy.floor(index)
A:numpy.lib._function_base_impl.arr->arr.ravel().ravel()
A:numpy.lib._function_base_impl.previous_indexes->previous_indexes.astype(np.intp).astype(np.intp)
A:numpy.lib._function_base_impl.next_indexes->next_indexes.astype(np.intp).astype(np.intp)
A:numpy.lib._function_base_impl.virtual_indexes_nans->numpy.isnan(virtual_indexes)
A:numpy.lib._function_base_impl.virtual_indexes->numpy.asanyarray(virtual_indexes)
A:numpy.lib._function_base_impl.int_virtual_indices->numpy.issubdtype(virtual_indexes.dtype, np.integer)
A:numpy.lib._function_base_impl.slices_having_nans->numpy.array(False, dtype=bool)
A:numpy.lib._function_base_impl.(previous_indexes, next_indexes)->_get_indexes(arr, virtual_indexes, values_count)
A:numpy.lib._function_base_impl.index_array->numpy.argsort(arr, axis=0, kind='stable')
A:numpy.lib._function_base_impl.cdf->cdf.astype(quantiles.dtype).astype(quantiles.dtype)
A:numpy.lib._function_base_impl.indices->indices.astype(intp).astype(intp)
A:numpy.lib._function_base_impl.result[(...,) + kk]->find_cdf_1d(arr[np.s_[:,] + kk], cdf[np.s_[:,] + kk])
A:numpy.lib._function_base_impl.ret->numpy._core.umath.add.reduce(d * (y[tuple(slice1)] + y[tuple(slice2)]) / 2.0, axis)
A:numpy.lib._function_base_impl.ndim->len(xi)
A:numpy.lib._function_base_impl.output->tuple((x.copy() for x in output))
A:numpy.lib._function_base_impl.conv->_array_converter(arr)
A:numpy.lib._function_base_impl.(arr,)->_array_converter(arr).as_arrays(subok=False)
A:numpy.lib._function_base_impl.newshape->list(arr.shape)
A:numpy.lib._function_base_impl.(start, stop, step)->obj.item().indices(N)
A:numpy.lib._function_base_impl.xr->range(start, stop, step)
A:numpy.lib._function_base_impl.numtodel->len(xr)
A:numpy.lib._function_base_impl.new->empty(newshape, arr.dtype, arrorder)
A:numpy.lib._function_base_impl.slobj[axis]->slice(index + numnew, None)
A:numpy.lib._function_base_impl.slobj2[axis]->slice(index, None)
A:numpy.lib._function_base_impl.keep->ones(N, dtype=bool)
A:numpy.lib._function_base_impl.obj->obj.item().item()
A:numpy.lib._function_base_impl.index->indices.astype(intp).astype(intp).item()
A:numpy.lib._function_base_impl.numnew->len(indices)
A:numpy.lib._function_base_impl.order->indices.astype(intp).astype(intp).argsort(kind='mergesort')
A:numpy.lib._function_base_impl.old_mask->ones(newshape[axis], dtype=bool)
A:numpy.lib._function_base_impl.bins->numpy._core.numeric.asarray(bins)
A:numpy.lib._function_base_impl.mono->_monotonicity(bins)
numpy.angle(z,deg=False)
numpy.append(arr,values,axis=None)
numpy.asarray_chkfinite(a,dtype=None,order=None)
numpy.average(a,axis=None,weights=None,returned=False,*,keepdims=np._NoValue)
numpy.bartlett(M)
numpy.blackman(M)
numpy.copy(a,order='K',subok=False)
numpy.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,ddof=np._NoValue,*,dtype=None)
numpy.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.delete(arr,obj,axis=None)
numpy.diff(a,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.digitize(x,bins,right=False)
numpy.extract(condition,arr)
numpy.flip(m,axis=None)
numpy.gradient(f,*varargs,axis=None,edge_order=1)
numpy.hamming(M)
numpy.hanning(M)
numpy.i0(x)
numpy.insert(arr,obj,values,axis=None)
numpy.interp(x,xp,fp,left=None,right=None,period=None)
numpy.iterable(y)
numpy.kaiser(M,beta)
numpy.lib._function_base_impl._angle_dispatcher(z,deg=None)
numpy.lib._function_base_impl._append_dispatcher(arr,values,axis=None)
numpy.lib._function_base_impl._average_dispatcher(a,axis=None,weights=None,returned=None,*,keepdims=None)
numpy.lib._function_base_impl._calculate_shapes(broadcast_shape,dim_sizes,list_of_core_dims)
numpy.lib._function_base_impl._chbevl(x,vals)
numpy.lib._function_base_impl._check_interpolation_as_method(method,interpolation,fname)
numpy.lib._function_base_impl._closest_observation(n,quantiles)
numpy.lib._function_base_impl._compute_virtual_index(n,quantiles,alpha:float,beta:float)
numpy.lib._function_base_impl._copy_dispatcher(a,order=None,subok=None)
numpy.lib._function_base_impl._corrcoef_dispatcher(x,y=None,rowvar=None,bias=None,ddof=None,*,dtype=None)
numpy.lib._function_base_impl._cov_dispatcher(m,y=None,rowvar=None,bias=None,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.lib._function_base_impl._create_arrays(broadcast_shape,dim_sizes,list_of_core_dims,dtypes,results=None)
numpy.lib._function_base_impl._delete_dispatcher(arr,obj,axis=None)
numpy.lib._function_base_impl._diff_dispatcher(a,n=None,axis=None,prepend=None,append=None)
numpy.lib._function_base_impl._digitize_dispatcher(x,bins,right=None)
numpy.lib._function_base_impl._discret_interpolation_to_boundaries(index,gamma_condition_fun)
numpy.lib._function_base_impl._extract_dispatcher(condition,arr)
numpy.lib._function_base_impl._flip_dispatcher(m,axis=None)
numpy.lib._function_base_impl._get_gamma(virtual_indexes,previous_indexes,method)
numpy.lib._function_base_impl._get_gamma_mask(shape,default_value,conditioned_value,where)
numpy.lib._function_base_impl._get_indexes(arr,virtual_indexes,valid_values_count)
numpy.lib._function_base_impl._get_vectorize_dtype(dtype)
numpy.lib._function_base_impl._gradient_dispatcher(f,*varargs,axis=None,edge_order=None)
numpy.lib._function_base_impl._i0_1(x)
numpy.lib._function_base_impl._i0_2(x)
numpy.lib._function_base_impl._i0_dispatcher(x)
numpy.lib._function_base_impl._insert_dispatcher(arr,obj,values,axis=None)
numpy.lib._function_base_impl._interp_dispatcher(x,xp,fp,left=None,right=None,period=None)
numpy.lib._function_base_impl._inverted_cdf(n,quantiles)
numpy.lib._function_base_impl._lerp(a,b,t,out=None)
numpy.lib._function_base_impl._median(a,axis=None,out=None,overwrite_input=False)
numpy.lib._function_base_impl._median_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy.lib._function_base_impl._meshgrid_dispatcher(*xi,copy=None,sparse=None,indexing=None)
numpy.lib._function_base_impl._parse_gufunc_signature(signature)
numpy.lib._function_base_impl._parse_input_dimensions(args,input_core_dims)
numpy.lib._function_base_impl._percentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,method=None,keepdims=None,*,weights=None,interpolation=None)
numpy.lib._function_base_impl._piecewise_dispatcher(x,condlist,funclist,*args,**kw)
numpy.lib._function_base_impl._place_dispatcher(arr,mask,vals)
numpy.lib._function_base_impl._quantile(arr:np.array,quantiles:np.array,axis:int=-1,method='linear',out=None,weights=None)
numpy.lib._function_base_impl._quantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,method=None,keepdims=None,*,weights=None,interpolation=None)
numpy.lib._function_base_impl._quantile_is_valid(q)
numpy.lib._function_base_impl._quantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=False,weights=None)
numpy.lib._function_base_impl._quantile_ureduce_func(a:np.array,q:np.array,weights:np.array,axis:int=None,out=None,overwrite_input:bool=False,method='linear')->np.array
numpy.lib._function_base_impl._rot90_dispatcher(m,k=None,axes=None)
numpy.lib._function_base_impl._select_dispatcher(condlist,choicelist,default=None)
numpy.lib._function_base_impl._sinc_dispatcher(x)
numpy.lib._function_base_impl._sort_complex(a)
numpy.lib._function_base_impl._trapezoid_dispatcher(y,x=None,dx=None,axis=None)
numpy.lib._function_base_impl._trim_zeros(filt,trim=None)
numpy.lib._function_base_impl._unwrap_dispatcher(p,discont=None,axis=None,*,period=None)
numpy.lib._function_base_impl._update_dim_sizes(dim_sizes,arg,core_dims)
numpy.lib._function_base_impl._ureduce(a,func,keepdims=False,**kwargs)
numpy.lib._function_base_impl._weights_are_valid(weights,a,axis)
numpy.lib._function_base_impl.angle(z,deg=False)
numpy.lib._function_base_impl.append(arr,values,axis=None)
numpy.lib._function_base_impl.asarray_chkfinite(a,dtype=None,order=None)
numpy.lib._function_base_impl.average(a,axis=None,weights=None,returned=False,*,keepdims=np._NoValue)
numpy.lib._function_base_impl.bartlett(M)
numpy.lib._function_base_impl.blackman(M)
numpy.lib._function_base_impl.copy(a,order='K',subok=False)
numpy.lib._function_base_impl.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,ddof=np._NoValue,*,dtype=None)
numpy.lib._function_base_impl.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.lib._function_base_impl.delete(arr,obj,axis=None)
numpy.lib._function_base_impl.diff(a,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.lib._function_base_impl.digitize(x,bins,right=False)
numpy.lib._function_base_impl.disp(mesg,device=None,linefeed=True)
numpy.lib._function_base_impl.extract(condition,arr)
numpy.lib._function_base_impl.flip(m,axis=None)
numpy.lib._function_base_impl.gradient(f,*varargs,axis=None,edge_order=1)
numpy.lib._function_base_impl.hamming(M)
numpy.lib._function_base_impl.hanning(M)
numpy.lib._function_base_impl.i0(x)
numpy.lib._function_base_impl.insert(arr,obj,values,axis=None)
numpy.lib._function_base_impl.interp(x,xp,fp,left=None,right=None,period=None)
numpy.lib._function_base_impl.iterable(y)
numpy.lib._function_base_impl.kaiser(M,beta)
numpy.lib._function_base_impl.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.lib._function_base_impl.meshgrid(*xi,copy=True,sparse=False,indexing='xy')
numpy.lib._function_base_impl.percentile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=False,*,weights=None,interpolation=None)
numpy.lib._function_base_impl.piecewise(x,condlist,funclist,*args,**kw)
numpy.lib._function_base_impl.place(arr,mask,vals)
numpy.lib._function_base_impl.quantile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=False,*,weights=None,interpolation=None)
numpy.lib._function_base_impl.rot90(m,k=1,axes=(0,1))
numpy.lib._function_base_impl.select(condlist,choicelist,default=0)
numpy.lib._function_base_impl.sinc(x)
numpy.lib._function_base_impl.sort_complex(a)
numpy.lib._function_base_impl.trapezoid(y,x=None,dx=1.0,axis=-1)
numpy.lib._function_base_impl.trapz(y,x=None,dx=1.0,axis=-1)
numpy.lib._function_base_impl.trim_zeros(filt,trim='fb')
numpy.lib._function_base_impl.unwrap(p,discont=None,axis=-1,*,period=2*pi)
numpy.lib._function_base_impl.vectorize(self,pyfunc=np._NoValue,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.lib._function_base_impl.vectorize.__init__(self,pyfunc=np._NoValue,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.lib._function_base_impl.vectorize._call_as_normal(self,*args,**kwargs)
numpy.lib._function_base_impl.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.lib._function_base_impl.vectorize._init_stage_2(self,pyfunc,*args,**kwargs)
numpy.lib._function_base_impl.vectorize._vectorize_call(self,func,args)
numpy.lib._function_base_impl.vectorize._vectorize_call_with_signature(self,func,args)
numpy.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.meshgrid(*xi,copy=True,sparse=False,indexing='xy')
numpy.percentile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=False,*,weights=None,interpolation=None)
numpy.piecewise(x,condlist,funclist,*args,**kw)
numpy.place(arr,mask,vals)
numpy.quantile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=False,*,weights=None,interpolation=None)
numpy.rot90(m,k=1,axes=(0,1))
numpy.select(condlist,choicelist,default=0)
numpy.sinc(x)
numpy.sort_complex(a)
numpy.trapezoid(y,x=None,dx=1.0,axis=-1)
numpy.trapz(y,x=None,dx=1.0,axis=-1)
numpy.trim_zeros(filt,trim='fb')
numpy.unwrap(p,discont=None,axis=-1,*,period=2*pi)
numpy.vectorize(self,pyfunc=np._NoValue,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.vectorize._call_as_normal(self,*args,**kwargs)
numpy.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.vectorize._init_stage_2(self,pyfunc,*args,**kwargs)
numpy.vectorize._vectorize_call(self,func,args)
numpy.vectorize._vectorize_call_with_signature(self,func,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_function_base_impl.pyi----------------------------------------
numpy.lib._function_base_impl._SupportsWriteFlush(Protocol)
numpy.lib._function_base_impl._SupportsWriteFlush.flush(self)->object
numpy.lib._function_base_impl._SupportsWriteFlush.write(self,s:str,/)->object
numpy.lib._function_base_impl._TrimZerosSequence(Protocol[_T_co])
numpy.lib._function_base_impl._TrimZerosSequence.__getitem__(self,key:slice,/)->_T_co
numpy.lib._function_base_impl._TrimZerosSequence.__iter__(self)->Iterator[Any]
numpy.lib._function_base_impl._TrimZerosSequence.__len__(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_npyio_impl.py----------------------------------------
A:numpy.lib._npyio_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._npyio_impl.self._obj->weakref.proxy(obj)
A:numpy.lib._npyio_impl.file->numpy.lib._datasource.open(file, 'rt', encoding=encoding)
A:numpy.lib._npyio_impl._zip->zipfile_factory(fid)
A:numpy.lib._npyio_impl.self._files->zipfile_factory(fid).namelist()
A:numpy.lib._npyio_impl.self.f->BagObj(self)
A:numpy.lib._npyio_impl.bytes->self.zip.open(key)
A:numpy.lib._npyio_impl.magic->numpy.lib._datasource.open(fname, 'rt', encoding=encoding).read(N)
A:numpy.lib._npyio_impl.filename->getattr(self.fid, 'name', 'object')
A:numpy.lib._npyio_impl.array_names->', '.join(self.files[:self._MAX_REPR_ARRAY_COUNT])
A:numpy.lib._npyio_impl.pickle_kwargs->dict(encoding=encoding, fix_imports=fix_imports)
A:numpy.lib._npyio_impl.fid->numpy.lib._datasource.open(fname, 'rt', encoding=encoding)
A:numpy.lib._npyio_impl.N->len(format.MAGIC_PREFIX)
A:numpy.lib._npyio_impl.ret->NpzFile(fid, own_fid=own_fid, allow_pickle=allow_pickle, pickle_kwargs=pickle_kwargs, max_header_size=max_header_size)
A:numpy.lib._npyio_impl.file_ctx->open(file, 'wb')
A:numpy.lib._npyio_impl.arr->_read(fname, dtype=dtype, comment=comment, delimiter=delimiter, converters=converters, skiplines=skiprows, usecols=usecols, unpack=unpack, ndmin=ndmin, encoding=encoding, max_rows=max_rows, quote=quotechar)
A:numpy.lib._npyio_impl.zipf->zipfile_factory(file, mode='w', compression=compression)
A:numpy.lib._npyio_impl.val->numpy.asanyarray(val)
A:numpy.lib._npyio_impl.a->numpy.atleast_1d(a)
A:numpy.lib._npyio_impl.line->line.decode(encoding).decode(encoding)
A:numpy.lib._npyio_impl.dtype->numpy.dtype(ttype)
A:numpy.lib._npyio_impl.usecols->list(usecols)
A:numpy.lib._npyio_impl.comments->tuple(comment)
A:numpy.lib._npyio_impl.fh_closing_ctx->contextlib.closing(fh)
A:numpy.lib._npyio_impl.fname->os.fspath(fname)
A:numpy.lib._npyio_impl.fh->WriteWrap(fname, encoding or 'latin1')
A:numpy.lib._npyio_impl.encoding->getattr(fname, 'encoding', 'latin1')
A:numpy.lib._npyio_impl.data->iter(data)
A:numpy.lib._npyio_impl.chunk_size->min(_loadtxt_chunksize, max_rows)
A:numpy.lib._npyio_impl.next_arr->_load_from_filelike(data, delimiter=delimiter, comment=comment, quote=quote, imaginary_unit=imaginary_unit, usecols=usecols, skiplines=skiplines, max_rows=chunk_size, converters=converters, dtype=dtype, encoding=encoding, filelike=filelike, byte_converters=byte_converters, c_byte_converters=c_byte_converters)
A:numpy.lib._npyio_impl.delimiter->delimiter.decode('latin1').decode('latin1')
A:numpy.lib._npyio_impl._loadtxt_with_like->array_function_dispatch()(loadtxt)
A:numpy.lib._npyio_impl.X->numpy.asarray(X)
A:numpy.lib._npyio_impl.ncol->len(X.dtype.names)
A:numpy.lib._npyio_impl.iscomplex_X->numpy.iscomplexobj(X)
A:numpy.lib._npyio_impl.format->delimiter.decode('latin1').decode('latin1').join(fmt)
A:numpy.lib._npyio_impl.n_fmt_chars->fmt.count('%')
A:numpy.lib._npyio_impl.error->ValueError('fmt has wrong number of %% formats:  %s' % fmt)
A:numpy.lib._npyio_impl.header->header.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib._npyio_impl.footer->footer.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib._npyio_impl.content->numpy.lib._datasource.open(file, 'rt', encoding=encoding).read()
A:numpy.lib._npyio_impl.regexp->re.compile(regexp)
A:numpy.lib._npyio_impl.seq->re.compile(regexp).findall(content)
A:numpy.lib._npyio_impl.newdtype->numpy.dtype(dtype[dtype.names[0]])
A:numpy.lib._npyio_impl.output->output.view(np.recarray).view(np.recarray)
A:numpy.lib._npyio_impl.fid_ctx->contextlib.nullcontext(fid)
A:numpy.lib._npyio_impl.fhd->iter(fid)
A:numpy.lib._npyio_impl.split_line->LineSplitter(delimiter=delimiter, comments=comments, autostrip=autostrip, encoding=encoding)
A:numpy.lib._npyio_impl.validate_names->NameValidator(excludelist=excludelist, deletechars=deletechars, case_sensitive=case_sensitive, replace_space=replace_space)
A:numpy.lib._npyio_impl.first_line->''.join(first_line.split(comments)[1:])
A:numpy.lib._npyio_impl.first_values->split_line(first_line)
A:numpy.lib._npyio_impl.fval->first_values[0].strip()
A:numpy.lib._npyio_impl.nbcols->len(usecols or first_values)
A:numpy.lib._npyio_impl.names->list(dtype.names)
A:numpy.lib._npyio_impl.usecols[i]->list(dtype.names).index(current)
A:numpy.lib._npyio_impl.user_missing_values->user_missing_values.decode('latin1').decode('latin1')
A:numpy.lib._npyio_impl.key->list(usecols).index(key)
A:numpy.lib._npyio_impl.value->str(value)
A:numpy.lib._npyio_impl.user_value->user_missing_values.decode('latin1').decode('latin1').split(',')
A:numpy.lib._npyio_impl.n->len(user_filling_values)
A:numpy.lib._npyio_impl.dtype_flat->flatten_dtype(dtype, flatten_base=True)
A:numpy.lib._npyio_impl.zipit->zip(missing_values, filling_values)
A:numpy.lib._npyio_impl.j->list(dtype.names).index(j)
A:numpy.lib._npyio_impl.i->list(usecols).index(j)
A:numpy.lib._npyio_impl.user_conv->functools.partial(tobytes_first, conv=conv)
A:numpy.lib._npyio_impl.values->split_line(line)
A:numpy.lib._npyio_impl.nbvalues->len(values)
A:numpy.lib._npyio_impl.current_column->map(itemgetter(i), rows)
A:numpy.lib._npyio_impl.nbinvalid->len(invalid)
A:numpy.lib._npyio_impl.nbinvalid_skipped->len([_ for _ in invalid if _[0] > nbrows + skip_header])
A:numpy.lib._npyio_impl.errmsg->'\n'.join(errmsg)
A:numpy.lib._npyio_impl.rows->numpy.array(data, dtype=[('', _) for _ in dtype_flat])
A:numpy.lib._npyio_impl.row->list(row_tup)
A:numpy.lib._npyio_impl.row[i]->row[i].encode('latin1').encode('latin1')
A:numpy.lib._npyio_impl.n_chars->max((len(row[i]) for row in data))
A:numpy.lib._npyio_impl.ddtype->list(zip(names, sized_column_types))
A:numpy.lib._npyio_impl.mdtype->make_mask_descr(dtype)
A:numpy.lib._npyio_impl.outputmask->numpy.array(masks, dtype=mdtype)
A:numpy.lib._npyio_impl.rowmasks->numpy.array(masks, dtype=np.dtype([('', bool) for t in dtype_flat]))
A:numpy.lib._npyio_impl._genfromtxt_with_like->array_function_dispatch()(genfromtxt)
A:numpy.lib._npyio_impl.usemask->kwargs.get('usemask', False)
numpy.fromregex(file,regexp,dtype,encoding=None)
numpy.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skip_header=0,skip_footer=0,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=''.join(sorted(NameValidator.defaultdeletechars)),replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True,max_rows=None,encoding=None,*,ndmin=0,like=None)
numpy.lib._npyio_impl.BagObj(self,obj)
numpy.lib._npyio_impl.BagObj.__dir__(self)
numpy.lib._npyio_impl.BagObj.__getattribute__(self,key)
numpy.lib._npyio_impl.BagObj.__init__(self,obj)
numpy.lib._npyio_impl.NpzFile(self,fid,own_fid=False,allow_pickle=False,pickle_kwargs=None,*,max_header_size=format._MAX_HEADER_SIZE)
numpy.lib._npyio_impl.NpzFile.__contains__(self,key)
numpy.lib._npyio_impl.NpzFile.__del__(self)
numpy.lib._npyio_impl.NpzFile.__enter__(self)
numpy.lib._npyio_impl.NpzFile.__exit__(self,exc_type,exc_value,traceback)
numpy.lib._npyio_impl.NpzFile.__getitem__(self,key)
numpy.lib._npyio_impl.NpzFile.__init__(self,fid,own_fid=False,allow_pickle=False,pickle_kwargs=None,*,max_header_size=format._MAX_HEADER_SIZE)
numpy.lib._npyio_impl.NpzFile.__iter__(self)
numpy.lib._npyio_impl.NpzFile.__len__(self)
numpy.lib._npyio_impl.NpzFile.__repr__(self)
numpy.lib._npyio_impl.NpzFile.close(self)
numpy.lib._npyio_impl.NpzFile.get(self,key,default=None,/)
numpy.lib._npyio_impl.NpzFile.items(self)
numpy.lib._npyio_impl.NpzFile.keys(self)
numpy.lib._npyio_impl.NpzFile.values(self)
numpy.lib._npyio_impl._check_nonneg_int(value,name='argument')
numpy.lib._npyio_impl._ensure_ndmin_ndarray(a,*,ndmin:int)
numpy.lib._npyio_impl._ensure_ndmin_ndarray_check_param(ndmin)
numpy.lib._npyio_impl._preprocess_comments(iterable,comments,encoding)
numpy.lib._npyio_impl._read(fname,*,delimiter=',',comment='#',quote='"',imaginary_unit='j',usecols=None,skiplines=0,max_rows=None,converters=None,ndmin=None,unpack=False,dtype=np.float64,encoding=None)
numpy.lib._npyio_impl._save_dispatcher(file,arr,allow_pickle=None,fix_imports=None)
numpy.lib._npyio_impl._savetxt_dispatcher(fname,X,fmt=None,delimiter=None,newline=None,header=None,footer=None,comments=None,encoding=None)
numpy.lib._npyio_impl._savez(file,args,kwds,compress,allow_pickle=True,pickle_kwargs=None)
numpy.lib._npyio_impl._savez_compressed_dispatcher(file,*args,**kwds)
numpy.lib._npyio_impl._savez_dispatcher(file,*args,**kwds)
numpy.lib._npyio_impl.fromregex(file,regexp,dtype,encoding=None)
numpy.lib._npyio_impl.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skip_header=0,skip_footer=0,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=''.join(sorted(NameValidator.defaultdeletechars)),replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True,max_rows=None,encoding=None,*,ndmin=0,like=None)
numpy.lib._npyio_impl.load(file,mmap_mode=None,allow_pickle=False,fix_imports=True,encoding='ASCII',*,max_header_size=format._MAX_HEADER_SIZE)
numpy.lib._npyio_impl.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0,encoding=None,max_rows=None,*,quotechar=None,like=None)
numpy.lib._npyio_impl.recfromcsv(fname,**kwargs)
numpy.lib._npyio_impl.recfromtxt(fname,**kwargs)
numpy.lib._npyio_impl.save(file,arr,allow_pickle=True,fix_imports=True)
numpy.lib._npyio_impl.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#',encoding=None)
numpy.lib._npyio_impl.savez(file,*args,**kwds)
numpy.lib._npyio_impl.savez_compressed(file,*args,**kwds)
numpy.lib._npyio_impl.zipfile_factory(file,*args,**kwargs)
numpy.load(file,mmap_mode=None,allow_pickle=False,fix_imports=True,encoding='ASCII',*,max_header_size=format._MAX_HEADER_SIZE)
numpy.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0,encoding=None,max_rows=None,*,quotechar=None,like=None)
numpy.save(file,arr,allow_pickle=True,fix_imports=True)
numpy.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#',encoding=None)
numpy.savez(file,*args,**kwds)
numpy.savez_compressed(file,*args,**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_npyio_impl.pyi----------------------------------------
numpy.lib._npyio_impl.DataSource(self,destpath:None|str|os.PathLike[str]=...)
numpy.lib._npyio_impl.DataSource.__del__(self)->None
numpy.lib._npyio_impl.DataSource.__init__(self,destpath:None|str|os.PathLike[str]=...)
numpy.lib._npyio_impl.DataSource.abspath(self,path:str)->str
numpy.lib._npyio_impl.DataSource.exists(self,path:str)->bool
numpy.lib._npyio_impl.DataSource.open(self,path:str,mode:str=...,encoding:None|str=...,newline:None|str=...)->IO[Any]
numpy.lib._npyio_impl.NpzFile.f(self:_T)->BagObj[_T]
numpy.lib._npyio_impl.NpzFile.f(self:_T,value:BagObj[_T])->None
numpy.lib._npyio_impl._SupportsGetItem(Protocol[_T_contra,_T_co])
numpy.lib._npyio_impl._SupportsGetItem.__getitem__(self,key:_T_contra,/)->_T_co
numpy.lib._npyio_impl._SupportsRead(Protocol[_CharType_co])
numpy.lib._npyio_impl._SupportsRead.read(self)->_CharType_co
numpy.lib._npyio_impl._SupportsReadSeek(Protocol[_CharType_co])
numpy.lib._npyio_impl._SupportsReadSeek.read(self,n:int,/)->_CharType_co
numpy.lib._npyio_impl._SupportsReadSeek.seek(self,offset:int,whence:int,/)->object
numpy.lib._npyio_impl._SupportsWrite(Protocol[_CharType_contra])
numpy.lib._npyio_impl._SupportsWrite.write(self,s:_CharType_contra,/)->object


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_stride_tricks_impl.py----------------------------------------
A:numpy.lib._stride_tricks_impl.new_array->new_array.view(type=type(original_array)).view(type=type(original_array))
A:numpy.lib._stride_tricks_impl.x->numpy.array(x, copy=None, subok=subok)
A:numpy.lib._stride_tricks_impl.interface->dict(x.__array_interface__)
A:numpy.lib._stride_tricks_impl.interface['shape']->tuple(shape)
A:numpy.lib._stride_tricks_impl.interface['strides']->tuple(strides)
A:numpy.lib._stride_tricks_impl.array->numpy.array(array, copy=None, subok=subok)
A:numpy.lib._stride_tricks_impl.view->_maybe_view_as_subclass(x, array)
A:numpy.lib._stride_tricks_impl.window_shape_array->numpy.array(window_shape)
A:numpy.lib._stride_tricks_impl.axis->normalize_axis_tuple(axis, x.ndim, allow_duplicate=True)
A:numpy.lib._stride_tricks_impl.x_shape_trimmed->list(x.shape)
A:numpy.lib._stride_tricks_impl.it->numpy.nditer((array,), flags=['multi_index', 'refs_ok', 'zerosize_ok'] + extras, op_flags=['readonly'], itershape=shape, order='C')
A:numpy.lib._stride_tricks_impl.result->_maybe_view_as_subclass(array, broadcast)
A:numpy.lib._stride_tricks_impl.b->numpy.broadcast(b, *args[pos:pos + 31])
A:numpy.lib._stride_tricks_impl.args->tuple((np.array(_m, copy=None, subok=subok) for _m in args))
A:numpy.lib._stride_tricks_impl.shape->_broadcast_shape(*args)
numpy.broadcast_arrays(*args,subok=False)
numpy.broadcast_shapes(*args)
numpy.broadcast_to(array,shape,subok=False)
numpy.lib._stride_tricks_impl.DummyArray(self,interface,base=None)
numpy.lib._stride_tricks_impl.DummyArray.__init__(self,interface,base=None)
numpy.lib._stride_tricks_impl._broadcast_arrays_dispatcher(*args,subok=None)
numpy.lib._stride_tricks_impl._broadcast_shape(*args)
numpy.lib._stride_tricks_impl._broadcast_to(array,shape,subok,readonly)
numpy.lib._stride_tricks_impl._broadcast_to_dispatcher(array,shape,subok=None)
numpy.lib._stride_tricks_impl._maybe_view_as_subclass(original_array,new_array)
numpy.lib._stride_tricks_impl._sliding_window_view_dispatcher(x,window_shape,axis=None,*,subok=None,writeable=None)
numpy.lib._stride_tricks_impl.as_strided(x,shape=None,strides=None,subok=False,writeable=True)
numpy.lib._stride_tricks_impl.broadcast_arrays(*args,subok=False)
numpy.lib._stride_tricks_impl.broadcast_shapes(*args)
numpy.lib._stride_tricks_impl.broadcast_to(array,shape,subok=False)
numpy.lib._stride_tricks_impl.sliding_window_view(x,window_shape,axis=None,*,subok=False,writeable=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_stride_tricks_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arraypad_impl.py----------------------------------------
A:numpy.lib._arraypad_impl.new_shape->tuple((left + size + right for (size, (left, right)) in zip(array.shape, pad_width)))
A:numpy.lib._arraypad_impl.padded->numpy.empty(new_shape, dtype=array.dtype, order=order)
A:numpy.lib._arraypad_impl.original_area_slice->tuple((slice(left, left + size) for (size, (left, right)) in zip(array.shape, pad_width)))
A:numpy.lib._arraypad_impl.left_slice->_slice_at_axis(slice(slice_start, slice_end), axis)
A:numpy.lib._arraypad_impl.right_slice->_slice_at_axis(slice(slice_start, slice_end), axis)
A:numpy.lib._arraypad_impl.edge_pair->_get_edges(padded, axis, (left_index, right_index))
A:numpy.lib._arraypad_impl.left_stat->stat_func(left_chunk, axis=axis, keepdims=True)
A:numpy.lib._arraypad_impl.right_stat->stat_func(right_chunk, axis=axis, keepdims=True)
A:numpy.lib._arraypad_impl.chunk_length->min(old_length, right_pad)
A:numpy.lib._arraypad_impl.edge_slice->_slice_at_axis(slice(-right_pad - 1, -right_pad), axis)
A:numpy.lib._arraypad_impl.pad_area->_slice_at_axis(slice(-right_pad, None), axis)
A:numpy.lib._arraypad_impl.x->x.ravel().ravel()
A:numpy.lib._arraypad_impl.array->numpy.asarray(array)
A:numpy.lib._arraypad_impl.pad_width->_as_pairs(pad_width, array.ndim, as_index=True)
A:numpy.lib._arraypad_impl.(padded, _)->_pad_simple(array, pad_width, fill_value=0)
A:numpy.lib._arraypad_impl.view->numpy.moveaxis(padded, axis, -1)
A:numpy.lib._arraypad_impl.inds->ndindex(view.shape[:-1])
A:numpy.lib._arraypad_impl.(padded, original_area_slice)->_pad_simple(array, pad_width)
A:numpy.lib._arraypad_impl.axes->range(padded.ndim)
A:numpy.lib._arraypad_impl.values->_as_pairs(values, padded.ndim)
A:numpy.lib._arraypad_impl.roi->_view_roi(padded, original_area_slice, axis)
A:numpy.lib._arraypad_impl.end_values->_as_pairs(end_values, padded.ndim)
A:numpy.lib._arraypad_impl.ramp_pair->_get_linear_ramps(roi, axis, width_pair, value_pair)
A:numpy.lib._arraypad_impl.length->_as_pairs(length, padded.ndim, as_index=True)
A:numpy.lib._arraypad_impl.stat_pair->_get_stats(roi, axis, width_pair, length_pair, func)
A:numpy.lib._arraypad_impl.method->kwargs.get('reflect_type', 'even')
A:numpy.lib._arraypad_impl.(left_index, right_index)->_set_wrap_both(roi, axis, (left_index, right_index), original_period)
numpy.lib._arraypad_impl._as_pairs(x,ndim,as_index=False)
numpy.lib._arraypad_impl._get_edges(padded,axis,width_pair)
numpy.lib._arraypad_impl._get_linear_ramps(padded,axis,width_pair,end_value_pair)
numpy.lib._arraypad_impl._get_stats(padded,axis,width_pair,length_pair,stat_func)
numpy.lib._arraypad_impl._pad_dispatcher(array,pad_width,mode=None,**kwargs)
numpy.lib._arraypad_impl._pad_simple(array,pad_width,fill_value=None)
numpy.lib._arraypad_impl._round_if_needed(arr,dtype)
numpy.lib._arraypad_impl._set_pad_area(padded,axis,width_pair,value_pair)
numpy.lib._arraypad_impl._set_reflect_both(padded,axis,width_pair,method,original_period,include_edge=False)
numpy.lib._arraypad_impl._set_wrap_both(padded,axis,width_pair,original_period)
numpy.lib._arraypad_impl._slice_at_axis(sl,axis)
numpy.lib._arraypad_impl._view_roi(array,original_area_slice,axis)
numpy.lib._arraypad_impl.pad(array,pad_width,mode='constant',**kwargs)
numpy.pad(array,pad_width,mode='constant',**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arraypad_impl.pyi----------------------------------------
numpy.lib._arraypad_impl._ModeFunc(self,vector:NDArray[Any],iaxis_pad_width:tuple[int,int],iaxis:int,kwargs:dict[str,Any],/)
numpy.lib._arraypad_impl._ModeFunc.__call__(self,vector:NDArray[Any],iaxis_pad_width:tuple[int,int],iaxis:int,kwargs:dict[str,Any],/)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_twodim_base_impl.py----------------------------------------
A:numpy.lib._twodim_base_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._twodim_base_impl.i1->iinfo(int8)
A:numpy.lib._twodim_base_impl.i2->iinfo(int16)
A:numpy.lib._twodim_base_impl.i4->iinfo(int32)
A:numpy.lib._twodim_base_impl.m->ones((n, n), int)
A:numpy.lib._twodim_base_impl.M->operator.index(M)
A:numpy.lib._twodim_base_impl.k->operator.index(k)
A:numpy.lib._twodim_base_impl._eye_with_like->array_function_dispatch()(eye)
A:numpy.lib._twodim_base_impl.v->empty((len(x), N), dtype=promote_types(x.dtype, int))
A:numpy.lib._twodim_base_impl.res->zeros((n, n), v.dtype)
A:numpy.lib._twodim_base_impl.conv->_array_converter(v)
A:numpy.lib._twodim_base_impl.(v,)->_array_converter(v).as_arrays(subok=False)
A:numpy.lib._twodim_base_impl.s->len(v)
A:numpy.lib._twodim_base_impl.i->arange(0, n + k, dtype=intp)
A:numpy.lib._twodim_base_impl._tri_with_like->array_function_dispatch()(tri)
A:numpy.lib._twodim_base_impl.mask->tri(*m.shape[-2:], k=k - 1, dtype=bool)
A:numpy.lib._twodim_base_impl.x->asarray(x)
A:numpy.lib._twodim_base_impl.N->len(bins)
A:numpy.lib._twodim_base_impl.xedgesyedges->asarray(bins)
A:numpy.lib._twodim_base_impl.(hist, edges)->histogramdd([x, y], bins, range, density, weights)
A:numpy.lib._twodim_base_impl.a->mask_func(m, k)
A:numpy.lib._twodim_base_impl.tri_->tri(n, m, k=k, dtype=bool)
numpy.diag(v,k=0)
numpy.diagflat(v,k=0)
numpy.eye(N,M=None,k=0,dtype=float,order='C',*,device=None,like=None)
numpy.fliplr(m)
numpy.flipud(m)
numpy.histogram2d(x,y,bins=10,range=None,density=None,weights=None)
numpy.lib._twodim_base_impl._diag_dispatcher(v,k=None)
numpy.lib._twodim_base_impl._flip_dispatcher(m)
numpy.lib._twodim_base_impl._histogram2d_dispatcher(x,y,bins=None,range=None,density=None,weights=None)
numpy.lib._twodim_base_impl._min_int(low,high)
numpy.lib._twodim_base_impl._trilu_dispatcher(m,k=None)
numpy.lib._twodim_base_impl._trilu_indices_form_dispatcher(arr,k=None)
numpy.lib._twodim_base_impl._vander_dispatcher(x,N=None,increasing=None)
numpy.lib._twodim_base_impl.diag(v,k=0)
numpy.lib._twodim_base_impl.diagflat(v,k=0)
numpy.lib._twodim_base_impl.eye(N,M=None,k=0,dtype=float,order='C',*,device=None,like=None)
numpy.lib._twodim_base_impl.fliplr(m)
numpy.lib._twodim_base_impl.flipud(m)
numpy.lib._twodim_base_impl.histogram2d(x,y,bins=10,range=None,density=None,weights=None)
numpy.lib._twodim_base_impl.mask_indices(n,mask_func,k=0)
numpy.lib._twodim_base_impl.tri(N,M=None,k=0,dtype=float,*,like=None)
numpy.lib._twodim_base_impl.tril(m,k=0)
numpy.lib._twodim_base_impl.tril_indices(n,k=0,m=None)
numpy.lib._twodim_base_impl.tril_indices_from(arr,k=0)
numpy.lib._twodim_base_impl.triu(m,k=0)
numpy.lib._twodim_base_impl.triu_indices(n,k=0,m=None)
numpy.lib._twodim_base_impl.triu_indices_from(arr,k=0)
numpy.lib._twodim_base_impl.vander(x,N=None,increasing=False)
numpy.mask_indices(n,mask_func,k=0)
numpy.tri(N,M=None,k=0,dtype=float,*,like=None)
numpy.tril(m,k=0)
numpy.tril_indices(n,k=0,m=None)
numpy.tril_indices_from(arr,k=0)
numpy.triu(m,k=0)
numpy.triu_indices(n,k=0,m=None)
numpy.triu_indices_from(arr,k=0)
numpy.vander(x,N=None,increasing=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_twodim_base_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/stride_tricks.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/stride_tricks.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_version.py----------------------------------------
A:numpy.lib._version.ver_main->re.match('\\d+\\.\\d+\\.\\d+', vstring)
A:numpy.lib._version.self.version->re.match('\\d+\\.\\d+\\.\\d+', vstring).group()
A:numpy.lib._version.alpha->re.match('a\\d', vstring[ver_main.end():])
A:numpy.lib._version.beta->re.match('b\\d', vstring[ver_main.end():])
A:numpy.lib._version.rc->re.match('rc\\d', vstring[ver_main.end():])
A:numpy.lib._version.self.pre_release->pre_rel[0].group()
A:numpy.lib._version.self.is_devversion->bool(re.search('.dev', vstring))
A:numpy.lib._version.other->NumpyVersion(other)
A:numpy.lib._version.vercmp->self._compare_pre_release(other)
numpy.lib.NumpyVersion(self,vstring)
numpy.lib.NumpyVersion.__eq__(self,other)
numpy.lib.NumpyVersion.__ge__(self,other)
numpy.lib.NumpyVersion.__gt__(self,other)
numpy.lib.NumpyVersion.__le__(self,other)
numpy.lib.NumpyVersion.__lt__(self,other)
numpy.lib.NumpyVersion.__ne__(self,other)
numpy.lib.NumpyVersion.__repr__(self)
numpy.lib.NumpyVersion._compare(self,other)
numpy.lib.NumpyVersion._compare_pre_release(self,other)
numpy.lib.NumpyVersion._compare_version(self,other)
numpy.lib._version.NumpyVersion(self,vstring)
numpy.lib._version.NumpyVersion.__eq__(self,other)
numpy.lib._version.NumpyVersion.__ge__(self,other)
numpy.lib._version.NumpyVersion.__gt__(self,other)
numpy.lib._version.NumpyVersion.__init__(self,vstring)
numpy.lib._version.NumpyVersion.__le__(self,other)
numpy.lib._version.NumpyVersion.__lt__(self,other)
numpy.lib._version.NumpyVersion.__ne__(self,other)
numpy.lib._version.NumpyVersion.__repr__(self)
numpy.lib._version.NumpyVersion._compare(self,other)
numpy.lib._version.NumpyVersion._compare_pre_release(self,other)
numpy.lib._version.NumpyVersion._compare_version(self,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_version.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_shape_base_impl.py----------------------------------------
A:numpy.lib._shape_base_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._shape_base_impl.axis->normalize_axis_tuple(axis, out_ndim)
A:numpy.lib._shape_base_impl.conv->_array_converter(arr)
A:numpy.lib._shape_base_impl.in_dims->list(range(nd))
A:numpy.lib._shape_base_impl.inarr_view->transpose(arr, in_dims[:axis] + in_dims[axis + 1:] + [axis])
A:numpy.lib._shape_base_impl.inds->ndindex(inarr_view.shape[:-1])
A:numpy.lib._shape_base_impl.ind0->next(inds)
A:numpy.lib._shape_base_impl.res->expand_dims(res, axis)
A:numpy.lib._shape_base_impl.buff->zeros(inarr_view.shape[:-1] + res.shape, dtype=res.dtype)
A:numpy.lib._shape_base_impl.buff_dims->list(range(buff.ndim))
A:numpy.lib._shape_base_impl.buff[ind]->asanyarray(func1d(inarr_view[ind], *args, **kwargs))
A:numpy.lib._shape_base_impl.val->asarray(a)
A:numpy.lib._shape_base_impl.a->reshape(a, as_)
A:numpy.lib._shape_base_impl.shape_it->iter(a.shape)
A:numpy.lib._shape_base_impl.arr->asanyarray(v)
A:numpy.lib._shape_base_impl.arrs->atleast_3d(*tup)
A:numpy.lib._shape_base_impl.sub_arys[i]->numpy._core.numeric.empty(0, dtype=sub_arys[i].dtype)
A:numpy.lib._shape_base_impl.Ntotal->len(ary)
A:numpy.lib._shape_base_impl.Nsections->int(indices_or_sections)
A:numpy.lib._shape_base_impl.(Neach_section, extras)->divmod(Ntotal, Nsections)
A:numpy.lib._shape_base_impl.div_points->numpy._core.numeric.array(section_sizes, dtype=_nx.intp).cumsum()
A:numpy.lib._shape_base_impl.sary->numpy._core.numeric.swapaxes(ary, axis, 0)
A:numpy.lib._shape_base_impl.wrappers->sorted(((getattr(x, '__array_priority__', 0), -i, x.__array_wrap__) for (i, x) in enumerate(args) if hasattr(x, '__array_wrap__')))
A:numpy.lib._shape_base_impl.b->reshape(b, bs)
A:numpy.lib._shape_base_impl.nd->max(ndb, nda)
A:numpy.lib._shape_base_impl.a_arr->expand_dims(a_arr, axis=tuple(range(1, nd * 2, 2)))
A:numpy.lib._shape_base_impl.b_arr->expand_dims(b_arr, axis=tuple(range(0, nd * 2, 2)))
A:numpy.lib._shape_base_impl.result->result.reshape(_nx.multiply(as_, bs)).reshape(_nx.multiply(as_, bs))
A:numpy.lib._shape_base_impl.tup->tuple(reps)
A:numpy.lib._shape_base_impl.d->len(tup)
A:numpy.lib._shape_base_impl.c->c.reshape(-1, n).repeat(nrep, 0).reshape(-1, n).repeat(nrep, 0)
A:numpy.lib._shape_base_impl.shape_out->tuple((s * t for (s, t) in zip(c.shape, tup)))
numpy.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.apply_over_axes(func,a,axes)
numpy.array_split(ary,indices_or_sections,axis=0)
numpy.column_stack(tup)
numpy.dsplit(ary,indices_or_sections)
numpy.dstack(tup)
numpy.expand_dims(a,axis)
numpy.hsplit(ary,indices_or_sections)
numpy.kron(a,b)
numpy.lib._shape_base_impl._apply_along_axis_dispatcher(func1d,axis,arr,*args,**kwargs)
numpy.lib._shape_base_impl._apply_over_axes_dispatcher(func,a,axes)
numpy.lib._shape_base_impl._array_split_dispatcher(ary,indices_or_sections,axis=None)
numpy.lib._shape_base_impl._column_stack_dispatcher(tup)
numpy.lib._shape_base_impl._dstack_dispatcher(tup)
numpy.lib._shape_base_impl._expand_dims_dispatcher(a,axis)
numpy.lib._shape_base_impl._hvdsplit_dispatcher(ary,indices_or_sections)
numpy.lib._shape_base_impl._kron_dispatcher(a,b)
numpy.lib._shape_base_impl._make_along_axis_idx(arr_shape,indices,axis)
numpy.lib._shape_base_impl._put_along_axis_dispatcher(arr,indices,values,axis)
numpy.lib._shape_base_impl._replace_zero_by_x_arrays(sub_arys)
numpy.lib._shape_base_impl._split_dispatcher(ary,indices_or_sections,axis=None)
numpy.lib._shape_base_impl._take_along_axis_dispatcher(arr,indices,axis)
numpy.lib._shape_base_impl._tile_dispatcher(A,reps)
numpy.lib._shape_base_impl.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.lib._shape_base_impl.apply_over_axes(func,a,axes)
numpy.lib._shape_base_impl.array_split(ary,indices_or_sections,axis=0)
numpy.lib._shape_base_impl.column_stack(tup)
numpy.lib._shape_base_impl.dsplit(ary,indices_or_sections)
numpy.lib._shape_base_impl.dstack(tup)
numpy.lib._shape_base_impl.expand_dims(a,axis)
numpy.lib._shape_base_impl.get_array_wrap(*args)
numpy.lib._shape_base_impl.hsplit(ary,indices_or_sections)
numpy.lib._shape_base_impl.kron(a,b)
numpy.lib._shape_base_impl.put_along_axis(arr,indices,values,axis)
numpy.lib._shape_base_impl.row_stack(tup,*,dtype=None,casting='same_kind')
numpy.lib._shape_base_impl.split(ary,indices_or_sections,axis=0)
numpy.lib._shape_base_impl.take_along_axis(arr,indices,axis)
numpy.lib._shape_base_impl.tile(A,reps)
numpy.lib._shape_base_impl.vsplit(ary,indices_or_sections)
numpy.put_along_axis(arr,indices,values,axis)
numpy.row_stack(tup,*,dtype=None,casting='same_kind')
numpy.split(ary,indices_or_sections,axis=0)
numpy.take_along_axis(arr,indices,axis)
numpy.tile(A,reps)
numpy.vsplit(ary,indices_or_sections)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_shape_base_impl.pyi----------------------------------------
numpy.lib._shape_base_impl._ArrayWrap(self,array:NDArray[Any],context:None|tuple[ufunc,tuple[Any,...],int]=...,return_scalar:bool=...,/)
numpy.lib._shape_base_impl._ArrayWrap.__call__(self,array:NDArray[Any],context:None|tuple[ufunc,tuple[Any,...],int]=...,return_scalar:bool=...,/)
numpy.lib._shape_base_impl._SupportsArrayWrap(Protocol)
numpy.lib._shape_base_impl._SupportsArrayWrap.__array_wrap__(self)->_ArrayWrap


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/npyio.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/npyio.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_polynomial_impl.py----------------------------------------
A:numpy.lib._polynomial_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._polynomial_impl.seq_of_zeros->seq_of_zeros.astype(mintypecode(dt.char)).astype(mintypecode(dt.char))
A:numpy.lib._polynomial_impl.a->a.real.copy().real.copy()
A:numpy.lib._polynomial_impl.roots->hstack((roots, NX.zeros(trailing_zeros, roots.dtype)))
A:numpy.lib._polynomial_impl.p->numpy._core.numeric.asarray(p)
A:numpy.lib._polynomial_impl.N->len(p)
A:numpy.lib._polynomial_impl.A->diag(NX.ones((N - 2,), p.dtype), -1)
A:numpy.lib._polynomial_impl.m->int(m)
A:numpy.lib._polynomial_impl.k->atleast_1d(k)
A:numpy.lib._polynomial_impl.truepoly->isinstance(p, poly1d)
A:numpy.lib._polynomial_impl.y->numpy._core.numeric.zeros_like(x)
A:numpy.lib._polynomial_impl.val->poly1d(val)
A:numpy.lib._polynomial_impl.lhs->vander(x, order)
A:numpy.lib._polynomial_impl.scale->numpy._core.numeric.sqrt((lhs * lhs).sum(axis=0))
A:numpy.lib._polynomial_impl.(c, resids, rank, s)->lstsq(lhs, rhs, rcond)
A:numpy.lib._polynomial_impl.Vbase->inv(dot(lhs.T, lhs))
A:numpy.lib._polynomial_impl.x->numpy._core.numeric.asanyarray(x)
A:numpy.lib._polynomial_impl.a1->atleast_1d(a1)
A:numpy.lib._polynomial_impl.a2->atleast_1d(a2)
A:numpy.lib._polynomial_impl.zr->numpy._core.numeric.zeros(key - self.order, self.coeffs.dtype)
A:numpy.lib._polynomial_impl.q->numpy._core.numeric.zeros((max(m - n + 1, 1),), w.dtype)
A:numpy.lib._polynomial_impl.r->u.astype(w.dtype)
A:numpy.lib._polynomial_impl._poly_mat->re.compile('\\*\\*([0-9]*)')
A:numpy.lib._polynomial_impl.mat->re.compile('\\*\\*([0-9]*)').search(astr, n)
A:numpy.lib._polynomial_impl.span->re.compile('\\*\\*([0-9]*)').search(astr, n).span()
A:numpy.lib._polynomial_impl.c_or_r->numpy._core.numeric.array([0], dtype=c_or_r.dtype)
A:numpy.lib._polynomial_impl.vals->repr(self.coeffs)
A:numpy.lib._polynomial_impl.coefstr->fmt_float(real(coeff))
A:numpy.lib._polynomial_impl.other->poly1d(other)
A:numpy.lib._polynomial_impl.res->polymul(self.coeffs, res)
A:numpy.lib._polynomial_impl.self._coeffs->numpy._core.numeric.concatenate((zr, self.coeffs))
numpy.lib._polynomial_impl._binary_op_dispatcher(a1,a2)
numpy.lib._polynomial_impl._poly_dispatcher(seq_of_zeros)
numpy.lib._polynomial_impl._polyder_dispatcher(p,m=None)
numpy.lib._polynomial_impl._polydiv_dispatcher(u,v)
numpy.lib._polynomial_impl._polyfit_dispatcher(x,y,deg,rcond=None,full=None,w=None,cov=None)
numpy.lib._polynomial_impl._polyint_dispatcher(p,m=None,k=None)
numpy.lib._polynomial_impl._polyval_dispatcher(p,x)
numpy.lib._polynomial_impl._raise_power(astr,wrap=70)
numpy.lib._polynomial_impl._roots_dispatcher(p)
numpy.lib._polynomial_impl.poly(seq_of_zeros)
numpy.lib._polynomial_impl.poly1d(self,c_or_r,r=False,variable=None)
numpy.lib._polynomial_impl.poly1d.__add__(self,other)
numpy.lib._polynomial_impl.poly1d.__array__(self,t=None,copy=None)
numpy.lib._polynomial_impl.poly1d.__div__(self,other)
numpy.lib._polynomial_impl.poly1d.__eq__(self,other)
numpy.lib._polynomial_impl.poly1d.__getitem__(self,val)
numpy.lib._polynomial_impl.poly1d.__init__(self,c_or_r,r=False,variable=None)
numpy.lib._polynomial_impl.poly1d.__iter__(self)
numpy.lib._polynomial_impl.poly1d.__len__(self)
numpy.lib._polynomial_impl.poly1d.__mul__(self,other)
numpy.lib._polynomial_impl.poly1d.__ne__(self,other)
numpy.lib._polynomial_impl.poly1d.__neg__(self)
numpy.lib._polynomial_impl.poly1d.__pos__(self)
numpy.lib._polynomial_impl.poly1d.__pow__(self,val)
numpy.lib._polynomial_impl.poly1d.__radd__(self,other)
numpy.lib._polynomial_impl.poly1d.__rdiv__(self,other)
numpy.lib._polynomial_impl.poly1d.__repr__(self)
numpy.lib._polynomial_impl.poly1d.__rmul__(self,other)
numpy.lib._polynomial_impl.poly1d.__rsub__(self,other)
numpy.lib._polynomial_impl.poly1d.__setitem__(self,key,val)
numpy.lib._polynomial_impl.poly1d.__str__(self)
numpy.lib._polynomial_impl.poly1d.__sub__(self,other)
numpy.lib._polynomial_impl.poly1d._coeffs(self)
numpy.lib._polynomial_impl.poly1d._coeffs(self,coeffs)
numpy.lib._polynomial_impl.poly1d.coeffs(self)
numpy.lib._polynomial_impl.poly1d.coeffs(self,value)
numpy.lib._polynomial_impl.poly1d.deriv(self,m=1)
numpy.lib._polynomial_impl.poly1d.integ(self,m=1,k=0)
numpy.lib._polynomial_impl.poly1d.order(self)
numpy.lib._polynomial_impl.poly1d.roots(self)
numpy.lib._polynomial_impl.poly1d.variable(self)
numpy.lib._polynomial_impl.polyadd(a1,a2)
numpy.lib._polynomial_impl.polyder(p,m=1)
numpy.lib._polynomial_impl.polydiv(u,v)
numpy.lib._polynomial_impl.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.lib._polynomial_impl.polyint(p,m=1,k=None)
numpy.lib._polynomial_impl.polymul(a1,a2)
numpy.lib._polynomial_impl.polysub(a1,a2)
numpy.lib._polynomial_impl.polyval(p,x)
numpy.lib._polynomial_impl.roots(p)
numpy.poly(seq_of_zeros)
numpy.poly1d(self,c_or_r,r=False,variable=None)
numpy.poly1d.__add__(self,other)
numpy.poly1d.__array__(self,t=None,copy=None)
numpy.poly1d.__div__(self,other)
numpy.poly1d.__eq__(self,other)
numpy.poly1d.__getitem__(self,val)
numpy.poly1d.__iter__(self)
numpy.poly1d.__len__(self)
numpy.poly1d.__mul__(self,other)
numpy.poly1d.__ne__(self,other)
numpy.poly1d.__neg__(self)
numpy.poly1d.__pos__(self)
numpy.poly1d.__pow__(self,val)
numpy.poly1d.__radd__(self,other)
numpy.poly1d.__rdiv__(self,other)
numpy.poly1d.__repr__(self)
numpy.poly1d.__rmul__(self,other)
numpy.poly1d.__rsub__(self,other)
numpy.poly1d.__setitem__(self,key,val)
numpy.poly1d.__str__(self)
numpy.poly1d.__sub__(self,other)
numpy.poly1d._coeffs(self)
numpy.poly1d._coeffs(self,coeffs)
numpy.poly1d.coeffs(self)
numpy.poly1d.coeffs(self,value)
numpy.poly1d.deriv(self,m=1)
numpy.poly1d.integ(self,m=1,k=0)
numpy.poly1d.order(self)
numpy.poly1d.roots(self)
numpy.poly1d.variable(self)
numpy.polyadd(a1,a2)
numpy.polyder(p,m=1)
numpy.polydiv(u,v)
numpy.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.polyint(p,m=1,k=None)
numpy.polymul(a1,a2)
numpy.polysub(a1,a2)
numpy.polyval(p,x)
numpy.roots(p)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_polynomial_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_scimath_impl.py----------------------------------------
A:numpy.lib._scimath_impl._ln2->numpy._core.numeric.log(2.0)
A:numpy.lib._scimath_impl.x->_fix_real_abs_gt_1(x)
A:numpy.lib._scimath_impl.n->_fix_real_lt_zero(n)
A:numpy.lib._scimath_impl.p->_fix_int_lt_zero(p)
numpy.lib._scimath_impl._fix_int_lt_zero(x)
numpy.lib._scimath_impl._fix_real_abs_gt_1(x)
numpy.lib._scimath_impl._fix_real_lt_zero(x)
numpy.lib._scimath_impl._logn_dispatcher(n,x)
numpy.lib._scimath_impl._power_dispatcher(x,p)
numpy.lib._scimath_impl._tocomplex(arr)
numpy.lib._scimath_impl._unary_dispatcher(x)
numpy.lib._scimath_impl.arccos(x)
numpy.lib._scimath_impl.arcsin(x)
numpy.lib._scimath_impl.arctanh(x)
numpy.lib._scimath_impl.log(x)
numpy.lib._scimath_impl.log10(x)
numpy.lib._scimath_impl.log2(x)
numpy.lib._scimath_impl.logn(n,x)
numpy.lib._scimath_impl.power(x,p)
numpy.lib._scimath_impl.sqrt(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_scimath_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.py----------------------------------------
A:numpy.lib._nanfunctions_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._nanfunctions_impl.y->numpy.invert(y, out=y)
A:numpy.lib._nanfunctions_impl.a->numpy.moveaxis(a, axis, -1)
A:numpy.lib._nanfunctions_impl.mask->numpy.all(mask, axis=axis)
A:numpy.lib._nanfunctions_impl.c->numpy.isnan(arr1d)
A:numpy.lib._nanfunctions_impl.arr1d->arr1d.copy().copy()
A:numpy.lib._nanfunctions_impl.second_arr1d->second_arr1d.copy().copy()
A:numpy.lib._nanfunctions_impl.res->numpy.argmax(a, axis=axis, out=out, keepdims=keepdims)
A:numpy.lib._nanfunctions_impl.(a, mask)->_replace_nan(a, 1)
A:numpy.lib._nanfunctions_impl.(arr, mask)->_replace_nan(a, 0)
A:numpy.lib._nanfunctions_impl.dtype->numpy.dtype(dtype)
A:numpy.lib._nanfunctions_impl.cnt->cnt.squeeze(axis).squeeze(axis)
A:numpy.lib._nanfunctions_impl.tot->numpy.sum(arr, axis=axis, dtype=dtype, out=out, keepdims=keepdims, where=where)
A:numpy.lib._nanfunctions_impl.avg->_divide_by_count(avg, cnt)
A:numpy.lib._nanfunctions_impl.(arr1d_parsed, _, overwrite_input)->_remove_nan_1d(arr1d, overwrite_input=overwrite_input)
A:numpy.lib._nanfunctions_impl.part->numpy.moveaxis(a, axis, -1).ravel()
A:numpy.lib._nanfunctions_impl.out[...]->numpy.ma.median(a, axis=axis, overwrite_input=overwrite_input).filled(fill_value)
A:numpy.lib._nanfunctions_impl.result->numpy.empty_like(a, shape=q.shape + a.shape[:-1])
A:numpy.lib._nanfunctions_impl.m->numpy.ma.median(a, axis=axis, overwrite_input=overwrite_input)
A:numpy.lib._nanfunctions_impl.method->numpy.lib._function_base_impl._check_interpolation_as_method(method, interpolation, 'nanquantile')
A:numpy.lib._nanfunctions_impl.q->numpy.asanyarray(q)
A:numpy.lib._nanfunctions_impl.axis->numpy._core.numeric.normalize_axis_tuple(axis, a.ndim, argname='axis')
A:numpy.lib._nanfunctions_impl.weights->numpy.moveaxis(weights, axis, -1)
A:numpy.lib._nanfunctions_impl.result[(...,) + ii]->_nanquantile_1d(a[ii], q, weights=weights[ii], overwrite_input=overwrite_input, method=method)
A:numpy.lib._nanfunctions_impl.(arr1d, weights, overwrite_input)->_remove_nan_1d(arr1d, second_arr1d=weights, overwrite_input=overwrite_input)
A:numpy.lib._nanfunctions_impl.arr->_copyto(arr, 0, mask)
A:numpy.lib._nanfunctions_impl.sqr->numpy.multiply(arr, arr, out=arr, where=where)
A:numpy.lib._nanfunctions_impl.var->nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims, where=where, mean=mean, correction=correction)
A:numpy.lib._nanfunctions_impl.var_ndim->numpy.ndim(var)
A:numpy.lib._nanfunctions_impl.std->numpy.sqrt(var)
numpy.lib._nanfunctions_impl._copyto(a,val,mask)
numpy.lib._nanfunctions_impl._divide_by_count(a,b,out=None)
numpy.lib._nanfunctions_impl._nan_mask(a,out=None)
numpy.lib._nanfunctions_impl._nanargmax_dispatcher(a,axis=None,out=None,*,keepdims=None)
numpy.lib._nanfunctions_impl._nanargmin_dispatcher(a,axis=None,out=None,*,keepdims=None)
numpy.lib._nanfunctions_impl._nancumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy.lib._nanfunctions_impl._nancumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy.lib._nanfunctions_impl._nanmax_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy.lib._nanfunctions_impl._nanmean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,*,where=None)
numpy.lib._nanfunctions_impl._nanmedian(a,axis=None,out=None,overwrite_input=False)
numpy.lib._nanfunctions_impl._nanmedian1d(arr1d,overwrite_input=False)
numpy.lib._nanfunctions_impl._nanmedian_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy.lib._nanfunctions_impl._nanmedian_small(a,axis=None,out=None,overwrite_input=False)
numpy.lib._nanfunctions_impl._nanmin_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy.lib._nanfunctions_impl._nanpercentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,method=None,keepdims=None,*,weights=None,interpolation=None)
numpy.lib._nanfunctions_impl._nanprod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy.lib._nanfunctions_impl._nanquantile_1d(arr1d,q,overwrite_input=False,method='linear',weights=None)
numpy.lib._nanfunctions_impl._nanquantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,method=None,keepdims=None,*,weights=None,interpolation=None)
numpy.lib._nanfunctions_impl._nanquantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=np._NoValue,weights=None)
numpy.lib._nanfunctions_impl._nanquantile_ureduce_func(a:np.array,q:np.array,weights:np.array,axis:int=None,out=None,overwrite_input:bool=False,method='linear')
numpy.lib._nanfunctions_impl._nanstd_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy.lib._nanfunctions_impl._nansum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy.lib._nanfunctions_impl._nanvar_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None,mean=None,correction=None)
numpy.lib._nanfunctions_impl._remove_nan_1d(arr1d,second_arr1d=None,overwrite_input=False)
numpy.lib._nanfunctions_impl._replace_nan(a,val)
numpy.lib._nanfunctions_impl.nanargmax(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.lib._nanfunctions_impl.nanargmin(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.lib._nanfunctions_impl.nancumprod(a,axis=None,dtype=None,out=None)
numpy.lib._nanfunctions_impl.nancumsum(a,axis=None,dtype=None,out=None)
numpy.lib._nanfunctions_impl.nanmax(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.lib._nanfunctions_impl.nanmean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.lib._nanfunctions_impl.nanmedian(a,axis=None,out=None,overwrite_input=False,keepdims=np._NoValue)
numpy.lib._nanfunctions_impl.nanmin(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.lib._nanfunctions_impl.nanpercentile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=np._NoValue,*,weights=None,interpolation=None)
numpy.lib._nanfunctions_impl.nanprod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.lib._nanfunctions_impl.nanquantile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=np._NoValue,*,weights=None,interpolation=None)
numpy.lib._nanfunctions_impl.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy.lib._nanfunctions_impl.nansum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.lib._nanfunctions_impl.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy.nanargmax(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.nanargmin(a,axis=None,out=None,*,keepdims=np._NoValue)
numpy.nancumprod(a,axis=None,dtype=None,out=None)
numpy.nancumsum(a,axis=None,dtype=None,out=None)
numpy.nanmax(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.nanmean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.nanmedian(a,axis=None,out=None,overwrite_input=False,keepdims=np._NoValue)
numpy.nanmin(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.nanpercentile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=np._NoValue,*,weights=None,interpolation=None)
numpy.nanprod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.nanquantile(a,q,axis=None,out=None,overwrite_input=False,method='linear',keepdims=np._NoValue,*,weights=None,interpolation=None)
numpy.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)
numpy.nansum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue,mean=np._NoValue,correction=np._NoValue)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/scimath.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/scimath.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/introspect.py----------------------------------------
A:numpy.lib.introspect.func_pattern->re.compile(func_name)
A:numpy.lib.introspect.sig_pattern->re.compile(signature)
numpy.lib.introspect.opt_func_info(func_name=None,signature=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_array_utils_impl.py----------------------------------------
numpy.lib._array_utils_impl.byte_bounds(a)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_array_utils_impl.pyi----------------------------------------
numpy.lib._array_utils_impl.normalize_axis_index(axis:int=...,ndim:int=...,msg_prefix:None|str=...)->int
numpy.lib._array_utils_impl.normalize_axis_tuple(axis:int|Iterable[int],ndim:int=...,argname:None|str=...,allow_duplicate:None|bool=...)->Tuple[int, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_histograms_impl.py----------------------------------------
A:numpy.lib._histograms_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._histograms_impl.ptp_x->_ptp(x)
A:numpy.lib._histograms_impl.nbins_upper_bound->max(100, int(np.sqrt(n)))
A:numpy.lib._histograms_impl.nbins->min(_range(1, nbins_upper_bound + 1), key=jhat)
A:numpy.lib._histograms_impl.sg1->numpy.sqrt(6.0 * (x.size - 2) / ((x.size + 1.0) * (x.size + 3)))
A:numpy.lib._histograms_impl.sigma->numpy.std(x)
A:numpy.lib._histograms_impl.g1->numpy.mean(temp)
A:numpy.lib._histograms_impl.iqr->numpy.subtract(*np.percentile(x, [75, 25]))
A:numpy.lib._histograms_impl.fd_bw->_hist_bin_fd(x, range)
A:numpy.lib._histograms_impl.sturges_bw->_hist_bin_sturges(x, range)
A:numpy.lib._histograms_impl.a->a.ravel().ravel()
A:numpy.lib._histograms_impl.weights->numpy.asarray(weights)
A:numpy.lib._histograms_impl.dt->numpy.result_type(a, b)
A:numpy.lib._histograms_impl.(first_edge, last_edge)->_get_outer_edges(a, range)
A:numpy.lib._histograms_impl.width->_hist_bin_selectors[bin_name](a, (first_edge, last_edge))
A:numpy.lib._histograms_impl.n_equal_bins->operator.index(bins)
A:numpy.lib._histograms_impl.bin_edges->numpy.linspace(first_edge, last_edge, n_equal_bins + 1, endpoint=True, dtype=bin_type)
A:numpy.lib._histograms_impl.bin_type->numpy.result_type(bin_type, float)
A:numpy.lib._histograms_impl.(a, weights)->_ravel_and_check_weights(a, weights)
A:numpy.lib._histograms_impl.(bin_edges, _)->_get_bin_edges(a, bins, range, weights)
A:numpy.lib._histograms_impl.(bin_edges, uniform_bins)->_get_bin_edges(a, bins, range, weights)
A:numpy.lib._histograms_impl.ntype->numpy.dtype(np.intp)
A:numpy.lib._histograms_impl.n->operator.index(bins[i])
A:numpy.lib._histograms_impl.norm_denom->_unsigned_subtract(last_edge, first_edge)
A:numpy.lib._histograms_impl.tmp_a->tmp_a.astype(bin_edges.dtype, copy=False).astype(bin_edges.dtype, copy=False)
A:numpy.lib._histograms_impl.indices->f_indices.astype(np.intp)
A:numpy.lib._histograms_impl.cum_n->numpy.zeros(bin_edges.shape, ntype)
A:numpy.lib._histograms_impl.sa->numpy.sort(a[i:i + BLOCK])
A:numpy.lib._histograms_impl.zero->numpy.zeros(1, dtype=ntype)
A:numpy.lib._histograms_impl.sorting_index->numpy.argsort(tmp_a)
A:numpy.lib._histograms_impl.cw->numpy.concatenate((zero, sw.cumsum()))
A:numpy.lib._histograms_impl.bin_index->_search_sorted_inclusive(sa, bin_edges)
A:numpy.lib._histograms_impl.db->numpy.array(np.diff(bin_edges), float)
A:numpy.lib._histograms_impl.nbin->numpy.empty(D, np.intp)
A:numpy.lib._histograms_impl.M->len(bins)
A:numpy.lib._histograms_impl.(smin, smax)->_get_outer_edges(sample[:, i], range[i])
A:numpy.lib._histograms_impl.edges[i]->numpy.asarray(bins[i])
A:numpy.lib._histograms_impl.dedges[i]->numpy.diff(edges[i])
A:numpy.lib._histograms_impl.Ncount->tuple((np.searchsorted(edges[i], sample[:, i], side='right') for i in _range(D)))
A:numpy.lib._histograms_impl.xy->numpy.ravel_multi_index(Ncount, nbin)
A:numpy.lib._histograms_impl.hist->hist.astype(float, casting='safe').astype(float, casting='safe')
A:numpy.lib._histograms_impl.s->hist.astype(float, casting='safe').astype(float, casting='safe').sum()
A:numpy.lib._histograms_impl.shape->numpy.ones(D, int)
numpy.histogram(a,bins=10,range=None,density=None,weights=None)
numpy.histogram_bin_edges(a,bins=10,range=None,weights=None)
numpy.histogramdd(sample,bins=10,range=None,density=None,weights=None)
numpy.lib._histograms_impl._get_bin_edges(a,bins,range,weights)
numpy.lib._histograms_impl._get_outer_edges(a,range)
numpy.lib._histograms_impl._hist_bin_auto(x,range)
numpy.lib._histograms_impl._hist_bin_doane(x,range)
numpy.lib._histograms_impl._hist_bin_fd(x,range)
numpy.lib._histograms_impl._hist_bin_rice(x,range)
numpy.lib._histograms_impl._hist_bin_scott(x,range)
numpy.lib._histograms_impl._hist_bin_sqrt(x,range)
numpy.lib._histograms_impl._hist_bin_stone(x,range)
numpy.lib._histograms_impl._hist_bin_sturges(x,range)
numpy.lib._histograms_impl._histogram_bin_edges_dispatcher(a,bins=None,range=None,weights=None)
numpy.lib._histograms_impl._histogram_dispatcher(a,bins=None,range=None,density=None,weights=None)
numpy.lib._histograms_impl._histogramdd_dispatcher(sample,bins=None,range=None,density=None,weights=None)
numpy.lib._histograms_impl._ptp(x)
numpy.lib._histograms_impl._ravel_and_check_weights(a,weights)
numpy.lib._histograms_impl._search_sorted_inclusive(a,v)
numpy.lib._histograms_impl._unsigned_subtract(a,b)
numpy.lib._histograms_impl.histogram(a,bins=10,range=None,density=None,weights=None)
numpy.lib._histograms_impl.histogram_bin_edges(a,bins=10,range=None,weights=None)
numpy.lib._histograms_impl.histogramdd(sample,bins=10,range=None,density=None,weights=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_histograms_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_index_tricks_impl.py----------------------------------------
A:numpy.lib._index_tricks_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._index_tricks_impl.nd->len(args)
A:numpy.lib._index_tricks_impl.new->new.reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1))
A:numpy.lib._index_tricks_impl.(new,)->new.reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).nonzero()
A:numpy.lib._index_tricks_impl.step->int(abs(step))
A:numpy.lib._index_tricks_impl.typ->numpy._core.numeric.result_type(start, stop, step_float)
A:numpy.lib._index_tricks_impl.nn->numpy._core.numeric.indices(size, typ)
A:numpy.lib._index_tricks_impl.slobj[k]->slice(None, None)
A:numpy.lib._index_tricks_impl.step_float->abs(step)
A:numpy.lib._index_tricks_impl.steplength->int(step_float)
A:numpy.lib._index_tricks_impl.mgrid->MGridClass()
A:numpy.lib._index_tricks_impl.ogrid->OGridClass()
A:numpy.lib._index_tricks_impl.concatenate->staticmethod(_nx.concatenate)
A:numpy.lib._index_tricks_impl.makemat->staticmethod(matrixlib.matrix)
A:numpy.lib._index_tricks_impl.mymat->numpy.matrixlib.bmat(key, frame.f_globals, frame.f_locals)
A:numpy.lib._index_tricks_impl.size->int(abs(step))
A:numpy.lib._index_tricks_impl.newobj->newobj.transpose(axes).transpose(axes)
A:numpy.lib._index_tricks_impl.vec->item.split(',')
A:numpy.lib._index_tricks_impl.trans1d->int(vec[2])
A:numpy.lib._index_tricks_impl.axis->int(item)
A:numpy.lib._index_tricks_impl.item_ndim->numpy.ndim(item)
A:numpy.lib._index_tricks_impl.defaxes->list(range(ndmin))
A:numpy.lib._index_tricks_impl.final_dtype->numpy._core.numeric.result_type(*result_type_objs)
A:numpy.lib._index_tricks_impl.res->self.makemat(res)
A:numpy.lib._index_tricks_impl.r_->RClass()
A:numpy.lib._index_tricks_impl.c_->CClass()
A:numpy.lib._index_tricks_impl.x->as_strided(_nx.zeros(1), shape=shape, strides=_nx.zeros_like(shape))
A:numpy.lib._index_tricks_impl.self._it->numpy._core.numeric.nditer(x, flags=['multi_index', 'zerosize_ok'], order='C')
A:numpy.lib._index_tricks_impl.index_exp->IndexExpression(maketuple=True)
A:numpy.lib._index_tricks_impl.s_->IndexExpression(maketuple=False)
A:numpy.lib._index_tricks_impl.idx->numpy.arange(n)
numpy.diag_indices(n,ndim=2)
numpy.diag_indices_from(arr)
numpy.fill_diagonal(a,val,wrap=False)
numpy.ix_(*args)
numpy.lib._index_tricks_impl.AxisConcatenator(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib._index_tricks_impl.AxisConcatenator.__getitem__(self,key)
numpy.lib._index_tricks_impl.AxisConcatenator.__init__(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib._index_tricks_impl.AxisConcatenator.__len__(self)
numpy.lib._index_tricks_impl.CClass(self)
numpy.lib._index_tricks_impl.CClass.__init__(self)
numpy.lib._index_tricks_impl.IndexExpression(self,maketuple)
numpy.lib._index_tricks_impl.IndexExpression.__getitem__(self,item)
numpy.lib._index_tricks_impl.IndexExpression.__init__(self,maketuple)
numpy.lib._index_tricks_impl.MGridClass(self)
numpy.lib._index_tricks_impl.MGridClass.__init__(self)
numpy.lib._index_tricks_impl.OGridClass(self)
numpy.lib._index_tricks_impl.OGridClass.__init__(self)
numpy.lib._index_tricks_impl.RClass(self)
numpy.lib._index_tricks_impl.RClass.__init__(self)
numpy.lib._index_tricks_impl._diag_indices_from(arr)
numpy.lib._index_tricks_impl._fill_diagonal_dispatcher(a,val,wrap=None)
numpy.lib._index_tricks_impl._ix__dispatcher(*args)
numpy.lib._index_tricks_impl.diag_indices(n,ndim=2)
numpy.lib._index_tricks_impl.diag_indices_from(arr)
numpy.lib._index_tricks_impl.fill_diagonal(a,val,wrap=False)
numpy.lib._index_tricks_impl.ix_(*args)
numpy.lib._index_tricks_impl.nd_grid(self,sparse=False)
numpy.lib._index_tricks_impl.nd_grid.__getitem__(self,key)
numpy.lib._index_tricks_impl.nd_grid.__init__(self,sparse=False)
numpy.lib._index_tricks_impl.ndenumerate(self,arr)
numpy.lib._index_tricks_impl.ndenumerate.__init__(self,arr)
numpy.lib._index_tricks_impl.ndenumerate.__iter__(self)
numpy.lib._index_tricks_impl.ndenumerate.__next__(self)
numpy.lib._index_tricks_impl.ndindex(self,*shape)
numpy.lib._index_tricks_impl.ndindex.__init__(self,*shape)
numpy.lib._index_tricks_impl.ndindex.__iter__(self)
numpy.lib._index_tricks_impl.ndindex.__next__(self)
numpy.lib._index_tricks_impl.ndindex.ndincr(self)
numpy.ndenumerate(self,arr)
numpy.ndenumerate.__iter__(self)
numpy.ndenumerate.__next__(self)
numpy.ndindex(self,*shape)
numpy.ndindex.__iter__(self)
numpy.ndindex.__next__(self)
numpy.ndindex.ndincr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_index_tricks_impl.pyi----------------------------------------
numpy.lib._index_tricks_impl.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:None=...)->NDArray[Any]
numpy.lib._index_tricks_impl.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:_ArrayType=...)->_ArrayType
numpy.lib._index_tricks_impl.AxisConcatenator.makemat(data:ArrayLike,dtype:DTypeLike=...,copy:bool=...)->_Matrix[Any, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_ufunclike_impl.py----------------------------------------
A:numpy.lib._ufunclike_impl.res->numpy._core.numeric.floor(x, out=res, where=nx.greater_equal(x, 0))
A:numpy.lib._ufunclike_impl.is_inf->numpy._core.numeric.isinf(x)
A:numpy.lib._ufunclike_impl.signbit->numpy._core.numeric.signbit(x)
numpy.fix(x,out=None)
numpy.isneginf(x,out=None)
numpy.isposinf(x,out=None)
numpy.lib._ufunclike_impl._dispatcher(x,out=None)
numpy.lib._ufunclike_impl.fix(x,out=None)
numpy.lib._ufunclike_impl.isneginf(x,out=None)
numpy.lib._ufunclike_impl.isposinf(x,out=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_ufunclike_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/mixins.py----------------------------------------
A:numpy.lib.mixins.func.__name__->'__{}__'.format(name)
A:numpy.lib.mixins.__lt__->_binary_method(um.less, 'lt')
A:numpy.lib.mixins.__le__->_binary_method(um.less_equal, 'le')
A:numpy.lib.mixins.__eq__->_binary_method(um.equal, 'eq')
A:numpy.lib.mixins.__ne__->_binary_method(um.not_equal, 'ne')
A:numpy.lib.mixins.__gt__->_binary_method(um.greater, 'gt')
A:numpy.lib.mixins.__ge__->_binary_method(um.greater_equal, 'ge')
A:numpy.lib.mixins.(__add__, __radd__, __iadd__)->_numeric_methods(um.add, 'add')
A:numpy.lib.mixins.(__sub__, __rsub__, __isub__)->_numeric_methods(um.subtract, 'sub')
A:numpy.lib.mixins.(__mul__, __rmul__, __imul__)->_numeric_methods(um.multiply, 'mul')
A:numpy.lib.mixins.(__matmul__, __rmatmul__, __imatmul__)->_numeric_methods(um.matmul, 'matmul')
A:numpy.lib.mixins.(__truediv__, __rtruediv__, __itruediv__)->_numeric_methods(um.true_divide, 'truediv')
A:numpy.lib.mixins.(__floordiv__, __rfloordiv__, __ifloordiv__)->_numeric_methods(um.floor_divide, 'floordiv')
A:numpy.lib.mixins.(__mod__, __rmod__, __imod__)->_numeric_methods(um.remainder, 'mod')
A:numpy.lib.mixins.__divmod__->_binary_method(um.divmod, 'divmod')
A:numpy.lib.mixins.__rdivmod__->_reflected_binary_method(um.divmod, 'divmod')
A:numpy.lib.mixins.(__pow__, __rpow__, __ipow__)->_numeric_methods(um.power, 'pow')
A:numpy.lib.mixins.(__lshift__, __rlshift__, __ilshift__)->_numeric_methods(um.left_shift, 'lshift')
A:numpy.lib.mixins.(__rshift__, __rrshift__, __irshift__)->_numeric_methods(um.right_shift, 'rshift')
A:numpy.lib.mixins.(__and__, __rand__, __iand__)->_numeric_methods(um.bitwise_and, 'and')
A:numpy.lib.mixins.(__xor__, __rxor__, __ixor__)->_numeric_methods(um.bitwise_xor, 'xor')
A:numpy.lib.mixins.(__or__, __ror__, __ior__)->_numeric_methods(um.bitwise_or, 'or')
A:numpy.lib.mixins.__neg__->_unary_method(um.negative, 'neg')
A:numpy.lib.mixins.__pos__->_unary_method(um.positive, 'pos')
A:numpy.lib.mixins.__abs__->_unary_method(um.absolute, 'abs')
A:numpy.lib.mixins.__invert__->_unary_method(um.invert, 'invert')
numpy.lib.mixins.NDArrayOperatorsMixin
numpy.lib.mixins._binary_method(ufunc,name)
numpy.lib.mixins._disables_array_ufunc(obj)
numpy.lib.mixins._inplace_binary_method(ufunc,name)
numpy.lib.mixins._numeric_methods(ufunc,name)
numpy.lib.mixins._reflected_binary_method(ufunc,name)
numpy.lib.mixins._unary_method(ufunc,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/mixins.pyi----------------------------------------
numpy.lib.mixins.NDArrayOperatorsMixin.__abs__(self)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__add__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__and__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__array_ufunc__(self,ufunc:ufunc,method:L['__call__','reduce','reduceat','accumulate','outer','at'],*inputs:Any,**kwargs:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__divmod__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__eq__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__floordiv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ge__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__gt__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__iadd__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__iand__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ifloordiv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ilshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__imatmul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__imod__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__imul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__invert__(self)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ior__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ipow__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__irshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__isub__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__itruediv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ixor__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__le__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__lshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__lt__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__matmul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__mod__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__mul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ne__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__neg__(self)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__or__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__pos__(self)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__pow__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__radd__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rand__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rdivmod__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rfloordiv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rlshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rmatmul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rmod__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rmul__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__ror__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rpow__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rrshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rshift__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rsub__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rtruediv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__rxor__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__sub__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__truediv__(self,other:Any)->Any
numpy.lib.mixins.NDArrayOperatorsMixin.__xor__(self,other:Any)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/user_array.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_iotools.py----------------------------------------
A:numpy.lib._iotools.line->line.strip('\r\n').strip('\r\n')
A:numpy.lib._iotools.flat_dt->flatten_dtype(info[0], flatten_base)
A:numpy.lib._iotools.delimiter->_decode_line(delimiter)
A:numpy.lib._iotools.comments->_decode_line(comments)
A:numpy.lib._iotools.idx->numpy.cumsum([0] + list(delimiter))
A:numpy.lib._iotools.self._handyman->self.autostrip(_handyman)
A:numpy.lib._iotools.defaultdeletechars->set("~!@#$%^&*()-=+~\\|]}[{';: /?.>,<")
A:numpy.lib._iotools.delete->set(deletechars)
A:numpy.lib._iotools.nbnames->len(names)
A:numpy.lib._iotools.seen->dict()
A:numpy.lib._iotools.item->''.join([c for c in item if c not in deletechars])
A:numpy.lib._iotools.cnt->dict().get(item, 0)
A:numpy.lib._iotools.value->value.upper().upper()
A:numpy.lib._iotools.default->self.func('0')
A:numpy.lib._iotools.self._locked->bool(locked)
A:numpy.lib._iotools.dtype->self._getdtype(default)
A:numpy.lib._iotools.(self._status, (_, func, default_def))->self._find_map_entry(dtype)
A:numpy.lib._iotools.missing_values->missing_values.split(',').split(',')
A:numpy.lib._iotools.self.missing_values->set()
A:numpy.lib._iotools.self.type->self._dtypeortype(self._getdtype(tester))
A:numpy.lib._iotools.new_value->self.func(value)
A:numpy.lib._iotools._statusmax->len(self._mapper)
A:numpy.lib._iotools.tester->func(testing_value or '1')
A:numpy.lib._iotools.ndtype->numpy.dtype(list(zip(names, formats)))
A:numpy.lib._iotools.validate->NameValidator(**validationargs)
A:numpy.lib._iotools.nbfields->len(ndtype)
A:numpy.lib._iotools.names->validate(names, defaultfmt=defaultfmt)
A:numpy.lib._iotools.formats->tuple([ndtype.type] * len(names))
A:numpy.lib._iotools.ndtype.names->validate(ndtype.names, defaultfmt=defaultfmt)
A:numpy.lib._iotools.numbered_names->tuple(('f%i' % i for i in range(len(ndtype.names))))
numpy.lib._iotools.ConversionWarning(UserWarning)
numpy.lib._iotools.ConverterError(Exception)
numpy.lib._iotools.ConverterLockError(ConverterError)
numpy.lib._iotools.LineSplitter(self,delimiter=None,comments='#',autostrip=True,encoding=None)
numpy.lib._iotools.LineSplitter.__init__(self,delimiter=None,comments='#',autostrip=True,encoding=None)
numpy.lib._iotools.LineSplitter._delimited_splitter(self,line)
numpy.lib._iotools.LineSplitter._fixedwidth_splitter(self,line)
numpy.lib._iotools.LineSplitter._variablewidth_splitter(self,line)
numpy.lib._iotools.LineSplitter.autostrip(self,method)
numpy.lib._iotools.NameValidator(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.__init__(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.validate(self,names,defaultfmt='f%i',nbfields=None)
numpy.lib._iotools.StringConverter(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter.__init__(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter._do_upgrade(self)
numpy.lib._iotools.StringConverter._dtypeortype(cls,dtype)
numpy.lib._iotools.StringConverter._find_map_entry(cls,dtype)
numpy.lib._iotools.StringConverter._getdtype(cls,val)
numpy.lib._iotools.StringConverter._getsubdtype(cls,val)
numpy.lib._iotools.StringConverter._loose_call(self,value)
numpy.lib._iotools.StringConverter._strict_call(self,value)
numpy.lib._iotools.StringConverter.iterupgrade(self,value)
numpy.lib._iotools.StringConverter.update(self,func,default=None,testing_value=None,missing_values='',locked=False)
numpy.lib._iotools.StringConverter.upgrade(self,value)
numpy.lib._iotools.StringConverter.upgrade_mapper(cls,func,default=None)
numpy.lib._iotools._decode_line(line,encoding=None)
numpy.lib._iotools._is_bytes_like(obj)
numpy.lib._iotools._is_string_like(obj)
numpy.lib._iotools.easy_dtype(ndtype,names=None,defaultfmt='f%i',**validationargs)
numpy.lib._iotools.flatten_dtype(ndtype,flatten_base=False)
numpy.lib._iotools.has_nested_fields(ndtype)
numpy.lib._iotools.str2bool(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arrayterator_impl.py----------------------------------------
A:numpy.lib._arrayterator_impl.length->len(fixed)
A:numpy.lib._arrayterator_impl.index->tuple(fixed)
A:numpy.lib._arrayterator_impl.out->self.__class__(self.var, self.buf_size)
A:numpy.lib._arrayterator_impl.out.stop[i]->min(stop, out.stop[i])
A:numpy.lib._arrayterator_impl.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
A:numpy.lib._arrayterator_impl.stop[i]->min(self.stop[i], stop[i])
numpy.lib.Arrayterator(self,var,buf_size=None)
numpy.lib.Arrayterator.__array__(self,dtype=None,copy=None)
numpy.lib.Arrayterator.__getattr__(self,attr)
numpy.lib.Arrayterator.__getitem__(self,index)
numpy.lib.Arrayterator.__iter__(self)
numpy.lib.Arrayterator.flat(self)
numpy.lib.Arrayterator.shape(self)
numpy.lib._arrayterator_impl.Arrayterator(self,var,buf_size=None)
numpy.lib._arrayterator_impl.Arrayterator.__array__(self,dtype=None,copy=None)
numpy.lib._arrayterator_impl.Arrayterator.__getattr__(self,attr)
numpy.lib._arrayterator_impl.Arrayterator.__getitem__(self,index)
numpy.lib._arrayterator_impl.Arrayterator.__init__(self,var,buf_size=None)
numpy.lib._arrayterator_impl.Arrayterator.__iter__(self)
numpy.lib._arrayterator_impl.Arrayterator.flat(self)
numpy.lib._arrayterator_impl.Arrayterator.shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_arrayterator_impl.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_datasource.py----------------------------------------
A:numpy.lib._datasource._file_openers->_FileOpeners()
A:numpy.lib._datasource.ds->DataSource(destpath)
A:numpy.lib._datasource.self._destpath->tempfile.mkdtemp()
A:numpy.lib._datasource.(fname, ext)->os.path.splitext(filename)
A:numpy.lib._datasource.(scheme, netloc, upath, uparams, uquery, ufrag)->urlparse(path)
A:numpy.lib._datasource.upath->self.abspath(path)
A:numpy.lib._datasource.filelist->self._possible_names(self.abspath(path))
A:numpy.lib._datasource.name->self._cache(name)
A:numpy.lib._datasource.splitpath->path.lstrip(os.pardir).lstrip('..').split(self._baseurl, 2)
A:numpy.lib._datasource.netloc->self._sanitize_relative_path(netloc)
A:numpy.lib._datasource.path->path.lstrip(os.pardir).lstrip('..').lstrip(os.pardir).lstrip('..')
A:numpy.lib._datasource.(drive, path)->os.path.splitdrive(path)
A:numpy.lib._datasource.netfile->urlopen(path)
A:numpy.lib._datasource.found->self._findfile(path)
A:numpy.lib._datasource.(_fname, ext)->self._splitzipext(found)
A:numpy.lib._datasource.result->os.path.join(self._baseurl, path)
numpy.lib._datasource.DataSource(self,destpath=os.curdir)
numpy.lib._datasource.DataSource.__del__(self)
numpy.lib._datasource.DataSource.__init__(self,destpath=os.curdir)
numpy.lib._datasource.DataSource._cache(self,path)
numpy.lib._datasource.DataSource._findfile(self,path)
numpy.lib._datasource.DataSource._isurl(self,path)
numpy.lib._datasource.DataSource._iswritemode(self,mode)
numpy.lib._datasource.DataSource._iszip(self,filename)
numpy.lib._datasource.DataSource._possible_names(self,filename)
numpy.lib._datasource.DataSource._sanitize_relative_path(self,path)
numpy.lib._datasource.DataSource._splitzipext(self,filename)
numpy.lib._datasource.DataSource.abspath(self,path)
numpy.lib._datasource.DataSource.exists(self,path)
numpy.lib._datasource.DataSource.open(self,path,mode='r',encoding=None,newline=None)
numpy.lib._datasource.Repository(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository.__del__(self)
numpy.lib._datasource.Repository.__init__(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository._findfile(self,path)
numpy.lib._datasource.Repository._fullpath(self,path)
numpy.lib._datasource.Repository.abspath(self,path)
numpy.lib._datasource.Repository.exists(self,path)
numpy.lib._datasource.Repository.listdir(self)
numpy.lib._datasource.Repository.open(self,path,mode='r',encoding=None,newline=None)
numpy.lib._datasource._FileOpeners(self)
numpy.lib._datasource._FileOpeners.__getitem__(self,key)
numpy.lib._datasource._FileOpeners.__init__(self)
numpy.lib._datasource._FileOpeners._load(self)
numpy.lib._datasource._FileOpeners.keys(self)
numpy.lib._datasource._check_mode(mode,encoding,newline)
numpy.lib._datasource.open(path,mode='r',destpath=os.curdir,encoding=None,newline=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_type_check_impl.py----------------------------------------
A:numpy.lib._type_check_impl.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib._type_check_impl.intersection->set((t for t in typecodes if t in typeset))
A:numpy.lib._type_check_impl.ax->asanyarray(x)
A:numpy.lib._type_check_impl.res->zeros(ax.shape, bool)
A:numpy.lib._type_check_impl.f->numpy._core.getlimits.finfo(type_)
A:numpy.lib._type_check_impl.x->numpy._core.numeric.array(x, subok=True, copy=copy)
A:numpy.lib._type_check_impl.iscomplex->issubclass(xtype, _nx.complexfloating)
A:numpy.lib._type_check_impl.(maxf, minf)->_getmaxmin(x.real.dtype)
A:numpy.lib._type_check_impl.idx_nan->isnan(d)
A:numpy.lib._type_check_impl.idx_posinf->isposinf(d)
A:numpy.lib._type_check_impl.idx_neginf->isneginf(d)
A:numpy.lib._type_check_impl.a->asanyarray(a)
A:numpy.lib._type_check_impl.p->array_precision.get(t, None)
A:numpy.lib._type_check_impl.precision->max(precision, p)
numpy.common_type(*arrays)
numpy.imag(val)
numpy.iscomplex(x)
numpy.iscomplexobj(x)
numpy.isreal(x)
numpy.isrealobj(x)
numpy.lib._type_check_impl._common_type_dispatcher(*arrays)
numpy.lib._type_check_impl._getmaxmin(t)
numpy.lib._type_check_impl._imag_dispatcher(val)
numpy.lib._type_check_impl._is_type_dispatcher(x)
numpy.lib._type_check_impl._nan_to_num_dispatcher(x,copy=None,nan=None,posinf=None,neginf=None)
numpy.lib._type_check_impl._real_dispatcher(val)
numpy.lib._type_check_impl._real_if_close_dispatcher(a,tol=None)
numpy.lib._type_check_impl.common_type(*arrays)
numpy.lib._type_check_impl.imag(val)
numpy.lib._type_check_impl.iscomplex(x)
numpy.lib._type_check_impl.iscomplexobj(x)
numpy.lib._type_check_impl.isreal(x)
numpy.lib._type_check_impl.isrealobj(x)
numpy.lib._type_check_impl.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.lib._type_check_impl.nan_to_num(x,copy=True,nan=0.0,posinf=None,neginf=None)
numpy.lib._type_check_impl.real(val)
numpy.lib._type_check_impl.real_if_close(a,tol=100)
numpy.lib._type_check_impl.typename(char)
numpy.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.nan_to_num(x,copy=True,nan=0.0,posinf=None,neginf=None)
numpy.real(val)
numpy.real_if_close(a,tol=100)
numpy.typename(char)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_type_check_impl.pyi----------------------------------------
numpy.lib._type_check_impl._SupportsImag(Protocol[_T_co])
numpy.lib._type_check_impl._SupportsImag.imag(self)->_T_co
numpy.lib._type_check_impl._SupportsReal(Protocol[_T_co])
numpy.lib._type_check_impl._SupportsReal.real(self)->_T_co


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/recfunctions.py----------------------------------------
A:numpy.lib.recfunctions.output->numpy.ma.masked_all((cmn + r1spc + r2spc,), dtype=ndtype)
A:numpy.lib.recfunctions.seqarrays->seqarrays.ravel().ravel()
A:numpy.lib.recfunctions.seqdtype->numpy.dtype([('', seqdtype)])
A:numpy.lib.recfunctions.sizes->tuple((a.size for a in seqarrays))
A:numpy.lib.recfunctions.maxlength->max(sizes)
A:numpy.lib.recfunctions.newdtype->_recursive_rename_fields(base.dtype, namemapper)
A:numpy.lib.recfunctions.data->data.pop().pop()
A:numpy.lib.recfunctions.mask->numpy.ma.getmaskarray(a).ravel()
A:numpy.lib.recfunctions.fval->numpy.array(fval, dtype=a.dtype, ndmin=1)
A:numpy.lib.recfunctions.fmsk->numpy.ones((1,), dtype=mask.dtype)
A:numpy.lib.recfunctions.drop_names->set(drop_names)
A:numpy.lib.recfunctions.descr->_drop_descr(current, drop_names)
A:numpy.lib.recfunctions.newname->namemapper.get(name, name)
A:numpy.lib.recfunctions.base->merge_arrays(base, usemask=usemask, fill_value=fill_value)
A:numpy.lib.recfunctions.dt->numpy.dtype(fieldinfo, align=align)
A:numpy.lib.recfunctions.fmt->repack_fields(tup[0], align=align, recurse=True)
A:numpy.lib.recfunctions.(f_dt, n)->count_elem(f_dt)
A:numpy.lib.recfunctions.subfields->_get_fields_and_offsets(f_dt, f_offset + offset)
A:numpy.lib.recfunctions.it->zip(offsets, counts)
A:numpy.lib.recfunctions.fields->get_fieldstructure(a.dtype)
A:numpy.lib.recfunctions.n_fields->len(fields)
A:numpy.lib.recfunctions.(dts, counts, offsets)->zip(*fields)
A:numpy.lib.recfunctions.out_dtype->numpy.dtype([(n, arr.dtype) for n in names], align=align)
A:numpy.lib.recfunctions.flattened_fields->numpy.dtype({'names': names, 'formats': dts, 'offsets': offsets, 'itemsize': out_dtype.itemsize})
A:numpy.lib.recfunctions.arr->arr.astype(flattened_fields, copy=copy, casting=casting).astype(flattened_fields, copy=copy, casting=casting)
A:numpy.lib.recfunctions.common_stride->_common_stride(offsets, counts, out_dtype.itemsize)
A:numpy.lib.recfunctions.packed_fields->numpy.dtype({'names': names, 'formats': [(arr.dtype, dt.shape) for dt in dts]})
A:numpy.lib.recfunctions.dtype->numpy.dtype(dtype)
A:numpy.lib.recfunctions.uarr->structured_to_unstructured(arr)
A:numpy.lib.recfunctions.out->numpy.empty(array.shape, dtype=required_dtype)
A:numpy.lib.recfunctions.newdescr->_get_fieldspec(dtype_l)
A:numpy.lib.recfunctions.nameidx->list((name for (name, dtype) in ndtype)).index(fname)
A:numpy.lib.recfunctions.offset->numpy.cumsum(np.r_[0, nrecords])
A:numpy.lib.recfunctions.a->numpy.asanyarray(a).ravel()
A:numpy.lib.recfunctions.sortidx->merge_arrays(base, usemask=usemask, fill_value=fill_value).argsort()
A:numpy.lib.recfunctions.sorteddata->sortedbase.filled()
A:numpy.lib.recfunctions.flag->numpy.concatenate(([False], flag))
A:numpy.lib.recfunctions.dup->next((x for (n, x) in enumerate(key) if x in key[n + 1:]))
A:numpy.lib.recfunctions.r1->r1.ravel().ravel()
A:numpy.lib.recfunctions.r2->r2.ravel().ravel()
A:numpy.lib.recfunctions.nb1->len(r1)
A:numpy.lib.recfunctions.r1k->_keep_fields(r1, key1)
A:numpy.lib.recfunctions.r2k->_keep_fields(r2, key1)
A:numpy.lib.recfunctions.aux->numpy.ma.concatenate((r1k, r2k))
A:numpy.lib.recfunctions.idx_sort->numpy.ma.concatenate((r1k, r2k)).argsort(order=key)
A:numpy.lib.recfunctions.flag_in->numpy.ma.concatenate(([False], aux[1:] == aux[:-1]))
A:numpy.lib.recfunctions.idx_1->numpy.concatenate((idx_1, idx_out[idx_out < nb1]))
A:numpy.lib.recfunctions.idx_2->numpy.concatenate((idx_2, idx_out[idx_out >= nb1] - nb1))
A:numpy.lib.recfunctions.ndtype->numpy.dtype(ndtype)
A:numpy.lib.recfunctions.names->list((name for (name, dtype) in ndtype))
A:numpy.lib.recfunctions.cmn->max(r1cmn, r2cmn)
A:numpy.lib.recfunctions.kwargs->dict(jointype=jointype, r1postfix=r1postfix, r2postfix=r2postfix, defaults=defaults, usemask=False, asrecarray=True)
numpy.lib.recfunctions._append_fields_dispatcher(base,names,data,dtypes=None,fill_value=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._apply_along_fields_dispatcher(func,arr)
numpy.lib.recfunctions._assign_fields_by_name_dispatcher(dst,src,zero_unassigned=None)
numpy.lib.recfunctions._common_stride(offsets,counts,itemsize)
numpy.lib.recfunctions._drop_fields_dispatcher(base,drop_names,usemask=None,asrecarray=None)
numpy.lib.recfunctions._find_duplicates_dispatcher(a,key=None,ignoremask=None,return_index=None)
numpy.lib.recfunctions._fix_defaults(output,defaults=None)
numpy.lib.recfunctions._fix_output(output,usemask=True,asrecarray=False)
numpy.lib.recfunctions._get_fields_and_offsets(dt,offset=0)
numpy.lib.recfunctions._get_fieldspec(dtype)
numpy.lib.recfunctions._izip_fields(iterable)
numpy.lib.recfunctions._izip_fields_flat(iterable)
numpy.lib.recfunctions._izip_records(seqarrays,fill_value=None,flatten=True)
numpy.lib.recfunctions._join_by_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._keep_fields(base,keep_names,usemask=True,asrecarray=False)
numpy.lib.recfunctions._merge_arrays_dispatcher(seqarrays,fill_value=None,flatten=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._rec_append_fields_dispatcher(base,names,data,dtypes=None)
numpy.lib.recfunctions._rec_drop_fields_dispatcher(base,drop_names)
numpy.lib.recfunctions._rec_join_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None)
numpy.lib.recfunctions._recursive_fill_fields_dispatcher(input,output)
numpy.lib.recfunctions._rename_fields_dispatcher(base,namemapper)
numpy.lib.recfunctions._repack_fields_dispatcher(a,align=None,recurse=None)
numpy.lib.recfunctions._require_fields_dispatcher(array,required_dtype)
numpy.lib.recfunctions._stack_arrays_dispatcher(arrays,defaults=None,usemask=None,asrecarray=None,autoconvert=None)
numpy.lib.recfunctions._structured_to_unstructured_dispatcher(arr,dtype=None,copy=None,casting=None)
numpy.lib.recfunctions._unstructured_to_structured_dispatcher(arr,dtype=None,names=None,align=None,copy=None,casting=None)
numpy.lib.recfunctions._zip_descr(seqarrays,flatten=False)
numpy.lib.recfunctions._zip_dtype(seqarrays,flatten=False)
numpy.lib.recfunctions.append_fields(base,names,data,dtypes=None,fill_value=-1,usemask=True,asrecarray=False)
numpy.lib.recfunctions.apply_along_fields(func,arr)
numpy.lib.recfunctions.assign_fields_by_name(dst,src,zero_unassigned=True)
numpy.lib.recfunctions.drop_fields(base,drop_names,usemask=True,asrecarray=False)
numpy.lib.recfunctions.find_duplicates(a,key=None,ignoremask=True,return_index=False)
numpy.lib.recfunctions.flatten_descr(ndtype)
numpy.lib.recfunctions.get_fieldstructure(adtype,lastname=None,parents=None)
numpy.lib.recfunctions.get_names(adtype)
numpy.lib.recfunctions.get_names_flat(adtype)
numpy.lib.recfunctions.join_by(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None,usemask=True,asrecarray=False)
numpy.lib.recfunctions.merge_arrays(seqarrays,fill_value=-1,flatten=False,usemask=False,asrecarray=False)
numpy.lib.recfunctions.rec_append_fields(base,names,data,dtypes=None)
numpy.lib.recfunctions.rec_drop_fields(base,drop_names)
numpy.lib.recfunctions.rec_join(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None)
numpy.lib.recfunctions.recursive_fill_fields(input,output)
numpy.lib.recfunctions.rename_fields(base,namemapper)
numpy.lib.recfunctions.repack_fields(a,align=False,recurse=False)
numpy.lib.recfunctions.require_fields(array,required_dtype)
numpy.lib.recfunctions.stack_arrays(arrays,defaults=None,usemask=True,asrecarray=False,autoconvert=False)
numpy.lib.recfunctions.structured_to_unstructured(arr,dtype=None,copy=False,casting='unsafe')
numpy.lib.recfunctions.unstructured_to_structured(arr,dtype=None,names=None,align=False,copy=False,casting='unsafe')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/_user_array_impl.py----------------------------------------
A:numpy.lib._user_array_impl.self.array->array(data, dtype, copy=copy)
A:numpy.lib._user_array_impl.self.array[index]->asarray(value, self.dtype)
A:numpy.lib._user_array_impl.temp->reshape(arange(10000), (100, 100))
A:numpy.lib._user_array_impl.ua->container(temp)
numpy.lib._user_array_impl.container(self,data,dtype=None,copy=True)
numpy.lib._user_array_impl.container.__abs__(self)
numpy.lib._user_array_impl.container.__add__(self,other)
numpy.lib._user_array_impl.container.__and__(self,other)
numpy.lib._user_array_impl.container.__array__(self,t=None)
numpy.lib._user_array_impl.container.__array_wrap__(self,*args)
numpy.lib._user_array_impl.container.__complex__(self)
numpy.lib._user_array_impl.container.__div__(self,other)
numpy.lib._user_array_impl.container.__divmod__(self,other)
numpy.lib._user_array_impl.container.__eq__(self,other)
numpy.lib._user_array_impl.container.__float__(self)
numpy.lib._user_array_impl.container.__ge__(self,other)
numpy.lib._user_array_impl.container.__getattr__(self,attr)
numpy.lib._user_array_impl.container.__getitem__(self,index)
numpy.lib._user_array_impl.container.__gt__(self,other)
numpy.lib._user_array_impl.container.__hex__(self)
numpy.lib._user_array_impl.container.__iadd__(self,other)
numpy.lib._user_array_impl.container.__iand__(self,other)
numpy.lib._user_array_impl.container.__idiv__(self,other)
numpy.lib._user_array_impl.container.__ilshift__(self,other)
numpy.lib._user_array_impl.container.__imod__(self,other)
numpy.lib._user_array_impl.container.__imul__(self,other)
numpy.lib._user_array_impl.container.__init__(self,data,dtype=None,copy=True)
numpy.lib._user_array_impl.container.__int__(self)
numpy.lib._user_array_impl.container.__invert__(self)
numpy.lib._user_array_impl.container.__ior__(self,other)
numpy.lib._user_array_impl.container.__ipow__(self,other)
numpy.lib._user_array_impl.container.__irshift__(self,other)
numpy.lib._user_array_impl.container.__isub__(self,other)
numpy.lib._user_array_impl.container.__ixor__(self,other)
numpy.lib._user_array_impl.container.__le__(self,other)
numpy.lib._user_array_impl.container.__len__(self)
numpy.lib._user_array_impl.container.__lshift__(self,other)
numpy.lib._user_array_impl.container.__lt__(self,other)
numpy.lib._user_array_impl.container.__mod__(self,other)
numpy.lib._user_array_impl.container.__mul__(self,other)
numpy.lib._user_array_impl.container.__ne__(self,other)
numpy.lib._user_array_impl.container.__neg__(self)
numpy.lib._user_array_impl.container.__oct__(self)
numpy.lib._user_array_impl.container.__or__(self,other)
numpy.lib._user_array_impl.container.__pos__(self)
numpy.lib._user_array_impl.container.__pow__(self,other)
numpy.lib._user_array_impl.container.__rand__(self,other)
numpy.lib._user_array_impl.container.__rdiv__(self,other)
numpy.lib._user_array_impl.container.__rdivmod__(self,other)
numpy.lib._user_array_impl.container.__repr__(self)
numpy.lib._user_array_impl.container.__rlshift__(self,other)
numpy.lib._user_array_impl.container.__rmod__(self,other)
numpy.lib._user_array_impl.container.__ror__(self,other)
numpy.lib._user_array_impl.container.__rpow__(self,other)
numpy.lib._user_array_impl.container.__rrshift__(self,other)
numpy.lib._user_array_impl.container.__rshift__(self,other)
numpy.lib._user_array_impl.container.__rsub__(self,other)
numpy.lib._user_array_impl.container.__rxor__(self,other)
numpy.lib._user_array_impl.container.__setattr__(self,attr,value)
numpy.lib._user_array_impl.container.__setitem__(self,index,value)
numpy.lib._user_array_impl.container.__sub__(self,other)
numpy.lib._user_array_impl.container.__xor__(self,other)
numpy.lib._user_array_impl.container._rc(self,a)
numpy.lib._user_array_impl.container._scalarfunc(self,func)
numpy.lib._user_array_impl.container.astype(self,typecode)
numpy.lib._user_array_impl.container.byteswap(self)
numpy.lib._user_array_impl.container.copy(self)
numpy.lib._user_array_impl.container.tobytes(self)
numpy.lib._user_array_impl.container.tostring(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_recfunctions.py----------------------------------------
A:numpy.lib.tests.test_recfunctions.x->numpy.array([(obj, 1.0), (obj, 2.0)], dtype=[('A', object), ('B', float)])
A:numpy.lib.tests.test_recfunctions.y->numpy.array([10, 20], dtype=int)
A:numpy.lib.tests.test_recfunctions.z->numpy.array([('A', 1), ('B', 2)], dtype=[('A', '|S3'), ('B', float, (1,))])
A:numpy.lib.tests.test_recfunctions.w->numpy.array([(1, (2, 3.0)), (4, (5, 6.0))], dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
A:numpy.lib.tests.test_recfunctions.test->append_fields(x, 'C', data=y, usemask=False)
A:numpy.lib.tests.test_recfunctions.a->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(50, 60), np.arange(10, 20))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.control->numpy.array([(obj, 1.0, 10), (obj, 2.0, 20)], dtype=[('A', object), ('B', float), ('C', int)])
A:numpy.lib.tests.test_recfunctions.ndtype->numpy.dtype([])
A:numpy.lib.tests.test_recfunctions.dt->numpy.dtype('i1,f4', align=True)
A:numpy.lib.tests.test_recfunctions.out->unstructured_to_structured(c, a.dtype)
A:numpy.lib.tests.test_recfunctions.b->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(65, 75), np.arange(0, 10))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.c->numpy.arange(20).reshape((4, 5))
A:numpy.lib.tests.test_recfunctions.want->numpy.array([(0, (1.0, 2), [3.0, 4.0]), (5, (6.0, 7), [8.0, 9.0]), (10, (11.0, 12), [13.0, 14.0]), (15, (16.0, 17), [18.0, 19.0])], dtype=[('a', 'i4'), ('b', [('f0', 'f4'), ('f1', 'u2')]), ('c', 'f4', (2,))])
A:numpy.lib.tests.test_recfunctions.d->numpy.memmap(tmp_path / 'memmap', mode='w+', dtype=d_plain.dtype, shape=d_plain.shape)
A:numpy.lib.tests.test_recfunctions.dd->structured_to_unstructured(d, copy=False)
A:numpy.lib.tests.test_recfunctions.ddd->structured_to_unstructured(d, copy=True)
A:numpy.lib.tests.test_recfunctions.dd_attrib_rev->structured_to_unstructured(d_attrib_rev)
A:numpy.lib.tests.test_recfunctions.dd_rev->structured_to_unstructured(d_rev)
A:numpy.lib.tests.test_recfunctions.point->numpy.dtype([('x', int), ('y', int)])
A:numpy.lib.tests.test_recfunctions.triangle->numpy.dtype([('a', point), ('b', point), ('c', point)])
A:numpy.lib.tests.test_recfunctions.arr->numpy.zeros((), dt)
A:numpy.lib.tests.test_recfunctions.res->join_by('k', a, b)
A:numpy.lib.tests.test_recfunctions.ret->structured_to_unstructured(arr, dtype=dtype)
A:numpy.lib.tests.test_recfunctions.backarr->unstructured_to_structured(ret, dt)
A:numpy.lib.tests.test_recfunctions.d_plain->numpy.array([(1, 2), (3, 4)], dtype=[('a', 'i4'), ('b', 'i4')])
A:numpy.lib.tests.test_recfunctions.dd_expected->structured_to_unstructured(d_plain, copy=True)
A:numpy.lib.tests.test_recfunctions.test_dtype->numpy.dtype(test_dtype_args)
A:numpy.lib.tests.test_recfunctions.field1->unstructured_to_structured(a, dtype=test_dtype_args)
A:numpy.lib.tests.test_recfunctions.field2->unstructured_to_structured(a, dtype=test_dtype)
A:numpy.lib.tests.test_recfunctions.mx->numpy.ma.array([1, 2, 3], mask=[1, 0, 0])
A:numpy.lib.tests.test_recfunctions.zz->numpy.array([('a', [10.0], 100.0), ('b', [20.0], 200.0), ('c', [30.0], 300.0)], dtype=[('A', '|S3'), ('B', float, (1,)), ('C', float)])
A:numpy.lib.tests.test_recfunctions.expected->numpy.array([([1, 1, 1], np.pi, 3)], dtype=expected_dtype)
A:numpy.lib.tests.test_recfunctions.self.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.self.b->numpy.array(list(zip(np.arange(5, 15), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
A:numpy.lib.tests.test_recfunctions.foo->numpy.array([(1,)], dtype=[('key', int)])
A:numpy.lib.tests.test_recfunctions.bar->numpy.array([(1, np.array([1, 2, 3]))], dtype=[('key', int), ('value', 'uint16', 3)])
A:numpy.lib.tests.test_recfunctions.j->join_by(['c', 'b'], a, b, jointype='inner', usemask=False)
A:numpy.lib.tests.test_recfunctions.a_dtype->numpy.dtype([('pos', int, 3), ('f', '<f4')])
A:numpy.lib.tests.test_recfunctions.b_dtype->numpy.dtype([('pos', int, 3), ('g', '<f4')])
A:numpy.lib.tests.test_recfunctions.expected_dtype->numpy.dtype([('k', 'i1'), ('v1', 'f4'), ('v2', 'f4')])
A:numpy.lib.tests.test_recfunctions.cls.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.cls.b->numpy.array(list(zip(np.arange(10), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
A:numpy.lib.tests.test_recfunctions.self.data->dict(obj=date(2000, 1, 1))
numpy.lib.tests.test_recfunctions.TestAppendFields
numpy.lib.tests.test_recfunctions.TestAppendFields.setup_method(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_double(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_flex(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_nested(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_single(self)
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.setup_method(self)
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.test_append_to_objects(self)
numpy.lib.tests.test_recfunctions.TestJoinBy
numpy.lib.tests.test_recfunctions.TestJoinBy.setup_method(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_different_field_order(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_duplicate_keys(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_inner_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_join_subdtype(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_leftouter_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_outer_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_padded_dtype(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes_key(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_subarray_key(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2
numpy.lib.tests.test_recfunctions.TestJoinBy2.setup_method(cls)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays
numpy.lib.tests.test_recfunctions.TestMergeArrays.setup_method(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_singlerecord(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_standard(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_singlefield(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions
numpy.lib.tests.test_recfunctions.TestRecFunctions.setup_method(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_drop_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_field_assignment_by_name(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names_flat(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_rename_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_repack_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_structured_to_unstructured(self,tmp_path)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_unstructured_to_structured(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_zip_descr(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible(self)
numpy.lib.tests.test_recfunctions.TestStackArrays
numpy.lib.tests.test_recfunctions.TestStackArrays.setup_method(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_autoconversion(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_checktitles(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_defaults(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_matching_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_subdtype(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_fields(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_array_utils.py----------------------------------------
A:numpy.lib.tests.test_array_utils.a->numpy.arange(12)
A:numpy.lib.tests.test_array_utils.(low, high)->numpy.lib.array_utils.byte_bounds(b)
numpy.lib.tests.test_array_utils.TestByteBounds
numpy.lib.tests.test_array_utils.TestByteBounds.test_byte_bounds(self)
numpy.lib.tests.test_array_utils.TestByteBounds.test_strided(self)
numpy.lib.tests.test_array_utils.TestByteBounds.test_unusual_order_negative_stride(self)
numpy.lib.tests.test_array_utils.TestByteBounds.test_unusual_order_positive_stride(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test__version.py----------------------------------------
numpy.lib.tests.test__version.test_alpha_beta_rc()
numpy.lib.tests.test__version.test_dev0_a_b_rc_mixed()
numpy.lib.tests.test__version.test_dev0_version()
numpy.lib.tests.test__version.test_dev_a_b_rc_mixed()
numpy.lib.tests.test__version.test_dev_version()
numpy.lib.tests.test__version.test_main_versions()
numpy.lib.tests.test__version.test_raises()
numpy.lib.tests.test__version.test_version_1_point_10()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test__iotools.py----------------------------------------
A:numpy.lib.tests.test__iotools.test->convert('')
A:numpy.lib.tests.test__iotools.validator->NameValidator()
A:numpy.lib.tests.test__iotools.converter->StringConverter(np.uint64, default=0)
A:numpy.lib.tests.test__iotools.status_offset->int(nx.dtype(nx.int_).itemsize < nx.dtype(nx.int64).itemsize)
A:numpy.lib.tests.test__iotools.res->StringConverter(np.uint64, default=0).upgrade(s)
A:numpy.lib.tests.test__iotools.convert->StringConverter(dateparser, date(2000, 1, 1))
A:numpy.lib.tests.test__iotools.conv->StringConverter(_bytes_to_date)
A:numpy.lib.tests.test__iotools.ndtype->numpy.dtype(float)
A:numpy.lib.tests.test__iotools.dt->numpy.dtype([(('a', 'A'), 'f8'), (('b', 'B'), 'f8')])
A:numpy.lib.tests.test__iotools.dt_flat->flatten_dtype(dt)
numpy.lib.tests.test__iotools.TestLineSplitter
numpy.lib.tests.test__iotools.TestLineSplitter.test_constant_fixed_width(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_no_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_other_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_space_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_tab_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_variable_fixed_width(self)
numpy.lib.tests.test__iotools.TestMiscFunctions
numpy.lib.tests.test__iotools.TestMiscFunctions.test_easy_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_flatten_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype(self)
numpy.lib.tests.test__iotools.TestNameValidator
numpy.lib.tests.test__iotools.TestNameValidator.test_case_sensitivity(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_excludelist(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_missing_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_nb_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_wo_names(self)
numpy.lib.tests.test__iotools.TestStringConverter
numpy.lib.tests.test__iotools.TestStringConverter.test_creation(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_int64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default_zero(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_missing_values(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_missing(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_string_to_object(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_uint64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrade(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrademapper(self)
numpy.lib.tests.test__iotools._bytes_to_date(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_packbits.py----------------------------------------
A:numpy.lib.tests.test_packbits.arr->numpy.array(a, dtype=dtype)
A:numpy.lib.tests.test_packbits.b->numpy.unpackbits(a, axis=ax)
A:numpy.lib.tests.test_packbits.a->numpy.empty(in_shape, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.rnd->numpy.random.randint(low=np.iinfo(dtype).min, high=np.iinfo(dtype).max, size=arr.size, dtype=dtype)
A:numpy.lib.tests.test_packbits.x->numpy.array([[1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0]], dtype=np.uint8)
A:numpy.lib.tests.test_packbits.b_little->numpy.unpackbits(a, axis=1, bitorder='little')
A:numpy.lib.tests.test_packbits.b_big->numpy.unpackbits(a, axis=1, bitorder='big')
A:numpy.lib.tests.test_packbits.d->d.T.copy().T.copy()
A:numpy.lib.tests.test_packbits.padded1->numpy.zeros(57, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.padded1[:49]->numpy.array([[1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0]], dtype=np.uint8).ravel()
A:numpy.lib.tests.test_packbits.padded1b->numpy.zeros(57, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.padded1b[:49]->x[::-1].copy().ravel()
A:numpy.lib.tests.test_packbits.padded2->numpy.zeros((9, 9), dtype=np.uint8)
A:numpy.lib.tests.test_packbits.packed->numpy.packbits(self.x)
A:numpy.lib.tests.test_packbits.unpacked->numpy.unpackbits(packed, **kwargs)
A:numpy.lib.tests.test_packbits.packed0->numpy.packbits(self.x, axis=0)
A:numpy.lib.tests.test_packbits.unpacked0->numpy.unpackbits(packed0, axis=0, **kwargs)
A:numpy.lib.tests.test_packbits.packed1->numpy.packbits(self.x, axis=1)
A:numpy.lib.tests.test_packbits.unpacked1->numpy.unpackbits(packed1, axis=1, **kwargs)
numpy.lib.tests.test_packbits.TestCount
numpy.lib.tests.test_packbits.TestCount.test_axis_count(self,kwargs)
numpy.lib.tests.test_packbits.TestCount.test_bad_count(self)
numpy.lib.tests.test_packbits.TestCount.test_count(self,kwargs)
numpy.lib.tests.test_packbits.TestCount.test_roundtrip(self,bitorder,count)
numpy.lib.tests.test_packbits.TestCount.test_roundtrip_axis(self,bitorder,count)
numpy.lib.tests.test_packbits.test_pack_unpack_order()
numpy.lib.tests.test_packbits.test_packbits()
numpy.lib.tests.test_packbits.test_packbits_empty()
numpy.lib.tests.test_packbits.test_packbits_empty_with_axis()
numpy.lib.tests.test_packbits.test_packbits_large(bitorder)
numpy.lib.tests.test_packbits.test_packbits_very_large()
numpy.lib.tests.test_packbits.test_unpackbits()
numpy.lib.tests.test_packbits.test_unpackbits_empty()
numpy.lib.tests.test_packbits.test_unpackbits_empty_with_axis()
numpy.lib.tests.test_packbits.test_unpackbits_large()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_arraypad.py----------------------------------------
A:numpy.lib.tests.test_arraypad.expected->numpy.pad(a, ((1, 2), (1, 2), (1, 2)), 'edge')
A:numpy.lib.tests.test_arraypad.result->numpy.pad(arr, 1, mode=mode)
A:numpy.lib.tests.test_arraypad.obj->object()
A:numpy.lib.tests.test_arraypad.test->numpy.pad(arr, (2, 2), mode='linear_ramp', end_values=(0, 0))
A:numpy.lib.tests.test_arraypad.a->numpy.pad(a, np.array(((2, 3), (3, 2))), 'edge')
A:numpy.lib.tests.test_arraypad.b->numpy.array([[0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [3, 3, 3, 3, 4, 5, 5, 5], [6, 6, 6, 6, 7, 8, 8, 8], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11]])
A:numpy.lib.tests.test_arraypad.arr->numpy.zeros((3, 2, 1), dtype=dtype)
A:numpy.lib.tests.test_arraypad.arr_float->numpy.zeros((3, 2, 1), dtype=dtype).astype(np.float64)
A:numpy.lib.tests.test_arraypad.obj_a->object()
A:numpy.lib.tests.test_arraypad.obj_b->object()
A:numpy.lib.tests.test_arraypad.obj_c->object()
A:numpy.lib.tests.test_arraypad.actual->numpy.pad(arr, (2, 3), mode='linear_ramp', end_values=0)
A:numpy.lib.tests.test_arraypad.x->numpy.ones((5, 10), order='F')
A:numpy.lib.tests.test_arraypad.padded->numpy.pad(a, ((1, 2),), 'edge')
A:numpy.lib.tests.test_arraypad.match->"mode '{}' is not supported".format(mode)
numpy.lib.tests.test_arraypad.TestAsPairs
numpy.lib.tests.test_arraypad.TestAsPairs.test_as_index(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_exceptions(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_pass_through(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_single_value(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_two_values(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_with_none(self)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_clip_statistic_range(self,mode)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_shallow_statistic_range(self,mode)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_zero_padding_shortcuts(self,mode)
numpy.lib.tests.test_arraypad.TestConstant
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float2(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float3(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_odd_pad_amount(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_pad_2d(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_zeros(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_large_integers(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_object_array(self)
numpy.lib.tests.test_arraypad.TestConstant.test_pad_empty_dimension(self)
numpy.lib.tests.test_arraypad.TestEdge
numpy.lib.tests.test_arraypad.TestEdge.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestEdge.test_check_width_shape_1_2(self)
numpy.lib.tests.test_arraypad.TestEmpty
numpy.lib.tests.test_arraypad.TestEmpty.test_pad_empty_dimension(self)
numpy.lib.tests.test_arraypad.TestEmpty.test_simple(self)
numpy.lib.tests.test_arraypad.TestEmptyArray
numpy.lib.tests.test_arraypad.TestEmptyArray.test_pad_empty_dimension(self,mode)
numpy.lib.tests.test_arraypad.TestEmptyArray.test_pad_non_empty_dimension(self,mode)
numpy.lib.tests.test_arraypad.TestLinearRamp
numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_2d(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_end_values(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_negative_difference(self,dtype)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_object_array(self)
numpy.lib.tests.test_arraypad.TestPadWidth
numpy.lib.tests.test_arraypad.TestPadWidth.test_bad_type(self,pad_width,dtype,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_misshaped_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_misshaped_pad_width_2(self,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_negative_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_pad_width_as_ndarray(self)
numpy.lib.tests.test_arraypad.TestPadWidth.test_zero_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestReflect
numpy.lib.tests.test_arraypad.TestReflect.test_check_01(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_02(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_03(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_04(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_05(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_06(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_07(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_odd_method(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_shape(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestStatistic
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_shape_one(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_01(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_02(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_negative_stat_length(self,mode,stat_length)
numpy.lib.tests.test_arraypad.TestStatistic.test_same_prepend_append(self,mode)
numpy.lib.tests.test_arraypad.TestStatistic.test_simple_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_zero_stat_length_invalid(self,mode)
numpy.lib.tests.test_arraypad.TestStatistic.test_zero_stat_length_valid(self,mode)
numpy.lib.tests.test_arraypad.TestSymmetric
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_01(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_02(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_03(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad_odd(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_odd_method(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_shape(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestWrap
numpy.lib.tests.test_arraypad.TestWrap.test_check_01(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_02(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestWrap.test_pad_with_zero(self)
numpy.lib.tests.test_arraypad.TestWrap.test_repeated_wrapping(self)
numpy.lib.tests.test_arraypad.TestWrap.test_repeated_wrapping_multiple_origin(self)
numpy.lib.tests.test_arraypad.test_constant_zero_default()
numpy.lib.tests.test_arraypad.test_dtype_persistence(dtype,mode)
numpy.lib.tests.test_arraypad.test_kwargs(mode)
numpy.lib.tests.test_arraypad.test_legacy_vector_functionality()
numpy.lib.tests.test_arraypad.test_memory_layout_persistence(mode)
numpy.lib.tests.test_arraypad.test_non_contiguous_array(mode)
numpy.lib.tests.test_arraypad.test_object_input(mode)
numpy.lib.tests.test_arraypad.test_unicode_mode()
numpy.lib.tests.test_arraypad.test_unsupported_mode(mode)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_function_base.py----------------------------------------
A:numpy.lib.tests.test_function_base.data->numpy.add.outer(data, data)
A:numpy.lib.tests.test_function_base.ret->numpy.zeros(np.broadcast(real, imag).shape, np.complex128)
A:numpy.lib.tests.test_function_base.a->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D')
A:numpy.lib.tests.test_function_base.b->numpy.array(np.nan, dtype=float, ndmin=2)
A:numpy.lib.tests.test_function_base.c->numpy.percentile(x, (25, 50), method='lower', axis=1, out=out)
A:numpy.lib.tests.test_function_base.arr->numpy.random.rand(5)
A:numpy.lib.tests.test_function_base.a_copy->numpy.copy(a)
A:numpy.lib.tests.test_function_base.a_fort->numpy.array([[1, 2], [3, 4]], order='F')
A:numpy.lib.tests.test_function_base.a_fort_copy->numpy.copy(a_fort)
A:numpy.lib.tests.test_function_base.mx->numpy.ma.ones(5)
A:numpy.lib.tests.test_function_base.y1->sinc(np.array(x))
A:numpy.lib.tests.test_function_base.y2->sinc(list(x))
A:numpy.lib.tests.test_function_base.y4->numpy.ones((4, 4))
A:numpy.lib.tests.test_function_base.y5->rand(5, 5)
A:numpy.lib.tests.test_function_base.avg->numpy.average(x, axis=axis, keepdims=True)
A:numpy.lib.tests.test_function_base.wavg->numpy.average(x, axis=axis, weights=weights, keepdims=True)
A:numpy.lib.tests.test_function_base.(wavg, wsum)->numpy.average(x, axis=axis, weights=weights, returned=True, keepdims=True)
A:numpy.lib.tests.test_function_base.y->numpy.random.default_rng(4321).random((2, 10, 3))
A:numpy.lib.tests.test_function_base.w->numpy.abs(rng.random((2, 10, 3)))
A:numpy.lib.tests.test_function_base.actual->numpy.sort_complex(a)
A:numpy.lib.tests.test_function_base.desired->average(y, axis=(0, 1), weights=subw0.T)
A:numpy.lib.tests.test_function_base.y3->sinc(tuple(x))
A:numpy.lib.tests.test_function_base.w3->rand(5).astype(np.float64)
A:numpy.lib.tests.test_function_base.x->x.swapaxes(0, 1).copy().swapaxes(0, 1).copy()
A:numpy.lib.tests.test_function_base.(avg, scl)->average(y, weights=w2, axis=1, returned=True)
A:numpy.lib.tests.test_function_base.d->numpy.ones((3, 5, 7, 11))
A:numpy.lib.tests.test_function_base.m->numpy.median(np.array(arr).view(MySubclass))
A:numpy.lib.tests.test_function_base.conditions[0]->conditions[0].astype(np.uint8).astype(np.uint8)
A:numpy.lib.tests.test_function_base.a2->numpy.arange(6).reshape(2, 3)
A:numpy.lib.tests.test_function_base.tgt->numpy.array([[1.0, -1j], [1j, 1.0]])
A:numpy.lib.tests.test_function_base.out->numpy.empty(shape_out)
A:numpy.lib.tests.test_function_base.out2->numpy.array([True, True])
A:numpy.lib.tests.test_function_base.out3->diff(x, n=3)
A:numpy.lib.tests.test_function_base.exp->numpy.i0(a)
A:numpy.lib.tests.test_function_base.result->numpy.median(d, axis=axis, keepdims=True, out=out)
A:numpy.lib.tests.test_function_base.self.a->numpy.arange(5)
A:numpy.lib.tests.test_function_base.self.nd_a->numpy.arange(5).repeat(2).reshape(1, 5, 2)
A:numpy.lib.tests.test_function_base.a_del->delete(self.a, indexer)
A:numpy.lib.tests.test_function_base.nd_a_del->delete(self.nd_a, np.array([1]), axis=1)
A:numpy.lib.tests.test_function_base.xor->setxor1d(nd_a_del[0, :, 0], self.nd_a[0, indices, 0])
A:numpy.lib.tests.test_function_base.s->slice(start, stop, step)
A:numpy.lib.tests.test_function_base.k->numpy.arange(10).reshape(2, 5, order='F')
A:numpy.lib.tests.test_function_base.a_del_int->delete(self.a, 1)
A:numpy.lib.tests.test_function_base.nd_a_del_int->delete(self.nd_a, 1, axis=1)
A:numpy.lib.tests.test_function_base.res->numpy.median(a, axis=0)
A:numpy.lib.tests.test_function_base.false_mask->numpy.array([False], dtype=bool)
A:numpy.lib.tests.test_function_base.true_mask->numpy.array([True], dtype=bool)
A:numpy.lib.tests.test_function_base.dx->numpy.array([2, 7, 7, 25, 154, 119, -21], dtype='timedelta64[D]')
A:numpy.lib.tests.test_function_base.f_2d->numpy.arange(25).reshape(5, 5)
A:numpy.lib.tests.test_function_base.x2->numpy.array([0.0, 1.0, 2.0], ndmin=2)
A:numpy.lib.tests.test_function_base.num_error->numpy.abs(np.gradient(y, x, edge_order=2) / analytical - 1)
A:numpy.lib.tests.test_function_base.f->numpy.ones(2, dtype=np.int_)
A:numpy.lib.tests.test_function_base.x_uneven->numpy.array([0.0, 0.5, 1.0, 3.0, 5.0, 7.0])
A:numpy.lib.tests.test_function_base.x_even->numpy.arange(6.0)
A:numpy.lib.tests.test_function_base.fdx_even_ord1->numpy.tile([2.0, 1.5, 1.0, 1.0, 0.5, 0.0], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_even_ord2->numpy.tile([2.5, 1.5, 1.0, 1.0, 0.5, -0.5], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_uneven_ord1->numpy.tile([4.0, 3.0, 1.7, 0.5, 0.25, 0.0], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_uneven_ord2->numpy.tile([5.0, 3.0, 1.7, 0.5, 0.25, -0.25], (6, 1))
A:numpy.lib.tests.test_function_base.res1->numpy.array([[1.0, -1.0], [-1.0, 1.0]])
A:numpy.lib.tests.test_function_base.res2->numpy.array([[0.4, -0.4], [-0.4, 0.4]])
A:numpy.lib.tests.test_function_base.res3->numpy.array([[2.0 / 3.0, -2.0 / 3.0], [-2.0 / 3.0, 2.0 / 3.0]])
A:numpy.lib.tests.test_function_base.g->gradient(f)
A:numpy.lib.tests.test_function_base.dfdx->gradient(f, x)
A:numpy.lib.tests.test_function_base.z->numpy.linspace(0, 3, 13)
A:numpy.lib.tests.test_function_base.expected->numpy.array([1 - 3j, 1 - 2j, 2 + 1j, 2 + 3j], dtype='D')
A:numpy.lib.tests.test_function_base.ac->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D').copy()
A:numpy.lib.tests.test_function_base.r->percentile(x, p, axis=0, out=y, weights=weights)
A:numpy.lib.tests.test_function_base.args->numpy.array([1, 2, 3])
A:numpy.lib.tests.test_function_base.r1->numpy.array([[0, 4, 8], [1, 5, 9]])
A:numpy.lib.tests.test_function_base.r2->numpy.array([3, 4, 5])
A:numpy.lib.tests.test_function_base.r3->f(10.4)
A:numpy.lib.tests.test_function_base._p->list(p)
A:numpy.lib.tests.test_function_base.vpolyval->numpy.vectorize(mypolyval, excluded=['p', 1])
A:numpy.lib.tests.test_function_base.f1->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res1a->f1(np.arange(3))
A:numpy.lib.tests.test_function_base.res1b->f1(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.f2->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res2b->f2(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.res2a->f2(np.arange(3))
A:numpy.lib.tests.test_function_base.v->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]).view(subclass)
A:numpy.lib.tests.test_function_base.matvec->numpy.vectorize(np.matmul, signature='(m,m),(m)->(m)')
A:numpy.lib.tests.test_function_base.mult->numpy.vectorize(lambda x, y: x * y)
A:numpy.lib.tests.test_function_base.bar->partial(foo, 3)
A:numpy.lib.tests.test_function_base.vbar->numpy.vectorize(bar)
A:numpy.lib.tests.test_function_base.A->numpy.array([0.49842636, 0.6969809, 0.22011976, 0.0155549, 10.0])
A:numpy.lib.tests.test_function_base.A_func->getattr(self.A, name)
A:numpy.lib.tests.test_function_base.refcount->sys.getrefcount(A_func)
A:numpy.lib.tests.test_function_base.a.f->numpy.frompyfunc(getattr(a, name), 1, 1)
A:numpy.lib.tests.test_function_base.bins->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.bin->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.simple_seq->numpy.array([0, 75, 150, 225, 300])
A:numpy.lib.tests.test_function_base.wrap_seq->numpy.mod(simple_seq, 255)
A:numpy.lib.tests.test_function_base.uneven_seq->numpy.array([0, 75, 150, 225, 300, 430])
A:numpy.lib.tests.test_function_base.wrap_uneven->numpy.mod(uneven_seq, 250)
A:numpy.lib.tests.test_function_base.no_discont->unwrap(wrap_uneven, period=250)
A:numpy.lib.tests.test_function_base.sm_discont->unwrap(wrap_uneven, period=250, discont=140)
A:numpy.lib.tests.test_function_base.ref_dtype->numpy.result_type(scalar.dtype, np.float64)
A:numpy.lib.tests.test_function_base.qx->(q * wx[:, None, None]).sum(axis=0)
A:numpy.lib.tests.test_function_base.qy->(q * wy[None, :, None]).sum(axis=1)
A:numpy.lib.tests.test_function_base.qz->(q * wz[None, None, :]).sum(axis=2)
A:numpy.lib.tests.test_function_base.ym->numpy.ma.array(y, mask=mask)
A:numpy.lib.tests.test_function_base.xm->numpy.ma.array(x, mask=mask)
A:numpy.lib.tests.test_function_base.B->numpy.array([[0.827002, 0.99959078], [0.89694769, 0.39298162], [0.37954418, 0.05206293], [0.36465447, 0.72446427], [0.48164949, 0.50324519]])
A:numpy.lib.tests.test_function_base.tgt1->corrcoef(self.A)
A:numpy.lib.tests.test_function_base.tgt2->corrcoef(self.A, self.B)
A:numpy.lib.tests.test_function_base.cast_A->self.A.astype(test_type)
A:numpy.lib.tests.test_function_base.frequencies->numpy.array([1, 4, 1])
A:numpy.lib.tests.test_function_base.unit_frequencies->numpy.ones(3, dtype=np.int_)
A:numpy.lib.tests.test_function_base.weights->numpy.array([1.0, 4.0, 1.0])
A:numpy.lib.tests.test_function_base.unit_weights->numpy.ones(3)
A:numpy.lib.tests.test_function_base.x3->numpy.array([0.3942, 0.5969, 0.773, 0.9918, 0.7964])
A:numpy.lib.tests.test_function_base.cast_x1->self.x1.astype(test_type)
A:numpy.lib.tests.test_function_base.i0_0->numpy.i0([0.0])
A:numpy.lib.tests.test_function_base.[X, Y]->meshgrid([1, 2, 3], [4, 5, 6, 7], sparse=True)
A:numpy.lib.tests.test_function_base.[X]->meshgrid([1, 2, 3, 4])
A:numpy.lib.tests.test_function_base.(X, Y)->numpy.meshgrid(x, y, sparse=True)
A:numpy.lib.tests.test_function_base.X->numpy.array([1.1, 2.2])
A:numpy.lib.tests.test_function_base.Y->numpy.array([3.3, 4.4])
A:numpy.lib.tests.test_function_base.(x, y)->numpy.meshgrid(X, Y, sparse=False, copy=True)
A:numpy.lib.tests.test_function_base.(a, b, c, d, e)->numpy.meshgrid(*([0] * i for i in range(1, 6)))
A:numpy.lib.tests.test_function_base.(a, b, c)->numpy.meshgrid([0], [1, 2], [3, 4, 5], indexing='ij')
A:numpy.lib.tests.test_function_base.intp_refcount->sys.getrefcount(np.dtype(np.intp))
A:numpy.lib.tests.test_function_base.double_refcount->sys.getrefcount(np.dtype(np.double))
A:numpy.lib.tests.test_function_base.vals_arr->numpy.asarray(vals)
A:numpy.lib.tests.test_function_base.x0->numpy.array(0.3)
A:numpy.lib.tests.test_function_base.xp->numpy.arange(0, 10, 0.0001)
A:numpy.lib.tests.test_function_base.yp->numpy.ones(size, dtype=np.double)
A:numpy.lib.tests.test_function_base.incpts->numpy.array([-1, 0, size - 1, size], dtype=np.double)
A:numpy.lib.tests.test_function_base.incres->interp(incpts, xp, yp, left=0, right=2)
A:numpy.lib.tests.test_function_base.decres->interp(decpts, xp, yp, left=0, right=2)
A:numpy.lib.tests.test_function_base.inctgt->numpy.array([0, 1, 1, 2], dtype=float)
A:numpy.lib.tests.test_function_base.fp->numpy.sin(xp)
A:numpy.lib.tests.test_function_base.p->p.tolist().tolist()
A:numpy.lib.tests.test_function_base.o->numpy.random.normal(size=(71, 23))
A:numpy.lib.tests.test_function_base.arr_c->numpy.array([0.5 + 3j, 2.1 + 0.5j, 1.6 + 2.3j], dtype='F')
A:numpy.lib.tests.test_function_base.expected_dtype->numpy.promote_types(expected_dtype, np.float64)
A:numpy.lib.tests.test_function_base.quantile->numpy.quantile(arr, [Fraction(1, 2)], method='weibull')
A:numpy.lib.tests.test_function_base.r0->numpy.array([[0, 1, 2, 3], [4, 5, 6, 7]])
A:numpy.lib.tests.test_function_base.c0->numpy.percentile(x, 50, method='lower', axis=0)
A:numpy.lib.tests.test_function_base.c1->numpy.percentile(x, 50, method='lower', axis=1)
A:numpy.lib.tests.test_function_base.axis_norm->normalize_axis_tuple(axis, d.ndim)
A:numpy.lib.tests.test_function_base.shape_out->tuple((1 if i in axis_norm else d.shape[i] for i in range(d.ndim)))
A:numpy.lib.tests.test_function_base.q->numpy.quantile(y, alpha, weights=w, method=method, axis=1)
A:numpy.lib.tests.test_function_base.tf_quant->numpy.quantile(True, False)
A:numpy.lib.tests.test_function_base.quant_res->numpy.quantile(a, a)
A:numpy.lib.tests.test_function_base.p0->numpy.arange(0, 1, 0.01)
A:numpy.lib.tests.test_function_base.rng->numpy.random.default_rng(4321)
A:numpy.lib.tests.test_function_base.qw->numpy.quantile(y, alpha, method=method, weights=w)
A:numpy.lib.tests.test_function_base.q_res->numpy.zeros(shape=(2, 3))
A:numpy.lib.tests.test_function_base.q_res[i, j]->numpy.quantile(y[i, :, j], alpha, method=method, weights=w[i, :, j])
A:numpy.lib.tests.test_function_base.q_res[:, i, j]->numpy.quantile(y[i, :, j], alpha, method=method, weights=w)
A:numpy.lib.tests.test_function_base.l0->numpy.lib._function_base_impl._lerp(a, b, t0)
A:numpy.lib.tests.test_function_base.l1->numpy.lib._function_base_impl._lerp(a, b, t1)
A:numpy.lib.tests.test_function_base.left->numpy.lib._function_base_impl._lerp(a, b, 1 - (1 - t))
A:numpy.lib.tests.test_function_base.right->numpy.lib._function_base_impl._lerp(b, a, 1 - t)
A:numpy.lib.tests.test_function_base.t->numpy.array(0.2)
A:numpy.lib.tests.test_function_base.a0->numpy.array(1)
A:numpy.lib.tests.test_function_base.a1->numpy.arange(2)
A:numpy.lib.tests.test_function_base.a3->numpy.array([[2, 3], [0, 1], [6, 7], [4, 5]])
A:numpy.lib.tests.test_function_base.orig->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D').copy()
A:numpy.lib.tests.test_function_base.a4->numpy.arange(3 * 4 * 5, dtype=np.float32).reshape((3, 4, 5))
A:numpy.lib.tests.test_function_base.obj->numpy.asarray(input_array).view(cls)
numpy.lib.tests.test_function_base.TestAll
numpy.lib.tests.test_function_base.TestAll.test_basic(self)
numpy.lib.tests.test_function_base.TestAll.test_nd(self)
numpy.lib.tests.test_function_base.TestAmax
numpy.lib.tests.test_function_base.TestAmax.test_basic(self)
numpy.lib.tests.test_function_base.TestAmin
numpy.lib.tests.test_function_base.TestAmin.test_basic(self)
numpy.lib.tests.test_function_base.TestAngle
numpy.lib.tests.test_function_base.TestAngle.test_basic(self)
numpy.lib.tests.test_function_base.TestAngle.test_subclass(self)
numpy.lib.tests.test_function_base.TestAny
numpy.lib.tests.test_function_base.TestAny.test_basic(self)
numpy.lib.tests.test_function_base.TestAny.test_nd(self)
numpy.lib.tests.test_function_base.TestAverage
numpy.lib.tests.test_function_base.TestAverage.test_average_class_without_dtype(self)
numpy.lib.tests.test_function_base.TestAverage.test_basic(self)
numpy.lib.tests.test_function_base.TestAverage.test_basic_keepdims(self,x,axis,expected_avg,weights,expected_wavg,expected_wsum)
numpy.lib.tests.test_function_base.TestAverage.test_object_dtype(self)
numpy.lib.tests.test_function_base.TestAverage.test_returned(self)
numpy.lib.tests.test_function_base.TestAverage.test_subclasses(self)
numpy.lib.tests.test_function_base.TestAverage.test_upcasting(self)
numpy.lib.tests.test_function_base.TestAverage.test_weight_and_input_dims_different(self)
numpy.lib.tests.test_function_base.TestAverage.test_weights(self)
numpy.lib.tests.test_function_base.TestBincount
numpy.lib.tests.test_function_base.TestBincount.test_dtype_reference_leaks(self)
numpy.lib.tests.test_function_base.TestBincount.test_empty(self)
numpy.lib.tests.test_function_base.TestBincount.test_empty_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_error_not_1d(self,vals)
numpy.lib.tests.test_function_base.TestBincount.test_simple(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple2(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight2(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_incorrect_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_and_weights(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_smaller_than_maxvalue(self)
numpy.lib.tests.test_function_base.TestCheckFinite
numpy.lib.tests.test_function_base.TestCheckFinite.test_dtype_order(self)
numpy.lib.tests.test_function_base.TestCheckFinite.test_simple(self)
numpy.lib.tests.test_function_base.TestCopy
numpy.lib.tests.test_function_base.TestCopy.test_basic(self)
numpy.lib.tests.test_function_base.TestCopy.test_order(self)
numpy.lib.tests.test_function_base.TestCopy.test_subok(self)
numpy.lib.tests.test_function_base.TestCorrCoef
numpy.lib.tests.test_function_base.TestCorrCoef.test_bias(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_complex(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_corrcoef_dtype(self,test_type)
numpy.lib.tests.test_function_base.TestCorrCoef.test_ddof(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_empty(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_extreme(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_non_array(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_simple(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_xy(self)
numpy.lib.tests.test_function_base.TestCov
numpy.lib.tests.test_function_base.TestCov.test_1D_rowvar(self)
numpy.lib.tests.test_function_base.TestCov.test_1D_variance(self)
numpy.lib.tests.test_function_base.TestCov.test_aweights(self)
numpy.lib.tests.test_function_base.TestCov.test_basic(self)
numpy.lib.tests.test_function_base.TestCov.test_complex(self)
numpy.lib.tests.test_function_base.TestCov.test_cov_dtype(self,test_type)
numpy.lib.tests.test_function_base.TestCov.test_empty(self)
numpy.lib.tests.test_function_base.TestCov.test_fweights(self)
numpy.lib.tests.test_function_base.TestCov.test_unit_fweights_and_aweights(self)
numpy.lib.tests.test_function_base.TestCov.test_wrong_ddof(self)
numpy.lib.tests.test_function_base.TestCov.test_xy(self)
numpy.lib.tests.test_function_base.TestCumprod
numpy.lib.tests.test_function_base.TestCumprod.test_basic(self)
numpy.lib.tests.test_function_base.TestCumsum
numpy.lib.tests.test_function_base.TestCumsum.test_basic(self)
numpy.lib.tests.test_function_base.TestDelete
numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing(self,indices)
numpy.lib.tests.test_function_base.TestDelete.setup_method(self)
numpy.lib.tests.test_function_base.TestDelete.test_0d(self)
numpy.lib.tests.test_function_base.TestDelete.test_array_order_preserve(self)
numpy.lib.tests.test_function_base.TestDelete.test_fancy(self)
numpy.lib.tests.test_function_base.TestDelete.test_index_floats(self)
numpy.lib.tests.test_function_base.TestDelete.test_single(self)
numpy.lib.tests.test_function_base.TestDelete.test_single_item_array(self,indexer)
numpy.lib.tests.test_function_base.TestDelete.test_single_item_array_non_int(self)
numpy.lib.tests.test_function_base.TestDelete.test_slices(self)
numpy.lib.tests.test_function_base.TestDelete.test_subclass(self)
numpy.lib.tests.test_function_base.TestDiff
numpy.lib.tests.test_function_base.TestDiff.test_append(self)
numpy.lib.tests.test_function_base.TestDiff.test_axis(self)
numpy.lib.tests.test_function_base.TestDiff.test_basic(self)
numpy.lib.tests.test_function_base.TestDiff.test_n(self)
numpy.lib.tests.test_function_base.TestDiff.test_nd(self)
numpy.lib.tests.test_function_base.TestDiff.test_prepend(self)
numpy.lib.tests.test_function_base.TestDiff.test_subclass(self)
numpy.lib.tests.test_function_base.TestDiff.test_times(self)
numpy.lib.tests.test_function_base.TestDigitize
numpy.lib.tests.test_function_base.TestDigitize.test_casting_error(self)
numpy.lib.tests.test_function_base.TestDigitize.test_forward(self)
numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_decreasing(self)
numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_increasing(self)
numpy.lib.tests.test_function_base.TestDigitize.test_monotonic(self)
numpy.lib.tests.test_function_base.TestDigitize.test_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_return_type(self)
numpy.lib.tests.test_function_base.TestDigitize.test_reverse(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_basic(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_reverse(self)
numpy.lib.tests.test_function_base.TestExtins
numpy.lib.tests.test_function_base.TestExtins.test_basic(self)
numpy.lib.tests.test_function_base.TestExtins.test_both(self)
numpy.lib.tests.test_function_base.TestExtins.test_place(self)
numpy.lib.tests.test_function_base.TestFilterwindows
numpy.lib.tests.test_function_base.TestFilterwindows.test_bartlett(self,dtype:str,M:int)->None
numpy.lib.tests.test_function_base.TestFilterwindows.test_blackman(self,dtype:str,M:int)->None
numpy.lib.tests.test_function_base.TestFilterwindows.test_hamming(self,dtype:str,M:int)->None
numpy.lib.tests.test_function_base.TestFilterwindows.test_hanning(self,dtype:str,M:int)->None
numpy.lib.tests.test_function_base.TestFilterwindows.test_kaiser(self,dtype:str,M:int)->None
numpy.lib.tests.test_function_base.TestFlip
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis0(self)
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis1(self)
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis2(self)
numpy.lib.tests.test_function_base.TestFlip.test_4d(self)
numpy.lib.tests.test_function_base.TestFlip.test_axes(self)
numpy.lib.tests.test_function_base.TestFlip.test_basic_lr(self)
numpy.lib.tests.test_function_base.TestFlip.test_basic_ud(self)
numpy.lib.tests.test_function_base.TestFlip.test_default_axis(self)
numpy.lib.tests.test_function_base.TestFlip.test_multiple_axes(self)
numpy.lib.tests.test_function_base.TestGradient
numpy.lib.tests.test_function_base.TestGradient.test_args(self)
numpy.lib.tests.test_function_base.TestGradient.test_badargs(self)
numpy.lib.tests.test_function_base.TestGradient.test_basic(self)
numpy.lib.tests.test_function_base.TestGradient.test_datetime64(self)
numpy.lib.tests.test_function_base.TestGradient.test_f_decreasing_unsigned_int(self,f_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_f_signed_int_big_jump(self,f_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_inexact_dtypes(self)
numpy.lib.tests.test_function_base.TestGradient.test_masked(self)
numpy.lib.tests.test_function_base.TestGradient.test_return_type(self)
numpy.lib.tests.test_function_base.TestGradient.test_second_order_accurate(self)
numpy.lib.tests.test_function_base.TestGradient.test_spacing(self)
numpy.lib.tests.test_function_base.TestGradient.test_specific_axes(self)
numpy.lib.tests.test_function_base.TestGradient.test_timedelta64(self)
numpy.lib.tests.test_function_base.TestGradient.test_values(self)
numpy.lib.tests.test_function_base.TestGradient.test_x_decreasing_unsigned(self,x_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_x_signed_int_big_jump(self,x_dtype)
numpy.lib.tests.test_function_base.TestInsert
numpy.lib.tests.test_function_base.TestInsert.test_0d(self)
numpy.lib.tests.test_function_base.TestInsert.test_basic(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_array_copied(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_floats(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_out_of_bounds(self,idx)
numpy.lib.tests.test_function_base.TestInsert.test_multidim(self)
numpy.lib.tests.test_function_base.TestInsert.test_structured_array(self)
numpy.lib.tests.test_function_base.TestInsert.test_subclass(self)
numpy.lib.tests.test_function_base.TestInterp
numpy.lib.tests.test_function_base.TestInterp.sc(self,request)
numpy.lib.tests.test_function_base.TestInterp.test_basic(self)
numpy.lib.tests.test_function_base.TestInterp.test_complex_interp(self)
numpy.lib.tests.test_function_base.TestInterp.test_exceptions(self)
numpy.lib.tests.test_function_base.TestInterp.test_if_len_x_is_small(self)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_any_nan(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_behavior_exact_x(self)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_f(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_x(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_xf(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_inf(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_period(self)
numpy.lib.tests.test_function_base.TestInterp.test_right_left_behavior(self)
numpy.lib.tests.test_function_base.TestInterp.test_scalar_interpolation_point(self)
numpy.lib.tests.test_function_base.TestInterp.test_zero_dimensional_interpolation_point(self)
numpy.lib.tests.test_function_base.TestKaiser
numpy.lib.tests.test_function_base.TestKaiser.test_int_beta(self)
numpy.lib.tests.test_function_base.TestKaiser.test_simple(self)
numpy.lib.tests.test_function_base.TestLeaks
numpy.lib.tests.test_function_base.TestLeaks.A
numpy.lib.tests.test_function_base.TestLeaks.A.bound(self,*args)
numpy.lib.tests.test_function_base.TestLeaks.A.unbound(*args)
numpy.lib.tests.test_function_base.TestLeaks.test_frompyfunc_leaks(self,name,incr)
numpy.lib.tests.test_function_base.TestLerp
numpy.lib.tests.test_function_base.TestLerp.test_linear_interpolation_formula_0d_inputs(self)
numpy.lib.tests.test_function_base.TestLerp.test_linear_interpolation_formula_bounded(self,t,a,b)
numpy.lib.tests.test_function_base.TestLerp.test_linear_interpolation_formula_monotonic(self,t0,t1,a,b)
numpy.lib.tests.test_function_base.TestLerp.test_linear_interpolation_formula_symmetric(self,t,a,b)
numpy.lib.tests.test_function_base.TestMedian
numpy.lib.tests.test_function_base.TestMedian.test_array_like(self)
numpy.lib.tests.test_function_base.TestMedian.test_axis_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_basic(self)
numpy.lib.tests.test_function_base.TestMedian.test_empty(self)
numpy.lib.tests.test_function_base.TestMedian.test_extended_axis(self)
numpy.lib.tests.test_function_base.TestMedian.test_extended_axis_invalid(self)
numpy.lib.tests.test_function_base.TestMedian.test_keepdims(self)
numpy.lib.tests.test_function_base.TestMedian.test_keepdims_out(self,axis)
numpy.lib.tests.test_function_base.TestMedian.test_nan_behavior(self)
numpy.lib.tests.test_function_base.TestMedian.test_nat_behavior(self,dtype,pos)
numpy.lib.tests.test_function_base.TestMedian.test_object(self)
numpy.lib.tests.test_function_base.TestMedian.test_out(self)
numpy.lib.tests.test_function_base.TestMedian.test_out_nan(self)
numpy.lib.tests.test_function_base.TestMedian.test_overwrite_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_subclass(self)
numpy.lib.tests.test_function_base.TestMedian.test_subclass2(self,arr)
numpy.lib.tests.test_function_base.TestMeshgrid
numpy.lib.tests.test_function_base.TestMeshgrid.test_indexing(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_invalid_arguments(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_indexing(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_shape(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_values(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_no_input(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_return_type(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_simple(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_single_input(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_sparse(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_writeback(self)
numpy.lib.tests.test_function_base.TestPercentile
numpy.lib.tests.test_function_base.TestPercentile.test_2D(self)
numpy.lib.tests.test_function_base.TestPercentile.test_api(self)
numpy.lib.tests.test_function_base.TestPercentile.test_axis(self)
numpy.lib.tests.test_function_base.TestPercentile.test_basic(self)
numpy.lib.tests.test_function_base.TestPercentile.test_complex(self)
numpy.lib.tests.test_function_base.TestPercentile.test_exception(self)
numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis(self)
numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis_invalid(self)
numpy.lib.tests.test_function_base.TestPercentile.test_fraction(self)
numpy.lib.tests.test_function_base.TestPercentile.test_keepdims(self)
numpy.lib.tests.test_function_base.TestPercentile.test_keepdims_out(self,q,axis)
numpy.lib.tests.test_function_base.TestPercentile.test_linear_interpolation(self,function,quantile,method,weighted,expected,input_dtype,expected_dtype)
numpy.lib.tests.test_function_base.TestPercentile.test_linear_interpolation_extrapolation(self)
numpy.lib.tests.test_function_base.TestPercentile.test_linear_nan_1D(self,dtype)
numpy.lib.tests.test_function_base.TestPercentile.test_lower_higher(self,dtype)
numpy.lib.tests.test_function_base.TestPercentile.test_midpoint(self,dtype)
numpy.lib.tests.test_function_base.TestPercentile.test_nan_behavior(self)
numpy.lib.tests.test_function_base.TestPercentile.test_nan_q(self)
numpy.lib.tests.test_function_base.TestPercentile.test_nat_basic(self,dtype,pos)
numpy.lib.tests.test_function_base.TestPercentile.test_nearest(self,dtype)
numpy.lib.tests.test_function_base.TestPercentile.test_no_p_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_out(self)
numpy.lib.tests.test_function_base.TestPercentile.test_out_nan(self,method,weighted)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_empty_dim(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_list(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_no_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_out(self,percentile,with_weights)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_scalar_q(self)
numpy.lib.tests.test_function_base.TestPercentile.test_sequence(self)
numpy.lib.tests.test_function_base.TestPiecewise
numpy.lib.tests.test_function_base.TestPiecewise.test_0d(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_0d_0d_condition(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_0d_comparison(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_default(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_multidimensional_extrafunc(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_scalar_domains_three_conditions(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_simple(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_subclasses(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_two_conditions(self)
numpy.lib.tests.test_function_base.TestProd
numpy.lib.tests.test_function_base.TestProd.test_basic(self)
numpy.lib.tests.test_function_base.TestPtp
numpy.lib.tests.test_function_base.TestPtp.test_basic(self)
numpy.lib.tests.test_function_base.TestQuantile
numpy.lib.tests.test_function_base.TestQuantile.V(self,x,y,alpha)
numpy.lib.tests.test_function_base.TestQuantile.test_basic(self)
numpy.lib.tests.test_function_base.TestQuantile.test_closest_observation(self)
numpy.lib.tests.test_function_base.TestQuantile.test_complex(self)
numpy.lib.tests.test_function_base.TestQuantile.test_correct_quantile_value(self)
numpy.lib.tests.test_function_base.TestQuantile.test_fraction(self)
numpy.lib.tests.test_function_base.TestQuantile.test_max_ulp(self)
numpy.lib.tests.test_function_base.TestQuantile.test_no_p_overwrite(self)
numpy.lib.tests.test_function_base.TestQuantile.test_q_zero_one(self,method)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_add_and_multiply_constant(self,weights,method,alpha)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_constant_weights(self,method,alpha)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_identification_equation(self,weights,method,alpha)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_monotonic(self,method)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_monotonic_hypo(self,arr)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_preserve_int_type(self,dtype)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_scalar_nan(self)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_weights_raises_negative_weights(self)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_weights_raises_unsupported_methods(self,method)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_with_integer_weights(self,method,alpha)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_with_weights_and_axis(self,method)
numpy.lib.tests.test_function_base.TestQuantile.test_weibull_fraction(self)
numpy.lib.tests.test_function_base.TestRot90
numpy.lib.tests.test_function_base.TestRot90.test_axes(self)
numpy.lib.tests.test_function_base.TestRot90.test_basic(self)
numpy.lib.tests.test_function_base.TestRot90.test_rotation_axes(self)
numpy.lib.tests.test_function_base.TestSelect
numpy.lib.tests.test_function_base.TestSelect._select(self,cond,values,default=0)
numpy.lib.tests.test_function_base.TestSelect.test_basic(self)
numpy.lib.tests.test_function_base.TestSelect.test_broadcasting(self)
numpy.lib.tests.test_function_base.TestSelect.test_deprecated_empty(self)
numpy.lib.tests.test_function_base.TestSelect.test_many_arguments(self)
numpy.lib.tests.test_function_base.TestSelect.test_non_bool_deprecation(self)
numpy.lib.tests.test_function_base.TestSelect.test_return_dtype(self)
numpy.lib.tests.test_function_base.TestSinc
numpy.lib.tests.test_function_base.TestSinc.test_array_like(self)
numpy.lib.tests.test_function_base.TestSinc.test_simple(self)
numpy.lib.tests.test_function_base.TestSortComplex
numpy.lib.tests.test_function_base.TestSortComplex.test_sort_complex(self)
numpy.lib.tests.test_function_base.TestSortComplex.test_sort_real(self,type_in,type_out)
numpy.lib.tests.test_function_base.TestTrapezoid
numpy.lib.tests.test_function_base.TestTrapezoid.test_masked(self)
numpy.lib.tests.test_function_base.TestTrapezoid.test_ndim(self)
numpy.lib.tests.test_function_base.TestTrapezoid.test_simple(self)
numpy.lib.tests.test_function_base.TestTrimZeros
numpy.lib.tests.test_function_base.TestTrimZeros.test_all_zero(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_basic(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_leading_skip(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_list_to_list(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_no_trim(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_overflow(self,arr)
numpy.lib.tests.test_function_base.TestTrimZeros.test_size_zero(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_trailing_skip(self)
numpy.lib.tests.test_function_base.TestTrimZeros.values(self)
numpy.lib.tests.test_function_base.TestUnique
numpy.lib.tests.test_function_base.TestUnique.test_simple(self)
numpy.lib.tests.test_function_base.TestUnwrap
numpy.lib.tests.test_function_base.TestUnwrap.test_period(self)
numpy.lib.tests.test_function_base.TestUnwrap.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize
numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156(self)
numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring(self)
numpy.lib.tests.test_function_base.TestVectorize.test_bad_input(self)
numpy.lib.tests.test_function_base.TestVectorize.test_cache(self)
numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_datetime_conversion(self)
numpy.lib.tests.test_function_base.TestVectorize.test_decorator(self)
numpy.lib.tests.test_function_base.TestVectorize.test_docstring(self)
numpy.lib.tests.test_function_base.TestVectorize.test_execution_order_ticket_1487(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_no_func_code(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order1(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order2(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order3(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_several_kwd_args1(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_several_kwd_args2(self)
numpy.lib.tests.test_function_base.TestVectorize.test_large(self)
numpy.lib.tests.test_function_base.TestVectorize.test_name(self)
numpy.lib.tests.test_function_base.TestVectorize.test_no_keywords(self)
numpy.lib.tests.test_function_base.TestVectorize.test_otypes(self)
numpy.lib.tests.test_function_base.TestVectorize.test_parse_gufunc_signature(self)
numpy.lib.tests.test_function_base.TestVectorize.test_partial(self)
numpy.lib.tests.test_function_base.TestVectorize.test_positional_regression_9477(self)
numpy.lib.tests.test_function_base.TestVectorize.test_scalar(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_center(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_computed_size(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_inputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_outputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_otypes(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_otypes_decorator(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_outer(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_two_outputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize.test_size_zero_output(self)
numpy.lib.tests.test_function_base.TestVectorize.test_string_ticket_1892(self)
numpy.lib.tests.test_function_base.TestVectorize.test_subclasses(self)
numpy.lib.tests.test_function_base.TestVectorize.test_ufunc(self)
numpy.lib.tests.test_function_base.Test_I0
numpy.lib.tests.test_function_base.Test_I0.test_complex(self)
numpy.lib.tests.test_function_base.Test_I0.test_non_array(self)
numpy.lib.tests.test_function_base.Test_I0.test_simple(self)
numpy.lib.tests.test_function_base._foo1(x,y=1.0)
numpy.lib.tests.test_function_base._foo2(x,y=1.0,z=0.0)
numpy.lib.tests.test_function_base._make_complex(real,imag)
numpy.lib.tests.test_function_base.get_mat(n)
numpy.lib.tests.test_function_base.test_any_and_all_result_dtype(dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_type_check.py----------------------------------------
A:numpy.lib.tests.test_type_check.ai32->numpy.array([[1, 2], [3, 4]], dtype=np.int32)
A:numpy.lib.tests.test_type_check.af16->numpy.array([[1, 2], [3, 4]], dtype=np.float16)
A:numpy.lib.tests.test_type_check.af32->numpy.array([[1, 2], [3, 4]], dtype=np.float32)
A:numpy.lib.tests.test_type_check.af64->numpy.array([[1, 2], [3, 4]], dtype=np.float64)
A:numpy.lib.tests.test_type_check.acs->numpy.array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=np.complex64)
A:numpy.lib.tests.test_type_check.acd->numpy.array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=np.complex128)
A:numpy.lib.tests.test_type_check.y->numpy.array(1 + 1j)
A:numpy.lib.tests.test_type_check.out->numpy.imag(y)
A:numpy.lib.tests.test_type_check.z->numpy.array((-1.0, 0.0, 1.0))
A:numpy.lib.tests.test_type_check.res->isreal(z)
A:numpy.lib.tests.test_type_check.dummy->DummyPd()
A:numpy.lib.tests.test_type_check.base->numpy.dtype('complex128')
A:numpy.lib.tests.test_type_check.a->numpy.random.rand(10)
A:numpy.lib.tests.test_type_check.vals->nan_to_num(np.array((-1.0, 0, 1)) / 0.0, nan=np.inf, posinf=999)
A:numpy.lib.tests.test_type_check.result->nan_to_num(vals, copy=False, nan=10, posinf=20, neginf=30)
A:numpy.lib.tests.test_type_check.b->real_if_close(a + 1e-07j, tol=1e-06)
numpy.lib.tests.test_type_check.TestCommonType
numpy.lib.tests.test_type_check.TestCommonType.test_basic(self)
numpy.lib.tests.test_type_check.TestImag
numpy.lib.tests.test_type_check.TestImag.test_cmplx(self)
numpy.lib.tests.test_type_check.TestImag.test_real(self)
numpy.lib.tests.test_type_check.TestIscomplex
numpy.lib.tests.test_type_check.TestIscomplex.test_fail(self)
numpy.lib.tests.test_type_check.TestIscomplex.test_pass(self)
numpy.lib.tests.test_type_check.TestIscomplexobj
numpy.lib.tests.test_type_check.TestIscomplexobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_list(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_scalar(self)
numpy.lib.tests.test_type_check.TestIsfinite
numpy.lib.tests.test_type_check.TestIsfinite.test_complex(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_ind(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_integer(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf
numpy.lib.tests.test_type_check.TestIsinf.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsinf.test_ind(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf_scalar(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf_scalar(self)
numpy.lib.tests.test_type_check.TestIsnan
numpy.lib.tests.test_type_check.TestIsnan.test_complex(self)
numpy.lib.tests.test_type_check.TestIsnan.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsnan.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsnan.test_ind(self)
numpy.lib.tests.test_type_check.TestIsnan.test_integer(self)
numpy.lib.tests.test_type_check.TestIsnan.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsnan.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsneginf
numpy.lib.tests.test_type_check.TestIsneginf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsposinf
numpy.lib.tests.test_type_check.TestIsposinf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsreal
numpy.lib.tests.test_type_check.TestIsreal.test_fail(self)
numpy.lib.tests.test_type_check.TestIsreal.test_pass(self)
numpy.lib.tests.test_type_check.TestIsrealobj
numpy.lib.tests.test_type_check.TestIsrealobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIsscalar
numpy.lib.tests.test_type_check.TestIsscalar.test_basic(self)
numpy.lib.tests.test_type_check.TestMintypecode
numpy.lib.tests.test_type_check.TestMintypecode.test_default_1(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_2(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_3(self)
numpy.lib.tests.test_type_check.TestNanToNum
numpy.lib.tests.test_type_check.TestNanToNum.test_array(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad2(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_good(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_do_not_rewrite_previous_keyword(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_float(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_generic(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_integer(self)
numpy.lib.tests.test_type_check.TestReal
numpy.lib.tests.test_type_check.TestReal.test_cmplx(self)
numpy.lib.tests.test_type_check.TestReal.test_real(self)
numpy.lib.tests.test_type_check.TestRealIfClose
numpy.lib.tests.test_type_check.TestRealIfClose.test_basic(self)
numpy.lib.tests.test_type_check.assert_all(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_stride_tricks.py----------------------------------------
A:numpy.lib.tests.test_stride_tricks.outarrays->broadcast_arrays(*inarrays)
A:numpy.lib.tests.test_stride_tricks.x0->numpy.zeros(shape0, dtype=int)
A:numpy.lib.tests.test_stride_tricks.n->int(np.multiply.reduce(shape1))
A:numpy.lib.tests.test_stride_tricks.x1->numpy.arange(n).reshape(shape1)
A:numpy.lib.tests.test_stride_tricks.(b0, b1)->broadcast_arrays(x0, x1)
A:numpy.lib.tests.test_stride_tricks.x->numpy.array([[1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.y->numpy.array([[1], [2], [3]])
A:numpy.lib.tests.test_stride_tricks.(bx, by)->broadcast_arrays(x, y)
A:numpy.lib.tests.test_stride_tricks.bx0->numpy.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.actual->broadcast_to(input_array, (3,))
A:numpy.lib.tests.test_stride_tricks.arr->numpy.ones(10)
A:numpy.lib.tests.test_stride_tricks.a->SimpleSubClass([1, 2, 3, 4])
A:numpy.lib.tests.test_stride_tricks.a_view->broadcast_to(a, shape, subok=True)
A:numpy.lib.tests.test_stride_tricks.expected->numpy.array(['a'] * 3, dtype=object)
A:numpy.lib.tests.test_stride_tricks.dt->numpy.dtype({'names': [''], 'formats': ['V4']})
A:numpy.lib.tests.test_stride_tricks.a['num']->numpy.arange(1, 5)
A:numpy.lib.tests.test_stride_tricks.arr_view->sliding_window_view(arr, shape)
A:numpy.lib.tests.test_stride_tricks.view->as_strided(arr, writeable=True)
A:numpy.lib.tests.test_stride_tricks.self->numpy.array(*args, subok=True, **kwargs).view(cls)
A:numpy.lib.tests.test_stride_tricks.b->numpy.arange(len(a)).reshape(-1, 1)
A:numpy.lib.tests.test_stride_tricks.(a_view, b_view)->broadcast_arrays(a, b, subok=True)
A:numpy.lib.tests.test_stride_tricks.original->numpy.array([1, 2, 3])
A:numpy.lib.tests.test_stride_tricks.result->broadcast_to(original, (2, 3))
A:numpy.lib.tests.test_stride_tricks.(_, result)->broadcast_arrays(0, original)
A:numpy.lib.tests.test_stride_tricks.tricky_array->as_strided(np.array(0), shape, strides)
A:numpy.lib.tests.test_stride_tricks.other->numpy.zeros((1,))
A:numpy.lib.tests.test_stride_tricks.(first, second)->broadcast_arrays(tricky_array, other)
A:numpy.lib.tests.test_stride_tricks.input_array->numpy.array('a', dtype=object)
A:numpy.lib.tests.test_stride_tricks.(actual, _)->broadcast_arrays(input_array, np.ones(3))
numpy.lib.tests.test_stride_tricks.SimpleSubClass(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.SimpleSubClass.__array_finalize__(self,obj)
numpy.lib.tests.test_stride_tricks.SimpleSubClass.__new__(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_1d(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_repeated_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_with_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_without_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_errors(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_subok(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_writeable(self)
numpy.lib.tests.test_stride_tricks.VerySimpleSubClass(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.VerySimpleSubClass.__new__(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.as_strided_writeable()
numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise(input_shapes)
numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc(shape0,shape1,transposed=False,flipped=False)
numpy.lib.tests.test_stride_tricks.assert_shapes_correct(input_shapes,expected_shape)
numpy.lib.tests.test_stride_tricks.test_as_strided()
numpy.lib.tests.test_stride_tricks.test_broadcast_kwargs()
numpy.lib.tests.test_stride_tricks.test_broadcast_shape()
numpy.lib.tests.test_stride_tricks.test_broadcast_shapes_raises()
numpy.lib.tests.test_stride_tricks.test_broadcast_shapes_succeeds()
numpy.lib.tests.test_stride_tricks.test_broadcast_to_raises()
numpy.lib.tests.test_stride_tricks.test_broadcast_to_succeeds()
numpy.lib.tests.test_stride_tricks.test_incompatible_shapes_raise_valueerror()
numpy.lib.tests.test_stride_tricks.test_one_off()
numpy.lib.tests.test_stride_tricks.test_reference_types()
numpy.lib.tests.test_stride_tricks.test_same()
numpy.lib.tests.test_stride_tricks.test_same_as_ufunc()
numpy.lib.tests.test_stride_tricks.test_same_input_shapes()
numpy.lib.tests.test_stride_tricks.test_subclasses()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_ones_input_shapes()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes()
numpy.lib.tests.test_stride_tricks.test_writeable()
numpy.lib.tests.test_stride_tricks.test_writeable_memoryview()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_nanfunctions.py----------------------------------------
A:numpy.lib.tests.test_nanfunctions._ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, -0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, -0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]])
A:numpy.lib.tests.test_nanfunctions._ndat_ones->numpy.array([[0.6244, 1.0, 0.2692, 0.0116, 1.0, 0.117], [0.5351, -0.9403, 1.0, 0.21, 0.4759, 0.2833], [1.0, 1.0, 1.0, 0.1042, 1.0, -0.5954], [0.161, 1.0, 1.0, 0.1859, 0.3146, 1.0]])
A:numpy.lib.tests.test_nanfunctions._ndat_zeros->numpy.array([[0.6244, 0.0, 0.2692, 0.0116, 0.0, 0.117], [0.5351, -0.9403, 0.0, 0.21, 0.4759, 0.2833], [0.0, 0.0, 0.0, 0.1042, 0.0, -0.5954], [0.161, 0.0, 0.0, 0.1859, 0.3146, 0.0]])
A:numpy.lib.tests.test_nanfunctions.signature->self.get_signature(func)
A:numpy.lib.tests.test_nanfunctions.nan_signature->self.get_signature(nan_func)
A:numpy.lib.tests.test_nanfunctions.ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, -0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, -0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]]).copy()
A:numpy.lib.tests.test_nanfunctions.mat->numpy.ones((4, 3))
A:numpy.lib.tests.test_nanfunctions.tgt->numpy.transpose([percentile(d, (28, 98), weights=gen_weights(d)) for d in _rdat])
A:numpy.lib.tests.test_nanfunctions.res->numpy.nanpercentile(x, p, axis=axis, weights=weights, out=out, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.resout->numpy.zeros(())
A:numpy.lib.tests.test_nanfunctions.array->array.astype(dtype).astype(dtype)
A:numpy.lib.tests.test_nanfunctions.out->numpy.nanquantile(array, 1, axis=axis)
A:numpy.lib.tests.test_nanfunctions.msk->numpy.ones((4, 3))._mask.copy()
A:numpy.lib.tests.test_nanfunctions.mine->array.astype(dtype).astype(dtype).view(MyNDArray)
A:numpy.lib.tests.test_nanfunctions.arr->numpy.array([0, 1], dtype=dtype)
A:numpy.lib.tests.test_nanfunctions.ar->numpy.arange(24).reshape(2, 3, 4).astype(float)
A:numpy.lib.tests.test_nanfunctions.ret1->f(ar, where=where, initial=5)
A:numpy.lib.tests.test_nanfunctions.ret2->f(ar.view(MyNDArray), where=where, initial=5)
A:numpy.lib.tests.test_nanfunctions.where->numpy.ones_like(ar, dtype=np.bool)
A:numpy.lib.tests.test_nanfunctions.ind->f(row)
A:numpy.lib.tests.test_nanfunctions.ret->f(ar, where=where)
A:numpy.lib.tests.test_nanfunctions.d->numpy.ones((3, 5, 7, 11))
A:numpy.lib.tests.test_nanfunctions.rs->numpy.random.RandomState(0)
A:numpy.lib.tests.test_nanfunctions.reference->f_std(ar[where][2:])
A:numpy.lib.tests.test_nanfunctions.rng->numpy.random.RandomState(1234)
A:numpy.lib.tests.test_nanfunctions.mean_out->numpy.zeros((10, 1, 5))
A:numpy.lib.tests.test_nanfunctions.std_out->numpy.zeros((10, 1, 5))
A:numpy.lib.tests.test_nanfunctions.mean->numpy.nanmean(A, out=mean_out, axis=1, keepdims=True)
A:numpy.lib.tests.test_nanfunctions.std->numpy.nanstd(A, out=std_out, axis=1, keepdims=True, mean=mean)
A:numpy.lib.tests.test_nanfunctions.std_old->numpy.nanstd(A, axis=1, keepdims=True)
A:numpy.lib.tests.test_nanfunctions._TYPE_CODES->list(np.typecodes['AllFloat'])
A:numpy.lib.tests.test_nanfunctions.w->w.astype(np.intp).astype(np.intp)
A:numpy.lib.tests.test_nanfunctions.axis_norm->normalize_axis_tuple(axis, d.ndim)
A:numpy.lib.tests.test_nanfunctions.shape_out->tuple((1 if i in axis_norm else d.shape[i] for i in range(d.ndim)))
A:numpy.lib.tests.test_nanfunctions.result->numpy.float64(2.0)
A:numpy.lib.tests.test_nanfunctions.nan_mat->numpy.insert(mat, [0, 2], np.nan, axis=1)
A:numpy.lib.tests.test_nanfunctions.nonan->numpy.compress(~np.isnan(x), x)
A:numpy.lib.tests.test_nanfunctions.output->numpy.nanmedian(mat, axis=axis)
A:numpy.lib.tests.test_nanfunctions.output_scalar->numpy.nanmedian(scalar)
A:numpy.lib.tests.test_nanfunctions.a->numpy.arange(6)
A:numpy.lib.tests.test_nanfunctions.w_args->dict()
A:numpy.lib.tests.test_nanfunctions.nan_w_args->dict()
A:numpy.lib.tests.test_nanfunctions.arr_c->numpy.array([0.5 + 3j, 2.1 + 0.5j, 1.6 + 2.3j], dtype='F')
A:numpy.lib.tests.test_nanfunctions.percentile->partial(np.percentile, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.nanpercentile->partial(np.nanpercentile, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.r->numpy.nanpercentile(a, 50, axis=0)
A:numpy.lib.tests.test_nanfunctions.large_mat->numpy.ones((3, 4, 5))
A:numpy.lib.tests.test_nanfunctions.val->numpy.percentile(large_mat, perc, axis=axis, keepdims=keepdim)
A:numpy.lib.tests.test_nanfunctions.nan_val->numpy.nanpercentile(large_mat, perc, axis=axis, keepdims=keepdim)
A:numpy.lib.tests.test_nanfunctions.megamat->numpy.ones((3, 4, 5, 6))
A:numpy.lib.tests.test_nanfunctions.q_unweighted->numpy.nanpercentile(x, 50, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.q_weighted->numpy.nanpercentile(x, 50, weights=w, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.x_no_nan->numpy.random.random(size=(100, 99, 2))
A:numpy.lib.tests.test_nanfunctions.x->numpy.random.random(size=(100, 99, 2)).copy()
A:numpy.lib.tests.test_nanfunctions.p->p.tolist().tolist()
A:numpy.lib.tests.test_nanfunctions.weights->numpy.ones_like(x)
A:numpy.lib.tests.test_nanfunctions.p_expected->numpy.percentile(x_no_nan, p, axis=axis, weights=weights, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.p_unweighted->numpy.nanpercentile(x, p, axis=axis, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.p_weighted->numpy.nanpercentile(x, p, axis=axis, weights=weights, method='inverted_cdf')
A:numpy.lib.tests.test_nanfunctions.p0->p0.tolist().tolist()
A:numpy.lib.tests.test_nanfunctions.actual->_nan_mask(arr, out=out)
A:numpy.lib.tests.test_nanfunctions.(result, mask)->_replace_nan(arr, 2)
A:numpy.lib.tests.test_nanfunctions.arr_nan->numpy.array([0, 1, np.nan], dtype=dtype)
A:numpy.lib.tests.test_nanfunctions.(result_nan, mask_nan)->_replace_nan(arr_nan, 2)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_char(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_dtype(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_mutation(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_out(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_result_values(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_scalar(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_keepdims(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_out(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof_too_big(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_nanstd_with_mean_keyword(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_where(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_allnans(self,dtype,axis)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_extended_axis_invalid(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_float_special(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_keepdims_out(self,axis)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_small_large(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_initial(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_masked(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_object_array(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_where(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_NumberTypes
numpy.lib.tests.test_nanfunctions.TestNanFunctions_NumberTypes.test_nanfunc(self,mat,dtype,nanfunc,func)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_NumberTypes.test_nanfunc_correction(self,mat,dtype,nanfunc)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_NumberTypes.test_nanfunc_ddof(self,mat,dtype,nanfunc,func)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_NumberTypes.test_nanfunc_q(self,mat,dtype,nanfunc,func)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_complex(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_extended_axis_invalid(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_keepdims_out(self,q,axis)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_multiple_percentiles(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_nan_value_with_weight(self,nan_weight)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_nan_value_with_weight_ndim(self,axis)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_out(self,weighted)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_result_values(self,weighted,use_out)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_basic(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_complex(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_no_p_overwrite(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_regression(self,weighted)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_allnans(self,axis,dtype,array)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_initial(self,dtype)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_where(self,dtype)
numpy.lib.tests.test_nanfunctions.TestSignatureMatch
numpy.lib.tests.test_nanfunctions.TestSignatureMatch.get_signature(func,default='...')
numpy.lib.tests.test_nanfunctions.TestSignatureMatch.test_exhaustiveness(self)
numpy.lib.tests.test_nanfunctions.TestSignatureMatch.test_signature_match(self,nan_func,func)
numpy.lib.tests.test_nanfunctions.test__nan_mask(arr,expected)
numpy.lib.tests.test_nanfunctions.test__replace_nan()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_ufunclike.py----------------------------------------
A:numpy.lib.tests.test_ufunclike.a->numpy.array([1.1, -1.1])
A:numpy.lib.tests.test_ufunclike.out->numpy.array(0.0)
A:numpy.lib.tests.test_ufunclike.tgt->numpy.array([[1.0, 1.0, 1.0, 1.0], [-1.0, -1.0, -1.0, -1.0]])
A:numpy.lib.tests.test_ufunclike.res->numpy.array(data, copy=True).view(cls)
A:numpy.lib.tests.test_ufunclike.obj->obj.view(MyArray).view(MyArray)
A:numpy.lib.tests.test_ufunclike.self.metadata->getattr(obj, 'metadata', None)
A:numpy.lib.tests.test_ufunclike.m->MyArray(a, metadata='foo')
A:numpy.lib.tests.test_ufunclike.f->fix(m)
A:numpy.lib.tests.test_ufunclike.f0d->fix(m0d)
A:numpy.lib.tests.test_ufunclike.actual->numpy.fix(x, out=out)
A:numpy.lib.tests.test_ufunclike.expected->numpy.float64(-3.0)
numpy.lib.tests.test_ufunclike.TestUfunclike
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isneginf(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isposinf(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_arraysetops.py----------------------------------------
A:numpy.lib.tests.test_arraysetops.a->numpy.array([1, 1, np.nan, np.nan, np.nan])
A:numpy.lib.tests.test_arraysetops.b->numpy.unique(a, axis=0)
A:numpy.lib.tests.test_arraysetops.ec->numpy.array([19, 20])
A:numpy.lib.tests.test_arraysetops.c->numpy.multiply([2, 1, 2, 2], 10)
A:numpy.lib.tests.test_arraysetops.ed->numpy.array([1, 2, 5])
A:numpy.lib.tests.test_arraysetops.res->numpy.isin(data, query, kind=kind)
A:numpy.lib.tests.test_arraysetops.(c, i1, i2)->intersect1d(a, b, return_indices=True)
A:numpy.lib.tests.test_arraysetops.ee->numpy.array([1, 2, 4])
A:numpy.lib.tests.test_arraysetops.ef->numpy.array([1, 2, 3, 4])
A:numpy.lib.tests.test_arraysetops.ui1->numpy.unravel_index(i1, a.shape)
A:numpy.lib.tests.test_arraysetops.ui2->numpy.unravel_index(i2, b.shape)
A:numpy.lib.tests.test_arraysetops.ea->numpy.array([2, 7, 8])
A:numpy.lib.tests.test_arraysetops.zero_elem->numpy.array([])
A:numpy.lib.tests.test_arraysetops.one_elem->numpy.array([1])
A:numpy.lib.tests.test_arraysetops.two_elem->numpy.array([1, 2])
A:numpy.lib.tests.test_arraysetops.msg->base_msg.format('return_index, return_inverse and return_counts', dt)
A:numpy.lib.tests.test_arraysetops.actual->setdiff1d(a, b, assume_unique=True)
A:numpy.lib.tests.test_arraysetops.isin_slow->numpy.vectorize(_isin_slow, otypes=[bool], excluded={1})
A:numpy.lib.tests.test_arraysetops.x->numpy.array([64, 0, 1, 2, 3, 63, 63, 0, 0, 0, 1, 2, 0, 63, 0], dtype='uint8')
A:numpy.lib.tests.test_arraysetops.y->numpy.ma.masked_equal(x, 0)
A:numpy.lib.tests.test_arraysetops.f->numpy.array(3)
A:numpy.lib.tests.test_arraysetops.ar->numpy.array([True, False, False])
A:numpy.lib.tests.test_arraysetops.empty_array->numpy.array([], dtype=dtype)
A:numpy.lib.tests.test_arraysetops.expected->numpy.array([3, 1])
A:numpy.lib.tests.test_arraysetops.rstate->numpy.random.RandomState(0)
A:numpy.lib.tests.test_arraysetops.truth->isin(a, b)
A:numpy.lib.tests.test_arraysetops.a_timedelta->numpy.array([1, 1, np.nan, np.nan, np.nan]).astype('timedelta64[s]')
A:numpy.lib.tests.test_arraysetops.b_timedelta->numpy.unique(a, axis=0).astype('timedelta64[s]')
A:numpy.lib.tests.test_arraysetops.is_dtype2_signed->numpy.issubdtype(dtype2, np.signedinteger)
A:numpy.lib.tests.test_arraysetops.ar1->numpy.array([-1, 2, 3, 4, 5], dtype=dtype)
A:numpy.lib.tests.test_arraysetops.ar2->numpy.array([2, 4, 6, 8, 10])
A:numpy.lib.tests.test_arraysetops.data->numpy.array([[0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]]).astype(dtype)
A:numpy.lib.tests.test_arraysetops.result->func(arr)
A:numpy.lib.tests.test_arraysetops.dt->numpy.dtype([('field1', int), ('field2', object)])
A:numpy.lib.tests.test_arraysetops.obj_ar1->numpy.array([1, 'a', 3, 'b', 5], dtype=object)
A:numpy.lib.tests.test_arraysetops.obj_ar2->numpy.array([1, 'a', 3, 'b', 5], dtype=object)
A:numpy.lib.tests.test_arraysetops.overflow_ar2->numpy.array([-1, np.iinfo(dtype).max], dtype=dtype)
A:numpy.lib.tests.test_arraysetops.ez->numpy.array([0, 1, 2, 3, 4, 5])
A:numpy.lib.tests.test_arraysetops.z->union1d(x, y)
A:numpy.lib.tests.test_arraysetops.c1->setxor1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux1->intersect1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux2->union1d(a, b)
A:numpy.lib.tests.test_arraysetops.c2->setdiff1d(aux2, aux1)
A:numpy.lib.tests.test_arraysetops.v->numpy.unique(y)
A:numpy.lib.tests.test_arraysetops.(v, j)->unique(a, False, False, True)
A:numpy.lib.tests.test_arraysetops.(v, j1, j2)->unique(a, False, True, True)
A:numpy.lib.tests.test_arraysetops.(v, j1, j2, j3)->unique(a, True, True, True)
A:numpy.lib.tests.test_arraysetops.aa->numpy.array(list(zip(a, a)), dt)
A:numpy.lib.tests.test_arraysetops.bb->numpy.array(list(zip(b, b)), dt)
A:numpy.lib.tests.test_arraysetops.a1->unique(a)
A:numpy.lib.tests.test_arraysetops.(a2, a2_inv)->numpy.unique(a, return_inverse=True)
A:numpy.lib.tests.test_arraysetops.nat->numpy.timedelta64('nat')
A:numpy.lib.tests.test_arraysetops.inp_arr->numpy.asarray(inp)
A:numpy.lib.tests.test_arraysetops.uniq->unique(x, axis=axis)
A:numpy.lib.tests.test_arraysetops.(uniq, inv)->unique(x, return_inverse=True, axis=axis)
A:numpy.lib.tests.test_arraysetops.single_zero->numpy.empty(shape=(2, 0), dtype=np.int8)
A:numpy.lib.tests.test_arraysetops.(uniq, idx, inv, cnt)->unique(data, axis=1, return_index=True, return_inverse=True, return_counts=True)
A:numpy.lib.tests.test_arraysetops.multiple_zeros->numpy.empty(shape=shape)
A:numpy.lib.tests.test_arraysetops.expected_shape->list(shape)
A:numpy.lib.tests.test_arraysetops.(v2, i, c)->numpy.unique(y, return_index=True, return_counts=True)
A:numpy.lib.tests.test_arraysetops.data3d->numpy.array([[[1, 1], [1, 0]], [[0, 1], [0, 0]]]).astype(dtype)
A:numpy.lib.tests.test_arraysetops.unq->numpy.unique(a)
A:numpy.lib.tests.test_arraysetops.not_unq->numpy.unique(a, equal_nan=False)
A:numpy.lib.tests.test_arraysetops.arr->numpy.array([[1, 2, 3], [2, 3, 1]])
A:numpy.lib.tests.test_arraysetops.(expected_values, expected_inverse)->numpy.unique(arr, return_inverse=True)
A:numpy.lib.tests.test_arraysetops.expected_inverse->expected_inverse.reshape(arr.shape).reshape(arr.shape)
numpy.lib.tests.test_arraysetops.TestSetOps
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_forbidden_type_casts(self,ary,prepend,append,expected)
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_scalar_handling(self,ary,prepend,append,expected)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_array_like(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_indices(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_boolean(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_both_arrays_are_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_both_arrays_have_structured_dtype(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_errors(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_first_array_is_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_hit_alternate_algorithm(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_invert(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_mixed_boolean(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_mixed_dtype(self,dtype1,dtype2,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_mixed_huge_vals(self,kind,data)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_second_array_is_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_table_timedelta_fails(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_timedelta(self,kind)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin_with_arrays_containing_tuples(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_manyways(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_unique(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setxor1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_union1d(self)
numpy.lib.tests.test_arraysetops.TestUnique
numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests(self,dtype)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d_with_axis(self,axis)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_array_api_functions(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_errors(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_list(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_zeros(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_inverse_shape(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_inverse_with_axis(self,axis)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_masked(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_nanequals(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_sort_order_with_axis(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_shape_base.py----------------------------------------
A:numpy.lib.tests.test_shape_base.res->numpy.squeeze(a)
A:numpy.lib.tests.test_shape_base.a->numpy.ones(r, b.dtype)
A:numpy.lib.tests.test_shape_base.a_func->func(a, axis=axis, **kwargs)
A:numpy.lib.tests.test_shape_base.ai_func->argfunc(a, axis=axis, **kwargs)
A:numpy.lib.tests.test_shape_base.ai->numpy.ones((1, 2, 5), dtype=np.intp)
A:numpy.lib.tests.test_shape_base.actual->numpy.column_stack((a, b))
A:numpy.lib.tests.test_shape_base.a_base->numpy.array([[10, 30, 20], [60, 40, 50]])
A:numpy.lib.tests.test_shape_base.i_max->_add_keepdims(np.argmax)(a, axis=axis)
A:numpy.lib.tests.test_shape_base.i_min->_add_keepdims(np.argmin)(a, axis=axis)
A:numpy.lib.tests.test_shape_base.m->numpy.array([[0, 1], [2, 3]]).view(MyNDArray)
A:numpy.lib.tests.test_shape_base.expected->numpy.array([[1, 2], [2, 3], [3, 4]])
A:numpy.lib.tests.test_shape_base.result->apply_along_axis(double, 1, m)
A:numpy.lib.tests.test_shape_base.a2d->numpy.arange(6 * 3).reshape((6, 3))
A:numpy.lib.tests.test_shape_base.a3d->numpy.arange(6 * 5 * 3).reshape((6, 5, 3))
A:numpy.lib.tests.test_shape_base.d->numpy.ones((50, 60))
A:numpy.lib.tests.test_shape_base.aoa_a->apply_over_axes(np.sum, a, [0, 2])
A:numpy.lib.tests.test_shape_base.b->randint(0, 10, size=s)
A:numpy.lib.tests.test_shape_base.expanded->numpy.expand_dims(a, axis=1)
A:numpy.lib.tests.test_shape_base.chunk->numpy.broadcast_to([0], (1 << 30, 2))
A:numpy.lib.tests.test_shape_base.desired->numpy.array([[[1, 1], [2, 2]]])
A:numpy.lib.tests.test_shape_base.c->rand(1, 1, 20, 10)
A:numpy.lib.tests.test_shape_base.k->numpy.kron(a, b)
A:numpy.lib.tests.test_shape_base.ma->myarray(a.shape, a.dtype, a.data)
A:numpy.lib.tests.test_shape_base.x->numpy.ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])
A:numpy.lib.tests.test_shape_base.expected_shape->numpy.multiply(normalised_shape_a, normalised_shape_b)
A:numpy.lib.tests.test_shape_base.large->tile(b, r)
A:numpy.lib.tests.test_shape_base.klarge->kron(a, b)
A:numpy.lib.tests.test_shape_base.d2->numpy.ones((30, 60, 6))
numpy.lib.tests.test_shape_base.TestApplyAlongAxis
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_3d(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion_ma(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_scalar_array(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple101(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass_preservation(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_tuple_func1d(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_with_iterable_object(self)
numpy.lib.tests.test_shape_base.TestApplyOverAxes
numpy.lib.tests.test_shape_base.TestApplyOverAxes.test_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_high_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_low_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_0_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_cols(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_default(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows_greater_max_int32(self)
numpy.lib.tests.test_shape_base.TestColumnStack
numpy.lib.tests.test_shape_base.TestColumnStack.test_1D_arrays(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_2D_arrays(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_generator(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestDsplit
numpy.lib.tests.test_shape_base.TestDsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_3D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestDstack
numpy.lib.tests.test_shape_base.TestDstack.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array2(self)
numpy.lib.tests.test_shape_base.TestDstack.test_generator(self)
numpy.lib.tests.test_shape_base.TestDstack.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestExpandDims
numpy.lib.tests.test_shape_base.TestExpandDims.test_axis_out_of_range(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_axis_tuple(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_functionality(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_repeated_axis(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_subclasses(self)
numpy.lib.tests.test_shape_base.TestHsplit
numpy.lib.tests.test_shape_base.TestHsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestKron
numpy.lib.tests.test_shape_base.TestKron.test_basic(self)
numpy.lib.tests.test_shape_base.TestKron.test_kron_ma(self)
numpy.lib.tests.test_shape_base.TestKron.test_kron_shape(self,shape_a,shape_b)
numpy.lib.tests.test_shape_base.TestKron.test_kron_smoke(self,array_class)
numpy.lib.tests.test_shape_base.TestKron.test_return_type(self)
numpy.lib.tests.test_shape_base.TestMayShareMemory
numpy.lib.tests.test_shape_base.TestMayShareMemory.test_basic(self)
numpy.lib.tests.test_shape_base.TestPutAlongAxis
numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_broadcast(self)
numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_replace_max(self)
numpy.lib.tests.test_shape_base.TestSplit
numpy.lib.tests.test_shape_base.TestSplit.test_equal_split(self)
numpy.lib.tests.test_shape_base.TestSplit.test_unequal_split(self)
numpy.lib.tests.test_shape_base.TestSqueeze
numpy.lib.tests.test_shape_base.TestSqueeze.test_basic(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_argequivalent(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_broadcast(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_empty(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_invalid(self)
numpy.lib.tests.test_shape_base.TestTile
numpy.lib.tests.test_shape_base.TestTile.test_basic(self)
numpy.lib.tests.test_shape_base.TestTile.test_empty(self)
numpy.lib.tests.test_shape_base.TestTile.test_kroncompare(self)
numpy.lib.tests.test_shape_base.TestTile.test_tile_one_repetition_on_array_gh4679(self)
numpy.lib.tests.test_shape_base.TestVsplit
numpy.lib.tests.test_shape_base.TestVsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base._add_keepdims(func)
numpy.lib.tests.test_shape_base.compare_results(res,desired)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_polynomial.py----------------------------------------
A:numpy.lib.tests.test_polynomial.p->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_polynomial.q->numpy.poly1d([1.0, 2, 3], variable='lambda')
A:numpy.lib.tests.test_polynomial.r->numpy.poly1d([1.89999 + 2j, -3j, -5.12345678, 2 + 1j])
A:numpy.lib.tests.test_polynomial.dtype->numpy.dtype(type_code)
A:numpy.lib.tests.test_polynomial.ar->numpy.array([1, 2, 3], dtype=dtype)
A:numpy.lib.tests.test_polynomial.c->numpy.array([3.0, 2.0, 1.0])
A:numpy.lib.tests.test_polynomial.x->numpy.linspace(0, 2, 7)
A:numpy.lib.tests.test_polynomial.y->numpy.random.normal(size=(4, 10000))
A:numpy.lib.tests.test_polynomial.(m, cov)->numpy.polyfit(x, yy + np.array(err)[:, np.newaxis], 2, cov=True)
A:numpy.lib.tests.test_polynomial.(m2, cov2)->numpy.polyfit(x, y + err, 2, w=weights, cov=True)
A:numpy.lib.tests.test_polynomial.(m3, cov3)->numpy.polyfit(x, y + err, 2, w=weights, cov='unscaled')
A:numpy.lib.tests.test_polynomial.yy->numpy.concatenate((y, y), axis=1)
A:numpy.lib.tests.test_polynomial.cc->numpy.concatenate((c, c), axis=1)
A:numpy.lib.tests.test_polynomial.(mean, cov)->numpy.polyfit(np.zeros(y.shape[0]), y, w=w, deg=0, cov='unscaled')
A:numpy.lib.tests.test_polynomial.w->numpy.full(y.shape[0], 1.0 / 0.5)
A:numpy.lib.tests.test_polynomial.p2->numpy.poly1d([1, 2, 4])
A:numpy.lib.tests.test_polynomial.v->numpy.arange(1, 21)
A:numpy.lib.tests.test_polynomial.z->numpy.array([0, 0, 0])
A:numpy.lib.tests.test_polynomial.b->numpy.poly1d([2, 6, 6, 1])
A:numpy.lib.tests.test_polynomial.a->numpy.poly1d([-1j, 1 + 2j, -(2 + 1j), 1])
A:numpy.lib.tests.test_polynomial.(q, r)->numpy.polydiv(b, a)
A:numpy.lib.tests.test_polynomial.d->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_polynomial.(s, t)->numpy.polydiv(c, d)
A:numpy.lib.tests.test_polynomial.(u, v)->numpy.polydiv(d, c)
numpy.lib.tests.test_polynomial.TestPolynomial
numpy.lib.tests.test_polynomial.TestPolynomial.test_complex(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_integ_coeffs(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_objects(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_math(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_misc(self,type_code:str)->None
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_resolution(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_str_and_repr(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_variable_arg(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_coeffs_mutable(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_eq(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_int_overflow(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_polydiv(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_polyfit(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_roots(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_str_leading_zeros(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_zero_dims(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_zero_poly_dtype(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_loadtxt.py----------------------------------------
A:numpy.lib.tests.test_loadtxt.data->StringIO('0\n1\n"2\n"\n3\n4 #\n'.replace('\n', newline), newline='')
A:numpy.lib.tests.test_loadtxt.expected->numpy.array(['spam-a-lot'] * 60000 + ['tis_but_a_scratch'], dtype='U17')
A:numpy.lib.tests.test_loadtxt.txt->StringIO('\n'.join(data))
A:numpy.lib.tests.test_loadtxt.a->numpy.loadtxt(StringIO('#header\n1,2,3'), comments=b'#', delimiter=b',')
A:numpy.lib.tests.test_loadtxt.dtype->dtype.newbyteorder().newbyteorder()
A:numpy.lib.tests.test_loadtxt.(a, b, c, d)->numpy.loadtxt(data, dtype=dtype, delimiter=';', unpack=True)
A:numpy.lib.tests.test_loadtxt.point->numpy.dtype([('x', float), ('y', float)])
A:numpy.lib.tests.test_loadtxt.dt->numpy.dtype([('m', np.int32), ('r', np.float32), ('code', 'U8')])
A:numpy.lib.tests.test_loadtxt.arr->numpy.array([1, 2, 3, 4, 5])
A:numpy.lib.tests.test_loadtxt.arr2d->numpy.array([1, 2, 3, 4, 5]).reshape(shape)
A:numpy.lib.tests.test_loadtxt.res->numpy.loadtxt(fname, dtype=str, delimiter=' ', max_rows=nmax)
A:numpy.lib.tests.test_loadtxt.s->s.replace('(', '').replace(')', '').replace('(', '').replace(')', '')
A:numpy.lib.tests.test_loadtxt.sentinel->object()
A:numpy.lib.tests.test_loadtxt.full_dt->numpy.dtype([('a', 'S1'), ('b', dtype)], align=False)
A:numpy.lib.tests.test_loadtxt.(fd, fname)->mkstemp()
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_bad_encoding(self)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_bad_type(self)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_filelike_bad_read(self)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_filelike_read_fails(self)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_manual_universal_newlines(self,newline)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_not_an_filelike(self)
numpy.lib.tests.test_loadtxt.TestCReaderUnitTests.test_not_an_iter(self)
numpy.lib.tests.test_loadtxt.mixed_types_structured()
numpy.lib.tests.test_loadtxt.test_bad_complex(dtype,field)
numpy.lib.tests.test_loadtxt.test_bad_ndmin(badval)
numpy.lib.tests.test_loadtxt.test_bad_newline_in_iterator(data)
numpy.lib.tests.test_loadtxt.test_blank_lines_normal_delimiter()
numpy.lib.tests.test_loadtxt.test_blank_lines_spaces_delimit(ws)
numpy.lib.tests.test_loadtxt.test_bool()
numpy.lib.tests.test_loadtxt.test_byteswapping_and_unaligned(dtype,value,swap)
numpy.lib.tests.test_loadtxt.test_character_not_bytes_compatible()
numpy.lib.tests.test_loadtxt.test_collision_with_default_delimiter_raises(ws)
numpy.lib.tests.test_loadtxt.test_comment_multichar_error_with_quote()
numpy.lib.tests.test_loadtxt.test_comment_multiple_chars(comment)
numpy.lib.tests.test_loadtxt.test_comment_quotechar_collision_raises()
numpy.lib.tests.test_loadtxt.test_complex_parsing(dtype,with_parens)
numpy.lib.tests.test_loadtxt.test_consecutive_quotechar_escaped()
numpy.lib.tests.test_loadtxt.test_control_character_empty()
numpy.lib.tests.test_loadtxt.test_control_character_newline_raises(nl)
numpy.lib.tests.test_loadtxt.test_control_characters_as_bytes()
numpy.lib.tests.test_loadtxt.test_converter_with_structured_dtype()
numpy.lib.tests.test_loadtxt.test_converter_with_unicode_dtype()
numpy.lib.tests.test_loadtxt.test_converters_dict_raises_non_col_key(bad_col_ind)
numpy.lib.tests.test_loadtxt.test_converters_dict_raises_non_integer_key()
numpy.lib.tests.test_loadtxt.test_converters_dict_raises_val_not_callable()
numpy.lib.tests.test_loadtxt.test_converters_negative_indices()
numpy.lib.tests.test_loadtxt.test_converters_negative_indices_with_usecols()
numpy.lib.tests.test_loadtxt.test_delimiter_and_multiple_comments_collision_raises()
numpy.lib.tests.test_loadtxt.test_delimiter_comment_collision_raises()
numpy.lib.tests.test_loadtxt.test_delimiter_quotechar_collision_raises()
numpy.lib.tests.test_loadtxt.test_empty_usecols()
numpy.lib.tests.test_loadtxt.test_exception_message_bad_values(dtype)
numpy.lib.tests.test_loadtxt.test_exception_negative_row_limits(param)
numpy.lib.tests.test_loadtxt.test_exception_noninteger_row_limits(param)
numpy.lib.tests.test_loadtxt.test_field_growing_cases()
numpy.lib.tests.test_loadtxt.test_float_conversion()
numpy.lib.tests.test_loadtxt.test_good_newline_in_iterator(data)
numpy.lib.tests.test_loadtxt.test_huge_float(dtype)
numpy.lib.tests.test_loadtxt.test_implicit_cast_float_to_int_fails(dtype)
numpy.lib.tests.test_loadtxt.test_integer_signs(dtype)
numpy.lib.tests.test_loadtxt.test_invalid_converter(conv)
numpy.lib.tests.test_loadtxt.test_iterator_fails_getting_next_line()
numpy.lib.tests.test_loadtxt.test_large_unicode_characters(c1,c2)
numpy.lib.tests.test_loadtxt.test_maxrows_exceeding_chunksize(nmax)
numpy.lib.tests.test_loadtxt.test_maxrows_no_blank_lines(dtype)
numpy.lib.tests.test_loadtxt.test_ndmin_single_row_or_col(data,shape)
numpy.lib.tests.test_loadtxt.test_nested_structured_subarray()
numpy.lib.tests.test_loadtxt.test_no_thousands_support(dtype)
numpy.lib.tests.test_loadtxt.test_nul_character_error(dtype)
numpy.lib.tests.test_loadtxt.test_null_character()
numpy.lib.tests.test_loadtxt.test_object_cleanup_on_read_error()
numpy.lib.tests.test_loadtxt.test_parametric_unit_discovery(generic_data,long_datum,unitless_dtype,expected_dtype,nrows)
numpy.lib.tests.test_loadtxt.test_quote_support_default()
numpy.lib.tests.test_loadtxt.test_quotechar_multichar_error()
numpy.lib.tests.test_loadtxt.test_quoted_field(q)
numpy.lib.tests.test_loadtxt.test_quoted_field_is_not_empty()
numpy.lib.tests.test_loadtxt.test_quoted_field_is_not_empty_nonstrict()
numpy.lib.tests.test_loadtxt.test_quoted_field_with_whitepace_delimiter(q)
numpy.lib.tests.test_loadtxt.test_ragged_error()
numpy.lib.tests.test_loadtxt.test_ragged_usecols()
numpy.lib.tests.test_loadtxt.test_read_from_bad_generator()
numpy.lib.tests.test_loadtxt.test_read_from_generator()
numpy.lib.tests.test_loadtxt.test_read_from_generator_multitype()
numpy.lib.tests.test_loadtxt.test_read_huge_row()
numpy.lib.tests.test_loadtxt.test_scientific_notation()
numpy.lib.tests.test_loadtxt.test_str_dtype_unit_discovery_with_converter()
numpy.lib.tests.test_loadtxt.test_string_no_length_given(given_dtype,expected_dtype)
numpy.lib.tests.test_loadtxt.test_structured_dtype_and_skiprows_no_empty_lines(skiprows,mixed_types_structured)
numpy.lib.tests.test_loadtxt.test_structured_dtype_offsets()
numpy.lib.tests.test_loadtxt.test_structured_dtype_with_multi_shape()
numpy.lib.tests.test_loadtxt.test_structured_dtype_with_quotes()
numpy.lib.tests.test_loadtxt.test_structured_dtype_with_shape()
numpy.lib.tests.test_loadtxt.test_unicode_whitespace_stripping(dtype)
numpy.lib.tests.test_loadtxt.test_unicode_whitespace_stripping_complex(dtype)
numpy.lib.tests.test_loadtxt.test_unicode_with_converter()
numpy.lib.tests.test_loadtxt.test_universal_newlines_quoted(newline)
numpy.lib.tests.test_loadtxt.test_unpack_structured(mixed_types_structured)
numpy.lib.tests.test_loadtxt.test_warn_on_no_data(data,ndmin,usecols)
numpy.lib.tests.test_loadtxt.test_warn_on_skipped_data(skiprows)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_arrayterator.py----------------------------------------
A:numpy.lib.tests.test_arrayterator.shape->tuple((randint(10) + 1 for dim in range(ndims)))
A:numpy.lib.tests.test_arrayterator.els->reduce(mul, shape)
A:numpy.lib.tests.test_arrayterator.a->numpy.arange(els)
A:numpy.lib.tests.test_arrayterator.buf_size->randint(2 * els)
A:numpy.lib.tests.test_arrayterator.b->Arrayterator(a, buf_size)
A:numpy.lib.tests.test_arrayterator.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
numpy.lib.tests.test_arrayterator.test()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_format.py----------------------------------------
A:numpy.lib.tests.test_format.dtype->numpy.dtype(scalar).newbyteorder(endian)
A:numpy.lib.tests.test_format.basic->numpy.arange(1500).astype(dtype)
A:numpy.lib.tests.test_format.size->random.randint(1, size)
A:numpy.lib.tests.test_format.f->BytesIO(magic)
A:numpy.lib.tests.test_format.f2->BytesIO(f.getvalue()[0:-1])
A:numpy.lib.tests.test_format.arr2->numpy.load(buf)
A:numpy.lib.tests.test_format.long_str_arr->numpy.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE + 1)))
A:numpy.lib.tests.test_format.long_str_arr2->roundtrip(long_str_arr)
A:numpy.lib.tests.test_format.nfn->os.path.join(tmpdir, f'normal{i}.npy')
A:numpy.lib.tests.test_format.mfn->os.path.join(tmpdir, f'memmap{i}.npy')
A:numpy.lib.tests.test_format.ma->numpy.lib.format.open_memmap(tf2, mode='r', max_header_size=200000)
A:numpy.lib.tests.test_format.normal_bytes->BytesIO().read()
A:numpy.lib.tests.test_format.memmap_bytes->BytesIO().read()
A:numpy.lib.tests.test_format.arr->numpy.ones(10, dtype=dt)
A:numpy.lib.tests.test_format.npz_file->os.path.join(tmpdir, 'aligned.npz')
A:numpy.lib.tests.test_format.dt1->numpy.lib.format.descr_to_dtype(dt.descr)
A:numpy.lib.tests.test_format.dt2->numpy.dtype({'names': ['a', 'b'], 'formats': ['i4', 'i4'], 'offsets': [1, 6]})
A:numpy.lib.tests.test_format.dt3->numpy.dtype({'names': ['c', 'd'], 'formats': ['i4', dt2]})
A:numpy.lib.tests.test_format.dt4->numpy.dtype({'names': ['a', '', 'b'], 'formats': ['i4'] * 3})
A:numpy.lib.tests.test_format.dt5->numpy.dtype({'names': ['a', 'b'], 'formats': ['i4', 'i4'], 'offsets': [1, 6], 'titles': ['aa', 'bb']})
A:numpy.lib.tests.test_format.dt6->numpy.dtype({'names': [], 'formats': [], 'itemsize': 8})
A:numpy.lib.tests.test_format.path->os.path.join(tmpdir, 'pickle-disabled.npy')
A:numpy.lib.tests.test_format.data->numpy.load(path, allow_pickle=True, fix_imports=False, encoding='latin1')
A:numpy.lib.tests.test_format.data_dir->os.path.join(os.path.dirname(__file__), 'data')
A:numpy.lib.tests.test_format.expected->numpy.array([None, range, '優良', b'\xe4\xb8\x8d\xe8\x89\xaf'], dtype=object)
A:numpy.lib.tests.test_format.data_f->numpy.load(path, allow_pickle=True, encoding=encoding)
A:numpy.lib.tests.test_format.arr1->numpy.zeros(3, dt)
A:numpy.lib.tests.test_format.d->numpy.arange(5)
A:numpy.lib.tests.test_format.header->BytesIO(magic).readline()
A:numpy.lib.tests.test_format.n->numpy.lib.format.read_array(f, max_header_size=200000)
A:numpy.lib.tests.test_format.tf1->os.path.join(tmpdir, f'version2_01.npy')
A:numpy.lib.tests.test_format.tf2->os.path.join(tmpdir, f'version2_02.npy')
A:numpy.lib.tests.test_format.res->numpy.load(f, mmap_mode=mmap_mode, max_header_size=180000)
A:numpy.lib.tests.test_format.s1->BytesIO()
A:numpy.lib.tests.test_format.s2->BytesIO()
A:numpy.lib.tests.test_format.version1->numpy.lib.format.read_magic(s1)
A:numpy.lib.tests.test_format.version2->numpy.lib.format.read_magic(s2)
A:numpy.lib.tests.test_format.s->BytesIO()
A:numpy.lib.tests.test_format.(shape, fortran, dtype)->numpy.lib.format.read_array_header_2_0(s)
A:numpy.lib.tests.test_format.tf_name->os.path.join(tmpdir, 'sparse_file')
A:numpy.lib.tests.test_format.r->numpy.load(f)
A:numpy.lib.tests.test_format.a->numpy.empty(shape, dtype=np.uint8)
A:numpy.lib.tests.test_format.fname->os.path.join(tmpdir, 'unicode.npy')
A:numpy.lib.tests.test_format.fp->BytesIO()
A:numpy.lib.tests.test_format.buf->BytesIO()
numpy.lib.tests.test_format.BytesIOSRandomSize(BytesIO)
numpy.lib.tests.test_format.BytesIOSRandomSize.read(self,size=None)
numpy.lib.tests.test_format.assert_equal_(o1,o2)
numpy.lib.tests.test_format.roundtrip(arr)
numpy.lib.tests.test_format.roundtrip_randsize(arr)
numpy.lib.tests.test_format.roundtrip_truncated(arr)
numpy.lib.tests.test_format.test_bad_header()
numpy.lib.tests.test_format.test_bad_magic_args()
numpy.lib.tests.test_format.test_compressed_roundtrip(tmpdir)
numpy.lib.tests.test_format.test_descr_to_dtype(dt)
numpy.lib.tests.test_format.test_empty_npz(tmpdir)
numpy.lib.tests.test_format.test_header_growth_axis()
numpy.lib.tests.test_format.test_huge_header(tmpdir,mmap_mode)
numpy.lib.tests.test_format.test_huge_header_npz(tmpdir)
numpy.lib.tests.test_format.test_large_archive(tmpdir)
numpy.lib.tests.test_format.test_large_file_support(tmpdir)
numpy.lib.tests.test_format.test_large_header()
numpy.lib.tests.test_format.test_load_padded_dtype(tmpdir,dt)
numpy.lib.tests.test_format.test_long_str()
numpy.lib.tests.test_format.test_memmap_roundtrip(tmpdir)
numpy.lib.tests.test_format.test_metadata_dtype(dt)
numpy.lib.tests.test_format.test_pickle_disallow(tmpdir)
numpy.lib.tests.test_format.test_pickle_python2_python3()
numpy.lib.tests.test_format.test_python2_python3_interoperability()
numpy.lib.tests.test_format.test_read_array_header_1_0()
numpy.lib.tests.test_format.test_read_array_header_2_0()
numpy.lib.tests.test_format.test_read_magic()
numpy.lib.tests.test_format.test_read_magic_bad_magic()
numpy.lib.tests.test_format.test_read_version_1_0_bad_magic()
numpy.lib.tests.test_format.test_roundtrip()
numpy.lib.tests.test_format.test_roundtrip_randsize()
numpy.lib.tests.test_format.test_roundtrip_truncated()
numpy.lib.tests.test_format.test_unicode_field_names(tmpdir)
numpy.lib.tests.test_format.test_version_2_0()
numpy.lib.tests.test_format.test_version_2_0_memmap(tmpdir)
numpy.lib.tests.test_format.test_write_version()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_index_tricks.py----------------------------------------
A:numpy.lib.tests.test_index_tricks.arr->numpy.array([[3, 6, 6], [4, 5, 1]])
A:numpy.lib.tests.test_index_tricks.coords->numpy.array([[1, 0, 1, 2, 3, 4], [1, 6, 1, 3, 2, 0], [1, 3, 1, 0, 9, 5]], dtype=dtype)
A:numpy.lib.tests.test_index_tricks.(x, y)->numpy.unravel_index([1, 2, 3], (4, 5))
A:numpy.lib.tests.test_index_tricks.x->list(ndindex(*[0]))
A:numpy.lib.tests.test_index_tricks.res->numpy.unravel_index(np.zeros(0, dtype=np.intp), (2, 1, 0))
A:numpy.lib.tests.test_index_tricks.(y, st)->numpy.linspace(2, 10, retstep=True)
A:numpy.lib.tests.test_index_tricks.grid_broadcast->numpy.broadcast_arrays(*grid_sparse)
A:numpy.lib.tests.test_index_tricks.b->numpy.random.rand(5, 5)
A:numpy.lib.tests.test_index_tricks.c->numpy.random.rand(5, 5)
A:numpy.lib.tests.test_index_tricks.a->numpy.zeros((2, 2, 2), int)
A:numpy.lib.tests.test_index_tricks.(a,)->numpy.ix_(np.array([], dtype=np.float32))
A:numpy.lib.tests.test_index_tricks.arrays->numpy.ix_(*[func(sz) for sz in sizes])
A:numpy.lib.tests.test_index_tricks.(int_a,)->numpy.nonzero(bool_a)
A:numpy.lib.tests.test_index_tricks.out->ix_(x, x)
A:numpy.lib.tests.test_index_tricks.i->numpy.array([0, 1, 2])
A:numpy.lib.tests.test_index_tricks.di->diag_indices(4)
A:numpy.lib.tests.test_index_tricks.d3->diag_indices(2, 3)
A:numpy.lib.tests.test_index_tricks.(r, c)->diag_indices_from(x)
numpy.lib.tests.test_index_tricks.TestConcatenator
numpy.lib.tests.test_index_tricks.TestConcatenator.test_0d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_1d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_2d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_complex_step(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_more_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_diag_indices_from(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_shape_mismatch(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_small_input(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_basic(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_hetero_shape_handling(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_low_dim_handling(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_operate_4d_array(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix_wrap(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_wide_matrix(self)
numpy.lib.tests.test_index_tricks.TestGrid
numpy.lib.tests.test_index_tricks.TestGrid.test_accepts_longdouble(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_accepts_npcomplexfloating(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_accepts_npfloating(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_basic(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_linspace_equivalence(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_mgrid_size_none_handling(self,start,stop,step,expected)
numpy.lib.tests.test_index_tricks.TestGrid.test_nd(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_sparse(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_regression_1(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_simple_1(self)
numpy.lib.tests.test_index_tricks.TestIx_
numpy.lib.tests.test_index_tricks.TestIx_.test_1d_only(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_bool(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_regression_1(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_repeated_input(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_shape_and_dtype(self)
numpy.lib.tests.test_index_tricks.TestNdenumerate
numpy.lib.tests.test_index_tricks.TestNdenumerate.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_0d(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_big_indices(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_clipmodes(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_dtypes(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_array_ravel(self,mode)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_array_unravel(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_indices(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_writeability(self)
numpy.lib.tests.test_index_tricks.test_c_()
numpy.lib.tests.test_index_tricks.test_diag_indices()
numpy.lib.tests.test_index_tricks.test_ndindex()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_regression.py----------------------------------------
A:numpy.lib.tests.test_regression.x->numpy.loadtxt(StringIO('0 1 2 3 4 5 6 7 8 9 10 11'), dtype=dt)
A:numpy.lib.tests.test_regression.y->numpy.poly1d([3, 4])
A:numpy.lib.tests.test_regression.vt->numpy.vectorize(lambda *args: args)
A:numpy.lib.tests.test_regression.v->numpy.poly1d([1, 2, 3, 4, 5])
A:numpy.lib.tests.test_regression.p->numpy.poly1d([np.nan, np.nan, 1], r=False)
A:numpy.lib.tests.test_regression.u->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_regression.(q, r)->numpy.polydiv(x, x)
A:numpy.lib.tests.test_regression.tested->numpy.polyfit(x, y, 4)
A:numpy.lib.tests.test_regression.thesize->int((2 ** nbits) ** (1.0 / 5.0) + 1)
A:numpy.lib.tests.test_regression.a->numpy.zeros(2, dtype=bool)
A:numpy.lib.tests.test_regression.i->numpy.random.randint(0, n, size=thesize)
A:numpy.lib.tests.test_regression.dt->numpy.dtype([('a', 'f4'), ('b', 'i4')])
A:numpy.lib.tests.test_regression.base->numpy.array([1, 2, 3], dtype=np.int32)
A:numpy.lib.tests.test_regression.data->numpy.eye(3).astype(np.int32)
A:numpy.lib.tests.test_regression.out->open(os.devnull, 'w')
numpy.lib.tests.test_regression.TestRegression
numpy.lib.tests.test_regression.TestRegression.test_append_fields_dtype_list(self)
numpy.lib.tests.test_regression.TestRegression.test_cov_parameters(self)
numpy.lib.tests.test_regression.TestRegression.test_histogramdd_too_many_bins(self)
numpy.lib.tests.test_regression.TestRegression.test_include_dirs(self)
numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing(self)
numpy.lib.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_digitize(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_polymul(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_string_concat(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_vectorise(self)
numpy.lib.tests.test_regression.TestRegression.test_mgrid_single_element(self)
numpy.lib.tests.test_regression.TestRegression.test_nansum_with_boolean(self)
numpy.lib.tests.test_regression.TestRegression.test_ndenumerate_crash(self)
numpy.lib.tests.test_regression.TestRegression.test_poly1d(self)
numpy.lib.tests.test_regression.TestRegression.test_poly1d_nan_roots(self)
numpy.lib.tests.test_regression.TestRegression.test_poly_div(self)
numpy.lib.tests.test_regression.TestRegression.test_poly_eq(self)
numpy.lib.tests.test_regression.TestRegression.test_polyder_return_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polydiv_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polyfit_build(self)
numpy.lib.tests.test_regression.TestRegression.test_polyint_type(self)
numpy.lib.tests.test_regression.TestRegression.test_py3_compat(self)
numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize(self)
numpy.lib.tests.test_regression.TestRegression.test_unique_zero_sized(self)
numpy.lib.tests.test_regression.TestRegression.test_void_coercion(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_utils.py----------------------------------------
A:numpy.lib.tests.test_utils.out->StringIO()
A:numpy.lib.tests.test_utils.dt->numpy.dtype('uint32', metadata={'msg': 'toto'})
A:numpy.lib.tests.test_utils.dt_m->numpy.lib._utils_impl.drop_metadata(dt)
A:numpy.lib.tests.test_utils.dtype->numpy.dtype(dtype, metadata={1: 2})
numpy.lib.tests.test_utils.test_assert_raises_regex_context_manager()
numpy.lib.tests.test_utils.test_drop_metadata()
numpy.lib.tests.test_utils.test_drop_metadata_identity_and_copy(dtype)
numpy.lib.tests.test_utils.test_info_method_heading()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_io.py----------------------------------------
A:numpy.lib.tests.test_io.s->BytesIO()
A:numpy.lib.tests.test_io.save_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('save_kwds', {})
A:numpy.lib.tests.test_io.load_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('load_kwds', {'allow_pickle': True})
A:numpy.lib.tests.test_io.file_on_disk->dict(missing_values='N/A', names=True, case_sensitive=True).get('file_on_disk', False)
A:numpy.lib.tests.test_io.target_file->BytesIO()
A:numpy.lib.tests.test_io.arr_reloaded->numpy.load(load_file, **load_kwds)
A:numpy.lib.tests.test_io.a->numpy.random.random((5, 5))
A:numpy.lib.tests.test_io.npfile->numpy.load(tmp)
A:numpy.lib.tests.test_io.b->numpy.load(path, mmap_mode='r+')
A:numpy.lib.tests.test_io.c->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6')
A:numpy.lib.tests.test_io.l->numpy.load(tmp)
A:numpy.lib.tests.test_io.f->BytesIO()
A:numpy.lib.tests.test_io.arr->numpy.loadtxt(c, usecols=(0, 2), dtype=list(zip(names, dtypes)))
A:numpy.lib.tests.test_io.data->numpy.genfromtxt(path)
A:numpy.lib.tests.test_io.lines->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6').readlines()
A:numpy.lib.tests.test_io.path->filename_type(path)
A:numpy.lib.tests.test_io.w->CustomWriter()
A:numpy.lib.tests.test_io.utf8->b'\xcf\x96'.decode('UTF-8')
A:numpy.lib.tests.test_io.test_data->numpy.asarray([np.random.rand(np.random.randint(50, 100), 4) for i in range(800000)], dtype=object)
A:numpy.lib.tests.test_io.memoryerror_raised->Value(c_bool)
A:numpy.lib.tests.test_io.ctx->get_context('fork')
A:numpy.lib.tests.test_io.p->get_context('fork').Process(target=check_large_zip, args=(memoryerror_raised,))
A:numpy.lib.tests.test_io.wanted->numpy.arange(6).reshape((2, 3))
A:numpy.lib.tests.test_io.res->numpy.loadtxt(name)
A:numpy.lib.tests.test_io.x->numpy.loadtxt(TextIO('0 1 2 3'), dtype=dt)
A:numpy.lib.tests.test_io.nonascii->b'\xc3\xb6\xc3\xbc\xc3\xb6'.decode('UTF-8')
A:numpy.lib.tests.test_io.v->self.loadfunc(BytesIO(utf16), dtype=None, encoding='UTF-16')
A:numpy.lib.tests.test_io.loadfunc->staticmethod(np.genfromtxt)
A:numpy.lib.tests.test_io.d->TextIO()
A:numpy.lib.tests.test_io.y->numpy.zeros((3, 3))
A:numpy.lib.tests.test_io.to_read->int_type(1)
A:numpy.lib.tests.test_io.crazy_int->CrazyInt()
A:numpy.lib.tests.test_io.dt->numpy.dtype([('name', 'S4'), ('x', float), ('y', float), ('block', int, (2, 3))])
A:numpy.lib.tests.test_io.test->recfromcsv(path, dtype=None, **kwargs)
A:numpy.lib.tests.test_io.control->numpy.array([(0, 1), (2, 3)], dtype=[('A', int), ('B', int)])
A:numpy.lib.tests.test_io.tgt->numpy.arange(6).reshape((2, 3))
A:numpy.lib.tests.test_io.inp->'\n'.join(map(float.hex, tgt))
A:numpy.lib.tests.test_io.txt->TextIO('1')
A:numpy.lib.tests.test_io.txt_bad->TextIO('1').replace(b'e+00-', b'e00+-')
A:numpy.lib.tests.test_io.(a, b, c)->numpy.genfromtxt(txt, dtype=dt, unpack=True)
A:numpy.lib.tests.test_io.e->TextIO()
A:numpy.lib.tests.test_io.sutf8->butf8.decode('UTF-8').replace('\r', '').splitlines()
A:numpy.lib.tests.test_io.regexp->re.compile(b'(\\d)')
A:numpy.lib.tests.test_io.kwargs->dict(missing_values='N/A', names=True, case_sensitive=True)
A:numpy.lib.tests.test_io.ctrl->numpy.array([[1, 2, 3], [1, -999, 5], [0, 6, -999]], dtype=int)
A:numpy.lib.tests.test_io.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.lib.tests.test_io.fpath->os.path.join(tmpdir, 'test.csv')
A:numpy.lib.tests.test_io.parsed->numpy.genfromtxt(TextIO('string'), dtype=object)
A:numpy.lib.tests.test_io.ctrl_d->numpy.array([(1, 2, 3), (np.nan, 2, np.nan), (1, np.nan, 3)])
A:numpy.lib.tests.test_io.ctrl_m->numpy.array([(0, 0, 0), (1, 0, 1), (0, 1, 0)], dtype=bool)
A:numpy.lib.tests.test_io.basekwargs->dict(dtype=None, delimiter=',', names=True)
A:numpy.lib.tests.test_io.mdata->TextIO('\n'.join(data))
A:numpy.lib.tests.test_io.mtest->numpy.genfromtxt(TextIO(data), autostrip=True, **kwargs)
A:numpy.lib.tests.test_io.ctl->numpy.array([['norm1', 'norm2', 'norm3'], ['norm1', latin1, 'norm3'], ['test1', 'testNonethe' + utf8, 'test3']], dtype=np.str_)
A:numpy.lib.tests.test_io.encoding->locale.getpreferredencoding()
A:numpy.lib.tests.test_io.a1->numpy.genfromtxt(txt, max_rows=3)
A:numpy.lib.tests.test_io.a2->numpy.genfromtxt(txt)
A:numpy.lib.tests.test_io.expected->numpy.array((1,), dtype=np.int32)
A:numpy.lib.tests.test_io.g->gzip.GzipFile(fileobj=s, mode='w')
A:numpy.lib.tests.test_io.z->numpy.load(s)
numpy.lib.tests.test_io.JustReader(self,base)
numpy.lib.tests.test_io.JustReader.__init__(self,base)
numpy.lib.tests.test_io.JustReader.read(self,n)
numpy.lib.tests.test_io.JustReader.seek(self,off,whence=0)
numpy.lib.tests.test_io.JustWriter(self,base)
numpy.lib.tests.test_io.JustWriter.__init__(self,base)
numpy.lib.tests.test_io.JustWriter.flush(self)
numpy.lib.tests.test_io.JustWriter.write(self,s)
numpy.lib.tests.test_io.LoadTxtBase
numpy.lib.tests.test_io.LoadTxtBase.check_compressed(self,fopen,suffixes)
numpy.lib.tests.test_io.LoadTxtBase.test_binary_decode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_bz2(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_gzip(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_lzma(self)
numpy.lib.tests.test_io.LoadTxtBase.test_converters_decode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_converters_nodecode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_encoding(self)
numpy.lib.tests.test_io.LoadTxtBase.test_stringload(self)
numpy.lib.tests.test_io.RoundtripTest
numpy.lib.tests.test_io.RoundtripTest.check_roundtrips(self,a)
numpy.lib.tests.test_io.RoundtripTest.roundtrip(self,save_func,*args,**kwargs)
numpy.lib.tests.test_io.RoundtripTest.test_1D(self)
numpy.lib.tests.test_io.RoundtripTest.test_array(self)
numpy.lib.tests.test_io.RoundtripTest.test_array_object(self)
numpy.lib.tests.test_io.RoundtripTest.test_format_2_0(self)
numpy.lib.tests.test_io.RoundtripTest.test_mmap(self)
numpy.lib.tests.test_io.RoundtripTest.test_record(self)
numpy.lib.tests.test_io.TestFromTxt(LoadTxtBase)
numpy.lib.tests.test_io.TestFromTxt.test_1D(self)
numpy.lib.tests.test_io.TestFromTxt.test_array(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_largeint(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_autonames_and_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_autostrip(self)
numpy.lib.tests.test_io.TestFromTxt.test_bad_fname(self)
numpy.lib.tests.test_io.TestFromTxt.test_binary_decode_autodtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_commented_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments_is_none(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases2(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_default_field_format(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters_and_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object_no_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_easy_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype_alt(self)
numpy.lib.tests.test_io.TestFromTxt.test_file_is_closed_on_error(self)
numpy.lib.tests.test_io.TestFromTxt.test_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_fixed_width_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_from_gzip(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_filename(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator(self)
numpy.lib.tests.test_io.TestFromTxt.test_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_incomplete_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_inconsistent_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_integer_delimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_latin1(self)
numpy.lib.tests.test_io.TestFromTxt.test_max_rows(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing_with_tabs(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_and_comments_none(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_auto_completion(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_overwrite(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636(self)
numpy.lib.tests.test_io.TestFromTxt.test_ndmin_keyword(self,ndim:int)
numpy.lib.tests.test_io.TestFromTxt.test_recfromcsv(self)
numpy.lib.tests.test_io.TestFromTxt.test_recfromtxt(self)
numpy.lib.tests.test_io.TestFromTxt.test_record(self)
numpy.lib.tests.test_io.TestFromTxt.test_replace_space(self)
numpy.lib.tests.test_io.TestFromTxt.test_replace_space_known_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_wo_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer_with_invalid(self)
numpy.lib.tests.test_io.TestFromTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestFromTxt.test_spacedelimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_squeeze_scalar(self)
numpy.lib.tests.test_io.TestFromTxt.test_tricky_converter_bug1666(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_auto_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_float_data(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_single_name(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_structured(self)
numpy.lib.tests.test_io.TestFromTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_as_css(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_integer(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_named_columns(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_missing_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_byte_encoding(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_file(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_file_nodtype_unicode(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_userconverters_with_explicit_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_various(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing_float(self)
numpy.lib.tests.test_io.TestLoadTxt(LoadTxtBase)
numpy.lib.tests.test_io.TestLoadTxt.setup_method(self)
numpy.lib.tests.test_io.TestLoadTxt.teardown_method(self)
numpy.lib.tests.test_io.TestLoadTxt.test_1D(self)
numpy.lib.tests.test_io.TestLoadTxt.test_3d_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_array(self)
numpy.lib.tests.test_io.TestLoadTxt.test_bad_line(self)
numpy.lib.tests.test_io.TestLoadTxt.test_bad_usecols(self)
numpy.lib.tests.test_io.TestLoadTxt.test_binary_load(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_byte(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_multi_chars(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_multiple(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_unicode(self)
numpy.lib.tests.test_io.TestLoadTxt.test_complex_misformatted(self)
numpy.lib.tests.test_io.TestLoadTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestLoadTxt.test_default_float_converter_exception(self)
numpy.lib.tests.test_io.TestLoadTxt.test_default_float_converter_no_default_hex_conversion(self)
numpy.lib.tests.test_io.TestLoadTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_field_after_tab(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestLoadTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_from_complex(self)
numpy.lib.tests.test_io.TestLoadTxt.test_from_float_hex(self)
numpy.lib.tests.test_io.TestLoadTxt.test_generator_source(self)
numpy.lib.tests.test_io.TestLoadTxt.test_int64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_empty_lines(self,skip,data)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_larger(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_read_continuation(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_skiprows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_missing(self)
numpy.lib.tests.test_io.TestLoadTxt.test_ndmin_keyword(self)
numpy.lib.tests.test_io.TestLoadTxt.test_none_as_string(self)
numpy.lib.tests.test_io.TestLoadTxt.test_record(self)
numpy.lib.tests.test_io.TestLoadTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_str_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_uint64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_universal_newline(self)
numpy.lib.tests.test_io.TestLoadTxt.test_unpack_structured(self)
numpy.lib.tests.test_io.TestLoadTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestLoadTxt.test_usecols(self)
numpy.lib.tests.test_io.TestPathUsage
numpy.lib.tests.test_io.TestPathUsage.test_genfromtxt(self,filename_type)
numpy.lib.tests.test_io.TestPathUsage.test_loadtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_recfromcsv(self,filename_type)
numpy.lib.tests.test_io.TestPathUsage.test_recfromtxt(self,filename_type)
numpy.lib.tests.test_io.TestPathUsage.test_save_load(self)
numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap(self)
numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap_readwrite(self,filename_type)
numpy.lib.tests.test_io.TestPathUsage.test_savez_compressed_load(self,filename_type)
numpy.lib.tests.test_io.TestPathUsage.test_savez_load(self,filename_type)
numpy.lib.tests.test_io.TestSaveLoad(RoundtripTest)
numpy.lib.tests.test_io.TestSaveLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSaveTxt
numpy.lib.tests.test_io.TestSaveTxt.test_0D_3D(self)
numpy.lib.tests.test_io.TestSaveTxt.test_1D(self)
numpy.lib.tests.test_io.TestSaveTxt.test_array(self)
numpy.lib.tests.test_io.TestSaveTxt.test_complex_arrays(self)
numpy.lib.tests.test_io.TestSaveTxt.test_complex_negative_exponent(self)
numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_delimiter(self)
numpy.lib.tests.test_io.TestSaveTxt.test_file_roundtrip(self,filename_type)
numpy.lib.tests.test_io.TestSaveTxt.test_format(self)
numpy.lib.tests.test_io.TestSaveTxt.test_header_footer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_large_zip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_multifield_view(self)
numpy.lib.tests.test_io.TestSaveTxt.test_structured(self)
numpy.lib.tests.test_io.TestSaveTxt.test_structured_padded(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_and_bytes_fmt(self,iotype)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_bytestream(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_roundtrip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_stringstream(self)
numpy.lib.tests.test_io.TestSavezLoad(RoundtripTest)
numpy.lib.tests.test_io.TestSavezLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSavezLoad.test_BagObj(self)
numpy.lib.tests.test_io.TestSavezLoad.test_big_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load(self)
numpy.lib.tests.test_io.TestSavezLoad.test_multiple_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_named_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_not_closing_opened_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_repr_lists_keys(self,count,expected_repr)
numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes(self)
numpy.lib.tests.test_io.TestSavezLoad.test_tuple_getitem_raises(self)
numpy.lib.tests.test_io.Testfromregex
numpy.lib.tests.test_io.Testfromregex.test_bad_dtype_not_structured(self)
numpy.lib.tests.test_io.Testfromregex.test_compiled_bytes(self)
numpy.lib.tests.test_io.Testfromregex.test_record(self)
numpy.lib.tests.test_io.Testfromregex.test_record_2(self)
numpy.lib.tests.test_io.Testfromregex.test_record_3(self)
numpy.lib.tests.test_io.Testfromregex.test_record_unicode(self,path_type)
numpy.lib.tests.test_io.TextIO(self,s='')
numpy.lib.tests.test_io.TextIO.__init__(self,s='')
numpy.lib.tests.test_io.TextIO.write(self,s)
numpy.lib.tests.test_io.TextIO.writelines(self,lines)
numpy.lib.tests.test_io.strptime(s,fmt=None)
numpy.lib.tests.test_io.test_ducktyping()
numpy.lib.tests.test_io.test_gzip_load()
numpy.lib.tests.test_io.test_gzip_loadtxt()
numpy.lib.tests.test_io.test_gzip_loadtxt_from_string()
numpy.lib.tests.test_io.test_load_multiple_arrays_until_eof()
numpy.lib.tests.test_io.test_load_refcount()
numpy.lib.tests.test_io.test_npzfile_dict()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test__datasource.py----------------------------------------
A:numpy.lib.tests.test__datasource.tmpfile->valid_textfile(local_path)
A:numpy.lib.tests.test__datasource.(fd, path)->mkstemp(suffix='.txt', prefix='dstmp_', dir=filedir)
A:numpy.lib.tests.test__datasource.self.tmpdir->mkdtemp()
A:numpy.lib.tests.test__datasource.self.ds->numpy.lib._datasource.DataSource(self.tmpdir)
A:numpy.lib.tests.test__datasource.fh->self.ds.open(local_file)
A:numpy.lib.tests.test__datasource.url->invalid_httpurl()
A:numpy.lib.tests.test__datasource.local_file->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.invalid_file->invalid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.filepath->self.repos.abspath(valid_httpfile())
A:numpy.lib.tests.test__datasource.fp->numpy.lib._datasource.open(local_file)
A:numpy.lib.tests.test__datasource.result->numpy.lib._datasource.open(local_file).readline()
A:numpy.lib.tests.test__datasource.localdir->mkdtemp()
A:numpy.lib.tests.test__datasource.(scheme, netloc, upath, pms, qry, frg)->urlparse(localfile)
A:numpy.lib.tests.test__datasource.local_path->os.path.join(self.repos._destpath, netloc)
A:numpy.lib.tests.test__datasource.invalidhttp->os.path.join(self.tmpdir, netloc, upath.strip(os.sep).strip('/'))
A:numpy.lib.tests.test__datasource.invalidfile->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.self.repos->numpy.lib._datasource.Repository(valid_baseurl(), self.tmpdir)
A:numpy.lib.tests.test__datasource.localfile->valid_httpurl()
A:numpy.lib.tests.test__datasource.ds->numpy.lib._datasource.DataSource()
numpy.lib.tests.test__datasource.TestDataSourceAbspath
numpy.lib.tests.test__datasource.TestDataSourceAbspath.setup_method(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.teardown_method(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestDataSourceExists
numpy.lib.tests.test__datasource.TestDataSourceExists.setup_method(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.teardown_method(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen
numpy.lib.tests.test__datasource.TestDataSourceOpen.setup_method(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.teardown_method(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestOpenFunc
numpy.lib.tests.test__datasource.TestOpenFunc.setup_method(self)
numpy.lib.tests.test__datasource.TestOpenFunc.teardown_method(self)
numpy.lib.tests.test__datasource.TestOpenFunc.test_DataSourceOpen(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath
numpy.lib.tests.test__datasource.TestRepositoryAbspath.setup_method(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.teardown_method(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestRepositoryExists
numpy.lib.tests.test__datasource.TestRepositoryExists.setup_method(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.teardown_method(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.invalid_baseurl()
numpy.lib.tests.test__datasource.invalid_httpfile()
numpy.lib.tests.test__datasource.invalid_httpurl()
numpy.lib.tests.test__datasource.invalid_textfile(filedir)
numpy.lib.tests.test__datasource.setup_module()
numpy.lib.tests.test__datasource.teardown_module()
numpy.lib.tests.test__datasource.test_del_attr_handling()
numpy.lib.tests.test__datasource.urlopen_stub(url,data=None)
numpy.lib.tests.test__datasource.valid_baseurl()
numpy.lib.tests.test__datasource.valid_httpfile()
numpy.lib.tests.test__datasource.valid_httpurl()
numpy.lib.tests.test__datasource.valid_textfile(filedir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_histograms.py----------------------------------------
A:numpy.lib.tests.test_histograms.v->numpy.arange(10)
A:numpy.lib.tests.test_histograms.(a, b)->numpy.histogramdd([[], [], []], bins=2)
A:numpy.lib.tests.test_histograms.(hist, edges)->histogram(v, bins, density=True)
A:numpy.lib.tests.test_histograms.(h, e)->numpy.histogramdd(x, bins=[3, [-np.inf, 3, np.inf]])
A:numpy.lib.tests.test_histograms.area->numpy.sum(a * np.diff(b))
A:numpy.lib.tests.test_histograms.(counts, dmy)->numpy.histogram([1, 2, 3, 4], [0.5, 1.5, np.inf], density=True)
A:numpy.lib.tests.test_histograms.(h, b)->histogram(all_nan, bins=[0, 1])
A:numpy.lib.tests.test_histograms.x->numpy.array([1] + [1] * 3 + [7] * 3 + [7] * 9)
A:numpy.lib.tests.test_histograms.y->numpy.array([7] + [1] * 3 + [7] * 3 + [1] * 9)
A:numpy.lib.tests.test_histograms.(counts_hist, xedges, yedges)->numpy.histogram2d(x, y, bins=100)
A:numpy.lib.tests.test_histograms.a->numpy.array([-2, 0, 127], dtype=np.int8)
A:numpy.lib.tests.test_histograms.(int_hist, int_edges)->numpy.histogram(a)
A:numpy.lib.tests.test_histograms.rec->suppress_warnings().record(RuntimeWarning, 'Converting input from .*')
A:numpy.lib.tests.test_histograms.(na, nb)->histogram(v, density=True)
A:numpy.lib.tests.test_histograms.(wa, wb)->histogram(values, bins=2, range=[1, 3], weights=weights)
A:numpy.lib.tests.test_histograms.(nwa, nwb)->histogram(v, weights=w, density=True)
A:numpy.lib.tests.test_histograms.w->numpy.concatenate((np.zeros(5), np.ones(5)))
A:numpy.lib.tests.test_histograms.values->numpy.array([1.3, 2.5, 2.3])
A:numpy.lib.tests.test_histograms.weights->numpy.array([Decimal(1), Decimal(2), Decimal(3)])
A:numpy.lib.tests.test_histograms.vals->numpy.random.random((100, 3))
A:numpy.lib.tests.test_histograms.arr->numpy.array([0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 3.0, 4.0, 5.0])
A:numpy.lib.tests.test_histograms.bins->numpy.array([0, 1, 3, 6, 10])
A:numpy.lib.tests.test_histograms.one_nan->numpy.array([0, 1, np.nan])
A:numpy.lib.tests.test_histograms.all_nan->numpy.array([np.nan, np.nan])
A:numpy.lib.tests.test_histograms.sup->suppress_warnings()
A:numpy.lib.tests.test_histograms.begin->numpy.datetime64('2000-01-01', 'D')
A:numpy.lib.tests.test_histograms.offsets->numpy.array([0, 0, 1, 1, 2, 3, 5, 10, 20])
A:numpy.lib.tests.test_histograms.td->numpy.dtype('timedelta64[D]')
A:numpy.lib.tests.test_histograms.(d_count, d_edge)->histogram(dates, bins=date_bins)
A:numpy.lib.tests.test_histograms.(t_count, t_edge)->histogram(offsets.astype(td), bins=bins.astype(td))
A:numpy.lib.tests.test_histograms.(i_count, i_edge)->histogram(offsets, bins=bins)
A:numpy.lib.tests.test_histograms.(hist, e)->numpy.histogram(np.array([-9e-309], dtype='>f8'), bins=2, range=(-1e-308, -2e-313))
A:numpy.lib.tests.test_histograms.range->numpy.array([0.0, 1.0 - eps], float_large)
A:numpy.lib.tests.test_histograms.(count, x_loc)->numpy.histogram(arr, bins=1, range=range)
A:numpy.lib.tests.test_histograms.edges->histogram_bin_edges(arr, bins='auto', range=(0, 1))
A:numpy.lib.tests.test_histograms.sample->numpy.zeros([100000000, 3])
A:numpy.lib.tests.test_histograms.zbins->numpy.arange(16000)
A:numpy.lib.tests.test_histograms.hist->numpy.histogramdd(sample=sample, bins=(xbins, ybins, zbins))
A:numpy.lib.tests.test_histograms.expected_hist->numpy.array([1, 0])
A:numpy.lib.tests.test_histograms.x1->numpy.linspace(-10, -1, testlen // 5 * 2)
A:numpy.lib.tests.test_histograms.x2->numpy.linspace(1, 10, testlen // 5 * 3)
A:numpy.lib.tests.test_histograms.testdat->numpy.arange(testlen)
A:numpy.lib.tests.test_histograms.novar_dataset->numpy.ones(100)
A:numpy.lib.tests.test_histograms.lim_var_data->numpy.ones(1000)
A:numpy.lib.tests.test_histograms.edges_auto->histogram_bin_edges(lim_var_data, 'auto')
A:numpy.lib.tests.test_histograms.edges_fd->histogram_bin_edges(lim_var_data, 'fd')
A:numpy.lib.tests.test_histograms.edges_sturges->histogram_bin_edges(lim_var_data, 'sturges')
A:numpy.lib.tests.test_histograms.xcenter->numpy.linspace(-10, 10, 50)
A:numpy.lib.tests.test_histograms.outlier_dataset->numpy.hstack((np.linspace(-110, -100, 5), xcenter))
A:numpy.lib.tests.test_histograms.rng->numpy.random.RandomState(seed)
A:numpy.lib.tests.test_histograms.avg->abs(np.mean(ll, axis=0) - 0.5)
A:numpy.lib.tests.test_histograms.x3->numpy.linspace(-100, -50, testlen)
A:numpy.lib.tests.test_histograms.msg->'For the {0} estimator'.format(estimator)
A:numpy.lib.tests.test_histograms.(hist32, edges32)->numpy.histogram(a.astype(np.int32), bins=bins)
A:numpy.lib.tests.test_histograms.(H, edges)->histogramdd(r, b)
A:numpy.lib.tests.test_histograms.answer->numpy.array([[[0, 0], [0, 0], [0, 0]], [[0, 1], [0, 0], [1, 0]], [[0, 1], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]])
A:numpy.lib.tests.test_histograms.Z->numpy.zeros((5, 5, 5))
A:numpy.lib.tests.test_histograms.r->numpy.random.rand(10, 4)
A:numpy.lib.tests.test_histograms.(n_hist, edges)->histogramdd(v, density=True)
A:numpy.lib.tests.test_histograms.(w_hist, edges)->histogramdd(v, weights=np.ones(100, int) * 2)
A:numpy.lib.tests.test_histograms.expected->numpy.array([[1, 0], [0, 1], [0, 1]])
A:numpy.lib.tests.test_histograms.(hist, _)->histogramdd(x, bins=bins)
A:numpy.lib.tests.test_histograms.x_edges->numpy.array([0, 2, 8])
A:numpy.lib.tests.test_histograms.hist_expected->numpy.array([[2.0], [1.0]])
A:numpy.lib.tests.test_histograms.y_edges->numpy.array([0, 6, 8])
A:numpy.lib.tests.test_histograms.relative_areas->numpy.array([[3, 9], [1, 3]])
A:numpy.lib.tests.test_histograms.(hist_dd, edges_dd)->histogramdd((v,), (bins,), density=True)
numpy.lib.tests.test_histograms.TestHistogram
numpy.lib.tests.test_histograms.TestHistogram.do_precision(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_precision_lower_bound(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_precision_upper_bound(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_signed_overflow_bounds(self,dtype)
numpy.lib.tests.test_histograms.TestHistogram.setup_method(self)
numpy.lib.tests.test_histograms.TestHistogram.teardown_method(self)
numpy.lib.tests.test_histograms.TestHistogram.test_arr_weights_mismatch(self)
numpy.lib.tests.test_histograms.TestHistogram.test_big_arrays(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bin_array_dims(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bin_edge_cases(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bool_conversion(self)
numpy.lib.tests.test_histograms.TestHistogram.test_datetime(self)
numpy.lib.tests.test_histograms.TestHistogram.test_density(self)
numpy.lib.tests.test_histograms.TestHistogram.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogram.test_error_binnum_type(self)
numpy.lib.tests.test_histograms.TestHistogram.test_exotic_weights(self)
numpy.lib.tests.test_histograms.TestHistogram.test_f32_rounding(self)
numpy.lib.tests.test_histograms.TestHistogram.test_finite_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_gh_23110(self)
numpy.lib.tests.test_histograms.TestHistogram.test_histogram_bin_edges(self)
numpy.lib.tests.test_histograms.TestHistogram.test_invalid_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_last_bin_inclusive_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_no_side_effects(self)
numpy.lib.tests.test_histograms.TestHistogram.test_object_array_of_0d(self)
numpy.lib.tests.test_histograms.TestHistogram.test_one_bin(self)
numpy.lib.tests.test_histograms.TestHistogram.test_outliers(self)
numpy.lib.tests.test_histograms.TestHistogram.test_precision(self)
numpy.lib.tests.test_histograms.TestHistogram.test_signed_overflow_bounds(self)
numpy.lib.tests.test_histograms.TestHistogram.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogram.test_some_nan_values(self)
numpy.lib.tests.test_histograms.TestHistogram.test_type(self)
numpy.lib.tests.test_histograms.TestHistogram.test_unsigned_monotonicity_check(self)
numpy.lib.tests.test_histograms.TestHistogram.test_weights(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_incorrect_methods(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_limited_variance(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_novariance(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_outlier(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_scott_vs_stone(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_signed_integer_data(self,bins)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_range(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_weighted(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_small(self)
numpy.lib.tests.test_histograms.TestHistogramdd
numpy.lib.tests.test_histograms.TestHistogramdd.test_bins_errors(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_1d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_2d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_edge_dtype(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_equal_edges(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_finite_range(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_identical_samples(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_inf_edges(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_large_integers(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_rightmost_binedge(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_3d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_4d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_weights(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_twodim_base.py----------------------------------------
A:numpy.lib.tests.test_twodim_base.data->numpy.add.outer(data, data)
A:numpy.lib.tests.test_twodim_base.mat_c->eye(4, 3, k=-1)
A:numpy.lib.tests.test_twodim_base.mat_f->eye(4, 3, k=-1, order='F')
A:numpy.lib.tests.test_twodim_base.vals->array(100 * get_mat(5) + 1, order='F', dtype='l')
A:numpy.lib.tests.test_twodim_base.b->numpy.arange(1, 21).reshape(4, 5)
A:numpy.lib.tests.test_twodim_base.c->array([1.0 + 1j, 1.0 - 1j])
A:numpy.lib.tests.test_twodim_base.a->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
A:numpy.lib.tests.test_twodim_base.x->array([0, 0.09207008, 0.64575234, 0.12875982, 0.47390599, 0.59944483, 1])
A:numpy.lib.tests.test_twodim_base.y->array([0, 0.14344267, 0.48988575, 0.30558665, 0.44700682, 0.15886423, 1])
A:numpy.lib.tests.test_twodim_base.xedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.yedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.answer->array([[1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])
A:numpy.lib.tests.test_twodim_base.(H, xedges, yedges)->histogram2d(list(range(10)), list(range(10)))
A:numpy.lib.tests.test_twodim_base.(H, xed, yed)->histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))
A:numpy.lib.tests.test_twodim_base.(a, edge1, edge2)->histogram2d([], [], bins=4)
A:numpy.lib.tests.test_twodim_base.(H, xe, ye)->histogram2d(x, y, (4, edges))
A:numpy.lib.tests.test_twodim_base.s_d->ShouldDispatch()
A:numpy.lib.tests.test_twodim_base.r->histogram2d(xy, xy, weights=s_d)
A:numpy.lib.tests.test_twodim_base.out->array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
A:numpy.lib.tests.test_twodim_base.a_tril_desired->numpy.array([[[1, 0], [1, 1]], [[1, 0], [1, 0]], [[1, 0], [0, 0]]], dtype=dtype)
A:numpy.lib.tests.test_twodim_base.a_triu_desired->numpy.array([[[1, 1], [0, 1]], [[1, 1], [0, 0]], [[1, 1], [0, 0]]], dtype=dtype)
A:numpy.lib.tests.test_twodim_base.a_triu_observed->numpy.triu(a)
A:numpy.lib.tests.test_twodim_base.a_tril_observed->numpy.tril(a)
A:numpy.lib.tests.test_twodim_base.arr->numpy.zeros((3, 3), dtype='f4,f4')
A:numpy.lib.tests.test_twodim_base.out_tril->numpy.array([[1, 0, 0], [1, 1, 0], [np.inf, 1, 1]])
A:numpy.lib.tests.test_twodim_base.iu->mask_indices(3, np.triu)
A:numpy.lib.tests.test_twodim_base.iu1->triu_indices(4)
A:numpy.lib.tests.test_twodim_base.il1->tril_indices(4)
A:numpy.lib.tests.test_twodim_base.il2->tril_indices(4, k=2)
A:numpy.lib.tests.test_twodim_base.il3->tril_indices(4, m=5)
A:numpy.lib.tests.test_twodim_base.il4->tril_indices(4, k=2, m=5)
A:numpy.lib.tests.test_twodim_base.iu2->triu_indices(4, k=2)
A:numpy.lib.tests.test_twodim_base.iu3->triu_indices(4, m=5)
A:numpy.lib.tests.test_twodim_base.iu4->triu_indices(4, k=2, m=5)
A:numpy.lib.tests.test_twodim_base.v->vander(c, N=3)
A:numpy.lib.tests.test_twodim_base.powers->numpy.array([[0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [16, -8, 4, -2, 1], [81, 27, 9, 3, 1]])
A:numpy.lib.tests.test_twodim_base.expected->numpy.array([[2j, 1 + 1j, 1], [-2j, 1 - 1j, 1]])
numpy.lib.tests.test_twodim_base.TestDiag
numpy.lib.tests.test_twodim_base.TestDiag.test_diag_bounds(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_failure(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_fortran_order(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_matrix(self,vals=None)
numpy.lib.tests.test_twodim_base.TestDiag.test_vector(self)
numpy.lib.tests.test_twodim_base.TestEye
numpy.lib.tests.test_twodim_base.TestEye.test_2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_basic(self)
numpy.lib.tests.test_twodim_base.TestEye.test_bool(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_eye_bounds(self)
numpy.lib.tests.test_twodim_base.TestEye.test_order(self)
numpy.lib.tests.test_twodim_base.TestEye.test_strings(self)
numpy.lib.tests.test_twodim_base.TestEye.test_uint64(self)
numpy.lib.tests.test_twodim_base.TestFliplr
numpy.lib.tests.test_twodim_base.TestFliplr.test_basic(self)
numpy.lib.tests.test_twodim_base.TestFlipud
numpy.lib.tests.test_twodim_base.TestFlipud.test_basic(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_all_outliers(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_asym(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_bad_length(self,x_len,y_len)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_binparameter_combination(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_density(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_dispatch(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_empty(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_simple(self)
numpy.lib.tests.test_twodim_base.TestTri
numpy.lib.tests.test_twodim_base.TestTri.test_dtype(self)
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.TestTriuIndices
numpy.lib.tests.test_twodim_base.TestTriuIndices.test_triu_indices(self)
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.TestVander
numpy.lib.tests.test_twodim_base.TestVander.test_basic(self)
numpy.lib.tests.test_twodim_base.TestVander.test_dtypes(self)
numpy.lib.tests.test_twodim_base.get_mat(n)
numpy.lib.tests.test_twodim_base.test_mask_indices()
numpy.lib.tests.test_twodim_base.test_tril_indices()
numpy.lib.tests.test_twodim_base.test_tril_triu_dtype()
numpy.lib.tests.test_twodim_base.test_tril_triu_ndim2()
numpy.lib.tests.test_twodim_base.test_tril_triu_ndim3()
numpy.lib.tests.test_twodim_base.test_tril_triu_with_inf()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/lib/tests/test_mixins.py----------------------------------------
A:numpy.lib.tests.test_mixins.self.value->numpy.asarray(value)
A:numpy.lib.tests.test_mixins.out->kwargs.get('out', ())
A:numpy.lib.tests.test_mixins.inputs->tuple((x.value if isinstance(x, ArrayLike) else x for x in inputs))
A:numpy.lib.tests.test_mixins.kwargs['out']->tuple((x.value if isinstance(x, ArrayLike) else x for x in out))
A:numpy.lib.tests.test_mixins.result->getattr(ufunc, method)(*inputs, **kwargs)
A:numpy.lib.tests.test_mixins.array_like->ArrayLike(array)
A:numpy.lib.tests.test_mixins.array->ArrayLike(np.array([1, 2, 3, 4]))
A:numpy.lib.tests.test_mixins.opt_out->OptOut()
A:numpy.lib.tests.test_mixins.x->ArrayLike(0)
A:numpy.lib.tests.test_mixins.y->SubArrayLike(1)
A:numpy.lib.tests.test_mixins.obj->object()
A:numpy.lib.tests.test_mixins.expected->ArrayLike(np.float64(5))
A:numpy.lib.tests.test_mixins.actual->op(2, ArrayLike(1))
A:numpy.lib.tests.test_mixins.err_msg->'failed for operator {}'.format(op)
A:numpy.lib.tests.test_mixins.(mantissa, exponent)->numpy.frexp(2 ** (-3))
numpy.lib.tests.test_mixins.ArrayLike(self,value)
numpy.lib.tests.test_mixins.ArrayLike.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.lib.tests.test_mixins.ArrayLike.__init__(self,value)
numpy.lib.tests.test_mixins.ArrayLike.__repr__(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_forward_binary_methods(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_inplace(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_matmul(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_object(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_reflected_binary_methods(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_at(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_two_outputs(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_unary_methods(self)
numpy.lib.tests.test_mixins._assert_equal_type_and_value(result,expected,err_msg=None)
numpy.lib.tests.test_mixins.wrap_array_like(result)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/rec/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/rec/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_nested_sequence.py----------------------------------------
A:numpy._typing._nested_sequence._T_co->TypeVar('_T_co', covariant=True)
numpy._typing._NestedSequence(Protocol[_T_co])
numpy._typing._NestedSequence.__contains__(self,x:object,/)->bool
numpy._typing._NestedSequence.__getitem__(self,index:int,/)->_T_co | _NestedSequence[_T_co]
numpy._typing._NestedSequence.__iter__(self,/)->Iterator[_T_co | _NestedSequence[_T_co]]
numpy._typing._NestedSequence.__len__(self,/)->int
numpy._typing._NestedSequence.__reversed__(self,/)->Iterator[_T_co | _NestedSequence[_T_co]]
numpy._typing._NestedSequence.count(self,value:Any,/)->int
numpy._typing._NestedSequence.index(self,value:Any,/)->int
numpy._typing._nested_sequence._NestedSequence(Protocol[_T_co])
numpy._typing._nested_sequence._NestedSequence.__contains__(self,x:object,/)->bool
numpy._typing._nested_sequence._NestedSequence.__getitem__(self,index:int,/)->_T_co | _NestedSequence[_T_co]
numpy._typing._nested_sequence._NestedSequence.__iter__(self,/)->Iterator[_T_co | _NestedSequence[_T_co]]
numpy._typing._nested_sequence._NestedSequence.__len__(self,/)->int
numpy._typing._nested_sequence._NestedSequence.__reversed__(self,/)->Iterator[_T_co | _NestedSequence[_T_co]]
numpy._typing._nested_sequence._NestedSequence.count(self,value:Any,/)->int
numpy._typing._nested_sequence._NestedSequence.index(self,value:Any,/)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_char_codes.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/__init__.py----------------------------------------
numpy._typing.__init__.NBitBase
numpy._typing.__init__.NBitBase.__init_subclass__(cls)->None
numpy._typing.__init__._128Bit(_256Bit)
numpy._typing.__init__._16Bit(_32Bit)
numpy._typing.__init__._256Bit(NBitBase)
numpy._typing.__init__._32Bit(_64Bit)
numpy._typing.__init__._64Bit(_80Bit)
numpy._typing.__init__._80Bit(_96Bit)
numpy._typing.__init__._8Bit(_16Bit)
numpy._typing.__init__._96Bit(_128Bit)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_extended_precision.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_scalars.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_callable.pyi----------------------------------------
numpy._typing._callable._BoolBitOp(self,other:_IntType,/)
numpy._typing._callable._BoolBitOp.__call__(self,other:_IntType,/)
numpy._typing._callable._BoolDivMod(self,other:_FloatType,/)
numpy._typing._callable._BoolDivMod.__call__(self,other:_FloatType,/)
numpy._typing._callable._BoolMod(self,other:_FloatType,/)
numpy._typing._callable._BoolMod.__call__(self,other:_FloatType,/)
numpy._typing._callable._BoolOp(self,other:_NumberType,/)
numpy._typing._callable._BoolOp.__call__(self,other:_NumberType,/)
numpy._typing._callable._BoolSub(self,other:_NumberType,/)
numpy._typing._callable._BoolSub.__call__(self,other:_NumberType,/)
numpy._typing._callable._BoolTrueDiv(self,other:_NumberType,/)
numpy._typing._callable._BoolTrueDiv.__call__(self,other:_NumberType,/)
numpy._typing._callable._ComparisonOp(self,other:_SupportsLT|_SupportsGT|_NestedSequence[_SupportsLT|_SupportsGT],/)
numpy._typing._callable._ComparisonOp.__call__(self,other:_SupportsLT|_SupportsGT|_NestedSequence[_SupportsLT|_SupportsGT],/)
numpy._typing._callable._ComplexOp(self,other:integer[_NBit2]|floating[_NBit2]|complexfloating[_NBit2,_NBit2],/)
numpy._typing._callable._ComplexOp.__call__(self,other:integer[_NBit2]|floating[_NBit2]|complexfloating[_NBit2,_NBit2],/)
numpy._typing._callable._FloatDivMod(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._FloatDivMod.__call__(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._FloatMod(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._FloatMod.__call__(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._FloatOp(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._FloatOp.__call__(self,other:integer[_NBit2]|floating[_NBit2],/)
numpy._typing._callable._IntTrueDiv(self,other:integer[_NBit2],/)
numpy._typing._callable._IntTrueDiv.__call__(self,other:integer[_NBit2],/)
numpy._typing._callable._NumberOp(self,other:_NumberLike_co,/)
numpy._typing._callable._NumberOp.__call__(self,other:_NumberLike_co,/)
numpy._typing._callable._SignedIntBitOp(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntBitOp.__call__(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntDivMod(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntDivMod.__call__(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntMod(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntMod.__call__(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntOp(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SignedIntOp.__call__(self,other:signedinteger[_NBit2],/)
numpy._typing._callable._SupportsGT(Protocol)
numpy._typing._callable._SupportsGT.__gt__(self,other:Any,/)->object
numpy._typing._callable._SupportsLT(Protocol)
numpy._typing._callable._SupportsLT.__lt__(self,other:Any,/)->object
numpy._typing._callable._TD64Div(self,other:_FloatLike_co,/)
numpy._typing._callable._TD64Div.__call__(self,other:_FloatLike_co,/)
numpy._typing._callable._UnsignedIntBitOp(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntBitOp.__call__(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntDivMod(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntDivMod.__call__(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntMod(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntMod.__call__(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntOp(self,other:unsignedinteger[_NBit2],/)
numpy._typing._callable._UnsignedIntOp.__call__(self,other:unsignedinteger[_NBit2],/)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_add_docstring.py----------------------------------------
A:numpy._typing._add_docstring.s->'\n'.join(new_lines)
A:numpy._typing._add_docstring.lines->'\n'.join(new_lines).split('\n')
A:numpy._typing._add_docstring.m->re.match('^(\\s+)[-=]+\\s*$', line)
A:numpy._typing._add_docstring.prev->textwrap.dedent(new_lines.pop())
A:numpy._typing._add_docstring._docstrings->_parse_docstrings()
numpy._typing._add_docstring._parse_docstrings()->str
numpy._typing._add_docstring.add_newdoc(name:str,value:str,doc:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_array_like.py----------------------------------------
A:numpy._typing._array_like._T->TypeVar('_T')
A:numpy._typing._array_like._ScalarType->TypeVar('_ScalarType', bound=generic)
A:numpy._typing._array_like._ScalarType_co->TypeVar('_ScalarType_co', bound=generic, covariant=True)
A:numpy._typing._array_like._DType->TypeVar('_DType', bound=dtype[Any])
A:numpy._typing._array_like._DType_co->TypeVar('_DType_co', covariant=True, bound=dtype[Any])
numpy._typing._SupportsArray(Protocol[_DType_co])
numpy._typing._SupportsArray.__array__(self)->ndarray[Any, _DType_co]
numpy._typing._SupportsArrayFunc(Protocol)
numpy._typing._SupportsArrayFunc.__array_function__(self,func:Callable[...,Any],types:Collection[type[Any]],args:tuple[Any,...],kwargs:dict[str,Any])->object
numpy._typing._UnknownType
numpy._typing._array_like._SupportsArray(Protocol[_DType_co])
numpy._typing._array_like._SupportsArray.__array__(self)->ndarray[Any, _DType_co]
numpy._typing._array_like._SupportsArrayFunc(Protocol)
numpy._typing._array_like._SupportsArrayFunc.__array_function__(self,func:Callable[...,Any],types:Collection[type[Any]],args:tuple[Any,...],kwargs:dict[str,Any])->object
numpy._typing._array_like._UnknownType


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_shape.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_dtype_like.py----------------------------------------
A:numpy._typing._dtype_like._SCT->TypeVar('_SCT', bound=np.generic)
A:numpy._typing._dtype_like._DType_co->TypeVar('_DType_co', covariant=True, bound=np.dtype[Any])
numpy._typing._SupportsDType(Protocol[_DType_co])
numpy._typing._SupportsDType.dtype(self)->_DType_co
numpy._typing._dtype_like._DTypeDict(_DTypeDictBase,total=False)
numpy._typing._dtype_like._DTypeDictBase(TypedDict)
numpy._typing._dtype_like._SupportsDType(Protocol[_DType_co])
numpy._typing._dtype_like._SupportsDType.dtype(self)->_DType_co


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_ufunc.pyi----------------------------------------
numpy._typing._GUFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:NDArray[Any]|tuple[NDArray[Any]],*,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...,axes:list[_2Tuple[SupportsIndex]]=...)
numpy._typing._GUFunc_Nin2_Nout1.__name__(self)->_NameType
numpy._typing._GUFunc_Nin2_Nout1.accumulate(self)->None
numpy._typing._GUFunc_Nin2_Nout1.at(self)->None
numpy._typing._GUFunc_Nin2_Nout1.identity(self)->_IDType
numpy._typing._GUFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy._typing._GUFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy._typing._GUFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy._typing._GUFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy._typing._GUFunc_Nin2_Nout1.outer(self)->None
numpy._typing._GUFunc_Nin2_Nout1.reduce(self)->None
numpy._typing._GUFunc_Nin2_Nout1.reduceat(self)->None
numpy._typing._GUFunc_Nin2_Nout1.signature(self)->Literal['(n?,k),(k,m?)->(n?,m?)']
numpy._typing._UFunc_Nin1_Nout1(self,__x1:_SupportsArrayUFunc,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_2Tuple[None|str]=...)
numpy._typing._UFunc_Nin1_Nout1.__name__(self)->_NameType
numpy._typing._UFunc_Nin1_Nout1.accumulate(self)->None
numpy._typing._UFunc_Nin1_Nout1.at(self,a:_SupportsArrayUFunc,indices:_ArrayLikeInt_co,/)->None
numpy._typing._UFunc_Nin1_Nout1.identity(self)->_IDType
numpy._typing._UFunc_Nin1_Nout1.nargs(self)->Literal[2]
numpy._typing._UFunc_Nin1_Nout1.nin(self)->Literal[1]
numpy._typing._UFunc_Nin1_Nout1.nout(self)->Literal[1]
numpy._typing._UFunc_Nin1_Nout1.ntypes(self)->_NTypes
numpy._typing._UFunc_Nin1_Nout1.outer(self)->None
numpy._typing._UFunc_Nin1_Nout1.reduce(self)->None
numpy._typing._UFunc_Nin1_Nout1.reduceat(self)->None
numpy._typing._UFunc_Nin1_Nout1.signature(self)->None
numpy._typing._UFunc_Nin1_Nout2(self,__x1:_SupportsArrayUFunc,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._UFunc_Nin1_Nout2.__name__(self)->_NameType
numpy._typing._UFunc_Nin1_Nout2.accumulate(self)->None
numpy._typing._UFunc_Nin1_Nout2.at(self)->None
numpy._typing._UFunc_Nin1_Nout2.identity(self)->_IDType
numpy._typing._UFunc_Nin1_Nout2.nargs(self)->Literal[3]
numpy._typing._UFunc_Nin1_Nout2.nin(self)->Literal[1]
numpy._typing._UFunc_Nin1_Nout2.nout(self)->Literal[2]
numpy._typing._UFunc_Nin1_Nout2.ntypes(self)->_NTypes
numpy._typing._UFunc_Nin1_Nout2.outer(self)->None
numpy._typing._UFunc_Nin1_Nout2.reduce(self)->None
numpy._typing._UFunc_Nin1_Nout2.reduceat(self)->None
numpy._typing._UFunc_Nin1_Nout2.signature(self)->None
numpy._typing._UFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._UFunc_Nin2_Nout1.__name__(self)->_NameType
numpy._typing._UFunc_Nin2_Nout1.accumulate(self,array:ArrayLike,axis:SupportsIndex=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy._typing._UFunc_Nin2_Nout1.at(self,a:NDArray[Any],indices:_ArrayLikeInt_co,b:ArrayLike,/)->None
numpy._typing._UFunc_Nin2_Nout1.identity(self)->_IDType
numpy._typing._UFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy._typing._UFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy._typing._UFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy._typing._UFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy._typing._UFunc_Nin2_Nout1.outer(self,A:ArrayLike,B:ArrayLike,/,*,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)->NDArray[Any]
numpy._typing._UFunc_Nin2_Nout1.outer(self,A:_ScalarLike_co,B:_ScalarLike_co,/,*,out:None=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)->Any
numpy._typing._UFunc_Nin2_Nout1.reduce(self,array:ArrayLike,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...,keepdims:bool=...,initial:Any=...,where:_ArrayLikeBool_co=...)->Any
numpy._typing._UFunc_Nin2_Nout1.reduceat(self,array:ArrayLike,indices:_ArrayLikeInt_co,axis:SupportsIndex=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy._typing._UFunc_Nin2_Nout1.signature(self)->None
numpy._typing._UFunc_Nin2_Nout2(self,__x1:ArrayLike,__x2:ArrayLike,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_4Tuple[None|str]=...)
numpy._typing._UFunc_Nin2_Nout2.__name__(self)->_NameType
numpy._typing._UFunc_Nin2_Nout2.accumulate(self)->None
numpy._typing._UFunc_Nin2_Nout2.at(self)->None
numpy._typing._UFunc_Nin2_Nout2.identity(self)->_IDType
numpy._typing._UFunc_Nin2_Nout2.nargs(self)->Literal[4]
numpy._typing._UFunc_Nin2_Nout2.nin(self)->Literal[2]
numpy._typing._UFunc_Nin2_Nout2.nout(self)->Literal[2]
numpy._typing._UFunc_Nin2_Nout2.ntypes(self)->_NTypes
numpy._typing._UFunc_Nin2_Nout2.outer(self)->None
numpy._typing._UFunc_Nin2_Nout2.reduce(self)->None
numpy._typing._UFunc_Nin2_Nout2.reduceat(self)->None
numpy._typing._UFunc_Nin2_Nout2.signature(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:NDArray[Any]|tuple[NDArray[Any]],*,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...,axes:list[_2Tuple[SupportsIndex]]=...)
numpy._typing._ufunc._GUFunc_Nin2_Nout1.__call__(self,__x1:ArrayLike,__x2:ArrayLike,out:NDArray[Any]|tuple[NDArray[Any]],*,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...,axes:list[_2Tuple[SupportsIndex]]=...)
numpy._typing._ufunc._GUFunc_Nin2_Nout1.__name__(self)->_NameType
numpy._typing._ufunc._GUFunc_Nin2_Nout1.accumulate(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1.at(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1.identity(self)->_IDType
numpy._typing._ufunc._GUFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy._typing._ufunc._GUFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy._typing._ufunc._GUFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy._typing._ufunc._GUFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy._typing._ufunc._GUFunc_Nin2_Nout1.outer(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1.reduce(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1.reduceat(self)->None
numpy._typing._ufunc._GUFunc_Nin2_Nout1.signature(self)->Literal['(n?,k),(k,m?)->(n?,m?)']
numpy._typing._ufunc._SupportsArrayUFunc(Protocol)
numpy._typing._ufunc._SupportsArrayUFunc.__array_ufunc__(self,ufunc:ufunc,method:Literal['__call__','reduce','reduceat','accumulate','outer','at'],*inputs:Any,**kwargs:Any)->Any
numpy._typing._ufunc._UFunc_Nin1_Nout1(self,__x1:_SupportsArrayUFunc,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_2Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin1_Nout1.__call__(self,__x1:_SupportsArrayUFunc,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_2Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin1_Nout1.__name__(self)->_NameType
numpy._typing._ufunc._UFunc_Nin1_Nout1.accumulate(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout1.at(self,a:_SupportsArrayUFunc,indices:_ArrayLikeInt_co,/)->None
numpy._typing._ufunc._UFunc_Nin1_Nout1.identity(self)->_IDType
numpy._typing._ufunc._UFunc_Nin1_Nout1.nargs(self)->Literal[2]
numpy._typing._ufunc._UFunc_Nin1_Nout1.nin(self)->Literal[1]
numpy._typing._ufunc._UFunc_Nin1_Nout1.nout(self)->Literal[1]
numpy._typing._ufunc._UFunc_Nin1_Nout1.ntypes(self)->_NTypes
numpy._typing._ufunc._UFunc_Nin1_Nout1.outer(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout1.reduce(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout1.reduceat(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout1.signature(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2(self,__x1:_SupportsArrayUFunc,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin1_Nout2.__call__(self,__x1:_SupportsArrayUFunc,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin1_Nout2.__name__(self)->_NameType
numpy._typing._ufunc._UFunc_Nin1_Nout2.accumulate(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2.at(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2.identity(self)->_IDType
numpy._typing._ufunc._UFunc_Nin1_Nout2.nargs(self)->Literal[3]
numpy._typing._ufunc._UFunc_Nin1_Nout2.nin(self)->Literal[1]
numpy._typing._ufunc._UFunc_Nin1_Nout2.nout(self)->Literal[2]
numpy._typing._ufunc._UFunc_Nin1_Nout2.ntypes(self)->_NTypes
numpy._typing._ufunc._UFunc_Nin1_Nout2.outer(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2.reduce(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2.reduceat(self)->None
numpy._typing._ufunc._UFunc_Nin1_Nout2.signature(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin2_Nout1.__call__(self,__x1:ArrayLike,__x2:ArrayLike,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,*,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin2_Nout1.__name__(self)->_NameType
numpy._typing._ufunc._UFunc_Nin2_Nout1.accumulate(self,array:ArrayLike,axis:SupportsIndex=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy._typing._ufunc._UFunc_Nin2_Nout1.at(self,a:NDArray[Any],indices:_ArrayLikeInt_co,b:ArrayLike,/)->None
numpy._typing._ufunc._UFunc_Nin2_Nout1.identity(self)->_IDType
numpy._typing._ufunc._UFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy._typing._ufunc._UFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy._typing._ufunc._UFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy._typing._ufunc._UFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy._typing._ufunc._UFunc_Nin2_Nout1.outer(self,A:ArrayLike,B:ArrayLike,/,*,out:None|NDArray[Any]|tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)->NDArray[Any]
numpy._typing._ufunc._UFunc_Nin2_Nout1.outer(self,A:_ScalarLike_co,B:_ScalarLike_co,/,*,out:None=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_3Tuple[None|str]=...)->Any
numpy._typing._ufunc._UFunc_Nin2_Nout1.reduce(self,array:ArrayLike,axis:None|_ShapeLike=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...,keepdims:bool=...,initial:Any=...,where:_ArrayLikeBool_co=...)->Any
numpy._typing._ufunc._UFunc_Nin2_Nout1.reduceat(self,array:ArrayLike,indices:_ArrayLikeInt_co,axis:SupportsIndex=...,dtype:DTypeLike=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy._typing._ufunc._UFunc_Nin2_Nout1.signature(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2(self,__x1:ArrayLike,__x2:ArrayLike,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_4Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin2_Nout2.__call__(self,__x1:ArrayLike,__x2:ArrayLike,__out1:None|NDArray[Any]=...,__out2:None|NDArray[Any]=...,*,out:_2Tuple[NDArray[Any]]=...,where:None|_ArrayLikeBool_co=...,casting:_CastingKind=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:str|_4Tuple[None|str]=...)
numpy._typing._ufunc._UFunc_Nin2_Nout2.__name__(self)->_NameType
numpy._typing._ufunc._UFunc_Nin2_Nout2.accumulate(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2.at(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2.identity(self)->_IDType
numpy._typing._ufunc._UFunc_Nin2_Nout2.nargs(self)->Literal[4]
numpy._typing._ufunc._UFunc_Nin2_Nout2.nin(self)->Literal[2]
numpy._typing._ufunc._UFunc_Nin2_Nout2.nout(self)->Literal[2]
numpy._typing._ufunc._UFunc_Nin2_Nout2.ntypes(self)->_NTypes
numpy._typing._ufunc._UFunc_Nin2_Nout2.outer(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2.reduce(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2.reduceat(self)->None
numpy._typing._ufunc._UFunc_Nin2_Nout2.signature(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_typing/_nbit.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/__init__.py----------------------------------------
A:numpy.linalg.__init__.__all__->_linalg.__all__.copy()
A:numpy.linalg.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/__init__.pyi----------------------------------------
numpy.linalg.__init__.LinAlgError(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/_linalg.py----------------------------------------
A:numpy.linalg._linalg.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.linalg')
A:numpy.linalg._linalg.new->asarray(a)
A:numpy.linalg._linalg.wrap->getattr(a, '__array_wrap__', new.__array_wrap__)
A:numpy.linalg._linalg.rt->_realType(type_, default=None)
A:numpy.linalg._linalg.(a, wrap)->_makearray(a)
A:numpy.linalg._linalg.b->zeros(b.shape[:-2] + (m, n_rhs + 1), dtype=b.dtype)
A:numpy.linalg._linalg.allaxes->list(range(0, an))
A:numpy.linalg._linalg.a->asarray(a)
A:numpy.linalg._linalg.res->res.reshape(tuple(shape)).reshape(tuple(shape))
A:numpy.linalg._linalg.(a, _)->_makearray(a)
A:numpy.linalg._linalg.(b, wrap)->_makearray(b)
A:numpy.linalg._linalg.(t, result_t)->_commonType(a, b)
A:numpy.linalg._linalg.r->r.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.ia->inv(a)
A:numpy.linalg._linalg.ainv->numpy.linalg._umath_linalg.inv(a, signature=signature)
A:numpy.linalg._linalg.n->len(arrays)
A:numpy.linalg._linalg.a[...]->eye(a.shape[-2], dtype=a.dtype)
A:numpy.linalg._linalg.(n, bit)->divmod(n, 2)
A:numpy.linalg._linalg.x1->asanyarray(x1)
A:numpy.linalg._linalg.x2->asanyarray(x2)
A:numpy.linalg._linalg.msg->''.join(("The 'full' option is deprecated in favor of 'reduced'.\n", 'For backward compatibility let mode default.'))
A:numpy.linalg._linalg.mn->min(m, n)
A:numpy.linalg._linalg.tau->tau.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.q->q.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.w->w.astype(_realType(result_t), copy=False).astype(_realType(result_t), copy=False)
A:numpy.linalg._linalg.result_t->_complexType(result_t)
A:numpy.linalg._linalg.UPLO->UPLO.upper().upper()
A:numpy.linalg._linalg.(w, vt)->gufunc(a, signature=signature)
A:numpy.linalg._linalg.vt->transpose(u * sgn[..., None, :]).conjugate()
A:numpy.linalg._linalg.(s, u)->eigh(a)
A:numpy.linalg._linalg.sgn->numpy.take_along_axis(sgn, sidx, axis=-1)
A:numpy.linalg._linalg.s->empty((n, n), dtype=intp)
A:numpy.linalg._linalg.u->u.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.(u, s, vh)->gufunc(a, signature=signature)
A:numpy.linalg._linalg.vh->vh.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.x->_core_transpose(x, newshape).reshape((prod([x.shape[i] for i in axis], dtype=int), *[x.shape[i] for i in rest]))
A:numpy.linalg._linalg.invx->numpy.linalg._umath_linalg.inv(x, signature=signature)
A:numpy.linalg._linalg.nan_mask->isnan(r)
A:numpy.linalg._linalg.A->asarray(A)
A:numpy.linalg._linalg.S->svd(A, compute_uv=False, hermitian=hermitian)
A:numpy.linalg._linalg.rcond->asarray(rcond)
A:numpy.linalg._linalg.(u, s, vt)->svd(a, full_matrices=False, hermitian=hermitian)
A:numpy.linalg._linalg.real_t->_realType(result_t)
A:numpy.linalg._linalg.(sign, logdet)->numpy.linalg._umath_linalg.slogdet(a, signature=signature)
A:numpy.linalg._linalg.sign->numpy._core.sign.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg._linalg.logdet->logdet.astype(real_t, copy=False).astype(real_t, copy=False)
A:numpy.linalg._linalg.result_real_t->_realType(result_t)
A:numpy.linalg._linalg.(x, resids, rank, s)->gufunc(a, b, rcond, signature=signature)
A:numpy.linalg._linalg.resids->resids.astype(result_real_t, copy=False).astype(result_real_t, copy=False)
A:numpy.linalg._linalg.y->moveaxis(x, (row_axis, col_axis), (-2, -1))
A:numpy.linalg._linalg.result->_multi_dot(arrays, order, 0, n - 1, out=out)
A:numpy.linalg._linalg.sqnorm->_core_transpose(x, newshape).reshape((prod([x.shape[i] for i in axis], dtype=int), *[x.shape[i] for i in rest])).dot(x)
A:numpy.linalg._linalg.ret->ret.reshape(ret_shape).reshape(ret_shape)
A:numpy.linalg._linalg.axis->int(axis)
A:numpy.linalg._linalg.absx->abs(x)
A:numpy.linalg._linalg.row_axis->normalize_axis_index(row_axis, nd)
A:numpy.linalg._linalg.col_axis->normalize_axis_index(col_axis, nd)
A:numpy.linalg._linalg.ret_shape->list(x.shape)
A:numpy.linalg._linalg.arrays[0]->atleast_2d(arrays[0])
A:numpy.linalg._linalg.order->_multi_dot_matrix_chain_order(arrays)
A:numpy.linalg._linalg.m->zeros((n, n), dtype=double)
A:numpy.linalg._linalg.shape->list(x.shape)
A:numpy.linalg._linalg.normalized_axis->normalize_axis_tuple(axis, x.ndim)
A:numpy.linalg._linalg.rest->tuple((i for i in range(x.ndim) if i not in normalized_axis))
A:numpy.linalg._linalg._axis->normalize_axis_tuple(range(len(shape)) if axis is None else axis, len(shape))
numpy.linalg.EigResult(NamedTuple)
numpy.linalg.EighResult(NamedTuple)
numpy.linalg.LinAlgError(ValueError)
numpy.linalg.QRResult(NamedTuple)
numpy.linalg.SVDResult(NamedTuple)
numpy.linalg.SlogdetResult(NamedTuple)
numpy.linalg._assert_2d(*arrays)
numpy.linalg._assert_finite(*arrays)
numpy.linalg._assert_stacked_2d(*arrays)
numpy.linalg._assert_stacked_square(*arrays)
numpy.linalg._cholesky_dispatcher(a,/,*,upper=None)
numpy.linalg._commonType(*arrays)
numpy.linalg._complexType(t,default=cdouble)
numpy.linalg._cond_dispatcher(x,p=None)
numpy.linalg._convertarray(a)
numpy.linalg._cross_dispatcher(x1,x2,/,*,axis=None)
numpy.linalg._diagonal_dispatcher(x,/,*,offset=None)
numpy.linalg._eigvalsh_dispatcher(a,UPLO=None)
numpy.linalg._is_empty_2d(arr)
numpy.linalg._linalg.EigResult(NamedTuple)
numpy.linalg._linalg.EighResult(NamedTuple)
numpy.linalg._linalg.LinAlgError(ValueError)
numpy.linalg._linalg.QRResult(NamedTuple)
numpy.linalg._linalg.SVDResult(NamedTuple)
numpy.linalg._linalg.SlogdetResult(NamedTuple)
numpy.linalg._linalg._assert_2d(*arrays)
numpy.linalg._linalg._assert_finite(*arrays)
numpy.linalg._linalg._assert_stacked_2d(*arrays)
numpy.linalg._linalg._assert_stacked_square(*arrays)
numpy.linalg._linalg._cholesky_dispatcher(a,/,*,upper=None)
numpy.linalg._linalg._commonType(*arrays)
numpy.linalg._linalg._complexType(t,default=cdouble)
numpy.linalg._linalg._cond_dispatcher(x,p=None)
numpy.linalg._linalg._convertarray(a)
numpy.linalg._linalg._cross_dispatcher(x1,x2,/,*,axis=None)
numpy.linalg._linalg._diagonal_dispatcher(x,/,*,offset=None)
numpy.linalg._linalg._eigvalsh_dispatcher(a,UPLO=None)
numpy.linalg._linalg._is_empty_2d(arr)
numpy.linalg._linalg._lstsq_dispatcher(a,b,rcond=None)
numpy.linalg._linalg._makearray(a)
numpy.linalg._linalg._matmul_dispatcher(x1,x2,/)
numpy.linalg._linalg._matrix_norm_dispatcher(x,/,*,keepdims=None,ord=None)
numpy.linalg._linalg._matrix_power_dispatcher(a,n)
numpy.linalg._linalg._matrix_rank_dispatcher(A,tol=None,hermitian=None,*,rtol=None)
numpy.linalg._linalg._matrix_transpose_dispatcher(x)
numpy.linalg._linalg._multi_dot(arrays,order,i,j,out=None)
numpy.linalg._linalg._multi_dot_matrix_chain_order(arrays,return_costs=False)
numpy.linalg._linalg._multi_dot_three(A,B,C,out=None)
numpy.linalg._linalg._multi_svd_norm(x,row_axis,col_axis,op)
numpy.linalg._linalg._multidot_dispatcher(arrays,*,out=None)
numpy.linalg._linalg._norm_dispatcher(x,ord=None,axis=None,keepdims=None)
numpy.linalg._linalg._outer_dispatcher(x1,x2)
numpy.linalg._linalg._pinv_dispatcher(a,rcond=None,hermitian=None,*,rtol=None)
numpy.linalg._linalg._qr_dispatcher(a,mode=None)
numpy.linalg._linalg._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy.linalg._linalg._raise_linalgerror_lstsq(err,flag)
numpy.linalg._linalg._raise_linalgerror_nonposdef(err,flag)
numpy.linalg._linalg._raise_linalgerror_qr(err,flag)
numpy.linalg._linalg._raise_linalgerror_singular(err,flag)
numpy.linalg._linalg._raise_linalgerror_svd_nonconvergence(err,flag)
numpy.linalg._linalg._realType(t,default=double)
numpy.linalg._linalg._solve_dispatcher(a,b)
numpy.linalg._linalg._svd_dispatcher(a,full_matrices=None,compute_uv=None,hermitian=None)
numpy.linalg._linalg._svdvals_dispatcher(x)
numpy.linalg._linalg._tensordot_dispatcher(x1,x2,/,*,axes=None)
numpy.linalg._linalg._tensorinv_dispatcher(a,ind=None)
numpy.linalg._linalg._tensorsolve_dispatcher(a,b,axes=None)
numpy.linalg._linalg._to_native_byte_order(*arrays)
numpy.linalg._linalg._trace_dispatcher(x,/,*,offset=None,dtype=None)
numpy.linalg._linalg._unary_dispatcher(a)
numpy.linalg._linalg._vecdot_dispatcher(x1,x2,/,*,axis=None)
numpy.linalg._linalg._vector_norm_dispatcher(x,/,*,axis=None,keepdims=None,ord=None)
numpy.linalg._linalg.cholesky(a,/,*,upper=False)
numpy.linalg._linalg.cond(x,p=None)
numpy.linalg._linalg.cross(x1,x2,/,*,axis=-1)
numpy.linalg._linalg.det(a)
numpy.linalg._linalg.diagonal(x,/,*,offset=0)
numpy.linalg._linalg.eig(a)
numpy.linalg._linalg.eigh(a,UPLO='L')
numpy.linalg._linalg.eigvals(a)
numpy.linalg._linalg.eigvalsh(a,UPLO='L')
numpy.linalg._linalg.inv(a)
numpy.linalg._linalg.isComplexType(t)
numpy.linalg._linalg.lstsq(a,b,rcond=None)
numpy.linalg._linalg.matmul(x1,x2,/)
numpy.linalg._linalg.matrix_norm(x,/,*,keepdims=False,ord='fro')
numpy.linalg._linalg.matrix_power(a,n)
numpy.linalg._linalg.matrix_rank(A,tol=None,hermitian=False,*,rtol=None)
numpy.linalg._linalg.matrix_transpose(x,/)
numpy.linalg._linalg.multi_dot(arrays,*,out=None)
numpy.linalg._linalg.norm(x,ord=None,axis=None,keepdims=False)
numpy.linalg._linalg.outer(x1,x2,/)
numpy.linalg._linalg.pinv(a,rcond=None,hermitian=False,*,rtol=_NoValue)
numpy.linalg._linalg.qr(a,mode='reduced')
numpy.linalg._linalg.slogdet(a)
numpy.linalg._linalg.solve(a,b)
numpy.linalg._linalg.svd(a,full_matrices=True,compute_uv=True,hermitian=False)
numpy.linalg._linalg.svdvals(x,/)
numpy.linalg._linalg.tensordot(x1,x2,/,*,axes=2)
numpy.linalg._linalg.tensorinv(a,ind=2)
numpy.linalg._linalg.tensorsolve(a,b,axes=None)
numpy.linalg._linalg.trace(x,/,*,offset=0,dtype=None)
numpy.linalg._linalg.transpose(a)
numpy.linalg._linalg.vecdot(x1,x2,/,*,axis=-1)
numpy.linalg._linalg.vector_norm(x,/,*,axis=None,keepdims=False,ord=2)
numpy.linalg._lstsq_dispatcher(a,b,rcond=None)
numpy.linalg._makearray(a)
numpy.linalg._matmul_dispatcher(x1,x2,/)
numpy.linalg._matrix_norm_dispatcher(x,/,*,keepdims=None,ord=None)
numpy.linalg._matrix_power_dispatcher(a,n)
numpy.linalg._matrix_rank_dispatcher(A,tol=None,hermitian=None,*,rtol=None)
numpy.linalg._matrix_transpose_dispatcher(x)
numpy.linalg._multi_dot(arrays,order,i,j,out=None)
numpy.linalg._multi_dot_matrix_chain_order(arrays,return_costs=False)
numpy.linalg._multi_dot_three(A,B,C,out=None)
numpy.linalg._multi_svd_norm(x,row_axis,col_axis,op)
numpy.linalg._multidot_dispatcher(arrays,*,out=None)
numpy.linalg._norm_dispatcher(x,ord=None,axis=None,keepdims=None)
numpy.linalg._outer_dispatcher(x1,x2)
numpy.linalg._pinv_dispatcher(a,rcond=None,hermitian=None,*,rtol=None)
numpy.linalg._qr_dispatcher(a,mode=None)
numpy.linalg._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy.linalg._raise_linalgerror_lstsq(err,flag)
numpy.linalg._raise_linalgerror_nonposdef(err,flag)
numpy.linalg._raise_linalgerror_qr(err,flag)
numpy.linalg._raise_linalgerror_singular(err,flag)
numpy.linalg._raise_linalgerror_svd_nonconvergence(err,flag)
numpy.linalg._realType(t,default=double)
numpy.linalg._solve_dispatcher(a,b)
numpy.linalg._svd_dispatcher(a,full_matrices=None,compute_uv=None,hermitian=None)
numpy.linalg._svdvals_dispatcher(x)
numpy.linalg._tensordot_dispatcher(x1,x2,/,*,axes=None)
numpy.linalg._tensorinv_dispatcher(a,ind=None)
numpy.linalg._tensorsolve_dispatcher(a,b,axes=None)
numpy.linalg._to_native_byte_order(*arrays)
numpy.linalg._trace_dispatcher(x,/,*,offset=None,dtype=None)
numpy.linalg._unary_dispatcher(a)
numpy.linalg._vecdot_dispatcher(x1,x2,/,*,axis=None)
numpy.linalg._vector_norm_dispatcher(x,/,*,axis=None,keepdims=None,ord=None)
numpy.linalg.cholesky(a,/,*,upper=False)
numpy.linalg.cond(x,p=None)
numpy.linalg.cross(x1,x2,/,*,axis=-1)
numpy.linalg.det(a)
numpy.linalg.diagonal(x,/,*,offset=0)
numpy.linalg.eig(a)
numpy.linalg.eigh(a,UPLO='L')
numpy.linalg.eigvals(a)
numpy.linalg.eigvalsh(a,UPLO='L')
numpy.linalg.inv(a)
numpy.linalg.isComplexType(t)
numpy.linalg.lstsq(a,b,rcond=None)
numpy.linalg.matmul(x1,x2,/)
numpy.linalg.matrix_norm(x,/,*,keepdims=False,ord='fro')
numpy.linalg.matrix_power(a,n)
numpy.linalg.matrix_rank(A,tol=None,hermitian=False,*,rtol=None)
numpy.linalg.matrix_transpose(x,/)
numpy.linalg.multi_dot(arrays,*,out=None)
numpy.linalg.norm(x,ord=None,axis=None,keepdims=False)
numpy.linalg.outer(x1,x2,/)
numpy.linalg.pinv(a,rcond=None,hermitian=False,*,rtol=_NoValue)
numpy.linalg.qr(a,mode='reduced')
numpy.linalg.slogdet(a)
numpy.linalg.solve(a,b)
numpy.linalg.svd(a,full_matrices=True,compute_uv=True,hermitian=False)
numpy.linalg.svdvals(x,/)
numpy.linalg.tensordot(x1,x2,/,*,axes=2)
numpy.linalg.tensorinv(a,ind=2)
numpy.linalg.tensorsolve(a,b,axes=None)
numpy.linalg.trace(x,/,*,offset=0,dtype=None)
numpy.linalg.transpose(a)
numpy.linalg.vecdot(x1,x2,/,*,axis=-1)
numpy.linalg.vector_norm(x,/,*,axis=None,keepdims=False,ord=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/_linalg.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/linalg.py----------------------------------------
A:numpy.linalg.linalg.ret->getattr(_linalg, attr_name, None)
numpy.linalg.linalg.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/tests/test_linalg.py----------------------------------------
A:numpy.linalg.tests.test_linalg.self.tags->frozenset(tags)
A:numpy.linalg.tests.test_linalg.a->numpy.zeros([1, 1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.b->numpy.ones([1, 1], dtype=np.float32)
A:numpy.linalg.tests.test_linalg.new_case->LinalgCase(case.name + '_' + a_label + '_' + b_label, a, b, tags=case.tags | {'strided'})
A:numpy.linalg.tests.test_linalg.slices->tuple([slice(None, None, repeat) for repeat in repeats])
A:numpy.linalg.tests.test_linalg.xi->numpy.lib.stride_tricks.as_strided(x, strides=s)
A:numpy.linalg.tests.test_linalg.s->numpy.atleast_1d(s)
A:numpy.linalg.tests.test_linalg.r->numpy.empty(a.shape, dtype=a.dtype)
A:numpy.linalg.tests.test_linalg.r[...]->identity(a.shape[-2])
A:numpy.linalg.tests.test_linalg.x->numpy.arange(9).reshape((3, 3))
A:numpy.linalg.tests.test_linalg.adotx->matmul(a, x)
A:numpy.linalg.tests.test_linalg.result->numpy.linalg.solve(a[:, 0:0, 0:0], b[:, 0:0, 0:0])
A:numpy.linalg.tests.test_linalg.a_inv->numpy.linalg.inv(a)
A:numpy.linalg.tests.test_linalg.res->routine(arr)
A:numpy.linalg.tests.test_linalg.ev->numpy.linalg.eigvalsh(a, 'L')
A:numpy.linalg.tests.test_linalg.(evalues, evectors)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_linalg.(w, v)->numpy.linalg.eigh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.(res, res_v)->numpy.linalg.eigh(a)
A:numpy.linalg.tests.test_linalg.(u, s, vt)->numpy.linalg.svd(a, False)
A:numpy.linalg.tests.test_linalg.(u, s, vh)->numpy.linalg.svd(x, compute_uv=True, hermitian=self.hermitian)
A:numpy.linalg.tests.test_linalg.s_from_svd->numpy.linalg.svd(x, compute_uv=False, hermitian=self.hermitian)
A:numpy.linalg.tests.test_linalg.s_from_svdvals->numpy.linalg.svdvals(x)
A:numpy.linalg.tests.test_linalg.axes->list(range(mat.ndim))
A:numpy.linalg.tests.test_linalg.c->numpy.dot(b, a)
A:numpy.linalg.tests.test_linalg.cinv->numpy.linalg.inv(c)
A:numpy.linalg.tests.test_linalg.A->numpy.random.random((6, 2))
A:numpy.linalg.tests.test_linalg.a_ginv->numpy.linalg.pinv(a, hermitian=True)
A:numpy.linalg.tests.test_linalg.d->numpy.diagonal(c, axis1=-2, axis2=-1)
A:numpy.linalg.tests.test_linalg.ad->asarray(a).astype(cdouble)
A:numpy.linalg.tests.test_linalg.ld->numpy.atleast_1d(ld)
A:numpy.linalg.tests.test_linalg.(ph, s)->numpy.linalg.slogdet(x)
A:numpy.linalg.tests.test_linalg.arr->numpy.array([[1, -2], [2, 5]], dtype='float16')
A:numpy.linalg.tests.test_linalg.(x, residuals, rank, sv)->numpy.linalg.lstsq(a, b, rcond=-1)
A:numpy.linalg.tests.test_linalg.expect_resids->numpy.array([]).view(type(x))
A:numpy.linalg.tests.test_linalg.(x, residuals, rank, s)->numpy.linalg.lstsq(a, b, rcond=None)
A:numpy.linalg.tests.test_linalg.y->numpy.array([-1, 0.2, 0.9, 2.1, 3.3])
A:numpy.linalg.tests.test_linalg.rshft_0->numpy.eye(4)
A:numpy.linalg.tests.test_linalg.noninv->array([[1, 0], [0, 0]])
A:numpy.linalg.tests.test_linalg.stacked->numpy.block([[[rshft_0]]] * 2)
A:numpy.linalg.tests.test_linalg.rshft->self.rshft_1.astype(dt)
A:numpy.linalg.tests.test_linalg.mz->matrix_power(mat, 2)
A:numpy.linalg.tests.test_linalg.invmat->matrix_power(mat, -1)
A:numpy.linalg.tests.test_linalg.mat->self.noninv.astype(dt)
A:numpy.linalg.tests.test_linalg.ev2->numpy.linalg.eigvalsh(a, 'U')
A:numpy.linalg.tests.test_linalg.w->numpy.linalg.eigvalsh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.Klo->numpy.array([[0, 0], [1, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.Kup->numpy.array([[0, 1], [0, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.tgt->numpy.array([-1, 1], dtype=np.double)
A:numpy.linalg.tests.test_linalg.rtol->get_rtol(np.double)
A:numpy.linalg.tests.test_linalg.(ev2, evc2)->numpy.linalg.eigh(a, 'U')
A:numpy.linalg.tests.test_linalg.at->numpy.zeros([1, 1], dtype=dtype).astype(each_type)
A:numpy.linalg.tests.test_linalg.an->norm(at, 'nuc')
A:numpy.linalg.tests.test_linalg.B->numpy.random.random((2, 6))
A:numpy.linalg.tests.test_linalg.n->norm(B, ord=order, axis=axis)
A:numpy.linalg.tests.test_linalg.expected->numpy.full((1, 1), 14.2828, dtype='float64')
A:numpy.linalg.tests.test_linalg.found->norm(A, ord=order, axis=k, keepdims=True)
A:numpy.linalg.tests.test_linalg.expected_shape->tuple(expected_shape)
A:numpy.linalg.tests.test_linalg.I->numpy.eye(4)
A:numpy.linalg.tests.test_linalg.ms->numpy.array([I, np.eye(4), np.zeros((4, 4))])
A:numpy.linalg.tests.test_linalg.rng->numpy.random.default_rng(123)
A:numpy.linalg.tests.test_linalg.X->numpy.random.default_rng(123).normal(size=(40, 10))
A:numpy.linalg.tests.test_linalg.a_type->type(a)
A:numpy.linalg.tests.test_linalg.k->min(m, n)
A:numpy.linalg.tests.test_linalg.(q1, r1)->numpy.linalg.qr(a, mode='reduced')
A:numpy.linalg.tests.test_linalg.r2->numpy.linalg.qr(a, mode='r')
A:numpy.linalg.tests.test_linalg.(h, tau)->numpy.linalg.qr(a.T, mode='raw')
A:numpy.linalg.tests.test_linalg.m1->numpy.zeros([1, 1], dtype=dtype).astype(dt)
A:numpy.linalg.tests.test_linalg.m2->numpy.ones([1, 1], dtype=np.float32).astype(dt)
A:numpy.linalg.tests.test_linalg.(q, r)->numpy.linalg.qr(a, mode='complete')
A:numpy.linalg.tests.test_linalg.I_mat->numpy.identity(q1.shape[-1])
A:numpy.linalg.tests.test_linalg.stack_I_mat->numpy.broadcast_to(I_mat, q1.shape[:-2] + (q1.shape[-1],) * 2)
A:numpy.linalg.tests.test_linalg.t->list(range(len(shape)))
A:numpy.linalg.tests.test_linalg.arr1->numpy.arange(3)
A:numpy.linalg.tests.test_linalg.arr2->numpy.arange(3)
A:numpy.linalg.tests.test_linalg.n_arr->numpy.array([[1, -2], [2, 5]], dtype='float16').view(arr.dtype.newbyteorder(native))
A:numpy.linalg.tests.test_linalg.sw_arr->numpy.array([[1, -2], [2, 5]], dtype='float16').view(arr.dtype.newbyteorder('S')).byteswap()
A:numpy.linalg.tests.test_linalg.invertible->numpy.array([[1, 2], [3, 4]])
A:numpy.linalg.tests.test_linalg.non_invertible->numpy.array([[1, 1], [1, 1]])
A:numpy.linalg.tests.test_linalg.pid->os.fork()
A:numpy.linalg.tests.test_linalg.(pid, status)->os.wait()
A:numpy.linalg.tests.test_linalg.template->textwrap.dedent('\n    import sys\n    {before}\n    try:\n        import {bad_lib}\n    except ImportError:\n        sys.exit(0)\n    {after}\n    x = np.ones(2, dtype=np.float32)\n    sys.exit(0 if np.allclose(x.dot(x), 2.0) else 1)\n    ')
A:numpy.linalg.tests.test_linalg.code->textwrap.dedent('\n    import sys\n    {before}\n    try:\n        import {bad_lib}\n    except ImportError:\n        sys.exit(0)\n    {after}\n    x = np.ones(2, dtype=np.float32)\n    sys.exit(0 if np.allclose(x.dot(x), 2.0) else 1)\n    ').format(after='import numpy as np', before='', bad_lib=bad_lib)
A:numpy.linalg.tests.test_linalg.C->numpy.random.random((6, 2))
A:numpy.linalg.tests.test_linalg.D->numpy.random.random((2, 1))
A:numpy.linalg.tests.test_linalg.A1d->numpy.random.random(2)
A:numpy.linalg.tests.test_linalg.D1d->numpy.random.random(2)
A:numpy.linalg.tests.test_linalg.out->numpy.zeros((6, 1))
A:numpy.linalg.tests.test_linalg.ret->multi_dot([A, B, C, D], out=out)
A:numpy.linalg.tests.test_linalg.m_expected->numpy.array([[0.0, 15750.0, 7875.0, 9375.0, 11875.0, 15125.0], [0.0, 0.0, 2625.0, 4375.0, 7125.0, 10500.0], [0.0, 0.0, 0.0, 750.0, 2500.0, 5375.0], [0.0, 0.0, 0.0, 0.0, 1000.0, 3500.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5000.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:numpy.linalg.tests.test_linalg.s_expected->numpy.array([[0, 1, 1, 3, 3, 3], [0, 0, 2, 3, 3, 3], [0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 4, 5], [0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0]], dtype=int)
A:numpy.linalg.tests.test_linalg.(s, m)->_multi_dot_matrix_chain_order(arrays, return_costs=True)
A:numpy.linalg.tests.test_linalg.ainv->numpy.linalg.tensorinv(a, ind=1)
A:numpy.linalg.tests.test_linalg.work->numpy.zeros([1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.tau->numpy.zeros([1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.results->lapack_routine(m, n, a, lda, tau, work, -1, 0)
A:numpy.linalg.tests.test_linalg.lwork->int(work.item())
A:numpy.linalg.tests.test_linalg.actual->numpy.linalg.vector_norm(x, keepdims=True)
numpy.linalg.tests.testCondCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testCondCases.do(self,a,b,tags)
numpy.linalg.tests.testDetCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testDetCases.do(self,a,b,tags)
numpy.linalg.tests.testEigCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testEigCases.do(self,a,b,tags)
numpy.linalg.tests.testEigvalsCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testEigvalsCases.do(self,a,b,tags)
numpy.linalg.tests.testHermitianGeneralizedTestCase(LinalgTestCase)
numpy.linalg.tests.testHermitianGeneralizedTestCase.test_generalized_empty_herm_cases(self)
numpy.linalg.tests.testHermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.linalg.tests.testHermitianTestCase(LinalgTestCase)
numpy.linalg.tests.testHermitianTestCase.test_empty_herm_cases(self)
numpy.linalg.tests.testHermitianTestCase.test_herm_cases(self)
numpy.linalg.tests.testInvCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testInvCases.do(self,a,b,tags)
numpy.linalg.tests.testLinalgCase(self,name,a,b,tags=set())
numpy.linalg.tests.testLinalgCase.__repr__(self)
numpy.linalg.tests.testLinalgCase.check(self,do)
numpy.linalg.tests.testLinalgGeneralizedNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.testLinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases(self)
numpy.linalg.tests.testLinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.linalg.tests.testLinalgGeneralizedSquareTestCase(LinalgTestCase)
numpy.linalg.tests.testLinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases(self)
numpy.linalg.tests.testLinalgGeneralizedSquareTestCase.test_generalized_sq_cases(self)
numpy.linalg.tests.testLinalgNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.testLinalgNonsquareTestCase.test_empty_nonsq_cases(self)
numpy.linalg.tests.testLinalgNonsquareTestCase.test_nonsq_cases(self)
numpy.linalg.tests.testLinalgSquareTestCase(LinalgTestCase)
numpy.linalg.tests.testLinalgSquareTestCase.test_empty_sq_cases(self)
numpy.linalg.tests.testLinalgSquareTestCase.test_sq_cases(self)
numpy.linalg.tests.testLinalgTestCase
numpy.linalg.tests.testLinalgTestCase.check_cases(self,require=set(),exclude=set())
numpy.linalg.tests.testLstsqCases(LinalgSquareTestCase,LinalgNonsquareTestCase)
numpy.linalg.tests.testLstsqCases.do(self,a,b,tags)
numpy.linalg.tests.testPinvCases(LinalgSquareTestCase,LinalgNonsquareTestCase,LinalgGeneralizedSquareTestCase,LinalgGeneralizedNonsquareTestCase)
numpy.linalg.tests.testPinvCases.do(self,a,b,tags)
numpy.linalg.tests.testPinvHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.testPinvHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.testSVDBaseTests
numpy.linalg.tests.testSVDBaseTests.test_types(self,dtype)
numpy.linalg.tests.testSVDCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testSVDCases.do(self,a,b,tags)
numpy.linalg.tests.testSVDHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.testSVDHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.testSolveCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.testSolveCases.do(self,a,b,tags)
numpy.linalg.tests.testTestCholesky
numpy.linalg.tests.testTestCholesky.test_0_size(self)
numpy.linalg.tests.testTestCholesky.test_basic_property(self,shape,dtype,upper)
numpy.linalg.tests.testTestCholesky.test_upper_lower_arg(self)
numpy.linalg.tests.testTestCond(CondCases)
numpy.linalg.tests.testTestCond.test_basic_nonsvd(self)
numpy.linalg.tests.testTestCond.test_nan(self)
numpy.linalg.tests.testTestCond.test_singular(self)
numpy.linalg.tests.testTestCond.test_stacked_singular(self)
numpy.linalg.tests.testTestDet(DetCases)
numpy.linalg.tests.testTestDet.test_0_size(self)
numpy.linalg.tests.testTestDet.test_types(self,dtype)
numpy.linalg.tests.testTestDet.test_zero(self)
numpy.linalg.tests.testTestEig(EigCases)
numpy.linalg.tests.testTestEig.test_0_size(self)
numpy.linalg.tests.testTestEig.test_types(self,dtype)
numpy.linalg.tests.testTestEigh
numpy.linalg.tests.testTestEigh.test_0_size(self)
numpy.linalg.tests.testTestEigh.test_UPLO(self)
numpy.linalg.tests.testTestEigh.test_invalid(self)
numpy.linalg.tests.testTestEigh.test_types(self,dtype)
numpy.linalg.tests.testTestEighCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.testTestEighCases.do(self,a,b,tags)
numpy.linalg.tests.testTestEigvals(EigvalsCases)
numpy.linalg.tests.testTestEigvals.test_0_size(self)
numpy.linalg.tests.testTestEigvals.test_types(self,dtype)
numpy.linalg.tests.testTestEigvalsh
numpy.linalg.tests.testTestEigvalsh.test_0_size(self)
numpy.linalg.tests.testTestEigvalsh.test_UPLO(self)
numpy.linalg.tests.testTestEigvalsh.test_invalid(self)
numpy.linalg.tests.testTestEigvalsh.test_types(self,dtype)
numpy.linalg.tests.testTestEigvalshCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.testTestEigvalshCases.do(self,a,b,tags)
numpy.linalg.tests.testTestInv(InvCases)
numpy.linalg.tests.testTestInv.test_0_size(self)
numpy.linalg.tests.testTestInv.test_types(self,dtype)
numpy.linalg.tests.testTestLstsq(LstsqCases)
numpy.linalg.tests.testTestLstsq.test_empty_a_b(self,m,n,n_rhs)
numpy.linalg.tests.testTestLstsq.test_incompatible_dims(self)
numpy.linalg.tests.testTestLstsq.test_rcond(self)
numpy.linalg.tests.testTestMatrixPower
numpy.linalg.tests.testTestMatrixPower.test_exceptions_bad_power(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_exceptions_non_square(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_exceptions_not_invertible(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_large_power(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_power_is_minus_one(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_power_is_one(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_power_is_two(self,dt)
numpy.linalg.tests.testTestMatrixPower.test_power_is_zero(self,dt)
numpy.linalg.tests.testTestMatrixRank
numpy.linalg.tests.testTestMatrixRank.test_matrix_rank(self)
numpy.linalg.tests.testTestMatrixRank.test_symmetric_rank(self)
numpy.linalg.tests.testTestMultiDot
numpy.linalg.tests.testTestMultiDot.test_basic_function_with_dynamic_programming_optimization(self)
numpy.linalg.tests.testTestMultiDot.test_basic_function_with_three_arguments(self)
numpy.linalg.tests.testTestMultiDot.test_basic_function_with_two_arguments(self)
numpy.linalg.tests.testTestMultiDot.test_dynamic_programming_logic(self)
numpy.linalg.tests.testTestMultiDot.test_dynamic_programming_optimization_and_out(self)
numpy.linalg.tests.testTestMultiDot.test_three_arguments_and_out(self)
numpy.linalg.tests.testTestMultiDot.test_too_few_input_arrays(self)
numpy.linalg.tests.testTestMultiDot.test_two_arguments_and_out(self)
numpy.linalg.tests.testTestMultiDot.test_vector_as_first_and_last_argument(self)
numpy.linalg.tests.testTestMultiDot.test_vector_as_first_argument(self)
numpy.linalg.tests.testTestMultiDot.test_vector_as_last_argument(self)
numpy.linalg.tests.testTestNormDouble(_TestNorm,_TestNormDoubleBase)
numpy.linalg.tests.testTestNormInt64(_TestNorm,_TestNormInt64Base)
numpy.linalg.tests.testTestNormSingle(_TestNorm,_TestNormSingleBase)
numpy.linalg.tests.testTestNorm_NonSystematic
numpy.linalg.tests.testTestNorm_NonSystematic.test_complex_high_ord(self)
numpy.linalg.tests.testTestNorm_NonSystematic.test_intmin(self)
numpy.linalg.tests.testTestNorm_NonSystematic.test_longdouble_norm(self)
numpy.linalg.tests.testTestOuter
numpy.linalg.tests.testTestPinv(PinvCases)
numpy.linalg.tests.testTestPinvHermitian(PinvHermitianCases)
numpy.linalg.tests.testTestQR
numpy.linalg.tests.testTestQR.check_qr(self,a)
numpy.linalg.tests.testTestQR.check_qr_stacked(self,a)
numpy.linalg.tests.testTestQR.test_mode_all_but_economic(self)
numpy.linalg.tests.testTestQR.test_mode_raw(self)
numpy.linalg.tests.testTestQR.test_qr_empty(self,m,n)
numpy.linalg.tests.testTestQR.test_stacked_inputs(self,outer_size,size,dt)
numpy.linalg.tests.testTestSVD(SVDCases,SVDBaseTests)
numpy.linalg.tests.testTestSVD.test_empty_identity(self)
numpy.linalg.tests.testTestSVD.test_svdvals(self)
numpy.linalg.tests.testTestSVDHermitian(SVDHermitianCases,SVDBaseTests)
numpy.linalg.tests.testTestSolve(SolveCases)
numpy.linalg.tests.testTestSolve.test_0_size(self)
numpy.linalg.tests.testTestSolve.test_0_size_k(self)
numpy.linalg.tests.testTestSolve.test_1_d(self)
numpy.linalg.tests.testTestSolve.test_types(self,dtype)
numpy.linalg.tests.testTestTensorinv
numpy.linalg.tests.testTestTensorinv.test_non_square_handling(self,arr,ind)
numpy.linalg.tests.testTestTensorinv.test_tensorinv_ind_limit(self,ind)
numpy.linalg.tests.testTestTensorinv.test_tensorinv_result(self)
numpy.linalg.tests.testTestTensorinv.test_tensorinv_shape(self,shape,ind)
numpy.linalg.tests.testTestTensorsolve
numpy.linalg.tests.testTestTensorsolve.test_non_square_handling(self,a,axes)
numpy.linalg.tests.testTestTensorsolve.test_tensorsolve_result(self,shape)
numpy.linalg.tests.test_TestNorm(_TestNorm2D,_TestNormGeneral)
numpy.linalg.tests.test_TestNorm2D(_TestNormBase)
numpy.linalg.tests.test_TestNorm2D.test_bad_args(self)
numpy.linalg.tests.test_TestNorm2D.test_matrix_2x2(self)
numpy.linalg.tests.test_TestNorm2D.test_matrix_3x3(self)
numpy.linalg.tests.test_TestNorm2D.test_matrix_empty(self)
numpy.linalg.tests.test_TestNorm2D.test_matrix_return_type(self)
numpy.linalg.tests.test_TestNormBase
numpy.linalg.tests.test_TestNormBase.check_dtype(x,res)
numpy.linalg.tests.test_TestNormDoubleBase(_TestNormBase)
numpy.linalg.tests.test_TestNormGeneral(_TestNormBase)
numpy.linalg.tests.test_TestNormGeneral.test_axis(self)
numpy.linalg.tests.test_TestNormGeneral.test_empty(self)
numpy.linalg.tests.test_TestNormGeneral.test_keepdims(self)
numpy.linalg.tests.test_TestNormGeneral.test_vector(self)
numpy.linalg.tests.test_TestNormGeneral.test_vector_return_type(self)
numpy.linalg.tests.test_TestNormInt64Base(_TestNormBase)
numpy.linalg.tests.test_TestNormSingleBase(_TestNormBase)
numpy.linalg.tests.test_linalg.CondCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.CondCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.DetCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.DetCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.EigCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.EigCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.EigvalsCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.EigvalsCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_empty_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.HermitianTestCase.test_empty_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianTestCase.test_herm_cases(self)
numpy.linalg.tests.test_linalg.InvCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.InvCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.LinalgCase(self,name,a,b,tags=set())
numpy.linalg.tests.test_linalg.LinalgCase.__init__(self,name,a,b,tags=set())
numpy.linalg.tests.test_linalg.LinalgCase.__repr__(self)
numpy.linalg.tests.test_linalg.LinalgCase.check(self,do)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_empty_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_empty_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgTestCase
numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases(self,require=set(),exclude=set())
numpy.linalg.tests.test_linalg.LstsqCases(LinalgSquareTestCase,LinalgNonsquareTestCase)
numpy.linalg.tests.test_linalg.LstsqCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.PinvCases(LinalgSquareTestCase,LinalgNonsquareTestCase,LinalgGeneralizedSquareTestCase,LinalgGeneralizedNonsquareTestCase)
numpy.linalg.tests.test_linalg.PinvCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.PinvHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.PinvHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SVDBaseTests
numpy.linalg.tests.test_linalg.SVDBaseTests.test_types(self,dtype)
numpy.linalg.tests.test_linalg.SVDCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.SVDCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SVDHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.SVDHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SolveCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.SolveCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestCholesky
numpy.linalg.tests.test_linalg.TestCholesky.test_0_size(self)
numpy.linalg.tests.test_linalg.TestCholesky.test_basic_property(self,shape,dtype,upper)
numpy.linalg.tests.test_linalg.TestCholesky.test_upper_lower_arg(self)
numpy.linalg.tests.test_linalg.TestCond(CondCases)
numpy.linalg.tests.test_linalg.TestCond.test_basic_nonsvd(self)
numpy.linalg.tests.test_linalg.TestCond.test_nan(self)
numpy.linalg.tests.test_linalg.TestCond.test_singular(self)
numpy.linalg.tests.test_linalg.TestCond.test_stacked_singular(self)
numpy.linalg.tests.test_linalg.TestDet(DetCases)
numpy.linalg.tests.test_linalg.TestDet.test_0_size(self)
numpy.linalg.tests.test_linalg.TestDet.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestDet.test_zero(self)
numpy.linalg.tests.test_linalg.TestEig(EigCases)
numpy.linalg.tests.test_linalg.TestEig.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEig.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigh
numpy.linalg.tests.test_linalg.TestEigh.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigh.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEighCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEighCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestEigvals(EigvalsCases)
numpy.linalg.tests.test_linalg.TestEigvals.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigvals.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigvalsh
numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigvalshCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEigvalshCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestInv(InvCases)
numpy.linalg.tests.test_linalg.TestInv.test_0_size(self)
numpy.linalg.tests.test_linalg.TestInv.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestLstsq(LstsqCases)
numpy.linalg.tests.test_linalg.TestLstsq.test_empty_a_b(self,m,n,n_rhs)
numpy.linalg.tests.test_linalg.TestLstsq.test_incompatible_dims(self)
numpy.linalg.tests.test_linalg.TestLstsq.test_rcond(self)
numpy.linalg.tests.test_linalg.TestMatrixPower
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_bad_power(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_non_square(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_not_invertible(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_minus_one(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_one(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_two(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_zero(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixRank
numpy.linalg.tests.test_linalg.TestMatrixRank.test_matrix_rank(self)
numpy.linalg.tests.test_linalg.TestMatrixRank.test_symmetric_rank(self)
numpy.linalg.tests.test_linalg.TestMultiDot
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_dynamic_programming_optimization(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_three_arguments(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_two_arguments(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programming_logic(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programming_optimization_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_three_arguments_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_too_few_input_arrays(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_two_arguments_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_and_last_argument(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_argument(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_last_argument(self)
numpy.linalg.tests.test_linalg.TestNormDouble(_TestNorm,_TestNormDoubleBase)
numpy.linalg.tests.test_linalg.TestNormInt64(_TestNorm,_TestNormInt64Base)
numpy.linalg.tests.test_linalg.TestNormSingle(_TestNorm,_TestNormSingleBase)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_complex_high_ord(self)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_intmin(self)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_longdouble_norm(self)
numpy.linalg.tests.test_linalg.TestOuter
numpy.linalg.tests.test_linalg.TestPinv(PinvCases)
numpy.linalg.tests.test_linalg.TestPinvHermitian(PinvHermitianCases)
numpy.linalg.tests.test_linalg.TestQR
numpy.linalg.tests.test_linalg.TestQR.check_qr(self,a)
numpy.linalg.tests.test_linalg.TestQR.check_qr_stacked(self,a)
numpy.linalg.tests.test_linalg.TestQR.test_mode_all_but_economic(self)
numpy.linalg.tests.test_linalg.TestQR.test_mode_raw(self)
numpy.linalg.tests.test_linalg.TestQR.test_qr_empty(self,m,n)
numpy.linalg.tests.test_linalg.TestQR.test_stacked_inputs(self,outer_size,size,dt)
numpy.linalg.tests.test_linalg.TestSVD(SVDCases,SVDBaseTests)
numpy.linalg.tests.test_linalg.TestSVD.test_empty_identity(self)
numpy.linalg.tests.test_linalg.TestSVD.test_svdvals(self)
numpy.linalg.tests.test_linalg.TestSVDHermitian(SVDHermitianCases,SVDBaseTests)
numpy.linalg.tests.test_linalg.TestSolve(SolveCases)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size(self)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k(self)
numpy.linalg.tests.test_linalg.TestSolve.test_1_d(self)
numpy.linalg.tests.test_linalg.TestSolve.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestTensorinv
numpy.linalg.tests.test_linalg.TestTensorinv.test_non_square_handling(self,arr,ind)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_ind_limit(self,ind)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_result(self)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_shape(self,shape,ind)
numpy.linalg.tests.test_linalg.TestTensorsolve
numpy.linalg.tests.test_linalg.TestTensorsolve.test_non_square_handling(self,a,axes)
numpy.linalg.tests.test_linalg.TestTensorsolve.test_tensorsolve_result(self,shape)
numpy.linalg.tests.test_linalg._TestNorm(_TestNorm2D,_TestNormGeneral)
numpy.linalg.tests.test_linalg._TestNorm2D(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNorm2D.test_bad_args(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_2x2(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_3x3(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_empty(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_return_type(self)
numpy.linalg.tests.test_linalg._TestNormBase
numpy.linalg.tests.test_linalg._TestNormBase.check_dtype(x,res)
numpy.linalg.tests.test_linalg._TestNormDoubleBase(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormGeneral(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_axis(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_empty(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_keepdims(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector_return_type(self)
numpy.linalg.tests.test_linalg._TestNormInt64Base(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormSingleBase(_TestNormBase)
numpy.linalg.tests.test_linalg._make_generalized_cases()
numpy.linalg.tests.test_linalg._make_strided_cases()
numpy.linalg.tests.test_linalg._stride_comb_iter(x)
numpy.linalg.tests.test_linalg.apply_tag(tag,cases)
numpy.linalg.tests.test_linalg.assert_almost_equal(a,b,single_decimal=6,double_decimal=12,**kw)
numpy.linalg.tests.test_linalg.consistent_subclass(out,in_)
numpy.linalg.tests.test_linalg.get_complex_dtype(dtype)
numpy.linalg.tests.test_linalg.get_real_dtype(dtype)
numpy.linalg.tests.test_linalg.get_rtol(dtype)
numpy.linalg.tests.test_linalg.identity_like_generalized(a)
numpy.linalg.tests.test_linalg.test_blas64_dot()
numpy.linalg.tests.test_linalg.test_blas64_geqrf_lwork_smoketest()
numpy.linalg.tests.test_linalg.test_byteorder_check()
numpy.linalg.tests.test_linalg.test_cross()
numpy.linalg.tests.test_linalg.test_diagonal()
numpy.linalg.tests.test_linalg.test_generalized_raise_multiloop()
numpy.linalg.tests.test_linalg.test_matmul()
numpy.linalg.tests.test_linalg.test_matrix_norm()
numpy.linalg.tests.test_linalg.test_matrix_transpose()
numpy.linalg.tests.test_linalg.test_pinv_rtol_arg()
numpy.linalg.tests.test_linalg.test_reduced_rank()
numpy.linalg.tests.test_linalg.test_sdot_bug_8577()
numpy.linalg.tests.test_linalg.test_tensordot()
numpy.linalg.tests.test_linalg.test_trace()
numpy.linalg.tests.test_linalg.test_unsupported_commontype()
numpy.linalg.tests.test_linalg.test_vector_norm()
numpy.linalg.tests.test_linalg.test_xerbla_override()
numpy.linalg.tests.test_make_generalized_cases()
numpy.linalg.tests.test_make_strided_cases()
numpy.linalg.tests.test_stride_comb_iter(x)
numpy.linalg.tests.testapply_tag(tag,cases)
numpy.linalg.tests.testassert_almost_equal(a,b,single_decimal=6,double_decimal=12,**kw)
numpy.linalg.tests.testconsistent_subclass(out,in_)
numpy.linalg.tests.testget_complex_dtype(dtype)
numpy.linalg.tests.testget_real_dtype(dtype)
numpy.linalg.tests.testget_rtol(dtype)
numpy.linalg.tests.testidentity_like_generalized(a)
numpy.linalg.tests.testtest_blas64_dot()
numpy.linalg.tests.testtest_blas64_geqrf_lwork_smoketest()
numpy.linalg.tests.testtest_byteorder_check()
numpy.linalg.tests.testtest_cross()
numpy.linalg.tests.testtest_diagonal()
numpy.linalg.tests.testtest_generalized_raise_multiloop()
numpy.linalg.tests.testtest_matmul()
numpy.linalg.tests.testtest_matrix_norm()
numpy.linalg.tests.testtest_matrix_transpose()
numpy.linalg.tests.testtest_pinv_rtol_arg()
numpy.linalg.tests.testtest_reduced_rank()
numpy.linalg.tests.testtest_sdot_bug_8577()
numpy.linalg.tests.testtest_tensordot()
numpy.linalg.tests.testtest_trace()
numpy.linalg.tests.testtest_unsupported_commontype()
numpy.linalg.tests.testtest_vector_norm()
numpy.linalg.tests.testtest_xerbla_override()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/tests/test_deprecations.py----------------------------------------
A:numpy.linalg.tests.test_deprecations.a->numpy.eye(2)
numpy.linalg.tests.test_deprecations.test_qr_mode_full_future_warning()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/linalg/tests/test_regression.py----------------------------------------
A:numpy.linalg.tests.test_regression.rva->array([103.221168 + 0j, -19.1843603 + 0j, -0.604004526 + 15.84422474j, -0.604004526 - 15.84422474j, -11.3692929 + 0j, -0.657612485 + 10.41755503j, -0.657612485 - 10.41755503j, 18.2126812 + 0j, 10.6011014 + 0j, 7.80732773 + 0j, -0.765390898 + 0j, 1.51971555e-15 + 0j, -1.51308713e-15 + 0j])
A:numpy.linalg.tests.test_regression.a->numpy.ones(shape, dtype=t)
A:numpy.linalg.tests.test_regression.(va, ve)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_regression.cov->array([[77.70273908, 3.51489954, 15.64602427], [3.51489954, 88.97013878, -1.07431931], [15.64602427, -1.07431931, 98.18223512]])
A:numpy.linalg.tests.test_regression.(vals, vecs)->numpy.linalg.eigh(cov)
A:numpy.linalg.tests.test_regression.(u, s, vh)->numpy.linalg.svd(a)
A:numpy.linalg.tests.test_regression.b->G.dot(u)
A:numpy.linalg.tests.test_regression.ap->numpy.linalg.cholesky(a)
A:numpy.linalg.tests.test_regression.bp->numpy.linalg.cholesky(b)
A:numpy.linalg.tests.test_regression.x->numpy.arange(500000, dtype=np.float64)
A:numpy.linalg.tests.test_regression.w->numpy.linalg.svd(a, compute_uv=False)
A:numpy.linalg.tests.test_regression.c->numpy.count_nonzero(np.absolute(w) > 0.5)
A:numpy.linalg.tests.test_regression.w_svdvals->numpy.linalg.svdvals(a)
A:numpy.linalg.tests.test_regression.testvector->numpy.array([np.array([0, 1]), 0, 0], dtype=object)
A:numpy.linalg.tests.test_regression.norm->numpy.linalg.norm(testmatrix, ord='fro')
A:numpy.linalg.tests.test_regression.testmatrix->numpy.array([[np.array([0, 1]), 0, 0], [0, 0, 0]], dtype=object)
A:numpy.linalg.tests.test_regression.(u_lstsq, res, rank, sv)->numpy.linalg.lstsq(G, b, rcond=None)
A:numpy.linalg.tests.test_regression.res->numpy.linalg.matrix_rank(x, rtol=rtol)
A:numpy.linalg.tests.test_regression.matrix->numpy.array([[0, 1], [1, 0]])
A:numpy.linalg.tests.test_regression.mismatches->(~np.isclose(result, expected)).sum()
numpy.linalg.tests.test_regression.TestRegression
numpy.linalg.tests.test_regression.TestRegression.test_cholesky_empty_array(self,upper)
numpy.linalg.tests.test_regression.TestRegression.test_eig_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_eigh_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_lapack_endian(self)
numpy.linalg.tests.test_regression.TestRegression.test_large_svd_32bit(self)
numpy.linalg.tests.test_regression.TestRegression.test_lstsq_complex_larger_rhs(self)
numpy.linalg.tests.test_regression.TestRegression.test_matrix_rank_rtol_argument(self,rtol)
numpy.linalg.tests.test_regression.TestRegression.test_norm_object_array(self)
numpy.linalg.tests.test_regression.TestRegression.test_norm_vector_badarg(self)
numpy.linalg.tests.test_regression.TestRegression.test_openblas_threading(self)
numpy.linalg.tests.test_regression.TestRegression.test_svd_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_svd_no_uv(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/mtrand.pyi----------------------------------------
numpy.random.RandomState(self,seed:None|_ArrayLikeInt_co|BitGenerator=...)
numpy.random.RandomState.__getstate__(self)->dict[str, Any]
numpy.random.RandomState.__reduce__(self)->tuple[Callable[[BitGenerator], RandomState], tuple[BitGenerator], dict[str, Any]]
numpy.random.RandomState.__repr__(self)->str
numpy.random.RandomState.__setstate__(self,state:dict[str,Any])->None
numpy.random.RandomState.__str__(self)->str
numpy.random.RandomState.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.beta(self,a:float,b:float,size:None=...)->float
numpy.random.RandomState.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.binomial(self,n:int,p:float,size:None=...)->int
numpy.random.RandomState.bytes(self,length:int)->builtins.bytes
numpy.random.RandomState.chisquare(self,df:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.chisquare(self,df:float,size:None=...)->float
numpy.random.RandomState.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->Any
numpy.random.RandomState.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->NDArray[Any]
numpy.random.RandomState.choice(self,a:int,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->int
numpy.random.RandomState.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->NDArray[long]
numpy.random.RandomState.dirichlet(self,alpha:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.exponential(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.exponential(self,scale:float=...,size:None=...)->float
numpy.random.RandomState.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random.RandomState.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random.RandomState.geometric(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.geometric(self,p:float,size:None=...)->int
numpy.random.RandomState.get_state(self,legacy:Literal[False]=...)->dict[str, Any]
numpy.random.RandomState.get_state(self,legacy:Literal[True]=...)->dict[str, Any] | tuple[str, NDArray[uint32], int, int, float]
numpy.random.RandomState.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.RandomState.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random.RandomState.logseries(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.logseries(self,p:float,size:None=...)->int
numpy.random.RandomState.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:None|_ShapeLike=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...)->NDArray[float64]
numpy.random.RandomState.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random.RandomState.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random.RandomState.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random.RandomState.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.pareto(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.pareto(self,a:float,size:None=...)->float
numpy.random.RandomState.permutation(self,x:ArrayLike)->NDArray[Any]
numpy.random.RandomState.permutation(self,x:int)->NDArray[long]
numpy.random.RandomState.poisson(self,lam:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.poisson(self,lam:float=...,size:None=...)->int
numpy.random.RandomState.power(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.power(self,a:float,size:None=...)->float
numpy.random.RandomState.rand(self)->float
numpy.random.RandomState.rand(self,*args:int)->NDArray[float64]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:None|dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...)->NDArray[int64]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:_DTypeLikeBool=...)->NDArray[np.bool]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...)->NDArray[int16]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...)->NDArray[int32]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...)->NDArray[int8]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[long]|type[int]|type[long]|_LongCodes|_SupportsDType[dtype[long]]=...)->NDArray[long]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...)->NDArray[uint16]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...)->NDArray[uint32]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...)->NDArray[uint64]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...)->NDArray[uint8]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[ulong]|type[ulong]|_ULongCodes|_SupportsDType[dtype[ulong]]=...)->NDArray[ulong]
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...)->int
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...)->int16
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...)->int32
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...)->int64
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...)->int8
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int_]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...)->int_
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[long]|type[long]|_LongCodes|_SupportsDType[dtype[long]]=...)->long
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...)->uint16
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...)->uint32
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...)->uint64
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...)->uint8
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...)->uint
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[ulong]|type[ulong]|_ULongCodes|_SupportsDType[dtype[ulong]]=...)->ulong
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[bool]=...)->bool
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[int]=...)->int
numpy.random.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[np.bool]=...)->np.bool
numpy.random.RandomState.randn(self)->float
numpy.random.RandomState.randn(self,*args:int)->NDArray[float64]
numpy.random.RandomState.random(self,size:None=...)->float
numpy.random.RandomState.random(self,size:_ShapeLike)->NDArray[float64]
numpy.random.RandomState.random_integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.random_integers(self,low:int,high:None|int=...,size:None=...)->int
numpy.random.RandomState.random_sample(self,size:None=...)->float
numpy.random.RandomState.random_sample(self,size:_ShapeLike)->NDArray[float64]
numpy.random.RandomState.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random.RandomState.seed(self,seed:None|_ArrayLikeFloat_co=...)->None
numpy.random.RandomState.set_state(self,state:dict[str,Any]|tuple[str,NDArray[uint32],int,int,float])->None
numpy.random.RandomState.shuffle(self,x:ArrayLike)->None
numpy.random.RandomState.standard_cauchy(self,size:None=...)->float
numpy.random.RandomState.standard_cauchy(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.standard_exponential(self,size:None=...)->float
numpy.random.RandomState.standard_exponential(self,size:_ShapeLike)->NDArray[float64]
numpy.random.RandomState.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.standard_gamma(self,shape:float,size:None=...)->float
numpy.random.RandomState.standard_normal(self,size:None=...)->float
numpy.random.RandomState.standard_normal(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->NDArray[float64]
numpy.random.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.standard_t(self,df:float,size:None=...)->float
numpy.random.RandomState.tomaxint(self,size:None=...)->int
numpy.random.RandomState.tomaxint(self,size:_ShapeLike)->NDArray[int64]
numpy.random.RandomState.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random.RandomState.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random.RandomState.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random.RandomState.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random.RandomState.weibull(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.RandomState.weibull(self,a:float,size:None=...)->float
numpy.random.RandomState.zipf(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.RandomState.zipf(self,a:float,size:None=...)->int
numpy.random.get_bit_generator()->BitGenerator
numpy.random.mtrand.RandomState(self,seed:None|_ArrayLikeInt_co|BitGenerator=...)
numpy.random.mtrand.RandomState.__getstate__(self)->dict[str, Any]
numpy.random.mtrand.RandomState.__init__(self,seed:None|_ArrayLikeInt_co|BitGenerator=...)
numpy.random.mtrand.RandomState.__reduce__(self)->tuple[Callable[[BitGenerator], RandomState], tuple[BitGenerator], dict[str, Any]]
numpy.random.mtrand.RandomState.__repr__(self)->str
numpy.random.mtrand.RandomState.__setstate__(self,state:dict[str,Any])->None
numpy.random.mtrand.RandomState.__str__(self)->str
numpy.random.mtrand.RandomState.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.beta(self,a:float,b:float,size:None=...)->float
numpy.random.mtrand.RandomState.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.binomial(self,n:int,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.bytes(self,length:int)->builtins.bytes
numpy.random.mtrand.RandomState.chisquare(self,df:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.chisquare(self,df:float,size:None=...)->float
numpy.random.mtrand.RandomState.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->Any
numpy.random.mtrand.RandomState.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->NDArray[Any]
numpy.random.mtrand.RandomState.choice(self,a:int,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->int
numpy.random.mtrand.RandomState.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...)->NDArray[long]
numpy.random.mtrand.RandomState.dirichlet(self,alpha:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.exponential(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.exponential(self,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random.mtrand.RandomState.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.geometric(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.geometric(self,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.get_state(self,legacy:Literal[False]=...)->dict[str, Any]
numpy.random.mtrand.RandomState.get_state(self,legacy:Literal[True]=...)->dict[str, Any] | tuple[str, NDArray[uint32], int, int, float]
numpy.random.mtrand.RandomState.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.mtrand.RandomState.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.logseries(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.logseries(self,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:None|_ShapeLike=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...)->NDArray[float64]
numpy.random.mtrand.RandomState.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random.mtrand.RandomState.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random.mtrand.RandomState.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.pareto(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.pareto(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.permutation(self,x:ArrayLike)->NDArray[Any]
numpy.random.mtrand.RandomState.permutation(self,x:int)->NDArray[long]
numpy.random.mtrand.RandomState.poisson(self,lam:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.poisson(self,lam:float=...,size:None=...)->int
numpy.random.mtrand.RandomState.power(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.power(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.rand(self)->float
numpy.random.mtrand.RandomState.rand(self,*args:int)->NDArray[float64]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:None|dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...)->NDArray[int64]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:_DTypeLikeBool=...)->NDArray[np.bool]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...)->NDArray[int16]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...)->NDArray[int32]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...)->NDArray[int8]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[long]|type[int]|type[long]|_LongCodes|_SupportsDType[dtype[long]]=...)->NDArray[long]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...)->NDArray[uint16]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...)->NDArray[uint32]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...)->NDArray[uint64]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...)->NDArray[uint8]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[ulong]|type[ulong]|_ULongCodes|_SupportsDType[dtype[ulong]]=...)->NDArray[ulong]
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...)->int
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...)->int16
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...)->int32
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...)->int64
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...)->int8
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int_]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...)->int_
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[long]|type[long]|_LongCodes|_SupportsDType[dtype[long]]=...)->long
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...)->uint16
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...)->uint32
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...)->uint64
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...)->uint8
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...)->uint
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:dtype[ulong]|type[ulong]|_ULongCodes|_SupportsDType[dtype[ulong]]=...)->ulong
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[bool]=...)->bool
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[int]=...)->int
numpy.random.mtrand.RandomState.randint(self,low:int,high:None|int=...,size:None=...,dtype:type[np.bool]=...)->np.bool
numpy.random.mtrand.RandomState.randn(self)->float
numpy.random.mtrand.RandomState.randn(self,*args:int)->NDArray[float64]
numpy.random.mtrand.RandomState.random(self,size:None=...)->float
numpy.random.mtrand.RandomState.random(self,size:_ShapeLike)->NDArray[float64]
numpy.random.mtrand.RandomState.random_integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.random_integers(self,low:int,high:None|int=...,size:None=...)->int
numpy.random.mtrand.RandomState.random_sample(self,size:None=...)->float
numpy.random.mtrand.RandomState.random_sample(self,size:_ShapeLike)->NDArray[float64]
numpy.random.mtrand.RandomState.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.seed(self,seed:None|_ArrayLikeFloat_co=...)->None
numpy.random.mtrand.RandomState.set_state(self,state:dict[str,Any]|tuple[str,NDArray[uint32],int,int,float])->None
numpy.random.mtrand.RandomState.shuffle(self,x:ArrayLike)->None
numpy.random.mtrand.RandomState.standard_cauchy(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_cauchy(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_exponential(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_exponential(self,size:_ShapeLike)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_gamma(self,shape:float,size:None=...)->float
numpy.random.mtrand.RandomState.standard_normal(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_normal(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.standard_t(self,df:float,size:None=...)->float
numpy.random.mtrand.RandomState.tomaxint(self,size:None=...)->int
numpy.random.mtrand.RandomState.tomaxint(self,size:_ShapeLike)->NDArray[int64]
numpy.random.mtrand.RandomState.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random.mtrand.RandomState.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random.mtrand.RandomState.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random.mtrand.RandomState.weibull(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.mtrand.RandomState.weibull(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.zipf(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[long]
numpy.random.mtrand.RandomState.zipf(self,a:float,size:None=...)->int
numpy.random.mtrand.get_bit_generator()->BitGenerator
numpy.random.mtrand.set_bit_generator(bitgen:BitGenerator)->None
numpy.random.set_bit_generator(bitgen:BitGenerator)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/__init__.py----------------------------------------
A:numpy.random.__init__.test->PytestTester(__name__)
numpy.random.__init__.__RandomState_ctor()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/bit_generator.pyi----------------------------------------
numpy.random.BitGenerator(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.BitGenerator.__getstate__(self)->tuple[dict[str, Any], ISeedSequence]
numpy.random.BitGenerator.__reduce__(self)->tuple[Callable[[str], BitGenerator], tuple[str], tuple[dict[str, Any], ISeedSequence]]
numpy.random.BitGenerator.__setstate__(self,state_seed_seq:dict[str,Any]|tuple[dict[str,Any],ISeedSequence])->None
numpy.random.BitGenerator._benchmark(self,cnt:int,method:str=...)->None
numpy.random.BitGenerator.cffi(self)->_Interface
numpy.random.BitGenerator.ctypes(self)->_Interface
numpy.random.BitGenerator.random_raw(self,size:None=...,output:Literal[True]=...)->int
numpy.random.BitGenerator.random_raw(self,size:None|_ShapeLike=...,output:Literal[False]=...)->None
numpy.random.BitGenerator.random_raw(self,size:_ShapeLike=...,output:Literal[True]=...)->NDArray[uint64]
numpy.random.BitGenerator.seed_seq(self)->ISeedSequence
numpy.random.BitGenerator.spawn(self,n_children:int)->list[BitGenerator]
numpy.random.BitGenerator.state(self)->Mapping[str, Any]
numpy.random.BitGenerator.state(self,value:Mapping[str,Any])->None
numpy.random.SeedSequence(self,entropy:None|int|Sequence[int]|_ArrayLikeInt_co=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.SeedSequence.__repr__(self)->str
numpy.random.SeedSequence.generate_state(self,n_words:int,dtype:_DTypeLikeUint32|_DTypeLikeUint64=...)->NDArray[uint32 | uint64]
numpy.random.SeedSequence.spawn(self,n_children:int)->list[SeedSequence]
numpy.random.SeedSequence.state(self)->_SeedSeqState
numpy.random.bit_generator.BitGenerator(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.bit_generator.BitGenerator.__getstate__(self)->tuple[dict[str, Any], ISeedSequence]
numpy.random.bit_generator.BitGenerator.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.bit_generator.BitGenerator.__reduce__(self)->tuple[Callable[[str], BitGenerator], tuple[str], tuple[dict[str, Any], ISeedSequence]]
numpy.random.bit_generator.BitGenerator.__setstate__(self,state_seed_seq:dict[str,Any]|tuple[dict[str,Any],ISeedSequence])->None
numpy.random.bit_generator.BitGenerator._benchmark(self,cnt:int,method:str=...)->None
numpy.random.bit_generator.BitGenerator.cffi(self)->_Interface
numpy.random.bit_generator.BitGenerator.ctypes(self)->_Interface
numpy.random.bit_generator.BitGenerator.random_raw(self,size:None=...,output:Literal[True]=...)->int
numpy.random.bit_generator.BitGenerator.random_raw(self,size:None|_ShapeLike=...,output:Literal[False]=...)->None
numpy.random.bit_generator.BitGenerator.random_raw(self,size:_ShapeLike=...,output:Literal[True]=...)->NDArray[uint64]
numpy.random.bit_generator.BitGenerator.seed_seq(self)->ISeedSequence
numpy.random.bit_generator.BitGenerator.spawn(self,n_children:int)->list[BitGenerator]
numpy.random.bit_generator.BitGenerator.state(self)->Mapping[str, Any]
numpy.random.bit_generator.BitGenerator.state(self,value:Mapping[str,Any])->None
numpy.random.bit_generator.ISeedSequence(abc.ABC)
numpy.random.bit_generator.ISeedSequence.generate_state(self,n_words:int,dtype:_DTypeLikeUint32|_DTypeLikeUint64=...)->NDArray[uint32 | uint64]
numpy.random.bit_generator.ISpawnableSeedSequence(ISeedSequence)
numpy.random.bit_generator.ISpawnableSeedSequence.spawn(self:_T,n_children:int)->list[_T]
numpy.random.bit_generator.SeedSequence(self,entropy:None|int|Sequence[int]|_ArrayLikeInt_co=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.bit_generator.SeedSequence.__init__(self,entropy:None|int|Sequence[int]|_ArrayLikeInt_co=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.bit_generator.SeedSequence.__repr__(self)->str
numpy.random.bit_generator.SeedSequence.generate_state(self,n_words:int,dtype:_DTypeLikeUint32|_DTypeLikeUint64=...)->NDArray[uint32 | uint64]
numpy.random.bit_generator.SeedSequence.spawn(self,n_children:int)->list[SeedSequence]
numpy.random.bit_generator.SeedSequence.state(self)->_SeedSeqState
numpy.random.bit_generator.SeedlessSeedSequence(ISpawnableSeedSequence)
numpy.random.bit_generator.SeedlessSeedSequence.generate_state(self,n_words:int,dtype:_DTypeLikeUint32|_DTypeLikeUint64=...)->NDArray[uint32 | uint64]
numpy.random.bit_generator.SeedlessSeedSequence.spawn(self:_T,n_children:int)->list[_T]
numpy.random.bit_generator._Interface(NamedTuple)
numpy.random.bit_generator._SeedSeqState(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_philox.pyi----------------------------------------
numpy.random.Philox(self,seed:None|_ArrayLikeInt_co|SeedSequence=...,counter:None|_ArrayLikeInt_co=...,key:None|_ArrayLikeInt_co=...)
numpy.random.Philox.advance(self,delta:int)->Philox
numpy.random.Philox.jumped(self,jumps:int=...)->Philox
numpy.random.Philox.state(self)->_PhiloxState
numpy.random.Philox.state(self,value:_PhiloxState)->None
numpy.random._philox.Philox(self,seed:None|_ArrayLikeInt_co|SeedSequence=...,counter:None|_ArrayLikeInt_co=...,key:None|_ArrayLikeInt_co=...)
numpy.random._philox.Philox.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...,counter:None|_ArrayLikeInt_co=...,key:None|_ArrayLikeInt_co=...)
numpy.random._philox.Philox.advance(self,delta:int)->Philox
numpy.random._philox.Philox.jumped(self,jumps:int=...)->Philox
numpy.random._philox.Philox.state(self)->_PhiloxState
numpy.random._philox.Philox.state(self,value:_PhiloxState)->None
numpy.random._philox._PhiloxInternal(TypedDict)
numpy.random._philox._PhiloxState(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_mt19937.pyi----------------------------------------
numpy.random.MT19937(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.MT19937._legacy_seeding(self,seed:_ArrayLikeInt_co)->None
numpy.random.MT19937.jumped(self,jumps:int=...)->MT19937
numpy.random.MT19937.state(self)->_MT19937State
numpy.random.MT19937.state(self,value:_MT19937State)->None
numpy.random._mt19937.MT19937(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._mt19937.MT19937.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._mt19937.MT19937._legacy_seeding(self,seed:_ArrayLikeInt_co)->None
numpy.random._mt19937.MT19937.jumped(self,jumps:int=...)->MT19937
numpy.random._mt19937.MT19937.state(self)->_MT19937State
numpy.random._mt19937.MT19937.state(self,value:_MT19937State)->None
numpy.random._mt19937._MT19937Internal(TypedDict)
numpy.random._mt19937._MT19937State(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_sfc64.pyi----------------------------------------
numpy.random.SFC64(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.SFC64.state(self)->_SFC64State
numpy.random.SFC64.state(self,value:_SFC64State)->None
numpy.random._sfc64.SFC64(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._sfc64.SFC64.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._sfc64.SFC64.state(self)->_SFC64State
numpy.random._sfc64.SFC64.state(self,value:_SFC64State)->None
numpy.random._sfc64._SFC64Internal(TypedDict)
numpy.random._sfc64._SFC64State(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_pcg64.pyi----------------------------------------
numpy.random.PCG64(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.PCG64.advance(self,delta:int)->PCG64
numpy.random.PCG64.jumped(self,jumps:int=...)->PCG64
numpy.random.PCG64.state(self)->_PCG64State
numpy.random.PCG64.state(self,value:_PCG64State)->None
numpy.random.PCG64DXSM(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random.PCG64DXSM.advance(self,delta:int)->PCG64DXSM
numpy.random.PCG64DXSM.jumped(self,jumps:int=...)->PCG64DXSM
numpy.random.PCG64DXSM.state(self)->_PCG64State
numpy.random.PCG64DXSM.state(self,value:_PCG64State)->None
numpy.random._pcg64.PCG64(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._pcg64.PCG64.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._pcg64.PCG64.advance(self,delta:int)->PCG64
numpy.random._pcg64.PCG64.jumped(self,jumps:int=...)->PCG64
numpy.random._pcg64.PCG64.state(self)->_PCG64State
numpy.random._pcg64.PCG64.state(self,value:_PCG64State)->None
numpy.random._pcg64.PCG64DXSM(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._pcg64.PCG64DXSM.__init__(self,seed:None|_ArrayLikeInt_co|SeedSequence=...)
numpy.random._pcg64.PCG64DXSM.advance(self,delta:int)->PCG64DXSM
numpy.random._pcg64.PCG64DXSM.jumped(self,jumps:int=...)->PCG64DXSM
numpy.random._pcg64.PCG64DXSM.state(self)->_PCG64State
numpy.random._pcg64.PCG64DXSM.state(self,value:_PCG64State)->None
numpy.random._pcg64._PCG64Internal(TypedDict)
numpy.random._pcg64._PCG64State(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_pickle.py----------------------------------------
numpy.random._pickle.__bit_generator_ctor(bit_generator:str|type[BitGenerator]='MT19937')
numpy.random._pickle.__generator_ctor(bit_generator_name='MT19937',bit_generator_ctor=__bit_generator_ctor)
numpy.random._pickle.__randomstate_ctor(bit_generator_name='MT19937',bit_generator_ctor=__bit_generator_ctor)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_generator.pyi----------------------------------------
numpy.random.Generator(self,bit_generator:BitGenerator)
numpy.random.Generator.__getstate__(self)->None
numpy.random.Generator.__reduce__(self)->tuple[Callable[[BitGenerator], Generator], tuple[BitGenerator], None]
numpy.random.Generator.__repr__(self)->str
numpy.random.Generator.__setstate__(self,state:dict[str,Any]|None)->None
numpy.random.Generator.__str__(self)->str
numpy.random.Generator.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.beta(self,a:_FloatLike_co,b:_FloatLike_co,size:None=...)->float
numpy.random.Generator.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.binomial(self,n:int,p:_FloatLike_co,size:None=...)->int
numpy.random.Generator.bit_generator(self)->BitGenerator
numpy.random.Generator.bytes(self,length:int)->bytes
numpy.random.Generator.chisquare(self,df:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.chisquare(self,df:_FloatLike_co,size:None=...)->float
numpy.random.Generator.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->Any
numpy.random.Generator.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->NDArray[Any]
numpy.random.Generator.choice(self,a:int,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->int
numpy.random.Generator.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->NDArray[int64]
numpy.random.Generator.dirichlet(self,alpha:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.exponential(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.exponential(self,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.f(self,dfnum:_FloatLike_co,dfden:_FloatLike_co,size:None=...)->float
numpy.random.Generator.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.gamma(self,shape:_FloatLike_co,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.geometric(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.geometric(self,p:_FloatLike_co,size:None=...)->int
numpy.random.Generator.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.gumbel(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:None|dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...,endpoint:bool=...)->NDArray[int64]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->NDArray[np.bool]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...,endpoint:bool=...)->NDArray[int16]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...,endpoint:bool=...)->NDArray[int32]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...,endpoint:bool=...)->NDArray[int8]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int_]|type[int]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...,endpoint:bool=...)->NDArray[int_]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...,endpoint:bool=...)->NDArray[uint16]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...,endpoint:bool=...)->NDArray[uint32]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...,endpoint:bool=...)->NDArray[uint64]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...,endpoint:bool=...)->NDArray[uint8]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...,endpoint:bool=...)->NDArray[uint]
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...)->int
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...,endpoint:bool=...)->int16
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...,endpoint:bool=...)->int32
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...,endpoint:bool=...)->int64
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...,endpoint:bool=...)->int8
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int_]|type[int]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...,endpoint:bool=...)->int_
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...,endpoint:bool=...)->uint16
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...,endpoint:bool=...)->uint32
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...,endpoint:bool=...)->uint64
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...,endpoint:bool=...)->uint8
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...,endpoint:bool=...)->uint
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[bool]=...,endpoint:bool=...)->bool
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[int]=...,endpoint:bool=...)->int
numpy.random.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[np.bool]=...,endpoint:bool=...)->np.bool
numpy.random.Generator.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.laplace(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.logistic(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.lognormal(self,mean:_FloatLike_co=...,sigma:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.logseries(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.logseries(self,p:_FloatLike_co,size:None=...)->int
numpy.random.Generator.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.multivariate_hypergeometric(self,colors:_ArrayLikeInt_co,nsample:int,size:None|_ShapeLike=...,method:Literal['marginals','count']=...)->NDArray[int64]
numpy.random.Generator.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:None|_ShapeLike=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...,*,method:Literal['svd','eigh','cholesky']=...)->NDArray[float64]
numpy.random.Generator.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.negative_binomial(self,n:_FloatLike_co,p:_FloatLike_co,size:None=...)->int
numpy.random.Generator.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.noncentral_chisquare(self,df:_FloatLike_co,nonc:_FloatLike_co,size:None=...)->float
numpy.random.Generator.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.noncentral_f(self,dfnum:_FloatLike_co,dfden:_FloatLike_co,nonc:_FloatLike_co,size:None=...)->float
numpy.random.Generator.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.normal(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.pareto(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.pareto(self,a:_FloatLike_co,size:None=...)->float
numpy.random.Generator.permutation(self,x:ArrayLike,axis:int=...)->NDArray[Any]
numpy.random.Generator.permutation(self,x:int,axis:int=...)->NDArray[int64]
numpy.random.Generator.permuted(self,x:ArrayLike,*,axis:None|int=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy.random.Generator.poisson(self,lam:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.poisson(self,lam:_FloatLike_co=...,size:None=...)->int
numpy.random.Generator.power(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.power(self,a:_FloatLike_co,size:None=...)->float
numpy.random.Generator.random(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.random(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random.Generator.random(self,size:_ShapeLike=...,*,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.rayleigh(self,scale:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.shuffle(self,x:ArrayLike,axis:int=...)->None
numpy.random.Generator.spawn(self,n_children:int)->list[Generator]
numpy.random.Generator.standard_cauchy(self,size:None=...)->float
numpy.random.Generator.standard_cauchy(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.standard_exponential(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_exponential(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:None=...)->float
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,*,method:Literal['zig','inv']=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,method:Literal['zig','inv']=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_gamma(self,shape:_FloatLike_co,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random.Generator.standard_normal(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_normal(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->NDArray[float64]
numpy.random.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.standard_t(self,df:_FloatLike_co,size:None=...)->float
numpy.random.Generator.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.triangular(self,left:_FloatLike_co,mode:_FloatLike_co,right:_FloatLike_co,size:None=...)->float
numpy.random.Generator.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.uniform(self,low:_FloatLike_co=...,high:_FloatLike_co=...,size:None=...)->float
numpy.random.Generator.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.vonmises(self,mu:_FloatLike_co,kappa:_FloatLike_co,size:None=...)->float
numpy.random.Generator.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.wald(self,mean:_FloatLike_co,scale:_FloatLike_co,size:None=...)->float
numpy.random.Generator.weibull(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random.Generator.weibull(self,a:_FloatLike_co,size:None=...)->float
numpy.random.Generator.zipf(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random.Generator.zipf(self,a:_FloatLike_co,size:None=...)->int
numpy.random._generator.Generator(self,bit_generator:BitGenerator)
numpy.random._generator.Generator.__getstate__(self)->None
numpy.random._generator.Generator.__init__(self,bit_generator:BitGenerator)
numpy.random._generator.Generator.__reduce__(self)->tuple[Callable[[BitGenerator], Generator], tuple[BitGenerator], None]
numpy.random._generator.Generator.__repr__(self)->str
numpy.random._generator.Generator.__setstate__(self,state:dict[str,Any]|None)->None
numpy.random._generator.Generator.__str__(self)->str
numpy.random._generator.Generator.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.beta(self,a:_FloatLike_co,b:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.binomial(self,n:int,p:_FloatLike_co,size:None=...)->int
numpy.random._generator.Generator.bit_generator(self)->BitGenerator
numpy.random._generator.Generator.bytes(self,length:int)->bytes
numpy.random._generator.Generator.chisquare(self,df:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.chisquare(self,df:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->Any
numpy.random._generator.Generator.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->NDArray[Any]
numpy.random._generator.Generator.choice(self,a:int,size:None=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->int
numpy.random._generator.Generator.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:None|_ArrayLikeFloat_co=...,axis:int=...,shuffle:bool=...)->NDArray[int64]
numpy.random._generator.Generator.dirichlet(self,alpha:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.exponential(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.exponential(self,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.f(self,dfnum:_FloatLike_co,dfden:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.gamma(self,shape:_FloatLike_co,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.geometric(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.geometric(self,p:_FloatLike_co,size:None=...)->int
numpy.random._generator.Generator.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.gumbel(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:None|dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...,endpoint:bool=...)->NDArray[int64]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->NDArray[np.bool]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...,endpoint:bool=...)->NDArray[int16]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...,endpoint:bool=...)->NDArray[int32]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...,endpoint:bool=...)->NDArray[int8]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[int_]|type[int]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...,endpoint:bool=...)->NDArray[int_]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...,endpoint:bool=...)->NDArray[uint16]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...,endpoint:bool=...)->NDArray[uint32]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...,endpoint:bool=...)->NDArray[uint64]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...,endpoint:bool=...)->NDArray[uint8]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:None|_ArrayLikeInt_co=...,size:None|_ShapeLike=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...,endpoint:bool=...)->NDArray[uint]
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...)->int
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int16]|type[int16]|_Int16Codes|_SupportsDType[dtype[int16]]=...,endpoint:bool=...)->int16
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int32]|type[int32]|_Int32Codes|_SupportsDType[dtype[int32]]=...,endpoint:bool=...)->int32
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int64]|type[int64]|_Int64Codes|_SupportsDType[dtype[int64]]=...,endpoint:bool=...)->int64
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int8]|type[int8]|_Int8Codes|_SupportsDType[dtype[int8]]=...,endpoint:bool=...)->int8
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[int_]|type[int]|type[int_]|_IntCodes|_SupportsDType[dtype[int_]]=...,endpoint:bool=...)->int_
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint16]|type[uint16]|_UInt16Codes|_SupportsDType[dtype[uint16]]=...,endpoint:bool=...)->uint16
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint32]|type[uint32]|_UInt32Codes|_SupportsDType[dtype[uint32]]=...,endpoint:bool=...)->uint32
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint64]|type[uint64]|_UInt64Codes|_SupportsDType[dtype[uint64]]=...,endpoint:bool=...)->uint64
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint8]|type[uint8]|_UInt8Codes|_SupportsDType[dtype[uint8]]=...,endpoint:bool=...)->uint8
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:dtype[uint]|type[uint]|_UIntCodes|_SupportsDType[dtype[uint]]=...,endpoint:bool=...)->uint
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[bool]=...,endpoint:bool=...)->bool
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[int]=...,endpoint:bool=...)->int
numpy.random._generator.Generator.integers(self,low:int,high:None|int=...,size:None=...,dtype:type[np.bool]=...,endpoint:bool=...)->np.bool
numpy.random._generator.Generator.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.laplace(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.logistic(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.lognormal(self,mean:_FloatLike_co=...,sigma:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.logseries(self,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.logseries(self,p:_FloatLike_co,size:None=...)->int
numpy.random._generator.Generator.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.multivariate_hypergeometric(self,colors:_ArrayLikeInt_co,nsample:int,size:None|_ShapeLike=...,method:Literal['marginals','count']=...)->NDArray[int64]
numpy.random._generator.Generator.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:None|_ShapeLike=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...,*,method:Literal['svd','eigh','cholesky']=...)->NDArray[float64]
numpy.random._generator.Generator.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.negative_binomial(self,n:_FloatLike_co,p:_FloatLike_co,size:None=...)->int
numpy.random._generator.Generator.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.noncentral_chisquare(self,df:_FloatLike_co,nonc:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.noncentral_f(self,dfnum:_FloatLike_co,dfden:_FloatLike_co,nonc:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.normal(self,loc:_FloatLike_co=...,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.pareto(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.pareto(self,a:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.permutation(self,x:ArrayLike,axis:int=...)->NDArray[Any]
numpy.random._generator.Generator.permutation(self,x:int,axis:int=...)->NDArray[int64]
numpy.random._generator.Generator.permuted(self,x:ArrayLike,*,axis:None|int=...,out:None|NDArray[Any]=...)->NDArray[Any]
numpy.random._generator.Generator.poisson(self,lam:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.poisson(self,lam:_FloatLike_co=...,size:None=...)->int
numpy.random._generator.Generator.power(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.power(self,a:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.random(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.random(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,*,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.rayleigh(self,scale:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.shuffle(self,x:ArrayLike,axis:int=...)->None
numpy.random._generator.Generator.spawn(self,n_children:int)->list[Generator]
numpy.random._generator.Generator.standard_cauchy(self,size:None=...)->float
numpy.random._generator.Generator.standard_cauchy(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.standard_exponential(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_exponential(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:None=...)->float
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,*,method:Literal['zig','inv']=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,method:Literal['zig','inv']=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:None|_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_gamma(self,shape:_FloatLike_co,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random._generator.Generator.standard_normal(self,*,out:NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_normal(self,size:None=...,dtype:_DTypeLikeFloat32|_DTypeLikeFloat64=...,out:None=...)->float
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:None|NDArray[float32]=...)->NDArray[float32]
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:None|NDArray[float64]=...)->NDArray[float64]
numpy.random._generator.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->NDArray[float64]
numpy.random._generator.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.standard_t(self,df:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.triangular(self,left:_FloatLike_co,mode:_FloatLike_co,right:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.uniform(self,low:_FloatLike_co=...,high:_FloatLike_co=...,size:None=...)->float
numpy.random._generator.Generator.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.vonmises(self,mu:_FloatLike_co,kappa:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.wald(self,mean:_FloatLike_co,scale:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.weibull(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[float64]
numpy.random._generator.Generator.weibull(self,a:_FloatLike_co,size:None=...)->float
numpy.random._generator.Generator.zipf(self,a:_ArrayLikeFloat_co,size:None|_ShapeLike=...)->NDArray[int64]
numpy.random._generator.Generator.zipf(self,a:_FloatLike_co,size:None=...)->int
numpy.random._generator.default_rng(seed:None|_ArrayLikeInt_co|SeedSequence|BitGenerator|Generator=...)->Generator
numpy.random.default_rng(seed:None|_ArrayLikeInt_co|SeedSequence|BitGenerator|Generator=...)->Generator


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_direct.py----------------------------------------
A:numpy.random.tests.test_direct.pwd->os.path.dirname(os.path.abspath(__file__))
A:numpy.random.tests.test_direct.x->numpy.uint32(x & np.uint64(4294967295))
A:numpy.random.tests.test_direct.upper->numpy.array(x >> np.uint64(32), dtype=np.uint32)
A:numpy.random.tests.test_direct.lower->numpy.array(x & lower, dtype=np.uint32)
A:numpy.random.tests.test_direct.joined->numpy.column_stack([lower, upper]).ravel()
A:numpy.random.tests.test_direct.out->numpy.empty(len(x) // 2)
A:numpy.random.tests.test_direct.doubles->uniform_from_dsfmt(x)
A:numpy.random.tests.test_direct.f->numpy.sqrt(-2.0 * np.log(r2) / r2)
A:numpy.random.tests.test_direct.s1->SeedSequence(range(10), spawn_key=(1, 2), pool_size=6)
A:numpy.random.tests.test_direct.s2->SeedSequence(**s1.state)
A:numpy.random.tests.test_direct.dummy->SeedlessSeedSequence()
A:numpy.random.tests.test_direct.rng->numpy.random.default_rng(FakeSeedSequence())
A:numpy.random.tests.test_direct.new_ss->seq.spawn(5)
A:numpy.random.tests.test_direct.new_bgs->numpy.random.default_rng(FakeSeedSequence()).bit_generator.spawn(5)
A:numpy.random.tests.test_direct.new_rngs->numpy.random.default_rng(FakeSeedSequence()).spawn(5)
A:numpy.random.tests.test_direct.seed->seed.split(',').split(',')
A:numpy.random.tests.test_direct.bit_generator->self.bit_generator(*self.data1['seed'])
A:numpy.random.tests.test_direct.uints->self.bit_generator(*self.data1['seed']).random_raw(1000, output=False)
A:numpy.random.tests.test_direct.rs->Generator(self.bit_generator(*self.data1['seed']))
A:numpy.random.tests.test_direct.gauss->Generator(self.bit_generator(*self.data1['seed'])).standard_normal(25)
A:numpy.random.tests.test_direct.vals->uniform32_from_uint(self.data2['data'], self.bits)
A:numpy.random.tests.test_direct.uniforms->Generator(self.bit_generator(*self.data1['seed'])).random(len(vals), dtype=np.float32)
A:numpy.random.tests.test_direct.bitgen_pkl->pickle.dumps(bit_generator)
A:numpy.random.tests.test_direct.reloaded->pickle.loads(bitgen_pkl)
A:numpy.random.tests.test_direct.ss->SeedSequence(100)
A:numpy.random.tests.test_direct.aa->pickle.loads(pickle.dumps(ss))
A:numpy.random.tests.test_direct.bg_plk->pickle.loads(pickle.dumps(bit_generator))
A:numpy.random.tests.test_direct.alt_state->self.bit_generator(*self.data1['seed']).__getstate__()
A:numpy.random.tests.test_direct.cls.data1->cls._read_csv(join(pwd, './data/sfc64-testset-1.csv'))
A:numpy.random.tests.test_direct.cls.data2->cls._read_csv(join(pwd, './data/sfc64-testset-2.csv'))
A:numpy.random.tests.test_direct.keyed->self.bit_generator(counter=state['state']['counter'], key=state['state']['key'])
A:numpy.random.tests.test_direct.val_neg->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.val_pos->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.val_big->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.desired->Generator(self.bit_generator(*self.data1['seed'])).integers(2 ** 16)
A:numpy.random.tests.test_direct.actual->Generator(self.bit_generator(*self.data1['seed'])).integers(2 ** 16)
A:numpy.random.tests.test_direct.expected_state->numpy.array([9957867060933711493, 532597980065565856, 14769588338631205282, 13], dtype=np.uint64)
A:numpy.random.tests.test_direct.pkl_file->os.path.join(base_path, 'data', f'sfc64_np126.pkl.gz')
A:numpy.random.tests.test_direct.sfc->pickle.load(gz)
A:numpy.random.tests.test_direct.rg->default_rng(bg)
A:numpy.random.tests.test_direct.bg->Philox()
A:numpy.random.tests.test_direct.rg2->default_rng(rg)
numpy.random.tests.test_direct.Base
numpy.random.tests.test_direct.Base._read_csv(cls,filename)
numpy.random.tests.test_direct.Base.setup_class(cls)
numpy.random.tests.test_direct.Base.test_benchmark(self)
numpy.random.tests.test_direct.Base.test_cffi(self)
numpy.random.tests.test_direct.Base.test_ctypes(self)
numpy.random.tests.test_direct.Base.test_gauss_inv(self)
numpy.random.tests.test_direct.Base.test_getstate(self)
numpy.random.tests.test_direct.Base.test_invalid_init_type(self)
numpy.random.tests.test_direct.Base.test_invalid_init_values(self)
numpy.random.tests.test_direct.Base.test_invalid_state_type(self)
numpy.random.tests.test_direct.Base.test_invalid_state_value(self)
numpy.random.tests.test_direct.Base.test_pickle(self)
numpy.random.tests.test_direct.Base.test_pickle_preserves_seed_sequence(self)
numpy.random.tests.test_direct.Base.test_random_raw(self)
numpy.random.tests.test_direct.Base.test_raw(self)
numpy.random.tests.test_direct.Base.test_repr(self)
numpy.random.tests.test_direct.Base.test_str(self)
numpy.random.tests.test_direct.Base.test_uniform_double(self)
numpy.random.tests.test_direct.Base.test_uniform_float(self)
numpy.random.tests.test_direct.TestDefaultRNG
numpy.random.tests.test_direct.TestDefaultRNG.test_passthrough(self)
numpy.random.tests.test_direct.TestDefaultRNG.test_seed(self)
numpy.random.tests.test_direct.TestMT19937(Base)
numpy.random.tests.test_direct.TestMT19937.setup_class(cls)
numpy.random.tests.test_direct.TestMT19937.test_seed_float_array(self)
numpy.random.tests.test_direct.TestMT19937.test_state_tuple(self)
numpy.random.tests.test_direct.TestPCG64(Base)
numpy.random.tests.test_direct.TestPCG64.setup_class(cls)
numpy.random.tests.test_direct.TestPCG64.test_advance_symmetry(self)
numpy.random.tests.test_direct.TestPCG64.test_advange_large(self)
numpy.random.tests.test_direct.TestPCG64DXSM(Base)
numpy.random.tests.test_direct.TestPCG64DXSM.setup_class(cls)
numpy.random.tests.test_direct.TestPCG64DXSM.test_advance_symmetry(self)
numpy.random.tests.test_direct.TestPCG64DXSM.test_advange_large(self)
numpy.random.tests.test_direct.TestPhilox(Base)
numpy.random.tests.test_direct.TestPhilox.setup_class(cls)
numpy.random.tests.test_direct.TestPhilox.test_set_key(self)
numpy.random.tests.test_direct.TestSFC64(Base)
numpy.random.tests.test_direct.TestSFC64.setup_class(cls)
numpy.random.tests.test_direct.TestSFC64.test_legacy_pickle(self)
numpy.random.tests.test_direct.assert_state_equal(actual,target)
numpy.random.tests.test_direct.gauss_from_uint(x,n,bits)
numpy.random.tests.test_direct.test_generator_spawning()
numpy.random.tests.test_direct.test_non_spawnable()
numpy.random.tests.test_direct.test_seedsequence()
numpy.random.tests.test_direct.uint32_to_float32(u)
numpy.random.tests.test_direct.uniform32_from_uint(x,bits)
numpy.random.tests.test_direct.uniform32_from_uint32(x)
numpy.random.tests.test_direct.uniform32_from_uint53(x)
numpy.random.tests.test_direct.uniform32_from_uint64(x)
numpy.random.tests.test_direct.uniform_from_dsfmt(x)
numpy.random.tests.test_direct.uniform_from_uint(x,bits)
numpy.random.tests.test_direct.uniform_from_uint32(x)
numpy.random.tests.test_direct.uniform_from_uint64(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_randomstate.py----------------------------------------
A:numpy.random.tests.test_randomstate.orig_bitgen->numpy.random.get_bit_generator()
A:numpy.random.tests.test_randomstate.s->tuple()
A:numpy.random.tests.test_randomstate.rs->numpy.random.RandomState(MT19937(0))
A:numpy.random.tests.test_randomstate.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_randomstate.x->numpy.array(3)
A:numpy.random.tests.test_randomstate.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_randomstate.non_contig->numpy.random.dirichlet(alpha, size=(3, 2))
A:numpy.random.tests.test_randomstate.contig->numpy.random.dirichlet(np.ascontiguousarray(alpha), size=(3, 2))
A:numpy.random.tests.test_randomstate.self.random_state->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_randomstate.self.state->self.random_state.get_state()
A:numpy.random.tests.test_randomstate.old->self.random_state.standard_normal(size=3)
A:numpy.random.tests.test_randomstate.new->self.random_state.standard_normal(size=3)
A:numpy.random.tests.test_randomstate.state->numpy.random.get_state()
A:numpy.random.tests.test_randomstate.x1->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.x2->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.x3->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_randomstate.pickled->self.random_state.get_state(legacy=False)
A:numpy.random.tests.test_randomstate.rs_unpick->pickle.loads(pickle.dumps(self.random_state))
A:numpy.random.tests.test_randomstate.unpickled->pickle.loads(pickle.dumps(self.random_state)).get_state(legacy=False)
A:numpy.random.tests.test_randomstate.attr_state->self.random_state.__getstate__()
A:numpy.random.tests.test_randomstate.vals->numpy.random.randint(0, 2 ** 30, 10)
A:numpy.random.tests.test_randomstate.val->val.byteswap().byteswap()
A:numpy.random.tests.test_randomstate.res->hashlib.sha256(val.view(np.int8)).hexdigest()
A:numpy.random.tests.test_randomstate.desired->numpy.array([1, 1, 1])
A:numpy.random.tests.test_randomstate.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_randomstate.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1)
A:numpy.random.tests.test_randomstate.actual->f(*args, size=2)
A:numpy.random.tests.test_randomstate.sample->self.rfunc(lbnd, ubnd, dtype=dt)
A:numpy.random.tests.test_randomstate.a->numpy.array([51.72840233779265, -1.0, 39.74494232180944])
A:numpy.random.tests.test_randomstate.arr->numpy.empty(1, dtype=object)
A:numpy.random.tests.test_randomstate.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_randomstate.b->ctor(*('MT19937',))
A:numpy.random.tests.test_randomstate.a_orig->numpy.array([51.72840233779265, -1.0, 39.74494232180944]).copy()
A:numpy.random.tests.test_randomstate.b_orig->ctor(*('MT19937',)).copy()
A:numpy.random.tests.test_randomstate.alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_randomstate.bad_alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_randomstate.cov->numpy.eye(2)
A:numpy.random.tests.test_randomstate.mu->numpy.zeros(2)
A:numpy.random.tests.test_randomstate.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_randomstate.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_randomstate.r->numpy.random.vonmises(mu=0.0, kappa=np.nan)
A:numpy.random.tests.test_randomstate.self.seeds->range(4)
A:numpy.random.tests.test_randomstate.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_randomstate.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_randomstate.out[...]->numpy.random.get_state().multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_randomstate.self.argOne->numpy.array([2])
A:numpy.random.tests.test_randomstate.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_randomstate.self.argThree->numpy.array([4])
A:numpy.random.tests.test_randomstate.out->func(self.argOne, self.argTwo[0], self.argThree)
A:numpy.random.tests.test_randomstate.argTwo->numpy.array([0.5])
A:numpy.random.tests.test_randomstate.f->getattr(random, fname)
A:numpy.random.tests.test_randomstate.(ctor, args, state_a)->numpy.random.RandomState(MT19937(0)).__reduce__()
A:numpy.random.tests.test_randomstate.state_b->ctor(*('MT19937',)).get_state(legacy=False)
A:numpy.random.tests.test_randomstate.def_bg->numpy.random.default_rng(0)
A:numpy.random.tests.test_randomstate.second_bg->numpy.random.get_bit_generator()
A:numpy.random.tests.test_randomstate.bg->PCG64(0)
A:numpy.random.tests.test_randomstate.new_state->numpy.random.get_state(legacy=False)
A:numpy.random.tests.test_randomstate.state_direct->numpy.random.get_state(legacy=False)
A:numpy.random.tests.test_randomstate.pcg_vals->numpy.random.randint(0, 2 ** 30, 10)
A:numpy.random.tests.test_randomstate.singleton_vals->numpy.random.randint(0, 2 ** 30, 10)
A:numpy.random.tests.test_randomstate.rg->numpy.random.RandomState(PCG64(98765))
A:numpy.random.tests.test_randomstate.non_singleton_vals->numpy.random.RandomState(PCG64(98765)).randint(0, 2 ** 30, 10)
numpy.random.tests.test_randomstate.TestBinomial
numpy.random.tests.test_randomstate.TestBinomial.test_n_zero(self)
numpy.random.tests.test_randomstate.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_randomstate.TestBroadcast
numpy.random.tests.test_randomstate.TestBroadcast.set_seed(self)
numpy.random.tests.test_randomstate.TestBroadcast.setup_method(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_beta(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_binomial(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_exponential(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_f(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_gamma(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_geometric(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_laplace(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_logistic(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_logseries(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_normal(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_pareto(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_poisson(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_power(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_triangular(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_uniform(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_wald(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_weibull(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_zipf(self)
numpy.random.tests.test_randomstate.TestMultinomial
numpy.random.tests.test_randomstate.TestMultinomial.test_basic(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_invalid_n(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_invalid_prob(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_multinomial_n_float(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_multinomial_pvals_float32(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_p_non_contiguous(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_size(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_randomstate.TestRandint
numpy.random.tests.test_randomstate.TestRandint.test_bounds_checking(self)
numpy.random.tests.test_randomstate.TestRandint.test_full_range(self)
numpy.random.tests.test_randomstate.TestRandint.test_in_bounds_fuzz(self)
numpy.random.tests.test_randomstate.TestRandint.test_int64_uint64_corner_case(self)
numpy.random.tests.test_randomstate.TestRandint.test_repeatability(self)
numpy.random.tests.test_randomstate.TestRandint.test_repeatability_32bit_boundary_broadcasting(self)
numpy.random.tests.test_randomstate.TestRandint.test_respect_dtype_singleton(self)
numpy.random.tests.test_randomstate.TestRandint.test_rng_zero_and_extremes(self)
numpy.random.tests.test_randomstate.TestRandint.test_unsupported_type(self)
numpy.random.tests.test_randomstate.TestRandomDist
numpy.random.tests.test_randomstate.TestRandomDist.setup_method(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_beta(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_binomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_bytes(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_p_non_contiguous(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_alpha_non_contiguous(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_exponential(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_f(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gamma(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_geometric(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_geometric_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_laplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logistic(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logseries(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logseries_exceptions(self,value)
numpy.random.tests.test_randomstate.TestRandomDist.test_logseries_zero(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_multivariate_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_negative_binomial_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_f_nan(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_pareto(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_permutation(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_poisson(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_power(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rand(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rand_singleton(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randint(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randn(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randn_singleton(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers_deprecated(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers_max_int(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_sample(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_tomaxint(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_triangular(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_uniform(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_large(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_nan(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_wald(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_weibull(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_zipf(self)
numpy.random.tests.test_randomstate.TestSeed
numpy.random.tests.test_randomstate.TestSeed.test_array(self)
numpy.random.tests.test_randomstate.TestSeed.test_cannot_seed(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_array(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_array_shape(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_initialization(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_randomstate.TestSeed.test_scalar(self)
numpy.random.tests.test_randomstate.TestSetState
numpy.random.tests.test_randomstate.TestSetState.setup_method(self)
numpy.random.tests.test_randomstate.TestSetState.test_backwards_compatibility(self)
numpy.random.tests.test_randomstate.TestSetState.test_basic(self)
numpy.random.tests.test_randomstate.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_randomstate.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_randomstate.TestSetState.test_get_state_warning(self)
numpy.random.tests.test_randomstate.TestSetState.test_invalid_legacy_state_setting(self)
numpy.random.tests.test_randomstate.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestSetState.test_pickle(self)
numpy.random.tests.test_randomstate.TestSetState.test_repr(self)
numpy.random.tests.test_randomstate.TestSetState.test_state_setting(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.setup_method(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_randomstate.TestThread
numpy.random.tests.test_randomstate.TestThread.check_function(self,function,sz)
numpy.random.tests.test_randomstate.TestThread.setup_method(self)
numpy.random.tests.test_randomstate.TestThread.test_exp(self)
numpy.random.tests.test_randomstate.TestThread.test_multinomial(self)
numpy.random.tests.test_randomstate.TestThread.test_normal(self)
numpy.random.tests.test_randomstate.assert_mt19937_state_equal(a,b)
numpy.random.tests.test_randomstate.int_func(request)
numpy.random.tests.test_randomstate.restore_singleton_bitgen()
numpy.random.tests.test_randomstate.test_broadcast_size_error()
numpy.random.tests.test_randomstate.test_hot_swap(restore_singleton_bitgen)
numpy.random.tests.test_randomstate.test_integer_dtype(int_func)
numpy.random.tests.test_randomstate.test_integer_repeat(int_func)
numpy.random.tests.test_randomstate.test_randomstate_ctor_old_style_pickle()
numpy.random.tests.test_randomstate.test_seed_alt_bit_gen(restore_singleton_bitgen)
numpy.random.tests.test_randomstate.test_state_error_alt_bit_gen(restore_singleton_bitgen)
numpy.random.tests.test_randomstate.test_swap_worked(restore_singleton_bitgen)
numpy.random.tests.test_randomstate.test_swapped_singleton_against_direct(restore_singleton_bitgen)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_extending.py----------------------------------------
A:numpy.random.tests.test_extending.srcdir->os.path.join(os.path.dirname(__file__), '..')
A:numpy.random.tests.test_extending.g->glob.glob(str(target_dir / '*' / 'extending.pyx.c'))
A:numpy.random.tests.test_extending.suffix->sysconfig.get_config_var('EXT_SUFFIX')
A:numpy.random.tests.test_extending.so->(target_dir / modname).with_suffix(suffix)
A:numpy.random.tests.test_extending.spec->spec_from_file_location(modname, so)
A:numpy.random.tests.test_extending.mod->module_from_spec(spec)
A:numpy.random.tests.test_extending.extending_distributions->load('extending_distributions')
A:numpy.random.tests.test_extending.values->load('extending_distributions').uniforms_ex(PCG64(0), 10, 'd')
numpy.random.tests.test_extending.test_cffi()
numpy.random.tests.test_extending.test_cython(tmp_path)
numpy.random.tests.test_extending.test_numba()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_regression.py----------------------------------------
A:numpy.random.tests.test_regression.r->numpy.random.mtrand.vonmises(mu, 1, 50)
A:numpy.random.tests.test_regression.rvsn->numpy.random.logseries(0.8, size=N)
A:numpy.random.tests.test_regression.shuffled->list(t)
A:numpy.random.tests.test_regression.expected->numpy.array([t[0], t[3], t[1], t[2]], dtype=object)
A:numpy.random.tests.test_regression.m->M()
A:numpy.random.tests.test_regression.res->numpy.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
A:numpy.random.tests.test_regression.x->numpy.random.beta(0.0001, 0.0001, size=100)
A:numpy.random.tests.test_regression.c->numpy.random.choice(a, p=probs)
A:numpy.random.tests.test_regression.a->numpy.arange(5)
A:numpy.random.tests.test_regression.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_regression.perm->numpy.random.permutation(m)
numpy.random.tests.test_regression.TestRegression
numpy.random.tests.test_regression.TestRegression.test_VonMises_range(self)
numpy.random.tests.test_regression.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_regression.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_regression.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_regression.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_regression.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_regression.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_regression.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_objects(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_randomstate_regression.py----------------------------------------
A:numpy.random.tests.test_randomstate_regression.r->numpy.random.vonmises(mu, 1, 50)
A:numpy.random.tests.test_randomstate_regression.rvsn->numpy.random.logseries(0.8, size=N)
A:numpy.random.tests.test_randomstate_regression.shuffled->list(t)
A:numpy.random.tests.test_randomstate_regression.expected->numpy.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 2, 3, 3, 1, 5, 3, 1, 3]])
A:numpy.random.tests.test_randomstate_regression.m->M()
A:numpy.random.tests.test_randomstate_regression.res->numpy.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
A:numpy.random.tests.test_randomstate_regression.x->numpy.random.beta(0.0001, 0.0001, size=100)
A:numpy.random.tests.test_randomstate_regression.c->numpy.random.choice(10, replace=False, size=2)
A:numpy.random.tests.test_randomstate_regression.a->numpy.arange(5)
A:numpy.random.tests.test_randomstate_regression.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_randomstate_regression.perm->numpy.random.permutation(m)
A:numpy.random.tests.test_randomstate_regression.rs1->numpy.random.RandomState(123456789)
A:numpy.random.tests.test_randomstate_regression.rs2->numpy.random.RandomState(seed=123456789)
A:numpy.random.tests.test_randomstate_regression.actual->numpy.random.randint(2 ** 32, size=10)
numpy.random.tests.test_randomstate_regression.TestRegression
numpy.random.tests.test_randomstate_regression.TestRegression.test_VonMises_range(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_choice_retun_dtype(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_n_zero_stream(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_named_argument_initialization(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_p_zero_stream(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_randint_117(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_of_array_of_objects(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_warns_byteorder(self)
numpy.random.tests.test_randomstate_regression.test_multinomial_1d_pval()
numpy.random.tests.test_randomstate_regression.test_multinomial_empty()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937.py----------------------------------------
A:numpy.random.tests.test_generator_mt19937.random->Generator(MT19937(self.seed))
A:numpy.random.tests.test_generator_mt19937.s->Generator(MT19937(self.seed)).multivariate_normal(mean, cov, size=(n_s,), method=method)
A:numpy.random.tests.test_generator_mt19937.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_generator_mt19937.x->Generator(MT19937(self.seed)).negative_binomial(1, 0)
A:numpy.random.tests.test_generator_mt19937.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_generator_mt19937.non_contig->Generator(MT19937(self.seed)).dirichlet(alpha, size=(3, 2))
A:numpy.random.tests.test_generator_mt19937.contig->Generator(MT19937(self.seed)).dirichlet(np.ascontiguousarray(alpha), size=(3, 2))
A:numpy.random.tests.test_generator_mt19937.int64_info->numpy.iinfo(np.int64)
A:numpy.random.tests.test_generator_mt19937.colors->numpy.array([10, 5, 20, 25])
A:numpy.random.tests.test_generator_mt19937.sample->Generator(MT19937(self.seed)).dirichlet(alpha, size=20000000)
A:numpy.random.tests.test_generator_mt19937.expected->numpy.array([[[1.0, 0.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0]]])
A:numpy.random.tests.test_generator_mt19937.self.rg->Generator(MT19937(self.seed))
A:numpy.random.tests.test_generator_mt19937.old->self.rg.standard_normal(size=3)
A:numpy.random.tests.test_generator_mt19937.new->self.rg.standard_normal(size=3)
A:numpy.random.tests.test_generator_mt19937.vals->self.rfunc(0, 2 - endpoint, size=2 ** 16, endpoint=endpoint, dtype=bool)
A:numpy.random.tests.test_generator_mt19937.scalar->Generator(MT19937(self.seed)).integers(lbnd, ubnd, size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.scalar_array->Generator(MT19937(self.seed)).integers([lbnd], [ubnd], size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.array->Generator(MT19937(self.seed)).integers([lbnd] * size, [ubnd] * size, size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.val->Generator(MT19937(self.seed)).integers(lbnd, ubnd, size=1000, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.res->hashlib.sha256(actual.view(np.int8)).hexdigest()
A:numpy.random.tests.test_generator_mt19937.val_bc->Generator(MT19937(self.seed)).integers([lbnd] * 1000, [ubnd] * 1000, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.desired->numpy.array([[[0, 0, 2, 1, 2, 0], [0, 0, 2, 1, 1, 1]], [[4, 2, 3, 3, 5, 3], [7, 2, 2, 1, 4, 4]]], dtype=np.int64)
A:numpy.random.tests.test_generator_mt19937.low_a->numpy.array([[low] * 10])
A:numpy.random.tests.test_generator_mt19937.high_a->numpy.array([high] * 10)
A:numpy.random.tests.test_generator_mt19937.low_o->numpy.array([[low] * 10], dtype=object)
A:numpy.random.tests.test_generator_mt19937.high_o->numpy.array([high] * 10, dtype=object)
A:numpy.random.tests.test_generator_mt19937.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_generator_mt19937.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1 - endpoint)
A:numpy.random.tests.test_generator_mt19937.actual->Generator(MT19937(self.seed)).multinomial(np.empty((3, 0, 7), 'i8'), np.empty((3, 0, 7, 4)))
A:numpy.random.tests.test_generator_mt19937.samples->Generator(MT19937(self.seed)).multivariate_normal(mean, cov, size=(3, 2), method=method)
A:numpy.random.tests.test_generator_mt19937.(values, counts)->numpy.unique(samples, return_counts=True)
A:numpy.random.tests.test_generator_mt19937.chi2->((counts - expected) ** 2 / expected).sum()
A:numpy.random.tests.test_generator_mt19937.num_ones_in_lsb->numpy.count_nonzero(sample.view(uint_view_type) & 1)
A:numpy.random.tests.test_generator_mt19937.a->Generator(MT19937(self.seed)).chisquare(5, size=3)
A:numpy.random.tests.test_generator_mt19937.arr->numpy.arange(9).reshape((3, 3))
A:numpy.random.tests.test_generator_mt19937.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_generator_mt19937.y1->numpy.arange(20).reshape(2, 10)
A:numpy.random.tests.test_generator_mt19937.y2->numpy.arange(20).reshape(2, 10).copy()
A:numpy.random.tests.test_generator_mt19937.b->ctor(*('PCG64DXSM',))
A:numpy.random.tests.test_generator_mt19937.a_orig->Generator(MT19937(self.seed)).chisquare(5, size=3).copy()
A:numpy.random.tests.test_generator_mt19937.b_orig->ctor(*('PCG64DXSM',)).copy()
A:numpy.random.tests.test_generator_mt19937.y->Generator(MT19937(self.seed)).dirichlet(alpha)
A:numpy.random.tests.test_generator_mt19937.x0->numpy.arange(22).reshape(2, 11)
A:numpy.random.tests.test_generator_mt19937.x1->numpy.arange(22).reshape(2, 11).copy()
A:numpy.random.tests.test_generator_mt19937.out->numpy.empty((2, 3), dtype=dtype, order=order)
A:numpy.random.tests.test_generator_mt19937.alpha->numpy.array(alpha)
A:numpy.random.tests.test_generator_mt19937.bad_alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_generator_mt19937.sample_mean->Generator(MT19937(self.seed)).dirichlet(alpha, size=20000000).mean(axis=0)
A:numpy.random.tests.test_generator_mt19937.cov->numpy.array([[2, 1], [1, 2]])
A:numpy.random.tests.test_generator_mt19937.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_generator_mt19937.mu->numpy.ones(3)
A:numpy.random.tests.test_generator_mt19937.mean->numpy.array([1, 2])
A:numpy.random.tests.test_generator_mt19937.result->func([[2145.12], [2145.12]], [2145.12, 2145.12])
A:numpy.random.tests.test_generator_mt19937.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_generator_mt19937.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_generator_mt19937.r->Generator(MT19937(self.seed)).vonmises(mu, kappa, 50)
A:numpy.random.tests.test_generator_mt19937.rs->RandomState(random.bit_generator)
A:numpy.random.tests.test_generator_mt19937.random_state_vals->RandomState(random.bit_generator).vonmises(0, kappa, size=10)
A:numpy.random.tests.test_generator_mt19937.gen_vals->Generator(MT19937(self.seed)).vonmises(0, kappa, size=10)
A:numpy.random.tests.test_generator_mt19937.pvals->numpy.vstack([[pvals], [pvals]])
A:numpy.random.tests.test_generator_mt19937.expected_shape->numpy.broadcast_shapes(n_shape, pvals.shape[:-1])
A:numpy.random.tests.test_generator_mt19937.self.seeds->range(4)
A:numpy.random.tests.test_generator_mt19937.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_generator_mt19937.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_generator_mt19937.out[...]->state.multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_generator_mt19937.self.argOne->numpy.array([2])
A:numpy.random.tests.test_generator_mt19937.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_generator_mt19937.self.argThree->numpy.array([4])
A:numpy.random.tests.test_generator_mt19937.argTwo->numpy.array([0.5])
A:numpy.random.tests.test_generator_mt19937.high->numpy.array([1])
A:numpy.random.tests.test_generator_mt19937.low->numpy.array([0])
A:numpy.random.tests.test_generator_mt19937.mt19937->MT19937(seed)
A:numpy.random.tests.test_generator_mt19937.key->key.byteswap().byteswap()
A:numpy.random.tests.test_generator_mt19937.sha256->hashlib.sha256(key)
A:numpy.random.tests.test_generator_mt19937.jumped->MT19937(seed).jumped()
A:numpy.random.tests.test_generator_mt19937.sigma->numpy.ones(3)
A:numpy.random.tests.test_generator_mt19937.shape->numpy.ones((4, 3))
A:numpy.random.tests.test_generator_mt19937.c->Generator(MT19937(self.seed)).chisquare(5, size=(5, 4, 3))
A:numpy.random.tests.test_generator_mt19937.gen->Generator(MT19937(0))
A:numpy.random.tests.test_generator_mt19937.variates->dist(out=out, dtype=dtype, size=out.shape)
A:numpy.random.tests.test_generator_mt19937.rg->pickle.load(gz)
A:numpy.random.tests.test_generator_mt19937.(ctor, (bit_gen,), _)->pickle.load(gz).__reduce__()
A:numpy.random.tests.test_generator_mt19937.rg_plk->pickle.loads(pickle.dumps(rg))
A:numpy.random.tests.test_generator_mt19937.pkl_file->os.path.join(base_path, 'data', f'generator_pcg64_np{version}.pkl.gz')
numpy.random.tests.test_generator_mt19937.TestBinomial
numpy.random.tests.test_generator_mt19937.TestBinomial.test_n_zero(self)
numpy.random.tests.test_generator_mt19937.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast
numpy.random.tests.test_generator_mt19937.TestBroadcast.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_beta(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_binomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_empty_outputs(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_exponential(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_f(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_gamma(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_geometric(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_invalid_pvals_broadcast(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_laplace(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_logistic(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_logseries(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_multinomial_pval_broadcast(self,n)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_normal(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_pareto(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_poisson(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_power(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_triangular(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_uniform(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_wald(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_weibull(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_zipf(self)
numpy.random.tests.test_generator_mt19937.TestIntegers
numpy.random.tests.test_generator_mt19937.TestIntegers.test_bounds_checking(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_bounds_checking_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_error_byteorder(self)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_full_range(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_full_range_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_in_bounds_fuzz(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_int64_uint64_broadcast_exceptions(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_int64_uint64_corner_case(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_integers_small_dtype_chisquared(self,sample_size,high,dtype,chi2max)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_32bit_boundary(self,bound,expected)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_32bit_boundary_broadcasting(self)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_broadcasting(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_respect_dtype_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_respect_dtype_singleton(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_rng_zero_and_extremes(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_rng_zero_and_extremes_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_scalar_array_equiv(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_unsupported_type(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_zero_size(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestMultinomial
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_basic(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_invalid_n(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_invalid_prob(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_multinomial_pvals_float32(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_p_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_size(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_argument_validation(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_edge_cases(self,method)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability1(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability2(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability3(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_typical_cases(self,nsample,method,size)
numpy.random.tests.test_generator_mt19937.TestRandomDist
numpy.random.tests.test_generator_mt19937.TestRandomDist.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_beta(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_binomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_bytes(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_array_size_empty_tuple(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_large_sample(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_multidimensional_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_multidimensional_default_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_p_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_return_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_alpha_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_moderately_small_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_multiple_zeros_in_alpha(self,alpha)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_small_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_exponential(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_f(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gamma(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_geometric(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_geometric_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_closed(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_masked(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_max_int(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_laplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logistic(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logseries(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logseries_exceptions(self,value)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logseries_zero(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multivariate_normal(self,method)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multivariate_normal_basic_stats(self,method)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multivariate_normal_disallow_complex(self,mean,cov)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial_invalid_p_n_combination(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial_p0_exception(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_f_nan(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_normal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_out_size_mismatch(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_pareto(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted(self,dtype,axis,expected)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_empty(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_not_writeable(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_out_with_wrong_shape(self,outshape)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_out_with_wrong_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_with_strides(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_poisson(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_power(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_distribution_of_lsb(self,dtype,uint_view_type)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_float_scalar(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_unsupported_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_axis_nonsquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_custom_axis_empty(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_not_writeable(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_expoential_type_error(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_unknown_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gammma_float_out(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gammma_scalar_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_normal_unsupported_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_triangular(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_neg_range(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_zero_range(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_large_kappa(self,kappa)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_large_kappa_range(self,mu,kappa)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_nan(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_wald(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_weibull(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_zipf(self)
numpy.random.tests.test_generator_mt19937.TestSeed
numpy.random.tests.test_generator_mt19937.TestSeed.test_array(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_invalid_array(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_noninstantized_bitgen(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_scalar(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_seedsequence(self)
numpy.random.tests.test_generator_mt19937.TestSetState
numpy.random.tests.test_generator_mt19937.TestSetState.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_integers(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestThread
numpy.random.tests.test_generator_mt19937.TestThread.check_function(self,function,sz)
numpy.random.tests.test_generator_mt19937.TestThread.setup_method(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_exp(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_normal(self)
numpy.random.tests.test_generator_mt19937.endpoint(request)
numpy.random.tests.test_generator_mt19937.test_broadcast_size_error()
numpy.random.tests.test_generator_mt19937.test_broadcast_size_scalar()
numpy.random.tests.test_generator_mt19937.test_c_contig_req_out(dtype)
numpy.random.tests.test_generator_mt19937.test_contig_req_out(dist,order,dtype)
numpy.random.tests.test_generator_mt19937.test_generator_ctor_old_style_pickle()
numpy.random.tests.test_generator_mt19937.test_jumped(config)
numpy.random.tests.test_generator_mt19937.test_legacy_pickle(version)
numpy.random.tests.test_generator_mt19937.test_pickle_preserves_seed_sequence()
numpy.random.tests.test_generator_mt19937.test_ragged_shuffle()
numpy.random.tests.test_generator_mt19937.test_single_arg_integer_exception(high,endpoint)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_random.py----------------------------------------
A:numpy.random.tests.test_random.s->tuple()
A:numpy.random.tests.test_random.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_random.x->numpy.random.randint(-5, -1, 5)
A:numpy.random.tests.test_random.self.prng->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_random.self.state->self.prng.get_state()
A:numpy.random.tests.test_random.old->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.new->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.state->self.prng.get_state()
A:numpy.random.tests.test_random.x1->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x2->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x3->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.vals->self.rfunc(0, 2, size=2 ** 16, dtype=np.bool)
A:numpy.random.tests.test_random.val->self.rfunc(0, 2, size=1000, dtype=bool).view(np.int8)
A:numpy.random.tests.test_random.res->hashlib.sha256(val).hexdigest()
A:numpy.random.tests.test_random.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_random.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1)
A:numpy.random.tests.test_random.actual->logseries(p * 3)
A:numpy.random.tests.test_random.sample->self.rfunc(lbnd, ubnd, dtype=dt)
A:numpy.random.tests.test_random.desired->numpy.array([1, 1, 1])
A:numpy.random.tests.test_random.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_random.a->numpy.zeros(3)
A:numpy.random.tests.test_random.arr->arr.view(MyArr).view(MyArr)
A:numpy.random.tests.test_random.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_random.b->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1)
A:numpy.random.tests.test_random.a_orig->numpy.zeros(3).copy()
A:numpy.random.tests.test_random.b_orig->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1).copy()
A:numpy.random.tests.test_random.rng->numpy.random.default_rng(self.seed)
A:numpy.random.tests.test_random.alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_random.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_random.cov->numpy.array([[1, 0.1], [0.1, 1]], dtype=np.float32)
A:numpy.random.tests.test_random.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_random.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_random.r->numpy.random.vonmises(mu=0.0, kappa=1.1e-08, size=10 ** 6)
A:numpy.random.tests.test_random.self.seeds->range(4)
A:numpy.random.tests.test_random.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_random.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_random.out[...]->self.prng.get_state().multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_random.self.argOne->numpy.array([2])
A:numpy.random.tests.test_random.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_random.self.argThree->numpy.array([4])
A:numpy.random.tests.test_random.out->func(self.argOne, self.argTwo[0], self.argThree)
A:numpy.random.tests.test_random.argTwo->numpy.array([0.5])
A:numpy.random.tests.test_random.high->numpy.array([1])
A:numpy.random.tests.test_random.low->numpy.array([0])
numpy.random.tests.test_random.TestBinomial
numpy.random.tests.test_random.TestBinomial.test_n_zero(self)
numpy.random.tests.test_random.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_random.TestBroadcast
numpy.random.tests.test_random.TestBroadcast.setSeed(self)
numpy.random.tests.test_random.TestBroadcast.setup_method(self)
numpy.random.tests.test_random.TestBroadcast.test_beta(self)
numpy.random.tests.test_random.TestBroadcast.test_binomial(self)
numpy.random.tests.test_random.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_random.TestBroadcast.test_exponential(self)
numpy.random.tests.test_random.TestBroadcast.test_f(self)
numpy.random.tests.test_random.TestBroadcast.test_gamma(self)
numpy.random.tests.test_random.TestBroadcast.test_geometric(self)
numpy.random.tests.test_random.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_random.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_random.TestBroadcast.test_laplace(self)
numpy.random.tests.test_random.TestBroadcast.test_logistic(self)
numpy.random.tests.test_random.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_random.TestBroadcast.test_logseries(self)
numpy.random.tests.test_random.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_random.TestBroadcast.test_normal(self)
numpy.random.tests.test_random.TestBroadcast.test_pareto(self)
numpy.random.tests.test_random.TestBroadcast.test_poisson(self)
numpy.random.tests.test_random.TestBroadcast.test_power(self)
numpy.random.tests.test_random.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_random.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_random.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_random.TestBroadcast.test_triangular(self)
numpy.random.tests.test_random.TestBroadcast.test_uniform(self)
numpy.random.tests.test_random.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_random.TestBroadcast.test_wald(self)
numpy.random.tests.test_random.TestBroadcast.test_weibull(self)
numpy.random.tests.test_random.TestBroadcast.test_zipf(self)
numpy.random.tests.test_random.TestMultinomial
numpy.random.tests.test_random.TestMultinomial.test_basic(self)
numpy.random.tests.test_random.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_random.TestMultinomial.test_multidimensional_pvals(self)
numpy.random.tests.test_random.TestMultinomial.test_size(self)
numpy.random.tests.test_random.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_random.TestRandint
numpy.random.tests.test_random.TestRandint.test_bounds_checking(self)
numpy.random.tests.test_random.TestRandint.test_full_range(self)
numpy.random.tests.test_random.TestRandint.test_in_bounds_fuzz(self)
numpy.random.tests.test_random.TestRandint.test_int64_uint64_corner_case(self)
numpy.random.tests.test_random.TestRandint.test_repeatability(self)
numpy.random.tests.test_random.TestRandint.test_respect_dtype_singleton(self)
numpy.random.tests.test_random.TestRandint.test_rng_zero_and_extremes(self)
numpy.random.tests.test_random.TestRandint.test_unsupported_type(self)
numpy.random.tests.test_random.TestRandomDist
numpy.random.tests.test_random.TestRandomDist.setup_method(self)
numpy.random.tests.test_random.TestRandomDist.test_beta(self)
numpy.random.tests.test_random.TestRandomDist.test_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_bytes(self)
numpy.random.tests.test_random.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_random.TestRandomDist.test_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_random.TestRandomDist.test_f(self)
numpy.random.tests.test_random.TestRandomDist.test_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_random.TestRandomDist.test_geometric(self)
numpy.random.tests.test_random.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_random.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_random.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_random.TestRandomDist.test_laplace(self)
numpy.random.tests.test_random.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_random.TestRandomDist.test_logistic(self)
numpy.random.tests.test_random.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_random.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_random.TestRandomDist.test_logseries(self)
numpy.random.tests.test_random.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_random.TestRandomDist.test_multivariate_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_random.TestRandomDist.test_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_random.TestRandomDist.test_pareto(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_power(self)
numpy.random.tests.test_random.TestRandomDist.test_rand(self)
numpy.random.tests.test_random.TestRandomDist.test_randint(self)
numpy.random.tests.test_random.TestRandomDist.test_randn(self)
numpy.random.tests.test_random.TestRandomDist.test_random(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers_deprecated(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers_max_int(self)
numpy.random.tests.test_random.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_random.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_memoryview(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_no_object_unpacking(self,random,use_array_like)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_not_writeable(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_untyped_warning(self,random)
numpy.random.tests.test_random.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_random.TestRandomDist.test_triangular(self)
numpy.random.tests.test_random.TestRandomDist.test_uniform(self)
numpy.random.tests.test_random.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_random.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_random.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_random.TestRandomDist.test_wald(self)
numpy.random.tests.test_random.TestRandomDist.test_weibull(self)
numpy.random.tests.test_random.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_random.TestRandomDist.test_zipf(self)
numpy.random.tests.test_random.TestSeed
numpy.random.tests.test_random.TestSeed.test_array(self)
numpy.random.tests.test_random.TestSeed.test_invalid_array(self)
numpy.random.tests.test_random.TestSeed.test_invalid_array_shape(self)
numpy.random.tests.test_random.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_random.TestSeed.test_scalar(self)
numpy.random.tests.test_random.TestSetState
numpy.random.tests.test_random.TestSetState.setup_method(self)
numpy.random.tests.test_random.TestSetState.test_backwards_compatibility(self)
numpy.random.tests.test_random.TestSetState.test_basic(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_random.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_random.TestSetState.test_set_invalid_state(self)
numpy.random.tests.test_random.TestSingleEltArrayInput
numpy.random.tests.test_random.TestSingleEltArrayInput.setup_method(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_randint(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_random.TestThread
numpy.random.tests.test_random.TestThread.check_function(self,function,sz)
numpy.random.tests.test_random.TestThread.setup_method(self)
numpy.random.tests.test_random.TestThread.test_exp(self)
numpy.random.tests.test_random.TestThread.test_multinomial(self)
numpy.random.tests.test_random.TestThread.test_normal(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_smoke.py----------------------------------------
A:numpy.random.tests.test_smoke.val->f(size=(5, 5))
A:numpy.random.tests.test_smoke.b->self.rg.integers([upper] * 10, dtype=dtype)
A:numpy.random.tests.test_smoke.c->self.rg.integers(lower, upper, size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.d->self.rg.integers(np.array([lower] * 10), np.array([upper], dtype=object), size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.e->self.rg.integers(np.array([lower] * 10), np.array([upper] * 10), size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.g->numpy.arange(2.0, 12.0).reshape((1, 10, 1))
A:numpy.random.tests.test_smoke.cls.rg->numpy.random.default_rng(*cls.seed)
A:numpy.random.tests.test_smoke.cls.vec_1d->numpy.arange(2.0, 102.0)
A:numpy.random.tests.test_smoke.cls.mat->numpy.arange(2.0, 102.0, 0.01).reshape((100, 100))
A:numpy.random.tests.test_smoke.rg->Generator(self.bit_generator())
A:numpy.random.tests.test_smoke.bit_gen2->self.rg.bit_generator.jumped()
A:numpy.random.tests.test_smoke.bit_gen3->self.rg.bit_generator.jumped()
A:numpy.random.tests.test_smoke.r->self.rg.uniform(-1.0, np.array([0.0] * 10), size=10)
A:numpy.random.tests.test_smoke.randoms->self.rg.standard_exponential(10, dtype='float32', method='inv')
A:numpy.random.tests.test_smoke.int_1->self.rg.integers(2 ** 31)
A:numpy.random.tests.test_smoke.int_2->self.rg.integers(2 ** 31)
A:numpy.random.tests.test_smoke.rg2->Generator(self.bit_generator())
A:numpy.random.tests.test_smoke.n1->Generator(self.bit_generator()).random(size=10, dtype='float32')
A:numpy.random.tests.test_smoke.n2->Generator(self.bit_generator()).random(size=10, dtype='float32')
A:numpy.random.tests.test_smoke.original->numpy.arange(200, 0, -1)
A:numpy.random.tests.test_smoke.permuted->self.rg.permutation(original)
A:numpy.random.tests.test_smoke.vals->self.rg.multinomial(100, [1.0 / 3, 2.0 / 3], size=10)
A:numpy.random.tests.test_smoke.x->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.x_zig->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.x_inv->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.s->self.rg.dirichlet((10, 5, 3), 20)
A:numpy.random.tests.test_smoke.pick->pickle.dumps(self.rg)
A:numpy.random.tests.test_smoke.unpick->pickle.loads(pick)
A:numpy.random.tests.test_smoke.seed->numpy.arange(1500, dtype=dtype)
A:numpy.random.tests.test_smoke.bg->self.bit_generator(seed[0])
A:numpy.random.tests.test_smoke.r1->Generator(self.bit_generator()).standard_normal(11, dtype=np.float32)
A:numpy.random.tests.test_smoke.r2->Generator(self.bit_generator()).standard_normal(11, dtype=np.float32)
A:numpy.random.tests.test_smoke.existing->numpy.zeros(size, dtype=np.float64)
A:numpy.random.tests.test_smoke.direct->Generator(self.bit_generator()).standard_gamma(mu, size=size, dtype=np.float32)
A:numpy.random.tests.test_smoke.sized->numpy.empty(size)
A:numpy.random.tests.test_smoke.info->numpy.iinfo(dtype)
A:numpy.random.tests.test_smoke.a->self.rg.integers(0, upper, size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.high->numpy.array([1])
A:numpy.random.tests.test_smoke.low->numpy.array([0])
A:numpy.random.tests.test_smoke.out->self.rg.integers(low, high[0], dtype=dtype)
A:numpy.random.tests.test_smoke.nprg->numpy.random.RandomState()
A:numpy.random.tests.test_smoke.state->numpy.random.RandomState().get_state()
numpy.random.tests.test_smoke.RNG
numpy.random.tests.test_smoke.RNG._extra_setup(cls)
numpy.random.tests.test_smoke.RNG._reset_state(self)
numpy.random.tests.test_smoke.RNG.setup_class(cls)
numpy.random.tests.test_smoke.RNG.test_advance(self)
numpy.random.tests.test_smoke.RNG.test_beta(self)
numpy.random.tests.test_smoke.RNG.test_binomial(self)
numpy.random.tests.test_smoke.RNG.test_bytes(self)
numpy.random.tests.test_smoke.RNG.test_chisquare(self)
numpy.random.tests.test_smoke.RNG.test_dirichlet(self)
numpy.random.tests.test_smoke.RNG.test_entropy_init(self)
numpy.random.tests.test_smoke.RNG.test_exponential(self)
numpy.random.tests.test_smoke.RNG.test_f(self)
numpy.random.tests.test_smoke.RNG.test_gamma(self)
numpy.random.tests.test_smoke.RNG.test_gamma_floats(self)
numpy.random.tests.test_smoke.RNG.test_geometric(self)
numpy.random.tests.test_smoke.RNG.test_gumbel(self)
numpy.random.tests.test_smoke.RNG.test_hypergeometric(self)
numpy.random.tests.test_smoke.RNG.test_init(self)
numpy.random.tests.test_smoke.RNG.test_integers(self)
numpy.random.tests.test_smoke.RNG.test_integers_broadcast(self,dtype)
numpy.random.tests.test_smoke.RNG.test_integers_broadcast_errors(self,dtype)
numpy.random.tests.test_smoke.RNG.test_integers_numpy(self,dtype)
numpy.random.tests.test_smoke.RNG.test_jump(self)
numpy.random.tests.test_smoke.RNG.test_laplace(self)
numpy.random.tests.test_smoke.RNG.test_logitic(self)
numpy.random.tests.test_smoke.RNG.test_logseries(self)
numpy.random.tests.test_smoke.RNG.test_multinomial(self)
numpy.random.tests.test_smoke.RNG.test_multivariate_normal(self)
numpy.random.tests.test_smoke.RNG.test_negative_binomial(self)
numpy.random.tests.test_smoke.RNG.test_noncentral_chisquare(self)
numpy.random.tests.test_smoke.RNG.test_noncentral_f(self)
numpy.random.tests.test_smoke.RNG.test_normal(self)
numpy.random.tests.test_smoke.RNG.test_normal_floats(self)
numpy.random.tests.test_smoke.RNG.test_normal_zig_floats(self)
numpy.random.tests.test_smoke.RNG.test_output_fill(self)
numpy.random.tests.test_smoke.RNG.test_output_fill_error(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_exponential(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_gamma(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_gamma_broadcast(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_uniform(self)
numpy.random.tests.test_smoke.RNG.test_pareto(self)
numpy.random.tests.test_smoke.RNG.test_permutation(self)
numpy.random.tests.test_smoke.RNG.test_pickle(self)
numpy.random.tests.test_smoke.RNG.test_poisson(self)
numpy.random.tests.test_smoke.RNG.test_power(self)
numpy.random.tests.test_smoke.RNG.test_random(self)
numpy.random.tests.test_smoke.RNG.test_rayleigh(self)
numpy.random.tests.test_smoke.RNG.test_reset_state(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_float(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_gauss(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_uint32(self)
numpy.random.tests.test_smoke.RNG.test_seed(self)
numpy.random.tests.test_smoke.RNG.test_seed_array(self)
numpy.random.tests.test_smoke.RNG.test_shuffle(self)
numpy.random.tests.test_smoke.RNG.test_standard_cauchy(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential_float(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential_float_log(self)
numpy.random.tests.test_smoke.RNG.test_standard_gamma(self)
numpy.random.tests.test_smoke.RNG.test_standard_normal(self)
numpy.random.tests.test_smoke.RNG.test_standard_normal_zig(self)
numpy.random.tests.test_smoke.RNG.test_standard_t(self)
numpy.random.tests.test_smoke.RNG.test_triangular(self)
numpy.random.tests.test_smoke.RNG.test_uniform(self)
numpy.random.tests.test_smoke.RNG.test_uniform_array(self)
numpy.random.tests.test_smoke.RNG.test_uniform_float(self)
numpy.random.tests.test_smoke.RNG.test_vonmises(self)
numpy.random.tests.test_smoke.RNG.test_wald(self)
numpy.random.tests.test_smoke.RNG.test_weibull(self)
numpy.random.tests.test_smoke.RNG.test_zipf(self)
numpy.random.tests.test_smoke.TestDefaultRNG(RNG)
numpy.random.tests.test_smoke.TestDefaultRNG.setup_class(cls)
numpy.random.tests.test_smoke.TestDefaultRNG.test_default_is_pcg64(self)
numpy.random.tests.test_smoke.TestDefaultRNG.test_seed(self)
numpy.random.tests.test_smoke.TestMT19937(RNG)
numpy.random.tests.test_smoke.TestMT19937.setup_class(cls)
numpy.random.tests.test_smoke.TestMT19937.test_numpy_state(self)
numpy.random.tests.test_smoke.TestPCG64(RNG)
numpy.random.tests.test_smoke.TestPCG64.setup_class(cls)
numpy.random.tests.test_smoke.TestPCG64DXSM(RNG)
numpy.random.tests.test_smoke.TestPCG64DXSM.setup_class(cls)
numpy.random.tests.test_smoke.TestPhilox(RNG)
numpy.random.tests.test_smoke.TestPhilox.setup_class(cls)
numpy.random.tests.test_smoke.TestSFC64(RNG)
numpy.random.tests.test_smoke.TestSFC64.setup_class(cls)
numpy.random.tests.test_smoke.comp_state(state1,state2)
numpy.random.tests.test_smoke.dtype(request)
numpy.random.tests.test_smoke.params_0(f)
numpy.random.tests.test_smoke.params_1(f,bounded=False)
numpy.random.tests.test_smoke.warmup(rg,n=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_generator_mt19937_regressions.py----------------------------------------
A:numpy.random.tests.test_generator_mt19937_regressions.self.mt19937->Generator(MT19937(121263137472525314065))
A:numpy.random.tests.test_generator_mt19937_regressions.r->self.mt19937.vonmises(mu, 1, 50)
A:numpy.random.tests.test_generator_mt19937_regressions.rvsn->self.mt19937.logseries(0.8, size=N)
A:numpy.random.tests.test_generator_mt19937_regressions.mt19937->Generator(MT19937(1))
A:numpy.random.tests.test_generator_mt19937_regressions.shuffled->numpy.array(t, dtype=object)
A:numpy.random.tests.test_generator_mt19937_regressions.expected->numpy.array([0.0], dtype=np.float32)
A:numpy.random.tests.test_generator_mt19937_regressions.res->numpy.array([1, 8, 0, 1, 5, 3, 3, 8, 1, 4])
A:numpy.random.tests.test_generator_mt19937_regressions.m->M()
A:numpy.random.tests.test_generator_mt19937_regressions.x->self.mt19937.beta(tiny / 32, tiny / 40, size=50)
A:numpy.random.tests.test_generator_mt19937_regressions.c->self.mt19937.choice(a, p=probs)
A:numpy.random.tests.test_generator_mt19937_regressions.a->numpy.arange(5)
A:numpy.random.tests.test_generator_mt19937_regressions.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_generator_mt19937_regressions.perm->Generator(MT19937(1)).permutation(m)
A:numpy.random.tests.test_generator_mt19937_regressions.actual->self.mt19937.standard_gamma([0.0], dtype='float')
numpy.random.tests.test_generator_mt19937_regressions.TestRegression
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.setup_method(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_beta_ridiculously_small_parameters(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_beta_very_small_parameters(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_gamma_0(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_geometric_tiny_prob(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_of_array_of_objects(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_vonmises_range(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/test_seed_sequence.py----------------------------------------
A:numpy.random.tests.test_seed_sequence.expected->numpy.array(expected, dtype=np.uint32)
A:numpy.random.tests.test_seed_sequence.ss->SeedSequence(seed)
A:numpy.random.tests.test_seed_sequence.state->SeedSequence(seed).generate_state(len(expected))
A:numpy.random.tests.test_seed_sequence.state64->SeedSequence(seed).generate_state(len(expected64), dtype=np.uint64)
A:numpy.random.tests.test_seed_sequence.ss0->SeedSequence(42)
A:numpy.random.tests.test_seed_sequence.ss1->SeedSequence(42 << 32)
A:numpy.random.tests.test_seed_sequence.expected42->numpy.array([3444837047, 2669555309, 2046530742, 3581440988], dtype=np.uint32)
numpy.random.tests.test_seed_sequence.test_reference_data()
numpy.random.tests.test_seed_sequence.test_zero_padding()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/tests/data/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_examples/cffi/parse.py----------------------------------------
A:numpy.random._examples.cffi.parse.line->line.replace('RAND_INT_TYPE', 'int64_t').replace('RAND_INT_TYPE', 'int64_t')
numpy.random._examples.cffi.parse.parse_distributions_h(ffi,inc_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_examples/cffi/extending.py----------------------------------------
A:numpy.random._examples.cffi.extending.ffi->cffi.FFI()
A:numpy.random._examples.cffi.extending.inc_dir->os.path.join(np.get_include(), 'numpy')
A:numpy.random._examples.cffi.extending.lib->cffi.FFI().dlopen(np.random._generator.__file__)
A:numpy.random._examples.cffi.extending.bit_gen->numpy.random.PCG64()
A:numpy.random._examples.cffi.extending.rng->numpy.random.Generator(bit_gen)
A:numpy.random._examples.cffi.extending.vals_cffi->cffi.FFI().new('double[%d]' % n)
A:numpy.random._examples.cffi.extending.vals->numpy.random.Generator(bit_gen).standard_normal(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_examples/numba/extending_distributions.py----------------------------------------
A:numpy.random._examples.numba.extending_distributions.ffi->FFI()
A:numpy.random._examples.numba.extending_distributions.lib->FFI().dlopen('./libdistributions.so')
A:numpy.random._examples.numba.extending_distributions.x->PCG64()
A:numpy.random._examples.numba.extending_distributions.out->numpy.empty(n)
A:numpy.random._examples.numba.extending_distributions.out[i]->random_standard_normal(bit_generator)
A:numpy.random._examples.numba.extending_distributions.normalsj->numba.jit(normals, nopython=True)
A:numpy.random._examples.numba.extending_distributions.bit_generator_address->int(ffi.cast('uintptr_t', bit_generator))
A:numpy.random._examples.numba.extending_distributions.norm->normalsj(1000, bit_generator_address)
numpy.random._examples.numba.extending_distributions.normals(n,bit_generator)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/random/_examples/numba/extending.py----------------------------------------
A:numpy.random._examples.numba.extending.bit_gen->PCG64()
A:numpy.random._examples.numba.extending.out->numpy.empty(n, dtype=np.uint32)
A:numpy.random._examples.numba.extending.f->numpy.sqrt(-2.0 * np.log(r2) / r2)
A:numpy.random._examples.numba.extending.normalsj->numba.jit(normals, nopython=True)
A:numpy.random._examples.numba.extending.rg->numpy.random.Generator(PCG64())
A:numpy.random._examples.numba.extending.r1->numbacall()
A:numpy.random._examples.numba.extending.r2->numpycall()
A:numpy.random._examples.numba.extending.t1->timeit(numbacall, number=1000)
A:numpy.random._examples.numba.extending.t2->timeit(numpycall, number=1000)
A:numpy.random._examples.numba.extending.out[i]->bounded_uint(lb, ub, state)
numpy.random._examples.numba.extending.bounded_uint(lb,ub,state)
numpy.random._examples.numba.extending.bounded_uints(lb,ub,n,state)
numpy.random._examples.numba.extending.normals(n,state)
numpy.random._examples.numba.extending.numbacall()
numpy.random._examples.numba.extending.numpycall()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/doc/ufuncs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/cb_rules.py----------------------------------------
A:numpy.f2py.cb_rules.(args, depargs)->getargs(rout)
A:numpy.f2py.cb_rules.vrd->capi_maps.cb_sign2map(a, var[a], index=i)
A:numpy.f2py.cb_rules.rd->dictappend(rd, ar)
A:numpy.f2py.cb_rules.ar->applyrules(cb_routine_rules, rd)
A:numpy.f2py.cb_rules.rd['docreturn']->stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']}))
A:numpy.f2py.cb_rules.optargs->stripcomma(replace('#docsignopt#', {'docsignopt': rd['docsignopt']}))
A:numpy.f2py.cb_rules.rd['docsignature']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.cb_rules.rd['latexdocsignature']->rd['latexdocsignature'].replace(',', ', ').replace(',', ', ')
numpy.f2py.cb_rules.buildcallback(rout,um)
numpy.f2py.cb_rules.buildcallbacks(m)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/f90mod_rules.py----------------------------------------
A:numpy.f2py.f90mod_rules.usenames->getuseblocks(pymod)
A:numpy.f2py.f90mod_rules.contains_functions_or_subroutines->any((item for item in m['body'] if item['block'] in ['function', 'subroutine']))
A:numpy.f2py.f90mod_rules.vrd->capi_maps.modsign2map(m)
A:numpy.f2py.f90mod_rules.note->'\n'.join(note)
A:numpy.f2py.f90mod_rules.ct->capi_maps.getctype(var)
A:numpy.f2py.f90mod_rules.dm->capi_maps.getarrdims(n, var)
A:numpy.f2py.f90mod_rules.dms->range(1, int(dm['rank']) + 1)
A:numpy.f2py.f90mod_rules.(api, wrap)->rules.buildapi(b)
A:numpy.f2py.f90mod_rules.ar->applyrules(api, vrd)
A:numpy.f2py.f90mod_rules.ret->dictappend(ret, ar)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.findf90modules(m)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/diagnose.py----------------------------------------
A:numpy.f2py.diagnose._path->os.getcwd()
A:numpy.f2py.diagnose.cpu->cpuinfo()
numpy.f2py.diagnose.run()
numpy.f2py.diagnose.run_command(cmd)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/__init__.py----------------------------------------
A:numpy.f2py.__init__.test->PytestTester(__name__)
numpy.f2py.__init__.__dir__()
numpy.f2py.__init__.__getattr__(attr)
numpy.f2py.__init__.get_include()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/__init__.pyi----------------------------------------
numpy.f2py.__init__._F2PyDict(_F2PyDictBase,total=False)
numpy.f2py.__init__._F2PyDictBase(TypedDict)
numpy.f2py.__init__.compile(source:str|bytes,modulename:str=...,extra_args:str|list[str]=...,verbose:bool=...,source_fn:None|str|bytes|os.PathLike[Any]=...,extension:L['.f','.f90']=...,full_output:L[False]=...)->int
numpy.f2py.__init__.compile(source:str|bytes,modulename:str=...,extra_args:str|list[str]=...,verbose:bool=...,source_fn:None|str|bytes|os.PathLike[Any]=...,extension:L['.f','.f90']=...,full_output:L[True]=...)->subprocess.CompletedProcess[bytes]
numpy.f2py.__init__.run_main(comline_list:Iterable[str])->dict[str, _F2PyDict]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/symbolic.py----------------------------------------
A:numpy.f2py.symbolic.c->dict(as_factors(t1).data).get(k)
A:numpy.f2py.symbolic.data->tuple(sorted(self.data.items()))
A:numpy.f2py.symbolic.r->self.finalize_string(restore(r))
A:numpy.f2py.symbolic.term->str(coeff)
A:numpy.f2py.symbolic.factor->base.tostring(Precedence.TUPLE, language=language)
A:numpy.f2py.symbolic.left->left.substitute(symbols_map).substitute(symbols_map)
A:numpy.f2py.symbolic.right->right.substitute(symbols_map).substitute(symbols_map)
A:numpy.f2py.symbolic.rop->RelOp.fromstring(rop, language=self.language)
A:numpy.f2py.symbolic.other->as_expr(other)
A:numpy.f2py.symbolic.index->as_expr(index)
A:numpy.f2py.symbolic.value->value.lower().lower()
A:numpy.f2py.symbolic.m->re.match('\\A\\w[\\w\\d_]*\\Z', r)
A:numpy.f2py.symbolic.(items, paren)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
A:numpy.f2py.symbolic.target->self.process(restore(target))
A:numpy.f2py.symbolic.args->tuple((a for a in args if not isinstance(a, _Pair)))
A:numpy.f2py.symbolic.kwargs->dict(((a.left, a.right) for a in args if isinstance(a, _Pair)))
A:numpy.f2py.symbolic.func->func.substitute(symbols_map).substitute(symbols_map)
A:numpy.f2py.symbolic.operands->list(reversed(restore(r.split('**'))))
A:numpy.f2py.symbolic.result->self.process(operands[0])
A:numpy.f2py.symbolic.k->k.traverse(visit, *args, **kwargs).traverse(visit, *args, **kwargs)
A:numpy.f2py.symbolic.kwoperands->dict(((k, v.traverse(visit, *args, **kwargs)) for (k, v) in self.data[2].items()))
A:numpy.f2py.symbolic.indices->tuple((index.traverse(visit, *args, **kwargs) for index in self.data[1:]))
A:numpy.f2py.symbolic.found->set()
A:numpy.f2py.symbolic.b->self.substitute({symbol: as_number(0)})
A:numpy.f2py.symbolic.a->ax.substitute({symbol: as_number(1)})
A:numpy.f2py.symbolic.(zero, _)->as_numer_denom(a * symbol - ax)
A:numpy.f2py.symbolic.((t, c),)->dict(as_factors(t1).data).items()
A:numpy.f2py.symbolic.((b, e),)->dict(as_factors(t1).data).items()
A:numpy.f2py.symbolic.t->Expr(Op.FACTORS, d)
A:numpy.f2py.symbolic.(t1, c1)->as_term_coeff(dividend)
A:numpy.f2py.symbolic.(t2, c2)->as_term_coeff(divisor)
A:numpy.f2py.symbolic.g->gcd(c1, c2)
A:numpy.f2py.symbolic.d->dict(as_factors(t1).data)
A:numpy.f2py.symbolic.new_last->as_string(last.data[0][:-1] + s.data[0][1:], max(last.data[1], s.data[1]))
A:numpy.f2py.symbolic.(cond, expr1, expr2)->map(normalize, obj.data)
A:numpy.f2py.symbolic.obj->normalize(obj)
A:numpy.f2py.symbolic.((term, coeff),)->normalize(obj).data.items()
A:numpy.f2py.symbolic.(t, c)->as_term_coeff(obj.data[1][0])
A:numpy.f2py.symbolic.(numers, denoms)->map(as_numer_denom, obj.data[1])
A:numpy.f2py.symbolic.(n, d)->as_numer_denom(term)
A:numpy.f2py.symbolic.(bnumer, bdenom)->as_numer_denom(b)
A:numpy.f2py.symbolic.COUNTER->_counter()
A:numpy.f2py.symbolic.new_s->re.sub('({kind}_|)({single_quoted}|{double_quoted})'.format(kind='\\w[\\w\\d_]*', single_quoted="('([^'\\\\]|(\\\\.))*')", double_quoted='("([^"\\\\]|(\\\\.))*")'), repl, s)
A:numpy.f2py.symbolic.s->s.replace(k, left + v + right).replace(k, left + v + right)
A:numpy.f2py.symbolic.mn_i->len(s)
A:numpy.f2py.symbolic.i->s.replace(k, left + v + right).replace(k, left + v + right).find(left_)
A:numpy.f2py.symbolic.j->s.replace(k, left + v + right).replace(k, left + v + right).find(right, j + 1)
A:numpy.f2py.symbolic.(r, d)->replace_parenthesis(s[j + len(right):])
A:numpy.f2py.symbolic.p->_get_parenthesis_kind(k)
A:numpy.f2py.symbolic.(unquoted, self.quotes_map)->eliminate_quotes(inp)
A:numpy.f2py.symbolic.(r, raw_symbols_map)->replace_parenthesis(s)
A:numpy.f2py.symbolic.(oper, expr1, expr2)->restore(m.groups())
A:numpy.f2py.symbolic.oper->self.process(oper)
A:numpy.f2py.symbolic.expr1->self.process(expr1)
A:numpy.f2py.symbolic.expr2->self.process(expr2)
A:numpy.f2py.symbolic.(left, rop, right)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
A:numpy.f2py.symbolic.(left, right)->self.process(restore((left, right)))
A:numpy.f2py.symbolic.(keyname, value)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
A:numpy.f2py.symbolic.operand->self.process(operand)
A:numpy.f2py.symbolic.op->op.strip().strip()
A:numpy.f2py.symbolic.(value, _, kind)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
A:numpy.f2py.symbolic.kind->int(kind)
A:numpy.f2py.symbolic.(value, _, _, kind)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
A:numpy.f2py.symbolic.paren->_get_parenthesis_kind(r)
A:numpy.f2py.symbolic.items->self.process(restore(raw_symbols_map[r]), 'expr' if paren == 'ROUND' else 'args')
A:numpy.f2py.symbolic.(target, args, paren)->re.match('\\A\\w[\\w\\d_]*\\Z', r).groups()
numpy.f2py.symbolic.ArithOp(Enum)
numpy.f2py.symbolic.Expr(self,op,data)
numpy.f2py.symbolic.Expr.__add__(self,other)
numpy.f2py.symbolic.Expr.__eq__(self,other)
numpy.f2py.symbolic.Expr.__floordiv__(self,other)
numpy.f2py.symbolic.Expr.__ge__(self,other)
numpy.f2py.symbolic.Expr.__getitem__(self,index)
numpy.f2py.symbolic.Expr.__gt__(self,other)
numpy.f2py.symbolic.Expr.__hash__(self)
numpy.f2py.symbolic.Expr.__init__(self,op,data)
numpy.f2py.symbolic.Expr.__le__(self,other)
numpy.f2py.symbolic.Expr.__lt__(self,other)
numpy.f2py.symbolic.Expr.__mul__(self,other)
numpy.f2py.symbolic.Expr.__neg__(self)
numpy.f2py.symbolic.Expr.__pos__(self)
numpy.f2py.symbolic.Expr.__pow__(self,other)
numpy.f2py.symbolic.Expr.__radd__(self,other)
numpy.f2py.symbolic.Expr.__repr__(self)
numpy.f2py.symbolic.Expr.__rfloordiv__(self,other)
numpy.f2py.symbolic.Expr.__rmul__(self,other)
numpy.f2py.symbolic.Expr.__rsub__(self,other)
numpy.f2py.symbolic.Expr.__rtruediv__(self,other)
numpy.f2py.symbolic.Expr.__str__(self)
numpy.f2py.symbolic.Expr.__sub__(self,other)
numpy.f2py.symbolic.Expr.__truediv__(self,other)
numpy.f2py.symbolic.Expr.contains(self,other)
numpy.f2py.symbolic.Expr.linear_solve(self,symbol)
numpy.f2py.symbolic.Expr.parse(s,language=Language.C)
numpy.f2py.symbolic.Expr.polynomial_atoms(self)
numpy.f2py.symbolic.Expr.substitute(self,symbols_map)
numpy.f2py.symbolic.Expr.symbols(self)
numpy.f2py.symbolic.Expr.tostring(self,parent_precedence=Precedence.NONE,language=Language.Fortran)
numpy.f2py.symbolic.Expr.traverse(self,visit,*args,**kwargs)
numpy.f2py.symbolic.ExprWarning(UserWarning)
numpy.f2py.symbolic.Language(Enum)
numpy.f2py.symbolic.Op(Enum)
numpy.f2py.symbolic.OpError(Exception)
numpy.f2py.symbolic.Precedence(Enum)
numpy.f2py.symbolic.RelOp(Enum)
numpy.f2py.symbolic.RelOp.fromstring(cls,s,language=Language.C)
numpy.f2py.symbolic.RelOp.tostring(self,language=Language.C)
numpy.f2py.symbolic._FromStringWorker(self,language=Language.C)
numpy.f2py.symbolic._FromStringWorker.__init__(self,language=Language.C)
numpy.f2py.symbolic._FromStringWorker.finalize_string(self,s)
numpy.f2py.symbolic._FromStringWorker.parse(self,inp)
numpy.f2py.symbolic._FromStringWorker.process(self,s,context='expr')
numpy.f2py.symbolic._Pair(self,left,right)
numpy.f2py.symbolic._Pair.__init__(self,left,right)
numpy.f2py.symbolic._Pair.__repr__(self)
numpy.f2py.symbolic._Pair.substitute(self,symbols_map)
numpy.f2py.symbolic._counter()
numpy.f2py.symbolic._get_parenthesis_kind(s)
numpy.f2py.symbolic._pairs_add(d,k,v)
numpy.f2py.symbolic.as_apply(func,*args,**kwargs)
numpy.f2py.symbolic.as_array(obj)
numpy.f2py.symbolic.as_complex(real,imag=0)
numpy.f2py.symbolic.as_deref(expr)
numpy.f2py.symbolic.as_eq(left,right)
numpy.f2py.symbolic.as_expr(obj)
numpy.f2py.symbolic.as_factors(obj)
numpy.f2py.symbolic.as_ge(left,right)
numpy.f2py.symbolic.as_gt(left,right)
numpy.f2py.symbolic.as_integer(obj,kind=4)
numpy.f2py.symbolic.as_le(left,right)
numpy.f2py.symbolic.as_lt(left,right)
numpy.f2py.symbolic.as_ne(left,right)
numpy.f2py.symbolic.as_number(obj,kind=4)
numpy.f2py.symbolic.as_numer_denom(obj)
numpy.f2py.symbolic.as_real(obj,kind=4)
numpy.f2py.symbolic.as_ref(expr)
numpy.f2py.symbolic.as_string(obj,kind=1)
numpy.f2py.symbolic.as_symbol(obj)
numpy.f2py.symbolic.as_term_coeff(obj)
numpy.f2py.symbolic.as_terms(obj)
numpy.f2py.symbolic.as_ternary(cond,expr1,expr2)
numpy.f2py.symbolic.eliminate_quotes(s)
numpy.f2py.symbolic.ewarn(message)
numpy.f2py.symbolic.fromstring(s,language=Language.C)
numpy.f2py.symbolic.insert_quotes(s,d)
numpy.f2py.symbolic.normalize(obj)
numpy.f2py.symbolic.replace_parenthesis(s)
numpy.f2py.symbolic.unreplace_parenthesis(s,d)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_src_pyf.py----------------------------------------
A:numpy.f2py._src_pyf.routine_start_re->re.compile('(\\n|\\A)((     (\\$|\\*))|)\\s*(subroutine|function)\\b', re.I)
A:numpy.f2py._src_pyf.routine_end_re->re.compile('\\n\\s*end\\s*(subroutine|function)\\b.*(\\n|\\Z)', re.I)
A:numpy.f2py._src_pyf.function_start_re->re.compile('\\n     (\\$|\\*)\\s*function\\b', re.I)
A:numpy.f2py._src_pyf.m->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line)
A:numpy.f2py._src_pyf.start->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line).start()
A:numpy.f2py._src_pyf.i->astr.rfind('\n', ind, start)
A:numpy.f2py._src_pyf.template_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*>')
A:numpy.f2py._src_pyf.named_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>')
A:numpy.f2py._src_pyf.list_re->re.compile('<\\s*((.*?))\\s*>')
A:numpy.f2py._src_pyf.reps->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>').findall(astr)
A:numpy.f2py._src_pyf.repl->rep[1].replace('\\,', '@comma@')
A:numpy.f2py._src_pyf.thelist->find_repl_patterns(substr).get(r, names.get(r, None))
A:numpy.f2py._src_pyf.names->find_repl_patterns(astr)
A:numpy.f2py._src_pyf.item_re->re.compile('\\A\\\\(?P<index>\\d+)\\Z')
A:numpy.f2py._src_pyf.b->astr.split(',')
A:numpy.f2py._src_pyf.j->int(m.group('index'))
A:numpy.f2py._src_pyf.allkeys->list(adict.keys())
A:numpy.f2py._src_pyf.template_name_re->re.compile('\\A\\s*(\\w[\\w\\d]*)\\s*\\Z')
A:numpy.f2py._src_pyf.substr->re.compile('<\\s*((.*?))\\s*>').sub(listrepl, substr)
A:numpy.f2py._src_pyf.lnames->find_repl_patterns(substr)
A:numpy.f2py._src_pyf.name->mobj.group(1)
A:numpy.f2py._src_pyf.num->len(rule)
A:numpy.f2py._src_pyf.newstr->newstr.replace('@leftarrow@', '<').replace('@leftarrow@', '<')
A:numpy.f2py._src_pyf.struct->parse_structure(newstr)
A:numpy.f2py._src_pyf.(cleanedstr, defs)->find_and_remove_repl_patterns(newstr[oldend:sub[0]])
A:numpy.f2py._src_pyf.include_src_re->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I)
A:numpy.f2py._src_pyf.d->os.path.dirname(source)
A:numpy.f2py._src_pyf.fn->os.path.join(d, fn)
A:numpy.f2py._src_pyf.lines->resolve_includes(source)
A:numpy.f2py._src_pyf._special_names->find_repl_patterns('\n<_c=s,d,c,z>\n<_t=real,double precision,complex,double complex>\n<prefix=s,d,c,z>\n<ftype=real,double precision,complex,double complex>\n<ctype=float,double,complex_float,complex_double>\n<ftypereal=real,double precision,\\0,\\1>\n<ctypereal=float,double,\\0,\\1>\n')
numpy.f2py._src_pyf.conv(astr)
numpy.f2py._src_pyf.expand_sub(substr,names)
numpy.f2py._src_pyf.find_and_remove_repl_patterns(astr)
numpy.f2py._src_pyf.find_repl_patterns(astr)
numpy.f2py._src_pyf.parse_structure(astr)
numpy.f2py._src_pyf.process_file(source)
numpy.f2py._src_pyf.process_str(allstr)
numpy.f2py._src_pyf.resolve_includes(source)
numpy.f2py._src_pyf.unique_key(adict)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/auxfuncs.py----------------------------------------
A:numpy.f2py.auxfuncs.r->getmultilineblock(rout, 'callprotoargument', comment=0)
A:numpy.f2py.auxfuncs.ctype->getctype(var)
A:numpy.f2py.auxfuncs.proto_args->','.join(arg_types + arg_types2)
A:numpy.f2py.auxfuncs.str->str.replace('#%s#' % k, d[k]).replace('#%s#' % k, d[k])
A:numpy.f2py.auxfuncs.rd->dictappend(rd, a)
A:numpy.f2py.auxfuncs.rd[k]->dictappend(rd[k], ar[k])
A:numpy.f2py.auxfuncs.rr->applyrules(r, d, var)
A:numpy.f2py.auxfuncs.ret->dictappend(ret, rr)
A:numpy.f2py.auxfuncs.res->applyrules({'supertext': i}, d)
A:numpy.f2py.auxfuncs.ret[k]->replace(rules[k], d)
A:numpy.f2py.auxfuncs.ar->applyrules({k: i}, d, var)
A:numpy.f2py.auxfuncs.m->_f2py_module_name_match(line)
A:numpy.f2py.auxfuncs.name->_f2py_module_name_match(line).group('name')
numpy.f2py.auxfuncs.F2PYError(Exception)
numpy.f2py.auxfuncs._ischaracter(var)
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules,d,var={})
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd,ar)
numpy.f2py.auxfuncs.flatlist(lst)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_f2py_modulename(source)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout,cb_map={})
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getdimension(var)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout,blockname,comment=1,counter=0)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getuseblocks(pymod)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.isattr_value(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.ischaracter_or_characterarray(var)
numpy.f2py.auxfuncs.ischaracterarray(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1(var)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstring_or_stringarray(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_and(*f)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.l_or(*f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.process_f2cmap_dict(f2cmap_all,new_map,c2py_map,verbose=False)
numpy.f2py.auxfuncs.replace(str,d,defaultsep='')
numpy.f2py.auxfuncs.requiresf90wrapper(rout)
numpy.f2py.auxfuncs.stripcomma(s)
numpy.f2py.auxfuncs.throw_error(self,mess)
numpy.f2py.auxfuncs.throw_error.__init__(self,mess)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/f2py2e.py----------------------------------------
A:numpy.f2py.f2py2e.(include_paths, inputline)->get_includes(inputline)
A:numpy.f2py.f2py2e.signsfile->os.path.join(buildpath, signsfile)
A:numpy.f2py.f2py2e.postlist->callcrackfortran(files, options)
A:numpy.f2py.f2py2e.pyf->crackfortran.crack2fortran(postlist)
A:numpy.f2py.f2py2e.f2pydir->os.path.dirname(os.path.abspath(cfuncs.__file__))
A:numpy.f2py.f2py2e.fobjhsrc->os.path.join(f2pydir, 'src', 'fortranobject.h')
A:numpy.f2py.f2py2e.fobjcsrc->os.path.join(f2pydir, 'src', 'fortranobject.c')
A:numpy.f2py.f2py2e.parser->make_f2py_compile_parser()
A:numpy.f2py.f2py2e.(args, comline_list)->make_f2py_compile_parser().parse_known_args(comline_list)
A:numpy.f2py.f2py2e.(pyf_files, _)->filter_files('', '[.]pyf([.]src|)', comline_list)
A:numpy.f2py.f2py2e.modname->validate_modulename(pyf_files, args.module_name)
A:numpy.f2py.f2py2e.(files, options)->scaninputline(comline_list)
A:numpy.f2py.f2py2e.ret->buildmodules(postlist)
A:numpy.f2py.f2py2e.ind->len(prefix)
A:numpy.f2py.f2py2e.p->os.path.dirname(os.path.dirname(module.__file__))
A:numpy.f2py.f2py2e.include_paths_set->set(getattr(namespace, 'include_paths', []) or [])
A:numpy.f2py.f2py2e.iline->' '.join(iline).split()
A:numpy.f2py.f2py2e.(args, remain)->make_f2py_compile_parser().parse_known_args(iline)
A:numpy.f2py.f2py2e.(args, remaining_argv)->make_f2py_compile_parser().parse_known_args()
A:numpy.f2py.f2py2e.argy->preparse_sysargv()
A:numpy.f2py.f2py2e.build_backend->f2py_build_generator(backend_key)
A:numpy.f2py.f2py2e.i->sys.argv.index(f2cmapopt)
A:numpy.f2py.f2py2e.build_dir->tempfile.mkdtemp()
A:numpy.f2py.f2py2e._reg1->re.compile('--link-')
A:numpy.f2py.f2py2e._reg2->re.compile('--((no-|)(wrap-functions|lower)|debug-capi|quiet|skip-empty-wrappers)|-include')
A:numpy.f2py.f2py2e._reg3->re.compile('--((f(90)?compiler(-exec|)|compiler)=|help-compiler)')
A:numpy.f2py.f2py2e.reg_f77_f90_flags->re.compile('--f(77|90)flags=')
A:numpy.f2py.f2py2e.reg_distutils_flags->re.compile('--((f(77|90)exec|opt|arch)=|(debug|noopt|noarch|help-fcompiler))')
A:numpy.f2py.f2py2e.allowed_keys->list(fcompiler.fcompiler_class.keys())
A:numpy.f2py.f2py2e.nvov->s[len(v):].lower()
A:numpy.f2py.f2py2e._reg5->re.compile('--(verbose)')
A:numpy.f2py.f2py2e.(pyf_files, _sources)->filter_files('', '[.]pyf([.]src|)', sources)
A:numpy.f2py.f2py2e.modulename->validate_modulename(pyf_files, modulename)
A:numpy.f2py.f2py2e.(extra_objects, sources)->filter_files('', '[.](o|a|so|dylib)', sources)
A:numpy.f2py.f2py2e.(library_dirs, sources)->filter_files('-L', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(libraries, sources)->filter_files('-l', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(undef_macros, sources)->filter_files('-U', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(define_macros, sources)->filter_files('-D', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.name_value->tuple(name_value).split('=', 1)
A:numpy.f2py.f2py2e.define_macros[i]->tuple(name_value)
A:numpy.f2py.f2py2e.(include_dirs, sources)->get_includes(sources)
A:numpy.f2py.f2py2e.builder->build_backend(modulename, sources, extra_objects, build_dir, include_dirs, library_dirs, libraries, define_macros, undef_macros, f2py_flags, sysinfo_flags, fc_flags, flib_flags, setup_flags, remove_build_dir, {'dependencies': dependencies})
A:numpy.f2py.f2py2e.pyf_modname->auxfuncs.get_f2py_modulename(pyff)
numpy.f2py.f2py2e.CombineIncludePaths(self,parser,namespace,values,option_string=None)
numpy.f2py.f2py2e.CombineIncludePaths.__call__(self,parser,namespace,values,option_string=None)
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files,options)
numpy.f2py.f2py2e.dict_append(d_out,d_in)
numpy.f2py.f2py2e.filter_files(prefix,suffix,files,remove_prefix=None)
numpy.f2py.f2py2e.get_includes(iline)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.include_parser()
numpy.f2py.f2py2e.main()
numpy.f2py.f2py2e.make_f2py_compile_parser()
numpy.f2py.f2py2e.preparse_sysargv()
numpy.f2py.f2py2e.run_compile()
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)
numpy.f2py.f2py2e.validate_modulename(pyf_files,modulename='untitled')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/cfuncs.py----------------------------------------
A:numpy.f2py.cfuncs.t->append_needs(nn, flag)
A:numpy.f2py.cfuncs.saveout->copy.copy(outneeds[n])
numpy.f2py.cfuncs.append_needs(need,flag=1)
numpy.f2py.cfuncs.buildcfuncs()
numpy.f2py.cfuncs.errmess(s:str)->None
numpy.f2py.cfuncs.get_needs()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/func2subr.py----------------------------------------
A:numpy.f2py.func2subr.kind_value->value.get('kindselector', {}).get('kind')
A:numpy.f2py.func2subr.dv->dict(typespec='integer', intent=['hide'])
A:numpy.f2py.func2subr.need_interface->bool(extra_args)
A:numpy.f2py.func2subr.fortranname->getfortranname(rout)
A:numpy.f2py.func2subr.f90mode->ismoduleroutine(rout)
A:numpy.f2py.func2subr.l_tmpl->var2fixfortran(vars, name, '@@@NAME@@@', f90mode)
A:numpy.f2py.func2subr.l1->var2fixfortran(vars, name, '@@@NAME@@@', f90mode).replace('@@@NAME@@@', newname)
A:numpy.f2py.func2subr.useisoc->useiso_c_binding(rout)
A:numpy.f2py.func2subr.sargs->', '.join([a for a in args if a not in extra_args])
A:numpy.f2py.func2subr.rout->copy.copy(rout)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.createfuncwrapper(rout,signature=0)
numpy.f2py.func2subr.createsubrwrapper(rout,signature=0)
numpy.f2py.func2subr.useiso_c_binding(rout)
numpy.f2py.func2subr.var2fixfortran(vars,a,fa=None,f90mode=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/use_rules.py----------------------------------------
A:numpy.f2py.use_rules.ret->applyrules(usemodule_rules, rd)
A:numpy.f2py.use_rules.vrd['texnamename']->vrd['texnamename'].replace(repr(i), nummap[i]).replace(repr(i), nummap[i])
A:numpy.f2py.use_rules.rd->dictappend({}, vrd)
numpy.f2py.use_rules.buildusevar(name,realname,vars,usemodulename)
numpy.f2py.use_rules.buildusevars(m,r)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/capi_maps.py----------------------------------------
A:numpy.f2py.capi_maps.(f2cmap_all, _)->process_f2cmap_dict(f2cmap_all, iso_c_binding_map, c2py_map)
A:numpy.f2py.capi_maps.f2cmap_default->copy.deepcopy(f2cmap_all)
A:numpy.f2py.capi_maps.f2cmap_all->copy.deepcopy(f2cmap_default)
A:numpy.f2py.capi_maps.d->eval(f.read().lower(), {}, {})
A:numpy.f2py.capi_maps.(f2cmap_all, f2cmap_mapped)->process_f2cmap_dict(f2cmap_all, d, c2py_map, True)
A:numpy.f2py.capi_maps.typespec->var['typespec'].lower()
A:numpy.f2py.capi_maps.expr->re.sub('\\blen\\b', 'f2py_slen', expr)
A:numpy.f2py.capi_maps.len->f2cexpr(a['len'])
A:numpy.f2py.capi_maps.ret['size']->getstrlength(var)
A:numpy.f2py.capi_maps.dim->copy.copy(var['dimension'])
A:numpy.f2py.capi_maps.ret['dims']->','.join(dim)
A:numpy.f2py.capi_maps.ret['rank']->repr(len(dim))
A:numpy.f2py.capi_maps.ctype->getctype(var)
A:numpy.f2py.capi_maps.(init, showinit)->getinit(a, var)
A:numpy.f2py.capi_maps.rank->repr(len(dim))
A:numpy.f2py.capi_maps.(ret['init.r'], ret['init.i'])->markoutercomma(ret['init'][1:-1]).split('@,@')
A:numpy.f2py.capi_maps.v->eval(v, {}, {})
A:numpy.f2py.capi_maps.elsize->var['charselector'].get('f2py_len', elsize)
A:numpy.f2py.capi_maps.ret['intent']->'|'.join(intent_flags)
A:numpy.f2py.capi_maps.(ret['init'], ret['showinit'])->getinit(a, var)
A:numpy.f2py.capi_maps.ret['length']->getstrlength(var)
A:numpy.f2py.capi_maps.ret->dictappend(ret, getarrdims(a, var))
A:numpy.f2py.capi_maps.ret['elsize']->get_elsize(var)
A:numpy.f2py.capi_maps.ddim->','.join(map(lambda x, y: '%s|%s' % (x, y), var['dimension'], dim))
A:numpy.f2py.capi_maps.(ret['pydocsign'], ret['pydocsignout'])->getpydocsign(a, var)
A:numpy.f2py.capi_maps.fname->getfortranname(rout)
A:numpy.f2py.capi_maps.ret['ctype']->getctype(rout)
A:numpy.f2py.capi_maps.ret['rlength']->getstrlength(rout['vars'][a])
A:numpy.f2py.capi_maps.ret['begintitle']->gentitle(ret['name'])
A:numpy.f2py.capi_maps.ret['endtitle']->gentitle('end of %s' % ret['name'])
A:numpy.f2py.capi_maps.ret['strlength']->getstrlength(rout)
A:numpy.f2py.capi_maps.ret['maxnofargs']->repr(nofargs)
A:numpy.f2py.capi_maps.ret['nofoptargs']->repr(nofoptargs)
A:numpy.f2py.capi_maps.ret['arrdocstr']->getarrdocsign(a, var)
numpy.f2py.capi_maps.cb_routsign2map(rout,um)
numpy.f2py.capi_maps.cb_sign2map(a,var,index=None)
numpy.f2py.capi_maps.common_sign2map(a,var)
numpy.f2py.capi_maps.f2cexpr(expr)
numpy.f2py.capi_maps.get_elsize(var)
numpy.f2py.capi_maps.getarrdims(a,var,verbose=0)
numpy.f2py.capi_maps.getarrdocsign(a,var)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getinit(a,var)
numpy.f2py.capi_maps.getpydocsign(a,var)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.load_f2cmap_file(f2cmap_file)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.sign2map(a,var)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/crackfortran.py----------------------------------------
A:numpy.f2py.crackfortran.nbytes->min(32, os.path.getsize(filename))
A:numpy.f2py.crackfortran.raw->fhandle.read(nbytes)
A:numpy.f2py.crackfortran.line->determineexprtype_re_5.match(expr).group('after').strip()
A:numpy.f2py.crackfortran.includeline->re.compile('\\s*include\\s*(\\\'|")(?P<name>[^\\\'"]*)(\\\'|")', re.I)
A:numpy.f2py.crackfortran.cont1->re.compile('(?P<line>.*)&\\s*\\Z')
A:numpy.f2py.crackfortran.cont2->re.compile('(\\s*&|)(?P<line>.*)')
A:numpy.f2py.crackfortran.mline_mark->re.compile(".*?'''")
A:numpy.f2py.crackfortran.fin->fileinput.FileInput(ffile, openhook=openhook)
A:numpy.f2py.crackfortran.l->str(eval(l, {}, params))
A:numpy.f2py.crackfortran.currentfilename->fileinput.FileInput(ffile, openhook=openhook).filename()
A:numpy.f2py.crackfortran.(l, rl)->split_by_unquoted(l, '!')
A:numpy.f2py.crackfortran.(l, _)->split_by_unquoted(l + 4 * ' ' + rl[5:], '!')
A:numpy.f2py.crackfortran.r->eval(e, g, l)
A:numpy.f2py.crackfortran.finalline->m.group('after').strip().lower()
A:numpy.f2py.crackfortran.lc->fileinput.FileInput(ffile, openhook=openhook).readline()
A:numpy.f2py.crackfortran.m->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr)
A:numpy.f2py.crackfortran.fn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.fn1->os.path.join(inc_dir, fn)
A:numpy.f2py.crackfortran.typespattern4implicit->re.compile(beforethisafter % ('', fortrantypes + '|static|automatic|undefined', fortrantypes + '|static|automatic|undefined', '.*'), re.I)
A:numpy.f2py.crackfortran.d->dsize.tostring(language=symbolic.Language.C)
A:numpy.f2py.crackfortran.n->rmbadname1(m.group('name').strip())
A:numpy.f2py.crackfortran.crackline_re_1->re.compile('\\s*(?P<result>\\b[a-z]+\\w*\\b)\\s*=.*', re.I)
A:numpy.f2py.crackfortran.crackline_bind_1->re.compile('\\s*(?P<bind>\\b[a-z]+\\w*\\b)\\s*=.*', re.I)
A:numpy.f2py.crackfortran.crackline_bindlang->re.compile('\\s*bind\\(\\s*(?P<lang>[^,]+)\\s*,\\s*name\\s*=\\s*"(?P<lang_name>[^"]+)"\\s*\\)', re.I)
A:numpy.f2py.crackfortran.(_, has_semicolon)->split_by_unquoted(line, ';')
A:numpy.f2py.crackfortran.(line, semicolon_line)->split_by_unquoted(semicolon_line[1:], ';')
A:numpy.f2py.crackfortran.m1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee)
A:numpy.f2py.crackfortran.m2->re.match('\\A\\s*(?P<local>\\b\\w+\\b)\\s*=\\s*>\\s*(?P<use>\\b\\w+\\b)\\s*\\Z', l, re.I)
A:numpy.f2py.crackfortran.a->expr2name(a, block, argsl)
A:numpy.f2py.crackfortran.(before, after)->split_by_unquoted(after[1:], comma + '()')
A:numpy.f2py.crackfortran.decl->setcharselector(decl, decl2[k], force)
A:numpy.f2py.crackfortran.selectpattern->re.compile('\\s*(?P<this>(@\\(@.*?@\\)@|\\*[\\d*]+|\\*\\s*@\\(@.*?@\\)@|))(?P<after>.*)\\Z', re.I)
A:numpy.f2py.crackfortran.typedefpattern->re.compile('(?:,(?P<attributes>[\\w(),]+))?(::)?(?P<name>\\b[a-z$_][\\w$]*\\b)(?:\\((?P<params>[\\w,]*)\\))?\\Z', re.I)
A:numpy.f2py.crackfortran.nameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>(?:(?!@\\)@).)*)\\s*@\\)@))*\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.operatorpattern->re.compile('\\s*(?P<scheme>(operator|assignment))@\\(@\\s*(?P<name>[^)]+)\\s*@\\)@\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.callnameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*@\\(@\\s*(?P<args>.*)\\s*@\\)@\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.real16pattern->re.compile('([-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[dD]((?:[-+]?\\d+)?)')
A:numpy.f2py.crackfortran.real8pattern->re.compile('([-+]?((?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[eE]((?:[-+]?\\d+)?)|(\\d+\\.\\d*))')
A:numpy.f2py.crackfortran._intentcallbackpattern->re.compile('intent\\s*\\(.*?\\bcallback\\b', re.I)
A:numpy.f2py.crackfortran.attrs->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).group('attributes')
A:numpy.f2py.crackfortran.pattern->re.compile('bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*["\\\'](?P<name>[^"\\\']+)["\\\']\\s*)?\\)', re.I)
A:numpy.f2py.crackfortran.match->re.compile('bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*["\\\'](?P<name>[^"\\\']+)["\\\']\\s*)?\\)', re.I).search(line)
A:numpy.f2py.crackfortran.bind_statement->re.compile('bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*["\\\'](?P<name>[^"\\\']+)["\\\']\\s*)?\\)', re.I).search(line).group(0)
A:numpy.f2py.crackfortran.(line, bind_cname)->parse_name_for_bind(line)
A:numpy.f2py.crackfortran.block->analyzecommon(block)
A:numpy.f2py.crackfortran.(name, attrs, _)->_resolvetypedefpattern(m.group('after'))
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars'][name]->appenddecl(groupcache[groupcounter]['vars'][name], groupcache[groupcounter]['vars'][result])
A:numpy.f2py.crackfortran.(name, args, result, bindcline)->_resolvenameargspattern(m.group('after'))
A:numpy.f2py.crackfortran.args->rmbadname([x.strip() for x in markoutercomma(args).split('@,@')])
A:numpy.f2py.crackfortran.groupcache[groupcounter]['prefix']->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('before')
A:numpy.f2py.crackfortran.groupcache[groupcounter]['name']->rmbadname1(name)
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars']->copy.deepcopy(groupcache[groupcounter - 2]['vars'])
A:numpy.f2py.crackfortran.bindcdat->re.search(crackline_bindlang, bindcline)
A:numpy.f2py.crackfortran.groupcache[groupcounter]['bindlang'][name]['lang']->re.search(crackline_bindlang, bindcline).group('lang')
A:numpy.f2py.crackfortran.groupcache[groupcounter]['bindlang'][name]['name']->re.search(crackline_bindlang, bindcline).group('lang_name')
A:numpy.f2py.crackfortran.t->determineexprtype(m.group('name'), vars, rules)
A:numpy.f2py.crackfortran.(typespec, selector, attr, edecl)->cracktypespec0(m.group('this'), m.group('after'))
A:numpy.f2py.crackfortran.(name, args, result, _)->_resolvenameargspattern(m.group('after'))
A:numpy.f2py.crackfortran.last_name->updatevars(typespec, selector, attr, edecl)
A:numpy.f2py.crackfortran.ll->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after').strip()
A:numpy.f2py.crackfortran.i->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after').strip().find('::')
A:numpy.f2py.crackfortran.pl->ll[:i].strip()
A:numpy.f2py.crackfortran.ch->markoutercomma(pl).split('@,@')
A:numpy.f2py.crackfortran.k->rmbadname1(k)
A:numpy.f2py.crackfortran.params->get_parameters(vars, get_useparameters(block))
A:numpy.f2py.crackfortran.tt->list(v)
A:numpy.f2py.crackfortran.tt[m.start():m.end()]->list(v[m.start():m.end()].lower().replace('d', 'e'))
A:numpy.f2py.crackfortran.initexpr->initexpr[1:].lower().replace('d', 'e').replace(',', '+1j*(')
A:numpy.f2py.crackfortran.v->eval(v)
A:numpy.f2py.crackfortran.edecl[k]['=']->repr(v)
A:numpy.f2py.crackfortran.(kindselect, charselect, typename)->cracktypespec(typespec, selector)
A:numpy.f2py.crackfortran.begcendc->eval(e, g, l).strip()
A:numpy.f2py.crackfortran.dl->markoutercomma(d, ':').split('@:@')
A:numpy.f2py.crackfortran.vars->vars2fortran(block, block['vars'], argsl, tab + tabchar, as_interface=as_interface)
A:numpy.f2py.crackfortran.vtype->vars[v].get('typespec')
A:numpy.f2py.crackfortran.vdim->getdimension(vars[v])
A:numpy.f2py.crackfortran.(multiplier, value)->re.compile('bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*["\\\'](?P<name>[^"\\\']+)["\\\']\\s*)?\\)', re.I).search(line).split('*')
A:numpy.f2py.crackfortran.current_val->vars[v].get('=')
A:numpy.f2py.crackfortran.bn->bn.strip().strip()
A:numpy.f2py.crackfortran.mm->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.name->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).group('name')
A:numpy.f2py.crackfortran.rl[m2.group('local').strip()]->re.match('\\A\\s*(?P<local>\\b\\w+\\b)\\s*=\\s*>\\s*(?P<use>\\b\\w+\\b)\\s*\\Z', l, re.I).group('use').strip()
A:numpy.f2py.crackfortran.d[m.group('this')]->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after')
A:numpy.f2py.crackfortran.typespec->typespec.strip().lower().strip().lower()
A:numpy.f2py.crackfortran.d[k]->unmarkouterparen(d[k])
A:numpy.f2py.crackfortran.attr->ll[:i].strip()
A:numpy.f2py.crackfortran.namepattern->re.compile('\\s*(?P<name>\\b\\w+\\b)\\s*(?P<after>.*)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.kindselector->re.compile('\\s*(\\(\\s*(kind\\s*=)?\\s*(?P<kind>.*)\\s*\\)|\\*\\s*(?P<kind2>.*?))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.charselector->re.compile('\\s*(\\((?P<lenkind>.*)\\)|\\*\\s*(?P<charlen>.*))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenkindpattern->re.compile('\\s*(kind\\s*=\\s*(?P<kind>.*?)\\s*(@,@\\s*len\\s*=\\s*(?P<len>.*)|)|(len\\s*=\\s*|)(?P<len2>.*?)\\s*(@,@\\s*(kind\\s*=\\s*|)(?P<kind2>.*)|(f2py_len\\s*=\\s*(?P<f2py_len>.*))|))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenarraypattern->re.compile('\\s*(@\\(@\\s*(?!/)\\s*(?P<array>.*?)\\s*@\\)@\\s*\\*\\s*(?P<len>.*?)|(\\*\\s*(?P<len2>.*?)|)\\s*(@\\(@\\s*(?!/)\\s*(?P<array2>.*?)\\s*@\\)@|))\\s*(=\\s*(?P<init>.*?)|(@\\(@|)/\\s*(?P<init2>.*?)\\s*/(@\\)@|)|)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.expr->expr.strip().strip()
A:numpy.f2py.crackfortran.c->c.lower().lower()
A:numpy.f2py.crackfortran.s->symbolic.as_symbol(v)
A:numpy.f2py.crackfortran.ename->rmbadname1(m.group('name'))
A:numpy.f2py.crackfortran.edecl->groupcache[groupcounter]['vars'][ename].copy()
A:numpy.f2py.crackfortran.edecl['kindselector']->copy.copy(kindselect)
A:numpy.f2py.crackfortran.edecl['kindselector'][k]->copy.copy(kindselect[k])
A:numpy.f2py.crackfortran.edecl['charselector'][k]->copy.copy(charselect[k])
A:numpy.f2py.crackfortran.edecl['attrspec']->copy.copy(attrspec)
A:numpy.f2py.crackfortran.edecl['typespec']->copy.copy(typespec)
A:numpy.f2py.crackfortran.edecl['charselector']->copy.copy(charselect)
A:numpy.f2py.crackfortran.d1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.d1[k]->unmarkouterparen(d1[k])
A:numpy.f2py.crackfortran.kindselect->kindselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.kindselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.charselect->charselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.lenkind->lenkind.groupdict().groupdict()
A:numpy.f2py.crackfortran.charselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.typename->typename.group('name').group('name')
A:numpy.f2py.crackfortran.usedict->get_usedict(block)
A:numpy.f2py.crackfortran.usename->usename.lower().lower()
A:numpy.f2py.crackfortran.param_map->get_useparameters(block)
A:numpy.f2py.crackfortran.g->postcrack(g, tab=tab + '\t')
A:numpy.f2py.crackfortran.block['vars']->analyzevars(block)
A:numpy.f2py.crackfortran.block['sortvars']->sortvarnames(block['vars'])
A:numpy.f2py.crackfortran.block['body']->analyzebody(block, args, tab=tab)
A:numpy.f2py.crackfortran.mvars->copy.copy(block['vars'])
A:numpy.f2py.crackfortran.edef->copy.copy(bb)
A:numpy.f2py.crackfortran.b['saved_interface']->crack2fortrangen(b, '\n' + ' ' * 6, as_interface=True)
A:numpy.f2py.crackfortran.b->myeval(ee, {}, {})
A:numpy.f2py.crackfortran.getlincoef_re_1->re.compile('\\A\\b\\w+\\b\\Z', re.I)
A:numpy.f2py.crackfortran.len_e->len(e)
A:numpy.f2py.crackfortran.re_1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I)
A:numpy.f2py.crackfortran.c2->myeval(ee, {}, {})
A:numpy.f2py.crackfortran.word_pattern->re.compile('\\b[a-z][\\w$]*\\b', re.I)
A:numpy.f2py.crackfortran.words->vars[name].get('depend', [])
A:numpy.f2py.crackfortran.names->list(vars.keys())
A:numpy.f2py.crackfortran.depend_dict->_calc_depend_dict(vars)
A:numpy.f2py.crackfortran.machine->platform.machine().lower()
A:numpy.f2py.crackfortran.g_params->copy.copy(global_params)
A:numpy.f2py.crackfortran.kind_re->re.compile('\\bkind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_int_kind_re->re.compile('\\bselected_int_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_kind_re->re.compile('\\bselected_(int|real)_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.orig_v_len->len(v)
A:numpy.f2py.crackfortran.v_->eval(v).split('_')
A:numpy.f2py.crackfortran.params[n]->chr(params[n])
A:numpy.f2py.crackfortran.nl->rmbadname1(m.group('name').strip()).lower()
A:numpy.f2py.crackfortran.value->re.sub('\\b' + varname + '\\b\\s*[\\[]\\s*0\\s*[\\]]', varname, value)
A:numpy.f2py.crackfortran.(implicitrules, attrrules)->buildimplicitrules(block)
A:numpy.f2py.crackfortran.vars[n]->setattrspec(vars[n], 'recursive')
A:numpy.f2py.crackfortran.ln0->n[0].lower()
A:numpy.f2py.crackfortran.tmp->c.lower().lower().replace(' ', '')
A:numpy.f2py.crackfortran.note->note.replace('\\n ', '\n').replace('\\n ', '\n')
A:numpy.f2py.crackfortran.(d1, d2)->map(symbolic.Expr.parse, dl)
A:numpy.f2py.crackfortran.(a, b)->dsize.linear_solve(s)
A:numpy.f2py.crackfortran.all_symbols->set(dsize.symbols())
A:numpy.f2py.crackfortran.v_deps->vars[v].get('depend', [])
A:numpy.f2py.crackfortran.n_deps->setattrspec(vars[n], 'recursive').get('depend', [])
A:numpy.f2py.crackfortran.n_is_input->l_or(isintent_in, isintent_inout, isintent_inplace)(vars[n])
A:numpy.f2py.crackfortran.coeffs_and_deps->dimension_exprs.get(d)
A:numpy.f2py.crackfortran.all_deps->set()
A:numpy.f2py.crackfortran.init->init.tostring(language=symbolic.Language.C).tostring(language=symbolic.Language.C)
A:numpy.f2py.crackfortran.v_attr->vars[v].get('attrspec', [])
A:numpy.f2py.crackfortran.aa->''.join(aa.split())
A:numpy.f2py.crackfortran.vars[v]['depend']->list(set(v_deps))
A:numpy.f2py.crackfortran.length->_eval_length(vars[n]['charselector']['len'], params)
A:numpy.f2py.crackfortran.vars[n]['depend']->list(set(n_deps))
A:numpy.f2py.crackfortran.vars[n]['=']->_eval_scalar(vars[n]['='], params)
A:numpy.f2py.crackfortran.pr1->pr1.replace('recursive', '').replace('pure', '')
A:numpy.f2py.crackfortran.pr->pr1.replace('recursive', '').replace('pure', '').replace('recursive', '')
A:numpy.f2py.crackfortran.kindselect['kind']->eval(kindselect['kind'], {}, params)
A:numpy.f2py.crackfortran.neededvars->copy.copy(block['args'])
A:numpy.f2py.crackfortran.analyzeargs_re_1->re.compile('\\A[a-z]+[\\w$]*\\Z', re.I)
A:numpy.f2py.crackfortran.p->dict(zip(dimrange, v_eval))
A:numpy.f2py.crackfortran.dimrange->range(int(lbound), int(ubound) + 1)
A:numpy.f2py.crackfortran.bound->param_parse(dimrange[0], params)
A:numpy.f2py.crackfortran.lbound->param_parse(dimrange[0], params)
A:numpy.f2py.crackfortran.ubound->param_parse(dimrange[1], params)
A:numpy.f2py.crackfortran.item->eval(item, g_params, params)
A:numpy.f2py.crackfortran.index->int(param_parse(ddims, params))
A:numpy.f2py.crackfortran.at->determineexprtype(a, block['vars'], implicitrules)
A:numpy.f2py.crackfortran.block['vars'][a]->setattrspec(block['vars'][a], 'external')
A:numpy.f2py.crackfortran.(implicitrules, _)->buildimplicitrules(block)
A:numpy.f2py.crackfortran.determineexprtype_re_1->re.compile('\\A\\(.+?,.+?\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_2->re.compile('\\A[+-]?\\d+(_(?P<name>\\w+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_3->re.compile('\\A[+-]?[\\d.]+[-\\d+de.]*(_(?P<name>\\w+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_4->re.compile('\\A\\(.*\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_5->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.rn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.use->use2fortran(block['use'], tab + tabchar)
A:numpy.f2py.crackfortran.common->common2fortran(block['common'], tab + tabchar)
A:numpy.f2py.crackfortran.body->crack2fortrangen(block['body'], tab + tabchar, as_interface=as_interface)
A:numpy.f2py.crackfortran.lst->true_intent_list(vars[a])
A:numpy.f2py.crackfortran.postlist->crackfortran(files)
A:numpy.f2py.crackfortran.new_result->dict()
A:numpy.f2py.crackfortran.(new_index, new_item)->traverse((index, value), visit, *args, parents=parents + [parent], result=result, **kwargs)
A:numpy.f2py.crackfortran.(new_key, new_value)->traverse((key, value), visit, *args, parents=parents + [parent], result=result, **kwargs)
A:numpy.f2py.crackfortran.new_value->re.sub('(?<![&])\\b' + varname + '\\b', '&' + varname, new_value)
A:numpy.f2py.crackfortran.pyf->crack2fortran(postlist)
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length,params)
numpy.f2py.crackfortran._eval_scalar(value,params)
numpy.f2py.crackfortran._get_depend_dict(name,vars,deps)
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran._is_visit_pair(obj)
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._resolvetypedefpattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p,r=0,radix=0)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block,args,tab='')
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m,case,line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl,decl2,force=1)
numpy.f2py.crackfortran.appendmultiline(group,context_name,ml)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.character_backward_compatibility_hook(item,parents,result,*args,**kwargs)
numpy.f2py.crackfortran.common2fortran(common,tab='')
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block,tab='\n',as_interface=False)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line,reset=0)
numpy.f2py.crackfortran.cracktypespec(typespec,selector)
numpy.f2py.crackfortran.cracktypespec0(typespec,ll)
numpy.f2py.crackfortran.determineexprtype(expr,vars,rules={})
numpy.f2py.crackfortran.expr2name(a,block,args=[])
numpy.f2py.crackfortran.get_parameters(vars,global_params={})
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block,param_map=None)
numpy.f2py.crackfortran.getblockname(block,unknown='unknown')
numpy.f2py.crackfortran.getlincoef(e,xset)
numpy.f2py.crackfortran.is_free_format(fname)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line,comma=',')
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e,g=None,l=None)
numpy.f2py.crackfortran.openhook(filename,mode)
numpy.f2py.crackfortran.outmess(line,flag=1)
numpy.f2py.crackfortran.param_eval(v,g_params,params,dimspec=None)
numpy.f2py.crackfortran.param_parse(d,params)
numpy.f2py.crackfortran.parse_name_for_bind(line)
numpy.f2py.crackfortran.postcrack(block,args=None,tab='')
numpy.f2py.crackfortran.postcrack2(block,tab='',param_map=None)
numpy.f2py.crackfortran.readfortrancode(ffile,dowithline=show,istop=1)
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.reset_global_f2py_vars()
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl,attr,force=0)
numpy.f2py.crackfortran.setcharselector(decl,sel,force=0)
numpy.f2py.crackfortran.setkindselector(decl,sel,force=0)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.split_by_unquoted(line,characters)
numpy.f2py.crackfortran.traverse(obj,visit,parents=[],result=None,*args,**kwargs)
numpy.f2py.crackfortran.true_intent_list(var)
numpy.f2py.crackfortran.undo_rmbadname(names)
numpy.f2py.crackfortran.undo_rmbadname1(name)
numpy.f2py.crackfortran.unmarkouterparen(line)
numpy.f2py.crackfortran.updatevars(typespec,selector,attrspec,entitydecl)
numpy.f2py.crackfortran.use2fortran(use,tab='')
numpy.f2py.crackfortran.vars2fortran(block,vars,args,tab='',as_interface=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/rules.py----------------------------------------
A:numpy.f2py.rules.generationtime->int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
A:numpy.f2py.rules.vrd->capi_maps.sign2map(a, var[a])
A:numpy.f2py.rules.rd->dictappend(rd, ar)
A:numpy.f2py.rules.nb1->copy.deepcopy(nb)
A:numpy.f2py.rules.isf90->requiresf90wrapper(nb)
A:numpy.f2py.rules.(api, wrap)->buildapi(nb)
A:numpy.f2py.rules.ar->applyrules(routine_rules, rd)
A:numpy.f2py.rules.(cr, wrap)->common_rules.buildhooks(m)
A:numpy.f2py.rules.(mr, wrap)->f90mod_rules.buildhooks(m)
A:numpy.f2py.rules.needs->cfuncs.get_needs()
A:numpy.f2py.rules.fn->os.path.join(options['buildpath'], vrd['modulename'] + 'module.tex')
A:numpy.f2py.rules.wn->os.path.join(options['buildpath'], '%s-f2pywrappers2.f90' % vrd['modulename'])
A:numpy.f2py.rules.lines->''.join(lines).replace('\n     &\n', '\n')
A:numpy.f2py.rules.(rout, wrap)->func2subr.assubr(rout)
A:numpy.f2py.rules.(args, depargs)->getargs2(rout)
A:numpy.f2py.rules.rd['docsignature']->stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign': rd['docsign'], 'docsignopt': rd['docsignopt'], 'docsignxa': rd['docsignxa']}))
A:numpy.f2py.rules.optargs->stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa': rd['docsignxashort'], 'docsignopt': rd['docsignoptshort']}))
A:numpy.f2py.rules.rd['docsignatureshort']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.rules.rd['latexdocsignatureshort']->rd['latexdocsignatureshort'].replace(',', ', ').replace(',', ', ')
A:numpy.f2py.rules.cfs->stripcomma(replace('#callfortran##callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
A:numpy.f2py.rules.rd['callcompaqfortran']->stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m,um)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/__version__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_isocbind.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/common_rules.py----------------------------------------
A:numpy.f2py.common_rules.lower_name->name.lower()
A:numpy.f2py.common_rules.ct->capi_maps.getctype(vars[n])
A:numpy.f2py.common_rules.elsize->capi_maps.get_elsize(vars[n])
A:numpy.f2py.common_rules.dm->capi_maps.getarrdims(n, vars[n])
A:numpy.f2py.common_rules.dms->dm['dims'].strip()
A:numpy.f2py.common_rules.inames1->rmbadname(inames)
A:numpy.f2py.common_rules.inames1_tps->','.join(['char *' + s for s in inames1])
A:numpy.f2py.common_rules.tname->name.replace('_', '\\_')
A:numpy.f2py.common_rules.note->'\n'.join(note)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.findcommonblocks(block,top=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_backends/__init__.py----------------------------------------
numpy.f2py._backends.__init__.f2py_build_generator(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_backends/_meson.py----------------------------------------
A:numpy.f2py._backends._meson.self.substitutions['source_list']->',\n'.join([f"{self.indent}'''{source}'''," for source in self.sources])
A:numpy.f2py._backends._meson.self.substitutions['dep_list']->f',\n{self.indent}'.join([f"{self.indent}dependency('{dep}')," for dep in self.deps])
A:numpy.f2py._backends._meson.self.substitutions['lib_dir_declarations']->'\n'.join([f"lib_dir_{i} = declare_dependency(link_args : ['''-L{lib_dir}'''])" for (i, lib_dir) in enumerate(self.library_dirs)])
A:numpy.f2py._backends._meson.self.substitutions['lib_declarations']->'\n'.join([f"{lib.replace('.', '_')} = declare_dependency(link_args : ['-l{lib}'])" for lib in self.libraries])
A:numpy.f2py._backends._meson.self.substitutions['lib_list']->f'\n{self.indent}'.join([f"{self.indent}{lib.replace('.', '_')}," for lib in self.libraries])
A:numpy.f2py._backends._meson.self.substitutions['lib_dir_list']->f'\n{self.indent}'.join([f'{self.indent}lib_dir_{i},' for i in range(len(self.library_dirs))])
A:numpy.f2py._backends._meson.self.substitutions['inc_list']->f',\n{self.indent}'.join([f"{self.indent}'''{inc}'''," for inc in self.include_dirs])
A:numpy.f2py._backends._meson.template->Template(self.meson_build_template())
A:numpy.f2py._backends._meson.meson_build->re.sub(',,', ',', meson_build)
A:numpy.f2py._backends._meson.self.dependencies->self.extra_dat.get('dependencies', [])
A:numpy.f2py._backends._meson.self.fc_flags->_get_flags(self.fc_flags)
A:numpy.f2py._backends._meson.path_objects->chain(walk_dir.glob(f'{self.modulename}*.so'), walk_dir.glob(f'{self.modulename}*.pyd'))
A:numpy.f2py._backends._meson.meson_template->MesonTemplate(self.modulename, self.sources, self.dependencies, self.libraries, self.library_dirs, self.include_dirs, self.extra_objects, self.flib_flags, self.fc_flags, self.build_type, sys.executable)
A:numpy.f2py._backends._meson.src->MesonTemplate(self.modulename, self.sources, self.dependencies, self.libraries, self.library_dirs, self.include_dirs, self.extra_objects, self.flib_flags, self.fc_flags, self.build_type, sys.executable).generate_meson_build()
A:numpy.f2py._backends._meson.self.sources->_prepare_sources(self.modulename, self.sources, self.build_dir)
A:numpy.f2py._backends._meson.extended_sources->sources.copy()
A:numpy.f2py._backends._meson.bdir->Path(bdir)
A:numpy.f2py._backends._meson.flag_pattern->re.compile('--f(77|90)flags=(.*)')
A:numpy.f2py._backends._meson.match_result->re.compile('--f(77|90)flags=(.*)').match(flag)
A:numpy.f2py._backends._meson.values->re.compile('--f(77|90)flags=(.*)').match(flag).group(2).strip().split()
A:numpy.f2py._backends._meson.unique_flags->list(dict.fromkeys(flag_values))
numpy.f2py._backends.MesonBackend(self,*args,**kwargs)
numpy.f2py._backends.MesonBackend._move_exec_to_root(self,build_dir:Path)
numpy.f2py._backends.MesonBackend._run_subprocess_command(self,command,cwd)
numpy.f2py._backends.MesonBackend.compile(self)->None
numpy.f2py._backends.MesonBackend.run_meson(self,build_dir:Path)
numpy.f2py._backends.MesonBackend.write_meson_build(self,build_dir:Path)->None
numpy.f2py._backends._meson.MesonBackend(self,*args,**kwargs)
numpy.f2py._backends._meson.MesonBackend.__init__(self,*args,**kwargs)
numpy.f2py._backends._meson.MesonBackend._move_exec_to_root(self,build_dir:Path)
numpy.f2py._backends._meson.MesonBackend._run_subprocess_command(self,command,cwd)
numpy.f2py._backends._meson.MesonBackend.compile(self)->None
numpy.f2py._backends._meson.MesonBackend.run_meson(self,build_dir:Path)
numpy.f2py._backends._meson.MesonBackend.write_meson_build(self,build_dir:Path)->None
numpy.f2py._backends._meson.MesonTemplate(self,modulename:str,sources:list[Path],deps:list[str],libraries:list[str],library_dirs:list[Path],include_dirs:list[Path],object_files:list[Path],linker_args:list[str],fortran_args:list[str],build_type:str,python_exe:str)
numpy.f2py._backends._meson.MesonTemplate.__init__(self,modulename:str,sources:list[Path],deps:list[str],libraries:list[str],library_dirs:list[Path],include_dirs:list[Path],object_files:list[Path],linker_args:list[str],fortran_args:list[str],build_type:str,python_exe:str)
numpy.f2py._backends._meson.MesonTemplate.deps_substitution(self)->None
numpy.f2py._backends._meson.MesonTemplate.fortran_args_substitution(self)->None
numpy.f2py._backends._meson.MesonTemplate.generate_meson_build(self)
numpy.f2py._backends._meson.MesonTemplate.include_substitution(self)->None
numpy.f2py._backends._meson.MesonTemplate.initialize_template(self)->None
numpy.f2py._backends._meson.MesonTemplate.libraries_substitution(self)->None
numpy.f2py._backends._meson.MesonTemplate.meson_build_template(self)->str
numpy.f2py._backends._meson.MesonTemplate.sources_substitution(self)->None
numpy.f2py._backends._meson._get_flags(fc_flags)
numpy.f2py._backends._meson._prepare_sources(mname,sources,bdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_backends/_backend.py----------------------------------------
numpy.f2py._backends._backend.Backend(self,modulename,sources,extra_objects,build_dir,include_dirs,library_dirs,libraries,define_macros,undef_macros,f2py_flags,sysinfo_flags,fc_flags,flib_flags,setup_flags,remove_build_dir,extra_dat)
numpy.f2py._backends._backend.Backend.__init__(self,modulename,sources,extra_objects,build_dir,include_dirs,library_dirs,libraries,define_macros,undef_macros,f2py_flags,sysinfo_flags,fc_flags,flib_flags,setup_flags,remove_build_dir,extra_dat)
numpy.f2py._backends._backend.Backend.compile(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/_backends/_distutils.py----------------------------------------
A:numpy.f2py._backends._distutils.i->get_info(n)
A:numpy.f2py._backends._distutils.ext->Extension(**ext_args)
numpy.f2py._backends.DistutilsBackend(sef,*args,**kwargs)
numpy.f2py._backends.DistutilsBackend.compile(self)
numpy.f2py._backends._distutils.DistutilsBackend(sef,*args,**kwargs)
numpy.f2py._backends._distutils.DistutilsBackend.__init__(sef,*args,**kwargs)
numpy.f2py._backends._distutils.DistutilsBackend.compile(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_f2cmap.py----------------------------------------
A:numpy.f2py.tests.test_f2cmap.inp->numpy.ones(3)
A:numpy.f2py.tests.test_f2cmap.out->self.module.func1(inp)
numpy.f2py.tests.test_f2cmap.TestF2Cmap(util.F2PyTest)
numpy.f2py.tests.test_f2cmap.TestF2Cmap.test_gh15095(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_symbolic.py----------------------------------------
A:numpy.f2py.tests.test_symbolic.(r, d)->eliminate_quotes(s)
A:numpy.f2py.tests.test_symbolic.s1->insert_quotes(r, d)
A:numpy.f2py.tests.test_symbolic.x->as_symbol('x')
A:numpy.f2py.tests.test_symbolic.y->as_symbol('y')
A:numpy.f2py.tests.test_symbolic.z->as_symbol('z')
A:numpy.f2py.tests.test_symbolic.n->as_number(123)
A:numpy.f2py.tests.test_symbolic.m->as_number(456)
A:numpy.f2py.tests.test_symbolic.fn->as_number(12.3)
A:numpy.f2py.tests.test_symbolic.fm->as_number(45.6)
A:numpy.f2py.tests.test_symbolic.c->as_complex(1.0, 2.0)
A:numpy.f2py.tests.test_symbolic.c2->as_complex(3, 4)
A:numpy.f2py.tests.test_symbolic.s->as_string('"ABC"')
A:numpy.f2py.tests.test_symbolic.s2->as_string('"ABC"')
A:numpy.f2py.tests.test_symbolic.a->as_array((x, y))
A:numpy.f2py.tests.test_symbolic.b->as_array((n,))
A:numpy.f2py.tests.test_symbolic.t->as_string('"123"')
A:numpy.f2py.tests.test_symbolic.u->as_ternary(x, z, y)
A:numpy.f2py.tests.test_symbolic.v->Expr(Op.FACTORS, {x: 2, Expr(Op.FACTORS, {x: 1, y: 1}): 3})
A:numpy.f2py.tests.test_symbolic.w->as_factors(y)
A:numpy.f2py.tests.test_symbolic.e->as_eq(x, y)
A:numpy.f2py.tests.test_symbolic.f->as_symbol('f')
A:numpy.f2py.tests.test_symbolic.function_symbols->set()
A:numpy.f2py.tests.test_symbolic.symbols->set()
numpy.f2py.tests.test_symbolic.TestSymbolic(util.F2PyTest)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_as_numer_denom(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_eliminate_quotes(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_fromstring(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_linear_solve(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_operations(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_polynomial_atoms(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_sanity(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_substitute(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_tostring_c(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_tostring_fortran(self)
numpy.f2py.tests.test_symbolic.TestSymbolic.test_traverse(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_pyf_src.py----------------------------------------
A:numpy.f2py.tests.test_pyf_src.pyf->process_str(pyf_src)
A:numpy.f2py.tests.test_pyf_src.normalized_pyf->normalize_whitespace(pyf)
A:numpy.f2py.tests.test_pyf_src.normalized_expected_pyf->normalize_whitespace(expected_pyf)
numpy.f2py.tests.test_pyf_src.normalize_whitespace(s)
numpy.f2py.tests.test_pyf_src.test_from_template()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_f2py2e.py----------------------------------------
A:numpy.f2py.tests.test_f2py2e.PPaths->namedtuple('PPaths', 'finp, f90inp, pyf, wrap77, wrap90, cmodf')
A:numpy.f2py.tests.test_f2py2e.bpath->Path(fname_inp)
A:numpy.f2py.tests.test_f2py2e.fdat->util.getpath('tests', 'src', 'f2cmap', 'isoFortranEnvMap.f90').read_text()
A:numpy.f2py.tests.test_f2py2e.f2cmap->util.getpath('tests', 'src', 'f2cmap', '.f2py_f2cmap').read_text()
A:numpy.f2py.tests.test_f2py2e.ipath->Path(hello_world_f90)
A:numpy.f2py.tests.test_f2py2e.foutl->get_io_paths(hello_world_f77, mname='test')
A:numpy.f2py.tests.test_f2py2e.wrapper->get_io_paths(hello_world_f77, mname='test').wrap90.read_text()
A:numpy.f2py.tests.test_f2py2e.(out, _)->capfd.readouterr()
A:numpy.f2py.tests.test_f2py2e.(_, err)->capfd.readouterr()
A:numpy.f2py.tests.test_f2py2e.(out, err)->capfd.readouterr()
A:numpy.f2py.tests.test_f2py2e.ipath2->Path(hello_world_f90)
A:numpy.f2py.tests.test_f2py2e.pyfdat->hipyf.read()
A:numpy.f2py.tests.test_f2py2e.capshi->re.compile('Block: HI')
A:numpy.f2py.tests.test_f2py2e.capslo->re.compile('Block: hi')
A:numpy.f2py.tests.test_f2py2e.cmd_run->shlex.split('python -c "import blah; blah.hi()"')
A:numpy.f2py.tests.test_f2py2e.rout->subprocess.run(cmd_run, capture_output=True, encoding='UTF-8')
A:numpy.f2py.tests.test_f2py2e.eerr->textwrap.dedent("debug-capi:Python C/API function blah.hi()\ndebug-capi:float hi=:output,hidden,scalar\ndebug-capi:hi=0\ndebug-capi:Fortran subroutine `f2pywraphi(&hi)'\ndebug-capi:hi=0\ndebug-capi:Building return value.\ndebug-capi:Python C/API function blah.hi: successful.\ndebug-capi:Freeing memory.\n        ")
A:numpy.f2py.tests.test_f2py2e.ocmr->ocmod.read()
numpy.f2py.tests.test_f2py2e.f2cmap_f90(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.get_io_paths(fname_inp,mname='untitled')
numpy.f2py.tests.test_f2py2e.gh22819_cli(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.gh23598_warn(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.hello_world_f77(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.hello_world_f90(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.retreal_f77(tmpdir_factory)
numpy.f2py.tests.test_f2py2e.test_build_dir(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_debugcapi(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_debugcapi_bld(hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_f2cmap(capfd,f2cmap_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_f2py_only(capfd,retreal_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_f2py_skip(capfd,retreal_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_file_processing_switch(capfd,hello_world_f90,retreal_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gen_pyf(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gen_pyf_no_overwrite(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gen_pyf_stdout(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gh22819_cli(capfd,gh22819_cli,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gh22819_many_pyf(capfd,gh22819_cli,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_gh23598_warn(capfd,gh23598_warn,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_hlink()
numpy.f2py.tests.test_f2py2e.test_inclheader(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_inclpath()
numpy.f2py.tests.test_f2py2e.test_latexdoc(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_lower_cmod(capfd,hello_world_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_lower_sig(capfd,hello_world_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_mod_gen_f77(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_mod_gen_gh25263(capfd,hello_world_f77,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_no_py312_distutils_fcompiler(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_nolatexdoc(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_norestexdoc(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_nowrapfunc(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_npd_arch()
numpy.f2py.tests.test_f2py2e.test_npd_compiler()
numpy.f2py.tests.test_f2py2e.test_npd_debug()
numpy.f2py.tests.test_f2py2e.test_npd_define()
numpy.f2py.tests.test_f2py2e.test_npd_f77exec()
numpy.f2py.tests.test_f2py2e.test_npd_f77flags()
numpy.f2py.tests.test_f2py2e.test_npd_f90exec()
numpy.f2py.tests.test_f2py2e.test_npd_f90flags()
numpy.f2py.tests.test_f2py2e.test_npd_fcompiler()
numpy.f2py.tests.test_f2py2e.test_npd_help_fcompiler()
numpy.f2py.tests.test_f2py2e.test_npd_incl()
numpy.f2py.tests.test_f2py2e.test_npd_lib()
numpy.f2py.tests.test_f2py2e.test_npd_link_auto()
numpy.f2py.tests.test_f2py2e.test_npd_linker()
numpy.f2py.tests.test_f2py2e.test_npd_noarch()
numpy.f2py.tests.test_f2py2e.test_npd_noopt()
numpy.f2py.tests.test_f2py2e.test_npd_opt()
numpy.f2py.tests.test_f2py2e.test_npd_undefine()
numpy.f2py.tests.test_f2py2e.test_npdistop(hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_overwrite(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_quiet(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_restdoc(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_shortlatex(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_untitled_cli(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_verbose(capfd,hello_world_f90,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_version(capfd,monkeypatch)
numpy.f2py.tests.test_f2py2e.test_wrapfunc_def(capfd,hello_world_f90,monkeypatch)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_return_complex.py----------------------------------------
A:numpy.f2py.tests.test_return_complex.r->t(10 ** 400)
numpy.f2py.tests.test_return_complex.TestFReturnComplex(TestReturnComplex)
numpy.f2py.tests.test_return_complex.TestFReturnComplex.test_all_f77(self,name)
numpy.f2py.tests.test_return_complex.TestFReturnComplex.test_all_f90(self,name)
numpy.f2py.tests.test_return_complex.TestReturnComplex(util.F2PyTest)
numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function(self,t,tname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_value_attrspec.py----------------------------------------
A:numpy.f2py.tests.test_value_attrspec.out->self.module.fortfuncs.square(inp)
numpy.f2py.tests.test_value_attrspec.TestValueAttr(util.F2PyTest)
numpy.f2py.tests.test_value_attrspec.TestValueAttr.test_gh21665(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_array_from_pyobj.py----------------------------------------
A:numpy.f2py.tests.test_array_from_pyobj.c_names_dict->dict(CHARACTER=np.dtype('c'), **_c_names_dict)
A:numpy.f2py.tests.test_array_from_pyobj.wrap->util.build_meson(src, module_name='test_array_from_pyobj_ext')
A:numpy.f2py.tests.test_array_from_pyobj.name->name.lower().lower()
A:numpy.f2py.tests.test_array_from_pyobj.intent->Intent()
A:numpy.f2py.tests.test_array_from_pyobj.obj->numpy.array(self.num23seq, dtype=t.dtype)
A:numpy.f2py.tests.test_array_from_pyobj.self.NAME->name.lower().lower().upper()
A:numpy.f2py.tests.test_array_from_pyobj.self.type_num->getattr(wrap, 'NPY_' + self.NAME)
A:numpy.f2py.tests.test_array_from_pyobj.self.dtype->numpy.dtype(info.type)
A:numpy.f2py.tests.test_array_from_pyobj.self.elsize->int(self.NAME[6:] or 0)
A:numpy.f2py.tests.test_array_from_pyobj.self.obj_copy->copy.deepcopy(obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr->util.build_meson(src, module_name='test_array_from_pyobj_ext').call(typ.type_num, typ.elsize, dims, intent.flags, obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr_attr->util.build_meson(src, module_name='test_array_from_pyobj_ext').array_attrs(self.arr)
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr->numpy.array(np.array(obj, dtype=typ.dtypechar).reshape(*dims), order=self.intent.is_intent('c') and 'C' or 'F')
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr_attr->util.build_meson(src, module_name='test_array_from_pyobj_ext').array_attrs(self.pyarr)
A:numpy.f2py.tests.test_array_from_pyobj.obj_attr->util.build_meson(src, module_name='test_array_from_pyobj_ext').array_attrs(self.obj)
A:numpy.f2py.tests.test_array_from_pyobj.request.cls.type->Type(request.param)
A:numpy.f2py.tests.test_array_from_pyobj.a->self.array(shape, intent.inplace, obj)
A:numpy.f2py.tests.test_array_from_pyobj.seq->getattr(self, 'num' + inp)
A:numpy.f2py.tests.test_array_from_pyobj.is_int->numpy.issubdtype(t.dtype, np.integer)
numpy.f2py.tests.test_array_from_pyobj.Array(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__init__(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__repr__(self)
numpy.f2py.tests.test_array_from_pyobj.Array.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal(self,arr1,arr2)
numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory(self)
numpy.f2py.tests.test_array_from_pyobj.Intent(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__getattr__(self,name)
numpy.f2py.tests.test_array_from_pyobj.Intent.__init__(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent(self,*names)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact(self,*names)
numpy.f2py.tests.test_array_from_pyobj.TestIntent
numpy.f2py.tests.test_array_from_pyobj.TestIntent.test_in_out(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.num23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.num2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.setup_type(self,request)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_cache_hidden(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_hidden(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype_failure(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_copy_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_nocopy(self,write,order,inp)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inout_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace_from_casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_none(self)
numpy.f2py.tests.test_array_from_pyobj.Type(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type.__new__(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type.__repr__(self)
numpy.f2py.tests.test_array_from_pyobj.Type._init(self,name)
numpy.f2py.tests.test_array_from_pyobj.Type.all_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.cast_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.equal_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.larger_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.smaller_types(self)
numpy.f2py.tests.test_array_from_pyobj.flags2names(flags)
numpy.f2py.tests.test_array_from_pyobj.flags_info(arr)
numpy.f2py.tests.test_array_from_pyobj.get_testdir()
numpy.f2py.tests.test_array_from_pyobj.setup_module()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_docs.py----------------------------------------
A:numpy.f2py.tests.test_docs.pytestmark->pytest.mark.skipif(not get_docdir().is_dir(), reason=f'Could not find f2py documentation sources({get_docdir()} does not exist)')
A:numpy.f2py.tests.test_docs.foo->getattr(self.module, 'foo2')
numpy.f2py.tests.test_docs.TestDocAdvanced(util.F2PyTest)
numpy.f2py.tests.test_docs.TestDocAdvanced.test_asterisk1(self)
numpy.f2py.tests.test_docs.TestDocAdvanced.test_asterisk2(self)
numpy.f2py.tests.test_docs.TestDocAdvanced.test_ftype(self)
numpy.f2py.tests.test_docs._path(*args)
numpy.f2py.tests.test_docs.get_docdir()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_kind.py----------------------------------------
numpy.f2py.tests.test_kind.TestKind(util.F2PyTest)
numpy.f2py.tests.test_kind.TestKind.test_int(self)
numpy.f2py.tests.test_kind.TestKind.test_quad_precision(self)
numpy.f2py.tests.test_kind.TestKind.test_real(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_return_logical.py----------------------------------------
numpy.f2py.tests.test_return_logical.TestFReturnLogical(TestReturnLogical)
numpy.f2py.tests.test_return_logical.TestFReturnLogical.test_all_f77(self,name)
numpy.f2py.tests.test_return_logical.TestFReturnLogical.test_all_f90(self,name)
numpy.f2py.tests.test_return_logical.TestReturnLogical(util.F2PyTest)
numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function(self,t)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_modules.py----------------------------------------
numpy.f2py.tests.test_modules.TestModuleAndSubroutine(util.F2PyTest)
numpy.f2py.tests.test_modules.TestModuleAndSubroutine.test_gh25337(self)
numpy.f2py.tests.test_modules.TestModuleDocString(util.F2PyTest)
numpy.f2py.tests.test_modules.TestModuleDocString.test_module_docstring(self)
numpy.f2py.tests.test_modules.TestUsedModule(util.F2PyTest)
numpy.f2py.tests.test_modules.TestUsedModule.test_gh25867(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_parameter.py----------------------------------------
A:numpy.f2py.tests.test_parameter.x->self.module.foo_array_delims()
A:numpy.f2py.tests.test_parameter.y->self.module.foo_array_any_index(x)
A:numpy.f2py.tests.test_parameter.z->self.module.foo_array(x, y)
numpy.f2py.tests.test_parameter.TestParameters(util.F2PyTest)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_array(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_array_any_index(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_array_delims(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_both(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_compound_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_long(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_no(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_non_compound_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_double(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_single(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_sum(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_string.py----------------------------------------
A:numpy.f2py.tests.test_string.(inp, out)->self.module.char_test.change_strings(strings, strings.shape[1])
A:numpy.f2py.tests.test_string.expected->self._sint(s, end=4)
A:numpy.f2py.tests.test_string.a->numpy.array(b'123\x00\x00')
A:numpy.f2py.tests.test_string.b->numpy.array(b'123\x00\x00')
A:numpy.f2py.tests.test_string.c->numpy.array(b'123')
A:numpy.f2py.tests.test_string.d->numpy.array(b'123')
A:numpy.f2py.tests.test_string.s->s.encode().encode()
A:numpy.f2py.tests.test_string.end->len(s)
A:numpy.f2py.tests.test_string.r->self.module.test_inout_bytes4(s)
A:numpy.f2py.tests.test_string.rest->self._sint(s, start=4)
numpy.f2py.tests.test_string.TestDocStringArguments(util.F2PyTest)
numpy.f2py.tests.test_string.TestDocStringArguments.test_example(self)
numpy.f2py.tests.test_string.TestFixedString(util.F2PyTest)
numpy.f2py.tests.test_string.TestFixedString._get_input(self,intent='in')
numpy.f2py.tests.test_string.TestFixedString._sint(s,start=0,end=None)
numpy.f2py.tests.test_string.TestFixedString.test_intent_in(self)
numpy.f2py.tests.test_string.TestFixedString.test_intent_inout(self)
numpy.f2py.tests.test_string.TestString(util.F2PyTest)
numpy.f2py.tests.test_string.TestString.test_char(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_size.py----------------------------------------
A:numpy.f2py.tests.test_size.r->self.module.flatten([[1, 2, 3], [4, 5, 6]])
numpy.f2py.tests.test_size.TestSizeSumExample(util.F2PyTest)
numpy.f2py.tests.test_size.TestSizeSumExample.test_all(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_flatten(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_transpose(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_abstract_interface.py----------------------------------------
A:numpy.f2py.tests.test_abstract_interface.fpath->util.getpath('tests', 'src', 'abstract_interface', 'gh18403_mod.f90')
A:numpy.f2py.tests.test_abstract_interface.mod->numpy.f2py.crackfortran.crackfortran([str(fpath)])
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface(util.F2PyTest)
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface.test_abstract_interface(self)
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface.test_parse_abstract_interface(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_return_character.py----------------------------------------
A:numpy.f2py.tests.test_return_character.r->t(array(77, 'u1'))
numpy.f2py.tests.test_return_character.TestFReturnCharacter(TestReturnCharacter)
numpy.f2py.tests.test_return_character.TestFReturnCharacter.test_all_f77(self,name)
numpy.f2py.tests.test_return_character.TestFReturnCharacter.test_all_f90(self,name)
numpy.f2py.tests.test_return_character.TestReturnCharacter(util.F2PyTest)
numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function(self,t,tname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_mixed.py----------------------------------------
A:numpy.f2py.tests.test_mixed.expected->textwrap.dedent('        a = bar11()\n\n        Wrapper for ``bar11``.\n\n        Returns\n        -------\n        a : int\n        ')
numpy.f2py.tests.test_mixed.TestMixed(util.F2PyTest)
numpy.f2py.tests.test_mixed.TestMixed.test_all(self)
numpy.f2py.tests.test_mixed.TestMixed.test_docstring(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_block_docstring.py----------------------------------------
numpy.f2py.tests.test_block_docstring.TestBlockDocString(util.F2PyTest)
numpy.f2py.tests.test_block_docstring.TestBlockDocString.test_block_docstring(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_return_integer.py----------------------------------------
numpy.f2py.tests.test_return_integer.TestFReturnInteger(TestReturnInteger)
numpy.f2py.tests.test_return_integer.TestFReturnInteger.test_all_f77(self,name)
numpy.f2py.tests.test_return_integer.TestFReturnInteger.test_all_f90(self,name)
numpy.f2py.tests.test_return_integer.TestReturnInteger(util.F2PyTest)
numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function(self,t,tname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_assumed_shape.py----------------------------------------
A:numpy.f2py.tests.test_assumed_shape.r->self.module.mod.fsum([1, 2])
A:numpy.f2py.tests.test_assumed_shape.self.sources->list(self.sources)
A:numpy.f2py.tests.test_assumed_shape.f2cmap_src->self.sources.pop(-1)
A:numpy.f2py.tests.test_assumed_shape.self.f2cmap_file->tempfile.NamedTemporaryFile(delete=False)
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample(util.F2PyTest)
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample.test_all(self)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption(TestAssumedShapeSumExample)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption.setup_method(self)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption.teardown_method(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_common.py----------------------------------------
numpy.f2py.tests.test_common.TestCommonBlock(util.F2PyTest)
numpy.f2py.tests.test_common.TestCommonBlock.test_common_block(self)
numpy.f2py.tests.test_common.TestCommonWithUse(util.F2PyTest)
numpy.f2py.tests.test_common.TestCommonWithUse.test_common_gh19161(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_semicolon_split.py----------------------------------------
numpy.f2py.tests.test_semicolon_split.TestCallstatement(util.F2PyTest)
numpy.f2py.tests.test_semicolon_split.TestCallstatement.test_callstatement(self)
numpy.f2py.tests.test_semicolon_split.TestMultiline(util.F2PyTest)
numpy.f2py.tests.test_semicolon_split.TestMultiline.test_multiline(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_character.py----------------------------------------
A:numpy.f2py.tests.test_character.clength->dict(star='(*)').get(length, length)
A:numpy.f2py.tests.test_character.fsuffix->{'(*)': 'star'}.get(length, length)
A:numpy.f2py.tests.test_character.f->getattr(self.module, self.fprefix + '_character_bc_' + state)
A:numpy.f2py.tests.test_character.a->numpy.array('hi', dtype='S32')
A:numpy.f2py.tests.test_character.expected->numpy.array('hi', dtype='S32').view(np.uint32 if dtype == 'U1' else np.uint8)
A:numpy.f2py.tests.test_character.code->textwrap.dedent(f"""\n       subroutine {fprefix}_gh18684(x, y, m)\n         character(len=5), dimension(m), intent(in) :: x\n         character*5, dimension(m), intent(out) :: y\n         integer i, m\n         !f2py integer, intent(hide), depend(x) :: m = f2py_len(x)\n         do i=1,m\n           y(i) = x(i)\n         end do\n       end subroutine {fprefix}_gh18684\n\n       subroutine {fprefix}_gh6308(x, i)\n         integer i\n         !f2py check(i>=0 && i<12) i\n         character*5 name, x\n         common name(12)\n         name(i + 1) = x\n       end subroutine {fprefix}_gh6308\n\n       subroutine {fprefix}_gh4519(x)\n         character(len=*), intent(in) :: x(:)\n         !f2py intent(out) x\n         integer :: i\n         ! Uncomment for debug printing:\n         !do i=1, size(x)\n         !   print*, "x(",i,")=", x(i)\n         !end do\n       end subroutine {fprefix}_gh4519\n\n       pure function {fprefix}_gh3425(x) result (y)\n         character(len=*), intent(in) :: x\n         character(len=len(x)) :: y\n         integer :: i\n         do i = 1, len(x)\n           j = iachar(x(i:i))\n           if (j>=iachar("a") .and. j<=iachar("z") ) then\n             y(i:i) = achar(j-32)\n           else\n             y(i:i) = x(i:i)\n           endif\n         end do\n       end function {fprefix}_gh3425\n\n       subroutine {fprefix}_character_bc_new(x, y, z)\n         character, intent(in) :: x\n         character, intent(out) :: y\n         !f2py character, depend(x) :: y = x\n         !f2py character, dimension((x=='a'?1:2)), depend(x), intent(out) :: z\n         character, dimension(*) :: z\n         !f2py character, optional, check(x == 'a' || x == 'b') :: x = 'a'\n         !f2py callstatement (*f2py_func)(&x, &y, z)\n         !f2py callprotoargument character*, character*, character*\n         if (y.eq.x) then\n           y = x\n         else\n           y = 'e'\n         endif\n         z(1) = 'c'\n       end subroutine {fprefix}_character_bc_new\n\n       subroutine {fprefix}_character_bc_old(x, y, z)\n         character, intent(in) :: x\n         character, intent(out) :: y\n         !f2py character, depend(x) :: y = x[0]\n         !f2py character, dimension((*x=='a'?1:2)), depend(x), intent(out) :: z\n         character, dimension(*) :: z\n         !f2py character, optional, check(*x == 'a' || x[0] == 'b') :: x = 'a'\n         !f2py callstatement (*f2py_func)(x, y, z)\n         !f2py callprotoargument char*, char*, char*\n          if (y.eq.x) then\n           y = x\n         else\n           y = 'e'\n         endif\n         z(1) = 'c'\n       end subroutine {fprefix}_character_bc_old\n    """)
A:numpy.f2py.tests.test_character.n->numpy.array([['A', 'B', 'C'], ['D', 'E', 'F']], dtype=dtype, order='F')
A:numpy.f2py.tests.test_character.x->numpy.array(['abcde', 'fghij'], dtype='S5')
A:numpy.f2py.tests.test_character.y->f(x)
A:numpy.f2py.tests.test_character.r->f(x)
A:numpy.f2py.tests.test_character.(c, a)->f(b'b')
A:numpy.f2py.tests.test_character.info->self.module.charint('T')
numpy.f2py.tests.test_character.TestBCCharHandling(util.F2PyTest)
numpy.f2py.tests.test_character.TestBCCharHandling.test_gh25286(self)
numpy.f2py.tests.test_character.TestCharacter(util.F2PyTest)
numpy.f2py.tests.test_character.TestCharacter.test_2d_array_inout(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_2d_array_input(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_array_inout(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_array_input(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_array_input_varia(self)
numpy.f2py.tests.test_character.TestCharacter.test_array_output(self)
numpy.f2py.tests.test_character.TestCharacter.test_array_return(self)
numpy.f2py.tests.test_character.TestCharacter.test_inout(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_inout_varia(self)
numpy.f2py.tests.test_character.TestCharacter.test_input(self,dtype)
numpy.f2py.tests.test_character.TestCharacter.test_input_output(self)
numpy.f2py.tests.test_character.TestCharacter.test_input_varia(self)
numpy.f2py.tests.test_character.TestCharacter.test_optional(self)
numpy.f2py.tests.test_character.TestCharacter.test_output(self)
numpy.f2py.tests.test_character.TestCharacter.test_return(self)
numpy.f2py.tests.test_character.TestCharacterString(util.F2PyTest)
numpy.f2py.tests.test_character.TestCharacterString.test_2d_array_input(self,length)
numpy.f2py.tests.test_character.TestCharacterString.test_array_input(self,length)
numpy.f2py.tests.test_character.TestCharacterString.test_array_output(self,length)
numpy.f2py.tests.test_character.TestCharacterString.test_input(self,length)
numpy.f2py.tests.test_character.TestCharacterString.test_output(self,length)
numpy.f2py.tests.test_character.TestMiscCharacter(util.F2PyTest)
numpy.f2py.tests.test_character.TestMiscCharacter.test_character_bc(self,state)
numpy.f2py.tests.test_character.TestMiscCharacter.test_gh18684(self)
numpy.f2py.tests.test_character.TestMiscCharacter.test_gh3425(self)
numpy.f2py.tests.test_character.TestMiscCharacter.test_gh4519(self)
numpy.f2py.tests.test_character.TestMiscCharacter.test_gh6308(self)
numpy.f2py.tests.test_character.TestNewCharHandling(util.F2PyTest)
numpy.f2py.tests.test_character.TestNewCharHandling.test_gh25286(self)
numpy.f2py.tests.test_character.TestStringAssumedLength(util.F2PyTest)
numpy.f2py.tests.test_character.TestStringAssumedLength.test_gh24008(self)
numpy.f2py.tests.test_character.TestStringOptionalInOut(util.F2PyTest)
numpy.f2py.tests.test_character.TestStringOptionalInOut.test_gh24662(self)
numpy.f2py.tests.test_character.TestStringScalarArr(util.F2PyTest)
numpy.f2py.tests.test_character.TestStringScalarArr.test_char(self)
numpy.f2py.tests.test_character.TestStringScalarArr.test_char_arr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_quoted_character.py----------------------------------------
numpy.f2py.tests.test_quoted_character.TestQuotedCharacter(util.F2PyTest)
numpy.f2py.tests.test_quoted_character.TestQuotedCharacter.test_quoted_character(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_regression.py----------------------------------------
A:numpy.f2py.tests.test_regression.x->numpy.arange(3, dtype=np.float32)
A:numpy.f2py.tests.test_regression.xvec->numpy.arange(12)
A:numpy.f2py.tests.test_regression.rval->self.module.foo(is_=xlow, ie_=xhigh, arr=xvec[:ubound(xlow, xhigh)])
A:numpy.f2py.tests.test_regression.expval->numpy.arange(11, dtype=np.float32)
A:numpy.f2py.tests.test_regression.incdir->numpy.f2py.get_include()
A:numpy.f2py.tests.test_regression.fnames_in_dir->os.listdir(incdir)
A:numpy.f2py.tests.test_regression.res->self.module.testsub(x1, x2)
A:numpy.f2py.tests.test_regression.x1->numpy.array(3, dtype=np.int32)
A:numpy.f2py.tests.test_regression.x2->numpy.array(5, dtype=np.int32)
A:numpy.f2py.tests.test_regression.aa->util.build_module([util.getpath('tests', 'src', 'regression', 'f77fixedform.f95')], options=["--f77flags='-ffixed-form -O2'", '--f90flags="-ffixed-form -Og"'], module_name='Blah')
numpy.f2py.tests.test_regression.TestF77Comments(util.F2PyTest)
numpy.f2py.tests.test_regression.TestF77Comments.test_gh26148(self)
numpy.f2py.tests.test_regression.TestF77Comments.test_gh26466(self)
numpy.f2py.tests.test_regression.TestF90Contiuation(util.F2PyTest)
numpy.f2py.tests.test_regression.TestF90Contiuation.test_gh26148b(self)
numpy.f2py.tests.test_regression.TestIncludeFiles(util.F2PyTest)
numpy.f2py.tests.test_regression.TestIncludeFiles.test_gh25344(self)
numpy.f2py.tests.test_regression.TestIntentInOut(util.F2PyTest)
numpy.f2py.tests.test_regression.TestIntentInOut.test_inout(self)
numpy.f2py.tests.test_regression.TestNegativeBounds(util.F2PyTest)
numpy.f2py.tests.test_regression.TestNegativeBounds.test_negbound(self)
numpy.f2py.tests.test_regression.TestNumpyVersionAttribute(util.F2PyTest)
numpy.f2py.tests.test_regression.TestNumpyVersionAttribute.test_numpy_version_attribute(self)
numpy.f2py.tests.test_regression.test_gh25784()
numpy.f2py.tests.test_regression.test_gh26623()
numpy.f2py.tests.test_regression.test_include_path()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_isoc.py----------------------------------------
A:numpy.f2py.tests.test_isoc.out->self.module.coddity.add_arr(a, b)
A:numpy.f2py.tests.test_isoc.a->numpy.array([1, 2, 3])
A:numpy.f2py.tests.test_isoc.b->numpy.array([1, 2, 3])
A:numpy.f2py.tests.test_isoc.(res_map, res_maptyp)->process_f2cmap_dict(f2cmap_all, new_map, c2py_map)
numpy.f2py.tests.test_isoc.TestISOC(util.F2PyTest)
numpy.f2py.tests.test_isoc.TestISOC.test_bindc_add_arr(self)
numpy.f2py.tests.test_isoc.TestISOC.test_bindc_function(self)
numpy.f2py.tests.test_isoc.TestISOC.test_bindc_kinds(self)
numpy.f2py.tests.test_isoc.TestISOC.test_c_double(self)
numpy.f2py.tests.test_isoc.test_process_f2cmap_dict()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/util.py----------------------------------------
A:numpy.f2py.tests.util._module_list->list(NUMPY_INSTALL_ROOT.glob('**/*.dll'))
A:numpy.f2py.tests.util._module_dir->tempfile.mkdtemp()
A:numpy.f2py.tests.util.key->repr((a, kw))
A:numpy.f2py.tests.util.memo[key]->func(*a, **kw)
A:numpy.f2py.tests.util.d->Path(numpy.f2py.__file__).parent.resolve()
A:numpy.f2py.tests.util.dst->os.path.join(d, os.path.basename(fn))
A:numpy.f2py.tests.util.(base, ext)->os.path.splitext(dst)
A:numpy.f2py.tests.util.module_name->get_temp_module_name()
A:numpy.f2py.tests.util.cwd->os.getcwd()
A:numpy.f2py.tests.util.p->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:numpy.f2py.tests.util.(out, err)->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
A:numpy.f2py.tests.util.tmpdir->tempfile.mkdtemp()
A:numpy.f2py.tests.util.meson_file->os.path.join(tmpdir, 'meson.build')
A:numpy.f2py.tests.util.runmeson->subprocess.run(['meson', 'setup', 'btmp'], check=False, cwd=tmpdir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:numpy.f2py.tests.util.self.has_c->futures[0].result()
A:numpy.f2py.tests.util.self.has_f77->futures[1].result()
A:numpy.f2py.tests.util.self.has_f90->futures[2].result()
A:numpy.f2py.tests.util.checker->CompilerChecker()
A:numpy.f2py.tests.util.build_dir->get_module_dir()
A:numpy.f2py.tests.util.backend->SimplifiedMesonBackend(modulename=module_name, sources=source_files, extra_objects=kwargs.get('extra_objects', []), build_dir=build_dir, include_dirs=kwargs.get('include_dirs', []), library_dirs=kwargs.get('library_dirs', []), libraries=kwargs.get('libraries', []), define_macros=kwargs.get('define_macros', []), undef_macros=kwargs.get('undef_macros', []), f2py_flags=kwargs.get('f2py_flags', []), sysinfo_flags=kwargs.get('sysinfo_flags', []), fc_flags=kwargs.get('fc_flags', []), flib_flags=kwargs.get('flib_flags', []), setup_flags=kwargs.get('setup_flags', []), remove_build_dir=kwargs.get('remove_build_dir', False), extra_dat=kwargs.get('extra_dat', {}))
A:numpy.f2py.tests.util.cls->type(self)
A:numpy.f2py.tests.util.F2PyTest._has_c_compiler->has_c_compiler()
A:numpy.f2py.tests.util.F2PyTest._has_f77_compiler->has_f77_compiler()
A:numpy.f2py.tests.util.F2PyTest._has_f90_compiler->has_f90_compiler()
A:numpy.f2py.tests.util.needs_f77->any((str(fn).endswith('.f') for fn in codes))
A:numpy.f2py.tests.util.needs_f90->any((str(fn).endswith('.f90') for fn in codes))
A:numpy.f2py.tests.util.needs_pyf->any((str(fn).endswith('.pyf') for fn in codes))
A:numpy.f2py.tests.util.self.module->build_module(self.sources, options=self.options, skip=self.skip, only=self.only, module_name=self.module_name)
A:numpy.f2py.tests.util.curpath->pathlib.Path.cwd()
numpy.f2py.tests.util.CompilerChecker(self)
numpy.f2py.tests.util.CompilerChecker.__init__(self)
numpy.f2py.tests.util.CompilerChecker.check_compilers(self)
numpy.f2py.tests.util.F2PyTest
numpy.f2py.tests.util.F2PyTest.module_name(self)
numpy.f2py.tests.util.F2PyTest.setup_class(cls)
numpy.f2py.tests.util.F2PyTest.setup_method(self)
numpy.f2py.tests.util.SimplifiedMesonBackend(self,*args,**kwargs)
numpy.f2py.tests.util.SimplifiedMesonBackend.__init__(self,*args,**kwargs)
numpy.f2py.tests.util.SimplifiedMesonBackend.compile(self)
numpy.f2py.tests.util._cleanup()
numpy.f2py.tests.util._memoize(func)
numpy.f2py.tests.util.build_code(source_code,options=[],skip=[],only=[],suffix=None,module_name=None)
numpy.f2py.tests.util.build_meson(source_files,module_name=None,**kwargs)
numpy.f2py.tests.util.build_module(source_files,options=[],skip=[],only=[],module_name=None)
numpy.f2py.tests.util.check_language(lang,code_snippet=None)
numpy.f2py.tests.util.get_module_dir()
numpy.f2py.tests.util.get_temp_module_name()
numpy.f2py.tests.util.getpath(*a)
numpy.f2py.tests.util.has_c_compiler()
numpy.f2py.tests.util.has_f77_compiler()
numpy.f2py.tests.util.has_f90_compiler()
numpy.f2py.tests.util.switchdir(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_return_real.py----------------------------------------
A:numpy.f2py.tests.test_return_real.r->t(10 ** 400)
numpy.f2py.tests.test_return_real.TestCReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestCReturnReal.test_all(self,name)
numpy.f2py.tests.test_return_real.TestFReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestFReturnReal.test_all_f77(self,name)
numpy.f2py.tests.test_return_real.TestFReturnReal.test_all_f90(self,name)
numpy.f2py.tests.test_return_real.TestReturnReal(util.F2PyTest)
numpy.f2py.tests.test_return_real.TestReturnReal.check_function(self,t,tname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_data.py----------------------------------------
A:numpy.f2py.tests.test_data.mod->crackfortran(str(self.sources[0]))
numpy.f2py.tests.test_data.TestData(util.F2PyTest)
numpy.f2py.tests.test_data.TestData.test_crackedlines(self)
numpy.f2py.tests.test_data.TestData.test_data_stmts(self)
numpy.f2py.tests.test_data.TestDataF77(util.F2PyTest)
numpy.f2py.tests.test_data.TestDataF77.test_crackedlines(self)
numpy.f2py.tests.test_data.TestDataF77.test_data_stmts(self)
numpy.f2py.tests.test_data.TestDataMultiplierF77(util.F2PyTest)
numpy.f2py.tests.test_data.TestDataMultiplierF77.test_data_stmts(self)
numpy.f2py.tests.test_data.TestDataWithCommentsF77(util.F2PyTest)
numpy.f2py.tests.test_data.TestDataWithCommentsF77.test_data_stmts(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_crackfortran.py----------------------------------------
A:numpy.f2py.tests.test_crackfortran.k->numpy.array([1, 2, 3], dtype=np.float64)
A:numpy.f2py.tests.test_crackfortran.w->numpy.array([1, 2, 3], dtype=np.float64)
A:numpy.f2py.tests.test_crackfortran.fpath->util.getpath('tests', 'src', 'crackfortran', 'gh22648.pyf')
A:numpy.f2py.tests.test_crackfortran.mod->numpy.f2py.crackfortran.crackfortran([str(fpath)])
A:numpy.f2py.tests.test_crackfortran.pyf->numpy.f2py.crackfortran.crack2fortran(mod)
A:numpy.f2py.tests.test_crackfortran.r->self.module.gh2848(1, 2)
A:numpy.f2py.tests.test_crackfortran.code_template->textwrap.dedent('\n      function get_arr_size_{count}(a, n) result (length)\n        integer, intent(in) :: n\n        integer, dimension({dimspec}), intent(out) :: a\n        integer length\n        length = size(a)\n      end function\n\n      subroutine get_inv_arr_size_{count}(a, n)\n        integer :: n\n        ! the value of n is computed in f2py wrapper\n        !f2py intent(out) n\n        integer, dimension({dimspec}), intent(in) :: a\n        if (a({first}).gt.0) then\n          ! print*, "a=", a\n        endif\n      end subroutine\n    ')
A:numpy.f2py.tests.test_crackfortran.count->self.all_dimspecs.index(dimspec)
A:numpy.f2py.tests.test_crackfortran.get_arr_size->getattr(self.module, f'get_arr_size_{count}')
A:numpy.f2py.tests.test_crackfortran.(sz, a)->get_arr_size(n)
A:numpy.f2py.tests.test_crackfortran.get_inv_arr_size->getattr(self.module, f'get_inv_arr_size_{count}')
A:numpy.f2py.tests.test_crackfortran.n1->get_inv_arr_size(a)
A:numpy.f2py.tests.test_crackfortran.(sz1, _)->get_arr_size(n1)
A:numpy.f2py.tests.test_crackfortran.t0->time.perf_counter()
A:numpy.f2py.tests.test_crackfortran.mtch->numpy.f2py.crackfortran.nameargspattern.search(repeated_adversary)
A:numpy.f2py.tests.test_crackfortran.g_params->dict(kind=crackfortran._kind_func, selected_int_kind=crackfortran._selected_int_kind_func, selected_real_kind=crackfortran._selected_real_kind_func)
A:numpy.f2py.tests.test_crackfortran.ret->numpy.f2py.crackfortran.param_eval(v, g_params, params, dimspec=None)
numpy.f2py.tests.test_crackfortran.TestCrackFortran(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestCrackFortran.test_gh2848(self)
numpy.f2py.tests.test_crackfortran.TestDimSpec(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestDimSpec.test_array_size(self,dimspec)
numpy.f2py.tests.test_crackfortran.TestDimSpec.test_inv_array_size(self,dimspec)
numpy.f2py.tests.test_crackfortran.TestEval(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestEval.test_eval_scalar(self)
numpy.f2py.tests.test_crackfortran.TestExternal(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestExternal.test_external_as_attribute(self)
numpy.f2py.tests.test_crackfortran.TestExternal.test_external_as_statement(self)
numpy.f2py.tests.test_crackfortran.TestF77CommonBlockReader
numpy.f2py.tests.test_crackfortran.TestF77CommonBlockReader.test_gh22648(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestFortranGroupCounters(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestFortranGroupCounters.test_end_if_comment(self)
numpy.f2py.tests.test_crackfortran.TestFortranReader(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestFortranReader.test_input_encoding(self,tmp_path,encoding)
numpy.f2py.tests.test_crackfortran.TestFunctionReturn(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestFunctionReturn.test_function_rettype(self)
numpy.f2py.tests.test_crackfortran.TestMarkinnerspaces
numpy.f2py.tests.test_crackfortran.TestMarkinnerspaces.test_do_not_touch_normal_spaces(self)
numpy.f2py.tests.test_crackfortran.TestMarkinnerspaces.test_ignore_inner_quotes(self)
numpy.f2py.tests.test_crackfortran.TestMarkinnerspaces.test_multiple_relevant_spaces(self)
numpy.f2py.tests.test_crackfortran.TestMarkinnerspaces.test_one_relevant_space(self)
numpy.f2py.tests.test_crackfortran.TestModuleDeclaration
numpy.f2py.tests.test_crackfortran.TestModuleDeclaration.test_dependencies(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestModuleProcedure
numpy.f2py.tests.test_crackfortran.TestModuleProcedure.test_moduleOperators(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestModuleProcedure.test_notPublicPrivate(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestNameArgsPatternBacktracking
numpy.f2py.tests.test_crackfortran.TestNameArgsPatternBacktracking.test_nameargspattern_backtracking(self,adversary)
numpy.f2py.tests.test_crackfortran.TestNoSpace(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestNoSpace.test_module(self)
numpy.f2py.tests.test_crackfortran.TestParamEval
numpy.f2py.tests.test_crackfortran.TestParamEval.test_param_eval_empty_range(self)
numpy.f2py.tests.test_crackfortran.TestParamEval.test_param_eval_nested(self)
numpy.f2py.tests.test_crackfortran.TestParamEval.test_param_eval_non_array_param(self)
numpy.f2py.tests.test_crackfortran.TestParamEval.test_param_eval_nonstandard_range(self)
numpy.f2py.tests.test_crackfortran.TestParamEval.test_param_eval_too_many_dims(self)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_access_type(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_defaultPrivate(self)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_defaultPublic(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_nowrap_private_proceedures(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestUnicodeComment(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestUnicodeComment.test_encoding_comment(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/f2py/tests/test_callback.py----------------------------------------
A:numpy.f2py.tests.test_callback.expected->textwrap.dedent('        a = t(fun,[fun_extra_args])\n\n        Wrapper for ``t``.\n\n        Parameters\n        ----------\n        fun : call-back function\n\n        Other Parameters\n        ----------------\n        fun_extra_args : input tuple, optional\n            Default: ()\n\n        Returns\n        -------\n        a : int\n\n        Notes\n        -----\n        Call-back functions::\n\n            def fun(): return a\n            Return objects:\n                a : int\n        ')
A:numpy.f2py.tests.test_callback.t->getattr(self.module, name)
A:numpy.f2py.tests.test_callback.r->self.module.gh18335(foo)
A:numpy.f2py.tests.test_callback.a->A()
A:numpy.f2py.tests.test_callback.f->getattr(self.module, 'string_callback_array')
A:numpy.f2py.tests.test_callback.cu1->numpy.zeros((1,), 'S8')
A:numpy.f2py.tests.test_callback.cu2->numpy.zeros((1, 8), 'c')
A:numpy.f2py.tests.test_callback.cu3->numpy.array([''], 'S8')
A:numpy.f2py.tests.test_callback.res->self.module.foo(bar)
A:numpy.f2py.tests.test_callback.errors->'\n\n'.join(errors)
A:numpy.f2py.tests.test_callback.y->numpy.array([1, 2, 3], dtype=np.int64)
numpy.f2py.tests.test_callback.TestF77Callback(util.F2PyTest)
numpy.f2py.tests.test_callback.TestF77Callback.check_function(self,name)
numpy.f2py.tests.test_callback.TestF77Callback.test_all(self,name)
numpy.f2py.tests.test_callback.TestF77Callback.test_docstring(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_hidden_callback(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_threadsafety(self)
numpy.f2py.tests.test_callback.TestF77CallbackPythonTLS(TestF77Callback)
numpy.f2py.tests.test_callback.TestF90Callback(util.F2PyTest)
numpy.f2py.tests.test_callback.TestF90Callback.test_gh17797(self)
numpy.f2py.tests.test_callback.TestGH18335(util.F2PyTest)
numpy.f2py.tests.test_callback.TestGH18335.test_gh18335(self)
numpy.f2py.tests.test_callback.TestGH25211(util.F2PyTest)
numpy.f2py.tests.test_callback.TestGH25211.test_gh25211(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/char/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/char/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/__init__.py----------------------------------------
A:numpy.testing.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/print_coercion_tables.py----------------------------------------
A:numpy.testing.print_coercion_tables.dtype->numpy.dtype(x.type)
A:numpy.testing.print_coercion_tables.rowtype->obj2sctype(row)
A:numpy.testing.print_coercion_tables.coltype->obj2sctype(col)
A:numpy.testing.print_coercion_tables.rowvalue->rowtype(inputfirstvalue)
A:numpy.testing.print_coercion_tables.colvalue->coltype(inputsecondvalue)
A:numpy.testing.print_coercion_tables.value->numpy.add(rowvalue, colvalue)
A:numpy.testing.print_coercion_tables.cast_info->namedtuple('cast_info', ['can_cast', 'legacy', 'flags'])
A:numpy.testing.print_coercion_tables.no_cast_info->cast_info(' ', ' ', ' ')
A:numpy.testing.print_coercion_tables.casts->get_all_cast_information()
A:numpy.testing.print_coercion_tables.dtypes->sorted(dtypes, key=sorter)
A:numpy.testing.print_coercion_tables.to_dict[cast['to']]->cast_info(can_cast=can_cast, legacy=legacy, flags=flags)
A:numpy.testing.print_coercion_tables.indx->types.index(dtype.char)
A:numpy.testing.print_coercion_tables.row->table.get(from_dt, {})
numpy.testing.print_coercion_tables.GenericObject(self,v)
numpy.testing.print_coercion_tables.GenericObject.__add__(self,other)
numpy.testing.print_coercion_tables.GenericObject.__init__(self,v)
numpy.testing.print_coercion_tables.GenericObject.__radd__(self,other)
numpy.testing.print_coercion_tables.print_cancast_table(ntypes)
numpy.testing.print_coercion_tables.print_coercion_table(ntypes,inputfirstvalue,inputsecondvalue,firstarray,use_promote_types=False)
numpy.testing.print_coercion_tables.print_new_cast_table(*,can_cast=True,legacy=False,flags=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/overrides.py----------------------------------------
numpy.testing.overrides.allows_array_function_override(func)
numpy.testing.overrides.allows_array_ufunc_override(func)
numpy.testing.overrides.get_overridable_numpy_array_functions()
numpy.testing.overrides.get_overridable_numpy_ufuncs()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/tests/test_utils.py----------------------------------------
A:numpy.testing.tests.test_utils.a->numpy.array([[1, 2, 3, 'NaT']], dtype='m8[ns]')
A:numpy.testing.tests.test_utils.b->numpy.array([0, 2])
A:numpy.testing.tests.test_utils.c->numpy.array([x, y, x, z])
A:numpy.testing.tests.test_utils.x->numpy.ones(10).astype(np.float64)
A:numpy.testing.tests.test_utils.y->numpy.ones(())
A:numpy.testing.tests.test_utils.msg->str(exc_info.value)
A:numpy.testing.tests.test_utils.c['floupipi']->a['floupi'].copy()
A:numpy.testing.tests.test_utils.c['floupa']->a['floupa'].copy()
A:numpy.testing.tests.test_utils.nadt_no_unit->numpy.datetime64('NaT')
A:numpy.testing.tests.test_utils.nadt_s->numpy.datetime64('NaT', 's')
A:numpy.testing.tests.test_utils.nadt_d->numpy.datetime64('NaT', 'ns')
A:numpy.testing.tests.test_utils.natd_no_unit->numpy.timedelta64('NaT')
A:numpy.testing.tests.test_utils.natd_s->numpy.timedelta64('NaT', 's')
A:numpy.testing.tests.test_utils.natd_d->numpy.timedelta64('NaT', 'ns')
A:numpy.testing.tests.test_utils.anan->numpy.array(np.nan)
A:numpy.testing.tests.test_utils.aone->numpy.array(1)
A:numpy.testing.tests.test_utils.ainf->numpy.array(np.inf)
A:numpy.testing.tests.test_utils.z->numpy.array([complex(1, 2), complex(np.nan, 1)])
A:numpy.testing.tests.test_utils.offset->numpy.uint16(255)
A:numpy.testing.tests.test_utils.nan1_i64->numpy.array(np.nan, dtype=np.float64).view(np.uint64)
A:numpy.testing.tests.test_utils.nan1_f64->numpy.array(np.nan, dtype=np.float64).view(np.uint64).view(np.float64)
A:numpy.testing.tests.test_utils.nan2_f64->nan2_i64.view(np.float64)
A:numpy.testing.tests.test_utils.nan1_i32->numpy.array(np.nan, dtype=np.float32).view(np.uint32)
A:numpy.testing.tests.test_utils.nan1_f32->numpy.array(np.nan, dtype=np.float32).view(np.uint32).view(np.float32)
A:numpy.testing.tests.test_utils.nan2_f32->nan2_i32.view(np.float32)
A:numpy.testing.tests.test_utils.nan1_i16->numpy.array(np.nan, dtype=np.float16).view(np.uint16)
A:numpy.testing.tests.test_utils.nan1_f16->numpy.array(np.nan, dtype=np.float16).view(np.uint16).view(np.float16)
A:numpy.testing.tests.test_utils.nan2_f16->nan2_i16.view(np.float16)
A:numpy.testing.tests.test_utils.inf->numpy.array([np.inf]).astype(dt)
A:numpy.testing.tests.test_utils.big->numpy.array([np.finfo(dt).max])
A:numpy.testing.tests.test_utils.nan->numpy.array([np.nan]).astype(dt)
A:numpy.testing.tests.test_utils.tiny->numpy.array([np.finfo(dt).tiny])
A:numpy.testing.tests.test_utils.zero->numpy.array([0.0]).astype(dt)
A:numpy.testing.tests.test_utils.nzero->numpy.array([-0.0]).astype(dt)
A:numpy.testing.tests.test_utils.num_warns->len(mod_warns)
A:numpy.testing.tests.test_utils.mod_inst->mod()
A:numpy.testing.tests.test_utils.my_mod->_get_fresh_mod()
A:numpy.testing.tests.test_utils.sup->suppress_warnings()
A:numpy.testing.tests.test_utils.log1->suppress_warnings().record()
A:numpy.testing.tests.test_utils.log2->suppress_warnings().record(message='Some other warning 2')
A:numpy.testing.tests.test_utils.fpath->os.path.join(tdir, 'tmp')
A:numpy.testing.tests.test_utils.w->weakref.ref(ReferenceCycleInDel())
numpy.testing.tests.test_utils.TestAlmostEqual(_GenericTest)
numpy.testing.tests.test_utils.TestAlmostEqual.setup_method(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_closeness(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message_2(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_inf_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_nan_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_simple_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool(self)
numpy.testing.tests.test_utils.TestApproxEqual
numpy.testing.tests.test_utils.TestApproxEqual.setup_method(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_0d_arrays(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_items(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual(_GenericTest)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.setup_method(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_array_vs_scalar(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_closeness(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_inf(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_simple(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_2(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_pass(self)
numpy.testing.tests.test_utils.TestArrayAssertLess
numpy.testing.tests.test_utils.TestArrayAssertLess.setup_method(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare_array(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare_array(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank2(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank3(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_arrays(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_items(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_items_and_array(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_strict(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_zeroes(self)
numpy.testing.tests.test_utils.TestArrayEqual(_GenericTest)
numpy.testing.tests.test_utils.TestArrayEqual.setup_method(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_0_ndim_array(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_array_vs_array_not_equal(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_array_vs_array_strict(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_array_vs_float_array_strict(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_array_vs_scalar_is_equal(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_array_vs_scalar_strict(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_masked_nan_inf(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_recarrays(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_string_arrays(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_does_not_implement_npall(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_suppress_overflow_warnings(self)
numpy.testing.tests.test_utils.TestAssertAllclose
numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan_default(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_error_message_unsigned(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_min_int(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_not_equal_nan(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_report_fail_percentage(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_report_max_relative_error(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_simple(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_strict(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_timedelta(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_names(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_precision(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_defaults(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_no_verbose(self)
numpy.testing.tests.test_utils.TestEqual(TestArrayEqual)
numpy.testing.tests.test_utils.TestEqual.setup_method(self)
numpy.testing.tests.test_utils.TestEqual.test_complex(self)
numpy.testing.tests.test_utils.TestEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestEqual.test_datetime(self)
numpy.testing.tests.test_utils.TestEqual.test_inf_items(self)
numpy.testing.tests.test_utils.TestEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestEqual.test_nat_items(self)
numpy.testing.tests.test_utils.TestEqual.test_negative_zero(self)
numpy.testing.tests.test_utils.TestEqual.test_non_numeric(self)
numpy.testing.tests.test_utils.TestEqual.test_object(self)
numpy.testing.tests.test_utils.TestStringEqual
numpy.testing.tests.test_utils.TestStringEqual.test_regex(self)
numpy.testing.tests.test_utils.TestStringEqual.test_simple(self)
numpy.testing.tests.test_utils.TestULP
numpy.testing.tests.test_utils.TestULP.test_double(self)
numpy.testing.tests.test_utils.TestULP.test_equal(self)
numpy.testing.tests.test_utils.TestULP.test_inf(self)
numpy.testing.tests.test_utils.TestULP.test_nan(self)
numpy.testing.tests.test_utils.TestULP.test_single(self)
numpy.testing.tests.test_utils.TestWarns
numpy.testing.tests.test_utils.TestWarns.test_args(self)
numpy.testing.tests.test_utils.TestWarns.test_context_manager(self)
numpy.testing.tests.test_utils.TestWarns.test_warn(self)
numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning(self)
numpy.testing.tests.test_utils._GenericTest
numpy.testing.tests.test_utils._GenericTest._test_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest._test_not_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest.test_array_diffshape(self)
numpy.testing.tests.test_utils._GenericTest.test_array_likes(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_noteq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank2_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_objarray(self)
numpy.testing.tests.test_utils._get_fresh_mod()
numpy.testing.tests.test_utils.assert_warn_len_equal(mod,n_in_context)
numpy.testing.tests.test_utils.my_cacw(clear_and_catch_warnings)
numpy.testing.tests.test_utils.test_clear_and_catch_warnings()
numpy.testing.tests.test_utils.test_clear_and_catch_warnings_inherit()
numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record()
numpy.testing.tests.test_utils.test_suppress_warnings_forwarding()
numpy.testing.tests.test_utils.test_suppress_warnings_module()
numpy.testing.tests.test_utils.test_suppress_warnings_record()
numpy.testing.tests.test_utils.test_suppress_warnings_type()
numpy.testing.tests.test_utils.test_tempdir()
numpy.testing.tests.test_utils.test_temppath()
numpy.testing.tests.test_utils.test_warn_len_equal_call_scenarios()
numpy.testing.tests.test_utils.test_xy_rename(assert_func)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/_private/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/_private/extbuild.py----------------------------------------
A:numpy.testing._private.extbuild.build_dir->pathlib.Path('.')
A:numpy.testing._private.extbuild.source_string->_make_source(modname, init, body)
A:numpy.testing._private.extbuild.mod_so->compile_extension_module(modname, build_dir, include_dirs, source_string)
A:numpy.testing._private.extbuild.spec->importlib.util.spec_from_file_location(modname, mod_so)
A:numpy.testing._private.extbuild.foo->importlib.util.module_from_spec(spec)
A:numpy.testing._private.extbuild.cfile->_convert_str_to_file(source_string, dirname)
A:numpy.testing._private.extbuild.func_code->'\n        static PyObject* {cfuncname}{signature}\n        {{\n        {code}\n        }}\n        '.format(cfuncname=cfuncname, signature=signature, code=code)
A:numpy.testing._private.extbuild.outputfilename->outputfilename.with_suffix(get_so_suffix()).with_suffix(get_so_suffix())
A:numpy.testing._private.extbuild.ret->sysconfig.get_config_var('EXT_SUFFIX')
numpy.testing._private.extbuild._c_compile(cfile,outputfilename,include_dirs=[],libraries=[],library_dirs=[])
numpy.testing._private.extbuild._convert_str_to_file(source,dirname)
numpy.testing._private.extbuild._make_methods(functions,modname)
numpy.testing._private.extbuild._make_source(name,init,body)
numpy.testing._private.extbuild.build(cfile,outputfilename,compile_extra,link_extra,include_dirs,libraries,library_dirs)
numpy.testing._private.extbuild.build_and_import_extension(modname,functions,*,prologue='',build_dir=None,include_dirs=[],more_init='')
numpy.testing._private.extbuild.compile_extension_module(name,builddir,include_dirs,source_string,libraries=[],library_dirs=[])
numpy.testing._private.extbuild.get_so_suffix()
numpy.testing.extbuild._c_compile(cfile,outputfilename,include_dirs=[],libraries=[],library_dirs=[])
numpy.testing.extbuild._convert_str_to_file(source,dirname)
numpy.testing.extbuild._make_methods(functions,modname)
numpy.testing.extbuild._make_source(name,init,body)
numpy.testing.extbuild.build(cfile,outputfilename,compile_extra,link_extra,include_dirs,libraries,library_dirs)
numpy.testing.extbuild.build_and_import_extension(modname,functions,*,prologue='',build_dir=None,include_dirs=[],more_init='')
numpy.testing.extbuild.compile_extension_module(name,builddir,include_dirs,source_string,libraries=[],library_dirs=[])
numpy.testing.extbuild.get_so_suffix()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/_private/utils.py----------------------------------------
A:numpy.testing._private.utils.IS_PYSTON->hasattr(sys, 'pyston_version_info')
A:numpy.testing._private.utils.smsg->msg()
A:numpy.testing._private.utils.path->win32pdh.MakeCounterPath((machine, object, instance, None, inum, counter))
A:numpy.testing._private.utils.hq->win32pdh.OpenQuery()
A:numpy.testing._private.utils.hc->win32pdh.AddCounter(hq, path)
A:numpy.testing._private.utils.(type, val)->win32pdh.GetFormattedCounterValue(hc, format)
A:numpy.testing._private.utils.l->sup.record(warning_class)
A:numpy.testing._private.utils.err_msg->str(err_msg)
A:numpy.testing._private.utils.r_func->partial(array_repr, precision=precision)
A:numpy.testing._private.utils.r->'\n'.join(r.splitlines()[:3])
A:numpy.testing._private.utils.msg->check_free_memory(free_bytes)
A:numpy.testing._private.utils.actualr->real(actual)
A:numpy.testing._private.utils.actuali->imag(actual)
A:numpy.testing._private.utils.desiredr->real(desired)
A:numpy.testing._private.utils.desiredi->imag(desired)
A:numpy.testing._private.utils.isdesnat->isnat(desired)
A:numpy.testing._private.utils.isactnat->isnat(actual)
A:numpy.testing._private.utils.isdesnan->isnan(desired)
A:numpy.testing._private.utils.isactnan->isnan(actual)
A:numpy.testing._private.utils.array_actual->numpy.asarray(actual)
A:numpy.testing._private.utils.array_desired->numpy.asarray(desired)
A:numpy.testing._private.utils.(actual, desired)->map(float, (actual, desired))
A:numpy.testing._private.utils.scale->numpy.power(10, np.floor(np.log10(scale)))
A:numpy.testing._private.utils.x->numpy.array([x], dtype=t)
A:numpy.testing._private.utils.y->numpy.array([y], dtype=t)
A:numpy.testing._private.utils.x_id->func(x)
A:numpy.testing._private.utils.y_id->func(y)
A:numpy.testing._private.utils.flagged->func_assert_same_pos(x, y, func=isnan, hasval=x.dtype.na_object)
A:numpy.testing._private.utils.val->comparison(x, y)
A:numpy.testing._private.utils.invalids->numpy.logical_not(val)
A:numpy.testing._private.utils.reduced->comparison(x, y).ravel()
A:numpy.testing._private.utils.cond->comparison(x, y).ravel().all()
A:numpy.testing._private.utils.error->abs(x - y)
A:numpy.testing._private.utils.error2->abs(y - x)
A:numpy.testing._private.utils.max_abs_error->max(reduced_error)
A:numpy.testing._private.utils.nonzero->numpy.bool(y != 0)
A:numpy.testing._private.utils.nonzero_and_invalid->numpy.logical_and(invalids, nonzero)
A:numpy.testing._private.utils.max_rel_error->max(nonzero_invalid_error / abs(nonzero_invalid_y))
A:numpy.testing._private.utils.broadcasted_y->numpy.broadcast_to(y, error.shape)
A:numpy.testing._private.utils.efmt->traceback.format_exc()
A:numpy.testing._private.utils.xinfid->isinf(x)
A:numpy.testing._private.utils.yinfid->isinf(y)
A:numpy.testing._private.utils.dtype->result_type(y, 1.0)
A:numpy.testing._private.utils.z->z.astype(np.float64).astype(np.float64)
A:numpy.testing._private.utils.diff->numpy.asarray(rx - ry, dtype=vdt)
A:numpy.testing._private.utils.d1->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.d2->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.d3->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.f->sys._getframe(1)
A:numpy.testing._private.utils.m->re.compile('^\\s*(\\d+|\\d+\\.\\d+)\\s*({0})\\s*$'.format('|'.join(suffixes.keys())), re.I).match(size_str.lower())
A:numpy.testing._private.utils.tests->doctest.DocTestFinder().find(m)
A:numpy.testing._private.utils.runner->doctest.DocTestRunner(verbose=False)
A:numpy.testing._private.utils.output->subprocess.run(cmd, capture_output=True, text=True)
A:numpy.testing._private.utils._SUPPORTS_SVE->check_support_sve()
A:numpy.testing._private.utils._d->_Dummy('nop')
A:numpy.testing._private.utils.testmatch->re.compile(testmatch)
A:numpy.testing._private.utils.frame->sys._getframe(1)
A:numpy.testing._private.utils.code->compile(code_str, f'Test name: {label} ', 'exec')
A:numpy.testing._private.utils.elapsed->jiffies()
A:numpy.testing._private.utils.b->numpy.arange(100 * 100).reshape(100, 100)
A:numpy.testing._private.utils.rc->sys.getrefcount(i)
A:numpy.testing._private.utils.d->inp2()
A:numpy.testing._private.utils.ax->numpy.abs(x)
A:numpy.testing._private.utils.ay->numpy.abs(y)
A:numpy.testing._private.utils.max_nulp->numpy.max(nulp_diff(x, y))
A:numpy.testing._private.utils.ret->nulp_diff(a, b, dtype)
A:numpy.testing._private.utils.t->numpy.common_type(x, y)
A:numpy.testing._private.utils.rx->numpy.array([x], dtype=t).view(vdt)
A:numpy.testing._private.utils.ry->integer_repr(y)
A:numpy.testing._private.utils.tmpdir->mkdtemp(*args, **kwargs)
A:numpy.testing._private.utils.(fd, path)->mkstemp(*args, **kwargs)
A:numpy.testing._private.utils.self.modules->set(modules).union(self.class_modules)
A:numpy.testing._private.utils.self._warnreg_copies[mod]->mod_reg.copy()
A:numpy.testing._private.utils.self._tmp_modules->set()
A:numpy.testing._private.utils.self._forwarded->set()
A:numpy.testing._private.utils.gc_debug->gc.get_debug()
A:numpy.testing._private.utils.n_objects_in_cycles->gc.collect()
A:numpy.testing._private.utils.env_value->os.environ.get(env_var)
A:numpy.testing._private.utils.mem_free->_get_mem_available()
A:numpy.testing._private.utils.size_re->re.compile('^\\s*(\\d+|\\d+\\.\\d+)\\s*({0})\\s*$'.format('|'.join(suffixes.keys())), re.I)
A:numpy.testing._private.utils.p->line.split()
A:numpy.testing._private.utils.original_trace->sys.gettrace()
A:numpy.testing._private.utils._glibcver->_get_glibc_version()
numpy.testing.IgnoreException(Exception)
numpy.testing.KnownFailureException(Exception)
numpy.testing._Dummy(unittest.TestCase)
numpy.testing._Dummy.nop(self)
numpy.testing._assert_no_gc_cycles_context(name=None)
numpy.testing._assert_no_warnings_context(name=None)
numpy.testing._assert_valid_refcount(op)
numpy.testing._assert_warns_context(warning_class,name=None)
numpy.testing._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing._get_glibc_version()
numpy.testing._get_mem_available()
numpy.testing._integer_repr(x,vdt,comp)
numpy.testing._no_tracing(func)
numpy.testing._parse_size(size_str)
numpy.testing._private.utils.IgnoreException(Exception)
numpy.testing._private.utils.KnownFailureException(Exception)
numpy.testing._private.utils._Dummy(unittest.TestCase)
numpy.testing._private.utils._Dummy.nop(self)
numpy.testing._private.utils._assert_no_gc_cycles_context(name=None)
numpy.testing._private.utils._assert_no_warnings_context(name=None)
numpy.testing._private.utils._assert_valid_refcount(op)
numpy.testing._private.utils._assert_warns_context(warning_class,name=None)
numpy.testing._private.utils._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing._private.utils._get_glibc_version()
numpy.testing._private.utils._get_mem_available()
numpy.testing._private.utils._integer_repr(x,vdt,comp)
numpy.testing._private.utils._no_tracing(func)
numpy.testing._private.utils._parse_size(size_str)
numpy.testing._private.utils.assert_(val,msg='')
numpy.testing._private.utils.assert_allclose(actual,desired,rtol=1e-07,atol=0,equal_nan=True,err_msg='',verbose=True,*,strict=False)
numpy.testing._private.utils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing._private.utils.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_almost_equal(actual,desired,decimal=6,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing._private.utils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',precision=6,equal_nan=True,equal_inf=True,*,strict=False,names=('ACTUAL','DESIRED'))
numpy.testing._private.utils.assert_array_equal(actual,desired,err_msg='',verbose=True,*,strict=False)
numpy.testing._private.utils.assert_array_less(x,y,err_msg='',verbose=True,*,strict=False)
numpy.testing._private.utils.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing._private.utils.assert_equal(actual,desired,err_msg='',verbose=True,*,strict=False)
numpy.testing._private.utils.assert_no_gc_cycles(*args,**kwargs)
numpy.testing._private.utils.assert_no_warnings(*args,**kwargs)
numpy.testing._private.utils.assert_raises(*args,**kwargs)
numpy.testing._private.utils.assert_raises_regex(exception_class,expected_regexp,*args,**kwargs)
numpy.testing._private.utils.assert_string_equal(actual,desired)
numpy.testing._private.utils.assert_warns(warning_class,*args,**kwargs)
numpy.testing._private.utils.break_cycles()
numpy.testing._private.utils.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'),precision=8)
numpy.testing._private.utils.check_free_memory(free_bytes)
numpy.testing._private.utils.check_support_sve()
numpy.testing._private.utils.clear_and_catch_warnings(self,record=False,modules=())
numpy.testing._private.utils.clear_and_catch_warnings.__enter__(self)
numpy.testing._private.utils.clear_and_catch_warnings.__exit__(self,*exc_info)
numpy.testing._private.utils.clear_and_catch_warnings.__init__(self,record=False,modules=())
numpy.testing._private.utils.decorate_methods(cls,decorator,testmatch=None)
numpy.testing._private.utils.integer_repr(x)
numpy.testing._private.utils.measure(code_str,times=1,label=None)
numpy.testing._private.utils.nulp_diff(x,y,dtype=None)
numpy.testing._private.utils.print_assert_equal(test_string,actual,desired)
numpy.testing._private.utils.requires_memory(free_bytes)
numpy.testing._private.utils.rundocs(filename=None,raise_on_error=True)
numpy.testing._private.utils.runstring(astr,dict)
numpy.testing._private.utils.suppress_warnings(self,forwarding_rule='always')
numpy.testing._private.utils.suppress_warnings.__enter__(self)
numpy.testing._private.utils.suppress_warnings.__exit__(self,*exc_info)
numpy.testing._private.utils.suppress_warnings.__init__(self,forwarding_rule='always')
numpy.testing._private.utils.suppress_warnings._clear_registries(self)
numpy.testing._private.utils.suppress_warnings._filter(self,category=Warning,message='',module=None,record=False)
numpy.testing._private.utils.suppress_warnings._showwarning(self,message,category,filename,lineno,*args,use_warnmsg=None,**kwargs)
numpy.testing._private.utils.suppress_warnings.filter(self,category=Warning,message='',module=None)
numpy.testing._private.utils.suppress_warnings.record(self,category=Warning,message='',module=None)
numpy.testing._private.utils.tempdir(*args,**kwargs)
numpy.testing._private.utils.temppath(*args,**kwargs)
numpy.testing.assert_(val,msg='')
numpy.testing.assert_allclose(actual,desired,rtol=1e-07,atol=0,equal_nan=True,err_msg='',verbose=True,*,strict=False)
numpy.testing.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal(actual,desired,decimal=6,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',precision=6,equal_nan=True,equal_inf=True,*,strict=False,names=('ACTUAL','DESIRED'))
numpy.testing.assert_array_equal(actual,desired,err_msg='',verbose=True,*,strict=False)
numpy.testing.assert_array_less(x,y,err_msg='',verbose=True,*,strict=False)
numpy.testing.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing.assert_equal(actual,desired,err_msg='',verbose=True,*,strict=False)
numpy.testing.assert_no_gc_cycles(*args,**kwargs)
numpy.testing.assert_no_warnings(*args,**kwargs)
numpy.testing.assert_raises(*args,**kwargs)
numpy.testing.assert_raises_regex(exception_class,expected_regexp,*args,**kwargs)
numpy.testing.assert_string_equal(actual,desired)
numpy.testing.assert_warns(warning_class,*args,**kwargs)
numpy.testing.break_cycles()
numpy.testing.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'),precision=8)
numpy.testing.check_free_memory(free_bytes)
numpy.testing.check_support_sve()
numpy.testing.clear_and_catch_warnings(self,record=False,modules=())
numpy.testing.clear_and_catch_warnings.__enter__(self)
numpy.testing.clear_and_catch_warnings.__exit__(self,*exc_info)
numpy.testing.decorate_methods(cls,decorator,testmatch=None)
numpy.testing.integer_repr(x)
numpy.testing.measure(code_str,times=1,label=None)
numpy.testing.nulp_diff(x,y,dtype=None)
numpy.testing.print_assert_equal(test_string,actual,desired)
numpy.testing.requires_memory(free_bytes)
numpy.testing.rundocs(filename=None,raise_on_error=True)
numpy.testing.runstring(astr,dict)
numpy.testing.suppress_warnings(self,forwarding_rule='always')
numpy.testing.suppress_warnings.__enter__(self)
numpy.testing.suppress_warnings.__exit__(self,*exc_info)
numpy.testing.suppress_warnings._clear_registries(self)
numpy.testing.suppress_warnings._filter(self,category=Warning,message='',module=None,record=False)
numpy.testing.suppress_warnings._showwarning(self,message,category,filename,lineno,*args,use_warnmsg=None,**kwargs)
numpy.testing.suppress_warnings.filter(self,category=Warning,message='',module=None)
numpy.testing.suppress_warnings.record(self,category=Warning,message='',module=None)
numpy.testing.tempdir(*args,**kwargs)
numpy.testing.temppath(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/testing/_private/utils.pyi----------------------------------------
numpy.testing._clear_and_catch_warnings_with_records(clear_and_catch_warnings)
numpy.testing._clear_and_catch_warnings_with_records.__enter__(self)->list[warnings.WarningMessage]
numpy.testing._clear_and_catch_warnings_without_records(clear_and_catch_warnings)
numpy.testing._clear_and_catch_warnings_without_records.__enter__(self)->None
numpy.testing._private.utils._clear_and_catch_warnings_with_records(clear_and_catch_warnings)
numpy.testing._private.utils._clear_and_catch_warnings_with_records.__enter__(self)->list[warnings.WarningMessage]
numpy.testing._private.utils._clear_and_catch_warnings_without_records(clear_and_catch_warnings)
numpy.testing._private.utils._clear_and_catch_warnings_without_records.__enter__(self)->None
numpy.testing._private.utils.clear_and_catch_warnings.__new__(cls,record:bool,modules:Iterable[types.ModuleType]=...)
numpy.testing._private.utils.raises(*args:type[BaseException])->Callable[[_FT], _FT]
numpy.testing.raises(*args:type[BaseException])->Callable[[_FT], _FT]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_utils/__init__.py----------------------------------------
A:numpy._utils.__init__.end_version->'.'.join(end_version)
A:numpy._utils.__init__.end_version[1]->str(int(end_version[1]) + 2)
A:numpy._utils.__init__.kwargs[new_name]->kwargs.pop(old_name)
numpy._utils.__init__._rename_parameter(old_names,new_names,dep_version=None)
numpy._utils.__init__.set_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_utils/_inspect.py----------------------------------------
A:numpy._utils._inspect.args->list(names[:nargs])
A:numpy._utils._inspect.(args, varargs, varkw)->getargs(frame.f_code)
A:numpy._utils._inspect.spec->strseq(args[i], formatarg, join)
numpy._utils._inspect.formatargspec(args,varargs=None,varkw=None,defaults=None,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy._utils._inspect.formatargvalues(args,varargs,varkw,locals,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy._utils._inspect.getargs(co)
numpy._utils._inspect.getargspec(func)
numpy._utils._inspect.getargvalues(frame)
numpy._utils._inspect.iscode(object)
numpy._utils._inspect.isfunction(object)
numpy._utils._inspect.ismethod(object)
numpy._utils._inspect.joinseq(seq)
numpy._utils._inspect.strseq(object,convert,join=joinseq)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_utils/_pep440.py----------------------------------------
A:numpy._utils._pep440.Infinity->Infinity()
A:numpy._utils._pep440.NegativeInfinity->NegativeInfinity()
A:numpy._utils._pep440._Version->collections.namedtuple('_Version', ['epoch', 'release', 'dev', 'pre', 'post', 'local'])
A:numpy._utils._pep440.self._version->_Version(epoch=int(match.group('epoch')) if match.group('epoch') else 0, release=tuple((int(i) for i in match.group('release').split('.'))), pre=_parse_letter_version(match.group('pre_l'), match.group('pre_n')), post=_parse_letter_version(match.group('post_l'), match.group('post_n1') or match.group('post_n2')), dev=_parse_letter_version(match.group('dev_l'), match.group('dev_n')), local=_parse_local_version(match.group('local')))
A:numpy._utils._pep440.self._key->_cmpkey(self._version.epoch, self._version.release, self._version.pre, self._version.post, self._version.dev, self._version.local)
A:numpy._utils._pep440._legacy_version_component_re->re.compile('(\\d+ | [a-z]+ | \\.| -)', re.VERBOSE)
A:numpy._utils._pep440.part->_legacy_version_replacement_map.get(part, part)
A:numpy._utils._pep440.parts->tuple(parts)
A:numpy._utils._pep440._regex->re.compile('^\\s*' + VERSION_PATTERN + '\\s*$', re.VERBOSE | re.IGNORECASE)
A:numpy._utils._pep440.match->self._regex.search(version)
A:numpy._utils._pep440.version_string->str(self)
A:numpy._utils._pep440.letter->letter.lower().lower()
A:numpy._utils._pep440._local_version_seperators->re.compile('[\\._-]')
A:numpy._utils._pep440.release->tuple(reversed(list(itertools.dropwhile(lambda x: x == 0, reversed(release)))))
A:numpy._utils._pep440.local->tuple(((i, '') if isinstance(i, int) else (-Infinity, i) for i in local))
numpy._utils._pep440.Infinity
numpy._utils._pep440.Infinity.__eq__(self,other)
numpy._utils._pep440.Infinity.__ge__(self,other)
numpy._utils._pep440.Infinity.__gt__(self,other)
numpy._utils._pep440.Infinity.__hash__(self)
numpy._utils._pep440.Infinity.__le__(self,other)
numpy._utils._pep440.Infinity.__lt__(self,other)
numpy._utils._pep440.Infinity.__ne__(self,other)
numpy._utils._pep440.Infinity.__neg__(self)
numpy._utils._pep440.Infinity.__repr__(self)
numpy._utils._pep440.InvalidVersion(ValueError)
numpy._utils._pep440.LegacyVersion(self,version)
numpy._utils._pep440.LegacyVersion.__init__(self,version)
numpy._utils._pep440.LegacyVersion.__repr__(self)
numpy._utils._pep440.LegacyVersion.__str__(self)
numpy._utils._pep440.LegacyVersion.base_version(self)
numpy._utils._pep440.LegacyVersion.is_postrelease(self)
numpy._utils._pep440.LegacyVersion.is_prerelease(self)
numpy._utils._pep440.LegacyVersion.local(self)
numpy._utils._pep440.LegacyVersion.public(self)
numpy._utils._pep440.NegativeInfinity
numpy._utils._pep440.NegativeInfinity.__eq__(self,other)
numpy._utils._pep440.NegativeInfinity.__ge__(self,other)
numpy._utils._pep440.NegativeInfinity.__gt__(self,other)
numpy._utils._pep440.NegativeInfinity.__hash__(self)
numpy._utils._pep440.NegativeInfinity.__le__(self,other)
numpy._utils._pep440.NegativeInfinity.__lt__(self,other)
numpy._utils._pep440.NegativeInfinity.__ne__(self,other)
numpy._utils._pep440.NegativeInfinity.__neg__(self)
numpy._utils._pep440.NegativeInfinity.__repr__(self)
numpy._utils._pep440.Version(self,version)
numpy._utils._pep440.Version.__init__(self,version)
numpy._utils._pep440.Version.__repr__(self)
numpy._utils._pep440.Version.__str__(self)
numpy._utils._pep440.Version.base_version(self)
numpy._utils._pep440.Version.is_postrelease(self)
numpy._utils._pep440.Version.is_prerelease(self)
numpy._utils._pep440.Version.local(self)
numpy._utils._pep440.Version.public(self)
numpy._utils._pep440._BaseVersion
numpy._utils._pep440._BaseVersion.__eq__(self,other)
numpy._utils._pep440._BaseVersion.__ge__(self,other)
numpy._utils._pep440._BaseVersion.__gt__(self,other)
numpy._utils._pep440._BaseVersion.__hash__(self)
numpy._utils._pep440._BaseVersion.__le__(self,other)
numpy._utils._pep440._BaseVersion.__lt__(self,other)
numpy._utils._pep440._BaseVersion.__ne__(self,other)
numpy._utils._pep440._BaseVersion._compare(self,other,method)
numpy._utils._pep440._cmpkey(epoch,release,pre,post,dev,local)
numpy._utils._pep440._legacy_cmpkey(version)
numpy._utils._pep440._parse_letter_version(letter,number)
numpy._utils._pep440._parse_local_version(local)
numpy._utils._pep440._parse_version_parts(s)
numpy._utils._pep440.parse(version)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_utils/_convertions.py----------------------------------------
numpy._utils._convertions.asbytes(s)
numpy._utils._convertions.asunicode(s)
numpy._utils.asbytes(s)
numpy._utils.asunicode(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/__init__.py----------------------------------------
A:numpy.fft.__init__.__all__->_pocketfft.__all__.copy()
A:numpy.fft.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/_pocketfft.py----------------------------------------
A:numpy.fft._pocketfft.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.fft')
A:numpy.fft._pocketfft.norm->_swap_direction(norm)
A:numpy.fft._pocketfft.real_dtype->result_type(a.real.dtype, 1.0)
A:numpy.fft._pocketfft.fct->reciprocal(n, dtype=real_dtype)
A:numpy.fft._pocketfft.axis->normalize_axis_index(axis, a.ndim)
A:numpy.fft._pocketfft.out_dtype->result_type(a.dtype, 1j)
A:numpy.fft._pocketfft.out->rfft(a, n, axis, norm=new_norm, out=out)
A:numpy.fft._pocketfft.a->irfft(a, s[-1], axes[-1], norm, out=out)
A:numpy.fft._pocketfft.output->irfft(conjugate(a), n, axis, norm=new_norm, out=None)
A:numpy.fft._pocketfft.new_norm->_swap_direction(norm)
A:numpy.fft._pocketfft.s->list(s)
A:numpy.fft._pocketfft.axes->list(range(-len(s), 0))
A:numpy.fft._pocketfft.(s, axes)->_cook_nd_args(a, s, axes, invreal=1)
A:numpy.fft._pocketfft.itl->list(range(len(axes)))
numpy.fft._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft._fft_dispatcher(a,n=None,axis=None,norm=None,out=None)
numpy.fft._fftn_dispatcher(a,s=None,axes=None,norm=None,out=None)
numpy.fft._pocketfft._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft._pocketfft._fft_dispatcher(a,n=None,axis=None,norm=None,out=None)
numpy.fft._pocketfft._fftn_dispatcher(a,s=None,axes=None,norm=None,out=None)
numpy.fft._pocketfft._raw_fft(a,n,axis,is_real,is_forward,norm,out=None)
numpy.fft._pocketfft._raw_fftnd(a,s=None,axes=None,function=fft,norm=None,out=None)
numpy.fft._pocketfft._swap_direction(norm)
numpy.fft._pocketfft.fft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.fft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft._pocketfft.fftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft._pocketfft.hfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.ifft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.ifft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft._pocketfft.ifftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft._pocketfft.ihfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.irfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.irfft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft._pocketfft.irfftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft._pocketfft.rfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft._pocketfft.rfft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft._pocketfft.rfftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft._raw_fft(a,n,axis,is_real,is_forward,norm,out=None)
numpy.fft._raw_fftnd(a,s=None,axes=None,function=fft,norm=None,out=None)
numpy.fft._swap_direction(norm)
numpy.fft.fft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.fft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft.fftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft.hfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.ifft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.ifft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft.ifftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft.ihfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.irfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.irfft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft.irfftn(a,s=None,axes=None,norm=None,out=None)
numpy.fft.rfft(a,n=None,axis=-1,norm=None,out=None)
numpy.fft.rfft2(a,s=None,axes=(-2,-1),norm=None,out=None)
numpy.fft.rfftn(a,s=None,axes=None,norm=None,out=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/_pocketfft.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/_helper.py----------------------------------------
A:numpy.fft._helper.x->asarray(x)
A:numpy.fft._helper.axes->tuple(range(x.ndim))
A:numpy.fft._helper.results->arange(0, N, dtype=int, device=device)
A:numpy.fft._helper.p1->arange(0, N, dtype=int, device=device)
A:numpy.fft._helper.p2->arange(-(n // 2), 0, dtype=int, device=device)
numpy.fft._fftshift_dispatcher(x,axes=None)
numpy.fft._helper._fftshift_dispatcher(x,axes=None)
numpy.fft._helper.fftfreq(n,d=1.0,device=None)
numpy.fft._helper.fftshift(x,axes=None)
numpy.fft._helper.ifftshift(x,axes=None)
numpy.fft._helper.rfftfreq(n,d=1.0,device=None)
numpy.fft.fftfreq(n,d=1.0,device=None)
numpy.fft.fftshift(x,axes=None)
numpy.fft.ifftshift(x,axes=None)
numpy.fft.rfftfreq(n,d=1.0,device=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/_helper.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/helper.py----------------------------------------
A:numpy.fft.helper.ret->getattr(_helper, attr_name, None)
numpy.fft.helper.__getattr__(attr_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/tests/test_pocketfft.py----------------------------------------
A:numpy.fft.tests.test_pocketfft.L->len(x)
A:numpy.fft.tests.test_pocketfft.xr->random(maxlen).astype(dtype)
A:numpy.fft.tests.test_pocketfft.xx->numpy.concatenate([x, np.zeros_like(x)])
A:numpy.fft.tests.test_pocketfft.xxr->numpy.concatenate([xr, np.zeros_like(xr)])
A:numpy.fft.tests.test_pocketfft.check_c->numpy.fft.ifft(np.fft.fft(x, n=i), n=i)
A:numpy.fft.tests.test_pocketfft.check_r->numpy.fft.irfft(np.fft.rfft(xr, n=i), n=i)
A:numpy.fft.tests.test_pocketfft.check_via_c->numpy.fft.fft(np.fft.ifft(x, n=i), n=i)
A:numpy.fft.tests.test_pocketfft.y->numpy.fft.rfft(x)
A:numpy.fft.tests.test_pocketfft.yy->numpy.concatenate([y, np.zeros_like(y)])
A:numpy.fft.tests.test_pocketfft.check_via_r->numpy.fft.rfft(np.fft.irfft(x, n=i), n=i)
A:numpy.fft.tests.test_pocketfft.expected->fft(float_data)
A:numpy.fft.tests.test_pocketfft.out->numpy.zeros_like(expected)
A:numpy.fft.tests.test_pocketfft.result->fft(data)
A:numpy.fft.tests.test_pocketfft.expected2->ifft(expected, axes=axes)
A:numpy.fft.tests.test_pocketfft.result2->ifft(out, out=out2, axes=axes)
A:numpy.fft.tests.test_pocketfft.y1->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.expected1->numpy.fft.fft(y1, axis=axis)
A:numpy.fft.tests.test_pocketfft.result1->numpy.fft.fft(y1, axis=axis, out=y1)
A:numpy.fft.tests.test_pocketfft.y2->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.y3->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.expected3->numpy.fft.fft(y3_sel, n=10, axis=axis)
A:numpy.fft.tests.test_pocketfft.result3->numpy.fft.fft(y3_sel, n=10, axis=axis, out=out3)
A:numpy.fft.tests.test_pocketfft.y4->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.expected4->numpy.fft.fft(y4_sel, n=15, axis=axis)
A:numpy.fft.tests.test_pocketfft.result4->numpy.fft.fft(y4_sel, n=15, axis=axis, out=out4)
A:numpy.fft.tests.test_pocketfft.y5->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.result5->numpy.fft.fft(y5, axis=axis, out=out5)
A:numpy.fft.tests.test_pocketfft.y6->numpy.fft.rfft(x).copy()
A:numpy.fft.tests.test_pocketfft.result6->numpy.fft.fft(y6, axis=axis, out=out6)
A:numpy.fft.tests.test_pocketfft.x->numpy.arange(10)
A:numpy.fft.tests.test_pocketfft.x_herm->numpy.concatenate((random(1), x, random(1)))
A:numpy.fft.tests.test_pocketfft.op_tr->op(np.transpose(x, a))
A:numpy.fft.tests.test_pocketfft.tr_op->numpy.transpose(op(x, axes=a), a)
A:numpy.fft.tests.test_pocketfft.x_norm->numpy.linalg.norm(x)
A:numpy.fft.tests.test_pocketfft.tmp->back(tmp, n=n, norm=norm)
A:numpy.fft.tests.test_pocketfft.rng->numpy.random.RandomState(42)
A:numpy.fft.tests.test_pocketfft.X->numpy.ascontiguousarray(X[::-1])
A:numpy.fft.tests.test_pocketfft.Y->numpy.asfortranarray(X)
A:numpy.fft.tests.test_pocketfft.X_res->fft(X, axes=ax)
A:numpy.fft.tests.test_pocketfft.Y_res->fft(Y, axes=ax)
A:numpy.fft.tests.test_pocketfft.res->numpy.fft.fft(x, n=n)
A:numpy.fft.tests.test_pocketfft.q->queue.Queue()
A:numpy.fft.tests.test_pocketfft.a->numpy.ones(self.input_shape)
A:numpy.fft.tests.test_pocketfft.float_data->data.astype(np.result_type(data, 1.0))
numpy.fft.tests.testTestFFT1D
numpy.fft.tests.testTestFFT1D.test_all_1d_norm_preserving(self)
numpy.fft.tests.testTestFFT1D.test_axes(self,op)
numpy.fft.tests.testTestFFT1D.test_fft(self)
numpy.fft.tests.testTestFFT1D.test_fft2(self)
numpy.fft.tests.testTestFFT1D.test_fft_bad_out(self)
numpy.fft.tests.testTestFFT1D.test_fft_inplace_out(self,axis)
numpy.fft.tests.testTestFFT1D.test_fft_out_argument(self,dtype,transpose,axis)
numpy.fft.tests.testTestFFT1D.test_fftn(self)
numpy.fft.tests.testTestFFT1D.test_fftn_out_and_s_interaction(self,fft)
numpy.fft.tests.testTestFFT1D.test_fftn_out_argument(self,dtype,transpose,axes)
numpy.fft.tests.testTestFFT1D.test_hfft(self)
numpy.fft.tests.testTestFFT1D.test_identity(self)
numpy.fft.tests.testTestFFT1D.test_identity_long_short(self,dtype)
numpy.fft.tests.testTestFFT1D.test_identity_long_short_reversed(self,dtype)
numpy.fft.tests.testTestFFT1D.test_ifft(self,norm)
numpy.fft.tests.testTestFFT1D.test_ifft2(self)
numpy.fft.tests.testTestFFT1D.test_ifftn(self)
numpy.fft.tests.testTestFFT1D.test_ihfft(self)
numpy.fft.tests.testTestFFT1D.test_irfft(self)
numpy.fft.tests.testTestFFT1D.test_irfft2(self)
numpy.fft.tests.testTestFFT1D.test_irfftn(self)
numpy.fft.tests.testTestFFT1D.test_irfftn_out_and_s_interaction(self,s)
numpy.fft.tests.testTestFFT1D.test_rfft(self)
numpy.fft.tests.testTestFFT1D.test_rfft2(self)
numpy.fft.tests.testTestFFT1D.test_rfft_even(self)
numpy.fft.tests.testTestFFT1D.test_rfft_odd(self)
numpy.fft.tests.testTestFFT1D.test_rfftn(self)
numpy.fft.tests.testTestFFT1D.test_s_axes_none(self,op)
numpy.fft.tests.testTestFFT1D.test_s_axes_none_2D(self,op)
numpy.fft.tests.testTestFFT1D.test_s_contains_none(self,op)
numpy.fft.tests.testTestFFT1D.test_s_negative_1(self,op)
numpy.fft.tests.testTestFFTShift
numpy.fft.tests.testTestFFTShift.test_fft_n(self)
numpy.fft.tests.testTestFFTThreadSafe
numpy.fft.tests.testTestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.testTestFFTThreadSafe.test_fft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D
numpy.fft.tests.test_pocketfft.TestFFT1D.test_all_1d_norm_preserving(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_axes(self,op)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft_bad_out(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft_inplace_out(self,axis)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft_out_argument(self,dtype,transpose,axis)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fftn_out_and_s_interaction(self,fft)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fftn_out_argument(self,dtype,transpose,axes)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_hfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_identity(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_identity_long_short(self,dtype)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_identity_long_short_reversed(self,dtype)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifft(self,norm)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ihfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfftn_out_and_s_interaction(self,s)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft_even(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft_odd(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_s_axes_none(self,op)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_s_axes_none_2D(self,op)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_s_contains_none(self,op)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_s_negative_1(self,op)
numpy.fft.tests.test_pocketfft.TestFFTShift
numpy.fft.tests.test_pocketfft.TestFFTShift.test_fft_n(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_fft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_pocketfft.fft1(x)
numpy.fft.tests.test_pocketfft.test_fft_output_order(order,n)
numpy.fft.tests.test_pocketfft.test_fft_with_integer_or_bool_input(data,fft)
numpy.fft.tests.test_pocketfft.test_fft_with_order(dtype,order,fft)
numpy.fft.tests.test_pocketfft.test_irfft_with_n_1_regression()
numpy.fft.tests.test_pocketfft.test_irfft_with_n_large_regression()
numpy.fft.tests.testfft1(x)
numpy.fft.tests.testtest_fft_output_order(order,n)
numpy.fft.tests.testtest_fft_with_integer_or_bool_input(data,fft)
numpy.fft.tests.testtest_fft_with_order(dtype,order,fft)
numpy.fft.tests.testtest_irfft_with_n_1_regression()
numpy.fft.tests.testtest_irfft_with_n_large_regression()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/fft/tests/test_helper.py----------------------------------------
A:numpy.fft.tests.test_helper.x->numpy.random.random((n,))
A:numpy.fft.tests.test_helper.tmp->asarray(x)
A:numpy.fft.tests.test_helper.axes->list(range(ndim))
A:numpy.fft.tests.test_helper.mylist->concatenate((arange(p2, n), arange(p2)))
A:numpy.fft.tests.test_helper.y->take(y, mylist, k)
A:numpy.fft.tests.test_helper.inp->numpy.random.rand(i, j)
A:numpy.fft.tests.test_helper.(ar, ai)->numpy.random.random((2, 16, 8, 32))
numpy.fft.tests.testTestFFTFreq
numpy.fft.tests.testTestFFTFreq.test_definition(self)
numpy.fft.tests.testTestFFTShift
numpy.fft.tests.testTestFFTShift.test_axes_keyword(self)
numpy.fft.tests.testTestFFTShift.test_definition(self)
numpy.fft.tests.testTestFFTShift.test_equal_to_original(self)
numpy.fft.tests.testTestFFTShift.test_inverse(self)
numpy.fft.tests.testTestFFTShift.test_uneven_dims(self)
numpy.fft.tests.testTestIRFFTN
numpy.fft.tests.testTestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.testTestRFFTFreq
numpy.fft.tests.testTestRFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTFreq
numpy.fft.tests.test_helper.TestFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift
numpy.fft.tests.test_helper.TestFFTShift.test_axes_keyword(self)
numpy.fft.tests.test_helper.TestFFTShift.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original(self)
numpy.fft.tests.test_helper.TestFFTShift.test_inverse(self)
numpy.fft.tests.test_helper.TestFFTShift.test_uneven_dims(self)
numpy.fft.tests.test_helper.TestIRFFTN
numpy.fft.tests.test_helper.TestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.test_helper.TestRFFTFreq
numpy.fft.tests.test_helper.TestRFFTFreq.test_definition(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/__init__.py----------------------------------------
A:numpy.typing.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/mypy_plugin.py----------------------------------------
A:numpy.typing.mypy_plugin.import_obj->ImportFrom(module, 0, names=imports)
A:numpy.typing.mypy_plugin.i->_index(lst, module)
numpy.typing.mypy_plugin._get_c_intp_name()->str
numpy.typing.mypy_plugin._get_extended_precision_list()->list[str]
numpy.typing.mypy_plugin._get_precision_dict()->dict[str, str]
numpy.typing.mypy_plugin._hook(ctx:AnalyzeTypeContext)->Type


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/test_isfile.py----------------------------------------
numpy.typing.tests.test_isfile.TestIsFile
numpy.typing.tests.test_isfile.TestIsFile.test_isfile(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/test_runtime.py----------------------------------------
A:numpy.typing.tests.test_runtime.NDArrayTup->TypeTup(npt.NDArray, npt.NDArray.__args__, np.ndarray)
A:numpy.typing.tests.test_runtime.out->get_type_hints(func)
A:numpy.typing.tests.test_runtime.keys->TYPES.keys()
A:numpy.typing.tests.test_runtime.ref->set(npt.__all__)
numpy.typing.tests.test_runtime.TestRuntimeProtocol
numpy.typing.tests.test_runtime.TestRuntimeProtocol.test_isinstance(self,cls:type[Any],obj:object)->None
numpy.typing.tests.test_runtime.TestRuntimeProtocol.test_issubclass(self,cls:type[Any],obj:object)->None
numpy.typing.tests.test_runtime.TypeTup(NamedTuple)
numpy.typing.tests.test_runtime.test_get_args(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_origin(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_type_hints(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_type_hints_str(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_keys()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/test_typing.py----------------------------------------
A:numpy.typing.tests.test_typing.pytestmark->pytest.mark.skipif(not RUN_MYPY, reason='`NPY_RUN_MYPY_IN_TESTSUITE` not set')
A:numpy.typing.tests.test_typing.DATA_DIR->os.path.join(os.path.dirname(__file__), 'data')
A:numpy.typing.tests.test_typing.PASS_DIR->os.path.join(DATA_DIR, 'pass')
A:numpy.typing.tests.test_typing.FAIL_DIR->os.path.join(DATA_DIR, 'fail')
A:numpy.typing.tests.test_typing.REVEAL_DIR->os.path.join(DATA_DIR, 'reveal')
A:numpy.typing.tests.test_typing.MISC_DIR->os.path.join(DATA_DIR, 'misc')
A:numpy.typing.tests.test_typing.MYPY_INI->os.path.join(DATA_DIR, 'mypy.ini')
A:numpy.typing.tests.test_typing.CACHE_DIR->os.path.join(DATA_DIR, '.mypy_cache')
A:numpy.typing.tests.test_typing.(drive, tail)->os.path.splitdrive(key)
A:numpy.typing.tests.test_typing.(_, tail)->os.path.splitdrive(msg)
A:numpy.typing.tests.test_typing.(_, lineno, msg)->tail.split(':', 2)
A:numpy.typing.tests.test_typing.split_pattern->re.compile('(\\s+)?\\^(\\~+)?')
A:numpy.typing.tests.test_typing.(stdout, stderr, exit_code)->mypy.api.run(['--config-file', MYPY_INI, '--cache-dir', CACHE_DIR, directory])
A:numpy.typing.tests.test_typing.filename->_key_func(i)
A:numpy.typing.tests.test_typing.(short_fname, ext)->os.path.splitext(fname)
A:numpy.typing.tests.test_typing.fullpath->os.path.join(root, fname)
A:numpy.typing.tests.test_typing.lines->fin.readlines()
A:numpy.typing.tests.test_typing.errors->defaultdict(lambda : '')
A:numpy.typing.tests.test_typing.(lineno, error_line)->_strip_filename(error_line)
A:numpy.typing.tests.test_typing.(expression, _, marker)->target_line.partition('  # E: ')
A:numpy.typing.tests.test_typing.expected_error->errors[lineno].strip()
A:numpy.typing.tests.test_typing.marker->marker.strip().strip()
A:numpy.typing.tests.test_typing.(path_without_extension, _)->os.path.splitext(path)
A:numpy.typing.tests.test_typing.spec->importlib.util.spec_from_file_location(f'{dirname}.{filename}', path)
A:numpy.typing.tests.test_typing.test_module->importlib.util.module_from_spec(spec)
A:numpy.typing.tests.test_typing.path->os.path.join(MISC_DIR, 'extended_precision.pyi')
A:numpy.typing.tests.test_typing.expression_list->f.readlines()
A:numpy.typing.tests.test_typing.(lineno, msg)->_strip_filename(_msg)
A:numpy.typing.tests.test_typing.expression->expression_list[lineno - 1].rstrip('\n')
numpy.typing.tests.test_typing._key_func(key:str)->str
numpy.typing.tests.test_typing._strip_filename(msg:str)->tuple[int, str]
numpy.typing.tests.test_typing._test_fail(path:str,expression:str,error:str,expected_error:None|str,lineno:int)->None
numpy.typing.tests.test_typing.get_test_cases(directory:str)->Iterator[ParameterSet]
numpy.typing.tests.test_typing.run_mypy()->None
numpy.typing.tests.test_typing.strip_func(match:re.Match[str])->str
numpy.typing.tests.test_typing.test_code_runs(path:str)->None
numpy.typing.tests.test_typing.test_extended_precision()->None
numpy.typing.tests.test_typing.test_fail(path:str)->None
numpy.typing.tests.test_typing.test_reveal(path:str)->None
numpy.typing.tests.test_typing.test_success(path)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/modules.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/arrayprint.py----------------------------------------
A:numpy.typing.tests.data.pass.arrayprint.AR->numpy.arange(10)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/arrayterator.py----------------------------------------
A:numpy.typing.tests.data.pass.arrayterator.ar_iter->numpy.lib.Arrayterator(AR_i8)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/numerictypes.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/flatiter.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/array_constructors.py----------------------------------------
A:numpy.typing.tests.data.pass.array_constructors.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.array_constructors.A->numpy.array([1])
A:numpy.typing.tests.data.pass.array_constructors.B->numpy.array([1]).view(SubClass).copy()
A:numpy.typing.tests.data.pass.array_constructors.B_stack->numpy.array([[1], [1]]).view(SubClass)
numpy.typing.tests.data.pass.array_constructors.Index
numpy.typing.tests.data.pass.array_constructors.Index.__index__(self)->int
numpy.typing.tests.data.pass.array_constructors.SubClass(npt.NDArray[np.float64])
numpy.typing.tests.data.pass.array_constructors.func(i:int,j:int,**kwargs:Any)->SubClass


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ma.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/literal.py----------------------------------------
A:numpy.typing.tests.data.pass.literal.AR->numpy.array(0)
A:numpy.typing.tests.data.pass.literal.KACF->frozenset({None, 'K', 'A', 'C', 'F'})
A:numpy.typing.tests.data.pass.literal.ACF->frozenset({None, 'A', 'C', 'F'})
A:numpy.typing.tests.data.pass.literal.CF->frozenset({None, 'C', 'F'})


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/warnings_and_errors.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/simple_py3.py----------------------------------------
A:numpy.typing.tests.data.pass.simple_py3.array->numpy.array([1, 2])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ndarray_misc.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_misc.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.ndarray_misc.B0->numpy.empty((), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.B1->numpy.empty((1,), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.B2->numpy.empty((1, 1), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.D->numpy.ones(3).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc._choices->numpy.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=np.int32)
A:numpy.typing.tests.data.pass.ndarray_misc.void->cast(np.void, np.array(1, dtype=[('f', np.float64)]).take(0))
numpy.typing.tests.data.pass.ndarray_misc.SubClass(npt.NDArray[np.float64])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/simple.py----------------------------------------
A:numpy.typing.tests.data.pass.simple.array->numpy.array([1, 2])
A:numpy.typing.tests.data.pass.simple.array_2d->numpy.ones((3, 3))
A:numpy.typing.tests.data.pass.simple.array_scalar->numpy.array(1)
A:numpy.typing.tests.data.pass.simple.nonzero_array->numpy.array([1, 2])
A:numpy.typing.tests.data.pass.simple.float_array->numpy.array([1.0, 2.0])
numpy.typing.tests.data.pass.simple.iterable_func(x:Iterable[object])->Iterable[object]
numpy.typing.tests.data.pass.simple.ndarray_func(x:npt.NDArray[np.float64])->npt.NDArray[np.float64]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/fromnumeric.py----------------------------------------
A:numpy.typing.tests.data.pass.fromnumeric.A->numpy.array(True, ndmin=2, dtype=bool)
A:numpy.typing.tests.data.pass.fromnumeric.B->numpy.array(1.0, ndmin=2, dtype=np.float32)
A:numpy.typing.tests.data.pass.fromnumeric.a->numpy.bool(True)
A:numpy.typing.tests.data.pass.fromnumeric.b->numpy.float32(1.0)
A:numpy.typing.tests.data.pass.fromnumeric.d->numpy.array(1.0, dtype=np.float32)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/dtype.py----------------------------------------
A:numpy.typing.tests.data.pass.dtype.dtype_obj->numpy.dtype(np.str_)
A:numpy.typing.tests.data.pass.dtype.void_dtype_obj->numpy.dtype([('f0', np.float64), ('f1', np.float32)])
A:numpy.typing.tests.data.pass.dtype.dtype->numpy.dtype(float)
numpy.typing.tests.data.pass.dtype.Test


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ufunclike.py----------------------------------------
A:numpy.typing.tests.data.pass.ufunclike.ret->numpy.empty((), dtype=object)
numpy.typing.tests.data.pass.ufunclike.Object
numpy.typing.tests.data.pass.ufunclike.Object.__array__(self,dtype:Optional[np.typing.DTypeLike]=None,copy:Optional[bool]=None)->np.ndarray[Any, np.dtype[np.object_]]
numpy.typing.tests.data.pass.ufunclike.Object.__ceil__(self)->Object
numpy.typing.tests.data.pass.ufunclike.Object.__floor__(self)->Object
numpy.typing.tests.data.pass.ufunclike.Object.__ge__(self,value:object)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/bitwise_ops.py----------------------------------------
A:numpy.typing.tests.data.pass.bitwise_ops.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.bitwise_ops.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.bitwise_ops.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.bitwise_ops.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.bitwise_ops.b_->numpy.bool(1)
A:numpy.typing.tests.data.pass.bitwise_ops.b->bool(1)
A:numpy.typing.tests.data.pass.bitwise_ops.i->int(1)
A:numpy.typing.tests.data.pass.bitwise_ops.AR->numpy.array([0, 1, 2], dtype=np.int32)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ndarray_conversion.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_conversion.nd->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_conversion.scalar_array->numpy.array(1)
A:numpy.typing.tests.data.pass.ndarray_conversion.complex_array->numpy.array([[1 + 1j, 0], [0, 1 - 1j]], dtype=np.complex128)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ufuncs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/arithmetic.py----------------------------------------
A:numpy.typing.tests.data.pass.arithmetic.c16->numpy.complex128(1)
A:numpy.typing.tests.data.pass.arithmetic.f8->numpy.float64(1)
A:numpy.typing.tests.data.pass.arithmetic.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.arithmetic.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.arithmetic.c8->numpy.complex64(1)
A:numpy.typing.tests.data.pass.arithmetic.f4->numpy.float32(1)
A:numpy.typing.tests.data.pass.arithmetic.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.arithmetic.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.arithmetic.dt->numpy.datetime64(1, 'D')
A:numpy.typing.tests.data.pass.arithmetic.td->numpy.timedelta64(1, 'D')
A:numpy.typing.tests.data.pass.arithmetic.b_->numpy.bool(1)
A:numpy.typing.tests.data.pass.arithmetic.b->bool(1)
A:numpy.typing.tests.data.pass.arithmetic.c->complex(1)
A:numpy.typing.tests.data.pass.arithmetic.f->float(1)
A:numpy.typing.tests.data.pass.arithmetic.i->int(1)
A:numpy.typing.tests.data.pass.arithmetic.ret->numpy.empty((), dtype=object)
numpy.typing.tests.data.pass.arithmetic.Object
numpy.typing.tests.data.pass.arithmetic.Object.__array__(self,dtype:Optional[np.typing.DTypeLike]=None,copy:Optional[bool]=None)->np.ndarray[Any, np.dtype[np.object_]]
numpy.typing.tests.data.pass.arithmetic.Object.__floordiv__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__mul__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__pow__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rfloordiv__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rmul__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rpow__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rsub__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__sub__(self,value:Any)->Object


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ndarray_shape_manipulation.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd1->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd2->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd3->numpy.array([[1, 2]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd4->numpy.array([[[1, 2]]])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/array_like.py----------------------------------------
numpy.typing.tests.data.pass.array_like.A
numpy.typing.tests.data.pass.array_like.A.__array__(self,dtype:None|np.dtype[Any]=None)->NDArray[np.float64]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/multiarray.py----------------------------------------
A:numpy.typing.tests.data.pass.multiarray.AR_i4->numpy.array([1], dtype=np.int32)
A:numpy.typing.tests.data.pass.multiarray.AR_u1->numpy.array([1], dtype=np.uint8)
A:numpy.typing.tests.data.pass.multiarray.b_f8->numpy.broadcast(AR_f8)
A:numpy.typing.tests.data.pass.multiarray.b_i4_f8_f8->numpy.broadcast(AR_i4, AR_f8, AR_f8)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/scalars.py----------------------------------------
A:numpy.typing.tests.data.pass.scalars.b->numpy.bool()
A:numpy.typing.tests.data.pass.scalars.b_->numpy.bool_()
A:numpy.typing.tests.data.pass.scalars.u8->numpy.uint64()
A:numpy.typing.tests.data.pass.scalars.i8->numpy.int64()
A:numpy.typing.tests.data.pass.scalars.f8->numpy.float64()
A:numpy.typing.tests.data.pass.scalars.c16->numpy.complex128()
A:numpy.typing.tests.data.pass.scalars.U->numpy.str_('1')
A:numpy.typing.tests.data.pass.scalars.S->numpy.bytes_('1')
A:numpy.typing.tests.data.pass.scalars.td->numpy.timedelta64()
A:numpy.typing.tests.data.pass.scalars.AR->numpy.array(1, dtype=np.float64)
numpy.typing.tests.data.pass.scalars.A
numpy.typing.tests.data.pass.scalars.A.__float__(self)->float
numpy.typing.tests.data.pass.scalars.B
numpy.typing.tests.data.pass.scalars.B.__int__(self)->int
numpy.typing.tests.data.pass.scalars.C
numpy.typing.tests.data.pass.scalars.C.__complex__(self)->complex
numpy.typing.tests.data.pass.scalars.D
numpy.typing.tests.data.pass.scalars.D.__index__(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/numeric.py----------------------------------------
A:numpy.typing.tests.data.pass.numeric.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.numeric.A->numpy.arange(27).reshape(3, 3, 3)
A:numpy.typing.tests.data.pass.numeric.C->numpy.empty((27, 27)).view(SubClass)
numpy.typing.tests.data.pass.numeric.SubClass(npt.NDArray[np.float64])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/ufunc_config.py----------------------------------------
A:numpy.typing.tests.data.pass.ufunc_config._err_default->numpy.geterr()
A:numpy.typing.tests.data.pass.ufunc_config._bufsize_default->numpy.getbufsize()
A:numpy.typing.tests.data.pass.ufunc_config._errcall_default->numpy.geterrcall()
numpy.typing.tests.data.pass.ufunc_config.Write1
numpy.typing.tests.data.pass.ufunc_config.Write1.write(self,a:str)->None
numpy.typing.tests.data.pass.ufunc_config.Write2
numpy.typing.tests.data.pass.ufunc_config.Write2.write(self,a:str,b:int=1)->None
numpy.typing.tests.data.pass.ufunc_config.Write3
numpy.typing.tests.data.pass.ufunc_config.Write3.write(self,a:str)->int
numpy.typing.tests.data.pass.ufunc_config.func1(a:str,b:int)->None
numpy.typing.tests.data.pass.ufunc_config.func2(a:str,b:int,c:float=1.0)->None
numpy.typing.tests.data.pass.ufunc_config.func3(a:str,b:int)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/mod.py----------------------------------------
A:numpy.typing.tests.data.pass.mod.f8->numpy.float64(1)
A:numpy.typing.tests.data.pass.mod.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.mod.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.mod.f4->numpy.float32(1)
A:numpy.typing.tests.data.pass.mod.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.mod.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.mod.td->numpy.timedelta64(1, 'D')
A:numpy.typing.tests.data.pass.mod.b_->numpy.bool(1)
A:numpy.typing.tests.data.pass.mod.b->bool(1)
A:numpy.typing.tests.data.pass.mod.f->float(1)
A:numpy.typing.tests.data.pass.mod.i->int(1)
A:numpy.typing.tests.data.pass.mod.AR->numpy.array([1], dtype=np.bool)
A:numpy.typing.tests.data.pass.mod.AR2->numpy.array([1], dtype=np.timedelta64)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/random.py----------------------------------------
A:numpy.typing.tests.data.pass.random.random_st_state->random_st.__getstate__()
A:numpy.typing.tests.data.pass.random.random_st_get_state->random_st.get_state()
A:numpy.typing.tests.data.pass.random.random_st_get_state_legacy->random_st.get_state(legacy=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/comparisons.py----------------------------------------
A:numpy.typing.tests.data.pass.comparisons.c16->numpy.complex128()
A:numpy.typing.tests.data.pass.comparisons.f8->numpy.float64()
A:numpy.typing.tests.data.pass.comparisons.i8->numpy.int64()
A:numpy.typing.tests.data.pass.comparisons.u8->numpy.uint64()
A:numpy.typing.tests.data.pass.comparisons.c8->numpy.complex64()
A:numpy.typing.tests.data.pass.comparisons.f4->numpy.float32()
A:numpy.typing.tests.data.pass.comparisons.i4->numpy.int32()
A:numpy.typing.tests.data.pass.comparisons.u4->numpy.uint32()
A:numpy.typing.tests.data.pass.comparisons.dt->numpy.datetime64(0, 'D')
A:numpy.typing.tests.data.pass.comparisons.td->numpy.timedelta64(0, 'D')
A:numpy.typing.tests.data.pass.comparisons.b_->numpy.bool()
A:numpy.typing.tests.data.pass.comparisons.b->bool()
A:numpy.typing.tests.data.pass.comparisons.c->complex()
A:numpy.typing.tests.data.pass.comparisons.f->float()
A:numpy.typing.tests.data.pass.comparisons.i->int()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/lib_version.py----------------------------------------
A:numpy.typing.tests.data.pass.lib_version.version->NumpyVersion('1.8.0')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/lib_utils.py----------------------------------------
A:numpy.typing.tests.data.pass.lib_utils.FILE->StringIO()
A:numpy.typing.tests.data.pass.lib_utils.AR->numpy.arange(10, dtype=np.float64)
numpy.typing.tests.data.pass.lib_utils.func(a:int)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/index_tricks.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/pass/einsumfunc.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/lib_polynomial.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/warnings_and_errors.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/index_tricks.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/lib_utils.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/multiarray.pyi----------------------------------------
numpy.typing.tests.data.fail.multiarray.func(a:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/histograms.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/chararray.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/twodim_base.pyi----------------------------------------
numpy.typing.tests.data.fail.twodim_base.func1(ar:npt.NDArray[Any],a:int)->npt.NDArray[np.str_]
numpy.typing.tests.data.fail.twodim_base.func2(ar:npt.NDArray[Any],a:float)->float


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/ufuncs.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/scalars.pyi----------------------------------------
numpy.typing.tests.data.fail.scalars.A
numpy.typing.tests.data.fail.scalars.A.__float__(self)
numpy.typing.tests.data.fail.scalars.func(a:np.float32)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/ufunclike.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/comparisons.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/array_pad.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/rec.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/char.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/array_constructors.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/einsumfunc.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/strings.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/nditer.pyi----------------------------------------
numpy.typing.tests.data.fail.nditer.Test(np.nditer)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/datasource.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/arithmetic.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/random.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/ndarray.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/fromnumeric.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/constants.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/bitwise_ops.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/array_like.pyi----------------------------------------
numpy.typing.tests.data.fail.array_like.A


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/memmap.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/numerictypes.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/type_check.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/lib_version.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/lib_function_base.pyi----------------------------------------
numpy.typing.tests.data.fail.lib_function_base.func(a:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/dtype.pyi----------------------------------------
numpy.typing.tests.data.fail.dtype.Test1
numpy.typing.tests.data.fail.dtype.Test2


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/linalg.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/false_positives.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/arrayprint.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/nested_sequence.pyi----------------------------------------
numpy.typing.tests.data.fail.nested_sequence.func(a:_NestedSequence[int])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/modules.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/npyio.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/shape_base.pyi----------------------------------------
numpy.typing.tests.data.fail.shape_base.DTypeLike


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/flatiter.pyi----------------------------------------
numpy.typing.tests.data.fail.flatiter.Index
numpy.typing.tests.data.fail.flatiter.Index.__index__(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/testing.pyi----------------------------------------
numpy.typing.tests.data.fail.testing.func()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/stride_tricks.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/ufunc_config.pyi----------------------------------------
numpy.typing.tests.data.fail.ufunc_config.Write1
numpy.typing.tests.data.fail.ufunc_config.Write1.write1(self,a:str)->None
numpy.typing.tests.data.fail.ufunc_config.Write2
numpy.typing.tests.data.fail.ufunc_config.Write2.write(self,a:str,b:str)->None
numpy.typing.tests.data.fail.ufunc_config.Write3
numpy.typing.tests.data.fail.ufunc_config.Write3.write(self,*,a:str)->None
numpy.typing.tests.data.fail.ufunc_config.func1(a:str,b:int,c:float)->None
numpy.typing.tests.data.fail.ufunc_config.func2(a:str,*,b:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/arrayterator.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/fail/ndarray_misc.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/lib_polynomial.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/warnings_and_errors.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/index_tricks.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/lib_utils.pyi----------------------------------------
numpy.typing.tests.data.reveal.lib_utils.func(a:int)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/multiarray.pyi----------------------------------------
numpy.typing.tests.data.reveal.multiarray.SubClass(npt.NDArray[_SCT])
numpy.typing.tests.data.reveal.multiarray.func(a:int)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/histograms.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/chararray.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/twodim_base.pyi----------------------------------------
numpy.typing.tests.data.reveal.twodim_base.func1(ar:npt.NDArray[_SCT],a:int)->npt.NDArray[_SCT]
numpy.typing.tests.data.reveal.twodim_base.func2(ar:npt.NDArray[np.number[Any]],a:str)->npt.NDArray[np.float64]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ufuncs.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/scalars.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ufunclike.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/comparisons.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/arraypad.pyi----------------------------------------
numpy.typing.tests.data.reveal.arraypad.mode_func(ar:npt.NDArray[np.number[Any]],width:tuple[int,int],iaxis:SupportsIndex,kwargs:Mapping[str,Any])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/getlimits.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ndarray_shape_manipulation.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/rec.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/numeric.pyi----------------------------------------
numpy.typing.tests.data.reveal.numeric.SubClass(npt.NDArray[np.int64])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/char.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/array_constructors.pyi----------------------------------------
numpy.typing.tests.data.reveal.array_constructors.SubClass(npt.NDArray[_SCT])
numpy.typing.tests.data.reveal.array_constructors.func(i:int,j:int,**kwargs:Any)->SubClass[np.float64]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/einsumfunc.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/strings.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/nditer.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/datasource.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/fft.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/nbit_base_example.pyi----------------------------------------
numpy.typing.tests.data.reveal.nbit_base_example.add(a:np.floating[T1],b:np.integer[T2])->np.floating[T1 | T2]


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ndarray_conversion.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/arithmetic.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/random.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/emath.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/fromnumeric.pyi----------------------------------------
numpy.typing.tests.data.reveal.fromnumeric.NDArraySubclass(npt.NDArray[np.complex128])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/constants.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/bitwise_ops.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/memmap.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/numerictypes.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/type_check.pyi----------------------------------------
numpy.typing.tests.data.reveal.type_check.ImagObj
numpy.typing.tests.data.reveal.type_check.RealObj


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/lib_version.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/lib_function_base.pyi----------------------------------------
numpy.typing.tests.data.reveal.lib_function_base.func(*args:Any,**kwargs:Any)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/dtype.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/linalg.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/false_positives.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/arrayprint.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/nested_sequence.pyi----------------------------------------
numpy.typing.tests.data.reveal.nested_sequence.func(a:_NestedSequence[int])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/modules.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/npyio.pyi----------------------------------------
numpy.typing.tests.data.reveal.npyio.BytesReader
numpy.typing.tests.data.reveal.npyio.BytesReader.read(self,n:int=...)->bytes
numpy.typing.tests.data.reveal.npyio.BytesReader.seek(self,offset:int,whence:int=...)->int
numpy.typing.tests.data.reveal.npyio.BytesWriter
numpy.typing.tests.data.reveal.npyio.BytesWriter.write(self,data:bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/shape_base.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/flatiter.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/testing.pyi----------------------------------------
numpy.typing.tests.data.reveal.testing.Test
numpy.typing.tests.data.reveal.testing.decorate(a:FT)->FT
numpy.typing.tests.data.reveal.testing.func()->int
numpy.typing.tests.data.reveal.testing.func2(x:npt.NDArray[np.number[Any]],y:npt.NDArray[np.number[Any]])->npt.NDArray[np.bool]
numpy.typing.tests.data.reveal.testing.func3(a:int)->bool
numpy.typing.tests.data.reveal.testing.func4(a:int,b:str)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/stride_tricks.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ufunc_config.pyi----------------------------------------
numpy.typing.tests.data.reveal.ufunc_config.SupportsWrite(Protocol)
numpy.typing.tests.data.reveal.ufunc_config.SupportsWrite.write(self,s:str,/)->object
numpy.typing.tests.data.reveal.ufunc_config.Write
numpy.typing.tests.data.reveal.ufunc_config.Write.write(self,value:str)->None
numpy.typing.tests.data.reveal.ufunc_config.func(a:str,b:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/arrayterator.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ndarray_misc.pyi----------------------------------------
numpy.typing.tests.data.reveal.ndarray_misc.SubClass(npt.NDArray[np.object_])


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/arraysetops.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/ctypeslib.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/matrix.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/reveal/mod.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/typing/tests/data/misc/extended_precision.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/hermite_e.py----------------------------------------
A:numpy.polynomial.hermite_e.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite_e.res->hermeadd(hermemulx(res), pol[i])
A:numpy.polynomial.hermite_e.[c]->pu.as_series([c])
A:numpy.polynomial.hermite_e.n->len(c)
A:numpy.polynomial.hermite_e.c0->hermesub(c[-i] * xs, c1 * (nd - 1))
A:numpy.polynomial.hermite_e.c1->hermeadd(tmp, hermemulx(c1))
A:numpy.polynomial.hermite_e.hermedomain->numpy.array([-1.0, 1.0])
A:numpy.polynomial.hermite_e.hermezero->numpy.array([0])
A:numpy.polynomial.hermite_e.hermeone->numpy.array([1])
A:numpy.polynomial.hermite_e.hermex->numpy.array([0, 1])
A:numpy.polynomial.hermite_e.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.hermite_e.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite_e.nd->float(n)
A:numpy.polynomial.hermite_e.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.hermite_e.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.hermite_e.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.hermite_e.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.hermite_e.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.hermite_e.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite_e.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite_e.scl->numpy.hstack((1.0, 1.0 / np.sqrt(np.arange(n - 1, 0, -1))))
A:numpy.polynomial.hermite_e.top[...]->numpy.sqrt(np.arange(1, n))
A:numpy.polynomial.hermite_e.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite_e.m->hermecompanion(c)
A:numpy.polynomial.hermite_e.dy->_normed_hermite_e_n(x, ideg)
A:numpy.polynomial.hermite_e.fm->_normed_hermite_e_n(x, ideg - 1)
A:numpy.polynomial.hermite_e.w->numpy.exp(-0.5 * x ** 2)
A:numpy.polynomial.hermite_e._add->staticmethod(hermeadd)
A:numpy.polynomial.hermite_e._sub->staticmethod(hermesub)
A:numpy.polynomial.hermite_e._mul->staticmethod(hermemul)
A:numpy.polynomial.hermite_e._div->staticmethod(hermediv)
A:numpy.polynomial.hermite_e._pow->staticmethod(hermepow)
A:numpy.polynomial.hermite_e._val->staticmethod(hermeval)
A:numpy.polynomial.hermite_e._int->staticmethod(hermeint)
A:numpy.polynomial.hermite_e._der->staticmethod(hermeder)
A:numpy.polynomial.hermite_e._fit->staticmethod(hermefit)
A:numpy.polynomial.hermite_e._line->staticmethod(hermeline)
A:numpy.polynomial.hermite_e._roots->staticmethod(hermeroots)
A:numpy.polynomial.hermite_e._fromroots->staticmethod(hermefromroots)
A:numpy.polynomial.hermite_e.domain->numpy.array(hermedomain)
A:numpy.polynomial.hermite_e.window->numpy.array(hermedomain)
numpy.polynomial.HermiteE(ABCPolyBase)
numpy.polynomial.hermite_e.HermiteE(ABCPolyBase)
numpy.polynomial.hermite_e._normed_hermite_e_n(x,n)
numpy.polynomial.hermite_e.herme2poly(c)
numpy.polynomial.hermite_e.hermeadd(c1,c2)
numpy.polynomial.hermite_e.hermecompanion(c)
numpy.polynomial.hermite_e.hermeder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite_e.hermediv(c1,c2)
numpy.polynomial.hermite_e.hermefit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.hermite_e.hermegauss(deg)
numpy.polynomial.hermite_e.hermegrid2d(x,y,c)
numpy.polynomial.hermite_e.hermegrid3d(x,y,z,c)
numpy.polynomial.hermite_e.hermeint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite_e.hermeline(off,scl)
numpy.polynomial.hermite_e.hermemul(c1,c2)
numpy.polynomial.hermite_e.hermemulx(c)
numpy.polynomial.hermite_e.hermepow(c,pow,maxpower=16)
numpy.polynomial.hermite_e.hermeroots(c)
numpy.polynomial.hermite_e.hermesub(c1,c2)
numpy.polynomial.hermite_e.hermeval(x,c,tensor=True)
numpy.polynomial.hermite_e.hermeval2d(x,y,c)
numpy.polynomial.hermite_e.hermeval3d(x,y,z,c)
numpy.polynomial.hermite_e.hermevander(x,deg)
numpy.polynomial.hermite_e.hermevander2d(x,y,deg)
numpy.polynomial.hermite_e.hermevander3d(x,y,z,deg)
numpy.polynomial.hermite_e.hermeweight(x)
numpy.polynomial.hermite_e.poly2herme(pol)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/hermite_e.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/legendre.py----------------------------------------
A:numpy.polynomial.legendre.[pol]->pu.as_series([pol])
A:numpy.polynomial.legendre.res->legadd(legmulx(res), pol[i])
A:numpy.polynomial.legendre.[c]->pu.as_series([c])
A:numpy.polynomial.legendre.n->len(c)
A:numpy.polynomial.legendre.c0->legsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.legendre.c1->legadd(tmp, legmulx(c1) * (2 * nd - 1) / nd)
A:numpy.polynomial.legendre.legdomain->numpy.array([-1.0, 1.0])
A:numpy.polynomial.legendre.legzero->numpy.array([0])
A:numpy.polynomial.legendre.legone->numpy.array([1])
A:numpy.polynomial.legendre.legx->numpy.array([0, 1])
A:numpy.polynomial.legendre.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.legendre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.legendre.nd->len(c)
A:numpy.polynomial.legendre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.legendre.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.legendre.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.legendre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.legendre.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.legendre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.legendre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.legendre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.legendre.m->legcompanion(c)
A:numpy.polynomial.legendre.dy->legval(x, c)
A:numpy.polynomial.legendre.df->legval(x, legder(c))
A:numpy.polynomial.legendre.fm->legval(x, c[1:])
A:numpy.polynomial.legendre._add->staticmethod(legadd)
A:numpy.polynomial.legendre._sub->staticmethod(legsub)
A:numpy.polynomial.legendre._mul->staticmethod(legmul)
A:numpy.polynomial.legendre._div->staticmethod(legdiv)
A:numpy.polynomial.legendre._pow->staticmethod(legpow)
A:numpy.polynomial.legendre._val->staticmethod(legval)
A:numpy.polynomial.legendre._int->staticmethod(legint)
A:numpy.polynomial.legendre._der->staticmethod(legder)
A:numpy.polynomial.legendre._fit->staticmethod(legfit)
A:numpy.polynomial.legendre._line->staticmethod(legline)
A:numpy.polynomial.legendre._roots->staticmethod(legroots)
A:numpy.polynomial.legendre._fromroots->staticmethod(legfromroots)
A:numpy.polynomial.legendre.domain->numpy.array(legdomain)
A:numpy.polynomial.legendre.window->numpy.array(legdomain)
numpy.polynomial.Legendre(ABCPolyBase)
numpy.polynomial.legendre.Legendre(ABCPolyBase)
numpy.polynomial.legendre.leg2poly(c)
numpy.polynomial.legendre.legadd(c1,c2)
numpy.polynomial.legendre.legcompanion(c)
numpy.polynomial.legendre.legder(c,m=1,scl=1,axis=0)
numpy.polynomial.legendre.legdiv(c1,c2)
numpy.polynomial.legendre.legfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.legendre.leggauss(deg)
numpy.polynomial.legendre.leggrid2d(x,y,c)
numpy.polynomial.legendre.leggrid3d(x,y,z,c)
numpy.polynomial.legendre.legint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.legendre.legline(off,scl)
numpy.polynomial.legendre.legmul(c1,c2)
numpy.polynomial.legendre.legmulx(c)
numpy.polynomial.legendre.legpow(c,pow,maxpower=16)
numpy.polynomial.legendre.legroots(c)
numpy.polynomial.legendre.legsub(c1,c2)
numpy.polynomial.legendre.legval(x,c,tensor=True)
numpy.polynomial.legendre.legval2d(x,y,c)
numpy.polynomial.legendre.legval3d(x,y,z,c)
numpy.polynomial.legendre.legvander(x,deg)
numpy.polynomial.legendre.legvander2d(x,y,deg)
numpy.polynomial.legendre.legvander3d(x,y,z,deg)
numpy.polynomial.legendre.legweight(x)
numpy.polynomial.legendre.poly2leg(pol)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/legendre.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/__init__.py----------------------------------------
A:numpy.polynomial.__init__.test->PytestTester(__name__)
numpy.polynomial.__init__.set_default_printstyle(style)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/laguerre.py----------------------------------------
A:numpy.polynomial.laguerre.[pol]->pu.as_series([pol])
A:numpy.polynomial.laguerre.res->lagadd(lagmulx(res), p)
A:numpy.polynomial.laguerre.[c]->pu.as_series([c])
A:numpy.polynomial.laguerre.n->len(c)
A:numpy.polynomial.laguerre.c0->lagsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.laguerre.c1->lagadd(tmp, lagsub((2 * nd - 1) * c1, lagmulx(c1)) / nd)
A:numpy.polynomial.laguerre.lagdomain->numpy.array([0.0, 1.0])
A:numpy.polynomial.laguerre.lagzero->numpy.array([0])
A:numpy.polynomial.laguerre.lagone->numpy.array([1])
A:numpy.polynomial.laguerre.lagx->numpy.array([1, -1])
A:numpy.polynomial.laguerre.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.laguerre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.laguerre.nd->len(c)
A:numpy.polynomial.laguerre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.laguerre.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.laguerre.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.laguerre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.laguerre.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.laguerre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.laguerre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.laguerre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.laguerre.m->lagcompanion(c)
A:numpy.polynomial.laguerre.dy->lagval(x, c)
A:numpy.polynomial.laguerre.df->lagval(x, lagder(c))
A:numpy.polynomial.laguerre.fm->lagval(x, c[1:])
A:numpy.polynomial.laguerre.w->numpy.exp(-x)
A:numpy.polynomial.laguerre._add->staticmethod(lagadd)
A:numpy.polynomial.laguerre._sub->staticmethod(lagsub)
A:numpy.polynomial.laguerre._mul->staticmethod(lagmul)
A:numpy.polynomial.laguerre._div->staticmethod(lagdiv)
A:numpy.polynomial.laguerre._pow->staticmethod(lagpow)
A:numpy.polynomial.laguerre._val->staticmethod(lagval)
A:numpy.polynomial.laguerre._int->staticmethod(lagint)
A:numpy.polynomial.laguerre._der->staticmethod(lagder)
A:numpy.polynomial.laguerre._fit->staticmethod(lagfit)
A:numpy.polynomial.laguerre._line->staticmethod(lagline)
A:numpy.polynomial.laguerre._roots->staticmethod(lagroots)
A:numpy.polynomial.laguerre._fromroots->staticmethod(lagfromroots)
A:numpy.polynomial.laguerre.domain->numpy.array(lagdomain)
A:numpy.polynomial.laguerre.window->numpy.array(lagdomain)
numpy.polynomial.Laguerre(ABCPolyBase)
numpy.polynomial.laguerre.Laguerre(ABCPolyBase)
numpy.polynomial.laguerre.lag2poly(c)
numpy.polynomial.laguerre.lagadd(c1,c2)
numpy.polynomial.laguerre.lagcompanion(c)
numpy.polynomial.laguerre.lagder(c,m=1,scl=1,axis=0)
numpy.polynomial.laguerre.lagdiv(c1,c2)
numpy.polynomial.laguerre.lagfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.laguerre.laggauss(deg)
numpy.polynomial.laguerre.laggrid2d(x,y,c)
numpy.polynomial.laguerre.laggrid3d(x,y,z,c)
numpy.polynomial.laguerre.lagint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.laguerre.lagline(off,scl)
numpy.polynomial.laguerre.lagmul(c1,c2)
numpy.polynomial.laguerre.lagmulx(c)
numpy.polynomial.laguerre.lagpow(c,pow,maxpower=16)
numpy.polynomial.laguerre.lagroots(c)
numpy.polynomial.laguerre.lagsub(c1,c2)
numpy.polynomial.laguerre.lagval(x,c,tensor=True)
numpy.polynomial.laguerre.lagval2d(x,y,c)
numpy.polynomial.laguerre.lagval3d(x,y,z,c)
numpy.polynomial.laguerre.lagvander(x,deg)
numpy.polynomial.laguerre.lagvander2d(x,y,deg)
numpy.polynomial.laguerre.lagvander3d(x,y,z,deg)
numpy.polynomial.laguerre.lagweight(x)
numpy.polynomial.laguerre.poly2lag(pol)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/laguerre.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/polynomial.py----------------------------------------
A:numpy.polynomial.polynomial.polydomain->numpy.array([-1.0, 1.0])
A:numpy.polynomial.polynomial.polyzero->numpy.array([0])
A:numpy.polynomial.polynomial.polyone->numpy.array([1])
A:numpy.polynomial.polynomial.polyx->numpy.array([0, 1])
A:numpy.polynomial.polynomial.[c]->pu.as_series([c])
A:numpy.polynomial.polynomial.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.polynomial.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.polynomial.ret->numpy.convolve(c1, c2)
A:numpy.polynomial.polynomial.lc1->len(c1)
A:numpy.polynomial.polynomial.lc2->len(c2)
A:numpy.polynomial.polynomial.c->c.reshape(c.shape + (1,) * x.ndim).reshape(c.shape + (1,) * x.ndim)
A:numpy.polynomial.polynomial.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.polynomial.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.polynomial.n->len(c)
A:numpy.polynomial.polynomial.der->numpy.empty((n,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.x->numpy.asarray(x)
A:numpy.polynomial.polynomial.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.polynomial.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.polynomial.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.polynomial.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.polynomial._add->staticmethod(polyadd)
A:numpy.polynomial.polynomial._sub->staticmethod(polysub)
A:numpy.polynomial.polynomial._mul->staticmethod(polymul)
A:numpy.polynomial.polynomial._div->staticmethod(polydiv)
A:numpy.polynomial.polynomial._pow->staticmethod(polypow)
A:numpy.polynomial.polynomial._val->staticmethod(polyval)
A:numpy.polynomial.polynomial._int->staticmethod(polyint)
A:numpy.polynomial.polynomial._der->staticmethod(polyder)
A:numpy.polynomial.polynomial._fit->staticmethod(polyfit)
A:numpy.polynomial.polynomial._line->staticmethod(polyline)
A:numpy.polynomial.polynomial._roots->staticmethod(polyroots)
A:numpy.polynomial.polynomial._fromroots->staticmethod(polyfromroots)
A:numpy.polynomial.polynomial.domain->numpy.array(polydomain)
A:numpy.polynomial.polynomial.window->numpy.array(polydomain)
numpy.polynomial.Polynomial(ABCPolyBase)
numpy.polynomial.Polynomial._repr_latex_term(i,arg_str,needs_parens)
numpy.polynomial.Polynomial._str_term_ascii(i,arg_str)
numpy.polynomial.Polynomial._str_term_unicode(cls,i,arg_str)
numpy.polynomial.polynomial.Polynomial(ABCPolyBase)
numpy.polynomial.polynomial.Polynomial._repr_latex_term(i,arg_str,needs_parens)
numpy.polynomial.polynomial.Polynomial._str_term_ascii(i,arg_str)
numpy.polynomial.polynomial.Polynomial._str_term_unicode(cls,i,arg_str)
numpy.polynomial.polynomial.polyadd(c1,c2)
numpy.polynomial.polynomial.polycompanion(c)
numpy.polynomial.polynomial.polyder(c,m=1,scl=1,axis=0)
numpy.polynomial.polynomial.polydiv(c1,c2)
numpy.polynomial.polynomial.polyfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.polynomial.polyfromroots(roots)
numpy.polynomial.polynomial.polygrid2d(x,y,c)
numpy.polynomial.polynomial.polygrid3d(x,y,z,c)
numpy.polynomial.polynomial.polyint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.polynomial.polyline(off,scl)
numpy.polynomial.polynomial.polymul(c1,c2)
numpy.polynomial.polynomial.polymulx(c)
numpy.polynomial.polynomial.polypow(c,pow,maxpower=None)
numpy.polynomial.polynomial.polyroots(c)
numpy.polynomial.polynomial.polysub(c1,c2)
numpy.polynomial.polynomial.polyval(x,c,tensor=True)
numpy.polynomial.polynomial.polyval2d(x,y,c)
numpy.polynomial.polynomial.polyval3d(x,y,z,c)
numpy.polynomial.polynomial.polyvalfromroots(x,r,tensor=True)
numpy.polynomial.polynomial.polyvander(x,deg)
numpy.polynomial.polynomial.polyvander2d(x,y,deg)
numpy.polynomial.polynomial.polyvander3d(x,y,z,deg)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/polynomial.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/hermite.py----------------------------------------
A:numpy.polynomial.hermite.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite.res->hermadd(hermmulx(res), pol[i])
A:numpy.polynomial.hermite.[c]->pu.as_series([c])
A:numpy.polynomial.hermite.n->len(c)
A:numpy.polynomial.hermite.c0->hermsub(c[-i] * xs, c1 * (2 * (nd - 1)))
A:numpy.polynomial.hermite.c1->hermadd(tmp, hermmulx(c1) * 2)
A:numpy.polynomial.hermite.hermdomain->numpy.array([-1.0, 1.0])
A:numpy.polynomial.hermite.hermzero->numpy.array([0])
A:numpy.polynomial.hermite.hermone->numpy.array([1])
A:numpy.polynomial.hermite.hermx->numpy.array([0, 1 / 2])
A:numpy.polynomial.hermite.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.hermite.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite.nd->float(n)
A:numpy.polynomial.hermite.c->numpy.array([0] * deg + [1], dtype=np.float64)
A:numpy.polynomial.hermite.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.hermite.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.hermite.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.hermite.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.hermite.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite.scl->numpy.hstack((1.0, 1.0 / np.sqrt(2.0 * np.arange(n - 1, 0, -1))))
A:numpy.polynomial.hermite.top[...]->numpy.sqrt(0.5 * np.arange(1, n))
A:numpy.polynomial.hermite.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite.m->hermcompanion(c)
A:numpy.polynomial.hermite.dy->_normed_hermite_n(x, ideg)
A:numpy.polynomial.hermite.fm->_normed_hermite_n(x, ideg - 1)
A:numpy.polynomial.hermite.w->numpy.exp(-x ** 2)
A:numpy.polynomial.hermite._add->staticmethod(hermadd)
A:numpy.polynomial.hermite._sub->staticmethod(hermsub)
A:numpy.polynomial.hermite._mul->staticmethod(hermmul)
A:numpy.polynomial.hermite._div->staticmethod(hermdiv)
A:numpy.polynomial.hermite._pow->staticmethod(hermpow)
A:numpy.polynomial.hermite._val->staticmethod(hermval)
A:numpy.polynomial.hermite._int->staticmethod(hermint)
A:numpy.polynomial.hermite._der->staticmethod(hermder)
A:numpy.polynomial.hermite._fit->staticmethod(hermfit)
A:numpy.polynomial.hermite._line->staticmethod(hermline)
A:numpy.polynomial.hermite._roots->staticmethod(hermroots)
A:numpy.polynomial.hermite._fromroots->staticmethod(hermfromroots)
A:numpy.polynomial.hermite.domain->numpy.array(hermdomain)
A:numpy.polynomial.hermite.window->numpy.array(hermdomain)
numpy.polynomial.Hermite(ABCPolyBase)
numpy.polynomial.hermite.Hermite(ABCPolyBase)
numpy.polynomial.hermite._normed_hermite_n(x,n)
numpy.polynomial.hermite.herm2poly(c)
numpy.polynomial.hermite.hermadd(c1,c2)
numpy.polynomial.hermite.hermcompanion(c)
numpy.polynomial.hermite.hermder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite.hermdiv(c1,c2)
numpy.polynomial.hermite.hermfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.hermite.hermgauss(deg)
numpy.polynomial.hermite.hermgrid2d(x,y,c)
numpy.polynomial.hermite.hermgrid3d(x,y,z,c)
numpy.polynomial.hermite.hermint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite.hermline(off,scl)
numpy.polynomial.hermite.hermmul(c1,c2)
numpy.polynomial.hermite.hermmulx(c)
numpy.polynomial.hermite.hermpow(c,pow,maxpower=16)
numpy.polynomial.hermite.hermroots(c)
numpy.polynomial.hermite.hermsub(c1,c2)
numpy.polynomial.hermite.hermval(x,c,tensor=True)
numpy.polynomial.hermite.hermval2d(x,y,c)
numpy.polynomial.hermite.hermval3d(x,y,z,c)
numpy.polynomial.hermite.hermvander(x,deg)
numpy.polynomial.hermite.hermvander2d(x,y,deg)
numpy.polynomial.hermite.hermvander3d(x,y,z,deg)
numpy.polynomial.hermite.hermweight(x)
numpy.polynomial.hermite.poly2herm(pol)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/hermite.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/polyutils.py----------------------------------------
A:numpy.polynomial.polyutils.tmp->numpy.empty(len(a), dtype=np.dtype(object))
A:numpy.polynomial.polyutils.dtype->numpy.common_type(*arrays)
A:numpy.polynomial.polyutils.[c]->as_series([c])
A:numpy.polynomial.polyutils.[ind]->numpy.nonzero(np.abs(c) > tol)
A:numpy.polynomial.polyutils.[x]->as_series([x], trim=False)
A:numpy.polynomial.polyutils.x->numpy.asanyarray(x)
A:numpy.polynomial.polyutils.(off, scl)->mapparms(old, new)
A:numpy.polynomial.polyutils.sl[i]->slice(None)
A:numpy.polynomial.polyutils.n_dims->len(vander_fs)
A:numpy.polynomial.polyutils.points->tuple(np.asarray(tuple(points)) + 0.0)
A:numpy.polynomial.polyutils.v->_vander_nd(vander_fs, points, degrees)
A:numpy.polynomial.polyutils.[roots]->as_series([roots], trim=False)
A:numpy.polynomial.polyutils.n->len(p)
A:numpy.polynomial.polyutils.(m, r)->divmod(n, 2)
A:numpy.polynomial.polyutils.tmp[0]->mul_f(tmp[0], p[-1])
A:numpy.polynomial.polyutils.it->iter(args)
A:numpy.polynomial.polyutils.x0->next(it)
A:numpy.polynomial.polyutils.c->val_f(xi, c)
A:numpy.polynomial.polyutils.[c1, c2]->as_series([c1, c2])
A:numpy.polynomial.polyutils.lc1->len(c1)
A:numpy.polynomial.polyutils.lc2->len(c2)
A:numpy.polynomial.polyutils.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.polyutils.p->mul_f([0] * i + [1], c2)
A:numpy.polynomial.polyutils.deg->numpy.sort(deg)
A:numpy.polynomial.polyutils.van->vander_f(x, lmax)
A:numpy.polynomial.polyutils.order->len(deg)
A:numpy.polynomial.polyutils.scl->numpy.sqrt(np.square(lhs).sum(1))
A:numpy.polynomial.polyutils.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.polyutils.cc->numpy.zeros(lmax + 1, dtype=c.dtype)
A:numpy.polynomial.polyutils.power->int(pow)
A:numpy.polynomial.polyutils.prd->mul_f(prd, c)
A:numpy.polynomial.polyutils.opts->numpy.get_printoptions()
A:numpy.polynomial.polyutils.a->numpy.abs(x)
A:numpy.polynomial.polyutils.s->dragon4_positional(x, precision=opts['precision'], fractional=True, unique=unique, trim=trim, sign=opts['sign'] == '+')
numpy.polynomial.polyutils._add(c1,c2)
numpy.polynomial.polyutils._as_int(x,desc)
numpy.polynomial.polyutils._div(mul_f,c1,c2)
numpy.polynomial.polyutils._fit(vander_f,x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.polyutils._fromroots(line_f,mul_f,roots)
numpy.polynomial.polyutils._gridnd(val_f,c,*args)
numpy.polynomial.polyutils._nth_slice(i,ndim)
numpy.polynomial.polyutils._pow(mul_f,c,pow,maxpower)
numpy.polynomial.polyutils._sub(c1,c2)
numpy.polynomial.polyutils._valnd(val_f,c,*args)
numpy.polynomial.polyutils._vander_nd(vander_fs,points,degrees)
numpy.polynomial.polyutils._vander_nd_flat(vander_fs,points,degrees)
numpy.polynomial.polyutils.as_series(alist,trim=True)
numpy.polynomial.polyutils.format_float(x,parens=False)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x,old,new)
numpy.polynomial.polyutils.mapparms(old,new)
numpy.polynomial.polyutils.trimcoef(c,tol=0)
numpy.polynomial.polyutils.trimseq(seq)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/polyutils.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/chebyshev.py----------------------------------------
A:numpy.polynomial.chebyshev.zs->_cseries_to_zseries(c)
A:numpy.polynomial.chebyshev.c->numpy.dot(m.T, yfunc)
A:numpy.polynomial.chebyshev.z1->_cseries_to_zseries(c1)
A:numpy.polynomial.chebyshev.z2->_cseries_to_zseries(c2)
A:numpy.polynomial.chebyshev.lc1->len(c1)
A:numpy.polynomial.chebyshev.lc2->len(c2)
A:numpy.polynomial.chebyshev.quo->pu.trimseq(_zseries_to_cseries(quo))
A:numpy.polynomial.chebyshev.rem->pu.trimseq(_zseries_to_cseries(rem))
A:numpy.polynomial.chebyshev.ns->numpy.array([-1, 0, 1], dtype=zs.dtype)
A:numpy.polynomial.chebyshev.(d, r)->_zseries_div(zs, ns)
A:numpy.polynomial.chebyshev.[pol]->pu.as_series([pol])
A:numpy.polynomial.chebyshev.res->chebadd(chebmulx(res), pol[i])
A:numpy.polynomial.chebyshev.[c]->pu.as_series([c])
A:numpy.polynomial.chebyshev.n->len(c)
A:numpy.polynomial.chebyshev.c0->polysub(c[i - 2], c1)
A:numpy.polynomial.chebyshev.c1->polyadd(tmp, polymulx(c1) * 2)
A:numpy.polynomial.chebyshev.chebdomain->numpy.array([-1.0, 1.0])
A:numpy.polynomial.chebyshev.chebzero->numpy.array([0])
A:numpy.polynomial.chebyshev.chebone->numpy.array([1])
A:numpy.polynomial.chebyshev.chebx->numpy.array([0, 1])
A:numpy.polynomial.chebyshev.prd->numpy.convolve(prd, zs)
A:numpy.polynomial.chebyshev.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.chebyshev.ret->_zseries_to_cseries(prd)
A:numpy.polynomial.chebyshev.(quo, rem)->_zseries_div(z1, z2)
A:numpy.polynomial.chebyshev.power->int(pow)
A:numpy.polynomial.chebyshev.cnt->pu._as_int(m, 'the order of integration')
A:numpy.polynomial.chebyshev.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.chebyshev.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.x->numpy.linspace(-np.pi, 0, _npts)
A:numpy.polynomial.chebyshev.ideg->pu._as_int(deg, 'deg')
A:numpy.polynomial.chebyshev.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.chebyshev.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.chebyshev.scl->numpy.array([1.0] + [np.sqrt(0.5)] * (n - 1))
A:numpy.polynomial.chebyshev.top[0]->numpy.sqrt(0.5)
A:numpy.polynomial.chebyshev.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.chebyshev.deg->numpy.asarray(deg)
A:numpy.polynomial.chebyshev.xcheb->chebpts1(order)
A:numpy.polynomial.chebyshev.yfunc->func(xcheb, *args)
A:numpy.polynomial.chebyshev.m->chebvander(xcheb, deg)
A:numpy.polynomial.chebyshev._npts->int(npts)
A:numpy.polynomial.chebyshev._add->staticmethod(chebadd)
A:numpy.polynomial.chebyshev._sub->staticmethod(chebsub)
A:numpy.polynomial.chebyshev._mul->staticmethod(chebmul)
A:numpy.polynomial.chebyshev._div->staticmethod(chebdiv)
A:numpy.polynomial.chebyshev._pow->staticmethod(chebpow)
A:numpy.polynomial.chebyshev._val->staticmethod(chebval)
A:numpy.polynomial.chebyshev._int->staticmethod(chebint)
A:numpy.polynomial.chebyshev._der->staticmethod(chebder)
A:numpy.polynomial.chebyshev._fit->staticmethod(chebfit)
A:numpy.polynomial.chebyshev._line->staticmethod(chebline)
A:numpy.polynomial.chebyshev._roots->staticmethod(chebroots)
A:numpy.polynomial.chebyshev._fromroots->staticmethod(chebfromroots)
A:numpy.polynomial.chebyshev.coef->chebinterpolate(xfunc, deg)
A:numpy.polynomial.chebyshev.domain->numpy.array(chebdomain)
A:numpy.polynomial.chebyshev.window->numpy.array(chebdomain)
numpy.polynomial.Chebyshev(ABCPolyBase)
numpy.polynomial.Chebyshev.interpolate(cls,func,deg,domain=None,args=())
numpy.polynomial.chebyshev.Chebyshev(ABCPolyBase)
numpy.polynomial.chebyshev.Chebyshev.interpolate(cls,func,deg,domain=None,args=())
numpy.polynomial.chebyshev._cseries_to_zseries(c)
numpy.polynomial.chebyshev._zseries_der(zs)
numpy.polynomial.chebyshev._zseries_div(z1,z2)
numpy.polynomial.chebyshev._zseries_int(zs)
numpy.polynomial.chebyshev._zseries_mul(z1,z2)
numpy.polynomial.chebyshev._zseries_to_cseries(zs)
numpy.polynomial.chebyshev.cheb2poly(c)
numpy.polynomial.chebyshev.chebadd(c1,c2)
numpy.polynomial.chebyshev.chebcompanion(c)
numpy.polynomial.chebyshev.chebder(c,m=1,scl=1,axis=0)
numpy.polynomial.chebyshev.chebdiv(c1,c2)
numpy.polynomial.chebyshev.chebfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.chebyshev.chebfromroots(roots)
numpy.polynomial.chebyshev.chebgauss(deg)
numpy.polynomial.chebyshev.chebgrid2d(x,y,c)
numpy.polynomial.chebyshev.chebgrid3d(x,y,z,c)
numpy.polynomial.chebyshev.chebint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.chebyshev.chebinterpolate(func,deg,args=())
numpy.polynomial.chebyshev.chebline(off,scl)
numpy.polynomial.chebyshev.chebmul(c1,c2)
numpy.polynomial.chebyshev.chebmulx(c)
numpy.polynomial.chebyshev.chebpow(c,pow,maxpower=16)
numpy.polynomial.chebyshev.chebpts1(npts)
numpy.polynomial.chebyshev.chebpts2(npts)
numpy.polynomial.chebyshev.chebroots(c)
numpy.polynomial.chebyshev.chebsub(c1,c2)
numpy.polynomial.chebyshev.chebval(x,c,tensor=True)
numpy.polynomial.chebyshev.chebval2d(x,y,c)
numpy.polynomial.chebyshev.chebval3d(x,y,z,c)
numpy.polynomial.chebyshev.chebvander(x,deg)
numpy.polynomial.chebyshev.chebvander2d(x,y,deg)
numpy.polynomial.chebyshev.chebvander3d(x,y,z,deg)
numpy.polynomial.chebyshev.chebweight(x)
numpy.polynomial.chebyshev.poly2cheb(pol)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/chebyshev.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/_polybase.py----------------------------------------
A:numpy.polynomial._polybase._superscript_mapping->str.maketrans({'0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴', '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹'})
A:numpy.polynomial._polybase._subscript_mapping->str.maketrans({'0': '₀', '1': '₁', '2': '₂', '3': '₃', '4': '₄', '5': '₅', '6': '₆', '7': '₇', '8': '₈', '9': '₉'})
A:numpy.polynomial._polybase.[coef]->pu.as_series([coef], trim=False)
A:numpy.polynomial._polybase.[domain]->pu.as_series([domain], trim=False)
A:numpy.polynomial._polybase.[window]->pu.as_series([window], trim=False)
A:numpy.polynomial._polybase.linewidth->numpy.get_printoptions().get('linewidth', 75)
A:numpy.polynomial._polybase.out->pu.format_float(self.coef[0])
A:numpy.polynomial._polybase.(off, scale)->self.mapparms()
A:numpy.polynomial._polybase.(scaled_symbol, needs_parens)->self._format_term(pu.format_float, off, scale)
A:numpy.polynomial._polybase.power->str(i + 1)
A:numpy.polynomial._polybase.next_term->next_term.replace(' ', '\n', 1).replace(' ', '\n', 1)
A:numpy.polynomial._polybase.(term, needs_parens)->self._format_term(self._repr_latex_scalar, off, scale)
A:numpy.polynomial._polybase.term_str->self._repr_latex_term(i, term, needs_parens)
A:numpy.polynomial._polybase.part->mute(part)
A:numpy.polynomial._polybase.body->''.join(parts)
A:numpy.polynomial._polybase.ret->self.__dict__.copy()
A:numpy.polynomial._polybase.ret['coef']->self.coef.copy()
A:numpy.polynomial._polybase.ret['domain']->self.domain.copy()
A:numpy.polynomial._polybase.ret['window']->self.window.copy()
A:numpy.polynomial._polybase.arg->pu.mapdomain(arg, self.domain, self.window)
A:numpy.polynomial._polybase.othercoef->self._get_coefficients(other)
A:numpy.polynomial._polybase.coef->cls._line(off, scl)
A:numpy.polynomial._polybase.res->cls._fit(xnew, y, deg, w=w, rcond=rcond, full=full)
A:numpy.polynomial._polybase.(quo, rem)->self._div(other, self.coef)
A:numpy.polynomial._polybase.quo->self.__class__(quo, self.domain, self.window, self.symbol)
A:numpy.polynomial._polybase.rem->self.__class__(rem, self.domain, self.window, self.symbol)
A:numpy.polynomial._polybase.isize->int(size)
A:numpy.polynomial._polybase.(off, scl)->pu.mapparms(window, domain)
A:numpy.polynomial._polybase.roots->self._roots(self.coef)
A:numpy.polynomial._polybase.x->numpy.linspace(domain[0], domain[1], n)
A:numpy.polynomial._polybase.y->self(x)
A:numpy.polynomial._polybase.domain->pu.getdomain(roots)
A:numpy.polynomial._polybase.xnew->pu.mapdomain(x, domain, window)
A:numpy.polynomial._polybase.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial._polybase.deg->len(roots)
A:numpy.polynomial._polybase.ideg->int(deg)
numpy.polynomial.ABCPolyBase(self,coef,domain=None,window=None,symbol='x')
numpy.polynomial.ABCPolyBase.__add__(self,other)
numpy.polynomial.ABCPolyBase.__divmod__(self,other)
numpy.polynomial.ABCPolyBase.__eq__(self,other)
numpy.polynomial.ABCPolyBase.__floordiv__(self,other)
numpy.polynomial.ABCPolyBase.__format__(self,fmt_str)
numpy.polynomial.ABCPolyBase.__getstate__(self)
numpy.polynomial.ABCPolyBase.__iter__(self)
numpy.polynomial.ABCPolyBase.__len__(self)
numpy.polynomial.ABCPolyBase.__mod__(self,other)
numpy.polynomial.ABCPolyBase.__mul__(self,other)
numpy.polynomial.ABCPolyBase.__ne__(self,other)
numpy.polynomial.ABCPolyBase.__neg__(self)
numpy.polynomial.ABCPolyBase.__pos__(self)
numpy.polynomial.ABCPolyBase.__pow__(self,other)
numpy.polynomial.ABCPolyBase.__radd__(self,other)
numpy.polynomial.ABCPolyBase.__rdiv__(self,other)
numpy.polynomial.ABCPolyBase.__rdivmod__(self,other)
numpy.polynomial.ABCPolyBase.__repr__(self)
numpy.polynomial.ABCPolyBase.__rfloordiv__(self,other)
numpy.polynomial.ABCPolyBase.__rmod__(self,other)
numpy.polynomial.ABCPolyBase.__rmul__(self,other)
numpy.polynomial.ABCPolyBase.__rsub__(self,other)
numpy.polynomial.ABCPolyBase.__rtruediv__(self,other)
numpy.polynomial.ABCPolyBase.__setstate__(self,dict)
numpy.polynomial.ABCPolyBase.__str__(self)
numpy.polynomial.ABCPolyBase.__sub__(self,other)
numpy.polynomial.ABCPolyBase.__truediv__(self,other)
numpy.polynomial.ABCPolyBase._add(c1,c2)
numpy.polynomial.ABCPolyBase._der(c,m,scl)
numpy.polynomial.ABCPolyBase._div(c1,c2)
numpy.polynomial.ABCPolyBase._fit(x,y,deg,rcond,full)
numpy.polynomial.ABCPolyBase._format_term(self,scalar_format:Callable,off:float,scale:float)
numpy.polynomial.ABCPolyBase._fromroots(r)
numpy.polynomial.ABCPolyBase._generate_string(self,term_method)
numpy.polynomial.ABCPolyBase._get_coefficients(self,other)
numpy.polynomial.ABCPolyBase._int(c,m,k,lbnd,scl)
numpy.polynomial.ABCPolyBase._line(off,scl)
numpy.polynomial.ABCPolyBase._mul(c1,c2)
numpy.polynomial.ABCPolyBase._pow(c,pow,maxpower=None)
numpy.polynomial.ABCPolyBase._repr_latex_(self)
numpy.polynomial.ABCPolyBase._repr_latex_scalar(x,parens=False)
numpy.polynomial.ABCPolyBase._repr_latex_term(cls,i,arg_str,needs_parens)
numpy.polynomial.ABCPolyBase._roots(c)
numpy.polynomial.ABCPolyBase._str_term_ascii(cls,i,arg_str)
numpy.polynomial.ABCPolyBase._str_term_unicode(cls,i,arg_str)
numpy.polynomial.ABCPolyBase._sub(c1,c2)
numpy.polynomial.ABCPolyBase._val(x,c)
numpy.polynomial.ABCPolyBase.basis(cls,deg,domain=None,window=None,symbol='x')
numpy.polynomial.ABCPolyBase.basis_name(self)
numpy.polynomial.ABCPolyBase.cast(cls,series,domain=None,window=None)
numpy.polynomial.ABCPolyBase.convert(self,domain=None,kind=None,window=None)
numpy.polynomial.ABCPolyBase.copy(self)
numpy.polynomial.ABCPolyBase.cutdeg(self,deg)
numpy.polynomial.ABCPolyBase.degree(self)
numpy.polynomial.ABCPolyBase.deriv(self,m=1)
numpy.polynomial.ABCPolyBase.domain(self)
numpy.polynomial.ABCPolyBase.fit(cls,x,y,deg,domain=None,rcond=None,full=False,w=None,window=None,symbol='x')
numpy.polynomial.ABCPolyBase.fromroots(cls,roots,domain=[],window=None,symbol='x')
numpy.polynomial.ABCPolyBase.has_samecoef(self,other)
numpy.polynomial.ABCPolyBase.has_samedomain(self,other)
numpy.polynomial.ABCPolyBase.has_sametype(self,other)
numpy.polynomial.ABCPolyBase.has_samewindow(self,other)
numpy.polynomial.ABCPolyBase.identity(cls,domain=None,window=None,symbol='x')
numpy.polynomial.ABCPolyBase.integ(self,m=1,k=[],lbnd=None)
numpy.polynomial.ABCPolyBase.linspace(self,n=100,domain=None)
numpy.polynomial.ABCPolyBase.mapparms(self)
numpy.polynomial.ABCPolyBase.roots(self)
numpy.polynomial.ABCPolyBase.symbol(self)
numpy.polynomial.ABCPolyBase.trim(self,tol=0)
numpy.polynomial.ABCPolyBase.truncate(self,size)
numpy.polynomial.ABCPolyBase.window(self)
numpy.polynomial._polybase.ABCPolyBase(self,coef,domain=None,window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.__add__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__divmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__eq__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__floordiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__format__(self,fmt_str)
numpy.polynomial._polybase.ABCPolyBase.__getstate__(self)
numpy.polynomial._polybase.ABCPolyBase.__init__(self,coef,domain=None,window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.__iter__(self)
numpy.polynomial._polybase.ABCPolyBase.__len__(self)
numpy.polynomial._polybase.ABCPolyBase.__mod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__mul__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__ne__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__neg__(self)
numpy.polynomial._polybase.ABCPolyBase.__pos__(self)
numpy.polynomial._polybase.ABCPolyBase.__pow__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__radd__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rdiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rdivmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__repr__(self)
numpy.polynomial._polybase.ABCPolyBase.__rfloordiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rmul__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rsub__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rtruediv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__setstate__(self,dict)
numpy.polynomial._polybase.ABCPolyBase.__str__(self)
numpy.polynomial._polybase.ABCPolyBase.__sub__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__truediv__(self,other)
numpy.polynomial._polybase.ABCPolyBase._add(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._der(c,m,scl)
numpy.polynomial._polybase.ABCPolyBase._div(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._fit(x,y,deg,rcond,full)
numpy.polynomial._polybase.ABCPolyBase._format_term(self,scalar_format:Callable,off:float,scale:float)
numpy.polynomial._polybase.ABCPolyBase._fromroots(r)
numpy.polynomial._polybase.ABCPolyBase._generate_string(self,term_method)
numpy.polynomial._polybase.ABCPolyBase._get_coefficients(self,other)
numpy.polynomial._polybase.ABCPolyBase._int(c,m,k,lbnd,scl)
numpy.polynomial._polybase.ABCPolyBase._line(off,scl)
numpy.polynomial._polybase.ABCPolyBase._mul(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._pow(c,pow,maxpower=None)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_(self)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_scalar(x,parens=False)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_term(cls,i,arg_str,needs_parens)
numpy.polynomial._polybase.ABCPolyBase._roots(c)
numpy.polynomial._polybase.ABCPolyBase._str_term_ascii(cls,i,arg_str)
numpy.polynomial._polybase.ABCPolyBase._str_term_unicode(cls,i,arg_str)
numpy.polynomial._polybase.ABCPolyBase._sub(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._val(x,c)
numpy.polynomial._polybase.ABCPolyBase.basis(cls,deg,domain=None,window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.basis_name(self)
numpy.polynomial._polybase.ABCPolyBase.cast(cls,series,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.convert(self,domain=None,kind=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.copy(self)
numpy.polynomial._polybase.ABCPolyBase.cutdeg(self,deg)
numpy.polynomial._polybase.ABCPolyBase.degree(self)
numpy.polynomial._polybase.ABCPolyBase.deriv(self,m=1)
numpy.polynomial._polybase.ABCPolyBase.domain(self)
numpy.polynomial._polybase.ABCPolyBase.fit(cls,x,y,deg,domain=None,rcond=None,full=False,w=None,window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.fromroots(cls,roots,domain=[],window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.has_samecoef(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_samedomain(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_sametype(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_samewindow(self,other)
numpy.polynomial._polybase.ABCPolyBase.identity(cls,domain=None,window=None,symbol='x')
numpy.polynomial._polybase.ABCPolyBase.integ(self,m=1,k=[],lbnd=None)
numpy.polynomial._polybase.ABCPolyBase.linspace(self,n=100,domain=None)
numpy.polynomial._polybase.ABCPolyBase.mapparms(self)
numpy.polynomial._polybase.ABCPolyBase.roots(self)
numpy.polynomial._polybase.ABCPolyBase.symbol(self)
numpy.polynomial._polybase.ABCPolyBase.trim(self,tol=0)
numpy.polynomial._polybase.ABCPolyBase.truncate(self,size)
numpy.polynomial._polybase.ABCPolyBase.window(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/_polybase.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_hermite_e.py----------------------------------------
A:numpy.polynomial.tests.test_hermite_e.He0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite_e.He1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_hermite_e.He2->numpy.array([-1, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He3->numpy.array([0, -3, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He4->numpy.array([3, 0, -6, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He5->numpy.array([0, 15, 0, -10, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He6->numpy.array([-15, 0, 45, 0, -15, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He7->numpy.array([0, -105, 0, 105, 0, -21, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He8->numpy.array([105, 0, -420, 0, 210, 0, -28, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He9->numpy.array([0, 945, 0, -1260, 0, 378, 0, -36, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite_e.tgt->numpy.exp(-0.5 * x ** 2)
A:numpy.polynomial.tests.test_hermite_e.res->numpy.polynomial.hermite_e.hermeweight(x)
A:numpy.polynomial.tests.test_hermite_e.val1->numpy.polynomial.hermite_e.hermeval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite_e.val2->numpy.polynomial.hermite_e.hermeval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite_e.pol3->numpy.polynomial.hermite_e.hermemul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite_e.val3->numpy.polynomial.hermite_e.hermeval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite_e.(quo, rem)->numpy.polynomial.hermite_e.hermediv(tgt, ci)
A:numpy.polynomial.tests.test_hermite_e.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite_e.c1d->numpy.array([4.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_hermite_e.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite_e.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite_e.y->f2(x)
A:numpy.polynomial.tests.test_hermite_e.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite_e.hermepol->numpy.polynomial.hermite_e.poly2herme(pol)
A:numpy.polynomial.tests.test_hermite_e.hermeint->numpy.polynomial.hermite_e.hermeint(hermepol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite_e.v->numpy.polynomial.hermite_e.hermevander(x, 99)
A:numpy.polynomial.tests.test_hermite_e.van->numpy.polynomial.hermite_e.hermevander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.coef3->numpy.polynomial.hermite_e.hermefit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.coef4->numpy.polynomial.hermite_e.hermefit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_hermite_e.coef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite_e.yw->f2(x).copy()
A:numpy.polynomial.tests.test_hermite_e.wcoef3->numpy.polynomial.hermite_e.hermefit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite_e.wcoef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite_e.coef1->numpy.polynomial.hermite_e.hermefit(x, y, 4)
A:numpy.polynomial.tests.test_hermite_e.coef2->numpy.polynomial.hermite_e.hermefit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_hermite_e.(x, w)->numpy.polynomial.hermite_e.hermegauss(100)
A:numpy.polynomial.tests.test_hermite_e.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite_e.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite_e.pol->numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.tests.test_hermite_e.TestArithmetic
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermeadd(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermediv(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemul(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemulx(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermepow(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermesub(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite_e.TestConstants
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermedomain(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermeone(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermex(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermezero(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder_axis(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid3d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval3d(self)
numpy.polynomial.tests.test_hermite_e.TestFitting
numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit(self)
numpy.polynomial.tests.test_hermite_e.TestGauss
numpy.polynomial.tests.test_hermite_e.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint_axis(self)
numpy.polynomial.tests.test_hermite_e.TestMisc
numpy.polynomial.tests.test_hermite_e.TestMisc.test_herme2poly(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermefromroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeline(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermetrim(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_poly2herme(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite_e.TestVander
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander2d(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander3d(self)
numpy.polynomial.tests.test_hermite_e.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_printing.py----------------------------------------
A:numpy.polynomial.tests.test_printing.p->numpy.polynomial.Polynomial([nan, inf])
A:numpy.polynomial.tests.test_printing.res->repr(poly.Laguerre([0, 1]))
A:numpy.polynomial.tests.test_printing.c->numpy.polynomial.Chebyshev([1, 2, 3])
A:numpy.polynomial.tests.test_printing.p1->numpy.polynomial.Polynomial(coefs)
A:numpy.polynomial.tests.test_printing.p2->numpy.polynomial.Polynomial(array(coefs, dtype=object))
A:numpy.polynomial.tests.test_printing.coefs->array([Fraction(1, 2), Fraction(1)])
numpy.polynomial.tests.test_printing.TestFormat
numpy.polynomial.tests.test_printing.TestFormat.test_bad_formatstr(self)
numpy.polynomial.tests.test_printing.TestFormat.test_empty_formatstr(self)
numpy.polynomial.tests.test_printing.TestFormat.test_format_ascii(self)
numpy.polynomial.tests.test_printing.TestFormat.test_format_unicode(self)
numpy.polynomial.tests.test_printing.TestLatexRepr
numpy.polynomial.tests.test_printing.TestLatexRepr.as_latex(obj)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_basis_func(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_multichar_basis_func(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_numeric_object_coefficients(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_simple_polynomial(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_symbol_basic(self)
numpy.polynomial.tests.test_printing.TestLinebreaking
numpy.polynomial.tests.test_printing.TestLinebreaking.test_first_linebreak_multiline_on_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_first_linebreak_multiline_one_less_than_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_linewidth_printoption(self,lw,tgt)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_num_chars_is_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_single_line_one_less(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.use_ascii(self)
numpy.polynomial.tests.test_printing.TestPrintOptions
numpy.polynomial.tests.test_printing.TestPrintOptions.test_fixed(self)
numpy.polynomial.tests.test_printing.TestPrintOptions.test_latex(self)
numpy.polynomial.tests.test_printing.TestPrintOptions.test_non_finite(self)
numpy.polynomial.tests.test_printing.TestPrintOptions.test_str(self)
numpy.polynomial.tests.test_printing.TestPrintOptions.test_switch_to_exp(self)
numpy.polynomial.tests.test_printing.TestPrintOptions.use_ascii(self)
numpy.polynomial.tests.test_printing.TestRepr
numpy.polynomial.tests.test_printing.TestRepr.test_chebyshev_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_hermiteE_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_hermite_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_laguerre_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_legendre_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_polynomial_repr(self)
numpy.polynomial.tests.test_printing.TestStrAscii
numpy.polynomial.tests.test_printing.TestStrAscii.test_chebyshev_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_hermiteE_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_hermite_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_laguerre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_legendre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_polynomial_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_polynomial_str_domains(self)
numpy.polynomial.tests.test_printing.TestStrAscii.use_ascii(self)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_chebyshev_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_hermiteE_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_hermite_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_laguerre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_legendre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_polynomial_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_polynomial_str_domains(self)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.use_unicode(self)
numpy.polynomial.tests.test_printing.test_complex_coefficients()
numpy.polynomial.tests.test_printing.test_nonnumeric_object_coefficients(coefs,tgt)
numpy.polynomial.tests.test_printing.test_numeric_object_coefficients(coefs,tgt)
numpy.polynomial.tests.test_printing.test_set_default_printoptions()
numpy.polynomial.tests.test_printing.test_symbol(poly,tgt)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_polyutils.py----------------------------------------
A:numpy.polynomial.tests.test_polyutils.res->numpy.polynomial.polyutils.mapparms(dom1, dom2)
A:numpy.polynomial.tests.test_polyutils.ci->numpy.ones(1, types[i])
A:numpy.polynomial.tests.test_polyutils.cj->numpy.ones(1, types[j])
A:numpy.polynomial.tests.test_polyutils.[resi, resj]->numpy.polynomial.polyutils.as_series([ci, cj])
A:numpy.polynomial.tests.test_polyutils.tgt->numpy.array([dom2, dom2])
A:numpy.polynomial.tests.test_polyutils.x->numpy.array([dom1, dom1]).view(MyNDArray)
numpy.polynomial.tests.test_polyutils.TestDomain
numpy.polynomial.tests.test_polyutils.TestDomain.test_getdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapparms(self)
numpy.polynomial.tests.test_polyutils.TestMisc
numpy.polynomial.tests.test_polyutils.TestMisc.test_as_series(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_div_zerodiv(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_pow_too_large(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimcoef(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq_empty_input(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_vander_nd_exception(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_hermite.py----------------------------------------
A:numpy.polynomial.tests.test_hermite.H0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite.H1->numpy.array([0, 2])
A:numpy.polynomial.tests.test_hermite.H2->numpy.array([-2, 0, 4])
A:numpy.polynomial.tests.test_hermite.H3->numpy.array([0, -12, 0, 8])
A:numpy.polynomial.tests.test_hermite.H4->numpy.array([12, 0, -48, 0, 16])
A:numpy.polynomial.tests.test_hermite.H5->numpy.array([0, 120, 0, -160, 0, 32])
A:numpy.polynomial.tests.test_hermite.H6->numpy.array([-120, 0, 720, 0, -480, 0, 64])
A:numpy.polynomial.tests.test_hermite.H7->numpy.array([0, -1680, 0, 3360, 0, -1344, 0, 128])
A:numpy.polynomial.tests.test_hermite.H8->numpy.array([1680, 0, -13440, 0, 13440, 0, -3584, 0, 256])
A:numpy.polynomial.tests.test_hermite.H9->numpy.array([0, 30240, 0, -80640, 0, 48384, 0, -9216, 0, 512])
A:numpy.polynomial.tests.test_hermite.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite.tgt->numpy.exp(-x ** 2)
A:numpy.polynomial.tests.test_hermite.res->numpy.polynomial.hermite.hermweight(x)
A:numpy.polynomial.tests.test_hermite.val1->numpy.polynomial.hermite.hermval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite.val2->numpy.polynomial.hermite.hermval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite.pol3->numpy.polynomial.hermite.hermmul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite.val3->numpy.polynomial.hermite.hermval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite.(quo, rem)->numpy.polynomial.hermite.hermdiv(tgt, ci)
A:numpy.polynomial.tests.test_hermite.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite.c1d->numpy.array([2.5, 1.0, 0.75])
A:numpy.polynomial.tests.test_hermite.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite.y->f2(x)
A:numpy.polynomial.tests.test_hermite.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite.hermpol->numpy.polynomial.hermite.poly2herm(pol)
A:numpy.polynomial.tests.test_hermite.hermint->numpy.polynomial.hermite.hermint(hermpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite.v->numpy.polynomial.hermite.hermvander(x, 99)
A:numpy.polynomial.tests.test_hermite.van->numpy.polynomial.hermite.hermvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite.coef3->numpy.polynomial.hermite.hermfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite.coef4->numpy.polynomial.hermite.hermfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_hermite.coef2d->numpy.polynomial.hermite.hermfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite.yw->f2(x).copy()
A:numpy.polynomial.tests.test_hermite.wcoef3->numpy.polynomial.hermite.hermfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite.wcoef2d->numpy.polynomial.hermite.hermfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite.coef1->numpy.polynomial.hermite.hermfit(x, y, 4)
A:numpy.polynomial.tests.test_hermite.coef2->numpy.polynomial.hermite.hermfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_hermite.(x, w)->numpy.polynomial.hermite.hermgauss(100)
A:numpy.polynomial.tests.test_hermite.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite.pol->numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.tests.test_hermite.TestArithmetic
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermadd(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermdiv(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmul(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmulx(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermpow(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermsub(self)
numpy.polynomial.tests.test_hermite.TestCompanion
numpy.polynomial.tests.test_hermite.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite.TestConstants
numpy.polynomial.tests.test_hermite.TestConstants.test_hermdomain(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermone(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermx(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermzero(self)
numpy.polynomial.tests.test_hermite.TestDerivative
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder(self)
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder_axis(self)
numpy.polynomial.tests.test_hermite.TestEvaluation
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid3d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval3d(self)
numpy.polynomial.tests.test_hermite.TestFitting
numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit(self)
numpy.polynomial.tests.test_hermite.TestGauss
numpy.polynomial.tests.test_hermite.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite.TestIntegral
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint(self)
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint_axis(self)
numpy.polynomial.tests.test_hermite.TestMisc
numpy.polynomial.tests.test_hermite.TestMisc.test_herm2poly(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermfromroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermline(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermtrim(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_poly2herm(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite.TestVander
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander2d(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander3d(self)
numpy.polynomial.tests.test_hermite.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_polynomial.py----------------------------------------
A:numpy.polynomial.tests.test_polynomial.x->numpy.linspace(-1, 1)
A:numpy.polynomial.tests.test_polynomial.y->f2(x)
A:numpy.polynomial.tests.test_polynomial.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_polynomial.res->numpy.polynomial.polynomial.polyroots(poly.polyfromroots(tgt))
A:numpy.polynomial.tests.test_polynomial.(quo, rem)->numpy.polynomial.polynomial.polydiv(tgt, ci)
A:numpy.polynomial.tests.test_polynomial.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_polynomial.f->Fraction(2, 3)
A:numpy.polynomial.tests.test_polynomial.one->Fraction(1, 1)
A:numpy.polynomial.tests.test_polynomial.zero->Fraction(0, 1)
A:numpy.polynomial.tests.test_polynomial.p->numpy.polynomial.polynomial.Polynomial([f, f], domain=[zero, one], window=[zero, one])
A:numpy.polynomial.tests.test_polynomial.p_deriv->numpy.polynomial.polynomial.Polynomial([Fraction(2, 3)], domain=[zero, one], window=[zero, one])
A:numpy.polynomial.tests.test_polynomial.c1d->numpy.array([1.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_polynomial.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_polynomial.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_polynomial.mx->numpy.ma.array([1, 2, 3], mask=mask)
A:numpy.polynomial.tests.test_polynomial.cx->numpy.array([1, 2, 3]).view(C)
A:numpy.polynomial.tests.test_polynomial.r->numpy.random.randint(-5, 5, size=rshape)
A:numpy.polynomial.tests.test_polynomial.tgt[ii]->numpy.polynomial.polynomial.polyvalfromroots(x[ii], r[:, ii])
A:numpy.polynomial.tests.test_polynomial.tgt[ii, jj, :]->numpy.polynomial.polynomial.polyvalfromroots(x[jj], r[:, ii])
A:numpy.polynomial.tests.test_polynomial.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_polynomial.v->numpy.polynomial.polynomial.polyvander(x, 3)
A:numpy.polynomial.tests.test_polynomial.van->numpy.polynomial.polynomial.polyvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_polynomial.coef3->numpy.polynomial.polynomial.polyfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.coef4->numpy.polynomial.polynomial.polyfit(x, y, [0, 1, 2, 3, 4])
A:numpy.polynomial.tests.test_polynomial.coef2d->numpy.polynomial.polynomial.polyfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_polynomial.yw->f2(x).copy()
A:numpy.polynomial.tests.test_polynomial.wcoef3->numpy.polynomial.polynomial.polyfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_polynomial.wcoef2d->numpy.polynomial.polynomial.polyfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_polynomial.coef1->numpy.polynomial.polynomial.polyfit(x, y, 4)
A:numpy.polynomial.tests.test_polynomial.coef2->numpy.polynomial.polynomial.polyfit(x, y, [0, 2, 4])
numpy.polynomial.tests.test_polynomial.TestArithmetic
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polyadd(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polydiv(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymul(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymulx(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polypow(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polysub(self)
numpy.polynomial.tests.test_polynomial.TestCompanion
numpy.polynomial.tests.test_polynomial.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_polynomial.TestConstants
numpy.polynomial.tests.test_polynomial.TestConstants.test_copy(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_pickle(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polydomain(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyone(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyx(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyzero(self)
numpy.polynomial.tests.test_polynomial.TestDerivative
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder(self)
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder_axis(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid3d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval3d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyvalfromroots(self)
numpy.polynomial.tests.test_polynomial.TestFraction
numpy.polynomial.tests.test_polynomial.TestFraction.test_Fraction(self)
numpy.polynomial.tests.test_polynomial.TestIntegral
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint(self)
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint_axis(self)
numpy.polynomial.tests.test_polynomial.TestMisc
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfromroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline_zero(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polytrim(self)
numpy.polynomial.tests.test_polynomial.TestVander
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander2d(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander3d(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvandernegdeg(self)
numpy.polynomial.tests.test_polynomial.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_symbol.py----------------------------------------
A:numpy.polynomial.tests.test_symbol.p->numpy.polynomial.Polynomial.basis(3, symbol='z')
A:numpy.polynomial.tests.test_symbol.pt->numpy.polynomial.Polynomial(p.coef, symbol='t')
A:numpy.polynomial.tests.test_symbol.other->self.p.deriv()
A:numpy.polynomial.tests.test_symbol.q->numpy.polynomial.Polynomial([5, 1, 0, -1], symbol='λ_1')
A:numpy.polynomial.tests.test_symbol.r->p(q)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsDifferentSymbol
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsDifferentSymbol.test_binops_fails(self,f)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_add(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_divmod(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_polymul(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_radd(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_rdivmod(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_rmul(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_rsub(self,rhs)
numpy.polynomial.tests.test_symbol.TestBinaryOperatorsSameSymbol.test_sub(self,rhs)
numpy.polynomial.tests.test_symbol.TestEquality
numpy.polynomial.tests.test_symbol.TestEquality.test_eq(self)
numpy.polynomial.tests.test_symbol.TestEquality.test_neq(self)
numpy.polynomial.tests.test_symbol.TestExtraMethods
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_convert(self,kwarg)
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_copy(self)
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_deriv(self)
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_integ(self)
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_trim(self)
numpy.polynomial.tests.test_symbol.TestExtraMethods.test_truncate(self)
numpy.polynomial.tests.test_symbol.TestInit
numpy.polynomial.tests.test_symbol.TestInit.test_change_symbol(self)
numpy.polynomial.tests.test_symbol.TestInit.test_default_symbol(self)
numpy.polynomial.tests.test_symbol.TestInit.test_property(self)
numpy.polynomial.tests.test_symbol.TestInit.test_symbol_bad_input(self,bad_input,exception)
numpy.polynomial.tests.test_symbol.TestInit.test_valid_symbols(self,symbol)
numpy.polynomial.tests.test_symbol.TestUnaryOperators
numpy.polynomial.tests.test_symbol.TestUnaryOperators.test_neg(self)
numpy.polynomial.tests.test_symbol.TestUnaryOperators.test_pow(self)
numpy.polynomial.tests.test_symbol.TestUnaryOperators.test_rscalarmul(self)
numpy.polynomial.tests.test_symbol.TestUnaryOperators.test_scalarmul(self)
numpy.polynomial.tests.test_symbol.test_basis()
numpy.polynomial.tests.test_symbol.test_composition()
numpy.polynomial.tests.test_symbol.test_fit()
numpy.polynomial.tests.test_symbol.test_froomroots()
numpy.polynomial.tests.test_symbol.test_identity()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_chebyshev.py----------------------------------------
A:numpy.polynomial.tests.test_chebyshev.inp->numpy.array([0.5] * i + [2] + [0.5] * i, np.double)
A:numpy.polynomial.tests.test_chebyshev.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_chebyshev.res->numpy.polynomial.chebyshev.chebweight(x)
A:numpy.polynomial.tests.test_chebyshev.(quo, rem)->numpy.polynomial.chebyshev.chebdiv(tgt, ci)
A:numpy.polynomial.tests.test_chebyshev.c->numpy.polynomial.chebyshev.chebinterpolate(powx, deg, (p,))
A:numpy.polynomial.tests.test_chebyshev.c1d->numpy.array([2.5, 2.0, 1.5])
A:numpy.polynomial.tests.test_chebyshev.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_chebyshev.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_chebyshev.y->f2(x)
A:numpy.polynomial.tests.test_chebyshev.x->numpy.linspace(-1, 1, 10)
A:numpy.polynomial.tests.test_chebyshev.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_chebyshev.chebpol->numpy.polynomial.chebyshev.poly2cheb(pol)
A:numpy.polynomial.tests.test_chebyshev.chebint->numpy.polynomial.chebyshev.chebint(chebpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_chebyshev.v->numpy.polynomial.chebyshev.chebvander(x, 99)
A:numpy.polynomial.tests.test_chebyshev.van->numpy.polynomial.chebyshev.chebvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.coef3->numpy.polynomial.chebyshev.chebfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.coef4->numpy.polynomial.chebyshev.chebfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_chebyshev.coef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_chebyshev.yw->f2(x).copy()
A:numpy.polynomial.tests.test_chebyshev.wcoef3->numpy.polynomial.chebyshev.chebfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_chebyshev.wcoef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_chebyshev.coef1->numpy.polynomial.chebyshev.chebfit(x, y, 4)
A:numpy.polynomial.tests.test_chebyshev.coef2->numpy.polynomial.chebyshev.chebfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_chebyshev.(x, w)->numpy.polynomial.chebyshev.chebgauss(100)
A:numpy.polynomial.tests.test_chebyshev.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_chebyshev.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
numpy.polynomial.tests.test_chebyshev.TestArithmetic
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebadd(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebdiv(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmul(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmulx(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebpow(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebsub(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_chebyshev.TestConstants
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebdomain(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebone(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebx(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebzero(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder_axis(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid3d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval3d(self)
numpy.polynomial.tests.test_chebyshev.TestFitting
numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit(self)
numpy.polynomial.tests.test_chebyshev.TestGauss
numpy.polynomial.tests.test_chebyshev.TestGauss.test_100(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint_axis(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate
numpy.polynomial.tests.test_chebyshev.TestInterpolate.f(self,x)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_dimensions(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_raises(self)
numpy.polynomial.tests.test_chebyshev.TestMisc
numpy.polynomial.tests.test_chebyshev.TestMisc.test_cheb2poly(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebfromroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebline(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts1(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts2(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebtrim(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_poly2cheb(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_weight(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__cseries_to_zseries(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__zseries_to_cseries(self)
numpy.polynomial.tests.test_chebyshev.TestVander
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander2d(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander3d(self)
numpy.polynomial.tests.test_chebyshev.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_laguerre.py----------------------------------------
A:numpy.polynomial.tests.test_laguerre.x->numpy.linspace(0, 10, 11)
A:numpy.polynomial.tests.test_laguerre.tgt->numpy.exp(-x)
A:numpy.polynomial.tests.test_laguerre.res->numpy.polynomial.laguerre.lagweight(x)
A:numpy.polynomial.tests.test_laguerre.val1->numpy.polynomial.laguerre.lagval(self.x, pol1)
A:numpy.polynomial.tests.test_laguerre.val2->numpy.polynomial.laguerre.lagval(self.x, pol2)
A:numpy.polynomial.tests.test_laguerre.pol3->numpy.polynomial.laguerre.lagmul(pol1, pol2)
A:numpy.polynomial.tests.test_laguerre.val3->numpy.polynomial.laguerre.lagval(self.x, pol3)
A:numpy.polynomial.tests.test_laguerre.(quo, rem)->numpy.polynomial.laguerre.lagdiv(tgt, ci)
A:numpy.polynomial.tests.test_laguerre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_laguerre.c1d->numpy.array([9.0, -14.0, 6.0])
A:numpy.polynomial.tests.test_laguerre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_laguerre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_laguerre.y->f(x)
A:numpy.polynomial.tests.test_laguerre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_laguerre.lagpol->numpy.polynomial.laguerre.poly2lag(pol)
A:numpy.polynomial.tests.test_laguerre.lagint->numpy.polynomial.laguerre.lagint(lagpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_laguerre.v->numpy.polynomial.laguerre.lagvander(x, 99)
A:numpy.polynomial.tests.test_laguerre.van->numpy.polynomial.laguerre.lagvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.coef3->numpy.polynomial.laguerre.lagfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.coef4->numpy.polynomial.laguerre.lagfit(x, y, [0, 1, 2, 3, 4])
A:numpy.polynomial.tests.test_laguerre.coef2d->numpy.polynomial.laguerre.lagfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_laguerre.yw->f(x).copy()
A:numpy.polynomial.tests.test_laguerre.wcoef3->numpy.polynomial.laguerre.lagfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_laguerre.wcoef2d->numpy.polynomial.laguerre.lagfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_laguerre.(x, w)->numpy.polynomial.laguerre.laggauss(100)
A:numpy.polynomial.tests.test_laguerre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_laguerre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_laguerre.pol->numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.tests.test_laguerre.TestArithmetic
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagadd(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagdiv(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmul(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmulx(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagpow(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagsub(self)
numpy.polynomial.tests.test_laguerre.TestCompanion
numpy.polynomial.tests.test_laguerre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_laguerre.TestConstants
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagdomain(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagone(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagx(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagzero(self)
numpy.polynomial.tests.test_laguerre.TestDerivative
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder(self)
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder_axis(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid3d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval3d(self)
numpy.polynomial.tests.test_laguerre.TestFitting
numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit(self)
numpy.polynomial.tests.test_laguerre.TestGauss
numpy.polynomial.tests.test_laguerre.TestGauss.test_100(self)
numpy.polynomial.tests.test_laguerre.TestIntegral
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint(self)
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint_axis(self)
numpy.polynomial.tests.test_laguerre.TestMisc
numpy.polynomial.tests.test_laguerre.TestMisc.test_lag2poly(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagfromroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagline(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagtrim(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_poly2lag(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_laguerre.TestVander
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander2d(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander3d(self)
numpy.polynomial.tests.test_laguerre.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_classes.py----------------------------------------
A:numpy.polynomial.tests.test_classes.classids->tuple((cls.__name__ for cls in classes))
A:numpy.polynomial.tests.test_classes.x->numpy.linspace(0, 2, 10)
A:numpy.polynomial.tests.test_classes.coef->random((3,))
A:numpy.polynomial.tests.test_classes.p1->Poly([1, 2, 3])
A:numpy.polynomial.tests.test_classes.p2->Poly([1, 2, 3]).integ(2, k=[1, 2])
A:numpy.polynomial.tests.test_classes.p->numpy.polynomial.Chebyshev.interpolate(powx, deg, domain=[0, 2], args=(t,))
A:numpy.polynomial.tests.test_classes.r->random((5,))
A:numpy.polynomial.tests.test_classes.y->f(x)
A:numpy.polynomial.tests.test_classes.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_classes.p3->Poly([1, 2, 3]).integ(1, k=[1])
A:numpy.polynomial.tests.test_classes.p4->Poly([1, 2, 3], domain=[0, 1], window=[1, 2])
A:numpy.polynomial.tests.test_classes.c1->list(random((4,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c2->list(random((3,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c3->list(random((2,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c4->list(p4.coef)
A:numpy.polynomial.tests.test_classes.s->stype(5, 0)
A:numpy.polynomial.tests.test_classes.(quo, rem)->divmod(2, p2)
A:numpy.polynomial.tests.test_classes.tgt->Poly([1])
A:numpy.polynomial.tests.test_classes.res->p(x)
A:numpy.polynomial.tests.test_classes.p0->Poly.cast(P([1 * 2, 2 * 3, 3 * 4]), domain=d)
A:numpy.polynomial.tests.test_classes.xtgt->numpy.linspace(0, 2, 20)
A:numpy.polynomial.tests.test_classes.ytgt->p(xtgt)
A:numpy.polynomial.tests.test_classes.(xres, yres)->numpy.polynomial.Chebyshev.interpolate(powx, deg, domain=[0, 2], args=(t,)).linspace(20, domain=[0, 2])
A:numpy.polynomial.tests.test_classes.tst->Poly([1, 2, 3])
numpy.polynomial.tests.test_classes.Poly(request)
numpy.polynomial.tests.test_classes.TestInterpolate
numpy.polynomial.tests.test_classes.TestInterpolate.f(self,x)
numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation(self)
numpy.polynomial.tests.test_classes.TestInterpolate.test_dimensions(self)
numpy.polynomial.tests.test_classes.TestInterpolate.test_raises(self)
numpy.polynomial.tests.test_classes.assert_poly_almost_equal(p1,p2,msg='')
numpy.polynomial.tests.test_classes.test_add(Poly)
numpy.polynomial.tests.test_classes.test_bad_conditioned_fit(Poly)
numpy.polynomial.tests.test_classes.test_basis(Poly)
numpy.polynomial.tests.test_classes.test_call(Poly)
numpy.polynomial.tests.test_classes.test_call_with_list(Poly)
numpy.polynomial.tests.test_classes.test_cast(Poly1,Poly2)
numpy.polynomial.tests.test_classes.test_conversion(Poly1,Poly2)
numpy.polynomial.tests.test_classes.test_copy(Poly)
numpy.polynomial.tests.test_classes.test_cutdeg(Poly)
numpy.polynomial.tests.test_classes.test_degree(Poly)
numpy.polynomial.tests.test_classes.test_deriv(Poly)
numpy.polynomial.tests.test_classes.test_divmod(Poly)
numpy.polynomial.tests.test_classes.test_equal(Poly)
numpy.polynomial.tests.test_classes.test_fit(Poly)
numpy.polynomial.tests.test_classes.test_floordiv(Poly)
numpy.polynomial.tests.test_classes.test_fromroots(Poly)
numpy.polynomial.tests.test_classes.test_identity(Poly)
numpy.polynomial.tests.test_classes.test_integ(Poly)
numpy.polynomial.tests.test_classes.test_linspace(Poly)
numpy.polynomial.tests.test_classes.test_mapparms(Poly)
numpy.polynomial.tests.test_classes.test_mod(Poly)
numpy.polynomial.tests.test_classes.test_mul(Poly)
numpy.polynomial.tests.test_classes.test_not_equal(Poly)
numpy.polynomial.tests.test_classes.test_pow(Poly)
numpy.polynomial.tests.test_classes.test_roots(Poly)
numpy.polynomial.tests.test_classes.test_sub(Poly)
numpy.polynomial.tests.test_classes.test_trim(Poly)
numpy.polynomial.tests.test_classes.test_truediv(Poly)
numpy.polynomial.tests.test_classes.test_truncate(Poly)
numpy.polynomial.tests.test_classes.test_ufunc_override(Poly)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/polynomial/tests/test_legendre.py----------------------------------------
A:numpy.polynomial.tests.test_legendre.L0->numpy.array([1])
A:numpy.polynomial.tests.test_legendre.L1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_legendre.x->numpy.linspace(-1, 1, 11)
A:numpy.polynomial.tests.test_legendre.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_legendre.res->numpy.polynomial.legendre.legweight(x)
A:numpy.polynomial.tests.test_legendre.val1->numpy.polynomial.legendre.legval(self.x, pol1)
A:numpy.polynomial.tests.test_legendre.val2->numpy.polynomial.legendre.legval(self.x, pol2)
A:numpy.polynomial.tests.test_legendre.pol3->numpy.polynomial.legendre.legmul(pol1, pol2)
A:numpy.polynomial.tests.test_legendre.val3->numpy.polynomial.legendre.legval(self.x, pol3)
A:numpy.polynomial.tests.test_legendre.(quo, rem)->numpy.polynomial.legendre.legdiv(tgt, ci)
A:numpy.polynomial.tests.test_legendre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_legendre.c1d->numpy.array([2.0, 2.0, 2.0])
A:numpy.polynomial.tests.test_legendre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_legendre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_legendre.y->f2(x)
A:numpy.polynomial.tests.test_legendre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_legendre.legpol->numpy.polynomial.legendre.poly2leg(pol)
A:numpy.polynomial.tests.test_legendre.legint->numpy.polynomial.legendre.legint(legpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_legendre.v->numpy.polynomial.legendre.legvander(x, 99)
A:numpy.polynomial.tests.test_legendre.van->numpy.polynomial.legendre.legvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_legendre.coef3->numpy.polynomial.legendre.legfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_legendre.coef4->numpy.polynomial.legendre.legfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_legendre.coef2d->numpy.polynomial.legendre.legfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_legendre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_legendre.yw->f2(x).copy()
A:numpy.polynomial.tests.test_legendre.wcoef3->numpy.polynomial.legendre.legfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_legendre.wcoef2d->numpy.polynomial.legendre.legfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_legendre.coef1->numpy.polynomial.legendre.legfit(x, y, 4)
A:numpy.polynomial.tests.test_legendre.coef2->numpy.polynomial.legendre.legfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_legendre.(x, w)->numpy.polynomial.legendre.leggauss(100)
A:numpy.polynomial.tests.test_legendre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_legendre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_legendre.pol->numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.tests.test_legendre.TestArithmetic
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legadd(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legdiv(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmul(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmulx(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legpow(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legsub(self)
numpy.polynomial.tests.test_legendre.TestCompanion
numpy.polynomial.tests.test_legendre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_legendre.TestConstants
numpy.polynomial.tests.test_legendre.TestConstants.test_legdomain(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legone(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legx(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legzero(self)
numpy.polynomial.tests.test_legendre.TestDerivative
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder(self)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_axis(self)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_orderhigherthancoeff(self)
numpy.polynomial.tests.test_legendre.TestEvaluation
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid3d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval3d(self)
numpy.polynomial.tests.test_legendre.TestFitting
numpy.polynomial.tests.test_legendre.TestFitting.test_legfit(self)
numpy.polynomial.tests.test_legendre.TestGauss
numpy.polynomial.tests.test_legendre.TestGauss.test_100(self)
numpy.polynomial.tests.test_legendre.TestIntegral
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint(self)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_axis(self)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_zerointord(self)
numpy.polynomial.tests.test_legendre.TestMisc
numpy.polynomial.tests.test_legendre.TestMisc.test_leg2poly(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legfromroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legline(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legline_zeroscl(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legtrim(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_poly2leg(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_legendre.TestVander
numpy.polynomial.tests.test_legendre.TestVander.test_legvander(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander2d(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander3d(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander_negdeg(self)
numpy.polynomial.tests.test_legendre.trim(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pyinstaller/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pyinstaller/pyinstaller-smoke.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pyinstaller/hook-numpy.py----------------------------------------
A:numpy._pyinstaller.hook-numpy.binaries->collect_dynamic_libs('numpy', '.')
A:numpy._pyinstaller.hook-numpy.datas->PyInstaller.utils.hooks.conda_support.collect_dynamic_libs('numpy', dependencies=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/_pyinstaller/test_pyinstaller.py----------------------------------------
A:numpy._pyinstaller.test_pyinstaller.source->Path(__file__).with_name('pyinstaller-smoke.py').resolve()
A:numpy._pyinstaller.test_pyinstaller.p->subprocess.run([str(exe)], check=True, stdout=subprocess.PIPE)
numpy._pyinstaller.test_pyinstaller.test_pyinstaller(mode,tmp_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/extras.py----------------------------------------
A:numpy.ma.extras.m->mask_or(m, getmask(w))
A:numpy.ma.extras.a->asarray(a)
A:numpy.ma.extras.a._mask->asarray(a)._mask.copy()
A:numpy.ma.extras.self.__doc__->self.getdoc()
A:numpy.ma.extras.npfunc->getattr(np, self.__name__, None)
A:numpy.ma.extras.doc->ma.doc_note(doc, 'The function is applied to both the _data and the _mask, if any.')
A:numpy.ma.extras.sig->ma.get_object_signature(npfunc)
A:numpy.ma.extras.func->getattr(np, self.__name__)
A:numpy.ma.extras._d->func(np.asarray(x), **params)
A:numpy.ma.extras._m->func(getmaskarray(x), **params)
A:numpy.ma.extras.args->list(args)
A:numpy.ma.extras.atleast_1d->_fromnxfunction_allargs('atleast_1d')
A:numpy.ma.extras.atleast_2d->_fromnxfunction_allargs('atleast_2d')
A:numpy.ma.extras.atleast_3d->_fromnxfunction_allargs('atleast_3d')
A:numpy.ma.extras.vstackrow_stack->_fromnxfunction_seq('vstack')
A:numpy.ma.extras.hstack->_fromnxfunction_seq('hstack')
A:numpy.ma.extras.column_stack->_fromnxfunction_seq('column_stack')
A:numpy.ma.extras.dstack->_fromnxfunction_seq('dstack')
A:numpy.ma.extras.stack->_fromnxfunction_seq('stack')
A:numpy.ma.extras.hsplit->_fromnxfunction_single('hsplit')
A:numpy.ma.extras.diagflat->_fromnxfunction_single('diagflat')
A:numpy.ma.extras.arr->array(arr, copy=False, subok=True)
A:numpy.ma.extras.axis->normalize_axis_tuple(axis, x.ndim)
A:numpy.ma.extras.i->numpy.zeros(nd, 'O')
A:numpy.ma.extras.indlist->list(range(nd))
A:numpy.ma.extras.i[axis]->slice(None, None)
A:numpy.ma.extras.outshape->flatten_inplace(outshape)
A:numpy.ma.extras.res->ma.expand_dims(res, axis)
A:numpy.ma.extras.asscalar->numpy.isscalar(res)
A:numpy.ma.extras.outarr->zeros(outshape, object)
A:numpy.ma.extras.Ntot->numpy.prod(outshape)
A:numpy.ma.extras.j->numpy.zeros(nd, 'O').copy()
A:numpy.ma.extras.max_dtypes->numpy.dtype(np.asarray(dtypes).max())
A:numpy.ma.extras.result->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.result.fill_value->ma.default_fill_value(result)
A:numpy.ma.extras.val->asarray(a)
A:numpy.ma.extras.avg->asarray(a).mean(axis, **keepdims_kw)
A:numpy.ma.extras.scl->numpy.broadcast_to(scl, avg.shape).copy()
A:numpy.ma.extras.wgt->wgt.reshape(tuple((s if ax in axis else 1 for (ax, s) in enumerate(a.shape)))).reshape(tuple((s if ax in axis else 1 for (ax, s) in enumerate(a.shape))))
A:numpy.ma.extras.result_dtype->numpy.result_type(a.dtype, wgt.dtype)
A:numpy.ma.extras.asorted->sort(a, axis=axis, fill_value=fill_value)
A:numpy.ma.extras.indexer[axis]->slice(0, 0)
A:numpy.ma.extras.indexer->tuple(indexer)
A:numpy.ma.extras.(idx, odd)->divmod(count(asorted), 2)
A:numpy.ma.extras.s->numpy.ma.mean(low_high, axis=axis, out=out)
A:numpy.ma.extras.counts->count(asorted, axis=axis, keepdims=True)
A:numpy.ma.extras.l->numpy.where(odd, h, h - 1)
A:numpy.ma.extras.lh->numpy.concatenate([l, h], axis=axis)
A:numpy.ma.extras.low_high->numpy.take_along_axis(asorted, lh, axis=axis)
A:numpy.ma.extras.s.data[rep]->numpy.ma.minimum_fill_value(asorted)
A:numpy.ma.extras.x->asarray(x)
A:numpy.ma.extras.axes->tuple(list(range(ax)) + list(range(ax + 1, x.ndim)))
A:numpy.ma.extras.maskedval->mask_or(m, getmask(w)).nonzero()
A:numpy.ma.extras.ed->hstack(arrays)
A:numpy.ma.extras.output->output.view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.output[0]->output[0].view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.aux->ma.concatenate((ar1, ar2))
A:numpy.ma.extras.ar1->unique(ar1)
A:numpy.ma.extras.ar2->unique(ar2)
A:numpy.ma.extras.auxf->ma.concatenate((ar1, ar2)).filled()
A:numpy.ma.extras.flag->ma.concatenate((bool_ar, [invert]))
A:numpy.ma.extras.(ar1, rev_idx)->unique(ar1, return_inverse=True)
A:numpy.ma.extras.ar->ma.concatenate((ar1, ar2))
A:numpy.ma.extras.order->ma.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:numpy.ma.extras.element->ma.asarray(element)
A:numpy.ma.extras.xmask->ma.getmaskarray(x)
A:numpy.ma.extras.rowvar->int(bool(rowvar))
A:numpy.ma.extras.xnotmask->numpy.logical_not(np.concatenate((xmask, ymask), axis)).astype(int)
A:numpy.ma.extras.y->asarray(y)
A:numpy.ma.extras.ymask->ma.getmaskarray(y)
A:numpy.ma.extras.common_mask->numpy.logical_or(xmask, ymask)
A:numpy.ma.extras.(x, xnotmask, rowvar)->_covhelper(x, y, rowvar, allow_masked)
A:numpy.ma.extras.c->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.diag->ma.diagonal(c)
A:numpy.ma.extras._denom->diagflat(diag)
A:numpy.ma.extras._x->mask_cols(vstack((x[:, i], x[:, j]))).var(axis=1)
A:numpy.ma.extras._denom[i, j]_denom[j, i]->ma.sqrt(ma.multiply.reduce(_x))
A:numpy.ma.extras.concatenate->staticmethod(concatenate)
A:numpy.ma.extras.data->super().makemat(arr.data, copy=False)
A:numpy.ma.extras.mr_->mr_class()
A:numpy.ma.extras.unmasked->numpy.flatnonzero(~m)
A:numpy.ma.extras.idx->(mask[1:] ^ mask[:-1]).nonzero()
A:numpy.ma.extras.n->len(list(g))
A:numpy.ma.extras.idx[axis]->slice(None, None)
A:numpy.ma.extras.mask->ma.getmask(a)
A:numpy.ma.extras._vander->numpy.vander(x, n)
A:numpy.ma.extras.vander.__doc__->ma.doc_note(np.vander.__doc__, vander.__doc__)
A:numpy.ma.extras.my->getmask(mask_rows(y))
A:numpy.ma.extras.w->asarray(w)
A:numpy.ma.extras.polyfit.__doc__->ma.doc_note(np.polyfit.__doc__, polyfit.__doc__)
numpy.ma.MAxisConcatenator(AxisConcatenator)
numpy.ma.MAxisConcatenator.__getitem__(self,key)
numpy.ma.MAxisConcatenator.makemat(cls,arr)
numpy.ma._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma._ezclump(mask)
numpy.ma._fromnxfunction(self,funcname)
numpy.ma._fromnxfunction.getdoc(self)
numpy.ma._fromnxfunction_allargs(self,*args,**params)
numpy.ma._fromnxfunction_args(self,*args,**params)
numpy.ma._fromnxfunction_seq(self,x,*args,**params)
numpy.ma._fromnxfunction_single(self,x,*args,**params)
numpy.ma._median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.apply_over_axes(func,a,axes)
numpy.ma.average(a,axis=None,weights=None,returned=False,*,keepdims=np._NoValue)
numpy.ma.clump_masked(a)
numpy.ma.clump_unmasked(a)
numpy.ma.compress_cols(a)
numpy.ma.compress_nd(x,axis=None)
numpy.ma.compress_rowcols(x,axis=None)
numpy.ma.compress_rows(a)
numpy.ma.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,allow_masked=True,ddof=np._NoValue)
numpy.ma.count_masked(arr,axis=None)
numpy.ma.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.MAxisConcatenator(AxisConcatenator)
numpy.ma.extras.MAxisConcatenator.__getitem__(self,key)
numpy.ma.extras.MAxisConcatenator.makemat(cls,arr)
numpy.ma.extras._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma.extras._ezclump(mask)
numpy.ma.extras._fromnxfunction(self,funcname)
numpy.ma.extras._fromnxfunction.__init__(self,funcname)
numpy.ma.extras._fromnxfunction.getdoc(self)
numpy.ma.extras._fromnxfunction_allargs(self,*args,**params)
numpy.ma.extras._fromnxfunction_allargs.__call__(self,*args,**params)
numpy.ma.extras._fromnxfunction_args(self,*args,**params)
numpy.ma.extras._fromnxfunction_args.__call__(self,*args,**params)
numpy.ma.extras._fromnxfunction_seq(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_seq.__call__(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_single(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_single.__call__(self,x,*args,**params)
numpy.ma.extras._median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.extras.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.extras.apply_over_axes(func,a,axes)
numpy.ma.extras.average(a,axis=None,weights=None,returned=False,*,keepdims=np._NoValue)
numpy.ma.extras.clump_masked(a)
numpy.ma.extras.clump_unmasked(a)
numpy.ma.extras.compress_cols(a)
numpy.ma.extras.compress_nd(x,axis=None)
numpy.ma.extras.compress_rowcols(x,axis=None)
numpy.ma.extras.compress_rows(a)
numpy.ma.extras.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,allow_masked=True,ddof=np._NoValue)
numpy.ma.extras.count_masked(arr,axis=None)
numpy.ma.extras.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.extras.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.flatnotmasked_contiguous(a)
numpy.ma.extras.flatnotmasked_edges(a)
numpy.ma.extras.flatten_inplace(seq)
numpy.ma.extras.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.extras.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.isin(element,test_elements,assume_unique=False,invert=False)
numpy.ma.extras.issequence(seq)
numpy.ma.extras.mask_cols(a,axis=np._NoValue)
numpy.ma.extras.mask_rowcols(a,axis=None)
numpy.ma.extras.mask_rows(a,axis=np._NoValue)
numpy.ma.extras.masked_all(shape,dtype=float)
numpy.ma.extras.masked_all_like(arr)
numpy.ma.extras.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.ma.extras.mr_class(self)
numpy.ma.extras.mr_class.__init__(self)
numpy.ma.extras.ndenumerate(a,compressed=True)
numpy.ma.extras.notmasked_contiguous(a,axis=None)
numpy.ma.extras.notmasked_edges(a,axis=None)
numpy.ma.extras.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.extras.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.union1d(ar1,ar2)
numpy.ma.extras.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.extras.vander(x,n=None)
numpy.ma.flatnotmasked_contiguous(a)
numpy.ma.flatnotmasked_edges(a)
numpy.ma.flatten_inplace(seq)
numpy.ma.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.isin(element,test_elements,assume_unique=False,invert=False)
numpy.ma.issequence(seq)
numpy.ma.mask_cols(a,axis=np._NoValue)
numpy.ma.mask_rowcols(a,axis=None)
numpy.ma.mask_rows(a,axis=np._NoValue)
numpy.ma.masked_all(shape,dtype=float)
numpy.ma.masked_all_like(arr)
numpy.ma.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.ma.mr_class(self)
numpy.ma.ndenumerate(a,compressed=True)
numpy.ma.notmasked_contiguous(a,axis=None)
numpy.ma.notmasked_edges(a,axis=None)
numpy.ma.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.union1d(ar1,ar2)
numpy.ma.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.vander(x,n=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/extras.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/__init__.py----------------------------------------
A:numpy.ma.__init__.test->PytestTester(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/__init__.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/mrecords.py----------------------------------------
A:numpy.ma.mrecords.ndescr->len(descr)
A:numpy.ma.mrecords.new_names->names.split(',')
A:numpy.ma.mrecords.nnames->len(new_names)
A:numpy.ma.mrecords.fdmask->numpy.empty(self.shape, dtype=mdescr)
A:numpy.ma.mrecords.fdmask.flat->tuple([False] * len(mdescr))
A:numpy.ma.mrecords.self->numpy._core.records.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)
A:numpy.ma.mrecords.mdtype->dtype([(k, np.bool) for (k, _) in self.dtype.descr])
A:numpy.ma.mrecords.self._mask->tuple([False] * len(mdtype))
A:numpy.ma.mrecords.mask->numpy.asarray(mask)
A:numpy.ma.mrecords._mask->getattr(reclist, '_mask', None)
A:numpy.ma.mrecords.objmask->getattr(obj, '_mask', nomask)
A:numpy.ma.mrecords._dtype->numpy.ndarray.__getattribute__(self, 'dtype')
A:numpy.ma.mrecords.mdescr->numpy.ma.make_mask_descr(_dtype)
A:numpy.ma.mrecords._localdict->object.__getattribute__(self, '__dict__')
A:numpy.ma.mrecords._data->numpy.ndarray.__new__(baseclass, baseshape, basetype).view(subtype)
A:numpy.ma.mrecords.obj->numpy.asarray(_data[indx]).view(mrecarray)
A:numpy.ma.mrecords.tp_len->len(_mask.dtype)
A:numpy.ma.mrecords.hasmasked->getattr(reclist, '_mask', None).view((bool, (tp_len,) if tp_len else ())).any()
A:numpy.ma.mrecords._fill_value->object.__getattribute__(self, '__dict__').get('_fill_value', None)
A:numpy.ma.mrecords.ret->object.__setattr__(self, attr, val)
A:numpy.ma.mrecords.dval->filled(val)
A:numpy.ma.mrecords.mval->getmaskarray(val)
A:numpy.ma.mrecords.obj._mask->numpy.asarray(_mask[indx]).view(recarray)
A:numpy.ma.mrecords.self._mask[indx]->numpy.ma.getmaskarray(value)
A:numpy.ma.mrecords.output->numpy.ndarray.view(self, dtype, type)
A:numpy.ma.mrecords.dtype->numpy.dtype(dtype)
A:numpy.ma.mrecords.output._mask->numpy._core.records.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.view(mdtype, ndarray)
A:numpy.ma.mrecords.copied->numpy._core.records.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._data.copy().view(type(self))
A:numpy.ma.mrecords.copied._mask->numpy._core.records.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.copy()
A:numpy.ma.mrecords.result->narray(self.filled().tolist(), dtype=object)
A:numpy.ma.mrecords._array->recfromarrays(datalist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords._array._mask.flat->list(zip(*masklist))
A:numpy.ma.mrecords.reclist->reclist.tolist().tolist()
A:numpy.ma.mrecords.mrec->recfromrecords(reclist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords.maskrecordlength->len(mask.dtype)
A:numpy.ma.mrecords.arr->numpy.asarray(arr)
A:numpy.ma.mrecords.f->open(fname)
A:numpy.ma.mrecords.ftext->openfile(fname)
A:numpy.ma.mrecords.line->openfile(fname).readline()
A:numpy.ma.mrecords.firstline->line[:line.find(commentchar)].strip()
A:numpy.ma.mrecords._varnames->line[:line.find(commentchar)].strip().split(delimiter)
A:numpy.ma.mrecords._variables->masked_array([line.strip().split(delimiter) for line in ftext if line[0] != commentchar and len(line) > 1])
A:numpy.ma.mrecords.vartypes->_guessvartypes(_variables[0])
A:numpy.ma.mrecords.newfield->numpy.ma.array(newfield)
A:numpy.ma.mrecords.newdtype->numpy.dtype(_data.dtype.descr + [(newfieldname, newfield.dtype)])
A:numpy.ma.mrecords.newdata->newdata.view(MaskedRecords).view(MaskedRecords)
A:numpy.ma.mrecords.newmdtype->numpy.dtype([(n, np.bool) for n in newdtype.names])
A:numpy.ma.mrecords.newmask->recarray(_data.shape, newmdtype)
numpy.ma.mrecords.MaskedRecords(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__array_finalize__(self,obj)
numpy.ma.mrecords.MaskedRecords.__getattribute__(self,attr)
numpy.ma.mrecords.MaskedRecords.__getitem__(self,indx)
numpy.ma.mrecords.MaskedRecords.__getstate__(self)
numpy.ma.mrecords.MaskedRecords.__len__(self)
numpy.ma.mrecords.MaskedRecords.__new__(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__reduce__(self)
numpy.ma.mrecords.MaskedRecords.__repr__(self)
numpy.ma.mrecords.MaskedRecords.__setattr__(self,attr,val)
numpy.ma.mrecords.MaskedRecords.__setitem__(self,indx,value)
numpy.ma.mrecords.MaskedRecords.__setstate__(self,state)
numpy.ma.mrecords.MaskedRecords.__str__(self)
numpy.ma.mrecords.MaskedRecords._data(self)
numpy.ma.mrecords.MaskedRecords._fieldmask(self)
numpy.ma.mrecords.MaskedRecords.copy(self)
numpy.ma.mrecords.MaskedRecords.harden_mask(self)
numpy.ma.mrecords.MaskedRecords.soften_mask(self)
numpy.ma.mrecords.MaskedRecords.tolist(self,fill_value=None)
numpy.ma.mrecords.MaskedRecords.view(self,dtype=None,type=None)
numpy.ma.mrecords._checknames(descr,names=None)
numpy.ma.mrecords._get_fieldmask(self)
numpy.ma.mrecords._guessvartypes(arr)
numpy.ma.mrecords._mrreconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.mrecords.addfield(mrecord,newfield,newfieldname=None)
numpy.ma.mrecords.fromarrays(arraylist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None)
numpy.ma.mrecords.fromrecords(reclist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None,mask=nomask)
numpy.ma.mrecords.fromtextfile(fname,delimiter=None,commentchar='#',missingchar='',varnames=None,vartypes=None,*,delimitor=np._NoValue)
numpy.ma.mrecords.openfile(fname)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/mrecords.pyi----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/core.py----------------------------------------
A:numpy.ma.core.nomask->MaskType(0)
A:numpy.ma.core.notesplit->re.split('\\n\\s*?Notes\\n\\s*?-----', inspect.cleandoc(initialdoc))
A:numpy.ma.core.sig->get_object_signature(self._func)
A:numpy.ma.core.default_filler['M8[' + v + ']']->numpy.datetime64('NaT', v)
A:numpy.ma.core.default_filler['m8[' + v + ']']->numpy.timedelta64('NaT', v)
A:numpy.ma.core.scalar_dtype->numpy.dtype(sctype)
A:numpy.ma.core.info->numpy.finfo(sctype)
A:numpy.ma.core.vals->tuple((np.array(_recursive_fill_value(dtype[name], f)) for name in dtype.names))
A:numpy.ma.core.subval->_recursive_fill_value(subtype, f)
A:numpy.ma.core.dtype->numpy.result_type(y, 1.0)
A:numpy.ma.core.fillvalue->numpy.resize(fillvalue, len(dt.names))
A:numpy.ma.core.ndtype->numpy.dtype(ndtype)
A:numpy.ma.core.fill_value->maximum_fill_value(self)
A:numpy.ma.core.result->self._func.__call__(*args, **params).view(MaskedArray)
A:numpy.ma.core.t1->get_fill_value(a)
A:numpy.ma.core.t2->get_fill_value(b)
A:numpy.ma.core.rcls->get_masked_subclass(*arrays)
A:numpy.ma.core.data->f(filled(a, 0), filled(v, 0), mode=mode)
A:numpy.ma.core.a->_mask_propagate(a, a.ndim - 1)
A:numpy.ma.core.invalid->numpy.logical_not(np.isfinite(result.view(ndarray)))
A:numpy.ma.core.d->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal)
A:numpy.ma.core.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.core.masked_result->self._func.__call__(*args, **params).view(MaskedArray).view(get_masked_subclass(a, b))
A:numpy.ma.core.tclass->get_masked_subclass(target)
A:numpy.ma.core.t->self.f.reduce(target, **kwargs)
A:numpy.ma.core.tr->self.f.reduce(t, axis, dtype=dtype)
A:numpy.ma.core.mr->numpy._core.umath.logical_and.reduce(m, axis)
A:numpy.ma.core.masked_tr->self.f.reduce(t, axis, dtype=dtype).view(tclass)
A:numpy.ma.core.ma->getmaskarray(a)
A:numpy.ma.core.mb->getmaskarray(b)
A:numpy.ma.core.masked_d->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal).view(get_masked_subclass(a, b))
A:numpy.ma.core.domain->ufunc_domain.get(func, None)
A:numpy.ma.core.masked_da->numpy._core.umath.multiply(m, da)
A:numpy.ma.core.exp->_MaskedUnaryOperation(umath.exp)
A:numpy.ma.core.conjugate->_MaskedUnaryOperation(umath.conjugate)
A:numpy.ma.core.sin->_MaskedUnaryOperation(umath.sin)
A:numpy.ma.core.cos->_MaskedUnaryOperation(umath.cos)
A:numpy.ma.core.arctan->_MaskedUnaryOperation(umath.arctan)
A:numpy.ma.core.arcsinh->_MaskedUnaryOperation(umath.arcsinh)
A:numpy.ma.core.sinh->_MaskedUnaryOperation(umath.sinh)
A:numpy.ma.core.cosh->_MaskedUnaryOperation(umath.cosh)
A:numpy.ma.core.tanh->_MaskedUnaryOperation(umath.tanh)
A:numpy.ma.core.absabsolute->_MaskedUnaryOperation(umath.absolute)
A:numpy.ma.core.angle->_MaskedUnaryOperation(angle)
A:numpy.ma.core.fabs->_MaskedUnaryOperation(umath.fabs)
A:numpy.ma.core.negative->_MaskedUnaryOperation(umath.negative)
A:numpy.ma.core.floor->_MaskedUnaryOperation(umath.floor)
A:numpy.ma.core.ceil->_MaskedUnaryOperation(umath.ceil)
A:numpy.ma.core.around->_MaskedUnaryOperation(np.around)
A:numpy.ma.core.logical_not->_MaskedUnaryOperation(umath.logical_not)
A:numpy.ma.core.sqrt->_MaskedUnaryOperation(umath.sqrt, 0.0, _DomainGreaterEqual(0.0))
A:numpy.ma.core.log->_MaskedUnaryOperation(umath.log, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log2->_MaskedUnaryOperation(umath.log2, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log10->_MaskedUnaryOperation(umath.log10, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.tan->_MaskedUnaryOperation(umath.tan, 0.0, _DomainTan(1e-35))
A:numpy.ma.core.arcsin->_MaskedUnaryOperation(umath.arcsin, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccos->_MaskedUnaryOperation(umath.arccos, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccosh->_MaskedUnaryOperation(umath.arccosh, 1.0, _DomainGreaterEqual(1.0))
A:numpy.ma.core.arctanh->_MaskedUnaryOperation(umath.arctanh, 0.0, _DomainCheckInterval(-1.0 + 1e-15, 1.0 - 1e-15))
A:numpy.ma.core.add->_MaskedBinaryOperation(umath.add)
A:numpy.ma.core.subtract->_MaskedBinaryOperation(umath.subtract)
A:numpy.ma.core.multiply->_MaskedBinaryOperation(umath.multiply, 1, 1)
A:numpy.ma.core.arctan2->_MaskedBinaryOperation(umath.arctan2, 0.0, 1.0)
A:numpy.ma.core.equal->_MaskedBinaryOperation(umath.equal)
A:numpy.ma.core.not_equal->_MaskedBinaryOperation(umath.not_equal)
A:numpy.ma.core.less_equal->_MaskedBinaryOperation(umath.less_equal)
A:numpy.ma.core.greater_equal->_MaskedBinaryOperation(umath.greater_equal)
A:numpy.ma.core.less->_MaskedBinaryOperation(umath.less)
A:numpy.ma.core.greater->_MaskedBinaryOperation(umath.greater)
A:numpy.ma.core.logical_and->_MaskedBinaryOperation(umath.logical_and)
A:numpy.ma.core.logical_or->_MaskedBinaryOperation(umath.logical_or)
A:numpy.ma.core.logical_xor->_MaskedBinaryOperation(umath.logical_xor)
A:numpy.ma.core.bitwise_and->_MaskedBinaryOperation(umath.bitwise_and)
A:numpy.ma.core.bitwise_or->_MaskedBinaryOperation(umath.bitwise_or)
A:numpy.ma.core.bitwise_xor->_MaskedBinaryOperation(umath.bitwise_xor)
A:numpy.ma.core.hypot->_MaskedBinaryOperation(umath.hypot)
A:numpy.ma.core.divide->_DomainedBinaryOperation(umath.divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.true_divide->_DomainedBinaryOperation(umath.true_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.floor_divide->_DomainedBinaryOperation(umath.floor_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.remainder->_DomainedBinaryOperation(umath.remainder, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.fmod->_DomainedBinaryOperation(umath.fmod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.mod->_DomainedBinaryOperation(umath.mod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.new_dtype->numpy.dtype(tuple(descr))
A:numpy.ma.core.descr->list(dtype.subdtype)
A:numpy.ma.core.descr[0]->_recurse(dtype.subdtype[0], primitive_dtype)
A:numpy.ma.core.primitive_dtype->numpy.dtype(primitive_dtype)
A:numpy.ma.core.mask->_shrink_mask(mask)
A:numpy.ma.core.newmask->_check_mask_axis(_mask, axis, **kwargs)
A:numpy.ma.core.flattened->_flatsequence(_flatmask(mask))
A:numpy.ma.core.cond->mask_or(cond, a._mask)
A:numpy.ma.core.cls->type(self)
A:numpy.ma.core.result.mask->_shrink_mask(cond)
A:numpy.ma.core.a._mask->_mask_propagate(a, a.ndim - 1)._mask.copy()
A:numpy.ma.core.output->numpy.diag(v, k).view(MaskedArray)
A:numpy.ma.core.xf->filled(x)
A:numpy.ma.core.condition->numpy.asarray(condition)
A:numpy.ma.core.xnew->filled(x, value)
A:numpy.ma.core.ret->masked_array(xnew, mask=mask, copy=copy, fill_value=value)
A:numpy.ma.core.res->data_arr.astype(rdtype)
A:numpy.ma.core.res._mask->make_mask_none(res.shape, res.dtype)
A:numpy.ma.core.masked_print_option->_MaskedPrintOption('--')
A:numpy.ma.core._legacy_print_templates->dict(long_std=textwrap.dedent('        masked_%(name)s(data =\n         %(data)s,\n        %(nlen)s        mask =\n         %(mask)s,\n        %(nlen)s  fill_value = %(fill)s)\n        '), long_flx=textwrap.dedent('        masked_%(name)s(data =\n         %(data)s,\n        %(nlen)s        mask =\n         %(mask)s,\n        %(nlen)s  fill_value = %(fill)s,\n        %(nlen)s       dtype = %(dtype)s)\n        '), short_std=textwrap.dedent('        masked_%(name)s(data = %(data)s,\n        %(nlen)s        mask = %(mask)s,\n        %(nlen)s  fill_value = %(fill)s)\n        '), short_flx=textwrap.dedent('        masked_%(name)s(data = %(data)s,\n        %(nlen)s        mask = %(mask)s,\n        %(nlen)s  fill_value = %(fill)s,\n        %(nlen)s       dtype = %(dtype)s)\n        '))
A:numpy.ma.core.out->_data.view(self).take(indices, axis=axis, mode=mode)[...].view(cls)
A:numpy.ma.core.out._mask->numpy.empty(d.shape, MaskType)
A:numpy.ma.core.newshape->list(out.shape)
A:numpy.ma.core.out.shape->tuple(flatten_sequence(newshape))
A:numpy.ma.core.result._mask->numpy.logical_or(m, invalid)
A:numpy.ma.core._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype))
A:numpy.ma.core.self.dataiter[index]->getdata(value)
A:numpy.ma.core.self.maskiter[index]->getmaskarray(value)
A:numpy.ma.core._data->_data.view(self).view(self)
A:numpy.ma.core._baseclass->type(obj)
A:numpy.ma.core.mdtype->make_mask_descr(dtype)
A:numpy.ma.core._data._mask->numpy.void(mask)
A:numpy.ma.core._data._fill_value->_check_fill_value(fill_value, _data.dtype)
A:numpy.ma.core._data._hardmask->getattr(data, '_hardmask', False)
A:numpy.ma.core._dict->dict(_fill_value=getattr(obj, '_fill_value', None), _hardmask=getattr(obj, '_hardmask', False), _sharedmask=getattr(obj, '_sharedmask', False), _isfield=getattr(obj, '_isfield', False), _baseclass=getattr(obj, '_baseclass', _baseclass), _optinfo=_optinfo, _basedict=_optinfo)
A:numpy.ma.core._mask_dtype->make_mask_descr(self.dtype)
A:numpy.ma.core.self._fill_value->_check_fill_value(None, self.dtype)
A:numpy.ma.core.output._mask->numpy.diag(v._mask, k)
A:numpy.ma.core.scalar_expected->_is_scalar(getmaskarray(self)[indx])
A:numpy.ma.core.dout->dout.view(type(self)).view(type(self))
A:numpy.ma.core.dout._fill_value->dout.view(type(self)).view(type(self))._fill_value.flat[0:1].squeeze(axis=0)
A:numpy.ma.core.dout._mask->reshape(mout, dout.shape)
A:numpy.ma.core.self._mask_mask->make_mask_none(self.shape, self.dtype)
A:numpy.ma.core._mask[indx]->tuple([True] * len(_dtype.names))
A:numpy.ma.core._maskself._mask->make_mask_none(self.shape, _dtype)
A:numpy.ma.core.dval->getattr(value, '_data', value)
A:numpy.ma.core.mval->tuple([False] * len(_dtype.names))
A:numpy.ma.core.mindx->mask_or(_mask[indx], mval, copy=True)
A:numpy.ma.core.self._mask->mask_or(self._mask, new_mask)
A:numpy.ma.core.current_maskself._mask->make_mask_none(self.shape, idtype)
A:numpy.ma.core.y->masked_array(y, dtype=dtype, copy=False)
A:numpy.ma.core.target->target.filled(self.fill_value_func(target)).view(type(target)).filled(self.fill_value_func(target)).view(type(target))
A:numpy.ma.core._new->_data.view(self).view(self).compress(condition, axis=axis, out=out).view(type(self))
A:numpy.ma.core._new._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).compress(condition, axis=axis)
A:numpy.ma.core.arr->numpy.split(mask, (ind, -ind), axis=axis)
A:numpy.ma.core.rdtype->_replace_dtype_fields(self._data.dtype, 'O')
A:numpy.ma.core.parameters->dict(name=name, nlen=' ' * len(name), data=str(self), mask=str(self._mask), fill=str(self.fill_value), dtype=str(self.dtype))
A:numpy.ma.core.is_structured->bool(self.dtype.names)
A:numpy.ma.core.key->'{}_{}'.format('long' if is_long else 'short', 'flx' if is_structured else 'std')
A:numpy.ma.core.is_one_row->builtins.all((dim == 1 for dim in self.shape[:-1]))
A:numpy.ma.core.n->builtins.max(min_indent, len(prefix + keys[0]) - len(k))
A:numpy.ma.core.reprs['data']->numpy.array2string(self._insert_masked_print(), separator=', ', prefix=indents['data'] + 'data=', suffix=',')
A:numpy.ma.core.reprs['mask']->numpy.array2string(self._mask, separator=', ', prefix=indents['mask'] + 'mask=', suffix=',')
A:numpy.ma.core.fill_repr->repr(self.fill_value)
A:numpy.ma.core.reprs['dtype']->numpy._core.arrayprint.dtype_short_repr(self.dtype)
A:numpy.ma.core.array_ufunc->getattr(other, '__array_ufunc__', False)
A:numpy.ma.core.other_priority->getattr(other, '__array_priority__', -1000000)
A:numpy.ma.core.omask->numpy.zeros((), smask.dtype)
A:numpy.ma.core.odata->getdata(other)
A:numpy.ma.core.sbroadcast->numpy.broadcast_to(self, broadcast_shape, subok=True)
A:numpy.ma.core.sdata->numpy.broadcast_to(self, broadcast_shape, subok=True).filled(odata)
A:numpy.ma.core.check->check.view(type(self)).view(type(self))
A:numpy.ma.core.fill->_check_fill_value(None, np.bool)
A:numpy.ma.core.other_data->numpy.where(self._mask, other_data.dtype.type(1), other_data)
A:numpy.ma.core.dom_mask->_DomainSafeDivide().__call__(self._data, other_data)
A:numpy.ma.core.other_mask->getmask(other)
A:numpy.ma.core.new_mask->mask_or(other_mask, invalid)
A:numpy.ma.core.axes->normalize_axis_tuple(axis, a.ndim)
A:numpy.ma.core.out_dims->list(self.shape)
A:numpy.ma.core.r->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal).view(get_masked_subclass(a, b))
A:numpy.ma.core.r._mask->numpy.ndarray.ravel(self._mask, order=order).reshape(r.shape)
A:numpy.ma.core.indices->_convert2ma('indices', params=dict(fill_value=None, hardmask=False), np_ret='grid : one ndarray or tuple of ndarrays', np_ma_ret='grid : one MaskedArray or tuple of MaskedArrays')
A:numpy.ma.core.values->narray(values, copy=None, subok=True)
A:numpy.ma.core.D->self.diagonal(offset=offset, axis1=axis1, axis2=axis2)
A:numpy.ma.core.rndim->getattr(result, 'ndim', 0)
A:numpy.ma.core.outmask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).take(indices, axis=axis, mode=mode)
A:numpy.ma.core.outmaskout._mask->make_mask_none(out.shape)
A:numpy.ma.core.dsum->self.sum(axis=axis, dtype=dtype, **kwargs)
A:numpy.ma.core.cnt->self.count(axis=axis, **kwargs)
A:numpy.ma.core.outmask.flat->getmask(result)
A:numpy.ma.core.dvar->sqrt(dvar)
A:numpy.ma.core.dvar._mask->mask_or(self._mask.all(axis, **kwargs), cnt <= 0)
A:numpy.ma.core.axis->_deprecate_argsort_axis(a)
A:numpy.ma.core.filled->self.filled(fill_value)
A:numpy.ma.core.sidx->self.argsort(axis=axis, kind=kind, order=order, fill_value=fill_value, endwith=endwith)
A:numpy.ma.core.self[...]->numpy.take_along_axis(self, sidx, axis=axis)
A:numpy.ma.core.out.flat->self.max(axis=axis, out=out, fill_value=fill_value, keepdims=keepdims)
A:numpy.ma.core.min_value->self.min(axis=axis, fill_value=fill_value, keepdims=keepdims)
A:numpy.ma.core.maskindices->getmask(indices)
A:numpy.ma.core.copy->_frommethod('copy')
A:numpy.ma.core.diagonal->_frommethod('diagonal')
A:numpy.ma.core.flatten->_arraymethod('flatten')
A:numpy.ma.core.repeat->_frommethod('repeat')
A:numpy.ma.core.squeeze->_convert2ma('squeeze', params=dict(fill_value=None, hardmask=False), np_ret='squeezed : ndarray', np_ma_ret='squeezed : MaskedArray')
A:numpy.ma.core.swapaxes->_frommethod('swapaxes')
A:numpy.ma.core.T->property(fget=lambda self: self.transpose())
A:numpy.ma.core.transpose->_arraymethod('transpose')
A:numpy.ma.core.record->numpy.ndarray(shape=self.shape, dtype=[('_data', ddtype), ('_mask', mdtype)])
A:numpy.ma.core.copied->MaskedArray.__new__(type(self), self, copy=True)
A:numpy.ma.core.copied.__dict__[k]->deepcopy(v, memo)
A:numpy.ma.core.copied._data[...]->deepcopy(copied._data)
A:numpy.ma.core.self._mask[indx]->getattr(value, '_mask', False)
A:numpy.ma.core.cls.__singleton->MaskedArray(data, mask=mask).view(cls)
A:numpy.ma.core.maskedmasked_singleton->MaskedConstant()
A:numpy.ma.core.kwargs->dict()
A:numpy.ma.core.self.__doc__->self.getdoc(np_ret, np_ma_ret)
A:numpy.ma.core.args->list(args)
A:numpy.ma.core.marr->asanyarray(a)
A:numpy.ma.core.method->getattr(np, method_name)
A:numpy.ma.core.all->_frommethod('all')
A:numpy.ma.core.anomaliesanom->_frommethod('anom')
A:numpy.ma.core.any->_frommethod('any')
A:numpy.ma.core.compress->_frommethod('compress', reversed=True)
A:numpy.ma.core.cumprod->_frommethod('cumprod')
A:numpy.ma.core.cumsum->_frommethod('cumsum')
A:numpy.ma.core.harden_mask->_frommethod('harden_mask')
A:numpy.ma.core.ids->_frommethod('ids')
A:numpy.ma.core.maximum->_extrema_operation(umath.maximum, greater, maximum_fill_value)
A:numpy.ma.core.mean->_frommethod('mean')
A:numpy.ma.core.minimum->_extrema_operation(umath.minimum, less, minimum_fill_value)
A:numpy.ma.core.nonzero->_frommethod('nonzero')
A:numpy.ma.core.prod->_frommethod('prod')
A:numpy.ma.core.product->_frommethod('prod')
A:numpy.ma.core.ravel->_frommethod('ravel')
A:numpy.ma.core.shrink_mask->_frommethod('shrink_mask')
A:numpy.ma.core.soften_mask->_frommethod('soften_mask')
A:numpy.ma.core.std->_frommethod('std')
A:numpy.ma.core.sum->_frommethod('sum')
A:numpy.ma.core.trace->_frommethod('trace')
A:numpy.ma.core.var->_frommethod('var')
A:numpy.ma.core.count->_frommethod('count')
A:numpy.ma.core.fa->filled(a, 0).ravel()
A:numpy.ma.core.fb->filled(b, 0).ravel()
A:numpy.ma.core.basetype->type(a)
A:numpy.ma.core.argmin->_frommethod('argmin')
A:numpy.ma.core.argmax->_frommethod('argmax')
A:numpy.ma.core.dm->array(d, mask=m, copy=False)
A:numpy.ma.core.data._mask->_shrink_mask(dm)
A:numpy.ma.core.valmask->getmaskarray(values)
A:numpy.ma.core._tmp->numpy.asarray(a).reshape(new_shape, order=order)
A:numpy.ma.core.prepend->numpy.broadcast_to(prepend, tuple(shape))
A:numpy.ma.core.shape->list(a.shape)
A:numpy.ma.core.append->numpy.broadcast_to(append, tuple(shape))
A:numpy.ma.core.missing->(x is _NoValue, y is _NoValue).count(True)
A:numpy.ma.core.cf->filled(condition, False)
A:numpy.ma.core.xd->numpy.zeros((), dtype=yd.dtype)
A:numpy.ma.core.yd->numpy.zeros((), dtype=xd.dtype)
A:numpy.ma.core.cm->getmaskarray(condition)
A:numpy.ma.core.xm->numpy.ones((), dtype=ym.dtype)
A:numpy.ma.core.ym->numpy.ones((), dtype=xm.dtype)
A:numpy.ma.core.c->filled(indices, 0)
A:numpy.ma.core.outputmask->make_mask(mask_or(outputmask, getmask(indices)), copy=False, shrink=True)
A:numpy.ma.core.b->_mask_propagate(b, b.ndim - 2)
A:numpy.ma.core.inner.__doc__->doc_note(np.inner.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.outer.__doc__->doc_note(np.outer.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.x->masked_array(a, copy=False)
A:numpy.ma.core.xinf->numpy.isinf(masked_array(x, copy=False, mask=m)).filled(False)
A:numpy.ma.core.self._func->getattr(np, funcname)
A:numpy.ma.core.doc->self._replace_return_type(doc, np_ret, np_ma_ret)
A:numpy.ma.core.common_params->set(params).intersection(_extras)
A:numpy.ma.core._extras[p]->params.pop(p)
A:numpy.ma.core.result.fill_value->_extras.get('fill_value', None)
A:numpy.ma.core.result._hardmask->bool(_extras.get('hard_mask', False))
A:numpy.ma.core.arange->_convert2ma('arange', params=dict(fill_value=None, hardmask=False), np_ret='arange : ndarray', np_ma_ret='arange : MaskedArray')
A:numpy.ma.core.clip->_convert2ma('clip', params=dict(fill_value=None, hardmask=False), np_ret='clipped_array : ndarray', np_ma_ret='clipped_array : MaskedArray')
A:numpy.ma.core.empty->_convert2ma('empty', params=dict(fill_value=None, hardmask=False), np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.empty_like->_convert2ma('empty_like', np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.frombuffer->_convert2ma('frombuffer', np_ret='out : ndarray', np_ma_ret='out: MaskedArray')
A:numpy.ma.core.fromfunction->_convert2ma('fromfunction', np_ret='fromfunction : any', np_ma_ret='fromfunction: MaskedArray')
A:numpy.ma.core.identity->_convert2ma('identity', params=dict(fill_value=None, hardmask=False), np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.ones->_convert2ma('ones', params=dict(fill_value=None, hardmask=False), np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.ones_like->_convert2ma('ones_like', np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.zeros->_convert2ma('zeros', params=dict(fill_value=None, hardmask=False), np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
A:numpy.ma.core.zeros_like->_convert2ma('zeros_like', np_ret='out : ndarray', np_ma_ret='out : MaskedArray')
numpy.ma.MAError(Exception)
numpy.ma.MaskError(MAError)
numpy.ma.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.MaskedArray.__add__(self,other)
numpy.ma.MaskedArray.__array_finalize__(self,obj)
numpy.ma.MaskedArray.__array_wrap__(self,obj,context=None,return_scalar=False)
numpy.ma.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.MaskedArray.__div__(self,other)
numpy.ma.MaskedArray.__eq__(self,other)
numpy.ma.MaskedArray.__float__(self)
numpy.ma.MaskedArray.__floordiv__(self,other)
numpy.ma.MaskedArray.__ge__(self,other)
numpy.ma.MaskedArray.__getitem__(self,indx)
numpy.ma.MaskedArray.__getstate__(self)
numpy.ma.MaskedArray.__gt__(self,other)
numpy.ma.MaskedArray.__iadd__(self,other)
numpy.ma.MaskedArray.__idiv__(self,other)
numpy.ma.MaskedArray.__ifloordiv__(self,other)
numpy.ma.MaskedArray.__imul__(self,other)
numpy.ma.MaskedArray.__int__(self)
numpy.ma.MaskedArray.__ipow__(self,other)
numpy.ma.MaskedArray.__isub__(self,other)
numpy.ma.MaskedArray.__itruediv__(self,other)
numpy.ma.MaskedArray.__le__(self,other)
numpy.ma.MaskedArray.__lt__(self,other)
numpy.ma.MaskedArray.__mul__(self,other)
numpy.ma.MaskedArray.__ne__(self,other)
numpy.ma.MaskedArray.__pow__(self,other)
numpy.ma.MaskedArray.__radd__(self,other)
numpy.ma.MaskedArray.__reduce__(self)
numpy.ma.MaskedArray.__repr__(self)
numpy.ma.MaskedArray.__rfloordiv__(self,other)
numpy.ma.MaskedArray.__rmul__(self,other)
numpy.ma.MaskedArray.__rpow__(self,other)
numpy.ma.MaskedArray.__rsub__(self,other)
numpy.ma.MaskedArray.__rtruediv__(self,other)
numpy.ma.MaskedArray.__setitem__(self,indx,value)
numpy.ma.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.MaskedArray.__setstate__(self,state)
numpy.ma.MaskedArray.__str__(self)
numpy.ma.MaskedArray.__sub__(self,other)
numpy.ma.MaskedArray.__truediv__(self,other)
numpy.ma.MaskedArray._comparison(self,other,compare)
numpy.ma.MaskedArray._delegate_binop(self,other)
numpy.ma.MaskedArray._get_data(self)
numpy.ma.MaskedArray._insert_masked_print(self)
numpy.ma.MaskedArray._update_from(self,obj)
numpy.ma.MaskedArray.all(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.MaskedArray.any(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.argmax(self,axis=None,fill_value=None,out=None,*,keepdims=np._NoValue)
numpy.ma.MaskedArray.argmin(self,axis=None,fill_value=None,out=None,*,keepdims=np._NoValue)
numpy.ma.MaskedArray.argpartition(self,*args,**kwargs)
numpy.ma.MaskedArray.argsort(self,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None,*,stable=False)
numpy.ma.MaskedArray.baseclass(self)
numpy.ma.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.MaskedArray.compressed(self)
numpy.ma.MaskedArray.count(self,axis=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.dot(self,b,out=None,strict=False)
numpy.ma.MaskedArray.dtype(self)
numpy.ma.MaskedArray.dtype(self,dtype)
numpy.ma.MaskedArray.fill_value(self)
numpy.ma.MaskedArray.fill_value(self,value=None)
numpy.ma.MaskedArray.filled(self,fill_value=None)
numpy.ma.MaskedArray.flat(self)
numpy.ma.MaskedArray.flat(self,value)
numpy.ma.MaskedArray.harden_mask(self)
numpy.ma.MaskedArray.hardmask(self)
numpy.ma.MaskedArray.ids(self)
numpy.ma.MaskedArray.imag(self)
numpy.ma.MaskedArray.iscontiguous(self)
numpy.ma.MaskedArray.mT(self)
numpy.ma.MaskedArray.mask(self)
numpy.ma.MaskedArray.mask(self,value)
numpy.ma.MaskedArray.max(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.mean(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.min(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.nonzero(self)
numpy.ma.MaskedArray.partition(self,*args,**kwargs)
numpy.ma.MaskedArray.prod(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.ptp(self,axis=None,out=None,fill_value=None,keepdims=False)
numpy.ma.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.MaskedArray.ravel(self,order='C')
numpy.ma.MaskedArray.real(self)
numpy.ma.MaskedArray.recordmask(self)
numpy.ma.MaskedArray.recordmask(self,mask)
numpy.ma.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.MaskedArray.shape(self)
numpy.ma.MaskedArray.shape(self,shape)
numpy.ma.MaskedArray.sharedmask(self)
numpy.ma.MaskedArray.shrink_mask(self)
numpy.ma.MaskedArray.soften_mask(self)
numpy.ma.MaskedArray.sort(self,axis=-1,kind=None,order=None,endwith=True,fill_value=None,*,stable=False)
numpy.ma.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,mean=np._NoValue)
numpy.ma.MaskedArray.sum(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.MaskedArray.tobytes(self,fill_value=None,order='C')
numpy.ma.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.MaskedArray.toflex(self)
numpy.ma.MaskedArray.tolist(self,fill_value=None)
numpy.ma.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.MaskedArray.unshare_mask(self)
numpy.ma.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,mean=np._NoValue)
numpy.ma.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.MaskedArrayFutureWarning(FutureWarning)
numpy.ma.MaskedConstant(cls)
numpy.ma.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.MaskedConstant.__array_wrap__(self,obj,context=None,return_scalar=False)
numpy.ma.MaskedConstant.__copy__(self)
numpy.ma.MaskedConstant.__deepcopy__(self,memo)
numpy.ma.MaskedConstant.__format__(self,format_spec)
numpy.ma.MaskedConstant.__has_singleton(cls)
numpy.ma.MaskedConstant.__iop__(self,other)
numpy.ma.MaskedConstant.__reduce__(self)
numpy.ma.MaskedConstant.__repr__(self)
numpy.ma.MaskedConstant.__setattr__(self,attr,value)
numpy.ma.MaskedConstant.__str__(self)
numpy.ma.MaskedConstant.copy(self,*args,**kwargs)
numpy.ma.MaskedIterator(self,ma)
numpy.ma.MaskedIterator.__getitem__(self,indx)
numpy.ma.MaskedIterator.__iter__(self)
numpy.ma.MaskedIterator.__next__(self)
numpy.ma.MaskedIterator.__setitem__(self,index,value)
numpy.ma._DomainCheckInterval(self,a,b)
numpy.ma._DomainGreater(self,critical_value)
numpy.ma._DomainGreaterEqual(self,critical_value)
numpy.ma._DomainSafeDivide(self,tolerance=None)
numpy.ma._DomainTan(self,eps)
numpy.ma._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma._MaskedBinaryOperation.outer(self,a,b)
numpy.ma._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma._MaskedPrintOption(self,display)
numpy.ma._MaskedPrintOption.__str__(self)
numpy.ma._MaskedPrintOption.display(self)
numpy.ma._MaskedPrintOption.enable(self,shrink=1)
numpy.ma._MaskedPrintOption.enabled(self)
numpy.ma._MaskedPrintOption.set_display(self,s)
numpy.ma._MaskedUFunc(self,ufunc)
numpy.ma._MaskedUFunc.__str__(self)
numpy.ma._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma._arraymethod(funcname,onmask=True)
numpy.ma._check_fill_value(fill_value,ndtype)
numpy.ma._check_mask_axis(mask,axis,keepdims=np._NoValue)
numpy.ma._convert2ma(self,funcname,np_ret,np_ma_ret,params=None)
numpy.ma._convert2ma._replace_return_type(self,doc,np_ret,np_ma_ret)
numpy.ma._convert2ma.getdoc(self,np_ret,np_ma_ret)
numpy.ma._convolve_or_correlate(f,a,v,mode,propagate_mask)
numpy.ma._deprecate_argsort_axis(arr)
numpy.ma._extrema_operation(self,ufunc,compare,fill_value)
numpy.ma._extrema_operation.outer(self,a,b)
numpy.ma._extrema_operation.reduce(self,target,axis=np._NoValue)
numpy.ma._extremum_fill_value(obj,extremum,extremum_name)
numpy.ma._frommethod(self,methodname,reversed=False)
numpy.ma._frommethod.getdoc(self)
numpy.ma._get_dtype_of(obj)
numpy.ma._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma._mask_propagate(a,axis)
numpy.ma._recursive_fill_value(dtype,f)
numpy.ma._recursive_filled(a,mask,fill_value)
numpy.ma._recursive_mask_or(m1,m2,newmask)
numpy.ma._recursive_printoption(result,mask,printopt)
numpy.ma._recursive_set_fill_value(fillvalue,dt)
numpy.ma._replace_dtype_fields(dtype,primitive_dtype)
numpy.ma._replace_dtype_fields_recursive(dtype,primitive_dtype)
numpy.ma._shrink_mask(m)
numpy.ma.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.allequal(a,b,fill_value=True)
numpy.ma.append(a,b,axis=None)
numpy.ma.argsort(a,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None,*,stable=None)
numpy.ma.array(data,dtype=None,copy=False,order=None,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.asanyarray(a,dtype=None)
numpy.ma.asarray(a,dtype=None,order=None)
numpy.ma.choose(indices,choices,out=None,mode='raise')
numpy.ma.common_fill_value(a,b)
numpy.ma.compressed(x)
numpy.ma.concatenate(arrays,axis=0)
numpy.ma.convolve(a,v,mode='full',propagate_mask=True)
numpy.ma.core.MAError(Exception)
numpy.ma.core.MaskError(MAError)
numpy.ma.core.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.core.MaskedArray.__add__(self,other)
numpy.ma.core.MaskedArray.__array_finalize__(self,obj)
numpy.ma.core.MaskedArray.__array_wrap__(self,obj,context=None,return_scalar=False)
numpy.ma.core.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.core.MaskedArray.__div__(self,other)
numpy.ma.core.MaskedArray.__eq__(self,other)
numpy.ma.core.MaskedArray.__float__(self)
numpy.ma.core.MaskedArray.__floordiv__(self,other)
numpy.ma.core.MaskedArray.__ge__(self,other)
numpy.ma.core.MaskedArray.__getitem__(self,indx)
numpy.ma.core.MaskedArray.__getstate__(self)
numpy.ma.core.MaskedArray.__gt__(self,other)
numpy.ma.core.MaskedArray.__iadd__(self,other)
numpy.ma.core.MaskedArray.__idiv__(self,other)
numpy.ma.core.MaskedArray.__ifloordiv__(self,other)
numpy.ma.core.MaskedArray.__imul__(self,other)
numpy.ma.core.MaskedArray.__int__(self)
numpy.ma.core.MaskedArray.__ipow__(self,other)
numpy.ma.core.MaskedArray.__isub__(self,other)
numpy.ma.core.MaskedArray.__itruediv__(self,other)
numpy.ma.core.MaskedArray.__le__(self,other)
numpy.ma.core.MaskedArray.__lt__(self,other)
numpy.ma.core.MaskedArray.__mul__(self,other)
numpy.ma.core.MaskedArray.__ne__(self,other)
numpy.ma.core.MaskedArray.__new__(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.core.MaskedArray.__pow__(self,other)
numpy.ma.core.MaskedArray.__radd__(self,other)
numpy.ma.core.MaskedArray.__reduce__(self)
numpy.ma.core.MaskedArray.__repr__(self)
numpy.ma.core.MaskedArray.__rfloordiv__(self,other)
numpy.ma.core.MaskedArray.__rmul__(self,other)
numpy.ma.core.MaskedArray.__rpow__(self,other)
numpy.ma.core.MaskedArray.__rsub__(self,other)
numpy.ma.core.MaskedArray.__rtruediv__(self,other)
numpy.ma.core.MaskedArray.__setitem__(self,indx,value)
numpy.ma.core.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.core.MaskedArray.__setstate__(self,state)
numpy.ma.core.MaskedArray.__str__(self)
numpy.ma.core.MaskedArray.__sub__(self,other)
numpy.ma.core.MaskedArray.__truediv__(self,other)
numpy.ma.core.MaskedArray._comparison(self,other,compare)
numpy.ma.core.MaskedArray._delegate_binop(self,other)
numpy.ma.core.MaskedArray._get_data(self)
numpy.ma.core.MaskedArray._insert_masked_print(self)
numpy.ma.core.MaskedArray._update_from(self,obj)
numpy.ma.core.MaskedArray.all(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.core.MaskedArray.any(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.argmax(self,axis=None,fill_value=None,out=None,*,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.argmin(self,axis=None,fill_value=None,out=None,*,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.argpartition(self,*args,**kwargs)
numpy.ma.core.MaskedArray.argsort(self,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None,*,stable=False)
numpy.ma.core.MaskedArray.baseclass(self)
numpy.ma.core.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.core.MaskedArray.compressed(self)
numpy.ma.core.MaskedArray.count(self,axis=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.dot(self,b,out=None,strict=False)
numpy.ma.core.MaskedArray.dtype(self)
numpy.ma.core.MaskedArray.dtype(self,dtype)
numpy.ma.core.MaskedArray.fill_value(self)
numpy.ma.core.MaskedArray.fill_value(self,value=None)
numpy.ma.core.MaskedArray.filled(self,fill_value=None)
numpy.ma.core.MaskedArray.flat(self)
numpy.ma.core.MaskedArray.flat(self,value)
numpy.ma.core.MaskedArray.harden_mask(self)
numpy.ma.core.MaskedArray.hardmask(self)
numpy.ma.core.MaskedArray.ids(self)
numpy.ma.core.MaskedArray.imag(self)
numpy.ma.core.MaskedArray.iscontiguous(self)
numpy.ma.core.MaskedArray.mT(self)
numpy.ma.core.MaskedArray.mask(self)
numpy.ma.core.MaskedArray.mask(self,value)
numpy.ma.core.MaskedArray.max(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.mean(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.min(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.nonzero(self)
numpy.ma.core.MaskedArray.partition(self,*args,**kwargs)
numpy.ma.core.MaskedArray.prod(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.ptp(self,axis=None,out=None,fill_value=None,keepdims=False)
numpy.ma.core.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.core.MaskedArray.ravel(self,order='C')
numpy.ma.core.MaskedArray.real(self)
numpy.ma.core.MaskedArray.recordmask(self)
numpy.ma.core.MaskedArray.recordmask(self,mask)
numpy.ma.core.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.core.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.core.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.core.MaskedArray.shape(self)
numpy.ma.core.MaskedArray.shape(self,shape)
numpy.ma.core.MaskedArray.sharedmask(self)
numpy.ma.core.MaskedArray.shrink_mask(self)
numpy.ma.core.MaskedArray.soften_mask(self)
numpy.ma.core.MaskedArray.sort(self,axis=-1,kind=None,order=None,endwith=True,fill_value=None,*,stable=False)
numpy.ma.core.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,mean=np._NoValue)
numpy.ma.core.MaskedArray.sum(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.core.MaskedArray.tobytes(self,fill_value=None,order='C')
numpy.ma.core.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.core.MaskedArray.toflex(self)
numpy.ma.core.MaskedArray.tolist(self,fill_value=None)
numpy.ma.core.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.core.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.core.MaskedArray.unshare_mask(self)
numpy.ma.core.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,mean=np._NoValue)
numpy.ma.core.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.core.MaskedArrayFutureWarning(FutureWarning)
numpy.ma.core.MaskedConstant(cls)
numpy.ma.core.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.core.MaskedConstant.__array_wrap__(self,obj,context=None,return_scalar=False)
numpy.ma.core.MaskedConstant.__copy__(self)
numpy.ma.core.MaskedConstant.__deepcopy__(self,memo)
numpy.ma.core.MaskedConstant.__format__(self,format_spec)
numpy.ma.core.MaskedConstant.__has_singleton(cls)
numpy.ma.core.MaskedConstant.__iop__(self,other)
numpy.ma.core.MaskedConstant.__new__(cls)
numpy.ma.core.MaskedConstant.__reduce__(self)
numpy.ma.core.MaskedConstant.__repr__(self)
numpy.ma.core.MaskedConstant.__setattr__(self,attr,value)
numpy.ma.core.MaskedConstant.__str__(self)
numpy.ma.core.MaskedConstant.copy(self,*args,**kwargs)
numpy.ma.core.MaskedIterator(self,ma)
numpy.ma.core.MaskedIterator.__getitem__(self,indx)
numpy.ma.core.MaskedIterator.__init__(self,ma)
numpy.ma.core.MaskedIterator.__iter__(self)
numpy.ma.core.MaskedIterator.__next__(self)
numpy.ma.core.MaskedIterator.__setitem__(self,index,value)
numpy.ma.core._DomainCheckInterval(self,a,b)
numpy.ma.core._DomainCheckInterval.__init__(self,a,b)
numpy.ma.core._DomainGreater(self,critical_value)
numpy.ma.core._DomainGreater.__init__(self,critical_value)
numpy.ma.core._DomainGreaterEqual(self,critical_value)
numpy.ma.core._DomainGreaterEqual.__init__(self,critical_value)
numpy.ma.core._DomainSafeDivide(self,tolerance=None)
numpy.ma.core._DomainSafeDivide.__init__(self,tolerance=None)
numpy.ma.core._DomainTan(self,eps)
numpy.ma.core._DomainTan.__init__(self,eps)
numpy.ma.core._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._DomainedBinaryOperation.__init__(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.__init__(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma.core._MaskedBinaryOperation.outer(self,a,b)
numpy.ma.core._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma.core._MaskedPrintOption(self,display)
numpy.ma.core._MaskedPrintOption.__init__(self,display)
numpy.ma.core._MaskedPrintOption.__str__(self)
numpy.ma.core._MaskedPrintOption.display(self)
numpy.ma.core._MaskedPrintOption.enable(self,shrink=1)
numpy.ma.core._MaskedPrintOption.enabled(self)
numpy.ma.core._MaskedPrintOption.set_display(self,s)
numpy.ma.core._MaskedUFunc(self,ufunc)
numpy.ma.core._MaskedUFunc.__init__(self,ufunc)
numpy.ma.core._MaskedUFunc.__str__(self)
numpy.ma.core._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma.core._MaskedUnaryOperation.__init__(self,mufunc,fill=0,domain=None)
numpy.ma.core._arraymethod(funcname,onmask=True)
numpy.ma.core._check_fill_value(fill_value,ndtype)
numpy.ma.core._check_mask_axis(mask,axis,keepdims=np._NoValue)
numpy.ma.core._convert2ma(self,funcname,np_ret,np_ma_ret,params=None)
numpy.ma.core._convert2ma.__init__(self,funcname,np_ret,np_ma_ret,params=None)
numpy.ma.core._convert2ma._replace_return_type(self,doc,np_ret,np_ma_ret)
numpy.ma.core._convert2ma.getdoc(self,np_ret,np_ma_ret)
numpy.ma.core._convolve_or_correlate(f,a,v,mode,propagate_mask)
numpy.ma.core._deprecate_argsort_axis(arr)
numpy.ma.core._extrema_operation(self,ufunc,compare,fill_value)
numpy.ma.core._extrema_operation.__init__(self,ufunc,compare,fill_value)
numpy.ma.core._extrema_operation.outer(self,a,b)
numpy.ma.core._extrema_operation.reduce(self,target,axis=np._NoValue)
numpy.ma.core._extremum_fill_value(obj,extremum,extremum_name)
numpy.ma.core._frommethod(self,methodname,reversed=False)
numpy.ma.core._frommethod.__init__(self,methodname,reversed=False)
numpy.ma.core._frommethod.getdoc(self)
numpy.ma.core._get_dtype_of(obj)
numpy.ma.core._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.core._mask_propagate(a,axis)
numpy.ma.core._recursive_fill_value(dtype,f)
numpy.ma.core._recursive_filled(a,mask,fill_value)
numpy.ma.core._recursive_mask_or(m1,m2,newmask)
numpy.ma.core._recursive_printoption(result,mask,printopt)
numpy.ma.core._recursive_set_fill_value(fillvalue,dt)
numpy.ma.core._replace_dtype_fields(dtype,primitive_dtype)
numpy.ma.core._replace_dtype_fields_recursive(dtype,primitive_dtype)
numpy.ma.core._shrink_mask(m)
numpy.ma.core.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.core.allequal(a,b,fill_value=True)
numpy.ma.core.append(a,b,axis=None)
numpy.ma.core.argsort(a,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None,*,stable=None)
numpy.ma.core.array(data,dtype=None,copy=False,order=None,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.core.asanyarray(a,dtype=None)
numpy.ma.core.asarray(a,dtype=None,order=None)
numpy.ma.core.choose(indices,choices,out=None,mode='raise')
numpy.ma.core.common_fill_value(a,b)
numpy.ma.core.compressed(x)
numpy.ma.core.concatenate(arrays,axis=0)
numpy.ma.core.convolve(a,v,mode='full',propagate_mask=True)
numpy.ma.core.correlate(a,v,mode='valid',propagate_mask=True)
numpy.ma.core.default_fill_value(obj)
numpy.ma.core.diag(v,k=0)
numpy.ma.core.diff(a,/,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.ma.core.doc_note(initialdoc,note)
numpy.ma.core.dot(a,b,strict=False,out=None)
numpy.ma.core.filled(a,fill_value=None)
numpy.ma.core.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.core.flatten_mask(mask)
numpy.ma.core.flatten_structured_array(a)
numpy.ma.core.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.core.fromflex(fxarray)
numpy.ma.core.get_fill_value(a)
numpy.ma.core.get_masked_subclass(*arrays)
numpy.ma.core.get_object_signature(obj)
numpy.ma.core.getdata(a,subok=True)
numpy.ma.core.getmask(a)
numpy.ma.core.getmaskarray(arr)
numpy.ma.core.inner(a,b)
numpy.ma.core.isMaskedArray(x)
numpy.ma.core.is_mask(m)
numpy.ma.core.is_masked(x)
numpy.ma.core.is_string_or_list_of_strings(val)
numpy.ma.core.left_shift(a,n)
numpy.ma.core.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.core.make_mask_descr(ndtype)
numpy.ma.core.make_mask_none(newshape,dtype=None)
numpy.ma.core.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.core.masked_equal(x,value,copy=True)
numpy.ma.core.masked_greater(x,value,copy=True)
numpy.ma.core.masked_greater_equal(x,value,copy=True)
numpy.ma.core.masked_inside(x,v1,v2,copy=True)
numpy.ma.core.masked_invalid(a,copy=True)
numpy.ma.core.masked_less(x,value,copy=True)
numpy.ma.core.masked_less_equal(x,value,copy=True)
numpy.ma.core.masked_not_equal(x,value,copy=True)
numpy.ma.core.masked_object(x,value,copy=True,shrink=True)
numpy.ma.core.masked_outside(x,v1,v2,copy=True)
numpy.ma.core.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.core.masked_where(condition,a,copy=True)
numpy.ma.core.max(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.maximum_fill_value(obj)
numpy.ma.core.min(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.minimum_fill_value(obj)
numpy.ma.core.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.core.mvoid.__getitem__(self,indx)
numpy.ma.core.mvoid.__iter__(self)
numpy.ma.core.mvoid.__len__(self)
numpy.ma.core.mvoid.__new__(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.core.mvoid.__setitem__(self,indx,value)
numpy.ma.core.mvoid.__str__(self)
numpy.ma.core.mvoid._data(self)
numpy.ma.core.mvoid.filled(self,fill_value=None)
numpy.ma.core.mvoid.tolist(self)
numpy.ma.core.ndim(obj)
numpy.ma.core.outer(a,b)
numpy.ma.core.power(a,b,third=None)
numpy.ma.core.ptp(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.put(a,indices,values,mode='raise')
numpy.ma.core.putmask(a,mask,values)
numpy.ma.core.reshape(a,new_shape,order='C')
numpy.ma.core.resize(x,new_shape)
numpy.ma.core.right_shift(a,n)
numpy.ma.core.round_(a,decimals=0,out=None)
numpy.ma.core.set_fill_value(a,fill_value)
numpy.ma.core.shape(obj)
numpy.ma.core.size(obj,axis=None)
numpy.ma.core.sort(a,axis=-1,kind=None,order=None,endwith=True,fill_value=None,*,stable=None)
numpy.ma.core.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.core.transpose(a,axes=None)
numpy.ma.core.where(condition,x=_NoValue,y=_NoValue)
numpy.ma.correlate(a,v,mode='valid',propagate_mask=True)
numpy.ma.default_fill_value(obj)
numpy.ma.diag(v,k=0)
numpy.ma.diff(a,/,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.ma.doc_note(initialdoc,note)
numpy.ma.dot(a,b,strict=False,out=None)
numpy.ma.filled(a,fill_value=None)
numpy.ma.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.flatten_mask(mask)
numpy.ma.flatten_structured_array(a)
numpy.ma.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.fromflex(fxarray)
numpy.ma.get_fill_value(a)
numpy.ma.get_masked_subclass(*arrays)
numpy.ma.get_object_signature(obj)
numpy.ma.getdata(a,subok=True)
numpy.ma.getmask(a)
numpy.ma.getmaskarray(arr)
numpy.ma.inner(a,b)
numpy.ma.isMaskedArray(x)
numpy.ma.is_mask(m)
numpy.ma.is_masked(x)
numpy.ma.is_string_or_list_of_strings(val)
numpy.ma.left_shift(a,n)
numpy.ma.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.make_mask_descr(ndtype)
numpy.ma.make_mask_none(newshape,dtype=None)
numpy.ma.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.masked_equal(x,value,copy=True)
numpy.ma.masked_greater(x,value,copy=True)
numpy.ma.masked_greater_equal(x,value,copy=True)
numpy.ma.masked_inside(x,v1,v2,copy=True)
numpy.ma.masked_invalid(a,copy=True)
numpy.ma.masked_less(x,value,copy=True)
numpy.ma.masked_less_equal(x,value,copy=True)
numpy.ma.masked_not_equal(x,value,copy=True)
numpy.ma.masked_object(x,value,copy=True,shrink=True)
numpy.ma.masked_outside(x,v1,v2,copy=True)
numpy.ma.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.masked_where(condition,a,copy=True)
numpy.ma.max(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.maximum_fill_value(obj)
numpy.ma.min(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.minimum_fill_value(obj)
numpy.ma.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.mvoid.__getitem__(self,indx)
numpy.ma.mvoid.__iter__(self)
numpy.ma.mvoid.__len__(self)
numpy.ma.mvoid.__setitem__(self,indx,value)
numpy.ma.mvoid.__str__(self)
numpy.ma.mvoid._data(self)
numpy.ma.mvoid.filled(self,fill_value=None)
numpy.ma.mvoid.tolist(self)
numpy.ma.ndim(obj)
numpy.ma.outer(a,b)
numpy.ma.power(a,b,third=None)
numpy.ma.ptp(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.put(a,indices,values,mode='raise')
numpy.ma.putmask(a,mask,values)
numpy.ma.reshape(a,new_shape,order='C')
numpy.ma.resize(x,new_shape)
numpy.ma.right_shift(a,n)
numpy.ma.round_(a,decimals=0,out=None)
numpy.ma.set_fill_value(a,fill_value)
numpy.ma.shape(obj)
numpy.ma.size(obj,axis=None)
numpy.ma.sort(a,axis=-1,kind=None,order=None,endwith=True,fill_value=None,*,stable=None)
numpy.ma.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.transpose(a,axes=None)
numpy.ma.where(condition,x=_NoValue,y=_NoValue)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/core.pyi----------------------------------------
numpy.ma.core.mask_rowcols(a,axis=...)
numpy.ma.core.round(a,decimals=...,out=...)
numpy.ma.mask_rowcols(a,axis=...)
numpy.ma.round(a,decimals=...,out=...)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/testutils.py----------------------------------------
A:numpy.ma.testutils.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.testutils.d1->filled(a)
A:numpy.ma.testutils.d2->filled(b)
A:numpy.ma.testutils.x->masked_array(x, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.y->masked_array(y, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.d->numpy.less_equal(umath.absolute(x - y), atol + rtol * umath.absolute(y))
A:numpy.ma.testutils.msg->build_err_msg([x, y], err_msg=err_msg, verbose=verbose, header=header, names=('x', 'y'))
A:numpy.ma.testutils.actual->numpy.asanyarray(actual)
A:numpy.ma.testutils.desired->numpy.asanyarray(desired)
numpy.ma.testutils._assert_equal_on_sequences(actual,desired,err_msg='')
numpy.ma.testutils.almost(a,b,decimal=6,fill_value=True)
numpy.ma.testutils.approx(a,b,fill_value=True,rtol=1e-05,atol=1e-08)
numpy.ma.testutils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_approx_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',fill_value=True)
numpy.ma.testutils.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_less(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_equal(actual,desired,err_msg='')
numpy.ma.testutils.assert_equal_records(a,b)
numpy.ma.testutils.assert_mask_equal(m1,m2,err_msg='')
numpy.ma.testutils.fail_if_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.fail_if_equal(actual,desired,err_msg='')


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/timer_comparison.py----------------------------------------
A:numpy.ma.timer_comparison.xf->numpy.where(m1, 1e+20, x)
A:numpy.ma.timer_comparison.yf->self.filled(y)
A:numpy.ma.timer_comparison.m->self.make_mask(n)
A:numpy.ma.timer_comparison.x->x.reshape(2, 3, 4).reshape(2, 3, 4)
A:numpy.ma.timer_comparison.y->self.array([self.arange(6), 2.0 * self.arange(6)])
A:numpy.ma.timer_comparison.msg->build_err_msg([x, y], err_msg, header=header, names=('x', 'y'))
A:numpy.ma.timer_comparison.val->self.masked_array(val, mask=m)
A:numpy.ma.timer_comparison.reduced->reduced.tolist().tolist()
A:numpy.ma.timer_comparison.cond->reduced.tolist().tolist().all()
A:numpy.ma.timer_comparison.xm->self.arange(10, dtype=np.float64)
A:numpy.ma.timer_comparison.ym->self.masked_array(y, mask=m2)
A:numpy.ma.timer_comparison.x1->self.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x3->self.array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.timer_comparison.x4->self.arange(4)
A:numpy.ma.timer_comparison.x3[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.x4[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.m2->self.make_mask(m)
A:numpy.ma.timer_comparison.m3->self.make_mask(m, copy=1)
A:numpy.ma.timer_comparison.y4->self.resize(x4, (8,))
A:numpy.ma.timer_comparison.y5->self.repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y6->self.repeat(x4, 2, axis=0)
A:numpy.ma.timer_comparison.y7->self.arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y8->self.arange(4).repeat(2, 0)
A:numpy.ma.timer_comparison.t->self.take(y, [0, 3, 4])
A:numpy.ma.timer_comparison.a->self.arange(10, dtype=np.float64)
A:numpy.ma.timer_comparison.uf->getattr(fromnumeric, f)
A:numpy.ma.timer_comparison.mf->getattr(self.module, f)
A:numpy.ma.timer_comparison.ur->uf(*args)
A:numpy.ma.timer_comparison.mr->mf(*args)
A:numpy.ma.timer_comparison.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.timer_comparison.(result, wts)->self.average(ott, axis=0, returned=1)
A:numpy.ma.timer_comparison.m1->self.zeros(6)
A:numpy.ma.timer_comparison.m4->self.ones(6)
A:numpy.ma.timer_comparison.z->self.masked_array(y, m3)
A:numpy.ma.timer_comparison.cur->numpy.sort(cur)
numpy.ma.timer_comparison.ModuleTester(self,module)
numpy.ma.timer_comparison.ModuleTester.__init__(self,module)
numpy.ma.timer_comparison.ModuleTester.assert_array_compare(self,comparison,x,y,err_msg='',header='',fill_value=True)
numpy.ma.timer_comparison.ModuleTester.assert_array_equal(self,x,y,err_msg='')
numpy.ma.timer_comparison.ModuleTester.test_0(self)
numpy.ma.timer_comparison.ModuleTester.test_1(self)
numpy.ma.timer_comparison.ModuleTester.test_2(self)
numpy.ma.timer_comparison.ModuleTester.test_3(self)
numpy.ma.timer_comparison.ModuleTester.test_4(self)
numpy.ma.timer_comparison.ModuleTester.test_5(self)
numpy.ma.timer_comparison.ModuleTester.test_6(self)
numpy.ma.timer_comparison.ModuleTester.test_7(self)
numpy.ma.timer_comparison.ModuleTester.test_99(self)
numpy.ma.timer_comparison.ModuleTester.test_A(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_subclassing.py----------------------------------------
A:numpy.ma.tests.test_subclassing.x->numpy.arange(5)
A:numpy.ma.tests.test_subclassing.x.info->info.copy()
A:numpy.ma.tests.test_subclassing.self.info->getattr(obj, 'info', {}).copy()
A:numpy.ma.tests.test_subclassing.result->super().__iadd__(other)
A:numpy.ma.tests.test_subclassing.obj->super().__array_wrap__(obj, context, return_scalar)
A:numpy.ma.tests.test_subclassing.subarr->SubArray(data, info)
A:numpy.ma.tests.test_subclassing._data->numpy.ma.core.MaskedArray.__new__(cls, data=subarr, mask=mask)
A:numpy.ma.tests.test_subclassing._view->self.view(MaskedArray)
A:numpy.ma.tests.test_subclassing.out->out.view(type(self._original)).view(type(self._original))
A:numpy.ma.tests.test_subclassing.self._dataiter[index]->self._original._validate_input(value)
A:numpy.ma.tests.test_subclassing.value->value.__array__().view(ComplicatedSubArray).__array__().view(ComplicatedSubArray)
A:numpy.ma.tests.test_subclassing.y->self.ravel()
A:numpy.ma.tests.test_subclassing.mx->masked_array(x, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.xsub->SubArray(x)
A:numpy.ma.tests.test_subclassing.xmsub->masked_array(xsub, mask=m)
A:numpy.ma.tests.test_subclassing.xmx->masked_array(mx.data.__array__(), mask=mx.mask)
A:numpy.ma.tests.test_subclassing.my->masked_array(subarray(x))
A:numpy.ma.tests.test_subclassing.ym->msubarray(x)
A:numpy.ma.tests.test_subclassing.mxsub->masked_array(xsub, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.xcsub->ComplicatedSubArray(x)
A:numpy.ma.tests.test_subclassing.mxcsub->masked_array(xcsub, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.mxcsub_nomask->masked_array(xcsub)
A:numpy.ma.tests.test_subclassing.arr1->SubMaskedArray('test', data=[1, 2, 3, 4, 5, 6])
A:numpy.ma.tests.test_subclassing.arr2->SubMaskedArray(data=[0, 1, 2, 3, 4, 5])
A:numpy.ma.tests.test_subclassing.diff1->numpy.subtract(arr1, arr2)
A:numpy.ma.tests.test_subclassing.data_masked->numpy.ma.array([1, 2, 3], mask=[True, False, True])
A:numpy.ma.tests.test_subclassing.data_masked_units->ArrayNoInheritance(data_masked, 'meters')
A:numpy.ma.tests.test_subclassing.new_array->numpy.ma.array(data_masked_units, keep_mask=False)
A:numpy.ma.tests.test_subclassing.m->numpy.ma.masked_array([1, 3, 5], mask=[False, True, False])
A:numpy.ma.tests.test_subclassing.wm->WrappedArray(m)
A:numpy.ma.tests.test_subclassing.m2->numpy.stack([m, m])
A:numpy.ma.tests.test_subclassing.mixin->NDArrayOperatorsMixin()
numpy.ma.tests.test_subclassing.ArrayNoInheritance(self,data,units)
numpy.ma.tests.test_subclassing.ArrayNoInheritance.__getattr__(self,attr)
numpy.ma.tests.test_subclassing.ArrayNoInheritance.__init__(self,data,units)
numpy.ma.tests.test_subclassing.CSAIterator(self,a)
numpy.ma.tests.test_subclassing.CSAIterator.__getitem__(self,indx)
numpy.ma.tests.test_subclassing.CSAIterator.__init__(self,a)
numpy.ma.tests.test_subclassing.CSAIterator.__iter__(self)
numpy.ma.tests.test_subclassing.CSAIterator.__next__(self)
numpy.ma.tests.test_subclassing.CSAIterator.__setitem__(self,index,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray(SubArray)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__(self,obj,context=None,return_scalar=False)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__(self,item)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__repr__(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__(self,item,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__str__(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray._validate_input(self,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat(self,value)
numpy.ma.tests.test_subclassing.MSubArray(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray.__new__(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray._series(self)
numpy.ma.tests.test_subclassing.SubArray(cls,arr,info={})
numpy.ma.tests.test_subclassing.SubArray.__add__(self,other)
numpy.ma.tests.test_subclassing.SubArray.__array_finalize__(self,obj)
numpy.ma.tests.test_subclassing.SubArray.__iadd__(self,other)
numpy.ma.tests.test_subclassing.SubArray.__new__(cls,arr,info={})
numpy.ma.tests.test_subclassing.SubMaskedArray(cls,info=None,**kwargs)
numpy.ma.tests.test_subclassing.SubMaskedArray.__new__(cls,info=None,**kwargs)
numpy.ma.tests.test_subclassing.TestClassWrapping
numpy.ma.tests.test_subclassing.TestClassWrapping.setup_method(self)
numpy.ma.tests.test_subclassing.TestClassWrapping.test_masked_binary_operations(self)
numpy.ma.tests.test_subclassing.TestClassWrapping.test_masked_unary_operations(self)
numpy.ma.tests.test_subclassing.TestClassWrapping.test_mixins_have_slots(self)
numpy.ma.tests.test_subclassing.TestSubclassing
numpy.ma.tests.test_subclassing.TestSubclassing.setup_method(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_attributepropagation(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_data_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations2(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_unary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_maskedarray_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_pure_subclass_info_preservation(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_items(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_nomask_items(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_repr(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_str(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclasspreservation(self)
numpy.ma.tests.test_subclassing.WrappedArray(self,array,**attrs)
numpy.ma.tests.test_subclassing.WrappedArray.__array__(self,dtype=None,copy=None)
numpy.ma.tests.test_subclassing.WrappedArray.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.ma.tests.test_subclassing.WrappedArray.__init__(self,array,**attrs)
numpy.ma.tests.test_subclassing.WrappedArray.__repr__(self)
numpy.ma.tests.test_subclassing.assert_startswith(a,b)
numpy.ma.tests.test_subclassing.test_array_no_inheritance()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_old_ma.py----------------------------------------
A:numpy.ma.tests.test_old_ma.result->allclose(v, w)
A:numpy.ma.tests.test_old_ma.x->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993])
A:numpy.ma.tests.test_old_ma.y->array([arange(6), 2.0 * arange(6)])
A:numpy.ma.tests.test_old_ma.xm->array(0, mask=1)
A:numpy.ma.tests.test_old_ma.ym->ym.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.z->masked_array(y, m3)
A:numpy.ma.tests.test_old_ma.zm->where(cm, x, y)
A:numpy.ma.tests.test_old_ma.xf->xf.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_old_ma.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_old_ma.na->numpy.array([1])
A:numpy.ma.tests.test_old_ma.ma->array([1])
A:numpy.ma.tests.test_old_ma.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_old_ma.xr->numpy.ravel(x)
A:numpy.ma.tests.test_old_ma.xmr->ravel(xm)
A:numpy.ma.tests.test_old_ma.x1->numpy.arange(5)
A:numpy.ma.tests.test_old_ma.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_old_ma.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_old_ma.x4->arange(4)
A:numpy.ma.tests.test_old_ma.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.m->numpy.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0])
A:numpy.ma.tests.test_old_ma.m2->numpy.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]).copy()
A:numpy.ma.tests.test_old_ma.m3->make_mask(m, copy=True)
A:numpy.ma.tests.test_old_ma.y1->array(x1, mask=m)
A:numpy.ma.tests.test_old_ma.y1a->array(y1, copy=0)
A:numpy.ma.tests.test_old_ma.y2->array(x1, mask=m3, copy=0)
A:numpy.ma.tests.test_old_ma.y2a->array(x1, mask=m, copy=1)
A:numpy.ma.tests.test_old_ma.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_old_ma.y4->resize(x4, (8,))
A:numpy.ma.tests.test_old_ma.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_old_ma.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_old_ma.d->arange(5)
A:numpy.ma.tests.test_old_ma.c->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0])
A:numpy.ma.tests.test_old_ma.atest->ones((10, 10, 10), dtype=np.float32)
A:numpy.ma.tests.test_old_ma.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_old_ma.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_old_ma.cm->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0]).filled(1)
A:numpy.ma.tests.test_old_ma.t->take(y, [0, 3, 4])
A:numpy.ma.tests.test_old_ma.s->pickle.dumps(x, protocol=proto)
A:numpy.ma.tests.test_old_ma.xx->arange(6)
A:numpy.ma.tests.test_old_ma.(result, wts)->average(ott, axis=0, returned=True)
A:numpy.ma.tests.test_old_ma.m1->zeros(6)
A:numpy.ma.tests.test_old_ma.m4->ones(6)
A:numpy.ma.tests.test_old_ma.a->arange(1, 13).reshape(3, 4)
A:numpy.ma.tests.test_old_ma.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=True)
A:numpy.ma.tests.test_old_ma.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=True)
A:numpy.ma.tests.test_old_ma.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_old_ma.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_old_ma.b->masked_array([0, 1], mask=[True, True])
A:numpy.ma.tests.test_old_ma.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_old_ma.mf->getattr(np.ma, f)
A:numpy.ma.tests.test_old_ma.ur->uf(*args)
A:numpy.ma.tests.test_old_ma.mr->mf(*args)
A:numpy.ma.tests.test_old_ma.amask->masked_where(a < 5, a)
A:numpy.ma.tests.test_old_ma.X->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(6, 6)
A:numpy.ma.tests.test_old_ma.XX->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_old_ma.mx->array(data=x, mask=m)
A:numpy.ma.tests.test_old_ma.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_old_ma.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_old_ma.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_old_ma.clipped->array(data=x, mask=m).clip(2, 8)
A:numpy.ma.tests.test_old_ma.rows->numpy.zeros(n, np.float64)
A:numpy.ma.tests.test_old_ma.cols->numpy.zeros(m, np.float64)
A:numpy.ma.tests.test_old_ma.cols[k]->numpy.ptp(mX[:, k].compressed())
A:numpy.ma.tests.test_old_ma.rows[k]->numpy.ptp(mX[k].compressed())
A:numpy.ma.tests.test_old_ma.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_old_ma.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_old_ma.mXcp->array(data=X, mask=m.reshape(X.shape)).cumsum(1)
numpy.ma.tests.test_old_ma.TestArrayMethods
numpy.ma.tests.test_old_ma.TestArrayMethods.setup_method(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_clip(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumprod(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumsum(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_ptp(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_trace(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_varstd(self)
numpy.ma.tests.test_old_ma.TestMa
numpy.ma.tests.test_old_ma.TestMa.setup_method(self)
numpy.ma.tests.test_old_ma.TestMa.test_assignment_by_condition(self)
numpy.ma.tests.test_old_ma.TestMa.test_assignment_by_condition_2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAPI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAddSumProd(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayAttributes(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayMethods(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage1(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic1d(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic2d(self,s)
numpy.ma.tests.test_old_ma.TestMa.test_testCI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testCopySize(self)
numpy.ma.tests.test_old_ma.TestMa.test_testInplace(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMaPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMasked(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMixedArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testOddFeatures(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPickle(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPut2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testScalarArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testSingleElementSubscript(self)
numpy.ma.tests.test_old_ma.TestMa.test_testTakeTransposeInnerOuter(self)
numpy.ma.tests.test_old_ma.TestMa.test_testToPython(self)
numpy.ma.tests.test_old_ma.TestMa.test_testUfuncs1(self)
numpy.ma.tests.test_old_ma.TestMa.test_xtestCount(self)
numpy.ma.tests.test_old_ma.TestUfuncs
numpy.ma.tests.test_old_ma.TestUfuncs.setup_method(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_nonzero(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_old_ma.eq(v,w,msg='')
numpy.ma.tests.test_old_ma.eqmask(m1,m2)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_mrecords.py----------------------------------------
A:numpy.ma.tests.test_mrecords.base->self.base.copy()
A:numpy.ma.tests.test_mrecords.mbase->self.base.copy().view(mrecarray)
A:numpy.ma.tests.test_mrecords.data->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype)
A:numpy.ma.tests.test_mrecords.rdata->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype).view(MaskedRecords)
A:numpy.ma.tests.test_mrecords.val->numpy.ma.array([10, 20, 30], mask=[1, 0, 0])
A:numpy.ma.tests.test_mrecords.nmask->numpy.array([(0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0)], dtype=[('a', bool), ('b', bool), ('c', bool)])
A:numpy.ma.tests.test_mrecords.mrec->addfield(mrec, ma.array(d, mask=m))
A:numpy.ma.tests.test_mrecords._->pickle.dumps(mrec, protocol=proto)
A:numpy.ma.tests.test_mrecords.mrec_->pickle.loads(_)
A:numpy.ma.tests.test_mrecords._a->numpy.ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
A:numpy.ma.tests.test_mrecords._b->numpy.ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
A:numpy.ma.tests.test_mrecords._c->numpy.ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
A:numpy.ma.tests.test_mrecords.mrecfilled->addfield(mrec, ma.array(d, mask=m)).filled()
A:numpy.ma.tests.test_mrecords.x->mrecarray(1, formats=float, names='base')
A:numpy.ma.tests.test_mrecords.easy->mrecarray(1, dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_mrecords.solo->mrecarray(1, dtype=[('f0', '<f8', (2, 2))])
A:numpy.ma.tests.test_mrecords.mult->mrecarray(2, dtype='i4, (2,3)float, float')
A:numpy.ma.tests.test_mrecords.arr->numpy.array(list(zip(a, b)), dtype=ndtype)
A:numpy.ma.tests.test_mrecords.test->addfield(mrec, ma.array(d, mask=m)).view(alttype)
A:numpy.ma.tests.test_mrecords.nrec->recfromarrays((_a._data, _b._data, _c._data), dtype=ddtype)
A:numpy.ma.tests.test_mrecords._x->numpy.ma.array([1, 1.1, 'one'], mask=[1, 0, 0], dtype=object)
A:numpy.ma.tests.test_mrecords.pa->recfromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords.mpa->fromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords._mrec->fromrecords(nrec.tolist(), dtype=ddtype, mask=mrec._mask.tolist())
A:numpy.ma.tests.test_mrecords.mrectxt->fromtextfile(path, delimiter=',', varnames='ABCDEFG')
A:numpy.ma.tests.test_mrecords.y->numpy.ma.masked_array([(1, '2'), (3, '4')], mask=[(0, 0), (0, 1)], dtype=[('a', int), ('b', object)])
numpy.ma.tests.test_mrecords.TestMRecords
numpy.ma.tests.test_mrecords.TestMRecords.test_byview(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_exotic_formats(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_filled(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_get(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_pickling(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_elements(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromarray(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromfields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_setslices_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_tolist(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_withnames(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_addfield(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromarrays(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords_wmask(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromtextfile(self)
numpy.ma.tests.test_mrecords.TestView
numpy.ma.tests.test_mrecords.TestView.setup_method(self)
numpy.ma.tests.test_mrecords.TestView.test_view_by_itself(self)
numpy.ma.tests.test_mrecords.TestView.test_view_flexible_type(self)
numpy.ma.tests.test_mrecords.TestView.test_view_simple_dtype(self)
numpy.ma.tests.test_mrecords.test_record_array_with_object_field()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_deprecations.py----------------------------------------
A:numpy.ma.tests.test_deprecations.arr_0d->numpy.array(1).view(cls)
A:numpy.ma.tests.test_deprecations.arr_1d->numpy.array([1, 2, 3]).view(cls)
A:numpy.ma.tests.test_deprecations.arr_2d->numpy.array([[1, 2], [3, 4]]).view(cls)
A:numpy.ma.tests.test_deprecations.result->numpy.ma.mrecords.fromtextfile(textfile, delimitor=';')
A:numpy.ma.tests.test_deprecations.data1d->numpy.ma.arange(6)
A:numpy.ma.tests.test_deprecations.data2d->numpy.ma.arange(6).reshape(2, 3)
A:numpy.ma.tests.test_deprecations.textfile->io.StringIO(textwrap.dedent("\n            A,B,C,D\n            'string 1';1;1.0;'mixed column'\n            'string 2';2;2.0;\n            'string 3';3;3.0;123\n            'string 4';4;4.0;3.14\n            "))
numpy.ma.tests.test_deprecations.TestArgsort
numpy.ma.tests.test_deprecations.TestArgsort._test_base(self,argsort,cls)
numpy.ma.tests.test_deprecations.TestArgsort.test_function_maskedarray(self)
numpy.ma.tests.test_deprecations.TestArgsort.test_function_ndarray(self)
numpy.ma.tests.test_deprecations.TestArgsort.test_method(self)
numpy.ma.tests.test_deprecations.TestFromtextfile
numpy.ma.tests.test_deprecations.TestFromtextfile.test_fromtextfile_delimitor(self)
numpy.ma.tests.test_deprecations.TestMinimumMaximum
numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_axis_default(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_core.py----------------------------------------
A:numpy.ma.tests.test_core.suppress_copy_mask_on_assignment->suppress_warnings()
A:numpy.ma.tests.test_core.x->numpy.empty(4, dt)
A:numpy.ma.tests.test_core.y->numpy.add(x, 1.0, out=x)
A:numpy.ma.tests.test_core.xm->masked_array(x, mask=m1)
A:numpy.ma.tests.test_core.ym->masked_array(y, mask=m2)
A:numpy.ma.tests.test_core.z->where(c, 1, masked)
A:numpy.ma.tests.test_core.zm->where(cm, x, y)
A:numpy.ma.tests.test_core.xf->xf.reshape(s).reshape(s)
A:numpy.ma.tests.test_core.a->array([1, 2, 3], mask=[1, 0, 0])
A:numpy.ma.tests.test_core.b->numpy.ma.array(1, mask=a.mask)
A:numpy.ma.tests.test_core.xmym->concatenate((xm, ym), 1)
A:numpy.ma.tests.test_core.data->numpy.array(iterator)
A:numpy.ma.tests.test_core.test->array([1, 2, 3], mask=[1, 0, 0]).view((float, 2), np.recarray)
A:numpy.ma.tests.test_core.xx->numpy.empty(4, dt).copy()
A:numpy.ma.tests.test_core.dma_1->MaskedArray(data)
A:numpy.ma.tests.test_core.dma_2->MaskedArray(dma_1)
A:numpy.ma.tests.test_core.dma_3->MaskedArray(dma_1, mask=[1, 0, 0, 0] * 6)
A:numpy.ma.tests.test_core.masked_str->numpy.ma.masked_array(['a', 'b'], mask=[True, False])
A:numpy.ma.tests.test_core.normal_int->numpy.arange(2)
A:numpy.ma.tests.test_core.res->numpy.ma.masked_values([1, 2, 3, 4], 5, shrink=False)
A:numpy.ma.tests.test_core.masked_obj->numpy.ma.masked_array([NotBool(), 'b'], mask=[True, False])
A:numpy.ma.tests.test_core.xmm->asarray(xm)
A:numpy.ma.tests.test_core.new_m->asarray(m, order='C')
A:numpy.ma.tests.test_core.data_fixed->fix_invalid(data)
A:numpy.ma.tests.test_core.dt->numpy.dtype([])
A:numpy.ma.tests.test_core.x1->numpy.arange(5)
A:numpy.ma.tests.test_core.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_core.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_core.x4->arange(4)
A:numpy.ma.tests.test_core.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.value->numpy.ma.array([2e+234, 1, 1], mask=[True, False, False])
A:numpy.ma.tests.test_core.m->numpy.ma.array(np.ma.masked)
A:numpy.ma.tests.test_core.m2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
A:numpy.ma.tests.test_core.m3->make_mask(m, copy=True)
A:numpy.ma.tests.test_core.y1->array(x1, mask=m)
A:numpy.ma.tests.test_core.y1a->array(y1)
A:numpy.ma.tests.test_core.y2->array(x1, mask=m3)
A:numpy.ma.tests.test_core.y2a->array(x1, mask=m, copy=1)
A:numpy.ma.tests.test_core.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_core.y4->resize(x4, (8,))
A:numpy.ma.tests.test_core.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_core.y7->arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y8->arange(4).repeat(2, 0)
A:numpy.ma.tests.test_core.y9->arange(4).copy()
A:numpy.ma.tests.test_core.xc->numpy.empty(4, dt).copy()
A:numpy.ma.tests.test_core.copied->deepcopy(a)
A:numpy.ma.tests.test_core.with_format_string->format(masked, ' >5')
A:numpy.ma.tests.test_core.oldopts->numpy.get_printoptions()
A:numpy.ma.tests.test_core.utype->type(u)
A:numpy.ma.tests.test_core.arr_nomask->numpy.ma.array(u)
A:numpy.ma.tests.test_core.arr_masked->numpy.ma.array(u, mask=True)
A:numpy.ma.tests.test_core.a_pickled->pickle.loads(pickle.dumps(a, protocol=proto))
A:numpy.ma.tests.test_core.mc_pickled->pickle.loads(pickle.dumps(mc, protocol=proto))
A:numpy.ma.tests.test_core.c->numpy.reshape(a, (2, 5))
A:numpy.ma.tests.test_core.atest->ones((10, 10, 10), dtype=float)
A:numpy.ma.tests.test_core.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_core.flexi->array([(1, 1, 1)], dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_core.control->numpy.array([(True, True), (True, True)], dtype=mdtype)
A:numpy.ma.tests.test_core.Z->numpy.ma.zeros(2, numpy.dtype([('A', '(2,2)i1,(2,2)i1', (2, 2))]))
A:numpy.ma.tests.test_core.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.ma.tests.test_core.t_2d0->masked_array(data=(0, [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], 0.0), mask=(False, [[True, False, True], [False, False, True]], False), dtype='int, (2,3)float, float')
A:numpy.ma.tests.test_core.f->default_fill_value(dt)
A:numpy.ma.tests.test_core.A->masked_array(data=[([0, 1],)], mask=[([True, False],)], dtype=[('A', '>i2', (2,))])
A:numpy.ma.tests.test_core.mx->numpy.ma.array(x, mask=x)
A:numpy.ma.tests.test_core.t_ma->masked_array(data=[([1, 2, 3],)], mask=[([False, True, False],)], fill_value=([999999, 999999, 999999],), dtype=[('a', '<i4', (3,))])
A:numpy.ma.tests.test_core.t_2d->masked_array(data=[([[1, 2], [3, 4]], 1)], mask=[([[False, True], [True, False]], False)], dtype=[('a', '<i4', (2, 2)), ('b', float)])
A:numpy.ma.tests.test_core.t_0d->masked_array(data=[(1, 2)], mask=[(True, False)], dtype=[('a', '<i4'), ('b', '<i4')])
A:numpy.ma.tests.test_core.t_ne->masked_array(data=[(1, (1, 1))], mask=[(True, (True, False))], dtype=[('a', '<i4'), ('b', 'i4,i4')])
A:numpy.ma.tests.test_core.mx1->masked_array([1.0], mask=[True])
A:numpy.ma.tests.test_core.mx2->masked_array([1.0, 2.0])
A:numpy.ma.tests.test_core.self.err_status->numpy.geterr()
A:numpy.ma.tests.test_core.a2d->array([[1, 2], [0, 4]])
A:numpy.ma.tests.test_core.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_core.na->numpy.array([1])
A:numpy.ma.tests.test_core.ma->numpy.ma.MaskedArray([(1.0, 1), (2.0, 2)], dtype=ndtype)
A:numpy.ma.tests.test_core.ott->array([0.0, 1.0, 2.0, 3.0])
A:numpy.ma.tests.test_core.xr->numpy.ravel(x)
A:numpy.ma.tests.test_core.xmr->ravel(xm)
A:numpy.ma.tests.test_core.aminimum->numpy.ma.core.minimum.outer(a, a)
A:numpy.ma.tests.test_core.amaximum->numpy.ma.core.maximum.outer(a, a)
A:numpy.ma.tests.test_core.mask->numpy.array(data, dtype=mdtype)
A:numpy.ma.tests.test_core.npfunc->getattr(np, funcname)
A:numpy.ma.tests.test_core.mafunc->getattr(numpy.ma.core, funcname)
A:numpy.ma.tests.test_core.nout->numpy.array(-1, dtype=float)
A:numpy.ma.tests.test_core.result->numpy.ma.masked_array(result, mask=np.ones(result.shape, dtype=np.bool))
A:numpy.ma.tests.test_core.t->array(list(zip([1, 2, 3], [4, 5, 6])), dtype=ndtype)
A:numpy.ma.tests.test_core.xmmeth->getattr(xm, funcname)
A:numpy.ma.tests.test_core.output->array(-9999.0, mask=[False])
A:numpy.ma.tests.test_core.ma1->masked_array(['a', 'b', 'cde'], mask=[0, 1, 0], fill_value=fill)
A:numpy.ma.tests.test_core.r1->empty_like(r)
A:numpy.ma.tests.test_core.ma2->masked_array(['cde', 'b', 'a'], mask=[0, 1, 0], fill_value=fill)
A:numpy.ma.tests.test_core.r2->masked_array(['cde', 'b', 'a'], mask=[0, 1, 0], fill_value=fill).view('2i4')
A:numpy.ma.tests.test_core.eq_expected->(r1 == r2).all()
A:numpy.ma.tests.test_core.ne_expected->(r1 != r2).any()
A:numpy.ma.tests.test_core.m1->array([1, 1], mask=[0, 1])
A:numpy.ma.tests.test_core.d->numpy.arange(24.0).reshape((2, 3, 4))
A:numpy.ma.tests.test_core.xh->array(d + 1, mask=m, hard_mask=True, copy=True)
A:numpy.ma.tests.test_core.xs->array(d, mask=m, hard_mask=False, copy=True)
A:numpy.ma.tests.test_core.xh[:]->arange(5)
A:numpy.ma.tests.test_core.m.dtype->numpy.dtype('f4,i4')
A:numpy.ma.tests.test_core.fval->_check_fill_value(-999999999, ndtype)
A:numpy.ma.tests.test_core.fill_val->numpy.ndarray(shape=(1,), dtype=object)
A:numpy.ma.tests.test_core.f1->default_fill_value(fields)
A:numpy.ma.tests.test_core.f2->default_fill_value(fields.dtype)
A:numpy.ma.tests.test_core.f3->default_fill_value(np.array(1.0).dtype)
A:numpy.ma.tests.test_core.fields->array([(1, 1, 1)], dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_core.expected->array([11, 22, 33], mask=[1, 0, 0])
A:numpy.ma.tests.test_core.ndtype->numpy.dtype([('a', float), ('b', int)])
A:numpy.ma.tests.test_core.M->masked_array(control)
A:numpy.ma.tests.test_core.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_core.mf->getattr(numpy.ma.core, f)
A:numpy.ma.tests.test_core.ur->uf(*args)
A:numpy.ma.tests.test_core.mr->mf(*args)
A:numpy.ma.tests.test_core.amask->numpy.array([(0, (1, 0)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.me->MyClass()
A:numpy.ma.tests.test_core.me_too->MyClass2()
A:numpy.ma.tests.test_core.xx_r->array([1, 2 ** 2, 3], mask=[0, 0, 1], dtype=t)
A:numpy.ma.tests.test_core.X->numpy.empty(4, dt).reshape(6, 6)
A:numpy.ma.tests.test_core.XX->numpy.empty(4, dt).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_core.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_core.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_core.m2x->array(data=x, mask=m2)
A:numpy.ma.tests.test_core.m2X->array(data=X, mask=m2.reshape(X.shape))
A:numpy.ma.tests.test_core.m2XX->array(data=XX, mask=m2.reshape(XX.shape))
A:numpy.ma.tests.test_core.store->empty(4, dtype=int).view(ndarray)
A:numpy.ma.tests.test_core.full->array([1, 2, 3], mask=True)
A:numpy.ma.tests.test_core.clipped->numpy.ma.array(x, mask=x).clip(2, 8)
A:numpy.ma.tests.test_core.mxx->numpy.ma.array(x, mask=x).copy()
A:numpy.ma.tests.test_core.values->array([10, 20, 30, 40, 50, 60], mask=[1, 1, 1, 0, 0, 0])
A:numpy.ma.tests.test_core.aravel->array([1, 2, 3], mask=[1, 0, 0]).ravel()
A:numpy.ma.tests.test_core.ar->array([1, 2, 3], mask=[1, 0, 0]).ravel()
A:numpy.ma.tests.test_core.arr->numpy.ma.array([None, None])
A:numpy.ma.tests.test_core.raveled->numpy.empty(4, dt).ravel(order)
A:numpy.ma.tests.test_core.sortedx->sort(x, **kwargs)
A:numpy.ma.tests.test_core.computed->argsort(x, kind='stable')
A:numpy.ma.tests.test_core.am->numpy.ma.masked_where(a['A'] < 5, a)
A:numpy.ma.tests.test_core.an->array([1, 2, 3], mask=[1, 0, 0]).filled(99)
A:numpy.ma.tests.test_core.mask_last->array(data=[(1, 1), (1, 2), (2, 1), (2, 2), (3, 3), (3, 2), (1, 0)], mask=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (1, 0)], dtype=[('A', int), ('B', int)])
A:numpy.ma.tests.test_core.mask_first->array(data=[(1, 0), (1, 1), (1, 2), (2, 1), (2, 2), (3, 2), (3, 3)], mask=[(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (0, 0)], dtype=[('A', int), ('B', int)])
A:numpy.ma.tests.test_core.arr_sq->numpy.ma.array([None, None]).squeeze()
A:numpy.ma.tests.test_core.m_arr->numpy.ma.masked_array(arr, False)
A:numpy.ma.tests.test_core.m_arr_sq->numpy.ma.masked_array(arr, False).squeeze()
A:numpy.ma.tests.test_core.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_core.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_core.mindices->array(indices, mask=indices >= len(a))
A:numpy.ma.tests.test_core.ctrl->array([[2 ** 2, 4 ** 4, 3 ** 3], [2 ** 2, 4 ** 4, 3 ** 3]], mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.xlist->numpy.empty(4, dt).tolist()
A:numpy.ma.tests.test_core.record->numpy.array(iterator).toflex()
A:numpy.ma.tests.test_core.marray->masked_array([[1, 2, 3, 4, 5]], mask=[0, 0, 1, 0, 0])
A:numpy.ma.tests.test_core.xd->numpy.empty(4, dt).diagonal()
A:numpy.ma.tests.test_core.mXcp->array(data=X, mask=m.reshape(X.shape)).cumprod(1)
A:numpy.ma.tests.test_core.rows->numpy.zeros(n, float)
A:numpy.ma.tests.test_core.cols->numpy.zeros(m, float)
A:numpy.ma.tests.test_core.cols[k]->numpy.ptp(mX[:, k].compressed())
A:numpy.ma.tests.test_core.rows[k]->numpy.ptp(mX[k].compressed())
A:numpy.ma.tests.test_core.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_core.fx->numpy.ma.array(x, mask=x).filled(0)
A:numpy.ma.tests.test_core.r->numpy.ma.array(1, mask=a.mask).copy()
A:numpy.ma.tests.test_core.fX->array(data=X, mask=m.reshape(X.shape)).filled(0)
A:numpy.ma.tests.test_core.mYY->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(-1, -2)
A:numpy.ma.tests.test_core.foo->array(np.arange(16).reshape((4, 4)), dtype='f8')
A:numpy.ma.tests.test_core.bar->empty(4, dtype='f4')
A:numpy.ma.tests.test_core.mout->array(-1, dtype=float)
A:numpy.ma.tests.test_core.method->getattr(x, methodname)
A:numpy.ma.tests.test_core.out->array([0, 0, 0], mask=[0, 0, 1])
A:numpy.ma.tests.test_core.a_prep->numpy.ma.masked_equal(x[:3], value=2)
A:numpy.ma.tests.test_core.diff1->numpy.ma.diff(a, append=a_app, axis=0)
A:numpy.ma.tests.test_core.diff2->numpy.ma.diff(b, axis=0)
A:numpy.ma.tests.test_core.a_app->numpy.ma.masked_equal(x[3:], value=2)
A:numpy.ma.tests.test_core.diff->numpy.ma.diff(a, n=0, axis=0)
A:numpy.ma.tests.test_core.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_core.a2->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
A:numpy.ma.tests.test_core.a2m->array(a2, mask=[[1, 0, 0], [0, 0, 1]])
A:numpy.ma.tests.test_core.b1->numpy.array([2, 4, 3])
A:numpy.ma.tests.test_core.b2->numpy.array([b1, b1])
A:numpy.ma.tests.test_core.b2m->array(b2, mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.tmp->masked_array(x, mask=m1)._mask.copy()
A:numpy.ma.tests.test_core.ixm->masked_array(x, mask=m1).astype(int)
A:numpy.ma.tests.test_core.cm->numpy.reshape(a, (2, 5)).filled(1)
A:numpy.ma.tests.test_core.core->numpy.where([0, 1, 1], x, y)
A:numpy.ma.tests.test_core.chosen->choose(indices_, choices, mode='wrap', out=store)
A:numpy.ma.tests.test_core.indices_->array([2, 3, 1, 0], mask=[1, 0, 0, 1])
A:numpy.ma.tests.test_core.choices->array(choices, mask=[[0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])
A:numpy.ma.tests.test_core.base_type->numpy.dtype([('a', int, 3)])
A:numpy.ma.tests.test_core.base_mtype->make_mask_descr(base_type)
A:numpy.ma.tests.test_core.sub_type->numpy.dtype([('a', int), ('b', base_mtype)])
A:numpy.ma.tests.test_core.test2->make_mask(mask, dtype=mask.dtype)
A:numpy.ma.tests.test_core.other->numpy.array([(0, 1), (0, 1), (0, 1), (0, 1)], dtype=othertype)
A:numpy.ma.tests.test_core.bmask->numpy.array([(1, (0, 1)), (0, (0, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.cntrl->numpy.array([(1, (1, 1)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.cond->numpy.array([True, False, True, True])
A:numpy.ma.tests.test_core.marr->numpy.ma.array(arr)
A:numpy.ma.tests.test_core.base->array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
A:numpy.ma.tests.test_core.self.data->dict(base=base, mask=mask, ddtype=ddtype, mdtype=mdtype)
A:numpy.ma.tests.test_core.iterator->list(zip(np.arange(10), np.random.rand(10)))
A:numpy.ma.tests.test_core.controlmask->numpy.array([1] + 19 * [0], dtype=bool)
A:numpy.ma.tests.test_core.a.mask->numpy.array(list(zip([0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0])), dtype=[('a', bool), ('b', bool)])
A:numpy.ma.tests.test_core.mdtype->numpy.dtype([('a', bool), ('b', bool)])
A:numpy.ma.tests.test_core.mask_0d->numpy.ma.masked_array(1, mask=True)
A:numpy.ma.tests.test_core.a0->numpy.eye(2).astype(dt)
A:numpy.ma.tests.test_core.a1->numpy.eye(3).astype(dt)
A:numpy.ma.tests.test_core.numpy_f->numpy.__getattribute__(f)
A:numpy.ma.tests.test_core.ma_f->numpy.ma.__getattribute__(f)
A:numpy.ma.tests.test_core.vector->numpy.array([1, 2, 3])
A:numpy.ma.tests.test_core.masked2->numpy.ma.MaskedArray.__new__(np.ma.core.MaskedConstant)
A:numpy.ma.tests.test_core.view->numpy.ma.masked.view(np.ma.MaskedArray)
A:numpy.ma.tests.test_core.a_i->numpy.zeros((), int)
A:numpy.ma.tests.test_core.a_f->numpy.zeros((), float)
A:numpy.ma.tests.test_core.a_u->numpy.zeros((), 'U10')
A:numpy.ma.tests.test_core.a_b->numpy.zeros((), 'S10')
A:numpy.ma.tests.test_core._->numpy.ma.masked_invalid(a, copy=False)
A:numpy.ma.tests.test_core.out_pos->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_pos->numpy.add(a, b, out_pos)
A:numpy.ma.tests.test_core.out_kw->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_kw->numpy.add(a, b, out=out_kw)
A:numpy.ma.tests.test_core.out_tup->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_tup->numpy.add(a, b, out=(out_tup,))
A:numpy.ma.tests.test_core.descr->numpy.dtype([('v', int, 3), ('x', [('y', float)])])
A:numpy.ma.tests.test_core.x_a->numpy.empty(4, dt).astype(descr)
A:numpy.ma.tests.test_core.x_f->numpy.empty(4, dt).astype(x.dtype, order='F')
A:numpy.ma.tests.test_core.x_a2->numpy.array(x, dtype=descr, subok=True)
A:numpy.ma.tests.test_core.x_f2->numpy.array(x, dtype=x.dtype, order='F', subok=True)
A:numpy.ma.tests.test_core.src->numpy.ma.array(ones(3, dt1), fill_value=1)
A:numpy.ma.tests.test_core.dst->numpy.ma.array(ones(3, dt1), fill_value=1).astype(dt2)
A:numpy.ma.tests.test_core.source->numpy.ma.array(0, mask=[0], dtype=object)
A:numpy.ma.tests.test_core.deepcopy->copy.deepcopy(source)
A:numpy.ma.tests.test_core.axis->numpy.array(0)
A:numpy.ma.tests.test_core.array->numpy.ma.masked_array(data=-1, mask=True, dtype=np.float64)
numpy.ma.tests.test_TestFillingValues
numpy.ma.tests.test_TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value_structured(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value_void(self)
numpy.ma.tests.test_TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_TestFillingValues.test_extremum_fill_value_subdtype(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_bytes_or_str(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_datetime_timedelta(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_TestFillingValues.test_shape_argument(self)
numpy.ma.tests.test_TestFillingValues.test_subarray_fillvalue(self)
numpy.ma.tests.test_TestMaskedArray
numpy.ma.tests.test_TestMaskedArray.setup_method(self)
numpy.ma.tests.test_TestMaskedArray.test_0d_unicode(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray_default_order(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray_enforce_order(self)
numpy.ma.tests.test_TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_TestMaskedArray.test_copy(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_0d(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_immutable(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_on_python_builtins(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_from_ndarray_with_padding(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_with_list_of_maskedarrays_no_bool_cast(self)
numpy.ma.tests.test_TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_f_order(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_mvoid(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_nested_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_object_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_TestMaskedArray.test_format(self)
numpy.ma.tests.test_TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_TestMaskedArray.test_masked_singleton_array_creation_warns(self)
numpy.ma.tests.test_TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_multidim_print(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_TestMaskedArray.test_object_with_array(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_TestMaskedArray.test_optinfo_forward_propagation(self)
numpy.ma.tests.test_TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_TestMaskedArray.test_setitem_no_warning(self)
numpy.ma.tests.test_TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_TestMaskedArray.test_str_repr(self)
numpy.ma.tests.test_TestMaskedArray.test_str_repr_legacy(self)
numpy.ma.tests.test_TestMaskedArray.test_topython(self)
numpy.ma.tests.test_TestMaskedArray.test_unknown_keyword_parameter(self)
numpy.ma.tests.test_TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic
numpy.ma.tests.test_TestMaskedArrayArithmetic.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.teardown_method(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_comp_no_mask_not_broadcast(self,op)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_comparisons_for_numeric(self,op,dt1,dt2,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_comparisons_strings(self,op,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_count_on_python_builtins(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_broadcast_with_unmasked(self,op)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_different_dimensions(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_for_strings(self,dt,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_ne_structured_extra(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_ne_structured_with_non_masked(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_with_None(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_with_scalar(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_dtypes(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_for_strings(self,dt,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_noshink_on_creation(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_numpyarithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ufunc_nomask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes
numpy.ma.tests.test_TestMaskedArrayAttributes.test_assign_dtype(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions
numpy.ma.tests.test_TestMaskedArrayFunctions.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_compressed(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_convolve(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_invalid_error(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_invalid_full_mask(self,copy)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_invalid_pandas(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_mismatch(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_structured(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power_with_broadcasting(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round_with_scalar(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_broadcast(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_object(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_structured(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_structured_masked(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_add(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_div(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_mul(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_pow(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_sub(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_addition_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_addition_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_addition_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_addition_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_array_float(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_misc(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_float(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_int(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_floor_division_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_floor_division_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_pow_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods
numpy.ma.tests.test_TestMaskedArrayMathMethods.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_add_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_anom(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_anom_shape(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diff_with_append(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diff_with_dim_0(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diff_with_n_0(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diff_with_prepend(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_dot(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_dot_shape_mismatch(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_mean_overflow(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varmean_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMethods
numpy.ma.tests.test_TestMaskedArrayMethods.setup_method(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allclose_timedelta(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argsort_matches_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_arraymethod_0d(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_clip_out(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_diagonal_view(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_ones(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_ravel_order(self,order,data_order)
numpy.ma.tests.test_TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_stable_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_transpose_view(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_zeros(self)
numpy.ma.tests.test_TestMaskedConstant
numpy.ma.tests.test_TestMaskedConstant._do_add_test(self,add)
numpy.ma.tests.test_TestMaskedConstant.test__copy(self)
numpy.ma.tests.test_TestMaskedConstant.test_attributes_readonly(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_bytes(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_float(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_int(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_unicode(self)
numpy.ma.tests.test_TestMaskedConstant.test_copy(self)
numpy.ma.tests.test_TestMaskedConstant.test_ctor(self)
numpy.ma.tests.test_TestMaskedConstant.test_deepcopy(self)
numpy.ma.tests.test_TestMaskedConstant.test_immutable(self)
numpy.ma.tests.test_TestMaskedConstant.test_operator(self)
numpy.ma.tests.test_TestMaskedConstant.test_pickle(self)
numpy.ma.tests.test_TestMaskedConstant.test_repr(self)
numpy.ma.tests.test_TestMaskedConstant.test_subclass(self)
numpy.ma.tests.test_TestMaskedConstant.test_ufunc(self)
numpy.ma.tests.test_TestMaskedFields
numpy.ma.tests.test_TestMaskedFields.setup_method(self)
numpy.ma.tests.test_TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_TestMaskedFields.test_setitem_scalar(self)
numpy.ma.tests.test_TestMaskedFields.test_view(self)
numpy.ma.tests.test_TestMaskedObjectArray
numpy.ma.tests.test_TestMaskedObjectArray.test_getitem(self)
numpy.ma.tests.test_TestMaskedObjectArray.test_nested_ma(self)
numpy.ma.tests.test_TestMaskedView
numpy.ma.tests.test_TestMaskedView.setup_method(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_TestMaskedWhereAliases
numpy.ma.tests.test_TestMaskedWhereAliases.test_masked_values(self)
numpy.ma.tests.test_TestOptionalArgs
numpy.ma.tests.test_TestOptionalArgs.test_count(self)
numpy.ma.tests.test_TestOptionalArgs.test_ndarrayfuncs(self)
numpy.ma.tests.test_TestUfuncs
numpy.ma.tests.test_TestUfuncs.setup_method(self)
numpy.ma.tests.test_TestUfuncs.teardown_method(self)
numpy.ma.tests.test_TestUfuncs.test_minmax(self)
numpy.ma.tests.test_TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_TestUfuncs.test_no_masked_nan_warnings(self)
numpy.ma.tests.test_TestUfuncs.test_reduce(self)
numpy.ma.tests.test_TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.TestFillingValues
numpy.ma.tests.test_core.TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_core.TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_structured(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_void(self)
numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value_subdtype(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_bytes_or_str(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_datetime_timedelta(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_core.TestFillingValues.test_shape_argument(self)
numpy.ma.tests.test_core.TestFillingValues.test_subarray_fillvalue(self)
numpy.ma.tests.test_core.TestMaskedArray
numpy.ma.tests.test_core.TestMaskedArray.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArray.test_0d_unicode(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray_default_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray_enforce_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_0d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_immutable(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_on_python_builtins(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_from_ndarray_with_padding(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays_no_bool_cast(self)
numpy.ma.tests.test_core.TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_f_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_mvoid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_nested_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_object_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_core.TestMaskedArray.test_format(self)
numpy.ma.tests.test_core.TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_core.TestMaskedArray.test_masked_singleton_array_creation_warns(self)
numpy.ma.tests.test_core.TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_multidim_print(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_core.TestMaskedArray.test_object_with_array(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_forward_propagation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_core.TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_core.TestMaskedArray.test_setitem_no_warning(self)
numpy.ma.tests.test_core.TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_core.TestMaskedArray.test_str_repr(self)
numpy.ma.tests.test_core.TestMaskedArray.test_str_repr_legacy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_topython(self)
numpy.ma.tests.test_core.TestMaskedArray.test_unknown_keyword_parameter(self)
numpy.ma.tests.test_core.TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.teardown_method(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_comp_no_mask_not_broadcast(self,op)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_comparisons_for_numeric(self,op,dt1,dt2,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_comparisons_strings(self,op,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_on_python_builtins(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_broadcast_with_unmasked(self,op)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_different_dimensions(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_for_strings(self,dt,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_ne_structured_extra(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_ne_structured_with_non_masked(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_None(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_dtypes(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_for_strings(self,dt,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshink_on_creation(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_numpyarithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ufunc_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_assign_dtype(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions
numpy.ma.tests.test_core.TestMaskedArrayFunctions.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_convolve(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_invalid_error(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_invalid_full_mask(self,copy)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_invalid_pandas(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_mismatch(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power_with_broadcasting(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_broadcast(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_object(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured_masked(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_add(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_div(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_mul(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_pow(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_sub(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_addition_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_addition_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_addition_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_addition_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_array_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_misc(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_int(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_division_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_floor_division_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_floor_division_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_multiplication_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_pow_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetic.test_inplace_subtraction_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_add_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_anom(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_anom_shape(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diff_with_append(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diff_with_dim_0(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diff_with_n_0(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diff_with_prepend(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot_shape_mismatch(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_mean_overflow(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varmean_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods
numpy.ma.tests.test_core.TestMaskedArrayMethods.setup_method(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose_timedelta(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort_matches_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod_0d(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip_out(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_diagonal_view(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ones(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ravel_order(self,order,data_order)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_stable_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_transpose_view(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_zeros(self)
numpy.ma.tests.test_core.TestMaskedConstant
numpy.ma.tests.test_core.TestMaskedConstant._do_add_test(self,add)
numpy.ma.tests.test_core.TestMaskedConstant.test__copy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_attributes_readonly(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_bytes(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_float(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_int(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_unicode(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_copy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_ctor(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_deepcopy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_immutable(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_operator(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_pickle(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_repr(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_subclass(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_ufunc(self)
numpy.ma.tests.test_core.TestMaskedFields
numpy.ma.tests.test_core.TestMaskedFields.setup_method(self)
numpy.ma.tests.test_core.TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_core.TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_core.TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_setitem_scalar(self)
numpy.ma.tests.test_core.TestMaskedFields.test_view(self)
numpy.ma.tests.test_core.TestMaskedObjectArray
numpy.ma.tests.test_core.TestMaskedObjectArray.test_getitem(self)
numpy.ma.tests.test_core.TestMaskedObjectArray.test_nested_ma(self)
numpy.ma.tests.test_core.TestMaskedView
numpy.ma.tests.test_core.TestMaskedView.setup_method(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_core.TestMaskedWhereAliases
numpy.ma.tests.test_core.TestMaskedWhereAliases.test_masked_values(self)
numpy.ma.tests.test_core.TestOptionalArgs
numpy.ma.tests.test_core.TestOptionalArgs.test_count(self)
numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs(self)
numpy.ma.tests.test_core.TestUfuncs
numpy.ma.tests.test_core.TestUfuncs.setup_method(self)
numpy.ma.tests.test_core.TestUfuncs.teardown_method(self)
numpy.ma.tests.test_core.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_core.TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_core.TestUfuncs.test_no_masked_nan_warnings(self)
numpy.ma.tests.test_core.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_core.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.test_append_masked_array()
numpy.ma.tests.test_core.test_append_masked_array_along_axis()
numpy.ma.tests.test_core.test_astype_basic(dt1,dt2)
numpy.ma.tests.test_core.test_astype_mask_ordering()
numpy.ma.tests.test_core.test_deepcopy_0d_obj()
numpy.ma.tests.test_core.test_deepcopy_2d_obj()
numpy.ma.tests.test_core.test_default_fill_value_complex()
numpy.ma.tests.test_core.test_doc_note()
numpy.ma.tests.test_core.test_fieldless_void()
numpy.ma.tests.test_core.test_gh_21022()
numpy.ma.tests.test_core.test_gh_22556()
numpy.ma.tests.test_core.test_mask_shape_assignment_does_not_break_masked()
numpy.ma.tests.test_core.test_masked_array()
numpy.ma.tests.test_core.test_masked_array_no_copy()
numpy.ma.tests.test_core.test_ufunc_with_out_varied()
numpy.ma.tests.test_core.test_ufunc_with_output()
numpy.ma.tests.test_test_append_masked_array()
numpy.ma.tests.test_test_append_masked_array_along_axis()
numpy.ma.tests.test_test_astype_basic(dt1,dt2)
numpy.ma.tests.test_test_astype_mask_ordering()
numpy.ma.tests.test_test_deepcopy_0d_obj()
numpy.ma.tests.test_test_deepcopy_2d_obj()
numpy.ma.tests.test_test_default_fill_value_complex()
numpy.ma.tests.test_test_doc_note()
numpy.ma.tests.test_test_fieldless_void()
numpy.ma.tests.test_test_gh_21022()
numpy.ma.tests.test_test_gh_22556()
numpy.ma.tests.test_test_mask_shape_assignment_does_not_break_masked()
numpy.ma.tests.test_test_masked_array()
numpy.ma.tests.test_test_masked_array_no_copy()
numpy.ma.tests.test_test_ufunc_with_out_varied()
numpy.ma.tests.test_test_ufunc_with_output()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_arrayobject.py----------------------------------------
A:numpy.ma.tests.test_arrayobject.ma_arr->masked_array(data=arr, mask=mask)
A:numpy.ma.tests.test_arrayobject.num_of_axes->len(shape)
A:numpy.ma.tests.test_arrayobject.vec->numpy.arange(shape[-1])
A:numpy.ma.tests.test_arrayobject.arr->numpy.broadcast_to(vec, shape)
A:numpy.ma.tests.test_arrayobject.rng->numpy.random.default_rng(42)
A:numpy.ma.tests.test_arrayobject.mask->numpy.random.default_rng(42).choice([0, 1], size=shape)
A:numpy.ma.tests.test_arrayobject.tgt->numpy.swapaxes(arr, num_of_axes - 2, num_of_axes - 1)
numpy.ma.tests.test_arrayobject.test_matrix_transpose_equals_swapaxes(shape)
numpy.ma.tests.test_arrayobject.test_matrix_transpose_equals_transpose_2d()
numpy.ma.tests.test_arrayobject.test_matrix_transpose_raises_error_for_1d()


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_regression.py----------------------------------------
A:numpy.ma.tests.test_regression.x->numpy.ma.masked_equal([1, 2, 3, 4, 5], 4)
A:numpy.ma.tests.test_regression.a->numpy.ma.MaskedArray([1.0, 2.0], mask=[False, False])
A:numpy.ma.tests.test_regression.b->numpy.tile(a, (2, 1))
A:numpy.ma.tests.test_regression.c->masked_where(b, a)
A:numpy.ma.tests.test_regression.mout->numpy.ma.array(-1, dtype=float)
A:numpy.ma.tests.test_regression.y->numpy.array([2, 2.5, 3.1, 3, 5])
A:numpy.ma.tests.test_regression.r0->numpy.ma.corrcoef(x, y, ddof=0)
A:numpy.ma.tests.test_regression.r1->numpy.ma.corrcoef(x, y, ddof=1)
A:numpy.ma.tests.test_regression.ma->numpy.ma.arange(4).reshape((2, 2))
numpy.ma.tests.test_regression.TestRegression
numpy.ma.tests.test_regression.TestRegression.test_atleast_2d(self)
numpy.ma.tests.test_regression.TestRegression.test_ddof_corrcoef(self)
numpy.ma.tests.test_regression.TestRegression.test_empty_list_on_structured(self)
numpy.ma.tests.test_regression.TestRegression.test_mask_not_backmangled(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_create(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_multiply(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repeat(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repr_unicode(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_tobytes_fortran(self)
numpy.ma.tests.test_regression.TestRegression.test_mem_masked_where(self)
numpy.ma.tests.test_regression.TestRegression.test_set_fill_value_unicode_py3(self)
numpy.ma.tests.test_regression.TestRegression.test_structured_array(self)
numpy.ma.tests.test_regression.TestRegression.test_var_sets_maskedarray_scalar(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/numpy2.0.2/lib/python3.9/site-packages/numpy/ma/tests/test_extras.py----------------------------------------
A:numpy.ma.tests.test_extras.test->setdiff1d(a, b)
A:numpy.ma.tests.test_extras.control->array([1, 2, 3, 4, 5, 7, -1], mask=[0, 0, 0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.dt->numpy.dtype([('a', 'f'), ('b', [('ba', 'f'), ('bb', 'f')])])
A:numpy.ma.tests.test_extras.my_dtype->numpy.dtype([('b', (object, (1,)))])
A:numpy.ma.tests.test_extras.masked_arr->numpy.ma.masked_equal(data, 0)
A:numpy.ma.tests.test_extras.base->array([(0, 0), (0, 0)], mask=[(1, 1), (1, 1)], dtype=dt)
A:numpy.ma.tests.test_extras.k->numpy.arange(i, dtype=int)
A:numpy.ma.tests.test_extras.ja->numpy.full(i, j, dtype=int)
A:numpy.ma.tests.test_extras.a->masked_array([0, 1, 2], mask=True)
A:numpy.ma.tests.test_extras.a.mask->numpy.zeros(10, dtype=bool)
A:numpy.ma.tests.test_extras.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_extras.(result, wts)->average(ott, axis=0, returned=True)
A:numpy.ma.tests.test_extras.x->array([[0, 1, 2], [3, 4, 5]], mask=[[0, 0, 0], [0, 0, 1]])
A:numpy.ma.tests.test_extras.y->array([0, 1, 2, 3, 4], mask=[0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.m1->numpy.random.randint(0, 2, shp).astype(bool)
A:numpy.ma.tests.test_extras.m4->ones(6)
A:numpy.ma.tests.test_extras.z->union1d(x, y)
A:numpy.ma.tests.test_extras.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=True)
A:numpy.ma.tests.test_extras.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=True)
A:numpy.ma.tests.test_extras.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_extras.a2dm->masked_array(a2d, [[False, False], [True, False]])
A:numpy.ma.tests.test_extras.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_extras.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_extras.b->masked_array([9, 8, 7], mask=False)
A:numpy.ma.tests.test_extras.w->w.astype(np.intp).astype(np.intp)
A:numpy.ma.tests.test_extras.actual->average(yma, axis=(1, 0), weights=subw0)
A:numpy.ma.tests.test_extras.desired->average(yma, axis=(0, 1), weights=subw0.T)
A:numpy.ma.tests.test_extras.m->numpy.zeros((3, 4, 5)).astype(bool)
A:numpy.ma.tests.test_extras.yma->numpy.ma.array(y, mask=m)
A:numpy.ma.tests.test_extras.mask->numpy.zeros([2, 3, 4])
A:numpy.ma.tests.test_extras.av->average(a)
A:numpy.ma.tests.test_extras.expected->numpy.corrcoef(x)
A:numpy.ma.tests.test_extras.av0->average(a, axis=0)
A:numpy.ma.tests.test_extras.av1->average(a, axis=1)
A:numpy.ma.tests.test_extras.wts->numpy.array([[0.5, 1.0, 2.0, 1.0, 0.5], [1.0, 1.0, 1.0, 1.0, 1.0]])
A:numpy.ma.tests.test_extras.wav->average(a, weights=wts)
A:numpy.ma.tests.test_extras.wav0->average(a, weights=wts, axis=0)
A:numpy.ma.tests.test_extras.wav1->average(a, weights=wts, axis=1)
A:numpy.ma.tests.test_extras.avg->numpy.ma.average(x, axis=axis, keepdims=True)
A:numpy.ma.tests.test_extras.wavg->numpy.ma.average(x, axis=axis, weights=weights, keepdims=True)
A:numpy.ma.tests.test_extras.(wavg, wsum)->numpy.ma.average(x, axis=axis, weights=weights, returned=True, keepdims=True)
A:numpy.ma.tests.test_extras.weights_unmasked->masked_array([5, 28, 31], mask=False)
A:numpy.ma.tests.test_extras.weights_masked->masked_array([5, 28, 31], mask=[1, 0, 0])
A:numpy.ma.tests.test_extras.avg_unmasked->average(a, weights=[1, 1, 1, np.nan])
A:numpy.ma.tests.test_extras.expected_unmasked->numpy.array([6.0, 5.21875, 6.21875])
A:numpy.ma.tests.test_extras.avg_masked->numpy.ma.average(a, weights=[1, np.nan, 1], axis=0)
A:numpy.ma.tests.test_extras.expected_masked->numpy.array([6.0, 5.576271186440678, 6.576271186440678])
A:numpy.ma.tests.test_extras.avg_expected->numpy.ma.array([1.0, np.nan, np.nan, 3.5], mask=[False, True, True, False])
A:numpy.ma.tests.test_extras.d->vstack([a, b])
A:numpy.ma.tests.test_extras.a_1->numpy.random.rand(5, 5)
A:numpy.ma.tests.test_extras.a_2->numpy.random.rand(5, 5)
A:numpy.ma.tests.test_extras.m_1->numpy.round(np.random.rand(5, 5), 0)
A:numpy.ma.tests.test_extras.m_2->numpy.round(np.random.rand(5, 5), 0)
A:numpy.ma.tests.test_extras.b_1->masked_array(a_1, mask=m_1)
A:numpy.ma.tests.test_extras.b_2->masked_array(a_2, mask=m_2)
A:numpy.ma.tests.test_extras.data->masked_array([1, 1, 1], mask=True)
A:numpy.ma.tests.test_extras.tmp->notmasked_contiguous(a, 1)
A:numpy.ma.tests.test_extras.a2->masked_array(d2, mask=m2)
A:numpy.ma.tests.test_extras.a3->compress_nd(x, (1, -1))
A:numpy.ma.tests.test_extras.a4->compress_nd(x, (-2, -1))
A:numpy.ma.tests.test_extras.res->dot(a, a, out=out)
A:numpy.ma.tests.test_extras.n->numpy.arange(1, 7)
A:numpy.ma.tests.test_extras.c->stack([a1, a2], axis=-1)
A:numpy.ma.tests.test_extras.out->masked_array(np.empty(shape_out))
A:numpy.ma.tests.test_extras.xa->apply_along_axis(myfunc, 2, a, offset=1)
A:numpy.ma.tests.test_extras.ctrl->numpy.array([[[28], [44], [60]]])
A:numpy.ma.tests.test_extras.r->numpy.ma.median(dm, axis=-1)
A:numpy.ma.tests.test_extras.ma_x->numpy.ma.median(x, axis=-1, overwrite_input=True)
A:numpy.ma.tests.test_extras.args->itertools.product([-(ndmin + 1), ndmin], [False, True])
A:numpy.ma.tests.test_extras.idx->numpy.arange(len(x))
A:numpy.ma.tests.test_extras.e->masked_array([0.0] * 3 + [13.5, 17.5, 21.5, 25.5] + [0.0] * 3, mask=[True] * 3 + [False] * 4 + [True] * 3)
A:numpy.ma.tests.test_extras.axis_norm->normalize_axis_tuple(axis, d.ndim)
A:numpy.ma.tests.test_extras.shape_out->tuple((1 if i in axis_norm else d.shape[i] for i in range(d.ndim)))
A:numpy.ma.tests.test_extras.result->median(d, axis=axis, keepdims=True, out=out)
A:numpy.ma.tests.test_extras.dm->numpy.ma.array([[1, np.nan, 3], [1, 2, 3]])
A:numpy.ma.tests.test_extras.o->numpy.ma.masked_array(np.arange(7.0))
A:numpy.ma.tests.test_extras.aorig->masked_array([0, 1, 2], mask=True).copy()
A:numpy.ma.tests.test_extras.self.data->array(np.random.rand(12))
A:numpy.ma.tests.test_extras.nx->array([[0, 1, 2], [3, 4, 5]], mask=[[0, 0, 0], [0, 0, 1]]).compressed()
A:numpy.ma.tests.test_extras.valid->numpy.logical_not(getmaskarray(x)).astype(int)
A:numpy.ma.tests.test_extras.frac->numpy.dot(valid.T, valid)
A:numpy.ma.tests.test_extras.xf->(x - x.mean(0)).filled(0)
A:numpy.ma.tests.test_extras.self.data2->array(np.random.rand(12))
A:numpy.ma.tests.test_extras.expected2->numpy.corrcoef(x, y)
A:numpy.ma.tests.test_extras.(C, R, K, S, D)->polyfit(x, y, 3, full=True)
A:numpy.ma.tests.test_extras.(c, r, k, s, d)->numpy.polyfit(x[1:-1], y[1:-1, :], 3, full=True)
A:numpy.ma.tests.test_extras.wo->w.astype(np.intp).astype(np.intp).copy()
A:numpy.ma.tests.test_extras.ec->zeros((2, 3, 4), dtype=bool)
A:numpy.ma.tests.test_extras.ez->array([0, 1, 2, 3, 4, 5], mask=[0, 0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.ordinary->numpy.arange(6.0).reshape((1, 3, 2))
A:numpy.ma.tests.test_extras.empty_mask->numpy.zeros_like(ordinary, dtype=bool)
A:numpy.ma.tests.test_extras.with_mask->masked_array(ordinary, mask=empty_mask)
A:numpy.ma.tests.test_extras.d1->numpy.random.randint(0, 10, shp)
A:numpy.ma.tests.test_extras.d2->numpy.random.randint(0, 10, shp)
A:numpy.ma.tests.test_extras.m2->numpy.random.randint(0, 2, shp).astype(bool)
A:numpy.ma.tests.test_extras.a1->masked_array(d1, mask=m1)
numpy.ma.tests.test_TestApplyAlongAxis
numpy.ma.tests.test_TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_TestApplyAlongAxis.test_3d_kwargs(self)
numpy.ma.tests.test_TestApplyOverAxes
numpy.ma.tests.test_TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_TestArraySetOps
numpy.ma.tests.test_TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_TestArraySetOps.test_isin(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_TestAverage
numpy.ma.tests.test_TestAverage.test_basic_keepdims(self,x,axis,expected_avg,weights,expected_wavg,expected_wsum)
numpy.ma.tests.test_TestAverage.test_complex(self)
numpy.ma.tests.test_TestAverage.test_masked_weights(self)
numpy.ma.tests.test_TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_TestAverage.test_testAverage1(self)
numpy.ma.tests.test_TestAverage.test_testAverage2(self)
numpy.ma.tests.test_TestAverage.test_testAverage3(self)
numpy.ma.tests.test_TestAverage.test_testAverage4(self)
numpy.ma.tests.test_TestAverage.test_weight_and_input_dims_different(self)
numpy.ma.tests.test_TestCompressFunctions
numpy.ma.tests.test_TestCompressFunctions.test_compress_nd(self)
numpy.ma.tests.test_TestCompressFunctions.test_compress_rowcols(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot_out(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot_returns_maskedarray(self)
numpy.ma.tests.test_TestCompressFunctions.test_mask_row_cols_axis_deprecation(self,axis,func,rowcols_axis)
numpy.ma.tests.test_TestCompressFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_TestConcatenator
numpy.ma.tests.test_TestConcatenator.test_1d(self)
numpy.ma.tests.test_TestConcatenator.test_2d(self)
numpy.ma.tests.test_TestConcatenator.test_masked_constant(self)
numpy.ma.tests.test_TestCorrcoef
numpy.ma.tests.test_TestCorrcoef.setup_method(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_with_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_without_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_with_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_without_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_bias(self)
numpy.ma.tests.test_TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_TestCov
numpy.ma.tests.test_TestCov.setup_method(self)
numpy.ma.tests.test_TestCov.test_1d_with_missing(self)
numpy.ma.tests.test_TestCov.test_1d_without_missing(self)
numpy.ma.tests.test_TestCov.test_2d_with_missing(self)
numpy.ma.tests.test_TestCov.test_2d_without_missing(self)
numpy.ma.tests.test_TestGeneric
numpy.ma.tests.test_TestGeneric.check_clump(self,f)
numpy.ma.tests.test_TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_TestGeneric.test_masked_all(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_with_object(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_with_object_nested(self)
numpy.ma.tests.test_TestMedian
numpy.ma.tests.test_TestMedian.test_1d_shape_consistency(self)
numpy.ma.tests.test_TestMedian.test_2d(self)
numpy.ma.tests.test_TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_TestMedian.test_3d(self)
numpy.ma.tests.test_TestMedian.test_ambigous_fill(self)
numpy.ma.tests.test_TestMedian.test_axis_argument_errors(self)
numpy.ma.tests.test_TestMedian.test_docstring_examples(self)
numpy.ma.tests.test_TestMedian.test_empty(self)
numpy.ma.tests.test_TestMedian.test_inf(self)
numpy.ma.tests.test_TestMedian.test_keepdims_out(self,axis)
numpy.ma.tests.test_TestMedian.test_masked_0d(self)
numpy.ma.tests.test_TestMedian.test_masked_1d(self)
numpy.ma.tests.test_TestMedian.test_nan(self)
numpy.ma.tests.test_TestMedian.test_nan_behavior(self)
numpy.ma.tests.test_TestMedian.test_neg_axis(self)
numpy.ma.tests.test_TestMedian.test_non_masked(self)
numpy.ma.tests.test_TestMedian.test_object(self)
numpy.ma.tests.test_TestMedian.test_out(self)
numpy.ma.tests.test_TestMedian.test_out_1d(self)
numpy.ma.tests.test_TestMedian.test_out_nan(self)
numpy.ma.tests.test_TestMedian.test_pytype(self)
numpy.ma.tests.test_TestMedian.test_single_non_masked_value_on_axis(self)
numpy.ma.tests.test_TestMedian.test_special(self)
numpy.ma.tests.test_TestNDEnumerate
numpy.ma.tests.test_TestNDEnumerate.test_ndenumerate_allmasked(self)
numpy.ma.tests.test_TestNDEnumerate.test_ndenumerate_mixedmasked(self)
numpy.ma.tests.test_TestNDEnumerate.test_ndenumerate_nomasked(self)
numpy.ma.tests.test_TestNotMasked
numpy.ma.tests.test_TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_TestNotMasked.test_edges(self)
numpy.ma.tests.test_TestPolynomial
numpy.ma.tests.test_TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_TestPolynomial.test_polyfit_with_masked_NaNs(self)
numpy.ma.tests.test_TestShapeBase
numpy.ma.tests.test_TestShapeBase.test_atleast_2d(self)
numpy.ma.tests.test_TestShapeBase.test_shape_scalar(self)
numpy.ma.tests.test_TestStack
numpy.ma.tests.test_TestStack.test_stack_1d(self)
numpy.ma.tests.test_TestStack.test_stack_masks(self)
numpy.ma.tests.test_TestStack.test_stack_nd(self)
numpy.ma.tests.test_extras.TestApplyAlongAxis
numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs(self)
numpy.ma.tests.test_extras.TestApplyOverAxes
numpy.ma.tests.test_extras.TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_extras.TestArraySetOps
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_isin(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_extras.TestAverage
numpy.ma.tests.test_extras.TestAverage.test_basic_keepdims(self,x,axis,expected_avg,weights,expected_wavg,expected_wsum)
numpy.ma.tests.test_extras.TestAverage.test_complex(self)
numpy.ma.tests.test_extras.TestAverage.test_masked_weights(self)
numpy.ma.tests.test_extras.TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage1(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage2(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage3(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage4(self)
numpy.ma.tests.test_extras.TestAverage.test_weight_and_input_dims_different(self)
numpy.ma.tests.test_extras.TestCompressFunctions
numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_nd(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_rowcols(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_out(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_returns_maskedarray(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_row_cols_axis_deprecation(self,axis,func,rowcols_axis)
numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_extras.TestConcatenator
numpy.ma.tests.test_extras.TestConcatenator.test_1d(self)
numpy.ma.tests.test_extras.TestConcatenator.test_2d(self)
numpy.ma.tests.test_extras.TestConcatenator.test_masked_constant(self)
numpy.ma.tests.test_extras.TestCorrcoef
numpy.ma.tests.test_extras.TestCorrcoef.setup_method(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_with_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_without_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_with_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_without_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_bias(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_extras.TestCov
numpy.ma.tests.test_extras.TestCov.setup_method(self)
numpy.ma.tests.test_extras.TestCov.test_1d_with_missing(self)
numpy.ma.tests.test_extras.TestCov.test_1d_without_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_with_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_without_missing(self)
numpy.ma.tests.test_extras.TestGeneric
numpy.ma.tests.test_extras.TestGeneric.check_clump(self,f)
numpy.ma.tests.test_extras.TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_extras.TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_extras.TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_with_object(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_with_object_nested(self)
numpy.ma.tests.test_extras.TestMedian
numpy.ma.tests.test_extras.TestMedian.test_1d_shape_consistency(self)
numpy.ma.tests.test_extras.TestMedian.test_2d(self)
numpy.ma.tests.test_extras.TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_extras.TestMedian.test_3d(self)
numpy.ma.tests.test_extras.TestMedian.test_ambigous_fill(self)
numpy.ma.tests.test_extras.TestMedian.test_axis_argument_errors(self)
numpy.ma.tests.test_extras.TestMedian.test_docstring_examples(self)
numpy.ma.tests.test_extras.TestMedian.test_empty(self)
numpy.ma.tests.test_extras.TestMedian.test_inf(self)
numpy.ma.tests.test_extras.TestMedian.test_keepdims_out(self,axis)
numpy.ma.tests.test_extras.TestMedian.test_masked_0d(self)
numpy.ma.tests.test_extras.TestMedian.test_masked_1d(self)
numpy.ma.tests.test_extras.TestMedian.test_nan(self)
numpy.ma.tests.test_extras.TestMedian.test_nan_behavior(self)
numpy.ma.tests.test_extras.TestMedian.test_neg_axis(self)
numpy.ma.tests.test_extras.TestMedian.test_non_masked(self)
numpy.ma.tests.test_extras.TestMedian.test_object(self)
numpy.ma.tests.test_extras.TestMedian.test_out(self)
numpy.ma.tests.test_extras.TestMedian.test_out_1d(self)
numpy.ma.tests.test_extras.TestMedian.test_out_nan(self)
numpy.ma.tests.test_extras.TestMedian.test_pytype(self)
numpy.ma.tests.test_extras.TestMedian.test_single_non_masked_value_on_axis(self)
numpy.ma.tests.test_extras.TestMedian.test_special(self)
numpy.ma.tests.test_extras.TestNDEnumerate
numpy.ma.tests.test_extras.TestNDEnumerate.test_ndenumerate_allmasked(self)
numpy.ma.tests.test_extras.TestNDEnumerate.test_ndenumerate_mixedmasked(self)
numpy.ma.tests.test_extras.TestNDEnumerate.test_ndenumerate_nomasked(self)
numpy.ma.tests.test_extras.TestNotMasked
numpy.ma.tests.test_extras.TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_extras.TestNotMasked.test_edges(self)
numpy.ma.tests.test_extras.TestPolynomial
numpy.ma.tests.test_extras.TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_extras.TestPolynomial.test_polyfit_with_masked_NaNs(self)
numpy.ma.tests.test_extras.TestShapeBase
numpy.ma.tests.test_extras.TestShapeBase.test_atleast_2d(self)
numpy.ma.tests.test_extras.TestShapeBase.test_shape_scalar(self)
numpy.ma.tests.test_extras.TestStack
numpy.ma.tests.test_extras.TestStack.test_stack_1d(self)
numpy.ma.tests.test_extras.TestStack.test_stack_masks(self)
numpy.ma.tests.test_extras.TestStack.test_stack_nd(self)

