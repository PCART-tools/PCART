
----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/add_newdocs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/__config__.py----------------------------------------
A:numpy.__config__.g->globals()
A:numpy.__config__.v->str(v)
numpy.__config__.get_info(name)
numpy.__config__.show()
numpy.show_config()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/dual.py----------------------------------------
numpy.dual.register_func(name,func)
numpy.dual.restore_all()
numpy.dual.restore_func(name)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ctypeslib.py----------------------------------------
A:numpy.ctypeslib.c_intp->numpy.core._internal._getintp_ctype()
A:numpy.ctypeslib.so_ext->get_shared_lib_extension()
A:numpy.ctypeslib.so_ext2->get_shared_lib_extension(is_python_ext=True)
A:numpy.ctypeslib.loader_path->os.path.abspath(loader_path)
A:numpy.ctypeslib.libdir->os.path.dirname(loader_path)
A:numpy.ctypeslib.libpath->os.path.join(libdir, ln)
A:numpy.ctypeslib.ctypes_load_library->deprecate(load_library, 'ctypes_load_library', 'load_library')
A:numpy.ctypeslib.dtype->_dtype(type(contents))
A:numpy.ctypeslib.flags->_flags_fromnum(num)
A:numpy.ctypeslib.num->_num_fromflags(flags)
A:numpy.ctypeslib.name->str(id(dtype))
A:numpy.ctypeslib.shape->tuple(shape)
A:numpy.ctypeslib.klass->type('ndpointer_%s' % name, (_ndptr,), {'_dtype_': dtype, '_shape_': shape, '_ndim_': ndim, '_flags_': num})
A:numpy.ctypeslib.simple_type.__array_interface__->property(__array_interface__)
A:numpy.ctypeslib._ARRAY_TYPE->type(ct.c_int * 1)
A:numpy.ctypeslib.array_type.__array_interface__->property(__array_interface__)
A:numpy.ctypeslib.tp->type(obj)
A:numpy.ctypeslib.result->type(obj).from_address(addr)
numpy.ctypes_flags_fromnum(num)
numpy.ctypes_ndptr(_ndptr_base)
numpy.ctypes_ndptr._check_retval_(self)
numpy.ctypes_ndptr.from_param(cls,obj)
numpy.ctypes_num_fromflags(flaglist)
numpy.ctypeslib._flags_fromnum(num)
numpy.ctypeslib._ndptr(_ndptr_base)
numpy.ctypeslib._ndptr.__array_interface__(self)
numpy.ctypeslib._ndptr._check_retval_(self)
numpy.ctypeslib._ndptr.from_param(cls,obj)
numpy.ctypeslib._num_fromflags(flaglist)
numpy.ctypeslib.ndpointer(dtype=None,ndim=None,shape=None,flags=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matlib.py----------------------------------------
A:numpy.matlib.a->asanyarray(a)
A:numpy.matlib.b->empty((n, n), dtype=dtype)
A:numpy.matlib.c->asanyarray(a).reshape(1, a.size).repeat(m, 0).reshape(rows, origcols).repeat(n, 0)
numpy.matempty(shape,dtype=None,order='C')
numpy.mateye(n,M=None,k=0,dtype=float)
numpy.matidentity(n,dtype=None)
numpy.matlib.empty(shape,dtype=None,order='C')
numpy.matlib.eye(n,M=None,k=0,dtype=float)
numpy.matlib.identity(n,dtype=None)
numpy.matlib.ones(shape,dtype=None,order='C')
numpy.matlib.rand(*args)
numpy.matlib.randn(*args)
numpy.matlib.repmat(a,m,n)
numpy.matlib.zeros(shape,dtype=None,order='C')
numpy.matones(shape,dtype=None,order='C')
numpy.matrand(*args)
numpy.matrandn(*args)
numpy.matrepmat(a,m,n)
numpy.matzeros(shape,dtype=None,order='C')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/_import_tools.py----------------------------------------
A:numpy._import_tools.self.parent_frameframe->sys._getframe(_level)
A:numpy._import_tools.self.parent_name->eval('__name__', frame.f_globals, frame.f_locals)
A:numpy._import_tools.parent_path->eval('__path__', frame.f_globals, frame.f_locals)
A:numpy._import_tools.self.parent_export_names->eval('__all__', frame.f_globals, frame.f_locals)
A:numpy._import_tools.files->glob(os.path.join(parent_path, package_dir, 'info.py'))
A:numpy._import_tools.package_name->os.path.dirname(info_file[len(parent_path) + 1:]).replace(os.sep, '.')
A:numpy._import_tools.package_dir->os.path.join(*package_name.split('.'))
A:numpy._import_tools.names_files->self._get_info_files(package_dir, path)
A:numpy._import_tools.info_module->imp.load_module(fullname + '.info', open(info_file, filedescriptor[1]), info_file, filedescriptor)
A:numpy._import_tools.depend_dict[name]->getattr(info_module, 'depends', [])
A:numpy._import_tools.self.verboseverbose->options.get('verbose', -1)
A:numpy._import_tools.postpone->options.get('postpone', None)
A:numpy._import_tools.global_symbols->getattr(info_module, 'global_symbols', [])
A:numpy._import_tools.postpone_import->getattr(info_module, 'postpone_import', False)
A:numpy._import_tools.old_object->frame.f_locals.get(package_name, None)
A:numpy._import_tools.new_object->frame.f_locals.get(package_name)
A:numpy._import_tools.symbols->eval('dir(%s)' % package_name, frame.f_globals, frame.f_locals)
A:numpy._import_tools.module->getattr(obj, '__module__', None)
A:numpy._import_tools.file->getattr(obj, '__file__', None)
A:numpy._import_tools.title->getattr(info_module, '__doc__', None)
A:numpy._import_tools.max_length->max(lengths)
A:numpy._import_tools.words->getattr(info_module, '__doc__', None).split()
A:numpy._import_tools.word->getattr(info_module, '__doc__', None).split().pop(0)
numpy.PackageLoader(self,verbose=False,infunc=False)
numpy.PackageLoader._execcmd(self,cmdstr)
numpy.PackageLoader._format_titles(self,titles,colsep='---')
numpy.PackageLoader._get_doc_title(self,info_module)
numpy.PackageLoader._get_info_files(self,package_dir,parent_path,parent_package=None)
numpy.PackageLoader._get_sorted_names(self)
numpy.PackageLoader._init_info_modules(self,packages=None)
numpy.PackageLoader._obj2repr(self,obj)
numpy.PackageLoader.error(self,mess)
numpy.PackageLoader.get_pkgdocs(self)
numpy.PackageLoader.log(self,mess)
numpy.PackageLoader.warn(self,mess)
numpy.PackageLoaderDebug(PackageLoader)
numpy.PackageLoaderDebug._execcmd(self,cmdstr)
numpy._import_tools.PackageLoader(self,verbose=False,infunc=False)
numpy._import_tools.PackageLoader.__init__(self,verbose=False,infunc=False)
numpy._import_tools.PackageLoader._execcmd(self,cmdstr)
numpy._import_tools.PackageLoader._format_titles(self,titles,colsep='---')
numpy._import_tools.PackageLoader._get_doc_title(self,info_module)
numpy._import_tools.PackageLoader._get_info_files(self,package_dir,parent_path,parent_package=None)
numpy._import_tools.PackageLoader._get_sorted_names(self)
numpy._import_tools.PackageLoader._init_info_modules(self,packages=None)
numpy._import_tools.PackageLoader._obj2repr(self,obj)
numpy._import_tools.PackageLoader.error(self,mess)
numpy._import_tools.PackageLoader.get_pkgdocs(self)
numpy._import_tools.PackageLoader.log(self,mess)
numpy._import_tools.PackageLoader.warn(self,mess)
numpy._import_tools.PackageLoaderDebug(PackageLoader)
numpy._import_tools.PackageLoaderDebug._execcmd(self,cmdstr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/setup.py----------------------------------------
A:numpy.setup.config->Configuration('numpy', parent_package, top_path)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/version.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/__init__.py----------------------------------------
A:numpy.__init__.loader->PackageLoader(infunc=True)
numpy.__init__.ModuleDeprecationWarning(DeprecationWarning)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/recfunctions.py----------------------------------------
A:numpy.lib.recfunctions.fillers->itertools.repeat(fill_value)
A:numpy.lib.recfunctions.output->numpy.ma.masked_all((cmn + r1spc + r2spc,), dtype=ndtype)
A:numpy.lib.recfunctions.seqarrays->seqarrays.ravel().ravel()
A:numpy.lib.recfunctions.sizes->tuple((a.size for a in seqarrays))
A:numpy.lib.recfunctions.maxlength->max(sizes)
A:numpy.lib.recfunctions.newdtype->_recursive_rename_fields(base.dtype, namemapper)
A:numpy.lib.recfunctions.data->data.pop().pop()
A:numpy.lib.recfunctions.mask->numpy.ma.getmaskarray(a).ravel()
A:numpy.lib.recfunctions.fval->numpy.array(fval, dtype=a.dtype, ndmin=1)
A:numpy.lib.recfunctions.fmsk->numpy.ones((1,), dtype=mask.dtype)
A:numpy.lib.recfunctions.drop_names->set(drop_names)
A:numpy.lib.recfunctions.descr->_drop_descr(current, drop_names)
A:numpy.lib.recfunctions.newname->namemapper.get(name, name)
A:numpy.lib.recfunctions.base->merge_arrays(base, usemask=usemask, fill_value=fill_value)
A:numpy.lib.recfunctions.nameidx->ndtype.index(desc)
A:numpy.lib.recfunctions.current_descr->list(current_descr)
A:numpy.lib.recfunctions.newdescr[nameidx]->tuple(current_descr)
A:numpy.lib.recfunctions.offset->numpy.cumsum(np.r_[0, nrecords])
A:numpy.lib.recfunctions.a->numpy.asanyarray(a).ravel()
A:numpy.lib.recfunctions.fields->get_fieldstructure(a.dtype)
A:numpy.lib.recfunctions.sortidx->merge_arrays(base, usemask=usemask, fill_value=fill_value).argsort()
A:numpy.lib.recfunctions.sorteddata->sortedbase.filled()
A:numpy.lib.recfunctions.flag->numpy.concatenate(([False], flag))
A:numpy.lib.recfunctions.r1->r1.ravel().ravel()
A:numpy.lib.recfunctions.r2->r2.ravel().ravel()
A:numpy.lib.recfunctions.r1k->drop_fields(r1, [n for n in r1names if n not in key])
A:numpy.lib.recfunctions.r2k->drop_fields(r2, [n for n in r2names if n not in key])
A:numpy.lib.recfunctions.aux->numpy.ma.concatenate((r1k, r2k))
A:numpy.lib.recfunctions.idx_sort->numpy.ma.concatenate((r1k, r2k)).argsort(order=key)
A:numpy.lib.recfunctions.flag_in->numpy.ma.concatenate(([False], aux[1:] == aux[:-1]))
A:numpy.lib.recfunctions.idx_1->numpy.concatenate((idx_1, idx_out[idx_out < nb1]))
A:numpy.lib.recfunctions.idx_2->numpy.concatenate((idx_2, idx_out[idx_out >= nb1] - nb1))
A:numpy.lib.recfunctions.names->list((_[0] for _ in ndtype))
A:numpy.lib.recfunctions.desc->list(desc)
A:numpy.lib.recfunctions.current[-1]->max(desc[1], current[-1])
A:numpy.lib.recfunctions.cmn->max(r1cmn, r2cmn)
A:numpy.lib.recfunctions.kwargs->dict(jointype=jointype, r1postfix=r1postfix, r2postfix=r2postfix, defaults=defaults, usemask=False, asrecarray=True)
numpy.lib.recfunctions._fix_defaults(output,defaults=None)
numpy.lib.recfunctions._fix_output(output,usemask=True,asrecarray=False)
numpy.lib.recfunctions._izip_fields(iterable)
numpy.lib.recfunctions._izip_fields_flat(iterable)
numpy.lib.recfunctions.append_fields(base,names,data,dtypes=None,fill_value=-1,usemask=True,asrecarray=False)
numpy.lib.recfunctions.drop_fields(base,drop_names,usemask=True,asrecarray=False)
numpy.lib.recfunctions.find_duplicates(a,key=None,ignoremask=True,return_index=False)
numpy.lib.recfunctions.flatten_descr(ndtype)
numpy.lib.recfunctions.get_fieldstructure(adtype,lastname=None,parents=None)
numpy.lib.recfunctions.get_names(adtype)
numpy.lib.recfunctions.get_names_flat(adtype)
numpy.lib.recfunctions.izip_records(seqarrays,fill_value=None,flatten=True)
numpy.lib.recfunctions.join_by(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None,usemask=True,asrecarray=False)
numpy.lib.recfunctions.merge_arrays(seqarrays,fill_value=-1,flatten=False,usemask=False,asrecarray=False)
numpy.lib.recfunctions.rec_append_fields(base,names,data,dtypes=None)
numpy.lib.recfunctions.rec_drop_fields(base,drop_names)
numpy.lib.recfunctions.rec_join(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None)
numpy.lib.recfunctions.recursive_fill_fields(input,output)
numpy.lib.recfunctions.rename_fields(base,namemapper)
numpy.lib.recfunctions.stack_arrays(arrays,defaults=None,usemask=True,asrecarray=False,autoconvert=False)
numpy.lib.recfunctions.zip_descr(seqarrays,flatten=False)
numpy.recfunctions._fix_defaults(output,defaults=None)
numpy.recfunctions._fix_output(output,usemask=True,asrecarray=False)
numpy.recfunctions._izip_fields(iterable)
numpy.recfunctions._izip_fields_flat(iterable)
numpy.recfunctions.append_fields(base,names,data,dtypes=None,fill_value=-1,usemask=True,asrecarray=False)
numpy.recfunctions.drop_fields(base,drop_names,usemask=True,asrecarray=False)
numpy.recfunctions.find_duplicates(a,key=None,ignoremask=True,return_index=False)
numpy.recfunctions.flatten_descr(ndtype)
numpy.recfunctions.get_names(adtype)
numpy.recfunctions.get_names_flat(adtype)
numpy.recfunctions.izip_records(seqarrays,fill_value=None,flatten=True)
numpy.recfunctions.join_by(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None,usemask=True,asrecarray=False)
numpy.recfunctions.merge_arrays(seqarrays,fill_value=-1,flatten=False,usemask=False,asrecarray=False)
numpy.recfunctions.rec_append_fields(base,names,data,dtypes=None)
numpy.recfunctions.rec_drop_fields(base,drop_names)
numpy.recfunctions.rec_join(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None)
numpy.recfunctions.recursive_fill_fields(input,output)
numpy.recfunctions.rename_fields(base,namemapper)
numpy.recfunctions.stack_arrays(arrays,defaults=None,usemask=True,asrecarray=False,autoconvert=False)
numpy.recfunctions.zip_descr(seqarrays,flatten=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/index_tricks.py----------------------------------------
A:numpy.lib.index_tricks.nd->len(args)
A:numpy.lib.index_tricks.new->new.reshape(tuple(baseshape)).reshape(tuple(baseshape))
A:numpy.lib.index_tricks.baseshape[k]->len(new)
A:numpy.lib.index_tricks.nn->numpy.core.numeric.indices(size, typ)
A:numpy.lib.index_tricks.step->abs(step)
A:numpy.lib.index_tricks.slobj[k]->slice(None, None)
A:numpy.lib.index_tricks.length->int(step)
A:numpy.lib.index_tricks.mgrid->nd_grid(sparse=False)
A:numpy.lib.index_tricks.ogrid->nd_grid(sparse=True)
A:numpy.lib.index_tricks.res->numpy.core.numeric.arange(i, j)
A:numpy.lib.index_tricks.mymat->numpy.matrixlib.bmat(key, frame.f_globals, frame.f_locals)
A:numpy.lib.index_tricks.size->int(abs(step))
A:numpy.lib.index_tricks.newobj->newobj.transpose(axes).transpose(axes)
A:numpy.lib.index_tricks.vec->key0.split(',')
A:numpy.lib.index_tricks.trans1d->int(vec[2])
A:numpy.lib.index_tricks.self.axis->int(key[k])
A:numpy.lib.index_tricks.tempobj->array(newobj, copy=False, subok=True)
A:numpy.lib.index_tricks.defaxes->list(range(ndmin))
A:numpy.lib.index_tricks.final_dtype->find_common_type(arraytypes, scalartypes)
A:numpy.lib.index_tricks.objs[k]->objs[k].astype(final_dtype).astype(final_dtype)
A:numpy.lib.index_tricks.r_->RClass()
A:numpy.lib.index_tricks.c_->CClass()
A:numpy.lib.index_tricks.x->as_strided(_nx.zeros(1), shape=shape, strides=_nx.zeros_like(shape))
A:numpy.lib.index_tricks.self._it->numpy.core.numeric.nditer(x, flags=['multi_index', 'zerosize_ok'], order='C')
A:numpy.lib.index_tricks.index_exp->IndexExpression(maketuple=True)
A:numpy.lib.index_tricks.s_->IndexExpression(maketuple=False)
A:numpy.lib.index_tricks.idx->arange(n)
numpy.AxisConcatenator(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.AxisConcatenator.__getitem__(self,key)
numpy.AxisConcatenator.__getslice__(self,i,j)
numpy.AxisConcatenator.__len__(self)
numpy.AxisConcatenator._retval(self,res)
numpy.CClass(self)
numpy.IndexExpression(self,maketuple)
numpy.IndexExpression.__getitem__(self,item)
numpy.RClass(self)
numpy.diag_indices(n,ndim=2)
numpy.diag_indices_from(arr)
numpy.fill_diagonal(a,val,wrap=False)
numpy.ix_(*args)
numpy.lib.index_tricks.AxisConcatenator(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib.index_tricks.AxisConcatenator.__getitem__(self,key)
numpy.lib.index_tricks.AxisConcatenator.__getslice__(self,i,j)
numpy.lib.index_tricks.AxisConcatenator.__init__(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib.index_tricks.AxisConcatenator.__len__(self)
numpy.lib.index_tricks.AxisConcatenator._retval(self,res)
numpy.lib.index_tricks.CClass(self)
numpy.lib.index_tricks.CClass.__init__(self)
numpy.lib.index_tricks.IndexExpression(self,maketuple)
numpy.lib.index_tricks.IndexExpression.__getitem__(self,item)
numpy.lib.index_tricks.IndexExpression.__init__(self,maketuple)
numpy.lib.index_tricks.RClass(self)
numpy.lib.index_tricks.RClass.__init__(self)
numpy.lib.index_tricks.diag_indices(n,ndim=2)
numpy.lib.index_tricks.diag_indices_from(arr)
numpy.lib.index_tricks.fill_diagonal(a,val,wrap=False)
numpy.lib.index_tricks.ix_(*args)
numpy.lib.index_tricks.nd_grid(self,sparse=False)
numpy.lib.index_tricks.nd_grid.__getitem__(self,key)
numpy.lib.index_tricks.nd_grid.__getslice__(self,i,j)
numpy.lib.index_tricks.nd_grid.__init__(self,sparse=False)
numpy.lib.index_tricks.nd_grid.__len__(self)
numpy.lib.index_tricks.ndenumerate(self,arr)
numpy.lib.index_tricks.ndenumerate.__init__(self,arr)
numpy.lib.index_tricks.ndenumerate.__iter__(self)
numpy.lib.index_tricks.ndenumerate.__next__(self)
numpy.lib.index_tricks.ndindex(self,*shape)
numpy.lib.index_tricks.ndindex.__init__(self,*shape)
numpy.lib.index_tricks.ndindex.__iter__(self)
numpy.lib.index_tricks.ndindex.__next__(self)
numpy.lib.index_tricks.ndindex.ndincr(self)
numpy.nd_grid(self,sparse=False)
numpy.nd_grid.__getitem__(self,key)
numpy.nd_grid.__getslice__(self,i,j)
numpy.nd_grid.__len__(self)
numpy.ndenumerate(self,arr)
numpy.ndenumerate.__iter__(self)
numpy.ndenumerate.__next__(self)
numpy.ndindex(self,*shape)
numpy.ndindex.__iter__(self)
numpy.ndindex.__next__(self)
numpy.ndindex.ndincr(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/twodim_base.py----------------------------------------
A:numpy.lib.twodim_base.m->ones((n, n), int)
A:numpy.lib.twodim_base.v->asarray(v).ravel()
A:numpy.lib.twodim_base.res->zeros((n, n), v.dtype)
A:numpy.lib.twodim_base.s->len(v)
A:numpy.lib.twodim_base.i->arange(0, n + k)
A:numpy.lib.twodim_base.out->multiply(1 - tri(m.shape[0], m.shape[1], k - 1, dtype=m.dtype), m)
A:numpy.lib.twodim_base.x->asarray(x)
A:numpy.lib.twodim_base.N->len(bins)
A:numpy.lib.twodim_base.X->ones((len(x), N), x.dtype)
A:numpy.lib.twodim_base.xedgesyedges->asarray(bins, float)
A:numpy.lib.twodim_base.(hist, edges)->histogramdd([x, y], bins, range, normed, weights)
A:numpy.lib.twodim_base.a->mask_func(m, k)
numpy.diag(v,k=0)
numpy.diagflat(v,k=0)
numpy.eye(N,M=None,k=0,dtype=float)
numpy.fliplr(m)
numpy.flipud(m)
numpy.histogram2d(x,y,bins=10,range=None,normed=False,weights=None)
numpy.lib.twodim_base.diag(v,k=0)
numpy.lib.twodim_base.diagflat(v,k=0)
numpy.lib.twodim_base.eye(N,M=None,k=0,dtype=float)
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x,y,bins=10,range=None,normed=False,weights=None)
numpy.lib.twodim_base.mask_indices(n,mask_func,k=0)
numpy.lib.twodim_base.rot90(m,k=1)
numpy.lib.twodim_base.tri(N,M=None,k=0,dtype=float)
numpy.lib.twodim_base.tril(m,k=0)
numpy.lib.twodim_base.tril_indices(n,k=0)
numpy.lib.twodim_base.tril_indices_from(arr,k=0)
numpy.lib.twodim_base.triu(m,k=0)
numpy.lib.twodim_base.triu_indices(n,k=0)
numpy.lib.twodim_base.triu_indices_from(arr,k=0)
numpy.lib.twodim_base.vander(x,N=None)
numpy.mask_indices(n,mask_func,k=0)
numpy.rot90(m,k=1)
numpy.tri(N,M=None,k=0,dtype=float)
numpy.tril(m,k=0)
numpy.tril_indices(n,k=0)
numpy.tril_indices_from(arr,k=0)
numpy.triu(m,k=0)
numpy.triu_indices(n,k=0)
numpy.triu_indices_from(arr,k=0)
numpy.vander(x,N=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/financial.py----------------------------------------
A:numpy.lib.financial.when->_convert_when(when)
A:numpy.lib.financial.(rate, nper, pmt, pv, when)->map(np.asarray, [rate, nper, pmt, pv, when])
A:numpy.lib.financial.miter->numpy.broadcast(rate, nper, pmt, fv, when)
A:numpy.lib.financial.zer->numpy.zeros(miter.shape)
A:numpy.lib.financial.fact->numpy.where(rate == zer, nper + zer, (1 + rate * when) * (temp - 1) / rate + zer)
A:numpy.lib.financial.(rate, nper, pv, fv, when)->map(np.asarray, [rate, nper, pv, fv, when])
A:numpy.lib.financial.(rate, pmt, pv, fv, when)->map(np.asarray, [rate, pmt, pv, fv, when])
A:numpy.lib.financial.(rate, per, nper, pv, fv, when)->numpy.broadcast_arrays(rate, per, nper, pv, fv, when)
A:numpy.lib.financial.total_pmt->pmt(rate, nper, pv, fv, when)
A:numpy.lib.financial.ipmt->numpy.where(np.logical_and(when == 1, per == 1), 0.0, ipmt)
A:numpy.lib.financial.total->pmt(rate, nper, pv, fv, when)
A:numpy.lib.financial.(rate, nper, pmt, fv, when)->map(np.asarray, [rate, nper, pmt, fv, when])
A:numpy.lib.financial.(nper, pmt, pv, fv, when)->map(np.asarray, [nper, pmt, pv, fv, when])
A:numpy.lib.financial.diff->abs(rnp1 - rn)
A:numpy.lib.financial.close->numpy.all(diff < tol)
A:numpy.lib.financial.res->numpy.roots(values[::-1])
A:numpy.lib.financial.rate->rate.item(np.argmin(np.abs(rate))).item(np.argmin(np.abs(rate)))
A:numpy.lib.financial.values->numpy.asarray(values, dtype=np.double)
A:numpy.lib.financial.numer->numpy.abs(npv(reinvest_rate, values * pos))
A:numpy.lib.financial.denom->numpy.abs(npv(finance_rate, values * neg))
numpy._convert_when(when)
numpy._g_div_gp(r,n,p,x,y,w)
numpy._rbl(rate,per,pmt,pv,when)
numpy.fv(rate,nper,pmt,pv,when='end')
numpy.ipmt(rate,per,nper,pv,fv=0.0,when='end')
numpy.irr(values)
numpy.lib.financial._convert_when(when)
numpy.lib.financial._g_div_gp(r,n,p,x,y,w)
numpy.lib.financial._rbl(rate,per,pmt,pv,when)
numpy.lib.financial.fv(rate,nper,pmt,pv,when='end')
numpy.lib.financial.ipmt(rate,per,nper,pv,fv=0.0,when='end')
numpy.lib.financial.irr(values)
numpy.lib.financial.mirr(values,finance_rate,reinvest_rate)
numpy.lib.financial.nper(rate,pmt,pv,fv=0,when='end')
numpy.lib.financial.npv(rate,values)
numpy.lib.financial.pmt(rate,nper,pv,fv=0,when='end')
numpy.lib.financial.ppmt(rate,per,nper,pv,fv=0.0,when='end')
numpy.lib.financial.pv(rate,nper,pmt,fv=0.0,when='end')
numpy.lib.financial.rate(nper,pmt,pv,fv,when='end',guess=0.1,tol=1e-06,maxiter=100)
numpy.mirr(values,finance_rate,reinvest_rate)
numpy.nper(rate,pmt,pv,fv=0,when='end')
numpy.npv(rate,values)
numpy.pmt(rate,nper,pv,fv=0,when='end')
numpy.ppmt(rate,per,nper,pv,fv=0.0,when='end')
numpy.pv(rate,nper,pmt,fv=0.0,when='end')
numpy.rate(nper,pmt,pv,fv,when='end',guess=0.1,tol=1e-06,maxiter=100)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/npyio.py----------------------------------------
A:numpy.lib.npyio.f->GzipFile(fileobj=f.fileobj, filename=name)
A:numpy.lib.npyio.self._obj->weakref.proxy(obj)
A:numpy.lib.npyio._zip->zipfile_factory(fid)
A:numpy.lib.npyio.self._files->zipfile_factory(fid).namelist()
A:numpy.lib.npyio.self.f->BagObj(self)
A:numpy.lib.npyio.bytes->self.zip.open(key)
A:numpy.lib.npyio.magic->open(tmpfile, 'wb').read(N)
A:numpy.lib.npyio.fid->open(tmpfile, 'wb')
A:numpy.lib.npyio._ZIP_PREFIX->asbytes('PK\x03\x04')
A:numpy.lib.npyio.N->len(usecols or first_vals)
A:numpy.lib.npyio.arr->numpy.asanyarray(arr)
A:numpy.lib.npyio.zip->zipfile_factory(file, mode='w', compression=compression)
A:numpy.lib.npyio.(fd, tmpfile)->tempfile.mkstemp(suffix='-numpy.npy')
A:numpy.lib.npyio.comments->asbytes(comments)
A:numpy.lib.npyio.delimiter->asbytes(delimiter)
A:numpy.lib.npyio.usecols->list(usecols)
A:numpy.lib.npyio.fh->open(fname, 'w')
A:numpy.lib.npyio.(flat_dt, flat_packing)->flatten_dtype(tp)
A:numpy.lib.npyio.line->asbytes(line).split(comments)[0].strip(asbytes('\r\n'))
A:numpy.lib.npyio.dtype->numpy.dtype(ttype)
A:numpy.lib.npyio.defconv->_getconv(dtype)
A:numpy.lib.npyio.first_line->asbytes('')
A:numpy.lib.npyio.first_vals->split_line(first_line)
A:numpy.lib.npyio.(dtype_types, packing)->flatten_dtype(dtype)
A:numpy.lib.npyio.i->list(usecols).index(i)
A:numpy.lib.npyio.vals->split_line(line)
A:numpy.lib.npyio.items->pack_items(items, packing)
A:numpy.lib.npyio.X->numpy.asarray(X)
A:numpy.lib.npyio.fmt->asstr(fmt)
A:numpy.lib.npyio.ncol->len(X.dtype.descr)
A:numpy.lib.npyio.iscomplex_X->numpy.iscomplexobj(X)
A:numpy.lib.npyio.format->asbytes(delimiter).join(fmt)
A:numpy.lib.npyio.n_fmt_chars->asstr(fmt).count('%')
A:numpy.lib.npyio.error->ValueError('fmt has wrong number of %% formats:  %s' % fmt)
A:numpy.lib.npyio.header->header.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib.npyio.footer->footer.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib.npyio.file->open(file, 'rb')
A:numpy.lib.npyio.regexp->re.compile(asbytes(regexp))
A:numpy.lib.npyio.seq->re.compile(asbytes(regexp)).findall(file.read())
A:numpy.lib.npyio.newdtype->numpy.dtype(dtype[dtype.names[0]])
A:numpy.lib.npyio.output->output.view(np.recarray).view(np.recarray)
A:numpy.lib.npyio.missing->asbytes(missing)
A:numpy.lib.npyio.missing_values->asbytes_nested(missing_values)
A:numpy.lib.npyio.fhd->iter(fname)
A:numpy.lib.npyio.validate_names->NameValidator(excludelist=excludelist, deletechars=deletechars, case_sensitive=case_sensitive, replace_space=replace_space)
A:numpy.lib.npyio.first_values->split_line(first_line)
A:numpy.lib.npyio.fval->first_values[0].strip()
A:numpy.lib.npyio.nbcols->len(usecols or first_values)
A:numpy.lib.npyio.names->kwargs.get('names', True)
A:numpy.lib.npyio.usecols[i]->kwargs.get('names', True).index(current)
A:numpy.lib.npyio.key->list(usecols).index(key)
A:numpy.lib.npyio.value->str(value)
A:numpy.lib.npyio.user_value->user_missing_values.split(asbytes(','))
A:numpy.lib.npyio.n->len(user_filling_values)
A:numpy.lib.npyio.dtype_flat->flatten_dtype(dtype, flatten_base=True)
A:numpy.lib.npyio.zipit->zip(missing_values, filling_values)
A:numpy.lib.npyio.values->split_line(line)
A:numpy.lib.npyio.nbvalues->len(values)
A:numpy.lib.npyio.current_column->map(itemgetter(i), rows)
A:numpy.lib.npyio.nbinvalid->len(invalid)
A:numpy.lib.npyio.nbinvalid_skipped->len([_ for _ in invalid if _[0] > nbrows + skip_header])
A:numpy.lib.npyio.errmsg->'\n'.join(errmsg)
A:numpy.lib.npyio.rows->numpy.array(data, dtype=[('', _) for _ in dtype_flat])
A:numpy.lib.npyio.base->set([c.type for c in converters if c._checked])
A:numpy.lib.npyio.ddtype->list(zip(names, column_types))
A:numpy.lib.npyio.mdtype->make_mask_descr(dtype)
A:numpy.lib.npyio.outputmask->numpy.array(masks, dtype=mdtype)
A:numpy.lib.npyio.rowmasks->numpy.array(masks, dtype=np.dtype([('', np.bool) for t in dtype_flat]))
A:numpy.lib.npyio.usemask->kwargs.get('usemask', False)
numpy.BagObj(self,obj)
numpy.BagObj.__getattribute__(self,key)
numpy.NpzFile(self,fid,own_fid=False)
numpy.NpzFile.__contains__(self,key)
numpy.NpzFile.__del__(self)
numpy.NpzFile.__enter__(self)
numpy.NpzFile.__exit__(self,exc_type,exc_value,traceback)
numpy.NpzFile.__getitem__(self,key)
numpy.NpzFile.__iter__(self)
numpy.NpzFile.close(self)
numpy.NpzFile.items(self)
numpy.NpzFile.iteritems(self)
numpy.NpzFile.iterkeys(self)
numpy.NpzFile.keys(self)
numpy._getconv(dtype)
numpy._savez(file,args,kwds,compress)
numpy.fromregex(file,regexp,dtype)
numpy.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skiprows=0,skip_header=0,skip_footer=0,converters=None,missing='',missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=None,replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True)
numpy.lib.npyio.BagObj(self,obj)
numpy.lib.npyio.BagObj.__getattribute__(self,key)
numpy.lib.npyio.BagObj.__init__(self,obj)
numpy.lib.npyio.NpzFile(self,fid,own_fid=False)
numpy.lib.npyio.NpzFile.__contains__(self,key)
numpy.lib.npyio.NpzFile.__del__(self)
numpy.lib.npyio.NpzFile.__enter__(self)
numpy.lib.npyio.NpzFile.__exit__(self,exc_type,exc_value,traceback)
numpy.lib.npyio.NpzFile.__getitem__(self,key)
numpy.lib.npyio.NpzFile.__init__(self,fid,own_fid=False)
numpy.lib.npyio.NpzFile.__iter__(self)
numpy.lib.npyio.NpzFile.close(self)
numpy.lib.npyio.NpzFile.items(self)
numpy.lib.npyio.NpzFile.iteritems(self)
numpy.lib.npyio.NpzFile.iterkeys(self)
numpy.lib.npyio.NpzFile.keys(self)
numpy.lib.npyio._getconv(dtype)
numpy.lib.npyio._savez(file,args,kwds,compress)
numpy.lib.npyio.fromregex(file,regexp,dtype)
numpy.lib.npyio.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skiprows=0,skip_header=0,skip_footer=0,converters=None,missing='',missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=None,replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True)
numpy.lib.npyio.load(file,mmap_mode=None)
numpy.lib.npyio.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0)
numpy.lib.npyio.mafromtxt(fname,**kwargs)
numpy.lib.npyio.ndfromtxt(fname,**kwargs)
numpy.lib.npyio.recfromcsv(fname,**kwargs)
numpy.lib.npyio.recfromtxt(fname,**kwargs)
numpy.lib.npyio.save(file,arr)
numpy.lib.npyio.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#')
numpy.lib.npyio.savez(file,*args,**kwds)
numpy.lib.npyio.savez_compressed(file,*args,**kwds)
numpy.lib.npyio.seek_gzip_factory(f)
numpy.lib.npyio.zipfile_factory(*args,**kwargs)
numpy.load(file,mmap_mode=None)
numpy.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0)
numpy.mafromtxt(fname,**kwargs)
numpy.ndfromtxt(fname,**kwargs)
numpy.recfromcsv(fname,**kwargs)
numpy.recfromtxt(fname,**kwargs)
numpy.save(file,arr)
numpy.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#')
numpy.savez(file,*args,**kwds)
numpy.savez_compressed(file,*args,**kwds)
numpy.seek_gzip_factory(f)
numpy.zipfile_factory(*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/stride_tricks.py----------------------------------------
A:numpy.lib.stride_tricks.interface->dict(x.__array_interface__)
A:numpy.lib.stride_tricks.interface['shape']->tuple(shape)
A:numpy.lib.stride_tricks.interface['strides']->tuple(strides)
A:numpy.lib.stride_tricks.array->numpy.asarray(DummyArray(interface, base=x))
A:numpy.lib.stride_tricks.biggest->max(nds)
A:numpy.lib.stride_tricks.unique->set(lengths + [1])
A:numpy.lib.stride_tricks.new_length->set(lengths + [1]).pop()
numpy.DummyArray(self,interface,base=None)
numpy.broadcast_arrays(*args)
numpy.lib.as_strided(x,shape=None,strides=None)
numpy.lib.stride_tricks.DummyArray(self,interface,base=None)
numpy.lib.stride_tricks.DummyArray.__init__(self,interface,base=None)
numpy.lib.stride_tricks.as_strided(x,shape=None,strides=None)
numpy.lib.stride_tricks.broadcast_arrays(*args)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/arraysetops.py----------------------------------------
A:numpy.lib.arraysetops.ed->numpy.hstack(arrays)
A:numpy.lib.arraysetops.ar->numpy.concatenate((ar1, ar2))
A:numpy.lib.arraysetops.perm->numpy.concatenate((ar1, ar2)).argsort()
A:numpy.lib.arraysetops.flag->numpy.concatenate((bool_ar, [invert]))
A:numpy.lib.arraysetops.iperm->numpy.concatenate((ar1, ar2)).argsort().argsort()
A:numpy.lib.arraysetops.ar1->unique(ar1)
A:numpy.lib.arraysetops.ar2->unique(ar2)
A:numpy.lib.arraysetops.aux->in1d(ar1, ar2, assume_unique=True)
A:numpy.lib.arraysetops.mask->numpy.zeros(len(ar1), dtype=np.bool)
A:numpy.lib.arraysetops.(ar1, rev_idx)->numpy.unique(ar1, return_inverse=True)
A:numpy.lib.arraysetops.order->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort')
numpy.ediff1d(ary,to_end=None,to_begin=None)
numpy.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.lib.arraysetops.ediff1d(ary,to_end=None,to_begin=None)
numpy.lib.arraysetops.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.lib.arraysetops.intersect1d(ar1,ar2,assume_unique=False)
numpy.lib.arraysetops.setdiff1d(ar1,ar2,assume_unique=False)
numpy.lib.arraysetops.setxor1d(ar1,ar2,assume_unique=False)
numpy.lib.arraysetops.union1d(ar1,ar2)
numpy.lib.arraysetops.unique(ar,return_index=False,return_inverse=False)
numpy.lib.intersect1d(ar1,ar2,assume_unique=False)
numpy.setdiff1d(ar1,ar2,assume_unique=False)
numpy.setxor1d(ar1,ar2,assume_unique=False)
numpy.union1d(ar1,ar2)
numpy.unique(ar,return_index=False,return_inverse=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/utils.py----------------------------------------
A:numpy.lib.utils.d->os.path.join(os.path.dirname(core.__file__), 'include')
A:numpy.lib.utils.include_dirs->get_numarray_include_dirs()
A:numpy.lib.utils.newfunc->_set_function_name(newfunc, old_name)
A:numpy.lib.utils.doc->inspect.getdoc(item)
A:numpy.lib.utils.kwargs['new_name']->kwargs.pop('newname')
A:numpy.lib.utils.kwargs['old_name']->kwargs.pop('oldname')
A:numpy.lib.utils.idv->id(var)
A:numpy.lib.utils.shapestr->' x '.join(map(str, var.shape))
A:numpy.lib.utils.bytestr->str(var.nbytes)
A:numpy.lib.utils.maxname->len(val[0])
A:numpy.lib.utils.maxshape->len(val[1])
A:numpy.lib.utils.maxbyte->len(val[2])
A:numpy.lib.utils.sp1->max(10, maxname)
A:numpy.lib.utils.sp2->max(10, maxshape)
A:numpy.lib.utils.sp3->max(10, maxbyte)
A:numpy.lib.utils.firstwidth->len(name)
A:numpy.lib.utils.arglist->', '.join(arglist[1:]).split(', ')
A:numpy.lib.utils.module->__import__(module, globals(), locals(), [])
A:numpy.lib.utils.thisdict->totraverse.pop(0)
A:numpy.lib.utils.(_namedict, _dictlist)->_makenamedict(toplevel)
A:numpy.lib.utils.arguments->', '.join(arglist[1:])
A:numpy.lib.utils.argstr->_split_line(name, arguments, maxwidth)
A:numpy.lib.utils.doc1->inspect.getdoc(object)
A:numpy.lib.utils.methods->pydoc.allmethods(object)
A:numpy.lib.utils.thisobj->getattr(object, meth, None)
A:numpy.lib.utils.(methstr, other)->pydoc.splitdoc(inspect.getdoc(thisobj) or 'None')
A:numpy.lib.utils._function_signature_re->re.compile('[a-z0-9_]+\\(.*[,=].*\\)', re.I)
A:numpy.lib.utils.cache->_lookfor_generate_cache(module, import_modules, regenerate)
A:numpy.lib.utils.whats->str(what).lower().split()
A:numpy.lib.utils.first_doc->doclines[1].strip()
A:numpy.lib.utils.pager->pydoc.getpager()
A:numpy.lib.utils.(name, item)->stack.pop(0)
A:numpy.lib.utils.this_py->os.path.join(pth, mod_path)
A:numpy.lib.utils.init_py->os.path.join(pth, mod_path, '__init__.py')
A:numpy.lib.utils.sys.stdout->StringIO()
A:numpy.lib.utils.sys.stderr->StringIO()
A:numpy.lib.utils.item_name->getattr(v, '__name__', '%s.%s' % (name, n))
A:numpy.lib.utils.mod_name->getattr(v, '__module__', None)
A:numpy.lib.utils.members->inspect.getmembers(item)
A:numpy.lib.utils.meth->getattr(self, 'visit' + cls.__name__, self.default)
A:numpy.lib.utils.walker->SafeEval()
A:numpy.lib.utils.ast->ast.parse(source, mode='eval')
numpy.SafeEval(object)
numpy._Deprecate(self,old_name=None,new_name=None,message=None)
numpy._getmembers(item)
numpy._lookfor_generate_cache(module,import_modules,regenerate)
numpy._makenamedict(module='numpy')
numpy._set_function_name(func,name)
numpy._split_line(name,arguments,width)
numpy.byte_bounds(a)
numpy.deprecate(*args,**kwargs)
numpy.get_include()
numpy.get_numarray_include(type=None)
numpy.info(object=None,maxwidth=76,output=sys.stdout,toplevel='numpy')
numpy.lib.utils.SafeEval(object)
numpy.lib.utils._Deprecate(self,old_name=None,new_name=None,message=None)
numpy.lib.utils._Deprecate.__init__(self,old_name=None,new_name=None,message=None)
numpy.lib.utils._getmembers(item)
numpy.lib.utils._lookfor_generate_cache(module,import_modules,regenerate)
numpy.lib.utils._makenamedict(module='numpy')
numpy.lib.utils._set_function_name(func,name)
numpy.lib.utils._split_line(name,arguments,width)
numpy.lib.utils.byte_bounds(a)
numpy.lib.utils.deprecate(*args,**kwargs)
numpy.lib.utils.get_include()
numpy.lib.utils.get_numarray_include(type=None)
numpy.lib.utils.info(object=None,maxwidth=76,output=sys.stdout,toplevel='numpy')
numpy.lib.utils.lookfor(what,module=None,import_modules=True,regenerate=False,output=None)
numpy.lib.utils.safe_eval(source)
numpy.lib.utils.source(object,output=sys.stdout)
numpy.lib.utils.who(vardict=None)
numpy.lookfor(what,module=None,import_modules=True,regenerate=False,output=None)
numpy.safe_eval(source)
numpy.source(object,output=sys.stdout)
numpy.who(vardict=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/_datasource.py----------------------------------------
A:numpy.lib._datasource._file_openers->_FileOpeners()
A:numpy.lib._datasource.ds->DataSource(destpath)
A:numpy.lib._datasource.self._destpath->tempfile.mkdtemp()
A:numpy.lib._datasource.(fname, ext)->os.path.splitext(filename)
A:numpy.lib._datasource.(scheme, netloc, upath, uparams, uquery, ufrag)->urlparse(path)
A:numpy.lib._datasource.upath->self.abspath(path)
A:numpy.lib._datasource.openedurl->urlopen(path)
A:numpy.lib._datasource.f->_open(upath, 'wb')
A:numpy.lib._datasource.filelist->self._possible_names(self.abspath(path))
A:numpy.lib._datasource.name->self._cache(name)
A:numpy.lib._datasource.splitpath->path.lstrip(os.pardir).lstrip('..').split(self._baseurl, 2)
A:numpy.lib._datasource.netloc->self._sanitize_relative_path(netloc)
A:numpy.lib._datasource.path->path.lstrip(os.pardir).lstrip('..').lstrip(os.pardir).lstrip('..')
A:numpy.lib._datasource.(drive, path)->os.path.splitdrive(path)
A:numpy.lib._datasource.netfile->urlopen(path)
A:numpy.lib._datasource.found->self._findfile(path)
A:numpy.lib._datasource.(_fname, ext)->self._splitzipext(found)
A:numpy.lib._datasource.result->os.path.join(self._baseurl, path)
numpy._datasource.DataSource(self,destpath=os.curdir)
numpy._datasource.DataSource.__del__(self)
numpy._datasource.DataSource._cache(self,path)
numpy._datasource.DataSource._findfile(self,path)
numpy._datasource.DataSource._isurl(self,path)
numpy._datasource.DataSource._iswritemode(self,mode)
numpy._datasource.DataSource._iszip(self,filename)
numpy._datasource.DataSource._possible_names(self,filename)
numpy._datasource.DataSource._sanitize_relative_path(self,path)
numpy._datasource.DataSource._splitzipext(self,filename)
numpy._datasource.DataSource.abspath(self,path)
numpy._datasource.DataSource.exists(self,path)
numpy._datasource.DataSource.open(self,path,mode='r')
numpy._datasource.Repository(self,baseurl,destpath=os.curdir)
numpy._datasource.Repository.__del__(self)
numpy._datasource.Repository._findfile(self,path)
numpy._datasource.Repository._fullpath(self,path)
numpy._datasource.Repository.abspath(self,path)
numpy._datasource.Repository.exists(self,path)
numpy._datasource.Repository.listdir(self)
numpy._datasource.Repository.open(self,path,mode='r')
numpy._datasource._FileOpeners(self)
numpy._datasource._FileOpeners.__getitem__(self,key)
numpy._datasource._FileOpeners._load(self)
numpy._datasource._FileOpeners.keys(self)
numpy._datasource.open(path,mode='r',destpath=os.curdir)
numpy.lib._datasource.DataSource(self,destpath=os.curdir)
numpy.lib._datasource.DataSource.__del__(self)
numpy.lib._datasource.DataSource.__init__(self,destpath=os.curdir)
numpy.lib._datasource.DataSource._cache(self,path)
numpy.lib._datasource.DataSource._findfile(self,path)
numpy.lib._datasource.DataSource._isurl(self,path)
numpy.lib._datasource.DataSource._iswritemode(self,mode)
numpy.lib._datasource.DataSource._iszip(self,filename)
numpy.lib._datasource.DataSource._possible_names(self,filename)
numpy.lib._datasource.DataSource._sanitize_relative_path(self,path)
numpy.lib._datasource.DataSource._splitzipext(self,filename)
numpy.lib._datasource.DataSource.abspath(self,path)
numpy.lib._datasource.DataSource.exists(self,path)
numpy.lib._datasource.DataSource.open(self,path,mode='r')
numpy.lib._datasource.Repository(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository.__del__(self)
numpy.lib._datasource.Repository.__init__(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository._findfile(self,path)
numpy.lib._datasource.Repository._fullpath(self,path)
numpy.lib._datasource.Repository.abspath(self,path)
numpy.lib._datasource.Repository.exists(self,path)
numpy.lib._datasource.Repository.listdir(self)
numpy.lib._datasource.Repository.open(self,path,mode='r')
numpy.lib._datasource._FileOpeners(self)
numpy.lib._datasource._FileOpeners.__getitem__(self,key)
numpy.lib._datasource._FileOpeners.__init__(self)
numpy.lib._datasource._FileOpeners._load(self)
numpy.lib._datasource._FileOpeners.keys(self)
numpy.lib._datasource.open(path,mode='r',destpath=os.curdir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/arraypad.py----------------------------------------
A:numpy.lib.arraypad.initshape->tuple((1 if i != axis else shape[axis] for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.padarr->padarr.repeat(dim, axis=i).repeat(dim, axis=i)
A:numpy.lib.arraypad.padshape->tuple((x if i != axis else pad_amt for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.edge_slice->tuple((slice(None) if i != axis else -1 for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.pad_singleton->tuple((x if i != axis else 1 for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.edge_arr->arr[edge_slice].reshape(pad_singleton)
A:numpy.lib.arraypad.ramp_arr->_arange_ndarray(arr, padshape, axis, reverse=False).astype(np.float64)
A:numpy.lib.arraypad.edge_pad->arr[edge_slice].reshape(pad_singleton).repeat(pad_amt, axis)
A:numpy.lib.arraypad.max_slice->tuple((slice(None) for x in arr.shape))
A:numpy.lib.arraypad.max_chunk->arr[max_slice].max(axis=axis).reshape(pad_singleton)
A:numpy.lib.arraypad.mean_slice->tuple((slice(None) for x in arr.shape))
A:numpy.lib.arraypad.mean_chunk->arr[mean_slice].mean(axis=axis).reshape(pad_singleton)
A:numpy.lib.arraypad.med_slice->tuple((slice(None) for x in arr.shape))
A:numpy.lib.arraypad.med_chunk->numpy.median(arr[med_slice], axis=axis).reshape(pad_singleton)
A:numpy.lib.arraypad.min_slice->tuple((slice(None) for x in arr.shape))
A:numpy.lib.arraypad.min_chunk->arr[min_slice].min(axis=axis).reshape(pad_singleton)
A:numpy.lib.arraypad.ref_slice->tuple((slice(None) if i != axis else slice(start, end) for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.ref_chunk1->ref_chunk1.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.edge_slice1->tuple((slice(None) if i != axis else 0 for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.edge_chunk->arr[edge_slice2].reshape(pad_singleton)
A:numpy.lib.arraypad.rev_idx->tuple((slice(None) if i != axis else slice(None, None, -1) for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.ref_chunk2->ref_chunk2.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.edge_slice2->tuple((slice(None) if i != axis else -1 for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.sym_slice->tuple((slice(None) if i != axis else slice(start, end) for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.sym_chunk1->sym_chunk1.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.sym_chunk2->sym_chunk2.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.wrap_slice->tuple((slice(None) if i != axis else slice(0, pad_amt[1]) for (i, x) in enumerate(arr.shape)))
A:numpy.lib.arraypad.wrap_chunk1->wrap_chunk1.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.wrap_chunk2->wrap_chunk2.reshape(pad_singleton).reshape(pad_singleton)
A:numpy.lib.arraypad.shapelen->len(np.shape(narray))
A:numpy.lib.arraypad.normshp->_normalize_shape(narray, number_elements)
A:numpy.lib.arraypad.narray->numpy.array(array)
A:numpy.lib.arraypad.pad_width->_validate_lengths(narray, pad_width)
A:numpy.lib.arraypad.kwargs[i]->_normalize_shape(narray, kwargs[i])
A:numpy.lib.arraypad.rank->list(range(len(narray.shape)))
A:numpy.lib.arraypad.newmat->_pad_wrap(newmat, (pad_before, pad_after), axis)
A:numpy.lib.arraypad.pad_iter_b->min(safe_pad, safe_pad * (pad_before // safe_pad))
A:numpy.lib.arraypad.pad_iter_a->min(safe_pad, safe_pad * (pad_after // safe_pad))
numpy._append_const(arr,pad_amt,val,axis=-1)
numpy._append_edge(arr,pad_amt,axis=-1)
numpy._append_max(arr,pad_amt,num,axis=-1)
numpy._append_mean(arr,pad_amt,num,axis=-1)
numpy._append_med(arr,pad_amt,num,axis=-1)
numpy._append_min(arr,pad_amt,num,axis=-1)
numpy._append_ramp(arr,pad_amt,end,axis=-1)
numpy._arange_ndarray(arr,shape,axis,reverse=False)
numpy._normalize_shape(narray,shape)
numpy._pad_ref(arr,pad_amt,method,axis=-1)
numpy._pad_sym(arr,pad_amt,method,axis=-1)
numpy._pad_wrap(arr,pad_amt,axis=-1)
numpy._prepend_const(arr,pad_amt,val,axis=-1)
numpy._prepend_edge(arr,pad_amt,axis=-1)
numpy._prepend_max(arr,pad_amt,num,axis=-1)
numpy._prepend_mean(arr,pad_amt,num,axis=-1)
numpy._prepend_med(arr,pad_amt,num,axis=-1)
numpy._prepend_min(arr,pad_amt,num,axis=-1)
numpy._prepend_ramp(arr,pad_amt,end,axis=-1)
numpy._round_ifneeded(arr,dtype)
numpy._validate_lengths(narray,number_elements)
numpy.lib.arraypad._append_const(arr,pad_amt,val,axis=-1)
numpy.lib.arraypad._append_edge(arr,pad_amt,axis=-1)
numpy.lib.arraypad._append_max(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._append_mean(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._append_med(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._append_min(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._append_ramp(arr,pad_amt,end,axis=-1)
numpy.lib.arraypad._arange_ndarray(arr,shape,axis,reverse=False)
numpy.lib.arraypad._normalize_shape(narray,shape)
numpy.lib.arraypad._pad_ref(arr,pad_amt,method,axis=-1)
numpy.lib.arraypad._pad_sym(arr,pad_amt,method,axis=-1)
numpy.lib.arraypad._pad_wrap(arr,pad_amt,axis=-1)
numpy.lib.arraypad._prepend_const(arr,pad_amt,val,axis=-1)
numpy.lib.arraypad._prepend_edge(arr,pad_amt,axis=-1)
numpy.lib.arraypad._prepend_max(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._prepend_mean(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._prepend_med(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._prepend_min(arr,pad_amt,num,axis=-1)
numpy.lib.arraypad._prepend_ramp(arr,pad_amt,end,axis=-1)
numpy.lib.arraypad._round_ifneeded(arr,dtype)
numpy.lib.arraypad._validate_lengths(narray,number_elements)
numpy.lib.arraypad.pad(array,pad_width,mode=None,**kwargs)
numpy.pad(array,pad_width,mode=None,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/shape_base.py----------------------------------------
A:numpy.lib.shape_base.arr->array(v, copy=False, subok=True)
A:numpy.lib.shape_base.i->zeros(nd, 'O')
A:numpy.lib.shape_base.indlist->list(range(nd))
A:numpy.lib.shape_base.i[axis]->slice(None, None)
A:numpy.lib.shape_base.outshape->list(arr.shape)
A:numpy.lib.shape_base.res->array_split(ary, indices_or_sections, axis)
A:numpy.lib.shape_base.outarr->zeros(outshape, asarray(res).dtype)
A:numpy.lib.shape_base.Ntot->product(outshape)
A:numpy.lib.shape_base.outshape[axis]->len(res)
A:numpy.lib.shape_base.val->asarray(a)
A:numpy.lib.shape_base.a->reshape(a, as_)
A:numpy.lib.shape_base.sub_arys[i]->numpy.core.numeric.array([])
A:numpy.lib.shape_base.Ntotal->len(ary)
A:numpy.lib.shape_base.Nsections->int(indices_or_sections)
A:numpy.lib.shape_base.(Neach_section, extras)->divmod(Ntotal, Nsections)
A:numpy.lib.shape_base.div_points->numpy.core.numeric.array(section_sizes).cumsum()
A:numpy.lib.shape_base.sary->numpy.core.numeric.swapaxes(ary, axis, 0)
A:numpy.lib.shape_base.sub_arys->_replace_zero_by_x_arrays(sub_arys)
A:numpy.lib.shape_base.wrappers->sorted(((getattr(x, '__array_priority__', 0), -i, x.__array_wrap__) for (i, x) in enumerate(args) if hasattr(x, '__array_wrap__')))
A:numpy.lib.shape_base.b->reshape(b, bs)
A:numpy.lib.shape_base.result->wrapper(result)
A:numpy.lib.shape_base.wrapper->get_array_wrap(a, b)
A:numpy.lib.shape_base.tup->tuple(reps)
A:numpy.lib.shape_base.d->len(tup)
A:numpy.lib.shape_base.c->c.reshape(-1, n).repeat(nrep, 0).reshape(-1, n).repeat(nrep, 0)
A:numpy.lib.shape_base.shape->list(c.shape)
A:numpy.lib.shape_base.n->max(c.size, 1)
numpy._replace_zero_by_x_arrays(sub_arys)
numpy.apply_along_axis(func1d,axis,arr,*args)
numpy.apply_over_axes(func,a,axes)
numpy.array_split(ary,indices_or_sections,axis=0)
numpy.column_stack(tup)
numpy.dsplit(ary,indices_or_sections)
numpy.dstack(tup)
numpy.expand_dims(a,axis)
numpy.get_array_prepare(*args)
numpy.get_array_wrap(*args)
numpy.hsplit(ary,indices_or_sections)
numpy.kron(a,b)
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base.apply_along_axis(func1d,axis,arr,*args)
numpy.lib.shape_base.apply_over_axes(func,a,axes)
numpy.lib.shape_base.array_split(ary,indices_or_sections,axis=0)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.dsplit(ary,indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a,axis)
numpy.lib.shape_base.get_array_prepare(*args)
numpy.lib.shape_base.get_array_wrap(*args)
numpy.lib.shape_base.hsplit(ary,indices_or_sections)
numpy.lib.shape_base.kron(a,b)
numpy.lib.shape_base.split(ary,indices_or_sections,axis=0)
numpy.lib.shape_base.tile(A,reps)
numpy.lib.shape_base.vsplit(ary,indices_or_sections)
numpy.split(ary,indices_or_sections,axis=0)
numpy.tile(A,reps)
numpy.vsplit(ary,indices_or_sections)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/_iotools.py----------------------------------------
A:numpy.lib._iotools.fhd->file(fname, flag)
A:numpy.lib._iotools.flat_dt->flatten_dtype(info[0], flatten_base)
A:numpy.lib._iotools.delimiter->delimiter.encode('ascii').encode('ascii')
A:numpy.lib._iotools.idx->numpy.cumsum([0] + list(delimiter))
A:numpy.lib._iotools.self._handyman->self.autostrip(_handyman)
A:numpy.lib._iotools.line->line.strip(asbytes('\r\n')).strip(asbytes('\r\n'))
A:numpy.lib._iotools.defaultdeletechars->set("~!@#$%^&*()-=+~\\|]}[{';: /?.>,<")
A:numpy.lib._iotools.delete->set(deletechars)
A:numpy.lib._iotools.nbnames->len(names)
A:numpy.lib._iotools.seen->dict()
A:numpy.lib._iotools.item->''.join([c for c in item if c not in deletechars])
A:numpy.lib._iotools.cnt->dict().get(item, 0)
A:numpy.lib._iotools.value->value.upper().upper()
A:numpy.lib._iotools.(_defaulttype, _defaultfunc, _defaultfill)->zip(*_mapper)
A:numpy.lib._iotools.default->self.func(asbytes('0'))
A:numpy.lib._iotools.missing_values->missing_values.split(asbytes(',')).split(asbytes(','))
A:numpy.lib._iotools.self._locked->bool(locked)
A:numpy.lib._iotools.dtype->self._getdtype(default)
A:numpy.lib._iotools.self.missing_values->set(list(missing_values) + [asbytes('')])
A:numpy.lib._iotools.self.type->self._dtypeortype(self._getdtype(tester))
A:numpy.lib._iotools._statusmax->len(self._mapper)
A:numpy.lib._iotools.tester->func(testing_value or asbytes('1'))
A:numpy.lib._iotools.ndtype->numpy.dtype(list(zip(names, formats)))
A:numpy.lib._iotools.validate->NameValidator(**validationargs)
A:numpy.lib._iotools.nbfields->len(ndtype)
A:numpy.lib._iotools.names->validate(names, defaultfmt=defaultfmt)
A:numpy.lib._iotools.nbtypes->len(ndtype)
A:numpy.lib._iotools.formats->tuple([ndtype.type] * len(names))
A:numpy.lib._iotools.ndtype.names->validate(ndtype.names, defaultfmt=defaultfmt)
numpy._iotools.ConversionWarning(UserWarning)
numpy._iotools.ConverterError(Exception)
numpy._iotools.ConverterLockError(ConverterError)
numpy._iotools.LineSplitter(self,delimiter=None,comments=asbytes('#'),autostrip=True)
numpy._iotools.LineSplitter._delimited_splitter(self,line)
numpy._iotools.LineSplitter._fixedwidth_splitter(self,line)
numpy._iotools.LineSplitter._variablewidth_splitter(self,line)
numpy._iotools.NameValidator(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy._iotools.NameValidator.validate(self,names,defaultfmt='f%i',nbfields=None)
numpy._iotools.StringConverter(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy._iotools.StringConverter._dtypeortype(cls,dtype)
numpy._iotools.StringConverter._getdtype(cls,val)
numpy._iotools.StringConverter._getsubdtype(cls,val)
numpy._iotools.StringConverter._loose_call(self,value)
numpy._iotools.StringConverter.iterupgrade(self,value)
numpy._iotools.StringConverter.update(self,func,default=None,testing_value=None,missing_values=asbytes(''),locked=False)
numpy._iotools.StringConverter.upgrade(self,value)
numpy._iotools.StringConverter.upgrade_mapper(cls,func,default=None)
numpy._iotools._is_bytes_like(obj)
numpy._iotools._to_filehandle(fname,flag='r',return_opened=False)
numpy._iotools.easy_dtype(ndtype,names=None,defaultfmt='f%i',**validationargs)
numpy._iotools.flatten_dtype(ndtype,flatten_base=False)
numpy._iotools.has_nested_fields(ndtype)
numpy.lib._iotools.ConversionWarning(UserWarning)
numpy.lib._iotools.ConverterError(Exception)
numpy.lib._iotools.ConverterLockError(ConverterError)
numpy.lib._iotools.LineSplitter(self,delimiter=None,comments=asbytes('#'),autostrip=True)
numpy.lib._iotools.LineSplitter.__init__(self,delimiter=None,comments=asbytes('#'),autostrip=True)
numpy.lib._iotools.LineSplitter._delimited_splitter(self,line)
numpy.lib._iotools.LineSplitter._fixedwidth_splitter(self,line)
numpy.lib._iotools.LineSplitter._variablewidth_splitter(self,line)
numpy.lib._iotools.LineSplitter.autostrip(self,method)
numpy.lib._iotools.NameValidator(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.__init__(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.validate(self,names,defaultfmt='f%i',nbfields=None)
numpy.lib._iotools.StringConverter(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter.__init__(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter._dtypeortype(cls,dtype)
numpy.lib._iotools.StringConverter._getdtype(cls,val)
numpy.lib._iotools.StringConverter._getsubdtype(cls,val)
numpy.lib._iotools.StringConverter._loose_call(self,value)
numpy.lib._iotools.StringConverter._strict_call(self,value)
numpy.lib._iotools.StringConverter.iterupgrade(self,value)
numpy.lib._iotools.StringConverter.update(self,func,default=None,testing_value=None,missing_values=asbytes(''),locked=False)
numpy.lib._iotools.StringConverter.upgrade(self,value)
numpy.lib._iotools.StringConverter.upgrade_mapper(cls,func,default=None)
numpy.lib._iotools._is_bytes_like(obj)
numpy.lib._iotools._is_string_like(obj)
numpy.lib._iotools._to_filehandle(fname,flag='r',return_opened=False)
numpy.lib._iotools.easy_dtype(ndtype,names=None,defaultfmt='f%i',**validationargs)
numpy.lib._iotools.flatten_dtype(ndtype,flatten_base=False)
numpy.lib._iotools.has_nested_fields(ndtype)
numpy.lib._iotools.str2bool(value)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/scimath.py----------------------------------------
A:numpy.lib.scimath._ln2->numpy.core.numeric.log(2.0)
A:numpy.lib.scimath.x->_fix_real_abs_gt_1(x)
A:numpy.lib.scimath.n->_fix_real_lt_zero(n)
A:numpy.lib.scimath.p->_fix_int_lt_zero(p)
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n,x)
numpy.lib.scimath.power(x,p)
numpy.lib.scimath.sqrt(x)
numpy.scimath._fix_real_abs_gt_1(x)
numpy.scimath._fix_real_lt_zero(x)
numpy.scimath.arccos(x)
numpy.scimath.arcsin(x)
numpy.scimath.arctanh(x)
numpy.scimath.log(x)
numpy.scimath.log10(x)
numpy.scimath.log2(x)
numpy.scimath.logn(n,x)
numpy.scimath.power(x,p)
numpy.scimath.sqrt(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/type_check.py----------------------------------------
A:numpy.lib.type_check.i->_typecodes_by_elsize.index(t)
A:numpy.lib.type_check.dtype->numpy.core.numeric.obj2sctype(dtype)
A:numpy.lib.type_check.ax->asanyarray(x)
A:numpy.lib.type_check.res->zeros(ax.shape, bool)
A:numpy.lib.type_check.f->numpy.core.getlimits.finfo(a.dtype.type)
A:numpy.lib.type_check.t->obj2sctype(type(x))
A:numpy.lib.type_check.y->array([x])
A:numpy.lib.type_check.are_inf->isposinf(y)
A:numpy.lib.type_check.are_neg_inf->isneginf(y)
A:numpy.lib.type_check.are_nan->isnan(y)
A:numpy.lib.type_check.(maxf, minf)->_getmaxmin(y.dtype.type)
A:numpy.lib.type_check.a->asanyarray(a)
A:numpy.lib.type_check.p->array_precision.get(t, None)
A:numpy.lib.type_check.precision->max(precision, p)
numpy._getmaxmin(t)
numpy.asfarray(a,dtype=_nx.float_)
numpy.asscalar(a)
numpy.common_type(*arrays)
numpy.imag(val)
numpy.isreal(x)
numpy.isrealobj(x)
numpy.lib.iscomplex(x)
numpy.lib.iscomplexobj(x)
numpy.lib.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check.asfarray(a,dtype=_nx.float_)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.common_type(*arrays)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.lib.type_check.nan_to_num(x)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a,tol=100)
numpy.lib.type_check.typename(char)
numpy.nan_to_num(x)
numpy.real(val)
numpy.real_if_close(a,tol=100)
numpy.typename(char)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/user_array.py----------------------------------------
A:numpy.lib.user_array.self.array->array(data, dtype, copy=copy)
A:numpy.lib.user_array.self.array[index]->asarray(value, self.dtype)
A:numpy.lib.user_array.self.array[i:j]->asarray(value, self.dtype)
A:numpy.lib.user_array.temp->reshape(arange(10000), (100, 100))
A:numpy.lib.user_array.ua->container(temp)
numpy.lib.user_array.container(self,data,dtype=None,copy=True)
numpy.lib.user_array.container.__abs__(self)
numpy.lib.user_array.container.__abs__(self)
numpy.lib.user_array.container.__add__(self,other)
numpy.lib.user_array.container.__and__(self,other)
numpy.lib.user_array.container.__array__(self,t=None)
numpy.lib.user_array.container.__array_wrap__(self,*args)
numpy.lib.user_array.container.__complex__(self)
numpy.lib.user_array.container.__div__(self,other)
numpy.lib.user_array.container.__divmod__(self,other)
numpy.lib.user_array.container.__eq__(self,other)
numpy.lib.user_array.container.__float__(self)
numpy.lib.user_array.container.__ge__(self,other)
numpy.lib.user_array.container.__getattr__(self,attr)
numpy.lib.user_array.container.__getitem__(self,index)
numpy.lib.user_array.container.__getslice__(self,i,j)
numpy.lib.user_array.container.__gt__(self,other)
numpy.lib.user_array.container.__hex__(self)
numpy.lib.user_array.container.__iadd__(self,other)
numpy.lib.user_array.container.__iand__(self,other)
numpy.lib.user_array.container.__idiv__(self,other)
numpy.lib.user_array.container.__ilshift__(self,other)
numpy.lib.user_array.container.__imod__(self,other)
numpy.lib.user_array.container.__imul__(self,other)
numpy.lib.user_array.container.__init__(self,data,dtype=None,copy=True)
numpy.lib.user_array.container.__int__(self)
numpy.lib.user_array.container.__invert__(self)
numpy.lib.user_array.container.__ior__(self,other)
numpy.lib.user_array.container.__ipow__(self,other)
numpy.lib.user_array.container.__irshift__(self,other)
numpy.lib.user_array.container.__isub__(self,other)
numpy.lib.user_array.container.__ixor__(self,other)
numpy.lib.user_array.container.__le__(self,other)
numpy.lib.user_array.container.__len__(self)
numpy.lib.user_array.container.__long__(self)
numpy.lib.user_array.container.__lshift__(self,other)
numpy.lib.user_array.container.__lt__(self,other)
numpy.lib.user_array.container.__mod__(self,other)
numpy.lib.user_array.container.__mul__(self,other)
numpy.lib.user_array.container.__ne__(self,other)
numpy.lib.user_array.container.__neg__(self)
numpy.lib.user_array.container.__neg__(self)
numpy.lib.user_array.container.__oct__(self)
numpy.lib.user_array.container.__or__(self,other)
numpy.lib.user_array.container.__pos__(self)
numpy.lib.user_array.container.__pow__(self,other)
numpy.lib.user_array.container.__rand__(self,other)
numpy.lib.user_array.container.__rdiv__(self,other)
numpy.lib.user_array.container.__rdivmod__(self,other)
numpy.lib.user_array.container.__repr__(self)
numpy.lib.user_array.container.__rlshift__(self,other)
numpy.lib.user_array.container.__rmod__(self,other)
numpy.lib.user_array.container.__ror__(self,other)
numpy.lib.user_array.container.__rpow__(self,other)
numpy.lib.user_array.container.__rrshift__(self,other)
numpy.lib.user_array.container.__rshift__(self,other)
numpy.lib.user_array.container.__rsub__(self,other)
numpy.lib.user_array.container.__rxor__(self,other)
numpy.lib.user_array.container.__setattr__(self,attr,value)
numpy.lib.user_array.container.__setitem__(self,index,value)
numpy.lib.user_array.container.__setslice__(self,i,j,value)
numpy.lib.user_array.container.__sub__(self,other)
numpy.lib.user_array.container.__xor__(self,other)
numpy.lib.user_array.container._rc(self,a)
numpy.lib.user_array.container._scalarfunc(self,func)
numpy.lib.user_array.container.astype(self,typecode)
numpy.lib.user_array.container.byteswap(self)
numpy.lib.user_array.container.copy(self)
numpy.lib.user_array.container.tostring(self)
numpy.user_array.container(self,data,dtype=None,copy=True)
numpy.user_array.container.__abs__(self)
numpy.user_array.container.__abs__(self)
numpy.user_array.container.__add__(self,other)
numpy.user_array.container.__and__(self,other)
numpy.user_array.container.__array__(self,t=None)
numpy.user_array.container.__array_wrap__(self,*args)
numpy.user_array.container.__div__(self,other)
numpy.user_array.container.__divmod__(self,other)
numpy.user_array.container.__eq__(self,other)
numpy.user_array.container.__ge__(self,other)
numpy.user_array.container.__getattr__(self,attr)
numpy.user_array.container.__getitem__(self,index)
numpy.user_array.container.__getslice__(self,i,j)
numpy.user_array.container.__gt__(self,other)
numpy.user_array.container.__hex__(self)
numpy.user_array.container.__iadd__(self,other)
numpy.user_array.container.__iand__(self,other)
numpy.user_array.container.__idiv__(self,other)
numpy.user_array.container.__ilshift__(self,other)
numpy.user_array.container.__imod__(self,other)
numpy.user_array.container.__imul__(self,other)
numpy.user_array.container.__invert__(self)
numpy.user_array.container.__ior__(self,other)
numpy.user_array.container.__ipow__(self,other)
numpy.user_array.container.__irshift__(self,other)
numpy.user_array.container.__isub__(self,other)
numpy.user_array.container.__ixor__(self,other)
numpy.user_array.container.__le__(self,other)
numpy.user_array.container.__len__(self)
numpy.user_array.container.__long__(self)
numpy.user_array.container.__lshift__(self,other)
numpy.user_array.container.__lt__(self,other)
numpy.user_array.container.__mod__(self,other)
numpy.user_array.container.__mul__(self,other)
numpy.user_array.container.__ne__(self,other)
numpy.user_array.container.__neg__(self)
numpy.user_array.container.__neg__(self)
numpy.user_array.container.__oct__(self)
numpy.user_array.container.__or__(self,other)
numpy.user_array.container.__pos__(self)
numpy.user_array.container.__pow__(self,other)
numpy.user_array.container.__rand__(self,other)
numpy.user_array.container.__rdiv__(self,other)
numpy.user_array.container.__rdivmod__(self,other)
numpy.user_array.container.__repr__(self)
numpy.user_array.container.__rlshift__(self,other)
numpy.user_array.container.__rmod__(self,other)
numpy.user_array.container.__ror__(self,other)
numpy.user_array.container.__rpow__(self,other)
numpy.user_array.container.__rrshift__(self,other)
numpy.user_array.container.__rshift__(self,other)
numpy.user_array.container.__rsub__(self,other)
numpy.user_array.container.__rxor__(self,other)
numpy.user_array.container.__setattr__(self,attr,value)
numpy.user_array.container.__setitem__(self,index,value)
numpy.user_array.container.__setslice__(self,i,j,value)
numpy.user_array.container.__sub__(self,other)
numpy.user_array.container.__xor__(self,other)
numpy.user_array.container._rc(self,a)
numpy.user_array.container._scalarfunc(self,func)
numpy.user_array.container.astype(self,typecode)
numpy.user_array.container.byteswap(self)
numpy.user_array.container.copy(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/ufunclike.py----------------------------------------
A:numpy.lib.ufunclike.x->numpy.core.numeric.asarray(x)
A:numpy.lib.ufunclike.y1->numpy.core.numeric.floor(x)
A:numpy.lib.ufunclike.y2->numpy.core.numeric.ceil(x)
A:numpy.lib.ufunclike.y->numpy.core.numeric.empty(x.shape, dtype=nx.bool_)
A:numpy.lib.ufunclike.y[...]->numpy.core.numeric.where(x >= 0, y1, y2)
numpy.fix(x,y=None)
numpy.isneginf(x,y=None)
numpy.isposinf(x,y=None)
numpy.lib.ufunclike.fix(x,y=None)
numpy.lib.ufunclike.isneginf(x,y=None)
numpy.lib.ufunclike.isposinf(x,y=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/setup.py----------------------------------------
A:numpy.lib.setup.config->Configuration('lib', parent_package, top_path)
numpy.lib.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/format.py----------------------------------------
A:numpy.lib.format.MAGIC_PREFIX->asbytes('\x93NUMPY')
A:numpy.lib.format.magic_str->_read_bytes(fp, MAGIC_LEN, 'magic string')
A:numpy.lib.format.(major, minor)->map(ord, magic_str[-2:])
A:numpy.lib.format.d['descr']->dtype_to_descr(array.dtype)
A:numpy.lib.format.header->_read_bytes(fp, header_length, 'array header')
A:numpy.lib.format.header_len_str->struct.pack('<H', len(header))
A:numpy.lib.format.hlength_str->_read_bytes(fp, 2, 'array header length')
A:numpy.lib.format.d->dict(descr=dtype_to_descr(dtype), fortran_order=fortran_order, shape=shape)
A:numpy.lib.format.keys->sorted(d.keys())
A:numpy.lib.format.dtype->numpy.dtype(dtype)
A:numpy.lib.format.version->read_magic(fp)
A:numpy.lib.format.(shape, fortran_order, dtype)->read_array_header_1_0(fp)
A:numpy.lib.format.count->numpy.multiply.reduce(shape)
A:numpy.lib.format.array->array.transpose().transpose()
A:numpy.lib.format.read_count->min(max_read_count, count - i)
A:numpy.lib.format.read_size->int(read_count * dtype.itemsize)
A:numpy.lib.format.data->bytes()
A:numpy.lib.format.array[i:i + read_count]->numpy.frombuffer(data, dtype=dtype, count=read_count)
A:numpy.lib.format.fp->open(filename, 'rb')
A:numpy.lib.format.offset->open(filename, 'rb').tell()
A:numpy.lib.format.marray->numpy.memmap(filename, dtype=dtype, shape=shape, order=order, mode=mode, offset=offset)
A:numpy.lib.format.r->open(filename, 'rb').read(size - len(data))
numpy.format._read_bytes(fp,size,error_template='ranoutofdata')
numpy.format.dtype_to_descr(dtype)
numpy.format.header_data_from_array_1_0(array)
numpy.format.magic(major,minor)
numpy.format.open_memmap(filename,mode='r+',dtype=None,shape=None,fortran_order=False,version=(1,0))
numpy.format.read_array(fp)
numpy.format.read_array_header_1_0(fp)
numpy.format.read_magic(fp)
numpy.format.write_array(fp,array,version=(1,0))
numpy.format.write_array_header_1_0(fp,d)
numpy.lib.format._read_bytes(fp,size,error_template='ranoutofdata')
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.magic(major,minor)
numpy.lib.format.open_memmap(filename,mode='r+',dtype=None,shape=None,fortran_order=False,version=(1,0))
numpy.lib.format.read_array(fp)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.write_array(fp,array,version=(1,0))
numpy.lib.format.write_array_header_1_0(fp,d)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/function_base.py----------------------------------------
A:numpy.lib.function_base.a->numpy.asarray(a)
A:numpy.lib.function_base.weights->array([j - index, index - i], float)
A:numpy.lib.function_base.bins->asarray(bins)
A:numpy.lib.function_base.n->arange(0, M)
A:numpy.lib.function_base.sa->sort(a[i:i + block])
A:numpy.lib.function_base.zero->array(0, dtype=ntype)
A:numpy.lib.function_base.sorting_index->numpy.argsort(tmp_a)
A:numpy.lib.function_base.cw->numpy.concatenate(([zero], sw.cumsum()))
A:numpy.lib.function_base.db->array(np.diff(bins), float)
A:numpy.lib.function_base.nbin->asarray(nbin)
A:numpy.lib.function_base.M->len(bins)
A:numpy.lib.function_base.smin->zeros(D)
A:numpy.lib.function_base.smax->zeros(D)
A:numpy.lib.function_base.edges[i]->asarray(bins[i], float)
A:numpy.lib.function_base.dedges[i]->diff(edges[i])
A:numpy.lib.function_base.Ncount[i]->digitize(sample[:, i], edges[i])
A:numpy.lib.function_base.mindiff->diff(edges[i]).min()
A:numpy.lib.function_base.hist->hist.swapaxes(i, j).swapaxes(i, j)
A:numpy.lib.function_base.ni->asarray(nbin).argsort()
A:numpy.lib.function_base.xy->zeros(N, int)
A:numpy.lib.function_base.flatcount->bincount(xy, weights)
A:numpy.lib.function_base.s->hist.swapaxes(i, j).swapaxes(i, j).sum()
A:numpy.lib.function_base.shape->ones(D, int)
A:numpy.lib.function_base.avg->numpy.asarray(a).mean(axis)
A:numpy.lib.function_base.scl->numpy.array(wgt, copy=0, ndmin=a.ndim).swapaxes(-1, axis).sum(axis=axis)
A:numpy.lib.function_base.wgt->numpy.array(wgt, copy=0, ndmin=a.ndim).swapaxes(-1, axis)
A:numpy.lib.function_base.x->asanyarray(x)
A:numpy.lib.function_base.n2->len(choicelist)
A:numpy.lib.function_base.y->numpy.asarray(y)
A:numpy.lib.function_base.y[condlist[k]]->item(vals, *args, **kw)
A:numpy.lib.function_base.pfac->asarray(1)
A:numpy.lib.function_base.f->numpy.asanyarray(f)
A:numpy.lib.function_base.N->len(f.shape)
A:numpy.lib.function_base.dx->list(varargs)
A:numpy.lib.function_base.otype->numpy.asanyarray(f).dtype.name.replace('datetime', 'timedelta')
A:numpy.lib.function_base.out->numpy.empty_like(f, dtype=otype)
A:numpy.lib.function_base.slice1[axis]->slice(1, None)
A:numpy.lib.function_base.slice2[axis]->slice(None, -1)
A:numpy.lib.function_base.slice3[axis]->slice(None)
A:numpy.lib.function_base.nd->len(y.shape)
A:numpy.lib.function_base.slice1->tuple(slice1)
A:numpy.lib.function_base.slice2->tuple(slice2)
A:numpy.lib.function_base.z->asarray(z)
A:numpy.lib.function_base.p->asarray(p)
A:numpy.lib.function_base.dd->diff(p, axis=axis)
A:numpy.lib.function_base.up->array(p, copy=True, dtype='d')
A:numpy.lib.function_base.b->array(a, subok=True, copy=True)
A:numpy.lib.function_base.trim->trim.upper().upper()
A:numpy.lib.function_base.last->len(filt)
A:numpy.lib.function_base.tmp->asanyarray(x).flatten()
A:numpy.lib.function_base.idx->concatenate(([True], tmp[1:] != tmp[:-1]))
A:numpy.lib.function_base.items->sorted(set(x))
A:numpy.lib.function_base.self.otypes->''.join([_nx.dtype(x).char for x in otypes])
A:numpy.lib.function_base.excluded->set()
A:numpy.lib.function_base.self.excluded->set(excluded)
A:numpy.lib.function_base.nargs->len(args)
A:numpy.lib.function_base.the_args->list(args)
A:numpy.lib.function_base.nout->len(outputs)
A:numpy.lib.function_base.ufuncself._ufunc->frompyfunc(func, len(args), nout)
A:numpy.lib.function_base.outputs->ufunc(*inputs)
A:numpy.lib.function_base.otypes->''.join([asarray(outputs[_k]).dtype.char for _k in range(nout)])
A:numpy.lib.function_base.ufunc->frompyfunc(_func, len(args), nout)
A:numpy.lib.function_base._res->tuple([array(_x, copy=False, subok=True, dtype=_t) for (_x, _t) in zip(outputs, otypes)])
A:numpy.lib.function_base.(ufunc, otypes)->self._get_ufunc_and_otypes(func=func, args=args)
A:numpy.lib.function_base.X->concatenate((X, y), axis)
A:numpy.lib.function_base.fact->float(N - ddof)
A:numpy.lib.function_base.c->cov(x, y, rowvar, bias, ddof)
A:numpy.lib.function_base.d->numpy.asarray(d)
A:numpy.lib.function_base.y[ind]->_i0_1(x[ind])
A:numpy.lib.function_base.y[ind2]->_i0_2(x[ind2])
A:numpy.lib.function_base.part->partition(a, (sz - 1) // 2, axis=axis)
A:numpy.lib.function_base.indexer[axis]->slice(i, i + 2)
A:numpy.lib.function_base.sorted->sort(a, axis=axis)
A:numpy.lib.function_base.i->int(index)
A:numpy.lib.function_base.sumval->array([j - index, index - i], float).sum()
A:numpy.lib.function_base.ret->numpy.core.umath.add.reduce(d * (y[slice1] + y[slice2]) / 2.0, axis)
A:numpy.lib.function_base.args->numpy.atleast_1d(*xi)
A:numpy.lib.function_base.ndim->len(args)
A:numpy.lib.function_base.copy_->kwargs.get('copy', True)
A:numpy.lib.function_base.sparse->kwargs.get('sparse', False)
A:numpy.lib.function_base.indexing->kwargs.get('indexing', 'xy')
A:numpy.lib.function_base.mult_fact->numpy.ones(shape, dtype=int)
A:numpy.lib.function_base.arr->arr.ravel().ravel()
A:numpy.lib.function_base.newshape->list(arr.shape)
A:numpy.lib.function_base.(start, stop, step)->obj.astype(intp).indices(N)
A:numpy.lib.function_base.xr->range(start, stop, step)
A:numpy.lib.function_base.numtodel->len(xr)
A:numpy.lib.function_base.new->empty(newshape, arr.dtype, arr.flags.fnc)
A:numpy.lib.function_base.slobj[axis]->slice(index + numnew, None)
A:numpy.lib.function_base.slobj2[axis]->slice(index, None)
A:numpy.lib.function_base.keep->ones(N, dtype=bool)
A:numpy.lib.function_base.obj->obj.astype(intp).astype(intp)
A:numpy.lib.function_base.indices->indices.astype(intp).astype(intp)
A:numpy.lib.function_base.index->indices.astype(intp).astype(intp).item()
A:numpy.lib.function_base.values->ravel(values)
A:numpy.lib.function_base.numnew->len(indices)
A:numpy.lib.function_base.order->indices.astype(intp).astype(intp).argsort(kind='mergesort')
A:numpy.lib.function_base.old_mask->ones(newshape[axis], dtype=bool)
numpy._chbevl(x,vals)
numpy._compute_qth_percentile(sorted,q,axis,out)
numpy._i0_1(x)
numpy._i0_2(x)
numpy.add_newdoc(place,obj,doc)
numpy.angle(z,deg=0)
numpy.append(arr,values,axis=None)
numpy.asarray_chkfinite(a,dtype=None,order=None)
numpy.average(a,axis=None,weights=None,returned=False)
numpy.bartlett(M)
numpy.blackman(M)
numpy.copy(a,order='K')
numpy.corrcoef(x,y=None,rowvar=1,bias=0,ddof=None)
numpy.cov(m,y=None,rowvar=1,bias=0,ddof=None)
numpy.delete(arr,obj,axis=None)
numpy.diff(a,n=1,axis=-1)
numpy.disp(mesg,device=None,linefeed=True)
numpy.extract(condition,arr)
numpy.gradient(f,*varargs)
numpy.hamming(M)
numpy.hanning(M)
numpy.histogram(a,bins=10,range=None,normed=False,weights=None,density=None)
numpy.histogramdd(sample,bins=10,range=None,normed=False,weights=None)
numpy.i0(x)
numpy.insert(arr,obj,values,axis=None)
numpy.iterable(y)
numpy.kaiser(M,beta)
numpy.lib.function_base._chbevl(x,vals)
numpy.lib.function_base._compute_qth_percentile(sorted,q,axis,out)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base.add_newdoc(place,obj,doc)
numpy.lib.function_base.angle(z,deg=0)
numpy.lib.function_base.append(arr,values,axis=None)
numpy.lib.function_base.asarray_chkfinite(a,dtype=None,order=None)
numpy.lib.function_base.average(a,axis=None,weights=None,returned=False)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.copy(a,order='K')
numpy.lib.function_base.corrcoef(x,y=None,rowvar=1,bias=0,ddof=None)
numpy.lib.function_base.cov(m,y=None,rowvar=1,bias=0,ddof=None)
numpy.lib.function_base.delete(arr,obj,axis=None)
numpy.lib.function_base.diff(a,n=1,axis=-1)
numpy.lib.function_base.disp(mesg,device=None,linefeed=True)
numpy.lib.function_base.extract(condition,arr)
numpy.lib.function_base.gradient(f,*varargs)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.histogram(a,bins=10,range=None,normed=False,weights=None,density=None)
numpy.lib.function_base.histogramdd(sample,bins=10,range=None,normed=False,weights=None)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr,obj,values,axis=None)
numpy.lib.function_base.interp(x,xp,fp,left=None,right=None)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M,beta)
numpy.lib.function_base.median(a,axis=None,out=None,overwrite_input=False)
numpy.lib.function_base.meshgrid(*xi,**kwargs)
numpy.lib.function_base.msort(a)
numpy.lib.function_base.percentile(a,q,axis=None,out=None,overwrite_input=False)
numpy.lib.function_base.piecewise(x,condlist,funclist,*args,**kw)
numpy.lib.function_base.place(arr,mask,vals)
numpy.lib.function_base.select(condlist,choicelist,default=0)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.trapz(y,x=None,dx=1.0,axis=-1)
numpy.lib.function_base.trim_zeros(filt,trim='fb')
numpy.lib.function_base.unique(x)
numpy.lib.function_base.unwrap(p,discont=pi,axis=-1)
numpy.lib.function_base.vectorize(self,pyfunc,otypes='',doc=None,excluded=None,cache=False)
numpy.lib.function_base.vectorize.__init__(self,pyfunc,otypes='',doc=None,excluded=None,cache=False)
numpy.lib.function_base.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.lib.function_base.vectorize._vectorize_call(self,func,args)
numpy.lib.interp(x,xp,fp,left=None,right=None)
numpy.lib.sort_complex(a)
numpy.median(a,axis=None,out=None,overwrite_input=False)
numpy.meshgrid(*xi,**kwargs)
numpy.msort(a)
numpy.percentile(a,q,axis=None,out=None,overwrite_input=False)
numpy.piecewise(x,condlist,funclist,*args,**kw)
numpy.place(arr,mask,vals)
numpy.select(condlist,choicelist,default=0)
numpy.sinc(x)
numpy.trapz(y,x=None,dx=1.0,axis=-1)
numpy.trim_zeros(filt,trim='fb')
numpy.unique(x)
numpy.unwrap(p,discont=pi,axis=-1)
numpy.vectorize(self,pyfunc,otypes='',doc=None,excluded=None,cache=False)
numpy.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.vectorize._vectorize_call(self,func,args)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/polynomial.py----------------------------------------
A:numpy.lib.polynomial.seq_of_zeros->eigvals(seq_of_zeros)
A:numpy.lib.polynomial.a->a.real.copy().real.copy()
A:numpy.lib.polynomial.roots->hstack((roots, NX.zeros(trailing_zeros, roots.dtype)))
A:numpy.lib.polynomial.pos_roots->sort_complex(NX.compress(roots.imag > 0, roots))
A:numpy.lib.polynomial.neg_roots->numpy.core.numeric.conjugate(sort_complex(NX.compress(roots.imag < 0, roots)))
A:numpy.lib.polynomial.p->numpy.core.numeric.asarray(p)
A:numpy.lib.polynomial.N->len(p)
A:numpy.lib.polynomial.A->diag(NX.ones((N - 2,), p.dtype), -1)
A:numpy.lib.polynomial.m->int(m)
A:numpy.lib.polynomial.k->atleast_1d(k)
A:numpy.lib.polynomial.truepoly->isinstance(p, poly1d)
A:numpy.lib.polynomial.y->numpy.core.numeric.zeros_like(x)
A:numpy.lib.polynomial.val->poly1d(val)
A:numpy.lib.polynomial.lhs->vander(x, order)
A:numpy.lib.polynomial.scale->numpy.core.numeric.sqrt((lhs * lhs).sum(axis=0))
A:numpy.lib.polynomial.(c, resids, rank, s)->lstsq(lhs, rhs, rcond)
A:numpy.lib.polynomial.Vbase->inv(dot(lhs.T, lhs))
A:numpy.lib.polynomial.x->numpy.core.numeric.asarray(x)
A:numpy.lib.polynomial.a1->atleast_1d(a1)
A:numpy.lib.polynomial.a2->atleast_1d(a2)
A:numpy.lib.polynomial.zr->numpy.core.numeric.zeros(key - self.order, self.coeffs.dtype)
A:numpy.lib.polynomial.q->numpy.core.numeric.zeros((max(m - n + 1, 1),), w.dtype)
A:numpy.lib.polynomial.r->u.copy()
A:numpy.lib.polynomial._poly_mat->re.compile('[*][*]([0-9]*)')
A:numpy.lib.polynomial.mat->re.compile('[*][*]([0-9]*)').search(astr, n)
A:numpy.lib.polynomial.span->re.compile('[*][*]([0-9]*)').search(astr, n).span()
A:numpy.lib.polynomial.c_or_r->numpy.core.numeric.array([0.0])
A:numpy.lib.polynomial.vals->repr(self.coeffs)
A:numpy.lib.polynomial.coefstr->fmt_float(real(coeffs[k]))
A:numpy.lib.polynomial.other->poly1d(other)
A:numpy.lib.polynomial.res->polymul(self.coeffs, res)
A:numpy.lib.polynomial.self.__dict__['coeffs']->numpy.core.numeric.concatenate((zr, self.coeffs))
numpy.RankWarning(UserWarning)
numpy._raise_power(astr,wrap=70)
numpy.lib.poly1d.__str__(self)
numpy.lib.poly1d.integ(self,m=1,k=0)
numpy.lib.polyint(p,m=1,k=None)
numpy.lib.polynomial.RankWarning(UserWarning)
numpy.lib.polynomial._raise_power(astr,wrap=70)
numpy.lib.polynomial.poly(seq_of_zeros)
numpy.lib.polynomial.poly1d(self,c_or_r,r=0,variable=None)
numpy.lib.polynomial.poly1d.__add__(self,other)
numpy.lib.polynomial.poly1d.__array__(self,t=None)
numpy.lib.polynomial.poly1d.__div__(self,other)
numpy.lib.polynomial.poly1d.__eq__(self,other)
numpy.lib.polynomial.poly1d.__getattr__(self,key)
numpy.lib.polynomial.poly1d.__getitem__(self,val)
numpy.lib.polynomial.poly1d.__init__(self,c_or_r,r=0,variable=None)
numpy.lib.polynomial.poly1d.__iter__(self)
numpy.lib.polynomial.poly1d.__len__(self)
numpy.lib.polynomial.poly1d.__mul__(self,other)
numpy.lib.polynomial.poly1d.__ne__(self,other)
numpy.lib.polynomial.poly1d.__neg__(self)
numpy.lib.polynomial.poly1d.__pos__(self)
numpy.lib.polynomial.poly1d.__pow__(self,val)
numpy.lib.polynomial.poly1d.__radd__(self,other)
numpy.lib.polynomial.poly1d.__rdiv__(self,other)
numpy.lib.polynomial.poly1d.__repr__(self)
numpy.lib.polynomial.poly1d.__rmul__(self,other)
numpy.lib.polynomial.poly1d.__rsub__(self,other)
numpy.lib.polynomial.poly1d.__setattr__(self,key,val)
numpy.lib.polynomial.poly1d.__setitem__(self,key,val)
numpy.lib.polynomial.poly1d.__str__(self)
numpy.lib.polynomial.poly1d.__sub__(self,other)
numpy.lib.polynomial.poly1d.deriv(self,m=1)
numpy.lib.polynomial.poly1d.integ(self,m=1,k=0)
numpy.lib.polynomial.polyadd(a1,a2)
numpy.lib.polynomial.polyder(p,m=1)
numpy.lib.polynomial.polydiv(u,v)
numpy.lib.polynomial.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.lib.polynomial.polyint(p,m=1,k=None)
numpy.lib.polynomial.polymul(a1,a2)
numpy.lib.polynomial.polysub(a1,a2)
numpy.lib.polynomial.polyval(p,x)
numpy.lib.polynomial.roots(p)
numpy.poly(seq_of_zeros)
numpy.poly1d(self,c_or_r,r=0,variable=None)
numpy.poly1d.__add__(self,other)
numpy.poly1d.__array__(self,t=None)
numpy.poly1d.__div__(self,other)
numpy.poly1d.__eq__(self,other)
numpy.poly1d.__getattr__(self,key)
numpy.poly1d.__getitem__(self,val)
numpy.poly1d.__iter__(self)
numpy.poly1d.__len__(self)
numpy.poly1d.__mul__(self,other)
numpy.poly1d.__ne__(self,other)
numpy.poly1d.__neg__(self)
numpy.poly1d.__pos__(self)
numpy.poly1d.__pow__(self,val)
numpy.poly1d.__radd__(self,other)
numpy.poly1d.__rdiv__(self,other)
numpy.poly1d.__repr__(self)
numpy.poly1d.__rmul__(self,other)
numpy.poly1d.__rsub__(self,other)
numpy.poly1d.__setattr__(self,key,val)
numpy.poly1d.__setitem__(self,key,val)
numpy.poly1d.__sub__(self,other)
numpy.poly1d.deriv(self,m=1)
numpy.polyadd(a1,a2)
numpy.polyder(p,m=1)
numpy.polydiv(u,v)
numpy.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.polymul(a1,a2)
numpy.polysub(a1,a2)
numpy.polyval(p,x)
numpy.roots(p)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/nanfunctions.py----------------------------------------
A:numpy.lib.nanfunctions.a->a.dtype.type(val).dtype.type(val)
A:numpy.lib.nanfunctions.mask->numpy.all(mask, axis=axis, keepdims=keepdims)
A:numpy.lib.nanfunctions.res->numpy.argmax(a, axis=axis)
A:numpy.lib.nanfunctions.(a, mask)->_replace_nan(a, 0)
A:numpy.lib.nanfunctions.tot->numpy.sum(arr, axis=axis, dtype=dtype, out=out, keepdims=keepdims)
A:numpy.lib.nanfunctions.(arr, mask)->_replace_nan(a, 0)
A:numpy.lib.nanfunctions.dtype->numpy.dtype(dtype)
A:numpy.lib.nanfunctions.cnt->cnt.squeeze(axis).squeeze(axis)
A:numpy.lib.nanfunctions.avg->_divide_by_count(avg, cnt)
A:numpy.lib.nanfunctions.arr->_copyto(arr, 0, mask)
A:numpy.lib.nanfunctions.sqr->numpy.multiply(arr, arr, out=arr)
A:numpy.lib.nanfunctions.var->nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims)
A:numpy.lib.nanfunctions.std->nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims).dtype.type(np.sqrt(var))
numpy._copyto(a,val,mask)
numpy._divide_by_count(a,b,out=None)
numpy._replace_nan(a,val)
numpy.lib.nanfunctions._copyto(a,val,mask)
numpy.lib.nanfunctions._divide_by_count(a,b,out=None)
numpy.lib.nanfunctions._replace_nan(a,val)
numpy.lib.nanfunctions.nanargmax(a,axis=None)
numpy.lib.nanfunctions.nanargmin(a,axis=None)
numpy.lib.nanfunctions.nanmax(a,axis=None,out=None,keepdims=False)
numpy.lib.nanfunctions.nanmean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.lib.nanfunctions.nanmin(a,axis=None,out=None,keepdims=False)
numpy.lib.nanfunctions.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.lib.nanfunctions.nansum(a,axis=None,dtype=None,out=None,keepdims=0)
numpy.lib.nanfunctions.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.nanargmax(a,axis=None)
numpy.nanargmin(a,axis=None)
numpy.nanmax(a,axis=None,out=None,keepdims=False)
numpy.nanmean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.nanmin(a,axis=None,out=None,keepdims=False)
numpy.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.nansum(a,axis=None,dtype=None,out=None,keepdims=0)
numpy.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/arrayterator.py----------------------------------------
A:numpy.lib.arrayterator.length->len(fixed)
A:numpy.lib.arrayterator.index->tuple(fixed)
A:numpy.lib.arrayterator.out->self.__class__(self.var, self.buf_size)
A:numpy.lib.arrayterator.out.stop[i]->min(stop, out.stop[i])
A:numpy.lib.arrayterator.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
A:numpy.lib.arrayterator.ndims->len(self.var.shape)
A:numpy.lib.arrayterator.stop[i]->min(self.stop[i], stop[i])
numpy.Arrayterator(self,var,buf_size=None)
numpy.Arrayterator.__array__(self)
numpy.Arrayterator.__getattr__(self,attr)
numpy.Arrayterator.__getitem__(self,index)
numpy.Arrayterator.__iter__(self)
numpy.Arrayterator.flat(self)
numpy.Arrayterator.shape(self)
numpy.lib.arrayterator.Arrayterator(self,var,buf_size=None)
numpy.lib.arrayterator.Arrayterator.__array__(self)
numpy.lib.arrayterator.Arrayterator.__getattr__(self,attr)
numpy.lib.arrayterator.Arrayterator.__getitem__(self,index)
numpy.lib.arrayterator.Arrayterator.__init__(self,var,buf_size=None)
numpy.lib.arrayterator.Arrayterator.__iter__(self)
numpy.lib.arrayterator.Arrayterator.flat(self)
numpy.lib.arrayterator.Arrayterator.shape(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_arraypad.py----------------------------------------
A:numpy.lib.tests.test_arraypad.a->pad(a, ((2, 3), (3, 2)), 'edge')
A:numpy.lib.tests.test_arraypad.b->numpy.array([[0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [3, 3, 3, 3, 4, 5, 5, 5], [6, 6, 6, 6, 7, 8, 8, 8], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11]])
A:numpy.lib.tests.test_arraypad.arr->numpy.reshape(arr, (6, 5))
A:numpy.lib.tests.test_arraypad.kwargs->dict(mode='mean', stat_length=(3,))
numpy.lib.tests.test_arraypad.TestConstant(TestCase)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant(self)
numpy.lib.tests.test_arraypad.TestEdge(TestCase)
numpy.lib.tests.test_arraypad.TestEdge.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestLinearRamp(TestCase)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestReflect(TestCase)
numpy.lib.tests.test_arraypad.TestReflect.test_check_01(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_02(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_03(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_shape(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestStatLen(TestCase)
numpy.lib.tests.test_arraypad.TestStatLen.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestStatistic(TestCase)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_shape_one(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_01(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_02(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_2(self)
numpy.lib.tests.test_arraypad.TestWrap(TestCase)
numpy.lib.tests.test_arraypad.TestWrap.test_check_01(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_02(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestZeroPadWidth(TestCase)
numpy.lib.tests.test_arraypad.TestZeroPadWidth.test_zero_pad_width(self)
numpy.lib.tests.test_arraypad.ValueError1(TestCase)
numpy.lib.tests.test_arraypad.ValueError1.test_check_negative_pad_width(self)
numpy.lib.tests.test_arraypad.ValueError1.test_check_negative_stat_length(self)
numpy.lib.tests.test_arraypad.ValueError1.test_check_simple(self)
numpy.lib.tests.test_arraypad.ValueError2(TestCase)
numpy.lib.tests.test_arraypad.ValueError2.test_check_simple(self)
numpy.lib.tests.test_arraypad.ValueError3(TestCase)
numpy.lib.tests.test_arraypad.ValueError3.test_check_simple(self)
numpy.tests.test_TestConstant(TestCase)
numpy.tests.test_TestConstant.test_check_constant(self)
numpy.tests.test_TestEdge(TestCase)
numpy.tests.test_TestEdge.test_check_simple(self)
numpy.tests.test_TestLinearRamp(TestCase)
numpy.tests.test_TestLinearRamp.test_check_simple(self)
numpy.tests.test_TestReflect(TestCase)
numpy.tests.test_TestReflect.test_check_01(self)
numpy.tests.test_TestReflect.test_check_02(self)
numpy.tests.test_TestReflect.test_check_03(self)
numpy.tests.test_TestReflect.test_check_large_pad(self)
numpy.tests.test_TestReflect.test_check_shape(self)
numpy.tests.test_TestReflect.test_check_simple(self)
numpy.tests.test_TestStatLen(TestCase)
numpy.tests.test_TestStatLen.test_check_simple(self)
numpy.tests.test_TestStatistic(TestCase)
numpy.tests.test_TestStatistic.test_check_maximum_1(self)
numpy.tests.test_TestStatistic.test_check_maximum_2(self)
numpy.tests.test_TestStatistic.test_check_mean_2(self)
numpy.tests.test_TestStatistic.test_check_mean_shape_one(self)
numpy.tests.test_TestStatistic.test_check_mean_stat_length(self)
numpy.tests.test_TestStatistic.test_check_median(self)
numpy.tests.test_TestStatistic.test_check_median_01(self)
numpy.tests.test_TestStatistic.test_check_median_02(self)
numpy.tests.test_TestStatistic.test_check_minimum_1(self)
numpy.tests.test_TestStatistic.test_check_minimum_2(self)
numpy.tests.test_TestWrap(TestCase)
numpy.tests.test_TestWrap.test_check_01(self)
numpy.tests.test_TestWrap.test_check_02(self)
numpy.tests.test_TestWrap.test_check_large_pad(self)
numpy.tests.test_TestWrap.test_check_simple(self)
numpy.tests.test_TestZeroPadWidth(TestCase)
numpy.tests.test_TestZeroPadWidth.test_zero_pad_width(self)
numpy.tests.test_ValueError1(TestCase)
numpy.tests.test_ValueError1.test_check_negative_pad_width(self)
numpy.tests.test_ValueError1.test_check_negative_stat_length(self)
numpy.tests.test_ValueError1.test_check_simple(self)
numpy.tests.test_ValueError2(TestCase)
numpy.tests.test_ValueError2.test_check_simple(self)
numpy.tests.test_ValueError3(TestCase)
numpy.tests.test_ValueError3.test_check_simple(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_io.py----------------------------------------
A:numpy.lib.tests.test_io.tmpdir->mkdtemp()
A:numpy.lib.tests.test_io.save_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('save_kwds', {})
A:numpy.lib.tests.test_io.load_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('load_kwds', {})
A:numpy.lib.tests.test_io.file_on_disk->dict(missing_values='N/A', names=True, case_sensitive=True).get('file_on_disk', False)
A:numpy.lib.tests.test_io.target_file->BytesIO()
A:numpy.lib.tests.test_io.arr_reloaded->numpy.load(load_file, **load_kwds)
A:numpy.lib.tests.test_io.a->numpy.random.random((5, 5))
A:numpy.lib.tests.test_io.tmp->os.path.join(tmpdir, 'file.npz')
A:numpy.lib.tests.test_io.npfile->numpy.load(tmp)
A:numpy.lib.tests.test_io.b->numpy.array([('M', 64.0, 75.0), ('F', 25.0, 60.0)], dtype=mydescriptor)
A:numpy.lib.tests.test_io.c->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6')
A:numpy.lib.tests.test_io.l->numpy.load(c)
A:numpy.lib.tests.test_io.(fd, tmp)->mkstemp(suffix='.npz')
A:numpy.lib.tests.test_io.arr->numpy.loadtxt(c, usecols=(0, 2), dtype=list(zip(names, dtypes)))
A:numpy.lib.tests.test_io.fp->open(tmp, 'wb')
A:numpy.lib.tests.test_io.data->TextIO('A,B\n0,1\n2,3')
A:numpy.lib.tests.test_io.lines->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6').readlines()
A:numpy.lib.tests.test_io.(f, name)->mkstemp(suffix='.gz')
A:numpy.lib.tests.test_io.w->CustomWriter()
A:numpy.lib.tests.test_io.expected_win25->expected.replace('e+00', 'e+000')
A:numpy.lib.tests.test_io.msg->build_err_msg([actual, expected], '', verbose=True)
A:numpy.lib.tests.test_io.x->numpy.zeros((3, 3))
A:numpy.lib.tests.test_io.d->TextIO()
A:numpy.lib.tests.test_io.y->numpy.zeros((3, 3))
A:numpy.lib.tests.test_io.dt->numpy.dtype([('name', 'S4'), ('x', float), ('y', float), ('block', int, (2, 3))])
A:numpy.lib.tests.test_io.test->numpy.recfromcsv(data, missing_values='N/A')
A:numpy.lib.tests.test_io.control->numpy.array([(0, 1), (2, 3)], dtype=[('a', np.int), ('b', np.int)])
A:numpy.lib.tests.test_io.res->numpy.genfromtxt(count())
A:numpy.lib.tests.test_io.txt->TextIO('M 21 72\nF 35 58')
A:numpy.lib.tests.test_io.(a, b, c)->numpy.loadtxt(txt, dtype=dt, unpack=True)
A:numpy.lib.tests.test_io.e->TextIO()
A:numpy.lib.tests.test_io.f->BytesIO()
A:numpy.lib.tests.test_io.kwargs->dict(missing_values='N/A', names=True, case_sensitive=True)
A:numpy.lib.tests.test_io.ctrl->numpy.array([[1, 2, 3], [1, -999, 5], [0, 6, -999]], dtype=int)
A:numpy.lib.tests.test_io.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.lib.tests.test_io.s->BytesIO()
A:numpy.lib.tests.test_io.ctrl_d->numpy.array([(1, 2, 3), (np.nan, 2, np.nan), (1, np.nan, 3)])
A:numpy.lib.tests.test_io.ctrl_m->numpy.array([(0, 0, 0), (1, 0, 1), (0, 1, 0)], dtype=bool)
A:numpy.lib.tests.test_io.basekwargs->dict(dtype=None, delimiter=',', names=True)
A:numpy.lib.tests.test_io.mdata->TextIO('\n'.join(data))
A:numpy.lib.tests.test_io._ret['mtest']->numpy.ndfromtxt(mdata, usecols=(0, 4), **kwargs)
A:numpy.lib.tests.test_io.mtest->numpy.ndfromtxt(TextIO(data), autostrip=True, **kwargs)
A:numpy.lib.tests.test_io.wanted->numpy.arange(6).reshape((2, 3))
A:numpy.lib.tests.test_io.g->gzip.GzipFile(fileobj=s, mode='w')
A:numpy.lib.tests.test_io.z->numpy.load(s)
A:numpy.lib.tests.test_io.n_before->len(gc.get_objects())
A:numpy.lib.tests.test_io.n_after->len(gc.get_objects())
numpy.lib.tests.test_io.RoundtripTest(object)
numpy.lib.tests.test_io.RoundtripTest.roundtrip(self,save_func,*args,**kwargs)
numpy.lib.tests.test_io.RoundtripTest.test_1D(self)
numpy.lib.tests.test_io.RoundtripTest.test_array(self)
numpy.lib.tests.test_io.RoundtripTest.test_mmap(self)
numpy.lib.tests.test_io.RoundtripTest.test_record(self)
numpy.lib.tests.test_io.TestFromTxt(TestCase)
numpy.lib.tests.test_io.TestFromTxt.test_1D(self)
numpy.lib.tests.test_io.TestFromTxt.test_array(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_autonames_and_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_autostrip(self)
numpy.lib.tests.test_io.TestFromTxt.test_commented_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments_is_none(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases2(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_default_field_format(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestFromTxt.test_easy_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype_alt(self)
numpy.lib.tests.test_io.TestFromTxt.test_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_fixed_width_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_filename(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator(self)
numpy.lib.tests.test_io.TestFromTxt.test_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_incomplete_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_inconsistent_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_integer_delimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing_with_tabs(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_auto_completion(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_overwrite(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636(self)
numpy.lib.tests.test_io.TestFromTxt.test_recfromcsv(self)
numpy.lib.tests.test_io.TestFromTxt.test_recfromtxt(self)
numpy.lib.tests.test_io.TestFromTxt.test_record(self)
numpy.lib.tests.test_io.TestFromTxt.test_replace_space(self)
numpy.lib.tests.test_io.TestFromTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_wo_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer_with_invalid(self)
numpy.lib.tests.test_io.TestFromTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestFromTxt.test_spacedelimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_tricky_converter_bug1666(self)
numpy.lib.tests.test_io.TestFromTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_as_css(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_integer(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_named_columns(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_missing_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_various(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing_float(self)
numpy.lib.tests.test_io.TestLoadTxt(TestCase)
numpy.lib.tests.test_io.TestLoadTxt.test_1D(self)
numpy.lib.tests.test_io.TestLoadTxt.test_3d_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_array(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments(self)
numpy.lib.tests.test_io.TestLoadTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestLoadTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_field_after_tab(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestLoadTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_generator_source(self)
numpy.lib.tests.test_io.TestLoadTxt.test_int64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_missing(self)
numpy.lib.tests.test_io.TestLoadTxt.test_ndmin_keyword(self)
numpy.lib.tests.test_io.TestLoadTxt.test_record(self)
numpy.lib.tests.test_io.TestLoadTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_structure_unpack(self)
numpy.lib.tests.test_io.TestLoadTxt.test_uint64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_universal_newline(self)
numpy.lib.tests.test_io.TestLoadTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestLoadTxt.test_usecols(self)
numpy.lib.tests.test_io.TestSaveLoad(RoundtripTest,TestCase)
numpy.lib.tests.test_io.TestSaveLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSaveTxt(TestCase)
numpy.lib.tests.test_io.TestSaveTxt.test_1D(self)
numpy.lib.tests.test_io.TestSaveTxt.test_array(self)
numpy.lib.tests.test_io.TestSaveTxt.test_complex_arrays(self)
numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_delimiter(self)
numpy.lib.tests.test_io.TestSaveTxt.test_file_roundtrip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_format(self)
numpy.lib.tests.test_io.TestSaveTxt.test_header_footer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_record(self)
numpy.lib.tests.test_io.TestSavezLoad(RoundtripTest,TestCase)
numpy.lib.tests.test_io.TestSavezLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSavezLoad.test_big_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load(self)
numpy.lib.tests.test_io.TestSavezLoad.test_multiple_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_named_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_not_closing_opened_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes(self)
numpy.lib.tests.test_io.Testfromregex(TestCase)
numpy.lib.tests.test_io.Testfromregex.test_record(self)
numpy.lib.tests.test_io.Testfromregex.test_record_2(self)
numpy.lib.tests.test_io.Testfromregex.test_record_3(self)
numpy.lib.tests.test_io.TextIO(self,s='')
numpy.lib.tests.test_io.TextIO.__init__(self,s='')
numpy.lib.tests.test_io.TextIO.write(self,s)
numpy.lib.tests.test_io.TextIO.writelines(self,lines)
numpy.lib.tests.test_io._assert_floatstr_lines_equal(actual_lines,expected_lines)
numpy.lib.tests.test_io.strptime(s,fmt=None)
numpy.lib.tests.test_io.tempdir(change_dir=False)
numpy.lib.tests.test_io.test_gzip_load()
numpy.lib.tests.test_io.test_gzip_loadtxt()
numpy.lib.tests.test_io.test_gzip_loadtxt_from_string()
numpy.lib.tests.test_io.test_load_refcount()
numpy.lib.tests.test_io.test_npzfile_dict()
numpy.tests.test_io.RoundtripTest(object)
numpy.tests.test_io.RoundtripTest.roundtrip(self,save_func,*args,**kwargs)
numpy.tests.test_io.RoundtripTest.test_1D(self)
numpy.tests.test_io.RoundtripTest.test_array(self)
numpy.tests.test_io.RoundtripTest.test_mmap(self)
numpy.tests.test_io.RoundtripTest.test_record(self)
numpy.tests.test_io.TestFromTxt(TestCase)
numpy.tests.test_io.TestFromTxt.test_1D(self)
numpy.tests.test_io.TestFromTxt.test_array(self)
numpy.tests.test_io.TestFromTxt.test_auto_dtype(self)
numpy.tests.test_io.TestFromTxt.test_auto_dtype_uniform(self)
numpy.tests.test_io.TestFromTxt.test_autonames_and_usecols(self)
numpy.tests.test_io.TestFromTxt.test_commented_header(self)
numpy.tests.test_io.TestFromTxt.test_comments(self)
numpy.tests.test_io.TestFromTxt.test_comments_is_none(self)
numpy.tests.test_io.TestFromTxt.test_converters_cornercases(self)
numpy.tests.test_io.TestFromTxt.test_converters_cornercases2(self)
numpy.tests.test_io.TestFromTxt.test_converters_with_usecols(self)
numpy.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names(self)
numpy.tests.test_io.TestFromTxt.test_default_field_format(self)
numpy.tests.test_io.TestFromTxt.test_dtype_with_converters(self)
numpy.tests.test_io.TestFromTxt.test_empty_file(self)
numpy.tests.test_io.TestFromTxt.test_fancy_dtype(self)
numpy.tests.test_io.TestFromTxt.test_fancy_dtype_alt(self)
numpy.tests.test_io.TestFromTxt.test_filling_values(self)
numpy.tests.test_io.TestFromTxt.test_fixed_width_names(self)
numpy.tests.test_io.TestFromTxt.test_gft_using_filename(self)
numpy.tests.test_io.TestFromTxt.test_gft_using_generator(self)
numpy.tests.test_io.TestFromTxt.test_header(self)
numpy.tests.test_io.TestFromTxt.test_incomplete_names(self)
numpy.tests.test_io.TestFromTxt.test_inconsistent_dtype(self)
numpy.tests.test_io.TestFromTxt.test_invalid_converter(self)
numpy.tests.test_io.TestFromTxt.test_invalid_raise(self)
numpy.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols(self)
numpy.tests.test_io.TestFromTxt.test_missing(self)
numpy.tests.test_io.TestFromTxt.test_missing_with_tabs(self)
numpy.tests.test_io.TestFromTxt.test_names_auto_completion(self)
numpy.tests.test_io.TestFromTxt.test_names_overwrite(self)
numpy.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636(self)
numpy.tests.test_io.TestFromTxt.test_recfromcsv(self)
numpy.tests.test_io.TestFromTxt.test_recfromtxt(self)
numpy.tests.test_io.TestFromTxt.test_record(self)
numpy.tests.test_io.TestFromTxt.test_replace_space(self)
numpy.tests.test_io.TestFromTxt.test_shaped_dtype(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_wo_names(self)
numpy.tests.test_io.TestFromTxt.test_skip_footer(self)
numpy.tests.test_io.TestFromTxt.test_skip_footer_with_invalid(self)
numpy.tests.test_io.TestFromTxt.test_skiprows(self)
numpy.tests.test_io.TestFromTxt.test_spacedelimiter(self)
numpy.tests.test_io.TestFromTxt.test_tricky_converter_bug1666(self)
numpy.tests.test_io.TestFromTxt.test_unused_converter(self)
numpy.tests.test_io.TestFromTxt.test_usecols(self)
numpy.tests.test_io.TestFromTxt.test_usecols_as_css(self)
numpy.tests.test_io.TestFromTxt.test_usecols_with_named_columns(self)
numpy.tests.test_io.TestFromTxt.test_user_filling_values(self)
numpy.tests.test_io.TestFromTxt.test_user_missing_values(self)
numpy.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype(self)
numpy.tests.test_io.TestFromTxt.test_with_masked_column_uniform(self)
numpy.tests.test_io.TestFromTxt.test_with_masked_column_various(self)
numpy.tests.test_io.TestFromTxt.test_withmissing(self)
numpy.tests.test_io.TestLoadTxt(TestCase)
numpy.tests.test_io.TestLoadTxt.test_1D(self)
numpy.tests.test_io.TestLoadTxt.test_3d_shaped_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_array(self)
numpy.tests.test_io.TestLoadTxt.test_comments(self)
numpy.tests.test_io.TestLoadTxt.test_converters_with_usecols(self)
numpy.tests.test_io.TestLoadTxt.test_empty_field_after_tab(self)
numpy.tests.test_io.TestLoadTxt.test_empty_file(self)
numpy.tests.test_io.TestLoadTxt.test_fancy_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_generator_source(self)
numpy.tests.test_io.TestLoadTxt.test_missing(self)
numpy.tests.test_io.TestLoadTxt.test_ndmin_keyword(self)
numpy.tests.test_io.TestLoadTxt.test_record(self)
numpy.tests.test_io.TestLoadTxt.test_shaped_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_skiprows(self)
numpy.tests.test_io.TestLoadTxt.test_universal_newline(self)
numpy.tests.test_io.TestLoadTxt.test_unused_converter(self)
numpy.tests.test_io.TestLoadTxt.test_usecols(self)
numpy.tests.test_io.TestSaveLoad(RoundtripTest,TestCase)
numpy.tests.test_io.TestSaveLoad.roundtrip(self,*args,**kwargs)
numpy.tests.test_io.TestSaveTxt(TestCase)
numpy.tests.test_io.TestSaveTxt.test_1D(self)
numpy.tests.test_io.TestSaveTxt.test_array(self)
numpy.tests.test_io.TestSaveTxt.test_custom_writer(self)
numpy.tests.test_io.TestSaveTxt.test_delimiter(self)
numpy.tests.test_io.TestSaveTxt.test_file_roundtrip(self)
numpy.tests.test_io.TestSaveTxt.test_format(self)
numpy.tests.test_io.TestSaveTxt.test_header_footer(self)
numpy.tests.test_io.TestSaveTxt.test_record(self)
numpy.tests.test_io.TestSavezLoad(RoundtripTest,TestCase)
numpy.tests.test_io.TestSavezLoad.roundtrip(self,*args,**kwargs)
numpy.tests.test_io.TestSavezLoad.test_big_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_closing_fid(self)
numpy.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load(self)
numpy.tests.test_io.TestSavezLoad.test_multiple_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_named_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_not_closing_opened_fid(self)
numpy.tests.test_io.TestSavezLoad.test_savez_filename_clashes(self)
numpy.tests.test_io.Testfromregex(TestCase)
numpy.tests.test_io.Testfromregex.test_record(self)
numpy.tests.test_io.Testfromregex.test_record_2(self)
numpy.tests.test_io.Testfromregex.test_record_3(self)
numpy.tests.test_io.TextIO(self,s='')
numpy.tests.test_io.TextIO.write(self,s)
numpy.tests.test_io.TextIO.writelines(self,lines)
numpy.tests.test_io.tempdir(change_dir=False)
numpy.tests.test_io.test_gzip_load()
numpy.tests.test_io.test_gzip_loadtxt()
numpy.tests.test_io.test_load_refcount()
numpy.tests.test_io.test_npzfile_dict()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_twodim_base.py----------------------------------------
A:numpy.lib.tests.test_twodim_base.data->numpy.add.outer(data, data)
A:numpy.lib.tests.test_twodim_base.vals->array(100 * get_mat(5) + 1, order='F', dtype='l')
A:numpy.lib.tests.test_twodim_base.b->numpy.tril(a)
A:numpy.lib.tests.test_twodim_base.c->numpy.triu(a)
A:numpy.lib.tests.test_twodim_base.a->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
A:numpy.lib.tests.test_twodim_base.x->array([1, 2, 3, 1, 2, 3, 1, 2, 3])
A:numpy.lib.tests.test_twodim_base.y->array([1, 1, 1, 2, 2, 2, 3, 3, 3])
A:numpy.lib.tests.test_twodim_base.xedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.yedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.answer->array([[0.0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 1]])
A:numpy.lib.tests.test_twodim_base.(H, xedges, yedges)->histogram2d(list(range(10)), list(range(10)))
A:numpy.lib.tests.test_twodim_base.(H, xed, yed)->histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))
A:numpy.lib.tests.test_twodim_base.(a, edge1, edge2)->histogram2d([], [], bins=4)
A:numpy.lib.tests.test_twodim_base.out->array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
A:numpy.lib.tests.test_twodim_base.iu->mask_indices(3, np.triu)
A:numpy.lib.tests.test_twodim_base.iu1->triu_indices(4)
A:numpy.lib.tests.test_twodim_base.il1->tril_indices(4)
A:numpy.lib.tests.test_twodim_base.il2->tril_indices(4, 2)
A:numpy.lib.tests.test_twodim_base.iu2->triu_indices(4, 2)
numpy.lib.tests.test_TestEye.test_bool(self)
numpy.lib.tests.test_TestEye.test_strings(self)
numpy.lib.tests.test_twodim_base.TestDiag(TestCase)
numpy.lib.tests.test_twodim_base.TestDiag.test_diag_bounds(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_failure(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_fortran_order(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_matrix(self,vals=None)
numpy.lib.tests.test_twodim_base.TestDiag.test_vector(self)
numpy.lib.tests.test_twodim_base.TestEye(TestCase)
numpy.lib.tests.test_twodim_base.TestEye.test_2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_basic(self)
numpy.lib.tests.test_twodim_base.TestEye.test_bool(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_eye_bounds(self)
numpy.lib.tests.test_twodim_base.TestEye.test_strings(self)
numpy.lib.tests.test_twodim_base.TestFliplr(TestCase)
numpy.lib.tests.test_twodim_base.TestFliplr.test_basic(self)
numpy.lib.tests.test_twodim_base.TestFlipud(TestCase)
numpy.lib.tests.test_twodim_base.TestFlipud.test_basic(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d(TestCase)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_all_outliers(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_asym(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_empty(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_norm(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_simple(self)
numpy.lib.tests.test_twodim_base.TestRot90(TestCase)
numpy.lib.tests.test_twodim_base.TestRot90.test_axes(self)
numpy.lib.tests.test_twodim_base.TestRot90.test_basic(self)
numpy.lib.tests.test_twodim_base.TestTri(TestCase)
numpy.lib.tests.test_twodim_base.TestTri.test_dtype(self)
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom(object)
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.TestTriuIndices(object)
numpy.lib.tests.test_twodim_base.TestTriuIndices.test_triu_indices(self)
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom(object)
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.get_mat(n)
numpy.lib.tests.test_twodim_base.test_mask_indices()
numpy.lib.tests.test_twodim_base.test_tril_indices()
numpy.lib.tests.test_twodim_base.test_tril_triu()
numpy.tests.test_TestDiag(TestCase)
numpy.tests.test_TestDiag.test_diag_bounds(self)
numpy.tests.test_TestDiag.test_failure(self)
numpy.tests.test_TestDiag.test_fortran_order(self)
numpy.tests.test_TestDiag.test_matrix(self,vals=None)
numpy.tests.test_TestDiag.test_vector(self)
numpy.tests.test_TestEye(TestCase)
numpy.tests.test_TestEye.test_2d(self)
numpy.tests.test_TestEye.test_basic(self)
numpy.tests.test_TestEye.test_diag(self)
numpy.tests.test_TestEye.test_diag2d(self)
numpy.tests.test_TestEye.test_eye_bounds(self)
numpy.tests.test_TestFliplr(TestCase)
numpy.tests.test_TestFliplr.test_basic(self)
numpy.tests.test_TestFlipud(TestCase)
numpy.tests.test_TestFlipud.test_basic(self)
numpy.tests.test_TestHistogram2d(TestCase)
numpy.tests.test_TestHistogram2d.test_all_outliers(self)
numpy.tests.test_TestHistogram2d.test_asym(self)
numpy.tests.test_TestHistogram2d.test_empty(self)
numpy.tests.test_TestHistogram2d.test_norm(self)
numpy.tests.test_TestHistogram2d.test_simple(self)
numpy.tests.test_TestRot90(TestCase)
numpy.tests.test_TestRot90.test_axes(self)
numpy.tests.test_TestRot90.test_basic(self)
numpy.tests.test_TestTri(TestCase)
numpy.tests.test_TestTri.test_dtype(self)
numpy.tests.test_TestTrilIndicesFrom(object)
numpy.tests.test_TestTrilIndicesFrom.test_exceptions(self)
numpy.tests.test_TestTriuIndices(object)
numpy.tests.test_TestTriuIndices.test_triu_indices(self)
numpy.tests.test_TestTriuIndicesFrom(object)
numpy.tests.test_TestTriuIndicesFrom.test_exceptions(self)
numpy.tests.test_get_mat(n)
numpy.tests.test_test_mask_indices()
numpy.tests.test_test_tril_indices()
numpy.tests.test_test_tril_triu()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_polynomial.py----------------------------------------
A:numpy.lib.tests.test_polynomial.p->numpy.poly1d([3, 2, 1])
A:numpy.lib.tests.test_polynomial.c->numpy.array([3.0, 2.0, 1.0])
A:numpy.lib.tests.test_polynomial.x->numpy.linspace(0, 2, 7)
A:numpy.lib.tests.test_polynomial.y->numpy.polyval(c, x)
A:numpy.lib.tests.test_polynomial.(m, cov)->numpy.polyfit(x, yy + np.array(err)[:, np.newaxis], 2, cov=True)
A:numpy.lib.tests.test_polynomial.(m2, cov2)->numpy.polyfit(x, y + err, 2, w=weights, cov=True)
A:numpy.lib.tests.test_polynomial.yy->numpy.concatenate((y, y), axis=1)
A:numpy.lib.tests.test_polynomial.cc->numpy.concatenate((c, c), axis=1)
A:numpy.lib.tests.test_polynomial.p2->numpy.poly1d([3, 2, 1]).integ(3, k=[9, 7, 6])
numpy.lib.tests.test_TestDocs.test_complex(self)
numpy.lib.tests.test_TestDocs.test_integ_coeffs(self)
numpy.lib.tests.test_TestDocs.test_objects(self)
numpy.lib.tests.test_TestDocs.test_str_leading_zeros(self)
numpy.lib.tests.test_polynomial.TestDocs(TestCase)
numpy.lib.tests.test_polynomial.TestDocs.test_complex(self)
numpy.lib.tests.test_polynomial.TestDocs.test_doctests(self)
numpy.lib.tests.test_polynomial.TestDocs.test_integ_coeffs(self)
numpy.lib.tests.test_polynomial.TestDocs.test_objects(self)
numpy.lib.tests.test_polynomial.TestDocs.test_polyfit(self)
numpy.lib.tests.test_polynomial.TestDocs.test_roots(self)
numpy.lib.tests.test_polynomial.TestDocs.test_str_leading_zeros(self)
numpy.lib.tests.test_polynomial.TestDocs.test_zero_dims(self)
numpy.tests.test_TestDocs(TestCase)
numpy.tests.test_TestDocs.test_doctests(self)
numpy.tests.test_TestDocs.test_polyfit(self)
numpy.tests.test_TestDocs.test_roots(self)
numpy.tests.test_TestDocs.test_zero_dims(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test__iotools.py----------------------------------------
A:numpy.lib.tests.test__iotools.strg->asbytes('  1     3  4  5  6# test')
A:numpy.lib.tests.test__iotools.test->convert(asbytes(''))
A:numpy.lib.tests.test__iotools.validator->NameValidator()
A:numpy.lib.tests.test__iotools.converter->StringConverter(np.uint64, default=0)
A:numpy.lib.tests.test__iotools.convert->StringConverter(dateparser, date(2000, 1, 1))
A:numpy.lib.tests.test__iotools.conv->StringConverter(_bytes_to_date)
A:numpy.lib.tests.test__iotools.val->asbytes('9223372043271415339')
A:numpy.lib.tests.test__iotools.ndtype->numpy.dtype(float)
A:numpy.lib.tests.test__iotools.dt->numpy.dtype([(('a', 'A'), 'f8'), (('b', 'B'), 'f8')])
A:numpy.lib.tests.test__iotools.dt_flat->flatten_dtype(dt)
numpy.lib.tests.test__iotools.TestLineSplitter(TestCase)
numpy.lib.tests.test__iotools.TestLineSplitter.test_constant_fixed_width(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_no_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_other_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_space_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_tab_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_variable_fixed_width(self)
numpy.lib.tests.test__iotools.TestMiscFunctions(TestCase)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_easy_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_flatten_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype(self)
numpy.lib.tests.test__iotools.TestNameValidator(TestCase)
numpy.lib.tests.test__iotools.TestNameValidator.test_case_sensitivity(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_excludelist(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_missing_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_nb_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_wo_names(self)
numpy.lib.tests.test__iotools.TestStringConverter(TestCase)
numpy.lib.tests.test__iotools.TestStringConverter.test_creation(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_int64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default_zero(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_missing_values(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_missing(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_string_to_object(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_uint64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrade(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrademapper(self)
numpy.lib.tests.test__iotools._bytes_to_date(s)
numpy.tests.test__iotools.TestLineSplitter(TestCase)
numpy.tests.test__iotools.TestLineSplitter.test_constant_fixed_width(self)
numpy.tests.test__iotools.TestLineSplitter.test_no_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_other_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_space_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_tab_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_variable_fixed_width(self)
numpy.tests.test__iotools.TestMiscFunctions(TestCase)
numpy.tests.test__iotools.TestMiscFunctions.test_easy_dtype(self)
numpy.tests.test__iotools.TestMiscFunctions.test_flatten_dtype(self)
numpy.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype(self)
numpy.tests.test__iotools.TestNameValidator(TestCase)
numpy.tests.test__iotools.TestNameValidator.test_case_sensitivity(self)
numpy.tests.test__iotools.TestNameValidator.test_excludelist(self)
numpy.tests.test__iotools.TestNameValidator.test_missing_names(self)
numpy.tests.test__iotools.TestNameValidator.test_validate_nb_names(self)
numpy.tests.test__iotools.TestNameValidator.test_validate_wo_names(self)
numpy.tests.test__iotools.TestStringConverter(TestCase)
numpy.tests.test__iotools.TestStringConverter.test_creation(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_default(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_default_zero(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_missing_values(self)
numpy.tests.test__iotools.TestStringConverter.test_missing(self)
numpy.tests.test__iotools.TestStringConverter.test_upgrade(self)
numpy.tests.test__iotools.TestStringConverter.test_upgrademapper(self)
numpy.tests.test__iotools._bytes_to_date(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_financial.py----------------------------------------
numpy.lib.tests.test_financial.TestFinancial(TestCase)
numpy.lib.tests.test_financial.TestFinancial.test_broadcast(self)
numpy.lib.tests.test_financial.TestFinancial.test_fv(self)
numpy.lib.tests.test_financial.TestFinancial.test_ipmt(self)
numpy.lib.tests.test_financial.TestFinancial.test_irr(self)
numpy.lib.tests.test_financial.TestFinancial.test_mirr(self)
numpy.lib.tests.test_financial.TestFinancial.test_nper(self)
numpy.lib.tests.test_financial.TestFinancial.test_nper2(self)
numpy.lib.tests.test_financial.TestFinancial.test_npv(self)
numpy.lib.tests.test_financial.TestFinancial.test_pmt(self)
numpy.lib.tests.test_financial.TestFinancial.test_ppmt(self)
numpy.lib.tests.test_financial.TestFinancial.test_pv(self)
numpy.lib.tests.test_financial.TestFinancial.test_rate(self)
numpy.lib.tests.test_financial.TestFinancial.test_when(self)
numpy.tests.test_TestFinancial(TestCase)
numpy.tests.test_TestFinancial.test_broadcast(self)
numpy.tests.test_TestFinancial.test_fv(self)
numpy.tests.test_TestFinancial.test_ipmt(self)
numpy.tests.test_TestFinancial.test_irr(self)
numpy.tests.test_TestFinancial.test_mirr(self)
numpy.tests.test_TestFinancial.test_nper(self)
numpy.tests.test_TestFinancial.test_nper2(self)
numpy.tests.test_TestFinancial.test_npv(self)
numpy.tests.test_TestFinancial.test_pmt(self)
numpy.tests.test_TestFinancial.test_ppmt(self)
numpy.tests.test_TestFinancial.test_pv(self)
numpy.tests.test_TestFinancial.test_rate(self)
numpy.tests.test_TestFinancial.test_when(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_nanfunctions.py----------------------------------------
A:numpy.lib.tests.test_nanfunctions._ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, 0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, 0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]])
A:numpy.lib.tests.test_nanfunctions.ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, 0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, 0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]]).copy()
A:numpy.lib.tests.test_nanfunctions.mat->numpy.matrix(np.eye(3))
A:numpy.lib.tests.test_nanfunctions.tgt->rf(mat, axis=1)
A:numpy.lib.tests.test_nanfunctions.res->f(mat)
A:numpy.lib.tests.test_nanfunctions.resout->numpy.zeros(3)
A:numpy.lib.tests.test_nanfunctions.msk->numpy.matrix(np.eye(3))._mask.copy()
A:numpy.lib.tests.test_nanfunctions.ind->f(row)
A:numpy.lib.tests.test_nanfunctions.out->numpy.empty(_ndat.shape[0], dtype=dtype)
numpy.lib.tests.test_TestNanFunctions_IntTypes.integer_arrays(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax(TestCase)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_matrices(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes(TestCase)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmax(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmin(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmax(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmean(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmin(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanstd(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nansum(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanvar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd(TestCase)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof_too_big(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_from_char(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_from_dtype(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_matrices(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax(TestCase)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_masked(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_matrices(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum(TestCase)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_dtype_from_char(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_dtype_from_dtype(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_matrices(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Sum.test_scalar(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax(TestCase)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_allnans(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_empty(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_matrices(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_mutation(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_result_values(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_scalar(self)
numpy.tests.test_TestNanFunctions_IntTypes(TestCase)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanargmax(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanargmin(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmax(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmean(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmin(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanstd(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nansum(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanvar(self)
numpy.tests.test_TestNanFunctions_MeanVarStd(TestCase)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_allnans(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_ddof(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_ddof_too_big(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_dtype_error(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_dtype_from_char(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_dtype_from_dtype(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_dtype_from_input(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_empty(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_keepdims(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_matrices(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_mutation(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_out(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_out_dtype_error(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_result_values(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_scalar(self)
numpy.tests.test_TestNanFunctions_MinMax(TestCase)
numpy.tests.test_TestNanFunctions_MinMax.test_allnans(self)
numpy.tests.test_TestNanFunctions_MinMax.test_dtype_from_input(self)
numpy.tests.test_TestNanFunctions_MinMax.test_keepdims(self)
numpy.tests.test_TestNanFunctions_MinMax.test_masked(self)
numpy.tests.test_TestNanFunctions_MinMax.test_matrices(self)
numpy.tests.test_TestNanFunctions_MinMax.test_mutation(self)
numpy.tests.test_TestNanFunctions_MinMax.test_out(self)
numpy.tests.test_TestNanFunctions_MinMax.test_result_values(self)
numpy.tests.test_TestNanFunctions_MinMax.test_scalar(self)
numpy.tests.test_TestNanFunctions_Sum(TestCase)
numpy.tests.test_TestNanFunctions_Sum.test_allnans(self)
numpy.tests.test_TestNanFunctions_Sum.test_dtype_from_char(self)
numpy.tests.test_TestNanFunctions_Sum.test_dtype_from_dtype(self)
numpy.tests.test_TestNanFunctions_Sum.test_dtype_from_input(self)
numpy.tests.test_TestNanFunctions_Sum.test_empty(self)
numpy.tests.test_TestNanFunctions_Sum.test_keepdims(self)
numpy.tests.test_TestNanFunctions_Sum.test_matrices(self)
numpy.tests.test_TestNanFunctions_Sum.test_mutation(self)
numpy.tests.test_TestNanFunctions_Sum.test_out(self)
numpy.tests.test_TestNanFunctions_Sum.test_result_values(self)
numpy.tests.test_TestNanFunctions_Sum.test_scalar(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_ufunclike.py----------------------------------------
A:numpy.lib.tests.test_ufunclike.a->numpy.core.array([1.1, -1.1])
A:numpy.lib.tests.test_ufunclike.out->numpy.core.zeros(a.shape, float)
A:numpy.lib.tests.test_ufunclike.tgt->numpy.core.array([[1.0, 1.0, 1.0, 1.0], [-1.0, -1.0, -1.0, -1.0]])
A:numpy.lib.tests.test_ufunclike.res->numpy.core.array(data, copy=True).view(cls)
A:numpy.lib.tests.test_ufunclike.m->MyArray(a, metadata='foo')
A:numpy.lib.tests.test_ufunclike.f->numpy.lib.ufunclike.fix(m)
numpy.lib.tests.test_ufunclike.TestUfunclike(TestCase)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isneginf(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isposinf(self)
numpy.tests.test_TestUfunclike(TestCase)
numpy.tests.test_TestUfunclike.test_fix(self)
numpy.tests.test_TestUfunclike.test_fix_with_subclass(self)
numpy.tests.test_TestUfunclike.test_isneginf(self)
numpy.tests.test_TestUfunclike.test_isposinf(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test__datasource.py----------------------------------------
A:numpy.lib.tests.test__datasource.tmpfile->valid_textfile(local_path)
A:numpy.lib.tests.test__datasource.magic_line->asbytes('three is the magic number')
A:numpy.lib.tests.test__datasource.(fd, path)->mkstemp(suffix='.txt', prefix='dstmp_', dir=filedir)
A:numpy.lib.tests.test__datasource.self.tmpdir->mkdtemp()
A:numpy.lib.tests.test__datasource.self.ds->numpy.lib._datasource.DataSource(self.tmpdir)
A:numpy.lib.tests.test__datasource.fh->self.ds.open(local_file)
A:numpy.lib.tests.test__datasource.url->invalid_httpurl()
A:numpy.lib.tests.test__datasource.local_file->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.invalid_file->invalid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.filepath->self.repos.abspath(valid_httpfile())
A:numpy.lib.tests.test__datasource.fp->numpy.lib._datasource.open(local_file)
A:numpy.lib.tests.test__datasource.result->numpy.lib._datasource.open(local_file).readline()
A:numpy.lib.tests.test__datasource.localdir->mkdtemp()
A:numpy.lib.tests.test__datasource.(scheme, netloc, upath, pms, qry, frg)->urlparse(localfile)
A:numpy.lib.tests.test__datasource.local_path->os.path.join(self.repos._destpath, netloc)
A:numpy.lib.tests.test__datasource.invalidhttp->os.path.join(self.tmpdir, netloc, upath.strip(os.sep).strip('/'))
A:numpy.lib.tests.test__datasource.invalidfile->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.self.repos->numpy.lib._datasource.Repository(valid_baseurl(), self.tmpdir)
A:numpy.lib.tests.test__datasource.localfile->valid_httpurl()
numpy.lib.tests.test__datasource.TestDataSourceAbspath(TestCase)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.setUp(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.tearDown(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestDataSourceExists(TestCase)
numpy.lib.tests.test__datasource.TestDataSourceExists.setUp(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.tearDown(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen(TestCase)
numpy.lib.tests.test__datasource.TestDataSourceOpen.setUp(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.tearDown(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestOpenFunc(TestCase)
numpy.lib.tests.test__datasource.TestOpenFunc.setUp(self)
numpy.lib.tests.test__datasource.TestOpenFunc.tearDown(self)
numpy.lib.tests.test__datasource.TestOpenFunc.test_DataSourceOpen(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath(TestCase)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.setUp(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.tearDown(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestRepositoryExists(TestCase)
numpy.lib.tests.test__datasource.TestRepositoryExists.setUp(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.tearDown(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.invalid_baseurl()
numpy.lib.tests.test__datasource.invalid_httpfile()
numpy.lib.tests.test__datasource.invalid_httpurl()
numpy.lib.tests.test__datasource.invalid_textfile(filedir)
numpy.lib.tests.test__datasource.setup()
numpy.lib.tests.test__datasource.teardown()
numpy.lib.tests.test__datasource.urlopen_stub(url,data=None)
numpy.lib.tests.test__datasource.valid_baseurl()
numpy.lib.tests.test__datasource.valid_httpfile()
numpy.lib.tests.test__datasource.valid_httpurl()
numpy.lib.tests.test__datasource.valid_textfile(filedir)
numpy.tests.test__datasource.TestDataSourceAbspath(TestCase)
numpy.tests.test__datasource.TestDataSourceAbspath.setUp(self)
numpy.tests.test__datasource.TestDataSourceAbspath.tearDown(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_sandboxing(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep(self)
numpy.tests.test__datasource.TestDataSourceExists(TestCase)
numpy.tests.test__datasource.TestDataSourceExists.setUp(self)
numpy.tests.test__datasource.TestDataSourceExists.tearDown(self)
numpy.tests.test__datasource.TestDataSourceExists.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceExists.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceExists.test_ValidHTTP(self)
numpy.tests.test__datasource.TestDataSourceOpen(TestCase)
numpy.tests.test__datasource.TestDataSourceOpen.setUp(self)
numpy.tests.test__datasource.TestDataSourceOpen.tearDown(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP(self)
numpy.tests.test__datasource.TestOpenFunc(TestCase)
numpy.tests.test__datasource.TestOpenFunc.setUp(self)
numpy.tests.test__datasource.TestOpenFunc.tearDown(self)
numpy.tests.test__datasource.TestOpenFunc.test_DataSourceOpen(self)
numpy.tests.test__datasource.TestRepositoryAbspath(TestCase)
numpy.tests.test__datasource.TestRepositoryAbspath.setUp(self)
numpy.tests.test__datasource.TestRepositoryAbspath.tearDown(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_sandboxing(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep(self)
numpy.tests.test__datasource.TestRepositoryExists(TestCase)
numpy.tests.test__datasource.TestRepositoryExists.setUp(self)
numpy.tests.test__datasource.TestRepositoryExists.tearDown(self)
numpy.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_InvalidFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_ValidFile(self)
numpy.tests.test__datasource.invalid_baseurl()
numpy.tests.test__datasource.invalid_httpfile()
numpy.tests.test__datasource.invalid_httpurl()
numpy.tests.test__datasource.invalid_textfile(filedir)
numpy.tests.test__datasource.setup()
numpy.tests.test__datasource.teardown()
numpy.tests.test__datasource.urlopen_stub(url,data=None)
numpy.tests.test__datasource.valid_baseurl()
numpy.tests.test__datasource.valid_httpfile()
numpy.tests.test__datasource.valid_httpurl()
numpy.tests.test__datasource.valid_textfile(filedir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_utils.py----------------------------------------
A:numpy.lib.tests.test_utils.out->out.getvalue().getvalue()
A:numpy.lib.tests.test_utils.new_func3->deprecate(old_func3, old_name='old_func3', new_name='new_func3')
A:numpy.lib.tests.test_utils.a->arange(12).reshape(3, 4)
A:numpy.lib.tests.test_utils.(low, high)->numpy.lib.utils.byte_bounds(a)
numpy.lib.tests.test_utils.old_func(self,x)
numpy.lib.tests.test_utils.old_func2(self,x)
numpy.lib.tests.test_utils.old_func3(self,x)
numpy.lib.tests.test_utils.test_byte_bounds()
numpy.lib.tests.test_utils.test_deprecate_decorator()
numpy.lib.tests.test_utils.test_deprecate_decorator_message()
numpy.lib.tests.test_utils.test_deprecate_fn()
numpy.lib.tests.test_utils.test_lookfor()
numpy.lib.tests.test_utils.test_safe_eval_nameconstant()
numpy.tests.test_old_func(self,x)
numpy.tests.test_old_func2(self,x)
numpy.tests.test_old_func3(self,x)
numpy.tests.test_test_byte_bounds()
numpy.tests.test_test_deprecate_decorator()
numpy.tests.test_test_deprecate_decorator_message()
numpy.tests.test_test_deprecate_fn()
numpy.tests.test_test_lookfor()
numpy.tests.test_test_safe_eval_nameconstant()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_index_tricks.py----------------------------------------
A:numpy.lib.tests.test_index_tricks.arr->numpy.array([[3, 6, 6], [4, 5, 1]])
A:numpy.lib.tests.test_index_tricks.coords->numpy.array([[1, 0, 1, 2, 3, 4], [1, 6, 1, 3, 2, 0], [1, 3, 1, 0, 9, 5]], dtype=dtype)
A:numpy.lib.tests.test_index_tricks.(y, st)->numpy.linspace(2, 10, retstep=1)
A:numpy.lib.tests.test_index_tricks.b->rand(5, 5)
A:numpy.lib.tests.test_index_tricks.c->rand(5, 5)
A:numpy.lib.tests.test_index_tricks.a->zeros((2, 2, 2), int)
A:numpy.lib.tests.test_index_tricks.i->array([0, 1, 2])
A:numpy.lib.tests.test_index_tricks.di->diag_indices(4)
A:numpy.lib.tests.test_index_tricks.d3->diag_indices(2, 3)
A:numpy.lib.tests.test_index_tricks.x->list(np.ndindex(*[0]))
A:numpy.lib.tests.test_index_tricks.(r, c)->diag_indices_from(x)
numpy.lib.tests.test_index_tricks.TestConcatenator(TestCase)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_1d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_2d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_more_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestGrid(TestCase)
numpy.lib.tests.test_index_tricks.TestGrid.test_basic(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_linspace_equivalence(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_nd(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression(TestCase)
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_regression_1(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_simple_1(self)
numpy.lib.tests.test_index_tricks.TestNdenumerate(TestCase)
numpy.lib.tests.test_index_tricks.TestNdenumerate.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex(TestCase)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_clipmodes(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_dtypes(self)
numpy.lib.tests.test_index_tricks.test_c_()
numpy.lib.tests.test_index_tricks.test_diag_indices()
numpy.lib.tests.test_index_tricks.test_diag_indices_from()
numpy.lib.tests.test_index_tricks.test_fill_diagonal()
numpy.lib.tests.test_index_tricks.test_ndindex()
numpy.tests.test_TestConcatenator(TestCase)
numpy.tests.test_TestConcatenator.test_1d(self)
numpy.tests.test_TestConcatenator.test_2d(self)
numpy.tests.test_TestConcatenator.test_mixed_type(self)
numpy.tests.test_TestConcatenator.test_more_mixed_type(self)
numpy.tests.test_TestGrid(TestCase)
numpy.tests.test_TestGrid.test_basic(self)
numpy.tests.test_TestGrid.test_linspace_equivalence(self)
numpy.tests.test_TestGrid.test_nd(self)
numpy.tests.test_TestIndexExpression(TestCase)
numpy.tests.test_TestIndexExpression.test_regression_1(self)
numpy.tests.test_TestIndexExpression.test_simple_1(self)
numpy.tests.test_TestNdenumerate(TestCase)
numpy.tests.test_TestNdenumerate.test_basic(self)
numpy.tests.test_TestRavelUnravelIndex(TestCase)
numpy.tests.test_TestRavelUnravelIndex.test_basic(self)
numpy.tests.test_TestRavelUnravelIndex.test_clipmodes(self)
numpy.tests.test_TestRavelUnravelIndex.test_dtypes(self)
numpy.tests.test_test_c_()
numpy.tests.test_test_diag_indices()
numpy.tests.test_test_diag_indices_from()
numpy.tests.test_test_fill_diagonal()
numpy.tests.test_test_ndindex()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_type_check.py----------------------------------------
A:numpy.lib.tests.test_type_check.ai32->array([[1, 2], [3, 4]], dtype=int32)
A:numpy.lib.tests.test_type_check.af32->array([[1, 2], [3, 4]], dtype=float32)
A:numpy.lib.tests.test_type_check.af64->array([[1, 2], [3, 4]], dtype=float64)
A:numpy.lib.tests.test_type_check.acs->array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=csingle)
A:numpy.lib.tests.test_type_check.acd->array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=cdouble)
A:numpy.lib.tests.test_type_check.y->rand(10)
A:numpy.lib.tests.test_type_check.z->array((-1.0, 0.0, 1.0))
A:numpy.lib.tests.test_type_check.res->isreal(z)
A:numpy.lib.tests.test_type_check.vals->nan_to_num(v)
A:numpy.lib.tests.test_type_check.a->asfarray(array([1, 2, 3]))
A:numpy.lib.tests.test_type_check.b->real_if_close(a + 1e-07j, tol=1e-06)
numpy.lib.tests.test_TestIscomplex(TestCase)
numpy.lib.tests.test_TestIscomplex.test_fail(self)
numpy.lib.tests.test_TestIscomplex.test_pass(self)
numpy.lib.tests.test_TestIscomplexobj(TestCase)
numpy.lib.tests.test_TestIscomplexobj.test_basic(self)
numpy.lib.tests.test_TestIsfinite.test_complex(self)
numpy.lib.tests.test_TestIsfinite.test_complex1(self)
numpy.lib.tests.test_TestIsfinite.test_integer(self)
numpy.lib.tests.test_TestIsnan.test_complex(self)
numpy.lib.tests.test_TestIsnan.test_complex1(self)
numpy.lib.tests.test_TestIsnan.test_integer(self)
numpy.lib.tests.test_TestMintypecode(TestCase)
numpy.lib.tests.test_TestMintypecode.test_default_1(self)
numpy.lib.tests.test_TestMintypecode.test_default_2(self)
numpy.lib.tests.test_TestMintypecode.test_default_3(self)
numpy.lib.tests.test_TestNanToNum.test_complex_bad(self)
numpy.lib.tests.test_TestNanToNum.test_complex_bad2(self)
numpy.lib.tests.test_TestNanToNum.test_complex_good(self)
numpy.lib.tests.test_TestNanToNum.test_integer(self)
numpy.lib.tests.test_type_check.TestArrayConversion(TestCase)
numpy.lib.tests.test_type_check.TestArrayConversion.test_asfarray(self)
numpy.lib.tests.test_type_check.TestCommonType(TestCase)
numpy.lib.tests.test_type_check.TestCommonType.test_basic(self)
numpy.lib.tests.test_type_check.TestImag(TestCase)
numpy.lib.tests.test_type_check.TestImag.test_cmplx(self)
numpy.lib.tests.test_type_check.TestImag.test_real(self)
numpy.lib.tests.test_type_check.TestIscomplex(TestCase)
numpy.lib.tests.test_type_check.TestIscomplex.test_fail(self)
numpy.lib.tests.test_type_check.TestIscomplex.test_pass(self)
numpy.lib.tests.test_type_check.TestIscomplexobj(TestCase)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIsfinite(TestCase)
numpy.lib.tests.test_type_check.TestIsfinite.test_complex(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_ind(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_integer(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf(TestCase)
numpy.lib.tests.test_type_check.TestIsinf.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsinf.test_ind(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf_scalar(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf_scalar(self)
numpy.lib.tests.test_type_check.TestIsnan(TestCase)
numpy.lib.tests.test_type_check.TestIsnan.test_complex(self)
numpy.lib.tests.test_type_check.TestIsnan.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsnan.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsnan.test_ind(self)
numpy.lib.tests.test_type_check.TestIsnan.test_integer(self)
numpy.lib.tests.test_type_check.TestIsnan.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsnan.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsneginf(TestCase)
numpy.lib.tests.test_type_check.TestIsneginf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsposinf(TestCase)
numpy.lib.tests.test_type_check.TestIsposinf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsreal(TestCase)
numpy.lib.tests.test_type_check.TestIsreal.test_fail(self)
numpy.lib.tests.test_type_check.TestIsreal.test_pass(self)
numpy.lib.tests.test_type_check.TestIsrealobj(TestCase)
numpy.lib.tests.test_type_check.TestIsrealobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIsscalar(TestCase)
numpy.lib.tests.test_type_check.TestIsscalar.test_basic(self)
numpy.lib.tests.test_type_check.TestMintypecode(TestCase)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_1(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_2(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_3(self)
numpy.lib.tests.test_type_check.TestNanToNum(TestCase)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad2(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_good(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_generic(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_integer(self)
numpy.lib.tests.test_type_check.TestReal(TestCase)
numpy.lib.tests.test_type_check.TestReal.test_cmplx(self)
numpy.lib.tests.test_type_check.TestReal.test_real(self)
numpy.lib.tests.test_type_check.TestRealIfClose(TestCase)
numpy.lib.tests.test_type_check.TestRealIfClose.test_basic(self)
numpy.lib.tests.test_type_check.assert_all(x)
numpy.tests.test_TestArrayConversion(TestCase)
numpy.tests.test_TestArrayConversion.test_asfarray(self)
numpy.tests.test_TestCommonType(TestCase)
numpy.tests.test_TestCommonType.test_basic(self)
numpy.tests.test_TestImag(TestCase)
numpy.tests.test_TestImag.test_cmplx(self)
numpy.tests.test_TestImag.test_real(self)
numpy.tests.test_TestIsfinite(TestCase)
numpy.tests.test_TestIsfinite.test_goodvalues(self)
numpy.tests.test_TestIsfinite.test_ind(self)
numpy.tests.test_TestIsfinite.test_neginf(self)
numpy.tests.test_TestIsfinite.test_posinf(self)
numpy.tests.test_TestIsinf(TestCase)
numpy.tests.test_TestIsinf.test_goodvalues(self)
numpy.tests.test_TestIsinf.test_ind(self)
numpy.tests.test_TestIsinf.test_neginf(self)
numpy.tests.test_TestIsinf.test_neginf_scalar(self)
numpy.tests.test_TestIsinf.test_posinf(self)
numpy.tests.test_TestIsinf.test_posinf_scalar(self)
numpy.tests.test_TestIsnan(TestCase)
numpy.tests.test_TestIsnan.test_goodvalues(self)
numpy.tests.test_TestIsnan.test_ind(self)
numpy.tests.test_TestIsnan.test_neginf(self)
numpy.tests.test_TestIsnan.test_posinf(self)
numpy.tests.test_TestIsneginf(TestCase)
numpy.tests.test_TestIsneginf.test_generic(self)
numpy.tests.test_TestIsposinf(TestCase)
numpy.tests.test_TestIsposinf.test_generic(self)
numpy.tests.test_TestIsreal(TestCase)
numpy.tests.test_TestIsreal.test_fail(self)
numpy.tests.test_TestIsreal.test_pass(self)
numpy.tests.test_TestIsrealobj(TestCase)
numpy.tests.test_TestIsrealobj.test_basic(self)
numpy.tests.test_TestIsscalar(TestCase)
numpy.tests.test_TestIsscalar.test_basic(self)
numpy.tests.test_TestNanToNum(TestCase)
numpy.tests.test_TestNanToNum.test_generic(self)
numpy.tests.test_TestReal(TestCase)
numpy.tests.test_TestReal.test_cmplx(self)
numpy.tests.test_TestReal.test_real(self)
numpy.tests.test_TestRealIfClose(TestCase)
numpy.tests.test_TestRealIfClose.test_basic(self)
numpy.tests.test_assert_all(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_format.py----------------------------------------
A:numpy.lib.tests.test_format.tempdir->tempfile.mkdtemp()
A:numpy.lib.tests.test_format.dtype->numpy.dtype(scalar).newbyteorder(endian)
A:numpy.lib.tests.test_format.basic->numpy.arange(15).astype(dtype)
A:numpy.lib.tests.test_format.size->random.randint(1, size)
A:numpy.lib.tests.test_format.f->open(tf.name, 'rb')
A:numpy.lib.tests.test_format.f2->BytesIO(f.getvalue()[0:-1])
A:numpy.lib.tests.test_format.arr2->roundtrip_randsize(arr)
A:numpy.lib.tests.test_format.long_str_arr->numpy.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE + 1)))
A:numpy.lib.tests.test_format.long_str_arr2->roundtrip(long_str_arr)
A:numpy.lib.tests.test_format.nfn->os.path.join(tempdir, 'normal.npy')
A:numpy.lib.tests.test_format.mfn->os.path.join(tempdir, 'memmap.npy')
A:numpy.lib.tests.test_format.fp->open(mfn, 'rb')
A:numpy.lib.tests.test_format.ma->numpy.lib.format.open_memmap(nfn, mode='r')
A:numpy.lib.tests.test_format.normal_bytes->open(mfn, 'rb').read()
A:numpy.lib.tests.test_format.memmap_bytes->open(mfn, 'rb').read()
A:numpy.lib.tests.test_format.arr->numpy.arange(1)
A:numpy.lib.tests.test_format.npz_file->os.path.join(tempdir, 'compressed.npz')
A:numpy.lib.tests.test_format.bad_version_magic->asbytes_nested(['\x93NUMPY\x01\x01', '\x93NUMPY\x00\x00', '\x93NUMPY\x00\x01', '\x93NUMPY\x02\x00', '\x93NUMPY\x02\x02', '\x93NUMPYÿÿ'])
A:numpy.lib.tests.test_format.malformed_magic->asbytes_nested(['\x92NUMPY\x01\x00', '\x00NUMPY\x01\x00', '\x93numpy\x01\x00', '\x93MATLB\x01\x00', '\x93NUMPY\x01', '\x93NUMPY', ''])
A:numpy.lib.tests.test_format.s->BytesIO()
A:numpy.lib.tests.test_format.d->numpy.arange(5)
A:numpy.lib.tests.test_format.r->numpy.load(f)
numpy.lib.tests.test_format.BytesIOSRandomSize(BytesIO)
numpy.lib.tests.test_format.BytesIOSRandomSize.read(self,size=None)
numpy.lib.tests.test_format.assert_equal(o1,o2)
numpy.lib.tests.test_format.roundtrip(arr)
numpy.lib.tests.test_format.roundtrip_randsize(arr)
numpy.lib.tests.test_format.roundtrip_truncated(arr)
numpy.lib.tests.test_format.setup_module()
numpy.lib.tests.test_format.teardown_module()
numpy.lib.tests.test_format.test_bad_header()
numpy.lib.tests.test_format.test_bad_magic_args()
numpy.lib.tests.test_format.test_compressed_roundtrip()
numpy.lib.tests.test_format.test_large_file_support()
numpy.lib.tests.test_format.test_large_header()
numpy.lib.tests.test_format.test_long_str()
numpy.lib.tests.test_format.test_memmap_roundtrip()
numpy.lib.tests.test_format.test_read_magic_bad_magic()
numpy.lib.tests.test_format.test_read_version_1_0_bad_magic()
numpy.lib.tests.test_format.test_roundtrip()
numpy.lib.tests.test_format.test_roundtrip_randsize()
numpy.lib.tests.test_format.test_roundtrip_truncated()
numpy.lib.tests.test_format.test_write_version_1_0()
numpy.tests.test_format.BytesIOSRandomSize(BytesIO)
numpy.tests.test_format.BytesIOSRandomSize.read(self,size=None)
numpy.tests.test_format.assert_equal(o1,o2)
numpy.tests.test_format.roundtrip(arr)
numpy.tests.test_format.roundtrip_randsize(arr)
numpy.tests.test_format.roundtrip_truncated(arr)
numpy.tests.test_format.setup_module()
numpy.tests.test_format.teardown_module()
numpy.tests.test_format.test_bad_header()
numpy.tests.test_format.test_bad_magic_args()
numpy.tests.test_format.test_compressed_roundtrip()
numpy.tests.test_format.test_large_file_support()
numpy.tests.test_format.test_large_header()
numpy.tests.test_format.test_memmap_roundtrip()
numpy.tests.test_format.test_read_magic_bad_magic()
numpy.tests.test_format.test_read_version_1_0_bad_magic()
numpy.tests.test_format.test_roundtrip()
numpy.tests.test_format.test_roundtrip_randsize()
numpy.tests.test_format.test_roundtrip_truncated()
numpy.tests.test_format.test_write_version_1_0()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_regression.py----------------------------------------
A:numpy.lib.tests.test_regression.x->numpy.loadtxt(StringIO('0 1 2 3 4 5 6 7 8 9 10 11'), dtype=dt)
A:numpy.lib.tests.test_regression.y->numpy.poly1d([3, 4])
A:numpy.lib.tests.test_regression.vt->numpy.vectorize(lambda *args: args)
A:numpy.lib.tests.test_regression.v->numpy.poly1d([1, 2, 3, 4, 5])
A:numpy.lib.tests.test_regression.p->numpy.poly1d([np.nan, np.nan, 1], r=0)
A:numpy.lib.tests.test_regression.u->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_regression.(q, r)->numpy.polydiv(x, x)
A:numpy.lib.tests.test_regression.tested->numpy.polyfit(x, y, 4)
A:numpy.lib.tests.test_regression.thesize->int((2 ** nbits) ** (1.0 / 5.0) + 1)
A:numpy.lib.tests.test_regression.a->numpy.zeros(2, dtype=np.bool)
A:numpy.lib.tests.test_regression.i->numpy.random.randint(0, n, size=thesize)
A:numpy.lib.tests.test_regression.dt->numpy.dtype([('a', 'f4'), ('b', 'i4')])
A:numpy.lib.tests.test_regression.sys.stdout->open(os.devnull, 'w')
A:numpy.lib.tests.test_regression.tmp->numpy.who({'foo': np.array(1)})
A:numpy.lib.tests.test_regression.base->numpy.array([1, 2, 3], dtype=np.int32)
A:numpy.lib.tests.test_regression.data->numpy.eye(3).astype(np.int32)
A:numpy.lib.tests.test_regression.out->open(os.devnull, 'w')
numpy.lib.tests.test_regression.TestRegression(TestCase)
numpy.lib.tests.test_regression.TestRegression.test_append_fields_dtype_list(self)
numpy.lib.tests.test_regression.TestRegression.test_asfarray_none(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_cov_parameters(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_histogramdd_too_many_bins(self)
numpy.lib.tests.test_regression.TestRegression.test_include_dirs(self)
numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_digitize(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_mem_insert(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_mem_polymul(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_mem_string_concat(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_mem_vectorise(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_mgrid_single_element(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_nansum_with_boolean(self)
numpy.lib.tests.test_regression.TestRegression.test_ndenumerate_crash(self)
numpy.lib.tests.test_regression.TestRegression.test_poly1d(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_poly1d_nan_roots(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_poly_div(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_poly_eq(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_polyder_return_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polydiv_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polyfit_build(self)
numpy.lib.tests.test_regression.TestRegression.test_polyint_type(self)
numpy.lib.tests.test_regression.TestRegression.test_py3_compat(self)
numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_unique_zero_sized(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_void_coercion(self,level=rlevel)
numpy.lib.tests.test_regression.TestRegression.test_who_with_0dim_array(self,level=rlevel)
numpy.tests.test_regression.TestRegression(TestCase)
numpy.tests.test_regression.TestRegression.test_append_fields_dtype_list(self)
numpy.tests.test_regression.TestRegression.test_asfarray_none(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_cov_parameters(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_histogramdd_too_many_bins(self)
numpy.tests.test_regression.TestRegression.test_include_dirs(self)
numpy.tests.test_regression.TestRegression.test_large_fancy_indexing(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays(self)
numpy.tests.test_regression.TestRegression.test_mem_digitize(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_insert(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_polymul(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_vectorise(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mgrid_single_element(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_ndenumerate_crash(self)
numpy.tests.test_regression.TestRegression.test_poly1d(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_poly1d_nan_roots(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_poly_div(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_poly_eq(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_polyder_return_type(self)
numpy.tests.test_regression.TestRegression.test_polydiv_type(self)
numpy.tests.test_regression.TestRegression.test_polyfit_build(self)
numpy.tests.test_regression.TestRegression.test_py3_compat(self)
numpy.tests.test_regression.TestRegression.test_refcount_vectorize(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_unique_zero_sized(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_void_coercion(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_who_with_0dim_array(self,level=rlevel)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_arrayterator.py----------------------------------------
A:numpy.lib.tests.test_arrayterator.shape->tuple((randint(10) + 1 for dim in range(ndims)))
A:numpy.lib.tests.test_arrayterator.els->reduce(mul, shape)
A:numpy.lib.tests.test_arrayterator.a->numpy.arange(els)
A:numpy.lib.tests.test_arrayterator.buf_size->randint(2 * els)
A:numpy.lib.tests.test_arrayterator.b->Arrayterator(a, buf_size)
A:numpy.lib.tests.test_arrayterator.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
numpy.lib.tests.test_arrayterator.test()
numpy.tests.test_test()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_shape_base.py----------------------------------------
A:numpy.lib.tests.test_shape_base.a->ones(r, b.dtype)
A:numpy.lib.tests.test_shape_base.aoa_a->apply_over_axes(sum, a, [0, 2])
A:numpy.lib.tests.test_shape_base.res->squeeze(a)
A:numpy.lib.tests.test_shape_base.b->numpy.random.randint(0, 10, size=s)
A:numpy.lib.tests.test_shape_base.desired->array([[[1, 1], [2, 2]]])
A:numpy.lib.tests.test_shape_base.c->rand(1, 1, 20, 10)
A:numpy.lib.tests.test_shape_base.m->asmatrix(a)
A:numpy.lib.tests.test_shape_base.ma->myarray(a.shape, a.dtype, a.data)
A:numpy.lib.tests.test_shape_base.large->tile(b, r)
A:numpy.lib.tests.test_shape_base.klarge->kron(a, b)
A:numpy.lib.tests.test_shape_base.d->ones((50, 60))
A:numpy.lib.tests.test_shape_base.d2->ones((30, 60, 6))
numpy.lib.tests.test_TestArraySplit.test_integer_0_split(self)
numpy.lib.tests.test_TestArraySplit.test_integer_split(self)
numpy.lib.tests.test_TestArraySplit.test_integer_split_2D_cols(self)
numpy.lib.tests.test_TestArraySplit.test_integer_split_2D_default(self)
numpy.lib.tests.test_TestArraySplit.test_integer_split_2D_rows(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis(TestCase)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_3d(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple101(self,level=11)
numpy.lib.tests.test_shape_base.TestApplyOverAxes(TestCase)
numpy.lib.tests.test_shape_base.TestApplyOverAxes.test_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit(TestCase)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_high_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_low_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_0_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_cols(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_default(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows(self)
numpy.lib.tests.test_shape_base.TestDsplit(TestCase)
numpy.lib.tests.test_shape_base.TestDsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_3D_array(self)
numpy.lib.tests.test_shape_base.TestDstack(TestCase)
numpy.lib.tests.test_shape_base.TestDstack.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array2(self)
numpy.lib.tests.test_shape_base.TestHsplit(TestCase)
numpy.lib.tests.test_shape_base.TestHsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestKron(TestCase)
numpy.lib.tests.test_shape_base.TestKron.test_return_type(self)
numpy.lib.tests.test_shape_base.TestMayShareMemory(TestCase)
numpy.lib.tests.test_shape_base.TestMayShareMemory.test_basic(self)
numpy.lib.tests.test_shape_base.TestSplit(TestCase)
numpy.lib.tests.test_shape_base.TestSplit.test_equal_split(self)
numpy.lib.tests.test_shape_base.TestSplit.test_unequal_split(self)
numpy.lib.tests.test_shape_base.TestSqueeze(TestCase)
numpy.lib.tests.test_shape_base.TestSqueeze.test_basic(self)
numpy.lib.tests.test_shape_base.TestTile(TestCase)
numpy.lib.tests.test_shape_base.TestTile.test_basic(self)
numpy.lib.tests.test_shape_base.TestTile.test_empty(self)
numpy.lib.tests.test_shape_base.TestTile.test_kroncompare(self)
numpy.lib.tests.test_shape_base.TestVsplit(TestCase)
numpy.lib.tests.test_shape_base.TestVsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.compare_results(res,desired)
numpy.tests.test_TestApplyAlongAxis(TestCase)
numpy.tests.test_TestApplyAlongAxis.test_3d(self)
numpy.tests.test_TestApplyAlongAxis.test_simple(self)
numpy.tests.test_TestApplyAlongAxis.test_simple101(self,level=11)
numpy.tests.test_TestApplyOverAxes(TestCase)
numpy.tests.test_TestApplyOverAxes.test_simple(self)
numpy.tests.test_TestArraySplit(TestCase)
numpy.tests.test_TestArraySplit.test_index_split_high_bound(self)
numpy.tests.test_TestArraySplit.test_index_split_low_bound(self)
numpy.tests.test_TestArraySplit.test_index_split_simple(self)
numpy.tests.test_TestDsplit(TestCase)
numpy.tests.test_TestDsplit.test_2D_array(self)
numpy.tests.test_TestDsplit.test_3D_array(self)
numpy.tests.test_TestDstack(TestCase)
numpy.tests.test_TestDstack.test_0D_array(self)
numpy.tests.test_TestDstack.test_1D_array(self)
numpy.tests.test_TestDstack.test_2D_array(self)
numpy.tests.test_TestDstack.test_2D_array2(self)
numpy.tests.test_TestHsplit(TestCase)
numpy.tests.test_TestHsplit.test_0D_array(self)
numpy.tests.test_TestHsplit.test_1D_array(self)
numpy.tests.test_TestHsplit.test_2D_array(self)
numpy.tests.test_TestKron(TestCase)
numpy.tests.test_TestKron.test_return_type(self)
numpy.tests.test_TestMayShareMemory(TestCase)
numpy.tests.test_TestMayShareMemory.test_basic(self)
numpy.tests.test_TestSplit(TestCase)
numpy.tests.test_TestSplit.test_equal_split(self)
numpy.tests.test_TestSplit.test_unequal_split(self)
numpy.tests.test_TestSqueeze(TestCase)
numpy.tests.test_TestSqueeze.test_basic(self)
numpy.tests.test_TestTile(TestCase)
numpy.tests.test_TestTile.test_basic(self)
numpy.tests.test_TestTile.test_empty(self)
numpy.tests.test_TestTile.test_kroncompare(self)
numpy.tests.test_TestVsplit(TestCase)
numpy.tests.test_TestVsplit.test_1D_array(self)
numpy.tests.test_TestVsplit.test_2D_array(self)
numpy.tests.test_compare_results(res,desired)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_arraysetops.py----------------------------------------
A:numpy.lib.tests.test_arraysetops.v->unique(a)
A:numpy.lib.tests.test_arraysetops.(v, j)->unique(a, 0, 1)
A:numpy.lib.tests.test_arraysetops.(v, j1, j2)->unique(a, 1, 1)
A:numpy.lib.tests.test_arraysetops.aa->numpy.array(list(zip(a, a)), dt)
A:numpy.lib.tests.test_arraysetops.bb->numpy.array(list(zip(b, b)), dt)
A:numpy.lib.tests.test_arraysetops.a->numpy.array([5, 7, 1, 2, 8])
A:numpy.lib.tests.test_arraysetops.b->numpy.array([9, 8, 2, 4, 3, 1, 5])
A:numpy.lib.tests.test_arraysetops.ec->numpy.array([19, 20])
A:numpy.lib.tests.test_arraysetops.c->setdiff1d(a, b)
A:numpy.lib.tests.test_arraysetops.ed->numpy.array([1, 2, 5])
A:numpy.lib.tests.test_arraysetops.zero_elem->numpy.array([])
A:numpy.lib.tests.test_arraysetops.one_elem->numpy.array([1])
A:numpy.lib.tests.test_arraysetops.two_elem->numpy.array([1, 2])
A:numpy.lib.tests.test_arraysetops.long_b->numpy.arange(3, 63).reshape(30, 2)
A:numpy.lib.tests.test_arraysetops.c1->setxor1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux1->intersect1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux2->union1d(a, b)
A:numpy.lib.tests.test_arraysetops.c2->setdiff1d(aux2, aux1)
numpy.lib.tests.test_TestSetOps.test_intersect1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps(TestCase)
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_invert(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_ravel(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_manyways(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setxor1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_union1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_unique(self)
numpy.tests.test_TestSetOps(TestCase)
numpy.tests.test_TestSetOps.test_ediff1d(self)
numpy.tests.test_TestSetOps.test_in1d(self)
numpy.tests.test_TestSetOps.test_in1d_char_array(self)
numpy.tests.test_TestSetOps.test_in1d_invert(self)
numpy.tests.test_TestSetOps.test_in1d_ravel(self)
numpy.tests.test_TestSetOps.test_manyways(self)
numpy.tests.test_TestSetOps.test_setdiff1d(self)
numpy.tests.test_TestSetOps.test_setdiff1d_char_array(self)
numpy.tests.test_TestSetOps.test_setxor1d(self)
numpy.tests.test_TestSetOps.test_union1d(self)
numpy.tests.test_TestSetOps.test_unique(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_recfunctions.py----------------------------------------
A:numpy.lib.tests.test_recfunctions.x->numpy.array([1, 2])
A:numpy.lib.tests.test_recfunctions.y->numpy.array([10, 20, 30])
A:numpy.lib.tests.test_recfunctions.z->numpy.array([('A', 1.0), ('B', 2.0)], dtype=[('A', '|S3'), ('B', float)])
A:numpy.lib.tests.test_recfunctions.w->numpy.array([(1, (2, 3.0)), (4, (5, 6.0))], dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
A:numpy.lib.tests.test_recfunctions.test->join_by(['a', 'k'], a, b, r1postfix='1', r2postfix='2', jointype='inner')
A:numpy.lib.tests.test_recfunctions.a->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(50, 60), np.arange(10, 20))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.control->numpy.array([(10, 0, 50, 65, 10, 0), (11, 0, 51, 66, 11, 1), (10, 1, 52, 67, 12, 2), (11, 1, 53, 68, 13, 3), (10, 2, 54, 69, 14, 4), (11, 2, 55, 70, 15, 5), (10, 3, 56, 71, 16, 6), (11, 3, 57, 72, 17, 7), (10, 4, 58, 73, 18, 8), (11, 4, 59, 74, 19, 9)], dtype=[('k', int), ('a', int), ('b1', int), ('b2', int), ('c1', int), ('c2', int)])
A:numpy.lib.tests.test_recfunctions.ndtype->numpy.dtype([('A', int), ('B', [('BA', int), ('BB', [('BBA', int), ('BBB', int)])])])
A:numpy.lib.tests.test_recfunctions.b->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(65, 75), np.arange(0, 10))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.mx->numpy.ma.array([1, 2, 3], mask=[1, 0, 0])
A:numpy.lib.tests.test_recfunctions.zz->numpy.array([('a', 10.0, 100.0), ('b', 20.0, 200.0), ('c', 30.0, 300.0)], dtype=[('A', '|S3'), ('B', float), ('C', float)])
A:numpy.lib.tests.test_recfunctions.self.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.self.b->numpy.array(list(zip(np.arange(5, 15), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
A:numpy.lib.tests.test_recfunctions.cls.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.cls.b->numpy.array(list(zip(np.arange(10), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
numpy.lib.tests.test_recfunctions.TestAppendFields(TestCase)
numpy.lib.tests.test_recfunctions.TestAppendFields.setUp(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_double(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_flex(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_nested(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_single(self)
numpy.lib.tests.test_recfunctions.TestJoinBy(TestCase)
numpy.lib.tests.test_recfunctions.TestJoinBy.setUp(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_inner_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_leftouter_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_outer_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2(TestCase)
numpy.lib.tests.test_recfunctions.TestJoinBy2.setUp(cls)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays(TestCase)
numpy.lib.tests.test_recfunctions.TestMergeArrays.setUp(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_singlerecord(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_standard(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_singlefield(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions(TestCase)
numpy.lib.tests.test_recfunctions.TestRecFunctions.setUp(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_drop_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names_flat(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_rename_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_zip_descr(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields(TestCase)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible(self)
numpy.lib.tests.test_recfunctions.TestStackArrays(TestCase)
numpy.lib.tests.test_recfunctions.TestStackArrays.setUp(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_autoconversion(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_checktitles(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_defaults(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_matching_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_fields(self)
numpy.tests.test_recfunctions.TestAppendFields(TestCase)
numpy.tests.test_recfunctions.TestAppendFields.setUp(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_double(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_on_flex(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_on_nested(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_single(self)
numpy.tests.test_recfunctions.TestJoinBy(TestCase)
numpy.tests.test_recfunctions.TestJoinBy.setUp(self)
numpy.tests.test_recfunctions.TestJoinBy.test_inner_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_leftouter_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_outer_join(self)
numpy.tests.test_recfunctions.TestJoinBy2(TestCase)
numpy.tests.test_recfunctions.TestJoinBy2.setUp(cls)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars(self)
numpy.tests.test_recfunctions.TestMergeArrays(TestCase)
numpy.tests.test_recfunctions.TestMergeArrays.setUp(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_flatten(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_singlerecord(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_solo(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_standard(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_w_singlefield(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays(self)
numpy.tests.test_recfunctions.TestRecFunctions(TestCase)
numpy.tests.test_recfunctions.TestRecFunctions.setUp(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_drop_fields(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_find_duplicates(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_get_names(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_get_names_flat(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_rename_fields(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_zip_descr(self)
numpy.tests.test_recfunctions.TestRecursiveFillFields(TestCase)
numpy.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible(self)
numpy.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible(self)
numpy.tests.test_recfunctions.TestStackArrays(TestCase)
numpy.tests.test_recfunctions.TestStackArrays.setUp(self)
numpy.tests.test_recfunctions.TestStackArrays.test_autoconversion(self)
numpy.tests.test_recfunctions.TestStackArrays.test_checktitles(self)
numpy.tests.test_recfunctions.TestStackArrays.test_defaults(self)
numpy.tests.test_recfunctions.TestStackArrays.test_matching_named_fields(self)
numpy.tests.test_recfunctions.TestStackArrays.test_solo(self)
numpy.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields(self)
numpy.tests.test_recfunctions.TestStackArrays.test_unnamed_fields(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_function_base.py----------------------------------------
A:numpy.lib.tests.test_function_base.a->MySubClass([1, 2, 3])
A:numpy.lib.tests.test_function_base.a_copy->numpy.copy(a)
A:numpy.lib.tests.test_function_base.a_fort->numpy.array([[1, 2], [3, 4]], order='F')
A:numpy.lib.tests.test_function_base.a_fort_copy->numpy.copy(a_fort)
A:numpy.lib.tests.test_function_base.y1->sinc(np.array(x))
A:numpy.lib.tests.test_function_base.y2->sinc(list(x))
A:numpy.lib.tests.test_function_base.y4->numpy.ones((4, 4))
A:numpy.lib.tests.test_function_base.y5->rand(5, 5)
A:numpy.lib.tests.test_function_base.y6->numpy.matrix(rand(5, 5))
A:numpy.lib.tests.test_function_base.y->numpy.zeros((3, 2))
A:numpy.lib.tests.test_function_base.w->numpy.array([0.2, 0.3, 0.5, 0.1, 0.2])
A:numpy.lib.tests.test_function_base.actual->average(y1, weights=w1, axis=1)
A:numpy.lib.tests.test_function_base.desired->numpy.array([3.0, 6.0])
A:numpy.lib.tests.test_function_base.(avg, scl)->average(y, weights=w2, axis=1, returned=True)
A:numpy.lib.tests.test_function_base.b->extract(a > 1, a)
A:numpy.lib.tests.test_function_base.c->extract(mask, a)
A:numpy.lib.tests.test_function_base.x->numpy.array([[1, 2, 3], [4, 5, 6]])
A:numpy.lib.tests.test_function_base.a2->numpy.arange(6).reshape(2, 3)
A:numpy.lib.tests.test_function_base.tgt->numpy.array([[1, 3, 6, 10], [5, 11, 18, 27], [10, 13, 17, 22]], ctype)
A:numpy.lib.tests.test_function_base.out->numpy.array([3, 2, 1, 5])
A:numpy.lib.tests.test_function_base.out2->numpy.array([-1, -1, 4])
A:numpy.lib.tests.test_function_base.out3->numpy.array([0, 5])
A:numpy.lib.tests.test_function_base.self.a->numpy.arange(5)
A:numpy.lib.tests.test_function_base.self.nd_a->numpy.arange(5).repeat(2).reshape(1, 5, 2)
A:numpy.lib.tests.test_function_base.a_del->delete(self.a, indices)
A:numpy.lib.tests.test_function_base.nd_a_del->delete(self.nd_a, indices, axis=1)
A:numpy.lib.tests.test_function_base.indices->numpy.asarray(indices, dtype=np.intp)
A:numpy.lib.tests.test_function_base.xor->setxor1d(nd_a_del[0, :, 0], self.nd_a[0, indices, 0])
A:numpy.lib.tests.test_function_base.s->slice(start, stop, step)
A:numpy.lib.tests.test_function_base.obj->numpy.asarray(input_array).view(cls)
A:numpy.lib.tests.test_function_base.dx->numpy.array([2, 7, 7, 25, 154, 119, -21], dtype='timedelta64[D]')
A:numpy.lib.tests.test_function_base.z->numpy.linspace(0, 3, 13)
A:numpy.lib.tests.test_function_base.res->list(p).pop(0)
A:numpy.lib.tests.test_function_base.ac->MySubClass([1, 2, 3]).copy()
A:numpy.lib.tests.test_function_base.f->numpy.vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.r->rand(10, 4)
A:numpy.lib.tests.test_function_base.args->numpy.array([1, 2, 3])
A:numpy.lib.tests.test_function_base.r1->f(args, b=2)
A:numpy.lib.tests.test_function_base.r2->numpy.array([3, 4, 5])
A:numpy.lib.tests.test_function_base._p->list(p)
A:numpy.lib.tests.test_function_base.vpolyval->numpy.vectorize(mypolyval, excluded=['p', 1])
A:numpy.lib.tests.test_function_base.f1->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res1a->f1(np.arange(3))
A:numpy.lib.tests.test_function_base.res1b->f1(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.f2->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res2b->f2(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.res2a->f2(np.arange(3))
A:numpy.lib.tests.test_function_base.bins->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.bin->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.qx->(q * wx[:, None, None]).sum(axis=0)
A:numpy.lib.tests.test_function_base.qy->(q * wy[None, :, None]).sum(axis=1)
A:numpy.lib.tests.test_function_base.qz->(q * wz[None, None, :]).sum(axis=2)
A:numpy.lib.tests.test_function_base.ym->numpy.ma.array(y, mask=mask)
A:numpy.lib.tests.test_function_base.xm->numpy.ma.array(x, mask=mask)
A:numpy.lib.tests.test_function_base.mx->numpy.matrix(x)
A:numpy.lib.tests.test_function_base.my->numpy.matrix(y)
A:numpy.lib.tests.test_function_base.mr->trapz(my, mx)
A:numpy.lib.tests.test_function_base.y3->sinc(tuple(x))
A:numpy.lib.tests.test_function_base.v->rand(100, 2)
A:numpy.lib.tests.test_function_base.(a, b)->numpy.histogramdd([[], [], []], bins=2)
A:numpy.lib.tests.test_function_base.(hist, edges)->histogramdd(x, bins=2)
A:numpy.lib.tests.test_function_base.(h, e)->numpy.histogramdd(x, bins=[3, [-np.inf, 3, np.inf]])
A:numpy.lib.tests.test_function_base.area->numpy.sum(a * diff(b))
A:numpy.lib.tests.test_function_base.(counts, dmy)->numpy.histogram([1, 2, 3, 4], [0.5, 1.5, np.inf], density=True)
A:numpy.lib.tests.test_function_base.(h, b)->histogram(a, weights=np.ones(10, float))
A:numpy.lib.tests.test_function_base.(na, nb)->histogram(v, normed=True)
A:numpy.lib.tests.test_function_base.(wa, wb)->histogram([1, 2, 2, 4], bins=4, weights=[4, 3, 2, 1], normed=True)
A:numpy.lib.tests.test_function_base.(nwa, nwb)->histogram(v, weights=w, normed=True)
A:numpy.lib.tests.test_function_base.(H, edges)->histogramdd(r, b)
A:numpy.lib.tests.test_function_base.answer->numpy.array([[[0, 0], [0, 0], [0, 0]], [[0, 1], [0, 0], [1, 0]], [[0, 1], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]])
A:numpy.lib.tests.test_function_base.Z->numpy.zeros((5, 5, 5))
A:numpy.lib.tests.test_function_base.(n_hist, edges)->histogramdd(v, normed=True)
A:numpy.lib.tests.test_function_base.(w_hist, edges)->histogramdd(v, weights=np.ones(100, int) * 2)
A:numpy.lib.tests.test_function_base.expected->numpy.array([[1, 0], [0, 1], [0, 1]])
A:numpy.lib.tests.test_function_base.(hist, _)->histogramdd(x, bins=bins)
A:numpy.lib.tests.test_function_base.A->numpy.array([[0.44567325, 0.79115165, 0.5490053], [0.36844147, 0.37325583, 0.96098397], [0.64864341, 0.52929049, 0.39172155]])
A:numpy.lib.tests.test_function_base.B->numpy.array([[0.827002, 0.99959078], [0.89694769, 0.39298162], [0.37954418, 0.05206293], [0.36465447, 0.72446427], [0.48164949, 0.50324519]])
A:numpy.lib.tests.test_function_base.res1->numpy.array([[1.0, 0.9379533, -0.04931983], [0.9379533, 1.0, 0.30007991], [-0.04931983, 0.30007991, 1.0]])
A:numpy.lib.tests.test_function_base.res2->numpy.array([[1.0, 0.9379533, -0.04931983, 0.30151751, 0.66318558, 0.51532523], [0.9379533, 1.0, 0.30007991, -0.04781421, 0.88157256, 0.78052386], [-0.04931983, 0.30007991, 1.0, -0.96717111, 0.71483595, 0.83053601], [0.30151751, -0.04781421, -0.96717111, 1.0, -0.51366032, -0.66173113], [0.66318558, 0.88157256, 0.71483595, -0.51366032, 1.0, 0.98317823], [0.51532523, 0.78052386, 0.83053601, -0.66173113, 0.98317823, 1.0]])
A:numpy.lib.tests.test_function_base.[X, Y]->meshgrid([1, 2, 3], [4, 5, 6, 7], sparse=True)
A:numpy.lib.tests.test_function_base.x0->numpy.array(0.3, dtype=object)
A:numpy.lib.tests.test_function_base.xp->numpy.arange(0, 1000, 0.0001)
A:numpy.lib.tests.test_function_base.fp->numpy.sin(xp)
A:numpy.lib.tests.test_function_base.a0->numpy.array(1)
A:numpy.lib.tests.test_function_base.a1->numpy.arange(2)
A:numpy.lib.tests.test_function_base.a3->numpy.array([[2, 3], [0, 1], [6, 7], [4, 5]])
A:numpy.lib.tests.test_function_base.orig->MySubClass([1, 2, 3]).copy()
A:numpy.lib.tests.test_function_base.a4->numpy.arange(3 * 4 * 5, dtype=np.float32).reshape((3, 4, 5))
numpy.lib.tests.test_TestAdd_newdoc_ufunc.test_string_arg(self)
numpy.lib.tests.test_TestInterp.test_scalar_interpolation_point(self)
numpy.lib.tests.test_TestInterp.test_zero_dimensional_interpolation_point(self)
numpy.lib.tests.test_TestKaiser.test_int_beta(self)
numpy.lib.tests.test_TestVectorize.test_assigning_docstring(self)
numpy.lib.tests.test_TestVectorize.test_string_ticket_1892(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc(TestCase)
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_string_arg(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_ufunc_arg(self)
numpy.lib.tests.test_function_base.TestAll(TestCase)
numpy.lib.tests.test_function_base.TestAll.test_basic(self)
numpy.lib.tests.test_function_base.TestAll.test_nd(self)
numpy.lib.tests.test_function_base.TestAmax(TestCase)
numpy.lib.tests.test_function_base.TestAmax.test_basic(self)
numpy.lib.tests.test_function_base.TestAmin(TestCase)
numpy.lib.tests.test_function_base.TestAmin.test_basic(self)
numpy.lib.tests.test_function_base.TestAngle(TestCase)
numpy.lib.tests.test_function_base.TestAngle.test_basic(self)
numpy.lib.tests.test_function_base.TestAny(TestCase)
numpy.lib.tests.test_function_base.TestAny.test_basic(self)
numpy.lib.tests.test_function_base.TestAny.test_nd(self)
numpy.lib.tests.test_function_base.TestAverage(TestCase)
numpy.lib.tests.test_function_base.TestAverage.test_basic(self)
numpy.lib.tests.test_function_base.TestAverage.test_returned(self)
numpy.lib.tests.test_function_base.TestAverage.test_weights(self)
numpy.lib.tests.test_function_base.TestBincount(TestCase)
numpy.lib.tests.test_function_base.TestBincount.test_empty(self)
numpy.lib.tests.test_function_base.TestBincount.test_empty_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple2(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight2(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_and_weights(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_smaller_than_maxvalue(self)
numpy.lib.tests.test_function_base.TestCheckFinite(TestCase)
numpy.lib.tests.test_function_base.TestCheckFinite.test_dtype_order(self)
numpy.lib.tests.test_function_base.TestCheckFinite.test_simple(self)
numpy.lib.tests.test_function_base.TestCopy(TestCase)
numpy.lib.tests.test_function_base.TestCopy.test_basic(self)
numpy.lib.tests.test_function_base.TestCopy.test_order(self)
numpy.lib.tests.test_function_base.TestCorrCoef(TestCase)
numpy.lib.tests.test_function_base.TestCorrCoef.test_ddof(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_empty(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_simple(self)
numpy.lib.tests.test_function_base.TestCov(TestCase)
numpy.lib.tests.test_function_base.TestCov.test_basic(self)
numpy.lib.tests.test_function_base.TestCov.test_empty(self)
numpy.lib.tests.test_function_base.TestCumprod(TestCase)
numpy.lib.tests.test_function_base.TestCumprod.test_basic(self)
numpy.lib.tests.test_function_base.TestCumsum(TestCase)
numpy.lib.tests.test_function_base.TestCumsum.test_basic(self)
numpy.lib.tests.test_function_base.TestDelete(TestCase)
numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing(self,indices)
numpy.lib.tests.test_function_base.TestDelete.setUp(self)
numpy.lib.tests.test_function_base.TestDelete.test_0d(self)
numpy.lib.tests.test_function_base.TestDelete.test_fancy(self)
numpy.lib.tests.test_function_base.TestDelete.test_single(self)
numpy.lib.tests.test_function_base.TestDelete.test_slices(self)
numpy.lib.tests.test_function_base.TestDelete.test_subclass(self)
numpy.lib.tests.test_function_base.TestDiff(TestCase)
numpy.lib.tests.test_function_base.TestDiff.test_basic(self)
numpy.lib.tests.test_function_base.TestDiff.test_nd(self)
numpy.lib.tests.test_function_base.TestDigitize(TestCase)
numpy.lib.tests.test_function_base.TestDigitize.test_forward(self)
numpy.lib.tests.test_function_base.TestDigitize.test_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_reverse(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_basic(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_reverse(self)
numpy.lib.tests.test_function_base.TestExtins(TestCase)
numpy.lib.tests.test_function_base.TestExtins.test_basic(self)
numpy.lib.tests.test_function_base.TestExtins.test_both(self)
numpy.lib.tests.test_function_base.TestExtins.test_place(self)
numpy.lib.tests.test_function_base.TestFilterwindows(TestCase)
numpy.lib.tests.test_function_base.TestFilterwindows.test_bartlett(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_blackman(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_hamming(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_hanning(self)
numpy.lib.tests.test_function_base.TestGradient(TestCase)
numpy.lib.tests.test_function_base.TestGradient.test_badargs(self)
numpy.lib.tests.test_function_base.TestGradient.test_basic(self)
numpy.lib.tests.test_function_base.TestGradient.test_datetime64(self)
numpy.lib.tests.test_function_base.TestGradient.test_masked(self)
numpy.lib.tests.test_function_base.TestGradient.test_timedelta64(self)
numpy.lib.tests.test_function_base.TestHistogram(TestCase)
numpy.lib.tests.test_function_base.TestHistogram.setUp(self)
numpy.lib.tests.test_function_base.TestHistogram.tearDown(self)
numpy.lib.tests.test_function_base.TestHistogram.test_density(self)
numpy.lib.tests.test_function_base.TestHistogram.test_empty(self)
numpy.lib.tests.test_function_base.TestHistogram.test_normed(self)
numpy.lib.tests.test_function_base.TestHistogram.test_one_bin(self)
numpy.lib.tests.test_function_base.TestHistogram.test_outliers(self)
numpy.lib.tests.test_function_base.TestHistogram.test_simple(self)
numpy.lib.tests.test_function_base.TestHistogram.test_type(self)
numpy.lib.tests.test_function_base.TestHistogram.test_weights(self)
numpy.lib.tests.test_function_base.TestHistogramdd(TestCase)
numpy.lib.tests.test_function_base.TestHistogramdd.test_bins_errors(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_empty(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_identical_samples(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_inf_edges(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_rightmost_binedge(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_shape_3d(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_shape_4d(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_simple(self)
numpy.lib.tests.test_function_base.TestHistogramdd.test_weights(self)
numpy.lib.tests.test_function_base.TestInsert(TestCase)
numpy.lib.tests.test_function_base.TestInsert.test_0d(self)
numpy.lib.tests.test_function_base.TestInsert.test_basic(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_array_copied(self)
numpy.lib.tests.test_function_base.TestInsert.test_multidim(self)
numpy.lib.tests.test_function_base.TestInsert.test_subclass(self)
numpy.lib.tests.test_function_base.TestInterp(TestCase)
numpy.lib.tests.test_function_base.TestInterp.test_basic(self)
numpy.lib.tests.test_function_base.TestInterp.test_exceptions(self)
numpy.lib.tests.test_function_base.TestInterp.test_if_len_x_is_small(self)
numpy.lib.tests.test_function_base.TestInterp.test_right_left_behavior(self)
numpy.lib.tests.test_function_base.TestInterp.test_scalar_interpolation_point(self)
numpy.lib.tests.test_function_base.TestInterp.test_zero_dimensional_interpolation_point(self)
numpy.lib.tests.test_function_base.TestKaiser(TestCase)
numpy.lib.tests.test_function_base.TestKaiser.test_int_beta(self)
numpy.lib.tests.test_function_base.TestKaiser.test_simple(self)
numpy.lib.tests.test_function_base.TestMedian(TestCase)
numpy.lib.tests.test_function_base.TestMedian.test_array_like(self)
numpy.lib.tests.test_function_base.TestMedian.test_axis_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_basic(self)
numpy.lib.tests.test_function_base.TestMedian.test_overwrite_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_subclass(self)
numpy.lib.tests.test_function_base.TestMeshgrid(TestCase)
numpy.lib.tests.test_function_base.TestMeshgrid.test_indexing(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_simple(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_single_input(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_sparse(self)
numpy.lib.tests.test_function_base.TestMsort(TestCase)
numpy.lib.tests.test_function_base.TestMsort.test_simple(self)
numpy.lib.tests.test_function_base.TestPiecewise(TestCase)
numpy.lib.tests.test_function_base.TestPiecewise.test_0d(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_default(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_simple(self)
numpy.lib.tests.test_function_base.TestProd(TestCase)
numpy.lib.tests.test_function_base.TestProd.test_basic(self)
numpy.lib.tests.test_function_base.TestPtp(TestCase)
numpy.lib.tests.test_function_base.TestPtp.test_basic(self)
numpy.lib.tests.test_function_base.TestSelect(TestCase)
numpy.lib.tests.test_function_base.TestSelect._select(self,cond,values,default=0)
numpy.lib.tests.test_function_base.TestSelect.test_basic(self)
numpy.lib.tests.test_function_base.TestSinc(TestCase)
numpy.lib.tests.test_function_base.TestSinc.test_array_like(self)
numpy.lib.tests.test_function_base.TestSinc.test_simple(self)
numpy.lib.tests.test_function_base.TestTrapz(TestCase)
numpy.lib.tests.test_function_base.TestTrapz.test_masked(self)
numpy.lib.tests.test_function_base.TestTrapz.test_matrix(self)
numpy.lib.tests.test_function_base.TestTrapz.test_ndim(self)
numpy.lib.tests.test_function_base.TestTrapz.test_simple(self)
numpy.lib.tests.test_function_base.TestTrimZeros(TestCase)
numpy.lib.tests.test_function_base.TestTrimZeros.test_basic(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_leading_skip(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_trailing_skip(self)
numpy.lib.tests.test_function_base.TestUnique(TestCase)
numpy.lib.tests.test_function_base.TestUnique.test_simple(self)
numpy.lib.tests.test_function_base.TestUnwrap(TestCase)
numpy.lib.tests.test_function_base.TestUnwrap.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize(TestCase)
numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156(self)
numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring(self)
numpy.lib.tests.test_function_base.TestVectorize.test_cache(self)
numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_execution_order_ticket_1487(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_no_func_code(self)
numpy.lib.tests.test_function_base.TestVectorize.test_large(self)
numpy.lib.tests.test_function_base.TestVectorize.test_scalar(self)
numpy.lib.tests.test_function_base.TestVectorize.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize.test_string_ticket_1892(self)
numpy.lib.tests.test_function_base.TestVectorize.test_ufunc(self)
numpy.lib.tests.test_function_base.Test_I0(TestCase)
numpy.lib.tests.test_function_base.Test_I0.test_simple(self)
numpy.lib.tests.test_function_base.compare_results(res,desired)
numpy.lib.tests.test_function_base.test_percentile_list()
numpy.lib.tests.test_function_base.test_percentile_out()
numpy.tests.test_TestAdd_newdoc_ufunc(TestCase)
numpy.tests.test_TestAdd_newdoc_ufunc.test_ufunc_arg(self)
numpy.tests.test_TestAll(TestCase)
numpy.tests.test_TestAll.test_basic(self)
numpy.tests.test_TestAll.test_nd(self)
numpy.tests.test_TestAmax(TestCase)
numpy.tests.test_TestAmax.test_basic(self)
numpy.tests.test_TestAmin(TestCase)
numpy.tests.test_TestAmin.test_basic(self)
numpy.tests.test_TestAngle(TestCase)
numpy.tests.test_TestAngle.test_basic(self)
numpy.tests.test_TestAny(TestCase)
numpy.tests.test_TestAny.test_basic(self)
numpy.tests.test_TestAny.test_nd(self)
numpy.tests.test_TestAverage(TestCase)
numpy.tests.test_TestAverage.test_basic(self)
numpy.tests.test_TestAverage.test_returned(self)
numpy.tests.test_TestAverage.test_weights(self)
numpy.tests.test_TestBincount(TestCase)
numpy.tests.test_TestBincount.test_empty(self)
numpy.tests.test_TestBincount.test_empty_with_minlength(self)
numpy.tests.test_TestBincount.test_simple(self)
numpy.tests.test_TestBincount.test_simple2(self)
numpy.tests.test_TestBincount.test_simple_weight(self)
numpy.tests.test_TestBincount.test_simple_weight2(self)
numpy.tests.test_TestBincount.test_with_minlength(self)
numpy.tests.test_TestBincount.test_with_minlength_and_weights(self)
numpy.tests.test_TestBincount.test_with_minlength_smaller_than_maxvalue(self)
numpy.tests.test_TestCheckFinite(TestCase)
numpy.tests.test_TestCheckFinite.test_dtype_order(self)
numpy.tests.test_TestCheckFinite.test_simple(self)
numpy.tests.test_TestCopy(TestCase)
numpy.tests.test_TestCopy.test_basic(self)
numpy.tests.test_TestCopy.test_order(self)
numpy.tests.test_TestCorrCoef(TestCase)
numpy.tests.test_TestCorrCoef.test_ddof(self)
numpy.tests.test_TestCorrCoef.test_empty(self)
numpy.tests.test_TestCorrCoef.test_simple(self)
numpy.tests.test_TestCov(TestCase)
numpy.tests.test_TestCov.test_basic(self)
numpy.tests.test_TestCov.test_empty(self)
numpy.tests.test_TestCumprod(TestCase)
numpy.tests.test_TestCumprod.test_basic(self)
numpy.tests.test_TestCumsum(TestCase)
numpy.tests.test_TestCumsum.test_basic(self)
numpy.tests.test_TestDelete(TestCase)
numpy.tests.test_TestDelete._check_inverse_of_slicing(self,indices)
numpy.tests.test_TestDelete.setUp(self)
numpy.tests.test_TestDelete.test_0d(self)
numpy.tests.test_TestDelete.test_fancy(self)
numpy.tests.test_TestDelete.test_single(self)
numpy.tests.test_TestDelete.test_slices(self)
numpy.tests.test_TestDelete.test_subclass(self)
numpy.tests.test_TestDiff(TestCase)
numpy.tests.test_TestDiff.test_basic(self)
numpy.tests.test_TestDiff.test_nd(self)
numpy.tests.test_TestDigitize(TestCase)
numpy.tests.test_TestDigitize.test_forward(self)
numpy.tests.test_TestDigitize.test_random(self)
numpy.tests.test_TestDigitize.test_reverse(self)
numpy.tests.test_TestDigitize.test_right_basic(self)
numpy.tests.test_TestDigitize.test_right_open(self)
numpy.tests.test_TestDigitize.test_right_open_random(self)
numpy.tests.test_TestDigitize.test_right_open_reverse(self)
numpy.tests.test_TestExtins(TestCase)
numpy.tests.test_TestExtins.test_basic(self)
numpy.tests.test_TestExtins.test_both(self)
numpy.tests.test_TestExtins.test_place(self)
numpy.tests.test_TestFilterwindows(TestCase)
numpy.tests.test_TestFilterwindows.test_bartlett(self)
numpy.tests.test_TestFilterwindows.test_blackman(self)
numpy.tests.test_TestFilterwindows.test_hamming(self)
numpy.tests.test_TestFilterwindows.test_hanning(self)
numpy.tests.test_TestGradient(TestCase)
numpy.tests.test_TestGradient.test_badargs(self)
numpy.tests.test_TestGradient.test_basic(self)
numpy.tests.test_TestGradient.test_datetime64(self)
numpy.tests.test_TestGradient.test_masked(self)
numpy.tests.test_TestGradient.test_timedelta64(self)
numpy.tests.test_TestHistogram(TestCase)
numpy.tests.test_TestHistogram.setUp(self)
numpy.tests.test_TestHistogram.tearDown(self)
numpy.tests.test_TestHistogram.test_density(self)
numpy.tests.test_TestHistogram.test_empty(self)
numpy.tests.test_TestHistogram.test_normed(self)
numpy.tests.test_TestHistogram.test_one_bin(self)
numpy.tests.test_TestHistogram.test_outliers(self)
numpy.tests.test_TestHistogram.test_simple(self)
numpy.tests.test_TestHistogram.test_type(self)
numpy.tests.test_TestHistogram.test_weights(self)
numpy.tests.test_TestHistogramdd(TestCase)
numpy.tests.test_TestHistogramdd.test_bins_errors(self)
numpy.tests.test_TestHistogramdd.test_empty(self)
numpy.tests.test_TestHistogramdd.test_identical_samples(self)
numpy.tests.test_TestHistogramdd.test_inf_edges(self)
numpy.tests.test_TestHistogramdd.test_rightmost_binedge(self)
numpy.tests.test_TestHistogramdd.test_shape_3d(self)
numpy.tests.test_TestHistogramdd.test_shape_4d(self)
numpy.tests.test_TestHistogramdd.test_simple(self)
numpy.tests.test_TestHistogramdd.test_weights(self)
numpy.tests.test_TestInsert(TestCase)
numpy.tests.test_TestInsert.test_0d(self)
numpy.tests.test_TestInsert.test_basic(self)
numpy.tests.test_TestInsert.test_index_array_copied(self)
numpy.tests.test_TestInsert.test_multidim(self)
numpy.tests.test_TestInsert.test_subclass(self)
numpy.tests.test_TestInterp(TestCase)
numpy.tests.test_TestInterp.test_basic(self)
numpy.tests.test_TestInterp.test_exceptions(self)
numpy.tests.test_TestInterp.test_if_len_x_is_small(self)
numpy.tests.test_TestInterp.test_right_left_behavior(self)
numpy.tests.test_TestKaiser(TestCase)
numpy.tests.test_TestKaiser.test_simple(self)
numpy.tests.test_TestMedian(TestCase)
numpy.tests.test_TestMedian.test_array_like(self)
numpy.tests.test_TestMedian.test_axis_keyword(self)
numpy.tests.test_TestMedian.test_basic(self)
numpy.tests.test_TestMedian.test_overwrite_keyword(self)
numpy.tests.test_TestMedian.test_subclass(self)
numpy.tests.test_TestMeshgrid(TestCase)
numpy.tests.test_TestMeshgrid.test_indexing(self)
numpy.tests.test_TestMeshgrid.test_simple(self)
numpy.tests.test_TestMeshgrid.test_single_input(self)
numpy.tests.test_TestMeshgrid.test_sparse(self)
numpy.tests.test_TestMsort(TestCase)
numpy.tests.test_TestMsort.test_simple(self)
numpy.tests.test_TestPiecewise(TestCase)
numpy.tests.test_TestPiecewise.test_0d(self)
numpy.tests.test_TestPiecewise.test_default(self)
numpy.tests.test_TestPiecewise.test_simple(self)
numpy.tests.test_TestProd(TestCase)
numpy.tests.test_TestProd.test_basic(self)
numpy.tests.test_TestPtp(TestCase)
numpy.tests.test_TestPtp.test_basic(self)
numpy.tests.test_TestSelect(TestCase)
numpy.tests.test_TestSelect._select(self,cond,values,default=0)
numpy.tests.test_TestSelect.test_basic(self)
numpy.tests.test_TestSinc(TestCase)
numpy.tests.test_TestSinc.test_array_like(self)
numpy.tests.test_TestSinc.test_simple(self)
numpy.tests.test_TestTrapz(TestCase)
numpy.tests.test_TestTrapz.test_masked(self)
numpy.tests.test_TestTrapz.test_matrix(self)
numpy.tests.test_TestTrapz.test_ndim(self)
numpy.tests.test_TestTrapz.test_simple(self)
numpy.tests.test_TestTrimZeros(TestCase)
numpy.tests.test_TestTrimZeros.test_basic(self)
numpy.tests.test_TestTrimZeros.test_leading_skip(self)
numpy.tests.test_TestTrimZeros.test_trailing_skip(self)
numpy.tests.test_TestUnique(TestCase)
numpy.tests.test_TestUnique.test_simple(self)
numpy.tests.test_TestUnwrap(TestCase)
numpy.tests.test_TestUnwrap.test_simple(self)
numpy.tests.test_TestVectorize(TestCase)
numpy.tests.test_TestVectorize.test_UnboundMethod_ticket_1156(self)
numpy.tests.test_TestVectorize.test_cache(self)
numpy.tests.test_TestVectorize.test_coverage1_ticket_2100(self)
numpy.tests.test_TestVectorize.test_execution_order_ticket_1487(self)
numpy.tests.test_TestVectorize.test_keywords(self)
numpy.tests.test_TestVectorize.test_keywords2_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords3_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords4_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords5_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords_no_func_code(self)
numpy.tests.test_TestVectorize.test_large(self)
numpy.tests.test_TestVectorize.test_scalar(self)
numpy.tests.test_TestVectorize.test_simple(self)
numpy.tests.test_TestVectorize.test_ufunc(self)
numpy.tests.test_Test_I0(TestCase)
numpy.tests.test_Test_I0.test_simple(self)
numpy.tests.test_compare_results(res,desired)
numpy.tests.test_test_percentile_list()
numpy.tests.test_test_percentile_out()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/lib/tests/test_stride_tricks.py----------------------------------------
A:numpy.lib.tests.test_stride_tricks.outarrays->broadcast_arrays(*inarrays)
A:numpy.lib.tests.test_stride_tricks.x0->numpy.zeros(shape0, dtype=int)
A:numpy.lib.tests.test_stride_tricks.n->int(np.multiply.reduce(shape1))
A:numpy.lib.tests.test_stride_tricks.x1->numpy.arange(n).reshape(shape1)
A:numpy.lib.tests.test_stride_tricks.(b0, b1)->broadcast_arrays(x0, x1)
A:numpy.lib.tests.test_stride_tricks.x->numpy.array([[1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.y->numpy.array([[1], [2], [3]])
A:numpy.lib.tests.test_stride_tricks.(bx, by)->broadcast_arrays(x, y)
A:numpy.lib.tests.test_stride_tricks.bx0->numpy.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.a->numpy.array([1, 2, 3, 4])
A:numpy.lib.tests.test_stride_tricks.a_view->as_strided(a, shape=(3, 4), strides=(0, 1 * a.itemsize))
A:numpy.lib.tests.test_stride_tricks.expected->numpy.array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])
numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise(input_shapes)
numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc(shape0,shape1,transposed=False,flipped=False)
numpy.lib.tests.test_stride_tricks.assert_shapes_correct(input_shapes,expected_shape)
numpy.lib.tests.test_stride_tricks.test_as_strided()
numpy.lib.tests.test_stride_tricks.test_incompatible_shapes_raise_valueerror()
numpy.lib.tests.test_stride_tricks.test_one_off()
numpy.lib.tests.test_stride_tricks.test_same()
numpy.lib.tests.test_stride_tricks.test_same_as_ufunc()
numpy.lib.tests.test_stride_tricks.test_same_input_shapes()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_ones_input_shapes()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes()
numpy.lib.tests.test_test_as_strided()
numpy.tests.test_assert_incompatible_shapes_raise(input_shapes)
numpy.tests.test_assert_same_as_ufunc(shape0,shape1,transposed=False,flipped=False)
numpy.tests.test_assert_shapes_correct(input_shapes,expected_shape)
numpy.tests.test_test_incompatible_shapes_raise_valueerror()
numpy.tests.test_test_one_off()
numpy.tests.test_test_same()
numpy.tests.test_test_same_as_ufunc()
numpy.tests.test_test_same_input_shapes()
numpy.tests.test_test_two_compatible_by_ones_input_shapes()
numpy.tests.test_test_two_compatible_by_prepending_ones_input_shapes()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/tests/test_ctypeslib.py----------------------------------------
A:numpy.tests.test_ctypeslib.cdll->load_library('multiarray%s' % so, np.core.multiarray.__file__)
A:numpy.tests.test_ctypeslib.so->get_shared_lib_extension(is_python_ext=True)
A:numpy.tests.test_ctypeslib.p->ndpointer(flags=x.flags.num)
A:numpy.tests.test_ctypeslib.dt->numpy.dtype(dtdescr)
A:numpy.tests.test_ctypeslib.samedt->numpy.dtype(dtdescr)
A:numpy.tests.test_ctypeslib.dt2->numpy.dtype(dtdescr, align=True)
A:numpy.tests.test_ctypeslib.x->numpy.array([[1, 2], [3, 4]], order='F')
numpy.tests.test_ctypesTestLoadLibrary(TestCase)
numpy.tests.test_ctypesTestLoadLibrary.test_basic(self)
numpy.tests.test_ctypesTestLoadLibrary.test_basic2(self)
numpy.tests.test_ctypeslib.TestLoadLibrary(TestCase)
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic(self)
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic2(self)
numpy.tests.test_ctypeslib.TestNdpointer(TestCase)
numpy.tests.test_ctypeslib.TestNdpointer.test_dtype(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_flags(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_ndim(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_shape(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/tests/test_matlib.py----------------------------------------
A:numpy.tests.test_matlib.x->numpy.matlib.repmat(a1, 2, 2)
A:numpy.tests.test_matlib.a1->numpy.arange(4)
A:numpy.tests.test_matlib.y->numpy.array([[0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3]])
numpy.tests.test_matlib.test_empty()
numpy.tests.test_matlib.test_eye()
numpy.tests.test_matlib.test_identity()
numpy.tests.test_matlib.test_ones()
numpy.tests.test_matlib.test_rand()
numpy.tests.test_matlib.test_randn()
numpy.tests.test_matlib.test_repmat()
numpy.tests.test_matlib.test_zeros()
numpy.tests.test_mattest_empty()
numpy.tests.test_mattest_eye()
numpy.tests.test_mattest_identity()
numpy.tests.test_mattest_ones()
numpy.tests.test_mattest_rand()
numpy.tests.test_mattest_randn()
numpy.tests.test_mattest_repmat()
numpy.tests.test_mattest_zeros()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/arrayfns.py----------------------------------------
A:numpy.oldnumeric.arrayfns.indices->asarray(indices)
A:numpy.oldnumeric.arrayfns.vals1->asarray(vals1)
A:numpy.oldnumeric.arrayfns.vals2->asarray(vals2)
A:numpy.oldnumeric.arrayfns.res->numpy.interp(z, x, y)
A:numpy.oldnumeric.arrayfns.x->numpy.linspace(lo, hi, num)
A:numpy.oldnumeric.arrayfns.indxs->numpy.flatnonzero(x != 0)
A:numpy.oldnumeric.arrayfns.y->numpy.empty_like(x)
A:numpy.oldnumeric.arrayfns.ret->numpy.empty((d2, num), x.dtype)
A:numpy.oldnumeric.arrayfns.z->asarray(z, dtype=float)
A:numpy.oldnumeric.arrayfns.ireg->asarray(ireg, dtype=int)
A:numpy.oldnumeric.arrayfns.(ix, iy)->numpy.nonzero(ireg)
numpy.oldnumeric.arrayfns.array_set(vals1,indices,vals2)
numpy.oldnumeric.arrayfns.construct3(mask,itype)
numpy.oldnumeric.arrayfns.error(Exception)
numpy.oldnumeric.arrayfns.find_mask(fs,node_edges)
numpy.oldnumeric.arrayfns.index_sort(arr)
numpy.oldnumeric.arrayfns.interp(y,x,z,typ=None)
numpy.oldnumeric.arrayfns.nz(x)
numpy.oldnumeric.arrayfns.reverse(x,n)
numpy.oldnumeric.arrayfns.span(lo,hi,num,d2=0)
numpy.oldnumeric.arrayfns.to_corners(arr,nv,nvsum)
numpy.oldnumeric.arrayfns.zmin_zmax(z,ireg)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/fix_default_axis.py----------------------------------------
A:numpy.oldnumeric.fix_default_axis.func_re[name]->re.compile(_astr)
A:numpy.oldnumeric.fix_default_axis.(start, end)->obj.span()
A:numpy.oldnumeric.fix_default_axis.N->len(importstr)
A:numpy.oldnumeric.fix_default_axis.ind->fstr.find(importstr, ind)
A:numpy.oldnumeric.fix_default_axis.ind2->fstr.find(name, ind)
A:numpy.oldnumeric.fix_default_axis.importre->re.compile('import numpy as ([A-Za-z0-9_]+)')
A:numpy.oldnumeric.fix_default_axis.modules->re.compile('import numpy as ([A-Za-z0-9_]+)').findall(fstr)
A:numpy.oldnumeric.fix_default_axis.substr->substr.replace('\\', '').replace('\\', '')
A:numpy.oldnumeric.fix_default_axis.(fstr, num)->_import_change(fstr, _funcm1 + _func0)
A:numpy.oldnumeric.fix_default_axis.fid->file(name)
A:numpy.oldnumeric.fix_default_axis.filestr->getfile(filename)
A:numpy.oldnumeric.fix_default_axis.(base, ext)->os.path.splitext(name)
A:numpy.oldnumeric.fix_default_axis.(newstr, total)->add_axis(filestr, import_change)
A:numpy.oldnumeric.fix_default_axis.files->glob.glob(os.path.join(direc, '*.py'))
numpy.oldnumeric.fix_default_axis._add_axis(fstr,name,repl)
numpy.oldnumeric.fix_default_axis._func(arg,dirname,fnames)
numpy.oldnumeric.fix_default_axis._import_change(fstr,names)
numpy.oldnumeric.fix_default_axis.add_axis(fstr,import_change=False)
numpy.oldnumeric.fix_default_axis.convertall(direc=os.path.curdir,import_change=False)
numpy.oldnumeric.fix_default_axis.convertfile(filename,import_change=False)
numpy.oldnumeric.fix_default_axis.converttree(direc=os.path.curdir,import_change=False)
numpy.oldnumeric.fix_default_axis.copyfile(name,fstr)
numpy.oldnumeric.fix_default_axis.fromargs(args)
numpy.oldnumeric.fix_default_axis.getfile(name)
numpy.oldnumeric.fix_default_axis.makenewfile(name,filestr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/functions.py----------------------------------------
A:numpy.oldnumeric.functions.dtype->convtypecode(typecode, dtype)
A:numpy.oldnumeric.functions.a->numpy.core.multiarray.empty(shape, dtype)
A:numpy.oldnumeric.functions.res->numpy.nonzero(a)
numpy.oldnumeric.alltrue(x,axis=0)
numpy.oldnumeric.arange(start,stop=None,step=1,typecode=None,dtype=None)
numpy.oldnumeric.argmax(x,axis=-1)
numpy.oldnumeric.argmin(x,axis=-1)
numpy.oldnumeric.array(sequence,typecode=None,copy=1,savespace=0,dtype=None)
numpy.oldnumeric.asarray(a,typecode=None,dtype=None)
numpy.oldnumeric.average(a,axis=0,weights=None,returned=False)
numpy.oldnumeric.compress(condition,m,axis=-1)
numpy.oldnumeric.cross_product(a,b,axis1=-1,axis2=-1)
numpy.oldnumeric.cumproduct(x,axis=0)
numpy.oldnumeric.cumsum(x,axis=0)
numpy.oldnumeric.empty(shape,typecode='l',dtype=None)
numpy.oldnumeric.fromfunction(args,dimensions)
numpy.oldnumeric.fromstring(string,typecode='l',count=-1,dtype=None)
numpy.oldnumeric.functions.alltrue(x,axis=0)
numpy.oldnumeric.functions.arange(start,stop=None,step=1,typecode=None,dtype=None)
numpy.oldnumeric.functions.argmax(x,axis=-1)
numpy.oldnumeric.functions.argmin(x,axis=-1)
numpy.oldnumeric.functions.array(sequence,typecode=None,copy=1,savespace=0,dtype=None)
numpy.oldnumeric.functions.asarray(a,typecode=None,dtype=None)
numpy.oldnumeric.functions.average(a,axis=0,weights=None,returned=False)
numpy.oldnumeric.functions.compress(condition,m,axis=-1)
numpy.oldnumeric.functions.cross_product(a,b,axis1=-1,axis2=-1)
numpy.oldnumeric.functions.cumproduct(x,axis=0)
numpy.oldnumeric.functions.cumsum(x,axis=0)
numpy.oldnumeric.functions.empty(shape,typecode='l',dtype=None)
numpy.oldnumeric.functions.fromfunction(args,dimensions)
numpy.oldnumeric.functions.fromstring(string,typecode='l',count=-1,dtype=None)
numpy.oldnumeric.functions.identity(n,typecode='l',dtype=None)
numpy.oldnumeric.functions.indices(dimensions,typecode=None,dtype=None)
numpy.oldnumeric.functions.nonzero(a)
numpy.oldnumeric.functions.ones(shape,typecode='l',savespace=0,dtype=None)
numpy.oldnumeric.functions.product(x,axis=0)
numpy.oldnumeric.functions.ravel(m)
numpy.oldnumeric.functions.repeat(a,repeats,axis=0)
numpy.oldnumeric.functions.reshape(a,shape)
numpy.oldnumeric.functions.sarray(a,typecode=None,copy=False,dtype=None)
numpy.oldnumeric.functions.sometrue(x,axis=0)
numpy.oldnumeric.functions.sum(x,axis=0)
numpy.oldnumeric.functions.take(a,indicies,axis=0)
numpy.oldnumeric.functions.trace(a,offset=0,axis1=0,axis2=1)
numpy.oldnumeric.functions.where(condition,x,y)
numpy.oldnumeric.functions.zeros(shape,typecode='l',savespace=0,dtype=None)
numpy.oldnumeric.identity(n,typecode='l',dtype=None)
numpy.oldnumeric.indices(dimensions,typecode=None,dtype=None)
numpy.oldnumeric.nonzero(a)
numpy.oldnumeric.ones(shape,typecode='l',savespace=0,dtype=None)
numpy.oldnumeric.product(x,axis=0)
numpy.oldnumeric.ravel(m)
numpy.oldnumeric.repeat(a,repeats,axis=0)
numpy.oldnumeric.reshape(a,shape)
numpy.oldnumeric.sarray(a,typecode=None,copy=False,dtype=None)
numpy.oldnumeric.sometrue(x,axis=0)
numpy.oldnumeric.sum(x,axis=0)
numpy.oldnumeric.take(a,indicies,axis=0)
numpy.oldnumeric.trace(a,offset=0,axis1=0,axis2=1)
numpy.oldnumeric.where(condition,x,y)
numpy.oldnumeric.zeros(shape,typecode='l',savespace=0,dtype=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/mlab.py----------------------------------------
A:numpy.oldnumeric.mlab.dtype->convtypecode(typecode, dtype)
A:numpy.oldnumeric.mlab.m->transpose(m)
A:numpy.oldnumeric.mlab.y->transpose(y)
A:numpy.oldnumeric.mlab.c->cov(x, y)
A:numpy.oldnumeric.mlab.d->diag(c)
numpy.oldnumeric.mlab.corrcoef(x,y=None)
numpy.oldnumeric.mlab.cov(m,y=None,rowvar=0,bias=0)
numpy.oldnumeric.mlab.cumprod(x,axis=0)
numpy.oldnumeric.mlab.eye(N,M=None,k=0,typecode=None,dtype=None)
numpy.oldnumeric.mlab.max(x,axis=0)
numpy.oldnumeric.mlab.mean(x,axis=0)
numpy.oldnumeric.mlab.min(x,axis=0)
numpy.oldnumeric.mlab.prod(x,axis=0)
numpy.oldnumeric.mlab.ptp(x,axis=0)
numpy.oldnumeric.mlab.std(x,axis=0)
numpy.oldnumeric.mlab.trapz(y,x=None,axis=-1)
numpy.oldnumeric.mlab.tri(N,M=None,k=0,typecode=None,dtype=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/random_array.py----------------------------------------
A:numpy.oldnumeric.random_array.obj->numpy.random.mtrand.get_state()
A:numpy.oldnumeric.random_array.obj2->numpy.random.mtrand.get_state()
A:numpy.oldnumeric.random_array.x->multinomial(16, [0.1, 0.5, 0.1], 8)
A:numpy.oldnumeric.random_array.y->uniform(0.5, 0.6, (1000, 10))
numpy.oldnumeric.random_array.F(dfn,dfd,shape=[])
numpy.oldnumeric.random_array.beta(a,b,shape=[])
numpy.oldnumeric.random_array.binomial(trials,p,shape=[])
numpy.oldnumeric.random_array.chi_square(df,shape=[])
numpy.oldnumeric.random_array.exponential(mean,shape=[])
numpy.oldnumeric.random_array.gamma(a,r,shape=[])
numpy.oldnumeric.random_array.get_seed()
numpy.oldnumeric.random_array.mean_var_test(x,type,mean,var,skew=[])
numpy.oldnumeric.random_array.multinomial(trials,probs,shape=[])
numpy.oldnumeric.random_array.multivariate_normal(mean,cov,shape=[])
numpy.oldnumeric.random_array.negative_binomial(trials,p,shape=[])
numpy.oldnumeric.random_array.noncentral_F(dfn,dfd,nconc,shape=[])
numpy.oldnumeric.random_array.noncentral_chi_square(df,nconc,shape=[])
numpy.oldnumeric.random_array.normal(mean,std,shape=[])
numpy.oldnumeric.random_array.permutation(n)
numpy.oldnumeric.random_array.poisson(mean,shape=[])
numpy.oldnumeric.random_array.randint(minimum,maximum=None,shape=[])
numpy.oldnumeric.random_array.random(shape=[])
numpy.oldnumeric.random_array.random_integers(maximum,minimum=1,shape=[])
numpy.oldnumeric.random_array.seed(x=0,y=0)
numpy.oldnumeric.random_array.standard_normal(shape=[])
numpy.oldnumeric.random_array.test()
numpy.oldnumeric.random_array.uniform(minimum,maximum,shape=[])


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/rng_stats.py----------------------------------------
A:numpy.oldnumeric.rng_stats.data->numpy.oldnumeric.floor((data - min) / bin_width).astype(Numeric.Int)
A:numpy.oldnumeric.rng_stats.min->numpy.oldnumeric.minimum.reduce(data)
A:numpy.oldnumeric.rng_stats.max->numpy.oldnumeric.maximum.reduce(data)
A:numpy.oldnumeric.rng_stats.histo->numpy.oldnumeric.add.reduce(Numeric.equal(Numeric.arange(nbins)[:, Numeric.NewAxis], data), -1)
numpy.oldnumeric.rng_stats.average(data)
numpy.oldnumeric.rng_stats.histogram(data,nbins,range=None)
numpy.oldnumeric.rng_stats.standardDeviation(data)
numpy.oldnumeric.rng_stats.variance(data)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/user_array.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/ma.py----------------------------------------
A:numpy.oldnumeric.ma.nomask->MaskType(0)
A:numpy.oldnumeric.ma.masked_print_option->_MaskedPrintOption('--')
A:numpy.oldnumeric.ma.m->numpy.core.umath.logical_or.accumulate(self.mask, axis)
A:numpy.oldnumeric.ma.result->_wrapit(self, 'squeeze')
A:numpy.oldnumeric.ma.t1->get_fill_value(a)
A:numpy.oldnumeric.ma.t2->get_fill_value(b)
A:numpy.oldnumeric.ma.self.__doc__->getattr(abfunc, '__doc__', str(abfunc))
A:numpy.oldnumeric.ma.self.__name__->getattr(abfunc, '__name__', str(abfunc))
A:numpy.oldnumeric.ma.d1->filled(a)
A:numpy.oldnumeric.ma.ma->getmaskarray(a)
A:numpy.oldnumeric.ma.mb->getmaskarray(b)
A:numpy.oldnumeric.ma.d2->filled(b)
A:numpy.oldnumeric.ma.t->numpy.core.umath.maximum.reduce(filled(target, maximum_fill_value(target)), axis)
A:numpy.oldnumeric.ma.d->filled(x, fill_value)
A:numpy.oldnumeric.ma.sqrt->masked_unary_operation(umath.sqrt, 0.0, domain_greater_equal(0.0))
A:numpy.oldnumeric.ma.log->masked_unary_operation(umath.log, 1.0, domain_greater(0.0))
A:numpy.oldnumeric.ma.log10->masked_unary_operation(umath.log10, 1.0, domain_greater(0.0))
A:numpy.oldnumeric.ma.exp->masked_unary_operation(umath.exp)
A:numpy.oldnumeric.ma.conjugate->masked_unary_operation(umath.conjugate)
A:numpy.oldnumeric.ma.sin->masked_unary_operation(umath.sin)
A:numpy.oldnumeric.ma.cos->masked_unary_operation(umath.cos)
A:numpy.oldnumeric.ma.tan->masked_unary_operation(umath.tan, 0.0, domain_tan(1e-35))
A:numpy.oldnumeric.ma.arcsin->masked_unary_operation(umath.arcsin, 0.0, domain_check_interval(-1.0, 1.0))
A:numpy.oldnumeric.ma.arccos->masked_unary_operation(umath.arccos, 0.0, domain_check_interval(-1.0, 1.0))
A:numpy.oldnumeric.ma.arctan->masked_unary_operation(umath.arctan)
A:numpy.oldnumeric.ma.arcsinh->masked_unary_operation(umath.arcsinh)
A:numpy.oldnumeric.ma.arccosh->masked_unary_operation(umath.arccosh, 1.0, domain_greater_equal(1.0))
A:numpy.oldnumeric.ma.arctanh->masked_unary_operation(umath.arctanh, 0.0, domain_check_interval(-1.0 + 1e-15, 1.0 - 1e-15))
A:numpy.oldnumeric.ma.sinh->masked_unary_operation(umath.sinh)
A:numpy.oldnumeric.ma.cosh->masked_unary_operation(umath.cosh)
A:numpy.oldnumeric.ma.tanh->masked_unary_operation(umath.tanh)
A:numpy.oldnumeric.ma.absolute->masked_unary_operation(umath.absolute)
A:numpy.oldnumeric.ma.fabs->masked_unary_operation(umath.fabs)
A:numpy.oldnumeric.ma.negative->masked_unary_operation(umath.negative)
A:numpy.oldnumeric.ma.around->masked_unary_operation(fromnumeric.round_)
A:numpy.oldnumeric.ma.floor->masked_unary_operation(umath.floor)
A:numpy.oldnumeric.ma.ceil->masked_unary_operation(umath.ceil)
A:numpy.oldnumeric.ma.logical_not->masked_unary_operation(umath.logical_not)
A:numpy.oldnumeric.ma.add->masked_binary_operation(umath.add)
A:numpy.oldnumeric.ma.subtract->masked_binary_operation(umath.subtract)
A:numpy.oldnumeric.ma.multiply->masked_binary_operation(umath.multiply, 1, 1)
A:numpy.oldnumeric.ma.divide->domained_binary_operation(umath.divide, domain_safe_divide(), 0, 1)
A:numpy.oldnumeric.ma.true_divide->domained_binary_operation(umath.true_divide, domain_safe_divide(), 0, 1)
A:numpy.oldnumeric.ma.floor_divide->domained_binary_operation(umath.floor_divide, domain_safe_divide(), 0, 1)
A:numpy.oldnumeric.ma.remainder->domained_binary_operation(umath.remainder, domain_safe_divide(), 0, 1)
A:numpy.oldnumeric.ma.fmod->domained_binary_operation(umath.fmod, domain_safe_divide(), 0, 1)
A:numpy.oldnumeric.ma.hypot->masked_binary_operation(umath.hypot)
A:numpy.oldnumeric.ma.arctan2->masked_binary_operation(umath.arctan2, 0.0, 1.0)
A:numpy.oldnumeric.ma.equal->masked_binary_operation(umath.equal)
A:numpy.oldnumeric.ma.not_equal->masked_binary_operation(umath.not_equal)
A:numpy.oldnumeric.ma.less_equal->masked_binary_operation(umath.less_equal)
A:numpy.oldnumeric.ma.greater_equal->masked_binary_operation(umath.greater_equal)
A:numpy.oldnumeric.ma.less->masked_binary_operation(umath.less)
A:numpy.oldnumeric.ma.greater->masked_binary_operation(umath.greater)
A:numpy.oldnumeric.ma.logical_and->masked_binary_operation(umath.logical_and)
A:numpy.oldnumeric.ma.logical_or->masked_binary_operation(umath.logical_or)
A:numpy.oldnumeric.ma.logical_xor->masked_binary_operation(umath.logical_xor)
A:numpy.oldnumeric.ma.bitwise_and->masked_binary_operation(umath.bitwise_and)
A:numpy.oldnumeric.ma.bitwise_or->masked_binary_operation(umath.bitwise_or)
A:numpy.oldnumeric.ma.bitwise_xor->masked_binary_operation(umath.bitwise_xor)
A:numpy.oldnumeric.ma.tc->numpy.core.numeric.dtype(dtype)
A:numpy.oldnumeric.ma.c->filled(condition, 0)
A:numpy.oldnumeric.ma.self._data->numpy.core.fromnumeric.resize(self._data, self._mask.shape)
A:numpy.oldnumeric.ma.self._mask->make_mask(self._mask, copy=1, flag=0)
A:numpy.oldnumeric.ma.nm->size(self._mask)
A:numpy.oldnumeric.ma.nd->size(self._data)
A:numpy.oldnumeric.ma.fills->ufunc_fills.get(func)
A:numpy.oldnumeric.ma.y->filled(b)
A:numpy.oldnumeric.ma.self->self.astype(object).astype(object)
A:numpy.oldnumeric.ma.f->f.astype(t).astype(t)
A:numpy.oldnumeric.ma.res->self.astype(object).astype(object).filled(f)
A:numpy.oldnumeric.ma.n->masked_binary_operation(umath.add).reduce(a * w, axis)
A:numpy.oldnumeric.ma.value->numpy.core.numeric.array(value, dtype=object)
A:numpy.oldnumeric.ma.mo->getmask(other)
A:numpy.oldnumeric.ma.dm->numpy.core.numeric.concatenate(dm, axis)
A:numpy.oldnumeric.ma.ls->len(s)
A:numpy.oldnumeric.ma.w->eval('w[' + repr(tuple(r)) + '] * masked_array(ones(ash, float), mask)')
A:numpy.oldnumeric.ma.n1->size(m, axis)
A:numpy.oldnumeric.ma.n2->sum(m.astype(int), axis)
A:numpy.oldnumeric.ma.iota->numpy.core.numeric.arange(self.size)
A:numpy.oldnumeric.ma.ind->filled(indices)
A:numpy.oldnumeric.ma.d[ind]->filled(values).astype(d.dtype)
A:numpy.oldnumeric.ma.d[self._mask]->filled(values).astype(d.dtype)
A:numpy.oldnumeric.ma.data->property(fget=raw_data, doc='The data, but values at masked locations are meaningless.')
A:numpy.oldnumeric.ma.mask->property(fget=raw_mask, doc='The mask, may be nomask. Values where mask true are meaningless.')
A:numpy.oldnumeric.ma.v->filled(values)
A:numpy.oldnumeric.ma.ndim->property(_get_ndim, doc=numeric.ndarray.ndim.__doc__)
A:numpy.oldnumeric.ma.size->property(fget=_get_size, doc='Number of elements in the array.')
A:numpy.oldnumeric.ma.dtype->property(fget=_get_dtype, doc='type of the array elements.')
A:numpy.oldnumeric.ma.shape->property(_get_shape, _set_shape, doc='tuple giving the shape of the array')
A:numpy.oldnumeric.ma.flat->property(_get_flat, _set_flat, doc='Access array in flat form.')
A:numpy.oldnumeric.ma.real->property(_get_real, _set_real, doc='Access the real part of the array')
A:numpy.oldnumeric.ma.imaginary->property(_get_imaginary, _set_imaginary, doc='Access the imaginary part of the array')
A:numpy.oldnumeric.ma.ctypes->property(_get_ctypes, None, doc='ctypes')
A:numpy.oldnumeric.ma.T->property(_get_T, None, doc='get transpose')
A:numpy.oldnumeric.ma.x->filled(a)
A:numpy.oldnumeric.ma.af->filled(a)
A:numpy.oldnumeric.ma.repeats->tuple([repeats] * num)
A:numpy.oldnumeric.ma.a->self.astype(object).astype(object).swapaxes(axis, 0)
A:numpy.oldnumeric.ma.fa->filled(a, 0).ravel()
A:numpy.oldnumeric.ma.fb->filled(b, 0).ravel()
A:numpy.oldnumeric.ma.md->numpy.core.numeric.choose(fc, (ym, xm))
A:numpy.oldnumeric.ma.target->ravel(target)
A:numpy.oldnumeric.ma.r[axis]->slice(None, None, 1)
A:numpy.oldnumeric.ma.fc->filled(not_equal(condition, 0), 0)
A:numpy.oldnumeric.ma.xv->filled(x)
A:numpy.oldnumeric.ma.xm->getmask(x)
A:numpy.oldnumeric.ma.yv->filled(y)
A:numpy.oldnumeric.ma.ym->getmask(y)
A:numpy.oldnumeric.ma.cm->filled(condition, 1)
A:numpy.oldnumeric.ma.ac->self.astype(object).astype(object).swapaxes(axis, 0).compressed()
A:numpy.oldnumeric.ma.minimum->_minimum_operation()
A:numpy.oldnumeric.ma.maximum->_maximum_operation()
A:numpy.oldnumeric.ma.fill_value->default_fill_value(x)
A:numpy.oldnumeric.ma.s->numpy.core.fromnumeric.sort(d, axis)
A:numpy.oldnumeric.ma.array.all->_m(alltrue)
A:numpy.oldnumeric.ma.array.any->_m(sometrue)
A:numpy.oldnumeric.ma.array.argmax->_m(argmax)
A:numpy.oldnumeric.ma.array.argmin->_m(argmin)
A:numpy.oldnumeric.ma.array.argsort->_m(argsort)
A:numpy.oldnumeric.ma.array.base->property(_m(not_implemented))
A:numpy.oldnumeric.ma.array.byteswap->_m(not_implemented)
A:numpy.oldnumeric.ma.array.choose->_m(_choose)
A:numpy.oldnumeric.ma.array.clip->_m(_clip)
A:numpy.oldnumeric.ma.array.compress->_m(_compress)
A:numpy.oldnumeric.ma.array.conjarray.conjugate->_m(conjugate)
A:numpy.oldnumeric.ma.array.copy->_m(not_implemented)
A:numpy.oldnumeric.ma.array.cumprod->_m(_cumprod)
A:numpy.oldnumeric.ma.array.cumsum->_m(_cumsum)
A:numpy.oldnumeric.ma.array.diagonal->_m(diagonal)
A:numpy.oldnumeric.ma.array.dump->_m(not_implemented)
A:numpy.oldnumeric.ma.array.dumps->_m(not_implemented)
A:numpy.oldnumeric.ma.array.fill->_m(not_implemented)
A:numpy.oldnumeric.ma.array.flags->property(_m(not_implemented))
A:numpy.oldnumeric.ma.array.flatten->_m(ravel)
A:numpy.oldnumeric.ma.array.getfield->_m(not_implemented)
A:numpy.oldnumeric.ma.array.max->_m(_max)
A:numpy.oldnumeric.ma.array.min->_m(_min)
A:numpy.oldnumeric.ma.array.mean->_m(new_average)
A:numpy.oldnumeric.ma.array.nbytes->property(_m(not_implemented))
A:numpy.oldnumeric.ma.array.newbyteorder->_m(not_implemented)
A:numpy.oldnumeric.ma.array.nonzero->_m(nonzero)
A:numpy.oldnumeric.ma.array.prod->_m(product)
A:numpy.oldnumeric.ma.array.ptp->_m(_ptp)
A:numpy.oldnumeric.ma.array.repeat->_m(new_repeat)
A:numpy.oldnumeric.ma.array.resize->_m(resize)
A:numpy.oldnumeric.ma.array.searchsorted->_m(not_implemented)
A:numpy.oldnumeric.ma.array.setfield->_m(not_implemented)
A:numpy.oldnumeric.ma.array.setflags->_m(not_implemented)
A:numpy.oldnumeric.ma.array.sort->_m(not_implemented)
A:numpy.oldnumeric.ma.array.squeeze->_m(_squeeze)
A:numpy.oldnumeric.ma.array.strides->property(_m(not_implemented))
A:numpy.oldnumeric.ma.array.sum->_m(sum)
A:numpy.oldnumeric.ma.array.swapaxes->_m(_swapaxes)
A:numpy.oldnumeric.ma.array.take->_m(new_take)
A:numpy.oldnumeric.ma.array.tofile->_m(not_implemented)
A:numpy.oldnumeric.ma.array.trace->_m(trace)
A:numpy.oldnumeric.ma.array.transpose->_m(transpose)
A:numpy.oldnumeric.ma.array.var->_m(_var)
A:numpy.oldnumeric.ma.array.std->_m(_std)
A:numpy.oldnumeric.ma.array.view->_m(not_implemented)
A:numpy.oldnumeric.ma.array.round->_m(around)
A:numpy.oldnumeric.ma.masked->MaskedArray(0, int, mask=1)
numpy.oldnumeric.ma.MAError(self,args=None)
numpy.oldnumeric.ma.MAError.__init__(self,args=None)
numpy.oldnumeric.ma.MAError.__str__(self)
numpy.oldnumeric.ma.MaskedArray(self,data,dtype=None,copy=True,order=False,mask=nomask,fill_value=None)
numpy.oldnumeric.ma.MaskedArray.__abs__(self)
numpy.oldnumeric.ma.MaskedArray.__add__(self,other)
numpy.oldnumeric.ma.MaskedArray.__and__(self,other)
numpy.oldnumeric.ma.MaskedArray.__array__(self,t=None,context=None)
numpy.oldnumeric.ma.MaskedArray.__array_wrap__(self,array,context=None)
numpy.oldnumeric.ma.MaskedArray.__bool__(self)
numpy.oldnumeric.ma.MaskedArray.__div__(self,other)
numpy.oldnumeric.ma.MaskedArray.__eq__(self,other)
numpy.oldnumeric.ma.MaskedArray.__float__(self)
numpy.oldnumeric.ma.MaskedArray.__floordiv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__ge__(self,other)
numpy.oldnumeric.ma.MaskedArray.__getitem__(self,i)
numpy.oldnumeric.ma.MaskedArray.__gt__(self,other)
numpy.oldnumeric.ma.MaskedArray.__iadd__(self,other)
numpy.oldnumeric.ma.MaskedArray.__idiv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__imul__(self,other)
numpy.oldnumeric.ma.MaskedArray.__init__(self,data,dtype=None,copy=True,order=False,mask=nomask,fill_value=None)
numpy.oldnumeric.ma.MaskedArray.__int__(self)
numpy.oldnumeric.ma.MaskedArray.__isub__(self,other)
numpy.oldnumeric.ma.MaskedArray.__le__(self,other)
numpy.oldnumeric.ma.MaskedArray.__len__(self)
numpy.oldnumeric.ma.MaskedArray.__lshift__(self,n)
numpy.oldnumeric.ma.MaskedArray.__lt__(self,other)
numpy.oldnumeric.ma.MaskedArray.__mod__(self,other)
numpy.oldnumeric.ma.MaskedArray.__mul__(self,other)
numpy.oldnumeric.ma.MaskedArray.__ne__(self,other)
numpy.oldnumeric.ma.MaskedArray.__neg__(self)
numpy.oldnumeric.ma.MaskedArray.__nonzero__(self)
numpy.oldnumeric.ma.MaskedArray.__or__(self,other)
numpy.oldnumeric.ma.MaskedArray.__pos__(self)
numpy.oldnumeric.ma.MaskedArray.__pow__(self,other,third=None)
numpy.oldnumeric.ma.MaskedArray.__rdiv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__repr__(self)
numpy.oldnumeric.ma.MaskedArray.__rfloordiv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__rmod__(self,other)
numpy.oldnumeric.ma.MaskedArray.__rshift__(self,n)
numpy.oldnumeric.ma.MaskedArray.__rsub__(self,other)
numpy.oldnumeric.ma.MaskedArray.__rtruediv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__setitem__(self,index,value)
numpy.oldnumeric.ma.MaskedArray.__sqrt__(self)
numpy.oldnumeric.ma.MaskedArray.__str__(self)
numpy.oldnumeric.ma.MaskedArray.__sub__(self,other)
numpy.oldnumeric.ma.MaskedArray.__truediv__(self,other)
numpy.oldnumeric.ma.MaskedArray.__xor__(self,other)
numpy.oldnumeric.ma.MaskedArray._get_T(self)
numpy.oldnumeric.ma.MaskedArray._get_ctypes(self)
numpy.oldnumeric.ma.MaskedArray._get_dtype(self)
numpy.oldnumeric.ma.MaskedArray._get_flat(self)
numpy.oldnumeric.ma.MaskedArray._get_imaginary(self)
numpy.oldnumeric.ma.MaskedArray._get_ndim(self)
numpy.oldnumeric.ma.MaskedArray._get_real(self)
numpy.oldnumeric.ma.MaskedArray._get_shape(self)
numpy.oldnumeric.ma.MaskedArray._get_size(self)
numpy.oldnumeric.ma.MaskedArray._set_flat(self,value)
numpy.oldnumeric.ma.MaskedArray._set_imaginary(self,value)
numpy.oldnumeric.ma.MaskedArray._set_real(self,value)
numpy.oldnumeric.ma.MaskedArray._set_shape(self,newshape)
numpy.oldnumeric.ma.MaskedArray.astype(self,tc)
numpy.oldnumeric.ma.MaskedArray.byte_swapped(self)
numpy.oldnumeric.ma.MaskedArray.compressed(self)
numpy.oldnumeric.ma.MaskedArray.count(self,axis=None)
numpy.oldnumeric.ma.MaskedArray.dot(self,other)
numpy.oldnumeric.ma.MaskedArray.fill_value(self)
numpy.oldnumeric.ma.MaskedArray.filled(self,fill_value=None)
numpy.oldnumeric.ma.MaskedArray.ids(self)
numpy.oldnumeric.ma.MaskedArray.iscontiguous(self)
numpy.oldnumeric.ma.MaskedArray.item(self,*args)
numpy.oldnumeric.ma.MaskedArray.itemset(self,*args)
numpy.oldnumeric.ma.MaskedArray.itemsize(self)
numpy.oldnumeric.ma.MaskedArray.outer(self,other)
numpy.oldnumeric.ma.MaskedArray.put(self,values)
numpy.oldnumeric.ma.MaskedArray.putmask(self,values)
numpy.oldnumeric.ma.MaskedArray.ravel(self)
numpy.oldnumeric.ma.MaskedArray.raw_data(self)
numpy.oldnumeric.ma.MaskedArray.raw_mask(self)
numpy.oldnumeric.ma.MaskedArray.reshape(self,*s)
numpy.oldnumeric.ma.MaskedArray.set_fill_value(self,v=None)
numpy.oldnumeric.ma.MaskedArray.tolist(self,fill_value=None)
numpy.oldnumeric.ma.MaskedArray.tostring(self,fill_value=None)
numpy.oldnumeric.ma.MaskedArray.unmask(self)
numpy.oldnumeric.ma.MaskedArray.unshare_mask(self)
numpy.oldnumeric.ma._MaskedPrintOption(self,display)
numpy.oldnumeric.ma._MaskedPrintOption.__init__(self,display)
numpy.oldnumeric.ma._MaskedPrintOption.__str__(self)
numpy.oldnumeric.ma._MaskedPrintOption.display(self)
numpy.oldnumeric.ma._MaskedPrintOption.enable(self,flag=1)
numpy.oldnumeric.ma._MaskedPrintOption.enabled(self)
numpy.oldnumeric.ma._MaskedPrintOption.set_display(self,s)
numpy.oldnumeric.ma._choose(self,*args,**kwds)
numpy.oldnumeric.ma._clip(self,a_min,a_max,out=None)
numpy.oldnumeric.ma._compress(self,cond,axis=None,out=None)
numpy.oldnumeric.ma._cumprod(self,axis=None,dtype=None,out=None)
numpy.oldnumeric.ma._cumsum(self,axis=None,dtype=None,out=None)
numpy.oldnumeric.ma._m(f)
numpy.oldnumeric.ma._max(a,axis=None,out=None)
numpy.oldnumeric.ma._maximum_operation(self)
numpy.oldnumeric.ma._maximum_operation.__init__(self)
numpy.oldnumeric.ma._maximum_operation.outer(self,a,b)
numpy.oldnumeric.ma._maximum_operation.reduce(self,target,axis=0)
numpy.oldnumeric.ma._min(a,axis=None,out=None)
numpy.oldnumeric.ma._minimum_operation(self)
numpy.oldnumeric.ma._minimum_operation.__init__(self)
numpy.oldnumeric.ma._minimum_operation.outer(self,a,b)
numpy.oldnumeric.ma._minimum_operation.reduce(self,target,axis=0)
numpy.oldnumeric.ma._ptp(a,axis=None,out=None)
numpy.oldnumeric.ma._squeeze(self)
numpy.oldnumeric.ma._std(self,axis=None,dtype=None,out=None)
numpy.oldnumeric.ma._swapaxes(self,axis1,axis2)
numpy.oldnumeric.ma._var(self,axis=None,dtype=None,out=None)
numpy.oldnumeric.ma.allclose(a,b,fill_value=1,rtol=1e-05,atol=1e-08)
numpy.oldnumeric.ma.allequal(a,b,fill_value=1)
numpy.oldnumeric.ma.arange(start,stop=None,step=1,dtype=None)
numpy.oldnumeric.ma.argmax(x,axis=-1,out=None,fill_value=None)
numpy.oldnumeric.ma.argmin(x,axis=-1,out=None,fill_value=None)
numpy.oldnumeric.ma.argsort(x,axis=-1,out=None,fill_value=None)
numpy.oldnumeric.ma.asarray(data,dtype=None)
numpy.oldnumeric.ma.average(a,axis=0,weights=None,returned=0)
numpy.oldnumeric.ma.choose(indices,t,out=None,mode='raise')
numpy.oldnumeric.ma.common_fill_value(a,b)
numpy.oldnumeric.ma.compress(condition,x,dimension=-1,out=None)
numpy.oldnumeric.ma.concatenate(arrays,axis=0)
numpy.oldnumeric.ma.count(a,axis=None)
numpy.oldnumeric.ma.default_fill_value(obj)
numpy.oldnumeric.ma.diagonal(a,k=0,axis1=0,axis2=1)
numpy.oldnumeric.ma.domain_check_interval(self,y1,y2)
numpy.oldnumeric.ma.domain_check_interval.__init__(self,y1,y2)
numpy.oldnumeric.ma.domain_greater(self,critical_value)
numpy.oldnumeric.ma.domain_greater.__init__(self,critical_value)
numpy.oldnumeric.ma.domain_greater_equal(self,critical_value)
numpy.oldnumeric.ma.domain_greater_equal.__init__(self,critical_value)
numpy.oldnumeric.ma.domain_safe_divide(self,tolerance=divide_tolerance)
numpy.oldnumeric.ma.domain_safe_divide.__init__(self,tolerance=divide_tolerance)
numpy.oldnumeric.ma.domain_tan(self,eps)
numpy.oldnumeric.ma.domain_tan.__init__(self,eps)
numpy.oldnumeric.ma.domained_binary_operation(self,abfunc,domain,fillx=0,filly=0)
numpy.oldnumeric.ma.domained_binary_operation.__init__(self,abfunc,domain,fillx=0,filly=0)
numpy.oldnumeric.ma.domained_binary_operation.__str__(self)
numpy.oldnumeric.ma.dot(a,b)
numpy.oldnumeric.ma.filled(a,value=None)
numpy.oldnumeric.ma.fromfunction(f,s)
numpy.oldnumeric.ma.fromstring(s,t)
numpy.oldnumeric.ma.get_fill_value(a)
numpy.oldnumeric.ma.getmask(a)
numpy.oldnumeric.ma.getmaskarray(a)
numpy.oldnumeric.ma.identity(n)
numpy.oldnumeric.ma.indices(dimensions,dtype=None)
numpy.oldnumeric.ma.inner(a,b)
numpy.oldnumeric.ma.isMaskedArray(x)
numpy.oldnumeric.ma.is_mask(m)
numpy.oldnumeric.ma.left_shift(a,n)
numpy.oldnumeric.ma.make_mask(m,copy=0,flag=0)
numpy.oldnumeric.ma.make_mask_none(s)
numpy.oldnumeric.ma.mask_or(m1,m2)
numpy.oldnumeric.ma.masked_array(a,mask=nomask,fill_value=None)
numpy.oldnumeric.ma.masked_binary_operation(self,abfunc,fillx=0,filly=0)
numpy.oldnumeric.ma.masked_binary_operation.__init__(self,abfunc,fillx=0,filly=0)
numpy.oldnumeric.ma.masked_binary_operation.__str__(self)
numpy.oldnumeric.ma.masked_binary_operation.accumulate(self,target,axis=0)
numpy.oldnumeric.ma.masked_binary_operation.outer(self,a,b)
numpy.oldnumeric.ma.masked_binary_operation.reduce(self,target,axis=0,dtype=None)
numpy.oldnumeric.ma.masked_equal(x,value,copy=1)
numpy.oldnumeric.ma.masked_greater(x,value,copy=1)
numpy.oldnumeric.ma.masked_greater_equal(x,value,copy=1)
numpy.oldnumeric.ma.masked_inside(x,v1,v2,copy=1)
numpy.oldnumeric.ma.masked_less(x,value,copy=1)
numpy.oldnumeric.ma.masked_less_equal(x,value,copy=1)
numpy.oldnumeric.ma.masked_not_equal(x,value,copy=1)
numpy.oldnumeric.ma.masked_object(data,value,copy=1)
numpy.oldnumeric.ma.masked_outside(x,v1,v2,copy=1)
numpy.oldnumeric.ma.masked_unary_operation(self,aufunc,fill=0,domain=None)
numpy.oldnumeric.ma.masked_unary_operation.__init__(self,aufunc,fill=0,domain=None)
numpy.oldnumeric.ma.masked_unary_operation.__str__(self)
numpy.oldnumeric.ma.masked_values(data,value,rtol=1e-05,atol=1e-08,copy=1)
numpy.oldnumeric.ma.masked_where(condition,x,copy=1)
numpy.oldnumeric.ma.maximum_fill_value(obj)
numpy.oldnumeric.ma.minimum_fill_value(obj)
numpy.oldnumeric.ma.new_average(a,axis=None,weights=None,returned=0)
numpy.oldnumeric.ma.new_repeat(a,repeats,axis=None)
numpy.oldnumeric.ma.new_take(a,indices,axis=None,out=None,mode='raise')
numpy.oldnumeric.ma.nonzero(a)
numpy.oldnumeric.ma.not_implemented(*args,**kwds)
numpy.oldnumeric.ma.ones(shape,dtype=float)
numpy.oldnumeric.ma.outer(a,b)
numpy.oldnumeric.ma.power(a,b,third=None)
numpy.oldnumeric.ma.product(target,axis=None,dtype=None)
numpy.oldnumeric.ma.put(a,indices,values,mode='raise')
numpy.oldnumeric.ma.putmask(a,mask,values)
numpy.oldnumeric.ma.rank(object)
numpy.oldnumeric.ma.ravel(a)
numpy.oldnumeric.ma.repeat(a,repeats,axis=0)
numpy.oldnumeric.ma.reshape(a,*newshape)
numpy.oldnumeric.ma.resize(a,new_shape)
numpy.oldnumeric.ma.right_shift(a,n)
numpy.oldnumeric.ma.set_fill_value(a,fill_value)
numpy.oldnumeric.ma.shape(object)
numpy.oldnumeric.ma.size(object,axis=None)
numpy.oldnumeric.ma.sort(x,axis=-1,fill_value=None)
numpy.oldnumeric.ma.sum(target,axis=None,dtype=None)
numpy.oldnumeric.ma.swapaxes(a,axis1,axis2)
numpy.oldnumeric.ma.take(a,indices,axis=0)
numpy.oldnumeric.ma.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.oldnumeric.ma.transpose(a,axes=None)
numpy.oldnumeric.ma.where(condition,x,y)
numpy.oldnumeric.ma.zeros(shape,dtype=float)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/precision.py----------------------------------------
A:numpy.oldnumeric.precision.table[key]->_get_precisions(value)
A:numpy.oldnumeric.precision._code_table->_fill_table(typecodes)
A:numpy.oldnumeric.precision.UnsignedInt8->_lookup(_code_table, 'UnsignedInteger', 8)
A:numpy.oldnumeric.precision.UnsignedInt16->_lookup(_code_table, 'UnsignedInteger', 16)
A:numpy.oldnumeric.precision.UnsignedInt32->_lookup(_code_table, 'UnsignedInteger', 32)
A:numpy.oldnumeric.precision.UnsignedInt64->_lookup(_code_table, 'UnsignedInteger', 64)
A:numpy.oldnumeric.precision.UnsignedInt128->_lookup(_code_table, 'UnsignedInteger', 128)
A:numpy.oldnumeric.precision.Int0->_lookup(_code_table, 'Integer', 0)
A:numpy.oldnumeric.precision.Int8->_lookup(_code_table, 'Integer', 8)
A:numpy.oldnumeric.precision.Int16->_lookup(_code_table, 'Integer', 16)
A:numpy.oldnumeric.precision.Int32->_lookup(_code_table, 'Integer', 32)
A:numpy.oldnumeric.precision.Int64->_lookup(_code_table, 'Integer', 64)
A:numpy.oldnumeric.precision.Int128->_lookup(_code_table, 'Integer', 128)
A:numpy.oldnumeric.precision.Float0->_lookup(_code_table, 'Float', 0)
A:numpy.oldnumeric.precision.Float8->_lookup(_code_table, 'Float', 8)
A:numpy.oldnumeric.precision.Float16->_lookup(_code_table, 'Float', 16)
A:numpy.oldnumeric.precision.Float32->_lookup(_code_table, 'Float', 32)
A:numpy.oldnumeric.precision.Float64->_lookup(_code_table, 'Float', 64)
A:numpy.oldnumeric.precision.Float128->_lookup(_code_table, 'Float', 128)
A:numpy.oldnumeric.precision.Complex0->_lookup(_code_table, 'Complex', 0)
A:numpy.oldnumeric.precision.Complex8->_lookup(_code_table, 'Complex', 16)
A:numpy.oldnumeric.precision.Complex16->_lookup(_code_table, 'Complex', 32)
A:numpy.oldnumeric.precision.Complex32->_lookup(_code_table, 'Complex', 64)
A:numpy.oldnumeric.precision.Complex64->_lookup(_code_table, 'Complex', 128)
A:numpy.oldnumeric.precision.Complex128->_lookup(_code_table, 'Complex', 256)
numpy.oldnumeric.PrecisionError(Exception)
numpy.oldnumeric._fill_table(typecodes,table={})
numpy.oldnumeric._get_precisions(typecodes)
numpy.oldnumeric._lookup(table,key,required_bits)
numpy.oldnumeric.precision.PrecisionError(Exception)
numpy.oldnumeric.precision._fill_table(typecodes,table={})
numpy.oldnumeric.precision._get_precisions(typecodes)
numpy.oldnumeric.precision._lookup(table,key,required_bits)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/alter_code1.py----------------------------------------
A:numpy.oldnumeric.alter_code1.func_re[name]->re.compile(_astr, re.DOTALL)
A:numpy.oldnumeric.alter_code1.meth_re[char]->re.compile(_astr, re.DOTALL)
A:numpy.oldnumeric.alter_code1.fstr->open(afile).read()
A:numpy.oldnumeric.alter_code1.flatindex_re->re.compile('([.]flat(\\s*?[[=]))')
A:numpy.oldnumeric.alter_code1.Nlen->len(fromstr)
A:numpy.oldnumeric.alter_code1.Nlen2->len('from %s import ' % newname)
A:numpy.oldnumeric.alter_code1.found->open(afile).read().find(fromstr, ind)
A:numpy.oldnumeric.alter_code1.istest_re[name]->re.compile(_astr)
A:numpy.oldnumeric.alter_code1.astr->re.compile('(\\S+[.]savespace[(].*[)])').sub('pass  ## \\1', astr)
A:numpy.oldnumeric.alter_code1.tmpstr->tmpstr.replace('.flat', '.ravel()').replace('.flat', '.ravel()')
A:numpy.oldnumeric.alter_code1.svspc2->re.compile('([^,(\\s]+[.]spacesaver[(][)])')
A:numpy.oldnumeric.alter_code1.svspc3->re.compile('(\\S+[.]savespace[(].*[)])')
A:numpy.oldnumeric.alter_code1.filestr->open(afile).read()
A:numpy.oldnumeric.alter_code1.(filestr, fromall1)->changeimports(filestr, 'ArrayPrinter', 'numpy.oldnumeric.array_printer')
A:numpy.oldnumeric.alter_code1.(filestr, fromall2)->changeimports(filestr, 'numerix', 'numpy.oldnumeric')
A:numpy.oldnumeric.alter_code1.(filestr, fromall3)->changeimports(filestr, 'MA', 'numpy.oldnumeric.ma')
A:numpy.oldnumeric.alter_code1.today->datetime.date.today().strftime('%b %d, %Y')
A:numpy.oldnumeric.alter_code1.fid->open(afile)
A:numpy.oldnumeric.alter_code1.(filestr, changed)->fromstr(filestr)
A:numpy.oldnumeric.alter_code1.(base, ext)->os.path.splitext(afile)
A:numpy.oldnumeric.alter_code1.files->glob.glob(os.path.join(direc, '*'))
A:numpy.oldnumeric.alter_code1.header_re->re.compile('(Numeric/arrayobject.h)')
A:numpy.oldnumeric.alter_code1.(fstr, n)->re.compile('(Numeric/arrayobject.h)').subn('numpy/oldnumeric.h', fstr)
numpy.oldnumeric.alter_code1._func(arg,dirname,fnames)
numpy.oldnumeric.alter_code1.changeimports(fstr,name,newname)
numpy.oldnumeric.alter_code1.convertall(direc=os.path.curdir,orig=1)
numpy.oldnumeric.alter_code1.convertfile(filename,orig=1)
numpy.oldnumeric.alter_code1.convertsrc(direc=os.path.curdir,ext=None,orig=1)
numpy.oldnumeric.alter_code1.converttree(direc=os.path.curdir)
numpy.oldnumeric.alter_code1.fixistesting(astr)
numpy.oldnumeric.alter_code1.fixtypechars(fstr)
numpy.oldnumeric.alter_code1.fromargs(args)
numpy.oldnumeric.alter_code1.fromstr(filestr)
numpy.oldnumeric.alter_code1.makenewfile(name,filestr)
numpy.oldnumeric.alter_code1.replaceattr(astr)
numpy.oldnumeric.alter_code1.replaceother(astr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/misc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/typeconv.py----------------------------------------
A:numpy.oldnumeric.typeconv.oldtypecodes->_oldtypecodes()
numpy.oldnumeric.typeconv._oldtypecodes(dict)
numpy.oldnumeric.typeconv._oldtypecodes.__getitem__(self,obj)
numpy.oldnumeric.typeconv.convtypecode(typecode,dtype=None)
numpy.oldnumeric.typeconv.convtypecode2(typecode,dtype=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/array_printer.py----------------------------------------
numpy.oldnumeric.array_printer.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',array_output=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/setup.py----------------------------------------
A:numpy.oldnumeric.setup.config->Configuration('oldnumeric', parent_package, top_path)
numpy.oldnumeric.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/matrix.py----------------------------------------
A:numpy.oldnumeric.matrix._table[k]->chr(k)
A:numpy.oldnumeric.matrix._table->''.join(_table)
A:numpy.oldnumeric.matrix._todelete->''.join(_todelete)
A:numpy.oldnumeric.matrix.rows->data.split(';')
A:numpy.oldnumeric.matrix.trow->row.split(',')
A:numpy.oldnumeric.matrix.temp->col.split()
A:numpy.oldnumeric.matrix.Ncols->len(newrow)
A:numpy.oldnumeric.matrix.ostr->oct(num)
numpy.oldnumeric.matrix._binary(num)
numpy.oldnumeric.matrix._convert_from_string(data)
numpy.oldnumeric.matrix._eval(astr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/rng.py----------------------------------------
A:numpy.oldnumeric.rng.m->float(m)
A:numpy.oldnumeric.rng.s->float(s)
A:numpy.oldnumeric.rng.sn->math.log(1.0 + s * s / (m * m))
A:numpy.oldnumeric.rng.self._sn->math.sqrt(sn)
A:numpy.oldnumeric.rng.a->float(a)
A:numpy.oldnumeric.rng.b->float(b)
A:numpy.oldnumeric.rng.default_distribution->UniformDistribution(0.0, 1.0)
A:numpy.oldnumeric.rng.self._rng->numpy.random.mtrand.RandomState(seed)
A:numpy.oldnumeric.rng.standard_generator->CreateGenerator(-1)
numpy.oldnumeric.rng.CreateGenerator(self,seed,dist=None)
numpy.oldnumeric.rng.CreateGenerator.__init__(self,seed,dist=None)
numpy.oldnumeric.rng.CreateGenerator.ranf(self)
numpy.oldnumeric.rng.CreateGenerator.sample(self,n)
numpy.oldnumeric.rng.Distribution(self,meth,*args)
numpy.oldnumeric.rng.Distribution.__init__(self,meth,*args)
numpy.oldnumeric.rng.Distribution._onesample(self,rng)
numpy.oldnumeric.rng.Distribution._sample(self,rng,n)
numpy.oldnumeric.rng.Distribution.density(self,x)
numpy.oldnumeric.rng.ExponentialDistribution(self,lambda_)
numpy.oldnumeric.rng.ExponentialDistribution.__init__(self,lambda_)
numpy.oldnumeric.rng.ExponentialDistribution.density(x)
numpy.oldnumeric.rng.LogNormalDistribution(self,m,s)
numpy.oldnumeric.rng.LogNormalDistribution.__init__(self,m,s)
numpy.oldnumeric.rng.LogNormalDistribution.density(x)
numpy.oldnumeric.rng.NormalDistribution(self,m,s)
numpy.oldnumeric.rng.NormalDistribution.__init__(self,m,s)
numpy.oldnumeric.rng.NormalDistribution.density(x)
numpy.oldnumeric.rng.UniformDistribution(self,a,b)
numpy.oldnumeric.rng.UniformDistribution.__init__(self,a,b)
numpy.oldnumeric.rng.UniformDistribution.density(x)
numpy.oldnumeric.rng.error(Exception)
numpy.oldnumeric.rng.random_sample(*n)
numpy.oldnumeric.rng.ranf()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/linear_algebra.py----------------------------------------
A:numpy.oldnumeric.linear_algebra.(w, v)->numpy.linalg.eigh(A)
numpy.oldnumeric.linear_algebra.Heigenvalues(a,UPLO='L')
numpy.oldnumeric.linear_algebra.Heigenvectors(A)
numpy.oldnumeric.linear_algebra.cholesky_decomposition(a)
numpy.oldnumeric.linear_algebra.determinant(a)
numpy.oldnumeric.linear_algebra.eigenvalues(a)
numpy.oldnumeric.linear_algebra.eigenvectors(A)
numpy.oldnumeric.linear_algebra.generalized_inverse(a,rcond=1e-10)
numpy.oldnumeric.linear_algebra.inverse(a)
numpy.oldnumeric.linear_algebra.linear_least_squares(a,b,rcond=1e-10)
numpy.oldnumeric.linear_algebra.singular_value_decomposition(A,full_matrices=0)
numpy.oldnumeric.linear_algebra.solve_linear_equations(a,b)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/compat.py----------------------------------------
A:numpy.oldnumeric.compat.UFuncType->type(um.sin)
A:numpy.oldnumeric.compat.UfuncType->type(um.sin)
A:numpy.oldnumeric.compat.arrayrange->deprecate(functions.arange, 'arrayrange', 'arange')
A:numpy.oldnumeric.compat.matrixmultiply->deprecate(mu.dot, 'matrixmultiply', 'dot')
A:numpy.oldnumeric.compat.x->mu.fromstring(thestr, typecode)
A:numpy.oldnumeric.compat.arr->pickle.loads(astr.replace('Numeric', 'numpy.oldnumeric'))
A:numpy.oldnumeric.compat.ln->fp.readline().split()
A:numpy.oldnumeric.compat.itemsize->int(ln[0][2:])
A:numpy.oldnumeric.compat.dstr->fp.read(sz)
A:numpy.oldnumeric.compat.m->mu.fromstring(dstr, typeconv.convtypecode(typecode))
A:numpy.oldnumeric.compat.dispatch->copy.copy(pickle.Unpickler.dispatch)
numpy.oldnumeric.DumpArray(m,fp)
numpy.oldnumeric.LoadArray(fp)
numpy.oldnumeric.Pickler(self,*args,**kwds)
numpy.oldnumeric.Pickler.save_array(self,object)
numpy.oldnumeric._LoadArray(fp)
numpy.oldnumeric.array_constructor(shape,typecode,thestr,Endian=LittleEndian)
numpy.oldnumeric.compat.DumpArray(m,fp)
numpy.oldnumeric.compat.LoadArray(fp)
numpy.oldnumeric.compat.Pickler(self,*args,**kwds)
numpy.oldnumeric.compat.Pickler.__init__(self,*args,**kwds)
numpy.oldnumeric.compat.Pickler.save_array(self,object)
numpy.oldnumeric.compat._LoadArray(fp)
numpy.oldnumeric.compat.array_constructor(shape,typecode,thestr,Endian=LittleEndian)
numpy.oldnumeric.compat.load(fp)
numpy.oldnumeric.compat.loads(astr)
numpy.oldnumeric.compat.pickle_array(a)
numpy.oldnumeric.load(fp)
numpy.oldnumeric.loads(astr)
numpy.oldnumeric.pickle_array(a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/__init__.py----------------------------------------
A:numpy.oldnumeric.__init__.n->len(a.shape)
numpy.oldnumeric.__init__._move_axis_to_0(a,axis)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/fft.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/alter_code2.py----------------------------------------
A:numpy.oldnumeric.alter_code2.astr->astr.replace('NewAxis', 'newaxis').replace('NewAxis', 'newaxis')
A:numpy.oldnumeric.alter_code2.fstr->fstr.replace(importstr, 'import %s as %s' % (newname, name)).replace(importstr, 'import %s as %s' % (newname, name))
A:numpy.oldnumeric.alter_code2.Nlen->len(fromstr)
A:numpy.oldnumeric.alter_code2.Nlen2->len('from %s import ' % newname)
A:numpy.oldnumeric.alter_code2.found->fstr.replace(importstr, 'import %s as %s' % (newname, name)).replace(importstr, 'import %s as %s' % (newname, name)).find(fromstr, ind)
A:numpy.oldnumeric.alter_code2.(filestr, fromall1)->changeimports(filestr, 'numpy.core.umath', 'numpy')
A:numpy.oldnumeric.alter_code2.(filestr, fromall3)->changeimports(filestr, 'MA', 'numpy.core.ma')
A:numpy.oldnumeric.alter_code2.filestr->fromstr(filestr)
A:numpy.oldnumeric.alter_code2.today->datetime.date.today().strftime('%b %d, %Y')
A:numpy.oldnumeric.alter_code2.fid->file(name)
A:numpy.oldnumeric.alter_code2.(base, ext)->os.path.splitext(name)
A:numpy.oldnumeric.alter_code2.files->glob.glob(os.path.join(direc, '*.py'))
numpy.oldnumeric.alter_code2._func(arg,dirname,fnames)
numpy.oldnumeric.alter_code2.changeimports(fstr,name,newname)
numpy.oldnumeric.alter_code2.convertall(direc=os.path.curdir)
numpy.oldnumeric.alter_code2.convertfile(filename)
numpy.oldnumeric.alter_code2.converttree(direc=os.path.curdir)
numpy.oldnumeric.alter_code2.fromargs(args)
numpy.oldnumeric.alter_code2.fromstr(filestr)
numpy.oldnumeric.alter_code2.getandcopy(name)
numpy.oldnumeric.alter_code2.makenewfile(name,filestr)
numpy.oldnumeric.alter_code2.replaceattr(astr)
numpy.oldnumeric.alter_code2.replaceother(astr)
numpy.oldnumeric.alter_code2.replacetypechars(astr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/tests/test_regression.py----------------------------------------
numpy.oldnumeric.tests.test_regression.TestRegression(TestCase)
numpy.oldnumeric.tests.test_regression.TestRegression.test_mlab_import(self)
numpy.oldnumeric.tests.test_regression.TestRegression.test_numeric_random(self,level=rlevel)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/oldnumeric/tests/test_oldnumeric.py----------------------------------------
A:numpy.oldnumeric.tests.test_oldnumeric.a1->array([0, 1, 0], UInt64)
A:numpy.oldnumeric.tests.test_oldnumeric.a2->array([0, 1, 0], UnsignedInt64)
A:numpy.oldnumeric.tests.test_oldnumeric.a3->array([0, 1, 0], uint64)
numpy.oldnumeric.tests.test_oldnumeric.test_oldtypes(unittest.TestCase)
numpy.oldnumeric.tests.test_oldnumeric.test_oldtypes.test_oldtypes(self,level=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/compat/py3k.py----------------------------------------
numpy.compat.asbytes_nested(x)
numpy.compat.asunicode_nested(x)
numpy.compat.getexception()
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.getexception()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/compat/_inspect.py----------------------------------------
A:numpy.compat._inspect.args->list(names[:nargs])
A:numpy.compat._inspect.op->ord(code[step])
A:numpy.compat._inspect.size->count.pop()
A:numpy.compat._inspect.(args, varargs, varkw)->getargs(frame.f_code)
A:numpy.compat._inspect.spec->strseq(args[i], formatarg, join)
numpy.compat._inspect.formatargspec(args,varargs=None,varkw=None,defaults=None,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat._inspect.formatargvalues(args,varargs,varkw,locals,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object,convert,join=joinseq)
numpy.compat.formatargspec(args,varargs=None,varkw=None,defaults=None,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat.getargspec(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/compat/setup.py----------------------------------------
A:numpy.compat.setup.config->Configuration('compat', parent_package, top_path)
numpy.compat.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/compat/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/defmatrix.py----------------------------------------
A:numpy.matrixlib.defmatrix._table->''.join(_table)
A:numpy.matrixlib.defmatrix.str_->astr.translate(_table, _todelete)
A:numpy.matrixlib.defmatrix._table[k]->chr(k)
A:numpy.matrixlib.defmatrix._todelete->''.join(_todelete)
A:numpy.matrixlib.defmatrix.rows->str.split(';')
A:numpy.matrixlib.defmatrix.trow->row.split(',')
A:numpy.matrixlib.defmatrix.temp->col.strip().split()
A:numpy.matrixlib.defmatrix.Ncols->len(newrow)
A:numpy.matrixlib.defmatrix.M->inv(M)
A:numpy.matrixlib.defmatrix.M[:]->identity(M.shape[0])
A:numpy.matrixlib.defmatrix.result->numpy.core.numeric.dot(result, Z)
A:numpy.matrixlib.defmatrix.beta->binary_repr(n)
A:numpy.matrixlib.defmatrix.Z->numpy.core.numeric.dot(Z, Z)
A:numpy.matrixlib.defmatrix.intype->numpy.core.numeric.dtype(dtype)
A:numpy.matrixlib.defmatrix.new->_convert_from_string(data).view(subtype)
A:numpy.matrixlib.defmatrix.data->_convert_from_string(data)
A:numpy.matrixlib.defmatrix.arr->arr.copy().copy()
A:numpy.matrixlib.defmatrix.ret->numpy.core.numeric.ndarray.__new__(subtype, shape, arr.dtype, buffer=arr, order=order)
A:numpy.matrixlib.defmatrix.newshape->tuple([x for x in self.shape if x > 1])
A:numpy.matrixlib.defmatrix.ndim->len(newshape)
A:numpy.matrixlib.defmatrix.out->numpy.core.numeric.ndarray.__getitem__(self, index)
A:numpy.matrixlib.defmatrix.n->len(index)
A:numpy.matrixlib.defmatrix.s->repr(self.__array__()).replace('array', 'matrix')
A:numpy.matrixlib.defmatrix.l->repr(self.__array__()).replace('array', 'matrix').splitlines()
A:numpy.matrixlib.defmatrix.T->property(getT, None, doc='transpose')
A:numpy.matrixlib.defmatrix.A->property(getA, None, doc='base array')
A:numpy.matrixlib.defmatrix.A1->property(getA1, None, doc='1-d base array')
A:numpy.matrixlib.defmatrix.H->property(getH, None, doc='hermitian (conjugate) transpose')
A:numpy.matrixlib.defmatrix.I->property(getI, None, doc='inverse')
A:numpy.matrixlib.defmatrix.col->col.strip().strip()
numpy.asmatrix(data,dtype=None)
numpy.bmat(obj,ldict=None,gdict=None)
numpy.matrix(subtype,data,dtype=None,copy=True)
numpy.matrix.__array_finalize__(self,obj)
numpy.matrix.__getitem__(self,index)
numpy.matrix.__imul__(self,other)
numpy.matrix.__ipow__(self,other)
numpy.matrix.__mul__(self,other)
numpy.matrix.__pow__(self,other)
numpy.matrix.__repr__(self)
numpy.matrix.__rmul__(self,other)
numpy.matrix.__rpow__(self,other)
numpy.matrix._align(self,axis)
numpy.matrix._collapse(self,axis)
numpy.matrix.all(self,axis=None,out=None)
numpy.matrix.any(self,axis=None,out=None)
numpy.matrix.argmax(self,axis=None,out=None)
numpy.matrix.argmin(self,axis=None,out=None)
numpy.matrix.getA(self)
numpy.matrix.getA1(self)
numpy.matrix.getH(self)
numpy.matrix.getI(self)
numpy.matrix.getT(self)
numpy.matrix.max(self,axis=None,out=None)
numpy.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrix.min(self,axis=None,out=None)
numpy.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrix.ptp(self,axis=None,out=None)
numpy.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrix.tolist(self)
numpy.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrix_power(M,n)
numpy.matrixlib._convert_from_string(data)
numpy.matrixlib._from_string(str,gdict,ldict)
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._from_string(str,gdict,ldict)
numpy.matrixlib.defmatrix.asmatrix(data,dtype=None)
numpy.matrixlib.defmatrix.bmat(obj,ldict=None,gdict=None)
numpy.matrixlib.defmatrix.matrix(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.__array_finalize__(self,obj)
numpy.matrixlib.defmatrix.matrix.__getitem__(self,index)
numpy.matrixlib.defmatrix.matrix.__imul__(self,other)
numpy.matrixlib.defmatrix.matrix.__ipow__(self,other)
numpy.matrixlib.defmatrix.matrix.__mul__(self,other)
numpy.matrixlib.defmatrix.matrix.__new__(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.__pow__(self,other)
numpy.matrixlib.defmatrix.matrix.__repr__(self)
numpy.matrixlib.defmatrix.matrix.__rmul__(self,other)
numpy.matrixlib.defmatrix.matrix.__rpow__(self,other)
numpy.matrixlib.defmatrix.matrix.__str__(self)
numpy.matrixlib.defmatrix.matrix._align(self,axis)
numpy.matrixlib.defmatrix.matrix._collapse(self,axis)
numpy.matrixlib.defmatrix.matrix.all(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.any(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmax(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmin(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.getA(self)
numpy.matrixlib.defmatrix.matrix.getA1(self)
numpy.matrixlib.defmatrix.matrix.getH(self)
numpy.matrixlib.defmatrix.matrix.getI(self)
numpy.matrixlib.defmatrix.matrix.getT(self)
numpy.matrixlib.defmatrix.matrix.max(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.min(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.ptp(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib.defmatrix.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.tolist(self)
numpy.matrixlib.defmatrix.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib.defmatrix.matrix_power(M,n)
numpy.matrixlib.matrix.__str__(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/setup.py----------------------------------------
A:numpy.matrixlib.setup.config->configuration(top_path='').todict()
numpy.matrixlib.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/tests/test_defmatrix.py----------------------------------------
A:numpy.matrixlib.tests.test_defmatrix.A->arange(6)
A:numpy.matrixlib.tests.test_defmatrix.mA->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.B->dot(B, Ainv)
A:numpy.matrixlib.tests.test_defmatrix.C->bmat([[A, A], [A, A]])
A:numpy.matrixlib.tests.test_defmatrix.D->array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.E->array([[5, 6], [7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.AEresult->matrix([[1, 2, 5, 6], [3, 4, 7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.vec->arange(5)
A:numpy.matrixlib.tests.test_defmatrix.mvec->matrix(vec)
A:numpy.matrixlib.tests.test_defmatrix.Aresult->array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.Bresult->array([[5, 6, 5, 6], [7, 8, 7, 8], [5, 6, 5, 6], [7, 8, 7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.mixresult->array([[1, 2, 5, 6], [3, 4, 7, 8], [5, 6, 1, 2], [7, 8, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.b2->bmat('A,B;C,D', ldict={'A': A, 'B': B}, gdict={'C': B, 'D': A})
A:numpy.matrixlib.tests.test_defmatrix.M->matrix([[1, 2, 0, 0], [3, 4, 0, 0], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.sum0->matrix([8, 12, 4, 6])
A:numpy.matrixlib.tests.test_defmatrix.x->asmatrix(A)
A:numpy.matrixlib.tests.test_defmatrix.y->zeros((3, 1), float)
A:numpy.matrixlib.tests.test_defmatrix.mx->asmatrix(A).view(np.matrix)
A:numpy.matrixlib.tests.test_defmatrix.mB->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.xpinv->matrix([[-0.77777778, 0.27777778], [-0.11111111, 0.11111111], [0.55555556, -0.05555556]])
A:numpy.matrixlib.tests.test_defmatrix.mC->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.O->ones((10, 10), complex128)
A:numpy.matrixlib.tests.test_defmatrix.Ainv->numpy.linalg.inv(A)
A:numpy.matrixlib.tests.test_defmatrix.mA2->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.m->matrix('1. 2.; 3. 4.')
A:numpy.matrixlib.tests.test_defmatrix.m2->matrix('1. 2.; 3. 4.').copy()
A:numpy.matrixlib.tests.test_defmatrix.mi->matrix('1. 2.; 3. 4.').copy()
A:numpy.matrixlib.tests.test_defmatrix.m4->matrix('1. 2.; 3. 4.').copy().copy()
A:numpy.matrixlib.tests.test_defmatrix.a->mat(a)
A:numpy.matrixlib.tests.test_defmatrix.f->getattr(a, attrib)
A:numpy.matrixlib.tests.test_defmatrix.b->f(*args)
A:numpy.matrixlib.tests.test_defmatrix.(c, d)->matrix([0.0]).nonzero()
A:numpy.matrixlib.tests.test_defmatrix.self.a->matrix([[1, 2], [3, 4]])
numpy.matrixlib.tests.test_TestCtor.test_bmat_nondefault_str(self)
numpy.matrixlib.tests.test_TestNewScalarIndexing.test_boolean_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_notimplemented(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_pow(self)
numpy.matrixlib.tests.test_defmatrix.TestCasting(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestCasting.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_bmat_nondefault_str(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_exceptions(self)
numpy.matrixlib.tests.test_defmatrix.TestIndexing(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestIndexing.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn.test_instance_methods(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.setUp(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_to_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_boolean_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_dimesions(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_fancy_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_list_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_matrix_element(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_row_column_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_scalar_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestPower(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestPower.test_list(self)
numpy.matrixlib.tests.test_defmatrix.TestPower.test_returntype(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties(TestCase)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_asmatrix(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_comparisons(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_max(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_min(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_noaxis(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_pinv(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_prod(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_ptp(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_repr(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_sum(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_var(self)
numpy.tests.test_TestAlgebra(TestCase)
numpy.tests.test_TestAlgebra.test_basic(self)
numpy.tests.test_TestAlgebra.test_notimplemented(self)
numpy.tests.test_TestAlgebra.test_pow(self)
numpy.tests.test_TestCasting(TestCase)
numpy.tests.test_TestCasting.test_basic(self)
numpy.tests.test_TestCtor(TestCase)
numpy.tests.test_TestCtor.test_basic(self)
numpy.tests.test_TestCtor.test_exceptions(self)
numpy.tests.test_TestIndexing(TestCase)
numpy.tests.test_TestIndexing.test_basic(self)
numpy.tests.test_TestMatrixReturn(TestCase)
numpy.tests.test_TestMatrixReturn.test_instance_methods(self)
numpy.tests.test_TestNewScalarIndexing(TestCase)
numpy.tests.test_TestNewScalarIndexing.setUp(self)
numpy.tests.test_TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.tests.test_TestNewScalarIndexing.test_array_to_list(self)
numpy.tests.test_TestNewScalarIndexing.test_dimesions(self)
numpy.tests.test_TestNewScalarIndexing.test_fancy_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_list_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_matrix_element(self)
numpy.tests.test_TestNewScalarIndexing.test_row_column_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_scalar_indexing(self)
numpy.tests.test_TestPower(TestCase)
numpy.tests.test_TestPower.test_list(self)
numpy.tests.test_TestPower.test_returntype(self)
numpy.tests.test_TestProperties(TestCase)
numpy.tests.test_TestProperties.test_asmatrix(self)
numpy.tests.test_TestProperties.test_basic(self)
numpy.tests.test_TestProperties.test_comparisons(self)
numpy.tests.test_TestProperties.test_max(self)
numpy.tests.test_TestProperties.test_min(self)
numpy.tests.test_TestProperties.test_noaxis(self)
numpy.tests.test_TestProperties.test_pinv(self)
numpy.tests.test_TestProperties.test_prod(self)
numpy.tests.test_TestProperties.test_ptp(self)
numpy.tests.test_TestProperties.test_repr(self)
numpy.tests.test_TestProperties.test_sum(self)
numpy.tests.test_TestProperties.test_var(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/tests/test_regression.py----------------------------------------
A:numpy.matrixlib.tests.test_regression.x->numpy.asmatrix(np.random.uniform(0, 1, (3, 3)))
A:numpy.matrixlib.tests.test_regression.a->numpy.matrix([1.0], dtype=float)
A:numpy.matrixlib.tests.test_regression.(c, d)->numpy.matrix([0.0]).nonzero()
numpy.matrixlib.tests.test_regression.TestRegression(TestCase)
numpy.matrixlib.tests.test_regression.TestRegression.test_kron_matrix(self,level=rlevel)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector(self,level=rlevel)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_properties(self,level=rlevel)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_std_argmax(self,level=rlevel)
numpy.tests.test_regression.TestRegression(TestCase)
numpy.tests.test_regression.TestRegression.test_kron_matrix(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_matrix_properties(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_matrix_std_argmax(self,level=rlevel)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/tests/test_numeric.py----------------------------------------
A:numpy.matrixlib.tests.test_numeric.b1->matrix(ones((3, 3), dtype=complex))
numpy.matrixlib.tests.test_numeric.TestDot(TestCase)
numpy.matrixlib.tests.test_numeric.TestDot.test_matscalar(self)
numpy.tests.test_numeric.TestDot(TestCase)
numpy.tests.test_numeric.TestDot.test_matscalar(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/matrixlib/tests/test_multiarray.py----------------------------------------
A:numpy.matrixlib.tests.test_multiarray.x->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
A:numpy.matrixlib.tests.test_multiarray.y->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)]).view(dtype='<i2', type=np.matrix)
numpy.matrixlib.tests.test_multiarray.TestView(TestCase)
numpy.matrixlib.tests.test_multiarray.TestView.test_keywords(self)
numpy.matrixlib.tests.test_multiarray.TestView.test_type(self)
numpy.tests.test_multiarray.TestView(TestCase)
numpy.tests.test_multiarray.TestView.test_keywords(self)
numpy.tests.test_multiarray.TestView.test_type(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/util.py----------------------------------------
A:numpy.numarray.util.modes->numpy.geterr()
A:numpy.numarray.util.base->os.path.dirname(np.__file__)
numpy.numarray.MathDomainError(ArithmeticError)
numpy.numarray.NumOverflowError(OverflowError,ArithmeticError)
numpy.numarray.UnderflowError(ArithmeticError)
numpy.numarray.get_numarray_include_dirs()
numpy.numarray.handleError(errorStatus,sourcemsg)
numpy.numarray.util.MathDomainError(ArithmeticError)
numpy.numarray.util.NumOverflowError(OverflowError,ArithmeticError)
numpy.numarray.util.UnderflowError(ArithmeticError)
numpy.numarray.util.get_numarray_include_dirs()
numpy.numarray.util.handleError(errorStatus,sourcemsg)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/session.py----------------------------------------
A:numpy.numarray.session.frame->_caller()
A:numpy.numarray.session.g->_callers_globals()
A:numpy.numarray.session.self->object.__new__(_type)
A:numpy.numarray.session.modules->module.split('.')
A:numpy.numarray.session.s->'.'.join(modules[:i + 1])
A:numpy.numarray.session.m->_loadmodule(module)
A:numpy.numarray.session.file->open(file, 'rb')
A:numpy.numarray.session.dictionary->_callers_globals()
A:numpy.numarray.session.keys->variables.split(',')
A:numpy.numarray.session.p->pickle.Unpickler(file)
A:numpy.numarray.session.proxy->_ObjectProxy(module, name, type(v), save=True)
A:numpy.numarray.session.(module, name)->_locate(source_modules, v)
A:numpy.numarray.session.o->pickle.Unpickler(file).load()
A:numpy.numarray.session.session->dict(zip(o.keys, values))
numpy.numarray.ObjectNotFound(RuntimeError)
numpy.numarray._ModuleProxy(_type,name,save=False)
numpy.numarray._ModuleProxy.__getnewargs__(self)
numpy.numarray._ModuleProxy.__getstate__(self)
numpy.numarray._ObjectProxy(_type,module,name,_type2,save=False)
numpy.numarray._ObjectProxy.__getnewargs__(self)
numpy.numarray._ObjectProxy.__getstate__(self)
numpy.numarray._ProxyingFailure(self,module,name,type=None)
numpy.numarray._ProxyingFailure.__repr__(self)
numpy.numarray._SaveSession(_type,keys,save=False)
numpy.numarray._SaveSession.__getnewargs__(self)
numpy.numarray._SaveSession.__getstate__(self)
numpy.numarray._caller()
numpy.numarray._callers_globals()
numpy.numarray._callers_modules()
numpy.numarray._errout(*args)
numpy.numarray._foo()
numpy.numarray._loadmodule(module)
numpy.numarray._locate(modules,object)
numpy.numarray._unknown(_type)
numpy.numarray._update_proxy_types()
numpy.numarray._verbose(*args)
numpy.numarray.load(variables=None,file=SAVEFILE,dictionary=None,verbose=False)
numpy.numarray.save(variables=None,file=SAVEFILE,dictionary=None,verbose=False)
numpy.numarray.session.ObjectNotFound(RuntimeError)
numpy.numarray.session._ModuleProxy(_type,name,save=False)
numpy.numarray.session._ModuleProxy.__getnewargs__(self)
numpy.numarray.session._ModuleProxy.__getstate__(self)
numpy.numarray.session._ModuleProxy.__new__(_type,name,save=False)
numpy.numarray.session._ObjectProxy(_type,module,name,_type2,save=False)
numpy.numarray.session._ObjectProxy.__getnewargs__(self)
numpy.numarray.session._ObjectProxy.__getstate__(self)
numpy.numarray.session._ObjectProxy.__new__(_type,module,name,_type2,save=False)
numpy.numarray.session._ProxyingFailure(self,module,name,type=None)
numpy.numarray.session._ProxyingFailure.__init__(self,module,name,type=None)
numpy.numarray.session._ProxyingFailure.__repr__(self)
numpy.numarray.session._SaveSession(_type,keys,save=False)
numpy.numarray.session._SaveSession.__getnewargs__(self)
numpy.numarray.session._SaveSession.__getstate__(self)
numpy.numarray.session._SaveSession.__new__(_type,keys,save=False)
numpy.numarray.session._caller()
numpy.numarray.session._callers_globals()
numpy.numarray.session._callers_modules()
numpy.numarray.session._errout(*args)
numpy.numarray.session._foo()
numpy.numarray.session._loadmodule(module)
numpy.numarray.session._locate(modules,object)
numpy.numarray.session._unknown(_type)
numpy.numarray.session._update_proxy_types()
numpy.numarray.session._verbose(*args)
numpy.numarray.session.load(variables=None,file=SAVEFILE,dictionary=None,verbose=False)
numpy.numarray.session.save(variables=None,file=SAVEFILE,dictionary=None,verbose=False)
numpy.numarray.session.test()
numpy.numarray.test()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/functions.py----------------------------------------
A:numpy.numarray.functions.dtype->type2dtype(typecode, type, dtype, True)
A:numpy.numarray.functions.arr->numpy.array(sequence, dtype, copy=copy)
A:numpy.numarray.functions.ret->numpy.ndarray(shape=shape, dtype=type, buffer=buf).choose(population, out=outarr, mode=clipmode)
A:numpy.numarray.functions.a->numpy.ndarray(shape=shape, dtype=type, buffer=buf)
A:numpy.numarray.functions.x->numpy.ndarray(shape=shape, dtype=type, buffer=buf).view()
A:numpy.numarray.functions.(STRICT, SLOPPY, WARN)->list(range(3))
A:numpy.numarray.functions.infile->open(infile, 'rb')
A:numpy.numarray.functions.data->open(infile, 'rb').read(blocksize)
A:numpy.numarray.functions.recsize->int(dtype.itemsize * np.product([i for i in shape if i != -1]))
A:numpy.numarray.functions.curpos->open(infile, 'rb').tell()
A:numpy.numarray.functions.endpos->open(infile, 'rb').tell()
A:numpy.numarray.functions.buf->_resizebuf(buf, bytesread + datasize)
A:numpy.numarray.functions.shape->tuple(shape)
A:numpy.numarray.functions.uidx->tuple(shape).index(-1)
A:numpy.numarray.functions.newbuf->numpy.newbuffer(newsize)
A:numpy.numarray.functions.count->numpy.product(shape)
A:numpy.numarray.functions.res->numpy.asarray(array).take(indices, axis, outarr, clipmode)
A:numpy.numarray.functions.dummy->numpy.array(shape)
A:numpy.numarray.functions.cls->getattr(obj, '__class__', type(obj))
A:numpy.numarray.functions.nm->getattr(cls, '__name__', cls)
A:numpy.numarray.functions.work->numpy.asarray(array).transpose(axis)
A:numpy.numarray.functions.def_axes->list(range(array.ndim))
A:numpy.numarray.functions.array->numpy.asarray(array)
A:numpy.numarray.functions.self.dtype->self.dtype.newbyteorder()
numpy.numarray.EarlyEOFError(Exception)
numpy.numarray.FileSeekWarning(Warning)
numpy.numarray.SizeMismatchError(Exception)
numpy.numarray.SizeMismatchWarning(Warning)
numpy.numarray._resizebuf(buf,newsize)
numpy.numarray.alltrue(x,axis=0)
numpy.numarray.and_(a,b)
numpy.numarray.arange(a1,a2=None,stride=1,type=None,shape=None,typecode=None,dtype=None)
numpy.numarray.argmax(x,axis=-1)
numpy.numarray.argmin(x,axis=-1)
numpy.numarray.around(array,digits=0,output=None)
numpy.numarray.array(sequence=None,typecode=None,copy=1,savespace=0,type=None,shape=None,dtype=None)
numpy.numarray.array2list(arr)
numpy.numarray.asarray(seq,type=None,typecode=None,dtype=None)
numpy.numarray.average(a,axis=0,weights=None,returned=0)
numpy.numarray.choose(selector,population,outarr=None,clipmode=RAISE)
numpy.numarray.compress(condition,a,axis=0)
numpy.numarray.cumproduct(a1,axis=0,out=None,type=None,dim=0)
numpy.numarray.cumsum(a1,axis=0,out=None,type=None,dim=0)
numpy.numarray.divide_remainder(a,b)
numpy.numarray.explicit_type(a)
numpy.numarray.flush_caches()
numpy.numarray.fromfile(infile,type=None,shape=None,sizing=STRICT,typecode=None,dtype=None)
numpy.numarray.fromfunction(shape,dimensions,type=None,typecode=None,dtype=None)
numpy.numarray.fromlist(seq,type=None,shape=None,check_overflow=0,typecode=None,dtype=None)
numpy.numarray.fromstring(datastring,type=None,shape=None,typecode=None,dtype=None)
numpy.numarray.functions.EarlyEOFError(Exception)
numpy.numarray.functions.FileSeekWarning(Warning)
numpy.numarray.functions.SizeMismatchError(Exception)
numpy.numarray.functions.SizeMismatchWarning(Warning)
numpy.numarray.functions._resizebuf(buf,newsize)
numpy.numarray.functions.alltrue(x,axis=0)
numpy.numarray.functions.and_(a,b)
numpy.numarray.functions.arange(a1,a2=None,stride=1,type=None,shape=None,typecode=None,dtype=None)
numpy.numarray.functions.argmax(x,axis=-1)
numpy.numarray.functions.argmin(x,axis=-1)
numpy.numarray.functions.around(array,digits=0,output=None)
numpy.numarray.functions.array(sequence=None,typecode=None,copy=1,savespace=0,type=None,shape=None,dtype=None)
numpy.numarray.functions.array2list(arr)
numpy.numarray.functions.asarray(seq,type=None,typecode=None,dtype=None)
numpy.numarray.functions.average(a,axis=0,weights=None,returned=0)
numpy.numarray.functions.choose(selector,population,outarr=None,clipmode=RAISE)
numpy.numarray.functions.compress(condition,a,axis=0)
numpy.numarray.functions.cumproduct(a1,axis=0,out=None,type=None,dim=0)
numpy.numarray.functions.cumsum(a1,axis=0,out=None,type=None,dim=0)
numpy.numarray.functions.divide_remainder(a,b)
numpy.numarray.functions.explicit_type(a)
numpy.numarray.functions.flush_caches()
numpy.numarray.functions.fromfile(infile,type=None,shape=None,sizing=STRICT,typecode=None,dtype=None)
numpy.numarray.functions.fromfunction(shape,dimensions,type=None,typecode=None,dtype=None)
numpy.numarray.functions.fromlist(seq,type=None,shape=None,check_overflow=0,typecode=None,dtype=None)
numpy.numarray.functions.fromstring(datastring,type=None,shape=None,typecode=None,dtype=None)
numpy.numarray.functions.getShape(shape,*args)
numpy.numarray.functions.getTypeObject(sequence,type)
numpy.numarray.functions.identity(n,type=None,typecode=None,dtype=None)
numpy.numarray.functions.indices(shape,type=None)
numpy.numarray.functions.info(obj,output=sys.stdout,numpy=0)
numpy.numarray.functions.newobj(self,type)
numpy.numarray.functions.ones(shape,type=None,typecode=None,dtype=None)
numpy.numarray.functions.put(array,indices,values,axis=0,clipmode=RAISE)
numpy.numarray.functions.repeat(array,repeats,axis=0)
numpy.numarray.functions.reshape(array,shape,*args)
numpy.numarray.functions.round(*args,**keys)
numpy.numarray.functions.sometrue(array,axis=0)
numpy.numarray.functions.take(array,indices,axis=0,outarr=None,clipmode=RAISE)
numpy.numarray.functions.tensormultiply(a1,a2)
numpy.numarray.functions.togglebyteorder(self)
numpy.numarray.functions.type2dtype(typecode,type,dtype,use_default=True)
numpy.numarray.functions.where(condition,x=None,y=None,out=None)
numpy.numarray.functions.zeros(shape,type=None,typecode=None,dtype=None)
numpy.numarray.getShape(shape,*args)
numpy.numarray.getTypeObject(sequence,type)
numpy.numarray.identity(n,type=None,typecode=None,dtype=None)
numpy.numarray.indices(shape,type=None)
numpy.numarray.info(obj,output=sys.stdout,numpy=0)
numpy.numarray.newobj(self,type)
numpy.numarray.ones(shape,type=None,typecode=None,dtype=None)
numpy.numarray.put(array,indices,values,axis=0,clipmode=RAISE)
numpy.numarray.repeat(array,repeats,axis=0)
numpy.numarray.reshape(array,shape,*args)
numpy.numarray.round(*args,**keys)
numpy.numarray.sometrue(array,axis=0)
numpy.numarray.take(array,indices,axis=0,outarr=None,clipmode=RAISE)
numpy.numarray.tensormultiply(a1,a2)
numpy.numarray.togglebyteorder(self)
numpy.numarray.type2dtype(typecode,type,dtype,use_default=True)
numpy.numarray.where(condition,x=None,y=None,out=None)
numpy.numarray.zeros(shape,type=None,typecode=None,dtype=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/mlab.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/random_array.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/convolve.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/ma.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/alter_code1.py----------------------------------------
A:numpy.numarray.alter_code1.name_->name.replace('.', '_')
A:numpy.numarray.alter_code1.fstr->open(afile).read()
A:numpy.numarray.alter_code1.Nlen->len(fromstr)
A:numpy.numarray.alter_code1.Nlen2->len('from %s import ' % newname)
A:numpy.numarray.alter_code1.found->open(afile).read().find(fromstr, ind)
A:numpy.numarray.alter_code1.flatindex_re->re.compile('([.]flat(\\s*?[[=]))')
A:numpy.numarray.alter_code1.ind->setimaginary_re.sub('\\1.imag = \\2', astr).find('import')
A:numpy.numarray.alter_code1.start->setimaginary_re.sub('\\1.imag = \\2', astr).rfind(os.linesep, 0, ind)
A:numpy.numarray.alter_code1.astr->re.compile('(\\S+)\\s*[.]\\s*setimaginary\\s*[(]\\s*(\\S+)\\s*[)]').sub('\\1.imag = \\2', astr)
A:numpy.numarray.alter_code1.tmpstr->tmpstr.replace('.flat', '.ravel()').replace('.flat', '.ravel()')
A:numpy.numarray.alter_code1.info_re->re.compile('(\\S+)\\s*[.]\\s*info\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.new_re->re.compile('(\\S+)\\s*[.]\\s*new\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.toggle_re->re.compile('(\\S+)\\s*[.]\\s*togglebyteorder\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.type_re->re.compile('(\\S+)\\s*[.]\\s*type\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.isbyte_re->re.compile('(\\S+)\\s*[.]\\s*isbyteswapped\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.iscarr_re->re.compile('(\\S+)\\s*[.]\\s*is_c_array\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.isfarr_re->re.compile('(\\S+)\\s*[.]\\s*is_f_array\\s*[(]\\s*[)]')
A:numpy.numarray.alter_code1.repeat_re->re.compile('(\\S+)\\s*[.]\\s*repeat\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.setshape_re->re.compile('(\\S+)\\s*[.]\\s*setshape\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.setreal_re->re.compile('(\\S+)\\s*[.]\\s*setreal\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.setimag_re->re.compile('(\\S+)\\s*[.]\\s*setimag\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.setimaginary_re->re.compile('(\\S+)\\s*[.]\\s*setimaginary\\s*[(]\\s*(\\S+)\\s*[)]')
A:numpy.numarray.alter_code1.(astr, n1)->re.compile('(\\S+)\\s*[.]\\s*info\\s*[(]\\s*[)]').subn('numarray.info(\\1)', astr)
A:numpy.numarray.alter_code1.(astr, n2)->re.compile('(\\S+)\\s*[.]\\s*new\\s*[(]\\s*(\\S+)\\s*[)]').subn('numarray.newobj(\\1, \\2)', astr)
A:numpy.numarray.alter_code1.(astr, n3)->re.compile('(\\S+)\\s*[.]\\s*togglebyteorder\\s*[(]\\s*[)]').subn('numarray.togglebyteorder(\\1)', astr)
A:numpy.numarray.alter_code1.(astr, n4)->re.compile('(\\S+)\\s*[.]\\s*type\\s*[(]\\s*[)]').subn('numarray.typefrom(\\1)', astr)
A:numpy.numarray.alter_code1.(filestr, fromall)->changeimports(filestr, base + sub, newbase + sub)
A:numpy.numarray.alter_code1.filestr->open(afile).read()
A:numpy.numarray.alter_code1.today->datetime.date.today().strftime('%b %d, %Y')
A:numpy.numarray.alter_code1.fid->open(afile)
A:numpy.numarray.alter_code1.(filestr, changed)->fromstr(filestr)
A:numpy.numarray.alter_code1.(base, ext)->os.path.splitext(afile)
A:numpy.numarray.alter_code1.files->glob.glob(os.path.join(direc, '*'))
A:numpy.numarray.alter_code1.header_re->re.compile('(numarray/libnumarray.h)')
A:numpy.numarray.alter_code1.(fstr, n)->re.compile('(numarray/libnumarray.h)').subn('numpy/libnumarray.h', fstr)
numpy.numarray.alter_code1._func(arg,dirname,fnames)
numpy.numarray.alter_code1.addimport(astr)
numpy.numarray.alter_code1.changeimports(fstr,name,newname)
numpy.numarray.alter_code1.convertall(direc=os.path.curdir,orig=1)
numpy.numarray.alter_code1.convertfile(filename,orig=1)
numpy.numarray.alter_code1.convertsrc(direc=os.path.curdir,ext=None,orig=1)
numpy.numarray.alter_code1.converttree(direc=os.path.curdir)
numpy.numarray.alter_code1.fromargs(args)
numpy.numarray.alter_code1.fromstr(filestr)
numpy.numarray.alter_code1.makenewfile(name,filestr)
numpy.numarray.alter_code1.replaceattr(astr)
numpy.numarray.alter_code1.replaceother(astr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/nd_image.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/setup.py----------------------------------------
A:numpy.numarray.setup.config->Configuration('numarray', parent_package, top_path)
numpy.numarray.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/matrix.py----------------------------------------
numpy.numarray.matrix.Matrix(data,typecode=None,copy=1,savespace=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/linear_algebra.py----------------------------------------
A:numpy.numarray.linear_algebra.__all__->list(nol.__all__)
A:numpy.numarray.linear_algebra.res->_qr(a, mode)
numpy.numarray.linear_algebra.qr_decomposition(a,mode='full')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/compat.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/numerictypes.py----------------------------------------
A:numpy.numarray.numerictypes.self->object.__new__(type)
A:numpy.numarray.numerictypes.Any->AnyType('Any', None, None, _tAny)
A:numpy.numarray.numerictypes.Object->ObjectType('Object', None, None, _tObject)
A:numpy.numarray.numerictypes.Bool->BooleanType('Bool', 1, 0, _tBool)
A:numpy.numarray.numerictypes.Int8->SignedIntegralType('Int8', 1, 0, _tInt8)
A:numpy.numarray.numerictypes.Int16->SignedIntegralType('Int16', 2, 0, _tInt16)
A:numpy.numarray.numerictypes.Int32->SignedIntegralType('Int32', 4, 0, _tInt32)
A:numpy.numarray.numerictypes.Int64->SignedIntegralType('Int64', 8, 0, _tInt64)
A:numpy.numarray.numerictypes.Float32->FloatingType('Float32', 4, 0.0, _tFloat32)
A:numpy.numarray.numerictypes.Float64->FloatingType('Float64', 8, 0.0, _tFloat64)
A:numpy.numarray.numerictypes.UInt8->UnsignedIntegralType('UInt8', 1, 0, _tUInt8)
A:numpy.numarray.numerictypes.UInt16->UnsignedIntegralType('UInt16', 2, 0, _tUInt16)
A:numpy.numarray.numerictypes.UInt32->UnsignedIntegralType('UInt32', 4, 0, _tUInt32)
A:numpy.numarray.numerictypes.UInt64->UnsignedIntegralType('UInt64', 8, 0, _tUInt64)
A:numpy.numarray.numerictypes.Complex32->ComplexType('Complex32', 8, complex(0.0), _tComplex32)
A:numpy.numarray.numerictypes.Complex64->ComplexType('Complex64', 16, complex(0.0), _tComplex64)
A:numpy.numarray.numerictypes.Byte->_register('Byte', Int8)
A:numpy.numarray.numerictypes.Short->_register('Short', Int16)
A:numpy.numarray.numerictypes.Int->_register('Int', Int32)
A:numpy.numarray.numerictypes.Long->_register('Long', Int32)
A:numpy.numarray.numerictypes.MaybeLong->_register('MaybeLong', Int32)
A:numpy.numarray.numerictypes.Float->_register('Float', Float64)
A:numpy.numarray.numerictypes.Complex->_register('Complex', Complex64)
A:numpy.numarray.numerictypes.rank1->genericTypeRank.index(ntype1)
A:numpy.numarray.numerictypes.rank2->genericTypeRank.index(mapto)
A:numpy.numarray.numerictypes.size->min(2 * ntypesize1, MAX_INT_SIZE)
numpy.numarray.AnyType(NumericType)
numpy.numarray.BooleanType(NumericType)
numpy.numarray.ComplexType(NumericType)
numpy.numarray.FloatingType(NumericType)
numpy.numarray.IntegralType(NumericType)
numpy.numarray.IsType(rep)
numpy.numarray.MaximumType(t)
numpy.numarray.NumericType(self,name,bytes,default,typeno)
numpy.numarray.NumericType.__getnewargs__(self)
numpy.numarray.NumericType.__getstate__(self)
numpy.numarray.ObjectType(NumericType)
numpy.numarray.SignedIntegralType(IntegralType,SignedType)
numpy.numarray.SignedType(object)
numpy.numarray.UnsignedIntegralType(IntegralType,UnsignedType)
numpy.numarray.UnsignedType(object)
numpy.numarray._initGenericCoercions()
numpy.numarray._register(name,type,force=0)
numpy.numarray._scipy_alias(scipy_type,numarray_type)
numpy.numarray.getType(type)
numpy.numarray.numerictypes.AnyType(NumericType)
numpy.numarray.numerictypes.BooleanType(NumericType)
numpy.numarray.numerictypes.ComplexType(NumericType)
numpy.numarray.numerictypes.FloatingType(NumericType)
numpy.numarray.numerictypes.IntegralType(NumericType)
numpy.numarray.numerictypes.IsType(rep)
numpy.numarray.numerictypes.MaximumType(t)
numpy.numarray.numerictypes.NumericType(self,name,bytes,default,typeno)
numpy.numarray.numerictypes.NumericType.__getnewargs__(self)
numpy.numarray.numerictypes.NumericType.__getstate__(self)
numpy.numarray.numerictypes.NumericType.__init__(self,name,bytes,default,typeno)
numpy.numarray.numerictypes.ObjectType(NumericType)
numpy.numarray.numerictypes.SignedIntegralType(IntegralType,SignedType)
numpy.numarray.numerictypes.SignedType(object)
numpy.numarray.numerictypes.UnsignedIntegralType(IntegralType,UnsignedType)
numpy.numarray.numerictypes.UnsignedType(object)
numpy.numarray.numerictypes._initGenericCoercions()
numpy.numarray.numerictypes._register(name,type,force=0)
numpy.numarray.numerictypes._scipy_alias(scipy_type,numarray_type)
numpy.numarray.numerictypes.getType(type)
numpy.numarray.numerictypes.typefrom(obj)
numpy.numarray.typefrom(obj)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/image.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/fft.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/numarray/alter_code2.py----------------------------------------
A:numpy.numarray.alter_code2.fid->file(name)
A:numpy.numarray.alter_code2.filestr->fromstr(filestr)
A:numpy.numarray.alter_code2.(base, ext)->os.path.splitext(name)
A:numpy.numarray.alter_code2.files->glob.glob(os.path.join(direc, '*.py'))
numpy.numarray.alter_code2._func(arg,dirname,fnames)
numpy.numarray.alter_code2.convertall(direc=os.path.curdir)
numpy.numarray.alter_code2.convertfile(filename)
numpy.numarray.alter_code2.converttree(direc=os.path.curdir)
numpy.numarray.alter_code2.fromargs(args)
numpy.numarray.alter_code2.getandcopy(name)
numpy.numarray.alter_code2.makenewfile(name,filestr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/fftpack.py----------------------------------------
A:numpy.fft.fftpack.a->irfft(a, s[-1], axes[-1])
A:numpy.fft.fftpack.wsave->init_function(n)
A:numpy.fft.fftpack.s->list(s)
A:numpy.fft.fftpack.index[axis]->slice(0, s[axis])
A:numpy.fft.fftpack.z->zeros(s, a.dtype.char)
A:numpy.fft.fftpack.r->swapaxes(r, axis, -1)
A:numpy.fft.fftpack.axes->list(range(-len(s), 0))
A:numpy.fft.fftpack.(s, axes)->_cook_nd_args(a, s, axes, invreal=1)
A:numpy.fft.fftpack.itl->list(range(len(axes)))
numpy.fft._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft._raw_fft(a,n=None,axis=-1,init_function=fftpack.cffti,work_function=fftpack.cfftf,fft_cache=_fft_cache)
numpy.fft._raw_fftnd(a,s=None,axes=None,function=fft)
numpy.fft.fft(a,n=None,axis=-1)
numpy.fft.fft2(a,s=None,axes=(-2,-1))
numpy.fft.fftn(a,s=None,axes=None)
numpy.fft.fftpack._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft.fftpack._raw_fft(a,n=None,axis=-1,init_function=fftpack.cffti,work_function=fftpack.cfftf,fft_cache=_fft_cache)
numpy.fft.fftpack._raw_fftnd(a,s=None,axes=None,function=fft)
numpy.fft.fftpack.fft(a,n=None,axis=-1)
numpy.fft.fftpack.fft2(a,s=None,axes=(-2,-1))
numpy.fft.fftpack.fftn(a,s=None,axes=None)
numpy.fft.fftpack.hfft(a,n=None,axis=-1)
numpy.fft.fftpack.ifft(a,n=None,axis=-1)
numpy.fft.fftpack.ifft2(a,s=None,axes=(-2,-1))
numpy.fft.fftpack.ifftn(a,s=None,axes=None)
numpy.fft.fftpack.ihfft(a,n=None,axis=-1)
numpy.fft.fftpack.irfft(a,n=None,axis=-1)
numpy.fft.fftpack.irfft2(a,s=None,axes=(-2,-1))
numpy.fft.fftpack.irfftn(a,s=None,axes=None)
numpy.fft.fftpack.rfft(a,n=None,axis=-1)
numpy.fft.fftpack.rfft2(a,s=None,axes=(-2,-1))
numpy.fft.fftpack.rfftn(a,s=None,axes=None)
numpy.fft.hfft(a,n=None,axis=-1)
numpy.fft.ifft(a,n=None,axis=-1)
numpy.fft.ifft2(a,s=None,axes=(-2,-1))
numpy.fft.ifftn(a,s=None,axes=None)
numpy.fft.ihfft(a,n=None,axis=-1)
numpy.fft.irfft(a,n=None,axis=-1)
numpy.fft.irfft2(a,s=None,axes=(-2,-1))
numpy.fft.irfftn(a,s=None,axes=None)
numpy.fft.rfft(a,n=None,axis=-1)
numpy.fft.rfft2(a,s=None,axes=(-2,-1))
numpy.fft.rfftn(a,s=None,axes=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/helper.py----------------------------------------
A:numpy.fft.helper.tmp->asarray(x)
A:numpy.fft.helper.ndim->len(tmp.shape)
A:numpy.fft.helper.axes->list(range(ndim))
A:numpy.fft.helper.mylist->concatenate((arange(p2, n), arange(p2)))
A:numpy.fft.helper.y->take(y, mylist, k)
A:numpy.fft.helper.results->arange(0, N, dtype=int)
A:numpy.fft.helper.p1->arange(0, N, dtype=int)
A:numpy.fft.helper.p2->arange(-(n // 2), 0, dtype=int)
numpy.fft.fftfreq(n,d=1.0)
numpy.fft.fftshift(x,axes=None)
numpy.fft.helper.fftfreq(n,d=1.0)
numpy.fft.helper.fftshift(x,axes=None)
numpy.fft.helper.ifftshift(x,axes=None)
numpy.fft.helper.rfftfreq(n,d=1.0)
numpy.fft.ifftshift(x,axes=None)
numpy.fft.rfftfreq(n,d=1.0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/setup.py----------------------------------------
A:numpy.fft.setup.config->Configuration('fft', parent_package, top_path)
numpy.fft.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/tests/test_fftpack.py----------------------------------------
A:numpy.fft.tests.test_fftpack.L->len(x)
A:numpy.fft.tests.test_fftpack.q->Queue.Queue()
A:numpy.fft.tests.test_fftpack.expected->func(*args)
A:numpy.fft.tests.test_fftpack.a->numpy.ones(self.input_shape)
numpy.fft.tests.test_TestFFT1D(TestCase)
numpy.fft.tests.test_TestFFT1D.test_basic(self)
numpy.fft.tests.test_TestFFTShift(TestCase)
numpy.fft.tests.test_TestFFTShift.test_fft_n(self)
numpy.fft.tests.test_TestFFTThreadSafe(TestCase)
numpy.fft.tests.test_TestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.test_TestFFTThreadSafe.test_fft(self)
numpy.fft.tests.test_TestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.test_TestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.test_TestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_fft1(x)
numpy.fft.tests.test_fftpack.TestFFT1D(TestCase)
numpy.fft.tests.test_fftpack.TestFFT1D.test_basic(self)
numpy.fft.tests.test_fftpack.TestFFTShift(TestCase)
numpy.fft.tests.test_fftpack.TestFFTShift.test_fft_n(self)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe(TestCase)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_fft(self)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_fftpack.fft1(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/fft/tests/test_helper.py----------------------------------------
A:numpy.fft.tests.test_helper.x->numpy.random.random((n,))
A:numpy.fft.tests.test_helper.(ar, ai)->numpy.random.random((2, 16, 8, 32))
numpy.fft.tests.test_TestFFTFreq(TestCase)
numpy.fft.tests.test_TestFFTFreq.test_definition(self)
numpy.fft.tests.test_TestFFTShift(TestCase)
numpy.fft.tests.test_TestFFTShift.test_axes_keyword(self)
numpy.fft.tests.test_TestFFTShift.test_definition(self)
numpy.fft.tests.test_TestFFTShift.test_inverse(self)
numpy.fft.tests.test_TestIRFFTN(TestCase)
numpy.fft.tests.test_TestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.test_TestRFFTFreq(TestCase)
numpy.fft.tests.test_TestRFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTFreq(TestCase)
numpy.fft.tests.test_helper.TestFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift(TestCase)
numpy.fft.tests.test_helper.TestFFTShift.test_axes_keyword(self)
numpy.fft.tests.test_helper.TestFFTShift.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift.test_inverse(self)
numpy.fft.tests.test_helper.TestIRFFTN(TestCase)
numpy.fft.tests.test_helper.TestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.test_helper.TestRFFTFreq(TestCase)
numpy.fft.tests.test_helper.TestRFFTFreq.test_definition(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/defchararray.py----------------------------------------
A:numpy.core.defchararray.arr1->numpy.asarray(x1)
A:numpy.core.defchararray.arr2->numpy.asarray(x2)
A:numpy.core.defchararray.dtype->_use_unicode(arr1, arr2)
A:numpy.core.defchararray.a_arr->numpy.asarray(a)
A:numpy.core.defchararray.i_arr->numpy.asarray(i)
A:numpy.core.defchararray.width_arr->numpy.asarray(width)
A:numpy.core.defchararray.size->long(numpy.max(width_arr.flat))
A:numpy.core.defchararray.fillchar->asbytes(fillchar)
A:numpy.core.defchararray.itemsize->_len(obj)
A:numpy.core.defchararray.self->numeric.ndarray.__new__(subtype, shape, (dtype, itemsize), buffer=buffer, offset=offset, strides=strides, order=order)
A:numpy.core.defchararray.val->narray(obj, dtype=(dtype, itemsize), order=order, subok=True)
A:numpy.core.defchararray.temp->narray(obj, dtype=(dtype, itemsize), order=order, subok=True).rstrip()
A:numpy.core.defchararray.obj->obj.tolist().tolist()
A:numpy.core.defchararray.ascii->numpy.frombuffer(obj, 'u1')
A:numpy.core.defchararray.ucs4->numpy.array(ucs2, 'u4')
A:numpy.core.defchararray.ucs2->numpy.frombuffer(obj, 'u2')
numpy.chararray(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.chararray.__add__(self,other)
numpy.chararray.__array_finalize__(self,obj)
numpy.chararray.__eq__(self,other)
numpy.chararray.__ge__(self,other)
numpy.chararray.__getitem__(self,obj)
numpy.chararray.__gt__(self,other)
numpy.chararray.__le__(self,other)
numpy.chararray.__lt__(self,other)
numpy.chararray.__mod__(self,i)
numpy.chararray.__mul__(self,i)
numpy.chararray.__ne__(self,other)
numpy.chararray.__radd__(self,other)
numpy.chararray.__rmod__(self,other)
numpy.chararray.__rmul__(self,i)
numpy.chararray.argsort(self,axis=-1,kind='quicksort',order=None)
numpy.chararray.capitalize(self)
numpy.chararray.center(self,width,fillchar='')
numpy.chararray.count(self,sub,start=0,end=None)
numpy.chararray.decode(self,encoding=None,errors=None)
numpy.chararray.encode(self,encoding=None,errors=None)
numpy.chararray.endswith(self,suffix,start=0,end=None)
numpy.chararray.expandtabs(self,tabsize=8)
numpy.chararray.find(self,sub,start=0,end=None)
numpy.chararray.index(self,sub,start=0,end=None)
numpy.chararray.isalnum(self)
numpy.chararray.isalpha(self)
numpy.chararray.isdecimal(self)
numpy.chararray.isdigit(self)
numpy.chararray.islower(self)
numpy.chararray.isnumeric(self)
numpy.chararray.isspace(self)
numpy.chararray.istitle(self)
numpy.chararray.isupper(self)
numpy.chararray.join(self,seq)
numpy.chararray.ljust(self,width,fillchar='')
numpy.chararray.lower(self)
numpy.chararray.partition(self,sep)
numpy.chararray.replace(self,old,new,count=None)
numpy.chararray.rfind(self,sub,start=0,end=None)
numpy.chararray.rindex(self,sub,start=0,end=None)
numpy.chararray.rjust(self,width,fillchar='')
numpy.chararray.rpartition(self,sep)
numpy.chararray.rsplit(self,sep=None,maxsplit=None)
numpy.chararray.split(self,sep=None,maxsplit=None)
numpy.chararray.splitlines(self,keepends=None)
numpy.chararray.startswith(self,prefix,start=0,end=None)
numpy.chararray.swapcase(self)
numpy.chararray.title(self)
numpy.chararray.translate(self,table,deletechars=None)
numpy.chararray.upper(self)
numpy.chararray.zfill(self,width)
numpy.core.chararray.lstrip(self,chars=None)
numpy.core.chararray.rstrip(self,chars=None)
numpy.core.chararray.strip(self,chars=None)
numpy.core.defchararray._clean_args(*args)
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._use_unicode(*args)
numpy.core.defchararray.add(x1,x2)
numpy.core.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)
numpy.core.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a,width,fillchar='')
numpy.core.defchararray.chararray(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.core.defchararray.chararray.__add__(self,other)
numpy.core.defchararray.chararray.__array_finalize__(self,obj)
numpy.core.defchararray.chararray.__eq__(self,other)
numpy.core.defchararray.chararray.__ge__(self,other)
numpy.core.defchararray.chararray.__getitem__(self,obj)
numpy.core.defchararray.chararray.__gt__(self,other)
numpy.core.defchararray.chararray.__le__(self,other)
numpy.core.defchararray.chararray.__lt__(self,other)
numpy.core.defchararray.chararray.__mod__(self,i)
numpy.core.defchararray.chararray.__mul__(self,i)
numpy.core.defchararray.chararray.__ne__(self,other)
numpy.core.defchararray.chararray.__new__(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.core.defchararray.chararray.__radd__(self,other)
numpy.core.defchararray.chararray.__rmod__(self,other)
numpy.core.defchararray.chararray.__rmul__(self,i)
numpy.core.defchararray.chararray.argsort(self,axis=-1,kind='quicksort',order=None)
numpy.core.defchararray.chararray.capitalize(self)
numpy.core.defchararray.chararray.center(self,width,fillchar='')
numpy.core.defchararray.chararray.count(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.decode(self,encoding=None,errors=None)
numpy.core.defchararray.chararray.encode(self,encoding=None,errors=None)
numpy.core.defchararray.chararray.endswith(self,suffix,start=0,end=None)
numpy.core.defchararray.chararray.expandtabs(self,tabsize=8)
numpy.core.defchararray.chararray.find(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.index(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.isalnum(self)
numpy.core.defchararray.chararray.isalpha(self)
numpy.core.defchararray.chararray.isdecimal(self)
numpy.core.defchararray.chararray.isdigit(self)
numpy.core.defchararray.chararray.islower(self)
numpy.core.defchararray.chararray.isnumeric(self)
numpy.core.defchararray.chararray.isspace(self)
numpy.core.defchararray.chararray.istitle(self)
numpy.core.defchararray.chararray.isupper(self)
numpy.core.defchararray.chararray.join(self,seq)
numpy.core.defchararray.chararray.ljust(self,width,fillchar='')
numpy.core.defchararray.chararray.lower(self)
numpy.core.defchararray.chararray.lstrip(self,chars=None)
numpy.core.defchararray.chararray.partition(self,sep)
numpy.core.defchararray.chararray.replace(self,old,new,count=None)
numpy.core.defchararray.chararray.rfind(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.rindex(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.rjust(self,width,fillchar='')
numpy.core.defchararray.chararray.rpartition(self,sep)
numpy.core.defchararray.chararray.rsplit(self,sep=None,maxsplit=None)
numpy.core.defchararray.chararray.rstrip(self,chars=None)
numpy.core.defchararray.chararray.split(self,sep=None,maxsplit=None)
numpy.core.defchararray.chararray.splitlines(self,keepends=None)
numpy.core.defchararray.chararray.startswith(self,prefix,start=0,end=None)
numpy.core.defchararray.chararray.strip(self,chars=None)
numpy.core.defchararray.chararray.swapcase(self)
numpy.core.defchararray.chararray.title(self)
numpy.core.defchararray.chararray.translate(self,table,deletechars=None)
numpy.core.defchararray.chararray.upper(self)
numpy.core.defchararray.chararray.zfill(self,width)
numpy.core.defchararray.count(a,sub,start=0,end=None)
numpy.core.defchararray.decode(a,encoding=None,errors=None)
numpy.core.defchararray.encode(a,encoding=None,errors=None)
numpy.core.defchararray.endswith(a,suffix,start=0,end=None)
numpy.core.defchararray.equal(x1,x2)
numpy.core.defchararray.expandtabs(a,tabsize=8)
numpy.core.defchararray.find(a,sub,start=0,end=None)
numpy.core.defchararray.greater(x1,x2)
numpy.core.defchararray.greater_equal(x1,x2)
numpy.core.defchararray.index(a,sub,start=0,end=None)
numpy.core.defchararray.isalnum(a)
numpy.core.defchararray.isalpha(a)
numpy.core.defchararray.isdecimal(a)
numpy.core.defchararray.isdigit(a)
numpy.core.defchararray.islower(a)
numpy.core.defchararray.isnumeric(a)
numpy.core.defchararray.isspace(a)
numpy.core.defchararray.istitle(a)
numpy.core.defchararray.isupper(a)
numpy.core.defchararray.join(sep,seq)
numpy.core.defchararray.less(x1,x2)
numpy.core.defchararray.less_equal(x1,x2)
numpy.core.defchararray.ljust(a,width,fillchar='')
numpy.core.defchararray.lower(a)
numpy.core.defchararray.lstrip(a,chars=None)
numpy.core.defchararray.mod(a,values)
numpy.core.defchararray.multiply(a,i)
numpy.core.defchararray.not_equal(x1,x2)
numpy.core.defchararray.partition(a,sep)
numpy.core.defchararray.replace(a,old,new,count=None)
numpy.core.defchararray.rfind(a,sub,start=0,end=None)
numpy.core.defchararray.rindex(a,sub,start=0,end=None)
numpy.core.defchararray.rjust(a,width,fillchar='')
numpy.core.defchararray.rpartition(a,sep)
numpy.core.defchararray.rsplit(a,sep=None,maxsplit=None)
numpy.core.defchararray.rstrip(a,chars=None)
numpy.core.defchararray.split(a,sep=None,maxsplit=None)
numpy.core.defchararray.splitlines(a,keepends=None)
numpy.core.defchararray.startswith(a,prefix,start=0,end=None)
numpy.core.defchararray.str_len(a)
numpy.core.defchararray.strip(a,chars=None)
numpy.core.defchararray.swapcase(a)
numpy.core.defchararray.title(a)
numpy.core.defchararray.translate(a,table,deletechars=None)
numpy.core.defchararray.upper(a)
numpy.core.defchararray.zfill(a,width)
numpy.defchararray._clean_args(*args)
numpy.defchararray._get_num_chars(a)
numpy.defchararray.add(x1,x2)
numpy.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)
numpy.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)
numpy.defchararray.capitalize(a)
numpy.defchararray.center(a,width,fillchar='')
numpy.defchararray.count(a,sub,start=0,end=None)
numpy.defchararray.decode(a,encoding=None,errors=None)
numpy.defchararray.encode(a,encoding=None,errors=None)
numpy.defchararray.endswith(a,suffix,start=0,end=None)
numpy.defchararray.equal(x1,x2)
numpy.defchararray.expandtabs(a,tabsize=8)
numpy.defchararray.find(a,sub,start=0,end=None)
numpy.defchararray.greater(x1,x2)
numpy.defchararray.greater_equal(x1,x2)
numpy.defchararray.index(a,sub,start=0,end=None)
numpy.defchararray.isalnum(a)
numpy.defchararray.isalpha(a)
numpy.defchararray.isdecimal(a)
numpy.defchararray.isdigit(a)
numpy.defchararray.islower(a)
numpy.defchararray.isnumeric(a)
numpy.defchararray.isspace(a)
numpy.defchararray.istitle(a)
numpy.defchararray.isupper(a)
numpy.defchararray.join(sep,seq)
numpy.defchararray.less(x1,x2)
numpy.defchararray.less_equal(x1,x2)
numpy.defchararray.ljust(a,width,fillchar='')
numpy.defchararray.lower(a)
numpy.defchararray.mod(a,values)
numpy.defchararray.multiply(a,i)
numpy.defchararray.not_equal(x1,x2)
numpy.defchararray.partition(a,sep)
numpy.defchararray.replace(a,old,new,count=None)
numpy.defchararray.rfind(a,sub,start=0,end=None)
numpy.defchararray.rindex(a,sub,start=0,end=None)
numpy.defchararray.rjust(a,width,fillchar='')
numpy.defchararray.rpartition(a,sep)
numpy.defchararray.rsplit(a,sep=None,maxsplit=None)
numpy.defchararray.split(a,sep=None,maxsplit=None)
numpy.defchararray.splitlines(a,keepends=None)
numpy.defchararray.startswith(a,prefix,start=0,end=None)
numpy.defchararray.swapcase(a)
numpy.defchararray.title(a)
numpy.defchararray.translate(a,table,deletechars=None)
numpy.defchararray.upper(a)
numpy.defchararray.zfill(a,width)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/machar.py----------------------------------------
A:numpy.core.machar.one->float_conv(1)
A:numpy.core.machar.itemp->int_conv(temp - a)
A:numpy.core.machar.beta->float_conv(ibeta)
A:numpy.core.machar.self.epsneg->float_to_float(epsneg)
A:numpy.core.machar.self._str_epsneg->float_to_str(epsneg)
A:numpy.core.machar.self.eps->float_to_float(eps)
A:numpy.core.machar.self._str_eps->float_to_str(eps)
A:numpy.core.machar.self.xmin->float_to_float(xmin)
A:numpy.core.machar.self._str_xmin->float_to_str(xmin)
A:numpy.core.machar.self.xmax->float_to_float(xmax)
A:numpy.core.machar.self._str_xmax->float_to_str(xmax)
A:numpy.core.machar.self.precision->int(-math.log10(float_to_float(self.eps)))
A:numpy.core.machar.self.resolution->float_to_float(resolution)
A:numpy.core.machar.self._str_resolution->float_to_str(resolution)
numpy.MachAr(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.MachAr._do_init(self,float_conv,int_conv,float_to_float,float_to_str,title)
numpy.core.MachAr.__str__(self)
numpy.core.machar.MachAr(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.core.machar.MachAr.__init__(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.core.machar.MachAr.__str__(self)
numpy.core.machar.MachAr._do_init(self,float_conv,int_conv,float_to_float,float_to_str,title)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/memmap.py----------------------------------------
A:numpy.core.memmap.fid->open(filename, (mode == 'c' and 'r' or mode) + 'b')
A:numpy.core.memmap.flen->open(filename, (mode == 'c' and 'r' or mode) + 'b').tell()
A:numpy.core.memmap.descr->dtypedescr(dtype)
A:numpy.core.memmap.bytes->long(offset + size * _dbytes)
A:numpy.core.memmap.mm->mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)
A:numpy.core.memmap.self->numeric.ndarray.__new__(subtype, shape, dtype=descr, buffer=mm, offset=offset, order=order)
A:numpy.core.memmap.self.filename->os.path.abspath(filename.name)
numpy.__array_finalize__(self,obj)
numpy.core.memmap.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy.core.memmap.memmap.__array_finalize__(self,obj)
numpy.core.memmap.memmap.__new__(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy.core.memmap.memmap.flush(self)
numpy.flush(self)
numpy.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/numeric.py----------------------------------------
A:numpy.core.numeric.ufunc->type(sin)
A:numpy.core.numeric.res->empty((N,) + dimensions, dtype=dtype)
A:numpy.core.numeric.a->asarray(a).swapaxes(axisa, 0)
A:numpy.core.numeric.mall->getattr(module, '__all__')
A:numpy.core.numeric.arr->arr.copy(copychar).copy(copychar)
A:numpy.core.numeric.mode->_mode_from_name(mode)
A:numpy.core.numeric.b->asarray(b).swapaxes(axisb, 0)
A:numpy.core.numeric.axes_a->list(axes_a)
A:numpy.core.numeric.axes_b->list(axes_b)
A:numpy.core.numeric.na->len(axes_a)
A:numpy.core.numeric.nb->len(axes_b)
A:numpy.core.numeric.nda->len(a.shape)
A:numpy.core.numeric.ndb->len(b.shape)
A:numpy.core.numeric.at->asarray(a).swapaxes(axisa, 0).transpose(newaxes_a).reshape(newshape_a)
A:numpy.core.numeric.bt->asarray(b).swapaxes(axisb, 0).transpose(newaxes_b).reshape(newshape_b)
A:numpy.core.numeric.indexes->concatenate((arange(n - shift, n), arange(n - shift)))
A:numpy.core.numeric.axes->list(range(0, n))
A:numpy.core.numeric.cp->array([x, y, z])
A:numpy.core.numeric.lst->array2string(arr, max_line_width, precision, suppress_small, ', ', 'array(')
A:numpy.core.numeric.dimensions->tuple(dimensions)
A:numpy.core.numeric.N->len(dimensions)
A:numpy.core.numeric.tmp->arange(dim, dtype=dtype)
A:numpy.core.numeric.val->zeros(newdim, dtype)
A:numpy.core.numeric.dtype->kwargs.pop('dtype', float)
A:numpy.core.numeric.args->indices(shape, dtype=dtype)
A:numpy.core.numeric.ostr->hex(num)
A:numpy.core.numeric.bin->bin.zfill(width).zfill(width)
A:numpy.core.numeric.num->abs(number)
A:numpy.core.numeric.file->open(file, 'rb')
A:numpy.core.numeric.dt->dtype(descr)
A:numpy.core.numeric.x->array(a, copy=False, subok=True, ndmin=1)
A:numpy.core.numeric.y->array(b, copy=False, subok=True, ndmin=1)
A:numpy.core.numeric.xinf->isinf(x)
A:numpy.core.numeric.yinf->isinf(y)
A:numpy.core.numeric.r->all(less_equal(abs(x - y), atol + rtol * abs(y)))
A:numpy.core.numeric.result->bool(result)
A:numpy.core.numeric.xfin->isfinite(x)
A:numpy.core.numeric.yfin->isfinite(y)
A:numpy.core.numeric.cond->zeros_like(finite, subok=True)
A:numpy.core.numeric.cond[finite]->within_tol(x[finite], y[finite], atol, rtol)
A:numpy.core.numeric.pyvals->umath.geterrobj()
A:numpy.core.numeric.old->geterrcall()
A:numpy.core.numeric._Unspecified->_unspecified()
A:numpy.core.numeric.self.call->kwargs.pop('call', _Unspecified)
A:numpy.core.numeric.self.oldstate->seterr(**self.kwargs)
A:numpy.core.numeric.self.oldcall->seterrcall(self.call)
A:numpy.core.numeric.False_->bool_(False)
A:numpy.core.numeric.True_->bool_(True)
numpy.ComplexWarning(RuntimeWarning)
numpy._maketup(descr,val)
numpy._mode_from_name(mode)
numpy._move_axis_to_0(a,axis)
numpy._setdef()
numpy._unspecified(object)
numpy.allclose(a,b,rtol=1e-05,atol=1e-08)
numpy.argwhere(a)
numpy.array_equal(a1,a2)
numpy.array_equiv(a1,a2)
numpy.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.asanyarray(a,dtype=None,order=None)
numpy.asarray(a,dtype=None,order=None)
numpy.ascontiguousarray(a,dtype=None)
numpy.asfortranarray(a,dtype=None)
numpy.base_repr(number,base=2,padding=0)
numpy.binary_repr(num,width=None)
numpy.convolve(a,v,mode='full')
numpy.core.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy.core.numeric.ComplexWarning(RuntimeWarning)
numpy.core.numeric._maketup(descr,val)
numpy.core.numeric._mode_from_name(mode)
numpy.core.numeric._move_axis_to_0(a,axis)
numpy.core.numeric._setdef()
numpy.core.numeric._unspecified(object)
numpy.core.numeric.allclose(a,b,rtol=1e-05,atol=1e-08)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.array_equal(a1,a2)
numpy.core.numeric.array_equiv(a1,a2)
numpy.core.numeric.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.core.numeric.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy.core.numeric.asanyarray(a,dtype=None,order=None)
numpy.core.numeric.asarray(a,dtype=None,order=None)
numpy.core.numeric.ascontiguousarray(a,dtype=None)
numpy.core.numeric.asfortranarray(a,dtype=None)
numpy.core.numeric.base_repr(number,base=2,padding=0)
numpy.core.numeric.binary_repr(num,width=None)
numpy.core.numeric.convolve(a,v,mode='full')
numpy.core.numeric.correlate(a,v,mode='valid',old_behavior=False)
numpy.core.numeric.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy.core.numeric.errstate(self,**kwargs)
numpy.core.numeric.errstate.__enter__(self)
numpy.core.numeric.errstate.__exit__(self,*exc_info)
numpy.core.numeric.errstate.__init__(self,**kwargs)
numpy.core.numeric.extend_all(module)
numpy.core.numeric.flatnonzero(a)
numpy.core.numeric.fromfunction(function,shape,**kwargs)
numpy.core.numeric.full(shape,fill_value,dtype=None,order='C')
numpy.core.numeric.full_like(a,fill_value,dtype=None,order='K',subok=True)
numpy.core.numeric.getbufsize()
numpy.core.numeric.geterr()
numpy.core.numeric.geterrcall()
numpy.core.numeric.identity(n,dtype=None)
numpy.core.numeric.indices(dimensions,dtype=int)
numpy.core.numeric.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.core.numeric.isfortran(a)
numpy.core.numeric.isscalar(num)
numpy.core.numeric.load(file)
numpy.core.numeric.ones(shape,dtype=None,order='C')
numpy.core.numeric.ones_like(a,dtype=None,order='K',subok=True)
numpy.core.numeric.outer(a,b)
numpy.core.numeric.require(a,dtype=None,requirements=None)
numpy.core.numeric.roll(a,shift,axis=None)
numpy.core.numeric.rollaxis(a,axis,start=0)
numpy.core.numeric.set_string_function(f,repr=True)
numpy.core.numeric.setbufsize(size)
numpy.core.numeric.seterr(all=None,divide=None,over=None,under=None,invalid=None)
numpy.core.numeric.seterrcall(func)
numpy.core.numeric.tensordot(a,b,axes=2)
numpy.core.numeric.zeros_like(a,dtype=None,order='K',subok=True)
numpy.core.set_string_function(f,repr=True)
numpy.correlate(a,v,mode='valid',old_behavior=False)
numpy.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy.errstate(self,**kwargs)
numpy.errstate.__enter__(self)
numpy.errstate.__exit__(self,*exc_info)
numpy.extend_all(module)
numpy.flatnonzero(a)
numpy.fromfunction(function,shape,**kwargs)
numpy.full(shape,fill_value,dtype=None,order='C')
numpy.full_like(a,fill_value,dtype=None,order='K',subok=True)
numpy.getbufsize()
numpy.geterr()
numpy.geterrcall()
numpy.identity(n,dtype=None)
numpy.indices(dimensions,dtype=int)
numpy.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.isfortran(a)
numpy.isscalar(num)
numpy.load(file)
numpy.ones(shape,dtype=None,order='C')
numpy.ones_like(a,dtype=None,order='K',subok=True)
numpy.outer(a,b)
numpy.require(a,dtype=None,requirements=None)
numpy.roll(a,shift,axis=None)
numpy.rollaxis(a,axis,start=0)
numpy.setbufsize(size)
numpy.seterr(all=None,divide=None,over=None,under=None,invalid=None)
numpy.seterrcall(func)
numpy.tensordot(a,b,axes=2)
numpy.zeros_like(a,dtype=None,order='K',subok=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/shape_base.py----------------------------------------
A:numpy.core.shape_base.ary->asanyarray(ary)
A:numpy.core.shape_base.result->asanyarray(ary).reshape(1, 1, 1)
numpy.atleast_1d(*arys)
numpy.atleast_2d(*arys)
numpy.atleast_3d(*arys)
numpy.core.shape_base.atleast_1d(*arys)
numpy.core.shape_base.atleast_2d(*arys)
numpy.core.shape_base.atleast_3d(*arys)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.vstack(tup)
numpy.hstack(tup)
numpy.vstack(tup)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/arrayprint.py----------------------------------------
A:numpy.core.arrayprint.d->dict(precision=_float_output_precision, threshold=_summaryThreshold, edgeitems=_summaryEdgeItems, linewidth=_line_width, suppress=_float_output_suppress_small, nanstr=_nan_str, infstr=_inf_str, formatter=_formatter)
A:numpy.core.arrayprint.b->_nc.concatenate(tuple(l))
A:numpy.core.arrayprint.data->ravel(a)
A:numpy.core.arrayprint.k->_convert_arrays(k)
A:numpy.core.arrayprint.x->_convert_arrays(x)
A:numpy.core.arrayprint.lst->_array2string(a, max_line_width, precision, suppress_small, separator, prefix, formatter=formatter)
A:numpy.core.arrayprint.obj->_convert_arrays(obj)
A:numpy.core.arrayprint.(s, line)->_extendLine(s, line, word, max_line_len, next_line_prefix)
A:numpy.core.arrayprint.word->format_function(a[-1])
A:numpy.core.arrayprint.sep->separator.rstrip()
A:numpy.core.arrayprint.non_zero->absolute(data.compress(valid))
A:numpy.core.arrayprint.max_val->umath.maximum.reduce(non_zero)
A:numpy.core.arrayprint.min_val->umath.minimum.reduce(non_zero)
A:numpy.core.arrayprint.precision->min(self.precision, precision)
A:numpy.core.arrayprint.self.max_str_len->max(self.max_str_len, len(_nan_str), len(_inf_str) + 1)
A:numpy.core.arrayprint.z->self.imag_format(x.imag, strip_zeros=False).rstrip('0')
A:numpy.core.arrayprint.max_str_len->max(len(str(maximum.reduce(v))), len(str(minimum.reduce(v))))
A:numpy.core.arrayprint.self.real_format->FloatFormat(x.real, precision, suppress_small)
A:numpy.core.arrayprint.self.imag_format->FloatFormat(x.imag, precision, suppress_small, sign=True)
A:numpy.core.arrayprint.r->self.real_format(x.real, strip_zeros=False)
A:numpy.core.arrayprint.i->self.imag_format(x.imag, strip_zeros=False)
A:numpy.core.arrayprint.v->ravel(a).view('i8')
numpy.core.arrayprint.ComplexFormat(self,x,precision,suppress_small)
numpy.core.arrayprint.ComplexFormat.__init__(self,x,precision,suppress_small)
numpy.core.arrayprint.DatetimeFormat(self,x,unit=None,timezone=None,casting='same_kind')
numpy.core.arrayprint.DatetimeFormat.__init__(self,x,unit=None,timezone=None,casting='same_kind')
numpy.core.arrayprint.FloatFormat(self,data,precision,suppress_small,sign=False)
numpy.core.arrayprint.FloatFormat.__init__(self,data,precision,suppress_small,sign=False)
numpy.core.arrayprint.FloatFormat.fillFormat(self,data)
numpy.core.arrayprint.IntegerFormat(self,data)
numpy.core.arrayprint.IntegerFormat.__init__(self,data)
numpy.core.arrayprint.LongComplexFormat(self,precision)
numpy.core.arrayprint.LongComplexFormat.__init__(self,precision)
numpy.core.arrayprint.LongFloatFormat(self,precision,sign=False)
numpy.core.arrayprint.LongFloatFormat.__init__(self,precision,sign=False)
numpy.core.arrayprint.TimedeltaFormat(self,data)
numpy.core.arrayprint.TimedeltaFormat.__init__(self,data)
numpy.core.arrayprint._array2string(a,max_line_width,precision,suppress_small,separator='',prefix='',formatter=None)
numpy.core.arrayprint._boolFormatter(x)
numpy.core.arrayprint._convert_arrays(obj)
numpy.core.arrayprint._digits(x,precision,format)
numpy.core.arrayprint._extendLine(s,line,word,max_line_len,next_line_prefix)
numpy.core.arrayprint._formatArray(a,format_function,rank,max_line_len,next_line_prefix,separator,edge_items,summary_insert)
numpy.core.arrayprint._leading_trailing(a)
numpy.core.arrayprint.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',prefix='',style=repr,formatter=None)
numpy.core.arrayprint.get_printoptions()
numpy.core.arrayprint.product(x,y)
numpy.core.arrayprint.repr_format(x)
numpy.core.arrayprint.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,formatter=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/_internal.py----------------------------------------
A:numpy.core._internal._nbo->asbytes('>')
A:numpy.core._internal.fnames->list(adict.keys())
A:numpy.core._internal.n->len(obj)
A:numpy.core._internal.num->int(obj[1])
A:numpy.core._internal.format->dtype(obj[0], align=align)
A:numpy.core._internal.(names, formats, offsets, titles)->_makenames_list(adict, align)
A:numpy.core._internal.new->descriptor.metadata.copy()
A:numpy.core._internal.format_re->re.compile(asbytes('(?P<order1>[<>|=]?)(?P<repeats> *[(]?[ ,0-9L]*[)]? *)(?P<order2>[<>|=]?)(?P<dtype>[A-Za-z0-9.]*(?:\\[[a-zA-Z0-9,.]+\\])?)'))
A:numpy.core._internal.sep_re->re.compile(asbytes('\\s*,\\s*'))
A:numpy.core._internal.space_re->re.compile(asbytes('\\s+$'))
A:numpy.core._internal.mo->re.compile(asbytes('\\s*,\\s*')).match(astr, pos=startindex)
A:numpy.core._internal.(order1, repeats, order2, dtype)->re.compile(asbytes('\\s*,\\s*')).match(astr, pos=startindex).groups()
A:numpy.core._internal.startindex->re.compile(asbytes('\\s*,\\s*')).match(astr, pos=startindex).end()
A:numpy.core._internal.order1->_convorder.get(order1, order1)
A:numpy.core._internal.order2->_convorder.get(order2, order2)
A:numpy.core._internal.order->asbytes('')
A:numpy.core._internal.self._ctypes->_missing_ctypes()
A:numpy.core._internal.data->property(get_data, None, doc='c-types data')
A:numpy.core._internal.shape->tuple(map(int, spec[1:j].split(',')))
A:numpy.core._internal.strides->property(get_strides, None, doc='c-types strides')
A:numpy.core._internal._as_parameter_->property(get_as_parameter, None, doc='_as parameter_')
A:numpy.core._internal.nameslist->list(oldnames)
A:numpy.core._internal.view->ary.view(dtype=view_dtype)
A:numpy.core._internal._pep3118_native_typechars->''.join(_pep3118_native_map.keys())
A:numpy.core._internal._pep3118_standard_typechars->''.join(_pep3118_standard_map.keys())
A:numpy.core._internal.j->spec.index(')')
A:numpy.core._internal.itemsize->int(spec[:j])
A:numpy.core._internal.(value, spec, align, next_byteorder)->_dtype_from_pep3118(spec[2:], byteorder=byteorder, is_subdtype=True)
A:numpy.core._internal.numpy_byteorder->{'@': '=', '^': '='}.get(byteorder, byteorder)
A:numpy.core._internal.value->dtype(vfields)
A:numpy.core._internal.name->get_dummy_name()
A:numpy.core._internal.ret->_add_trailing_padding(ret, padding)
A:numpy.core._internal.vfields->dict(value.fields)
A:numpy.core._internal.names->list(value.names)
A:numpy.core._internal.value.names->tuple(names)
numpy.core._internal._add_trailing_padding(value,padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)
numpy.core._internal._ctypes(self,array,ptr=None)
numpy.core._internal._ctypes.__init__(self,array,ptr=None)
numpy.core._internal._ctypes.data_as(self,obj)
numpy.core._internal._ctypes.get_as_parameter(self)
numpy.core._internal._ctypes.get_data(self)
numpy.core._internal._ctypes.get_shape(self)
numpy.core._internal._ctypes.get_strides(self)
numpy.core._internal._ctypes.shape_as(self,obj)
numpy.core._internal._ctypes.strides_as(self,obj)
numpy.core._internal._dtype_from_pep3118(spec,byteorder='@',is_subdtype=False)
numpy.core._internal._gcd(a,b)
numpy.core._internal._getintp_ctype()
numpy.core._internal._index_fields(ary,fields)
numpy.core._internal._makenames_list(adict,align)
numpy.core._internal._missing_ctypes(object)
numpy.core._internal._missing_ctypes.c_void_p(self,num)
numpy.core._internal._missing_ctypes.cast(self,num,obj)
numpy.core._internal._newnames(datatype,order)
numpy.core._internal._prod(a)
numpy.core._internal._reconstruct(subtype,shape,dtype)
numpy.core._internal._usefields(adict,align)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/fromnumeric.py----------------------------------------
A:numpy.core.fromnumeric._gentype->type(None)
A:numpy.core.fromnumeric.result->wrap(result)
A:numpy.core.fromnumeric.a->concatenate((a,) * n_copies)
A:numpy.core.fromnumeric.Na->len(a)
A:numpy.core.fromnumeric.total_size->um.multiply.reduce(new_shape)
A:numpy.core.fromnumeric.n_copies->int(total_size / Na)
A:numpy.core.fromnumeric.res->_sum_(a)
A:numpy.core.fromnumeric.arr->asanyarray(a)
numpy._wrapit(obj,method,*args,**kwds)
numpy.alen(a)
numpy.all(a,axis=None,out=None,keepdims=False)
numpy.alltrue(a,axis=None,out=None,keepdims=False)
numpy.any(a,axis=None,out=None,keepdims=False)
numpy.argmax(a,axis=None)
numpy.argmin(a,axis=None)
numpy.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy.argsort(a,axis=-1,kind='quicksort',order=None)
numpy.around(a,decimals=0,out=None)
numpy.choose(a,choices,out=None,mode='raise')
numpy.clip(a,a_min,a_max,out=None)
numpy.compress(condition,a,axis=None,out=None)
numpy.core.fromnumeric._wrapit(obj,method,*args,**kwds)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.alltrue(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.amax(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.amin(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.any(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.argmax(a,axis=None)
numpy.core.fromnumeric.argmin(a,axis=None)
numpy.core.fromnumeric.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy.core.fromnumeric.argsort(a,axis=-1,kind='quicksort',order=None)
numpy.core.fromnumeric.around(a,decimals=0,out=None)
numpy.core.fromnumeric.choose(a,choices,out=None,mode='raise')
numpy.core.fromnumeric.clip(a,a_min,a_max,out=None)
numpy.core.fromnumeric.compress(condition,a,axis=None,out=None)
numpy.core.fromnumeric.cumprod(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric.cumproduct(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric.cumsum(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric.diagonal(a,offset=0,axis1=0,axis2=1)
numpy.core.fromnumeric.mean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy.core.fromnumeric.prod(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core.fromnumeric.product(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core.fromnumeric.ptp(a,axis=None,out=None)
numpy.core.fromnumeric.put(a,ind,v,mode='raise')
numpy.core.fromnumeric.rank(a)
numpy.core.fromnumeric.ravel(a,order='C')
numpy.core.fromnumeric.repeat(a,repeats,axis=None)
numpy.core.fromnumeric.reshape(a,newshape,order='C')
numpy.core.fromnumeric.resize(a,new_shape)
numpy.core.fromnumeric.round_(a,decimals=0,out=None)
numpy.core.fromnumeric.searchsorted(a,v,side='left',sorter=None)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a,axis=None)
numpy.core.fromnumeric.sometrue(a,axis=None,out=None,keepdims=False)
numpy.core.fromnumeric.sort(a,axis=-1,kind='quicksort',order=None)
numpy.core.fromnumeric.squeeze(a,axis=None)
numpy.core.fromnumeric.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.core.fromnumeric.sum(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core.fromnumeric.swapaxes(a,axis1,axis2)
numpy.core.fromnumeric.take(a,indices,axis=None,out=None,mode='raise')
numpy.core.fromnumeric.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.core.fromnumeric.transpose(a,axes=None)
numpy.core.fromnumeric.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.cumprod(a,axis=None,dtype=None,out=None)
numpy.cumproduct(a,axis=None,dtype=None,out=None)
numpy.cumsum(a,axis=None,dtype=None,out=None)
numpy.diagonal(a,offset=0,axis1=0,axis2=1)
numpy.max(a,axis=None,out=None,keepdims=False)
numpy.mean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.min(a,axis=None,out=None,keepdims=False)
numpy.ndim(a)
numpy.nonzero(a)
numpy.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy.prod(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.product(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.ptp(a,axis=None,out=None)
numpy.put(a,ind,v,mode='raise')
numpy.rank(a)
numpy.ravel(a,order='C')
numpy.repeat(a,repeats,axis=None)
numpy.reshape(a,newshape,order='C')
numpy.resize(a,new_shape)
numpy.round(a,decimals=0,out=None)
numpy.searchsorted(a,v,side='left',sorter=None)
numpy.shape(a)
numpy.size(a,axis=None)
numpy.sometrue(a,axis=None,out=None,keepdims=False)
numpy.sort(a,axis=-1,kind='quicksort',order=None)
numpy.squeeze(a,axis=None)
numpy.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.sum(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.swapaxes(a,axis1,axis2)
numpy.take(a,indices,axis=None,out=None,mode='raise')
numpy.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.transpose(a,axes=None)
numpy.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/setup.py----------------------------------------
A:numpy.core.setup.out->copy.deepcopy(pickle.loads(self._check_complex))
A:numpy.core.setup.self._check_types->pickle.dumps(out)
A:numpy.core.setup.self._check_ieee_macros->pickle.dumps(out)
A:numpy.core.setup.self._check_complex->pickle.dumps(out)
A:numpy.core.setup.a->get_build_architecture()
A:numpy.core.setup.decl->dict([(f, True) for f in flist])
A:numpy.core.setup.st->config.get_config_cmd().try_link('int main(void) { return 0;}')
A:numpy.core.setup.py_symbol->fname2def('decl_%s' % f)
A:numpy.core.setup.already_declared->config.get_config_cmd().check_decl('SIZEOF_%s' % sym2def(type), headers=['Python.h'])
A:numpy.core.setup.result->config.get_config_cmd().check_header('Python.h')
A:numpy.core.setup.res->config.get_config_cmd().check_type_size('long long', expected=expected['long long'])
A:numpy.core.setup.mathlib->os.environ.get('MATHLIB')
A:numpy.core.setup.config->Configuration('core', parent_package, top_path)
A:numpy.core.setup.codegen_dir->join(local_dir, 'code_generators')
A:numpy.core.setup.generate_umath_py->join(codegen_dir, 'generate_umath.py')
A:numpy.core.setup.n->dot_join(config.name, 'generate_umath')
A:numpy.core.setup.generate_umath->imp.load_module('_'.join(n.split('.')), open(generate_umath_py, 'U'), generate_umath_py, ('.py', 'U', 1))
A:numpy.core.setup.cocache->CallOnceOnly()
A:numpy.core.setup.target->join(build_dir, header_dir, '__umath_generated.c')
A:numpy.core.setup.d->os.path.dirname(target)
A:numpy.core.setup.config_cmd->Configuration('core', parent_package, top_path).get_config_cmd()
A:numpy.core.setup.(moredefs, ignored)->CallOnceOnly().check_types(config_cmd, ext, build_dir)
A:numpy.core.setup.mathlibs->check_mathlib(config_cmd)
A:numpy.core.setup.inline->Configuration('core', parent_package, top_path).get_config_cmd().check_inline()
A:numpy.core.setup.rep->check_long_double_representation(config_cmd)
A:numpy.core.setup.target_f->open(target)
A:numpy.core.setup.value->line[len(s):].strip()
A:numpy.core.setup.incl_dir->os.path.dirname(target)
A:numpy.core.setup.(ignored, moredefs)->CallOnceOnly().check_types(config_cmd, ext, build_dir)
A:numpy.core.setup.hidden_visibility->visibility_define(config_cmd)
A:numpy.core.setup.script->join(codegen_dir, module_name + '.py')
A:numpy.core.setup.m->__import__(module_name)
A:numpy.core.setup.(h_file, c_file, doc_file)->__import__(module_name).generate_api(os.path.join(build_dir, header_dir))
A:numpy.core.setup.generate_numpy_api->generate_api_func('generate_numpy_api')
A:numpy.core.setup.generate_ufunc_api->generate_api_func('generate_ufunc_api')
A:numpy.core.setup.subst_dict->dict([('sep', os.path.sep), ('pkgname', 'numpy.core')])
A:numpy.core.setup.mlibs->check_mathlib(config_cmd)
A:numpy.core.setup.posix_mlib->' '.join(['-l%s' % l for l in mlibs])
A:numpy.core.setup.msvc_mlib->' '.join(['%s.lib' % l for l in mlibs])
A:numpy.core.setup.subpath->join('src', 'umath')
A:numpy.core.setup.cmd->get_cmd('build_src')
A:numpy.core.setup.dir->os.path.dirname(target)
A:numpy.core.setup.f->open(target, 'w')
A:numpy.core.setup.blas_info->get_info('blas_opt', 0)
numpy.core.setup.CallOnceOnly(self)
numpy.core.setup.CallOnceOnly.__init__(self)
numpy.core.setup.CallOnceOnly.check_complex(self,*a,**kw)
numpy.core.setup.CallOnceOnly.check_ieee_macros(self,*a,**kw)
numpy.core.setup.CallOnceOnly.check_types(self,*a,**kw)
numpy.core.setup.check_complex(config,mathlibs)
numpy.core.setup.check_ieee_macros(config)
numpy.core.setup.check_math_capabilities(config,moredefs,mathlibs)
numpy.core.setup.check_mathlib(config_cmd)
numpy.core.setup.check_types(config_cmd,ext,build_dir)
numpy.core.setup.configuration(parent_package='',top_path=None)
numpy.core.setup.is_npy_no_signal()
numpy.core.setup.is_npy_no_smp()
numpy.core.setup.pythonlib_dir()
numpy.core.setup.visibility_define(config)
numpy.core.setup.win32_checks(deflist)
numpy.setup.CallOnceOnly(self)
numpy.setup.CallOnceOnly.check_ieee_macros(self,*a,**kw)
numpy.setup.CallOnceOnly.check_types(self,*a,**kw)
numpy.setup.check_ieee_macros(config)
numpy.setup.check_math_capabilities(config,moredefs,mathlibs)
numpy.setup.check_mathlib(config_cmd)
numpy.setup.check_types(config_cmd,ext,build_dir)
numpy.setup.configuration(parent_package='',top_path=None)
numpy.setup.is_npy_no_signal()
numpy.setup.is_npy_no_smp()
numpy.setup.pythonlib_dir()
numpy.setup.visibility_define(config)
numpy.setup.win32_checks(deflist)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/setup_common.py----------------------------------------
A:numpy.core.setup_common.v->config.get_version('../version.py')
A:numpy.core.setup_common.m->__import__('genapi')
A:numpy.core.setup_common.numpy_api->__import__('numpy_api')
A:numpy.core.setup_common.curapi_hash->__import__('genapi').fullapi_hash(numpy_api.full_api)
A:numpy.core.setup_common.apis_hash->__import__('genapi').get_versions_hash()
A:numpy.core.setup_common.(curapi_hash, api_hash)->get_api_versions(apiversion, codegen_dir)
A:numpy.core.setup_common.define->symbol.replace(' ', '_')
A:numpy.core.setup_common.(src, object)->cmd._compile(body, None, None, 'c')
A:numpy.core.setup_common.type->long_double_representation(pyod(object))
A:numpy.core.setup_common.fid->open(filename, 'rb')
A:numpy.core.setup_common.saw->copy.copy(read)
numpy.core.setup_common.MismatchCAPIWarning(Warning)
numpy.core.setup_common.check_api_version(apiversion,codegen_dir)
numpy.core.setup_common.check_long_double_representation(cmd)
numpy.core.setup_common.fname2def(name)
numpy.core.setup_common.get_api_versions(apiversion,codegen_dir)
numpy.core.setup_common.is_released(config)
numpy.core.setup_common.long_double_representation(lines)
numpy.core.setup_common.pyod(filename)
numpy.core.setup_common.sym2def(symbol)
numpy.core.setup_common.type2def(symbol)
numpy.setup_common.MismatchCAPIWarning(Warning)
numpy.setup_common.check_api_version(apiversion,codegen_dir)
numpy.setup_common.check_long_double_representation(cmd)
numpy.setup_common.fname2def(name)
numpy.setup_common.get_api_versions(apiversion,codegen_dir)
numpy.setup_common.is_released(config)
numpy.setup_common.long_double_representation(lines)
numpy.setup_common.pyod(filename)
numpy.setup_common.sym2def(symbol)
numpy.setup_common.type2def(symbol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/function_base.py----------------------------------------
A:numpy.core.function_base.num->int(num)
A:numpy.core.function_base.y->linspace(start, stop, num=num, endpoint=endpoint)
numpy.core.function_base.linspace(start,stop,num=50,endpoint=True,retstep=False)
numpy.core.function_base.logspace(start,stop,num=50,endpoint=True,base=10.0)
numpy.linspace(start,stop,num=50,endpoint=True,retstep=False)
numpy.logspace(start,stop,num=50,endpoint=True,base=10.0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/records.py----------------------------------------
A:numpy.core.records.formats->','.join(formats)
A:numpy.core.records.dtype->sb.dtype(dtype)
A:numpy.core.records.self._nfields->len(keys)
A:numpy.core.records.names->names.split(',').split(',')
A:numpy.core.records._dup->find_duplicate(self._names)
A:numpy.core.records.descr->sb.dtype(dtype)
A:numpy.core.records.res->obj.view(dtype).view(recarray)
A:numpy.core.records.obj->obj.view(dtype).view(dtype)
A:numpy.core.records.maxlen->max([len(name) for name in names])
A:numpy.core.records.self->ndarray.__new__(subtype, shape, (record, descr), buffer=buf, offset=offset, strides=strides, order=order)
A:numpy.core.records.ret->ndarray.__repr__(self)
A:numpy.core.records.parsed->format_parser(formats, names, titles, aligned, byteorder)
A:numpy.core.records.nn->len(descr[k].shape)
A:numpy.core.records._array->recarray(shape, descr)
A:numpy.core.records.nfields->len(recList[0])
A:numpy.core.records.retval->sb.array(recList, dtype=descr)
A:numpy.core.records.shape->tuple(shape)
A:numpy.core.records._array[k]->tuple(recList[k])
A:numpy.core.records.fn->open(fd, 'rb').fileno()
A:numpy.core.records.st->os.fstat(fn)
A:numpy.core.records.fd->open(fd, 'rb')
A:numpy.core.records.size->get_remaining_size(fd)
A:numpy.core.records.shapeprod->sb.array(shape).prod()
A:numpy.core.records.nbytesread->open(fd, 'rb').readinto(_array.data)
A:numpy.core.records.new->new.copy().copy()
A:numpy.core.records.res.dtype->sb.dtype((record, res.dtype))
A:numpy.core.records.interface->getattr(obj, '__array_interface__', None)
numpy.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy.core.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.record.__str__(self)
numpy.core.record.pprint(self)
numpy.core.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy.core.records.find_duplicate(list)
numpy.core.records.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy.core.records.format_parser.__init__(self,formats,names,titles,aligned=False,byteorder=None)
numpy.core.records.format_parser._createdescr(self,byteorder)
numpy.core.records.format_parser._parseFormats(self,formats,aligned=0)
numpy.core.records.format_parser._setfieldnames(self,names,titles)
numpy.core.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.get_remaining_size(fd)
numpy.core.records.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.core.records.recarray.__getattribute__(self,attr)
numpy.core.records.recarray.__getitem__(self,indx)
numpy.core.records.recarray.__new__(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.core.records.recarray.__repr__(self)
numpy.core.records.recarray.__setattr__(self,attr,val)
numpy.core.records.recarray.field(self,attr,val=None)
numpy.core.records.recarray.view(self,dtype=None,type=None)
numpy.core.records.record(nt.void)
numpy.core.records.record.__getattribute__(self,attr)
numpy.core.records.record.__repr__(self)
numpy.core.records.record.__setattr__(self,attr,val)
numpy.core.records.record.__str__(self)
numpy.core.records.record.pprint(self)
numpy.find_duplicate(list)
numpy.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy.format_parser._createdescr(self,byteorder)
numpy.format_parser._parseFormats(self,formats,aligned=0)
numpy.format_parser._setfieldnames(self,names,titles)
numpy.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.get_remaining_size(fd)
numpy.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.recarray.__getattribute__(self,attr)
numpy.recarray.__getitem__(self,indx)
numpy.recarray.__repr__(self)
numpy.recarray.__setattr__(self,attr,val)
numpy.recarray.field(self,attr,val=None)
numpy.recarray.view(self,dtype=None,type=None)
numpy.record(nt.void)
numpy.record.__getattribute__(self,attr)
numpy.record.__repr__(self)
numpy.record.__setattr__(self,attr,val)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/numerictypes.py----------------------------------------
A:numpy.core.numerictypes.LOWER_TABLE->''.join(_all_chars[:65] + _ascii_lower + _all_chars[65 + 26:])
A:numpy.core.numerictypes.UPPER_TABLE->''.join(_all_chars[:97] + _ascii_upper + _all_chars[97 + 26:])
A:numpy.core.numerictypes.lowered->s.translate(LOWER_TABLE)
A:numpy.core.numerictypes.uppered->s.translate(UPPER_TABLE)
A:numpy.core.numerictypes.bits->int(name[k:])
A:numpy.core.numerictypes.(base, bits)->_evalname(name)
A:numpy.core.numerictypes.name->english_lower(a)
A:numpy.core.numerictypes.(base, bit, char)->bitname(typeobj)
A:numpy.core.numerictypes.na_name->english_capitalize(base)
A:numpy.core.numerictypes._gi->dtype('p')
A:numpy.core.numerictypes.g->obj2sctype(t)
A:numpy.core.numerictypes.t->type(t)
A:numpy.core.numerictypes.res->dtype(rep)
A:numpy.core.numerictypes.mro->dtype(arg2).type.mro()
A:numpy.core.numerictypes.nbytes->_typedict()
A:numpy.core.numerictypes._alignment->_typedict()
A:numpy.core.numerictypes._maxvals->_typedict()
A:numpy.core.numerictypes._minvals->_typedict()
A:numpy.core.numerictypes.sctype->obj2sctype(sctype)
A:numpy.core.numerictypes.cast->_typedict()
A:numpy.core.numerictypes.ScalarType->tuple(ScalarType)
A:numpy.core.numerictypes._typestr->_typedict()
A:numpy.core.numerictypes.__len_test_types->len(__test_types)
A:numpy.core.numerictypes.thisind->__test_types.index(a.char)
A:numpy.core.numerictypes.N->len(dtypelist)
A:numpy.core.numerictypes.newdtype->dtype(__test_types[thisind])
A:numpy.core.numerictypes.numcoerce->len([x for x in dtypelist if newdtype >= x])
A:numpy.core.numerictypes.maxa->_can_coerce_all(array_types)
A:numpy.core.numerictypes.maxsc->_can_coerce_all(scalar_types)
A:numpy.core.numerictypes.index_a->_kind_list.index(maxa.kind)
A:numpy.core.numerictypes.index_sc->_kind_list.index(maxsc.kind)
numpy.core.numerictypes._add_aliases()
numpy.core.numerictypes._add_array_type(typename,bits)
numpy.core.numerictypes._add_integer_aliases()
numpy.core.numerictypes._add_types()
numpy.core.numerictypes._can_coerce_all(dtypelist,start=0)
numpy.core.numerictypes._construct_char_code_lookup()
numpy.core.numerictypes._construct_lookups()
numpy.core.numerictypes._evalname(name)
numpy.core.numerictypes._find_common_coerce(a,b)
numpy.core.numerictypes._set_array_types()
numpy.core.numerictypes._set_up_aliases()
numpy.core.numerictypes._typedict(dict)
numpy.core.numerictypes._typedict.__getitem__(self,obj)
numpy.core.numerictypes.bitname(obj)
numpy.core.numerictypes.english_capitalize(s)
numpy.core.numerictypes.english_lower(s)
numpy.core.numerictypes.english_upper(s)
numpy.core.numerictypes.find_common_type(array_types,scalar_types)
numpy.core.numerictypes.issctype(rep)
numpy.core.numerictypes.issubclass_(arg1,arg2)
numpy.core.numerictypes.issubdtype(arg1,arg2)
numpy.core.numerictypes.issubsctype(arg1,arg2)
numpy.core.numerictypes.maximum_sctype(t)
numpy.core.numerictypes.obj2sctype(rep,default=None)
numpy.core.numerictypes.sctype2char(sctype)
numpy.numerictypes._add_aliases()
numpy.numerictypes._add_array_type(typename,bits)
numpy.numerictypes._add_types()
numpy.numerictypes._can_coerce_all(dtypelist,start=0)
numpy.numerictypes._evalname(name)
numpy.numerictypes._find_common_coerce(a,b)
numpy.numerictypes._set_array_types()
numpy.numerictypes._set_up_aliases()
numpy.numerictypes._typedict(dict)
numpy.numerictypes._typedict.__getitem__(self,obj)
numpy.numerictypes.bitname(obj)
numpy.numerictypes.english_capitalize(s)
numpy.numerictypes.english_lower(s)
numpy.numerictypes.english_upper(s)
numpy.numerictypes.find_common_type(array_types,scalar_types)
numpy.numerictypes.issctype(rep)
numpy.numerictypes.issubclass_(arg1,arg2)
numpy.numerictypes.issubdtype(arg1,arg2)
numpy.numerictypes.issubsctype(arg1,arg2)
numpy.numerictypes.maximum_sctype(t)
numpy.numerictypes.obj2sctype(rep,default=None)
numpy.numerictypes.sctype2char(sctype)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/__init__.py----------------------------------------
A:numpy.core.__init__.mod->__import__(module)
numpy.__init__._ufunc_reduce(func)
numpy.core.__init__._ufunc_reconstruct(module,name)
numpy.core.__init__._ufunc_reduce(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/getlimits.py----------------------------------------
A:numpy.core.getlimits.dtype->numeric.dtype(type(dtype))
A:numpy.core.getlimits.obj->object.__new__(cls)._init(dtype)
A:numpy.core.getlimits.newdtype->numeric.obj2sctype(dtype)
A:numpy.core.getlimits.self.dtype->numeric.dtype(type(int_type))
A:numpy.core.getlimits.machar->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)
A:numpy.core.getlimits.self._str_tiny->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)._str_xmin.strip()
A:numpy.core.getlimits.self._str_max->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)._str_xmax.strip()
A:numpy.core.getlimits.self._str_epsneg->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)._str_epsneg.strip()
A:numpy.core.getlimits.self._str_eps->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)._str_eps.strip()
A:numpy.core.getlimits.self._str_resolution->MachAr(lambda v: array([v], dtype), lambda v: _frz(v.astype(itype))[0], lambda v: array(_frz(v)[0], dtype), lambda v: fmt % array(_frz(v)[0], dtype), 'numpy %s precision floating point number' % precname)._str_resolution.strip()
A:numpy.core.getlimits.d->self.__dict__.copy()
A:numpy.core.getlimits.val->int((1 << self.bits - 1) - 1)
A:numpy.core.getlimits.min->property(min)
A:numpy.core.getlimits.max->property(max)
A:numpy.core.getlimits.f->finfo(ntypes.longfloat)
numpy._frz(a)
numpy.core.finfo.__str__(self)
numpy.core.getlimits._frz(a)
numpy.core.getlimits.finfo(cls,dtype)
numpy.core.getlimits.finfo.__new__(cls,dtype)
numpy.core.getlimits.finfo.__repr__(self)
numpy.core.getlimits.finfo.__str__(self)
numpy.core.getlimits.finfo._init(self,dtype)
numpy.core.getlimits.iinfo(self,int_type)
numpy.core.getlimits.iinfo.__init__(self,int_type)
numpy.core.getlimits.iinfo.__repr__(self)
numpy.core.getlimits.iinfo.__str__(self)
numpy.core.getlimits.iinfo.max(self)
numpy.core.getlimits.iinfo.min(self)
numpy.core.iinfo.__str__(self)
numpy.finfo(cls,dtype)
numpy.finfo.__repr__(self)
numpy.finfo._init(self,dtype)
numpy.iinfo(self,int_type)
numpy.iinfo.__repr__(self)
numpy.iinfo.max(self)
numpy.iinfo.min(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/generate_numpy_api.py----------------------------------------
A:numpy.core.generate_numpy_api.h_file->os.path.join(output_dir, '__%s.h' % basename)
A:numpy.core.generate_numpy_api.c_file->os.path.join(output_dir, '__%s.c' % basename)
A:numpy.core.generate_numpy_api.d_file->os.path.join(output_dir, '%s.txt' % basename)
A:numpy.core.generate_numpy_api.multiarray_api_index->genapi.merge_api_dicts(multiarray_api)
A:numpy.core.generate_numpy_api.numpyapi_list->genapi.get_api_functions('NUMPY_API', multiarray_funcs)
A:numpy.core.generate_numpy_api.ordered_funcs_api->genapi.order_dict(multiarray_funcs)
A:numpy.core.generate_numpy_api.multiarray_api_dict[f.name]->FunctionApi(f.name, index, f.return_type, f.args, api_name)
A:numpy.core.generate_numpy_api.multiarray_api_dict[name]->TypeApi(name, index, 'PyTypeObject', api_name)
A:numpy.core.generate_numpy_api.fid->open(doc_file, 'w')
numpy.core.generate_numpy_api.do_generate_api(targets,sources)
numpy.core.generate_numpy_api.generate_api(output_dir,force=False)
numpy.generate_numpy_api.do_generate_api(targets,sources)
numpy.generate_numpy_api.generate_api(output_dir,force=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/_methods.py----------------------------------------
A:numpy.core._methods.axis->tuple(range(arr.ndim))
A:numpy.core._methods.arr->asanyarray(a)
A:numpy.core._methods.rcount->max([rcount - ddof, 0])
A:numpy.core._methods.dtype->numpy.core.multiarray.dtype('f8')
A:numpy.core._methods.ret->numpy.core.umath.sqrt(ret)
A:numpy.core._methods.arrmean->arrmean.dtype.type(arrmean / rcount).dtype.type(arrmean / rcount)
A:numpy.core._methods.x->numpy.core.umath.multiply(x, x, out=x)
numpy._methods._all(a,axis=None,dtype=None,out=None,keepdims=False)
numpy._methods._amax(a,axis=None,out=None,keepdims=False)
numpy._methods._amin(a,axis=None,out=None,keepdims=False)
numpy._methods._any(a,axis=None,dtype=None,out=None,keepdims=False)
numpy._methods._count_reduce_items(arr,axis)
numpy._methods._mean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy._methods._prod(a,axis=None,dtype=None,out=None,keepdims=False)
numpy._methods._std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy._methods._sum(a,axis=None,dtype=None,out=None,keepdims=False)
numpy._methods._var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.core._methods._all(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core._methods._amax(a,axis=None,out=None,keepdims=False)
numpy.core._methods._amin(a,axis=None,out=None,keepdims=False)
numpy.core._methods._any(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core._methods._count_reduce_items(arr,axis)
numpy.core._methods._mean(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core._methods._prod(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core._methods._std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)
numpy.core._methods._sum(a,axis=None,dtype=None,out=None,keepdims=False)
numpy.core._methods._var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_unicode.py----------------------------------------
A:numpy.core.tests.test_unicode.arr->str(arr)
A:numpy.core.tests.test_unicode.v->memoryview(arr)
A:numpy.core.tests.test_unicode.ucs2_value->sixu('ऀ')
A:numpy.core.tests.test_unicode.ucs4_value->sixu('\U00100900')
A:numpy.core.tests.test_unicode.ua->array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen)
A:numpy.core.tests.test_unicode.ua2->array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).newbyteorder()
A:numpy.core.tests.test_unicode.ua3->array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).newbyteorder().newbyteorder()
numpy.core.tests.test_unicode.assign_values(object)
numpy.core.tests.test_unicode.assign_values.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.assign_values.test_values0D(self)
numpy.core.tests.test_unicode.assign_values.test_valuesMD(self)
numpy.core.tests.test_unicode.assign_values.test_valuesSD(self)
numpy.core.tests.test_unicode.byteorder_values
numpy.core.tests.test_unicode.byteorder_values.test_values0D(self)
numpy.core.tests.test_unicode.byteorder_values.test_valuesMD(self)
numpy.core.tests.test_unicode.byteorder_values.test_valuesSD(self)
numpy.core.tests.test_unicode.create_values(object)
numpy.core.tests.test_unicode.create_values.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.create_values.test_values0D(self)
numpy.core.tests.test_unicode.create_values.test_valuesMD(self)
numpy.core.tests.test_unicode.create_values.test_valuesSD(self)
numpy.core.tests.test_unicode.create_zeros(object)
numpy.core.tests.test_unicode.create_zeros.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.create_zeros.test_zeros0D(self)
numpy.core.tests.test_unicode.create_zeros.test_zerosMD(self)
numpy.core.tests.test_unicode.create_zeros.test_zerosSD(self)
numpy.core.tests.test_unicode.test_assign_values_1009_ucs2(assign_values,TestCase)
numpy.core.tests.test_unicode.test_assign_values_1009_ucs4(assign_values,TestCase)
numpy.core.tests.test_unicode.test_assign_values_1_ucs2(assign_values,TestCase)
numpy.core.tests.test_unicode.test_assign_values_1_ucs4(assign_values,TestCase)
numpy.core.tests.test_unicode.test_assign_values_2_ucs2(assign_values,TestCase)
numpy.core.tests.test_unicode.test_assign_values_2_ucs4(assign_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_1009_ucs2(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_1009_ucs4(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_1_ucs2(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_1_ucs4(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_2_ucs2(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_byteorder_2_ucs4(byteorder_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_1009_ucs2(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_1009_ucs4(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_1_ucs2(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_1_ucs4(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_2_ucs2(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_values_2_ucs4(create_values,TestCase)
numpy.core.tests.test_unicode.test_create_zeros_1(create_zeros,TestCase)
numpy.core.tests.test_unicode.test_create_zeros_1009(create_zeros,TestCase)
numpy.core.tests.test_unicode.test_create_zeros_2(create_zeros,TestCase)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_blasdot.py----------------------------------------
A:numpy.core.tests.test_blasdot.a->numpy.asarray(np.random.randn(a_dim, a_dim), dtype=arr_type, order=a_order)
A:numpy.core.tests.test_blasdot.p->inner_(a, a)
A:numpy.core.tests.test_blasdot.b->numpy.asarray(np.random.randn(a_dim, b_dim), dtype=arr_type, order=b_order)
A:numpy.core.tests.test_blasdot.c->numpy.asarray(np.random.randn(b_dim, c_dim), dtype=arr_type, order=c_order)
A:numpy.core.tests.test_blasdot.d->dot(a, b)
A:numpy.core.tests.test_blasdot.f->numpy.random.random_sample((1024, 16))
A:numpy.core.tests.test_blasdot.v->numpy.random.random_sample((16, 32))
A:numpy.core.tests.test_blasdot.r->numpy.empty((1024, 32), dtype=int)
A:numpy.core.tests.test_blasdot.r2->numpy.dot(f, v)
A:numpy.core.tests.test_blasdot.a_T->numpy.asarray(np.random.randn(a_dim, a_dim), dtype=arr_type, order=a_order).T.copy(order=a_order)
A:numpy.core.tests.test_blasdot.b_T->numpy.asarray(np.random.randn(a_dim, b_dim), dtype=arr_type, order=b_order).T.copy(order=b_order)
A:numpy.core.tests.test_blasdot.c_T->numpy.asarray(np.random.randn(b_dim, c_dim), dtype=arr_type, order=c_order).T.copy(order=c_order)
numpy.core.tests.test_blasdot.TestInner(TestCase)
numpy.core.tests.test_blasdot.TestInner.test_vecself(self)
numpy.core.tests.test_blasdot.test_blasdot_used()
numpy.core.tests.test_blasdot.test_dot_2args()
numpy.core.tests.test_blasdot.test_dot_3args()
numpy.core.tests.test_blasdot.test_dot_3args_errors()
numpy.core.tests.test_blasdot.test_dot_array_order()
numpy.tests.test_blasdot.TestInner(TestCase)
numpy.tests.test_blasdot.TestInner.test_vecself(self)
numpy.tests.test_blasdot.test_blasdot_used()
numpy.tests.test_blasdot.test_dot_2args()
numpy.tests.test_blasdot.test_dot_3args()
numpy.tests.test_blasdot.test_dot_3args_errors()
numpy.tests.test_blasdot.test_dot_array_order()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_ufunc.py----------------------------------------
A:numpy.core.tests.test_ufunc.astring->asbytes("cnumpy.core\n_ufunc_reconstruct\np0\n(S'numpy.core.umath'\np1\nS'cos'\np2\ntp3\nRp4\n.")
A:numpy.core.tests.test_ufunc.x->numpy.arange(24).reshape(2, 3, 4)
A:numpy.core.tests.test_ufunc.idx->numpy.array(list(zip(np.arange(L - 2), np.arange(L - 2) + 2))).ravel()
A:numpy.core.tests.test_ufunc.x[i]->foo()
A:numpy.core.tests.test_ufunc.ret->numpy.core.umath_tests.inner1d(a, b)
A:numpy.core.tests.test_ufunc.b->numpy.array([100, 200, 300])
A:numpy.core.tests.test_ufunc.a->numpy.arange(10, dtype='u4')
A:numpy.core.tests.test_ufunc.Ba->numpy.arange(1, dtype='>f8')
A:numpy.core.tests.test_ufunc.La->numpy.arange(1, dtype='<f8')
A:numpy.core.tests.test_ufunc.c->numpy.empty(3, dtype=rational)
A:numpy.core.tests.test_ufunc.w->numpy.array([], dtype='f8')
A:numpy.core.tests.test_ufunc.d1->numpy.array(rand(2, 3, 4), dtype=tp)
A:numpy.core.tests.test_ufunc.d2->numpy.array(rand(2, 3, 4), dtype=tp)
A:numpy.core.tests.test_ufunc.base->slice_n(n - 1)
A:numpy.core.tests.test_ufunc.permute_3->permute_n(3)
A:numpy.core.tests.test_ufunc.arr->numpy.matrix([1, 2], dtype=object)
A:numpy.core.tests.test_ufunc.desired->numpy.matrix([[3, 6]], dtype=object)
A:numpy.core.tests.test_ufunc.res->numpy.divide.reduce(a, axis=())
A:numpy.core.tests.test_ufunc.sys.stderr->StringIO()
A:numpy.core.tests.test_ufunc.result->test_add_rationals(a, b)
A:numpy.core.tests.test_ufunc.expected->numpy.array([rational(1), rational(2, 3), rational(1, 2)], dtype=rational)
A:numpy.core.tests.test_ufunc.orig->numpy.arange(4)
A:numpy.core.tests.test_ufunc.index->numpy.array([1, 2, 1], np.dtype('i').newbyteorder())
A:numpy.core.tests.test_ufunc.values->numpy.array(['a', 1], dtype=np.object)
numpy.core.tests.test_ufunc.TestUfunc(TestCase)
numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction(self,a)
numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results(self,tp)
numpy.core.tests.test_ufunc.TestUfunc.test_all_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds(self)
numpy.core.tests.test_ufunc.TestUfunc.test_broadcast(self)
numpy.core.tests.test_ufunc.TestUfunc.test_casting_out_param(self)
numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like(self)
numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_endian(self)
numpy.core.tests.test_ufunc.TestUfunc.test_forced_sig(self)
numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops(self)
numpy.core.tests.test_ufunc.TestUfunc.test_get_signature(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_incontiguous_array(self)
numpy.core.tests.test_ufunc.TestUfunc.test_inner1d(self)
numpy.core.tests.test_ufunc.TestUfunc.test_innerwt(self)
numpy.core.tests.test_ufunc.TestUfunc.test_innerwt_empty(self)
numpy.core.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing(self)
numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduction(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_logical(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_scalar_multiply(self)
numpy.core.tests.test_ufunc.TestUfunc.test_operand_flags(self)
numpy.core.tests.test_ufunc.TestUfunc.test_output_argument(self)
numpy.core.tests.test_ufunc.TestUfunc.test_pickle(self)
numpy.core.tests.test_ufunc.TestUfunc.test_pickle_withstring(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum(self)
numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting(self)
numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature(self)
numpy.core.tests.test_ufunc.TestUfunc.test_struct_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_type_cast(self)
numpy.core.tests.test_ufunc.TestUfunc.test_ufunc_custom_out(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_param(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_param_buffer_output(self)
numpy.core.tests.test_ufunc.TestUfunc.test_zerosize_reduction(self)
numpy.tests.test_ufunc.TestUfunc(TestCase)
numpy.tests.test_ufunc.TestUfunc.check_identityless_reduction(self,a)
numpy.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results(self,tp)
numpy.tests.test_ufunc.TestUfunc.test_all_ufunc(self)
numpy.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds(self)
numpy.tests.test_ufunc.TestUfunc.test_broadcast(self)
numpy.tests.test_ufunc.TestUfunc.test_casting_out_param(self)
numpy.tests.test_ufunc.TestUfunc.test_custom_array_like(self)
numpy.tests.test_ufunc.TestUfunc.test_custom_ufunc(self)
numpy.tests.test_ufunc.TestUfunc.test_endian(self)
numpy.tests.test_ufunc.TestUfunc.test_forced_sig(self)
numpy.tests.test_ufunc.TestUfunc.test_generic_loops(self)
numpy.tests.test_ufunc.TestUfunc.test_get_signature(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder(self)
numpy.tests.test_ufunc.TestUfunc.test_incontiguous_array(self)
numpy.tests.test_ufunc.TestUfunc.test_inner1d(self)
numpy.tests.test_ufunc.TestUfunc.test_innerwt(self)
numpy.tests.test_ufunc.TestUfunc.test_innerwt_empty(self)
numpy.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing(self)
numpy.tests.test_ufunc.TestUfunc.test_matrix_multiply(self)
numpy.tests.test_ufunc.TestUfunc.test_operand_flags(self)
numpy.tests.test_ufunc.TestUfunc.test_output_argument(self)
numpy.tests.test_ufunc.TestUfunc.test_pickle(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_zero_axis(self)
numpy.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum(self)
numpy.tests.test_ufunc.TestUfunc.test_safe_casting(self)
numpy.tests.test_ufunc.TestUfunc.test_scalar_reduction(self)
numpy.tests.test_ufunc.TestUfunc.test_signature(self)
numpy.tests.test_ufunc.TestUfunc.test_type_cast(self)
numpy.tests.test_ufunc.TestUfunc.test_ufunc_custom_out(self)
numpy.tests.test_ufunc.TestUfunc.test_where_param(self)
numpy.tests.test_ufunc.TestUfunc.test_where_param_buffer_output(self)
numpy.tests.test_ufunc.TestUfunc.test_zerosize_reduction(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_scalarmath.py----------------------------------------
A:numpy.core.tests.test_scalarmath.a->numpy.array(l[:3], dtype=np.uint64)
A:numpy.core.tests.test_scalarmath.a_scalar->atype(3)
A:numpy.core.tests.test_scalarmath.a_array->numpy.array([3], dtype=atype)
A:numpy.core.tests.test_scalarmath.b_scalar->btype(1)
A:numpy.core.tests.test_scalarmath.b_array->numpy.array([1], dtype=btype)
A:numpy.core.tests.test_scalarmath.b->t(0.0)
A:numpy.core.tests.test_scalarmath.exp1->numpy.ones_like(inp1)
A:numpy.core.tests.test_scalarmath.inp1[...]->numpy.ones_like(inp1)
A:numpy.core.tests.test_scalarmath.inp2[...]->numpy.zeros_like(inp2)
A:numpy.core.tests.test_scalarmath.d->numpy.zeros(23 * 8, dtype=np.int8)[4:-4].view(np.float64)
A:numpy.core.tests.test_scalarmath.o->numpy.zeros(23 * 8, dtype=np.int8)[4:-4].view(np.float64)
A:numpy.core.tests.test_scalarmath.finfo->numpy.finfo(t)
A:numpy.core.tests.test_scalarmath.constr->numpy.array([0] * storage_bytes, dtype=np.uint8)
A:numpy.core.tests.test_scalarmath.val_repr->repr(val)
A:numpy.core.tests.test_scalarmath.val2->t(eval(val_repr))
numpy.core.tests.test_scalarmath.TestBaseMath(TestCase)
numpy.core.tests.test_scalarmath.TestBaseMath.test_blocked(self)
numpy.core.tests.test_scalarmath.TestBaseMath.test_lower_align(self)
numpy.core.tests.test_scalarmath.TestComplexDivision(TestCase)
numpy.core.tests.test_scalarmath.TestComplexDivision.test_zero_division(self)
numpy.core.tests.test_scalarmath.TestConversion(TestCase)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_long(self)
numpy.core.tests.test_scalarmath.TestPower(TestCase)
numpy.core.tests.test_scalarmath.TestPower.test_large_types(self)
numpy.core.tests.test_scalarmath.TestPower.test_mixed_types(self)
numpy.core.tests.test_scalarmath.TestPower.test_small_types(self)
numpy.core.tests.test_scalarmath.TestRepr(object)
numpy.core.tests.test_scalarmath.TestRepr._test_type_repr(self,t)
numpy.core.tests.test_scalarmath.TestRepr.test_float_repr(self)
numpy.core.tests.test_scalarmath.TestTypes(TestCase)
numpy.core.tests.test_scalarmath.TestTypes.test_type_add(self,level=1)
numpy.core.tests.test_scalarmath.TestTypes.test_type_create(self,level=1)
numpy.core.tests.test_scalarmath.TestTypes.test_types(self,level=1)
numpy.tests.test_scalarmath.TestBaseMath(TestCase)
numpy.tests.test_scalarmath.TestBaseMath.test_blocked(self)
numpy.tests.test_scalarmath.TestBaseMath.test_lower_align(self)
numpy.tests.test_scalarmath.TestComplexDivision(TestCase)
numpy.tests.test_scalarmath.TestConversion(TestCase)
numpy.tests.test_scalarmath.TestPower(TestCase)
numpy.tests.test_scalarmath.TestPower.test_large_types(self)
numpy.tests.test_scalarmath.TestPower.test_mixed_types(self)
numpy.tests.test_scalarmath.TestPower.test_small_types(self)
numpy.tests.test_scalarmath.TestRepr(object)
numpy.tests.test_scalarmath.TestRepr._test_type_repr(self,t)
numpy.tests.test_scalarmath.TestTypes(TestCase)
numpy.tests.test_scalarmath.TestTypes.test_type_add(self,level=1)
numpy.tests.test_scalarmath.TestTypes.test_type_create(self,level=1)
numpy.tests.test_scalarmath.TestTypes.test_types(self,level=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_scalarprint.py----------------------------------------
numpy.core.tests.test_scalarprint.TestRealScalars(TestCase)
numpy.core.tests.test_scalarprint.TestRealScalars.test_str(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_errstate.py----------------------------------------
A:numpy.core.tests.test_errstate.olderrcall->numpy.geterrcall()
numpy.core.tests.test_errstate.TestErrstate(TestCase)
numpy.core.tests.test_errstate.TestErrstate.test_divide(self)
numpy.core.tests.test_errstate.TestErrstate.test_errcall(self)
numpy.core.tests.test_errstate.TestErrstate.test_invalid(self)
numpy.tests.test_errstate.TestErrstate(TestCase)
numpy.tests.test_errstate.TestErrstate.test_divide(self)
numpy.tests.test_errstate.TestErrstate.test_errcall(self)
numpy.tests.test_errstate.TestErrstate.test_invalid(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_indexerrors.py----------------------------------------
A:numpy.core.tests.test_indexerrors.x->numpy.empty((2, 3, 0, 4))
A:numpy.core.tests.test_indexerrors.d->numpy.zeros((5, 0), dtype=object)
A:numpy.core.tests.test_indexerrors.a->numpy.zeros((0, 3))
numpy.core.tests.test_indexerrors.TestIndexErrors(TestCase)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_methods(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_put_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_take_from_object(self)
numpy.tests.test_indexerrors.TestIndexErrors(TestCase)
numpy.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_mapping(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_methods(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_put_exceptions(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_memmap.py----------------------------------------
A:numpy.core.tests.test_memmap.self.tmpfp->NamedTemporaryFile(prefix='mmap')
A:numpy.core.tests.test_memmap.self.tempdir->mkdtemp()
A:numpy.core.tests.test_memmap.self.data->arange(12, dtype=self.dtype)
A:numpy.core.tests.test_memmap.fp->memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
A:numpy.core.tests.test_memmap.newfp->memmap(self.tmpfp, dtype=self.dtype, mode='r', shape=self.shape)
A:numpy.core.tests.test_memmap.tmpname->mktemp('', 'mmap', dir=self.tempdir)
A:numpy.core.tests.test_memmap.abspath->os.path.abspath(tmpname)
A:numpy.core.tests.test_memmap.fp_base->memmap(self.tmpfp, dtype=self.dtype, mode='w+', shape=self.shape)
A:numpy.core.tests.test_memmap.new1->memmap(self.tmpfp, dtype=self.dtype, shape=self.shape).view()
A:numpy.core.tests.test_memmap.new2->memmap(self.tmpfp, dtype=self.dtype, shape=self.shape).view().view()
A:numpy.core.tests.test_memmap.new_array->asarray(fp)
numpy.core.tests.test_memmap.TestMemmap(TestCase)
numpy.core.tests.test_memmap.TestMemmap.setUp(self)
numpy.core.tests.test_memmap.TestMemmap.tearDown(self)
numpy.core.tests.test_memmap.TestMemmap.test_arithmetic_drops_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_attributes(self)
numpy.core.tests.test_memmap.TestMemmap.test_del(self)
numpy.core.tests.test_memmap.TestMemmap.test_filename(self)
numpy.core.tests.test_memmap.TestMemmap.test_filename_fileobj(self)
numpy.core.tests.test_memmap.TestMemmap.test_flush(self)
numpy.core.tests.test_memmap.TestMemmap.test_indexing_drops_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_open_with_filename(self)
numpy.core.tests.test_memmap.TestMemmap.test_roundtrip(self)
numpy.core.tests.test_memmap.TestMemmap.test_slicing_keeps_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_unnamed_file(self)
numpy.core.tests.test_memmap.TestMemmap.test_view(self)
numpy.tests.test_TestMemmap(TestCase)
numpy.tests.test_TestMemmap.setUp(self)
numpy.tests.test_TestMemmap.tearDown(self)
numpy.tests.test_TestMemmap.test_arithmetic_drops_references(self)
numpy.tests.test_TestMemmap.test_attributes(self)
numpy.tests.test_TestMemmap.test_del(self)
numpy.tests.test_TestMemmap.test_filename(self)
numpy.tests.test_TestMemmap.test_filename_fileobj(self)
numpy.tests.test_TestMemmap.test_flush(self)
numpy.tests.test_TestMemmap.test_indexing_drops_references(self)
numpy.tests.test_TestMemmap.test_open_with_filename(self)
numpy.tests.test_TestMemmap.test_roundtrip(self)
numpy.tests.test_TestMemmap.test_slicing_keeps_references(self)
numpy.tests.test_TestMemmap.test_unnamed_file(self)
numpy.tests.test_TestMemmap.test_view(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_einsum.py----------------------------------------
A:numpy.core.tests.test_einsum.a->numpy.arange(1, 3)
A:numpy.core.tests.test_einsum.b->numpy.arange(1, 5).reshape(2, 2)
A:numpy.core.tests.test_einsum.c->numpy.arange(1, 9).reshape(4, 2)
A:numpy.core.tests.test_einsum.d->numpy.arange(18, dtype=dtype).reshape(3, 6)
A:numpy.core.tests.test_einsum.A->numpy.arange(3 * 3).reshape(3, 3).astype(np.float64)
A:numpy.core.tests.test_einsum.B->numpy.arange(3 * 3 * 64 * 64).reshape(3, 3, 64, 64).astype(np.float32)
A:numpy.core.tests.test_einsum.es->numpy.einsum('cl,cpxy->lpxy', A, B)
A:numpy.core.tests.test_einsum.tp->numpy.tensordot(A, B, axes=(0, 0))
numpy.core.tests.test_einsum.TestEinSum(TestCase)
numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums(self,dtype)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_errors(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_fixedstridebug(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_misc(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_cfloat128(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_cfloat64(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_clongdouble(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float16(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float32(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float64(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int16(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int32(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int64(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int8(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_longdouble(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint16(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint32(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint64(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint8(self)
numpy.core.tests.test_einsum.TestEinSum.test_einsum_views(self)
numpy.tests.test_einsum.TestEinSum(TestCase)
numpy.tests.test_einsum.TestEinSum.check_einsum_sums(self,dtype)
numpy.tests.test_einsum.TestEinSum.test_einsum_errors(self)
numpy.tests.test_einsum.TestEinSum.test_einsum_misc(self)
numpy.tests.test_einsum.TestEinSum.test_einsum_sums_clongdouble(self)
numpy.tests.test_einsum.TestEinSum.test_einsum_sums_longdouble(self)
numpy.tests.test_einsum.TestEinSum.test_einsum_views(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_multiarray_assignment.py----------------------------------------
A:numpy.core.tests.test_multiarray_assignment.shape->tuple([size] * ndims)
A:numpy.core.tests.test_multiarray_assignment.ind->_indices_for_axis()
A:numpy.core.tests.test_multiarray_assignment.arr->numpy.arange(np.product(shape)).reshape(shape)
A:numpy.core.tests.test_multiarray_assignment.cpy->numpy.arange(np.product(shape)).reshape(shape).copy()
A:numpy.core.tests.test_multiarray_assignment.inds->_indices(ndims)
A:numpy.core.tests.test_multiarray_assignment.srcidx->tuple([a[0] for a in ind])
A:numpy.core.tests.test_multiarray_assignment.dstidx->tuple([a[1] for a in ind])
numpy.core.tests.test_multiarray_assignment._check_assignment(srcidx,dstidx)
numpy.core.tests.test_multiarray_assignment._indices(ndims)
numpy.core.tests.test_multiarray_assignment._indices_for_axis()
numpy.core.tests.test_multiarray_assignment._indices_for_nelems(nelems)
numpy.core.tests.test_multiarray_assignment.test_overlapping_assignments()
numpy.tests.test_multiarray_assignment._check_assignment(srcidx,dstidx)
numpy.tests.test_multiarray_assignment._indices(ndims)
numpy.tests.test_multiarray_assignment._indices_for_axis()
numpy.tests.test_multiarray_assignment._indices_for_nelems(nelems)
numpy.tests.test_multiarray_assignment.test_overlapping_assignments()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_getlimits.py----------------------------------------
A:numpy.core.tests.test_getlimits.ftype->finfo(longdouble)
A:numpy.core.tests.test_getlimits.ftype2->finfo(longdouble)
A:numpy.core.tests.test_getlimits.dts->list(zip(['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8'], [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64]))
A:numpy.core.tests.test_getlimits.actual->repr(np.finfo(np.float32))
A:numpy.core.tests.test_getlimits.msg->build_err_msg([actual, desired], verbose=True)
numpy.core.tests.test_getlimits.TestDouble(TestCase)
numpy.core.tests.test_getlimits.TestDouble.test_singleton(self)
numpy.core.tests.test_getlimits.TestHalf(TestCase)
numpy.core.tests.test_getlimits.TestHalf.test_singleton(self)
numpy.core.tests.test_getlimits.TestIinfo(TestCase)
numpy.core.tests.test_getlimits.TestIinfo.test_basic(self)
numpy.core.tests.test_getlimits.TestIinfo.test_unsigned_max(self)
numpy.core.tests.test_getlimits.TestLongdouble(TestCase)
numpy.core.tests.test_getlimits.TestLongdouble.test_singleton(self,level=2)
numpy.core.tests.test_getlimits.TestPythonFloat(TestCase)
numpy.core.tests.test_getlimits.TestPythonFloat.test_singleton(self)
numpy.core.tests.test_getlimits.TestRepr(TestCase)
numpy.core.tests.test_getlimits.TestRepr.test_finfo_repr(self)
numpy.core.tests.test_getlimits.TestRepr.test_iinfo_repr(self)
numpy.core.tests.test_getlimits.TestSingle(TestCase)
numpy.core.tests.test_getlimits.TestSingle.test_singleton(self)
numpy.core.tests.test_getlimits.test_instances()
numpy.tests.test_TestDouble(TestCase)
numpy.tests.test_TestDouble.test_singleton(self)
numpy.tests.test_TestHalf(TestCase)
numpy.tests.test_TestHalf.test_singleton(self)
numpy.tests.test_TestIinfo(TestCase)
numpy.tests.test_TestIinfo.test_basic(self)
numpy.tests.test_TestIinfo.test_unsigned_max(self)
numpy.tests.test_TestLongdouble(TestCase)
numpy.tests.test_TestLongdouble.test_singleton(self,level=2)
numpy.tests.test_TestPythonFloat(TestCase)
numpy.tests.test_TestPythonFloat.test_singleton(self)
numpy.tests.test_TestRepr(TestCase)
numpy.tests.test_TestRepr.test_finfo_repr(self)
numpy.tests.test_TestRepr.test_iinfo_repr(self)
numpy.tests.test_TestSingle(TestCase)
numpy.tests.test_TestSingle.test_singleton(self)
numpy.tests.test_test_instances()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_dtype.py----------------------------------------
A:numpy.core.tests.test_dtype.dt->numpy.dtype(np.double)
A:numpy.core.tests.test_dtype.dt2->numpy.dtype({'names': ['f2', 'f0', 'f1'], 'formats': ['<u2', '<u4', '<u2'], 'offsets': [2, 4, 0]}, align=True)
A:numpy.core.tests.test_dtype.dt3->numpy.dtype({'f0': ('i4', 0), 'f1': ([('f1', 'i1'), ('f2', 'i4'), ('f3', 'i1')], 4), 'f2': ('i1', 10)}, align=False)
A:numpy.core.tests.test_dtype.uintp->numpy.dtype(np.uintp)
A:numpy.core.tests.test_dtype.right->numpy.dtype(np.ulonglong)
A:numpy.core.tests.test_dtype.a->numpy.array(['a'], dtype='O').astype(('O', [('name', 'O')]))
A:numpy.core.tests.test_dtype.b->numpy.dtype([('yo', np.int), ('ye', simple1), ('yi', np.dtype((np.int, (3, 2))))])
A:numpy.core.tests.test_dtype.dt1->numpy.dtype([('f0', 'i4'), ('f1', [('f1', 'i1'), ('f2', 'i4'), ('f3', 'i1')]), ('f2', 'i1')], align=False)
A:numpy.core.tests.test_dtype.simple1->numpy.dtype({'names': ['r', 'b'], 'formats': ['u1', 'u1'], 'titles': ['Red pixel', 'Blue pixel']})
A:numpy.core.tests.test_dtype.c->numpy.dtype([('yo', np.int), ('ye', simple1), ('yi', np.dtype((a, (3, 2))))])
A:numpy.core.tests.test_dtype.d->numpy.dtype([('a', np.dtype(int, metadata={'datum': 1}))])
numpy.core.tests.test_dtype.TestBuiltin(TestCase)
numpy.core.tests.test_dtype.TestBuiltin.test_bad_param(self)
numpy.core.tests.test_dtype.TestBuiltin.test_dtype(self)
numpy.core.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing(self)
numpy.core.tests.test_dtype.TestBuiltin.test_invalid_types(self)
numpy.core.tests.test_dtype.TestBuiltin.test_run(self)
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion(object)
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion(self)
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion(self)
numpy.core.tests.test_dtype.TestMetadata(TestCase)
numpy.core.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict(self)
numpy.core.tests.test_dtype.TestMetadata.test_metadata_takes_dict(self)
numpy.core.tests.test_dtype.TestMetadata.test_nested_metadata(self)
numpy.core.tests.test_dtype.TestMetadata.test_no_metadata(self)
numpy.core.tests.test_dtype.TestMonsterType(TestCase)
numpy.core.tests.test_dtype.TestMonsterType.test1(self)
numpy.core.tests.test_dtype.TestRecord(TestCase)
numpy.core.tests.test_dtype.TestRecord.test_aligned_size(self)
numpy.core.tests.test_dtype.TestRecord.test_comma_datetime(self)
numpy.core.tests.test_dtype.TestRecord.test_different_names(self)
numpy.core.tests.test_dtype.TestRecord.test_different_titles(self)
numpy.core.tests.test_dtype.TestRecord.test_equivalent_record(self)
numpy.core.tests.test_dtype.TestRecord.test_not_lists(self)
numpy.core.tests.test_dtype.TestRecord.test_union_struct(self)
numpy.core.tests.test_dtype.TestString(TestCase)
numpy.core.tests.test_dtype.TestString.test_base_dtype_with_object_type(self)
numpy.core.tests.test_dtype.TestString.test_complex_dtype_repr(self)
numpy.core.tests.test_dtype.TestString.test_complex_dtype_str(self)
numpy.core.tests.test_dtype.TestString.test_dtype_str_with_long_in_shape(self)
numpy.core.tests.test_dtype.TestString.test_empty_string_to_object(self)
numpy.core.tests.test_dtype.TestSubarray(TestCase)
numpy.core.tests.test_dtype.TestSubarray.test_equivalent_record(self)
numpy.core.tests.test_dtype.TestSubarray.test_nonequivalent_record(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_equal(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_monster(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_simple(self)
numpy.core.tests.test_dtype.TestSubarray.test_single_subarray(self)
numpy.core.tests.test_dtype.assert_dtype_equal(a,b)
numpy.core.tests.test_dtype.assert_dtype_not_equal(a,b)
numpy.tests.test_dtype.TestBuiltin(TestCase)
numpy.tests.test_dtype.TestBuiltin.test_bad_param(self)
numpy.tests.test_dtype.TestBuiltin.test_dtype(self)
numpy.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing(self)
numpy.tests.test_dtype.TestBuiltin.test_invalid_types(self)
numpy.tests.test_dtype.TestBuiltin.test_run(self)
numpy.tests.test_dtype.TestDtypeAttributeDeletion(object)
numpy.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion(self)
numpy.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion(self)
numpy.tests.test_dtype.TestMetadata(TestCase)
numpy.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict(self)
numpy.tests.test_dtype.TestMetadata.test_metadata_takes_dict(self)
numpy.tests.test_dtype.TestMetadata.test_nested_metadata(self)
numpy.tests.test_dtype.TestMetadata.test_no_metadata(self)
numpy.tests.test_dtype.TestMonsterType(TestCase)
numpy.tests.test_dtype.TestMonsterType.test1(self)
numpy.tests.test_dtype.TestRecord(TestCase)
numpy.tests.test_dtype.TestRecord.test_aligned_size(self)
numpy.tests.test_dtype.TestRecord.test_comma_datetime(self)
numpy.tests.test_dtype.TestRecord.test_different_names(self)
numpy.tests.test_dtype.TestRecord.test_different_titles(self)
numpy.tests.test_dtype.TestRecord.test_equivalent_record(self)
numpy.tests.test_dtype.TestRecord.test_not_lists(self)
numpy.tests.test_dtype.TestString(TestCase)
numpy.tests.test_dtype.TestSubarray(TestCase)
numpy.tests.test_dtype.TestSubarray.test_equivalent_record(self)
numpy.tests.test_dtype.TestSubarray.test_nonequivalent_record(self)
numpy.tests.test_dtype.TestSubarray.test_shape_equal(self)
numpy.tests.test_dtype.TestSubarray.test_shape_monster(self)
numpy.tests.test_dtype.TestSubarray.test_shape_simple(self)
numpy.tests.test_dtype.TestSubarray.test_single_subarray(self)
numpy.tests.test_dtype.assert_dtype_equal(a,b)
numpy.tests.test_dtype.assert_dtype_not_equal(a,b)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_print.py----------------------------------------
A:numpy.core.tests.test_print.file->StringIO()
A:numpy.core.tests.test_print.file_tp->StringIO()
A:numpy.core.tests.test_print.curloc->locale.getlocale(locale.LC_NUMERIC)
numpy.core.tests.test_print._check_complex_inf_nan(c,s,dtype)
numpy.core.tests.test_print._test_redirected_print(x,tp,ref=None)
numpy.core.tests.test_print.check_complex_type(tp)
numpy.core.tests.test_print.check_complex_type_print(tp)
numpy.core.tests.test_print.check_float_type(tp)
numpy.core.tests.test_print.check_float_type_print(tp)
numpy.core.tests.test_print.check_nan_inf_float(tp)
numpy.core.tests.test_print.in_foreign_locale(func)
numpy.core.tests.test_print.test_complex_inf_nan()
numpy.core.tests.test_print.test_complex_type_print()
numpy.core.tests.test_print.test_complex_types()
numpy.core.tests.test_print.test_float_type_print()
numpy.core.tests.test_print.test_float_types()
numpy.core.tests.test_print.test_locale_double()
numpy.core.tests.test_print.test_locale_longdouble()
numpy.core.tests.test_print.test_locale_single()
numpy.core.tests.test_print.test_nan_inf_float()
numpy.core.tests.test_print.test_scalar_format()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_deprecations.py----------------------------------------
A:numpy.core.tests.test_deprecations.self.warn_ctx->warnings.catch_warnings(record=True)
A:numpy.core.tests.test_deprecations.self.log->self.warn_ctx.__enter__()
A:numpy.core.tests.test_deprecations.a->numpy.array([[[1]]])
numpy.core.tests.test_deprecations.TestArrayToIndexDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestArrayToIndexDeprecation.test_array_to_index_deprecation(self)
numpy.core.tests.test_deprecations.TestBooleanArgumentDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestBooleanArgumentDeprecation.test_bool_as_int_argument(self)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_indexing(self)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_non_integer_argument_deprecations(self)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_slicing(self)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_valid_indexing(self)
numpy.core.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_valid_slicing(self)
numpy.core.tests.test_deprecations._DeprecationTestCase(object)
numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated(self,function,num=1,ignore_others=False,function_fails=False,exceptions=(DeprecationWarning,),args=(),kwargs={})
numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated(self,function,args=(),kwargs={})
numpy.core.tests.test_deprecations._DeprecationTestCase.setUp(self)
numpy.core.tests.test_deprecations._DeprecationTestCase.tearDown(self)
numpy.tests.test_deprecations.TestArrayToIndexDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestArrayToIndexDeprecation.test_array_to_index_deprecation(self)
numpy.tests.test_deprecations.TestBooleanArgumentDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_indexing(self)
numpy.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_slicing(self)
numpy.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_valid_indexing(self)
numpy.tests.test_deprecations.TestFloatNonIntegerArgumentDeprecation.test_valid_slicing(self)
numpy.tests.test_deprecations._DeprecationTestCase(object)
numpy.tests.test_deprecations._DeprecationTestCase.assert_deprecated(self,function,num=1,ignore_others=False,function_fails=False,exceptions=(DeprecationWarning,),args=(),kwargs={})
numpy.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated(self,function,args=(),kwargs={})
numpy.tests.test_deprecations._DeprecationTestCase.setUp(self)
numpy.tests.test_deprecations._DeprecationTestCase.tearDown(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_indexing.py----------------------------------------
A:numpy.core.tests.test_indexing.a->numpy.arange(10)
A:numpy.core.tests.test_indexing.z->Zero()
A:numpy.core.tests.test_indexing.b->arr.copy().copy()
A:numpy.core.tests.test_indexing.self.a->numpy.arange(np.prod([3, 1, 5, 6])).reshape(3, 1, 5, 6)
A:numpy.core.tests.test_indexing.self.b->numpy.empty((3, 0, 5, 6))
A:numpy.core.tests.test_indexing.in_indices->list(indices)
A:numpy.core.tests.test_indexing.in_indices[i]->slice(None, None)
A:numpy.core.tests.test_indexing.indx->numpy.arange(*indx.indices(arr.shape[ax]))
A:numpy.core.tests.test_indexing.arr->arr.copy().copy()
A:numpy.core.tests.test_indexing.flat_indx->numpy.array([0] * indx.sum(), dtype=np.intp)
A:numpy.core.tests.test_indexing.axes->list(range(arr.ndim))
A:numpy.core.tests.test_indexing.res->numpy.broadcast(*indx[1:])
A:numpy.core.tests.test_indexing.mi->numpy.ravel_multi_index(indx[1:], orig_slice, mode='wrap')
A:numpy.core.tests.test_indexing.(mimic_get, no_copy)->self._get_multi_index(arr, (index,))
A:numpy.core.tests.test_indexing.prev_refcount->sys.getrefcount(arr)
A:numpy.core.tests.test_indexing.index->tuple((i for i in index if i != 'skip'))
numpy.core.tests.test_indexing.TestFieldIndexing(TestCase)
numpy.core.tests.test_indexing.TestFieldIndexing.test_scalar_return_type(self)
numpy.core.tests.test_indexing.TestIndexing(TestCase)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim(self)
numpy.core.tests.test_indexing.TestIndexing.test_ellipsis_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_empty_fancy_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_empty_tuple_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_none_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type(self)
numpy.core.tests.test_indexing.TestIndexing.test_single_bool_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_single_int_index(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated(TestCase)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index(self,arr,index)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index(self,arr,index)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result(self,arr,index,mimic_get,no_copy)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index(self,arr,indices)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.setUp(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_1d(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_boolean(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim(self)
numpy.tests.test_indexing.TestFieldIndexing(TestCase)
numpy.tests.test_indexing.TestFieldIndexing.test_scalar_return_type(self)
numpy.tests.test_indexing.TestIndexing(TestCase)
numpy.tests.test_indexing.TestIndexing.test_ellipsis_index(self)
numpy.tests.test_indexing.TestIndexing.test_empty_fancy_index(self)
numpy.tests.test_indexing.TestIndexing.test_empty_tuple_index(self)
numpy.tests.test_indexing.TestIndexing.test_none_index(self)
numpy.tests.test_indexing.TestIndexing.test_scalar_return_type(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated(TestCase)
numpy.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index(self,arr,index)
numpy.tests.test_indexing.TestMultiIndexingAutomated._check_single_index(self,arr,index)
numpy.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result(self,arr,index,mimic_get,no_copy)
numpy.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index(self,arr,indices)
numpy.tests.test_indexing.TestMultiIndexingAutomated.setUp(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated.test_1d(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated.test_multidim(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_item_selection.py----------------------------------------
A:numpy.core.tests.test_item_selection.ta->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t)
A:numpy.core.tests.test_item_selection.tresult->list(ta.T.copy())
A:numpy.core.tests.test_item_selection.res->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t).take(index_array, mode=mode, axis=1)
A:numpy.core.tests.test_item_selection.a->numpy.array(objects)
A:numpy.core.tests.test_item_selection.b->numpy.array([2, 2, 4, 5, 3, 5])
numpy.core.tests.test_item_selection.TestTake(TestCase)
numpy.core.tests.test_item_selection.TestTake.test_refcounting(self)
numpy.core.tests.test_item_selection.TestTake.test_simple(self)
numpy.tests.test_item_selection.TestTake(TestCase)
numpy.tests.test_item_selection.TestTake.test_refcounting(self)
numpy.tests.test_item_selection.TestTake.test_simple(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_api.py----------------------------------------
A:numpy.core.tests.test_api.obj->object()
A:numpy.core.tests.test_api.tobj->type(object)
A:numpy.core.tests.test_api.ones11->numpy.ones((1, 1), np.float64)
A:numpy.core.tests.test_api.tndarray->type(ones11)
A:numpy.core.tests.test_api.old_refcount->sys.getrefcount(np.float64)
A:numpy.core.tests.test_api.S2->numpy.dtype((str, 2))
A:numpy.core.tests.test_api.S3->numpy.dtype((str, 3))
A:numpy.core.tests.test_api.S5->numpy.dtype((str, 5))
A:numpy.core.tests.test_api._unicode->globals().get('unicode')
A:numpy.core.tests.test_api.U2->numpy.dtype((_unicode, 2))
A:numpy.core.tests.test_api.U3->numpy.dtype((_unicode, 3))
A:numpy.core.tests.test_api.U5->numpy.dtype((_unicode, 5))
A:numpy.core.tests.test_api.builtins->getattr(__builtins__, '__dict__', __builtins__)
A:numpy.core.tests.test_api._buffer->getattr(__builtins__, '__dict__', __builtins__).get('buffer')
A:numpy.core.tests.test_api.dat->numpy.array(_memoryview(b'1.0'))
A:numpy.core.tests.test_api._memoryview->getattr(__builtins__, '__dict__', __builtins__).get('memoryview')
A:numpy.core.tests.test_api.a->numpy.array([(1, 2, 3)], dtype='u4,u4,u4')
A:numpy.core.tests.test_api.o->type('o', (object,), dict(__array__=lambda *x: np.array(100.0, dtype=np.float64)))()
A:numpy.core.tests.test_api.b->numpy.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)], dtype='u4,u4,u4')
A:numpy.core.tests.test_api.mask->numpy.array([[0, 1], [1, 1], [1, 0]], dtype='?')
A:numpy.core.tests.test_api.c->numpy.arange(24).reshape(2, 1, 4, 3).swapaxes(2, 3)
A:numpy.core.tests.test_api.res->numpy.copy(c, order='K')
A:numpy.core.tests.test_api.result->numpy.broadcast_arrays(a, b)
numpy.core.tests.test_api.test_array_array()
numpy.core.tests.test_api.test_array_astype()
numpy.core.tests.test_api.test_broadcast_arrays()
numpy.core.tests.test_api.test_contiguous_flags()
numpy.core.tests.test_api.test_copy_order()
numpy.core.tests.test_api.test_copyto()
numpy.core.tests.test_api.test_copyto_fromscalar()
numpy.core.tests.test_api.test_fastCopyAndTranspose()
numpy.tests.test_api.test_array_array()
numpy.tests.test_api.test_array_astype()
numpy.tests.test_api.test_broadcast_arrays()
numpy.tests.test_api.test_contiguous_flags()
numpy.tests.test_api.test_copy_order()
numpy.tests.test_api.test_copyto()
numpy.tests.test_api.test_copyto_fromscalar()
numpy.tests.test_api.test_fastCopyAndTranspose()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_regression.py----------------------------------------
A:numpy.core.tests.test_regression.a->numpy.array([['Hello', 'Foob']], dtype='U5', order='F')
A:numpy.core.tests.test_regression.f->open(filename)
A:numpy.core.tests.test_regression.b->copy.copy(a)
A:numpy.core.tests.test_regression.dt->numpy.dtype([('date', '<M8[D]'), ('val', '<f8')])
A:numpy.core.tests.test_regression.c->copy.deepcopy(a)
A:numpy.core.tests.test_regression.origidx->numpy.array([-1, 0, 1])
A:numpy.core.tests.test_regression.idx->numpy.array(origidx)
A:numpy.core.tests.test_regression.ca->numpy.char.array(['Hi', 'There'])
A:numpy.core.tests.test_regression.x->numpy.arange(0, 4, dtype='datetime64[D]')
A:numpy.core.tests.test_regression.h->numpy.array(buffer, dtype=descr)
A:numpy.core.tests.test_regression.ucs_value->sixu('\U0010ffff')
A:numpy.core.tests.test_regression.ua->numpy.array([[[ucs_value * ulen] * 2] * 3] * 4, dtype='U%s' % ulen)
A:numpy.core.tests.test_regression.ua2->numpy.array([[[ucs_value * ulen] * 2] * 3] * 4, dtype='U%s' % ulen).newbyteorder()
A:numpy.core.tests.test_regression.xa->numpy.where((a > 2) & (a < 6))
A:numpy.core.tests.test_regression.xb->numpy.where((b > 2) & (b < 6))
A:numpy.core.tests.test_regression.net->numpy.zeros(3, dtype='>f4')
A:numpy.core.tests.test_regression.max_net->numpy.zeros(3, dtype='>f4').max()
A:numpy.core.tests.test_regression.test->numpy.where(net <= 0.0, max_net, net)
A:numpy.core.tests.test_regression.correct->numpy.array([0.60520202, 0.00458849, 0.60520202])
A:numpy.core.tests.test_regression.buf->numpy.zeros(40, dtype=np.int8)
A:numpy.core.tests.test_regression.y->str(x)
A:numpy.core.tests.test_regression._z->numpy.ones(10)
A:numpy.core.tests.test_regression._dummy->numpy.empty((0, 10))
A:numpy.core.tests.test_regression.z->numpy.array([2.2 - 1.1j], dtype)
A:numpy.core.tests.test_regression.ref->numpy.arange(10)
A:numpy.core.tests.test_regression.aargmax->numpy.array([['Hello', 'Foob']], dtype='U5', order='F').argmax(i)
A:numpy.core.tests.test_regression.descr->numpy.dtype([('i', int), ('f', float), ('s', '|S3')])
A:numpy.core.tests.test_regression.x.flat->numpy.arange(3, dtype=float)
A:numpy.core.tests.test_regression.x[:]->numpy.arange(3, dtype=float)
A:numpy.core.tests.test_regression.r->numpy.fromstring('abcdefghijklmnop' * 4 * 3, dtype='i4,(2,3)u2')
A:numpy.core.tests.test_regression.a[b]->numpy.array(np.nan)
A:numpy.core.tests.test_regression.a[r]->numpy.array(np.nan)
A:numpy.core.tests.test_regression.dt_->pickle.load(f)
A:numpy.core.tests.test_regression.tmp->numpy.atleast_1d([MyFloat()])
A:numpy.core.tests.test_regression.x[0]->asbytes('a   ')
A:numpy.core.tests.test_regression.v->numpy.array(([0] * 5 + [1] * 6 + [2] * 6) * 4)
A:numpy.core.tests.test_regression.arr->numpy.array([('2000-01-01', 1)], dt)
A:numpy.core.tests.test_regression.arr2->numpy.array([[[sixu('H'), sixu('e'), sixu('l'), sixu('l'), sixu('o')], [sixu('F'), sixu('o'), sixu('o'), sixu('b'), sixu('')]]])
A:numpy.core.tests.test_regression.res1->getattr(arr1, func)(arr2)
A:numpy.core.tests.test_regression.res2->getattr(np, func)(arr1, arr2)
A:numpy.core.tests.test_regression.arr1->numpy.zeros((5, 1), dtype=np.object_)
A:numpy.core.tests.test_regression.ra->numpy.fromiter(((i * 3, i * 2) for i in range(10)), dtype='i8,f8')
A:numpy.core.tests.test_regression.rb->numpy.rec.array(ra, dtype=dt)
A:numpy.core.tests.test_regression.x1->numpy.array([[1, 2], [3, 4], [5, 6]])
A:numpy.core.tests.test_regression.x2->numpy.array(['a', 'dd', 'xyz'])
A:numpy.core.tests.test_regression.x3->numpy.array([1.1, 2, 3])
A:numpy.core.tests.test_regression.data->pickle.loads(pickle.dumps(data))
A:numpy.core.tests.test_regression.dt1->numpy.dtype([('f0', 'i8'), ('f1', 'i8')])
A:numpy.core.tests.test_regression.dt2->numpy.dtype(('uint32', (2,)))
A:numpy.core.tests.test_regression.a2->numpy.array([s[:i]] * 5)
A:numpy.core.tests.test_regression.dt0->numpy.dtype([('f0', 'i4'), ('f1', 'i4')])
A:numpy.core.tests.test_regression.tosubtract->numpy.arange(5)
A:numpy.core.tests.test_regression.todivide->numpy.array([2.0, 0.5, 0.25])
A:numpy.core.tests.test_regression.ref_d->sys.getrefcount(d)
A:numpy.core.tests.test_regression.s->re.sub('a(.)', '\x01\\1', 'a_')
A:numpy.core.tests.test_regression.sstr->numpy.array_str(s)
A:numpy.core.tests.test_regression.uradians->numpy.frompyfunc(radians, 1, 1)
A:numpy.core.tests.test_regression.big_endian->numpy.array([83.4, 83.5], dtype='>f8')
A:numpy.core.tests.test_regression.little_endian->numpy.array([83.4, 83.5], dtype='<f8')
A:numpy.core.tests.test_regression.new->pickle.loads(pickle.dumps(el))
A:numpy.core.tests.test_regression.index->numpy.array(0, dtype=np.int32)
A:numpy.core.tests.test_regression.cnt0_a->cnt(a)
A:numpy.core.tests.test_regression.cnt0_b->cnt(b)
A:numpy.core.tests.test_regression.cnt0_c->cnt(c)
A:numpy.core.tests.test_regression.arr0->numpy.zeros(2, dtype=np.object_)
A:numpy.core.tests.test_regression.arr3->numpy.arange(0, 4, dtype='datetime64[D]').choose(arr1, arr2)
A:numpy.core.tests.test_regression.tmp2->numpy.atleast_1d([MyFloat()]).astype(float)
A:numpy.core.tests.test_regression.d->numpy.array(a, dtype=(np.str_, 12))
A:numpy.core.tests.test_regression.oldsize->numpy.setbufsize(10 * 16)
A:numpy.core.tests.test_regression.fsingle->numpy.single('1.234')
A:numpy.core.tests.test_regression.fdouble->numpy.double('1.234')
A:numpy.core.tests.test_regression.flongdouble->numpy.longdouble('1.234')
A:numpy.core.tests.test_regression.dtype->numpy.format_parser(['i4', 'i4'], [], [])
A:numpy.core.tests.test_regression.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy.core.tests.test_regression.filename->os.path.join(data_dir, 'astype_copy.pkl')
A:numpy.core.tests.test_regression.xp->pickle.load(f)
A:numpy.core.tests.test_regression.xpd->pickle.load(f).astype(np.float64)
A:numpy.core.tests.test_regression.result->result.view(cls).view(cls)
A:numpy.core.tests.test_regression.self.info->getattr(obj, 'info', '')
A:numpy.core.tests.test_regression.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy.core.tests.test_regression.dat2->TestArray([2, 3, 1, 0], 'jubba')
A:numpy.core.tests.test_regression.t->numpy.array([np.array([]), np.array(0, object)])
A:numpy.core.tests.test_regression.C->numpy.array([-np.inf, -2 + 1j, 0, 2 - 1j, np.inf, np.nan])
A:numpy.core.tests.test_regression.have->numpy.sign(C)
A:numpy.core.tests.test_regression.want->numpy.array([-1 + 0j, -1 + 0j, 0 + 0j, 1 + 0j, 1 + 0j, np.nan])
A:numpy.core.tests.test_regression.b2->numpy.object_(3.0)
A:numpy.core.tests.test_regression.p->numpy.int32(-1)
A:numpy.core.tests.test_regression.n_before->len(gc.get_objects())
A:numpy.core.tests.test_regression.n_after->len(gc.get_objects())
A:numpy.core.tests.test_regression.test_string->numpy.array('test')
A:numpy.core.tests.test_regression.test_string_void_scalar->numpy.core.multiarray.scalar(np.dtype(('V', test_string.dtype.itemsize)), test_string.tostring())
A:numpy.core.tests.test_regression.test_record->numpy.ones((), 'i,i')
A:numpy.core.tests.test_regression.test_record_void_scalar->numpy.core.multiarray.scalar(test_record.dtype, test_record.tostring())
A:numpy.core.tests.test_regression.i->numpy.lexsort((a[::-1], b))
A:numpy.core.tests.test_regression.e->numpy.empty((2,), dtype=(np.str_, 8))
A:numpy.core.tests.test_regression.a1->numpy.array(a, '|S%d' % i)
A:numpy.core.tests.test_regression.a3->numpy.array(a1['f0'], dtype='S')
A:numpy.core.tests.test_regression.a4->copy.deepcopy(a1)
A:numpy.core.tests.test_regression.s1->asbytes('black')
A:numpy.core.tests.test_regression.s2->asbytes('white')
A:numpy.core.tests.test_regression.numb->sys.getrefcount(strb)
A:numpy.core.tests.test_regression.numa->sys.getrefcount(stra)
A:numpy.core.tests.test_regression.min->numpy.array([np.iinfo(t).min])
A:numpy.core.tests.test_regression.out->numpy.zeros((3,))
A:numpy.core.tests.test_regression.ret->numpy.fromfile(f, count=4, dtype='u1')
A:numpy.core.tests.test_regression.cnan->complex(0, np.nan)
A:numpy.core.tests.test_regression.lut->numpy.ones((5 + 3, 4), np.float)
A:numpy.core.tests.test_regression.rgba->numpy.empty(shape=a.shape + (4,), dtype=lut.dtype)
A:numpy.core.tests.test_regression.c1->sys.getrefcount(rgba)
A:numpy.core.tests.test_regression.c2->sys.getrefcount(rgba)
A:numpy.core.tests.test_regression.f0->tempfile.NamedTemporaryFile()
A:numpy.core.tests.test_regression.rep->repr(ra)
A:numpy.core.tests.test_regression.A->numpy.array([['abc', 2], ['long   ', '0123456789']], dtype=np.string_)
A:numpy.core.tests.test_regression.a[()]->numpy.array(4)
A:numpy.core.tests.test_regression.s3->asbytes('other')
A:numpy.core.tests.test_regression.blob->pickle.dumps(data, protocol=1)
A:numpy.core.tests.test_regression.bytestring->'\x01  '.encode('ascii')
A:numpy.core.tests.test_regression.a_rec->numpy.array([(0, 1), (3, 2)], dtype='i4,i8')
A:numpy.core.tests.test_regression.a_obj->numpy.empty((2,), dtype=object)
A:numpy.core.tests.test_regression.acnt->sys.getrefcount(a)
A:numpy.core.tests.test_regression.res->numpy.unique(v, return_index=True)
A:numpy.core.tests.test_regression.data_str->numpy.array([[[sixu('H'), sixu('e'), sixu('l'), sixu('l'), sixu('o')], [sixu('F'), sixu('o'), sixu('o'), sixu('b'), sixu('')]]]).tostring('F')
A:numpy.core.tests.test_regression.data_back->numpy.ndarray(arr2.shape, arr2.dtype, buffer=data_str, order='F')
A:numpy.core.tests.test_regression.count->numpy.count_nonzero(arr)
A:numpy.core.tests.test_regression.formatted->'{0}'.format(arr[0])
A:numpy.core.tests.test_regression.rhs->Foo()
A:numpy.core.tests.test_regression.lhs->numpy.array(1)
numpy.core.tests.test_regression.TestRegression(TestCase)
numpy.core.tests.test_regression.TestRegression.test_0d_string_scalar(self)
numpy.core.tests.test_regression.TestRegression.test_add_identity(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_alignment_update(self)
numpy.core.tests.test_regression.TestRegression.test_any_float(self)
numpy.core.tests.test_regression.TestRegression.test_arange_endian(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_arange_non_native_dtype(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_argmax(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_argmax_byteorder(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_arr_transpose(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array(self)
numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2(self)
numpy.core.tests.test_regression.TestRegression.test_array_index(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_array_ndmin_overflow(self)
numpy.core.tests.test_regression.TestRegression.test_array_resize_method_system_error(self)
numpy.core.tests.test_regression.TestRegression.test_array_scalar_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_array_side_effect(self)
numpy.core.tests.test_regression.TestRegression.test_array_str_64bit(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_array_too_big(self)
numpy.core.tests.test_regression.TestRegression.test_asarray_with_order(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_assign_from_sequence_error(self)
numpy.core.tests.test_regression.TestRegression.test_assign_obj_listoflists(self)
numpy.core.tests.test_regression.TestRegression.test_astype_copy(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_attributes(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_binary_repr_0(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_binary_repr_0_width(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory(self)
numpy.core.tests.test_regression.TestRegression.test_bool(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_bool_indexing_invalid_nr_elements(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_buffer_hashlib(self)
numpy.core.tests.test_regression.TestRegression.test_byteswap_complex_scalar(self)
numpy.core.tests.test_regression.TestRegression.test_char_array_creation(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_char_dump(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_character_array_strip(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_chararray_rstrip(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_complex64_alignment(self)
numpy.core.tests.test_regression.TestRegression.test_complex_boolean_cast(self)
numpy.core.tests.test_regression.TestRegression.test_complex_nan_maximum(self)
numpy.core.tests.test_regression.TestRegression.test_complex_scalar_complex_cast(self)
numpy.core.tests.test_regression.TestRegression.test_complex_scalar_warning(self)
numpy.core.tests.test_regression.TestRegression.test_compress_small_type(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_convolve_empty(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case2(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_zero_dim(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity(self)
numpy.core.tests.test_regression.TestRegression.test_dot_alignment_sse2(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_dot_negative_stride(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_dtype_keyerrors_(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_names(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_dtype_posttuple(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_dtype_repr(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_dtype_tuple(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_duplicate_field_names_assign(self)
numpy.core.tests.test_regression.TestRegression.test_duplicate_title_and_name(self)
numpy.core.tests.test_regression.TestRegression.test_empty_array_type(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_empty_mul(self)
numpy.core.tests.test_regression.TestRegression.test_endian_bool_indexing(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_endian_recarray(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_endian_where(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_eq_string_and_object_array(self)
numpy.core.tests.test_regression.TestRegression.test_errobj_reference_leak(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_fancy_index(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_fields_strides(self)
numpy.core.tests.test_regression.TestRegression.test_find_common_type_boolean(self)
numpy.core.tests.test_regression.TestRegression.test_flat_assignment(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_flat_byteorder(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_flat_index_byteswap(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_floats_from_string(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_for_equal_names(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_for_object_scalar_creation(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_for_zero_length_in_choose(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_format_on_flex_array_element(self)
numpy.core.tests.test_regression.TestRegression.test_fortran_order_buffer(self)
numpy.core.tests.test_regression.TestRegression.test_fromfile_tofile_seeks(self)
numpy.core.tests.test_regression.TestRegression.test_fromiter_bytes(self)
numpy.core.tests.test_regression.TestRegression.test_fromiter_comparison(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_frompyfunc_endian(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_fromstring(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_fromstring_crash(self)
numpy.core.tests.test_regression.TestRegression.test_hstack_invalid_dims(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_huge_arange(self)
numpy.core.tests.test_regression.TestRegression.test_indexing1(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_indexing2(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_intp(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_invalid_round(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_junk_in_string_fields_of_recarray(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_large_float_sum(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_lexsort_buffer_length(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence(self)
numpy.core.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans(self)
numpy.core.tests.test_regression.TestRegression.test_mem_0d_array_index(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_around(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_axis_minimization(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_custom_float_to_array(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_deallocation_leak(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_divmod(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_dot(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_dtype_align(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_empty(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_float_imag(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_fromiter_invalid_dtype_string(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_lexsort_strings(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_on_invalid_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_mem_scalar_indexing(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_mem_string_arr(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_memoryleak(self)
numpy.core.tests.test_regression.TestRegression.test_method_args(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_misaligned_dot_product_objects(self)
numpy.core.tests.test_regression.TestRegression.test_misaligned_objects_segfault(self)
numpy.core.tests.test_regression.TestRegression.test_misaligned_scalars_segfault(self)
numpy.core.tests.test_regression.TestRegression.test_mixed_string_unicode_array_creation(self)
numpy.core.tests.test_regression.TestRegression.test_multidim_byteswap(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_multiple_assign(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_ndmin_float64(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_ndmin_order(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_negative_nd_indexing(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_nonarray_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_noncontiguous_fill(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_nonnative_endian_fill(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_nonscalar_item_method(self)
numpy.core.tests.test_regression.TestRegression.test_nonzero_byteswap(self)
numpy.core.tests.test_regression.TestRegression.test_numeric_carray_compare(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_numeric_handleError(self)
numpy.core.tests.test_regression.TestRegression.test_numpy_float_python_long_addition(self)
numpy.core.tests.test_regression.TestRegression.test_object_argmax(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_assign(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_fill(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_from_list(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_refcount_self_assign(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_refcounting(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_self_copy(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_self_reference(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_shape(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_object_array_to_fixed_string(self)
numpy.core.tests.test_regression.TestRegression.test_object_casting(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_objectarray_setfield(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_bytes_overwrite(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_dtype(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_pickle_string_overwrite(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_transposed(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_rand_seed(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_random_shuffle(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_ravel_with_order(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_rec_fromarray(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_rec_iterate(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_recarray_copy(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_recarray_fields(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_recarray_single_element(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_recarray_tolist(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reduce(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reduce_big_object_array(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reduce_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_refcount_error_in_clip(self)
numpy.core.tests.test_regression.TestRegression.test_refcount_vdot(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_repeat_discont(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reshape_order(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reshape_trailing_ones_strides(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_zero_size(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_reshape_zero_strides(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_richcompare_crash(self)
numpy.core.tests.test_regression.TestRegression.test_round(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_scalar_compare(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments(self)
numpy.core.tests.test_regression.TestRegression.test_searchsorted_variable_length(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_setting_rank0_string(self)
numpy.core.tests.test_regression.TestRegression.test_sign_bit(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_sign_for_complex_nan(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_signed_integer_division_overflow(self)
numpy.core.tests.test_regression.TestRegression.test_sort_bigendian(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_squeeze_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_squeeze_type(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_startswith(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_NULL(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_argsort_with_zeros(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_array_size(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_astype(self)
numpy.core.tests.test_regression.TestRegression.test_string_mergesort(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_sort_with_zeros(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_string_truncation(self)
numpy.core.tests.test_regression.TestRegression.test_string_truncation_ucs2(self)
numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects1(self)
numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects2(self)
numpy.core.tests.test_regression.TestRegression.test_structured_count_nonzero(self)
numpy.core.tests.test_regression.TestRegression.test_structured_type_to_object(self)
numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_swap_real(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_take_object_fail(self)
numpy.core.tests.test_regression.TestRegression.test_take_output(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_take_refcount(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1434(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1538(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1539(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1608(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1756(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1770(self)
numpy.core.tests.test_regression.TestRegression.test_tostring_FORTRANORDER_discontiguous(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_typeNA(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_ufunc_casting_out(self)
numpy.core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views(self)
numpy.core.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak(self)
numpy.core.tests.test_regression.TestRegression.test_uint64_from_negative(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_uint_int_conversion(self)
numpy.core.tests.test_regression.TestRegression.test_unaligned_unicode_access(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_unicode_alloc_dealloc_match(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_scalar(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_unicode_string_comparison(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_unicode_swapping(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_unicode_to_string_cast(self)
numpy.core.tests.test_regression.TestRegression.test_unique_stable(self)
numpy.core.tests.test_regression.TestRegression.test_unpickle_dtype_with_object(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_void_copyswap(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_void_scalar_constructor(self)
numpy.core.tests.test_regression.TestRegression.test_void_scalar_with_titles(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_zero_sized_array_indexing(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_zeros(self)
numpy.core.tests.test_regression.TestRegression.test_zeros_order(self,level=rlevel)
numpy.core.tests.test_regression.TestRegression.test_zerosize_accumulate(self)
numpy.tests.test_regression.TestRegression(TestCase)
numpy.tests.test_regression.TestRegression.test_add_identity(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_alignment_update(self)
numpy.tests.test_regression.TestRegression.test_arange_endian(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_arange_non_native_dtype(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_argmax(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_argmax_byteorder(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_arr_transpose(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array(self)
numpy.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2(self)
numpy.tests.test_regression.TestRegression.test_array_index(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_array_ndmin_overflow(self)
numpy.tests.test_regression.TestRegression.test_array_resize_method_system_error(self)
numpy.tests.test_regression.TestRegression.test_array_scalar_contiguous(self)
numpy.tests.test_regression.TestRegression.test_array_side_effect(self)
numpy.tests.test_regression.TestRegression.test_array_too_big(self)
numpy.tests.test_regression.TestRegression.test_asarray_with_order(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_assign_from_sequence_error(self)
numpy.tests.test_regression.TestRegression.test_assign_obj_listoflists(self)
numpy.tests.test_regression.TestRegression.test_astype_copy(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_attributes(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_binary_repr_0(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_binary_repr_0_width(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory(self)
numpy.tests.test_regression.TestRegression.test_broadcast_flat_assignment(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_buffer_hashlib(self)
numpy.tests.test_regression.TestRegression.test_char_array_creation(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_char_dump(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_compress_small_type(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_convolve_empty(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_copy_detection_corner_case(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_copy_detection_corner_case2(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_copy_detection_zero_dim(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity(self)
numpy.tests.test_regression.TestRegression.test_dot_alignment_sse2(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_dtype_keyerrors_(self)
numpy.tests.test_regression.TestRegression.test_dtype_names(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_dtype_posttuple(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_dtype_repr(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_dtype_tuple(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_duplicate_field_names_assign(self)
numpy.tests.test_regression.TestRegression.test_duplicate_title_and_name(self)
numpy.tests.test_regression.TestRegression.test_empty_array_type(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_empty_mul(self)
numpy.tests.test_regression.TestRegression.test_endian_recarray(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_endian_where(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_errobj_reference_leak(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_fancy_index(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_flat_assignment(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_flat_byteorder(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_flat_index_byteswap(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_for_equal_names(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_for_zero_length_in_choose(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_format_on_flex_array_element(self)
numpy.tests.test_regression.TestRegression.test_fortran_order_buffer(self)
numpy.tests.test_regression.TestRegression.test_fromfile_tofile_seeks(self)
numpy.tests.test_regression.TestRegression.test_fromiter_bytes(self)
numpy.tests.test_regression.TestRegression.test_fromiter_comparison(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_frompyfunc_endian(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_hstack_invalid_dims(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_huge_arange(self)
numpy.tests.test_regression.TestRegression.test_indexing1(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_indexing2(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_invalid_round(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_lexsort(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_lexsort_buffer_length(self)
numpy.tests.test_regression.TestRegression.test_lexsort_invalid_sequence(self)
numpy.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans(self)
numpy.tests.test_regression.TestRegression.test_mem_0d_array_index(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_around(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_axis_minimization(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_deallocation_leak(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_divmod(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_dot(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_dtype_align(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_empty(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_mem_on_invalid_dtype(self)
numpy.tests.test_regression.TestRegression.test_mem_scalar_indexing(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_memoryleak(self)
numpy.tests.test_regression.TestRegression.test_method_args(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_misaligned_scalars_segfault(self)
numpy.tests.test_regression.TestRegression.test_multidim_byteswap(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_multiple_assign(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_ndmin_order(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_negative_nd_indexing(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_nonarray_assignment(self)
numpy.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_noncontiguous_fill(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_nonnative_endian_fill(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_nonscalar_item_method(self)
numpy.tests.test_regression.TestRegression.test_nonzero_byteswap(self)
numpy.tests.test_regression.TestRegression.test_numeric_carray_compare(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_numeric_handleError(self)
numpy.tests.test_regression.TestRegression.test_pickle_bytes_overwrite(self)
numpy.tests.test_regression.TestRegression.test_pickle_dtype(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_pickle_transposed(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_rand_seed(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_random_shuffle(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_ravel_with_order(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_rec_fromarray(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_rec_iterate(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_recarray_copy(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_recarray_fields(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_recarray_single_element(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_recarray_tolist(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_reduce(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_reduce_contiguous(self)
numpy.tests.test_regression.TestRegression.test_refcount_error_in_clip(self)
numpy.tests.test_regression.TestRegression.test_refcount_vdot(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_repeat_discont(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_reshape_order(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_reshape_zero_size(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_richcompare_crash(self)
numpy.tests.test_regression.TestRegression.test_round(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_scalar_compare(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments(self)
numpy.tests.test_regression.TestRegression.test_searchsorted_variable_length(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype(self)
numpy.tests.test_regression.TestRegression.test_sign_bit(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_sort_bigendian(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_squeeze_contiguous(self)
numpy.tests.test_regression.TestRegression.test_squeeze_type(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_startswith(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_swap_real(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_take_output(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_take_refcount(self)
numpy.tests.test_regression.TestRegression.test_ticket_1434(self)
numpy.tests.test_regression.TestRegression.test_ticket_1538(self)
numpy.tests.test_regression.TestRegression.test_ticket_1539(self)
numpy.tests.test_regression.TestRegression.test_ticket_1608(self)
numpy.tests.test_regression.TestRegression.test_ticket_1756(self)
numpy.tests.test_regression.TestRegression.test_ticket_1770(self)
numpy.tests.test_regression.TestRegression.test_typeNA(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_ufunc_casting_out(self)
numpy.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views(self)
numpy.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak(self)
numpy.tests.test_regression.TestRegression.test_unique_stable(self)
numpy.tests.test_regression.TestRegression.test_void_copyswap(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_void_scalar_with_titles(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_zero_sized_array_indexing(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_zeros(self)
numpy.tests.test_regression.TestRegression.test_zeros_order(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_zerosize_accumulate(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_umath.py----------------------------------------
A:numpy.core.tests.test_umath.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_umath.x->numpy.array([x])
A:numpy.core.tests.test_umath.y->numpy.array([y])
A:numpy.core.tests.test_umath.z->numpy.array([1e-05 * (1 + 1j)], dtype=dtype)
A:numpy.core.tests.test_umath.zero->t(0)
A:numpy.core.tests.test_umath.one->t(1)
A:numpy.core.tests.test_umath.cinf->numpy.array([complex(np.inf, 0)])
A:numpy.core.tests.test_umath.cnan->numpy.array([complex(np.nan, np.nan)])
A:numpy.core.tests.test_umath.xf->numpy.log(np.array(x, dtype=dt))
A:numpy.core.tests.test_umath.yf->numpy.log(np.array(y, dtype=dt))
A:numpy.core.tests.test_umath.zf->numpy.log(np.array(z, dtype=dt))
A:numpy.core.tests.test_umath.logxf->numpy.array(x, dtype=dt)
A:numpy.core.tests.test_umath.logyf->numpy.array(y, dtype=dt)
A:numpy.core.tests.test_umath.logzf->numpy.array(z, dtype=dt)
A:numpy.core.tests.test_umath.seq1->numpy.arange(11)
A:numpy.core.tests.test_umath.tmp1->numpy.arange(11).astype(dt)
A:numpy.core.tests.test_umath.tmp2->seq2.astype(dt)
A:numpy.core.tests.test_umath.arg1->numpy.array([0, cnan, cnan], dtype=np.complex)
A:numpy.core.tests.test_umath.arg2->numpy.array([cnan, 0, cnan], dtype=np.complex)
A:numpy.core.tests.test_umath.out->numpy.zeros(a.shape)
A:numpy.core.tests.test_umath.a->numpy.empty([100], dtype=db)
A:numpy.core.tests.test_umath.tgt->numpy.array([1.0, -1.0, np.nan, 0.0, 1.0, -1.0])
A:numpy.core.tests.test_umath.res->numpy.setbufsize(32)
A:numpy.core.tests.test_umath.inp[:]->numpy.arange(inp.size, dtype=dt)
A:numpy.core.tests.test_umath.d->numpy.absolute(1 - np.arcsin(z) / p)
A:numpy.core.tests.test_umath.r->type(self)()
A:numpy.core.tests.test_umath.b->cfunc(p)
A:numpy.core.tests.test_umath.c->numpy.array([True, True])
A:numpy.core.tests.test_umath.info->numpy.finfo(dtype)
A:numpy.core.tests.test_umath.fr->f(x)
A:numpy.core.tests.test_umath.fz->f(np.complex(x))
A:numpy.core.tests.test_umath.fcf->f(np.csingle(z))
A:numpy.core.tests.test_umath.fcd->f(np.cdouble(z))
A:numpy.core.tests.test_umath.fcl->f(np.clongdouble(z))
A:numpy.core.tests.test_umath.cname->name_map.get(fname, fname)
A:numpy.core.tests.test_umath.cfunc->getattr(cmath, cname)
A:numpy.core.tests.test_umath.x_series->numpy.logspace(-20, -3.001, 200)
A:numpy.core.tests.test_umath.x_basic->numpy.logspace(-2.999, 0, 10, endpoint=False)
A:numpy.core.tests.test_umath.z0->numpy.asarray(z0, dtype=dtype)
A:numpy.core.tests.test_umath.self->numpy.ndarray.__new__(subtype, shape, dtype=object)
A:numpy.core.tests.test_umath.x0->numpy.atleast_1d(x0).astype(dtype)
A:numpy.core.tests.test_umath.dx->numpy.atleast_1d(dx).astype(dtype)
A:numpy.core.tests.test_umath.y0->f(x0)
A:numpy.core.tests.test_umath.yp->f(x0 + dx * scale * np.absolute(x0) / np.absolute(dx))
A:numpy.core.tests.test_umath.ym->f(x)
A:numpy.core.tests.test_umath.two->t(2)
A:numpy.core.tests.test_umath.nan->t(np.nan)
A:numpy.core.tests.test_umath.inf->t(np.inf)
A:numpy.core.tests.test_umath.f->t(_f)
A:numpy.core.tests.test_umath.f1->t(_f + 1)
A:numpy.core.tests.test_umath.db->numpy.dtype([('name', 'S11'), ('time', np.int64), ('value', np.float32)])
A:numpy.core.tests.test_umath.h2->numpy.array(h2)
A:numpy.core.tests.test_umath.h1->numpy.add.reduceat(a['value'], indx)
A:numpy.core.tests.test_umath.indices->numpy.array([], 'i4')
A:numpy.core.tests.test_umath.result->numpy.add.reduceat(x, [], axis=1)
numpy.core.tests.test_umath.TestAbsolute(TestCase)
numpy.core.tests.test_umath.TestAbsolute.test_abs_blocked(self)
numpy.core.tests.test_umath.TestAbsolute.test_lower_align(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues(TestCase)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_ninf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_pinf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_any(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_nan_any(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_negative_zero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_one_one(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_positive_zero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_negative(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_positive(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero(self)
numpy.core.tests.test_umath.TestAttributes(TestCase)
numpy.core.tests.test_umath.TestAttributes.test_attributes(self)
numpy.core.tests.test_umath.TestChoose(TestCase)
numpy.core.tests.test_umath.TestChoose.test_mixed(self)
numpy.core.tests.test_umath.TestComplexFunctions(object)
numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision(self,dtype)
numpy.core.tests.test_umath.TestComplexFunctions.test_against_cmath(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts_failing(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_it(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_loss_of_precision(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_loss_of_precision_longcomplex(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_precisions_consistent(self)
numpy.core.tests.test_umath.TestConstants(TestCase)
numpy.core.tests.test_umath.TestConstants.test_e(self)
numpy.core.tests.test_umath.TestConstants.test_euler_gamma(self)
numpy.core.tests.test_umath.TestConstants.test_pi(self)
numpy.core.tests.test_umath.TestDegrees(TestCase)
numpy.core.tests.test_umath.TestDegrees.test_degrees(self)
numpy.core.tests.test_umath.TestDivision(TestCase)
numpy.core.tests.test_umath.TestDivision.test_division_complex(self)
numpy.core.tests.test_umath.TestDivision.test_division_int(self)
numpy.core.tests.test_umath.TestDivision.test_floor_division_complex(self)
numpy.core.tests.test_umath.TestDivision.test_zero_division_complex(self)
numpy.core.tests.test_umath.TestExp(TestCase)
numpy.core.tests.test_umath.TestExp.test_exp_values(self)
numpy.core.tests.test_umath.TestExp2(TestCase)
numpy.core.tests.test_umath.TestExp2.test_exp2_values(self)
numpy.core.tests.test_umath.TestExpm1(TestCase)
numpy.core.tests.test_umath.TestExpm1.test_expm1(self)
numpy.core.tests.test_umath.TestExpm1.test_special(self)
numpy.core.tests.test_umath.TestFloatingPoint(TestCase)
numpy.core.tests.test_umath.TestFloatingPoint.test_floating_point(self)
numpy.core.tests.test_umath.TestFmax(_FilterInvalids)
numpy.core.tests.test_umath.TestFmax.test_complex_nans(self)
numpy.core.tests.test_umath.TestFmax.test_float_nans(self)
numpy.core.tests.test_umath.TestFmax.test_reduce(self)
numpy.core.tests.test_umath.TestFmax.test_reduce_complex(self)
numpy.core.tests.test_umath.TestFmin(_FilterInvalids)
numpy.core.tests.test_umath.TestFmin.test_complex_nans(self)
numpy.core.tests.test_umath.TestFmin.test_float_nans(self)
numpy.core.tests.test_umath.TestFmin.test_reduce(self)
numpy.core.tests.test_umath.TestFmin.test_reduce_complex(self)
numpy.core.tests.test_umath.TestHypot(TestCase,object)
numpy.core.tests.test_umath.TestHypot.test_simple(self)
numpy.core.tests.test_umath.TestHypotSpecialValues(TestCase)
numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs(self)
numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2(self)
numpy.core.tests.test_umath.TestHypotSpecialValues.test_no_fpe(self)
numpy.core.tests.test_umath.TestLdexp(TestCase)
numpy.core.tests.test_umath.TestLdexp._check_ldexp(self,tp)
numpy.core.tests.test_umath.TestLdexp.test_ldexp(self)
numpy.core.tests.test_umath.TestLdexp.test_ldexp_overflow(self)
numpy.core.tests.test_umath.TestLog(TestCase)
numpy.core.tests.test_umath.TestLog.test_log_values(self)
numpy.core.tests.test_umath.TestLog1p(TestCase)
numpy.core.tests.test_umath.TestLog1p.test_log1p(self)
numpy.core.tests.test_umath.TestLog1p.test_special(self)
numpy.core.tests.test_umath.TestLog2(TestCase)
numpy.core.tests.test_umath.TestLog2.test_log2_values(self)
numpy.core.tests.test_umath.TestLogAddExp(_FilterInvalids)
numpy.core.tests.test_umath.TestLogAddExp.test_inf(self)
numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_range(self)
numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_values(self)
numpy.core.tests.test_umath.TestLogAddExp.test_nan(self)
numpy.core.tests.test_umath.TestLogAddExp2(_FilterInvalids)
numpy.core.tests.test_umath.TestLogAddExp2.test_inf(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_range(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_values(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_nan(self)
numpy.core.tests.test_umath.TestMaximum(_FilterInvalids)
numpy.core.tests.test_umath.TestMaximum.test_complex_nans(self)
numpy.core.tests.test_umath.TestMaximum.test_float_nans(self)
numpy.core.tests.test_umath.TestMaximum.test_object_array(self)
numpy.core.tests.test_umath.TestMaximum.test_reduce(self)
numpy.core.tests.test_umath.TestMaximum.test_reduce_complex(self)
numpy.core.tests.test_umath.TestMinMax(TestCase)
numpy.core.tests.test_umath.TestMinMax.test_lower_align(self)
numpy.core.tests.test_umath.TestMinMax.test_minmax_blocked(self)
numpy.core.tests.test_umath.TestMinimum(_FilterInvalids)
numpy.core.tests.test_umath.TestMinimum.test_complex_nans(self)
numpy.core.tests.test_umath.TestMinimum.test_float_nans(self)
numpy.core.tests.test_umath.TestMinimum.test_object_array(self)
numpy.core.tests.test_umath.TestMinimum.test_reduce(self)
numpy.core.tests.test_umath.TestMinimum.test_reduce_complex(self)
numpy.core.tests.test_umath.TestPower(TestCase)
numpy.core.tests.test_umath.TestPower.test_fast_power(self)
numpy.core.tests.test_umath.TestPower.test_power_complex(self)
numpy.core.tests.test_umath.TestPower.test_power_float(self)
numpy.core.tests.test_umath.TestPower.test_power_zero(self)
numpy.core.tests.test_umath.TestRadians(TestCase)
numpy.core.tests.test_umath.TestRadians.test_radians(self)
numpy.core.tests.test_umath.TestSign(TestCase)
numpy.core.tests.test_umath.TestSign.test_sign(self)
numpy.core.tests.test_umath.TestSpecialMethods(TestCase)
numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_priority(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable(self)
numpy.core.tests.test_umath.TestSubclass(TestCase)
numpy.core.tests.test_umath.TestSubclass.test_subclass_op(self)
numpy.core.tests.test_umath._FilterInvalids(object)
numpy.core.tests.test_umath._FilterInvalids.setUp(self)
numpy.core.tests.test_umath._FilterInvalids.tearDown(self)
numpy.core.tests.test_umath._check_branch_cut(f,x0,dx,re_sign=1,im_sign=-1,sig_zero_ok=False,dtype=np.complex)
numpy.core.tests.test_umath._test_nextafter(t)
numpy.core.tests.test_umath._test_spacing(t)
numpy.core.tests.test_umath.assert_arctan2_isnan(x,y)
numpy.core.tests.test_umath.assert_arctan2_isninf(x,y)
numpy.core.tests.test_umath.assert_arctan2_isnzero(x,y)
numpy.core.tests.test_umath.assert_arctan2_ispinf(x,y)
numpy.core.tests.test_umath.assert_arctan2_ispzero(x,y)
numpy.core.tests.test_umath.assert_hypot_isinf(x,y)
numpy.core.tests.test_umath.assert_hypot_isnan(x,y)
numpy.core.tests.test_umath.is_longdouble_finfo_bogus()
numpy.core.tests.test_umath.on_powerpc()
numpy.core.tests.test_umath.test_complex_nan_comparisons()
numpy.core.tests.test_umath.test_copysign()
numpy.core.tests.test_umath.test_nextafter()
numpy.core.tests.test_umath.test_nextafter_vs_spacing()
numpy.core.tests.test_umath.test_nextafterf()
numpy.core.tests.test_umath.test_nextafterl()
numpy.core.tests.test_umath.test_pos_nan()
numpy.core.tests.test_umath.test_reduceat()
numpy.core.tests.test_umath.test_reduceat_empty()
numpy.core.tests.test_umath.test_spacing()
numpy.core.tests.test_umath.test_spacing_gfortran()
numpy.core.tests.test_umath.test_spacingf()
numpy.core.tests.test_umath.test_spacingl()
numpy.tests.test_umath.TestAbsolute(TestCase)
numpy.tests.test_umath.TestAbsolute.test_abs_blocked(self)
numpy.tests.test_umath.TestAbsolute.test_lower_align(self)
numpy.tests.test_umath.TestArctan2SpecialValues(TestCase)
numpy.tests.test_umath.TestArctan2SpecialValues.test_any_ninf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_any_pinf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_any(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_nan_any(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_negative_zero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_one_one(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_positive_zero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_negative(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_positive(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero(self)
numpy.tests.test_umath.TestAttributes(TestCase)
numpy.tests.test_umath.TestAttributes.test_attributes(self)
numpy.tests.test_umath.TestChoose(TestCase)
numpy.tests.test_umath.TestChoose.test_mixed(self)
numpy.tests.test_umath.TestComplexFunctions(object)
numpy.tests.test_umath.TestComplexFunctions.check_loss_of_precision(self,dtype)
numpy.tests.test_umath.TestComplexFunctions.test_against_cmath(self)
numpy.tests.test_umath.TestComplexFunctions.test_branch_cuts(self)
numpy.tests.test_umath.TestComplexFunctions.test_branch_cuts_failing(self)
numpy.tests.test_umath.TestComplexFunctions.test_it(self)
numpy.tests.test_umath.TestComplexFunctions.test_loss_of_precision(self)
numpy.tests.test_umath.TestComplexFunctions.test_precisions_consistent(self)
numpy.tests.test_umath.TestConstants(TestCase)
numpy.tests.test_umath.TestConstants.test_e(self)
numpy.tests.test_umath.TestConstants.test_euler_gamma(self)
numpy.tests.test_umath.TestConstants.test_pi(self)
numpy.tests.test_umath.TestDegrees(TestCase)
numpy.tests.test_umath.TestDegrees.test_degrees(self)
numpy.tests.test_umath.TestDivision(TestCase)
numpy.tests.test_umath.TestExp(TestCase)
numpy.tests.test_umath.TestExp.test_exp_values(self)
numpy.tests.test_umath.TestExp2(TestCase)
numpy.tests.test_umath.TestExp2.test_exp2_values(self)
numpy.tests.test_umath.TestExpm1(TestCase)
numpy.tests.test_umath.TestExpm1.test_expm1(self)
numpy.tests.test_umath.TestExpm1.test_special(self)
numpy.tests.test_umath.TestFmax(_FilterInvalids)
numpy.tests.test_umath.TestFmax.test_reduce(self)
numpy.tests.test_umath.TestFmin(_FilterInvalids)
numpy.tests.test_umath.TestFmin.test_reduce(self)
numpy.tests.test_umath.TestHypot(TestCase,object)
numpy.tests.test_umath.TestHypot.test_simple(self)
numpy.tests.test_umath.TestHypotSpecialValues(TestCase)
numpy.tests.test_umath.TestHypotSpecialValues.test_nan_outputs(self)
numpy.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2(self)
numpy.tests.test_umath.TestHypotSpecialValues.test_no_fpe(self)
numpy.tests.test_umath.TestLdexp(TestCase)
numpy.tests.test_umath.TestLdexp._check_ldexp(self,tp)
numpy.tests.test_umath.TestLdexp.test_ldexp(self)
numpy.tests.test_umath.TestLdexp.test_ldexp_overflow(self)
numpy.tests.test_umath.TestLog(TestCase)
numpy.tests.test_umath.TestLog.test_log_values(self)
numpy.tests.test_umath.TestLog1p(TestCase)
numpy.tests.test_umath.TestLog1p.test_log1p(self)
numpy.tests.test_umath.TestLog1p.test_special(self)
numpy.tests.test_umath.TestLog2(TestCase)
numpy.tests.test_umath.TestLog2.test_log2_values(self)
numpy.tests.test_umath.TestLogAddExp(_FilterInvalids)
numpy.tests.test_umath.TestLogAddExp.test_inf(self)
numpy.tests.test_umath.TestLogAddExp.test_logaddexp_range(self)
numpy.tests.test_umath.TestLogAddExp.test_logaddexp_values(self)
numpy.tests.test_umath.TestLogAddExp.test_nan(self)
numpy.tests.test_umath.TestLogAddExp2(_FilterInvalids)
numpy.tests.test_umath.TestLogAddExp2.test_inf(self)
numpy.tests.test_umath.TestLogAddExp2.test_logaddexp2_range(self)
numpy.tests.test_umath.TestLogAddExp2.test_logaddexp2_values(self)
numpy.tests.test_umath.TestLogAddExp2.test_nan(self)
numpy.tests.test_umath.TestMaximum(_FilterInvalids)
numpy.tests.test_umath.TestMaximum.test_reduce(self)
numpy.tests.test_umath.TestMinMax(TestCase)
numpy.tests.test_umath.TestMinMax.test_lower_align(self)
numpy.tests.test_umath.TestMinMax.test_minmax_blocked(self)
numpy.tests.test_umath.TestMinimum(_FilterInvalids)
numpy.tests.test_umath.TestMinimum.test_reduce(self)
numpy.tests.test_umath.TestPower(TestCase)
numpy.tests.test_umath.TestPower.test_fast_power(self)
numpy.tests.test_umath.TestPower.test_power_zero(self)
numpy.tests.test_umath.TestRadians(TestCase)
numpy.tests.test_umath.TestRadians.test_radians(self)
numpy.tests.test_umath.TestSign(TestCase)
numpy.tests.test_umath.TestSign.test_sign(self)
numpy.tests.test_umath.TestSpecialMethods(TestCase)
numpy.tests.test_umath.TestSpecialMethods.test_array_with_context(self)
numpy.tests.test_umath.TestSpecialMethods.test_default_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_failing_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_failing_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_old_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_priority(self)
numpy.tests.test_umath.TestSpecialMethods.test_priority_with_scalar(self)
numpy.tests.test_umath.TestSpecialMethods.test_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable(self)
numpy.tests.test_umath.TestSubclass(TestCase)
numpy.tests.test_umath.TestSubclass.test_subclass_op(self)
numpy.tests.test_umath._FilterInvalids(object)
numpy.tests.test_umath._FilterInvalids.setUp(self)
numpy.tests.test_umath._FilterInvalids.tearDown(self)
numpy.tests.test_umath._check_branch_cut(f,x0,dx,re_sign=1,im_sign=-1,sig_zero_ok=False,dtype=np.complex)
numpy.tests.test_umath._test_nextafter(t)
numpy.tests.test_umath._test_spacing(t)
numpy.tests.test_umath.assert_arctan2_isnan(x,y)
numpy.tests.test_umath.assert_arctan2_isninf(x,y)
numpy.tests.test_umath.assert_arctan2_isnzero(x,y)
numpy.tests.test_umath.assert_arctan2_ispinf(x,y)
numpy.tests.test_umath.assert_arctan2_ispzero(x,y)
numpy.tests.test_umath.assert_hypot_isinf(x,y)
numpy.tests.test_umath.assert_hypot_isnan(x,y)
numpy.tests.test_umath.is_longdouble_finfo_bogus()
numpy.tests.test_umath.on_powerpc()
numpy.tests.test_umath.test_copysign()
numpy.tests.test_umath.test_nextafter()
numpy.tests.test_umath.test_nextafter_vs_spacing()
numpy.tests.test_umath.test_nextafterf()
numpy.tests.test_umath.test_nextafterl()
numpy.tests.test_umath.test_pos_nan()
numpy.tests.test_umath.test_reduceat()
numpy.tests.test_umath.test_reduceat_empty()
numpy.tests.test_umath.test_spacing()
numpy.tests.test_umath.test_spacing_gfortran()
numpy.tests.test_umath.test_spacingf()
numpy.tests.test_umath.test_spacingl()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_numerictypes.py----------------------------------------
A:numpy.core.tests.test_numerictypes.h->numpy.array(self._buffer, dtype=self._descr)
A:numpy.core.tests.test_numerictypes.a->numpy.arange(10, dtype=np.float32)
A:numpy.core.tests.test_numerictypes.res->self.ary[['f0', 'f2']].tolist()
A:numpy.core.tests.test_numerictypes.self.ary->numpy.array([(1, 2, 3, 4), (5, 6, 7, 8)], dtype='i4,f4,i2,c8')
numpy.core.tests.test_numerictypes.TestCommonType(TestCase)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses1(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses2(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins2(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins3(self)
numpy.core.tests.test_numerictypes.TestEmptyField(TestCase)
numpy.core.tests.test_numerictypes.TestEmptyField.test_assign(self)
numpy.core.tests.test_numerictypes.TestMultipleFields(TestCase)
numpy.core.tests.test_numerictypes.TestMultipleFields._bad_call(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.setUp(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.test_no_tuple(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.test_return(self)
numpy.core.tests.test_numerictypes.create_values(object)
numpy.core.tests.test_numerictypes.create_values.test_list_of_list_of_tuple(self)
numpy.core.tests.test_numerictypes.create_values.test_list_of_tuple(self)
numpy.core.tests.test_numerictypes.create_values.test_tuple(self)
numpy.core.tests.test_numerictypes.create_zeros(object)
numpy.core.tests.test_numerictypes.create_zeros.test_zeros0D(self)
numpy.core.tests.test_numerictypes.create_zeros.test_zerosMD(self)
numpy.core.tests.test_numerictypes.create_zeros.test_zerosSD(self)
numpy.core.tests.test_numerictypes.normalize_descr(descr)
numpy.core.tests.test_numerictypes.read_values_nested(object)
numpy.core.tests.test_numerictypes.read_values_nested.test_access_top_fields(self)
numpy.core.tests.test_numerictypes.read_values_nested.test_nested1_acessors(self)
numpy.core.tests.test_numerictypes.read_values_nested.test_nested1_descriptor(self)
numpy.core.tests.test_numerictypes.read_values_nested.test_nested2_acessors(self)
numpy.core.tests.test_numerictypes.read_values_nested.test_nested2_descriptor(self)
numpy.core.tests.test_numerictypes.read_values_plain(object)
numpy.core.tests.test_numerictypes.read_values_plain.test_access_fields(self)
numpy.core.tests.test_numerictypes.test_create_values_nested_multiple(create_values,TestCase)
numpy.core.tests.test_numerictypes.test_create_values_nested_single(create_values,TestCase)
numpy.core.tests.test_numerictypes.test_create_values_plain_multiple(create_values,TestCase)
numpy.core.tests.test_numerictypes.test_create_values_plain_single(create_values,TestCase)
numpy.core.tests.test_numerictypes.test_create_zeros_nested(create_zeros,TestCase)
numpy.core.tests.test_numerictypes.test_create_zeros_plain(create_zeros,TestCase)
numpy.core.tests.test_numerictypes.test_read_values_nested_multiple(read_values_nested,TestCase)
numpy.core.tests.test_numerictypes.test_read_values_nested_single(read_values_nested,TestCase)
numpy.core.tests.test_numerictypes.test_read_values_plain_multiple(read_values_plain,TestCase)
numpy.core.tests.test_numerictypes.test_read_values_plain_single(read_values_plain,TestCase)
numpy.tests.test_numerictypes.TestCommonType(TestCase)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_loses1(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_loses2(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins2(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins3(self)
numpy.tests.test_numerictypes.TestEmptyField(TestCase)
numpy.tests.test_numerictypes.TestEmptyField.test_assign(self)
numpy.tests.test_numerictypes.TestMultipleFields(TestCase)
numpy.tests.test_numerictypes.TestMultipleFields._bad_call(self)
numpy.tests.test_numerictypes.TestMultipleFields.setUp(self)
numpy.tests.test_numerictypes.TestMultipleFields.test_no_tuple(self)
numpy.tests.test_numerictypes.TestMultipleFields.test_return(self)
numpy.tests.test_numerictypes.create_values(object)
numpy.tests.test_numerictypes.create_values.test_list_of_list_of_tuple(self)
numpy.tests.test_numerictypes.create_values.test_list_of_tuple(self)
numpy.tests.test_numerictypes.create_values.test_tuple(self)
numpy.tests.test_numerictypes.create_zeros(object)
numpy.tests.test_numerictypes.create_zeros.test_zeros0D(self)
numpy.tests.test_numerictypes.create_zeros.test_zerosMD(self)
numpy.tests.test_numerictypes.create_zeros.test_zerosSD(self)
numpy.tests.test_numerictypes.normalize_descr(descr)
numpy.tests.test_numerictypes.read_values_nested(object)
numpy.tests.test_numerictypes.read_values_nested.test_access_top_fields(self)
numpy.tests.test_numerictypes.read_values_nested.test_nested1_acessors(self)
numpy.tests.test_numerictypes.read_values_nested.test_nested1_descriptor(self)
numpy.tests.test_numerictypes.read_values_nested.test_nested2_acessors(self)
numpy.tests.test_numerictypes.read_values_nested.test_nested2_descriptor(self)
numpy.tests.test_numerictypes.read_values_plain(object)
numpy.tests.test_numerictypes.read_values_plain.test_access_fields(self)
numpy.tests.test_numerictypes.test_create_values_nested_multiple(create_values,TestCase)
numpy.tests.test_numerictypes.test_create_values_nested_single(create_values,TestCase)
numpy.tests.test_numerictypes.test_create_values_plain_multiple(create_values,TestCase)
numpy.tests.test_numerictypes.test_create_values_plain_single(create_values,TestCase)
numpy.tests.test_numerictypes.test_create_zeros_nested(create_zeros,TestCase)
numpy.tests.test_numerictypes.test_create_zeros_plain(create_zeros,TestCase)
numpy.tests.test_numerictypes.test_read_values_nested_multiple(read_values_nested,TestCase)
numpy.tests.test_numerictypes.test_read_values_nested_single(read_values_nested,TestCase)
numpy.tests.test_numerictypes.test_read_values_plain_multiple(read_values_plain,TestCase)
numpy.tests.test_numerictypes.test_read_values_plain_single(read_values_plain,TestCase)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_umath_complex.py----------------------------------------
A:numpy.core.tests.test_umath_complex.ref->g(x[i], y[i])
A:numpy.core.tests.test_umath_complex.z->numpy.sqrt(np.array(np.complex(-np.inf, np.nan)))
A:numpy.core.tests.test_umath_complex.x->numpy.array([complex(np.nan, np.NZERO)], dtype=np.complex)
A:numpy.core.tests.test_umath_complex.y->numpy.abs(x)
A:numpy.core.tests.test_umath_complex.xa->numpy.array(x, dtype=np.complex)
A:numpy.core.tests.test_umath_complex.ya->numpy.array(yl, dtype=np.complex)
A:numpy.core.tests.test_umath_complex.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_umath_complex.lx->list(range(len(x)))
A:numpy.core.tests.test_umath_complex.p_r[4]->complex(np.inf, np.nan)
A:numpy.core.tests.test_umath_complex.y_r->numpy.array([np.sqrt(2.0), 2, np.sqrt(5), np.inf, np.nan])
A:numpy.core.tests.test_umath_complex.z1->numpy.array([complex(x1, y1)])
A:numpy.core.tests.test_umath_complex.z2->numpy.complex(x2, y2)
numpy.core.tests.test_umath_complex.TestCabs(object)
numpy.core.tests.test_umath_complex.TestCabs.setUp(self)
numpy.core.tests.test_umath_complex.TestCabs.tearDown(self)
numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan(self)
numpy.core.tests.test_umath_complex.TestCabs.test_fabs(self)
numpy.core.tests.test_umath_complex.TestCabs.test_simple(self)
numpy.core.tests.test_umath_complex.TestCarg(object)
numpy.core.tests.test_umath_complex.TestCarg.test_simple(self)
numpy.core.tests.test_umath_complex.TestCarg.test_special_values(self)
numpy.core.tests.test_umath_complex.TestCarg.test_zero(self)
numpy.core.tests.test_umath_complex.TestCexp(object)
numpy.core.tests.test_umath_complex.TestCexp.test_simple(self)
numpy.core.tests.test_umath_complex.TestCexp.test_special_values(self)
numpy.core.tests.test_umath_complex.TestCexp.test_special_values2(self)
numpy.core.tests.test_umath_complex.TestClog(TestCase)
numpy.core.tests.test_umath_complex.TestClog.test_simple(self)
numpy.core.tests.test_umath_complex.TestClog.test_special_values(self)
numpy.core.tests.test_umath_complex.TestCpow(TestCase)
numpy.core.tests.test_umath_complex.TestCpow.setUp(self)
numpy.core.tests.test_umath_complex.TestCpow.tearDown(self)
numpy.core.tests.test_umath_complex.TestCpow.test_array(self)
numpy.core.tests.test_umath_complex.TestCpow.test_scalar(self)
numpy.core.tests.test_umath_complex.TestCpow.test_simple(self)
numpy.core.tests.test_umath_complex.TestCsqrt(object)
numpy.core.tests.test_umath_complex.TestCsqrt.test_simple(self)
numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate(self)
numpy.core.tests.test_umath_complex.TestCsqrt.test_special_values(self)
numpy.core.tests.test_umath_complex.check_complex_value(f,x1,y1,x2,y2,exact=True)
numpy.core.tests.test_umath_complex.check_real_value(f,x1,y1,x,exact=True)
numpy.core.tests.test_umath_complex.platform_skip(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_datetime.py----------------------------------------
A:numpy.core.tests.test_datetime.dt1->numpy.dtype('M8[%s]' % unit1)
A:numpy.core.tests.test_datetime.dt2->numpy.dtype('M8[%s]' % unit2)
A:numpy.core.tests.test_datetime.a->numpy.array(['1980-03-23'], dtype=np.datetime64)
A:numpy.core.tests.test_datetime.b->numpy.datetime64('2010-02-15T06:30Z', 'm')
A:numpy.core.tests.test_datetime.dt->numpy.dtype('>M8[us]')
A:numpy.core.tests.test_datetime.arr->numpy.array([b, dt])
A:numpy.core.tests.test_datetime.str_a->str_a.astype('U').astype('U')
A:numpy.core.tests.test_datetime.dt_a->numpy.array(a, dtype='M')
A:numpy.core.tests.test_datetime.str_b->str_b.astype('U').astype('U')
A:numpy.core.tests.test_datetime.dt_b->numpy.empty_like(dt_a)
A:numpy.core.tests.test_datetime.dtnat->numpy.array('NaT', dtype='M8[h]')
A:numpy.core.tests.test_datetime.t->numpy.ones(3, dtype='M8[s]')
A:numpy.core.tests.test_datetime.timesteps->numpy.array([date], dtype='datetime64[s]')[0].astype(np.int64)
A:numpy.core.tests.test_datetime.x->numpy.array([date], dtype='datetime64[%s]' % unit)
A:numpy.core.tests.test_datetime.bdd->numpy.busdaycalendar(weekmask='1111100', holidays=holidays)
A:numpy.core.tests.test_datetime.dates->numpy.busday_offset('2011-12-31', -np.arange(366), roll='forward', busdaycal=bdd)
numpy.core.tests.test_datetime.TestDateTime(TestCase)
numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow(self)
numpy.core.tests.test_datetime.TestDateTime.test_creation_overflow(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_add(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_arange(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_find_type(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_str(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string_timezone(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_offset(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_casting_rules(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_compare(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_divide(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_dtype_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_is_busday(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_like(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_minmax(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_multiply(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_nat_casting(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_string_conversion(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_subtract(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_unary(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_y2038(self)
numpy.core.tests.test_datetime.TestDateTime.test_days_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_days_to_pydate(self)
numpy.core.tests.test_datetime.TestDateTime.test_different_unit_comparison(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_as(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_day(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_fs(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_hour(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_minute(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_month(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_second(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_week(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_year(self)
numpy.core.tests.test_datetime.TestDateTime.test_dtype_comparison(self)
numpy.core.tests.test_datetime.TestDateTime.test_dtype_promotion(self)
numpy.core.tests.test_datetime.TestDateTime.test_hours(self)
numpy.core.tests.test_datetime.TestDateTime.test_month_truncation(self)
numpy.core.tests.test_datetime.TestDateTime.test_pickle(self)
numpy.core.tests.test_datetime.TestDateTime.test_pydatetime_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_pyobject_roundtrip(self)
numpy.core.tests.test_datetime.TestDateTime.test_setstate(self)
numpy.core.tests.test_datetime.TestDateTime.test_string_parser_error_check(self)
numpy.core.tests.test_datetime.TestDateTime.test_string_parser_variants(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_arange(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction_units(self)
numpy.core.tests.test_datetime.TestDateTimeData(TestCase)
numpy.core.tests.test_datetime.TestDateTimeData.test_basic(self)
numpy.tests.test_datetime.TestDateTime(TestCase)
numpy.tests.test_datetime.TestDateTime.test_cast_overflow(self)
numpy.tests.test_datetime.TestDateTime.test_creation_overflow(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_add(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_arange(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_array_find_type(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_offset(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_casting_rules(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_compare(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_divide(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_dtype_creation(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_is_busday(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_like(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_minmax(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_multiply(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_nat_casting(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_subtract(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_unary(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_y2038(self)
numpy.tests.test_datetime.TestDateTime.test_days_creation(self)
numpy.tests.test_datetime.TestDateTime.test_days_to_pydate(self)
numpy.tests.test_datetime.TestDateTime.test_different_unit_comparison(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_as(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_day(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_fs(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_hour(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_minute(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_month(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_second(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_week(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_year(self)
numpy.tests.test_datetime.TestDateTime.test_dtype_comparison(self)
numpy.tests.test_datetime.TestDateTime.test_dtype_promotion(self)
numpy.tests.test_datetime.TestDateTime.test_hours(self)
numpy.tests.test_datetime.TestDateTime.test_month_truncation(self)
numpy.tests.test_datetime.TestDateTime.test_pickle(self)
numpy.tests.test_datetime.TestDateTime.test_pydatetime_creation(self)
numpy.tests.test_datetime.TestDateTime.test_setstate(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_arange(self)
numpy.tests.test_datetime.TestDateTimeData(TestCase)
numpy.tests.test_datetime.TestDateTimeData.test_basic(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_shape_base.py----------------------------------------
A:numpy.core.tests.test_shape_base.a->numpy.arange(4, dtype=np.float64).reshape((2, 2))
A:numpy.core.tests.test_shape_base.b->list(range(3))
A:numpy.core.tests.test_shape_base.res->arange(2 * 3 * 7).reshape((2, 3, 7))
A:numpy.core.tests.test_shape_base.desired->array([[1, 2], [1, 2]])
A:numpy.core.tests.test_shape_base.r->numpy.concatenate((a, b, c), axis=None)
A:numpy.core.tests.test_shape_base.d->array(['0', '1', '2', '3', '0', '1', '2', 'x'])
A:numpy.core.tests.test_shape_base.r4->list(range(4))
A:numpy.core.tests.test_shape_base.r3->list(range(3))
A:numpy.core.tests.test_shape_base.a23->array([[10, 11, 12], [13, 14, 15]])
A:numpy.core.tests.test_shape_base.a13->array([[0, 1, 2]])
numpy.core.tests.test_shape_base.TestAtleast1d(TestCase)
numpy.core.tests.test_shape_base.TestAtleast1d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_r1array(self)
numpy.core.tests.test_shape_base.TestAtleast2d(TestCase)
numpy.core.tests.test_shape_base.TestAtleast2d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_r2array(self)
numpy.core.tests.test_shape_base.TestAtleast3d(TestCase)
numpy.core.tests.test_shape_base.TestAtleast3d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestHstack(TestCase)
numpy.core.tests.test_shape_base.TestHstack.test_0D_array(self)
numpy.core.tests.test_shape_base.TestHstack.test_1D_array(self)
numpy.core.tests.test_shape_base.TestHstack.test_2D_array(self)
numpy.core.tests.test_shape_base.TestVstack(TestCase)
numpy.core.tests.test_shape_base.TestVstack.test_0D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_1D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_2D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_2D_array2(self)
numpy.core.tests.test_shape_base.test_concatenate()
numpy.core.tests.test_shape_base.test_concatenate_axis_None()
numpy.core.tests.test_shape_base.test_concatenate_sloppy0()
numpy.tests.test_TestAtleast1d(TestCase)
numpy.tests.test_TestAtleast1d.test_0D_array(self)
numpy.tests.test_TestAtleast1d.test_1D_array(self)
numpy.tests.test_TestAtleast1d.test_2D_array(self)
numpy.tests.test_TestAtleast1d.test_3D_array(self)
numpy.tests.test_TestAtleast1d.test_r1array(self)
numpy.tests.test_TestAtleast2d(TestCase)
numpy.tests.test_TestAtleast2d.test_0D_array(self)
numpy.tests.test_TestAtleast2d.test_1D_array(self)
numpy.tests.test_TestAtleast2d.test_2D_array(self)
numpy.tests.test_TestAtleast2d.test_3D_array(self)
numpy.tests.test_TestAtleast2d.test_r2array(self)
numpy.tests.test_TestAtleast3d(TestCase)
numpy.tests.test_TestAtleast3d.test_0D_array(self)
numpy.tests.test_TestAtleast3d.test_1D_array(self)
numpy.tests.test_TestAtleast3d.test_2D_array(self)
numpy.tests.test_TestAtleast3d.test_3D_array(self)
numpy.tests.test_TestHstack(TestCase)
numpy.tests.test_TestHstack.test_0D_array(self)
numpy.tests.test_TestHstack.test_1D_array(self)
numpy.tests.test_TestHstack.test_2D_array(self)
numpy.tests.test_TestVstack(TestCase)
numpy.tests.test_TestVstack.test_0D_array(self)
numpy.tests.test_TestVstack.test_1D_array(self)
numpy.tests.test_TestVstack.test_2D_array(self)
numpy.tests.test_TestVstack.test_2D_array2(self)
numpy.tests.test_test_concatenate()
numpy.tests.test_test_concatenate_axis_None()
numpy.tests.test_test_concatenate_sloppy0()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_numeric.py----------------------------------------
A:numpy.core.tests.test_numeric.self.array->array(sequence)
A:numpy.core.tests.test_numeric.out->Vec(self.array.copy())
A:numpy.core.tests.test_numeric.self.A->array([1, -1, 1, -1])
A:numpy.core.tests.test_numeric.self.b1->rand(8, 1)
A:numpy.core.tests.test_numeric.self.b2->rand(8)
A:numpy.core.tests.test_numeric.self.b3->rand(1, 8)
A:numpy.core.tests.test_numeric.self.b4->rand(10)
A:numpy.core.tests.test_numeric.c1->dot(arg1, arg2)
A:numpy.core.tests.test_numeric.c2->dot_(arg1, arg2)
A:numpy.core.tests.test_numeric.b1->rand(8, 1)
A:numpy.core.tests.test_numeric.b2->rand(1, 1)
A:numpy.core.tests.test_numeric.arg1->rand(*dim1)
A:numpy.core.tests.test_numeric.arg2->rand(*dim2)
A:numpy.core.tests.test_numeric.U_non_cont->transpose([[1.0, 1.0], [1.0, 2.0]])
A:numpy.core.tests.test_numeric.U_cont->ascontiguousarray(U_non_cont)
A:numpy.core.tests.test_numeric.x->numpy.array([])
A:numpy.core.tests.test_numeric.zeros->array([Vec([0.0, 0.0]), Vec([0.0, 0.0])])
A:numpy.core.tests.test_numeric.A->array([1, 1j, -1, -1j])
A:numpy.core.tests.test_numeric.Ar1->array([[1, 2, 3, 4], [1, 2, 3, 4]])
A:numpy.core.tests.test_numeric.Ar2->array([[1, 2], [3, 4], [1, 2], [3, 4]])
A:numpy.core.tests.test_numeric.Ar3->array([[1, 2, 3], [4, 1, 2], [3, 4, 1], [2, 3, 4]])
A:numpy.core.tests.test_numeric.Ar->resize(A, (0,))
A:numpy.core.tests.test_numeric.self.nm->self.f.copy()
A:numpy.core.tests.test_numeric.self.im->self.t.copy()
A:numpy.core.tests.test_numeric.d->array([False] * 100043, dtype=np.bool)
A:numpy.core.tests.test_numeric.e->array([True] * 100043, dtype=np.bool)
A:numpy.core.tests.test_numeric.self.f->ones(256, dtype=np.float32)
A:numpy.core.tests.test_numeric.self.ef->ones(self.f.size, dtype=np.bool)
A:numpy.core.tests.test_numeric.self.d->ones(128, dtype=np.float64)
A:numpy.core.tests.test_numeric.self.ed->ones(self.d.size, dtype=np.bool)
A:numpy.core.tests.test_numeric.err->seterr()
A:numpy.core.tests.test_numeric.old->seterr(divide='print')
A:numpy.core.tests.test_numeric.new->seterr()
A:numpy.core.tests.test_numeric.ftype->numpy.obj2sctype(typecode)
A:numpy.core.tests.test_numeric.fi->numpy.finfo(rtype)
A:numpy.core.tests.test_numeric.rtype->type(ftype(0).real)
A:numpy.core.tests.test_numeric.ft_tiny->ftype(fi.tiny)
A:numpy.core.tests.test_numeric.ft_max->ftype(fi.max)
A:numpy.core.tests.test_numeric.ft_eps->ftype(fi.eps)
A:numpy.core.tests.test_numeric.b->like_function(a, subok=False, **fill_kwarg)
A:numpy.core.tests.test_numeric.ai32->fromiter(self.makegen(), int32)
A:numpy.core.tests.test_numeric.ai64->fromiter(self.makegen(), int64)
A:numpy.core.tests.test_numeric.af->fromiter(self.makegen(), float)
A:numpy.core.tests.test_numeric.expected->array(list(self.makegen()))
A:numpy.core.tests.test_numeric.a->numpy.array([1])
A:numpy.core.tests.test_numeric.a20->fromiter(self.makegen(), int, 20)
A:numpy.core.tests.test_numeric.V->rand(5, 8)
A:numpy.core.tests.test_numeric.g1->randint(0, 5, size=15)
A:numpy.core.tests.test_numeric.g2->randint(0, 8, size=15)
A:numpy.core.tests.test_numeric.res->array_equiv(array([1, 2]), array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
A:numpy.core.tests.test_numeric.data->self._neg_byteorder(data)
A:numpy.core.tests.test_numeric.ac->numpy.array([1]).copy()
A:numpy.core.tests.test_numeric.act->numpy.array([1]).copy().copy()
A:numpy.core.tests.test_numeric.m->zeros(a.shape)
A:numpy.core.tests.test_numeric.M->float64(1)
A:numpy.core.tests.test_numeric.m_s->self._neg_byteorder(m)
A:numpy.core.tests.test_numeric.a_s->self._neg_byteorder(a)
A:numpy.core.tests.test_numeric.bt->like_function(a, subok=False, **fill_kwarg).copy()
A:numpy.core.tests.test_numeric.a2->clip(a, m, M, out=a)
A:numpy.core.tests.test_numeric.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_numeric.arr->func(shape, order=order, dtype=dtype, **fill_kwarg)
A:numpy.core.tests.test_numeric.aran->arange(125).reshape((5, 5, 5))
A:numpy.core.tests.test_numeric.y->numpy.array([-1, -2j, 3 + 1j], dtype=np.complex)
A:numpy.core.tests.test_numeric.dtype->numpy.dtype('{0}{1}'.format(type, bytes))
A:numpy.core.tests.test_numeric.val->str(fill_value)
A:numpy.core.tests.test_numeric.beg->sys.getrefcount(dim)
A:numpy.core.tests.test_numeric.z->numpy.correlate(y, x, 'full', old_behavior=self.old_behavior)
A:numpy.core.tests.test_numeric.dz->like_function(d, order='A', dtype=dtype, **fill_kwarg)
A:numpy.core.tests.test_numeric.self.x->numpy.array([1, 2, 3, 4, 5], dtype=dt)
A:numpy.core.tests.test_numeric.self.y->numpy.array([-1, -2, -3], dtype=dt)
A:numpy.core.tests.test_numeric.self.z1->numpy.array([-3.0, -8.0, -14.0, -20.0, -26.0, -14.0, -5.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.z2->numpy.array([-5.0, -14.0, -26.0, -20.0, -14.0, -8.0, -3.0], dtype=dt)
A:numpy.core.tests.test_numeric.r_z->r_z[::-1].conjugate()
A:numpy.core.tests.test_numeric.xr->numpy.roll(x, 2)
A:numpy.core.tests.test_numeric.x2->numpy.reshape(np.arange(10), (2, 5))
A:numpy.core.tests.test_numeric.x2r->numpy.roll(x2, 1, axis=1)
numpy.core.tests.test_TestBoolCmp.test_float(self)
numpy.core.tests.test_TestClip._generate_data_complex(self,n,m)
numpy.core.tests.test_TestClip._generate_int32_data(self,n,m)
numpy.core.tests.test_TestClip._generate_int_data(self,n,m)
numpy.core.tests.test_TestClip.test_clip_with_out_array_int32(self)
numpy.core.tests.test_TestClip.test_clip_with_out_array_outint32(self)
numpy.core.tests.test_TestClip.test_clip_with_out_simple_int32(self)
numpy.core.tests.test_TestClip.test_simple_complex(self)
numpy.core.tests.test_TestClip.test_simple_int(self)
numpy.core.tests.test_TestClip.test_simple_int32_inout(self)
numpy.core.tests.test_TestClip.test_simple_int32_out(self)
numpy.core.tests.test_TestClip.test_simple_int64_inout(self)
numpy.core.tests.test_TestClip.test_simple_int64_out(self)
numpy.core.tests.test_TestCorrelate.test_complex(self)
numpy.core.tests.test_TestCorrelate.test_float(self)
numpy.core.tests.test_TestCorrelate.test_object(self)
numpy.core.tests.test_TestCorrelateNew.test_complex(self)
numpy.core.tests.test_TestDot.test_vecobject(self)
numpy.core.tests.test_TestFloatExceptions.test_floating_exceptions(self)
numpy.core.tests.test_TestIndex.test_boolean(self)
numpy.core.tests.test_TestIndex.test_boolean_edgecase(self)
numpy.core.tests.test_TestStringFunction.test_set_string_function(self)
numpy.core.tests.test__TestCorrelate.test_float(self)
numpy.core.tests.test__TestCorrelate.test_object(self)
numpy.core.tests.test_assert_array_strict_equal(x,y)
numpy.core.tests.test_numeric.NIterError(Exception)
numpy.core.tests.test_numeric.TestAllclose(object)
numpy.core.tests.test_numeric.TestAllclose.setUp(self)
numpy.core.tests.test_numeric.TestAllclose.tearDown(self)
numpy.core.tests.test_numeric.TestAllclose.test_ip_allclose(self)
numpy.core.tests.test_numeric.TestAllclose.test_ip_not_allclose(self)
numpy.core.tests.test_numeric.TestAllclose.test_no_parameter_modification(self)
numpy.core.tests.test_numeric.TestAllclose.tst_allclose(self,x,y)
numpy.core.tests.test_numeric.TestAllclose.tst_not_allclose(self,x,y)
numpy.core.tests.test_numeric.TestArgwhere(object)
numpy.core.tests.test_numeric.TestArgwhere.test_2D(self)
numpy.core.tests.test_numeric.TestArgwhere.test_list(self)
numpy.core.tests.test_numeric.TestArrayComparisons(TestCase)
numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equal(self)
numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equiv(self)
numpy.core.tests.test_numeric.TestBaseRepr(TestCase)
numpy.core.tests.test_numeric.TestBaseRepr.test_base3(self)
numpy.core.tests.test_numeric.TestBaseRepr.test_negative(self)
numpy.core.tests.test_numeric.TestBaseRepr.test_positive(self)
numpy.core.tests.test_numeric.TestBinaryRepr(TestCase)
numpy.core.tests.test_numeric.TestBinaryRepr.test_large(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_negative(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_zero(self)
numpy.core.tests.test_numeric.TestBoolArray(TestCase)
numpy.core.tests.test_numeric.TestBoolArray.setUp(self)
numpy.core.tests.test_numeric.TestBoolArray.test_all_any(self)
numpy.core.tests.test_numeric.TestBoolArray.test_logical_and_or_xor(self)
numpy.core.tests.test_numeric.TestBoolArray.test_logical_not_abs(self)
numpy.core.tests.test_numeric.TestBoolCmp(TestCase)
numpy.core.tests.test_numeric.TestBoolCmp.setUp(self)
numpy.core.tests.test_numeric.TestBoolCmp.test_double(self)
numpy.core.tests.test_numeric.TestBoolCmp.test_float(self)
numpy.core.tests.test_numeric.TestBoolScalar(TestCase)
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_and(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_or(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_xor(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_logical(self)
numpy.core.tests.test_numeric.TestClip(TestCase)
numpy.core.tests.test_numeric.TestClip._generate_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_data_complex(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_flt_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_int32_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_int_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_non_native_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._neg_byteorder(self,a)
numpy.core.tests.test_numeric.TestClip.clip(self,a,m,M,out=None)
numpy.core.tests.test_numeric.TestClip.fastclip(self,a,m,M,out=None)
numpy.core.tests.test_numeric.TestClip.setUp(self)
numpy.core.tests.test_numeric.TestClip.test_array_double(self)
numpy.core.tests.test_numeric.TestClip.test_clip_func_takes_out(self)
numpy.core.tests.test_numeric.TestClip.test_clip_inplace_array(self)
numpy.core.tests.test_numeric.TestClip.test_clip_inplace_simple(self)
numpy.core.tests.test_numeric.TestClip.test_clip_non_contig(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_int32(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_outint32(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple2(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple_int32(self)
numpy.core.tests.test_numeric.TestClip.test_noncontig_inplace(self)
numpy.core.tests.test_numeric.TestClip.test_simple_complex(self)
numpy.core.tests.test_numeric.TestClip.test_simple_double(self)
numpy.core.tests.test_numeric.TestClip.test_simple_inplace_01(self)
numpy.core.tests.test_numeric.TestClip.test_simple_inplace_02(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int32_inout(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int32_out(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int64_inout(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int64_out(self)
numpy.core.tests.test_numeric.TestClip.test_simple_nonnative(self)
numpy.core.tests.test_numeric.TestClip.test_simple_out(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_01(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_02(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_03(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_04(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_05(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_06(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_07(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_08(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_09(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_10(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_11(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_12(self)
numpy.core.tests.test_numeric.TestCorrelate(_TestCorrelate)
numpy.core.tests.test_numeric.TestCorrelate._setup(self,dt)
numpy.core.tests.test_numeric.TestCorrelate.test_complex(self)
numpy.core.tests.test_numeric.TestCorrelate.test_float(self)
numpy.core.tests.test_numeric.TestCorrelate.test_object(self)
numpy.core.tests.test_numeric.TestCorrelateNew(_TestCorrelate)
numpy.core.tests.test_numeric.TestCorrelateNew.test_complex(self)
numpy.core.tests.test_numeric.TestCreationFuncs(TestCase)
numpy.core.tests.test_numeric.TestCreationFuncs.check_function(self,func,fill_value=None)
numpy.core.tests.test_numeric.TestCreationFuncs.setUp(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_empty(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_filled(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_for_reference_leak(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_ones(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_zeros(self)
numpy.core.tests.test_numeric.TestDot(TestCase)
numpy.core.tests.test_numeric.TestDot.setUp(self)
numpy.core.tests.test_numeric.TestDot.test_all(self)
numpy.core.tests.test_numeric.TestDot.test_columnvect1(self)
numpy.core.tests.test_numeric.TestDot.test_columnvect2(self)
numpy.core.tests.test_numeric.TestDot.test_matmat(self)
numpy.core.tests.test_numeric.TestDot.test_matvec(self)
numpy.core.tests.test_numeric.TestDot.test_matvec2(self)
numpy.core.tests.test_numeric.TestDot.test_vecmat(self)
numpy.core.tests.test_numeric.TestDot.test_vecmat2(self)
numpy.core.tests.test_numeric.TestDot.test_vecmat3(self)
numpy.core.tests.test_numeric.TestDot.test_vecobject(self)
numpy.core.tests.test_numeric.TestDot.test_vecscalar(self)
numpy.core.tests.test_numeric.TestDot.test_vecscalar2(self)
numpy.core.tests.test_numeric.TestDot.test_vecvecinner(self)
numpy.core.tests.test_numeric.TestDot.test_vecvecouter(self)
numpy.core.tests.test_numeric.TestFloatExceptions(TestCase)
numpy.core.tests.test_numeric.TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy.core.tests.test_numeric.TestFloatExceptions.test_floating_exceptions(self)
numpy.core.tests.test_numeric.TestFromiter(TestCase)
numpy.core.tests.test_numeric.TestFromiter.load_data(self,n,eindex)
numpy.core.tests.test_numeric.TestFromiter.makegen(self)
numpy.core.tests.test_numeric.TestFromiter.test_2592(self)
numpy.core.tests.test_numeric.TestFromiter.test_2592_edge(self)
numpy.core.tests.test_numeric.TestFromiter.test_lengths(self)
numpy.core.tests.test_numeric.TestFromiter.test_types(self)
numpy.core.tests.test_numeric.TestFromiter.test_values(self)
numpy.core.tests.test_numeric.TestIndex(TestCase)
numpy.core.tests.test_numeric.TestIndex.test_boolean(self)
numpy.core.tests.test_numeric.TestIndex.test_boolean_edgecase(self)
numpy.core.tests.test_numeric.TestIsclose(object)
numpy.core.tests.test_numeric.TestIsclose.setup(self)
numpy.core.tests.test_numeric.TestIsclose.test_equal_nan(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_all_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose_allclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_none_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_masked_arrays(self)
numpy.core.tests.test_numeric.TestIsclose.test_no_parameter_modification(self)
numpy.core.tests.test_numeric.TestIsclose.test_scalar_return(self)
numpy.core.tests.test_numeric.TestIsclose.tst_all_isclose(self,x,y)
numpy.core.tests.test_numeric.TestIsclose.tst_isclose_allclose(self,x,y)
numpy.core.tests.test_numeric.TestIsclose.tst_none_isclose(self,x,y)
numpy.core.tests.test_numeric.TestLikeFuncs(TestCase)
numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy.core.tests.test_numeric.TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy.core.tests.test_numeric.TestLikeFuncs.setUp(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_empty_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_filled_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_ones_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_zeros_like(self)
numpy.core.tests.test_numeric.TestNonarrayArgs(TestCase)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_cumproduct(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_mean(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_size(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_squeeze(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_std(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_var(self)
numpy.core.tests.test_numeric.TestNonzero(TestCase)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_onedim(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_trivial(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_twodim(self)
numpy.core.tests.test_numeric.TestResize(TestCase)
numpy.core.tests.test_numeric.TestResize.test_copies(self)
numpy.core.tests.test_numeric.TestResize.test_zeroresize(self)
numpy.core.tests.test_numeric.TestRoll(TestCase)
numpy.core.tests.test_numeric.TestRoll.test_roll1d(self)
numpy.core.tests.test_numeric.TestRoll.test_roll2d(self)
numpy.core.tests.test_numeric.TestRoll.test_roll_empty(self)
numpy.core.tests.test_numeric.TestSeterr(TestCase)
numpy.core.tests.test_numeric.TestSeterr.test_default(self)
numpy.core.tests.test_numeric.TestSeterr.test_divide_err(self)
numpy.core.tests.test_numeric.TestSeterr.test_set(self)
numpy.core.tests.test_numeric.TestStdVar(TestCase)
numpy.core.tests.test_numeric.TestStdVar.setUp(self)
numpy.core.tests.test_numeric.TestStdVar.test_basic(self)
numpy.core.tests.test_numeric.TestStdVar.test_ddof1(self)
numpy.core.tests.test_numeric.TestStdVar.test_ddof2(self)
numpy.core.tests.test_numeric.TestStdVar.test_scalars(self)
numpy.core.tests.test_numeric.TestStdVarComplex(TestCase)
numpy.core.tests.test_numeric.TestStdVarComplex.test_basic(self)
numpy.core.tests.test_numeric.TestStdVarComplex.test_scalars(self)
numpy.core.tests.test_numeric.TestStringFunction(object)
numpy.core.tests.test_numeric.TestStringFunction.test_set_string_function(self)
numpy.core.tests.test_numeric.TestTypes(TestCase)
numpy.core.tests.test_numeric.TestTypes.check_promotion_cases(self,promote_func)
numpy.core.tests.test_numeric.TestTypes.test_can_cast(self)
numpy.core.tests.test_numeric.TestTypes.test_coercion(self)
numpy.core.tests.test_numeric.TestTypes.test_promote_types_endian(self)
numpy.core.tests.test_numeric.TestTypes.test_result_type(self)
numpy.core.tests.test_numeric.Vec(self,sequence=None)
numpy.core.tests.test_numeric.Vec.__add__(self,other)
numpy.core.tests.test_numeric.Vec.__init__(self,sequence=None)
numpy.core.tests.test_numeric.Vec.__mul__(self,other)
numpy.core.tests.test_numeric.Vec.__rmul__(self,other)
numpy.core.tests.test_numeric.Vec.__sub__(self,other)
numpy.core.tests.test_numeric._TestCorrelate(TestCase)
numpy.core.tests.test_numeric._TestCorrelate._setup(self,dt)
numpy.core.tests.test_numeric._TestCorrelate.test_float(self)
numpy.core.tests.test_numeric._TestCorrelate.test_object(self)
numpy.core.tests.test_numeric.assert_array_strict_equal(x,y)
numpy.tests.test_NIterError(Exception)
numpy.tests.test_TestAllclose(object)
numpy.tests.test_TestAllclose.setUp(self)
numpy.tests.test_TestAllclose.tearDown(self)
numpy.tests.test_TestAllclose.test_ip_allclose(self)
numpy.tests.test_TestAllclose.test_ip_not_allclose(self)
numpy.tests.test_TestAllclose.test_no_parameter_modification(self)
numpy.tests.test_TestAllclose.tst_allclose(self,x,y)
numpy.tests.test_TestAllclose.tst_not_allclose(self,x,y)
numpy.tests.test_TestArgwhere(object)
numpy.tests.test_TestArgwhere.test_2D(self)
numpy.tests.test_TestArgwhere.test_list(self)
numpy.tests.test_TestArrayComparisons(TestCase)
numpy.tests.test_TestArrayComparisons.test_array_equal(self)
numpy.tests.test_TestArrayComparisons.test_array_equiv(self)
numpy.tests.test_TestBaseRepr(TestCase)
numpy.tests.test_TestBaseRepr.test_base3(self)
numpy.tests.test_TestBaseRepr.test_negative(self)
numpy.tests.test_TestBaseRepr.test_positive(self)
numpy.tests.test_TestBinaryRepr(TestCase)
numpy.tests.test_TestBinaryRepr.test_large(self)
numpy.tests.test_TestBinaryRepr.test_negative(self)
numpy.tests.test_TestBinaryRepr.test_zero(self)
numpy.tests.test_TestBoolArray(TestCase)
numpy.tests.test_TestBoolArray.setUp(self)
numpy.tests.test_TestBoolArray.test_all_any(self)
numpy.tests.test_TestBoolArray.test_logical_and_or_xor(self)
numpy.tests.test_TestBoolArray.test_logical_not_abs(self)
numpy.tests.test_TestBoolCmp(TestCase)
numpy.tests.test_TestBoolCmp.setUp(self)
numpy.tests.test_TestBoolCmp.test_double(self)
numpy.tests.test_TestBoolScalar(TestCase)
numpy.tests.test_TestBoolScalar.test_bitwise_and(self)
numpy.tests.test_TestBoolScalar.test_bitwise_or(self)
numpy.tests.test_TestBoolScalar.test_bitwise_xor(self)
numpy.tests.test_TestBoolScalar.test_logical(self)
numpy.tests.test_TestClip(TestCase)
numpy.tests.test_TestClip._generate_data(self,n,m)
numpy.tests.test_TestClip._generate_flt_data(self,n,m)
numpy.tests.test_TestClip._generate_non_native_data(self,n,m)
numpy.tests.test_TestClip._neg_byteorder(self,a)
numpy.tests.test_TestClip.clip(self,a,m,M,out=None)
numpy.tests.test_TestClip.fastclip(self,a,m,M,out=None)
numpy.tests.test_TestClip.setUp(self)
numpy.tests.test_TestClip.test_array_double(self)
numpy.tests.test_TestClip.test_clip_func_takes_out(self)
numpy.tests.test_TestClip.test_clip_inplace_array(self)
numpy.tests.test_TestClip.test_clip_inplace_simple(self)
numpy.tests.test_TestClip.test_clip_non_contig(self)
numpy.tests.test_TestClip.test_clip_with_out_simple(self)
numpy.tests.test_TestClip.test_clip_with_out_simple2(self)
numpy.tests.test_TestClip.test_noncontig_inplace(self)
numpy.tests.test_TestClip.test_simple_double(self)
numpy.tests.test_TestClip.test_simple_inplace_01(self)
numpy.tests.test_TestClip.test_simple_inplace_02(self)
numpy.tests.test_TestClip.test_simple_nonnative(self)
numpy.tests.test_TestClip.test_simple_out(self)
numpy.tests.test_TestClip.test_type_cast_01(self)
numpy.tests.test_TestClip.test_type_cast_02(self)
numpy.tests.test_TestClip.test_type_cast_03(self)
numpy.tests.test_TestClip.test_type_cast_04(self)
numpy.tests.test_TestClip.test_type_cast_05(self)
numpy.tests.test_TestClip.test_type_cast_06(self)
numpy.tests.test_TestClip.test_type_cast_07(self)
numpy.tests.test_TestClip.test_type_cast_08(self)
numpy.tests.test_TestClip.test_type_cast_09(self)
numpy.tests.test_TestClip.test_type_cast_10(self)
numpy.tests.test_TestClip.test_type_cast_11(self)
numpy.tests.test_TestClip.test_type_cast_12(self)
numpy.tests.test_TestCorrelate(_TestCorrelate)
numpy.tests.test_TestCorrelate._setup(self,dt)
numpy.tests.test_TestCorrelateNew(_TestCorrelate)
numpy.tests.test_TestCreationFuncs(TestCase)
numpy.tests.test_TestCreationFuncs.check_function(self,func,fill_value=None)
numpy.tests.test_TestCreationFuncs.setUp(self)
numpy.tests.test_TestCreationFuncs.test_empty(self)
numpy.tests.test_TestCreationFuncs.test_filled(self)
numpy.tests.test_TestCreationFuncs.test_for_reference_leak(self)
numpy.tests.test_TestCreationFuncs.test_ones(self)
numpy.tests.test_TestCreationFuncs.test_zeros(self)
numpy.tests.test_TestDot(TestCase)
numpy.tests.test_TestDot.setUp(self)
numpy.tests.test_TestDot.test_all(self)
numpy.tests.test_TestDot.test_columnvect1(self)
numpy.tests.test_TestDot.test_columnvect2(self)
numpy.tests.test_TestDot.test_matmat(self)
numpy.tests.test_TestDot.test_matvec(self)
numpy.tests.test_TestDot.test_matvec2(self)
numpy.tests.test_TestDot.test_vecmat(self)
numpy.tests.test_TestDot.test_vecmat2(self)
numpy.tests.test_TestDot.test_vecmat3(self)
numpy.tests.test_TestDot.test_vecscalar(self)
numpy.tests.test_TestDot.test_vecscalar2(self)
numpy.tests.test_TestDot.test_vecvecinner(self)
numpy.tests.test_TestDot.test_vecvecouter(self)
numpy.tests.test_TestFloatExceptions(TestCase)
numpy.tests.test_TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy.tests.test_TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy.tests.test_TestFromiter(TestCase)
numpy.tests.test_TestFromiter.load_data(self,n,eindex)
numpy.tests.test_TestFromiter.makegen(self)
numpy.tests.test_TestFromiter.test_2592(self)
numpy.tests.test_TestFromiter.test_2592_edge(self)
numpy.tests.test_TestFromiter.test_lengths(self)
numpy.tests.test_TestFromiter.test_types(self)
numpy.tests.test_TestFromiter.test_values(self)
numpy.tests.test_TestIndex(TestCase)
numpy.tests.test_TestIsclose(object)
numpy.tests.test_TestIsclose.setup(self)
numpy.tests.test_TestIsclose.test_equal_nan(self)
numpy.tests.test_TestIsclose.test_ip_all_isclose(self)
numpy.tests.test_TestIsclose.test_ip_isclose(self)
numpy.tests.test_TestIsclose.test_ip_isclose_allclose(self)
numpy.tests.test_TestIsclose.test_ip_none_isclose(self)
numpy.tests.test_TestIsclose.test_masked_arrays(self)
numpy.tests.test_TestIsclose.test_no_parameter_modification(self)
numpy.tests.test_TestIsclose.test_scalar_return(self)
numpy.tests.test_TestIsclose.tst_all_isclose(self,x,y)
numpy.tests.test_TestIsclose.tst_isclose_allclose(self,x,y)
numpy.tests.test_TestIsclose.tst_none_isclose(self,x,y)
numpy.tests.test_TestLikeFuncs(TestCase)
numpy.tests.test_TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy.tests.test_TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy.tests.test_TestLikeFuncs.setUp(self)
numpy.tests.test_TestLikeFuncs.test_empty_like(self)
numpy.tests.test_TestLikeFuncs.test_filled_like(self)
numpy.tests.test_TestLikeFuncs.test_ones_like(self)
numpy.tests.test_TestLikeFuncs.test_zeros_like(self)
numpy.tests.test_TestNonarrayArgs(TestCase)
numpy.tests.test_TestNonarrayArgs.test_cumproduct(self)
numpy.tests.test_TestNonarrayArgs.test_mean(self)
numpy.tests.test_TestNonarrayArgs.test_size(self)
numpy.tests.test_TestNonarrayArgs.test_squeeze(self)
numpy.tests.test_TestNonarrayArgs.test_std(self)
numpy.tests.test_TestNonarrayArgs.test_var(self)
numpy.tests.test_TestNonzero(TestCase)
numpy.tests.test_TestNonzero.test_nonzero_onedim(self)
numpy.tests.test_TestNonzero.test_nonzero_trivial(self)
numpy.tests.test_TestNonzero.test_nonzero_twodim(self)
numpy.tests.test_TestResize(TestCase)
numpy.tests.test_TestResize.test_copies(self)
numpy.tests.test_TestResize.test_zeroresize(self)
numpy.tests.test_TestRoll(TestCase)
numpy.tests.test_TestRoll.test_roll1d(self)
numpy.tests.test_TestRoll.test_roll2d(self)
numpy.tests.test_TestRoll.test_roll_empty(self)
numpy.tests.test_TestSeterr(TestCase)
numpy.tests.test_TestSeterr.test_default(self)
numpy.tests.test_TestSeterr.test_divide_err(self)
numpy.tests.test_TestSeterr.test_set(self)
numpy.tests.test_TestStdVar(TestCase)
numpy.tests.test_TestStdVar.setUp(self)
numpy.tests.test_TestStdVar.test_basic(self)
numpy.tests.test_TestStdVar.test_ddof1(self)
numpy.tests.test_TestStdVar.test_ddof2(self)
numpy.tests.test_TestStdVar.test_scalars(self)
numpy.tests.test_TestStdVarComplex(TestCase)
numpy.tests.test_TestStdVarComplex.test_basic(self)
numpy.tests.test_TestStdVarComplex.test_scalars(self)
numpy.tests.test_TestStringFunction(object)
numpy.tests.test_TestTypes(TestCase)
numpy.tests.test_TestTypes.check_promotion_cases(self,promote_func)
numpy.tests.test_TestTypes.test_can_cast(self)
numpy.tests.test_TestTypes.test_coercion(self)
numpy.tests.test_TestTypes.test_promote_types_endian(self)
numpy.tests.test_TestTypes.test_result_type(self)
numpy.tests.test_Vec(self,sequence=None)
numpy.tests.test_Vec.__add__(self,other)
numpy.tests.test_Vec.__mul__(self,other)
numpy.tests.test_Vec.__rmul__(self,other)
numpy.tests.test_Vec.__sub__(self,other)
numpy.tests.test__TestCorrelate(TestCase)
numpy.tests.test__TestCorrelate._setup(self,dt)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_arrayprint.py----------------------------------------
A:numpy.core.tests.test_arrayprint.x->numpy.array([sixu('é')], dtype=object)
A:numpy.core.tests.test_arrayprint.a->numpy.arange(3)
A:numpy.core.tests.test_arrayprint.stylestr->numpy.array2string(np.array(1.5), style=lambda x: 'Value in 0-D array: ' + str(x))
A:numpy.core.tests.test_arrayprint.s->numpy.array(['abc', 'def'])
A:numpy.core.tests.test_arrayprint.self.oldopts->numpy.get_printoptions()
numpy.core.tests.test_arrayprint.TestArray2String(TestCase)
numpy.core.tests.test_arrayprint.TestArray2String.test_basic(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_format_function(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_style_keyword(self)
numpy.core.tests.test_arrayprint.TestArrayRepr(object)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_nan_inf(self)
numpy.core.tests.test_arrayprint.TestComplexArray(TestCase)
numpy.core.tests.test_arrayprint.TestComplexArray.test_str(self)
numpy.core.tests.test_arrayprint.TestPrintOptions
numpy.core.tests.test_arrayprint.TestPrintOptions.setUp(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.tearDown(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_basic(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter_reset(self)
numpy.core.tests.test_arrayprint.test_unicode_object_array()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_records.py----------------------------------------
A:numpy.core.tests.test_records.r->numpy.rec.array(fd, formats='f8,i4,a5', shape=3, byteorder='big')
A:numpy.core.tests.test_records.x1->numpy.array([1, 2, 3, 4])
A:numpy.core.tests.test_records.x2->numpy.array(['a', 'dd', 'xyz', '12'])
A:numpy.core.tests.test_records.x3->numpy.array([1.1, 2, 3, 4])
A:numpy.core.tests.test_records.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy.core.tests.test_records.filename->os.path.join(data_dir, 'recarray_from_file.fits')
A:numpy.core.tests.test_records.fd->open(filename, 'rb')
A:numpy.core.tests.test_records.a->numpy.array([(1, [])], dtype=[('a', np.int32), ('b', np.int32, 0)])
A:numpy.core.tests.test_records.b->numpy.zeros(count, dtype='f8')
A:numpy.core.tests.test_records.c->numpy.zeros(count, dtype='f8')
A:numpy.core.tests.test_records.a[i]->list(range(1, 10))
A:numpy.core.tests.test_records.mine->numpy.rec.fromarrays([a, b, c], names='date,data1,data2')
A:numpy.core.tests.test_records.x->numpy.rec.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
A:numpy.core.tests.test_records.y->eval('np.' + repr(x))
A:numpy.core.tests.test_records.ra->numpy.rec.array([(1, 'abc', 2.3), (2, 'xyz', 4.2), (3, 'wrs', 1.3)], names='field, shape, mean')
A:numpy.core.tests.test_records.pa->numpy.rec.fromrecords([(1, 'abc', 3.700000286102295, 0), (2, 'xy', 6.699999809265137, 1), (0, ' ', 0.4000000059604645, 0)], names='c1, c2, c3, c4')
A:numpy.core.tests.test_records.ndtype->numpy.dtype([('a', int), ('b', np.object)])
A:numpy.core.tests.test_records.self.data->numpy.rec.fromrecords([(1, 2, 3), (4, 5, 6)], dtype=[('col1', '<i4'), ('col2', '<i4'), ('col3', '<i4')])
numpy.core.tests.test_records.TestFromrecords(TestCase)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords(self)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype(self)
numpy.core.tests.test_records.TestFromrecords.test_method_array(self)
numpy.core.tests.test_records.TestFromrecords.test_method_array2(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_conflict_fields(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_names(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_obj(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_repr(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_fromarrays(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_fromfile(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_slices(self)
numpy.core.tests.test_records.TestRecord(TestCase)
numpy.core.tests.test_records.TestRecord.setUp(self)
numpy.core.tests.test_records.TestRecord.test_assignment1(self)
numpy.core.tests.test_records.TestRecord.test_assignment2(self)
numpy.core.tests.test_records.TestRecord.test_invalid_assignment(self)
numpy.core.tests.test_records.TestRecord.test_out_of_order_fields(self)
numpy.core.tests.test_records.TestRecord.test_pickle_1(self)
numpy.core.tests.test_records.TestRecord.test_pickle_2(self)
numpy.core.tests.test_records.test_find_duplicate()
numpy.tests.test_TestFromrecords(TestCase)
numpy.tests.test_TestFromtest_fromrecords(self)
numpy.tests.test_TestFromtest_fromrecords_with_explicit_dtype(self)
numpy.tests.test_TestFromtest_method_array(self)
numpy.tests.test_TestFromtest_method_array2(self)
numpy.tests.test_TestFromtest_recarray_conflict_fields(self)
numpy.tests.test_TestFromtest_recarray_from_names(self)
numpy.tests.test_TestFromtest_recarray_from_obj(self)
numpy.tests.test_TestFromtest_recarray_from_repr(self)
numpy.tests.test_TestFromtest_recarray_fromarrays(self)
numpy.tests.test_TestFromtest_recarray_fromfile(self)
numpy.tests.test_TestFromtest_recarray_slices(self)
numpy.tests.test_TestRecord(TestCase)
numpy.tests.test_TestRecord.setUp(self)
numpy.tests.test_TestRecord.test_assignment1(self)
numpy.tests.test_TestRecord.test_assignment2(self)
numpy.tests.test_TestRecord.test_invalid_assignment(self)
numpy.tests.test_TestRecord.test_out_of_order_fields(self)
numpy.tests.test_TestRecord.test_pickle_1(self)
numpy.tests.test_TestRecord.test_pickle_2(self)
numpy.tests.test_test_find_duplicate()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_multiarray.py----------------------------------------
A:numpy.core.tests.test_multiarray.self.a->arange(10)
A:numpy.core.tests.test_multiarray.mydict->locals()
A:numpy.core.tests.test_multiarray.i->max(i - 1, 1)
A:numpy.core.tests.test_multiarray.self.one->arange(10)
A:numpy.core.tests.test_multiarray.self.two->arange(20).reshape(4, 5)
A:numpy.core.tests.test_multiarray.self.three->arange(60, dtype=float64).reshape(2, 5, 6)
A:numpy.core.tests.test_multiarray.numpy_int->numpy.int_(0)
A:numpy.core.tests.test_multiarray.r->numpy.asarray([0.0, 1.0, -1.0], dtype=dtype)
A:numpy.core.tests.test_multiarray.x->numpy.array([(1,), (2,)], dtype={'f0': (int, j)})
A:numpy.core.tests.test_multiarray.y->memoryview(x)
A:numpy.core.tests.test_multiarray.a->arange(12).reshape((3, 4)).astype(float)
A:numpy.core.tests.test_multiarray.a[...]->numpy.arange(6)[::-1].reshape(1, 2, 3)
A:numpy.core.tests.test_multiarray.d1->numpy.tile(np.arange(12), (4, 1))
A:numpy.core.tests.test_multiarray.d2->dtype('f8')
A:numpy.core.tests.test_multiarray.result->result.view(cls).view(cls)
A:numpy.core.tests.test_multiarray.arr->numpy.matrix([1, 2], dtype=object)
A:numpy.core.tests.test_multiarray.d->dot(a, b)
A:numpy.core.tests.test_multiarray.a['a']->numpy.arange(60).reshape(3, 5, 2, 2)
A:numpy.core.tests.test_multiarray.b->arange(6).astype(float)
A:numpy.core.tests.test_multiarray.a0->arange(20.0)
A:numpy.core.tests.test_multiarray.b0->bool_(False)
A:numpy.core.tests.test_multiarray.a1->bool_(1)
A:numpy.core.tests.test_multiarray.b1->bool_(True)
A:numpy.core.tests.test_multiarray.c->numpy.asarray(b)
A:numpy.core.tests.test_multiarray.a[:]->list(range(101))
A:numpy.core.tests.test_multiarray.dt->numpy.dtype(typ).newbyteorder('>')
A:numpy.core.tests.test_multiarray.x1->numpy.arange(dt1.itemsize, dtype=np.int8).view(dt1)
A:numpy.core.tests.test_multiarray.x2->numpy.arange(dt2.itemsize, dtype=np.int8).view(dt2)
A:numpy.core.tests.test_multiarray.x3->numpy.arange(dt3.itemsize, dtype=np.int8).view(dt3)
A:numpy.core.tests.test_multiarray.aligned->numpy.empty(a.itemsize * a.size + 1, 'uint8')
A:numpy.core.tests.test_multiarray.unaligned->aligned[1:].view(a.dtype)
A:numpy.core.tests.test_multiarray.ind->list(range(x.shape[0]))
A:numpy.core.tests.test_multiarray.s->Foo(0.5).read()
A:numpy.core.tests.test_multiarray.k->numpy.linspace(0, 1, 20)
A:numpy.core.tests.test_multiarray.keys->numpy.array([1, 3, 8, -2])
A:numpy.core.tests.test_multiarray.kth->numpy.array([30, 15, 5])
A:numpy.core.tests.test_multiarray.okth->numpy.array([30, 15, 5]).copy()
A:numpy.core.tests.test_multiarray.tgt->numpy.sqrt(_var(mat, axis=axis))
A:numpy.core.tests.test_multiarray.d0->numpy.transpose(d1)
A:numpy.core.tests.test_multiarray.p->self._loads(asbytes(s))
A:numpy.core.tests.test_multiarray.dc->numpy.tile(np.arange(12), (4, 1)).copy()
A:numpy.core.tests.test_multiarray.idx->numpy.lexsort(x)
A:numpy.core.tests.test_multiarray.x0->numpy.array([[1, 2, 3], [4, 5, 6]], np.int32)
A:numpy.core.tests.test_multiarray.y0->numpy.array([1, 2, 3, 4, 5, 6], np.int32)
A:numpy.core.tests.test_multiarray.y0f->numpy.array([1, 4, 2, 5, 3, 6], np.int32)
A:numpy.core.tests.test_multiarray.y1->numpy.array([1, 2, 3, 4, 5, 6, 7, 8], np.int32)
A:numpy.core.tests.test_multiarray.y1f->numpy.array([1, 5, 3, 7, 2, 6, 4, 8], np.int32)
A:numpy.core.tests.test_multiarray.d_view->dot(a, b).view()
A:numpy.core.tests.test_multiarray.buf_or_memoryview->getter(a.diagonal())
A:numpy.core.tests.test_multiarray.buf_or_memoryview[0]->numpy.array(1)
A:numpy.core.tests.test_multiarray.aV->numpy.empty((3, 3), dtype='V10')
A:numpy.core.tests.test_multiarray.log->collect_warning_types(getattr, a.diagonal(), '__array_struct__')
A:numpy.core.tests.test_multiarray.diag_copy->arange(12).reshape((3, 4)).astype(float).diagonal().copy()
A:numpy.core.tests.test_multiarray.ro_diag->arange(12).reshape((3, 4)).astype(float).diagonal()
A:numpy.core.tests.test_multiarray.carray->array([[2, 9], [7, 0], [3, 8]])
A:numpy.core.tests.test_multiarray.m->array([0, 1], bool)
A:numpy.core.tests.test_multiarray.m2->array([[0, 1], [1, 0]], bool)
A:numpy.core.tests.test_multiarray.m3->array([[0, 1]], bool)
A:numpy.core.tests.test_multiarray.xorig->array([[1, 2, 3, 4], [5, 6, 7, 8]])
A:numpy.core.tests.test_multiarray.g1->array([sixu('This'), sixu('is'), sixu('example')])
A:numpy.core.tests.test_multiarray.g2->array([sixu('This'), sixu('was'), sixu('example')])
A:numpy.core.tests.test_multiarray.amax->arange(12).reshape((3, 4)).astype(float).max(i)
A:numpy.core.tests.test_multiarray.aargmax->arange(12).reshape((3, 4)).astype(float).argmax(i)
A:numpy.core.tests.test_multiarray.axes->list(range(a.ndim))
A:numpy.core.tests.test_multiarray.amin->arange(12).reshape((3, 4)).astype(float).min(i)
A:numpy.core.tests.test_multiarray.aargmin->arange(12).reshape((3, 4)).astype(float).argmin(i)
A:numpy.core.tests.test_multiarray.sk->array([0, -0.1, 0.1])
A:numpy.core.tests.test_multiarray.dtype->numpy.dtype(typ)
A:numpy.core.tests.test_multiarray.rec->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')])
A:numpy.core.tests.test_multiarray.val->numpy.array([0, 1, 2, 3, 4, 5, 6, 7])
A:numpy.core.tests.test_multiarray.rec1->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')]).take([1])
A:numpy.core.tests.test_multiarray.expected_idx->numpy.array([0, 4, 2, 1, 3, 5])
A:numpy.core.tests.test_multiarray.self.tempdir->tempfile.mkdtemp()
A:numpy.core.tests.test_multiarray.self.filename->tempfile.mktemp(dir=self.tempdir)
A:numpy.core.tests.test_multiarray.v->numpy.random.random_sample((16, 32))
A:numpy.core.tests.test_multiarray.f->Foo(0.5)
A:numpy.core.tests.test_multiarray.pos->Foo(0.5).tell()
A:numpy.core.tests.test_multiarray.testbytes->numpy.arange(8, dtype=np.int8)
A:numpy.core.tests.test_multiarray.n->len(testbytes)
A:numpy.core.tests.test_multiarray.flike->tempfile.NamedTemporaryFile()
A:numpy.core.tests.test_multiarray.buf->numpy.array([(1,), (2,)], dtype={'f0': (int, j)}).tostring()
A:numpy.core.tests.test_multiarray.e->self.a0.flat.__array__()
A:numpy.core.tests.test_multiarray.title->unicode('b')
A:numpy.core.tests.test_multiarray.fn1->func('f1')
A:numpy.core.tests.test_multiarray.fnn->func('not at all')
A:numpy.core.tests.test_multiarray.fn3->func('f3')
A:numpy.core.tests.test_multiarray.sfn1->func('sf1')
A:numpy.core.tests.test_multiarray.fn2->func('f2')
A:numpy.core.tests.test_multiarray.subset_view->subset.view()
A:numpy.core.tests.test_multiarray.z->numpy.array([(1,), (2,)], dtype={'f0': (int, j)}).view('<i4')
A:numpy.core.tests.test_multiarray.self.rmat->numpy.random.random((4, 5))
A:numpy.core.tests.test_multiarray.self.omat->self.omat.reshape(4, 5)
A:numpy.core.tests.test_multiarray.mat->numpy.eye(3)
A:numpy.core.tests.test_multiarray.res->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba').var(1)
A:numpy.core.tests.test_multiarray.out->numpy.empty((2, 2))
A:numpy.core.tests.test_multiarray.A->numpy.choose(self.ind, (self.x, self.y2))
A:numpy.core.tests.test_multiarray.msqr->_mean(mat * mat.conj(), axis=axis)
A:numpy.core.tests.test_multiarray.mean->_mean(mat, axis=axis)
A:numpy.core.tests.test_multiarray.self.info->getattr(obj, 'info', '')
A:numpy.core.tests.test_multiarray.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy.core.tests.test_multiarray.r2->dot(f, v)
A:numpy.core.tests.test_multiarray.desired->numpy.matrix([[3, 6]], dtype=object)
A:numpy.core.tests.test_multiarray.l->numpy.asarray([0.0, -1.0, 1.0], dtype=dtype)
A:numpy.core.tests.test_multiarray.wanted->numpy.dtype('O')
A:numpy.core.tests.test_multiarray.names->list(dt.names)
A:numpy.core.tests.test_multiarray.dt.names->tuple(names)
A:numpy.core.tests.test_multiarray.obj->numpy.asarray(obj)
A:numpy.core.tests.test_multiarray.y2->numpy.array(x)
A:numpy.core.tests.test_multiarray.sz->sum([dtype(b).itemsize for (a, b) in dt])
A:numpy.core.tests.test_multiarray.count_1->sys.getrefcount(np.core._internal)
A:numpy.core.tests.test_multiarray.count_2->sys.getrefcount(np.core._internal)
A:numpy.core.tests.test_multiarray.dt1->numpy.dtype([('a', 'b'), ('b', 'i'), ('sub', np.dtype('b,i')), ('c', 'i')], align=True)
A:numpy.core.tests.test_multiarray.dt2->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b', (3,)), ('d', 'i')], align=True)
A:numpy.core.tests.test_multiarray.dt3->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b'), ('d', 'b'), ('e', 'b'), ('sub', np.dtype('b,i', align=True))])
A:numpy.core.tests.test_multiarray.array->numpy.array(1)
A:numpy.core.tests.test_multiarray.lp->PriorityNdarray(l)
A:numpy.core.tests.test_multiarray.rp->PriorityNdarray(r)
numpy.core.tests.test_multiarray.PriorityNdarray(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__eq__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__ge__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__gt__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__init__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__le__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__lt__(self,array)
numpy.core.tests.test_multiarray.PriorityNdarray.__ne__(self,array)
numpy.core.tests.test_multiarray.TestArgmax(TestCase)
numpy.core.tests.test_multiarray.TestArgmax.test_all(self)
numpy.core.tests.test_multiarray.TestArgmax.test_combinations(self)
numpy.core.tests.test_multiarray.TestArgmin(TestCase)
numpy.core.tests.test_multiarray.TestArgmin.test_all(self)
numpy.core.tests.test_multiarray.TestArgmin.test_combinations(self)
numpy.core.tests.test_multiarray.TestArgmin.test_minimum_signed_integers(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion(object)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion(self)
numpy.core.tests.test_multiarray.TestArrayPriority(TestCase)
numpy.core.tests.test_multiarray.TestArrayPriority.test_eq(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_ge(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_gt(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_le(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_lt(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_ne(self)
numpy.core.tests.test_multiarray.TestAssignment(TestCase)
numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting(self)
numpy.core.tests.test_multiarray.TestAttributes(TestCase)
numpy.core.tests.test_multiarray.TestAttributes.setUp(self)
numpy.core.tests.test_multiarray.TestAttributes.test_attributes(self)
numpy.core.tests.test_multiarray.TestAttributes.test_dtypeattr(self)
numpy.core.tests.test_multiarray.TestAttributes.test_fill(self)
numpy.core.tests.test_multiarray.TestAttributes.test_fill_struct_array(self)
numpy.core.tests.test_multiarray.TestAttributes.test_int_subclassing(self)
numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr(self)
numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr(self)
numpy.core.tests.test_multiarray.TestBool(TestCase)
numpy.core.tests.test_multiarray.TestBool.test_test_interning(self)
numpy.core.tests.test_multiarray.TestChoose(TestCase)
numpy.core.tests.test_multiarray.TestChoose.setUp(self)
numpy.core.tests.test_multiarray.TestChoose.test_basic(self)
numpy.core.tests.test_multiarray.TestChoose.test_broadcast1(self)
numpy.core.tests.test_multiarray.TestChoose.test_broadcast2(self)
numpy.core.tests.test_multiarray.TestClip(TestCase)
numpy.core.tests.test_multiarray.TestClip._check_range(self,x,cmin,cmax)
numpy.core.tests.test_multiarray.TestClip._clip_type(self,type_group,array_max,clip_min,clip_max,inplace=False,expected_min=None,expected_max=None)
numpy.core.tests.test_multiarray.TestClip.test_basic(self)
numpy.core.tests.test_multiarray.TestClip.test_max_or_min(self)
numpy.core.tests.test_multiarray.TestClip.test_record_array(self)
numpy.core.tests.test_multiarray.TestCreation(TestCase)
numpy.core.tests.test_multiarray.TestCreation.test_from_attribute(self)
numpy.core.tests.test_multiarray.TestCreation.test_from_string(self)
numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence(self)
numpy.core.tests.test_multiarray.TestCreation.test_void(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_big(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj(self)
numpy.core.tests.test_multiarray.TestDot(TestCase)
numpy.core.tests.test_multiarray.TestDot.test_dot_2args(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_3args(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_3args_errors(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_scalar_and_matrix_of_objects(self)
numpy.core.tests.test_multiarray.TestDtypedescr(TestCase)
numpy.core.tests.test_multiarray.TestDtypedescr.test_construction(self)
numpy.core.tests.test_multiarray.TestFancyIndexing(TestCase)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask2(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_list(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask2(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_tuple(self)
numpy.core.tests.test_multiarray.TestFlags(TestCase)
numpy.core.tests.test_multiarray.TestFlags.setUp(self)
numpy.core.tests.test_multiarray.TestFlags.test_otherflags(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable(self)
numpy.core.tests.test_multiarray.TestFlat(TestCase)
numpy.core.tests.test_multiarray.TestFlat.setUp(self)
numpy.core.tests.test_multiarray.TestFlat.test___array__(self)
numpy.core.tests.test_multiarray.TestFlat.test_contiguous(self)
numpy.core.tests.test_multiarray.TestFlat.test_discontiguous(self)
numpy.core.tests.test_multiarray.TestFromBuffer(object)
numpy.core.tests.test_multiarray.TestFromBuffer.test_empty(self)
numpy.core.tests.test_multiarray.TestFromBuffer.test_ip_basic(self)
numpy.core.tests.test_multiarray.TestFromBuffer.tst_basic(self,buffer,expected,kwargs)
numpy.core.tests.test_multiarray.TestHash(TestCase)
numpy.core.tests.test_multiarray.TestHash.test_int(self)
numpy.core.tests.test_multiarray.TestIO(object)
numpy.core.tests.test_multiarray.TestIO._check_from(self,s,value,**kw)
numpy.core.tests.test_multiarray.TestIO.setUp(self)
numpy.core.tests.test_multiarray.TestIO.tearDown(self)
numpy.core.tests.test_multiarray.TestIO.test_ascii(self)
numpy.core.tests.test_multiarray.TestIO.test_big_binary(self)
numpy.core.tests.test_multiarray.TestIO.test_binary(self)
numpy.core.tests.test_multiarray.TestIO.test_bool_fromstring(self)
numpy.core.tests.test_multiarray.TestIO.test_counted_string(self)
numpy.core.tests.test_multiarray.TestIO.test_counted_string_with_ws(self)
numpy.core.tests.test_multiarray.TestIO.test_dtype(self)
numpy.core.tests.test_multiarray.TestIO.test_dtype_bool(self)
numpy.core.tests.test_multiarray.TestIO.test_empty_files_binary(self)
numpy.core.tests.test_multiarray.TestIO.test_empty_files_text(self)
numpy.core.tests.test_multiarray.TestIO.test_file_position_after_fromfile(self)
numpy.core.tests.test_multiarray.TestIO.test_file_position_after_tofile(self)
numpy.core.tests.test_multiarray.TestIO.test_inf(self)
numpy.core.tests.test_multiarray.TestIO.test_locale(self)
numpy.core.tests.test_multiarray.TestIO.test_long_sep(self)
numpy.core.tests.test_multiarray.TestIO.test_malformed(self)
numpy.core.tests.test_multiarray.TestIO.test_nan(self)
numpy.core.tests.test_multiarray.TestIO.test_numbers(self)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_binary_str(self)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_file(self)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_filename(self)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_repr(self)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_str(self)
numpy.core.tests.test_multiarray.TestIO.test_string(self)
numpy.core.tests.test_multiarray.TestIO.test_string_with_ws(self)
numpy.core.tests.test_multiarray.TestIO.test_tofile_format(self)
numpy.core.tests.test_multiarray.TestIO.test_tofile_sep(self)
numpy.core.tests.test_multiarray.TestInner(TestCase)
numpy.core.tests.test_multiarray.TestInner.test_inner_scalar_and_matrix_of_objects(self)
numpy.core.tests.test_multiarray.TestLexsort(TestCase)
numpy.core.tests.test_multiarray.TestLexsort.test_basic(self)
numpy.core.tests.test_multiarray.TestMapIter(TestCase)
numpy.core.tests.test_multiarray.TestMapIter.test_mapiter(self)
numpy.core.tests.test_multiarray.TestMemEventHook(TestCase)
numpy.core.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook(self)
numpy.core.tests.test_multiarray.TestMethods(TestCase)
numpy.core.tests.test_multiarray.TestMethods.assert_partitioned(self,d,kth)
numpy.core.tests.test_multiarray.TestMethods.test_argsort(self)
numpy.core.tests.test_multiarray.TestMethods.test_copy(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal_deprecation(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal_memleak(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot(self)
numpy.core.tests.test_multiarray.TestMethods.test_flatten(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_cdtype(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_fuzz(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_iterative(self)
numpy.core.tests.test_multiarray.TestMethods.test_ravel(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_unicode(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_order(self)
numpy.core.tests.test_multiarray.TestMethods.test_test_round(self)
numpy.core.tests.test_multiarray.TestMethods.test_transpose(self)
numpy.core.tests.test_multiarray.TestMinMax(TestCase)
numpy.core.tests.test_multiarray.TestMinMax.test_axis(self)
numpy.core.tests.test_multiarray.TestMinMax.test_scalar(self)
numpy.core.tests.test_multiarray.TestMinScalarType(object)
numpy.core.tests.test_multiarray.TestMinScalarType.test_object(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_int(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_longlong(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_short(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter(TestCase)
numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_circular(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror2d(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple2d(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular_object(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d_object(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror_object(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d_object(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple_float(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple_object(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol(object)
numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip(self,obj)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_endian(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_flags(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_record(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padding(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types(self)
numpy.core.tests.test_multiarray.TestNewaxis(TestCase)
numpy.core.tests.test_multiarray.TestNewaxis.test_basic(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype(object)
numpy.core.tests.test_multiarray.TestPEP3118Dtype._check(self,spec,wanted)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding(self)
numpy.core.tests.test_multiarray.TestPickling(TestCase)
numpy.core.tests.test_multiarray.TestPickling._loads(self,obj)
numpy.core.tests.test_multiarray.TestPickling.test_roundtrip(self)
numpy.core.tests.test_multiarray.TestPickling.test_subarray_int_shape(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_float32(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_int8(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_object(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_float32(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_int8(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_object(self)
numpy.core.tests.test_multiarray.TestPutmask(object)
numpy.core.tests.test_multiarray.TestPutmask.test_ip_byteorder(self)
numpy.core.tests.test_multiarray.TestPutmask.test_ip_types(self)
numpy.core.tests.test_multiarray.TestPutmask.test_mask_size(self)
numpy.core.tests.test_multiarray.TestPutmask.test_masked_array(self)
numpy.core.tests.test_multiarray.TestPutmask.test_record_array(self)
numpy.core.tests.test_multiarray.TestPutmask.tst_basic(self,x,T,mask,val)
numpy.core.tests.test_multiarray.TestPutmask.tst_byteorder(self,dtype)
numpy.core.tests.test_multiarray.TestRecord(TestCase)
numpy.core.tests.test_multiarray.TestRecord.test_field_names(self)
numpy.core.tests.test_multiarray.TestRecord.test_field_names_deprecation(self)
numpy.core.tests.test_multiarray.TestRecord.test_field_rename(self)
numpy.core.tests.test_multiarray.TestRecord.test_record_hash(self)
numpy.core.tests.test_multiarray.TestRecord.test_record_no_hash(self)
numpy.core.tests.test_multiarray.TestResize(TestCase)
numpy.core.tests.test_multiarray.TestResize.test_basic(self)
numpy.core.tests.test_multiarray.TestResize.test_check_reference(self)
numpy.core.tests.test_multiarray.TestResize.test_freeform_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_int_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_invalid_arguements(self)
numpy.core.tests.test_multiarray.TestResize.test_none_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_zeros_appended(self)
numpy.core.tests.test_multiarray.TestScalarIndexing(TestCase)
numpy.core.tests.test_multiarray.TestScalarIndexing.setUp(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_empty_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_newaxis(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter(TestCase)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within(self)
numpy.core.tests.test_multiarray.TestStats(TestCase)
numpy.core.tests.test_multiarray.TestStats.setUp(self)
numpy.core.tests.test_multiarray.TestStats.test_ddof(self)
numpy.core.tests.test_multiarray.TestStats.test_ddof_too_big(self)
numpy.core.tests.test_multiarray.TestStats.test_dtype_from_dtype(self)
numpy.core.tests.test_multiarray.TestStats.test_dtype_from_input(self)
numpy.core.tests.test_multiarray.TestStats.test_empty(self)
numpy.core.tests.test_multiarray.TestStats.test_keepdims(self)
numpy.core.tests.test_multiarray.TestStats.test_mean_values(self)
numpy.core.tests.test_multiarray.TestStats.test_out(self)
numpy.core.tests.test_multiarray.TestStats.test_std_values(self)
numpy.core.tests.test_multiarray.TestStats.test_subclass(self)
numpy.core.tests.test_multiarray.TestStats.test_var_values(self)
numpy.core.tests.test_multiarray.TestStringCompare(TestCase)
numpy.core.tests.test_multiarray.TestStringCompare.test_mixed(self)
numpy.core.tests.test_multiarray.TestStringCompare.test_string(self)
numpy.core.tests.test_multiarray.TestStringCompare.test_unicode(self)
numpy.core.tests.test_multiarray.TestStructured(TestCase)
numpy.core.tests.test_multiarray.TestStructured.test_subarray_comparison(self)
numpy.core.tests.test_multiarray.TestStructured.test_subarray_field_access(self)
numpy.core.tests.test_multiarray.TestSubscripting(TestCase)
numpy.core.tests.test_multiarray.TestSubscripting.test_test_zero_rank(self)
numpy.core.tests.test_multiarray.TestSummarization(TestCase)
numpy.core.tests.test_multiarray.TestSummarization.test_1d(self)
numpy.core.tests.test_multiarray.TestSummarization.test_2d(self)
numpy.core.tests.test_multiarray.TestTake(object)
numpy.core.tests.test_multiarray.TestTake.test_clip(self)
numpy.core.tests.test_multiarray.TestTake.test_ip_byteorder(self)
numpy.core.tests.test_multiarray.TestTake.test_ip_types(self)
numpy.core.tests.test_multiarray.TestTake.test_raise(self)
numpy.core.tests.test_multiarray.TestTake.test_record_array(self)
numpy.core.tests.test_multiarray.TestTake.test_wrap(self)
numpy.core.tests.test_multiarray.TestTake.tst_basic(self,x)
numpy.core.tests.test_multiarray.TestTake.tst_byteorder(self,dtype)
numpy.core.tests.test_multiarray.TestView(TestCase)
numpy.core.tests.test_multiarray.TestView.test_basic(self)
numpy.core.tests.test_multiarray.TestWarnings(object)
numpy.core.tests.test_multiarray.TestWarnings.test_complex_warning(self)
numpy.core.tests.test_multiarray.TestZeroRank(TestCase)
numpy.core.tests.test_multiarray.TestZeroRank.setUp(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_constructor(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_newaxis(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_output(self)
numpy.core.tests.test_multiarray._mean(a,**args)
numpy.core.tests.test_multiarray._std(a,**args)
numpy.core.tests.test_multiarray._var(a,**args)
numpy.core.tests.test_multiarray.test_array_interface()
numpy.core.tests.test_multiarray.test_flat_element_deletion()
numpy.core.tests.test_multiarray.test_scalar_element_deletion()
numpy.tests.test_multiarray.PriorityNdarray(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__eq__(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__ge__(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__gt__(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__le__(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__lt__(self,array)
numpy.tests.test_multiarray.PriorityNdarray.__ne__(self,array)
numpy.tests.test_multiarray.TestArgmax(TestCase)
numpy.tests.test_multiarray.TestArgmax.test_all(self)
numpy.tests.test_multiarray.TestArgmax.test_combinations(self)
numpy.tests.test_multiarray.TestArgmin(TestCase)
numpy.tests.test_multiarray.TestArgmin.test_all(self)
numpy.tests.test_multiarray.TestArgmin.test_combinations(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion(object)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion(self)
numpy.tests.test_multiarray.TestArrayPriority(TestCase)
numpy.tests.test_multiarray.TestArrayPriority.test_eq(self)
numpy.tests.test_multiarray.TestArrayPriority.test_ge(self)
numpy.tests.test_multiarray.TestArrayPriority.test_gt(self)
numpy.tests.test_multiarray.TestArrayPriority.test_le(self)
numpy.tests.test_multiarray.TestArrayPriority.test_lt(self)
numpy.tests.test_multiarray.TestArrayPriority.test_ne(self)
numpy.tests.test_multiarray.TestAssignment(TestCase)
numpy.tests.test_multiarray.TestAssignment.test_assignment_broadcasting(self)
numpy.tests.test_multiarray.TestAttributes(TestCase)
numpy.tests.test_multiarray.TestAttributes.setUp(self)
numpy.tests.test_multiarray.TestAttributes.test_attributes(self)
numpy.tests.test_multiarray.TestAttributes.test_dtypeattr(self)
numpy.tests.test_multiarray.TestAttributes.test_fill(self)
numpy.tests.test_multiarray.TestBool(TestCase)
numpy.tests.test_multiarray.TestChoose(TestCase)
numpy.tests.test_multiarray.TestChoose.setUp(self)
numpy.tests.test_multiarray.TestChoose.test_basic(self)
numpy.tests.test_multiarray.TestChoose.test_broadcast1(self)
numpy.tests.test_multiarray.TestChoose.test_broadcast2(self)
numpy.tests.test_multiarray.TestClip(TestCase)
numpy.tests.test_multiarray.TestClip._check_range(self,x,cmin,cmax)
numpy.tests.test_multiarray.TestClip._clip_type(self,type_group,array_max,clip_min,clip_max,inplace=False,expected_min=None,expected_max=None)
numpy.tests.test_multiarray.TestClip.test_basic(self)
numpy.tests.test_multiarray.TestClip.test_max_or_min(self)
numpy.tests.test_multiarray.TestClip.test_record_array(self)
numpy.tests.test_multiarray.TestCreation(TestCase)
numpy.tests.test_multiarray.TestCreation.test_from_attribute(self)
numpy.tests.test_multiarray.TestCreation.test_non_sequence_sequence(self)
numpy.tests.test_multiarray.TestCreation.test_void(self)
numpy.tests.test_multiarray.TestCreation.test_zeros(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_big(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_obj(self)
numpy.tests.test_multiarray.TestDot(TestCase)
numpy.tests.test_multiarray.TestDot.test_dot_2args(self)
numpy.tests.test_multiarray.TestDot.test_dot_3args(self)
numpy.tests.test_multiarray.TestDot.test_dot_3args_errors(self)
numpy.tests.test_multiarray.TestDtypedescr(TestCase)
numpy.tests.test_multiarray.TestFancyIndexing(TestCase)
numpy.tests.test_multiarray.TestFancyIndexing.test_assign_mask(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_assign_mask2(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_list(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_mask(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_mask2(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_tuple(self)
numpy.tests.test_multiarray.TestFlags(TestCase)
numpy.tests.test_multiarray.TestFlags.setUp(self)
numpy.tests.test_multiarray.TestFlags.test_otherflags(self)
numpy.tests.test_multiarray.TestFlags.test_writeable(self)
numpy.tests.test_multiarray.TestFlat(TestCase)
numpy.tests.test_multiarray.TestFlat.setUp(self)
numpy.tests.test_multiarray.TestFlat.test___array__(self)
numpy.tests.test_multiarray.TestFlat.test_contiguous(self)
numpy.tests.test_multiarray.TestFlat.test_discontiguous(self)
numpy.tests.test_multiarray.TestFromBuffer(object)
numpy.tests.test_multiarray.TestFromBuffer.test_empty(self)
numpy.tests.test_multiarray.TestFromBuffer.test_ip_basic(self)
numpy.tests.test_multiarray.TestFromBuffer.tst_basic(self,buffer,expected,kwargs)
numpy.tests.test_multiarray.TestHash(TestCase)
numpy.tests.test_multiarray.TestIO(object)
numpy.tests.test_multiarray.TestIO._check_from(self,s,value,**kw)
numpy.tests.test_multiarray.TestIO.setUp(self)
numpy.tests.test_multiarray.TestIO.tearDown(self)
numpy.tests.test_multiarray.TestIO.test_ascii(self)
numpy.tests.test_multiarray.TestIO.test_big_binary(self)
numpy.tests.test_multiarray.TestIO.test_binary(self)
numpy.tests.test_multiarray.TestIO.test_dtype(self)
numpy.tests.test_multiarray.TestIO.test_empty_files_binary(self)
numpy.tests.test_multiarray.TestIO.test_empty_files_text(self)
numpy.tests.test_multiarray.TestIO.test_file_position_after_fromfile(self)
numpy.tests.test_multiarray.TestIO.test_file_position_after_tofile(self)
numpy.tests.test_multiarray.TestIO.test_inf(self)
numpy.tests.test_multiarray.TestIO.test_locale(self)
numpy.tests.test_multiarray.TestIO.test_long_sep(self)
numpy.tests.test_multiarray.TestIO.test_malformed(self)
numpy.tests.test_multiarray.TestIO.test_nan(self)
numpy.tests.test_multiarray.TestIO.test_numbers(self)
numpy.tests.test_multiarray.TestIO.test_roundtrip_file(self)
numpy.tests.test_multiarray.TestIO.test_roundtrip_filename(self)
numpy.tests.test_multiarray.TestIO.test_roundtrip_repr(self)
numpy.tests.test_multiarray.TestIO.test_tofile_format(self)
numpy.tests.test_multiarray.TestIO.test_tofile_sep(self)
numpy.tests.test_multiarray.TestInner(TestCase)
numpy.tests.test_multiarray.TestLexsort(TestCase)
numpy.tests.test_multiarray.TestLexsort.test_basic(self)
numpy.tests.test_multiarray.TestMapIter(TestCase)
numpy.tests.test_multiarray.TestMapIter.test_mapiter(self)
numpy.tests.test_multiarray.TestMemEventHook(TestCase)
numpy.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook(self)
numpy.tests.test_multiarray.TestMethods(TestCase)
numpy.tests.test_multiarray.TestMethods.assert_partitioned(self,d,kth)
numpy.tests.test_multiarray.TestMethods.test_argsort(self)
numpy.tests.test_multiarray.TestMethods.test_copy(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal_deprecation(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal_memleak(self)
numpy.tests.test_multiarray.TestMethods.test_dot(self)
numpy.tests.test_multiarray.TestMethods.test_flatten(self)
numpy.tests.test_multiarray.TestMethods.test_partition(self)
numpy.tests.test_multiarray.TestMethods.test_partition_cdtype(self)
numpy.tests.test_multiarray.TestMethods.test_partition_fuzz(self)
numpy.tests.test_multiarray.TestMethods.test_partition_iterative(self)
numpy.tests.test_multiarray.TestMethods.test_ravel(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter(self)
numpy.tests.test_multiarray.TestMethods.test_sort(self)
numpy.tests.test_multiarray.TestMethods.test_sort_order(self)
numpy.tests.test_multiarray.TestMethods.test_test_round(self)
numpy.tests.test_multiarray.TestMethods.test_transpose(self)
numpy.tests.test_multiarray.TestMinMax(TestCase)
numpy.tests.test_multiarray.TestMinMax.test_axis(self)
numpy.tests.test_multiarray.TestMinMax.test_scalar(self)
numpy.tests.test_multiarray.TestMinScalarType(object)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_longlong(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_short(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort(self)
numpy.tests.test_multiarray.TestNeighborhoodIter(TestCase)
numpy.tests.test_multiarray.TestNeighborhoodIter._test_circular(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter._test_mirror(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter._test_mirror2d(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter._test_simple(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter._test_simple2d(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_circular(self)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_mirror(self)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d(self)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_simple2d(self)
numpy.tests.test_multiarray.TestNewBufferProtocol(object)
numpy.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip(self,obj)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_endian(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_flags(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_record(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_padding(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types(self)
numpy.tests.test_multiarray.TestNewaxis(TestCase)
numpy.tests.test_multiarray.TestNewaxis.test_basic(self)
numpy.tests.test_multiarray.TestPEP3118Dtype(object)
numpy.tests.test_multiarray.TestPEP3118Dtype._check(self,spec,wanted)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding(self)
numpy.tests.test_multiarray.TestPickling(TestCase)
numpy.tests.test_multiarray.TestPickling._loads(self,obj)
numpy.tests.test_multiarray.TestPickling.test_roundtrip(self)
numpy.tests.test_multiarray.TestPutmask(object)
numpy.tests.test_multiarray.TestPutmask.test_ip_byteorder(self)
numpy.tests.test_multiarray.TestPutmask.test_ip_types(self)
numpy.tests.test_multiarray.TestPutmask.test_mask_size(self)
numpy.tests.test_multiarray.TestPutmask.test_masked_array(self)
numpy.tests.test_multiarray.TestPutmask.test_record_array(self)
numpy.tests.test_multiarray.TestPutmask.tst_basic(self,x,T,mask,val)
numpy.tests.test_multiarray.TestPutmask.tst_byteorder(self,dtype)
numpy.tests.test_multiarray.TestRecord(TestCase)
numpy.tests.test_multiarray.TestRecord.test_field_names(self)
numpy.tests.test_multiarray.TestRecord.test_field_names_deprecation(self)
numpy.tests.test_multiarray.TestRecord.test_field_rename(self)
numpy.tests.test_multiarray.TestRecord.test_record_hash(self)
numpy.tests.test_multiarray.TestRecord.test_record_no_hash(self)
numpy.tests.test_multiarray.TestResize(TestCase)
numpy.tests.test_multiarray.TestResize.test_basic(self)
numpy.tests.test_multiarray.TestResize.test_check_reference(self)
numpy.tests.test_multiarray.TestResize.test_freeform_shape(self)
numpy.tests.test_multiarray.TestResize.test_invalid_arguements(self)
numpy.tests.test_multiarray.TestResize.test_none_shape(self)
numpy.tests.test_multiarray.TestResize.test_zeros_appended(self)
numpy.tests.test_multiarray.TestScalarIndexing(TestCase)
numpy.tests.test_multiarray.TestScalarIndexing.setUp(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_empty_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_newaxis(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter(TestCase)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror(self)
numpy.tests.test_multiarray.TestStats(TestCase)
numpy.tests.test_multiarray.TestStats.setUp(self)
numpy.tests.test_multiarray.TestStats.test_ddof(self)
numpy.tests.test_multiarray.TestStats.test_ddof_too_big(self)
numpy.tests.test_multiarray.TestStats.test_dtype_from_dtype(self)
numpy.tests.test_multiarray.TestStats.test_dtype_from_input(self)
numpy.tests.test_multiarray.TestStats.test_empty(self)
numpy.tests.test_multiarray.TestStats.test_keepdims(self)
numpy.tests.test_multiarray.TestStats.test_mean_values(self)
numpy.tests.test_multiarray.TestStats.test_out(self)
numpy.tests.test_multiarray.TestStats.test_std_values(self)
numpy.tests.test_multiarray.TestStats.test_subclass(self)
numpy.tests.test_multiarray.TestStats.test_var_values(self)
numpy.tests.test_multiarray.TestStringCompare(TestCase)
numpy.tests.test_multiarray.TestStringCompare.test_mixed(self)
numpy.tests.test_multiarray.TestStructured(TestCase)
numpy.tests.test_multiarray.TestStructured.test_subarray_comparison(self)
numpy.tests.test_multiarray.TestStructured.test_subarray_field_access(self)
numpy.tests.test_multiarray.TestSubscripting(TestCase)
numpy.tests.test_multiarray.TestSubscripting.test_test_zero_rank(self)
numpy.tests.test_multiarray.TestSummarization(TestCase)
numpy.tests.test_multiarray.TestSummarization.test_1d(self)
numpy.tests.test_multiarray.TestSummarization.test_2d(self)
numpy.tests.test_multiarray.TestTake(object)
numpy.tests.test_multiarray.TestTake.test_clip(self)
numpy.tests.test_multiarray.TestTake.test_ip_byteorder(self)
numpy.tests.test_multiarray.TestTake.test_ip_types(self)
numpy.tests.test_multiarray.TestTake.test_raise(self)
numpy.tests.test_multiarray.TestTake.test_record_array(self)
numpy.tests.test_multiarray.TestTake.test_wrap(self)
numpy.tests.test_multiarray.TestTake.tst_basic(self,x)
numpy.tests.test_multiarray.TestTake.tst_byteorder(self,dtype)
numpy.tests.test_multiarray.TestView(TestCase)
numpy.tests.test_multiarray.TestView.test_basic(self)
numpy.tests.test_multiarray.TestWarnings(object)
numpy.tests.test_multiarray.TestZeroRank(TestCase)
numpy.tests.test_multiarray.TestZeroRank.setUp(self)
numpy.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_empty_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_newaxis(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_newaxis(self)
numpy.tests.test_multiarray.TestZeroRank.test_output(self)
numpy.tests.test_multiarray._mean(a,**args)
numpy.tests.test_multiarray._std(a,**args)
numpy.tests.test_multiarray._var(a,**args)
numpy.tests.test_multiarray.test_flat_element_deletion()
numpy.tests.test_multiarray.test_scalar_element_deletion()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_half.py----------------------------------------
A:numpy.core.tests.test_half.self.all_f16->numpy.arange(65536, dtype=uint16)
A:numpy.core.tests.test_half.self.all_f32->numpy.array(self.all_f16, dtype=float32)
A:numpy.core.tests.test_half.self.all_f64->numpy.array(self.all_f16, dtype=float64)
A:numpy.core.tests.test_half.self.nonan_f16->numpy.concatenate((np.arange(64512, 32767, -1, dtype=uint16), np.arange(0, 31745, 1, dtype=uint16)))
A:numpy.core.tests.test_half.self.nonan_f32->numpy.array(self.nonan_f16, dtype=float32)
A:numpy.core.tests.test_half.self.nonan_f64->numpy.array(self.nonan_f16, dtype=float64)
A:numpy.core.tests.test_half.b->Dummy()
A:numpy.core.tests.test_half.a_ld->numpy.array(self.nonan_f16, dtype=np.longdouble)
A:numpy.core.tests.test_half.i_int->numpy.arange(-2048, 2049)
A:numpy.core.tests.test_half.i_f16->numpy.array(i_int, dtype=float16)
A:numpy.core.tests.test_half.j->numpy.array(i_f16, dtype=np.int)
A:numpy.core.tests.test_half.nan->float16(np.nan)
A:numpy.core.tests.test_half.a->numpy.ones((1,), dtype=float16)
A:numpy.core.tests.test_half.a_bits->a.view(dtype=float16).view(dtype=uint16)
A:numpy.core.tests.test_half.hinf->numpy.array((np.inf,), dtype=float16)
A:numpy.core.tests.test_half.a_f16->numpy.ones((1,), dtype=float16).view(dtype=float16)
A:numpy.core.tests.test_half.c->numpy.array(b)
A:numpy.core.tests.test_half.x->numpy.minimum(b, c)
A:numpy.core.tests.test_half.a16->numpy.array((1,), dtype=float16)
A:numpy.core.tests.test_half.a32->numpy.array((1,), dtype=float32)
A:numpy.core.tests.test_half.b16->float16(1)
A:numpy.core.tests.test_half.b32->float32(1)
A:numpy.core.tests.test_half.sx16->numpy.array((0.0001,), dtype=float16)
A:numpy.core.tests.test_half.bx16->numpy.array((10000.0,), dtype=float16)
A:numpy.core.tests.test_half.sy16->float16(0.0001)
A:numpy.core.tests.test_half.by16->float16(10000.0)
numpy.core.tests.test_half.TestHalf(TestCase)
numpy.core.tests.test_half.TestHalf.setUp(self)
numpy.core.tests.test_half.TestHalf.test_half_array_interface(self)
numpy.core.tests.test_half.TestHalf.test_half_coercion(self)
numpy.core.tests.test_half.TestHalf.test_half_conversions(self)
numpy.core.tests.test_half.TestHalf.test_half_correctness(self)
numpy.core.tests.test_half.TestHalf.test_half_fpe(self)
numpy.core.tests.test_half.TestHalf.test_half_funcs(self)
numpy.core.tests.test_half.TestHalf.test_half_ordering(self)
numpy.core.tests.test_half.TestHalf.test_half_rounding(self)
numpy.core.tests.test_half.TestHalf.test_half_ufuncs(self)
numpy.core.tests.test_half.TestHalf.test_half_values(self)
numpy.core.tests.test_half.TestHalf.test_nans_infs(self)
numpy.core.tests.test_half.TestHalf.test_spacing_nextafter(self)
numpy.core.tests.test_half.assert_raises_fpe(strmatch,callable,*args,**kwargs)
numpy.tests.test_half.TestHalf(TestCase)
numpy.tests.test_half.TestHalf.setUp(self)
numpy.tests.test_half.TestHalf.test_half_coercion(self)
numpy.tests.test_half.TestHalf.test_half_conversions(self)
numpy.tests.test_half.TestHalf.test_half_correctness(self)
numpy.tests.test_half.TestHalf.test_half_fpe(self)
numpy.tests.test_half.TestHalf.test_half_funcs(self)
numpy.tests.test_half.TestHalf.test_half_ordering(self)
numpy.tests.test_half.TestHalf.test_half_rounding(self)
numpy.tests.test_half.TestHalf.test_half_ufuncs(self)
numpy.tests.test_half.TestHalf.test_half_values(self)
numpy.tests.test_half.TestHalf.test_nans_infs(self)
numpy.tests.test_half.TestHalf.test_spacing_nextafter(self)
numpy.tests.test_half.assert_raises_fpe(strmatch,callable,*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_function_base.py----------------------------------------
A:numpy.core.tests.test_function_base.y->list(linspace(0, 1, 2.5))
A:numpy.core.tests.test_function_base.lim1->linspace(1 + 2j, 3 + 4j, 5)
A:numpy.core.tests.test_function_base.lim2->linspace(1j, 10, 5)
A:numpy.core.tests.test_function_base.lim3->array([1200, 1000], dtype='uint16')
A:numpy.core.tests.test_function_base.t1->array([1.0 + 2j, 1.5 + 2.5j, 2.0 + 3j, 2.5 + 3.5j, 3.0 + 4j])
A:numpy.core.tests.test_function_base.t2->array([0.0 + 1j, 2.5 + 0.75j, 5.0 + 0.5j, 7.5 + 0.25j, 10.0 + 0j])
A:numpy.core.tests.test_function_base.t3->linspace(lim3[0], lim3[1], 5)
A:numpy.core.tests.test_function_base.t4->linspace(-120.0, 100.0, 5)
A:numpy.core.tests.test_function_base.t5->linspace(120.0, -100.0, 5)
A:numpy.core.tests.test_function_base.t6->linspace(1200.0, 1000.0, 5)
A:numpy.core.tests.test_function_base.a->PhysicalQuantity(0.0)
A:numpy.core.tests.test_function_base.b->PhysicalQuantity(1.0)
numpy.core.tests.test_TestLinspace.test_complex(self)
numpy.core.tests.test_function_base.TestLinspace(TestCase)
numpy.core.tests.test_function_base.TestLinspace.test_array_scalar(self)
numpy.core.tests.test_function_base.TestLinspace.test_basic(self)
numpy.core.tests.test_function_base.TestLinspace.test_complex(self)
numpy.core.tests.test_function_base.TestLinspace.test_corner(self)
numpy.core.tests.test_function_base.TestLinspace.test_physical_quantities(self)
numpy.core.tests.test_function_base.TestLinspace.test_type(self)
numpy.core.tests.test_function_base.TestLogspace(TestCase)
numpy.core.tests.test_function_base.TestLogspace.test_basic(self)
numpy.tests.test_TestLinspace(TestCase)
numpy.tests.test_TestLinspace.test_array_scalar(self)
numpy.tests.test_TestLinspace.test_basic(self)
numpy.tests.test_TestLinspace.test_corner(self)
numpy.tests.test_TestLinspace.test_physical_quantities(self)
numpy.tests.test_TestLinspace.test_type(self)
numpy.tests.test_TestLogspace(TestCase)
numpy.tests.test_TestLogspace.test_basic(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_nditer.py----------------------------------------
A:numpy.core.tests.test_nditer.a->numpy.arange(12).reshape(2, 3, 2)
A:numpy.core.tests.test_nditer.dt->numpy.dtype('f4')
A:numpy.core.tests.test_nditer.rc_a->sys.getrefcount(a)
A:numpy.core.tests.test_nditer.rc_dt->sys.getrefcount(dt)
A:numpy.core.tests.test_nditer.it->numpy.nditer((10, 2, None), op_dtypes=[None, None, ('i4', (2, 2))])
A:numpy.core.tests.test_nditer.rc2_a->sys.getrefcount(a)
A:numpy.core.tests.test_nditer.rc2_dt->sys.getrefcount(dt)
A:numpy.core.tests.test_nditer.it2->nditer([a, None], ['reduce_ok', 'external_loop', 'buffered', 'delay_bufalloc'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]], buffersize=10)
A:numpy.core.tests.test_nditer.dirs_index[bit]->slice(None, None, -1)
A:numpy.core.tests.test_nditer.dirs_index->tuple(dirs_index)
A:numpy.core.tests.test_nditer.i->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt)
A:numpy.core.tests.test_nditer.size->numpy.prod(shape)
A:numpy.core.tests.test_nditer.a3d->arange(24).reshape(2, 3, 4)
A:numpy.core.tests.test_nditer.msg->str(e)
A:numpy.core.tests.test_nditer.au->numpy.arange(12).reshape(2, 3, 2).byteswap().newbyteorder()
A:numpy.core.tests.test_nditer.a[:]->numpy.arange(16, dtype='i4')
A:numpy.core.tests.test_nditer.rc->sys.getrefcount(a[0])
A:numpy.core.tests.test_nditer.b->numpy.zeros((3,))
A:numpy.core.tests.test_nditer.j->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt).copy()
A:numpy.core.tests.test_nditer.a_fort->numpy.arange(12).reshape(2, 3, 2).ravel(order='F')
A:numpy.core.tests.test_nditer.val->numpy.concatenate((val, x))
A:numpy.core.tests.test_nditer.a['a']->numpy.arange(6 * 2 * 3).reshape(6, 2, 3)
A:numpy.core.tests.test_nditer.a['a'][:, 0, 0]->numpy.arange(6)
A:numpy.core.tests.test_nditer.a['a'][:, 0, 0, 0]->numpy.arange(6)
A:numpy.core.tests.test_nditer.arr->numpy.lib.stride_tricks.as_strided(np.zeros(1), (size,), (0,))
A:numpy.core.tests.test_nditer.nditer2->numpy.nditer([arr.copy(), None], op_axes=op_axes, flags=flags, op_flags=op_flags, op_dtypes=op_dtypes)
A:numpy.core.tests.test_nditer.nditer1->numpy.nditer([arr, None], op_axes=op_axes, flags=flags, op_flags=op_flags, buffersize=bufsize, op_dtypes=op_dtypes)
A:numpy.core.tests.test_nditer.c->numpy.arange(12).reshape(3, 4)
A:numpy.core.tests.test_nditer.(i, j)->numpy.nested_iters(a, [[1, 0, 2], []])
A:numpy.core.tests.test_nditer.it1->nditer([a, None], ['reduce_ok', 'external_loop'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]])
A:numpy.core.tests.test_nditer.m->numpy.array([[True, True, False], [False, True, False]])
A:numpy.core.tests.test_nditer.m2->numpy.array([True, True, False])
A:numpy.core.tests.test_nditer.m3->numpy.array([0, 1, 1], dtype='u1')
A:numpy.core.tests.test_nditer.mbad1->numpy.array([0, 1, 1], dtype='i1')
A:numpy.core.tests.test_nditer.mbad2->numpy.array([0, 1, 1], dtype='f4')
A:numpy.core.tests.test_nditer.msk->numpy.array([True, True, False])
A:numpy.core.tests.test_nditer.vals->next(i)
A:numpy.core.tests.test_nditer.(i, j, k)->numpy.nested_iters(a, [[2, 0], [], [1]])
A:numpy.core.tests.test_nditer.arrays->tuple(arrays)
numpy.core.tests.test_nditer.iter_indices(i)
numpy.core.tests.test_nditer.iter_iterindices(i)
numpy.core.tests.test_nditer.iter_multi_index(i)
numpy.core.tests.test_nditer.test_0d_iter()
numpy.core.tests.test_nditer.test_0d_nested_iter()
numpy.core.tests.test_nditer.test_iter_allocate_output_buffered_readwrite()
numpy.core.tests.test_nditer.test_iter_allocate_output_errors()
numpy.core.tests.test_nditer.test_iter_allocate_output_itorder()
numpy.core.tests.test_nditer.test_iter_allocate_output_opaxes()
numpy.core.tests.test_nditer.test_iter_allocate_output_simple()
numpy.core.tests.test_nditer.test_iter_allocate_output_subtype()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_byte_order()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_promotion()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_scalar()
numpy.core.tests.test_nditer.test_iter_allocated_array_dtypes()
numpy.core.tests.test_nditer.test_iter_array_cast()
numpy.core.tests.test_nditer.test_iter_array_cast_errors()
numpy.core.tests.test_nditer.test_iter_best_order()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_3d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_3d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_3d()
numpy.core.tests.test_nditer.test_iter_broadcasting()
numpy.core.tests.test_nditer.test_iter_broadcasting_errors()
numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped()
numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex()
numpy.core.tests.test_nditer.test_iter_buffered_cast_simple()
numpy.core.tests.test_nditer.test_iter_buffered_cast_structured_type()
numpy.core.tests.test_nditer.test_iter_buffered_cast_subarray()
numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse()
numpy.core.tests.test_nditer.test_iter_buffering()
numpy.core.tests.test_nditer.test_iter_buffering_badwriteback()
numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc()
numpy.core.tests.test_nditer.test_iter_buffering_growinner()
numpy.core.tests.test_nditer.test_iter_buffering_reduction()
numpy.core.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops()
numpy.core.tests.test_nditer.test_iter_buffering_string()
numpy.core.tests.test_nditer.test_iter_c_or_f_order()
numpy.core.tests.test_nditer.test_iter_c_order()
numpy.core.tests.test_nditer.test_iter_common_dtype()
numpy.core.tests.test_nditer.test_iter_copy()
numpy.core.tests.test_nditer.test_iter_dim_coalescing()
numpy.core.tests.test_nditer.test_iter_element_deletion()
numpy.core.tests.test_nditer.test_iter_f_order()
numpy.core.tests.test_nditer.test_iter_flags_errors()
numpy.core.tests.test_nditer.test_iter_iterindex()
numpy.core.tests.test_nditer.test_iter_iterrange()
numpy.core.tests.test_nditer.test_iter_itershape()
numpy.core.tests.test_nditer.test_iter_nbo_align_contig()
numpy.core.tests.test_nditer.test_iter_nested_iters_basic()
numpy.core.tests.test_nditer.test_iter_nested_iters_broadcast()
numpy.core.tests.test_nditer.test_iter_nested_iters_dtype_buffered()
numpy.core.tests.test_nditer.test_iter_nested_iters_dtype_copy()
numpy.core.tests.test_nditer.test_iter_nested_iters_flip_axes()
numpy.core.tests.test_nditer.test_iter_nested_iters_reorder()
numpy.core.tests.test_nditer.test_iter_no_broadcast()
numpy.core.tests.test_nditer.test_iter_no_inner_dim_coalescing()
numpy.core.tests.test_nditer.test_iter_no_inner_full_coalesce()
numpy.core.tests.test_nditer.test_iter_non_writable_attribute_deletion()
numpy.core.tests.test_nditer.test_iter_object_arrays_basic()
numpy.core.tests.test_nditer.test_iter_object_arrays_conversions()
numpy.core.tests.test_nditer.test_iter_op_axes()
numpy.core.tests.test_nditer.test_iter_op_axes_errors()
numpy.core.tests.test_nditer.test_iter_reduction()
numpy.core.tests.test_nditer.test_iter_reduction_error()
numpy.core.tests.test_nditer.test_iter_refcount()
numpy.core.tests.test_nditer.test_iter_remove_axis()
numpy.core.tests.test_nditer.test_iter_remove_multi_index_inner_loop()
numpy.core.tests.test_nditer.test_iter_scalar_cast()
numpy.core.tests.test_nditer.test_iter_scalar_cast_errors()
numpy.core.tests.test_nditer.test_iter_slice()
numpy.core.tests.test_nditer.test_iter_too_large()
numpy.core.tests.test_nditer.test_iter_too_large_with_multiindex()
numpy.core.tests.test_nditer.test_iter_writable_attribute_deletion()
numpy.core.tests.test_nditer.test_iter_write_buffering()
numpy.core.tests.test_nditer.test_iter_writemasked()
numpy.core.tests.test_nditer.test_iter_writemasked_badinput()
numpy.tests.test_nditer.iter_indices(i)
numpy.tests.test_nditer.iter_iterindices(i)
numpy.tests.test_nditer.iter_multi_index(i)
numpy.tests.test_nditer.test_0d_iter()
numpy.tests.test_nditer.test_0d_nested_iter()
numpy.tests.test_nditer.test_iter_allocate_output_buffered_readwrite()
numpy.tests.test_nditer.test_iter_allocate_output_errors()
numpy.tests.test_nditer.test_iter_allocate_output_itorder()
numpy.tests.test_nditer.test_iter_allocate_output_opaxes()
numpy.tests.test_nditer.test_iter_allocate_output_simple()
numpy.tests.test_nditer.test_iter_allocate_output_subtype()
numpy.tests.test_nditer.test_iter_allocate_output_types_byte_order()
numpy.tests.test_nditer.test_iter_allocate_output_types_promotion()
numpy.tests.test_nditer.test_iter_allocate_output_types_scalar()
numpy.tests.test_nditer.test_iter_allocated_array_dtypes()
numpy.tests.test_nditer.test_iter_array_cast()
numpy.tests.test_nditer.test_iter_array_cast_errors()
numpy.tests.test_nditer.test_iter_best_order()
numpy.tests.test_nditer.test_iter_best_order_c_index_1d()
numpy.tests.test_nditer.test_iter_best_order_c_index_2d()
numpy.tests.test_nditer.test_iter_best_order_c_index_3d()
numpy.tests.test_nditer.test_iter_best_order_f_index_1d()
numpy.tests.test_nditer.test_iter_best_order_f_index_2d()
numpy.tests.test_nditer.test_iter_best_order_f_index_3d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_1d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_2d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_3d()
numpy.tests.test_nditer.test_iter_broadcasting()
numpy.tests.test_nditer.test_iter_broadcasting_errors()
numpy.tests.test_nditer.test_iter_buffered_cast_byteswapped()
numpy.tests.test_nditer.test_iter_buffered_cast_simple()
numpy.tests.test_nditer.test_iter_buffered_cast_subarray()
numpy.tests.test_nditer.test_iter_buffered_reduce_reuse()
numpy.tests.test_nditer.test_iter_buffering()
numpy.tests.test_nditer.test_iter_buffering_badwriteback()
numpy.tests.test_nditer.test_iter_buffering_delayed_alloc()
numpy.tests.test_nditer.test_iter_buffering_growinner()
numpy.tests.test_nditer.test_iter_buffering_reduction()
numpy.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops()
numpy.tests.test_nditer.test_iter_c_or_f_order()
numpy.tests.test_nditer.test_iter_c_order()
numpy.tests.test_nditer.test_iter_common_dtype()
numpy.tests.test_nditer.test_iter_copy()
numpy.tests.test_nditer.test_iter_dim_coalescing()
numpy.tests.test_nditer.test_iter_element_deletion()
numpy.tests.test_nditer.test_iter_f_order()
numpy.tests.test_nditer.test_iter_flags_errors()
numpy.tests.test_nditer.test_iter_iterindex()
numpy.tests.test_nditer.test_iter_iterrange()
numpy.tests.test_nditer.test_iter_itershape()
numpy.tests.test_nditer.test_iter_nbo_align_contig()
numpy.tests.test_nditer.test_iter_nested_iters_basic()
numpy.tests.test_nditer.test_iter_nested_iters_broadcast()
numpy.tests.test_nditer.test_iter_nested_iters_dtype_buffered()
numpy.tests.test_nditer.test_iter_nested_iters_dtype_copy()
numpy.tests.test_nditer.test_iter_nested_iters_flip_axes()
numpy.tests.test_nditer.test_iter_nested_iters_reorder()
numpy.tests.test_nditer.test_iter_no_broadcast()
numpy.tests.test_nditer.test_iter_no_inner_dim_coalescing()
numpy.tests.test_nditer.test_iter_no_inner_full_coalesce()
numpy.tests.test_nditer.test_iter_non_writable_attribute_deletion()
numpy.tests.test_nditer.test_iter_op_axes()
numpy.tests.test_nditer.test_iter_op_axes_errors()
numpy.tests.test_nditer.test_iter_reduction()
numpy.tests.test_nditer.test_iter_reduction_error()
numpy.tests.test_nditer.test_iter_refcount()
numpy.tests.test_nditer.test_iter_remove_axis()
numpy.tests.test_nditer.test_iter_remove_multi_index_inner_loop()
numpy.tests.test_nditer.test_iter_scalar_cast()
numpy.tests.test_nditer.test_iter_scalar_cast_errors()
numpy.tests.test_nditer.test_iter_slice()
numpy.tests.test_nditer.test_iter_too_large()
numpy.tests.test_nditer.test_iter_too_large_with_multiindex()
numpy.tests.test_nditer.test_iter_writable_attribute_deletion()
numpy.tests.test_nditer.test_iter_write_buffering()
numpy.tests.test_nditer.test_iter_writemasked()
numpy.tests.test_nditer.test_iter_writemasked_badinput()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_defchararray.py----------------------------------------
A:numpy.core.tests.test_defchararray.A->numpy.array([['%.3f', '%d'], ['%s', '%r']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.B->self.B.encode('unicode_escape')
A:numpy.core.tests.test_defchararray.C->numpy.array([[3, 7], [19, 1]])
A:numpy.core.tests.test_defchararray.self.A->numpy.array([['abc', '123'], ['789', 'xyz']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.self.B->numpy.array([['efg', '456'], ['051', 'tuv']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.widths->numpy.array([[10, 20]])
A:numpy.core.tests.test_defchararray.T->self.A.expandtabs()
A:numpy.core.tests.test_defchararray.A0->self.A.decode('ascii')
A:numpy.core.tests.test_defchararray.P->self.A.rpartition(asbytes_nested(['3', 'M']))
A:numpy.core.tests.test_defchararray.R->self.A.replace(asbytes('a'), sixu('Σ'))
A:numpy.core.tests.test_defchararray.AB->numpy.array([['abcefg', '123456'], ['789051', 'xyztuv']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.QA->numpy.array([['qabc', 'q123'], ['q789', 'qxyz']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.Ar->numpy.array([[A[0, 0] * r, A[0, 1] * r], [A[1, 0] * r, A[1, 1] * r]]).view(np.chararray)
A:numpy.core.tests.test_defchararray.F->numpy.array([['%d', '%f'], ['%s', '%r']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.FC->numpy.array([['3', '7.000000'], ['19', '1']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.A1->numpy.array([['1.000', '1'], ['1', '1']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.A2->numpy.array([['1.000', '2'], ['3', '4']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.s->numpy.chararray((4,))
numpy.core.tests.test_defchararray.TestBasic(TestCase)
numpy.core.tests.test_defchararray.TestBasic.test_from_object_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_object_array_unicode(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_string(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_string_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_unicode(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_unicode_upconvert(self)
numpy.core.tests.test_defchararray.TestChar(TestCase)
numpy.core.tests.test_defchararray.TestChar.setUp(self)
numpy.core.tests.test_defchararray.TestChar.test_it(self)
numpy.core.tests.test_defchararray.TestComparisons(TestCase)
numpy.core.tests.test_defchararray.TestComparisons.setUp(self)
numpy.core.tests.test_defchararray.TestComparisons.test_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_greater(self)
numpy.core.tests.test_defchararray.TestComparisons.test_greater_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_less(self)
numpy.core.tests.test_defchararray.TestComparisons.test_less_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_not_equal(self)
numpy.core.tests.test_defchararray.TestComparisonsMixed1(TestComparisons)
numpy.core.tests.test_defchararray.TestComparisonsMixed1.setUp(self)
numpy.core.tests.test_defchararray.TestComparisonsMixed2(TestComparisons)
numpy.core.tests.test_defchararray.TestComparisonsMixed2.setUp(self)
numpy.core.tests.test_defchararray.TestInformation(TestCase)
numpy.core.tests.test_defchararray.TestInformation.setUp(self)
numpy.core.tests.test_defchararray.TestInformation.test_count(self)
numpy.core.tests.test_defchararray.TestInformation.test_endswith(self)
numpy.core.tests.test_defchararray.TestInformation.test_find(self)
numpy.core.tests.test_defchararray.TestInformation.test_index(self)
numpy.core.tests.test_defchararray.TestInformation.test_isalnum(self)
numpy.core.tests.test_defchararray.TestInformation.test_isalpha(self)
numpy.core.tests.test_defchararray.TestInformation.test_isdigit(self)
numpy.core.tests.test_defchararray.TestInformation.test_islower(self)
numpy.core.tests.test_defchararray.TestInformation.test_isspace(self)
numpy.core.tests.test_defchararray.TestInformation.test_istitle(self)
numpy.core.tests.test_defchararray.TestInformation.test_isupper(self)
numpy.core.tests.test_defchararray.TestInformation.test_len(self)
numpy.core.tests.test_defchararray.TestInformation.test_rfind(self)
numpy.core.tests.test_defchararray.TestInformation.test_rindex(self)
numpy.core.tests.test_defchararray.TestInformation.test_startswith(self)
numpy.core.tests.test_defchararray.TestMethods(TestCase)
numpy.core.tests.test_defchararray.TestMethods.setUp(self)
numpy.core.tests.test_defchararray.TestMethods.test_capitalize(self)
numpy.core.tests.test_defchararray.TestMethods.test_center(self)
numpy.core.tests.test_defchararray.TestMethods.test_decode(self)
numpy.core.tests.test_defchararray.TestMethods.test_encode(self)
numpy.core.tests.test_defchararray.TestMethods.test_expandtabs(self)
numpy.core.tests.test_defchararray.TestMethods.test_isdecimal(self)
numpy.core.tests.test_defchararray.TestMethods.test_isnumeric(self)
numpy.core.tests.test_defchararray.TestMethods.test_join(self)
numpy.core.tests.test_defchararray.TestMethods.test_ljust(self)
numpy.core.tests.test_defchararray.TestMethods.test_lower(self)
numpy.core.tests.test_defchararray.TestMethods.test_lstrip(self)
numpy.core.tests.test_defchararray.TestMethods.test_partition(self)
numpy.core.tests.test_defchararray.TestMethods.test_replace(self)
numpy.core.tests.test_defchararray.TestMethods.test_rjust(self)
numpy.core.tests.test_defchararray.TestMethods.test_rpartition(self)
numpy.core.tests.test_defchararray.TestMethods.test_rsplit(self)
numpy.core.tests.test_defchararray.TestMethods.test_rstrip(self)
numpy.core.tests.test_defchararray.TestMethods.test_split(self)
numpy.core.tests.test_defchararray.TestMethods.test_splitlines(self)
numpy.core.tests.test_defchararray.TestMethods.test_strip(self)
numpy.core.tests.test_defchararray.TestMethods.test_swapcase(self)
numpy.core.tests.test_defchararray.TestMethods.test_title(self)
numpy.core.tests.test_defchararray.TestMethods.test_upper(self)
numpy.core.tests.test_defchararray.TestOperations(TestCase)
numpy.core.tests.test_defchararray.TestOperations.setUp(self)
numpy.core.tests.test_defchararray.TestOperations.test_add(self)
numpy.core.tests.test_defchararray.TestOperations.test_mod(self)
numpy.core.tests.test_defchararray.TestOperations.test_mul(self)
numpy.core.tests.test_defchararray.TestOperations.test_radd(self)
numpy.core.tests.test_defchararray.TestOperations.test_rmod(self)
numpy.core.tests.test_defchararray.TestOperations.test_rmul(self)
numpy.core.tests.test_defchararray.TestVecString(TestCase)
numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr(self)
numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method(self)
numpy.core.tests.test_defchararray.TestVecString.test_non_string_array(self)
numpy.core.tests.test_defchararray.TestWhitespace(TestCase)
numpy.core.tests.test_defchararray.TestWhitespace.setUp(self)
numpy.core.tests.test_defchararray.TestWhitespace.test1(self)
numpy.core.tests.test_defchararray.test_empty_indexing()
numpy.tests.test_defchararray.TestBasic(TestCase)
numpy.tests.test_defchararray.TestChar(TestCase)
numpy.tests.test_defchararray.TestChar.setUp(self)
numpy.tests.test_defchararray.TestChar.test_it(self)
numpy.tests.test_defchararray.TestComparisons(TestCase)
numpy.tests.test_defchararray.TestComparisons.setUp(self)
numpy.tests.test_defchararray.TestComparisons.test_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_greater(self)
numpy.tests.test_defchararray.TestComparisons.test_greater_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_less(self)
numpy.tests.test_defchararray.TestComparisons.test_less_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_not_equal(self)
numpy.tests.test_defchararray.TestComparisonsMixed1(TestComparisons)
numpy.tests.test_defchararray.TestComparisonsMixed1.setUp(self)
numpy.tests.test_defchararray.TestComparisonsMixed2(TestComparisons)
numpy.tests.test_defchararray.TestComparisonsMixed2.setUp(self)
numpy.tests.test_defchararray.TestInformation(TestCase)
numpy.tests.test_defchararray.TestInformation.setUp(self)
numpy.tests.test_defchararray.TestInformation.test_count(self)
numpy.tests.test_defchararray.TestInformation.test_endswith(self)
numpy.tests.test_defchararray.TestInformation.test_find(self)
numpy.tests.test_defchararray.TestInformation.test_index(self)
numpy.tests.test_defchararray.TestInformation.test_isalnum(self)
numpy.tests.test_defchararray.TestInformation.test_isalpha(self)
numpy.tests.test_defchararray.TestInformation.test_isdigit(self)
numpy.tests.test_defchararray.TestInformation.test_islower(self)
numpy.tests.test_defchararray.TestInformation.test_isspace(self)
numpy.tests.test_defchararray.TestInformation.test_istitle(self)
numpy.tests.test_defchararray.TestInformation.test_isupper(self)
numpy.tests.test_defchararray.TestInformation.test_len(self)
numpy.tests.test_defchararray.TestInformation.test_rfind(self)
numpy.tests.test_defchararray.TestInformation.test_rindex(self)
numpy.tests.test_defchararray.TestInformation.test_startswith(self)
numpy.tests.test_defchararray.TestMethods(TestCase)
numpy.tests.test_defchararray.TestMethods.setUp(self)
numpy.tests.test_defchararray.TestMethods.test_capitalize(self)
numpy.tests.test_defchararray.TestMethods.test_center(self)
numpy.tests.test_defchararray.TestMethods.test_decode(self)
numpy.tests.test_defchararray.TestMethods.test_encode(self)
numpy.tests.test_defchararray.TestMethods.test_expandtabs(self)
numpy.tests.test_defchararray.TestMethods.test_isdecimal(self)
numpy.tests.test_defchararray.TestMethods.test_isnumeric(self)
numpy.tests.test_defchararray.TestMethods.test_join(self)
numpy.tests.test_defchararray.TestMethods.test_ljust(self)
numpy.tests.test_defchararray.TestMethods.test_lower(self)
numpy.tests.test_defchararray.TestMethods.test_partition(self)
numpy.tests.test_defchararray.TestMethods.test_replace(self)
numpy.tests.test_defchararray.TestMethods.test_rjust(self)
numpy.tests.test_defchararray.TestMethods.test_rpartition(self)
numpy.tests.test_defchararray.TestMethods.test_rsplit(self)
numpy.tests.test_defchararray.TestMethods.test_split(self)
numpy.tests.test_defchararray.TestMethods.test_splitlines(self)
numpy.tests.test_defchararray.TestMethods.test_swapcase(self)
numpy.tests.test_defchararray.TestMethods.test_title(self)
numpy.tests.test_defchararray.TestMethods.test_upper(self)
numpy.tests.test_defchararray.TestOperations(TestCase)
numpy.tests.test_defchararray.TestOperations.setUp(self)
numpy.tests.test_defchararray.TestOperations.test_add(self)
numpy.tests.test_defchararray.TestOperations.test_mod(self)
numpy.tests.test_defchararray.TestOperations.test_mul(self)
numpy.tests.test_defchararray.TestOperations.test_radd(self)
numpy.tests.test_defchararray.TestOperations.test_rmod(self)
numpy.tests.test_defchararray.TestOperations.test_rmul(self)
numpy.tests.test_defchararray.TestVecString(TestCase)
numpy.tests.test_defchararray.TestVecString.test_broadcast_error(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_args_tuple(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_function_args(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_result_type(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_type_descr(self)
numpy.tests.test_defchararray.TestVecString.test_non_existent_method(self)
numpy.tests.test_defchararray.TestWhitespace(TestCase)
numpy.tests.test_defchararray.TestWhitespace.setUp(self)
numpy.tests.test_defchararray.TestWhitespace.test1(self)
numpy.tests.test_defchararray.test_empty_indexing()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/core/tests/test_machar.py----------------------------------------
A:numpy.core.tests.test_machar.machar->MachAr(lambda v: array([v], hiprec))
numpy.core.tests.test_machar.TestMachAr(TestCase)
numpy.core.tests.test_machar.TestMachAr._run_machar_highprec(self)
numpy.core.tests.test_machar.TestMachAr.test_underlow(self)
numpy.tests.test_TestMachAr(TestCase)
numpy.tests.test_TestMachAr._run_machar_highprec(self)
numpy.tests.test_TestMachAr.test_underlow(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/rules.py----------------------------------------
A:numpy.f2py.rules.vrd->sign2map(a, var[a])
A:numpy.f2py.rules.rd->dictappend(rd, ar)
A:numpy.f2py.rules.nb1->copy.deepcopy(nb)
A:numpy.f2py.rules.(api, wrap)->buildapi(nb)
A:numpy.f2py.rules.ar->applyrules(routine_rules, rd)
A:numpy.f2py.rules.(cr, wrap)->common_rules.buildhooks(m)
A:numpy.f2py.rules.(mr, wrap)->f90mod_rules.buildhooks(m)
A:numpy.f2py.rules.needs->cfuncs.get_needs()
A:numpy.f2py.rules.fn->os.path.join(options['buildpath'], vrd['modulename'] + 'module.tex')
A:numpy.f2py.rules.f->open(wn, 'w')
A:numpy.f2py.rules.wn->os.path.join(options['buildpath'], '%s-f2pywrappers2.f90' % vrd['modulename'])
A:numpy.f2py.rules.lines->''.join(lines).replace('\n     &\n', '\n')
A:numpy.f2py.rules.(rout, wrap)->func2subr.assubr(rout)
A:numpy.f2py.rules.(args, depargs)->getargs2(rout)
A:numpy.f2py.rules.rd['docsignature']->stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign': rd['docsign'], 'docsignopt': rd['docsignopt'], 'docsignxa': rd['docsignxa']}))
A:numpy.f2py.rules.optargs->stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa': rd['docsignxashort'], 'docsignopt': rd['docsignoptshort']}))
A:numpy.f2py.rules.rd['docsignatureshort']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.rules.rd['latexdocsignatureshort']->rd['latexdocsignatureshort'].replace(',', ', ').replace(',', ', ')
A:numpy.f2py.rules.cfs->stripcomma(replace('#callfortran##callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
A:numpy.f2py.rules.rd['callcompaqfortran']->stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m,um)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/f2py_testing.py----------------------------------------
A:numpy.f2py.f2py_testing.m->re.compile('\\A\\d+\\Z')
A:numpy.f2py.f2py_testing.repeat->eval(a)
A:numpy.f2py.f2py_testing.f2py_opts->' '.join(args)
A:numpy.f2py.f2py_testing.start_memusage->memusage()
A:numpy.f2py.f2py_testing.start_jiffies->jiffies()
A:numpy.f2py.f2py_testing.current_memusage->memusage()
numpy.f2py.f2py_testing.cmdline()
numpy.f2py.f2py_testing.run(runtest,test_functions,repeat=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/cb_rules.py----------------------------------------
A:numpy.f2py.cb_rules.(args, depargs)->getargs(rout)
A:numpy.f2py.cb_rules.vrd->capi_maps.cb_sign2map(a, var[a], index=i)
A:numpy.f2py.cb_rules.rd->dictappend(rd, ar)
A:numpy.f2py.cb_rules.ar->applyrules(cb_routine_rules, rd)
A:numpy.f2py.cb_rules.rd['docreturn']->stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']}))
A:numpy.f2py.cb_rules.optargs->stripcomma(replace('#docsignopt#', {'docsignopt': rd['docsignopt']}))
A:numpy.f2py.cb_rules.rd['docsignature']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.cb_rules.rd['latexdocsignature']->rd['latexdocsignature'].replace(',', ', ').replace(',', ', ')
numpy.f2py.cb_rules.buildcallback(rout,um)
numpy.f2py.cb_rules.buildcallbacks(m)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/diagnose.py----------------------------------------
A:numpy.f2py.diagnose.s->os.system(cmd)
A:numpy.f2py.diagnose._path->os.getcwd()
A:numpy.f2py.diagnose.cpu->cpuinfo()
numpy.f2py.diagnose.run()
numpy.f2py.diagnose.run_command(cmd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/func2subr.py----------------------------------------
A:numpy.f2py.func2subr.dv->dict(typespec='integer', intent=['hide'])
A:numpy.f2py.func2subr.need_interface->bool(extra_args)
A:numpy.f2py.func2subr.fortranname->getfortranname(rout)
A:numpy.f2py.func2subr.f90mode->ismoduleroutine(rout)
A:numpy.f2py.func2subr.l->var2fixfortran(vars, name, newname, f90mode)
A:numpy.f2py.func2subr.sargs->', '.join([a for a in args if a not in extra_args])
A:numpy.f2py.func2subr.rout->copy.copy(rout)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.createfuncwrapper(rout,signature=0)
numpy.f2py.func2subr.createsubrwrapper(rout,signature=0)
numpy.f2py.func2subr.var2fixfortran(vars,a,fa=None,f90mode=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/f2py2e.py----------------------------------------
A:numpy.f2py.f2py2e.signsfile->os.path.join(buildpath, signsfile)
A:numpy.f2py.f2py2e.postlist->callcrackfortran(files, options)
A:numpy.f2py.f2py2e.pyf->crackfortran.crack2fortran(postlist)
A:numpy.f2py.f2py2e.f->open(options['signsfile'], 'w')
A:numpy.f2py.f2py2e.f2pydir->os.path.dirname(os.path.abspath(cfuncs.__file__))
A:numpy.f2py.f2py2e.fobjhsrc->os.path.join(f2pydir, 'src', 'fortranobject.h')
A:numpy.f2py.f2py2e.fobjcsrc->os.path.join(f2pydir, 'src', 'fortranobject.c')
A:numpy.f2py.f2py2e.(files, options)->scaninputline(comline_list)
A:numpy.f2py.f2py2e.ret->buildmodules(postlist)
A:numpy.f2py.f2py2e.ind->len(prefix)
A:numpy.f2py.f2py2e.p->os.path.dirname(os.path.dirname(module.__file__))
A:numpy.f2py.f2py2e.i->get_info(n)
A:numpy.f2py.f2py2e.build_dir->tempfile.mkdtemp()
A:numpy.f2py.f2py2e._reg1->re.compile('[-][-]link[-]')
A:numpy.f2py.f2py2e._reg2->re.compile('[-][-]((no[-]|)(wrap[-]functions|lower)|debug[-]capi|quiet)|[-]include')
A:numpy.f2py.f2py2e._reg3->re.compile('[-][-]((f(90)?compiler([-]exec|)|compiler)=|help[-]compiler)')
A:numpy.f2py.f2py2e._reg4->re.compile('[-][-]((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help[-]fcompiler))')
A:numpy.f2py.f2py2e.allowed_keys->list(fcompiler.fcompiler_class.keys())
A:numpy.f2py.f2py2e.nvov->s[len(v):].lower()
A:numpy.f2py.f2py2e._reg5->re.compile('[-][-](verbose)')
A:numpy.f2py.f2py2e.(pyf_files, sources)->filter_files('', '[.]pyf([.]src|)', sources)
A:numpy.f2py.f2py2e.modulename->get_f2py_modulename(f)
A:numpy.f2py.f2py2e.(extra_objects, sources)->filter_files('', '[.](o|a|so)', sources)
A:numpy.f2py.f2py2e.(include_dirs, sources)->filter_files('-I', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(library_dirs, sources)->filter_files('-L', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(libraries, sources)->filter_files('-l', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(undef_macros, sources)->filter_files('-U', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(define_macros, sources)->filter_files('-D', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.name_value->tuple(name_value).split('=', 1)
A:numpy.f2py.f2py2e.define_macros[i]->tuple(name_value)
A:numpy.f2py.f2py2e.ext->Extension(**ext_args)
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files,options)
numpy.f2py.f2py2e.dict_append(d_out,d_in)
numpy.f2py.f2py2e.filter_files(prefix,suffix,files,remove_prefix=None)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.main()
numpy.f2py.f2py2e.run_compile()
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/auxfuncs.py----------------------------------------
A:numpy.f2py.auxfuncs.r->getmultilineblock(rout, 'callprotoargument', comment=0)
A:numpy.f2py.auxfuncs.ctype->getctype(var)
A:numpy.f2py.auxfuncs.proto_args->','.join(arg_types + arg_types2)
A:numpy.f2py.auxfuncs.str->str.replace('#%s#' % k, d[k]).replace('#%s#' % k, d[k])
A:numpy.f2py.auxfuncs.rd->dictappend(rd, a)
A:numpy.f2py.auxfuncs.rd[k]->dictappend(rd[k], ar[k])
A:numpy.f2py.auxfuncs.rr->applyrules(r, d, var)
A:numpy.f2py.auxfuncs.ret->dictappend(ret, rr)
A:numpy.f2py.auxfuncs.res->applyrules({'supertext': i}, d)
A:numpy.f2py.auxfuncs.ret[k]->replace(rules[k], d)
A:numpy.f2py.auxfuncs.ar->applyrules({k: i}, d, var)
numpy.f2py.auxfuncs.F2PYError(Exception)
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules,d,var={})
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd,ar)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout,cb_map={})
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout,blockname,comment=1,counter=0)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_and(*f)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.l_or(*f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.replace(str,d,defaultsep='')
numpy.f2py.auxfuncs.stripcomma(s)
numpy.f2py.auxfuncs.throw_error(self,mess)
numpy.f2py.auxfuncs.throw_error.__init__(self,mess)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/use_rules.py----------------------------------------
A:numpy.f2py.use_rules.ret->applyrules(usemodule_rules, rd)
A:numpy.f2py.use_rules.vrd['texnamename']->vrd['texnamename'].replace(repr(i), nummap[i]).replace(repr(i), nummap[i])
A:numpy.f2py.use_rules.rd->dictappend({}, vrd)
numpy.f2py.use_rules.buildusevar(name,realname,vars,usemodulename)
numpy.f2py.use_rules.buildusevars(m,r)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/capi_maps.py----------------------------------------
A:numpy.f2py.capi_maps.f->open('.f2py_f2cmap', 'r')
A:numpy.f2py.capi_maps.d->eval(f.read(), {}, {})
A:numpy.f2py.capi_maps.typespec->var['typespec'].lower()
A:numpy.f2py.capi_maps.ret['dims']->','.join(dim)
A:numpy.f2py.capi_maps.dim->copy.copy(var['dimension'])
A:numpy.f2py.capi_maps.ret['size']->getstrlength(var)
A:numpy.f2py.capi_maps.ret['rank']->repr(len(dim))
A:numpy.f2py.capi_maps.ctype->getctype(var)
A:numpy.f2py.capi_maps.(init, showinit)->getinit(a, var)
A:numpy.f2py.capi_maps.rank->repr(len(dim))
A:numpy.f2py.capi_maps.(ret['init.r'], ret['init.i'])->markoutercomma(ret['init'][1:-1]).split('@,@')
A:numpy.f2py.capi_maps.v->eval(v, {}, {})
A:numpy.f2py.capi_maps.ret['ctype']->getctype(var)
A:numpy.f2py.capi_maps.ret['intent']->'|'.join(intent_flags)
A:numpy.f2py.capi_maps.(ret['init'], ret['showinit'])->getinit(a, var)
A:numpy.f2py.capi_maps.ret['length']->getstrlength(var)
A:numpy.f2py.capi_maps.ret->dictappend(ret, getarrdims(a, var))
A:numpy.f2py.capi_maps.ddim->','.join(map(lambda x, y: '%s|%s' % (x, y), var['dimension'], dim))
A:numpy.f2py.capi_maps.(ret['pydocsign'], ret['pydocsignout'])->getpydocsign(a, var)
A:numpy.f2py.capi_maps.fname->getfortranname(rout)
A:numpy.f2py.capi_maps.ret['rlength']->getstrlength(rout['vars'][a])
A:numpy.f2py.capi_maps.ret['begintitle']->gentitle(ret['name'])
A:numpy.f2py.capi_maps.ret['endtitle']->gentitle('end of %s' % ret['name'])
A:numpy.f2py.capi_maps.ret['strlength']->getstrlength(rout)
A:numpy.f2py.capi_maps.ret['maxnofargs']->repr(nofargs)
A:numpy.f2py.capi_maps.ret['nofoptargs']->repr(nofoptargs)
A:numpy.f2py.capi_maps.ret['arrdocstr']->getarrdocsign(a, var)
numpy.f2py.capi_maps.cb_routsign2map(rout,um)
numpy.f2py.capi_maps.cb_sign2map(a,var,index=None)
numpy.f2py.capi_maps.common_sign2map(a,var)
numpy.f2py.capi_maps.getarrdims(a,var,verbose=0)
numpy.f2py.capi_maps.getarrdocsign(a,var)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getinit(a,var)
numpy.f2py.capi_maps.getpydocsign(a,var)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.sign2map(a,var)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/setup.py----------------------------------------
A:numpy.f2py.setup.config->config.todict().todict()
A:numpy.f2py.setup.target->os.path.join(build_dir, f2py_exe)
A:numpy.f2py.setup.f->open(target, 'w')
A:numpy.f2py.setup.version->config.todict().todict().get_version()
numpy.f2py.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/__init__.py----------------------------------------
A:numpy.f2py.__init__.f->open(source_fn, 'w')
A:numpy.f2py.__init__.(s, o)->exec_command(c)
numpy.f2py.__init__.compile(source,modulename='untitled',extra_args='',verbose=1,source_fn=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/common_rules.py----------------------------------------
A:numpy.f2py.common_rules.lower_name->name.lower()
A:numpy.f2py.common_rules.ct->capi_maps.getctype(vars[n])
A:numpy.f2py.common_rules.dm->capi_maps.getarrdims(n, vars[n])
A:numpy.f2py.common_rules.dms->dm['dims'].strip()
A:numpy.f2py.common_rules.inames1->rmbadname(inames)
A:numpy.f2py.common_rules.inames1_tps->','.join(['char *' + s for s in inames1])
A:numpy.f2py.common_rules.tname->name.replace('_', '\\_')
A:numpy.f2py.common_rules.note->'\n'.join(note)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.findcommonblocks(block,top=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/crackfortran.py----------------------------------------
A:numpy.f2py.crackfortran.i->m.group('after').strip().find('::')
A:numpy.f2py.crackfortran.f->open(pyffilename, 'w')
A:numpy.f2py.crackfortran.line->determineexprtype_re_5.match(expr).group('after').strip()
A:numpy.f2py.crackfortran.commentline->re.compile('(?P<line>([^"]*["][^"]*["][^"!]*|[^\\\']*\\\'[^\\\']*\\\'[^\\\'!]*|[^!\\\'"]*))!{1}(?P<rest>.*)')
A:numpy.f2py.crackfortran.includeline->re.compile('\\s*include\\s*(\\\'|")(?P<name>[^\\\'"]*)(\\\'|")', re.I)
A:numpy.f2py.crackfortran.cont1->re.compile('(?P<line>.*)&\\s*\\Z')
A:numpy.f2py.crackfortran.cont2->re.compile('(\\s*&|)(?P<line>.*)')
A:numpy.f2py.crackfortran.mline_mark->re.compile(".*?'''")
A:numpy.f2py.crackfortran.fin->fileinput.FileInput(ffile)
A:numpy.f2py.crackfortran.l->str(eval(l, {}, params))
A:numpy.f2py.crackfortran.currentfilename->fileinput.FileInput(ffile).filename()
A:numpy.f2py.crackfortran.r->eval(e, g, l)
A:numpy.f2py.crackfortran.rl->eval(e, g, l).group('rest')
A:numpy.f2py.crackfortran.finalline->m.group('after').strip().lower()
A:numpy.f2py.crackfortran.lc->fileinput.FileInput(ffile).readline()
A:numpy.f2py.crackfortran.m->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr)
A:numpy.f2py.crackfortran.fn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.fn1->os.path.join(inc_dir, fn)
A:numpy.f2py.crackfortran.typespattern4implicit->re.compile(beforethisafter % ('', fortrantypes + '|static|automatic|undefined', fortrantypes + '|static|automatic|undefined', '.*'), re.I)
A:numpy.f2py.crackfortran.n->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name').strip()
A:numpy.f2py.crackfortran.crackline_re_1->re.compile('\\s*(?P<result>\\b[a-z]+[\\w]*\\b)\\s*[=].*', re.I)
A:numpy.f2py.crackfortran.m1->re.compile('(?P<before>.*?)\\b' + x + '\\b(?P<after>.*)', re.I).match(ee)
A:numpy.f2py.crackfortran.m2->re.match('\\A\\s*(?P<local>\\b[\\w]+\\b)\\s*=\\s*>\\s*(?P<use>\\b[\\w]+\\b)\\s*\\Z', l, re.I)
A:numpy.f2py.crackfortran.a->expr2name(a, block, argsl)
A:numpy.f2py.crackfortran.decl->setcharselector(decl, decl2[k], force)
A:numpy.f2py.crackfortran.selectpattern->re.compile('\\s*(?P<this>(@\\(@.*?@\\)@|[*][\\d*]+|[*]\\s*@\\(@.*?@\\)@|))(?P<after>.*)\\Z', re.I)
A:numpy.f2py.crackfortran.nameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.callnameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*@\\(@\\s*(?P<args>.*)\\s*@\\)@\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.real16pattern->re.compile('([-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[dD]((?:[-+]?\\d+)?)')
A:numpy.f2py.crackfortran.real8pattern->re.compile('([-+]?((?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[eE]((?:[-+]?\\d+)?)|(\\d+\\.\\d*))')
A:numpy.f2py.crackfortran._intentcallbackpattern->re.compile('intent\\s*\\(.*?\\bcallback\\b', re.I)
A:numpy.f2py.crackfortran.block->analyzecommon(block)
A:numpy.f2py.crackfortran.(name, args, result, bind)->_resolvenameargspattern(m.group('after'))
A:numpy.f2py.crackfortran.args->rmbadname([x.strip() for x in markoutercomma(args).split('@,@')])
A:numpy.f2py.crackfortran.groupcache[groupcounter]['prefix']->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('before')
A:numpy.f2py.crackfortran.groupcache[groupcounter]['name']->rmbadname1(name)
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars']->copy.deepcopy(groupcache[groupcounter - 2]['vars'])
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars'][name]->appenddecl(groupcache[groupcounter]['vars'][name], groupcache[groupcounter]['vars'][result])
A:numpy.f2py.crackfortran.t->determineexprtype(m.group('name'), vars, rules)
A:numpy.f2py.crackfortran.(typespec, selector, attr, edecl)->cracktypespec0(m.group('this'), m.group('after'))
A:numpy.f2py.crackfortran.last_name->updatevars(typespec, selector, attr, edecl)
A:numpy.f2py.crackfortran.ll->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after').strip()
A:numpy.f2py.crackfortran.pl->ll[:i].strip()
A:numpy.f2py.crackfortran.ch->markoutercomma(pl).split('@,@')
A:numpy.f2py.crackfortran.k->rmbadname1(k)
A:numpy.f2py.crackfortran.params->get_parameters(vars, get_useparameters(block))
A:numpy.f2py.crackfortran.tt->list(v)
A:numpy.f2py.crackfortran.tt[m.start():m.end()]->list(v[m.start():m.end()].lower().replace('d', 'e'))
A:numpy.f2py.crackfortran.initexpr->initexpr[1:].lower().replace('d', 'e').replace(',', '+1j*(')
A:numpy.f2py.crackfortran.v->eval(v)
A:numpy.f2py.crackfortran.edecl[k]['=']->repr(v)
A:numpy.f2py.crackfortran.(kindselect, charselect, typename)->cracktypespec(typespec, selector)
A:numpy.f2py.crackfortran.begcendc->eval(e, g, l).strip()
A:numpy.f2py.crackfortran.dl->markoutercomma(d, ':').split('@:@')
A:numpy.f2py.crackfortran.llen->len(l[1])
A:numpy.f2py.crackfortran.bn->bn.strip().strip()
A:numpy.f2py.crackfortran.mm->re.compile('(?P<before>.*?)\\b' + x + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.name->re.compile('(?P<before>.*?)\\b' + x + '\\b(?P<after>.*)', re.I).match(ee).group('name')
A:numpy.f2py.crackfortran.rl[m2.group('local').strip()]->re.match('\\A\\s*(?P<local>\\b[\\w]+\\b)\\s*=\\s*>\\s*(?P<use>\\b[\\w]+\\b)\\s*\\Z', l, re.I).group('use').strip()
A:numpy.f2py.crackfortran.d[m.group('this')]->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after')
A:numpy.f2py.crackfortran.typespec->typespec.strip().lower().strip().lower()
A:numpy.f2py.crackfortran.d->str(params[d])
A:numpy.f2py.crackfortran.d[k]->unmarkouterparen(d[k])
A:numpy.f2py.crackfortran.attr->ll[:i].strip()
A:numpy.f2py.crackfortran.namepattern->re.compile('\\s*(?P<name>\\b[\\w]+\\b)\\s*(?P<after>.*)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.kindselector->re.compile('\\s*(\\(\\s*(kind\\s*=)?\\s*(?P<kind>.*)\\s*\\)|[*]\\s*(?P<kind2>.*?))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.charselector->re.compile('\\s*(\\((?P<lenkind>.*)\\)|[*]\\s*(?P<charlen>.*))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenkindpattern->re.compile('\\s*(kind\\s*=\\s*(?P<kind>.*?)\\s*(@,@\\s*len\\s*=\\s*(?P<len>.*)|)|(len\\s*=\\s*|)(?P<len2>.*?)\\s*(@,@\\s*(kind\\s*=\\s*|)(?P<kind2>.*)|))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenarraypattern->re.compile('\\s*(@\\(@\\s*(?!/)\\s*(?P<array>.*?)\\s*@\\)@\\s*[*]\\s*(?P<len>.*?)|([*]\\s*(?P<len2>.*?)|)\\s*(@\\(@\\s*(?!/)\\s*(?P<array2>.*?)\\s*@\\)@|))\\s*(=\\s*(?P<init>.*?)|(@\\(@|)/\\s*(?P<init2>.*?)\\s*/(@\\)@|)|)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.expr->expr.strip().strip()
A:numpy.f2py.crackfortran.c->eval('isintent_%s(var)' % intent)
A:numpy.f2py.crackfortran.s->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('start').lower()
A:numpy.f2py.crackfortran.ename->rmbadname1(m.group('name'))
A:numpy.f2py.crackfortran.edecl->groupcache[groupcounter]['vars'][ename].copy()
A:numpy.f2py.crackfortran.edecl['kindselector']->copy.copy(kindselect)
A:numpy.f2py.crackfortran.edecl['kindselector'][k]->copy.copy(kindselect[k])
A:numpy.f2py.crackfortran.edecl['charselector'][k]->copy.copy(charselect[k])
A:numpy.f2py.crackfortran.edecl['attrspec']->copy.copy(attrspec)
A:numpy.f2py.crackfortran.edecl['typespec']->copy.copy(typespec)
A:numpy.f2py.crackfortran.edecl['charselector']->copy.copy(charselect)
A:numpy.f2py.crackfortran.d1->re.compile('(?P<before>.*?)\\b' + x + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.d1[k]->unmarkouterparen(d1[k])
A:numpy.f2py.crackfortran.kindselect->kindselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.kindselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.charselect->charselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.lenkind->lenkind.groupdict().groupdict()
A:numpy.f2py.crackfortran.charselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.typename->typename.group('name').group('name')
A:numpy.f2py.crackfortran.usedict->get_usedict(block)
A:numpy.f2py.crackfortran.usename->usename.lower().lower()
A:numpy.f2py.crackfortran.g->postcrack(g, tab=tab + '\t')
A:numpy.f2py.crackfortran.param_map->get_useparameters(block)
A:numpy.f2py.crackfortran.b->myeval(ee, {}, {})
A:numpy.f2py.crackfortran.block['vars']->analyzevars(block)
A:numpy.f2py.crackfortran.block['sortvars']->sortvarnames(block['vars'])
A:numpy.f2py.crackfortran.block['body']->analyzebody(block, args, tab=tab)
A:numpy.f2py.crackfortran.mvars->copy.copy(block['vars'])
A:numpy.f2py.crackfortran.edef->copy.copy(bb)
A:numpy.f2py.crackfortran.b['saved_interface']->crack2fortrangen(b, '\n' + ' ' * 6, as_interface=True)
A:numpy.f2py.crackfortran.getlincoef_re_1->re.compile('\\A\\b\\w+\\b\\Z', re.I)
A:numpy.f2py.crackfortran.len_e->len(e)
A:numpy.f2py.crackfortran.re_1->re.compile('(?P<before>.*?)\\b' + x + '\\b(?P<after>.*)', re.I)
A:numpy.f2py.crackfortran.c2->str(d2[2])
A:numpy.f2py.crackfortran.c1->str(d1[2])
A:numpy.f2py.crackfortran.word_pattern->re.compile('\\b[a-z][\\w$]*\\b', re.I)
A:numpy.f2py.crackfortran.words->vars[name].get('depend', [])
A:numpy.f2py.crackfortran.names->list(vars.keys())
A:numpy.f2py.crackfortran.depend_dict->_calc_depend_dict(vars)
A:numpy.f2py.crackfortran.g_params->copy.copy(global_params)
A:numpy.f2py.crackfortran.kind_re->re.compile('\\bkind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_int_kind_re->re.compile('\\bselected_int_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_kind_re->re.compile('\\bselected_(int|real)_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.params[n]->chr(params[n])
A:numpy.f2py.crackfortran.nl->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name').strip().lower()
A:numpy.f2py.crackfortran.value->str(eval(value, {}, params))
A:numpy.f2py.crackfortran.(implicitrules, attrrules)->buildimplicitrules(block)
A:numpy.f2py.crackfortran.vars->vars2fortran(block, block['vars'], argsl, tab + tabchar, as_interface=as_interface)
A:numpy.f2py.crackfortran.vars[n]->setattrspec(vars[n], 'recursive')
A:numpy.f2py.crackfortran.ln0->n[0].lower()
A:numpy.f2py.crackfortran.note->note.replace('\\n ', '\n').replace('\\n ', '\n')
A:numpy.f2py.crackfortran.(d, v, di)->getarrlen(dl, list(block['vars'].keys()))
A:numpy.f2py.crackfortran.ni->len(vars[n]['dimension'])
A:numpy.f2py.crackfortran.length->_eval_length(vars[n]['charselector']['len'], params)
A:numpy.f2py.crackfortran.vars[n]['=']->_eval_scalar(vars[n]['='], params)
A:numpy.f2py.crackfortran.pr1->pr1.replace('recursive', '').replace('pure', '')
A:numpy.f2py.crackfortran.pr->pr1.replace('recursive', '').replace('pure', '').replace('recursive', '')
A:numpy.f2py.crackfortran.kindselect['kind']->eval(kindselect['kind'], {}, params)
A:numpy.f2py.crackfortran.neededvars->copy.copy(block['args'])
A:numpy.f2py.crackfortran.analyzeargs_re_1->re.compile('\\A[a-z]+[\\w$]*\\Z', re.I)
A:numpy.f2py.crackfortran.at->determineexprtype(a, block['vars'], implicitrules)
A:numpy.f2py.crackfortran.block['vars'][a]->setattrspec(block['vars'][a], 'external')
A:numpy.f2py.crackfortran.determineexprtype_re_1->re.compile('\\A\\(.+?[,].+?\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_2->re.compile('\\A[+-]?\\d+(_(P<name>[\\w]+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_3->re.compile('\\A[+-]?[\\d.]+[\\d+-de.]*(_(P<name>[\\w]+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_4->re.compile('\\A\\(.*\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_5->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.rn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.use->use2fortran(block['use'], tab + tabchar)
A:numpy.f2py.crackfortran.common->common2fortran(block['common'], tab + tabchar)
A:numpy.f2py.crackfortran.body->crack2fortrangen(block['body'], tab + tabchar)
A:numpy.f2py.crackfortran.lst->true_intent_list(vars[a])
A:numpy.f2py.crackfortran.postlist->crackfortran(files, funcs)
A:numpy.f2py.crackfortran.pyf->crack2fortran(postlist)
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length,params)
numpy.f2py.crackfortran._eval_scalar(value,params)
numpy.f2py.crackfortran._get_depend_dict(name,vars,deps)
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p,r=0,radix=0)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block,args,tab='')
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m,case,line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl,decl2,force=1)
numpy.f2py.crackfortran.appendmultiline(group,context_name,ml)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common,tab='')
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block,tab='\n',as_interface=False)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line,reset=0)
numpy.f2py.crackfortran.cracktypespec(typespec,selector)
numpy.f2py.crackfortran.cracktypespec0(typespec,ll)
numpy.f2py.crackfortran.determineexprtype(expr,vars,rules={})
numpy.f2py.crackfortran.expr2name(a,block,args=[])
numpy.f2py.crackfortran.get_parameters(vars,global_params={})
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block,param_map=None)
numpy.f2py.crackfortran.getarrlen(dl,args,star='*')
numpy.f2py.crackfortran.getblockname(block,unknown='unknown')
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getlincoef(e,xset)
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line,comma=',')
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e,g=None,l=None)
numpy.f2py.crackfortran.outmess(line,flag=1)
numpy.f2py.crackfortran.postcrack(block,args=None,tab='')
numpy.f2py.crackfortran.postcrack2(block,tab='',param_map=None)
numpy.f2py.crackfortran.readfortrancode(ffile,dowithline=show,istop=1)
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl,attr,force=0)
numpy.f2py.crackfortran.setcharselector(decl,sel,force=0)
numpy.f2py.crackfortran.setkindselector(decl,sel,force=0)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.show(o,f=0)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.true_intent_list(var)
numpy.f2py.crackfortran.undo_rmbadname(names)
numpy.f2py.crackfortran.undo_rmbadname1(name)
numpy.f2py.crackfortran.unmarkouterparen(line)
numpy.f2py.crackfortran.updatevars(typespec,selector,attrspec,entitydecl)
numpy.f2py.crackfortran.use2fortran(use,tab='')
numpy.f2py.crackfortran.vars2fortran(block,vars,args,tab='',as_interface=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/cfuncs.py----------------------------------------
A:numpy.f2py.cfuncs.t->append_needs(nn, flag)
A:numpy.f2py.cfuncs.saveout->copy.copy(outneeds[n])
numpy.f2py.cfuncs.append_needs(need,flag=1)
numpy.f2py.cfuncs.buildcfuncs()
numpy.f2py.cfuncs.get_needs()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/__version__.py----------------------------------------
A:numpy.f2py.__version__.version->str(major)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/f90mod_rules.py----------------------------------------
A:numpy.f2py.f90mod_rules.vrd->capi_maps.modsign2map(m)
A:numpy.f2py.f90mod_rules.note->'\n'.join(note)
A:numpy.f2py.f90mod_rules.ct->capi_maps.getctype(var)
A:numpy.f2py.f90mod_rules.dm->capi_maps.getarrdims(n, var)
A:numpy.f2py.f90mod_rules.dms->eval('range(1,%s+1)' % dm['rank'])
A:numpy.f2py.f90mod_rules.(api, wrap)->rules.buildapi(b)
A:numpy.f2py.f90mod_rules.ar->applyrules(api, vrd)
A:numpy.f2py.f90mod_rules.ret->dictappend(ret, ar)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.findf90modules(m)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/util.py----------------------------------------
A:numpy.f2py.tests.util._module_dir->tempfile.mkdtemp()
A:numpy.f2py.tests.util.d->get_module_dir()
A:numpy.f2py.tests.util.fn->os.path.join(os.path.dirname(fn), '.f2py_f2cmap')
A:numpy.f2py.tests.util.key->repr((a, kw))
A:numpy.f2py.tests.util.memo[key]->func(*a, **kw)
A:numpy.f2py.tests.util.dst->os.path.join(d, os.path.basename(fn))
A:numpy.f2py.tests.util.module_name->get_temp_module_name()
A:numpy.f2py.tests.util.cwd->os.getcwd()
A:numpy.f2py.tests.util.p->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:numpy.f2py.tests.util.(out, err)->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
A:numpy.f2py.tests.util.(fd, tmp_fn)->tempfile.mkstemp(suffix=suffix)
A:numpy.f2py.tests.util.(fd, script)->tempfile.mkstemp(suffix='.py')
A:numpy.f2py.tests.util.m->re.search(asbytes('COMPILERS:(\\d+),(\\d+),(\\d+)'), out)
A:numpy.f2py.tests.util.config_code->textwrap.dedent(config_code).replace('\n', '\n    ')
A:numpy.f2py.tests.util.script->os.path.join(d, get_temp_module_name() + '.py')
A:numpy.f2py.tests.util.f->open(script, 'wb')
A:numpy.f2py.tests.util.self.module->build_module(self.sources, options=self.options, skip=self.skip, only=self.only, module_name=self.module_name)
numpy.f2py.tests.util.F2PyTest(object)
numpy.f2py.tests.util.F2PyTest.setUp(self)
numpy.f2py.tests.util._cleanup()
numpy.f2py.tests.util._get_compiler_status()
numpy.f2py.tests.util._memoize(func)
numpy.f2py.tests.util.build_code(source_code,options=[],skip=[],only=[],suffix=None,module_name=None)
numpy.f2py.tests.util.build_module(source_files,options=[],skip=[],only=[],module_name=None)
numpy.f2py.tests.util.build_module_distutils(source_files,config_code,module_name,**kw)
numpy.f2py.tests.util.get_module_dir()
numpy.f2py.tests.util.get_temp_module_name()
numpy.f2py.tests.util.has_c_compiler()
numpy.f2py.tests.util.has_f77_compiler()
numpy.f2py.tests.util.has_f90_compiler()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_return_real.py----------------------------------------
A:numpy.f2py.tests.test_return_real.r->t(10 ** 400)
numpy.f2py.tests.test_return_real.TestCReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestCReturnReal.test_all(self)
numpy.f2py.tests.test_return_real.TestF77ReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestF77ReturnReal.test_all(self)
numpy.f2py.tests.test_return_real.TestF90ReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestF90ReturnReal.test_all(self)
numpy.f2py.tests.test_return_real.TestReturnReal(util.F2PyTest)
numpy.f2py.tests.test_return_real.TestReturnReal.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_array_from_pyobj.py----------------------------------------
A:numpy.f2py.tests.test_array_from_pyobj.d->os.path.dirname(__file__)
A:numpy.f2py.tests.test_array_from_pyobj.wrap->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext')
A:numpy.f2py.tests.test_array_from_pyobj.name->name.lower().lower()
A:numpy.f2py.tests.test_array_from_pyobj.intent->Intent()
A:numpy.f2py.tests.test_array_from_pyobj.obj->array(self.num23seq, dtype=t.dtype)
A:numpy.f2py.tests.test_array_from_pyobj.self.NAME->name.lower().lower().upper()
A:numpy.f2py.tests.test_array_from_pyobj.self.type_num->getattr(wrap, 'NPY_' + self.NAME)
A:numpy.f2py.tests.test_array_from_pyobj.self.obj_copy->copy.deepcopy(obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').call(typ.type_num, dims, intent.flags, obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.arr)
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr->array(array(obj, dtype=typ.dtypechar).reshape(*dims), order=self.intent.is_intent('c') and 'C' or 'F')
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.pyarr)
A:numpy.f2py.tests.test_array_from_pyobj.obj_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.obj)
A:numpy.f2py.tests.test_array_from_pyobj.a->self.array(shape, intent.inplace, obj)
numpy.f2py.tests.test_array_from_pyobj.Array(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__init__(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal(self,arr1,arr2)
numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory(self)
numpy.f2py.tests.test_array_from_pyobj.Intent(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__getattr__(self,name)
numpy.f2py.tests.test_array_from_pyobj.Intent.__init__(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent(self,*names)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact(self,*names)
numpy.f2py.tests.test_array_from_pyobj.Type(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type.__new__(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type._init(self,name)
numpy.f2py.tests.test_array_from_pyobj.Type.all_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.cast_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.equal_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.larger_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.smaller_types(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_in_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_cache_hidden(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_hidden(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_cache_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_cache_from_2casttype_failure(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_copy_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inout_2seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inplace(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inplace_from_casttype(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_none(self)
numpy.f2py.tests.test_array_from_pyobj.flags2names(flags)
numpy.f2py.tests.test_array_from_pyobj.flags_info(arr)
numpy.f2py.tests.test_array_from_pyobj.setup()
numpy.f2py.tests.test_array_from_pyobj.test_intent(unittest.TestCase)
numpy.f2py.tests.test_array_from_pyobj.test_intent.test_in_out(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_return_integer.py----------------------------------------
numpy.f2py.tests.test_return_integer.TestF77ReturnInteger(TestReturnInteger)
numpy.f2py.tests.test_return_integer.TestF77ReturnInteger.test_all(self)
numpy.f2py.tests.test_return_integer.TestF90ReturnInteger(TestReturnInteger)
numpy.f2py.tests.test_return_integer.TestF90ReturnInteger.test_all(self)
numpy.f2py.tests.test_return_integer.TestReturnInteger(util.F2PyTest)
numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_assumed_shape.py----------------------------------------
A:numpy.f2py.tests.test_assumed_shape.r->self.module.mod.fsum([1, 2])
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample(util.F2PyTest)
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample.test_all(self)
numpy.f2py.tests.test_assumed_shape._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_kind.py----------------------------------------
numpy.f2py.tests.test_kind.TestKind(util.F2PyTest)
numpy.f2py.tests.test_kind.TestKind.test_all(self)
numpy.f2py.tests.test_kind._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_mixed.py----------------------------------------
numpy.f2py.tests.test_mixed.TestMixed(util.F2PyTest)
numpy.f2py.tests.test_mixed.TestMixed.test_all(self)
numpy.f2py.tests.test_mixed.TestMixed.test_docstring(self)
numpy.f2py.tests.test_mixed._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_size.py----------------------------------------
A:numpy.f2py.tests.test_size.r->self.module.flatten([[1, 2, 3], [4, 5, 6]])
numpy.f2py.tests.test_size.TestSizeSumExample(util.F2PyTest)
numpy.f2py.tests.test_size.TestSizeSumExample.test_all(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_flatten(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_transpose(self)
numpy.f2py.tests.test_size._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_return_character.py----------------------------------------
A:numpy.f2py.tests.test_return_character.r->t(array(77, 'u1'))
numpy.f2py.tests.test_return_character.TestF77ReturnCharacter(TestReturnCharacter)
numpy.f2py.tests.test_return_character.TestF77ReturnCharacter.test_all(self)
numpy.f2py.tests.test_return_character.TestF90ReturnCharacter(TestReturnCharacter)
numpy.f2py.tests.test_return_character.TestF90ReturnCharacter.test_all(self)
numpy.f2py.tests.test_return_character.TestReturnCharacter(util.F2PyTest)
numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_return_logical.py----------------------------------------
numpy.f2py.tests.test_return_logical.TestF77ReturnLogical(TestReturnLogical)
numpy.f2py.tests.test_return_logical.TestF77ReturnLogical.test_all(self)
numpy.f2py.tests.test_return_logical.TestF90ReturnLogical(TestReturnLogical)
numpy.f2py.tests.test_return_logical.TestF90ReturnLogical.test_all(self)
numpy.f2py.tests.test_return_logical.TestReturnLogical(util.F2PyTest)
numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_return_complex.py----------------------------------------
A:numpy.f2py.tests.test_return_complex.r->t(10 ** 400)
numpy.f2py.tests.test_return_complex.TestF77ReturnComplex(TestReturnComplex)
numpy.f2py.tests.test_return_complex.TestF77ReturnComplex.test_all(self)
numpy.f2py.tests.test_return_complex.TestF90ReturnComplex(TestReturnComplex)
numpy.f2py.tests.test_return_complex.TestF90ReturnComplex.test_all(self)
numpy.f2py.tests.test_return_complex.TestReturnComplex(util.F2PyTest)
numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/tests/test_callback.py----------------------------------------
A:numpy.f2py.tests.test_callback.t->getattr(self.module, name)
A:numpy.f2py.tests.test_callback.r->t(a.mth)
A:numpy.f2py.tests.test_callback.a->A()
numpy.f2py.tests.test_callback.TestF77Callback(util.F2PyTest)
numpy.f2py.tests.test_callback.TestF77Callback.check_function(self,name)
numpy.f2py.tests.test_callback.TestF77Callback.test_all(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_docstring(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/docs/pytest.py----------------------------------------
A:numpy.f2py.docs.pytest.a->Numeric.array(a)
numpy.f2py.docs.pytest.foo(a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/f2py/docs/usersguide/setup_example.py----------------------------------------
A:numpy.f2py.docs.usersguide.setup_example.ext1->Extension(name='scalar', sources=['scalar.f'])
A:numpy.f2py.docs.usersguide.setup_example.ext2->Extension(name='fib2', sources=['fib2.pyf', 'fib1.f'])


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/jargon.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/indexing.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/subclassing.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/methods_vs_functions.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/internals.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/glossary.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/misc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/howtofind.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/basics.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/creation.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/broadcasting.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/__init__.py----------------------------------------
A:numpy.doc.__init__.ref_dir->os.path.join(os.path.dirname(__file__))
A:numpy.doc.__init__.__all__->sorted((f[:-3] for f in os.listdir(ref_dir) if f.endswith('.py') and (not f.startswith('__'))))


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/performance.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/constants.py----------------------------------------
A:numpy.doc.constants.s->'\n'.join(new_lines)
A:numpy.doc.constants.lines->'\n'.join(new_lines).split('\n')
A:numpy.doc.constants.m->re.match('^(\\s+)[-=]+\\s*$', line)
A:numpy.doc.constants.prev->textwrap.dedent(new_lines.pop())
A:numpy.doc.constants.constants_str->'\n'.join(constants_str)
numpy.doc.constants.add_newdoc(module,name,doc)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/io.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/byteswapping.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/doc/structured_arrays.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/numpytest.py----------------------------------------
A:numpy.testing.numpytest.package->__import__(package)
A:numpy.testing.numpytest.package_dir->os.path.dirname(package.__file__)
A:numpy.testing.numpytest.subdir->os.path.join(package_dir, subpackage_name)
numpy.testing.importall(package)
numpy.testing.numpytest.importall(package)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/utils.py----------------------------------------
A:numpy.testing.utils.st->isinf(x)
A:numpy.testing.utils.results->zeros(args, float64)
A:numpy.testing.utils.f[i]->random.random()
A:numpy.testing.utils.f->sys._getframe(1)
A:numpy.testing.utils.l->sys._getframe(1).readline().split(' ')
A:numpy.testing.utils.path->win32pdh.MakeCounterPath((machine, object, instance, None, inum, counter))
A:numpy.testing.utils.hq->win32pdh.OpenQuery()
A:numpy.testing.utils.hc->win32pdh.AddCounter(hq, path)
A:numpy.testing.utils.(type, val)->win32pdh.GetFormattedCounterValue(hc, format)
A:numpy.testing.utils.r->'\n'.join(r.splitlines()[:3])
A:numpy.testing.utils.msg->build_err_msg([x, y], err_msg, verbose=verbose, header=header, names=('x', 'y'))
A:numpy.testing.utils.actualr->real(actual)
A:numpy.testing.utils.actuali->imag(actual)
A:numpy.testing.utils.desiredr->real(desired)
A:numpy.testing.utils.desiredi->imag(desired)
A:numpy.testing.utils.isdesnan->gisnan(desired)
A:numpy.testing.utils.isactnan->gisnan(actual)
A:numpy.testing.utils.(actual, desired)->map(float, (actual, desired))
A:numpy.testing.utils.scale->numpy.power(10, np.floor(np.log10(scale)))
A:numpy.testing.utils.x->numpy.array(x, dtype=t)
A:numpy.testing.utils.y->numpy.array(y, dtype=t)
A:numpy.testing.utils.val->comparison(x, y)
A:numpy.testing.utils.reduced->reduced.tolist().tolist()
A:numpy.testing.utils.cond->reduced.tolist().tolist().all()
A:numpy.testing.utils.efmt->traceback.format_exc()
A:numpy.testing.utils.xinfid->gisinf(x)
A:numpy.testing.utils.yinfid->gisinf(y)
A:numpy.testing.utils.z->z.astype(float_).astype(float_)
A:numpy.testing.utils.diff->numpy.array(rx - ry, dtype=vdt)
A:numpy.testing.utils.d1->numpy.array(rx - ry, dtype=vdt).pop(0)
A:numpy.testing.utils.d2->numpy.array(rx - ry, dtype=vdt).pop(0)
A:numpy.testing.utils.d3->numpy.array(rx - ry, dtype=vdt).pop(0)
A:numpy.testing.utils.(file, pathname, description)->imp.find_module(name, path)
A:numpy.testing.utils.m->imp.load_module(name, file, pathname, description)
A:numpy.testing.utils.tests->doctest.DocTestFinder().find(m)
A:numpy.testing.utils.runner->doctest.DocTestRunner(verbose=False)
A:numpy.testing.utils.nose->import_nose()
A:numpy.testing.utils.testmatch->re.compile(testmatch)
A:numpy.testing.utils.frame->sys._getframe(1)
A:numpy.testing.utils.code->compile(code_str, 'Test name: %s ' % label, 'exec')
A:numpy.testing.utils.elapsed->jiffies()
A:numpy.testing.utils.a->numpy.arange(100 * 100)
A:numpy.testing.utils.b->numpy.arange(100 * 100).reshape(100, 100)
A:numpy.testing.utils.rc->sys.getrefcount(i)
A:numpy.testing.utils.d->op(b, c)
A:numpy.testing.utils.ax->numpy.abs(x)
A:numpy.testing.utils.ay->numpy.abs(y)
A:numpy.testing.utils.max_nulp->numpy.max(nulp_diff(x, y))
A:numpy.testing.utils.ret->nulp_diff(a, b, dtype)
A:numpy.testing.utils.t->numpy.common_type(x, y)
A:numpy.testing.utils.rx->numpy.array(x, dtype=t).view(vdt)
A:numpy.testing.utils.ry->integer_repr(y)
A:numpy.testing.utils.local_values->locals()
A:numpy.testing.utils.result->func(*args, **kw)
numpy.testing.IgnoreException(Exception)
numpy.testing.WarningManager(self,record=False,module=None)
numpy.testing.WarningManager.__enter__(self)
numpy.testing.WarningManager.__exit__(self)
numpy.testing.WarningMessage(self,message,category,filename,lineno,file=None,line=None)
numpy.testing.WarningMessage.__str__(self)
numpy.testing._assert_valid_refcount(op)
numpy.testing._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing._integer_repr(x,vdt,comp)
numpy.testing.assert_(val,msg='')
numpy.testing.assert_allclose(actual,desired,rtol=1e-07,atol=0,err_msg='',verbose=True)
numpy.testing.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='')
numpy.testing.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.testing.assert_array_less(x,y,err_msg='',verbose=True)
numpy.testing.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing.assert_equal(actual,desired,err_msg='',verbose=True)
numpy.testing.assert_no_warnings(func,*args,**kw)
numpy.testing.assert_raises(*args,**kwargs)
numpy.testing.assert_string_equal(actual,desired)
numpy.testing.assert_warns(warning_class,func,*args,**kw)
numpy.testing.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'))
numpy.testing.decorate_methods(cls,decorator,testmatch=None)
numpy.testing.gisfinite(x)
numpy.testing.gisinf(x)
numpy.testing.gisnan(x)
numpy.testing.integer_repr(x)
numpy.testing.measure(code_str,times=1,label=None)
numpy.testing.nulp_diff(x,y,dtype=None)
numpy.testing.print_assert_equal(test_string,actual,desired)
numpy.testing.raises(*args,**kwargs)
numpy.testing.rand(*args)
numpy.testing.rundocs(filename=None,raise_on_error=True)
numpy.testing.runstring(astr,dict)
numpy.testing.utils.IgnoreException(Exception)
numpy.testing.utils.WarningManager(self,record=False,module=None)
numpy.testing.utils.WarningManager.__enter__(self)
numpy.testing.utils.WarningManager.__exit__(self)
numpy.testing.utils.WarningManager.__init__(self,record=False,module=None)
numpy.testing.utils.WarningMessage(self,message,category,filename,lineno,file=None,line=None)
numpy.testing.utils.WarningMessage.__init__(self,message,category,filename,lineno,file=None,line=None)
numpy.testing.utils.WarningMessage.__str__(self)
numpy.testing.utils._assert_valid_refcount(op)
numpy.testing.utils._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing.utils._integer_repr(x,vdt,comp)
numpy.testing.utils.assert_(val,msg='')
numpy.testing.utils.assert_allclose(actual,desired,rtol=1e-07,atol=0,err_msg='',verbose=True)
numpy.testing.utils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing.utils.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing.utils.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.testing.utils.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing.utils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='')
numpy.testing.utils.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.testing.utils.assert_array_less(x,y,err_msg='',verbose=True)
numpy.testing.utils.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing.utils.assert_equal(actual,desired,err_msg='',verbose=True)
numpy.testing.utils.assert_no_warnings(func,*args,**kw)
numpy.testing.utils.assert_raises(*args,**kwargs)
numpy.testing.utils.assert_string_equal(actual,desired)
numpy.testing.utils.assert_warns(warning_class,func,*args,**kw)
numpy.testing.utils.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'))
numpy.testing.utils.decorate_methods(cls,decorator,testmatch=None)
numpy.testing.utils.gisfinite(x)
numpy.testing.utils.gisinf(x)
numpy.testing.utils.gisnan(x)
numpy.testing.utils.integer_repr(x)
numpy.testing.utils.measure(code_str,times=1,label=None)
numpy.testing.utils.nulp_diff(x,y,dtype=None)
numpy.testing.utils.print_assert_equal(test_string,actual,desired)
numpy.testing.utils.raises(*args,**kwargs)
numpy.testing.utils.rand(*args)
numpy.testing.utils.rundocs(filename=None,raise_on_error=True)
numpy.testing.utils.runstring(astr,dict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/setup.py----------------------------------------
A:numpy.testing.setup.config->Configuration('testing', parent_package, top_path)
numpy.testing.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/print_coercion_tables.py----------------------------------------
A:numpy.testing.print_coercion_tables.dtype->numpy.dtype('O')
A:numpy.testing.print_coercion_tables.rowtype->numpy.obj2sctype(row)
A:numpy.testing.print_coercion_tables.coltype->numpy.obj2sctype(col)
A:numpy.testing.print_coercion_tables.rowvalue->rowtype(inputfirstvalue)
A:numpy.testing.print_coercion_tables.colvalue->coltype(inputsecondvalue)
A:numpy.testing.print_coercion_tables.value->numpy.add(rowvalue, colvalue)
numpy.testing.print_coercion_tables.GenericObject(self,v)
numpy.testing.print_coercion_tables.GenericObject.__add__(self,other)
numpy.testing.print_coercion_tables.GenericObject.__init__(self,v)
numpy.testing.print_coercion_tables.GenericObject.__radd__(self,other)
numpy.testing.print_coercion_tables.print_cancast_table(ntypes)
numpy.testing.print_coercion_tables.print_coercion_table(ntypes,inputfirstvalue,inputsecondvalue,firstarray,use_promote_types=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/noseclasses.py----------------------------------------
A:numpy.testing.noseclasses.val->getattr(obj, valname)
A:numpy.testing.noseclasses.ret->doctest.OutputChecker.check_output(self, want, got, optionflags)
A:numpy.testing.noseclasses.got->got.replace("'<i%d'" % sz, 'int').replace("'<i%d'" % sz, 'int')
A:numpy.testing.noseclasses.want->want.replace("'<i%d'" % sz, 'int').replace("'<i%d'" % sz, 'int')
A:numpy.testing.noseclasses.print_state->numpy.get_printoptions()
A:numpy.testing.noseclasses.self.finder->self.test_finder_class()
A:numpy.testing.noseclasses.self.parser->doctest.DocTestParser()
A:numpy.testing.noseclasses.pkg_name->get_package_name(os.path.dirname(test.filename))
A:numpy.testing.noseclasses.p->get_package_name(os.path.dirname(test.filename)).split('.')
A:numpy.testing.noseclasses.test.globs[p2]->__import__(pkg_name, test.globs, {}, [p2])
A:numpy.testing.noseclasses.tests->self.finder.find(module)
A:numpy.testing.noseclasses.module_file->src(module.__file__)
A:numpy.testing.noseclasses.bn->os.path.basename(file)
A:numpy.testing.noseclasses.knownfail->ErrorClass(KnownFailureTest, label='KNOWNFAIL', isfailure=False)
A:numpy.testing.noseclasses.disable->getattr(options, 'noKnownFail', False)
A:numpy.testing.noseclasses.self.testRunner->nose.core.TextTestRunner(stream=self.config.stream, verbosity=self.config.verbosity, config=self.config)
A:numpy.testing.noseclasses.plug_runner->self.config.plugins.prepareTestRunner(self.testRunner)
A:numpy.testing.noseclasses.self.result->self.testRunner.run(self.test)
A:numpy.testing.noseclasses.self.success->self.result.wasSuccessful()
numpy.testing.noseclasses.KnownFailure(ErrorClassPlugin)
numpy.testing.noseclasses.KnownFailure.configure(self,options,conf)
numpy.testing.noseclasses.KnownFailure.options(self,parser,env=os.environ)
numpy.testing.noseclasses.KnownFailureTest(Exception)
numpy.testing.noseclasses.NumpyDocTestCase(self,test,optionflags=0,setUp=None,tearDown=None,checker=None,obj=None,result_var='_')
numpy.testing.noseclasses.NumpyDocTestCase.__init__(self,test,optionflags=0,setUp=None,tearDown=None,checker=None,obj=None,result_var='_')
numpy.testing.noseclasses.NumpyDocTestFinder(doctest.DocTestFinder)
numpy.testing.noseclasses.NumpyDocTestFinder._find(self,tests,obj,name,module,source_lines,globs,seen)
numpy.testing.noseclasses.NumpyDocTestFinder._from_module(self,module,object)
numpy.testing.noseclasses.NumpyDoctest(npd.Doctest)
numpy.testing.noseclasses.NumpyDoctest.afterContext(self)
numpy.testing.noseclasses.NumpyDoctest.configure(self,options,config)
numpy.testing.noseclasses.NumpyDoctest.loadTestsFromModule(self,module)
numpy.testing.noseclasses.NumpyDoctest.options(self,parser,env=os.environ)
numpy.testing.noseclasses.NumpyDoctest.set_test_context(self,test)
numpy.testing.noseclasses.NumpyDoctest.wantFile(self,file)
numpy.testing.noseclasses.NumpyOutputChecker(doctest.OutputChecker)
numpy.testing.noseclasses.NumpyOutputChecker.check_output(self,want,got,optionflags)
numpy.testing.noseclasses.NumpyTestProgram(nose.core.TestProgram)
numpy.testing.noseclasses.NumpyTestProgram.runTests(self)
numpy.testing.noseclasses.Unplugger(self,to_unplug='doctest')
numpy.testing.noseclasses.Unplugger.__init__(self,to_unplug='doctest')
numpy.testing.noseclasses.Unplugger.configure(self,options,config)
numpy.testing.noseclasses.Unplugger.options(self,parser,env)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/decorators.py----------------------------------------
A:numpy.testing.decorators.cond->conditional()
numpy.testing.decorators.deprecated(conditional=True)
numpy.testing.decorators.knownfailureif(fail_condition,msg=None)
numpy.testing.decorators.setastest(tf=True)
numpy.testing.decorators.skipif(skip_condition,msg=None)
numpy.testing.decorators.slow(t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/nosetester.py----------------------------------------
A:numpy.testing.nosetester.(filepath, p2)->os.path.split(filepath)
A:numpy.testing.nosetester.f->sys._getframe(1)
A:numpy.testing.nosetester.file_to_run->sys._getframe(1).f_locals.get('__file__', None)
A:numpy.testing.nosetester.package_path->str(package)
A:numpy.testing.nosetester.package_name->get_package_name(package_path)
A:numpy.testing.nosetester.nose->import_nose()
A:numpy.testing.nosetester.npdir->os.path.dirname(numpy.__file__)
A:numpy.testing.nosetester.spdir->os.path.dirname(scipy.__file__)
A:numpy.testing.nosetester.pyversion->sys.version.replace('\n', '')
A:numpy.testing.nosetester.argv->self._test_argv(label, verbose, extra_argv)
A:numpy.testing.nosetester.plug->self._get_custom_doctester()
A:numpy.testing.nosetester.verbose->min(verbose, 3)
A:numpy.testing.nosetester._warn_opts->dict(develop=(DeprecationWarning, RuntimeWarning), release=())
A:numpy.testing.nosetester.(argv, plugins)->self.prepare_test_args(label, verbose, extra_argv, doctests, coverage)
A:numpy.testing.nosetester.t->NumpyTestProgram(argv=argv, exit=False, plugins=plugins)
numpy.Tester(self,package=None,raise_warnings='release')
numpy.Tester._get_custom_doctester(self)
numpy.Tester._show_system_info(self)
numpy.Tester._test_argv(self,label,verbose,extra_argv)
numpy.Tester.bench(self,label='fast',verbose=1,extra_argv=None)
numpy.Tester.prepare_test_args(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False)
numpy.Tester.test(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,raise_warnings=None)
numpy.testing.nosetester.NoseTester(self,package=None,raise_warnings='release')
numpy.testing.nosetester.NoseTester.__init__(self,package=None,raise_warnings='release')
numpy.testing.nosetester.NoseTester._get_custom_doctester(self)
numpy.testing.nosetester.NoseTester._show_system_info(self)
numpy.testing.nosetester.NoseTester._test_argv(self,label,verbose,extra_argv)
numpy.testing.nosetester.NoseTester.bench(self,label='fast',verbose=1,extra_argv=None)
numpy.testing.nosetester.NoseTester.prepare_test_args(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False)
numpy.testing.nosetester.NoseTester.test(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,raise_warnings=None)
numpy.testing.nosetester.get_package_name(filepath)
numpy.testing.nosetester.import_nose()
numpy.testing.nosetester.run_module_suite(file_to_run=None)
numpy.testing.run_module_suite(file_to_run=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/tests/test_decorators.py----------------------------------------
numpy.testing.tests.test_decorators.DidntSkipException(Exception)
numpy.testing.tests.test_decorators.test_deprecated()
numpy.testing.tests.test_decorators.test_setastest()
numpy.testing.tests.test_decorators.test_skip_functions_callable()
numpy.testing.tests.test_decorators.test_skip_functions_hardcoded()
numpy.testing.tests.test_decorators.test_skip_generators_callable()
numpy.testing.tests.test_decorators.test_skip_generators_hardcoded()
numpy.testing.tests.test_decorators.test_slow()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/tests/test_utils.py----------------------------------------
A:numpy.testing.tests.test_utils.a->numpy.array([x, y, x, y])
A:numpy.testing.tests.test_utils.b->numpy.array([x, y, x, x])
A:numpy.testing.tests.test_utils.c->numpy.empty(2, [('floupipi', np.float), ('floupa', np.float)])
A:numpy.testing.tests.test_utils.c['floupipi']->a['floupi'].copy()
A:numpy.testing.tests.test_utils.c['floupa']->a['floupa'].copy()
A:numpy.testing.tests.test_utils.x->numpy.ones(10).astype(np.float64)
A:numpy.testing.tests.test_utils.y->numpy.array([1234.23])
A:numpy.testing.tests.test_utils.anan->numpy.array(np.nan)
A:numpy.testing.tests.test_utils.aone->numpy.array(1)
A:numpy.testing.tests.test_utils.ainf->numpy.array(np.inf)
A:numpy.testing.tests.test_utils.z->numpy.array([complex(1, 2), complex(np.nan, 1)])
A:numpy.testing.tests.test_utils.f->raises(self.e)(self.does_not_raise_exception)()
A:numpy.testing.tests.test_utils.dev->numpy.random.randn(10)
A:numpy.testing.tests.test_utils.inf->numpy.array([np.inf]).astype(dt)
A:numpy.testing.tests.test_utils.big->numpy.array([np.finfo(dt).max])
A:numpy.testing.tests.test_utils.nan->numpy.array([np.nan]).astype(dt)
A:numpy.testing.tests.test_utils.tiny->numpy.array([np.finfo(dt).tiny])
A:numpy.testing.tests.test_utils.zero->numpy.array([np.PZERO]).astype(dt)
A:numpy.testing.tests.test_utils.nzero->numpy.array([np.NZERO]).astype(dt)
numpy.testing.tests.test_TestAlmostEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_TestAlmostEqual.setUp(self)
numpy.testing.tests.test_TestAlmostEqual.test_complex(self)
numpy.testing.tests.test_TestAlmostEqual.test_complex_item(self)
numpy.testing.tests.test_TestAlmostEqual.test_inf_item(self)
numpy.testing.tests.test_TestAlmostEqual.test_nan_item(self)
numpy.testing.tests.test_TestAlmostEqual.test_simple_item(self)
numpy.testing.tests.test_TestApproxEqual(unittest.TestCase)
numpy.testing.tests.test_TestApproxEqual.setUp(self)
numpy.testing.tests.test_TestApproxEqual.test_nan_array(self)
numpy.testing.tests.test_TestApproxEqual.test_nan_items(self)
numpy.testing.tests.test_TestApproxEqual.test_simple_arrays(self)
numpy.testing.tests.test_TestApproxEqual.test_simple_items(self)
numpy.testing.tests.test_TestArrayAlmostEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_TestArrayAlmostEqual.setUp(self)
numpy.testing.tests.test_TestArrayAlmostEqual.test_inf(self)
numpy.testing.tests.test_TestArrayAlmostEqual.test_nan(self)
numpy.testing.tests.test_TestArrayAlmostEqual.test_simple(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp(unittest.TestCase)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_big_float32(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_big_float64(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_complex(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_complex2(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_simple(self)
numpy.testing.tests.test_TestArrayAlmostEqualNulp.test_simple2(self)
numpy.testing.tests.test_TestArrayEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_TestArrayEqual.setUp(self)
numpy.testing.tests.test_TestArrayEqual.test_generic_rank1(self)
numpy.testing.tests.test_TestArrayEqual.test_generic_rank3(self)
numpy.testing.tests.test_TestArrayEqual.test_nan_array(self)
numpy.testing.tests.test_TestArrayEqual.test_recarrays(self)
numpy.testing.tests.test_TestArrayEqual.test_string_arrays(self)
numpy.testing.tests.test_TestAssertAllclose(unittest.TestCase)
numpy.testing.tests.test_TestAssertAllclose.test_simple(self)
numpy.testing.tests.test_TestEqual(TestArrayEqual)
numpy.testing.tests.test_TestEqual.setUp(self)
numpy.testing.tests.test_TestEqual.test_complex(self)
numpy.testing.tests.test_TestEqual.test_complex_item(self)
numpy.testing.tests.test_TestEqual.test_inf_items(self)
numpy.testing.tests.test_TestEqual.test_nan_items(self)
numpy.testing.tests.test_TestEqual.test_negative_zero(self)
numpy.testing.tests.test_TestEqual.test_non_numeric(self)
numpy.testing.tests.test_TestRaises(unittest.TestCase)
numpy.testing.tests.test_TestRaises.does_not_raise_exception(self)
numpy.testing.tests.test_TestRaises.raises_exception(self,e)
numpy.testing.tests.test_TestRaises.setUp(self)
numpy.testing.tests.test_TestRaises.test_catch_no_raise(self)
numpy.testing.tests.test_TestRaises.test_correct_catch(self)
numpy.testing.tests.test_TestRaises.test_wrong_exception(self)
numpy.testing.tests.test_TestULP(unittest.TestCase)
numpy.testing.tests.test_TestULP.test_double(self)
numpy.testing.tests.test_TestULP.test_equal(self)
numpy.testing.tests.test_TestULP.test_inf(self)
numpy.testing.tests.test_TestULP.test_nan(self)
numpy.testing.tests.test_TestULP.test_single(self)
numpy.testing.tests.test_TestWarns(unittest.TestCase)
numpy.testing.tests.test_TestWarns.test_warn(self)
numpy.testing.tests.test_TestWarns.test_warn_wrong_warning(self)
numpy.testing.tests.test__GenericTest(object)
numpy.testing.tests.test__GenericTest._test_equal(self,a,b)
numpy.testing.tests.test__GenericTest._test_not_equal(self,a,b)
numpy.testing.tests.test__GenericTest.test_array_diffshape(self)
numpy.testing.tests.test__GenericTest.test_array_rank1_eq(self)
numpy.testing.tests.test__GenericTest.test_array_rank1_noteq(self)
numpy.testing.tests.test__GenericTest.test_array_rank2_eq(self)
numpy.testing.tests.test__GenericTest.test_objarray(self)
numpy.testing.tests.test_utils.TestAlmostEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_utils.TestAlmostEqual.setUp(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_inf_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_nan_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_simple_item(self)
numpy.testing.tests.test_utils.TestApproxEqual(unittest.TestCase)
numpy.testing.tests.test_utils.TestApproxEqual.setUp(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_arrays(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_items(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.setUp(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_inf(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_simple(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp(unittest.TestCase)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_big_float32(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_big_float64(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex2(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_simple(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_simple2(self)
numpy.testing.tests.test_utils.TestArrayEqual(_GenericTest,unittest.TestCase)
numpy.testing.tests.test_utils.TestArrayEqual.setUp(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_recarrays(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_string_arrays(self)
numpy.testing.tests.test_utils.TestAssertAllclose(unittest.TestCase)
numpy.testing.tests.test_utils.TestAssertAllclose.test_simple(self)
numpy.testing.tests.test_utils.TestEqual(TestArrayEqual)
numpy.testing.tests.test_utils.TestEqual.setUp(self)
numpy.testing.tests.test_utils.TestEqual.test_complex(self)
numpy.testing.tests.test_utils.TestEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestEqual.test_inf_items(self)
numpy.testing.tests.test_utils.TestEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestEqual.test_negative_zero(self)
numpy.testing.tests.test_utils.TestEqual.test_non_numeric(self)
numpy.testing.tests.test_utils.TestRaises(unittest.TestCase)
numpy.testing.tests.test_utils.TestRaises.does_not_raise_exception(self)
numpy.testing.tests.test_utils.TestRaises.raises_exception(self,e)
numpy.testing.tests.test_utils.TestRaises.setUp(self)
numpy.testing.tests.test_utils.TestRaises.test_catch_no_raise(self)
numpy.testing.tests.test_utils.TestRaises.test_correct_catch(self)
numpy.testing.tests.test_utils.TestRaises.test_wrong_exception(self)
numpy.testing.tests.test_utils.TestULP(unittest.TestCase)
numpy.testing.tests.test_utils.TestULP.test_double(self)
numpy.testing.tests.test_utils.TestULP.test_equal(self)
numpy.testing.tests.test_utils.TestULP.test_inf(self)
numpy.testing.tests.test_utils.TestULP.test_nan(self)
numpy.testing.tests.test_utils.TestULP.test_single(self)
numpy.testing.tests.test_utils.TestWarns(unittest.TestCase)
numpy.testing.tests.test_utils.TestWarns.test_warn(self)
numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning(self)
numpy.testing.tests.test_utils._GenericTest(object)
numpy.testing.tests.test_utils._GenericTest._test_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest._test_not_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest.test_array_diffshape(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_noteq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank2_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_objarray(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/testing/tests/test_doctesting.py----------------------------------------
numpy.testing.tests.test_doctesting.check_empty_output()
numpy.testing.tests.test_doctesting.check_implicit_np()
numpy.testing.tests.test_doctesting.check_random_directive()
numpy.testing.tests.test_doctesting.check_skip()
numpy.testing.tests.test_doctesting.check_whitespace_enabled()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/polytemplate.py----------------------------------------
A:numpy.polynomial.polytemplate.polytemplate->string.Template('\nfrom __future__ import division, absolute_import, print_function\nimport numpy as np\nimport warnings\nfrom . import polyutils as pu\n\nclass $name(pu.PolyBase) :\n    """A $name series class.\n\n    $name instances provide the standard Python numerical methods \'+\',\n    \'-\', \'*\', \'//\', \'%\', \'divmod\', \'**\', and \'()\' as well as the listed\n    methods.\n\n    Parameters\n    ----------\n    coef : array_like\n        $name coefficients, in increasing order.  For example,\n        ``(1, 2, 3)`` implies ``P_0 + 2P_1 + 3P_2`` where the\n        ``P_i`` are a graded polynomial basis.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped to\n        the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is $domain.\n    window : (2,) array_like, optional\n        Window, see ``domain`` for its use. The default value is $domain.\n        .. versionadded:: 1.6.0\n\n    Attributes\n    ----------\n    coef : (N,) ndarray\n        $name coefficients, from low to high.\n    domain : (2,) ndarray\n        Domain that is mapped to ``window``.\n    window : (2,) ndarray\n        Window that ``domain`` is mapped to.\n\n    Class Attributes\n    ----------------\n    maxpower : int\n        Maximum power allowed, i.e., the largest number ``n`` such that\n        ``p(x)**n`` is allowed. This is to limit runaway polynomial size.\n    domain : (2,) ndarray\n        Default domain of the class.\n    window : (2,) ndarray\n        Default window of the class.\n\n    Notes\n    -----\n    It is important to specify the domain in many cases, for instance in\n    fitting data, because many of the important properties of the\n    polynomial basis only hold in a specified interval and consequently\n    the data must be mapped into that interval in order to benefit.\n\n    Examples\n    --------\n\n    """\n    # Limit runaway size. T_n^m has degree n*2^m\n    maxpower = 16\n    # Default domain\n    domain = np.array($domain)\n    # Default window\n    window = np.array($domain)\n    # Don\'t let participate in array operations. Value doesn\'t matter.\n    __array_priority__ = 1000\n    # Not hashable\n    __hash__ = None\n\n    def has_samecoef(self, other):\n        """Check if coefficients match.\n\n        Parameters\n        ----------\n        other : class instance\n            The other class must have the ``coef`` attribute.\n\n        Returns\n        -------\n        bool : boolean\n            True if the coefficients are the same, False otherwise.\n\n        Notes\n        -----\n        .. versionadded:: 1.6.0\n\n        """\n        if len(self.coef) != len(other.coef):\n            return False\n        elif not np.all(self.coef == other.coef):\n            return False\n        else:\n            return True\n\n    def has_samedomain(self, other):\n        """Check if domains match.\n\n        Parameters\n        ----------\n        other : class instance\n            The other class must have the ``domain`` attribute.\n\n        Returns\n        -------\n        bool : boolean\n            True if the domains are the same, False otherwise.\n\n        Notes\n        -----\n        .. versionadded:: 1.6.0\n\n        """\n        return np.all(self.domain == other.domain)\n\n    def has_samewindow(self, other):\n        """Check if windows match.\n\n        Parameters\n        ----------\n        other : class instance\n            The other class must have the ``window`` attribute.\n\n        Returns\n        -------\n        bool : boolean\n            True if the windows are the same, False otherwise.\n\n        Notes\n        -----\n        .. versionadded:: 1.6.0\n\n        """\n        return np.all(self.window == other.window)\n\n    def has_sametype(self, other):\n        """Check if types match.\n\n        Parameters\n        ----------\n        other : object\n            Class instance.\n\n        Returns\n        -------\n        bool : boolean\n            True if other is same class as self\n\n        Notes\n        -----\n        .. versionadded:: 1.7.0\n\n        """\n        return isinstance(other, self.__class__)\n\n    def __init__(self, coef, domain=$domain, window=$domain) :\n        [coef, dom, win] = pu.as_series([coef, domain, window], trim=False)\n        if len(dom) != 2 :\n            raise ValueError("Domain has wrong number of elements.")\n        if len(win) != 2 :\n            raise ValueError("Window has wrong number of elements.")\n        self.coef = coef\n        self.domain = dom\n        self.window = win\n\n    def __repr__(self):\n        format = "%s(%s, %s, %s)"\n        coef = repr(self.coef)[6:-1]\n        domain = repr(self.domain)[6:-1]\n        window = repr(self.window)[6:-1]\n        return format % (\'$name\', coef, domain, window)\n\n    def __str__(self) :\n        format = "%s(%s)"\n        coef = str(self.coef)\n        return format % (\'$nick\', coef)\n\n    # Pickle and copy\n\n    def __getstate__(self) :\n        ret = self.__dict__.copy()\n        ret[\'coef\'] = self.coef.copy()\n        ret[\'domain\'] = self.domain.copy()\n        ret[\'window\'] = self.window.copy()\n        return ret\n\n    def __setstate__(self, dict) :\n        self.__dict__ = dict\n\n    # Call\n\n    def __call__(self, arg) :\n        off, scl = pu.mapparms(self.domain, self.window)\n        arg = off + scl*arg\n        return ${nick}val(arg, self.coef)\n\n    def __iter__(self) :\n        return iter(self.coef)\n\n    def __len__(self) :\n        return len(self.coef)\n\n    # Numeric properties.\n\n    def __neg__(self) :\n        return self.__class__(-self.coef, self.domain, self.window)\n\n    def __pos__(self) :\n        return self\n\n    def __add__(self, other) :\n        """Returns sum"""\n        if isinstance(other, pu.PolyBase):\n            if not self.has_sametype(other):\n                raise TypeError("Polynomial types differ")\n            elif not self.has_samedomain(other):\n                raise TypeError("Domains differ")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows differ")\n            else:\n                coef = ${nick}add(self.coef, other.coef)\n        else :\n            try :\n                coef = ${nick}add(self.coef, other)\n            except :\n                return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __sub__(self, other) :\n        """Returns difference"""\n        if isinstance(other, pu.PolyBase):\n            if not self.has_sametype(other):\n                raise TypeError("Polynomial types differ")\n            elif not self.has_samedomain(other):\n                raise TypeError("Domains differ")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows differ")\n            else:\n                coef = ${nick}sub(self.coef, other.coef)\n        else :\n            try :\n                coef = ${nick}sub(self.coef, other)\n            except :\n                return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __mul__(self, other) :\n        """Returns product"""\n        if isinstance(other, pu.PolyBase):\n            if not self.has_sametype(other):\n                raise TypeError("Polynomial types differ")\n            elif not self.has_samedomain(other):\n                raise TypeError("Domains differ")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows differ")\n            else:\n                coef = ${nick}mul(self.coef, other.coef)\n        else :\n            try :\n                coef = ${nick}mul(self.coef, other)\n            except :\n                return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __div__(self, other):\n        # set to __floordiv__,  /, for now.\n        return self.__floordiv__(other)\n\n    def __truediv__(self, other) :\n        # there is no true divide if the rhs is not a scalar, although it\n        # could return the first n elements of an infinite series.\n        # It is hard to see where n would come from, though.\n        if np.isscalar(other) :\n            # this might be overly restrictive\n            coef = self.coef/other\n            return self.__class__(coef, self.domain, self.window)\n        else :\n            return NotImplemented\n\n    def __floordiv__(self, other) :\n        """Returns the quotient."""\n        if isinstance(other, pu.PolyBase):\n            if not self.has_sametype(other):\n                raise TypeError("Polynomial types differ")\n            elif not self.has_samedomain(other):\n                raise TypeError("Domains differ")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows differ")\n            else:\n                quo, rem = ${nick}div(self.coef, other.coef)\n        else :\n            try :\n                quo, rem = ${nick}div(self.coef, other)\n            except :\n                return NotImplemented\n        return self.__class__(quo, self.domain, self.window)\n\n    def __mod__(self, other) :\n        """Returns the remainder."""\n        if isinstance(other, pu.PolyBase):\n            if not self.has_sametype(other):\n                raise TypeError("Polynomial types differ")\n            elif not self.has_samedomain(other):\n                raise TypeError("Domains differ")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows differ")\n            else:\n                quo, rem = ${nick}div(self.coef, other.coef)\n        else :\n            try :\n                quo, rem = ${nick}div(self.coef, other)\n            except :\n                return NotImplemented\n        return self.__class__(rem, self.domain, self.window)\n\n    def __divmod__(self, other) :\n        """Returns quo, remainder"""\n        if isinstance(other, self.__class__) :\n            if not self.has_samedomain(other):\n                raise TypeError("Domains are not equal")\n            elif not self.has_samewindow(other):\n                raise TypeError("Windows are not equal")\n            else:\n                quo, rem = ${nick}div(self.coef, other.coef)\n        else :\n            try :\n                quo, rem = ${nick}div(self.coef, other)\n            except :\n                return NotImplemented\n        quo = self.__class__(quo, self.domain, self.window)\n        rem = self.__class__(rem, self.domain, self.window)\n        return quo, rem\n\n    def __pow__(self, other) :\n        try :\n            coef = ${nick}pow(self.coef, other, maxpower = self.maxpower)\n        except :\n            raise\n        return self.__class__(coef, self.domain, self.window)\n\n    def __radd__(self, other) :\n        try :\n            coef = ${nick}add(other, self.coef)\n        except :\n            return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __rsub__(self, other):\n        try :\n            coef = ${nick}sub(other, self.coef)\n        except :\n            return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __rmul__(self, other) :\n        try :\n            coef = ${nick}mul(other, self.coef)\n        except :\n            return NotImplemented\n        return self.__class__(coef, self.domain, self.window)\n\n    def __rdiv__(self, other):\n        # set to __floordiv__ /.\n        return self.__rfloordiv__(other)\n\n    def __rtruediv__(self, other) :\n        # there is no true divide if the rhs is not a scalar, although it\n        # could return the first n elements of an infinite series.\n        # It is hard to see where n would come from, though.\n        if len(self.coef) == 1 :\n            try :\n                quo, rem = ${nick}div(other, self.coef[0])\n            except :\n                return NotImplemented\n        return self.__class__(quo, self.domain, self.window)\n\n    def __rfloordiv__(self, other) :\n        try :\n            quo, rem = ${nick}div(other, self.coef)\n        except :\n            return NotImplemented\n        return self.__class__(quo, self.domain, self.window)\n\n    def __rmod__(self, other) :\n        try :\n            quo, rem = ${nick}div(other, self.coef)\n        except :\n            return NotImplemented\n        return self.__class__(rem, self.domain, self.window)\n\n    def __rdivmod__(self, other) :\n        try :\n            quo, rem = ${nick}div(other, self.coef)\n        except :\n            return NotImplemented\n        quo = self.__class__(quo, self.domain, self.window)\n        rem = self.__class__(rem, self.domain, self.window)\n        return quo, rem\n\n    # Enhance me\n    # some augmented arithmetic operations could be added here\n\n    def __eq__(self, other) :\n        res = isinstance(other, self.__class__)                 and self.has_samecoef(other)                 and self.has_samedomain(other)                 and self.has_samewindow(other)\n        return res\n\n    def __ne__(self, other) :\n        return not self.__eq__(other)\n\n    #\n    # Extra methods.\n    #\n\n    def copy(self) :\n        """Return a copy.\n\n        Return a copy of the current $name instance.\n\n        Returns\n        -------\n        new_instance : $name\n            Copy of current instance.\n\n        """\n        return self.__class__(self.coef, self.domain, self.window)\n\n    def degree(self) :\n        """The degree of the series.\n\n        Notes\n        -----\n        .. versionadded:: 1.5.0\n\n        """\n        return len(self) - 1\n\n    def cutdeg(self, deg) :\n        """Truncate series to the given degree.\n\n        Reduce the degree of the $name series to `deg` by discarding the\n        high order terms. If `deg` is greater than the current degree a\n        copy of the current series is returned. This can be useful in least\n        squares where the coefficients of the high degree terms may be very\n        small.\n\n        Parameters\n        ----------\n        deg : non-negative int\n            The series is reduced to degree `deg` by discarding the high\n            order terms. The value of `deg` must be a non-negative integer.\n\n        Returns\n        -------\n        new_instance : $name\n            New instance of $name with reduced degree.\n\n        Notes\n        -----\n        .. versionadded:: 1.5.0\n\n        """\n        return self.truncate(deg + 1)\n\n    def trim(self, tol=0) :\n        """Remove small leading coefficients\n\n        Remove leading coefficients until a coefficient is reached whose\n        absolute value greater than `tol` or the beginning of the series is\n        reached. If all the coefficients would be removed the series is set to\n        ``[0]``. A new $name instance is returned with the new coefficients.\n        The current instance remains unchanged.\n\n        Parameters\n        ----------\n        tol : non-negative number.\n            All trailing coefficients less than `tol` will be removed.\n\n        Returns\n        -------\n        new_instance : $name\n            Contains the new set of coefficients.\n\n        """\n        coef = pu.trimcoef(self.coef, tol)\n        return self.__class__(coef, self.domain, self.window)\n\n    def truncate(self, size) :\n        """Truncate series to length `size`.\n\n        Reduce the $name series to length `size` by discarding the high\n        degree terms. The value of `size` must be a positive integer. This\n        can be useful in least squares where the coefficients of the\n        high degree terms may be very small.\n\n        Parameters\n        ----------\n        size : positive int\n            The series is reduced to length `size` by discarding the high\n            degree terms. The value of `size` must be a positive integer.\n\n        Returns\n        -------\n        new_instance : $name\n            New instance of $name with truncated coefficients.\n\n        """\n        isize = int(size)\n        if isize != size or isize < 1 :\n            raise ValueError("size must be a positive integer")\n        if isize >= len(self.coef) :\n            coef = self.coef\n        else :\n            coef = self.coef[:isize]\n        return self.__class__(coef, self.domain, self.window)\n\n    def convert(self, domain=None, kind=None, window=None) :\n        """Convert to different class and/or domain.\n\n        Parameters\n        ----------\n        domain : array_like, optional\n            The domain of the converted series. If the value is None,\n            the default domain of `kind` is used.\n        kind : class, optional\n            The polynomial series type class to which the current instance\n            should be converted. If kind is None, then the class of the\n            current instance is used.\n        window : array_like, optional\n            The window of the converted series. If the value is None,\n            the default window of `kind` is used.\n\n        Returns\n        -------\n        new_series_instance : `kind`\n            The returned class can be of different type than the current\n            instance and/or have a different domain.\n\n        Notes\n        -----\n        Conversion between domains and class types can result in\n        numerically ill defined series.\n\n        Examples\n        --------\n\n        """\n        if kind is None:\n            kind = $name\n        if domain is None:\n            domain = kind.domain\n        if window is None:\n            window = kind.window\n        return self(kind.identity(domain, window=window))\n\n    def mapparms(self) :\n        """Return the mapping parameters.\n\n        The returned values define a linear map ``off + scl*x`` that is\n        applied to the input arguments before the series is evaluated. The\n        map depends on the ``domain`` and ``window``; if the current\n        ``domain`` is equal to the ``window`` the resulting map is the\n        identity.  If the coefficients of the ``$name`` instance are to be\n        used by themselves outside this class, then the linear function\n        must be substituted for the ``x`` in the standard representation of\n        the base polynomials.\n\n        Returns\n        -------\n        off, scl : floats or complex\n            The mapping function is defined by ``off + scl*x``.\n\n        Notes\n        -----\n        If the current domain is the interval ``[l_1, r_1]`` and the window\n        is ``[l_2, r_2]``, then the linear mapping function ``L`` is\n        defined by the equations::\n\n            L(l_1) = l_2\n            L(r_1) = r_2\n\n        """\n        return pu.mapparms(self.domain, self.window)\n\n    def integ(self, m=1, k=[], lbnd=None) :\n        """Integrate.\n\n        Return an instance of $name that is the definite integral of the\n        current series. Refer to `${nick}int` for full documentation.\n\n        Parameters\n        ----------\n        m : non-negative int\n            The number of integrations to perform.\n        k : array_like\n            Integration constants. The first constant is applied to the\n            first integration, the second to the second, and so on. The\n            list of values must less than or equal to `m` in length and any\n            missing values are set to zero.\n        lbnd : Scalar\n            The lower bound of the definite integral.\n\n        Returns\n        -------\n        integral : $name\n            The integral of the series using the same domain.\n\n        See Also\n        --------\n        ${nick}int : similar function.\n        ${nick}der : similar function for derivative.\n\n        """\n        off, scl = self.mapparms()\n        if lbnd is None :\n            lbnd = 0\n        else :\n            lbnd = off + scl*lbnd\n        coef = ${nick}int(self.coef, m, k, lbnd, 1./scl)\n        return self.__class__(coef, self.domain, self.window)\n\n    def deriv(self, m=1):\n        """Differentiate.\n\n        Return an instance of $name that is the derivative of the current\n        series.  Refer to `${nick}der` for full documentation.\n\n        Parameters\n        ----------\n        m : non-negative int\n            The number of integrations to perform.\n\n        Returns\n        -------\n        derivative : $name\n            The derivative of the series using the same domain.\n\n        See Also\n        --------\n        ${nick}der : similar function.\n        ${nick}int : similar function for integration.\n\n        """\n        off, scl = self.mapparms()\n        coef = ${nick}der(self.coef, m, scl)\n        return self.__class__(coef, self.domain, self.window)\n\n    def roots(self) :\n        """Return list of roots.\n\n        Return ndarray of roots for this series. See `${nick}roots` for\n        full documentation. Note that the accuracy of the roots is likely to\n        decrease the further outside the domain they lie.\n\n        See Also\n        --------\n        ${nick}roots : similar function\n        ${nick}fromroots : function to go generate series from roots.\n\n        """\n        roots = ${nick}roots(self.coef)\n        return pu.mapdomain(roots, self.window, self.domain)\n\n    def linspace(self, n=100, domain=None):\n        """Return x,y values at equally spaced points in domain.\n\n        Returns x, y values at `n` linearly spaced points across domain.\n        Here y is the value of the polynomial at the points x. By default\n        the domain is the same as that of the $name instance.  This method\n        is intended mostly as a plotting aid.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of point pairs to return. The default value is 100.\n        domain : {None, array_like}\n            If not None, the specified domain is used instead of that of\n            the calling instance. It should be of the form ``[beg,end]``.\n            The default is None.\n\n        Returns\n        -------\n        x, y : ndarrays\n            ``x`` is equal to linspace(self.domain[0], self.domain[1], n)\n            ``y`` is the polynomial evaluated at ``x``.\n\n        .. versionadded:: 1.5.0\n\n        """\n        if domain is None:\n            domain = self.domain\n        x = np.linspace(domain[0], domain[1], n)\n        y = self(x)\n        return x, y\n\n\n\n    @staticmethod\n    def fit(x, y, deg, domain=None, rcond=None, full=False, w=None,\n        window=$domain):\n        """Least squares fit to data.\n\n        Return a `$name` instance that is the least squares fit to the data\n        `y` sampled at `x`. Unlike `${nick}fit`, the domain of the returned\n        instance can be specified and this will often result in a superior\n        fit with less chance of ill conditioning. Support for NA was added\n        in version 1.7.0. See `${nick}fit` for full documentation of the\n        implementation.\n\n        Parameters\n        ----------\n        x : array_like, shape (M,)\n            x-coordinates of the M sample points ``(x[i], y[i])``.\n        y : array_like, shape (M,) or (M, K)\n            y-coordinates of the sample points. Several data sets of sample\n            points sharing the same x-coordinates can be fitted at once by\n            passing in a 2D-array that contains one dataset per column.\n        deg : int\n            Degree of the fitting polynomial.\n        domain : {None, [beg, end], []}, optional\n            Domain to use for the returned $name instance. If ``None``,\n            then a minimal domain that covers the points `x` is chosen.  If\n            ``[]`` the default domain ``$domain`` is used. The default\n            value is $domain in numpy 1.4.x and ``None`` in later versions.\n            The ``\'[]`` value was added in numpy 1.5.0.\n        rcond : float, optional\n            Relative condition number of the fit. Singular values smaller\n            than this relative to the largest singular value will be\n            ignored. The default value is len(x)*eps, where eps is the\n            relative precision of the float type, about 2e-16 in most\n            cases.\n        full : bool, optional\n            Switch determining nature of return value. When it is False\n            (the default) just the coefficients are returned, when True\n            diagnostic information from the singular value decomposition is\n            also returned.\n        w : array_like, shape (M,), optional\n            Weights. If not None the contribution of each point\n            ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n            weights are chosen so that the errors of the products\n            ``w[i]*y[i]`` all have the same variance.  The default value is\n            None.\n            .. versionadded:: 1.5.0\n        window : {[beg, end]}, optional\n            Window to use for the returned $name instance. The default\n            value is ``$domain``\n            .. versionadded:: 1.6.0\n\n        Returns\n        -------\n        least_squares_fit : instance of $name\n            The $name instance is the least squares fit to the data and\n            has the domain specified in the call.\n\n        [residuals, rank, singular_values, rcond] : only if `full` = True\n            Residuals of the least squares fit, the effective rank of the\n            scaled Vandermonde matrix and its singular values, and the\n            specified value of `rcond`. For more details, see\n            `linalg.lstsq`.\n\n        See Also\n        --------\n        ${nick}fit : similar function\n\n        """\n        if domain is None:\n            domain = pu.getdomain(x)\n        elif domain == []:\n            domain = $domain\n\n        if window == []:\n            window = $domain\n\n        xnew = pu.mapdomain(x, domain, window)\n        res = ${nick}fit(xnew, y, deg, w=w, rcond=rcond, full=full)\n        if full :\n            [coef, status] = res\n            return $name(coef, domain=domain, window=window), status\n        else :\n            coef = res\n            return $name(coef, domain=domain, window=window)\n\n    @staticmethod\n    def fromroots(roots, domain=$domain, window=$domain) :\n        """Return $name instance with specified roots.\n\n        Returns an instance of $name representing the product\n        ``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is the\n        list of roots.\n\n        Parameters\n        ----------\n        roots : array_like\n            List of roots.\n        domain : {array_like, None}, optional\n            Domain for the resulting instance of $name. If none the domain\n            is the interval from the smallest root to the largest. The\n            default is $domain.\n        window : array_like, optional\n            Window for the resulting instance of $name. The default value\n            is $domain.\n\n        Returns\n        -------\n        object : $name instance\n            Series with the specified roots.\n\n        See Also\n        --------\n        ${nick}fromroots : equivalent function\n\n        """\n        [roots] = pu.as_series([roots], trim=False)\n        if domain is None :\n            domain = pu.getdomain(roots)\n        deg = len(roots)\n        off, scl = pu.mapparms(domain, window)\n        rnew = off + scl*roots\n        coef = ${nick}fromroots(rnew) / scl**deg\n        return $name(coef, domain=domain, window=window)\n\n    @staticmethod\n    def identity(domain=$domain, window=$domain) :\n        """Identity function.\n\n        If ``p`` is the returned $name object, then ``p(x) == x`` for all\n        values of x.\n\n        Parameters\n        ----------\n        domain : array_like\n            The resulting array must be of the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the domain.\n        window : array_like\n            The resulting array must be if the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the window.\n\n        Returns\n        -------\n        identity : $name instance\n\n        """\n        off, scl = pu.mapparms(window, domain)\n        coef = ${nick}line(off, scl)\n        return $name(coef, domain, window)\n\n    @staticmethod\n    def basis(deg, domain=$domain, window=$domain):\n        """$name polynomial of degree `deg`.\n\n        Returns an instance of the $name polynomial of degree `d`.\n\n        Parameters\n        ----------\n        deg : int\n            Degree of the $name polynomial. Must be >= 0.\n        domain : array_like\n            The resulting array must be of the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the domain.\n        window : array_like\n            The resulting array must be if the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the window.\n\n        Returns\n        p : $name instance\n\n        Notes\n        -----\n        .. versionadded:: 1.7.0\n\n        """\n        ideg = int(deg)\n        if ideg != deg or ideg < 0:\n            raise ValueError("deg must be non-negative integer")\n        return $name([0]*ideg + [1], domain, window)\n\n    @staticmethod\n    def cast(series, domain=$domain, window=$domain):\n        """Convert instance to equivalent $name series.\n\n        The `series` is expected to be an instance of some polynomial\n        series of one of the types supported by by the numpy.polynomial\n        module, but could be some other class that supports the convert\n        method.\n\n        Parameters\n        ----------\n        series : series\n            The instance series to be converted.\n        domain : array_like\n            The resulting array must be of the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the domain.\n        window : array_like\n            The resulting array must be if the form ``[beg, end]``, where\n            ``beg`` and ``end`` are the endpoints of the window.\n\n        Returns\n        p : $name instance\n            A $name series equal to the `poly` series.\n\n        See Also\n        --------\n        convert -- similar instance method\n\n        Notes\n        -----\n        .. versionadded:: 1.7.0\n\n        """\n        return series.convert(domain, $name, window)\n\n')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/chebyshev.py----------------------------------------
A:numpy.polynomial.chebyshev.zs->_cseries_to_zseries(c)
A:numpy.polynomial.chebyshev.c->chebval(z, c)
A:numpy.polynomial.chebyshev.z1->_cseries_to_zseries(c1)
A:numpy.polynomial.chebyshev.z2->_cseries_to_zseries(c2)
A:numpy.polynomial.chebyshev.len1->len(z1)
A:numpy.polynomial.chebyshev.len2->len(z2)
A:numpy.polynomial.chebyshev.quo->pu.trimseq(_zseries_to_cseries(quo))
A:numpy.polynomial.chebyshev.rem->pu.trimseq(_zseries_to_cseries(rem))
A:numpy.polynomial.chebyshev.ns->numpy.array([-1, 0, 1], dtype=zs.dtype)
A:numpy.polynomial.chebyshev.(d, r)->_zseries_div(zs, ns)
A:numpy.polynomial.chebyshev.[pol]->pu.as_series([pol])
A:numpy.polynomial.chebyshev.res->chebadd(chebmulx(res), pol[i])
A:numpy.polynomial.chebyshev.[c]->pu.as_series([c])
A:numpy.polynomial.chebyshev.n->len(c)
A:numpy.polynomial.chebyshev.c0->polysub(c[i - 2], c1)
A:numpy.polynomial.chebyshev.c1->polyadd(tmp, polymulx(c1) * 2)
A:numpy.polynomial.chebyshev.chebdomain->numpy.array([-1, 1])
A:numpy.polynomial.chebyshev.chebzero->numpy.array([0])
A:numpy.polynomial.chebyshev.chebone->numpy.array([1])
A:numpy.polynomial.chebyshev.chebx->numpy.array([0, 1])
A:numpy.polynomial.chebyshev.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.chebyshev.(m, r)->divmod(n, 2)
A:numpy.polynomial.chebyshev.tmp[0]->chebmul(tmp[0], p[-1])
A:numpy.polynomial.chebyshev.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.chebyshev.prd->numpy.convolve(prd, zs)
A:numpy.polynomial.chebyshev.ret->_zseries_to_cseries(prd)
A:numpy.polynomial.chebyshev.lc1->len(c1)
A:numpy.polynomial.chebyshev.lc2->len(c2)
A:numpy.polynomial.chebyshev.(quo, rem)->_zseries_div(z1, z2)
A:numpy.polynomial.chebyshev.power->int(pow)
A:numpy.polynomial.chebyshev.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.x->numpy.linspace(-np.pi, 0, _npts)
A:numpy.polynomial.chebyshev.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.chebyshev.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.chebyshev.ideg->int(deg)
A:numpy.polynomial.chebyshev.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.chebyshev.vx->chebvander(x, degx)
A:numpy.polynomial.chebyshev.vy->chebvander(y, degy)
A:numpy.polynomial.chebyshev.vz->chebvander(z, degz)
A:numpy.polynomial.chebyshev.scl->numpy.array([1.0] + [np.sqrt(0.5)] * (n - 1))
A:numpy.polynomial.chebyshev.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.chebyshev.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.chebyshev.top[0]->numpy.sqrt(0.5)
A:numpy.polynomial.chebyshev.m->chebcompanion(c)
A:numpy.polynomial.chebyshev.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.chebyshev._npts->int(npts)
numpy.polynomial.chebyshev._cseries_to_zseries(c)
numpy.polynomial.chebyshev._zseries_der(zs)
numpy.polynomial.chebyshev._zseries_div(z1,z2)
numpy.polynomial.chebyshev._zseries_int(zs)
numpy.polynomial.chebyshev._zseries_mul(z1,z2)
numpy.polynomial.chebyshev._zseries_to_cseries(zs)
numpy.polynomial.chebyshev.cheb2poly(c)
numpy.polynomial.chebyshev.chebadd(c1,c2)
numpy.polynomial.chebyshev.chebcompanion(c)
numpy.polynomial.chebyshev.chebder(c,m=1,scl=1,axis=0)
numpy.polynomial.chebyshev.chebdiv(c1,c2)
numpy.polynomial.chebyshev.chebfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.chebyshev.chebfromroots(roots)
numpy.polynomial.chebyshev.chebgauss(deg)
numpy.polynomial.chebyshev.chebgrid2d(x,y,c)
numpy.polynomial.chebyshev.chebgrid3d(x,y,z,c)
numpy.polynomial.chebyshev.chebint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.chebyshev.chebline(off,scl)
numpy.polynomial.chebyshev.chebmul(c1,c2)
numpy.polynomial.chebyshev.chebmulx(c)
numpy.polynomial.chebyshev.chebpow(c,pow,maxpower=16)
numpy.polynomial.chebyshev.chebpts1(npts)
numpy.polynomial.chebyshev.chebpts2(npts)
numpy.polynomial.chebyshev.chebroots(c)
numpy.polynomial.chebyshev.chebsub(c1,c2)
numpy.polynomial.chebyshev.chebval(x,c,tensor=True)
numpy.polynomial.chebyshev.chebval2d(x,y,c)
numpy.polynomial.chebyshev.chebval3d(x,y,z,c)
numpy.polynomial.chebyshev.chebvander(x,deg)
numpy.polynomial.chebyshev.chebvander2d(x,y,deg)
numpy.polynomial.chebyshev.chebvander3d(x,y,z,deg)
numpy.polynomial.chebyshev.chebweight(x)
numpy.polynomial.chebyshev.poly2cheb(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/hermite_e.py----------------------------------------
A:numpy.polynomial.hermite_e.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite_e.res->hermeadd(hermemulx(res), pol[i])
A:numpy.polynomial.hermite_e.[c]->pu.as_series([c])
A:numpy.polynomial.hermite_e.n->len(c)
A:numpy.polynomial.hermite_e.c0->hermesub(c[-i] * xs, c1 * (nd - 1))
A:numpy.polynomial.hermite_e.c1->hermeadd(tmp, hermemulx(c1))
A:numpy.polynomial.hermite_e.hermedomain->numpy.array([-1, 1])
A:numpy.polynomial.hermite_e.hermezero->numpy.array([0])
A:numpy.polynomial.hermite_e.hermeone->numpy.array([1])
A:numpy.polynomial.hermite_e.hermex->numpy.array([0, 1])
A:numpy.polynomial.hermite_e.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.hermite_e.(m, r)->divmod(n, 2)
A:numpy.polynomial.hermite_e.tmp[0]->hermemul(tmp[0], p[-1])
A:numpy.polynomial.hermite_e.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite_e.prd->hermemul(prd, c)
A:numpy.polynomial.hermite_e.nd->len(c)
A:numpy.polynomial.hermite_e.lc1->len(c1)
A:numpy.polynomial.hermite_e.lc2->len(c2)
A:numpy.polynomial.hermite_e.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.hermite_e.p->hermemul([0] * i + [1], c2)
A:numpy.polynomial.hermite_e.power->int(pow)
A:numpy.polynomial.hermite_e.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.hermite_e.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.x->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite_e.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.hermite_e.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.hermite_e.ideg->int(deg)
A:numpy.polynomial.hermite_e.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite_e.vx->hermevander(x, degx)
A:numpy.polynomial.hermite_e.vy->hermevander(y, degy)
A:numpy.polynomial.hermite_e.vz->hermevander(z, degz)
A:numpy.polynomial.hermite_e.scl->numpy.multiply.accumulate(scl)
A:numpy.polynomial.hermite_e.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.hermite_e.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite_e.top[...]->numpy.sqrt(np.arange(1, n))
A:numpy.polynomial.hermite_e.m->hermecompanion(c)
A:numpy.polynomial.hermite_e.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite_e.dy->hermeval(x, c)
A:numpy.polynomial.hermite_e.df->hermeval(x, hermeder(c))
A:numpy.polynomial.hermite_e.fm->hermeval(x, c[1:])
A:numpy.polynomial.hermite_e.w->numpy.exp(-0.5 * x ** 2)
numpy.polynomial.hermite_e.herme2poly(c)
numpy.polynomial.hermite_e.hermeadd(c1,c2)
numpy.polynomial.hermite_e.hermecompanion(c)
numpy.polynomial.hermite_e.hermeder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite_e.hermediv(c1,c2)
numpy.polynomial.hermite_e.hermefit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.hermite_e.hermegauss(deg)
numpy.polynomial.hermite_e.hermegrid2d(x,y,c)
numpy.polynomial.hermite_e.hermegrid3d(x,y,z,c)
numpy.polynomial.hermite_e.hermeint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite_e.hermeline(off,scl)
numpy.polynomial.hermite_e.hermemul(c1,c2)
numpy.polynomial.hermite_e.hermemulx(c)
numpy.polynomial.hermite_e.hermepow(c,pow,maxpower=16)
numpy.polynomial.hermite_e.hermeroots(c)
numpy.polynomial.hermite_e.hermesub(c1,c2)
numpy.polynomial.hermite_e.hermeval(x,c,tensor=True)
numpy.polynomial.hermite_e.hermeval2d(x,y,c)
numpy.polynomial.hermite_e.hermeval3d(x,y,z,c)
numpy.polynomial.hermite_e.hermevander(x,deg)
numpy.polynomial.hermite_e.hermevander2d(x,y,deg)
numpy.polynomial.hermite_e.hermevander3d(x,y,z,deg)
numpy.polynomial.hermite_e.hermeweight(x)
numpy.polynomial.hermite_e.poly2herme(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/hermite.py----------------------------------------
A:numpy.polynomial.hermite.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite.res->hermadd(hermmulx(res), pol[i])
A:numpy.polynomial.hermite.[c]->pu.as_series([c])
A:numpy.polynomial.hermite.n->len(c)
A:numpy.polynomial.hermite.c0->hermsub(c[-i] * xs, c1 * (2 * (nd - 1)))
A:numpy.polynomial.hermite.c1->hermadd(tmp, hermmulx(c1) * 2)
A:numpy.polynomial.hermite.hermdomain->numpy.array([-1, 1])
A:numpy.polynomial.hermite.hermzero->numpy.array([0])
A:numpy.polynomial.hermite.hermone->numpy.array([1])
A:numpy.polynomial.hermite.hermx->numpy.array([0, 1 / 2])
A:numpy.polynomial.hermite.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.hermite.(m, r)->divmod(n, 2)
A:numpy.polynomial.hermite.tmp[0]->hermmul(tmp[0], p[-1])
A:numpy.polynomial.hermite.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite.prd->hermmul(prd, c)
A:numpy.polynomial.hermite.nd->len(c)
A:numpy.polynomial.hermite.lc1->len(c1)
A:numpy.polynomial.hermite.lc2->len(c2)
A:numpy.polynomial.hermite.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.hermite.p->hermmul([0] * i + [1], c2)
A:numpy.polynomial.hermite.power->int(pow)
A:numpy.polynomial.hermite.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.hermite.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.x->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.hermite.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.hermite.ideg->int(deg)
A:numpy.polynomial.hermite.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite.vx->hermvander(x, degx)
A:numpy.polynomial.hermite.vy->hermvander(y, degy)
A:numpy.polynomial.hermite.vz->hermvander(z, degz)
A:numpy.polynomial.hermite.scl->numpy.multiply.accumulate(scl)
A:numpy.polynomial.hermite.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.hermite.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite.top[...]->numpy.sqrt(0.5 * np.arange(1, n))
A:numpy.polynomial.hermite.m->hermcompanion(c)
A:numpy.polynomial.hermite.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite.dy->hermval(x, c)
A:numpy.polynomial.hermite.df->hermval(x, hermder(c))
A:numpy.polynomial.hermite.fm->hermval(x, c[1:])
A:numpy.polynomial.hermite.w->numpy.exp(-x ** 2)
numpy.polynomial.hermite.herm2poly(c)
numpy.polynomial.hermite.hermadd(c1,c2)
numpy.polynomial.hermite.hermcompanion(c)
numpy.polynomial.hermite.hermder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite.hermdiv(c1,c2)
numpy.polynomial.hermite.hermfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.hermite.hermgauss(deg)
numpy.polynomial.hermite.hermgrid2d(x,y,c)
numpy.polynomial.hermite.hermgrid3d(x,y,z,c)
numpy.polynomial.hermite.hermint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite.hermline(off,scl)
numpy.polynomial.hermite.hermmul(c1,c2)
numpy.polynomial.hermite.hermmulx(c)
numpy.polynomial.hermite.hermpow(c,pow,maxpower=16)
numpy.polynomial.hermite.hermroots(c)
numpy.polynomial.hermite.hermsub(c1,c2)
numpy.polynomial.hermite.hermval(x,c,tensor=True)
numpy.polynomial.hermite.hermval2d(x,y,c)
numpy.polynomial.hermite.hermval3d(x,y,z,c)
numpy.polynomial.hermite.hermvander(x,deg)
numpy.polynomial.hermite.hermvander2d(x,y,deg)
numpy.polynomial.hermite.hermvander3d(x,y,z,deg)
numpy.polynomial.hermite.hermweight(x)
numpy.polynomial.hermite.poly2herm(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/legendre.py----------------------------------------
A:numpy.polynomial.legendre.[pol]->pu.as_series([pol])
A:numpy.polynomial.legendre.res->legadd(legmulx(res), pol[i])
A:numpy.polynomial.legendre.[c]->pu.as_series([c])
A:numpy.polynomial.legendre.n->len(c)
A:numpy.polynomial.legendre.c0->legsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.legendre.c1->legadd(tmp, legmulx(c1) * (2 * nd - 1) / nd)
A:numpy.polynomial.legendre.legdomain->numpy.array([-1, 1])
A:numpy.polynomial.legendre.legzero->numpy.array([0])
A:numpy.polynomial.legendre.legone->numpy.array([1])
A:numpy.polynomial.legendre.legx->numpy.array([0, 1])
A:numpy.polynomial.legendre.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.legendre.(m, r)->divmod(n, 2)
A:numpy.polynomial.legendre.tmp[0]->legmul(tmp[0], p[-1])
A:numpy.polynomial.legendre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.legendre.prd->legmul(prd, c)
A:numpy.polynomial.legendre.nd->len(c)
A:numpy.polynomial.legendre.lc1->len(c1)
A:numpy.polynomial.legendre.lc2->len(c2)
A:numpy.polynomial.legendre.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.legendre.p->legmul([0] * i + [1], c2)
A:numpy.polynomial.legendre.power->int(pow)
A:numpy.polynomial.legendre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.legendre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.x->numpy.linalg.eigvals(m)
A:numpy.polynomial.legendre.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.legendre.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.legendre.ideg->int(deg)
A:numpy.polynomial.legendre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.legendre.vx->legvander(x, degx)
A:numpy.polynomial.legendre.vy->legvander(y, degy)
A:numpy.polynomial.legendre.vz->legvander(z, degz)
A:numpy.polynomial.legendre.scl->numpy.sqrt(np.square(lhs).sum(1))
A:numpy.polynomial.legendre.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.legendre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.legendre.m->legcompanion(c)
A:numpy.polynomial.legendre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.legendre.dy->legval(x, c)
A:numpy.polynomial.legendre.df->legval(x, legder(c))
A:numpy.polynomial.legendre.fm->legval(x, c[1:])
numpy.polynomial.legendre.leg2poly(c)
numpy.polynomial.legendre.legadd(c1,c2)
numpy.polynomial.legendre.legcompanion(c)
numpy.polynomial.legendre.legder(c,m=1,scl=1,axis=0)
numpy.polynomial.legendre.legdiv(c1,c2)
numpy.polynomial.legendre.legfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.legendre.leggauss(deg)
numpy.polynomial.legendre.leggrid2d(x,y,c)
numpy.polynomial.legendre.leggrid3d(x,y,z,c)
numpy.polynomial.legendre.legint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.legendre.legline(off,scl)
numpy.polynomial.legendre.legmul(c1,c2)
numpy.polynomial.legendre.legmulx(c)
numpy.polynomial.legendre.legpow(c,pow,maxpower=16)
numpy.polynomial.legendre.legroots(c)
numpy.polynomial.legendre.legsub(c1,c2)
numpy.polynomial.legendre.legval(x,c,tensor=True)
numpy.polynomial.legendre.legval2d(x,y,c)
numpy.polynomial.legendre.legval3d(x,y,z,c)
numpy.polynomial.legendre.legvander(x,deg)
numpy.polynomial.legendre.legvander2d(x,y,deg)
numpy.polynomial.legendre.legvander3d(x,y,z,deg)
numpy.polynomial.legendre.legweight(x)
numpy.polynomial.legendre.poly2leg(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/laguerre.py----------------------------------------
A:numpy.polynomial.laguerre.[pol]->pu.as_series([pol])
A:numpy.polynomial.laguerre.res->lagadd(lagmulx(res), pol[i])
A:numpy.polynomial.laguerre.[c]->pu.as_series([c])
A:numpy.polynomial.laguerre.n->len(c)
A:numpy.polynomial.laguerre.c0->lagsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.laguerre.c1->lagadd(tmp, lagsub((2 * nd - 1) * c1, lagmulx(c1)) / nd)
A:numpy.polynomial.laguerre.lagdomain->numpy.array([0, 1])
A:numpy.polynomial.laguerre.lagzero->numpy.array([0])
A:numpy.polynomial.laguerre.lagone->numpy.array([1])
A:numpy.polynomial.laguerre.lagx->numpy.array([1, -1])
A:numpy.polynomial.laguerre.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.laguerre.(m, r)->divmod(n, 2)
A:numpy.polynomial.laguerre.tmp[0]->lagmul(tmp[0], p[-1])
A:numpy.polynomial.laguerre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.laguerre.prd->lagmul(prd, c)
A:numpy.polynomial.laguerre.nd->len(c)
A:numpy.polynomial.laguerre.lc1->len(c1)
A:numpy.polynomial.laguerre.lc2->len(c2)
A:numpy.polynomial.laguerre.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.laguerre.p->lagmul([0] * i + [1], c2)
A:numpy.polynomial.laguerre.power->int(pow)
A:numpy.polynomial.laguerre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.laguerre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.x->numpy.linalg.eigvals(m)
A:numpy.polynomial.laguerre.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.laguerre.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.laguerre.ideg->int(deg)
A:numpy.polynomial.laguerre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.laguerre.vx->lagvander(x, degx)
A:numpy.polynomial.laguerre.vy->lagvander(y, degy)
A:numpy.polynomial.laguerre.vz->lagvander(z, degz)
A:numpy.polynomial.laguerre.scl->numpy.sqrt(np.square(lhs).sum(1))
A:numpy.polynomial.laguerre.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.laguerre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.laguerre.m->lagcompanion(c)
A:numpy.polynomial.laguerre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.laguerre.dy->lagval(x, c)
A:numpy.polynomial.laguerre.df->lagval(x, lagder(c))
A:numpy.polynomial.laguerre.fm->lagval(x, c[1:])
A:numpy.polynomial.laguerre.w->numpy.exp(-x)
numpy.polynomial.laguerre.lag2poly(c)
numpy.polynomial.laguerre.lagadd(c1,c2)
numpy.polynomial.laguerre.lagcompanion(c)
numpy.polynomial.laguerre.lagder(c,m=1,scl=1,axis=0)
numpy.polynomial.laguerre.lagdiv(c1,c2)
numpy.polynomial.laguerre.lagfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.laguerre.laggauss(deg)
numpy.polynomial.laguerre.laggrid2d(x,y,c)
numpy.polynomial.laguerre.laggrid3d(x,y,z,c)
numpy.polynomial.laguerre.lagint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.laguerre.lagline(off,scl)
numpy.polynomial.laguerre.lagmul(c1,c2)
numpy.polynomial.laguerre.lagmulx(c)
numpy.polynomial.laguerre.lagpow(c,pow,maxpower=16)
numpy.polynomial.laguerre.lagroots(c)
numpy.polynomial.laguerre.lagsub(c1,c2)
numpy.polynomial.laguerre.lagval(x,c,tensor=True)
numpy.polynomial.laguerre.lagval2d(x,y,c)
numpy.polynomial.laguerre.lagval3d(x,y,z,c)
numpy.polynomial.laguerre.lagvander(x,deg)
numpy.polynomial.laguerre.lagvander2d(x,y,deg)
numpy.polynomial.laguerre.lagvander3d(x,y,z,deg)
numpy.polynomial.laguerre.lagweight(x)
numpy.polynomial.laguerre.poly2lag(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/setup.py----------------------------------------
A:numpy.polynomial.setup.config->Configuration('polynomial', parent_package, top_path)
numpy.polynomial.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/polyutils.py----------------------------------------
A:numpy.polynomial.polyutils.tmp->numpy.empty(len(a), dtype=np.dtype(object))
A:numpy.polynomial.polyutils.dtype->numpy.common_type(*arrays)
A:numpy.polynomial.polyutils.[c]->as_series([c])
A:numpy.polynomial.polyutils.[ind]->numpy.where(np.abs(c) > tol)
A:numpy.polynomial.polyutils.[x]->as_series([x], trim=False)
A:numpy.polynomial.polyutils.x->numpy.asanyarray(x)
A:numpy.polynomial.polyutils.(off, scl)->mapparms(old, new)
numpy.polynomial.polyutils.PolyBase(object)
numpy.polynomial.polyutils.PolyDomainError(PolyError)
numpy.polynomial.polyutils.PolyError(Exception)
numpy.polynomial.polyutils.RankWarning(UserWarning)
numpy.polynomial.polyutils.as_series(alist,trim=True)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x,old,new)
numpy.polynomial.polyutils.mapparms(old,new)
numpy.polynomial.polyutils.trimcoef(c,tol=0)
numpy.polynomial.polyutils.trimseq(seq)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/polynomial.py----------------------------------------
A:numpy.polynomial.polynomial.polydomain->numpy.array([-1, 1])
A:numpy.polynomial.polynomial.polyzero->numpy.array([0])
A:numpy.polynomial.polynomial.polyone->numpy.array([1])
A:numpy.polynomial.polynomial.polyx->numpy.array([0, 1])
A:numpy.polynomial.polynomial.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial.polynomial.n->len(c)
A:numpy.polynomial.polynomial.(m, r)->divmod(n, 2)
A:numpy.polynomial.polynomial.tmp[0]->polymul(tmp[0], p[-1])
A:numpy.polynomial.polynomial.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.polynomial.[c]->pu.as_series([c])
A:numpy.polynomial.polynomial.prd->numpy.convolve(prd, c)
A:numpy.polynomial.polynomial.ret->numpy.convolve(c1, c2)
A:numpy.polynomial.polynomial.len1->len(c1)
A:numpy.polynomial.polynomial.len2->len(c2)
A:numpy.polynomial.polynomial.power->int(pow)
A:numpy.polynomial.polynomial.c->polyval(z, c)
A:numpy.polynomial.polynomial.der->numpy.empty((n,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.x->numpy.asarray(x)
A:numpy.polynomial.polynomial.(x, y)->numpy.array((x, y), copy=0)
A:numpy.polynomial.polynomial.(x, y, z)->numpy.array((x, y, z), copy=0)
A:numpy.polynomial.polynomial.ideg->int(deg)
A:numpy.polynomial.polynomial.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.polynomial.vx->polyvander(x, degx)
A:numpy.polynomial.polynomial.vy->polyvander(y, degy)
A:numpy.polynomial.polynomial.vz->polyvander(z, degz)
A:numpy.polynomial.polynomial.scl->numpy.sqrt(np.square(lhs).sum(1))
A:numpy.polynomial.polynomial.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.polynomial.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.polynomial.m->polycompanion(c)
A:numpy.polynomial.polynomial.r->numpy.linalg.eigvals(m)
numpy.polynomial.polynomial.polyadd(c1,c2)
numpy.polynomial.polynomial.polycompanion(c)
numpy.polynomial.polynomial.polyder(c,m=1,scl=1,axis=0)
numpy.polynomial.polynomial.polydiv(c1,c2)
numpy.polynomial.polynomial.polyfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.polynomial.polyfromroots(roots)
numpy.polynomial.polynomial.polygrid2d(x,y,c)
numpy.polynomial.polynomial.polygrid3d(x,y,z,c)
numpy.polynomial.polynomial.polyint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.polynomial.polyline(off,scl)
numpy.polynomial.polynomial.polymul(c1,c2)
numpy.polynomial.polynomial.polymulx(c)
numpy.polynomial.polynomial.polypow(c,pow,maxpower=None)
numpy.polynomial.polynomial.polyroots(c)
numpy.polynomial.polynomial.polysub(c1,c2)
numpy.polynomial.polynomial.polyval(x,c,tensor=True)
numpy.polynomial.polynomial.polyval2d(x,y,c)
numpy.polynomial.polynomial.polyval3d(x,y,z,c)
numpy.polynomial.polynomial.polyvander(x,deg)
numpy.polynomial.polynomial.polyvander2d(x,y,deg)
numpy.polynomial.polynomial.polyvander3d(x,y,z,deg)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_hermite_e.py----------------------------------------
A:numpy.polynomial.tests.test_hermite_e.He0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite_e.He1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_hermite_e.He2->numpy.array([-1, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He3->numpy.array([0, -3, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He4->numpy.array([3, 0, -6, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He5->numpy.array([0, 15, 0, -10, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He6->numpy.array([-15, 0, 45, 0, -15, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He7->numpy.array([0, -105, 0, 105, 0, -21, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He8->numpy.array([105, 0, -420, 0, 210, 0, -28, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He9->numpy.array([0, 945, 0, -1260, 0, 378, 0, -36, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite_e.tgt->numpy.exp(-0.5 * x ** 2)
A:numpy.polynomial.tests.test_hermite_e.res->numpy.polynomial.hermite_e.hermeweight(x)
A:numpy.polynomial.tests.test_hermite_e.val1->numpy.polynomial.hermite_e.hermeval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite_e.val2->numpy.polynomial.hermite_e.hermeval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite_e.pol3->numpy.polynomial.hermite_e.hermemul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite_e.val3->numpy.polynomial.hermite_e.hermeval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite_e.(quo, rem)->numpy.polynomial.hermite_e.hermediv(tgt, ci)
A:numpy.polynomial.tests.test_hermite_e.c1d->numpy.array([4.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_hermite_e.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite_e.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite_e.y->f(x)
A:numpy.polynomial.tests.test_hermite_e.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite_e.hermepol->numpy.polynomial.hermite_e.poly2herme(pol)
A:numpy.polynomial.tests.test_hermite_e.hermeint->numpy.polynomial.hermite_e.hermeint(hermepol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite_e.v->numpy.polynomial.hermite_e.hermevander(x, 99)
A:numpy.polynomial.tests.test_hermite_e.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite_e.van->numpy.polynomial.hermite_e.hermevander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.coef3->numpy.polynomial.hermite_e.hermefit(x, y, 3)
A:numpy.polynomial.tests.test_hermite_e.coef4->numpy.polynomial.hermite_e.hermefit(x, y, 4)
A:numpy.polynomial.tests.test_hermite_e.coef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_hermite_e.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite_e.yw->f(x).copy()
A:numpy.polynomial.tests.test_hermite_e.wcoef3->numpy.polynomial.hermite_e.hermefit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_hermite_e.wcoef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([yw, yw]).T, 3, w=w)
A:numpy.polynomial.tests.test_hermite_e.(x, w)->numpy.polynomial.hermite_e.hermegauss(100)
A:numpy.polynomial.tests.test_hermite_e.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite_e.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite_e.pol->numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.tests.test_hermite_e.TestArithmetic(TestCase)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermeadd(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermediv(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemul(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemulx(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermesub(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion(TestCase)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite_e.TestConstants(TestCase)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermedomain(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermeone(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermex(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermezero(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative(TestCase)
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder_axis(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation(TestCase)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid3d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval3d(self)
numpy.polynomial.tests.test_hermite_e.TestFitting(TestCase)
numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit(self)
numpy.polynomial.tests.test_hermite_e.TestGauss(TestCase)
numpy.polynomial.tests.test_hermite_e.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral(TestCase)
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint_axis(self)
numpy.polynomial.tests.test_hermite_e.TestMisc(TestCase)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_herme2poly(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermefromroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeline(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermetrim(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_poly2herme(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite_e.TestVander(TestCase)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander2d(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander3d(self)
numpy.polynomial.tests.test_hermite_e.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_legendre.py----------------------------------------
A:numpy.polynomial.tests.test_legendre.L0->numpy.array([1])
A:numpy.polynomial.tests.test_legendre.L1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_legendre.x->numpy.linspace(-1, 1, 11)
A:numpy.polynomial.tests.test_legendre.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_legendre.res->numpy.polynomial.legendre.legweight(x)
A:numpy.polynomial.tests.test_legendre.val1->numpy.polynomial.legendre.legval(self.x, pol1)
A:numpy.polynomial.tests.test_legendre.val2->numpy.polynomial.legendre.legval(self.x, pol2)
A:numpy.polynomial.tests.test_legendre.pol3->numpy.polynomial.legendre.legmul(pol1, pol2)
A:numpy.polynomial.tests.test_legendre.val3->numpy.polynomial.legendre.legval(self.x, pol3)
A:numpy.polynomial.tests.test_legendre.(quo, rem)->numpy.polynomial.legendre.legdiv(tgt, ci)
A:numpy.polynomial.tests.test_legendre.c1d->numpy.array([2.0, 2.0, 2.0])
A:numpy.polynomial.tests.test_legendre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_legendre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_legendre.y->f(x)
A:numpy.polynomial.tests.test_legendre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_legendre.legpol->numpy.polynomial.legendre.poly2leg(pol)
A:numpy.polynomial.tests.test_legendre.legint->numpy.polynomial.legendre.legint(legpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_legendre.v->numpy.polynomial.legendre.legvander(x, 99)
A:numpy.polynomial.tests.test_legendre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_legendre.van->numpy.polynomial.legendre.legvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_legendre.coef3->numpy.polynomial.legendre.legfit(x, y, 3)
A:numpy.polynomial.tests.test_legendre.coef4->numpy.polynomial.legendre.legfit(x, y, 4)
A:numpy.polynomial.tests.test_legendre.coef2d->numpy.polynomial.legendre.legfit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_legendre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_legendre.yw->f(x).copy()
A:numpy.polynomial.tests.test_legendre.wcoef3->numpy.polynomial.legendre.legfit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_legendre.wcoef2d->numpy.polynomial.legendre.legfit(x, np.array([yw, yw]).T, 3, w=w)
A:numpy.polynomial.tests.test_legendre.(x, w)->numpy.polynomial.legendre.leggauss(100)
A:numpy.polynomial.tests.test_legendre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_legendre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_legendre.pol->numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.tests.test_legendre.TestArithmetic(TestCase)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legadd(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legdiv(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmul(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmulx(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legsub(self)
numpy.polynomial.tests.test_legendre.TestCompanion(TestCase)
numpy.polynomial.tests.test_legendre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_legendre.TestConstants(TestCase)
numpy.polynomial.tests.test_legendre.TestConstants.test_legdomain(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legone(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legx(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legzero(self)
numpy.polynomial.tests.test_legendre.TestDerivative(TestCase)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder(self)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_axis(self)
numpy.polynomial.tests.test_legendre.TestEvaluation(TestCase)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid3d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval3d(self)
numpy.polynomial.tests.test_legendre.TestFitting(TestCase)
numpy.polynomial.tests.test_legendre.TestFitting.test_legfit(self)
numpy.polynomial.tests.test_legendre.TestGauss(TestCase)
numpy.polynomial.tests.test_legendre.TestGauss.test_100(self)
numpy.polynomial.tests.test_legendre.TestIntegral(TestCase)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint(self)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_axis(self)
numpy.polynomial.tests.test_legendre.TestMisc(TestCase)
numpy.polynomial.tests.test_legendre.TestMisc.test_leg2poly(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legfromroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legline(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legtrim(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_poly2leg(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_legendre.TestVander(TestCase)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander2d(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander3d(self)
numpy.polynomial.tests.test_legendre.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_polynomial.py----------------------------------------
A:numpy.polynomial.tests.test_polynomial.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_polynomial.res->numpy.polynomial.polynomial.polyroots(poly.polyfromroots(tgt))
A:numpy.polynomial.tests.test_polynomial.(quo, rem)->numpy.polynomial.polynomial.polydiv(tgt, ci)
A:numpy.polynomial.tests.test_polynomial.c1d->numpy.array([1.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_polynomial.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_polynomial.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_polynomial.y->f(x)
A:numpy.polynomial.tests.test_polynomial.x->numpy.linspace(0, 2)
A:numpy.polynomial.tests.test_polynomial.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_polynomial.v->numpy.polynomial.polynomial.polyvander(x, 3)
A:numpy.polynomial.tests.test_polynomial.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_polynomial.van->numpy.polynomial.polynomial.polyvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_polynomial.coef3->numpy.polynomial.polynomial.polyfit(x, y, 3)
A:numpy.polynomial.tests.test_polynomial.coef4->numpy.polynomial.polynomial.polyfit(x, y, 4)
A:numpy.polynomial.tests.test_polynomial.coef2d->numpy.polynomial.polynomial.polyfit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_polynomial.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_polynomial.yw->f(x).copy()
A:numpy.polynomial.tests.test_polynomial.wcoef3->numpy.polynomial.polynomial.polyfit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_polynomial.wcoef2d->numpy.polynomial.polynomial.polyfit(x, np.array([yw, yw]).T, 3, w=w)
numpy.polynomial.tests.test_polynomial.TestArithmetic(TestCase)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polyadd(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polydiv(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymul(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymulx(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polysub(self)
numpy.polynomial.tests.test_polynomial.TestCompanion(TestCase)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_polynomial.TestConstants(TestCase)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polydomain(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyone(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyx(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyzero(self)
numpy.polynomial.tests.test_polynomial.TestDerivative(TestCase)
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder(self)
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder_axis(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation(TestCase)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid3d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval3d(self)
numpy.polynomial.tests.test_polynomial.TestIntegral(TestCase)
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint(self)
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint_axis(self)
numpy.polynomial.tests.test_polynomial.TestMisc(TestCase)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfromroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polytrim(self)
numpy.polynomial.tests.test_polynomial.TestVander(TestCase)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander2d(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander3d(self)
numpy.polynomial.tests.test_polynomial.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_printing.py----------------------------------------
A:numpy.polynomial.tests.test_printing.res->repr(poly.Laguerre([0, 1]))
numpy.polynomial.tests.test_printing.test_repr(TestCase)
numpy.polynomial.tests.test_printing.test_repr.test_chebyshev_str(self)
numpy.polynomial.tests.test_printing.test_repr.test_hermiteE_repr(self)
numpy.polynomial.tests.test_printing.test_repr.test_hermite_repr(self)
numpy.polynomial.tests.test_printing.test_repr.test_laguerre_repr(self)
numpy.polynomial.tests.test_printing.test_repr.test_legendre_repr(self)
numpy.polynomial.tests.test_printing.test_repr.test_polynomial_str(self)
numpy.polynomial.tests.test_printing.test_str(TestCase)
numpy.polynomial.tests.test_printing.test_str.test_chebyshev_str(self)
numpy.polynomial.tests.test_printing.test_str.test_hermiteE_str(self)
numpy.polynomial.tests.test_printing.test_str.test_hermite_str(self)
numpy.polynomial.tests.test_printing.test_str.test_laguerre_str(self)
numpy.polynomial.tests.test_printing.test_str.test_legendre_str(self)
numpy.polynomial.tests.test_printing.test_str.test_polynomial_str(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_chebyshev.py----------------------------------------
A:numpy.polynomial.tests.test_chebyshev.inp->numpy.array([0.5] * i + [2] + [0.5] * i, np.double)
A:numpy.polynomial.tests.test_chebyshev.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_chebyshev.res->numpy.polynomial.chebyshev.chebweight(x)
A:numpy.polynomial.tests.test_chebyshev.(quo, rem)->numpy.polynomial.chebyshev.chebdiv(tgt, ci)
A:numpy.polynomial.tests.test_chebyshev.c1d->numpy.array([2.5, 2.0, 1.5])
A:numpy.polynomial.tests.test_chebyshev.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_chebyshev.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_chebyshev.y->f(x)
A:numpy.polynomial.tests.test_chebyshev.x->numpy.linspace(0, 2)
A:numpy.polynomial.tests.test_chebyshev.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_chebyshev.chebpol->numpy.polynomial.chebyshev.poly2cheb(pol)
A:numpy.polynomial.tests.test_chebyshev.chebint->numpy.polynomial.chebyshev.chebint(chebpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_chebyshev.v->numpy.polynomial.chebyshev.chebvander(x, 99)
A:numpy.polynomial.tests.test_chebyshev.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_chebyshev.van->numpy.polynomial.chebyshev.chebvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.coef3->numpy.polynomial.chebyshev.chebfit(x, y, 3)
A:numpy.polynomial.tests.test_chebyshev.coef4->numpy.polynomial.chebyshev.chebfit(x, y, 4)
A:numpy.polynomial.tests.test_chebyshev.coef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_chebyshev.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_chebyshev.yw->f(x).copy()
A:numpy.polynomial.tests.test_chebyshev.wcoef3->numpy.polynomial.chebyshev.chebfit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_chebyshev.wcoef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([yw, yw]).T, 3, w=w)
A:numpy.polynomial.tests.test_chebyshev.(x, w)->numpy.polynomial.chebyshev.chebgauss(100)
A:numpy.polynomial.tests.test_chebyshev.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_chebyshev.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
numpy.polynomial.tests.test_chebyshev.TestArithmetic(TestCase)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebadd(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebdiv(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmul(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmulx(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebsub(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion(TestCase)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_chebyshev.TestConstants(TestCase)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebdomain(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebone(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebx(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebzero(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative(TestCase)
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder_axis(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation(TestCase)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid3d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval3d(self)
numpy.polynomial.tests.test_chebyshev.TestFitting(TestCase)
numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit(self)
numpy.polynomial.tests.test_chebyshev.TestGauss(TestCase)
numpy.polynomial.tests.test_chebyshev.TestGauss.test_100(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral(TestCase)
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint_axis(self)
numpy.polynomial.tests.test_chebyshev.TestMisc(TestCase)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_cheb2poly(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebfromroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebline(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts1(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts2(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebtrim(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_poly2cheb(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_weight(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate(TestCase)
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__cseries_to_zseries(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__zseries_to_cseries(self)
numpy.polynomial.tests.test_chebyshev.TestVander(TestCase)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander2d(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander3d(self)
numpy.polynomial.tests.test_chebyshev.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_hermite.py----------------------------------------
A:numpy.polynomial.tests.test_hermite.H0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite.H1->numpy.array([0, 2])
A:numpy.polynomial.tests.test_hermite.H2->numpy.array([-2, 0, 4])
A:numpy.polynomial.tests.test_hermite.H3->numpy.array([0, -12, 0, 8])
A:numpy.polynomial.tests.test_hermite.H4->numpy.array([12, 0, -48, 0, 16])
A:numpy.polynomial.tests.test_hermite.H5->numpy.array([0, 120, 0, -160, 0, 32])
A:numpy.polynomial.tests.test_hermite.H6->numpy.array([-120, 0, 720, 0, -480, 0, 64])
A:numpy.polynomial.tests.test_hermite.H7->numpy.array([0, -1680, 0, 3360, 0, -1344, 0, 128])
A:numpy.polynomial.tests.test_hermite.H8->numpy.array([1680, 0, -13440, 0, 13440, 0, -3584, 0, 256])
A:numpy.polynomial.tests.test_hermite.H9->numpy.array([0, 30240, 0, -80640, 0, 48384, 0, -9216, 0, 512])
A:numpy.polynomial.tests.test_hermite.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite.tgt->numpy.exp(-x ** 2)
A:numpy.polynomial.tests.test_hermite.res->numpy.polynomial.hermite.hermweight(x)
A:numpy.polynomial.tests.test_hermite.val1->numpy.polynomial.hermite.hermval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite.val2->numpy.polynomial.hermite.hermval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite.pol3->numpy.polynomial.hermite.hermmul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite.val3->numpy.polynomial.hermite.hermval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite.(quo, rem)->numpy.polynomial.hermite.hermdiv(tgt, ci)
A:numpy.polynomial.tests.test_hermite.c1d->numpy.array([2.5, 1.0, 0.75])
A:numpy.polynomial.tests.test_hermite.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite.y->f(x)
A:numpy.polynomial.tests.test_hermite.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite.hermpol->numpy.polynomial.hermite.poly2herm(pol)
A:numpy.polynomial.tests.test_hermite.hermint->numpy.polynomial.hermite.hermint(hermpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite.v->numpy.polynomial.hermite.hermvander(x, 99)
A:numpy.polynomial.tests.test_hermite.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite.van->numpy.polynomial.hermite.hermvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite.coef3->numpy.polynomial.hermite.hermfit(x, y, 3)
A:numpy.polynomial.tests.test_hermite.coef4->numpy.polynomial.hermite.hermfit(x, y, 4)
A:numpy.polynomial.tests.test_hermite.coef2d->numpy.polynomial.hermite.hermfit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_hermite.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite.yw->f(x).copy()
A:numpy.polynomial.tests.test_hermite.wcoef3->numpy.polynomial.hermite.hermfit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_hermite.wcoef2d->numpy.polynomial.hermite.hermfit(x, np.array([yw, yw]).T, 3, w=w)
A:numpy.polynomial.tests.test_hermite.(x, w)->numpy.polynomial.hermite.hermgauss(100)
A:numpy.polynomial.tests.test_hermite.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite.pol->numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.tests.test_hermite.TestArithmetic(TestCase)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermadd(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermdiv(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmul(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmulx(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermsub(self)
numpy.polynomial.tests.test_hermite.TestCompanion(TestCase)
numpy.polynomial.tests.test_hermite.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite.TestConstants(TestCase)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermdomain(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermone(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermx(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermzero(self)
numpy.polynomial.tests.test_hermite.TestDerivative(TestCase)
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder(self)
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder_axis(self)
numpy.polynomial.tests.test_hermite.TestEvaluation(TestCase)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid3d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval3d(self)
numpy.polynomial.tests.test_hermite.TestFitting(TestCase)
numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit(self)
numpy.polynomial.tests.test_hermite.TestGauss(TestCase)
numpy.polynomial.tests.test_hermite.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite.TestIntegral(TestCase)
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint(self)
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint_axis(self)
numpy.polynomial.tests.test_hermite.TestMisc(TestCase)
numpy.polynomial.tests.test_hermite.TestMisc.test_herm2poly(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermfromroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermline(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermtrim(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_poly2herm(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite.TestVander(TestCase)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander2d(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander3d(self)
numpy.polynomial.tests.test_hermite.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_laguerre.py----------------------------------------
A:numpy.polynomial.tests.test_laguerre.x->numpy.linspace(0, 10, 11)
A:numpy.polynomial.tests.test_laguerre.tgt->numpy.exp(-x)
A:numpy.polynomial.tests.test_laguerre.res->numpy.polynomial.laguerre.lagweight(x)
A:numpy.polynomial.tests.test_laguerre.val1->numpy.polynomial.laguerre.lagval(self.x, pol1)
A:numpy.polynomial.tests.test_laguerre.val2->numpy.polynomial.laguerre.lagval(self.x, pol2)
A:numpy.polynomial.tests.test_laguerre.pol3->numpy.polynomial.laguerre.lagmul(pol1, pol2)
A:numpy.polynomial.tests.test_laguerre.val3->numpy.polynomial.laguerre.lagval(self.x, pol3)
A:numpy.polynomial.tests.test_laguerre.(quo, rem)->numpy.polynomial.laguerre.lagdiv(tgt, ci)
A:numpy.polynomial.tests.test_laguerre.c1d->numpy.array([9.0, -14.0, 6.0])
A:numpy.polynomial.tests.test_laguerre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_laguerre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_laguerre.y->f(x)
A:numpy.polynomial.tests.test_laguerre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_laguerre.lagpol->numpy.polynomial.laguerre.poly2lag(pol)
A:numpy.polynomial.tests.test_laguerre.lagint->numpy.polynomial.laguerre.lagint(lagpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_laguerre.v->numpy.polynomial.laguerre.lagvander(x, 99)
A:numpy.polynomial.tests.test_laguerre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_laguerre.van->numpy.polynomial.laguerre.lagvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.coef3->numpy.polynomial.laguerre.lagfit(x, y, 3)
A:numpy.polynomial.tests.test_laguerre.coef4->numpy.polynomial.laguerre.lagfit(x, y, 4)
A:numpy.polynomial.tests.test_laguerre.coef2d->numpy.polynomial.laguerre.lagfit(x, np.array([y, y]).T, 3)
A:numpy.polynomial.tests.test_laguerre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_laguerre.yw->f(x).copy()
A:numpy.polynomial.tests.test_laguerre.wcoef3->numpy.polynomial.laguerre.lagfit(x, yw, 3, w=w)
A:numpy.polynomial.tests.test_laguerre.wcoef2d->numpy.polynomial.laguerre.lagfit(x, np.array([yw, yw]).T, 3, w=w)
A:numpy.polynomial.tests.test_laguerre.(x, w)->numpy.polynomial.laguerre.laggauss(100)
A:numpy.polynomial.tests.test_laguerre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_laguerre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_laguerre.pol->numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.tests.test_laguerre.TestArithmetic(TestCase)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagadd(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagdiv(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmul(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmulx(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagsub(self)
numpy.polynomial.tests.test_laguerre.TestCompanion(TestCase)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_laguerre.TestConstants(TestCase)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagdomain(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagone(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagx(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagzero(self)
numpy.polynomial.tests.test_laguerre.TestDerivative(TestCase)
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder(self)
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder_axis(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation(TestCase)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid3d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval3d(self)
numpy.polynomial.tests.test_laguerre.TestFitting(TestCase)
numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit(self)
numpy.polynomial.tests.test_laguerre.TestGauss(TestCase)
numpy.polynomial.tests.test_laguerre.TestGauss.test_100(self)
numpy.polynomial.tests.test_laguerre.TestIntegral(TestCase)
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint(self)
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint_axis(self)
numpy.polynomial.tests.test_laguerre.TestMisc(TestCase)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lag2poly(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagfromroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagline(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagtrim(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_poly2lag(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_laguerre.TestVander(TestCase)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander2d(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander3d(self)
numpy.polynomial.tests.test_laguerre.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_polyutils.py----------------------------------------
A:numpy.polynomial.tests.test_polyutils.res->numpy.polynomial.polyutils.mapparms(dom1, dom2)
A:numpy.polynomial.tests.test_polyutils.ci->numpy.ones(1, types[i])
A:numpy.polynomial.tests.test_polyutils.cj->numpy.ones(1, types[j])
A:numpy.polynomial.tests.test_polyutils.[resi, resj]->numpy.polynomial.polyutils.as_series([ci, cj])
A:numpy.polynomial.tests.test_polyutils.tgt->numpy.array([dom2, dom2])
A:numpy.polynomial.tests.test_polyutils.x->numpy.matrix([dom1, dom1])
numpy.polynomial.tests.test_polyutils.TestDomain(TestCase)
numpy.polynomial.tests.test_polyutils.TestDomain.test_getdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapparms(self)
numpy.polynomial.tests.test_polyutils.TestMisc(TestCase)
numpy.polynomial.tests.test_polyutils.TestMisc.test_as_series(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimcoef(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/polynomial/tests/test_classes.py----------------------------------------
A:numpy.polynomial.tests.test_classes.x->numpy.linspace(d[0], d[1], 11)
A:numpy.polynomial.tests.test_classes.coef->random((3,))
A:numpy.polynomial.tests.test_classes.p1->Poly([1, 2, 3], domain=d, window=w)
A:numpy.polynomial.tests.test_classes.p2->Poly([1, 2, 3], domain=d, window=w).integ(2, k=[1, 2])
A:numpy.polynomial.tests.test_classes.p->Poly([1], domain=d, window=w)
A:numpy.polynomial.tests.test_classes.r->random((5,))
A:numpy.polynomial.tests.test_classes.y->f(x)
A:numpy.polynomial.tests.test_classes.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_classes.p3->Poly([1, 2, 3], domain=d, window=w).integ(1, k=[1])
A:numpy.polynomial.tests.test_classes.p4->Poly([1, 2, 3], domain=[0, 1], window=[1, 2])
A:numpy.polynomial.tests.test_classes.c1->list(random((4,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c2->list(random((3,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c3->list(random((2,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c4->list(p4.coef)
A:numpy.polynomial.tests.test_classes.(quo, rem)->divmod(2, p2)
A:numpy.polynomial.tests.test_classes.tgt->Poly([1], domain=d, window=d)
A:numpy.polynomial.tests.test_classes.res->p(x)
A:numpy.polynomial.tests.test_classes.p0->Poly.cast(P([1 * 2, 2 * 3, 3 * 4]), domain=d)
A:numpy.polynomial.tests.test_classes.xtgt->numpy.linspace(0, 2, 20)
A:numpy.polynomial.tests.test_classes.ytgt->p(xtgt)
A:numpy.polynomial.tests.test_classes.(xres, yres)->Poly([1], domain=d, window=w).linspace(20, domain=[0, 2])
A:numpy.polynomial.tests.test_classes.tst->Poly([1, 2, 3], domain=d, window=d)
numpy.polynomial.tests.test_classes.assert_poly_almost_equal(p1,p2,msg='')
numpy.polynomial.tests.test_classes.check_add(Poly)
numpy.polynomial.tests.test_classes.check_basis(Poly)
numpy.polynomial.tests.test_classes.check_call(Poly)
numpy.polynomial.tests.test_classes.check_cast(Poly1,Poly2)
numpy.polynomial.tests.test_classes.check_conversion(Poly1,Poly2)
numpy.polynomial.tests.test_classes.check_copy(Poly)
numpy.polynomial.tests.test_classes.check_cutdeg(Poly)
numpy.polynomial.tests.test_classes.check_degree(Poly)
numpy.polynomial.tests.test_classes.check_deriv(Poly)
numpy.polynomial.tests.test_classes.check_divmod(Poly)
numpy.polynomial.tests.test_classes.check_equal(Poly)
numpy.polynomial.tests.test_classes.check_fit(Poly)
numpy.polynomial.tests.test_classes.check_floordiv(Poly)
numpy.polynomial.tests.test_classes.check_fromroots(Poly)
numpy.polynomial.tests.test_classes.check_identity(Poly)
numpy.polynomial.tests.test_classes.check_integ(Poly)
numpy.polynomial.tests.test_classes.check_linspace(Poly)
numpy.polynomial.tests.test_classes.check_mapparms(Poly)
numpy.polynomial.tests.test_classes.check_mod(Poly)
numpy.polynomial.tests.test_classes.check_mul(Poly)
numpy.polynomial.tests.test_classes.check_not_equal(Poly)
numpy.polynomial.tests.test_classes.check_pow(Poly)
numpy.polynomial.tests.test_classes.check_roots(Poly)
numpy.polynomial.tests.test_classes.check_sub(Poly)
numpy.polynomial.tests.test_classes.check_trim(Poly)
numpy.polynomial.tests.test_classes.check_truncate(Poly)
numpy.polynomial.tests.test_classes.test_class_methods()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/extras.py----------------------------------------
A:numpy.ma.extras.m->mask_or(m, getmask(w))
A:numpy.ma.extras.a->asarray(a)
A:numpy.ma.extras.a._mask->asarray(a)._mask.copy()
A:numpy.ma.extras.self.__doc__->self.getdoc()
A:numpy.ma.extras.npfunc->getattr(np, self.__name__, None)
A:numpy.ma.extras.doc->getattr(npfunc, '__doc__', None)
A:numpy.ma.extras.func->getattr(np, self.__name__)
A:numpy.ma.extras._d->func(np.asarray(x), *args, **params)
A:numpy.ma.extras._m->func(getmaskarray(x), *args, **params)
A:numpy.ma.extras.args->list(args)
A:numpy.ma.extras.atleast_1d->_fromnxfunction('atleast_1d')
A:numpy.ma.extras.atleast_2d->_fromnxfunction('atleast_2d')
A:numpy.ma.extras.atleast_3d->_fromnxfunction('atleast_3d')
A:numpy.ma.extras.vstackrow_stack->_fromnxfunction('vstack')
A:numpy.ma.extras.hstack->_fromnxfunction('hstack')
A:numpy.ma.extras.column_stack->_fromnxfunction('column_stack')
A:numpy.ma.extras.dstack->_fromnxfunction('dstack')
A:numpy.ma.extras.hsplit->_fromnxfunction('hsplit')
A:numpy.ma.extras.diagflat->_fromnxfunction('diagflat')
A:numpy.ma.extras.arr->array(arr, copy=False, subok=True)
A:numpy.ma.extras.i->numpy.zeros(nd, 'O')
A:numpy.ma.extras.indlist->list(range(nd))
A:numpy.ma.extras.i[axis]->slice(None, None)
A:numpy.ma.extras.outshape->flatten_inplace(outshape)
A:numpy.ma.extras.j->numpy.zeros(nd, 'O').copy()
A:numpy.ma.extras.res->concatenate(tuple(objs), axis=self.axis)
A:numpy.ma.extras.asscalar->numpy.isscalar(res)
A:numpy.ma.extras.outarr->zeros(outshape, object)
A:numpy.ma.extras.Ntot->numpy.product(outshape)
A:numpy.ma.extras.max_dtypes->numpy.dtype(np.asarray(dtypes).max())
A:numpy.ma.extras.result->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.result.fill_value->ma.default_fill_value(result)
A:numpy.ma.extras.val->numpy.asarray(a)
A:numpy.ma.extras.msk->getmaskarray(a)
A:numpy.ma.extras.n->len(list(g))
A:numpy.ma.extras.d->numpy.dot(filled(a, 0), filled(b, 0))
A:numpy.ma.extras.w->asarray(w)
A:numpy.ma.extras.r[axis]->slice(None, None, 1)
A:numpy.ma.extras.counts->filled(count(data), 0)
A:numpy.ma.extras.(idx, rmd)->divmod(counts, 2)
A:numpy.ma.extras.choice->slice(idx - 1, idx + 1)
A:numpy.ma.extras.asorted->sort(a, axis=axis)
A:numpy.ma.extras.x->asarray(x)
A:numpy.ma.extras.masked->mask_or(m, getmask(w)).nonzero()
A:numpy.ma.extras.maskedval->mask_or(m, getmask(w)).nonzero()
A:numpy.ma.extras.b->mask_cols(b)
A:numpy.ma.extras.ed->hstack(arrays)
A:numpy.ma.extras.output->output.view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.output[0]->output[0].view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.aux->in1d(ar1, ar2, assume_unique=True)
A:numpy.ma.extras.ar1->unique(ar1)
A:numpy.ma.extras.ar2->unique(ar2)
A:numpy.ma.extras.auxf->in1d(ar1, ar2, assume_unique=True).filled()
A:numpy.ma.extras.flag->ma.concatenate((bool_ar, [invert]))
A:numpy.ma.extras.(ar1, rev_idx)->unique(ar1, return_inverse=True)
A:numpy.ma.extras.ar->ma.concatenate((ar1, ar2))
A:numpy.ma.extras.order->ma.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:numpy.ma.extras.xmask->ma.getmaskarray(x)
A:numpy.ma.extras.rowvar->int(bool(rowvar))
A:numpy.ma.extras.xnotmask->numpy.logical_not(np.concatenate((xmask, ymask), axis)).astype(int)
A:numpy.ma.extras.y->asarray(y)
A:numpy.ma.extras.ymask->ma.getmaskarray(y)
A:numpy.ma.extras.common_mask->numpy.logical_or(xmask, ymask)
A:numpy.ma.extras.(x, xnotmask, rowvar)->_covhelper(x, y, rowvar, allow_masked)
A:numpy.ma.extras.c->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.diag->ma.diagonal(c)
A:numpy.ma.extras._denom->diagflat(diag)
A:numpy.ma.extras._x->mask_cols(vstack((x[:, i], x[:, j]))).var(axis=1, ddof=ddof)
A:numpy.ma.extras._denom[i, j]_denom[j, i]->ma.sqrt(ma.multiply.reduce(_x))
A:numpy.ma.extras.size->int(abs(step))
A:numpy.ma.extras.newobj->asarray([key[k]])
A:numpy.ma.extras.self.axis->int(key[k])
A:numpy.ma.extras.objs[k]->objs[k].astype(final_dtypedescr).astype(final_dtypedescr)
A:numpy.ma.extras.mr_->mr_class()
A:numpy.ma.extras.unmasked->numpy.flatnonzero(~m)
A:numpy.ma.extras.idx->(mask[1:] - mask[:-1]).nonzero()
A:numpy.ma.extras.idx[axis]->slice(None, None)
A:numpy.ma.extras.mask->ma.getmask(a)
A:numpy.ma.extras.slices->_ezclump(mask)
A:numpy.ma.extras._vander->numpy.vander(x, n)
A:numpy.ma.extras.vander.__doc__->ma.doc_note(np.vander.__doc__, vander.__doc__)
A:numpy.ma.extras.my->getmask(mask_rows(y))
A:numpy.ma.extras.polyfit.__doc__->ma.doc_note(np.polyfit.__doc__, polyfit.__doc__)
numpy.ma.MAxisConcatenator(self,axis=0)
numpy.ma.MAxisConcatenator.__getitem__(self,key)
numpy.ma._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma._ezclump(mask)
numpy.ma._fromnxfunction(self,funcname)
numpy.ma._fromnxfunction.getdoc(self)
numpy.ma.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.apply_over_axes(func,a,axes)
numpy.ma.average(a,axis=None,weights=None,returned=False)
numpy.ma.clump_masked(a)
numpy.ma.clump_unmasked(a)
numpy.ma.compress_cols(a)
numpy.ma.compress_rowcols(x,axis=None)
numpy.ma.compress_rows(a)
numpy.ma.corrcoef(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.count_masked(arr,axis=None)
numpy.ma.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.dot(a,b,strict=False)
numpy.ma.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.MAxisConcatenator(self,axis=0)
numpy.ma.extras.MAxisConcatenator.__getitem__(self,key)
numpy.ma.extras.MAxisConcatenator.__init__(self,axis=0)
numpy.ma.extras._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma.extras._ezclump(mask)
numpy.ma.extras._fromnxfunction(self,funcname)
numpy.ma.extras._fromnxfunction.__init__(self,funcname)
numpy.ma.extras._fromnxfunction.getdoc(self)
numpy.ma.extras.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.extras.apply_over_axes(func,a,axes)
numpy.ma.extras.average(a,axis=None,weights=None,returned=False)
numpy.ma.extras.clump_masked(a)
numpy.ma.extras.clump_unmasked(a)
numpy.ma.extras.compress_cols(a)
numpy.ma.extras.compress_rowcols(x,axis=None)
numpy.ma.extras.compress_rows(a)
numpy.ma.extras.corrcoef(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.extras.count_masked(arr,axis=None)
numpy.ma.extras.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.extras.dot(a,b,strict=False)
numpy.ma.extras.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.flatnotmasked_contiguous(a)
numpy.ma.extras.flatnotmasked_edges(a)
numpy.ma.extras.flatten_inplace(seq)
numpy.ma.extras.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.extras.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.issequence(seq)
numpy.ma.extras.mask_cols(a,axis=None)
numpy.ma.extras.mask_rowcols(a,axis=None)
numpy.ma.extras.mask_rows(a,axis=None)
numpy.ma.extras.masked_all(shape,dtype=float)
numpy.ma.extras.masked_all_like(arr)
numpy.ma.extras.median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.extras.mr_class(self)
numpy.ma.extras.mr_class.__init__(self)
numpy.ma.extras.notmasked_contiguous(a,axis=None)
numpy.ma.extras.notmasked_edges(a,axis=None)
numpy.ma.extras.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.extras.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.union1d(ar1,ar2)
numpy.ma.extras.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.extras.vander(x,n=None)
numpy.ma.flatnotmasked_contiguous(a)
numpy.ma.flatnotmasked_edges(a)
numpy.ma.flatten_inplace(seq)
numpy.ma.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.issequence(seq)
numpy.ma.mask_cols(a,axis=None)
numpy.ma.mask_rowcols(a,axis=None)
numpy.ma.mask_rows(a,axis=None)
numpy.ma.masked_all(shape,dtype=float)
numpy.ma.masked_all_like(arr)
numpy.ma.median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.mr_class(self)
numpy.ma.notmasked_contiguous(a,axis=None)
numpy.ma.notmasked_edges(a,axis=None)
numpy.ma.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.union1d(ar1,ar2)
numpy.ma.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.vander(x,n=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/core.py----------------------------------------
A:numpy.ma.core.nomask->MaskType(0)
A:numpy.ma.core.sig->get_object_signature(self._func)
A:numpy.ma.core.defval->default_filler.get(obj.kind, '?')
A:numpy.ma.core.fval->_recursive_extremum_fill_value(ndtype[name], extremum)
A:numpy.ma.core.fillvalue->numpy.resize(fillvalue, len(dtypedescr))
A:numpy.ma.core.ndtype->numpy.find_common_type([xv.dtype, yv.dtype], [])
A:numpy.ma.core.fill_value->default_fill_value(a)
A:numpy.ma.core.result->self._func.__call__(a, *args, **params).view(MaskedArray)
A:numpy.ma.core.t1->get_fill_value(a)
A:numpy.ma.core.t2->get_fill_value(b)
A:numpy.ma.core.rcls->get_masked_subclass(*arrays)
A:numpy.ma.core.data->filled(umath.less_equal(umath.absolute(x - y), atol + rtol * umath.absolute(y)), masked_equal).view(rcls)
A:numpy.ma.core.a->a.view(MaskedArray).view(MaskedArray)
A:numpy.ma.core.invalid->numpy.logical_not(np.isfinite(result.view(ndarray)))
A:numpy.ma.core.self.__doc__->self.getdoc()
A:numpy.ma.core.self.__name__->getattr(dbfunc, '__name__', str(dbfunc))
A:numpy.ma.core.d->filled(umath.less_equal(umath.absolute(x - y), atol + rtol * umath.absolute(y)), masked_equal)
A:numpy.ma.core.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.core.subtype->type(a)
A:numpy.ma.core.tclass->type(target)
A:numpy.ma.core.t->self.ufunc.reduce(target, **kargs)
A:numpy.ma.core.tr->tr.view(tclass).view(tclass)
A:numpy.ma.core.mr->numpy.core.umath.logical_and.reduce(m, axis)
A:numpy.ma.core.ma->getmaskarray(a)
A:numpy.ma.core.mb->getmaskarray(b)
A:numpy.ma.core.domain->ufunc_domain.get(func, None)
A:numpy.ma.core.exp->_MaskedUnaryOperation(umath.exp)
A:numpy.ma.core.conjugate->_MaskedUnaryOperation(umath.conjugate)
A:numpy.ma.core.sin->_MaskedUnaryOperation(umath.sin)
A:numpy.ma.core.cos->_MaskedUnaryOperation(umath.cos)
A:numpy.ma.core.tan->_MaskedUnaryOperation(umath.tan, 0.0, _DomainTan(1e-35))
A:numpy.ma.core.arctan->_MaskedUnaryOperation(umath.arctan)
A:numpy.ma.core.arcsinh->_MaskedUnaryOperation(umath.arcsinh)
A:numpy.ma.core.sinh->_MaskedUnaryOperation(umath.sinh)
A:numpy.ma.core.cosh->_MaskedUnaryOperation(umath.cosh)
A:numpy.ma.core.tanh->_MaskedUnaryOperation(umath.tanh)
A:numpy.ma.core.absabsolute->_MaskedUnaryOperation(umath.absolute)
A:numpy.ma.core.angle->_MaskedUnaryOperation(angle)
A:numpy.ma.core.fabs->_MaskedUnaryOperation(umath.fabs)
A:numpy.ma.core.negative->_MaskedUnaryOperation(umath.negative)
A:numpy.ma.core.floor->_MaskedUnaryOperation(umath.floor)
A:numpy.ma.core.ceil->_MaskedUnaryOperation(umath.ceil)
A:numpy.ma.core.around->_MaskedUnaryOperation(np.round_)
A:numpy.ma.core.logical_not->_MaskedUnaryOperation(umath.logical_not)
A:numpy.ma.core.sqrt->_MaskedUnaryOperation(umath.sqrt, 0.0, _DomainGreaterEqual(0.0))
A:numpy.ma.core.log->_MaskedUnaryOperation(umath.log, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log2->_MaskedUnaryOperation(umath.log2, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log10->_MaskedUnaryOperation(umath.log10, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.arcsin->_MaskedUnaryOperation(umath.arcsin, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccos->_MaskedUnaryOperation(umath.arccos, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccosh->_MaskedUnaryOperation(umath.arccosh, 1.0, _DomainGreaterEqual(1.0))
A:numpy.ma.core.arctanh->_MaskedUnaryOperation(umath.arctanh, 0.0, _DomainCheckInterval(-1.0 + 1e-15, 1.0 - 1e-15))
A:numpy.ma.core.add->_MaskedBinaryOperation(umath.add)
A:numpy.ma.core.subtract->_MaskedBinaryOperation(umath.subtract)
A:numpy.ma.core.multiply->_MaskedBinaryOperation(umath.multiply, 1, 1)
A:numpy.ma.core.arctan2->_MaskedBinaryOperation(umath.arctan2, 0.0, 1.0)
A:numpy.ma.core.equal->_MaskedBinaryOperation(umath.equal)
A:numpy.ma.core.not_equal->_MaskedBinaryOperation(umath.not_equal)
A:numpy.ma.core.less_equal->_MaskedBinaryOperation(umath.less_equal)
A:numpy.ma.core.greater_equal->_MaskedBinaryOperation(umath.greater_equal)
A:numpy.ma.core.less->_MaskedBinaryOperation(umath.less)
A:numpy.ma.core.greater->_MaskedBinaryOperation(umath.greater)
A:numpy.ma.core.logical_and->_MaskedBinaryOperation(umath.logical_and)
A:numpy.ma.core.logical_or->_MaskedBinaryOperation(umath.logical_or)
A:numpy.ma.core.logical_xor->_MaskedBinaryOperation(umath.logical_xor)
A:numpy.ma.core.bitwise_and->_MaskedBinaryOperation(umath.bitwise_and)
A:numpy.ma.core.bitwise_or->_MaskedBinaryOperation(umath.bitwise_or)
A:numpy.ma.core.bitwise_xor->_MaskedBinaryOperation(umath.bitwise_xor)
A:numpy.ma.core.hypot->_MaskedBinaryOperation(umath.hypot)
A:numpy.ma.core.divide->_DomainedBinaryOperation(umath.divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.true_divide->_DomainedBinaryOperation(umath.true_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.floor_divide->_DomainedBinaryOperation(umath.floor_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.remainder->_DomainedBinaryOperation(umath.remainder, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.fmod->_DomainedBinaryOperation(umath.fmod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.mod->_DomainedBinaryOperation(umath.mod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.mdescr->list(datatype.subdtype)
A:numpy.ma.core.mask->_check_mask_axis(self._mask, axis)
A:numpy.ma.core.dtype->getattr(m1, 'dtype', MaskType)
A:numpy.ma.core.newmask->_check_mask_axis(_mask, axis)
A:numpy.ma.core.flattened->_flatsequence(_flatmask(mask))
A:numpy.ma.core.cond->mask_or(cond, a._mask)
A:numpy.ma.core.cls->type(self)
A:numpy.ma.core.output->numpy.diag(v, k).view(MaskedArray)
A:numpy.ma.core.xf->filled(x)
A:numpy.ma.core.condition->numpy.array(condition, copy=False, subok=False)
A:numpy.ma.core.xnew->filled(x, value)
A:numpy.ma.core.masked_print_option->_MaskedPrintOption('--')
A:numpy.ma.core._print_templates->dict(long_std='masked_%(name)s(data =\n %(data)s,\n       %(nlen)s mask =\n %(mask)s,\n %(nlen)s fill_value = %(fill)s)\n', short_std='masked_%(name)s(data = %(data)s,\n       %(nlen)s mask = %(mask)s,\n%(nlen)s  fill_value = %(fill)s)\n', long_flx='masked_%(name)s(data =\n %(data)s,\n       %(nlen)s mask =\n %(mask)s,\n%(nlen)s  fill_value = %(fill)s,\n      %(nlen)s dtype = %(dtype)s)\n', short_flx='masked_%(name)s(data = %(data)s,\n%(nlen)s        mask = %(mask)s,\n%(nlen)s  fill_value = %(fill)s,\n%(nlen)s       dtype = %(dtype)s)\n')
A:numpy.ma.core.out->property(fget=_get_data).take(indices, axis=axis, mode=mode).view(cls)
A:numpy.ma.core.out._mask->getmask(a)
A:numpy.ma.core.newshape->list(out.shape)
A:numpy.ma.core.out.shape->tuple(flatten_sequence(newshape))
A:numpy.ma.core.args->list(args)
A:numpy.ma.core.instance->list(args).pop(0)
A:numpy.ma.core._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype))
A:numpy.ma.core.self.dataiter[index]->getdata(value)
A:numpy.ma.core.self.maskiter[index]->getmaskarray(value)
A:numpy.ma.core._data->property(fget=_get_data)
A:numpy.ma.core._baseclass->type(obj)
A:numpy.ma.core.mdtype->make_mask_descr(dtype)
A:numpy.ma.core._data._mask->numpy.void(mask)
A:numpy.ma.core._data._fill_value->_check_fill_value(fill_value, _data.dtype)
A:numpy.ma.core._data._hardmask->getattr(data, '_hardmask', False)
A:numpy.ma.core._dict->dict(_fill_value=getattr(obj, '_fill_value', None), _hardmask=getattr(obj, '_hardmask', False), _sharedmask=getattr(obj, '_sharedmask', False), _isfield=getattr(obj, '_isfield', False), _baseclass=getattr(obj, '_baseclass', _baseclass), _optinfo=_optinfo, _basedict=_optinfo)
A:numpy.ma.core.self._fill_value->_check_fill_value(None, self.dtype)
A:numpy.ma.core.result._mask->numpy.logical_or(m, invalid)
A:numpy.ma.core.output._mask->numpy.diag(v._mask, k)
A:numpy.ma.core.newtype->numpy.dtype(newtype)
A:numpy.ma.core.output._fill_value->_check_fill_value(self._fill_value, newtype)
A:numpy.ma.core.dout->dout.view(type(self)).view(type(self))
A:numpy.ma.core.self._mask_mask->make_mask_none(self.shape, self.dtype)
A:numpy.ma.core._mask[indx]->tuple([True] * nbfields)
A:numpy.ma.core._dtype->numpy.ndarray.__getattribute__(_data, 'dtype')
A:numpy.ma.core.nbfields->len(_dtype.names or ())
A:numpy.ma.core._maskself._mask->make_mask_none(self.shape, _dtype)
A:numpy.ma.core.mval->tuple([False] * nbfields)
A:numpy.ma.core.mindx->mask_or(_mask[indx], mval, copy=True)
A:numpy.ma.core.idtype->numpy.ndarray.__getattribute__(self, 'dtype')
A:numpy.ma.core.current_mask->numpy.ndarray.__getattribute__(self, '_mask')
A:numpy.ma.core.current_maskself._mask->make_mask_none(self.shape, idtype)
A:numpy.ma.core.recordmask->property(fget=_get_recordmask)
A:numpy.ma.core.hardmask->property(fget=lambda self: self._hardmask, doc='Hardness of the mask')
A:numpy.ma.core.self._mask->mask_or(self._mask, new_mask)
A:numpy.ma.core.sharedmask->property(fget=lambda self: self._sharedmask, doc='Share status of the mask (read-only).')
A:numpy.ma.core.baseclass->property(fget=lambda self: self._baseclass, doc='Class of the underlying data (read-only).')
A:numpy.ma.core.y->masked_array(b, copy=False)
A:numpy.ma.core.flat->property(fget=_get_flat, fset=_set_flat, doc='Flat version of the array.')
A:numpy.ma.core.target->target.filled(self.fill_value_func(target)).view(type(target)).filled(self.fill_value_func(target)).view(type(target))
A:numpy.ma.core._new->property(fget=_get_data).compress(condition, axis=axis, out=out).view(type(self))
A:numpy.ma.core._new._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).compress(condition, axis=axis)
A:numpy.ma.core.r->self._data.tolist()
A:numpy.ma.core.res->self.filled(self.fill_value)
A:numpy.ma.core.rdtype->_recursive_make_descr(self.dtype, 'O')
A:numpy.ma.core.n->len(self.shape)
A:numpy.ma.core.parameters->dict(name=name, nlen=' ' * len(name), data=str(self), mask=str(self._mask), fill=str(self.fill_value), dtype=str(self.dtype))
A:numpy.ma.core.omask->getattr(other, '_mask', nomask)
A:numpy.ma.core.check->numpy.ndarray.__ne__(self.filled(0), odata).view(type(self))
A:numpy.ma.core.odata->filled(other, 0)
A:numpy.ma.core.other_data->getdata(other)
A:numpy.ma.core.dom_mask->_DomainSafeDivide().__call__(self._data, other_data)
A:numpy.ma.core.other_mask->getmask(other)
A:numpy.ma.core.new_mask->mask_or(other_mask, invalid)
A:numpy.ma.core.imag->property(fget=get_imag, doc='Imaginary part.')
A:numpy.ma.core.real->property(fget=get_real, doc='Real part')
A:numpy.ma.core.ls->len(s)
A:numpy.ma.core.n1->numpy.size(m, axis)
A:numpy.ma.core.n2->mask_or(getmask(x), getmask(y)).astype(int).sum(axis)
A:numpy.ma.core.flatten->_arraymethod('flatten')
A:numpy.ma.core.r._mask->numpy.ndarray.ravel(self._mask).reshape(r.shape)
A:numpy.ma.core.repeat->_frommethod('repeat')
A:numpy.ma.core.indices->indices.filled(0).filled(0)
A:numpy.ma.core.values->narray(values, copy=False, subok=True)
A:numpy.ma.core.D->self.diagonal(offset=offset, axis1=axis1, axis2=axis2)
A:numpy.ma.core.rndim->getattr(result, 'ndim', 0)
A:numpy.ma.core.outmask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).take(indices, axis=axis, mode=mode)
A:numpy.ma.core.outmaskout._mask->make_mask_none(out.shape)
A:numpy.ma.core.dsum->self.sum(axis=axis, dtype=dtype)
A:numpy.ma.core.cnt->self.count(axis=axis)
A:numpy.ma.core.outmask.flat->getattr(result, '_mask', nomask)
A:numpy.ma.core.danom->self.anom(axis=axis, dtype=dtype)
A:numpy.ma.core.dvar->sqrt(dvar)
A:numpy.ma.core.dvar._mask->mask_or(self._mask.all(axis), cnt <= 0)
A:numpy.ma.core.filler->maximum_fill_value(a)
A:numpy.ma.core.idx->numpy.indices(self.shape)
A:numpy.ma.core.idx[axis]->self.filled(filler).argsort(axis=axis, kind=kind, order=order)
A:numpy.ma.core.idx_l->numpy.indices(self.shape).tolist()
A:numpy.ma.core.out.flat->self.max(axis=axis, out=out, fill_value=fill_value)
A:numpy.ma.core.min_value->self.min(axis=axis, fill_value=fill_value)
A:numpy.ma.core.maskindices->getattr(indices, '_mask', nomask)
A:numpy.ma.core.copy->_frommethod('copy')
A:numpy.ma.core.diagonal->_frommethod('diagonal')
A:numpy.ma.core.transpose->_arraymethod('transpose')
A:numpy.ma.core.T->property(fget=lambda self: self.transpose())
A:numpy.ma.core.swapaxes->_frommethod('swapaxes')
A:numpy.ma.core.clip->_arraymethod('clip', onmask=False)
A:numpy.ma.core.squeeze->_arraymethod('squeeze')
A:numpy.ma.core.record->numpy.ndarray(shape=self.shape, dtype=[('_data', ddtype), ('_mask', mdtype)])
A:numpy.ma.core.copied->MaskedArray.__new__(type(self), self, copy=True)
A:numpy.ma.core.copied.__dict__[k]->deepcopy(v, memo)
A:numpy.ma.core.self._mask[indx]->getattr(value, '_mask', False)
A:numpy.ma.core.p->str(p)
A:numpy.ma.core._datadata->numpy.array(0.0)
A:numpy.ma.core._maskmask->numpy.array(True)
A:numpy.ma.core.maskedmasked_singleton->MaskedConstant()
A:numpy.ma.core.method->getattr(np, method_name)
A:numpy.ma.core.all->_frommethod('all')
A:numpy.ma.core.anomaliesanom->_frommethod('anom')
A:numpy.ma.core.any->_frommethod('any')
A:numpy.ma.core.compress->_frommethod('compress', reversed=True)
A:numpy.ma.core.cumprod->_frommethod('cumprod')
A:numpy.ma.core.cumsum->_frommethod('cumsum')
A:numpy.ma.core.harden_mask->_frommethod('harden_mask')
A:numpy.ma.core.ids->_frommethod('ids')
A:numpy.ma.core.maximum->_maximum_operation()
A:numpy.ma.core.mean->_frommethod('mean')
A:numpy.ma.core.minimum->_minimum_operation()
A:numpy.ma.core.nonzero->_frommethod('nonzero')
A:numpy.ma.core.prod->_frommethod('prod')
A:numpy.ma.core.product->_frommethod('prod')
A:numpy.ma.core.ravel->_frommethod('ravel')
A:numpy.ma.core.shrink_mask->_frommethod('shrink_mask')
A:numpy.ma.core.soften_mask->_frommethod('soften_mask')
A:numpy.ma.core.std->_frommethod('std')
A:numpy.ma.core.sum->_frommethod('sum')
A:numpy.ma.core.trace->_frommethod('trace')
A:numpy.ma.core.var->_frommethod('var')
A:numpy.ma.core.fa->filled(a, 0).ravel()
A:numpy.ma.core.fb->filled(b, 0).ravel()
A:numpy.ma.core.basetype->type(a)
A:numpy.ma.core.indx->numpy.indices(a.shape).tolist()
A:numpy.ma.core.indx[axis]->filled(a, filler).argsort(axis=axis, kind=kind, order=order)
A:numpy.ma.core.dm->array(d, mask=m, copy=False)
A:numpy.ma.core.data._mask->array(d, mask=m, copy=False).reshape(d.shape)
A:numpy.ma.core.a._mask->make_mask_none(a.shape, a.dtype)
A:numpy.ma.core.valmask->getmaskarray(values)
A:numpy.ma.core._tmp->narray(a, copy=False).reshape(new_shape, order=order)
A:numpy.ma.core.fc->filled(condition, 0).astype(MaskType)
A:numpy.ma.core.notfc->numpy.logical_not(fc)
A:numpy.ma.core.xv->getdata(x)
A:numpy.ma.core.yv->getdata(y)
A:numpy.ma.core._maskd._mask->numpy.zeros(fc.shape, dtype=MaskType)
A:numpy.ma.core.c->filled(indices, 0)
A:numpy.ma.core.outputmask->make_mask(mask_or(outputmask, getmask(indices)), copy=0, shrink=True)
A:numpy.ma.core.inner.__doc__->doc_note(np.inner.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.outer.__doc__->doc_note(np.outer.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.x->masked_array(a, copy=False)
A:numpy.ma.core.xinf->numpy.isinf(masked_array(x, copy=False, mask=m)).filled(False)
A:numpy.ma.core.F->open(F, 'r')
A:numpy.ma.core.self._func->getattr(np, funcname)
A:numpy.ma.core.doc->getattr(self._func, '__doc__', None)
A:numpy.ma.core.common_params->set(params).intersection(_extras)
A:numpy.ma.core._extras[p]->params.pop(p)
A:numpy.ma.core.result.fill_value->_extras.get('fill_value', None)
A:numpy.ma.core.result._hardmask->bool(_extras.get('hard_mask', False))
A:numpy.ma.core.arange->_convert2ma('arange', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.empty->_convert2ma('empty', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.empty_like->_convert2ma('empty_like')
A:numpy.ma.core.frombuffer->_convert2ma('frombuffer')
A:numpy.ma.core.fromfunction->_convert2ma('fromfunction')
A:numpy.ma.core.identity->_convert2ma('identity', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.ones->_convert2ma('ones', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.zeros->_convert2ma('zeros', params=dict(fill_value=None, hardmask=False))
numpy.ma.MAError(Exception)
numpy.ma.MaskError(MAError)
numpy.ma.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,**options)
numpy.ma.MaskedArray.__add__(self,other)
numpy.ma.MaskedArray.__array_finalize__(self,obj)
numpy.ma.MaskedArray.__array_wrap__(self,obj,context=None)
numpy.ma.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.MaskedArray.__div__(self,other)
numpy.ma.MaskedArray.__eq__(self,other)
numpy.ma.MaskedArray.__float__(self)
numpy.ma.MaskedArray.__floordiv__(self,other)
numpy.ma.MaskedArray.__getitem__(self,indx)
numpy.ma.MaskedArray.__getslice__(self,i,j)
numpy.ma.MaskedArray.__getstate__(self)
numpy.ma.MaskedArray.__iadd__(self,other)
numpy.ma.MaskedArray.__idiv__(self,other)
numpy.ma.MaskedArray.__ifloordiv__(self,other)
numpy.ma.MaskedArray.__imul__(self,other)
numpy.ma.MaskedArray.__int__(self)
numpy.ma.MaskedArray.__ipow__(self,other)
numpy.ma.MaskedArray.__isub__(self,other)
numpy.ma.MaskedArray.__itruediv__(self,other)
numpy.ma.MaskedArray.__mul__(self,other)
numpy.ma.MaskedArray.__ne__(self,other)
numpy.ma.MaskedArray.__pow__(self,other)
numpy.ma.MaskedArray.__radd__(self,other)
numpy.ma.MaskedArray.__reduce__(self)
numpy.ma.MaskedArray.__repr__(self)
numpy.ma.MaskedArray.__rfloordiv__(self,other)
numpy.ma.MaskedArray.__rmul__(self,other)
numpy.ma.MaskedArray.__rpow__(self,other)
numpy.ma.MaskedArray.__rsub__(self,other)
numpy.ma.MaskedArray.__rtruediv__(self,other)
numpy.ma.MaskedArray.__setitem__(self,indx,value)
numpy.ma.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.MaskedArray.__setslice__(self,i,j,value)
numpy.ma.MaskedArray.__setstate__(self,state)
numpy.ma.MaskedArray.__str__(self)
numpy.ma.MaskedArray.__sub__(self,other)
numpy.ma.MaskedArray.__truediv__(self,other)
numpy.ma.MaskedArray._get_data(self)
numpy.ma.MaskedArray._get_flat(self)
numpy.ma.MaskedArray._get_mask(self)
numpy.ma.MaskedArray._get_recordmask(self)
numpy.ma.MaskedArray._set_flat(self,value)
numpy.ma.MaskedArray._set_recordmask(self)
numpy.ma.MaskedArray._update_from(self,obj)
numpy.ma.MaskedArray.all(self,axis=None,out=None)
numpy.ma.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.MaskedArray.any(self,axis=None,out=None)
numpy.ma.MaskedArray.argmax(self,axis=None,fill_value=None,out=None)
numpy.ma.MaskedArray.argmin(self,axis=None,fill_value=None,out=None)
numpy.ma.MaskedArray.argsort(self,axis=None,kind='quicksort',order=None,fill_value=None)
numpy.ma.MaskedArray.astype(self,newtype)
numpy.ma.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.MaskedArray.compressed(self)
numpy.ma.MaskedArray.count(self,axis=None)
numpy.ma.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.filled(self,fill_value=None)
numpy.ma.MaskedArray.get_fill_value(self)
numpy.ma.MaskedArray.get_imag(self)
numpy.ma.MaskedArray.get_real(self)
numpy.ma.MaskedArray.harden_mask(self)
numpy.ma.MaskedArray.ids(self)
numpy.ma.MaskedArray.iscontiguous(self)
numpy.ma.MaskedArray.max(self,axis=None,out=None,fill_value=None)
numpy.ma.MaskedArray.mean(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.min(self,axis=None,out=None,fill_value=None)
numpy.ma.MaskedArray.mini(self,axis=None)
numpy.ma.MaskedArray.nonzero(self)
numpy.ma.MaskedArray.prod(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.ptp(self,axis=None,out=None,fill_value=None)
numpy.ma.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.MaskedArray.ravel(self)
numpy.ma.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.MaskedArray.set_fill_value(self,value=None)
numpy.ma.MaskedArray.shrink_mask(self)
numpy.ma.MaskedArray.soften_mask(self)
numpy.ma.MaskedArray.sort(self,axis=-1,kind='quicksort',order=None,endwith=True,fill_value=None)
numpy.ma.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.ma.MaskedArray.sum(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.MaskedArray.toflex(self)
numpy.ma.MaskedArray.tolist(self,fill_value=None)
numpy.ma.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.MaskedArray.unshare_mask(self)
numpy.ma.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.ma.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.MaskedConstant(self)
numpy.ma.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.MaskedConstant.__array_wrap__(self,obj)
numpy.ma.MaskedConstant.__reduce__(self)
numpy.ma.MaskedConstant.__repr__(self)
numpy.ma.MaskedConstant.__str__(self)
numpy.ma.MaskedConstant.flatten(self)
numpy.ma.MaskedIterator(self,ma)
numpy.ma.MaskedIterator.__getitem__(self,indx)
numpy.ma.MaskedIterator.__iter__(self)
numpy.ma.MaskedIterator.__next__(self)
numpy.ma.MaskedIterator.__setitem__(self,index,value)
numpy.ma._DomainCheckInterval(self,a,b)
numpy.ma._DomainGreater(self,critical_value)
numpy.ma._DomainGreaterEqual(self,critical_value)
numpy.ma._DomainSafeDivide(self,tolerance=None)
numpy.ma._DomainTan(self,eps)
numpy.ma._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma._DomainedBinaryOperation.__str__(self)
numpy.ma._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma._MaskedBinaryOperation.__str__(self)
numpy.ma._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma._MaskedBinaryOperation.outer(self,a,b)
numpy.ma._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma._MaskedPrintOption(self,display)
numpy.ma._MaskedPrintOption.__str__(self)
numpy.ma._MaskedPrintOption.display(self)
numpy.ma._MaskedPrintOption.enable(self,shrink=1)
numpy.ma._MaskedPrintOption.enabled(self)
numpy.ma._MaskedPrintOption.set_display(self,s)
numpy.ma._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma._MaskedUnaryOperation.__str__(self)
numpy.ma._arraymethod(self,funcname,onmask=True)
numpy.ma._arraymethod.__get__(self,obj,objtype=None)
numpy.ma._arraymethod.getdoc(self)
numpy.ma._check_fill_value(fill_value,ndtype)
numpy.ma._check_mask_axis(mask,axis)
numpy.ma._convert2ma(self,funcname,params=None)
numpy.ma._convert2ma.getdoc(self)
numpy.ma._extrema_operation(self,a,b=None)
numpy.ma._extrema_operation.outer(self,a,b)
numpy.ma._extrema_operation.reduce(self,target,axis=None)
numpy.ma._frommethod(self,methodname,reversed=False)
numpy.ma._frommethod.getdoc(self)
numpy.ma._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma._maximum_operation(self)
numpy.ma._minimum_operation(self)
numpy.ma._recursive_extremum_fill_value(ndtype,extremum)
numpy.ma._recursive_filled(a,mask,fill_value)
numpy.ma._recursive_make_descr(datatype,newtype=bool_)
numpy.ma._recursive_printoption(result,mask,printopt)
numpy.ma._recursive_set_default_fill_value(dtypedescr)
numpy.ma._recursive_set_fill_value(fillvalue,dtypedescr)
numpy.ma.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.allequal(a,b,fill_value=True)
numpy.ma.argmax(a,axis=None,fill_value=None)
numpy.ma.argmin(a,axis=None,fill_value=None)
numpy.ma.argsort(a,axis=None,kind='quicksort',order=None,fill_value=None)
numpy.ma.array(data,dtype=None,copy=False,order=False,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.asanyarray(a,dtype=None)
numpy.ma.asarray(a,dtype=None,order=None)
numpy.ma.choose(indices,choices,out=None,mode='raise')
numpy.ma.common_fill_value(a,b)
numpy.ma.compressed(x)
numpy.ma.concatenate(arrays,axis=0)
numpy.ma.core.MAError(Exception)
numpy.ma.core.MaskError(MAError)
numpy.ma.core.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,**options)
numpy.ma.core.MaskedArray.__add__(self,other)
numpy.ma.core.MaskedArray.__array_finalize__(self,obj)
numpy.ma.core.MaskedArray.__array_wrap__(self,obj,context=None)
numpy.ma.core.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.core.MaskedArray.__div__(self,other)
numpy.ma.core.MaskedArray.__eq__(self,other)
numpy.ma.core.MaskedArray.__float__(self)
numpy.ma.core.MaskedArray.__floordiv__(self,other)
numpy.ma.core.MaskedArray.__getitem__(self,indx)
numpy.ma.core.MaskedArray.__getslice__(self,i,j)
numpy.ma.core.MaskedArray.__getstate__(self)
numpy.ma.core.MaskedArray.__iadd__(self,other)
numpy.ma.core.MaskedArray.__idiv__(self,other)
numpy.ma.core.MaskedArray.__ifloordiv__(self,other)
numpy.ma.core.MaskedArray.__imul__(self,other)
numpy.ma.core.MaskedArray.__int__(self)
numpy.ma.core.MaskedArray.__ipow__(self,other)
numpy.ma.core.MaskedArray.__isub__(self,other)
numpy.ma.core.MaskedArray.__itruediv__(self,other)
numpy.ma.core.MaskedArray.__mul__(self,other)
numpy.ma.core.MaskedArray.__ne__(self,other)
numpy.ma.core.MaskedArray.__new__(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,**options)
numpy.ma.core.MaskedArray.__pow__(self,other)
numpy.ma.core.MaskedArray.__radd__(self,other)
numpy.ma.core.MaskedArray.__reduce__(self)
numpy.ma.core.MaskedArray.__repr__(self)
numpy.ma.core.MaskedArray.__rfloordiv__(self,other)
numpy.ma.core.MaskedArray.__rmul__(self,other)
numpy.ma.core.MaskedArray.__rpow__(self,other)
numpy.ma.core.MaskedArray.__rsub__(self,other)
numpy.ma.core.MaskedArray.__rtruediv__(self,other)
numpy.ma.core.MaskedArray.__setitem__(self,indx,value)
numpy.ma.core.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.core.MaskedArray.__setslice__(self,i,j,value)
numpy.ma.core.MaskedArray.__setstate__(self,state)
numpy.ma.core.MaskedArray.__str__(self)
numpy.ma.core.MaskedArray.__sub__(self,other)
numpy.ma.core.MaskedArray.__truediv__(self,other)
numpy.ma.core.MaskedArray._get_data(self)
numpy.ma.core.MaskedArray._get_flat(self)
numpy.ma.core.MaskedArray._get_mask(self)
numpy.ma.core.MaskedArray._get_recordmask(self)
numpy.ma.core.MaskedArray._set_flat(self,value)
numpy.ma.core.MaskedArray._set_recordmask(self)
numpy.ma.core.MaskedArray._update_from(self,obj)
numpy.ma.core.MaskedArray.all(self,axis=None,out=None)
numpy.ma.core.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.core.MaskedArray.any(self,axis=None,out=None)
numpy.ma.core.MaskedArray.argmax(self,axis=None,fill_value=None,out=None)
numpy.ma.core.MaskedArray.argmin(self,axis=None,fill_value=None,out=None)
numpy.ma.core.MaskedArray.argsort(self,axis=None,kind='quicksort',order=None,fill_value=None)
numpy.ma.core.MaskedArray.astype(self,newtype)
numpy.ma.core.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.core.MaskedArray.compressed(self)
numpy.ma.core.MaskedArray.count(self,axis=None)
numpy.ma.core.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.filled(self,fill_value=None)
numpy.ma.core.MaskedArray.get_fill_value(self)
numpy.ma.core.MaskedArray.get_imag(self)
numpy.ma.core.MaskedArray.get_real(self)
numpy.ma.core.MaskedArray.harden_mask(self)
numpy.ma.core.MaskedArray.ids(self)
numpy.ma.core.MaskedArray.iscontiguous(self)
numpy.ma.core.MaskedArray.max(self,axis=None,out=None,fill_value=None)
numpy.ma.core.MaskedArray.mean(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.min(self,axis=None,out=None,fill_value=None)
numpy.ma.core.MaskedArray.mini(self,axis=None)
numpy.ma.core.MaskedArray.nonzero(self)
numpy.ma.core.MaskedArray.prod(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.ptp(self,axis=None,out=None,fill_value=None)
numpy.ma.core.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.core.MaskedArray.ravel(self)
numpy.ma.core.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.core.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.core.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.core.MaskedArray.set_fill_value(self,value=None)
numpy.ma.core.MaskedArray.shrink_mask(self)
numpy.ma.core.MaskedArray.soften_mask(self)
numpy.ma.core.MaskedArray.sort(self,axis=-1,kind='quicksort',order=None,endwith=True,fill_value=None)
numpy.ma.core.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.ma.core.MaskedArray.sum(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.core.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.core.MaskedArray.toflex(self)
numpy.ma.core.MaskedArray.tolist(self,fill_value=None)
numpy.ma.core.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.core.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.core.MaskedArray.unshare_mask(self)
numpy.ma.core.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.ma.core.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.core.MaskedConstant(self)
numpy.ma.core.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.core.MaskedConstant.__array_wrap__(self,obj)
numpy.ma.core.MaskedConstant.__new__(self)
numpy.ma.core.MaskedConstant.__reduce__(self)
numpy.ma.core.MaskedConstant.__repr__(self)
numpy.ma.core.MaskedConstant.__str__(self)
numpy.ma.core.MaskedConstant.flatten(self)
numpy.ma.core.MaskedIterator(self,ma)
numpy.ma.core.MaskedIterator.__getitem__(self,indx)
numpy.ma.core.MaskedIterator.__init__(self,ma)
numpy.ma.core.MaskedIterator.__iter__(self)
numpy.ma.core.MaskedIterator.__next__(self)
numpy.ma.core.MaskedIterator.__setitem__(self,index,value)
numpy.ma.core._DomainCheckInterval(self,a,b)
numpy.ma.core._DomainCheckInterval.__init__(self,a,b)
numpy.ma.core._DomainGreater(self,critical_value)
numpy.ma.core._DomainGreater.__init__(self,critical_value)
numpy.ma.core._DomainGreaterEqual(self,critical_value)
numpy.ma.core._DomainGreaterEqual.__init__(self,critical_value)
numpy.ma.core._DomainSafeDivide(self,tolerance=None)
numpy.ma.core._DomainSafeDivide.__init__(self,tolerance=None)
numpy.ma.core._DomainTan(self,eps)
numpy.ma.core._DomainTan.__init__(self,eps)
numpy.ma.core._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._DomainedBinaryOperation.__init__(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._DomainedBinaryOperation.__str__(self)
numpy.ma.core._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.__init__(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.__str__(self)
numpy.ma.core._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma.core._MaskedBinaryOperation.outer(self,a,b)
numpy.ma.core._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma.core._MaskedPrintOption(self,display)
numpy.ma.core._MaskedPrintOption.__init__(self,display)
numpy.ma.core._MaskedPrintOption.__str__(self)
numpy.ma.core._MaskedPrintOption.display(self)
numpy.ma.core._MaskedPrintOption.enable(self,shrink=1)
numpy.ma.core._MaskedPrintOption.enabled(self)
numpy.ma.core._MaskedPrintOption.set_display(self,s)
numpy.ma.core._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma.core._MaskedUnaryOperation.__init__(self,mufunc,fill=0,domain=None)
numpy.ma.core._MaskedUnaryOperation.__str__(self)
numpy.ma.core._arraymethod(self,funcname,onmask=True)
numpy.ma.core._arraymethod.__get__(self,obj,objtype=None)
numpy.ma.core._arraymethod.__init__(self,funcname,onmask=True)
numpy.ma.core._arraymethod.getdoc(self)
numpy.ma.core._check_fill_value(fill_value,ndtype)
numpy.ma.core._check_mask_axis(mask,axis)
numpy.ma.core._convert2ma(self,funcname,params=None)
numpy.ma.core._convert2ma.__init__(self,funcname,params=None)
numpy.ma.core._convert2ma.getdoc(self)
numpy.ma.core._extrema_operation(self,a,b=None)
numpy.ma.core._extrema_operation.__call__(self,a,b=None)
numpy.ma.core._extrema_operation.outer(self,a,b)
numpy.ma.core._extrema_operation.reduce(self,target,axis=None)
numpy.ma.core._frommethod(self,methodname,reversed=False)
numpy.ma.core._frommethod.__init__(self,methodname,reversed=False)
numpy.ma.core._frommethod.getdoc(self)
numpy.ma.core._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.core._maximum_operation(self)
numpy.ma.core._maximum_operation.__init__(self)
numpy.ma.core._minimum_operation(self)
numpy.ma.core._minimum_operation.__init__(self)
numpy.ma.core._recursive_extremum_fill_value(ndtype,extremum)
numpy.ma.core._recursive_filled(a,mask,fill_value)
numpy.ma.core._recursive_make_descr(datatype,newtype=bool_)
numpy.ma.core._recursive_printoption(result,mask,printopt)
numpy.ma.core._recursive_set_default_fill_value(dtypedescr)
numpy.ma.core._recursive_set_fill_value(fillvalue,dtypedescr)
numpy.ma.core.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.core.allequal(a,b,fill_value=True)
numpy.ma.core.argmax(a,axis=None,fill_value=None)
numpy.ma.core.argmin(a,axis=None,fill_value=None)
numpy.ma.core.argsort(a,axis=None,kind='quicksort',order=None,fill_value=None)
numpy.ma.core.array(data,dtype=None,copy=False,order=False,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.core.asanyarray(a,dtype=None)
numpy.ma.core.asarray(a,dtype=None,order=None)
numpy.ma.core.choose(indices,choices,out=None,mode='raise')
numpy.ma.core.common_fill_value(a,b)
numpy.ma.core.compressed(x)
numpy.ma.core.concatenate(arrays,axis=0)
numpy.ma.core.count(a,axis=None)
numpy.ma.core.default_fill_value(obj)
numpy.ma.core.diag(v,k=0)
numpy.ma.core.doc_note(initialdoc,note)
numpy.ma.core.dump(a,F)
numpy.ma.core.dumps(a)
numpy.ma.core.expand_dims(x,axis)
numpy.ma.core.filled(a,fill_value=None)
numpy.ma.core.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.core.flatten_mask(mask)
numpy.ma.core.flatten_structured_array(a)
numpy.ma.core.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.core.fromflex(fxarray)
numpy.ma.core.get_fill_value(a)
numpy.ma.core.get_masked_subclass(*arrays)
numpy.ma.core.get_object_signature(obj)
numpy.ma.core.getdata(a,subok=True)
numpy.ma.core.getmask(a)
numpy.ma.core.getmaskarray(arr)
numpy.ma.core.inner(a,b)
numpy.ma.core.isMaskedArray(x)
numpy.ma.core.is_mask(m)
numpy.ma.core.is_masked(x)
numpy.ma.core.left_shift(a,n)
numpy.ma.core.load(F)
numpy.ma.core.loads(strg)
numpy.ma.core.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.core.make_mask_descr(ndtype)
numpy.ma.core.make_mask_none(newshape,dtype=None)
numpy.ma.core.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.core.masked_equal(x,value,copy=True)
numpy.ma.core.masked_greater(x,value,copy=True)
numpy.ma.core.masked_greater_equal(x,value,copy=True)
numpy.ma.core.masked_inside(x,v1,v2,copy=True)
numpy.ma.core.masked_invalid(a,copy=True)
numpy.ma.core.masked_less(x,value,copy=True)
numpy.ma.core.masked_less_equal(x,value,copy=True)
numpy.ma.core.masked_not_equal(x,value,copy=True)
numpy.ma.core.masked_object(x,value,copy=True,shrink=True)
numpy.ma.core.masked_outside(x,v1,v2,copy=True)
numpy.ma.core.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.core.masked_where(condition,a,copy=True)
numpy.ma.core.max(obj,axis=None,out=None,fill_value=None)
numpy.ma.core.maximum_fill_value(obj)
numpy.ma.core.min(obj,axis=None,out=None,fill_value=None)
numpy.ma.core.minimum_fill_value(obj)
numpy.ma.core.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False)
numpy.ma.core.mvoid.__getitem__(self,indx)
numpy.ma.core.mvoid.__iter__(self)
numpy.ma.core.mvoid.__len__(self)
numpy.ma.core.mvoid.__new__(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False)
numpy.ma.core.mvoid.__repr__(self)
numpy.ma.core.mvoid.__setitem__(self,indx,value)
numpy.ma.core.mvoid.__str__(self)
numpy.ma.core.mvoid._get_data(self)
numpy.ma.core.mvoid.filled(self,fill_value=None)
numpy.ma.core.mvoid.tolist(self)
numpy.ma.core.outer(a,b)
numpy.ma.core.power(a,b,third=None)
numpy.ma.core.ptp(obj,axis=None,out=None,fill_value=None)
numpy.ma.core.put(a,indices,values,mode='raise')
numpy.ma.core.putmask(a,mask,values)
numpy.ma.core.rank(obj)
numpy.ma.core.reshape(a,new_shape,order='C')
numpy.ma.core.resize(x,new_shape)
numpy.ma.core.right_shift(a,n)
numpy.ma.core.round_(a,decimals=0,out=None)
numpy.ma.core.set_fill_value(a,fill_value)
numpy.ma.core.shape(obj)
numpy.ma.core.size(obj,axis=None)
numpy.ma.core.sort(a,axis=-1,kind='quicksort',order=None,endwith=True,fill_value=None)
numpy.ma.core.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.core.transpose(a,axes=None)
numpy.ma.core.where(condition,x=None,y=None)
numpy.ma.count(a,axis=None)
numpy.ma.default_fill_value(obj)
numpy.ma.diag(v,k=0)
numpy.ma.doc_note(initialdoc,note)
numpy.ma.dump(a,F)
numpy.ma.dumps(a)
numpy.ma.expand_dims(x,axis)
numpy.ma.filled(a,fill_value=None)
numpy.ma.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.flatten_mask(mask)
numpy.ma.flatten_structured_array(a)
numpy.ma.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.fromflex(fxarray)
numpy.ma.get_fill_value(a)
numpy.ma.get_masked_subclass(*arrays)
numpy.ma.get_object_signature(obj)
numpy.ma.getdata(a,subok=True)
numpy.ma.getmask(a)
numpy.ma.getmaskarray(arr)
numpy.ma.inner(a,b)
numpy.ma.isMaskedArray(x)
numpy.ma.is_mask(m)
numpy.ma.is_masked(x)
numpy.ma.left_shift(a,n)
numpy.ma.load(F)
numpy.ma.loads(strg)
numpy.ma.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.make_mask_descr(ndtype)
numpy.ma.make_mask_none(newshape,dtype=None)
numpy.ma.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.masked_equal(x,value,copy=True)
numpy.ma.masked_greater(x,value,copy=True)
numpy.ma.masked_greater_equal(x,value,copy=True)
numpy.ma.masked_inside(x,v1,v2,copy=True)
numpy.ma.masked_invalid(a,copy=True)
numpy.ma.masked_less(x,value,copy=True)
numpy.ma.masked_less_equal(x,value,copy=True)
numpy.ma.masked_not_equal(x,value,copy=True)
numpy.ma.masked_object(x,value,copy=True,shrink=True)
numpy.ma.masked_outside(x,v1,v2,copy=True)
numpy.ma.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.masked_where(condition,a,copy=True)
numpy.ma.max(obj,axis=None,out=None,fill_value=None)
numpy.ma.maximum_fill_value(obj)
numpy.ma.min(obj,axis=None,out=None,fill_value=None)
numpy.ma.minimum_fill_value(obj)
numpy.ma.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False)
numpy.ma.mvoid.__getitem__(self,indx)
numpy.ma.mvoid.__iter__(self)
numpy.ma.mvoid.__len__(self)
numpy.ma.mvoid.__repr__(self)
numpy.ma.mvoid.__setitem__(self,indx,value)
numpy.ma.mvoid.__str__(self)
numpy.ma.mvoid._get_data(self)
numpy.ma.mvoid.filled(self,fill_value=None)
numpy.ma.mvoid.tolist(self)
numpy.ma.outer(a,b)
numpy.ma.power(a,b,third=None)
numpy.ma.ptp(obj,axis=None,out=None,fill_value=None)
numpy.ma.put(a,indices,values,mode='raise')
numpy.ma.putmask(a,mask,values)
numpy.ma.rank(obj)
numpy.ma.reshape(a,new_shape,order='C')
numpy.ma.resize(x,new_shape)
numpy.ma.right_shift(a,n)
numpy.ma.round_(a,decimals=0,out=None)
numpy.ma.set_fill_value(a,fill_value)
numpy.ma.shape(obj)
numpy.ma.size(obj,axis=None)
numpy.ma.sort(a,axis=-1,kind='quicksort',order=None,endwith=True,fill_value=None)
numpy.ma.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.transpose(a,axes=None)
numpy.ma.where(condition,x=None,y=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/testutils.py----------------------------------------
A:numpy.ma.testutils.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.testutils.d1->filled(a)
A:numpy.ma.testutils.d2->filled(b)
A:numpy.ma.testutils.x->masked_array(x, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.y->masked_array(y, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.d->numpy.less_equal(umath.absolute(x - y), atol + rtol * umath.absolute(y))
A:numpy.ma.testutils.msg->build_err_msg([x, y], err_msg=err_msg, verbose=verbose, header=header, names=('x', 'y'))
A:numpy.ma.testutils.actual->numpy.array(actual, copy=False, subok=True)
A:numpy.ma.testutils.desired->numpy.array(desired, copy=False, subok=True)
numpy.ma.testutils._assert_equal_on_sequences(actual,desired,err_msg='')
numpy.ma.testutils.almost(a,b,decimal=6,fill_value=True)
numpy.ma.testutils.approx(a,b,fill_value=True,rtol=1e-05,atol=1e-08)
numpy.ma.testutils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_approx_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',fill_value=True)
numpy.ma.testutils.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_less(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_equal(actual,desired,err_msg='')
numpy.ma.testutils.assert_equal_records(a,b)
numpy.ma.testutils.assert_mask_equal(m1,m2,err_msg='')
numpy.ma.testutils.fail_if_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.fail_if_equal(actual,desired,err_msg='')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/timer_comparison.py----------------------------------------
A:numpy.ma.timer_comparison.xf->numpy.where(m1, 1e+20, x)
A:numpy.ma.timer_comparison.yf->self.filled(y)
A:numpy.ma.timer_comparison.m->self.make_mask(n)
A:numpy.ma.timer_comparison.x->x.reshape(2, 3, 4).reshape(2, 3, 4)
A:numpy.ma.timer_comparison.y->numpy.arange(24)
A:numpy.ma.timer_comparison.msg->build_err_msg([x, y], err_msg, header=header, names=('x', 'y'))
A:numpy.ma.timer_comparison.val->self.masked_array(val, mask=m)
A:numpy.ma.timer_comparison.reduced->reduced.tolist().tolist()
A:numpy.ma.timer_comparison.cond->reduced.tolist().tolist().all()
A:numpy.ma.timer_comparison.xm->self.arange(10, dtype=float_)
A:numpy.ma.timer_comparison.ym->self.masked_array(y, mask=m2)
A:numpy.ma.timer_comparison.z->self.masked_array(y, m3)
A:numpy.ma.timer_comparison.zm->self.masked_array(z, mask=[0, 1, 0, 0])
A:numpy.ma.timer_comparison.x1->self.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x3->self.array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.timer_comparison.x4->self.arange(4)
A:numpy.ma.timer_comparison.x3[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.x4[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.m2->self.make_mask(m)
A:numpy.ma.timer_comparison.m3->self.make_mask(m, copy=1)
A:numpy.ma.timer_comparison.y4->self.resize(x4, (8,))
A:numpy.ma.timer_comparison.y5->self.repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y6->self.repeat(x4, 2, axis=0)
A:numpy.ma.timer_comparison.y7->self.arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y8->self.arange(4).repeat(2, 0)
A:numpy.ma.timer_comparison.t->self.take(y, [0, 3, 4])
A:numpy.ma.timer_comparison.id1->self.id(x.raw_data())
A:numpy.ma.timer_comparison.a->self.arange(10, dtype=float_)
A:numpy.ma.timer_comparison.uf->getattr(fromnumeric, f)
A:numpy.ma.timer_comparison.mf->getattr(self.module, f)
A:numpy.ma.timer_comparison.ur->uf(*args)
A:numpy.ma.timer_comparison.mr->mf(*args)
A:numpy.ma.timer_comparison.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.timer_comparison.(result, wts)->self.average(ott, axis=0, returned=1)
A:numpy.ma.timer_comparison.m1->self.zeros(6)
A:numpy.ma.timer_comparison.m4->self.ones(6)
A:numpy.ma.timer_comparison.cur->numpy.sort(cur)
numpy.ma.timer_comparison.moduletester(self,module)
numpy.ma.timer_comparison.moduletester.__init__(self,module)
numpy.ma.timer_comparison.moduletester.assert_array_compare(self,comparison,x,y,err_msg='',header='',fill_value=True)
numpy.ma.timer_comparison.moduletester.assert_array_equal(self,x,y,err_msg='')
numpy.ma.timer_comparison.moduletester.test_0(self)
numpy.ma.timer_comparison.moduletester.test_1(self)
numpy.ma.timer_comparison.moduletester.test_2(self)
numpy.ma.timer_comparison.moduletester.test_3(self)
numpy.ma.timer_comparison.moduletester.test_4(self)
numpy.ma.timer_comparison.moduletester.test_5(self)
numpy.ma.timer_comparison.moduletester.test_6(self)
numpy.ma.timer_comparison.moduletester.test_7(self)
numpy.ma.timer_comparison.moduletester.test_99(self)
numpy.ma.timer_comparison.moduletester.test_A(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/setup.py----------------------------------------
A:numpy.ma.setup.config->configuration(top_path='').todict()
numpy.ma.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/version.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/mrecords.py----------------------------------------
A:numpy.ma.mrecords.obj->numpy.array(_data[indx], copy=False).view(mrecarray)
A:numpy.ma.mrecords.ndescr->len(descr)
A:numpy.ma.mrecords.new_names->names.split(',')
A:numpy.ma.mrecords.nnames->len(new_names)
A:numpy.ma.mrecords.fdmask->numpy.empty(self.shape, dtype=mdescr)
A:numpy.ma.mrecords.fdmask.flat->tuple([False] * len(mdescr))
A:numpy.ma.mrecords.self->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)
A:numpy.ma.mrecords.mdtype->dtype([(k, bool_) for (k, _) in self.dtype.descr])
A:numpy.ma.mrecords.self._mask->tuple([False] * len(mdtype))
A:numpy.ma.mrecords.mask->numpy.array(mask, copy=False)
A:numpy.ma.mrecords._mask->getattr(reclist, '_mask', None)
A:numpy.ma.mrecords.objmask->getattr(obj, '_mask', nomask)
A:numpy.ma.mrecords._dtype->numpy.ndarray.__getattribute__(self, 'dtype')
A:numpy.ma.mrecords.mdescr->numpy.ma.make_mask_descr(_dtype)
A:numpy.ma.mrecords._data->numpy.ndarray.__new__(baseclass, baseshape, basetype).view(subtype)
A:numpy.ma.mrecords._fieldmask->property(fget=_getfieldmask)
A:numpy.ma.mrecords._localdict->object.__getattribute__(self, '__dict__')
A:numpy.ma.mrecords.hasmasked->getattr(reclist, '_mask', None).view((np.bool, len(_mask.dtype) or 1)).any()
A:numpy.ma.mrecords._fill_value->object.__getattribute__(self, '__dict__').get('_fill_value', None)
A:numpy.ma.mrecords.ret->object.__setattr__(self, attr, val)
A:numpy.ma.mrecords.dval->filled(val)
A:numpy.ma.mrecords.mval->getmaskarray(val)
A:numpy.ma.mrecords.obj._mask->numpy.array(_mask[indx], copy=False).view(recarray)
A:numpy.ma.mrecords.self._mask[indx]->numpy.ma.getmaskarray(value)
A:numpy.ma.mrecords.output->numpy.ndarray.view(self, dtype, type)
A:numpy.ma.mrecords.dtype->numpy.dtype(dtype)
A:numpy.ma.mrecords.output._mask->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.view(mdtype, ndarray)
A:numpy.ma.mrecords.copied->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._data.copy().view(type(self))
A:numpy.ma.mrecords.copied._mask->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.copy()
A:numpy.ma.mrecords.result->narray(self.filled().tolist(), dtype=object)
A:numpy.ma.mrecords._array->recfromarrays(datalist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords._array._mask.flat->list(zip(*masklist))
A:numpy.ma.mrecords.nfields->len(reclist[0].dtype)
A:numpy.ma.mrecords.reclist->reclist.tolist().tolist()
A:numpy.ma.mrecords.mrec->recfromrecords(reclist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords.maskrecordlength->len(mask.dtype)
A:numpy.ma.mrecords.arr->numpy.asarray(arr)
A:numpy.ma.mrecords.val->complex(f)
A:numpy.ma.mrecords.f->openfile(fname)
A:numpy.ma.mrecords.line->openfile(fname).readline()
A:numpy.ma.mrecords.firstline->line[:line.find(commentchar)].strip()
A:numpy.ma.mrecords._varnames->line[:line.find(commentchar)].strip().split(delimitor)
A:numpy.ma.mrecords._variables->masked_array([line.strip().split(delimitor) for line in f if line[0] != commentchar and len(line) > 1])
A:numpy.ma.mrecords.vartypes->_guessvartypes(_variables[0])
A:numpy.ma.mrecords.newfield->numpy.ma.array(newfield)
A:numpy.ma.mrecords.newdtype->numpy.dtype(_data.dtype.descr + [(newfieldname, newfield.dtype)])
A:numpy.ma.mrecords.newdata->newdata.view(MaskedRecords).view(MaskedRecords)
A:numpy.ma.mrecords.newmdtype->numpy.dtype([(n, bool_) for n in newdtype.names])
A:numpy.ma.mrecords.newmask->recarray(_data.shape, newmdtype)
numpy.ma.mrecords.MaskedRecords(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__array_finalize__(self,obj)
numpy.ma.mrecords.MaskedRecords.__getattribute__(self,attr)
numpy.ma.mrecords.MaskedRecords.__getitem__(self,indx)
numpy.ma.mrecords.MaskedRecords.__getstate__(self)
numpy.ma.mrecords.MaskedRecords.__len__(self)
numpy.ma.mrecords.MaskedRecords.__new__(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__reduce__(self)
numpy.ma.mrecords.MaskedRecords.__repr__(self)
numpy.ma.mrecords.MaskedRecords.__setattr__(self,attr,val)
numpy.ma.mrecords.MaskedRecords.__setitem__(self,indx,value)
numpy.ma.mrecords.MaskedRecords.__setstate__(self,state)
numpy.ma.mrecords.MaskedRecords.__str__(self)
numpy.ma.mrecords.MaskedRecords._getdata(self)
numpy.ma.mrecords.MaskedRecords._getfieldmask(self)
numpy.ma.mrecords.MaskedRecords.copy(self)
numpy.ma.mrecords.MaskedRecords.harden_mask(self)
numpy.ma.mrecords.MaskedRecords.soften_mask(self)
numpy.ma.mrecords.MaskedRecords.tolist(self,fill_value=None)
numpy.ma.mrecords.MaskedRecords.view(self,dtype=None,type=None)
numpy.ma.mrecords._checknames(descr,names=None)
numpy.ma.mrecords._get_fieldmask(self)
numpy.ma.mrecords._getformats(data)
numpy.ma.mrecords._guessvartypes(arr)
numpy.ma.mrecords._mrreconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.mrecords.addfield(mrecord,newfield,newfieldname=None)
numpy.ma.mrecords.fromarrays(arraylist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None)
numpy.ma.mrecords.fromrecords(reclist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None,mask=nomask)
numpy.ma.mrecords.fromtextfile(fname,delimitor=None,commentchar='#',missingchar='',varnames=None,vartypes=None)
numpy.ma.mrecords.openfile(fname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/bench.py----------------------------------------
A:numpy.ma.bench.xs->numpy.random.uniform(-1, 1, 6).reshape(2, 3)
A:numpy.ma.bench.ys->numpy.random.uniform(-1, 1, 6).reshape(2, 3)
A:numpy.ma.bench.nmxs->numpy.ma.array(xs, mask=m1)
A:numpy.ma.bench.nmys->numpy.ma.array(ys, mask=m2)
A:numpy.ma.bench.nmzs->numpy.ma.array(zs, mask=m1)
A:numpy.ma.bench.xl->numpy.random.uniform(-1, 1, 100 * 100).reshape(100, 100)
A:numpy.ma.bench.yl->numpy.random.uniform(-1, 1, 100 * 100).reshape(100, 100)
A:numpy.ma.bench.nmxl->numpy.ma.array(xl, mask=maskx)
A:numpy.ma.bench.nmyl->numpy.ma.array(yl, mask=masky)
A:numpy.ma.bench.nmzl->numpy.ma.array(zl, mask=maskx)
A:numpy.ma.bench.Timer->timeit.Timer(stmt=s, setup=setup)
A:numpy.ma.bench.order->min(-int(numpy.floor(numpy.log10(best)) // 3), 3)
numpy.ma.bench.compare_functions_1v(func,nloop=500,xs=xs,nmxs=nmxs,xl=xl,nmxl=nmxl)
numpy.ma.bench.compare_functions_2v(func,nloop=500,test=True,xs=xs,nmxs=nmxs,ys=ys,nmys=nmys,xl=xl,nmxl=nmxl,yl=yl,nmyl=nmyl)
numpy.ma.bench.compare_methods(methodname,args,vars='x',nloop=500,test=True,xs=xs,nmxs=nmxs,xl=xl,nmxl=nmxl)
numpy.ma.bench.timer(s,v='',nloop=500,nrep=3)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_extras.py----------------------------------------
A:numpy.ma.tests.test_extras.test->setdiff1d(a, b)
A:numpy.ma.tests.test_extras.control->array([1, 2, 3, 4, 5, 7, -1], mask=[0, 0, 0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.dt->numpy.dtype([('a', 'f'), ('b', [('ba', 'f'), ('bb', 'f')])])
A:numpy.ma.tests.test_extras.base->array([(0, 0), (0, 0)], mask=[(1, 1), (1, 1)], dtype=dt)
A:numpy.ma.tests.test_extras.a->masked_array([0, 1, 2], mask=[0, 1, 0])
A:numpy.ma.tests.test_extras.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_extras.(result, wts)->average(ott, axis=0, returned=1)
A:numpy.ma.tests.test_extras.x->array([1, 3, 3, 3], mask=[0, 0, 0, 1])
A:numpy.ma.tests.test_extras.y->array([3, 1, 1, 1], mask=[0, 0, 0, 1])
A:numpy.ma.tests.test_extras.m1->zeros(6)
A:numpy.ma.tests.test_extras.m4->ones(6)
A:numpy.ma.tests.test_extras.z->masked_array(np.empty((n, p), dtype=float))
A:numpy.ma.tests.test_extras.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=1)
A:numpy.ma.tests.test_extras.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=1)
A:numpy.ma.tests.test_extras.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_extras.a2dm->masked_array(a2d, [[False, False], [True, False]])
A:numpy.ma.tests.test_extras.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_extras.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_extras.mask->numpy.array([[0, 0, 0, 1, 0], [0, 1, 0, 0, 0]], dtype=bool)
A:numpy.ma.tests.test_extras.av->average(a)
A:numpy.ma.tests.test_extras.expected->numpy.average(a.compressed(), weights=wts[~mask])
A:numpy.ma.tests.test_extras.av0->average(a, axis=0)
A:numpy.ma.tests.test_extras.av1->average(a, axis=1)
A:numpy.ma.tests.test_extras.wts->numpy.array([[0.5, 1.0, 2.0, 1.0, 0.5], [1.0, 1.0, 1.0, 1.0, 1.0]])
A:numpy.ma.tests.test_extras.wav->average(a, weights=wts)
A:numpy.ma.tests.test_extras.wav0->average(a, weights=wts, axis=0)
A:numpy.ma.tests.test_extras.wav1->average(a, weights=wts, axis=1)
A:numpy.ma.tests.test_extras.b->atleast_2d(a)
A:numpy.ma.tests.test_extras.d->masked_array(b, mask=m)
A:numpy.ma.tests.test_extras.a_1->rand(5, 5)
A:numpy.ma.tests.test_extras.a_2->rand(5, 5)
A:numpy.ma.tests.test_extras.m_1->numpy.round_(rand(5, 5), 0)
A:numpy.ma.tests.test_extras.m_2->numpy.round_(rand(5, 5), 0)
A:numpy.ma.tests.test_extras.b_1->masked_array(a_1, mask=m_1)
A:numpy.ma.tests.test_extras.b_2->masked_array(a_2, mask=m_2)
A:numpy.ma.tests.test_extras.data->masked_array([1, 1, 1], mask=True)
A:numpy.ma.tests.test_extras.tmp->notmasked_contiguous(a, 1)
A:numpy.ma.tests.test_extras.n->numpy.arange(1, 7)
A:numpy.ma.tests.test_extras.c->dot(b, a, False)
A:numpy.ma.tests.test_extras.xa->apply_along_axis(myfunc, 2, a)
A:numpy.ma.tests.test_extras.ctrl->numpy.array([[[30], [44], [60]]])
A:numpy.ma.tests.test_extras.idx->numpy.arange(len(x))
A:numpy.ma.tests.test_extras.self.data->array(np.random.rand(12))
A:numpy.ma.tests.test_extras.nx->array([1, 3, 3, 3], mask=[0, 0, 0, 1]).compressed()
A:numpy.ma.tests.test_extras.valid->numpy.logical_not(getmaskarray(x)).astype(int)
A:numpy.ma.tests.test_extras.frac->numpy.dot(valid.T, valid)
A:numpy.ma.tests.test_extras.xf->(x - x.mean(0)).filled(0)
A:numpy.ma.tests.test_extras.(C, R, K, S, D)->polyfit(x, y, 3, full=True, w=w)
A:numpy.ma.tests.test_extras.(c, r, k, s, d)->numpy.polyfit(xs, ys, 3, full=True, w=ws)
A:numpy.ma.tests.test_extras.wo->w.copy()
numpy.ma.tests.test_Test2DFunctions(TestCase)
numpy.ma.tests.test_Test2DFunctions.test_compress2d(self)
numpy.ma.tests.test_Test2DFunctions.test_dot(self)
numpy.ma.tests.test_Test2DFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_TestApplyAlongAxis(TestCase)
numpy.ma.tests.test_TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_TestApplyOverAxes(TestCase)
numpy.ma.tests.test_TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_TestArraySetOps(TestCase)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_TestAverage(TestCase)
numpy.ma.tests.test_TestAverage.test_complex(self)
numpy.ma.tests.test_TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_TestAverage.test_testAverage1(self)
numpy.ma.tests.test_TestAverage.test_testAverage2(self)
numpy.ma.tests.test_TestAverage.test_testAverage3(self)
numpy.ma.tests.test_TestConcatenator(TestCase)
numpy.ma.tests.test_TestConcatenator.test_1d(self)
numpy.ma.tests.test_TestConcatenator.test_2d(self)
numpy.ma.tests.test_TestCorrcoef(TestCase)
numpy.ma.tests.test_TestCorrcoef.setUp(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_w_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_wo_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_w_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_wo_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_TestCov(TestCase)
numpy.ma.tests.test_TestCov.setUp(self)
numpy.ma.tests.test_TestCov.test_1d_w_missing(self)
numpy.ma.tests.test_TestCov.test_1d_wo_missing(self)
numpy.ma.tests.test_TestCov.test_2d_w_missing(self)
numpy.ma.tests.test_TestCov.test_2d_wo_missing(self)
numpy.ma.tests.test_TestGeneric(TestCase)
numpy.ma.tests.test_TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_TestGeneric.test_masked_all(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_TestMedian(TestCase)
numpy.ma.tests.test_TestMedian.test_2d(self)
numpy.ma.tests.test_TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_TestMedian.test_3d(self)
numpy.ma.tests.test_TestNotMasked(TestCase)
numpy.ma.tests.test_TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_TestNotMasked.test_edges(self)
numpy.ma.tests.test_TestPolynomial(TestCase)
numpy.ma.tests.test_TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_TestShapeBase(TestCase)
numpy.ma.tests.test_TestShapeBase.test_atleast2d(self)
numpy.ma.tests.test_extras.Test2DFunctions(TestCase)
numpy.ma.tests.test_extras.Test2DFunctions.test_compress2d(self)
numpy.ma.tests.test_extras.Test2DFunctions.test_dot(self)
numpy.ma.tests.test_extras.Test2DFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_extras.TestApplyAlongAxis(TestCase)
numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_extras.TestApplyOverAxes(TestCase)
numpy.ma.tests.test_extras.TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_extras.TestArraySetOps(TestCase)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_extras.TestAverage(TestCase)
numpy.ma.tests.test_extras.TestAverage.test_complex(self)
numpy.ma.tests.test_extras.TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage1(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage2(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage3(self)
numpy.ma.tests.test_extras.TestConcatenator(TestCase)
numpy.ma.tests.test_extras.TestConcatenator.test_1d(self)
numpy.ma.tests.test_extras.TestConcatenator.test_2d(self)
numpy.ma.tests.test_extras.TestCorrcoef(TestCase)
numpy.ma.tests.test_extras.TestCorrcoef.setUp(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_w_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_wo_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_w_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_wo_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_extras.TestCov(TestCase)
numpy.ma.tests.test_extras.TestCov.setUp(self)
numpy.ma.tests.test_extras.TestCov.test_1d_w_missing(self)
numpy.ma.tests.test_extras.TestCov.test_1d_wo_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_w_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_wo_missing(self)
numpy.ma.tests.test_extras.TestGeneric(TestCase)
numpy.ma.tests.test_extras.TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_extras.TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_extras.TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_extras.TestMedian(TestCase)
numpy.ma.tests.test_extras.TestMedian.test_2d(self)
numpy.ma.tests.test_extras.TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_extras.TestMedian.test_3d(self)
numpy.ma.tests.test_extras.TestNotMasked(TestCase)
numpy.ma.tests.test_extras.TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_extras.TestNotMasked.test_edges(self)
numpy.ma.tests.test_extras.TestPolynomial(TestCase)
numpy.ma.tests.test_extras.TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_extras.TestShapeBase(TestCase)
numpy.ma.tests.test_extras.TestShapeBase.test_atleast2d(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_subclassing.py----------------------------------------
A:numpy.ma.tests.test_subclassing.x->numpy.arange(5)
A:numpy.ma.tests.test_subclassing.self.info->getattr(obj, 'info', {})
A:numpy.ma.tests.test_subclassing.result->numpy.ndarray.__add__(self, other)
A:numpy.ma.tests.test_subclassing.subarr->SubArray(data, info)
A:numpy.ma.tests.test_subclassing._data->MaskedArray.__new__(cls, data=mat, mask=mask)
A:numpy.ma.tests.test_subclassing._view->self.view(MaskedArray)
A:numpy.ma.tests.test_subclassing._series->property(fget=_get_series)
A:numpy.ma.tests.test_subclassing.mat->numpy.matrix(data)
A:numpy.ma.tests.test_subclassing.mx->mmatrix(x, mask=[0, 1, 0, 0, 0])
A:numpy.ma.tests.test_subclassing.xsub->MSubArray(x, mask=m, info={'xsub': xinfo})
A:numpy.ma.tests.test_subclassing.xmsub->masked_array(xsub, mask=m)
A:numpy.ma.tests.test_subclassing.xmx->masked_array(mx.data.__array__(), mask=mx.mask)
A:numpy.ma.tests.test_subclassing.my->masked_array(subarray(x))
A:numpy.ma.tests.test_subclassing.ym->msubarray(x)
A:numpy.ma.tests.test_subclassing.mxsub->asanyarray(xsub)
numpy.ma.tests.test_subclassing.MMatrix(cls,data,mask=nomask)
numpy.ma.tests.test_subclassing.MMatrix.__array_finalize__(self,obj)
numpy.ma.tests.test_subclassing.MMatrix.__new__(cls,data,mask=nomask)
numpy.ma.tests.test_subclassing.MMatrix._get_series(self)
numpy.ma.tests.test_subclassing.MSubArray(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray.__array_finalize__(self,obj)
numpy.ma.tests.test_subclassing.MSubArray.__new__(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray._get_series(self)
numpy.ma.tests.test_subclassing.SubArray(cls,arr,info={})
numpy.ma.tests.test_subclassing.SubArray.__add__(self,other)
numpy.ma.tests.test_subclassing.SubArray.__array_finalize__(self,obj)
numpy.ma.tests.test_subclassing.SubArray.__new__(cls,arr,info={})
numpy.ma.tests.test_subclassing.TestSubclassing(TestCase)
numpy.ma.tests.test_subclassing.TestSubclassing.setUp(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_attributepropagation(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_data_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations2(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_unary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_maskedarray_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclasspreservation(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_mrecords.py----------------------------------------
A:numpy.ma.tests.test_mrecords.slist->asbytes_nested(['one', 'two', 'three', 'four', 'five'])
A:numpy.ma.tests.test_mrecords.self.base->numpy.ma.array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
A:numpy.ma.tests.test_mrecords.mbase->self.base.copy().view(mrecarray)
A:numpy.ma.tests.test_mrecords.base->self.base.copy()
A:numpy.ma.tests.test_mrecords.data->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype)
A:numpy.ma.tests.test_mrecords.rdata->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype).view(MaskedRecords)
A:numpy.ma.tests.test_mrecords.val->numpy.ma.array([10, 20, 30], mask=[1, 0, 0])
A:numpy.ma.tests.test_mrecords.nmask->numpy.array([(0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0)], dtype=[('a', bool), ('b', bool), ('c', bool)])
A:numpy.ma.tests.test_mrecords.mrec->addfield(mrec, ma.array(d, mask=m))
A:numpy.ma.tests.test_mrecords._->pickle.dumps(mrec)
A:numpy.ma.tests.test_mrecords.mrec_->pickle.loads(_)
A:numpy.ma.tests.test_mrecords._a->numpy.ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
A:numpy.ma.tests.test_mrecords._b->numpy.ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
A:numpy.ma.tests.test_mrecords._c->numpy.ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
A:numpy.ma.tests.test_mrecords.mrecfilled->addfield(mrec, ma.array(d, mask=m)).filled()
A:numpy.ma.tests.test_mrecords.x->mrecarray(1, formats=float, names='base')
A:numpy.ma.tests.test_mrecords.easy->mrecarray(1, dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_mrecords.solo->mrecarray(1, dtype=[('f0', '<f8', (2, 2))])
A:numpy.ma.tests.test_mrecords.mult->mrecarray(2, dtype='i4, (2,3)float, float')
A:numpy.ma.tests.test_mrecords.arr->numpy.array(list(zip(a, b)), dtype=ndtype)
A:numpy.ma.tests.test_mrecords.rec->numpy.array(list(zip(a, b)), dtype=ndtype).view(np.recarray)
A:numpy.ma.tests.test_mrecords.marr->numpy.ma.array(list(zip(a, b)), dtype=ndtype, fill_value=(-9.0, -99.0))
A:numpy.ma.tests.test_mrecords.test->addfield(mrec, ma.array(d, mask=m)).view(alttype)
A:numpy.ma.tests.test_mrecords.nrec->recfromarrays((_a._data, _b._data, _c._data), dtype=ddtype)
A:numpy.ma.tests.test_mrecords._x->numpy.ma.array([1, 1.1, 'one'], mask=[1, 0, 0])
A:numpy.ma.tests.test_mrecords.pa->recfromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords.mpa->fromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords._mrec->fromrecords(nrec.tolist(), dtype=ddtype, mask=mrec._mask.tolist())
A:numpy.ma.tests.test_mrecords.fcontent->asbytes('#\n\'One (S)\',\'Two (I)\',\'Three (F)\',\'Four (M)\',\'Five (-)\',\'Six (C)\'\n\'strings\',1,1.0,\'mixed column\',,1\n\'with embedded "double quotes"\',2,2.0,1.0,,1\n\'strings\',3,3.0E5,3,,1\n\'strings\',4,-1e-10,,,1\n')
A:numpy.ma.tests.test_mrecords.(tmp_fd, tmp_fl)->tempfile.mkstemp()
A:numpy.ma.tests.test_mrecords.mrectxt->fromtextfile(tmp_fl, delimitor=',', varnames='ABCDEFG')
A:numpy.ma.tests.test_mrecords.y->numpy.ma.masked_array([(1, '2'), (3, '4')], mask=[(0, 0), (0, 1)], dtype=[('a', int), ('b', np.object)])
numpy.ma.tests.test_mrecords.TestMRecords(self,*args,**kwds)
numpy.ma.tests.test_mrecords.TestMRecords.__init__(self,*args,**kwds)
numpy.ma.tests.test_mrecords.TestMRecords.setup(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_byview(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_exotic_formats(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_filled(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_get(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_pickling(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_elements(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromarray(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromfields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_setslices_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_tolist(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_withnames(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport(self,*args,**kwds)
numpy.ma.tests.test_mrecords.TestMRecordsImport.__init__(self,*args,**kwds)
numpy.ma.tests.test_mrecords.TestMRecordsImport.setup(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_addfield(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromarrays(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords_wmask(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromtextfile(self)
numpy.ma.tests.test_mrecords.TestView(TestCase)
numpy.ma.tests.test_mrecords.TestView.setUp(self)
numpy.ma.tests.test_mrecords.TestView.test_view_by_itself(self)
numpy.ma.tests.test_mrecords.TestView.test_view_flexible_type(self)
numpy.ma.tests.test_mrecords.TestView.test_view_simple_dtype(self)
numpy.ma.tests.test_mrecords.test_record_array_with_object_field()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_regression.py----------------------------------------
A:numpy.ma.tests.test_regression.x->numpy.ma.masked_equal([1, 2, 3, 4, 5], 4)
A:numpy.ma.tests.test_regression.a->numpy.ma.array(np.arange(5), mask=True)
A:numpy.ma.tests.test_regression.b->numpy.atleast_2d(a)
A:numpy.ma.tests.test_regression.c->masked_where(b, a)
A:numpy.ma.tests.test_regression.mout->numpy.ma.array(-1, dtype=float)
A:numpy.ma.tests.test_regression.y->numpy.array([2, 2.5, 3.1, 3, 5])
A:numpy.ma.tests.test_regression.r0->numpy.ma.corrcoef(x, y, ddof=0)
A:numpy.ma.tests.test_regression.r1->numpy.ma.corrcoef(x, y, ddof=1)
numpy.ma.tests.test_regression.TestRegression(TestCase)
numpy.ma.tests.test_regression.TestRegression.test_atleast_2d(self)
numpy.ma.tests.test_regression.TestRegression.test_ddof_corrcoef(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array(self,level=rlevel)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_create(self,level=rlevel)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_multiply(self,level=rlevel)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repeat(self,level=rlevel)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repr_unicode(self)
numpy.ma.tests.test_regression.TestRegression.test_mem_masked_where(self,level=rlevel)
numpy.ma.tests.test_regression.TestRegression.test_set_fill_value_unicode_py3(self)
numpy.ma.tests.test_regression.TestRegression.test_var_sets_maskedarray_scalar(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_core.py----------------------------------------
A:numpy.ma.tests.test_core.x->numpy.arange(4, dtype=np.int32)
A:numpy.ma.tests.test_core.y->numpy.array([5.0, 0.0, 3.0, 2.0, -1.0, -4.0, 0.0, -10.0, 10.0, 1.0, 0.0, 3.0])
A:numpy.ma.tests.test_core.xm->masked_array(x, mask=m1)
A:numpy.ma.tests.test_core.ym->masked_array(y, mask=m2)
A:numpy.ma.tests.test_core.z->where(c, 1, masked)
A:numpy.ma.tests.test_core.zm->where(cm, x, y)
A:numpy.ma.tests.test_core.xf->numpy.where(m1, 1e+20, x)
A:numpy.ma.tests.test_core.a->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0])
A:numpy.ma.tests.test_core.b->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).reshape(5, 2, order='F')
A:numpy.ma.tests.test_core.xmym->concatenate((xm, ym), 1)
A:numpy.ma.tests.test_core.data->numpy.array(iterator)
A:numpy.ma.tests.test_core.test->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).view((float, 2), np.matrix)
A:numpy.ma.tests.test_core.xx->numpy.arange(4, dtype=np.int32).copy()
A:numpy.ma.tests.test_core.dma_1->MaskedArray(data)
A:numpy.ma.tests.test_core.dma_2->MaskedArray(dma_1)
A:numpy.ma.tests.test_core.dma_3->MaskedArray(dma_1, mask=[1, 0, 0, 0] * 6)
A:numpy.ma.tests.test_core.xmm->asarray(xm)
A:numpy.ma.tests.test_core.data_fixed->fix_invalid(data)
A:numpy.ma.tests.test_core.dt->datetime.datetime.now()
A:numpy.ma.tests.test_core.x1->numpy.arange(5)
A:numpy.ma.tests.test_core.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_core.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_core.x4->arange(4)
A:numpy.ma.tests.test_core.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.m->array(a, mask=False)
A:numpy.ma.tests.test_core.m2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
A:numpy.ma.tests.test_core.m3->make_mask(m, copy=1)
A:numpy.ma.tests.test_core.y1->array(x1, mask=m)
A:numpy.ma.tests.test_core.y1a->array(y1)
A:numpy.ma.tests.test_core.y2->array(x1, mask=m)
A:numpy.ma.tests.test_core.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_core.y4->resize(x4, (8,))
A:numpy.ma.tests.test_core.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_core.y7->arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y8->arange(4).repeat(2, 0)
A:numpy.ma.tests.test_core.y9->arange(4).copy()
A:numpy.ma.tests.test_core.copied->deepcopy(a)
A:numpy.ma.tests.test_core.a_pickled->pickle.loads(a.dumps())
A:numpy.ma.tests.test_core.mc_pickled->pickle.loads(mc.dumps())
A:numpy.ma.tests.test_core.c->numpy.reshape(a, (2, 5))
A:numpy.ma.tests.test_core.atest->ones((10, 10, 10), dtype=float)
A:numpy.ma.tests.test_core.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_core.flexi->array([(1, 1, 1)], dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_core.control->numpy.array([(True, True), (True, True)], dtype=mdtype)
A:numpy.ma.tests.test_core.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.ma.tests.test_core.f->mvoid(a._data[0], a._mask[0])
A:numpy.ma.tests.test_core.mx->masked_equal(x, 3)
A:numpy.ma.tests.test_core.self.err_status->numpy.geterr()
A:numpy.ma.tests.test_core.a2d->array([[1, 2], [0, 4]])
A:numpy.ma.tests.test_core.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_core.na->numpy.array([1])
A:numpy.ma.tests.test_core.ma->array([1])
A:numpy.ma.tests.test_core.ott->ott.reshape((2, 2)).reshape((2, 2))
A:numpy.ma.tests.test_core.xr->numpy.ravel(x)
A:numpy.ma.tests.test_core.xmr->ravel(xm)
A:numpy.ma.tests.test_core.aminimum->minimum.outer(a, a)
A:numpy.ma.tests.test_core.amaximum->maximum.outer(a, a)
A:numpy.ma.tests.test_core.mask->numpy.array(data, dtype=mdtype)
A:numpy.ma.tests.test_core.npfunc->getattr(np, funcname)
A:numpy.ma.tests.test_core.mafunc->getattr(numpy.ma.core, funcname)
A:numpy.ma.tests.test_core.nout->numpy.array(-1, dtype=float)
A:numpy.ma.tests.test_core.result->masked_array(x, mask=m1).round(decimals=2, out=output)
A:numpy.ma.tests.test_core.t->array(list(zip([1, 2, 3], [4, 5, 6])), dtype=[('a', int), ('b', int)])
A:numpy.ma.tests.test_core.xmmeth->getattr(xm, funcname)
A:numpy.ma.tests.test_core.output->empty((3, 4), dtype=float)
A:numpy.ma.tests.test_core.d->where(ixm > 2, ixm, masked)
A:numpy.ma.tests.test_core.xh->array(d + 1, mask=m, hard_mask=True, copy=True)
A:numpy.ma.tests.test_core.xs->array(d, mask=m, hard_mask=False, copy=True)
A:numpy.ma.tests.test_core.xh[:]->arange(5)
A:numpy.ma.tests.test_core.test.flat->masked_array([3, 2, 1], mask=[1, 0, 0])
A:numpy.ma.tests.test_core.fval->_check_fill_value(-999999999, ndtype)
A:numpy.ma.tests.test_core.fill_val->numpy.array(('???', -999, -12345678.9), dtype=[('c', '|S3'), ('a', int), ('b', float)])
A:numpy.ma.tests.test_core.fill_value->numpy.array((-999, -12345678.9, '???'))
A:numpy.ma.tests.test_core.ndtype->numpy.dtype([('a', float), ('b', int)])
A:numpy.ma.tests.test_core.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_core.mf->getattr(numpy.ma.core, f)
A:numpy.ma.tests.test_core.ur->uf(*args)
A:numpy.ma.tests.test_core.mr->mf(*args)
A:numpy.ma.tests.test_core.amask->numpy.array([(0, (1, 0)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.me->MyClass()
A:numpy.ma.tests.test_core.X->numpy.arange(4, dtype=np.int32).reshape(6, 6)
A:numpy.ma.tests.test_core.XX->numpy.arange(4, dtype=np.int32).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_core.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_core.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_core.m2x->array(data=x, mask=m2)
A:numpy.ma.tests.test_core.m2X->array(data=X, mask=m2.reshape(X.shape))
A:numpy.ma.tests.test_core.m2XX->array(data=XX, mask=m2.reshape(XX.shape))
A:numpy.ma.tests.test_core.xbig->numpy.array([[False, False, True], [False, False, True], [False, True, True]], dtype=np.bool_)
A:numpy.ma.tests.test_core.store->empty(4, dtype=int).view(ndarray)
A:numpy.ma.tests.test_core.full->array([1, 2, 3], mask=True)
A:numpy.ma.tests.test_core.clipped->masked_equal(x, 3).clip(2, 8)
A:numpy.ma.tests.test_core.mxx->masked_equal(x, 3).copy()
A:numpy.ma.tests.test_core.values->array([10, 20, 30, 40, 50, 60], mask=[1, 1, 1, 0, 0, 0])
A:numpy.ma.tests.test_core.aravel->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).ravel()
A:numpy.ma.tests.test_core.ar->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).ravel()
A:numpy.ma.tests.test_core.sortedx->sort(x, endwith=False)
A:numpy.ma.tests.test_core.am->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).copy()
A:numpy.ma.tests.test_core.an->numpy.ma.array([0, 1, 2, 3], mask=[0, 0, 1, 0]).filled(99)
A:numpy.ma.tests.test_core.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_core.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_core.mindices->array(indices, mask=indices >= len(a))
A:numpy.ma.tests.test_core.ctrl->array([[2 ** 2, 4 ** 4, 3 ** 3], [2 ** 2, 4 ** 4, 3 ** 3]], mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.xlist->numpy.arange(4, dtype=np.int32).tolist()
A:numpy.ma.tests.test_core.record->numpy.array(iterator).toflex()
A:numpy.ma.tests.test_core.marray->masked_array([[1, 2, 3, 4, 5]], mask=[0, 0, 1, 0, 0])
A:numpy.ma.tests.test_core.mXcp->array(data=X, mask=m.reshape(X.shape)).cumprod(1)
A:numpy.ma.tests.test_core.rows->numpy.zeros(n, np.float)
A:numpy.ma.tests.test_core.cols->numpy.zeros(m, np.float)
A:numpy.ma.tests.test_core.cols[k]->mX[:, k].compressed().ptp()
A:numpy.ma.tests.test_core.rows[k]->mX[k].compressed().ptp()
A:numpy.ma.tests.test_core.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_core.mout->array(-1, dtype=float)
A:numpy.ma.tests.test_core.method->getattr(x, methodname)
A:numpy.ma.tests.test_core._->method(out=nout, ddof=1)
A:numpy.ma.tests.test_core.out->diag(out)
A:numpy.ma.tests.test_core.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_core.a2->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
A:numpy.ma.tests.test_core.a2m->array(a2, mask=[[1, 0, 0], [0, 0, 1]])
A:numpy.ma.tests.test_core.b1->numpy.array([2, 4, 3])
A:numpy.ma.tests.test_core.b1m->array(b1, mask=[0, 1, 0])
A:numpy.ma.tests.test_core.b2->numpy.array([b1, b1])
A:numpy.ma.tests.test_core.b2m->array(b2, mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.tmp->masked_array(x, mask=m1)._mask.copy()
A:numpy.ma.tests.test_core.ixm->masked_array(x, mask=m1).astype(int)
A:numpy.ma.tests.test_core.cm->numpy.reshape(a, (2, 5)).filled(1)
A:numpy.ma.tests.test_core.chosen->choose(indices_, choices, mode='wrap', out=store)
A:numpy.ma.tests.test_core.indices_->array([2, 3, 1, 0], mask=[1, 0, 0, 1])
A:numpy.ma.tests.test_core.choices->array(choices, mask=[[0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])
A:numpy.ma.tests.test_core.other->numpy.array([(0, 1), (0, 1), (0, 1), (0, 1)], dtype=othertype)
A:numpy.ma.tests.test_core.bmask->numpy.array([(1, (0, 1)), (0, (0, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.cntrl->numpy.array([(1, (1, 1)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.arr->numpy.arange(8)
A:numpy.ma.tests.test_core.cond->numpy.array([True, False, True, True])
A:numpy.ma.tests.test_core.marr->numpy.ma.array(arr)
A:numpy.ma.tests.test_core.base->array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
A:numpy.ma.tests.test_core.self.data->dict(base=base, mask=mask, ddtype=ddtype, mdtype=mdtype)
A:numpy.ma.tests.test_core.iterator->list(zip(np.arange(10), np.random.rand(10)))
A:numpy.ma.tests.test_core.controlmask->numpy.array([1] + 19 * [0], dtype=bool)
A:numpy.ma.tests.test_core.a.mask->numpy.array(list(zip([0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0])), dtype=[('a', bool), ('b', bool)])
A:numpy.ma.tests.test_core.mdtype->numpy.dtype([('a', bool), ('b', bool)])
numpy.ma.tests.test_TestFillingValues(TestCase)
numpy.ma.tests.test_TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_TestMaskedArray(TestCase)
numpy.ma.tests.test_TestMaskedArray.setUp(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_TestMaskedArray.test_copy(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_w_f_order(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_w_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_w_mvoid(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_w_nested_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_TestMaskedArray.test_topython(self)
numpy.ma.tests.test_TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic(TestCase)
numpy.ma.tests.test_TestMaskedArrayArithmetic.setUp(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.tearDown(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_w_None(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_w_scalar(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_numpyarithmetics(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayAttributes(TestCase)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions(TestCase)
numpy.ma.tests.test_TestMaskedArrayFunctions.setUp(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power_w_broadcasting(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics(TestCase)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.setUp(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_add(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_div(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods(TestCase)
numpy.ma.tests.test_TestMaskedArrayMathMethods.setUp(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex(TestCase)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.setUp(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMethods(TestCase)
numpy.ma.tests.test_TestMaskedArrayMethods.setUp(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany_onmatrices(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_TestMaskedFields(TestCase)
numpy.ma.tests.test_TestMaskedFields.setUp(self)
numpy.ma.tests.test_TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_TestMaskedFields.test_view(self)
numpy.ma.tests.test_TestMaskedView(TestCase)
numpy.ma.tests.test_TestMaskedView.setUp(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_TestUfuncs(TestCase)
numpy.ma.tests.test_TestUfuncs.setUp(self)
numpy.ma.tests.test_TestUfuncs.tearDown(self)
numpy.ma.tests.test_TestUfuncs.test_minmax(self)
numpy.ma.tests.test_TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_TestUfuncs.test_reduce(self)
numpy.ma.tests.test_TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.TestFillingValues(TestCase)
numpy.ma.tests.test_core.TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_core.TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_core.TestMaskedArray(TestCase)
numpy.ma.tests.test_core.TestMaskedArray.setUp(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_core.TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_w_f_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_w_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_w_mvoid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_w_nested_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_core.TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_core.TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_core.TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_core.TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_core.TestMaskedArray.test_topython(self)
numpy.ma.tests.test_core.TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.tearDown(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_w_None(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_w_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_numpyarithmetics(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power_w_broadcasting(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_div(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_misc(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_int(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods(TestCase)
numpy.ma.tests.test_core.TestMaskedArrayMethods.setUp(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany_onmatrices(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_core.TestMaskedFields(TestCase)
numpy.ma.tests.test_core.TestMaskedFields.setUp(self)
numpy.ma.tests.test_core.TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_core.TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_core.TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_view(self)
numpy.ma.tests.test_core.TestMaskedView(TestCase)
numpy.ma.tests.test_core.TestMaskedView.setUp(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_core.TestUfuncs(TestCase)
numpy.ma.tests.test_core.TestUfuncs.setUp(self)
numpy.ma.tests.test_core.TestUfuncs.tearDown(self)
numpy.ma.tests.test_core.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_core.TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_core.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_core.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.test_masked_array()
numpy.ma.tests.test_test_masked_array()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/ma/tests/test_old_ma.py----------------------------------------
A:numpy.ma.tests.test_old_ma.result->allclose(v, w)
A:numpy.ma.tests.test_old_ma.x->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993])
A:numpy.ma.tests.test_old_ma.y->array([arange(6), 2.0 * arange(6)])
A:numpy.ma.tests.test_old_ma.xm->array(0, mask=1)
A:numpy.ma.tests.test_old_ma.ym->ym.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.z->masked_array(y, m3)
A:numpy.ma.tests.test_old_ma.zm->where(cm, x, y)
A:numpy.ma.tests.test_old_ma.xf->xf.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_old_ma.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_old_ma.na->numpy.array([1])
A:numpy.ma.tests.test_old_ma.ma->array([1])
A:numpy.ma.tests.test_old_ma.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_old_ma.xr->numpy.ravel(x)
A:numpy.ma.tests.test_old_ma.xmr->ravel(xm)
A:numpy.ma.tests.test_old_ma.x1->numpy.arange(5)
A:numpy.ma.tests.test_old_ma.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_old_ma.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_old_ma.x4->arange(4)
A:numpy.ma.tests.test_old_ma.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.m->numpy.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0])
A:numpy.ma.tests.test_old_ma.m2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
A:numpy.ma.tests.test_old_ma.m3->make_mask(m, copy=1)
A:numpy.ma.tests.test_old_ma.y1->array(x1, mask=m)
A:numpy.ma.tests.test_old_ma.y1a->array(y1, copy=0)
A:numpy.ma.tests.test_old_ma.y2->array(x1, mask=m, copy=0)
A:numpy.ma.tests.test_old_ma.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_old_ma.y4->resize(x4, (8,))
A:numpy.ma.tests.test_old_ma.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_old_ma.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_old_ma.d->arange(5)
A:numpy.ma.tests.test_old_ma.c->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0])
A:numpy.ma.tests.test_old_ma.atest->ones((10, 10, 10), dtype=float32)
A:numpy.ma.tests.test_old_ma.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_old_ma.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_old_ma.cm->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0]).filled(1)
A:numpy.ma.tests.test_old_ma.t->take(y, [0, 3, 4])
A:numpy.ma.tests.test_old_ma.s->pickle.dumps(x)
A:numpy.ma.tests.test_old_ma.xx->arange(6)
A:numpy.ma.tests.test_old_ma.(result, wts)->average(ott, axis=0, returned=1)
A:numpy.ma.tests.test_old_ma.m1->zeros(6)
A:numpy.ma.tests.test_old_ma.m4->ones(6)
A:numpy.ma.tests.test_old_ma.a->arange(1, 13).reshape(3, 4)
A:numpy.ma.tests.test_old_ma.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=1)
A:numpy.ma.tests.test_old_ma.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=1)
A:numpy.ma.tests.test_old_ma.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_old_ma.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_old_ma.b->array([1, 3, 2], mask=[1, 0, 1])
A:numpy.ma.tests.test_old_ma.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_old_ma.mf->getattr(np.ma, f)
A:numpy.ma.tests.test_old_ma.ur->uf(*args)
A:numpy.ma.tests.test_old_ma.mr->mf(*args)
A:numpy.ma.tests.test_old_ma.amask->masked_where(a < 5, a)
A:numpy.ma.tests.test_old_ma.X->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(6, 6)
A:numpy.ma.tests.test_old_ma.XX->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_old_ma.mx->array(data=x, mask=m)
A:numpy.ma.tests.test_old_ma.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_old_ma.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_old_ma.m2x->array(data=x, mask=m2)
A:numpy.ma.tests.test_old_ma.m2X->array(data=X, mask=m2.reshape(X.shape))
A:numpy.ma.tests.test_old_ma.m2XX->array(data=XX, mask=m2.reshape(XX.shape))
A:numpy.ma.tests.test_old_ma.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_old_ma.clipped->array(data=x, mask=m).clip(2, 8)
A:numpy.ma.tests.test_old_ma.rows->numpy.zeros(n, np.float_)
A:numpy.ma.tests.test_old_ma.cols->numpy.zeros(m, np.float_)
A:numpy.ma.tests.test_old_ma.cols[k]->mX[:, k].compressed().ptp()
A:numpy.ma.tests.test_old_ma.rows[k]->mX[k].compressed().ptp()
A:numpy.ma.tests.test_old_ma.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_old_ma.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_old_ma.mXcp->array(data=X, mask=m.reshape(X.shape)).cumsum(1)
numpy.ma.tests.test_old_ma.TestArrayMethods(TestCase)
numpy.ma.tests.test_old_ma.TestArrayMethods.setUp(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_clip(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumprod(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumsum(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_ptp(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_trace(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_varstd(self)
numpy.ma.tests.test_old_ma.TestMa(TestCase)
numpy.ma.tests.test_old_ma.TestMa.setUp(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAPI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAddSumProd(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayAttributes(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayMethods(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage1(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic1d(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic2d(self)
numpy.ma.tests.test_old_ma.TestMa.test_testCI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testCopySize(self)
numpy.ma.tests.test_old_ma.TestMa.test_testInplace(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMaPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMasked(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMixedArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testOddFeatures(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPickle(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testScalarArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testSingleElementSubscript(self)
numpy.ma.tests.test_old_ma.TestMa.test_testTakeTransposeInnerOuter(self)
numpy.ma.tests.test_old_ma.TestMa.test_testToPython(self)
numpy.ma.tests.test_old_ma.TestMa.test_testUfuncs1(self)
numpy.ma.tests.test_old_ma.TestMa.test_xtestCount(self)
numpy.ma.tests.test_old_ma.TestUfuncs(TestCase)
numpy.ma.tests.test_old_ma.TestUfuncs.setUp(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_nonzero(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_old_ma.eq(v,w,msg='')
numpy.ma.tests.test_old_ma.eqmask(m1,m2)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/random/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/random/setup.py----------------------------------------
A:numpy.random.setup.msver->get_msvc_build_version()
A:numpy.random.setup.config->Configuration('random', parent_package, top_path)
A:numpy.random.setup.config_cmd->Configuration('random', parent_package, top_path).get_config_cmd()
A:numpy.random.setup.libs->get_mathlibs()
A:numpy.random.setup.tc->testcode_wincrypt()
numpy.random.setup.configuration(parent_package='',top_path=None)
numpy.random.setup.needs_mingw_ftime_workaround()
numpy.random.setup.testcode_wincrypt()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/random/__init__.py----------------------------------------
numpy.random.__init__.__RandomState_ctor()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/random/tests/test_random.py----------------------------------------
A:numpy.random.tests.test_random.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_random.x->numpy.random.randint(-5, -1, 5)
A:numpy.random.tests.test_random.self.prng->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_random.self.state->self.prng.get_state()
A:numpy.random.tests.test_random.old->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.new->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.state->self.prng.get_state()
A:numpy.random.tests.test_random.x1->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x2->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x3->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.actual->numpy.random.zipf(a=1.23, size=(3, 2))
A:numpy.random.tests.test_random.desired->numpy.array([[66, 29], [1, 1], [3, 13]])
A:numpy.random.tests.test_random.a->numpy.ma.masked_values(np.reshape(range(20), (5, 4)) % 3 - 1, -1)
A:numpy.random.tests.test_random.arr->numpy.empty(1, dtype=object)
A:numpy.random.tests.test_random.s->tuple()
A:numpy.random.tests.test_random.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_random.dt->numpy.dtype([('a', np.int32, 1), ('b', np.int32, 1)])
A:numpy.random.tests.test_random.nparr->numpy.array(arr, dtype=dt)
A:numpy.random.tests.test_random.b->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1)
A:numpy.random.tests.test_random.ma->numpy.ma.count_masked(a)
A:numpy.random.tests.test_random.mb->numpy.ma.count_masked(b)
A:numpy.random.tests.test_random.alpha->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_random.p->numpy.array([51.72840233779265, 39.74494232180944])
numpy.random.tests.test_random.TestBinomial(TestCase)
numpy.random.tests.test_random.TestBinomial.test_n_zero(self)
numpy.random.tests.test_random.TestMultinomial(TestCase)
numpy.random.tests.test_random.TestMultinomial.test_basic(self)
numpy.random.tests.test_random.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_random.TestMultinomial.test_size(self)
numpy.random.tests.test_random.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_random.TestRandomDist(TestCase)
numpy.random.tests.test_random.TestRandomDist.setUp(self)
numpy.random.tests.test_random.TestRandomDist.test_beta(self)
numpy.random.tests.test_random.TestRandomDist.test_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_bytes(self)
numpy.random.tests.test_random.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_random.TestRandomDist.test_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_f(self)
numpy.random.tests.test_random.TestRandomDist.test_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_geometric(self)
numpy.random.tests.test_random.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_random.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_random.TestRandomDist.test_laplace(self)
numpy.random.tests.test_random.TestRandomDist.test_logistic(self)
numpy.random.tests.test_random.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_random.TestRandomDist.test_logseries(self)
numpy.random.tests.test_random.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_random.TestRandomDist.test_multivariate_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_random.TestRandomDist.test_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_pareto(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_power(self)
numpy.random.tests.test_random.TestRandomDist.test_rand(self)
numpy.random.tests.test_random.TestRandomDist.test_randint(self)
numpy.random.tests.test_random.TestRandomDist.test_randn(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers(self)
numpy.random.tests.test_random.TestRandomDist.test_random_sample(self)
numpy.random.tests.test_random.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_flexible(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_random.TestRandomDist.test_triangular(self)
numpy.random.tests.test_random.TestRandomDist.test_uniform(self)
numpy.random.tests.test_random.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_random.TestRandomDist.test_wald(self)
numpy.random.tests.test_random.TestRandomDist.test_weibull(self)
numpy.random.tests.test_random.TestRandomDist.test_zipf(self)
numpy.random.tests.test_random.TestSetState(TestCase)
numpy.random.tests.test_random.TestSetState.setUp(self)
numpy.random.tests.test_random.TestSetState.test_backwards_compatibility(self)
numpy.random.tests.test_random.TestSetState.test_basic(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_random.TestSetState.test_negative_binomial(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/random/tests/test_regression.py----------------------------------------
A:numpy.random.tests.test_regression.r->numpy.random.mtrand.vonmises(mu, 1, 50)
A:numpy.random.tests.test_regression.rvsn->numpy.random.logseries(0.8, size=N)
A:numpy.random.tests.test_regression.a->numpy.random.permutation(12)
A:numpy.random.tests.test_regression.b->numpy.random.permutation(long(12))
A:numpy.random.tests.test_regression.shuffled->list(t)
A:numpy.random.tests.test_regression.m->numpy.random.RandomState()
A:numpy.random.tests.test_regression.res->numpy.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
numpy.random.tests.test_regression.TestRegression(TestCase)
numpy.random.tests.test_regression.TestRegression.test_VonMises_range(self)
numpy.random.tests.test_regression.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_regression.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_regression.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_regression.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_regression.TestRegression.test_permutation_longs(self)
numpy.random.tests.test_regression.TestRegression.test_randint_range(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_mixed_dimension(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/linalg.py----------------------------------------
A:numpy.linalg.linalg._N->asbytes('N')
A:numpy.linalg.linalg._V->asbytes('V')
A:numpy.linalg.linalg._A->asbytes('A')
A:numpy.linalg.linalg._S->asbytes('S')
A:numpy.linalg.linalg._L->asbytes('L')
A:numpy.linalg.linalg.errobj->geterrobj()
A:numpy.linalg.linalg.extobj->get_linalg_error_extobj(_raise_linalgerror_svd_nonconvergence)
A:numpy.linalg.linalg.new->asarray(a)
A:numpy.linalg.linalg.wrap->getattr(a, '__array_prepare__', new.__array_wrap__)
A:numpy.linalg.linalg.rt->_realType(a.dtype.type, default=None)
A:numpy.linalg.linalg.(a, wrap)->_makearray(a)
A:numpy.linalg.linalg.b->b.ravel().ravel()
A:numpy.linalg.linalg.allaxes->list(range(0, an))
A:numpy.linalg.linalg.a->asarray(a)
A:numpy.linalg.linalg.res->dot(transpose(vt), multiply(s[:, newaxis], transpose(u)))
A:numpy.linalg.linalg.(a, _)->_makearray(a)
A:numpy.linalg.linalg.(b, wrap)->_makearray(b)
A:numpy.linalg.linalg.(t, result_t)->_commonType(a, b)
A:numpy.linalg.linalg.bc->broadcast(a, b)
A:numpy.linalg.linalg.r->_fastCopyAndTranspose(result_t, a[:, :mc])
A:numpy.linalg.linalg.ia->inv(a)
A:numpy.linalg.linalg.ainv->numpy.linalg._umath_linalg.inv(a, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.msg->''.join(("The 'full' option is deprecated in favor of 'reduced'.\n", 'For backward compatibility let mode default.'))
A:numpy.linalg.linalg.mn->min(m, n)
A:numpy.linalg.linalg.tau->zeros((mn,), t)
A:numpy.linalg.linalg.work->zeros((lwork,), t)
A:numpy.linalg.linalg.results->lapack_routine(m, n, n_rhs, a, m, bstar, ldb, s, rcond, 0, work, lwork, iwork, 0)
A:numpy.linalg.linalg.lwork->int(work[0])
A:numpy.linalg.linalg.q->_fastCopyAndTranspose(result_t, q[:mc])
A:numpy.linalg.linalg.w->w.astype(_realType(result_t)).astype(_realType(result_t))
A:numpy.linalg.linalg.result_t->_complexType(result_t)
A:numpy.linalg.linalg.UPLO->UPLO.upper().upper()
A:numpy.linalg.linalg.(w, vt)->gufunc(a, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.vt->vt.astype(result_t).astype(result_t)
A:numpy.linalg.linalg.(u, s, vt)->svd(a, 0)
A:numpy.linalg.linalg.u->u.astype(result_t).astype(result_t)
A:numpy.linalg.linalg.s->zeros((min(m, n),), real_t)
A:numpy.linalg.linalg.x->asarray(x)
A:numpy.linalg.linalg.M->asarray(M)
A:numpy.linalg.linalg.S->svd(M, compute_uv=False)
A:numpy.linalg.linalg.real_t->_linalgRealType(t)
A:numpy.linalg.linalg.(sign, logdet)->numpy.linalg._umath_linalg.slogdet(a, signature=signature)
A:numpy.linalg.linalg.ldb->max(n, m)
A:numpy.linalg.linalg.result_real_t->_realType(result_t)
A:numpy.linalg.linalg.bstar->zeros((ldb, n_rhs), t)
A:numpy.linalg.linalg.bstar[:b.shape[0], :n_rhs]->b.ravel().ravel().copy()
A:numpy.linalg.linalg.(a, bstar)->_to_native_byte_order(a, bstar)
A:numpy.linalg.linalg.nlvl->max(0, int(math.log(float(min(m, n)) / 2.0)) + 1)
A:numpy.linalg.linalg.iwork->zeros((3 * min(m, n) * nlvl + 11 * min(m, n),), fortran_int)
A:numpy.linalg.linalg.rwork->zeros((lrwork,), real_t)
A:numpy.linalg.linalg.a_real->zeros((m, n), real_t)
A:numpy.linalg.linalg.bstar_real->zeros((ldb, n_rhs), real_t)
A:numpy.linalg.linalg.lrwork->int(rwork[0])
A:numpy.linalg.linalg.resids->sum(transpose(bstar)[n:, :] ** 2, axis=0).astype(result_real_t)
A:numpy.linalg.linalg.st->s[:min(n, m)].copy().astype(result_real_t)
A:numpy.linalg.linalg.y->rollaxis(rollaxis(x, col_axis, x.ndim), row_axis, -1)
A:numpy.linalg.linalg.result->op(svd(y, compute_uv=0), axis=-1)
A:numpy.linalg.linalg.axis->tuple(range(nd))
A:numpy.linalg.linalg.absx->abs(absx)
numpy.LinAlgError(Exception)
numpy._assertFinite(*arrays)
numpy._assertNdSquareness(*arrays)
numpy._assertNoEmpty2d(*arrays)
numpy._assertRank2(*arrays)
numpy._assertRankAtLeast2(*arrays)
numpy._assertSquareness(*arrays)
numpy._commonType(*arrays)
numpy._complexType(t,default=cdouble)
numpy._convertarray(a)
numpy._determine_error_states()
numpy._fastCopyAndTranspose(type,*arrays)
numpy._linalgRealType(t)
numpy._makearray(a)
numpy._multi_svd_norm(x,row_axis,col_axis,op)
numpy._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy._raise_linalgerror_nonposdef(err,flag)
numpy._raise_linalgerror_singular(err,flag)
numpy._raise_linalgerror_svd_nonconvergence(err,flag)
numpy._realType(t,default=double)
numpy._to_native_byte_order(*arrays)
numpy.cholesky(a)
numpy.cond(x,p=None)
numpy.det(a)
numpy.eig(a)
numpy.eigh(a,UPLO='L')
numpy.eigvals(a)
numpy.eigvalsh(a,UPLO='L')
numpy.get_linalg_error_extobj(callback)
numpy.inv(a)
numpy.isComplexType(t)
numpy.linalg.linalg.LinAlgError(Exception)
numpy.linalg.linalg._assertFinite(*arrays)
numpy.linalg.linalg._assertNdSquareness(*arrays)
numpy.linalg.linalg._assertNoEmpty2d(*arrays)
numpy.linalg.linalg._assertRank2(*arrays)
numpy.linalg.linalg._assertRankAtLeast2(*arrays)
numpy.linalg.linalg._assertSquareness(*arrays)
numpy.linalg.linalg._commonType(*arrays)
numpy.linalg.linalg._complexType(t,default=cdouble)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._determine_error_states()
numpy.linalg.linalg._fastCopyAndTranspose(type,*arrays)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._multi_svd_norm(x,row_axis,col_axis,op)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err,flag)
numpy.linalg.linalg._raise_linalgerror_singular(err,flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err,flag)
numpy.linalg.linalg._realType(t,default=double)
numpy.linalg.linalg._to_native_byte_order(*arrays)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.cond(x,p=None)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a,UPLO='L')
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a,UPLO='L')
numpy.linalg.linalg.get_linalg_error_extobj(callback)
numpy.linalg.linalg.inv(a)
numpy.linalg.linalg.isComplexType(t)
numpy.linalg.linalg.lstsq(a,b,rcond=-1)
numpy.linalg.linalg.matrix_rank(M,tol=None)
numpy.linalg.linalg.norm(x,ord=None,axis=None)
numpy.linalg.linalg.pinv(a,rcond=1e-15)
numpy.linalg.linalg.qr(a,mode='reduced')
numpy.linalg.linalg.slogdet(a)
numpy.linalg.linalg.solve(a,b)
numpy.linalg.linalg.svd(a,full_matrices=1,compute_uv=1)
numpy.linalg.linalg.tensorinv(a,ind=2)
numpy.linalg.linalg.tensorsolve(a,b,axes=None)
numpy.lstsq(a,b,rcond=-1)
numpy.matrix_rank(M,tol=None)
numpy.norm(x,ord=None,axis=None)
numpy.pinv(a,rcond=1e-15)
numpy.qr(a,mode='reduced')
numpy.slogdet(a)
numpy.solve(a,b)
numpy.svd(a,full_matrices=1,compute_uv=1)
numpy.tensorinv(a,ind=2)
numpy.tensorsolve(a,b,axes=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/setup.py----------------------------------------
A:numpy.linalg.setup.config->Configuration('linalg', parent_package, top_path)
A:numpy.linalg.setup.lapack_info->get_info('lapack_opt', 0)
numpy.linalg.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/tests/test_build.py----------------------------------------
A:numpy.linalg.tests.test_build.p->Popen(self.cmd + [file], stdout=PIPE, stderr=PIPE)
A:numpy.linalg.tests.test_build.(stdout, stderr)->Popen(self.cmd + [file], stdout=PIPE, stderr=PIPE).communicate()
A:numpy.linalg.tests.test_build.stdout->self.get_dependencies(file)
A:numpy.linalg.tests.test_build.rdeps->dict([(dep, re.compile(dep)) for dep in deps])
A:numpy.linalg.tests.test_build.f->FindDependenciesLdd()
A:numpy.linalg.tests.test_build.deps->FindDependenciesLdd().grep_dependencies(lapack_lite.__file__, asbytes_nested(['libg2c', 'libgfortran']))
numpy.linalg.tests.test_build.FindDependenciesLdd(self)
numpy.linalg.tests.test_build.FindDependenciesLdd.__init__(self)
numpy.linalg.tests.test_build.FindDependenciesLdd.get_dependencies(self,file)
numpy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies(self,file,deps)
numpy.linalg.tests.test_build.TestF77Mismatch(TestCase)
numpy.linalg.tests.test_build.TestF77Mismatch.test_lapack(self)
numpy.tests.test_build.FindDependenciesLdd(self)
numpy.tests.test_build.FindDependenciesLdd.get_dependencies(self,file)
numpy.tests.test_build.FindDependenciesLdd.grep_dependencies(self,file,deps)
numpy.tests.test_build.TestF77Mismatch(TestCase)
numpy.tests.test_build.TestF77Mismatch.test_lapack(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/tests/test_linalg.py----------------------------------------
A:numpy.linalg.tests.test_linalg.a->numpy.array([[1]])
A:numpy.linalg.tests.test_linalg.b->array([[1, 2], [3, 4], [5, 6]])
A:numpy.linalg.tests.test_linalg.new_case->LinalgCase(case.name + '_' + a_tag + '_' + b_tag, a, b, exception_cls=case.exception_cls)
A:numpy.linalg.tests.test_linalg.slices->tuple([slice(None, None, repeat) for repeat in repeats])
A:numpy.linalg.tests.test_linalg.xi->numpy.lib.stride_tricks.as_strided(x, strides=s)
A:numpy.linalg.tests.test_linalg.s->numpy.atleast_1d(s)
A:numpy.linalg.tests.test_linalg.r->numpy.empty(a.shape, dtype=a.dtype)
A:numpy.linalg.tests.test_linalg.r[c]->identity(a.shape[-2])
A:numpy.linalg.tests.test_linalg.x->numpy.array([-2 ** 31], dtype=np.int32)
A:numpy.linalg.tests.test_linalg.result->numpy.linalg.solve(a[:, 0:0, 0:0], b[:, 0:0, 0:0])
A:numpy.linalg.tests.test_linalg.a_inv->numpy.linalg.inv(a)
A:numpy.linalg.tests.test_linalg.res->routine(arr)
A:numpy.linalg.tests.test_linalg.ev->numpy.linalg.eigvalsh(a, 'L')
A:numpy.linalg.tests.test_linalg.(evalues, evectors)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_linalg.(w, v)->numpy.linalg.eigh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.(u, s, vt)->numpy.linalg.svd(a, 0)
A:numpy.linalg.tests.test_linalg.(u, s, vh)->numpy.linalg.svd(x)
A:numpy.linalg.tests.test_linalg.c->asarray(a)
A:numpy.linalg.tests.test_linalg.A->array([[1, 2, 3], [4, 5, 6]], dtype=self.dt)
A:numpy.linalg.tests.test_linalg.a_ginv->numpy.linalg.pinv(a)
A:numpy.linalg.tests.test_linalg.d->d.astype(np.complex64).astype(np.complex64)
A:numpy.linalg.tests.test_linalg.(s, ld)->numpy.linalg.slogdet(a)
A:numpy.linalg.tests.test_linalg.ad->asarray(a).astype(cdouble)
A:numpy.linalg.tests.test_linalg.ld->numpy.atleast_1d(ld)
A:numpy.linalg.tests.test_linalg.(ph, s)->numpy.linalg.slogdet(x)
A:numpy.linalg.tests.test_linalg.arr->numpy.eye(4, dtype=dtt)
A:numpy.linalg.tests.test_linalg.(x, residuals, rank, sv)->numpy.linalg.lstsq(a, b)
A:numpy.linalg.tests.test_linalg.expect_resids->numpy.array([]).view(type(x))
A:numpy.linalg.tests.test_linalg.R90->array([[0, 1], [-1, 0]])
A:numpy.linalg.tests.test_linalg.Arb22->array([[4, -7], [-2, 10]])
A:numpy.linalg.tests.test_linalg.noninv->array([[1, 0], [0, 0]])
A:numpy.linalg.tests.test_linalg.arbfloat->array([[0.1, 3.2], [1.2, 0.7]])
A:numpy.linalg.tests.test_linalg.large->identity(10)
A:numpy.linalg.tests.test_linalg.t->large[1, :].copy()
A:numpy.linalg.tests.test_linalg.mz->matrix_power(M, -1)
A:numpy.linalg.tests.test_linalg.ev2->numpy.linalg.eigvalsh(a, 'U')
A:numpy.linalg.tests.test_linalg.w->numpy.linalg.eigvalsh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.Klo->numpy.array([[0, 0], [1, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.Kup->numpy.array([[0, 1], [0, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.tgt->numpy.array([-1, 1], dtype=np.double)
A:numpy.linalg.tests.test_linalg.rtol->get_rtol(np.double)
A:numpy.linalg.tests.test_linalg.(ev, evc)->numpy.linalg.eigh(a)
A:numpy.linalg.tests.test_linalg.(ev2, evc2)->numpy.linalg.eigh(a, 'U')
A:numpy.linalg.tests.test_linalg.B->numpy.arange(1, 25, dtype=self.dt).reshape(2, 3, 4)
A:numpy.linalg.tests.test_linalg.n->norm(B, ord=order, axis=(0, 1))
A:numpy.linalg.tests.test_linalg.I->numpy.eye(4)
A:numpy.linalg.tests.test_linalg.rng->numpy.random.RandomState(20120714)
A:numpy.linalg.tests.test_linalg.X->numpy.random.RandomState(20120714).normal(size=(40, 10))
A:numpy.linalg.tests.test_linalg.a_type->type(a)
A:numpy.linalg.tests.test_linalg.k->min(m, n)
A:numpy.linalg.tests.test_linalg.(q, r)->numpy.linalg.qr(a, mode='complete')
A:numpy.linalg.tests.test_linalg.(q1, r1)->numpy.linalg.qr(a, mode='reduced')
A:numpy.linalg.tests.test_linalg.r2->numpy.linalg.qr(a, mode='r')
A:numpy.linalg.tests.test_linalg.(h, tau)->numpy.linalg.qr(a.T, mode='raw')
A:numpy.linalg.tests.test_linalg.m1->numpy.array([[1]]).astype(dt)
A:numpy.linalg.tests.test_linalg.m2->array([[1, 2], [3, 4], [5, 6]]).astype(dt)
A:numpy.linalg.tests.test_linalg.n_arr->numpy.eye(4, dtype=dtt).newbyteorder(native)
A:numpy.linalg.tests.test_linalg.sw_arr->numpy.eye(4, dtype=dtt).newbyteorder('S').byteswap()
A:numpy.linalg.tests.test_linalg.invertible->numpy.array([[1, 2], [3, 4]])
A:numpy.linalg.tests.test_linalg.non_invertible->numpy.array([[1, 1], [1, 1]])
A:numpy.linalg.tests.test_linalg.pid->os.fork()
A:numpy.linalg.tests.test_linalg.(pid, status)->os.wait()
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase(object)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianTestCase(object)
numpy.linalg.tests.test_linalg.HermitianTestCase.test_herm_cases(self)
numpy.linalg.tests.test_linalg.LinalgCase(self,name,a,b,exception_cls=None)
numpy.linalg.tests.test_linalg.LinalgCase.__init__(self,name,a,b,exception_cls=None)
numpy.linalg.tests.test_linalg.LinalgCase.__repr__(self)
numpy.linalg.tests.test_linalg.LinalgCase.check(self,do)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase(object)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedTestCase(object)
numpy.linalg.tests.test_linalg.LinalgGeneralizedTestCase.test_generalized_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase(object)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgTestCase(object)
numpy.linalg.tests.test_linalg.LinalgTestCase.test_sq_cases(self)
numpy.linalg.tests.test_linalg.TestBoolPower(object)
numpy.linalg.tests.test_linalg.TestBoolPower.test_square(self)
numpy.linalg.tests.test_linalg.TestCond2(LinalgTestCase)
numpy.linalg.tests.test_linalg.TestCond2.do(self,a,b)
numpy.linalg.tests.test_linalg.TestCondInf(object)
numpy.linalg.tests.test_linalg.TestCondInf.test(self)
numpy.linalg.tests.test_linalg.TestCondSVD(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestCondSVD.do(self,a,b)
numpy.linalg.tests.test_linalg.TestDet(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestDet.do(self,a,b)
numpy.linalg.tests.test_linalg.TestDet.test_types(self)
numpy.linalg.tests.test_linalg.TestDet.test_zero(self)
numpy.linalg.tests.test_linalg.TestEig(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEig.do(self,a,b)
numpy.linalg.tests.test_linalg.TestEig.test_types(self)
numpy.linalg.tests.test_linalg.TestEigh(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEigh.do(self,a,b)
numpy.linalg.tests.test_linalg.TestEigh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigh.test_types(self)
numpy.linalg.tests.test_linalg.TestEigvals(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEigvals.do(self,a,b)
numpy.linalg.tests.test_linalg.TestEigvals.test_types(self)
numpy.linalg.tests.test_linalg.TestEigvalsh(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEigvalsh.do(self,a,b)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_types(self)
numpy.linalg.tests.test_linalg.TestInv(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestInv.do(self,a,b)
numpy.linalg.tests.test_linalg.TestInv.test_0_size(self)
numpy.linalg.tests.test_linalg.TestInv.test_types(self)
numpy.linalg.tests.test_linalg.TestLstsq(LinalgTestCase,LinalgNonsquareTestCase)
numpy.linalg.tests.test_linalg.TestLstsq.do(self,a,b)
numpy.linalg.tests.test_linalg.TestMatrixPower(object)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_invert_noninvertible(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power_trailing_zero(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.testip_invert(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.testip_one(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.testip_two(self)
numpy.linalg.tests.test_linalg.TestMatrixPower.testip_zero(self)
numpy.linalg.tests.test_linalg.TestMatrixRank(object)
numpy.linalg.tests.test_linalg.TestMatrixRank.test_matrix_rank(self)
numpy.linalg.tests.test_linalg.TestNormDouble(_TestNorm)
numpy.linalg.tests.test_linalg.TestNormInt64(_TestNorm)
numpy.linalg.tests.test_linalg.TestNormSingle(_TestNorm)
numpy.linalg.tests.test_linalg.TestPinv(LinalgTestCase)
numpy.linalg.tests.test_linalg.TestPinv.do(self,a,b)
numpy.linalg.tests.test_linalg.TestQR(object)
numpy.linalg.tests.test_linalg.TestQR.check_qr(self,a)
numpy.linalg.tests.test_linalg.TestQR.test_mode_all_but_economic(self)
numpy.linalg.tests.test_linalg.TestQR.test_mode_raw(self)
numpy.linalg.tests.test_linalg.TestQR.test_qr_empty(self)
numpy.linalg.tests.test_linalg.TestSVD(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestSVD.do(self,a,b)
numpy.linalg.tests.test_linalg.TestSVD.test_types(self)
numpy.linalg.tests.test_linalg.TestSolve(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestSolve.do(self,a,b)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size(self)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k(self)
numpy.linalg.tests.test_linalg.TestSolve.test_types(self)
numpy.linalg.tests.test_linalg._TestNorm(object)
numpy.linalg.tests.test_linalg._TestNorm.test_axis(self)
numpy.linalg.tests.test_linalg._TestNorm.test_bad_args(self)
numpy.linalg.tests.test_linalg._TestNorm.test_complex_high_ord(self)
numpy.linalg.tests.test_linalg._TestNorm.test_empty(self)
numpy.linalg.tests.test_linalg._TestNorm.test_intmin(self)
numpy.linalg.tests.test_linalg._TestNorm.test_longdouble_norm(self)
numpy.linalg.tests.test_linalg._TestNorm.test_matrix(self)
numpy.linalg.tests.test_linalg._TestNorm.test_vector(self)
numpy.linalg.tests.test_linalg._check_cases(func,cases)
numpy.linalg.tests.test_linalg._stride_comb_iter(x)
numpy.linalg.tests.test_linalg.assert_almost_equal(a,b,**kw)
numpy.linalg.tests.test_linalg.dot_generalized(a,b)
numpy.linalg.tests.test_linalg.get_complex_dtype(dtype)
numpy.linalg.tests.test_linalg.get_real_dtype(dtype)
numpy.linalg.tests.test_linalg.get_rtol(dtype)
numpy.linalg.tests.test_linalg.identity_like_generalized(a)
numpy.linalg.tests.test_linalg.ifthen(a,b)
numpy.linalg.tests.test_linalg.imply(a,b)
numpy.linalg.tests.test_linalg.test_byteorder_check()
numpy.linalg.tests.test_linalg.test_generalized_raise_multiloop()
numpy.linalg.tests.test_linalg.test_reduced_rank()
numpy.linalg.tests.test_linalg.test_xerbla_override()
numpy.tests.test_HermitianGeneralizedTestCase(object)
numpy.tests.test_HermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.tests.test_HermitianTestCase(object)
numpy.tests.test_HermitianTestCase.test_herm_cases(self)
numpy.tests.test_LinalgCase(self,name,a,b,exception_cls=None)
numpy.tests.test_LinalgCase.__repr__(self)
numpy.tests.test_LinalgCase.check(self,do)
numpy.tests.test_LinalgGeneralizedNonsquareTestCase(object)
numpy.tests.test_LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.tests.test_LinalgGeneralizedTestCase(object)
numpy.tests.test_LinalgGeneralizedTestCase.test_generalized_sq_cases(self)
numpy.tests.test_LinalgNonsquareTestCase(object)
numpy.tests.test_LinalgNonsquareTestCase.test_sq_cases(self)
numpy.tests.test_LinalgTestCase(object)
numpy.tests.test_LinalgTestCase.test_sq_cases(self)
numpy.tests.test_TestBoolPower(object)
numpy.tests.test_TestBoolPower.test_square(self)
numpy.tests.test_TestCond2(LinalgTestCase)
numpy.tests.test_TestCond2.do(self,a,b)
numpy.tests.test_TestCondInf(object)
numpy.tests.test_TestCondInf.test(self)
numpy.tests.test_TestCondSVD(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestCondSVD.do(self,a,b)
numpy.tests.test_TestDet(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestDet.do(self,a,b)
numpy.tests.test_TestDet.test_types(self)
numpy.tests.test_TestDet.test_zero(self)
numpy.tests.test_TestEig(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestEig.do(self,a,b)
numpy.tests.test_TestEig.test_types(self)
numpy.tests.test_TestEigh(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_TestEigh.do(self,a,b)
numpy.tests.test_TestEigh.test_UPLO(self)
numpy.tests.test_TestEigh.test_invalid(self)
numpy.tests.test_TestEigh.test_types(self)
numpy.tests.test_TestEigvals(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestEigvals.do(self,a,b)
numpy.tests.test_TestEigvals.test_types(self)
numpy.tests.test_TestEigvalsh(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_TestEigvalsh.do(self,a,b)
numpy.tests.test_TestEigvalsh.test_UPLO(self)
numpy.tests.test_TestEigvalsh.test_invalid(self)
numpy.tests.test_TestEigvalsh.test_types(self)
numpy.tests.test_TestInv(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestInv.do(self,a,b)
numpy.tests.test_TestInv.test_0_size(self)
numpy.tests.test_TestInv.test_types(self)
numpy.tests.test_TestLstsq(LinalgTestCase,LinalgNonsquareTestCase)
numpy.tests.test_TestLstsq.do(self,a,b)
numpy.tests.test_TestMatrixPower(object)
numpy.tests.test_TestMatrixPower.test_invert_noninvertible(self)
numpy.tests.test_TestMatrixPower.test_large_power(self)
numpy.tests.test_TestMatrixPower.test_large_power_trailing_zero(self)
numpy.tests.test_TestMatrixPower.testip_invert(self)
numpy.tests.test_TestMatrixPower.testip_one(self)
numpy.tests.test_TestMatrixPower.testip_two(self)
numpy.tests.test_TestMatrixPower.testip_zero(self)
numpy.tests.test_TestMatrixRank(object)
numpy.tests.test_TestMatrixRank.test_matrix_rank(self)
numpy.tests.test_TestNormDouble(_TestNorm)
numpy.tests.test_TestNormInt64(_TestNorm)
numpy.tests.test_TestNormSingle(_TestNorm)
numpy.tests.test_TestPinv(LinalgTestCase)
numpy.tests.test_TestPinv.do(self,a,b)
numpy.tests.test_TestQR(object)
numpy.tests.test_TestQR.check_qr(self,a)
numpy.tests.test_TestQR.test_mode_all_but_economic(self)
numpy.tests.test_TestQR.test_mode_raw(self)
numpy.tests.test_TestQR.test_qr_empty(self)
numpy.tests.test_TestSVD(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestSVD.do(self,a,b)
numpy.tests.test_TestSVD.test_types(self)
numpy.tests.test_TestSolve(LinalgTestCase,LinalgGeneralizedTestCase)
numpy.tests.test_TestSolve.do(self,a,b)
numpy.tests.test_TestSolve.test_0_size(self)
numpy.tests.test_TestSolve.test_0_size_k(self)
numpy.tests.test_TestSolve.test_types(self)
numpy.tests.test__TestNorm(object)
numpy.tests.test__TestNorm.test_axis(self)
numpy.tests.test__TestNorm.test_bad_args(self)
numpy.tests.test__TestNorm.test_complex_high_ord(self)
numpy.tests.test__TestNorm.test_empty(self)
numpy.tests.test__TestNorm.test_intmin(self)
numpy.tests.test__TestNorm.test_longdouble_norm(self)
numpy.tests.test__TestNorm.test_matrix(self)
numpy.tests.test__TestNorm.test_vector(self)
numpy.tests.test__check_cases(func,cases)
numpy.tests.test__stride_comb_iter(x)
numpy.tests.test_assert_almost_equal(a,b,**kw)
numpy.tests.test_dot_generalized(a,b)
numpy.tests.test_get_complex_dtype(dtype)
numpy.tests.test_get_real_dtype(dtype)
numpy.tests.test_get_rtol(dtype)
numpy.tests.test_identity_like_generalized(a)
numpy.tests.test_ifthen(a,b)
numpy.tests.test_imply(a,b)
numpy.tests.test_test_byteorder_check()
numpy.tests.test_test_generalized_raise_multiloop()
numpy.tests.test_test_reduced_rank()
numpy.tests.test_test_xerbla_override()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/tests/test_deprecations.py----------------------------------------
A:numpy.linalg.tests.test_deprecations.a->numpy.eye(2)
numpy.linalg.tests.test_deprecations.test_qr_mode_full_future_warning()
numpy.tests.test_deprecations.test_qr_mode_full_future_warning()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/linalg/tests/test_regression.py----------------------------------------
A:numpy.linalg.tests.test_regression.rva->array([103.221168 + 0j, -19.1843603 + 0j, -0.604004526 + 15.84422474j, -0.604004526 - 15.84422474j, -11.3692929 + 0j, -0.657612485 + 10.41755503j, -0.657612485 - 10.41755503j, 18.2126812 + 0j, 10.6011014 + 0j, 7.80732773 + 0j, -0.765390898 + 0j, 1.51971555e-15 + 0j, -1.51308713e-15 + 0j])
A:numpy.linalg.tests.test_regression.a->numpy.ones(shape, dtype=t)
A:numpy.linalg.tests.test_regression.(va, ve)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_regression.cov->array([[77.70273908, 3.51489954, 15.64602427], [3.51489954, 88.97013878, -1.07431931], [15.64602427, -1.07431931, 98.18223512]])
A:numpy.linalg.tests.test_regression.(vals, vecs)->numpy.linalg.eigh(cov)
A:numpy.linalg.tests.test_regression.(u, s, vh)->numpy.linalg.svd(a)
A:numpy.linalg.tests.test_regression.b->array(a, dtype='<f8')
A:numpy.linalg.tests.test_regression.ap->numpy.linalg.cholesky(a)
A:numpy.linalg.tests.test_regression.bp->numpy.linalg.cholesky(b)
A:numpy.linalg.tests.test_regression.x->numpy.eye(1000, 66)
A:numpy.linalg.tests.test_regression.w->numpy.linalg.svd(a, compute_uv=False)
A:numpy.linalg.tests.test_regression.c->numpy.count_nonzero(np.absolute(w) > 0.5)
numpy.linalg.tests.test_regression.TestRegression(TestCase)
numpy.linalg.tests.test_regression.TestRegression.test_eig_build(self,level=rlevel)
numpy.linalg.tests.test_regression.TestRegression.test_eigh_build(self,level=rlevel)
numpy.linalg.tests.test_regression.TestRegression.test_lapack_endian(self)
numpy.linalg.tests.test_regression.TestRegression.test_large_svd_32bit(self)
numpy.linalg.tests.test_regression.TestRegression.test_norm_vector_badarg(self)
numpy.linalg.tests.test_regression.TestRegression.test_svd_build(self,level=rlevel)
numpy.linalg.tests.test_regression.TestRegression.test_svd_no_uv(self)
numpy.tests.test_regression.TestRegression(TestCase)
numpy.tests.test_regression.TestRegression.test_eig_build(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_eigh_build(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_lapack_endian(self)
numpy.tests.test_regression.TestRegression.test_large_svd_32bit(self)
numpy.tests.test_regression.TestRegression.test_norm_vector_badarg(self)
numpy.tests.test_regression.TestRegression.test_svd_build(self,level=rlevel)
numpy.tests.test_regression.TestRegression.test_svd_no_uv(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/npy_pkg_config.py----------------------------------------
A:numpy.distutils.npy_pkg_config._VAR->re.compile('\\$\\{([a-zA-Z0-9_-]+)\\}')
A:numpy.distutils.npy_pkg_config.lexer->shlex.shlex(line)
A:numpy.distutils.npy_pkg_config.t->next_token(t)
A:numpy.distutils.npy_pkg_config.val->self.vars.interpolate(self._sections[section]['libs'])
A:numpy.distutils.npy_pkg_config.self._raw_data->dict([(k, v) for (k, v) in d.items()])
A:numpy.distutils.npy_pkg_config.self._re[name]->re.compile('\\$\\{%s\\}' % name)
A:numpy.distutils.npy_pkg_config.value->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(2)
A:numpy.distutils.npy_pkg_config.nvalue->_interpolate(value)
A:numpy.distutils.npy_pkg_config.config->SafeConfigParser()
A:numpy.distutils.npy_pkg_config.n->SafeConfigParser().read(filenames)
A:numpy.distutils.npy_pkg_config.meta->parse_meta(config)
A:numpy.distutils.npy_pkg_config.vars[name]->_escape_backslash(value)
A:numpy.distutils.npy_pkg_config.requires[s]->SafeConfigParser().get(s, 'requires')
A:numpy.distutils.npy_pkg_config.(meta, vars, sections, reqs)->_read_config(filenames)
A:numpy.distutils.npy_pkg_config.(nmeta, nvars, nsections, nreqs)->_read_config(pkg_to_filename(rvalue))
A:numpy.distutils.npy_pkg_config.vars['pkgdir']->_escape_backslash(os.path.dirname(mod.__file__))
A:numpy.distutils.npy_pkg_config.v->_read_config_imp(pkg_to_filename(pkgname), dirs)
A:numpy.distutils.npy_pkg_config.parser->OptionParser()
A:numpy.distutils.npy_pkg_config.(options, args)->OptionParser().parse_args(sys.argv)
A:numpy.distutils.npy_pkg_config.files->glob.glob('*.ini')
A:numpy.distutils.npy_pkg_config.info->read_config(pkg_name, ['numpy/core/lib/npy-pkg-config', '.'])
A:numpy.distutils.npy_pkg_config.d->os.environ.get('NPY_PKG_CONFIG_PATH')
A:numpy.distutils.npy_pkg_config.m->re.search('([\\S]+)=([\\S]+)', options.define_variable)
A:numpy.distutils.npy_pkg_config.name->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(1)
numpy.distutils.FormatError(self,msg)
numpy.distutils.FormatError.__str__(self)
numpy.distutils.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.LibraryInfo.__str__(self)
numpy.distutils.LibraryInfo.cflags(self,section='default')
numpy.distutils.LibraryInfo.libs(self,section='default')
numpy.distutils.LibraryInfo.sections(self)
numpy.distutils.PkgNotFound(self,msg)
numpy.distutils.PkgNotFound.__str__(self)
numpy.distutils.VariableSet(self,d)
numpy.distutils.VariableSet.__getitem__(self,name)
numpy.distutils.VariableSet.__setitem__(self,name,value)
numpy.distutils.VariableSet._init_parse(self)
numpy.distutils.VariableSet._init_parse_var(self,name,value)
numpy.distutils.VariableSet.interpolate(self,value)
numpy.distutils.VariableSet.variables(self)
numpy.distutils._escape_backslash(val)
numpy.distutils._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.FormatError(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__init__(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__init__(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo.cflags(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.libs(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.sections(self)
numpy.distutils.npy_pkg_config.PkgNotFound(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__init__(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__str__(self)
numpy.distutils.npy_pkg_config.VariableSet(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__getitem__(self,name)
numpy.distutils.npy_pkg_config.VariableSet.__init__(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__setitem__(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet._init_parse(self)
numpy.distutils.npy_pkg_config.VariableSet._init_parse_var(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet.interpolate(self,value)
numpy.distutils.npy_pkg_config.VariableSet.variables(self)
numpy.distutils.npy_pkg_config._escape_backslash(val)
numpy.distutils.npy_pkg_config._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.parse_config(filename,dirs=None)
numpy.distutils.npy_pkg_config.parse_flags(line)
numpy.distutils.npy_pkg_config.parse_meta(config)
numpy.distutils.npy_pkg_config.parse_sections(config)
numpy.distutils.npy_pkg_config.parse_variables(config)
numpy.distutils.npy_pkg_config.pkg_to_filename(pkg_name)
numpy.distutils.npy_pkg_config.read_config(pkgname,dirs=None)
numpy.distutils.parse_config(filename,dirs=None)
numpy.distutils.parse_flags(line)
numpy.distutils.parse_meta(config)
numpy.distutils.parse_sections(config)
numpy.distutils.parse_variables(config)
numpy.distutils.pkg_to_filename(pkg_name)
numpy.distutils.read_config(pkgname,dirs=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/__config__.py----------------------------------------
A:numpy.distutils.__config__.g->globals()
A:numpy.distutils.__config__.v->str(v)
numpy.distutils.__config__.get_info(name)
numpy.distutils.__config__.show()
numpy.distutils.show_config()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/numpy_distribution.py----------------------------------------
numpy.distutils.numpy_distribution.NumpyDistribution(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.__init__(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.has_scons_scripts(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/misc_util.py----------------------------------------
A:numpy.distutils.misc_util.args->fix_args_py3(args)
A:numpy.distutils.misc_util.splitted->m.group('name').split('/')
A:numpy.distutils.misc_util.pd->os.path.abspath(parent_path)
A:numpy.distutils.misc_util.apath->os.path.abspath(path)
A:numpy.distutils.misc_util.caller_file->eval('__file__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.d->os.path.dirname(d)
A:numpy.distutils.misc_util.caller_name->eval('__name__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.joined->joined.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_file->os.path.join(path, '_numpyconfig.h')
A:numpy.distutils.misc_util.dirs->get_numpy_include_dirs()
A:numpy.distutils.misc_util.fn->njoin(self.local_path, f)
A:numpy.distutils.misc_util.fid->open(config_file)
A:numpy.distutils.misc_util.value->line[len(s):].strip()
A:numpy.distutils.misc_util.l->os.path.basename(subpackage_path).split('.')
A:numpy.distutils.misc_util.i->sys.version.find(prefix)
A:numpy.distutils.misc_util.p->subprocess.Popen(['hg identify --num'], shell=True, stdout=subprocess.PIPE, stderr=None, close_fds=True)
A:numpy.distutils.misc_util.p2->glob.glob(njoin(local_path, n))
A:numpy.distutils.misc_util.n2->njoin(local_path, n)
A:numpy.distutils.misc_util._temporary_directory->tempfile.mkdtemp()
A:numpy.distutils.misc_util.(fid, name)->tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=_temporary_directory, text=text)
A:numpy.distutils.misc_util.fo->os.fdopen(fid, 'w')
A:numpy.distutils.misc_util._colour_codes->dict(black=0, red=1, green=2, yellow=3, blue=4, magenta=5, cyan=6, white=7, default=9)
A:numpy.distutils.misc_util.msc_pos->sys.version.find('MSC v.')
A:numpy.distutils.misc_util.lib->{'1300': 'msvcr70', '1310': 'msvcr71', '1400': 'msvcr80', '1500': 'msvcr90', '1600': 'msvcr100'}.get(msc_ver, None)
A:numpy.distutils.misc_util.f->open(target, 'w')
A:numpy.distutils.misc_util.m->re.match('(?P<revision>\\d+)', sout.read())
A:numpy.distutils.misc_util.name->re.match('(?P<revision>\\d+)', sout.read()).group('name')
A:numpy.distutils.misc_util.modules->_get_f90_modules(source)
A:numpy.distutils.misc_util.head->glob.glob(os.path.join(d, '*.h'))
A:numpy.distutils.misc_util.abs_dir->os.path.abspath(directory)
A:numpy.distutils.misc_util.c->Configuration(name, parent_name, local_path)
A:numpy.distutils.misc_util.new_dir->os.sep.join(new_dir)
A:numpy.distutils.misc_util.prune_file_pat->re.compile('(?:[~#]|\\.py[co]|\\.o)$')
A:numpy.distutils.misc_util.dpath->os.path.join(dirpath, d)
A:numpy.distutils.misc_util.rpath->rel_path(path, self.local_path)
A:numpy.distutils.misc_util.sources->lib[1].get('sources', [])
A:numpy.distutils.misc_util.depends->lib[1].get('depends', [])
A:numpy.distutils.misc_util.confvars->distutils.sysconfig.get_config_vars()
A:numpy.distutils.misc_util.so_ext->so_ext.replace('.' + confvars.get('SOABI'), '', 1).replace('.' + confvars.get('SOABI'), '', 1)
A:numpy.distutils.misc_util.self.name->dot_join(parent_name, package_name)
A:numpy.distutils.misc_util.caller_frame->get_frame(caller_level)
A:numpy.distutils.misc_util.self.local_path->get_path_from_frame(caller_frame, top_path)
A:numpy.distutils.misc_util.package_path->njoin(self.local_path, package_path)
A:numpy.distutils.misc_util.self.path_in_package->os.path.join(*self.name.split('.'))
A:numpy.distutils.misc_util.v->copy.copy(attrs.get(n, {}))
A:numpy.distutils.misc_util.self.options->dict(ignore_setup_xxx_py=False, assume_default_configuration=False, delegate_options_to_subpackages=False, quiet=False)
A:numpy.distutils.misc_util.caller_instance->eval('self', f.f_globals, f.f_locals)
A:numpy.distutils.misc_util.a->getattr(self, k, None)
A:numpy.distutils.misc_util.subpackage_path->njoin([subpackage_path] + l[:-1])
A:numpy.distutils.misc_util.n->dot_join(self.name, name)
A:numpy.distutils.misc_util.fo_setup_py->open(setup_py, 'U')
A:numpy.distutils.misc_util.setup_module->imp.load_module('_'.join(n.split('.')), fo_setup_py, setup_py, ('.py', 'U', 1))
A:numpy.distutils.misc_util.config->self._get_configuration_from_setup_py(setup_py, subpackage_name, subpackage_path, parent_name, caller_level=caller_level + 1)
A:numpy.distutils.misc_util.pn->dot_join(*[parent_name] + subpackage_name.split('.')[:-1])
A:numpy.distutils.misc_util.subpackage_name->os.path.basename(subpackage_path)
A:numpy.distutils.misc_util.setup_py->njoin(subpackage_path, 'setup_%s.py' % subpackage_name)
A:numpy.distutils.misc_util.config_list->self.get_subpackage(subpackage_name, subpackage_path, parent_name=parent_name, caller_level=2)
A:numpy.distutils.misc_util.dist->self.get_distribution()
A:numpy.distutils.misc_util.paths->self.paths(filepat, include_non_existing=False)
A:numpy.distutils.misc_util.pattern_list->os.path.dirname(d).split(os.sep)
A:numpy.distutils.misc_util.rl->list(range(len(pattern_list) - 1))
A:numpy.distutils.misc_util.path_list->path.replace('/', os.path.sep).split(os.sep)
A:numpy.distutils.misc_util.target_path->os.path.join(self.path_in_package, d, d1)
A:numpy.distutils.misc_util.data_dict[p]->set()
A:numpy.distutils.misc_util.include_dirs->self.paths(paths)
A:numpy.distutils.misc_util.include_non_existing->kws.get('include_non_existing', True)
A:numpy.distutils.misc_util.new_v->self.paths(v)
A:numpy.distutils.misc_util.ext_args->copy.copy(kw)
A:numpy.distutils.misc_util.ext_args['name']->dot_join(self.name, name)
A:numpy.distutils.misc_util.libraries->copy.copy(kw).get('libraries', [])
A:numpy.distutils.misc_util.(lname, lpath)->libname.split('@', 1)
A:numpy.distutils.misc_util.lpath->os.path.abspath(njoin(self.local_path, lpath))
A:numpy.distutils.misc_util.ext->Extension(**ext_args)
A:numpy.distutils.misc_util.build_info->copy.copy(build_info)
A:numpy.distutils.misc_util.install_dir->os.path.join(self.package_path, install_dir)
A:numpy.distutils.misc_util.template->os.path.join(self.package_path, template)
A:numpy.distutils.misc_util.scripts->self.paths(files)
A:numpy.distutils.misc_util.cmd->self.get_distribution().get_command_obj(cmdname)
A:numpy.distutils.misc_util.old_path->os.environ.get('PATH')
A:numpy.distutils.misc_util.path->path.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_cmd->self.get_config_cmd()
A:numpy.distutils.misc_util.flag->self.get_config_cmd().try_compile(simple_fortran_subroutine, lang='f90')
A:numpy.distutils.misc_util.cwd->os.getcwd()
A:numpy.distutils.misc_util.revision->self._get_hg_revision(self.local_path)
A:numpy.distutils.misc_util.entries->njoin(path, '.svn', 'entries')
A:numpy.distutils.misc_util.fstr->open(target, 'w').read()
A:numpy.distutils.misc_util.branch_fn->njoin(path, '.hg', 'branch')
A:numpy.distutils.misc_util.branch_cache_fn->njoin(path, '.hg', 'branch.cache')
A:numpy.distutils.misc_util.revision0->open(target, 'w').read().strip()
A:numpy.distutils.misc_util.revision1->int(revision1)
A:numpy.distutils.misc_util.version->str(revision)
A:numpy.distutils.misc_util.version_module->imp.load_module('_'.join(n.split('.')), *info)
A:numpy.distutils.misc_util.msg->get_exception()
A:numpy.distutils.misc_util.target->njoin(self.local_path, '__hg_version__.py')
A:numpy.distutils.misc_util.pkg_info->get_pkg_info(pkgname, dirs)
A:numpy.distutils.misc_util.info->parse_flags(pkg_info.cflags())
A:numpy.distutils.misc_util.prefix->prefix.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.(pathdrive, path)->os.path.splitdrive(path)
A:numpy.distutils.misc_util.j->sys.version.find(')', i)
numpy.distutils.misc_util.Configuration(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__init__(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__str__(self)
numpy.distutils.misc_util.Configuration._add_library(self,name,sources,install_dir,build_info)
numpy.distutils.misc_util.Configuration._fix_paths_dict(self,kw)
numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py(self,setup_py,subpackage_name,subpackage_path,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration._get_hg_revision(self,path)
numpy.distutils.misc_util.Configuration._get_svn_revision(self,path)
numpy.distutils.misc_util.Configuration._optimize_data_files(self)
numpy.distutils.misc_util.Configuration._wildcard_get_subpackage(self,subpackage_name,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration.add_data_dir(self,data_path)
numpy.distutils.misc_util.Configuration.add_data_files(self,*files)
numpy.distutils.misc_util.Configuration.add_define_macros(self,macros)
numpy.distutils.misc_util.Configuration.add_extension(self,name,sources,**kw)
numpy.distutils.misc_util.Configuration.add_headers(self,*files)
numpy.distutils.misc_util.Configuration.add_include_dirs(self,*paths)
numpy.distutils.misc_util.Configuration.add_installed_library(self,name,sources,install_dir,build_info=None)
numpy.distutils.misc_util.Configuration.add_library(self,name,sources,**build_info)
numpy.distutils.misc_util.Configuration.add_npy_pkg_config(self,template,install_dir,subst_dict=None)
numpy.distutils.misc_util.Configuration.add_numarray_include_dirs(self)
numpy.distutils.misc_util.Configuration.add_scripts(self,*files)
numpy.distutils.misc_util.Configuration.add_subpackage(self,subpackage_name,subpackage_path=None,standalone=False)
numpy.distutils.misc_util.Configuration.append_to(self,extlib)
numpy.distutils.misc_util.Configuration.dict_append(self,**dict)
numpy.distutils.misc_util.Configuration.get_build_temp_dir(self)
numpy.distutils.misc_util.Configuration.get_config_cmd(self)
numpy.distutils.misc_util.Configuration.get_distribution(self)
numpy.distutils.misc_util.Configuration.get_info(self,*names)
numpy.distutils.misc_util.Configuration.get_subpackage(self,subpackage_name,subpackage_path=None,parent_name=None,caller_level=1)
numpy.distutils.misc_util.Configuration.get_version(self,version_file=None,version_variable=None)
numpy.distutils.misc_util.Configuration.have_f77c(self)
numpy.distutils.misc_util.Configuration.have_f90c(self)
numpy.distutils.misc_util.Configuration.info(self,message)
numpy.distutils.misc_util.Configuration.make_config_py(self,name='__config__')
numpy.distutils.misc_util.Configuration.make_hg_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.make_svn_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.paths(self,*paths,**kws)
numpy.distutils.misc_util.Configuration.set_options(self,**options)
numpy.distutils.misc_util.Configuration.todict(self)
numpy.distutils.misc_util.Configuration.warn(self,message)
numpy.distutils.misc_util.InstallableLib(self,name,build_info,target_dir)
numpy.distutils.misc_util.InstallableLib.__init__(self,name,build_info,target_dir)
numpy.distutils.misc_util._fix_paths(paths,local_path,include_non_existing)
numpy.distutils.misc_util._get_directories(list_of_sources)
numpy.distutils.misc_util._get_f90_modules(source)
numpy.distutils.misc_util._get_headers(directory_list)
numpy.distutils.misc_util.all_strings(lst)
numpy.distutils.misc_util.allpath(name)
numpy.distutils.misc_util.appendpath(prefix,path)
numpy.distutils.misc_util.as_list(seq)
numpy.distutils.misc_util.blue_text(s)
numpy.distutils.misc_util.clean_up_temporary_directory()
numpy.distutils.misc_util.cyan_text(s)
numpy.distutils.misc_util.cyg2win32(path)
numpy.distutils.misc_util.default_config_dict(name=None,parent_name=None,local_path=None)
numpy.distutils.misc_util.default_text(s)
numpy.distutils.misc_util.dict_append(d,**kws)
numpy.distutils.misc_util.dot_join(*args)
numpy.distutils.misc_util.filter_sources(sources)
numpy.distutils.misc_util.general_source_directories_files(top_path)
numpy.distutils.misc_util.general_source_files(top_path)
numpy.distutils.misc_util.generate_config_py(target)
numpy.distutils.misc_util.get_cmd(cmdname,_cache={})
numpy.distutils.misc_util.get_data_files(data)
numpy.distutils.misc_util.get_dependencies(sources)
numpy.distutils.misc_util.get_ext_source_files(ext)
numpy.distutils.misc_util.get_frame(level=0)
numpy.distutils.misc_util.get_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_language(sources)
numpy.distutils.misc_util.get_lib_source_files(lib)
numpy.distutils.misc_util.get_mathlibs(path=None)
numpy.distutils.misc_util.get_npy_pkg_dir()
numpy.distutils.misc_util.get_numpy_include_dirs()
numpy.distutils.misc_util.get_path_from_frame(frame,parent_path=None)
numpy.distutils.misc_util.get_pkg_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_script_files(scripts)
numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=False)
numpy.distutils.misc_util.gpaths(paths,local_path='',include_non_existing=True)
numpy.distutils.misc_util.green_text(s)
numpy.distutils.misc_util.has_cxx_sources(sources)
numpy.distutils.misc_util.has_f_sources(sources)
numpy.distutils.misc_util.is_bootstrapping()
numpy.distutils.misc_util.is_glob_pattern(s)
numpy.distutils.misc_util.is_local_src_dir(directory)
numpy.distutils.misc_util.is_sequence(seq)
numpy.distutils.misc_util.is_string(s)
numpy.distutils.misc_util.make_temp_file(suffix='',prefix='',text=True)
numpy.distutils.misc_util.mingw32()
numpy.distutils.misc_util.minrelpath(path)
numpy.distutils.misc_util.msvc_runtime_library()
numpy.distutils.misc_util.msvc_version(compiler)
numpy.distutils.misc_util.njoin(*path)
numpy.distutils.misc_util.quote_args(args)
numpy.distutils.misc_util.red_text(s)
numpy.distutils.misc_util.rel_path(path,parent_path)
numpy.distutils.misc_util.terminal_has_colors()
numpy.distutils.misc_util.yellow_text(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/line_endings.py----------------------------------------
A:numpy.distutils.line_endings.data->open(file, 'rb').read()
A:numpy.distutils.line_endings.newdata->re.sub('\n', '\r\n', newdata)
A:numpy.distutils.line_endings.f->open(file, 'wb')
A:numpy.distutils.line_endings.full_path->os.path.join(dir_name, file)
A:numpy.distutils.line_endings.file->dos2unix(full_path)
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files,dir_name,file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files,dir_name,file_names)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/ccompiler.py----------------------------------------
A:numpy.distutils.ccompiler.m->re.compile('"(?:[^"\\\\]|\\\\.)*"').match(s, end)
A:numpy.distutils.ccompiler.display->'\n'.join(display)
A:numpy.distutils.ccompiler.(s, o)->exec_command(cmd)
A:numpy.distutils.ccompiler.cmd->' '.join(list(cmd))
A:numpy.distutils.ccompiler.(base, ext)->os.path.splitext(os.path.normpath(src_name))
A:numpy.distutils.ccompiler.d->os.path.basename(os.path.abspath(d))
A:numpy.distutils.ccompiler.base->os.path.basename(base)
A:numpy.distutils.ccompiler.obj_name->os.path.join(output_dir, base + self.obj_extension)
A:numpy.distutils.ccompiler.fcomp->getattr(self, 'compiler_' + fc)
A:numpy.distutils.ccompiler.(macros, objects, extra_postargs, pp_opts, build)->self._setup_compile(output_dir, macros, include_dirs, sources, depends, extra_postargs)
A:numpy.distutils.ccompiler.cc_args->self._get_cc_args(pp_opts, debug, extra_preargs)
A:numpy.distutils.ccompiler.objects_to_build->list(build.keys())
A:numpy.distutils.ccompiler.obj->cyg2win32(obj)
A:numpy.distutils.ccompiler.src->cyg2win32(src)
A:numpy.distutils.ccompiler.keys->list(compiler.executables.keys())
A:numpy.distutils.ccompiler.v->getattr(compiler, key)
A:numpy.distutils.ccompiler.mx->max(mx, len(key))
A:numpy.distutils.ccompiler.attr->getattr(self, attrname, None)
A:numpy.distutils.ccompiler.version_string->version_string.replace('\n', ' ').replace('\n', ' ')
A:numpy.distutils.ccompiler.pos->re.compile('"(?:[^"\\\\]|\\\\.)*"').match(s, end).end()
A:numpy.distutils.ccompiler.version->LooseVersion(version)
A:numpy.distutils.ccompiler.(status, output)->exec_command(version_cmd, use_tee=0)
A:numpy.distutils.ccompiler.cxx->copy(self)
A:numpy.distutils.ccompiler.compiler->klass(None, dry_run, force)
A:numpy.distutils.ccompiler.msg->str(get_exception())
A:numpy.distutils.ccompiler.library_dirs->quote_args(library_dirs)
A:numpy.distutils.ccompiler.runtime_library_dirs->quote_args(runtime_library_dirs)
A:numpy.distutils.ccompiler.r->_distutils_gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.ccompiler._m->sys.modules.get('distutils.' + _cc + 'compiler')
A:numpy.distutils.ccompiler.include_dirs->quote_args(include_dirs)
A:numpy.distutils.ccompiler._wordchars_re->re.compile('[^\\\\\\\'\\"%s ]*' % string.whitespace)
A:numpy.distutils.ccompiler._squote_re->re.compile("'(?:[^'\\\\]|\\\\.)*'")
A:numpy.distutils.ccompiler._dquote_re->re.compile('"(?:[^"\\\\]|\\\\.)*"')
A:numpy.distutils.ccompiler._has_white_re->re.compile('\\s')
A:numpy.distutils.ccompiler.s->s[end:].lstrip()
A:numpy.distutils.ccompiler.end->re.compile('"(?:[^"\\\\]|\\\\.)*"').match(s, end).end()
A:numpy.distutils.ccompiler.(beg, end)->re.compile('"(?:[^"\\\\]|\\\\.)*"').match(s, end).span()
numpy.distutils.ccompiler.CCompiler_compile(self,sources,output_dir=None,macros=None,include_dirs=None,debug=0,extra_preargs=None,extra_postargs=None,depends=None)
numpy.distutils.ccompiler.CCompiler_customize(self,dist,need_cxx=0)
numpy.distutils.ccompiler.CCompiler_customize_cmd(self,cmd,ignore=())
numpy.distutils.ccompiler.CCompiler_cxx_compiler(self)
numpy.distutils.ccompiler.CCompiler_get_version(self,force=False,ok_status=[0])
numpy.distutils.ccompiler.CCompiler_object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.ccompiler.CCompiler_show_customization(self)
numpy.distutils.ccompiler.CCompiler_spawn(self,cmd,display=None)
numpy.distutils.ccompiler._compiler_to_string(compiler)
numpy.distutils.ccompiler.gen_lib_options(compiler,library_dirs,runtime_library_dirs,libraries)
numpy.distutils.ccompiler.gen_preprocess_options(macros,include_dirs)
numpy.distutils.ccompiler.new_compiler(plat=None,compiler=None,verbose=0,dry_run=0,force=0)
numpy.distutils.ccompiler.replace_method(klass,method_name,func)
numpy.distutils.ccompiler.simple_version_match(pat='[-.\\d]+',ignore='',start='')
numpy.distutils.ccompiler.split_quoted(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/cpuinfo.py----------------------------------------
A:numpy.distutils.cpuinfo.(status, output)->getstatusoutput(cmd)
A:numpy.distutils.cpuinfo.e->get_exception()
A:numpy.distutils.cpuinfo.(ok, output)->getoutput('uname -m')
A:numpy.distutils.cpuinfo.info[key]->output.strip()
A:numpy.distutils.cpuinfo.attr->getattr(self, '_' + name)
A:numpy.distutils.cpuinfo.nbits->re.compile('(\\d+)bit').search(abits).group(1)
A:numpy.distutils.cpuinfo.info[0]['uname_m']->output.strip()
A:numpy.distutils.cpuinfo.fo->open('/proc/cpuinfo')
A:numpy.distutils.cpuinfo.info->command_info(arch='arch', mach='mach', uname_i='uname_i', isainfo_b='isainfo -b', isainfo_n='isainfo -n')
A:numpy.distutils.cpuinfo.info['sysctl_hw']->key_value_from_command('sysctl hw', sep='=')
A:numpy.distutils.cpuinfo.info['uname_X']->key_value_from_command('uname -X', sep='=')
A:numpy.distutils.cpuinfo.m->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line)
A:numpy.distutils.cpuinfo.info['processor']->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line).group('p')
A:numpy.distutils.cpuinfo.prgx->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE)
A:numpy.distutils.cpuinfo.chnd->_winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.pkey)
A:numpy.distutils.cpuinfo.proc->_winreg.EnumKey(chnd, pnum)
A:numpy.distutils.cpuinfo.phnd->_winreg.OpenKey(chnd, proc)
A:numpy.distutils.cpuinfo.(name, value, vtpe)->_winreg.EnumValue(phnd, pidx)
A:numpy.distutils.cpuinfo.srch->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE).search(value)
A:numpy.distutils.cpuinfo.info[-1]['Family']->int(srch.group('FML'))
A:numpy.distutils.cpuinfo.info[-1]['Model']->int(srch.group('MDL'))
A:numpy.distutils.cpuinfo.info[-1]['Stepping']->int(srch.group('STP'))
A:numpy.distutils.cpuinfo.cpu->cpuinfo()
numpy.distutils.cpuinfo.CPUInfoBase(object)
numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits(self)
numpy.distutils.cpuinfo.CPUInfoBase.__getattr__(self,name)
numpy.distutils.cpuinfo.CPUInfoBase._getNCPUs(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_32bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_64bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._try_call(self,func)
numpy.distutils.cpuinfo.DarwinCPUInfo(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__init__(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.DarwinCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_Power_Macintosh(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc403(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc505(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc601(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc602(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc620(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc630(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc740(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7400(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7450(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc750(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc801(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc821(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc823(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc860(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo.__init__(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP19(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP20(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP21(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_4k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP24(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP25(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP26(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP27(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP28(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP30(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_10k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r12000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r2000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3900(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4100(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4300(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4400(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4600(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4650(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r6000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r8000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_rorion(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.get_ip(self)
numpy.distutils.cpuinfo.LinuxCPUInfo(self)
numpy.distutils.cpuinfo.LinuxCPUInfo.__init__(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_f00f_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_fdiv_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_ssse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Alpha(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Athlon64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonHX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK7(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonMP(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Celeron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV4(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV5(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Hammer(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Itanium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Nocona(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Opteron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PCA56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Prescott(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i486(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i586(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i686(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.SunOSCPUInfo(self)
numpy.distutils.cpuinfo.SunOSCPUInfo.__init__(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_SUNW(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv7(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv8(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparc(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcstation5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sun4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sunfire(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra1(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra2(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra250(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra30(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5_10(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra60(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra80(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice10k(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.Win32CPUInfo(self)
numpy.distutils.cpuinfo.Win32CPUInfo.__init__(self)
numpy.distutils.cpuinfo.Win32CPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK5(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_3(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK7(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am5x86(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i386(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i586(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i686(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.Win32CPUInfo._not_impl(self)
numpy.distutils.cpuinfo.command_by_line(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.command_info(successful_status=(0,),stacklevel=1,**kw)
numpy.distutils.cpuinfo.getoutput(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.key_value_from_command(cmd,sep,successful_status=(0,),stacklevel=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/log.py----------------------------------------
numpy.distutils.log.Log(old_Log)
numpy.distutils.log.Log._log(self,level,msg,args)
numpy.distutils.log.Log.good(self,msg,*args)
numpy.distutils.log._fix_args(args,flag=1)
numpy.distutils.log.set_threshold(level,force=False)
numpy.distutils.log.set_verbosity(v,force=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/exec_command.py----------------------------------------
A:numpy.distutils.exec_command.(fo, name)->make_temp_file()
A:numpy.distutils.exec_command.(fdir, fn)->os.path.split(pythonexe)
A:numpy.distutils.exec_command.fn->os.path.basename(tmpfile)
A:numpy.distutils.exec_command.pythonexe->get_pythonexe()
A:numpy.distutils.exec_command.path->os.environ.get('PATH', os.defpath)
A:numpy.distutils.exec_command.(fn, ext)->os.path.splitext(exe)
A:numpy.distutils.exec_command.f_ext->realpath(f_ext)
A:numpy.distutils.exec_command.env[name]->os.environ.get(name)
A:numpy.distutils.exec_command.r->stream.fileno()
A:numpy.distutils.exec_command.execute_in->os.path.abspath(execute_in)
A:numpy.distutils.exec_command.oldcwd->os.path.abspath(os.getcwd())
A:numpy.distutils.exec_command.exec_dir->os.path.dirname(exec_dir)
A:numpy.distutils.exec_command.oldenv->_preserve_environment(list(env.keys()))
A:numpy.distutils.exec_command.st->_exec_command(command, use_shell=use_shell, use_tee=use_tee, **env)
A:numpy.distutils.exec_command.command_str->' '.join(list(command))
A:numpy.distutils.exec_command.tmpfile->temp_file_name()
A:numpy.distutils.exec_command.stsfile->temp_file_name()
A:numpy.distutils.exec_command.status->spawn_command(os.P_WAIT, argv0, argv, os.environ)
A:numpy.distutils.exec_command.f->open(tmpfile, 'w')
A:numpy.distutils.exec_command.status_text->open(tmpfile, 'w').read()
A:numpy.distutils.exec_command.text->open_latin1(outfile, 'r').read()
A:numpy.distutils.exec_command.python_exe->get_pythonexe()
A:numpy.distutils.exec_command.cmdfile->temp_file_name()
A:numpy.distutils.exec_command.outfile->temp_file_name()
A:numpy.distutils.exec_command.sh->os.environ.get('SHELL', '/bin/sh')
A:numpy.distutils.exec_command.argv->shlex.split(command)
A:numpy.distutils.exec_command._so_has_fileno->_supports_fileno(sys.stdout)
A:numpy.distutils.exec_command._se_has_fileno->_supports_fileno(sys.stderr)
A:numpy.distutils.exec_command.so_fileno->sys.stdout.fileno()
A:numpy.distutils.exec_command.so_dup->os.dup(so_fileno)
A:numpy.distutils.exec_command.se_fileno->sys.stderr.fileno()
A:numpy.distutils.exec_command.se_dup->os.dup(se_fileno)
A:numpy.distutils.exec_command.fout->open_latin1(outfile, 'r')
A:numpy.distutils.exec_command.errfile->temp_file_name()
A:numpy.distutils.exec_command.ferr->open_latin1(errfile, 'r')
A:numpy.distutils.exec_command.argv[0]->quote_arg(argv0)
A:numpy.distutils.exec_command.errmess->open_latin1(errfile, 'r').read()
A:numpy.distutils.exec_command.echo->find_executable('echo')
A:numpy.distutils.exec_command.(s, o)->exec_command(['cl', '/V'], **kws)
A:numpy.distutils.exec_command.tmpdir->os.path.dirname(tmpfile)
numpy.distutils.exec_command._exec_command(command,use_shell=None,use_tee=None,**env)
numpy.distutils.exec_command._exec_command_posix(command,use_shell=None,use_tee=None,**env)
numpy.distutils.exec_command._exec_command_python(command,exec_command_dir='',**env)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._supports_fileno(stream)
numpy.distutils.exec_command._update_environment(**env)
numpy.distutils.exec_command.exec_command(command,execute_in='',use_shell=None,use_tee=None,_with_python=1,**env)
numpy.distutils.exec_command.find_executable(exe,path=None,_cache={})
numpy.distutils.exec_command.get_pythonexe()
numpy.distutils.exec_command.quote_arg(arg)
numpy.distutils.exec_command.splitcmdline(line)
numpy.distutils.exec_command.temp_file_name()
numpy.distutils.exec_command.test_cl(**kws)
numpy.distutils.exec_command.test_execute_in(**kws)
numpy.distutils.exec_command.test_nt(**kws)
numpy.distutils.exec_command.test_posix(**kws)
numpy.distutils.exec_command.test_svn(**kws)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/mingw32ccompiler.py----------------------------------------
A:numpy.distutils.mingw32ccompiler._START->re.compile('\\[Ordinal/Name Pointer\\] Table')
A:numpy.distutils.mingw32ccompiler._TABLE->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)')
A:numpy.distutils.mingw32ccompiler.p->subprocess.Popen(['gcc', '-dumpversion'], shell=True, stdout=subprocess.PIPE)
A:numpy.distutils.mingw32ccompiler.out_string->subprocess.Popen(['gcc', '-dumpversion'], shell=True, stdout=subprocess.PIPE).stdout.read()
A:numpy.distutils.mingw32ccompiler.result->re.search('(\\d+\\.\\d+)', out_string)
A:numpy.distutils.mingw32ccompiler.self.gcc_version->StrictVersion(result.group(1))
A:numpy.distutils.mingw32ccompiler.msvcr_success->build_msvcr_library()
A:numpy.distutils.mingw32ccompiler.msvcr_dbg_success->build_msvcr_library(debug=True)
A:numpy.distutils.mingw32ccompiler.runtime_library->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.(base, ext)->os.path.splitext(os.path.normcase(src_name))
A:numpy.distutils.mingw32ccompiler.(drv, base)->os.path.splitdrive(base)
A:numpy.distutils.mingw32ccompiler.base->os.path.basename(config._gen_temp_sourcefile('yo', [], 'c'))
A:numpy.distutils.mingw32ccompiler.dll->os.path.join(d, dllname)
A:numpy.distutils.mingw32ccompiler.st->subprocess.Popen(['objdump.exe', '-p', dll], stdout=subprocess.PIPE)
A:numpy.distutils.mingw32ccompiler.dump->dump_table(dll)
A:numpy.distutils.mingw32ccompiler.m->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)').match(dump[j].decode())
A:numpy.distutils.mingw32ccompiler.d->open(dfile, 'w')
A:numpy.distutils.mingw32ccompiler.winsxs_path->os.path.join(os.environ['WINDIR'], 'winsxs')
A:numpy.distutils.mingw32ccompiler.filepath->os.path.join(path, dll_name)
A:numpy.distutils.mingw32ccompiler.msvcr_name->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.out_file->os.path.join(sys.prefix, 'libs', out_name)
A:numpy.distutils.mingw32ccompiler.dll_file->find_python_dll()
A:numpy.distutils.mingw32ccompiler.def_file->os.path.join(sys.prefix, 'libs', def_name)
A:numpy.distutils.mingw32ccompiler.retcode->subprocess.call(cmd)
A:numpy.distutils.mingw32ccompiler.arch->get_build_architecture()
A:numpy.distutils.mingw32ccompiler.lib_file->os.path.join(sys.prefix, 'libs', lib_name)
A:numpy.distutils.mingw32ccompiler.nm_output->numpy.distutils.lib2def.getnm(nm_cmd)
A:numpy.distutils.mingw32ccompiler.(dlist, flist)->numpy.distutils.lib2def.parse_nm(nm_output)
A:numpy.distutils.mingw32ccompiler.status->os.system(cmd)
A:numpy.distutils.mingw32ccompiler.(major, minor, rest)->msvcrt.CRT_ASSEMBLY_VERSION.split('.', 2)
A:numpy.distutils.mingw32ccompiler.msvcv->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.maj->int(msvcv[5:-1])
A:numpy.distutils.mingw32ccompiler.root->configtest_name(config)
A:numpy.distutils.mingw32ccompiler.msver->get_build_msvc_version()
A:numpy.distutils.mingw32ccompiler.ma->int(msver)
A:numpy.distutils.mingw32ccompiler.mi->int((msver - ma) * 10)
A:numpy.distutils.mingw32ccompiler.manxml->msvc_manifest_xml(ma, mi)
A:numpy.distutils.mingw32ccompiler.man->open(manifest_name(config), 'w')
numpy.distutils.mingw32ccompiler.Mingw32CCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.link(self,target_desc,objects,output_filename,output_dir,libraries,library_dirs,runtime_library_dirs,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.mingw32ccompiler._build_import_library_amd64()
numpy.distutils.mingw32ccompiler._build_import_library_x86()
numpy.distutils.mingw32ccompiler.build_import_library()
numpy.distutils.mingw32ccompiler.build_msvcr_library(debug=False)
numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked(msver)
numpy.distutils.mingw32ccompiler.configtest_name(config)
numpy.distutils.mingw32ccompiler.dump_table(dll)
numpy.distutils.mingw32ccompiler.find_dll(dll_name)
numpy.distutils.mingw32ccompiler.find_python_dll()
numpy.distutils.mingw32ccompiler.generate_def(dll,dfile)
numpy.distutils.mingw32ccompiler.generate_manifest(config)
numpy.distutils.mingw32ccompiler.manifest_name(config)
numpy.distutils.mingw32ccompiler.manifest_rc(name,type='dll')
numpy.distutils.mingw32ccompiler.msvc_manifest_xml(maj,min)
numpy.distutils.mingw32ccompiler.rc_name(config)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/core.py----------------------------------------
A:numpy.distutils.core.dist->setup(**new_attr)
A:numpy.distutils.core.cmdclass->numpy_cmdclass.copy()
A:numpy.distutils.core.new_attr->attr.copy()
A:numpy.distutils.core.configuration->attr.copy().pop('configuration')
A:numpy.distutils.core.config->numpy.distutils.command.config.todict().todict()
numpy.distutils._check_append_ext_library(libraries,lib_name,build_info)
numpy.distutils._check_append_library(libraries,item)
numpy.distutils._command_line_ok(_cache=[])
numpy.distutils._dict_append(d,**kws)
numpy.distutils.core._check_append_ext_library(libraries,lib_name,build_info)
numpy.distutils.core._check_append_library(libraries,item)
numpy.distutils.core._command_line_ok(_cache=[])
numpy.distutils.core._dict_append(d,**kws)
numpy.distutils.core.get_distribution(always=False)
numpy.distutils.core.setup(**attr)
numpy.distutils.setup(**attr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/conv_template.py----------------------------------------
A:numpy.distutils.conv_template.start->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopbeg, ind)
A:numpy.distutils.conv_template.start2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', start2)
A:numpy.distutils.conv_template.fini1->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopend, start2)
A:numpy.distutils.conv_template.fini2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', fini1)
A:numpy.distutils.conv_template.torep->obj.group(1)
A:numpy.distutils.conv_template.numrep->obj.group(2)
A:numpy.distutils.conv_template.parenrep->re.compile('[(]([^)]*)[)]\\*(\\d+)')
A:numpy.distutils.conv_template.plainrep->re.compile('([^*]+)\\*(\\d+)')
A:numpy.distutils.conv_template.astr->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')])
A:numpy.distutils.conv_template.stripast->re.compile('\\n\\s*\\*?')
A:numpy.distutils.conv_template.named_re->re.compile('#\\s*(\\w*)\\s*=([^#]*)#')
A:numpy.distutils.conv_template.exclude_vars_re->re.compile('(\\w*)=(\\w*)')
A:numpy.distutils.conv_template.exclude_re->re.compile(':exclude:')
A:numpy.distutils.conv_template.loophead->re.compile('\\n\\s*\\*?').sub('', loophead)
A:numpy.distutils.conv_template.reps->re.compile('#\\s*(\\w*)\\s*=([^#]*)#').findall(loophead)
A:numpy.distutils.conv_template.vals->parse_values(rep[1])
A:numpy.distutils.conv_template.size->len(vals)
A:numpy.distutils.conv_template.span->obj.span()
A:numpy.distutils.conv_template.endline->re.compile('\\n\\s*\\*?').sub('', loophead).find('\n', span[1])
A:numpy.distutils.conv_template.ex_names->re.compile('(\\w*)=(\\w*)').findall(substr)
A:numpy.distutils.conv_template.replace_re->re.compile('@([\\w]+)@')
A:numpy.distutils.conv_template.name->match.group(1)
A:numpy.distutils.conv_template.struct->parse_structure(astr, level)
A:numpy.distutils.conv_template.envlist->parse_loop_header(head)
A:numpy.distutils.conv_template.e->get_exception()
A:numpy.distutils.conv_template.newcode->parse_string(text, newenv, newlevel, newline)
A:numpy.distutils.conv_template.include_src_re->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I)
A:numpy.distutils.conv_template.d->os.path.dirname(source)
A:numpy.distutils.conv_template.fid->open(file, 'r')
A:numpy.distutils.conv_template.m->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I).match(line)
A:numpy.distutils.conv_template.fn->os.path.join(d, fn)
A:numpy.distutils.conv_template.lines->resolve_includes(source)
A:numpy.distutils.conv_template.sourcefile->os.path.normcase(source).replace('\\', '\\\\')
A:numpy.distutils.conv_template.code->process_str(''.join(lines))
A:numpy.distutils.conv_template.allkeys->list(adict.keys())
A:numpy.distutils.conv_template.newkey->''.join([x[:n] for x in allkeys])
A:numpy.distutils.conv_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.conv_template.outfile->open(newname, 'w')
A:numpy.distutils.conv_template.allstr->open(file, 'r').read()
A:numpy.distutils.conv_template.writestr->process_str(allstr)
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr,env,level,line)
numpy.distutils.conv_template.parse_structure(astr,level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/lib2def.py----------------------------------------
A:numpy.distutils.lib2def.FUNC_RE->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.DATA_RE->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.f->subprocess.Popen(nm_cmd, shell=True, stdout=subprocess.PIPE)
A:numpy.distutils.lib2def.nm_output->getnm(nm_cmd)
A:numpy.distutils.lib2def.data->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.func->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.(libfile, deffile)->parse_cmd()
A:numpy.distutils.lib2def.deffile->open(deffile, 'w')
A:numpy.distutils.lib2def.(dlist, flist)->parse_nm(nm_output)
numpy.distutils.lib2def.getnm(nm_cmd=['nm','-Cs','python%s.lib'%py_ver])
numpy.distutils.lib2def.output_def(dlist,flist,header,file=sys.stdout)
numpy.distutils.lib2def.parse_cmd()
numpy.distutils.lib2def.parse_nm(nm_output)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/system_info.py----------------------------------------
A:numpy.distutils.system_info.default_lib_dirs->libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib', '/opt/local/lib', '/sw/lib'], platform_bits)
A:numpy.distutils.system_info.default_x11_lib_dirs->libpaths(['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib'], platform_bits)
A:numpy.distutils.system_info.globbed_x11_dir->glob('/usr/lib/*/libX11.so')
A:numpy.distutils.system_info.tmp->open(os.devnull, 'w')
A:numpy.distutils.system_info.p->self.combine_paths(d, ['', 'umfpack'], 'umfpack.h')
A:numpy.distutils.system_info.triplet->str(p.communicate()[0].decode().strip())
A:numpy.distutils.system_info.so_ext->get_shared_lib_extension()
A:numpy.distutils.system_info.sysfile->os.path.join(os.path.split(os.path.abspath(f))[0], fname)
A:numpy.distutils.system_info.f->os.path.expanduser('~')
A:numpy.distutils.system_info.user_file->os.path.join(f, fname)
A:numpy.distutils.system_info.cl->{'atlas': atlas_info, 'atlas_threads': atlas_threads_info, 'atlas_blas': atlas_blas_info, 'atlas_blas_threads': atlas_blas_threads_info, 'lapack_atlas': lapack_atlas_info, 'lapack_atlas_threads': lapack_atlas_threads_info, 'mkl': mkl_info, 'openblas': openblas_info, 'openblas_lapack': openblas_lapack_info, 'lapack_mkl': lapack_mkl_info, 'blas_mkl': blas_mkl_info, 'x11': x11_info, 'fft_opt': fft_opt_info, 'fftw': fftw_info, 'fftw2': fftw2_info, 'fftw3': fftw3_info, 'dfftw': dfftw_info, 'sfftw': sfftw_info, 'fftw_threads': fftw_threads_info, 'dfftw_threads': dfftw_threads_info, 'sfftw_threads': sfftw_threads_info, 'djbfft': djbfft_info, 'blas': blas_info, 'lapack': lapack_info, 'lapack_src': lapack_src_info, 'blas_src': blas_src_info, 'numpy': numpy_info, 'f2py': f2py_info, 'Numeric': Numeric_info, 'numeric': Numeric_info, 'numarray': numarray_info, 'numerix': numerix_info, 'lapack_opt': lapack_opt_info, 'blas_opt': blas_opt_info, 'boost_python': boost_python_info, 'agg2': agg2_info, 'wx': wx_info, 'gdk_pixbuf_xlib_2': gdk_pixbuf_xlib_2_info, 'gdk-pixbuf-xlib-2.0': gdk_pixbuf_xlib_2_info, 'gdk_pixbuf_2': gdk_pixbuf_2_info, 'gdk-pixbuf-2.0': gdk_pixbuf_2_info, 'gdk': gdk_info, 'gdk_2': gdk_2_info, 'gdk-2.0': gdk_2_info, 'gdk_x11_2': gdk_x11_2_info, 'gdk-x11-2.0': gdk_x11_2_info, 'gtkp_x11_2': gtkp_x11_2_info, 'gtk+-x11-2.0': gtkp_x11_2_info, 'gtkp_2': gtkp_2_info, 'gtk+-2.0': gtkp_2_info, 'xft': xft_info, 'freetype2': freetype2_info, 'umfpack': umfpack_info, 'amd': amd_info}.get(name.lower(), system_info)
A:numpy.distutils.system_info.defaults['library_dirs']->os.pathsep.join(default_lib_dirs)
A:numpy.distutils.system_info.defaults['include_dirs']->os.pathsep.join(default_include_dirs)
A:numpy.distutils.system_info.defaults['src_dirs']->os.pathsep.join(default_src_dirs)
A:numpy.distutils.system_info.defaults['search_static_first']->str(self.search_static_first)
A:numpy.distutils.system_info.self.cp->ConfigParser(defaults)
A:numpy.distutils.system_info.self.search_static_first->self.cp.getboolean(self.section, 'search_static_first')
A:numpy.distutils.system_info.libs->self.get_libs(self.section + '_libs', ver_param['libs'])
A:numpy.distutils.system_info.dirs->glob(os.path.join(d, 'mkl', '*'))
A:numpy.distutils.system_info.i->self.check_libs(dirs, [lib])
A:numpy.distutils.system_info.lib_info->self.calc_libraries_info()
A:numpy.distutils.system_info.res->self.saved_results.get(self.__class__.__name__)
A:numpy.distutils.system_info.v->str(v)
A:numpy.distutils.system_info.l->get_info('atlas_blas').get('define_macros', [])
A:numpy.distutils.system_info.b->os.path.basename(d)
A:numpy.distutils.system_info.ds->os.path.join(d, os.path.basename(py_incl_dir)).split(os.pathsep)
A:numpy.distutils.system_info.d1->os.path.join(d, dd)
A:numpy.distutils.system_info.default_dirs->self.cp.get(self.section, key).split(os.pathsep)
A:numpy.distutils.system_info.exts->self.library_extensions()
A:numpy.distutils.system_info.info->self.check_libs(lib_dirs, umfpack_libs, [])
A:numpy.distutils.system_info.found_libs1->self._lib_list(dir_, libs, exts)
A:numpy.distutils.system_info.found_libs->self._lib_list(lib_dirs, libs, exts)
A:numpy.distutils.system_info.opt_found_libs->self._lib_list(lib_dirs, opt_libs, exts)
A:numpy.distutils.system_info.djbfft_info->get_info('djbfft')
A:numpy.distutils.system_info.lib_dirs->self.get_lib_dirs()
A:numpy.distutils.system_info.incl_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.pre_dirs->system_info.get_paths(self, section, key)
A:numpy.distutils.system_info.mklroot->self.get_mkl_rootdir()
A:numpy.distutils.system_info.paths->os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)
A:numpy.distutils.system_info.d->os.path.join(d, os.path.basename(py_incl_dir))
A:numpy.distutils.system_info.path_atoms->path.split(os.sep)
A:numpy.distutils.system_info.mkl_libs->self.get_libs('mkl_libs', self._lib_mkl)
A:numpy.distutils.system_info.mkl->get_info('mkl')
A:numpy.distutils.system_info.lapack_libs->self.get_libs('lapack_libs', self._lib_names)
A:numpy.distutils.system_info.atlas_libs->self.get_libs('atlas_libs', self._lib_names + self._lib_atlas)
A:numpy.distutils.system_info.atlas->self.check_libs2(lib_dirs, atlas_libs, [])
A:numpy.distutils.system_info.lapack_atlas->self.check_libs2(d, ['lapack_atlas'], [])
A:numpy.distutils.system_info.lapack->self.check_libs2(lib_dirs2, lapack_libs, [])
A:numpy.distutils.system_info.include_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.h->os.path.dirname(h)
A:numpy.distutils.system_info.fn->os.path.join(lapack_dir, prefix + lapack_name + e)
A:numpy.distutils.system_info.(atlas_version, atlas_extra_info)->get_atlas_version(**atlas)
A:numpy.distutils.system_info.src_dirs->self.get_src_dirs()
A:numpy.distutils.system_info.src_dir2->os.path.join(src_dir, '..', 'INSTALL')
A:numpy.distutils.system_info.libraries->config.get('libraries', [])
A:numpy.distutils.system_info.library_dirs->config.get('library_dirs', [])
A:numpy.distutils.system_info.c->distutils.ccompiler.new_compiler()
A:numpy.distutils.system_info.(s, o)->exec_command(cmd, use_tee=0)
A:numpy.distutils.system_info.m->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o)
A:numpy.distutils.system_info.atlas_version->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o).group('version')
A:numpy.distutils.system_info.openblas_info->get_info('openblas')
A:numpy.distutils.system_info.lapack_mkl_info->get_info('lapack_mkl')
A:numpy.distutils.system_info.atlas_info->get_info('atlas_blas')
A:numpy.distutils.system_info.lapack_info->get_info('lapack')
A:numpy.distutils.system_info.lapack_src_info->get_info('lapack_src')
A:numpy.distutils.system_info.blas_info->get_info('blas')
A:numpy.distutils.system_info.blas_src_info->get_info('blas_src')
A:numpy.distutils.system_info.blas_mkl_info->get_info('blas_mkl')
A:numpy.distutils.system_info.blas_libs->self.get_libs('blas_libs', self._lib_names)
A:numpy.distutils.system_info.openblas_libs->self.get_libs('openblas_libs', self._lib_names)
A:numpy.distutils.system_info.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.system_info.src->os.path.join(tmpdir, 'source.c')
A:numpy.distutils.system_info.out->os.path.join(tmpdir, 'a.out')
A:numpy.distutils.system_info.obj->distutils.ccompiler.new_compiler().compile([src], output_dir=tmpdir)
A:numpy.distutils.system_info.x11_libs->self.get_libs('x11_libs', ['X11'])
A:numpy.distutils.system_info.module->__import__(self.modulename)
A:numpy.distutils.system_info.py_incl_dir->distutils.sysconfig.get_python_inc()
A:numpy.distutils.system_info.py_pincl_dir->distutils.sysconfig.get_python_inc(plat_specific=True)
A:numpy.distutils.system_info.vrs->getattr(module, v, None)
A:numpy.distutils.system_info.msg1->str(get_exception())
A:numpy.distutils.system_info.msg2->str(get_exception())
A:numpy.distutils.system_info.msg3->str(get_exception())
A:numpy.distutils.system_info.f2py_dir->os.path.join(os.path.dirname(f2py.__file__), 'src')
A:numpy.distutils.system_info.srcs_dir->os.path.join(src_dir, 'libs', 'python', 'src')
A:numpy.distutils.system_info.bpl_srcs->glob(os.path.join(srcs_dir, '*.cpp'))
A:numpy.distutils.system_info.agg2_srcs->glob(os.path.join(src_dir, 'src', '*.cpp'))
A:numpy.distutils.system_info.config_exe->find_executable(self.get_config_exe())
A:numpy.distutils.system_info.version->self.get_config_output(config_exe, self.version_flag)
A:numpy.distutils.system_info.release->self.get_config_output(config_exe, '--release')
A:numpy.distutils.system_info.opts->self.get_config_output(config_exe, self.cflags_flag)
A:numpy.distutils.system_info.(n, v)->opt[2:].split('=')
A:numpy.distutils.system_info.amd_libs->self.get_libs('amd_libs', self._lib_names)
A:numpy.distutils.system_info.inc_dir->os.path.dirname(p[0])
A:numpy.distutils.system_info.umfpack_libs->self.get_libs('umfpack_libs', self._lib_names)
A:numpy.distutils.system_info.amd->get_info('amd')
A:numpy.distutils.system_info.result->combine_paths(*combine_paths(args[0], args[1]) + args[2:])
A:numpy.distutils.system_info.verbosity->kws.get('verbosity', 1)
A:numpy.distutils.system_info.parser->optparse.OptionParser('usage: %prog [-v] [info objs]')
A:numpy.distutils.system_info.(opts, args)->parseCmdLine(argv)
A:numpy.distutils.system_info._gdict_->globals().copy()
A:numpy.distutils.system_info.conf->c()
A:numpy.distutils.system_info.r->c().get_info()
numpy.distutils.system_info.AtlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasSrcNotFoundError(BlasNotFoundError)
numpy.distutils.system_info.DJBFFTNotFoundError(NotFoundError)
numpy.distutils.system_info.FFTWNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackSrcNotFoundError(LapackNotFoundError)
numpy.distutils.system_info.NotFoundError(DistutilsError)
numpy.distutils.system_info.NumericNotFoundError(NotFoundError)
numpy.distutils.system_info.Numeric_info(_numpy_info)
numpy.distutils.system_info.UmfpackNotFoundError(NotFoundError)
numpy.distutils.system_info.X11NotFoundError(NotFoundError)
numpy.distutils.system_info._numpy_info(self)
numpy.distutils.system_info._numpy_info.__init__(self)
numpy.distutils.system_info._numpy_info.calc_info(self)
numpy.distutils.system_info._pkg_config_info(system_info)
numpy.distutils.system_info._pkg_config_info.calc_info(self)
numpy.distutils.system_info._pkg_config_info.get_config_exe(self)
numpy.distutils.system_info._pkg_config_info.get_config_output(self,config_exe,option)
numpy.distutils.system_info.agg2_info(system_info)
numpy.distutils.system_info.agg2_info.calc_info(self)
numpy.distutils.system_info.agg2_info.get_paths(self,section,key)
numpy.distutils.system_info.amd_info(system_info)
numpy.distutils.system_info.amd_info.calc_info(self)
numpy.distutils.system_info.atlas_blas_info(atlas_info)
numpy.distutils.system_info.atlas_blas_info.calc_info(self)
numpy.distutils.system_info.atlas_blas_threads_info(atlas_blas_info)
numpy.distutils.system_info.atlas_info(system_info)
numpy.distutils.system_info.atlas_info.calc_info(self)
numpy.distutils.system_info.atlas_info.get_paths(self,section,key)
numpy.distutils.system_info.atlas_threads_info(atlas_info)
numpy.distutils.system_info.blas_info(system_info)
numpy.distutils.system_info.blas_info.calc_info(self)
numpy.distutils.system_info.blas_mkl_info(mkl_info)
numpy.distutils.system_info.blas_opt_info(system_info)
numpy.distutils.system_info.blas_opt_info.calc_info(self)
numpy.distutils.system_info.blas_src_info(system_info)
numpy.distutils.system_info.blas_src_info.calc_info(self)
numpy.distutils.system_info.blas_src_info.get_paths(self,section,key)
numpy.distutils.system_info.boost_python_info(system_info)
numpy.distutils.system_info.boost_python_info.calc_info(self)
numpy.distutils.system_info.boost_python_info.get_paths(self,section,key)
numpy.distutils.system_info.combine_paths(*args,**kws)
numpy.distutils.system_info.dfftw_info(fftw_info)
numpy.distutils.system_info.dfftw_threads_info(fftw_info)
numpy.distutils.system_info.dict_append(d,**kws)
numpy.distutils.system_info.djbfft_info(system_info)
numpy.distutils.system_info.djbfft_info.calc_info(self)
numpy.distutils.system_info.djbfft_info.get_paths(self,section,key)
numpy.distutils.system_info.f2py_info(system_info)
numpy.distutils.system_info.f2py_info.calc_info(self)
numpy.distutils.system_info.fft_opt_info(system_info)
numpy.distutils.system_info.fft_opt_info.calc_info(self)
numpy.distutils.system_info.fftw2_info(fftw_info)
numpy.distutils.system_info.fftw3_info(fftw_info)
numpy.distutils.system_info.fftw_info(system_info)
numpy.distutils.system_info.fftw_info.calc_info(self)
numpy.distutils.system_info.fftw_info.calc_ver_info(self,ver_param)
numpy.distutils.system_info.fftw_threads_info(fftw_info)
numpy.distutils.system_info.freetype2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_xlib_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.get_atlas_version(**config)
numpy.distutils.system_info.get_info(name,notfound_action=0)
numpy.distutils.system_info.get_standard_file(fname)
numpy.distutils.system_info.gtkp_2_info(_pkg_config_info)
numpy.distutils.system_info.gtkp_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.lapack_atlas_info(atlas_info)
numpy.distutils.system_info.lapack_atlas_threads_info(atlas_threads_info)
numpy.distutils.system_info.lapack_info(system_info)
numpy.distutils.system_info.lapack_info.calc_info(self)
numpy.distutils.system_info.lapack_mkl_info(mkl_info)
numpy.distutils.system_info.lapack_mkl_info.calc_info(self)
numpy.distutils.system_info.lapack_opt_info(system_info)
numpy.distutils.system_info.lapack_opt_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info(system_info)
numpy.distutils.system_info.lapack_src_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info.get_paths(self,section,key)
numpy.distutils.system_info.libpaths(paths,bits)
numpy.distutils.system_info.mkl_info(self)
numpy.distutils.system_info.mkl_info.__init__(self)
numpy.distutils.system_info.mkl_info.calc_info(self)
numpy.distutils.system_info.mkl_info.get_mkl_rootdir(self)
numpy.distutils.system_info.numarray_info(_numpy_info)
numpy.distutils.system_info.numerix_info(system_info)
numpy.distutils.system_info.numerix_info.calc_info(self)
numpy.distutils.system_info.numpy_info(_numpy_info)
numpy.distutils.system_info.openblas_info(blas_info)
numpy.distutils.system_info.openblas_info.calc_info(self)
numpy.distutils.system_info.openblas_info.check_embedded_lapack(self,info)
numpy.distutils.system_info.openblas_lapack_info(openblas_info)
numpy.distutils.system_info.openblas_lapack_info.check_embedded_lapack(self,info)
numpy.distutils.system_info.parseCmdLine(argv=(None,))
numpy.distutils.system_info.sfftw_info(fftw_info)
numpy.distutils.system_info.sfftw_threads_info(fftw_info)
numpy.distutils.system_info.show_all(argv=None)
numpy.distutils.system_info.system_info(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.system_info.system_info.__init__(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.system_info.system_info._check_libs(self,lib_dirs,libs,opt_libs,exts)
numpy.distutils.system_info.system_info._lib_list(self,lib_dir,libs,exts)
numpy.distutils.system_info.system_info.calc_libraries_info(self)
numpy.distutils.system_info.system_info.check_libs(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.check_libs2(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.combine_paths(self,*args)
numpy.distutils.system_info.system_info.get_include_dirs(self,key='include_dirs')
numpy.distutils.system_info.system_info.get_info(self,notfound_action=0)
numpy.distutils.system_info.system_info.get_lib_dirs(self,key='library_dirs')
numpy.distutils.system_info.system_info.get_libraries(self,key='libraries')
numpy.distutils.system_info.system_info.get_libs(self,key,default)
numpy.distutils.system_info.system_info.get_paths(self,section,key)
numpy.distutils.system_info.system_info.get_src_dirs(self,key='src_dirs')
numpy.distutils.system_info.system_info.has_info(self)
numpy.distutils.system_info.system_info.library_extensions(self)
numpy.distutils.system_info.system_info.parse_config_files(self)
numpy.distutils.system_info.system_info.set_info(self,**info)
numpy.distutils.system_info.umfpack_info(system_info)
numpy.distutils.system_info.umfpack_info.calc_info(self)
numpy.distutils.system_info.wx_info(_pkg_config_info)
numpy.distutils.system_info.x11_info(self)
numpy.distutils.system_info.x11_info.__init__(self)
numpy.distutils.system_info.x11_info.calc_info(self)
numpy.distutils.system_info.xft_info(_pkg_config_info)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/unixccompiler.py----------------------------------------
A:numpy.distutils.unixccompiler.msg->str(get_exception())
A:numpy.distutils.unixccompiler.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.unixccompiler.output_filename->self.library_filename(output_libname, output_dir=output_dir)
numpy.distutils.unixccompiler.UnixCCompiler__compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib(self,objects,output_libname,output_dir=None,debug=0,target_lang=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/from_template.py----------------------------------------
A:numpy.distutils.from_template.routine_start_re->re.compile('(\\n|\\A)((     (\\$|\\*))|)\\s*(subroutine|function)\\b', re.I)
A:numpy.distutils.from_template.routine_end_re->re.compile('\\n\\s*end\\s*(subroutine|function)\\b.*(\\n|\\Z)', re.I)
A:numpy.distutils.from_template.function_start_re->re.compile('\\n     (\\$|\\*)\\s*function\\b', re.I)
A:numpy.distutils.from_template.m->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I).match(line)
A:numpy.distutils.from_template.start->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I).match(line).start()
A:numpy.distutils.from_template.i->astr.rfind('\n', ind, start)
A:numpy.distutils.from_template.template_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*>')
A:numpy.distutils.from_template.named_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>')
A:numpy.distutils.from_template.list_re->re.compile('<\\s*((.*?))\\s*>')
A:numpy.distutils.from_template.reps->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>').findall(astr)
A:numpy.distutils.from_template.repl->rep[1].replace('\\,', '@comma@')
A:numpy.distutils.from_template.thelist->find_repl_patterns(substr).get(r, names.get(r, None))
A:numpy.distutils.from_template.item_re->re.compile('\\A\\\\(?P<index>\\d+)\\Z')
A:numpy.distutils.from_template.b->astr.split(',')
A:numpy.distutils.from_template.j->int(m.group('index'))
A:numpy.distutils.from_template.allkeys->list(adict.keys())
A:numpy.distutils.from_template.template_name_re->re.compile('\\A\\s*(\\w[\\w\\d]*)\\s*\\Z')
A:numpy.distutils.from_template.substr->re.compile('<\\s*((.*?))\\s*>').sub(listrepl, substr)
A:numpy.distutils.from_template.lnames->find_repl_patterns(substr)
A:numpy.distutils.from_template.name->mobj.group(1)
A:numpy.distutils.from_template.num->len(rule)
A:numpy.distutils.from_template.newstr->newstr.replace('@leftarrow@', '<').replace('@leftarrow@', '<')
A:numpy.distutils.from_template.struct->parse_structure(newstr)
A:numpy.distutils.from_template.include_src_re->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I)
A:numpy.distutils.from_template.d->os.path.dirname(source)
A:numpy.distutils.from_template.fid->open(file, 'r')
A:numpy.distutils.from_template.fn->os.path.join(d, fn)
A:numpy.distutils.from_template.lines->resolve_includes(source)
A:numpy.distutils.from_template._special_names->find_repl_patterns('\n<_c=s,d,c,z>\n<_t=real,double precision,complex,double complex>\n<prefix=s,d,c,z>\n<ftype=real,double precision,complex,double complex>\n<ctype=float,double,complex_float,complex_double>\n<ftypereal=real,double precision,\\0,\\1>\n<ctypereal=float,double,\\0,\\1>\n')
A:numpy.distutils.from_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.from_template.outfile->open(newname, 'w')
A:numpy.distutils.from_template.allstr->open(file, 'r').read()
A:numpy.distutils.from_template.writestr->process_str(allstr)
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr,names)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/environment.py----------------------------------------
A:numpy.distutils.environment.v->os.environ.get(envvar, None)
A:numpy.distutils.environment.var->convert(var)
A:numpy.distutils.environment.ec->self.__class__(distutils_section=self._distutils_section, **self._conf_keys)
A:numpy.distutils.environment.self._conf->dist.get_option_dict(self._distutils_section)
numpy.distutils.environment.EnvironmentConfig(self,distutils_section='ALL',**kw)
numpy.distutils.environment.EnvironmentConfig.__getattr__(self,name)
numpy.distutils.environment.EnvironmentConfig.__init__(self,distutils_section='ALL',**kw)
numpy.distutils.environment.EnvironmentConfig._get_var(self,name,conf_desc)
numpy.distutils.environment.EnvironmentConfig.clone(self,hook_handler)
numpy.distutils.environment.EnvironmentConfig.dump_variable(self,name)
numpy.distutils.environment.EnvironmentConfig.dump_variables(self)
numpy.distutils.environment.EnvironmentConfig.get(self,name,default=None)
numpy.distutils.environment.EnvironmentConfig.use_distribution(self,dist)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/info.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/setup.py----------------------------------------
A:numpy.distutils.setup.config->Configuration('distutils', parent_package, top_path)
numpy.distutils.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/pathccompiler.py----------------------------------------
numpy.distutils.pathccompiler.PathScaleCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.pathccompiler.PathScaleCCompiler.__init__(self,verbose=0,dry_run=0,force=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/extension.py----------------------------------------
A:numpy.distutils.extension.self.swig_opts->self.swig_opts.split()
numpy.distutils.extension.Extension(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.__init__(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.has_cxx_sources(self)
numpy.distutils.extension.Extension.has_f2py_sources(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/intelccompiler.py----------------------------------------
numpy.distutils.intelccompiler.IntelCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelItaniumCCompiler(IntelCCompiler)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/compat.py----------------------------------------
numpy.distutils.compat.get_exception()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/__version__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/test_exec_command.py----------------------------------------
numpy.distutils.tests.test_exec_command.emulate_nonposix(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__(self)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.redirect_stderr(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stderr.__init__(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stdout(self,stdout=None)
numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stdout.__init__(self,stdout=None)
numpy.distutils.tests.test_exec_command.test_exec_command_stderr()
numpy.distutils.tests.test_exec_command.test_exec_command_stdout()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/test_npy_pkg_config.py----------------------------------------
A:numpy.distutils.tests.test_npy_pkg_config.(fd, filename)->mkstemp('foo.ini')
A:numpy.distutils.tests.test_npy_pkg_config.out->read_config(pkg)
A:numpy.distutils.tests.test_npy_pkg_config.d->parse_flags('-L /usr/lib -lfoo -L/usr/lib -lbar')
numpy.distutils.tests.test_TestLibraryInfo(TestCase)
numpy.distutils.tests.test_TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_TestParseFlags(TestCase)
numpy.distutils.tests.test_TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_TestParseFlags.test_simple_lflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo(TestCase)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags(TestCase)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_lflags(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/test_misc_util.py----------------------------------------
A:numpy.distutils.tests.test_misc_util.local_path->minrelpath(join(dirname(__file__), '..'))
A:numpy.distutils.tests.test_misc_util.ls->gpaths('command/*.py', local_path)
A:numpy.distutils.tests.test_misc_util.f->gpaths('system_info.py', local_path)
A:numpy.distutils.tests.test_misc_util.ext->get_shared_lib_extension(is_python_ext=False)
numpy.distutils.tests.test_misc_util.TestAppendpath(TestCase)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_2(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_3(self)
numpy.distutils.tests.test_misc_util.TestGpaths(TestCase)
numpy.distutils.tests.test_misc_util.TestGpaths.test_gpaths(self)
numpy.distutils.tests.test_misc_util.TestMinrelpath(TestCase)
numpy.distutils.tests.test_misc_util.TestMinrelpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestSharedExtension(TestCase)
numpy.distutils.tests.test_misc_util.TestSharedExtension.test_get_shared_lib_extension(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/test_fcompiler_intel.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_intel.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem')
A:numpy.distutils.tests.test_fcompiler_intel.v->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem').version_match(vs)
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions(TestCase)
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions.test_64bit_version(self)
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions(TestCase)
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions.test_32bit_version(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/test_fcompiler_gnu.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_gnu.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95')
A:numpy.distutils.tests.test_fcompiler_gnu.v->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95').version_match(vs)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions(TestCase)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_g77_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_not_g77(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGortranVersions(TestCase)
numpy.distutils.tests.test_fcompiler_gnu.TestGortranVersions.test_gfortran_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGortranVersions.test_not_gfortran(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/setup.py----------------------------------------
A:numpy.distutils.tests.setup.config->Configuration('testnumpydistutils', parent_package, top_path)
numpy.distutils.tests.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/gen_ext/setup.py----------------------------------------
A:numpy.distutils.tests.gen_ext.setup.target->os.path.join(build_dir, 'fib3.f')
A:numpy.distutils.tests.gen_ext.setup.f->open(target, 'w')
A:numpy.distutils.tests.gen_ext.setup.config->Configuration('gen_ext', parent_package, top_path)
numpy.distutils.tests.gen_ext.setup.configuration(parent_package='',top_path=None)
numpy.distutils.tests.gen_ext.setup.source_func(ext,build_dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/gen_ext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/gen_ext/tests/test_fib3.py----------------------------------------
numpy.distutils.tests.gen_ext.tests.test_fib3.TestFib3(TestCase)
numpy.distutils.tests.gen_ext.tests.test_fib3.TestFib3.test_fib(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/swig_ext/setup.py----------------------------------------
A:numpy.distutils.tests.swig_ext.setup.config->Configuration('swig_ext', parent_package, top_path)
numpy.distutils.tests.swig_ext.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/swig_ext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/swig_ext/tests/test_example.py----------------------------------------
numpy.distutils.tests.swig_ext.tests.test_example.TestExample(TestCase)
numpy.distutils.tests.swig_ext.tests.test_example.TestExample.test_cvar(self)
numpy.distutils.tests.swig_ext.tests.test_example.TestExample.test_fact(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/swig_ext/tests/test_example2.py----------------------------------------
A:numpy.distutils.tests.swig_ext.tests.test_example2.z->swig_ext.example2.Zoo()
numpy.distutils.tests.swig_ext.tests.test_example2.TestExample2(TestCase)
numpy.distutils.tests.swig_ext.tests.test_example2.TestExample2.test_zoo(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/pyrex_ext/setup.py----------------------------------------
A:numpy.distutils.tests.pyrex_ext.setup.config->Configuration('pyrex_ext', parent_package, top_path)
numpy.distutils.tests.pyrex_ext.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/pyrex_ext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/pyrex_ext/tests/test_primes.py----------------------------------------
A:numpy.distutils.tests.pyrex_ext.tests.test_primes.l->primes(10)
numpy.distutils.tests.pyrex_ext.tests.test_primes.TestPrimes(TestCase)
numpy.distutils.tests.pyrex_ext.tests.test_primes.TestPrimes.test_simple(self,level=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_f90_ext/setup.py----------------------------------------
A:numpy.distutils.tests.f2py_f90_ext.setup.config->Configuration('f2py_f90_ext', parent_package, top_path)
numpy.distutils.tests.f2py_f90_ext.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_f90_ext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_f90_ext/tests/test_foo.py----------------------------------------
numpy.distutils.tests.f2py_f90_ext.tests.test_foo.TestFoo(TestCase)
numpy.distutils.tests.f2py_f90_ext.tests.test_foo.TestFoo.test_foo_free(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_ext/setup.py----------------------------------------
A:numpy.distutils.tests.f2py_ext.setup.config->Configuration('f2py_ext', parent_package, top_path)
numpy.distutils.tests.f2py_ext.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_ext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/tests/f2py_ext/tests/test_fib2.py----------------------------------------
numpy.distutils.tests.f2py_ext.tests.test_fib2.TestFib2(TestCase)
numpy.distutils.tests.f2py_ext.tests.test_fib2.TestFib2.test_fib(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/intel.py----------------------------------------
A:numpy.distutils.fcompiler.intel.f->dummy_fortran_file()
A:numpy.distutils.fcompiler.intel.version_match->simple_version_match(start='Intel\\(R\\).*?64,')
A:numpy.distutils.fcompiler.intel.opt->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.intel.v->self.get_version()
A:numpy.distutils.fcompiler.intel.idx->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self).index('-shared')
A:numpy.distutils.fcompiler.intel.compiler->new_fcompiler(compiler='intel')
numpy.distutils.fcompiler.intel.BaseIntelFCompiler(FCompiler)
numpy.distutils.fcompiler.intel.BaseIntelFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelItaniumFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.intel_version_match(type)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/absoft.py----------------------------------------
A:numpy.distutils.fcompiler.absoft.f->cyg2win32(dummy_fortran_file())
A:numpy.distutils.fcompiler.absoft.opt->numpy.distutils.fcompiler.FCompiler.get_flags_fix(self)
A:numpy.distutils.fcompiler.absoft.d->os.environ.get('ABSOFT')
A:numpy.distutils.fcompiler.absoft.v->self.get_version()
A:numpy.distutils.fcompiler.absoft.compiler->new_fcompiler(compiler='absoft')
numpy.distutils.fcompiler.absoft.AbsoftFCompiler(FCompiler)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_libraries(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_option(self,lib)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.update_executables(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/nag.py----------------------------------------
A:numpy.distutils.fcompiler.nag.version->self.get_version()
A:numpy.distutils.fcompiler.nag.compiler->new_fcompiler(compiler='nag')
numpy.distutils.fcompiler.nag.NAGFCompiler(FCompiler)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/pathf95.py----------------------------------------
A:numpy.distutils.fcompiler.pathf95.compiler->new_fcompiler(compiler='pathf95')
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler(FCompiler)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/none.py----------------------------------------
A:numpy.distutils.fcompiler.none.compiler->NoneFCompiler()
numpy.distutils.fcompiler.none.NoneFCompiler(FCompiler)
numpy.distutils.fcompiler.none.NoneFCompiler.find_executables(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/g95.py----------------------------------------
A:numpy.distutils.fcompiler.g95.compiler->G95FCompiler()
numpy.distutils.fcompiler.g95.G95FCompiler(FCompiler)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/hpux.py----------------------------------------
A:numpy.distutils.fcompiler.hpux.compiler->new_fcompiler(compiler='hpux')
numpy.distutils.fcompiler.hpux.HPUXFCompiler(FCompiler)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_libraries(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_version(self,force=0,ok_status=[256,0,1])


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/lahey.py----------------------------------------
A:numpy.distutils.fcompiler.lahey.d->os.environ.get('LAHEY')
A:numpy.distutils.fcompiler.lahey.compiler->new_fcompiler(compiler='lahey')
numpy.distutils.fcompiler.lahey.LaheyFCompiler(FCompiler)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_libraries(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_library_dirs(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/vast.py----------------------------------------
A:numpy.distutils.fcompiler.vast.(d, b)->os.path.split(f90)
A:numpy.distutils.fcompiler.vast.vf90->os.path.join(d, 'v' + b)
A:numpy.distutils.fcompiler.vast.vast_version->self.get_version()
A:numpy.distutils.fcompiler.vast.gnu->GnuFCompiler()
A:numpy.distutils.fcompiler.vast.self.version->GnuFCompiler().get_version()
A:numpy.distutils.fcompiler.vast.opt->numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
A:numpy.distutils.fcompiler.vast.compiler->new_fcompiler(compiler='vast')
numpy.distutils.fcompiler.vast.VastFCompiler(GnuFCompiler)
numpy.distutils.fcompiler.vast.VastFCompiler.find_executables(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_version_cmd(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/ibm.py----------------------------------------
A:numpy.distutils.fcompiler.ibm.version->self.get_version(ok_status=[0, 40])
A:numpy.distutils.fcompiler.ibm.lslpp->find_executable('lslpp')
A:numpy.distutils.fcompiler.ibm.xlf->find_executable('xlf')
A:numpy.distutils.fcompiler.ibm.(s, o)->exec_command(lslpp + ' -Lc xlfcmp')
A:numpy.distutils.fcompiler.ibm.m->crt1_match(line)
A:numpy.distutils.fcompiler.ibm.l->sorted(os.listdir(xlf_dir))
A:numpy.distutils.fcompiler.ibm.self.versionversion->LooseVersion(l[0])
A:numpy.distutils.fcompiler.ibm.(fo, new_cfg)->make_temp_file(suffix='_xlf.cfg')
A:numpy.distutils.fcompiler.ibm.fi->open(xlf_cfg, 'r')
A:numpy.distutils.fcompiler.ibm.compiler->IBMFCompiler()
numpy.distutils.fcompiler.ibm.IBMFCompiler(FCompiler)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version(self,*args,**kwds)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/sun.py----------------------------------------
A:numpy.distutils.fcompiler.sun.version_match->simple_version_match(start='f9[05]: (Sun|Forte|WorkShop).*Fortran 95')
A:numpy.distutils.fcompiler.sun.compiler->new_fcompiler(compiler='sun')
numpy.distutils.fcompiler.sun.SunFCompiler(FCompiler)
numpy.distutils.fcompiler.sun.SunFCompiler.get_arch(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_libraries(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/mips.py----------------------------------------
A:numpy.distutils.fcompiler.mips.r->self.get_flags_arch_f77()
A:numpy.distutils.fcompiler.mips.compiler->new_fcompiler(compiler='mips')
numpy.distutils.fcompiler.mips.MIPSFCompiler(FCompiler)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f77(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f90(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/compaq.py----------------------------------------
A:numpy.distutils.fcompiler.compaq.m->MSVCCompiler()
A:numpy.distutils.fcompiler.compaq.msg->get_exception()
A:numpy.distutils.fcompiler.compaq.e->get_exception()
A:numpy.distutils.fcompiler.compaq.compiler->new_fcompiler(compiler='compaq')
numpy.distutils.fcompiler.compaq.CompaqFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/gnu.py----------------------------------------
A:numpy.distutils.fcompiler.gnu.TARGET_R->re.compile('Target: ([a-zA-Z0-9_\\-]*)')
A:numpy.distutils.fcompiler.gnu.m->re.compile('Target: ([a-zA-Z0-9_\\-]*)').search(output)
A:numpy.distutils.fcompiler.gnu.v->self.gnu_version_match(version_string)
A:numpy.distutils.fcompiler.gnu.target->self.get_target()
A:numpy.distutils.fcompiler.gnu.filename->distutils.sysconfig.get_makefile_filename()
A:numpy.distutils.fcompiler.gnu.(status, output)->exec_command(self.compiler_f77 + ['-v'], use_tee=0)
A:numpy.distutils.fcompiler.gnu.d->os.path.dirname(filename)
A:numpy.distutils.fcompiler.gnu.d2->os.path.abspath(os.path.join(d, '../../../../lib'))
A:numpy.distutils.fcompiler.gnu.runtime_lib->msvc_runtime_library()
A:numpy.distutils.fcompiler.gnu.arch_re->re.compile('-arch\\s+(\\w+)')
A:numpy.distutils.fcompiler.gnu.c_archs->self._c_arch_flags()
A:numpy.distutils.fcompiler.gnu.flags->GnuFCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.gnu.arch_flags->self._universal_flags(self.linker_so)
A:numpy.distutils.fcompiler.gnu.opt->GnuFCompiler.get_libraries(self)
A:numpy.distutils.fcompiler.gnu.root->os.path.join(d, os.pardir, os.pardir, os.pardir, os.pardir)
A:numpy.distutils.fcompiler.gnu.mingwdir->os.path.normpath(os.path.join(root, target, 'lib'))
A:numpy.distutils.fcompiler.gnu.full->os.path.join(mingwdir, 'libmingwex.a')
A:numpy.distutils.fcompiler.gnu.i->GnuFCompiler.get_libraries(self).index('gcc')
A:numpy.distutils.fcompiler.gnu.(fid, filename)->tempfile.mkstemp(suffix='.f')
A:numpy.distutils.fcompiler.gnu.p->Popen(newcmd, stderr=STDOUT, stdout=PIPE, cwd=d)
A:numpy.distutils.fcompiler.gnu.compiler->Gnu95FCompiler()
A:numpy.distutils.fcompiler.gnu.msg->get_exception()
numpy.distutils.fcompiler.gnu.Gnu95FCompiler(GnuFCompiler)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags(self,cmd)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu.GnuFCompiler(FCompiler)
numpy.distutils.fcompiler.gnu.GnuFCompiler._c_arch_flags(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match(self,version_string)
numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu._can_target(cmd,arch)
numpy.distutils.fcompiler.gnu.is_win64()


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/__init__.py----------------------------------------
A:numpy.distutils.fcompiler.__init__.distutils_vars->EnvironmentConfig(distutils_section='config_fc', noopt=(None, None, 'noopt', str2bool), noarch=(None, None, 'noarch', str2bool), debug=(None, None, 'debug', str2bool), verbose=(None, None, 'verbose', str2bool))
A:numpy.distutils.fcompiler.__init__.command_vars->EnvironmentConfig(distutils_section='config_fc', compiler_f77=('exe.compiler_f77', 'F77', 'f77exec', None), compiler_f90=('exe.compiler_f90', 'F90', 'f90exec', None), compiler_fix=('exe.compiler_fix', 'F90', 'f90exec', None), version_cmd=('exe.version_cmd', None, None, None), linker_so=('exe.linker_so', 'LDSHARED', 'ldshared', None), linker_exe=('exe.linker_exe', 'LD', 'ld', None), archiver=(None, 'AR', 'ar', None), ranlib=(None, 'RANLIB', 'ranlib', None))
A:numpy.distutils.fcompiler.__init__.flag_vars->EnvironmentConfig(distutils_section='config_fc', f77=('flags.f77', 'F77FLAGS', 'f77flags', flaglist), f90=('flags.f90', 'F90FLAGS', 'f90flags', flaglist), free=('flags.free', 'FREEFLAGS', 'freeflags', flaglist), fix=('flags.fix', None, None, flaglist), opt=('flags.opt', 'FOPT', 'opt', flaglist), opt_f77=('flags.opt_f77', None, None, flaglist), opt_f90=('flags.opt_f90', None, None, flaglist), arch=('flags.arch', 'FARCH', 'arch', flaglist), arch_f77=('flags.arch_f77', None, None, flaglist), arch_f90=('flags.arch_f90', None, None, flaglist), debug=('flags.debug', 'FDEBUG', 'fdebug', flaglist), debug_f77=('flags.debug_f77', None, None, flaglist), debug_f90=('flags.debug_f90', None, None, flaglist), flags=('self.get_flags', 'FFLAGS', 'fflags', flaglist), linker_so=('flags.linker_so', 'LDFLAGS', 'ldflags', flaglist), linker_exe=('flags.linker_exe', 'LDFLAGS', 'ldflags', flaglist), ar=('flags.ar', 'ARFLAGS', 'arflags', flaglist))
A:numpy.distutils.fcompiler.__init__.shared_lib_extension->get_shared_lib_extension()
A:numpy.distutils.fcompiler.__init__.self.distutils_vars->self.distutils_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.command_vars->self.command_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.flag_vars->self.flag_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.executables->self.executables.copy()
A:numpy.distutils.fcompiler.__init__.obj->self.__new__(self.__class__)
A:numpy.distutils.fcompiler.__init__.obj.distutils_vars->self.__new__(self.__class__).distutils_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.command_vars->self.__new__(self.__class__).command_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.flag_vars->self.__new__(self.__class__).flag_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.executables->self.__new__(self.__class__).executables.copy()
A:numpy.distutils.fcompiler.__init__.version_cmd->_command_property('version_cmd')
A:numpy.distutils.fcompiler.__init__.compiler_f77->_command_property('compiler_f77')
A:numpy.distutils.fcompiler.__init__.compiler_f90->_command_property('compiler_f90')
A:numpy.distutils.fcompiler.__init__.compiler_fix->_command_property('compiler_fix')
A:numpy.distutils.fcompiler.__init__.linker_so->_command_property('linker_so')
A:numpy.distutils.fcompiler.__init__.linker_exe->_command_property('linker_exe')
A:numpy.distutils.fcompiler.__init__.archiver->_command_property('archiver')
A:numpy.distutils.fcompiler.__init__.ranlib->_command_property('ranlib')
A:numpy.distutils.fcompiler.__init__.value->split_quoted(value)
A:numpy.distutils.fcompiler.__init__.fc_exe->cached_find_executable(exe)
A:numpy.distutils.fcompiler.__init__.cmd->self.executables.get(key, None)
A:numpy.distutils.fcompiler.__init__.exe_from_environ->getattr(self.command_vars, exe_key)
A:numpy.distutils.fcompiler.__init__.seen->set()
A:numpy.distutils.fcompiler.__init__.f90->set_exe('compiler_f90')
A:numpy.distutils.fcompiler.__init__.f77->set_exe('compiler_f77', f90=f90)
A:numpy.distutils.fcompiler.__init__.version->numpy.distutils.ccompiler.CCompiler.get_version(self, force=force, ok_status=ok_status)
A:numpy.distutils.fcompiler.__init__.noopt->self.distutils_vars.get('noopt', False)
A:numpy.distutils.fcompiler.__init__.noarch->self.distutils_vars.get('noarch', noopt)
A:numpy.distutils.fcompiler.__init__.debug->self.distutils_vars.get('debug', False)
A:numpy.distutils.fcompiler.__init__.this_get->getattr(self, 'get_flags_' + tag)
A:numpy.distutils.fcompiler.__init__.python_lib->get_python_lib(standard_lib=1)
A:numpy.distutils.fcompiler.__init__.ld_so_aix->os.path.join(python_lib, 'config', 'ld_so_aix')
A:numpy.distutils.fcompiler.__init__.python_exp->os.path.join(python_lib, 'config', 'python.exp')
A:numpy.distutils.fcompiler.__init__.v->new_fcompiler(compiler=compiler, verbose=dist.verbose).get_version()
A:numpy.distutils.fcompiler.__init__.pretty_printer->FancyGetopt(compilers_ni)
A:numpy.distutils.fcompiler.__init__.src_flags->get_f77flags(src)
A:numpy.distutils.fcompiler.__init__.extra_flags->get_f77flags(src).get(self.compiler_type, [])
A:numpy.distutils.fcompiler.__init__.msg->str(get_exception())
A:numpy.distutils.fcompiler.__init__.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.fcompiler.__init__.(libraries, library_dirs, runtime_library_dirs)->self._fix_lib_args(libraries, library_dirs, runtime_library_dirs)
A:numpy.distutils.fcompiler.__init__.lib_opts->gen_lib_options(self, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.fcompiler.__init__.output_filename->os.path.join(output_dir, output_filename)
A:numpy.distutils.fcompiler.__init__.hook->getattr(self, 'get_flags_' + hook_name)
A:numpy.distutils.fcompiler.__init__.pys->os.path.join(os.path.dirname(__file__), '*.py')
A:numpy.distutils.fcompiler.__init__.(module_name, ext)->os.path.splitext(os.path.basename(fname))
A:numpy.distutils.fcompiler.__init__.klass->getattr(module, cname)
A:numpy.distutils.fcompiler.__init__.dist->Distribution()
A:numpy.distutils.fcompiler.__init__.c->new_fcompiler(compiler=compiler, verbose=dist.verbose)
A:numpy.distutils.fcompiler.__init__.matching_compiler_types->available_fcompilers_for_platform(osname, platform)
A:numpy.distutils.fcompiler.__init__.compiler_type->_find_existing_fcompiler(matching_compiler_types, osname=osname, platform=platform, requiref90=requiref90, c_compiler=c_compiler)
A:numpy.distutils.fcompiler.__init__.compiler->klass(verbose=verbose, dry_run=dry_run, force=force)
A:numpy.distutils.fcompiler.__init__.dist.script_name->os.path.basename(sys.argv[0])
A:numpy.distutils.fcompiler.__init__.platform_compilers->available_fcompilers_for_platform()
A:numpy.distutils.fcompiler.__init__.e->get_exception()
A:numpy.distutils.fcompiler.__init__.compilers_ni->list(set(fcompiler_class.keys()) - set(platform_compilers))
A:numpy.distutils.fcompiler.__init__.(fo, name)->make_temp_file(suffix='.f')
A:numpy.distutils.fcompiler.__init__.f->open_latin1(src, 'r')
A:numpy.distutils.fcompiler.__init__.line->open_latin1(src, 'r').readline()
A:numpy.distutils.fcompiler.__init__._f77flags_re->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I)
A:numpy.distutils.fcompiler.__init__.m->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line)
A:numpy.distutils.fcompiler.__init__.fcname->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fcname').strip()
A:numpy.distutils.fcompiler.__init__.fflags->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fflags').strip()
A:numpy.distutils.fcompiler.__init__.flags[fcname]->split_quoted(fflags)
numpy.distutils.fcompiler.__init__.CompilerNotFound(Exception)
numpy.distutils.fcompiler.__init__.FCompiler(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.__copy__(self)
numpy.distutils.fcompiler.__init__.FCompiler.__init__(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler._command_property(key)
numpy.distutils.fcompiler.__init__.FCompiler._compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.fcompiler.__init__.FCompiler._environment_hook(self,name,hook_name)
numpy.distutils.fcompiler.__init__.FCompiler._get_command_flags(self,key)
numpy.distutils.fcompiler.__init__.FCompiler.copy(self)
numpy.distutils.fcompiler.__init__.FCompiler.customize(self,dist=None)
numpy.distutils.fcompiler.__init__.FCompiler.dump_properties(self)
numpy.distutils.fcompiler.__init__.FCompiler.find_executables(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_ar(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_free(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_exe(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_libraries(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_version(self,force=False,ok_status=[0])
numpy.distutils.fcompiler.__init__.FCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.__init__.FCompiler.library_option(self,lib)
numpy.distutils.fcompiler.__init__.FCompiler.link(self,target_desc,objects,output_filename,output_dir=None,libraries=None,library_dirs=None,runtime_library_dirs=None,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.fcompiler.__init__.FCompiler.module_options(self,module_dirs,module_build_dir)
numpy.distutils.fcompiler.__init__.FCompiler.set_command(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.set_commands(self,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.set_executable(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.update_executables(elf)
numpy.distutils.fcompiler.__init__._find_existing_fcompiler(compiler_types,osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.available_fcompilers_for_platform(osname=None,platform=None)
numpy.distutils.fcompiler.__init__.dummy_fortran_file()
numpy.distutils.fcompiler.__init__.flaglist(s)
numpy.distutils.fcompiler.__init__.get_default_fcompiler(osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.get_f77flags(src)
numpy.distutils.fcompiler.__init__.has_f90_header(src)
numpy.distutils.fcompiler.__init__.is_free_format(file)
numpy.distutils.fcompiler.__init__.is_sequence_of_strings(seq)
numpy.distutils.fcompiler.__init__.load_all_fcompiler_classes()
numpy.distutils.fcompiler.__init__.new_fcompiler(plat=None,compiler=None,verbose=0,dry_run=0,force=0,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.show_fcompilers(dist=None)
numpy.distutils.fcompiler.__init__.str2bool(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/fcompiler/pg.py----------------------------------------
A:numpy.distutils.fcompiler.pg.compiler->new_fcompiler(compiler='pg')
numpy.distutils.fcompiler.pg.PGroupFCompiler(FCompiler)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/autodist.py----------------------------------------
A:numpy.distutils.command.autodist.st->cmd.try_compile(body % {'inline': kw}, None, None)
numpy.distutils.command.autodist.check_compiler_gcc4(cmd)
numpy.distutils.command.autodist.check_inline(cmd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/develop.py----------------------------------------
numpy.distutils.command.develop.develop(old_develop)
numpy.distutils.command.develop.develop.install_for_development(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build.py----------------------------------------
A:numpy.distutils.command.build.self.build_scripts->os.path.join(self.build_base, 'scripts' + plat_specifier)
numpy.distutils.command.build.build(old_build)
numpy.distutils.command.build.build.finalize_options(self)
numpy.distutils.command.build.build.initialize_options(self)
numpy.distutils.command.build.build.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/install_data.py----------------------------------------
numpy.distutils.command.install_data.install_data(old_install_data)
numpy.distutils.command.install_data.install_data.finalize_options(self)
numpy.distutils.command.install_data.install_data.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/egg_info.py----------------------------------------
numpy.distutils.command.egg_info.egg_info(_egg_info)
numpy.distutils.command.egg_info.egg_info.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/install.py----------------------------------------
A:numpy.distutils.command.install.caller->sys._getframe(3)
A:numpy.distutils.command.install.caller_module->sys._getframe(3).f_globals.get('__name__', '')
A:numpy.distutils.command.install.r->self.setuptools_run()
A:numpy.distutils.command.install.f->open(self.record, 'r')
A:numpy.distutils.command.install.l->l.rstrip().rstrip()
numpy.distutils.command.install.install(old_install)
numpy.distutils.command.install.install.finalize_options(self)
numpy.distutils.command.install.install.run(self)
numpy.distutils.command.install.install.setuptools_run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/install_clib.py----------------------------------------
A:numpy.distutils.command.install_clib.build_clib_cmd->get_cmd('build_clib')
A:numpy.distutils.command.install_clib.compiler->new_compiler(compiler=None)
A:numpy.distutils.command.install_clib.target_dir->os.path.join(self.install_dir, l.target_dir)
A:numpy.distutils.command.install_clib.name->new_compiler(compiler=None).library_filename(l.name)
A:numpy.distutils.command.install_clib.source->os.path.join(build_dir, name)
numpy.distutils.command.install_cinstall_cfinalize_options(self)
numpy.distutils.command.install_cinstall_cget_outputs(self)
numpy.distutils.command.install_cinstall_cinitialize_options(self)
numpy.distutils.command.install_cinstall_clib(Command)
numpy.distutils.command.install_cinstall_crun(self)
numpy.distutils.command.install_clib.install_clib(Command)
numpy.distutils.command.install_clib.install_clib.finalize_options(self)
numpy.distutils.command.install_clib.install_clib.get_outputs(self)
numpy.distutils.command.install_clib.install_clib.initialize_options(self)
numpy.distutils.command.install_clib.install_clib.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build_clib.py----------------------------------------
A:numpy.distutils.command.build_clib.l->build_info.get('language', None)
A:numpy.distutils.command.build_clib.self.compiler->new_compiler(compiler=self.compiler, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_clib.self._f_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90='f90' in languages, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.libname->self.compiler.library_filename(l.name)
A:numpy.distutils.command.build_clib.source->os.path.join(self.build_clib, libname)
A:numpy.distutils.command.build_clib.target->os.path.join(l.target_dir, libname)
A:numpy.distutils.command.build_clib.sources->list(sources)
A:numpy.distutils.command.build_clib.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(sources)
A:numpy.distutils.command.build_clib.lib_file->compiler.library_filename(lib_name, output_dir=self.build_clib)
A:numpy.distutils.command.build_clib.config_fc->build_info.get('config_fc', {})
A:numpy.distutils.command.build_clib.fcompiler->new_fcompiler(compiler=fcompiler.compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=requiref90, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.base_config_fc->dist.get_option_dict('config_fc').copy()
A:numpy.distutils.command.build_clib.macros->build_info.get('macros')
A:numpy.distutils.command.build_clib.include_dirs->build_info.get('include_dirs')
A:numpy.distutils.command.build_clib.module_build_dir->os.path.dirname(lib_file)
A:numpy.distutils.command.build_clib.objects->compiler.compile(c_sources, output_dir=self.build_temp, macros=macros, include_dirs=include_dirs, debug=self.debug, extra_postargs=extra_postargs)
A:numpy.distutils.command.build_clib.cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_clib.cxx_objects->compiler.cxx_compiler().compile(cxx_sources, output_dir=self.build_temp, macros=macros, include_dirs=include_dirs, debug=self.debug, extra_postargs=extra_postargs)
A:numpy.distutils.command.build_clib.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_clib.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_clib.clib_libraries->build_info.get('libraries', [])
numpy.distutils.command.build_cbuild_cbuild_a_library(self,build_info,lib_name,libraries)
numpy.distutils.command.build_cbuild_cbuild_libraries(self,libraries)
numpy.distutils.command.build_cbuild_cget_source_files(self)
numpy.distutils.command.build_cbuild_chave_cxx_sources(self)
numpy.distutils.command.build_cbuild_chave_f_sources(self)
numpy.distutils.command.build_cbuild_cinitialize_options(self)
numpy.distutils.command.build_cbuild_clib(old_build_clib)
numpy.distutils.command.build_cbuild_crun(self)
numpy.distutils.command.build_clib.build_clib(old_build_clib)
numpy.distutils.command.build_clib.build_clib.build_a_library(self,build_info,lib_name,libraries)
numpy.distutils.command.build_clib.build_clib.build_libraries(self,libraries)
numpy.distutils.command.build_clib.build_clib.get_source_files(self)
numpy.distutils.command.build_clib.build_clib.have_cxx_sources(self)
numpy.distutils.command.build_clib.build_clib.have_f_sources(self)
numpy.distutils.command.build_clib.build_clib.initialize_options(self)
numpy.distutils.command.build_clib.build_clib.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/config_compiler.py----------------------------------------
A:numpy.distutils.command.config_compiler.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.config_compiler.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.config_compiler.config->self.get_finalized_command('config')
A:numpy.distutils.command.config_compiler.build->self.get_finalized_command('build')
A:numpy.distutils.command.config_compiler.v->getattr(c, a)
numpy.distutils.command.config_compiler.config_cc(Command)
numpy.distutils.command.config_compiler.config_cc.finalize_options(self)
numpy.distutils.command.config_compiler.config_cc.initialize_options(self)
numpy.distutils.command.config_compiler.config_cc.run(self)
numpy.distutils.command.config_compiler.config_fc(Command)
numpy.distutils.command.config_compiler.config_fc.finalize_options(self)
numpy.distutils.command.config_compiler.config_fc.initialize_options(self)
numpy.distutils.command.config_compiler.config_fc.run(self)
numpy.distutils.command.config_compiler.show_fortran_compilers(_cache=[])


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/bdist_rpm.py----------------------------------------
A:numpy.distutils.command.bdist_rpm.spec_file->distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)
A:numpy.distutils.command.bdist_rpm.setup_py->os.path.basename(sys.argv[0])
A:numpy.distutils.command.bdist_rpm.line->line.replace('setup.py', setup_py).replace('setup.py', setup_py)
numpy.distutils.command.bdist_rpm.bdist_rpm(old_bdist_rpm)
numpy.distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build_ext.py----------------------------------------
A:numpy.distutils.command.build_ext.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.build_ext.self.compiler->new_compiler(compiler=compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_ext.all_languages->set()
A:numpy.distutils.command.build_ext.ext_languages->set()
A:numpy.distutils.command.build_ext.self._cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_ext.self._f77_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=False, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.self._f90_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=True, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.sources->list(sources)
A:numpy.distutils.command.build_ext.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_ext.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_ext.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_ext.build_py->self.get_finalized_command('build_py')
A:numpy.distutils.command.build_ext.package_dir->self.get_finalized_command('build_py').get_package_dir(package)
A:numpy.distutils.command.build_ext.ext_filename->os.path.join(self.build_lib, self.get_ext_filename(fullname))
A:numpy.distutils.command.build_ext.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(ext.sources)
A:numpy.distutils.command.build_ext.c_objects->self.compiler.compile(c_sources, output_dir=output_dir, macros=macros, include_dirs=include_dirs, debug=self.debug, extra_postargs=extra_args, **kws)
A:numpy.distutils.command.build_ext.module_build_dir->os.path.join(self.build_temp, os.path.dirname(self.get_ext_filename(fullname)))
A:numpy.distutils.command.build_ext.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_ext.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_ext.objects->self.compiler.compile([os.path.join(build_src, 'gfortran_vs2003_hack.c')], output_dir=self.build_temp)
A:numpy.distutils.command.build_ext.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.build_ext.libfile2->os.path.join(self.build_temp, libname + '.lib')
A:numpy.distutils.command.build_ext.(s, o)->exec_command(['cygpath', '-w', dir], use_tee=False)
A:numpy.distutils.command.build_ext.p->combine_paths(f_lib_dirs, 'lib' + lib + '.a')
A:numpy.distutils.command.build_ext.dst_name->os.path.join(self.build_temp, lib + '.lib')
numpy.distutils.command.build_ext.build_ext(old_build_ext)
numpy.distutils.command.build_ext.build_ext._add_dummy_mingwex_sym(self,c_sources)
numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran(self,fcompiler,c_libraries,c_library_dirs)
numpy.distutils.command.build_ext.build_ext.build_extension(self,ext)
numpy.distutils.command.build_ext.build_ext.finalize_options(self)
numpy.distutils.command.build_ext.build_ext.get_outputs(self)
numpy.distutils.command.build_ext.build_ext.get_source_files(self)
numpy.distutils.command.build_ext.build_ext.initialize_options(self)
numpy.distutils.command.build_ext.build_ext.run(self)
numpy.distutils.command.build_ext.build_ext.swig_sources(self,sources)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/config.py----------------------------------------
A:numpy.distutils.command.config.e->get_exception()
A:numpy.distutils.command.config.self.fcompiler->new_fcompiler(compiler=self.fcompiler, dry_run=self.dry_run, force=1, c_compiler=self.compiler)
A:numpy.distutils.command.config.ret->mth(*(self,) + args)
A:numpy.distutils.command.config.msg->str(get_exception())
A:numpy.distutils.command.config.(s, o)->exec_command(['cygpath', '-w', d], use_tee=False)
A:numpy.distutils.command.config.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.config.libfile2->os.path.join(libdir, '%s.lib' % libname)
A:numpy.distutils.command.config.grabber->GrabStdout()
A:numpy.distutils.command.config.(src, obj, exe)->self._link(body, headers, include_dirs, libraries, library_dirs, lang)
A:numpy.distutils.command.config.exe->os.path.join('.', exe)
A:numpy.distutils.command.config.(exitstatus, output)->exec_command(exe, execute_in='.', use_tee=use_tee)
A:numpy.distutils.command.config.exitcode->os.WEXITSTATUS(exitstatus)
A:numpy.distutils.command.config.sig->os.WTERMSIG(exitstatus)
numpy.distutils.command.config.GrabStdout(self)
numpy.distutils.command.config.GrabStdout.__init__(self)
numpy.distutils.command.config.GrabStdout.flush(self)
numpy.distutils.command.config.GrabStdout.restore(self)
numpy.distutils.command.config.GrabStdout.write(self,data)
numpy.distutils.command.config.config(old_config)
numpy.distutils.command.config.config._check_compiler(self)
numpy.distutils.command.config.config._compile(self,body,headers,include_dirs,lang)
numpy.distutils.command.config.config._link(self,body,headers,include_dirs,libraries,library_dirs,lang)
numpy.distutils.command.config.config._wrap_method(self,mth,lang,args)
numpy.distutils.command.config.config.check_compiler_gcc4(self)
numpy.distutils.command.config.config.check_decl(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_func(self,func,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_funcs_once(self,funcs,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_header(self,header,include_dirs=None,library_dirs=None,lang='c')
numpy.distutils.command.config.config.check_inline(self)
numpy.distutils.command.config.config.check_macro_true(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_type(self,type_name,headers=None,include_dirs=None,library_dirs=None)
numpy.distutils.command.config.config.check_type_size(self,type_name,headers=None,include_dirs=None,library_dirs=None,expected=None)
numpy.distutils.command.config.config.get_output(self,body,headers=None,include_dirs=None,libraries=None,library_dirs=None,lang='c',use_tee=None)
numpy.distutils.command.config.config.initialize_options(self)
numpy.distutils.command.config.config.try_run(self,body,headers=None,include_dirs=None,libraries=None,library_dirs=None,lang='c')


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build_src.py----------------------------------------
A:numpy.distutils.command.build_src.var->re.compile('@([a-zA-Z_]+)@')
A:numpy.distutils.command.build_src.fs->open(source, 'r')
A:numpy.distutils.command.build_src.ft->open(target, 'w')
A:numpy.distutils.command.build_src.m->_f2py_module_name_match(line)
A:numpy.distutils.command.build_src.self.build_src->os.path.join(self.build_base, 'src' + plat_specifier)
A:numpy.distutils.command.build_src.self.f2py_opts->shlex.split(self.f2py_opts)
A:numpy.distutils.command.build_src.self.swig_opts->shlex.split(self.swig_opts)
A:numpy.distutils.command.build_src.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.build_src.v->getattr(build_ext, c, None)
A:numpy.distutils.command.build_src.build_dir->os.path.join(*[self.build_src] + name.split('.')[:-1])
A:numpy.distutils.command.build_src.s->f()
A:numpy.distutils.command.build_src.filenames->get_data_files((d, files))
A:numpy.distutils.command.build_src.template_dir->os.path.dirname(template)
A:numpy.distutils.command.build_src.generated_dir->os.path.join(self.build_src, template_dir, install_dir)
A:numpy.distutils.command.build_src.generated->os.path.basename(os.path.splitext(template)[0])
A:numpy.distutils.command.build_src.generated_path->os.path.join(generated_dir, generated)
A:numpy.distutils.command.build_src.full_install_dir->os.path.join(template_dir, install_dir)
A:numpy.distutils.command.build_src.install_cmd->copy.copy(get_cmd('install'))
A:numpy.distutils.command.build_src.prefix->os.path.join(os.path.abspath(top_prefix), pkg_path)
A:numpy.distutils.command.build_src.(install_dir, generated)->self._build_npy_pkg_config(info, d)
A:numpy.distutils.command.build_src.target->os.path.join(target_dir, '%s_wrap%s' % (name, ext))
A:numpy.distutils.command.build_src.source->func(extension, build_dir)
A:numpy.distutils.command.build_src.sources->self.pyrex_sources(sources, ext)
A:numpy.distutils.command.build_src.(sources, h_files)->self.filter_h_files(sources)
A:numpy.distutils.command.build_src.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_src.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_src.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_src.self.ext_target_dir->self.get_package_dir(package)
A:numpy.distutils.command.build_src.(sources, py_files)->self.filter_py_files(sources)
A:numpy.distutils.command.build_src.(base, ext)->os.path.splitext(source)
A:numpy.distutils.command.build_src.depends->extension[1].get('depends')
A:numpy.distutils.command.build_src.include_dirs->extension[1].get('include_dirs')
A:numpy.distutils.command.build_src.target_dir->os.path.dirname(base)
A:numpy.distutils.command.build_src.target_file->_find_swig_target(target_dir, name)
A:numpy.distutils.command.build_src.outstr->process_c_file(source)
A:numpy.distutils.command.build_src.fid->open(target_file, 'w')
A:numpy.distutils.command.build_src.d->os.path.dirname(numpy.f2py.__file__)
A:numpy.distutils.command.build_src.options->Pyrex.Compiler.Main.CompilationOptions(defaults=Pyrex.Compiler.Main.default_options, include_path=extension.include_dirs, output_file=target_file)
A:numpy.distutils.command.build_src.pyrex_result->Pyrex.Compiler.Main.compile(source, options=options)
A:numpy.distutils.command.build_src.name->_f2py_module_name_match(line).group('name')
A:numpy.distutils.command.build_src.target_c->os.path.join(self.build_src, 'fortranobject.c')
A:numpy.distutils.command.build_src.target_h->os.path.join(self.build_src, 'fortranobject.h')
A:numpy.distutils.command.build_src.source_c->os.path.join(d, 'src', 'fortranobject.c')
A:numpy.distutils.command.build_src.source_h->os.path.join(d, 'src', 'fortranobject.h')
A:numpy.distutils.command.build_src.filename->os.path.join(target_dir, ext_name + name_ext)
A:numpy.distutils.command.build_src.typ->get_swig_target(source)
A:numpy.distutils.command.build_src.typ2->get_swig_target(source)
A:numpy.distutils.command.build_src.f->open(source)
A:numpy.distutils.command.build_src.line->open(source).readline()
numpy.distutils.command.build_src._find_swig_target(target_dir,name)
numpy.distutils.command.build_src.build_src(build_ext.build_ext)
numpy.distutils.command.build_src.build_src._build_npy_pkg_config(self,info,gd)
numpy.distutils.command.build_src.build_src.build_data_files_sources(self)
numpy.distutils.command.build_src.build_src.build_extension_sources(self,ext)
numpy.distutils.command.build_src.build_src.build_library_sources(self,lib_name,build_info)
numpy.distutils.command.build_src.build_src.build_npy_pkg_config(self)
numpy.distutils.command.build_src.build_src.build_py_modules_sources(self)
numpy.distutils.command.build_src.build_src.build_sources(self)
numpy.distutils.command.build_src.build_src.f2py_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.filter_files(self,sources,exts=[])
numpy.distutils.command.build_src.build_src.filter_h_files(self,sources)
numpy.distutils.command.build_src.build_src.filter_py_files(self,sources)
numpy.distutils.command.build_src.build_src.finalize_options(self)
numpy.distutils.command.build_src.build_src.generate_a_pyrex_source(self,base,ext_name,source,extension)
numpy.distutils.command.build_src.build_src.generate_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.initialize_options(self)
numpy.distutils.command.build_src.build_src.pyrex_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.run(self)
numpy.distutils.command.build_src.build_src.swig_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.template_sources(self,sources,extension)
numpy.distutils.command.build_src.get_f2py_modulename(source)
numpy.distutils.command.build_src.get_swig_modulename(source)
numpy.distutils.command.build_src.get_swig_target(source)
numpy.distutils.command.build_src.have_pyrex()
numpy.distutils.command.build_src.subst_vars(target,source,d)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build_scripts.py----------------------------------------
A:numpy.distutils.command.build_scripts.script->func(build_dir)
A:numpy.distutils.command.build_scripts.self.scripts->self.generate_scripts(self.scripts)
numpy.distutils.command.build_scripts.build_scripts(old_build_scripts)
numpy.distutils.command.build_scripts.build_scripts.generate_scripts(self,scripts)
numpy.distutils.command.build_scripts.build_scripts.get_source_files(self)
numpy.distutils.command.build_scripts.build_scripts.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/build_py.py----------------------------------------
A:numpy.distutils.command.build_py.build_src->self.get_finalized_command('build_src')
A:numpy.distutils.command.build_py.self.packages->list(build_src.py_modules_dict.keys())
A:numpy.distutils.command.build_py.modules->distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py(old_build_py)
numpy.distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py.find_package_modules(self,package,package_dir)
numpy.distutils.command.build_py.build_py.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/install_headers.py----------------------------------------
A:numpy.distutils.command.install_headers.prefix->os.path.dirname(self.install_dir)
A:numpy.distutils.command.install_headers.d->os.path.join(*[prefix] + header[0].split('.'))
A:numpy.distutils.command.install_headers.(out, _)->self.copy_file(header, d)
numpy.distutils.command.install_headers.install_headers(old_install_headers)
numpy.distutils.command.install_headers.install_headers.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/sdist.py----------------------------------------
numpy.distutils.command.sdist.sdist(old_sdist)
numpy.distutils.command.sdist.sdist.add_defaults(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.8.2/distutils/command/__init__.py----------------------------------------
A:numpy.distutils.command.__init__.a->np.NA(2)
numpy.distutils.command.__init__.test_na_writable_attributes_deletion()

